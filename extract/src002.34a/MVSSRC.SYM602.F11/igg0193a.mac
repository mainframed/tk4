193A     TITLE 'IGG0193A -  BDAM OPEN EXECUTOR'
IGG0193A CSECT
***********************************************************************
*                                                                     *
*  MODULE NAME = IGG0193A                                             *
*                                                                     *
*  DESCRIPTIVE NAME = BDAM OPEN EXECUTOR                              *
*                                                                     *
*  COPYRIGHT = NONE                                                   *
*                                                                     *
*  STATUS = 001                                                       *
*                                                                     *
*                                                                     *
*  FUNCTION/OPERATION:                                                *
*   THIS ROUTINE, CONSISTING OF 7 FUNCTIONS, IS THE ONLY OPEN EXECUTOR*
*   DURING OPEN PROCESSING OF A DCB WITH DSORG=DA. IT INCORPORATES    *
*   THE FUNCTIONS ASSOCIATED IN EARLIER RELEASES WITH BDAM EXECUTORS, *
*   IGG0193C,IGG0193E,IGG0193G AND IGG0193F. THESE 4 EXECUTORS NO     *
*   LONGER EXIST AS OF VS 2,RELEASE 2.                                *
*                                                                     *
*   FUNCTION I:                                                       *
*   THIS ROUTINE(A) DETERMINES THE PROTECTED CORE REQUIRED FOR AN IOS *
*   APPENDAGE LIST AND THE DEB AND GETS THE REQUIRED CORE.THE 2ND HALF*
*   OF THIS ROUTINE(B) CONSTRUCTS THE DEB AND ATTACHES AS MANY EXTENTS*
*   AS ARE PRESENT IN THE DSCB(S).  IF THE BDAM DATA SET RESIDES ON   *
*   MSS VIRTUAL DASD, THE DEB IS USED TO BUILD AN EXTENT LIST FOR     *
*   ACQUIRING SPACE ON DASD FOR THAT DATA SET.                        *
*   IF THIS IS A VIO DATA SET AND THE DCBOPTCD FIELD SPECIFIES        *
*   EXTENDED SEARCH, THE DEB EXTENT WILL BE TRUNCATED TO THE TRUE     *
*   SIZE OF THE DATA SET AS DETERMINED BY THE LAST RECORD WRITTEN     *
*   DURING BDAM CREATE. THIS IS TO PREVENT SEARCHING OF UNUSED        *
*   TRACKS.                                                           *
*                                                                     *
*   FUNCTION II:                                                      *
*   THIS ROUTINE LOADS ALL REQUIRED BDAM MODULES AS SPECIFIED IN THE  *
*   DCB FIELDS- MACRF, RECFM, OPTCD, BUFTEK- AND STORES THEIR         *
*   MODULE ID AND A COUNT OF MODULES LOADED INTO THE DEB. MODULE      *
*   ADDRESSES ARE STORED IN THE DEBAVT OR DCB AS REQUIRED.            *
*                                                                     *
*   FUNCTION III:                                                     *
*   THIS ROUTINE INITIALIZES CERTAIN FIELDS IN THE DCB.  AN IRB IS    *
*   CONSTRUCTED AND ITS ADDRESS PLACED IN THE DEB.  IF EXCLUSIVE      *
*   CONTROL IS REQUESTED OR REQUIRED, THIS ROUTINE GETS CORE FOR      *
*   THE READ EXCLUSIVE LIST AND INITIALIZES IT.                       *
*                                                                     *
*   FUNCTION IV:                                                      *
*   IF RELATIVE BLOCK ADDRESSING IS SPECIFIED, THE RELATIVE EXTENTS   *
*   WILL BE APPENDED TO THE DEB WHICH HAS ALREADY BEEN CONSTRUCTED    *
*   IN FUNCTION I. THE FORMAT OF THESE RELATIVE EXTENTS IS,           *
*          BLOCKS PER TRACK - ONE BYTE                                *
*          BLOCKS PER EXTENT- THREE BYTES                             *
*   IF TRACK OVERFLOW IS ALSO SPECIFIED TWO ADDITIONAL FIELDS ARE     *
*   INSERTED BETWEEN THE RELATIVE AND ACTUAL EXTENTS. THESE ARE       *
*          TRACKS PER PERIOD                                          *
*          BLOCKS PER PERIOD                                          *
*                                                                     *
*   FUNCTION V:                                                       *
*   IF DYNAMIC BUFFERING IS SPECIFIED THIS ROUTINE WILL CALCULATE     *
*   AND OBTAIN (BY A GETMAIN) THE NUMBER OF BYTES REQUIRED FOR THE    *
*   BUFFERS AND FOR A BUFFER CONTROL BLOCK.  IT WILL DIVIDE THE       *
*   ACQUIRED AREA INTO A BUFFER CONTROL BLOCK AND THE SPECIFED        *
*   NUMBER OF BUFFERS. THIS FUNCTION IS APPLICABLE TO NON-VS FORMATS. *
*                                                                     *
*   FUNCTION VI:                                                      *
*   IF DYNAMIC BUFFERING IS SPECIFIED WITH VARIABLE SPANNED FORMAT    *
*   THIS ROUTINE WILL CALCULATE AND OBTAIN (BY A GETMAIN) THE NUMBER  *
*   OF BYTES REQUIRED FOR THE BUFFERS AND THE BUFFER CONTROL BLOCK.   *
*   IT WILL DIVIDE THE ACQUIRED AREA INTO A BUFFER CONTROL BLOCK      *
*   AND THE SPECIFIED NUMBER OF BUFFERS.                              *
*   IF DYNAMIC BUFFERING IS NOT SPECIFIED THIS ROUTINE WILL CALCULATE *
*   AND OBTAIN (BY A GETMAIN) THE NUMBER OF BYTES REQUIRED FOR A      *
*   SEGMENT WORKAREA POOL. IT WILL DIVIDE THE AREA INTO A BUFFER      *
*   CONTROL BLOCK AND THE SPECIFIED NUMBER OF SEGMENT WORKAREAS.      *
*                                                                     *
*   FUNCTION VII:                                                     *
*   THIS ROUTINE PREPARES FOR EXIT FROM THIS MODULE.  IT UPDATES THE  *
*   USER DCB BY MOVING THE DCB COPY FROM THE OPEN WORKAREA TO THE     *
*   USER'S DCB CORE. IT SEARCHES FOR THE NEXT MODULE IN THE PARM      *
*   LIST PREPARING TO RELOOP THROUGH THE MODULE SHOULD IT BE REQUIRED.*
*   IF NOT, AN XCTL IS ISSUED TO RETURN TO COMMON OPEN.               *
*                                                                     *
*                                                                     *
*  NOTES:                                                             *
*   EACH FUNCTION IS INDEPENDENT OF ALL PREVIOUS FUNCTIONS HAVING AS  *
*   THE ONLY INTERFACE THE ASSUMPTION THAT THE DCB ADDRESS IS IN      *
*   REGISTER 10,THE OPEN WORKAREA ADDRESS IS IN REGISTER 4, THE DEB   *
*   AVT ADDRESS IS IN REGISTER 9, AND THAT ENTRY TO EACH FUNCTION     *
*   IS IN DATA MANAGEMENT KEY.  FUNCTION VII ALSO ASSUMES THAT        *
*   FUNCTION I STORED COMMON OPEN'S REGISTERS IN THE OPEN WORKAREA    *
*   AT OFFSET DWASAVE.                                                *
*                                                                     *
*   THE DEB IS CONSTRUCTED, INCLUDING EXTENTS AND RELATIVE EXTENTS    *
*   IN DATA MANAGEMENT KEY, AS IS ALL INITIALIZATION TO THE DCB COPY. *
*   A MODESET IS ISSUED TO HANDLE ALL PROCESSING OF BUFFERS AND       *
*   SEGMENT WORKAREAS IN USER KEY.                                    *
*                                                                     *
*   AUDIT TRAIL BITS ARE SET AFTER EACH GETMAIN IS ISSUED TO GET CORE *
*   FOR WHICH IT IS THE RESPONSIBILITY OF THE BDAM CLOSE EXECUTOR,    *
*   IGG0203A, TO FREE.  THESE BITS ARE INTERROGATED BY THE FORCE      *
*   CLOSE EXECUTOR IF AN ABEND OCCURS DURING OPEN PROCESSING, BUT     *
*   AFTER THE DCB HAS BEEN COPIED BACK TO USER CORE. BITS ARE SET     *
*   TO INDICATE THAT A READ EXCLUSIVE LIST, A BUFFER CONTROL BLOCK    *
*   AND BUFFERS, AN USL LIST OR A SEGMENT WORKAREA WERE OBTAINED.     *
*   THE BITS ARE SET IN THE OPEN WORKAREA AT DXATEXC1.                *
*                                                                     *
*     DEPENDENCIES = NONE                                             *
*                                                                     *
*     DATA AREAS = NONE                                               *
*                                                                     *
*     RESTRICTIONS = IF AN EXTENT IS ALLOCATED AS A USER LABEL EXTENT *
*        (EXTENT TYPE CODE=X'40') IT WILL NOT BE REFLECTED IN THE DEB *
*        EXTENTS. THE USER LABEL EXTENT IS NOT INCLUDED IN F1 EXTENT  *
*        COUNT.                                                       *
*                                                                     *
*     REGISTER CONVENTIONS = SEE REGISTER EQUATES BELOW               *
*                                                                     *
*     PATCH LABEL = NONE                                              *
*                                                                     *
*  MODULE TYPE = OPEN EXECUTOR                                        *
*                                                                     *
*     PROCESSOR = ASSEMBLER XF                                        *
*                                                                     *
*     MODULE SIZE = 3800 DECIMAL BYTES                                *
*                                                                     *
*     ATTRIBUTES = REENTRANT,ENABLED,PRIVILEGED, ENTERED IN DATA      *
*       MANAGEMENT KEY. MODESET IS ISSUED TO DO BUFFER PROCESSING IN  *
*       USER KEY.                                                     *
*                                                                     *
*                                                                     *
*  ENTRY POINT = 'FUNCT1'                                             *
*                                                                     *
*     PURPOSE = SEE FUNCTION                                          *
*                                                                     *
*     LINKAGE = THIS MODULE RECEIVES CONTROL EITHER FROM COMMON OPEN  *
*       OR ANOTHER EXECUTOR WHEN ITS ID APPEARS AS THE NEXT NON-ZERO  *
*       ENTRY IN THE WTG TABLE.                                       *
*                                                                     *
*     INPUT - INPUTS TO THIS ROUTINE ARE                              *
*        REGISTER 5 - BEGINNING OF THE DCB PARAMETER LIST             *
*        REGISTER 6 - BEGINNING OF THE WHERE-TO-GO TABLE (WTG)        *
*        REGISTER 7 - BEGINNING OF THE CURRENT ENTRY IN THE DCB       *
*                     PARAMETER LIST                                  *
*        REGISTER 8 - ADDRESS OF THE CURRENT ENTRY IN THE WTG         *
*                                                                     *
*        OPEN WORKAREA - CONTAINS FORMAT1 DSCB, DCB COPY, PARM LIST,  *
*          USER DCB ADDRESS AND KEY, DEB EXTENSION ADDRESS, SAVEAREA, *
*          WTG TABLE, AND AT LOCATION DXCCW7, THE CCHHR OF THE FORMAT *
*          ONE DSCB. ALL THESE FIELDS ARE REFERENCED BY THIS MODULE,  *
*          THEIR PARTICULAR LABELS AS FOLLOWS:                        *
*                      DWASAVE  - SAVE OPEN'S REGISTERS               *
*                      DSCNOEXT - 1ST DSCB NO. OF EXTENTS             *
*                      DSCEXTYP - SPLIT CYL FLAG                      *
*                      DWATTCTR - TT COUNTER                          *
*                      DWASAVE2 - REG SAVE FOR CNVRT RTN              *
*                      DXDAADDR - ADDR FIELD PASSED TO CNVRT RTN      *
*                      DXATEXC1 - AUDIT TRAIL BYTE FOR FORCE CLOSE    *
*                      DXDEBXAD - DEB EXTENTSION PTR                  *
*                      DWAFLAGS - FLAG BYTE USED BY 193A              *
*                      DWATRKLN - TRK LENGTH SAVEAREA                 *
*                      DWADVTOL - OVERHEAD SAVED HERE                 *
*                      DWARCOVH - OVERHEAD+-KEY OVERHEAD              *
*                      DWARCTKY - OVERHEAD+ KEY LENGTH                *
*                      DWARLREC - REC LEN+ OVERHEAD, LAST REC         *
*                      DWARNREC - REC LEN+ OVERHEAD, MIDDLE REC       *
*                      DWATTRKS - TOTAL NUMBER OF TRACKS              *
*                      DWAOFLOW - SAVEAREA FOR REMAINING BYTES        *
*                      DXUKEY   - USER KEY                            *
*                      DXUDCBAD - USER DCB ADDRESS                    *
*                      DXUDCBPL - LENGTH OF NULL PREFIX               *
*                      DXUDCBML - NUMBER OF BYTES COPIED              *
*                      DXCCW12  - PASSED TO XCTL                      *
*                      DXCALLID - PROBLEM DETERMINATION PARMLIST      *
*                      DXREG9   - SAVEAREA FOR REGS DURING PROB DET   *
*                                                                     *
*        SYSTEM CONTROL BLOCKS REFERENCED BY IGG0193A:                *
*                                       CVT                           *
*                                       UCB                           *
*                                       TCB                           *
*                                       TIOT                          *
*                                       DVCT                          *
*                                                                     *
*                                                                     *
*     OUTPUT = THIS ROUTINE XCTLS TO COMMON OPEN. REGISTERS 5 AND 6   *
*        ARE LEFT UNCHANGED. REGISTERS 7 AND 8 ARE POSITIONED TO      *
*        THE NEXT UNCOMPLETED ENTRY IN THE PARM LIST AND WTG TABLE.   *
*                                                                     *
*           CONTROL BLOCKS/DATA AREAS BUILT OR INITIALIZED:           *
*                          DEB INCLUDING RELATIVE EXTENTS             *
*                          IRB                                        *
*                          BCB INCLUDING BUFFERS                      *
*                          SWA INCLUDING BUFFERS                      *
*                          READ EXCLUSIVE LIST                        *
*                          DCB                                        *
*                                                                     *
*           ALL REQUIRED MODULES WILL HAVE BEEN LOADED.               *
*                                                                     *
*                                                                     *
*     EXIT-NORMAL = XCTL BACK TO COMMON OPEN IF SCAN OF THE WTG TABLE *
*        DOES NOT FIND A NON-ZERO ENTRY. OTHERWISE AN XCTL IS MADE    *
*        TO THE FIRST NON-ZERO ENTRY IN THE TABLE.                    *
*                                                                     *
*     EXIT-ABNORMAL = THERE ARE 4 OCCASIONS TO ENTER THE ERREXIT RTN, *
*        WHICH ISSUES A DMABCOND MACRO TO GO TO PROBLEM DETERMINA-    *
*        TION BEFORE ABENDING.  THE ENTRY IS MADE IF BUFL=0 FOR       *
*        A DYNAMIC BUFFERING REQUEST, IF THE MACRF FIELD WAS NOT      *
*        SPECIFIED, IF THERE ARE NO EXTENTS, OR IF THE ICBACREL       *
*        MACRO RETURNS AN ERROR CODE.                                 *
*                                                                     *
*  EXTERNAL REFERENCES = NONE                                         *
*                                                                     *
*     ROUTINES:  SYSTEM CONVERT ROUTINE                               *
*                GETMAIN(SVC 10) IS CALLED TO GET DEB,RDXLIST,BUFFERS *
*                DEBCHK(SVC 117) IS CALLED FOR DEB VALIDITY CHECK     *
*                XCTL(SVC 7) IS CALLED TO PASS CONTROL                *
*                LOAD(SVC 8) IS CALLED TO LOAD BDAM MODULES           *
*                ICBACREL(SVC 126) ACQUIRE MSS DASD SPACE             *
*                                                                     *
*                                                                     *
*  TABLES/WORK AREAS- 1.DCB PARAMETER LIST IS THE ADDRESS OF EACH DCB *
*   SPECIFIED IN THE OPEN MACRO INSTRUCTION. THE HI-ORDER BYTE        *
*   CONTAINS A CODE INDICATING THE MODE (INPUT, OUTPUT, UPDATE).      *
*   2.WHERE-TO-GO TABLE CONTAINS THE ID AND TTR OF THE ROUTINE WHICH  *
*   IS TO PROCESS THE CORRESPONDING DCB AND THE ADDRESS OF A WORK AREA*
*   ASSIGNED TO THAT DCB.                                             *
*   3.WORK AREA IS A TEMPORARY AREA USED BY THIS ROUTINE              *
*   AS A REGISTER SAVE AREA AND WORKAREA AS DESCRIBED ABOVE.          *
*   4.COMMUNICATION VECTOR TABLE IS A RESIDENT VECTOR LIST USED TO    *
*   LOCATE THE CONVERT ROUTINE, AND THE TASK CONTROL BLOCK.           *
*                                                                     *
*                                                                     *
*  MACROS = GETMAIN, DEBCHK, MODESET, XCTL, LOAD, ICBACREL, IECRES    *
*                                                                     *
*                                                                     *
*                                                                     *
*  CHANGE ACTIVITY = AS FOLLOWS:                                      *
*                                                                     *
*                    OS 21 DELETIONS/CHANGES                          *
*                                                               A44855
*                                                               M1795
*                                                               SM4356
*                                                               SA49438
*                                                               M0024
*                                                               S21042
*                                                               A35339
*                                                               A30797
*                                                               SA53239
*                                                               SA60608
*                    VS1-1 DELETIONS/CHANGES
*                                                               XM6189
*                    VS1-2 DELETIONS/CHANGES
*                    VS1-3 DELETIONS/CHANGES
*                    VS2-1 DELETIONS/CHANGES
*                                                                YM3693
*                    VS2-2 DELETIONS/CHANGES
*                                                                YM7957
*                                                                YM1383
*                                                                YM1394
*                                                                YM1140
*                                                                YM1421
*                                                                YM1489
*                                                                YM3057
*                                                                YM2368
*                                                                YM2886
*                                                                YM5761
*                                                                YM7386
*                    VS2-3 DELETIONS/CHANGES
*                                                              @Y30LSBS
*                                                              @ZA04216
*D107602-109563                                                 ZA02523
*A013101,108095-110429                                          ZA02523
*A063057,063058                                                 ZA09152
*                    UPDATES SUBSEQUENT TO VS2-3
*
*D106334-106346,106348-116350                                  @ZA08000
*                    UPDATES SUBSEQUENT TO VS2-3.7
*A033660,C051000,D051200-051300                                @ZA17540
***********************************************************************
         EJECT
***********************************************************************
****                                                               ****
****     REGISTER USAGE                                            ****
****                                                               ****
***********************************************************************
         SPACE
R0       EQU   0                        PARAMETER REGISTER
RWRK0    EQU   0                        WORK REG (IV)           ZA02523
REVEN    EQU   0                        EVEN REG OF EVEN/ODD PAIR
RCTR     EQU   0                        COUNTER REGISTER (I)   @Y30LSBS
R1       EQU   1                        PARAMETER REGISTER
RODD     EQU   1                        ODD REG OF EVEN/ODD PAIR
RETURN   EQU   2                        RETURN REG FOR INTERNAL SUBRTNS
R2       EQU   2                        PARM REG TO CONVERT RTN  Y02072
RBASE    EQU   3                        BASE OF THIS ROUTINE
RCORE    EQU   4                        WORK AREA ADDRESS
RPAR     EQU   5                        PARAMETER LIST ADDRESS
RTCB     EQU   5                        TCB BASE REG
RXTENT   EQU   5                        ADDR OF CURRENT DSCB EXT(I)
RDEBAM   EQU   5                        BASE FOR DEB EXTENT(IV)
RAOFFS   EQU   5                        RECORD AREA OFFSET((VI)
RWTG     EQU   6                        FRONT OF WHERE-TO-GO TABLE
RMSSUCB  EQU   6                        MSS UCB BASE REG (I)   @Y30LSBS
RDVCT    EQU   6                        DEVICE CHAR TABLE(IV,V,VI)
RDEBAMX  EQU   6                        DEB REL EXT BASE(IV)
RPARC    EQU   7                        CURRENT ENTRY IN PARAMETER LIST
RBUFR    EQU   7                        BUFFER ADDRESS(VI)
RDEBEXT  EQU   7                        DEB EXT BASE(II,IV)
RBCB     EQU   7                        BUFFER CONTROL BLK BASE(V)
RWTGC    EQU   8                        CURRENT ENTRY IN WTG
RLEN     EQU   8                        BCB LENGTH(VI)
RDSCB    EQU   8                        DSCB BASE(I)
RDSSSZ   EQU   8                        DATA SET SIZE(IV)
R9       EQU   9                        PARAMETER REGISTER
RDEBA    EQU   9                        DEBAVT BASE REG(I,II,III)
RDCB     EQU   10                       DCB BASE REG
RDEBSZ   EQU   11                       DEB SIZE REQUIRED(I)
RXTNMAX  EQU   11                       MAXIMUM NO. OF EXTENTS(I)
RPARPTR  EQU   11                       PARAMETER POINTER(I)   @Y30LSBS
RNRCD    EQU   11                       RECS/PERIOD OR RECS/EXT(IV)
RBUFLN   EQU   11                       BUFFER LENGTH(V,VI)
RXTNTOT  EQU   12                       TOTAL NO. OF EXTENTS(I)
RNTRK    EQU   12                       TRKS/PERIOD OR RECS/PERIOD(IV)
RBUFNO   EQU   12                       BUFFER NUMBER(V,VI)
RXTNCUR  EQU   13                       CURRENT EXTENT BASE(I,IV)
RSWA     EQU   13                       PTR TO SEGMENT WORK AREA(VI)
RPOOLSZ  EQU   13                       SIZE OF BUFFER POOL(V,VI)
R14      EQU   14                       RETURN ADDRESS REGISTER
RWRKX    EQU   14                       WORK REGISTER
REXTN    EQU   14                       NUMBER OF DEB EXT(I)   @Y30LSBS
REXTB    EQU   15                       ACQUIRE EXT BASE (I)   @Y30LSBS
R15      EQU   15                       ENTRY ADDR AND RETURN CODE REG
RWRKY    EQU   15                       WORK REGISTER
*                                       IECRES MACRO IS FIXED
         SPACE 3
***********************************************************************
****                                                               ****
****     MASKS, DISPLACEMENTS, AND OTHER EQUATES                   ****
****                                                               ****
***********************************************************************
         SPACE
DEBSEEKF EQU   X'08'                    USED TO INHIBIT ALL SEEKS
OUTPUT   EQU   X'0F'                    DCB BEING OPENED FOR OUT Y02072
DEBIDFYR EQU   X'0F'                    IDENTIFIER FOR A DEB
DEBWSEEK EQU   X'10'                    USED TO PERMIT WRITES AND SEEKS
DSCULABL EQU   X'40'                    USER LABEL EXTENT
DEBSEEKN EQU   X'50'                    USED TO PERMIT SEEKS
DSCSPLIT EQU   X'80'                    SPLIT CYLINDER EXTENT
DSCYLBDY EQU   X'81'                    EXTENT ON CYLINDER BOUNDARIES
UCB23051 EQU   X'06'                    UCB TYPE BIT FOR 2305-1  Y02072
UCB23052 EQU   X'07'                    UCB TYPE BIT FOR 2305-2  YO2072
FORMAT2  EQU   X'02'                    ID FOR FORMAT 2 DSCB     Y02072
FRMT1KEY EQU   44                       KEY FOR FORMAT 1 -       Y02072
*                                       NEEDED TO ADJUST FOR     Y02072
OPPATRUB EQU   0                        OFFSET TO ATTRIBUTE BYTE
DUMYXTNT EQU   1                        USED TO IND A DUMMY DEB EXTENT
IDINCR   EQU   2                        CORE REQUIRED FOR MODULE ID'S
TIMES4   EQU   2                        USED TO MULT REG CONTENTS BY 4
F1XTENTS EQU   3                        NUMBER OF EXTENTS IN A F1 DSCB
F3XTNTS1 EQU   4                        NUMBER OF EXTENTS IN FIRST
*                                       EXTENT SECTION OF A F3 DSCB
TIMES16  EQU   4                        USED TO MULT REG CONTENTS BY 16
OPMEXSCL EQU   4                        DEB EXTENT SIZE SCALE
CCHHRLNG EQU   5                        LENGTH OF CCHHR FIELD
OFLOINCR EQU   8                        EXTRA SIZE FOR OVERFLOW RECORDS
F3XTNTS2 EQU   9                        NUMBER OF EXTENTS IN SECOND
*                                       EXTENT SECTION OF A F3 DSCB
USERPOOL EQU   0                        REQUEST SPACE IN SP0     Y02072
POOL230  EQU   230                      REQUEST SPACE IN SP230   Y02072
NEXTVOL  EQU   6                        JFCB OFFSET FOR VOL NO  SA53239
PD51     EQU   51                       INTERNAL RET CODE IF DYN Y02072
*                                       BUF AND BUFL=0           Y02072
PD111    EQU   111                      INTERNAL RET CODE IF   @Y30LSBS
*                                       MSS ACQUIRE FAILS      @Y30LSBS
PD211    EQU   211                      INTERNAL RET CODE IF     Y02072
*                                       MACRF NOT A,K OR I       Y02072
PD212    EQU   212                      INTERNAL RET CODE IF NO  Y02072
*                                       PRIMARY EXTENT           Y02072
BLANK    EQU   X'40'                    BLANK TO TEST JFCBVOL   SA53239
NOSUBRTN EQU   0                        NO SUBROUTINES LOADED BY OPEN
RELTRKAD EQU   8                        OFFSET TO RELATIVE TRACK
*                                       CONVERSION MODULE ADDRESS
ASYNCAD  EQU   16                       OFFSET TO ASYNCHRONOUS
*                                       INTERRUPT ROUTINE ADDRESS
DYNOFFST EQU   2                        BYTES TO NEXT DYN BUF ID Y02072
VERIFYAD EQU   12                       OFFSET TO VERIFY MODULE ADDRESS
ADDR     EQU   B'0111'                  MASK FOR STORING 24-BIT ADDRESS
BFRNUM1  EQU   1                        FIRST BUFFER IN AVAILABLE
*                                       BUFFER QUEUE
BFRNUM2  EQU   2                        BEGINNING OF BUFFER CHAIN TO BE
*                                       INITIALIZED
BFRDFALT EQU   2                        DEFAULT VALUE WHEN NO. OF BFRS
*                                       IS NOT SPECIFIED FOR DYN BFRING
CCHHLG   EQU   4                        LENGTH OF CCHH           YM5761
FOURBYTS EQU   4                        USED TO ADD 4 BYTES TO AN ADDR
FWDBNDRY EQU   4                        USED TO ALIGN TO A FW BOUNDARY
RNDFCTOR EQU   7                        FACTOR USED FOR ROUNDING
NOTDOUBL EQU   7                        USED TO TEST FOR DOUBLE WD QUAN
DOUBLEWD EQU   8                        LENGTH OF A DOUBLE WORD
MULTOF4  EQU   3                        USED TO ROUND NUMBER OF BFRS TO
*                                       A MULTIPLE OF 4
FWRNDFTR EQU   3                        USED IN ROUNDING TO A FULLWORD
*                                       BOUNDARY
         EJECT
***********************************************************************
*  FUNCTION I: THIS FUNCTION DETERMINES THE AMOUNT OF CORE REQUIRED   *
*  FOR THE DEB, GETS THE CORE AND BUILDS THE DEB EXTENTS, TAKING      *
*  THE EXTENT INFORMATION FROM THE DSCBS READ INTO THE OPEN WORKAREA  *
*  BY COMMON OPEN. THIS ROUTINE PROCESSES IN DATA MANAGEMENT KEY      *
*  EXCEPT FOR CHAINING THE DEB OFF THE TCB IN SUPERVISOR KEY.         *
*  INPUT TO THIS FUNCTION IS AS FOLLOWS:                              *
*              REGISTER INPUT AS DESCRIBED IN THE PROLOGUE            *
*              OPEN WORKAREA AS DESCRIBED IN THE PROLOGUE             *
*              DATA MANAGEMENT KEY                                    *
*  OUTPUT FROM THIS FUNCTION IS AS FOLLOWS:                           *
*              REGISTER 4 = OPEN WORKAREA ADDRESS                     *
*              REGISTER 9 = DEB AVT ADDRESS                           *
*              REGISTER 10 = DCB ADDRESS                              *
*              DCBDEBAD CONTAINS DEB ADDRESS                          *
*              COMMON OPEN'S REGISTERS 0-9 STORED AT DWASAVE          *
*              DEB CONSTRUCTED AND PRIMARY EXTENTS INITIALIZED        *
***********************************************************************
         SPACE
FUNCT1   EQU   *                        BEGINNING OF MODULE
         USING PSA,0                    ESTABLISH PSA DSECT      Y02072
         USING WTGENTRY,RWTGC           ESTABLISH WTG ENTRY BASE REG
         USING PARML,RPARC              ESTABLISH PARMLIST BASE
         BALR  RBASE,0                  ESTABLISH BASE FOR THIS ROUTINE
         USING *,RBASE                  BASE REG LOCATION FOR ASSEMBLY
         L     RDCB,PARDCBAD            LOAD DCB BASE ADDRESS
         DROP  RPARC
         USING IHADCB,RDCB              ESTABLISH DCB BASE REG
         L     RCORE,WTGCORE-1          SET WORK AREA POINTER
         USING FORCORE,RCORE            ESTABLISH WORK AREA BASE REG
         DROP  RWTGC
         STM   R0,R9,DWASAVE            SAVE OPEN REGS IN WKAREA
         TM    DCBRECFM,DCBRECL         IF RECORD FORMAT HAS NOT BEEN
         BNZ   RECFMOK                  SPECIFIED AS F, V, OR U
         OI    DCBRECFM,DCBRECU         ASSUME U
*
RECFMOK  EQU   *
         NI    DCBOPTCD,X'FF'-(DCBOPTDB+DCBOPTRE+DCBOPTTO) TURN OFF
*                                       BUF AND READ EXCLUSIVE, TRK
*                                       OVERFLO IF MERGED FROM DSCB
         TM    DCBMACF1,DCBMRRDK+DCBMRRDI  READ TYPE ID AND/OR KEY
         BNZ   FUNCT1A                  YES, DCB IS OK
         TM    DCBMACF2,DCBMRWRK+DCBMRIDW+DCBMRAWR  IS WRITE TYPE KEY,
*                                       ID, OR ADD
         BNZ   FUNCT1A                  YES, DCB IS OK
         LA    R0,PD211                 LOAD INTERNAL RET CODE   Y02072
*                                       INDICATING MACRF DID NOT Y02072
*                                       SPECIFY A, K OR I        Y02072
         B     ERREXIT                  BR TO ERROR EXIT         Y02072
         SPACE 2
****
****CALCULATE DEB CORE NEEDED FOR MODULE IDS DETERMINING THE AVT CORE
****REQUIREMENTS AND CORE NEEDED FOR PRIMARY AND RELATIVE EXTENTS. THE
****TOTAL CORE REQUIRED IS ACCUMULATED IN RWRK2.
****
FUNCT1A  EQU   *                        CALCULATE CORE REQUIRED
         LA    RWRKX,IDINCR             SET CONSTANT TO 2 BYTES  A35339
         LA    RDEBSZ,2*IDINCR          CORE FOR FDN.,CE-XCE IDS Y02072
         AR    RDEBSZ,RWRKX             ADD TWO BYTES FOR SIO/ @ZA08000
*                                       DYNBUF -ALWAYS LOADED  @ZA08000
         TM    DCBMACF2,DCBMRAWR        IS ONE OF THE FORMAT MODULES
*                                       NEEDED
         BZ    TACT                     NO, GO TEST ADDRESSING    M6121
         AR    RDEBSZ,RWRKX             YES, ADD FOR MODULE ID    M6121
TACT     EQU   *                        TEST FOR FEEDBACK
         TM    DCBOPTCD,DCBOPTF         IS FEEDBACK SPECIFIED
         BNO   TDYN                     IF NOT, DON'T ADD 2 BYTES
         AR    RDEBSZ,RWRKX             ALLOW FOR ONE ID
TDYN     TM    DCBMACF1,DCBMRDBF        IS DYNAMIC BUFFER MODULE NEEDED
         BZ    TCHK                     BRANCH IF NOT
         OI    DCBOPTCD,DCBOPTDB        MOVE OPTION BIT TO OPTCD
TCHK     TM    DCBMACF1,DCBMRCK         IS THE CHECK OPTION BEING USED
         BZ    TEOEXT                   NO, TRY NEXT OPTION      YM1489
         AR    RDEBSZ,RWRKX             YES, ADD TWO BYTES
TEOEXT   EQU   *                        TEST EXT SRCH FOR EOE    YM1489
         TM    DCBOPTCD,DCBOPTE         WAS EXT SRCH SPECIFIED   YM1489
         BNO   SETSZ                    NO, TRY NEXT OPTION      YM1489
         AR    RDEBSZ,RWRKX             YES,ADD 2 BYTES FOR EOE  YM1489
SETSZ    LA    RDEBSZ,DEBBASND-DEBAVT(RDEBSZ) ALLOW FOR APPENDAGE LIST
*                                       AND DEB BASE
         SPACE 2
****
****    DETERMINE SIZE OF DEB CORE REQUIRED FOR EXTENTS
****
         SR    RWRKX,RWRKX              CLEAR WORK REG           Y02072
         SR    RXTNTOT,RXTNTOT          CLEAR WORK REG           Y02072
         IC    RXTNTOT,DSCNOEXT         FIRST DSCB NUMBER OF EXTENTS
         CLI   JFCBVOLS+NEXTVOL,BLANK   IS DATA SET MULTIVOL    SA53239
         BNE   MULTIVOL                 YES,OPEN INITIALIZED    SA53239
*                                       EXTENT FIELD            SA53239
         MVI   DCBDRDX,0                NO,ZERO OUT DCB EXTENT  SA53239
MULTIVOL EQU   *                                                SA53239
         IC    RWRKX,DCBDRDX            PLUS TOTAL NO. OF EXTENTS FROM
         AR    RXTNTOT,RWRKX            OTHER DSCB'S GIVE TOTAL NO. OF
*                                       EXTENTS FOR THE DATA SET
         TM    DCBRECFM,DCBRECTO        ARE OVERFLOW RECORDS PRESENT
         BZ    NOOVFLOW                 NO,CONTINUE              A28200
         OI    DCBOPTCD,DCBOPTTO        OR IN OVERFLOW BIT IN OPTCD
NOOVFLOW LTR   RXTNTOT,RXTNTOT          TEST FOR ZERO EXTENTS    Y02072
         BNZ   NOTZERO                  EXTENTS OK               Y02072
ABORT    EQU   *                                               @ZA17540
         LA    R0,PD212                 LOAD INTERNAL RET CODE   Y02072
*                                       INDICATING THERE WAS NO  Y02072
*                                       PRIMARY EXTENT           Y02072
         B     ERREXIT                  ABEND IF ZERO EXTENTS    Y02072
*
NOTZERO  EQU   *                        CONTINUE                 Y02072
         LR    RWRKY,RXTNTOT            GET TOTAL NO. OF EXTENTS Y02072
         SLL   RWRKY,TIMES16            MULTIPLY NO. OF EXTENTS
         AR    RDEBSZ,RWRKY             BY 16, ADD TO CORE SIZE
         TM    DCBOPTCD,DCBOPTRB        IF NOT RELATIVE RECORD
         BZ    OBDAM020                 ADDRESSING, GO TO NEXT ROUTINE
         SRL   RWRKY,TIMES4             DIVIDE NO. OF EXTENTS BY 4
         AR    RDEBSZ,RWRKY             TO ALLOW FOR RELATIVE EXTENTS
         TM    DCBRECFM,DCBRECTO        ARE OVERFLOW RECORDS PRESENT
         BZ    OBDAM020                 NO GO ON
         LA    RDEBSZ,OFLOINCR(RDEBSZ)  YES ADD ON OVERFLOW SIZE
         SPACE 2
****
****     REGISTER RDEBSZ NOW CONTAINS THE NUMBER OF BYTES OF PROTECTED
****     CORE REQUIRED FOR
****       1. APPENDAGE VECTOR LIST
****       2. DEB (BASE + VARIABLE NO. OF EXTENTS, SUBROUTINE IDS
****              PLUS THE RELATIVE EXTENTS.)
****
OBDAM020 EQU   *
         LA    RDEBSZ,RNDFCTOR(RDEBSZ)  ROUND TO NEXT HIGHEST DOUBLE
         SRL   RDEBSZ,3                 WORD FOR GETMAIN
         LR    RWRKX,RDEBSZ             SAVE DOUBLE WORD COUNT
         SLL   RDEBSZ,3                 REG NOW CONTAINS BYTES NEEDED
         LR    R1,RDEBSZ                PUT LEN IN R1 FOR SUBRTN Y02072
         BAL   RETURN,ENTSP230          GO GET CORE FOR DEB      Y02072
*
*                        CONSTRUCT THE DEB                       Y02072
         LA    RDEBA,0(,R1)             INITIALIZE POINTER REGISTER
         USING DEB,RDEBA                ESTABLISH DEB BASE REG
         XC    DEBAVT(DEBBASND-DEBAVT),DEBAVT  CLEAR ALL OF DEB
*                                       TO EXTENTS SECTION
         SPACE 2
****
****     CONSTRUCT THE DEB BASE
****
         STC   RWRKX,DEBLNGTH           STORE DOUBLE WORD COUNT
         MVC   DEBDSCBA+2(CCHHRLNG),DWADSCB SAVE DSCB CCHHR ADDR Y02072
         STC   RXTNTOT,DEBNMEXT         STORE NO. OF EXTENTS
         ST    RDEBA,DEBAPPAD           APPENDAGE LIST ADDRESS
         L     RTCB,PSATOLD             GET CURRENT TCB ADDR     Y02072
         USING TCB,RTCB                 ESTABLISH TCB BASE REG
         ST    RTCB,DEBTCBAD            TCB ADDRESS
         ST    RDCB,DEBDCBAD            DCB ADDRESS
         MVC   DEBPROTG,TCBPKF          STORAGE PROTECTION KEY OF TCB
         OI    DEBDEBID,DEBIDFYR        DEB ID
         MVC   DEBPRIOR,TCBDSP          PRIORITY INDICATOR
         MVC   DEBOPATB,OPPATRUB(RPARC) OPEN ATTRIBUTES
         NI    DEBOPATB,X'FF'-DEBABEND
         MVI   DEBEXSCL,OPMEXSCL        EXTENT SIZE SCALE
*
         MODESET  EXTKEY=SUPR           CHANGE TO SUPERVISOR KEY Y02072
*                                       TO CHAIN THE DEB OFF TCB Y02072
*
         LA    RWRKY,DEBBASIC           GET ADDR OF MAIN DEB     Y02072
         L     RWRKX,TCBDEB             GET ADDR OF 1ST DEB      Y02072
CHAIN    ST    RWRKX,DEBDEBAD           CHAIN DEB TO 1ST DEB     Y02072
         CS    RWRKX,RWRKY,TCBDEB       PUT DEB PTR IN TCB       Y02072
         BNE   CHAIN                    BR WITH RWRKX CONTAINING Y02072
*                                       NEW VALUE IN TCBDEB      Y02072
         DROP  RTCB                     DROP TCB BASE REG
*
         MODESET  EXTKEY=DATAMGT        RETURN TO DATAMGT KEY    Y02072
*
         STCM  RWRKY,ADDR,DCBDEBA       STORE DEB ADDRESS IN DCB Y02072
*
         DEBCHK (RDCB),TYPE=ADD,AM=BDAM  ADD DEB TO DEB TABLE    Y01021
*
         LR    RXTENT,RCORE             SET DSCB INDEX SO ROUTINE CAN
*                                       UTILIZE A LOOP
         LA    RWRKX,FRMT1KEY           LOAD KEY LG =44 INTO REG Y02072
         SR    RXTENT,RWRKX             SUBTRACT KEY LENGTH FROM Y02072
*                                       FORMAT1 DSCB ADDRESS     Y02072
         MVI   DEBOFLGS,DEBDISP
         NC    DEBOFLGS,JFCBIND2        OPEN OLD OR NEW
         CLI   DSCEXTYP,DSCSPLIT        CHECK FOR SPLIT CYLINDER
         BNE   OBDAM060                 NO, BRANCH
         OI    DEBOFLGS,DEBSPLIT        SET INDICATOR IN DEB
         SPACE 2
****
**** THE FOLLOWING ROUTINE ENCOMPASSES 3 LOOPS CONTROLLED BY THE NUMBER
**** OF EXTENTS IN THE DATA SET, ON THE VOLUME AND IN THE DSCB.  THE
**** CONTROLLING REGISTERS ARE AS FOLLOWS:
****           RXTNTOT - NO. OF EXTENTS IN DATA SET
****           RXTNCUR - NO. OF EXTENTS IN THIS DSCB
****           RXTNMAX - MAXIMUM NO. OF EXTENTS FOR THIS FORMAT
****           DWAFM3SW(IN WORKAREA) - FORMAT 3 SWITCH
**** WHEN RXTNTOT IS 0, THE OUTSIDE LOOP IS COMPLETE.  AT DWATTCTR IN
**** THE OPEN WORKAREA, THE TOTAL NUMBER OF TRACKS IN THE DATA SET ARE
**** BEING SUMMED UP.
****
OBDAM060 EQU   *
         LA    RDEBEXT,DEBBASND         SET EXT INDEX TO EXT 1   Y02072
         USING DEBDASD,RDEBEXT          EST DEB DASD BASE        Y02072
         LR    RDSCB,RXTENT             SAVE CURRENT DSCB ADDRESS
         SR    RWRKY,RWRKY              ZERO M COUNTER
         STC   RWRKY,DXDAADDR           SAVE M NO. FOR CONVRT RTN
         STH   RWRKY,DWATTCTR           SET TOTAL TT CTR TO ZERO Y02072
         SPACE
         L     RWRKX,DXUCBADR           GET UCB ADDR OF 1ST DSCB Y02072
         ST    RWRKX,DEBUCBAD           ST UCB ADDR IN DEB EXT   Y02072
         B     OBDAM185                 BR AROUND UCB PICK UP    Y02072
*                                       FOR SUBSEQUENT DSCBS     Y02072
         DROP  RCORE                    DROP OPEN WORKAREA BASE  Y02072
         SPACE
****
****           ENTRY FOR THE NEXT DSCB
****
OBDAM180 EQU   *                        PROCESS FORMAT 1 DSCB    Y02072
         USING DXDSCB-FRMT1KEY,RXTENT   ESTABLISH DSCB BASE REG  Y02072
         L     RWRKX,DSCBUCB            GET UCB PTR FOR CUR DSCB Y02072
         ST    RWRKX,DEBUCBAD           STORE UCB ADDRESS IN DEB EXT
OBDAM185 SR    RXTNCUR,RXTNCUR          CLEAR REGISTER FOR CUR EXT NO.
         STH   RXTNCUR,DEBBINUM         ZERO BB FOR NOW
         IC    RXTNCUR,DSCNOEXT         GET NO. EXTENTS FOR THIS Y02072
*                                       VOLUME ONLY              Y02072
         LTR   RXTNCUR,RXTNCUR          CHECK FOR ZERO
         BZ    ABORT                    ZERO EXTENTS - ABEND   @ZA17540
OBDAM190 LA    RXTENT,DSCEXTYP          PT TO 1ST EXTENT OF DSCB Y02072
         DROP  RXTENT                   DROP DSCB BASE REG
         MVI   DEBDVMOD,DEBSEEKN        INHIBIT WRITE PERMIT ALL SEEKS
         MVC   DEBDSCBA(L'DEBBINUM),DEBBINUM  MOVE BB TO PREFIX
         TM    DEBOPATB,OUTPUT          CHECK FOR OUTPUT         YM1290
         BZ    OBDAM210                 BRANCH IF NO
         MVI   DEBDVMOD,DEBWSEEK        PERMIT ALL WRITES AND SEEKS
         USING FORCORE,RCORE            WORKAREA BASE SET UP     Y02072
OBDAM210 MVI   DWAFM3SW,0               SET FORMAT 3 SWITCH OFF  Y02072
         DROP  RCORE                                             Y02072
         USING DSCEXTYP,RXTENT          EST BASE FOR DSCB EXT    Y02072
         LA    RXTNMAX,F1XTENTS         MAXIMUM 3 EXTENTS FOR FORMAT 1
         CLI   DSCEXTYP,DSCULABL        TEST, BR IF 1ST EXTNT NOT  UL17
         BNE   OBDAM220                 A USER LABEL TRACK         UL17
         BCTR  RXTNMAX,0                DECREMENT NO OF EXTENTS    UL17
         LA    RXTENT,L'DSCEXT1(,RXTENT)  POINT TO NEXT DSCB       UL17
*                                       EXTENT                     UL17
OBDAM220 MVC   DEBSTRCC(DAADRLNG),DSCLOWLM  SET UP ONE EXTENT FROM
*                                       STARTING CCHH TO ENDING CCHH
         NI    DEBDVMOD,DEBSEEKN        PERMIT HEAD SEEKS
         CLI   DSCEXTYP,DSCYLBDY        CHECK FOR CYLINDER BOUNDARY
         BE    OBDAM224                 YES  BRANCH
         OI    DEBDVMOD,DEBSEEKF        INHIBIT ALL SEEKS
         DROP  RXTENT                   DROP DSCB EXTENT BASE REG
         SPACE 2
***********************************************************************
*  THE FOLLOWING ROUTINE SETS UP FOR AND BALRS TO THE SYSTEM CONVERT  *
*  ROUTINE TO GET THE NUMBER OF TRACKS IN EACH EXTENT. THE CONVERT    *
*  ROUTINE EXPECTS THE DEB TO BE IN REG 1 AND THE POINTER TO THE      *
*  ADDRESS TO BE CONVERTED IN REG 2.THE CONVERT ROUTINE USES REGISTERS*
*  9-13 AS WELL AS 0,1,2,AND 15. THE TTR IS RETURNED IN REG 0.        *
***********************************************************************
OBDAM224 EQU   *
         USING FORCORE,RCORE            EST OPEN WORK AREA BASE REG
         SPACE 1
         STM   R9,R15,DWASAVEA          SAVE REGS USED BY CNVRT  Y02072
         MVC   DXDAADDR+1(L'DEBBINUM),DEBBINUM  SET UP BIN NUMBER
         MVC   DXDAADDR+3(CCHHLNG),DEBENDCC  PUT END CCHH INTO EXTENT
         L     R1,DCBDEBAD              SET A POINTER TO THE DEB
         LA    R2,DXDAADDR              POINT TO CONSTANT FOR CONVERT
*                                       ROUTINE
         L     R15,CVTPTR               GET ADDRESS OF CVT
         USING CVT,R15                  ESTABLISH CVT BASE REG
         L     R15,CVTPRLTV             CONVERT RTNE
         DROP  R15                      DROP CVT BASE REG
         BALR  R14,R15
*
         LM    R9,R15,DWASAVEA          RESTORE ALL REGS         Y02072
         SRL   R0,16                    USE TT ONLY
         LR    RWRKX,R0                 PUT TT IN WORK REG
         LA    RWRKX,1(RWRKX)           ADD ONE TO TT(REL TO 0)
         LR    RWRKY,RWRKX              SAVE NO. OF TOTAL TRACKS
         SH    RWRKX,DWATTCTR           SUBTRACT TT OF LAST EXT  Y02072
         STH   RWRKX,DEBNMTRK           STORE NO. OF TRACKS IN THIS
*                                       EXTENT
         STH   RWRKY,DWATTCTR           UPDATE TT TO CURR EXTENT Y02072
         SR    RWRKX,RWRKX              CLEAR WORK REG           Y02072
         IC    RWRKX,DXDAADDR           GET CURRENT EXT NUMBER   Y02072
         LA    RWRKX,1(,RWRKX)          ADD ONE TO M FOR NEXT EXT.
         STC   RWRKX,DXDAADDR           SET UP M FOR NEXT EXTENT Y02072
         SPACE 2
****
****      CHECK FOR VIO & EXTENDED SEARCH. IF BOTH, ADJUST DEB
****      EXTENT SIZE SO THAT IT DOES NOT EXCEED THE REAL SIZE
****      OF THE DATA SET. THE LAST TRACK WILL BE THAT ON WHICH
****      THE EOF MARK WAS WRITTEN (AS INDICATED IN THE DSCB) OR
****      THE END OF THAT CYLINDER IF ALLOCATION IS IN CYLINDERS.
****      THIS IS NECESSARY BECAUSE IT IS IMPOSSIBLE TO RELEASE
****      EXTRA SPACE DURING THE CREATION OF A VIO DATA SET. AS
****      A RESULT, EXTENDED SEARCH OPERATIONS DURING PROCESSING
****      CAN CAUSE THE UNNECESSARY SEARCH OF UNUSED SPACE.
****
         L     RWRKX,DEBUCBAD           GET UCB ADDR FROM DEB    YM5761
         USING UCB,RWRKX                ESTABLISH UCB BASE       YM5761
         TM    UCBJBNR,UCBVRDEV         IS THIS VIO DATA SET     YM5761
         BNO   OBDAM250                 NO CONTINUE BUILDING DEB YM5761
         TM    DCBOPTCD,DCBOPTE         EXTENDED SEARCH OPTION? ZA09152
         BNO   OBDAM250                 NO - CONT BUILDING DEB  ZA09152
*
*    SET UP TO CONVERT LAST BLOCK ADDR - TTR TO CCHHR
*    THE CONVERT ROUTINE EXPECTS THE DEB TO BE IN REG 1, THE
*    TTR0 TO BE IN R0, AND THE ADDR OF THE AREA IN WHICH TO
*    PUT THE ACTUAL ADDRESS IN R2. IT USES REGS 9-13 ALSO.
*
         STM   R9,R15,DWASAVEA          SAVE REGS USED BY CNVRT  YM5761
         SR    R1,R1                    CLEAR PARM REG           YM5761
         IC    R1,DSCLSTAR              GET TT OF THE LAST       YM5761
         SLL   R1,8                     TRACK WRITTEN ON         YM5761
         IC    R1,DSCLSTAR+1            DURING CREATION OF THE   YM5761
         LA    R1,1(R1)                 ADD 1 TO TT              YM5894
         STH   R1,DWATTCTR              SAVE NO. TRKS IN WKA     YM5894
         STH   R1,DEBNMTRK              PUT NO. TRKS IN DEB EXT  YM5894
         BCTR  R1,0                     SUBT 1 AGAIN FOR TTR     YM5894
         SLL   R1,16                    DATA SET -PASS TTR0      YM5761
         LR    R0,R1                    PASS TTR0 IN R0          YM5894
         LA    R2,DCBXARG               PASS LOCATION FOR CNVRT  YM5761
*                                       RTN TO PUT ACTUAL ADDR   YM5761
*                                       THIS DCB FIELD IS UNUSED YM5761
         L     R1,DCBDEBAD              PUT DEB ADDR IN R1       YM5761
         L     R15,CVTPTR               GET ADDR OF CVT          YM5761
         USING CVT,R15                  ESTABLISH CVT BASE       YM5761
         L     R15,CVTPCNVT             GET ADDR OF CNVT RTN     YM5761
*                                       TO CNVT TTR TO ACTUAL    YM5761
         DROP  R15                      DROP CVT BASE            YM5761
         BALR  R14,R15                  BRANCH TO CNVRT RTN      YM5761
         LM    R9,R15,DWASAVEA          RESTORE REGS             YM5761
         MVC   DEBENDCC(CCHHLG),DCBXARG+3 MV CCHH INTO DEB       YM5761
         XC    DCBXARG(L'DCBXARG+L'DCBDRDX),DCBXARG  CLEAR DCB   YM5761
*                                       AREA USED FOR ADDR RET   YM5761
         TM    DEBDVMOD,DEBSEEKF        IS ALLOCATION IN CYL     YM5761
         BO    OBDAM250                 NO, TRK ALLOCATION OK    YM5761
****
****        ROUND UP EXTENT TO CYL IF ALLOCATED IN CYLINDERS
****
         L     RWRKY,CVTPTR             GET ADDRESS OF THE CVT   YM5761
         USING CVT,RWRKY                ESTABLISH CVT BASE REG   YM5761
         L     RDVCT,CVTZDTAB           GET ADDR OF DEV TABLE    YM5761
         DROP  RWRKY                    DROP CVT BASE            YM5761
         USING DVCTI,RDVCT              EST BASE FOR DEV CHAR    YM5761
*                                       TABLE INDEX              YM5761
         LA    RWRKY,DVCTYPMK           GET MASK FOR UNIT TYPE   YM5761
         N     RWRKY,UCBTYP             GET UNIT TYPE            YM5761
         IC    RWRKY,DVCTIOFF(RWRKY)    GET OFFSET IN TABLE      YM5761
         DROP  RDVCT,RWRKX              DROP UCB AND DVCT REG    YM5761
         LA    RDVCT,0(RWRKY,RDVCT)     GET DEVICE ENTRY ADDR    YM5761
         USING DVCT,RDVCT               EST BASE FOR TABLE       YM5761
         LH    RWRKX,DVCTRK             GET NO. TRKS/CYLINDER    YM5761
         DROP  RDVCT                    DROP DEV TAB BASE        YM5761
         BCTR  RWRKX,0                  DECREMENT MAX TRKS BY 1  YM5761
         LH    RWRKY,DEBENDHH           GET END TRK BEFORE ROUND YM5894
         STH   RWRKX,DEBENDHH           END OF EXT=END OF CYL    YM5761
         SR    RWRKX,RWRKY              HOW MANY TRKS ADDED      YM5894
         AH    RWRKX,DWATTCTR           ADD THIS TO TOTAL TRKS   YM5894
         STH   RWRKX,DWATTCTR           SAVE NO. TRKS IN WKA     YM5894
         STH   RWRKX,DEBNMTRK           SAVE NO. TRKS IN DEB EXT YM5894
****
         SPACE 2
OBDAM250 EQU   *                        TEST FOR MORE EXTENTS    YM5761
         BCT   RXTNTOT,OBDAM260         ANY MORE EXTENTS (TOTAL)
         B     OBDAMOUT                 NO, ALL EXTENTS ARE BUILT
         DROP  RCORE                                             Y02072
***********************************************************************
         SPACE 2
OBDAM260 EQU   *                        CONTINUE BUILDING EXTENTS
         BCT   RXTNCUR,OBDAM280         TEST MORE EXTENTS IN THIS DSCB
****
****           PREPARE TO GET NEXT DSCB
****
OBDAM270 EQU   *                        PROCESS NEW DSCB         Y02072
         USING DXDSCB-FRMT1KEY,RDSCB    ESTABLISH DSCB BASE REG  Y02072
         L     RXTENT,DSCCORE           GET NEXT DSCB ADDRESS    Y02072
         LA    RWRKX,FRMT1KEY           LOAD 44 BYTE KEY OFFSET  Y02072
         SR    RXTENT,RWRKX             SUBTR KEY NOT IN CORE    Y02072
         LR    RDSCB,RXTENT             NEXT SET OF EXTENTS
         CLI   DSCBFMID,FORMAT2         IS THIS FORMAT 2 DSCB    Y02072
         BNE   OBDAM275                 IF NOT, PROCEED          Y02072
         B     OBDAM270                 ELSE, GO GET NEXT DSCB   Y02072
OBDAM275 EQU   *                        PROCESS THIS DSCB        Y02072
         LA    RDEBEXT,DEBDASDL(RDEBEXT)   NEXT DEB EXTENT       Y02072
         B     OBDAM180                 RET TO PROCESS NEXT DSCB Y02072
         SPACE 2
****
****     MORE EXTENTS FOR CURRENT DATA SET CONTROL BLOCK
****
OBDAM280 LA    RXTENT,L'DSCEXT1(,RXTENT)  UPDATE DSCB POINTER
         BCT   RXTNMAX,OBDAM300         BRANCH IF MORE EXTENTS FOR
*                                       CURRENT FORMAT
****
****           END OF EXTENTS IN CURRENT FORMAT
****
         LA    RXTENT,1(,RXTENT)        NO, INCREMENT DSCB POINTER
         USING FORCORE,RCORE            SET UP WORKAREA BASE     Y02072
         CLI   DWAFM3SW,0               IS THIS FORMAT 3         Y02072
         DROP  RCORE                                             Y02072
         BNE   OBDAM320                 BRANCH IF YES            Y02072
OBDAM290 EQU   *                        PROCESS THIS DSCB        Y02072
         L     RXTENT,FOURBYTS(RXTENT)  GET ADDRESS OF FORMAT 3  YM1290
         USING DXDSCB3K,RXTENT          ESTABLISH F3 DSCB BASE REG
         LR    RDSCB,RXTENT             SAVE CURRENT DSCB ADDRESS
         CLI   DSCBFMID,FORMAT2         IS THIS FORMAT 2 DSCB    Y02072
         BNE   OBDAM295                 IF NOT, PROCEED          Y02072
         LA    RXTENT,DSCCORE           GET NEXT DSCB ADDRESS    Y02072
         B     OBDAM290                 ELSE, GO GET NEXT DSCB   Y02072
         SPACE
****
****            FORMAT 3 DSCB PROCESSING
****
OBDAM295 EQU   *                        PROCESS THIS DSCB        Y02072
         DROP  RDSCB                    DROP DSCB BASE REG       Y02072
         LA    RXTENT,DSCBEXSK          GO TO FIRST EXTENT FIELD
         DROP  RXTENT                   DROP F3 DSCB BASE REG
         LA    RXTNMAX,F3XTNTS1         SET LIMIT TO 4 EXTENTS IN KEY
         USING FORCORE,RCORE            SET UP WORKAREA BASE     Y02072
         STC   RXTNMAX,DWAFM3SW         TURN ON FORMAT 3 SWITCH  Y02072
         SPACE
****
****           MORE EXTENTS IN CURRENT FORMAT TO BUILD
****
OBDAM300 MVC   DEBDASD+DEBDASDL(FLDUCBBB),DEBDASD  COPY UCB AND BB
*                                       FIELDS FOR THE NEXT EXTENT
         LA    RDEBEXT,DEBDASDL(RDEBEXT)  POINT TO THE NEXT DEB EXTENT
         B     OBDAM220
         DROP  RDEBEXT                  DROP DEB EXTENT SECTION BASE
*
*
OBDAM320 LA    RXTNMAX,F3XTNTS2         RESET EXTENT COUNT TO 9
         MVI   DWAFM3SW,0               TURN OFF FORMAT 3 SWITCH Y02072
         B     OBDAM300
         SPACE 2
****
****     STORE TOTAL TRACKS IN THE DATA SET IN THE DCB
****
OBDAMOUT EQU   *                        DEB BUILT, INITIALIZE DCB FLDS
         LH    RWRKX,DWATTCTR           LOAD TOTAL TRKS IN D.S.  Y02072
         IC    RWRKY,DCBKEYLE           STORE TOTAL SIZE OF DATA SET
         ST    RWRKX,DCBKEYLE           (IN TRACKS) IN THE DCB,
         STC   RWRKY,DCBKEYLE           SAVING KEY LENGTH
*                                                              @Y30LSBS
****           THIS ROUTINE TAKES THE EXTENTS FROM THE DEB JUST@Y30LSBS
****     BUILT AND TESTS THE UCB OF EACH EXTENT TO SEE IF IT   @Y30LSBS
****     RESIDES ON MSS VIRTUAL DASD.  IF SO, IT WILL USE THE  @Y30LSBS
****     EXTENT INFORMATION IN THAT EXTENT AS WELL AS ALL      @Y30LSBS
****     FOLLOWING EXTENTS ON THE SAME UCB, AND BUILD A PARA-  @Y30LSBS
****     METER LIST FOR ACQUIRING DASD SPACE FOR STAGING IN    @Y30LSBS
****     THE DATA.                                             @Y30LSBS
*                                                              @Y30LSBS
*                                                              @Y30LSBS
         L     RWTG,DWASAVE6            LOAD SAVED WTG TAB     @Y30LSBS
         USING WTG,RWTG                 WTG TABLE BASE         @Y30LSBS
OBDAMGET IECRES GET,PREFIX=YES,SP=230,LV=ACQPLN,ID=MSS2,       @Y30LSBS.
               STM=(R2,R15,WTGPREFX)    GET THE ACQUIRE LIST   @Y30LSBS
         DROP  RWTG                     DROP BASE              @Y30LSBS
         USING ACQLST,R1                ACQLST ADDRESSABILITY  @Y30LSBS
         SR    REXTN,REXTN              ZERO OUT A REGISTER    @Y30LSBS
         IC    REXTN,DEBNMEXT           GET NUMBER OF EXTENTS  @Y30LSBS
         LA    RDEBEXT,DEBBASND         POINT TO 1ST DEB EXTENT@Y30LSBS
         USING DEBDASD,RDEBEXT                                 @Y30LSBS
*                                                              @Y30LSBS
****     BEGINNING OF OUTER LOOP TO HANDLE EACH UCB.           @Y30LSBS
****     INITIALIZE PARAMETER LIST HEADERS.                    @Y30LSBS
*                                                              @Y30LSBS
OBDAM350 EQU   *                                               @Y30LSBS
         SR    RCTR,RCTR                ZERO COUNTER REGISTER  @Y30LSBS
         XC    ACQLST(ACQPLN),ACQLST    ZERO OUT THE PARM LIST @Y30LSBS
         LA    REXTB,AREXT              POINT TO LIST ENTRY    @Y30LSBS
         USING AREXTSEC,REXTB           ACQUIRE EXT BASE       @Y30LSBS
         L     RMSSUCB,DEBUCBAD         GET COMPARATOR UCB     @Y30LSBS
         USING UCB,RMSSUCB              MSS UCB BASE REG       @Y30LSBS
*                                                              @Y30LSBS
****     START OF THE INNER LOOP TO HANDLE EACH DEB EXTENT FOR @Y30LSBS
****     EACH SAME UCB.  COPY LOW AND HIGH CCS FROM DEB TO     @Y30LSBS
****     PARAMETER LIST UNTIL NEW UCB IS ENCOUNTERED OR NUMBER @Y30LSBS
****     OF DEB EXTENTS ARE EXHAUSTED.                         @Y30LSBS
*                                                              @Y30LSBS
OBDAM360 EQU   *                                               @Y30LSBS
         CLM   RMSSUCB,ADDR,DEBUCBAD+1  IS IT THE SAME UCB     @Y30LSBS
         BNE   OBDAM380                 NO, CHECK IF ACQUIRABLE@Y30LSBS
         TM    UCBTBYT2,UCBRVDEV        IS EXT ON MSS  DASD    @Y30LSBS
         BZ    OBDAM370                 NO, CHECK NEXT EXTENT  @Y30LSBS
         CLC   FOXES,DEBSTRCC           VALID EXTENT           @Y30LSBS
         BE    OBDAM370                 NO, DONT PROCESS       @Y30LSBS
         MVC   LOCC,DEBSTRCC            MOVE IN LOW CC         @Y30LSBS
         MVC   HICC,DEBENDCC            MOVE IN THE HIGH CC    @Y30LSBS
         LA    REXTB,AREXTLN(REXTB)     INCREMENT LIST POINTER @Y30LSBS
         AH    RCTR,ONEMOR              INCREMENT NUMB ENTRIES @Y30LSBS
OBDAM370 EQU   *                                               @Y30LSBS
         LA    RDEBEXT,DEBDASDL(RDEBEXT) POINT TO NEXT EXTENT  @Y30LSBS
         BCT   REXTN,OBDAM360           GO BACK TO CHECK IT OUT@Y30LSBS
OBDAM380 EQU   *                                               @Y30LSBS
         LTR   RCTR,RCTR                ANY SPACE TO ACQUIRE   @Y30LSBS
         BZ    OBDAM450                 NO, CHECK FOR MORE EXTS@Y30LSBS
*                                                              @Y30LSBS
****     THIS ROUTINE USES THE PARAMETER LIST JUST BUILT TO    @Y30LSBS
****     ACQUIRE DASD SPACE VIA THE ICBACREL MACRO ON MSS      @Y30LSBS
****     DASD.  NOTE THAT ANY ERRORS WILL CAUSE AN ABEND ERR.  @Y30LSBS
*                                                              @Y30LSBS
         STC   RCTR,ARNMEXTS            STORE NUMB EXTS TO GET @Y30LSBS
         MVC   ARVOL,UCBVOLI            AND FOR WHAT VOLUME    @Y30LSBS
         DROP  RMSSUCB                                         @Y30LSBS
         MVI   ACQLST+PLUS3,ACQPLN      SET LIST LENGTH        @Y30LSBS
*                                                              @Y30LSBS
        ICBACREL TYPE=ACQ,MF=(E,ACQLST) ACQUIRE THE SPACE      @Y30LSBS
*                                                              @Y30LSBS
         LTR   R15,R15                  ANY ERRORS             @Y30LSBS
         BZ    OBDAM450                 NO, MORE EXTENTS?      @Y30LSBS
***       ACQUIRE FAILED - ABEND                               @Y30LSBS
         LR    RPARPTR,R1               PASS PARM LIST PTR     @Y30LSBS
         LA    R0,PD111                 SET FAILURE CODE       @Y30LSBS
         B     ERREXIT                  ABEND                  @Y30LSBS
OBDAM450 EQU   *                                               @Y30LSBS
         LTR   REXTN,REXTN              MORE EXTENTS TO PROCESS@Y30LSBS
         BNZ   OBDAM350                 YES, START OUTER LOOP  @Y30LSBS
         L     RWTG,DWASAVE6            NO, RESTORE WTG TABL AD@ZM30030
         USING WTG,RWTG                                        @ZM30030
OBDAMFRE IECRES FREE,PREFIX=YES,A=(R1),STM=(R2,R14,WTGPREFX)   @Y30LSBS
         DROP  RWTG,RDEBEXT,R1,REXTB    DROP ALL BASES USED    @Y30LSBS
*                                                              @Y30LSBS
****     THIS ENDS  MSS PROCESSING.                            @Y30LSBS
*                                                              @Y30LSBS
         EJECT
***********************************************************************
*  FUNCTION II: THE FOLLOWING FUNCTION LOADS ALL THE ROUTINES REQUIRED*
*  FOR BDAM AND STORES THEIR IDS IN THE DEB AND THEIR ADDRESSES IN THE*
*  DCB AND DEBAVT. IT BALRS TO A SUBROUTINE FOR THE LOAD, RETURNING   *
*  VIA REG 2.  THIS ROUTINE PROCESSES TOTALLY IN DATA MANAGEMENT KEY. *
*  INPUT TO THIS FUNCTION IS AS FOLLOWS:                              *
*              REGISTER 4 = OPEN WORKAREA ADDRESS                     *
*              REGISTER 9 = DEB AVT ADDRESS                           *
*              REGISTER 10 = DCB ADDRESS                              *
*              COMMON OPEN'S REGISTERS STORED AT DWASAVE              *
*              ENTRY IN DATA MANAGEMENT KEY                           *
*              DEB WITH PRIMARY EXTENTS INITIALIZED                   *
*  OUTPUT FROM THIS FUNCTION IS AS FOLLOWS:                           *
*              SAME AS INPUT                                          *
*              ALL MODULES REQUIRED FOR PROCESSING HAVE BEEN LOADED   *
***********************************************************************
         SPACE
FUNCT2   EQU   *                        BEGINNING OF FUNCTION II
         L     RWTG,DWASAVE6            LOAD SAVED WTG TAB ADDR  Y02072
         USING WTG,RWTG                 ADDRESSABILITY FOR WTG   Y02072
         SPACE 2
****
****  INITIALIZE AND POSITION TO DEBAVT AND ACCESS METHOD ID SECTION
****
         MVI   DEBNMSUB,NOSUBRTN        INITIALIZE NO. OF SUBROUTINES
         TM    DCBOPTCD,DCBOPTRB        IS ADDRESSING BY RELATIVE BLOCK
         BZ    FIXAPP                   NO, SKIP NEXT STEP
         MVC   DEBAMLNG,DEBNMEXT        SET BDAM LENGTH TO WORD COUNT
         TM    DCBOPTCD,DCBOPTTO        IS OVERFLOW BEING USED
         BZ    FIXAPP                   NO- BRANCH
         SR    RWRKX,RWRKX              CLEAR WORK REGISTER      Y02072
         IC    RWRKX,DEBAMLNG           GET SIZE OF ACCESS METHOD SECT
         LA    RWRKX,IDINCR(,RWRKX)     INCREMENT WORD COUNT BY TWO
         STC   RWRKX,DEBAMLNG           STORE BACK INTO DEB
*                                       RELATIVE EXTENTS
FIXAPP   EQU   *                        GET APPENDAGE ADDRESSES
         L     RWRKX,CVTPTR             GET CVT ADDRESS
         USING CVT,RWRKX                ESTABLISH CVT BASE REG
         L     RWRKX,CVTXAPG            LOCATE IOS APPENDAGE LIST
         DROP  RWRKX                    DROP CVT BASE REG
         MVC   DEBAVT(DEBAVTLN),0(RWRKX)  MOVE TO OUR APPENDAGE LIST
         LA    RDEBEXT,DEBBASND         ESTABLISH A POINTER TO THE
         SR    RWRKX,RWRKX              SUBROUTINE ID AREA OF THE DEB
         IC    RWRKX,DEBNMEXT           BY OFFSETTING FOR
         SLL   RWRKX,TIMES16            NUMBER OF EXTENTS X 16
         AR    RDEBEXT,RWRKX            ADDRESS OF END OF EXTENTS
         SR    RWRKX,RWRKX              CLEAR REGISTER
         IC    RWRKX,DEBAMLNG           ACCESS METHOD LENGTH (WORD
         SLL   RWRKX,TIMES4             COUNT FOR RELATIVE EXTENTS)
         AR    RDEBEXT,RWRKX            TIMES 4
         SPACE 2
****
****    LOAD THE FOUNDATION MODULE REQUIRED. THE ID OF THE MODULE
****    TO BE LOADED IS PASSED IN RWRKX(R14). THE ADDRESS OF MODULE
****    ON RETURN IS IN R0. RETURN LINKAGE IS VIA RETURN(R2).
****
         TM    DCBBFTEK,DCBBFTKR        TEST FOR BUFTEK=R        S19015
         BZ    LOADS                    BR TO LOAD KA IF NOT R   S19015
         TM    DCBRECFM,DCBRECV+DCBRECSB  IS RECFM=VS            S19015
         BO    VBOK                     YES,BRANCH               S19015
ROFF     NI    DCBBFTEK,X'FF'-DCBBFTKR  TURN OFF BUFTEK=R BIT    S19015
         B     LOADS                    LOAD NON VRE MODULES     S19015
VBOK     TM    DCBRECFM,DCBRECBR        TEST FOR RECFM=VBS       S19015
         BO    ROFF                     BRANCH IF YES            S19015
         LA    RWRKX,IDVREKJ            INITIALIZE POINTER TO KJ Y02072
         BAL   RETURN,MODLOAD           GO LOAD FOUNDATION MOD   Y02072
         B     RTPT                     GO TO NEXT ROUTINE       Y02072
LOADS    LA    RWRKX,IDNOVSKA           INITIALIZE POINTER TO KA Y02072
         BAL   RETURN,MODLOAD           LOAD FOUNDATION MODULE   Y02072
RTPT     SR    RWRKY,RWRKY              CLEAR WORK REGISTER      Y02072
         IC    RWRKY,DCBOFLGS           SAVE OPEN FLAGS
         ST    R0,DCBREAD               STORE FOUNDATION MODULE ADDR
         STC   RWRKY,DCBOFLGS           RESTORE OPEN FLAGS
         SPACE 2
****
****     THE NEXT ROUTINE CHECKS FOR FEEDBACK OPTION AND WRITE ADD
****     FUNCTION. BOTH MODULE'S ADDRESSES WILL BE PUT IN THE DCB.
****
*                        TEST FOR FEEDBACK OPTION
         TM    DCBOPTCD,DCBOPTF         TEST NEED FOR THE RELATIVE
         BZ    WRITEADD                 BLOCK FEEDBACK MODULE    Y02072
         LA    RWRKX,IDFEEDKG           LOAD FIXED FORMAT ID     Y02072
         TM    DCBOPTCD,DCBOPTTO        IS IT TRK OVERFLOW       Y02072
         BNO   RELFEED                  NO, ID FOR 19KG OK       Y02072
         LA    RWRKX,IDFEEDKH           GET OVERFLO FORMAT       Y02072
RELFEED  EQU   *                        GO LOAD REL BLK FORMAT   Y02072
         BAL   RETURN,MODLOAD           LOAD IT IF REQUIRED AND  Y02072
         ST    R0,DCBDFBK               STORE THE ADDRESS IN THE DCB
WRITEADD EQU   *                        TEST IF WRITE ADD REQ    Y02072
         TM    DCBMACF2,DCBMRAWR        WRITE ADD MODULE REQUIRED
         BZ    TSTCHK                   BRANCH NO
         TM    DCBBFTEK,DCBBFTKR        TEST FOR BUFTEK=R        S19015
         BZ    LDFMTMOD                 BR IF BUFTEK IS NOT R    S19015
         LA    RWRKX,IDWAKN             INITIALIZE POINTER TO KN Y02072
         BAL   RETURN,MODLOAD           LOAD MODULE KN           Y02072
         ST    R0,DCBDFOR               STORE THE ADDRESS IN DCB S19015
         B     TSTCHK                   GO PROCESS NEXT RTN      Y02072
LDFMTMOD TM    DCBRECFM,DCBRECV         IS DATA SET              S19015
*                                       PRE-FORMATTED            S19015
         BZ    PREFM                    YES, GO LOAD FIXED INDEX
         LA    RWRKX,IDWAKM             INITIALIZE POINTER TO KM Y02072
LDADD    BAL   RETURN,MODLOAD           LOAD FORMAT MODULE AND   Y02072
         ST    R0,DCBDFOR               STORE THE ADDRESS IN THE DCB
         B     TSTCHK                   BR TO PROCESS NEXT RTN   Y02072
PREFM    LA    RWRKX,IDWAKO             INITIALIZE POINTER TO KO Y02072
         B     LDADD                    ENTRIES AND GO LOAD MODULE.
         SPACE
****
****     THIS ROUTINE TESTS FOR ADDITIONAL OPTIONS AND LOADS THE
****     REQUIRED OPTION MODULES INCLUDING CHECK AND THE APPENDAGES
****
TSTCHK   EQU   *                        LOAD CHECK MOD           Y02072
         TM    DCBMACF1,DCBMRCK         IS CHECK MACRO BEING USED
         BZ    TDYNBUF                  NO,GO TEST DYN BUFFERING Y02072
         LA    RWRKX,IDCHKLI            POINT TO CHECK ID, 19LI  Y02072
         BAL   RETURN,MODLOAD           LOAD THE CHECK ROUTINE   Y02072
         SR    RWRKY,RWRKY              CLEAR WORK REGISTER      Y02072
         IC    RWRKY,DCBOPTCD           SAVE THE OPTCD BITS
         ST    R0,DCBCHECK              STORE THE CHECK ROUTINE ADDRESS
         STC   RWRKY,DCBOPTCD           RESTORE THE OPTCD BITS
TDYNBUF  EQU   *                        TEST FOR DYN BUFFERING @ZA08000
*IS NO LONGER REQUIRED BECAUSE ONE OF THE APP. WILL            @ZA08000
* ALWAYS BE LOADED                                             @ZA08000
         LA    RWRKX,IDSIOLE            LOAD SIO APPENDAGE 19LE  Y02072
         L     RTCB,DEBTCBAD            GET TCB ADDRESS
         USING TCB,RTCB                 ESTABLISH TCB BASE REG
         TM    TCBFLGS6,TCBRV           IS ADDRSPCE REAL         XM6189
         BO    REALOK                   BRANCH IF ADDRSPCE REAL
         LA    RWRKX,DYNOFFST(RWRKX)    INCREMENT TO VIRTUAL
         DROP  RTCB                     DROP TCB BASE REGISTER
REALOK   EQU   *
         BAL   RETURN,MODLOAD           LOAD THE APPENDAGE       Y02072
         ST    R0,DEBSIOA               DYN BUF MOD = SIO APD
*                        TEST FOR EXTENDED SEARCH                Y02072
         TM    DCBOPTCD,DCBOPTE         REQUIRED IF EXTEND SRCH  YM1383
         BZ    LDCEXCE                  HAS BEEN SPECIFIED
         LA    RWRKX,IDEOELC            END OF EXTENT APPENDAGE  Y02072
         BAL   RETURN,MODLOAD           LOAD THE APPENDAGE       Y02072
         ST    R0,DEBEOEA               STORE ADDR IN AVT
LDCEXCE  LA    RWRKX,IDCEKU             LOAD CHANNEL END AND     Y02072
         BAL   RETURN,MODLOAD           EXCEPTIONAL CHAN. END    Y02072
         ST    R0,DEBCEA                STORE ADDR IN AVT
         LR    RWRKX,R0                 OFFSET TO EXCEPTIONAL CHANNEL
         L     RWRKY,FOURBYTS(RWRKX)    ABE OFFSET IS 4 BYTES INTO 19KU
         AR    RWRKY,RWRKX              ADD TO BEGIN OF 19KU
         ST    RWRKY,DEBXCEA            ABNORMAL END APPENDAGE ADDR
         DROP  RWTG                     DROP WTG TABLE BASE      Y02072
         EJECT
***********************************************************************
*  FUNCTION III: THE FOLLOWING FUNCTION INITIALIZES THE REMAINING     *
*  DCB FIELDS, CALLS FOR THE CONSTRUCTION OF THE IRB AND CONSTRUCTS   *
*  A READ EXCLUSIVE LIST IF REQUIRED. ALL PROCESSING IS IN DATA       *
*  MANAGEMENT KEY.                                                    *
*  INPUT TO THIS FUNCTION IS AS FOLLOWS:                              *
*              REGISTER 4 = OPEN WORKAREA ADDRESS                     *
*              REGISTER 9 = DEB AVT ADDRESS                           *
*              REGISTER 10= DCB ADDRESS                               *
*              OPEN WORKAREA CONTAINS ADDRESS OF DEB EXTENSION        *
*              ENTRY IN DATA MANAGEMENT KEY                           *
*  OUTPUT FROM THIS FUNCTION IS AS FOLLOWS:                           *
*              SAME AS INPUT                                          *
*              IRB HAS BEEN CONSTRUCTED AND INITIALIZED               *
*              READ EXCLUSIVE LIST HAS BEEN OBTAINED AND INITIALIZED  *
*              DCB FIELDS HAVE BEEN INITIALIZED                       *
***********************************************************************
         SPACE
FUNCT3   EQU   *                        BEGINNING OF FUNCTION 3  Y02072
         SPACE 2
****
****   INITIALIZE THE DCB FIELDS WHICH ARE USED BY BDAM.
****
         XC    DCBIOBAD,DCBIOBAD        CLEAR IOB POOL POINTER AND
         XC    DCBIOBSQ(DCBIOBQS),DCBIOBSQ  IOB QUEUE POINTERS
         SPACE 2
****
**** THE FOLLOWING ROUTINE DETERMINES IF A READ EXCLUSIVE LIST IS
**** REQUIRED AND IF SO BALRS TO THE SUBROUTINE TO GET IT FROM SP230.
**** THE POINTER TO THE READX LIST IS STORED IN THE DEB EXTENSION AT
**** LABEL DEBXXARG.  THE DEB EXTENSION IS GOTTEN AND INITIALIZED BY
**** COMMON OPEN.  ITS ADDRESS IS STORED BY COMMON OPEN IN THE OPEN
**** WORKAREA AT LABEL DXDEBXAD.
****
         TM    DCBMACF1,DCBMRRDX        DID USER SPECIFY READ    A35339
*                                       EXCLUSIVE                A35339
         BO    ORRDX                    BRANCH IF YES            A35339
         TM    DCBMACF2,DCBMRAWR        DID USER SPECIFY WR ADD  A35339
         BZ    SETUPIRB                 NO,BR TO NEXT ROUTINE    Y02072
         TM    DCBRECFM,DCBRECV         IF FORMAT FIXED          Y02072
         BO    ORRDX                    NO,XLUSIVE CNTRL REQ     Y02072
         LA    RWRKY,DEBBASND           GO TO DASD SECTION       Y02072
         USING DEBDASD,RWRKY            BASE FOR DASD SECTION    Y02072
         L     RWRKY,DEBUCBAD           GET UCB FROM 1ST EXT     Y02072
         DROP  RWRKY                                             Y02072
         USING UCBOB,RWRKY              BASE FOR UCB             Y02072
         CLI   UCBTBYT4,UCB23051        IS DEVICE 2305-1         Y02072
         BE    ORRDX                    YES, XCLUSIVE CNTROL REQ Y02072
         CLI   UCBTBYT4,UCB23052        IS DEVICE 2305-2         Y02072
         BNE   SETUPIRB                 NO, NO XLUSIVE CNTRL     Y02072
         DROP  RWRKY                                             Y02072
****
****                GET CORE FOR EXCLUSIVE CONTROL LIST
****
ORRDX    OI    DCBOPTCD,DCBOPTRE        SET EXCLUSIVE OPTION     A35339
         LA    R1,RDXLSTLG              LOAD LENGTH IN REG 1-    Y02072
*                                       SUBRTN EXPECTS LEN IN REG 1
         BAL   RETURN,ENTSP230          GO GET CORE              Y02072
         USING RDXLIST,R1               ESTABLISH READX LIST BASE
         XC    RDXLIST(RDXLSTLG),RDXLIST  CLEAR CORE FOR XLIST   A35339
         L     RWRKX,DXDEBXAD           GET DEBEXT PTR IN WKAREA Y02072
         USING DEBXTN,RWRKX             EST BASE FOR DEB EXT     Y02072
         ST    R1,DEBXXARG              ST RDXLST PTR IN DEBEXT  Y02072
         OI    DXATEXC1,FCAORDX         SET AUDIT TRAIL BIT      Y02072
*                                       FOR FORCE CLOSE CLEANUP  Y02072
*                                       INDICATING READX LIST    Y02072
         DROP  R1,RWRKX                 DROP READX AND DEBEXT BASES
         SPACE 2
****
****     INITIALIZE THE IRB
****
SETUPIRB EQU   *
         L     RWRKX,DCBREAD             LOCATE ASI ADDRESS
         L     R0,ASYNCAD(,RWRKX)        LOAD ASI ADDR INTO PARAMETER
*                                        REGISTER
         CLI   DXUKEY,USERPOOL          CALLER IN KEY ZERO?      YM7957
         BE    ZEROCIRB                 YES, CIRB SUP STATE/KEY  YM7957
         CIRB  EP=(0),KEY=PP,MODE=PP,STAB=(RE)
         B     DONECIRB                 CIRB HAS BEEN DONE       YM7957
ZEROCIRB EQU   *                                                 YM7957
         CIRB  EP=(0),KEY=SUPR,MODE=SUPR,STAB=(RE)               YM7957
DONECIRB EQU   *                                                 YM7957
         O     R1,DEBIRBAD              SAVE HI ORDER BYTE BY OR'ING IT
         ST    R1,DEBIRBAD              INTO REG ,THEN STORE IRB ADDR
****
****            DETERMINE WHERE TO GO FROM HERE
****
         TM    DCBBFTEK,DCBBFTKR        TEST FOR BUFTEK=R
         BZ    NOVRE                    IF NOT R BRANCH
         TM    DCBMACF2,DCBMRSWA        DID USER SUPPLY SWA
         BO    FUNCT7                   YES, DCB COMPLETED       Y02072
         B     FUNCT6                   BRANCH TO GET SWAS       Y02072
NOVRE    EQU   *
         TM    DCBOPTCD,DCBOPTRB        RELATIVE BLOCK SPECIFIED Y02072
         BO    FUNCT4                   BR TO REL BLK RTN        Y02072
         TM    DCBOPTCD,DCBOPTDB        DYN BUFFERING SPECIFIED  Y02072
         BO    FUNCT5                   YES, GO TO DYN BUF RTN   Y02072
         B     FUNCT7                   NO, GO TO EXIT MODULE    Y02072
         EJECT
***********************************************************************
*  FUNCTION IV:  THE FOLLOWING FUNCTION IS EXECUTED FOR RECFM=F OR FT *
*  ONLY WHEN OPTCD=R (RELATIVE BLOCK ADDRESSING). IN THIS CASE, REL-  *
*  ATIVE EXTENTS, ONE PER PRIMARY EXTENT, ARE APPENDED TO THE DEB.    *
*  EACH RELATIVE EXTENT CONTAINS THE FOLLOWING:                       *
*    OVERFLOW:  NUMBER OF TRACKS PER PERIOD- 4 BYTES(OCCURS ONCE/DEB) *
*               NUMBER OF BLOCKS PER PERIOD- 4 BYTES(OCCURS ONCE/DEB) *
*               NUMBER OF BLOCKS PER EXTENT- 4 BYTES(OCCURS ONCE/EXT) *
*    NOT OVFLO: NUMBER OF BLOCKS PER TRACK- 1 BYTE(OCCURS ONCE/EXT)   *
*               NUMBER OF BLOCKS PER EXTENT- 3 BYTES(OCCURS ONCE/EXT) *
*  THESE RELATIVE EXTENTS ARE USED TO CALCULATE THE POSITION OF A     *
*  RELATIVE BLOCK WITHIN THE DATA SET. ALL PROCESSING IS IN DATA      *
*  MANAGEMENT KEY.                                                    *
*  INPUT TO THIS FUNCTION IS AS FOLLOWS:                              *
*              REGISTER 4 = OPEN WORKAREA ADDRESS                     *
*              REGISTER 9 = DEB AVT ADDRESS                           *
*              REGISTER 10= DCB ADDRESS                               *
*              ENTRY IN DATA MANAGEMENT KEY                           *
*              DEB WITH PRIMARY EXTENTS INITIALIZED                   *
*  OUTPUT FROM THIS FUNCTION IS AS FOLLOWS:                           *
*              SAME AS INPUT                                          *
*              RELATIVE EXTENTS IN DEB HAVE BEEN INITIALIZED          *
***********************************************************************
         SPACE
FUNCT4   EQU   *                        BEGINNING OF FUNCTION IV
         MVI   DWAFLAGS,0               INIT TO FIRST PASS       A49438
         SR    RDSSSZ,RDSSSZ            SET DATA SET SIZE TO ZERO
         SR    RXTNCUR,RXTNCUR          CLEAR NUMBER OF EXTENTS REG
         IC    RXTNCUR,DEBNMEXT         GET NUMBER OF EXTENTS
         LA    RDEBAM,DEBBASND          POINT TO DEB DASD        Y02072
EXTLOOP  LA    RDEBAM,DEBDASDL(,RDEBAM) ADD ON EXTENT SIZE AS MANY
         BCT   RXTNCUR,EXTLOOP          TIMES AS THERE ARE EXTENTS
         USING DEBACSMD,RDEBAM          ESTABLISH DAM ACCESS METHOD
*                                       SECTION BASE REG
         IC    RXTNCUR,DEBNMEXT         GET NUMBER OF EXTENTS
         L     RWRKY,CVTPTR             GET ADDRESS OF THE CVT
         USING CVT,RWRKY                ESTABLISH CVT BASE REG
         L     RDVCT,CVTZDTAB           GET ADDR OF DEV CHAR TABL INDEX
         DROP  RWRKY                    DROP CVT BASE REG
         USING DVCTI,RDVCT              ESTABLISH DEVICE CHAR TABLE
*                                       INDEX BASE REG
         LR    RDEBEXT,RDEBA            DEBAVT ADDR IN EXT REG   Y02072
         USING DEBDASD-(DEBBASND-DEBAVT),RDEBEXT  ESTABLISH DEB DASD
*                                       BASE (RDEBA PTS TO AVT)  Y02072
         L     RWRKX,DEBUCBAD           LOCATE DEVICE TYPE TO MATCH UCB
         USING UCBOB,RWRKX              ESTABLISH UCB BASE REG
         LA    RWRKY,DVCTYPMK           GET MASK FOR UNIT TYPE
         N     RWRKY,UCBTYP             GET UNIT TYPE
         IC    RWRKY,DVCTIOFF(RWRKY)    GET OFFSET TO DEV CHAR TAB
         DROP  RDVCT,RWRKX              DROP UCB AND DVCT BASES
         LA    RDVCT,0(RWRKY,RDVCT)     GET DEVICE ENTRY IN TABLE
*
         USING DVCT,RDVCT               EST DEVICE CHAR TABLE BASE REG
         SR    RWRKX,RWRKX              CLEAR REGISTER
         SR    RWRKY,RWRKY              CLEAR REGISTER
         LH    RWRK0,DVCTOL             GET TOLERANCE           ZA02523
         STH   RWRK0,DWADVTOL           SAVE TOLER IN WKAREA    ZA02523
         SR    RWRK0,RWRK0              CLEAR WORK REG          ZA02523
*
*
*    TWO VALUES NEED BE CALCULATED, APPLICABLE TO BOTH TRACK
*    OVERFLOW AND NON-OVERFLOW - BLKSIZE AND KEY LENGTH + OVERHEAD
*    (MINUS KEY OVERHEAD IF NO KEYS) FOR:  A) THE LAST RECORD ON
*    THE TRACK (DWARLREC) AND, B) THE FIRST OR INTERMEDIATE RECORD
*    ON THE TRACK (DWARNREC), WHICH INCLUDES TOLERANCE.
*
*
*     CALCULATE SIZE OF THE LAST RECORD ON THE TRACK
*
         IC    RWRKY,DVCOVLB            GET OVERHD,LAST BLK     ZA02523
         TM    DVCFLAGS,DVC2BOV         TWO BYTE OVERHEAD       ZA02523
         BNO   NOT2BYTA                 NO, NOT 2305            ZA02523
         LH    RWRKY,DVCOVHD            YES, GET 2 BYTES        ZA02523
NOT2BYTA EQU   *                        TEST FOR KEYS           ZA02523
         IC    RWRKX,DCBKEYLE           GET KEY LENGTH          ZA02523
         LTR   RWRKX,RWRKX              ARE THERE KEYS          ZA02523
         BNZ   KEYS                     YES, DONT SUBTR OVERHD  ZA02523
         IC    RWRK0,DVCOVNK            NO, GET OVERHD TO SUBTR ZA02523
KEYS     EQU   *                        SUBT KEY OVERHEAD       ZA02523
         AH    RWRKX,DCBBLKSI           ADD BLKSIZE TO KEY LEN  ZA02523
         SR    RWRKY,RWRK0              SUBT KEY OVERHD FROM    ZA02523
*                                       OVERHEAD FOR LAST BLK   ZA02523
         AR    RWRKX,RWRKY              ADD BLKSIZE+KEYLEN+     ZA02523
*                                       OVERHEAD FOR LAST BLK   ZA02523
*                                       MINUS KEY OVRHD IF NONE ZA02523
         ST    RWRKX,DWARLREC           SAVE # BYTES FOR LAST   ZA02523
*                                       ENTIRE RECORD ON TRK    ZA02523
*
*   CALCULATE SIZE OF FIRST OR INTERMEDIATE RECORD ON TRACK
*
         SR    RWRKX,RWRKY              SUBT OVERHD LEAVING     ZA02523
*                                       BLKSIZE AND KEYS        ZA02523
         MH    RWRKX,DWADVTOL           CALCULATE TOLERANCE     ZA02523
*                                       (1.049/1.0 X KL+DL)     ZA02523
         SRL   RWRKX,9                  DIVIDE BY 512           ZA02523
         IC    RWRKY,DVCOVNLB           OVERHD FOR NOT-LAST BLK ZA02523
         TM    DVCFLAGS,DVC2BOV         2 BYTE OVERHEAD         ZA02523
         BNO   NOT2BYTB                 NO, BRANCH AROUND       ZA02523
         LH    RWRKY,DVCOVHD            GET 2 BYTE OVERHD       ZA02523
NOT2BYTB EQU   *                        CALCULATE OVERHEAD      ZA02523
         SR    RWRKY,RWRK0              SUBTRACT KEY OVERHD     ZA02523
         AR    RWRKX,RWRKY              ADD 1ST/MID REC OVHD    ZA02523
*                                       TO BLKSIZE+KEY          ZA02523
         ST    RWRKX,DWARNREC           SAVE TOTAL REC BYTES-   ZA02523
*                                       INCLUDES OVERHD FOR NOT ZA02523
*                                       LAST REC+DL+KL+TOLER    ZA02523
         LH    RWRKY,DVCTRKLN           GET TRK LG FROM TABLE   ZA02523
         ST    RWRKY,DWATRKLN           SAVE TRK LG IN WKAREA   ZA02523
         TM    DCBRECFM,DCBRECTO        OVERFLOW RECORDS PRESENT
         BNZ   OVERFLOW                 YES, BRANCH THERE       ZA02523
*
*
*     APPEND THE RELATIVE EXTENTS TO THE DEB FOR RELATIVE TRACK
*     ADDRESSING WITHOUT TRACK OVERFLOW.
*
*
RECTRK   EQU   *                        CALC PERIODS-NO OVFLO   ZA02523
         SR    RWRKY,RWRKY              CLEAR FOR RECORDS/TRACK ZA02523
         SR    RNRCD,RNRCD              CLEAR FOR RECORDS/EXT   ZA02523
         L     RWRKX,DWATRKLN           GET TRACK LENGTH        ZA02523
COMPLNG  C     RWRKX,DWARLREC           COMPARE TO LAST REC REQ ZA02523
         BL    RECEXT                   BRANCH IF TRACK IS FULL ZA02523
         S     RWRKX,DWARNREC           DECRMENT BY MID-REC LEN ZA02523
         LA    RWRKY,1(RWRKY)           ADD ONE TO RECS/TRK     ZA02523
         B     COMPLNG                  LOOP
RECEXT   EQU   *
         LR    RWRK0,RWRKY              SAVE RECS/TRK IN WKREG0 ZA02523
         MH    RWRKY,DEBNMTRK           RECS/TRK * TRKS/EXTENT  ZA02523
         STCM  RWRKY,ADDR,DEBDBPE       STORE RECORDS/EXTENT    ZA02523
         STC   RWRK0,DEBDBPT            STORE RECORDS PER TRACK ZA02523
         AR    RDSSSZ,RWRKY             ADD TO DATA SET SIZE    ZA02523
         LA    RDEBAM,L'DEBDBLK(RDEBAM) INCREMENT BOTH
         LA    RDEBEXT,DEBDASDL(RDEBEXT) EXTENT POINTERS
         BCT   RXTNCUR,RECTRK           TEST FOR LAST EXTENT IN DEB
         B     STDCBREL                 GO STORE TOTAL BLKS     ZA02523
*
*
*
*        FOR OVERFLOW RECORDS THREE ADDITIONAL VALUES MUST BE
*        CALCULATED BEFORE BUILDING THE RELATIVE EXTENTS:
*             A) OVERHEAD FOR A FULL TRACK SEGMENT OTHER THAN THE
*                THE FIRST SEGMENT OF THE BLOCK - WILL ALWAYS
*                BE LAST RECORD ON TRACK AND WILL HAVE NO KEYS
*                (DWARCOVH)
*             B) OVERHEAD FOR 1ST SEGMENT OF A RECORD -
*                ALWAYS LAST RECORD ON THE TRACK AND WILL
*                HAVE A KEY, IF SPECIFIED (DWARCTKY)
*             C) OVERHEAD FOR LAST SEGMENT OF A BLOCK THAT IS
*                NOT THE LAST RECORD ON THE TRACK - NO KEY,
*                BUT REQUIRES CALCULATION FOR TOLERANCE (DWAOFLOW)
*
*
*
*    CALCULATE OVERHEAD FOR FULL TRACK SEGMENT OTHER THAN THE
*    FIRST SEGMENT (LAST RECORD ON TRACK - NO KEY OVERHEAD)
*
OVERFLOW EQU   *                        CALCULATE OVERFLOW DEB  ZA02523
         SR    RWRKX,RWRKX              CLEAR WORK REG          ZA02523
         SR    RWRKY,RWRKY              CLEAR WORK REG          ZA02523
         IC    RWRKX,DVCOVLB            GET OVERHD,LAST BLK     ZA02523
         TM    DVCFLAGS,DVC2BOV         2 BYTE OVERHEAD-2305    ZA02523
         BNO   NOT2BYTC                 NO, BRANCH AROUND       ZA02523
         LH    RWRKX,DVCOVHD            GET 2 BYTE OVERHEAD     ZA02523
NOT2BYTC EQU   *                        CALCULATE OVERHEAD      ZA02523
         IC    RWRKY,DVCOVNK            GET OVERHEAD FOR KEYS   ZA02523
         SR    RWRKX,RWRKY              SUBT KEY OVERHD FROM    ZA02523
*                                       TOTAL LAST-REC OVERHD   ZA02523
         ST    RWRKX,DWARCOVH           OVERHD IF FULL TRACK    ZA02523
*                                       SEG OTHER THAN 1ST      ZA02523
*
*    CALCULATE OVERHEAD FOR FIRST SEGMENT OF BLOCK - KEEP
*    KEY OVERHEAD IF KEYS. IT IS ALWAYS LAST RECORD ON TRACK
*
         CLI   DCBKEYLE,0               ARE THERE KEYS          ZA02523
         BE    NOKEYS                   NO,SAME OVERHEAD AS     ZA02523
*                                       FULL TRACK SEGMENT      ZA02523
         AR    RWRKX,RWRKY              ADD BACK KEY OVERHEAD   ZA02523
NOKEYS   EQU   *                        SAVE 1ST SEG OVERHEAD   ZA02523
         ST    RWRKX,DWARCTKY           OVERHEAD FOR 1ST SEG    ZA02523
*                                       OF OVERFLOW RECORD      ZA02523
*
*    CALCULATE OVERHEAD FOR LAST SEGMENT OF A BLOCK IF IT
*    IS NOT THE LAST RECORD ON THE TRACK. THERE IS NO KEY,
*    BUT DOES NEED TOLERANCE CALCULATED.
*
         SR    RWRKX,RWRKX              CLEAR WORK REG          ZA02523
         SR    RWRKY,RWRKY              CLEAR WORK REG          ZA02523
         IC    RWRKX,DVCOVNLB           OVERHEAD FOR NOT-LAST   ZA02523
         TM    DVCFLAGS,DVC2BOV         2 BYTE OVERHEAD-2305    ZA02523
         BNO   NOT2BYTD                 NO, BRANCH AROUND       ZA02523
         LH    RWRKX,DVCOVHD            GET 2 BYTE OVERHEAD     ZA02523
NOT2BYTD EQU   *                        CALCULATE OVERHEAD      ZA02523
         IC    RWRKY,DVCOVNK            GET KEY OVERHEAD        ZA02523
         SR    RWRKX,RWRKY              SUBT KEY OVERHD FROM    ZA02523
*                                       OVHEAD OF NOT-LAST REC  ZA02523
         ST    RWRKX,DWAOFLOW           OVERHEAD FOR LAST SEG   ZA02523
*                                       OF BLK IF NOT LAST REC  ZA02523
*
*
*      THE FOLLOWING CALCULATES THE RELATIVE EXTENTS FOR OVERFLOW
*
         MVI   DWATTRKS,DWAFAIL1        INITIAL COMPARE FAILURE ZA02523
*
NEXTEXT  EQU   *                        CALCULATE THIS EXTENT   ZA02523
         SR    RNRCD,RNRCD              CLEAR RECS/PERIOD REG   ZA02523
         SR    RNTRK,RNTRK              CLEAR TRKS/PERIOD REG   ZA02523
         L     RWRKX,DWARLREC           GET LAST REC LG+OVERHD  ZA02523
         CLC   DWARLREC,DWATRKLN        DOES REC FIT ON 1 TRK   ZA02523
         BH    BIGRECRD                 NO, BR TO BIGREC RTN    ZA02523
*
*
*      THE FOLLOWING CALCULATES PERIOD SIZE WHEN BLKSIZE+KEYLENGTH+
*      OVERHEAD IS LESS THAN A FULL TRACK
*
*
         L     RODD,DWATRKLN            GET TRACK LENGTH        ZA02523
*
*     ON ENTRY TO THIS ROUTINE RODD CONTAINS THE NUMBER OF
*     BYTES ON THE TRACK STILL TO BE DIVIDED INTO RECORDS
*
LOOP     EQU   *                        CALCULATE PERIOD        ZA02523
         SR    REVEN,REVEN              CLEAR REG FOR DIVISION  ZA02523
         D     REVEN,DWARNREC           DIVIDE TO GET NO. RECS/ ZA02523
*                                       TRK(RODD) AND NO.BYTES  ZA02523
*                                       REMAINING ON TRK FOR    ZA02523
*                                       1ST SEGMENT OF NEXT REC ZA02523
         LA    RNTRK,1(RNTRK)           ADD 1 TO TRK COUNT      ZA02523
         AR    RNRCD,RODD               ADD QUOT TO REC TOTAL   ZA02523
         S     REVEN,DWARCTKY           SUBT OVERHD REQUIRED    ZA02523
*                                       FOR 1ST SEG OF OVFLO    ZA02523
         BNP   FINI                     IF NO ROOM FOR OVERHD   ZA02523
*                                       +1 BYTE,END OF PERIOD   ZA02523
         A     REVEN,DWARCTKY           ADJUST BACK PREVIOUS    ZA02523
*                                       1ST-REC OVERHD.         ZA02523
         TM    DWAFLAGS,DWAPASS2        TEST FOR 2ND PASS       ZA02523
         BZ    FSTPASS1                 IF NOT, PROCEED         ZA02523
         C     RNTRK,DWATTRKS           COMPARE TRKS TO TOTAL   ZA02523
         BE    FINI2                    YES, END OF EXT&PERIOD  ZA02523
*
*      CALCULATE SIZE OF FIRST(OVERFLOW) SEGMENT OF NEW RECORD
*
FSTPASS1 EQU   *                        NOT END OF EXTENT       ZA02523
         LA    RNRCD,1(RNRCD)           ADD 1 TO RECORD COUNT   ZA02523
*                                       FOR CURRENT RECORD      ZA02523
         L     RWRKY,DWARLREC           SUBT LAST RECORD SIZE   ZA02523
         SR    RWRKY,REVEN              FROM NUMBER OF BYTES    ZA02523
*                                       LEFT ON TRACK. RESULT   ZA02523
*                                       IS NO. DATA BYTES TO BE ZA02523
*                                       WRITTEN ON NEXT TRACK   ZA02523
         BNP   FINI                     IF WHOLE LAST REC FITS  ZA02523
*                                       ON CURRENT TRK,HOWEVER  ZA02523
*                                       END OF PERIOD           ZA02523
*
*      RWRKY CONTAINS NUMBER OVERFLOW DATA BYTES TO BE WRITTEN
*      ON NEXT TRACK.
*
         MH    RWRKY,DWADVTOL           ADD TOLERANCE TO TOTAL  ZA02523
         SRL   RWRKY,9                  DIVIDE BY 512           ZA02523
         A     RWRKY,DWAOFLOW           ADD OVERHD FOR LAST SEG ZA02523
*                                       OF BLK THAT IS NOT LAST ZA02523
*                                       RECORD ON THE TRACK     ZA02523
         L     RODD,DWATRKLN            GET TRK LENGTH          ZA02523
         SR    RODD,RWRKY               SUBT # BYTES ALREADY    ZA02523
*                                       USED FOR OVERFLOW SEG   ZA02523
         S     RODD,DWARCTKY            SUBT OVERHEAD REQUIRED  ZA02523
*                                       FOR ANOTHER RECORD ON   ZA02523
*                                       THIS TRACK              ZA02523
         BNP   LASTTRK2                 IF NOT ENOUGH BYTES,    ZA02523
*                                       END OF PERIOD           ZA02523
         A     RODD,DWARCTKY            ELSE, ADD BACK ON THE   ZA02523
*                                       OVERHEAD BYTES          ZA02523
         B     LOOP                     RETURN TO CALCULATE     ZA02523
*                                       REMAINING RECORDS ON    ZA02523
*                                       THIS TRACK              ZA02523
*
LASTTRK2 EQU   *                        END OF PERIOD           ZA02523
         LA    RNTRK,1(RNTRK)           INCLUDE CURRENT TRK     ZA02523
         B     FINI                     GO STORE PERIOD VALUES  ZA02523
*
*
*     THE FOLLOWING CALCULATES PERIODS WHEN DL + KL  + OVERHEAD
*     IS GREATER THAN TRACK CAPACITY.
*
*
BIGRECRD EQU   *                        CALCULATE LARGE RECS    ZA02523
         LA    RNTRK,1(RNTRK)           ADD 1 TO TRACK COUNT    ZA02523
         L     RWRKY,DWARLREC           GET REC LEN IF LAST REC ZA02523
*                                       ON TRACK                ZA02523
         S     RWRKY,DWATRKLN           SUBTR LENGTH OF TRK     ZA02523
*                                       FROM LENGTH OF 1 RECORD ZA02523
*
*      RWRKY CONTAINS NUMBER OF DATA BYTES THAT DID NOT FIT
*      ON THAT TRACK
*
LOOP2    EQU   *                        CALCULATE BYTE NEXT TRK ZA02523
         TM    DWAFLAGS,DWAPASS2        TEST FOR 2ND PASS       ZA02523
*                                       NOTE: 2ND PASS CALCULATES
*                                       RECORDS/EXTENT. 1ST PASS
*                                       CALCULATES RECORDS/PERIOD
         BZ    FSTPASS2                 IF NOT, GO ON           ZA02523
         C     RNTRK,DWATTRKS           COMPARE TRKS TO TOTAL   ZA02523
         BE    FINI2                    IF EQUAL,END OF EXTENT  ZA02523
*
FSTPASS2 EQU   *                        CONTINUE CALCULATIONS   ZA02523
         LA    RNTRK,1(RNTRK)           ADD 1 TO TRACK COUNT    ZA02523
         A     RWRKY,DWARCOVH           ADD OVERHD FOR LAST     ZA02523
*                                       RECORD ON TRACK         ZA02523
         S     RWRKY,DWATRKLN           SUBTR TRACK LENGTH      ZA02523
         BP    LOOP2                    IF POS. LOOP TO FIGURE  ZA02523
*                                       SEGMENT ON NEXT TRACK   ZA02523
*
*                        REC ENDS ON THIS TRACK                 ZA02523
         LA    RNRCD,1(RNRCD)           ADD 1 TO REC COUNT      ZA02523
*                                       AND BEGIN CALCULATING NEXT REC
         LTR   RWRKY,RWRKY              STILL MORE BYTES TO WRT ZA02523
         BZ    FINI                     NO, END OF PERIOD       ZA02523
         A     RWRKY,DWATRKLN           ADD BACK TRK LENGTH     ZA02523
*                                       SO DATA BYTES NOT NEG   ZA02523
         S     RWRKY,DWARCOVH           REMOVE OVERHD SO TOLER  ZA02523
*                                       CAN BE CALCULATED
*
*   ADD ON OVERHEAD FOR RECORD AS IF IT WERE NOT LAST ON TRACK - WILL
*   THE FIRST SEGMENT OF THE NEXT RECORD FIT, I.E. ARE THERE ENOUGH
*   BYTES LEFT ON THE TRACK AFTER THIS RECORD(+ TOLERANCE AND OVER-
*   HEAD) TO HOLD THE OVERHEAD FOR THE LAST RECORD ON TRACK + KEY
*   OVERHEAD IF ANY + 1 DATA BYTE MINUMUM?
*
         MH    RWRKY,DWADVTOL           CALCULATE TOLERANCE     ZA02523
         SRL   RWRKY,9                  FOR RECORD THATS NOT    ZA02523
         A     RWRKY,DWAOFLOW           LAST - ADD BACK OVERHD  ZA02523
         L     RWRKX,DWATRKLN           GET TRACK LENGTH        ZA02523
         SR    RWRKX,RWRKY              SUBT TO GET # BYTES     ZA02523
*                                       LEFT ON TRACK           ZA02523
         S     RWRKX,DWARCTKY           SUBT MINIMUM OVERHD     ZA02523
*                                       (LAST REC ON TRK) REQUIRED
*                                       FOR NEXT SEGMENT (IF NOT
*                                       ENOUGH ROOM FOR LAST REC
*                                       OVERHEAD FOR NEXT REC, THIS
*                                       IS STILL END OF PERIOD
         BNP   FINI                     IF NONE, END OF PERIOD  ZA02523
         A     RWRKX,DWARCTKY           IF ROOM, CONTINUE WITH  ZA02523
*                                       ORIGINAL NUMBER OF      ZA02523
*                                       UNUSED BYTES ON TRACK   ZA02523
         L     RWRKY,DWARLREC           PUT FULL SIZE OF LAST   ZA02523
*                                       REC ON TRACK IN REG     ZA02523
         SR    RWRKY,RWRKX              SUBT SIZE OF TRK LEFT   ZA02523
*                                       RESULT IS NUMBER OF DATA BYTES
*                                       THAT MUST BE WRITTEN ON NEXT
*                                       TRACK(S)
         B     LOOP2                    AND RETURN              ZA02523
*
*
*      STORE CALCULATED VALUES FOR TRKS/PERIOD AND TRKS/EXTENT
*      IN THE DEB RELATIVE EXTENT
*
FINI     EQU   *
         ST    RNRCD,DEBDBPP            SAVE RECORD COUNT
         ST    RNTRK,DEBDTPP            SAVE TRACK COUNT
         LA    RDEBAMX,DEBDBPEF         INCREMENT EXTENT ADDR BY SIZE
         USING DEBDBPEF,RDEBAMX         ESTABLISH DEB DAM SECTION
*                                       EXTENTS BASE REG
EACHEXT  EQU   *
         SR    REVEN,REVEN              CLEAR THE EVEN REGISTER  Y02072
         SR    RNRCD,RNRCD              CLEAR OUT RECORD COUNT
         LH    RODD,DEBNMTRK            DIVIDE NUMBER OF TRACKS  Y02072
         D     REVEN,DEBDTPP            BY THE PERIOD VALUE      Y02072
         LTR   REVEN,REVEN              TEST REVEN- IF  ZERO AN  Y02072
         BZ    FINI2                    EVEN AMOUNT OF PERIODS FIT
         ST    REVEN,DWATTRKS           STORE TRACKS IN WORKAREA Y02072
         OI    DWAFLAGS,DWAPASS2        INDICATE SECOND PASS
         B     NEXTEXT                  GO FOR SECOND PASS
FINI2    EQU   *
         NI    DWAFLAGS,X'FF'-DWAPASS2  TURN OFF SECOND PASS SWITCH
         SR    REVEN,REVEN              DIVIDE NUMBER OF TRACKS  Y02072
         LH    RODD,DEBNMTRK            BY THE PERIOD VALUE      Y02072
         D     REVEN,DEBDTPP            DIVIDE BY TRACKS/PERIOD  Y02072
         M     REVEN,DEBDBPP            MULTIPLY NO. PERIODS BY  Y02072
         AR    RODD,RNRCD               RECORDS/PERIOD AND ADD   Y02072
*                                       EXTRA RECORDS
         AR    RDSSSZ,RODD              ADD EXTENT SZ TO DS SZ   Y02072
         ST    RODD,DEBDBPEF            ST RECS/EXTENT IN EXTENT Y02072
         LA    RDEBAMX,L'DEBDBPEF(RDEBAMX)  UPDATE TO NEXT EXTENT
         LA    RDEBEXT,DEBDASDL(RDEBEXT) INCR DEB ADDR BY EXTENT SIZE
         BCT   RXTNCUR,EACHEXT          LOOP FOR EACH EXTENT
         DROP  RDEBAM,RDEBEXT,RDEBAMX   DROP DEB DAM/EXT SECTION REGS
         SPACE 2
****
****     STORE TOTAL BLOCKS IN THE DATA SET, INTO THE DCB
****
STDCBREL EQU   *
         IC    RWRKX,DCBRELB            STORE TOTAL SIZE OF THE
         ST    RDSSSZ,DCBRELB           DATA SET IN THE DCB SAVING
         STC   RWRKX,DCBRELB            THE KEY LENGTH
         EJECT
***********************************************************************
*  FUNCTION V:  THE FOLLOWING FUNCTION GETS BUFFERS FOR ALL RECORD    *
*  FORMATS OTHER THAN VARIABLE SPANNED IF DYNAMIC BUFFERING WAS       *
*  SPECIFIED IN THE OPTCD FIELD (=S). BUFFERS ARE OBTAINED AND        *
*  INITIALIZED IN USER KEY.                                           *
*  INPUT TO THIS FUNCTION IS AS FOLLOWS:                              *
*              REGISTER 4 = OPEN WORKAREA ADDRESS                     *
*              REGISTER 9 = DEB AVT ADDRESS                           *
*              REGISTER 10= DCB ADDRESS                               *
*              ENTRY IN DATA MANAGEMENT KEY                           *
*  OUTPUT FROM THIS FUNCTION IS AS FOLLOWS:                           *
*              SAME AS INPUT                                          *
*              BUFFER CONTROL BLOCK AND BUFFERS OBTAINED AND          *
*                   INITIALIZED                                       *
*              EXIT IS IN EITHER DATA MANAGEMENT KEY OR USER KEY,     *
*                   DEPENDING ON THE PATH TAKEN                       *
***********************************************************************
         SPACE
FUNCT5   EQU   *                        BEGINNING OF FUNCTION 5  Y02072
         TM    DCBOPTCD,DCBOPTDB        WAS DYNAMIC BUFFERING REQUESTED
         BZ    FUNCT7                   NO RESTORE REG AND RET   Y02072
         SPACE 2
****
****     DETERMINE CORE REQUIRED FOR BUFFERS AND BUFFER CONTROL
****     BLOCK AND INITIALIZE BUFFERS FOR DYNAMIC BUFFERING OPTION
****
         SR    RBUFNO,RBUFNO            CLEAR NUMBER OF BUFFERS REG
         IC    RBUFNO,DCBBUFNO          CALCULATE THE NUMBER OF
         LTR   RBUFNO,RBUFNO            BUFFERS NEEDED,
         BP    NOBUFNO                  IF THE USER OMITTED THIS
         LA    RBUFNO,BFRDFALT          PARAMETER ASSUME TWO BUFFERS.
         SPACE
NOBUFNO  EQU   *
         LR    RODD,RBUFNO              PUT BUF NUM IN ODD REG   Y02072
         LH    RBUFLN,DCBBUFL           LOAD SPECIFIED LENGTH
         LTR   RBUFLN,RBUFLN            TEST FOR ZERO BUFFER LENGTH
         BNZ   BUFOK                    IF NOT 0, CONTINUE       Y02072
         LA    R0,PD51                  GET INTERNAL RET CODE    Y02072
*                                       INDICATING BUFL=0 WHEN   Y02072
*                                       DYN BUFFERING SPECIFIED  Y02072
         B     ERREXIT                  GO TO PROB DETERMINATION Y02072
*
BUFOK    EQU   *                        BUFFER LENGTH SPECIFIED  Y02072
         TM    DCBBUFL+1,NOTDOUBL       AND CHECK THAT IT IS A
         BZ    OKALN                    DOUBLE WORD MULTIPLE.
         SRL   RBUFLN,3                 IF NOT
         SLL   RBUFLN,3                 CLEAR THE 1-7 VALUE
         LA    RBUFLN,DOUBLEWD(RBUFLN)  AND ADD EIGHT.
OKALN    MR    REVEN,RBUFLN             MULTIPLY LENGTH X NO. OF BFRS
         L     RTCB,DEBTCBAD            GET TCB ADDRESS
         USING TCB,RTCB                 ESTABLISH TCB BASE REG
         TM    TCBFLGS6,TCBRV           TEST IF ADDRSPCE IS REAL
         BO    NOBCBSFX                 BRANCH IF SO, NO BCB SUFFIX
         SPACE 2
****
****     CORE NEEDED= UNSCHEDULED LIST LENGTH + BUFFER CONTROL BLOCK
****     LENGTH + BUFFER SUFFIX OF 1 BYTE PER BUFFER + 7 FOR ROUNDING
****
         LA    RPOOLSZ,USLSZFST+BCBLNTHV+RNDFCTOR(RBUFNO,RODD)
         TM    DCBBFALN,DCBBFAF1        IF BUFFER ALIGNMENT IS FULL-WD
         BZ    ROUND1                   (NOT DOUBLE WD),
         LA    RPOOLSZ,FWDBNDRY(RPOOLSZ) THEN ADD 4 BYTES
ROUND1   SRL   RPOOLSZ,3                ROUNDED TO A MULTIPLE OF 8
         SLL   RPOOLSZ,3                RESET
         LR    R1,RPOOLSZ               PUT LENGTH IN PARM REG   Y02072
****
****         GETMAIN ROUTINE MODESETS TO USER KEY BEFORE RETURNING
****
         BAL   RETURN,ENTUSER           GO TO GET CORE FOR BCB   Y02072
*                                       RETURN IS IN USER KEY    Y02072
         B     GOTCORE                  BRANCH AROUND NEXT INSTR Y02072
*
NOBCBSFX EQU   *                        ADDRESS SPACE IS REAL
         LA    RPOOLSZ,BCBLENTH+FOURBYTS(RODD)  ADD LENGTH OF BCB AND
*                                       BUFFERS -DBLWD BDY; THEN ADD
*                                       4 MORE IN CASE WANT FULLWD
         LR    R1,RPOOLSZ               PUT LENGTH IN PARM REG   Y02072
****
****         GETMAIN ROUTINE MODESETS TO USER KEY BEFORE RETURNING
****
         BAL   RETURN,ENTUSER           GO TO GET CORE FOR BCB   Y02072
*                                       RETURN IS IN USER KEY    Y02072
*
GOTCORE  EQU   *                        RETURN FROM GETMAIN      Y02072
         LR    RBCB,R1                  PUT GOTTEN CORE IN BASE  Y02072
         TM    TCBFLGS6,TCBRV           IS ADDRESS SPACE = REAL
         BO    SAVSIZ                   BRANCH IF YES
         DROP  RTCB                     DROP TCB BASE REG
         SPACE 2
****
****     INITIALIZE THE UNSCHEDULED LIST (ADDRESS SPACE = VIRTUAL)
****
         USING USL,RBCB                 ESTABLISH USL BASE REG
         XC    USL(USLSZFST),USL        CLEAR THE LIST
         MVI   USLSIZE+1,USLSZFST       INITIALIZE SIZE FIELD
         OI    USLFLAGS,USLCURNT        TURN ON 'CURRENT' BIT
         LA    RWRKX,USL+USLSZFST-L'USLSLOT1  ADDRESS LAST USL SLOT
         USING USLSLOT,RWRKX            EST USL IOB ADDR SECT BASE REG
         OI    USLSLTFL,USLENDL         TURN ON END-OF-LIST INDICATOR
         DROP  RWRKX                    DROP USL IOB ADDR SECT BASE REG
*
         MODESET  EXTKEY=DATAMGT        CHANGE TO DATAMGT KEY    Y02072
*
         ST    RBCB,DCBDYNB             STORE POINTER TO USL
         OI    DXATEXC1,FCAOUSL         SET AUDIT TRAIL BIT      Y02072
*                                       FOR FORCE CLOSE CLEANUP  Y02072
*                                       INDICATING USL GOTTEN    Y02072
*
         MODESET  KEYADDR=DXUKEY,WORKREG=14 CHANGE TO USER KEY   Y02072
*
         SPACE 2
****
****     INITIALIZE BUFFER CONTROL BLOCK (ADDRESS SPACE = VIRTUAL)
****
         LA    RBCB,USLSZFST(RBCB)      POINT TO BUFFER CONTROL BLOCK
         DROP  RBCB                     DROP USL BASE REG
         USING BCBDEFV,RBCB             EST BFR CONTROL BLK BASE REG
         ST    RPOOLSZ,BCBTBRS1         TOTAL SIZE GETMAIN AREA
         ST    RBUFLN,BCBBUFL           LENGTH OF EACH BUFFER
         SPACE 2
****
****     CALCULATE ADDR OF 1ST BUFFER
****
         LA    RWRKY,BCBSUFFX(RBUFNO)   ADDR END OF BUFFER SUFFIX
         SR    RWRKX,RWRKX              CLEAR REGISTER
         TM    DCBBFALN,DCBBFAF1        IF FULL WORD ALIGNMENT FOR
         BZ    ROUND2                   BUFFERS, ADD 4 BEFORE ROUND
         LA    RWRKX,FWDBNDRY           SET UP FOR FW ALIGNMENT
ROUND2   LA    RWRKY,RNDFCTOR(RWRKX,RWRKY)  BUMP ADDRESS TO NEXT
         SRL   RWRKY,3                  DOUBLE WORD BOUNDARY
         SLL   RWRKY,3                  RESET
         SR    RWRKY,RWRKX              IF FULL WORD ALIGNMENT,
*                                       SUBTRACT 4.
         ST    RWRKY,BCBBUF1            ADDRESS OF FIRST BUFFER
         SPACE 2
****
****     INITIALIZE AVAILABLE BUFFER CHAIN.
****
         MVI   BCBBFAVL,BFRNUM1         SET FIRST AVAILABLE BFR = NO. 1
         LA    RPOOLSZ,1(RBUFNO)        NO. OF BUFFERS+1=COMPARAND(R13)
         LA    RBUFNO,BFRNUM1           SET INCR OF 1- BXLE LOOP CONTRL
         LA    RWRKX,BFRNUM2            INITIALIZE NEXT BFR IN CHAIN TO
*                                       BFR NUMBER 2
STORENXT STC   RWRKX,BCBTBRS1+2(RWRKX)  CHAIN TO NEXT AVAILABLE BFR
         BXLE  RWRKX,RBUFNO,STORENXT    LOOP ONCE FOR EACH BUFFER
         LA    RBUFNO,BCBTBRS1+1(RWRKX) POINT TO LAST BFR IN CHAIN
         MVI   0(RBUFNO),0              IND NO MORE BUFFERS IN CHAIN
*
         MODESET  EXTKEY=DATAMGT        CHANGE TO DATAMGT KEY    Y02072
*
         STCM  RBCB,ADDR,DCBBUFCA       STORE PTR TO BCB
         OI    DXATEXC1,FCAOBUF         SET AUDIT TRAIL BIT      Y02072
*                                       FOR FORCE CLOSE CLEANUP  Y02072
*                                       INDICATING BCB GOTTEN    Y02072
         B     FUNCT7                   GO RESTORE REGS AND RET  Y02072
         DROP  RBCB                     DROP BFR CONTROL BLK BASE REG
         SPACE 2
****
****     DIVIDE AREA INTO A BUFFER CONTROL BLOCK (BCB) AND THE
****     SPECIFIED NO. OF BUFFERS. LINK ALL TO NEXT AVAILABLE FIELD
****     IN THE BUFFER CONTROL BLOCK. (ADDRESS SPACE = REAL)
****     ENTRY INTO THIS ROUTINE IS IN USER KEY.
****
SAVSIZ   EQU   *
*
         MODESET  EXTKEY=DATAMGT        CHANGE TO DATAMGT KEY    Y02072
*
         USING BCBDEFR,RBCB             EST BFR CONTROL BLK BASE REG
         IC    RWRKX,DCBBUFNO           STORE THE RETURNED CORE  Y02072
         ST    RBCB,DCBBUFCB            ADDR AS BCB ADDR
         STC   RWRKX,DCBBUFNO           REPLACE TOP BYTE         Y02072
         OI    DXATEXC1,FCAOBUF         SET AUDIT TRAIL BIT      Y02072
*                                       FOR FORCE CLOSE CLEANUP  Y02072
*                                       INDICATING BCB GOTTEN    Y02072
*
         MODESET  KEYADDR=DXUKEY,WORKREG=14 CHANGE TO USER KEY   Y02072
*
         LR    RWRKX,RPOOLSZ            SAVE SIZE OF AREA
         ST    RPOOLSZ,BCBTBRS          STORE SIZE IN THE BCB
         XC    BCBIOBS,BCBIOBS          CLEAR IOB POINTERS
         LA    RWRKY,BCBLENTH(RBCB)     DEVELOP THE ADDRESS OF BUFFER
         TM    DCBBFALN,DCBBFAF1        (ALIGN TO A WORD BOUNDARY THATS
         BZ    NOTFULWD                 NOT A DOUBLE WORD BOUNDARY IF
         LA    RWRKY,FWDBNDRY(,RWRKY)   SO SPECIFIED)
         SPACE
NOTFULWD EQU   *
         ST    RWRKY,BCBNABFR           AND STORE AS NEXT AVAILABLE BFR
         DROP  RBCB                     DROP BCB BASE REG
         SH    RWRKX,CONH20             SUBTRACT FROM SIZE- BCB, SM4366
         SR    RWRKX,RBUFLN             FIRST BUFFER,ALIGNMENT FACTOR
         LR    RBCB,RWRKY               POINT OT NEXT BUFFER LOCATION
BFRLOOP  AR    RBCB,RBUFLN              (BUFFER 1 + BUFFER LENGTH)
         SR    RWRKX,RBUFLN             REDUCE TOTAL SIZE BY BUFL
         BM    FNDLAST                  IF MINUS ALL BUFFERS ARE LINKED
         ST    RBCB,0(,RWRKY)           LINK BFR. 2 TO BFR. 1 ETC.
         LR    RWRKY,RBCB               INCREMENT THE TWO BFR. POINTERS
         B     BFRLOOP                  AND LOOP
FNDLAST  SR    RBCB,RBCB                ZERO THE
         ST    RBCB,0(,RWRKY)           END BUFFER LINK ADDRESS
         B     FUNCT7                   RETURN TO COMMON OPEN    Y02072
         EJECT
***********************************************************************
*  FUNCTION VI:  THE FOLLOWING FUNCTION PROCESSES VARIABLE SPANNED    *
*  RECORDS ONLY. IT OBTAINS AND INITIALIZES THE SEGMENT WORKAREAS AND *
*  GETS A BUFFER AREA IF DYNAMIC BUFFERING IS SPECIFIED. BUFFERS      *
*  ARE OBTAINED AND INITIALIZED IN USER KEY.                          *
*  INPUT TO THIS FUNCTION IS AS FOLLOWS:                              *
*              REGISTER 4 = OPEN WORKAREA ADDRESS                     *
*              REGISTER 9 = DEB AVT ADDRESS                           *
*              REGISTER 10= DCB ADDRESS                               *
*              ENTRY IN DATA MANAGEMENT KEY                           *
*  OUTPUT FROM THIS FUNCTION IS AS FOLLOWS:                           *
*              SAME AS INPUT                                          *
*              BUFFER CONTROL BLOCK OR SWA CONTROL BLOCK, BUFFERS     *
*                       AND SEGMENT WORKAREAS ARE OBTAINED AND        *
*                       INITIALIZED.                                  *
***********************************************************************
         SPACE
FUNCT6   EQU   *                        BEGINNING OF FUNCTION 6
         LR    RDEBEXT,RDEBA            GET DEB ADDR FOR DASD SECTION
         USING DEBDASD-(DEBBASND-DEBAVT),RDEBEXT  ESTABLISH DEB DASD
*                                       SECTION BASE REG
         SPACE 2
****
****     CONSTRUCT BUFFERS FOR VRE OPTION
****
         SR    RBUFNO,RBUFNO            DEVELOP IN REGISTER RBUFNO
         IC    RBUFNO,DCBBUFNO          THE NUMBER OF BUFFERS
         LTR   RBUFNO,RBUFNO            NEEDED, IF USER OMITTED
         BP    FINDLNTH                 THIS PARAMETER ASSUME 2
         LA    RBUFNO,BFRDFALT          BUFFERS
FINDLNTH L     RWRKX,DEBUCBAD           LOAD UCB ADDRESS
         DROP  RDEBEXT                                           Y02072
         USING UCB,RWRKX                ESTABLISH UCB BASE REG
         L     RDVCT,CVTPTR             LOAD CVT ADDRESS
         USING CVT,RDVCT                ESTABLISH CVT BASE REG   A44855
         L     RDVCT,CVTZDTAB           LOAD DEVICE TABLE ADDR   A44855
         DROP  RDVCT                    DROP CVT BASE REG        A44855
         USING DVCTI,RDVCT              ESTABLISH DEVICE CHAR TABLE
*                                       INDEX BASE REG
         LA    RWRKY,DVCTYPMK           MASK FOR UNIT TYPE NUMBER
         N     RWRKY,UCBTYP             PICK UP UNIT TYPE NUMBER
         IC    RWRKY,DVCTIOFF(RWRKY)    FIND ENTRY OFFSET
         LA    RDVCT,0(RWRKY,RDVCT)     POINT TO ENTRY TRACK LNGTH
         DROP  RWRKX,RDVCT              DROP UCB AND DEV CHAR TABLE
*                                       INDEX BASE REGISTERS
         USING DVCT,RDVCT               EST DEVICE CHAR TABLE BASE REG
         TM    DCBOPTCD,DCBOPTDB        DYNAMIC BUFFERING REQUIRED
         BZ    GETSWA                   NO, BRANCH
         SPACE 2
****
****     CONSTRUCT BUFFERS FOR DYNAMIC BUFFERING OPTION WITH VRE
****
****           FIRST DETERMINE SIZE OF SEGMENT WORK AREA
****
         SR    RAOFFS,RAOFFS            CLEAR WORK REGISTER
         IC    RAOFFS,DCBKEYLE          LOAD KEY LENGTH
         AH    RAOFFS,DCBBLKSI          ADD BLKSIZE
         CH    RAOFFS,DVCTRKLN          COMPARE MAXIMUM LOGICAL RECORD
*                                       LENGTH + KEY LENGTH AND TRACK
*                                       SIZE
         BNH   ADD                      RECORD LENGTH IS LOW
         LH    RAOFFS,DVCTRKLN          USE TRACK LENGTH
         DROP  RDVCT                    DROP DEVICE CHAR TABLE BASE REG
****
****           ADD IN LENGTHS OF SWA HEADER AND RECORD AREA PREFIX,
****           THEN PAD TO WORD BOUNDARY
****
ADD      LA    RAOFFS,SWACSLNG+L'BUFBFPTR+MULTOF4(RAOFFS)        Y02072
         N     RAOFFS,RNDFULL           ROUND TO WORD BOUNDARY   Y02072
****
****           RAOFFS NOW CONTAINS RECORD AREA OFFSET FROM SWA HEADER.
****           FULLWORD OR DOUBLE WORD ALIGNMENT FOR RECORD AREA WILL
****           BE CONTROLLED BY PADDING THE BCB IF NECESSARY.
****
****           CALCULATE THE LENGTH OF THE RECORD AREA, THEN OF THE
****           ENTIRE BUFFER, PADDING TO A DOUBLE WORD BOUNDARY
****
         SR    RBUFLN,RBUFLN            CLEAR BUFFER LENGTH REG
         IC    RBUFLN,DCBKEYLE          RECORD AREA=KEY LENGTH   A44855
         AH    RBUFLN,DCBBLKSI          PLUS BLOCKSIZE           A44855
         LA    RBUFLN,RNDFCTOR(RAOFFS,RBUFLN)  ROUND ENTIRE BUFFER
         N     RBUFLN,RNDDBL            LENGTH TO A MULTIPLE OF 8
****
****           CALCULATE LENGTH OF BUFFER CONTROL BLOCK
****
         LA    RLEN,BCBLENTH            ASSUME NO BUFFER SUFFIX  Y02072
         L     RWRKY,DEBTCBAD           GET TCB ADDRESS          YM1421
         USING TCB,RWRKY                ESTABLISH TCB BASE REG   YM1421
         TM    TCBFLGS6,TCBRV           IS ADDRESS SPACE REAL
         BO    BCBPAD                   BRANCH IF YES
         AR    RLEN,RBUFNO              ADD ONE BYTE PER BUFFER  Y02072
****
****           PAD BCB AS NECESSARY FOR PROPER RECORD AREA ALIGNMENT
****
BCBPAD   EQU   *                        PAD BCB FOR ALIGNMENT
         AR    RLEN,RAOFFS              ADD OFFSET TO RECORD AREA
         SR    RWRKX,RWRKX              ASSUME FULLWORD,NOT      A44855
*                                       DOUBLEWORD ALIGNMENT OF RECORD
         TM    DCBBFALN,DCBBFAF1        TEST SPECIFIED ALIGNMENT A44855
         BZ    DOUBWORD                 BRANCH IF DOUBLEWORD     A44855
         LA    RWRKX,FWDBNDRY           SET INCR TO A FULLWORK BOUNDARY
DOUBWORD LA    RLEN,RNDFCTOR(RWRKX,RLEN)  ADD FOR BUF ALIGNMENT  Y02072
         N     RLEN,RNDDBL              ROUND TO DOUBLE WORD     Y02072
*                                       BOUNDARY                 Y02072
         SR    RLEN,RWRKX               THEN TO A FULLWORD IF    Y02072
*                                       SPECIFIED                Y02072
         SR    RLEN,RAOFFS              TAKE OFF OFFSET TO REC   Y02072
****
****           CALCULATE BUFFER POOL SIZE AS RBUFNO * RBUFLN + BCBSIZE.
****           PAD TO DOUBLE WORD BOUNDARY FOR GETMAIN.
****
         SR    REVEN,REVEN              CLEAR REGISTER
         LR    RODD,RBUFLN              GET BUFFER SIZE
         MR    REVEN,RBUFNO             CALCULATE BUFFER POOL SIZE
         LA    RPOOLSZ,RNDFCTOR(RLEN,RODD) ADD BCB LENGTH        Y02072
         N     RPOOLSZ,RNDDBL           ROUND TO MULTIPLE OF 8
         TM    TCBFLGS6,TCBRV           TEST FOR REAL ADDRESS SPACE
         BO    GETREAL                  BRANCH IF SO
         LA    RPOOLSZ,USLSZFST(RPOOLSZ)  ADD SIZE OF FIRST USL  Y02072
         DROP  RWRKY                                             YM1421
****
****         GETMAIN ROUTINE MODESETS TO USER KEY BEFORE RETURNING
****
         LR    R1,RPOOLSZ               PUT LENGTH IN PARM REG   Y02072
         BAL   RETURN,ENTUSER           GET MAIN STORAGE         Y02072
*                                       RETURN IS IN USER KEY    Y02072
         LR    RWRKX,R1                 GET ADDR TO GOTTEN CORE  Y02072
         SPACE 2
****
****     INITIALIZE THE UNSCHEDULED LIST.
****
         USING USL,RWRKX                ESTABLISH UNSCHED LIST BASE REG
         XC    USL(USLSZFST),USL        CLEAR THE LIST
         MVI   USLSIZE+1,USLSZFST       INITIALIZE SIZE FIELD
         OI    USLFLAGS,USLCURNT        TURN ON 'CURRENT' BIT
         LA    RWRKY,USL+USLSZFST-L'USLSLOT1 ADDR LAST USL SLOT  Y02072
         USING USLSLOT,RWRKY            EST USL IOB ADDR BASE    Y02072
         OI    USLSLTFL,USLENDL         TURN ON END-OF-LIST INDICATOR
         DROP  RWRKY                    DROP USL IOB ADDR BASE   Y02072
*
         MODESET  EXTKEY=DATAMGT        CHANGE TO DATAMGT KEY    Y02072
*
         ST    RWRKX,DCBDYNB            STORE POINTER TO USL
         OI    DXATEXC1,FCAOUSL         SET AUDIT TRAIL BIT      Y02072
*                                       FOR FORCE CLOSE CLEANUP  Y02072
*                                       INDICATING USL GOTTEN    Y02072
*
         MODESET  KEYADDR=DXUKEY,WORKREG=15  CHANGE TO USER KEY  Y02072
*
         SPACE 2
****
****     INITIALIZE BUFFER CONTROL BLOCK (ADDRESS SPACE = VIRTUAL)
****
         LA    RWRKX,USLSZFST(RWRKX)    POINT TO BUFFER CONTROL BLOCK
         DROP  RWRKX                    DROP UNSCHED LIST BASE REG
         USING BCBDEFV,RWRKX            EST VIRTUAL BCB BASE REG
         ST    RPOOLSZ,BCBTBRS1         TOTAL SIZE OF GETMAIN AREA
         ST    RBUFLN,BCBBUFL           LENGTH OF EACH BUFFER
         STCM  RAOFFS,ADDR,BCBRAOFS     RECORD AREA OFFSET IN BUFFER
         LA    RBUFR,BCBDEFV(RLEN)      GET ADDRESS OF FIRST BUFFER
         ST    RBUFR,BCBBUF1            STORE IT IN BCB
*
         MODESET  EXTKEY=DATAMGT        CHANGE TO DATAMGT KEY    Y02072
*
         STCM  RWRKX,ADDR,DCBBUFCB+1    STORE ADDRESS OF BCB
         OI    DXATEXC1,FCAOBUF         SET AUDIT TRAIL BIT      Y02072
*                                       FOR FORCE CLOSE CLEANUP  Y02072
*                                       INDICATING BCB GOTTEN    Y02072
         SPACE 2
****
****     INITIALIZE AVAILABLE BUFFER CHAIN
****
*
         MODESET  KEYADDR=DXUKEY,WORKREG=15  CHANGE TO USER KEY  Y02072
*
         MVI   BCBBFAVL,BFRNUM1         SET FIRST AVAILABLE BFR = NO. 1
         LA    RODD,1(,RBUFNO)          NO. OF BUFFERS + 1 = COMPARAND
         LA    REVEN,BFRNUM1            SET INCR OF 1-BXLE LOOP CONTROL
         LA    RWRKY,BFRNUM2            INITIALIZE NEXT BFR TO   Y02072
*                                       BFR NUMBER 2
STORNEXT STC   RWRKY,BCBTBRS1+2(RWRKY)  CHAIN TO NEXT AVAIL BFR  Y02072
         BXLE  RWRKY,REVEN,STORNEXT     LOOP ONCE FOR EACH BUFFR Y02072
         LA    RWRKY,BCBTBRS1+1(RWRKY)  POINT TO LAST CHAIN      Y02072
*                                       ELEMENT INITIALIZED.
         MVI   0(RWRKY),0               NO MORE BUFFERS IN CHAIN Y02072
         B     INITBUFS                 GO TO INITIALIZE BUFFERS
         DROP  RWRKX                    DROP BFR CONTROL BLK BASE REG
         SPACE 3
GETREAL  EQU   *                        ENTERED IN KEY 5
****
****         GETMAIN ROUTINE MODESETS TO USER KEY BEFORE RETURNING
****
         LR    R1,RPOOLSZ               LOAD LG IN PARM REG      Y02072
         BAL   RETURN,ENTUSER           GET MAIN STORAGE         Y02072
*                                       RETURN IS IN USER KEY    Y02072
         LR    RWRKX,R1                 GET ADDR OF GOTTEN CORE  Y02072
         SPACE 2
****
****     INITIALIZE THE BUFFER CONTROL BLOCK (ADDRESS SPACE = REAL)
****
*
         MODESET  EXTKEY=DATAMGT        CHANGE TO DATAMGT KEY    Y02072
*
         USING BCBDEFR,RWRKX            EST BUFFER CONTROL BLK BASE REG
         IC    RWRKY,DCBBUFNO           SAVE BUFFER NUMBER
         ST    RWRKX,DCBBUFCB           STORE POINTER TO BUFCB
         STC   RWRKY,DCBBUFNO           RESTORE BUFNO IN DCB
         OI    DXATEXC1,FCAOBUF         SET AUDIT TRAIL BIT      Y02072
*                                       FOR FORCE CLOSE CLEANUP  Y02072
*                                       INDICATING BCB GOTTEN    Y02072
*
         MODESET  KEYADDR=DXUKEY,WORKREG=15 CHANGE TO USER KEY   Y02072
*
         XC    BCBIOBS,BCBIOBS          CLEAR FIRST 2 WORDS OF BUFFER
*                                       CONTROL BLOCK
         ST    RPOOLSZ,BCBTBRS          INITIALIZE BUFFR POOL SZ Y02072
         LA    RBUFR,BCBLENTH(RWRKX)    POINT TO FIRST BUFFER
         ST    RBUFR,BCBNABFR           INITIALIZE POINTER TO BUFS
         DROP  RWRKX                    DROP BFR CONTROL BLK BASE REG
INITBUFS EQU   *                                                 A44855
         S     RAOFFS,FOUR              OFFSET TO SWA POINTER    A44855
         LR    RSWA,RBUFR               INCREMENT BUFFER POINTER
         AR    RBUFR,RBUFLN             POINT TO NEXT BUFFER
         LA    RWRKY,1                  SET BUFFER COUNT TO 1
         SPACE 2
****
****     INITIALIZE BUFFER CHAIN AND RECORD AREA POINTER IN BUFFERS
****
         USING SWA,RSWA                 EST SEG WORK AREA BASE   A44855
CHAINIT  CR    RWRKY,RBUFNO             ARE ALL BUFFERS CHAINED
         BE    LASTBUF                  YES, BRANCH
         LA    RWRKY,1(,RWRKY)          INCREMENT BUFFER COUNT
         ST    RBUFR,SWANXTPT           SET POINTER TO NEXT BUFFER
         LA    RWRKX,SWA+L'BUFBFPTR(RAOFFS)  CALCULATE REC AREA PTR
         ST    RWRKX,SWARAPT            SET POINTER TO REC AREA
         LA    RWRKX,SWA(RAOFFS)        GET ADDR OF SWA ADDR FIELD
         USING BUFFERB,RWRKX            EST BUFFER PREFIX BASE REG
         ST    RSWA,BUFBFPTR            STORE ADDR OF SWA
         XC    SWABFINC,SWABFINC        CLEAR WORKING OFFSET     A44855
*                                       FIELD                    A44855
         LR    RSWA,RBUFR               UPDATE BUFFER POINTER    Y02072
         AR    RBUFR,RBUFLN             UPDATE NEXT BUFFER POINTER
         B     CHAINIT                  CONTINUE CHAINING BUFFERS
LASTBUF  XC    SWANXTPT,SWANXTPT        CLEAR LAST BUFFER POINTER
         XC    SWABFINC,SWABFINC        CLEAR OFFSET IN REC FLD  YM3693
         LA    RWRKX,SWA+L'BUFBFPTR(RAOFFS)  CALCULATE REC AREA PTR
         ST    RWRKX,SWARAPT            SET POINTER TO REC AREA
         LA    RWRKX,SWA(RAOFFS)        GET ADDR OF SWA ADDR FIELD
         ST    RSWA,BUFBFPTR            STORE ADDR OF SWA
         B     FUNCT7                   CONTINUE PROCESSING      Y02072
         DROP  RWRKX,RSWA               DROP BUFFER PREFIX AND SEGMENT
*                                       WORK AREA BASE REGISTERS
         SPACE 2
****
****     CONSTRUCT THE BUFFER CONTROL BLOCK AND SEGMENT WORK AREAS FOR
****     VRE OPTION WITHOUT DYNAMIC BUFFERING.
****
GETSWA   EQU   *
         USING DVCT,RDVCT               EST DEVICE CHAR TABLE BASE REG
         CLC   DCBBLKSI,DVCTRKLN        COMPARE MAXIMUM LOGICAL
*                                       RECORD LENGTH + TRACK SIZE
         BNH   LOWBLKSI                 BRANCH IF MAXIMUM LOGICAL
*                                       RECORD LENGTH IS LOW
         LH    RLEN,DVCTRKLN            USE TRACK LENGTH
         B     ADDCNTL                  BRANCH TO ADD CONTROL BYTE
         DROP  RDVCT                    DROP DEVICE CHAR TABLE BASE REG
LOWBLKSI LH    RLEN,DCBBLKSI            USE MAX LOGICAL REC LENGTH
ADDCNTL  LA    RLEN,SWACSLNG(RLEN)      ADD CONTROL BYTES
         SPACE 2
****
****     ROUND TO FULLWORD ALIGNMENT FOR THE BUFFER CONTROL BLOCK AND
****     SEGMENT WORK AREAS.
****
         LA    RLEN,FWRNDFTR(RLEN)      ADD FULLWORK ROUNDING FACTOR
         N     RLEN,RNDFULL             ROUND TO A FULLWORD
         SPACE 2
****
****     CALCULATE TOTAL BUFFER CONTROL BLOCK AND SEGMENT WORK AREA
****     LENGTH AND GET MAIN STORAGE.
****
         SR    REVEN,REVEN              CLEAR EVEN REGISTER
         LR    RODD,RLEN                PUT BUFFER LENGTH IN ODD REG
         MR    REVEN,RBUFNO             CALCULATE TOTAL SWA SIZE
         LA    RPOOLSZ,BCBLNTHS(RODD)   ADD BUFCB SIZE
****
****         GETMAIN ROUTINE MODESETS TO USER KEY BEFORE RETURNING
****
         LR    R1,RPOOLSZ               GET LG IN PARM REG       Y02072
         BAL   RETURN,ENTUSER           GET MAIN STORAGE         Y02072
*                                       RETURN IS IN USER KEY    Y02072
*
         MODESET  EXTKEY=DATAMGT        CHANGE TO DATAMGT KEY    Y02072
*
         LR    RWRKX,R1                 GET ADDR OF GOTTEN CORE  Y02072
         ST    RWRKX,DCBDYNB            PUT BUFCB POINTER IN DCB
         OI    DXATEXC1,FCAOSWA         SET AUDIT TRAIL BIT      Y02072
*                                       FOR FORCE CLOSE CLEANUP  Y02072
*                                       INDICATING SWA GOTTEN    Y02072
         SPACE 2
****
****     INITIALIZE THE BUFFER CONTROL BLOCK
****
*
         MODESET  KEYADDR=DXUKEY,WORKREG=15 CHANGE TO USER KEY   Y02072
*
         USING BCBDEFS,RWRKX            EST BUFFER CONTROL BLK BASE REG
         LA    RSWA,BCBLNTHS(RWRKX)     POINT TO FIRST BUFFER    YM1300
         ST    RSWA,BCBNXBUF            PUT POINTER TO BUFR 1 IN BCB
         STH   RBUFNO,BCBBFNUM          PUT SWA BUFNO IN BCB
         STH   RLEN,BCBBFLG             PUT SWA BUF LNGTH IN BCB
         DROP  RWRKX                    DROP BFR CONTROL BLK BASE REG
         SPACE 2
****
****     INITIALIZE SEGMENT WORK AREA POOL CHAIN
****
         USING SWA,RSWA                 EST SEGMENT WORK AREA BASE REG
         LA    RWRKY,1                  INITIALIZE COUNT REGISTER
         LR    RBUFR,RLEN               INITIALIZE TO LENGTH OF SWA
         AR    RBUFR,RSWA               INITIALIZE NEXT BUF PTR
CHAINSWA CR    RWRKY,RBUFNO             ARE ALL BUFFERS CHAINED
         BE    LASTSWA                  BRANCH IF YES
         ST    RBUFR,SWANXTPT           CHAIN BUFFER POINTER
         XC    SWARCDPT,SWARCDPT        CLEAR BUFFER CONTROL FIELD
         LA    RWRKY,1(,RWRKY)          INCREMENT COUNT REGISTER
         LR    RSWA,RBUFR               UPDATE BUFFER POINTER
         AR    RBUFR,RLEN               POINT TO NEXT BUFFER
         B     CHAINSWA                 BRANCH
LASTSWA  XC    SWA(SWACSLNG),SWA        ZERO LAST BUFFER POINTER AREA
         DROP  RSWA                     DROP SEGMENT WORK AREA BASE REG
         EJECT
***********************************************************************
*  FUNCTION VII:  THE FOLLOWING FUNCTION PREPARES FOR EXIT FROM THIS  *
*  MODULE.  THIS REQUIRES THAT THE DCB COPY BE MOVED INTO THE USER    *
*  DCB AND THAT THE WTG TAB BE CHECKED TO DETERMINE THE NEXT MODULE   *
*  TO RECEIVE CONTROL.                                                *
*  INPUT TO THIS FUNCTION IS AS FOLLOWS:                              *
*              REGISTER 4 = OPEN WORKAREA ADDRESS                     *
*              REGISTER 10= DCB ADDRESS                               *
*              OPEN REGISTERS 0-9 STORED AT DWASAVE                   *
*              OPEN WORKAREA CONTAINING PARM LIST AND WTG TABLE       *
*              EITHER DATA MANAGEMENT KEY OR USER KEY                 *
*  OUTPUT FROM THIS FUNCTION AND MODULE IS AS FOLLOWS:                *
*              SEE 'OUTPUT' IN THE PROLOGUE                           *
*              DATA MANAGEMENT KEY                                    *
***********************************************************************
         SPACE
FUNCT7   EQU   *                        BEGINNING OF FUNCTION 7
*
         MODESET  EXTKEY=DATAMGT        RETURN TO DATAMGT KEY    Y02072
*
         MVC   DEBDCBB,DXUDCBAD+1       MV USER DCB ADDR TO DEB  Y02072
         LM    R0,R9,DWASAVE            RESTORE OPEN'S REGISTERS
         USING PARML,RPARC              EST OPEN PARM LIST BASE REG
         USING WTGENTRY,RWTGC           ESTABLISH WTG ENTRY BASE REG
         MVI   WTGENTRY,0               INDICATE THIS DCB FINISHED
****
****  THE FOLLOWING MACRO CALLS A ROUTINE TO COPY THE DCB IN THE
****  OPEN WORKAREA INTO THE USER'S DCB.  THE COPY HAS BEEN UPDATED
****  BY THE OPEN EXECUTOR.  THIS WILL BE THE FIRST REFERENCE IN THIS
****  EXECUTOR TO THE USER'S DCB.
****
         USING WTG,RWTG
*
         IECRES  INIT,DCBCOPY=FRWKAR,STM=(R0,R14,WTGPREFX)       Y02072
*
         OI    DXATEXC1,FCAOCOPY        SET AUDIT TRAIL BIT      Y02072
*                                       FOR FORCE CLOSE CLEANUP  Y02072
*                                       INDICATING DCB COPY DONE Y02072
         SPACE 2
****
**** ROUTINE TO SCAN DCB LIST FOR OTHER DCBS REQUIRING THIS EXECUTOR.
**** IF NONE ARE FOUND, CONTROL IS TRANSFERRED TO THE NEXT EXECUTOR OF
**** THE FIRST DCB WHICH IS NOT COMPLETED.
****
SCAN4EQ  EQU   *
         LA    RWTGC,L'WTGENTRY(,RWTGC) INCREMENT WHERE TO GO INDEX
         LA    RPARC,L'PARDCBAD(,RPARC) AND DCB PARAMETER LIST INDEX
         CLC   WTGIDNX,AMIDCNST         DOES TABLE NAME THE EXEC Y02072
         BER   RBASE                    YES,BRANCH TO ENTRY POINT
         CLC   WTGIDNX,OPIDCNST         NO, IS THIS END OF TABLE Y02072
         BNE   SCAN4EQ                  NO, LOOP TO INCREMENT STEPS
*
         LR    RPARC,RPAR               RESTORE BOTH INDEX REGISTERS TO
         DROP  RWTGC                                             Y02072
         LA    RWTGC,WTGENTRY           THEIR INITIAL VALUES     Y02072
         USING WTGENTRY,RWTGC           SET UP BASE FOR WTG      Y02072
SCAN4ANY CLI   WTGIDTTR,0               IS THIS DCB COMPLETED    Y02072
         BNE   XCTLRTN                  IF NOT, GO TO NAMED EXECUTOR
         LA    RWTGC,L'WTGENTRY(,RWTGC) INCREMENT BOTH INDEX REGISTERS
         LA    RPARC,L'PARDCBAD(,RPARC) TO THE NEXT ENTRIES
         B     SCAN4ANY                 LOOP TO CHECK COMPLETION
*
XCTLRTN  EQU   *
         MVC   WTGMODID,WTGENTRY        MV EXEC ID TO PARAM LIST Y02072
         XC    DXXCTL,DXXCTL            CLEAR PARM LIST FIELD    YM2886
         LA    R15,DXXCTL               PASS PARM LIST IN R15    YM2886
         XCTL  EPLOC=(RWTG),SF=(E,(15))                          Y02072
         DROP  RWTG,RPARC,RWTGC
         EJECT
***********************************************************************
*   ERROR EXIT- ENTERED IF MACRF NOT SPECIFIED, BUFL=0 WITH DYNAMIC   *
*   BUFFERING, THERE ARE NO PRIMARY EXTENTS OR IF THE ICBACREL @Y30LSBS
*   MACRO RETURNS AN ERROR CODE.  CONTROL IS PASSED TO         @Y30LSBS
*   PROBLEM DETERMINATION MODULES WHICH WILL ISSUE A WTP MESSAGE      *
*   IDENTIFYING THE DATA SET IN ERROR.  AN ACCOMPANYING RETURN CODE   *
*   WILL IDENTIFY THE CAUSE OF THE ERROR.                             *
***********************************************************************
ERREXIT  EQU   *                        GO TO PROBLEM DETERMINATION
         LM    R1,R9,DWASAVE1           RESTORE OPEN'S REGISTERS YM3057
         LR    R2,RDCB                  LOAD REG2 WITH DCB PTR  ZA01362
*                                       R0 HAS INTERNAL ABEND CD YM3057
         USING WTG,RWTG                 SET UP BASE FOR WTG      YM7386
         MVC   WTGMODID,AMIDCNST        MOVE IN 3A ID TO WTG     YM7386
         DROP  RWTG                     DROP BASE                YM7386
         DMABCOND  (0),PDLOAD,RETURN=NONE,RES=NO,REGSAVE=YES     Y02072
         B     XCTLRTN                  GO TO RTN TO XCTL ONLY   S21042
***********************************************************************
***********************************************************************
*  THE FOLLOWING SUBROUTINE GETS CORE FROM THE SP230 OR FROM SUBPOOL  *
*  ZERO, DEPENDING ON THE ENTRY POINT. THE LENGTH IS IN R1 UPON ENTRY.*
***********************************************************************
ENTSP230 LA    R0,POOL230               COMBINE THE GETMAIN PARAMETERS
         B     GETCORE                  BR AROUND INST FOR SP0   Y02072
ENTUSER  EQU   *                        ENTRY TO GET CORE IN SP0 Y02072
*
         MODESET  KEYADDR=DXUKEY,WORKREG=14 CHANGE TO USER KEY   Y02072
*
         LA    R0,USERPOOL              GET CORE FROM SP0        Y02072
GETCORE  EQU   *                        GET CORE                 Y02072
         SLL   R0,24                    (SUBPOOL NUMBER
         OR    R0,R1                    AND SIZE).
         GETMAIN R,LV=(0)
*
         BR    RETURN                   RETURN TO MAIN ROUTINE   Y02072
***********************************************************************
***********************************************************************
*  THIS SUBROUTINE LOADS ALL BDAM MODULES AS REQUIRED.  THE ID OF THE *
*  MODULE TO BE LOADED IS PASSED FROM THE MAIN ROUTINE IN RWRKX(R14). *
*  AFTER THE MODULE HAS BEEN LOADED RDEBEXT(R7) IS POSITIONED TO THE  *
*  NEXT ID LOCATION IN THE DEB. THE ADDRESS OF THE LOADED MODULE IS   *
*  RETURNED TO THE MAIN ROUTINE IN REG 0. RETURN IS VIA RETURN(R2).   *
***********************************************************************
MODLOAD  EQU   *
         USING WTG,RWTG                 ESTAB BASE FOR WTG TAB   Y02072
         MVC   WTGMODID,0(RWRKX)        MOVE ID AS LAST 2 BYTES OF NAME
         LR    R0,RWTG                  SET POINTER TO MODULE NAME
         L     R1,CVTPTR                GET CVT ADDRESS
         USING CVT,R1                   ESTABLISH CVT BASE REG
         L     R1,CVTLINK               GET POINTER TO LPALIB    YM1140
         DROP  R1,RWTG                  DROP CVT AND WTG BASE REGS
         LOAD  EPLOC=(0),DCB=(1)        LOAD BDAM MODULE         Y02072
         USING DEBSUBNM,RDEBEXT         ESTABLISH DEB SUBROUTINE NAME
*                                       SECTION BASE REG
         MVC   DEBSUBID,0(RWRKX)        MOVE ROUTINE ID TO THE   S19015
*                                       DEB                      S19015
         LA    RDEBEXT,IDINCR(RDEBEXT)  INCREMENT DEB ID INDEX
         DROP  RDEBEXT                  DROP DEB SUBRTN SECTION BASE
         SR    RWRKY,RWRKY              CLEAR WORK REGISTER      Y02072
         IC    RWRKY,DEBNMSUB           DEB COUNT OF
         LA    RWRKY,1(,RWRKY)          SUBROUTINES
         STC   RWRKY,DEBNMSUB           STORE BACK IN DEB
         BR    RETURN                   RETURN TO DECISIONS
         DROP  RDEBA,RDCB,RCORE         DROP BASE REGS
***********************************************************************
         EJECT
***********************************************************************
****                                                               ****
****     CONSTANTS                                                 ****
****                                                               ****
***********************************************************************
         SPACE
         DS    0F
MODIDTBL DS    0D                       TABLE OF MODULE IDS
IDNOVSKA DC    C'KA'                    FOUNDATION MODULE FOR NON VS
IDVREKJ  DC    C'KJ'                    FOUNDATION MODULE FOR VS
IDFEEDKH DC    C'KH'                    FEEDBACK-REL BLK WITH OVERFLO
IDFEEDKG DC    C'KG'                    FEEDBACK-REL BLOCK ,NO OVERFLO
IDWAKN   DC    C'KN'                    SELF FORMAT FOR VAR SPANNED
IDWAKM   DC    C'KM'                    SELF FORMAT FOR VAR AND UNDEF
IDWAKO   DC    C'KO'                    PRE FORMAT FOR FIXED
IDCHKLI  DC    C'LI'                    CHECK MODULE
IDSIOLE  DC    C'LE'                    SIO ADRESPACE=REAL,NO VS
         DC    C'JA'                    VIRTUAL DYNAMIC BUFFERING SIO
IDEOELC  DC    C'LC'                    END OF EXTENT APPENDAGE
IDCEKU   DC    C'KU'                    CHANNNEL END APPENDAGE
PDLOAD   DC    C'6M',VL3(IGG0196M)      PROB DETER MODULE      @ZA04216
OPIDCNST DC    C'0S'                    LAST WTG TABLE ENTRY
FOUR     DC    F'4'                     CONSTANT TO ROUND TO F WORD
RNDDBL   DC    X'FFFFFFF8'              ROUND BUFFER LENGTH TO D
RNDFULL  DC    X'FFFFFFFC'              ROUND BUFFER LENGTH TO F
FOXES    DC    F'-1'                    INVALID EXTENT         @Y30LSBS
ONEMOR   DC    H'1'                     CONSTANT OF ONE        @Y30LSBS
CONH20   DC    H'20'                    CONSTANT OF 20           SM4366
MODID    DC    CL6'IGG019'              THIS MODULE ID           Y02072
AMIDCNST DC    C'3A'                    THIS EXECUTOR'S ID       Y02072
FIX      DC    C'@ZA17540'              LATEST FIX PUT IN      @ZA08000
DATE     DC    C'&SYSDATE'              DATE OF LATEST FIX     @ZA08000
PATCH    DC    XL((*-FUNCT1)/20)'0'     5% PATCH AREA            Y02072
         SPACE 2
         EJECT
***********************************************************************
****                                                               ****
****     CONTROL BLOCK DEFINITIONS                                 ****
****                                                               ****
***********************************************************************
         SPACE
         IGGBCB TYPE=DAM
***********************************************************************
*              BUFFER FORMAT FOR VRE DYNAMIC BUFFERING
***********************************************************************
BUFFERB  DSECT                          REST OF BUFFER (BUFRECAR A44855
*                                       IS ALIGNED AS SPECIFIED IN
*                                       DCBBFALN)
BUFBFPTR DS    A                        ADDR OF SEGMENT WORKAREA A44855
BUFRECAR EQU   *                        RECORD AREA (LENGTH =    A44855
*                                       BLKSIZE+ KEYLENGTH)      A44855
***********************************************************************
         EJECT
         IECDSECS  (MAIN,(IOB,NO)),PREFX,WTG,EXPAND=YES          Y02072
*                                                              @Y30LSBS
*                                                              @Y30LSBS
*
*             WHERE-TO-GO TABLE ADDITIONAL LABELS
*
         ORG   WTGIDTTR
WTGIDNX  DS    CL2                      ID OF NEXT MODULE        Y02072
*****
*****
FORCORE  DSECT                          WORKAREA DSECT CONTINUED Y02072
*****    THE FOLLOWING ARE AUDIT TRAIL BITS SET FOR FORCE CLOSE   *****
         IHAFCAUD ORG=YES                                        Y02072
*****
         ORG   DSCBEND                                           Y02072
DSCBUCB  DS    A                        ADDR OF UCB FOR FM1 DSCB Y02072
***********************************************************************
****     THIS DSECT MAPS THE WORK AREA WITHIN THE OPEN WORK AREA   ****
****     WHICH IS USED BY THIS MODULE.                             ****
***********************************************************************
         ORG   DXCCW
DWAWORK  DS    0CL96                    WORKAREA FOR OPEN EXEC   Y02072
DWASAVE  DS    0CL40                    SAVE AREA FOR OPEN REGS  Y02072
*                                       REGS 0-9                 Y02072
DWASAVE0 DS    F                        REG 0                    Y02072
DWASAVE1 DS    F                        REG 1                    Y02072
DWASAVE2 DS    F                        REG 2                    Y02072
DWASAVE3 DS    F                        REG 3                    Y02072
DWASAVE4 DS    F                        REG 4                    Y02072
DWASAVE5 DS    F                        REG 5                    Y02072
DWASAVE6 DS    F                        REG 6                    Y02072
DWASAVE7 DS    F                        REG 7                    Y02072
DWASAVE8 DS    F                        REG 8                    Y02072
DWASAVE9 DS    F                        REG 9                    Y02072
DWATTCTR DS    H                        SUMMATION OF TRKS IN DS  Y02072
DWAFM3SW DS    XL1                      FORMAT 3 SWITCH          Y02072
         DS    XL1
         DS    F
DWADSCB  DS    2F                       5 BYTE DSCB CCHHR -OPEN  Y02072
DWASAVEA DS    7F                       SAVEAREA FOR REGS 9-15 ON BR TO
*                                       SYSTEM CONVRT RTN-FUNCT2 Y02072
         ORG   DWATTCTR                 FIELDS NOT NEEDED AFTER FUNCT2
DWARCTKY DS    F                        SAVES LAST REC OVERHEAD  Y02072
*                                       + KEY LENGTH (IV)        Y02072
DWARCOVH DS    F                        SAVES MID SEG OVERHEAD   Y02072
*                                       WITH NO KEY OVERHEAD(IV) Y02072
DWARLREC DS    F                        BLKSIZE+KEYLG+OVERHEAD   Y02072
*                                       FOR LAST REC (IV)        Y02072
DWARNREC DS    F                        BLKSIZE+KEYLG+OVERHEAD   Y02072
*                                       FOR NOT LAST REC (IV)    Y02072
DWATRKLN DS    F                        DEVICE TRACK LG IN BYTES Y02072
DWAOFLOW DS    F                        SIZE OF OVERFLOW RECORD ON LAST
*                                       TRACK (IV)               Y02072
DWAFLAGS DS    B                        FLAG BYTE (IV)           Y02072
DWAPASS2 EQU   X'80'                    USED TO CHECK FOR SECOND PASS
*                                       THROUGH LOOP (IV)        Y02072
         DS    XL1                      UNUSED
DWADVTOL DS    H                        DEVICE TOLERANCE FACTOR  Y02072
DWATTRKS DS    F                        TOTAL NO TRCKS IN EXTENT Y02072
DWAFAIL1 EQU   X'FF'                    USED TO CAUSE FIRST COMPARE ON
*                                       THE ABOVE FIELD TO FAIL  Y02072
DWAWKLG  EQU   *-DWAWORK                WORKAREA USED            Y02072
         EJECT
         CVT   DSECT=YES
         EJECT
         DCBD  DSORG=DA
         EJECT
         IEZDEB
***********************************************************************
*        DSECT DEPENDENT EQUATES
***********************************************************************
DEBDASDL EQU   (DEBNMTRK+L'DEBNMTRK)-DEBDASD  LENGTH OF DEB DASD SECT
DAADRLNG EQU   L'DEBSTRCC+L'DEBSTRHH+L'DEBENDCC+L'DEBENDHH  LENGTH OF
*                                       STARTING AND ENDING CCHH FIELDS
CCHHLNG  EQU   L'DEBENDCC+L'DEBENDHH    LENGTH OF ENDING CCHH FIELDS
FLDUCBBB EQU   L'DEBUCBAD+L'DEBBINUM    LENGTH OF DEB UCB AND BB FIELDS
DEBAVTLN EQU   (DEBXCEAD+L'DEBXCEAD)-DEBAVT  LENGTH OF DEB AVT SECTION
MODFLDS  EQU   L'WTGATTRB+L'WTGMODSZ+L'WTGTXTLN  LENGTH OF ATTRIBUTE,
*                                       STORAGE REQUIRED, AND LENGTH
*                                       FIELDS OF XCTL MODULE
DCBIOBQS EQU   L'DCBIOBSQ+L'DCBSQND+L'DCBIOBUQ+L'DCBUQND  USED TO CLEAR
****                                                               ****
         EJECT
         IHADVCT                                                 Y02072
         EJECT
         IGGPARML                                                Y02072
         IGGSWA                                                  Y02072
         EJECT
         IKJTCB
         EJECT
         IHAPSA                                                  Y02072
         EJECT
UCB      DSECT
         IEFUCBOB  LIST=YES                                      Y02072
         EJECT
         IGGUSL                                                  Y02072
         SPACE 2
         IGGRDX                                                  Y02072
         EJECT
*
***************************************************************@Y30LSBS
*                                                              @Y30LSBS
*        THE FOLLOWING DSECT FORMATS THE ICBACREL MACRO FOR    @Y30LSBS
*        ACQUIRE LIST USED IN STAGING MSS DATA SETS ONTO REAL  @Y30LSBS
*        DASD.                                                 @Y30LSBS
*                                                              @Y30LSBS
***************************************************************@Y30LSBS
ACQLST   DSECT                                                 @Y30LSBS
ACQPLN   EQU   96                       PARAMETER LIST LENGTH  @Y30LSBS
PLUS3    EQU   3                        DISPLACEMENT OF THREE  @Y30LSBS
         ICBACREL TYPE=ACQ,MF=L         LIST FORM OF ACQUIRE   @Y30LSBS
*                                                              @Y30LSBS
***************************************************************@Y30LSBS
*                                                              @Y30LSBS
*        THE FOLLOWING DSECT FORMATS ONE ENTRY IN THE AREXT    @Y30LSBS
*        LIST.  THE AREXT LIST IS AT OFFSET 28(1C) IN THE      @Y30LSBS
*        ACQLST DSECT ABOVE.                                   @Y30LSBS
*                                                              @Y30LSBS
***************************************************************@Y30LSBS
AREXTSEC DSECT                                                 @Y30LSBS
AREXTLN  EQU   4                        LENGTH OF ACQUIRE EXT  @Y30LSBS
LOCC     DS    CL2                      LOW CC OF ACQUIRE EXT  @Y30LSBS
HICC     DS    CL2                      HIGH CC OF ACQUIRE EXT @Y30LSBS
         END
