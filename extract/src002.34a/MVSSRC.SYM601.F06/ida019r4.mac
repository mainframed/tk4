         TITLE 'IDA019R4--VSAM KEYED/ADDRESSED ACCESSING               *
                        '
IDA019R4 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA019R4  78.172'                                 0001
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  LA    @10,4095(,@11)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@10                                    0001
         IDASVR14
*   IF AMBCREAT=ON THEN             /* DURING LOAD MODE              */
         TM    AMBCREAT(RAMB),B'10000000'                          0157
         BNO   @RF00157                                            0157
*     DO;                           /* ALLOW ONLY PUT REQUESTS       */
*       IF RPLREQ^=RPLPUT×          /* ALSO DO NOT ALLOW             */
*           (RPLKEY=ON&RPLDIR=ON) THEN/* KEYED DIRECT REQUESTS       */
         CLI   RPLREQ(RRPL),1                                      0159
         BNE   @RT00159                                            0159
         TM    RPLKEY(RRPL),B'10000000'                            0159
         BNO   @RF00159                                            0159
         TM    RPLDIR(RRPL),B'01000000'                            0159
         BNO   @RF00159                                            0159
@RT00159 DS    0H                                                  0160
*         DO;                       /*                               */
*           RPLERREG='08'X;         /* LOGICAL ERROR                 */
         MVI   RPLERREG(RRPL),X'08'                                0161
*           RPLERRCD=RPLINLRQ;      /* INVALID REQUEST               */
         MVI   RPLERRCD(RRPL),X'74'                                0162
*           PLHINVAL=ON;            /* RELEASE PLH           @ZA11564*/
         OI    PLHINVAL(RPLH),B'00000010'                          0163
*           CALL MODEXIT;           /* RETURN                @X04SVRQ*/
         BAL   @14,MODEXIT                                         0164
*         END;                      /* END LOAD MODE ERROR           */
*     END;                          /* END LOAD MODE CHECK           */
@RF00159 DS    0H                                                  0167
*                                                                  0167
*   /*****************************************************************/
*   /*                                                               */
*   /* GET REQUEST PROCESSING                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0167
*   IF RPLREQ=RPLGET                /*                               */
*     THEN                          /*                               */
@RF00157 CLI   RPLREQ(RRPL),0                                      0167
         BNE   @RF00167                                            0167
*     DO;                           /* GET REQUEST TYPE              */
*       PLHUPD=OFF;                 /* RESET UPDATE          @ZA07544*/
         NI    PLHUPD(RPLH),B'01111111'                            0169
*       IF RPLSEQ=OFF               /* IF NOT SEQUENTIAL             */
*         THEN                      /* CONTINUE                      */
         TM    RPLSEQ(RRPL),B'00100000'                            0170
         BNZ   @RF00170                                            0170
*         DO;                       /* DIRECT OR SKP REQUEST CALL  0171
*                                      DIRECT RECORD LOC             */
*           RPARM1=RPLARG;          /* POINT TO SEARCH ARG           */
         L     RPARM1,RPLARG(,RRPL)                                0172
*I01:                                                              0173
*           DO;                     /* IDACALL(IDA019RA)             */
I01      DS    0H                                                  0174
*             CALL IDA019RA;        /* EXIT TO IDA019RA              */
         L     @15,@CV01000                                        0174
         BALR  @14,@15                                             0174
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*             GEN(LA    @10,4095(@11));/* LOAD SECOND BASE           */
         LA    @10,4095(@11)
*             GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE  */
         L     @10,=A(@PSTART+4095)
*             GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE   */
         USING @PSTART+4095,@10
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I01;                /* MACRO                 @X04SVRQ*/
*           IF RPLERREG^='00'X      /* SEE IF ERROR                  */
*             THEN                  /* YES.                          */
         CLI   RPLERREG(RRPL),0                                    0184
         BE    @RF00184                                            0184
*             CALL MODEXIT;         /* RETURN                @X04SVRQ*/
         BAL   @14,MODEXIT                                         0185
*         END;                      /* END OF DIRECT OR SKP          */
*       ELSE                        /*                               */
*         DO;                       /* SEQUENTIAL REQUEST            */
*                                                                  0187
         B     @RC00170                                            0187
@RF00170 DS    0H                                                  0188
*           /*********************************************************/
*           /*                                                       */
*           /* CHECK FOR USER SWITCHING ACCESSING TYPES DURING       */
*           /* SEQUENTIAL PROCESSING                         @ZA14787*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0188
*           IF RPLKEY=ON THEN       /* ADDRESSED ACCESS      @ZA14787*/
         TM    RPLKEY(RRPL),B'10000000'                            0188
         BNO   @RF00188                                            0188
*             DO;                   /*                       @ZA14787*/
*               IF PLHKEYMD=OFF THEN/* CHANGED TO KEYED      @ZA14787*/
         TM    PLHKEYMD(RPLH),B'00100000'                          0190
         BNZ   @RF00190                                            0190
*                 DO;               /*                       @ZA14787*/
*                   GOTO NORPLPTR;  /* POSSIBLE ERROR        @ZA14787*/
         B     NORPLPTR                                            0192
*                 END;              /*                       @ZA14787*/
*             END;                  /*                       @ZA14787*/
*           ELSE                    /* KEYED SEQ ACCESS      @ZA14787*/
*             IF PLHKEYMD=ON THEN   /* CHNGD TO ADDR ACCESS  @ZA14787*/
         B     @RC00188                                            0195
@RF00188 TM    PLHKEYMD(RPLH),B'00100000'                          0195
         BNO   @RF00195                                            0195
*NORPLPTR:                                                         0196
*               DO;                 /* SET ERROR & RETCODES  @ZA14787*/
NORPLPTR DS    0H                                                  0197
*                 IF PLH1ST=OFF THEN/* FIRST PASS SWITCH OFF @ZA14787*/
         TM    PLH1ST(RPLH),B'01000000'                            0197
         BNZ   @RF00197                                            0197
*                   DO;             /* NOT FIRST PASS        @ZA14787*/
*                     RPLERRCD=RPLNOPTR;/* SET POSITIONING ERROR   0199
*                                                            @ZA14787*/
         MVI   RPLERRCD(RRPL),X'58'                                0199
*                     RPLERREG='08'X;/* SET LOGICAL ERROR    @ZA14787*/
         MVI   RPLERREG(RRPL),X'08'                                0200
*                     CALL MODEXIT; /* RETURN                @ZA14787*/
         BAL   @14,MODEXIT                                         0201
*                   END;            /* NO ERROR FIRST PASS   @ZA14787*/
*               END;                /*                       @ZA14787*/
@RF00197 DS    0H                                                  0204
*           IF PLHEFLGS^='0000'X    /* EXCEPTION FLAGS ON            */
*             THEN                  /* YES.                          */
@RF00195 DS    0H                                                  0204
@RC00188 CLC   PLHEFLGS(2,RPLH),@CB01013                           0204
         BE    @RF00204                                            0204
*             CALL PLHEXP;          /* PROCESS EXCEPTION             */
         BAL   @14,PLHEXP                                          0205
*           ELSE                    /*                               */
*             CALL ADVPLH;          /* ADVANCE TO NEXT RECORD        */
         B     @RC00204                                            0206
@RF00204 BAL   @14,ADVPLH                                          0206
*           IF RPLERREG^='00'X      /* ERROR                         */
*             THEN                  /* YES.                          */
@RC00204 CLI   RPLERREG(RRPL),0                                    0207
         BE    @RF00207                                            0207
*             CALL MODEXIT;         /* RETURN                @X04SVRQ*/
         BAL   @14,MODEXIT                                         0208
*           IF RPLUPD=ON            /* UPDATE REQUEST                */
*             THEN                  /* YES.                          */
@RF00207 TM    RPLUPD(RRPL),B'00000010'                            0209
         BNO   @RF00209                                            0209
*             DO;                   /* DETERMINE IF DATA             */
*               IF BUFCEXC=OFF      /* BUFFER IS IN EXCL CTL         */
*                 THEN              /* NO.                           */
         L     @05,PLHDBUFC(,RPLH)                                 0211
         TM    BUFCEXC(@05),B'00000010'                            0211
         BNZ   @RF00211                                            0211
*                 DO;               /*                               */
*                   PLHRDEXC=ON;    /* SET PLH IN EXCL MODE          */
         OI    PLHRDEXC(RPLH),B'00001000'                          0213
*                   CALL SCANDATA;  /* OBTAIN EXCL USE               */
         BAL   @14,SCANDATA                                        0214
*                   IF RPLERREG^='00'X/* ERROR                       */
*                     THEN          /* YES.                          */
         CLI   RPLERREG(RRPL),0                                    0215
         BE    @RF00215                                            0215
*                     CALL MODEXIT; /* RETURN                @X04SVRQ*/
         BAL   @14,MODEXIT                                         0216
*                 END;              /* END OF GET EXCLUSIVE          */
@RF00215 DS    0H                                                  0218
*             END;                  /* END OF GET UPDATE             */
@RF00211 DS    0H                                                  0219
*         END;                      /* END OF SEQUENTIAL             */
@RF00209 DS    0H                                                  0220
*       PLHRCODE=RPLREQ;            /* SAVE REQUEST CODE             */
@RC00170 IC    @05,RPLREQ(,RRPL)                                   0220
         STC   @05,PLHRCODE(,RPLH)                                 0220
*       IF PLHRDFP->RDF1ST=ON×      /* IF CURRENT BUFF       @X04SVES*/
*           PLHRDFP->RDFNOT1=ON THEN/* CONTAINS A SPANNED RECORD   0221
*                                      SEGMENT GO PROCESS THE      0221
*                                      RETRIEVAL FROM MODULE IDA019RT
*                                                            @X04SVES*/
         L     @05,PLHRDFP(,RPLH)                                  0221
         TM    RDF1ST(@05),B'00110000'                             0221
         BZ    @RF00221                                            0221
*I02:                                                              0222
*         DO;                       /* IDACALL(IDADARTV)             */
I02      DS    0H                                                  0223
*           CALL IDADARTV;          /* EXIT TO IDADARTV              */
         L     @15,@CV00991                                        0223
         BALR  @14,@15                                             0223
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(USING *+4095,@10);  /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*           GEN(LA    @10,4095(@11));/* LOAD SECOND BASE             */
         LA    @10,4095(@11)
*           GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE    */
         L     @10,=A(@PSTART+4095)
*           GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE     */
         USING @PSTART+4095,@10
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I02;                  /*                       @X04SVES*/
*       ELSE                        /*                       @X04SVES*/
*         CALL DATARTV;             /* RETRIEVE RECORD               */
         B     @RC00221                                            0233
@RF00221 BAL   @14,DATARTV                                         0233
*       IF RPLERREG^='00'X          /* IF ERROR, RLSE BFR    @X04SVMR*/
*         THEN                      /*                               */
@RC00221 CLI   RPLERREG(RRPL),0                                    0234
         BE    @RF00234                                            0234
*         DO;                       /*                       @X04SVMR*/
*           IF RPLDIR=ON&RPLUPD=OFF&RPLNSP=OFF/*             @X04SVMR*/
*               &RPLLOC=OFF         /* NOT LOCATE            @X04SVMR*/
*             THEN                  /* RELEASE PLH           @X04SVMR*/
         TM    RPLDIR(RRPL),B'01000000'                            0236
         BNO   @RF00236                                            0236
         TM    RPLUPD(RRPL),B'00000011'                            0236
         BNZ   @RF00236                                            0236
         TM    RPLLOC(RRPL),B'10000000'                            0236
         BNZ   @RF00236                                            0236
*             CALL RLSEBUFS;        /* RELEASE PLH BUFFERS   @X04SVMR*/
         BAL   @14,RLSEBUFS                                        0237
*         END;                      /* END ERROR CODE        @X04SVMR*/
*       ELSE                        /* HERE IF NO ERROR      @X04SVMR*/
*         DO;                       /*                               */
         B     @RC00234                                            0239
@RF00234 DS    0H                                                  0240
*           IF AMBUPX=ON&RPLUPD=ON THEN/* AIX UPGRADE & GET UPD REQ.
*                                                            @X04SVRQ*/
         TM    AMBUPX(RAMB),B'00000010'                            0240
         BNO   @RF00240                                            0240
         TM    RPLUPD(RRPL),B'00000010'                            0240
         BNO   @RF00240                                            0240
*             DO;                   /*                       @X04SVRQ*/
*I03:                                                              0242
*               DO;                 /* IDACALL(IDA019RU)             */
I03      DS    0H                                                  0243
*                 CALL IDA019RU;    /* EXIT TO IDA019RU              */
         L     @15,@CV01005                                        0243
         BALR  @14,@15                                             0243
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE     */
         USING *+4095,@10
*                 GEN(LA    @10,4095(@11));/* LOAD SECOND BASE       */
         LA    @10,4095(@11)
*                 GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND 0248
*                                      BASE                          */
         L     @10,=A(@PSTART+4095)
*                 GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND  0249
*                                      BASE                          */
         USING @PSTART+4095,@10
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I03;            /* CALL AIX UPGRADE.     @X04SVRQ*/
*               IF RPLERREG^='00'X THEN/* ERROR.             @X04SVRQ*/
         CLI   RPLERREG(RRPL),0                                    0253
         BE    @RF00253                                            0253
*                 CALL MODEXIT;     /* RETURN.               @X04SVRQ*/
         BAL   @14,MODEXIT                                         0254
*             END;                  /*                       @X04SVRQ*/
@RF00253 DS    0H                                                  0256
*           AMDRETR=AMDRETR+ONE;    /* ADD 1 TO RETRIEVE COUNT       */
@RF00240 L     @05,AMBDSB(,RAMB)                                   0256
         LA    @00,1                                               0256
         AL    @00,AMDRETR(,@05)                                   0256
         ST    @00,AMDRETR(,@05)                                   0256
*           PLHNOADV=OFF;           /* RESET NO ADVANCE FLAG         */
         NI    PLHNOADV(RPLH),B'11110111'                          0257
*           IF RPLDIR=ON&RPLUPD=OFF&RPLNSP=OFF/* DIR NUP             */
*               &RPLLOC=OFF         /* NOT LOCATE                    */
*             THEN                  /* RELEASE PLH                   */
         TM    RPLDIR(RRPL),B'01000000'                            0258
         BNO   @RF00258                                            0258
         TM    RPLUPD(RRPL),B'00000011'                            0258
         BNZ   @RF00258                                            0258
         TM    RPLLOC(RRPL),B'10000000'                            0258
         BNZ   @RF00258                                            0258
*             CALL RLSEBUFS;        /* RELEASE PLH BUFFERS           */
         BAL   @14,RLSEBUFS                                        0259
*           ELSE                    /* DONT RELEASE PLH              */
*             DO;                   /*                               */
         B     @RC00258                                            0260
@RF00258 DS    0H                                                  0261
*               IF AMDDST='1'B&     /* KEY SEQ. D.S.         @X04SVES*/
*                   PLHSRCSG=ZERO   /* AND NOT SPANNED       @X04SVES*/
*                 THEN              /* YES.                          */
         L     @05,AMBDSB(,RAMB)                                   0261
         TM    AMDDST(@05),B'10000000'                             0261
         BNO   @RF00261                                            0261
         LH    @05,PLHSRCSG(,RPLH)                                 0261
         LTR   @05,@05                                             0261
         BNZ   @RF00261                                            0261
*                 CALL MOVEKEY;     /* MOVE KEY TO PLH               */
         BAL   @14,MOVEKEY                                         0262
*               IF RPLUPD=ON        /* UPDATE REQUEST                */
*                 THEN              /* YES.                          */
@RF00261 TM    RPLUPD(RRPL),B'00000010'                            0263
         BNO   @RF00263                                            0263
*                 PLHUPD=ON;        /* SET UPDATE FLAG               */
         OI    PLHUPD(RPLH),B'10000000'                            0264
*             END;                  /* END OF SET PLH                */
@RF00263 DS    0H                                                  0266
*           IF AMBJRN=ON THEN       /* JOURNAL EXIT                  */
@RC00258 TM    AMBJRN(RAMB),B'00000010'                            0266
         BNO   @RF00266                                            0266
*             DO;                   /* YES.                          */
*               PLHJCODE=PLHJGET;   /* GET REQUEST TYPE              */
         MVI   PLHJCODE(RPLH),B'00000000'                          0268
*I04:                                                              0269
*               DO;                 /* IDACALL(IDATJXIT)             */
I04      DS    0H                                                  0270
*                 CALL IDATJXIT;    /* EXIT TO IDATJXIT              */
         L     @15,@CV00998                                        0270
         BALR  @14,@15                                             0270
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE     */
         USING *+4095,@10
*                 GEN(LA    @10,4095(@11));/* LOAD SECOND BASE       */
         LA    @10,4095(@11)
*                 GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND 0275
*                                      BASE                          */
         L     @10,=A(@PSTART+4095)
*                 GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND  0276
*                                      BASE                          */
         USING @PSTART+4095,@10
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I04;            /*                       @X04SVRQ*/
*             END;                  /* END JOURNAL EXIT              */
*           IF PLHSRCSG^=ZERO&      /* SPANNED RECORD        @X04SVES*/
*               PLHSRBSG=ON THEN    /* & INCONSISTANT SEGMENTS     0281
*                                                            @X04SVES*/
@RF00266 LH    @05,PLHSRCSG(,RPLH)                                 0281
         LTR   @05,@05                                             0281
         BZ    @RF00281                                            0281
         TM    PLHSRBSG(RPLH),B'10000000'                          0281
         BNO   @RF00281                                            0281
*             DO;                   /* YES                   @X04SVES*/
*               RPLERREG='08'X;     /* SET LOG ERR           @X04SVES*/
         MVI   RPLERREG(RRPL),X'08'                                0283
*               RPLERRCD=RPLSRISG;  /* SET CODE              @X04SVES*/
         MVI   RPLERRCD(RRPL),X'8C'                                0284
*             END;                  /*                       @X04SVES*/
*         END;                      /* END OF POST DATA RETR         */
@RF00281 DS    0H                                                  0287
*       CALL MODEXIT;               /* RETURN                @X04SVRQ*/
@RC00234 BAL   @14,MODEXIT                                         0287
*     END;                          /* END OF GET.           @X04SVRQ*/
*                                                                  0289
*   /*****************************************************************/
*   /*                                                               */
*   /* POINT REQUEST PROCESSING                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0289
*   IF RPLREQ=RPLPOINT              /*                               */
*     THEN                          /* POINT REQUEST                 */
@RF00167 CLI   RPLREQ(RRPL),3                                      0289
         BNE   @RF00289                                            0289
*     DO;                           /*                               */
*       RPARM1=RPLARG;              /* POINT TO SEARCH ARG CALL    0291
*                                      DIRECT RECORD LOC             */
         L     RPARM1,RPLARG(,RRPL)                                0291
*I05:                                                              0292
*       DO;                         /* IDACALL(IDA019RA)             */
I05      DS    0H                                                  0293
*         CALL IDA019RA;            /* EXIT TO IDA019RA              */
         L     @15,@CV01000                                        0293
         BALR  @14,@15                                             0293
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(USING *+4095,@10);    /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*         GEN(LA    @10,4095(@11)); /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*         GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE      */
         L     @10,=A(@PSTART+4095)
*         GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE       */
         USING @PSTART+4095,@10
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I05;                    /* MACRO                 @X04SVRQ*/
*       IF RPLERREG='00'X           /* IF NO ERROR,                  */
*         THEN                      /* SET DONT ADVANCE PLH          */
         CLI   RPLERREG(RRPL),0                                    0303
         BNE   @RF00303                                            0303
*         DO;                                                      0304
*           PLHNOADV=ON;            /* FLAG.                         */
         OI    PLHNOADV(RPLH),B'00001000'                          0305
*           PLHUPD=OFF;             /* RESET GET UPD FLAG    @X04SVRQ*/
         NI    PLHUPD(RPLH),B'01111111'                            0306
*           RPLDDDD=BUFCDDDD+       /* PUT RECORD RBA INTO           */
*               (PLHRECP-BUFCBAD);  /* RPL                           */
         L     @05,PLHDBUFC(,RPLH)                                 0307
         L     @00,PLHRECP(,RPLH)                                  0307
         SL    @00,BUFCBAD(,@05)                                   0307
         AL    @00,BUFCDDDD(,@05)                                  0307
         ST    @00,RPLDDDD(,RRPL)                                  0307
*           PLHDDDD=RPLDDDD;        /* SAVE RBA IN PLH               */
         ST    @00,PLHDDDD(,RPLH)                                  0308
*           PLHRCODE=RPLREQ;        /* SAVE REQUEST CODE             */
         IC    @05,RPLREQ(,RRPL)                                   0309
         STC   @05,PLHRCODE(,RPLH)                                 0309
*         END;                      /* END OF NO ERROR               */
*       CALL EXIT;                  /* RETURN. DONT FREE SEQ SET BFR
*                                      FOR DB/DC.            @X04SVRQ*/
@RF00303 BAL   @14,EXIT                                            0311
*     END;                          /* END OF POINT                  */
*                                                                  0313
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE IF OUTPUT IS ALLOWED.                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0313
*   IF AMBLWRIT=OFF                 /* DOES AMBL ALLOW WRITE @X04SVRQ*/
*     THEN                          /* NO.                           */
@RF00289 L     @05,RPLDACB(,RRPL)                                  0313
         L     @05,ACBAMBL(,@05)                                   0313
         TM    AMBLWRIT(@05),B'00100000'                           0313
         BNZ   @RF00313                                            0313
*     DO;                           /* SET ERROR CODES               */
*       RPLERREG='08'X;             /* LOFICAL ERROR                 */
         MVI   RPLERREG(RRPL),X'08'                                0315
*       RPLERRCD=RPLINACC;          /* PASSWORD VIOLATION            */
         MVI   RPLERRCD(RRPL),X'44'                                0316
*       CALL MODEXIT;               /* RETURN                @X04SVRQ*/
         BAL   @14,MODEXIT                                         0317
*     END;                          /* END OF ERROR CODE SET         */
*                                                                  0319
*   /*****************************************************************/
*   /*                                                               */
*   /* PUT UPDATE, ERASE PROCESSING                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0319
*   IF RPLLOC=ON&RPLREQ=RPLPUT THEN /* PUT LOCATE                    */
@RF00313 TM    RPLLOC(RRPL),B'10000000'                            0319
         BNO   @RF00319                                            0319
         CLI   RPLREQ(RRPL),1                                      0319
         BNE   @RF00319                                            0319
*     DO;                           /* YES.                          */
*       RPLERREG='08'X;             /* ERROR                         */
         MVI   RPLERREG(RRPL),X'08'                                0321
*       RPLERRCD=RPLINLOC;          /*                               */
         MVI   RPLERRCD(RRPL),X'54'                                0322
*       CALL MODEXIT;               /* RETURN                @X04SVRQ*/
         BAL   @14,MODEXIT                                         0323
*     END;                          /* END LOCATE ERROR              */
*   IF RPLREQ=RPLPUT&               /* PUT                           */
*       RPLUPD=ON                   /* UPDATE                        */
*       ×RPLREQ=RPLERASE            /* OR ERASE                      */
*     THEN                          /* YES.                          */
@RF00319 CLI   RPLREQ(RRPL),1                                      0325
         BNE   @GL00011                                            0325
         TM    RPLUPD(RRPL),B'00000010'                            0325
         BO    @RT00325                                            0325
@GL00011 CLI   RPLREQ(RRPL),5                                      0325
         BNE   @RF00325                                            0325
@RT00325 DS    0H                                                  0326
*     DO;                           /*                               */
*       IF PLHUPD=ON                /* GET UPDATE ISSUED             */
*         THEN                      /* YES.                          */
         TM    PLHUPD(RPLH),B'10000000'                            0327
         BNO   @RF00327                                            0327
*         DO;                       /*                               */
*           IF AMBUPX=ON THEN       /* AIX UPGRADE.          @X04SVMR*/
         TM    AMBUPX(RAMB),B'00000010'                            0329
         BNO   @RF00329                                            0329
*             DO;                   /*                       @X04SVMR*/
*I06:                                                              0331
*               DO;                 /* IDACALL(IDA019RU)             */
I06      DS    0H                                                  0332
*                 CALL IDA019RU;    /* EXIT TO IDA019RU              */
         L     @15,@CV01005                                        0332
         BALR  @14,@15                                             0332
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE     */
         USING *+4095,@10
*                 GEN(LA    @10,4095(@11));/* LOAD SECOND BASE       */
         LA    @10,4095(@11)
*                 GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND 0337
*                                      BASE                          */
         L     @10,=A(@PSTART+4095)
*                 GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND  0338
*                                      BASE                          */
         USING @PSTART+4095,@10
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I06;            /* CALL AIX UPGRADE.     @X04SVMR*/
*               IF RPLERREG^='00'X THEN/* ERROR.             @X04SVMR*/
         CLI   RPLERREG(RRPL),0                                    0342
         BE    @RF00342                                            0342
*                 CALL MODEXIT;     /* RETURN.               @X04SVMR*/
         BAL   @14,MODEXIT                                         0343
*             END;                  /*                       @X04SVMR
*                                      CALL DATA MODIFY              */
@RF00342 DS    0H                                                  0345
*I07:                                                              0345
*           DO;                     /* IDACALL(IDA019RL)             */
@RF00329 DS    0H                                                  0345
I07      DS    0H                                                  0346
*             CALL IDA019RL;        /* EXIT TO IDA019RL              */
         L     @15,@CV01003                                        0346
         BALR  @14,@15                                             0346
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*             GEN(LA    @10,4095(@11));/* LOAD SECOND BASE           */
         LA    @10,4095(@11)
*             GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE  */
         L     @10,=A(@PSTART+4095)
*             GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE   */
         USING @PSTART+4095,@10
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I07;                /* MACRO                 @X04SVRQ*/
*           IF RPLERREG='00'X       /* ERROR                         */
*             THEN                  /* NO.                           */
         CLI   RPLERREG(RRPL),0                                    0356
         BNE   @RF00356                                            0356
*             DO;                   /* INCREMENT STATISTICS          */
*               PLHUPD=OFF;         /* RESET GET UPD INDICATOR     0358
*                                                            @XA19277*/
         NI    PLHUPD(RPLH),B'01111111'                            0358
*               PLHDDDD=RPLDDDD;    /* SAVE RBA IN PLH               */
         L     @05,RPLDDDD(,RRPL)                                  0359
         ST    @05,PLHDDDD(,RPLH)                                  0359
*               PLHRCODE=RPLREQ;    /* SAVE REQUEST CODE             */
         IC    @05,RPLREQ(,RRPL)                                   0360
         STC   @05,PLHRCODE(,RPLH)                                 0360
*               IF RPLDIR=ON        /* DIRECT REQUEST        @XA19404*/
*                   &RPLNSP=OFF     /* AND NOT NOTE          @XA19404*/
*                 THEN              /* POSITION              @XA19404*/
         TM    RPLDIR(RRPL),B'01000000'                            0361
         BNO   @RF00361                                            0361
         TM    RPLNSP(RRPL),B'00000001'                            0361
         BNZ   @RF00361                                            0361
*                 CALL RLSEBUFS;    /* RELEASE PLH BUFFERS           */
         BAL   @14,RLSEBUFS                                        0362
*               IF RPLREQ=RPLERASE  /* ERASE REQUEST                 */
*                 THEN              /* YES.                          */
@RF00361 CLI   RPLREQ(RRPL),5                                      0363
         BNE   @RF00363                                            0363
*                 DO;               /*                               */
*                   AMDDELR=AMDDELR+ONE;/* ADD 1 TO DELETE COUNT     */
         L     @05,AMBDSB(,RAMB)                                   0365
         LA    @00,1                                               0365
         AL    @00,AMDDELR(,@05)                                   0365
         ST    @00,AMDDELR(,@05)                                   0365
*                   AMDNLR=AMDNLR-ONE;/* SUB 1 FROM RECORD CNT       */
         L     @00,AMDNLR(,@05)                                    0366
         BCTR  @00,0                                               0366
         ST    @00,AMDNLR(,@05)                                    0366
*                   PLHJCODE=PLHJERS;/* ERASE JRN CODE               */
         MVI   PLHJCODE(RPLH),B'00001000'                          0367
*                 END;              /*                               */
*               ELSE                /* UPDATE REQUEST                */
*                 DO;               /*                               */
         B     @RC00363                                            0369
@RF00363 DS    0H                                                  0370
*                   AMDUPR=AMDUPR+ONE;/* ADD 1 TO UPDATE COUNT       */
         L     @05,AMBDSB(,RAMB)                                   0370
         LA    @00,1                                               0370
         AL    @00,AMDUPR(,@05)                                    0370
         ST    @00,AMDUPR(,@05)                                    0370
*                   PLHJCODE=PLHJPUT;/* PUT JRN CODE                 */
         MVI   PLHJCODE(RPLH),B'00000100'                          0371
*                 END;              /* END UPDATE STATS.             */
*               IF AMBJRN=ON THEN   /* JOURNAL EXIT                  */
@RC00363 TM    AMBJRN(RAMB),B'00000010'                            0373
         BNO   @RF00373                                            0373
*I08:                                                              0374
*                 DO;               /* IDACALL(IDATJXIT)             */
I08      DS    0H                                                  0375
*                   CALL IDATJXIT;  /* EXIT TO IDATJXIT              */
         L     @15,@CV00998                                        0375
         BALR  @14,@15                                             0375
*                   GEN(BALR @11,0);/* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                   GEN(USING *,@11);/* ESTABLISH ADDRESSING         */
         USING *,@11
*                   GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE   */
         USING *+4095,@10
*                   GEN(LA    @10,4095(@11));/* LOAD SECOND BASE     */
         LA    @10,4095(@11)
*                   GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND
*                                      BASE                          */
         L     @10,=A(@PSTART+4095)
*                   GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND
*                                      BASE                          */
         USING @PSTART+4095,@10
*                   GEN(L     @11,=A(@PSTART));/* RELOAD BASE        */
         L     @11,=A(@PSTART)
*                   GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING   */
         USING @PSTART,@11
*                 END I08;          /*                       @X04SVRQ*/
*             END;                  /* END OF INCREMENT STATS        */
*           ELSE                    /* HERE IF ERROR         @X04SVMR*/
*             IF AMBUPX=ON THEN     /* AIX UPGRADE.          @X04SVMR*/
         B     @RC00356                                            0386
@RF00356 TM    AMBUPX(RAMB),B'00000010'                            0386
         BNO   @RF00386                                            0386
*I09:                                                              0387
*               DO;                 /* IDACALL(IDA019RU)             */
I09      DS    0H                                                  0388
*                 CALL IDA019RU;    /* EXIT TO IDA019RU              */
         L     @15,@CV01005                                        0388
         BALR  @14,@15                                             0388
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE     */
         USING *+4095,@10
*                 GEN(LA    @10,4095(@11));/* LOAD SECOND BASE       */
         LA    @10,4095(@11)
*                 GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND 0393
*                                      BASE                          */
         L     @10,=A(@PSTART+4095)
*                 GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND  0394
*                                      BASE                          */
         USING @PSTART+4095,@10
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I09;            /* BACKOUT UPGRADE.      @X04SVMR*/
*         END;                      /* END OF MODIFY                 */
*       ELSE                        /* GET UPD NOT ISSUED            */
*         DO;                       /* SET ERROR CODES               */
         B     @RC00327                                            0399
@RF00327 DS    0H                                                  0400
*           RPLERREG='08'X;         /* LOGICAL ERROR                 */
         MVI   RPLERREG(RRPL),X'08'                                0400
*           RPLERRCD=RPLINUPD;      /* NO GET FOR UPDATE             */
         MVI   RPLERRCD(RRPL),X'5C'                                0401
*         END;                      /*                               */
*       CALL MODEXIT;               /* RETURN                @X04SVRQ*/
@RC00327 BAL   @14,MODEXIT                                         0403
*     END;                          /* END OF UPDATE/ERASE           */
*                                                                  0405
*   /*****************************************************************/
*   /*                                                               */
*   /* PUT ADD PROCESSING                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0405
*   IF RPLREQ=RPLPUT&RPLBWD^=ON     /* SEE IF PUT            @X04SVES*/
*     THEN                          /* YES. --ADD--                  */
@RF00325 CLI   RPLREQ(RRPL),1                                      0405
         BNE   @RF00405                                            0405
         TM    RPLBWD(RRPL),B'00010000'                            0405
         BO    @RF00405                                            0405
*     DO;                           /* INSURE VALID LENGTH           */
*       IF AMDDST='1'B THEN         /* KEYED DATA SET                */
         L     @05,AMBDSB(,RAMB)                                   0407
         TM    AMDDST(@05),B'10000000'                             0407
         BNO   @RF00407                                            0407
*         RPARM1=AMDRKP+AMDKEYLN;   /* INCLUDE KEY                   */
         LH    RPARM1,AMDRKP(,@05)                                 0408
         AH    RPARM1,AMDKEYLN(,@05)                               0408
*       ELSE                        /* EVENT SEQ.                    */
*         DO;                       /*                               */
         B     @RC00407                                            0409
@RF00407 DS    0H                                                  0410
*           RPARM1=ONE;             /* NON-ZERO                      */
         LA    RPARM1,1                                            0410
*           PLHADDTE=ON;            /* SET ADD TO END FLAG           */
         OI    PLHADDTE(RPLH),B'00010000'                          0411
*         END;                      /* END EVENT SEQ. SET UP         */
*       IF RPLRLEN>=RPARM1&         /* BIG ENOUGH, BUT               */
*           RPLRLEN^>AMDLRECL       /* NOT TOO BIG                   */
*         THEN                      /* NO.                           */
@RC00407 L     @05,RPLRLEN(,RRPL)                                  0413
         CR    @05,RPARM1                                          0413
         BL    @RF00413                                            0413
         L     @15,AMBDSB(,RAMB)                                   0413
         C     @05,AMDLRECL(,@15)                                  0413
         BH    @RF00413                                            0413
*         DO;                       /*                               */
*           IF RPLSEQ=ON×AMBCREAT=ON/* SEQUENTIAL REQUEST            */
*             THEN                  /* OR CREATE                     */
         TM    RPLSEQ(RRPL),B'00100000'                            0415
         BO    @RT00415                                            0415
         TM    AMBCREAT(RAMB),B'10000000'                          0415
         BNO   @RF00415                                            0415
@RT00415 DS    0H                                                  0416
*             CALL SQICHECK;        /* CHECK CURRENT STATUS          */
         BAL   @14,SQICHECK                                        0416
*           ELSE                    /* DIR OR SKP, NON-CREATE        */
*             DO;                   /* DIRECT INSERT REQUEST         */
         B     @RC00415                                            0417
@RF00415 DS    0H                                                  0418
*               IF RPLKEY=OFF       /* KEYED REQUEST                 */
*                 THEN              /* NO.                           */
         TM    RPLKEY(RRPL),B'10000000'                            0418
         BNZ   @RF00418                                            0418
*                 CALL GETINCI;     /* GET EOD CI.                   */
         BAL   @14,GETINCI                                         0419
*               ELSE                /* CALL DIR. RECORD LOCATE       */
*                 DO;               /* YES.                          */
         B     @RC00418                                            0420
@RF00418 DS    0H                                                  0421
*                   RPARM1=RPLAREA+AMDRKP;/* POINT TO SEARCH ARG     */
         L     @05,AMBDSB(,RAMB)                                   0421
         LH    RPARM1,AMDRKP(,@05)                                 0421
         AL    RPARM1,RPLAREA(,RRPL)                               0421
*I10:                                                              0422
*                   DO;             /* IDACALL(IDA019RA)             */
I10      DS    0H                                                  0423
*                     CALL IDA019RA;/* EXIT TO IDA019RA              */
         L     @15,@CV01000                                        0423
         BALR  @14,@15                                             0423
*                     GEN(BALR @11,0);/* LOAD ADDR OF REENTRY        */
         BALR @11,0
*                     GEN(USING *,@11);/* ESTABLISH ADDRESSING       */
         USING *,@11
*                     GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE */
         USING *+4095,@10
*                     GEN(LA    @10,4095(@11));/* LOAD SECOND BASE   */
         LA    @10,4095(@11)
*                     GEN(L     @10,=A(@PSTART+4095));/* RELOAD    0428
*                                      SECOND BASE                   */
         L     @10,=A(@PSTART+4095)
*                     GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND
*                                      BASE                          */
         USING @PSTART+4095,@10
*                     GEN(L     @11,=A(@PSTART));/* RELOAD BASE      */
         L     @11,=A(@PSTART)
*                     GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING */
         USING @PSTART,@11
*                   END I10;        /*                       @X04SVRQ*/
*                 END;              /* END OF KEYED REQUEST          */
*             END;                  /* END OF DIRECT INS. SETUP      */
@RC00418 DS    0H                                                  0435
*           IF RPLERREG='00'X       /* ERROR                         */
*             THEN                  /* NO.                           */
@RC00415 CLI   RPLERREG(RRPL),0                                    0435
         BNE   @RF00435                                            0435
*             DO;                   /*                               */
*               IF AMDDST='1'B THEN /* IF KSDS               @X04SVMR*/
         L     @05,AMBDSB(,RAMB)                                   0437
         TM    AMDDST(@05),B'10000000'                             0437
         BNO   @RF00437                                            0437
*                 DO;               /*                       @X04SVMR*/
*                   IF AMBUPX=ON THEN/* AIX UPGRADE          @X04SVMR*/
         TM    AMBUPX(RAMB),B'00000010'                            0439
         BNO   @RF00439                                            0439
*                     DO;           /*                       @X04SVMR*/
*I11:                                                              0441
*                       DO;         /* IDACALL(IDA019RU)             */
I11      DS    0H                                                  0442
*                         CALL IDA019RU;/* EXIT TO IDA019RU          */
         L     @15,@CV01005                                        0442
         BALR  @14,@15                                             0442
*                         GEN(BALR @11,0);/* LOAD ADDR OF REENTRY    */
         BALR @11,0
*                         GEN(USING *,@11);/* ESTABLISH ADDRESSING   */
         USING *,@11
*                         GEN(USING *+4095,@10);/* ESTABLISH SECOND
*                                      BASE                          */
         USING *+4095,@10
*                         GEN(LA    @10,4095(@11));/* LOAD SECOND  0446
*                                      BASE                          */
         LA    @10,4095(@11)
*                         GEN(L     @10,=A(@PSTART+4095));/* RELOAD
*                                      SECOND BASE                   */
         L     @10,=A(@PSTART+4095)
*                         GEN(USING @PSTART+4095,@10);/* ESTABLISH 0448
*                                      SECOND BASE                   */
         USING @PSTART+4095,@10
*                         GEN(L     @11,=A(@PSTART));/* RELOAD BASE  */
         L     @11,=A(@PSTART)
*                         GEN(USING @PSTART,@11);/* ESTABLISH      0450
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                       END I11;    /* CALL AIX UPGRADE.     @X04SVMR*/
*                       IF RPLERREG^='00'X THEN/* ERROR.     @X04SVMR*/
         CLI   RPLERREG(RRPL),0                                    0452
         BE    @RF00452                                            0452
*                         DO;       /*                       @X04SVMR*/
*                           PLHRSTRT=ON;/* POSITION NO GOOD  @X04SVMR*/
         OI    PLHRSTRT(RPLH),B'10000000'                          0454
*                           CALL MODEXIT;/* RETURN.          @X04SVMR*/
         BAL   @14,MODEXIT                                         0455
*                         END;      /* END, AIX ERROR        @X04SVMR*/
*                     END;          /*                       @X04SVMR*/
@RF00452 DS    0H                                                  0458
*                 END;              /* END OF KSDS CODE      @X04SVMR
*                                      CALL DATA INSERT              */
@RF00439 DS    0H                                                  0459
*I12:                                                              0459
*               DO;                 /* IDACALL(IDA019RM)             */
@RF00437 DS    0H                                                  0459
I12      DS    0H                                                  0460
*                 CALL IDA019RM;    /* EXIT TO IDA019RM              */
         L     @15,@CV01004                                        0460
         BALR  @14,@15                                             0460
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE     */
         USING *+4095,@10
*                 GEN(LA    @10,4095(@11));/* LOAD SECOND BASE       */
         LA    @10,4095(@11)
*                 GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND 0465
*                                      BASE                          */
         L     @10,=A(@PSTART+4095)
*                 GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND  0466
*                                      BASE                          */
         USING @PSTART+4095,@10
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I12;            /* MACRO                 @X04SVRQ*/
*               IF AMDDST^='1'B THEN/* ESDS.                 @X04SVRQ*/
         L     @05,AMBDSB(,RAMB)                                   0470
         TM    AMDDST(@05),B'10000000'                             0470
         BO    @RF00470                                            0470
*                 DIWATV=ZERO;      /* UNLOCK DIWA.          @X04SVRQ*/
         L     @05,AMBIWA(,RAMB)                                   0471
         MVI   DIWATV(@05),X'00'                                   0471
*               IF RPLERREG='00'X   /* ERROR                         */
*                 THEN              /* NO.                           */
@RF00470 CLI   RPLERREG(RRPL),0                                    0472
         BNE   @RF00472                                            0472
*                 DO;               /*                               */
*                   PLHUPD=OFF;     /* RESET GET UPD FLAG    @X04SVRQ*/
         NI    PLHUPD(RPLH),B'01111111'                            0474
*                   AMDNLR=AMDNLR+ONE;/* ADD 1 TO NO. OF RECORDS     */
         L     @05,AMBDSB(,RAMB)                                   0475
         LA    @15,1                                               0475
         L     @00,AMDNLR(,@05)                                    0475
         ALR   @00,@15                                             0475
         ST    @00,AMDNLR(,@05)                                    0475
*                   PLHRCODE=RPLREQ;/* SET CURRENT REQ       @OX04283
*                                      TYPE IN PLH           @OX04283*/
         IC    @00,RPLREQ(,RRPL)                                   0476
         STC   @00,PLHRCODE(,RPLH)                                 0476
*                   IF PLHADDTE=OFF THEN/* IF NOT ADD-TO-END         */
         TM    PLHADDTE(RPLH),B'00010000'                          0477
         BNZ   @RF00477                                            0477
*                     AMDIREC=AMDIREC+ONE;/* ADD 1 TO INSERTS        */
         AL    @15,AMDIREC(,@05)                                   0478
         ST    @15,AMDIREC(,@05)                                   0478
*                   IF^(RPLDIR=ON&  /* NOT DIRECT            @ZA07537*/
*                       RPLNSP=OFF)&/* AND NSP               @ZA07537*/
*                       AMDDST='1'B THEN/* KSDS              @ZA07537*/
@RF00477 TM    RPLDIR(RRPL),B'01000000'                            0479
         BNO   @GL00017                                            0479
         TM    RPLNSP(RRPL),B'00000001'                            0479
         BZ    @RF00479                                            0479
@GL00017 L     @05,AMBDSB(,RAMB)                                   0479
         TM    AMDDST(@05),B'10000000'                             0479
         BNO   @RF00479                                            0479
*                     CALL MOVEKEY; /* MOVE KEY IN PLH       @ZA07537*/
         BAL   @14,MOVEKEY                                         0480
*                   IF AMBJRN=ON THEN/* JOURNAL EXIT                 */
@RF00479 TM    AMBJRN(RAMB),B'00000010'                            0481
         BNO   @RF00481                                            0481
*                     DO;           /* YES.                          */
*                       PLHJCODE=PLHJPUT;/* PUT JRN CODE             */
         MVI   PLHJCODE(RPLH),B'00000100'                          0483
*I13:                                                              0484
*                       DO;         /* IDACALL(IDATJXIT)             */
I13      DS    0H                                                  0485
*                         CALL IDATJXIT;/* EXIT TO IDATJXIT          */
         L     @15,@CV00998                                        0485
         BALR  @14,@15                                             0485
*                         GEN(BALR @11,0);/* LOAD ADDR OF REENTRY    */
         BALR @11,0
*                         GEN(USING *,@11);/* ESTABLISH ADDRESSING   */
         USING *,@11
*                         GEN(USING *+4095,@10);/* ESTABLISH SECOND
*                                      BASE                          */
         USING *+4095,@10
*                         GEN(LA    @10,4095(@11));/* LOAD SECOND  0489
*                                      BASE                          */
         LA    @10,4095(@11)
*                         GEN(L     @10,=A(@PSTART+4095));/* RELOAD
*                                      SECOND BASE                   */
         L     @10,=A(@PSTART+4095)
*                         GEN(USING @PSTART+4095,@10);/* ESTABLISH 0491
*                                      SECOND BASE                   */
         USING @PSTART+4095,@10
*                         GEN(L     @11,=A(@PSTART));/* RELOAD BASE  */
         L     @11,=A(@PSTART)
*                         GEN(USING @PSTART,@11);/* ESTABLISH      0493
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                       END I13;    /*                       @X04SVRQ*/
*                     END;          /* END JOURNAL EXIT              */
*                 END;              /* END OF POST DATA INSERT       */
*               ELSE                /* HERE IF ERROR         @X04SVMR*/
*                 DO;               /*                       @ZA07544*/
         B     @RC00472                                            0497
@RF00472 DS    0H                                                  0498
*                   IF RPLERREG='08'X&/* IF LOGICAL          @ZA07544*/
*                       (RPLERRCD=RPLEXCL)/* ERROR THEN      @ZA07544*/
*                     THEN          /* MAY NOT               @ZA07544*/
         CLI   RPLERREG(RRPL),8                                    0498
         BNE   @RF00498                                            0498
         CLI   RPLERRCD(RRPL),20                                   0498
         BNE   @RF00498                                            0498
*                     PLHINVAL=ON;  /* KNOW POSITION         @ZA07544*/
         OI    PLHINVAL(RPLH),B'00000010'                          0499
*                   IF AMBUPX=ON&   /* AIX UPGRADE           @X04SVMR*/
*                       AMDDST='1'B THEN/* AND KSDS          @X04SVMR*/
@RF00498 TM    AMBUPX(RAMB),B'00000010'                            0500
         BNO   @RF00500                                            0500
         L     @05,AMBDSB(,RAMB)                                   0500
         TM    AMDDST(@05),B'10000000'                             0500
         BNO   @RF00500                                            0500
*I14:                                                              0501
*                     DO;           /* IDACALL(IDA019RU)             */
I14      DS    0H                                                  0502
*                       CALL IDA019RU;/* EXIT TO IDA019RU            */
         L     @15,@CV01005                                        0502
         BALR  @14,@15                                             0502
*                       GEN(BALR @11,0);/* LOAD ADDR OF REENTRY      */
         BALR @11,0
*                       GEN(USING *,@11);/* ESTABLISH ADDRESSING     */
         USING *,@11
*                       GEN(USING *+4095,@10);/* ESTABLISH SECOND  0505
*                                      BASE                          */
         USING *+4095,@10
*                       GEN(LA    @10,4095(@11));/* LOAD SECOND BASE */
         LA    @10,4095(@11)
*                       GEN(L     @10,=A(@PSTART+4095));/* RELOAD  0507
*                                      SECOND BASE                   */
         L     @10,=A(@PSTART+4095)
*                       GEN(USING @PSTART+4095,@10);/* ESTABLISH   0508
*                                      SECOND BASE                   */
         USING @PSTART+4095,@10
*                       GEN(L     @11,=A(@PSTART));/* RELOAD BASE    */
         L     @11,=A(@PSTART)
*                       GEN(USING @PSTART,@11);/* ESTABLISH        0510
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                     END I14;      /* BACKOUT UPGRADE.      @X04SVMR*/
*                 END;              /* END INSERT ERR        @ZA07544*/
@RF00500 DS    0H                                                  0513
*             END;                  /* END OF VALID ADD              */
@RC00472 DS    0H                                                  0514
*           IF RPLDIR=ON&           /* IF POSITION           @OZ05215*/
*               RPLNSP=OFF THEN     /* NOT NEEDED,           @OZ05215*/
@RF00435 TM    RPLDIR(RRPL),B'01000000'                            0514
         BNO   @RF00514                                            0514
         TM    RPLNSP(RRPL),B'00000001'                            0514
         BNZ   @RF00514                                            0514
*             CALL RLSEBUFS;        /* GET RID OF BFR        @X04SVMR*/
         BAL   @14,RLSEBUFS                                        0515
*         END;                      /*                               */
*       ELSE                        /* ERROR                         */
*         DO;                       /* REC LEN > AMDSB LRECL         */
         B     @RC00413                                            0517
@RF00413 DS    0H                                                  0518
*           RPLERREG='08'X;         /* LOGICAL ERROR                 */
         MVI   RPLERREG(RRPL),X'08'                                0518
*           RPLERRCD=RPLINLEN;      /* RECORD TOO LONG               */
         MVI   RPLERRCD(RRPL),X'6C'                                0519
*         END;                      /*                               */
*     END;                          /*                               */
*   ELSE                            /*                               */
*     DO;                           /*                               */
         B     @RC00405                                            0522
@RF00405 DS    0H                                                  0523
*       RPLERREG='08'X;             /* LOGICAL ERROR                 */
         MVI   RPLERREG(RRPL),X'08'                                0523
*       IF RPLREQ=RPLPUT THEN       /* PUT REQUEST           @X04SVES*/
         CLI   RPLREQ(RRPL),1                                      0524
         BNE   @RF00524                                            0524
*         RPLERRCD=RPLPUTBK;        /* YES, SET CODE         @X04SVES*/
         MVI   RPLERRCD(RRPL),X'CC'                                0525
*       ELSE                        /*                       @X04SVES*/
*         RPLERRCD=RPLINVP;         /* INVALID REQUEST TYPE          */
         B     @RC00524                                            0526
@RF00524 MVI   RPLERRCD(RRPL),X'68'                                0526
*     END;                          /*                               */
@RC00524 DS    0H                                                  0528
*   CALL MODEXIT;                   /* RETURN                @X04SVRQ*/
@RC00405 BAL   @14,MODEXIT                                         0528
*                                                                  0529
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE KEY ROUTINE ---                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0529
*MOVEKEY:                                                          0529
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);/* THIS ROUTINE MOVES THE KEY
*                                      FROM THE DATA RECORD RESIDING
*                                      IN THE AREA LOCATED VIA     0529
*                                      RPLAREA INTO THE PLH          */
         B     @PB00002                                            0529
MOVEKEY  DS    0H                                                  0530
*   RESPECIFY                                                      0530
*    (RWORK1,                                                      0530
*     RWORK2,                                                      0530
*     R14) RESTRICTED;                                             0530
*   RWORK1=AMDKEYLN;                /* PICK UP KEY LENGTH            */
         L     @15,AMBDSB(,RAMB)                                   0531
         LH    RWORK1,AMDKEYLN(,@15)                               0531
*   IF RPLREQ=RPLGET&               /* GET                           */
*       RPLLOC=ON THEN              /* LOCATE REQUEST                */
         CLI   RPLREQ(RRPL),0                                      0532
         BNE   @RF00532                                            0532
         TM    RPLLOC(RRPL),B'10000000'                            0532
         BNO   @RF00532                                            0532
*     RWORK2=PLHRECP+AMDRKP;        /* POINT WITHIN BUFFER           */
         LH    RWORK2,AMDRKP(,@15)                                 0533
         AL    RWORK2,PLHRECP(,RPLH)                               0533
*   ELSE                            /* NOT GET LOCATE                */
*     RWORK2=RPLAREA+AMDRKP;        /* POINT TO KEY IN AREA          */
         B     @RC00532                                            0534
@RF00532 L     @15,AMBDSB(,RAMB)                                   0534
         LH    RWORK2,AMDRKP(,@15)                                 0534
         AL    RWORK2,RPLAREA(,RRPL)                               0534
*   PLHKEY(1:RWORK1)=RWORK2->KEY(1:RWORK1);/* MOVE KEY TO PLH      0535
*                                                            @X04SVES*/
@RC00532 L     @15,PLHKEYPT(,RPLH)                                 0535
         LR    @07,RWORK1                                          0535
         BCTR  @07,0                                               0535
         EX    @07,@SM01187                                        0535
*   RETURN;                         /* RETURN TO CALLER              */
@EL00002 DS    0H                                                  0536
@EF00002 DS    0H                                                  0536
@ER00002 BR    @14                                                 0536
*   RESPECIFY                                                      0537
*    (RWORK1,                                                      0537
*     RWORK2,                                                      0537
*     R14) UNRESTRICTED;                                           0537
*   END MOVEKEY;                    /* END OF MOVE KEY PROC.         */
*                                                                  0539
*   /*****************************************************************/
*   /*                                                               */
*   /* ADVANCE PLACEHOLDER TO NEXT RECORD POSITION                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0539
*ADVPLH:                                                           0539
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);                             0539
ADVPLH   DS    0H                                                  0540
*   IF RPLBWD=ON THEN               /* IS BACKWARD DIRECTION       0540
*                                      SPECIFIED             @X04SVES*/
         TM    RPLBWD(RRPL),B'00010000'                            0540
         BNO   @RF00540                                            0540
*     DO;                           /* YES                   @X04SVES*/
*       IF PLHBWD=OFF THEN          /* WAS PREVIOUS DIRECTION FORWARD
*                                                            @X04SVES*/
         TM    PLHBWD(RPLH),B'00010000'                            0542
         BNZ   @RF00542                                            0542
*         DO;                       /* YES, ERROR            @X04SVES*/
*           RPLERREG='08'X;         /* SET LOGICAL ERROR     @X04SVES*/
         MVI   RPLERREG(RRPL),X'08'                                0544
*           RPLERRCD=RPLNOPTR;      /* SET NO POSITIONING    @X04SVES*/
         MVI   RPLERRCD(RRPL),X'58'                                0545
*           RETURN;                 /* RETURN TO CALLER      @X04SVES*/
@EL00003 DS    0H                                                  0546
@EF00003 DS    0H                                                  0546
@ER00003 BR    @14                                                 0546
*         END;                      /*                       @X04SVES*/
*       GEN(IDASVR14);              /* SAVE RETURN ADDRESS   @X04SVES*/
@RF00542 DS    0H                                                  0548
         IDASVR14
*       RESPECIFY                                                  0549
*         R14 UNRSTD;               /*                       @X04SVES*/
*I15:                                                              0550
*       DO;                         /* IDACALL(IDAADVPH)             */
I15      DS    0H                                                  0551
*         CALL IDAADVPH;            /* EXIT TO IDAADVPH              */
         L     @15,@CV00990                                        0551
         BALR  @14,@15                                             0551
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(USING *+4095,@10);    /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*         GEN(LA    @10,4095(@11)); /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*         GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE      */
         L     @10,=A(@PSTART+4095)
*         GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE       */
         USING @PSTART+4095,@10
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I15;                    /* ADVANCE PLH           @X04SVES*/
*       CALL EXIT;                  /* RETURN                @X04SVES*/
         BAL   @14,EXIT                                            0561
*     END;                          /* END OF BCKWARD        @X04SVES*/
*   ELSE                            /* FORWARD               @X04SVES*/
*     DO;                           /*                       @X04SVES*/
         B     @RC00540                                            0563
@RF00540 DS    0H                                                  0564
*       RESPECIFY                                                  0564
*         R14 RSTD;                 /*                               */
*       IF PLHBWD=ON THEN           /* WAS PREVIOUS DIRECTION      0565
*                                      BACKWARD              @X04SVES*/
         TM    PLHBWD(RPLH),B'00010000'                            0565
         BNO   @RF00565                                            0565
*         DO;                       /* YES, ERROR            @X04SVES*/
*           RPLERREG='08'X;         /* SET LOGICAL ERROR     @X04SVES*/
         MVI   RPLERREG(RRPL),X'08'                                0567
*           RPLERRCD=RPLNOPTR;      /* SET NO POSITIONING    @X04SVES*/
         MVI   RPLERRCD(RRPL),X'58'                                0568
*           RETURN;                 /* RETURN TO CALLER      @X04SVES*/
         B     @EL00003                                            0569
*         END;                      /*                       @X04SVES*/
*     END;                          /*                       @X04SVES*/
@RF00565 DS    0H                                                  0572
*   IF PLHSKPER=OFF                 /* READ SKIP FLAG OFF            */
*     THEN                          /* YES.                          */
@RC00540 TM    PLHSKPER(RPLH),B'00100000'                          0572
         BNZ   @RF00572                                            0572
*     DO;                           /*                               */
*       PLHRECP=PLHRECP+PLHLRECL;   /* ADVANCE RECORD POINTER        */
         L     @15,PLHRECP(,RPLH)                                  0574
         AL    @15,PLHLRECL(,RPLH)                                 0574
         ST    @15,PLHRECP(,RPLH)                                  0574
*       IF PLHRECP<PLHFSP           /* END OF BLOCK                  */
*         THEN                      /* NO.                           */
         C     @15,PLHFSP(,RPLH)                                   0575
         BNL   @RF00575                                            0575
*         DO;                       /*                               */
*           IF PLHRDFC>ONE          /* END OF RECORD GROUP           */
*             THEN                  /* NO.                           */
         LH    @15,PLHRDFC(,RPLH)                                  0577
         C     @15,@CF00054                                        0577
         BNH   @RF00577                                            0577
*             DO;                   /* DECREMENT COUNT OF            */
*               PLHRDFC=PLHRDFC-ONE;/* REMAINING RECORDS             */
         BCTR  @15,0                                               0579
         STH   @15,PLHRDFC(,RPLH)                                  0579
*               RETURN;             /* RETURN TO CALLER              */
         B     @EL00003                                            0580
*             END;                  /* END OF INNER GROUP ADV        */
*           RESPECIFY                                              0582
*             RWORK2 RSTD;          /*                       @X04SVES*/
@RF00577 DS    0H                                                  0583
*           RWORK2=PLHRDFP;         /* PICK UP RDF POINTER           */
         L     RWORK2,PLHRDFP(,RPLH)                               0583
*           IF PLHRDFC=ONE          /* MOVE TO NEXT RDF              */
*             THEN                  /* YES.                          */
         CLC   PLHRDFC(2,RPLH),@CH00054                            0584
         BNE   @RF00584                                            0584
*             RWORK2=RWORK2-LENGTH(IDARDF);/* NEXT RDF               */
         SL    RWORK2,@CF00158                                     0585
*           PLHLRECL=RWORK2->RDFLL; /* PUT RECORD LENGTH (PLH)       */
@RF00584 SLR   @15,@15                                             0586
         ICM   @15,3,RDFLL(RWORK2)                                 0586
         ST    @15,PLHLRECL(,RPLH)                                 0586
*           IF RWORK2->RDFCTNU=ON   /* GROUP RDF                     */
*             THEN                  /* YES.                          */
         TM    RDFCTNU(RWORK2),B'01000000'                         0587
         BNO   @RF00587                                            0587
*             DO;                   /*                               */
*               RWORK2=RWORK2-LENGTH(IDARDF);/* MOVE TO COUNT RDF    */
         SL    RWORK2,@CF00158                                     0589
*               PLHRDFC=RWORK2->RDFLL;/* PUT RECORD COUNT (PLH)      */
         MVC   PLHRDFC(2,RPLH),RDFLL(RWORK2)                       0590
*             END;                  /* END OF GROUP INITIALIZE       */
*           ELSE                    /* NOT A GROUP RDF               */
*             PLHRDFC=ONE;          /* SET SINGLE RECORD COUNT       */
         B     @RC00587                                            0592
@RF00587 MVC   PLHRDFC(2,RPLH),@CH00054                            0592
*           PLHRDFP=RWORK2;         /* SET NEW RDF POINTER           */
@RC00587 ST    RWORK2,PLHRDFP(,RPLH)                               0593
*           RETURN;                 /* RETURN TO CALLER              */
         B     @EL00003                                            0594
*         END;                      /* END OF IN BUF ADVANCE         */
*       ELSE                        /* END OF BUFFER                 */
*         DO;                       /*                               */
@RF00575 DS    0H                                                  0597
*           IF RPLREQ=RPLPUT THEN   /* FOR PUT REQUEST               */
         CLI   RPLREQ(RRPL),1                                      0597
         BE    @RT00597                                            0597
*             RETURN;               /* RETURN                        */
*         END;                      /*                               */
*     END;                          /* END OF NON-SKIP PROCESS       */
*   GEN(IDASVR14);                  /* SAVE R14              @X04SVES*/
@RF00572 DS    0H                                                  0601
         IDASVR14
*   RESPECIFY                                                      0602
*     R14 UNRSTD;                   /*                       @X04SVES*/
*   IF PLHASKBF=ON THEN             /* ASK BUFFER ON         @X04SVRQ*/
         TM    PLHASKBF(RPLH),B'00100000'                          0603
         BNO   @RF00603                                            0603
*     DO;                           /*                       @X04SVRQ*/
*       RPARM1=ZERO;                /* ADD MAX NO BFR        @X04SVRQ*/
         SLR   RPARM1,RPARM1                                       0605
*I16:                                                              0606
*       DO;                         /* IDACALL(IDAABF)               */
I16      DS    0H                                                  0607
*         CALL IDAABF;              /* EXIT TO IDAABF                */
         L     @15,@CV00989                                        0607
         BALR  @14,@15                                             0607
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(USING *+4095,@10);    /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*         GEN(LA    @10,4095(@11)); /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*         GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE      */
         L     @10,=A(@PSTART+4095)
*         GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE       */
         USING @PSTART+4095,@10
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I16;                    /* CALL ADD BFR          @X04SVRQ*/
*     END;                          /*                       @X04SVRQ*/
*   IF RPLUPD=ON                    /* COMMON, UPDATE REQUEST        */
*     THEN                          /* YES.                          */
@RF00603 TM    RPLUPD(RRPL),B'00000010'                            0618
         BNO   @RF00618                                            0618
*     PLHRDEXC=ON;                  /* SET READ EXCL FLAG PLH        */
         OI    PLHRDEXC(RPLH),B'00001000'                          0619
*   ELSE                            /* NOT UPDATE REQUEST            */
*     PLHRDEXC=OFF;                 /* DO NOT NEED EXCL CTL          */
         B     @RC00618                                            0620
@RF00618 NI    PLHRDEXC(RPLH),B'11110111'                          0620
*   PLHSKPER=OFF;                   /*                       @X04SVES*/
@RC00618 NI    PLHSKPER(RPLH),B'11011111'                          0621
*GETNXBF:                           /* GET NEXT BUFFER               */
*   PLHRAE=ON;                      /* ASSUME POSITIONED TO PLHKEY 0622
*                                                            @ZA14811*/
GETNXBF  OI    PLHRAE(RPLH),B'00000010'                            0622
*   IF AMBGSR=OFF&AMBLSR=OFF&       /* SHR RESOURCE.         @ZA10847*/
*       RPLKEY=ON&                  /* KEYED REQUEST         @ZA10847*/
*       PLHIBUFC->BUFCRRD=ON THEN   /* AND READ REQ          @ZA10847*/
         TM    AMBGSR(RAMB),B'01100000'                            0623
         BNZ   @RF00623                                            0623
         TM    RPLKEY(RRPL),B'10000000'                            0623
         BNO   @RF00623                                            0623
         L     @07,PLHIBUFC(,RPLH)                                 0623
         TM    BUFCRRD(@07),B'00100000'                            0623
         BNO   @RF00623                                            0623
*     DO;                           /* CALL 19RA             @ZA10847*/
*       PLHNOADV=ON;                /* NO ADVANCE            @XA05682*/
*                                                                  0625
         OI    PLHNOADV(RPLH),B'00001000'                          0625
*       /*************************************************************/
*       /*                                                           */
*       /* CALL SCANDATA TO VALIDATE INDEX AND TO POSITION TO PLHKEY.*/
*       /* IF PLHKEY FOUND, PLHRAE=ON. IF KEY GREATER THAN PLHKEY IS */
*       /* FOUND, PLHRAE=OFF. NOTE..... IF PLHRAE=OFF THEN THE PLH IS*/
*       /* POSITIONED AT THE NEXT RECORD IN THE NEXT CI      @ZA14811*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0626
*       CALL SCANDATA;              /* CALL 19RA             @XA05682*/
         BAL   @14,SCANDATA                                        0626
*       PLHNOADV=OFF;               /* NOADV OFF             @XA05682*/
         NI    PLHNOADV(RPLH),B'11110111'                          0627
*       IF RPLERREG^='00'X THEN     /* ERROR?                @XA05682*/
         CLI   RPLERREG(RRPL),0                                    0628
         BE    @RF00628                                            0628
*         CALL EXIT;                /* RETURN.               @X04SVRQ*/
         BAL   @14,EXIT                                            0629
*     END;                          /* END CALL RA           @XA05682*/
@RF00628 DS    0H                                                  0631
*   RBUFC=PLHDBUFC;                 /* POINT TO CURRENT BUFC         */
@RF00623 L     RBUFC,PLHDBUFC(,RPLH)                               0631
*   IF PLHRAE=ON THEN               /* STILL POSITIONED AT PLHKEY  0632
*                                                            @ZA14811*/
         TM    PLHRAE(RPLH),B'00000010'                            0632
         BNO   @RF00632                                            0632
*     DO;                           /*                       @ZA07562
*                                      CALL FREE BUFFER              */
*I17:                                                              0634
*       DO;                         /* IDACALL(IDAFREEB)             */
I17      DS    0H                                                  0635
*         CALL IDAFREEB;            /* EXIT TO IDAFREEB              */
         L     @15,@CV00993                                        0635
         BALR  @14,@15                                             0635
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(USING *+4095,@10);    /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*         GEN(LA    @10,4095(@11)); /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*         GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE      */
         L     @10,=A(@PSTART+4095)
*         GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE       */
         USING @PSTART+4095,@10
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I17;                    /* MACRO                 @X04SVRQ
*                                      CALL GET NEXT CINV            */
*I18:                                                              0645
*       DO;                         /* IDACALL(IDAGNXT)              */
I18      DS    0H                                                  0646
*         CALL IDAGNXT;             /* EXIT TO IDAGNXT               */
         L     @15,@CV00995                                        0646
         BALR  @14,@15                                             0646
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(USING *+4095,@10);    /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*         GEN(LA    @10,4095(@11)); /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*         GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE      */
         L     @10,=A(@PSTART+4095)
*         GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE       */
         USING @PSTART+4095,@10
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I18;                    /* MACRO                 @X04SVRQ*/
*     END;                          /*                       @ZA07562*/
*   RESPECIFY                                                      0657
*    (RWORK1,                                                      0657
*     RWORK2) RESTRICTED;                                          0657
@RF00632 DS    0H                                                  0658
*   IF RPLERREG='00'X               /* BUFFER MGR ERROR              */
*     THEN                          /* NO.                           */
         CLI   RPLERREG(RRPL),0                                    0658
         BNE   @RF00658                                            0658
*     DO;                           /*                               */
*       RPARM1=RBUFC->BUFCBAD;      /* POINT TO START OF BUF         */
         L     RPARM1,BUFCBAD(,RBUFC)                              0660
*       RWORK1=RPARM1+AMDCINV       /* POINT TO CIDF IN              */
*           -LENGTH(IDACIDF);       /* BUFFER                        */
*                                                                  0661
         L     @07,AMBDSB(,RAMB)                                   0661
         LR    RWORK1,RPARM1                                       0661
         AL    RWORK1,AMDCINV(,@07)                                0661
         SL    RWORK1,@CF00068                                     0661
*       /*************************************************************/
*       /*                                                           */
*       /* VALIDATE THE CIDF BEFORE PROCESSING               @ZA31009*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0662
*       IF RWORK1->IDACIDF=ZERO THEN/* IF CIDF IS ZERO,      @ZA31009*/
         ICM   @07,15,IDACIDF(RWORK1)                              0662
         BNZ   @RF00662                                            0662
*         DO;                       /* TREAT IT LIKE A DATA READ   0663
*                                      ERROR.                @ZA31009*/
*           PLHSKPER=ON;            /* CAUSE NEXT GET SEQ TO SKIP CI.
*                                                            @ZA31009*/
         OI    PLHSKPER(RPLH),B'00100000'                          0664
*           RPLERREG='08'X;         /* INDICATE A LOGICAL ERROR.   0665
*                                                            @ZA31009*/
         MVI   RPLERREG(RRPL),X'08'                                0665
*           RPLERRCD=RPLINCNV;      /* SET INVALID CI ERROR CODE.  0666
*                                                            @ZA31009*/
         MVI   RPLERRCD(RRPL),X'9C'                                0666
*           RPLDDDD=RBUFC->BUFCDDDD;/* PASS BACK RBA IN ERR  @ZA31009*/
         L     @07,BUFCDDDD(,RBUFC)                                0667
         ST    @07,RPLDDDD(,RRPL)                                  0667
*           CALL EXIT;              /* EXIT FROM ADVPLH.     @ZA31009*/
         BAL   @14,EXIT                                            0668
*         END;                      /* END OF ERROR DETECTION GROUP.
*                                                            @ZA31009*/
*       IF RWORK1->CIDFBUSY=ON THEN /* WAS CI SPLIT INTERRUPTED    0670
*                                                            @ZA31009*/
@RF00662 TM    CIDFBUSY(RWORK1),B'10000000'                        0670
         BNO   @RF00670                                            0670
*         DO;                       /* YES IT WAS, TRY TO CORRECT IT.
*                                                            @ZA31009*/
*I19:                                                              0672
*           DO;                     /* IDACALL(IDA019S6)             */
I19      DS    0H                                                  0673
*             CALL IDA019S6;        /* EXIT TO IDA019S6              */
         L     @15,@CV01002                                        0673
         BALR  @14,@15                                             0673
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*             GEN(LA    @10,4095(@11));/* LOAD SECOND BASE           */
         LA    @10,4095(@11)
*             GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE  */
         L     @10,=A(@PSTART+4095)
*             GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE   */
         USING @PSTART+4095,@10
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I19;                /* INVOKE CI REBUILD     @ZA31009*/
*           IF RPLERREG^=ZERO THEN  /* DID REBUILD WORK?     @ZA31009*/
         CLI   RPLERREG(RRPL),0                                    0683
         BE    @RF00683                                            0683
*             CALL EXIT;            /* NO IT FAILED, TAKE EXIT.    0684
*                                                            @ZA31009*/
         BAL   @14,EXIT                                            0684
*           RPARM1=PLHDBUFC->BUFCBAD;/* PT TO START OF BUF   @ZA31009*/
@RF00683 L     @07,PLHDBUFC(,RPLH)                                 0685
         L     RPARM1,BUFCBAD(,@07)                                0685
*           RWORK1=RPARM1+AMDCINV   /* POINT TO CIDF IN      @ZA31009*/
*               -LENGTH(IDACIDF);   /* BUFFER                @ZA31009*/
         L     @07,AMBDSB(,RAMB)                                   0686
         LR    RWORK1,RPARM1                                       0686
         AL    RWORK1,AMDCINV(,@07)                                0686
         SL    RWORK1,@CF00068                                     0686
*         END;                      /* END OF SPLIT INTERRUPTION   0687
*                                      DETECTION GROUP       @ZA31009*/
*       RWORK2=RWORK1               /* POINT TO FIRST RDF            */
*           -LENGTH(IDARDF);        /* IN BUFFER                     */
@RF00670 LA    @15,3                                               0688
         LR    RWORK2,RWORK1                                       0688
         SLR   RWORK2,@15                                          0688
*       RBUFC=RPARM1+RWORK1->CIDFOSET;/* POINT TO FREE SPACE         */
         LR    RBUFC,RPARM1                                        0689
         AH    RBUFC,CIDFOSET(,RWORK1)                             0689
*       IF RBUFC^>RPARM1×RWORK2->RDFNOT1=ON THEN/* END OF DATA IN  0690
*                                      BUFFER OR NOT 1ST SEGMENT OF
*                                      SPANNED RECD          @X04SVES*/
         CR    RBUFC,RPARM1                                        0690
         BNH   @RT00690                                            0690
         TM    RDFNOT1(RWORK2),B'00100000'                         0690
         BO    @RT00690                                            0690
*         GO TO GETNXBF;            /* YES, GET NEXT BUFFER          */
*       PLHFSP=RBUFC;               /* SET FREE SPACE PTR            */
         ST    RBUFC,PLHFSP(,RPLH)                                 0692
*       PLHRECP=RPARM1;             /* SET RECORD PTR                */
         ST    RPARM1,PLHRECP(,RPLH)                               0693
*       PLHLRECL=RWORK2->RDFLL;     /* PUT RECORD LTH IN PLH         */
         SLR   @07,@07                                             0694
         ICM   @07,3,RDFLL(RWORK2)                                 0694
         ST    @07,PLHLRECL(,RPLH)                                 0694
*       IF RWORK2->RDFCTNU=ON       /* START OF GROUP                */
*         THEN                      /* YES.                          */
         TM    RDFCTNU(RWORK2),B'01000000'                         0695
         BNO   @RF00695                                            0695
*         DO;                       /*                               */
*           RWORK2=RWORK2-LENGTH(IDARDF);/* MOVE TO COUNT RDF        */
         SLR   RWORK2,@15                                          0697
*           PLHRDFC=RWORK2->RDFLL;  /* PUT RECORD CNT IN PLH         */
         MVC   PLHRDFC(2,RPLH),RDFLL(RWORK2)                       0698
*         END;                      /* END OF GROUP INITIALIZE       */
*       ELSE                        /* NOT A GROUP                   */
*         PLHRDFC=ONE;              /* SINGLE RECORD COUNT           */
         B     @RC00695                                            0700
@RF00695 MVC   PLHRDFC(2,RPLH),@CH00054                            0700
*       PLHRDFP=RWORK2;             /* PUT RDF PTR IN PLH            */
@RC00695 ST    RWORK2,PLHRDFP(,RPLH)                               0701
*       IF RPLKEY=ON THEN           /* KEYED REQUEST                 */
         TM    RPLKEY(RRPL),B'10000000'                            0702
         BNO   @RF00702                                            0702
*         DO;                       /* YES                           */
*           RWORK2=AMDRKP+RPARM1;   /* POINT TO RECORD KEY           */
         L     @15,AMBDSB(,RAMB)                                   0704
         LR    RWORK2,RPARM1                                       0704
         AH    RWORK2,AMDRKP(,@15)                                 0704
*           RBUFC=AMDKEYLN;         /* PICK UP KEY LENGTH            */
         LH    RBUFC,AMDKEYLN(,@15)                                0705
*           IF PLHKEY(1:RBUFC)>     /* PLH KEY GREATER THAN          */
*               RWORK2->KEY(1:RBUFC) THEN/* RECORD KEY               */
         L     @07,PLHKEYPT(,RPLH)                                 0706
         LR    @15,RBUFC                                           0706
         BCTR  @15,0                                               0706
         EX    @15,@SC01190                                        0706
         BNH   @RF00706                                            0706
*             DO;                   /*                       @ZA24722*/
*               IF AMBLWRIT=OFF&    /* IF NOT OPEN FOR WRITE @ZA24722*/
*                   AMBPH->PLHCNT=1 THEN/* SINGLE STRING     @ZA24722*/
         L     @07,RPLDACB(,RRPL)                                  0708
         L     @07,ACBAMBL(,@07)                                   0708
         TM    AMBLWRIT(@07),B'00100000'                           0708
         BNZ   @RF00708                                            0708
         L     @07,AMBPH(,RAMB)                                    0708
         CLI   PLHCNT(@07),1                                       0708
         BNE   @RF00708                                            0708
*                 DO;               /*                       @ZA24722*/
*                   RPLERREG='08'X; /* SET LOGICAL ERR       @ZA24722*/
         MVI   RPLERREG(RRPL),X'08'                                0710
*                   RPLERRCD=RPLSEQCK;/* SEQUENCE ERROR      @ZA24722*/
         MVI   RPLERRCD(RRPL),X'0C'                                0711
*                   CALL EXIT;      /* RETURN                @ZA24722*/
         BAL   @14,EXIT                                            0712
*                 END;              /*                       @ZA24722*/
*               ELSE                /* IF NONE OF THE ABOVE  @ZA24722*/
*                 GOTO GETNXBF;     /* SKIP THIS CI          @ZA24722*/
*             END;                  /*                       @ZA24722*/
*         END;                      /* END OF KEY CHECK CODE         */
@RF00706 DS    0H                                                  0717
*       CALL EXIT;                  /* RETURN                @X04SVES*/
@RF00702 BAL   @14,EXIT                                            0717
*     END;                          /* END OF NON-ERROR              */
*   ELSE                            /* BUFFER ERROR                  */
*     DO;                           /*                               */
         B     @RC00658                                            0719
@RF00658 DS    0H                                                  0720
*       IF RPLERREG='08'X&          /* LOGICAL ERROR-        @X04SVRQ*/
*           RPLERRCD=RPLEXCL THEN   /* EXCLUSIVE CTL         @X04SVRQ*/
         CLI   RPLERREG(RRPL),8                                    0720
         BNE   @RF00720                                            0720
         CLI   RPLERRCD(RRPL),20                                   0720
         BNE   @RF00720                                            0720
*         DO;                       /* YES.                          */
*           PLHDSCAN=ON;            /* SET SCANDATA FLAG             */
         OI    PLHDSCAN(RPLH),B'00000001'                          0722
*           PLHDDDD=RPARM1;         /* SAVE RBA              @ZA07544*/
         ST    RPARM1,PLHDDDD(,RPLH)                               0723
*           IF RPLKEY=ON THEN       /* KEYED REQUEST                 */
         TM    RPLKEY(RRPL),B'10000000'                            0724
         BNO   @RF00724                                            0724
*             PLHNOADV=OFF;         /* ADVANCE ON RETRY              */
         NI    PLHNOADV(RPLH),B'11110111'                          0725
*           ELSE                    /*                               */
*             PLHNOADV=ON;          /* DO NOT ADVANCE ON RETRY       */
         B     @RC00724                                            0726
@RF00724 OI    PLHNOADV(RPLH),B'00001000'                          0726
*         END;                      /* END OF EXCL ERROR             */
@RC00724 DS    0H                                                  0728
*     END;                          /* END NOT READ ERROR            */
@RF00720 DS    0H                                                  0729
*   CALL EXIT;                      /* RETURN                @X04SVES*/
@RC00658 BAL   @14,EXIT                                            0729
*   RESPECIFY                                                      0730
*    (RWORK1,                                                      0730
*     RWORK2) UNRESTRICTED;                                        0730
*   END ADVPLH;                     /* END OF ADVANCE PLH            */
         B     @EL00003                                            0731
*                                                                  0732
*   /*****************************************************************/
*   /*                                                               */
*   /* DATA RETRIEVE PROCEDURE                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0732
*DATARTV:                                                          0732
*   PROCEDURE OPTIONS(NOSAVEAREA,DONTSAVE);                        0732
DATARTV  DS    0H                                                  0733
*   RFY                                                            0733
*     R14 RSTD;                                                    0733
*   RESPECIFY                                                      0734
*    (RWORK1,                                                      0734
*     RWORK2) RESTRICTED;                                          0734
*   RWORK1=PLHLRECL;                /* RECORD LENGTH                 */
         L     RWORK1,PLHLRECL(,RPLH)                              0735
*   RPLRLEN=RWORK1;                 /* SET RECORD LENGTH             */
         ST    RWORK1,RPLRLEN(,RRPL)                               0736
*   RWORK2=PLHRECP;                 /* POINTER TO RECORD             */
         L     RWORK2,PLHRECP(,RPLH)                               0737
*   RBUFC=RPLAREA;                  /* POINTER TO USER AREA          */
         L     RBUFC,RPLAREA(,RRPL)                                0738
*   RPLDDDD=BUFCDDDD+               /* COMPUTE AND SET RBA           */
*       (RWORK2-BUFCBAD);           /* OF DATA RECORD                */
         L     @15,PLHDBUFC(,RPLH)                                 0739
         LR    @07,RWORK2                                          0739
         SL    @07,BUFCBAD(,@15)                                   0739
         AL    @07,BUFCDDDD(,@15)                                  0739
         ST    @07,RPLDDDD(,RRPL)                                  0739
*   PLHDDDD=RPLDDDD;                /* SAVE RBA IN PLH               */
         ST    @07,PLHDDDD(,RPLH)                                  0740
*   IF RPLLOC=ON THEN               /* LOCATE MODE REQUEST           */
         TM    RPLLOC(RRPL),B'10000000'                            0741
         BNO   @RF00741                                            0741
*     DO;                           /* YES.                          */
*       GEN(ST RWORK2,0(RBUFC));    /* RETURN PTR TO RECORD          */
         ST RWORK2,0(RBUFC)
*     END;                          /* END LOCATE MODE               */
*   ELSE                            /*                               */
*     DO;                           /* MOVE MODE REQUEST             */
         B     @RC00741                                            0745
@RF00741 DS    0H                                                  0746
*       IF RWORK1>RPLBUFL THEN      /* AREA SIZE OK                  */
         C     RWORK1,RPLBUFL(,RRPL)                               0746
         BNH   @RF00746                                            0746
*         DO;                       /* NO.                           */
*           IF AMBLPATH=ON THEN     /* AIX PATH PROC.        @X04SVRQ*/
         L     @15,RPLDACB(,RRPL)                                  0748
         L     @15,ACBAMBL(,@15)                                   0748
         TM    AMBLPATH(@15),B'10000000'                           0748
         BNO   @RF00748                                            0748
*             DO;                   /*                       @X04SVRQ*/
*               GEN(IDASVR14);      /* SAVE REG 14.          @X04SVRQ*/
         IDASVR14
*I20:                                                              0751
*               DO;                 /* IDACALL(IDARXBD)              */
I20      DS    0H                                                  0752
*                 CALL IDARXBD;     /* EXIT TO IDARXBD               */
         L     @15,@CV00997                                        0752
         BALR  @14,@15                                             0752
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE     */
         USING *+4095,@10
*                 GEN(LA    @10,4095(@11));/* LOAD SECOND BASE       */
         LA    @10,4095(@11)
*                 GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND 0757
*                                      BASE                          */
         L     @10,=A(@PSTART+4095)
*                 GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND  0758
*                                      BASE                          */
         USING @PSTART+4095,@10
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I20;            /* CALL AIX PATH.        @X04SVRQ*/
*               GEN(IDARST14);      /* RESTORE REG 14.       @X04SVRQ*/
         IDARST14
*               IF RWORK1^=ZERO THEN/* AREA SIZE GOTTEN.     @X04SVRQ*/
         LTR   RWORK1,RWORK1                                       0763
         BNZ   @RT00763                                            0763
*                 GOTO MVREC;       /* GO TO MOVE RECORD.    @X04SVRQ*/
*             END;                  /*                       @X04SVRQ*/
*           RPLERREG='08'X;         /* LOGICAL ERROR                 */
@RF00748 MVI   RPLERREG(RRPL),X'08'                                0766
*           RPLERRCD=RPLINBUF;      /* AREA TOO SMALL                */
         MVI   RPLERRCD(RRPL),X'2C'                                0767
*           PLHNOADV=ON;            /* SET NO ADVANCE PLH            */
         OI    PLHNOADV(RPLH),B'00001000'                          0768
*         END;                      /* END SIZE ERROR                */
*       ELSE                        /*                               */
*         DO;                       /* SIZE OK                       */
         B     @RC00746                                            0770
@RF00746 DS    0H                                                  0771
*MVREC:                             /*                       @X04SVRQ*/
*           RFY                                                    0771
*             RWORK3 RESTRICTED;    /*                               */
MVREC    DS    0H                                                  0772
*           RWORK3=RWORK1;          /* COPY LENGTH                   */
         LR    RWORK3,RWORK1                                       0772
*           GEN(MVCL RBUFC,RWORK2); /* MOVE RECORD                   */
         MVCL RBUFC,RWORK2
*           RFY                                                    0774
*             RWORK3 UNRSTD;                                       0774
*         END;                      /* END RECORD MOVE               */
*     END;                          /* END MOVE MODE                 */
@RC00746 DS    0H                                                  0777
*   PLHSRCSG=ZERO;                  /* SHOW NOT S.R.         @X04SVES*/
@RC00741 SLR   @15,@15                                             0777
         STH   @15,PLHSRCSG(,RPLH)                                 0777
*   RETURN;                         /* RETURN TO CALLER              */
@EL00004 DS    0H                                                  0778
@EF00004 DS    0H                                                  0778
@ER00004 BR    @14                                                 0778
*   RFY                                                            0779
*     R14 UNRSTD;                   /* RELEASE R14                   */
*   RESPECIFY                                                      0780
*    (RWORK1,                                                      0780
*     RWORK2) UNRESTRICTED;                                        0780
*   END DATARTV;                    /* END OF DATA RETRIEVE          */
*                                                                  0782
*   /*****************************************************************/
*   /*                                                               */
*   /* SUBROUTINE - RLSEBUFS FUNCTION- RELEASE PLH DATA AND INDEX    */
*   /* BUFFERS. WRITES DATA BUFFER IF MUST WRITE FLAG IS ON. INPUT - */
*   /* NONE OUTPUT- NONE                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0782
*RLSEBUFS:                                                         0782
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0782
RLSEBUFS DS    0H                                                  0783
*   GEN(IDASVR14);                  /* SAVE REGISTER 14              */
         IDASVR14
*   PLHINVAL=ON;                    /* SET PLH INVALID               */
         OI    PLHINVAL(RPLH),B'00000010'                          0784
*   RBUFC=PLHDBUFC;                 /* POINT TO DATA BUFC            */
         L     RBUFC,PLHDBUFC(,RPLH)                               0785
*   IF RBUFC^=ZERO THEN             /* IF BUFFER HERE        @X04SVMR*/
         LTR   RBUFC,RBUFC                                         0786
         BZ    @RF00786                                            0786
*     DO;                           /* FREE IT               @X04SVMR*/
*       IF RBUFC->BUFCMW=ON THEN    /* MUST WRITE ON                 */
         TM    BUFCMW(RBUFC),B'10000000'                           0788
         BNO   @RF00788                                            0788
*         IF AMBDFR=OFF THEN        /* NOT DFR WRITE         @X04SVRQ*/
         TM    AMBDFR(RAMB),B'00001000'                            0789
         BNZ   @RF00789                                            0789
*I21:                                                              0790
*           DO;                     /* IDACALL(IDAWRBFR)             */
I21      DS    0H                                                  0791
*             CALL IDAWRBFR;        /* EXIT TO IDAWRBFR              */
         L     @15,@CV00999                                        0791
         BALR  @14,@15                                             0791
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*             GEN(LA    @10,4095(@11));/* LOAD SECOND BASE           */
         LA    @10,4095(@11)
*             GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE  */
         L     @10,=A(@PSTART+4095)
*             GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE   */
         USING @PSTART+4095,@10
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I21;                /* WRITE THE BFR         @X04SVRQ*/
*       RBUFC=PLHDBUFC;             /*                               */
@RF00789 DS    0H                                                  0801
@RF00788 L     RBUFC,PLHDBUFC(,RPLH)                               0801
*I22:                                                              0802
*       DO;                         /* IDACALL(IDAFREEB)             */
I22      DS    0H                                                  0803
*         CALL IDAFREEB;            /* EXIT TO IDAFREEB              */
         L     @15,@CV00993                                        0803
         BALR  @14,@15                                             0803
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(USING *+4095,@10);    /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*         GEN(LA    @10,4095(@11)); /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*         GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE      */
         L     @10,=A(@PSTART+4095)
*         GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE       */
         USING @PSTART+4095,@10
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I22;                    /* FREE BUFFER           @X04SVRQ*/
*     END;                          /* END FREE BFR          @X04SVMR*/
*   IF RPLKEY=ON&PLHIBUFC^=ZERO THEN/* KEYED REQUEST & IX BUFFER   0814
*                                      EXISTS.               @X04SVRQ*/
@RF00786 TM    RPLKEY(RRPL),B'10000000'                            0814
         BNO   @RF00814                                            0814
         L     @05,PLHIBUFC(,RPLH)                                 0814
         LTR   @05,@05                                             0814
         BZ    @RF00814                                            0814
*     DO;                           /* YES.                          */
*       RBUFC=PLHIBUFC;             /* POINT TO INDEX BUFC           */
         LR    RBUFC,@05                                           0816
*       RAMB=AMBLIX;                /* POINT TO INDEX AMB.   @X04SVRQ*/
         L     @05,RPLDACB(,RRPL)                                  0817
         L     @05,ACBAMBL(,@05)                                   0817
         L     RAMB,AMBLIX(,@05)                                   0817
*I23:                                                              0818
*       DO;                         /* IDACALL(IDAFREEB)             */
I23      DS    0H                                                  0819
*         CALL IDAFREEB;            /* EXIT TO IDAFREEB              */
         L     @15,@CV00993                                        0819
         BALR  @14,@15                                             0819
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(USING *+4095,@10);    /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*         GEN(LA    @10,4095(@11)); /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*         GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE      */
         L     @10,=A(@PSTART+4095)
*         GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE       */
         USING @PSTART+4095,@10
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I23;                    /* FREE BUFFER           @X04SVRQ*/
*       RAMB=AMBLDTA;               /* RESTORE AMB PTR.      @X04SVRQ*/
         L     @05,RPLDACB(,RRPL)                                  0829
         L     @05,ACBAMBL(,@05)                                   0829
         L     RAMB,AMBLDTA(,@05)                                  0829
*     END;                          /* END KEYED REQUEST             */
*   CALL EXIT;                      /* RETURN                @X04SVES*/
@RF00814 BAL   @14,EXIT                                            0831
*   END RLSEBUFS;                   /* END RLSEBUFS ROUTINE          */
@EL00005 DS    0H                                                  0832
@EF00005 DS    0H                                                  0832
@ER00005 BR    @14                                                 0832
*                                                                  0833
*   /*****************************************************************/
*   /*                                                               */
*   /* PLH EXCEPTION FLAG PROCESSING                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0833
*PLHEXP:                                                           0833
*   PROCEDURE OPTIONS(NOSAVEAREA,DONTSAVE);                        0833
PLHEXP   DS    0H                                                  0834
*   GEN(IDASVR14) ;                 /* SAVE REGISTER 14              */
         IDASVR14
*   IF PLH1ST=ON                    /* FIRST REQUEST AFTER           */
*     THEN                          /* OPEN                          */
         TM    PLH1ST(RPLH),B'01000000'                            0835
         BNO   @RF00835                                            0835
*     DO;                           /* YES                           */
*       IF RPLBWD=ON THEN           /* BACKWARD SPECIFIED    @X04SVES*/
         TM    RPLBWD(RRPL),B'00010000'                            0837
         BNO   @RF00837                                            0837
*         DO;                       /* YES, ERROR            @X04SVES*/
*           RPLERREG='08'X;         /* SHOW LOGICAL ERROR    @X04SVES*/
         MVI   RPLERREG(RRPL),X'08'                                0839
*           RPLERRCD=RPLNOPTR;      /* SHOW NO POSITIONING   @X04SVES*/
         MVI   RPLERRCD(RRPL),X'58'                                0840
*           CALL EXIT;              /* RETURN                @X04SVES*/
         BAL   @14,EXIT                                            0841
*         END;                      /*                       @X04SVES*/
*       PLHASKBF=ON;                /* SET ASK BFR           @X04SVRQ*/
@RF00837 OI    PLHASKBF(RPLH),B'00100000'                          0843
*       RPARM1=ZERO;                /* ADD MAX NO BFR        @X04SVRQ*/
         SLR   RPARM1,RPARM1                                       0844
*I24:                                                              0845
*       DO;                         /* IDACALL(IDAABF)               */
I24      DS    0H                                                  0846
*         CALL IDAABF;              /* EXIT TO IDAABF                */
         L     @15,@CV00989                                        0846
         BALR  @14,@15                                             0846
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(USING *+4095,@10);    /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*         GEN(LA    @10,4095(@11)); /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*         GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE      */
         L     @10,=A(@PSTART+4095)
*         GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE       */
         USING @PSTART+4095,@10
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I24;                    /* CALL ADD BFR          @X04SVRQ*/
*       IF RPLREQ=RPLGET&           /* GET UPDATE                    */
*           RPLUPD=ON               /* REQUEST                       */
*         THEN                      /* YES.                          */
         CLI   RPLREQ(RRPL),0                                      0856
         BNE   @RF00856                                            0856
         TM    RPLUPD(RRPL),B'00000010'                            0856
         BNO   @RF00856                                            0856
*         PLHRDEXC=ON;              /* SET PLH IN READ EXCL          */
         OI    PLHRDEXC(RPLH),B'00001000'                          0857
*       IF RPLKEY=OFF               /* KEYED REQUEST                 */
*         THEN                      /* NO.                           */
@RF00856 TM    RPLKEY(RRPL),B'10000000'                            0858
         BNZ   @RF00858                                            0858
*         DO;                       /*                               */
*           PLHKEYMD=OFF;           /* TURN OFF KEYED MODE           */
         NI    PLHKEYMD(RPLH),B'11011111'                          0860
*           RPARM1=ZERO;            /* ZERO RBA                      */
         SLR   RPARM1,RPARM1                                       0861
*           IF ARDHRBA=RPARM1 THEN  /* EMPTY EXTENT                  */
         L     @05,AMBDSB(,RAMB)                                   0862
         L     @05,AMDPARDB(,@05)                                  0862
         CL    RPARM1,ARDHRBA(,@05)                                0862
         BNE   @RF00862                                            0862
*             DO;                   /* YES                           */
*               IF ARDEOD=ON×       /* END OF DATA ARDB              */
*                   ARDNPTR=ZERO THEN/* OR NO MORE ARDBS             */
         TM    ARDEOD(@05),B'00001000'                             0864
         BO    @RT00864                                            0864
         L     @05,ARDNPTR(,@05)                                   0864
         LTR   @05,@05                                             0864
         BNZ   @RF00864                                            0864
@RT00864 DS    0H                                                  0865
*                 DO;               /* YES                           */
*                   RPLERREG='08'X; /* LOGICAL ERROR                 */
         MVI   RPLERREG(RRPL),X'08'                                0866
*                   RPLERRCD=RPLEODER;/* END OF DATA                 */
         MVI   RPLERRCD(RRPL),X'04'                                0867
*                   PLHEODX=ON;     /* SET EOD FLAG                  */
         OI    PLHEODX(RPLH),B'00000100'                           0868
*                   CALL EXIT;      /* EXIT                  @X04SVES*/
         BAL   @14,EXIT                                            0869
*                 END;              /* END OF NO DATA                */
*               ELSE                /* NOT LAST ARDB                 */
*                 RPARM1=ARDERBA;   /* START OF NEXT RANGE           */
         B     @RC00864                                            0871
@RF00864 L     @05,AMBDSB(,RAMB)                                   0871
         L     @05,AMDPARDB(,@05)                                  0871
         L     RPARM1,ARDERBA(,@05)                                0871
*             END;                  /* END OF EMPTY EXTENT CALL GET
*                                      RBA                           */
@RC00864 DS    0H                                                  0873
*I25:                                                              0873
*           DO;                     /* IDACALL(IDAGRB)               */
@RF00862 DS    0H                                                  0873
I25      DS    0H                                                  0874
*             CALL IDAGRB;          /* EXIT TO IDAGRB                */
         L     @15,@CV00996                                        0874
         BALR  @14,@15                                             0874
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*             GEN(LA    @10,4095(@11));/* LOAD SECOND BASE           */
         LA    @10,4095(@11)
*             GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE  */
         L     @10,=A(@PSTART+4095)
*             GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE   */
         USING @PSTART+4095,@10
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I25;                /* MACRO                 @X04SVRQ*/
*           RESPECIFY                                              0884
*            (RWORK1,                                              0884
*             RWORK2) RESTRICTED;                                  0884
*         END;                      /*                               */
*       ELSE                        /* KEYED REQUEST                 */
*         DO;                       /*                               */
         B     @RC00858                                            0886
@RF00858 DS    0H                                                  0887
*           RAMB=AMBLIX;            /* POINT TO INDEX AMB            */
         L     @07,RPLDACB(,RRPL)                                  0887
         L     @07,ACBAMBL(,@07)                                   0887
         L     RAMB,AMBLIX(,@07)                                   0887
*           PLHSSR=ON;              /* READ SEQ. SET REQUEST         */
         OI    PLHSSR(RPLH),B'00010000'                            0888
*           RPARM1=ADDR(PLHIXSPL);  /* POINT TO PARM         @X04SVES*/
         LA    RPARM1,PLHIXSPL(,RPLH)                              0889
*           PLHISPLP=RPARM1;        /* SET IX SCH PTR        @ZA07544*/
         ST    RPARM1,PLHISPLP(,RPLH)                              0890
*           RPARM1->IXSILN=ONE;     /* SET LVL = 1           @X04SVES*/
         MVI   IXSILN(RPARM1),X'01'                                0891
*           RPARM1=AMDSSRBA;        /* FIRST SEQ SET RBA             */
         L     @07,AMBDSB(,RAMB)                                   0892
         L     RPARM1,AMDSSRBA(,@07)                               0892
*           PLHSSRBA=RPARM1;        /* PLACE RBA IN PLH              */
         ST    RPARM1,PLHSSRBA(,RPLH)                              0893
*           PLHKEYMD=ON;            /* TURN ON KEYED MODE FLAG CALL
*                                      GET RBA                       */
         OI    PLHKEYMD(RPLH),B'00100000'                          0894
*I26:                                                              0895
*           DO;                     /* IDACALL(IDAGRB)               */
I26      DS    0H                                                  0896
*             CALL IDAGRB;          /* EXIT TO IDAGRB                */
         L     @15,@CV00996                                        0896
         BALR  @14,@15                                             0896
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*             GEN(LA    @10,4095(@11));/* LOAD SECOND BASE           */
         LA    @10,4095(@11)
*             GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE  */
         L     @10,=A(@PSTART+4095)
*             GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE   */
         USING @PSTART+4095,@10
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I26;                /*                       @X04SVRQ*/
*           RESPECIFY                                              0906
*            (RWORK1,                                              0906
*             RWORK2) RESTRICTED;                                  0906
*           IF RPLERREG^='00'X      /* ERROR                         */
*             THEN                  /* YES.                          */
         CLI   RPLERREG(RRPL),0                                    0907
         BE    @RF00907                                            0907
*             CALL EXIT;            /* EXIT                  @X04SVES*/
         BAL   @14,EXIT                                            0908
*           RWORK1=RBUFC->BUFCBAD;  /* POINT TO INDEX CINV           */
@RF00907 L     RWORK1,BUFCBAD(,RBUFC)                              0909
*           RESPECIFY                                              0910
*             IDAIXH BASED(RWORK1); /*                               */
*                                                                  0910
*           /*********************************************************/
*           /*                                                       */
*           /* INITIALIZE SEQUENCE SET ENTRY INFORMATION IN THE PLH. */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0911
*           IXSSEP=RWORK1+IXHSEO;   /* SET PTR TO FIRST SECT.        */
         LA    @07,200                                             0911
         ALR   @07,RPLH                                            0911
         LR    @00,RWORK1                                          0911
         AH    @00,IXHSEO(,RWORK1)                                 0911
         ST    @00,IXSSEP(,@07)                                    0911
*           RBUFC=AMDCINV-IXHFLPLN; /* ADJUST TO START OF F          */
         L     @15,AMBDSB(,RAMB)                                   0912
         L     RBUFC,AMDCINV(,@15)                                 0912
         SLR   @00,@00                                             0912
         IC    @00,IXHFLPLN(,RWORK1)                               0912
         SLR   RBUFC,@00                                           0912
*           RBUFC=RBUFC-(LENGTH(IDACIDF)/* ADJUST TO SKIP            */
*               +LENGTH(IDARDF));   /* CIDF AND RDF                  */
         SL    RBUFC,@CF00289                                      0913
*           RPARM1=IXHPTLS;         /* ICM MASK FOR PTR              */
         SLR   RPARM1,RPARM1                                       0914
         IC    RPARM1,IXHPTLS(,RWORK1)                             0914
*           RBUFC=RBUFC+RWORK1;     /* PTR TO 1ST IDX ENTRY          */
         ALR   RBUFC,RWORK1                                        0915
*           IXSHEP=RBUFC;           /* SET FOR GETNEXT               */
         ST    RBUFC,IXSHEP(,@07)                                  0916
*           IXSLEP=RBUFC;           /* SET LOW ENTRY         @X04SVES*/
         ST    RBUFC,IXSLEP(,@07)                                  0917
*           RESPECIFY                                              0918
*             IDAIBFLP BASED(RBUFC);                               0918
*           RWORK2=ZERO;            /* CLEAR REGISTER                */
         SLR   RWORK2,RWORK2                                       0919
*           GEN(EX RPARM1,ICMGEN);  /* PICK UP PTR                   */
         EX RPARM1,ICMGEN
*           RAMB=AMBLDTA;           /* SET PTR TO DATA AMB           */
         L     @07,RPLDACB(,RRPL)                                  0921
         L     @07,ACBAMBL(,@07)                                   0921
         L     RAMB,AMBLDTA(,@07)                                  0921
*           RPARM1=IXHBRBA+         /* CONVERT PTR TO                */
*               (RWORK2*AMDCINV);   /* RBA VALUE CALL GET RBA        */
         L     @07,AMBDSB(,RAMB)                                   0922
         LR    @09,RWORK2                                          0922
         M     @08,AMDCINV(,@07)                                   0922
         AL    @09,IXHBRBA(,RWORK1)                                0922
         LR    RPARM1,@09                                          0922
*I27:                                                              0923
*           DO;                     /* IDACALL(IDAGRB)               */
I27      DS    0H                                                  0924
*             CALL IDAGRB;          /* EXIT TO IDAGRB                */
         L     @15,@CV00996                                        0924
         BALR  @14,@15                                             0924
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*             GEN(LA    @10,4095(@11));/* LOAD SECOND BASE           */
         LA    @10,4095(@11)
*             GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE  */
         L     @10,=A(@PSTART+4095)
*             GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE   */
         USING @PSTART+4095,@10
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I27;                /*                       @X04SVRQ*/
*           RESPECIFY                                              0934
*            (RWORK1,                                              0934
*             RWORK2) RESTRICTED;                                  0934
*         END;                      /* END OF KEY-SEQ. SETUP         */
*GNXCI:                                                            0936
*       IF RPLERREG='00'X           /* ERROR                         */
*         THEN                      /* NO.                           */
@RC00858 DS    0H                                                  0936
GNXCI    CLI   RPLERREG(RRPL),0                                    0936
         BNE   @RF00936                                            0936
*         DO;                       /*                               */
*           RWORK1=RBUFC->BUFCBAD;  /* POINT TO BUFFER               */
         L     RWORK1,BUFCBAD(,RBUFC)                              0938
*           RPARM1=RWORK1+AMDCINV   /* POINT TO CIDF                 */
*               -LENGTH(IDACIDF);   /*                               */
*                                                                  0939
         L     @07,AMBDSB(,RAMB)                                   0939
         LR    RPARM1,RWORK1                                       0939
         AL    RPARM1,AMDCINV(,@07)                                0939
         SL    RPARM1,@CF00068                                     0939
*           /*********************************************************/
*           /*                                                       */
*           /* VALIDATE THE CIDF                             @ZA31009*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0940
*           IF RPARM1->CIDFBUSY=ON THEN/* WAS CI SPLIT INTERRUPTED?
*                                                            @ZA31009*/
         TM    CIDFBUSY(RPARM1),B'10000000'                        0940
         BNO   @RF00940                                            0940
*             DO;                   /* YES IT WAS, TRY TO CORRECT IT.
*                                                            @ZA31009*/
*I28:                                                              0942
*               DO;                 /* IDACALL(IDA019S6)             */
I28      DS    0H                                                  0943
*                 CALL IDA019S6;    /* EXIT TO IDA019S6              */
         L     @15,@CV01002                                        0943
         BALR  @14,@15                                             0943
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE     */
         USING *+4095,@10
*                 GEN(LA    @10,4095(@11));/* LOAD SECOND BASE       */
         LA    @10,4095(@11)
*                 GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND 0948
*                                      BASE                          */
         L     @10,=A(@PSTART+4095)
*                 GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND  0949
*                                      BASE                          */
         USING @PSTART+4095,@10
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I28;            /* INVOKE CI REBUILD     @ZA31009*/
*               IF RPLERREG^=ZERO THEN/* DID REBUILD WORK?   @ZA31009*/
         CLI   RPLERREG(RRPL),0                                    0953
         BE    @RF00953                                            0953
*                 CALL EXIT;        /* NO IT FAILED. TAKE EXIT.    0954
*                                                            @ZA31009*/
         BAL   @14,EXIT                                            0954
*               RWORK1=PLHDBUFC->BUFCBAD;/* PT TO START OF BUF     0955
*                                                            @ZA31009*/
@RF00953 L     @07,PLHDBUFC(,RPLH)                                 0955
         L     RWORK1,BUFCBAD(,@07)                                0955
*               RPARM1=RWORK1+AMDCINV/* POINT TO CIDF IN     @ZA31009*/
*                   -LENGTH(IDACIDF);/* BUFFER               @ZA31009*/
         L     @15,AMBDSB(,RAMB)                                   0956
         LR    RPARM1,RWORK1                                       0956
         AL    RPARM1,AMDCINV(,@15)                                0956
         SL    RPARM1,@CF00068                                     0956
*               RBUFC=PLHDBUFC;     /* POINT TO BUFC         @ZA31009*/
         LR    RBUFC,@07                                           0957
*             END;                  /* END OF SPLIT INTERRUPTION   0958
*                                      DETECTION             @ZA31009*/
*           RESPECIFY                                              0959
*             IDACIDF BASED(RPARM1);/*                               */
@RF00940 DS    0H                                                  0960
*           PLHRECP=RWORK1;         /* INITIALIZE RECORD PTR @ZA31009*/
         ST    RWORK1,PLHRECP(,RPLH)                               0960
*           IF CIDFOSET=ZERO        /* EMPTY CINV                    */
*             THEN                  /* YES.                          */
         SLR   @07,@07                                             0961
         CH    @07,CIDFOSET(,RPARM1)                               0961
         BNE   @RF00961                                            0961
*             DO;                   /* FREE DATA BUFFER              */
*                                                                  0962
*               /*****************************************************/
*               /*                                                   */
*               /* VALIDATE THE CIDF                         @ZA31009*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0963
*               IF RPARM1->IDACIDF=ZERO THEN/* IF CIDF IS ZERO,    0963
*                                                            @ZA31009*/
         ICM   @00,15,IDACIDF(RPARM1)                              0963
         CLR   @07,@00                                             0963
         BNE   @RF00963                                            0963
*                 DO;               /* TREAT IT LIKE A DATA READ   0964
*                                      ERROR.                @ZA31009*/
*                   PLHSKPER=ON;    /* CAUSE NEXT GET SEQ TO SKIP CI
*                                                            @ZA31009*/
         OI    PLHSKPER(RPLH),B'00100000'                          0965
*                   RPLERREG='08'X; /* INDICATE A LOGICAL ERROR    0966
*                                                            @ZA31009*/
         MVI   RPLERREG(RRPL),X'08'                                0966
*                   RPLERRCD=RPLINCNV;/* SET INVALID CI CODE @ZA31009*/
         MVI   RPLERRCD(RRPL),X'9C'                                0967
*                   RPLDDDD=RBUFC->BUFCDDDD;/* PASS BACK RBA IN ERROR
*                                                            @ZA31009*/
         L     @07,BUFCDDDD(,RBUFC)                                0968
         ST    @07,RPLDDDD(,RRPL)                                  0968
*                   CALL EXIT;      /* EXIT FROM ADVPLH.     @ZA31009*/
         BAL   @14,EXIT                                            0969
*                 END;              /* END OF ERROR DETECTION GROUP.
*                                                            @ZA31009*/
*               RBUFC=PLHDBUFC;     /* POINT TO BUFC                 */
@RF00963 L     RBUFC,PLHDBUFC(,RPLH)                               0971
*I29:                                                              0972
*               DO;                 /* IDACALL(IDAFREEB)             */
I29      DS    0H                                                  0973
*                 CALL IDAFREEB;    /* EXIT TO IDAFREEB              */
         L     @15,@CV00993                                        0973
         BALR  @14,@15                                             0973
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE     */
         USING *+4095,@10
*                 GEN(LA    @10,4095(@11));/* LOAD SECOND BASE       */
         LA    @10,4095(@11)
*                 GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND 0978
*                                      BASE                          */
         L     @10,=A(@PSTART+4095)
*                 GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND  0979
*                                      BASE                          */
         USING @PSTART+4095,@10
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I29;            /*                       @X04SVRQ
*                                      GET NEXT DATA CINV            */
*I30:                                                              0983
*               DO;                 /* IDACALL(IDAGNXT)              */
I30      DS    0H                                                  0984
*                 CALL IDAGNXT;     /* EXIT TO IDAGNXT               */
         L     @15,@CV00995                                        0984
         BALR  @14,@15                                             0984
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE     */
         USING *+4095,@10
*                 GEN(LA    @10,4095(@11));/* LOAD SECOND BASE       */
         LA    @10,4095(@11)
*                 GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND 0989
*                                      BASE                          */
         L     @10,=A(@PSTART+4095)
*                 GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND  0990
*                                      BASE                          */
         USING @PSTART+4095,@10
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I30;            /*                       @X04SVRQ*/
*               RESPECIFY                                          0994
*                (RWORK1,                                          0994
*                 RWORK2) RESTRICTED;                              0994
*               GO TO GNXCI;        /* LOOP UNTIL DATA FOUND         */
         B     GNXCI                                               0995
*             END;                  /* END OF EMPTY CI               */
*           PLH1ST=OFF;             /* 1ST TIME OFF          @XA07023*/
@RF00961 NI    PLH1ST(RPLH),B'10111111'                            0997
*           PLHFSP=RWORK1+CIDFOSET; /* INITIALIZE FREE SP. PTR       */
         LR    @07,RWORK1                                          0998
         AH    @07,CIDFOSET(,RPARM1)                               0998
         ST    @07,PLHFSP(,RPLH)                                   0998
*           RPARM1=RPARM1-LENGTH(IDARDF);/* INITIALIZE               */
         LA    @07,3                                               0999
         SLR   RPARM1,@07                                          0999
*           PLHLRECL=RPARM1->RDFLL; /* PUT RECORD LTH IN PLH         */
         SLR   @00,@00                                             1000
         ICM   @00,3,RDFLL(RPARM1)                                 1000
         ST    @00,PLHLRECL(,RPLH)                                 1000
*           IF RPARM1->RDFCTNU=ON THEN/* START OF GROUP              */
         TM    RDFCTNU(RPARM1),B'01000000'                         1001
         BNO   @RF01001                                            1001
*             DO;                   /* YES                           */
*               RPARM1=RPARM1-LENGTH(IDARDF);/* MOVE TO CNT RDF      */
         SLR   RPARM1,@07                                          1003
*               PLHRDFC=RPARM1->RDFLL;/* PUT RECORD CNT IN PLH       */
         MVC   PLHRDFC(2,RPLH),RDFLL(RPARM1)                       1004
*             END;                  /* END OF GROUP INITIALIZE       */
*           ELSE                    /* NOT A GROUP                   */
*             PLHRDFC=ONE;          /* SINGLE RECORD COUNT           */
         B     @RC01001                                            1006
@RF01001 MVC   PLHRDFC(2,RPLH),@CH00054                            1006
*           PLHRDFP=RPARM1;         /* PUT RDF PTR IN PLH            */
@RC01001 ST    RPARM1,PLHRDFP(,RPLH)                               1007
*         END;                      /* END OF PLH INITIALIZE         */
*       ELSE                        /* BUFFER ERROR          @X04SVRQ*/
*         DO;                       /* SOME TYPE OF ERROR.   @ZA07544*/
         B     @RC00936                                            1009
@RF00936 DS    0H                                                  1010
*           IF RPLERREG='08'X&      /* IF LOGICAL ERROR AND @ZA075444*/
*               (RPLERRCD=RPLEXCL)  /* EXCLUSVE CNTL ERROR,  @ZA07544*/
*             THEN                  /* THEN PASS BACK RBA.   @ZA07544*/
         CLI   RPLERREG(RRPL),8                                    1010
         BNE   @RF01010                                            1010
         CLI   RPLERRCD(RRPL),20                                   1010
         BNE   @RF01010                                            1010
*             RPLDDDD=RPARM1;       /* EXCLUSIVE CNTL RBA.   @ZA07544*/
         ST    RPARM1,RPLDDDD(,RRPL)                               1011
*           ELSE                    /* NOT EXCL CNTL ERROR, TEST   1012
*                                      ANOTHER.              @ZA07544*/
*             IF RPLERREG='0C'X     /* I/O ERROR             @XA07023*/
*               THEN                                               1012
         B     @RC01010                                            1012
@RF01010 CLI   RPLERREG(RRPL),12                                   1012
         BNE   @RF01012                                            1012
*               PLH1ST=OFF;         /* THEN CLEAR 1ST        @XA07023*/
         NI    PLH1ST(RPLH),B'10111111'                            1013
*         END;                      /* SOME TYPE OF ERROR.   @ZA07544*/
@RF01012 DS    0H                                                  1014
@RC01010 DS    0H                                                  1015
*       RESPECIFY                                                  1015
*        (RWORK1,                                                  1015
*         RWORK2) UNRESTRICTED;                                    1015
@RC00936 DS    0H                                                  1016
*     END;                          /* END OF 1ST TIME               */
*   ELSE                            /*                               */
*     DO;                           /*                               */
         B     @RC00835                                            1017
@RF00835 DS    0H                                                  1018
*       IF PLHEODX=ON               /* EOD TAKEN                     */
*         THEN                      /* YES.                          */
         TM    PLHEODX(RPLH),B'00000100'                           1018
         BNO   @RF01018                                            1018
*         DO;                       /*                               */
*           RPLERREG='08'X;         /* SET LOGICAL ERR. CODE         */
         MVI   RPLERREG(RRPL),X'08'                                1020
*           RPLERRCD=RPLEODER;      /* END OF DATA                   */
         MVI   RPLERRCD(RRPL),X'04'                                1021
*           CALL EXIT;              /* EXIT.                 @X04SVES*/
         BAL   @14,EXIT                                            1022
*         END;                      /* END OF REQ. AFTER EOD         */
*       IF PLHSKPER=ON              /* READ SKIP FLAG ON             */
*         THEN                      /* YES.                          */
@RF01018 TM    PLHSKPER(RPLH),B'00100000'                          1024
         BNO   @RF01024                                            1024
*         DO;                       /*                               */
*           CALL ADVPLH;            /* SKIP DATA CINV(S)             */
         BAL   @14,ADVPLH                                          1026
*           CALL EXIT;              /* EXIT.                 @X04SVES*/
         BAL   @14,EXIT                                            1027
*         END;                      /*                               */
*       IF PLHDSCAN=ON              /* DATA SCAN FLAG ON             */
*         THEN                      /* YES.                          */
@RF01024 TM    PLHDSCAN(RPLH),B'00000001'                          1029
         BNO   @RF01029                                            1029
*         DO;                       /*                               */
*           IF RPLREQ=RPLGET&       /* GET UPDATE                    */
*               RPLUPD=ON           /* REQUEST                       */
*             THEN                  /* YES.                          */
         CLI   RPLREQ(RRPL),0                                      1031
         BNE   @RF01031                                            1031
         TM    RPLUPD(RRPL),B'00000010'                            1031
         BNO   @RF01031                                            1031
*             PLHRDEXC=ON;          /* SET READ EXCL FLAG            */
         OI    PLHRDEXC(RPLH),B'00001000'                          1032
*           ELSE                    /* NOT GET UPDATE                */
*             PLHRDEXC=OFF;         /* TURN OFF READ EXCL FLAG       */
         B     @RC01031                                            1033
@RF01031 NI    PLHRDEXC(RPLH),B'11110111'                          1033
*           CALL SCANDATA;          /* SCAN TO FIND RECORD           */
@RC01031 BAL   @14,SCANDATA                                        1034
*           CALL EXIT;              /* EXIT                  @X04SVES*/
         BAL   @14,EXIT                                            1035
*         END;                      /* END OF SCAN                   */
*       IF PLHSRINV=ON THEN         /* WAS SPANNED RECORD EXCEPTION
*                                      SET                   @X04SVES*/
@RF01029 TM    PLHSRINV(RPLH),B'00010000'                          1037
         BNO   @RF01037                                            1037
*         DO;                       /* YES                   @X04SVES*/
*           IF RPLADR=ON THEN       /* ADDR MODE             @X04SVES*/
         TM    RPLADR(RRPL),B'01000000'                            1039
         BNO   @RF01039                                            1039
*             RPARM1=ADDR(RPLDDDD); /* YES                   @X04SVES*/
         LA    RPARM1,RPLDDDD(,RRPL)                               1040
*           ELSE                    /* NO, KEYED             @X04SVES*/
*             RPARM1=ADDR(PLHKEY);  /* POINT TO KEY          @X04SVES*/
         B     @RC01039                                            1041
@RF01039 L     RPARM1,PLHKEYPT(,RPLH)                              1041
*I31:                                                              1042
*           DO;                     /* IDACALL(IDA019RA)             */
@RC01039 DS    0H                                                  1042
I31      DS    0H                                                  1043
*             CALL IDA019RA;        /* EXIT TO IDA019RA              */
         L     @15,@CV01000                                        1043
         BALR  @14,@15                                             1043
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*             GEN(LA    @10,4095(@11));/* LOAD SECOND BASE           */
         LA    @10,4095(@11)
*             GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE  */
         L     @10,=A(@PSTART+4095)
*             GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE   */
         USING @PSTART+4095,@10
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I31;                /* SET POSITION          @X04SVES*/
*           CALL EXIT;              /* RETURN                @X04SVES*/
         BAL   @14,EXIT                                            1053
*         END;                      /*                       @X04SVES*/
*       IF PLHNOADV=ON THEN         /* NO ADVANCE PLH SET            */
@RF01037 TM    PLHNOADV(RPLH),B'00001000'                          1055
         BNO   @RF01055                                            1055
*         DO;                       /* YES.                          */
*           PLHRSTRT=OFF;           /* TURN OFF INV          @XA05682
*                                      PUT POSITION          @XA05682*/
         NI    PLHRSTRT(RPLH),B'01111111'                          1057
*           IF PLHRECP=>PLHFSP THEN /* AT END OF CINV BUFFER         */
         CLC   PLHRECP(4,RPLH),PLHFSP(RPLH)                        1058
         BL    @RF01058                                            1058
*             CALL ADVPLH;          /* ADVANCE TO NEXT BUFFER        */
         BAL   @14,ADVPLH                                          1059
*         END;                      /* END OF NO ADVANCE             */
*       ELSE                        /* INVALID PLH                   */
*         DO;                                                      1061
         B     @RC01055                                            1061
@RF01055 DS    0H                                                  1062
*           RPLERREG='08'X;         /* LOGICAL ERROR                 */
         MVI   RPLERREG(RRPL),X'08'                                1062
*           RPLERRCD=RPLNOPTR;      /* NO POSITION DEFINED           */
         MVI   RPLERRCD(RRPL),X'58'                                1063
*         END;                      /* END OF INVALID PLH            */
*     END;                          /* END OF NOT 1ST TIME           */
@RC01055 DS    0H                                                  1066
*   CALL EXIT;                      /* RETURN                @X04SVES*/
@RC00835 BAL   @14,EXIT                                            1066
*   GEN REFS(IBFLP3);                                              1067
*                                          /* ICM INSTRUCTION        */
MASK0    EQU   0                             MASK OF 0
ICMGEN   ICM   RWORK2,MASK0,IBFLP3(RBUFC)    PICK UP DATA CINV PTR
*   END PLHEXP;                     /* END OF PLH EXCEPTION          */
@EL00006 DS    0H                                                  1068
@EF00006 DS    0H                                                  1068
@ER00006 BR    @14                                                 1068
*                                                                  1069
*   /*****************************************************************/
*   /*                                                               */
*   /* SEQUENTIAL INSERT (CREATE OR MASS INSERT) POSITION            */
*   /* VERIFICATION ROUTINE                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1069
*SQICHECK:                                                         1069
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          1069
SQICHECK DS    0H                                                  1070
*   GEN(IDASVR14);                  /* SAVE R14                      */
         IDASVR14
*   IF PLH1ST=OFF THEN              /* 1ST REQUEST AFTER OPEN        */
         TM    PLH1ST(RPLH),B'01000000'                            1071
         BNZ   @RF01071                                            1071
*     DO;                           /* NO.                           */
*       IF PLHASKBF=ON THEN         /* ASK BFR ON            @X04SVRQ*/
         TM    PLHASKBF(RPLH),B'00100000'                          1073
         BNO   @RF01073                                            1073
*         DO;                       /*                       @X04SVRQ*/
*           RPARM1=ZERO;            /* ADD MAX NO BFR        @X04SVRQ*/
         SLR   RPARM1,RPARM1                                       1075
*I32:                                                              1076
*           DO;                     /* IDACALL(IDAABF)               */
I32      DS    0H                                                  1077
*             CALL IDAABF;          /* EXIT TO IDAABF                */
         L     @15,@CV00989                                        1077
         BALR  @14,@15                                             1077
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*             GEN(LA    @10,4095(@11));/* LOAD SECOND BASE           */
         LA    @10,4095(@11)
*             GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE  */
         L     @10,=A(@PSTART+4095)
*             GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE   */
         USING @PSTART+4095,@10
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I32;                /* CALL ADD BFR          @X04SVRQ*/
*         END;                      /*                       @X04SVRQ*/
*       IF PLHINVAL=ON×             /* PLH POSITION NOT SET OR       */
*           PLHSKPER=ON×            /* READ SKIP ERROR OR            */
*           PLHEODX=ON×             /* END OF DATA ON READ OR        */
*           PLHBWD=ON×              /* PREV BWD REQ.         @X04SVRQ*/
*           PLHDSCAN=ON THEN        /* EXCLUSIVE CTL ERROR           */
@RF01073 TM    PLHINVAL(RPLH),B'00100110'                          1088
         BNZ   @RT01088                                            1088
         TM    PLHBWD(RPLH),B'00010000'                            1088
         BO    @RT01088                                            1088
         TM    PLHDSCAN(RPLH),B'00000001'                          1088
         BNO   @RF01088                                            1088
@RT01088 DS    0H                                                  1089
*         DO;                       /* YES. 1 OR MORE OF ABOVE       */
*SETPST:                            /* SET INSERT POSITION           */
*           IF RPLKEY=ON THEN       /* KEYED REQUEST                 */
SETPST   TM    RPLKEY(RRPL),B'10000000'                            1090
         BO    @RT01090                                            1090
*             GO TO IPLOCATE;       /* USE DIRECT LOCATE             */
*           CALL GETINCI;           /* SET UP FOR LOCATE RBA         */
         BAL   @14,GETINCI                                         1092
*           CALL EXIT;              /* EXIT                  @X04SVES*/
         BAL   @14,EXIT                                            1093
*         END;                      /* END OF PLH EXCEPTIONS         */
*       IF RPLKEY=OFF THEN          /* KEYED REQUEST                 */
@RF01088 TM    RPLKEY(RRPL),B'10000000'                            1095
         BZ    @RT01095                                            1095
*         GO TO SETPST;             /* GO SET POSITION TO EOD        */
*       IF PLHKEYMD=OFF THEN        /* KEYED PROCESS MODE            */
         TM    PLHKEYMD(RPLH),B'00100000'                          1097
         BNZ   @RF01097                                            1097
*         DO;                       /* NO.                           */
*           RPLERREG='08'X;         /* LOGICAL ERROR                 */
         MVI   RPLERREG(RRPL),X'08'                                1099
*           RPLERRCD=RPLNOPTR;      /* INVALID REQ           @XA05661*/
         MVI   RPLERRCD(RRPL),X'58'                                1100
*           CALL EXIT;              /* EXIT                  @X04SVES*/
         BAL   @14,EXIT                                            1101
*         END;                      /* END OF NOT KEYED MODE         */
*       RESPECIFY                                                  1103
*        (RWORK1,                                                  1103
*         RWORK2,                                                  1103
*         RWORK3) RESTRICTED;                                      1103
@RF01097 DS    0H                                                  1104
*       RPARM1=AMDKEYLN;            /* KEY LENGTH                    */
         L     @15,AMBDSB(,RAMB)                                   1104
         LH    RPARM1,AMDKEYLN(,@15)                               1104
*       RBUFC=RPLAREA+AMDRKP;       /* POINT TO NEW KEY              */
         LH    RBUFC,AMDRKP(,@15)                                  1105
         AL    RBUFC,RPLAREA(,RRPL)                                1105
*       RWORK2=ADDR(PLHKEY);        /* POINT TO PREVIOUS KEY         */
         L     RWORK2,PLHKEYPT(,RPLH)                              1106
*       RWORK1=RPARM1;              /* LENGTH FOR CLCL               */
         LR    RWORK1,RPARM1                                       1107
*       RWORK3=RPARM1;              /* LENGTH FOR CLCL               */
         LR    RWORK3,RPARM1                                       1108
*       GEN(CLCL  RBUFC,RWORK2);    /* COMPARE KEYS                  */
         CLCL  RBUFC,RWORK2
*       GEN(BH HIGHSEQ);            /* NEW KEY HIGH                  */
         BH HIGHSEQ
*       GEN(BE EQSEQ);              /* NEW KEY EQUAL                 */
         BE EQSEQ
*SQCKERR:                           /* NEW KEY < PREVIOUS            */
*       RPLERREG='08'X;             /* LOGICAL ERROR                 */
SQCKERR  MVI   RPLERREG(RRPL),X'08'                                1112
*       RPLERRCD=RPLSEQCK;          /* SEQUENCE CHECK ERROR          */
         MVI   RPLERRCD(RRPL),X'0C'                                1113
*       PLHNOADV=ON;                /* LEAVE POSITIO UNCHANGED.    1114
*                                                            @X04SVRQ*/
         OI    PLHNOADV(RPLH),B'00001000'                          1114
*       CALL EXIT;                  /* EXIT                  @X04SVES*/
         BAL   @14,EXIT                                            1115
*HIGHSEQ:                                                          1116
*       PLHSAVE1=RPARM1-RWORK1;     /* NEW KEY > PREVIOUS            */
HIGHSEQ  LR    @00,RPARM1                                          1116
         SLR   @00,RWORK1                                          1116
         ST    @00,PLHSAVE1(,RPLH)                                 1116
*       IF AMBCREAT=ON THEN         /* CREATE MODE                   */
         TM    AMBCREAT(RAMB),B'10000000'                          1117
         BNO   @RF01117                                            1117
*         CALL EXIT;                /* YES. EXIT             @X04SVES*/
         BAL   @14,EXIT                                            1118
*       ELSE                                                       1119
*         ;                         /* NOT CREATE MODE               */
@RF01117 DS    0H                                                  1120
*EXCLCK:                            /* DETERMINE IF BUFFER IS IN   1120
*                                      EXCLUSIVE CONTROL             */
*       IF PLHRSTRT=ON THEN         /* INV PUT ON?           @X04SVRQ*/
EXCLCK   TM    PLHRSTRT(RPLH),B'10000000'                          1120
         BO    @RT01120                                            1120
*         GOTO IPLOCATE;            /* REPOSITION TO USER KEY      1121
*                                                            @X04SVRQ*/
*       IF PLHRCODE=RPLPUT&PLHLRECL>AMDCINV-LENGTH(IDACIDF)-LENGTH(
*           IDARDF) THEN            /* PREV. PUT S.R.        @X04SVRQ*/
         CLI   PLHRCODE(RPLH),1                                    1122
         BNE   @RF01122                                            1122
         L     @15,AMBDSB(,RAMB)                                   1122
         L     @00,AMDCINV(,@15)                                   1122
         SL    @00,@CF00289                                        1122
         C     @00,PLHLRECL(,RPLH)                                 1122
         BL    @RT01122                                            1122
*         GOTO IPLOCATE;            /* SEARCH FOR INSERT PT. @X04SVRQ*/
*       IF PLHDBUFC=ZERO×           /* IF NO POINTER TO DATA BUFC OR
*                                                            @ZA07544*/
*           (PLHDBUFC->BUFCEXC=OFF& /* BUFFER-EXCLUSIVE AND  @ZA07544*/
*           PLHDBUFC->BUFCMW=OFF) THEN/* MUST-WRITE BOTH OFF @ZA07544*/
@RF01122 L     @15,PLHDBUFC(,RPLH)                                 1124
         LTR   @15,@15                                             1124
         BZ    @RT01124                                            1124
         TM    BUFCEXC(@15),B'00000010'                            1124
         BNZ   @RF01124                                            1124
         TM    BUFCMW(@15),B'10000000'                             1124
         BZ    @RT01124                                            1124
*         GO TO IPLOCATE;           /* SEARCH FOR INSERT POINT       */
*       IF PLHNOADV=OFF THEN        /* ADVANCE PLH NEEDED            */
@RF01124 TM    PLHNOADV(RPLH),B'00001000'                          1126
         BNZ   @RF01126                                            1126
*         DO;                       /* YES.                          */
*           CALL ADVPLH;            /* ADVANCE PLH                   */
         BAL   @14,ADVPLH                                          1128
*           PLHNOADV=ON;            /* SET INDICATOR                 */
         OI    PLHNOADV(RPLH),B'00001000'                          1129
*         END;                      /* END ADVPLH NEEDED             */
*       RWORK2=PLHRECP;             /* NEXT RECORD PTR               */
@RF01126 L     RWORK2,PLHRECP(,RPLH)                               1131
*       IF RWORK2<PLHFSP THEN       /* AT END OF CINV                */
         CL    RWORK2,PLHFSP(,RPLH)                                1132
         BNL   @RF01132                                            1132
*         DO;                       /* NO.                           */
*           RBUFC=RPLAREA+AMDRKP;   /* POINT TO NEW KEY              */
         L     @15,AMBDSB(,RAMB)                                   1134
         LH    @14,AMDRKP(,@15)                                    1134
         L     RBUFC,RPLAREA(,RRPL)                                1134
         ALR   RBUFC,@14                                           1134
*           RWORK2=RWORK2+AMDRKP;   /* NEXT RECORD KEY               */
         ALR   RWORK2,@14                                          1135
*           RWORK1=AMDKEYLN;        /* KEY LENGTH                    */
         LH    RWORK1,AMDKEYLN(,@15)                               1136
*           RWORK3=RWORK1;          /* COPY FOR CLCL                 */
         LR    RWORK3,RWORK1                                       1137
*           GEN(CLCL RBUFC,RWORK2); /* COMPARE KEYS                  */
         CLCL RBUFC,RWORK2
*           GEN(BH IPLOCATE);       /* NEW KEY >                     */
         BH IPLOCATE
*           GEN(BE DUPREC);         /* NEW KEY =, ERROR              */
         BE DUPREC
*           CALL EXIT;              /* SEQUENCE IS OK        @X04SVES*/
         BAL   @14,EXIT                                            1141
*         END;                      /* END NEXT KEY COMPARE          */
*       ELSE                        /* INSERT AT END OF DATA         */
*         DO;                       /* IN CINV.                      */
         B     @RC01132                                            1143
@RF01132 DS    0H                                                  1144
*           IF PLHIBUFC=0 THEN      /* IF DB/DC AND SO NO INDEX BUFC,
*                                                            @ZA07544*/
         L     @15,PLHIBUFC(,RPLH)                                 1144
         LTR   @15,@15                                             1144
         BZ    @RT01144                                            1144
*             GOTO IPLOCATE;        /* SEARCH FOR INSERT POINT.    1145
*                                                            @ZA07544*/
*           RBUFC=PLHIBUFC->BUFCBAD;/* POINT TO INDEX RECORD         */
         L     RBUFC,BUFCBAD(,@15)                                 1146
*           RFY                                                    1147
*             RWORK0 RSTD;          /*                               */
*           IF PLHDBUFC->BUFCMW=ON THEN/* BUFFER IN OUTPUT MODE      */
         L     @15,PLHDBUFC(,RPLH)                                 1148
         TM    BUFCMW(@15),B'10000000'                             1148
         BNO   @RF01148                                            1148
*             RWORK0=PLHDBUFC->BUFCORBA;/* YES. USE OUTPUT RBA       */
         L     RWORK0,BUFCORBA(,@15)                               1149
*           ELSE                    /* NO.                           */
*             RWORK0=PLHDBUFC->BUFCDDDD;/* USE INPUT RBA             */
         B     @RC01148                                            1150
@RF01148 L     @15,PLHDBUFC(,RPLH)                                 1150
         L     RWORK0,BUFCDDDD(,@15)                               1150
*           RWORK1=RBUFC->IXHPTLS;  /* PTR LENGTH MASK               */
@RC01148 SLR   RWORK1,RWORK1                                       1151
         IC    RWORK1,IXHPTLS(,RBUFC)                              1151
*           RWORK3=IXSHEP;          /* PTR CURRENT ENTRY             */
         L     RWORK3,IXSHEP+200(,RPLH)                            1152
*           RWORK2=ZERO;            /* CLEAR REGISTER                */
         SLR   RWORK2,RWORK2                                       1153
*           GEN(EX RWORK1,ICMPTR1); /* PICK UP PTR                   */
         EX RWORK1,ICMPTR1
*           RWORK2=RBUFC->IXHBRBA+  /* CONVERT INTO RBA              */
*               (RWORK2*AMDCINV);   /* DETERMINE IF DATA AND         */
         L     @15,AMBDSB(,RAMB)                                   1155
         LR    @09,RWORK2                                          1155
         M     @08,AMDCINV(,@15)                                   1155
         AL    @09,IXHBRBA(,RBUFC)                                 1155
         LR    RWORK2,@09                                          1155
*           IF RWORK0=RWORK2 THEN   /* INDEX POSITION AGREE          */
         CLR   RWORK0,RWORK2                                       1156
         BNE   @RF01156                                            1156
*             DO;                   /* YES.                          */
*               RWORK1=RWORK3->IBFLPF;/* ENTRY F VALUE               */
         SLR   RWORK1,RWORK1                                       1158
         IC    RWORK1,IBFLPF(,RWORK3)                              1158
*               IF PLHSAVE1=>RWORK1 THEN/* COMPARE COUNT => F        */
         C     RWORK1,PLHSAVE1(,RPLH)                              1159
         BH    @RF01159                                            1159
*                 DO;               /* YES.                          */
*                   RPARM1=RWORK3->IBFLPL;/* ENTRY L VALUE           */
         SLR   RPARM1,RPARM1                                       1161
         IC    RPARM1,IBFLPL(,RWORK3)                              1161
*                   RWORK2=RWORK3-RPARM1;/* POSITION OF ENTRY KEY    */
         LR    RWORK2,RWORK3                                       1162
         SLR   RWORK2,RPARM1                                       1162
*                   RBUFC=RPLAREA+AMDRKP+RWORK1;/* NEW KEY F+1     1163
*                                      POSITION                      */
         LH    RBUFC,AMDRKP(,@15)                                  1163
         AL    RBUFC,RPLAREA(,RRPL)                                1163
         ALR   RBUFC,RWORK1                                        1163
*                   RWORK1=RPARM1;  /* COMPARE LENGTH                */
         LR    RWORK1,RPARM1                                       1164
*                   RWORK3=RPARM1;  /* COMPARE LENGTH                */
         LR    RWORK3,RPARM1                                       1165
*                   GEN(CLCL RBUFC,RWORK2) ;/* COMPARE KEYS          */
         CLCL RBUFC,RWORK2
*                   GEN(BNH SQIEXIT);/* OK IF NOT HIGH               */
         BNH SQIEXIT
*                 END;              /* END OF ENTRY COMPARE          */
*             END;                  /* END OF INDEX COMPARE          */
@RF01159 DS    0H                                                  1170
*IPLOCATE:                          /* LOCATE VIA INDEX              */
*           RFY                                                    1170
*             RWORK0 UNRSTD;        /*                               */
@RF01156 DS    0H                                                  1170
IPLOCATE DS    0H                                                  1171
*           RPARM1=RPLAREA+AMDRKP;  /* POINT TO SEARCH ARG           */
         L     @15,AMBDSB(,RAMB)                                   1171
         LH    RPARM1,AMDRKP(,@15)                                 1171
         AL    RPARM1,RPLAREA(,RRPL)                               1171
*I33:                                                              1172
*           DO;                     /* IDACALL(IDA019RA)             */
I33      DS    0H                                                  1173
*             CALL IDA019RA;        /* EXIT TO IDA019RA              */
         L     @15,@CV01000                                        1173
         BALR  @14,@15                                             1173
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*             GEN(LA    @10,4095(@11));/* LOAD SECOND BASE           */
         LA    @10,4095(@11)
*             GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE  */
         L     @10,=A(@PSTART+4095)
*             GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE   */
         USING @PSTART+4095,@10
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I33;                /*                       @X04SVRQ*/
*         END;                      /* END OF LOCATE                 */
*     END;                          /* END OF NOT 1ST TIME           */
*   ELSE                            /* FIRST REQUEST AFTER           */
*     DO;                           /* OPEN                          */
         B     @RC01071                                            1185
@RF01071 DS    0H                                                  1186
*       PLHASKBF=ON;                /* SET ASK BFR           @ZA14833*/
         OI    PLHASKBF(RPLH),B'00100000'                          1186
*       IF AMBCREAT=ON              /* CREATE MODE                   */
*         THEN                      /* YES.                          */
         TM    AMBCREAT(RAMB),B'10000000'                          1187
         BNO   @RF01187                                            1187
*         DO;                       /*                               */
*           PLHNRBA=ARDHRBA;        /* SAVE RBA               @XM9135*/
         L     @15,AMBDSB(,RAMB)                                   1189
         L     @15,AMDPARDB(,@15)                                  1189
         L     @00,ARDHRBA(,@15)                                   1189
         ST    @00,PLHNRBA(,RPLH)                                  1189
*           IF RPLKEY=ON THEN       /* IF RPL SAYS KEY       @ZA14831*/
         TM    RPLKEY(RRPL),B'10000000'                            1190
         BNO   @RF01190                                            1190
*             PLHKEYMD=ON;          /* SET PLH IN KEYED MODE @ZA14831*/
         OI    PLHKEYMD(RPLH),B'00100000'                          1191
*           ELSE                    /* RPL NO SAY KEY        @ZA14831*/
*             PLHKEYMD=OFF;         /* RESET KEYED MODE      @ZA14831*/
         B     @RC01190                                            1192
@RF01190 NI    PLHKEYMD(RPLH),B'11011111'                          1192
*           RPARM1=ZERO;            /* ADD MAX NO BFR        @X04SVRQ*/
@RC01190 SLR   RPARM1,RPARM1                                       1193
*I34:                                                              1194
*           DO;                     /* IDACALL(IDAABF)               */
I34      DS    0H                                                  1195
*             CALL IDAABF;          /* EXIT TO IDAABF                */
         L     @15,@CV00989                                        1195
         BALR  @14,@15                                             1195
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*             GEN(LA    @10,4095(@11));/* LOAD SECOND BASE           */
         LA    @10,4095(@11)
*             GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE  */
         L     @10,=A(@PSTART+4095)
*             GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE   */
         USING @PSTART+4095,@10
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I34;                /* CALL ADD BFR          @X04SVRQ*/
*           IF AMBSPEED=OFF&        /* RECOVERY AND                  */
*               AMDDST='1'B THEN    /* KEY SEQUENCED                 */
         TM    AMBSPEED(RAMB),B'00001000'                          1205
         BNZ   @RF01205                                            1205
         L     @15,AMBDSB(,RAMB)                                   1205
         TM    AMDDST(@15),B'10000000'                             1205
         BNO   @RF01205                                            1205
*             ARDHRBA=AMDCIPCA*AMDCINV;/* 1ST CI IN NEXT CA  @X04SVRQ*/
         L     @14,AMDPARDB(,@15)                                  1206
         L     @00,AMDCINV(,@15)                                   1206
         MH    @00,AMDCIPCA(,@15)                                  1206
         ST    @00,ARDHRBA(,@14)                                   1206
*           ELSE                    /* SPEED OR ESDS                 */
*             ARDHRBA=AMDCINV;      /* NEXT CI RBA           @X04SVRQ
*                                      GET EMPTY BUFFER              */
         B     @RC01205                                            1207
@RF01205 L     @15,AMBDSB(,RAMB)                                   1207
         L     @14,AMDPARDB(,@15)                                  1207
         L     @00,AMDCINV(,@15)                                   1207
         ST    @00,ARDHRBA(,@14)                                   1207
*I35:                                                              1208
*           DO;                     /* IDACALL(IDAGNNFL)             */
@RC01205 DS    0H                                                  1208
I35      DS    0H                                                  1209
*             CALL IDAGNNFL;        /* EXIT TO IDAGNNFL              */
         L     @15,@CV00994                                        1209
         BALR  @14,@15                                             1209
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*             GEN(LA    @10,4095(@11));/* LOAD SECOND BASE           */
         LA    @10,4095(@11)
*             GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE  */
         L     @10,=A(@PSTART+4095)
*             GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE   */
         USING @PSTART+4095,@10
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I35;                /*                       @X04SVRQ*/
*           IF RPLERREG^='00'X THEN /* BUFFER ERROR.         @X04SVRQ*/
         CLI   RPLERREG(RRPL),0                                    1219
         BE    @RF01219                                            1219
*             CALL EXIT;            /* RETURN.               @X04SVRQ*/
         BAL   @14,EXIT                                            1220
*           RPARM1=ZERO;            /* SET RBA + MUST WRITE  @X04SVRQ*/
@RF01219 SLR   RPARM1,RPARM1                                       1221
*           DO;                     /* SET OUTPUT RBA                */
*             BUFCORBA=RPARM1;                                     1223
         L     @15,PLHDBUFC(,RPLH)                                 1223
         ST    RPARM1,BUFCORBA(,@15)                               1223
*             BUFCMW=ON;            /* SET MUST WRITE                */
         OI    BUFCMW(@15),B'10000000'                             1224
*           END;                                                   1225
*           BUFXIRBA=BUFCORBA;      /* SET BUFC EXCL. INPUT RBA.   1226
*                                                            @X04SVRQ*/
         L     @14,PLHDBUFC(,RPLH)                                 1226
         L     @14,BUFCORBA(,@14)                                  1226
         ST    @14,BUFXIRBA(,@15)                                  1226
*           BUFCDDDD=BUFCORBA;      /* SET BUFC INPUT RBA.   @X04SVRQ*/
         ST    @14,BUFCDDDD(,@15)                                  1227
*           BUFCVAL=ON;             /* SET BUFC VALID        @X04SVRQ*/
*           BUFCEXC=ON;             /* SET BUFC EXCL.        @X04SVRQ*/
         OI    BUFCVAL(@15),B'00000110'                            1229
*           RESPECIFY                                              1230
*            (RWORK1,                                              1230
*             RWORK2,                                              1230
*             RWORK3) RSTD;                                        1230
*           RBUFC=PLHDBUFC;         /* BUFC ADDRESS            XM9962*/
         LR    RBUFC,@15                                           1231
*           RWORK2=RBUFC->BUFCBAD;  /* BUFFER ADDRESS                */
         L     RWORK2,BUFCBAD(,RBUFC)                              1232
*           PLHFSP=RWORK2;          /* INIT PTR FREE SPACE           */
         ST    RWORK2,PLHFSP(,RPLH)                                1233
*           PLHRECP=RWORK2;         /* INIT PTR INSERT SLOT          */
         ST    RWORK2,PLHRECP(,RPLH)                               1234
*           RWORK3=AMDCINV          /* NUMBER OF FREE BYTES          */
*               -LENGTH(IDACIDF);   /* IN CI                         */
         L     @15,AMBDSB(,RAMB)                                   1235
         L     RWORK3,AMDCINV(,@15)                                1235
         SL    RWORK3,@CF00068                                     1235
*           RBUFC=RWORK2+RWORK3;    /* POINT TO CIDF                 */
         LR    RBUFC,RWORK2                                        1236
         ALR   RBUFC,RWORK3                                        1236
*           PLHRDFP=RBUFC;          /* INIT PTR TO RDF SLOT          */
         ST    RBUFC,PLHRDFP(,RPLH)                                1237
*           RBUFC->CIDFOSET=ZERO;   /* INIT CIDF OFFSET              */
         SLR   @00,@00                                             1238
         STH   @00,CIDFOSET(,RBUFC)                                1238
*           RBUFC->CIDFLL=RWORK3;   /* INIT CIDF LL                  */
         STH   RWORK3,CIDFLL(,RBUFC)                               1239
*           RWORK1=ZERO;            /* PAD WITH ZERO                 */
         SLR   RWORK1,RWORK1                                       1240
*           GEN(MVCL RWORK2,RBUFC); /* ZERO BUFFER AREA              */
         MVCL RWORK2,RBUFC
*           PLHINVAL=OFF;           /* RESET INVALID FLAG            */
*           PLH1ST=OFF;             /* RESET 1ST REQUEST FLAG        */
         NI    PLHINVAL(RPLH),B'10111101'                          1243
*           AMDASPA=AMDASPA-AMDCINV;/* DECREMENT DATA-SPACE          */
         L     @15,AMBDSB(,RAMB)                                   1244
         L     @00,AMDASPA(,@15)                                   1244
         SL    @00,AMDCINV(,@15)                                   1244
         ST    @00,AMDASPA(,@15)                                   1244
*           RESPECIFY                                              1245
*            (RWORK1,                                              1245
*             RWORK2,                                              1245
*             RWORK3) UNRSTD;                                      1245
*         END;                      /* END OF CREATE 1ST TIME        */
*       ELSE                        /* NOT CREATE                    */
*         GO TO SETPST;             /* LOCATE INS PT         @X04SVMR*/
*     END;                          /* END OF 1ST TIME               */
*SQIEXIT:                                                          1249
*   CALL EXIT;                      /* RETURN                @X04SVES*/
@RC01071 DS    0H                                                  1249
SQIEXIT  BAL   @14,EXIT                                            1249
*EQSEQ:                             /* NEW KEY = PLHKEY              */
*   PLHSAVE1=RPARM1;                /* SET NO. OF = CHARACTERS       */
EQSEQ    ST    RPARM1,PLHSAVE1(,RPLH)                              1250
*   IF AMBCREAT=OFF THEN            /* NOT CREATE AND PREVIOUS       */
         TM    AMBCREAT(RAMB),B'10000000'                          1251
         BNZ   @RF01251                                            1251
*     IF PLHRCODE=RPLPOINT×         /* REQUEST WAS POINT             */
*         PLHRCODE=RPLERASE THEN    /* OR ERASE. CANNOT TELL         */
         CLI   PLHRCODE(RPLH),3                                    1252
         BE    @RT01252                                            1252
         CLI   PLHRCODE(RPLH),5                                    1252
         BE    @RT01252                                            1252
*       GO TO EXCLCK;               /* IF DUPLICATE YET.             */
*DUPREC:                            /* DUPLICATE RECORD              */
*   RPLERREG='08'X;                 /* LOGICAL ERROR                 */
@RF01251 DS    0H                                                  1254
DUPREC   MVI   RPLERREG(RRPL),X'08'                                1254
*   RPLERRCD=RPLDUP;                /* DUPLICATE REC. ERROR          */
         MVI   RPLERRCD(RRPL),X'08'                                1255
*   PLHNOADV=ON;                    /* LEAVE POSITION UNCHANGED.   1256
*                                                            @X04SVRQ*/
         OI    PLHNOADV(RPLH),B'00001000'                          1256
*   CALL MOVEKEY;                   /* SAVE KEY IN PLH       @X04SVRQ*/
         BAL   @14,MOVEKEY                                         1257
*   CALL EXIT;                      /* EXIT                  @X04SVES*/
         BAL   @14,EXIT                                            1258
*ICMPTR1:                                                          1259
*   GEN(ICM  RWORK2,@00,IBFLP3(RWORK3));/* EXTRACT IX ENTRY PTR      */
ICMPTR1  ICM  RWORK2,@00,IBFLP3(RWORK3)
*   END SQICHECK;                                                  1260
@EL00007 DS    0H                                                  1260
@EF00007 DS    0H                                                  1260
@ER00007 BR    @14                                                 1260
*                                                                  1261
*   /*****************************************************************/
*   /*                                                               */
*   /* GET INSERT CONTROL INTERVAL. FOR ADDRESSED INSERT, INSERT     */
*   /* POINT IS END OF DATA SET.                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1261
*GETINCI:                                                          1261
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);                               1261
GETINCI  DS    0H                                                  1262
*   GEN(IDASVR14);                  /* SAVE R14                      */
         IDASVR14
*   IF AMBINBUF=ON&                 /* IF SHR(4), THEN       @X04SVMR*/
*       AMBSCRA=OFF&AMBUCRA=OFF&    /* IF NOT A CATLG,       @X04SVMR*/
*       AMBCAT=OFF THEN             /* SET NO SPACE.         @X04SVMR*/
         TM    AMBINBUF(RAMB),B'00000001'                          1263
         BNO   @RF01263                                            1263
         TM    AMBSCRA(RAMB),B'00011100'                           1263
         BNZ   @RF01263                                            1263
*     DO;                           /*                       @X04SVMR*/
*       RPLERRCD=RPLNOEXT;          /* UNABLE TO EXTEND      @X04SVMR*/
         MVI   RPLERRCD(RRPL),X'1C'                                1265
*       RPLERREG='08'X;             /* LOGICAL ERROR         @X04SVMR*/
         MVI   RPLERREG(RRPL),X'08'                                1266
*       CALL EXIT;                  /* TAKE ERROR EXIT       @X04SVMR*/
         BAL   @14,EXIT                                            1267
*     END;                          /* END OF SHR(4) CODE    @X04SVMR*/
*TEST:                                                             1269
*   RPARM1=ADDR(IDADIWA);           /* POINT TO DIWA.        @X04SVRQ*/
@RF01263 DS    0H                                                  1269
TEST     L     RPARM1,AMBIWA(,RAMB)                                1269
*   GEN REFS(DIWATV)(TS DIWATV(RPARM1));/* SEE IF RESOURCE IS AVAIL.
*                                                            @X04SVRQ*/
         TS DIWATV(RPARM1)
*   BC(8,PROCESS);                  /* DIWA LOCKED.          @X04SVRQ*/
         BC    8,PROCESS                                           1271
*   RFY                                                            1272
*     RWORK0 RSTD;                  /* GET WORK REG.         @X04SVRQ*/
*   RWORK0=DEFR0;                   /* SET DEFER PARAM.      @X04SVRQ*/
         SLR   RWORK0,RWORK0                                       1273
*I37:                                                              1274
*   DO;                             /* IDACALL(IDADRQ)               */
I37      DS    0H                                                  1275
*     CALL IDADRQ;                  /* EXIT TO IDADRQ                */
         L     @15,@CV00992                                        1275
         BALR  @14,@15                                             1275
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(USING *+4095,@10);        /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*     GEN(LA    @10,4095(@11));     /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*     GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE          */
         L     @10,=A(@PSTART+4095)
*     GEN(USING @PSTART+4095,@10);  /* ESTABLISH SECOND BASE         */
         USING @PSTART+4095,@10
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I37;                        /* DEFER REQUEST.        @X04SVRQ*/
*   GOTO TEST;                      /* RETRY RESOURCE.       @X04SVRQ*/
         B     TEST                                                1285
*   RFY                                                            1286
*     RWORK0 UNRSTD;                /* FREE WORK REG.        @X04SVRQ*/
*PROCESS:                           /* DIWA IS NOW LOCKED    @X04SVMR*/
*   DIWPLH=RPLH;                    /* SET DIWA OWNERSHIP    @ZA14809*/
PROCESS  L     @05,AMBIWA(,RAMB)                                   1287
         ST    RPLH,DIWPLH(,@05)                                   1287
*   PLHARDB=0;                      /* RESET PLH POSITION    @ZA07552*/
         SLR   @05,@05                                             1288
         ST    @05,PLHARDB(,RPLH)                                  1288
*   RPARM1=ARDHRBA;                 /* HIGH USED RBA         @X04SVMR*/
         L     @15,AMBDSB(,RAMB)                                   1289
         L     @14,AMDPARDB(,@15)                                  1289
         L     RPARM1,ARDHRBA(,@14)                                1289
*   IF RPARM1^=ZERO THEN            /* IF NON-ZERO,          @X04SVMR*/
         CR    RPARM1,@05                                          1290
         BE    @RF01290                                            1290
*     RPARM1=RPARM1-AMDCINV;        /* BACK UP 1 CI          @X04SVMR*/
         SL    RPARM1,AMDCINV(,@15)                                1291
*   RPLDDDD=RPARM1;                 /* SET RBA IN RPL        @X04SVMR*/
@RF01290 ST    RPARM1,RPLDDDD(,RRPL)                               1292
*   IF RPLSEQ=OFF×                  /* IF DIR/SKP OR         @X04SVMR*/
*       PLHINVAL=ON×                /* PLH NOT VALID OR      @X04SVRQ*/
*       PLHDSCAN=ON×                /* EXCL CTL ERROR OR     @X04SVRQ*/
*       PLHSKPER=ON×                /* READ SKIP ERROR OR    @X04SVRQ*/
*       PLHEODX=ON×                 /* READ END OF DATA OR   @X04SVRQ*/
*       PLHBWD=ON×                  /* PREV. BWD REQ OR      @X04SVRQ*/
*       PLH1ST=ON×                  /* FIRST TIME OR         @X04SVRQ*/
*       BUFCEXC=OFF×                /* BUFFER NOT IN EXCL CNTL     1293
*                                                            @X04SVMR*/
*       BUFCDDDD^=RPARM1×           /* OR NOT RIGHT RBA OR   @X04SVMR*/
*       (PLHRCODE=RPLPUT&PLHLRECL>AMDCINV-LENGTH(IDACIDF)-LENGTH(IDARDF
*       ))×                         /* PREV PUT S.R. OR      @X04SVRQ*/
*       AMBGSR=ON×AMBLSR=ON THEN    /* SHARED RESRC          @X04SVMR*/
*                                                                  1293
         TM    RPLSEQ(RRPL),B'00100000'                            1293
         BZ    @RT01293                                            1293
         TM    PLHINVAL(RPLH),B'00100111'                          1293
         BNZ   @RT01293                                            1293
         TM    PLHBWD(RPLH),B'00010000'                            1293
         BO    @RT01293                                            1293
         TM    PLH1ST(RPLH),B'01000000'                            1293
         BO    @RT01293                                            1293
         L     @05,PLHDBUFC(,RPLH)                                 1293
         TM    BUFCEXC(@05),B'00000010'                            1293
         BZ    @RT01293                                            1293
         CL    RPARM1,BUFCDDDD(,@05)                               1293
         BNE   @RT01293                                            1293
         CLI   PLHRCODE(RPLH),1                                    1293
         BNE   @GL00041                                            1293
         L     @05,AMBDSB(,RAMB)                                   1293
         L     @05,AMDCINV(,@05)                                   1293
         SL    @05,@CF00289                                        1293
         C     @05,PLHLRECL(,RPLH)                                 1293
         BL    @RT01293                                            1293
@GL00041 TM    AMBGSR(RAMB),B'01100000'                            1293
         BZ    @RF01293                                            1293
@RT01293 DS    0H                                                  1294
*     /***************************************************************/
*     /*                                                             */
*     /* CALL DIRECT RECORD LOCATE                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  1294
*I38:                                                              1294
*     DO;                           /* IDACALL(IDA019RA)             */
I38      DS    0H                                                  1295
*       CALL IDA019RA;              /* EXIT TO IDA019RA              */
         L     @15,@CV01000                                        1295
         BALR  @14,@15                                             1295
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(USING *+4095,@10);      /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*       GEN(LA    @10,4095(@11));   /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*       GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE        */
         L     @10,=A(@PSTART+4095)
*       GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE         */
         USING @PSTART+4095,@10
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I38;                      /*                       @X04SVRQ*/
*   IF RPLERREG='00'X               /* LOCATE ERROR                  */
*     THEN                          /* NO.                           */
@RF01293 CLI   RPLERREG(RRPL),0                                    1305
         BNE   @RF01305                                            1305
*     DO;                           /*                               */
*       RBUFC=PLHDBUFC->BUFCBAD;    /* LOAD BUFFER ADDRESS           */
         L     @15,PLHDBUFC(,RPLH)                                 1307
         L     RBUFC,BUFCBAD(,@15)                                 1307
*       BUFCORBA=BUFCDDDD;          /* SET OUTPUT RBA                */
         L     @05,BUFCDDDD(,@15)                                  1308
         ST    @05,BUFCORBA(,@15)                                  1308
*       RPARM1=RBUFC+AMDCINV        /* POINT TO CIDF                 */
*           -LENGTH(IDACIDF);       /*                               */
         L     @05,AMBDSB(,RAMB)                                   1309
         LR    RPARM1,RBUFC                                        1309
         AL    RPARM1,AMDCINV(,@05)                                1309
         SL    RPARM1,@CF00068                                     1309
*       PLHFSP=RPARM1->CIDFOSET+RBUFC;/* INIT. PLH FREE SP PTR       */
         LR    @05,RBUFC                                           1310
         AH    @05,CIDFOSET(,RPARM1)                               1310
         ST    @05,PLHFSP(,RPLH)                                   1310
*       PLHRECP=PLHFSP;             /* INIT. PLH RECORD PTR          */
         ST    @05,PLHRECP(,RPLH)                                  1311
*       PLHRDFP=PLHFSP+RPARM1->CIDFLL;/* INIT. PLH RDF PTR           */
         AH    @05,CIDFLL(,RPARM1)                                 1312
         ST    @05,PLHRDFP(,RPLH)                                  1312
*     END;                          /* END OF NO LOCATE ERROR        */
*   ELSE                            /* ERROR.                @X04SVRQ*/
*     DIWATV=ZERO;                  /* UNLOCK DIWA.          @X04SVRQ*/
         B     @RC01305                                            1314
@RF01305 L     @05,AMBIWA(,RAMB)                                   1314
         MVI   DIWATV(@05),X'00'                                   1314
*   CALL EXIT;                      /* RETURN                @X04SVES*/
@RC01305 BAL   @14,EXIT                                            1315
*   END GETINCI;                    /* END OF GETINCI PROC.          */
@EL00008 DS    0H                                                  1316
@EF00008 DS    0H                                                  1316
@ER00008 BR    @14                                                 1316
*                                                                  1317
*   /*****************************************************************/
*   /*                                                               */
*   /* SCANDATA - REESTABLISH PLH RECORD POSITION AFTER OBTAINING    */
*   /* EXCLUSIVE USE OF BUFFER IN SEQUENTIAL MODE.                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1317
*SCANDATA:                                                         1317
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          1317
SCANDATA DS    0H                                                  1318
*   GEN(IDASVR14);                  /* SAVE REGISTER 14              */
         IDASVR14
*   IF RPLKEY=ON                    /* KEYED REQUEST                 */
*     THEN                                                         1319
         TM    RPLKEY(RRPL),B'10000000'                            1319
         BNO   @RF01319                                            1319
*     RPARM1=ADDR(PLHKEY);          /* POINT TO SEARCH ARG           */
         L     RPARM1,PLHKEYPT(,RPLH)                              1320
*   ELSE                            /* NO.                           */
*     RPARM1=ADDR(PLHDDDD);         /* USE RBA AS SEARCH ARG         */
         B     @RC01319                                            1321
@RF01319 LA    RPARM1,PLHDDDD(,RPLH)                               1321
*   IF PLHNOADV=ON                  /* NO ADVANCE SET                */
*     THEN                                                         1322
@RC01319 TM    PLHNOADV(RPLH),B'00001000'                          1322
         BNO   @RF01322                                            1322
*     PLHSVADV=ON;                  /* REMEMBER NO ADVANCE           */
         OI    PLHSVADV(RPLH),B'00000010'                          1323
*   ELSE                                                           1324
*     PLHSVADV=OFF;                 /* REMEMBER ADVANCE              */
         B     @RC01322                                            1324
@RF01322 NI    PLHSVADV(RPLH),B'11111101'                          1324
*   PLHSAVE2=RPLOPTCD;              /* SAVE OPTCD IN PLH     @XA05682*/
@RC01322 L     @05,RPLOPTCD(,RRPL)                                 1325
         ST    @05,PLHSAVE2(,RPLH)                                 1325
*   RPLGEN=OFF;                     /* GENERIC OFF           @XA05682*/
*   RPLDIR=ON;                      /* FORCE DIRECT          @XA05682*/
*   RPLSKP=OFF;                     /* SKP SEQ OFF           @XA05682*/
         OI    RPLDIR(RRPL),B'01000000'                            1328
         NI    RPLGEN(RRPL),B'11101101'                            1328
*   RPLLRD=OFF;                     /* LRD OFF.              @X04SVRQ*/
         NI    RPLLRD(RRPL),B'11110111'                            1329
*   IF RPLSEQ=ON                    /* SEQ REQUEST           @XA05682*/
*     THEN                          /* YES                   @XA05682*/
         TM    RPLSEQ(RRPL),B'00100000'                            1330
         BNO   @RF01330                                            1330
*     DO;                           /* SET SEARCH            @XA05682*/
*       RPLKGE=ON;                  /* KGE ON                @XA05682*/
*       RPLSEQ=OFF;                 /* TURN OFF SEQ          @XA05682*/
         OI    RPLKGE(RRPL),B'00000100'                            1333
         NI    RPLSEQ(RRPL),B'11011111'                            1333
*     END;                          /* END SEQ PATH          @XA05682*/
*   ELSE                                                           1335
*     ;                             /* NULL                  @XA05682*/
@RF01330 DS    0H                                                  1336
*I39:                                                              1336
*   DO;                             /* IDACALL(IDA019RA)             */
I39      DS    0H                                                  1337
*     CALL IDA019RA;                /* EXIT TO IDA019RA              */
         L     @15,@CV01000                                        1337
         BALR  @14,@15                                             1337
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(USING *+4095,@10);        /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*     GEN(LA    @10,4095(@11));     /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*     GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE          */
         L     @10,=A(@PSTART+4095)
*     GEN(USING @PSTART+4095,@10);  /* ESTABLISH SECOND BASE         */
         USING @PSTART+4095,@10
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I39;                        /* DIRECT LOCATE         @X04SVRQ*/
*   RPLOPTCD=PLHSAVE2;              /* RESTORE RPL           @XA05682*/
         L     @05,PLHSAVE2(,RPLH)                                 1347
         ST    @05,RPLOPTCD(,RRPL)                                 1347
*   IF RPLERREG='00'X THEN          /* ERROR                         */
         CLI   RPLERREG(RRPL),0                                    1348
         BNE   @RF01348                                            1348
*     DO;                           /* NO.                           */
*       PLHDSCAN=OFF;               /* RESET SCANDATA FLAG           */
         NI    PLHDSCAN(RPLH),B'11111110'                          1350
*       IF PLHSVADV=ON THEN         /* NO ADVANCE PLH BEFORE         */
         TM    PLHSVADV(RPLH),B'00000010'                          1351
         BNO   @RF01351                                            1351
*         PLHNOADV=ON;              /* SET INDICATOR IN PLH          */
         OI    PLHNOADV(RPLH),B'00001000'                          1352
*       ELSE                        /*                               */
*         DO;                       /*                               */
         B     @RC01351                                            1353
@RF01351 DS    0H                                                  1354
*           RPARM1=PLHRECP+AMDRKP;  /* LOCATE RECORD KEY             */
         L     @05,AMBDSB(,RAMB)                                   1354
         LH    RPARM1,AMDRKP(,@05)                                 1354
         AL    RPARM1,PLHRECP(,RPLH)                               1354
*           IF RPLKEY=OFF×          /* ADDRESSED REQUEST             */
*               RPLBWD=ON×          /* BWD REQUEST OR        @X04SVRQ*/
*               PLHKEY(1:AMDKEYLN)= /* COMPARE WITH PLHKEY           */
*               RPARM1->KEY(1:AMDKEYLN) THEN/* IF EQUAL MOVE         */
         TM    RPLBWD(RRPL),B'00010000'                            1355
         BNZ   @RT01355                                            1355
         TM    RPLKEY(RRPL),B'10000000'                            1355
         BNO   @RT01355                                            1355
         L     @15,PLHKEYPT(,RPLH)                                 1355
         LH    @05,AMDKEYLN(,@05)                                  1355
         BCTR  @05,0                                               1355
         EX    @05,@SC01195                                        1355
         BNE   @RF01355                                            1355
@RT01355 DS    0H                                                  1356
*             CALL ADVPLH;          /* FORWARD 1 RECORD              */
         BAL   @14,ADVPLH                                          1356
*         END;                      /* END ADV PLH                   */
*     END;                          /* END NO ERROR                  */
*   ELSE                                                           1359
*     IF RPLERREG='08'X THEN        /* LOGIC ERROR?          @ZA07544*/
         B     @RC01348                                            1359
@RF01348 CLI   RPLERREG(RRPL),8                                    1359
         BNE   @RF01359                                            1359
*       DO;                         /* YES IF HERE           @ZA07544*/
*         IF RPLERRCD=RPLEXCL THEN  /* EXCLUSIVE CTL         @ZA07544*/
         CLI   RPLERRCD(RRPL),20                                   1361
         BNE   @RF01361                                            1361
*           DO;                     /* PROCESS EXCL CTL      @ZA07544*/
*             PLHINVAL=OFF;         /* SET PLH VALID         @ZA07544*/
*             PLHDSCAN=ON;          /* SET SCANDATA FLAG             */
         OI    PLHDSCAN(RPLH),B'00000001'                          1364
         NI    PLHINVAL(RPLH),B'11111101'                          1364
*             IF PLHSVADV=ON THEN   /* ARE WE REMEMBERING TO NOT   1365
*                                      ADVANCE PLH           @ZA07544*/
         TM    PLHSVADV(RPLH),B'00000010'                          1365
         BNO   @RF01365                                            1365
*               PLHNOADV=ON;        /* YES, SET FLAG         @ZA07544*/
         OI    PLHNOADV(RPLH),B'00001000'                          1366
*           END;                    /* END EXCL CTL          @ZA07544*/
*         ELSE                      /* NOT EXCLUSIVE ERROR   @X04SVRQ*/
*           IF RPLBWD=ON&RPLERRCD=RPLNOREC THEN/* BWD/NRF    @ZA07544*/
         B     @RC01361                                            1368
@RF01361 TM    RPLBWD(RRPL),B'00010000'                            1368
         BNO   @RF01368                                            1368
         CLI   RPLERRCD(RRPL),16                                   1368
         BNE   @RF01368                                            1368
*             DO;                   /* CLEAR NRF ERROR.      @X04SVRQ*/
*               RPLERREG='00'X;     /* CLEAR RPL ERROR.      @X04SVRQ*/
         MVI   RPLERREG(RRPL),X'00'                                1370
*               RPLERRCD='00'X;     /* CLEAR RPL ERROR.      @X04SVRQ*/
         MVI   RPLERRCD(RRPL),X'00'                                1371
*               PLHINVAL=OFF;       /* SET PLH VALID.        @X04SVRQ*/
*               PLHDSCAN=OFF;       /* RESET SCANDATA FLAG.  @X04SVRQ*/
         NI    PLHINVAL(RPLH),B'11111100'                          1373
*               IF PLHRECP=PLHDBUFC->BUFCBAD×PLHRECP^=PLHFSP THEN/*
*                                      IF POSITION IS NOT AT END OF
*                                      BUFFER                @ZA07544*/
         L     @05,PLHRECP(,RPLH)                                  1374
         L     @15,PLHDBUFC(,RPLH)                                 1374
         C     @05,BUFCBAD(,@15)                                   1374
         BE    @RT01374                                            1374
         C     @05,PLHFSP(,RPLH)                                   1374
         BE    @RF01374                                            1374
@RT01374 DS    0H                                                  1375
*                 CALL ADVPLH;      /* ADVANCE POSITION.     @X04SVRQ*/
         BAL   @14,ADVPLH                                          1375
*               ELSE                /* POSITION AT END OF CI @ZA07544*/
*                 DO;               /* SO DO SPECIAL HANDLING      1376
*                                                            @ZA07544*/
         B     @RC01374                                            1376
@RF01374 DS    0H                                                  1377
*                   IF PLHRDFP->RDF1ST=ON THEN/* IF SPANNED RECORD 1377
*                                      SEGMENT, POINT        @ZA07544*/
         L     @05,PLHRDFP(,RPLH)                                  1377
         TM    RDF1ST(@05),B'00010000'                             1377
         BNO   @RF01377                                            1377
*                     PLHRECP=PLHDBUFC->BUFCBAD;/* BACK TO BEGINNING
*                                                            @ZA07544*/
         L     @05,PLHDBUFC(,RPLH)                                 1378
         L     @05,BUFCBAD(,@05)                                   1378
         ST    @05,PLHRECP(,RPLH)                                  1378
*                   ELSE            /* NOT SPANNED           @ZA07544*/
*                     DO;           /* FOR NON SPANNED RECORD BACK UP
*                                      TO START OF RECORD    @ZA07544*/
         B     @RC01377                                            1379
@RF01377 DS    0H                                                  1380
*                       PLHRECP=PLHRECP-PLHLRECL;/* MOVE POINTER BACK
*                                                            @ZA07544*/
         L     @05,PLHRECP(,RPLH)                                  1380
         SL    @05,PLHLRECL(,RPLH)                                 1380
         ST    @05,PLHRECP(,RPLH)                                  1380
*                       PLHRDFC=PLHSAVE6;/* SET COUNT FOR BACKWARD 1381
*                                      DIRECTION             @ZA07544*/
         L     @05,PLHSAVE6(,RPLH)                                 1381
         STH   @05,PLHRDFC(,RPLH)                                  1381
*                     END;          /*                       @ZA07544*/
*                 END;              /* END SPECIAL HANDLING AT END OF
*                                      CI                    @ZA07544*/
*             END;                  /* END CLEAR NRF ERROR.  @X04SVRQ*/
*           ELSE                    /* NOT BWD WITH NRF      @ZA07544*/
*             IF RPLERRCD=RPLINRBA THEN/* INVALID RBA?       @ZA07544*/
         B     @RC01368                                            1385
@RF01368 CLI   RPLERRCD(RRPL),32                                   1385
         BNE   @RF01385                                            1385
*               DO;                 /* CLEAR INVALID RBA ERR @ZA07544*/
*                 RPLERREG='00'X;   /* CLEAR RPL ERROR.      @ZA07544*/
         MVI   RPLERREG(RRPL),X'00'                                1387
*                 RPLERRCD='00'X;   /* CLEAR RPL ERROR.      @ZA07544*/
         MVI   RPLERRCD(RRPL),X'00'                                1388
*                 PLHINVAL=OFF;     /* SET PLH VALID.        @ZA07544*/
*                 PLHDSCAN=OFF;     /* RESET SCANDATA FLAG.  @ZA07544*/
         NI    PLHINVAL(RPLH),B'11111100'                          1390
*                 CALL ADVPLH;      /* ADVANCE POSITION.     @ZA07544*/
         BAL   @14,ADVPLH                                          1391
*               END;                /* END INVALID RBA       @ZA07544*/
*       END;                        /* END LOCATE ERROR.     @X04SVRQ*/
@RF01385 DS    0H                                                  1393
@RC01368 DS    0H                                                  1393
@RC01361 DS    0H                                                  1394
*   CALL EXIT;                      /* RETURN                @X04SVES*/
@RF01359 DS    0H                                                  1394
@RC01348 BAL   @14,EXIT                                            1394
*   END SCANDATA;                   /* END OF SCANDATA               */
@EL00009 DS    0H                                                  1395
@EF00009 DS    0H                                                  1395
@ER00009 BR    @14                                                 1395
*                                                                  1396
*   /*****************************************************************/
*   /*                                                               */
*   /* * * * * * * * * * * * * * * * * * * * * * * * * *     @X04SVES*/
*   /*                                                       @X04SVES*/
*   /* EXIT SUBROUTINE                                       @X04SVES*/
*   /* FUNCTION - RESTORES REGISTER 14 FROM PLH              @X04SVES*/
*   /* PUSHDOWN LIST AND RETURNS                             @X04SVES*/
*   /*                                                       @X04SVES*/
*   /* * * * * * * * * * * * * * * * * * * * * * * * * *     @X04SVES*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1396
*EXIT:                                                             1396
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @X04SVES*/
EXIT     DS    0H                                                  1397
*   GEN(IDARST14);                  /* RESTORE REG 14        @X04SVES*/
         IDARST14
*   END EXIT;                       /* RETURN                @X04SVES*/
@EL00010 DS    0H                                                  1398
@EF00010 DS    0H                                                  1398
@ER00010 BR    @14                                                 1398
*                                                                  1399
*   /*****************************************************************/
*   /*                                                               */
*   /* MODULE EXIT ROUTINE --- IF SHARED RESOURCES, FREES INDEX      */
*   /* BUFFER (IF ANY). RESTORES REGISTER 14 & RETURNS TO CALLER.    */
*   /* ALSO FREES DATA BUFFER (IF ANY) IF SHROPTION 4        @ZA29446*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1399
*MODEXIT:                                                          1399
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @X04SVRQ*/
MODEXIT  DS    0H                                                  1400
*   IF AMBGSR=ON×AMBLSR=ON×AMBINBUF=ON THEN/* SHR RESOURCE OR SHARED
*                                      DATA SET.             @X04SVRQ*/
         TM    AMBGSR(RAMB),B'01100000'                            1400
         BNZ   @RT01400                                            1400
         TM    AMBINBUF(RAMB),B'00000001'                          1400
         BNO   @RF01400                                            1400
@RT01400 DS    0H                                                  1401
*     DO;                           /*                       @X04SVRQ*/
*       RBUFC=PLHIBUFC;             /* POINT TO IX BUFC      @X04SVRQ*/
         L     RBUFC,PLHIBUFC(,RPLH)                               1402
*       IF RBUFC^=ZERO THEN         /* INDEX BFR PRESENT     @X04SVRQ*/
         LTR   RBUFC,RBUFC                                         1403
         BZ    @RF01403                                            1403
*         DO;                       /*                       @X04SVRQ*/
*           RAMB=AMBLIX;            /* POINT TO INDEX AMB.   @X04SVRQ*/
         L     @05,RPLDACB(,RRPL)                                  1405
         L     @05,ACBAMBL(,@05)                                   1405
         L     RAMB,AMBLIX(,@05)                                   1405
*I40:                                                              1406
*           DO;                     /* IDACALL(IDAFREEB)             */
I40      DS    0H                                                  1407
*             CALL IDAFREEB;        /* EXIT TO IDAFREEB              */
         L     @15,@CV00993                                        1407
         BALR  @14,@15                                             1407
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*             GEN(LA    @10,4095(@11));/* LOAD SECOND BASE           */
         LA    @10,4095(@11)
*             GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE  */
         L     @10,=A(@PSTART+4095)
*             GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE   */
         USING @PSTART+4095,@10
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I40;                /* FREE IX BFR           @X04SVRQ*/
*           RAMB=AMBLDTA;           /* POINT TO DATA AMB.    @X04SVRQ*/
         L     @05,RPLDACB(,RRPL)                                  1417
         L     @05,ACBAMBL(,@05)                                   1417
         L     RAMB,AMBLDTA(,@05)                                  1417
*         END;                      /*                       @X04SVRQ*/
*       IF AMBINBUF=ON THEN         /* ONLY SHR OPTION 4     @ZA29446*/
@RF01403 TM    AMBINBUF(RAMB),B'00000001'                          1419
         BNO   @RF01419                                            1419
*         DO;                       /*                       @ZA29446*/
*           RBUFC=PLHDBUFC;         /* POINT TO DATA BUFC    @ZA29446*/
         L     RBUFC,PLHDBUFC(,RPLH)                               1421
*           IF RBUFC^=ZERO&         /* DATA BUFFER PRESENT   @ZA29446*/
*               RBUFC->BUFCMW=ON THEN/* AND NEEDS WRITING    @ZA29446*/
         LTR   RBUFC,RBUFC                                         1422
         BZ    @RF01422                                            1422
         TM    BUFCMW(RBUFC),B'10000000'                           1422
         BNO   @RF01422                                            1422
*             DO;                                                  1423
*I41:                                                              1424
*               DO;                 /* IDACALL(IDAWRBFR)             */
I41      DS    0H                                                  1425
*                 CALL IDAWRBFR;    /* EXIT TO IDAWRBFR              */
         L     @15,@CV00999                                        1425
         BALR  @14,@15                                             1425
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE     */
         USING *+4095,@10
*                 GEN(LA    @10,4095(@11));/* LOAD SECOND BASE       */
         LA    @10,4095(@11)
*                 GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND 1430
*                                      BASE                          */
         L     @10,=A(@PSTART+4095)
*                 GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND  1431
*                                      BASE                          */
         USING @PSTART+4095,@10
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I41;            /* WRITE THE BUFFER      @ZA29446*/
*             END;                                                 1435
*         END;                      /*                       @ZA29446*/
@RF01422 DS    0H                                                  1437
*     END;                          /*                       @X04SVRQ*/
@RF01419 DS    0H                                                  1438
*   IF RPLERREG^=0&                 /* WAS THERE ANY ERROR   @ZA14809*/
*       DIWATV^=0&                  /* IS DIWA LOCKED        @ZA14809*/
*       DIWPLH=RPLH THEN            /* DIWA OWNED BY PLH     @ZA14809*/
@RF01400 CLI   RPLERREG(RRPL),0                                    1438
         BE    @RF01438                                            1438
         L     @05,AMBIWA(,RAMB)                                   1438
         CLI   DIWATV(@05),0                                       1438
         BE    @RF01438                                            1438
         L     @15,DIWPLH(,@05)                                    1438
         CR    @15,RPLH                                            1438
         BNE   @RF01438                                            1438
*     DO;                                                          1439
*       IF DIWATV^=0&               /* IS DIWA LOCKED        @ZA14809*/
*           DIWPLH=RPLH THEN        /* DIWA OWNED BY PLH     @ZA14809*/
         CLI   DIWATV(@05),0                                       1440
         BE    @RF01440                                            1440
         CR    @15,RPLH                                            1440
         BNE   @RF01440                                            1440
*         DIWATV=ZERO;              /* YES, UNLOCK DIWA      @ZA12223*/
         MVI   DIWATV(@05),X'00'                                   1441
*     END;                                                         1442
@RF01440 DS    0H                                                  1443
*   GEN(IDARST14);                  /* RESTORE REG 14        @X04SVRQ*/
@RF01438 DS    0H                                                  1443
         IDARST14
*   RETURN;                         /*                       @X04SVRQ*/
@EL00011 DS    0H                                                  1444
@EF00011 DS    0H                                                  1444
@ER00011 BR    @14                                                 1444
*   END MODEXIT;                    /*                       @X04SVRQ*/
@PB00011 DS    0H                                                  1446
*   GEN(IDAPATCH);                  /* DEFINE PATCH AREA             */
         IDAPATCH
*   END IDA019R4                                                   1447
*                                                                  1447
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDADIWA )                                       */
*/*%INCLUDE SYSLIB  (IDACIDF )                                       */
*/*%INCLUDE SYSLIB  (IDARDF  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IDAIXSPL)                                       */
*/*%INCLUDE SYSLIB  (IDAIRD  )                                       */
*                                                                  1447
*       ;                                                          1447
@EL00001 DS    0H                                                  1447
@EF00001 DS    0H                                                  1447
@ER00001 BR    @14                                                 1447
@DATA    DS    0H
@SM01187 MVC   PLHKEY(0,@15),KEY(RWORK2)
@SC01190 CLC   PLHKEY(0,@07),KEY(RWORK2)
@SC01195 CLC   PLHKEY(0,@15),KEY(RPARM1)
@DATD    DSECT
         DS    0F
IDA019R4 CSECT
         DS    0F
@CF00054 DC    F'1'
@CH00054 EQU   @CF00054+2
@CF00158 DC    F'3'
@CF00068 DC    F'4'
@CF00289 DC    F'7'
@DATD    DSECT
         DS    0D
IDA019R4 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00989 DC    V(IDAABF)
@CV00990 DC    V(IDAADVPH)
@CV00991 DC    V(IDADARTV)
@CV00992 DC    V(IDADRQ)
@CV00993 DC    V(IDAFREEB)
@CV00994 DC    V(IDAGNNFL)
@CV00995 DC    V(IDAGNXT)
@CV00996 DC    V(IDAGRB)
@CV00997 DC    V(IDARXBD)
@CV00998 DC    V(IDATJXIT)
@CV00999 DC    V(IDAWRBFR)
@CV01000 DC    V(IDA019RA)
@CV01002 DC    V(IDA019S6)
@CV01003 DC    V(IDA019RL)
@CV01004 DC    V(IDA019RM)
@CV01005 DC    V(IDA019RU)
@CV01001 DC    V(IDA019RK)
         DS    0D
HWORD4   DC    H'4'
@CB01013 DC    X'0000'
@DATD    DSECT
*                                                          /*@X04SVLC*/
RDFCTNUA EQU   X'40'                    COMPLEX RDF INDICATOR
RDFCTNUX EQU   X'FF'-RDFCTNUA           RESET COMPLEX MASK
RDFREPLA EQU   X'08'                    COUNT RDF INDICATOR
RDFREPLX EQU   X'FF'-RDFREPLA           RESET COUNT MASK
RDFEMPTI EQU   X'04'                    EMPTY RECORD       /*@X04SVLC*/
RDFLEN   EQU   3                        LENGTH OF RDF
RDFLLOFF EQU   1                        OFFSET WITHIN RDF TO LL
RDFSGLR  EQU   X'00'                   MASK FOR SINGLE RECORD RDF
RDFGRP   EQU   RDFCTNUA                 MASK FOR LL RDF OF A GROUP RDF
RDFCNT   EQU   RDFREPLA                 MASK FOR COUNT RDF
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019R4 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RWORK0   EQU   @00
RRPL     EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RPARM1   EQU   @12
R14      EQU   @14
RWORK4   EQU   @08
RWORK5   EQU   @09
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
R15      EQU   @15
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLREQ   EQU   RPLIDWD+2
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLLOC   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLGEN   EQU   RPLOPT1
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLKEY   EQU   RPLOPT2
RPLADR   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLNSP   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLBUFL  EQU   RPLCOMN+52
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLDDDD  EQU   RPLRBAR+4
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLPATH EQU   AMBLTYPE
AMBLSHAR EQU   IDAAMBL+33
AMBLWRIT EQU   AMBLSHAR
AMBLFLG1 EQU   IDAAMBL+35
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
IDAAMB   EQU   0
AMBPH    EQU   IDAAMB+12
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBCREAT EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBINBUF EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBCAT   EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBUPX   EQU   AMBINFL
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBLSR   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
IDAPLHDR EQU   0
PLHCNT   EQU   IDAPLHDR+1
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHASKBF EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHUPD   EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHEFLGS EQU   IDAPLH+4
PLH1ST   EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHDSCAN EQU   PLHEFLGS
PLHRSTRT EQU   PLHEFLGS+1
PLHFLG3  EQU   IDAPLH+6
PLHSRBSG EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHAFLGS EQU   IDAPLH+7
PLHRAE   EQU   PLHAFLGS
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHRCODE EQU   IDAPLH+41
PLHARDB  EQU   IDAPLH+44
PLHLRECL EQU   IDAPLH+48
PLHDBUFC EQU   IDAPLH+52
PLHRECP  EQU   IDAPLH+60
PLHFSP   EQU   IDAPLH+64
PLHRDFP  EQU   IDAPLH+68
PLHRDFC  EQU   IDAPLH+72
PLHDIOB  EQU   IDAPLH+76
PLHSAVE1 EQU   IDAPLH+84
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE6 EQU   IDAPLH+104
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHDDDD  EQU   PLHEOVPT
PLHNRBA  EQU   IDAPLH+184
PLHIBUFC EQU   IDAPLH+188
PLHISPLP EQU   IDAPLH+196
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHSRCSG EQU   IDAPLH+242
PLHKEYPT EQU   IDAPLH+248
PLHEND   EQU   IDAPLH+280
PLHKEY   EQU   0
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCVAL  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCDDDD EQU   IDABUFC+8
BUFCORBA EQU   IDABUFC+12
BUFCBAD  EQU   IDABUFC+20
BUFCINV  EQU   IDABUFC+28
BUFXIRBA EQU   IDABUFC+40
IDADIWA  EQU   0
DIWATV   EQU   IDADIWA+1
DIWFLG1  EQU   IDADIWA+4
DIWFLG2  EQU   IDADIWA+5
DIWPLH   EQU   IDADIWA+16
DIWSAVE  EQU   IDADIWA+28
IDACIDF  EQU   0
CIDFOSET EQU   IDACIDF
CIDFLL   EQU   IDACIDF+2
CIDFBUSY EQU   CIDFLL
IDARDF   EQU   0
RDFRBYTE EQU   IDARDF
RDFCTNU  EQU   RDFRBYTE
RDFSEG   EQU   RDFRBYTE
RDFNOT1  EQU   RDFSEG
RDF1ST   EQU   RDFSEG
RDFLL    EQU   IDARDF+1
IDADATA  EQU   0
IDAKEY   EQU   0
KEY      EQU   IDAKEY
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDDST   EQU   AMDATTR
AMDNEST  EQU   IDAAMDSB+4
AMDRKP   EQU   IDAAMDSB+6
AMDKEYLN EQU   IDAAMDSB+8
AMDCIPCA EQU   IDAAMDSB+12
AMDCINV  EQU   IDAAMDSB+20
AMDLRECL EQU   IDAAMDSB+24
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDPARDB EQU   IDAAMDSB+36
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
AMDNLR   EQU   AMDSTAT+12
AMDDELR  EQU   AMDSTAT+16
AMDIREC  EQU   AMDSTAT+20
AMDUPR   EQU   AMDSTAT+24
AMDRETR  EQU   AMDSTAT+28
AMDASPA  EQU   AMDSTAT+32
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDEOD   EQU   ARDTYPE
ARDNPTR  EQU   IDAARDB+4
ARDHRBA  EQU   IDAARDB+12
ARDERBA  EQU   IDAARDB+16
ARDPRF   EQU   IDAARDB+28
IDAIXSPL EQU   0
IXSILN   EQU   IDAIXSPL+13
IXSBFLG  EQU   IDAIXSPL+17
IXSHEP   EQU   IDAIXSPL+20
IXSSEP   EQU   IDAIXSPL+24
IXSLEP   EQU   IDAIXSPL+28
IDAIXH   EQU   0
IXHFLPLN EQU   IDAIXH+2
IXHPTLS  EQU   IDAIXH+3
IXHBRBA  EQU   IDAIXH+4
IXHSEO   EQU   IDAIXH+22
IDAIBFLP EQU   0
IBFLPF   EQU   IDAIBFLP
IBFLPL   EQU   IDAIBFLP+1
IBFLP3   EQU   IDAIBFLP+2
IBFLP2   EQU   IBFLP3
IDASELL  EQU   0
IDAIXK   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00040 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
IXKEY    EQU   IDAIXK
IXSELL   EQU   IDASELL
IBFLP1   EQU   IBFLP2
IXHLEO   EQU   IDAIXH+20
IXHFSO   EQU   IDAIXH+18
IXHFLGS  EQU   IDAIXH+17
IXHLV    EQU   IDAIXH+16
IXHXX    EQU   IDAIXH+12
IXHHP    EQU   IDAIXH+8
IXHLL    EQU   IDAIXH
IXSPEC   EQU   IDAIXSPL+19
IXSEKON  EQU   IDAIXSPL+18
@NM00059 EQU   IXSBFLG
IXSLELV  EQU   IXSBFLG
IXSSSRH  EQU   IXSBFLG
IXSNOSR  EQU   IDAIXSPL+16
IXSKLEN  EQU   IDAIXSPL+14
IXSTLN   EQU   IDAIXSPL+12
IXSARG   EQU   IDAIXSPL+8
IXSBUFC  EQU   IDAIXSPL+4
IXSSTRBA EQU   IDAIXSPL
ARDKEYS  EQU   IDAARDB+29
@NM00058 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDHKRBA EQU   IDAARDB+8
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00057 EQU   IDAAMDSB+41
@NM00056 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMDATA   EQU   IDADATA
RDFEMPTY EQU   RDFRBYTE
RDFREPL  EQU   RDFRBYTE
RDFTYPE  EQU   RDFRBYTE
@NM00055 EQU   CIDFLL
@NM00054 EQU   IDADIWA+92
@NM00053 EQU   IDADIWA+88
@NM00052 EQU   IDADIWA+84
@NM00051 EQU   IDADIWA+80
@NM00050 EQU   IDADIWA+76
@NM00049 EQU   IDADIWA+72
@NM00048 EQU   IDADIWA+68
@NM00047 EQU   IDADIWA+64
@NM00046 EQU   IDADIWA+60
@NM00045 EQU   IDADIWA+56
DIWINRBA EQU   IDADIWA+52
DIWRKCT  EQU   IDADIWA+48
DIWSAVE5 EQU   DIWSAVE+16
DIWSAVE4 EQU   DIWSAVE+12
DIWSAVE3 EQU   DIWSAVE+8
DIWSAVE2 EQU   DIWSAVE+4
DIWSAVE1 EQU   DIWSAVE
DIWSPLTP EQU   IDADIWA+24
DIWBUFC  EQU   IDADIWA+20
DIWHRBA  EQU   IDADIWA+12
DIWLRBA  EQU   IDADIWA+8
@NM00044 EQU   IDADIWA+6
DIWFSPF  EQU   DIWFLG2
DIW1ST   EQU   DIWFLG1
DIWNOT1  EQU   DIWFLG1
DIWSHIFT EQU   DIWFLG1
DIWGSPC  EQU   DIWFLG1
DIWEOKR  EQU   DIWFLG1
DIWPFERR EQU   DIWFLG1
DIWCISPL EQU   DIWFLG1
DIWCAS   EQU   DIWFLG1
DIWLEN   EQU   IDADIWA+2
DIWID    EQU   IDADIWA
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCHAIN EQU   IDABUFC+48
BUFXORBA EQU   IDABUFC+44
BUFCNXT2 EQU   IDABUFC+37
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCCPA  EQU   IDABUFC+16
BUFCAMB  EQU   BUFCPLH
@NM00043 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00042 EQU   IDABUFDR+16
BUFDBUFC EQU   IDABUFDR+12
@NM00041 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00039 EQU   IDAPLH+265
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00038 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHRBUFC EQU   IDAPLH+192
PLHAR14  EQU   IDAPLH+176
@NM00037 EQU   IDAPLH+172
@NM00036 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHAMB   EQU   IDAPLH+108
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHNBUFC EQU   IDAPLH+56
@NM00035 EQU   IDAPLH+43
PLHEOVR  EQU   IDAPLH+42
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
@NM00034 EQU   PLHEFLGS+1
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
@NM00033 EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHID    EQU   IDAPLHDR
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00032 EQU   AMBCSWD1+1
@NM00031 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
@NM00030 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00029 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00028 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00027 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
@NM00026 EQU   AMBINFL
@NM00025 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00024 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00023 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00022 EQU   AMBDSORG
AMBUBF   EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
@NM00021 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00020 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00019 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00018 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00017 EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00016 EQU   IDAAMBL+31
@NM00015 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00014 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00013 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00012 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00011 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00010 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00009 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00008 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00007 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00006 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00005 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00004 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00003 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
@NM00002 EQU   RPLRBAR+3
@NM00001 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLWAITX EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLECBIN EQU   RPLECBSW
RPLASY   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00184 EQU   @RC00170
@RF00190 EQU   @RC00188
@RF00236 EQU   @RC00234
@RF00386 EQU   @RC00327
@RC00356 EQU   @RC00327
@RF00481 EQU   @RC00472
@RC00413 EQU   @RC00405
@RT00597 EQU   @EL00003
@RT00690 EQU   GETNXBF
@RF00708 EQU   GETNXBF
@RT00763 EQU   MVREC
@RF01058 EQU   @RC01055
@RT01090 EQU   IPLOCATE
@RT01095 EQU   SETPST
@RT01120 EQU   IPLOCATE
@RT01122 EQU   IPLOCATE
@RT01124 EQU   IPLOCATE
@RT01144 EQU   IPLOCATE
@RC01132 EQU   @RC01071
@RF01187 EQU   SETPST
@RT01252 EQU   EXCLCK
@RC01351 EQU   @RC01348
@RF01355 EQU   @RC01348
@RF01365 EQU   @RC01361
@RC01374 EQU   @RC01368
@RC01377 EQU   @RC01368
@PB00010 EQU   @PB00011
@RF00373 EQU   @RC00356
@RF00514 EQU   @RC00413
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IDA019R4,(C'PLS2156',0701,78172)
