         TITLE 'IDA019RQ - VSAM RELATIVE RECORD PUT/ERASE              *
                        '
IDA019RQ CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA019RQ  78.172'                                 0001
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
*                                                                  0154
         IDASVR14
*   /*****************************************************************/
*   /*                                                               */
*   /* VALIDATE PUT REQUEST ---                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0155
*   IF AMBLFULL=OFF&AMBLUPD=OFF THEN/* OUTPUT NOT ALLOWED FOR THIS 0155
*                                      USER.                         */
         L     @10,RPLDACB(,RRPL)                                  0155
         L     @10,ACBAMBL(,@10)                                   0155
         TM    AMBLFULL(@10),B'10100000'                           0155
         BNZ   @RF00155                                            0155
*     DO;                           /* INVALID ACCESS ERROR.         */
*       RPLERREG='08'X;             /* SET LOGICAL ERROR IN RPL.     */
         MVI   RPLERREG(RRPL),X'08'                                0157
*       RPLERRCD=RPLINACC;          /* SET INVALID ACCESS ERROR.     */
         MVI   RPLERRCD(RRPL),X'44'                                0158
*       CALL EXIT;                  /* RETURN.                       */
         BAL   @14,EXIT                                            0159
*     END;                          /* END INVALID ACCESS ERROR.     */
*   IF RPLREQ=RPLPUT&RPLLOC=ON THEN /* PUT LOCATE REQUEST.           */
@RF00155 CLI   RPLREQ(RRPL),1                                      0161
         BNE   @RF00161                                            0161
         TM    RPLLOC(RRPL),B'10000000'                            0161
         BNO   @RF00161                                            0161
*     DO;                           /* INVALID LOCATE REQUEST.       */
*       RPLERREG='08'X;             /* SET LOGICAL ERROR IN RPL.     */
         MVI   RPLERREG(RRPL),X'08'                                0163
*       RPLERRCD=RPLINLOC;          /* SET INVALID LOCATE REQ.       */
         MVI   RPLERRCD(RRPL),X'54'                                0164
*       CALL EXIT;                  /* RETURN.                       */
         BAL   @14,EXIT                                            0165
*     END;                          /* END INVALID LOCATE REQUEST    */
*                                                                  0167
*   /*****************************************************************/
*   /*                                                               */
*   /* PUT UPDATE OR ERASE REQUEST ---                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0167
*   IF(RPLREQ=RPLPUT&RPLUPD=ON)×RPLREQ=RPLERASE THEN/* PUT UPDATE OR
*                                      ERASE REQUEST.                */
@RF00161 CLI   RPLREQ(RRPL),1                                      0167
         BNE   @GL00002                                            0167
         TM    RPLUPD(RRPL),B'00000010'                            0167
         BO    @RT00167                                            0167
@GL00002 CLI   RPLREQ(RRPL),5                                      0167
         BNE   @RF00167                                            0167
@RT00167 DS    0H                                                  0168
*     DO;                           /* PUT UPD/ERASE REQUEST.        */
*       IF PLHUPD=OFF THEN          /* NO PREVIOUS GET UPDATE.       */
         TM    PLHUPD(RPLH),B'10000000'                            0169
         BNZ   @RF00169                                            0169
*         DO;                                                      0170
*           RPLERREG='08'X;         /* SET LOGICAL ERROR IN RPL.     */
         MVI   RPLERREG(RRPL),X'08'                                0171
*           RPLERRCD=RPLINUPD;      /* SET NO GET UPDATE ERROR.      */
         MVI   RPLERRCD(RRPL),X'5C'                                0172
*           CALL EXIT;              /* RETURN.                       */
         BAL   @14,EXIT                                            0173
*         END;                                                     0174
*       IF RPLREQ=RPLPUT THEN       /* PUT REQUEST.                  */
@RF00169 CLI   RPLREQ(RRPL),1                                      0175
         BNE   @RF00175                                            0175
*         DO;                       /* PROCESS PUT REQUEST.          */
*           IF RPLRLEN^=PLHLRECL THEN/* RECORD LENGTH NOT EQUAL TO 0177
*                                      DEFINE RECORDSIZE.            */
         CLC   RPLRLEN(4,RRPL),PLHLRECL(RPLH)                      0177
         BE    @RF00177                                            0177
*             DO;                                                  0178
*               RPLERREG='08'X;     /* SET LOGICAL ERROR IN RPL.     */
         MVI   RPLERREG(RRPL),X'08'                                0179
*               RPLERRCD=RPLDLCER;  /* SET UPDATE REC LENGTH ERROR.  */
         MVI   RPLERRCD(RRPL),X'64'                                0180
*               CALL EXIT;          /* RETURN.                       */
         BAL   @14,EXIT                                            0181
*             END;                                                 0182
*           RFY                                                    0183
*            (RWORK2,                                              0183
*             RWORK3,                                              0183
*             RWORK4,                                              0183
*             RWORK5) RSTD;         /* RESTRICT REGS.                */
@RF00177 DS    0H                                                  0184
*           RWORK2=PLHRECP;         /* TO ADDRESS.                   */
         L     RWORK2,PLHRECP(,RPLH)                               0184
*           RWORK4=RPLAREA;         /* FROM ADDRESS.                 */
         L     RWORK4,RPLAREA(,RRPL)                               0185
*           RWORK3=PLHLRECL;        /* TO LENGTH.                    */
         L     RWORK3,PLHLRECL(,RPLH)                              0186
*           RWORK5=RWORK3;          /* FROM LENGTH.                  */
         LR    RWORK5,RWORK3                                       0187
*           GEN(MVCL RWORK2,RWORK4);/* MOVE USER RECORD TO BUFFER.   */
         MVCL RWORK2,RWORK4
*         END;                      /* END PROCESS PUT REQ.          */
*       ELSE                        /* ERASE REQUEST.                */
*         DO;                       /* PROCESS ERASE REQUEST.        */
         B     @RC00175                                            0190
@RF00175 DS    0H                                                  0191
*           RWORK2=PLHRECP;         /* TO ADDRESS.                   */
         L     RWORK2,PLHRECP(,RPLH)                               0191
*           RWORK3=PLHLRECL;        /* TO LENGTH.                    */
         L     RWORK3,PLHLRECL(,RPLH)                              0192
*           RWORK5=ZERO;            /* PAD CHAR.                     */
         SLR   RWORK5,RWORK5                                       0193
*           GEN(MVCL RWORK2,RWORK4);/* ZERO RECORD IN BUFFER.        */
         MVCL RWORK2,RWORK4
*           RFY                                                    0195
*            (RWORK2,                                              0195
*             RWORK3,                                              0195
*             RWORK4,                                              0195
*             RWORK5) UNRSTD;       /* FREE REGS.                    */
*           RDFEMPTY=ON;            /* SET RDF EMPTY.                */
         L     @10,PLHRDFP(,RPLH)                                  0196
         OI    RDFEMPTY(@10),B'00000100'                           0196
*         END;                      /* END PROCESS ERASE REQ.        */
*       RPARM1=BUFCDDDD;            /* OUTPUT RBA.                   */
@RC00175 L     @10,PLHDBUFC(,RPLH)                                 0198
         L     RPARM1,BUFCDDDD(,@10)                               0198
*       DO;                         /* SET OUTPUT RBA                */
*         BUFCORBA=RPARM1;                                         0200
         ST    RPARM1,BUFCORBA(,@10)                               0200
*         BUFCMW=ON;                /* SET MUST WRITE                */
         OI    BUFCMW(@10),B'10000000'                             0201
*       END;                        /* SET BUFC MW & OUTPUT RBA.     */
*       PLHUPD=OFF;                 /* RESET PLH UPDATE FLAG.        */
         NI    PLHUPD(RPLH),B'01111111'                            0203
*       RPLDDDD=PLHSAVE1;           /* SET RPL RBA.                  */
         L     @10,PLHSAVE1(,RPLH)                                 0204
         ST    @10,RPLDDDD(,RRPL)                                  0204
*       PLHRCODE=RPLREQ;            /* SAVE REQUEST CODE.            */
         IC    @10,RPLREQ(,RRPL)                                   0205
         STC   @10,PLHRCODE(,RPLH)                                 0205
*       IF RPLREQ=RPLPUT THEN       /* PUT REQUEST.                  */
         CLI   RPLREQ(RRPL),1                                      0206
         BNE   @RF00206                                            0206
*         DO;                                                      0207
*           AMDUPR=AMDUPR+ONE;      /* INCREMENT UPDATE COUNT.       */
         L     @10,AMBDSB(,RAMB)                                   0208
         LA    @05,1                                               0208
         AL    @05,AMDUPR(,@10)                                    0208
         ST    @05,AMDUPR(,@10)                                    0208
*           PLHJCODE=PLHJPUT;       /* SET JOURNAL CODE = PUT.       */
         MVI   PLHJCODE(RPLH),B'00000100'                          0209
*         END;                                                     0210
*       ELSE                        /* ERASE REQUEST.                */
*         DO;                                                      0211
         B     @RC00206                                            0211
@RF00206 DS    0H                                                  0212
*           AMDDELR=AMDDELR+ONE;    /* INCREMENT DELETE COUNT.       */
         L     @10,AMBDSB(,RAMB)                                   0212
         LA    @05,1                                               0212
         AL    @05,AMDDELR(,@10)                                   0212
         ST    @05,AMDDELR(,@10)                                   0212
*           AMDIREC=AMDIREC-ONE;    /* DECREMENT NO. INSERTS COUNT.  */
         L     @05,AMDIREC(,@10)                                   0213
         BCTR  @05,0                                               0213
         ST    @05,AMDIREC(,@10)                                   0213
*           PLHJCODE=PLHJERS;       /* SET JOURNAL CODE = ERASE.     */
         MVI   PLHJCODE(RPLH),B'00001000'                          0214
*         END;                                                     0215
*       IF RPLDIR=ON&RPLNSP=OFF THEN/* DIR & NOT NSP REQ.            */
@RC00206 TM    RPLDIR(RRPL),B'01000000'                            0216
         BNO   @RF00216                                            0216
         TM    RPLNSP(RRPL),B'00000001'                            0216
         BNZ   @RF00216                                            0216
*         DO;                                                      0217
*           PLHINVAL=ON;            /* SET PLH INVALID.              */
         OI    PLHINVAL(RPLH),B'00000010'                          0218
*           IF AMBDFR=OFF THEN      /* NOT DEFER WRITE.              */
         TM    AMBDFR(RAMB),B'00001000'                            0219
         BNZ   @RF00219                                            0219
*             DO;                                                  0220
*               RBUFC=PLHDBUFC;     /* POINT TO DATA BUFC.           */
         L     RBUFC,PLHDBUFC(,RPLH)                               0221
*I02:                                                              0222
*               DO;                 /* IDACALL(IDAWRBFR)             */
I02      DS    0H                                                  0223
*                 CALL IDAWRBFR;    /* EXIT TO IDAWRBFR              */
         L     @15,@CV00946                                        0223
         BALR  @14,@15                                             0223
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I02;            /* WRITE DATA BUFFER.            */
*             END;                                                 0229
*           RBUFC=PLHDBUFC;         /* POINT TO DATA BUFC.           */
@RF00219 L     RBUFC,PLHDBUFC(,RPLH)                               0230
*I03:                                                              0231
*           DO;                     /* IDACALL(IDAFREEB)             */
I03      DS    0H                                                  0232
*             CALL IDAFREEB;        /* EXIT TO IDAFREEB              */
         L     @15,@CV00947                                        0232
         BALR  @14,@15                                             0232
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I03;                /* FREE DATA BUFFER.             */
*         END;                                                     0238
*       IF AMBJRN=ON THEN           /* JOURNAL EXIT.                 */
@RF00216 TM    AMBJRN(RAMB),B'00000010'                            0239
         BNO   @RF00239                                            0239
*I04:                                                              0240
*         DO;                       /* IDACALL(IDATJXIT)             */
I04      DS    0H                                                  0241
*           CALL IDATJXIT;          /* EXIT TO IDATJXIT              */
         L     @15,@CV00949                                        0241
         BALR  @14,@15                                             0241
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I04;                  /* CALL JOURNAL EXIT ROUTINE.    */
*       CALL EXIT;                  /* RETURN.                       */
@RF00239 BAL   @14,EXIT                                            0247
*     END;                          /* END PUT UPD/ERASE REQ.        */
*                                                                  0249
*   /*****************************************************************/
*   /*                                                               */
*   /* PUT INSERT REQUEST ---                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0249
*   IF RPLBWD=ON THEN               /* BACKWARD REQUEST.             */
@RF00167 TM    RPLBWD(RRPL),B'00010000'                            0249
         BNO   @RF00249                                            0249
*     DO;                           /* INVALID BACKWARD REQUEST.     */
*       RPLERREG='08'X;             /* SET LOGICAL ERROR IN RPL.     */
         MVI   RPLERREG(RRPL),X'08'                                0251
*       RPLERRCD=RPLPUTBK;          /* SET PUT INSERT BACKWARD ERROR.*/
         MVI   RPLERRCD(RRPL),X'CC'                                0252
*       CALL EXIT;                  /* RETURN.                       */
         BAL   @14,EXIT                                            0253
*     END;                          /* END INVALID BACKWARD ERROR.   */
*   IF RPLRLEN^=PLHLRECL THEN       /* RECORD LENGTH NOT EQUAL TO  0255
*                                      DEFINE RECORDSIZE.            */
@RF00249 CLC   RPLRLEN(4,RRPL),PLHLRECL(RPLH)                      0255
         BE    @RF00255                                            0255
*     DO;                           /* INCORRECT RECORD LEN. ERROR.  */
*       RPLERREG='08'X;             /* SET LOGICAL ERROR IN RPL.     */
         MVI   RPLERREG(RRPL),X'08'                                0257
*       RPLERRCD=RPLINLEN;          /* SET RECORD LENGTH ERROR.      */
         MVI   RPLERRCD(RRPL),X'6C'                                0258
*       CALL EXIT;                  /* RETURN.                       */
         BAL   @14,EXIT                                            0259
*     END;                          /* END RECORD LENGTH ERROR.      */
*   IF RPLSEQ=OFF THEN              /* NON-SEQUENTIAL REQUEST.       */
*                                                                  0261
@RF00255 TM    RPLSEQ(RRPL),B'00100000'                            0261
         BNZ   @RF00261                                            0261
*     /***************************************************************/
*     /*                                                             */
*     /* PROCESS SKP/DIR REQUEST.                                    */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0262
*     CALL PUTNONSQ;                /* PROCESS SKP/DIR REQUEST.      */
         BAL   @14,PUTNONSQ                                        0262
*   ELSE                            /* SEQUENTIAL REQUEST.           */
*     IF PLH1ST=ON THEN             /* PROCESS 1ST PUT INSERT REQ.   */
         B     @RC00261                                            0263
@RF00261 TM    PLH1ST(RPLH),B'01000000'                            0263
         BNO   @RF00263                                            0263
*       CALL PUTSQ1ST;              /* CALL PUT SEQ 1ST.             */
         BAL   @14,PUTSQ1ST                                        0264
*     ELSE                          /* NOT 1ST SEQ REQUEST.          */
*       IF AMBCREAT=ON THEN         /* CREATE MODE.                  */
         B     @RC00263                                            0265
@RF00263 TM    AMBCREAT(RAMB),B'10000000'                          0265
         BNO   @RF00265                                            0265
*         CALL PUTSQCRE;            /* CALL PUT SEQ CREATE.          */
         BAL   @14,PUTSQCRE                                        0266
*       ELSE                        /* NOT CREATE MODE.              */
*                                                                  0267
*         /***********************************************************/
*         /*                                                         */
*         /* PROCESS NON-CREATE SEQ. REQ.                            */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0267
*         CALL PUTSQNCR;            /* PROCESS NON-CREATE SEQ REQ.   */
         B     @RC00265                                            0267
@RF00265 BAL   @14,PUTSQNCR                                        0267
*   IF RPLERREG^='00'X THEN         /* ERROR OCCURRED.               */
@RC00265 DS    0H                                                  0268
@RC00263 DS    0H                                                  0268
@RC00261 CLI   RPLERREG(RRPL),0                                    0268
         BE    @RF00268                                            0268
*     CALL EXIT;                    /* RETURN.                       */
         BAL   @14,EXIT                                            0269
*   IF RDFEMPTY=OFF THEN            /* RECORD IS NOT EMPTY.          */
@RF00268 L     @10,PLHRDFP(,RPLH)                                  0270
         TM    RDFEMPTY(@10),B'00000100'                           0270
         BNZ   @RF00270                                            0270
*     DO;                           /* DUPLICATE RECORD ERROR.       */
*       RPLERREG='08'X;             /* SET LOGICAL ERROR IN RPL.     */
         MVI   RPLERREG(RRPL),X'08'                                0272
*       RPLERRCD=RPLDUP;            /* SET DUPLICATE RECORD ERROR.   */
         MVI   RPLERRCD(RRPL),X'08'                                0273
*       CALL EXIT;                  /* RETURN.                       */
         BAL   @14,EXIT                                            0274
*     END;                          /* END DUPLICATE RECORD ERROR.   */
*   PLHNOADV=OFF;                   /* RESET NO ADVANCE FLAG.        */
@RF00270 NI    PLHNOADV(RPLH),B'11110111'                          0276
*   AMDIREC=AMDIREC+ONE;            /* INCREMENT STATISTICS NO. OF 0277
*                                      INSERTED RECORDS.             */
         L     @10,AMBDSB(,RAMB)                                   0277
         LA    @05,1                                               0277
         AL    @05,AMDIREC(,@10)                                   0277
         ST    @05,AMDIREC(,@10)                                   0277
*   RFY                                                            0278
*    (RWORK2,                                                      0278
*     RWORK3,                                                      0278
*     RWORK4,                                                      0278
*     RWORK5) RSTD;                 /* RESTRICT REGS.                */
*   RWORK2=PLHRECP;                 /* TO ADDRESS.                   */
         L     RWORK2,PLHRECP(,RPLH)                               0279
*   RWORK4=RPLAREA;                 /* FROM ADDRESS.                 */
         L     RWORK4,RPLAREA(,RRPL)                               0280
*   RWORK3=PLHLRECL;                /* TO LENGTH.                    */
         L     RWORK3,PLHLRECL(,RPLH)                              0281
*   RWORK5=RWORK3;                  /* FROM LENGTH.                  */
         LR    RWORK5,RWORK3                                       0282
*   GEN(MVCL RWORK2,RWORK4);        /* MOVE USER RECORD TO BUFFER.   */
         MVCL RWORK2,RWORK4
*   RFY                                                            0284
*    (RWORK2,                                                      0284
*     RWORK3,                                                      0284
*     RWORK4,                                                      0284
*     RWORK5) UNRSTD;               /* DROP REGS.                    */
*   RDFEMPTY=OFF;                   /* SET RDF NOT EMPTY.            */
         L     @10,PLHRDFP(,RPLH)                                  0285
         NI    RDFEMPTY(@10),B'11111011'                           0285
*   BUFCMW=ON;                      /* SET BUFC MUST WRITE.          */
         L     @10,PLHDBUFC(,RPLH)                                 0286
         OI    BUFCMW(@10),B'10000000'                             0286
*   IF AMBSPEED=ON&BUFCORBA<PLHHIREC THEN/* SPEED & BFR RBA IS LT  0287
*                                      HI-RECORD RBA.                */
         TM    AMBSPEED(RAMB),B'00001000'                          0287
         BNO   @RF00287                                            0287
         CLC   BUFCORBA(4,@10),PLHHIREC(RPLH)                      0287
         BNL   @RF00287                                            0287
*     DO;                                                          0288
*       IF RPLDIR=ON&RPLNSP=OFF THEN/* REQ IS DIR & NOT NSP.         */
         TM    RPLDIR(RRPL),B'01000000'                            0289
         BNO   @RF00289                                            0289
         TM    RPLNSP(RRPL),B'00000001'                            0289
         BNZ   @RF00289                                            0289
*         DO;                                                      0290
*           RBUFC=PLHDBUFC;         /* POINT TO DATA BUFC.           */
         LR    RBUFC,@10                                           0291
*I05:                                                              0292
*           DO;                     /* IDACALL(IDASBF)               */
I05      DS    0H                                                  0293
*             CALL IDASBF;          /* EXIT TO IDASBF                */
         L     @15,@CV00953                                        0293
         BALR  @14,@15                                             0293
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I05;                /* SUBTRACT DATA BUFC.           */
*           PLHINVAL=ON;            /* SET PLH INVALID.              */
         OI    PLHINVAL(RPLH),B'00000010'                          0299
*         END;                                                     0300
*     END;                                                         0301
*   ELSE                            /* NOT SPEED OR BFR RBA GTE    0302
*                                      HI-RECORD RBA.                */
*     DO;                                                          0302
         B     @RC00287                                            0302
@RF00287 DS    0H                                                  0303
*       IF AMBCREAT=ON&BUFCORBA=>PLHHIREC THEN/* CREATE & CURRENT BFR
*                                      RBA GTE HI-RECORD RBA.        */
         TM    AMBCREAT(RAMB),B'10000000'                          0303
         BNO   @RF00303                                            0303
         L     @10,PLHDBUFC(,RPLH)                                 0303
         L     @10,BUFCORBA(,@10)                                  0303
         CL    @10,PLHHIREC(,RPLH)                                 0303
         BL    @RF00303                                            0303
*         PLHHIREC=BUFCORBA+AMDCINV;/* SET HI-RECORD RBA TO NEXT CI
*                                      PAST CURRENT.                 */
         L     @05,AMBDSB(,RAMB)                                   0304
         AL    @10,AMDCINV(,@05)                                   0304
         ST    @10,PLHHIREC(,RPLH)                                 0304
*       IF RPLDIR=ON&RPLNSP=OFF THEN/* REQUEST IS DIR & NOT NSP.     */
@RF00303 TM    RPLDIR(RRPL),B'01000000'                            0305
         BNO   @RF00305                                            0305
         TM    RPLNSP(RRPL),B'00000001'                            0305
         BNZ   @RF00305                                            0305
*         DO;                       /* RELEASE PLH STRING POSITION.  */
*           IF AMBDFR=OFF THEN      /* NOT DEFER WRITE.              */
         TM    AMBDFR(RAMB),B'00001000'                            0307
         BNZ   @RF00307                                            0307
*             DO;                                                  0308
*               RBUFC=PLHDBUFC;     /* POINT TO DATA BUFC.           */
         L     RBUFC,PLHDBUFC(,RPLH)                               0309
*I06:                                                              0310
*               DO;                 /* IDACALL(IDAWRBFR)             */
I06      DS    0H                                                  0311
*                 CALL IDAWRBFR;    /* EXIT TO IDAWRBFR              */
         L     @15,@CV00946                                        0311
         BALR  @14,@15                                             0311
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I06;            /* WRITE THE BUFFER.             */
*             END;                                                 0317
*           RBUFC=PLHDBUFC;         /* POINT TO DATA BUFC.           */
@RF00307 L     RBUFC,PLHDBUFC(,RPLH)                               0318
*I07:                                                              0319
*           DO;                     /* IDACALL(IDAFREEB)             */
I07      DS    0H                                                  0320
*             CALL IDAFREEB;        /* EXIT TO IDAFREEB              */
         L     @15,@CV00947                                        0320
         BALR  @14,@15                                             0320
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I07;                /* FREE THE BUFFER.              */
*           PLHINVAL=ON;            /* SET PLH INVALID.              */
         OI    PLHINVAL(RPLH),B'00000010'                          0326
*         END;                      /* END RELEASE PLH STRING POS.   */
*     END;                                                         0328
@RF00305 DS    0H                                                  0329
*   IF RPLSEQ=ON THEN               /* SEQUENTIAL REQUEST.           */
@RC00287 TM    RPLSEQ(RRPL),B'00100000'                            0329
         BNO   @RF00329                                            0329
*     DO;                                                          0330
*       PLHRRN=((PLHSAV1X/AMDCINV)*AMDNSLOT)+((PLHSAV1X//AMDCINV)/ 0331
*           PLHLRECL)+ONE;          /* CONVERT REC RBA TO REL REC NO.
*                                      & SAVE                @ZA10887*/
         L     @10,PLHKEYPT(,RPLH)                                 0331
         L     @05,PLHSAV1X(,RPLH)                                 0331
         L     @15,AMBDSB(,RAMB)                                   0331
         L     @14,AMDCINV(,@15)                                   0331
         LR    @07,@05                                             0331
         SLR   @06,@06                                             0331
         DR    @06,@14                                             0331
         M     @06,AMDNSLOT(,@15)                                  0331
         LR    @09,@05                                             0331
         SLR   @08,@08                                             0331
         DR    @08,@14                                             0331
         LR    @15,@08                                             0331
         SLR   @14,@14                                             0331
         D     @14,PLHLRECL(,RPLH)                                 0331
         ALR   @07,@15                                             0331
         AL    @07,@CF00053                                        0331
         ST    @07,PLHRRN(,@10)                                    0331
*       ARGFIELD=PLHRRN;            /* SET RRN IN RPL ARG.           */
         L     @10,RPLARG(,RRPL)                                   0332
         ST    @07,ARGFIELD(,@10)                                  0332
*     END;                                                         0333
*   ELSE                            /* NOT SEQ REQUEST.              */
*     PLHRRN=ARGFIELD;              /* SAVE ARG RRN IN PLH.          */
         B     @RC00329                                            0334
@RF00329 L     @10,PLHKEYPT(,RPLH)                                 0334
         L     @05,RPLARG(,RRPL)                                   0334
         L     @05,ARGFIELD(,@05)                                  0334
         ST    @05,PLHRRN(,@10)                                    0334
*   PLHBWD=OFF;                     /* RESET BWD FLAG IN PLH.        */
@RC00329 NI    PLHBWD(RPLH),B'11101111'                            0335
*   PLHUPD=OFF;                     /* RESET GET UPDATE FLAG.        */
         NI    PLHUPD(RPLH),B'01111111'                            0336
*   RPLDDDD=PLHSAVE1;               /* SET RECORD RBA IN RPL.        */
         L     @10,PLHSAVE1(,RPLH)                                 0337
         ST    @10,RPLDDDD(,RRPL)                                  0337
*   PLHRCODE=RPLREQ;                /* SAVE REQUEST CODE.            */
         IC    @10,RPLREQ(,RRPL)                                   0338
         STC   @10,PLHRCODE(,RPLH)                                 0338
*   IF AMBJRN=ON THEN               /* JOURNAL EXIT SPECIFIED.       */
         TM    AMBJRN(RAMB),B'00000010'                            0339
         BNO   @RF00339                                            0339
*     DO;                           /* SETUP JOURNAL EXIT.           */
*       PLHJCODE=PLHJPUT;           /* SET JOURNAL CODE = PUT.       */
         MVI   PLHJCODE(RPLH),B'00000100'                          0341
*I08:                                                              0342
*       DO;                         /* IDACALL(IDATJXIT)             */
I08      DS    0H                                                  0343
*         CALL IDATJXIT;            /* EXIT TO IDATJXIT              */
         L     @15,@CV00949                                        0343
         BALR  @14,@15                                             0343
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I08;                    /* CALL JOURNAL EXIT ROUTINE.    */
*     END;                          /* END JOURNAL EXIT.             */
*   CALL EXIT;                      /* RETURN.                       */
@RF00339 BAL   @14,EXIT                                            0350
*PUTSQ1ST:                                                         0351
*                                                                  0351
*   /*****************************************************************/
*   /*                                                               */
*   /* PUT SEQUENTIAL 1ST ROUTINE ---                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0351
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0351
         B     @PB00002                                            0351
PUTSQ1ST DS    0H                                                  0352
*   GEN(IDASVR14);                  /* SAVE REGISTER 14.             */
         IDASVR14
*   PLHASKBF=ON;                    /* SET ASK BUFFER.               */
         OI    PLHASKBF(RPLH),B'00100000'                          0353
*   RPARM1=ZERO;                    /* ADD MAX. NO. OF BUFFERS.      */
         SLR   RPARM1,RPARM1                                       0354
*I09:                                                              0355
*   DO;                             /* IDACALL(IDAABF)               */
I09      DS    0H                                                  0356
*     CALL IDAABF;                  /* EXIT TO IDAABF                */
         L     @15,@CV00943                                        0356
         BALR  @14,@15                                             0356
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I09;                        /* CALL ADD BUFFER.              */
*   PLHSAVE1=ZERO;                  /* CURRENT RBA=1ST REC. OF DS.   */
         SLR   @10,@10                                             0362
         ST    @10,PLHSAVE1(,RPLH)                                 0362
*   IF AMBCREAT=OFF THEN            /* NOT CREATE MODE.              */
         TM    AMBCREAT(RAMB),B'10000000'                          0363
         BNZ   @RF00363                                            0363
*     DO;                                                          0364
*       RPARM1=PLHSAVE1;            /* RBA OF 1ST REQUEST.           */
         LR    RPARM1,@10                                          0365
*       ARGFIELD=ONE;               /* SET RPL ARG = RRN 1 FOR DRL.  */
         L     @10,RPLARG(,RRPL)                                   0366
         MVC   ARGFIELD(4,@10),@CF00053                            0366
*I10:                                                              0367
*       DO;                         /* IDACALL(IDARRDRL)             */
I10      DS    0H                                                  0368
*         CALL IDARRDRL;            /* EXIT TO IDARRDRL              */
         L     @15,@CV00956                                        0368
         BALR  @14,@15                                             0368
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I10;                    /* CALL DIRECT RECORD LOCATE.    */
*       IF RPLERREG^='00'X THEN     /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0374
         BE    @RF00374                                            0374
*         CALL EXIT;                /* RETURN.                       */
         BAL   @14,EXIT                                            0375
*       BUFCORBA=PLHSAVE1;          /* SET BUFC OUTPUT RBA.          */
@RF00374 L     @10,PLHDBUFC(,RPLH)                                 0376
         L     @05,PLHSAVE1(,RPLH)                                 0376
         ST    @05,BUFCORBA(,@10)                                  0376
*     END;                                                         0377
*   ELSE                            /* CREATE MODE.                  */
*     DO;                           /* GET EMPTY BUFFER.             */
         B     @RC00363                                            0378
@RF00363 DS    0H                                                  0379
*       IF AMBSPEED=ON THEN         /* CREATE SPEED MODE.            */
         TM    AMBSPEED(RAMB),B'00001000'                          0379
         BNO   @RF00379                                            0379
*         DO;                                                      0380
*           ARDHRBA=AMDCINV;        /* SET HI-USED RBA TO NEXT CI.   */
         L     @10,AMBDSB(,RAMB)                                   0381
         L     @05,AMDPARDB(,@10)                                  0381
         L     @00,AMDCINV(,@10)                                   0381
         ST    @00,ARDHRBA(,@05)                                   0381
*           AMDNLR=AMDNSLOT;        /* SET TOTAL NO. RECS = 1ST CI.  */
         L     @05,AMDNSLOT(,@10)                                  0382
         ST    @05,AMDNLR(,@10)                                    0382
*         END;                                                     0383
*       ELSE                        /* NOT CREATE SPEED MODE.        */
*         DO;                                                      0384
         B     @RC00379                                            0384
@RF00379 DS    0H                                                  0385
*           ARDHRBA=AMDCIPCA*AMDCINV;/* SET HI-USED RBA TO NEXT CA.  */
         L     @10,AMBDSB(,RAMB)                                   0385
         L     @05,AMDPARDB(,@10)                                  0385
         LH    @15,AMDCIPCA(,@10)                                  0385
         LR    @07,@15                                             0385
         M     @06,AMDCINV(,@10)                                   0385
         ST    @07,ARDHRBA(,@05)                                   0385
*           AMDNLR=AMDNSLOT*AMDCIPCA;/* SET TOTAL NO. RECS. = 1ST CA.*/
         M     @14,AMDNSLOT(,@10)                                  0386
         ST    @15,AMDNLR(,@10)                                    0386
*         END;                                                     0387
*       AMDASPA=ARDERBA-ARDHRBA;    /* SET NO. BYTES FREE SPACE.     */
@RC00379 L     @10,AMBDSB(,RAMB)                                   0388
         L     @05,AMDPARDB(,@10)                                  0388
         L     @00,ARDERBA(,@05)                                   0388
         SL    @00,ARDHRBA(,@05)                                   0388
         ST    @00,AMDASPA(,@10)                                   0388
*I11:                                                              0389
*       DO;                         /* IDACALL(IDAGNNFL)             */
I11      DS    0H                                                  0390
*         CALL IDAGNNFL;            /* EXIT TO IDAGNNFL              */
         L     @15,@CV00945                                        0390
         BALR  @14,@15                                             0390
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I11;                    /* CALL GET NEXT NO FILL.        */
*       IF RPLERREG^='00'X THEN     /* BUFFER ERROR.                 */
         CLI   RPLERREG(RRPL),0                                    0396
         BE    @RF00396                                            0396
*         CALL EXIT;                /* RETURN.                       */
         BAL   @14,EXIT                                            0397
*       RFY                                                        0398
*         IDABUFC BASED(RBUFC);     /* BASE BUFC ON REG.             */
@RF00396 DS    0H                                                  0399
*       BUFCORBA=PLHSAVE1;          /* SET BUFC OUTPUT RBA.          */
         L     @10,PLHSAVE1(,RPLH)                                 0399
         ST    @10,BUFCORBA(,RBUFC)                                0399
*       BUFCDDDD=BUFCORBA;          /* SET BUFC INPUT RBA.           */
         ST    @10,BUFCDDDD(,RBUFC)                                0400
*       BUFXIRBA=BUFCORBA;          /* SET BUFC EXCL RBA.            */
         ST    @10,BUFXIRBA(,RBUFC)                                0401
*       BUFCVAL=ON;                 /* SET BUFFER VALID.             */
*       BUFCEXC=ON;                 /* SET BUFC EXCL.                */
         OI    BUFCVAL(RBUFC),B'00000110'                          0403
*       CALL BFRFMT;                /* FORMAT BFR WITH EMPTY REC'S.  */
         BAL   @14,BFRFMT                                          0404
*       PLHRECP=BUFCBAD;            /* SET PLH RECORD PTR.           */
         L     @10,BUFCBAD(,RBUFC)                                 0405
         ST    @10,PLHRECP(,RPLH)                                  0405
*       PLHRDFP=BUFCBAD+AMDCINV-LENGTH(IDACIDF)-LENGTH(IDARDF);/* SET
*                                      PLH RDF PTR.                  */
         L     @05,AMBDSB(,RAMB)                                   0406
         LR    @00,@10                                             0406
         AL    @00,AMDCINV(,@05)                                   0406
         SL    @00,@CF00288                                        0406
         ST    @00,PLHRDFP(,RPLH)                                  0406
*       PLHFSP=BUFCBAD+(AMDNSLOT*PLHLRECL);/* SET PLH FREE SPACE PTR.*/
         L     @07,AMDNSLOT(,@05)                                  0407
         M     @06,PLHLRECL(,RPLH)                                 0407
         ALR   @10,@07                                             0407
         ST    @10,PLHFSP(,RPLH)                                   0407
*       PLHHIREC=ZERO;              /* INIT. HI-RECORD RBA.          */
         SLR   @10,@10                                             0408
         ST    @10,PLHHIREC(,RPLH)                                 0408
*       RFY                                                        0409
*         IDABUFC BASED(PLHDBUFC);  /* REBASE BUFC.                  */
*     END;                          /* END GET EMPTY BUFFER.         */
*   PLH1ST=OFF;                     /* TURN OFF PLH 1ST TIME.        */
@RC00363 NI    PLH1ST(RPLH),B'10111111'                            0411
*   CALL EXIT;                      /* RETURN.                       */
         BAL   @14,EXIT                                            0412
*   END PUTSQ1ST;                   /* END PROC. PUTSQ1ST.           */
@EL00002 DS    0H                                                  0413
@EF00002 DS    0H                                                  0413
@ER00002 BR    @14                                                 0413
*PUTSQCRE:                                                         0414
*                                                                  0414
*   /*****************************************************************/
*   /*                                                               */
*   /* PUT SEQUENTIAL CREATE ROUTINE ---                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0414
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0414
PUTSQCRE DS    0H                                                  0415
*   GEN(IDASVR14);                  /* SAVE REGISTER 14.             */
         IDASVR14
*   IF PLHEFLGS^=PLHVALID THEN      /* PLH POSITION NOT VALID.       */
         CLC   PLHEFLGS(2,RPLH),@CB00797                           0416
         BE    @RF00416                                            0416
*     DO;                           /* POSITIONING ERROR.            */
*       RPLERREG='08'X;             /* SET LOGICAL ERROR IN RPL.     */
         MVI   RPLERREG(RRPL),X'08'                                0418
*       RPLERRCD=RPLNOPTR;          /* SET NO POSITION FOR PUT SEQ 0419
*                                      INSERT.                       */
         MVI   RPLERRCD(RRPL),X'58'                                0419
*       CALL EXIT;                  /* RETURN.                       */
         BAL   @14,EXIT                                            0420
*     END;                          /* END POSITIONING ERROR.        */
*   PLHRECP=PLHRECP+PLHLRECL;       /* ADVANCE RECORD POSITION.      */
@RF00416 L     @10,PLHLRECL(,RPLH)                                 0422
         L     @05,PLHRECP(,RPLH)                                  0422
         ALR   @05,@10                                             0422
         ST    @05,PLHRECP(,RPLH)                                  0422
*   IF PLHRECP<PLHFSP THEN          /* NOT END OF CI.                */
         C     @05,PLHFSP(,RPLH)                                   0423
         BNL   @RF00423                                            0423
*     DO;                                                          0424
*       PLHRDFP=PLHRDFP-LENGTH(IDARDF);/* POINT TO NEXT RDF.         */
         L     @05,PLHRDFP(,RPLH)                                  0425
         SL    @05,@CF00157                                        0425
         ST    @05,PLHRDFP(,RPLH)                                  0425
*       PLHSAVE1=PLHSAVE1+PLHLRECL; /* ADVANCE RECORD RBA.           */
         AL    @10,PLHSAVE1(,RPLH)                                 0426
         ST    @10,PLHSAVE1(,RPLH)                                 0426
*       CALL EXIT;                  /* RETURN.                       */
         BAL   @14,EXIT                                            0427
*     END;                                                         0428
*   ELSE                            /* END OF CI.                    */
*     DO;                           /* ADVANCE TO NEXT CI.           */
         B     @RC00423                                            0429
@RF00423 DS    0H                                                  0430
*       PLHSAVE1=BUFCORBA+AMDCINV;  /* ADVANCE RECORD RBA TO NEXT CI.*/
         L     @10,PLHDBUFC(,RPLH)                                 0430
         L     @05,AMBDSB(,RAMB)                                   0430
         L     @10,BUFCORBA(,@10)                                  0430
         AL    @10,AMDCINV(,@05)                                   0430
         ST    @10,PLHSAVE1(,RPLH)                                 0430
*       IF AMBSPEED=OFF THEN        /* NOT CREATE SPEED.             */
         TM    AMBSPEED(RAMB),B'00001000'                          0431
         BNZ   @RF00431                                            0431
*         DO;                       /* CHECK HI-USED RBA.            */
*           IF PLHSAVE1=>ARDHRBA THEN/* CURRENT RBA IS IN NEXT CA.   */
         L     @05,AMDPARDB(,@05)                                  0433
         CL    @10,ARDHRBA(,@05)                                   0433
         BL    @RF00433                                            0433
*             DO;                   /* GO TO NEXT CA.                */
*               CALL GETSPACE;      /* PREFORMAT AND/OR ALLOC. SPACE.*/
         BAL   @14,GETSPACE                                        0435
*               IF RPLERREG^='00'X THEN/* ERROR.                     */
         CLI   RPLERREG(RRPL),0                                    0436
         BE    @RF00436                                            0436
*                 CALL EXIT;        /* RETURN.                       */
         BAL   @14,EXIT                                            0437
*             END;                  /* END GO TO NEXT CA.            */
*         END;                      /* END CHECK HI-USED RBA.        */
*       ELSE                        /* CREATE SPEED.                 */
*         IF PLHSAVE1^<ARDHRBA THEN /* RBA IS NOT LT HI-USED RBA.    */
         B     @RC00431                                            0440
@RF00431 L     @10,PLHSAVE1(,RPLH)                                 0440
         L     @05,AMBDSB(,RAMB)                                   0440
         L     @05,AMDPARDB(,@05)                                  0440
         CL    @10,ARDHRBA(,@05)                                   0440
         BL    @RF00440                                            0440
*           DO;                     /* ADVANCE HI-USED RBA.          */
*             IF PLHSAVE1=>ARDERBA THEN/* OUT OF SPACE.              */
         CL    @10,ARDERBA(,@05)                                   0442
         BL    @RF00442                                            0442
*               DO;                 /* GET MORE SPACE.               */
*                 CALL GETSPACE;    /* ALLOCATE SPACE.               */
         BAL   @14,GETSPACE                                        0444
*                 IF RPLERREG^='00'X THEN/* ERROR.                   */
         CLI   RPLERREG(RRPL),0                                    0445
         BE    @RF00445                                            0445
*                   CALL EXIT;      /* RETURN.                       */
         BAL   @14,EXIT                                            0446
*               END;                /* END GET MORE SPACE.           */
*             ELSE                  /* NOT OUT OF SPACE.             */
*               DO;                                                0448
         B     @RC00442                                            0448
@RF00442 DS    0H                                                  0449
*                 ARDHRBA=ARDHRBA+AMDCINV;/* BUMP HI-USED RBA TO NEXT
*                                      CI.                           */
         L     @10,AMBDSB(,RAMB)                                   0449
         L     @05,AMDPARDB(,@10)                                  0449
         L     @00,ARDHRBA(,@05)                                   0449
         AL    @00,AMDCINV(,@10)                                   0449
         ST    @00,ARDHRBA(,@05)                                   0449
*                 AMDNLR=AMDNLR+AMDNSLOT;/* INCR TOTAL NO. OF      0450
*                                      RECORDS.                      */
         L     @15,AMDNLR(,@10)                                    0450
         AL    @15,AMDNSLOT(,@10)                                  0450
         ST    @15,AMDNLR(,@10)                                    0450
*                 AMDASPA=ARDERBA-ARDHRBA;/* SET NO. BYTES FREE    0451
*                                      SPACE.                        */
         LCR   @00,@00                                             0451
         AL    @00,ARDERBA(,@05)                                   0451
         ST    @00,AMDASPA(,@10)                                   0451
*               END;                                               0452
*           END;                    /* END ADVANCE HI-USED RBA.      */
@RC00442 DS    0H                                                  0454
*       IF PLHSAVE1=>PLHHIREC THEN  /* CURRENT RECORD RBA IS GTE   0454
*                                      HI-RECORD RBA.                */
@RF00440 DS    0H                                                  0454
@RC00431 CLC   PLHSAVE1(4,RPLH),PLHHIREC(RPLH)                     0454
         BL    @RF00454                                            0454
*         DO;                       /* GET EMPTY BUFFER.             */
*           RBUFC=PLHDBUFC;         /* POINT TO DATA BUFC.           */
         L     @10,PLHDBUFC(,RPLH)                                 0456
         LR    RBUFC,@10                                           0456
*           IF BUFCINS=ON THEN      /* CUR BUFC IS INSERT BUFC.      */
         TM    BUFCINS(@10),B'00100000'                            0457
         BNO   @RF00457                                            0457
*             DO;                                                  0458
*               PLHSAVE2=ZERO;      /* ZERO HI-PREFORMAT RBA @ZA15685*/
         SLR   @10,@10                                             0459
         ST    @10,PLHSAVE2(,RPLH)                                 0459
*I12:                                                              0460
*               DO;                 /* IDACALL(IDASBF)               */
I12      DS    0H                                                  0461
*                 CALL IDASBF;      /* EXIT TO IDASBF                */
         L     @15,@CV00953                                        0461
         BALR  @14,@15                                             0461
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I12;            /* SUBTRACT DATA BUFC.           */
*               IF RPLERREG^='00'X THEN/* ERROR.                     */
         CLI   RPLERREG(RRPL),0                                    0467
         BE    @RF00467                                            0467
*                 CALL EXIT;        /* RETURN.                       */
         BAL   @14,EXIT                                            0468
*             END;                                                 0469
*           ELSE                    /* CUR BUFC NOT INSERT BUFC.     */
*I13:                                                              0470
*             DO;                   /* IDACALL(IDAFREEB)             */
         B     @RC00457                                            0470
@RF00457 DS    0H                                                  0470
I13      DS    0H                                                  0471
*               CALL IDAFREEB;      /* EXIT TO IDAFREEB              */
         L     @15,@CV00947                                        0471
         BALR  @14,@15                                             0471
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I13;              /* FREE BUFFER.                  */
*I14:                                                              0477
*           DO;                     /* IDACALL(IDAGNNFL)             */
@RC00457 DS    0H                                                  0477
I14      DS    0H                                                  0478
*             CALL IDAGNNFL;        /* EXIT TO IDAGNNFL              */
         L     @15,@CV00945                                        0478
         BALR  @14,@15                                             0478
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I14;                /* GET NEXT CI NO FILL.          */
*           IF RPLERREG^='00'X THEN /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0484
         BE    @RF00484                                            0484
*             CALL EXIT;            /* RETURN.                       */
         BAL   @14,EXIT                                            0485
*           RFY                                                    0486
*             IDABUFC BASED(RBUFC); /* BASE BUFC ON REG.             */
@RF00484 DS    0H                                                  0487
*           BUFCDDDD=PLHSAVE1;      /* SET BUFC INPUT RBA.           */
         L     @10,PLHSAVE1(,RPLH)                                 0487
         ST    @10,BUFCDDDD(,RBUFC)                                0487
*           BUFXIRBA=PLHSAVE1;      /* SET BUFC EXCL INPUT RBA.      */
         ST    @10,BUFXIRBA(,RBUFC)                                0488
*           BUFCVAL=ON;             /* SET BUFC VALID.               */
*           BUFCEXC=ON;             /* SET BUFC EXCL.                */
         OI    BUFCVAL(RBUFC),B'00000110'                          0490
*           RFY                                                    0491
*             IDABUFC BASED(PLHDBUFC);/* REBASE BUFC.                */
*           CALL BFRFMT;            /* FORMAT BFR WITH EMPTY REC'S.  */
         BAL   @14,BFRFMT                                          0492
*         END;                      /* END GET EMPTY BUFFER.         */
*       ELSE                        /* CURRENT RECORD RBA IS LTE   0494
*                                      HI-RECORD RBA.                */
*         DO;                       /* GET NEXT CI.                  */
         B     @RC00454                                            0494
@RF00454 DS    0H                                                  0495
*           IF AMBSPEED=OFF THEN    /* NOT CREATE SPEED.             */
         TM    AMBSPEED(RAMB),B'00001000'                          0495
         BNZ   @RF00495                                            0495
*             DO;                   /* GET NEXT CI FOR RECOVERY.     */
*               IF PLHASKBF=ON THEN /* ASK BUFFER IS ON.             */
         TM    PLHASKBF(RPLH),B'00100000'                          0497
         BNO   @RF00497                                            0497
*I15:                                                              0498
*                 DO;               /* IDACALL(IDAABF)               */
I15      DS    0H                                                  0499
*                   CALL IDAABF;    /* EXIT TO IDAABF                */
         L     @15,@CV00943                                        0499
         BALR  @14,@15                                             0499
*                   GEN(BALR @11,0);/* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                   GEN(USING *,@11);/* ESTABLISH ADDRESSING         */
         USING *,@11
*                   GEN(L     @11,=A(@PSTART));/* RELOAD BASE        */
         L     @11,=A(@PSTART)
*                   GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING   */
         USING @PSTART,@11
*                 END I15;          /* ADD BUFFERS.                  */
*               PLHRAHD=ON;         /* ALLOW READ AHEAD.             */
@RF00497 OI    PLHRAHD(RPLH),B'01000000'                           0505
*               PLHRDEXC=ON;        /* SET READ EXCLUSIVE ON.        */
         OI    PLHRDEXC(RPLH),B'00001000'                          0506
*               RBUFC=PLHDBUFC;     /* POINT TO DATA BUFC.           */
         L     RBUFC,PLHDBUFC(,RPLH)                               0507
*I16:                                                              0508
*               DO;                 /* IDACALL(IDAFREEB)             */
I16      DS    0H                                                  0509
*                 CALL IDAFREEB;    /* EXIT TO IDAFREEB              */
         L     @15,@CV00947                                        0509
         BALR  @14,@15                                             0509
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I16;            /* FREE BUFFER.                  */
*I17:                                                              0515
*               DO;                 /* IDACALL(IDAGNXT)              */
I17      DS    0H                                                  0516
*                 CALL IDAGNXT;     /* EXIT TO IDAGNXT               */
         L     @15,@CV00944                                        0516
         BALR  @14,@15                                             0516
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I17;            /* GET NEXT CI.                  */
*               PLHRAHD=OFF;        /* TURN OFF PLH READ AHEAD.      */
         NI    PLHRAHD(RPLH),B'10111111'                           0522
*               IF RPLERREG^='00'X THEN/* ERROR.                     */
         CLI   RPLERREG(RRPL),0                                    0523
         BE    @RF00523                                            0523
*                 CALL EXIT;        /* RETURN.                       */
         BAL   @14,EXIT                                            0524
*             END;                  /* END GET NEXT CI FOR RECOVERY. */
*           ELSE                    /* CREATE SPEED.                 */
*             DO;                   /* GET NEXT CI FOR SPEED.        */
         B     @RC00495                                            0526
@RF00495 DS    0H                                                  0527
*               RPARM1=PLHSAVE1;    /* SET RBA OF CI TO BE READ.     */
         L     RPARM1,PLHSAVE1(,RPLH)                              0527
*I18:                                                              0528
*               DO;                 /* IDACALL(IDAGRB)               */
I18      DS    0H                                                  0529
*                 CALL IDAGRB;      /* EXIT TO IDAGRB                */
         L     @15,@CV00952                                        0529
         BALR  @14,@15                                             0529
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I18;            /* READ NEXT CI.                 */
*               IF RPLERREG^='00'X THEN/* ERROR.                     */
         CLI   RPLERREG(RRPL),0                                    0535
         BE    @RF00535                                            0535
*                 CALL EXIT;        /* RETURN.                       */
         BAL   @14,EXIT                                            0536
*             END;                  /* END GET NEXT CI FOR SPEED.    */
@RF00535 DS    0H                                                  0538
*         END;                      /* END GET NEXT CI.              */
@RC00495 DS    0H                                                  0539
*       BUFCORBA=PLHSAVE1;          /* SET BUFC OUTPUT RBA.          */
@RC00454 L     @10,PLHDBUFC(,RPLH)                                 0539
         L     @05,PLHSAVE1(,RPLH)                                 0539
         ST    @05,BUFCORBA(,@10)                                  0539
*       PLHRECP=BUFCBAD;            /* SET RECORD PTR TO 1ST RECORD. */
         L     @10,BUFCBAD(,@10)                                   0540
         ST    @10,PLHRECP(,RPLH)                                  0540
*       PLHRDFP=BUFCBAD+AMDCINV-LENGTH(IDACIDF)-LENGTH(IDARDF);/* SET
*                                      RDF POINTER.                  */
         L     @05,AMBDSB(,RAMB)                                   0541
         LR    @00,@10                                             0541
         AL    @00,AMDCINV(,@05)                                   0541
         SL    @00,@CF00288                                        0541
         ST    @00,PLHRDFP(,RPLH)                                  0541
*       PLHFSP=BUFCBAD+(AMDNSLOT*PLHLRECL);/* SET PLH FREE SPACE PTR.*/
         L     @07,AMDNSLOT(,@05)                                  0542
         M     @06,PLHLRECL(,RPLH)                                 0542
         ALR   @10,@07                                             0542
         ST    @10,PLHFSP(,RPLH)                                   0542
*       CALL EXIT;                  /* RETURN.                       */
         BAL   @14,EXIT                                            0543
*     END;                          /* END ADVANCE TO NEXT CI.       */
*   END PUTSQCRE;                   /* END PROC PUTSQCRE.            */
@EL00003 DS    0H                                                  0545
@EF00003 DS    0H                                                  0545
@ER00003 BR    @14                                                 0545
*PUTSQNCR:                                                         0546
*                                                                  0546
*   /*****************************************************************/
*   /*                                                               */
*   /* PUT SEQUENTIAL NON-CREATE ROUTINE ---                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0546
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0546
PUTSQNCR DS    0H                                                  0547
*   GEN(IDASVR14);                  /* SAVE REGISTER 14.             */
         IDASVR14
*   IF PLHINVAL=ON×PLHBWD=ON×PLHSKPER=ON THEN/* PLH NOT VALID OR PREV
*                                      BWD REQ OR SKIP ERR.          */
         TM    PLHINVAL(RPLH),B'00000010'                          0548
         BO    @RT00548                                            0548
         TM    PLHBWD(RPLH),B'00010000'                            0548
         BO    @RT00548                                            0548
         TM    PLHSKPER(RPLH),B'00100000'                          0548
         BNO   @RF00548                                            0548
@RT00548 DS    0H                                                  0549
*     DO;                                                          0549
*       RPLERREG='08'X;             /* SET LOGICAL ERROR.            */
         MVI   RPLERREG(RRPL),X'08'                                0550
*       RPLERRCD=RPLNOPTR;          /* SET NO POSIT. ERROR.          */
         MVI   RPLERRCD(RRPL),X'58'                                0551
*       CALL EXIT;                  /* RETURN.                       */
         BAL   @14,EXIT                                            0552
*     END;                                                         0553
*                                                                  0553
*   /*****************************************************************/
*   /*                                                               */
*   /* IN THE FOLLOWING TEST OF PLHRSTRT AND PLHEODX, PLHRSTRT MUST  */
*   /* BE TESTED FIRST. IF PLHRSTRT IS ON, PLHEODX WILL ALSO BE ON.  */
*   /* HOWEVER, IF PLHEODX IS ON, PLHRSTRT MAY NOT BE ON. PLHRSTRT IS*/
*   /* TURNED ON WHEN AN END OF DATA CONDITION IS ENCOUNTERED ON A   */
*   /* POINT (KGE) REQUEST. PLHEODX IS TURNED ON BY IDA019R1 FOR ANY */
*   /* END OF DATA ERROR.                                    @ZA07544*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0554
*   IF PLHRSTRT=ON×PLHEODX=ON THEN  /* IF POSITIONING REQUIRED     0554
*                                                            @ZA07544*/
@RF00548 TM    PLHRSTRT(RPLH),B'10000000'                          0554
         BO    @RT00554                                            0554
         TM    PLHEODX(RPLH),B'00000100'                           0554
         BNO   @RF00554                                            0554
@RT00554 DS    0H                                                  0555
*     DO;                           /* THEN REPOSITION       @ZA07544*/
*       IF PLHRSTRT=ON THEN         /* IF REPOSITION TO PREVIOUS RRN
*                                                            @ZA07544*/
         TM    PLHRSTRT(RPLH),B'10000000'                          0556
         BNO   @RF00556                                            0556
*         ARGFIELD=PLHRRN;          /* SET RPL ARG FROM PREVIOUS   0557
*                                      POINT KGE ARG         @ZA07544*/
         L     @10,RPLARG(,RRPL)                                   0557
         L     @05,PLHKEYPT(,RPLH)                                 0557
         L     @05,PLHRRN(,@05)                                    0557
         ST    @05,ARGFIELD(,@10)                                  0557
*       ELSE                        /* EOD ON PREVIOUS READ  @ZA07544*/
*         ARGFIELD=PLHRRN+ONE;      /* POSITION TO EOD       @ZA07544*/
         B     @RC00556                                            0558
@RF00556 L     @10,RPLARG(,RRPL)                                   0558
         L     @05,PLHKEYPT(,RPLH)                                 0558
         LA    @00,1                                               0558
         AL    @00,PLHRRN(,@05)                                    0558
         ST    @00,ARGFIELD(,@10)                                  0558
*       CALL PUTNONSQ;              /* REPOSITION            @ZA07544*/
@RC00556 BAL   @14,PUTNONSQ                                        0559
*       IF RPLERREG='08'X&RPLERRCD=RPLEXCL THEN/* READ EXCL ERROR. 0560
*                                                            @ZA07544*/
         CLI   RPLERREG(RRPL),8                                    0560
         BNE   @RF00560                                            0560
         CLI   RPLERRCD(RRPL),20                                   0560
         BNE   @RF00560                                            0560
*         PLHINVAL=OFF;             /* KEEP PLH              @ZA07544*/
         NI    PLHINVAL(RPLH),B'11111101'                          0561
*       CALL EXIT;                  /* RETURN                @ZA07544*/
@RF00560 BAL   @14,EXIT                                            0562
*     END;                          /* END REPOSITIONING     @ZA07544*/
*   IF PLHDSCAN=ON THEN             /* READ EXCL ERROR.              */
@RF00554 TM    PLHDSCAN(RPLH),B'00000001'                          0564
         BNO   @RF00564                                            0564
*     DO;                                                          0565
*I19:                                                              0566
*       DO;                         /* IDACALL(IDAGXCTL)             */
I19      DS    0H                                                  0567
*         CALL IDAGXCTL;            /* EXIT TO IDAGXCTL              */
         L     @15,@CV00950                                        0567
         BALR  @14,@15                                             0567
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I19;                    /* REREAD CI IN EXCL CTL.        */
*       IF RPLERREG^='00'X THEN     /* ERROR.                @ZA07544*/
         CLI   RPLERREG(RRPL),0                                    0573
         BE    @RF00573                                            0573
*         CALL EXIT;                /* RETURN.                       */
         BAL   @14,EXIT                                            0574
*     END;                                                         0575
*   ELSE                            /* GET BFR IN EXCL CTL.  @ZA07544*/
*     IF BUFCEXC=OFF THEN           /* BFR NOT IN EXCL MODE.         */
         B     @RC00564                                            0576
@RF00564 L     @10,PLHDBUFC(,RPLH)                                 0576
         TM    BUFCEXC(@10),B'00000010'                            0576
         BNZ   @RF00576                                            0576
*       DO;                                                        0577
*I20:                                                              0578
*         DO;                       /* IDACALL(IDAGXCTL)             */
I20      DS    0H                                                  0579
*           CALL IDAGXCTL;          /* EXIT TO IDAGXCTL              */
         L     @15,@CV00950                                        0579
         BALR  @14,@15                                             0579
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I20;                  /* REREAD CI IN EXCL CTL.        */
*         IF RPLERREG^='00'X THEN   /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0585
         BE    @RF00585                                            0585
*           CALL EXIT;              /* RETURN.                       */
         BAL   @14,EXIT                                            0586
*       END;                                                       0587
@RF00585 DS    0H                                                  0588
*   IF PLHNOADV=OFF THEN            /* NO ADVANCE IS OFF.            */
@RF00576 DS    0H                                                  0588
@RC00564 TM    PLHNOADV(RPLH),B'00001000'                          0588
         BNZ   @RF00588                                            0588
*     DO;                           /* ADVANCE POSITIONING.          */
*       PLHRECP=PLHRECP+PLHLRECL;   /* ADVANCE RECORD PTR.           */
         L     @10,PLHLRECL(,RPLH)                                 0590
         L     @05,PLHRECP(,RPLH)                                  0590
         ALR   @05,@10                                             0590
         ST    @05,PLHRECP(,RPLH)                                  0590
*       IF PLHRECP<PLHFSP THEN      /* NOT END OF CI.                */
         C     @05,PLHFSP(,RPLH)                                   0591
         BNL   @RF00591                                            0591
*         DO;                                                      0592
*           PLHRDFP=PLHRDFP-LENGTH(IDARDF);/* POINT TO NEXT RDF.     */
         L     @05,PLHRDFP(,RPLH)                                  0593
         SL    @05,@CF00157                                        0593
         ST    @05,PLHRDFP(,RPLH)                                  0593
*           PLHSAVE1=PLHSAVE1+PLHLRECL;/* ADVANCE RECORD RBA.        */
         AL    @10,PLHSAVE1(,RPLH)                                 0594
         ST    @10,PLHSAVE1(,RPLH)                                 0594
*         END;                                                     0595
*       ELSE                        /* END OF CI.                    */
*         DO;                       /* ADVANCE TO NEXT CI.           */
         B     @RC00591                                            0596
@RF00591 DS    0H                                                  0597
*           PLHSAVE1=BUFCDDDD+AMDCINV;/* ADVANCE RECORD RBA TO NEXT
*                                      CI.                           */
         L     @10,PLHDBUFC(,RPLH)                                 0597
         L     @05,AMBDSB(,RAMB)                                   0597
         L     @10,BUFCDDDD(,@10)                                  0597
         AL    @10,AMDCINV(,@05)                                   0597
         ST    @10,PLHSAVE1(,RPLH)                                 0597
*CHKHURBA:                                                         0598
*           IF PLHSAVE1=>ARDHRBA THEN/* CURRENT RBA IS IN NEXT CA.   */
CHKHURBA L     @10,AMBDSB(,RAMB)                                   0598
         L     @10,AMDPARDB(,@10)                                  0598
         CLC   PLHSAVE1(4,RPLH),ARDHRBA(@10)                       0598
         BL    @RF00598                                            0598
*             DO;                   /* GO TO NEXT CA.                */
*               RPARM1=ADDR(IDADIWA);/* POINT TO DIWA.               */
         L     RPARM1,AMBIWA(,RAMB)                                0600
*               GEN REFS(DIWATV)(TS DIWATV(RPARM1));/* TEST IF     0601
*                                      RESOURCE IS AVAILABLE.        */
         TS DIWATV(RPARM1)
*               BC(8,DIWLCKED);     /* BRANCH IF RESOURCE IS AVAIL.  */
         BC    8,DIWLCKED                                          0602
*               RFY                                                0603
*                 RWORK0 RSTD;      /* GET WORK REG.                 */
*               RWORK0=DEFR0;       /* SET DEFER PARAMETER.          */
         SLR   RWORK0,RWORK0                                       0604
*I21:                                                              0605
*               DO;                 /* IDACALL(IDADRQ)               */
I21      DS    0H                                                  0606
*                 CALL IDADRQ;      /* EXIT TO IDADRQ                */
         L     @15,@CV00951                                        0606
         BALR  @14,@15                                             0606
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I21;            /* CALL DEFER REQUEST ROUT.      */
*               GOTO CHKHURBA;      /* RECHECK HI-USED RBA.          */
         B     CHKHURBA                                            0612
*               RFY                                                0613
*                 RWORK0 UNRSTD;    /* FREE WORK REG.                */
*DIWLCKED:                                                         0614
*               IF PLHSAVE1=>ARDHRBA THEN/* CURRENT RBA GTE HI-USED
*                                      RBA.                          */
DIWLCKED L     @10,AMBDSB(,RAMB)                                   0614
         L     @10,AMDPARDB(,@10)                                  0614
         CLC   PLHSAVE1(4,RPLH),ARDHRBA(@10)                       0614
         BL    @RF00614                                            0614
*                 CALL GETSPACE;    /* PREFORMAT AND/OR ALLOCATE   0615
*                                      SPACE.                        */
         BAL   @14,GETSPACE                                        0615
*               DIWATV=ZERO;        /* FREE RESOURCE.                */
@RF00614 L     @10,AMBIWA(,RAMB)                                   0616
         MVI   DIWATV(@10),X'00'                                   0616
*               IF RPLERREG^='00'X THEN/* ERROR.                     */
         CLI   RPLERREG(RRPL),0                                    0617
         BE    @RF00617                                            0617
*                 CALL EXIT;        /* RETURN.                       */
         BAL   @14,EXIT                                            0618
*               PLHEODX=ON;         /* GETSPACE WAS CALLED   @ZA18303*/
@RF00617 OI    PLHEODX(RPLH),B'00000100'                           0619
*             END;                  /* END GO TO NEXT CA.            */
*           IF PLHASKBF=ON THEN     /* PLH ASK BUFFER IS ON.         */
@RF00598 TM    PLHASKBF(RPLH),B'00100000'                          0621
         BNO   @RF00621                                            0621
*I22:                                                              0622
*             DO;                   /* IDACALL(IDAABF)               */
I22      DS    0H                                                  0623
*               CALL IDAABF;        /* EXIT TO IDAABF                */
         L     @15,@CV00943                                        0623
         BALR  @14,@15                                             0623
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I22;              /* ADD BUFFERS.                  */
*           PLHRAHD=ON;             /* ALLOW READ AHEAD.             */
@RF00621 OI    PLHRAHD(RPLH),B'01000000'                           0629
*           PLHRDEXC=ON;            /* SET READ EXCLUSIVE.           */
         OI    PLHRDEXC(RPLH),B'00001000'                          0630
*           IF PLHEODX=ON THEN      /* IF NEW SPACE OBTAINED @ZA18303*/
         TM    PLHEODX(RPLH),B'00000100'                           0631
         BNO   @RF00631                                            0631
*             DO;                   /* RESET THE BUFFERS     @ZA18303*/
*               PLHEODX=OFF;        /* RESET EOD FLAG        @ZA18303*/
         NI    PLHEODX(RPLH),B'11111011'                           0633
*               RPARM1=PLHSAVE1;    /* RBA FOR IDAGRB        @ZA18303*/
         L     RPARM1,PLHSAVE1(,RPLH)                              0634
*I23:                                                              0635
*               DO;                 /* IDACALL(IDAGRB)               */
I23      DS    0H                                                  0636
*                 CALL IDAGRB;      /* EXIT TO IDAGRB                */
         L     @15,@CV00952                                        0636
         BALR  @14,@15                                             0636
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I23;            /* GET THE NEW CI        @ZA18303*/
*             END;                  /* END - RESET BUFFERS   @ZA18303*/
*           ELSE                    /* NEW SPACE NOT GOTTEN  @ZA18303*/
*             DO;                   /* GET THE NEXT CI       @ZA18303*/
         B     @RC00631                                            0643
@RF00631 DS    0H                                                  0644
*               RBUFC=PLHDBUFC;     /* POINT TO DATA BUFC.           */
         L     RBUFC,PLHDBUFC(,RPLH)                               0644
*I24:                                                              0645
*               DO;                 /* IDACALL(IDAFREEB)             */
I24      DS    0H                                                  0646
*                 CALL IDAFREEB;    /* EXIT TO IDAFREEB              */
         L     @15,@CV00947                                        0646
         BALR  @14,@15                                             0646
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I24;            /* FREE DATA BUFFER.             */
*I25:                                                              0652
*               DO;                 /* IDACALL(IDAGNXT)              */
I25      DS    0H                                                  0653
*                 CALL IDAGNXT;     /* EXIT TO IDAGNXT               */
         L     @15,@CV00944                                        0653
         BALR  @14,@15                                             0653
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I25;            /* GET NEXT CI.                  */
*             END;                  /* END - GET NEXT CI     @ZA18303*/
*           PLHRAHD=OFF;            /* TURN OFF PLH READ AHEAD.      */
@RC00631 NI    PLHRAHD(RPLH),B'10111111'                           0660
*           IF RPLERREG^='00'X THEN /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0661
         BE    @RF00661                                            0661
*             DO;                                                  0662
*               IF RPLERREG='08'X&RPLERRCD=RPLEXCL THEN/* READ EXCL
*                                      ERROR.                        */
         CLI   RPLERREG(RRPL),8                                    0663
         BNE   @RF00663                                            0663
         CLI   RPLERRCD(RRPL),20                                   0663
         BNE   @RF00663                                            0663
*                 PLHDSCAN=ON;      /* SET SCANDATA FLAG.    @ZA07544*/
         OI    PLHDSCAN(RPLH),B'00000001'                          0664
*               PLHNOADV=ON;        /* DO NOT ADVANCE PLH    @ZA07544*/
@RF00663 OI    PLHNOADV(RPLH),B'00001000'                          0665
*               CALL EXIT;          /* RETURN.                       */
         BAL   @14,EXIT                                            0666
*             END;                                                 0667
*           PLHRECP=BUFCBAD;        /* SET RECORD PTR TO 1ST RECORD. */
@RF00661 L     @10,PLHDBUFC(,RPLH)                                 0668
         L     @10,BUFCBAD(,@10)                                   0668
         ST    @10,PLHRECP(,RPLH)                                  0668
*           PLHRDFP=BUFCBAD+AMDCINV-LENGTH(IDACIDF)-LENGTH(IDARDF);/*
*                                      SET RDF POINTER.              */
         L     @05,AMBDSB(,RAMB)                                   0669
         LR    @00,@10                                             0669
         AL    @00,AMDCINV(,@05)                                   0669
         SL    @00,@CF00288                                        0669
         ST    @00,PLHRDFP(,RPLH)                                  0669
*           PLHFSP=BUFCBAD+(AMDNSLOT*PLHLRECL);/* SET PLH FREE SPACE
*                                      POINTER.                      */
         L     @07,AMDNSLOT(,@05)                                  0670
         M     @06,PLHLRECL(,RPLH)                                 0670
         ALR   @10,@07                                             0670
         ST    @10,PLHFSP(,RPLH)                                   0670
*         END;                      /* END ADVANCE TO NEXT CI.       */
*     END;                          /* END ADVANCE POSITIONING.      */
@RC00591 DS    0H                                                  0673
*   BUFCORBA=BUFCDDDD;              /* SET BUFC OUTPUT RBA.          */
@RF00588 L     @10,PLHDBUFC(,RPLH)                                 0673
         L     @05,BUFCDDDD(,@10)                                  0673
         ST    @05,BUFCORBA(,@10)                                  0673
*   CALL EXIT;                      /* RETURN.                       */
         BAL   @14,EXIT                                            0674
*   END PUTSQNCR;                   /* END PROC PUTSQNCR.            */
@EL00004 DS    0H                                                  0675
@EF00004 DS    0H                                                  0675
@ER00004 BR    @14                                                 0675
*PUTNONSQ:                                                         0676
*                                                                  0676
*   /*****************************************************************/
*   /*                                                               */
*   /* PUT NON-SEQUENTIAL ROUTINE ---                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0676
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0676
PUTNONSQ DS    0H                                                  0677
*   GEN(IDASVR14);                  /* SAVE REGISTER 14.             */
         IDASVR14
*   IF ARGFIELD=ZERO×ARGFIELD>AMDMAXRR THEN/* INVALID RRN.           */
         L     @10,RPLARG(,RRPL)                                   0678
         L     @10,ARGFIELD(,@10)                                  0678
         LTR   @10,@10                                             0678
         BZ    @RT00678                                            0678
         L     @05,AMBDSB(,RAMB)                                   0678
         CL    @10,AMDMAXRR(,@05)                                  0678
         BNH   @RF00678                                            0678
@RT00678 DS    0H                                                  0679
*     DO;                                                          0679
*       RPLERREG='08'X;             /* SET LOGICAL ERROR IN RPL.     */
         MVI   RPLERREG(RRPL),X'08'                                0680
*       RPLERRCD=RPLIRRNO;          /* SET INVALID RRN ERROR.        */
         MVI   RPLERRCD(RRPL),X'C0'                                0681
*       CALL EXIT;                  /* RETURN.                       */
         BAL   @14,EXIT                                            0682
*     END;                                                         0683
*   PLHSAVE1=AMDCINV*((ARGFIELD-ONE)/AMDNSLOT)+PLHLRECL*((ARGFIELD-ONE)
*       //AMDNSLOT);                /* CONVERT RRN TO RBA.           */
@RF00678 L     @10,AMBDSB(,RAMB)                                   0684
         L     @05,RPLARG(,RRPL)                                   0684
         L     @05,ARGFIELD(,@05)                                  0684
         BCTR  @05,0                                               0684
         L     @15,AMDNSLOT(,@10)                                  0684
         LR    @07,@05                                             0684
         SLR   @06,@06                                             0684
         DR    @06,@15                                             0684
         M     @06,AMDCINV(,@10)                                   0684
         LR    @09,@05                                             0684
         SLR   @08,@08                                             0684
         DR    @08,@15                                             0684
         LR    @15,@08                                             0684
         M     @14,PLHLRECL(,RPLH)                                 0684
         ALR   @07,@15                                             0684
         ST    @07,PLHSAVE1(,RPLH)                                 0684
*TSTHURBA:                                                         0685
*   IF PLHSAVE1<ARDHRBA THEN        /* REQUESTED RBA IS LT HI-USED 0685
*                                      RBA.                          */
TSTHURBA L     @10,PLHSAVE1(,RPLH)                                 0685
         L     @05,AMBDSB(,RAMB)                                   0685
         L     @05,AMDPARDB(,@05)                                  0685
         CL    @10,ARDHRBA(,@05)                                   0685
         BNL   @RF00685                                            0685
*     DO;                           /* RETRIEVE CI.                  */
*       RPARM1=PLHSAVE1;            /* RBA TO RETRIEVE.              */
         LR    RPARM1,@10                                          0687
*I26:                                                              0688
*       DO;                         /* IDACALL(IDARRDRL)             */
I26      DS    0H                                                  0689
*         CALL IDARRDRL;            /* EXIT TO IDARRDRL              */
         L     @15,@CV00956                                        0689
         BALR  @14,@15                                             0689
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I26;                    /* CALL DIRECT RECORD LOCATE.    */
*       IF RPLERREG^='00'X THEN     /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0695
         BE    @RF00695                                            0695
*         CALL EXIT;                /* RETURN.                       */
         BAL   @14,EXIT                                            0696
*       BUFCORBA=BUFCDDDD;          /* SET BUFC OUTPUT RBA.          */
@RF00695 L     @10,PLHDBUFC(,RPLH)                                 0697
         L     @05,BUFCDDDD(,@10)                                  0697
         ST    @05,BUFCORBA(,@10)                                  0697
*     END;                          /* END RETRIEVE CI.              */
*   ELSE                            /* REQUESTED RBA IS GTE HI-USED
*                                      RBA.                          */
*     DO;                           /* REQ IS PAST DATA SET END.     */
         B     @RC00685                                            0699
@RF00685 DS    0H                                                  0700
*       RBUFC=PLHDBUFC;             /* POINT TO DATA BUFC.           */
         L     @10,PLHDBUFC(,RPLH)                                 0700
         LR    RBUFC,@10                                           0700
*       IF BUFCINS=ON THEN          /* CURRENT IS INSERT BUFC.       */
         TM    BUFCINS(@10),B'00100000'                            0701
         BNO   @RF00701                                            0701
*I27:                                                              0702
*         DO;                       /* IDACALL(IDASBF)               */
I27      DS    0H                                                  0703
*           CALL IDASBF;            /* EXIT TO IDASBF                */
         L     @15,@CV00953                                        0703
         BALR  @14,@15                                             0703
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I27;                  /* SUBTRACT INSERT BUFC.         */
*       ELSE                        /* NOT INSERT BUFC.              */
*         IF PLHINVAL=OFF&PLH1ST=OFF&AMBCREAT=ON THEN/* VALID DATA 0709
*                                      BUFFER EXISTS.                */
         B     @RC00701                                            0709
@RF00701 TM    PLHINVAL(RPLH),B'01000010'                          0709
         BNZ   @RF00709                                            0709
         TM    AMBCREAT(RAMB),B'10000000'                          0709
         BNO   @RF00709                                            0709
*I28:                                                              0710
*           DO;                     /* IDACALL(IDAFREEB)             */
I28      DS    0H                                                  0711
*             CALL IDAFREEB;        /* EXIT TO IDAFREEB              */
         L     @15,@CV00947                                        0711
         BALR  @14,@15                                             0711
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I28;                /* FREE DATA BUFC.               */
*       RPARM1=ADDR(IDADIWA);       /* POINT TO DIWA.                */
@RF00709 DS    0H                                                  0717
@RC00701 L     RPARM1,AMBIWA(,RAMB)                                0717
*       GEN REFS(DIWATV)(TS DIWATV(RPARM1));/* TEST IF RESOURCE IS 0718
*                                      AVAILABLE.                    */
         TS DIWATV(RPARM1)
*       BC(8,DIWLCKD);              /* BRANCH IF RESOURCE IS AVAIL.  */
         BC    8,DIWLCKD                                           0719
*       RFY                                                        0720
*         RWORK0 RSTD;              /* GET WORK REG.                 */
*       RWORK0=DEFR0;               /* SET DEFER PARAMETER.          */
         SLR   RWORK0,RWORK0                                       0721
*I29:                                                              0722
*       DO;                         /* IDACALL(IDADRQ)               */
I29      DS    0H                                                  0723
*         CALL IDADRQ;              /* EXIT TO IDADRQ                */
         L     @15,@CV00951                                        0723
         BALR  @14,@15                                             0723
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I29;                    /* CALL DEFER REQUEST ROUT.      */
*       GOTO TSTHURBA;              /* RECHECK HI-USED RBA.          */
         B     TSTHURBA                                            0729
*       RFY                                                        0730
*         RWORK0 UNRSTD;            /* FREE WORK REG.                */
*DIWLCKD:                                                          0731
*                                                                  0731
*       /*************************************************************/
*       /*                                                           */
*       /* CHECK CURRENT RBA AGAINST HIGH USED/PREFORMAT RBA @ZA15685*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0731
*       IF PLHSAVE1=>ARDHRBA THEN   /* IF GTE HI-USED RBA    @ZA15685*/
DIWLCKD  L     @10,PLHSAVE1(,RPLH)                                 0731
         L     @05,AMBDSB(,RAMB)                                   0731
         L     @05,AMDPARDB(,@05)                                  0731
         CL    @10,ARDHRBA(,@05)                                   0731
         BL    @RF00731                                            0731
*         IF(AMBSPEED=OFF×          /* IF NOT SPEED CREATE OR@ZA15685*/
*             PLHSAVE1=>PLHSAVE2) THEN/* RBA ^ PREFORMATTED  @ZA15685*/
         TM    AMBSPEED(RAMB),B'00001000'                          0732
         BZ    @RT00732                                            0732
         C     @10,PLHSAVE2(,RPLH)                                 0732
         BL    @RF00732                                            0732
@RT00732 DS    0H                                                  0733
*           CALL GETSPACE;          /* PREFORMAT AND/OR ALLOCATE   0733
*                                      SPACE.                        */
         BAL   @14,GETSPACE                                        0733
*         ELSE                      /* SPEED & PREFORMATTED  @ZA15685*/
*           ARDHRBA=PLHSAV1X-(PLHSAV1X//AMDCINV)+AMDCINV;/* SET    0734
*                                      HI-USED RBA TO NEXT CI PAST 0734
*                                      CURRENT.              @ZA15685*/
         B     @RC00732                                            0734
@RF00732 L     @10,AMBDSB(,RAMB)                                   0734
         L     @05,AMDPARDB(,@10)                                  0734
         L     @15,PLHSAV1X(,RPLH)                                 0734
         L     @10,AMDCINV(,@10)                                   0734
         LR    @07,@15                                             0734
         SLR   @06,@06                                             0734
         DR    @06,@10                                             0734
         SLR   @15,@06                                             0734
         ALR   @15,@10                                             0734
         ST    @15,ARDHRBA(,@05)                                   0734
*       DIWATV=ZERO;                /* FREE RESOURCE.                */
@RC00732 DS    0H                                                  0735
@RF00731 L     @10,AMBIWA(,RAMB)                                   0735
         MVI   DIWATV(@10),X'00'                                   0735
*       IF RPLERREG^='00'X THEN     /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0736
         BE    @RF00736                                            0736
*         CALL EXIT;                /* RETURN.                       */
         BAL   @14,EXIT                                            0737
*       IF AMBCREAT=OFF THEN        /* NOT CREATE MODE.              */
@RF00736 TM    AMBCREAT(RAMB),B'10000000'                          0738
         BNZ   @RF00738                                            0738
*         DO;                                                      0739
*           RPARM1=PLHSAVE1;        /* RBA TO RETRIEVE.              */
         L     RPARM1,PLHSAVE1(,RPLH)                              0740
*I30:                                                              0741
*           DO;                     /* IDACALL(IDARRDRL)             */
I30      DS    0H                                                  0742
*             CALL IDARRDRL;        /* EXIT TO IDARRDRL              */
         L     @15,@CV00956                                        0742
         BALR  @14,@15                                             0742
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I30;                /* CALL DIRECT RECORD LOCATE.    */
*           IF RPLERREG^='00'X THEN /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0748
         BE    @RF00748                                            0748
*             CALL EXIT;            /* RETURN.                       */
         BAL   @14,EXIT                                            0749
*           BUFCORBA=BUFCDDDD;      /* SET BUFC OUTPUT RBA.          */
@RF00748 L     @10,PLHDBUFC(,RPLH)                                 0750
         L     @05,BUFCDDDD(,@10)                                  0750
         ST    @05,BUFCORBA(,@10)                                  0750
*         END;                                                     0751
*       ELSE                        /* CREATE MODE.                  */
*         DO;                       /* PROCESS CREATE REQ.           */
         B     @RC00738                                            0752
@RF00738 DS    0H                                                  0753
*           IF AMBSPEED=ON THEN     /* IF SPEED CREATE       @ZA15685*/
         TM    AMBSPEED(RAMB),B'00001000'                          0753
         BNO   @RF00753                                            0753
*             DO;                   /* THEN GET INSERT BUFC  @ZA15685*/
*I31:                                                              0755
*               DO;                 /* IDACALL(IDAAIBF)              */
I31      DS    0H                                                  0756
*                 CALL IDAAIBF;     /* EXIT TO IDAAIBF               */
         L     @15,@CV00954                                        0756
         BALR  @14,@15                                             0756
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I31;            /* ADD INSERT BUFFER     @ZA15685*/
*               PLHDBUFC=RBUFC;     /* POINT PLH TO BUFC     @ZA15685*/
         ST    RBUFC,PLHDBUFC(,RPLH)                               0762
*               BUFCINS=ON;         /* SET INSERT FLAG ON    @ZA15685*/
         L     @10,PLHDBUFC(,RPLH)                                 0763
         OI    BUFCINS(@10),B'00100000'                            0763
*             END;                  /* END - GET INSERT BUFC @ZA15685*/
*I32:                                                              0765
*           DO;                     /* IDACALL(IDAGNNFL)             */
@RF00753 DS    0H                                                  0765
I32      DS    0H                                                  0766
*             CALL IDAGNNFL;        /* EXIT TO IDAGNNFL              */
         L     @15,@CV00945                                        0766
         BALR  @14,@15                                             0766
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I32;                /* GET NEXT CI NO FILL.          */
*           IF RPLERREG^='00'X THEN /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0772
         BE    @RF00772                                            0772
*             DO;                                                  0773
*               PLHINVAL=ON;        /* SET PLH INVALID.              */
         OI    PLHINVAL(RPLH),B'00000010'                          0774
*               CALL EXIT;          /* RETURN.                       */
         BAL   @14,EXIT                                            0775
*             END;                                                 0776
*           RFY                                                    0777
*             IDABUFC BASED(RBUFC); /* BASE BUFC ON REG.             */
@RF00772 DS    0H                                                  0778
*           BUFCORBA=PLHSAV1X-(PLHSAV1X//AMDCINV);/* SET BUFC OUTPUT
*                                      RBA                   @ZA10887*/
         L     @10,PLHSAV1X(,RPLH)                                 0778
         L     @05,AMBDSB(,RAMB)                                   0778
         LR    @07,@10                                             0778
         SLR   @06,@06                                             0778
         D     @06,AMDCINV(,@05)                                   0778
         SLR   @10,@06                                             0778
         ST    @10,BUFCORBA(,RBUFC)                                0778
*           BUFCDDDD=BUFCORBA;      /* SET BUFC INPUT RBA.           */
         ST    @10,BUFCDDDD(,RBUFC)                                0779
*           BUFXIRBA=BUFCORBA;      /* SET BUFC EXCL RBA.            */
         ST    @10,BUFXIRBA(,RBUFC)                                0780
*           BUFCVAL=ON;             /* SET BUFFER VALID.             */
*           BUFCEXC=ON;             /* SET BUFC EXCL.                */
         OI    BUFCVAL(RBUFC),B'00000110'                          0782
*           CALL BFRFMT;            /* FORMAT BFR WITH EMPTY REC'S.  */
         BAL   @14,BFRFMT                                          0783
*           PLHRECP=BUFCBAD+PLHSAVE1-BUFCORBA;/* POINT TO REQ REC.   */
         L     @10,BUFCBAD(,RBUFC)                                 0784
         LR    @05,@10                                             0784
         AL    @05,PLHSAVE1(,RPLH)                                 0784
         SL    @05,BUFCORBA(,RBUFC)                                0784
         ST    @05,PLHRECP(,RPLH)                                  0784
*           PLHRDFP=BUFCBAD+AMDCINV-LENGTH(IDACIDF)-((((ARGFIELD-ONE)//
*               AMDNSLOT)+ONE)*LENGTH(IDARDF));/* SET RDF POINTER.   */
         L     @05,AMBDSB(,RAMB)                                   0785
         LR    @00,@10                                             0785
         AL    @00,AMDCINV(,@05)                                   0785
         SL    @00,@CF00067                                        0785
         L     @15,RPLARG(,RRPL)                                   0785
         L     @15,ARGFIELD(,@15)                                  0785
         BCTR  @15,0                                               0785
         L     @05,AMDNSLOT(,@05)                                  0785
         SLR   @14,@14                                             0785
         DR    @14,@05                                             0785
         AL    @14,@CF00053                                        0785
         MH    @14,@CH00157                                        0785
         SLR   @00,@14                                             0785
         ST    @00,PLHRDFP(,RPLH)                                  0785
*           PLHFSP=BUFCBAD+(AMDNSLOT*PLHLRECL);/* SET PLH FS PTR.    */
         LR    @07,@05                                             0786
         M     @06,PLHLRECL(,RPLH)                                 0786
         ALR   @10,@07                                             0786
         ST    @10,PLHFSP(,RPLH)                                   0786
*           PLHEFLGS=PLHVALID;      /* MAKE PLH VALID.               */
         MVC   PLHEFLGS(2,RPLH),@CB00797                           0787
*           RFY                                                    0788
*             IDABUFC BASED(PLHDBUFC);/* REBASE BUFC.                */
*         END;                      /* END PROCESS CREATE REQ.       */
*     END;                          /* END REQ PAST DATA SET END.    */
@RC00738 DS    0H                                                  0791
*   IF AMBCREAT=ON&RPLDIR=ON THEN   /* CREATE MODE & DIRECT REQ.     */
@RC00685 TM    AMBCREAT(RAMB),B'10000000'                          0791
         BNO   @RF00791                                            0791
         TM    RPLDIR(RRPL),B'01000000'                            0791
         BNO   @RF00791                                            0791
*     PLHDRLM=ON;                   /* INDICATE DIRECT REQ ISSUED  0792
*                                      DURING LOAD MODE.             */
         OI    PLHDRLM(RPLH),B'10000000'                           0792
*   CALL EXIT;                      /* RETURN.                       */
@RF00791 BAL   @14,EXIT                                            0793
*   END PUTNONSQ;                   /* END PROC PUTNONSQ.            */
@EL00005 DS    0H                                                  0794
@EF00005 DS    0H                                                  0794
@ER00005 BR    @14                                                 0794
*GETSPACE:                                                         0795
*                                                                  0795
*   /*****************************************************************/
*   /*                                                               */
*   /* GETSPACE ROUTINE --- CHECKS IF PREFORMAT AND/OR MORE SPACE IS */
*   /* REQUIRED. IF NON-SEQUENTIAL REQUEST, PREFORMATS NECESSARY     */
*   /* NUMBER OF CA'S TO GET TO CA THAT CONTAINS RBA OF REQUEST. --- */
*   /* INPUT - PLHSAVE1 = RBA OF CURRENT RECORD, ARDB = HI-USED &    */
*   /* HI-ALLOCATED RBA'S. --- OUTPUT - SPACE ALLOCATED BY EOV IF    */
*   /* NECESSARY, UPDATED ARDB HI-USED & HI-ALLOCATED RBA'S, IF      */
*   /* NON-SEQ REQUEST ALL CA'S UP TO CA CONTAINING CURRENT RECORD   */
*   /* ARE PREFORMATTED(SPEED OR RECOVERY), RECOVERY - NEXT CA       */
*   /* PREFORMATTED, CREATE SPEED - HI-USED RBA SET TO NEXT CI.      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0795
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0795
GETSPACE DS    0H                                                  0796
*   GEN(IDASVR14);                  /* SAVE REGISTER 14.             */
*                                                                  0796
         IDASVR14
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THIS DATA SET IS OPEN FOR SHROPT(4), DO NOT ALLOW IT TO BE */
*   /* EXTENDED.                                             @ZA13568*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0797
*   IF AMBINBUF=ON THEN             /* IF SHROPT(4)          @ZA13568*/
         TM    AMBINBUF(RAMB),B'00000001'                          0797
         BNO   @RF00797                                            0797
*     DO;                           /* PREVENT EXTEND        @ZA13568*/
*       RPLERREG='08'X;             /* IND LOGICAL ERROR     @ZA13568*/
         MVI   RPLERREG(RRPL),X'08'                                0799
*       RPLERRCD=RPLNOEXT;          /* UNABEL TO EXTEND ERR  @ZA13568*/
         MVI   RPLERRCD(RRPL),X'1C'                                0800
*     END;                          /* END OF EXTEND ERR     @ZA13568*/
*   PLHARDB=ADDR(IDAARDB);          /* SET PLH ARDB FOR PRFMT.       */
@RF00797 L     @10,AMBDSB(,RAMB)                                   0802
         L     @10,AMDPARDB(,@10)                                  0802
         ST    @10,PLHARDB(,RPLH)                                  0802
*   RBUFC=PLHDBUFC;                 /* POINT TO DATA BUFC.           */
         L     RBUFC,PLHDBUFC(,RPLH)                               0803
*   IF RPLSEQ=ON&PLHRSTRT=OFF THEN  /* SEQ REQUEST & PLH RESTART FLAG
*                                      OFF.                          */
         TM    RPLSEQ(RRPL),B'00100000'                            0804
         BNO   @RF00804                                            0804
         TM    PLHRSTRT(RPLH),B'10000000'                          0804
         BNZ   @RF00804                                            0804
*     DO;                           /* GET SPACE FOR SEQ.            */
*       IF PLHSAVE1=>ARDERBA THEN   /* OUT OF SPACE.                 */
         CLC   PLHSAVE1(4,RPLH),ARDERBA(@10)                       0806
         BL    @RF00806                                            0806
*         DO;                       /* EOV ALLOCATE SPACE.           */
*           PLHEOVR=AMBEOVAR;       /* SET ALLOCATE BY RBA.          */
         MVI   PLHEOVR(RPLH),B'10000010'                           0808
*           PLHEOVPT=ADDR(ARDERBA); /* POINT TO END RBA.             */
         LA    @10,ARDERBA(,@10)                                   0809
         ST    @10,PLHEOVPT(,RPLH)                                 0809
*I33:                                                              0810
*           DO;                     /* IDACALL(IDAEOVIF)             */
I33      DS    0H                                                  0811
*             CALL IDAEOVIF;        /* EXIT TO IDAEOVIF              */
         L     @15,@CV00955                                        0811
         BALR  @14,@15                                             0811
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I33;                /* CALL EOV INTERFACE.           */
*           IF RPLERREG^='00'X THEN /* EOV ERROR.                    */
         CLI   RPLERREG(RRPL),0                                    0817
         BE    @RF00817                                            0817
*             CALL EXIT;            /* RETURN.                       */
         BAL   @14,EXIT                                            0818
*           IF AMBSPEED=OFF THEN    /* NOT CREATE SPEED.             */
@RF00817 TM    AMBSPEED(RAMB),B'00001000'                          0819
         BNZ   @RF00819                                            0819
*             ARDHRBA=ARDHRBA+AMDCINV*AMDCIPCA;/* BUMP HI-USED RBA TO
*                                      NEXT CA.                      */
         L     @10,AMBDSB(,RAMB)                                   0820
         L     @05,AMDPARDB(,@10)                                  0820
         L     @00,AMDCINV(,@10)                                   0820
         MH    @00,AMDCIPCA(,@10)                                  0820
         AL    @00,ARDHRBA(,@05)                                   0820
         ST    @00,ARDHRBA(,@05)                                   0820
*           ELSE                    /* CREATE SPEED.                 */
*             ARDHRBA=ARDHRBA+AMDCINV;/* BUMP HI-USED RBA TO NEXT CI */
         B     @RC00819                                            0821
@RF00819 L     @10,AMBDSB(,RAMB)                                   0821
         L     @05,AMDPARDB(,@10)                                  0821
         L     @00,ARDHRBA(,@05)                                   0821
         AL    @00,AMDCINV(,@10)                                   0821
         ST    @00,ARDHRBA(,@05)                                   0821
*         END;                      /* END EOV ALLOCATE SPACE.       */
*       ELSE                        /* NOT OUT OF SPACE.             */
*         IF AMBSPEED=OFF THEN      /* IF NOT SPEED CREATE   @ZA15685*/
         B     @RC00806                                            0823
@RF00806 TM    AMBSPEED(RAMB),B'00001000'                          0823
         BNZ   @RF00823                                            0823
*           DO;                     /* PREFORMAT NEXT CA.            */
*             RPARM1=ARDHRBA;       /* SET PREFORMAT START RBA.      */
         L     @10,AMBDSB(,RAMB)                                   0825
         L     @10,AMDPARDB(,@10)                                  0825
         L     RPARM1,ARDHRBA(,@10)                                0825
*I34:                                                              0826
*             DO;                   /* IDACALL(IDA019RK)             */
I34      DS    0H                                                  0827
*               CALL IDA019RK;      /* EXIT TO IDA019RK              */
         L     @15,@CV00948                                        0827
         BALR  @14,@15                                             0827
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I34;              /* PREFORMAT NEXT CA.            */
*             IF RPLERREG^='00'X THEN/* PREFORMAT ERROR.             */
         CLI   RPLERREG(RRPL),0                                    0833
         BE    @RF00833                                            0833
*               CALL EXIT;          /* RETURN.                       */
         BAL   @14,EXIT                                            0834
*             ARDHRBA=RPARM1;       /* SET HI-USED RBA TO NEXT CA.   */
@RF00833 L     @10,AMBDSB(,RAMB)                                   0835
         L     @10,AMDPARDB(,@10)                                  0835
         ST    RPARM1,ARDHRBA(,@10)                                0835
*           END;                    /* END PREFORMAT NEXT CA.        */
*     END;                          /* END GETSPACE FOR SEQ.         */
*   ELSE                            /* NOT SEQUENTIAL REQ.           */
*     DO;                           /* GET SPACE FOR NON-SEQ REQ.    */
         B     @RC00804                                            0838
@RF00804 DS    0H                                                  0839
*       IF AMBSPEED=ON THEN         /* IF SPEED CREATE       @ZA15685*/
         TM    AMBSPEED(RAMB),B'00001000'                          0839
         BNO   @RF00839                                            0839
*         DO;                       /* PREFORMAT REMAINDER OF CA.    */
*           RBUFC=BUFCNXT2;         /* WRITE LOWEST RBA FIRST@ZA15685*/
         L     @10,PLHDBUFC(,RPLH)                                 0841
         L     RBUFC,BUFCNXT2-1(,@10)                              0841
         LA    RBUFC,0(,RBUFC)                                     0841
*I35:                                                              0842
*           DO;                     /* IDACALL(IDAWRBFR)             */
I35      DS    0H                                                  0843
*             CALL IDAWRBFR;        /* EXIT TO IDAWRBFR              */
         L     @15,@CV00946                                        0843
         BALR  @14,@15                                             0843
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I35;                /* FORCE OUT MW BUFFERS  @ZA15685*/
*           IF RPLERREG^='00'X THEN /* WRITE-BUFFER ERROR?   @ZA15685*/
         CLI   RPLERREG(RRPL),0                                    0849
         BE    @RF00849                                            0849
*             CALL EXIT;            /* RETURN.               @ZA15685*/
         BAL   @14,EXIT                                            0850
*           IF ARDHRBA//(AMDCINV*AMDCIPCA)^=ZERO/* IF NOT ON @ZA15685*/
*             THEN                  /* A CA BOUNDARY         @ZA15685*/
@RF00849 L     @10,AMBDSB(,RAMB)                                   0851
         L     @05,AMDPARDB(,@10)                                  0851
         L     @05,ARDHRBA(,@05)                                   0851
         L     @00,AMDCINV(,@10)                                   0851
         MH    @00,AMDCIPCA(,@10)                                  0851
         LR    @07,@05                                             0851
         SLR   @06,@06                                             0851
         DR    @06,@00                                             0851
         LTR   @06,@06                                             0851
         BZ    @RF00851                                            0851
*             DO;                   /* THEN PREFORMAT        @ZA15685*/
*               RPARM1=ARDHRBA;     /* SET PREFORMAT RBA.            */
         LR    RPARM1,@05                                          0853
*I36:                                                              0854
*               DO;                 /* IDACALL(IDA019RK)             */
I36      DS    0H                                                  0855
*                 CALL IDA019RK;    /* EXIT TO IDA019RK              */
         L     @15,@CV00948                                        0855
         BALR  @14,@15                                             0855
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I36;            /* CALL PREFORMAT.               */
*               IF RPLERREG^='00'X THEN/* PREFORMAT ERROR.           */
         CLI   RPLERREG(RRPL),0                                    0861
         BE    @RF00861                                            0861
*                 CALL EXIT;        /* RETURN.                       */
         BAL   @14,EXIT                                            0862
*               ARDHRBA=RPARM1;     /* SET NEW HI-USED RBA.          */
@RF00861 L     @10,AMBDSB(,RAMB)                                   0863
         L     @10,AMDPARDB(,@10)                                  0863
         ST    RPARM1,ARDHRBA(,@10)                                0863
*             END;                  /* END - PREFORMAT CALL  @ZA15685*/
*         END;                      /* END OF PREFORMAT.             */
@RF00851 DS    0H                                                  0866
*       DO WHILE PLHSAVE1=>ARDHRBA; /* PREFORMAT ALL CA'S WITH EMPTY
*                                      REC'S UP TO & INCLUDING CA OF
*                                      REQUESTED RECORD.             */
@RF00839 B     @DE00866                                            0866
@DL00866 DS    0H                                                  0867
*         IF ARDHRBA=>ARDERBA THEN  /* OUT OF SPACE.                 */
         L     @10,AMBDSB(,RAMB)                                   0867
         L     @10,AMDPARDB(,@10)                                  0867
         CLC   ARDHRBA(4,@10),ARDERBA(@10)                         0867
         BL    @RF00867                                            0867
*           DO;                     /* EOV ALLOCATE SPACE.           */
*             PLHEOVR=AMBEOVAR;     /* SET ALLOCATE BY RBA.          */
         MVI   PLHEOVR(RPLH),B'10000010'                           0869
*             PLHEOVPT=ADDR(ARDERBA);/* POINT TO END RBA.            */
         LA    @10,ARDERBA(,@10)                                   0870
         ST    @10,PLHEOVPT(,RPLH)                                 0870
*I37:                                                              0871
*             DO;                   /* IDACALL(IDAEOVIF)             */
I37      DS    0H                                                  0872
*               CALL IDAEOVIF;      /* EXIT TO IDAEOVIF              */
         L     @15,@CV00955                                        0872
         BALR  @14,@15                                             0872
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I37;              /* CALL EOV INTERFACE.           */
*             IF RPLERREG^='00'X THEN/* EOV ERROR.                   */
         CLI   RPLERREG(RRPL),0                                    0878
         BE    @RF00878                                            0878
*               CALL EXIT;          /* RETURN.                       */
         BAL   @14,EXIT                                            0879
*             PLHARDB=ADDR(IDAARDB);/* SET PLH ARDB - MAY HAVE BEEN
*                                      ZEROED BY EOV PRFMT REQ.      */
@RF00878 L     @10,AMBDSB(,RAMB)                                   0880
         L     @10,AMDPARDB(,@10)                                  0880
         ST    @10,PLHARDB(,RPLH)                                  0880
*             IF AMBSPEED=ON THEN   /* CREATE SPEED.                 */
         TM    AMBSPEED(RAMB),B'00001000'                          0881
         BNO   @RF00881                                            0881
*               DO;                                                0882
*                 RPARM1=ARDHRBA;   /* SET PREFORMAT RBA.            */
         L     RPARM1,ARDHRBA(,@10)                                0883
*I38:                                                              0884
*                 DO;               /* IDACALL(IDA019RK)             */
I38      DS    0H                                                  0885
*                   CALL IDA019RK;  /* EXIT TO IDA019RK              */
         L     @15,@CV00948                                        0885
         BALR  @14,@15                                             0885
*                   GEN(BALR @11,0);/* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                   GEN(USING *,@11);/* ESTABLISH ADDRESSING         */
         USING *,@11
*                   GEN(L     @11,=A(@PSTART));/* RELOAD BASE        */
         L     @11,=A(@PSTART)
*                   GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING   */
         USING @PSTART,@11
*                 END I38;          /* CALL PREFORMAT.               */
*                 IF RPLERREG^='00'X THEN/* PREFORMAT ERROR.         */
         CLI   RPLERREG(RRPL),0                                    0891
         BE    @RF00891                                            0891
*                   CALL EXIT;      /* RETURN.                       */
         BAL   @14,EXIT                                            0892
*                 ARDHRBA=RPARM1;   /* SET HI-USED RBA TO NEXT CA.   */
@RF00891 L     @10,AMBDSB(,RAMB)                                   0893
         L     @10,AMDPARDB(,@10)                                  0893
         ST    RPARM1,ARDHRBA(,@10)                                0893
*               END;                                               0894
*             ELSE                  /* NOT CREATE SPEED.             */
*               ARDHRBA=ARDHRBA+AMDCINV*AMDCIPCA;/* BUMP HI=USED RBA
*                                      TO NEXT CA.                   */
         B     @RC00881                                            0895
@RF00881 L     @10,AMBDSB(,RAMB)                                   0895
         L     @05,AMDPARDB(,@10)                                  0895
         L     @00,AMDCINV(,@10)                                   0895
         MH    @00,AMDCIPCA(,@10)                                  0895
         AL    @00,ARDHRBA(,@05)                                   0895
         ST    @00,ARDHRBA(,@05)                                   0895
*           END;                    /* END EOV ALLOCATE SPACE.       */
*         ELSE                      /* NOT OUT OF SPACE.             */
*           DO;                                                    0897
         B     @RC00867                                            0897
@RF00867 DS    0H                                                  0898
*             RPARM1=ARDHRBA;       /* SET PREFORMAT RBA.            */
         L     @10,AMBDSB(,RAMB)                                   0898
         L     @10,AMDPARDB(,@10)                                  0898
         L     RPARM1,ARDHRBA(,@10)                                0898
*I39:                                                              0899
*             DO;                   /* IDACALL(IDA019RK)             */
I39      DS    0H                                                  0900
*               CALL IDA019RK;      /* EXIT TO IDA019RK              */
         L     @15,@CV00948                                        0900
         BALR  @14,@15                                             0900
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I39;              /* CALL PREFORMAT.               */
*             IF RPLERREG^='00'X THEN/* PREFORMAT ERROR.             */
         CLI   RPLERREG(RRPL),0                                    0906
         BE    @RF00906                                            0906
*               CALL EXIT;          /* RETURN.                       */
         BAL   @14,EXIT                                            0907
*             ARDHRBA=RPARM1;       /* SET HI-USED RBA TO NEXT CA.   */
@RF00906 L     @10,AMBDSB(,RAMB)                                   0908
         L     @10,AMDPARDB(,@10)                                  0908
         ST    RPARM1,ARDHRBA(,@10)                                0908
*           END;                                                   0909
*       END;                        /* END OF DO LOOP.               */
@RC00867 DS    0H                                                  0910
@DE00866 L     @10,AMBDSB(,RAMB)                                   0910
         L     @05,AMDPARDB(,@10)                                  0910
         L     @15,ARDHRBA(,@05)                                   0910
         CL    @15,PLHSAVE1(,RPLH)                                 0910
         BNH   @DL00866                                            0910
*       IF AMBSPEED=ON THEN         /* CREATE SPEED.                 */
         TM    AMBSPEED(RAMB),B'00001000'                          0911
         BNO   @RF00911                                            0911
*         DO;                       /* YES, SET HRBA & HKRBA @ZA15685*/
*           PLHSAVE2=ARDHRBA;       /* HIGH PREFORMATTED RBA @ZA15685*/
         ST    @15,PLHSAVE2(,RPLH)                                 0913
*           ARDHRBA=PLHSAV1X-(PLHSAV1X//AMDCINV)+AMDCINV;/* RESET  0914
*                                      HI-USED RBA TO NEXT CI PAST 0914
*                                      CURRENT.              @ZA10887*/
         L     @15,PLHSAV1X(,RPLH)                                 0914
         L     @10,AMDCINV(,@10)                                   0914
         LR    @07,@15                                             0914
         SLR   @06,@06                                             0914
         DR    @06,@10                                             0914
         SLR   @15,@06                                             0914
         ALR   @15,@10                                             0914
         ST    @15,ARDHRBA(,@05)                                   0914
*         END;                      /* END - CREATE SPEED    @ZA15685*/
*     END;                          /* END GET SPACE NON-SEQ REQ.    */
@RF00911 DS    0H                                                  0917
*   AMDNLR=(ARDHRBA/AMDCINV)*AMDNSLOT;/* SET TOTAL NO. OF RECS.      */
@RC00804 L     @10,AMBDSB(,RAMB)                                   0917
         L     @05,AMDPARDB(,@10)                                  0917
         L     @15,ARDHRBA(,@05)                                   0917
         LR    @07,@15                                             0917
         SLR   @06,@06                                             0917
         D     @06,AMDCINV(,@10)                                   0917
         M     @06,AMDNSLOT(,@10)                                  0917
         ST    @07,AMDNLR(,@10)                                    0917
*   AMDASPA=ARDERBA-ARDHRBA;        /* SET NO. BYTES FREE SPACE.     */
         LCR   @15,@15                                             0918
         AL    @15,ARDERBA(,@05)                                   0918
         ST    @15,AMDASPA(,@10)                                   0918
*   CALL EXIT;                      /* RETURN.                       */
         BAL   @14,EXIT                                            0919
*   END GETSPACE;                   /* END PROC. GETSPACE.           */
@EL00006 DS    0H                                                  0920
@EF00006 DS    0H                                                  0920
@ER00006 BR    @14                                                 0920
*BFRFMT:                                                           0921
*                                                                  0921
*   /*****************************************************************/
*   /*                                                               */
*   /* BUFFER FORMAT ROUTINE --- FORMATS BUFFER WITH EMPTY RECORDS.  */
*   /* --- INPUT - PLHDBUFC = BUFC OF BUFFER TO BE FORMATTED. ---    */
*   /* OUTPUT - FORMATTED BUFFER.                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0921
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0921
BFRFMT   DS    0H                                                  0922
*   RFY                                                            0922
*     R14 RSTD;                     /* RESTRICT REG 14.              */
*   RFY                                                            0923
*    (RWORK2,                                                      0923
*     RWORK3,                                                      0923
*     RWORK5) RSTD;                 /* RESTRICT WORK REGS.           */
*   RFY                                                            0924
*     IDARDF BASED(RWORK5);         /* BASE RDF ON RWORK5.           */
*   RWORK2=BUFCBAD;                 /* TO ADDRESS.                   */
         L     @15,PLHDBUFC(,RPLH)                                 0925
         L     RWORK2,BUFCBAD(,@15)                                0925
*   RWORK3=AMDCINV;                 /* TO LENGTH.                    */
         L     @15,AMBDSB(,RAMB)                                   0926
         L     RWORK3,AMDCINV(,@15)                                0926
*   RWORK5=ZERO;                    /* PAD CHAR. & FROM LENGTH.      */
         SLR   RWORK5,RWORK5                                       0927
*   GEN(MVCL RWORK2,RWORK4);        /* SET BUFFER TO 0'S.            */
         MVCL RWORK2,RWORK4
*   RFY                                                            0929
*     RWORK3 UNRSTD;                /* FREE REGISTER.                */
*   RWORK5=BUFCBAD+AMDCINV-LENGTH(IDACIDF);/* POINT TO CIDF.         */
         LA    @15,4                                               0930
         L     @10,PLHDBUFC(,RPLH)                                 0930
         L     @07,AMBDSB(,RAMB)                                   0930
         L     @05,AMDCINV(,@07)                                   0930
         L     RWORK5,BUFCBAD(,@10)                                0930
         ALR   RWORK5,@05                                          0930
         SLR   RWORK5,@15                                          0930
*   RWORK2=AMDNSLOT*PLHLRECL;       /* LENGTH OF RECORDS.            */
         L     @10,AMDNSLOT(,@07)                                  0931
         LR    @07,@10                                             0931
         M     RWORK2,PLHLRECL(,RPLH)                              0931
         LR    RWORK2,@07                                          0931
*   RWORK5->CIDFOSET=RWORK2;        /* SET CIDF OFFSET.              */
         STH   RWORK2,CIDFOSET(,RWORK5)                            0932
*   RWORK2=RWORK2+(AMDNSLOT*LENGTH(IDARDF))+LENGTH(IDACIDF);/* LENGTH
*                                      OF RECS, RDF'S & CIDF.        */
         LR    @08,@10                                             0933
         MH    @08,@CH00157                                        0933
         ALR   @08,RWORK2                                          0933
         ALR   @08,@15                                             0933
         LR    RWORK2,@08                                          0933
*   RWORK5->CIDFLL=AMDCINV-RWORK2;  /* SET CIDF FS COUNT.            */
         SLR   @05,RWORK2                                          0934
         STH   @05,CIDFLL(,RWORK5)                                 0934
*   DO RWORK2=AMDNSLOT TO 1 BY-1;   /* LOOP THRU ALL RDF'S.          */
         LR    RWORK2,@10                                          0935
         B     @DE00935                                            0935
@DL00935 DS    0H                                                  0936
*     RWORK5=RWORK5-LENGTH(IDARDF); /* BACKUP RDF PTR.               */
         SL    RWORK5,@CF00157                                     0936
*     RDFEMPTY=ON;                  /* SET RDF EMPTY RECORD.         */
         OI    RDFEMPTY(RWORK5),B'00000100'                        0937
*     RDFLL=PLHLRECL;               /* SET RDF RECORD LENGTH.        */
         MVC   RDFLL(2,RWORK5),PLHLRECL+2(RPLH)                    0938
*   END;                            /* END OF RDF LOOP.              */
         BCTR  RWORK2,0                                            0939
@DE00935 CL    RWORK2,@CF00053                                     0939
         BNL   @DL00935                                            0939
*   RETURN;                         /* RETURN.                       */
@EL00007 DS    0H                                                  0940
@EF00007 DS    0H                                                  0940
@ER00007 BR    @14                                                 0940
*   RFY                                                            0941
*    (RWORK2,                                                      0941
*     RWORK5) UNRSTD;               /* FREE REG'S.                   */
*   RFY                                                            0942
*     IDARDF BASED;                 /* RESET RDF BASE.               */
*   RFY                                                            0943
*     R14 UNRSTD;                   /* FREE REGISTER 14.             */
*   END BFRFMT;                     /* END PROC BFRFMT.              */
*EXIT:                                                             0945
*                                                                  0945
*   /*****************************************************************/
*   /*                                                               */
*   /* EXIT ROUTINE --- RESTORES REGISTER 14 FROM PLH PUSHDOWN LIST &*/
*   /* RETURNS TO CALLER.                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0945
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0945
EXIT     DS    0H                                                  0946
*   GEN(IDARST14);                  /* RESTORE REGISTER 14.          */
         IDARST14
*   RETURN;                         /* RETURN TO CALLER.             */
@EL00008 DS    0H                                                  0947
@EF00008 DS    0H                                                  0947
@ER00008 BR    @14                                                 0947
*   END EXIT;                       /* END PROC. EXIT.               */
@PB00008 DS    0H                                                  0949
*   GEN(IDAPATCH);                  /* DEFINE PATCH AREA.            */
         IDAPATCH
*   END IDA019RQ                    /* END MODULE IDA019RQ.          */
*                                                                  0950
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IDADIWA )                                       */
*/*%INCLUDE SYSLIB  (IDACIDF )                                       */
*/*%INCLUDE SYSLIB  (IDARDF  )                                       */
*                                                                  0950
*       ;                                                          0950
@EL00001 DS    0H                                                  0950
@EF00001 DS    0H                                                  0950
@ER00001 BR    @14                                                 0950
@DATA    DS    0H
@DATD    DSECT
         DS    0F
IDA019RQ CSECT
         DS    0F
@CF00053 DC    F'1'
@CF00157 DC    F'3'
@CH00157 EQU   @CF00157+2
@CF00067 DC    F'4'
@CF00288 DC    F'7'
@DATD    DSECT
         DS    0D
IDA019RQ CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00943 DC    V(IDAABF)
@CV00944 DC    V(IDAGNXT)
@CV00945 DC    V(IDAGNNFL)
@CV00946 DC    V(IDAWRBFR)
@CV00947 DC    V(IDAFREEB)
@CV00948 DC    V(IDA019RK)
@CV00949 DC    V(IDATJXIT)
@CV00950 DC    V(IDAGXCTL)
@CV00951 DC    V(IDADRQ)
@CV00952 DC    V(IDAGRB)
@CV00953 DC    V(IDASBF)
@CV00954 DC    V(IDAAIBF)
@CV00955 DC    V(IDAEOVIF)
@CV00956 DC    V(IDARRDRL)
         DS    0D
HWORD4   DC    H'4'
@CB00797 DC    X'0000'
@DATD    DSECT
*                                                          /*@X04SVLC*/
RDFCTNUA EQU   X'40'                    COMPLEX RDF INDICATOR
RDFCTNUX EQU   X'FF'-RDFCTNUA           RESET COMPLEX MASK
RDFREPLA EQU   X'08'                    COUNT RDF INDICATOR
RDFREPLX EQU   X'FF'-RDFREPLA           RESET COUNT MASK
RDFEMPTI EQU   X'04'                    EMPTY RECORD       /*@X04SVLC*/
RDFLEN   EQU   3                        LENGTH OF RDF
RDFLLOFF EQU   1                        OFFSET WITHIN RDF TO LL
RDFSGLR  EQU   X'00'                   MASK FOR SINGLE RECORD RDF
RDFGRP   EQU   RDFCTNUA                 MASK FOR LL RDF OF A GROUP RDF
RDFCNT   EQU   RDFREPLA                 MASK FOR COUNT RDF
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019RQ CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RWORK0   EQU   @00
RRPL     EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
RPARM1   EQU   @12
R14      EQU   @14
RWORK1   EQU   @05
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
R15      EQU   @15
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLREQ   EQU   RPLIDWD+2
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLLOC   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLNSP   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLDDDD  EQU   RPLRBAR+4
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLFULL EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLFLG2 EQU   IDAAMBL+36
IDAAMB   EQU   0
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBCREAT EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBINBUF EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBDFR   EQU   AMBAFLG
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDNEST  EQU   IDAAMDSB+4
AMDCIPCA EQU   IDAAMDSB+12
AMDCINV  EQU   IDAAMDSB+20
AMDHLRBA EQU   IDAAMDSB+28
AMDNSLOT EQU   AMDHLRBA
AMDSSRBA EQU   IDAAMDSB+32
AMDMAXRR EQU   AMDSSRBA
AMDPARDB EQU   IDAAMDSB+36
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
AMDNLR   EQU   AMDSTAT+12
AMDDELR  EQU   AMDSTAT+16
AMDIREC  EQU   AMDSTAT+20
AMDUPR   EQU   AMDSTAT+24
AMDASPA  EQU   AMDSTAT+32
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHASKBF EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHUPD   EQU   PLHFLG2
PLHEFLGS EQU   IDAPLH+4
PLH1ST   EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHDSCAN EQU   PLHEFLGS
PLHRSTRT EQU   PLHEFLGS+1
PLHFLG3  EQU   IDAPLH+6
PLHRAHD  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHAFLGS EQU   IDAPLH+7
PLHDRLM  EQU   PLHAFLGS
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHRCODE EQU   IDAPLH+41
PLHEOVR  EQU   IDAPLH+42
PLHARDB  EQU   IDAPLH+44
PLHLRECL EQU   IDAPLH+48
PLHDBUFC EQU   IDAPLH+52
PLHRECP  EQU   IDAPLH+60
PLHFSP   EQU   IDAPLH+64
PLHRDFP  EQU   IDAPLH+68
PLHDIOB  EQU   IDAPLH+76
PLHSAVE1 EQU   IDAPLH+84
PLHSAVE2 EQU   IDAPLH+88
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHHIREC EQU   PLHSSRBA
PLHWAX   EQU   IDAPLH+232
PLHKEYPT EQU   IDAPLH+248
PLHEND   EQU   IDAPLH+280
PLHRRN   EQU   0
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCINS  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCDDDD EQU   IDABUFC+8
BUFCORBA EQU   IDABUFC+12
BUFCBAD  EQU   IDABUFC+20
BUFCINV  EQU   IDABUFC+28
BUFCNXT2 EQU   IDABUFC+37
BUFXIRBA EQU   IDABUFC+40
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDHRBA  EQU   IDAARDB+12
ARDERBA  EQU   IDAARDB+16
ARDPRF   EQU   IDAARDB+28
IDADIWA  EQU   0
DIWATV   EQU   IDADIWA+1
DIWFLG1  EQU   IDADIWA+4
DIWFLG2  EQU   IDADIWA+5
DIWSAVE  EQU   IDADIWA+28
IDACIDF  EQU   0
CIDFOSET EQU   IDACIDF
CIDFLL   EQU   IDACIDF+2
IDARDF   EQU   0
RDFRBYTE EQU   IDARDF
RDFSEG   EQU   RDFRBYTE
RDFEMPTY EQU   RDFRBYTE
RDFLL    EQU   IDARDF+1
IDADATA  EQU   0
IDAKEY   EQU   0
ARGFIELD EQU   0
PLHKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
PLHSAV1X EQU   PLHSAVE1
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00042 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
KEY      EQU   IDAKEY
AMDATA   EQU   IDADATA
RDFREPL  EQU   RDFRBYTE
RDF1ST   EQU   RDFSEG
RDFNOT1  EQU   RDFSEG
RDFCTNU  EQU   RDFRBYTE
RDFTYPE  EQU   RDFRBYTE
@NM00058 EQU   CIDFLL
CIDFBUSY EQU   CIDFLL
@NM00057 EQU   IDADIWA+92
@NM00056 EQU   IDADIWA+88
@NM00055 EQU   IDADIWA+84
@NM00054 EQU   IDADIWA+80
@NM00053 EQU   IDADIWA+76
@NM00052 EQU   IDADIWA+72
@NM00051 EQU   IDADIWA+68
@NM00050 EQU   IDADIWA+64
@NM00049 EQU   IDADIWA+60
@NM00048 EQU   IDADIWA+56
DIWINRBA EQU   IDADIWA+52
DIWRKCT  EQU   IDADIWA+48
DIWSAVE5 EQU   DIWSAVE+16
DIWSAVE4 EQU   DIWSAVE+12
DIWSAVE3 EQU   DIWSAVE+8
DIWSAVE2 EQU   DIWSAVE+4
DIWSAVE1 EQU   DIWSAVE
DIWSPLTP EQU   IDADIWA+24
DIWBUFC  EQU   IDADIWA+20
DIWPLH   EQU   IDADIWA+16
DIWHRBA  EQU   IDADIWA+12
DIWLRBA  EQU   IDADIWA+8
@NM00047 EQU   IDADIWA+6
DIWFSPF  EQU   DIWFLG2
DIW1ST   EQU   DIWFLG1
DIWNOT1  EQU   DIWFLG1
DIWSHIFT EQU   DIWFLG1
DIWGSPC  EQU   DIWFLG1
DIWEOKR  EQU   DIWFLG1
DIWPFERR EQU   DIWFLG1
DIWCISPL EQU   DIWFLG1
DIWCAS   EQU   DIWFLG1
DIWLEN   EQU   IDADIWA+2
DIWID    EQU   IDADIWA
ARDKEYS  EQU   IDAARDB+29
@NM00046 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDHKRBA EQU   IDAARDB+8
ARDNPTR  EQU   IDAARDB+4
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDEOD   EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCHAIN EQU   IDABUFC+48
BUFXORBA EQU   IDABUFC+44
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCCPA  EQU   IDABUFC+16
BUFCAMB  EQU   BUFCPLH
@NM00045 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00044 EQU   IDABUFDR+16
BUFDBUFC EQU   IDABUFDR+12
@NM00043 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00041 EQU   IDAPLH+265
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00040 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHISPLP EQU   IDAPLH+196
PLHRBUFC EQU   IDAPLH+192
PLHIBUFC EQU   IDAPLH+188
PLHNRBA  EQU   IDAPLH+184
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00039 EQU   IDAPLH+172
@NM00038 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHAMB   EQU   IDAPLH+108
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHNBUFC EQU   IDAPLH+56
@NM00037 EQU   IDAPLH+43
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00036 EQU   PLHEFLGS+1
PLHSRINV EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
@NM00035 EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDRETR  EQU   AMDSTAT+28
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00034 EQU   IDAAMDSB+41
@NM00033 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDLRECL EQU   IDAAMDSB+24
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDKEYLN EQU   IDAAMDSB+8
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00032 EQU   AMBCSWD1+1
@NM00031 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBLSR   EQU   AMBAFLG
@NM00030 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00029 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00028 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00027 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00026 EQU   AMBINFL
@NM00025 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00024 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00023 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00022 EQU   AMBDSORG
AMBUBF   EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
@NM00021 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLIX   EQU   IDAAMBL+56
AMBLDTA  EQU   IDAAMBL+52
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00020 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00019 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00018 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00017 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00016 EQU   IDAAMBL+31
@NM00015 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00014 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00013 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00012 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00011 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00010 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00009 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00008 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00007 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00006 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00005 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00004 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00003 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
@NM00002 EQU   RPLRBAR+3
@NM00001 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00289 EQU   @RC00287
@RF00433 EQU   @RC00431
@RF00436 EQU   @RC00431
@RF00445 EQU   @RC00442
@RF00467 EQU   @RC00457
@RF00523 EQU   @RC00495
@RC00423 EQU   @EL00003
@RF00573 EQU   @RC00564
@RF00823 EQU   @RC00804
@RC00806 EQU   @RC00804
@RC00881 EQU   @RC00867
@PB00007 EQU   @PB00008
@RC00819 EQU   @RC00806
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IDA019RQ,(C'PLS2115',0701,78172)
