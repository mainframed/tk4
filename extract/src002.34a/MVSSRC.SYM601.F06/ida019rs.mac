         TITLE 'IDA019RS--SPANNED RECORD DATA MODIFY                   *
                        '
IDA019RS CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'IDA019RS  78.172'                                 0001
IDAMVSEG DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00460-IDAMVSEG)
         ENTRY IDAMVSEG
IDAADSEG DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00549-IDAADSEG)
         ENTRY IDAADSEG
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
         IDASVR14
*   IF AMDDST='0'B THEN             /* IS THIS ESDS                  */
         L     @10,AMBDSB(,RAMB)                                   0107
         TM    AMDDST(@10),B'10000000'                             0107
         BZ    @RT00107                                            0107
*     GO TO HAVDIWA;                /* YES, AVOID DIWA               */
*   IF AMBLSR=ON×AMBGSR=ON THEN     /* SHARED RESOURSES              */
         TM    AMBLSR(RAMB),B'01100000'                            0109
         BZ    @RF00109                                            0109
*     DO;                           /* YES                           */
*       RBUFC=PLHIBUFC;             /* POINT TO SEQ SET              */
         L     RBUFC,PLHIBUFC(,RPLH)                               0111
*       IF RBUFC^=ZERO THEN         /* OWNED BY PLH                  */
         LTR   RBUFC,RBUFC                                         0112
         BZ    @RF00112                                            0112
*I01:                                                              0113
*         DO;                       /* IDACALL(IDAFREEB)             */
I01      DS    0H                                                  0114
*           CALL IDAFREEB;          /* EXIT TO IDAFREEB              */
         L     @15,@CV00958                                        0114
         BALR  @14,@15                                             0114
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I01;                  /* YES, FREE IT                  */
*     END;                          /*                               */
@RF00112 DS    0H                                                  0121
*LOCKDIWA:                                                         0121
*   RPARM1=ADDR(DIWATV);            /* POINT TO LOCK BYTE            */
@RF00109 DS    0H                                                  0121
LOCKDIWA L     RPARM1,AMBIWA(,RAMB)                                0121
         LA    RPARM1,DIWATV(,RPARM1)                              0121
*   GEN(TS  0(RPARM1));             /* TEST AND SET                  */
         TS  0(RPARM1)
*   GEN FLOWS(HAVDIWA)(BZ  HAVDIWA);/* OBTAINED DIWA                 */
         BZ  HAVDIWA
*   RESPECIFY                                                      0124
*     RWORK0 RSTD;                  /*                               */
*   RWORK0=DEFR0;                   /* DATA INSERT REQUEST           */
         SLR   RWORK0,RWORK0                                       0125
*I02:                                                              0126
*   DO;                             /* IDACALL(IDADRQ)               */
I02      DS    0H                                                  0127
*     CALL IDADRQ;                  /* EXIT TO IDADRQ                */
         L     @15,@CV00919                                        0127
         BALR  @14,@15                                             0127
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I02;                        /* GO TO DEFERRED REQUEST        */
*   GO TO LOCKDIWA;                 /* TRY AGAIN                     */
         B     LOCKDIWA                                            0133
*   RFY                                                            0134
*     RWORK0 UNRSTD;                /*                               */
*HAVDIWA:                           /* DIWA OBTAINED                 */
*   DIWPLH=RPLH;                    /* IDENTIFY LOCKING PLH          */
HAVDIWA  L     @10,AMBIWA(,RAMB)                                   0135
         ST    RPLH,DIWPLH(,@10)                                   0135
*   RBUFC=PLHIBUFC;                 /* POINT TO SEQ SET BUFC         */
         L     RBUFC,PLHIBUFC(,RPLH)                               0136
*   IF(RBUFC=ZERO×BUFCRRD=ON×       /* MUST THE SEQUENCE SET         */
*       BUFCEXC=OFF)&AMDDST='1'B THEN/* BE REREAD                    */
         LTR   RBUFC,RBUFC                                         0137
         BZ    @GL00001                                            0137
         TM    BUFCRRD(RBUFC),B'00100000'                          0137
         BO    @GL00001                                            0137
         TM    BUFCEXC(RBUFC),B'00000010'                          0137
         BNZ   @RF00137                                            0137
@GL00001 L     @10,AMBDSB(,RAMB)                                   0137
         TM    AMDDST(@10),B'10000000'                             0137
         BNO   @RF00137                                            0137
*     DO;                           /* YES                           */
*       RAMB=AMBLIX;                /* POINT TO INDEX AMB            */
         L     @10,RPLDACB(,RRPL)                                  0139
         L     @10,ACBAMBL(,@10)                                   0139
         L     RAMB,AMBLIX(,@10)                                   0139
*       RPARM1=ADDR(PLHIXSPL);      /* POINT TO INX PARM LIST        */
         LA    RPARM1,PLHIXSPL(,RPLH)                              0140
*       RPARM1->IXSILN=ONE;         /* SET LEVEL TO 1                */
         MVI   IXSILN(RPARM1),X'01'                                0141
*       PLHSSR=ON;                  /* INDICATE SEQ SET READ         */
         OI    PLHSSR(RPLH),B'00010000'                            0142
*       RPARM1=PLHSSRBA;            /* GET SEQ SET RBA               */
         L     RPARM1,PLHSSRBA(,RPLH)                              0143
*I03:                                                              0144
*       DO;                         /* IDACALL(IDAGRB)               */
I03      DS    0H                                                  0145
*         CALL IDAGRB;              /* EXIT TO IDAGRB                */
         L     @15,@CV00928                                        0145
         BALR  @14,@15                                             0145
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I03;                    /* GO READ THE SEQ SET           */
*       RAMB=AMBLDTA;               /* RESET AMB REGISTER            */
         L     @10,RPLDACB(,RRPL)                                  0151
         L     @10,ACBAMBL(,@10)                                   0151
         L     RAMB,AMBLDTA(,@10)                                  0151
*       IF RPLERREG^=ZERO THEN      /* I/O ERROR                     */
         CLI   RPLERREG(RRPL),0                                    0152
         BE    @RF00152                                            0152
*         DO;                       /* YES                           */
*           DIWATV=ZERO;            /* GIVE UP WORK AREA             */
         L     @10,AMBIWA(,RAMB)                                   0154
         MVI   DIWATV(@10),X'00'                                   0154
*           CALL EXIT;              /* RETURN                        */
         BAL   @14,EXIT                                            0155
*         END;                      /*                               */
*     END;                          /*                               */
@RF00152 DS    0H                                                  0158
*   PLHISPLP=ADDR(PLHIXSPL);        /* SET PARM LIST ADDRESS         */
@RF00137 LA    @10,PLHIXSPL(,RPLH)                                 0158
         ST    @10,PLHISPLP(,RPLH)                                 0158
*   IF RPLREQ=RPLERASE THEN         /* IS REQUEST FOR ERASE          */
         CLI   RPLREQ(RRPL),5                                      0159
         BNE   @RF00159                                            0159
*     DO;                           /* YES                           */
*       RESPECIFY                                                  0161
*         RWORK3 RSTD;              /*                               */
*       RBUFC=PLHIBUFC->BUFCBAD;    /* POINT TO INDEX RECORD         */
         L     @10,PLHIBUFC(,RPLH)                                 0162
         L     RBUFC,BUFCBAD(,@10)                                 0162
*       RAMB=AMBLIX;                /* ADDRESS THRU INDEX CB         */
         L     @10,RPLDACB(,RRPL)                                  0163
         L     @10,ACBAMBL(,@10)                                   0163
         L     RAMB,AMBLIX(,@10)                                   0163
*       IMWIXSP=ADDR(IMWISWKA);     /* SET ADDRESSABILITY TO         */
         L     @10,AMBIWA(,RAMB)                                   0164
         L     @10,ICWCHN(,@10)                                    0164
         LA    @06,IMWISWKA(,@10)                                  0164
         ST    @06,IMWIXSP(,@10)                                   0164
*       RWORK3=IMWIXSP;             /* SET ADDR OF PARM LIST FOR SCIB*/
         LR    RWORK3,@06                                          0165
*       RPARM1=ADDR(PLHKEY);        /* POINT TO ARGUMENT             */
         L     RPARM1,PLHKEYPT(,RPLH)                              0166
*I04:                                                              0167
*       DO;                         /* IDACALL(IDA019RC)             */
I04      DS    0H                                                  0168
*         CALL IDA019RC;            /* EXIT TO IDA019RC              */
         L     @15,@CV00926                                        0168
         BALR  @14,@15                                             0168
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I04;                    /* SCIB                          */
*       RWORK3=IXSHEP;              /* POINT TO RIGHT END OF COMPLEX
*                                      ENTRY                         */
         L     @10,AMBIWA(,RAMB)                                   0174
         L     @10,ICWCHN(,@10)                                    0174
         L     @10,IMWIXSP(,@10)                                   0174
         L     RWORK3,IXSHEP(,@10)                                 0174
*       PLHNOSEG=ONE;               /* START SEG COUNT AT 1          */
         MVC   PLHNOSEG(2,RPLH),@CH00053                           0175
*       DO WHILE RWORK3->IBFLPF=AMDKEYLN;/* LOOP THRU ALL SEGMENTS TO
*                                      THE LAST                      */
         B     @DE00176                                            0176
@DL00176 DS    0H                                                  0177
*         RWORK3=RWORK3-RBUFC->IXHFLPLN;/* MOVE TO NEXT ENTRY        */
         SLR   @10,@10                                             0177
         IC    @10,IXHFLPLN(,RBUFC)                                0177
         SLR   RWORK3,@10                                          0177
*         PLHNOSEG=PLHNOSEG+ONE;    /* BUMP SEG COUNT                */
         LA    @10,1                                               0178
         AH    @10,PLHNOSEG(,RPLH)                                 0178
         STH   @10,PLHNOSEG(,RPLH)                                 0178
*       END;                        /*                               */
@DE00176 L     @10,AMBDSB(,RAMB)                                   0179
         SLR   @06,@06                                             0179
         IC    @06,IBFLPF(,RWORK3)                                 0179
         CH    @06,AMDKEYLN(,@10)                                  0179
         BE    @DL00176                                            0179
*       IXSHEP=RWORK3;              /* SAVE LEFT END POSITION        */
         L     @10,AMBIWA(,RAMB)                                   0180
         L     @10,ICWCHN(,@10)                                    0180
         L     @10,IMWIXSP(,@10)                                   0180
         ST    RWORK3,IXSHEP(,@10)                                 0180
*       RESPECIFY                                                  0181
*        (RWORK2,                                                  0181
*         RWORK4) RSTD;             /*                               */
*       DO PLHSRCSG=ONE TO PLHNOSEG;/* LOOP COVERS ALL SEGMENTS OF 0182
*                                      SPANNED RECORD                */
         LA    @10,1                                               0182
         B     @DE00182                                            0182
@DL00182 DS    0H                                                  0183
*         RWORK2=PLHIBUFC->BUFCBAD; /* POINT TO INDEX RECORD         */
         L     @10,PLHIBUFC(,RPLH)                                 0183
         L     RWORK2,BUFCBAD(,@10)                                0183
*         RWORK3=IXSHEP+LENGTH(IBFLPL)+/* POINT TO POINTER FIELD     */
*             LENGTH(IBFLPF);       /* OF CURRENT ENTRY              */
         L     @10,AMBIWA(,RAMB)                                   0184
         L     @10,ICWCHN(,@10)                                    0184
         L     @10,IMWIXSP(,@10)                                   0184
         LA    RWORK3,2                                            0184
         AL    RWORK3,IXSHEP(,@10)                                 0184
*         RWORK4=RWORK2->IXHPTLS;   /* GET MASK FROM HEADER          */
         SLR   RWORK4,RWORK4                                       0185
         IC    RWORK4,IXHPTLS(,RWORK2)                             0185
*         RPARM1=ZERO;              /* ASSURE CLEAN REGISTER         */
         SLR   RPARM1,RPARM1                                       0186
*         GEN(EX  RWORK4,PICKPT);   /* EXTRACT POINTER AND           */
         EX  RWORK4,PICKPT
*         IMWIPTR=RPARM1;           /* SAVE IT IN WORK AREA          */
         L     @10,AMBIWA(,RAMB)                                   0188
         L     @10,ICWCHN(,@10)                                    0188
         ST    RPARM1,IMWIPTR(,@10)                                0188
*         RAMB=AMBLDTA;             /* ADDRESS THRU DATA CB          */
         L     @10,RPLDACB(,RRPL)                                  0189
         L     @10,ACBAMBL(,@10)                                   0189
         L     RAMB,AMBLDTA(,@10)                                  0189
*         CALL CLEARSEG;            /* GET A BUFFER AND CLEAR        */
         BAL   @14,CLEARSEG                                        0190
*         RAMB=AMBLIX;              /* ADDRESS THRU INDEX CB         */
         L     @10,RPLDACB(,RRPL)                                  0191
         L     @10,ACBAMBL(,@10)                                   0191
         L     @09,AMBLIX(,@10)                                    0191
         LR    RAMB,@09                                            0191
*         RWORK2=IMWIPTR;           /* GET POINTER                   */
         L     @05,AMBIWA(,RAMB)                                   0192
         L     @05,ICWCHN(,@05)                                    0192
         L     RWORK2,IMWIPTR(,@05)                                0192
*         RAMB=AMBLDTA;             /* ADDRESS THRU DATA CB          */
         L     RAMB,AMBLDTA(,@10)                                  0193
*         BUFCORBA=(PLHIBUFC->BUFCBAD->IXHBRBA)+(RWORK2*AMDCINV);/*
*                                      COMPUTE THE RBA OF DATA RECORD
*                                      FROM POINTER EXTRACTED FROM 0194
*                                      SEQ SET                       */
         L     @10,PLHIBUFC(,RPLH)                                 0194
         L     @10,BUFCBAD(,@10)                                   0194
         L     @05,AMBDSB(,RAMB)                                   0194
         LR    @15,RWORK2                                          0194
         M     @14,AMDCINV(,@05)                                   0194
         AL    @15,IXHBRBA(,@10)                                   0194
         ST    @15,BUFCORBA(,RBUFC)                                0194
*         BUFCDDDD=BUFCORBA;        /* SET INPUT RBA                 */
         ST    @15,BUFCDDDD(,RBUFC)                                0195
*         RAMB=AMBLIX;              /* ADDRESS THRU INDEX CB         */
         LR    RAMB,@09                                            0196
*         IF PLHSRCSG^=PLHNOSEG THEN/* LAST SEGMENT                  */
         CLC   PLHSRCSG(2,RPLH),PLHNOSEG(RPLH)                     0197
         BE    @RF00197                                            0197
*           DO;                     /* NO                            */
*             CALL DELSEG;          /* REMOVE A CI PTR FROM SEQ SET
*                                      AND UPDATE SS POINTERS FOR BUF
*                                      MGR                           */
         BAL   @14,DELSEG                                          0199
*           END;                    /*                               */
*         ELSE                      /* FINAL SEG COMPLETE            */
*           DO;                     /*                               */
         B     @RC00197                                            0201
@RF00197 DS    0H                                                  0202
*             RBUFC=PLHIBUFC;       /* POINT TO SEQ SET BUFC         */
         L     RBUFC,PLHIBUFC(,RPLH)                               0202
*             BUFCMW=ON;            /* SET MUST WRITE ON             */
         OI    BUFCMW(RBUFC),B'10000000'                           0203
*             BUFCORBA=BUFCDDDD;    /* SET OUTPUT RBA                */
         L     @10,BUFCDDDD(,RBUFC)                                0204
         ST    @10,BUFCORBA(,RBUFC)                                0204
*I05:                                                              0205
*             DO;                   /* IDACALL(IDAWRBFR)             */
I05      DS    0H                                                  0206
*               CALL IDAWRBFR;      /* EXIT TO IDAWRBFR              */
         L     @15,@CV00925                                        0206
         BALR  @14,@15                                             0206
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I05;              /* WRITE REVISED SEQ SET         */
*I06:                                                              0212
*             DO;                   /* IDACALL(IDAIVIXB)             */
I06      DS    0H                                                  0213
*               CALL IDAIVIXB;      /* EXIT TO IDAIVIXB              */
         L     @15,@CV00921                                        0213
         BALR  @14,@15                                             0213
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I06;              /* INVALIDATE OTHER BUFFERS WITH
*                                      SAME RBA                      */
*             RAMB=AMBLDTA;         /* LEAVE RAMB ON DATA SIDE       */
         L     @10,RPLDACB(,RRPL)                                  0219
         L     @10,ACBAMBL(,@10)                                   0219
         L     RAMB,AMBLDTA(,@10)                                  0219
*             DIWATV=ZERO;          /* FREE THE WORK AREA            */
         L     @10,AMBIWA(,RAMB)                                   0220
         MVI   DIWATV(@10),X'00'                                   0220
*             CALL EXIT;            /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0221
*           END;                    /*                               */
*       END;                        /*                               */
@RC00197 LA    @10,1                                               0223
         AH    @10,PLHSRCSG(,RPLH)                                 0223
@DE00182 STH   @10,PLHSRCSG(,RPLH)                                 0223
         CH    @10,PLHNOSEG(,RPLH)                                 0223
         BNH   @DL00182                                            0223
*       RESPECIFY                                                  0224
*        (RWORK2,                                                  0224
*         RWORK3,                                                  0224
*         RWORK4) UNRSTD;           /*                               */
*     END;                          /* END OF ERASE CODE             */
*   ELSE                            /*                               */
*     DO;                           /* UPDATE CODE                   */
         B     @RC00159                                            0226
@RF00159 DS    0H                                                  0227
*       PLHSRSID=PLHSRSID+ONE;      /* UPDATE SEGMENT ID             */
         LA    @10,1                                               0227
         LH    @05,PLHSRSID(,RPLH)                                 0227
         N     @05,@CF01026                                        0227
         ALR   @05,@10                                             0227
         STH   @05,PLHSRSID(,RPLH)                                 0227
*       PLHSAVE1=AMDCINV-LENGTH(IDACIDF)/* COMPUTE MAXIMUM USABLE    */
*           -TWO*LENGTH(IDARDF);    /* DATA SPACE IN A SR CI         */
         L     @05,AMBDSB(,RAMB)                                   0228
         L     @05,AMDCINV(,@05)                                   0228
         SL    @05,@CF00226                                        0228
         ST    @05,PLHSAVE1(,RPLH)                                 0228
*       IF RPLRLEN>PLHSAVE1+LENGTH(IDARDF) THEN/* WILL THE RECORD  0229
*                                      EXCEED ONE CI                 */
         L     @15,RPLRLEN(,RRPL)                                  0229
         LA    @00,3                                               0229
         ALR   @00,@05                                             0229
         CR    @15,@00                                             0229
         BNH   @RF00229                                            0229
*         DO;                       /* YES, IT IS SPANNED            */
*           IF RPLRLEN//PLHSAVE1^=ZERO THEN/* IF RECORD PARTIALLY  0231
*                                      FILLS THE LAST CI             */
         LR    @06,@15                                             0231
         SRDA  @06,32                                              0231
         DR    @06,@05                                             0231
         LTR   @06,@06                                             0231
         BZ    @RF00231                                            0231
*             PLHNOSEG=ONE;         /* BE SURE TO COUNT IT           */
         STH   @10,PLHNOSEG(,RPLH)                                 0232
*           ELSE                    /* OTHERWISE START COUNT         */
*             PLHNOSEG=ZERO;        /* AT ZERO                       */
         B     @RC00231                                            0233
@RF00231 SLR   @10,@10                                             0233
         STH   @10,PLHNOSEG(,RPLH)                                 0233
*           PLHNOSEG=PLHNOSEG+      /* COMPUTE EXACT NUMBER          */
*               (RPLRLEN/PLHSAVE1); /* OF SEGMENTS REQUIRED          */
@RC00231 L     @07,RPLRLEN(,RRPL)                                  0234
         SLR   @06,@06                                             0234
         D     @06,PLHSAVE1(,RPLH)                                 0234
         AH    @07,PLHNOSEG(,RPLH)                                 0234
         STH   @07,PLHNOSEG(,RPLH)                                 0234
*         END;                      /*                               */
*       ELSE                        /*                               */
*         PLHNOSEG=ONE;             /* NON-SPANNED RECORD, SO SET  0236
*                                      SEGMENT COUNT AT 1            */
         B     @RC00229                                            0236
@RF00229 MVC   PLHNOSEG(2,RPLH),@CH00053                           0236
*SRCH:                                                             0237
*       IF AMDDST='1'B THEN         /* KSDS                          */
@RC00229 DS    0H                                                  0237
SRCH     L     @10,AMBDSB(,RAMB)                                   0237
         TM    AMDDST(@10),B'10000000'                             0237
         BNO   @RF00237                                            0237
*         DO;                       /* YES                           */
*           RBUFC=PLHIBUFC->BUFCBAD;/* POINT TO INDEX RECORD         */
         L     @10,PLHIBUFC(,RPLH)                                 0239
         L     RBUFC,BUFCBAD(,@10)                                 0239
*           RAMB=AMBLIX;            /* ADDRESS THRU INDEX CB         */
         L     @10,RPLDACB(,RRPL)                                  0240
         L     @10,ACBAMBL(,@10)                                   0240
         L     RAMB,AMBLIX(,@10)                                   0240
*           IMWIXSP=ADDR(IMWISWKA); /* SET ADDRESSABILITY TO INDEX 0241
*                                      SEARCH PARM LIST              */
         L     @10,AMBIWA(,RAMB)                                   0241
         L     @10,ICWCHN(,@10)                                    0241
         LA    @05,IMWISWKA(,@10)                                  0241
         ST    @05,IMWIXSP(,@10)                                   0241
*           RFY                                                    0242
*             RWORK3 RSTD;          /*                               */
*           RWORK3=IMWIXSP;         /* SET ADDRESS OF PARM LIST FOR
*                                      SCIB                          */
         LR    RWORK3,@05                                          0243
*           RPARM1=ADDR(PLHKEY);    /* POINT TO ARGUMENT             */
         L     RPARM1,PLHKEYPT(,RPLH)                              0244
*I07:                                                              0245
*           DO;                     /* IDACALL(IDA019RC)             */
I07      DS    0H                                                  0246
*             CALL IDA019RC;        /* EXIT TO IDA019RC              */
         L     @15,@CV00926                                        0246
         BALR  @14,@15                                             0246
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I07;                /* SEARCH INDEX                  */
*           IXSNOSR=IXSNOSR+ONE;    /* SET EXACT NO. SEGMENTS IN THE
*                                      OLD SPANNED RCD               */
         L     @10,AMBIWA(,RAMB)                                   0252
         L     @10,ICWCHN(,@10)                                    0252
         L     @10,IMWIXSP(,@10)                                   0252
         LA    @06,1                                               0252
         SLR   @05,@05                                             0252
         IC    @05,IXSNOSR(,@10)                                   0252
         ALR   @06,@05                                             0252
         STC   @06,IXSNOSR(,@10)                                   0252
*           RAMB=AMBLDTA;           /* POINT TO DATA CB              */
         L     @10,RPLDACB(,RRPL)                                  0253
         L     @10,ACBAMBL(,@10)                                   0253
         L     RAMB,AMBLDTA(,@10)                                  0253
*         END;                      /*                               */
*       RFY                                                        0255
*        (RWORK2,                                                  0255
*         RWORK4) RSTD;             /*                               */
@RF00237 DS    0H                                                  0256
*       IF AMDDST='0'B×(PLHNOSEG^>  /* ESDS OR NEW RECORD HAS        */
*           RWORK3->IXSNOSR) THEN   /* EQUAL OR FEWER SEGMENTS THAN
*                                      OLD RECD                      */
         L     @10,AMBDSB(,RAMB)                                   0256
         TM    AMDDST(@10),B'10000000'                             0256
         BZ    @RT00256                                            0256
         LH    @10,PLHNOSEG(,RPLH)                                 0256
         SLR   @09,@09                                             0256
         IC    @09,IXSNOSR(,RWORK3)                                0256
         CR    @10,@09                                             0256
         BH    @RF00256                                            0256
@RT00256 DS    0H                                                  0257
*         DO;                       /* YES                           */
*           DO PLHSRCSG=ONE TO PLHNOSEG;/* LOOP COVERS ALL SEGMENTS
*                                      OF NEW RECORD                 */
         LA    @10,1                                               0258
         B     @DE00258                                            0258
@DL00258 DS    0H                                                  0259
*             RBUFC=ZERO;           /* USE WORK BUFFER               */
         SLR   RBUFC,RBUFC                                         0259
*             CALL IDAMVSEG;        /* MOVE A SEGMENT TO A BUFFER    */
         L     @15,@CA00980                                        0260
         BALR  @14,@15                                             0260
*             IF AMDDST='1'B THEN   /* KSDS                          */
         L     @10,AMBDSB(,RAMB)                                   0261
         TM    AMDDST(@10),B'10000000'                             0261
         BNO   @RF00261                                            0261
*               DO;                 /* YES                           */
*                 RAMB=AMBLIX;      /* ADDRESS INDEX BLOCKS          */
         L     @10,RPLDACB(,RRPL)                                  0263
         L     @10,ACBAMBL(,@10)                                   0263
         L     RAMB,AMBLIX(,@10)                                   0263
*                 RWORK2=PLHIBUFC->BUFCBAD;/* POINT TO INDEX RECORD  */
         L     @10,PLHIBUFC(,RPLH)                                 0264
         L     RWORK2,BUFCBAD(,@10)                                0264
*                 RWORK3=IXSHEP+LENGTH(IBFLPL)/* POINT TO CURRENT  0265
*                                      INDEX                         */
*                     +LENGTH(IBFLPF);/* POINTER FIELD               */
         L     @10,AMBIWA(,RAMB)                                   0265
         L     @10,ICWCHN(,@10)                                    0265
         L     @10,IMWIXSP(,@10)                                   0265
         LA    RWORK3,2                                            0265
         AL    RWORK3,IXSHEP(,@10)                                 0265
*                 RWORK4=RWORK2->IXHPTLS;/* GET MASK FROM HEADER     */
         SLR   RWORK4,RWORK4                                       0266
         IC    RWORK4,IXHPTLS(,RWORK2)                             0266
*                 RPARM1=ZERO;      /* CLEAR RECIEVING REG           */
         SLR   RPARM1,RPARM1                                       0267
*                 GEN(EX  RWORK4,PICKPT);/* EXTRACT POINTER FIELD    */
         EX  RWORK4,PICKPT
*                 BUFCORBA=RWORK2->IXHBRBA+/* COMPUTE RBA OF SEGMENT */
*                     AMBLDTA->AMBDSB->/* IN CURRENT BUFFER AND      */
*                     AMDCINV*RPARM1;/* STORE IN BUFC                */
         L     @10,RPLDACB(,RRPL)                                  0269
         L     @10,ACBAMBL(,@10)                                   0269
         L     @10,AMBLDTA(,@10)                                   0269
         L     @09,AMBDSB(,@10)                                    0269
         LR    @15,RPARM1                                          0269
         M     @14,AMDCINV(,@09)                                   0269
         AL    @15,IXHBRBA(,RWORK2)                                0269
         ST    @15,BUFCORBA(,RBUFC)                                0269
*                 BUFCDDDD=BUFCORBA;/* SET INPUT RBA                 */
         ST    @15,BUFCDDDD(,RBUFC)                                0270
*                 IXSHEP=IXSHEP-    /* MOVE POINTER TO CURRENT       */
*                     RWORK2->IXHFLPLN;/* ENTRY TO THE LEFT          */
         L     @09,AMBIWA(,RAMB)                                   0271
         L     @09,ICWCHN(,@09)                                    0271
         L     @09,IMWIXSP(,@09)                                   0271
         L     @05,IXSHEP(,@09)                                    0271
         SLR   @00,@00                                             0271
         IC    @00,IXHFLPLN(,RWORK2)                               0271
         SLR   @05,@00                                             0271
         ST    @05,IXSHEP(,@09)                                    0271
*                 RAMB=AMBLDTA;     /* BACK TO DATA CB               */
         LR    RAMB,@10                                            0272
*               END;                /*                               */
*             ELSE                  /*                               */
*               BUFCORBA=AMDCINV*(PLHSRCSG-ONE)+RPLDDDD;/* COMPUTE 0274
*                                      RBA OF DATA RECORD            */
         B     @RC00261                                            0274
@RF00261 L     @10,AMBDSB(,RAMB)                                   0274
         LH    @09,PLHSRCSG(,RPLH)                                 0274
         BCTR  @09,0                                               0274
         LR    @15,@09                                             0274
         M     @14,AMDCINV(,@10)                                   0274
         AL    @15,RPLDDDD(,RRPL)                                  0274
         ST    @15,BUFCORBA(,RBUFC)                                0274
*             IF AMBJRN=ON&PLHNOSEG>ONE THEN/* NEED JOURNAL EXIT     */
@RC00261 TM    AMBJRN(RAMB),B'00000010'                            0275
         BNO   @RF00275                                            0275
         LH    @10,PLHNOSEG(,RPLH)                                 0275
         C     @10,@CF00053                                        0275
         BNH   @RF00275                                            0275
*I08:                                                              0276
*               DO;                 /* IDACALL(IDAJRNSR)             */
I08      DS    0H                                                  0277
*                 CALL IDAJRNSR;    /* EXIT TO IDAJRNSR              */
         L     @15,@CV00922                                        0277
         BALR  @14,@15                                             0277
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I08;            /* YES, GO DO IT                 */
*           END;                    /*                               */
@RF00275 LA    @10,1                                               0283
         AH    @10,PLHSRCSG(,RPLH)                                 0283
@DE00258 STH   @10,PLHSRCSG(,RPLH)                                 0283
         CH    @10,PLHNOSEG(,RPLH)                                 0283
         BNH   @DL00258                                            0283
*           IF AMDDST='0'B×PLHNOSEG=AMBLIX->AMBIWA->ICWCHN->IMWIXSP->
*               IXSNOSR THEN        /* ESDS OR NEW AND OLD RECORDS 0284
*                                      HAVE EQUAL NO. SEGMENTS       */
         L     @10,AMBDSB(,RAMB)                                   0284
         TM    AMDDST(@10),B'10000000'                             0284
         BZ    @RT00284                                            0284
         L     @10,RPLDACB(,RRPL)                                  0284
         L     @10,ACBAMBL(,@10)                                   0284
         L     @10,AMBLIX(,@10)                                    0284
         L     @10,AMBIWA(,@10)                                    0284
         L     @10,ICWCHN(,@10)                                    0284
         L     @10,IMWIXSP(,@10)                                   0284
         LH    @09,PLHNOSEG(,RPLH)                                 0284
         SLR   @05,@05                                             0284
         IC    @05,IXSNOSR(,@10)                                   0284
         CR    @09,@05                                             0284
         BNE   @RF00284                                            0284
@RT00284 DS    0H                                                  0285
*             DO;                   /* YES                           */
*               IF AMDDST='1'B THEN /* IF KSDS                       */
         L     @10,AMBDSB(,RAMB)                                   0286
         TM    AMDDST(@10),B'10000000'                             0286
         BNO   @RF00286                                            0286
*                 DIWATV=ZERO;      /* RELEASE WORK AREA             */
         L     @10,AMBIWA(,RAMB)                                   0287
         MVI   DIWATV(@10),X'00'                                   0287
*               CALL EXIT;          /* RETURN                        */
@RF00286 BAL   @14,EXIT                                            0288
*             END;                  /*                               */
*           RAMB=AMBLIX;            /* POINT TO INDEX BLOCKS         */
@RF00284 L     @10,RPLDACB(,RRPL)                                  0290
         L     @10,ACBAMBL(,@10)                                   0290
         L     RAMB,AMBLIX(,@10)                                   0290
*           PLHNOSEG=ONE;           /* START ERASE COUNT AT 1        */
         MVC   PLHNOSEG(2,RPLH),@CH00053                           0291
*           RWORK3=IXSHEP;          /* POINT TO CURRENT ENTRY        */
         L     @10,AMBIWA(,RAMB)                                   0292
         L     @10,ICWCHN(,@10)                                    0292
         L     @10,IMWIXSP(,@10)                                   0292
         L     RWORK3,IXSHEP(,@10)                                 0292
*           RWORK2=PLHIBUFC->BUFCBAD;/* POINT TO INDEX RECORD        */
         L     @10,PLHIBUFC(,RPLH)                                 0293
         L     RWORK2,BUFCBAD(,@10)                                0293
*           DO WHILE RWORK3->IBFLPF=AMDKEYLN;/* LOOP TO LAST SEGMENT */
         B     @DE00294                                            0294
@DL00294 DS    0H                                                  0295
*             RWORK3=RWORK3-RWORK2->IXHFLPLN;/* MOVE OVER 1 ENTRY    */
         SLR   @10,@10                                             0295
         IC    @10,IXHFLPLN(,RWORK2)                               0295
         SLR   RWORK3,@10                                          0295
*             PLHNOSEG=PLHNOSEG+ONE;/* BUMP COUNT                    */
         LA    @10,1                                               0296
         AH    @10,PLHNOSEG(,RPLH)                                 0296
         STH   @10,PLHNOSEG(,RPLH)                                 0296
*           END;                    /*                               */
@DE00294 L     @10,AMBDSB(,RAMB)                                   0297
         SLR   @09,@09                                             0297
         IC    @09,IBFLPF(,RWORK3)                                 0297
         CH    @09,AMDKEYLN(,@10)                                  0297
         BE    @DL00294                                            0297
*           IXSHEP=RWORK3;          /* SET POSITION                  */
         L     @10,AMBIWA(,RAMB)                                   0298
         L     @10,ICWCHN(,@10)                                    0298
         L     @10,IMWIXSP(,@10)                                   0298
         ST    RWORK3,IXSHEP(,@10)                                 0298
*           DO PLHSRCSG=ONE TO PLHNOSEG;/* LOOP COVERS ALL SEGMENTS
*                                      TO BE ERASED                  */
         LA    @10,1                                               0299
         B     @DE00299                                            0299
@DL00299 DS    0H                                                  0300
*             RWORK2=PLHIBUFC->BUFCBAD;/* POINT TO INDEX RECORD      */
         L     @10,PLHIBUFC(,RPLH)                                 0300
         L     RWORK2,BUFCBAD(,@10)                                0300
*             RWORK3=IXSHEP+LENGTH(IBFLPL)+/* POINT TO POINTER FIELD */
*                 LENGTH(IBFLPF);   /* OF CURRENT ENTRY              */
         L     @10,AMBIWA(,RAMB)                                   0301
         L     @10,ICWCHN(,@10)                                    0301
         L     @10,IMWIXSP(,@10)                                   0301
         LA    RWORK3,2                                            0301
         AL    RWORK3,IXSHEP(,@10)                                 0301
*             RWORK4=RWORK2->IXHPTLS;/* GET MASK FROM HEADER         */
         SLR   RWORK4,RWORK4                                       0302
         IC    RWORK4,IXHPTLS(,RWORK2)                             0302
*             RPARM1=ZERO;          /* ASSURE CLEAN REGISTER         */
         SLR   RPARM1,RPARM1                                       0303
*             GEN(EX  RWORK4,PICKPT);/* EXTRACT POINTER AND          */
         EX  RWORK4,PICKPT
*             IMWIPTR=RPARM1;       /* SAVE IT IN WORK AREA          */
         L     @10,AMBIWA(,RAMB)                                   0305
         L     @10,ICWCHN(,@10)                                    0305
         ST    RPARM1,IMWIPTR(,@10)                                0305
*             RAMB=AMBLDTA;         /* ADDRESS THRU DATA BLKS.       */
         L     @10,RPLDACB(,RRPL)                                  0306
         L     @10,ACBAMBL(,@10)                                   0306
         L     RAMB,AMBLDTA(,@10)                                  0306
*             CALL CLEARSEG;        /* GET A BUFFER AND CLEAR        */
         BAL   @14,CLEARSEG                                        0307
*             RAMB=AMBLIX;          /* ADDRESS THRU INDEX            */
         L     @10,RPLDACB(,RRPL)                                  0308
         L     @10,ACBAMBL(,@10)                                   0308
         L     @09,AMBLIX(,@10)                                    0308
         LR    RAMB,@09                                            0308
*             RWORK2=IMWIPTR;       /* GET POINTER                   */
         L     @05,AMBIWA(,RAMB)                                   0309
         L     @05,ICWCHN(,@05)                                    0309
         L     RWORK2,IMWIPTR(,@05)                                0309
*             RAMB=AMBLDTA;         /* POINT TO DATA BLKS            */
         L     RAMB,AMBLDTA(,@10)                                  0310
*             BUFCORBA=(PLHIBUFC->BUFCBAD->IXHBRBA)+(RWORK2*AMDCINV);
         L     @10,PLHIBUFC(,RPLH)                                 0311
         L     @10,BUFCBAD(,@10)                                   0311
         L     @05,AMBDSB(,RAMB)                                   0311
         LR    @15,RWORK2                                          0311
         M     @14,AMDCINV(,@05)                                   0311
         AL    @15,IXHBRBA(,@10)                                   0311
         ST    @15,BUFCORBA(,RBUFC)                                0311
*                                   /* COMPUTE THE RBA OF CLEARED  0312
*                                      DATA CI                       */
*             BUFCDDDD=BUFCORBA;    /* SET INPUT RBA                 */
         ST    @15,BUFCDDDD(,RBUFC)                                0312
*             RAMB=AMBLIX;          /* ADDRESS THRU INDEX BLKS       */
         LR    RAMB,@09                                            0313
*             CALL DELSEG;          /* UPDATE INDEX                  */
         BAL   @14,DELSEG                                          0314
*           END;                    /*                               */
         LA    @10,1                                               0315
         AH    @10,PLHSRCSG(,RPLH)                                 0315
@DE00299 STH   @10,PLHSRCSG(,RPLH)                                 0315
         CH    @10,PLHNOSEG(,RPLH)                                 0315
         BNH   @DL00299                                            0315
*           RBUFC=PLHIBUFC;         /* SET FOR SEQ SET BUFC          */
         L     RBUFC,PLHIBUFC(,RPLH)                               0316
*           BUFCORBA=BUFCDDDD;      /* SET OUTPUT RBA                */
         L     @10,BUFCDDDD(,RBUFC)                                0317
         ST    @10,BUFCORBA(,RBUFC)                                0317
*           BUFCMW=ON;              /* SET MUST WRITE                */
         OI    BUFCMW(RBUFC),B'10000000'                           0318
*I09:                                                              0319
*           DO;                     /* IDACALL(IDAWRBFR)             */
I09      DS    0H                                                  0320
*             CALL IDAWRBFR;        /* EXIT TO IDAWRBFR              */
         L     @15,@CV00925                                        0320
         BALR  @14,@15                                             0320
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I09;                /* WRITE INDEX                   */
*I10:                                                              0326
*           DO;                     /* IDACALL(IDAIVIXB)             */
I10      DS    0H                                                  0327
*             CALL IDAIVIXB;        /* EXIT TO IDAIVIXB              */
         L     @15,@CV00921                                        0327
         BALR  @14,@15                                             0327
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I10;                /* INVALIDATE OTHER BUFFERS WITH
*                                      SAME RBA                      */
*           RAMB=AMBLDTA;           /* RESET AMB POINTER             */
         L     @10,RPLDACB(,RRPL)                                  0333
         L     @10,ACBAMBL(,@10)                                   0333
         L     RAMB,AMBLDTA(,@10)                                  0333
*           DIWATV=ZERO;            /* FREE THE WORK AREA            */
         L     @10,AMBIWA(,RAMB)                                   0334
         MVI   DIWATV(@10),X'00'                                   0334
*           CALL EXIT;              /* RETURN                        */
         BAL   @14,EXIT                                            0335
*         END;                      /*                               */
*       RFY                                                        0337
*        (RWORK0,                                                  0337
*         RWORK1,                                                  0337
*         RWORK2,                                                  0337
*         RWORK3) RSTD;             /*                               */
@RF00256 DS    0H                                                  0338
*       PLHARDB=AMDPARDB;           /* START WITH FIRST              */
         L     @10,AMBDSB(,RAMB)                                   0338
         L     @09,AMDPARDB(,@10)                                  0338
         ST    @09,PLHARDB(,RPLH)                                  0338
*       IF AMDRANGE=ON THEN         /* IF KEY RANGE DS               */
         TM    AMDRANGE(@10),B'00000100'                           0339
         BNO   @RF00339                                            0339
*         DO;                       /* GO SET ARDB IN PLH            */
*           RWORK1=RPLAREA+AMDRKP;  /* SET KEY POINTER               */
         LH    RWORK1,AMDRKP(,@10)                                 0341
         AL    RWORK1,RPLAREA(,RRPL)                               0341
*           RWORK2=AMDKEYLN;        /* SET KEY LENGTH                */
         LH    RWORK2,AMDKEYLN(,@10)                               0342
*I11:                                                              0343
*           DO;                     /* IDACALL(IDACHKKR)             */
I11      DS    0H                                                  0344
*             CALL IDACHKKR;        /* EXIT TO IDACHKKR              */
         L     @15,@CV00929                                        0344
         BALR  @14,@15                                             0344
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I11;                /* GO SET ARDB POINTER           */
*         END;                      /*                               */
*       RAMB=AMBLIX;                /* ADDRESS THRU INDEX BLKS       */
@RF00339 L     @10,RPLDACB(,RRPL)                                  0351
         L     @10,ACBAMBL(,@10)                                   0351
         L     RAMB,AMBLIX(,@10)                                   0351
*       RWORK1=PLHNOSEG-IXSNOSR;    /* COMPUTE ADDITIONAL CIS        */
         L     @10,AMBIWA(,RAMB)                                   0352
         L     @10,ICWCHN(,@10)                                    0352
         L     @10,IMWIXSP(,@10)                                   0352
         LH    RWORK1,PLHNOSEG(,RPLH)                              0352
         SLR   @09,@09                                             0352
         IC    @09,IXSNOSR(,@10)                                   0352
         SLR   RWORK1,@09                                          0352
*       RWORK2=PLHIBUFC->BUFCBAD;   /* POINT TO SEQ SET BUFFER       */
         L     @10,PLHIBUFC(,RPLH)                                 0353
         L     RWORK2,BUFCBAD(,@10)                                0353
*       RWORK3=RWORK2+RWORK2->IXHLEO+/* POINT TO 'L' FIELD           */
*           LENGTH(IBFLPF);         /* OF LAST ENTRY                 */
         LH    @10,IXHLEO(,RWORK2)                                 0354
         LR    RWORK3,RWORK2                                       0354
         ALR   RWORK3,@10                                          0354
         AL    RWORK3,@CF00053                                     0354
*       RWORK0=RWORK3->IBFLPL;      /* EXTRACT LENGTH                */
         SLR   RWORK0,RWORK0                                       0355
         IC    RWORK0,IBFLPL(,RWORK3)                              0355
*       RWORK3=(RWORK2->IXHLEO-     /* COMPUTE LENGTH OF             */
*           LENGTH(IXSELL))-RWORK0- /* UNUSED SPACE IN               */
*           RWORK2->IXHFSO;         /* SEQUENCE SET                  */
         LA    @09,2                                               0356
         SLR   @10,@09                                             0356
         SLR   @10,RWORK0                                          0356
         LH    @15,IXHFSO(,RWORK2)                                 0356
         SLR   @10,@15                                             0356
         LR    RWORK3,@10                                          0356
*       RWORK0=LENGTH(IBFLPL)+LENGTH(IBFLPF);/* GET LENGTH EACH    0357
*                                      ADDITIONAL SPANNED RECORD CI
*                                      ENTRY                         */
         LR    RWORK0,@09                                          0357
*       IF(RWORK0*RWORK1)>RWORK3×   /* IF NOT ENOUGH SPACE IN        */
*           RWORK1>((RWORK2->IXHFSO-LENGTH(IDAIXH))/* SEQ SET        */
*           /(RWORK2->IXHFLPLN-RWORK0)) THEN/* OR NOT ENOUGH CIS IN
*                                      THE CA THEN                   */
         LR    @15,RWORK1                                          0358
         MR    @14,RWORK0                                          0358
         CLR   @15,RWORK3                                          0358
         BH    @RT00358                                            0358
         LH    @10,IXHFSO(,RWORK2)                                 0358
         SL    @10,@CF00083                                        0358
         SLR   @09,@09                                             0358
         IC    @09,IXHFLPLN(,RWORK2)                               0358
         SLR   @09,RWORK0                                          0358
         LR    @14,@10                                             0358
         SRDA  @14,32                                              0358
         DR    @14,@09                                             0358
         CLR   RWORK1,@15                                          0358
         BNH   @RF00358                                            0358
@RT00358 DS    0H                                                  0359
*         DO;                       /* GET HELP FROM CA SPLIT        */
*           RPARM1=RWORK1;          /* SET NO. ADDITIONAL CIS      0360
*                                      REQUIRED FOR CA SPLIT         */
         LR    RPARM1,RWORK1                                       0360
*           RAMB=AMBLDTA;           /* SET RAMB TO DATA SIDE         */
         L     @10,RPLDACB(,RRPL)                                  0361
         L     @10,ACBAMBL(,@10)                                   0361
         L     RAMB,AMBLDTA(,@10)                                  0361
*I12:                                                              0362
*           DO;                     /* IDACALL(IDA019RF)             */
I12      DS    0H                                                  0363
*             CALL IDA019RF;        /* EXIT TO IDA019RF              */
         L     @15,@CV00927                                        0363
         BALR  @14,@15                                             0363
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I12;                /* CALL CA SPLIT                 */
*           IF RPLERREG^=ZERO THEN  /* ERROR FOUND                   */
         CLI   RPLERREG(RRPL),0                                    0369
         BE    @RF00369                                            0369
*             DO;                   /* YES                           */
*               DIWATV=ZERO;        /* FREE WORK AREA                */
         L     @10,AMBIWA(,RAMB)                                   0371
         MVI   DIWATV(@10),X'00'                                   0371
*               CALL EXIT;          /* RETURN                        */
         BAL   @14,EXIT                                            0372
*             END;                  /*                               */
*I13:                                                              0374
*           DO;                     /* IDACALL(IDAREPOS)             */
@RF00369 DS    0H                                                  0374
I13      DS    0H                                                  0375
*             CALL IDAREPOS;        /* EXIT TO IDAREPOS              */
         L     @15,@CV00924                                        0375
         BALR  @14,@15                                             0375
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I13;                /* RESTORE POINTERS FOR THE    0380
*                                      BUFFER MANAGER                */
*           PLHSAVE1=AMDCINV-LENGTH(IDACIDF)/* RESTORE USABLE SPACE  */
*               -TWO*LENGTH(IDARDF);/* CLOBBERED BY SPLIT            */
         L     @10,AMBDSB(,RAMB)                                   0381
         L     @10,AMDCINV(,@10)                                   0381
         SL    @10,@CF00226                                        0381
         ST    @10,PLHSAVE1(,RPLH)                                 0381
*           GO TO SRCH;             /* BACK TO TRY AGAIN             */
         B     SRCH                                                0382
*         END;                      /*                               */
*       RESPECIFY                                                  0384
*         RWORK4 RSTD;              /*                               */
@RF00358 DS    0H                                                  0385
*       RWORK3=IXSHEP+LENGTH(IBFLPL)+/* POINT TO POINTER FIELD       */
*           LENGTH(IBFLPF);         /* OF HIT ENTRY                  */
         L     @10,AMBIWA(,RAMB)                                   0385
         L     @10,ICWCHN(,@10)                                    0385
         L     @10,IMWIXSP(,@10)                                   0385
         LA    RWORK3,2                                            0385
         AL    RWORK3,IXSHEP(,@10)                                 0385
*       RWORK4=RWORK2->IXHPTLS;     /* GET MASK FROM HEADER          */
         SLR   RWORK4,RWORK4                                       0386
         IC    RWORK4,IXHPTLS(,RWORK2)                             0386
*       RPARM1=ZERO;                /* CLEAR PICKUP REGISTER         */
         SLR   RPARM1,RPARM1                                       0387
*       GEN(EX  RWORK4,PICKPT);     /* EXTRACT POINTER FIELD         */
         EX  RWORK4,PICKPT
*       RPLDDDD=RWORK2->IXHBRBA+    /* COMPUTE RBA OF                */
*           AMDCINV*RPARM1;         /* FIRST SEGMENT                 */
         L     @10,AMBDSB(,RAMB)                                   0389
         LR    @15,RPARM1                                          0389
         M     @14,AMDCINV(,@10)                                   0389
         AL    @15,IXHBRBA(,RWORK2)                                0389
         ST    @15,RPLDDDD(,RRPL)                                  0389
*       DO PLHSRCSG=ONE TO IXSNOSR; /* LOOP COVERS ALL OLD SEG       */
         LA    @10,1                                               0390
         B     @DE00390                                            0390
@DL00390 DS    0H                                                  0391
*         RAMB=AMBLDTA;             /* DATA SIDE CONTROL BLKS        */
         L     @10,RPLDACB(,RRPL)                                  0391
         L     @10,ACBAMBL(,@10)                                   0391
         L     RAMB,AMBLDTA(,@10)                                  0391
*         RBUFC=ZERO;               /* USE WORK BUFFER               */
         SLR   RBUFC,RBUFC                                         0392
*         CALL IDAMVSEG;            /* MOVE A SEGMENT OF THE NEW   0393
*                                      RECORD TO A BUFFER            */
         L     @15,@CA00980                                        0393
         BALR  @14,@15                                             0393
*         RAMB=AMBLIX;              /* ADDRESS THRU INDEX            */
         L     @10,RPLDACB(,RRPL)                                  0394
         L     @10,ACBAMBL(,@10)                                   0394
         L     RAMB,AMBLIX(,@10)                                   0394
*         RWORK2=PLHIBUFC->BUFCBAD; /* POINT TO BUFFER               */
         L     @10,PLHIBUFC(,RPLH)                                 0395
         L     RWORK2,BUFCBAD(,@10)                                0395
*         RWORK3=IXSHEP+LENGTH(IBFLPL)+/* POINT TO POINTER FIELD     */
*             LENGTH(IBFLPF);       /* OF CURRENT ENTRY              */
         L     @10,AMBIWA(,RAMB)                                   0396
         L     @10,ICWCHN(,@10)                                    0396
         L     @10,IMWIXSP(,@10)                                   0396
         LA    RWORK3,2                                            0396
         AL    RWORK3,IXSHEP(,@10)                                 0396
*         RWORK4=RWORK2->IXHPTLS;   /* GET MASK FROM HEADER          */
         SLR   RWORK4,RWORK4                                       0397
         IC    RWORK4,IXHPTLS(,RWORK2)                             0397
*         RPARM1=ZERO;              /* CLEAR RECIEVING REG.          */
         SLR   RPARM1,RPARM1                                       0398
*         GEN(EX  RWORK4,PICKPT);   /* EXTRACT POINTER FIELD         */
         EX  RWORK4,PICKPT
*         BUFCORBA=RWORK2->IXHBRBA+ /* COMPUTE RBA OF BUFFER         */
*             AMBLDTA->AMBDSB->AMDCINV*RPARM1;/* WHICH WAS FILLED BY
*                                      MOVESEG                       */
         L     @10,RPLDACB(,RRPL)                                  0400
         L     @10,ACBAMBL(,@10)                                   0400
         L     @10,AMBLDTA(,@10)                                   0400
         L     @10,AMBDSB(,@10)                                    0400
         LR    @15,RPARM1                                          0400
         M     @14,AMDCINV(,@10)                                   0400
         AL    @15,IXHBRBA(,RWORK2)                                0400
         ST    @15,BUFCORBA(,RBUFC)                                0400
*         BUFCDDDD=BUFCORBA;        /* SET INPUT RBA                 */
         ST    @15,BUFCDDDD(,RBUFC)                                0401
*         IF PLHSRCSG^=IXSNOSR THEN /* LAST SEGMENT                  */
         L     @10,AMBIWA(,RAMB)                                   0402
         L     @10,ICWCHN(,@10)                                    0402
         L     @10,IMWIXSP(,@10)                                   0402
         LH    @09,PLHSRCSG(,RPLH)                                 0402
         SLR   @15,@15                                             0402
         IC    @15,IXSNOSR(,@10)                                   0402
         CR    @09,@15                                             0402
         BE    @RF00402                                            0402
*           IXSHEP=IXSHEP-RWORK2->IXHFLPLN;/* NO MOVE CURRENT POINTER
*                                      TO THE LEFT                   */
         L     @09,IXSHEP(,@10)                                    0403
         SLR   @15,@15                                             0403
         IC    @15,IXHFLPLN(,RWORK2)                               0403
         SLR   @09,@15                                             0403
         ST    @09,IXSHEP(,@10)                                    0403
*         IF AMBJRN=ON THEN         /* JOURNAL EXIT REQUIRED         */
@RF00402 TM    AMBJRN(RAMB),B'00000010'                            0404
         BNO   @RF00404                                            0404
*I14:                                                              0405
*           DO;                     /* IDACALL(IDAJRNSR)             */
I14      DS    0H                                                  0406
*             CALL IDAJRNSR;        /* EXIT TO IDAJRNSR              */
         L     @15,@CV00922                                        0406
         BALR  @14,@15                                             0406
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I14;                /* YES, GO JOURNAL               */
*       END;                        /*                               */
@RF00404 LA    @10,1                                               0412
         AH    @10,PLHSRCSG(,RPLH)                                 0412
@DE00390 STH   @10,PLHSRCSG(,RPLH)                                 0412
         L     @09,AMBIWA(,RAMB)                                   0412
         L     @09,ICWCHN(,@09)                                    0412
         L     @09,IMWIXSP(,@09)                                   0412
         SLR   @15,@15                                             0412
         IC    @15,IXSNOSR(,@09)                                   0412
         CR    @10,@15                                             0412
         BNH   @DL00390                                            0412
*       DO PLHSRCSG=IXSNOSR+ONE TO PLHNOSEG;/* LOOP COVERS ALL NEW 0413
*                                      SEGMENTS                      */
         L     @10,AMBIWA(,RAMB)                                   0413
         L     @10,ICWCHN(,@10)                                    0413
         L     @10,IMWIXSP(,@10)                                   0413
         LA    @09,1                                               0413
         SLR   @15,@15                                             0413
         IC    @15,IXSNOSR(,@10)                                   0413
         ALR   @09,@15                                             0413
         B     @DE00413                                            0413
@DL00413 DS    0H                                                  0414
*         RAMB=AMBLDTA;             /* ADDRESS THRU DATA BLKS        */
         L     @10,RPLDACB(,RRPL)                                  0414
         L     @10,ACBAMBL(,@10)                                   0414
         L     RAMB,AMBLDTA(,@10)                                  0414
*         RBUFC=ZERO;               /* USE WORK BUFFER               */
         SLR   RBUFC,RBUFC                                         0415
*         CALL IDAMVSEG;            /* MOVE A SEGMENT TO BUFF        */
         L     @15,@CA00980                                        0416
         BALR  @14,@15                                             0416
*         RAMB=AMBLIX;              /* ADDRESS THRU INDEX BLKS       */
         L     @10,RPLDACB(,RRPL)                                  0417
         L     @10,ACBAMBL(,@10)                                   0417
         L     RAMB,AMBLIX(,@10)                                   0417
*         CALL IDAADSEG;            /* GO PLACE NEW SEGMENT IN     0418
*                                      SEQUENCE SET                  */
         L     @15,@CA00995                                        0418
         BALR  @14,@15                                             0418
*         RWORK2=PLHIBUFC->BUFCBAD; /* POINT TO BUFFER               */
         L     @10,PLHIBUFC(,RPLH)                                 0419
         L     RWORK2,BUFCBAD(,@10)                                0419
*         RWORK3=RWORK2+RWORK2->IXHFSO-/* POINT TO THE 1ST UNUSED    */
*             RWORK2->IXHFLPLN+     /* BYTE IN THE SEQ SET           */
*             LENGTH(IBFLPF)+       /* FREE LIST                     */
*             LENGTH(IBFLPL);       /*                               */
         LR    RWORK3,RWORK2                                       0420
         LH    @10,IXHFSO(,RWORK2)                                 0420
         ALR   RWORK3,@10                                          0420
         SLR   @10,@10                                             0420
         IC    @10,IXHFLPLN(,RWORK2)                               0420
         SLR   RWORK3,@10                                          0420
         AL    RWORK3,@CF00146                                     0420
*         RWORK4=RWORK2->IXHPTLS;   /* GET MASK FROM HEADER          */
         SLR   RWORK4,RWORK4                                       0421
         IC    RWORK4,IXHPTLS(,RWORK2)                             0421
*         RPARM1=ZERO;              /* CLEAR PICKUP REGISTER         */
         SLR   RPARM1,RPARM1                                       0422
*         GEN(EX  RWORK4,PICKPT);   /* GRAB THE POINTER              */
         EX  RWORK4,PICKPT
*         BUFCORBA=RWORK2->IXHBRBA+ /* COMPUTE THE RBA OF            */
*             AMBLDTA->AMBDSB->     /* THE BUFFER WHICH WAS          */
*             AMDCINV*RPARM1;       /* JUST FILLED                   */
         L     @10,RPLDACB(,RRPL)                                  0424
         L     @10,ACBAMBL(,@10)                                   0424
         L     @10,AMBLDTA(,@10)                                   0424
         L     @10,AMBDSB(,@10)                                    0424
         LR    @15,RPARM1                                          0424
         M     @14,AMDCINV(,@10)                                   0424
         AL    @15,IXHBRBA(,RWORK2)                                0424
         ST    @15,BUFCORBA(,RBUFC)                                0424
*         BUFCDDDD=BUFCORBA;        /* SET INPUT RBA                 */
         ST    @15,BUFCDDDD(,RBUFC)                                0425
*         RPARM1=ZERO;              /* CLEAR                         */
         SLR   RPARM1,RPARM1                                       0426
*         GEN(EX  RWORK4,STOREPT);  /* REMOVE PTR FROM FREELIST      */
         EX  RWORK4,STOREPT
*         RWORK2->IXHFSO=RWORK2->IXHFSO/* ADJUST OFFSET TO           */
*             -RWORK2->IXHFLPLN     /* FREESPACE IN THE SEQ          */
*             +LENGTH(IBFLPF)       /* SET                           */
*             +LENGTH(IBFLPL);      /*                               */
         LH    @10,IXHFSO(,RWORK2)                                 0428
         SLR   @09,@09                                             0428
         IC    @09,IXHFLPLN(,RWORK2)                               0428
         SLR   @10,@09                                             0428
         AL    @10,@CF00146                                        0428
         STH   @10,IXHFSO(,RWORK2)                                 0428
*         IF AMBJRN=ON THEN         /* JOURNAL EXIT REQUIRED         */
         TM    AMBJRN(RAMB),B'00000010'                            0429
         BNO   @RF00429                                            0429
*I15:                                                              0430
*           DO;                     /* IDACALL(IDAJRNSR)             */
I15      DS    0H                                                  0431
*             CALL IDAJRNSR;        /* EXIT TO IDAJRNSR              */
         L     @15,@CV00922                                        0431
         BALR  @14,@15                                             0431
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I15;                /* YES, GO TAKE IT               */
*       END;                        /*                               */
@RF00429 LA    @09,1                                               0437
         AH    @09,PLHSRCSG(,RPLH)                                 0437
@DE00413 STH   @09,PLHSRCSG(,RPLH)                                 0437
         CH    @09,PLHNOSEG(,RPLH)                                 0437
         BNH   @DL00413                                            0437
*       RBUFC=PLHIBUFC;             /* POINT RBUFC TO SEQ SET        */
         L     RBUFC,PLHIBUFC(,RPLH)                               0438
*       BUFCORBA=BUFCDDDD;          /* SET OUTPUT RBA                */
         L     @10,BUFCDDDD(,RBUFC)                                0439
         ST    @10,BUFCORBA(,RBUFC)                                0439
*       BUFCMW=ON;                  /* SET MUST WRITE ON             */
         OI    BUFCMW(RBUFC),B'10000000'                           0440
*I16:                                                              0441
*       DO;                         /* IDACALL(IDAWRBFR)             */
I16      DS    0H                                                  0442
*         CALL IDAWRBFR;            /* EXIT TO IDAWRBFR              */
         L     @15,@CV00925                                        0442
         BALR  @14,@15                                             0442
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I16;                    /* GO WRITE SEQ SET              */
*I17:                                                              0448
*       DO;                         /* IDACALL(IDAIVIXB)             */
I17      DS    0H                                                  0449
*         CALL IDAIVIXB;            /* EXIT TO IDAIVIXB              */
         L     @15,@CV00921                                        0449
         BALR  @14,@15                                             0449
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I17;                    /* INVALIDATE OTHER COPYS        */
*       RAMB=AMBLDTA;               /* POINT TO DATA BLOCKS          */
         L     @10,RPLDACB(,RRPL)                                  0455
         L     @10,ACBAMBL(,@10)                                   0455
         L     RAMB,AMBLDTA(,@10)                                  0455
*       DIWATV=ZERO;                /* FREE WORK AREA                */
         L     @10,AMBIWA(,RAMB)                                   0456
         MVI   DIWATV(@10),X'00'                                   0456
*       CALL EXIT;                  /* RETURN                        */
         BAL   @14,EXIT                                            0457
*       RFY                                                        0458
*        (RWORK0,                                                  0458
*         RWORK1,                                                  0458
*         RWORK2,                                                  0458
*         RWORK3,                                                  0458
*         RWORK4) UNRSTD;           /*                               */
*     END;                          /* END OF UPDATE CODE            */
*                                                                  0460
*   /*****************************************************************/
*   /*                                                               */
*   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*   /* IDAMVSEG SUBROUTINE FUNCTION: IF A WORK BUFFER HAS BEEN       */
*   /* REQUESTED (RBUFC = ZERO) GETS A BUFFER FROM BUFFER MANAGER,   */
*   /* MOVES A SEGMENT OF THE NEW RECORD INTO THE BUFFER, AND BUILDS */
*   /* PROPER RDF AND CIDF FIELDS FOR THE RECORD. SINCE I/O MAY BE   */
*   /* INVOKED ON OBTAINING A BUFFER, A CHECK FOR ERRORS IS MADE. IF */
*   /* AN ERROR IS DETECTED, RETURN IS NOT TO THE CALLER, BUT TO THE */
*   /* CALLERS CALLER. * * * * * * * * * * * * * * * * * * * * * * * */
*   /* * * * * * * * *                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0460
*IDAMVSEG:                                                         0460
*   ENTRY;                          /*                               */
@EP00460 DS    0H                                                  0460
@EC00460 DS    0H                                                  0461
*   RFY                                                            0461
*    (RWORK2,                                                      0461
*     RWORK3,                                                      0461
*     RWORK4,                                                      0461
*     RWORK5) RSTD;                 /*                               */
*   GEN(IDASVR14);                  /* SAVE REGISTER 14              */
         IDASVR14
*   IF RBUFC=ZERO THEN              /* WORK BUFFER REQUESTED         */
         LTR   RBUFC,RBUFC                                         0463
         BNZ   @RF00463                                            0463
*I18:                                                              0464
*     DO;                           /* IDACALL(IDAGWSEG)             */
I18      DS    0H                                                  0465
*       CALL IDAGWSEG;              /* EXIT TO IDAGWSEG              */
         L     @15,@CV00920                                        0465
         BALR  @14,@15                                             0465
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I18;                      /* YES, GET A BUFFER             */
*   IF RPLERREG^=ZERO THEN          /* I/O ERROR                     */
@RF00463 CLI   RPLERREG(RRPL),0                                    0471
         BE    @RF00471                                            0471
*     DO;                           /* YES                           */
*       IF AMBLSR=OFF&AMBGSR=OFF THEN/* DB/DC                        */
         TM    AMBLSR(RAMB),B'01100000'                            0473
         BNZ   @RF00473                                            0473
*         DO;                       /* NO                            */
*           IF DIWBUFC->BUFCNXT2^=DIWBUFC THEN/* IS DI BUFFER IN   0475
*                                      BUFFER CHAIN                  */
         L     @10,AMBIWA(,RAMB)                                   0475
         L     @10,DIWBUFC(,@10)                                   0475
         L     @05,BUFCNXT2-1(,@10)                                0475
         LA    @05,0(,@05)                                         0475
         CR    @10,@05                                             0475
         BE    @RF00475                                            0475
*             DO;                   /* YES                           */
*               RBUFC=DIWBUFC;      /* POINT TO DI BUFC              */
         LR    RBUFC,@10                                           0477
*I19:                                                              0478
*               DO;                 /* IDACALL(IDASBF)               */
I19      DS    0H                                                  0479
*                 CALL IDASBF;      /* EXIT TO IDASBF                */
         L     @15,@CV00923                                        0479
         BALR  @14,@15                                             0479
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I19;            /* GO SUBTRACT IT                */
*             END;                  /*                               */
*         END;                      /*                               */
@RF00475 DS    0H                                                  0487
*       IF AMDDST='1'B THEN         /* IF KSDS                       */
@RF00473 L     @10,AMBDSB(,RAMB)                                   0487
         TM    AMDDST(@10),B'10000000'                             0487
         BNO   @RF00487                                            0487
*         DIWATV=ZERO;              /* FREE WORK AREA                */
         L     @10,AMBIWA(,RAMB)                                   0488
         MVI   DIWATV(@10),X'00'                                   0488
*       GEN(IDARST14);              /* POINT TO CALLER               */
@RF00487 DS    0H                                                  0489
         IDARST14
*       CALL EXIT;                  /* RETURN TO CALLERS CALLER      */
         BAL   @14,EXIT                                            0490
*     END;                          /*                               */
*   RWORK2=BUFCBAD;                 /* 'TO' ADDRESS IS BUFFER        */
@RF00471 L     RWORK2,BUFCBAD(,RBUFC)                              0492
*   RWORK4=RPLAREA+(PLHSRCSG-ONE)*PLHSAVE1;/* COMPUTE 'FROM' ADDRESS
*                                      IN USERS AREA                 */
         L     @10,RPLAREA(,RRPL)                                  0493
         LH    @15,PLHSRCSG(,RPLH)                                 0493
         BCTR  @15,0                                               0493
         L     @05,PLHSAVE1(,RPLH)                                 0493
         MR    @14,@05                                             0493
         ALR   @15,@10                                             0493
         LR    RWORK4,@15                                          0493
*   IF(RWORK4+PLHSAVE1)>(RPLAREA+RPLRLEN) THEN/* IS LENGTH LESS THEN
*                                      A BUFFERFUL                   */
         ALR   @05,RWORK4                                          0494
         L     @15,RPLRLEN(,RRPL)                                  0494
         LR    @00,@10                                             0494
         ALR   @00,@15                                             0494
         CR    @05,@00                                             0494
         BNH   @RF00494                                            0494
*     RWORK3=RPLRLEN-(RWORK4-RPLAREA);/* YES, SET CORRECT LENGTH     */
         LCR   @10,@10                                             0495
         ALR   @10,RWORK4                                          0495
         SLR   @15,@10                                             0495
         LR    RWORK3,@15                                          0495
*   ELSE                            /* FULL BUFFER SO                */
*     RWORK3=PLHSAVE1;              /* SET LENGTH AT FULL            */
         B     @RC00494                                            0496
@RF00494 L     RWORK3,PLHSAVE1(,RPLH)                              0496
*   PLHSAVE2=RWORK3;                /* SAVE LENGTH MOVED             */
@RC00494 ST    RWORK3,PLHSAVE2(,RPLH)                              0497
*   RWORK5=RWORK3;                  /* SET LENGTH                    */
         LR    RWORK5,RWORK3                                       0498
*   GEN(MVCL  RWORK2,RWORK4);       /* MOVE SEGMENT TO BUFFER        */
         MVCL  RWORK2,RWORK4
*   RWORK3=AMDCINV-PLHSAVE2;        /* SET LENGTH AT REMAINING NO. OF
*                                      BYTES IN BUFFER               */
         L     @10,AMBDSB(,RAMB)                                   0500
         L     RWORK3,AMDCINV(,@10)                                0500
         SL    RWORK3,PLHSAVE2(,RPLH)                              0500
*   GEN(MVCL  RWORK2,RWORK4);       /* CLEAR REMAINING BYTES IN    0501
*                                      BUFFER                        */
         MVCL  RWORK2,RWORK4
*   IF RPLRLEN^>PLHSAVE1+LENGTH(IDARDF) THEN/* IS NEW RECORD       0502
*                                      NON-SPANNED                   */
         L     @10,RPLRLEN(,RRPL)                                  0502
         L     @05,PLHSAVE1(,RPLH)                                 0502
         LA    @00,3                                               0502
         ALR   @00,@05                                             0502
         CR    @10,@00                                             0502
         BH    @RF00502                                            0502
*     DO;                           /* YES, IT MUST BE TREATED     0503
*                                      SEPARATELY                    */
*       IF RPLRLEN>PLHSAVE1 THEN    /* ARE THERE SOME UNMOVED      0504
*                                      CHARACTERS IN THE RECD        */
         CR    @10,@05                                             0504
         BNH   @RF00504                                            0504
*         DO;                       /* YES                           */
*           RWORK2=BUFCBAD+PLHSAVE1;/* SET 'TO' ADDRESS              */
         L     RWORK2,BUFCBAD(,RBUFC)                              0506
         ALR   RWORK2,@05                                          0506
*           RWORK4=RPLAREA+PLHSAVE1;/* SET 'FROM' ADDRESS            */
         L     RWORK4,RPLAREA(,RRPL)                               0507
         ALR   RWORK4,@05                                          0507
*           RWORK3=RPLRLEN-PLHSAVE1;/* COMPUTE ADDITIONAL BYTES TO 0508
*                                      MOVE                          */
         SLR   @10,@05                                             0508
         LR    RWORK3,@10                                          0508
*           RWORK5=RWORK3;          /* SET LENGTH                    */
         LR    RWORK5,RWORK3                                       0509
*           GEN(MVCL  RWORK2,RWORK4);/* MOVE FINAL BYTES             */
         MVCL  RWORK2,RWORK4
*         END;                      /*                               */
*       RWORK2=BUFCBAD+PLHSAVE1+    /* POINT TO RDF POSITION         */
*           LENGTH(IDARDF);         /* FOR ONE NON-SPND RECORD       */
@RF00504 LA    @10,3                                               0512
         L     @05,PLHSAVE1(,RPLH)                                 0512
         L     RWORK2,BUFCBAD(,RBUFC)                              0512
         ALR   RWORK2,@05                                          0512
         ALR   RWORK2,@10                                          0512
*       RWORK2->RDFLL=RPLRLEN;      /* SET LL IN RDF                 */
         L     @15,RPLRLEN(,RRPL)                                  0513
         STCM  @15,3,RDFLL(RWORK2)                                 0513
*       RWORK2=RWORK2+LENGTH(IDARDF);/* POINT TO CIDF POSITION       */
         ALR   RWORK2,@10                                          0514
*       RWORK2->CIDFOSET=RPLRLEN;   /* SET FREE SPACE OFFSET         */
         STH   @15,CIDFOSET(,RWORK2)                               0515
*       RWORK2->CIDFLL=PLHSAVE1+    /* SET LENGTH OF FREESPACE       */
*           LENGTH(IDARDF)-         /* IN CIDF                       */
*           RPLRLEN;                /*                               */
         ALR   @05,@10                                             0516
         SLR   @05,@15                                             0516
         STH   @05,CIDFLL(,RWORK2)                                 0516
*     END;                          /* END OF NON-SPANNED CASE       */
*   ELSE                            /*                               */
*     DO;                           /* SPANNED RECORD STORED         */
         B     @RC00502                                            0518
@RF00502 DS    0H                                                  0519
*       RWORK2=BUFCBAD+PLHSAVE1;    /* POINT TO ID RDF               */
         L     RWORK2,BUFCBAD(,RBUFC)                              0519
         AL    RWORK2,PLHSAVE1(,RPLH)                              0519
*       RWORK3=RWORK2+LENGTH(IDARDF);/* POINT TO LENGTH RDF          */
         LA    RWORK3,3                                            0520
         ALR   RWORK3,RWORK2                                       0520
*       RWORK2->RDFLL=PLHSRSID;     /* SET SEG. ID INTO RDF          */
         MVC   RDFLL(2,RWORK2),PLHSRSID(RPLH)                      0521
*       RWORK3->RDFLL=PLHSAVE2;     /* SET LL IN RDF                 */
         MVC   RDFLL(2,RWORK3),PLHSAVE2+2(RPLH)                    0522
*       RWORK2->RDFREPL=ON;         /* SET REPLICATION BIT           */
         OI    RDFREPL(RWORK2),B'00001000'                         0523
*       RWORK3->RDFCTNU=ON;         /* SET CONTINUATION BIT          */
         OI    RDFCTNU(RWORK3),B'01000000'                         0524
*       IF PLHSRCSG=ONE THEN        /* FIRST SEGMENT                 */
         CLC   PLHSRCSG(2,RPLH),@CH00053                           0525
         BNE   @RF00525                                            0525
*         DO;                       /* YES                           */
*           RWORK2->RDF1ST=ON;      /* SHOW THAT SEGMENT IS          */
         OI    RDF1ST(RWORK2),B'00010000'                          0527
*           RWORK3->RDF1ST=ON;      /* THE FIRST IN BOTH RDFS        */
         OI    RDF1ST(RWORK3),B'00010000'                          0528
*         END;                      /*                               */
*       ELSE                        /*                               */
*         DO;                       /* NOT FIRST SEGMENT             */
         B     @RC00525                                            0530
@RF00525 DS    0H                                                  0531
*           RWORK2->RDFNOT1=ON;     /* SET NOT FIRST SEGMENT         */
         OI    RDFNOT1(RWORK2),B'00100000'                         0531
*           RWORK3->RDFNOT1=ON;     /* BIT IN BOTH RDFS              */
         OI    RDFNOT1(RWORK3),B'00100000'                         0532
*           IF PLHSRCSG^=PLHNOSEG THEN/* LAST SEGMENT                */
         CLC   PLHSRCSG(2,RPLH),PLHNOSEG(RPLH)                     0533
         BE    @RF00533                                            0533
*             DO;                   /* NO                            */
*               RWORK2->RDF1ST=ON;  /* SHOW INTERMEDIATE             */
         OI    RDF1ST(RWORK2),B'00010000'                          0535
*               RWORK3->RDF1ST=ON;  /* SEGMENT IN BOTH RDFS          */
         OI    RDF1ST(RWORK3),B'00010000'                          0536
*             END;                  /*                               */
*         END;                      /*                               */
@RF00533 DS    0H                                                  0539
*       RWORK3=RWORK3+LENGTH(IDARDF);/* POINT TO CIDF                */
@RC00525 AL    RWORK3,@CF00159                                     0539
*       RWORK3->CIDFOSET=PLHSAVE2;  /* BUILD FREESPACE OFFSET        */
         L     @10,PLHSAVE2(,RPLH)                                 0540
         STH   @10,CIDFOSET(,RWORK3)                               0540
*       RWORK3->CIDFLL=PLHSAVE1-PLHSAVE2;/* BUILD FREESPACE LENGTH   */
         LCR   @10,@10                                             0541
         AL    @10,PLHSAVE1(,RPLH)                                 0541
         STH   @10,CIDFLL(,RWORK3)                                 0541
*       BUFCSEG=ON;                 /* SET SPANNED           @ZA07544*/
         OI    BUFCSEG(RBUFC),B'01000000'                          0542
*     END;                          /*                               */
*   BUFXORBA=RPLDDDD;               /* SET EXCLUSIVE CTL RBA         */
@RC00502 L     @10,RPLDDDD(,RRPL)                                  0544
         ST    @10,BUFXORBA(,RBUFC)                                0544
*   BUFCMW=ON;                      /* SET MUST WRITE ON             */
         OI    BUFCMW(RBUFC),B'10000000'                           0545
*   BUFCVAL=OFF;                    /* BUFCDDDD INVAL        @ZA10882*/
         NI    BUFCVAL(RBUFC),B'11111011'                          0546
*   CALL EXIT;                      /* RETURN                        */
         BAL   @14,EXIT                                            0547
*   RFY                                                            0548
*    (RWORK2,                                                      0548
*     RWORK3,                                                      0548
*     RWORK4,                                                      0548
*     RWORK5) UNRSTD;               /*                               */
*                                                                  0549
*   /*****************************************************************/
*   /*                                                               */
*   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*   /* IDAADSEG SUBROUTINE FUNCTION: MODIFIES A SEQUENCE SET RECORD  */
*   /* AS FOLLOWS- 1) THAT PORTION OF THE INDEX RECORD FROM THE      */
*   /* HIGHEST ENTRY TO THE ENTRY IDENTIFIED BY IXSHEP (PARM LIST    */
*   /* FROM IMWA) IS SHIFTED LEFT BY THE LENGTH OF THE 'F' FIELD PLUS*/
*   /* THE LENGTH OF THE 'L' FIELD PLUS THE LENGTH OF THE POINTER    */
*   /* FIELD. THE POINTER DOES NOT MOVE. 2) THE ENTRY WHICH WAS AT   */
*   /* IXSHEP BEFORE THE MOVE RECIEVES A NEW POINTER FROM THE        */
*   /* FREELIST. 3) THE VACATED POSITIONS ARE CONVERTED INTO A       */
*   /* SPANNED RECORD SEGMENT F AND L FIELDS, IE, F = KEY LENGTH,    */
*   /* L=ZERO. 4) IF REQUIRED, ADJUSTMENT IS MADE TO THE SECTION     */
*   /* ENTRY LL FIELD. 5) HEADER OFFSETS ARE ADJUSTED AS REQUIRED. 6)*/
*   /* IXSHEP, IXSSEP, AND IXSLEP FIELDS(PARM LIST FROM PLH) ARE     */
*   /* ADJUSTED AS REQUIRED. 7) IXSHEP (PARM LIST FROM IMWA) IS      */
*   /* MODIFIED SO AS TO POINT TO THE SAME ENTRY AS ON ENTRY. NOTE   */
*   /* THAT THIS ENTRY WILL HAVE A DIFFERENT POINTER FIELD AFTER THE */
*   /* MOVE. * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*   /* * * *                                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0549
*IDAADSEG:                                                         0549
*   ENTRY;                          /*                               */
@EP00549 DS    0H                                                  0550
*   RFY                                                            0550
*    (RWORK1,                                                      0550
*     RWORK2,                                                      0550
*     RWORK3,                                                      0550
*     RWORK4,                                                      0550
*     RWORK5) RSTD;                 /*                               */
*   GEN(IDASVR14);                  /* SAVE REGISTER 14              */
         IDASVR14
*   RWORK1=PLHIBUFC->BUFCBAD;       /* POINT TO INDEX BUFFER         */
         L     @10,PLHIBUFC(,RPLH)                                 0552
         L     RWORK1,BUFCBAD(,@10)                                0552
*   RWORK2=RWORK1+RWORK1->IXHLEO;   /* POINT TO LAST ENTRY           */
         LR    RWORK2,RWORK1                                       0553
         AH    RWORK2,IXHLEO(,RWORK1)                              0553
*   RWORK2=RWORK2-RWORK2->IBFLPL-   /* BACK UP ACROSS KEY            */
*       LENGTH(IXSELL)-RWORK1->     /* SECTION LL FIELD AND          */
*       IXHFLPLN;                   /* MOVE AMOUNT TO SET 'TO'       */
         LA    @10,2                                               0554
         LR    @00,RWORK2                                          0554
         SLR   @15,@15                                             0554
         IC    @15,IBFLPL(,RWORK2)                                 0554
         SLR   @00,@15                                             0554
         SLR   @00,@10                                             0554
         SLR   @15,@15                                             0554
         IC    @15,IXHFLPLN(,RWORK1)                               0554
         SLR   @00,@15                                             0554
         LR    RWORK2,@00                                          0554
*   RWORK4=RWORK2+RWORK1->IXHFLPLN; /* ESTABLISH 'FROM' ADD.         */
         ALR   @15,RWORK2                                          0555
         LR    RWORK4,@15                                          0555
*   RWORK3=IXSHEP-RWORK4+           /* COMPUTE MOVE LENGTH           */
*       LENGTH(IBFLPL)+LENGTH(IBFLPF);/*                             */
         L     @15,AMBIWA(,RAMB)                                   0556
         L     @15,ICWCHN(,@15)                                    0556
         L     @15,IMWIXSP(,@15)                                   0556
         L     RWORK3,IXSHEP(,@15)                                 0556
         SLR   RWORK3,RWORK4                                       0556
         ALR   RWORK3,@10                                          0556
*   RWORK5=RWORK3;                  /* SET MOVE LENGTH               */
         LR    RWORK5,RWORK3                                       0557
*   GEN(MVCL  RWORK2,RWORK4);       /* MOVE BLOCK TO LEFT            */
         MVCL  RWORK2,RWORK4
*   RWORK3=RWORK1+RWORK1->IXHFSO-   /* POINT TO FIRST UNUSED         */
*       RWORK1->IXHFLPLN+           /* POINTER IN THE SEQ SET        */
*       LENGTH(IBFLPL)+LENGTH(IBFLPF);/* FREELIST                    */
         LR    RWORK3,RWORK1                                       0559
         AH    RWORK3,IXHFSO(,RWORK1)                              0559
         SLR   @10,@10                                             0559
         IC    @10,IXHFLPLN(,RWORK1)                               0559
         SLR   RWORK3,@10                                          0559
         AL    RWORK3,@CF00146                                     0559
*   RWORK4=RWORK1->IXHPTLS;         /* GET MASK FROM HEADER          */
         SLR   RWORK4,RWORK4                                       0560
         IC    RWORK4,IXHPTLS(,RWORK1)                             0560
*   GEN(EX  RWORK4,PICKPT);         /* EXTRACT POINTER               */
         EX  RWORK4,PICKPT
*   RWORK3=RWORK2;                  /* POINT TO LAST ENTRY           */
         LR    RWORK3,RWORK2                                       0562
*   GEN(EX  RWORK4,STOREPT);        /* STORE THE POINTER             */
         EX  RWORK4,STOREPT
*   IXSHEP->IBFLPF=AMDKEYLN;        /* SET F FIELD TO KEY SIZE       */
         L     @10,AMBIWA(,RAMB)                                   0564
         L     @10,ICWCHN(,@10)                                    0564
         L     @10,IMWIXSP(,@10)                                   0564
         L     @15,IXSHEP(,@10)                                    0564
         L     @14,AMBDSB(,RAMB)                                   0564
         LH    @00,AMDKEYLN(,@14)                                  0564
         STC   @00,IBFLPF(,@15)                                    0564
*   IXSHEP->IBFLPL=ZERO;            /* SET L FIELD TO ZERO           */
         MVI   IBFLPL(@15),X'00'                                   0565
*   RWORK1->IXHLEO=RWORK1->IXHLEO-  /* ADJUST OFFSET TO              */
*       RWORK1->IXHFLPLN;           /* LAST ENTRY                    */
         SLR   @14,@14                                             0566
         IC    @14,IXHFLPLN(,RWORK1)                               0566
         LH    @00,IXHLEO(,RWORK1)                                 0566
         SLR   @00,@14                                             0566
         STH   @00,IXHLEO(,RWORK1)                                 0566
*   IXSSEP=IXSSEP-RWORK1->IXHFLPLN; /* MOVE SECTION POINTER          */
         L     @00,IXSSEP(,@10)                                    0567
         SLR   @00,@14                                             0567
         ST    @00,IXSSEP(,@10)                                    0567
*   IF IXSHEP^<RWORK1+RWORK1->IXHSEO THEN/* IS POSITION IN FIRST   0568
*                                      SECTION                       */
         LH    @10,IXHSEO(,RWORK1)                                 0568
         LR    @00,RWORK1                                          0568
         ALR   @00,@10                                             0568
         CR    @15,@00                                             0568
         BL    @RF00568                                            0568
*     RWORK1->IXHSEO=RWORK1->IXHSEO-/* YES, ADJUST OFFSET TO         */
*         RWORK1->IXHFLPLN;         /* FIRST SECTION                 */
         SLR   @10,@14                                             0569
         STH   @10,IXHSEO(,RWORK1)                                 0569
*   ELSE                            /* NOT IN 1ST SECTION            */
*     DO;                           /*                               */
         B     @RC00568                                            0570
@RF00568 DS    0H                                                  0571
*       RWORK2=IXSLEP+RWORK1->IXHFLPLN;/* POINT TO LL FIELD OF     0571
*                                      PREVIOUS SECTION              */
         L     @10,AMBIWA(,RAMB)                                   0571
         L     @10,ICWCHN(,@10)                                    0571
         L     @10,IMWIXSP(,@10)                                   0571
         SLR   @15,@15                                             0571
         IC    @15,IXHFLPLN(,RWORK1)                               0571
         L     RWORK2,IXSLEP(,@10)                                 0571
         ALR   RWORK2,@15                                          0571
*       RWORK2->IXSELL=RWORK2->IXSELL+/* INCREASE LL FIELD BY        */
*           RWORK1->IXHFLPLN;       /* AMOUNT MOVED                  */
         SLR   @10,@10                                             0572
         ICM   @10,3,IXSELL(RWORK2)                                0572
         ALR   @15,@10                                             0572
         STCM  @15,3,IXSELL(RWORK2)                                0572
*     END;                          /*                               */
*   RFY                                                            0574
*    (RWORK2,                                                      0574
*     RWORK3,                                                      0574
*     RWORK4,                                                      0574
*     RWORK5) UNRSTD;               /*                               */
@RC00568 DS    0H                                                  0575
*   IF PLHISPLP->IXSHEP^>IXSHEP THEN/* IS BUFF MGR HEP TO LEFT OF  0575
*                                      CURRENT POSITION              */
         L     @10,PLHISPLP(,RPLH)                                 0575
         L     @15,IXSHEP(,@10)                                    0575
         L     @14,AMBIWA(,RAMB)                                   0575
         L     @14,ICWCHN(,@14)                                    0575
         L     @14,IMWIXSP(,@14)                                   0575
         C     @15,IXSHEP(,@14)                                    0575
         BH    @RF00575                                            0575
*     PLHISPLP->IXSHEP=PLHISPLP->IXSHEP/* YES, MODIFY IT             */
*         -RWORK1->IXHFLPLN;        /*                               */
         SLR   @00,@00                                             0576
         IC    @00,IXHFLPLN(,RWORK1)                               0576
         SLR   @15,@00                                             0576
         ST    @15,IXSHEP(,@10)                                    0576
*   IF PLHISPLP->IXSSEP^>IXSHEP THEN/* IS BUFF MGR SEP TO LEFT OF  0577
*                                      CURRENT POSITION              */
@RF00575 L     @10,PLHISPLP(,RPLH)                                 0577
         L     @15,IXSSEP(,@10)                                    0577
         L     @14,AMBIWA(,RAMB)                                   0577
         L     @14,ICWCHN(,@14)                                    0577
         L     @14,IMWIXSP(,@14)                                   0577
         C     @15,IXSHEP(,@14)                                    0577
         BH    @RF00577                                            0577
*     PLHISPLP->IXSSEP=PLHISPLP->IXSSEP/* YES, MODIFY IT             */
*         -RWORK1->IXHFLPLN;        /*                               */
         SLR   @00,@00                                             0578
         IC    @00,IXHFLPLN(,RWORK1)                               0578
         SLR   @15,@00                                             0578
         ST    @15,IXSSEP(,@10)                                    0578
*   IF PLHISPLP->IXSLEP<IXSHEP THEN /* IS BUFF MGR LEP TO LEFT OF  0579
*                                      CURRENT POSITION              */
@RF00577 L     @10,PLHISPLP(,RPLH)                                 0579
         L     @15,IXSLEP(,@10)                                    0579
         L     @14,AMBIWA(,RAMB)                                   0579
         L     @14,ICWCHN(,@14)                                    0579
         L     @14,IMWIXSP(,@14)                                   0579
         C     @15,IXSHEP(,@14)                                    0579
         BNL   @RF00579                                            0579
*     PLHISPLP->IXSLEP=PLHISPLP->IXSLEP/* YES, MODIFY IT             */
*         -RWORK1->IXHFLPLN;        /*                               */
         SLR   @00,@00                                             0580
         IC    @00,IXHFLPLN(,RWORK1)                               0580
         SLR   @15,@00                                             0580
         ST    @15,IXSLEP(,@10)                                    0580
*   IXSHEP=IXSHEP-RWORK1->IXHFLPLN; /* MOVE CURRENT POINTER          */
@RF00579 L     @10,AMBIWA(,RAMB)                                   0581
         L     @10,ICWCHN(,@10)                                    0581
         L     @10,IMWIXSP(,@10)                                   0581
         L     @00,IXSHEP(,@10)                                    0581
         SLR   @15,@15                                             0581
         IC    @15,IXHFLPLN(,RWORK1)                               0581
         SLR   @00,@15                                             0581
         ST    @00,IXSHEP(,@10)                                    0581
*   RFY                                                            0582
*     RWORK1 UNRSTD;                /*                               */
*   CALL EXIT;                      /* RETURN                        */
         BAL   @14,EXIT                                            0583
*                                                                  0584
*   /*****************************************************************/
*   /*                                                               */
*   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*   /* DELSEG SUBROUTINE FUNCTION: MODIFIES A SEQUENCE SET RECORD AS */
*   /* FOLLOWS- 1) THE POINTER FIELD FROM THE INDEX ENTRY IDENTIFIED */
*   /* BY IXSHEP (PARM LIST FROM IMWA) IS PLACED INTO THE FREE LIST. */
*   /* 2) THE F FIELD, L FIELD, AND KEY FIELD OF THE ENTRY IDENTIFIED*/
*   /* BY IXSHEP PLUS ALL ENTRYS TO THE LEFT OF IT ARE MOVED RIGHT.  */
*   /* THE DISTANCE MOVED IS EQUAL TO THE SUM OF THE LENGTHS OF F, L,*/
*   /* AND POINTER FIELDS. 3) IF REQUIRED, ADJUSTMENT IS MADE TO THE */
*   /* PRECEEDING SECTION ENTRY LL FIELD. 4) HEADER OFFSETS ARE      */
*   /* ADJUSTED AS REQUIRED. 5) IXSHEP, IXSSEP, AND IXSLEP FIELDS    */
*   /* (PARM LIST FROM PLH) ARE ADJUSTED AS REQUIRED. 6) IXSHEP (PARM*/
*   /* LIST FROM IMWA) IS MODIFIED SO AS TO POINT TO THE SAME ENTRY  */
*   /* AS ON ENTRY. NOTE THAT THIS ENTRY WILL HAVE A DIFFERENT       */
*   /* POINTER FIELD AFTER THE MOVE. * * * * * * * * * * * * * * * * */
*   /* * * * * * * * * * * * * * * *                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0584
*DELSEG:                                                           0584
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                               */
         B     @PB00002                                            0584
DELSEG   DS    0H                                                  0585
*   GEN(IDASVR14);                  /* SAVE REGISTER 14              */
         IDASVR14
*   RFY                                                            0586
*    (RWORK0,                                                      0586
*     RWORK1,                                                      0586
*     RWORK2,                                                      0586
*     RWORK3,                                                      0586
*     RWORK4,                                                      0586
*     RWORK5) RSTD;                                                0586
*   RWORK1=PLHIBUFC->BUFCBAD;       /* POINT TO START OF BUFF        */
         L     @10,PLHIBUFC(,RPLH)                                 0587
         L     RWORK1,BUFCBAD(,@10)                                0587
*   RWORK0=RWORK1->IXHFLPLN;        /* GET OFFSET                    */
         SLR   RWORK0,RWORK0                                       0588
         IC    RWORK0,IXHFLPLN(,RWORK1)                            0588
*   RWORK1=RWORK1+RWORK1->IXHLEO;   /* POINT TO LAST ENTRY           */
         AH    RWORK1,IXHLEO(,RWORK1)                              0589
*   RWORK1=RWORK1-(RWORK1->IBFLPL)- /* POINT TO LAST BYTE OF         */
*       LENGTH(IXSELL);             /* INDEX ENTRYS                  */
         LA    @10,2                                               0590
         LR    @15,RWORK1                                          0590
         SLR   @14,@14                                             0590
         IC    @14,IBFLPL(,RWORK1)                                 0590
         SLR   @15,@14                                             0590
         SLR   @15,@10                                             0590
         LR    RWORK1,@15                                          0590
*   RWORK4=IXSHEP+LENGTH(IBFLPF)+   /* SET INITIAL 'FROM'            */
*       LENGTH(IBFLPL)-RWORK0;      /* POSITION FOR MVCL             */
         L     @15,AMBIWA(,RAMB)                                   0591
         L     @15,ICWCHN(,@15)                                    0591
         L     @15,IMWIXSP(,@15)                                   0591
         AL    @10,IXSHEP(,@15)                                    0591
         SLR   @10,RWORK0                                          0591
         LR    RWORK4,@10                                          0591
*   DO WHILE RWORK4^<RWORK1;        /* LOOP WILL MOVE BLOCK IN     0592
*                                      SECTIONS = F+L+PTR            */
         B     @DE00592                                            0592
@DL00592 DS    0H                                                  0593
*     RWORK2=RWORK4+RWORK0;         /* SET INITIAL 'TO' POSITION FOR
*                                      MVCL INSTRUCTION              */
         LR    RWORK2,RWORK4                                       0593
         ALR   RWORK2,RWORK0                                       0593
*     RWORK3=RWORK0;                /* SET MOVE LENGTH               */
         LR    RWORK3,RWORK0                                       0594
*     RWORK5=RWORK0;                /* DITTO                         */
         LR    RWORK5,RWORK0                                       0595
*     GEN(MVCL  RWORK2,RWORK4);     /* MOVE A BLOCK                  */
         MVCL  RWORK2,RWORK4
*     RWORK4=RWORK4-(TWO*RWORK0);   /* SET NEW 'FROM' ADDRESS        */
         LR    @10,RWORK0                                          0597
         ALR   @10,@10                                             0597
         SLR   RWORK4,@10                                          0597
*   END;                            /*                               */
@DE00592 CR    RWORK4,RWORK1                                       0598
         BNL   @DL00592                                            0598
*   RWORK3=RWORK1-RWORK4;           /* DETERMINE RESIDUE             */
         LR    RWORK3,RWORK1                                       0599
         SLR   RWORK3,RWORK4                                       0599
*   IF RWORK3^=RWORK0 THEN          /* IS RESIDUE SAME AS MOVE     0600
*                                      INCREMENT                     */
         CLR   RWORK3,RWORK0                                       0600
         BE    @RF00600                                            0600
*     DO;                           /* NO, THERE IS RESIDUE          */
*       RWORK4=RWORK4+RWORK3;       /* SET NEW 'FROM' POINT          */
         ALR   RWORK4,RWORK3                                       0602
*       RWORK2=RWORK4+RWORK0;       /* SET 'TO' POSITION             */
         LR    RWORK2,RWORK4                                       0603
         ALR   RWORK2,RWORK0                                       0603
*       RWORK5=RWORK0-RWORK3;       /* DETERMINE RESIDUE LEN.        */
         LR    RWORK5,RWORK0                                       0604
         SLR   RWORK5,RWORK3                                       0604
*       RWORK3=RWORK5;              /*                               */
         LR    RWORK3,RWORK5                                       0605
*       GEN(MVCL  RWORK2,RWORK4);   /* MOVE RESIDUE                  */
         MVCL  RWORK2,RWORK4
*     END;                          /*                               */
*   RWORK2=RWORK1;                  /* POINT TO OLD LEFT END OF INDEX*/
@RF00600 LR    RWORK2,RWORK1                                       0608
*   RWORK3=RWORK0;                  /* SET CLEAR LENGTH              */
         LR    RWORK3,RWORK0                                       0609
*   GEN(MVCL  RWORK2,RWORK4);       /* CLEAR REMAINS OF INDEX        */
         MVCL  RWORK2,RWORK4
*   RESPECIFY                                                      0611
*    (RWORK4,                                                      0611
*     RWORK5) UNRSTD;               /*                               */
*   RWORK1=PLHIBUFC->BUFCBAD;       /* POINT TO BUFFER               */
         L     @10,PLHIBUFC(,RPLH)                                 0612
         L     RWORK1,BUFCBAD(,@10)                                0612
*   RWORK1->IXHLEO=RWORK1->IXHLEO+  /* ADJUST LAST ENTRY             */
*       RWORK0;                     /* OFFSET IN HEADER              */
         LR    @10,RWORK0                                          0613
         LH    @15,IXHLEO(,RWORK1)                                 0613
         ALR   @10,@15                                             0613
         STH   @10,IXHLEO(,RWORK1)                                 0613
*   IXSSEP=IXSSEP+RWORK0;           /* MOVE SECTION POINTER          */
         L     @10,AMBIWA(,RAMB)                                   0614
         L     @10,ICWCHN(,@10)                                    0614
         L     @10,IMWIXSP(,@10)                                   0614
         LR    @15,RWORK0                                          0614
         AL    @15,IXSSEP(,@10)                                    0614
         ST    @15,IXSSEP(,@10)                                    0614
*   IF IXSHEP^<RWORK1+RWORK1->IXHSEO THEN/* IS POSITION IN FIRST   0615
*                                      SECTION                       */
         LH    @15,IXHSEO(,RWORK1)                                 0615
         LR    @14,RWORK1                                          0615
         ALR   @14,@15                                             0615
         C     @14,IXSHEP(,@10)                                    0615
         BH    @RF00615                                            0615
*     RWORK1->IXHSEO=RWORK1->IXHSEO+/* YES, ADJUST OFFSET TO         */
*         RWORK0;                   /* FIRST SECTION                 */
         ALR   @15,RWORK0                                          0616
         STH   @15,IXHSEO(,RWORK1)                                 0616
*   ELSE                            /* NOT FIRST SECTION             */
*     DO;                           /*                               */
         B     @RC00615                                            0617
@RF00615 DS    0H                                                  0618
*       RWORK2=IXSLEP+RWORK1->IXHFLPLN;/* POINT TO LL FIELD OF     0618
*                                      PREVIOUS SECTION              */
         L     @10,AMBIWA(,RAMB)                                   0618
         L     @10,ICWCHN(,@10)                                    0618
         L     @10,IMWIXSP(,@10)                                   0618
         SLR   RWORK2,RWORK2                                       0618
         IC    RWORK2,IXHFLPLN(,RWORK1)                            0618
         AL    RWORK2,IXSLEP(,@10)                                 0618
*       RWORK2->IXSELL=RWORK2->IXSELL-/* REDUCE LL FIELD BY          */
*           RWORK0;                 /* AMOUNT MOVED                  */
         SLR   @10,@10                                             0619
         ICM   @10,3,IXSELL(RWORK2)                                0619
         SLR   @10,RWORK0                                          0619
         STCM  @10,3,IXSELL(RWORK2)                                0619
*     END;                          /*                               */
*   RPARM1=IMWIPTR;                 /* GET SAVED POINTER             */
@RC00615 L     @10,AMBIWA(,RAMB)                                   0621
         L     @10,ICWCHN(,@10)                                    0621
         L     RPARM1,IMWIPTR(,@10)                                0621
*   RWORK3=RWORK1+RWORK1->IXHFSO;   /* POINT TO FREE SPACE           */
         LR    RWORK3,RWORK1                                       0622
         AH    RWORK3,IXHFSO(,RWORK1)                              0622
*   RESPECIFY                                                      0623
*     RWORK4 RSTD;                  /*                               */
*   RWORK4=RWORK1->IXHPTLS;         /* GET MASK FROM HEADER          */
         SLR   RWORK4,RWORK4                                       0624
         IC    RWORK4,IXHPTLS(,RWORK1)                             0624
*   GEN(EX  RWORK4,STOREPT);        /* STORE POINTER IN FREELIST     */
         EX  RWORK4,STOREPT
*   RESPECIFY                                                      0626
*     RWORK4 UNRSTD;                /*                               */
*   RWORK1->IXHFSO=RWORK1->IXHFSO+  /* ADJUST POINTER TO             */
*       RWORK0-                     /* INDEX FREESPACE               */
*       LENGTH(IBFLPL)-             /*                               */
*       LENGTH(IBFLPF);             /*                               */
         LR    @10,RWORK0                                          0627
         LH    @15,IXHFSO(,RWORK1)                                 0627
         ALR   @10,@15                                             0627
         BCTR  @10,0                                               0627
         BCTR  @10,0                                               0627
         STH   @10,IXHFSO(,RWORK1)                                 0627
*   RFY                                                            0628
*    (RWORK1,                                                      0628
*     RWORK2,                                                      0628
*     RWORK3) UNRSTD;               /*                               */
*   IF PLHISPLP->IXSHEP^>IXSHEP THEN/* IS BUFF MGR HEP TO LEFT OF  0629
*                                      CURRENT POSITION              */
         L     @10,PLHISPLP(,RPLH)                                 0629
         L     @05,IXSHEP(,@10)                                    0629
         L     @15,AMBIWA(,RAMB)                                   0629
         L     @15,ICWCHN(,@15)                                    0629
         L     @15,IMWIXSP(,@15)                                   0629
         C     @05,IXSHEP(,@15)                                    0629
         BH    @RF00629                                            0629
*     PLHISPLP->IXSHEP=PLHISPLP->IXSHEP/* YES, MODIFY IT             */
*         +RWORK0;                  /*                               */
         ALR   @05,RWORK0                                          0630
         ST    @05,IXSHEP(,@10)                                    0630
*   IF PLHISPLP->IXSSEP^>IXSHEP THEN/* IS BUFF MGR SEP TO LEFT OF  0631
*                                      CURRENT POSITION              */
@RF00629 L     @10,PLHISPLP(,RPLH)                                 0631
         L     @05,IXSSEP(,@10)                                    0631
         L     @15,AMBIWA(,RAMB)                                   0631
         L     @15,ICWCHN(,@15)                                    0631
         L     @15,IMWIXSP(,@15)                                   0631
         C     @05,IXSHEP(,@15)                                    0631
         BH    @RF00631                                            0631
*     PLHISPLP->IXSSEP=PLHISPLP->IXSSEP/* YES, MODIFY IT             */
*         +RWORK0;                  /*                               */
         ALR   @05,RWORK0                                          0632
         ST    @05,IXSSEP(,@10)                                    0632
*   IF PLHISPLP->IXSLEP^>IXSHEP THEN/* IS BUFF MGR LEP TO LEFT OF  0633
*                                      CURRENT POSITION              */
@RF00631 L     @10,PLHISPLP(,RPLH)                                 0633
         L     @05,IXSLEP(,@10)                                    0633
         L     @15,AMBIWA(,RAMB)                                   0633
         L     @15,ICWCHN(,@15)                                    0633
         L     @15,IMWIXSP(,@15)                                   0633
         C     @05,IXSHEP(,@15)                                    0633
         BH    @RF00633                                            0633
*     PLHISPLP->IXSLEP=PLHISPLP->IXSLEP/* YES, MODIFY IT             */
*         +RWORK0;                  /*                               */
         ALR   @05,RWORK0                                          0634
         ST    @05,IXSLEP(,@10)                                    0634
*   IXSHEP=IXSHEP+RWORK0;           /* MOVE CURRENT POINTER          */
@RF00633 L     @10,AMBIWA(,RAMB)                                   0635
         L     @10,ICWCHN(,@10)                                    0635
         L     @10,IMWIXSP(,@10)                                   0635
         LR    @05,RWORK0                                          0635
         AL    @05,IXSHEP(,@10)                                    0635
         ST    @05,IXSHEP(,@10)                                    0635
*   RESPECIFY                                                      0636
*     RWORK0 UNRSTD;                /*                               */
*   CALL EXIT;                      /* RETURN                        */
         BAL   @14,EXIT                                            0637
*   END DELSEG;                     /*                               */
@EL00002 DS    0H                                                  0638
@EF00002 DS    0H                                                  0638
@ER00002 BR    @14                                                 0638
*                                                                  0639
*   /*****************************************************************/
*   /*                                                               */
*   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*   /* CLEARSEG SUBROUTINE FUNCTION: GETS A BUFFER FROM BUFFER MGR., */
*   /* CLEARS IT TO ZEROS, AND BUILDS A CIDF INDICATING THE EMPTY    */
*   /* STATE. SINCE I/O MAY HAVE BEEN EXERCISED IN PROVIDING THE     */
*   /* BUFFER, A TEST FOR ERRORS IS MADE. RETURN IS TO THE CALLERS   */
*   /* CALLER IN CASE OF AN I/O ERROR. * * * * * * * * * * * * * * * */
*   /* * * * * * * * * * * * * * * * *                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0639
*CLEARSEG:                                                         0639
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                               */
CLEARSEG DS    0H                                                  0640
*   RFY                                                            0640
*    (RWORK0,                                                      0640
*     RWORK2,                                                      0640
*     RWORK3,                                                      0640
*     RWORK5) RSTD;                 /*                               */
*   GEN(IDASVR14);                  /* SAVE REGISTER 14              */
         IDASVR14
*I20:                                                              0642
*   DO;                             /* IDACALL(IDAGWSEG)             */
I20      DS    0H                                                  0643
*     CALL IDAGWSEG;                /* EXIT TO IDAGWSEG              */
         L     @15,@CV00920                                        0643
         BALR  @14,@15                                             0643
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I20;                        /* GET A BUFFER FROM BUFFER    0648
*                                      MANAGER                       */
*   IF RPLERREG^=ZERO THEN          /* ERROR ENCOUNTERED             */
         CLI   RPLERREG(RRPL),0                                    0649
         BE    @RF00649                                            0649
*     DO;                           /* YES                           */
*       DIWATV=ZERO;                /* FREE WORK AREA                */
         L     @10,AMBIWA(,RAMB)                                   0651
         MVI   DIWATV(@10),X'00'                                   0651
*       GEN(IDARST14);              /* POINT TO CALLER               */
         IDARST14
*       CALL EXIT;                  /* RETURN TO ROUTINE WHICH CALLED
*                                      THE CALLER                    */
         BAL   @14,EXIT                                            0653
*     END;                          /*                               */
*   RWORK2=BUFCBAD;                 /* POINT TO BUFFER               */
@RF00649 L     RWORK2,BUFCBAD(,RBUFC)                              0655
*   RWORK0=AMDCINV;                 /* GET CI LENGTH                 */
         L     @10,AMBDSB(,RAMB)                                   0656
         L     RWORK0,AMDCINV(,@10)                                0656
*   RWORK3=RWORK0;                  /*                               */
         LR    RWORK3,RWORK0                                       0657
*   RWORK5=ZERO;                    /* SET PROPAGATION BYTE          */
         SLR   RWORK5,RWORK5                                       0658
*   GEN(MVCL  RWORK2,RWORK4);       /* CLEAR THE BUFFER              */
         MVCL  RWORK2,RWORK4
*   RWORK2=RWORK2-LENGTH(IDACIDF);  /* POINT TO CIDF                 */
         LA    @10,4                                               0660
         SLR   RWORK2,@10                                          0660
*   RWORK2->CIDFLL=RWORK0-LENGTH(IDACIDF);/* SET FREESPACE LENGTH IN
*                                      CIDF                          */
         LCR   @10,@10                                             0661
         ALR   @10,RWORK0                                          0661
         STH   @10,CIDFLL(,RWORK2)                                 0661
*   BUFXORBA=RPLDDDD;               /* SET EXCLUSIVE CONTROL FIELD IN
*                                      BUFC                          */
         L     @10,RPLDDDD(,RRPL)                                  0662
         ST    @10,BUFXORBA(,RBUFC)                                0662
*   BUFCMW=ON;                      /* MARK FOR WRITING              */
         OI    BUFCMW(RBUFC),B'10000000'                           0663
*   CALL EXIT;                      /* RETURN                        */
         BAL   @14,EXIT                                            0664
*   END CLEARSEG;                   /*                               */
@EL00003 DS    0H                                                  0665
@EF00003 DS    0H                                                  0665
@ER00003 BR    @14                                                 0665
*                                                                  0666
*   /*****************************************************************/
*   /*                                                               */
*   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*   /* EXIT SUBROUTINE FUNCTION: RESTORES REGISTER 14 FROM THE       */
*   /* PLACEHOLDER PUSH DOWN LIST AND RETURNS. * * * * * * * * * * * */
*   /* * * * * * * * * * * * * * * * * * * * *                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0666
*EXIT:                                                             0666
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                               */
EXIT     DS    0H                                                  0667
*   GEN(IDARST14);                  /* RESTORE REGISTER 14           */
         IDARST14
*   END EXIT;                       /* RETURN                        */
@EL00004 DS    0H                                                  0668
@EF00004 DS    0H                                                  0668
@ER00004 BR    @14                                                 0668
@PB00004 DS    0H                                                  0669
*   GEN;                                                           0669
PICKPT   ICM   RPARM1,@00,@00(RWORK3)      /* EXTRACTS POINTER       */
STOREPT  STCM  RPARM1,@00,@00(RWORK3)      /* STORES POINTER         */
*   GEN(IDAPATCH);                  /* PATCH SPACE                   */
         IDAPATCH
*   END IDA019RS                    /* MODULE END                    */
*                                                                  0671
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDADIWA )                                       */
*/*%INCLUDE SYSLIB  (IDACIDF )                                       */
*/*%INCLUDE SYSLIB  (IDAIRD  )                                       */
*/*%INCLUDE SYSLIB  (IDAICWA )                                       */
*/*%INCLUDE SYSLIB  (IDAIMWA )                                       */
*/*%INCLUDE SYSLIB  (IDAIXSPL)                                       */
*/*%INCLUDE SYSLIB  (IDARDF  )                                       */
*                                                                  0671
*       ;                                                          0671
@EL00001 DS    0H                                                  0671
@EF00001 DS    0H                                                  0671
@ER00001 BR    @14                                                 0671
@DATA    DS    0H
@DATD    DSECT
         DS    0F
IDA019RS CSECT
         DS    0F
@CF00053 DC    F'1'
@CH00053 EQU   @CF00053+2
@CF00146 DC    F'2'
@CF00159 DC    F'3'
@CF00226 DC    F'10'
@CF00083 DC    F'24'
@CF01026 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
IDA019RS CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CA00980 DC    A(IDAMVSEG)
@CA00995 DC    A(IDAADSEG)
@CV00919 DC    V(IDADRQ)
@CV00920 DC    V(IDAGWSEG)
@CV00921 DC    V(IDAIVIXB)
@CV00922 DC    V(IDAJRNSR)
@CV00923 DC    V(IDASBF)
@CV00924 DC    V(IDAREPOS)
@CV00925 DC    V(IDAWRBFR)
@CV00926 DC    V(IDA019RC)
@CV00927 DC    V(IDA019RF)
@CV00928 DC    V(IDAGRB)
@CV00929 DC    V(IDACHKKR)
@CV00958 DC    V(IDAFREEB)
         DS    0D
HWORD4   DC    H'4'
@DATD    DSECT
*                                                          /*@X04SVLC*/
RDFCTNUA EQU   X'40'                    COMPLEX RDF INDICATOR
RDFCTNUX EQU   X'FF'-RDFCTNUA           RESET COMPLEX MASK
RDFREPLA EQU   X'08'                    COUNT RDF INDICATOR
RDFREPLX EQU   X'FF'-RDFREPLA           RESET COUNT MASK
RDFEMPTI EQU   X'04'                    EMPTY RECORD       /*@X04SVLC*/
RDFLEN   EQU   3                        LENGTH OF RDF
RDFLLOFF EQU   1                        OFFSET WITHIN RDF TO LL
RDFSGLR  EQU   X'00'                   MASK FOR SINGLE RECORD RDF
RDFGRP   EQU   RDFCTNUA                 MASK FOR LL RDF OF A GROUP RDF
RDFCNT   EQU   RDFREPLA                 MASK FOR COUNT RDF
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019RS CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RWORK0   EQU   @00
RRPL     EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
RPARM1   EQU   @12
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLREQ   EQU   RPLIDWD+2
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLDDDD  EQU   RPLRBAR+4
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMB   EQU   0
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBJRN   EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBLSR   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHSSR   EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHEFLGS EQU   IDAPLH+4
PLHFLG3  EQU   IDAPLH+6
PLHAFLGS EQU   IDAPLH+7
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHARDB  EQU   IDAPLH+44
PLHSRSID EQU   IDAPLH+74
PLHDIOB  EQU   IDAPLH+76
PLHSAVE1 EQU   IDAPLH+84
PLHSAVE2 EQU   IDAPLH+88
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHIBUFC EQU   IDAPLH+188
PLHISPLP EQU   IDAPLH+196
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHNOSEG EQU   IDAPLH+240
PLHSRCSG EQU   IDAPLH+242
PLHKEYPT EQU   IDAPLH+248
PLHEND   EQU   IDAPLH+280
PLHKEY   EQU   0
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCSEG  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCDDDD EQU   IDABUFC+8
BUFCORBA EQU   IDABUFC+12
BUFCBAD  EQU   IDABUFC+20
BUFCINV  EQU   IDABUFC+28
BUFCNXT2 EQU   IDABUFC+37
BUFXORBA EQU   IDABUFC+44
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDDST   EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDNEST  EQU   IDAAMDSB+4
AMDRKP   EQU   IDAAMDSB+6
AMDKEYLN EQU   IDAAMDSB+8
AMDCINV  EQU   IDAAMDSB+20
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDPARDB EQU   IDAAMDSB+36
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
IDADIWA  EQU   0
DIWATV   EQU   IDADIWA+1
DIWFLG1  EQU   IDADIWA+4
DIWFLG2  EQU   IDADIWA+5
DIWPLH   EQU   IDADIWA+16
DIWBUFC  EQU   IDADIWA+20
DIWSAVE  EQU   IDADIWA+28
IDACIDF  EQU   0
CIDFOSET EQU   IDACIDF
CIDFLL   EQU   IDACIDF+2
IDAIXH   EQU   0
IXHFLPLN EQU   IDAIXH+2
IXHPTLS  EQU   IDAIXH+3
IXHBRBA  EQU   IDAIXH+4
IXHFSO   EQU   IDAIXH+18
IXHLEO   EQU   IDAIXH+20
IXHSEO   EQU   IDAIXH+22
IDAIBFLP EQU   0
IBFLPF   EQU   IDAIBFLP
IBFLPL   EQU   IDAIBFLP+1
IBFLP3   EQU   IDAIBFLP+2
IBFLP2   EQU   IBFLP3
IDASELL  EQU   0
IXSELL   EQU   IDASELL
IDAIXK   EQU   0
IDAICWA  EQU   0
ICWFLG1  EQU   IDAICWA+1
ICWCHN   EQU   IDAICWA+4
IDAIMWA  EQU   0
IMWFLAGS EQU   IDAIMWA+1
IMWIXSP  EQU   IDAIMWA+4
IMWISWKA EQU   IDAIMWA+8
IMWIPTR  EQU   IDAIMWA+52
IDAIXSPL EQU   0
IXSILN   EQU   IDAIXSPL+13
IXSNOSR  EQU   IDAIXSPL+16
IXSBFLG  EQU   IDAIXSPL+17
IXSHEP   EQU   IDAIXSPL+20
IXSSEP   EQU   IDAIXSPL+24
IXSLEP   EQU   IDAIXSPL+28
IDARDF   EQU   0
RDFRBYTE EQU   IDARDF
RDFCTNU  EQU   RDFRBYTE
RDFSEG   EQU   RDFRBYTE
RDFNOT1  EQU   RDFSEG
RDF1ST   EQU   RDFSEG
RDFREPL  EQU   RDFRBYTE
RDFLL    EQU   IDARDF+1
IDADATA  EQU   0
IDAKEY   EQU   0
ICWKEY2  EQU   0
ICWKEY3  EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00040 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
KEY      EQU   IDAKEY
AMDATA   EQU   IDADATA
RDFEMPTY EQU   RDFRBYTE
RDFTYPE  EQU   RDFRBYTE
IXSPEC   EQU   IDAIXSPL+19
IXSEKON  EQU   IDAIXSPL+18
@NM00060 EQU   IXSBFLG
IXSLELV  EQU   IXSBFLG
IXSSSRH  EQU   IXSBFLG
IXSKLEN  EQU   IDAIXSPL+14
IXSTLN   EQU   IDAIXSPL+12
IXSARG   EQU   IDAIXSPL+8
IXSBUFC  EQU   IDAIXSPL+4
IXSSTRBA EQU   IDAIXSPL
IMWKEY1  EQU   IDAIMWA+76
@NM00059 EQU   IDAIMWA+72
IMWNSOFF EQU   IDAIMWA+70
IMWCIMVN EQU   IDAIMWA+68
@NM00058 EQU   IDAIMWA+67
IMWSVIEL EQU   IDAIMWA+66
IMWIEL   EQU   IDAIMWA+65
IMWFGAIN EQU   IDAIMWA+64
IMWBUFP  EQU   IDAIMWA+60
IMWLBUFC EQU   IDAIMWA+56
IMWXPTR  EQU   IDAIMWA+48
IMWIKEYP EQU   IDAIMWA+44
IMWXKEYP EQU   IDAIMWA+40
IMWLEN   EQU   IDAIMWA+2
IMWBSE   EQU   IMWFLAGS
IMWRIPL  EQU   IMWFLAGS
IMWNEWHL EQU   IMWFLAGS
IMWID    EQU   IDAIMWA
ICWKEY1  EQU   IDAICWA+60
ICWCERP  EQU   IDAICWA+59
ICWCEL   EQU   IDAICWA+58
ICWCEF   EQU   IDAICWA+57
ICWCER   EQU   IDAICWA+56
ICWPTL   EQU   IDAICWA+55
ICWREQ   EQU   IDAICWA+54
ICWCRSEG EQU   IDAICWA+52
ICWNOSEG EQU   IDAICWA+50
ICWNEST  EQU   IDAICWA+48
ICWKEY3L EQU   IDAICWA+46
ICWKEY2L EQU   IDAICWA+44
ICWKEY1L EQU   IDAICWA+42
ICWLN    EQU   IDAICWA+40
ICWARDBP EQU   IDAICWA+36
ICWTPTR  EQU   IDAICWA+32
ICWTBASE EQU   IDAICWA+28
ICWADD   EQU   IDAICWA+24
ICWSCNT  EQU   IDAICWA+22
ICWPSEO  EQU   IDAICWA+20
ICWPRBA  EQU   IDAICWA+16
ICWCRBA  EQU   IDAICWA+12
ICWBUFC  EQU   IDAICWA+8
ICWLEN   EQU   IDAICWA+2
ICWENDRQ EQU   ICWFLG1
ICWSPLIT EQU   ICWFLG1
ICWKRDS  EQU   ICWFLG1
ICWVNE   EQU   ICWFLG1
ICWVSE   EQU   ICWFLG1
ICWRBAOK EQU   ICWFLG1
ICWWAGM  EQU   ICWFLG1
ICWWNF   EQU   ICWFLG1
ICWID    EQU   IDAICWA
IXKEY    EQU   IDAIXK
IBFLP1   EQU   IBFLP2
IXHFLGS  EQU   IDAIXH+17
IXHLV    EQU   IDAIXH+16
IXHXX    EQU   IDAIXH+12
IXHHP    EQU   IDAIXH+8
IXHLL    EQU   IDAIXH
@NM00057 EQU   CIDFLL
CIDFBUSY EQU   CIDFLL
@NM00056 EQU   IDADIWA+92
@NM00055 EQU   IDADIWA+88
@NM00054 EQU   IDADIWA+84
@NM00053 EQU   IDADIWA+80
@NM00052 EQU   IDADIWA+76
@NM00051 EQU   IDADIWA+72
@NM00050 EQU   IDADIWA+68
@NM00049 EQU   IDADIWA+64
@NM00048 EQU   IDADIWA+60
@NM00047 EQU   IDADIWA+56
DIWINRBA EQU   IDADIWA+52
DIWRKCT  EQU   IDADIWA+48
DIWSAVE5 EQU   DIWSAVE+16
DIWSAVE4 EQU   DIWSAVE+12
DIWSAVE3 EQU   DIWSAVE+8
DIWSAVE2 EQU   DIWSAVE+4
DIWSAVE1 EQU   DIWSAVE
DIWSPLTP EQU   IDADIWA+24
DIWHRBA  EQU   IDADIWA+12
DIWLRBA  EQU   IDADIWA+8
@NM00046 EQU   IDADIWA+6
DIWFSPF  EQU   DIWFLG2
DIW1ST   EQU   DIWFLG1
DIWNOT1  EQU   DIWFLG1
DIWSHIFT EQU   DIWFLG1
DIWGSPC  EQU   DIWFLG1
DIWEOKR  EQU   DIWFLG1
DIWPFERR EQU   DIWFLG1
DIWCISPL EQU   DIWFLG1
DIWCAS   EQU   DIWFLG1
DIWLEN   EQU   IDADIWA+2
DIWID    EQU   IDADIWA
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00045 EQU   IDAAMDSB+41
@NM00044 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCHAIN EQU   IDABUFC+48
BUFXIRBA EQU   IDABUFC+40
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCCPA  EQU   IDABUFC+16
BUFCAMB  EQU   BUFCPLH
@NM00043 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00042 EQU   IDABUFDR+16
BUFDBUFC EQU   IDABUFDR+12
@NM00041 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00039 EQU   IDAPLH+265
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00038 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHRBUFC EQU   IDAPLH+192
PLHNRBA  EQU   IDAPLH+184
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00037 EQU   IDAPLH+172
@NM00036 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHAMB   EQU   IDAPLH+108
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHRDFC  EQU   IDAPLH+72
PLHRDFP  EQU   IDAPLH+68
PLHFSP   EQU   IDAPLH+64
PLHRECP  EQU   IDAPLH+60
PLHNBUFC EQU   IDAPLH+56
PLHDBUFC EQU   IDAPLH+52
PLHLRECL EQU   IDAPLH+48
@NM00035 EQU   IDAPLH+43
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00034 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
@NM00033 EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHASKBF EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00032 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00031 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00030 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00029 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00028 EQU   IDAAMBL+31
@NM00027 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00026 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00025 EQU   AMBCSWD1+1
@NM00024 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
@NM00023 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00022 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00021 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00020 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00019 EQU   AMBINFL
@NM00018 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00017 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00016 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00015 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00014 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00013 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00012 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00011 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00010 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00009 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00008 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00007 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00006 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00005 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00004 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00003 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
@NM00002 EQU   RPLRBAR+3
@NM00001 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00107 EQU   HAVDIWA
@RC00159 EQU   @EC00460
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IDA019RS,(C'PLS2127',0701,78172)
