         TITLE 'IDA019RL - VSAM  D A T A   M O D I F Y                 *
                        '
IDA019RL CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA019RL  78.188'                                 0001
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         IDASVR14
*   IF RPLREQ=RPLPUT                /* IS THIS UPDATE REQUEST        */
*     THEN                          /* YES, CONTINUE                 */
         CLI   RPLREQ(RRPL),1                                      0160
         BNE   @RF00160                                            0160
*     DO;                           /* IS THIS A KEYED               */
*       IF AMDDST='1'B              /* SEQUENTIAL                    */
*         THEN                      /* DATA SET                      */
         L     @10,AMBDSB(,RAMB)                                   0162
         TM    AMDDST(@10),B'10000000'                             0162
         BNO   @RF00162                                            0162
*         DO;                       /* YES                           */
*           IF RPLAREA->AMDATA(AMDRKP+1:/* TEST THE KEY IN THE       */
*               AMDRKP+AMDKEYLN)^=PLHKEY/* USERS AREA AGAINST THE    */
*               (1:AMDKEYLN)        /* KEY IN THE BUFFER             */
*             THEN                  /* KEYS ARE DIFFERENT            */
         LH    @09,AMDRKP(,@10)                                    0164
         L     @15,RPLAREA(,RRPL)                                  0164
         L     @14,PLHKEYPT(,RPLH)                                 0164
         LH    @10,AMDKEYLN(,@10)                                  0164
         BCTR  @10,0                                               0164
         ALR   @15,@09                                             0164
         EX    @10,@SC01036                                        0164
         BE    @RF00164                                            0164
*             DO;                   /* SET ERROR INDICATORS          */
*               RPLERREG='08'X;     /* IN REGISTER AND               */
         MVI   RPLERREG(RRPL),X'08'                                0166
*               RPLERRCD=RPLKEYCH;  /* USERS RPL                     */
         MVI   RPLERRCD(RRPL),X'60'                                0167
*               GEN(IDARST14);      /* RESTORE REG 14                */
         IDARST14
*               RETURN;             /* RETURN TO CALLER              */
@EL00001 DS    0H                                                  0169
@EF00001 DS    0H                                                  0169
@ER00001 BR    @14                                                 0169
*             END;                  /*                               */
*         END;                      /*                               */
@RF00164 DS    0H                                                  0172
*       IF RPLRLEN^=PLHLRECL        /* CHECK NEW RECORD              */
*         THEN                      /* AGAINST OLD FOR SIZE          */
@RF00162 L     @10,RPLRLEN(,RRPL)                                  0172
         C     @10,PLHLRECL(,RPLH)                                 0172
         BE    @RF00172                                            0172
*         DO;                       /* DIFFERENCE                    */
*           IF AMDDST='1'B          /* IS THIS A KEYED SEQ DS        */
*             THEN                  /* YES, BEGIN ROUTINE TO         */
         L     @09,AMBDSB(,RAMB)                                   0174
         TM    AMDDST(@09),B'10000000'                             0174
         BNO   @RF00174                                            0174
*             DO;                   /* UPDATE WITH LENGTH CHNG       */
*               IF RPLRLEN<AMDRKP+AMDKEYLN×/* CHECK LENGTH           */
*                   RPLRLEN>AMDLRECL THEN/* AGAINST MIN & MAX LGTH.  */
         LH    @00,AMDRKP(,@09)                                    0176
         AH    @00,AMDKEYLN(,@09)                                  0176
         CR    @10,@00                                             0176
         BL    @RT00176                                            0176
         C     @10,AMDLRECL(,@09)                                  0176
         BNH   @RF00176                                            0176
@RT00176 DS    0H                                                  0177
*                 DO;               /* FAILED THE TEST, SO           */
*                   RPLERREG='08'X; /* SHOW LOG ERROR IN RPL         */
         MVI   RPLERREG(RRPL),X'08'                                0178
*                   RPLERRCD=RPLINLEN;/* SHOW ERROR TYPE IN RPL      */
         MVI   RPLERRCD(RRPL),X'6C'                                0179
*                   GEN(IDARST14);  /* RESTORE REG 14                */
         IDARST14
*                   RETURN;         /* RETURN TO CALLER              */
         B     @EL00001                                            0181
*                 END;              /*                               */
*               GO TO ERSE;         /* FIRST, ERASE OLD RECD.        */
         B     ERSE                                                0183
*             END;                  /*                               */
*           ELSE                    /* CHRON SEQ. DATA SET           */
*             DO;                   /* SO SET ERROR INDICATORS       */
@RF00174 DS    0H                                                  0186
*               RPLERREG='08'X;     /* IN REGISTER AND               */
         MVI   RPLERREG(RRPL),X'08'                                0186
*               RPLERRCD=RPLDLCER;  /* USERS RPL                     */
         MVI   RPLERRCD(RRPL),X'64'                                0187
*               GEN(IDARST14);      /* RESTORE REG 14 AND            */
         IDARST14
*               RETURN;             /* RETURN TO CALLER              */
         B     @EL00001                                            0189
*             END;                  /*                               */
*         END;                      /*                               */
*       ELSE                        /* RECORD SIZE IS THE SAME       */
*         DO;                       /*                               */
@RF00172 DS    0H                                                  0193
*           IF PLHLRECL>AMDCINV-    /* IS OLD RECORD         @ZA02289*/
*               LENGTH(IDACIDF)-    /* A SPANNED             @ZA02289*/
*               LENGTH(IDARDF) THEN /* RECORD                @ZA02289*/
         L     @10,AMBDSB(,RAMB)                                   0193
         L     @10,AMDCINV(,@10)                                   0193
         SL    @10,@CF00199                                        0193
         C     @10,PLHLRECL(,RPLH)                                 0193
         BNL   @RF00193                                            0193
*             DO;                   /* YES                   @ZA02289*/
*I01:                                                              0195
*               DO;                 /* IDACALL(IDA019RS)             */
I01      DS    0H                                                  0196
*                 CALL IDA019RS;    /* EXIT TO IDA019RS              */
         L     @15,@CV00970                                        0196
         BALR  @14,@15                                             0196
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I01;            /*                       @ZA02289*/
*               GEN(IDARST14);      /* RESTORE REG 14        @ZA02289*/
         IDARST14
*               RETURN;             /* BACK TO CALLER        @ZA02289*/
         B     @EL00001                                            0203
*             END;                  /*                       @ZA02289*/
*           RESPECIFY                                              0205
*            (RWORK5) RSTD;         /* PROTECT RWORK5                */
@RF00193 DS    0H                                                  0206
*           RWORK2=PLHRECP;         /* SET TO ADDRESS                */
         L     RWORK2,PLHRECP(,RPLH)                               0206
*           RWORK4=RPLAREA;         /* SET FROM ADDRESS              */
         L     RWORK4,RPLAREA(,RRPL)                               0207
*           RWORK3=PLHLRECL;        /* SET MOVE                      */
         L     RWORK3,PLHLRECL(,RPLH)                              0208
*           RWORK5=RWORK3;          /* LENGTH                        */
         LR    RWORK5,RWORK3                                       0209
*           GEN(MVCL  RWORK2,RWORK4);/* MOVE RECORD FROM USER AREA TO
*                                      BUFFER                        */
         MVCL  RWORK2,RWORK4
*         END;                      /*                               */
*     END;                          /*                               */
*   ELSE                            /* FOLLOWING DO CODE TAKES       */
*     DO;                           /* CARE OF THE ERASE CASE        */
         B     @RC00160                                            0213
@RF00160 DS    0H                                                  0214
*       IF AMDDST='1'B THEN         /* IS THIS A KEYED DS            */
         L     @10,AMBDSB(,RAMB)                                   0214
         TM    AMDDST(@10),B'10000000'                             0214
         BNO   @RF00214                                            0214
*ERSE:                                                             0215
*         DO;                       /* YES, ERASE IS VALID           */
ERSE     DS    0H                                                  0216
*           IF PLHLRECL>AMDCINV-    /* IS RECORD TO BE@ZA02289       */
*               LENGTH(IDACIDF)-    /* ERASED A              @ZA02289*/
*               LENGTH(IDARDF)      /* SPANNED RECORD        @ZA02289*/
*             THEN                  /*                       @ZA02289*/
         L     @10,AMBDSB(,RAMB)                                   0216
         L     @10,AMDCINV(,@10)                                   0216
         SL    @10,@CF00199                                        0216
         C     @10,PLHLRECL(,RPLH)                                 0216
         BNL   @RF00216                                            0216
*             DO;                   /* YES                   @ZA02289*/
*I02:                                                              0218
*               DO;                 /* IDACALL(IDA019RS)             */
I02      DS    0H                                                  0219
*                 CALL IDA019RS;    /* EXIT TO IDA019RS              */
         L     @15,@CV00970                                        0219
         BALR  @14,@15                                             0219
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I02;            /* GO TO SPANNED RECORD ERASE  0224
*                                      MODULE                @ZA02289*/
*               GEN(IDARST14);      /* RESTORE R14           @ZA02289*/
         IDARST14
*               RETURN;             /* RETURN                @ZA02289*/
         B     @EL00001                                            0226
*             END;                  /*                       @ZA02289*/
*           IF RPLREQ=RPLPUT THEN   /* UPDATE                @ZA02289*/
@RF00216 CLI   RPLREQ(RRPL),1                                      0228
         BNE   @RF00228                                            0228
*             DO;                   /* YES                   @ZA02289*/
*               IF RPLRLEN>AMDCINV- /* IS THE NEW            @ZA02289*/
*                   LENGTH(IDACIDF)-/* RECORD                @ZA02289*/
*                   LENGTH(IDARDF) THEN/* SPANNED            @ZA02289*/
         L     @10,AMBDSB(,RAMB)                                   0230
         L     @10,AMDCINV(,@10)                                   0230
         SL    @10,@CF00199                                        0230
         C     @10,RPLRLEN(,RRPL)                                  0230
         BNL   @RF00230                                            0230
*                 DO;               /* YES                   @ZA02289*/
*                   DO WHILE BUFCBAD^=PLHRECP×/* LOOP UNTIL  @ZA02289*/
*                         PLHFSP^=BUFCBAD+PLHLRECL;/* ONLY ONE RECORD
*                                      REMAINS               @ZA02289*/
         B     @DE00232                                            0232
@DL00232 DS    0H                                                  0233
*                     CALL SPLITCI; /* GO SPLIT              @ZA02289*/
         BAL   @14,SPLITCI                                         0233
*                   END;            /*                       @ZA02289*/
@DE00232 L     @10,PLHDBUFC(,RPLH)                                 0234
         L     @10,BUFCBAD(,@10)                                   0234
         C     @10,PLHRECP(,RPLH)                                  0234
         BNE   @DL00232                                            0234
         AL    @10,PLHLRECL(,RPLH)                                 0234
         C     @10,PLHFSP(,RPLH)                                   0234
         BNE   @DL00232                                            0234
*I03:                                                              0235
*                   DO;             /* IDACALL(IDA019RM)             */
I03      DS    0H                                                  0236
*                     CALL IDA019RM;/* EXIT TO IDA019RM              */
         L     @15,@CV00969                                        0236
         BALR  @14,@15                                             0236
*                     GEN(BALR @11,0);/* LOAD ADDR OF REENTRY        */
         BALR @11,0
*                     GEN(USING *,@11);/* ESTABLISH ADDRESSING       */
         USING *,@11
*                     GEN(L     @11,=A(@PSTART));/* RELOAD BASE      */
         L     @11,=A(@PSTART)
*                     GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING */
         USING @PSTART,@11
*                   END I03;        /* INSERT RECORD         @ZA02289*/
*                   GEN(IDARST14);  /* RESTORE R14           @ZA02289*/
         IDARST14
*                   RETURN;         /* BACK TO CALLER        @ZA02289*/
         B     @EL00001                                            0243
*                 END;              /*                       @ZA02289*/
*               RWORK1=BUFCBAD+AMDCINV-/* POINT TO           @ZA02289*/
*                   LENGTH(IDACIDF);/* CIDF                  @ZA02289*/
@RF00230 L     @10,PLHDBUFC(,RPLH)                                 0245
         L     @15,AMBDSB(,RAMB)                                   0245
         L     RWORK1,BUFCBAD(,@10)                                0245
         AL    RWORK1,AMDCINV(,@15)                                0245
         SL    RWORK1,@CF00067                                     0245
*               RESPECIFY                                          0246
*                 IDACIDF BASED(RWORK1);/*                   @ZA28995*/
*               DO WHILE RPLRLEN-PLHLRECL>CIDFLL×/* IF NO ROOM FOR 0247
*                                      INCREASED LENGTH      @ZA28995*/
*                     (PLHRDFP->RDFREPL=ON&/* REPEATED RDFS  @ZA28995*/
*                     RPLRLEN-PLHLRECL+3*LENGTH(IDARDF)>CIDFLL);/* 0247
*                                      AND NO ROOM MAX RDFS  @ZA28995*/
         B     @DE00247                                            0247
@DL00247 DS    0H                                                  0248
*                 CALL SPLITCI;     /* SPLIT CI              @ZA28995*/
         BAL   @14,SPLITCI                                         0248
*                 RWORK1=BUFCBAD+AMDCINV-LENGTH(IDACIDF);/*  @ZA28995*/
         L     @10,PLHDBUFC(,RPLH)                                 0249
         L     @15,AMBDSB(,RAMB)                                   0249
         L     RWORK1,BUFCBAD(,@10)                                0249
         AL    RWORK1,AMDCINV(,@15)                                0249
         SL    RWORK1,@CF00067                                     0249
*               END;                /*                       @ZA28995*/
@DE00247 L     @10,RPLRLEN(,RRPL)                                  0250
         SL    @10,PLHLRECL(,RPLH)                                 0250
         LH    @15,CIDFLL(,RWORK1)                                 0250
         CR    @10,@15                                             0250
         BH    @DL00247                                            0250
         L     @14,PLHRDFP(,RPLH)                                  0250
         TM    RDFREPL(@14),B'00001000'                            0250
         BNO   @DC00247                                            0250
         AL    @10,@CF00224                                        0250
         CR    @10,@15                                             0250
         BH    @DL00247                                            0250
@DC00247 DS    0H                                                  0251
*               RESPECIFY                                          0251
*                 IDACIDF BASED;    /*                       @ZA28995*/
*             END;                  /*                       @ZA02289*/
*           RWORK1=BUFCBAD+AMDCINV-LENGTH(IDACIDF);/*        @ZA30400*/
@RF00228 L     @10,PLHDBUFC(,RPLH)                                 0253
         L     @15,AMBDSB(,RAMB)                                   0253
         L     RWORK1,BUFCBAD(,@10)                                0253
         AL    RWORK1,AMDCINV(,@15)                                0253
         SL    RWORK1,@CF00067                                     0253
*           IF PLHRECP+PLHLRECL^=PLHFSP THEN/* IS CURRENT RECORD     */
         L     @10,PLHRECP(,RPLH)                                  0254
         L     @15,PLHLRECL(,RPLH)                                 0254
         LR    @00,@10                                             0254
         ALR   @00,@15                                             0254
         L     @14,PLHFSP(,RPLH)                                   0254
         CR    @00,@14                                             0254
         BE    @RF00254                                            0254
*             DO;                   /* LAST IN THE BUFFER -NO        */
*               RWORK3=PLHFSP-PLHRECP-PLHLRECL;/* COMPUTE MOVE LEN   */
         SLR   @14,@10                                             0256
         SLR   @14,@15                                             0256
         LR    RWORK3,@14                                          0256
*               RESPECIFY                                          0257
*                (RWORK0) RSTD;     /*                               */
*               RWORK0=RWORK3;      /* SAVE MOVE LENGTH              */
         LR    RWORK0,RWORK3                                       0258
*               RWORK5=RWORK3;      /* SET MOVE LENGTH               */
         LR    RWORK5,RWORK3                                       0259
*               RWORK2=PLHRECP;     /* SET 'TO' ADDRESS              */
         LR    RWORK2,@10                                          0260
*               RWORK4=RWORK2+PLHLRECL;/* SET 'FROM' ADDRESS         */
         ALR   @15,RWORK2                                          0261
         LR    RWORK4,@15                                          0261
*               GEN(MVCL  RWORK2,RWORK4);/* MOVE RECORDS TO LEFT     */
         MVCL  RWORK2,RWORK4
*               RESPECIFY                                          0263
*                (RWORK2,                                          0263
*                 RWORK3,                                          0263
*                 RWORK4,                                          0263
*                 RWORK5) UNRSTD;                                  0263
*               IF AMBJRN=ON THEN   /* IS JOURNAL EXIT SET ON        */
         TM    AMBJRN(RAMB),B'00000010'                            0264
         BNO   @RF00264                                            0264
*                 DO;               /* YES                           */
*                   PLHJNRBA=BUFCDDDD+/* SET NEW RBA IN JOURNAL      */
*                       (PLHRECP-BUFCBAD);/* EXIT PARAMETER LIST     */
         L     @10,PLHDBUFC(,RPLH)                                 0266
         L     @15,BUFCDDDD(,@10)                                  0266
         L     @14,PLHRECP(,RPLH)                                  0266
         L     @10,BUFCBAD(,@10)                                   0266
         LR    @09,@14                                             0266
         SLR   @09,@10                                             0266
         ALR   @09,@15                                             0266
         ST    @09,PLHJNRBA(,RPLH)                                 0266
*                   PLHJORBA=BUFCDDDD+((PLHRECP/* SET OLD RBA IN     */
*                       +PLHLRECL)-BUFCBAD);/* PARAMETER LIST        */
         AL    @14,PLHLRECL(,RPLH)                                 0267
         SLR   @14,@10                                             0267
         ALR   @15,@14                                             0267
         ST    @15,PLHJORBA(,RPLH)                                 0267
*                   PLHJRNLL=RWORK0;/* SET LENGTH IN PARM LIST       */
         ST    RWORK0,PLHJRNLL(,RPLH)                              0268
*                   RESPECIFY                                      0269
*                    (RWORK0) UNRSTD;/*                              */
*                   PLHJCODE=PLHJRBAC;/* SET RBA CHANGE IN LIST      */
         MVI   PLHJCODE(RPLH),B'00001100'                          0270
*I04:                                                              0271
*                   DO;             /* IDACALL(IDATJXIT)             */
I04      DS    0H                                                  0272
*                     CALL IDATJXIT;/* EXIT TO IDATJXIT              */
         L     @15,@CV00968                                        0272
         BALR  @14,@15                                             0272
*                     GEN(BALR @11,0);/* LOAD ADDR OF REENTRY        */
         BALR @11,0
*                     GEN(USING *,@11);/* ESTABLISH ADDRESSING       */
         USING *,@11
*                     GEN(L     @11,=A(@PSTART));/* RELOAD BASE      */
         L     @11,=A(@PSTART)
*                     GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING */
         USING @PSTART,@11
*                   END I04;        /* GO TO JOURNAL ROUTINE         */
*                   RESPECIFY                                      0278
*                    (RWORK1) RSTD; /*                               */
*                   RWORK1=BUFCBAD+AMDCINV-/* REESTABLISH ADDRESS OF */
*                       LENGTH(IDACIDF);/* CIDF                      */
         L     @10,PLHDBUFC(,RPLH)                                 0279
         L     @15,AMBDSB(,RAMB)                                   0279
         L     RWORK1,BUFCBAD(,@10)                                0279
         AL    RWORK1,AMDCINV(,@15)                                0279
         SL    RWORK1,@CF00067                                     0279
*                 END;              /*                               */
*             END;                  /*                               */
@RF00264 DS    0H                                                  0282
*           DO;                     /*                               */
@RF00254 DS    0H                                                  0283
*             RWORK1->CIDFOSET=RWORK1->CIDFOSET/* REDUCE FS DISP     */
*                 -PLHLRECL;        /* IN CIDF BY RECD LNTH          */
         L     @10,PLHLRECL(,RPLH)                                 0283
         LH    @00,CIDFOSET(,RWORK1)                               0283
         SLR   @00,@10                                             0283
         STH   @00,CIDFOSET(,RWORK1)                               0283
*             PLHFSP=PLHFSP-PLHLRECL;/* ADJUST FS PTR IN PLH         */
         L     @00,PLHFSP(,RPLH)                                   0284
         SLR   @00,@10                                             0284
         ST    @00,PLHFSP(,RPLH)                                   0284
*             RESPECIFY                                            0285
*              (RWORK2,                                            0285
*               RWORK3,                                            0285
*               RWORK4,                                            0285
*               RWORK5) RSTD;       /*                               */
*             RWORK2=PLHFSP;        /* POINT TO NEW FS ORIGIN        */
         LR    RWORK2,@00                                          0286
*             RWORK3=PLHLRECL;      /* GET LENGTH OF RECORD          */
         LR    RWORK3,@10                                          0287
*             RWORK5=ZERO;          /* SET FOR STORING ZERO          */
         SLR   RWORK5,RWORK5                                       0288
*             GEN(MVCL  RWORK2,RWORK4);/* CLEAR OUT RESIDUE          */
         MVCL  RWORK2,RWORK4
*             RESPECIFY                                            0290
*              (RWORK2,                                            0290
*               RWORK3,                                            0290
*               RWORK4,                                            0290
*               RWORK5) UNRSTD;     /*                               */
*             RESPECIFY                                            0291
*              (RWORK0) RSTD;       /*                               */
*             RWORK0=PLHLRECL;      /* BEGIN TO SUM FREE SPACE     0292
*                                      CHANGES                       */
         L     RWORK0,PLHLRECL(,RPLH)                              0292
*           END;                    /*                               */
*           IF PLHRDFP->RDFREPL=ON& /* IS CURRENT RDF A RECD         */
*               PLHRDFP->RDFLL>TWO THEN/* COUNT WITH COUNT > 2       */
         L     @10,PLHRDFP(,RPLH)                                  0294
         TM    RDFREPL(@10),B'00001000'                            0294
         BNO   @RF00294                                            0294
         SLR   @15,@15                                             0294
         ICM   @15,3,RDFLL(@10)                                    0294
         C     @15,@CF00146                                        0294
         BNH   @RF00294                                            0294
*             DO;                   /* YES                           */
*               PLHRDFP->RDFLL=PLHRDFP->/* REDUCE COUNT IN RDF       */
*                   RDFLL-ONE;      /* BY ONE                        */
         BCTR  @15,0                                               0296
         STCM  @15,3,RDFLL(@10)                                    0296
*               IF PLHBWD=OFF THEN  /* BACKWARD DIRECTION    @ZA02289*/
         TM    PLHBWD(RPLH),B'00010000'                            0297
         BNZ   @RF00297                                            0297
*                 DO;               /* NO, FORWARD           @ZA02289*/
*                   PLHNOADV=ON;    /* SHOW PLH WAS ADVANCED         */
         OI    PLHNOADV(RPLH),B'00001000'                          0299
*                   IF PLHRDFC=ONE THEN/* IS IT ONE OX03728          */
         CLC   PLHRDFC(2,RPLH),@CH00053                            0300
         BNE   @RF00300                                            0300
*                     DO;           /*                               */
*                       PLHRDFP=PLHRDFP-LENGTH(IDARDF);/* BUMP PTR   */
         SL    @10,@CF00159                                        0302
         ST    @10,PLHRDFP(,RPLH)                                  0302
*                       GO TO BUFEND;/* GO CHECK BUFEND X03728       */
         B     BUFEND                                              0303
*                     END;          /* OX03728                       */
*                   ELSE            /*                               */
*                     PLHRDFC=PLHRDFC-ONE;/* REDUCE PLH CNT 3728     */
@RF00300 LH    @10,PLHRDFC(,RPLH)                                  0305
         BCTR  @10,0                                               0305
         STH   @10,PLHRDFC(,RPLH)                                  0305
*                 END;              /*                       @ZA02289*/
*               ELSE                /* BACKWARD              @ZA02289*/
*                 DO;               /*                       @ZA02289*/
         B     @RC00297                                            0307
@RF00297 DS    0H                                                  0308
*                   IF RPLREQ=RPLPUT THEN/* PUT REQUEST      @ZA02289*/
         CLI   RPLREQ(RRPL),1                                      0308
         BNE   @RF00308                                            0308
*                     DO;           /* SET POSITION          @ZA02289*/
*                       IF PLHRDFC=ONE THEN/* COUNT EQUAL 1  @ZA02289*/
         CLC   PLHRDFC(2,RPLH),@CH00053                            0310
         BNE   @RF00310                                            0310
*                         PLHRDFC=PLHRDFP->RDFLL;/* YES, SET COUNT 0311
*                                                            @ZA02289*/
         L     @10,PLHRDFP(,RPLH)                                  0311
         MVC   PLHRDFC(2,RPLH),RDFLL(@10)                          0311
*                       ELSE        /* COUNT NOT ONE         @ZA02289*/
*                         DO;       /*                       @ZA02289*/
         B     @RC00310                                            0312
@RF00310 DS    0H                                                  0313
*                           IF PLHRDFC=PLHRDFP->RDFLL+ONE&PLHRECP< 0313
*                               PLHFSP THEN/* POINTING TO END OF   0313
*                                      GROUP AND NOT LAST RECORD   0313
*                                                            @ZA02289*/
         L     @10,PLHRDFP(,RPLH)                                  0313
         LA    @15,1                                               0313
         SLR   @14,@14                                             0313
         ICM   @14,3,RDFLL(@10)                                    0313
         ALR   @15,@14                                             0313
         CH    @15,PLHRDFC(,RPLH)                                  0313
         BNE   @RF00313                                            0313
         CLC   PLHRECP(4,RPLH),PLHFSP(RPLH)                        0313
         BNL   @RF00313                                            0313
*                             DO;   /* YES                   @ZA02289*/
*                               PLHRDFP=PLHRDFP-/* MOVE TO THE     0315
*                                                            @ZA02289*/
*                                   LENGTH(IDARDF);/* NEXT RDF     0315
*                                                            @ZA02289*/
         LA    @15,3                                               0315
         SLR   @10,@15                                             0315
         ST    @10,PLHRDFP(,RPLH)                                  0315
*                               PLHLRECL=PLHRDFP->RDFLL;/* SET LL  0316
*                                                            @ZA02289*/
         SLR   @14,@14                                             0316
         ICM   @14,3,RDFLL(@10)                                    0316
         ST    @14,PLHLRECL(,RPLH)                                 0316
*                               IF PLHRDFP->RDFCTNU=ON THEN/*      0317
*                                      GROUP@ZA02289                 */
         TM    RDFCTNU(@10),B'01000000'                            0317
         BNO   @RF00317                                            0317
*                                 DO;/* YES                  @ZA02289*/
*                                   PLHRDFP=PLHRDFP-LENGTH(IDARDF);/*
*                                      MOVE TO COUNT RDF     @ZA02289*/
         SLR   @10,@15                                             0319
         ST    @10,PLHRDFP(,RPLH)                                  0319
*                                   PLHRDFC=PLHRDFP->RDFLL;/* SET  0320
*                                      COUNT IN PLH          @ZA02289*/
         MVC   PLHRDFC(2,RPLH),RDFLL(@10)                          0320
*                                 END;/*                     @ZA02289*/
*                               ELSE/*                       @ZA02289*/
*                                 PLHRDFC=ONE;/* COUNT TO 1  @ZA02289*/
         B     @RC00317                                            0322
@RF00317 MVC   PLHRDFC(2,RPLH),@CH00053                            0322
*                             END;  /*                       @ZA02289*/
*                           ELSE    /*                       @ZA02289*/
*                             PLHRDFC=PLHRDFP->RDFLL-/* REDUCE COUNT
*                                                            @ZA02289*/
*                                 PLHRDFC+ONE;/*             @ZA02289*/
         B     @RC00313                                            0324
@RF00313 L     @10,PLHRDFP(,RPLH)                                  0324
         SLR   @15,@15                                             0324
         ICM   @15,3,RDFLL(@10)                                    0324
         SH    @15,PLHRDFC(,RPLH)                                  0324
         AL    @15,@CF00053                                        0324
         STH   @15,PLHRDFC(,RPLH)                                  0324
*                         END;      /*                       @ZA02289*/
*                     END;          /*                       @ZA02289*/
*                 END;              /*                       @ZA02289*/
*             END;                  /*                               */
*           ELSE                    /*                               */
*             DO;                   /*                               */
         B     @RC00294                                            0329
@RF00294 DS    0H                                                  0330
*               IF PLHRDFP->RDFREPL=ON&/* IS CURRENT RDF A RECD      */
*                   PLHRDFP->RDFLL=ONE THEN/* COUNT WITH COUNT = 1   */
         L     @10,PLHRDFP(,RPLH)                                  0330
         TM    RDFREPL(@10),B'00001000'                            0330
         BNO   @RF00330                                            0330
         CLC   RDFLL(2,@10),@CH00053                               0330
         BNE   @RF00330                                            0330
*                 DO;               /* YES                           */
*                   RESPECIFY                                      0332
*                    (RWORK2,                                      0332
*                     RWORK3) RSTD; /*                               */
*                   RWORK3=PLHRDFP+LENGTH(IDARDF);/* SET 'TO' ADDRESS
*                                      ONE RDF TO THE RIGHT          */
         LA    @15,3                                               0333
         LR    RWORK3,@10                                          0333
         ALR   RWORK3,@15                                          0333
*                   RWORK2=PLHRDFP-LENGTH(IDARDF);/* SET           0334
*                                      'FROM'ADDRESS ONE RDF TO THE
*                                      LEFT                          */
         SLR   @10,@15                                             0334
         LR    RWORK2,@10                                          0334
*                   RWORK0=RWORK0+TWO*LENGTH(IDARDF);/* INCREASE FREE
*                                      SPACE BY TWO RDFS             */
         AL    RWORK0,@CF00221                                     0335
*                   PLHRDFP=RWORK3; /* UPDATE RDF POINTER TO NEXT RDF
*                                      ON RIGHT                      */
         ST    RWORK3,PLHRDFP(,RPLH)                               0336
*                 END;              /*                               */
*               ELSE                /*                               */
*                 DO;               /*                               */
         B     @RC00330                                            0338
@RF00330 DS    0H                                                  0339
*                   RWORK3=PLHRDFP; /* SET 'TO' AT CURRENT POS       */
         L     @10,PLHRDFP(,RPLH)                                  0339
         LR    RWORK3,@10                                          0339
*                   RWORK2=PLHRDFP-LENGTH(IDARDF);/* SET 'FROM' ONE
*                                      RDF TO THE LEFT               */
         LA    @15,3                                               0340
         LR    RWORK2,@10                                          0340
         SLR   RWORK2,@15                                          0340
*                   RWORK0=RWORK0+LENGTH(IDARDF);/* ONE RDF TO FS    */
         ALR   RWORK0,@15                                          0341
*                   IF PLHRDFP->RDFREPL=ON&/* IS RDF A COUNT RDF WITH*/
*                       PLHRDFP->RDFLL=TWO THEN/* THE COUNT AT 2     */
         TM    RDFREPL(@10),B'00001000'                            0342
         BNO   @RF00342                                            0342
         CLC   RDFLL(2,@10),@CH00146                               0342
         BNE   @RF00342                                            0342
*                     DO;           /* YES                           */
*                       PLHRDFP=PLHRDFP+LENGTH(IDARDF);/* MOVE RDF 0344
*                                      PTR ONE RDF TO RIGHT AND      */
         ALR   @10,@15                                             0344
         ST    @10,PLHRDFP(,RPLH)                                  0344
*                       PLHRDFP->RDFCTNU=OFF;/* RESET CONTINUATION 0345
*                                      BIT                           */
         NI    RDFCTNU(@10),B'10111111'                            0345
*                       IF(PLHBWD=OFF&PLHRDFC=ONE)×/* NEED TO      0346
*                                                            @ZA02289*/
*                           (PLHBWD=ON&PLHRDFC=TWO/* MOVE RDF      0346
*                                                            @ZA02289*/
*                           &PLHFSP^=PLHRECP) THEN/* TO LEFT @ZA02289*/
         TM    PLHBWD(RPLH),B'00010000'                            0346
         BNZ   @GL00009                                            0346
         CLC   PLHRDFC(2,RPLH),@CH00053                            0346
         BE    @RT00346                                            0346
@GL00009 TM    PLHBWD(RPLH),B'00010000'                            0346
         BNO   @RF00346                                            0346
         CLC   PLHRDFC(2,RPLH),@CH00146                            0346
         BNE   @RF00346                                            0346
         CLC   PLHFSP(4,RPLH),PLHRECP(RPLH)                        0346
         BE    @RF00346                                            0346
@RT00346 DS    0H                                                  0347
*                         DO;       /* POINTER-YES           @ZA02289*/
*                           PLHRDFP=PLHRDFP-LENGTH(IDARDF);/* MOVE 0348
*                                      LEFT                  @ZA02289*/
         L     @10,PLHRDFP(,RPLH)                                  0348
         SL    @10,@CF00159                                        0348
         ST    @10,PLHRDFP(,RPLH)                                  0348
*                         END;      /*                       @ZA02289*/
*                     END;          /*                               */
@RF00346 DS    0H                                                  0351
*                 END;              /*                               */
@RF00342 DS    0H                                                  0352
*               RESPECIFY                                          0352
*                (RWORK4,                                          0352
*                 RWORK5) RSTD;     /*                               */
@RC00330 DS    0H                                                  0353
*               GEN(LA  RWORK4,7);  /* SET MASK FOR ICM INST.        */
         LA  RWORK4,7
*               RWORK5=PLHFSP+PLHLRECL+/* SET LIMIT TO 1ST BYTE      */
*                   RWORK1->CIDFLL; /* AFTER FREESPACE               */
         L     RWORK5,PLHFSP(,RPLH)                                0354
         AL    RWORK5,PLHLRECL(,RPLH)                              0354
         AH    RWORK5,CIDFLL(,RWORK1)                              0354
*               DO WHILE RWORK2^<RWORK5;/* LOOP UNTIL 'FROM' ADD.  0355
*                                      FALLS INTO FREESPACE          */
         B     @DE00355                                            0355
@DL00355 DS    0H                                                  0356
*                 GEN(EX  RWORK4,GETRDF);/* PICK UP AN RDF AND PUT   */
         EX  RWORK4,GETRDF
*                 GEN(EX  RWORK4,PUTRDF);/* IT IN NEW LOCATION       */
         EX  RWORK4,PUTRDF
*                 RWORK2=RWORK2-LENGTH(IDARDF);/* ADJUST 'FROM' ADDR.*/
         LA    @10,3                                               0358
         SLR   RWORK2,@10                                          0358
*                 RWORK3=RWORK3-LENGTH(IDARDF);/* ADJUST 'TO' ADDRESS*/
         SLR   RWORK3,@10                                          0359
*               END;                /*                               */
@DE00355 CLR   RWORK2,RWORK5                                       0360
         BNL   @DL00355                                            0360
*               RWORK2=RWORK5;      /* POINT TO PREVIOUS LEFTMOST RDF*/
         LR    RWORK2,RWORK5                                       0361
*               RWORK3=RWORK0-PLHLRECL;/* GET LENGTH OF RDF MOVE     */
         LR    RWORK3,RWORK0                                       0362
         SL    RWORK3,PLHLRECL(,RPLH)                              0362
*               RWORK5=ZERO;        /* SET TO STORE ZERO             */
         SLR   RWORK5,RWORK5                                       0363
*               GEN(MVCL  RWORK2,RWORK4);/* ERASE RESIDUE RDF        */
         MVCL  RWORK2,RWORK4
*               RESPECIFY                                          0365
*                (RWORK2,                                          0365
*                 RWORK3,                                          0365
*                 RWORK4,                                          0365
*                 RWORK5) UNRSTD;   /*                               */
*               IF PLHBWD=OFF×RPLREQ=RPLPUT THEN/* FORWARD DIRECTION
*                                      OR PUT                @ZA02289*/
         TM    PLHBWD(RPLH),B'00010000'                            0366
         BZ    @RT00366                                            0366
         CLI   RPLREQ(RRPL),1                                      0366
         BNE   @RF00366                                            0366
@RT00366 DS    0H                                                  0367
*                 DO;               /* YES                   @ZA02289*/
*BUFEND:                                                           0368
*                   IF PLHRECP^<PLHFSP&PLHBWD=OFF THEN/* ARE WE AT 0368
*                                      END AND FORWARD       @ZA02289*/
BUFEND   CLC   PLHRECP(4,RPLH),PLHFSP(RPLH)                        0368
         BL    @RF00368                                            0368
         TM    PLHBWD(RPLH),B'00010000'                            0368
         BNZ   @RF00368                                            0368
*                     DO;           /* YES                           */
*                       PLHNOADV=OFF;/* SHOW PLH NOT ADVANCED        */
         NI    PLHNOADV(RPLH),B'11110111'                          0370
*                       PLHLRECL=ZERO;/* SHOW NO RECORD LENGTH       */
         SLR   @10,@10                                             0371
         ST    @10,PLHLRECL(,RPLH)                                 0371
*                     END;          /*                               */
*                   ELSE            /*                               */
*                     DO;           /*                               */
         B     @RC00368                                            0373
@RF00368 DS    0H                                                  0374
*                       PLHLRECL=PLHRDFP->RDFLL;/* SET PLH RECORD  0374
*                                      LENGTH FROM RDF               */
         L     @10,PLHRDFP(,RPLH)                                  0374
         SLR   @15,@15                                             0374
         ICM   @15,3,RDFLL(@10)                                    0374
         ST    @15,PLHLRECL(,RPLH)                                 0374
*                       IF PLHRDFP->RDFCTNU=ON THEN/* IS THIS A    0375
*                                      REPLICATED RDF                */
         TM    RDFCTNU(@10),B'01000000'                            0375
         BNO   @RF00375                                            0375
*                         DO;       /* YES, MOVE RDF POINTER         */
*                           PLHRDFP=PLHRDFP-LENGTH(IDARDF);/* TO RDF
*                                      WITH CT                       */
         SL    @10,@CF00159                                        0377
         ST    @10,PLHRDFP(,RPLH)                                  0377
*                           PLHRDFC=PLHRDFP->RDFLL;/* SET PLH RECORD
*                                      COUNT FROM RDF COUNT          */
         MVC   PLHRDFC(2,RPLH),RDFLL(@10)                          0378
*                         END;      /*                               */
*                       ELSE        /* FOR NON REPLICATED RDF        */
*                         DO;       /* SET COUNT IN                  */
         B     @RC00375                                            0380
@RF00375 DS    0H                                                  0381
*                           PLHRDFC=ONE;/* PLH TO ONE                */
         MVC   PLHRDFC(2,RPLH),@CH00053                            0381
*                         END;      /*                               */
*                       IF PLHBWD=OFF THEN/* IF FORWARD      @ZA02289*/
@RC00375 TM    PLHBWD(RPLH),B'00010000'                            0383
         BNZ   @RF00383                                            0383
*                         PLHNOADV=ON;/* SHOW PLH ADVANCED           */
         OI    PLHNOADV(RPLH),B'00001000'                          0384
*                     END;          /*                               */
@RF00383 DS    0H                                                  0386
*                 END;              /*                       @ZA02289*/
@RC00368 DS    0H                                                  0387
*             END;                  /*                               */
@RF00366 DS    0H                                                  0388
*           RWORK1->CIDFLL=RWORK1->CIDFLL/* UPDATE FREE SPACE        */
*               +RWORK0;            /* LENGTH IN CIDF                */
@RC00294 LR    @10,RWORK0                                          0388
         LH    @15,CIDFLL(,RWORK1)                                 0388
         ALR   @10,@15                                             0388
         STH   @10,CIDFLL(,RWORK1)                                 0388
*           IF RPLREQ=RPLPUT THEN   /* IS THIS AN UPDATE REQ.        */
         CLI   RPLREQ(RRPL),1                                      0389
         BNE   @RF00389                                            0389
*             DO;                   /* YES                           */
*               BUFXORBA=BUFCDDDD;  /* EXCL OUT RBA          @ZA17187*/
         L     @10,PLHDBUFC(,RPLH)                                 0391
         L     @15,BUFCDDDD(,@10)                                  0391
         ST    @15,BUFXORBA(,@10)                                  0391
*               DO;                 /* SET UPDATED BFR               */
*                 BUFCORBA=BUFCDDDD;                               0393
         ST    @15,BUFCORBA(,@10)                                  0393
*                 BUFCMW=ON;                                       0394
         OI    BUFCMW(@10),B'10000000'                             0394
*               END;                /* SET UPDATE WRITE              */
*I06:                                                              0396
*               DO;                 /* IDACALL(IDA019RM)             */
I06      DS    0H                                                  0397
*                 CALL IDA019RM;    /* EXIT TO IDA019RM              */
         L     @15,@CV00969                                        0397
         BALR  @14,@15                                             0397
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I06;            /* CALL DATA INSERT              */
*               GEN(IDARST14);      /* RESTORE REG 14                */
         IDARST14
*               RETURN;             /* RETURN TO CALLER              */
         B     @EL00001                                            0404
*             END;                  /*                               */
*         END;                      /*                               */
*       ELSE                        /* ILLEGAL FUNCTION OF           */
*         DO;                       /* ERASE WITH CHRON SEQ DS       */
         B     @RC00214                                            0407
@RF00214 DS    0H                                                  0408
*           RPLERREG='08'X;         /* SO SET ERROR INDICATORS       */
         MVI   RPLERREG(RRPL),X'08'                                0408
*           RPLERRCD=RPLERSER;      /* IN REGISTER AND RPL           */
         MVI   RPLERRCD(RRPL),X'50'                                0409
*           GEN(IDARST14);          /* RESTORE REG14 AND             */
         IDARST14
*           RETURN;                 /* RETURN TO CALLER              */
         B     @EL00001                                            0411
*         END;                                                     0412
*     END;                                                         0413
@RC00214 DS    0H                                                  0414
*   BUFXORBA=BUFCDDDD;              /* EXCL OUT RBA          @ZA17187*/
@RC00160 L     @10,PLHDBUFC(,RPLH)                                 0414
         L     @15,BUFCDDDD(,@10)                                  0414
         ST    @15,BUFXORBA(,@10)                                  0414
*   DO;                             /* SET UPDATED BFR               */
*     BUFCORBA=BUFCDDDD;                                           0416
         ST    @15,BUFCORBA(,@10)                                  0416
*     BUFCMW=ON;                                                   0417
         OI    BUFCMW(@10),B'10000000'                             0417
*   END;                            /* SET UPDATE WRITE              */
*   GEN(IDARST14);                  /* RESTORE REG 14                */
         IDARST14
*   RETURN;                         /*                               */
         B     @EL00001                                            0420
*                                                                  0421
*/*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*/*    SPLITCI SUBROUTINE                                    @ZA02289*/
*/*     FUNCTION:                                            @ZA02289*/
*/*      OBTAINS DIWA                                        @ZA02289*/
*/*      SETS ARDB IN PLH                                    @ZA02289*/
*/*      CALLS CI SPLIT                                      @ZA02289*/
*/*      FREES DIWA                                          @ZA02289*/
*/*      CHECKS FOR ERRORS                                   @ZA02289*/
*/*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*                                                                  0421
*SPLITCI:                           /* NAME                  @ZA02289*/
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* PROCEDURE             @ZA02289*/
SPLITCI  DS    0H                                                  0422
*   GEN(IDASVR14);                  /* SAVE R14              @ZA02289*/
         IDASVR14
*   IF AMBLSR=ON×AMBGSR=ON THEN     /* SHARED RESOURSES      @ZA02289*/
         TM    AMBLSR(RAMB),B'01100000'                            0423
         BZ    @RF00423                                            0423
*     DO;                           /* YES                   @ZA02289*/
*       RBUFC=PLHIBUFC;             /* POINT TO SEQ SET      @ZA02289*/
         L     RBUFC,PLHIBUFC(,RPLH)                               0425
*       IF RBUFC^=ZERO THEN         /* OWNED BY PLH          @ZA02289*/
         LTR   RBUFC,RBUFC                                         0426
         BZ    @RF00426                                            0426
*I08:                                                              0427
*         DO;                       /* IDACALL(IDAFREEB)             */
I08      DS    0H                                                  0428
*           CALL IDAFREEB;          /* EXIT TO IDAFREEB              */
         L     @15,@CV00974                                        0428
         BALR  @14,@15                                             0428
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I08;                  /* YES, FREE IT          @ZA02289*/
*     END;                          /*                       @ZA02289*/
@RF00426 DS    0H                                                  0435
*LOCKDIWA:                          /* LOCK DIWA             @ZA02289*/
*   RPARM1=ADDR(DIWATV);            /* POINT TO LOCK BYTE    @ZA02289*/
@RF00423 DS    0H                                                  0435
LOCKDIWA L     RPARM1,AMBIWA(,RAMB)                                0435
         LA    RPARM1,DIWATV(,RPARM1)                              0435
*   GEN(TS 0(RPARM1));              /* TEST AND SET          @ZA02289*/
         TS 0(RPARM1)
*   BC(8,HAVEDIWA);                 /* OBTAINED DIWA         @ZA02289*/
         BC    8,HAVEDIWA                                          0437
*   RFY                                                            0438
*     RWORK0 RSTD;                  /*                       @ZA02289*/
*   RWORK0=DEFR0;                   /* DATA INSERT REQUEST   @ZA02289*/
         SLR   RWORK0,RWORK0                                       0439
*I09:                                                              0440
*   DO;                             /* IDACALL(IDADRQ)               */
I09      DS    0H                                                  0441
*     CALL IDADRQ;                  /* EXIT TO IDADRQ                */
         L     @15,@CV00972                                        0441
         BALR  @14,@15                                             0441
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I09;                        /* GO DEFER              @ZA02289*/
*   GO TO LOCKDIWA;                 /* TRY AGAIN             @ZA02289*/
         B     LOCKDIWA                                            0447
*   RFY                                                            0448
*     RWORK0 UNRSTD;                /*                       @ZA02289*/
*HAVEDIWA:                          /* HAVE DIWA             @ZA02289*/
*   DIWPLH=RPLH;                    /* IDENTIFY LOCKING PLH  @ZA32757*/
HAVEDIWA L     @10,AMBIWA(,RAMB)                                   0449
         ST    RPLH,DIWPLH(,@10)                                   0449
*   IF PLHIBUFC=ZERO THEN           /* NEED SEQ SET          @ZA02289*/
         L     @10,PLHIBUFC(,RPLH)                                 0450
         LTR   @10,@10                                             0450
         BNZ   @RF00450                                            0450
*     DO;                           /* YES                   @ZA02289*/
*       RAMB=AMBLIX;                /* POINT TO INDEX        @ZA02289*/
         L     @10,RPLDACB(,RRPL)                                  0452
         L     @10,ACBAMBL(,@10)                                   0452
         L     RAMB,AMBLIX(,@10)                                   0452
*       RPARM1=ADDR(PLHIXSPL);      /* POINT TO PARM LIST    @ZA02289*/
         LA    RPARM1,PLHIXSPL(,RPLH)                              0453
*       RPARM1->IXSILN=ONE;         /* SET LEVEL AT 1        @ZA02289*/
         MVI   IXSILN(RPARM1),X'01'                                0454
*       PLHSSR=ON;                  /* SHOW SEQ SET          @ZA02289*/
         OI    PLHSSR(RPLH),B'00010000'                            0455
*       RPARM1=PLHSSRBA;            /* SET RBA               @ZA02289*/
         L     RPARM1,PLHSSRBA(,RPLH)                              0456
*I10:                                                              0457
*       DO;                         /* IDACALL(IDAGRB)               */
I10      DS    0H                                                  0458
*         CALL IDAGRB;              /* EXIT TO IDAGRB                */
         L     @15,@CV00975                                        0458
         BALR  @14,@15                                             0458
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I10;                    /* READ SEQ SET          @ZA02289*/
*       RAMB=AMBLDTA;               /* RESET AMB             @ZA02289*/
         L     @10,RPLDACB(,RRPL)                                  0464
         L     @10,ACBAMBL(,@10)                                   0464
         L     RAMB,AMBLDTA(,@10)                                  0464
*       IF RPLERREG^=ZERO THEN      /* ERROR                 @ZA02289*/
         CLI   RPLERREG(RRPL),0                                    0465
         BE    @RF00465                                            0465
*         DO;                       /* YES                   @ZA02289*/
*           DIWATV=ZERO;            /* RELEASE DIWA          @ZA02289*/
         L     @10,AMBIWA(,RAMB)                                   0467
         MVI   DIWATV(@10),X'00'                                   0467
*           GEN(IDARST14);          /* POINT TO CALLER       @ZA02289*/
         IDARST14
*           GEN(IDARST14);          /* CALLERS CALLER        @ZA02289*/
         IDARST14
*           RETURN;                 /* OUT                   @ZA02289*/
@EL00002 DS    0H                                                  0470
@EF00002 DS    0H                                                  0470
@ER00002 BR    @14                                                 0470
*         END;                      /*                       @ZA02289*/
*     END;                          /*                       @ZA02289*/
@RF00465 DS    0H                                                  0473
*   IF PLHARDB=ZERO THEN            /* IF NO ARDB IN         @ZA02289*/
@RF00450 L     @10,PLHARDB(,RPLH)                                  0473
         LTR   @10,@10                                             0473
         BNZ   @RF00473                                            0473
*     PLHARDB=AMDPARDB;             /* PLH, SET ONE          @ZA02289*/
         L     @10,AMBDSB(,RAMB)                                   0474
         L     @10,AMDPARDB(,@10)                                  0474
         ST    @10,PLHARDB(,RPLH)                                  0474
*   IF AMDRANGE=ON THEN             /* NEED KR CHECK         @ZA02289*/
@RF00473 L     @10,AMBDSB(,RAMB)                                   0475
         TM    AMDRANGE(@10),B'00000100'                           0475
         BNO   @RF00475                                            0475
*     DO;                           /* YES                   @ZA02289*/
*       RWORK1=RPLAREA+AMDRKP;      /* POINT TO KEY          @ZA02289*/
         LH    RWORK1,AMDRKP(,@10)                                 0477
         AL    RWORK1,RPLAREA(,RRPL)                               0477
*       RFY                                                        0478
*         RWORK2 RSTD;              /*                       @ZA02289*/
*       RWORK2=AMDKEYLN;            /* GET KEY LENGTH        @ZA02289*/
         LH    RWORK2,AMDKEYLN(,@10)                               0479
*I11:                                                              0480
*       DO;                         /* IDACALL(IDACHKKR)             */
I11      DS    0H                                                  0481
*         CALL IDACHKKR;            /* EXIT TO IDACHKKR              */
         L     @15,@CV00973                                        0481
         BALR  @14,@15                                             0481
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I11;                    /* GO CHECK              @ZA02289*/
*       RFY                                                        0487
*         RWORK2 UNRSTD;            /*                       @ZA02289*/
*       IF RPLERREG^=ZERO THEN      /* ERROR ON KR           @ZA02289*/
         CLI   RPLERREG(RRPL),0                                    0488
         BE    @RF00488                                            0488
*         DO;                       /* YES                   @ZA02289*/
*           DIWATV=ZERO;            /* RELEASE DIWA          @ZA02289*/
         L     @10,AMBIWA(,RAMB)                                   0490
         MVI   DIWATV(@10),X'00'                                   0490
*           GEN(IDARST14);          /* R14 TO CALLER         @ZA02289*/
         IDARST14
*           GEN(IDARST14);          /* R14 TO CALLERS CALLER @ZA02289*/
         IDARST14
*           RETURN;                 /* LEAVE NOW             @ZA02289*/
         B     @EL00002                                            0493
*         END;                      /*                       @ZA02289*/
*     END;                          /*                       @ZA02289*/
@RF00488 DS    0H                                                  0496
*I12:                                                              0496
*   DO;                             /* IDACALL(IDA019RE)             */
@RF00475 DS    0H                                                  0496
I12      DS    0H                                                  0497
*     CALL IDA019RE;                /* EXIT TO IDA019RE              */
         L     @15,@CV00971                                        0497
         BALR  @14,@15                                             0497
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I12;                        /* SPLIT CI              @ZA02289*/
*   DIWATV=ZERO;                    /* RELEASE DIWA          @ZA02289*/
         L     @10,AMBIWA(,RAMB)                                   0503
         MVI   DIWATV(@10),X'00'                                   0503
*   GEN(BR    @00);                 /* ASSURE UPDATE         @ZA02289*/
         BR    @00
*   GEN(IDARST14);                  /* R14 TO CALLER         @ZA02289*/
         IDARST14
*   IF RPLERREG^=ZERO THEN          /* ERROR                 @ZA02289*/
         CLI   RPLERREG(RRPL),0                                    0506
         BE    @RF00506                                            0506
*     DO;                           /* YES                   @ZA02289*/
*       GEN(IDARST14);              /* R14 TO CALLERS CALLER @ZA02289*/
         IDARST14
*       RETURN;                     /* LEAVE NOW             @ZA02289*/
         B     @EL00002                                            0509
*     END;                          /*                       @ZA02289*/
*   END SPLITCI;                    /*                       @ZA02289*/
         B     @EL00002                                            0511
*   GEN;                                                           0512
GETRDF   ICM   RPARM1,@00,@00(RWORK2)      /*                        */
PUTRDF   STCM  RPARM1,@00,@00(RWORK3)      /*                        */
*   GEN(IDAPATCH);                  /* ESTABLISH PATCH SPACE         */
         IDAPATCH
*   END IDA019RL                                                   0514
*                                                                  0514
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDACIDF )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IDADIWA )                                       */
*/*%INCLUDE SYSLIB  (LCGPLSSW)                                       */
*/*%INCLUDE SYSLIB  (IDAIXSPL)                                       */
*/*%INCLUDE SYSLIB  (IDARDF  )                                       */
*                                                                  0514
*       ;                                                          0514
         B     @EL00001                                            0514
@DATA    DS    0H
@SC01036 CLC   AMDATA(0,@15),PLHKEY(@14)
@DATD    DSECT
         DS    0F
IDA019RL CSECT
         DS    0F
@CF00053 DC    F'1'
@CH00053 EQU   @CF00053+2
@CF00146 DC    F'2'
@CH00146 EQU   @CF00146+2
@CF00159 DC    F'3'
@CF00067 DC    F'4'
@CF00221 DC    F'6'
@CF00199 DC    F'7'
@CF00224 DC    F'9'
@DATD    DSECT
         DS    0D
IDA019RL CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00968 DC    V(IDATJXIT)
@CV00969 DC    V(IDA019RM)
@CV00970 DC    V(IDA019RS)
@CV00971 DC    V(IDA019RE)
@CV00972 DC    V(IDADRQ)
@CV00973 DC    V(IDACHKKR)
@CV00974 DC    V(IDAFREEB)
@CV00975 DC    V(IDAGRB)
         DS    0D
HWORD4   DC    H'4'
@DATD    DSECT
*                                                          /*@X04SVLC*/
RDFCTNUA EQU   X'40'                    COMPLEX RDF INDICATOR
RDFCTNUX EQU   X'FF'-RDFCTNUA           RESET COMPLEX MASK
RDFREPLA EQU   X'08'                    COUNT RDF INDICATOR
RDFREPLX EQU   X'FF'-RDFREPLA           RESET COUNT MASK
RDFEMPTI EQU   X'04'                    EMPTY RECORD       /*@X04SVLC*/
RDFLEN   EQU   3                        LENGTH OF RDF
RDFLLOFF EQU   1                        OFFSET WITHIN RDF TO LL
RDFSGLR  EQU   X'00'                   MASK FOR SINGLE RECORD RDF
RDFGRP   EQU   RDFCTNUA                 MASK FOR LL RDF OF A GROUP RDF
RDFCNT   EQU   RDFREPLA                 MASK FOR COUNT RDF
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019RL CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RWORK0   EQU   @00
RRPL     EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
RPARM1   EQU   @12
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLREQ   EQU   RPLIDWD+2
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHSSR   EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHEFLGS EQU   IDAPLH+4
PLHNOADV EQU   PLHEFLGS
PLHFLG3  EQU   IDAPLH+6
PLHBWD   EQU   PLHFLG3
PLHAFLGS EQU   IDAPLH+7
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJRNLL EQU   IDAPLH+32
PLHJNRBA EQU   IDAPLH+36
PLHJCODE EQU   IDAPLH+40
PLHRSCS  EQU   IDAPLH+43
PLHARDB  EQU   IDAPLH+44
PLHLRECL EQU   IDAPLH+48
PLHDBUFC EQU   IDAPLH+52
PLHRECP  EQU   IDAPLH+60
PLHFSP   EQU   IDAPLH+64
PLHRDFP  EQU   IDAPLH+68
PLHRDFC  EQU   IDAPLH+72
PLHDIOB  EQU   IDAPLH+76
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHIBUFC EQU   IDAPLH+188
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHKEYPT EQU   IDAPLH+248
PLHTMRPL EQU   IDAPLH+265
PLHEND   EQU   IDAPLH+280
PLHKEY   EQU   0
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCDDDD EQU   IDABUFC+8
BUFCORBA EQU   IDABUFC+12
BUFCBAD  EQU   IDABUFC+20
BUFCINV  EQU   IDABUFC+28
BUFXORBA EQU   IDABUFC+44
IDACIDF  EQU   0
CIDFOSET EQU   IDACIDF
CIDFLL   EQU   IDACIDF+2
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDDST   EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDNEST  EQU   IDAAMDSB+4
AMDRKP   EQU   IDAAMDSB+6
AMDKEYLN EQU   IDAAMDSB+8
AMDCINV  EQU   IDAAMDSB+20
AMDLRECL EQU   IDAAMDSB+24
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDPARDB EQU   IDAAMDSB+36
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDPRF   EQU   IDAARDB+28
IDAAMB   EQU   0
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBJRN   EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBLSR   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
IDADIWA  EQU   0
DIWATV   EQU   IDADIWA+1
DIWFLG1  EQU   IDADIWA+4
DIWFLG2  EQU   IDADIWA+5
DIWPLH   EQU   IDADIWA+16
DIWSAVE  EQU   IDADIWA+28
IDAIXSPL EQU   0
IXSILN   EQU   IDAIXSPL+13
IXSBFLG  EQU   IDAIXSPL+17
IDARDF   EQU   0
RDFRBYTE EQU   IDARDF
RDFCTNU  EQU   RDFRBYTE
RDFSEG   EQU   RDFRBYTE
RDFREPL  EQU   RDFRBYTE
RDFLL    EQU   IDARDF+1
IDADATA  EQU   0
AMDATA   EQU   IDADATA
IDAKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00030 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
KEY      EQU   IDAKEY
RDFEMPTY EQU   RDFRBYTE
RDF1ST   EQU   RDFSEG
RDFNOT1  EQU   RDFSEG
RDFTYPE  EQU   RDFRBYTE
IXSLEP   EQU   IDAIXSPL+28
IXSSEP   EQU   IDAIXSPL+24
IXSHEP   EQU   IDAIXSPL+20
IXSPEC   EQU   IDAIXSPL+19
IXSEKON  EQU   IDAIXSPL+18
@NM00061 EQU   IXSBFLG
IXSLELV  EQU   IXSBFLG
IXSSSRH  EQU   IXSBFLG
IXSNOSR  EQU   IDAIXSPL+16
IXSKLEN  EQU   IDAIXSPL+14
IXSTLN   EQU   IDAIXSPL+12
IXSARG   EQU   IDAIXSPL+8
IXSBUFC  EQU   IDAIXSPL+4
IXSSTRBA EQU   IDAIXSPL
@NM00060 EQU   IDADIWA+92
@NM00059 EQU   IDADIWA+88
@NM00058 EQU   IDADIWA+84
@NM00057 EQU   IDADIWA+80
@NM00056 EQU   IDADIWA+76
@NM00055 EQU   IDADIWA+72
@NM00054 EQU   IDADIWA+68
@NM00053 EQU   IDADIWA+64
@NM00052 EQU   IDADIWA+60
@NM00051 EQU   IDADIWA+56
DIWINRBA EQU   IDADIWA+52
DIWRKCT  EQU   IDADIWA+48
DIWSAVE5 EQU   DIWSAVE+16
DIWSAVE4 EQU   DIWSAVE+12
DIWSAVE3 EQU   DIWSAVE+8
DIWSAVE2 EQU   DIWSAVE+4
DIWSAVE1 EQU   DIWSAVE
DIWSPLTP EQU   IDADIWA+24
DIWBUFC  EQU   IDADIWA+20
DIWHRBA  EQU   IDADIWA+12
DIWLRBA  EQU   IDADIWA+8
@NM00050 EQU   IDADIWA+6
DIWFSPF  EQU   DIWFLG2
DIW1ST   EQU   DIWFLG1
DIWNOT1  EQU   DIWFLG1
DIWSHIFT EQU   DIWFLG1
DIWGSPC  EQU   DIWFLG1
DIWEOKR  EQU   DIWFLG1
DIWPFERR EQU   DIWFLG1
DIWCISPL EQU   DIWFLG1
DIWCAS   EQU   DIWFLG1
DIWLEN   EQU   IDADIWA+2
DIWID    EQU   IDADIWA
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00049 EQU   AMBCSWD1+1
@NM00048 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
@NM00047 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00046 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00045 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00044 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00043 EQU   AMBINFL
@NM00042 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00041 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00040 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00039 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00038 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
ARDKEYS  EQU   IDAARDB+29
@NM00037 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDERBA  EQU   IDAARDB+16
ARDHRBA  EQU   IDAARDB+12
ARDHKRBA EQU   IDAARDB+8
ARDNPTR  EQU   IDAARDB+4
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDEOD   EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00036 EQU   IDAAMDSB+41
@NM00035 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
@NM00034 EQU   CIDFLL
CIDFBUSY EQU   CIDFLL
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCHAIN EQU   IDABUFC+48
BUFXIRBA EQU   IDABUFC+40
BUFCNXT2 EQU   IDABUFC+37
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCCPA  EQU   IDABUFC+16
BUFCAMB  EQU   BUFCPLH
@NM00033 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00032 EQU   IDABUFDR+16
BUFDBUFC EQU   IDABUFDR+12
@NM00031 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00029 EQU   IDAPLH+266
@NM00028 EQU   PLHTMRPL
PLHTMIOB EQU   PLHTMRPL
PLHTMINX EQU   PLHTMRPL
PLHTMDTA EQU   PLHTMRPL
PLHTMDIW EQU   PLHTMRPL
PLHTMBUF EQU   PLHTMRPL
PLHTERM  EQU   PLHTMRPL
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00027 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHRBUFC EQU   IDAPLH+192
PLHNRBA  EQU   IDAPLH+184
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00026 EQU   IDAPLH+172
@NM00025 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHAMB   EQU   IDAPLH+108
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHNBUFC EQU   IDAPLH+56
@NM00024 EQU   PLHRSCS
PLHDBPER EQU   PLHRSCS
PLHDSERR EQU   PLHRSCS
PLHASYER EQU   PLHRSCS
@NM00023 EQU   PLHRSCS
PLHBUFHD EQU   PLHRSCS
PLHINEOV EQU   PLHRSCS
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00022 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
@NM00021 EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHASKBF EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00020 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00019 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00018 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00017 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00016 EQU   IDAAMBL+31
@NM00015 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00014 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00013 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00012 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00011 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00010 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00009 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00008 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00007 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00006 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00005 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00004 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00003 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00002 EQU   RPLRBAR+3
@NM00001 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00176 EQU   ERSE
@RC00297 EQU   @RC00294
@RF00308 EQU   @RC00294
@RC00310 EQU   @RC00294
@RC00313 EQU   @RC00294
@RF00389 EQU   @RC00214
@RF00506 EQU   @EL00002
@RC00317 EQU   @RC00313
@ENDDATA EQU   *
         END   IDA019RL,(C'PLS1841',0701,78188)
