         TITLE 'IDA019R8--VSAM CONTROL INTERVAL ACCESSING              *
                        '
IDA019R8 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA019R8  78.172'                                 0001
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         IDASVR14
*/*  VERIFY THE AMBL FIRST                                   @X04SVMR*/
*/*  VERIFY THAT THE PASSWORD ALLOWS CINV ACCESS             @X04SVMR*/
*                                                                  0164
*   IF AMBLCINV=OFF THEN            /* IF NOT, EXIT WITH     @X04SVMR*/
         TM    AMBLCINV(RPARM1),B'01000000'                        0164
         BNZ   @RF00164                                            0164
*     DO;                           /* AN ERROR.             @X04SVMR*/
*       RPLERRCD=RPLINACC;          /* INVALID ACCESS        @X04SVMR*/
         MVI   RPLERRCD(RRPL),X'44'                                0166
*       GO TO ERRORX;               /* LOGIC ERROR           @X04SVMR*/
         B     ERRORX                                              0167
*     END;                          /* END OF INV PASSWD     @X04SVMR*/
*   RFY                                                            0169
*     IDAAMBL BASED(ACBAMBL);       /* RESET AMBL BASE       @X04SVMR*/
@RF00164 DS    0H                                                  0170
*/*  PROHIBIT BACKWARD MODE PROCESSING WITH CNV.             @X04SVMR*/
*                                                                  0170
*   IF RPLBWD=ON THEN               /* TEST FOR BWD          @X04SVMR*/
         TM    RPLBWD(RRPL),B'00010000'                            0170
         BNO   @RF00170                                            0170
*     DO;                                                          0171
*       RPLERRCD=RPLINVP;           /* SET INVALID BWD       @X04SVMR*/
         MVI   RPLERRCD(RRPL),X'68'                                0172
*       GO TO ERRORX;               /* LOGICAL ERROR         @X04SVMR*/
         B     ERRORX                                              0173
*     END;                          /* END OF INVAL BWD      @X04SVMR*/
*   IF RPLREQ=RPLGETIX×RPLREQ=RPLPUTIX THEN/* GETIX/PUTIX.   @X04SVRQ*/
@RF00170 CLI   RPLREQ(RRPL),11                                     0175
         BE    @RT00175                                            0175
         CLI   RPLREQ(RRPL),12                                     0175
         BNE   @RF00175                                            0175
@RT00175 DS    0H                                                  0176
*     DO;                           /*                       @X04SVRQ*/
*       IF AMBLNUM=ONE THEN         /* NOT OPENED AS KSDS.   @X04SVRQ*/
         L     @10,RPLDACB(,RRPL)                                  0177
         L     @10,ACBAMBL(,@10)                                   0177
         CLC   AMBLNUM(2,@10),@CH00047                             0177
         BNE   @RF00177                                            0177
*         DO;                       /*                       @X04SVRQ*/
*           RPLERRCD=RPLINKEY;      /* INVALID REQ ESDS/RRDS @X04SVRQ*/
         MVI   RPLERRCD(RRPL),X'48'                                0179
*           GOTO ERRORX;            /* ERROR EXIT.           @X04SVRQ*/
         B     ERRORX                                              0180
*         END;                      /*                       @X04SVRQ*/
*       RAMB=AMBLIX;                /* POINT TO INDEX AMB.   @X04SVRQ*/
@RF00177 L     @10,RPLDACB(,RRPL)                                  0182
         L     @10,ACBAMBL(,@10)                                   0182
         L     RAMB,AMBLIX(,@10)                                   0182
*       RBUFC=PLHIBUFC;             /* POINT TO INDEX BUFC.  @X04SVRQ*/
         L     RBUFC,PLHIBUFC(,RPLH)                               0183
*     END;                          /* END GETIX/PUTIX.      @X04SVRQ*/
*   ELSE                            /* NOT GETIX/PUTIX.      @X04SVRQ*/
*     DO;                           /*                       @X04SVRQ*/
         B     @RC00175                                            0185
@RF00175 DS    0H                                                  0186
*       RBUFC=PLHDBUFC;             /* POINT TO CURRENT BUFC.        */
         L     RBUFC,PLHDBUFC(,RPLH)                               0186
*/*  INITIALIZE THE VSAM BUFC WITH THE USER BUFFER ADDRESS IF USER 0187
*    BUFFERING WAS REQUESTED.                                        */
*                                                                  0187
*       IF AMBUBF=ON                /* IF USER BUFFERING, SET        */
*         THEN                      /* BUFFER ADDRESS                */
         TM    AMBUBF(RAMB),B'00000100'                            0187
         BNO   @RF00187                                            0187
*         DO;                       /*                               */
*           IF RPLLOC=ON THEN       /* IF LOCATE MODE SET,           */
         TM    RPLLOC(RRPL),B'10000000'                            0189
         BO    @RT00189                                            0189
*             GO TO INVLOC;         /* FLAG AS INVALID               */
*           BUFCVAL=OFF;            /* INVALIDATE BFR        @XA03112*/
         NI    BUFCVAL(RBUFC),B'11111011'                          0191
*           BUFCBAD=RPLAREA;        /* SET BFR TO THAT OF USER       */
         L     @10,RPLAREA(,RRPL)                                  0192
         ST    @10,BUFCBAD(,RBUFC)                                 0192
*         END;                      /* END OF UBF CODE               */
*     END;                          /*                       @X04SVRQ*/
@RF00187 DS    0H                                                  0195
*/*  INVALIDATE THE KEYED POSITION TO PREVENT PLACEHOLDER USE      0195
*    FOR KEYED RETRIEVAL WITHOUT A KEYED POINT.                      */
*                                                                  0195
*   PLHKEYMD=OFF;                   /* SET KEY POSITION INVAL.       */
@RC00175 NI    PLHKEYMD(RPLH),B'11011111'                          0195
*/*   VALIDATE LOAD REQUESTS                                         */
*                                                                  0196
*   IF AMBCREAT=ON&                 /* IF CREATE MODE, ALLOW         */
*       RPLREQ^=RPLVERIF&           /* (EXCLUDE VERIFY)              */
*       (RPLREQ^=RPLPUT×            /* ONLY (SKP) SEQ. PUT           */
*       RPLDIR=ON)                  /* REQUESTS. SET AN INV-         */
*     THEN                          /* VALID LOAD REQUEST            */
         TM    AMBCREAT(RAMB),B'10000000'                          0196
         BNO   @RF00196                                            0196
         CLI   RPLREQ(RRPL),6                                      0196
         BE    @RF00196                                            0196
         CLI   RPLREQ(RRPL),1                                      0196
         BNE   @RT00196                                            0196
         TM    RPLDIR(RRPL),B'01000000'                            0196
         BNO   @RF00196                                            0196
@RT00196 DS    0H                                                  0197
*     DO;                           /* OTHERWISE.                    */
*       RPLERRCD=RPLINLRQ;          /* SET INVALID LOAD REQ          */
         MVI   RPLERRCD(RRPL),X'74'                                0198
*       GO TO ERRORX;               /* SET LOGIC ERROR & EXIT        */
         B     ERRORX                                              0199
*     END;                          /* END OF INVALID LOAD REQ       */
*/*  FIRST CHECK TO SEE WHAT TYPE OF REQUEST--GET, PUT, OR POINT.    */
*                                                                  0201
*   IF RPLREQ=RPLGET×RPLREQ=RPLGETIX/* GET OR GETIX.         @X04SVRQ*/
*     THEN                          /* IF SO, COME HERE              */
@RF00196 CLI   RPLREQ(RRPL),0                                      0201
         BE    @RT00201                                            0201
         CLI   RPLREQ(RRPL),11                                     0201
         BNE   @RF00201                                            0201
@RT00201 DS    0H                                                  0202
*     DO;                                                          0202
*                                                                  0202
*       /*************************************************************/
*       /*                                                           */
*       /* ******************** GET REQUEST ********************     */
*       /* VALIDATE THE LENGTH OF THE AREA PROVIDED BY THE USER      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0203
*       IF(RPLLOC=OFF&              /* IF MOVE MODE, AREA MUST       */
*           RPLBUFL<AMDCINV)        /* BE BIG ENOUGH.        @X04SVMR*/
*         THEN                      /* IF NOT, SET ERROR             */
         TM    RPLLOC(RRPL),B'10000000'                            0203
         BNZ   @RF00203                                            0203
         L     @10,AMBDSB(,RAMB)                                   0203
         L     @05,RPLBUFL(,RRPL)                                  0203
         C     @05,AMDCINV(,@10)                                   0203
         BNL   @RF00203                                            0203
*         DO;                                                      0204
*           RPLERRCD=RPLINBUF;      /* SET SHORT BUFL CODE           */
         MVI   RPLERRCD(RRPL),X'2C'                                0205
*           IF RPLDIR=ON THEN       /* FOR DIRECT REQUESTS,          */
         TM    RPLDIR(RRPL),B'01000000'                            0206
         BNO   @RF00206                                            0206
*             PLHINVAL=ON;          /* INVALIDATE THE PLH.           */
         OI    PLHINVAL(RPLH),B'00000010'                          0207
*ERRORX:                                                           0208
*           RPLERREG='08'X;         /* GET LOGICAL ERROR             */
@RF00206 DS    0H                                                  0208
ERRORX   MVI   RPLERREG(RRPL),X'08'                                0208
*           GO TO R8EXIT;           /* RETURN TO CALLER              */
         B     R8EXIT                                              0209
*         END;                      /* END, SHORT BFR CODE           */
*                                                                  0210
*       /*************************************************************/
*       /*                                                           */
*       /* FOR DIRECT GET REQUESTS, REMOVE ANY BUFCS ADDED FROM PRIOR*/
*       /* SEQUENTIAL REQUESTS (PLH VALID), VALIDATE THE             */
*       /* USER-SUPPLIED RBA, AND POINT THE PLACEHOLDER TO THE       */
*       /* DESIRED RBA.                                              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0211
*       IF RPLDIR=ON                /* SEE IF DIRECT REQUEST         */
*         THEN                      /* IF SO, COME HERE              */
@RF00203 TM    RPLDIR(RRPL),B'01000000'                            0211
         BNO   @RF00211                                            0211
*         DO;                                                      0212
*           IF RBA//AMDCINV^=ZERO THEN/* IF NOT ON CI BDY    @X04SVMR*/
         L     @10,RPLARG(,RRPL)                                   0213
         L     @05,AMBDSB(,RAMB)                                   0213
         L     @07,RBA(,@10)                                       0213
         SLR   @06,@06                                             0213
         D     @06,AMDCINV(,@05)                                   0213
         LTR   @06,@06                                             0213
         BZ    @RF00213                                            0213
*             DO;                   /* SET ERROR             @X04SVMR*/
*BADBDY:                                                           0215
*               PLHINVAL=ON;        /* CAUSE PLH RELEASE     @X04SVMR*/
BADBDY   OI    PLHINVAL(RPLH),B'00000010'                          0215
*               RPLERRCD=RPLINRBA;  /* SET INVALID RBA       @X04SVMR*/
         MVI   RPLERRCD(RRPL),X'20'                                0216
*               GO TO ERRORX;       /* TAKE ERROR EXIT       @X04SVMR*/
         B     ERRORX                                              0217
*             END;                  /* END OF BAD BDY        @X04SVMR*/
*           PLHCRBA=RBA;            /* GET USER RBA AS CURRENT       */
@RF00213 L     @10,RPLARG(,RRPL)                                   0219
         L     @10,RBA(,@10)                                       0219
         ST    @10,PLHCRBA(,RPLH)                                  0219
*           PLHNOADV=OFF;           /* RESET POINT BIT               */
*           PLHSKPER=OFF;           /* RESET ERROR SKIP              */
*           PLHEODX=OFF;            /* RESET END OF DATA             */
*           PLHDSCAN=OFF;           /* RESET DATA SCAN               */
*           PLHINVAL=OFF;           /* MAKE PLH VALID                */
*           PLH1ST=ON;              /* INDICATE FIRST TIME           */
         OI    PLH1ST(RPLH),B'01000000'                            0225
         NI    PLHNOADV(RPLH),B'11010000'                          0225
*         END;                      /* END, DIRECT ONLY CODE         */
*       ELSE                        /* NOT DIRECT REQ.       @X04SVRQ*/
*         IF RPLREQ=RPLGETIX THEN   /* GETIX REQUEST.        @X04SVRQ*/
         B     @RC00211                                            0227
@RF00211 CLI   RPLREQ(RRPL),11                                     0227
         BNE   @RF00227                                            0227
*           DO;                     /*                       @X04SVRQ*/
*             RPLERRCD=RPLINVP;     /* SET INVALID RPL OPT.  @X04SVRQ*/
         MVI   RPLERRCD(RRPL),X'68'                                0229
*             PLHINVAL=ON;          /* INVALIDATE PLH.       @X04SVRQ*/
         OI    PLHINVAL(RPLH),B'00000010'                          0230
*             GOTO ERRORX;          /* ERROR EXIT.           @X04SVRQ*/
         B     ERRORX                                              0231
*           END;                    /*                       @X04SVRQ*/
*                                                                  0232
*       /*************************************************************/
*       /*                                                           */
*       /* FOR ALL GETS, IF UPDATE IS SPECIFIED PUT STRING INTO READ */
*       /* EXCLUSIVE MODE IN ANTICIPATION OF PUTS FOR UPDATE.        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0233
*       IF RPLUPD=ON                /* SEE IF GET UPD                */
*         THEN                                                     0233
@RF00227 DS    0H                                                  0233
@RC00211 TM    RPLUPD(RRPL),B'00000010'                            0233
         BNO   @RF00233                                            0233
*         PLHRDEXC=ON;              /* IF SO, NEED EXCL CNTL         */
         OI    PLHRDEXC(RPLH),B'00001000'                          0234
*       ELSE                                                       0235
*         PLHRDEXC=OFF;             /* EXCL CNTL NOT NEEDED          */
         B     @RC00233                                            0235
@RF00233 NI    PLHRDEXC(RPLH),B'11110111'                          0235
*       PLHUPD=OFF;                 /* NO GOOD GET UPD YET           */
@RC00233 NI    PLHUPD(RPLH),B'01111111'                            0236
*       IF PLHEFLGS^=C2ZERO         /* SEE IF EXCEPTION              */
*         THEN                      /* YES, HANDLE EXCEPTION         */
         CLC   PLHEFLGS(2,RPLH),C2ZERO                             0237
         BE    @RF00237                                            0237
*         DO;                                                      0238
*                                                                  0238
*           /*********************************************************/
*           /*                                                       */
*           /* EXCEPTION PROCESSING--IF PLACEHOLDER IS INVALID OR IF */
*           /* END-OF-DATA HAS BEEN REACHED, RETURN WITH AN ERROR    */
*           /* CODE SET. IF THIS IS THE FIRST REQUEST AFTER OPEN OR  */
*           /* POINT OR IF THIS IS A DIRECT REQUEST, THE FIRST       */
*           /* CONTROL INTERVAL MUST BE OBTAINED VIA THE IDAGRB      */
*           /* INTERFACE TO BUFFER MANAGER. IF THE PLACEHOLDER       */
*           /* ENCOUNTERED AN ERROR PREV- IOUSLY, IT MUST SKIP ACROSS*/
*           /* ERROR CONTROL INTERVALS UNTIL A GOOD CONTROL INTERVAL */
*           /* IS FOUND OR END-OF-DATA OCCURS.                       */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0239
*           IF PLH1ST=ON            /* SEE IF FIRST TIME             */
*             THEN                  /* YES, COME HERE                */
         TM    PLH1ST(RPLH),B'01000000'                            0239
         BNO   @RF00239                                            0239
*             DO;                                                  0240
*                                                                  0240
*               /*****************************************************/
*               /*                                                   */
*               /* IF FIRST SEQUENTIAL REQUEST, ADD BFRS     @X04SVMR*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0241
*               IF RPLSEQ=ON THEN                                  0241
         TM    RPLSEQ(RRPL),B'00100000'                            0241
         BNO   @RF00241                                            0241
*                 DO;                                              0242
*                   PLHASKBF=ON;    /* SET ASKBF FLAG        @X04SVMR*/
         OI    PLHASKBF(RPLH),B'00100000'                          0243
*                   RPARM1=ZERO;    /* REQUEST MAXIMUM@X04SVMR       */
         SLR   RPARM1,RPARM1                                       0244
*I01:                                                              0245
*                   DO;             /* IDACALL(IDAABF)               */
I01      DS    0H                                                  0246
*                     CALL IDAABF;  /* EXIT TO IDAABF                */
         L     @15,@CV01045                                        0246
         BALR  @14,@15                                             0246
*                     GEN(BALR @11,0);/* LOAD ADDR OF REENTRY        */
         BALR @11,0
*                     GEN(USING *,@11);/* ESTABLISH ADDRESSING       */
         USING *,@11
*                     GEN(L     @11,=A(@PSTART));/* RELOAD BASE      */
         L     @11,=A(@PSTART)
*                     GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING */
         USING @PSTART,@11
*                   END I01;        /* ADD BUFFERS           @X04SVMR*/
*                 END;              /* END OF ASK BFR        @X04SVMR*/
*               PLH1ST=OFF;         /* SET OFF FIRST TIME BIT        */
@RF00241 NI    PLH1ST(RPLH),B'10111111'                            0253
*               RPARM1=PLHCRBA;     /* GET DESIRED RBA               */
         L     RPARM1,PLHCRBA(,RPLH)                               0254
*               IF RPLREQ=RPLGETIX THEN/* GETIX REQUEST.     @X04SVRQ*/
         CLI   RPLREQ(RRPL),11                                     0255
         BNE   @RF00255                                            0255
*                 DO;               /* YES                   @X04SVES*/
*                   RFY                                            0257
*                     R14 RSTD;     /*                       @X04SVES*/
*                   R14=ADDR(PLHIXSPL);/* POINT TO INDEX SEARCH PARM
*                                      LIST                  @X04SVES*/
         LA    R14,PLHIXSPL(,RPLH)                                 0258
*                   R14->IXSILN=ZERO;/* CLEAR LEVEL          @X04SVES*/
         MVI   IXSILN(R14),X'00'                                   0259
*                   PLHSSR=ON;      /* SET SEQ SET REQ.      @X04SVRQ*/
         OI    PLHSSR(RPLH),B'00010000'                            0260
*                   RFY                                            0261
*                     R14 UNRSTD;   /*                       @X04SVES*/
*                 END;              /*                       @X04SVES*/
*                                                                  0262
*               /*****************************************************/
*               /*                                                   */
*               /* GET DESIRED RBA INTO CORE                         */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0263
*I02:                                                              0263
*               DO;                 /* IDACALL(IDAGRB)               */
@RF00255 DS    0H                                                  0263
I02      DS    0H                                                  0264
*                 CALL IDAGRB;      /* EXIT TO IDAGRB                */
         L     @15,@CV01047                                        0264
         BALR  @14,@15                                             0264
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I02;                                           0269
*             END;                  /* END, FIRST TIME CODE          */
*           ELSE                    /* NOT 1ST TIME.                 */
*             IF PLHNOADV=ON THEN   /* PRIOR POINT           @X04SVMR*/
         B     @RC00239                                            0271
@RF00239 TM    PLHNOADV(RPLH),B'00001000'                          0271
         BNO   @RF00271                                            0271
*               PLHNOADV=OFF;       /* RESET FLAG            @X04SVMR*/
         NI    PLHNOADV(RPLH),B'11110111'                          0272
*             ELSE                  /* NOADV OFF             @X04SVMR*/
*               IF PLHINVAL=ON      /* CHECK PLH VALIDITY            */
*                 THEN              /* IF INVALID, SET ERROR         */
         B     @RC00271                                            0273
@RF00271 TM    PLHINVAL(RPLH),B'00000010'                          0273
         BNO   @RF00273                                            0273
*                 DO;                                              0274
*                   RPLERRCD=RPLNOPTR;/* UNKNOWN POSITION FOR        */
         MVI   RPLERRCD(RRPL),X'58'                                0275
*                   GO TO ERRORX;   /* GET SEQUENTIAL REQUEST        */
         B     ERRORX                                              0276
*                 END;              /* END OF INVALID PLH            */
*               ELSE                /* PLH IS VALID.                 */
*                 IF PLHEODX=ON     /* SEE IF END OF DATA            */
*                   THEN            /* IF SO, SET ERROR              */
@RF00273 TM    PLHEODX(RPLH),B'00000100'                           0278
         BNO   @RF00278                                            0278
*                   DO;                                            0279
*                     RPLERRCD=RPLEODER;/* REQUEST AFTER EOD         */
         MVI   RPLERRCD(RRPL),X'04'                                0280
*                     GO TO ERRORX; /* SET ERROR AND EXIT            */
         B     ERRORX                                              0281
*                   END;            /* END, EOD CODE                 */
*                 ELSE              /* NOT FIRST TIME THROUGH        */
*                   IF PLHSKPER=ON  /* POSITION IF SKIPPING          */
*                     THEN          /* ACROSS ERROR CINV.            */
@RF00278 TM    PLHSKPER(RPLH),B'00100000'                          0283
         BNO   @RF00283                                            0283
*                     DO;                                          0284
*I03:                                                              0285
*                       DO;         /* IDACALL(IDAFREEB)             */
I03      DS    0H                                                  0286
*                         CALL IDAFREEB;/* EXIT TO IDAFREEB          */
         L     @15,@CV01053                                        0286
         BALR  @14,@15                                             0286
*                         GEN(BALR @11,0);/* LOAD ADDR OF REENTRY    */
         BALR @11,0
*                         GEN(USING *,@11);/* ESTABLISH ADDRESSING   */
         USING *,@11
*                         GEN(L     @11,=A(@PSTART));/* RELOAD BASE  */
         L     @11,=A(@PSTART)
*                         GEN(USING @PSTART,@11);/* ESTABLISH      0290
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                       END I03;    /* FREE OLD BFR          @X04SVLP*/
*I04:                                                              0292
*                       DO;         /* IDACALL(IDAGNXT)              */
I04      DS    0H                                                  0293
*                         CALL IDAGNXT;/* EXIT TO IDAGNXT            */
         L     @15,@CV01044                                        0293
         BALR  @14,@15                                             0293
*                         GEN(BALR @11,0);/* LOAD ADDR OF REENTRY    */
         BALR @11,0
*                         GEN(USING *,@11);/* ESTABLISH ADDRESSING   */
         USING *,@11
*                         GEN(L     @11,=A(@PSTART));/* RELOAD BASE  */
         L     @11,=A(@PSTART)
*                         GEN(USING @PSTART,@11);/* ESTABLISH      0297
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                       END I04;    /* GET NEXT RBA                  */
*                       IF RPLERREG^='0C'X THEN/* IF NO I/O ERROR,   */
         CLI   RPLERREG(RRPL),12                                   0299
         BE    @RF00299                                            0299
*                         PLHSKPER=OFF;/* STOP SKIPPING.             */
         NI    PLHSKPER(RPLH),B'11011111'                          0300
*                     END;          /* END OF SKIP CODE              */
*         END;                      /* END, EXCEPTION CODE           */
*                                                                  0302
*       /*************************************************************/
*       /*                                                           */
*       /* NORMAL PROCESSING--ADVANCE THE PLACEHOLDER TO THE NEXT    */
*       /* CONTROL INTERVAL IN PHYSICAL SEQUENCE.                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0303
*       ELSE                        /* HERE NO EXCEPT CODES          */
*         DO;                                                      0303
*                                                                  0303
         B     @RC00237                                            0303
@RF00237 DS    0H                                                  0304
*           /*********************************************************/
*           /*                                                       */
*           /* IF PLH DOES NOT HAVE MAXIMUM BUFFERS, TRY TO ADD SOME */
*           /* TO THE I/O CHAIN.                             @X04SVMR*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0304
*           IF PLHASKBF=ON THEN     /* TEST FOR MAX BFRS     @X04SVMR*/
         TM    PLHASKBF(RPLH),B'00100000'                          0304
         BNO   @RF00304                                            0304
*             DO;                                                  0305
*               RPARM1=ZERO;        /* REQUEST MAX BFRS      @X04SVMR*/
         SLR   RPARM1,RPARM1                                       0306
*I05:                                                              0307
*               DO;                 /* IDACALL(IDAABF)               */
I05      DS    0H                                                  0308
*                 CALL IDAABF;      /* EXIT TO IDAABF                */
         L     @15,@CV01045                                        0308
         BALR  @14,@15                                             0308
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I05;            /* ADD BUFFERS           @X04SVMR*/
*             END;                  /* END OF ADD BFRS       @X04SVMR*/
*                                                                  0314
*           /*********************************************************/
*           /*                                                       */
*           /* FREE OLD BUFFER                                       */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0315
*           RBUFC=PLHDBUFC;         /* POINT TO CUR BUFC     @X04SVRQ*/
@RF00304 L     RBUFC,PLHDBUFC(,RPLH)                               0315
*I06:                                                              0316
*           DO;                     /* IDACALL(IDAFREEB)             */
I06      DS    0H                                                  0317
*             CALL IDAFREEB;        /* EXIT TO IDAFREEB              */
         L     @15,@CV01053                                        0317
         BALR  @14,@15                                             0317
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I06;                /*                       @X04SVLP*/
*                                                                  0322
*           /*********************************************************/
*           /*                                                       */
*           /* GET NEXT NEW BUFFER                                   */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0323
*I07:                                                              0323
*           DO;                     /* IDACALL(IDAGNXT)              */
I07      DS    0H                                                  0324
*             CALL IDAGNXT;         /* EXIT TO IDAGNXT               */
         L     @15,@CV01044                                        0324
         BALR  @14,@15                                             0324
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I07;                                               0329
*         END;                      /* END--ADVANCE POSITION         */
*       IF RPLERREG^='00'X          /* CHECK FOR ERROR               */
*         THEN                      /* IF ANY, COME HERE             */
@RC00237 CLI   RPLERREG(RRPL),0                                    0331
         BE    @RF00331                                            0331
*         DO;                                                      0332
*           IF RPLERRCD=RPLEXCL THEN/* IF READ EXCL ERROR,           */
         CLI   RPLERRCD(RRPL),20                                   0333
         BNE   @RF00333                                            0333
*             DO;                   /* REMEMBER POSITION.    @ZA07544*/
*               PLHCRBA=RPARM1;     /* PASS BACK ERROR RBA   @ZA07544*/
         ST    RPARM1,PLHCRBA(,RPLH)                               0335
*               PLH1ST=ON;          /* PREVENT PLH ADVANCE.          */
         OI    PLH1ST(RPLH),B'01000000'                            0336
*             END;                  /* END EXCL CNTL ERROR   @ZA07544*/
*           IF RPLDIR=ON THEN       /* IF DIR REQ AND RD EXCL        */
@RF00333 TM    RPLDIR(RRPL),B'01000000'                            0338
         BNO   @RF00338                                            0338
*             PLHINVAL=ON;          /* OR I/O ERROR, DROP PLH.       */
         OI    PLHINVAL(RPLH),B'00000010'                          0339
*           GO TO R8EXIT;           /* RETURN TO CALLER              */
         B     R8EXIT                                              0340
*         END;                      /* END OF ERROR CHECK            */
*       ELSE                        /* HERE IF NO ERROR      @ZA07544*/
*         PLHCRBA=BUFCDDDD;         /* SET NEW CURRENT RBA   @ZA07544*/
@RF00331 L     @10,BUFCDDDD(,RBUFC)                                0342
         ST    @10,PLHCRBA(,RPLH)                                  0342
*/*  PASS THE RBA, LENGTH, AND RECORD OR RECORD POINTER TO THE USER. */
*                                                                  0343
*       RPLDDDD=PLHCRBA;            /* PUT RBA IN RPL                */
         ST    @10,RPLDDDD(,RRPL)                                  0343
*       RPLRLEN=AMDCINV;            /* PUT RECORD LEN IN RPL         */
         L     @10,AMBDSB(,RAMB)                                   0344
         L     @10,AMDCINV(,@10)                                   0344
         ST    @10,RPLRLEN(,RRPL)                                  0344
*       IF RPLLOC=ON THEN           /* IF LOCATE MODE,               */
         TM    RPLLOC(RRPL),B'10000000'                            0345
         BNO   @RF00345                                            0345
*         USERPTR=BUFCBAD;          /* SET POINTER                   */
         L     @10,RPLAREA(,RRPL)                                  0346
         MVC   USERPTR(4,@10),BUFCBAD(RBUFC)                       0346
*       ELSE                        /* MOVE MODE.            @X04SVRQ*/
*         IF AMBUBF=OFF THEN        /* NOT UBF.              @X04SVRQ*/
         B     @RC00345                                            0347
@RF00345 TM    AMBUBF(RAMB),B'00000100'                            0347
         BNZ   @RF00347                                            0347
*           DO;                     /* MOVE CINV TO USER AREA      0348
*                                                            @X04SVRQ*/
*             RESPECIFY                                            0349
*              (RWORK2,                                            0349
*               RWORK3,                                            0349
*               RWORK4,                                            0349
*               RWORK5) RESTRICTED; /* GET REGS                      */
*             RWORK3=AMDCINV;       /* GET CINV LENGTH               */
         L     @10,AMBDSB(,RAMB)                                   0350
         L     RWORK3,AMDCINV(,@10)                                0350
*             RWORK5=RWORK3;        /* INTO ODD REGS                 */
         LR    RWORK5,RWORK3                                       0351
*             RWORK2=ADDR(USERAREA);/* SET UP TO ADDR                */
         L     RWORK2,RPLAREA(,RRPL)                               0352
*             RWORK4=ADDR(AM0AREA); /* SET UP FROM ADDR              */
         L     RWORK4,BUFCBAD(,RBUFC)                              0353
*             GEN(MVCL RWORK2,RWORK4);/* MOVE CINV                   */
         MVCL RWORK2,RWORK4
*             RESPECIFY                                            0355
*              (RWORK2,                                            0355
*               RWORK3,                                            0355
*               RWORK4,                                            0355
*               RWORK5) UNRESTRICTED;/* DROP REGS                    */
*           END;                    /* END OF MOVE MODE              */
*       PLHRCODE=RPLREQ;            /* SAVE REQUEST CODE     @X04SVMR*/
@RF00347 DS    0H                                                  0357
@RC00345 IC    @10,RPLREQ(,RRPL)                                   0357
         STC   @10,PLHRCODE(,RPLH)                                 0357
*       IF RPLREQ=RPLGETIX THEN     /* GETIX REQUEST.        @X04SVRQ*/
         CLI   RPLREQ(RRPL),11                                     0358
         BNE   @RF00358                                            0358
*         DO;                       /* BYPASS JOURNAL EXIT.  @X04SVRQ*/
*           IF RPLUPD=ON THEN       /* UPDATE REQUEST.       @X04SVRQ*/
         TM    RPLUPD(RRPL),B'00000010'                            0360
         BNO   @RF00360                                            0360
*             PLHUPD=ON;            /* SET PLH UPDATE.       @X04SVRQ*/
         OI    PLHUPD(RPLH),B'10000000'                            0361
*           ELSE                    /* NOT UPDATE REQUEST.   @X04SVRQ*/
*             DO;                                                  0362
         B     @RC00360                                            0362
@RF00360 DS    0H                                                  0363
*               PLHINVAL=ON;        /* INVALIDATE PLH        @X04SVMR*/
         OI    PLHINVAL(RPLH),B'00000010'                          0363
*I08:                                                              0364
*               DO;                 /* IDACALL(IDAFREEB)             */
I08      DS    0H                                                  0365
*                 CALL IDAFREEB;    /* EXIT TO IDAFREEB              */
         L     @15,@CV01053                                        0365
         BALR  @14,@15                                             0365
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I08;            /* FREE BUFFER.          @X04SVRQ*/
*             END;                  /* END, NON-UPDATE       @X04SVMR*/
*           GOTO R8EXIT;            /* RETURN.               @X04SVRQ*/
         B     R8EXIT                                              0372
*         END;                      /* END BYPASS JRN EXIT.  @X04SVRQ*/
*/*  JOURNAL THE GET IF JRNAD WAS SPECIFIED.                         */
*                                                                  0374
*       IF AMBJRN=ON                /* IF A JOURNAL EXIT IS          */
*         THEN                      /* PRESENT, TAKE IT.             */
@RF00358 TM    AMBJRN(RAMB),B'00000010'                            0374
         BNO   @RF00374                                            0374
*         DO;                                                      0375
*           PLHJCODE=PLHJGET;       /* SET CODE FOR GET              */
         MVI   PLHJCODE(RPLH),B'00000000'                          0376
*I09:                                                              0377
*           DO;                     /* IDACALL(IDATJXIT)             */
I09      DS    0H                                                  0378
*             CALL IDATJXIT;        /* EXIT TO IDATJXIT              */
         L     @15,@CV01046                                        0378
         BALR  @14,@15                                             0378
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I09;                /* TAKE JRNAD EXIT       @X04SVMR*/
*         END;                      /* END OF JOURNAL EXIT           */
*/*  FORGET THE PLACEHOLDER FOR NORMAL DIRECT REQUESTS SO THAT THE 0385
*    PLACEHOLDER IS AVAILABLE FOR ASSIGNMENT TO OTHER RPLS WITHOUT THE
*    USER HAVING TO ISSUE AN ENDREQ AGAINST THE OLD RPL.  IF THE PLACE-
*    HOLDER IS TO BE RETAINED, SET UPDATE FLAG IF NECESSARY.         */
*                                                                  0385
*       IF RPLDIR=ON THEN           /* IF DIRECT REQUEST     @X04SVMR*/
@RF00374 TM    RPLDIR(RRPL),B'01000000'                            0385
         BNO   @RF00385                                            0385
*         DO;                                                      0386
*           IF RPLUPD=OFF&          /* NEITHER UPD NOR       @X04SVMR*/
*               RPLNSP=OFF&         /* NOTE STRING POSITION          */
*               RPLLOC=OFF          /* NOR LOCATE MODE               */
*             THEN                  /* THEN FORGET PLACEHOLDER       */
         TM    RPLUPD(RRPL),B'00000011'                            0387
         BNZ   @RF00387                                            0387
         TM    RPLLOC(RRPL),B'10000000'                            0387
         BNZ   @RF00387                                            0387
*             DO;                                                  0388
*               PLHINVAL=ON;        /* MAKE PLH INVALID              */
         OI    PLHINVAL(RPLH),B'00000010'                          0389
*I10:                                                              0390
*               DO;                 /* IDACALL(IDAFREEB)             */
I10      DS    0H                                                  0391
*                 CALL IDAFREEB;    /* EXIT TO IDAFREEB              */
         L     @15,@CV01053                                        0391
         BALR  @14,@15                                             0391
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I10;            /* FREE THE BFR          @X04SVLP*/
*             END;                  /* END, FORGET PLACEHOLDER       */
*                                                                  0397
*           /*********************************************************/
*           /*                                                       */
*           /* IF PLH IS TO BE RETAINED, SET ASKBF IN CASE OF A      */
*           /* SWITCH TO SEQUENTIAL PROCESSING.              @X04SVMR*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0398
*           ELSE                                                   0398
*             PLHASKBF=ON;                                         0398
         B     @RC00387                                            0398
@RF00387 OI    PLHASKBF(RPLH),B'00100000'                          0398
*         END;                      /* END OF DIR CODE       @X04SVMR*/
@RC00387 DS    0H                                                  0400
*       IF RPLUPD=ON THEN           /* SEE IF UPDATE                 */
@RF00385 TM    RPLUPD(RRPL),B'00000010'                            0400
         BNO   @RF00400                                            0400
*         PLHUPD=ON;                /* IF SO SET UPDATE IN PLH       */
         OI    PLHUPD(RPLH),B'10000000'                            0401
*     END;                          /* END, GET CINV ACCESSING       */
*                                                                  0403
*/*       ********************  PUT REQUEST  ********************    */
*                                                                  0403
*   ELSE                            /* HERE IF NOT GET               */
*     DO;                                                          0403
         B     @RC00201                                            0403
@RF00201 DS    0H                                                  0404
*       IF RPLREQ=RPLPUT×RPLREQ=RPLPUTIX/* SEE IF PUT OR PUTIX.    0404
*                                                            @X04SVRQ*/
*         THEN                      /* HERE IF IT IS                 */
         CLI   RPLREQ(RRPL),1                                      0404
         BE    @RT00404                                            0404
         CLI   RPLREQ(RRPL),12                                     0404
         BNE   @RF00404                                            0404
@RT00404 DS    0H                                                  0405
*         DO;                                                      0405
*                                                                  0405
*           /*********************************************************/
*           /*                                                       */
*           /* VERIFY THAT OUTPUT WAS SPECIFIED.             @X04SVMR*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0406
*           IF AMBLWRIT=OFF THEN    /* OUTPUT?               @X04SVMR*/
         L     @10,RPLDACB(,RRPL)                                  0406
         L     @10,ACBAMBL(,@10)                                   0406
         TM    AMBLWRIT(@10),B'00100000'                           0406
         BNZ   @RF00406                                            0406
*             DO;                   /*                       @X04SVMR*/
*               RPLERRCD=RPLINACC;  /* SET INVALID.          @X04SVMR*/
         MVI   RPLERRCD(RRPL),X'44'                                0408
*               GO TO ERRORX;       /* ERROR EXIT.           @X04SVMR*/
         B     ERRORX                                              0409
*             END;                  /* END, ERROR            @X04SVMR*/
*                                                                  0410
*           /*********************************************************/
*           /*                                                       */
*           /* VALIDATE THE RECORD LENGTH                            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0411
*           IF RPLRLEN^=AMDCINV     /* SEE IF RECORD LEN OK          */
*             THEN                  /* IF NOT, COME HERE             */
@RF00406 L     @10,AMBDSB(,RAMB)                                   0411
         CLC   RPLRLEN(4,RRPL),AMDCINV(@10)                        0411
         BE    @RF00411                                            0411
*             DO;                                                  0412
*               RPLERRCD=RPLINLEN;  /* SET INVALID LENGTH            */
         MVI   RPLERRCD(RRPL),X'6C'                                0413
*               GO TO ERRORX;       /* TAKE ERROR EXIT               */
         B     ERRORX                                              0414
*             END;                  /* END OF INVALID LENGTH         */
*                                                                  0415
*           /*********************************************************/
*           /*                                                       */
*           /* ENSURE ONLY MOVE MODE PUTS ARE DONE                   */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0416
*           IF RPLLOC=ON            /* IF LOCATE MODE WAS            */
*             THEN                  /* SPECIFIED FOR PUT, SET        */
@RF00411 TM    RPLLOC(RRPL),B'10000000'                            0416
         BNO   @RF00416                                            0416
*             DO;                   /* INVALID LOCATE ERROR.         */
*INVLOC:                                                           0418
*               RPLERRCD=RPLINLOC;  /* SET ERROR CODE                */
INVLOC   MVI   RPLERRCD(RRPL),X'54'                                0418
*               GO TO ERRORX;       /* TAKE ERROR RETURN             */
         B     ERRORX                                              0419
*             END;                  /* END OF INVALID LOCATE         */
*           IF RPLUPD=ON            /* SEE IF PUT FOR UPDATE         */
*             THEN                  /* IF SO, COME HERE              */
@RF00416 TM    RPLUPD(RRPL),B'00000010'                            0421
         BNO   @RF00421                                            0421
*             DO;                                                  0422
*                                                                  0422
*               /*****************************************************/
*               /*                                                   */
*               /* PUT FOR UPDATE--ALLOW STAND-ALONE PUT FOR UPDATE  */
*               /* ONLY IF USER BUFFERING IS SPECIFIED. FOR          */
*               /* STAND-ALONE PUT UPD GET THE RBA FROM THE RPL      */
*               /* (DIRECT) OR THE PLACE- HOLDER (SEQUENTIAL).       */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0423
*               IF RPLREQ=RPLPUTIX&RPLDIR=OFF THEN/* PUTIX & NOT   0423
*                                      DIRECT.               @X04SVRQ*/
         CLI   RPLREQ(RRPL),12                                     0423
         BNE   @RF00423                                            0423
         TM    RPLDIR(RRPL),B'01000000'                            0423
         BNZ   @RF00423                                            0423
*                 DO;               /*                       @X04SVRQ*/
*                   RPLERRCD=RPLINVP;/* INVALID RPL OPT      @X04SVRQ*/
         MVI   RPLERRCD(RRPL),X'68'                                0425
*                   GOTO ERRORX;    /* ERROR EXIT.           @X04SVRQ*/
         B     ERRORX                                              0426
*                 END;              /*                       @X04SVRQ*/
*               IF PLHUPD=OFF       /* SEE IF LAST REQ GET UPD       */
*                 THEN              /* IF NOT, SET ERROR             */
@RF00423 TM    PLHUPD(RPLH),B'10000000'                            0428
         BNZ   @RF00428                                            0428
*                 DO;                                              0429
*                   IF AMBUBF=OFF×  /* STAND-ALONE           @X04SVMR*/
*                       RPLREQ=RPLPUTIX/* PUT (NO PUTIX)     @X04SVMR*/
*                     THEN          /* UPDATE ONLY FOR USER          */
         TM    AMBUBF(RAMB),B'00000100'                            0430
         BZ    @RT00430                                            0430
         CLI   RPLREQ(RRPL),12                                     0430
         BNE   @RF00430                                            0430
@RT00430 DS    0H                                                  0431
*                     DO;           /* BUFFERING.                    */
*                       RPLERRCD=RPLINUPD;/* SET INVALID UPDATE      */
         MVI   RPLERRCD(RRPL),X'5C'                                0432
*                       GO TO ERRORX;/* SET ERROR AND EXIT           */
         B     ERRORX                                              0433
*                     END;          /* END, ERROR CONDITION          */
*                   ELSE            /* HERE FOR USER BUFFERING       */
*                     DO;           /* AND STAND-ALONE PUT           */
*                                                                  0435
@RF00430 DS    0H                                                  0436
*                       /*********************************************/
*                       /*                                           */
*                       /* ESTABLISH POSITION AND BFR COUNT FOR UBF  */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0436
*                       IF RPLSEQ=OFF/* IF NON-SEQUENTIAL, GET       */
*                         THEN      /* THE RBA FROM THE USER.        */
         TM    RPLSEQ(RRPL),B'00100000'                            0436
         BNZ   @RF00436                                            0436
*                         DO;                                      0437
*                                                                  0437
*                           /*****************************************/
*                           /*                                       */
*                           /* VALIDATE THE USER-SUPPLIED RBA        */
*                           /*                               @X04SVMR*/
*                           /*                                       */
*                           /*****************************************/
*                                                                  0438
*                           IF RBA//AMDCINV^=ZERO THEN/* RBA NOT ON
*                                      CI BOUNDARY.                  */
         L     @10,RPLARG(,RRPL)                                   0438
         L     @10,RBA(,@10)                                       0438
         L     @05,AMBDSB(,RAMB)                                   0438
         LR    @07,@10                                             0438
         SLR   @06,@06                                             0438
         D     @06,AMDCINV(,@05)                                   0438
         LTR   @06,@06                                             0438
         BNZ   @RT00438                                            0438
*                             GOTO BADBDY;/* GO SET ERROR.           */
*                           BUFCDDDD=RBA;/* GET USER RBA             */
         ST    @10,BUFCDDDD(,RBUFC)                                0440
*                           PLHNRBA=RBA;/* SET RD-AHEAD POINTER      */
         ST    @10,PLHNRBA(,RPLH)                                  0441
*                         END;                                     0442
*                       ELSE                                       0443
*                         DO;                                      0443
         B     @RC00436                                            0443
@RF00436 DS    0H                                                  0444
*                           PLHFRCNT=ONE;/* ONE BUFFER IS FREE       */
         MVI   PLHFRCNT(RPLH),X'01'                                0444
*                           IF PLHINVAL=ON/* MAKE SURE THE PLH IS    */
*                             THEN  /* VALID.                        */
         TM    PLHINVAL(RPLH),B'00000010'                          0445
         BNO   @RF00445                                            0445
*                             DO;                                  0446
*                               RPLERRCD=RPLNOPTR;/* SET INV. PLH    */
         MVI   RPLERRCD(RRPL),X'58'                                0447
*                               GO TO ERRORX;/* EXIT                 */
         B     ERRORX                                              0448
*                             END;  /* END OF INVALID PLH.           */
*                           PLHNRBA=PLHCRBA;/* GET IDAFRBA INPUT     */
@RF00445 L     @10,PLHCRBA(,RPLH)                                  0450
         ST    @10,PLHNRBA(,RPLH)                                  0450
*                           IF PLH1ST=OFF THEN/* IF NOT FIRST TIME,  */
         TM    PLH1ST(RPLH),B'01000000'                            0451
         BNZ   @RF00451                                            0451
*                             DO;                                  0452
*I11:                                                              0453
*                               DO; /* IDACALL(IDAFRBA)              */
I11      DS    0H                                                  0454
*                                 CALL IDAFRBA;/* EXIT TO IDAFRBA    */
         L     @15,@CV01042                                        0454
         BALR  @14,@15                                             0454
*                                 GEN(BALR @11,0);/* LOAD ADDR OF  0455
*                                      REENTRY                       */
         BALR @11,0
*                                 GEN(USING *,@11);/* ESTABLISH    0456
*                                      ADDRESSING                    */
         USING *,@11
*                                 GEN(L     @11,=A(@PSTART));/*    0457
*                                      RELOAD BASE                   */
         L     @11,=A(@PSTART)
*                                 GEN(USING @PSTART,@11);/* ESTABLISH
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                               END I11;/* DETERMINE NEXT RBA        */
*                               RFY                                0460
*                                 R15 RSTD;/* GET RETURN CODE        */
*                               IF RPLERREG^='00'X THEN/* IF I/O   0461
*                                      ERROR                         */
         CLI   RPLERREG(RRPL),0                                    0461
         BNE   @RT00461                                            0461
*                                 GO TO R8EXIT;/* EXIT FROM ROUTINE. */
*                               IF R15=RPLEODER/* SEE IF END OF DATA */
*                                 THEN/* IF SO, SET CODE             */
         C     R15,@CF00036                                        0463
         BNE   @RF00463                                            0463
*                                 DO;/* IN THE RPL.                  */
*                                   RPLERRCD=RPLEODER;/* SET END OF
*                                      DATA                          */
         MVI   RPLERRCD(RRPL),X'04'                                0465
*                                   GO TO ERRORX;/* TAKE ERROR EXIT  */
         B     ERRORX                                              0466
*                                 END;/* END OF EOD CODE             */
*                               RFY                                0468
*                                 R15 UNRSTD;/* RELEASE R15          */
@RF00463 DS    0H                                                  0469
*                             END;  /* END OF NOT 1ST TIME           */
*                           ELSE    /* FIRST TIME.                   */
*                             PLH1ST=OFF;/* INDICATE NOT FIRST       */
         B     @RC00451                                            0470
@RF00451 NI    PLH1ST(RPLH),B'10111111'                            0470
*                           BUFCDDDD=PLHNRBA;/* PUT RBA IN BUFFER    */
@RC00451 L     @10,PLHNRBA(,RPLH)                                  0471
         ST    @10,BUFCDDDD(,RBUFC)                                0471
*                         END;      /* END OF SEQ-USER BFR           */
*                       PLHCRBA=BUFCDDDD;/* SAVE NEW RBA IN PLH      */
@RC00436 L     @10,BUFCDDDD(,RBUFC)                                0473
         ST    @10,PLHCRBA(,RPLH)                                  0473
*                       BUFXORBA=BUFCDDDD;/* & IN SR FIELD   @X04SVMR*/
         ST    @10,BUFXORBA(,RBUFC)                                0474
*                       PLHFRCNT=ZERO;/* BUFFER IS NOT FREE          */
         MVI   PLHFRCNT(RPLH),X'00'                                0475
*                       PLHRDEXC=ON;/* SET PLH READ EXCL.    @X04SVRQ*/
         OI    PLHRDEXC(RPLH),B'00001000'                          0476
*I12:                                                              0477
*                       DO;         /* IDACALL(IDAEXCL)              */
I12      DS    0H                                                  0478
*                         CALL IDAEXCL;/* EXIT TO IDAEXCL            */
         L     @15,@CV01054                                        0478
         BALR  @14,@15                                             0478
*                         GEN(BALR @11,0);/* LOAD ADDR OF REENTRY    */
         BALR @11,0
*                         GEN(USING *,@11);/* ESTABLISH ADDRESSING   */
         USING *,@11
*                         GEN(L     @11,=A(@PSTART));/* RELOAD BASE  */
         L     @11,=A(@PSTART)
*                         GEN(USING @PSTART,@11);/* ESTABLISH      0482
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                       END I12;    /* GET EXCL. CTL.        @X04SVRQ*/
*                       IF RPLERREG^='00'X THEN/* ERROR.     @X04SVRQ*/
         CLI   RPLERREG(RRPL),0                                    0484
         BNE   @RT00484                                            0484
*                         GOTO ERRORX;/* EXIT.               @X04SVRQ*/
*                     END;          /* END--USER BUFFER CODE         */
*                 END;              /* END STAND-ALONE PUT           */
*/*  INDICATE BUFFER CONTENTS UPDATED                                */
*                                                                  0488
*               ELSE                /* PREV REQ WAS UPD.     @X04SVRQ*/
*                 DO;               /* VERIFY PREV GET.      @X04SVRQ*/
         B     @RC00428                                            0488
@RF00428 DS    0H                                                  0489
*                   IF RPLREQ=RPLPUTIX&PLHRCODE^=RPLGETIX THEN/*   0489
*                                      PUTIX REQ. & NOT PREVIOUS   0489
*                                      GETIX.                @X04SVRQ*/
         CLI   RPLREQ(RRPL),12                                     0489
         BNE   @RF00489                                            0489
         CLI   PLHRCODE(RPLH),11                                   0489
         BE    @RF00489                                            0489
*                     DO;           /*                       @X04SVRQ*/
*                       RPLERRCD=RPLINUPD;/* INVALID UPDATE. @X04SVRQ*/
         MVI   RPLERRCD(RRPL),X'5C'                                0491
*                       GOTO ERRORX;/* ERROR EXIT.           @X04SVRQ*/
         B     ERRORX                                              0492
*                     END;          /*                       @X04SVRQ*/
*                   IF RPLREQ=RPLPUT&PLHRCODE=RPLGETIX THEN/* PUT  0494
*                                      REQ. & PREVIOUS GETIX.      0494
*                                                            @X04SVRQ*/
@RF00489 CLI   RPLREQ(RRPL),1                                      0494
         BNE   @RF00494                                            0494
         CLI   PLHRCODE(RPLH),11                                   0494
         BNE   @RF00494                                            0494
*                     DO;           /*                       @X04SVRQ*/
*                       RPLERRCD=RPLINUPD;/* INVALID UPDATE. @X04SVRQ*/
         MVI   RPLERRCD(RRPL),X'5C'                                0496
*                       GOTO ERRORX;/* ERROR EXIT.           @X04SVRQ*/
         B     ERRORX                                              0497
*                     END;          /*                       @X04SVRQ*/
*                 END;              /* END VERIFY PREV GET.  @X04SVRQ*/
@RF00494 DS    0H                                                  0500
*               BUFXORBA=BUFCDDDD;  /* SET EXCL OUTPUT RBA   @ZA17187*/
@RC00428 L     @10,BUFCDDDD(,RBUFC)                                0500
         ST    @10,BUFXORBA(,RBUFC)                                0500
*               DO;                 /* SET UPDATED BFR               */
*                 BUFCORBA=BUFCDDDD;                               0502
         ST    @10,BUFCORBA(,RBUFC)                                0502
*                 BUFCMW=ON;                                       0503
         OI    BUFCMW(RBUFC),B'10000000'                           0503
*               END;                                               0504
*               RPLDDDD=BUFCDDDD;   /* PASS RBA BACK TO CALLER       */
         ST    @10,RPLDDDD(,RRPL)                                  0505
*             END;                  /* END, PUT UPDATE CODE          */
*           ELSE                    /* HERE IF PUT NUP               */
*             DO;                                                  0507
*                                                                  0507
         B     @RC00421                                            0507
@RF00421 DS    0H                                                  0508
*               /*****************************************************/
*               /*                                                   */
*               /* PUT FOR INSERT--RELEASE OLD BUFFER, IF NECESSARY  */
*               /* AND THEN SERIALIZE THE INSERTS BY ISSUING A TEST  */
*               /* AND SET ON THE DATA INSERT WORK AREA. IF THE      */
*               /* RESOURCE IS UNAVAILABLE, DEFER THE REQUEST UNTIL  */
*               /* THE RESOURCE BECOMES FREE OR WAIT UNTIL THE       */
*               /* REQUEST IS COMPLETED AND THEN EXIT. (IDA019R1     */
*               /* RESTARTS DEFERRED REQUESTS AFTER POSTING REQUESTS */
*               /* THAT HAVE USED THE DIWA.)                         */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0508
*               IF RPLREQ=RPLPUTIX THEN/* PUTIX REQUEST.     @X04SVRQ*/
         CLI   RPLREQ(RRPL),12                                     0508
         BNE   @RF00508                                            0508
*                 DO;               /*                       @X04SVRQ*/
*                   RPLERRCD=RPLINVP;/* SET INVALID RPL OPT. @X04SVRQ*/
         MVI   RPLERRCD(RRPL),X'68'                                0510
*                   GOTO ERRORX;    /* ERROR EXIT.           @X04SVRQ*/
         B     ERRORX                                              0511
*                 END;              /*                       @X04SVRQ*/
*               IF AMDDST='1'B×     /* IF DATA SET           @X04SVMR*/
*                   AMDRRDS=ON      /* IS KEY/REL RCD        @X04SVMR*/
*                 THEN              /* SEQUENCED, CNV INSERT         */
@RF00508 L     @10,AMBDSB(,RAMB)                                   0513
         TM    AMDDST(@10),B'10000010'                             0513
         BZ    @RF00513                                            0513
*                 DO;               /* IS NOT ALLOWED.               */
*                   RPLERRCD=RPLINADR;/* SET INVALID INSERT          */
         MVI   RPLERRCD(RRPL),X'4C'                                0515
*                   GO TO ERRORX;   /* TAKE ERROR EXIT               */
         B     ERRORX                                              0516
*                 END;              /* END OF INVALID INSERT         */
*               IF AMBINBUF=ON&     /* IF SHR(4), THEN       @X04SVMR*/
*                   AMBSCRA=OFF&AMBUCRA=OFF&/* IF NOT A CATLG,     0518
*                                                            @X04SVMR*/
*                   AMBCAT=OFF THEN /* SET NO SPACE.         @X04SVMR*/
@RF00513 TM    AMBINBUF(RAMB),B'00000001'                          0518
         BNO   @RF00518                                            0518
         TM    AMBSCRA(RAMB),B'00011100'                           0518
         BNZ   @RF00518                                            0518
*                 DO;               /*                       @X04SVMR*/
*                   RPLERRCD=RPLNOEXT;/* UNABLE TO EXTEND    @X04SVMR*/
         MVI   RPLERRCD(RRPL),X'1C'                                0520
*                   GO TO ERRORX;   /* TAKE ERROR EXIT       @X04SVMR*/
         B     ERRORX                                              0521
*                 END;              /* END OF SHR(4) CODE    @X04SVMR*/
*               RBUFC=PLHDBUFC;     /* POINT TO CURRENT BUFC         */
*                                                                  0523
@RF00518 L     RBUFC,PLHDBUFC(,RPLH)                               0523
*               /*****************************************************/
*               /*                                                   */
*               /* IF FIRST SEQUENTIAL REQUEST, ADD BFRS     @X04SVMR*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0524
*               IF PLH1ST=ON THEN   /* FIRST TIME?           @X04SVMR*/
         TM    PLH1ST(RPLH),B'01000000'                            0524
         BNO   @RF00524                                            0524
*                 DO;                                              0525
*                   IF RPLSEQ=ON THEN/* SEE IF SEQ           @X04SVMR*/
         TM    RPLSEQ(RRPL),B'00100000'                            0526
         BNO   @RF00526                                            0526
*                     DO;                                          0527
*                       PLHASKBF=ON;/* SET ASKBF FLAG        @X04SVMR*/
         OI    PLHASKBF(RPLH),B'00100000'                          0528
*                       RPARM1=ZERO;/* REQUEST MAXIMUM@X04SVMR       */
         SLR   RPARM1,RPARM1                                       0529
*I14:                                                              0530
*                       DO;         /* IDACALL(IDAABF)               */
I14      DS    0H                                                  0531
*                         CALL IDAABF;/* EXIT TO IDAABF              */
         L     @15,@CV01045                                        0531
         BALR  @14,@15                                             0531
*                         GEN(BALR @11,0);/* LOAD ADDR OF REENTRY    */
         BALR @11,0
*                         GEN(USING *,@11);/* ESTABLISH ADDRESSING   */
         USING *,@11
*                         GEN(L     @11,=A(@PSTART));/* RELOAD BASE  */
         L     @11,=A(@PSTART)
*                         GEN(USING @PSTART,@11);/* ESTABLISH      0535
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                       END I14;    /* ADD BUFFERS           @X04SVMR*/
*                     END;          /* END OF ASK BFR        @X04SVMR*/
*                   PLH1ST=OFF;     /* RESET 1ST TIME        @X04SVMR*/
@RF00526 NI    PLH1ST(RPLH),B'10111111'                            0538
*                 END;              /* END OF 1ST TIME       @X04SVMR*/
*               ELSE                /* NOT 1ST TIME          @X04SVMR*/
*                 IF(PLHUPD=ON×     /* SEE IF GET UPD LAST           */
*                     PLHINVAL=OFF)&/* OR VALID PLH          @X04SVMR*/
*                     RBUFC^=ZERO&  /* NO PRIOR FREE         @X04SVMR*/
*                     AMBUBF=OFF THEN/* WITH A SYSTEM BUFFER IF SO,
*                                      FREE ITS BUFFER               */
         B     @RC00524                                            0540
@RF00524 TM    PLHUPD(RPLH),B'10000000'                            0540
         BO    @GL00015                                            0540
         TM    PLHINVAL(RPLH),B'00000010'                          0540
         BNZ   @RF00540                                            0540
@GL00015 LTR   RBUFC,RBUFC                                         0540
         BZ    @RF00540                                            0540
         TM    AMBUBF(RAMB),B'00000100'                            0540
         BNZ   @RF00540                                            0540
*I15:                                                              0541
*                   DO;             /* IDACALL(IDAFREEB)             */
I15      DS    0H                                                  0542
*                     CALL IDAFREEB;/* EXIT TO IDAFREEB              */
         L     @15,@CV01053                                        0542
         BALR  @14,@15                                             0542
*                     GEN(BALR @11,0);/* LOAD ADDR OF REENTRY        */
         BALR @11,0
*                     GEN(USING *,@11);/* ESTABLISH ADDRESSING       */
         USING *,@11
*                     GEN(L     @11,=A(@PSTART));/* RELOAD BASE      */
         L     @11,=A(@PSTART)
*                     GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING */
         USING @PSTART,@11
*                   END I15;        /*                       @X04SVLP*/
*TEST:                                                             0548
*               RPARM1=ADDR(IDADIWA);/* POINT TO DIWA                */
@RF00540 DS    0H                                                  0548
@RC00524 DS    0H                                                  0548
TEST     L     RPARM1,AMBIWA(,RAMB)                                0548
*               GEN REFS(DIWATV)(TS DIWATV(RPARM1));/* SEE IF      0549
*                                      RESOURCE AVAIL                */
         TS DIWATV(RPARM1)
*               BC(8,PROCESS);      /* IF SO, PROCESS        @X04SVMR*/
         BC    8,PROCESS                                           0550
*               RFY                                                0551
*                 RWORK0 RSTD;      /* GET PARAMETER REG     @X04SVMR*/
*               RWORK0=DEFR0;       /* SET DEFER PARAMETER           */
         SLR   RWORK0,RWORK0                                       0552
*I16:                                                              0553
*               DO;                 /* IDACALL(IDADRQ)               */
I16      DS    0H                                                  0554
*                 CALL IDADRQ;      /* EXIT TO IDADRQ                */
         L     @15,@CV01050                                        0554
         BALR  @14,@15                                             0554
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I16;            /* GET USE OF DIWA               */
*               GO TO TEST;         /* SEE IF O.K.                   */
         B     TEST                                                0560
*               RFY                                                0561
*                 RWORK0 UNRSTD;    /* DROP PARAM REG        @X04SVMR*/
*PROCESS:                                                          0562
*               DIWPLH=RPLH;        /* INDICATE OWNER        @X04SVMR*/
PROCESS  L     @10,AMBIWA(,RAMB)                                   0562
         ST    RPLH,DIWPLH(,@10)                                   0562
*               PLHINVAL=OFF;       /* VALID POSITION        @OX09380*/
*                                                                  0563
         NI    PLHINVAL(RPLH),B'11111101'                          0563
*               /*****************************************************/
*               /*                                                   */
*               /* GET THE HIGH RBA AND CHECK IT FOR A BEGINNING OF A*/
*               /* CONTROL AREA CONDITION. IF IT IS A NEW CONTROL    */
*               /* AREA ENSURE THAT SPACE IS AVAILABLE AND THAT IT IS*/
*               /* PREFORMATTED IF NECESSARY.                        */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0564
*               PLHARDB=ADDR(IDAARDB);/* POINT TO ARDB       @X04SVMR*/
         L     @10,AMBDSB(,RAMB)                                   0564
         L     @05,AMDPARDB(,@10)                                  0564
         ST    @05,PLHARDB(,RPLH)                                  0564
*               PLHCRBA=ARDHRBA;    /* PUT IN HIGH WATER RBA         */
         L     @05,ARDHRBA(,@05)                                   0565
         ST    @05,PLHCRBA(,RPLH)                                  0565
*               RPARM1=(PLHCRBA/AMDCINV)//AMDCIPCA;/* GET # OF CIS 0566
*                                      USED IN CA                    */
         LR    @07,@05                                             0566
         SLR   @06,@06                                             0566
         D     @06,AMDCINV(,@10)                                   0566
         LR    @08,@07                                             0566
         SRDA  @08,32                                              0566
         LH    RPARM1,AMDCIPCA(,@10)                               0566
         DR    @08,RPARM1                                          0566
         LR    RPARM1,@08                                          0566
*               IF RPARM1=ZERO      /* IF BEGINNING OF CA, IT        */
*                 THEN              /* MAY BE NECESSARY TO           */
         SLR   @10,@10                                             0567
         CR    RPARM1,@10                                          0567
         BNE   @RF00567                                            0567
*                 DO;               /* GET MORE SPACE.               */
*                   IF AMBDFR=OFF&  /* NOT DEFER WRITE       @X04SVRQ*/
*                       PLHDBUFC^=ZERO THEN/* BUFFER IS HERE @ZA07540*/
         TM    AMBDFR(RAMB),B'00001000'                            0569
         BNZ   @RF00569                                            0569
         L     @05,PLHDBUFC(,RPLH)                                 0569
         CR    @05,@10                                             0569
         BE    @RF00569                                            0569
*                     DO;           /* WRITE OLD BFRS        @ZA07540*/
*                                                                  0570
*                       /*********************************************/
*                       /*                                           */
*                       /* POINTING TO OLDEST BUFFER, WRITE REST OF  */
*                       /* OLD CONTROL AREA                          */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0571
*                       RBUFC=PLHDBUFC->BUFCNXT2;/* POINT TO OLDEST
*                                      BUFFER.               @X04SVRQ*/
         L     RBUFC,BUFCNXT2-1(,@05)                              0571
         LA    RBUFC,0(,RBUFC)                                     0571
*                       IF(AMBGSR=OFF&AMBLSR=OFF)×/* IF NOT SHARED 0572
*                                                            @ZA07540*/
*                           BUFCMW=ON THEN/* RESOURCES OR IF THERE IS
*                                      A WRITE TO DO,        @ZA07540*/
         TM    AMBGSR(RAMB),B'01100000'                            0572
         BZ    @RT00572                                            0572
         TM    BUFCMW(RBUFC),B'10000000'                           0572
         BNO   @RF00572                                            0572
@RT00572 DS    0H                                                  0573
*I17:                                                              0573
*                         DO;       /* IDACALL(IDAWRBFR)             */
I17      DS    0H                                                  0574
*                           CALL IDAWRBFR;/* EXIT TO IDAWRBFR        */
         L     @15,@CV01049                                        0574
         BALR  @14,@15                                             0574
*                           GEN(BALR @11,0);/* LOAD ADDR OF REENTRY  */
         BALR @11,0
*                           GEN(USING *,@11);/* ESTABLISH ADDRESSING */
         USING *,@11
*                           GEN(L     @11,=A(@PSTART));/* RELOAD BASE*/
         L     @11,=A(@PSTART)
*                           GEN(USING @PSTART,@11);/* ESTABLISH    0578
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                         END I17;  /* WRITE BUFFERS                 */
*                       IF RPLERREG='0C'X THEN/* IF I/O ERROR, EXIT
*                                      WITH                          */
@RF00572 CLI   RPLERREG(RRPL),12                                   0580
         BE    @RT00580                                            0580
*                         GO TO PUTEXIT2;/* DIWA RELEASED.   @X04SVMR*/
*                     END;          /* END WRITE             @ZA07540*/
*                   IF PLHCRBA>=ARDERBA/* CHECK END OF ALLOCATION    */
*                     THEN          /* IF SO, CALL EOV               */
@RF00569 L     @10,AMBDSB(,RAMB)                                   0583
         L     @10,AMDPARDB(,@10)                                  0583
         CLC   PLHCRBA(4,RPLH),ARDERBA(@10)                        0583
         BL    @RF00583                                            0583
*                     DO;                                          0584
*                       PLHEOVR=AMBEOVAR;/* SET ALLOC BY RBA         */
         MVI   PLHEOVR(RPLH),B'10000010'                           0585
*                       RPARM1=ADDR(ARDERBA);/* POINT TO RBA         */
         LA    RPARM1,ARDERBA(,@10)                                0586
*                       PLHEOVPT=RPARM1;/* POINT TO RBA              */
         ST    RPARM1,PLHEOVPT(,RPLH)                              0587
*I18:                                                              0588
*                       DO;         /* IDACALL(IDAEOVIF)             */
I18      DS    0H                                                  0589
*                         CALL IDAEOVIF;/* EXIT TO IDAEOVIF          */
         L     @15,@CV01041                                        0589
         BALR  @14,@15                                             0589
*                         GEN(BALR @11,0);/* LOAD ADDR OF REENTRY    */
         BALR @11,0
*                         GEN(USING *,@11);/* ESTABLISH ADDRESSING   */
         USING *,@11
*                         GEN(L     @11,=A(@PSTART));/* RELOAD BASE  */
         L     @11,=A(@PSTART)
*                         GEN(USING @PSTART,@11);/* ESTABLISH      0593
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                       END I18;    /* TRY TO GET MORE SPACE         */
*                       IF RPLERREG^='00'X/* SEE IF SPACE OBTAINED   */
*                         THEN      /* IF NOT SET ERROR              */
         CLI   RPLERREG(RRPL),0                                    0595
         BE    @RF00595                                            0595
*                         DO;                                      0596
*PUTEXIT2:                                                         0597
*                           DIWATV=CZERO;/* FREE RESOURCE            */
PUTEXIT2 L     @10,AMBIWA(,RAMB)                                   0597
         MVI   DIWATV(@10),B'00000000'                             0597
*                           GO TO PUTEXIT;/* RETURN TO CALLER        */
         B     PUTEXIT                                             0598
*                         END;      /* END, NO SPACE FOUND           */
*                       RFY                                        0600
*                         R15 UNRSTD;/* RELEASE R15                  */
@RF00595 DS    0H                                                  0601
*                     END;          /* END OF EOV CALL               */
*                   ELSE            /* IF NOT EOE AND NOT            */
*                     IF AMBSPEED=OFF&/* SPEED OPTION, IF IT         */
*                         PLHCRBA^=ZERO THEN/* IS NOT 1ST CA IT IS   */
         B     @RC00583                                            0602
@RF00583 TM    AMBSPEED(RAMB),B'00001000'                          0602
         BNZ   @RF00602                                            0602
         L     @10,PLHCRBA(,RPLH)                                  0602
         LTR   @10,@10                                             0602
         BZ    @RF00602                                            0602
*                       DO;         /* NECESSARY TO PREFORMAT        */
*                         RPARM1=PLHCRBA;/* POINT TO NEXT CA         */
         LR    RPARM1,@10                                          0604
*I19:                                                              0605
*                         DO;       /* IDACALL(IDA019RK)             */
I19      DS    0H                                                  0606
*                           CALL IDA019RK;/* EXIT TO IDA019RK        */
         L     @15,@CV01051                                        0606
         BALR  @14,@15                                             0606
*                           GEN(BALR @11,0);/* LOAD ADDR OF REENTRY  */
         BALR @11,0
*                           GEN(USING *,@11);/* ESTABLISH ADDRESSING */
         USING *,@11
*                           GEN(L     @11,=A(@PSTART));/* RELOAD BASE*/
         L     @11,=A(@PSTART)
*                           GEN(USING @PSTART,@11);/* ESTABLISH    0610
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                         END I19;  /* PREFORMAT NEW CNTL AREA       */
*                         IF RPLERREG^='00'X THEN/* IF AN ERROR    0612
*                                      OCCURRED,                     */
         CLI   RPLERREG(RRPL),0                                    0612
         BNE   @RT00612                                            0612
*                           GO TO PUTEXIT2;/* EXIT WITHOUT DIWA    0613
*                                                            @X04SVMR*/
*                       END;        /* END OF PF RTN CALL            */
*                 END;              /* END OF BOCA CODE              */
*                                                                  0615
@RF00602 DS    0H                                                  0615
@RC00583 DS    0H                                                  0616
*               /*****************************************************/
*               /*                                                   */
*               /* SET A NEW HIGH RBA AND RELEASE THE DATA INSERT    */
*               /* WORK AREA.                                        */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0616
*               PLHCRBA=ARDHRBA;    /* RESET HI-USED         @ZA17498*/
@RF00567 L     @10,AMBDSB(,RAMB)                                   0616
         L     @05,AMDPARDB(,@10)                                  0616
         L     @15,ARDHRBA(,@05)                                   0616
         ST    @15,PLHCRBA(,RPLH)                                  0616
*               RPLDDDD=ARDHRBA;    /* SAVE HI-USED          @ZA17498*/
         ST    @15,RPLDDDD(,RRPL)                                  0617
*               ARDHRBA=ARDHRBA+AMDCINV;/* ADVANCE HIGH RBA          */
         AL    @15,AMDCINV(,@10)                                   0618
         ST    @15,ARDHRBA(,@05)                                   0618
*               DIWATV=CZERO;       /* SET HIGH RBA AVAILABLE        */
         L     @10,AMBIWA(,RAMB)                                   0619
         MVI   DIWATV(@10),B'00000000'                             0619
*I20:                                                              0620
*               DO;                 /* IDACALL(IDAGNNFL)             */
I20      DS    0H                                                  0621
*                 CALL IDAGNNFL;    /* EXIT TO IDAGNNFL              */
         L     @15,@CV01043                                        0621
         BALR  @14,@15                                             0621
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I20;            /* GET A WORK BUFFER             */
*               IF RPLERREG^='00'X THEN/* CHECK FOR ERROR            */
         CLI   RPLERREG(RRPL),0                                    0627
         BNE   @RT00627                                            0627
*                 GO TO PUTEXIT;    /* EXIT IF ERROR                 */
*               RPARM1=RPLDDDD;     /* GET OUTPUT                    */
         L     @10,RPLDDDD(,RRPL)                                  0629
         LR    RPARM1,@10                                          0629
*               PLHCRBA=RPLDDDD;    /* RESET RBA             @ZA17498*/
         ST    @10,PLHCRBA(,RPLH)                                  0630
*               PLHNRBA=RPARM1;     /* SET POSITION TO EOD SET OUTPUT
*                                      RBA                           */
         ST    RPARM1,PLHNRBA(,RPLH)                               0631
*               BUFXORBA=RPARM1;    /* SET EXCL OUTPUT       @ZA17187*/
         ST    RPARM1,BUFXORBA(,RBUFC)                             0632
*               DO;                 /* SET OUTPUT RBA                */
*                 BUFCORBA=RPARM1;                                 0634
         ST    RPARM1,BUFCORBA(,RBUFC)                             0634
*                 BUFCMW=ON;        /* SET MUST WRITE                */
         OI    BUFCMW(RBUFC),B'10000000'                           0635
*               END;                                               0636
*               BUFXIRBA=BUFCORBA;  /* SET EXCL CNTL RBA     @X04SVMR*/
         L     @10,BUFCORBA(,RBUFC)                                0637
         ST    @10,BUFXIRBA(,RBUFC)                                0637
*               BUFCDDDD=BUFCORBA;  /* SET RBA ADDRESS       @X04SVMR*/
         ST    @10,BUFCDDDD(,RBUFC)                                0638
*               BUFCVAL=ON;         /* MAKE RBA VALID        @X04SVMR*/
*               BUFCEXC=ON;         /* SET BUFC EXCL.        @X04SVRQ*/
         OI    BUFCVAL(RBUFC),B'00000110'                          0640
*             END;                  /* END, PUT NUP                  */
*           IF AMBUBF=OFF           /* IF NOT UBF, MUST MOVE         */
*             THEN                  /* CINV TO USER AREA.            */
@RC00421 TM    AMBUBF(RAMB),B'00000100'                            0642
         BNZ   @RF00642                                            0642
*             DO;                                                  0643
*                                                                  0643
*/*  MOVE USER DATA TO THE VSAM BUFFER                               */
*                                                                  0644
*               RESPECIFY                                          0644
*                (RWORK2,                                          0644
*                 RWORK3,                                          0644
*                 RWORK4,                                          0644
*                 RWORK5) RESTRICTED;/* GET REGS                     */
*               RWORK3=AMDCINV;     /* GET CINV LENGTH               */
         L     @10,AMBDSB(,RAMB)                                   0645
         L     RWORK3,AMDCINV(,@10)                                0645
*               RWORK5=RWORK3;      /* INTO ODD REGS                 */
         LR    RWORK5,RWORK3                                       0646
*               RWORK2=ADDR(AM0AREA);/* SET UP TO ADDR               */
         L     RWORK2,BUFCBAD(,RBUFC)                              0647
*               RWORK4=ADDR(USERAREA);/* SET UP FROM ADDR            */
         L     RWORK4,RPLAREA(,RRPL)                               0648
*               GEN(MVCL RWORK2,RWORK4);/* MOVE CINV DROP REGS       */
         MVCL RWORK2,RWORK4
*               RESPECIFY                                          0650
*                (RWORK2,                                          0650
*                 RWORK3,                                          0650
*                 RWORK4,                                          0650
*                 RWORK5) UNRESTRICTED;                            0650
*             END;                  /* END OF MOVE CINV              */
*/*  JOURNAL THIS PUT IF A JRNAD EXIT WAS SPECIFIED                  */
*                                                                  0652
*           IF RPLREQ=RPLPUTIX THEN /* PUTIX REQUEST.        @X04SVRQ*/
@RF00642 CLI   RPLREQ(RRPL),12                                     0652
         BE    @RT00652                                            0652
*             GOTO CANCPOS;         /* CANCEL POSIT.         @X04SVRQ*/
*           IF AMBJRN=ON            /* IF A JOURNAL EXIT IS          */
*             THEN                  /* PRESENT, TAKE IT.             */
         TM    AMBJRN(RAMB),B'00000010'                            0654
         BNO   @RF00654                                            0654
*             DO;                                                  0655
*               PLHJCODE=PLHJPUT;   /* SET CODE FOR PUT              */
         MVI   PLHJCODE(RPLH),B'00000100'                          0656
*I22:                                                              0657
*               DO;                 /* IDACALL(IDATJXIT)             */
I22      DS    0H                                                  0658
*                 CALL IDATJXIT;    /* EXIT TO IDATJXIT              */
         L     @15,@CV01046                                        0658
         BALR  @14,@15                                             0658
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I22;            /* TAKE JOURNAL EXIT     @X04SVMR*/
*             END;                  /* END OF JOURNAL EXIT           */
*/*  IF THE REQUEST NO LONGER NEEDS THIS PLACEHOLDER, FLAG THE PLACE-*/
*/*  HOLDER AS INVALID SO THE CHECK ROUTINE WILL MAKE IT AVAILABLE.  */
*                                                                  0665
*           IF RPLSEQ=OFF THEN      /* IF NOT SEQ AND        @X04SVMR*/
@RF00654 TM    RPLSEQ(RRPL),B'00100000'                            0665
         BNZ   @RF00665                                            0665
*             DO;                                                  0666
*               IF RPLNSP=OFF       /* NO NSP                @X04SVMR*/
*                 THEN              /* THEN FORGET PLH               */
         TM    RPLNSP(RRPL),B'00000001'                            0667
         BNZ   @RF00667                                            0667
*                 DO;                                              0668
*CANCPOS:                                                          0669
*                   PLHINVAL=ON;    /* MAKE PLH INVALID      @X04SVRQ
*                                      WRITE OUT BUFFER              */
CANCPOS  OI    PLHINVAL(RPLH),B'00000010'                          0669
*                   IF AMBDFR=OFF×  /* NOT DEFER WRITE       @ZA07540*/
*                       RPLREQ=RPLPUTIX THEN/* OR IF PUTIX   @ZA07540*/
         TM    AMBDFR(RAMB),B'00001000'                            0670
         BZ    @RT00670                                            0670
         CLI   RPLREQ(RRPL),12                                     0670
         BNE   @RF00670                                            0670
@RT00670 DS    0H                                                  0671
*I23:                                                              0671
*                     DO;           /* IDACALL(IDAWRBFR)             */
I23      DS    0H                                                  0672
*                       CALL IDAWRBFR;/* EXIT TO IDAWRBFR            */
         L     @15,@CV01049                                        0672
         BALR  @14,@15                                             0672
*                       GEN(BALR @11,0);/* LOAD ADDR OF REENTRY      */
         BALR @11,0
*                       GEN(USING *,@11);/* ESTABLISH ADDRESSING     */
         USING *,@11
*                       GEN(L     @11,=A(@PSTART));/* RELOAD BASE    */
         L     @11,=A(@PSTART)
*                       GEN(USING @PSTART,@11);/* ESTABLISH        0676
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                     END I23;                                     0677
*I24:                                                              0678
*                   DO;             /* IDACALL(IDAFREEB)             */
@RF00670 DS    0H                                                  0678
I24      DS    0H                                                  0679
*                     CALL IDAFREEB;/* EXIT TO IDAFREEB              */
         L     @15,@CV01053                                        0679
         BALR  @14,@15                                             0679
*                     GEN(BALR @11,0);/* LOAD ADDR OF REENTRY        */
         BALR @11,0
*                     GEN(USING *,@11);/* ESTABLISH ADDRESSING       */
         USING *,@11
*                     GEN(L     @11,=A(@PSTART));/* RELOAD BASE      */
         L     @11,=A(@PSTART)
*                     GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING */
         USING @PSTART,@11
*                   END I24;        /* FREE THE BFR          @X04SVLP*/
*                 END;              /* END FORGET PLH                */
*                                                                  0685
*               /*****************************************************/
*               /*                                                   */
*               /* SET FLAG SO BUFFERS WILL BE ADDED IF SWITCH TO SEQ*/
*               /*                                           @X04SVMR*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0686
*               ELSE                                               0686
*                 PLHASKBF=ON;                                     0686
         B     @RC00667                                            0686
@RF00667 OI    PLHASKBF(RPLH),B'00100000'                          0686
*             END;                  /* END OF DIR CODE       @X04SVMR*/
*/*  IF USER BUFFERING, DO WRITES BEFORE RETURNING TO USER.          */
*                                                                  0688
*           ELSE                                                   0688
*             IF AMBUBF=ON          /* TEST FOR USER BUFFER          */
*               THEN                /* IF PRESENT, DO WRITES.        */
         B     @RC00665                                            0688
@RF00665 TM    AMBUBF(RAMB),B'00000100'                            0688
         BNO   @RF00688                                            0688
*               DO;                                                0689
*I25:                                                              0690
*                 DO;               /* IDACALL(IDAWRBFR)             */
I25      DS    0H                                                  0691
*                   CALL IDAWRBFR;  /* EXIT TO IDAWRBFR              */
         L     @15,@CV01049                                        0691
         BALR  @14,@15                                             0691
*                   GEN(BALR @11,0);/* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                   GEN(USING *,@11);/* ESTABLISH ADDRESSING         */
         USING *,@11
*                   GEN(L     @11,=A(@PSTART));/* RELOAD BASE        */
         L     @11,=A(@PSTART)
*                   GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING   */
         USING @PSTART,@11
*                 END I25;          /* CALL WRITE BUFFER RTN         */
*                 IF RPLERREG^='00'X/* IF ANY ERRORS,                */
*                   THEN            /* RELEASE THE PLH.              */
         CLI   RPLERREG(RRPL),0                                    0697
         BE    @RF00697                                            0697
*                   DO;                                            0698
*PUTEXIT:                                                          0699
*                     PLHINVAL=ON;  /* INVALIDATE THE PLH            */
PUTEXIT  OI    PLHINVAL(RPLH),B'00000010'                          0699
*                   END;            /* END OF DROP PLH               */
*               END;                /* END OF UBF CODE               */
@RF00697 DS    0H                                                  0702
*           PLHUPD=OFF;             /* RESET UPDATE FLAG             */
@RF00688 DS    0H                                                  0702
@RC00665 NI    PLHUPD(RPLH),B'01111111'                            0702
*         END;                      /* END, PUT CODE                 */
*       ELSE                        /* HERE IF NOT PUT OR GET        */
*         DO;                                                      0704
*                                                                  0704
         B     @RC00404                                            0704
@RF00404 DS    0H                                                  0705
*           /*********************************************************/
*           /*                                                       */
*           /* THE REQUEST IS NOT A GET OR PUT. IF IT IS A VERIFY,   */
*           /* CALL THE VERIFY ROUTINE. IF IT IS AN ERASE, SET ERASE */
*           /* ERROR. IF IT IS NONE OF THESE AND NOT A POINT SET AN  */
*           /* INVALID REQUEST.                                      */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0705
*           IF RPLREQ^=RPLPOINT     /* SEE IF POINT                  */
*             THEN                  /* HERE IF NOT                   */
         CLI   RPLREQ(RRPL),3                                      0705
         BE    @RF00705                                            0705
*             DO;                                                  0706
*               IF RPLREQ=RPLVERIF  /* SEE IF VERIFY REQUEST         */
*                 THEN              /* IF SO, COME HERE TO           */
         CLI   RPLREQ(RRPL),6                                      0707
         BNE   @RF00707                                            0707
*                 DO;               /* CALL THE VERIFY ROUTINE       */
*I26:                                                              0709
*                   DO;             /* IDACALL(IDA019RO)             */
I26      DS    0H                                                  0710
*                     CALL IDA019RO;/* EXIT TO IDA019RO              */
         L     @15,@CV01052                                        0710
         BALR  @14,@15                                             0710
*                     GEN(BALR @11,0);/* LOAD ADDR OF REENTRY        */
         BALR @11,0
*                     GEN(USING *,@11);/* ESTABLISH ADDRESSING       */
         USING *,@11
*                     GEN(L     @11,=A(@PSTART));/* RELOAD BASE      */
         L     @11,=A(@PSTART)
*                     GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING */
         USING @PSTART,@11
*                   END I26;                                       0715
*                   GEN(IDARST14);  /* RESTORE RETURN REG            */
         IDARST14
*                   RETURN;         /* RETURN TO CALLER              */
@EL00001 DS    0H                                                  0717
@EF00001 DS    0H                                                  0717
@ER00001 BR    @14                                                 0717
*                 END;              /* END OF VERIFY CALL            */
*               IF RPLREQ=RPLERASE THEN/* SEE IF ERASE               */
@RF00707 CLI   RPLREQ(RRPL),5                                      0719
         BNE   @RF00719                                            0719
*                 RPLERRCD=RPLERSER;/* YES-INVALID ERASE             */
         MVI   RPLERRCD(RRPL),X'50'                                0720
*               ELSE                /* NOT ERASE.                    */
*                 RPLERRCD=RPLINVP; /* NO-INVALID RPL OPTION         */
         B     @RC00719                                            0721
@RF00719 MVI   RPLERRCD(RRPL),X'68'                                0721
*               GO TO ERRORX;       /* TAKE ERROR EXIT               */
         B     ERRORX                                              0722
*             END;                  /* END, UNKNOWN MACRO            */
*                                                                  0723
*           /*********************************************************/
*           /*                                                       */
*           /* POINT REQUEST--PUT THE USER-SUPPLIED RBA IN THE       */
*           /* PLACEHOLDER AND READ IN THE DESIRED CONTROL INTERVAL. */
*           /*                                               @X04SVMR*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0724
*           IF RBA//AMDCINV^=ZERO THEN/* VALIDATE USER RBA   @X04SVMR*/
@RF00705 L     @10,RPLARG(,RRPL)                                   0724
         L     @05,AMBDSB(,RAMB)                                   0724
         L     @07,RBA(,@10)                                       0724
         SLR   @06,@06                                             0724
         D     @06,AMDCINV(,@05)                                   0724
         LTR   @06,@06                                             0724
         BNZ   @RT00724                                            0724
*             GO TO BADBDY;         /* SET ERROR IF BAD      @X04SVMR*/
*           PLHASKBF=ON;            /* BUFFERS NEEDED        @X04SVMR*/
         OI    PLHASKBF(RPLH),B'00100000'                          0726
*           IF RPLSEQ=ON THEN       /* IF SEQUENTIAL,        @X04SVMR*/
         TM    RPLSEQ(RRPL),B'00100000'                            0727
         BNO   @RF00727                                            0727
*             DO;                   /* EXTRA BUFFERS.        @X04SVMR*/
*               RBUFC=ZERO;         /* MAXIMUM DESIRED       @X04SVMR*/
         SLR   RBUFC,RBUFC                                         0729
*I27:                                                              0730
*               DO;                 /* IDACALL(IDAABF)               */
I27      DS    0H                                                  0731
*                 CALL IDAABF;      /* EXIT TO IDAABF                */
         L     @15,@CV01045                                        0731
         BALR  @14,@15                                             0731
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I27;            /* ADD BUFFERS           @X04SVMR*/
*             END;                  /* END OF SEQ            @X04SVMR*/
*           IF RPLUPD=ON THEN       /* IF UPDATE MODE,       @X04SVMR*/
@RF00727 TM    RPLUPD(RRPL),B'00000010'                            0738
         BNO   @RF00738                                            0738
*             PLHRDEXC=ON;          /* SET EXCL CNTL.        @X04SVMR*/
         OI    PLHRDEXC(RPLH),B'00001000'                          0739
*           ELSE                    /* UPDATE IS OFF         @X04SVMR*/
*             PLHRDEXC=OFF;         /* NO EXCL CONTROL       @X04SVMR*/
         B     @RC00738                                            0740
@RF00738 NI    PLHRDEXC(RPLH),B'11110111'                          0740
*           RPARM1=RBA;             /* PICK UP USER RBA              */
@RC00738 L     @10,RPLARG(,RRPL)                                   0741
         L     RPARM1,RBA(,@10)                                    0741
*           RPLDDDD=RPARM1;         /* PUT IN FEEDBACK FIELD         */
         ST    RPARM1,RPLDDDD(,RRPL)                               0742
*           PLHCRBA=RPARM1;         /* SET CURRENT RBA               */
         ST    RPARM1,PLHCRBA(,RPLH)                               0743
*I28:                                                              0744
*           DO;                     /* IDACALL(IDAGRB)               */
I28      DS    0H                                                  0745
*             CALL IDAGRB;          /* EXIT TO IDAGRB                */
         L     @15,@CV01047                                        0745
         BALR  @14,@15                                             0745
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I28;                /* READ IN CINVS         @X04SVMR*/
*           IF RPLERREG^='00'X THEN /* IF AN ERROR,                  */
         CLI   RPLERREG(RRPL),0                                    0751
         BNE   @RT00751                                            0751
*             GO TO PUTEXIT;        /* INVAL PLH EXIT        @X04SVMR*/
*           PLHEFLGS=C2ZERO;        /* CLEAR EXCEPTION FLAGS         */
         MVC   PLHEFLGS(2,RPLH),C2ZERO                             0753
*           PLHUPD=OFF;             /* RESET UPDATE FLAG             */
         NI    PLHUPD(RPLH),B'01111111'                            0754
*           PLHNOADV=ON;            /* INDICATE POINT        @X04SVMR*/
         OI    PLHNOADV(RPLH),B'00001000'                          0755
*         END;                      /* END POINT CODE                */
*     END;                          /* END, NO GET CODE              */
@RC00404 DS    0H                                                  0758
*R8EXIT:                                                           0758
*   RAMB=AMBLDTA;                   /* POINT TO DATA AMB.    @X04SVRQ*/
@RC00201 DS    0H                                                  0758
R8EXIT   L     @10,RPLDACB(,RRPL)                                  0758
         L     @10,ACBAMBL(,@10)                                   0758
         L     RAMB,AMBLDTA(,@10)                                  0758
*   GEN(IDARST14);                  /* RESTORE RETURN REG            */
         IDARST14
*   RETURN;                         /* RETURN TO CALLER              */
         B     @EL00001                                            0760
*   GEN(IDAPATCH);                  /* DEFINE A PATCH AREA           */
         IDAPATCH
*   END IDA019R8                    /* END OF CINV DRIVER            */
*                                                                  0762
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAIXSPL)                                       */
*/*%INCLUDE SYSLIB  (IDAEDB  )                                       */
*/*%INCLUDE SYSLIB  (IDALPMB )                                       */
*/*%INCLUDE SYSLIB  (IDADIWA )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IFGEXLST)                                       */
*                                                                  0762
*       ;                                                          0762
         B     @EL00001                                            0762
@DATA    DS    0H
@CH00047 DC    H'1'
@DATD    DSECT
         DS    0F
IDA019R8 CSECT
         DS    0F
@CF00036 DC    F'4'
@DATD    DSECT
         DS    0D
IDA019R8 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV01041 DC    V(IDAEOVIF)
@CV01042 DC    V(IDAFRBA)
@CV01043 DC    V(IDAGNNFL)
@CV01044 DC    V(IDAGNXT)
@CV01045 DC    V(IDAABF)
@CV01046 DC    V(IDATJXIT)
@CV01047 DC    V(IDAGRB)
@CV01049 DC    V(IDAWRBFR)
@CV01050 DC    V(IDADRQ)
@CV01051 DC    V(IDA019RK)
@CV01052 DC    V(IDA019RO)
@CV01053 DC    V(IDAFREEB)
@CV01054 DC    V(IDAEXCL)
@CV01048 DC    V(IDASBF)
         DS    0D
HWORD4   DC    H'4'
C2ZERO   DC    X'0000'
@DATD    DSECT
TWELVE   EQU   12                          R14 OFFSET IN USER SAVEAREA
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019R8 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RWORK0   EQU   @00
RRPL     EQU   @01
R1       EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
RPARM1   EQU   @12
R14      EQU   @14
R15      EQU   @15
RWORK1   EQU   @05
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLREQ   EQU   RPLIDWD+2
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLLOC   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLNSP   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLBUFL  EQU   RPLCOMN+52
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLDDDD  EQU   RPLRBAR+4
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBUEL   EQU   ACBEXLST
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLSHAR EQU   IDAAMBL+33
AMBLWRIT EQU   AMBLSHAR
AMBLFLG1 EQU   IDAAMBL+35
AMBLCINV EQU   AMBLFLG1
AMBLFLG2 EQU   IDAAMBL+36
AMBLNUM  EQU   IDAAMBL+38
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCVAL  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCDDDD EQU   IDABUFC+8
BUFCORBA EQU   IDABUFC+12
BUFCBAD  EQU   IDABUFC+20
BUFCINV  EQU   IDABUFC+28
BUFCNXT2 EQU   IDABUFC+37
BUFXIRBA EQU   IDABUFC+40
BUFXORBA EQU   IDABUFC+44
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHASKBF EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHUPD   EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHEFLGS EQU   IDAPLH+4
PLH1ST   EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHDSCAN EQU   PLHEFLGS
PLHFLG3  EQU   IDAPLH+6
PLHAFLGS EQU   IDAPLH+7
PLHFRCNT EQU   IDAPLH+14
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHRCODE EQU   IDAPLH+41
PLHEOVR  EQU   IDAPLH+42
PLHARDB  EQU   IDAPLH+44
PLHDBUFC EQU   IDAPLH+52
PLHDIOB  EQU   IDAPLH+76
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHNRBA  EQU   IDAPLH+184
PLHIBUFC EQU   IDAPLH+188
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHKEYPT EQU   IDAPLH+248
PLHEND   EQU   IDAPLH+280
IDAAMB   EQU   0
AMBBUFC  EQU   IDAAMB+8
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBCREAT EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBINBUF EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBCAT   EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEDB   EQU   IDAAMB+52
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBLSR   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
IDAIXSPL EQU   0
IXSILN   EQU   IDAIXSPL+13
IXSBFLG  EQU   IDAIXSPL+17
IDAEDBHD EQU   0
EDBLPMBC EQU   IDAEDBHD+4
IDAEDB   EQU   0
EDBFLG1  EQU   IDAEDB+2
IDALPMB  EQU   0
LPMBFLGS EQU   IDALPMB+1
IDADIWA  EQU   0
DIWATV   EQU   IDADIWA+1
DIWFLG1  EQU   IDADIWA+4
DIWFLG2  EQU   IDADIWA+5
DIWPLH   EQU   IDADIWA+16
DIWSAVE  EQU   IDADIWA+28
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDDST   EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDNEST  EQU   IDAAMDSB+4
AMDCIPCA EQU   IDAAMDSB+12
AMDCINV  EQU   IDAAMDSB+20
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDPARDB EQU   IDAAMDSB+36
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDHRBA  EQU   IDAARDB+12
ARDERBA  EQU   IDAARDB+16
ARDPRF   EQU   IDAARDB+28
IFGEXLST EQU   0
EXLCOMN  EQU   IFGEXLST
EXLLEN   EQU   EXLCOMN+2
EXLEODF  EQU   EXLCOMN+5
EXLSYNF  EQU   EXLCOMN+10
EXLLERF  EQU   EXLCOMN+15
EXLSCIPF EQU   EXLCOMN+20
EXLUPADF EQU   EXLSCIPF
EXLSCIPS EQU   EXLUPADF
EXLSCIPA EQU   EXLUPADF
EXLSCIPK EQU   EXLUPADF
EXLSCIPP EQU   EXLCOMN+21
EXLLGNF  EQU   EXLCOMN+25
EXLJRNF  EQU   EXLCOMN+30
EXLOPNF  EQU   EXLCOMN+35
IFGEXLEF EQU   0
EXLENTRY EQU   IFGEXLEF
EXLFLAG  EQU   EXLENTRY
EXLENFL  EQU   EXLFLAG
EXLEXITP EQU   EXLENTRY+1
AM0AREA  EQU   0
USERAREA EQU   0
RBA      EQU   0
PLHKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
RPLSAVE  EQU   0
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
USERPTR  EQU   USERAREA
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00031 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
EXLEADDR EQU   EXLEXITP
@NM00071 EQU   EXLENFL
EXLLNK   EQU   EXLENFL
EXLACTM  EQU   EXLENFL
EXLSPEC  EQU   EXLENFL
EXLOPNP  EQU   EXLCOMN+36
@NM00070 EQU   EXLOPNF
EXLOPNK  EQU   EXLOPNF
EXLOPNA  EQU   EXLOPNF
EXLOPNS  EQU   EXLOPNF
EXLJRNP  EQU   EXLCOMN+31
@NM00069 EQU   EXLJRNF
EXLJRNK  EQU   EXLJRNF
EXLJRNA  EQU   EXLJRNF
EXLJRNS  EQU   EXLJRNF
EXLLGNP  EQU   EXLCOMN+26
@NM00068 EQU   EXLLGNF
EXLLGNK  EQU   EXLLGNF
EXLLGNA  EQU   EXLLGNF
EXLLGNS  EQU   EXLLGNF
EXLUPADP EQU   EXLSCIPP
@NM00067 EQU   EXLUPADF
EXLUPADK EQU   EXLSCIPK
EXLUPADA EQU   EXLSCIPA
EXLUPADS EQU   EXLSCIPS
EXLLERP  EQU   EXLCOMN+16
@NM00066 EQU   EXLLERF
EXLLERK  EQU   EXLLERF
EXLLERA  EQU   EXLLERF
EXLLERS  EQU   EXLLERF
EXLSYNP  EQU   EXLCOMN+11
@NM00065 EQU   EXLSYNF
EXLSYNK  EQU   EXLSYNF
EXLSYNA  EQU   EXLSYNF
EXLSYNS  EQU   EXLSYNF
EXLEODP  EQU   EXLCOMN+6
@NM00064 EQU   EXLEODF
EXLEODK  EQU   EXLEODF
EXLEODA  EQU   EXLEODF
EXLEODS  EQU   EXLEODF
@NM00063 EQU   EXLCOMN+4
EXLLEN2  EQU   EXLLEN
EXLSTYP  EQU   EXLCOMN+1
EXLID    EQU   EXLCOMN
ARDKEYS  EQU   IDAARDB+29
@NM00062 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDHKRBA EQU   IDAARDB+8
ARDNPTR  EQU   IDAARDB+4
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDEOD   EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00061 EQU   IDAAMDSB+41
@NM00060 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDKEYLN EQU   IDAAMDSB+8
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
@NM00059 EQU   IDADIWA+92
@NM00058 EQU   IDADIWA+88
@NM00057 EQU   IDADIWA+84
@NM00056 EQU   IDADIWA+80
@NM00055 EQU   IDADIWA+76
@NM00054 EQU   IDADIWA+72
@NM00053 EQU   IDADIWA+68
@NM00052 EQU   IDADIWA+64
@NM00051 EQU   IDADIWA+60
@NM00050 EQU   IDADIWA+56
DIWINRBA EQU   IDADIWA+52
DIWRKCT  EQU   IDADIWA+48
DIWSAVE5 EQU   DIWSAVE+16
DIWSAVE4 EQU   DIWSAVE+12
DIWSAVE3 EQU   DIWSAVE+8
DIWSAVE2 EQU   DIWSAVE+4
DIWSAVE1 EQU   DIWSAVE
DIWSPLTP EQU   IDADIWA+24
DIWBUFC  EQU   IDADIWA+20
DIWHRBA  EQU   IDADIWA+12
DIWLRBA  EQU   IDADIWA+8
@NM00049 EQU   IDADIWA+6
DIWFSPF  EQU   DIWFLG2
DIW1ST   EQU   DIWFLG1
DIWNOT1  EQU   DIWFLG1
DIWSHIFT EQU   DIWFLG1
DIWGSPC  EQU   DIWFLG1
DIWEOKR  EQU   DIWFLG1
DIWPFERR EQU   DIWFLG1
DIWCISPL EQU   DIWFLG1
DIWCAS   EQU   DIWFLG1
DIWLEN   EQU   IDADIWA+2
DIWID    EQU   IDADIWA
LPMBSST  EQU   IDALPMB+28
LPMBEXT  EQU   IDALPMB+24
@NM00048 EQU   IDALPMB+22
LPMBLKTR EQU   IDALPMB+20
LPMTPC   EQU   IDALPMB+18
LPMTRKAU EQU   IDALPMB+16
LPMBLKSZ EQU   IDALPMB+12
LPMBPTRK EQU   IDALPMB+8
LPMAUSZ  EQU   IDALPMB+4
LPMBLEN  EQU   IDALPMB+2
@NM00047 EQU   LPMBFLGS
LPMBSSTH EQU   LPMBFLGS
LPMBTOFL EQU   LPMBFLGS
LPMSS    EQU   LPMBFLGS
LPMREPL  EQU   LPMBFLGS
LPMBRPS  EQU   LPMBFLGS
LPMBID   EQU   IDALPMB
EDBTKBAL EQU   IDAEDB+20
EDBHIRBA EQU   IDAEDB+16
EDBLORBA EQU   IDAEDB+12
EDBSTTRK EQU   IDAEDB+8
EDBLPMBA EQU   IDAEDB+4
EDBM     EQU   IDAEDB+3
@NM00046 EQU   EDBFLG1
EDBPSDS  EQU   EDBFLG1
EDBTOFLW EQU   EDBFLG1
EDBLKR   EQU   EDBFLG1
@NM00045 EQU   IDAEDB
EDBLEN   EQU   IDAEDBHD+2
EDBNO    EQU   IDAEDBHD+1
EDBID    EQU   IDAEDBHD
IXSLEP   EQU   IDAIXSPL+28
IXSSEP   EQU   IDAIXSPL+24
IXSHEP   EQU   IDAIXSPL+20
IXSPEC   EQU   IDAIXSPL+19
IXSEKON  EQU   IDAIXSPL+18
@NM00044 EQU   IXSBFLG
IXSLELV  EQU   IXSBFLG
IXSSSRH  EQU   IXSBFLG
IXSNOSR  EQU   IDAIXSPL+16
IXSKLEN  EQU   IDAIXSPL+14
IXSTLN   EQU   IDAIXSPL+12
IXSARG   EQU   IDAIXSPL+8
IXSBUFC  EQU   IDAIXSPL+4
IXSSTRBA EQU   IDAIXSPL
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00043 EQU   AMBCSWD1+1
@NM00042 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
@NM00041 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00040 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00039 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00038 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBUPX   EQU   AMBINFL
@NM00037 EQU   AMBINFL
@NM00036 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00035 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00034 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00033 EQU   AMBDSORG
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
@NM00032 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00030 EQU   IDAPLH+265
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00029 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHRBUFC EQU   IDAPLH+192
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00028 EQU   IDAPLH+172
@NM00027 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHAMB   EQU   IDAPLH+108
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHRDFP  EQU   IDAPLH+68
PLHFSP   EQU   IDAPLH+64
PLHRECP  EQU   IDAPLH+60
PLHNBUFC EQU   IDAPLH+56
PLHLRECL EQU   IDAPLH+48
@NM00026 EQU   IDAPLH+43
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHBFRNO EQU   IDAPLH+15
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00025 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHSRINV EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
@NM00024 EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCHAIN EQU   IDABUFC+48
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCCPA  EQU   IDABUFC+16
BUFCAMB  EQU   BUFCPLH
@NM00023 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00022 EQU   IDABUFDR+16
BUFDBUFC EQU   IDABUFDR+12
@NM00021 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00020 EQU   IDAAMBL+40
AMBLNST  EQU   IDAAMBL+37
@NM00019 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00018 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00017 EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00016 EQU   IDAAMBL+31
@NM00015 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00014 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00013 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00012 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00011 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00010 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00009 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00008 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00007 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00006 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00005 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00004 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00003 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
@NM00002 EQU   RPLRBAR+3
@NM00001 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00189 EQU   INVLOC
@RF00283 EQU   @RC00237
@RC00271 EQU   @RC00237
@RC00239 EQU   @RC00237
@RF00299 EQU   @RC00237
@RF00338 EQU   R8EXIT
@RC00360 EQU   R8EXIT
@RF00400 EQU   @RC00201
@RT00438 EQU   BADBDY
@RT00461 EQU   R8EXIT
@RT00484 EQU   ERRORX
@RT00580 EQU   PUTEXIT2
@RT00612 EQU   PUTEXIT2
@RT00627 EQU   PUTEXIT
@RT00652 EQU   CANCPOS
@RC00667 EQU   @RC00665
@RC00719 EQU   ERRORX
@RT00724 EQU   BADBDY
@RT00751 EQU   PUTEXIT
@ENDDATA EQU   *
         END   IDA019R8,(C'PLS2210',0701,78172)
