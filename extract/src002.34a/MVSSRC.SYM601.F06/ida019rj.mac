         TITLE 'IDA019RJ - VSAM  SPLIT INDEX RECORD                    *
                        '
IDA019RJ CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'IDA019RJ  78.209'                                 0001
IDAR     DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00735-IDAR)
         ENTRY IDAR
IDAWR    DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00772-IDAWR)
         ENTRY IDAWR
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
         IDASVR14
*   IF AMBTRACE^=ZERO THEN          /* IS IDATRACE ACTIVE    @ZA29388*/
         L     @10,AMBTRACE(,RAMB)                                 0111
         LTR   @10,@10                                             0111
         BZ    @RF00111                                            0111
*     DO;                           /*                       @ZA29388*/
*       CALL IDA019ST;              /* CALL IDATRACE         @ZA29388*/
         L     @15,@CV00954                                        0113
         BALR  @14,@15                                             0113
*       GEN(DC X'000C');            /* TRACE ID              @ZA29388*/
         DC X'000C'
*     END;                          /*                       @ZA29388*/
*   RAMB=AMBLIX;                    /* SET RAMB TO INDEX SIDE        */
@RF00111 L     @10,RPLDACB(,RRPL)                                  0116
         L     @10,ACBAMBL(,@10)                                   0116
         L     RAMB,AMBLIX(,@10)                                   0116
*   RWORK1=AMBIWA;                  /* RWORK1 - WORK AREA BASE       */
         L     RWORK1,AMBIWA(,RAMB)                                0117
*   ICWADD=RWORK1;                  /* ICWADD IN FIRST WORK AREA   0118
*                                      CONTAINS POINTER TO CURRENT 0118
*                                      W.A.                          */
         ST    RWORK1,ICWADD(,RWORK1)                              0118
*   ICWSPLIT=ON;                    /* MARK WORK AREA USE IS FOR   0119
*                                      SPLIT INDEX RECORD            */
         OI    ICWSPLIT(RWORK1),B'00000010'                        0119
*   RPARM1=ICWBUFC->BUFCBAD;        /* POINT TO BUFFER               */
         L     @10,ICWBUFC(,RWORK1)                                0120
         L     RPARM1,BUFCBAD(,@10)                                0120
*   ICWLN=RPARM1->IXHLV;            /* SET INDEX LEVEL IN WA         */
         SLR   @00,@00                                             0121
         IC    @00,IXHLV(,RPARM1)                                  0121
         STH   @00,ICWLN(,RWORK1)                                  0121
*   IF ICWBUFC->BUFCDDDD=PLHSLRBA THEN/* ARE WE SPLITTING THE CURRENT
*                                      SECOND LEVEL INDEX RECORD   0122
*                                                            @X04SVES*/
         CLC   BUFCDDDD(4,@10),PLHSLRBA(RPLH)                      0122
         BNE   @RF00122                                            0122
*     PLHSLVLD=OFF;                 /* YES, MAKE IT INVALID  @X04SVES*/
         NI    PLHSLVLD(RPLH),B'11011111'                          0123
*   IF RPARM1->IXHPTLS='01'X THEN   /* IS THE POINTER LENGTH=1       */
@RF00122 CLI   IXHPTLS(RPARM1),X'01'                               0124
         BNE   @RF00124                                            0124
*     ICWPTL=ONE;                   /* YES SET LENGTH IN WA          */
         MVI   ICWPTL(RWORK1),X'01'                                0125
*   ELSE                            /* NO                            */
*     DO;                           /*                               */
         B     @RC00124                                            0126
@RF00124 DS    0H                                                  0127
*       IF RPARM1->IXHPTLS='03'X THEN/* IS PTR LENGTH 2              */
         CLI   IXHPTLS(RPARM1),X'03'                               0127
         BNE   @RF00127                                            0127
*         ICWPTL=TWO;               /* YES                           */
         MVI   ICWPTL(RWORK1),X'02'                                0128
*       ELSE                        /* NO                            */
*         ICWPTL=THREE;             /* DEFAULT TO 3                  */
         B     @RC00127                                            0129
@RF00127 MVI   ICWPTL(RWORK1),X'03'                                0129
*     END;                          /*                               */
@RC00127 DS    0H                                                  0131
*   IF PLHADDTE=OFF×ICWLN^=ICWSS THEN/* NOT ADD TO END OF DATA SET OR
*                                      HIGH LEVEL INDEX SPLIT      0131
*                                                            @X04SVES*/
@RC00124 TM    PLHADDTE(RPLH),B'00010000'                          0131
         BZ    @RT00131                                            0131
         CLC   ICWLN(2,RWORK1),@CH00053                            0131
         BE    @RF00131                                            0131
@RT00131 DS    0H                                                  0132
*     ICWNEST=AMDNEST/TWO;          /* YES, REDUCE NO. ENTRYS PER CI
*                                      TO HALF THAT OF CREATE TIME   */
         L     @10,AMBDSB(,RAMB)                                   0132
         LH    @06,AMDNEST(,@10)                                   0132
         SRDA  @06,32                                              0132
         D     @06,@CF00146                                        0132
         STH   @07,ICWNEST(,RWORK1)                                0132
*   ELSE                            /* ADD TO END AND SEQUENCE SET 0133
*                                      LEVEL                 @X04SVES*/
*     ICWNEST=AMDNEST;              /* SAME AS CREATE        @X04SVES*/
         B     @RC00131                                            0133
@RF00131 L     @10,AMBDSB(,RAMB)                                   0133
         LH    @10,AMDNEST(,@10)                                   0133
         STH   @10,ICWNEST(,RWORK1)                                0133
*   IF AMDRANGE=ON THEN             /* KEY RANGE DATA SET            */
@RC00131 L     @10,AMBDSB(,RAMB)                                   0134
         TM    AMDRANGE(@10),B'00000100'                           0134
         BNO   @RF00134                                            0134
*     ICWKRDS=ON;                   /* YES, SHOW IN WORK AREA        */
         OI    ICWKRDS(RWORK1),B'00000100'                         0135
*   ELSE                            /* N0                            */
*     ICWKRDS=OFF;                  /* SET KEY RANGE FLAG OFF        */
         B     @RC00134                                            0136
@RF00134 NI    ICWKRDS(RWORK1),B'11111011'                         0136
*   IF ICWWNF=OFF THEN              /* IS THIS A RETRY AT SPLT       */
@RC00134 TM    ICWWNF(RWORK1),B'10000000'                          0137
         BNZ   @RF00137                                            0137
*     DO;                           /* NO                            */
*       BUFCMW=OFF;                 /* TURN OFF MUST WRITE BIT       */
         L     @10,ICWBUFC(,RWORK1)                                0139
         NI    BUFCMW(@10),B'01111111'                             0139
*       RBUFC=ICWBUFC;              /* SET BUFC REGISTER AND         */
         LR    RBUFC,@10                                           0140
*I01:                                                              0141
*       DO;                         /* IDACALL(IDAFREEB)             */
I01      DS    0H                                                  0142
*         CALL IDAFREEB;            /* EXIT TO IDAFREEB              */
         L     @15,@CV00919                                        0142
         BALR  @14,@15                                             0142
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I01;                    /* FREE THE BFR          @X04SVLP*/
*       RESPECIFY                                                  0148
*        (RWORK1) RSTD;             /*                               */
*       RWORK1=AMBIWA;              /* RESET WORK AREA BASE          */
         L     RWORK1,AMBIWA(,RAMB)                                0149
*I02:                                                              0150
*       DO;                         /* IDACALL(IDAAQR)               */
I02      DS    0H                                                  0151
*         CALL IDAAQR;              /* EXIT TO IDAAQR                */
         L     @15,@CV00916                                        0151
         BALR  @14,@15                                             0151
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I02;                    /* GO GET AN RBA                 */
*       RPARM1=ICWPRBA;             /* PICK UP RBA OF RECORD TO SPLIT*/
         L     RPARM1,ICWPRBA(,RWORK1)                             0157
*       CALL IDAR;                  /* READ THE RECORD               */
         L     @15,@CA00961                                        0158
         BALR  @14,@15                                             0158
*     END;                          /*                               */
*   ELSE                            /* RETRY AT SPLITTING SO         */
*     ICWWNF=OFF;                   /* CLEAR FLAG                    */
         B     @RC00137                                            0160
@RF00137 NI    ICWWNF(RWORK1),B'01111111'                          0160
*   RPARM1=ICWBUFC->BUFCBAD;        /* POINT TO INDEX BUFFER         */
@RC00137 L     @10,ICWBUFC(,RWORK1)                                0161
         L     RPARM1,BUFCBAD(,@10)                                0161
*   RESPECIFY                                                      0162
*     RWORK2 RSTD;                  /*                       @X04SVES*/
*   RWORK2=RPARM1+RPARM1->IXHLEO;   /* POINT TO LAST ENTRY IN THE  0163
*                                      RECORD                @X04SVES*/
         LR    RWORK2,RPARM1                                       0163
         AH    RWORK2,IXHLEO(,RPARM1)                              0163
*   IF RWORK2->IBFLPF=ZERO&         /* IF LAST ENTRY         @X04SVES*/
*       RWORK2->IBFLPL=ZERO THEN    /* IS A DUMMY, SET@X04SVES       */
         CLI   IBFLPF(RWORK2),0                                    0164
         BNE   @RF00164                                            0164
         CLI   IBFLPL(RWORK2),0                                    0164
         BNE   @RF00164                                            0164
*     RPARM1->IXHLV=ZERO;           /* LEVEL TO ZERO SO AS TO      0165
*                                      REMEMBER DUMMY        @X04SVES*/
         MVI   IXHLV(RPARM1),X'00'                                 0165
*   RESPECIFY                                                      0166
*     RWORK2 UNRSTD;                /*                       @X04SVES*/
@RF00164 DS    0H                                                  0167
*   PLHSAVE6=ICWTPTR;               /* GET SPLIT PT. TO VARY         */
         L     @10,ICWTPTR(,RWORK1)                                0167
         ST    @10,PLHSAVE6(,RPLH)                                 0167
*   IF RPARM1->IXHSEO=RPARM1->IXHLEO THEN/* ARE ANY SECTION          */
         CLC   IXHSEO(2,RPARM1),IXHLEO(RPARM1)                     0168
         BNE   @RF00168                                            0168
*     DO;                           /* LLS PRESENT -- NO             */
*       RPARM1->IXHSEO=RPARM1->IXHLL-/* SET RIGHT OFFSET TO          */
*           RPARM1->IXHFLPLN;       /* LOW KEY ENTRY                 */
         LH    @10,IXHLL(,RPARM1)                                  0170
         N     @10,@CF01056                                        0170
         SLR   @00,@00                                             0170
         IC    @00,IXHFLPLN(,RPARM1)                               0170
         SLR   @10,@00                                             0170
         STH   @10,IXHSEO(,RPARM1)                                 0170
*     END;                          /*                               */
*   ELSE                            /* LLS ARE PRESENT SO GO         */
*     CALL DELSECT;                 /* REMOVE SECTION PTRS. FROM THE
*                                      RECORD                        */
         B     @RC00168                                            0172
@RF00168 BAL   @14,DELSECT                                         0172
*/*                                                                  */
*/*     UNCOMPRESS THE LOW KEY FOLLOWING THE SPLIT POINT AND         */
*/*     PLACE IT INTO THE WORK AREA                                  */
*/*                                                                  */
*                                                                  0173
*   RESPECIFY                                                      0173
*    (RWORK2,                                                      0173
*     RWORK3,                                                      0173
*     RWORK4,                                                      0173
*     RWORK5) RSTD;                 /*                               */
@RC00168 DS    0H                                                  0174
*   RWORK4=RPARM1+RPARM1->IXHSEO;   /* POINT TO RIGHTMOST KEY        */
         LR    RWORK4,RPARM1                                       0174
         AH    RWORK4,IXHSEO(,RPARM1)                              0174
*RJC:                                                              0175
*   RWORK2=ADDR(ICWKEY1)+           /* POINT TO POSITION TO          */
*       RWORK4->IBFLPF;             /* START STORING KEY             */
RJC      LA    RWORK2,ICWKEY1(,RWORK1)                             0175
         SLR   @10,@10                                             0175
         IC    @10,IBFLPF(,RWORK4)                                 0175
         ALR   RWORK2,@10                                          0175
*   IF RWORK4->IBFLPF=AMDKEYLN THEN /* SPANNED RECORD ENTRY  @X04SVES*/
         L     @15,AMBDSB(,RAMB)                                   0176
         CH    @10,AMDKEYLN(,@15)                                  0176
         BE    @RT00176                                            0176
*     GO TO RJD;                    /* YES                   @X04SVES*/
*   ICWKEY1L=RWORK4->IBFLPF+        /* COMPUTE AND STORE KEY         */
*       RWORK4->IBFLPL;             /* LENGTH IN WORK AREA           */
         SLR   @15,@15                                             0178
         IC    @15,IBFLPL(,RWORK4)                                 0178
         ALR   @10,@15                                             0178
         STH   @10,ICWKEY1L(,RWORK1)                               0178
*   RWORK3=RWORK4->IBFLPL;          /* SET LENGTH OF MOVE            */
         LR    RWORK3,@15                                          0179
*   RWORK5=RWORK3;                  /* DITTO                         */
         LR    RWORK5,RWORK3                                       0180
*   RWORK4=RWORK4-RWORK3;           /* SET 'FROM' ADDRESS            */
         SLR   RWORK4,RWORK3                                       0181
*   GEN(MVCL  RWORK2,RWORK4);       /* MOVE CHARACTERS TO WA         */
         MVCL  RWORK2,RWORK4
*   IF(RWORK4-RPARM1)^<PLHSAVE6 THEN/* HAVE WE GONE PAST THE SPLIT 0183
*                                      POINT                         */
         LR    @10,RWORK4                                          0183
         SLR   @10,RPARM1                                          0183
         C     @10,PLHSAVE6(,RPLH)                                 0183
         BL    @RF00183                                            0183
*     DO;                           /* NO                            */
*RJD:                                                              0185
*       RWORK3=RWORK4-RWORK4->IBFLPL-/* MOVE BACK TO THE NEXT        */
*           RPARM1->IXHFLPLN;       /* INDEX ENTRY TO RIGHT          */
RJD      LR    RWORK3,RWORK4                                       0185
         SLR   @10,@10                                             0185
         IC    @10,IBFLPL(,RWORK4)                                 0185
         SLR   RWORK3,@10                                          0185
         SLR   @10,@10                                             0185
         IC    @10,IXHFLPLN(,RPARM1)                               0185
         SLR   RWORK3,@10                                          0185
*       RWORK4=RWORK3;              /*                               */
         LR    RWORK4,RWORK3                                       0186
*       GO TO RJC;                  /* GO PROCESS NEXT KEY           */
         B     RJC                                                 0187
*     END;                          /*                               */
*   RESPECIFY                                                      0189
*    (RWORK3,                                                      0189
*     RWORK5) UNRSTD;               /*                               */
@RF00183 DS    0H                                                  0190
*   RWORK2=RPARM1+PLHSAVE6;         /* POINT TO SPLIT        @X04SVES*/
         L     @10,PLHSAVE6(,RPLH)                                 0190
         LR    RWORK2,RPARM1                                       0190
         ALR   RWORK2,@10                                          0190
*   RPARM1->IXHSEO=PLHSAVE6-        /* SET DISPLACE-         @X04SVES*/
*       RWORK2->IBFLPL-             /* MENT TO THE           @X04SVES*/
*       RPARM1->IXHFLPLN;           /* RIGHTMOST ENTRY IN THE BLOCK
*                                                            @X04SVES*/
         SLR   @09,@09                                             0191
         IC    @09,IBFLPL(,RWORK2)                                 0191
         SLR   @10,@09                                             0191
         SLR   @09,@09                                             0191
         IC    @09,IXHFLPLN(,RPARM1)                               0191
         SLR   @10,@09                                             0191
         STH   @10,IXHSEO(,RPARM1)                                 0191
*   RFY                                                            0192
*     RWORK2 UNRSTD;                /*                       @X04SVES*/
*/*                                                                  */
*/* COMPUTE SPACE REQUIRED TO HOLD POINTERS                          */
*/*                                                                  */
*                                                                  0193
*   RESPECIFY                                                      0193
*    (RWORK0,                                                      0193
*     RWORK5) RSTD;                 /*                               */
*   IF ICWLN=ICWSS THEN             /* IS THIS SEQ SET LEVEL         */
         CLC   ICWLN(2,RWORK1),@CH00053                            0194
         BNE   @RF00194                                            0194
*     DO;                           /* YES                           */
*       RWORK0=AMBLDTA->AMBDSB->AMDCIPCA;/* PICK UP CI/CA            */
         L     @10,RPLDACB(,RRPL)                                  0196
         L     @10,ACBAMBL(,@10)                                   0196
         L     @10,AMBLDTA(,@10)                                   0196
         L     @10,AMBDSB(,@10)                                    0196
         LH    RWORK0,AMDCIPCA(,@10)                               0196
*     END;                          /*                               */
*   ELSE                            /* NOT SEQ SET LEVEL             */
*     CALL COUNT;                   /* GO COUNT ENTRYS/BLOCK         */
         B     @RC00194                                            0198
@RF00194 BAL   @14,COUNT                                           0198
*   RWORK0=RWORK0*ICWPTL;           /* COMPUTE THE LENGTH            */
@RC00194 SLR   @10,@10                                             0199
         IC    @10,ICWPTL(,RWORK1)                                 0199
         LR    @07,RWORK0                                          0199
         MR    @06,@10                                             0199
         LR    RWORK0,@07                                          0199
*   RESPECIFY                                                      0200
*    (RWORK5) UNRSTD;               /*                               */
*   PLHSAVE5=RPARM1+RWORK0+         /* COMPUTE AND SAVE THE          */
*       LENGTH(IDAIXH)-ICWPTL;      /* ADDRESS OF THE RIGHTMOST    0201
*                                      POINTER                       */
         LA    @09,24                                              0201
         LR    @15,RPARM1                                          0201
         ALR   @15,RWORK0                                          0201
         ALR   @15,@09                                             0201
         SLR   @15,@10                                             0201
         ST    @15,PLHSAVE5(,RPLH)                                 0201
*/*                                                                  */
*/* DETERMINE IF SPACE ENOUGH EXISTS FOR POINTERS                    */
*/*                                                                  */
*                                                                  0202
*   RWORK4=RPARM1+RPARM1->IXHLEO;   /* POINT TO THE LEFTMOST ENTRY   */
         LR    RWORK4,RPARM1                                       0202
         AH    RWORK4,IXHLEO(,RPARM1)                              0202
*   PLHSAVE1=RWORK4-RWORK4->IBFLPL; /* SAVE BEGINNING ADDRESS OF   0203
*                                      BLOCK                         */
         LR    @10,RWORK4                                          0203
         SLR   @15,@15                                             0203
         IC    @15,IBFLPL(,RWORK4)                                 0203
         SLR   @10,@15                                             0203
         ST    @10,PLHSAVE1(,RPLH)                                 0203
*   IF(PLHSAVE1-RPARM1-LENGTH(IDAIXH))/* IS THERE ROOM BETWEEN       */
*       <RWORK0 THEN                /* HEADER AND BLOCK              */
         LR    @15,@10                                             0204
         SLR   @15,RPARM1                                          0204
         LR    @14,@15                                             0204
         SLR   @14,@09                                             0204
         CLR   @14,RWORK0                                          0204
         BNL   @RF00204                                            0204
*     DO;                           /* NO, BLOCK MUST MOVE           */
*       RESPECIFY                                                  0206
*        (RWORK4) UNRSTD;           /*                               */
*       RWORK0=RWORK0-(PLHSAVE1-RPARM1/* COMPUTE LENGTH OF MOVE      */
*           -LENGTH(IDAIXH));       /* TO GIVE ENOUGH SPACE          */
         SLR   @09,@15                                             0207
         ALR   RWORK0,@09                                          0207
*       PLHSAVE2=RPARM1+RPARM1->IXHSEO/* COMPUTE ADDRESS OF          */
*           +RPARM1->IXHFLPLN;      /* SPACE AT RIGHT OF BLK         */
         LR    @15,RPARM1                                          0208
         AH    @15,IXHSEO(,RPARM1)                                 0208
         SLR   @14,@14                                             0208
         IC    @14,IXHFLPLN(,RPARM1)                               0208
         ALR   @15,@14                                             0208
         ST    @15,PLHSAVE2(,RPLH)                                 0208
*       PLHSAVE3=PLHSAVE2-PLHSAVE1; /* COMPUTE LENGTH OF BLOCK       */
         LCR   @10,@10                                             0209
         ALR   @10,@15                                             0209
         ST    @10,PLHSAVE3(,RPLH)                                 0209
*       PLHSAVE4=RPARM1+RPARM1->IXHLL/* COMPUTE LENGTH OF SPACE      */
*           -PLHSAVE2;              /* AT RIGHT END OF BLOCK         */
         LR    @10,RPARM1                                          0210
         LH    @14,IXHLL(,RPARM1)                                  0210
         N     @14,@CF01056                                        0210
         ALR   @10,@14                                             0210
         SLR   @10,@15                                             0210
         ST    @10,PLHSAVE4(,RPLH)                                 0210
*       IF RWORK0>PLHSAVE4 THEN     /* IS THERE ENOUGH SPACE IN THE
*                                      BUFFER                        */
         CLR   RWORK0,@10                                          0211
         BNH   @RF00211                                            0211
*RJA:                                                              0212
*         DO;                       /* NO                            */
RJA      DS    0H                                                  0213
*           RESPECIFY                                              0213
*            (R15) RSTD;            /*                               */
*           R15=ICWNOFIT;           /* SET ERROR CODE IN R15         */
         LA    R15,8                                               0214
*           ICWWNF=ON;              /* SET RETRY INDICATOR           */
         OI    ICWWNF(RWORK1),B'10000000'                          0215
*           CALL EXIT;              /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0216
*           RESPECIFY                                              0217
*            (R15) UNRSTD;          /*                               */
*         END;                      /*                               */
*       RESPECIFY                                                  0219
*        (RWORK2,                                                  0219
*         RWORK3,                                                  0219
*         RWORK4,                                                  0219
*         RWORK5) RSTD;             /*                               */
@RF00211 DS    0H                                                  0220
*       IF RWORK0^<PLHSAVE3 THEN    /* IS LENGTH OF MOVE AT LEAST AS
*                                      LONG AS THE BLOCK             */
         L     @10,PLHSAVE3(,RPLH)                                 0220
         CLR   RWORK0,@10                                          0220
         BL    @RF00220                                            0220
*         DO;                       /* YES, 1 MOVE REQD.             */
*           RWORK4=PLHSAVE1;        /* SET 'FROM' ADDRESS            */
         L     RWORK4,PLHSAVE1(,RPLH)                              0222
*           RWORK2=RWORK4+RWORK0;   /* SET 'TO' ADDRESS              */
         LR    RWORK2,RWORK4                                       0223
         ALR   RWORK2,RWORK0                                       0223
*           RWORK3=PLHSAVE3;        /* SET LENGTH OF MOVE            */
         LR    RWORK3,@10                                          0224
*           RWORK5=RWORK3;          /*                               */
         LR    RWORK5,RWORK3                                       0225
*           GEN(MVCL RWORK2,RWORK4);/* MOVE THE BLOCK RIGHT          */
         MVCL RWORK2,RWORK4
*         END;                      /*                               */
*       ELSE                        /* MOVE IS OVERLAPPING           */
*         DO;                       /*                               */
         B     @RC00220                                            0228
@RF00220 DS    0H                                                  0229
*           RWORK4=PLHSAVE2-RWORK0; /* INITIALIZE            @YA03199
*                                      'FROM' ADD.           @YA03199*/
         L     @10,PLHSAVE2(,RPLH)                                 0229
         LR    RWORK4,@10                                          0229
         SLR   RWORK4,RWORK0                                       0229
*           RWORK2=PLHSAVE2;        /* INITIALIZE 'TO' ADDRESS       */
         LR    RWORK2,@10                                          0230
*           DO WHILE RWORK4+RWORK0^<PLHSAVE1;/* LOOP UNTIL   @YA03199
*                                      'FROM' ADDRESS + LENGTH OF  0231
*                                      MOVE IS OUT OF RANGE OF BLOCK
*                                      TO BE MOVED                   */
         B     @DE00231                                            0231
@DL00231 DS    0H                                                  0232
*             RWORK3=RWORK0;        /* SETMOVE LENGTH        @YA03199*/
         LR    RWORK3,RWORK0                                       0232
*             IF RWORK4<PLHSAVE1 THEN/* IF FROM ADD.         @X04SVES*/
         L     @10,PLHSAVE1(,RPLH)                                 0233
         CR    RWORK4,@10                                          0233
         BNL   @RF00233                                            0233
*               DO;                 /* OUT OF BLOCK          @X04SVES*/
*                 RWORK3=RWORK2-PLHSAVE1;/* FIND LENGTH      @X04SVES*/
         LR    RWORK3,RWORK2                                       0235
         SLR   RWORK3,@10                                          0235
*                 RWORK2=RWORK2+(PLHSAVE1-RWORK4);/* SET NEW 'TO'  0236
*                                      ADDRESS               @X04SVES*/
         LR    @15,@10                                             0236
         SLR   @15,RWORK4                                          0236
         ALR   RWORK2,@15                                          0236
*                 RWORK4=PLHSAVE1;  /* SET FROM ADD          @X04SVES*/
         LR    RWORK4,@10                                          0237
*               END;                /*                       @X04SVES*/
*             RWORK5=RWORK3;        /* DITTO                         */
@RF00233 LR    RWORK5,RWORK3                                       0239
*             GEN(MVCL  RWORK2,RWORK4);/* MOVE A SECTION OF THE BLOCK*/
         MVCL  RWORK2,RWORK4
*             RWORK2=RWORK2-TWO*RWORK0;/* MOVE 'TO'          @YA03199
*                                      ADDRESS BACK          @YA03199
*                                      FOR NEXT SECTION              */
         LR    @10,RWORK0                                          0241
         ALR   @10,@10                                             0241
         SLR   RWORK2,@10                                          0241
*             RWORK4=RWORK2-RWORK0; /* SAME FOR 'FROM'@YA03199     0242
*                                      ADDRESS               @YA03199*/
         LR    RWORK4,RWORK2                                       0242
         SLR   RWORK4,RWORK0                                       0242
*           END;                    /*                               */
@DE00231 LR    @10,RWORK4                                          0243
         ALR   @10,RWORK0                                          0243
         CL    @10,PLHSAVE1(,RPLH)                                 0243
         BNL   @DL00231                                            0243
*           IF PLHSAVE2+RWORK0-PLHSAVE3>/* IS THE SPACE      @YA03199*/
*               PLHSAVE5+ICWPTL THEN/* AT THE                @YA03199
*                                      RIGHT OF THE BLOCK = TO THE 0244
*                                      SPACE THE BLOCK NEEDS TO MOVE */
         LR    @10,RWORK0                                          0244
         AL    @10,PLHSAVE2(,RPLH)                                 0244
         L     @15,PLHSAVE3(,RPLH)                                 0244
         SLR   @10,@15                                             0244
         SLR   @14,@14                                             0244
         IC    @14,ICWPTL(,RWORK1)                                 0244
         AL    @14,PLHSAVE5(,RPLH)                                 0244
         CLR   @10,@14                                             0244
         BNH   @RF00244                                            0244
*             DO;                   /* NO, SO MOVE BLOCK BACK TO THE
*                                      LEFT                          */
*               RWORK4=PLHSAVE2+RWORK0-PLHSAVE3;/* SET 'FROM'      0246
*                                                            @YA03199
*                                      ADDRESS               @YA03199*/
         LR    RWORK4,@10                                          0246
*               RWORK2=PLHSAVE5+ICWPTL;/* SET 'TO' ADDRESS   @YA03199*/
         LR    RWORK2,@14                                          0247
*               RWORK3=PLHSAVE3;    /* SET MOVE LENGTH               */
         LR    RWORK3,@15                                          0248
*               RWORK5=RWORK3;      /* DITTO                         */
         LR    RWORK5,RWORK3                                       0249
*               GEN(MVCL  RWORK2,RWORK4);/* MOVE BLOCK TO LEFT       */
         MVCL  RWORK2,RWORK4
*             END;                  /*                               */
*         END;                      /*                               */
@RF00244 DS    0H                                                  0253
*       RESPECIFY                                                  0253
*        (RWORK2,                                                  0253
*         RWORK3,                                                  0253
*         RWORK4,                                                  0253
*         RWORK5) UNRSTD;           /*                               */
@RC00220 DS    0H                                                  0254
*       RPARM1->IXHLEO=RPARM1->IXHLEO/* ADJUST DISP. TO LEFT         */
*           +RWORK0;                /* ENTRY BY MOVE LENGTH          */
         LR    @10,RWORK0                                          0254
         LH    @15,IXHLEO(,RPARM1)                                 0254
         ALR   @10,@15                                             0254
         STH   @10,IXHLEO(,RPARM1)                                 0254
*       RPARM1->IXHSEO=RPARM1->IXHSEO/* ADJUST DISP. TO RIGHT        */
*           +RWORK0;                /* ENTRY BY MOVE LENGTH          */
         LR    @10,RWORK0                                          0255
         LH    @15,IXHSEO(,RPARM1)                                 0255
         ALR   @10,@15                                             0255
         STH   @10,IXHSEO(,RPARM1)                                 0255
*     END;                          /*                               */
*   ELSE                            /* THERE EXISTS ADEQUATE SPACE 0257
*                                      BETWEEN HEADER                */
*     DO;                           /* AND BLOCK SO CLEAR IT         */
         B     @RC00204                                            0257
@RF00204 DS    0H                                                  0258
*       RESPECIFY                                                  0258
*        (RWORK2,                                                  0258
*         RWORK3,                                                  0258
*         RWORK4,                                                  0258
*         RWORK5) RSTD;             /*                               */
*       RWORK2=RPARM1+LENGTH(IDAIXH);/* SET POINT TO BEGIN ZERO      */
         LA    RWORK2,24                                           0259
         ALR   RWORK2,RPARM1                                       0259
*       RWORK3=PLHSAVE1-RWORK2;     /* COMPUTE LENGTH TO ZERO        */
         L     RWORK3,PLHSAVE1(,RPLH)                              0260
         SLR   RWORK3,RWORK2                                       0260
*       RWORK5=ZERO;                /* SET PROPAGATION CHAR.         */
         SLR   RWORK5,RWORK5                                       0261
*       GEN(MVCL  RWORK2,RWORK4);   /* CLEAR ENTIRE FREESPACE        */
         MVCL  RWORK2,RWORK4
*     END;                          /*                               */
*/*                                                                  */
*/* SPACE FOR POINTERS WAS AVAILABLE OR WAS MADE AVAILABLE --        */
*/* NEXT, PLACE POINTERS INTO THAT SPACE                             */
*/*                                                                  */
*                                                                  0264
*   IF ICWLN=ICWSS THEN             /* IS THIS SEQ SET LEVEL         */
@RC00204 CLC   ICWLN(2,RWORK1),@CH00053                            0264
         BNE   @RF00264                                            0264
*     DO;                           /* YES                           */
*       RESPECIFY                                                  0266
*        (RWORK0,                                                  0266
*         RWORK2) UNRSTD;           /*                               */
*/*                                                                  */
*/* BUILD A SET OF FREE SPACE POINTERS AND PLACE IN RECORD FOLLOWING */
*/*  THE HEADER                                                      */
*/*                                                                  */
*                                                                  0267
*       RWORK4=RPARM1->IXHPTLS;     /* GET POINTER MASK FROM HEADER  */
         SLR   RWORK4,RWORK4                                       0267
         IC    RWORK4,IXHPTLS(,RPARM1)                             0267
*       RWORK5=RPARM1+LENGTH(IDAIXH);/* SET INITIAL ADDRESS AFTER  0268
*                                      HEADER                        */
         LA    RWORK5,24                                           0268
         ALR   RWORK5,RPARM1                                       0268
*       DO RWORK3=IMWCIMVN-ONE BY-ONE TO ZERO;/* PLACE POINTERS      */
         L     @10,ICWCHN(,RWORK1)                                 0269
         LH    RWORK3,IMWCIMVN(,@10)                               0269
         BCTR  RWORK3,0                                            0269
         B     @DE00269                                            0269
@DL00269 DS    0H                                                  0270
*         GEN(EX  RWORK4,STOREPNT); /* NOT USED IN CASE SPLIT        */
         EX  RWORK4,STOREPNT
*         RWORK5=RWORK5+ICWPTL;     /* POINT MOVED BECAUSE OF        */
         SLR   @10,@10                                             0271
         IC    @10,ICWPTL(,RWORK1)                                 0271
         ALR   RWORK5,@10                                          0271
*       END;                        /* NO FIT CONDITION              */
         BCTR  RWORK3,0                                            0272
@DE00269 LTR   RWORK3,RWORK3                                       0272
         BNM   @DL00269                                            0272
*       DO RWORK3=(AMBLDTA->AMBDSB->AMDCIPCA)/* LOOP TO PLACE A SET  */
*             -ONE BY-ONE TO IMWCIMVN;/* OF FREESPACE POINTERS       */
         L     @10,RPLDACB(,RRPL)                                  0273
         L     @10,ACBAMBL(,@10)                                   0273
         L     @10,AMBLDTA(,@10)                                   0273
         L     @10,AMBDSB(,@10)                                    0273
         LH    RWORK3,AMDCIPCA(,@10)                               0273
         BCTR  RWORK3,0                                            0273
         B     @DE00273                                            0273
@DL00273 DS    0H                                                  0274
*         GEN(EX  RWORK4,STOREPNT); /* STORE THE POINTER             */
         EX  RWORK4,STOREPNT
*         RWORK5=RWORK5+ICWPTL;     /* MOVE TO NEXT STORE ADD.       */
         SLR   @10,@10                                             0275
         IC    @10,ICWPTL(,RWORK1)                                 0275
         ALR   RWORK5,@10                                          0275
*       END;                        /*                               */
         BCTR  RWORK3,0                                            0276
@DE00273 L     @10,ICWCHN(,RWORK1)                                 0276
         CH    RWORK3,IMWCIMVN(,@10)                               0276
         BNL   @DL00273                                            0276
*       RPARM1->IXHFSO=RWORK5-RPARM1;/* READJUST FREESPACE OFFSET IN
*                                      HEADER                        */
         LR    @10,RWORK5                                          0277
         SLR   @10,RPARM1                                          0277
         STH   @10,IXHFSO(,RPARM1)                                 0277
*     END;                          /*                               */
*   ELSE                            /* NOT SEQ SET SO EXISTING       */
*     DO;                           /* POINTERS WILL BE MOVED        */
         B     @RC00264                                            0279
@RF00264 DS    0H                                                  0280
*       RESPECIFY                                                  0280
*        (RWORK3,                                                  0280
*         RWORK4,                                                  0280
*         RWORK5) UNRSTD;           /* FROM BLOCK TO F.S.            */
*       CALL MOVEPTRR;              /* GO MOVE POINTERS              */
         BAL   @14,MOVEPTRR                                        0281
*     END;                          /*                               */
*   CALL DELPTR;                    /* GO REMOVE ALL POINTERS        */
@RC00264 BAL   @14,DELPTR                                          0283
*   PLHSAVE1=RPARM1+RPARM1->IXHLEO; /* CONVERT DISP. OF LEFT ENTRY TO
*                                      AN ADDRESS AND SAVE IT        */
         LR    @10,RPARM1                                          0284
         AH    @10,IXHLEO(,RPARM1)                                 0284
         ST    @10,PLHSAVE1(,RPLH)                                 0284
*   PLHSAVE2=RPARM1+RPARM1->IXHSEO; /* CONVERT DISPLACEMENT OF RIGHT
*                                      ENTRY TO AN ADDRESS AND SAVE
*                                      IT                            */
         LR    @10,RPARM1                                          0285
         AH    @10,IXHSEO(,RPARM1)                                 0285
         ST    @10,PLHSAVE2(,RPLH)                                 0285
*   CALL BUILDREC;                  /* GO CONVERT BLOCK TO AN INDEX
*                                      RECORD                        */
         BAL   @14,BUILDREC                                        0286
*   IF RPARM1=ZERO THEN             /* IS RECORD SATISFACTORY        */
         LTR   RPARM1,RPARM1                                       0287
         BNZ   @RF00287                                            0287
*     DO;                           /* NO                            */
*       GO TO RJA;                  /* GO START ALL OVER             */
         B     RJA                                                 0289
*     END;                          /*                               */
*   IF RPARM1->IXHLV^=ZERO THEN     /* IF THIS RECORD CHAINS         */
@RF00287 CLI   IXHLV(RPARM1),0                                     0291
         BE    @RF00291                                            0291
*     DO;                           /* AHEAD THEN                    */
*I03:                                                              0293
*       DO;                         /* IDACALL(IDAER)                */
I03      DS    0H                                                  0294
*         CALL IDAER;               /* EXIT TO IDAER                 */
         L     @15,@CV00918                                        0294
         BALR  @14,@15                                             0294
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I03;                    /* ERASE THE DUMMY ENTRY         */
*       RESPECIFY                                                  0300
*        (RWORK1) RSTD;             /*                               */
*       RPARM1=ICWBUFC->BUFCBAD;    /* RESTORE BUFFER PTR            */
         L     @10,ICWBUFC(,RWORK1)                                0301
         L     RPARM1,BUFCBAD(,@10)                                0301
*     END;                          /*                               */
*   IF ICWLN=ICWSS THEN             /* IS THIS SEQ SET LEVEL         */
@RF00291 CLC   ICWLN(2,RWORK1),@CH00053                            0303
         BNE   @RF00303                                            0303
*     DO;                           /* YES                           */
*       IF RPARM1->IXHLV=ZERO&      /* IF THIS IS THE LAST           */
*           (RPARM1->IXHLEO-        /* SEQ SET RECORD AND            */
*           RPARM1->IXHFSO-         /* NOT ENOUGH ROOM EXISTS        */
*           LENGTH(IXSELL)<AMDKEYLN) THEN/* TO CHANGE DUMMY TO A     */
         CLI   IXHLV(RPARM1),0                                     0305
         BNE   @RF00305                                            0305
         LH    @10,IXHLEO(,RPARM1)                                 0305
         SH    @10,IXHFSO(,RPARM1)                                 0305
         BCTR  @10,0                                               0305
         BCTR  @10,0                                               0305
         L     @15,AMBDSB(,RAMB)                                   0305
         CH    @10,AMDKEYLN(,@15)                                  0305
         BL    @RT00305                                            0305
*         GO TO RJA;                /* FULL KEY, GET OUT NOW         */
*       RPARM1->IXHBRBA=ICWTBASE;   /* SET NEW BASE RBA IN HEADER    */
@RF00305 L     @10,ICWTBASE(,RWORK1)                               0307
         ST    @10,IXHBRBA(,RPARM1)                                0307
*     END;                          /*                               */
*   RPARM1->IXHLV=ICWLN;            /* SET LEVEL             @X04SVES*/
@RF00303 LH    @10,ICWLN(,RWORK1)                                  0309
         STC   @10,IXHLV(,RPARM1)                                  0309
*   RESPECIFY                                                      0310
*     R15 RSTD;                     /* PROTECT REGISTER 15           */
*I04:                                                              0311
*   DO;                             /* IDACALL(IDASPACE)             */
I04      DS    0H                                                  0312
*     CALL IDASPACE;                /* EXIT TO IDASPACE              */
         L     @15,@CV00923                                        0312
         BALR  @14,@15                                             0312
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I04;                        /* GO CHECK TO ASSURE            */
*   RESPECIFY                                                      0318
*     RWORK1 RSTD;                  /* ADEQUATE FREESPACE            */
*   IF R15^=ZERO THEN               /* WAS IT SUFFICIENT             */
         LTR   R15,R15                                             0319
         BNZ   @RT00319                                            0319
*     GO TO RJA;                    /* NO, RETURN TO CALLER          */
*   RESPECIFY                                                      0321
*     R15 UNRSTD;                   /* FREE REGISTER                 */
*   ICWBUFC->BUFCMW=ON;             /* SET MUST WRITE BIT ON         */
         L     @10,ICWBUFC(,RWORK1)                                0322
         OI    BUFCMW(@10),B'10000000'                             0322
*   BUFCORBA=ICWCRBA;               /* SET RBA TO NEW RBA FOR THIS 0323
*                                      NEW RECORD                    */
         L     @15,ICWCRBA(,RWORK1)                                0323
         ST    @15,BUFCORBA(,@10)                                  0323
*   BUFCDDDD=ICWCRBA;               /* LET BUFF MGR THINK HE READ  0324
*                                      THIS NEW RECORD               */
         ST    @15,BUFCDDDD(,@10)                                  0324
*   BUFXIRBA=ICWCRBA;               /* SET XCL CTL RBA@X04SVES       */
         ST    @15,BUFXIRBA(,@10)                                  0325
*   BUFCVAL=ON;                     /* SHOW RBA VALID        @X04SVES*/
         OI    BUFCVAL(@10),B'00000100'                            0326
*   CALL IDAWR;                     /*                               */
         L     @15,@CA00979                                        0327
         BALR  @14,@15                                             0327
*   IF PLHADDTE=OFF×ICWLN^=ICWSS THEN/* NOT ADD TO END OR HI LVL   0328
*                                                            @X04SVES*/
         TM    PLHADDTE(RPLH),B'00010000'                          0328
         BZ    @RT00328                                            0328
         CLC   ICWLN(2,RWORK1),@CH00053                            0328
         BE    @RF00328                                            0328
@RT00328 DS    0H                                                  0329
*     ICWNEST=AMDNEST/TWO;          /* REDUCE NO. ENTRYS/SECT. TO  0329
*                                      HALF THAT OF CREATE           */
         L     @10,AMBDSB(,RAMB)                                   0329
         LH    @06,AMDNEST(,@10)                                   0329
         SRDA  @06,32                                              0329
         D     @06,@CF00146                                        0329
         STH   @07,ICWNEST(,RWORK1)                                0329
*   ELSE                            /* ADD TO END            @X04SVES*/
*     ICWNEST=AMDNEST;              /* SAME AS CREATE        @X04SVES*/
         B     @RC00328                                            0330
@RF00328 L     @10,AMBDSB(,RAMB)                                   0330
         LH    @10,AMDNEST(,@10)                                   0330
         STH   @10,ICWNEST(,RWORK1)                                0330
*RJL:                                                              0331
*   RPARM1=ICWPRBA;                 /* PICK UP RBA AND GO            */
@RC00328 DS    0H                                                  0331
RJL      L     RPARM1,ICWPRBA(,RWORK1)                             0331
*   CALL IDAR;                      /* READ ORGINAL RECORD           */
         L     @15,@CA00961                                        0332
         BALR  @14,@15                                             0332
*   RPARM1=ICWBUFC->BUFCBAD;        /* POINT TO BUFFER               */
         L     @10,ICWBUFC(,RWORK1)                                0333
         L     RPARM1,BUFCBAD(,@10)                                0333
*   PLHSAVE6=ICWTPTR;               /* SAVE SPLT. PT. TO VARY        */
         L     @10,ICWTPTR(,RWORK1)                                0334
         ST    @10,PLHSAVE6(,RPLH)                                 0334
*   IF RPARM1->IXHSEO=RPARM1->IXHLEO THEN/* ARE ANY SECTION          */
         CLC   IXHSEO(2,RPARM1),IXHLEO(RPARM1)                     0335
         BNE   @RF00335                                            0335
*     DO;                           /* LLS PRESENT -- NO             */
*       RPARM1->IXHSEO=RPARM1->IXHLL-/* SET RIGHT OFFSET TO          */
*           RPARM1->IXHFLPLN;       /* LOW KEY ENTRY                 */
         LH    @10,IXHLL(,RPARM1)                                  0337
         N     @10,@CF01056                                        0337
         SLR   @00,@00                                             0337
         IC    @00,IXHFLPLN(,RPARM1)                               0337
         SLR   @10,@00                                             0337
         STH   @10,IXHSEO(,RPARM1)                                 0337
*     END;                          /*                               */
*   ELSE                            /* LLS ARE PRESENT SO GO         */
*     CALL DELSECT;                 /* REMOVE THEM                   */
         B     @RC00335                                            0339
@RF00335 BAL   @14,DELSECT                                         0339
*   RESPECIFY                                                      0340
*    (RWORK2,                                                      0340
*     RWORK3,                                                      0340
*     RWORK4,                                                      0340
*     RWORK5) RSTD;                 /*                               */
@RC00335 DS    0H                                                  0341
*   RWORK4=RPARM1+RPARM1->IXHSEO;   /* POINT TO RIGHTMOST ENTRY      */
         LR    RWORK4,RPARM1                                       0341
         AH    RWORK4,IXHSEO(,RPARM1)                              0341
*   DO WHILE RWORK4->IBFLPF=AMDKEYLN;/* SPANNED RCD          @X04SVES*/
         B     @DE00342                                            0342
@DL00342 DS    0H                                                  0343
*     RWORK4=RWORK4-RPARM1->IXHFLPLN;/* YES                  @X04SVES*/
         SLR   @10,@10                                             0343
         IC    @10,IXHFLPLN(,RPARM1)                               0343
         SLR   RWORK4,@10                                          0343
*   END;                            /*                       @X04SVES*/
@DE00342 L     @10,AMBDSB(,RAMB)                                   0344
         SLR   @00,@00                                             0344
         IC    @00,IBFLPF(,RWORK4)                                 0344
         CH    @00,AMDKEYLN(,@10)                                  0344
         BE    @DL00342                                            0344
*   RWORK3=RWORK4->IBFLPL;          /* SET MOVE LENGTH               */
         SLR   @10,@10                                             0345
         IC    @10,IBFLPL(,RWORK4)                                 0345
         LR    RWORK3,@10                                          0345
*   RWORK2=ADDR(ICWKEY1);           /* SET 'TO' ADDRESS              */
         LA    RWORK2,ICWKEY1(,RWORK1)                             0346
*   RWORK4=RWORK4-RWORK4->IBFLPL;   /* SET 'FROM' ADDRESS            */
         SLR   RWORK4,@10                                          0347
*   RWORK5=RWORK3;                  /* MOVE LENGTH AGAIN             */
         LR    RWORK5,RWORK3                                       0348
*   ICWKEY1L=RWORK3;                /* SAVE LNGTH IN WORK AREA       */
         STH   RWORK3,ICWKEY1L(,RWORK1)                            0349
*   GEN(MVCL  RWORK2,RWORK4);       /* MOVE KEY TO WORK AREA         */
         MVCL  RWORK2,RWORK4
*   RESPECIFY                                                      0351
*    (RWORK2,                                                      0351
*     RWORK3,                                                      0351
*     RWORK4,                                                      0351
*     RWORK5) UNRSTD;               /*                               */
*   IF ICWLN^=ICWSS THEN            /* IS THIS A SEQ SET RECD        */
         CLC   ICWLN(2,RWORK1),@CH00053                            0352
         BE    @RF00352                                            0352
*     DO;                           /* NO                            */
*       PLHSAVE1=PLHSAVE6;          /* SHOW HIGHEST KEY TO BE      0354
*                                      RETAINED IS AT SPLIT POINT    */
         L     @10,PLHSAVE6(,RPLH)                                 0354
         ST    @10,PLHSAVE1(,RPLH)                                 0354
*       RPARM1->IXHFSO=LENGTH(IDAIXH);/* SET FREESPACE DISP. TO END
*                                      OF HEADER                     */
         MVC   IXHFSO(2,RPARM1),@CH00083                           0355
*       RPARM1->IXHLEO=PLHSAVE6;    /* SET LEFTMOST ENTRY IN BLOCK AT
*                                      SPLIT POINT                   */
         STH   @10,IXHLEO(,RPARM1)                                 0356
*     END;                          /*                               */
*   ELSE                            /* SEQ SET RECORD                */
*     DO;                           /*                               */
         B     @RC00352                                            0358
@RF00352 DS    0H                                                  0359
*       RESPECIFY                                                  0359
*        (RWORK2) RSTD;             /*                               */
*       PLHSAVE1=RPARM1->IXHLEO;    /* SHOW BLOCK LIMIT AT HI KEY END
*                                      OF RECORD                     */
         LH    @10,IXHLEO(,RPARM1)                                 0360
         ST    @10,PLHSAVE1(,RPLH)                                 0360
*       RWORK2=RPARM1+PLHSAVE6;     /* POINT TO SPLIT POINT          */
         L     @10,PLHSAVE6(,RPLH)                                 0361
         LR    RWORK2,RPARM1                                       0361
         ALR   RWORK2,@10                                          0361
*       PLHSAVE3=RPARM1->IXHSEO;    /* SAVE DISPLACEMENT TO RIGHTMOST
*                                      ENTRY IN BLK                  */
         LH    @07,IXHSEO(,RPARM1)                                 0362
         ST    @07,PLHSAVE3(,RPLH)                                 0362
*       RPARM1->IXHSEO=PLHSAVE6-    /* SET RIGHT HAND LIMIT          */
*           RWORK2->IBFLPL-         /* AT FIRST ENTRY TO THE         */
*           RPARM1->IXHFLPLN;       /* LEFT OF SPLIT POINT           */
         SLR   @07,@07                                             0363
         IC    @07,IBFLPL(,RWORK2)                                 0363
         SLR   @10,@07                                             0363
         SLR   @07,@07                                             0363
         IC    @07,IXHFLPLN(,RPARM1)                               0363
         SLR   @10,@07                                             0363
         STH   @10,IXHSEO(,RPARM1)                                 0363
*     END;                          /*                               */
*   RESPECIFY                                                      0365
*    (RWORK0) RSTD;                 /*                               */
@RC00352 DS    0H                                                  0366
*   CALL COUNT;                     /* COUNT ENTRYS IN BLOCK         */
         BAL   @14,COUNT                                           0366
*   RWORK2=RPARM1+PLHSAVE1;         /* POINT TO UPPER LIMIT OF INSERT
*                                      SPACE                         */
         L     @10,PLHSAVE1(,RPLH)                                 0367
         LR    RWORK2,RPARM1                                       0367
         ALR   RWORK2,@10                                          0367
*   IF(RPARM1->IXHFSO+              /* CHECK TO SEE IF ENOUGH        */
*       (RWORK0*ICWPTL))<           /* SPACE EXITS BETWEEN           */
*       (PLHSAVE1-RWORK2->IBFLPL) THEN/* HDR AND BLOCK FOR PTRS      */
         LH    @07,IXHFSO(,RPARM1)                                 0368
         SLR   @15,@15                                             0368
         IC    @15,ICWPTL(,RWORK1)                                 0368
         LR    @09,RWORK0                                          0368
         MR    @08,@15                                             0368
         ALR   @09,@07                                             0368
         SLR   @08,@08                                             0368
         IC    @08,IBFLPL(,RWORK2)                                 0368
         SLR   @10,@08                                             0368
         CLR   @09,@10                                             0368
         BNL   @RF00368                                            0368
*     DO;                           /* ENOUGH SPACE SO SET           */
*       PLHSAVE5=RPARM1+RPARM1->IXHFSO/* ADDRESS OF RIGHTMOST        */
*           +(RWORK0-ONE)*ICWPTL;   /* POINTER STORAGE POSIT.        */
         ALR   @07,RPARM1                                          0370
         LR    @09,RWORK0                                          0370
         BCTR  @09,0                                               0370
         MR    @08,@15                                             0370
         ALR   @07,@09                                             0370
         ST    @07,PLHSAVE5(,RPLH)                                 0370
*       CALL MOVEPTRR;              /* GO MOVE PTRS. R TO L          */
         BAL   @14,MOVEPTRR                                        0371
*       CALL DELPTR;                /* REMOVE POINTERS               */
         BAL   @14,DELPTR                                          0372
*     END;                          /*                               */
*   ELSE                            /* NOT ENOUGH SPACE              */
*     CALL MOVEPTRL;                /* SO MOVE PTRS. L TO R          */
         B     @RC00368                                            0374
@RF00368 BAL   @14,MOVEPTRL                                        0374
*   IF ICWLN=ICWSS THEN             /* IS THIS SEQ SET LEVEL         */
@RC00368 CLC   ICWLN(2,RWORK1),@CH00053                            0375
         BNE   @RF00375                                            0375
*     DO;                           /*                               */
*       RPARM1->IXHSEO=PLHSAVE3;    /* SET RIGHT BLOCK LIMIT AT    0377
*                                      RIGHTMOST ENTRY               */
         L     @10,PLHSAVE3(,RPLH)                                 0377
         STH   @10,IXHSEO(,RPARM1)                                 0377
*       RPARM1->IXHLEO=PLHSAVE6;    /* SET LEFT LIMIT AT SPLIT       */
         L     @10,PLHSAVE6(,RPLH)                                 0378
         STH   @10,IXHLEO(,RPARM1)                                 0378
*       CALL COUNT;                 /* COUNT ENTRIES IN BLOCK        */
         BAL   @14,COUNT                                           0379
*       RWORK2=RPARM1+PLHSAVE6;     /* POINT TO SPLIT ENTRY          */
         L     @10,PLHSAVE6(,RPLH)                                 0380
         LR    RWORK2,RPARM1                                       0380
         ALR   RWORK2,@10                                          0380
*       IF(RPARM1->IXHFSO+(RWORK0*ICWPTL))/* DOES ENOUGH SPACE       */
*           <PLHSAVE6-RWORK2->IBFLPL THEN/* EXIST FOR POINTERS       */
         LH    @07,IXHFSO(,RPARM1)                                 0381
         SLR   @15,@15                                             0381
         IC    @15,ICWPTL(,RWORK1)                                 0381
         LR    @09,RWORK0                                          0381
         MR    @08,@15                                             0381
         ALR   @09,@07                                             0381
         SLR   @08,@08                                             0381
         IC    @08,IBFLPL(,RWORK2)                                 0381
         SLR   @10,@08                                             0381
         CLR   @09,@10                                             0381
         BNL   @RF00381                                            0381
*         DO;                       /* YES                           */
*           PLHSAVE5=RPARM1+RPARM1->IXHFSO/* SET ADDRESS OF PTR.     */
*               +(RWORK0-ONE)*ICWPTL;/* POSITION                     */
         ALR   @07,RPARM1                                          0383
         LR    @09,RWORK0                                          0383
         BCTR  @09,0                                               0383
         MR    @08,@15                                             0383
         ALR   @07,@09                                             0383
         ST    @07,PLHSAVE5(,RPLH)                                 0383
*           CALL MOVEPTRR;          /* GO MOVE PTRS. R TO L          */
         BAL   @14,MOVEPTRR                                        0384
*           CALL DELPTR;            /* REMOVE POINTERS               */
         BAL   @14,DELPTR                                          0385
*         END;                      /*                               */
*       ELSE                        /* NOT ENOUGH ROOM SO            */
*         CALL MOVEPTRL;            /* MOVE PTRS LEFT TO RT          */
         B     @RC00381                                            0387
@RF00381 BAL   @14,MOVEPTRL                                        0387
*     END;                          /*                               */
@RC00381 DS    0H                                                  0389
*   RESPECIFY                                                      0389
*    (RWORK0) UNRSTD;               /*                               */
@RF00375 DS    0H                                                  0390
*/*                                                                  */
*/* MOVE BLOCK LEFT TO ABUT THE POINTERS                             */
*/*                                                                  */
*                                                                  0390
*   RESPECIFY                                                      0390
*    (RWORK3,                                                      0390
*     RWORK4,                                                      0390
*     RWORK5) RSTD;                 /*                               */
*   RWORK2=RPARM1+RPARM1->IXHFSO;   /* SET 'TO' ADDRESS              */
         LR    RWORK2,RPARM1                                       0391
         AH    RWORK2,IXHFSO(,RPARM1)                              0391
*   RWORK3=RPARM1+RPARM1->IXHLEO;   /* POINT TO SPLIT ENTRY          */
         LH    @10,IXHLEO(,RPARM1)                                 0392
         LR    RWORK3,RPARM1                                       0392
         ALR   RWORK3,@10                                          0392
*   RWORK4=RWORK3-RWORK3->IBFLPL;   /* COMPUTE 'FROM' ADDRESS        */
         LR    RWORK4,RWORK3                                       0393
         SLR   @00,@00                                             0393
         IC    @00,IBFLPL(,RWORK3)                                 0393
         SLR   RWORK4,@00                                          0393
*   RWORK3=RWORK4-RWORK2;           /* COMPUTE MOVE LENGTH           */
         LR    RWORK3,RWORK4                                       0394
         SLR   RWORK3,RWORK2                                       0394
*   RWORK5=(RPARM1+RPARM1->IXHSEO+  /* COMPUTE THE NUMBER            */
*       LENGTH(IBFLPL)+             /* OF CHARACTERS IN THE          */
*       LENGTH(IBFLPF))-(RWORK4);   /* BLOCK TO BE MOVED             */
         LH    @15,IXHSEO(,RPARM1)                                 0395
         LR    RWORK5,RPARM1                                       0395
         ALR   RWORK5,@15                                          0395
         AL    RWORK5,@CF00146                                     0395
         SLR   RWORK5,RWORK4                                       0395
*   RPARM1->IXHLEO=RPARM1->IXHLEO-  /* READJUST LEFT OFFSET          */
*       RWORK3;                     /*                               */
         SLR   @10,RWORK3                                          0396
         STH   @10,IXHLEO(,RPARM1)                                 0396
*   RPARM1->IXHSEO=RPARM1->IXHSEO-  /* READJUST RIGHT OFFSET         */
*       RWORK3;                     /*                               */
         SLR   @15,RWORK3                                          0397
         STH   @15,IXHSEO(,RPARM1)                                 0397
*   RWORK3=RWORK5;                  /* GET LENGTH IN RWORK3          */
         LR    RWORK3,RWORK5                                       0398
*   GEN(MVCL  RWORK2,RWORK4);       /* MOVE BLOCK LEFT               */
         MVCL  RWORK2,RWORK4
*   RESPECIFY                                                      0400
*    (RWORK2,                                                      0400
*     RWORK3,                                                      0400
*     RWORK4,                                                      0400
*     RWORK5) UNRSTD;               /*                               */
*   PLHSAVE1=RPARM1+RPARM1->IXHLEO; /* CONVERT DISP. TO ADD.         */
         LR    @10,RPARM1                                          0401
         AH    @10,IXHLEO(,RPARM1)                                 0401
         ST    @10,PLHSAVE1(,RPLH)                                 0401
*   PLHSAVE2=RPARM1+RPARM1->IXHSEO; /* CONVERT DISP. TO ADD.         */
         LR    @10,RPARM1                                          0402
         AH    @10,IXHSEO(,RPARM1)                                 0402
         ST    @10,PLHSAVE2(,RPLH)                                 0402
*   CALL BUILDREC;                  /* GO CONVERT BLOCK TO AN INDEX
*                                      RECORD                        */
         BAL   @14,BUILDREC                                        0403
*   IF RPARM1=ZERO THEN             /* WAS INDEX BUILT OKAY          */
         LTR   RPARM1,RPARM1                                       0404
         BNZ   @RF00404                                            0404
*     DO;                           /* NOPE                          */
*RJM:                                                              0406
*       BUFCVAL=OFF;                /* SET BUFFER INVALID            */
RJM      L     @10,ICWBUFC(,RWORK1)                                0406
         NI    BUFCVAL(@10),B'11111011'                            0406
*       BUFCMW=OFF;                 /* DONT WRITE THIS BUFFER        */
         NI    BUFCMW(@10),B'01111111'                             0407
*       RBUFC=ICWBUFC;              /* SET BUFC REGISTER AND         */
         LR    RBUFC,@10                                           0408
*I05:                                                              0409
*       DO;                         /* IDACALL(IDAFREEB)             */
I05      DS    0H                                                  0410
*         CALL IDAFREEB;            /* EXIT TO IDAFREEB              */
         L     @15,@CV00919                                        0410
         BALR  @14,@15                                             0410
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I05;                    /* FREE THE BFR          @X04SVLP*/
*       RESPECIFY                                                  0416
*        (RWORK1) RSTD;             /*                               */
*       RWORK1=AMBIWA;              /* REESTABLISH WORK AREA POINTER */
         L     RWORK1,AMBIWA(,RAMB)                                0417
*       ICWNEST=ICWNEST*TWO;        /* PROVIDE MORE ENTRYS PER     0418
*                                      SECTION                       */
         LH    @10,ICWNEST(,RWORK1)                                0418
         ALR   @10,@10                                             0418
         STH   @10,ICWNEST(,RWORK1)                                0418
*       IF ICWNEST>TWO*AMDNEST THEN /* IF NO. ENTRYS         @X04SVES*/
         L     @15,AMBDSB(,RAMB)                                   0419
         LH    @00,AMDNEST(,@15)                                   0419
         ALR   @00,@00                                             0419
         CR    @10,@00                                             0419
         BNH   @RF00419                                            0419
*         ICWNEST=ONE;              /* EXCEEDS 2* CREATE LIMIT, RESET
*                                      TO ONE                @X04SVES*/
         MVC   ICWNEST(2,RWORK1),@CH00053                          0420
*       GO TO RJL;                  /* GO START PROCESS ALL OVER     */
         B     RJL                                                 0421
*     END;                          /*                               */
*   RESPECIFY                                                      0423
*     R15 RSTD;                     /* PROTECT REGISTER 15           */
@RF00404 DS    0H                                                  0424
*I06:                                                              0424
*   DO;                             /* IDACALL(IDASPACE)             */
I06      DS    0H                                                  0425
*     CALL IDASPACE;                /* EXIT TO IDASPACE              */
         L     @15,@CV00923                                        0425
         BALR  @14,@15                                             0425
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I06;                        /* GO CHECK TO ASSURE            */
*   RESPECIFY                                                      0431
*     RWORK1 RSTD;                  /* ADEQUATE FREESPACE            */
*   IF R15^=ZERO THEN               /* WAS THERE ENOUGH SPACE        */
         LTR   R15,R15                                             0432
         BZ    @RF00432                                            0432
*     DO;                           /* NO                            */
*       RESPECIFY                                                  0434
*         R15 UNRSTD;               /* FREE REGISTER 15              */
*       IF RPARM1->IXHLEO^=RPARM1-> /* IS THERE ONLY 1        SECTION*/
*           IXHSEO THEN             /* IN THIS RECORD                */
         CLC   IXHLEO(2,RPARM1),IXHSEO(RPARM1)                     0435
         BE    @RF00435                                            0435
*         DO;                       /* NO                            */
*           GO TO RJM;              /* BACK TO TRY AGAIN             */
         B     RJM                                                 0437
*         END;                      /*                               */
*     END;                          /*                               */
@RF00435 DS    0H                                                  0440
*   RPARM1->IXHHP=ICWCRBA;          /* SET HORIZ. PTR TO NEW RECORD  */
@RF00432 L     @10,ICWCRBA(,RWORK1)                                0440
         ST    @10,IXHHP(,RPARM1)                                  0440
*I07:                                                              0441
*   DO;                             /* IDACALL(IDAER)                */
I07      DS    0H                                                  0442
*     CALL IDAER;                   /* EXIT TO IDAER                 */
         L     @15,@CV00918                                        0442
         BALR  @14,@15                                             0442
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I07;                        /* REMOVE DUMMY ENTRY            */
*   RESPECIFY                                                      0448
*    (RWORK1) RSTD;                 /*                               */
*   RBUFC=ICWBUFC;                  /* SET BUFC REGISTER             */
         L     RBUFC,ICWBUFC(,RWORK1)                              0449
*I08:                                                              0450
*   DO;                             /* IDACALL(IDAWRBFR)             */
I08      DS    0H                                                  0451
*     CALL IDAWRBFR;                /* EXIT TO IDAWRBFR              */
         L     @15,@CV00917                                        0451
         BALR  @14,@15                                             0451
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I08;                        /* GO WRITE THE BUFFER           */
*   IF RPLERREG^=ZERO THEN          /* WAS THERE AN ERROR            */
         CLI   RPLERREG(RRPL),0                                    0457
         BE    @RF00457                                            0457
*     DO;                           /* YES                           */
*       RAMB=AMBLDTA;               /* RESTORE AMB REGISTER          */
         L     @10,RPLDACB(,RRPL)                                  0459
         L     @10,ACBAMBL(,@10)                                   0459
         L     RAMB,AMBLDTA(,@10)                                  0459
*       RESPECIFY                                                  0460
*        (R15) RSTD;                /*                               */
*       R15=IOERR;                  /* SET ERROR CODE                */
         LA    R15,4                                               0461
*       CALL EXIT;                  /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0462
*       RESPECIFY                                                  0463
*        (R15) UNRSTD;              /*                               */
*     END;                          /*                               */
*I09:                                                              0465
*   DO;                             /* IDACALL(IDAIVIXB)             */
@RF00457 DS    0H                                                  0465
I09      DS    0H                                                  0466
*     CALL IDAIVIXB;                /* EXIT TO IDAIVIXB              */
         L     @15,@CV00922                                        0466
         BALR  @14,@15                                             0466
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I09;                        /* ASSURE THIS RBA INVALID       */
*I10:                                                              0472
*   DO;                             /* IDACALL(IDAFREEB)             */
I10      DS    0H                                                  0473
*     CALL IDAFREEB;                /* EXIT TO IDAFREEB              */
         L     @15,@CV00919                                        0473
         BALR  @14,@15                                             0473
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I10;                        /* FREE BFR              @X04SVLP*/
*   RESPECIFY                                                      0479
*    (RWORK1) RSTD;                 /*                               */
*   RWORK1=AMBIWA;                  /* RESTORE W.A. BASE             */
         L     RWORK1,AMBIWA(,RAMB)                                0480
*   IF ICWLN=ICWSS THEN             /* IS THIS LOWEST LEVEL          */
         LA    @10,1                                               0481
         CH    @10,ICWLN(,RWORK1)                                  0481
         BNE   @RF00481                                            0481
*     AMDNCIS=AMDNCIS+ONE;          /* YES, BUMP SPLIT COUNT         */
         L     @15,AMBDSB(,RAMB)                                   0482
         AL    @10,AMDNCIS(,@15)                                   0482
         ST    @10,AMDNCIS(,@15)                                   0482
*   ELSE                            /* NO, BUMP SPLIT COUNT          */
*     AMDNCAS=AMDNCAS+ONE;          /* OF NON-LOWEST LEVEL           */
         B     @RC00481                                            0483
@RF00481 L     @10,AMBDSB(,RAMB)                                   0483
         LA    @00,1                                               0483
         AL    @00,AMDNCAS(,@10)                                   0483
         ST    @00,AMDNCAS(,@10)                                   0483
*   RESPECIFY                                                      0484
*    (RWORK1) UNRSTD;               /*                               */
@RC00481 DS    0H                                                  0485
*   RESPECIFY                                                      0485
*    (R15) RSTD;                    /*                               */
*   R15=ZERO;                       /* SET SPLIT OK INDICATOR        */
         SLR   R15,R15                                             0486
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0487
*   RESPECIFY                                                      0488
*    (R15) UNRSTD;                  /*                               */
*                                                                  0489
*/*                                                                  */
*/*    BUILDREC SUBROUTINE                                           */
*/*       FUNCTION -                                                 */
*/*        BUILDS AN INDEX RECORD FROM -                             */
*/*         1) FIRST KEY IS IN CURRENT KEY FIELD OF WORK AREA.       */
*/*            REMAINING KEYS (IN COMPRESSED FORM) ARE LOCATED       */
*/*            IN A BLOCK CONTAINED WITHIN THE BUFFER WHICH WILL     */
*/*            HOLD THE NEWLY CREATED INDEX RECORD.                  */
*/*         2) POINTERS LOCATED IN THE BUFFER BETWEEN THE HEADER     */
*/*            AND THE ABOVE MENTIONED BLOCK.                        */
*/*         POINTERS ARE ASSIGNED TO KEYS FROM RIGHT TO LEFT         */
*/*        KEYS INCREASE IN SIZE.                                    */
*/*        BLOCK CONTAINS NO SECTION LL FIELDS OR POINTER FIELDS.    */
*/*       INPUT -                                                    */
*/*         LIMITS OF THE BLOCK ARE DEFINED BY THE FOLLOWING         */
*/*         OFFSETS TO THE 'F' FIELD -                               */
*/*          IXHSEO = RIGHTMOST INDEX ENTRY.                         */
*/*          IXHLEO = LEFTMOST INDEX ENTRY.                          */
*/*        OUTPUT -                                                  */
*/*        RPARM1 = ZERO INDICATES THAT ROOM WAS NOT AVAILABLE       */
*/*                 TO CONTINUE BUILDING DUE TO NEWLY BUILT RECORD   */
*/*                 OVERLAPPING THE BLOCK OF INPUT KEYS.             */
*/*        RPARM1 = NONZERO INDICATES RECORD WAS PROPERLY BUILT.     */
*                                                                  0489
*BUILDREC:                                                         0489
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                               */
         B     @PB00002                                            0489
BUILDREC DS    0H                                                  0490
*   GEN SETS(PLHRETO,PLHRET1)(IDASVR14);/* SAVE REGISTER 14          */
         IDASVR14
*   RESPECIFY                                                      0491
*    (RWORK0,                                                      0491
*     RWORK1,                                                      0491
*     RWORK2,                                                      0491
*     RWORK3,                                                      0491
*     RWORK4,                                                      0491
*     RWORK5) RSTD;                 /*                               */
*/*                                                                  */
*/*  CLEAR RIGHT END OF BUFFER                                       */
*/*                                                                  */
*                                                                  0492
*   RWORK2=PLHSAVE2+LENGTH(IBFLPF)+ /* COMPUTE ADDRESS OF 1ST.       */
*       LENGTH(IBFLPL);             /* BYTE AFTER BLOCK              */
         LA    RWORK2,2                                            0492
         AL    RWORK2,PLHSAVE2(,RPLH)                              0492
*   RWORK3=RPARM1+RPARM1->IXHLL-    /* COMPUTE LENGTH BETWEEN        */
*       RWORK2;                     /* BLOCK AND END OF BFR.         */
         LR    RWORK3,RPARM1                                       0493
         LH    @10,IXHLL(,RPARM1)                                  0493
         N     @10,@CF01056                                        0493
         ALR   RWORK3,@10                                          0493
         SLR   RWORK3,RWORK2                                       0493
*   RWORK5=ZERO;                    /* SET FILL CHARACTER            */
         SLR   RWORK5,RWORK5                                       0494
*   GEN(MVCL  RWORK2,RWORK4);       /* CLEAR THE AREA                */
         MVCL  RWORK2,RWORK4
*/*                                                                  */
*/*  INITIALIZE DUMMY ENTRY AS WELL AS HEADER OFFSETS                */
*/*                                                                  */
*                                                                  0496
*   RWORK5=RPARM1+RPARM1->IXHLL-    /* POINT TO LAST POINTER         */
*       ICWPTL;                     /* FIELD IN RECORD               */
         LH    @10,IXHLL(,RPARM1)                                  0496
         N     @10,@CF01056                                        0496
         LR    RWORK5,RPARM1                                       0496
         ALR   RWORK5,@10                                          0496
         SLR   @15,@15                                             0496
         IC    @15,ICWPTL(,RWORK1)                                 0496
         SLR   RWORK5,@15                                          0496
*   RPARM1->IXHLEO=RPARM1->IXHLL-   /* INITIALIZE THE OFFSET         */
*       RPARM1->IXHFLPLN;           /* TO THE FIRST ENTRY            */
         SLR   @14,@14                                             0497
         IC    @14,IXHFLPLN(,RPARM1)                               0497
         SLR   @10,@14                                             0497
         STH   @10,IXHLEO(,RPARM1)                                 0497
*   RPARM1->IXHSEO=RPARM1->IXHLEO;  /* INITIALIZE SECTION ENTRY    0498
*                                      OFFSET                        */
         STH   @10,IXHSEO(,RPARM1)                                 0498
*   RWORK3=RPARM1+RPARM1->IXHFSO-   /* POINT TO FIRST POINTER        */
*       ICWPTL;                     /* AVAILABLE                     */
         LR    RWORK3,RPARM1                                       0499
         AH    RWORK3,IXHFSO(,RPARM1)                              0499
         SLR   RWORK3,@15                                          0499
*   RWORK4=RPARM1->IXHPTLS;         /* SET POINTER MASK              */
         SLR   RWORK4,RWORK4                                       0500
         IC    RWORK4,IXHPTLS(,RPARM1)                             0500
*   GEN(EX  RWORK4,PICKPNT);        /* PICK UP THE POINTER           */
         EX  RWORK4,PICKPNT
*   GEN(EX  RWORK4,PLACEPNT);       /* STORE IT AWAY                 */
         EX  RWORK4,PLACEPNT
*   RWORK5=RWORK3;                  /*                               */
         LR    RWORK5,RWORK3                                       0503
*   RWORK0=ZERO;                    /* CLEAR                         */
         SLR   RWORK0,RWORK0                                       0504
*   GEN(EX  RWORK4,PLACEPNT);       /* STORE ZERO IN OLD PTR.        */
         EX  RWORK4,PLACEPNT
*   RPARM1->IXHFSO=RPARM1->IXHFSO-  /* ADJUST OFFSET TO FREE         */
*       ICWPTL;                     /* SPACE IN HEADER               */
         LH    @10,IXHFSO(,RPARM1)                                 0506
         SLR   @15,@15                                             0506
         IC    @15,ICWPTL(,RWORK1)                                 0506
         SLR   @10,@15                                             0506
         STH   @10,IXHFSO(,RPARM1)                                 0506
*/*                                                                  */
*/*  INITIALIZE  WORK  AREA                                          */
*/*                                                                  */
*                                                                  0507
*   ICWVSE=OFF;                     /* RESET SECTION VALID BIT       */
*   ICWVNE=OFF;                     /* RESET PREV. ENTRY VALID       */
         NI    ICWVSE(RWORK1),B'11100111'                          0508
*   ICWSCNT=ZERO;                   /* RESET ENTRYS/SECTION          */
         SLR   @10,@10                                             0509
         STH   @10,ICWSCNT(,RWORK1)                                0509
*   ICWPSEO=ZERO;                   /* RESET PRIOR SECT. PTR         */
         STH   @10,ICWPSEO(,RWORK1)                                0510
*/*                                                                  */
*/*  CLEAR THE LAST ENTRY FROM THE BLOCK                             */
*/*                                                                  */
*                                                                  0511
*   CALL CKSPNRCD;                  /* GO SEE IF RIGHT HAND RECORD IS
*                                      SPANNED               @X04SVES*/
         BAL   @14,CKSPNRCD                                        0511
*   IF PLHSAVE1=PLHSAVE2 THEN       /* IS THERE ONLY 1 ENTRY         */
         L     @10,PLHSAVE2(,RPLH)                                 0512
         C     @10,PLHSAVE1(,RPLH)                                 0512
         BNE   @RF00512                                            0512
*     DO;                           /* IN THE BLOCK -- YES           */
*       IF PLHSAVE2->IBFLPL^=ZERO×  /* IS THIS ENTRY ANYTHING        */
*           PLHSAVE2->IBFLPF^=ZERO THEN/* BUT A DUMMY                */
         CLI   IBFLPL(@10),0                                       0514
         BNE   @RT00514                                            0514
         CLI   IBFLPF(@10),0                                       0514
         BNE   @RT00514                                            0514
*         GO TO RJE;                /* YES, GO INSERT IT             */
*       ELSE                        /* SINGLE ENTRY IS A DUMMY       */
*         DO;                       /*                               */
*           IF ICWNOSEG^=ZERO THEN  /* SPANNED RCD.          @X04SVES*/
         LH    @10,ICWNOSEG(,RWORK1)                               0517
         LTR   @10,@10                                             0517
         BZ    @RF00517                                            0517
*             DO ICWCRSEG=ONE TO ICWNOSEG-ONE;/* YES         @X04SVES*/
         LA    @10,1                                               0518
         B     @DE00518                                            0518
@DL00518 DS    0H                                                  0519
*I11:                                                              0519
*               DO;                 /* IDACALL(IDASPNPT)             */
I11      DS    0H                                                  0520
*                 CALL IDASPNPT;    /* EXIT TO IDASPNPT              */
         L     @15,@CV00924                                        0520
         BALR  @14,@15                                             0520
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I11;            /* BUILD A SEG           @X04SVES*/
*             END;                  /*                       @X04SVES*/
         LA    @10,1                                               0526
         AH    @10,ICWCRSEG(,RWORK1)                               0526
@DE00518 STH   @10,ICWCRSEG(,RWORK1)                               0526
         LH    @15,ICWNOSEG(,RWORK1)                               0526
         BCTR  @15,0                                               0526
         CR    @10,@15                                             0526
         BNH   @DL00518                                            0526
*           RPARM1=ICWBUFC->BUFCBAD;/*                       @X04SVES*/
@RF00517 L     @10,ICWBUFC(,RWORK1)                                0527
         L     RPARM1,BUFCBAD(,@10)                                0527
*           CALL EXIT;              /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0528
*         END;                      /*                               */
*     END;                          /*                               */
*RJE:                                                              0531
*   RWORK2=PLHSAVE2-                /* POINT TO THE BEGINNING        */
*       PLHSAVE2->IBFLPL;           /* OF THE LAST ENTRY             */
@RF00512 DS    0H                                                  0531
RJE      L     @10,PLHSAVE2(,RPLH)                                 0531
         LR    RWORK2,@10                                          0531
         SLR   @15,@15                                             0531
         IC    @15,IBFLPL(,@10)                                    0531
         SLR   RWORK2,@15                                          0531
*   RWORK3=PLHSAVE2-RWORK2+         /* COMPUTE LENGTH OF THAT        */
*       LENGTH(IBFLPF)+             /* LAST ENTRY                    */
*       LENGTH(IBFLPL);             /*                               */
         LA    @15,2                                               0532
         SLR   @10,RWORK2                                          0532
         ALR   @10,@15                                             0532
         LR    RWORK3,@10                                          0532
*   RWORK5=ZERO;                    /* SET FILL CHAR. TO CLEAR       */
         SLR   RWORK5,RWORK5                                       0533
*   PLHSAVE2=RWORK2-LENGTH(IBFLPF)- /* SAVE THE POINTER TO           */
*       LENGTH(IBFLPL);             /* THE NEXT ENTRY                */
         LCR   @15,@15                                             0534
         ALR   @15,RWORK2                                          0534
         ST    @15,PLHSAVE2(,RPLH)                                 0534
*   GEN(MVCL  RWORK2,RWORK4);       /* SET THE AREA TO ZEROS         */
         MVCL  RWORK2,RWORK4
*RJG:                               /*                               */
*I12:                                                              0536
*   DO;                             /* IDACALL(IDAIST)               */
RJG      DS    0H                                                  0536
I12      DS    0H                                                  0537
*     CALL IDAIST;                  /* EXIT TO IDAIST                */
         L     @15,@CV00921                                        0537
         BALR  @14,@15                                             0537
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I12;                        /* GO INSERT ENTRY IN WA         */
*   RESPECIFY                                                      0543
*    (RWORK1,                                                      0543
*     RWORK2,                                                      0543
*     RWORK3,                                                      0543
*     RWORK4,                                                      0543
*     RWORK5) RSTD;                 /*                               */
*   RPARM1=ICWBUFC->BUFCBAD;        /* REESTABLISH BUFFER PTR.       */
         L     @10,ICWBUFC(,RWORK1)                                0544
         L     RPARM1,BUFCBAD(,@10)                                0544
*   IF ICWWNF=ON THEN               /* DID THE ENTRY FIT             */
         TM    ICWWNF(RWORK1),B'10000000'                          0545
         BNO   @RF00545                                            0545
*     DO;                           /* NO                            */
*       ICWWNF=OFF;                 /* RESET WONT FIT FLAG           */
         NI    ICWWNF(RWORK1),B'01111111'                          0547
*       IF(PLHSAVE1-PLHSAVE1->IBFLPL)/* IS THERE SPACE TO THE        */
*           >(RPARM1+RPARM1->IXHFSO) THEN/* LEFT THAT COULD BE     0548
*                                      UTILIZED                      */
         L     @10,PLHSAVE1(,RPLH)                                 0548
         LR    @15,@10                                             0548
         SLR   @14,@14                                             0548
         IC    @14,IBFLPL(,@10)                                    0548
         SLR   @15,@14                                             0548
         LR    @14,RPARM1                                          0548
         AH    @14,IXHFSO(,RPARM1)                                 0548
         CR    @15,@14                                             0548
         BNH   @RF00548                                            0548
*         DO;                       /* YES                           */
*           RWORK2=RPARM1+RPARM1->IXHFSO;/* SET 'TO' ADDRESS         */
         LR    RWORK2,@14                                          0550
*           RWORK4=PLHSAVE1-        /* SET 'FROM' ADDRESS            */
*               PLHSAVE1->IBFLPL;   /*                               */
         LR    RWORK4,@15                                          0551
*           RPARM1=PLHSAVE2+LENGTH(IBFLPL)/* SAVE ADDRESS OF 1ST.    */
*               +LENGTH(IBFLPF);    /* BYTE AFTER BLOCK              */
         L     @15,PLHSAVE2(,RPLH)                                 0552
         LA    RPARM1,2                                            0552
         ALR   RPARM1,@15                                          0552
*           RWORK3=MAX(RPARM1-RWORK4,0);/* COMPUTE LENGTH TO MOVE    */
         LR    RWORK3,RPARM1                                       0553
         SLR   RWORK3,RWORK4                                       0553
         SLR   @14,@14                                             0553
         CR    RWORK3,@14                                          0553
         BNL   *+6
         LR    RWORK3,@14                                          0553
*           RWORK5=RWORK4-RWORK2;   /* COMPUTE LEFT OFFSET           */
         LR    RWORK5,RWORK4                                       0554
         SLR   RWORK5,RWORK2                                       0554
*           PLHSAVE1=PLHSAVE1-RWORK5;/* READJUST LEFT END PTR        */
         SLR   @10,RWORK5                                          0555
         ST    @10,PLHSAVE1(,RPLH)                                 0555
*           PLHSAVE2=PLHSAVE2-RWORK5;/* READJUST RIGHT END PTR       */
         SLR   @15,RWORK5                                          0556
         ST    @15,PLHSAVE2(,RPLH)                                 0556
*           RWORK5=RWORK3;          /* MOVE LENGTH AGAIN             */
         LR    RWORK5,RWORK3                                       0557
*           RWORK0=RWORK2+RWORK3;   /* SAVE ADDRESS TO CLEAR         */
         LR    RWORK0,RWORK2                                       0558
         ALR   RWORK0,RWORK3                                       0558
*           GEN(MVCL  RWORK2,RWORK4);/* MOVE BLOCK LEFT              */
         MVCL  RWORK2,RWORK4
*           RWORK2=RWORK0;          /* SET CLEAR ADDRESS             */
         LR    RWORK2,RWORK0                                       0560
*           RWORK3=RPARM1-RWORK0;   /* SET LENGTH TO CLEAR           */
         LR    RWORK3,RPARM1                                       0561
         SLR   RWORK3,RWORK0                                       0561
*           RWORK5=ZERO;            /*                               */
         SLR   RWORK5,RWORK5                                       0562
*           GEN(MVCL RWORK2,RWORK4);/* CLEAR AREA JUST VACATED       */
         MVCL RWORK2,RWORK4
*           GO TO RJG;              /* GO BACK AND TRY TO INSERT   0564
*                                      RECORD AGAIN                  */
         B     RJG                                                 0564
*         END;                      /* ENTRY WONT FIT AND NO ROOM IS
*                                      AVAILABLE TO                  */
*       DO;                         /* THE LEFT OF BLOCK             */
@RF00548 DS    0H                                                  0567
*         RPARM1=ZERO;              /* SHOW RECORD NOT BUILT         */
         SLR   RPARM1,RPARM1                                       0567
*         CALL EXIT;                /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0568
*       END;                        /*                               */
*     END;                          /*                               */
*   CALL CKSPNRCD;                  /* CHECK FOR SPANNED RECORD    0571
*                                                            @X04SVES*/
@RF00545 BAL   @14,CKSPNRCD                                        0571
*   IF PLHSAVE2>PLHSAVE1 THEN       /* ARE THERE 2 OR MORE KEYS YET
*                                      TO PROCESS                    */
         CLC   PLHSAVE2(4,RPLH),PLHSAVE1(RPLH)                     0572
         BNH   @RF00572                                            0572
*     DO;                           /* YES                           */
*       CALL UNCOMPRS;              /* UNCOMPRESS THIS ENTRY         */
         BAL   @14,UNCOMPRS                                        0574
*       GO TO RJE;                  /* GO PROCESS THE ENTRY          */
         B     RJE                                                 0575
*     END;                          /*                               */
*   DO;                             /*                               */
@RF00572 DS    0H                                                  0578
*     IF(PLHSAVE2=PLHSAVE1)&        /* IF WE HAVE NOT PASSED         */
*         (PLHSAVE2->IBFLPL^=ZERO×  /* THE LAST ENTRY AND IT         */
*         PLHSAVE2->IBFLPF^=ZERO) THEN/* IS NOT A DUMMY THEN         */
         L     @10,PLHSAVE2(,RPLH)                                 0578
         C     @10,PLHSAVE1(,RPLH)                                 0578
         BNE   @RF00578                                            0578
         CLI   IBFLPL(@10),0                                       0578
         BNE   @RT00578                                            0578
         CLI   IBFLPF(@10),0                                       0578
         BE    @RF00578                                            0578
@RT00578 DS    0H                                                  0579
*       DO;                         /*                               */
*         CALL UNCOMPRS;            /* PROCESS AS USUAL              */
         BAL   @14,UNCOMPRS                                        0580
*         GO TO RJE;                /*                               */
         B     RJE                                                 0581
*       END;                        /*                               */
*     ELSE                          /*                       @X04SVES*/
*       IF(PLHSAVE2=PLHSAVE1&       /* ON LAST ENTRY         @X04SVES*/
*           PLHSAVE2->IBFLPL=ZERO&  /* AND LAST IS           @X04SVES*/
*           PLHSAVE2->IBFLPF=ZERO&  /* DUMMY ENTRY           @X04SVES*/
*           ICWNOSEG^=ZERO) THEN    /* AND SPND RCD          @X04SVES*/
@RF00578 L     @10,PLHSAVE2(,RPLH)                                 0583
         C     @10,PLHSAVE1(,RPLH)                                 0583
         BNE   @RF00583                                            0583
         CLI   IBFLPL(@10),0                                       0583
         BNE   @RF00583                                            0583
         CLI   IBFLPF(@10),0                                       0583
         BNE   @RF00583                                            0583
         LH    @10,ICWNOSEG(,RWORK1)                               0583
         LTR   @10,@10                                             0583
         BZ    @RF00583                                            0583
*         DO ICWCRSEG=ONE TO ICWNOSEG-ONE;/* YES             @X04SVES*/
         LA    @10,1                                               0584
         B     @DE00584                                            0584
@DL00584 DS    0H                                                  0585
*I13:                                                              0585
*           DO;                     /* IDACALL(IDASPNPT)             */
I13      DS    0H                                                  0586
*             CALL IDASPNPT;        /* EXIT TO IDASPNPT              */
         L     @15,@CV00924                                        0586
         BALR  @14,@15                                             0586
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I13;                /* ENTER 1 SEGMENT@X04SVES       */
*         END;                      /*                       @X04SVES*/
         LA    @10,1                                               0592
         AH    @10,ICWCRSEG(,RWORK1)                               0592
@DE00584 STH   @10,ICWCRSEG(,RWORK1)                               0592
         LH    @15,ICWNOSEG(,RWORK1)                               0592
         BCTR  @15,0                                               0592
         CR    @10,@15                                             0592
         BNH   @DL00584                                            0592
*   END;                            /*                               */
@RF00583 DS    0H                                                  0594
*   RPARM1=ICWBUFC->BUFCBAD;        /* RESTORE BUFFER ADDRESS      0594
*                                                            @X04SVES*/
         L     @10,ICWBUFC(,RWORK1)                                0594
         L     RPARM1,BUFCBAD(,@10)                                0594
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0595
*   END BUILDREC;                   /*                               */
@EL00002 DS    0H                                                  0596
@EF00002 DS    0H                                                  0596
@ER00002 BR    @14                                                 0596
*   RESPECIFY                                                      0597
*    (RWORK0,                                                      0597
*     RWORK2,                                                      0597
*     RWORK3,                                                      0597
*     RWORK4,                                                      0597
*     RWORK5) UNRSTD;               /*                               */
*                                                                  0598
*/*                                                                  */
*/*    COUNT SUBROUTINE                                              */
*/*       FUNCTION -                                                 */
*/*       COUNTS THE NUMBER OF INDEX ENTRYS IN AN INDEX BLOCK        */
*/*        WHICH CONTAINS NO SECTION CHAIN AHEAD DISPLACEMENTS.      */
*/*        THE LIMITS OF THE BLOCK ARE DEFINED TO BE:                */
*/*          LEFTMOST ENTRY DISPLACEMENT IN IXHLEO.                  */
*/*          RIGHTMOST ENTRY DISPLACEMENT IN IXHSEO.                 */
*/*           EACH DISPLACEMENT IS FROM THE BEGINNING OF THE         */
*/*           RECORD TO THE 'F' FIELD OF THE ENTRY.                  */
*/*       OUTPUT -                                                   */
*/*        THE NUMBER OF ENTRYS IS RETURNED IN RWORK0.               */
*/*                                                                  */
*                                                                  0598
*COUNT:                                                            0598
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                               */
COUNT    DS    0H                                                  0599
*   GEN SETS(PLHRETO,PLHRET1)(IDASVR14);/* SAVE REGISTER 14          */
         IDASVR14
*   RESPECIFY                                                      0600
*    (RWORK0,                                                      0600
*     RWORK4,                                                      0600
*     RWORK5) RSTD;                 /*                               */
*   RWORK0=ZERO;                    /* INITIALIZE COUNTER            */
         SLR   RWORK0,RWORK0                                       0601
*   RWORK4=RPARM1->IXHSEO;          /* INITIALIZE LOOP CONTROL       */
         LH    RWORK4,IXHSEO(,RPARM1)                              0602
*   DO WHILE RWORK4^<RPARM1->IXHLEO;/* LOOP STOPS WHEN LAST ENTRY HAS
*                                      BEEN COUNTED                  */
         B     @DE00603                                            0603
@DL00603 DS    0H                                                  0604
*     RWORK5=RPARM1+RWORK4;         /* POINT AT CURRENT ENTRY        */
         LR    RWORK5,RPARM1                                       0604
         ALR   RWORK5,RWORK4                                       0604
*     RWORK4=RWORK4-RWORK5->IBFLPL  /* COMPUTE DISPLACEMENT OF       */
*         -RPARM1->IXHFLPLN;        /* NEXT ENTRY TO THE LEFT        */
         LR    @10,RWORK4                                          0605
         SLR   @15,@15                                             0605
         IC    @15,IBFLPL(,RWORK5)                                 0605
         SLR   @10,@15                                             0605
         SLR   @15,@15                                             0605
         IC    @15,IXHFLPLN(,RPARM1)                               0605
         SLR   @10,@15                                             0605
         LR    RWORK4,@10                                          0605
*     RWORK0=RWORK0+ONE;            /* BUMP COUNTER BY 1             */
         AL    RWORK0,@CF00053                                     0606
*   END;                            /*                               */
@DE00603 CH    RWORK4,IXHLEO(,RPARM1)                              0607
         BNL   @DL00603                                            0607
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0608
*   RESPECIFY                                                      0609
*    (RWORK0,                                                      0609
*     RWORK4,                                                      0609
*     RWORK5) UNRSTD;               /*                               */
*   END COUNT;                      /*                               */
@EL00003 DS    0H                                                  0610
@EF00003 DS    0H                                                  0610
@ER00003 BR    @14                                                 0610
*                                                                  0611
*/*                                                                  */
*/*    MOVEPTRR SUBROUTINE                                           */
*/*       FUNCTION -                                                 */
*/*        PLACES THE INDEX POINTERS FROM A BLOCK OF AN INDEX        */
*/*        INTO THE FREESPACE AREA OF THE INDEX RECORD. THE ORDER    */
*/*        OF MOVING THE POINTERS IS FROM RIGHT TO LEFT, IE, THE     */
*/*        RIGHTMOST POINTER FROM THE BLOCK IS PLACED INTO THE       */
*/*        RIGHTMOST LOCATION IN THE FREESPACE, THEN THE NEXT POINTER*/
*/*        TO THE LEFT IS PLACED INTO THE NEXT POSITION TO THE LEFT  */
*/*        IN THE FREESPACE, AND SO ON.  THE POINTERS IN THE INDEX   */
*/*        BLOCK ARE NOT ERASED AFTER BEING MOVED.                   */
*/*        THE BLOCK OF INDEX MUST NOT CONTAIN ANY SECTION LL FIELDS,*/
*/*       INPUT -                                                    */
*/*        THE BLOCK OF INDEX IS DEFINED BY THE FOLLOWING OFFSETS    */
*/*        TO THE 'F' FIELD -                                        */
*/*         IXHSEO = RIGHTMOST INDEX ENTRY.                          */
*/*         IXHLEO = LEFTMOST INDEX ENTRY.                           */
*/*        THE ADDRESS OF THE FREESPACE LOCATION TO RECIEVE THE      */
*/*        FIRST POINTER IS IN PLHSAVE5.                             */
*/*       OUTPUT -                                                   */
*/*        IXHFSO (DISPLACEMENT OF FREESPACE) WILL BE SET TO THE     */
*/*        DISPLACEMENT OF THE FIRST POSITION TO THE RIGHT OF THE    */
*/*        SERIES OF POINTERS PLACED.                                */
*/*       RETURN -                                                   */
*/*        ALWAYS TO CALLER.                                         */
*/*                                                                  */
*                                                                  0611
*MOVEPTRR:                                                         0611
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                               */
MOVEPTRR DS    0H                                                  0612
*   GEN SETS(PLHRETO,PLHRET1)(IDASVR14);/* SAVE REGISTER 14          */
         IDASVR14
*   RESPECIFY                                                      0613
*    (RWORK0,                                                      0613
*     RWORK2,                                                      0613
*     RWORK3,                                                      0613
*     RWORK4,                                                      0613
*     RWORK5) RSTD;                 /* OF BLOCK                      */
*   RWORK3=RPARM1+RPARM1->IXHSEO;   /* GET ADDRESS AT RIGHT END OF 0614
*                                      BLOCK                         */
         LR    RWORK3,RPARM1                                       0614
         AH    RWORK3,IXHSEO(,RPARM1)                              0614
*   RWORK4=RPARM1->IXHPTLS;         /* GET POINTER MASK FROM HEADER  */
         SLR   RWORK4,RWORK4                                       0615
         IC    RWORK4,IXHPTLS(,RPARM1)                             0615
*   RWORK5=PLHSAVE5;                /* GET ADDRESS OF FIRST PTR.   0616
*                                      STORE POSITION                */
         L     RWORK5,PLHSAVE5(,RPLH)                              0616
*   DO WHILE RWORK3^<RPARM1+        /* LOOP TO MOVE ACROSS           */
*         RPARM1->IXHLEO;           /* BLOCK MOVING POINTERS         */
         B     @DE00617                                            0617
@DL00617 DS    0H                                                  0618
*     RWORK2=RWORK3;                /* KEEP POINTER AT F FIELD       */
         LR    RWORK2,RWORK3                                       0618
*     RWORK3=RWORK2+LENGTH(IBFLPL)+ /* POINT AT THE POINTER          */
*         LENGTH(IBFLPF);           /* FIELD                         */
         LA    RWORK3,2                                            0619
         ALR   RWORK3,RWORK2                                       0619
*     GEN(EX  RWORK4,PICKPNT);      /* PICK UP POINTER               */
         EX  RWORK4,PICKPNT
*     GEN(EX  RWORK4,PLACEPNT);     /* STORE POINTER                 */
         EX  RWORK4,PLACEPNT
*     RWORK3=RWORK2-(RWORK2->IBFLPL)/* MOVE TO NEXT ENTRY IN         */
*         -RPARM1->IXHFLPLN;        /* THE BLOCK                     */
         LR    RWORK3,RWORK2                                       0622
         SLR   @10,@10                                             0622
         IC    @10,IBFLPL(,RWORK2)                                 0622
         SLR   RWORK3,@10                                          0622
         SLR   @10,@10                                             0622
         IC    @10,IXHFLPLN(,RPARM1)                               0622
         SLR   RWORK3,@10                                          0622
*     RWORK5=RWORK5-ICWPTL;         /* MOVE TO NEXT STORAGE POSITION */
         SLR   @10,@10                                             0623
         IC    @10,ICWPTL(,RWORK1)                                 0623
         SLR   RWORK5,@10                                          0623
*   END;                            /*                               */
@DE00617 LR    @10,RPARM1                                          0624
         AH    @10,IXHLEO(,RPARM1)                                 0624
         CR    RWORK3,@10                                          0624
         BNL   @DL00617                                            0624
*   RPARM1->IXHFSO=PLHSAVE5-RPARM1+ICWPTL;/* ADJUST OFFSET TO      0625
*                                      FREESPACE                     */
         L     @10,PLHSAVE5(,RPLH)                                 0625
         SLR   @10,RPARM1                                          0625
         SLR   @15,@15                                             0625
         IC    @15,ICWPTL(,RWORK1)                                 0625
         ALR   @10,@15                                             0625
         STH   @10,IXHFSO(,RPARM1)                                 0625
*   RESPECIFY                                                      0626
*    (RWORK0,                                                      0626
*     RWORK2,                                                      0626
*     RWORK3,                                                      0626
*     RWORK4,                                                      0626
*     RWORK5) UNRSTD;               /*                               */
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0627
*   END MOVEPTRR;                   /* END OF MOVEPTRR        SUBRTN,*/
@EL00004 DS    0H                                                  0628
@EF00004 DS    0H                                                  0628
@ER00004 BR    @14                                                 0628
*                                                                  0629
*/*                                                                  */
*/*    MOVEPTRL SUBROUTINE                                           */
*/*       FUNCTION -                                                 */
*/*        PLACES THE INDEX POINTERS FROM A BLOCK OF AN INDEX        */
*/*        INTO THE FREESPACE AREA OF THE INDEX RECORD. THE ORDER    */
*/*        OF MOVING THE POINTERS IS FROM LEFT TO RIGHT, IE, THE     */
*/*        LEFTMOST POINTER FROM THE BLOCK IS PLACED INTO THE        */
*/*        LEFTMOST LOCATION IN THE FREESPACE, THEN THE NEXT POINTER */
*/*        TO THE RIGHT IS PLACED INTO THE NEXT POSITION TO THE RIGHT*/
*/*        IN THE FREESPACE, AND SO ON.  THE POINTERS IN THE INDEX   */
*/*        ARE  ERASED AFTER BEING MOVED.                            */
*/*        THE BLOCK OF INDEX MUST NOT CONTAIN ANY SECTION LL FIELDS.*/
*/*       INPUT -                                                    */
*/*        THE BLOCK OF INDEX IS DEFINED BY THE FOLLOWING OFFSETS    */
*/*        TO THE 'F' FIELD -                                        */
*/*         IXHSEO = RIGHTMOST INDEX ENTRY.                          */
*/*         IXHLEO = LEFTMOST INDEX ENTRY.                           */
*/*        THE OFFSET OF THE FREESPACE LOCATION TO RECEIVE THE       */
*/*        FIRST POINTER IS IN IXHFSO.                               */
*/*       OUTPUT -                                                   */
*/*        IXHFSO (DISPLACEMENT OF FREESPACE) WILL BE SET TO THE     */
*/*        DISPLACEMENT OF THE FIRST POSITION TO THE RIGHT OF THE    */
*/*        SERIES OF POINTERS PLACED.                                */
*/*       RETURN -                                                   */
*/*        ALWAYS TO CALLER.                                         */
*/*                                                                  */
*                                                                  0629
*MOVEPTRL:                                                         0629
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                               */
MOVEPTRL DS    0H                                                  0630
*   GEN SETS(PLHRETO,PLHRET1)(IDASVR14);/* SAVE REGISTER 14          */
         IDASVR14
*   RESPECIFY                                                      0631
*    (RWORK0,                                                      0631
*     RWORK2,                                                      0631
*     RWORK3,                                                      0631
*     RWORK4,                                                      0631
*     RWORK5) RSTD;                 /*                               */
*   RWORK2=ZERO;                    /* INITIALIZE ENTRY COUNT        */
         SLR   RWORK2,RWORK2                                       0632
*   RWORK3=RPARM1+RPARM1->IXHSEO;   /* POINT TO RIGHTMOST INDEX ENTRY
*                                      IN BLOCK                      */
         LR    RWORK3,RPARM1                                       0633
         AH    RWORK3,IXHSEO(,RPARM1)                              0633
*   RWORK4=RPARM1+RPARM1->IXHLEO;   /* POINT TO LEFTMOST INDEX ENTRY
*                                      IN BLOCK                      */
         LR    RWORK4,RPARM1                                       0634
         AH    RWORK4,IXHLEO(,RPARM1)                              0634
*   DO WHILE RWORK3^<RWORK4;        /* LOOP COUNTS INDX ENTRYS       */
         B     @DE00635                                            0635
@DL00635 DS    0H                                                  0636
*     RWORK2=RWORK2+ONE;            /* INCREMENT ENTRY COUNT         */
         AL    RWORK2,@CF00053                                     0636
*     RWORK3=RWORK3-RWORK3->IBFLPL- /* MOVE TO THE NEXT              */
*         RPARM1->IXHFLPLN;         /* ENTRY                         */
         LR    @10,RWORK3                                          0637
         SLR   @15,@15                                             0637
         IC    @15,IBFLPL(,RWORK3)                                 0637
         SLR   @10,@15                                             0637
         SLR   @15,@15                                             0637
         IC    @15,IXHFLPLN(,RPARM1)                               0637
         SLR   @10,@15                                             0637
         LR    RWORK3,@10                                          0637
*   END;                            /*                               */
@DE00635 CR    RWORK3,RWORK4                                       0638
         BNL   @DL00635                                            0638
*   RWORK5=RPARM1+RPARM1->IXHFSO;   /* POINT TO FREE AREA            */
         LR    RWORK5,RPARM1                                       0639
         AH    RWORK5,IXHFSO(,RPARM1)                              0639
*   RESPECIFY                                                      0640
*    (RWORK0) RSTD;                 /*                               */
*   DO RWORK2=RWORK2 BY-ONE TO ONE; /* LOOP TO MOVE EACH PTR         */
         B     @DE00641                                            0641
@DL00641 DS    0H                                                  0642
*     RWORK3=RPARM1+RPARM1->IXHSEO; /* START AT RIGHT END            */
         LR    RWORK3,RPARM1                                       0642
         AH    RWORK3,IXHSEO(,RPARM1)                              0642
*     DO RWORK0=ONE TO RWORK2-ONE;  /* LOOP TO LOCATE PTR            */
         LA    RWORK0,1                                            0643
         B     @DE00643                                            0643
@DL00643 DS    0H                                                  0644
*       RWORK3=RWORK3-RWORK3->IBFLPL-/* MOVE OVER ONE                */
*           RPARM1->IXHFLPLN;       /* ENTRY                         */
         LR    @10,RWORK3                                          0644
         SLR   @15,@15                                             0644
         IC    @15,IBFLPL(,RWORK3)                                 0644
         SLR   @10,@15                                             0644
         SLR   @15,@15                                             0644
         IC    @15,IXHFLPLN(,RPARM1)                               0644
         SLR   @10,@15                                             0644
         LR    RWORK3,@10                                          0644
*     END;                          /*                               */
         AL    RWORK0,@CF00053                                     0645
@DE00643 LR    @10,RWORK2                                          0645
         BCTR  @10,0                                               0645
         CLR   RWORK0,@10                                          0645
         BNH   @DL00643                                            0645
*     RWORK3=RWORK3+LENGTH(IBFLPL)+ /* MOVE ADDRESS FROM F           */
*         LENGTH(IBFLPF);           /* FIELD TO PTR. FIELD           */
         AL    RWORK3,@CF00146                                     0646
*     RWORK4=RPARM1->IXHPTLS;       /* GET POINTER MASK FROM HEADER  */
         SLR   RWORK4,RWORK4                                       0647
         IC    RWORK4,IXHPTLS(,RPARM1)                             0647
*     GEN(EX   RWORK4,PICKPNT);     /* PICK UP A POINTER             */
         EX   RWORK4,PICKPNT
*     RWORK3=RWORK3-ONE;            /* POINT TO L FIELD              */
         BCTR  RWORK3,0                                            0649
*     RBUFC=RPARM1+RPARM1->IXHLEO;  /* GET ADDRESS OF LEFTMOST ENTRY */
         LR    RBUFC,RPARM1                                        0650
         AH    RBUFC,IXHLEO(,RPARM1)                               0650
*     RBUFC=RBUFC-RBUFC->IBFLPL;    /* COMPUTE ADDRESS OF LEFT END OF
*                                      THE BLOCK                     */
         SLR   @10,@10                                             0651
         IC    @10,IBFLPL(,RBUFC)                                  0651
         SLR   RBUFC,@10                                           0651
*     RWORK4=RWORK3+ICWPTL;         /* GET ADDRESS OF THE LAST BYTE
*                                      OF VACATED PTR.               */
         LR    RWORK4,RWORK3                                       0652
         SLR   @10,@10                                             0652
         IC    @10,ICWPTL(,RWORK1)                                 0652
         ALR   RWORK4,@10                                          0652
*     DO RWORK3=RWORK3 BY-ONE TO RBUFC;/* LOOP MOVES BLOCK RIGHT OVER
*                                      VACATED PTR                   */
         B     @DE00653                                            0653
@DL00653 DS    0H                                                  0654
*       RWORK4->IXKEY=RWORK3->IXKEY;/* MOVE ONE BYTE                 */
         MVC   IXKEY(1,RWORK4),IXKEY(RWORK3)                       0654
*       RWORK4=RWORK4-ONE;          /* UPDATE 'TO' ADDRESS           */
         BCTR  RWORK4,0                                            0655
*     END;                          /*                               */
         BCTR  RWORK3,0                                            0656
@DE00653 CR    RWORK3,RBUFC                                        0656
         BNL   @DL00653                                            0656
*     RPARM1->IXHLEO=RPARM1->IXHLEO /* REVISE LEFT HAND OFFSET       */
*         +ICWPTL;                  /* BY AMOUNT MOVED RIGHT         */
         SLR   @10,@10                                             0657
         IC    @10,ICWPTL(,RWORK1)                                 0657
         AH    @10,IXHLEO(,RPARM1)                                 0657
         STH   @10,IXHLEO(,RPARM1)                                 0657
*     RWORK4=RPARM1->IXHPTLS;       /* PICK UP POINTER MASK          */
         SLR   RWORK4,RWORK4                                       0658
         IC    RWORK4,IXHPTLS(,RPARM1)                             0658
*     GEN(EX   RWORK4,PLACEPNT);    /* STORE THE POINTER             */
         EX   RWORK4,PLACEPNT
*     RWORK5=RWORK5+ICWPTL;         /* ADDRESS NEXT STORE LOC        */
         SLR   @10,@10                                             0660
         IC    @10,ICWPTL(,RWORK1)                                 0660
         ALR   RWORK5,@10                                          0660
*   END;                            /*                               */
         BCTR  RWORK2,0                                            0661
@DE00641 CL    RWORK2,@CF00053                                     0661
         BNL   @DL00641                                            0661
*   RPARM1->IXHFSO=RWORK5-RPARM1;   /* ADJUST FREE SPACE PTR.        */
         LR    @10,RWORK5                                          0662
         SLR   @10,RPARM1                                          0662
         STH   @10,IXHFSO(,RPARM1)                                 0662
*   RPARM1->IXHSEO=RPARM1->IXHSEO   /* ADJUST OFFSET TO RIGHT        */
*       +ICWPTL;                    /* END OF BLOCK                  */
         SLR   @10,@10                                             0663
         IC    @10,ICWPTL(,RWORK1)                                 0663
         AH    @10,IXHSEO(,RPARM1)                                 0663
         STH   @10,IXHSEO(,RPARM1)                                 0663
*   RESPECIFY                                                      0664
*    (RWORK2,                                                      0664
*     RWORK3,                                                      0664
*     RWORK4,                                                      0664
*     RWORK5,                                                      0664
*     RWORK0) UNRSTD;               /*                               */
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0665
*   END MOVEPTRL;                   /* END OF MOVEPTRL        SUBRTN.*/
@EL00005 DS    0H                                                  0666
@EF00005 DS    0H                                                  0666
@ER00005 BR    @14                                                 0666
*                                                                  0667
*/*                                                                  */
*/*    DELSECT  SUBROUTINE                                           */
*/*       FUNCTION -                                                 */
*/*        REMOVES THE SECTION CHAINING POINTERS FROM AN INDEX RECORD*/
*/*        THE RECORD ENTRYS OF F,L,POINTERS AND KEY ARE UNCHANGED   */
*/*        EXCEPT THAT THEIR LOCATION IN THE BUFFER MAY SHIFT.       */
*/*       INPUT -                                                    */
*/*        RWORK1 = POINTER TO WORK AREA.                            */
*/*        RPARM1 = POINTER TO BUFFER.                               */
*/*       OUTPUT-                                                    */
*/*        THE FOLLOWING WILL BE SET SO THAT THE INDEX DATA CAN      */
*/*        BE LOCATED -                                              */
*/*         PLHSAVE6 = DISPLACEMENT OF SPLIT POINT.                  */
*/*         IXHLEO = DISPLMNT OF F FIELD OF LAST (LEFTMOST) ENTRY.   */
*/*         IXHSEO = DISPLMNT OF F FIELD OF FIRST (RIGHTMOST) ENTRY. */
*/*       RETURN-                                                    */
*/*        ALWAYS TO CALLER                                          */
*                                                                  0667
*DELSECT:                                                          0667
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                               */
DELSECT  DS    0H                                                  0668
*   GEN SETS(PLHRETO,PLHRET1)(IDASVR14);/* SAVE REGISTER 14          */
         IDASVR14
*   RESPECIFY                                                      0669
*    (RWORK0,                                                      0669
*     RWORK2,                                                      0669
*     RWORK3,                                                      0669
*     RWORK4,                                                      0669
*     RWORK5) RSTD;                 /*                               */
*   RESPECIFY                                                      0670
*     R14 RSTD;                     /* INFORM COMPILER       @ZA24350*/
*   RWORK2=RPARM1+RPARM1->IXHLL;    /* POINT JUST BEYOND END OF    0671
*                                      RECORD                        */
         LR    RWORK2,RPARM1                                       0671
         LH    @15,IXHLL(,RPARM1)                                  0671
         N     @15,@CF01056                                        0671
         ALR   RWORK2,@15                                          0671
*   R14=RPARM1+(RPARM1->IXHLEO);    /* LEFTMOST SECTION PTR  @ZA24350*/
         LR    R14,RPARM1                                          0672
         AH    R14,IXHLEO(,RPARM1)                                 0672
*   RWORK0=ZERO;                    /* CLEAR REG RECEIVING LL        */
         SLR   RWORK0,RWORK0                                       0673
*DELA:                                                             0674
*   RWORK5=RPARM1+(RPARM1->IXHSEO); /* POINT TO RIGHTMOST SECTION  0674
*                                      ENTRY                         */
DELA     LR    RWORK5,RPARM1                                       0674
         AH    RWORK5,IXHSEO(,RPARM1)                              0674
*   RWORK3=RWORK5-RWORK5->IBFLPL    /* MOVE BACK TO BEGINNING        */
*       -LENGTH(IXSELL);            /* OF SECTION LL FIELD           */
         LR    RWORK3,RWORK5                                       0675
         SLR   @15,@15                                             0675
         IC    @15,IBFLPL(,RWORK5)                                 0675
         SLR   RWORK3,@15                                          0675
         BCTR  RWORK3,0                                            0675
         BCTR  RWORK3,0                                            0675
*   RWORK4=THREE;                   /* TWO BYTE MASK                 */
         LA    RWORK4,3                                            0676
*   GEN(EX  RWORK4,PICKPNT);        /* OBTAIN SECTION LL FIELD       */
         EX  RWORK4,PICKPNT
*   IF RWORK0^=ZERO&RWORK5>R14 THEN /* SECTION POINTER FIELD ZERO OR
*                                      AT LEFTMOST SECTION ENTRY   0678
*                                                            @ZA24350*/
         LTR   RWORK0,RWORK0                                       0678
         BZ    @RF00678                                            0678
         CR    RWORK5,R14                                          0678
         BNH   @RF00678                                            0678
*     DO;                           /* NO                            */
*       RPARM1->IXHSEO=RPARM1->IXHSEO/* RESET DISPLACEMENT           */
*           -RWORK0;                /* TO FIRST SECTION              */
         LH    @15,IXHSEO(,RPARM1)                                 0680
         SLR   @15,RWORK0                                          0680
         STH   @15,IXHSEO(,RPARM1)                                 0680
*       IF RPARM1+PLHSAVE6^<RWORK5 THEN/* IS SPLIT POINT TO MOVE     */
         L     @15,PLHSAVE6(,RPLH)                                 0681
         LR    @10,RPARM1                                          0681
         ALR   @10,@15                                             0681
         CR    @10,RWORK5                                          0681
         BL    @RF00681                                            0681
*         PLHSAVE6=PLHSAVE6-LENGTH(IXSELL);/* YES, ADJUST IT         */
         BCTR  @15,0                                               0682
         BCTR  @15,0                                               0682
         ST    @15,PLHSAVE6(,RPLH)                                 0682
*       RWORK4=RWORK3+LENGTH(IXSELL);/* SET 'FROM' ADDRESS           */
@RF00681 LA    RWORK4,2                                            0683
         ALR   RWORK4,RWORK3                                       0683
*       RWORK5=RWORK2-RWORK4;       /* DETERMINE MOVE LENGTH         */
         LR    RWORK5,RWORK2                                       0684
         SLR   RWORK5,RWORK4                                       0684
*       RWORK2=RWORK3;              /* SET 'TO' ADDRESS              */
         LR    RWORK2,RWORK3                                       0685
*       RWORK3=RWORK5;              /* SET LENGTH                    */
         LR    RWORK3,RWORK5                                       0686
*       GEN(MVCL   RWORK2,RWORK4);  /* MOVE LEFT, ATOP LL            */
         MVCL   RWORK2,RWORK4
*       GO TO DELA;                 /* BACK FOR NEXT SECTION         */
         B     DELA                                                0688
*     END;                          /*                               */
*   ELSE                            /*                               */
*     DO;                           /*                               */
@RF00678 DS    0H                                                  0691
*       RPARM1->IXHSEO=RWORK2-RPARM1/* SET DISPLACEMENT OF           */
*           -RPARM1->IXHFLPLN;      /* RIGHTMOST ENTRY               */
         LR    @15,RWORK2                                          0691
         SLR   @15,RPARM1                                          0691
         SLR   @10,@10                                             0691
         IC    @10,IXHFLPLN(,RPARM1)                               0691
         SLR   @15,@10                                             0691
         STH   @15,IXHSEO(,RPARM1)                                 0691
*       CALL EXIT;                  /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0692
*     END;                          /*                               */
*   RESPECIFY                                                      0694
*     R14 UNRESTRICTED;             /* INFORM COMPILER       @ZA24350*/
*   RESPECIFY                                                      0695
*    (RWORK0,                                                      0695
*     RWORK2,                                                      0695
*     RWORK3,                                                      0695
*     RWORK4,                                                      0695
*     RWORK5) UNRSTD;               /*                               */
*   END DELSECT;                    /* END OF SUBROUTINE             */
@EL00006 DS    0H                                                  0696
@EF00006 DS    0H                                                  0696
@ER00006 BR    @14                                                 0696
*                                                                  0697
*/*                                                                  */
*/*    DELPTR SUBROUTINE                                             */
*/*       FUNCTION -                                                 */
*/*        REMOVES THE INDEX POINTERS FROM A BLOCK OF AN INDEX.  THE */
*/*        F, L, AND KEY FIELDS ARE NOT CHANGED.                     */
*/*       INPUT -                                                    */
*/*        THE BLOCK OF INDEX IS DEFINED BY THE FOLLOWING OFFSETS    */
*/*        TO THE 'F' FIELD -                                        */
*/*         IXHSEO = RIGHTMOST INDEX ENTRY.                          */
*/*         IXHLEO = LEFTMOST INDEX ENTRY.                           */
*/*       OUTPUT -                                                   */
*/*         IXHSEO AND IXHLEO WILL HAVE THE SAME MEANING AS ON       */
*/*         INPUT FOR THE NEW BLOCK WITH POINTERS SQUEEZED OUT.      */
*/*       RETURN -                                                   */
*/*        ALWAYS RETURN TO CALLER                                   */
*/*                                                                  */
*                                                                  0697
*DELPTR:                                                           0697
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                               */
DELPTR   DS    0H                                                  0698
*   GEN SETS(PLHRETO,PLHRET1)(IDASVR14);/* SAVE REGISTER 14          */
         IDASVR14
*   RESPECIFY                                                      0699
*    (RWORK2,                                                      0699
*     RWORK3,                                                      0699
*     RWORK4,                                                      0699
*     RWORK5) RSTD;                 /*                               */
*   RWORK4=RPARM1+RPARM1->IXHSEO;   /* POINT TO RIGHT ENTRY          */
         LR    RWORK4,RPARM1                                       0700
         AH    RWORK4,IXHSEO(,RPARM1)                              0700
*   RWORK2=RWORK4+LENGTH(IBFLPF)+   /* POINT TO FIRST POSITION       */
*       LENGTH(IBFLPL);             /* BEYOND THE BLOCK              */
         LA    RWORK2,2                                            0701
         ALR   RWORK2,RWORK4                                       0701
*   PLHSAVE2=RWORK4-(RWORK4->IBFLPL)/* SET POINTER TO THE NEXT       */
*       -(RPARM1->IXHFLPLN);        /* ENTRY                         */
         LR    @10,RWORK4                                          0702
         SLR   @00,@00                                             0702
         IC    @00,IBFLPL(,RWORK4)                                 0702
         SLR   @10,@00                                             0702
         SLR   @00,@00                                             0702
         IC    @00,IXHFLPLN(,RPARM1)                               0702
         SLR   @10,@00                                             0702
         ST    @10,PLHSAVE2(,RPLH)                                 0702
*   PLHSAVE1=RPARM1+RPARM1->IXHLEO; /* LOOP ENTRY BY ENTRY           */
         LR    @10,RPARM1                                          0703
         AH    @10,IXHLEO(,RPARM1)                                 0703
         ST    @10,PLHSAVE1(,RPLH)                                 0703
*   DO WHILE PLHSAVE2^<PLHSAVE1;    /* UNTIL COMPLETED               */
         B     @DE00704                                            0704
@DL00704 DS    0H                                                  0705
*     RWORK4=RWORK4-RWORK4->IBFLPL; /* SET 'FROM' ADDRESS            */
         SLR   @10,@10                                             0705
         IC    @10,IBFLPL(,RWORK4)                                 0705
         SLR   RWORK4,@10                                          0705
*     RWORK3=RWORK2-RWORK4;         /* SET MOVE LENGTH               */
         LR    RWORK3,RWORK2                                       0706
         SLR   RWORK3,RWORK4                                       0706
*     RWORK2=RWORK4-ICWPTL;         /* SET 'TO' ADDRESS              */
         LR    RWORK2,RWORK4                                       0707
         SLR   @10,@10                                             0707
         IC    @10,ICWPTL(,RWORK1)                                 0707
         SLR   RWORK2,@10                                          0707
*     RWORK5=RWORK3;                /* SET LENGTH OF MOVE            */
         LR    RWORK5,RWORK3                                       0708
*     GEN(MVCL  RWORK2,RWORK4);     /* MOVE LEFT OVERLAYING THE    0709
*                                      POINTER FIELD                 */
         MVCL  RWORK2,RWORK4
*     RWORK4=PLHSAVE2;              /* UPDATE TO A NEW INDEX ENTRY   */
         L     @10,PLHSAVE2(,RPLH)                                 0710
         LR    RWORK4,@10                                          0710
*     PLHSAVE2=PLHSAVE2-(RWORK4->IBFLPL)-/* MOVE AHEAD ONE MORE      */
*         (RPARM1->IXHFLPLN);       /* ENTRY                         */
         SLR   @00,@00                                             0711
         IC    @00,IBFLPL(,RWORK4)                                 0711
         SLR   @10,@00                                             0711
         SLR   @00,@00                                             0711
         IC    @00,IXHFLPLN(,RPARM1)                               0711
         SLR   @10,@00                                             0711
         ST    @10,PLHSAVE2(,RPLH)                                 0711
*   END;                            /*                               */
@DE00704 CLC   PLHSAVE2(4,RPLH),PLHSAVE1(RPLH)                     0712
         BNL   @DL00704                                            0712
*   RPARM1->IXHSEO=RWORK2-RPARM1    /* RESET THE DISPLACEMENT        */
*       -LENGTH(IBFLPF)             /* TO THE RIGHT HAND             */
*       -LENGTH(IBFLPL);            /* ENTRY OF THE BLOCK            */
         LR    @10,RWORK2                                          0713
         SLR   @10,RPARM1                                          0713
         BCTR  @10,0                                               0713
         BCTR  @10,0                                               0713
         STH   @10,IXHSEO(,RPARM1)                                 0713
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0714
*   RESPECIFY                                                      0715
*    (RWORK2,                                                      0715
*     RWORK3,                                                      0715
*     RWORK4,                                                      0715
*     RWORK5) UNRSTD;               /*                               */
*   END DELPTR;                     /*                               */
@EL00007 DS    0H                                                  0716
@EF00007 DS    0H                                                  0716
@ER00007 BR    @14                                                 0716
*                                                                  0717
*/*                                                                  */
*/*    UNCOMPRS SUBROUTINE                                           */
*/*       FUNCTION -                                                 */
*/*        1. MOVES CURRENT KEY IN WORKAREA TO PREVIOUS KEY.         */
*/*        2. MOVES CURRENT KEY LENGTH TO PREVIOUS KEY LENGTH.       */
*/*        3. UNCOMPRESSES THE KEY ENTRY BASED ON PLHSAVE2 AND       */
*/*           PLACES IT INTO THE CURRENT KEY OF THE WORKAREA.        */
*/*        4. PLACES THE KEY LENGTH INTO THE WORK AREA.              */
*/*                                                                  */
*                                                                  0717
*UNCOMPRS:                                                         0717
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                               */
UNCOMPRS DS    0H                                                  0718
*   GEN SETS(PLHRETO,PLHRET1)(IDASVR14);/* SAVE REGISTER 14          */
         IDASVR14
*   RESPECIFY                                                      0719
*    (RWORK2,                                                      0719
*     RWORK3,                                                      0719
*     RWORK4,                                                      0719
*     RWORK5) RSTD;                 /*                               */
*   RWORK4=ADDR(ICWKEY1);           /* POINT TO CURRENT KEY          */
         LA    RWORK4,ICWKEY1(,RWORK1)                             0720
*   RWORK2=RWORK4+AMDKEYLN;         /* POINT TO PREVIOUS KEY         */
         L     @10,AMBDSB(,RAMB)                                   0721
         LR    RWORK2,RWORK4                                       0721
         AH    RWORK2,AMDKEYLN(,@10)                               0721
*   RWORK3=ICWKEY1L;                /* SET MOVE LENGTH EQUAL         */
         LH    RWORK3,ICWKEY1L(,RWORK1)                            0722
*   RWORK5=RWORK3;                  /* TO LENGTH OF KEY              */
         LR    RWORK5,RWORK3                                       0723
*   GEN(MVCL  RWORK2,RWORK4);       /* MOVE CURRENT + PREVIOUS       */
         MVCL  RWORK2,RWORK4
*   ICWKEY2L=ICWKEY1L;              /* MOVE LENGTH AS WELL           */
         LH    @10,ICWKEY1L(,RWORK1)                               0725
         STH   @10,ICWKEY2L(,RWORK1)                               0725
*   RWORK4=PLHSAVE2-                /* POINT TO FIRST BYTE OF        */
*       PLHSAVE2->IBFLPL;           /* STORED KEY                    */
         L     @10,PLHSAVE2(,RPLH)                                 0726
         SLR   @15,@15                                             0726
         IC    @15,IBFLPL(,@10)                                    0726
         LR    RWORK4,@10                                          0726
         SLR   RWORK4,@15                                          0726
*   RWORK2=ADDR(ICWKEY1)+           /* POINT TO FIRST POSITION       */
*       PLHSAVE2->IBFLPF;           /* WHICH WILL CHANGE             */
         LA    RWORK2,ICWKEY1(,RWORK1)                             0727
         SLR   @14,@14                                             0727
         IC    @14,IBFLPF(,@10)                                    0727
         ALR   RWORK2,@14                                          0727
*   RWORK3=PLHSAVE2->IBFLPL;        /* SET LENGTH OF MOVE            */
         LR    RWORK3,@15                                          0728
*   RWORK5=RWORK3;                  /*                               */
         LR    RWORK5,RWORK3                                       0729
*   ICWKEY1L=RWORK3+                /* COMPUTE (F + L) AND           */
*       PLHSAVE2->IBFLPF;           /* SAVE KEY LENGTH               */
         ALR   @14,RWORK3                                          0730
         STH   @14,ICWKEY1L(,RWORK1)                               0730
*   GEN(MVCL  RWORK2,RWORK4);       /* MOVE KEY TO WORK AREA         */
         MVCL  RWORK2,RWORK4
*   RESPECIFY                                                      0732
*    (RWORK2,                                                      0732
*     RWORK3,                                                      0732
*     RWORK4,                                                      0732
*     RWORK5) UNRSTD;               /*                               */
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0733
*   END UNCOMPRS;                   /*                               */
@EL00008 DS    0H                                                  0734
@EF00008 DS    0H                                                  0734
@ER00008 BR    @14                                                 0734
*                                                                  0735
*/*                                                                  */
*/*    IDAR SUBROUTINE                                               */
*/*                                                                  */
*/*       FUNCTION -                                                 */
*/*        INTERFACES WITH BUFFER MANAGER TO RETRIEVE THE            */
*/*        INDEX RECORD WITH SPECIFIED RBA.  RWORK1 WILL BE          */
*/*        PRESERVED ACROSS THE INTERFACE.                           */
*/*       INPUT -                                                    */
*/*        RWORK1 = POINTER TO CURRENT WORK AREA.                    */
*/*        RPARM1 = RBA OF INDEX RECORD TO BE RETRIEVED.             */
*/*       OUTPUT -                                                   */
*/*        RBUFC = POINTER TO BUFC OF RETRIEVED RECORD.              */
*/*       RETURN-                                                    */
*/*        TO CALLER IF NO ERRORS WERE ENCOUNTERED.                  */
*/*        TO CALLER OF CALLER IN CASE OF I/O ERROR                  */
*/*                                                                  */
*                                                                  0735
*IDAR:                                                             0735
*   ENTRY;                          /*                               */
@EP00735 DS    0H                                                  0735
@EC00735 DS    0H                                                  0736
*   GEN SETS(PLHRETO,PLHRET1)(IDASVR14);/* SAVE REG 14               */
         IDASVR14
*   RFY                                                            0737
*     R14 RSTD;                     /*                       @X04SVES*/
*   R14=ADDR(PLHIXSPL);             /* POINT TO INDEX SEARCH PARM  0738
*                                      LIST                  @X04SVES*/
         LA    R14,PLHIXSPL(,RPLH)                                 0738
*   R14->IXSILN=ICWLN;              /* SET LEVEL NO.         @X04SVES*/
         LH    @15,ICWLN(,RWORK1)                                  0739
         STC   @15,IXSILN(,R14)                                    0739
*   RFY                                                            0740
*     R14 UNRSTD;                   /*                       @X04SVES*/
*   IF ICWLN=ICWSS THEN             /* IS THIS A SEQ SET READ        */
         C     @15,@CF00053                                        0741
         BNE   @RF00741                                            0741
*     PLHSSR=ON;                    /* YES, TELL BUF.MGR             */
         OI    PLHSSR(RPLH),B'00010000'                            0742
*   ELSE                            /* NO,                           */
*     PLHSSR=OFF;                   /* INSURE FLAG IS CLEAR          */
         B     @RC00741                                            0743
@RF00741 NI    PLHSSR(RPLH),B'11101111'                            0743
*I14:                                                              0744
*   DO;                             /* IDACALL(IDAGRB)               */
@RC00741 DS    0H                                                  0744
I14      DS    0H                                                  0745
*     CALL IDAGRB;                  /* EXIT TO IDAGRB                */
         L     @15,@CV00920                                        0745
         BALR  @14,@15                                             0745
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I14;                        /* BUFF. MGR. TO READ            */
*   RESPECIFY                                                      0751
*    (RWORK1) RSTD;                 /*                               */
*   IF RPLERREG^=ZERO THEN          /* WAS THERE AN ERROR            */
         CLI   RPLERREG(RRPL),0                                    0752
         BE    @RF00752                                            0752
*     DO;                           /* YES                           */
*       RESPECIFY                                                  0754
*        (R15) RSTD;                /*                               */
*       R15=IOERR;                  /* SHOW ERROR IN REG 15          */
         LA    R15,4                                               0755
*       RAMB=AMBLDTA;               /* RESTORE RAMB FOR CALLER       */
         L     @14,RPLDACB(,RRPL)                                  0756
         L     @14,ACBAMBL(,@14)                                   0756
         L     RAMB,AMBLDTA(,@14)                                  0756
*       GEN(IDARST14);              /* POINT TO CALLER               */
         IDARST14
*       CALL EXIT;                  /* RETURN                        */
         BAL   @14,EXIT                                            0758
*       RESPECIFY                                                  0759
*        (R15) UNRSTD;              /*                               */
*     END;                          /*                               */
*   RESPECIFY                                                      0761
*    (RWORK2) RSTD;                 /*                               */
@RF00752 DS    0H                                                  0762
*   RWORK1=AMBIWA;                  /* POINT TO FIRST W.A.           */
         L     RWORK1,AMBIWA(,RAMB)                                0762
*   RWORK2=ICWADD;                  /* PICK UP SAVED POINTER         */
         L     RWORK2,ICWADD(,RWORK1)                              0763
*   RWORK1=RWORK2;                  /* REESTABLISH BASE              */
         LR    RWORK1,RWORK2                                       0764
*   ICWBUFC=RBUFC;                  /* SAVE PTR. TO BUFC             */
         ST    RBUFC,ICWBUFC(,RWORK1)                              0765
*   DO;                             /* SET UPDATED BFR               */
*     BUFCORBA=BUFCDDDD;                                           0767
         L     @10,ICWBUFC(,RWORK1)                                0767
         L     @07,BUFCDDDD(,@10)                                  0767
         ST    @07,BUFCORBA(,@10)                                  0767
*     BUFCMW=ON;                                                   0768
         OI    BUFCMW(@10),B'10000000'                             0768
*   END;                            /* SET MUST WRITE FLAG           */
*   RESPECIFY                                                      0770
*    (RWORK1) RSTD;                 /*                               */
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0771
*                                                                  0772
*/*                                                                  */
*/*    IDAWR SUBROUTINE                                              */
*/*                                                                  */
*/*       FUNCTION -                                                 */
*/*        INTERFACES WITH BUFFER MANAGER TO WRITE OUT THE CURRENT   */
*/*        INDEX RECORD AND FREE THE BUFFER.  RWORK1 WILL BE         */
*/*        PRESERVED ACROSS THE INTERFACE.                           */
*/*       INPUT -                                                    */
*/*        RWORK1 = POINTER TO CURRENT WORK AREA.                    */
*/*       OUTPUT -                                                   */
*/*        NONE -                                                    */
*/*       RETURN -                                                   */
*/*        TO CALLER IF NO ERRORS WERE ENCOUNTERED                   */
*/*        TO CALLER OF CALLER IN CASE OF I/O ERROR                  */
*/*                                                                  */
*                                                                  0772
*IDAWR:                                                            0772
*   ENTRY;                          /*                               */
@EP00772 DS    0H                                                  0773
*   GEN SETS(PLHRETO,PLHRET1)(IDASVR14);/* SAVE REG 14               */
         IDASVR14
*   RBUFC=ICWBUFC;                  /* SET RBUFC FOR BUFF. MGR       */
         L     RBUFC,ICWBUFC(,RWORK1)                              0774
*I16:                                                              0775
*   DO;                             /* IDACALL(IDAWRBFR)             */
I16      DS    0H                                                  0776
*     CALL IDAWRBFR;                /* EXIT TO IDAWRBFR              */
         L     @15,@CV00917                                        0776
         BALR  @14,@15                                             0776
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I16;                        /* BUFF MGR. TO WRITE BUFF       */
*   RESPECIFY                                                      0782
*    (RWORK1,                                                      0782
*     RWORK2) RSTD;                 /*                               */
*   IF RPLERREG^=ZERO THEN          /* WAS THERE AN I/O ERROR        */
         CLI   RPLERREG(RRPL),0                                    0783
         BE    @RF00783                                            0783
*     DO;                           /* YES                           */
*       GEN(IDARST14);              /* POINT TO CALLER               */
         IDARST14
*       RAMB=AMBLDTA;               /* RESTORE RAMB FOR CALLER       */
         L     @10,RPLDACB(,RRPL)                                  0786
         L     @10,ACBAMBL(,@10)                                   0786
         L     RAMB,AMBLDTA(,@10)                                  0786
*       RESPECIFY                                                  0787
*        (R15) RSTD;                /*                               */
*       R15=IOERR;                  /* SHOW ERROR IN REG 15          */
         LA    R15,4                                               0788
*       CALL EXIT;                  /* RETURN TO CREATE CALLER       */
         BAL   @14,EXIT                                            0789
*       RESPECIFY                                                  0790
*        (R15) UNRSTD;              /*                               */
*     END;                          /*                               */
*   ELSE                            /* NO I/O ERROR                  */
*I17:                                                              0792
*     DO;                           /* IDACALL(IDAFREEB)             */
         B     @RC00783                                            0792
@RF00783 DS    0H                                                  0792
I17      DS    0H                                                  0793
*       CALL IDAFREEB;              /* EXIT TO IDAFREEB              */
         L     @15,@CV00919                                        0793
         BALR  @14,@15                                             0793
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I17;                      /* FREE BFR              @X04SVLP*/
*   RESPECIFY                                                      0799
*    (RWORK1,                                                      0799
*     RWORK2) RSTD;                 /* PROTECT REGISTERS             */
@RC00783 DS    0H                                                  0800
*   RWORK1=AMBIWA;                  /* POINT TO FIRST WA             */
         L     RWORK1,AMBIWA(,RAMB)                                0800
*   RWORK2=ICWADD;                  /* PICK UP SAVED POINTER         */
         L     RWORK2,ICWADD(,RWORK1)                              0801
*   RWORK1=RWORK2;                  /* REESTABLISH BASE              */
         LR    RWORK1,RWORK2                                       0802
*   RESPECIFY                                                      0803
*    (RWORK2) UNRSTD;               /* GIVE UP RWORK2                */
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0804
*                                                                  0805
*   /*****************************************************************/
*   /*                                                               */
*   /*                                                       @X04SVES*/
*   /* CKSPNRCD SUBROUTINE                                   @X04SVES*/
*   /*                                                       @X04SVES*/
*   /* FUNCTION:                                             @X04SVES*/
*   /* TESTS RIGHT HAND ENTRY OF BLOCK FOR A SPANNED         @X04SVES*/
*   /* RECORD ENTRY. IF SO, IT SETS ICWNOSEG TO THE          @X04SVES*/
*   /* NUMBER OF SEGMENTS IN THE RECORD, ERASES ALL          @X04SVES*/
*   /* BUT THE LAST ENTRY, AND ADJUSTS THE RIGHT HAND        @X04SVES*/
*   /* POINTER (PLHSAVE2) ACCORDINGLY.                       @X04SVES*/
*   /*                                                       @X04SVES*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0805
*CKSPNRCD:                                                         0805
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @X04SVES*/
         B     @PB00009                                            0805
CKSPNRCD DS    0H                                                  0806
*   RESPECIFY                                                      0806
*    (RWORK1,                                                      0806
*     RWORK2) RSTD;                 /*                       @X04SVES*/
*   RWORK2=PLHSAVE2;                /* ESTABLISH POSITION    @X04SVES*/
         L     RWORK2,PLHSAVE2(,RPLH)                              0807
*   ICWNOSEG=ZERO;                  /* INITIALIZE COUNT      @X04SVES*/
         SLR   @10,@10                                             0808
         STH   @10,ICWNOSEG(,RWORK1)                               0808
*   DO WHILE RWORK2->IBFLPF=AMDKEYLN;/* LOOP UNTIL AN F IS FOUND NOT
*                                      EQUAL KEY LENGTH      @X04SVES*/
         B     @DE00809                                            0809
@DL00809 DS    0H                                                  0810
*     IF ICWNOSEG=ZERO THEN         /* FIRST ONE             @X04SVES*/
         LH    @10,ICWNOSEG(,RWORK1)                               0810
         LTR   @10,@10                                             0810
         BNZ   @RF00810                                            0810
*       ICWNOSEG=TWO;               /* YES, START COUNT AT TWO     0811
*                                                            @X04SVES*/
         MVC   ICWNOSEG(2,RWORK1),@CH00146                         0811
*     ELSE                          /*                       @X04SVES*/
*       ICWNOSEG=ICWNOSEG+ONE;      /* NOT FIRST, BUMP COUNT BY ONE
*                                                            @X04SVES*/
         B     @RC00810                                            0812
@RF00810 LA    @10,1                                               0812
         AH    @10,ICWNOSEG(,RWORK1)                               0812
         STH   @10,ICWNOSEG(,RWORK1)                               0812
*     RWORK2->IBFLPF=ZERO;          /* CLEAR SEGMENT         @X04SVES*/
@RC00810 MVI   IBFLPF(RWORK2),X'00'                                0813
*     RWORK2=RWORK2-LENGTH(IBFLPF)- /* MOVE TO               @X04SVES*/
*         LENGTH(IBFLPL);           /* NEXT SEGMENT          @X04SVES*/
         BCTR  RWORK2,0                                            0814
         BCTR  RWORK2,0                                            0814
*     PLHSAVE2=RWORK2;              /* UPDATE BLOCK LOCATOR  @X04SVES*/
         ST    RWORK2,PLHSAVE2(,RPLH)                              0815
*   END;                            /*                       @X04SVES*/
@DE00809 L     @10,AMBDSB(,RAMB)                                   0816
         SLR   @07,@07                                             0816
         IC    @07,IBFLPF(,RWORK2)                                 0816
         CH    @07,AMDKEYLN(,@10)                                  0816
         BE    @DL00809                                            0816
*   END CKSPNRCD;                   /*                       @X04SVES*/
@EL00009 DS    0H                                                  0817
@EF00009 DS    0H                                                  0817
@ER00009 BR    @14                                                 0817
*                                                                  0818
*/*                                                                  */
*/*    EXIT SUBROUTINE                                               */
*/*                                                                  */
*/*       FUNCTION                                                   */
*/*        RESTORES REGISTER 14 FROM THE PUSHDOWN LIST IN            */
*/*        THE PLACEHOLDER AND THEN RETURNS.                         */
*/*                                                                  */
*/*                                                                  */
*                                                                  0818
*EXIT:                                                             0818
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                               */
EXIT     DS    0H                                                  0819
*   GEN(IDARST14);                  /* RESTORE REGISTER 14           */
         IDARST14
*   END EXIT;                       /*                               */
@EL00010 DS    0H                                                  0820
@EF00010 DS    0H                                                  0820
@ER00010 BR    @14                                                 0820
@PB00010 DS    0H                                                  0821
*   GEN;                                                           0821
*                                          /*                        */
PICKPNT  ICM   RWORK0,@00,@00(RWORK3)      /* EXTRACTS POINTER       */
PLACEPNT STCM  RWORK0,@00,@00(RWORK5)      /* STORES POINTER         */
STOREPNT STCM  RWORK3,@00,@00(RWORK5)      /* STORES POINTER         */
*   GEN(IDAPATCH);                  /*                               */
         IDAPATCH
*   END IDA019RJ                    /*                               */
*                                                                  0823
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDACIDF )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IDAIXSPL)                                       */
*/*%INCLUDE SYSLIB  (IDAICWA )                                       */
*/*%INCLUDE SYSLIB  (IDAIMWA )                                       */
*/*%INCLUDE SYSLIB  (IDAIRD  )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDARDF  )                                       */
*                                                                  0823
*       ;                                                          0823
@EL00001 DS    0H                                                  0823
@EF00001 DS    0H                                                  0823
@ER00001 BR    @14                                                 0823
@DATA    DS    0H
@CH00083 DC    H'24'
@DATD    DSECT
         DS    0F
IDA019RJ CSECT
         DS    0F
@CF00053 DC    F'1'
@CH00053 EQU   @CF00053+2
@CF00146 DC    F'2'
@CH00146 EQU   @CF00146+2
@CF01056 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
IDA019RJ CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CA00961 DC    A(IDAR)
@CA00979 DC    A(IDAWR)
@CV00916 DC    V(IDAAQR)
@CV00917 DC    V(IDAWRBFR)
@CV00918 DC    V(IDAER)
@CV00919 DC    V(IDAFREEB)
@CV00920 DC    V(IDAGRB)
@CV00921 DC    V(IDAIST)
@CV00922 DC    V(IDAIVIXB)
@CV00923 DC    V(IDASPACE)
@CV00924 DC    V(IDASPNPT)
@CV00954 DC    V(IDA019ST)
         DS    0D
HWORD4   DC    H'4'
@DATD    DSECT
*                                                          /*@X04SVLC*/
RDFCTNUA EQU   X'40'                    COMPLEX RDF INDICATOR
RDFCTNUX EQU   X'FF'-RDFCTNUA           RESET COMPLEX MASK
RDFREPLA EQU   X'08'                    COUNT RDF INDICATOR
RDFREPLX EQU   X'FF'-RDFREPLA           RESET COUNT MASK
RDFEMPTI EQU   X'04'                    EMPTY RECORD       /*@X04SVLC*/
RDFLEN   EQU   3                        LENGTH OF RDF
RDFLLOFF EQU   1                        OFFSET WITHIN RDF TO LL
RDFSGLR  EQU   X'00'                   MASK FOR SINGLE RECORD RDF
RDFGRP   EQU   RDFCTNUA                 MASK FOR LL RDF OF A GROUP RDF
RDFCNT   EQU   RDFREPLA                 MASK FOR COUNT RDF
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019RJ CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RWORK0   EQU   @00
RRPL     EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
RPARM1   EQU   @12
R14      EQU   @14
R15      EQU   @15
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHSSR   EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHADDTE EQU   PLHFLG2
PLHEFLGS EQU   IDAPLH+4
PLHFLG3  EQU   IDAPLH+6
PLHSLVLD EQU   PLHFLG3
PLHAFLGS EQU   IDAPLH+7
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHRSCS  EQU   IDAPLH+43
PLHDIOB  EQU   IDAPLH+76
PLHSAVE1 EQU   IDAPLH+84
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE6 EQU   IDAPLH+104
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHSLRBA EQU   IDAPLH+244
PLHKEYPT EQU   IDAPLH+248
PLHTMRPL EQU   IDAPLH+265
PLHEND   EQU   IDAPLH+280
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCVAL  EQU   BUFCFLG1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCDDDD EQU   IDABUFC+8
BUFCORBA EQU   IDABUFC+12
BUFCBAD  EQU   IDABUFC+20
BUFCINV  EQU   IDABUFC+28
BUFXIRBA EQU   IDABUFC+40
IDACIDF  EQU   0
CIDFLL   EQU   IDACIDF+2
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDRANGE EQU   AMDATTR
AMDNEST  EQU   IDAAMDSB+4
AMDKEYLN EQU   IDAAMDSB+8
AMDCIPCA EQU   IDAAMDSB+12
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
AMDNCIS  EQU   AMDSTAT+36
AMDNCAS  EQU   AMDSTAT+40
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDPRF   EQU   IDAARDB+28
IDAIXSPL EQU   0
IXSILN   EQU   IDAIXSPL+13
IXSBFLG  EQU   IDAIXSPL+17
IDAICWA  EQU   0
ICWFLG1  EQU   IDAICWA+1
ICWWNF   EQU   ICWFLG1
ICWVSE   EQU   ICWFLG1
ICWVNE   EQU   ICWFLG1
ICWKRDS  EQU   ICWFLG1
ICWSPLIT EQU   ICWFLG1
ICWCHN   EQU   IDAICWA+4
ICWBUFC  EQU   IDAICWA+8
ICWCRBA  EQU   IDAICWA+12
ICWPRBA  EQU   IDAICWA+16
ICWPSEO  EQU   IDAICWA+20
ICWSCNT  EQU   IDAICWA+22
ICWADD   EQU   IDAICWA+24
ICWTBASE EQU   IDAICWA+28
ICWTPTR  EQU   IDAICWA+32
ICWLN    EQU   IDAICWA+40
ICWKEY1L EQU   IDAICWA+42
ICWKEY2L EQU   IDAICWA+44
ICWNEST  EQU   IDAICWA+48
ICWNOSEG EQU   IDAICWA+50
ICWCRSEG EQU   IDAICWA+52
ICWPTL   EQU   IDAICWA+55
ICWKEY1  EQU   IDAICWA+60
IDAIMWA  EQU   0
IMWFLAGS EQU   IDAIMWA+1
IMWCIMVN EQU   IDAIMWA+68
IDAIXH   EQU   0
IXHLL    EQU   IDAIXH
IXHFLPLN EQU   IDAIXH+2
IXHPTLS  EQU   IDAIXH+3
IXHBRBA  EQU   IDAIXH+4
IXHHP    EQU   IDAIXH+8
IXHLV    EQU   IDAIXH+16
IXHFSO   EQU   IDAIXH+18
IXHLEO   EQU   IDAIXH+20
IXHSEO   EQU   IDAIXH+22
IDAIBFLP EQU   0
IBFLPF   EQU   IDAIBFLP
IBFLPL   EQU   IDAIBFLP+1
IBFLP3   EQU   IDAIBFLP+2
IBFLP2   EQU   IBFLP3
IDASELL  EQU   0
IXSELL   EQU   IDASELL
IDAIXK   EQU   0
IXKEY    EQU   IDAIXK
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMB   EQU   0
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBTRACE EQU   IDAAMB+120
IDARDF   EQU   0
RDFRBYTE EQU   IDARDF
RDFSEG   EQU   RDFRBYTE
IDADATA  EQU   0
IDAKEY   EQU   0
ICWKEY2  EQU   0
ICWKEY3  EQU   0
PLHKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00020 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
KEY      EQU   IDAKEY
AMDATA   EQU   IDADATA
RDFLL    EQU   IDARDF+1
RDFEMPTY EQU   RDFRBYTE
RDFREPL  EQU   RDFRBYTE
RDF1ST   EQU   RDFSEG
RDFNOT1  EQU   RDFSEG
RDFCTNU  EQU   RDFRBYTE
RDFTYPE  EQU   RDFRBYTE
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00052 EQU   AMBCSWD1+1
@NM00051 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBLSR   EQU   AMBAFLG
@NM00050 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00049 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00048 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00047 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00046 EQU   AMBINFL
@NM00045 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00044 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00043 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00042 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00041 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00040 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00039 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00038 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00037 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00036 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00035 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00034 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00033 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00032 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00031 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
IBFLP1   EQU   IBFLP2
IXHFLGS  EQU   IDAIXH+17
IXHXX    EQU   IDAIXH+12
IMWKEY1  EQU   IDAIMWA+76
@NM00030 EQU   IDAIMWA+72
IMWNSOFF EQU   IDAIMWA+70
@NM00029 EQU   IDAIMWA+67
IMWSVIEL EQU   IDAIMWA+66
IMWIEL   EQU   IDAIMWA+65
IMWFGAIN EQU   IDAIMWA+64
IMWBUFP  EQU   IDAIMWA+60
IMWLBUFC EQU   IDAIMWA+56
IMWIPTR  EQU   IDAIMWA+52
IMWXPTR  EQU   IDAIMWA+48
IMWIKEYP EQU   IDAIMWA+44
IMWXKEYP EQU   IDAIMWA+40
IMWISWKA EQU   IDAIMWA+8
IMWIXSP  EQU   IDAIMWA+4
IMWLEN   EQU   IDAIMWA+2
IMWBSE   EQU   IMWFLAGS
IMWRIPL  EQU   IMWFLAGS
IMWNEWHL EQU   IMWFLAGS
IMWID    EQU   IDAIMWA
ICWCERP  EQU   IDAICWA+59
ICWCEL   EQU   IDAICWA+58
ICWCEF   EQU   IDAICWA+57
ICWCER   EQU   IDAICWA+56
ICWREQ   EQU   IDAICWA+54
ICWKEY3L EQU   IDAICWA+46
ICWARDBP EQU   IDAICWA+36
ICWLEN   EQU   IDAICWA+2
ICWENDRQ EQU   ICWFLG1
ICWRBAOK EQU   ICWFLG1
ICWWAGM  EQU   ICWFLG1
ICWID    EQU   IDAICWA
IXSLEP   EQU   IDAIXSPL+28
IXSSEP   EQU   IDAIXSPL+24
IXSHEP   EQU   IDAIXSPL+20
IXSPEC   EQU   IDAIXSPL+19
IXSEKON  EQU   IDAIXSPL+18
@NM00028 EQU   IXSBFLG
IXSLELV  EQU   IXSBFLG
IXSSSRH  EQU   IXSBFLG
IXSNOSR  EQU   IDAIXSPL+16
IXSKLEN  EQU   IDAIXSPL+14
IXSTLN   EQU   IDAIXSPL+12
IXSARG   EQU   IDAIXSPL+8
IXSBUFC  EQU   IDAIXSPL+4
IXSSTRBA EQU   IDAIXSPL
ARDKEYS  EQU   IDAARDB+29
@NM00027 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDERBA  EQU   IDAARDB+16
ARDHRBA  EQU   IDAARDB+12
ARDHKRBA EQU   IDAARDB+8
ARDNPTR  EQU   IDAARDB+4
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDEOD   EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
AMDEXCP  EQU   AMDSTAT+44
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00026 EQU   IDAAMDSB+41
@NM00025 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDCINV  EQU   IDAAMDSB+20
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
@NM00024 EQU   CIDFLL
CIDFBUSY EQU   CIDFLL
CIDFOSET EQU   IDACIDF
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCHAIN EQU   IDABUFC+48
BUFXORBA EQU   IDABUFC+44
BUFCNXT2 EQU   IDABUFC+37
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCCPA  EQU   IDABUFC+16
BUFCAMB  EQU   BUFCPLH
@NM00023 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00022 EQU   IDABUFDR+16
BUFDBUFC EQU   IDABUFDR+12
@NM00021 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00019 EQU   IDAPLH+266
@NM00018 EQU   PLHTMRPL
PLHTMIOB EQU   PLHTMRPL
PLHTMINX EQU   PLHTMRPL
PLHTMDTA EQU   PLHTMRPL
PLHTMDIW EQU   PLHTMRPL
PLHTMBUF EQU   PLHTMRPL
PLHTERM  EQU   PLHTMRPL
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00017 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHRBUFC EQU   IDAPLH+192
PLHIBUFC EQU   IDAPLH+188
PLHNRBA  EQU   IDAPLH+184
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00016 EQU   IDAPLH+172
@NM00015 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHAMB   EQU   IDAPLH+108
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHRDFP  EQU   IDAPLH+68
PLHFSP   EQU   IDAPLH+64
PLHRECP  EQU   IDAPLH+60
PLHNBUFC EQU   IDAPLH+56
PLHDBUFC EQU   IDAPLH+52
PLHLRECL EQU   IDAPLH+48
PLHARDB  EQU   IDAPLH+44
@NM00014 EQU   PLHRSCS
PLHDBPER EQU   PLHRSCS
PLHDSERR EQU   PLHRSCS
PLHASYER EQU   PLHRSCS
@NM00013 EQU   PLHRSCS
PLHBUFHD EQU   PLHRSCS
PLHINEOV EQU   PLHRSCS
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00012 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
@NM00011 EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHASKBF EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00010 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00009 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00008 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00007 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00006 EQU   IDAAMBL+31
@NM00005 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00004 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00003 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00002 EQU   RPLRBAR+3
@NM00001 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00176 EQU   RJD
@RT00305 EQU   RJA
@RT00319 EQU   RJA
@RF00419 EQU   RJL
@RT00514 EQU   RJE
@PB00008 EQU   @EC00735
@PB00009 EQU   @PB00010
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IDA019RJ,(C'PLS1716',0701,78209)
