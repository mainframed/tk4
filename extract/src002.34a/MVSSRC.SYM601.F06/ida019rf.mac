         TITLE 'IDA019RF--CONTROL AREA SPLIT                           *
                        '
IDA019RF CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA019RF  78.209'                                 0001
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         IDASVR14
*   IF AMBTRACE^=ZERO THEN          /* IS IDATRACE ACTIVE    @ZA29388*/
         L     @15,AMBTRACE(,RAMB)                                 0184
         LTR   @15,@15                                             0184
         BZ    @RF00184                                            0184
*     DO;                           /*                       @ZA29388*/
*       CALL IDA019ST;              /* CALL IDATRACE         @ZA29388*/
         L     @15,@CV01134                                        0186
         BALR  @14,@15                                             0186
*       GEN(DC X'0009');            /* TRACE ID              @ZA29388*/
         DC X'0009'
*     END;                          /*                       @ZA29388*/
*   IF AMBINBUF=ON&                 /* IF SHR(4), THEN       @X04SVMR*/
*       AMBSCRA=OFF&AMBUCRA=OFF&    /* IF NOT A CATLG,       @X04SVMR*/
*       AMBCAT=OFF THEN             /* SET NO SPACE.         @X04SVMR*/
@RF00184 TM    AMBINBUF(RAMB),B'00000001'                          0189
         BNO   @RF00189                                            0189
         TM    AMBSCRA(RAMB),B'00011100'                           0189
         BNZ   @RF00189                                            0189
*     DO;                           /*                       @X04SVMR*/
*       RPLERRCD=RPLNOEXT;          /* UNABLE TO EXTEND      @X04SVMR*/
         MVI   RPLERRCD(RRPL),X'1C'                                0191
*       RPLERREG='08'X;             /* SET LOGICAL ERROR     @X04SVMR*/
         MVI   RPLERREG(RRPL),X'08'                                0192
*       GO TO RFEXIT;               /* TAKE ERROR EXIT       @X04SVMR*/
         B     RFEXIT                                              0193
*     END;                          /* END OF SHR(4) CODE    @X04SVMR*/
*   RFY                                                            0195
*     R14 UNRSTD;                   /* RELEASE REG FOR USE           */
@RF00189 DS    0H                                                  0196
*   PLHRAHD=OFF;                    /* CLEAR READ AHEAD FLAG.      0196
*                                                            @X04SVRQ*/
         NI    PLHRAHD(RPLH),B'10111111'                           0196
*   CASRPRM1=RPARM1;                /* SAVE RPARM1.          @X04SVRQ*/
*                                                                  0197
         ST    RPARM1,CASRPRM1(,RPLH)                              0197
*   /*****************************************************************/
*   /*                                                               */
*   /* BEFORE ACQUIRING SPACE (FROM EITHER IDAEOVIF OR IDAGTSPC), IF */
*   /* A TRUE SPLIT ( NOT ADD-TO-END) IS IN PROGRESS, PERFORM AN     */
*   /* EXCLUSIVE CONTROL CHECK ON THE RBA'S INVOLVED IN THE CA. THIS */
*   /* WILL PREVENT EXCLUSIVE CONTROL ERRORS FROM OCCURRING AFTER    */
*   /* SPACE HAS BEEN OBTAINED.                              @ZB02289*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0198
*   RBUFC=PLHDBUFC;                 /* SET DATA BUFFER PTR.  @ZB02289*/
         L     RBUFC,PLHDBUFC(,RPLH)                               0198
*   IF PLHADDTE=OFF×(RPLRLEN>AMDCINV-/* IS THIS A CA SPLIT OR      0199
*                                                            @ZB02289*/
*       LENGTH(IDACIDF)-LENGTH(IDARDF)) THEN/* OR ADD-TO-END?      0199
*                                                            @ZB02289*/
         TM    PLHADDTE(RPLH),B'00010000'                          0199
         BZ    @RT00199                                            0199
         L     @10,AMBDSB(,RAMB)                                   0199
         L     @10,AMDCINV(,@10)                                   0199
         SL    @10,@CF00170                                        0199
         C     @10,RPLRLEN(,RRPL)                                  0199
         BNL   @RF00199                                            0199
@RT00199 DS    0H                                                  0200
*     DO;                           /* YES, SPLIT LOGIC WILL BE    0200
*                                      EXECUTED.             @ZB02289*/
*                                                                  0200
*       /*************************************************************/
*       /*                                                           */
*       /* CA SPLIT WILL OCCURR, DETERMINE SPLIT BOUNDARIES. @ZB02289*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0201
*       RFY                                                        0201
*         RWORK1 RSTD;              /* KEEP THIS AWAY FROM PLS.    0201
*                                                            @ZB02289*/
*       DIWINRBA=BUFXIRBA;          /* SAVE OFF INSERT RBA/CI.     0202
*                                                            @ZA25653*/
         L     @10,AMBIWA(,RAMB)                                   0202
         L     @00,BUFXIRBA(,RBUFC)                                0202
         ST    @00,DIWINRBA(,@10)                                  0202
*       RWORK1=AMDCIPCA*AMDCINV;    /* COMPUTE CA SIZE.      @ZB02289*/
         L     @15,AMBDSB(,RAMB)                                   0203
         L     @14,AMDCINV(,@15)                                   0203
         LR    RWORK1,@14                                          0203
         MH    RWORK1,AMDCIPCA(,@15)                               0203
*       DIWLRBA=RWORK1*(DIWINRBA/RWORK1);/* LOWER BDY.       @ZA25653*/
         LR    @07,@00                                             0204
         SLR   @06,@06                                             0204
         DR    @06,RWORK1                                          0204
         MR    @06,RWORK1                                          0204
         ST    @07,DIWLRBA(,@10)                                   0204
*       DIWHRBA=DIWLRBA+RWORK1-AMDCINV;/* UPPER BDY.         @ZB02289*/
         ALR   @07,RWORK1                                          0205
         SLR   @07,@14                                             0205
         ST    @07,DIWHRBA(,@10)                                   0205
*       DIWCAS=ON;                  /* INDICATE CA SPLIT FOR CA    0206
*                                      READERS.              @ZB02289*/
         OI    DIWCAS(@10),B'10000000'                             0206
*       RFY                                                        0207
*         IDABUFC BASED(RWORK1);    /* USE LOCAL PTR.        @ZB02289*/
*       IF AMBGSR=OFF&AMBLSR=OFF THEN/* NOT SHARED RESOURCES?      0208
*                                                            @ZB02289*/
         TM    AMBGSR(RAMB),B'01100000'                            0208
         BNZ   @RF00208                                            0208
*         DO;                       /* PERFORM NSR EXCL TEST LOGIC.
*                                                            @ZB02289*/
*                                                                  0209
*           /*********************************************************/
*           /*                                                       */
*           /* PERFORM NON-SHARED RESOURCES EXCLUSIVE CONTROL CHECK. */
*           /*                                               @ZB02289*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0210
*           RWORK1=BUFDBUFC;        /* LOCATE FIRST PHYSICAL BUFC. 0210
*                                                            @ZB02289*/
         L     @10,AMBBUFC(,RAMB)                                  0210
         L     RWORK1,BUFDBUFC(,@10)                               0210
*           DO WHILE RWORK1^=ZERO;  /* SEARCH BUFFER POOL.   @ZB02289*/
         B     @DE00211                                            0211
@DL00211 DS    0H                                                  0212
*             IF BUFCPLH^=RPLH THEN /* IF OTHER PLH, CHECK   @ZB02289*/
         C     RPLH,BUFCPLH(,RWORK1)                               0212
         BE    @RF00212                                            0212
*               DO;                 /* FOR IT'S EXCL. CTL.   @ZB02289*/
*                 IF BUFCEXC=ON&((BUFCDDDD>=DIWLRBA&BUFCDDDD<=DIWHRBA)×
*                     (BUFXIRBA>=DIWLRBA&BUFXIRBA<=DIWHRBA)) THEN/*
*                                                            @ZA17187*/
         TM    BUFCEXC(RWORK1),B'00000010'                         0214
         BNO   @RF00214                                            0214
         L     @10,BUFCDDDD(,RWORK1)                               0214
         L     @15,AMBIWA(,RAMB)                                   0214
         CL    @10,DIWLRBA(,@15)                                   0214
         BL    @GL00004                                            0214
         CL    @10,DIWHRBA(,@15)                                   0214
         BNH   @RT00214                                            0214
@GL00004 L     @10,BUFXIRBA(,RWORK1)                               0214
         L     @15,AMBIWA(,RAMB)                                   0214
         CL    @10,DIWLRBA(,@15)                                   0214
         BL    @RF00214                                            0214
         CL    @10,DIWHRBA(,@15)                                   0214
         BH    @RF00214                                            0214
@RT00214 DS    0H                                                  0215
*                   DO;             /* SET EXCL. CTL. ERROR  @ZB02289*/
*                     RPLERREG='08'X;/* LOGICAL ERROR.       @ZB02289*/
         MVI   RPLERREG(RRPL),X'08'                                0216
*                     RPLERRCD=RPLEXCL;/* READ EXCL. CONFLICT.     0217
*                                                            @ZB02289*/
         MVI   RPLERRCD(RRPL),X'14'                                0217
*                     RPLDDDD=BUFCDDDD;/* SET RBA NOT OBTAINED     0218
*                                                            @ZA17187*/
         L     @10,BUFCDDDD(,RWORK1)                               0218
         ST    @10,RPLDDDD(,RRPL)                                  0218
*                     CALL RFEXITA1;/* TAKE ERROR EXIT.      @ZB02289*/
         BAL   @14,RFEXITA1                                        0219
*                   END;            /* END SET EXCL. ERROR.  @ZB02289*/
*                 IF BUFCMW=ON&((BUFCORBA>=DIWLRBA&BUFCORBA<=DIWHRBA)×(
*                     BUFXORBA>=DIWLRBA&BUFXORBA<=DIWHRBA)) THEN/* 0221
*                                                            @ZA17187*/
@RF00214 TM    BUFCMW(RWORK1),B'10000000'                          0221
         BNO   @RF00221                                            0221
         L     @10,BUFCORBA(,RWORK1)                               0221
         L     @15,AMBIWA(,RAMB)                                   0221
         CL    @10,DIWLRBA(,@15)                                   0221
         BL    @GL00008                                            0221
         CL    @10,DIWHRBA(,@15)                                   0221
         BNH   @RT00221                                            0221
@GL00008 L     @10,BUFXORBA(,RWORK1)                               0221
         L     @15,AMBIWA(,RAMB)                                   0221
         CL    @10,DIWLRBA(,@15)                                   0221
         BL    @RF00221                                            0221
         CL    @10,DIWHRBA(,@15)                                   0221
         BH    @RF00221                                            0221
@RT00221 DS    0H                                                  0222
*                   DO;             /* SET EXCL. CTL. ERROR  @ZB02289*/
*                     RPLERREG='08'X;/* LOGICAL ERROR.       @ZB02289*/
         MVI   RPLERREG(RRPL),X'08'                                0223
*                     RPLERRCD=RPLEXCL;/* READ EXCL. CONFLICT.     0224
*                                                            @ZB02289*/
         MVI   RPLERRCD(RRPL),X'14'                                0224
*                     RPLDDDD=BUFCORBA;/* SET RBA NOT OBTAINED     0225
*                                                            @ZA17187*/
         L     @10,BUFCORBA(,RWORK1)                               0225
         ST    @10,RPLDDDD(,RRPL)                                  0225
*                     CALL RFEXITA1;/* TAKE ERROR EXIT.      @ZB02289*/
         BAL   @14,RFEXITA1                                        0226
*                   END;            /* END SET EXCL. ERROR.  @ZB02289*/
*               END;                /* END OTHER PLH CHECK.  @ZB02289*/
@RF00221 DS    0H                                                  0229
*             RWORK1=BUFCHAIN;      /* POINT TO NEXT BUFFER. @ZB02289*/
@RF00212 L     RWORK1,BUFCHAIN(,RWORK1)                            0229
*           END;                    /* END SEARCH BFR. POOL. @ZB02289*/
@DE00211 LTR   RWORK1,RWORK1                                       0230
         BNZ   @DL00211                                            0230
*         END;                      /* END OF NSR EXCL CHECK DO    0231
*                                      GROUP.                @ZB02289*/
*       ELSE                        /* MUST BE GSR OR LSR (SHARED  0232
*                                      RESOURCES).           @ZB02289*/
*         DO;                       /* PERFORM GSR/LSR EXCL CHECK. 0232
*                                                            @ZB02289*/
*                                                                  0232
         B     @RC00208                                            0232
@RF00208 DS    0H                                                  0233
*           /*********************************************************/
*           /*                                                       */
*           /* PERFORM SHARED RESOURCES EXCLUSIVE CONTROL CHECK.     */
*           /*                                               @ZB02289*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0233
*           RWORK1=BSPHBUFC;        /* GET FIRST BUFC OFF BSPH.    0233
*                                                            @ZB02289*/
         L     @10,AMBBUFC(,RAMB)                                  0233
         L     RWORK1,BSPHBUFC(,@10)                               0233
*           DO WHILE RWORK1^=ZERO;  /* LOOP THROUGH ENTIRE BUFC CHAIN
*                                                            @ZB02289*/
         B     @DE00234                                            0234
@DL00234 DS    0H                                                  0235
*             IF BUFCAMB=RAMB&      /* USING THIS DATA SET AND     0235
*                                                            @ZB02289*/
*                 RWORK1^=RBUFC&    /* BUFC FOR SOME OTHER PLH AND 0235
*                                                            @ZB02289*/
*                 BUFCEXC=ON THEN   /* BUFC IN EXCLUSIVE CONTROL.  0235
*                                                            @ZB02289*/
         C     RAMB,BUFCAMB(,RWORK1)                               0235
         BNE   @RF00235                                            0235
         CR    RWORK1,RBUFC                                        0235
         BE    @RF00235                                            0235
         TM    BUFCEXC(RWORK1),B'00000010'                         0235
         BNO   @RF00235                                            0235
*               DO;                 /* LOOK AT THE BUFC FURTHER FOR
*                                      EXCL PROBLEMS.        @ZB02289*/
*                 IF BUFXIRBA>=DIWLRBA&/* IS THE RBA ABOVE LOWER.  0237
*                                                            @ZB02289*/
*                     BUFXIRBA<=DIWHRBA THEN/* AND BELOW HIGHER THEN?
*                                                            @ZB02289*/
         L     @10,BUFXIRBA(,RWORK1)                               0237
         L     @15,AMBIWA(,RAMB)                                   0237
         CL    @10,DIWLRBA(,@15)                                   0237
         BL    @RF00237                                            0237
         CL    @10,DIWHRBA(,@15)                                   0237
         BH    @RF00237                                            0237
*                   DO;             /* YES, EXCLUSIVE CONTROL ERROR.
*                                                            @ZB02289*/
*                     RPLERREG='08'X;/* INDICATE LOGICAL ERROR.    0239
*                                                            @ZB02289*/
         MVI   RPLERREG(RRPL),X'08'                                0239
*                     RPLERRCD=RPLEXCL;/* SET CODE AS EXCL ERROR.  0240
*                                                            @ZB02289*/
         MVI   RPLERRCD(RRPL),X'14'                                0240
*                     RPLDDDD=BUFXIRBA;/* SET RBA NOT OBTAINED     0241
*                                                            @ZA17187*/
         ST    @10,RPLDDDD(,RRPL)                                  0241
*                     CALL RFEXITA1;/* TAKE ERROR EXIT FROM RF.    0242
*                                                            @ZB02289*/
         BAL   @14,RFEXITA1                                        0242
*                   END;            /* END OF EXCLUSIVE CONTROL ERROR
*                                      GROUP.                @ZB02289*/
*               END;                /* END OF OTHER BUFC FOR OTHER 0244
*                                      PLH LOGIC.            @ZB02289*/
@RF00237 DS    0H                                                  0245
*             RWORK1=BUFCHAIN;      /* GET NEXT BUFC.        @ZB02289*/
@RF00235 L     RWORK1,BUFCHAIN(,RWORK1)                            0245
*           END;                    /* END OF LOOP THROUGH BUFC CHAIN
*                                      DO GROUP.             @ZB02289*/
*                                                                  0246
@DE00234 LTR   RWORK1,RWORK1                                       0246
         BNZ   @DL00234                                            0246
*           /*********************************************************/
*           /*                                                       */
*           /* IF JRNAD SPECIFIED, JOURNAL THE CA SPLIT.     @ZB02289*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0247
*           IF AMBJRN=ON THEN       /* JOURNAL EXIT,         @ZB02289*/
         TM    AMBJRN(RAMB),B'00000010'                            0247
         BNO   @RF00247                                            0247
*             DO;                   /* YES, EXIT TO USER.    @ZB02289*/
*               PLHJCODE=PLHJCAS;   /* SET CA SPLIT CODE.    @ZB02289*/
         MVI   PLHJCODE(RPLH),B'00100000'                          0249
*               PLHJORBA=DIWLRBA;   /* SET LOW RBA.          @ZB02289*/
         L     @10,AMBIWA(,RAMB)                                   0250
         L     @00,DIWLRBA(,@10)                                   0250
         ST    @00,PLHJORBA(,RPLH)                                 0250
*               PLHJNRBA=DIWHRBA+AMDCINV-ONE;/* SET HIGH RBA.      0251
*                                                            @X04SVRQ*/
         L     @15,AMBDSB(,RAMB)                                   0251
         L     @10,DIWHRBA(,@10)                                   0251
         AL    @10,AMDCINV(,@15)                                   0251
         BCTR  @10,0                                               0251
         ST    @10,PLHJNRBA(,RPLH)                                 0251
*I01:                                                              0252
*               DO;                 /* IDACALL(IDATJXIT)             */
I01      DS    0H                                                  0253
*                 CALL IDATJXIT;    /* EXIT TO IDATJXIT              */
         L     @15,@CV01109                                        0253
         BALR  @14,@15                                             0253
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I01;            /* CALL JOURNAL EXIT.    @ZB02289*/
*             END;                  /* END - JRNAD GIVEN.    @ZB02289*/
*         END;                      /* END OF SHARED RESOURCES EXCL
*                                      CHECK DO GROUP.       @ZB02289*/
@RF00247 DS    0H                                                  0261
*     END;                          /* END OF SPLIT LOGIC DO GROUP.
*                                                            @ZB02289*/
@RC00208 DS    0H                                                  0262
*   RFY                                                            0262
*     IDABUFC BASED(RBUFC);         /* RESET TO STANDARD PTR.      0262
*                                                            @ZB02289*/
@RF00199 DS    0H                                                  0263
*/* IF NO MORE CONTROL AREAS ARE IN THE EXTENT, CALL END-OF-VOLUME   */
*/* TO GET MORE SPACE                                                */
*                                                                  0263
*   RFY                                                            0263
*     RWORK1 UNRSTD;                /* DROP WORK REGISTER            */
*   IF ARDHRBA=ARDERBA              /* IF END-OF-EXTENT, TRY         */
*     THEN                          /* TO GET MORE SPACE.            */
         L     @10,PLHARDB(,RPLH)                                  0264
         CLC   ARDHRBA(4,@10),ARDERBA(@10)                         0264
         BNE   @RF00264                                            0264
*     DO;                                                          0265
*       PLHEOVR=AMBEOVAR;           /* ALLOCATE BY RBA               */
         MVI   PLHEOVR(RPLH),B'10000010'                           0266
*       PLHEOVPT=ADDR(ARDERBA);     /* POINT TO ENDING RBA           */
         LA    @10,ARDERBA(,@10)                                   0267
         ST    @10,PLHEOVPT(,RPLH)                                 0267
*       PLHSSRBA=PLHIBUFC->BUFCDDDD;/* SAVE SEQUENCE SET RBA         */
         L     @10,PLHIBUFC(,RPLH)                                 0268
         L     @10,BUFCDDDD(,@10)                                  0268
         ST    @10,PLHSSRBA(,RPLH)                                 0268
*I02:                                                              0269
*       DO;                         /* IDACALL(IDAEOVIF)             */
I02      DS    0H                                                  0270
*         CALL IDAEOVIF;            /* EXIT TO IDAEOVIF              */
         L     @15,@CV01104                                        0270
         BALR  @14,@15                                             0270
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I02;                    /* GET SPACE                     */
*       RPARM1=ADDR(PLHIXSPL);      /* INX SEARCH PARM LIST  @ZA02289*/
         LA    RPARM1,PLHIXSPL(,RPLH)                              0276
*       RPARM1->IXSILN=ONE;         /* SET LEVEL NO.         @ZA02289*/
         MVI   IXSILN(RPARM1),X'01'                                0277
*       RPARM1=PLHSSRBA;            /* GET SEQUENCE SET RBA          */
         L     RPARM1,PLHSSRBA(,RPLH)                              0278
*       PLHSSR=ON;                  /* INDICATE SEQ SET REQ          */
         OI    PLHSSR(RPLH),B'00010000'                            0279
*       RAMB=AMBLIX;                /* INDICATE INDEX REQUEST        */
         L     @10,RPLDACB(,RRPL)                                  0280
         L     @10,ACBAMBL(,@10)                                   0280
         L     RAMB,AMBLIX(,@10)                                   0280
*I03:                                                              0281
*       DO;                         /* IDACALL(IDAGRB)               */
I03      DS    0H                                                  0282
*         CALL IDAGRB;              /* EXIT TO IDAGRB                */
         L     @15,@CV01107                                        0282
         BALR  @14,@15                                             0282
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I03;                    /* GET SEQ SET BACK              */
*       RAMB=AMBLDTA;               /* GO BACK TO DATA               */
         L     @10,RPLDACB(,RRPL)                                  0288
         L     @10,ACBAMBL(,@10)                                   0288
         L     RAMB,AMBLDTA(,@10)                                  0288
*       RPARM1=ARDHRBA+AMDCINV*AMDCIPCA;/* GET RBA OF SEOF           */
         L     @10,PLHARDB(,RPLH)                                  0289
         L     @05,AMBDSB(,RAMB)                                   0289
         L     RPARM1,AMDCINV(,@05)                                0289
         MH    RPARM1,AMDCIPCA(,@05)                               0289
         AL    RPARM1,ARDHRBA(,@10)                                0289
*     END;                          /* END OF END-OF-EXTENT          */
*   ELSE                            /* NOT EOE, PREFORMAT            */
*     DO;                                                          0291
*                                                                  0291
         B     @RC00264                                            0291
@RF00264 DS    0H                                                  0292
*       /*************************************************************/
*       /*                                                           */
*       /* PREFORMAT NEW CONTROL AREA                                */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0292
*       RPARM1=ARDHRBA;             /* POINT TO NEXT NEW RBA         */
         L     @10,PLHARDB(,RPLH)                                  0292
         L     RPARM1,ARDHRBA(,@10)                                0292
*I04:                                                              0293
*       DO;                         /* IDACALL(IDA019RK)             */
I04      DS    0H                                                  0294
*         CALL IDA019RK;            /* EXIT TO IDA019RK              */
         L     @15,@CV01114                                        0294
         BALR  @14,@15                                             0294
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I04;                    /* PAD OUT REST OF NEW CA        */
*     END;                          /* END OF PREFORMAT CALL         */
*   AMBLIX->AMBIWA->ICWTBASE=ARDHRBA;/* BASE RBA FOR IX UPDATE       */
@RC00264 L     @10,RPLDACB(,RRPL)                                  0301
         L     @10,ACBAMBL(,@10)                                   0301
         L     @10,AMBLIX(,@10)                                    0301
         L     @10,AMBIWA(,@10)                                    0301
         L     @05,PLHARDB(,RPLH)                                  0301
         L     @15,ARDHRBA(,@05)                                   0301
         ST    @15,ICWTBASE(,@10)                                  0301
*   DIWSAVE2=ARDHRBA;               /* START OF CNTL AREA            */
         L     @10,AMBIWA(,RAMB)                                   0302
         ST    @15,DIWSAVE2(,@10)                                  0302
*   IF RPLERREG='00'X THEN          /* IF ANY ERRORS,                */
         CLI   RPLERREG(RRPL),0                                    0303
         BNE   @RF00303                                            0303
*     ARDHRBA=RPARM1;               /* EXIT. OTHERWISE, SET          */
         ST    RPARM1,ARDHRBA(,@05)                                0304
*   ELSE                            /* ERROR.                        */
*     GO TO RFEXITA1;               /* NEW HIGH RBA          @ZB02289*/
*/*  FOR NON-ADD TO END OR SPANNED REC., LOCATE SPLIT        @X04SVRQ*/
*/*  POINT & MOVE CI'S TO NEW CA.                            @X04SVRQ*/
*                                                                  0306
*   IF PLHADDTE=OFF×RPLRLEN>AMDCINV-LENGTH(IDACIDF)-LENGTH(IDARDF) THEN
         TM    PLHADDTE(RPLH),B'00010000'                          0306
         BZ    @RT00306                                            0306
         L     @10,AMBDSB(,RAMB)                                   0306
         L     @10,AMDCINV(,@10)                                   0306
         SL    @10,@CF00170                                        0306
         C     @10,RPLRLEN(,RRPL)                                  0306
         BNL   @RF00306                                            0306
@RT00306 DS    0H                                                  0307
*                                   /* NON-A.T.E. OR SPAN. REC     0307
*                                                            @X04SVRQ*/
*     DO;                                                          0307
*                                                                  0307
*       /*************************************************************/
*       /*                                                           */
*       /* SPLIT BOUNDARIES HAVE BEEN CALCULATED AND THE INSERT RBA  */
*       /* HAS BEEN SAVED BY THE INITIAL CODE.               @ZB02289*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0308
*       RBUFC=PLHDBUFC;             /* POINT TO IP BFR               */
*                                                                  0308
         L     RBUFC,PLHDBUFC(,RPLH)                               0308
*       /*************************************************************/
*       /*                                                           */
*       /* CODE TO JOURNAL WAS REMOVED FROM HERE.            @ZB02289*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0309
*/* CONVERT INSERT POINTERS TO OFFSETS RATHER THAN ADDRESSES         */
*                                                                  0309
*       PLHRDFP=PLHRDFP-BUFCBAD;    /* CONVERT DATA PTRS IN          */
         L     @10,BUFCBAD(,RBUFC)                                 0309
         L     @05,PLHRDFP(,RPLH)                                  0309
         SLR   @05,@10                                             0309
         ST    @05,PLHRDFP(,RPLH)                                  0309
*       PLHRECP=PLHRECP-BUFCBAD;    /* THE PLH TO OFFSETS FOR        */
         L     @05,PLHRECP(,RPLH)                                  0310
         SLR   @05,@10                                             0310
         ST    @05,PLHRECP(,RPLH)                                  0310
*       PLHFSP=PLHFSP-BUFCBAD;      /* LATER.                        */
         LCR   @10,@10                                             0311
         AL    @10,PLHFSP(,RPLH)                                   0311
         ST    @10,PLHFSP(,RPLH)                                   0311
*/*  DETERMINE NUMBER OF CONTROL INTERVALS TO MOVE                   */
*                                                                  0312
*       RBUFC=PLHIBUFC;             /* POINT TO INDEX BUFC           */
         L     RBUFC,PLHIBUFC(,RPLH)                               0312
*/*  SAVE THE NUMBER OF USED CINVS IN THE CONTROL AREA               */
*                                                                  0313
*       DIWSAVE4=AMDCIPCA-(IXHFSO-LENGTH(IDAIXH))/(IXHFLPLN-TWO);  0313
         L     @10,AMBIWA(,RAMB)                                   0313
         L     @05,AMBDSB(,RAMB)                                   0313
         L     @15,BUFCBAD(,RBUFC)                                 0313
         LH    @00,IXHFSO(,@15)                                    0313
         SL    @00,@CF00052                                        0313
         SLR   @14,@14                                             0313
         IC    @14,IXHFLPLN(,@15)                                  0313
         LR    @09,@14                                             0313
         BCTR  @09,0                                               0313
         BCTR  @09,0                                               0313
         LR    @06,@00                                             0313
         SRDA  @06,32                                              0313
         DR    @06,@09                                             0313
         LCR   @07,@07                                             0313
         AH    @07,AMDCIPCA(,@05)                                  0313
         ST    @07,DIWSAVE4(,@10)                                  0313
*       RFY                                                        0314
*        (RWORK1,                                                  0314
*         RWORK2) RSTD;             /* GET 2 WORK REGISTERS          */
*/* POINT TO 1ST ENTRY IN THE SEQUENCE SET                           */
*                                                                  0315
*       RWORK1=BUFCBAD+IXHLL-IXHFLPLN;/*                     @OX02678*/
         LH    RWORK1,IXHLL(,@15)                                  0315
         N     RWORK1,@CF01239                                     0315
         ALR   RWORK1,@15                                          0315
         SLR   RWORK1,@14                                          0315
*       RWORK2=IXHSEO+BUFCBAD;      /* 1ST SECTION ENTRY PTR         */
         LH    RWORK2,IXHSEO(,@15)                                 0316
         ALR   RWORK2,@15                                          0316
*       IXSLEP=RWORK1;              /* SET LOW ENTRY IN SECT.        */
         ST    RWORK1,IXSLEP+200(,RPLH)                            0317
*       RFY                                                        0318
*         RWORK3 RSTD;              /* GET WORK REGISTER             */
*/* FIND SPLIT POINT --- FOR SEQUENTIAL REQ., SPLIT AT INSERT POINT
*   UNLESS INSERT POINT IS LAST ENTRY OF SEQ. SET, THEN SPLIT JUST 0319
*   BEFORE LAST ENTRY.  FOR DIRECT REQ., SPLIT SO THAT OLD & NEW   0319
*   CA'S HAVE EQUAL FREE SPACE TAKING INTO ACCOUNT NO.'S CI'S      0319
*   REQUIRED(RPARM1).                                        @X04SVRQ*/
*                                                                  0319
*       IF RPLSEQ=OFF&AMBSIS=OFF THEN/* NOT SEQ. REQ.        @X04SVRQ*/
         TM    RPLSEQ(RRPL),B'00100000'                            0319
         BNZ   @RF00319                                            0319
         TM    AMBSIS(RAMB),B'00000100'                            0319
         BNZ   @RF00319                                            0319
*         CASDIFF=DIWSAVE4+CASRPRM1;/* INIT NO. CI'S DIFFERENCE    0320
*                                      NEW/OLD CA.           @X04SVRQ*/
         L     @10,AMBIWA(,RAMB)                                   0320
         L     @10,DIWSAVE4(,@10)                                  0320
         AL    @10,CASRPRM1(,RPLH)                                 0320
         ST    @10,CASDIFF(,RPLH)                                  0320
*       DIWSAVE1=(DIWINRBA-IXHBRBA)/AMDCINV;/* CONVERT IP RBA TO   0321
*                                      MULTIPLIER.           @ZA25653*/
@RF00319 L     @10,AMBIWA(,RAMB)                                   0321
         L     @15,BUFCBAD(,RBUFC)                                 0321
         L     @00,DIWINRBA(,@10)                                  0321
         SL    @00,IXHBRBA(,@15)                                   0321
         L     @15,AMBDSB(,RAMB)                                   0321
         LR    @09,@00                                             0321
         SLR   @08,@08                                             0321
         D     @08,AMDCINV(,@15)                                   0321
         ST    @09,DIWSAVE1(,@10)                                  0321
*       CASIPSW=OFF;                /* CLEAR I.P. SWITCH.    @X04SVRQ*/
*       CAS1ST=ON;                  /* SET 1ST. ENTRY SW.    @X04SVRQ*/
         OI    CAS1ST(RPLH),B'10000000'                            0323
         NI    CASIPSW(RPLH),B'10111111'                           0323
*       DIWSAVE3=ZERO;              /* ZERO SKIP CI'S CTR.   @X04SVRQ*/
         SLR   @00,@00                                             0324
         ST    @00,DIWSAVE3(,@10)                                  0324
*IPSRCH:                            /* SEARCH SEQ. SET FOR I.P. OR 0325
*                                      LAST ENTRY.           @X04SVRQ*/
*       CASCURSS=RWORK1;            /* SAVE CUR. SEQ. SET ENTRY.   0325
*                                                            @X04SVRQ*/
IPSRCH   ST    RWORK1,CASCURSS(,RPLH)                              0325
*       RFY                                                        0326
*         RWORK4 RSTD;              /* GET WORK REG.         @X04SVRQ*/
*       RWORK4=IXHPTLS;             /* GET RBA PTR. MASK.    @X04SVRQ*/
         L     @10,BUFCBAD(,RBUFC)                                 0327
         SLR   RWORK4,RWORK4                                       0327
         IC    RWORK4,IXHPTLS(,@10)                                0327
*       RPARM1=ZERO;                /* ZERO ICM REG.         @X04SVRQ*/
         SLR   RPARM1,RPARM1                                       0328
*       GEN(EX RWORK4,ICMINS);      /* GET RBA MULTIPLIER.   @X04SVRQ*/
         EX RWORK4,ICMINS
*       RFY                                                        0330
*         RWORK4 UNRSTD;            /* FREE WORK REG.        @X04SVRQ*/
*       IF RPARM1=DIWSAVE1 THEN     /* AT I.P. RBA.          @X04SVRQ*/
         L     @10,AMBIWA(,RAMB)                                   0331
         C     RPARM1,DIWSAVE1(,@10)                               0331
         BNE   @RF00331                                            0331
*         CASIPSW=ON;               /* TURN ON I.P. SW.      @X04SVRQ*/
         OI    CASIPSW(RPLH),B'01000000'                           0332
*       CASSEGCT=ZERO;              /* ZERO SEGMENT CTR.     @X04SVRQ*/
@RF00331 SLR   @10,@10                                             0333
         ST    @10,CASSEGCT(,RPLH)                                 0333
*       DO WHILE RWORK1->IBFLPF=AMDKEYLN;/* LOOP ON SPANNED RECORD 0334
*                                      SEGMENT ENTRIES.      @X04SVRQ*/
         B     @DE00334                                            0334
@DL00334 DS    0H                                                  0335
*         CASSEGCT=CASSEGCT+ONE;    /* INCR. NO. SEGMENTS.   @X04SVRQ*/
         LA    @10,1                                               0335
         AL    @10,CASSEGCT(,RPLH)                                 0335
         ST    @10,CASSEGCT(,RPLH)                                 0335
*         CALL IXINCR;              /* INCR. INDEX PTR.      @X04SVRQ*/
         BAL   @14,IXINCR                                          0336
*       END;                        /*                       @X04SVRQ*/
@DE00334 L     @10,AMBDSB(,RAMB)                                   0337
         SLR   @00,@00                                             0337
         IC    @00,IBFLPF(,RWORK1)                                 0337
         CH    @00,AMDKEYLN(,@10)                                  0337
         BE    @DL00334                                            0337
*       IF(RWORK1-BUFCBAD)^=IXHLEO THEN/* NOT LAST SEQ. SET ENTRY. 0338
*                                                            @X04SVRQ*/
         L     @10,BUFCBAD(,RBUFC)                                 0338
         LR    @00,RWORK1                                          0338
         SLR   @00,@10                                             0338
         CH    @00,IXHLEO(,@10)                                    0338
         BE    @RF00338                                            0338
*         DO;                       /*                       @X04SVRQ*/
*           CAS1ST=OFF;             /* CLEAR 1ST. ENTRY SW.  @X04SVRQ*/
         NI    CAS1ST(RPLH),B'01111111'                            0340
*           IF RPLSEQ=ON×AMBSIS=ON×PLHADDTE=ON THEN/* SEQ REQ-SPLIT
*                                      AT INSERT POINT       @X04SVRQ*/
         TM    RPLSEQ(RRPL),B'00100000'                            0341
         BO    @RT00341                                            0341
         TM    AMBSIS(RAMB),B'00000100'                            0341
         BO    @RT00341                                            0341
         TM    PLHADDTE(RPLH),B'00010000'                          0341
         BNO   @RF00341                                            0341
@RT00341 DS    0H                                                  0342
*             DO;                   /*                       @X04SVRQ*/
*               DIWSAVE3=DIWSAVE3+CASSEGCT+ONE;/* INCR. SKIP CI CTR
*                                      BY NO. SEG. ENTRIES + 1 FOR 0343
*                                      NORMAL ENTRY.         @X04SVRQ*/
         L     @10,AMBIWA(,RAMB)                                   0343
         L     @00,DIWSAVE3(,@10)                                  0343
         AL    @00,CASSEGCT(,RPLH)                                 0343
         AL    @00,@CF00047                                        0343
         ST    @00,DIWSAVE3(,@10)                                  0343
*               IF CASIPSW=OFF THEN /* NOT AT I.P. YET.      @X04SVRQ*/
         TM    CASIPSW(RPLH),B'01000000'                           0344
         BNZ   @RF00344                                            0344
*SRCHCTNU:                          /*                       @X04SVRQ*/
*                 DO;               /*                       @X04SVRQ*/
SRCHCTNU DS    0H                                                  0346
*                   CASPRVSS=RWORK1;/* SAVE PREV. SEQ. SET ENTRY.  0346
*                                                            @X04SVRQ*/
         ST    RWORK1,CASPRVSS(,RPLH)                              0346
*                   CALL IXINCR;    /* INCR. INDEX PTR.      @X04SVRQ*/
         BAL   @14,IXINCR                                          0347
*                   GOTO IPSRCH;    /* CONTINUE SEQ. SET SEARCH.   0348
*                                                            @X04SVRQ*/
         B     IPSRCH                                              0348
*                 END;              /*                       @X04SVRQ*/
*             END;                  /*                       @X04SVRQ*/
*           ELSE                    /* NON-SEQ. REQ.-SPLIT AT      0351
*                                      MIDPOINT.             @X04SVRQ*/
*             DO;                   /* MIDPOINT SPLIT.       @X04SVRQ*/
         B     @RC00341                                            0351
@RF00341 DS    0H                                                  0352
*               RFY                                                0352
*                 RWORK4 RSTD;      /* GET WORK REG.         @X04SVRQ*/
*               RWORK4A=CASDIFF-TWO*(CASSEGCT+ONE);/* GET NEW      0353
*                                      DIFFERENCE.           @X04SVRQ*/
         LA    RWORK4A,1                                           0353
         AL    RWORK4A,CASSEGCT(,RPLH)                             0353
         ALR   RWORK4A,RWORK4A                                     0353
         LCR   RWORK4A,RWORK4A                                     0353
         AL    RWORK4A,CASDIFF(,RPLH)                              0353
*               IF CASIPSW=ON THEN  /* AT I.P. ENTRY.        @X04SVRQ*/
         TM    CASIPSW(RPLH),B'01000000'                           0354
         BNO   @RF00354                                            0354
*                 DO;               /*                       @X04SVRQ*/
*                   RWORK4A=RWORK4A-TWO*CASRPRM1;/* ADJUST DIFF. BY
*                                      I.P. CHANGE.          @X04SVRQ*/
         L     @10,CASRPRM1(,RPLH)                                 0356
         ALR   @10,@10                                             0356
         SLR   RWORK4A,@10                                         0356
*                   CASIPSW=OFF;    /* TURN OFF I.P. SW.     @X04SVRQ*/
         NI    CASIPSW(RPLH),B'10111111'                           0357
*                 END;              /*                       @X04SVRQ*/
*               IF RWORK4A>ZERO THEN/* NOT BALANCED YET.     @X04SVRQ*/
@RF00354 LTR   RWORK4A,RWORK4A                                     0359
         BNP   @RF00359                                            0359
*                 DO;               /*                       @X04SVRQ*/
*                   CASDIFF=RWORK4A;/* SAVE NEW DIFFERENCE.  @X04SVRQ*/
         ST    RWORK4A,CASDIFF(,RPLH)                              0361
*                   DIWSAVE3=DIWSAVE3+CASSEGCT+ONE;/* UPDATE NO. CI'S
*                                      TO SKIP.              @X04SVRQ*/
         L     @10,AMBIWA(,RAMB)                                   0362
         L     @09,DIWSAVE3(,@10)                                  0362
         AL    @09,CASSEGCT(,RPLH)                                 0362
         AL    @09,@CF00047                                        0362
         ST    @09,DIWSAVE3(,@10)                                  0362
*                   GOTO SRCHCTNU;  /* CONTINUE SEQ. SET SEARCH.   0363
*                                                            @X04SVRQ*/
         B     SRCHCTNU                                            0363
*                 END;              /*                       @X04SVRQ*/
*               ELSE                /* BALANCED-STOP SEARCH. @X04SVRQ*/
*                 DO;               /*                       @X04SVRQ*/
@RF00359 DS    0H                                                  0366
*                   IF ABS(RWORK4A)>CASDIFF THEN/* NEW DIFF. GT OLD
*                                      DIFF. TOO FAR.        @X04SVRQ*/
         LPR   @10,RWORK4A                                         0366
         C     @10,CASDIFF(,RPLH)                                  0366
         BH    @RT00366                                            0366
*                     GOTO BKUPIX;  /* BACKUP INDEX PTR.     @X04SVRQ*/
*                   ELSE            /* GOOD SPLIT POINT.     @X04SVRQ*/
*                     DIWSAVE3=DIWSAVE3+CASSEGCT+ONE;/* UPDATE NO. 0368
*                                      CI'S TO SKIP.         @X04SVRQ*/
         L     @10,AMBIWA(,RAMB)                                   0368
         L     @09,DIWSAVE3(,@10)                                  0368
         AL    @09,CASSEGCT(,RPLH)                                 0368
         AL    @09,@CF00047                                        0368
         ST    @09,DIWSAVE3(,@10)                                  0368
*                 END;              /*                       @X04SVRQ*/
*               RFY                                                0370
*                 RWORK4 UNRSTD;    /* FREE WORK REG.        @X04SVRQ*/
*             END;                  /* END MIDPOINT SPLIT.   @X04SVRQ*/
*           AMBLIX->AMBIWA->ICWTPTR=RWORK1-BUFCBAD;/* FOR INDEX    0372
*                                      RTN.-LAST ENTRY TO REMAIN IN
*                                      OLD CA (POINTS TO LAST SEG. 0372
*                                      ENTRY IF S.R.)        @X04SVRQ*/
@RC00341 L     @10,RPLDACB(,RRPL)                                  0372
         L     @10,ACBAMBL(,@10)                                   0372
         L     @10,AMBLIX(,@10)                                    0372
         L     @10,AMBIWA(,@10)                                    0372
         LR    @00,RWORK1                                          0372
         SL    @00,BUFCBAD(,RBUFC)                                 0372
         ST    @00,ICWTPTR(,@10)                                   0372
*           CALL IXINCR;            /* INCR. INDEX PTR TO 1ST ENTRY
*                                      MOVE TO NEW CA.       @X04SVRQ*/
         BAL   @14,IXINCR                                          0373
*         END;                      /*                       @X04SVRQ*/
*       ELSE                        /* LAST SEQ. SET ENTRY.  @X04SVRQ*/
*         DO;                       /*                       @X04SVRQ*/
         B     @RC00338                                            0375
@RF00338 DS    0H                                                  0376
*           IF CAS1ST=ON THEN       /* 1ST SEQ. SET ENTRY.   @X04SVRQ*/
         TM    CAS1ST(RPLH),B'10000000'                            0376
         BNO   @RF00376                                            0376
*             DO;                   /*                       @X04SVRQ*/
*I05:                                                              0378
*               DO;                 /* IDACALL(IDA019SF)             */
I05      DS    0H                                                  0379
*                 CALL IDA019SF;    /* EXIT TO IDA019SF              */
         L     @15,@CV01110                                        0379
         BALR  @14,@15                                             0379
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I05;            /* SINGLE RECORD CA - GO ADD NEW
*                                      CA.                   @X04SVRQ*/
*               GOTO RFEXITA1;      /* RETURN.               @ZB02289*/
         B     RFEXITA1                                            0385
*             END;                  /*                       @X04SVRQ*/
*BKUPIX:                                                           0387
*           RWORK1=CASCURSS;        /* RESET INDEX PTR. TO START OF
*                                      COMPLEX ENTRY.        @X04SVRQ*/
@RF00376 DS    0H                                                  0387
BKUPIX   L     RWORK1,CASCURSS(,RPLH)                              0387
*           AMBLIX->AMBIWA->ICWTPTR=CASPRVSS-BUFCBAD;/* FOR INDEX  0388
*                                      RTN.-LAST ENTRY OF OLD CA IS
*                                      PREVIOUS ENTRY.       @X04SVRQ*/
         L     @10,RPLDACB(,RRPL)                                  0388
         L     @10,ACBAMBL(,@10)                                   0388
         L     @10,AMBLIX(,@10)                                    0388
         L     @10,AMBIWA(,@10)                                    0388
         L     @00,CASPRVSS(,RPLH)                                 0388
         SL    @00,BUFCBAD(,RBUFC)                                 0388
         ST    @00,ICWTPTR(,@10)                                   0388
*         END;                      /*                       @X04SVRQ*/
*       DIWSAVE3=DIWSAVE4-DIWSAVE3; /* SET NO. CI'S TO MOVE = NO.  0390
*                                      USED CI'S - NO. CI'S SKIPPED.
*                                                            @X04SVRQ*/
@RC00338 L     @10,AMBIWA(,RAMB)                                   0390
         L     @00,DIWSAVE4(,@10)                                  0390
         SL    @00,DIWSAVE3(,@10)                                  0390
         ST    @00,DIWSAVE3(,@10)                                  0390
*       IXSHEP=RWORK1;              /* SAVE CURR ENTRY PTR           */
         LA    @10,200                                             0391
         ALR   @10,RPLH                                            0391
         ST    RWORK1,IXSHEP(,@10)                                 0391
*       IXSSEP=RWORK2;              /* NEXT SECTION ENTRY PTR        */
         ST    RWORK2,IXSSEP(,@10)                                 0392
*       RFY                                                        0393
*         RWORK3 UNRSTD;            /* DROP WORK REGISTER            */
*       RPARM1=DIWSAVE3;            /* GET MOVE COUNT                */
         LR    RPARM1,@00                                          0394
*       RFY                                                        0395
*        (RWORK1,                                                  0395
*         RWORK2) UNRSTD;           /* DROP WORK REGISTERS           */
*       RBUFC=PLHDBUFC;             /* POINT TO DATA BUFC.   @X04SVRQ*/
         L     RBUFC,PLHDBUFC(,RPLH)                               0396
*I06:                                                              0397
*       DO;                         /* IDACALL(IDAFREEB)             */
I06      DS    0H                                                  0398
*         CALL IDAFREEB;            /* EXIT TO IDAFREEB              */
         L     @15,@CV01116                                        0398
         BALR  @14,@15                                             0398
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I06;                    /* FREE DATA BUFFER.     @X04SVRQ*/
*/*  ADD BUFFERS UNTIL EITHER ALL IN POOL OBTAINED OR NO MORE NEEDED */
*                                                                  0404
*I07:                                                              0404
*       DO;                         /* IDACALL(IDAABF)               */
I07      DS    0H                                                  0405
*         CALL IDAABF;              /* EXIT TO IDAABF                */
         L     @15,@CV01103                                        0405
         BALR  @14,@15                                             0405
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I07;                    /* ADD BUFFERS           @X04SVMR*/
*       IF AMBGSR=OFF&AMBLSR=OFF THEN/* NOT SHR RESOURCE.    @X04SVRQ*/
         TM    AMBGSR(RAMB),B'01100000'                            0411
         BNZ   @RF00411                                            0411
*         DO;                       /* AIBF.                 @ZB02289*/
*I08:                                                              0413
*           DO;                     /* IDACALL(IDAAIBF)              */
I08      DS    0H                                                  0414
*             CALL IDAAIBF;         /* EXIT TO IDAAIBF               */
         L     @15,@CV01112                                        0414
         BALR  @14,@15                                             0414
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I08;                /* ADD THE INSERT BFR    @X04SVMR*/
*                                                                  0419
*           /*********************************************************/
*           /*                                                       */
*           /* EXCL CHECK WAS REMOVED FROM HERE.             @ZB02289*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0420
*         END;                      /* END AIBF.             @ZB02289*/
*       DIWSAVE4=ARDHKRBA;          /* SAVE HIGH KEY RBA             */
@RF00411 L     @10,AMBIWA(,RAMB)                                   0421
         L     @05,PLHARDB(,RPLH)                                  0421
         L     @05,ARDHKRBA(,@05)                                  0421
         ST    @05,DIWSAVE4(,@10)                                  0421
*       PLHRAHD=ON;                 /* FORCE READ AHEAD      @X04SVMR*/
         OI    PLHRAHD(RPLH),B'01000000'                           0422
*       PLHSAVE2=RPLOPTCD;          /* SAVE RPL OPTIONS.     @X04SVRQ*/
         L     @05,RPLOPTCD(,RRPL)                                 0423
         ST    @05,PLHSAVE2(,RPLH)                                 0423
*       RPLBWD=OFF;                 /* FORCE FWD. DIRECTION. @X04SVRQ*/
         NI    RPLBWD(RRPL),B'11101111'                            0424
*/*  MOVE DATA CONTROL INTERVALS TO THE NEW CONTROL AREA             */
*                                                                  0425
*       DO DIWSAVE1=DIWSAVE3 TO 1 BY-1;/* LOOP UNTIL ALL MOVED       */
         L     @10,DIWSAVE3(,@10)                                  0425
         L     @05,AMBIWA(,RAMB)                                   0425
         ST    @10,DIWSAVE1(,@05)                                  0425
         B     @DE00425                                            0425
@DL00425 DS    0H                                                  0426
*         IF DIWSAVE1=DIWSAVE3      /* IF FIRST TIME THROUGH         */
*           THEN                    /* MUST GET BY RBA               */
         L     @10,AMBIWA(,RAMB)                                   0426
         CLC   DIWSAVE1(4,@10),DIWSAVE3(@10)                       0426
         BNE   @RF00426                                            0426
*           DO;                                                    0427
*                                                                  0427
*             /*******************************************************/
*             /*                                                     */
*             /* GET THE RBA OF THE FIRST CINV TO MOVE TO THE NEW    */
*             /* CNTL AREA                                           */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0428
*             RFY                                                  0428
*               RWORK1 RSTD;        /* RESTRICT REG.         @X04SVRQ*/
*             RBUFC=PLHIBUFC;       /* POINT TO THE SEQ SET          */
         L     RBUFC,PLHIBUFC(,RPLH)                               0429
*             RPARM1=IXHPTLS;       /* GET RBA POINTER MASK          */
         L     @10,BUFCBAD(,RBUFC)                                 0430
         SLR   RPARM1,RPARM1                                       0430
         IC    RPARM1,IXHPTLS(,@10)                                0430
*             RWORK1=IXSHEP;        /* GET CURR ENTRY PTR            */
         L     RWORK1,IXSHEP+200(,RPLH)                            0431
*             GEN(EX    RPARM1,ICMINS);/* GET RBA MULTIPLIER         */
         EX    RPARM1,ICMINS
*             RFY                                                  0433
*               RWORK1 UNRSTD;      /* FREE REGISTER.        @X04SVRQ*/
*             RPARM1=RPARM1*AMDCINV+IXHBRBA;/* GET SP CINV RBA       */
         L     @10,AMBDSB(,RAMB)                                   0434
         LR    @07,RPARM1                                          0434
         M     @06,AMDCINV(,@10)                                   0434
         L     @10,BUFCBAD(,RBUFC)                                 0434
         AL    @07,IXHBRBA(,@10)                                   0434
         LR    RPARM1,@07                                          0434
*I09:                                                              0435
*             DO;                   /* IDACALL(IDAGRB)               */
I09      DS    0H                                                  0436
*               CALL IDAGRB;        /* EXIT TO IDAGRB                */
         L     @15,@CV01107                                        0436
         BALR  @14,@15                                             0436
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I09;              /* READ RBA                      */
*           END;                    /* END OF FIRST TIME CODE        */
*         ELSE                      /* IF NOT THE FIRST TIME,        */
*I10:                                                              0443
*           DO;                     /* IDACALL(IDAGNXT)              */
         B     @RC00426                                            0443
@RF00426 DS    0H                                                  0443
I10      DS    0H                                                  0444
*             CALL IDAGNXT;         /* EXIT TO IDAGNXT               */
         L     @15,@CV01106                                        0444
         BALR  @14,@15                                             0444
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I10;                /* GET THE NEXT RBA.             */
*         IF RPLERREG^='00'X THEN   /* IF ANY ERROR OCCURRED,        */
@RC00426 CLI   RPLERREG(RRPL),0                                    0450
         BNE   @RT00450                                            0450
*           GO TO CASPLERR;         /* EXIT.                         */
*         BUFCER2=OFF;              /* TURN OFF WRT ERR.     @X04SVRQ*/
         NI    BUFCER2(RBUFC),B'11110111'                          0452
*         BUFCMW=ON;                /* INDICATE WRITE REQUIRED       */
         OI    BUFCMW(RBUFC),B'10000000'                           0453
*         BUFCORBA=DIWSAVE2;        /* SET OUTPUT RBA                */
         L     @10,AMBIWA(,RAMB)                                   0454
         L     @10,DIWSAVE2(,@10)                                  0454
         ST    @10,BUFCORBA(,RBUFC)                                0454
*/*  SET A POINTER TO THE FIRST RDF IN THE BUFFER.           @X04SVMR*/
*                                                                  0455
*         RPARM1=BUFCBAD+AMDCINV-LENGTH(IDACIDF)-LENGTH(IDARDF);   0455
         L     @10,AMBDSB(,RAMB)                                   0455
         L     RPARM1,BUFCBAD(,RBUFC)                              0455
         AL    RPARM1,AMDCINV(,@10)                                0455
         SL    RPARM1,@CF00170                                     0455
*         IF RPARM1->RDFNOT1=ON THEN/* IF LAST OR MIDDLE     @X04SVMR*/
         TM    RDFNOT1(RPARM1),B'00100000'                         0456
         BNO   @RF00456                                            0456
*           BUFXIRBA=PLHSAVE5;      /* SEG SET TO 1ST RBA    @X04SVMR*/
         L     @10,PLHSAVE5(,RPLH)                                 0457
         ST    @10,BUFXIRBA(,RBUFC)                                0457
*         ELSE                      /* IF NOT SPANNED, OR IF @X04SVMR*/
*           DO;                     /* 1ST SEGMENT OF S.R.   @X04SVMR*/
         B     @RC00456                                            0458
@RF00456 DS    0H                                                  0459
*             PLHSAVE5=BUFCORBA;    /* REMEMBER 1ST SEG RBA  @X04SVMR*/
         L     @10,BUFCORBA(,RBUFC)                                0459
         ST    @10,PLHSAVE5(,RPLH)                                 0459
*             BUFXIRBA=BUFCORBA;    /* SET IN EXCL FIELD     @X04SVMR*/
         ST    @10,BUFXIRBA(,RBUFC)                                0460
*           END;                    /* END 1ST/NON-S.R. CODE @X04SVMR*/
*         IF BUFCDDDD=DIWINRBA THEN /* IF INSERT RBA         @ZA25653*/
@RC00456 L     @10,AMBIWA(,RAMB)                                   0462
         CLC   BUFCDDDD(4,RBUFC),DIWINRBA(@10)                     0462
         BNE   @RF00462                                            0462
*           DO;                     /* MOVED,                @OX02678*/
*             DIWINRBA=BUFCORBA;    /* RESET POINTER.        @ZA25653*/
         L     @05,BUFCORBA(,RBUFC)                                0464
         ST    @05,DIWINRBA(,@10)                                  0464
*             DIWSHIFT=ON;          /* SET IP MOVE           @OX02678*/
         OI    DIWSHIFT(@10),B'00000100'                           0465
*           END;                    /* END OF IP SHIFT@OX02678       */
*         IF AMBGSR=ON×AMBLSR=ON THEN/* SHR RESOURCE.        @ZA14823*/
@RF00462 TM    AMBGSR(RAMB),B'01100000'                            0467
         BZ    @RF00467                                            0467
*           DO;                     /*                       @ZA14823*/
*I11:                                                              0469
*             DO;                   /* IDACALL(IDAWRBFR)             */
I11      DS    0H                                                  0470
*               CALL IDAWRBFR;      /* EXIT TO IDAWRBFR              */
         L     @15,@CV01111                                        0470
         BALR  @14,@15                                             0470
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I11;              /* WRT BACK CI.          @ZA14823*/
*             IF RPLERREG^='00'X THEN/* ERROR.               @ZA14823*/
         CLI   RPLERREG(RRPL),0                                    0476
         BNE   @RT00476                                            0476
*               GOTO CASPLERR;      /* EXIT.                 @ZA14823*/
*           END;                    /* END OF DBDC CODE.     @ZA14823*/
*         IF BUFCDDDD=DIWSAVE4 THEN /* IF HIGH KEYED CINV            */
@RF00467 L     @10,AMBIWA(,RAMB)                                   0479
         CLC   BUFCDDDD(4,RBUFC),DIWSAVE4(@10)                     0479
         BNE   @RF00479                                            0479
*           DIWSAVE4=BUFCORBA;      /* MOVED, CHANGE POINTER.        */
         L     @05,BUFCORBA(,RBUFC)                                0480
         ST    @05,DIWSAVE4(,@10)                                  0480
*         BUFCDDDD=BUFCORBA;        /* COPY OUTPUT RBA       @ZA19625*/
@RF00479 L     @10,BUFCORBA(,RBUFC)                                0481
         ST    @10,BUFCDDDD(,RBUFC)                                0481
*I12:                                                              0482
*         DO;                       /* IDACALL(IDAFREEB)             */
I12      DS    0H                                                  0483
*           CALL IDAFREEB;          /* EXIT TO IDAFREEB              */
         L     @15,@CV01116                                        0483
         BALR  @14,@15                                             0483
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I12;                  /* FREE THE BFR          @X04SVLP*/
*         DIWSAVE2=DIWSAVE2+AMDCINV;/* NEXT NEW CONTROL INTVL        */
         L     @10,AMBIWA(,RAMB)                                   0489
         L     @05,AMBDSB(,RAMB)                                   0489
         L     @00,DIWSAVE2(,@10)                                  0489
         AL    @00,AMDCINV(,@05)                                   0489
         ST    @00,DIWSAVE2(,@10)                                  0489
*       END;                        /* END OF DATA MOVEMENT          */
         L     @05,AMBIWA(,RAMB)                                   0490
         SLR   @10,@10                                             0490
         BCTR  @10,0                                               0490
         AL    @10,DIWSAVE1(,@05)                                  0490
         L     @05,AMBIWA(,RAMB)                                   0490
         ST    @10,DIWSAVE1(,@05)                                  0490
@DE00425 LTR   @10,@10                                             0490
         BP    @DL00425                                            0490
*       PLHRAHD=OFF;                /* NORMAL READ AHEAD     @X04SVMR*/
         NI    PLHRAHD(RPLH),B'10111111'                           0491
*       RPLOPTCD=PLHSAVE2;          /* RESTORE RPL OPTIONS.  @X04SVRQ*/
         L     @10,PLHSAVE2(,RPLH)                                 0492
         ST    @10,RPLOPTCD(,RRPL)                                 0492
*       IF AMBLSR=OFF&AMBGSR=OFF THEN/* NOT SHARED RESOURCES         */
         TM    AMBLSR(RAMB),B'01100000'                            0493
         BNZ   @RF00493                                            0493
*         DO;                                                      0494
*I13:                                                              0495
*           DO;                     /* IDACALL(IDAWRBFR)             */
I13      DS    0H                                                  0496
*             CALL IDAWRBFR;        /* EXIT TO IDAWRBFR              */
         L     @15,@CV01111                                        0496
         BALR  @14,@15                                             0496
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I13;                /* FINISH WRITES                 */
*           IF RPLERREG^='00'X THEN /* IF ANY ERRORS, TERMIN-        */
         CLI   RPLERREG(RRPL),0                                    0502
         BNE   @RT00502                                            0502
*             GO TO CASPLERR;       /* ATE THE CA SPLIT.             */
*         END;                                                     0504
*       DIWSAVE2=DIWSAVE4;          /* SAVE HI KEY RBA       @ZA02289*/
@RF00493 L     @10,AMBIWA(,RAMB)                                   0505
         L     @05,DIWSAVE4(,@10)                                  0505
         ST    @05,DIWSAVE2(,@10)                                  0505
*     END;                          /* END OF NON-A.T.E.             */
*   ELSE                            /* ADD TO END CASE       @ZA25653*/
*     DO;                           /* DO ADD TO END         @ZA25653*/
         B     @RC00306                                            0507
@RF00306 DS    0H                                                  0508
*       DIWINRBA=DIWSAVE2;          /* POINT TO SPLIT POINT  @ZA25653*/
         L     @10,AMBIWA(,RAMB)                                   0508
         L     @05,DIWSAVE2(,@10)                                  0508
         ST    @05,DIWINRBA(,@10)                                  0508
*       DIWSHIFT=ON;                /* SPLIT POINT SHIFTING  @ZA25653*/
         OI    DIWSHIFT(@10),B'00000100'                           0509
*     END;                          /* END ADD TO END        @ZA25653*/
*/* CALL INDEX UPDATE TO SPLIT THE SEQUENCE SET OF THE OLD         0511
*   CONTROL AREA                                                     */
*                                                                  0511
*   RAMB=AMBLIX;                    /* POINT TO INDEX AMB            */
@RC00306 L     @10,RPLDACB(,RRPL)                                  0511
         L     @10,ACBAMBL(,@10)                                   0511
         L     RAMB,AMBLIX(,@10)                                   0511
*I14:                                                              0512
*   DO;                             /* IDACALL(IDA019RI)             */
I14      DS    0H                                                  0513
*     CALL IDA019RI;                /* EXIT TO IDA019RI              */
         L     @15,@CV01113                                        0513
         BALR  @14,@15                                             0513
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I14;                        /* CALL INDEX UPDATE             */
*   RFY                                                            0519
*     R15 RSTD;                     /* GET RETURN CODE REG           */
*   IF R15=FOUR                     /* FIRST, CHECK REG 15           */
*     THEN                          /* FOR I/O ERROR.                */
         C     R15,@CF00036                                        0520
         BE    @RT00520                                            0520
*     GO TO CASPLERR;               /* EXIT                          */
*   RAMB=AMBLDTA;                   /* POINT TO DATA AMB             */
         L     @14,RPLDACB(,RRPL)                                  0522
         L     @14,ACBAMBL(,@14)                                   0522
         L     RAMB,AMBLDTA(,@14)                                  0522
*   DIWSAVE1=RPARM1;                /* SAVE SP SHIFT COUNT           */
         L     @10,AMBIWA(,RAMB)                                   0523
         ST    RPARM1,DIWSAVE1(,@10)                               0523
*   RFY                                                            0524
*     R15 UNRSTD;                   /* RELEASE RETURN CODE REG       */
*/* READ THE SEQUENCE SET OF THE OLD CONTROL AREA.                   */
*                                                                  0525
*   RAMB=AMBLIX;                    /* POINT TO INDEX AMB            */
         L     RAMB,AMBLIX(,@14)                                   0525
*   PLHSSR=ON;                      /* FLAG SEQUENCE SET REQ         */
         OI    PLHSSR(RPLH),B'00010000'                            0526
*   RPARM1=ADDR(PLHIXSPL);          /* POINT TO INDX SEARCH PARM LIST
*                                                            @ZA02289*/
         LA    RPARM1,PLHIXSPL(,RPLH)                              0527
*   RPARM1->IXSILN=ONE;             /* SET LEVEL NO.         @ZA02289*/
         MVI   IXSILN(RPARM1),X'01'                                0528
*   RPARM1=PLHSSRBA;                /* OLD CA SEQ SET RBA            */
         L     RPARM1,PLHSSRBA(,RPLH)                              0529
*I15:                                                              0530
*   DO;                             /* IDACALL(IDAGRB)               */
I15      DS    0H                                                  0531
*     CALL IDAGRB;                  /* EXIT TO IDAGRB                */
         L     @15,@CV01107                                        0531
         BALR  @14,@15                                             0531
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I15;                        /* REACQUIRE OLD SEQ SET         */
*   RAMB=AMBLDTA;                   /* POINT TO DATA AMB             */
         L     @10,RPLDACB(,RRPL)                                  0537
         L     @10,ACBAMBL(,@10)                                   0537
         L     RAMB,AMBLDTA(,@10)                                  0537
*   IF RPLERREG^='00'X THEN         /* IF ANY ERROR,                 */
         CLI   RPLERREG(RRPL),0                                    0538
         BNE   @RT00538                                            0538
*     GO TO CASPLERR;               /* EXIT.                         */
*   IF PLHADDTE=OFF×RPLRLEN>AMDCINV-LENGTH(IDACIDF)-LENGTH(IDARDF)/*
*                                      FOR NON-A.T.E. OR SPANNED REC.
*                                      SPLIT PT              @X04SVRQ*/
*     THEN                          /* SHIFT MAY HAVE OCCURRED       */
         TM    PLHADDTE(RPLH),B'00010000'                          0540
         BZ    @RT00540                                            0540
         L     @10,AMBDSB(,RAMB)                                   0540
         L     @10,AMDCINV(,@10)                                   0540
         SL    @10,@CF00170                                        0540
         C     @10,RPLRLEN(,RRPL)                                  0540
         BNL   @RF00540                                            0540
@RT00540 DS    0H                                                  0541
*     DO;                           /* AND FS MUST BE WRITTEN        */
*/* IF INDEX UPDATE SHIFTED THE SPLIT POINT, CONVERT THE DATA CONTROL
*   INTERVALS INVOLVED IN THE NEW CONTROL AREA TO FREE SPACE         */
*                                                                  0542
*       RPARM1=DIWSAVE1;            /* GET SHIFT COUNT               */
         L     @10,AMBIWA(,RAMB)                                   0542
         L     @05,DIWSAVE1(,@10)                                  0542
         LR    RPARM1,@05                                          0542
*       ARDHKRBA=DIWSAVE2;          /* RESET HIGH KEY RBA    @ZA02289*/
         L     @15,PLHARDB(,RPLH)                                  0543
         L     @00,DIWSAVE2(,@10)                                  0543
         ST    @00,ARDHKRBA(,@15)                                  0543
*/* ADJUST THE NUMBER OF CONTROL INTERVALS MOVED BY THE AMOUNT     0544
*   OF THE SPLIT POINT SHIFT                                         */
*                                                                  0544
*       DIWSAVE4=DIWSAVE3-RPARM1;   /* # OF OLD CA CIS TO FS         */
         L     @00,DIWSAVE3(,@10)                                  0544
         SLR   @00,RPARM1                                          0544
         ST    @00,DIWSAVE4(,@10)                                  0544
*       IF AMBJRN=ON THEN           /* JOURNAL EXIT.         @X04SVRQ*/
         TM    AMBJRN(RAMB),B'00000010'                            0545
         BNO   @RF00545                                            0545
*         DO;                       /* JOURNAL RBA CHANGE.   @X04SVRQ*/
*           RBUFC=PLHIBUFC;         /* POINT TO SEQ SET BUFC @X04SVRQ*/
         L     RBUFC,PLHIBUFC(,RPLH)                               0547
*           PLHSAVE1=ARDHRBA-(AMDCINV*AMDCIPCA)+(DIWSAVE1*AMDCINV);/*
*                                      NEW RBA = NEW CA RBA + ANY  0548
*                                      SHIFTED CI'S.         @X04SVRQ*/
         L     @14,AMBDSB(,RAMB)                                   0548
         L     @09,AMDCINV(,@14)                                   0548
         LR    @08,@09                                             0548
         MH    @08,AMDCIPCA(,@14)                                  0548
         LCR   @08,@08                                             0548
         AL    @08,ARDHRBA(,@15)                                   0548
         LR    @07,@05                                             0548
         MR    @06,@09                                             0548
         ALR   @08,@07                                             0548
         ST    @08,PLHSAVE1(,RPLH)                                 0548
*           DIWSAVE3=BUFCBAD+IXHFSO;/* POINT TO END OF FS ENTRIES. 0549
*                                                            @X04SVRQ*/
         L     @05,BUFCBAD(,RBUFC)                                 0549
         LH    @15,IXHFSO(,@05)                                    0549
         ALR   @15,@05                                             0549
         ST    @15,DIWSAVE3(,@10)                                  0549
*/* JOURNAL ALL CI'S WHOSE RBA'S CHANGED.                          0550
*   LOOP THROUGH OLD CA FS PTRS BY NO. OF CI'S MOVED.        @X04SVRQ*/
*                                                                  0550
*           DO DIWSAVE2=DIWSAVE4 TO ONE BY-ONE;/*            @X04SVRQ*/
         L     @10,AMBIWA(,RAMB)                                   0550
         ST    @00,DIWSAVE2(,@10)                                  0550
         B     @DE00550                                            0550
@DL00550 DS    0H                                                  0551
*             RFY                                                  0551
*               RWORK1 RSTD;        /* GET WORK REG.         @X04SVRQ*/
*             RWORK1=DIWSAVE3-(IXHFLPLN-TWO);/* GET NEXT FS PTR.   0552
*                                                            @X04SVRQ*/
         L     @10,AMBIWA(,RAMB)                                   0552
         L     @15,BUFCBAD(,RBUFC)                                 0552
         SLR   RWORK1,RWORK1                                       0552
         IC    RWORK1,IXHFLPLN(,@15)                               0552
         BCTR  RWORK1,0                                            0552
         BCTR  RWORK1,0                                            0552
         LCR   RWORK1,RWORK1                                       0552
         AL    RWORK1,DIWSAVE3(,@10)                               0552
*             DIWSAVE3=RWORK1;      /* STORE NEW FS PTR.     @X04SVRQ*/
         ST    RWORK1,DIWSAVE3(,@10)                               0553
*             RPARM1=IXHPTLS;       /* GET RBA PTR MASK.     @X04SVRQ*/
         SLR   RPARM1,RPARM1                                       0554
         IC    RPARM1,IXHPTLS(,@15)                                0554
*             GEN(EX RPARM1,ICMINS2);/* GET RBA MULTIPLIER.  @X04SVRQ*/
         EX RPARM1,ICMINS2
*             RFY                                                  0556
*               RWORK1 UNRSTD;      /* FREE WORK REG.        @X04SVRQ*/
*             PLHJORBA=(RPARM1*AMDCINV)+IXHBRBA;/* SET OLD CI RBA. 0557
*                                                            @X04SVRQ*/
         L     @10,AMBDSB(,RAMB)                                   0557
         L     @10,AMDCINV(,@10)                                   0557
         LR    @07,RPARM1                                          0557
         MR    @06,@10                                             0557
         L     @05,BUFCBAD(,RBUFC)                                 0557
         AL    @07,IXHBRBA(,@05)                                   0557
         ST    @07,PLHJORBA(,RPLH)                                 0557
*             PLHJNRBA=PLHSAVE1;    /* SET NEW CI RBA.       @X04SVRQ*/
         L     @05,PLHSAVE1(,RPLH)                                 0558
         ST    @05,PLHJNRBA(,RPLH)                                 0558
*             PLHJRNLL=AMDCINV;     /* SET JOURNAL LENGTH.   @X04SVRQ*/
         ST    @10,PLHJRNLL(,RPLH)                                 0559
*             PLHJCODE=PLHJRBAC;    /* SET RBA CHANGE CODE.  @X04SVRQ*/
         MVI   PLHJCODE(RPLH),B'00001100'                          0560
*I16:                                                              0561
*             DO;                   /* IDACALL(IDATJXIT)             */
I16      DS    0H                                                  0562
*               CALL IDATJXIT;      /* EXIT TO IDATJXIT              */
         L     @15,@CV01109                                        0562
         BALR  @14,@15                                             0562
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I16;              /* CALL JOURNAL EXIT.    @X04SVRQ*/
*             PLHSAVE1=PLHSAVE1+AMDCINV;/* INCR. TO NEXT NEW CI RBA.
*                                                            @X04SVRQ*/
         L     @10,AMBDSB(,RAMB)                                   0568
         L     @05,PLHSAVE1(,RPLH)                                 0568
         AL    @05,AMDCINV(,@10)                                   0568
         ST    @05,PLHSAVE1(,RPLH)                                 0568
*           END;                    /* END DO LOOP.          @X04SVRQ*/
         L     @10,AMBIWA(,RAMB)                                   0569
         SLR   @00,@00                                             0569
         BCTR  @00,0                                               0569
         AL    @00,DIWSAVE2(,@10)                                  0569
         L     @10,AMBIWA(,RAMB)                                   0569
         ST    @00,DIWSAVE2(,@10)                                  0569
@DE00550 LTR   @00,@00                                             0569
         BP    @DL00550                                            0569
*         END;                      /* END JRN RBA CHANGE.   @X04SVRQ*/
*       RPARM1=DIWSAVE1;            /* GET SHIFT COUNT       @X04SVMR*/
@RF00545 L     @10,AMBIWA(,RAMB)                                   0571
         L     RPARM1,DIWSAVE1(,@10)                               0571
*       IF RPARM1^=ZERO             /* SEE IF SP SHIFTED. IF         */
*         THEN                      /* SO MAKE FS IN NEW CA.         */
         LTR   RPARM1,RPARM1                                       0572
         BZ    @RF00572                                            0572
*         DO;                                                      0573
*                                                                  0573
*/*  POINT TO THE START OF THE NEW CONTROL AREA                      */
*                                                                  0574
*           DIWSAVE2=ARDHRBA-(AMDCINV*AMDCIPCA);/*           @X04SVRQ*/
         L     @05,PLHARDB(,RPLH)                                  0574
         L     @15,AMBDSB(,RAMB)                                   0574
         LH    @14,AMDCIPCA(,@15)                                  0574
         L     @07,AMDCINV(,@15)                                   0574
         MR    @06,@14                                             0574
         LCR   @07,@07                                             0574
         AL    @07,ARDHRBA(,@05)                                   0574
         ST    @07,DIWSAVE2(,@10)                                  0574
*/*  POSITION TO START OF SEQUENCE SET IN ORDER TO EXTRACT JRNAD RBAS*/
*                                                                  0575
*           RBUFC=PLHIBUFC;         /* GET SEQ SET BUFC              */
         L     RBUFC,PLHIBUFC(,RPLH)                               0575
*/*  SAVE FIRST SEQUENCE SET ENTRY AS THE CURR ENTRY PTR             */
*                                                                  0576
*           IXSHEP=BUFCBAD+IXHLL-IXHFLPLN;/*                 @OX02678*/
         LA    @10,200                                             0576
         ALR   @10,RPLH                                            0576
         L     @05,BUFCBAD(,RBUFC)                                 0576
         LH    @00,IXHLL(,@05)                                     0576
         N     @00,@CF01239                                        0576
         ALR   @00,@05                                             0576
         SLR   @15,@15                                             0576
         IC    @15,IXHFLPLN(,@05)                                  0576
         SLR   @00,@15                                             0576
         ST    @00,IXSHEP(,@10)                                    0576
*           IXSSEP=IXHSEO+BUFCBAD;  /* NEXT SECTION ENTRY PTR        */
         LH    @00,IXHSEO(,@05)                                    0577
         ALR   @00,@05                                             0577
         ST    @00,IXSSEP(,@10)                                    0577
*/*  POSITION THE INDEX POINTERS TO THE FIRST RBA THAT WAS SHIFTED   */
*                                                                  0578
*           DO RPARM1=AMDCIPCA-(IXHFSO-LENGTH(IDAIXH))/(IXHFLPLN-TWO)-
*                 RPARM1 TO ONE BY-ONE;/* LOCATE THE FIRST SHIFT     */
         LH    @10,IXHFSO(,@05)                                    0578
         SL    @10,@CF00052                                        0578
         BCTR  @15,0                                               0578
         BCTR  @15,0                                               0578
         LR    @06,@10                                             0578
         SRDA  @06,32                                              0578
         DR    @06,@15                                             0578
         SLR   @14,@07                                             0578
         SLR   @14,RPARM1                                          0578
         LR    RPARM1,@14                                          0578
         B     @DE00578                                            0578
@DL00578 DS    0H                                                  0579
*             RFY                                                  0579
*              (RWORK1,                                            0579
*               RWORK2,                                            0579
*               RWORK3) RSTD;       /* GET WORK REGISTERS            */
*             RWORK1=IXSHEP;        /* GET OLD ENTRY PTR             */
         LA    @10,200                                             0580
         ALR   @10,RPLH                                            0580
         L     RWORK1,IXSHEP(,@10)                                 0580
*             RWORK2=IXSSEP;        /* GET OLD SECTION PTR           */
         L     RWORK2,IXSSEP(,@10)                                 0581
*             CALL IXINCR;          /* ADVANCE INDEX PTRS            */
         BAL   @14,IXINCR                                          0582
*             IXSHEP=RWORK1;        /* SAVE NEW ENTRY PTR            */
         LA    @10,200                                             0583
         ALR   @10,RPLH                                            0583
         ST    RWORK1,IXSHEP(,@10)                                 0583
*             IXSSEP=RWORK2;        /* SAVE NEW SECTION PTR          */
         ST    RWORK2,IXSSEP(,@10)                                 0584
*             RFY                                                  0585
*              (RWORK1,                                            0585
*               RWORK2,                                            0585
*               RWORK3) UNRSTD;     /* RELEASE REGISTERS             */
*           END;                    /* END OF SHIFT LOCATE           */
         BCTR  RPARM1,0                                            0586
@DE00578 LTR   RPARM1,RPARM1                                       0586
         BP    @DL00578                                            0586
*/*  CONVERT THE SHIFTED CINVS IN THE NEW CONTROL AREA TO FREE SPACE
*    SINCE THE DATA WILL REMAIN IN THE OLD CONTROL AREA.             */
*                                                                  0587
*           DO DIWSAVE1=DIWSAVE1 TO ONE BY-ONE;/* IF SP SHIFT, WRITE
*                                      FS                            */
         L     @10,AMBIWA(,RAMB)                                   0587
         L     @10,DIWSAVE1(,@10)                                  0587
         B     @DE00587                                            0587
@DL00587 DS    0H                                                  0588
*             RFY                                                  0588
*              (RWORK1,                                            0588
*               RWORK2) RSTD;       /* GET WORK REGS.        @X04SVRQ*/
*             RWORK1=IXSHEP;        /* PTR TO CURRENT IX ENTRY.    0589
*                                                            @X04SVRQ*/
         L     RWORK1,IXSHEP+200(,RPLH)                            0589
*             RWORK2=PLHIBUFC->BUFCBAD;/* PTR TO INDEX BFR.  @X04SVRQ*/
         L     @10,PLHIBUFC(,RPLH)                                 0590
         L     RWORK2,BUFCBAD(,@10)                                0590
*             RPARM1=RWORK2->IXHPTLS;/* GET RBA PTR MASK     @X04SVRQ*/
         SLR   RPARM1,RPARM1                                       0591
         IC    RPARM1,IXHPTLS(,RWORK2)                             0591
*             GEN(EX RPARM1,ICMINS);/* GET RBA MULTI.        @X04SVRQ*/
         EX RPARM1,ICMINS
*             DIWSAVE3=RPARM1*AMDCINV+RWORK2->IXHBRBA;/* GET OLD RBA
*                                                            @X04SVRQ*/
         L     @10,AMBIWA(,RAMB)                                   0593
         L     @07,AMBDSB(,RAMB)                                   0593
         LR    @09,RPARM1                                          0593
         M     @08,AMDCINV(,@07)                                   0593
         AL    @09,IXHBRBA(,RWORK2)                                0593
         ST    @09,DIWSAVE3(,@10)                                  0593
*             IF AMBGSR=ON×AMBLSR=ON THEN/* SHR RESOURCE.    @X04SVRQ*/
         TM    AMBGSR(RAMB),B'01100000'                            0594
         BZ    @RF00594                                            0594
*               DO;                 /* RESET OUTPUT RBA IN BFR FOR 0595
*                                      SHIFTED CI.           @X04SVRQ*/
*                 RPARM1=DIWSAVE2;  /* RBA OF SHIFTED CI.    @X04SVRQ*/
         L     RPARM1,DIWSAVE2(,@10)                               0596
*I17:                                                              0597
*                 DO;               /* IDACALL(IDAGRB)               */
I17      DS    0H                                                  0598
*                   CALL IDAGRB;    /* EXIT TO IDAGRB                */
         L     @15,@CV01107                                        0598
         BALR  @14,@15                                             0598
*                   GEN(BALR @11,0);/* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                   GEN(USING *,@11);/* ESTABLISH ADDRESSING         */
         USING *,@11
*                   GEN(L     @11,=A(@PSTART));/* RELOAD BASE        */
         L     @11,=A(@PSTART)
*                   GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING   */
         USING @PSTART,@11
*                 END I17;          /* GET NEW SHIFTED CI.   @X04SVRQ*/
*                 IF RPLERREG^='00'X THEN/* ERROR.           @X04SVRQ*/
         CLI   RPLERREG(RRPL),0                                    0604
         BNE   @RT00604                                            0604
*                   GOTO CASPLERR;  /* EXIT.                 @X04SVRQ*/
*                 BUFCER2=OFF;      /* TURN OFF WRT ERR.     @X04SVRQ*/
         NI    BUFCER2(RBUFC),B'11110111'                          0606
*                 RPARM1=DIWSAVE3;  /* RBA OF OLD CI.        @X04SVRQ*/
         L     @10,AMBIWA(,RAMB)                                   0607
         L     RPARM1,DIWSAVE3(,@10)                               0607
*                 DO;               /* SET OUTPUT RBA                */
*                   BUFCORBA=RPARM1;                               0609
         ST    RPARM1,BUFCORBA(,RBUFC)                             0609
*                   BUFCMW=ON;      /* SET MUST WRITE                */
         OI    BUFCMW(RBUFC),B'10000000'                           0610
*                 END;              /* SET MUST WRT & ORBA.  @X04SVRQ*/
*                 BUFXIRBA=RPARM1;  /* SET EXCL CNTL RBA     @X04SVMR*/
         ST    RPARM1,BUFXIRBA(,RBUFC)                             0612
*                 BUFCDDDD=RPARM1;  /* SET LOOK-ASIDE RBA    @X04SVMR*/
         ST    RPARM1,BUFCDDDD(,RBUFC)                             0613
*I19:                                                              0614
*                 DO;               /* IDACALL(IDAFREEB)             */
I19      DS    0H                                                  0615
*                   CALL IDAFREEB;  /* EXIT TO IDAFREEB              */
         L     @15,@CV01116                                        0615
         BALR  @14,@15                                             0615
*                   GEN(BALR @11,0);/* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                   GEN(USING *,@11);/* ESTABLISH ADDRESSING         */
         USING *,@11
*                   GEN(L     @11,=A(@PSTART));/* RELOAD BASE        */
         L     @11,=A(@PSTART)
*                   GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING   */
         USING @PSTART,@11
*                 END I19;          /* FREE BUFFER.          @X04SVRQ*/
*               END;                /* END RESET OUTPUT RBA. @X04SVRQ*/
*I20:                                                              0622
*             DO;                   /* IDACALL(IDAGNNFL)             */
@RF00594 DS    0H                                                  0622
I20      DS    0H                                                  0623
*               CALL IDAGNNFL;      /* EXIT TO IDAGNNFL              */
         L     @15,@CV01105                                        0623
         BALR  @14,@15                                             0623
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I20;              /* GET NEXT WORK BUFFER          */
*             IF RPLERREG^='00'X THEN/* IF AN I/O ERROR,     @X04SVMR*/
         CLI   RPLERREG(RRPL),0                                    0629
         BNE   @RT00629                                            0629
*               GO TO CASPLERR;     /* EXIT MODULE.          @X04SVMR*/
*             BUFCMW=ON;            /* SET WRITE REQUIRED            */
         OI    BUFCMW(RBUFC),B'10000000'                           0631
*             BUFCORBA=DIWSAVE2;    /* SET OUTPUT RBA                */
         L     @10,AMBIWA(,RAMB)                                   0632
         L     @10,DIWSAVE2(,@10)                                  0632
         ST    @10,BUFCORBA(,RBUFC)                                0632
*             CALL BFRFS;           /* SET FS IN BUFFER.     @X04SVRQ*/
         BAL   @14,BFRFS                                           0633
*             IF AMBGSR=ON×AMBLSR=ON THEN/* SHR RESOURCE.    @X04SVRQ*/
         TM    AMBGSR(RAMB),B'01100000'                            0634
         BZ    @RF00634                                            0634
*               DO;                 /*                       @X04SVRQ*/
*I21:                                                              0636
*                 DO;               /* IDACALL(IDAWRBFR)             */
I21      DS    0H                                                  0637
*                   CALL IDAWRBFR;  /* EXIT TO IDAWRBFR              */
         L     @15,@CV01111                                        0637
         BALR  @14,@15                                             0637
*                   GEN(BALR @11,0);/* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                   GEN(USING *,@11);/* ESTABLISH ADDRESSING         */
         USING *,@11
*                   GEN(L     @11,=A(@PSTART));/* RELOAD BASE        */
         L     @11,=A(@PSTART)
*                   GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING   */
         USING @PSTART,@11
*                 END I21;          /* WRT BACK FS CI.       @X04SVRQ*/
*                 IF RPLERREG^='00'X THEN/* ERROR.           @X04SVRQ*/
         CLI   RPLERREG(RRPL),0                                    0643
         BNE   @RT00643                                            0643
*                   GOTO CASPLERR;  /* EXIT.                 @X04SVRQ*/
*               END;                /* END OF DBDC CODE.     @X04SVMR*/
*             IF BUFCORBA=DIWINRBA THEN/* IF IP WAS MOVED BACK     0646
*                                                            @ZA25653*/
@RF00634 L     @10,AMBIWA(,RAMB)                                   0646
         CLC   BUFCORBA(4,RBUFC),DIWINRBA(@10)                     0646
         BNE   @RF00646                                            0646
*               DIWINRBA=DIWSAVE3;  /* SET NEW INSERT POINT  @ZA25653*/
         L     @07,DIWSAVE3(,@10)                                  0647
         ST    @07,DIWINRBA(,@10)                                  0647
*             DIWSAVE2=DIWSAVE2+AMDCINV;/* GO TO NEXT RBA            */
@RF00646 L     @10,AMBIWA(,RAMB)                                   0648
         L     @07,AMBDSB(,RAMB)                                   0648
         L     @00,DIWSAVE2(,@10)                                  0648
         AL    @00,AMDCINV(,@07)                                   0648
         ST    @00,DIWSAVE2(,@10)                                  0648
*             RFY                                                  0649
*              (RWORK1,                                            0649
*               RWORK2,                                            0649
*               RWORK3) RSTD;       /* GET REGISTERS                 */
*             RBUFC=PLHIBUFC;       /* POINT TO SEQUENCE SET         */
         L     RBUFC,PLHIBUFC(,RPLH)                               0650
*             RWORK1=IXSHEP;        /* GET OLD ENTRY PTR             */
         LA    @10,200                                             0651
         ALR   @10,RPLH                                            0651
         L     RWORK1,IXSHEP(,@10)                                 0651
*             RWORK2=IXSSEP;        /* GET OLD SECTION PTR           */
         L     RWORK2,IXSSEP(,@10)                                 0652
*             CALL IXINCR;          /* INCREMENT INDEX PTRS          */
         BAL   @14,IXINCR                                          0653
*             IXSHEP=RWORK1;        /* SAVE NEW ENTRY PTR            */
         LA    @10,200                                             0654
         ALR   @10,RPLH                                            0654
         ST    RWORK1,IXSHEP(,@10)                                 0654
*             IXSSEP=RWORK2;        /* SAVE NEW SECTION PTR          */
         ST    RWORK2,IXSSEP(,@10)                                 0655
*             RBUFC=PLHDBUFC;       /* POINT TO DATA                 */
         L     RBUFC,PLHDBUFC(,RPLH)                               0656
*             RFY                                                  0657
*              (RWORK1,                                            0657
*               RWORK2,                                            0657
*               RWORK3) UNRSTD;     /* RELEASE REGISTERS             */
*I22:                                                              0658
*             DO;                   /* IDACALL(IDAFREEB)             */
I22      DS    0H                                                  0659
*               CALL IDAFREEB;      /* EXIT TO IDAFREEB              */
         L     @15,@CV01116                                        0659
         BALR  @14,@15                                             0659
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I22;              /* FREE WK BFR           @X04SVLP*/
*           END;                    /* END OF SP SHIFT WRITE         */
         L     @05,AMBIWA(,RAMB)                                   0665
         SLR   @10,@10                                             0665
         BCTR  @10,0                                               0665
         AL    @10,DIWSAVE1(,@05)                                  0665
         L     @05,AMBIWA(,RAMB)                                   0665
         ST    @10,DIWSAVE1(,@05)                                  0665
@DE00587 LTR   @10,@10                                             0665
         BP    @DL00587                                            0665
*           IF AMBGSR=OFF&AMBLSR=OFF THEN/* IF NOT DBDC,     @X04SVMR*/
         TM    AMBGSR(RAMB),B'01100000'                            0666
         BNZ   @RF00666                                            0666
*/*  FORCE OUT ALL WRITES FOR THE NEW CONTROL AREA                   */
*                                                                  0667
*I23:                                                              0667
*             DO;                   /* IDACALL(IDAWRBFR)             */
I23      DS    0H                                                  0668
*               CALL IDAWRBFR;      /* EXIT TO IDAWRBFR              */
         L     @15,@CV01111                                        0668
         BALR  @14,@15                                             0668
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I23;              /* REMOVE CINVS IN NEW CA        */
*           IF RPLERREG^='00'X THEN /* IF ANY ERROR, EXIT            */
@RF00666 CLI   RPLERREG(RRPL),0                                    0674
         BNE   @RT00674                                            0674
*             GO TO CASPLERR;       /* FROM CA SPLIT                 */
*         END;                      /* END OF FS CREATE              */
*       RBUFC=PLHIBUFC;             /* POINT TO SEQ. SET             */
@RF00572 L     RBUFC,PLHIBUFC(,RPLH)                               0677
*/* CONVERT THE COPIED DATA CONTROL INTERVALS IN THE OLD CONTROL   0678
*   AREA TO FREE SPACE                                               */
*                                                                  0678
*       DIWHPTLS=IXHPTLS;           /* GET RBA PTR MASK              */
         L     @10,AMBIWA(,RAMB)                                   0678
         L     @05,BUFCBAD(,RBUFC)                                 0678
         MVC   DIWHPTLS(1,@10),IXHPTLS(@05)                        0678
*       DIWFLPLN=IXHFLPLN-TWO;      /* GET FS ENTRY LENGTH           */
         SLR   @00,@00                                             0679
         IC    @00,IXHFLPLN(,@05)                                  0679
         BCTR  @00,0                                               0679
         BCTR  @00,0                                               0679
         STC   @00,DIWFLPLN(,@10)                                  0679
*       DIWSAVE3=BUFCBAD+IXHFSO;    /* PTR TO END OF FS ENTRY        */
         LH    @00,IXHFSO(,@05)                                    0680
         ALR   @00,@05                                             0680
         ST    @00,DIWSAVE3(,@10)                                  0680
*       RFY                                                        0681
*         RWORK1 UNRSTD;            /* DROP WORK REGISTER            */
*       RFY                                                        0682
*        (RWORK2,                                                  0682
*         RWORK3) UNRSTD;           /* DROP WORK REGISTERS           */
*       DO DIWSAVE4=DIWSAVE4 TO ONE BY-ONE;/* SET UP FS IN OLD CA    */
         L     @10,DIWSAVE4(,@10)                                  0683
         B     @DE00683                                            0683
@DL00683 DS    0H                                                  0684
*I24:                                                              0684
*         DO;                       /* IDACALL(IDAGNNFL)             */
I24      DS    0H                                                  0685
*           CALL IDAGNNFL;          /* EXIT TO IDAGNNFL              */
         L     @15,@CV01105                                        0685
         BALR  @14,@15                                             0685
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I24;                  /* GET WORK BUFC                 */
*         IF RPLERREG^='00'X THEN   /* IF AN I/O ERROR,      @X04SVMR*/
         CLI   RPLERREG(RRPL),0                                    0691
         BNE   @RT00691                                            0691
*           GO TO CASPLERR;         /* EXIT MODULE.          @X04SVMR*/
*         RFY                                                      0693
*           RWORK1 RSTD;            /* GET WORK REGISTER             */
*         RWORK1=DIWSAVE3-DIWFLPLN; /* GET NEXT FS PTR               */
         L     @10,AMBIWA(,RAMB)                                   0694
         L     RWORK1,DIWSAVE3(,@10)                               0694
         SLR   @00,@00                                             0694
         IC    @00,DIWFLPLN(,@10)                                  0694
         SLR   RWORK1,@00                                          0694
*         DIWSAVE3=RWORK1;          /* STORE NEW FS PTR              */
         ST    RWORK1,DIWSAVE3(,@10)                               0695
*         RPARM1=DIWHPTLS;          /* GET RBA PTR MASK              */
         SLR   RPARM1,RPARM1                                       0696
         IC    RPARM1,DIWHPTLS(,@10)                               0696
*         GEN(EX  RPARM1,ICMINS2);  /* GET RBA MULTIPLIER            */
         EX  RPARM1,ICMINS2
*         RFY                                                      0698
*           RWORK1 UNRSTD;          /* DROP WORK REGISTER            */
*         BUFCORBA=RPARM1*AMDCINV+PLHIBUFC->BUFCBAD->IXHBRBA;/* SET
*                                      RBA                           */
         L     @10,AMBDSB(,RAMB)                                   0699
         LR    @07,RPARM1                                          0699
         M     @06,AMDCINV(,@10)                                   0699
         L     @10,PLHIBUFC(,RPLH)                                 0699
         L     @10,BUFCBAD(,@10)                                   0699
         AL    @07,IXHBRBA(,@10)                                   0699
         ST    @07,BUFCORBA(,RBUFC)                                0699
*         BUFCMW=ON;                /* SET MUST WRITE                */
         OI    BUFCMW(RBUFC),B'10000000'                           0700
*         CALL BFRFS;               /* SET FS IN BUFFER.     @X04SVRQ*/
         BAL   @14,BFRFS                                           0701
*         IF AMBGSR=ON×AMBLSR=ON THEN/* SHR RESOURCE.        @X04SVRQ*/
         TM    AMBGSR(RAMB),B'01100000'                            0702
         BZ    @RF00702                                            0702
*I25:                                                              0703
*           DO;                     /* IDACALL(IDAWRBFR)             */
I25      DS    0H                                                  0704
*             CALL IDAWRBFR;        /* EXIT TO IDAWRBFR              */
         L     @15,@CV01111                                        0704
         BALR  @14,@15                                             0704
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I25;                /* WRT BACK OLD CI.      @X04SVRQ*/
*I26:                                                              0710
*         DO;                       /* IDACALL(IDAFREEB)             */
@RF00702 DS    0H                                                  0710
I26      DS    0H                                                  0711
*           CALL IDAFREEB;          /* EXIT TO IDAFREEB              */
         L     @15,@CV01116                                        0711
         BALR  @14,@15                                             0711
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I26;                  /* FREE DATA BUFC        @X04SVLP*/
*       END;                        /* END OF OLD CA FS CHANGE       */
         L     @05,AMBIWA(,RAMB)                                   0717
         SLR   @10,@10                                             0717
         BCTR  @10,0                                               0717
         AL    @10,DIWSAVE4(,@05)                                  0717
         L     @05,AMBIWA(,RAMB)                                   0717
         ST    @10,DIWSAVE4(,@05)                                  0717
@DE00683 LTR   @10,@10                                             0717
         BP    @DL00683                                            0717
*       IF AMBLSR=OFF&AMBGSR=OFF THEN/* IF NOT DBDC,         @X04SVMR*/
         TM    AMBLSR(RAMB),B'01100000'                            0718
         BNZ   @RF00718                                            0718
*I27:                                                              0719
*         DO;                       /* IDACALL(IDAWRBFR)             */
I27      DS    0H                                                  0720
*           CALL IDAWRBFR;          /* EXIT TO IDAWRBFR              */
         L     @15,@CV01111                                        0720
         BALR  @14,@15                                             0720
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I27;                  /* FINISH WRITING                */
*/*  ENSURE THAT THE PLACEHOLDER CONTAINS THE INSERT SEQUENCE SET    */
*                                                                  0726
*       IF DIWINRBA>DIWHRBA THEN    /*                       @ZA25653
*                                      IF THE INSERT POINT IS IN THE
*                                      NEW CONTROL AREA,GO           */
@RF00718 L     @10,AMBIWA(,RAMB)                                   0726
         CLC   DIWINRBA(4,@10),DIWHRBA(@10)                        0726
         BNH   @RF00726                                            0726
*         DO;                       /* TO THE NEXT SEQ. SET          */
*           RBUFC=PLHIBUFC;         /* POINT TO THE OLD SS BUFC      */
         L     RBUFC,PLHIBUFC(,RPLH)                               0728
*           DIWSAVE2=IXHHP;         /* SAVE RBA OF NEW CA SS         */
         L     @05,BUFCBAD(,RBUFC)                                 0729
         L     @05,IXHHP(,@05)                                     0729
         ST    @05,DIWSAVE2(,@10)                                  0729
*           RAMB=AMBLIX;            /* POINT TO THE INDEX AMB        */
         L     @10,RPLDACB(,RRPL)                                  0730
         L     @10,ACBAMBL(,@10)                                   0730
         L     RAMB,AMBLIX(,@10)                                   0730
*           PLHSSR=ON;              /* INDICATE SEQUENCE SET         */
         OI    PLHSSR(RPLH),B'00010000'                            0731
*I28:                                                              0732
*           DO;                     /* IDACALL(IDAFREEB)             */
I28      DS    0H                                                  0733
*             CALL IDAFREEB;        /* EXIT TO IDAFREEB              */
         L     @15,@CV01116                                        0733
         BALR  @14,@15                                             0733
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I28;                /* FREE OLD SEQ SET      @X04SVLP*/
*           RPARM1=ADDR(PLHIXSPL);  /* POINT TO INDEX SEARCH PARM  0739
*                                      LIST                  @ZA02289*/
         LA    RPARM1,PLHIXSPL(,RPLH)                              0739
*           RPARM1->IXSILN=ONE;     /* SET LEVEL NO.         @ZA02289*/
         MVI   IXSILN(RPARM1),X'01'                                0740
*           RPARM1=AMBLDTA->AMBIWA->DIWSAVE2;/* GET THE RBA OF NEW SS*/
         L     @10,RPLDACB(,RRPL)                                  0741
         L     @10,ACBAMBL(,@10)                                   0741
         L     @10,AMBLDTA(,@10)                                   0741
         L     @10,AMBIWA(,@10)                                    0741
         L     RPARM1,DIWSAVE2(,@10)                               0741
*           PLHSSRBA=RPARM1;        /* SAVE SEQ SET RBA      @X04SVMR*/
         ST    RPARM1,PLHSSRBA(,RPLH)                              0742
*I29:                                                              0743
*           DO;                     /* IDACALL(IDAGRB)               */
I29      DS    0H                                                  0744
*             CALL IDAGRB;          /* EXIT TO IDAGRB                */
         L     @15,@CV01107                                        0744
         BALR  @14,@15                                             0744
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I29;                /* ACQUIRE NEW SEQ SET           */
*           RAMB=AMBLDTA;           /* GO BACK TO DATA               */
         L     @10,RPLDACB(,RRPL)                                  0750
         L     @10,ACBAMBL(,@10)                                   0750
         L     RAMB,AMBLDTA(,@10)                                  0750
*         END;                      /* END OF INSERT IN NEW CA       */
*       IF RPLERREG^='00'X THEN     /* ANY ERRORS IN FS CREATE       */
@RF00726 CLI   RPLERREG(RRPL),0                                    0752
         BNE   @RT00752                                            0752
*         GO TO CASPLERR;           /* WILL CAUSE AN EXIT            */
*/* INCREMENT CONTROL AREA SPLIT COUNT                               */
*                                                                  0754
*       AMDNCAS=AMDNCAS+ONE;        /* INDICATE ONE MORE CA SP       */
         L     @10,AMBDSB(,RAMB)                                   0754
         LA    @05,1                                               0754
         AL    @05,AMDNCAS(,@10)                                   0754
         ST    @05,AMDNCAS(,@10)                                   0754
*     END;                          /* SP SHIFT/FS WRITE END         */
*CASPLERR:                          /* COMMON EXIT POINT             */
*/*  IF ADD-TO-END, INITIALIZE THE PLACEHOLDER INSERT POINTERS TO  0756
*    THE FREE SPACE CONTROL INTERVAL, SET THE RBA TO THAT OF THE   0756
*    BEGINNING OF THE NEW CONTROL AREA, AND CALL DATA INSERT.        */
*                                                                  0756
*   IF PLHADDTE=ON&RPLRLEN<=AMDCINV-LENGTH(IDACIDF)-LENGTH(IDARDF)/*
*                                      IF ADD TO END & NOT SPANNED 0756
*                                      REC., POINT TO        @X04SVRQ*/
*     THEN                          /* A FREE SPACE CINV AND         */
@RF00540 DS    0H                                                  0756
CASPLERR TM    PLHADDTE(RPLH),B'00010000'                          0756
         BNO   @RF00756                                            0756
         L     @10,AMBDSB(,RAMB)                                   0756
         L     @10,AMDCINV(,@10)                                   0756
         SL    @10,@CF00170                                        0756
         C     @10,RPLRLEN(,RRPL)                                  0756
         BL    @RF00756                                            0756
*     DO;                           /* INSERT RECORD.                */
*                                                                  0757
*       /*************************************************************/
*       /*                                                           */
*       /* IF NO ERRORS, INSERT THE RECORD.                          */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0758
*       IF RPLERREG='00'X           /* IF NO ERROR, UPDATE INS       */
*         THEN                      /* PT AND INSERT RECORD.         */
         CLI   RPLERREG(RRPL),0                                    0758
         BNE   @RF00758                                            0758
*         DO;                                                      0759
*           RBUFC=PLHDBUFC;         /* POINT TO DATA BUFC            */
         L     RBUFC,PLHDBUFC(,RPLH)                               0760
*I30:                                                              0761
*           DO;                     /* IDACALL(IDAFREEB)             */
I30      DS    0H                                                  0762
*             CALL IDAFREEB;        /* EXIT TO IDAFREEB              */
         L     @15,@CV01116                                        0762
         BALR  @14,@15                                             0762
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I30;                /* FREE DATA BUFFER.     @X04SVRQ*/
*I31:                                                              0768
*           DO;                     /* IDACALL(IDAGNNFL)             */
I31      DS    0H                                                  0769
*             CALL IDAGNNFL;        /* EXIT TO IDAGNNFL              */
         L     @15,@CV01105                                        0769
         BALR  @14,@15                                             0769
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I31;                /* GET NEXT NO FILL.     @X04SVRQ*/
*           IF RPLERREG^='00'X THEN /* ERROR.                @X04SVRQ*/
         CLI   RPLERREG(RRPL),0                                    0775
         BNE   @RT00775                                            0775
*             GOTO RFEXITA1;        /* RETURN.               @ZB02289*/
*           BUFCMW=ON;              /* CAUSE WRITE TO OCCUR          */
         OI    BUFCMW(RBUFC),B'10000000'                           0777
*           BUFCORBA=DIWSAVE2;      /* SET TO FIRST RBA OF CA        */
         L     @10,AMBIWA(,RAMB)                                   0778
         L     @05,DIWSAVE2(,@10)                                  0778
         ST    @05,BUFCORBA(,RBUFC)                                0778
*           BUFCDDDD=BUFCORBA;      /* SET BUFC INPUT RBA.   @X04SVRQ*/
         ST    @05,BUFCDDDD(,RBUFC)                                0779
*           BUFXIRBA=BUFCORBA;      /* SET EXCL INPUT RBA.   @X04SVRQ*/
         ST    @05,BUFXIRBA(,RBUFC)                                0780
*           BUFCVAL=ON;             /* SET BUFC VALID.       @X04SVRQ*/
*           BUFCEXC=ON;             /* SET BUFC EXCL.        @X04SVRQ*/
         OI    BUFCVAL(RBUFC),B'00000110'                          0782
*           DIWSHIFT=OFF;           /* OK TO DROP SHIFT      @ZA25653*/
         NI    DIWSHIFT(@10),B'11111011'                           0783
*           CALL BFRFS;             /* SET FS IN BUFFER.     @X04SVRQ*/
         BAL   @14,BFRFS                                           0784
*           ARDHKRBA=DIWSAVE2;      /* SET NEW HIGH KEY              */
         L     @10,PLHARDB(,RPLH)                                  0785
         L     @05,AMBIWA(,RAMB)                                   0785
         L     @05,DIWSAVE2(,@05)                                  0785
         ST    @05,ARDHKRBA(,@10)                                  0785
*           PLHFSP=BUFCBAD;         /* BUFFER IS ALL FREE            */
         L     @10,BUFCBAD(,RBUFC)                                 0786
         ST    @10,PLHFSP(,RPLH)                                   0786
*           PLHRECP=BUFCBAD;        /* NO RECORDS IN BUFFER          */
         ST    @10,PLHRECP(,RPLH)                                  0787
*           PLHRDFP=BUFCBAD+AMDCINV-LENGTH(IDACIDF);/* NO RDFS       */
         L     @05,AMBDSB(,RAMB)                                   0788
         AL    @10,AMDCINV(,@05)                                   0788
         SL    @10,@CF00036                                        0788
         ST    @10,PLHRDFP(,RPLH)                                  0788
*I32:                                                              0789
*           DO;                     /* IDACALL(IDA019RM)             */
I32      DS    0H                                                  0790
*             CALL IDA019RM;        /* EXIT TO IDA019RM              */
         L     @15,@CV01115                                        0790
         BALR  @14,@15                                             0790
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I32;                /* CALL DATA INSERT              */
*           RPARM1=ONE;             /* INDICATE TO RE, SPLIT OR    0796
*                                      INSERT NOT REQUIRED.  @X04SVRQ*/
         LA    RPARM1,1                                            0796
*         END;                      /* END OF NO ERROR/A.T.E.        */
*       ELSE                        /* ERROR ATE             @ZA25653*/
*         DO;                       /*                       @ZA25653*/
         B     @RC00758                                            0798
@RF00758 DS    0H                                                  0799
*           DIWSHIFT=OFF;           /* DROP SHIFT            @ZA25653*/
         L     @10,AMBIWA(,RAMB)                                   0799
         NI    DIWSHIFT(@10),B'11111011'                           0799
*           RPARM1=ZERO;            /* INSERT NOT DONE       @ZA25653*/
         SLR   RPARM1,RPARM1                                       0800
*         END;                      /*                       @ZA25653*/
*     END;                          /* END OF ADD-TO-END INS.        */
*/*  IF NOT ADD-TO-END, THROW AWAY READ-AHEAD BUFFERS AND RESET THE
*    INSERT POINTERS FOR CONTROL INTERVAL SPLIT.                     */
*                                                                  0803
*   ELSE                            /* HERE FOR NON ADD TO END       */
*     DO;                           /* TO RESET THE INSERT PT        */
*                                                                  0803
         B     @RC00756                                            0803
@RF00756 DS    0H                                                  0804
*       /*************************************************************/
*       /*                                                           */
*       /* AVOID RETENTION OF INSERT BUFC                            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0804
*       IF AMBGSR=OFF&AMBLSR=OFF THEN/* NOT SHR RESOURCE     @X04SVRQ*/
         TM    AMBGSR(RAMB),B'01100000'                            0804
         BNZ   @RF00804                                            0804
*         DO;                                                      0805
*           RAMB=AMBLDTA;           /* RELOAD AMB POINTER    @ZA10869*/
         L     @10,RPLDACB(,RRPL)                                  0806
         L     @10,ACBAMBL(,@10)                                   0806
         L     RAMB,AMBLDTA(,@10)                                  0806
*           RBUFC=BUFDBUFC;         /* POINT TO INS BFR      @X04SVRQ*/
         L     @10,AMBBUFC(,RAMB)                                  0807
         L     RBUFC,BUFDBUFC(,@10)                                0807
*I33:                                                              0808
*           DO;                     /* IDACALL(IDASBF)               */
I33      DS    0H                                                  0809
*             CALL IDASBF;          /* EXIT TO IDASBF                */
         L     @15,@CV01108                                        0809
         BALR  @14,@15                                             0809
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I33;                /* REMOVE FROM CHAIN             */
*/* REMOVE ALL BUT ONE BUFFER FROM THE PLACEHOLDER                   */
*                                                                  0815
*           IF RPLERREG='00'X THEN  /* IF NO ERRORS,                 */
         CLI   RPLERREG(RRPL),0                                    0815
         BNE   @RF00815                                            0815
*             DO;                   /* SUBTRACT EXCESS BUFFERS       */
*               RBUFC=ZERO;         /* SET SUBTRACT ALL              */
         SLR   RBUFC,RBUFC                                         0817
*I34:                                                              0818
*               DO;                 /* IDACALL(IDASBF)               */
I34      DS    0H                                                  0819
*                 CALL IDASBF;      /* EXIT TO IDASBF                */
         L     @15,@CV01108                                        0819
         BALR  @14,@15                                             0819
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I34;            /* SUBTRACT A BUFFER             */
*               PLHASKBF=ON;        /* ADD BUFFER LATER      @X04SVMR*/
         OI    PLHASKBF(RPLH),B'00100000'                          0825
*             END;                  /* END OF BUFFER SUBTRACT        */
*         END;                      /* END NON-DB/DC         @X04SVMR*/
@RF00815 DS    0H                                                  0828
*/* CONVERT THE INSERT POINTERS BACK TO ADDRESSES RATHER THAN OFFSETS*/
*                                                                  0828
*       RPARM1=DIWINRBA;            /* PT TO IP RBA          @ZA25653*/
@RF00804 L     @10,AMBIWA(,RAMB)                                   0828
         L     RPARM1,DIWINRBA(,@10)                               0828
*I35:                                                              0829
*       DO;                         /* IDACALL(IDAGRB)               */
I35      DS    0H                                                  0830
*         CALL IDAGRB;              /* EXIT TO IDAGRB                */
         L     @15,@CV01107                                        0830
         BALR  @14,@15                                             0830
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I35;                    /* READ IN IP CINV               */
*       DIWSHIFT=OFF;               /* SHIFT IS THRU         @OX02678*/
         L     @10,AMBIWA(,RAMB)                                   0836
         NI    DIWSHIFT(@10),B'11111011'                           0836
*       BUFCORBA=BUFCDDDD;          /* CORRECT OUTPUT RBA            */
         L     @10,BUFCDDDD(,RBUFC)                                0837
         ST    @10,BUFCORBA(,RBUFC)                                0837
*       PLHRDFP=PLHRDFP+BUFCBAD;    /* CONVERT OFFSETS BACK          */
         L     @10,BUFCBAD(,RBUFC)                                 0838
         L     @05,PLHRDFP(,RPLH)                                  0838
         ALR   @05,@10                                             0838
         ST    @05,PLHRDFP(,RPLH)                                  0838
*       PLHRECP=PLHRECP+BUFCBAD;    /* TO ADDRESSES.                 */
         L     @05,PLHRECP(,RPLH)                                  0839
         ALR   @05,@10                                             0839
         ST    @05,PLHRECP(,RPLH)                                  0839
*       PLHFSP=PLHFSP+BUFCBAD;      /*                               */
         AL    @10,PLHFSP(,RPLH)                                   0840
         ST    @10,PLHFSP(,RPLH)                                   0840
*       RPARM1=ZERO;                /* INDICATE TO RE, INSERT NOT  0841
*                                      DONE.                 @X04SVRQ*/
         SLR   RPARM1,RPARM1                                       0841
*     END;                          /* END OF INSERT PT RESET        */
*RFEXITA1:                                                         0843
*   ;                               /* EXIT LABEL FOR EXCL ERROR.  0843
*                                                            @ZB02289*/
@RC00756 DS    0H                                                  0843
RFEXITA1 DS    0H                                                  0844
*   DIWCAS=OFF;                     /* CA SPLIT FINISHED     @X04SVRQ*/
         L     @10,AMBIWA(,RAMB)                                   0844
         NI    DIWCAS(@10),B'01111111'                             0844
*RFEXIT:                                                           0845
*   IF AMBTRACE^=ZERO THEN          /* IS IDATRACE ACTIVE    @ZA29388*/
RFEXIT   L     @10,AMBTRACE(,RAMB)                                 0845
         LTR   @10,@10                                             0845
         BZ    @RF00845                                            0845
*     DO;                           /*                       @ZA29388*/
*       CALL IDA019ST;              /* CALL IDATRACE         @ZA29388*/
         L     @15,@CV01134                                        0847
         BALR  @14,@15                                             0847
*       GEN(DC X'000A');            /* TRACE ID              @ZA29388*/
         DC X'000A'
*     END;                          /*                       @ZA29388*/
*   GEN(IDARST14);                  /* RESTORE RETURN REGISTER       */
@RF00845 DS    0H                                                  0850
         IDARST14
*   RETURN;                         /* EXIT FROM CA SPLIT            */
@EL00001 DS    0H                                                  0851
@EF00001 DS    0H                                                  0851
@ER00001 BR    @14                                                 0851
*   GEN;                                                           0852
ICMINS   ICM   RPARM1,@00,IBFLP3(RWORK1)   GET 1, 2, OR 3 BYTE RBA
ICMINS2  ICM   RPARM1,@00,@00(RWORK1)   GET RBA(FREE SPACE)
*                                                                  0853
*/* FUNCTION - INCREMENT ONE INDEX ENTRY                             */
*/* INPUT -- RWORK1 = A(LAST ENTRY), RWORK2 = A(NEXT SECTION ENTRY)  */
*/* OUTPUT -- RWORK1 = A(NEXT ENTRY), RWORK2 = A(NEXT SECTION ENTRY),*/
*/*           AND RWORK3 = L OF LAST ENTRY.                          */
*                                                                  0853
*IXINCR:                                                           0853
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* INDEX INCREMENT               */
         B     @PB00002                                            0853
IXINCR   DS    0H                                                  0854
*   RFY                                                            0854
*     R14 RSTD;                     /* SAVE RETURN REGISTER          */
*   RFY                                                            0855
*    (RWORK1,                                                      0855
*     RWORK2,                                                      0855
*     RWORK3) RSTD;                 /* GET WORK REGISTERS            */
*   RWORK3=RWORK1->IBFLPL;          /* GET L BYTE INTO REG           */
         SLR   RWORK3,RWORK3                                       0856
         IC    RWORK3,IBFLPL(,RWORK1)                              0856
*   IF RWORK1^=RWORK2 THEN          /* IF NOT SECTION ENTRY,         */
         CLR   RWORK1,RWORK2                                       0857
         BE    @RF00857                                            0857
*     RWORK1=RWORK1-IXHFLPLN-RWORK3;/* NORMAL INCREMENT              */
         L     @15,BUFCBAD(,RBUFC)                                 0858
         LR    @10,RWORK1                                          0858
         SLR   @00,@00                                             0858
         IC    @00,IXHFLPLN(,@15)                                  0858
         SLR   @10,@00                                             0858
         SLR   @10,RWORK3                                          0858
         LR    RWORK1,@10                                          0858
*   ELSE                            /* IF SECTION ENTRY, LL          */
*     DO;                           /* MUST BE INCLUDED.             */
         B     @RC00857                                            0859
@RF00857 DS    0H                                                  0860
*       RWORK1=RWORK1-IXHFLPLN-RWORK3/* GOING TO NEXT ENTRY          */
*           -LENGTH(IXSELL);        /* REQUIRES LL INCLUSION         */
         L     @15,BUFCBAD(,RBUFC)                                 0860
         SLR   @10,@10                                             0860
         IC    @10,IXHFLPLN(,@15)                                  0860
         LR    @15,RWORK1                                          0860
         SLR   @15,@10                                             0860
         SLR   @15,RWORK3                                          0860
         BCTR  @15,0                                               0860
         BCTR  @15,0                                               0860
         LR    RWORK1,@15                                          0860
*       RWORK3=RWORK1+IXHFLPLN;     /* POINT TO LL FIELD             */
         ALR   @10,RWORK1                                          0861
         LR    RWORK3,@10                                          0861
*       RWORK2=RWORK2-RWORK3->IXSELL;/* ADJUST SECT ENTRY PTR        */
         SLR   @15,@15                                             0862
         ICM   @15,3,IXSELL(RWORK3)                                0862
         SLR   RWORK2,@15                                          0862
*       IXSLEP=RWORK1;              /* NEW LOW ENTRY PTR             */
         ST    RWORK1,IXSLEP+200(,RPLH)                            0863
*     END;                          /* END OF CROSSING SECT.         */
*   RETURN;                         /* RETURN TO CALLER              */
@EL00002 DS    0H                                                  0865
@EF00002 DS    0H                                                  0865
@ER00002 BR    @14                                                 0865
*   RFY                                                            0866
*     R14 UNRSTD;                   /* RELEASE REG.          @X04SVRQ*/
*   END IXINCR;                     /* END OF INDEX INCREMENT        */
         B     @EL00002                                            0867
*                                                                  0868
*   /*****************************************************************/
*   /*                                                               */
*   /* BUFFER FREE SPACE --- INPUT - RBUFC. SETS BUFFER TO FREE      */
*   /* SPACE.                                                @X04SVRQ*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0868
*BFRFS:                                                            0868
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @X04SVRQ*/
BFRFS    DS    0H                                                  0869
*   RFY                                                            0869
*     R14 RSTD;                     /* SAVE RETURN REG.      @X04SVRQ*/
*   RFY                                                            0870
*    (RWORK2,                                                      0870
*     RWORK3,                                                      0870
*     RWORK5) RSTD;                 /* GET WORK REGS.        @X04SVRQ*/
*   RWORK2=BUFCBAD;                 /* TO ADDRESS.           @X04SVRQ*/
         L     RWORK2,BUFCBAD(,RBUFC)                              0871
*   RWORK3=AMDCINV;                 /* TO LENGTH.            @X04SVRQ*/
         L     @15,AMBDSB(,RAMB)                                   0872
         L     RWORK3,AMDCINV(,@15)                                0872
*   RWORK5=ZERO;                    /* PAD CHAR.             @X04SVRQ*/
         SLR   RWORK5,RWORK5                                       0873
*   GEN(MVCL RWORK2,RWORK4);        /* ZERO BUFFER.          @X04SVRQ*/
         MVCL RWORK2,RWORK4
*   RWORK3=AMDCINV-LENGTH(IDACIDF); /* GET FS COUNT.         @X04SVRQ*/
         L     @15,AMBDSB(,RAMB)                                   0875
         L     RWORK3,AMDCINV(,@15)                                0875
         SL    RWORK3,@CF00036                                     0875
*   RWORK5=BUFCBAD+RWORK3;          /* POINT TO CIDF.        @X04SVRQ*/
         LR    RWORK5,RWORK3                                       0876
         AL    RWORK5,BUFCBAD(,RBUFC)                              0876
*   RWORK5->CIDFLL=RWORK3;          /* SET CIDF FS LENGTH.   @X04SVRQ*/
         STH   RWORK3,CIDFLL(,RWORK5)                              0877
*   RFY                                                            0878
*    (RWORK2,                                                      0878
*     RWORK3,                                                      0878
*     RWORK5) UNRSTD;               /* FREE WORK REGS.       @X04SVRQ*/
*   RETURN;                         /* RETURN TO CALLER.     @X04SVRQ*/
@EL00003 DS    0H                                                  0879
@EF00003 DS    0H                                                  0879
@ER00003 BR    @14                                                 0879
*   RFY                                                            0880
*     R14 UNRSTD;                   /* FREE RETURN REG.      @X04SVRQ*/
*   END BFRFS;                      /* END PROC. BFRFS.      @X04SVRQ*/
@PB00003 DS    0H                                                  0882
*   GEN(IDAPATCH);                  /* DEFINE PATCH AREA             */
         IDAPATCH
*   END IDA019RF                    /* END OF CA SPLIT               */
*                                                                  0883
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDADIWA )                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDABSPH )                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IDAIRD  )                                       */
*/*%INCLUDE SYSLIB  (IDAIXSPL)                                       */
*/*%INCLUDE SYSLIB  (IDAICWA )                                       */
*/*%INCLUDE SYSLIB  (IDAIMWA )                                       */
*/*%INCLUDE SYSLIB  (IDACIDF )                                       */
*/*%INCLUDE SYSLIB  (IDARDF  )                                       */
*                                                                  0883
*       ;                                                          0883
         B     @EL00001                                            0883
@DATA    DS    0H
@DATD    DSECT
         DS    0F
IDA019RF CSECT
         DS    0F
@CF00047 DC    F'1'
@CF00036 DC    F'4'
@CF00170 DC    F'7'
@CF00052 DC    F'24'
@CF01239 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
IDA019RF CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV01103 DC    V(IDAABF)
@CV01104 DC    V(IDAEOVIF)
@CV01105 DC    V(IDAGNNFL)
@CV01106 DC    V(IDAGNXT)
@CV01107 DC    V(IDAGRB)
@CV01108 DC    V(IDASBF)
@CV01109 DC    V(IDATJXIT)
@CV01110 DC    V(IDA019SF)
@CV01111 DC    V(IDAWRBFR)
@CV01112 DC    V(IDAAIBF)
@CV01113 DC    V(IDA019RI)
@CV01114 DC    V(IDA019RK)
@CV01115 DC    V(IDA019RM)
@CV01116 DC    V(IDAFREEB)
@CV01134 DC    V(IDA019ST)
         DS    0D
HWORD4   DC    H'4'
@DATD    DSECT
*                                                          /*@X04SVLC*/
RDFCTNUA EQU   X'40'                    COMPLEX RDF INDICATOR
RDFCTNUX EQU   X'FF'-RDFCTNUA           RESET COMPLEX MASK
RDFREPLA EQU   X'08'                    COUNT RDF INDICATOR
RDFREPLX EQU   X'FF'-RDFREPLA           RESET COUNT MASK
RDFEMPTI EQU   X'04'                    EMPTY RECORD       /*@X04SVLC*/
RDFLEN   EQU   3                        LENGTH OF RDF
RDFLLOFF EQU   1                        OFFSET WITHIN RDF TO LL
RDFSGLR  EQU   X'00'                   MASK FOR SINGLE RECORD RDF
RDFGRP   EQU   RDFCTNUA                 MASK FOR LL RDF OF A GROUP RDF
RDFCNT   EQU   RDFREPLA                 MASK FOR COUNT RDF
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019RF CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RRPL     EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
RPARM1   EQU   @12
R14      EQU   @14
R15      EQU   @15
RWORK4A  EQU   @08
RWORK0   EQU   @00
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLSEQ   EQU   RPLOPT1
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLDDDD  EQU   RPLRBAR+4
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IDAAMB   EQU   0
AMBBUFC  EQU   IDAAMB+8
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBJRN   EQU   AMBFLG1
AMBINBUF EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBCAT   EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBLSR   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBTRACE EQU   IDAAMB+120
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDADIWA  EQU   0
DIWFLG1  EQU   IDADIWA+4
DIWCAS   EQU   DIWFLG1
DIWSHIFT EQU   DIWFLG1
DIWFLG2  EQU   IDADIWA+5
DIWLRBA  EQU   IDADIWA+8
DIWHRBA  EQU   IDADIWA+12
DIWSAVE  EQU   IDADIWA+28
DIWSAVE1 EQU   DIWSAVE
DIWSAVE2 EQU   DIWSAVE+4
DIWSAVE3 EQU   DIWSAVE+8
DIWSAVE4 EQU   DIWSAVE+12
DIWINRBA EQU   IDADIWA+52
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHASKBF EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHADDTE EQU   PLHFLG2
PLHEFLGS EQU   IDAPLH+4
PLHFLG3  EQU   IDAPLH+6
PLHRAHD  EQU   PLHFLG3
PLHAFLGS EQU   IDAPLH+7
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJRNLL EQU   IDAPLH+32
PLHJNRBA EQU   IDAPLH+36
PLHJCODE EQU   IDAPLH+40
PLHEOVR  EQU   IDAPLH+42
PLHRSCS  EQU   IDAPLH+43
PLHARDB  EQU   IDAPLH+44
PLHDBUFC EQU   IDAPLH+52
PLHRECP  EQU   IDAPLH+60
PLHFSP   EQU   IDAPLH+64
PLHRDFP  EQU   IDAPLH+68
PLHDIOB  EQU   IDAPLH+76
PLHSAVE1 EQU   IDAPLH+84
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE6 EQU   IDAPLH+104
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHIBUFC EQU   IDAPLH+188
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHKEYPT EQU   IDAPLH+248
PLHTMRPL EQU   IDAPLH+265
PLHEND   EQU   IDAPLH+280
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDNEST  EQU   IDAAMDSB+4
AMDKEYLN EQU   IDAAMDSB+8
AMDCIPCA EQU   IDAAMDSB+12
AMDCINV  EQU   IDAAMDSB+20
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
AMDNCAS  EQU   AMDSTAT+40
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
BUFDBUFC EQU   IDABUFDR+12
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCER2  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCAMB  EQU   BUFCPLH
BUFCDDDD EQU   IDABUFC+8
BUFCORBA EQU   IDABUFC+12
BUFCBAD  EQU   IDABUFC+20
BUFCINV  EQU   IDABUFC+28
BUFXIRBA EQU   IDABUFC+40
BUFXORBA EQU   IDABUFC+44
BUFCHAIN EQU   IDABUFC+48
IDABSPH  EQU   0
BSPHFLG1 EQU   IDABSPH+1
BSPHBUFC EQU   IDABSPH+16
BSPHCSRC EQU   IDABSPH+28
BSPHFLG2 EQU   BSPHCSRC
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDHKRBA EQU   IDAARDB+8
ARDHRBA  EQU   IDAARDB+12
ARDERBA  EQU   IDAARDB+16
ARDPRF   EQU   IDAARDB+28
IDAIXH   EQU   0
IXHLL    EQU   IDAIXH
IXHFLPLN EQU   IDAIXH+2
IXHPTLS  EQU   IDAIXH+3
IXHBRBA  EQU   IDAIXH+4
IXHHP    EQU   IDAIXH+8
IXHFSO   EQU   IDAIXH+18
IXHLEO   EQU   IDAIXH+20
IXHSEO   EQU   IDAIXH+22
IDAIBFLP EQU   0
IBFLPF   EQU   IDAIBFLP
IBFLPL   EQU   IDAIBFLP+1
IBFLP3   EQU   IDAIBFLP+2
IBFLP2   EQU   IBFLP3
IDASELL  EQU   0
IXSELL   EQU   IDASELL
IDAIXK   EQU   0
IDAIXSPL EQU   0
IXSILN   EQU   IDAIXSPL+13
IXSBFLG  EQU   IDAIXSPL+17
IXSHEP   EQU   IDAIXSPL+20
IXSSEP   EQU   IDAIXSPL+24
IXSLEP   EQU   IDAIXSPL+28
IDAICWA  EQU   0
ICWFLG1  EQU   IDAICWA+1
ICWCHN   EQU   IDAICWA+4
ICWTBASE EQU   IDAICWA+28
ICWTPTR  EQU   IDAICWA+32
IDAIMWA  EQU   0
IMWFLAGS EQU   IDAIMWA+1
IDACIDF  EQU   0
CIDFLL   EQU   IDACIDF+2
IDARDF   EQU   0
RDFRBYTE EQU   IDARDF
RDFSEG   EQU   RDFRBYTE
RDFNOT1  EQU   RDFSEG
IDADATA  EQU   0
IDAKEY   EQU   0
ICWKEY2  EQU   0
ICWKEY3  EQU   0
PLHKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
DIWIHX   EQU   DIWSAVE2
DIWHPTLS EQU   DIWIHX
DIWFLPLN EQU   DIWIHX+1
CASRPRM1 EQU   PLHSAVE1
CASCURSS EQU   PLHSAVE2
CASPRVSS EQU   PLHSAVE3
CASSEGCT EQU   PLHSAVE4
CASDIFF  EQU   PLHSAVE5
CASSW    EQU   PLHSAVE6
CAS1ST   EQU   CASSW
CASIPSW  EQU   CASSW
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00053 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
KEY      EQU   IDAKEY
AMDATA   EQU   IDADATA
RDFLL    EQU   IDARDF+1
RDFEMPTY EQU   RDFRBYTE
RDFREPL  EQU   RDFRBYTE
RDF1ST   EQU   RDFSEG
RDFCTNU  EQU   RDFRBYTE
RDFTYPE  EQU   RDFRBYTE
@NM00064 EQU   CIDFLL
CIDFBUSY EQU   CIDFLL
CIDFOSET EQU   IDACIDF
IMWKEY1  EQU   IDAIMWA+76
@NM00063 EQU   IDAIMWA+72
IMWNSOFF EQU   IDAIMWA+70
IMWCIMVN EQU   IDAIMWA+68
@NM00062 EQU   IDAIMWA+67
IMWSVIEL EQU   IDAIMWA+66
IMWIEL   EQU   IDAIMWA+65
IMWFGAIN EQU   IDAIMWA+64
IMWBUFP  EQU   IDAIMWA+60
IMWLBUFC EQU   IDAIMWA+56
IMWIPTR  EQU   IDAIMWA+52
IMWXPTR  EQU   IDAIMWA+48
IMWIKEYP EQU   IDAIMWA+44
IMWXKEYP EQU   IDAIMWA+40
IMWISWKA EQU   IDAIMWA+8
IMWIXSP  EQU   IDAIMWA+4
IMWLEN   EQU   IDAIMWA+2
IMWBSE   EQU   IMWFLAGS
IMWRIPL  EQU   IMWFLAGS
IMWNEWHL EQU   IMWFLAGS
IMWID    EQU   IDAIMWA
ICWKEY1  EQU   IDAICWA+60
ICWCERP  EQU   IDAICWA+59
ICWCEL   EQU   IDAICWA+58
ICWCEF   EQU   IDAICWA+57
ICWCER   EQU   IDAICWA+56
ICWPTL   EQU   IDAICWA+55
ICWREQ   EQU   IDAICWA+54
ICWCRSEG EQU   IDAICWA+52
ICWNOSEG EQU   IDAICWA+50
ICWNEST  EQU   IDAICWA+48
ICWKEY3L EQU   IDAICWA+46
ICWKEY2L EQU   IDAICWA+44
ICWKEY1L EQU   IDAICWA+42
ICWLN    EQU   IDAICWA+40
ICWARDBP EQU   IDAICWA+36
ICWADD   EQU   IDAICWA+24
ICWSCNT  EQU   IDAICWA+22
ICWPSEO  EQU   IDAICWA+20
ICWPRBA  EQU   IDAICWA+16
ICWCRBA  EQU   IDAICWA+12
ICWBUFC  EQU   IDAICWA+8
ICWLEN   EQU   IDAICWA+2
ICWENDRQ EQU   ICWFLG1
ICWSPLIT EQU   ICWFLG1
ICWKRDS  EQU   ICWFLG1
ICWVNE   EQU   ICWFLG1
ICWVSE   EQU   ICWFLG1
ICWRBAOK EQU   ICWFLG1
ICWWAGM  EQU   ICWFLG1
ICWWNF   EQU   ICWFLG1
ICWID    EQU   IDAICWA
IXSPEC   EQU   IDAIXSPL+19
IXSEKON  EQU   IDAIXSPL+18
@NM00061 EQU   IXSBFLG
IXSLELV  EQU   IXSBFLG
IXSSSRH  EQU   IXSBFLG
IXSNOSR  EQU   IDAIXSPL+16
IXSKLEN  EQU   IDAIXSPL+14
IXSTLN   EQU   IDAIXSPL+12
IXSARG   EQU   IDAIXSPL+8
IXSBUFC  EQU   IDAIXSPL+4
IXSSTRBA EQU   IDAIXSPL
IXKEY    EQU   IDAIXK
IBFLP1   EQU   IBFLP2
IXHFLGS  EQU   IDAIXH+17
IXHLV    EQU   IDAIXH+16
IXHXX    EQU   IDAIXH+12
ARDKEYS  EQU   IDAARDB+29
@NM00060 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDNPTR  EQU   IDAARDB+4
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDEOD   EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
BSPH1ST  EQU   IDABSPH+60
BSPHUBTM EQU   IDABSPH+56
BSPHUTOP EQU   IDABSPH+52
BSPHNUIW EQU   IDABSPH+48
BSPHUIW  EQU   IDABSPH+44
BSPHFND  EQU   IDABSPH+40
BSPHRDS  EQU   IDABSPH+36
BSPHCPLH EQU   IDABSPH+32
BSPHPSUC EQU   BSPHCSRC+2
@NM00059 EQU   BSPHCSRC+1
BSPHPCUC EQU   BSPHFLG2
BSPHAPRT EQU   BSPHFLG2
BSPHBSZ  EQU   IDABSPH+24
BSPHMDBT EQU   IDABSPH+20
BSPHERCT EQU   IDABSPH+14
BSPHBFNO EQU   IDABSPH+12
BSPHNBSP EQU   IDABSPH+8
BSPHNM   EQU   IDABSPH+4
BSPHLEN  EQU   IDABSPH+2
BSPHBFRF EQU   BSPHFLG1
BSPHIOBF EQU   BSPHFLG1
BSPHID   EQU   IDABSPH
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCNXT2 EQU   IDABUFC+37
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCCPA  EQU   IDABUFC+16
@NM00058 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00057 EQU   IDABUFDR+16
@NM00056 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
AMDEXCP  EQU   AMDSTAT+44
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00055 EQU   IDAAMDSB+41
@NM00054 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00052 EQU   IDAPLH+266
@NM00051 EQU   PLHTMRPL
PLHTMIOB EQU   PLHTMRPL
PLHTMINX EQU   PLHTMRPL
PLHTMDTA EQU   PLHTMRPL
PLHTMDIW EQU   PLHTMRPL
PLHTMBUF EQU   PLHTMRPL
PLHTERM  EQU   PLHTMRPL
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00050 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHRBUFC EQU   IDAPLH+192
PLHNRBA  EQU   IDAPLH+184
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00049 EQU   IDAPLH+172
@NM00048 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHAMB   EQU   IDAPLH+108
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHNBUFC EQU   IDAPLH+56
PLHLRECL EQU   IDAPLH+48
@NM00047 EQU   PLHRSCS
PLHDBPER EQU   PLHRSCS
PLHDSERR EQU   PLHRSCS
PLHASYER EQU   PLHRSCS
@NM00046 EQU   PLHRSCS
PLHBUFHD EQU   PLHRSCS
PLHINEOV EQU   PLHRSCS
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00045 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
@NM00044 EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
@NM00043 EQU   IDADIWA+92
@NM00042 EQU   IDADIWA+88
@NM00041 EQU   IDADIWA+84
@NM00040 EQU   IDADIWA+80
@NM00039 EQU   IDADIWA+76
@NM00038 EQU   IDADIWA+72
@NM00037 EQU   IDADIWA+68
@NM00036 EQU   IDADIWA+64
@NM00035 EQU   IDADIWA+60
@NM00034 EQU   IDADIWA+56
DIWRKCT  EQU   IDADIWA+48
DIWSAVE5 EQU   DIWSAVE+16
DIWSPLTP EQU   IDADIWA+24
DIWBUFC  EQU   IDADIWA+20
DIWPLH   EQU   IDADIWA+16
@NM00033 EQU   IDADIWA+6
DIWFSPF  EQU   DIWFLG2
DIW1ST   EQU   DIWFLG1
DIWNOT1  EQU   DIWFLG1
DIWGSPC  EQU   DIWFLG1
DIWEOKR  EQU   DIWFLG1
DIWPFERR EQU   DIWFLG1
DIWCISPL EQU   DIWFLG1
DIWLEN   EQU   IDADIWA+2
DIWATV   EQU   IDADIWA+1
DIWID    EQU   IDADIWA
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00032 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00031 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00030 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00029 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00028 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00027 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00026 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00025 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00024 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00023 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00022 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00021 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00020 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00019 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00018 EQU   IDAAMBL+31
@NM00017 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00016 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00015 EQU   AMBCSWD1+1
@NM00014 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
@NM00013 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00012 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00011 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00010 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBUPX   EQU   AMBINFL
@NM00009 EQU   AMBINFL
@NM00008 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00007 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00006 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00005 EQU   AMBDSORG
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00004 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00003 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
@NM00002 EQU   RPLRBAR+3
@NM00001 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00303 EQU   RFEXITA1
@RF00344 EQU   @RC00341
@RT00366 EQU   BKUPIX
@RT00450 EQU   CASPLERR
@RT00476 EQU   CASPLERR
@RT00502 EQU   CASPLERR
@RT00520 EQU   CASPLERR
@RT00538 EQU   CASPLERR
@RT00604 EQU   CASPLERR
@RT00629 EQU   CASPLERR
@RT00643 EQU   CASPLERR
@RT00674 EQU   CASPLERR
@RT00691 EQU   CASPLERR
@RT00752 EQU   CASPLERR
@RT00775 EQU   RFEXITA1
@RC00758 EQU   @RC00756
@RC00857 EQU   @EL00002
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IDA019RF,(C'PLS1634',0701,78209)
