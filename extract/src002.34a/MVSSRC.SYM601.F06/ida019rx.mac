         TITLE 'IDA019RX - PATH ACCESS DRIVER                          *
                        '
IDA019RX CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'IDA019RX  78.180'                                 0001
IDARXBD  DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00816-IDARXBD)
         ENTRY IDARXBD
IDAGETWS DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00835-IDAGETWS)
         ENTRY IDAGETWS
IDARELWS DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP01137-IDARELWS)
         ENTRY IDARELWS
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  LA    @10,4095(,@11)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@10                                    0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
*                                                                  0177
*/********************************************************************/
*/* ENTER MODULE                                                     */
*/********************************************************************/
*                                                                  0178
*   IF RWORK0^=RPLENDRE&            /* IF NOT ENDREQ                 */
*       ((RPLSEQ=OFF&RPLSKP=OFF&RPLDIR=OFF)×/* IF ALL OFF            */
*       (RPLSEQ=ON&RPLSKP=ON)×      /* IF TWO ON                     */
*       (RPLSKP=ON&RPLDIR=ON)×      /* IF TWO ON                     */
*       (RPLDIR=ON&RPLSEQ=ON)) THEN /* IF TWO ON                     */
         CL    RWORK0,@CF00068                                     0178
         BE    @RF00178                                            0178
         TM    RPLSEQ(RRPL),B'01110000'                            0178
         BZ    @RT00178                                            0178
         TM    RPLSEQ(RRPL),B'00110000'                            0178
         BO    @RT00178                                            0178
         TM    RPLSKP(RRPL),B'01010000'                            0178
         BO    @RT00178                                            0178
         TM    RPLDIR(RRPL),B'01100000'                            0178
         BNO   @RF00178                                            0178
@RT00178 DS    0H                                                  0179
*     DO;                                                          0179
*       RPLERREG='08'X;             /* LOGICAL ERROR                 */
         LA    @08,8                                               0180
         STC   @08,RPLERREG(,RRPL)                                 0180
*       RPLCMPON=RPLAIXER;          /* DETECTED IN AIX PROC          */
         MVI   RPLCMPON(RRPL),X'02'                                0181
*       RPLERRCD=RPLINVP;           /* INVALID PROCESS               */
         MVI   RPLERRCD(RRPL),X'68'                                0182
*       RETURN CODE(RPLERREG);      /* EXIT MODULE                   */
         LR    @15,@08                                             0183
@EL00001 DS    0H                                                  0183
@EF00001 DS    0H                                                  0183
@ER00001 BR    @14                                                 0183
*     END;                                                         0184
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
@RF00178 DS    0H                                                  0185
         IDASVR14
*   IF(AMBLSR=ON×AMBGSR=ON)&        /* IF ANY SHARED RESOURCES       */
*       PLHWAX=0 THEN               /* NEED TO BUILD WAX             */
         TM    AMBLSR(RAMB),B'01100000'                            0186
         BZ    @RF00186                                            0186
         L     @08,PLHWAX(,RPLH)                                   0186
         LTR   @08,@08                                             0186
         BNZ   @RF00186                                            0186
*     DO;                                                          0187
*       IF RWORK0=RPLENDRE THEN     /* IF ENDREQ REQUEST             */
         CL    RWORK0,@CF00068                                     0188
         BNE   @RF00188                                            0188
*         DO;                       /*                       @ZA19553*/
*           GEN(IDARST14);          /* RESTORE RETURN ADDR   @ZA19553*/
         IDARST14
*           RETURN CODE(RPLERREG);  /* NOTHING TO BE DONE    @ZA19553*/
         SLR   @15,@15                                             0191
         IC    @15,RPLERREG(,RRPL)                                 0191
         BR    @14                                                 0191
*         END;                      /*                       @ZA19553*/
*                                                                  0192
*       /*************************************************************/
*       /*                                                           */
*       /* BUILD WAX AND INNER RPL FOR LSR OR GSR                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0193
*       RWORK5=LENGTH(IDAWAX)+LENGTH(IFGRPL);                      0193
@RF00188 LA    RWORK5,120                                          0193
*       RWORK1=RWORK5;              /* COPY LENGTH FOR IDAGETWS      */
         LR    RWORK1,RWORK5                                       0194
*       RESPECIFY                                                  0195
*         R15 RESTRICTED;                                          0195
*       CALL GETWS;                 /* GET CORE FOR WAX & INNER RPL  */
         BAL   @14,GETWS                                           0196
*       IF R15^=0 THEN              /* IF NO CORE                    */
         LTR   R15,R15                                             0197
         BZ    @RF00197                                            0197
*         DO;                                                      0198
*           IF RPLERRCD=0 THEN      /* IF NO ERROR CODE              */
         CLI   RPLERRCD(RRPL),0                                    0199
         BNE   @RF00199                                            0199
*             DO;                                                  0200
*               RPLERRCD=RPLNOVRT;  /* ERROR CODE FOR NO CORE        */
         MVI   RPLERRCD(RRPL),X'28'                                0201
*               RPLERREG='08'X;     /* RETURN CODE FOR LOGICAL ERROR */
         MVI   RPLERREG(RRPL),X'08'                                0202
*             END;                                                 0203
*           RPLCMPON=RPLAIXER;      /* ERROR WHILE PROCESSING AIX    */
@RF00199 MVI   RPLCMPON(RRPL),X'02'                                0204
*           GEN(IDARST14);          /* RELOAD RETURN REGISTER        */
         IDARST14
*           RETURN CODE(RPLERREG);  /* TAKE EXIT WITH ERROR          */
         SLR   @15,@15                                             0206
         IC    @15,RPLERREG(,RRPL)                                 0206
         BR    @14                                                 0206
*         END;                                                     0207
*       RESPECIFY                                                  0208
*         R15 UNRESTRICTED;                                        0208
@RF00197 DS    0H                                                  0209
*       CORE(1:RWORK5)=CORE(1:RWORK5)&&CORE(1:RWORK5);/* ZERO CORE   */
         LR    @08,RWORK5                                          0209
         BCTR  @08,0                                               0209
         EX    @08,@SX01299                                        0209
*       RWORK5=RWORK1+LENGTH(IFGRPL);/* POINT TO IDAWAX              */
         LA    RWORK5,76                                           0210
         ALR   RWORK5,RWORK1                                       0210
*       PLHWAX=RWORK5;              /* SET PTR TO WAX IN PLH         */
         ST    RWORK5,PLHWAX(,RPLH)                                0211
*       WAXIRPL=RWORK1;             /* SET PTR TO INNER RPL IN WAX   */
         ST    RWORK1,WAXIRPL(,RWORK5)                             0212
*       RWORK0=RPLREQ;              /* RESTORE REGISTER 0            */
         SLR   RWORK0,RWORK0                                       0213
         IC    RWORK0,RPLREQ(,RRPL)                                0213
*     END;                                                         0214
*   ELSE                            /* IF NOT SHARED RESOURCES       */
*     DO;                                                          0215
         B     @RC00186                                            0215
@RF00186 DS    0H                                                  0216
*       RWORK5=PLHWAX;              /* LOAD BASE FOR WAX             */
         L     RWORK5,PLHWAX(,RPLH)                                0216
*       RWORK1=WAXIRPL;             /* LOAD PTR TO INNER RPL         */
         L     RWORK1,WAXIRPL(,RWORK5)                             0217
*     END;                                                         0218
*   WAXURPL=ADDR(IFGRPL);           /* SAVE ADDR OF USER'S RPL       */
@RC00186 ST    RRPL,WAXURPL(,RWORK5)                               0219
*   PLHCRPL=RWORK1;                 /* CURRENT RPL IS INNER RPL      */
         ST    RWORK1,PLHCRPL(,RPLH)                               0220
*   IF RWORK0^=RPLENDRE THEN        /* IF NOT ENDREQ         @ZA29260*/
         CL    RWORK0,@CF00068                                     0221
         BE    @RF00221                                            0221
*     DO;                           /*                       @ZA29260*/
*       RWORK1->IFGRPL=RWORK1->IFGRPL&&RWORK1->IFGRPL;/* ZERO INNER
*                                      RPL                           */
         XC    IFGRPL(76,RWORK1),IFGRPL(RWORK1)                    0223
*       RWORK1->RPLLEN=LENGTH(IFGRPL);/* SET RPL LENGTH              */
         MVI   RPLLEN(RWORK1),X'4C'                                0224
*     END;                          /*                       @ZA29260*/
*   IF RWORK0=RPLENDRE×             /* IF ENDREQ REQUEST, SKIP TEST  */
*       (RPLKEY=ON&                 /* IF RPL IS FOR KEY PROCESSING  */
*       RPLADR=OFF&                 /* IF ADR PROC NO ON             */
*       RPLCNV=OFF) THEN            /* IF CNV BIT IS OFF             */
@RF00221 CL    RWORK0,@CF00068                                     0226
         BE    @RT00226                                            0226
         TM    RPLKEY(RRPL),B'10000000'                            0226
         BNO   @RF00226                                            0226
         TM    RPLADR(RRPL),B'01100000'                            0226
         BNZ   @RF00226                                            0226
@RT00226 DS    0H                                                  0227
*     DO;                                                          0227
*                                                                  0227
*       /*************************************************************/
*       /*                                                           */
*       /* BRANCH VIA BRANCH TABLE                                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0228
*       CALL AIXROUT;               /* EXECUTE BRANCH TABLE          */
         LR    @08,RWORK0                                          0228
         SLL   @08,2                                               0228
         L     @15,BRANCH(@08)                                     0228
         BALR  @14,@15                                             0228
*       RESPECIFY                                                  0229
*         RWORK0 RESTRICTED;                                       0229
         EJECT
*AIXNOP:                                                           0230
*                                                                  0230
*       /*************************************************************/
*       /*                                                           */
*       /* DO EXIT PROCESSING                                        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0230
*       IF RPLFDBWD=0&              /* IF NO FEEDBACK IN USER RPL    */
*           RWORK1->RPLFDBWD^=0 THEN/* IF ANY FEEDBACK IN INNER RPL  */
AIXNOP   SLR   @08,@08                                             0230
         C     @08,RPLFDBWD(,RRPL)                                 0230
         BNE   @RF00230                                            0230
         C     @08,RPLFDBWD(,RWORK1)                               0230
         BE    @RF00230                                            0230
*         DO;                                                      0231
*           RPLERRCD=RWORK1->RPLERRCD;/* COPY ERROR CODE FROM IRPL   */
         IC    @08,RPLERRCD(,RWORK1)                               0232
         STC   @08,RPLERRCD(,RRPL)                                 0232
*           RPLERREG=RWORK1->RPLERREG;/* COPY RETURN CODE FROM IRPL  */
         IC    @08,RPLERREG(,RWORK1)                               0233
         STC   @08,RPLERREG(,RRPL)                                 0233
*           RPLDDDD=RWORK1->RPLDDDD;/* RBA FROM IRPL         @ZA17187*/
         L     @08,RPLDDDD(,RWORK1)                                0234
         ST    @08,RPLDDDD(,RRPL)                                  0234
*         END;                                                     0235
*       IF RPLFDBWD^=0&             /* IF ANY ERROR                  */
*           RPLCMPON=0 THEN         /* IF NO CMPON SET AS YET        */
@RF00230 L     @08,RPLFDBWD(,RRPL)                                 0236
         LTR   @08,@08                                             0236
         BZ    @RF00236                                            0236
         CLI   RPLCMPON(RRPL),0                                    0236
         BNE   @RF00236                                            0236
*         DO;                                                      0237
*           IF RWORK1->RPLCMPON^=0 THEN/* IF CMPON SET IN INNER RPL  */
         CLI   RPLCMPON(RWORK1),0                                  0238
         BE    @RF00238                                            0238
*             RPLCMPON=RWORK1->RPLCMPON;/* COPY FROM INNER RPL       */
         IC    @08,RPLCMPON(,RWORK1)                               0239
         STC   @08,RPLCMPON(,RRPL)                                 0239
*           ELSE                    /* IN CMPON NOT SET IN INNER RPL */
*             IF(RPLERRCD=>RPLNOPLH&/* IF ERROR CODE => '40'X        */
*                 RPLERRCD<=RPLINLRQ)×/* IF ERROR CODE <= '74'X      */
*                 RWORK1->RPLDACB=ADDR(IFGACB) THEN/* IF IRPL PTS TO
*                                      AIX                           */
         B     @RC00238                                            0240
@RF00238 CLI   RPLERRCD(RRPL),64                                   0240
         BL    @GL00009                                            0240
         CLI   RPLERRCD(RRPL),116                                  0240
         BNH   @RT00240                                            0240
@GL00009 CLC   RPLDACB(4,RWORK1),RPLDACB(RRPL)                     0240
         BNE   @RF00240                                            0240
@RT00240 DS    0H                                                  0241
*               RPLCMPON=RPLAIXER;  /* FAILURE WHEN PROCESSING AIX   */
         MVI   RPLCMPON(RRPL),X'02'                                0241
*         END;                                                     0242
@RF00240 DS    0H                                                  0242
@RC00238 DS    0H                                                  0243
*       IF RPLERREG=0 THEN          /* IF NO ERRORS                  */
@RF00236 CLI   RPLERREG(RRPL),0                                    0243
         BNE   @RF00243                                            0243
*         DO;                                                      0244
*           IF RWORK1->RPLRLEN^=0 THEN/* IF RCD LENGTH RETURNED      */
         L     @08,RPLRLEN(,RWORK1)                                0245
         LTR   @08,@08                                             0245
         BZ    @RF00245                                            0245
*             RPLRLEN=RWORK1->RPLRLEN;/* COPY RCD LENGTH TO USER     */
         ST    @08,RPLRLEN(,RRPL)                                  0246
*           IF RPLREQ=RPLGET&       /* IF GET REQUEST                */
*               WAXXPTR+WAXPL<WAXEPTR THEN/* IF USER NOT GETTING LAST
*                                      BASE RCD FROM CURRENT AIX KEY */
@RF00245 CLI   RPLREQ(RRPL),0                                      0247
         BNE   @RF00247                                            0247
         LH    @08,WAXPL(,RWORK5)                                  0247
         AL    @08,WAXXPTR(,RWORK5)                                0247
         C     @08,WAXEPTR(,RWORK5)                                0247
         BNL   @RF00247                                            0247
*             DO;                                                  0248
*               RPLERRCD=RPLMOKEY;  /* INDICATE MORE KEYS            */
         MVI   RPLERRCD(RRPL),X'08'                                0249
*               RPLCMPON=RPLAIXER;  /* INDICATE PROCESSING AIX       */
         MVI   RPLCMPON(RRPL),X'02'                                0250
*             END;                                                 0251
*           IF WAXRCDA^=0 THEN      /* IF RECORD PTR EXISTS          */
@RF00247 L     @08,WAXRCDA(,RWORK5)                                0252
         LTR   @08,@08                                             0252
         BZ    @RF00252                                            0252
*             DO;                                                  0253
*               RPLAIXPC=WAXRCDA->AIXPC;/* COPY PTR COUNT            */
         LH    @15,AIXPC(,@08)                                     0254
         STH   @15,RPLAIXPC(,RRPL)                                 0254
*               IF WAXRCDA->AIXPKP=ON THEN/* IF PRIME KEY PTRS       */
         TM    AIXPKP(@08),B'00000001'                             0255
         BNO   @RF00255                                            0255
*                 RPLAXPKP=ON;      /* SET INDIC IN RPL              */
         OI    RPLAXPKP(RRPL),B'10000000'                          0256
*               ELSE                /* IF NOT PRIME KEY PTRS         */
*                 RPLAXPKP=OFF;     /* RESET INDIC IN RPL            */
         B     @RC00255                                            0257
@RF00255 NI    RPLAXPKP(RRPL),B'01111111'                          0257
*             END;                                                 0258
@RC00255 DS    0H                                                  0259
*         END;                                                     0259
@RF00252 DS    0H                                                  0260
*       IF RPLERREG^=0&             /* IF ANY ERROR                  */
*           PLHINVAL=OFF THEN       /* POSITION STILL VALID          */
@RF00243 CLI   RPLERREG(RRPL),0                                    0260
         BE    @RF00260                                            0260
         TM    PLHINVAL(RPLH),B'00000010'                          0260
         BNZ   @RF00260                                            0260
*         CALL DISPOS;              /* CHECK FOR VALID POSITION      */
         BAL   @14,DISPOS                                          0261
*       IF PLHINVAL=ON THEN         /* IF PLH POSITION IS INVALID    */
@RF00260 TM    PLHINVAL(RPLH),B'00000010'                          0262
         BNO   @RF00262                                            0262
*         DO;                                                      0263
*           IF WAXSRAB=ON THEN      /* IF SRA EXISTS                 */
         TM    WAXSRAB(RWORK5),B'10000000'                         0264
         BNO   @RF00264                                            0264
*             CALL RELSRA;          /* RELEASE SRA WORK AREA         */
         BAL   @14,RELSRA                                          0265
*           CALL RELBASE;           /* RELEASE BASE PLH              */
@RF00264 BAL   @14,RELBASE                                         0266
*           IF AMBLSR=ON×AMBGSR=ON THEN/* IF ANY RES SHRING          */
         TM    AMBLSR(RAMB),B'01100000'                            0267
         BZ    @RF00267                                            0267
*             DO;                                                  0268
*               RESPECIFY                                          0269
*                 RWORK2 RESTRICTED;                               0269
*               RWORK2=LENGTH(IFGRPL)+LENGTH(IDAWAX);/* LOAD LENGTH
*                                      AREA TO RELEASE               */
         LA    RWORK2,120                                          0270
*               CALL RELWS;         /* RELEASE INNER RPL AND WAX     */
         BAL   @14,RELWS                                           0271
*               RESPECIFY                                          0272
*                 RWORK2 UNRESTRICTED;                             0272
*               PLHWAX=0;           /* ZERO WAX PTR                  */
         SLR   @08,@08                                             0273
         ST    @08,PLHWAX(,RPLH)                                   0273
*             END;                                                 0274
*           ELSE                    /* IF NO SHRING                  */
*             DO;                                                  0275
         B     @RC00267                                            0275
@RF00267 DS    0H                                                  0276
*               WAXXPTR=0;          /* ZERO RCD PTR TO FORCE READ    */
         SLR   @08,@08                                             0276
         ST    @08,WAXXPTR(,RWORK5)                                0276
*               WAXPS=OFF;          /* MAKE PUT POSITION INVALID     */
         NI    WAXPS(RWORK5),B'11011111'                           0277
*             END;                                                 0278
*         END;                                                     0279
*       ELSE                        /* IF PLHINVAL OFF       @ZA10591*/
*         IF RPLERREG^=0 THEN       /* IF ERROR W/ NO INVAL  @ZA10591*/
         B     @RC00262                                            0280
@RF00262 CLI   RPLERREG(RRPL),0                                    0280
         BE    @RF00280                                            0280
*           WAXNOADV=ON;            /* DONT ADVANCE WAX      @ZA10591*/
         OI    WAXNOADV(RWORK5),B'00010000'                        0281
*     END;                                                         0282
*   ELSE                            /* USER HAS SPEC INVALID ACCESS  */
*     DO;                                                          0283
         B     @RC00226                                            0283
@RF00226 DS    0H                                                  0284
*       RPLERRCD=RPLPAACI;          /* SET ERROR CODE FOR INVALID ACC*/
         MVI   RPLERRCD(RRPL),X'C8'                                0284
*       RPLERREG='08'X;             /* SET ERROR REGISTER            */
         MVI   RPLERREG(RRPL),X'08'                                0285
*       RPLCMPON=RPLAIXER;          /* SET ERROR PROCESSING AIX      */
         MVI   RPLCMPON(RRPL),X'02'                                0286
*     END;                                                         0287
*   PLHCRPL=RRPL;                   /* CURRENT RPL IS USER RPL       */
@RC00226 ST    RRPL,PLHCRPL(,RPLH)                                 0288
*   GEN(IDARST14);                  /* RESTORE RETURN REGISTER       */
         IDARST14
*   RETURN CODE(RPLERREG);          /* EXIT FROM IDA019RX            */
         SLR   @15,@15                                             0290
         IC    @15,RPLERREG(,RRPL)                                 0290
         BR    @14                                                 0290
*/********************************************************************/
*/* EXIT MODULE                                                      */
*/********************************************************************/
*                                                                  0291
         EJECT
*DISPOS:                                                           0291
*                                                                  0291
*/********************************************************************/
*/* THIS PROCEEDURE IS CALLED AFTER AN ERROR TO SEE IF THE PLH       */
*/*         POSITION IS VALID                                        */
*/********************************************************************/
*                                                                  0291
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0291
DISPOS   DS    0H                                                  0292
*   RESPECIFY                                                      0292
*     R14 RESTRICTED;                                              0292
*   IF(RPLERREG='08'X&              /* IF LOGICAL ERROR              */
*       (RPLERRCD=RPLNOREC×         /* NO RECORD FOUND               */
*       RPLERRCD=RPLNOMNT×          /* UNABLE TO MOUNT VOLUME        */
*       RPLERRCD=RPLNOEXT×          /* UNABLE TO EXTEND DATA SET     */
*       RPLERRCD=RPLNOVRT×          /* NOT ENOUGH CORE               */
*       (RPLDIR=ON&                 /* IF DIRECT REQUEST AND         */
*       (RPLERRCD=RPLEXCL×          /* EXCLUSIVE CONTROL ERROR       */
*       RPLERRCD=RPLNOKR×           /* KEY RANGE PROBLEM             */
*       RPLERRCD=RPLDUP×            /* DUPLICATE KEY                 */
*       RPLERRCD=RPLINBUF))))×      /* BUFFER SIZE TOO SMALL         */
*       (RPLERREG='0C'X&            /* IF PHYSICAL ERROR             */
*       (RPLERRCD=RPLRDERI×         /* READ ERROR WITH INDEX         */
*       (RPLREQ=RPLGET&             /* GET REQUEST                   */
*       RPLSEQ=OFF))) THEN          /* NOT SEQUENTIAL                */
         CLI   RPLERREG(RRPL),8                                    0293
         BNE   @GL00013                                            0293
         CLI   RPLERRCD(RRPL),16                                   0293
         BE    @RT00293                                            0293
         CLI   RPLERRCD(RRPL),24                                   0293
         BE    @RT00293                                            0293
         CLI   RPLERRCD(RRPL),28                                   0293
         BE    @RT00293                                            0293
         CLI   RPLERRCD(RRPL),40                                   0293
         BE    @RT00293                                            0293
         TM    RPLDIR(RRPL),B'01000000'                            0293
         BNO   @GL00013                                            0293
         CLI   RPLERRCD(RRPL),20                                   0293
         BE    @RT00293                                            0293
         CLI   RPLERRCD(RRPL),36                                   0293
         BE    @RT00293                                            0293
         CLI   RPLERRCD(RRPL),8                                    0293
         BE    @RT00293                                            0293
         CLI   RPLERRCD(RRPL),44                                   0293
         BE    @RT00293                                            0293
@GL00013 CLI   RPLERREG(RRPL),12                                   0293
         BNE   @RF00293                                            0293
         CLI   RPLERRCD(RRPL),8                                    0293
         BE    @RT00293                                            0293
         CLI   RPLREQ(RRPL),0                                      0293
         BNE   @RF00293                                            0293
         TM    RPLSEQ(RRPL),B'00100000'                            0293
         BNZ   @RF00293                                            0293
@RT00293 DS    0H                                                  0294
*     PLHINVAL=ON;                  /* POSITION IS INVALID           */
         OI    PLHINVAL(RPLH),B'00000010'                          0294
*   RESPECIFY                                                      0295
*     R14 UNRESTRICTED;                                            0295
*   END DISPOS;                                                    0296
@EL00002 DS    0H                                                  0296
@EF00002 DS    0H                                                  0296
@ER00002 BR    @14                                                 0296
         EJECT
*AIXGET:                                                           0297
*                                                                  0297
*/********************************************************************/
*/* THIS ROUTINE PROCESSES AN PATH READ.  IF NO POSITIONING EXISTS   */
*/* IN THE PLH, GETXRCD IS CALLED.  IDA019R4 IS CALLED TO READ THE   */
*/* BASE RECORD WHICH IS POINTED TO BY WAXXPTR.                      */
*/********************************************************************/
*                                                                  0297
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0297
AIXGET   DS    0H                                                  0298
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
         IDASVR14
*   IF WAXPS=ON THEN                /* IF LAST OPERATION WAS PUT SEQ */
         TM    WAXPS(RWORK5),B'00100000'                           0299
         BNO   @RF00299                                            0299
*     DO;                                                          0300
*       IF RPLSEQ=ON THEN           /* IF THIS GET IS SEQ            */
         TM    RPLSEQ(RRPL),B'00100000'                            0301
         BNO   @RF00301                                            0301
*         CALL REPOSG;              /* REPOSITION FOR GET            */
         BAL   @14,REPOSG                                          0302
*       ELSE                        /* IF NOT GET SEQ                */
*         WAXPS=OFF;                /* RESET BIT                     */
         B     @RC00301                                            0303
@RF00301 NI    WAXPS(RWORK5),B'11011111'                           0303
*     END;                                                         0304
@RC00301 DS    0H                                                  0305
*   IF WAXXPTR^=0&                  /* IF NOT FIRST REQUEST FOR PLH  */
*       RPLSEQ=ON THEN              /* IF USER REQUESTED SEQ PROC    */
@RF00299 L     @08,WAXXPTR(,RWORK5)                                0305
         LTR   @08,@08                                             0305
         BZ    @RF00305                                            0305
         TM    RPLSEQ(RRPL),B'00100000'                            0305
         BNO   @RF00305                                            0305
*     DO;                                                          0306
*       IF WAXNOADV=OFF THEN        /* IF NOADVANCE OFF      @ZA10591*/
         TM    WAXNOADV(RWORK5),B'00010000'                        0307
         BNZ   @RF00307                                            0307
*         DO;                       /* ADVANCE WAX           @ZA10591*/
*           WAXXPTR=WAXXPTR+WAXPL;  /* POINT TO NEXT POINTER         */
         AH    @08,WAXPL(,RWORK5)                                  0309
         ST    @08,WAXXPTR(,RWORK5)                                0309
*           IF WAXXPTR=>WAXEPTR THEN/* IF POINTING OUT OF RECORD     */
         C     @08,WAXEPTR(,RWORK5)                                0310
         BL    @RF00310                                            0310
*             CALL GETXRCD;         /* READ NEXT SEQ AIX RECORD      */
         BAL   @14,GETXRCD                                         0311
*         END;                      /*                       @ZA10591*/
*     END;                                                         0313
*   ELSE                            /* IF USER REQUESTED DIRECT      */
*     CALL GETXRCD;                 /* GET AIX RECORD                */
         B     @RC00305                                            0314
@RF00305 BAL   @14,GETXRCD                                         0314
*   WAXNOADV=OFF;                   /* RESET FOR NEXT TIME   @ZA10591*/
@RC00305 NI    WAXNOADV(RWORK5),B'11101111'                        0315
*   IF RWORK1->RPLERREG=0 THEN      /* IF NO ERROR                   */
         CLI   RPLERREG(RWORK1),0                                  0316
         BNE   @RF00316                                            0316
*     DO;                                                          0317
*       RWORK1->RPLDACB=AMBLXPT->AMBLACB;/* POINT TO BASE ACB        */
         L     @08,AMBLXPT(,RPARM1)                                0318
         L     @08,AMBLACB(,@08)                                   0318
         ST    @08,RPLDACB(,RWORK1)                                0318
*       CALL LOADREGS;              /* LOAD REGISTERS FOR IDA019R4   */
         BAL   @14,LOADREGS                                        0319
*       IF RWORK1->RPLERREG=0 THEN  /* IF NO ERROR                   */
         CLI   RPLERREG(RWORK1),0                                  0320
         BNE   @RF00320                                            0320
*         DO;                                                      0321
*           CALL SETIRPL;           /* SET UP INNER RPL              */
         BAL   @14,SETIRPL                                         0322
*           CALL CALLR4;            /* EXIT TO IDA019R4              */
         BAL   @14,CALLR4                                          0323
*           RESPECIFY                                              0324
*             RWORK2 RESTRICTED;                                   0324
*           RESPECIFY                                              0325
*             ALTKEY BASED(RWORK2);                                0325
*           IF RWORK1->RPLLOC=ON THEN/* IF LOCATE MODE               */
         TM    RPLLOC(RWORK1),B'10000000'                          0326
         BNO   @RF00326                                            0326
*             RWORK2=RWORK1->RPLAREA;/* POINT TO POINTER             */
         L     RWORK2,RPLAREA(,RWORK1)                             0327
*           ELSE                    /* IF MOVE MODE                  */
*             RWORK2=ADDR(RWORK1->RPLAREA);/* POINT TO POINTER       */
         B     @RC00326                                            0328
@RF00326 LA    RWORK2,RPLAREA(,RWORK1)                             0328
*           RWORK2=RWORK2->PTR31+AMDAXRKP;/* POINT TO AIX KEY IN BASE*/
@RC00326 L     @08,AMBDSB(,RAMB)                                   0329
         LH    @07,AMDAXRKP(,@08)                                  0329
         AL    @07,PTR31(,RWORK2)                                  0329
         LR    RWORK2,@07                                          0329
*           IF RWORK1->RPLERRCD=RPLNOREC×/* IF BASE RCD NOT FOUND    */
*               (RWORK1->RPLERREG=0&/* IF NO ERROR                   */
*               PLHKEY(1:AMDKEYLN)^=ALTKEY(1:AMDKEYLN)) THEN/* IF ALT
*                                      KEY CHANGED IN BASE           */
         CLI   RPLERRCD(RWORK1),16                                 0330
         BE    @RT00330                                            0330
         CLI   RPLERREG(RWORK1),0                                  0330
         BNE   @RF00330                                            0330
         L     @07,PLHKEYPT(,RPLH)                                 0330
         LH    @08,AMDKEYLN(,@08)                                  0330
         BCTR  @08,0                                               0330
         EX    @08,@SC01305                                        0330
         BE    @RF00330                                            0330
@RT00330 DS    0H                                                  0331
*             DO;                                                  0331
*               RPLERRCD=RPLNBRCD;  /* NO BASE RECORD                */
         MVI   RPLERRCD(RRPL),X'90'                                0332
*               RPLERREG='08'X;     /* SET LOGICAL ERROR             */
         MVI   RPLERREG(RRPL),X'08'                                0333
*               RPLCMPON=RPLAIXER;  /* ERROR WITH AIX                */
         MVI   RPLCMPON(RRPL),X'02'                                0334
*               IF RPLDIR=ON THEN   /* IF DRIECT REQUEST             */
         TM    RPLDIR(RRPL),B'01000000'                            0335
         BNO   @RF00335                                            0335
*                 PLHINVAL=ON;      /* PLH POSITION INVALID          */
         OI    PLHINVAL(RPLH),B'00000010'                          0336
*             END;                                                 0337
@RF00335 DS    0H                                                  0338
*           RESPECIFY                                              0338
*             RWORK2 UNRESTRICTED;                                 0338
@RF00330 DS    0H                                                  0339
*           IF RWORK1->RPLERREG=0&  /* IF NO ERROR                   */
*               RPLDIR=ON&          /* IF USER REQUESTED DIR         */
*               (RPLLOC=OFF&        /* USER DIDNT REQ LOCATE         */
*               RPLNSP=OFF&         /* USER DIDNT REQ NSP            */
*               RPLUPD=OFF) THEN    /* USER DIDNT REQ UPDATE         */
         CLI   RPLERREG(RWORK1),0                                  0339
         BNE   @RF00339                                            0339
         TM    RPLDIR(RRPL),B'01000000'                            0339
         BNO   @RF00339                                            0339
         TM    RPLLOC(RRPL),B'10000000'                            0339
         BNZ   @RF00339                                            0339
         TM    RPLNSP(RRPL),B'00000011'                            0339
         BNZ   @RF00339                                            0339
*             PLHINVAL=ON;          /* MAKE PLH INVAL TO CAUSE ENDREQ*/
         OI    PLHINVAL(RPLH),B'00000010'                          0340
*         END;                                                     0341
@RF00339 DS    0H                                                  0342
*     END;                                                         0342
@RF00320 DS    0H                                                  0343
*   GEN(IDARST14);                  /* RESTORE RETURN REGISTER       */
@RF00316 DS    0H                                                  0343
         IDARST14
*   END AIXGET;                                                    0344
@EL00003 DS    0H                                                  0344
@EF00003 DS    0H                                                  0344
@ER00003 BR    @14                                                 0344
         EJECT
*AIXPUT:                                                           0345
*                                                                  0345
*/********************************************************************/
*/* THIS ROUTINE PROCESSES PATH PUTS -                               */
*/********************************************************************/
*                                                                  0345
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0345
AIXPUT   DS    0H                                                  0346
*   RESPECIFY                                                      0346
*     R14 RESTRICTED;                                              0346
*   RESPECIFY                                                      0347
*     ALTKEY BASED(RPLAREA+AMDAXRKP);                              0347
*   IF RPLUPD=ON&                   /* IF PUT UPDATE                 */
*       (WAXBPLH=0×                 /* IF NO BASE PLH EXISTS         */
*       PLHKEY(1:AMDKEYLN)^=ALTKEY(1:AMDKEYLN)) THEN/* IF USER     0348
*                                      CHANGED ALT KEY               */
         TM    RPLUPD(RRPL),B'00000010'                            0348
         BNO   @RF00348                                            0348
         L     @15,WAXBPLH(,RWORK5)                                0348
         LTR   @15,@15                                             0348
         BZ    @RT00348                                            0348
         L     @15,PLHKEYPT(,RPLH)                                 0348
         L     @08,AMBDSB(,RAMB)                                   0348
         LH    @07,AMDAXRKP(,@08)                                  0348
         AL    @07,RPLAREA(,RRPL)                                  0348
         LH    @08,AMDKEYLN(,@08)                                  0348
         BCTR  @08,0                                               0348
         EX    @08,@SC01307                                        0348
         BE    @RF00348                                            0348
@RT00348 DS    0H                                                  0349
*     DO;                           /* USER HAS AN ERROR             */
*       RPLERREG='08'X;             /* USER HAS A LOGICAL ERROR      */
         MVI   RPLERREG(RRPL),X'08'                                0350
*       RPLCMPON=RPLAIXER;          /* TRYING TO PROCESS AIX         */
         MVI   RPLCMPON(RRPL),X'02'                                0351
*       IF WAXBPLH=0 THEN           /* IF NO BASE PLH                */
         L     @15,WAXBPLH(,RWORK5)                                0352
         LTR   @15,@15                                             0352
         BNZ   @RF00352                                            0352
*         RPLERRCD=RPLINUPD;        /* SPEC INVALID UPDATE           */
         MVI   RPLERRCD(RRPL),X'5C'                                0353
*       ELSE                        /* IF PLH EXISTS                 */
*         RPLERRCD=RPLKEYCH;        /* USER MUST OF TRIED KEY CHANGE */
         B     @RC00352                                            0354
@RF00352 MVI   RPLERRCD(RRPL),X'60'                                0354
*       RETURN;                     /* EXIT AIXPUT PROC              */
@EL00004 DS    0H                                                  0355
@EF00004 DS    0H                                                  0355
@ER00004 BR    @14                                                 0355
*     END;                                                         0356
*   IF RPLSEQ=ON&WAXPS=ON&          /* IF REQUEST SEQUENTIAL         */
*       RPLUPD=OFF&                 /* IF NOT UPDATE                 */
*       PLHKEY(1:AMDKEYLN)>ALTKEY(1:AMDKEYLN) THEN/* IF KEY OUT OF 0357
*                                      SEQ                           */
@RF00348 TM    RPLSEQ(RRPL),B'00100000'                            0357
         BNO   @RF00357                                            0357
         TM    WAXPS(RWORK5),B'00100000'                           0357
         BNO   @RF00357                                            0357
         TM    RPLUPD(RRPL),B'00000010'                            0357
         BNZ   @RF00357                                            0357
         L     @15,PLHKEYPT(,RPLH)                                 0357
         L     @08,AMBDSB(,RAMB)                                   0357
         LH    @07,AMDAXRKP(,@08)                                  0357
         AL    @07,RPLAREA(,RRPL)                                  0357
         LH    @08,AMDKEYLN(,@08)                                  0357
         BCTR  @08,0                                               0357
         EX    @08,@SC01307                                        0357
         BNH   @RF00357                                            0357
*     DO;                           /* USER HAS AN ERROR             */
*       RPLERREG='08'X;             /* USER HAS A LOGICAL ERROR      */
         MVI   RPLERREG(RRPL),X'08'                                0359
*       RPLCMPON=RPLAIXER;          /* TRYING TO PROCESS AIX         */
         MVI   RPLCMPON(RRPL),X'02'                                0360
*       RPLERRCD=RPLSEQCK;          /* USER HAD SEQ CHECK ERROR      */
         MVI   RPLERRCD(RRPL),X'0C'                                0361
*       RETURN;                     /* EXIT AIXPUT PROC              */
         B     @EL00004                                            0362
*     END;                                                         0363
*   RWORK1->RPLDACB=AMBLXPT->AMBLACB;/* POINT RPL TO BASE ACB        */
@RF00357 L     @15,AMBLXPT(,RPARM1)                                0364
         L     @15,AMBLACB(,@15)                                   0364
         ST    @15,RPLDACB(,RWORK1)                                0364
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
         IDASVR14
*   CALL LOADREGS;                  /* LOADREGS FOR BASE PROCESSING  */
         BAL   @14,LOADREGS                                        0366
*   IF RWORK1->RPLERREG=0 THEN      /* IF NO ERROR                   */
         CLI   RPLERREG(RWORK1),0                                  0367
         BNE   @RF00367                                            0367
*     DO;                                                          0368
*       CALL SETIRPL;               /* SET UP INNER RPL              */
         BAL   @14,SETIRPL                                         0369
*       CALL CALLR4;                /* CALL IDA019R4                 */
         BAL   @14,CALLR4                                          0370
*       IF RWORK1->RPLERREG=0 THEN  /* IF NO ERROR                   */
         CLI   RPLERREG(RWORK1),0                                  0371
         BNE   @RF00371                                            0371
*         DO;                                                      0372
*           PLHKEY(1:AMDKEYLN)=ALTKEY(1:AMDKEYLN);/* KEY INTO PLH    */
         L     @15,PLHKEYPT(,RPLH)                                 0373
         L     @08,AMBDSB(,RAMB)                                   0373
         LH    @07,AMDKEYLN(,@08)                                  0373
         BCTR  @07,0                                               0373
         LH    @08,AMDAXRKP(,@08)                                  0373
         AL    @08,RPLAREA(,RRPL)                                  0373
         EX    @07,@SM01309                                        0373
*           IF RPLDIR=ON&           /* IF PUT DIRECT REQUEST         */
*               RPLNSP=OFF THEN     /* IF NO NEED TO SAVE POSITION   */
         TM    RPLDIR(RRPL),B'01000000'                            0374
         BNO   @RF00374                                            0374
         TM    RPLNSP(RRPL),B'00000001'                            0374
         BNZ   @RF00374                                            0374
*             PLHINVAL=ON;          /* DESTROY AIX RCD POSITION      */
         OI    PLHINVAL(RPLH),B'00000010'                          0375
*           IF RPLSEQ=ON&RPLUPD=OFF THEN/* IF PUT NUP SEQ            */
@RF00374 TM    RPLSEQ(RRPL),B'00100000'                            0376
         BNO   @RF00376                                            0376
         TM    RPLUPD(RRPL),B'00000010'                            0376
         BNZ   @RF00376                                            0376
*             WAXPS=ON;             /* RECORD PUT SEQ FOR NEXT GET 0377
*                                      SEQ                           */
         OI    WAXPS(RWORK5),B'00100000'                           0377
*         END;                                                     0378
@RF00376 DS    0H                                                  0379
*     END;                                                         0379
@RF00371 DS    0H                                                  0380
*   GEN(IDARST14);                  /* RESTORE RETURN REGISTER       */
@RF00367 DS    0H                                                  0380
         IDARST14
*   RESPECIFY                                                      0381
*     R14 UNRESTRICTED;                                            0381
*   END AIXPUT;                                                    0382
         B     @EL00004                                            0382
         EJECT
*AIXERASE:                                                         0383
*                                                                  0383
*/********************************************************************/
*/* THIS ROUTINE PROCESSES PATH ERASES -                             */
*/********************************************************************/
*                                                                  0383
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0383
AIXERASE DS    0H                                                  0384
*   RESPECIFY                                                      0384
*     R14 RESTRICTED;                                              0384
*   IF WAXBPLH=0 THEN               /* IF GET UPD WAS NOT LAST REQ   */
         L     @15,WAXBPLH(,RWORK5)                                0385
         LTR   @15,@15                                             0385
         BNZ   @RF00385                                            0385
*     DO;                                                          0386
*       RPLERRCD=RPLINUPD;          /* ERROR CODE FOR INVALID ERASE  */
         MVI   RPLERRCD(RRPL),X'5C'                                0387
*       RPLERREG='08'X;             /* SET LOGICAL ERROR             */
         MVI   RPLERREG(RRPL),X'08'                                0388
*       RPLCMPON=RPLAIXER;          /* ERROR DETECTED IN AIX         */
         MVI   RPLCMPON(RRPL),X'02'                                0389
*     END;                                                         0390
*   ELSE                            /* IF LAST REQUEST WAS GET UPD   */
*     DO;                                                          0391
         B     @RC00385                                            0391
@RF00385 DS    0H                                                  0392
*       IF AMBLXPT->AMBLNUM=ESDSNUM1 THEN/* IF BASE IS ESDS          */
         L     @15,AMBLXPT(,RPARM1)                                0392
         CLC   AMBLNUM(2,@15),@CH00054                             0392
         BNE   @RF00392                                            0392
*         DO;                                                      0393
*           RPLERRCD=RPLERSER;      /* ERROR CODE FOR INVALID ERASE  */
         MVI   RPLERRCD(RRPL),X'50'                                0394
*           RPLERREG='08'X;         /* SET LOGICAL ERROR             */
         MVI   RPLERREG(RRPL),X'08'                                0395
*           RPLCMPON=RPLAIXER;      /* ERROR DETECTED IN A9X         */
         MVI   RPLCMPON(RRPL),X'02'                                0396
*         END;                                                     0397
*       ELSE                        /* IF BASE IS KSDS               */
*         DO;                                                      0398
         B     @RC00392                                            0398
@RF00392 DS    0H                                                  0399
*           GEN(IDASVR14);          /* SAVE RETURN REGISTER          */
         IDASVR14
*           RESPECIFY                                              0400
*             R14 UNRESTRICTED;                                    0400
*           RWORK1->RPLDACB=AMBLXPT->AMBLACB;/* POINT RPL TO BASE ACB*/
         L     @08,AMBLXPT(,RPARM1)                                0401
         L     @08,AMBLACB(,@08)                                   0401
         ST    @08,RPLDACB(,RWORK1)                                0401
*           CALL LOADREGS;          /* LOAD REGS TO PROCESS BASE     */
         BAL   @14,LOADREGS                                        0402
*           CALL SETIRPL;           /* SET UP INNER RPL              */
         BAL   @14,SETIRPL                                         0403
*           CALL CALLR4;            /* EXIT TO IDA019R4              */
         BAL   @14,CALLR4                                          0404
*           IF RPLDIR=ON&           /* IF ERASE DIRECT REQUEST       */
*               RPLNSP=OFF THEN     /* IF NO NEED TO SAVE POSITION   */
         TM    RPLDIR(RRPL),B'01000000'                            0405
         BNO   @RF00405                                            0405
         TM    RPLNSP(RRPL),B'00000001'                            0405
         BNZ   @RF00405                                            0405
*             PLHINVAL=ON;          /* DESTROY AIX RCD POSITION      */
         OI    PLHINVAL(RPLH),B'00000010'                          0406
*           RESPECIFY                                              0407
*             R14 RESTRICTED;                                      0407
@RF00405 DS    0H                                                  0408
*           GEN(IDARST14);          /* RESTORE RETURN REGISTER       */
         IDARST14
*           RESPECIFY                                              0409
*             R14 UNRESTRICTED;                                    0409
*         END;                                                     0410
*     END;                                                         0411
*   END AIXERASE;                                                  0412
@EL00005 DS    0H                                                  0412
@EF00005 DS    0H                                                  0412
@ER00005 BR    @14                                                 0412
         EJECT
*AIXPOINT:                                                         0413
*                                                                  0413
*/********************************************************************/
*/* THIS ROUTINE PROCESSES PATH POINTS -                             */
*/*   ISSUES GETXRCD AGAINST PATH                                    */
*/********************************************************************/
*                                                                  0413
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0413
AIXPOINT DS    0H                                                  0414
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
         IDASVR14
*   WAXPS=OFF;                      /* LAST OPERATION WAS PUT SEQ    */
*   WAXNOADV=OFF;                   /* RESET NO ADVANCE      @ZA10860*/
         NI    WAXPS(RWORK5),B'11001111'                           0416
*   CALL GETXRCD;                   /* GET AIX RECORD                */
         BAL   @14,GETXRCD                                         0417
*   IF RWORK1->RPLERREG=0 THEN      /* IF NO ERROR           @ZA10853*/
         CLI   RPLERREG(RWORK1),0                                  0418
         BNE   @RF00418                                            0418
*     DO;                           /*                       @ZA10853*/
*       WAXXPTR=WAXXPTR-WAXPL;      /* BACK UP PTR FOR GET NEXT      */
         L     @08,WAXXPTR(,RWORK5)                                0420
         SH    @08,WAXPL(,RWORK5)                                  0420
         ST    @08,WAXXPTR(,RWORK5)                                0420
*       RWORK1->RPLRLEN=0;          /* ZERO RCD LENGTH               */
         SLR   @08,@08                                             0421
         ST    @08,RPLRLEN(,RWORK1)                                0421
*     END;                          /*                       @ZA10853*/
*   GEN(IDARST14);                  /* RESTORE RETURN REGISTER       */
@RF00418 DS    0H                                                  0423
         IDARST14
*   END AIXPOINT;                                                  0424
@EL00006 DS    0H                                                  0424
@EF00006 DS    0H                                                  0424
@ER00006 BR    @14                                                 0424
         EJECT
*AIXENREQ:                                                         0425
*                                                                  0425
*/********************************************************************/
*/* THIS ROUTINE PROCESSES PATH ENDREQS -                            */
*/*   IF BASE PLH EXISTS, ISSUES ENDREQ AGAINST BASE                 */
*/********************************************************************/
*                                                                  0425
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0425
AIXENREQ DS    0H                                                  0426
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
         IDASVR14
*   RPARM1=ACBAMBL;                 /* LOAD POINTER TO AMBL          */
         L     @08,RPLDACB(,RRPL)                                  0427
         L     RPARM1,ACBAMBL(,@08)                                0427
*   IF WAXURPL^=0 THEN              /* IF PLH WAS EVER USED          */
         L     @08,WAXURPL(,RWORK5)                                0428
         LTR   @08,@08                                             0428
         BZ    @RF00428                                            0428
*     DO;                                                          0429
*       IF AMBLACB->ACBBUSY=ON THEN /* IF ENDREQ FROM I/O SUPPORT    */
         L     @08,AMBLACB(,RPARM1)                                0430
         TM    ACBBUSY(@08),B'00000001'                            0430
         BNO   @RF00430                                            0430
*         AMBLXPT->AMBLACB->ACBBUSY=ON;/* MAKE BASE BUSY             */
         L     @08,AMBLXPT(,RPARM1)                                0431
         L     @08,AMBLACB(,@08)                                   0431
         OI    ACBBUSY(@08),B'00000001'                            0431
*       CALL RELBASE;               /* ENDREQ BASE PLH IF ANY        */
@RF00430 BAL   @14,RELBASE                                         0432
*       IF AMBLACB->ACBBUSY=ON THEN /* IF ENDREQ FROM I/O SUPPORT    */
         L     @08,AMBLACB(,RPARM1)                                0433
         TM    ACBBUSY(@08),B'00000001'                            0433
         BNO   @RF00433                                            0433
*         AMBLXPT->AMBLACB->ACBBUSY=OFF;/* MAKE BASE NOT BUSY        */
         L     @08,AMBLXPT(,RPARM1)                                0434
         L     @08,AMBLACB(,@08)                                   0434
         NI    ACBBUSY(@08),B'11111110'                            0434
*       IF RWORK1->RPLERREG=0 THEN  /* IF NO ERROR AS YET            */
@RF00433 CLI   RPLERREG(RWORK1),0                                  0435
         BNE   @RF00435                                            0435
*         DO;                                                      0436
*I01:                                                              0437
*           DO;                     /* IDACALL(IDAENDRQ)             */
I01      DS    0H                                                  0438
*             CALL IDAENDRQ;        /* EXIT TO IDAENDRQ              */
         L     @15,@CV01113                                        0438
         BALR  @14,@15                                             0438
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(USING *+4095,R10);/* ESTABLISH SECOND BASE         */
         USING *+4095,R10
*             GEN(LA    R10,4095(@11));/* LOAD SECOND BASE           */
         LA    R10,4095(@11)
*             GEN(L     R10,=A(@PSTART+4095));/* RELOAD SECOND BASE  */
         L     R10,=A(@PSTART+4095)
*             GEN(USING @PSTART+4095,R10);/* ESTABLISH SECOND BASE   */
         USING @PSTART+4095,R10
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I01;                /* ENDREQ AIX                    */
*           RWORK5=PLHWAX;          /* RESTORE IDAWAX BASE           */
         L     RWORK5,PLHWAX(,RPLH)                                0448
*           RWORK1=RRPL;            /* RESTORE POINTER TO INNER RPL  */
         LR    RWORK1,RRPL                                         0449
*           RRPL=WAXURPL;           /* RESTROE POINTER TO USERS RPL  */
         L     RRPL,WAXURPL(,RWORK5)                               0450
*           RPARM1=ACBAMBL;         /* RESTORE POINTER TO AMBL       */
         L     @08,RPLDACB(,RRPL)                                  0451
         L     RPARM1,ACBAMBL(,@08)                                0451
*           RAMB=AMBLDTA;           /* RESTORE POINTER TO DATA AMB   */
         L     RAMB,AMBLDTA(,RPARM1)                               0452
*           WAXXPTR=0;              /* RELEASE AIX PTR               */
         SLR   @08,@08                                             0453
         ST    @08,WAXXPTR(,RWORK5)                                0453
*         END;                                                     0454
*     END;                                                         0455
@RF00435 DS    0H                                                  0456
*   GEN(IDARST14);                  /* RESTORE RETURN REGISTER       */
@RF00428 DS    0H                                                  0456
         IDARST14
*   END AIXENREQ;                                                  0457
@EL00007 DS    0H                                                  0457
@EF00007 DS    0H                                                  0457
@ER00007 BR    @14                                                 0457
         EJECT
*AIXBAD:                                                           0458
*                                                                  0458
*/********************************************************************/
*/* THIS ROUTINE PROCESS CALLS TO IDA019RX WITH BAD REQUEST CODES    */
*/********************************************************************/
*                                                                  0458
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0458
AIXBAD   DS    0H                                                  0459
*   RESPECIFY                                                      0459
*     R14 RESTRICTED;                                              0459
*   RPLERRCD=RPLINVP;               /* INDICATE INVALID REQUEST      */
         MVI   RPLERRCD(RRPL),X'68'                                0460
*   RPLERREG='08'X;                 /* INDICATE LOGICAL ERROR        */
         MVI   RPLERREG(RRPL),X'08'                                0461
*   RPLCMPON=RPLAIXER;              /* INDICATE ERROR DURING AIX PROC*/
         MVI   RPLCMPON(RRPL),X'02'                                0462
*   RESPECIFY                                                      0463
*     R14 UNRESTRICTED;                                            0463
*   END AIXBAD;                                                    0464
@EL00008 DS    0H                                                  0464
@EF00008 DS    0H                                                  0464
@ER00008 BR    @14                                                 0464
         EJECT
*RELBASE:                                                          0465
*                                                                  0465
*/********************************************************************/
*/* THIS ROUTINE ISSUES AN ENDREQ TO THE BASE DATA SET               */
*/********************************************************************/
*                                                                  0465
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0465
RELBASE  DS    0H                                                  0466
*   RESPECIFY                                                      0466
*     R14 RESTRICTED;                                              0466
*   IF WAXBPLH^=0 THEN              /* IF BPLH CONNECTED             */
         L     @15,WAXBPLH(,RWORK5)                                0467
         LTR   @15,@15                                             0467
         BZ    @RF00467                                            0467
*     DO;                                                          0468
*       GEN SETS(PLHRET1,PLHRETO)(IDASVR14);/* SAVE RETURN ADDRESS   */
         IDASVR14
*       RPARM1=AMBLXPT;             /* LOAD PTR TO BASE AMBL         */
         L     RPARM1,AMBLXPT(,RPARM1)                             0470
*       RAMB=AMBLDTA;               /* LOAD AMB POINTER              */
         L     RAMB,AMBLDTA(,RPARM1)                               0471
*       WAXIRPL->RPLTCBPT=RPLH;     /* SAVE PTR PATH PLH     @ZA14814*/
         L     @15,WAXIRPL(,RWORK5)                                0472
         ST    RPLH,RPLTCBPT(,@15)                                 0472
*       RPLH=WAXBPLH;               /* LOAD BASE PLH POINTER         */
         L     @08,WAXBPLH(,RWORK5)                                0473
         LR    RPLH,@08                                            0473
*       RRPL=WAXIRPL;               /* POINT TO INNER RPL            */
         LR    RRPL,@15                                            0474
*       WAXBPLH->PLHXPLH=0;         /* RESET PLH PTR BACK    @ZA14814*/
         SLR   @15,@15                                             0475
         ST    @15,PLHXPLH(,@08)                                   0475
*I02:                                                              0476
*       DO;                         /* IDACALL(IDAENDRQ)             */
I02      DS    0H                                                  0477
*         CALL IDAENDRQ;            /* EXIT TO IDAENDRQ              */
         L     @15,@CV01113                                        0477
         BALR  @14,@15                                             0477
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(USING *+4095,R10);    /* ESTABLISH SECOND BASE         */
         USING *+4095,R10
*         GEN(LA    R10,4095(@11)); /* LOAD SECOND BASE              */
         LA    R10,4095(@11)
*         GEN(L     R10,=A(@PSTART+4095));/* RELOAD SECOND BASE      */
         L     R10,=A(@PSTART+4095)
*         GEN(USING @PSTART+4095,R10);/* ESTABLISH SECOND BASE       */
         USING @PSTART+4095,R10
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I02;                                                   0486
*       RPLH=RPLTCBPT;              /* RESTORE PLH PTR       @ZA14814*/
         L     RPLH,RPLTCBPT(,RRPL)                                0487
*       RPLTCBPT=0;                 /* CLEANUP               @ZA14814*/
         SLR   @15,@15                                             0488
         ST    @15,RPLTCBPT(,RRPL)                                 0488
*       RWORK5=PLHWAX;              /* RESTORE IDAWAX BASE           */
         L     RWORK5,PLHWAX(,RPLH)                                0489
*       RWORK1=RRPL;                /* RESTORE POINTER TO INNER RPL  */
         LR    RWORK1,RRPL                                         0490
*       RRPL=WAXURPL;               /* RESTROE POINTER TO USERS RPL  */
         L     RRPL,WAXURPL(,RWORK5)                               0491
*       RPARM1=ACBAMBL;             /* RESTORE POINTER TO AMBL       */
         L     @08,RPLDACB(,RRPL)                                  0492
         L     RPARM1,ACBAMBL(,@08)                                0492
*       RAMB=AMBLDTA;               /* RESTORE POINTER TO DATA AMB   */
         L     RAMB,AMBLDTA(,RPARM1)                               0493
*       WAXBPLH=0;                  /* DISCONNECT BPLH FROM PLH      */
         ST    @15,WAXBPLH(,RWORK5)                                0494
*       GEN(IDARST14);              /* RESTORE RETURN ADDRESS        */
         IDARST14
*     END;                                                         0496
*   RESPECIFY                                                      0497
*     R14 UNRESTRICTED;                                            0497
*   END RELBASE;                                                   0498
@EL00009 DS    0H                                                  0498
@EF00009 DS    0H                                                  0498
@ER00009 BR    @14                                                 0498
         EJECT
*REPOSG:                                                           0499
*                                                                  0499
*/********************************************************************/
*/* THIS ROUTINE POSITIONS THE PLH TO THE NEXT RECORD AFTER PLHKEY   */
*/********************************************************************/
*                                                                  0499
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0499
REPOSG   DS    0H                                                  0500
*   GEN(IDASVR14);                  /* SAVE RETURN ADDRESS           */
*                                                                  0500
         IDASVR14
*   /*****************************************************************/
*   /*                                                               */
*   /* BUMP THE PLH KEY BY ONE                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0501
*   RESPECIFY                                                      0501
*     RWORK2 RESTRICTED;                                           0501
*   RESPECIFY                                                      0502
*     ACHAR BASED(ADDR(PLHKEY(RWORK2)));                           0502
*   DO RWORK2=AMDKEYLN TO 1 BY-1;   /* LOOP BACK THRU PLHKEY         */
         L     @08,AMBDSB(,RAMB)                                   0503
         LH    RWORK2,AMDKEYLN(,@08)                               0503
         B     @DE00503                                            0503
@DL00503 DS    0H                                                  0504
*     IF ACHAR=XFFX THEN            /* IF CHAR IS 'FF'X              */
         L     @08,PLHKEYPT(,RPLH)                                 0504
         BCTR  @08,0                                               0504
         LA    @08,PLHKEY(RWORK2,@08)                              0504
         CLI   ACHAR(@08),255                                      0504
         BNE   @RF00504                                            0504
*       ACHAR=0;                    /* SET CHAR TO 0 & BACK UP       */
         MVI   ACHAR(@08),X'00'                                    0505
*     ELSE                          /* IF CHAR IS NOT 'FF'X          */
*       DO;                                                        0506
         B     @RC00504                                            0506
@RF00504 DS    0H                                                  0507
*         ACHAR=ACHAR+1;            /* BUMP CHAR                     */
         L     @08,PLHKEYPT(,RPLH)                                 0507
         BCTR  @08,0                                               0507
         LA    @08,PLHKEY(RWORK2,@08)                              0507
         LA    @07,1                                               0507
         SLR   @15,@15                                             0507
         IC    @15,ACHAR(,@08)                                     0507
         ALR   @07,@15                                             0507
         STC   @07,ACHAR(,@08)                                     0507
*         GOTO BKEYE;               /* GET OUT OF LOOP               */
         B     BKEYE                                               0508
*       END;                                                       0509
*   END;                            /* BACK UP TO NEXT CHAR IN PLHKEY*/
@RC00504 BCTR  RWORK2,0                                            0510
@DE00503 CL    RWORK2,@CF00054                                     0510
         BNL   @DL00503                                            0510
*   RESPECIFY                                                      0511
*     RWORK2 UNRESTRICTED;                                         0511
*BKEYE:                                                            0512
*   CALL GETXRCD;                   /* GET RCD KEY GE                */
BKEYE    BAL   @14,GETXRCD                                         0512
*   WAXXPTR=WAXXPTR-WAXPL;          /* BACK UP PTR                   */
         L     @08,WAXXPTR(,RWORK5)                                0513
         SH    @08,WAXPL(,RWORK5)                                  0513
         ST    @08,WAXXPTR(,RWORK5)                                0513
*   WAXPS=OFF;                      /* PLH IS REPOSITIONED           */
         NI    WAXPS(RWORK5),B'11011111'                           0514
*   GEN(IDARST14);                  /* RESTORE RETURN ADDRESS        */
         IDARST14
*   END REPOSG;                                                    0516
@EL00010 DS    0H                                                  0516
@EF00010 DS    0H                                                  0516
@ER00010 BR    @14                                                 0516
         EJECT
*GETXRCD:                                                          0517
*                                                                  0517
*/********************************************************************/
*/* GET AN AIX RECORD                                                */
*/********************************************************************/
*                                                                  0517
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0517
GETXRCD  DS    0H                                                  0518
*   RESPECIFY                                                      0518
*     R14 RESTRICTED;                                              0518
*   RESPECIFY                                                      0519
*     IFGRPL BASED(RWORK1);                                        0519
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
         IDASVR14
*   IF AMBPUG=ON THEN               /* IF AIX IN UPGRADE SET         */
         TM    AMBPUG(RAMB),B'10000000'                            0521
         BNO   @RF00521                                            0521
*     DO;                                                          0522
*       WAXPUG=ON;                  /* MAKE LOCAL COPY               */
         OI    WAXPUG(RWORK5),B'01000000'                          0523
*       IF WAXSRAB=OFF THEN         /* IF SRA NOT BUILT              */
         TM    WAXSRAB(RWORK5),B'10000000'                         0524
         BNZ   @RF00524                                            0524
*         WAXSRAL=LENGTH(IDAAIX);   /* SET SMALL NON-ZERO VALUE      */
         MVC   WAXSRAL(4,RWORK5),@CF00224                          0525
*     END;                                                         0526
*   ELSE                            /* IF AIX NOT IN UPGRADE SET     */
*     DO;                                                          0527
         B     @RC00521                                            0527
@RF00521 DS    0H                                                  0528
*       IF WAXSRAB=ON THEN          /* IF SRA BUILT THEN             */
         TM    WAXSRAB(RWORK5),B'10000000'                         0528
         BNO   @RF00528                                            0528
*         CALL RELSRA;              /* RELEASE SRA                   */
         BAL   @14,RELSRA                                          0529
*     END;                                                         0530
@RF00528 DS    0H                                                  0531
*   RPLDACB=RRPL->RPLDACB;          /* POINT TO AIX ACB              */
@RC00521 L     @15,RPLDACB(,RRPL)                                  0531
         ST    @15,RPLDACB(,RWORK1)                                0531
*   CALL LOADREGS;                  /* LOAD REGS TO PROCESS AIX      */
         BAL   @14,LOADREGS                                        0532
*   CALL SETIRPL;                   /* SET UP INNER RPL              */
         BAL   @14,SETIRPL                                         0533
*   IF WAXPS=ON THEN                /* IF CALL FROM REPOSG           */
         TM    WAXPS(RWORK5),B'00100000'                           0534
         BNO   @RF00534                                            0534
*     DO;                                                          0535
*       RPLKGE=ON;                  /* GET KEY GE                    */
         OI    RPLKGE(RWORK1),B'00000100'                          0536
*       RPLARG=ADDR(PLHKEY);        /* SEARCH ARG IN PLH             */
         L     @15,PLHKEYPT(,RPLH)                                 0537
         ST    @15,RPLARG(,RWORK1)                                 0537
*     END;                                                         0538
*   RESPECIFY                                                      0539
*     RWORK2 RESTRICTED;                                           0539
@RF00534 DS    0H                                                  0540
*   RWORK2=OFF;                     /* USE RWORK2 AS A SWITCH        */
         SLR   RWORK2,RWORK2                                       0540
*   DO UNTIL RWORK2=ON;             /* LOOP UNTIL RCD READ OR ERROR  */
@DL00541 DS    0H                                                  0542
*     CALL CALLR4;                  /* READ AIX RECORD               */
         BAL   @14,CALLR4                                          0542
*     IF RPLERREG^=0 THEN           /* IF ANY ERROR                  */
         CLI   RPLERREG(RWORK1),0                                  0543
         BE    @RF00543                                            0543
*       DO;                                                        0544
*         IF RPLERRCD^=RPLSRLOC THEN/* IF SPANNED RCD WASNT FOUND    */
         CLI   RPLERRCD(RWORK1),132                                0545
         BE    @RF00545                                            0545
*           DO;                                                    0546
*             IF RPLERRCD=RPLINBUF THEN/* IF BUFFER TOO SMALL        */
         CLI   RPLERRCD(RWORK1),44                                 0547
         BNE   @RF00547                                            0547
*               DO;                                                0548
*                 IF PLHSRINV=OFF THEN/* IF NOT FROM SPANNED RCD     */
         TM    PLHSRINV(RPLH),B'00010000'                          0549
         BNZ   @RF00549                                            0549
*                   DO;                                            0550
*                     RPLERRCD=RPLNOVRT;/* NO VIRUAL CORE FOR BUFFER */
         MVI   RPLERRCD(RWORK1),X'28'                              0551
*                     RPLCMPON=RPLAIXER;/* FAILED FOR AIX            */
         MVI   RPLCMPON(RWORK1),X'02'                              0552
*                     GEN(IDARST14);/* RESOTRE RETURN REGISTER       */
         IDARST14
*                     RETURN;       /* EXIT PROCEEDURE               */
@EL00011 DS    0H                                                  0554
@EF00011 DS    0H                                                  0554
@ER00011 BR    @14                                                 0554
*                   END;                                           0555
*                 ELSE              /* IF ERROR FR SPANNED RCD       */
*                   DO;                                            0556
@RF00549 DS    0H                                                  0557
*                     CALL RELSRA;  /* FREE SRA                      */
         BAL   @14,RELSRA                                          0557
*                     RPLFDBWD=0;   /* ZERO FEEDBACK WORD    @ZA10853*/
         SLR   @15,@15                                             0558
         ST    @15,RPLFDBWD(,RWORK1)                               0558
*                     RWORK1=MAX(WAXSRAL*2,AMDCINV);/* GET NEW LEN   */
         L     RWORK1,WAXSRAL(,RWORK5)                             0559
         ALR   RWORK1,RWORK1                                       0559
         L     @15,AMBDSB(,RAMB)                                   0559
         L     @15,AMDCINV(,@15)                                   0559
         CR    RWORK1,@15                                          0559
         BNL   *+6
         LR    RWORK1,@15                                          0559
*                     CALL GETSRA;  /* BUILD NEW SRA                 */
         BAL   @14,GETSRA                                          0560
*                     RWORK1=WAXIRPL;/* INNER RPL POINTER    @ZA10853*/
         L     RWORK1,WAXIRPL(,RWORK5)                             0561
*                     IF RWORK1->RPLERREG^=0 THEN/* ERROR    @ZA10853*/
         CLI   RPLERREG(RWORK1),0                                  0562
         BE    @RF00562                                            0562
*                       DO;         /*                       @ZA10853*/
*                         GEN(IDARST14);/* RETURN REGISTER   @ZA10853*/
         IDARST14
*                         RETURN;   /* EXIT GETXRCD          @ZA10853*/
         B     @EL00011                                            0565
*                       END;        /*                       @ZA10853*/
*                     RPLLOC=OFF;   /* SET RPL TO MOVE MODE          */
@RF00562 NI    RPLLOC(RWORK1),B'01111111'                          0567
*                     RWORK2=OFF;   /* SET SWITCH TO LOOP            */
         SLR   RWORK2,RWORK2                                       0568
*                   END;                                           0569
*               END;                                               0570
*             ELSE                  /* IF ANY OTHER ERROR            */
*               DO;                                                0571
         B     @RC00547                                            0571
@RF00547 DS    0H                                                  0572
*                 GEN(IDARST14);    /* RESTORE RETURN ADDRESS        */
         IDARST14
*                 RETURN;           /* EXIT GETXRCD                  */
         B     @EL00011                                            0573
*               END;                                               0574
*           END;                                                   0575
*         ELSE                      /* IF SPANNED RECORD WAS FOUND   */
*           DO;                                                    0576
         B     @RC00545                                            0576
@RF00545 DS    0H                                                  0577
*             RPLFDBWD=0;           /* ZERO FEEDBACK WORD    @ZA10853*/
         SLR   @15,@15                                             0577
         ST    @15,RPLFDBWD(,RWORK1)                               0577
*             RWORK1=AMBLXPT->AMBLDTA->AMBDSB->AMDLRECL;/* GET     0578
*                                      LARGEST RECORD LENGTH         */
         L     @15,AMBLXPT(,RPARM1)                                0578
         L     @15,AMBLDTA(,@15)                                   0578
         L     @15,AMBDSB(,@15)                                    0578
         L     RWORK1,AMDLRECL(,@15)                               0578
*             CALL GETSRA;          /* BUILD SRA                     */
         BAL   @14,GETSRA                                          0579
*             RWORK1=WAXIRPL;       /* INNER RPL POINTER     @ZA10853*/
         L     RWORK1,WAXIRPL(,RWORK5)                             0580
*             IF RWORK1->RPLERREG^=0 THEN/* ERROR            @ZA10853*/
         CLI   RPLERREG(RWORK1),0                                  0581
         BE    @RF00581                                            0581
*               DO;                 /*                       @ZA10853*/
*                 GEN(IDARST14);    /* RETURN REGISTER       @ZA10853*/
         IDARST14
*                 RETURN;           /* EXIT GETXRCD          @ZA10853*/
         B     @EL00011                                            0584
*               END;                /*                       @ZA10853*/
*             RPLLOC=OFF;           /* SET RPL TO MOVE MODE          */
@RF00581 NI    RPLLOC(RWORK1),B'01111111'                          0586
*             RWORK2=OFF;           /* SET SWITCH TO LOOP            */
         SLR   RWORK2,RWORK2                                       0587
*           END;                                                   0588
*       END;                                                       0589
*     ELSE                          /* NO ERROR FROM AIX READ        */
*       RWORK2=ON;                  /* SET RWORK2 TO GET OUT OF LOOP */
         B     @RC00543                                            0590
@RF00543 LA    RWORK2,1                                            0590
*   END;                                                           0591
@RC00543 DS    0H                                                  0591
@DE00541 CL    RWORK2,@CF00055                                     0591
         BNE   @DL00541                                            0591
*   RESPECIFY                                                      0592
*     RWORK2 UNRESTRICTED;                                         0592
*   RESPECIFY                                                      0593
*     IDAAIX BASED(WAXRCDA);                                       0593
*   WAXXPTR=ADDR(AIXKY)+AIXKL;      /* POINT TO FIRST AIX PTR        */
         L     @15,WAXRCDA(,RWORK5)                                0594
         LA    @08,AIXKY(,@15)                                     0594
         SLR   @07,@07                                             0594
         IC    @07,AIXKL(,@15)                                     0594
         ALR   @08,@07                                             0594
         ST    @08,WAXXPTR(,RWORK5)                                0594
*   WAXEPTR=WAXRCDA+RPLRLEN;        /* PT TO NEXT BYTE AFTER RCD     */
         LR    @08,@15                                             0595
         AL    @08,RPLRLEN(,RWORK1)                                0595
         ST    @08,WAXEPTR(,RWORK5)                                0595
*   WAXPL=AIXPL;                    /* COPY POINTER LENGTH           */
         SLR   @08,@08                                             0596
         IC    @08,AIXPL(,@15)                                     0596
         STH   @08,WAXPL(,RWORK5)                                  0596
*   GEN(IDARST14);                  /* RESTORE RETURN REGISTER       */
         IDARST14
*   RESPECIFY                                                      0598
*     R14 UNRESTRICTED;                                            0598
*   RESPECIFY                                                      0599
*     IFGRPL BASED(RRPL);                                          0599
*   END GETXRCD;                                                   0600
         B     @EL00011                                            0600
         EJECT
*SETIRPL:                                                          0601
*                                                                  0601
*/********************************************************************/
*/* SET UP INNER RPL TO PROCESS BASE OR AIX                          */
*/********************************************************************/
*                                                                  0601
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0601
SETIRPL  DS    0H                                                  0602
*   RESPECIFY                                                      0602
*     R14 RESTRICTED;                                              0602
*   RESPECIFY                                                      0603
*     RWORK2 RESTRICTED;                                           0603
*   RPLFDBWD=0;                     /* ZERO FEEDBACK FIELD           */
         SLR   @15,@15                                             0604
         ST    @15,RPLFDBWD(,RRPL)                                 0604
*   RWORK2=WAXURPL;                 /* LOAD PTR TO USERS RPL         */
         L     RWORK2,WAXURPL(,RWORK5)                             0605
*   IF RPLDACB->ACBAMBL->AMBLBASE=OFF THEN/* IF PROC AIX             */
         L     @15,RPLDACB(,RRPL)                                  0606
         L     @15,ACBAMBL(,@15)                                   0606
         TM    AMBLBASE(@15),B'00010000'                           0606
         BNZ   @RF00606                                            0606
*     DO;                                                          0607
*       RPLOPT1=RWORK2->RPLOPT1;    /* COPY USERS OPT1               */
         MVC   RPLOPT1(1,RRPL),RPLOPT1(RWORK2)                     0608
*       RPLOPT2=RWORK2->RPLOPT2;    /* COPY USERS OPT2               */
         MVC   RPLOPT2(1,RRPL),RPLOPT2(RWORK2)                     0609
*       RPLUPD=OFF;                 /* UPDATE MUST BE OFF            */
         NI    RPLUPD(RRPL),B'11111101'                            0610
*       RPLECBSW=OFF;               /* USE INNER ECB                 */
         NI    RPLECBSW(RRPL),B'11111110'                          0611
*       RPLECB=RPLECB&&RPLECB;      /* ZERO ECB                      */
         L     @15,RPLECB(,RRPL)                                   0612
         LR    @08,@15                                             0612
         XR    @08,@15                                             0612
         ST    @08,RPLECB(,RRPL)                                   0612
*       RPLREQ=RPLGET;              /* FUNCTION IS GET FOR AIX       */
         MVI   RPLREQ(RRPL),X'00'                                  0613
*       RPLWAITX=OFF;               /* NO UPAD FOR WAITX/AIX @ZA07549*/
         NI    RPLWAITX(RRPL),B'11111011'                          0614
*       IF RWORK2->RPLREQ=RPLPOINT THEN/* IF USER REQUESTED POINT    */
         CLI   RPLREQ(RWORK2),3                                    0615
         BNE   @RF00615                                            0615
*         DO;                                                      0616
*           RPLOPT1=OFF;            /* SET ALL OPT1 BITS OFF         */
         MVI   RPLOPT1(RRPL),B'00000000'                           0617
*           RPLOPT2=OFF;            /* SET ALL OPT2 BITS OFF         */
         MVI   RPLOPT2(RRPL),B'00000000'                           0618
*           RPLKEY=ON;              /* READ BY KEY                   */
*           RPLNSP=ON;              /* NOTE STRING POSITION          */
         OI    RPLKEY(RRPL),B'10000001'                            0620
*           RPLDIR=ON;              /* DO GET DIRECT                 */
         OI    RPLDIR(RRPL),B'01000000'                            0621
*           RPLARG=RWORK2->RPLARG;  /* GET PTR TO SEARCH ARG         */
         L     @15,RPLARG(,RWORK2)                                 0622
         ST    @15,RPLARG(,RRPL)                                   0622
*           IF RWORK2->RPLBWD=ON THEN/* IF WAS WANTS BACKWARD        */
         TM    RPLBWD(RWORK2),B'00010000'                          0623
         BNO   @RF00623                                            0623
*             DO;                                                  0624
*               RPLBWD=ON;          /* SET BWD ON                    */
         OI    RPLBWD(RRPL),B'00010000'                            0625
*               IF RWORK2->RPLLRD=ON THEN/* IF USER WANTS LAST RCD   */
         TM    RPLLRD(RWORK2),B'00001000'                          0626
         BNO   @RF00626                                            0626
*                 RPLLRD=ON;        /* SET LRD ON                    */
         OI    RPLLRD(RRPL),B'00001000'                            0627
*             END;                                                 0628
@RF00626 DS    0H                                                  0629
*           IF RWORK2->RPLGEN=ON THEN/* IF USER GEN KEY      @ZA07169*/
@RF00623 TM    RPLGEN(RWORK2),B'00000010'                          0629
         BNO   @RF00629                                            0629
*             RPLGEN=ON;            /* SET GEN KEY INNER RPL @ZA07169*/
         OI    RPLGEN(RRPL),B'00000010'                            0630
*           IF RWORK2->RPLKGE=ON THEN/* IF USER KGE          @ZA07169*/
@RF00629 TM    RPLKGE(RWORK2),B'00000100'                          0631
         BNO   @RF00631                                            0631
*             RPLKGE=ON;            /* SET KGE INNER RPL     @ZA07169*/
         OI    RPLKGE(RRPL),B'00000100'                            0632
*         END;                                                     0633
*       ELSE                        /* IF USER NOT REQUESTED POINT   */
*         IF RWORK2->RPLDIR=ON×     /* IF USER WANTS DIRECT REQ      */
*             RWORK2->RPLSKP=ON THEN/* IF USER WANTS SKP SEQ         */
         B     @RC00615                                            0634
@RF00615 TM    RPLDIR(RWORK2),B'01010000'                          0634
         BZ    @RF00634                                            0634
*           RPLARG=RWORK2->RPLARG;  /* COPY PTR TO USERS ARG         */
         L     @15,RPLARG(,RWORK2)                                 0635
         ST    @15,RPLARG(,RRPL)                                   0635
*       IF WAXPUG=ON THEN           /* IF AIX IN UPGRADE SET         */
@RF00634 DS    0H                                                  0636
@RC00615 TM    WAXPUG(RWORK5),B'01000000'                          0636
         BNO   @RF00636                                            0636
*         DO;                                                      0637
*           RPLLOC=OFF;             /* USE MOVE MODE                 */
         NI    RPLLOC(RRPL),B'01111111'                            0638
*           RPLNSP=ON;              /* BUT NOTE STRING POSITION      */
         OI    RPLNSP(RRPL),B'00000001'                            0639
*           RPLAREA=WAXSRAA;        /* SET PTR TO RECORD AREA        */
         L     @15,WAXSRAA(,RWORK5)                                0640
         ST    @15,RPLAREA(,RRPL)                                  0640
*           WAXRCDA=WAXSRAA;        /* SET PTR TO RECORD             */
         ST    @15,WAXRCDA(,RWORK5)                                0641
*           RPLBUFL=WAXSRAL;        /* SET BUFFER LENGTH             */
         L     @15,WAXSRAL(,RWORK5)                                0642
         ST    @15,RPLBUFL(,RRPL)                                  0642
*         END;                                                     0643
*       ELSE                        /* IF AIX NOT IN UPGRADE SET     */
*         DO;                                                      0644
         B     @RC00636                                            0644
@RF00636 DS    0H                                                  0645
*           RPLLOC=ON;              /* USE LOCATE MODE               */
         OI    RPLLOC(RRPL),B'10000000'                            0645
*           RPLAREA=ADDR(WAXRCDA);  /* SET BUFFER ADDR               */
         LA    @15,WAXRCDA(,RWORK5)                                0646
         ST    @15,RPLAREA(,RRPL)                                  0646
*           RPLBUFL=LENGTH(WAXRCDA);/* SET BUFFER LENGTH             */
         MVC   RPLBUFL(4,RRPL),@CF00068                            0647
*         END;                                                     0648
*       IF RPLGEN=ON THEN           /* IF GENERIC KEY                */
@RC00636 TM    RPLGEN(RRPL),B'00000010'                            0649
         BNO   @RF00649                                            0649
*         RPLKEYL=RWORK2->RPLKEYL;  /* COPY GENERIC KEY LENGTH       */
         LH    @15,RPLKEYL(,RWORK2)                                0650
         STH   @15,RPLKEYL(,RRPL)                                  0650
*     END;                                                         0651
*   ELSE                            /* IF PROCESSING BASE            */
*     DO;                                                          0652
         B     @RC00606                                            0652
@RF00606 DS    0H                                                  0653
*       RPLOPT1=OFF;                /* ZERO OPT1                     */
         MVI   RPLOPT1(RRPL),B'00000000'                           0653
*       RPLOPT2=OFF;                /* ZERO OPT2                     */
         MVI   RPLOPT2(RRPL),B'00000000'                           0654
*       IF RWORK2->RPLLOC=ON THEN   /* IF USER WANTS LOC             */
         TM    RPLLOC(RWORK2),B'10000000'                          0655
         BNO   @RF00655                                            0655
*         RPLLOC=ON;                /* SET LOC IN INNER RPL          */
         OI    RPLLOC(RRPL),B'10000000'                            0656
*       IF RWORK2->RPLUPD=ON THEN   /* IF USER WANTS UPDATE          */
@RF00655 TM    RPLUPD(RWORK2),B'00000010'                          0657
         BNO   @RF00657                                            0657
*         RPLUPD=ON;                /* SET UPDATE                    */
         OI    RPLUPD(RRPL),B'00000010'                            0658
*       RPLREQ=RWORK2->RPLREQ;      /* COPY USERS REQUEST TYPE       */
@RF00657 IC    @15,RPLREQ(,RWORK2)                                 0659
         STC   @15,RPLREQ(,RRPL)                                   0659
*       IF RPLREQ=RPLPUT&           /* IF USER REQUESTED PUT         */
*           RWORK2->RPLDIR=OFF THEN /* IF NOT DIRECT, ALSO           */
         CLI   RPLREQ(RRPL),1                                      0660
         BNE   @RF00660                                            0660
         TM    RPLDIR(RWORK2),B'01000000'                          0660
         BNZ   @RF00660                                            0660
*         DO;                                                      0661
*           IF RPLUPD=ON THEN       /* IF UPDATE, ALSO               */
         TM    RPLUPD(RRPL),B'00000010'                            0662
         BNO   @RF00662                                            0662
*             RPLSEQ=ON;            /* DO NOT FORCE BUFFER WRITE     */
         OI    RPLSEQ(RRPL),B'00100000'                            0663
*           ELSE                    /* IF NONE OF THE ABOVE          */
*             DO;                                                  0664
         B     @RC00662                                            0664
@RF00662 DS    0H                                                  0665
*               RPLNSP=ON;          /* TRY NOT TO FORCE BUFFER WRITE */
         OI    RPLNSP(RRPL),B'00000001'                            0665
*               RPLDIR=ON;          /* PROCESS BASE DIRECT           */
         OI    RPLDIR(RRPL),B'01000000'                            0666
*             END;                                                 0667
*         END;                                                     0668
@RC00662 DS    0H                                                  0669
*       IF AMBLNUM=ESDSNUM1 THEN    /* IF ESDS                       */
@RF00660 CLC   AMBLNUM(2,RPARM1),@CH00054                          0669
         BNE   @RF00669                                            0669
*         RPLADR=ON;                /* DO ADDRESSED PROCESSING       */
         OI    RPLADR(RRPL),B'01000000'                            0670
*       ELSE                        /* ELSE KSDS                     */
*         RPLKEY=ON;                /* BASE PROC IS BY KEY           */
         B     @RC00669                                            0671
@RF00669 OI    RPLKEY(RRPL),B'10000000'                            0671
*       RPLECBSW=ON;                /* USE EXTERNAL ECB              */
@RC00669 OI    RPLECBSW(RRPL),B'00000001'                          0672
*       IF RWORK2->RPLECBSW=ON THEN /* IF USER HAS EXTERNAL ECB      */
         TM    RPLECBSW(RWORK2),B'00000001'                        0673
         BNO   @RF00673                                            0673
*         RPLECB=RWORK2->RPLECB;    /* POINT TO USERS EXTERNAL ECB   */
         L     @15,RPLECB(,RWORK2)                                 0674
         ST    @15,RPLECB(,RRPL)                                   0674
*       ELSE                        /* IF USER HAS INTERNAL ECB      */
*         RPLECB=ADDR(RWORK2->RPLECB);/* POINT TO INTERNAL ECB       */
         B     @RC00673                                            0675
@RF00673 LA    @15,RPLECB(,RWORK2)                                 0675
         ST    @15,RPLECB(,RRPL)                                   0675
*       RPLAREA=RWORK2->RPLAREA;    /* COPY USERS AREA               */
@RC00673 L     @15,RPLAREA(,RWORK2)                                0676
         ST    @15,RPLAREA(,RRPL)                                  0676
*       RPLBUFL=RWORK2->RPLBUFL;    /* COPY USERS BUFFER LENGTH      */
         L     @15,RPLBUFL(,RWORK2)                                0677
         ST    @15,RPLBUFL(,RRPL)                                  0677
*       RPLRLEN=RWORK2->RPLRLEN;    /* COPY USERS BUFFER LENGTH      */
         L     @15,RPLRLEN(,RWORK2)                                0678
         ST    @15,RPLRLEN(,RRPL)                                  0678
*       RPLARG=WAXXPTR;             /* POINT TO SEARCH ARG           */
         L     @15,WAXXPTR(,RWORK5)                                0679
         ST    @15,RPLARG(,RRPL)                                   0679
*     END;                                                         0680
*   IF RWORK2->RPLASY=ON THEN       /* IF USERS RPLASY ON    @ZA29260*/
@RC00606 TM    RPLASY(RWORK2),B'00001000'                          0681
         BNO   @RF00681                                            0681
*     RPLASY=ON;                    /* SET INNER RPLASY ON   @ZA29260*/
         OI    RPLASY(RRPL),B'00001000'                            0682
*   RPLEMLEN=RWORK2->RPLEMLEN;      /* COPY USERS ERROR MSG AREA LEN */
@RF00681 LH    @15,RPLEMLEN(,RWORK2)                               0683
         N     @15,@CF01315                                        0683
         STH   @15,RPLEMLEN(,RRPL)                                 0683
*   RPLERMSA=RWORK2->RPLERMSA;      /* COPY USER ERROR MSG AREA ADDR */
         L     @15,RPLERMSA(,RWORK2)                               0684
         ST    @15,RPLERMSA(,RRPL)                                 0684
*   RESPECIFY                                                      0685
*     RWORK2 UNRESTRICTED;                                         0685
*   RESPECIFY                                                      0686
*     R14 UNRESTRICTED;                                            0686
*   END SETIRPL;                                                   0687
@EL00012 DS    0H                                                  0687
@EF00012 DS    0H                                                  0687
@ER00012 BR    @14                                                 0687
         EJECT
*LOADREGS:                                                         0688
*                                                                  0688
*/********************************************************************/
*/* LOAD REGISTERS FOR CALL TO IDA019R4                              */
*/********************************************************************/
*                                                                  0688
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0688
LOADREGS DS    0H                                                  0689
*   RESPECIFY                                                      0689
*     R14 RESTRICTED;                                              0689
*   RRPL=RWORK1;                    /* POINT RPL REG TO INNER RPL    */
         LR    RRPL,RWORK1                                         0690
*   RPARM1=ACBAMBL;                 /* LOAD POINTER TO AMBL          */
         L     @15,RPLDACB(,RRPL)                                  0691
         L     RPARM1,ACBAMBL(,@15)                                0691
*   RESPECIFY                                                      0692
*     IDAAMBL BASED(RPARM1);                                       0692
*   RAMB=AMBLDTA;                   /* LOAD POINTER TO DATA AMB      */
         L     RAMB,AMBLDTA(,RPARM1)                               0693
*   IF AMBLBASE=ON THEN             /* IF PROC BASE                  */
         TM    AMBLBASE(RPARM1),B'00010000'                        0694
         BNO   @RF00694                                            0694
*     DO;                                                          0695
*       IF WAXBPLH=0 THEN           /* IF NO BASE PLH CONNECTED      */
         SLR   @15,@15                                             0696
         C     @15,WAXBPLH(,RWORK5)                                0696
         BNE   @RF00696                                            0696
*         DO;                                                      0697
*           WAXXXXX3=RPLH;          /* SAVE PTR TO PATH PLH          */
         ST    RPLH,WAXXXXX3(,RWORK5)                              0698
*           RPLPLHPT=0;             /* ZERO PLH PTR IN RPL           */
         ST    @15,RPLPLHPT(,RRPL)                                 0699
*           GEN(IDASVR14);          /* SAVE RETURN ADDRESS           */
         IDASVR14
*I03:                                                              0701
*           DO;                     /* IDACALL(IDAXGPLH)             */
I03      DS    0H                                                  0702
*             CALL IDAXGPLH;        /* EXIT TO IDAXGPLH              */
         L     @15,@CV01117                                        0702
         BALR  @14,@15                                             0702
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(USING *+4095,R10);/* ESTABLISH SECOND BASE         */
         USING *+4095,R10
*             GEN(LA    R10,4095(@11));/* LOAD SECOND BASE           */
         LA    R10,4095(@11)
*             GEN(L     R10,=A(@PSTART+4095));/* RELOAD SECOND BASE  */
         L     R10,=A(@PSTART+4095)
*             GEN(USING @PSTART+4095,R10);/* ESTABLISH SECOND BASE   */
         USING @PSTART+4095,R10
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I03;                /* GET PLH FROM BASE             */
*           RPARM1=ACBAMBL;         /* RESTORE AMBL POINTER          */
         L     @15,RPLDACB(,RRPL)                                  0712
         L     RPARM1,ACBAMBL(,@15)                                0712
*           WAXBPLH=RPLH;           /* SAVE NEW BASE PLH ADDR        */
         ST    RPLH,WAXBPLH(,RWORK5)                               0713
*           RPLH=WAXXXXX3;          /* RESTORE OLD PLH               */
         L     RPLH,WAXXXXX3(,RWORK5)                              0714
*           GEN(IDARST14);          /* RESTORE RETURN ADDRESS        */
         IDARST14
*           RWORK1=WAXIRPL;         /* RESTORE INNER RPL POINTER     */
         L     RWORK1,WAXIRPL(,RWORK5)                             0716
*           IF WAXBPLH=0 THEN       /* IF NO PLH WAS AVAILABLE       */
         L     @15,WAXBPLH(,RWORK5)                                0717
         LTR   @15,@15                                             0717
         BNZ   @RF00717                                            0717
*             DO;                                                  0718
*               RRPL=WAXURPL;       /* RESTORE PTR TO USERS RPL      */
         L     RRPL,WAXURPL(,RWORK5)                               0719
*               RPARM1=ACBAMBL->AMBLXPT;/* POINT TO USERS AMBL       */
         L     @15,RPLDACB(,RRPL)                                  0720
         L     @15,ACBAMBL(,@15)                                   0720
         L     RPARM1,AMBLXPT(,@15)                                0720
*               RAMB=AMBLDTA;       /* RESTORE AMBL POINTER          */
         L     RAMB,AMBLDTA(,RPARM1)                               0721
*               RWORK1->RPLERRCD=RPLNOPLH;/* SET ERROR CODE          */
         MVI   RPLERRCD(RWORK1),X'40'                              0722
*               RWORK1->RPLERREG='08'X;/* SET ERROR REGISTER         */
         MVI   RPLERREG(RWORK1),X'08'                              0723
*               RWORK1->RPLCMPON=RPLBASER;/* SET ERROR FROM BASE     */
         MVI   RPLCMPON(RWORK1),X'00'                              0724
*               RETURN CODE(RPLERREG);/* PROCEED TO EXIT             */
         SLR   @15,@15                                             0725
         IC    @15,RPLERREG(,RRPL)                                 0725
@EL00013 DS    0H                                                  0725
@EF00013 DS    0H                                                  0725
@ER00013 BR    @14                                                 0725
*             END;                                                 0726
*           RPLH=WAXBPLH;           /* LOAD BASE PLH                 */
@RF00717 L     RPLH,WAXBPLH(,RWORK5)                               0727
*           PLHXPLH=WAXXXXX3;       /* SET BASE PLH PTR BACK         */
         L     @15,WAXXXXX3(,RWORK5)                               0728
         ST    @15,PLHXPLH(,RPLH)                                  0728
*         END;                                                     0729
*       ELSE                        /* IF BASE PLH IS AVAILABLE      */
*         RPLH=WAXBPLH;             /* LOAD POINTER TO PLH           */
         B     @RC00696                                            0730
@RF00696 L     RPLH,WAXBPLH(,RWORK5)                               0730
*     END;                                                         0731
@RC00696 DS    0H                                                  0732
*   RESPECIFY                                                      0732
*     IFGRPL BASED(RRPL);                                          0732
@RF00694 DS    0H                                                  0733
*   RWORK1->RPLPLHPT=ADDR(IDAPLH);  /* SET POINTER TO PLH IN RPL     */
         ST    RPLH,RPLPLHPT(,RWORK1)                              0733
*   RESPECIFY                                                      0734
*     IDAAMBL BASED(ACBAMBL);                                      0734
*   RESPECIFY                                                      0735
*     R14 UNRESTRICTED;                                            0735
*   END LOADREGS;                                                  0736
         B     @EL00013                                            0736
         EJECT
*RELSRA:                                                           0737
*                                                                  0737
*/********************************************************************/
*/* RELEASE SAVED AIX RECORD AREA                                    */
*/********************************************************************/
*                                                                  0737
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0737
RELSRA   DS    0H                                                  0738
*   GEN(IDASVR14);                  /* SAVE RETURN ADDRESS           */
         IDASVR14
*   RWORK1=WAXSRAA;                 /* POINT TO START OF SRA         */
         L     RWORK1,WAXSRAA(,RWORK5)                             0739
*   RESPECIFY                                                      0740
*     RWORK2 RESTRICTED;                                           0740
*   RWORK2=WAXSRAL;                 /* SET LENGTH OF SRA             */
         L     RWORK2,WAXSRAL(,RWORK5)                             0741
*   CALL RELWS;                     /* RELEASE THE WORK SPACE        */
         BAL   @14,RELWS                                           0742
*   RESPECIFY                                                      0743
*     RWORK2 UNRESTRICTED;                                         0743
*   RWORK5=PLHWAX;                  /* RESTORE IDAWAX BASE           */
         L     RWORK5,PLHWAX(,RPLH)                                0744
*   RWORK1=WAXIRPL;                 /* RESTORE INNER RPL BASE        */
         L     RWORK1,WAXIRPL(,RWORK5)                             0745
*   WAXSRAB=OFF;                    /* RESET FLAG                    */
         NI    WAXSRAB(RWORK5),B'01111111'                         0746
*   GEN(IDARST14);                  /* RESTORE RETURN ADDRESS        */
         IDARST14
*   END RELSRA;                                                    0748
@EL00014 DS    0H                                                  0748
@EF00014 DS    0H                                                  0748
@ER00014 BR    @14                                                 0748
         EJECT
*GETSRA:                                                           0749
*                                                                  0749
*/********************************************************************/
*/* BUILD SAVED AIX RECORD AREA                                      */
*/********************************************************************/
*                                                                  0749
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0749
GETSRA   DS    0H                                                  0750
*   GEN(IDASVR14);                  /* SAVE RETURN ADDRESS           */
         IDASVR14
*   WAXSRAL=RWORK1;                 /* SAVE LENGTH OF SRA            */
         ST    RWORK1,WAXSRAL(,RWORK5)                             0751
*   RESPECIFY                                                      0752
*     R15 RESTRICTED;                                              0752
*   CALL GETWS;                     /* GET CORE FOR LARGEST RECORD   */
         BAL   @14,GETWS                                           0753
*   RWORK5=PLHWAX;                  /* RELOAD BASE FOR IDAWAX        */
         L     RWORK5,PLHWAX(,RPLH)                                0754
*   WAXSRAA=RWORK1;                 /* SAVE ADDR OF SPANNED RCD AREA */
         ST    RWORK1,WAXSRAA(,RWORK5)                             0755
*   WAXRCDA=RWORK1;                 /* SAVE RECORD ADDRESS           */
         ST    RWORK1,WAXRCDA(,RWORK5)                             0756
*   RPLAREA=RWORK1;                 /* SET INPUT ADDRESS             */
         ST    RWORK1,RPLAREA(,RRPL)                               0757
*   RPLBUFL=WAXSRAL;                /* SET INPUT AREA LENGTH         */
         L     @14,WAXSRAL(,RWORK5)                                0758
         ST    @14,RPLBUFL(,RRPL)                                  0758
*   RWORK1=WAXIRPL;                 /* RESTORE RPL ADDRESS           */
         L     RWORK1,WAXIRPL(,RWORK5)                             0759
*   RRPL=WAXURPL;                   /* RRPL PTS USER RPL     @ZA25153*/
         L     RRPL,WAXURPL(,RWORK5)                               0760
*   IF R15^=0 THEN                  /* IF NO CORE                    */
         LTR   R15,R15                                             0761
         BZ    @RF00761                                            0761
*     DO;                                                          0762
*       IF RWORK1->RPLERRCD=0 THEN  /* IF FIRST ERROR        @ZA10853*/
         CLI   RPLERRCD(RWORK1),0                                  0763
         BNE   @RF00763                                            0763
*         DO;                                                      0764
*           RWORK1->RPLERRCD=RPLNOVRT;/* NO CORE             @ZA10853*/
         MVI   RPLERRCD(RWORK1),X'28'                              0765
*           RWORK1->RPLERREG='08'X; /* LOGICAL ERROR         @ZA10853*/
         MVI   RPLERREG(RWORK1),X'08'                              0766
*         END;                      /*                       @ZA10853*/
*       RWORK1->RPLCMPON=RPLAIXER;  /* WHILE PROCESSING AIX  @ZA10853*/
@RF00763 MVI   RPLCMPON(RWORK1),X'02'                              0768
*       GEN(IDARST14);              /* RETURN REGISTER       @ZA10853*/
         IDARST14
*       RETURN CODE(RWORK1->RPLERREG);/* EXIT WITH ERROR     @ZA10853*/
         SLR   @15,@15                                             0770
         IC    @15,RPLERREG(,RWORK1)                               0770
@EL00015 DS    0H                                                  0770
@EF00015 DS    0H                                                  0770
@ER00015 BR    @14                                                 0770
*     END;                                                         0771
*   RESPECIFY                                                      0772
*     R15 UNRESTRICTED;                                            0772
@RF00761 DS    0H                                                  0773
*   WAXSRAB=ON;                     /* INDICATE SRA BUILT            */
         OI    WAXSRAB(RWORK5),B'10000000'                         0773
*   GEN(IDARST14);                  /* RESTORE RETURN ADDRESS        */
         IDARST14
*   END GETSRA;                                                    0775
         B     @EL00015                                            0775
         EJECT
*CALLR4:                                                           0776
*                                                                  0776
*/********************************************************************/
*/*  INTERFACE WITH IDA019R4                                         */
*/********************************************************************/
*                                                                  0776
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0776
CALLR4   DS    0H                                                  0777
*   GEN(IDASVR14);                  /* SAVE RETURN ADDRESS           */
         IDASVR14
*I04:                                                              0778
*   DO;                             /* IDACALL(IDA019R4)             */
I04      DS    0H                                                  0779
*     CALL IDA019R4;                /* EXIT TO IDA019R4              */
         L     @15,@CV01118                                        0779
         BALR  @14,@15                                             0779
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(USING *+4095,R10);        /* ESTABLISH SECOND BASE         */
         USING *+4095,R10
*     GEN(LA    R10,4095(@11));     /* LOAD SECOND BASE              */
         LA    R10,4095(@11)
*     GEN(L     R10,=A(@PSTART+4095));/* RELOAD SECOND BASE          */
         L     R10,=A(@PSTART+4095)
*     GEN(USING @PSTART+4095,R10);  /* ESTABLISH SECOND BASE         */
         USING @PSTART+4095,R10
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I04;                        /* CALL IDA019R4                 */
*                                                                  0788
*   /*****************************************************************/
*   /*                                                               */
*   /* RESTORE REGISTERS FOR FUTHER PROCESSING                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0789
*   RESPECIFY                                                      0789
*     R14 RESTRICTED;                                              0789
*   IF RPLDACB->ACBAMBL->AMBLPATH=OFF THEN/* IF PROCESSING BASE ACB  */
         L     @15,RPLDACB(,RRPL)                                  0790
         L     @15,ACBAMBL(,@15)                                   0790
         TM    AMBLPATH(@15),B'10000000'                           0790
         BNZ   @RF00790                                            0790
*     DO;                           /* START CODE UNIQUE TO BASE     */
*                                                                  0791
*       /*************************************************************/
*       /*                                                           */
*       /* FORCE OUT WRITES TO BASE TO MINIMIZE SEEK TIME SINCE IT IS*/
*       /* PROBABLE THAT THE NEXT REQUEST TO THE BASE WILL BE IN A   */
*       /* DIFFERENT CONTROL AREA.                                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0792
*       RBUFC=PLHDBUFC;             /* POINT TO DATA BUFFER          */
         L     RBUFC,PLHDBUFC(,RPLH)                               0792
*       IF RBUFC^=0&                /* IF BUFFER IS ASSIGNED AND     */
*           BUFCMW=ON&              /* IF IT HAS BEEN CHANGED AND    */
*           AMBDFR=OFF THEN         /* IF I/O IS NOT DEFERRED THEN   */
         LTR   RBUFC,RBUFC                                         0793
         BZ    @RF00793                                            0793
         TM    BUFCMW(RBUFC),B'10000000'                           0793
         BNO   @RF00793                                            0793
         TM    AMBDFR(RAMB),B'00001000'                            0793
         BNZ   @RF00793                                            0793
*I05:                                                              0794
*         DO;                       /* IDACALL(IDAWRBFR)             */
I05      DS    0H                                                  0795
*           CALL IDAWRBFR;          /* EXIT TO IDAWRBFR              */
         L     @15,@CV01216                                        0795
         BALR  @14,@15                                             0795
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(USING *+4095,R10);  /* ESTABLISH SECOND BASE         */
         USING *+4095,R10
*           GEN(LA    R10,4095(@11));/* LOAD SECOND BASE             */
         LA    R10,4095(@11)
*           GEN(L     R10,=A(@PSTART+4095));/* RELOAD SECOND BASE    */
         L     R10,=A(@PSTART+4095)
*           GEN(USING @PSTART+4095,R10);/* ESTABLISH SECOND BASE     */
         USING @PSTART+4095,R10
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I05;                  /* WRITE BUFFER CONTENTS         */
*       GEN(IDARST14);              /* RESTORE RETURN REGISTER       */
@RF00793 DS    0H                                                  0805
         IDARST14
*       RPLH=PLHXPLH;               /* RESTORE POINTER TO PATH PLH   */
         L     RPLH,PLHXPLH(,RPLH)                                 0806
*     END;                          /* END CODE UNIQUE TO BASE       */
*   ELSE                            /* NOT BASE ACCESS               */
*     GEN(IDARST14);                /* RESTORE RETURN REGISTER       */
         B     @RC00790                                            0808
@RF00790 DS    0H                                                  0808
         IDARST14
*   RWORK5=PLHWAX;                  /* RESTORE IDAWAX BASE           */
@RC00790 L     RWORK5,PLHWAX(,RPLH)                                0809
*   RWORK1=RRPL;                    /* RESTORE POINTER TO INNER RPL  */
         LR    RWORK1,RRPL                                         0810
*   RRPL=WAXURPL;                   /* RESTROE POINTER TO USERS RPL  */
         L     RRPL,WAXURPL(,RWORK5)                               0811
*   RPARM1=ACBAMBL;                 /* RESTORE POINTER TO AMBL       */
         L     @15,RPLDACB(,RRPL)                                  0812
         L     @15,ACBAMBL(,@15)                                   0812
         LR    RPARM1,@15                                          0812
*   RAMB=AMBLDTA;                   /* RESTORE POINTER TO DATA AMB   */
         L     RAMB,AMBLDTA(,@15)                                  0813
*   END CALLR4;                                                    0814
@EL00016 DS    0H                                                  0814
@EF00016 DS    0H                                                  0814
@ER00016 BR    @14                                                 0814
*   RESPECIFY                                                      0815
*     R14 UNRESTRICTED;                                            0815
         EJECT
*IDARXBD:                                                          0816
*                                                                  0816
*/********************************************************************/
*/* ENTRY POINT - FROM IDA019R4 TO EXPAND RPLBUFL                    */
*/*   INPUT = NEW RECORD LENGTH IN RPLRLEN                           */
*/*   OUTPUT = IF SUCCESSFUL, RWORK1 HAS NEW RPLBUFL                 */
*/*            IF UNSUCCESSFUL, RWORK1 HAS ZERO                      */
*/********************************************************************/
*                                                                  0816
*   ENTRY;                          /* CALL FROM R4 - EXPAND RPLBUFL */
@EP00816 DS    0H                                                  0817
*   GEN(IDASVR14);                  /* SAVE RETURN ADDRESS           */
         IDASVR14
*   RWORK5=PLHWAX;                  /* LOAD BASE FOR WAX             */
         L     RWORK5,PLHWAX(,RPLH)                                0818
*   IF WAXSRAB=ON THEN              /* IF SRA ALREADY BUILD          */
         TM    WAXSRAB(RWORK5),B'10000000'                         0819
         BNO   @RF00819                                            0819
*     CALL RELSRA;                  /* FREE CURRENT SRA              */
         BAL   @14,RELSRA                                          0820
*   RWORK1=RPLRLEN;                 /* RELOAD NEW RECORD LENGTH      */
@RF00819 L     RWORK1,RPLRLEN(,RRPL)                               0821
*   CALL GETSRA;                    /* BUILD NEW SRA                 */
         BAL   @14,GETSRA                                          0822
*   IF WAXSRAB=OFF THEN             /* IF SRA WAS NOT BUILT          */
         TM    WAXSRAB(RWORK5),B'10000000'                         0823
         BNZ   @RF00823                                            0823
*     RWORK1=0;                     /* SAY FAIL TO IDA019R4          */
         SLR   RWORK1,RWORK1                                       0824
*   ELSE                            /* IF SRA WAS BUILT              */
*     DO;                                                          0825
         B     @RC00823                                            0825
@RF00823 DS    0H                                                  0826
*       RRPL=WAXIRPL;               /* RESTORE INNER RPL POINTER     */
         L     RRPL,WAXIRPL(,RWORK5)                               0826
*       RBUFC=WAXSRAA;              /* LOAD REGISTER FOR IDA019R4    */
         L     RBUFC,WAXSRAA(,RWORK5)                              0827
*       RWORK1=WAXSRAL;             /* LOAD LEN OF SRA FOR IDA019R4  */
         L     RWORK1,WAXSRAL(,RWORK5)                             0828
*     END;                                                         0829
*   RESPECIFY                                                      0830
*     RWORK2 RESTRICTED;                                           0830
@RC00823 DS    0H                                                  0831
*   RWORK2=PLHRECP;                 /* RELOAD RECORD PTR             */
         L     RWORK2,PLHRECP(,RPLH)                               0831
*   RESPECIFY                                                      0832
*     RWORK2 UNRESTRICTED;                                         0832
*   GEN(IDARST14);                  /* RESTORE RETURN ADDRESS        */
         IDARST14
*   RETURN;                         /* RETURN TO IDA019R4            */
         B     @EL00001                                            0834
         EJECT
*IDAGETWS:                                                         0835
*                                                                  0835
*/********************************************************************/
*/*  EXTERNAL ROUTINE TO GET WORK SPACE                              */
*/*   INPUT = LENGTH OF SPACE REQUIRED IN RWORK1                     */
*/*   OUTPUT = IF SUCCESSFUL, R15 IS ZERO                            */
*/*                           RWORK1 HAS ADDRESS OF SPACE            */
*/*            IF UNSUCCESSFUL, R15 IS NON-ZERO                      */
*/********************************************************************/
*                                                                  0835
*   ENTRY;                          /* EXTERNAL ENTRY                */
@EP00835 DS    0H                                                  0836
*GETWS:                                                            0836
*   ;                               /* INTERNAL ENTRY                */
GETWS    DS    0H                                                  0837
*   RESPECIFY                                                      0837
*    (RWORK1,                                                      0837
*     RWORK2,                                                      0837
*     RWORK3,                                                      0837
*     RWORK4) RESTRICTED;                                          0837
*   GEN REFS(PLHRETO,PLHRET1)(IDASVR14);/* SAVE RETURN ADDRESS       */
         IDASVR14
*   PLHAMB=RAMB;                    /* SAVE POINTER TO AMB           */
         ST    RAMB,PLHAMB(,RPLH)                                  0839
*   RESPECIFY                                                      0840
*     IDAAMB BASED(PLHAMB);                                        0840
*   RAMB=(RWORK1+LENGTH(RFLD)+7)&(-8);/* ROUND UP STARTING LENGTH    */
         LA    RAMB,11                                             0841
         ALR   RAMB,RWORK1                                         0841
         N     RAMB,@CF01227                                       0841
*   RWORK1=WSHDOCHN;                /* GET FIRST SLOT IN ORDERED CHN */
         L     @15,PLHAMB(,RPLH)                                   0842
         L     @15,AMBWSHD(,@15)                                   0842
         L     RWORK1,WSHDOCHN(,@15)                               0842
*   RESPECIFY                                                      0843
*     IDAWSHD BASED(RWORK1);                                       0843
*   DO WHILE RWORK1^=0;             /* LOOP THRU ORDERED CHN         */
         B     @DE00844                                            0844
@DL00844 DS    0H                                                  0845
*     IF WSHDSFNO=OFF THEN          /* IF ANY CORE IN SLOT           */
         TM    WSHDSFNO(RWORK1),B'10000000'                        0845
         BNZ   @RF00845                                            0845
*       DO;                         /* YES, --                       */
*         RESPECIFY                                                0847
*          (RWORK3,                                                0847
*           RWORK4) UNRESTRICTED;                                  0847
*         RWORK2=(RAMB+WSHDSBV-1)/WSHDSBV;/* BITS FOR CORE NEEDED    */
         LH    @08,WSHDSBV(,RWORK1)                                0848
         LR    RWORK2,RAMB                                         0848
         ALR   RWORK2,@08                                          0848
         BCTR  RWORK2,0                                            0848
         SRDA  RWORK2,32                                           0848
         DR    RWORK2,@08                                          0848
         LR    RWORK2,@07                                          0848
*         RESPECIFY                                                0849
*          (RWORK3,                                                0849
*           RWORK4) RESTRICTED;                                    0849
*         IF RWORK2<='08'X THEN     /* CORE NEEDED FIT IN SLOT       */
         CL    RWORK2,@CF01131                                     0850
         BH    @RF00850                                            0850
*           DO;                     /* YES, --                       */
*             RWORK4=STMASK(RWORK2);/* LOAD STARTING MASK            */
         SLR   RWORK4,RWORK4                                       0852
         IC    RWORK4,STMASK-1(RWORK2)                             0852
*             RWORK2=9-RWORK2;      /* LOAD LOOP COUNT               */
         LA    @15,9                                               0853
         SLR   @15,RWORK2                                          0853
         LR    RWORK2,@15                                          0853
*             RWORK3=RWORK4;        /* COPY STARTING MASK            */
*                                                                  0854
         LR    RWORK3,RWORK4                                       0854
*             /*******************************************************/
*             /*                                                     */
*             /* TRY TO FIND CONTIGUOUS BIT '0'B IN WSHDSBM          */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0855
*             DO RWORK2=RWORK2 TO 1 BY-1;                          0855
         B     @DE00855                                            0855
@DL00855 DS    0H                                                  0856
*               GEN;                                               0856
         L     R14,WSHDSBM-3(RWORK1)    WORD W/ BIT MASK     @ZA04712
         EX    RWORK3,TM                ISSUE TEST UNDER MASK
         BNZ   ARND1                    BR IF SOME ONES UNDER MASK
         LR    R15,R14                  COPY WORD
         OR    R15,RWORK3               OR BITS REPRESENTING CORE
         CS    R14,R15,WSHDSBM-3(RWORK1) TRY TO SET BITS IN MASK
         BE    ALCORE                   BR OUT IF CORE ALLOCATED
ARND1    SRL   RWORK3,1                 SHIFT MASK
*             END;                                                 0857
         BCTR  RWORK2,0                                            0857
@DE00855 CL    RWORK2,@CF00054                                     0857
         BNL   @DL00855                                            0857
*           END;                                                   0858
*       END;                                                       0859
@RF00850 DS    0H                                                  0860
*     RWORK1=WSHDSONX;              /* LOAD ADDR NEXT SLOT           */
@RF00845 L     RWORK1,WSHDSONX(,RWORK1)                            0860
*   END;                                                           0861
*                                                                  0861
@DE00844 LTR   RWORK1,RWORK1                                       0861
         BNZ   @DL00844                                            0861
*   /*****************************************************************/
*   /*                                                               */
*   /* FIND UNUSED SLOT                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0862
*   RWORK1=AMBWSHD;                 /* LOAD PTR TO FIRST IDAWSHD     */
         L     @15,PLHAMB(,RPLH)                                   0862
         L     RWORK1,AMBWSHD(,@15)                                0862
*   DO UNTIL RWORK1=0;              /* LOOP THRU WSHD CHAIN          */
@DL00863 DS    0H                                                  0864
*     RWORK2=ADDR(IDAWSHD)+WSHDNUS*LENGTH(WSHDSLT);/* PT TO 1ST    0864
*                                      UNUSED SLOT                   */
         LH    @15,WSHDNUS(,RWORK1)                                0864
         LR    RWORK2,@15                                          0864
         SLA   RWORK2,4                                            0864
         ALR   RWORK2,RWORK1                                       0864
*     DO RWORK3=WSHDNUS+1 TO DIM(WSHDSLT);/* LOOP THRU UNUSED SLOTS  */
         AL    @15,@CF00054                                        0865
         LR    RWORK3,@15                                          0865
         B     @DE00865                                            0865
@DL00865 DS    0H                                                  0866
*       TS(RWORK2->WSHDSFLG);       /* TRY TO GET SLOT               */
         TS    WSHDSFLG(RWORK2)                                    0866
*       BC(8,ARND5);                /* BRANCH OUT IF SUCCESSFUL      */
         BC    8,ARND5                                             0867
*       RWORK2=RWORK2+LENGTH(WSHDSLT);/* POINT TO NEXT SLOT          */
         AL    RWORK2,@CF00088                                     0868
*     END;                                                         0869
         AL    RWORK3,@CF00054                                     0869
@DE00865 C     RWORK3,@CF00068                                     0869
         BNH   @DL00865                                            0869
*     RWORK1=WSHDNEXT;              /* POINT TO NEXT IDAWSHD         */
         L     @15,WSHDNEXT-1(,RWORK1)                             0870
         LA    @15,0(,@15)                                         0870
         LR    RWORK1,@15                                          0870
*   END;                                                           0871
@DE00863 LTR   RWORK1,RWORK1                                       0871
         BNZ   @DL00863                                            0871
*                                                                  0872
*   /*****************************************************************/
*   /*                                                               */
*   /* FIND WORK AREA TO DO GETMAIN FOR NEW IDAWSHD                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0872
*   IF AMBGSR=ON×                   /* IF RUNNING UNDER GSR OR       */
*       AMBSCRA=ON×AMBUCRA=ON×      /* IF A CATLG,                   */
*       AMBCAT=ON THEN              /*                               */
         L     @15,PLHAMB(,RPLH)                                   0872
         TM    AMBGSR(@15),B'00100000'                             0872
         BO    @RT00872                                            0872
         TM    AMBSCRA(@15),B'00011100'                            0872
         BZ    @RF00872                                            0872
@RT00872 DS    0H                                                  0873
*     R15=0;                        /* NO NEED TO TEST TCB           */
         SLR   R15,R15                                             0873
*   ELSE                            /* IF NOT GSR                    */
*     DO;                                                          0874
         B     @RC00872                                            0874
@RF00872 DS    0H                                                  0875
*       RWORK3=RAMB;                /* SAVE CONTENTS FOR OF RAMB     */
         LR    RWORK3,RAMB                                         0875
*       RAMB=ADDR(IDAAMB);          /* LOAD PTR TO AMB               */
         L     RAMB,PLHAMB(,RPLH)                                  0876
*       RESPECIFY                                                  0877
*         R15 RESTRICTED;                                          0877
*I06:                                                              0878
*       DO;                         /* IDACALL(IDAPTCBV)             */
I06      DS    0H                                                  0879
*         CALL IDAPTCBV;            /* EXIT TO IDAPTCBV              */
         L     @15,@CV01116                                        0879
         BALR  @14,@15                                             0879
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(USING *+4095,R10);    /* ESTABLISH SECOND BASE         */
         USING *+4095,R10
*         GEN(LA    R10,4095(@11)); /* LOAD SECOND BASE              */
         LA    R10,4095(@11)
*         GEN(L     R10,=A(@PSTART+4095));/* RELOAD SECOND BASE      */
         L     R10,=A(@PSTART+4095)
*         GEN(USING @PSTART+4095,R10);/* ESTABLISH SECOND BASE       */
         USING @PSTART+4095,R10
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I06;                    /* ANY TCB PROBLEM?              */
*       RAMB=RWORK3;                /* RESTORE CONTENTS OF RAMB      */
         LR    RAMB,RWORK3                                         0889
*     END;                                                         0890
*   IF R15=0 THEN                   /* IF NO ERROR                   */
@RC00872 LTR   R15,R15                                             0891
         BNZ   @RF00891                                            0891
*     DO;                                                          0892
*       RESPECIFY                                                  0893
*         R15 UNRESTRICTED;                                        0893
*FINDHWA:                                                          0894
*       RWORK1=AMBWSHD;             /* LOAD POINTER TO FIRST IDAWSHD */
FINDHWA  L     @15,PLHAMB(,RPLH)                                   0894
         L     RWORK1,AMBWSHD(,@15)                                0894
*       DO UNTIL RWORK1=0;          /* LOOP THRU IDAWSHD CHAIN       */
@DL00895 DS    0H                                                  0896
*         TS(WSHDGMTB);             /* TRY TO GET GETMAIN WORK AREA  */
         TS    WSHDGMTB(RWORK1)                                    0896
*         BC(8,ARND3);              /* BRANCH OUT IF SUCCESSFUL      */
         BC    8,ARND3                                             0897
*         RWORK1=WSHDNEXT;          /* POINT TO NEXT IDAWSHD         */
         L     @15,WSHDNEXT-1(,RWORK1)                             0898
         LA    @15,0(,@15)                                         0898
         LR    RWORK1,@15                                          0898
*       END;                                                       0899
*                                                                  0899
@DE00895 LTR   RWORK1,RWORK1                                       0899
         BNZ   @DL00895                                            0899
*       /*************************************************************/
*       /*                                                           */
*       /* DEFER REQUEST                                             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0900
*       RWORK1=AMBWSHD;             /* LOAD POINTER TO FIRST WSHD    */
         L     @15,PLHAMB(,RPLH)                                   0900
         L     RWORK1,AMBWSHD(,@15)                                0900
*       PLHDRRSC=ADDR(WSHDGMTB);    /* POINT TO TEST BYTE            */
         LA    @14,WSHDGMTB(,RWORK1)                               0901
         ST    @14,PLHDRRSC(,RPLH)                                 0901
*       PLHDRMSK='80'X;             /* SET DEFER REQUEST MASK        */
         MVI   PLHDRMSK(RPLH),X'80'                                0902
*       RESPECIFY                                                  0903
*         RWORK0 RESTRICTED;                                       0903
*       RWORK0=GENRES;              /* SET CODE FOR GENERAL RESOURCE */
         LA    RWORK0,16                                           0904
*       RWORK4=RAMB;                /* SAVE STARTING LENGTH          */
         LR    RWORK4,RAMB                                         0905
*       RAMB=PLHAMB;                /* RESTORE POINTER TO AMB        */
         LR    RAMB,@15                                            0906
*       RRPL=PLHCRPL;               /* RESTORE POINTER TO CURRENT RPL*/
         L     RRPL,PLHCRPL(,RPLH)                                 0907
*I07:                                                              0908
*       DO;                         /* IDACALL(IDADRQ)               */
I07      DS    0H                                                  0909
*         CALL IDADRQ;              /* EXIT TO IDADRQ                */
         L     @15,@CV01112                                        0909
         BALR  @14,@15                                             0909
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(USING *+4095,R10);    /* ESTABLISH SECOND BASE         */
         USING *+4095,R10
*         GEN(LA    R10,4095(@11)); /* LOAD SECOND BASE              */
         LA    R10,4095(@11)
*         GEN(L     R10,=A(@PSTART+4095));/* RELOAD SECOND BASE      */
         L     R10,=A(@PSTART+4095)
*         GEN(USING @PSTART+4095,R10);/* ESTABLISH SECOND BASE       */
         USING @PSTART+4095,R10
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I07;                    /* DEFER REQUEST                 */
*       RAMB=RWORK4;                /* RESTORE STARTING LENGTH       */
         LR    RAMB,RWORK4                                         0919
*       RESPECIFY                                                  0920
*         RWORK0 UNRESTRICTED;                                     0920
*       GOTO FINDHWA;               /* LOOP UNTIL WORK AREA IS FOUND */
         B     FINDHWA                                             0921
*ARND3:                                                            0922
*       IF AMBGSR=ON THEN           /* IF RUNNING UNDER GSR          */
ARND3    L     @15,PLHAMB(,RPLH)                                   0922
         TM    AMBGSR(@15),B'00100000'                             0922
         BNO   @RF00922                                            0922
*         RWORK4=GSRPOOL;           /* SET SUBPOOL FOR GSR           */
         LA    RWORK4,241                                          0923
*       ELSE                        /* IF NOT GSR                    */
*         RWORK4=USERPOOL;          /* LOAD SUBPOOL                  */
         B     @RC00922                                            0924
@RF00922 SLR   RWORK4,RWORK4                                       0924
*       RWORK3=ADDR(WSHDGMRA);      /* POINT TO RESULT AREA          */
@RC00922 LA    RWORK3,WSHDGMRA(,RWORK1)                            0925
*       RESPECIFY                                                  0926
*        (RWORK0,                                                  0926
*         R1,                                                      0926
*         R15) RESTRICTED;                                         0926
*       RWORK0=LENGTH(IDAWSHD);     /* LOAD LENGTH OF IDAWSHD        */
         LA    RWORK0,92                                           0927
*       R1=ADDR(WSHDGMWA);          /* POINT TO GETMAIN WORK AREA    */
         LA    R1,WSHDGMWA(,RWORK1)                                0928
*       GEN(GETMAIN EC,LV=(0),A=(RWORK3),SP=(RWORK4),MF=(E,(1)));  0929
         GETMAIN EC,LV=(0),A=(RWORK3),SP=(RWORK4),MF=(E,(1))
*       IF R15^=0 THEN              /* IF ANY ERROR                  */
         LTR   R15,R15                                             0930
         BNZ   @RT00930                                            0930
*         GOTO WSEXIT;              /* EXIT IDAGETWS                 */
*       RWORK2=WSHDGMRA;            /* LOAD RESULT ADDRESS           */
         L     RWORK2,WSHDGMRA(,RWORK1)                            0932
*       WSHDGMTB=0;                 /* RELEASE WORK AREA             */
         MVI   WSHDGMTB(RWORK1),X'00'                              0933
*       RWORK1=RWORK2;              /* LOAD BASE WITH RESULT ADDRESS */
         LR    RWORK1,RWORK2                                       0934
*       RESPECIFY                                                  0935
*        (RWORK0,                                                  0935
*         R1,                                                      0935
*         R15) UNRESTRICTED;                                       0935
*     END;                                                         0936
         EJECT
*   ELSE                            /* HERE FOR TCB PROBLEM          */
*                                                                  0937
*     /***************************************************************/
*     /*                                                             */
*     /* THERE EXISTS A TCB CONFLICT                                 */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0937
*     IF R15='08'X THEN             /* IF UNABLE TO CONTINUE         */
         B     @RC00891                                            0937
@RF00891 C     R15,@CF01131                                        0937
         BE    @RT00937                                            0937
*       GOTO WSEXIT;                /* EXIT IDAGETWS                 */
*     ELSE                          /* MUST BE RUNNING UNDER SUBTASK */
*       DO;                                                        0939
*         RPARM1=RRPL;              /* COPY PTR TO RPL               */
         LR    RPARM1,RRPL                                         0940
*         RWORK3=RAMB;              /* SAVE CONTENTS OF RAMB         */
         LR    RWORK3,RAMB                                         0941
*         RAMB=ADDR(IDAAMB);        /* LOAD PTR TO AMB               */
         L     RAMB,PLHAMB(,RPLH)                                  0942
*I08:                                                              0943
*         DO;                       /* IDACALL(IDAPGETM)             */
I08      DS    0H                                                  0944
*           CALL IDAPGETM;          /* EXIT TO IDAPGETM              */
         L     @15,@CV01115                                        0944
         BALR  @14,@15                                             0944
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(USING *+4095,R10);  /* ESTABLISH SECOND BASE         */
         USING *+4095,R10
*           GEN(LA    R10,4095(@11));/* LOAD SECOND BASE             */
         LA    R10,4095(@11)
*           GEN(L     R10,=A(@PSTART+4095));/* RELOAD SECOND BASE    */
         L     R10,=A(@PSTART+4095)
*           GEN(USING @PSTART+4095,R10);/* ESTABLISH SECOND BASE     */
         USING @PSTART+4095,R10
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I08;                  /* GET BLP                       */
*         RAMB=RWORK3;              /* RESTORE CONTENTS OF RAMB      */
         LR    RAMB,RWORK3                                         0954
*         RESPECIFY                                                0955
*           IDABLPRM BASED(R1);                                    0955
*         IF R1=0 THEN              /* IF GETMAIN FAILED             */
         LTR   R1,R1                                               0956
         BNZ   @RF00956                                            0956
*           RETURN CODE(4) TO WSEXIT;/* EXIT GETWS                   */
         LA    @14,WSEXIT                                          0957
         LA    @15,4                                               0957
         BR    @14                                                 0957
*         BLPGREQ=ON;               /* INDICATE GETMAIN REQUEST      */
@RF00956 OI    BLPGREQ(R1),B'10000000'                             0958
*         BLPGSZ=LENGTH(IDAWSHD);   /* INDICATE CORE NEEDED          */
         MVC   BLPGSZ(3,R1),@CF00281+1                             0959
*         BLPGSP=SVC0POOL;          /* GET JOB STEP POOL             */
         MVI   BLPGSP(R1),X'FA'                                    0960
*         RWORK2=ADDR(IDABLPRM);    /* SAVE POINTER TO WORK AREA     */
         LR    RWORK2,R1                                           0961
*         R1=ADDR(BLPOCODE);        /* POINT TO DUMMY ACB            */
         LA    @00,BLPOCODE(,R1)                                   0962
         LR    R1,@00                                              0962
*         RESPECIFY                                                0963
*           R15 RESTRICTED;                                        0963
*         SVC(19);                  /* GET JOB STEP CORE             */
         SVC   19                                                  0964
*         RWORK3=R15;               /* SAVE RETURN CODE              */
         LR    RWORK3,R15                                          0965
*         RESPECIFY                                                0966
*           R15 UNRESTRICTED;                                      0966
*         R1=RWORK2;                /* POINT TO WORK AREA            */
         LR    R1,RWORK2                                           0967
*         RWORK1=BLPGAD;            /* SAVE RESULT ADDRESS           */
         L     RWORK1,BLPGAD-1(,R1)                                0968
         LA    RWORK1,0(,RWORK1)                                   0968
*I09:                                                              0969
*         DO;                       /* IDACALL(IDAPFREE)             */
I09      DS    0H                                                  0970
*           CALL IDAPFREE;          /* EXIT TO IDAPFREE              */
         L     @15,@CV01114                                        0970
         BALR  @14,@15                                             0970
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(USING *+4095,R10);  /* ESTABLISH SECOND BASE         */
         USING *+4095,R10
*           GEN(LA    R10,4095(@11));/* LOAD SECOND BASE             */
         LA    R10,4095(@11)
*           GEN(L     R10,=A(@PSTART+4095));/* RELOAD SECOND BASE    */
         L     R10,=A(@PSTART+4095)
*           GEN(USING @PSTART+4095,R10);/* ESTABLISH SECOND BASE     */
         USING @PSTART+4095,R10
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I09;                  /* FREE WORK AREA                */
*         IF RWORK3^=0 THEN         /* IF ANY ERROR                  */
         LTR   RWORK3,RWORK3                                       0980
         BZ    @RF00980                                            0980
*           RETURN CODE(4) TO WSEXIT;/* EXIT GETWS                   */
         LA    @14,WSEXIT                                          0981
         LA    @15,4                                               0981
         BR    @14                                                 0981
*       END;                                                       0982
@RF00980 DS    0H                                                  0983
         EJECT
*                                                                  0983
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE NEW IDAWSHD                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0983
*   IDAWSHD=IDAWSHD&&IDAWSHD;       /* ZERO OUT NEW CORE             */
@RC00891 XC    IDAWSHD(92,RWORK1),IDAWSHD(RWORK1)                  0983
*   WSHDID='44'X;                   /* SET ID                        */
         MVI   WSHDID(RWORK1),X'44'                                0984
*   WSHDLEN=LENGTH(IDAWSHD);        /* SET BLOCK LENGTH              */
         MVC   WSHDLEN(2,RWORK1),@CH00281                          0985
*   IF AMBGSR=ON THEN               /* IF RUNNING UNDER GSR          */
         L     @15,PLHAMB(,RPLH)                                   0986
         TM    AMBGSR(@15),B'00100000'                             0986
         BNO   @RF00986                                            0986
*     WSHDPOOL=GSRPOOL;             /* SET GSR SUBPOOL               */
         MVI   WSHDPOOL(RWORK1),X'F1'                              0987
*   ELSE                            /* IF NOT GSR                    */
*     WSHDPOOL=SVC0POOL;            /* SET SUBPOOL                   */
         B     @RC00986                                            0988
@RF00986 MVI   WSHDPOOL(RWORK1),X'FA'                              0988
*   WSHDSFLG='FF'X;                 /* RESERVE FIRST SLOT            */
*                                                                  0989
@RC00986 MVI   WSHDSFLG(RWORK1),X'FF'                              0989
*   /*****************************************************************/
*   /*                                                               */
*   /* ADD IDAWSHD TO END OF IDAWSHD CHAIN                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0990
*   RWORK2=AMBWSHD;                 /* LOAD POINTER TO FIRST IDAWSHD */
         L     @15,PLHAMB(,RPLH)                                   0990
         L     RWORK2,AMBWSHD(,@15)                                0990
*ARND4:                                                            0991
*   RWORK3=0;                       /* ZERO RWORK3 FOR MODEL         */
ARND4    SLR   RWORK3,RWORK3                                       0991
*   DO WHILE RWORK2->WSHDNEXT^=RWORK3;/* LOOK FOR LAST WSHD          */
         B     @DE00992                                            0992
@DL00992 DS    0H                                                  0993
*     RWORK2=RWORK2->WSHDNEXT;      /* LOAD POINTER TO NEXT IDAWSHD  */
         L     @00,WSHDNEXT-1(,RWORK2)                             0993
         ICM   @00,8,@CB01316                                      0993
         LR    RWORK2,@00                                          0993
*   END;                                                           0994
@DE00992 L     @00,WSHDNEXT-1(,RWORK2)                             0994
         ICM   @00,8,@CB01316                                      0994
         CR    RWORK3,@00                                          0994
         BNE   @DL00992                                            0994
*   CS(RWORK3,RWORK1,RWORK2->WSHDACHN);/* TRY TO ADD TO CHAIN        */
         CS    RWORK3,@05,WSHDACHN(RWORK2)                         0995
*   BC(4,ARND4);                    /* BRANCH IF FAIL                */
         BC    4,ARND4                                             0996
*   RWORK2=RWORK1;                  /* RWORK2 MUST BE BASE FOR SLOT  */
*                                                                  0997
         LR    RWORK2,RWORK1                                       0997
*   /*****************************************************************/
*   /*                                                               */
*   /* BUMP NUMBER OF USED SLOTS (WSHDNUS). RWORK1 POINTS TO IDAWSHD.*/
*   /* RWORK2 POINTS TO SLOT.                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0998
*ARND5:                                                            0998
*   GEN;                                                           0998
ARND5    DS    0H                                                  0998
         L     RWORK3,WSHDNUS-2(RWORK1) LOAD WORD WITH WSHDNUS
         LA    RWORK4,1(RWORK3)        BUMP WSHDNUS
         CS    RWORK3,RWORK4,WSHDNUS-2(RWORK1) SWAP IN NEW WSHDNUS
         BNE   ARND5                   BRANCH IF FAIL TO SWAP
         EJECT
*   IF AMBGSR=ON×                   /* IF RUNNING UNDER GSR OR       */
*       AMBSCRA=ON×AMBUCRA=ON×      /* IF A CATLG,                   */
*       AMBCAT=ON THEN              /*                               */
         L     @15,PLHAMB(,RPLH)                                   0999
         TM    AMBGSR(@15),B'00100000'                             0999
         BO    @RT00999                                            0999
         TM    AMBSCRA(@15),B'00011100'                            0999
         BZ    @RF00999                                            0999
@RT00999 DS    0H                                                  1000
*     R15=0;                        /* FORCE ZERO RETURN CODE        */
         SLR   R15,R15                                             1000
*   ELSE                            /* IF NOT RUNNING UNDER GSR      */
*     DO;                                                          1001
         B     @RC00999                                            1001
@RF00999 DS    0H                                                  1002
*       RESPECIFY                                                  1002
*         R15 RESTRICTED;                                          1002
*       RWORK3=RAMB;                /* SAVE CONTENTS OF RAMB         */
         LR    RWORK3,RAMB                                         1003
*       RAMB=ADDR(IDAAMB);          /* POINT TO AMB                  */
         L     RAMB,PLHAMB(,RPLH)                                  1004
*I10:                                                              1005
*       DO;                         /* IDACALL(IDAPTCBV)             */
I10      DS    0H                                                  1006
*         CALL IDAPTCBV;            /* EXIT TO IDAPTCBV              */
         L     @15,@CV01116                                        1006
         BALR  @14,@15                                             1006
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(USING *+4095,R10);    /* ESTABLISH SECOND BASE         */
         USING *+4095,R10
*         GEN(LA    R10,4095(@11)); /* LOAD SECOND BASE              */
         LA    R10,4095(@11)
*         GEN(L     R10,=A(@PSTART+4095));/* RELOAD SECOND BASE      */
         L     R10,=A(@PSTART+4095)
*         GEN(USING @PSTART+4095,R10);/* ESTABLISH SECOND BASE       */
         USING @PSTART+4095,R10
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I10;                    /* ANY TCB PROBLEM?              */
*       RAMB=RWORK3;                /* RESTORE CONTENTS OF RAMB      */
         LR    RAMB,RWORK3                                         1016
*     END;                                                         1017
*   IF R15=0 THEN                   /* IF NO ERROR                   */
@RC00999 LTR   R15,R15                                             1018
         BNZ   @RF01018                                            1018
*     DO;                                                          1019
*       RESPECIFY                                                  1020
*         R15 UNRESTRICTED;                                        1020
*                                                                  1020
*       /*************************************************************/
*       /*                                                           */
*       /* ISSUE GETMAIN FOR SLOT CORE BLOCK                         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  1021
*       IF AMBGSR=ON THEN           /* IF RUNNING UNDER GSR          */
         L     @15,PLHAMB(,RPLH)                                   1021
         TM    AMBGSR(@15),B'00100000'                             1021
         BNO   @RF01021                                            1021
*         RWORK3=GSRPOOL;           /* USE GSR POOL                  */
         LA    RWORK3,241                                          1022
*       ELSE                        /* IF NOT RUNNING UNDER GSR      */
*         RWORK3=USERPOOL;          /* LOAD SUBPOOL                  */
         B     @RC01021                                            1023
@RF01021 SLR   RWORK3,RWORK3                                       1023
*       RWORK1=RWORK2;              /* LOAD SLOT BASE                */
@RC01021 LR    RWORK1,RWORK2                                       1024
*       RWORK4=ADDR(WSHDSAD);       /* PT TO RESULT AREA             */
         LA    RWORK4,WSHDSAD(,RWORK1)                             1025
*       RESPECIFY                                                  1026
*        (RWORK0,                                                  1026
*         R1,                                                      1026
*         R15) RESTRICTED;                                         1026
*       RWORK2=MAX((RAMB+MULT64-1)&-MULT64,PAGE);/* ROUND UP TO    1027
*                                      MULTIPLE OF EIGHT, BUT NO   1027
*                                      BIGGER THEN PAGE              */
         LR    RWORK2,RAMB                                         1027
         SL    RWORK2,@CF01283                                     1027
         N     RWORK2,@CF01284                                     1027
         LA    @14,2048                                            1027
         CR    RWORK2,@14                                          1027
         BNL   *+6
         LR    RWORK2,@14                                          1027
*       R1=ADDR(WSHDSGMW);          /* PT TO GETMAIN WORK AREA       */
         LA    R1,WSHDSGMW(,RWORK1)                                1028
*       GEN(GETMAIN EC,LV=(RWORK2),A=(RWORK4),SP=(RWORK3),MF=(E,(1)));
         GETMAIN EC,LV=(RWORK2),A=(RWORK4),SP=(RWORK3),MF=(E,(1))
*       RESPECIFY                                                  1030
*         IDAWAX BASED(RWORK5);                                    1030
*       IF R15^=0 THEN              /* IF ANY ERROR                  */
         LTR   R15,R15                                             1031
         BNZ   @RT01031                                            1031
*         GOTO WSEXIT;              /* EXIT IDAGETWS                 */
*       RESPECIFY                                                  1033
*        (RWORK0,                                                  1033
*         R1,                                                      1033
*         R15) UNRESTRICTED;                                       1033
*     END;                                                         1034
*   ELSE                            /* HERE FOR TCB PROBLEM          */
*                                                                  1035
*     /***************************************************************/
*     /*                                                             */
*     /* THERE EXISTS A TCB CONFLICT                                 */
*     /*                                                             */
*     /***************************************************************/
*                                                                  1035
*     IF R15='08'X THEN             /* IF UNABLE TO CONTINUE         */
         B     @RC01018                                            1035
@RF01018 C     R15,@CF01131                                        1035
         BE    @RT01035                                            1035
*       GOTO WSEXIT;                /* EXIT IDAGETWS                 */
*     ELSE                          /* MUST BE RUNNING UNDER SUBTASK */
*       DO;                                                        1037
*         RWORK1=RWORK2;            /* LOAD SLOT BASE                */
         LR    RWORK1,RWORK2                                       1038
*         WSHDSONX=RAMB;            /* SAVE CONTENTS OF RAMB         */
         ST    RAMB,WSHDSONX(,RWORK1)                              1039
*         RAMB=ADDR(IDAAMB);        /* LOAD PTR TO AMB               */
         L     RAMB,PLHAMB(,RPLH)                                  1040
*         RWORK3=RWORK1;            /* SAVE SLOT BASE                */
         LR    RWORK3,RWORK1                                       1041
*         RPARM1=RRPL;              /* COPY PTR TO RPL               */
         LR    RPARM1,RRPL                                         1042
*I11:                                                              1043
*         DO;                       /* IDACALL(IDAPGETM)             */
I11      DS    0H                                                  1044
*           CALL IDAPGETM;          /* EXIT TO IDAPGETM              */
         L     @15,@CV01115                                        1044
         BALR  @14,@15                                             1044
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(USING *+4095,R10);  /* ESTABLISH SECOND BASE         */
         USING *+4095,R10
*           GEN(LA    R10,4095(@11));/* LOAD SECOND BASE             */
         LA    R10,4095(@11)
*           GEN(L     R10,=A(@PSTART+4095));/* RELOAD SECOND BASE    */
         L     R10,=A(@PSTART+4095)
*           GEN(USING @PSTART+4095,R10);/* ESTABLISH SECOND BASE     */
         USING @PSTART+4095,R10
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I11;                  /* GET BLP                       */
*         RESPECIFY                                                1054
*           IDABLPRM BASED(R1);                                    1054
*         IF R1=0 THEN              /* IF GETMAIN FAILED             */
         LTR   R1,R1                                               1055
         BNZ   @RF01055                                            1055
*           RETURN CODE(4) TO WSEXIT;/* EXIT GETWS                   */
         LA    @14,WSEXIT                                          1056
         LA    @15,4                                               1056
         BR    @14                                                 1056
*         RWORK1=RWORK3;            /* RESTORE BASE FOR SLOT         */
@RF01055 LR    RWORK1,RWORK3                                       1057
*         RAMB=WSHDSONX;            /* RESTORE CONTENTS OF RAMB      */
         L     RAMB,WSHDSONX(,RWORK1)                              1058
*         BLPGREQ=ON;               /* INDICATE GETMAIN REQUEST      */
         OI    BLPGREQ(R1),B'10000000'                             1059
*         BLPGSZ=MAX((RAMB+MULT64-1)&-MULT64,PAGE);/* ROUND UP TO  1060
*                                      MULTIPLE OF EIGHT, BUT NO   1060
*                                      BIGGER THEN PAGE              */
         LR    @00,RAMB                                            1060
         SL    @00,@CF01283                                        1060
         N     @00,@CF01284                                        1060
         LA    @15,2048                                            1060
         CR    @00,@15                                             1060
         BNL   *+6
         LR    @00,@15                                             1060
         STCM  @00,7,BLPGSZ(R1)                                    1060
*         BLPGSP=SVC0POOL;          /* GET JOB STEP POOL             */
         MVI   BLPGSP(R1),X'FA'                                    1061
*         RWORK2=ADDR(IDABLPRM);    /* SAVE POINTER TO WORK AREA     */
         LR    RWORK2,R1                                           1062
*         R1=ADDR(BLPOCODE);        /* POINT TO DUMMY ACB            */
         LA    @00,BLPOCODE(,R1)                                   1063
         LR    R1,@00                                              1063
*         RESPECIFY                                                1064
*           R15 RESTRICTED;                                        1064
*         SVC(19);                  /* GET JOB STEP CORE             */
         SVC   19                                                  1065
*         RWORK3=R15;               /* SAVE RETURN CODE              */
         LR    RWORK3,R15                                          1066
*         RESPECIFY                                                1067
*           R15 UNRESTRICTED;                                      1067
*         R1=RWORK2;                /* POINT TO WORK AREA            */
         LR    R1,RWORK2                                           1068
*         WSHDSAD=BLPGAD;           /* SAVE RESULT ADDRESS           */
         L     @00,BLPGAD-1(,R1)                                   1069
         ICM   @00,8,@CB01316                                      1069
         ST    @00,WSHDSAD(,RWORK1)                                1069
*         RWORK2=BLPGSZ;            /* GET BLOCK SIZE                */
         L     RWORK2,BLPGSZ-1(,R1)                                1070
         LA    RWORK2,0(,RWORK2)                                   1070
*I12:                                                              1071
*         DO;                       /* IDACALL(IDAPFREE)             */
I12      DS    0H                                                  1072
*           CALL IDAPFREE;          /* EXIT TO IDAPFREE              */
         L     @15,@CV01114                                        1072
         BALR  @14,@15                                             1072
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(USING *+4095,R10);  /* ESTABLISH SECOND BASE         */
         USING *+4095,R10
*           GEN(LA    R10,4095(@11));/* LOAD SECOND BASE             */
         LA    R10,4095(@11)
*           GEN(L     R10,=A(@PSTART+4095));/* RELOAD SECOND BASE    */
         L     R10,=A(@PSTART+4095)
*           GEN(USING @PSTART+4095,R10);/* ESTABLISH SECOND BASE     */
         USING @PSTART+4095,R10
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I12;                  /* FREE WORK AREA                */
*         IF RWORK3^=0 THEN         /* IF ANY ERROR                  */
         LTR   RWORK3,RWORK3                                       1082
         BZ    @RF01082                                            1082
*           DO;                                                    1083
*             GEN(IDARST14);        /* RESTORE RETURN ADDRESS        */
         IDARST14
*             RETURN;               /* EXIT                          */
         B     @EL00001                                            1085
*           END;                                                   1086
*       END;                                                       1087
@RF01082 DS    0H                                                  1088
         EJECT
*                                                                  1088
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE SLOT                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1088
*   IF AMBGSR=ON THEN               /* IF RUNNING UNDER GSR          */
@RC01018 L     @15,PLHAMB(,RPLH)                                   1088
         TM    AMBGSR(@15),B'00100000'                             1088
         BNO   @RF01088                                            1088
*     DO;                                                          1089
*       WSHDSFSP=GSRPOOL;           /* USER GSR SUBPOOL              */
         MVI   WSHDSFSP(RWORK1),X'F1'                              1090
*       WSHDGSR=ON;                 /* ASSUME GSR KEY FOR DELVRP   1091
*                                                            @Z40ESSR*/
         OI    WSHDGSR(RWORK1),B'00100000'                         1091
*     END;                                                         1092
*   ELSE                            /* IF NOT RUNNING UNDER GSR      */
*     WSHDSFSP=SVC0POOL;            /* COPY SUBPOOL                  */
         B     @RC01088                                            1093
@RF01088 MVI   WSHDSFSP(RWORK1),X'FA'                              1093
*   WSHDSFLN=RWORK2;                /* GET MINIMUM LENGTH            */
@RC01088 STCM  RWORK2,7,WSHDSFLN(RWORK1)                           1094
*   WSHDSBV=WSHDSFLN/8;             /* SET BIT VALUE                 */
         L     @15,WSHDSFLN-1(,RWORK1)                             1095
         LA    @15,0(,@15)                                         1095
         SRL   @15,3                                               1095
         STH   @15,WSHDSBV(,RWORK1)                                1095
*   RESPECIFY                                                      1096
*     RWORK3 UNRESTRICTED;                                         1096
*   RWORK2=(RAMB+WSHDSBV-1)/WSHDSBV;/* GET INDEX FOR STARTING MASK   */
         LR    RWORK2,RAMB                                         1097
         ALR   RWORK2,@15                                          1097
         BCTR  RWORK2,0                                            1097
         SRDA  RWORK2,32                                           1097
         DR    RWORK2,@15                                          1097
         LR    RWORK2,@07                                          1097
*   WSHDSBM=STMASK(RWORK2);         /* SET BIT MASK                  */
         LA    @07,STMASK-1(RWORK2)                                1098
         MVC   WSHDSBM(1,RWORK1),0(@07)                            1098
*   RESPECIFY                                                      1099
*     RWORK3 RESTRICTED;                                           1099
*                                                                  1099
*   /*****************************************************************/
*   /*                                                               */
*   /* ADD SLOT TO ORDERED SLOT CHAIN                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1100
*ARND7:                                                            1100
*   RWORK2=0;                       /* SET LAST SLOT POINTER TO ZERO */
ARND7    SLR   RWORK2,RWORK2                                       1100
*   RWORK3=AMBWSHD->WSHDOCHN;       /* POINT TO FIRST OREDERED SLOT  */
         L     @15,PLHAMB(,RPLH)                                   1101
         L     @15,AMBWSHD(,@15)                                   1101
         L     RWORK3,WSHDOCHN(,@15)                               1101
*   DO WHILE(RWORK3^=0&             /* LOOP UNTIL NO ENTRY OR        */
*         RWORK3->WSHDSBV<WSHDSBV); /* RWORK3 PTS TO BIGGER ENTRY    */
         B     @DE01102                                            1102
@DL01102 DS    0H                                                  1103
*     RWORK2=RWORK3;                /* SAVE PTR TO LAST SLOT         */
         LR    RWORK2,RWORK3                                       1103
*     RWORK3=RWORK2->WSHDSONX;      /* LOAD ADDR NEXT ORDERED SLOT   */
         L     RWORK3,WSHDSONX(,RWORK2)                            1104
*   END;                                                           1105
@DE01102 LTR   RWORK3,RWORK3                                       1105
         BZ    @DC01102                                            1105
         LH    @00,WSHDSBV(,RWORK3)                                1105
         CH    @00,WSHDSBV(,RWORK1)                                1105
         BL    @DL01102                                            1105
@DC01102 DS    0H                                                  1106
*   IF RWORK2=0 THEN                /* IF NO ENTRIES OR SMALLEST     */
         LTR   RWORK2,RWORK2                                       1106
         BNZ   @RF01106                                            1106
*     RWORK4=ADDR(AMBWSHD->WSHDOCHN);/* POINT TO CHAIN WORD          */
         L     @15,PLHAMB(,RPLH)                                   1107
         L     RWORK4,AMBWSHD(,@15)                                1107
         LA    RWORK4,WSHDOCHN(,RWORK4)                            1107
*   ELSE                            /* IF NEXT ENTRY LARGER          */
*     RWORK4=ADDR(RWORK2->WSHDSONX);/* POINT TO CHAIN WORD           */
         B     @RC01106                                            1108
@RF01106 LA    RWORK4,WSHDSONX(,RWORK2)                            1108
*   WSHDSONX=RWORK3;                /* POINT TO NEXT ENTRY           */
@RC01106 ST    RWORK3,WSHDSONX(,RWORK1)                            1109
*   GEN(CS     RWORK3,RWORK1,0(RWORK4));/* SWAP IN NEW SLOT          */
         CS     RWORK3,RWORK1,0(RWORK4)
*   GEN(BNE    ARND7);              /* LOOP IF SWAP FAILED           */
         BNE    ARND7
*   WSHDSFLG=0;                     /* RELEASE SLOT FOR OTHER USERS  */
         MVI   WSHDSFLG(RWORK1),X'00'                              1112
*   RWORK4=WSHDSAD;                 /* LOAD PTR TO ALLOCATED CORE    */
         L     RWORK4,WSHDSAD(,RWORK1)                             1113
*   RWORK3=WSHDSBM;                 /* LOAD END MASK                 */
         SLR   RWORK3,RWORK3                                       1114
         IC    RWORK3,WSHDSBM(,RWORK1)                             1114
*   GOTO ARND8;                     /* BRANCH BELOW                  */
         B     ARND8                                               1115
*ALCORE:                            /* STARTING MASK IS IN RWORK4    */
*   DO RWORK2=0 BY 1 WHILE RWORK3^=RWORK4;/* SHIFT START MASK        */
ALCORE   SLR   RWORK2,RWORK2                                       1116
         B     @DE01116                                            1116
@DL01116 DS    0H                                                  1117
*     SRL(RWORK4,1);                /* SHIFT TO END MASK             */
         SRL   RWORK4,1                                            1117
*   END;                                                           1118
         AL    RWORK2,@CF00054                                     1118
@DE01116 CR    RWORK3,RWORK4                                       1118
         BNE   @DL01116                                            1118
*   RWORK4=WSHDSAD+(RWORK2*WSHDSBV);/* POINT TO RESULT CORE          */
         LR    RWORK4,RWORK2                                       1119
         MH    RWORK4,WSHDSBV(,RWORK1)                             1119
         AL    RWORK4,WSHDSAD(,RWORK1)                             1119
*ARND8:                                                            1120
*   IF WSHDSBM='FF'X THEN           /* IF NO CORE REMAINING          */
ARND8    CLI   WSHDSBM(RWORK1),X'FF'                               1120
         BNE   @RF01120                                            1120
*     WSHDSFNO=ON;                  /* SET BIT TO SO INDICATE        */
         OI    WSHDSFNO(RWORK1),B'10000000'                        1121
*   RAMB=RAMB-LENGTH(RFLD);         /* BACK LENGTH PAST RLFD         */
@RF01120 SL    RAMB,@CF00068                                       1122
*   RESPECIFY                                                      1123
*     RFLD BASED(RWORK4+RAMB);                                     1123
*   RMASK=RWORK3&&'FF'X;            /* SET MASK TO RESTORE CORE      */
         LR    @15,RWORK4                                          1124
         ALR   @15,RAMB                                            1124
         LA    @00,255                                             1124
         XR    @00,RWORK3                                          1124
         STC   @00,RMASK(,@15)                                     1124
*   RMAPA=RWORK1;                   /* SAVE ADDRESS OF SLOT          */
         STCM  RWORK1,7,RMAPA(@15)                                 1125
*   RWORK1=RWORK4;                  /* SET POINTER TO CORE           */
         LR    RWORK1,RWORK4                                       1126
*   GEN(LA RWORK1,0(RWORK1));       /* ZERO HIGH ORDER BYTE  @ZA16073*/
         LA RWORK1,0(RWORK1)
*   RESPECIFY                                                      1128
*     R15 RESTRICTED;               /*                       @ZA18981*/
*   R15=0;                          /* SET NO ERROR CODE             */
         SLR   R15,R15                                             1129
*WSEXIT:                                                           1130
*   RAMB=ADDR(IDAAMB);              /* RESTORE AMB POINTER           */
WSEXIT   L     RAMB,PLHAMB(,RPLH)                                  1130
*   RESPECIFY                                                      1131
*     R1 RESTRICTED;                                               1131
*   R1=PLHCRPL;                     /* RESTORE RPL POINTER           */
         L     R1,PLHCRPL(,RPLH)                                   1132
*   RPARM1=ACBAMBL;                 /* RESTORE PTR TO AMBL   @ZA18981*/
         L     @14,RPLDACB(,RRPL)                                  1133
         L     RPARM1,ACBAMBL(,@14)                                1133
*   GEN(IDARST14);                  /* RESTORE RETURN ADDRESS        */
         IDARST14
*   RETURN;                         /* EXIT WITH NO ERROR            */
         B     @EL00001                                            1135
*TM:                                                               1136
*   GEN(TM WSHDSBM(RWORK1),0);      /* TEST UNDER MASK MODEL         */
TM       TM WSHDSBM(RWORK1),0
         EJECT
*IDARELWS:                                                         1137
*                                                                  1137
*/********************************************************************/
*/* EXTERNAL ROUTINE TO RELEASE WORK SPACE                           */
*/*   INPUT = RWORK1 CONTAINS ADDRESS OF SPACE                       */
*/*           RWORK2 CONTAINS LENGTH OF SPACE                        */
*/*   OUTPUT = R15 ZERO IF SUCCESSFUL                                */
*/*            R15 IS 4 IF UNSUCCESSFUL                              */
*/********************************************************************/
*                                                                  1137
*   ENTRY;                          /* EXTERNAL ENTRY                */
@EP01137 DS    0H                                                  1138
*RELWS:                                                            1138
*   ;                               /* INTERNAL ENTRY                */
RELWS    DS    0H                                                  1139
*   RESPECIFY                                                      1139
*    (R14,                                                         1139
*     R15) RESTRICTED;                                             1139
*                                                                  1139
*   /*****************************************************************/
*   /*                                                               */
*   /* RWORK1 POINTS TO CORE TO RELEASE. RWORK2 HAS ORIGINAL LENGTH  */
*   /* REQUESTED OF IDAGETWS. R15 IS ZERO IF SUCCESSFUL, NOT ZERO IF */
*   /* FAILURE                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1140
*   RESPECIFY                                                      1140
*    (RWORK3,                                                      1140
*     RWORK4) UNRESTRICTED;                                        1140
*   RESPECIFY                                                      1141
*     IDAAMB BASED(RAMB);                                          1141
*   RWORK2=((RWORK2+LENGTH(RFLD)+7)&(-8))-LENGTH(RFLD);            1142
         LA    @08,4                                               1142
         LA    @07,11                                              1142
         ALR   @07,RWORK2                                          1142
         N     @07,@CF01227                                        1142
         SLR   @07,@08                                             1142
         LR    RWORK2,@07                                          1142
*   RWORK2=RWORK2+RWORK1;           /* GET ADDRESS OF RFLD           */
         ALR   RWORK2,RWORK1                                       1143
*   RESPECIFY                                                      1144
*     RFLD BASED(RWORK2);                                          1144
*   RWORK1=AMBWSHD;                 /* POINT TO FIRST IDAWSHD        */
         L     RWORK1,AMBWSHD(,RAMB)                               1145
*   R15=NOTFREE;                    /* SET RETURN CODE NON-ZERO      */
         LR    R15,@08                                             1146
*   DO UNTIL RWORK1=0;              /* LOOP THRU WSHD CHAIN          */
@DL01147 DS    0H                                                  1148
*     IF RMAPA=>ADDR(IDAWSHD)&      /* IS ADDRESS WITHIN WSHD        */
*         RMAPA<=ADDR(IDAWSHD)+LENGTH(IDAWSHD)-LENGTH(WSHDSLT)-1 THEN
         L     @08,RMAPA-1(,RWORK2)                                1148
         LA    @08,0(,@08)                                         1148
         CR    @08,RWORK1                                          1148
         BL    @RF01148                                            1148
         LR    @07,RWORK1                                          1148
         SL    @07,@CF01286                                        1148
         CR    @08,@07                                             1148
         BH    @RF01148                                            1148
*       DO;                                                        1149
*         RWORK1=RMAPA;             /* LOAD BASE FOR SLOT            */
         LR    RWORK1,@08                                          1150
*         GEN;                                                     1151
         L     RWORK3,WSHDSBV(RWORK1)  LOAD SWAP WORD
ARND10   L     RWORK4,SFNOOFF          LOAD MASK TO SET WSHDSFNO OFF
         IC    RWORK4,RMASK(RWORK2)    ADD MASK TO RESET BIT MAP BITS
         NR    RWORK4,RWORK3           SET BITS OFF
         CS    RWORK3,RWORK4,WSHDSBV(RWORK1) TRY TO SWAP IN WORD
         BNE   ARND10                  BRANCH IF FAILURE
*         RWORK1=0;                 /* ZERO BASE TO GET OUT OF LOOP  */
         SLR   RWORK1,RWORK1                                       1152
*         R15=0;                    /* SET RETURN CODE               */
         SLR   R15,R15                                             1153
*       END;                                                       1154
*     ELSE                          /* IF RMAPA NOT WITHIN WSHD      */
*       RWORK1=WSHDNEXT;            /* POINT TO NEXT WSHD            */
         B     @RC01148                                            1155
@RF01148 L     @08,WSHDNEXT-1(,RWORK1)                             1155
         LA    @08,0(,@08)                                         1155
         LR    RWORK1,@08                                          1155
*   END;                                                           1156
@RC01148 DS    0H                                                  1156
@DE01147 LTR   RWORK1,RWORK1                                       1156
         BNZ   @DL01147                                            1156
*   RETURN CODE(R15);               /* EXIT WITH RETURN CODE         */
         BR    @14                                                 1157
*   END IDA019RX                                                   1158
*                                                                  1158
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IFGEXLST)                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDAWAX  )                                       */
*/*%INCLUDE SYSLIB  (IDAWSHD )                                       */
*/*%INCLUDE SYSLIB  (IDAAIR  )                                       */
*/*%INCLUDE SYSLIB  (IDABLPRM)                                       */
*                                                                  1158
*       ;                                                          1158
@DATA    DS    0H
@SX01299 XC    CORE(0,RWORK1),CORE(RWORK1)
@SC01305 CLC   PLHKEY(0,@07),ALTKEY(RWORK2)
@SC01307 CLC   PLHKEY(0,@15),ALTKEY(@07)
@SM01309 MVC   PLHKEY(0,@15),ALTKEY(@08)
@DATD    DSECT
         DS    0F
IDA019RX CSECT
         DS    0F
@CF00054 DC    F'1'
@CH00054 EQU   @CF00054+2
@CF00068 DC    F'4'
@CF00224 DC    F'5'
@CF00088 DC    F'16'
@CF00281 DC    F'92'
@CH00281 EQU   @CF00281+2
@CF01286 DC    F'-75'
@CF01284 DC    F'-64'
@CF01283 DC    F'-63'
@CF01227 DC    F'-8'
@CF01315 DC    XL4'0000FFFF'
@CF01131 DC    XL4'08'
@CF00055 DC    BL4'1'
@DATD    DSECT
         DS    0D
IDA019RX CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV01112 DC    V(IDADRQ)
@CV01113 DC    V(IDAENDRQ)
@CV01114 DC    V(IDAPFREE)
@CV01115 DC    V(IDAPGETM)
@CV01116 DC    V(IDAPTCBV)
@CV01117 DC    V(IDAXGPLH)
@CV01118 DC    V(IDA019R4)
@CV01216 DC    V(IDAWRBFR)
         DS    0D
SFNOOFF  DC    XL4'FFFF7FFF'
HWORD4   DC    H'4'
@CB01316 DC    X'00'
STMASK   DC    X'80C0E0F0F8FCFEFF'
         DS    CL1
BRANCH   DC    AL4(AIXGET)
         DC    AL4(AIXPUT)
         DC    AL4(AIXBAD)
         DC    AL4(AIXPOINT)
         DC    AL4(AIXENREQ)
         DC    AL4(AIXERASE)
         DC    AL4(AIXBAD)
         DC    AL4(AIXBAD)
         DC    AL4(AIXBAD)
         DC    AL4(AIXBAD)
         DC    AL4(AIXNOP)
IDA019RX CSECT
    IDAPATCH
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019RX CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RWORK0   EQU   @00
RRPL     EQU   @01
R1       EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
RPARM1   EQU   @12
R14      EQU   @14
R15      EQU   @15
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLREQ   EQU   RPLIDWD+2
RPLLEN   EQU   RPLIDWD+3
RPLPLHPT EQU   RPLCOMN+4
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLKEYL  EQU   RPLKEYLE
RPLDACB  EQU   RPLCOMN+24
RPLTCBPT EQU   RPLCOMN+28
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLLOC   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLGEN   EQU   RPLOPT1
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLKEY   EQU   RPLOPT2
RPLADR   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLNSP   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLBUFL  EQU   RPLCOMN+52
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXPC EQU   RPLRBAR
RPLAIXID EQU   RPLRBAR+2
RPLAXPKP EQU   RPLAIXID
RPLDDDD  EQU   RPLRBAR+4
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLEMLEN EQU   RPLCOMN+70
RPLERMSA EQU   RPLCOMN+72
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBBUSY  EQU   ACBIOSFG
ACBINFLG EQU   ACBCOMN+50
ACBINFL1 EQU   ACBINFLG
ACBVVIC  EQU   ACBINFL1
ACBINFL2 EQU   ACBINFLG+1
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IFGEXLST EQU   0
EXLCOMN  EQU   IFGEXLST
EXLLEN   EQU   EXLCOMN+2
EXLEODF  EQU   EXLCOMN+5
EXLSYNF  EQU   EXLCOMN+10
EXLLERF  EQU   EXLCOMN+15
EXLSCIPF EQU   EXLCOMN+20
EXLUPADF EQU   EXLSCIPF
EXLSCIPS EQU   EXLUPADF
EXLSCIPA EQU   EXLUPADF
EXLSCIPK EQU   EXLUPADF
EXLSCIPP EQU   EXLCOMN+21
EXLLGNF  EQU   EXLCOMN+25
EXLJRNF  EQU   EXLCOMN+30
EXLOPNF  EQU   EXLCOMN+35
IFGEXLEF EQU   0
EXLENTRY EQU   IFGEXLEF
EXLFLAG  EQU   EXLENTRY
EXLENFL  EQU   EXLFLAG
EXLEXITP EQU   EXLENTRY+1
IDAAMBL  EQU   0
AMBLACB  EQU   IDAAMBL+8
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLXPT  EQU   IDAAMBL+24
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLPATH EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLQ2   EQU   IDAAMBL+31
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLVVIC EQU   AMBLFLG1
AMBLFLG2 EQU   IDAAMBL+36
AMBLNUM  EQU   IDAAMBL+38
AMBLDTA  EQU   IDAAMBL+52
IDAAMB   EQU   0
AMBPH    EQU   IDAAMB+12
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBCAT   EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBPUG   EQU   AMBFLG2
AMBEOVPT EQU   IDAAMB+56
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBLSR   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBWSHD  EQU   IDAAMB+96
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDNEST  EQU   IDAAMDSB+4
AMDAXRKP EQU   AMDNEST
AMDKEYLN EQU   IDAAMDSB+8
AMDCINV  EQU   IDAAMDSB+20
AMDLRECL EQU   IDAAMDSB+24
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHFLG2  EQU   IDAPLH+3
PLHEFLGS EQU   IDAPLH+4
PLHSRINV EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHFLG3  EQU   IDAPLH+6
PLHAFLGS EQU   IDAPLH+7
PLHCRPL  EQU   IDAPLH+20
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHRSCS  EQU   IDAPLH+43
PLHDBUFC EQU   IDAPLH+52
PLHRECP  EQU   IDAPLH+60
PLHDIOB  EQU   IDAPLH+76
PLHAMB   EQU   IDAPLH+108
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHXPLH  EQU   PLHWAX
PLHKEYPT EQU   IDAPLH+248
PLHDRRSC EQU   IDAPLH+252
PLHDRMSK EQU   IDAPLH+264
PLHTMRPL EQU   IDAPLH+265
PLHEND   EQU   IDAPLH+280
PLHKEY   EQU   0
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCINV  EQU   IDABUFC+28
IDAWAX   EQU   0
WAXFLG1  EQU   IDAWAX+1
WAXSRAB  EQU   WAXFLG1
WAXPUG   EQU   WAXFLG1
WAXPS    EQU   WAXFLG1
WAXNOADV EQU   WAXFLG1
WAXPL    EQU   IDAWAX+4
WAXIRPL  EQU   IDAWAX+8
WAXURPL  EQU   IDAWAX+12
WAXRCDA  EQU   IDAWAX+16
WAXXPTR  EQU   IDAWAX+20
WAXEPTR  EQU   IDAWAX+24
WAXBPLH  EQU   IDAWAX+28
WAXSRAA  EQU   IDAWAX+32
WAXSRAL  EQU   IDAWAX+36
WAXXXXX3 EQU   IDAWAX+40
IDAWSHD  EQU   0
WSHDID   EQU   IDAWSHD
WSHDPOOL EQU   IDAWSHD+1
WSHDLEN  EQU   IDAWSHD+2
WSHDACHN EQU   IDAWSHD+4
WSHDGMTB EQU   WSHDACHN
WSHDNEXT EQU   WSHDACHN+1
WSHDGMWA EQU   IDAWSHD+8
WSHDNUS  EQU   IDAWSHD+18
WSHDGMRA EQU   IDAWSHD+20
WSHDOCHN EQU   IDAWSHD+24
WSHDSLT  EQU   IDAWSHD+28
WSHDSAD  EQU   WSHDSLT
@NM00061 EQU   WSHDSAD
WSHDGSR  EQU   @NM00061
WSHDSGMW EQU   WSHDSLT+4
WSHDSFM  EQU   WSHDSGMW
WSHDSFSP EQU   WSHDSFM
WSHDSFLN EQU   WSHDSFM+1
WSHDSONX EQU   WSHDSGMW+4
WSHDSBV  EQU   WSHDSGMW+8
WSHDSFLG EQU   WSHDSGMW+10
WSHDSFNO EQU   WSHDSFLG
WSHDSBM  EQU   WSHDSGMW+11
IDAAIX   EQU   0
AIXFG    EQU   IDAAIX
AIXPKP   EQU   AIXFG
AIXPL    EQU   IDAAIX+1
AIXPC    EQU   IDAAIX+2
AIXKL    EQU   IDAAIX+4
AIXKY    EQU   IDAAIX+5
IDABLPRM EQU   0
BLPBUFLP EQU   IDABLPRM+4
BLPUACB  EQU   BLPBUFLP
BLPFLAGS EQU   IDABLPRM+10
BLPFLAG1 EQU   BLPFLAGS
BLPFLAG2 EQU   BLPFLAGS+1
BLPOCODE EQU   IDABLPRM+12
BLPCORE  EQU   IDABLPRM+16
BLPGFLG  EQU   BLPCORE
BLPGREQ  EQU   BLPGFLG
BLPGSZ   EQU   BLPCORE+1
BLPGSP   EQU   BLPCORE+4
BLPGAD   EQU   BLPCORE+5
BLPIOACB EQU   IDABLPRM+24
BLPBUFL  EQU   0
BLPBRLFG EQU   BLPBUFL+4
PTR31    EQU   0
AIXROUT  EQU   0
ALTKEY   EQU   0
RFLD     EQU   0
RMASK    EQU   RFLD
RMAPA    EQU   RFLD+1
CORE     EQU   0
ACHAR    EQU   0
AIXPTR1  EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00057 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
BLPBFLCT EQU   BLPBUFL+6
@NM00069 EQU   BLPBUFL+5
@NM00068 EQU   BLPBRLFG
BLPBFLST EQU   BLPBRLFG
BLPBUFSZ EQU   BLPBUFL
BLPERFLG EQU   IDABLPRM+51
@NM00067 EQU   IDABLPRM+49
BLPOFLGS EQU   IDABLPRM+48
@NM00066 EQU   IDABLPRM+28
BLPDSORG EQU   BLPIOACB+3
@NM00065 EQU   BLPIOACB
BLPGPG   EQU   BLPGFLG
BLPOACB  EQU   IDABLPRM+13
BLPFRSTR EQU   BLPFLAG2
BLPFIOSR EQU   BLPFLAG2
BLPFINDX EQU   BLPFLAG2
BLPFDATA EQU   BLPFLAG2
BLPFPRIM EQU   BLPFLAG2
BLPFPATH EQU   BLPFLAG2
BLPFUPGR EQU   BLPFLAG2
BLPFPART EQU   BLPFLAG2
BLPFSTAD EQU   BLPFLAG1
BLPFBFRF EQU   BLPFLAG1
BLPFIOBF EQU   BLPFLAG1
BLPFGSR  EQU   BLPFLAG1
BLPFLSR  EQU   BLPFLAG1
BLPFDEL  EQU   BLPFLAG1
BLPFBLD  EQU   BLPFLAG1
BLPFDBDC EQU   BLPFLAG1
BLPSTRNO EQU   IDABLPRM+9
BLPKEYLN EQU   IDABLPRM+8
BLPIOPLH EQU   BLPUACB
@NM00064 EQU   IDABLPRM+2
BLPACBST EQU   IDABLPRM+1
BLPACBID EQU   IDABLPRM
@NM00063 EQU   AIXFG
@NM00062 EQU   @NM00061
WAXXXXX2 EQU   IDAWAX+6
WAXLEN   EQU   IDAWAX+2
WAXID    EQU   IDAWAX
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCHAIN EQU   IDABUFC+48
BUFXORBA EQU   IDABUFC+44
BUFXIRBA EQU   IDABUFC+40
BUFCNXT2 EQU   IDABUFC+37
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCBAD  EQU   IDABUFC+20
BUFCCPA  EQU   IDABUFC+16
BUFCORBA EQU   IDABUFC+12
BUFCDDDD EQU   IDABUFC+8
BUFCAMB  EQU   BUFCPLH
@NM00060 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00059 EQU   IDABUFDR+16
BUFDBUFC EQU   IDABUFDR+12
@NM00058 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00056 EQU   IDAPLH+266
@NM00055 EQU   PLHTMRPL
PLHTMIOB EQU   PLHTMRPL
PLHTMINX EQU   PLHTMRPL
PLHTMDTA EQU   PLHTMRPL
PLHTMDIW EQU   PLHTMRPL
PLHTMBUF EQU   PLHTMRPL
PLHTERM  EQU   PLHTMRPL
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
@NM00054 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHRBUFC EQU   IDAPLH+192
PLHIBUFC EQU   IDAPLH+188
PLHNRBA  EQU   IDAPLH+184
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00053 EQU   IDAPLH+172
@NM00052 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHRDFP  EQU   IDAPLH+68
PLHFSP   EQU   IDAPLH+64
PLHNBUFC EQU   IDAPLH+56
PLHLRECL EQU   IDAPLH+48
PLHARDB  EQU   IDAPLH+44
@NM00051 EQU   PLHRSCS
PLHDBPER EQU   PLHRSCS
PLHDSERR EQU   PLHRSCS
PLHASYER EQU   PLHRSCS
@NM00050 EQU   PLHRSCS
PLHBUFHD EQU   PLHRSCS
PLHINEOV EQU   PLHRSCS
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHMRPL  EQU   IDAPLH+16
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00049 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
PLHSR    EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHASKBF EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00048 EQU   IDAAMDSB+41
@NM00047 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDRKP   EQU   IDAAMDSB+6
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00046 EQU   AMBCSWD1+1
@NM00045 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
@NM00044 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00043 EQU   IDAAMB+68
AMBIWA   EQU   IDAAMB+64
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00042 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00041 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBSDS   EQU   AMBINFL
AMBUPX   EQU   AMBINFL
@NM00040 EQU   AMBINFL
@NM00039 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00038 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00037 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00036 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00035 EQU   AMBFLG0
AMBSWSP  EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLIX   EQU   IDAAMBL+56
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00034 EQU   IDAAMBL+40
AMBLNST  EQU   IDAAMBL+37
@NM00033 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00032 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLSDS  EQU   AMBLVVIC
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00031 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00030 EQU   AMBLQ2
AMBLCBIC EQU   AMBLQ2
@NM00029 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00028 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
EXLEADDR EQU   EXLEXITP
@NM00027 EQU   EXLENFL
EXLLNK   EQU   EXLENFL
EXLACTM  EQU   EXLENFL
EXLSPEC  EQU   EXLENFL
EXLOPNP  EQU   EXLCOMN+36
@NM00026 EQU   EXLOPNF
EXLOPNK  EQU   EXLOPNF
EXLOPNA  EQU   EXLOPNF
EXLOPNS  EQU   EXLOPNF
EXLJRNP  EQU   EXLCOMN+31
@NM00025 EQU   EXLJRNF
EXLJRNK  EQU   EXLJRNF
EXLJRNA  EQU   EXLJRNF
EXLJRNS  EQU   EXLJRNF
EXLLGNP  EQU   EXLCOMN+26
@NM00024 EQU   EXLLGNF
EXLLGNK  EQU   EXLLGNF
EXLLGNA  EQU   EXLLGNF
EXLLGNS  EQU   EXLLGNF
EXLUPADP EQU   EXLSCIPP
@NM00023 EQU   EXLUPADF
EXLUPADK EQU   EXLSCIPK
EXLUPADA EQU   EXLSCIPA
EXLUPADS EQU   EXLSCIPS
EXLLERP  EQU   EXLCOMN+16
@NM00022 EQU   EXLLERF
EXLLERK  EQU   EXLLERF
EXLLERA  EQU   EXLLERF
EXLLERS  EQU   EXLLERF
EXLSYNP  EQU   EXLCOMN+11
@NM00021 EQU   EXLSYNF
EXLSYNK  EQU   EXLSYNF
EXLSYNA  EQU   EXLSYNF
EXLSYNS  EQU   EXLSYNF
EXLEODP  EQU   EXLCOMN+6
@NM00020 EQU   EXLEODF
EXLEODK  EQU   EXLEODF
EXLEODA  EQU   EXLEODF
EXLEODS  EQU   EXLEODF
@NM00019 EQU   EXLCOMN+4
EXLLEN2  EQU   EXLLEN
EXLSTYP  EQU   EXLCOMN+1
EXLID    EQU   EXLCOMN
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00018 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00017 EQU   ACBINFL2
ACBCBIC  EQU   ACBINFL2
@NM00016 EQU   ACBINFL2
ACBBYPSS EQU   ACBINFL1
ACBSDS   EQU   ACBVVIC
ACBUCRA  EQU   ACBINFL1
ACBSCRA  EQU   ACBINFL1
ACBCAT   EQU   ACBINFL1
ACBIJRQE EQU   ACBINFL1
ACBJEPS  EQU   ACBINFL1
@NM00015 EQU   ACBINFL1
ACBERFLG EQU   ACBCOMN+49
ACBLOCK  EQU   ACBEXFG
@NM00014 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00013 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00012 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00011 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00010 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00009 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00008 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00007 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00006 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00005 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
@NM00004 EQU   RPLRBAR+3
@NM00003 EQU   RPLAIXID
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00002 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLCHAIN EQU   RPLNXTRP
@NM00001 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLADD   EQU   RPLADR
RPLECBIN EQU   RPLECBSW
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLLEN2  EQU   RPLLEN
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00280 EQU   @RC00226
@RC00262 EQU   @RC00226
@RF00293 EQU   @EL00002
@RF00307 EQU   @RC00305
@RF00310 EQU   @RC00305
@RC00352 EQU   @EL00004
@RC00385 EQU   @EL00005
@RC00392 EQU   @EL00005
@RF00467 EQU   @EL00009
@RF00524 EQU   @RC00521
@RC00545 EQU   @RC00543
@RF00631 EQU   @RC00615
@RF00649 EQU   @RC00606
@RT00930 EQU   WSEXIT
@RT00937 EQU   WSEXIT
@RT01031 EQU   WSEXIT
@RT01035 EQU   WSEXIT
@RC00267 EQU   @RC00262
@RC00547 EQU   @RC00545
@ENDDATA EQU   *
         END   IDA019RX,(C'PLS0146',0701,78180)
