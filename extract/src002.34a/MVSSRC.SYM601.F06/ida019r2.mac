         TITLE 'IDA019R2--VSAM NON SHARED BUFFER MANAGER--PART ONE     *
                        '
IDA019R2 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA019R2  78.192'                                 0001
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         LH    RWORK1,FUNCTLST(RWORK1)      PICK UP OFFSET   @X04SVLP
         B     @00(RWORK1,@11)              GO TO FUNCT EP   @X04SVLP
FUNCTLST DC    AL2(FREEB-@PSTART)           OFFSET           @X04SVLP
         DC    AL2(WRBFR-@PSTART)           OFFSET           @X04SVLP
         DC    AL2(SBF-@PSTART)             OFFSET           @X04SVLP
         DC    AL2(GRB-@PSTART)             OFFSET           @X04SVLP
         DC    AL2(GNFL-@PSTART)            OFFSET           @X04SVLP
         DC    AL2(GNNFL-@PSTART)           OFFSET           @X04SVLP
         DC    AL2(GNXT-@PSTART)            OFFSET           @X04SVLP
         DC    AL2(GETEXCL-@PSTART)         OFFSET           @X04SVLP
FREEB    DS    0H                                                  0174
*   IF AMBTYPE=AMBINDEX THEN        /* SEE IF INDEX BFR              */
         TM    AMBTYPE(RAMB),B'01000000'                           0174
         BNO   @RF00174                                            0174
*     DO;                           /* YES, FREE IT          @X04SVMR*/
*/*  IF THE BUFFER CONTAINS A HIGHER LEVEL INDEX RECORD, LEAVE THE   */
*/*  CONTENTS VALID--SINCE CONTROL AREA SPLIT IS PROHIBITED FOR SHR  */
*/*  OPTION FOUR DATA SETS THE CONTENTS MUST BE CORRECT.     @X04SVMR*/
*                                                                  0176
*       IF AMBINBUF=ON&             /* IF SHR(4), NOT        @X04SVMR*/
*           (BUFCIDXL<=ONE×         /* HI IX,                @X04SVMR*/
*           AMBSCRA=ON×AMBUCRA=ON×  /*                       @X04SVMR*/
*           AMBCAT=ON) THEN         /* OR IF CATLG,          @X04SVMR*/
         TM    AMBINBUF(RAMB),B'00000001'                          0176
         BNO   @RF00176                                            0176
         CLI   BUFCIDXL(RBUFC),1                                   0176
         BNH   @RT00176                                            0176
         TM    AMBSCRA(RAMB),B'00011100'                           0176
         BZ    @RF00176                                            0176
@RT00176 DS    0H                                                  0177
*         BUFCVAL=OFF;              /* FORGET BUFFER.        @X04SVMR*/
         NI    BUFCVAL(RBUFC),B'11111011'                          0177
*       BUFCEXC=OFF;                /* RELEASE RD EXCL       @X04SVMR*/
@RF00176 NI    BUFCEXC(RBUFC),B'11111101'                          0178
*       IF RBUFC^=PLHIBUFC THEN     /* IF NOT SEQ SET        @X04SVMR*/
         C     RBUFC,PLHIBUFC(,RPLH)                               0179
         BE    @RF00179                                            0179
*         DO;                       /* HIGHER LEVEL BUFC     @ZA32757*/
*           BUFCPLH=ZERO;           /* CLEAR PLH PTR.        @ZA32757*/
         SLR   @15,@15                                             0181
         ST    @15,BUFCPLH(,RBUFC)                                 0181
*           BUFCAVL=CZERO;          /* MAKE AVAILABLE        @X04SVMR*/
         MVI   BUFCAVL(RBUFC),B'00000000'                          0182
*         END;                      /* END OF NOT SEQ SET    @ZA32757*/
*       ELSE                                                       0184
*         ;                         /* ELSE CONTINUE         @ZA32757*/
@RF00179 DS    0H                                                  0185
*     END;                          /* END, INDEX BFR        @X04SVMR*/
*   ELSE                            /* DATA BUFFER           @X04SVMR*/
*     IF BUFCINS=ON THEN            /* INSERT BUFFER?        @X04SVMR*/
         B     @RC00174                                            0186
@RF00174 TM    BUFCINS(RBUFC),B'00100000'                          0186
         BNO   @RF00186                                            0186
*       DO;                         /* YES, FREE IT.         @X04SVMR*/
*         BUFCVAL=OFF;              /* FORGET BUFFER.        @X04SVMR*/
*         BUFCEXC=OFF;              /* RELEASE RD EXCL       @X04SVMR*/
         NI    BUFCVAL(RBUFC),B'11111001'                          0189
*         BUFCAVL=CZERO;            /* MAKE AVAILABLE        @X04SVMR*/
         MVI   BUFCAVL(RBUFC),B'00000000'                          0190
*         BUFCEOD=OFF;              /* SET EOD OFF           @ZA14824*/
         NI    BUFCEOD(RBUFC),B'11110111'                          0191
*       END;                        /* END OF INS BFR        @X04SVMR*/
*     ELSE                          /* HERE IF PLH BUFFER            */
*       DO;                                                        0193
         B     @RC00186                                            0193
@RF00186 DS    0H                                                  0194
*         IF AMBINBUF=ON THEN       /* IF SHR(4),            @X04SVMR*/
         TM    AMBINBUF(RAMB),B'00000001'                          0194
         BNO   @RF00194                                            0194
*           BUFCVAL=OFF;            /* FORGET BUFFER.        @X04SVMR*/
         NI    BUFCVAL(RBUFC),B'11111011'                          0195
*/*  PROPAGATE EXCLUSIVE CONTROL AND OUTPUT RBAS IF SPANNED RECORD   */
*/*  RETRIEVAL IN A FORWARD DIRECTION.  (NOTE THAT FOR A KSDS THE    */
*/*  SPANNED RECORD SEGMENTS ARE ALWAYS RETRIEVED FORWARD.)  @ZA07544*/
*                                                                  0196
*         IF AMDSPAN=ON&(RPLBWD=OFF×RPLKEY=ON) THEN                0196
@RF00194 L     @15,AMBDSB(,RAMB)                                   0196
         TM    AMDSPAN(@15),B'00000001'                            0196
         BNO   @RF00196                                            0196
         TM    RPLKEY(RRPL),B'10000000'                            0196
         BNZ   @RT00196                                            0196
         TM    RPLBWD(RRPL),B'00010000'                            0196
         BO    @RF00196                                            0196
@RT00196 DS    0H                                                  0197
*           DO;                     /* PROPAGATE RBAS        @ZA07544*/
*                                                                  0197
*             /*******************************************************/
*             /*                                                     */
*             /* POINT TO THE FIRST RDF IN THE RECORD.       @X04SVMR*/
*             /*                                                     */
*             /*******************************************************/
*                                                                  0198
*             RFY                                                  0198
*               RWORK1 RSTD;        /* GET WORK REG          @X04SVMR*/
*             RWORK1=BUFCBAD+AMDCINV-LENGTH(IDACIDF)-LENGTH(IDARDF);
         L     @15,AMBDSB(,RAMB)                                   0199
         L     RWORK1,BUFCBAD(,RBUFC)                              0199
         AL    RWORK1,AMDCINV(,@15)                                0199
         SL    RWORK1,@CF00332                                     0199
*             IF RWORK1->RDF1ST=ON THEN/* IF NOT LAST SEG    @X04SVMR*/
         TM    RDF1ST(RWORK1),B'00010000'                          0200
         BNO   @RF00200                                            0200
*               BUFCNXT2->BUFXIRBA=BUFXIRBA;/* COPY 1ST RBA  @X04SVMR*/
         L     @15,BUFCNXT2-1(,RBUFC)                              0201
         L     @10,BUFXIRBA(,RBUFC)                                0201
         ST    @10,BUFXIRBA(,@15)                                  0201
*             IF BUFCMW=ON THEN     /* OUTPUT REQUEST?       @ZA07544*/
@RF00200 TM    BUFCMW(RBUFC),B'10000000'                           0202
         BNO   @RF00202                                            0202
*               DO;                 /* YES, SET BUFXORBA     @ZA07544*/
*                 IF RWORK1->RDF1ST=OFF&/* IF NOT SPND RCD,  @ZA07544*/
*                     RWORK1->RDFNOT1=OFF THEN/*             @ZA07544*/
         TM    RDF1ST(RWORK1),B'00110000'                          0204
         BNZ   @RF00204                                            0204
*                   BUFXORBA=BUFCORBA;/* USE BUFCORBA.       @ZA07544*/
         L     @15,BUFCORBA(,RBUFC)                                0205
         ST    @15,BUFXORBA(,RBUFC)                                0205
*                 ELSE              /* RCD IS SPANNED,       @ZA07544*/
*                   BUFXORBA=BUFXIRBA;/* USE 1ST SEG RBA     @ZA07544*/
         B     @RC00204                                            0206
@RF00204 L     @15,BUFXIRBA(,RBUFC)                                0206
         ST    @15,BUFXORBA(,RBUFC)                                0206
*               END;                /* END SPN RCD MUST WRT  @ZA07544*/
@RC00204 DS    0H                                                  0208
*             IF PLHBFRNO^=ONE THEN /* IF > ONE BFR          @X04SVMR*/
@RF00202 CLI   PLHBFRNO(RPLH),1                                    0208
         BE    @RF00208                                            0208
*               BUFCEXC=OFF;        /* DROP RD EXCL          @X04SVMR*/
         NI    BUFCEXC(RBUFC),B'11111101'                          0209
*           END;                    /* END OF SR CODE        @X04SVMR*/
*         ELSE                      /* NOT A SPN RCD.        @X04SVMR*/
*           BUFCEXC=OFF;            /* DROP RD EXCL          @X04SVMR*/
*                                                                  0211
         B     @RC00196                                            0211
@RF00196 NI    BUFCEXC(RBUFC),B'11111101'                          0211
*         /***********************************************************/
*         /*                                                         */
*         /* IF A NON-INSERT DATA BUFFER IS FREED, IT MAY BE POSSIBLE*/
*         /* TO DO A READ-AHEAD FOR GET SEQUENTIAL OR CONTROL AREA   */
*         /* SPLIT PROCESSING. (NOTE THAT IT IS ESSENTIAL TO THE     */
*         /* SUCCESS OF THE GET NEXT OPERATION THAT THE READ-AHEAD   */
*         /* ROUTINE BE CALLED BY THE FREE BUFFER ROUTINE SO THAT THE*/
*         /* NEXT SEQUENTIAL BUFC WILL HAVE A VALID RBA IN IT.)      */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0212
*         PLHFRCNT=PLHFRCNT+ONE;    /* INCREMENT FREE BUFC CNT       */
@RC00196 LA    @15,1                                               0212
         SLR   @10,@10                                             0212
         IC    @10,PLHFRCNT(,RPLH)                                 0212
         ALR   @15,@10                                             0212
         STC   @15,PLHFRCNT(,RPLH)                                 0212
*         PLHDBUFC=PLHDBUFC->BUFCNXT2;/* SET DATA BUFC       @X04SVMR*/
         L     @15,PLHDBUFC(,RPLH)                                 0213
         L     @15,BUFCNXT2-1(,@15)                                0213
         LA    @15,0(,@15)                                         0213
         ST    @15,PLHDBUFC(,RPLH)                                 0213
*         IF(PLHFRCNT>=PLHRMIN&     /* SEE IF READ THRESHOLD         */
*             ((RPLSEQ=ON&          /* SEQUENTIAL, AND               */
*             RPLREQ=RPLGET)×       /* A GET REQUEST OR              */
*             PLHRAHD=ON))×         /* FORCED READ AHD       @X04SVMR*/
*             PLHSKPER=ON           /* (OR READ SKIP ALSO)           */
*           THEN                    /* IF THIS IS                    */
         CLC   PLHFRCNT(1,RPLH),PLHRMIN(RPLH)                      0214
         BL    @GL00004                                            0214
         TM    RPLSEQ(RRPL),B'00100000'                            0214
         BNO   @GL00006                                            0214
         CLI   RPLREQ(RRPL),0                                      0214
         BE    @RT00214                                            0214
@GL00006 TM    PLHRAHD(RPLH),B'01000000'                           0214
         BO    @RT00214                                            0214
@GL00004 TM    PLHSKPER(RPLH),B'00100000'                          0214
         BNO   @RF00214                                            0214
@RT00214 DS    0H                                                  0215
*           DO;                     /* SO, DO A READ-AHEAD.          */
*             PLHJRNLL=PLHNBUFC;    /* SAVE PTR TO 1ST RD            */
         L     @15,PLHNBUFC(,RPLH)                                 0216
         ST    @15,PLHJRNLL(,RPLH)                                 0216
*             GEN SETS(PLHRETO,PLHRET1)(IDASVR14);/* SAVE RETURN     */
         IDASVR14
*             RFY                                                  0218
*               R14 UNRESTRICTED;   /* RELEASE REG 14                */
*             RPARM1=PLHDIOB;       /* POINT TO IOB          @X04SVMR*/
         L     RPARM1,PLHDIOB(,RPLH)                               0219
*I01:                                                              0220
*             DO;                   /* IDACALL(IDAWAIT)              */
I01      DS    0H                                                  0221
*               CALL IDAWAIT;       /* EXIT TO IDAWAIT               */
         L     @15,@CV00040                                        0221
         BALR  @14,@15                                             0221
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I01;              /* WAIT FOR PRIOR I/O    @X04SVMR*/
*             CALL RDAHEAD;         /* ATTEMPT READ AHEAD            */
         BAL   @14,RDAHEAD                                         0227
*             RBUFC=PLHJRNLL;       /* RESTORE READ PTR              */
         L     RBUFC,PLHJRNLL(,RPLH)                               0228
*             IF BUFCRRD=ON×        /* IF BFRS TO BE READ            */
*                 PLHSKPER=ON THEN  /* OR PREVIOUS I/O UNDONE        */
         TM    BUFCRRD(RBUFC),B'00100000'                          0229
         BO    @RT00229                                            0229
         TM    PLHSKPER(RPLH),B'00100000'                          0229
         BNO   @RF00229                                            0229
@RT00229 DS    0H                                                  0230
*               DO;                 /* CALL I/O MGR          @X04SVMR*/
*                 IF PLHRVRS=ON THEN/* TEST IF REVERSED      @X04SVMR*/
         TM    PLHRVRS(RPLH),B'00001000'                           0231
         BNO   @RF00231                                            0231
*I02:                                                              0232
*                   DO;             /* IDACALL(IDARVRS1)             */
I02      DS    0H                                                  0233
*                     CALL IDARVRS1;/* EXIT TO IDARVRS1              */
         L     @15,@CV00039                                        0233
         BALR  @14,@15                                             0233
*                     GEN(BALR @11,0);/* LOAD ADDR OF REENTRY        */
         BALR @11,0
*                     GEN(USING *,@11);/* ESTABLISH ADDRESSING       */
         USING *,@11
*                     GEN(L     @11,=A(@PSTART));/* RELOAD BASE      */
         L     @11,=A(@PSTART)
*                     GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING */
         USING @PSTART,@11
*                   END I02;        /* REVERSE NEEDED        @X04SVMR*/
*                 RPARM1=PLHDIOB;   /* PTR TO DATA IOB       @X04SVMR*/
@RF00231 L     RPARM1,PLHDIOB(,RPLH)                               0239
*I03:                                                              0240
*                 DO;               /* IDACALL(IDA019R3)             */
I03      DS    0H                                                  0241
*                   CALL IDA019R3;  /* EXIT TO IDA019R3              */
         L     @15,@CV00038                                        0241
         BALR  @14,@15                                             0241
*                   GEN(BALR @11,0);/* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                   GEN(USING *,@11);/* ESTABLISH ADDRESSING         */
         USING *,@11
*                   GEN(L     @11,=A(@PSTART));/* RELOAD BASE        */
         L     @11,=A(@PSTART)
*                   GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING   */
         USING @PSTART,@11
*                 END I03;          /* CALL I/O MGR TO RD    @X04SVMR*/
*               END;                /* END OF I/O            @X04SVMR*/
*             GEN REFS(HWORD4)(IDARST14);/* RESTORE RETURN REG       */
@RF00229 DS    0H                                                  0248
         IDARST14
*             RFY                                                  0249
*               R14 RESTRICTED;     /* SAVE RETURN REG               */
*           END;                    /* END, READ THRESHOLD MET       */
*       END;                        /* END, PLH BFR CODE             */
*   RETURN;                         /* EXIT TO CALLER                */
@EL00001 DS    0H                                                  0252
@EF00001 DS    0H                                                  0252
@ER00001 BR    @14                                                 0252
*                                                                  0253
*   /*****************************************************************/
*   /*                                                               */
*   /* WRBFR - WRITE BUFFER                                  @X04SVLP*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0253
*/*                                                                  */
*/* FUNCTION = TO WRITE OUT BUFFERS WHICH HAVE WRITE REQUIRED SET IN */
*/*            THEIR BUFCS AND TO CHECK FOR I/O ERRORS.              */
*/* INPUT = RBUFC POINTS TO A BUFC ON THE I/O CHAIN.                 */
*/* OUTPUT = THE STANDARD REGISTERS AND RBUFC ARE UNCHANGED.  A CODE */
*/*          IS SET IN THE RPL IF AN I/O ERROR OCCURS.               */
*                                                                  0253
*WRBFR:                             /*                       @X04SVLP*/
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);/*                     @X04SVLP*/
WRBFR    DS    0H                                                  0254
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
         IDASVR14
*   RESPECIFY                                                      0255
*     R14 UNRESTRICTED;             /* RELEASE REG 14                */
*   RPARM1=PLHDIOB;                 /* POINT TO IOB          @X04SVMR*/
         L     RPARM1,PLHDIOB(,RPLH)                               0256
*I04:                                                              0257
*   DO;                             /* IDACALL(IDAWAIT)              */
I04      DS    0H                                                  0258
*     CALL IDAWAIT;                 /* EXIT TO IDAWAIT               */
         L     @15,@CV00040                                        0258
         BALR  @14,@15                                             0258
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I04;                        /* SYNCHRONIZE           @X04SVLP*/
*   IF RPLASY=OFF THEN              /* IF SYCHRONOUS REQUEST @Z40GSDT*/
         TM    RPLASY(RRPL),B'00001000'                            0264
         BNZ   @RF00264                                            0264
*     PLHSR=ON;                     /* SET SUSPEND/RESUME    @Z40GSDT
*                                      CALL I/O MANAGER              */
         OI    PLHSR(RPLH),B'00000001'                             0265
*I05:                                                              0266
*   DO;                             /* IDACALL(IDA019R3)             */
@RF00264 DS    0H                                                  0266
I05      DS    0H                                                  0267
*     CALL IDA019R3;                /* EXIT TO IDA019R3              */
         L     @15,@CV00038                                        0267
         BALR  @14,@15                                             0267
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I05;                                                       0272
*I06:                                                              0273
*   DO;                             /* IDACALL(IDAWAIT)              */
I06      DS    0H                                                  0274
*     CALL IDAWAIT;                 /* EXIT TO IDAWAIT               */
         L     @15,@CV00040                                        0274
         BALR  @14,@15                                             0274
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I06;                        /* SYNCHRONIZE           @X04SVLP*/
*                                                                  0279
*   /*****************************************************************/
*   /*                                                               */
*   /* SCAN CHAIN FOR I/O ERRORS.                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0280
*   PLHRBUFC=RBUFC;                 /* SAVE RBUFC            @X04SVMR*/
         ST    RBUFC,PLHRBUFC(,RPLH)                               0280
*   DO UNTIL RBUFC=PLHRBUFC;        /* DO ALL                @X04SVMR*/
@DL00281 DS    0H                                                  0282
*     CALL ERRORCHK;                /* I/O ERR?              @X04SVLP*/
         BAL   @14,ERRORCHK                                        0282
*     RBUFC=BUFCNXT2;               /* NEXT                  @X04SVLP*/
         L     @10,BUFCNXT2-1(,RBUFC)                              0283
         LA    @10,0(,@10)                                         0283
         LR    RBUFC,@10                                           0283
*   END;                            /* END DO UNTIL          @X04SVLP*/
@DE00281 C     RBUFC,PLHRBUFC(,RPLH)                               0284
         BNE   @DL00281                                            0284
*   GEN(IDARST14);                  /* RESTORE RETURN REG            */
         IDARST14
*   END WRBFR;                      /* END OF FORCE WRITE            */
@EL00002 DS    0H                                                  0286
@EF00002 DS    0H                                                  0286
@ER00002 BR    @14                                                 0286
*                                                                  0287
*   /*****************************************************************/
*   /*                                                               */
*   /* SBF - SUBTRACT BUFFER                                 @X04SVLP*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0287
*/*                                                                  */
*/* FUNCTION = DECHAINING OF ONE OR ALL BUT ONE DATA BUFCS.          */
*/*            TO DO THIS, A FORCE WRITE IS DONE, EACH BUFC IS MADE  */
*/*            AVAILABLE, EACH NON-LAST BUFC IS REMOVED FROM THE     */
*/*            CHAIN, AND BUFFER COUNTS ARE RESET.                   */
*/* INPUT = RBUFC CONTAINS THE ADDRESS OF THE BUFC TO BE REMOVED     */
*/*         FROM THE CHAIN OR IS SET TO ZERO IF ALL BUT ONE ARE TO   */
*/*         BE REMOVED.                                              */
*/* OUTPUT = RBUFC POINTS TO THE BUFC FOLLOWING THE LAST ONE REMOVED.*/
*                                                                  0287
*SBF:                               /*                       @X04SVLP*/
*   RESPECIFY                                                      0287
*     R14 RESTRICTED;               /* SAVE RETURN REG               */
SBF      DS    0H                                                  0288
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
         IDASVR14
*   IF RBUFC=ZERO                   /* SEE IF SUBTR ALL      @X04SVMR*/
*     THEN                          /* YES, COME HERE                */
         LTR   RBUFC,RBUFC                                         0289
         BNZ   @RF00289                                            0289
*     DO;                                                          0290
*                                                                  0290
*       /*************************************************************/
*       /*                                                           */
*       /* IF SUBTRACT ALL WAS REQUESTED, POINT TO A BUFC AND SET THE*/
*       /* SUBTRACT COUNT TO THE NUMBER OF BUFFERS IN THE            */
*       /* PLACEHOLDER. IF ANY OF THE BUFC'S ON THE PLH CHAIN NEED TO*/
*       /* BE WRITTEN, CALL WRBFR. IF NOT, CALL IDAWAIT TO ALLOW ANY */
*       /* I/O TO COMPLETE.                                  @X04SVLP*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0291
*       RWORK1=ZERO;                /* CLEAR                 @X04SVLP*/
         SLR   RWORK1,RWORK1                                       0291
*       RFY                                                        0292
*         RWORK1 RSTD;              /* LOCK REG              @X04SVLP*/
*       RBUFC=PLHDBUFC;             /* PT TO FIRST           @X04SVLP*/
*                                                                  0293
         L     RBUFC,PLHDBUFC(,RPLH)                               0293
*       /*************************************************************/
*       /*                                                           */
*       /* LOOP THRU CHAIN & CHK FOR MUST WRITE REQ'D        @ZA07544*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0294
*       DO UNTIL RBUFC=PLHDBUFC;                                   0294
@DL00294 DS    0H                                                  0295
*         IF BUFCMW=ON THEN         /* MUST WRITE?           @X04SVLP*/
         TM    BUFCMW(RBUFC),B'10000000'                           0295
         BNO   @RF00295                                            0295
*           RWORK1=RWORK1×TWO;      /* IND WRITE             @X04SVLP*/
         O     RWORK1,@CF00049                                     0296
*         RBUFC=BUFCNXT2;           /* PT TO NXT             @X04SVLP*/
@RF00295 L     @15,BUFCNXT2-1(,RBUFC)                              0297
         LA    @15,0(,@15)                                         0297
         LR    RBUFC,@15                                           0297
*       END;                        /* END DO UNTIL          @X04SVLP*/
@DE00294 L     @15,PLHDBUFC(,RPLH)                                 0298
         CR    RBUFC,@15                                           0298
         BNE   @DL00294                                            0298
*       RBUFC=PLHDBUFC->BUFCNXT2;   /* PT AT BUFC            @X04SVLP*/
         L     RBUFC,BUFCNXT2-1(,@15)                              0299
         LA    RBUFC,0(,RBUFC)                                     0299
*       IF(RWORK1&TWO)^=ZERO THEN   /* ANY WRITES?           @X04SVLP*/
         LR    @15,RWORK1                                          0300
         N     @15,@CF00049                                        0300
         LTR   @15,@15                                             0300
         BZ    @RF00300                                            0300
*         CALL WRBFR;               /* YES, WRITE            @X04SVLP*/
         BAL   @14,WRBFR                                           0301
*       ELSE                        /* NO WRITES             @X04SVLP*/
*         DO;                       /* CALL WAIT             @X04SVLP*/
         B     @RC00300                                            0302
@RF00300 DS    0H                                                  0303
*           RPARM1=PLHDIOB;         /* PT TO IOB             @X04SVLP*/
         L     RPARM1,PLHDIOB(,RPLH)                               0303
*I07:                                                              0304
*           DO;                     /* IDACALL(IDAWAIT)              */
I07      DS    0H                                                  0305
*             CALL IDAWAIT;         /* EXIT TO IDAWAIT               */
         L     @15,@CV00040                                        0305
         BALR  @14,@15                                             0305
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I07;                /* WAIT                  @X04SVLP*/
*         END;                      /*                       @X04SVLP*/
*       RWORK1=PLHBFRNO;            /* GET SUB CNT           @X04SVLP*/
@RC00300 SLR   RWORK1,RWORK1                                       0312
         IC    RWORK1,PLHBFRNO(,RPLH)                              0312
*     END;                          /* END SUBTRACT ALL              */
*   ELSE                            /* HERE FOR SINGLE SUB-          */
*     DO;                           /* TRACT ONLY                    */
         B     @RC00289                                            0314
@RF00289 DS    0H                                                  0315
*       IF RBUFC=BUFDBUFC THEN      /* IF INSERT BFR         @X04SVMR*/
         L     @15,AMBBUFC(,RAMB)                                  0315
         C     RBUFC,BUFDBUFC(,@15)                                0315
         BNE   @RF00315                                            0315
*         BUFCINS=ON;               /* RESET FLAG            @X04SVMR*/
*                                                                  0316
         OI    BUFCINS(RBUFC),B'00100000'                          0316
*       /*************************************************************/
*       /*                                                           */
*       /* IF A SINGLE SUBTRACT (BUFC ASSUMED FREE) SET COUNT TO ONE */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0317
*       IF BUFCMW=ON THEN           /* SEE IF MUST WRITE             */
@RF00315 TM    BUFCMW(RBUFC),B'10000000'                           0317
         BNO   @RF00317                                            0317
*         CALL WRBFR;               /* YES, DO OUTPUT        @X04SVLP*/
         BAL   @14,WRBFR                                           0318
*       RESPECIFY                                                  0319
*         RWORK1 RESTRICTED;        /* GET REGISTER                  */
@RF00317 DS    0H                                                  0320
*       RWORK1=ONE;                 /* SET SUBTRACT COUNT            */
         LA    RWORK1,1                                            0320
*     END;                          /* END, SUBTRACT ONE BFR         */
*/*  INVALIDATE THE SUBTRACTED BUFCS RBAS AND REMOVE EXCLUSIVE CONTROL.
*    IF THE SUBTRACTED BUFCS ARE NOT THE LAST IN THE PLACEHOLDER,  0322
*    REMOVE THEM FROM THE PLACEHOLDER BUFC CHAIN AND RESET BUFC COUNT*/
*                                                                  0322
*   DO RWORK1=RWORK1 TO ONE BY-ONE; /* SUBTRACT ALL NECESSARY NONLAST
*                                      BFRS                          */
@RC00289 B     @DE00322                                            0322
@DL00322 DS    0H                                                  0323
*     IF PLHCNT>ONE×                /* MULTI-STRING?         @ZA32451*/
*         (AMBTYPE=AMBDATA&         /* DATA                  @ZA32451*/
*         PLHBFRNO^=1)×             /* NOT LAST BFR          @ZA32451*/
*         PLHENDRQ=ON×              /* ENDREQ?               @ZA32451*/
*         AMBPUG=ON×                /* MULTI-STRING?         @ZA32451*/
*         AMBINBUF=ON THEN          /* SHR(4)?               @ZA32451*/
         L     @15,AMBPH(,RAMB)                                    0323
         CLI   PLHCNT(@15),1                                       0323
         BH    @RT00323                                            0323
         TM    AMBTYPE(RAMB),B'01000000'                           0323
         BNZ   @GL00011                                            0323
         CLI   PLHBFRNO(RPLH),1                                    0323
         BNE   @RT00323                                            0323
@GL00011 TM    PLHENDRQ(RPLH),B'01000000'                          0323
         BO    @RT00323                                            0323
         TM    AMBPUG(RAMB),B'10000000'                            0323
         BO    @RT00323                                            0323
         TM    AMBINBUF(RAMB),B'00000001'                          0323
         BNO   @RF00323                                            0323
@RT00323 DS    0H                                                  0324
*       DO;                         /* YES-FORGET BFR        @X04SVMR*/
*         BUFCEXC=OFF;              /* RELEASE EXCL CONTROL          */
*         BUFCVAL=OFF;              /* INVALIDATE RBA                */
         NI    BUFCEXC(RBUFC),B'11111001'                          0326
*         BUFCMW=OFF;               /* NO WRITE NEEDED               */
         NI    BUFCMW(RBUFC),B'01111111'                           0327
*         BUFCEPT=ON;               /* NO I/O IN PROGRESS            */
         OI    BUFCEPT(RBUFC),B'00000001'                          0328
*         BUFCEOD=OFF;              /* SET EOD OFF           @ZA14824*/
         NI    BUFCEOD(RBUFC),B'11110111'                          0329
*       END;                        /* END OF FORGET         @X04SVMR*/
*     IF PLHBFRNO^=ONE              /* CHECK FOR LAST BFR            */
*       THEN                        /* IF NOT LAST, OK               */
@RF00323 CLI   PLHBFRNO(RPLH),1                                    0331
         BE    @RF00331                                            0331
*       DO;                         /* TO SUBTRACT IT                */
*         PLHBFRNO=PLHBFRNO-ONE;    /* DECREMENT BFR COUNT           */
         SLR   @15,@15                                             0333
         IC    @15,PLHBFRNO(,RPLH)                                 0333
         BCTR  @15,0                                               0333
         STC   @15,PLHBFRNO(,RPLH)                                 0333
*         IF PLHRMIN-ONE>ZERO&      /* DECREMENT RMIN        @ZA07544*/
*             PLHRMIN-ONE>=PLHBFRNO/TWO THEN/* IF SAFE TO DO @ZA07544*/
         SLR   @10,@10                                             0334
         IC    @10,PLHRMIN(,RPLH)                                  0334
         BCTR  @10,0                                               0334
         LTR   @10,@10                                             0334
         BNP   @RF00334                                            0334
         SRL   @15,1                                               0334
         CR    @10,@15                                             0334
         BL    @RF00334                                            0334
*           PLHRMIN=PLHRMIN-ONE;    /* RESET SCH CNT         @X04SVMR*/
         STC   @10,PLHRMIN(,RPLH)                                  0335
*         RPARM1=PLHNBUFC;          /* GET ON BUFC CHAIN             */
*                                                                  0336
@RF00334 L     RPARM1,PLHNBUFC(,RPLH)                              0336
*         /***********************************************************/
*         /*                                                         */
*         /* REMOVE BUFC FROM LOGICAL AND PHYSICAL ORDER CHAINS      */
*         /*                                                 @X04SVMR*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0337
*         DO WHILE RPARM1->BUFCNXT2^=RBUFC;/* GET LAST BUFC  @X04SVMR*/
         B     @DE00337                                            0337
@DL00337 DS    0H                                                  0338
*           RPARM1=RPARM1->BUFCNXT2;/* GET NEXT BUFC         @X04SVMR*/
         L     @15,BUFCNXT2-1(,RPARM1)                             0338
         LA    @15,0(,@15)                                         0338
         LR    RPARM1,@15                                          0338
*         END;                      /* END, LOGIC CH         @X04SVMR*/
@DE00337 L     @15,BUFCNXT2-1(,RPARM1)                             0339
         LA    @15,0(,@15)                                         0339
         CR    RBUFC,@15                                           0339
         BNE   @DL00337                                            0339
*         RPARM1->BUFCNXT2=BUFCNXT2;/* POINT AROUND          @X04SVMR
*                                      BUFC BEING SUBTRACTED         */
         MVC   BUFCNXT2(3,RPARM1),BUFCNXT2(RBUFC)                  0340
*         DO WHILE RPARM1->BUFCNXT1^=RBUFC;/* GET LAST BUFC  @X04SVMR*/
         B     @DE00341                                            0341
@DL00341 DS    0H                                                  0342
*           RPARM1=RPARM1->BUFCNXT1;/* GET NEXT BUFC         @X04SVMR*/
         L     RPARM1,BUFCNXT1(,RPARM1)                            0342
*         END;                      /* END, PHY CHN          @X04SVMR*/
@DE00341 C     RBUFC,BUFCNXT1(,RPARM1)                             0343
         BNE   @DL00341                                            0343
*         RPARM1->BUFCNXT1=BUFCNXT1;/* POINT AROUND          @X04SVMR
*                                      BUFC BEING SUBTRACTED         */
         L     @15,BUFCNXT1(,RBUFC)                                0344
         ST    @15,BUFCNXT1(,RPARM1)                               0344
*         IF PLHDBUFC=RBUFC THEN    /* SEE IF PLH DATA POINTS        */
         C     RBUFC,PLHDBUFC(,RPLH)                               0345
         BNE   @RF00345                                            0345
*           PLHDBUFC=BUFCNXT2;      /* TO IT. YES.           @X04SVMR*/
         L     @15,BUFCNXT2-1(,RBUFC)                              0346
         LA    @15,0(,@15)                                         0346
         ST    @15,PLHDBUFC(,RPLH)                                 0346
*         IF PLHNBUFC=RBUFC         /* IF NEXT READ POINTS TO        */
*           THEN                    /* BUFC POINT AROUND IT.         */
@RF00345 C     RBUFC,PLHNBUFC(,RPLH)                               0347
         BNE   @RF00347                                            0347
*           DO;                                                    0348
*             PLHNBUFC=BUFCNXT2;    /* POINT AROUND          @X04SVMR*/
         L     @15,BUFCNXT2-1(,RBUFC)                              0349
         LA    @15,0(,@15)                                         0349
         ST    @15,PLHNBUFC(,RPLH)                                 0349
*             PLHFRCNT=PLHFRCNT-ONE;/* DECREMENT FREE COUNT          */
         SLR   @15,@15                                             0350
         IC    @15,PLHFRCNT(,RPLH)                                 0350
         BCTR  @15,0                                               0350
         STC   @15,PLHFRCNT(,RPLH)                                 0350
*           END;                    /* END, SUBTRACT FREE BFR        */
*         RPARM1=RBUFC;             /* COPY BUFFER PTR               */
@RF00347 LR    RPARM1,RBUFC                                        0352
*         RBUFC=BUFCNXT2;           /* GET NEXT BUFC         @X04SVMR*/
         L     @15,BUFCNXT2-1(,RBUFC)                              0353
         LA    @15,0(,@15)                                         0353
         LR    RBUFC,@15                                           0353
*         RPARM1->BUFCNXT1=RPARM1;  /* CHAIN BUFC TO SELF            */
         ST    RPARM1,BUFCNXT1(,RPARM1)                            0354
*         RPARM1->BUFCNXT2=RPARM1;  /* LOG/PHY BOTH          @X04SVMR*/
         STCM  RPARM1,7,BUFCNXT2(RPARM1)                           0355
*         RPARM1->BUFCAVL=CZERO;    /* MAKE BFR AVAIL        @OX02678*/
         MVI   BUFCAVL(RPARM1),B'00000000'                         0356
*         BUFDRREL=ON;              /* SET BFR RELE          @OX02678*/
         L     @15,AMBBUFC(,RAMB)                                  0357
         OI    BUFDRREL(@15),B'10000000'                           0357
*       END;                        /* END OF SUBTRACT CODE          */
*   END;                            /* END OF SUBTRACT LOOP          */
@RF00331 BCTR  RWORK1,0                                            0359
@DE00322 LTR   RWORK1,RWORK1                                       0359
         BP    @DL00322                                            0359
*   RESPECIFY                                                      0360
*     RWORK1 UNRESTRICTED;          /* DROP REGISTER                 */
*SUBTROUT:                          /* EXIT FROM SUB         @X04SVMR*/
*   GEN(IDARST14);                  /* RESTORE RETURN REG            */
SUBTROUT IDARST14
*   RETURN;                         /* END OF SUBTRACT BUFFER        */
         B     @EL00001                                            0362
*                                                                  0363
*   /*****************************************************************/
*   /*                                                               */
*   /* GRB - GET RBA                                         @X04SVLP*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0363
*/*                                                                  */
*/* FUNCTION = READ A CONTROL INTERVAL WITH THE GIVEN RBA.  IF DATA  */
*/*            IS SPECIFIED, RESET READ-AHEAD VALUES AND FREE COUNT, */
*/*            ACQUIRE EXCLUSIVE CONTROL, INITIATE READ-AHEAD (IF    */
*/*            NECESSARY), AND READ THE CONTROL INTERVAL. FOR INDEX, */
*/*            ASSIGN THE PLACEHOLDER INDEX BUFC TO SEQUENCE SET     */
*/*            REQUESTS AND THE FIRST BUFC FOR HIGH LEVEL INDEX      */
*/*            REQUESTS.  FOR INTERMEDIATE INDEX REQUESTS, TRY TO    */
*/*            LOCATE THE DESIRED RBA IN THE INTERMEDIATE INDEX BUFC */
*/*            POOL.  IF RBA NOT IN POOL, LOCATE THE FIRST EMPTY BFR */
*/*            (IF ANY).  IF DESIRED BUFC IS NOT AVAILABLE FOR USE,  */
*/*            USE THE PLACEHOLDER INDEX BUFC. IF THE DESIRED RBA IS */
*/*            NOT IN THE BUFFER, ISSUE A READ.                      */
*/* INPUT = RPARM1 CONTAINS THE DESIRED RBA.  IXSILN CONTAINS THE    */
*/*        LEVEL NUMBER OF THE DESIRED INDEX CONTROL INTERVAL.       */
*/* OUTPUT = RBUFC CONTAINS THE ADDRESS OF THE BUFC WHOSE BUFFER     */
*/*          CONTAINS THE DESIRED RBA.  IF AN ERROR OCCURRED, AN     */
*/*          ERROR CODE WILL BE SET IN THE RPL. IF AN EXCLUSIVE      */
*/*          CONTROL ERROR, RPARM1 WILL CONTAIN THE RBA FOR WHICH    */
*/*          THE CONFLICT OCCURRED.                          @ZA07544*/
*                                                                  0363
*GRB:                               /*                       @X04SVLP*/
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
GRB      IDASVR14
*   RESPECIFY                                                      0364
*     R14 UNRESTRICTED;             /* RELEASE REG 14                */
*   IF AMBTYPE=AMBDATA              /* SEE WHAT TYPE OF LOOK-        */
*     THEN                          /* ASIDE TO DO.                  */
         TM    AMBTYPE(RAMB),B'01000000'                           0365
         BNZ   @RF00365                                            0365
*     DO;                                                          0366
*                                                                  0367
*       /*************************************************************/
*       /*                                                           */
*       /* COME HERE IF GET RBA AND DATA LOOK-ASIDE TO DO            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0367
*       RBUFC=PLHDBUFC;             /* POINT TO CURR DATA BFR.       */
         L     RBUFC,PLHDBUFC(,RPLH)                               0367
*       PLHNBUFC=BUFCNXT2;          /* READ AHD BUFC         @X04SVMR*/
         L     @10,BUFCNXT2-1(,RBUFC)                              0368
         LA    @10,0(,@10)                                         0368
         ST    @10,PLHNBUFC(,RPLH)                                 0368
*       PLHFRCNT=PLHBFRNO-ONE;      /* RESET FREE BUFFER COUNT       */
         SLR   @10,@10                                             0369
         IC    @10,PLHBFRNO(,RPLH)                                 0369
         BCTR  @10,0                                               0369
         STC   @10,PLHFRCNT(,RPLH)                                 0369
*       PLHNRBA=RPARM1;             /* SET READ AHEAD RBA            */
         ST    RPARM1,PLHNRBA(,RPLH)                               0370
*       RPARM1=PLHDIOB;             /* IOB WAIT                      */
         L     RPARM1,PLHDIOB(,RPLH)                               0371
*I08:                                                              0372
*       DO;                         /* IDACALL(IDAWAIT)              */
I08      DS    0H                                                  0373
*         CALL IDAWAIT;             /* EXIT TO IDAWAIT               */
         L     @15,@CV00040                                        0373
         BALR  @14,@15                                             0373
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I08;                    /* QUIESCE I/O           @X04SVLP*/
*       RPARM1=PLHNRBA;             /* RESTORE RBA                   */
*                                                                  0379
         L     RPARM1,PLHNRBA(,RPLH)                               0379
*       /*************************************************************/
*       /*                                                           */
*       /* SEE IF DESIRED RBA IS ALREADY HERE. IF NOT, GET EXCLUSIVE */
*       /* CONTROL FOR THE DESIRED RBA AND SET UP ANY READ-AHEAD THAT*/
*       /* MIGHT BE NECESSARY.                                       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0380
*       CALL DATALOOK;              /* ACQUIRE EXCL CNTL             */
         BAL   @14,DATALOOK                                        0380
*       IF RPLERRCD=RPLEXCL         /* SEE IF RD EXCL ERROR          */
*         THEN                      /* IF SO, PREPARE EXIT           */
         CLI   RPLERRCD(RRPL),20                                   0381
         BNE   @RF00381                                            0381
*         DO;                       /*                               */
*           GEN(IDARST14);          /* RESTORE RETURN REGISTER       */
         IDARST14
*           RETURN;                 /* EXIT                          */
         B     @EL00001                                            0384
*         END;                      /* END OF ERROR CODE             */
*       IF(RPLSEQ=ON&               /* IF THIS IS A SEQUENTIAL       */
*           (RPLREQ=RPLGET×         /* GET OR                @X04SVMR*/
*           RPLREQ=RPLPOINT))×      /* POINT OR IF IT        @X04SVMR*/
*           PLHRAHD=ON              /* IS FORCED,            @X04SVMR*/
*         THEN                      /* READ AHEAD.           @X04SVMR*/
@RF00381 TM    RPLSEQ(RRPL),B'00100000'                            0386
         BNO   @GL00015                                            0386
         CLI   RPLREQ(RRPL),0                                      0386
         BE    @RT00386                                            0386
         CLI   RPLREQ(RRPL),3                                      0386
         BE    @RT00386                                            0386
@GL00015 TM    PLHRAHD(RPLH),B'01000000'                           0386
         BNO   @RF00386                                            0386
@RT00386 DS    0H                                                  0387
*         DO;                                                      0387
*           CALL RDAHEAD;           /* ATTEMPT MORE READS            */
         BAL   @14,RDAHEAD                                         0388
*           IF PLHRVRS=ON THEN      /* IF OUT OF ORDER,      @X04SVMR*/
         TM    PLHRVRS(RPLH),B'00001000'                           0389
         BNO   @RF00389                                            0389
*I09:                                                              0390
*             DO;                   /* IDACALL(IDARVRS1)             */
I09      DS    0H                                                  0391
*               CALL IDARVRS1;      /* EXIT TO IDARVRS1              */
         L     @15,@CV00039                                        0391
         BALR  @14,@15                                             0391
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I09;              /* REVERSE CHAIN         @X04SVMR*/
*         END;                      /* END OF READ AHEAD     @X04SVMR*/
@RF00389 DS    0H                                                  0398
*       RBUFC=PLHDBUFC;             /* RESET FIRST BFR PTR           */
@RF00386 L     RBUFC,PLHDBUFC(,RPLH)                               0398
*       RPARM1=ZERO;                /* CLEAR FOR TEST        @X04SVMR*/
         SLR   RPARM1,RPARM1                                       0399
*       DO UNTIL RBUFC=PLHDBUFC;    /* CHECK ALL BRS         @X04SVMR*/
@DL00400 DS    0H                                                  0401
*         IF BUFCRRD=ON THEN        /* IF READ TO DO         @X04SVMR*/
         TM    BUFCRRD(RBUFC),B'00100000'                          0401
         BNO   @RF00401                                            0401
*           RPARM1=RBUFC;           /* SET INDICATOR         @X04SVMR*/
         LR    RPARM1,RBUFC                                        0402
*         RBUFC=BUFCNXT2;           /* GO TO NEXT BFR        @X04SVMR*/
@RF00401 L     @10,BUFCNXT2-1(,RBUFC)                              0403
         LA    @10,0(,@10)                                         0403
         LR    RBUFC,@10                                           0403
*       END;                        /* END OF READ CHK@X04SVMR       */
@DE00400 C     RBUFC,PLHDBUFC(,RPLH)                               0404
         BNE   @DL00400                                            0404
*       IF RPARM1^=ZERO THEN        /* IF A RD TO DO         @X04SVMR*/
         LTR   RPARM1,RPARM1                                       0405
         BZ    @RF00405                                            0405
*         DO;                       /* MUST CALL I/O         @X04SVMR*/
*           RPARM1=PLHDIOB;         /* POINT TO DATA IOB             */
         L     RPARM1,PLHDIOB(,RPLH)                               0407
*           CALL READBFR;           /* READ IN FIRST BFR             */
         BAL   @14,READBFR                                         0408
*         END;                      /* END I/O CALL          @X04SVMR*/
*     END;                          /* END, DATA LOOK-ASIDE          */
*                                                                  0411
*   /*****************************************************************/
*   /*                                                               */
*   /* GET RBA FOR INDEX                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0411
*   ELSE                            /* HERE FOR INDEX LOOK-          */
*     DO;                           /* ASIDE                         */
*                                                                  0411
         B     @RC00365                                            0411
@RF00365 DS    0H                                                  0412
*       /*************************************************************/
*       /*                                                           */
*       /* IF THIS IS A SEQUENCE SET REQUEST, USE THE PLH BUFC.      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0412
*       IF PLHSSR=ON                /* IF SEQUENCE SET               */
*         THEN                      /* REQUEST USE PLH BUFC          */
         TM    PLHSSR(RPLH),B'00010000'                            0412
         BNO   @RF00412                                            0412
*         DO;                                                      0413
*           PLHSSR=OFF;             /* RESET SEQ SET FLAG            */
         NI    PLHSSR(RPLH),B'11101111'                            0414
*           RBUFC=PLHIBUFC;         /* POINT TO PLH BUFC             */
         L     RBUFC,PLHIBUFC(,RPLH)                               0415
*         END;                      /* END OF SEQ SET CODE           */
*                                                                  0416
*       /*************************************************************/
*       /*                                                           */
*       /* LOCATE THE PROPER BUFC FOR A NON-SEQUENCE SET REQUEST     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0417
*       ELSE                        /* HERE IF NOT SEQ SET           */
*         DO;                                                      0417
*                                                                  0417
         B     @RC00412                                            0417
@RF00412 DS    0H                                                  0418
*           /*********************************************************/
*           /*                                                       */
*           /* FOR HIGH LEVEL INDEX REQUESTS USE THE FIRST BUFC      */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0418
*           RBUFC=BUFDBUFC;         /* 1ST BUFC PTR          @X04SVMR*/
         L     @10,AMBBUFC(,RAMB)                                  0418
         L     RBUFC,BUFDBUFC(,@10)                                0418
*           RFY                                                    0419
*             RWORK3 RSTD;          /* GET WORK REGISTER             */
*                                                                  0419
*           /*********************************************************/
*           /*                                                       */
*           /* FOR INTERMEDIATE LEVELS OF INDEX USE ONE OF THE COMMON*/
*           /* INDEX BUFFERS, IF ANY. SEE IF THE RBA IS ALREADY IN A */
*           /* BUFFER. IF SO, USE ITS BUFC. IF NOT, USE AN EMPTY     */
*           /* BUFC. IF THERE ARE NO EMPTY BUFCS, USE EITHER THE HIGH*/
*           /* LEVEL INDEX BUFC, THE PLACEHOLDER BUFC, OR LOWER LEVEL*/
*           /* INTERMEDIATE BUFC.                            @X04SVMR*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0420
*           IF RPARM1^=AMDHLRBA     /* SEE IF HI LVL IX REQ.         */
*             THEN                  /* NOT HI LVL REQ        @X04SVMR*/
         L     @06,AMBDSB(,RAMB)                                   0420
         CL    RPARM1,AMDHLRBA(,@06)                               0420
         BE    @RF00420                                            0420
*             DO;                                                  0421
*               RFY                                                0422
*                (RWORK1,                                          0422
*                 RWORK2) RSTD;     /* GET REGS              @X04SVMR*/
*               RWORK1=ZERO;        /* CLEAR WORK REGISTER           */
         SLR   RWORK1,RWORK1                                       0423
*               RWORK3=ZERO;        /* NO LOWER LEVEL BUFC FOUND YET
*                                                            @X04SVMR*/
*                                                                  0424
         SLR   RWORK3,RWORK3                                       0424
*               /*****************************************************/
*               /*                                                   */
*               /* POINT TO THE FIRST INTERMEDIATE LEVEL BUFC        */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0425
*               RBUFC=BUFCHAIN;     /* PT PAST 1ST 1         @X04SVMR*/
         L     RBUFC,BUFCHAIN(,RBUFC)                              0425
*               DO RWORK2=BUFDRCIX TO ONE BY-ONE;/* SEARCH BFRS      */
         SLR   RWORK2,RWORK2                                       0426
         IC    RWORK2,BUFDRCIX(,@10)                               0426
         B     @DE00426                                            0426
@DL00426 DS    0H                                                  0427
*                 IF BUFCVAL=ON     /* SEE IF RBA VALID              */
*                   THEN            /* YES--CHECK FOR RBA HIT        */
         TM    BUFCVAL(RBUFC),B'00000100'                          0427
         BNO   @RF00427                                            0427
*                   DO;                                            0428
*                     IF BUFCDDDD=RPARM1/* DO RBAS MATCH             */
*                       THEN                                       0429
         CL    RPARM1,BUFCDDDD(,RBUFC)                             0429
         BE    @RT00429                                            0429
*                       GOTO RBAFND;/* IF SO, END SEARCH             */
*                                                                  0430
*                     /***********************************************/
*                     /*                                             */
*                     /* IF BUFFER HAS A LOWER LEVEL INDEX RECORD OR */
*                     /* ONE OF THE SAME LEVEL, REMEMBER ITS         */
*                     /* LOCATION.                           @X04SVMR*/
*                     /*                                             */
*                     /***********************************************/
*                                                                  0431
*                     IF BUFCIDXL=<IXSILN THEN/* IF BFR      @X04SVMR*/
         CLC   BUFCIDXL(1,RBUFC),IXSILN+200(RPLH)                  0431
         BH    @RF00431                                            0431
*                       RWORK3=RBUFC;/* LOWER, REPLACE       @X04SVMR*/
         LR    RWORK3,RBUFC                                        0432
*                   END;            /* END, VALID RBA                */
*                 ELSE              /* BUFFER EMPTY                  */
*                   RWORK1=RBUFC;   /* SAVE A(UNKNOWN RBA)           */
         B     @RC00427                                            0434
@RF00427 LR    RWORK1,RBUFC                                        0434
*                 RBUFC=BUFCHAIN;   /* GET NEXT BUFFER@X04SVMR       */
@RC00427 L     RBUFC,BUFCHAIN(,RBUFC)                              0435
*               END;                /* END OF SEARCH                 */
         BCTR  RWORK2,0                                            0436
@DE00426 CL    RWORK2,@CF00036                                     0436
         BNL   @DL00426                                            0436
*               IF RWORK1^=ZERO THEN/* ARE ANY RBAS UNKNOWN          */
         LTR   RWORK1,RWORK1                                       0437
         BZ    @RF00437                                            0437
*                 RBUFC=RWORK1;     /* YES, FILL UNKNOWN RBA         */
*                                                                  0438
         LR    RBUFC,RWORK1                                        0438
*               /*****************************************************/
*               /*                                                   */
*               /* IF NO EMPTIES, REPLACE LOWER OR EQUAL VALUE BUFFER*/
*               /* (IF ANY).                                 @X04SVMR*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0439
*               ELSE                /* NO EMPTIES                    */
*                 IF RWORK3^=ZERO THEN/* ANY REPLACES?               */
         B     @RC00437                                            0439
@RF00437 LTR   RWORK3,RWORK3                                       0439
         BZ    @RF00439                                            0439
*                   RBUFC=RWORK3;   /* YES, USE COMMON BUFC          */
         LR    RBUFC,RWORK3                                        0440
*                 ELSE              /* NO REPLACES IF HERE           */
*                   RBUFC=PLHIBUFC; /* USE PRIVATE BUFC              */
         B     @RC00439                                            0441
@RF00439 L     RBUFC,PLHIBUFC(,RPLH)                               0441
*               RFY                                                0442
*                 RWORK3 UNRSTD;    /* DROP WORK REGISTER            */
@RC00439 DS    0H                                                  0442
@RC00437 DS    0H                                                  0443
*             END;                  /* END OF COMMON BFR CODE        */
*RBAFND:                            /* REJOIN NON-SEQUENCE SET       */
*                                                                  0444
*           /*********************************************************/
*           /*                                                       */
*           /* ATTEMPT TO OBTAIN THE DESIRED BUFC. IF IT IS          */
*           /* UNAVAILABLE, USE THE PLACEHOLDER BUFC.                */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0444
*           GEN(TS    BUFCAVL(RBUFC));/* SEE IF BUFC AVAILABLE       */
@RF00420 DS    0H                                                  0444
RBAFND   TS    BUFCAVL(RBUFC)
*           GEN(BZ    HVIBUFC);     /* BRANCH IF SO                  */
         BZ    HVIBUFC
*           RBUFC=PLHIBUFC;         /* IF BUSY USE PLH BUFC          */
         L     RBUFC,PLHIBUFC(,RPLH)                               0446
*HVIBUFC:                                                          0447
*           BUFCPLH=RPLH;           /* ASSOCIATE BUFC WITH PLH       */
*                                                                  0447
HVIBUFC  ST    RPLH,BUFCPLH(,RBUFC)                                0447
*           /*********************************************************/
*           /*                                                       */
*           /* REMEMBER THE INDEX LEVEL THAT WILL BE READ    @X04SVMR*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0448
*           BUFCIDXL=IXSILN;        /* SET IX LEVEL          @X04SVMR*/
         IC    @10,IXSILN+200(,RPLH)                               0448
         STC   @10,BUFCIDXL(,RBUFC)                                0448
*         END;                      /* END NON-SEQUENCE SET          */
*                                                                  0449
*       /*************************************************************/
*       /*                                                           */
*       /* PREPARE THE BUFC FOR READING IF DESIRED RBA NOT PRESENT.  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0450
*       IF BUFCVAL=OFF×             /* IF RBA IS INVALID OR IF       */
*           (AMBINBUF=ON&           /* IF SHR(4), NOT        @ZA07698*/
*           (BUFCIDXL<=ONE×         /* HI IX,                @ZA07698*/
*           AMBSCRA=ON×AMBUCRA=ON×  /*                       @ZA07698*/
*           AMBCAT=ON))×            /* OR IF CATLG,          @ZA07698*/
*           BUFCDDDD^=RPARM1        /* IT DOES NOT MATCH THE         */
*         THEN                      /* ONE DESIRED, A READ IS        */
@RC00412 TM    BUFCVAL(RBUFC),B'00000100'                          0450
         BZ    @RT00450                                            0450
         TM    AMBINBUF(RAMB),B'00000001'                          0450
         BNO   @GL00018                                            0450
         CLI   BUFCIDXL(RBUFC),1                                   0450
         BNH   @RT00450                                            0450
         TM    AMBSCRA(RAMB),B'00011100'                           0450
         BNZ   @RT00450                                            0450
@GL00018 CL    RPARM1,BUFCDDDD(,RBUFC)                             0450
         BE    @RF00450                                            0450
@RT00450 DS    0H                                                  0451
*         DO;                       /* NECESSARY.                    */
*           BUFCRRD=ON;             /* CAUSE A READ TO BE DONE       */
         OI    BUFCRRD(RBUFC),B'00100000'                          0452
*           BUFCDDDD=RPARM1;        /* SET UP RBA                    */
         ST    RPARM1,BUFCDDDD(,RBUFC)                             0453
*           BUFCVAL=ON;             /* MAKE RBA VALID                */
         OI    BUFCVAL(RBUFC),B'00000100'                          0454
*           BUFCXEDB=OFF;           /* RESET INVALID RBA             */
         NI    BUFCXEDB(RBUFC),B'11111011'                         0455
*         END;                      /* END OF MUST READ SETUP        */
*       RPARM1=PLHIIOB;             /* POINT TO INDEX IOB            */
*                                                                  0457
@RF00450 L     RPARM1,PLHIIOB(,RPLH)                               0457
*       /*************************************************************/
*       /*                                                           */
*       /* IF A READ IS REQUIRED, CALL I/O MANAGER TO READ THE       */
*       /* CONTROL INTERVAL, CALL IDAWAIT TO SYNCHRONIZE THE I/O, AND*/
*       /* CHECK FOR ANY ERRORS.                                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0458
*       IF BUFCRRD=ON THEN          /* READ REQUIRED?        @X04SVMR*/
         TM    BUFCRRD(RBUFC),B'00100000'                          0458
         BNO   @RF00458                                            0458
*         DO;                       /*                       @X04SVMR*/
*           CALL READBFR;           /* READ IX BUFFER        @X04SVMR*/
         BAL   @14,READBFR                                         0460
*         END;                      /* END OF IX READ        @X04SVMR*/
*     END;                          /* END OF IX LOOK-ASIDE          */
@RF00458 DS    0H                                                  0463
*   GEN(IDARST14);                  /* RESTORE RETURN REG            */
@RC00365 DS    0H                                                  0463
         IDARST14
*   RETURN;                         /* END, GET BY RBA               */
         B     @EL00001                                            0464
*                                                                  0465
*   /*****************************************************************/
*   /*                                                               */
*   /* GNFL - GET NEXT BUFC                                  @X04SVLP*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0465
*/*                                                                  */
*/* FUNCTION = PROVIDE A POINTER TO AN INDEX OR DATA WORK BUFC.      */
*/* INPUT = STANDARD VSAM REGISTERS.                                 */
*/* OUTPUT = RBUFC POINTS TO THE DATA INSERT BUFC OR THE PLACEHOLDER */
*/*          INDEX BUFC.                                             */
*                                                                  0465
*GNFL:                              /* GET WK BUFFER         @X04SVLP*/
*   RESPECIFY                                                      0465
*     R14 RESTRICTED;               /* GET REGISTER                  */
*                                                                  0465
GNFL     DS    0H                                                  0466
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE REQUEST IS FOR A DATA WORK BUFC, ASSIGN THE INSERT     */
*   /* BUFC. FOR INDEX, ASSIGN THE PLACEHOLDER INDEX BUFC.           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0466
*   IF AMBTYPE=AMBDATA              /* SEE IF DATA AMB               */
*     THEN                          /* YES, USE DIWA BUFFER          */
         TM    AMBTYPE(RAMB),B'01000000'                           0466
         BNZ   @RF00466                                            0466
*     RBUFC=DIWBUFC;                /* POINT TO INSERT BUFC          */
         L     @15,AMBIWA(,RAMB)                                   0467
         L     RBUFC,DIWBUFC(,@15)                                 0467
*   ELSE                            /* NO, INDEX AMB                 */
*     RBUFC=PLHIBUFC;               /* USE INDEX BUFFER              */
         B     @RC00466                                            0468
@RF00466 L     RBUFC,PLHIBUFC(,RPLH)                               0468
*   BUFCPLH=RPLH;                   /* INDICATE BUFFER OWNER         */
@RC00466 ST    RPLH,BUFCPLH(,RBUFC)                                0469
*   BUFCVAL=OFF;                    /* INVALIDATE THE RBA            */
         NI    BUFCVAL(RBUFC),B'11111011'                          0470
*   RETURN;                         /* RETURN TO CALLER              */
         B     @EL00001                                            0471
*                                                                  0472
*   /*****************************************************************/
*   /*                                                               */
*   /* GNNFL - GET NEXT BUFC FOR OUTPUT                      @X04SVLP*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0472
*/*                                                                  */
*/* FUNCTION = ASSIGN THE NEXT BUFC IN THE PLACEHOLDER CHAIN FOR     */
*/*            OUTPUT. (IF THE NEXT BUFC HAS NOT YET BEEN WRITTEN OR */
*/*            IF THRESHOLD REACHED, FORCE OUT ALL WRITES).          */
*/* INPUT = STANDARD VSAM REGISTERS.                                 */
*/* OUTPUT = RBUFC POINTS TO THE BUFC WHICH IS TO BE USED FOR OUTPUT.*/
*                                                                  0472
*GNNFL:                             /* GET NEXT PLH BUFFER   @X04SVLP*/
*   RESPECIFY                                                      0472
*     R14 RESTRICTED;               /* SAVE RETURN REG               */
GNNFL    DS    0H                                                  0473
*   GEN(IDASVR14);                  /* SAVE RETURN REG       @X04SVMR*/
         IDASVR14
*   RESPECIFY                                                      0474
*     R14 UNRESTRICTED;             /* RELEASE REG 14        @X04SVMR*/
*                                                                  0474
*   /*****************************************************************/
*   /*                                                               */
*   /* GET THE NEXT DATA BUFFER IN THE CHAIN. IF NECESSARY, WRITE IT */
*   /* BEFORE RETURNING THE BUFFER TO THE USER FOR REFILLING.        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0475
*   RBUFC=PLHDBUFC;                 /* GET NEXT AVAILABLE BFR        */
         L     RBUFC,PLHDBUFC(,RPLH)                               0475
*   IF PLHFRCNT>=PLHRMIN THEN       /* SEE IF AT             @X04SVMR*/
         CLC   PLHFRCNT(1,RPLH),PLHRMIN(RPLH)                      0476
         BL    @RF00476                                            0476
*     DO;                           /* THRESHOLD YET.        @X04SVMR*/
*       PLHFRCNT=ZERO;              /* RESET FREE CNT        @X04SVMR*/
         MVI   PLHFRCNT(RPLH),X'00'                                0478
*       RPARM1=PLHDIOB;             /* POINT TO IOB          @X04SVMR*/
         L     RPARM1,PLHDIOB(,RPLH)                               0479
*I10:                                                              0480
*       DO;                         /* IDACALL(IDAWAIT)              */
I10      DS    0H                                                  0481
*         CALL IDAWAIT;             /* EXIT TO IDAWAIT               */
         L     @15,@CV00040                                        0481
         BALR  @14,@15                                             0481
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I10;                    /* QUIESCE PRIOR I/0     @X04SVMR*/
*       DO UNTIL RBUFC=PLHDBUFC;    /* DO ALL                @X04SVMR*/
@DL00487 DS    0H                                                  0488
*         CALL ERRORCHK;            /* I/O ERR?              @X04SVMR*/
         BAL   @14,ERRORCHK                                        0488
*         RBUFC=BUFCNXT2;           /* NEXT                  @X04SVMR*/
         L     @10,BUFCNXT2-1(,RBUFC)                              0489
         LA    @10,0(,@10)                                         0489
         LR    RBUFC,@10                                           0489
*       END;                        /* END DO UNTIL          @X04SVMR*/
@DE00487 C     RBUFC,PLHDBUFC(,RPLH)                               0490
         BNE   @DL00487                                            0490
*       IF RPLERREG=ZERO THEN       /* IF NO ERRORS, DO I/O  @X04SVMR*/
         CLI   RPLERREG(RRPL),0                                    0491
         BNE   @RF00491                                            0491
*         DO;                       /* I/O MANAGER INTERFACE @Z40GSDT*/
*           IF BUFCMW=ON&           /* IF MUST WRITE AND     @Z40GSDT*/
*               RPLASY=OFF THEN     /* SYNCHRONOUS           @Z40GSDT*/
         TM    BUFCMW(RBUFC),B'10000000'                           0493
         BNO   @RF00493                                            0493
         TM    RPLASY(RRPL),B'00001000'                            0493
         BNZ   @RF00493                                            0493
*             PLHSR=ON;             /* DO SUSPEND/RESUME     @Z40GSDT*/
         OI    PLHSR(RPLH),B'00000001'                             0494
*I11:                                                              0495
*           DO;                     /* IDACALL(IDA019R3)             */
@RF00493 DS    0H                                                  0495
I11      DS    0H                                                  0496
*             CALL IDA019R3;        /* EXIT TO IDA019R3              */
         L     @15,@CV00038                                        0496
         BALR  @14,@15                                             0496
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I11;                /* CALL I/O MANAGER      @X04SVMR*/
*         END;                      /* I/O MANAGER INTERFACE @Z40GSDT*/
*     END;                          /* END OF START I/O CODE @X04SVMR*/
@RF00491 DS    0H                                                  0504
*   BUFCVAL=OFF;                    /* UNKNOWN RBA                   */
@RF00476 NI    BUFCVAL(RBUFC),B'11111011'                          0504
*   IF BUFCMW=ON×                   /* IF MUST WRITE OR      @X04SVMR*/
*       BUFCEPT=OFF THEN            /* IF NOT POSTED,        @X04SVMR*/
         TM    BUFCMW(RBUFC),B'10000000'                           0505
         BO    @RT00505                                            0505
         TM    BUFCEPT(RBUFC),B'00000001'                          0505
         BNZ   @RF00505                                            0505
@RT00505 DS    0H                                                  0506
*     DO;                           /*                       @X04SVMR*/
*       RPARM1=PLHDIOB;             /* SET IOB PTR           @X04SVMR*/
         L     RPARM1,PLHDIOB(,RPLH)                               0507
*I12:                                                              0508
*       DO;                         /* IDACALL(IDAWAIT)              */
I12      DS    0H                                                  0509
*         CALL IDAWAIT;             /* EXIT TO IDAWAIT               */
         L     @15,@CV00040                                        0509
         BALR  @14,@15                                             0509
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I12;                    /* WAIT FOR I/O.         @X04SVMR*/
*       IF PLHDBUFC->BUFCMW=ON THEN /* IF MUST WRITE,        @X04SVMR*/
         L     @10,PLHDBUFC(,RPLH)                                 0515
         TM    BUFCMW(@10),B'10000000'                             0515
         BNO   @RF00515                                            0515
*         DO;                       /* WRAP-AROUND OCCURRED  @X04SVMR*/
*           RBUFC=PLHDBUFC;         /* POINT TO CURRENT BUFC @X04SVMR*/
         LR    RBUFC,@10                                           0517
*           CALL WRBFR;             /* WRITE OUT BUFFER      @X04SVLP*/
         BAL   @14,WRBFR                                           0518
*         END;                      /* END OF WRAP-AROUND    @X04SVMR*/
*       ELSE                        /* WRITING HAS FINISHED  @X04SVMR*/
*         DO UNTIL RBUFC=PLHDBUFC;  /* CHECK FOR PRIOR ERROR @X04SVMR*/
         B     @RC00515                                            0520
@RF00515 DS    0H                                                  0520
@DL00520 DS    0H                                                  0521
*           CALL ERRORCHK;          /* CHECK FOR ERROR       @X04SVMR*/
         BAL   @14,ERRORCHK                                        0521
*           RBUFC=BUFCNXT2;         /* NEXT                  @ZA08016*/
         L     @10,BUFCNXT2-1(,RBUFC)                              0522
         LA    @10,0(,@10)                                         0522
         LR    RBUFC,@10                                           0522
*         END;                      /* END PRIOR ERROR TEST  @X04SVMR*/
@DE00520 C     RBUFC,PLHDBUFC(,RPLH)                               0523
         BNE   @DL00520                                            0523
*     END;                          /* END OF NON-POSTED/MW  @X04SVMR*/
@RC00515 DS    0H                                                  0525
*   GEN(IDARST14);                  /* RESTORE RETURN REG    @X04SVMR*/
@RF00505 DS    0H                                                  0525
         IDARST14
*   RESPECIFY                                                      0526
*     R14 RESTRICTED;               /* SAVE RETURN REG       @X04SVMR*/
*   RETURN CODE(RPLERREG);          /* END OF GET NEXT, NOFILL       */
         SLR   @15,@15                                             0527
         IC    @15,RPLERREG(,RRPL)                                 0527
         BR    @14                                                 0527
*                                                                  0528
*   /*****************************************************************/
*   /*                                                               */
*   /* GNXT - GET NEXT CI                                    @X04SVLP*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0528
*/*                                                                  */
*/* FUNCTION = GET THE NEXT CONTROL INTERVAL IN LOGICAL OR PHYSICAL  */
*/*            SEQUENCE.  FIRST, CHECK FOR END-OF-DATA AND THEN      */
*/*            CHECK FOR THE PROPER EXCLUSIVE CONTROL.               */
*/* INPUT = STANDARD VSAM REGISTERS. (PLHDBUFC HAS BEEN ADVANCED TO  */
*/*         THE PROPER BUFC BY THE FREE BUFFER ROUTINE.)             */
*/* OUTPUT = RBUFC IS SET AND A RETURN CODE IS IN THE RPL.  IF AN    */
*/*         EXCLUSIVE CONTROL ERROR OCCURS, RPARM1 WILL CONTAIN THE  */
*/*         RBA FOR WHICH IT HAPPENED.                       @ZA07544*/
*                                                                  0528
*GNXT:                              /* HERE FOR GET NEXT     @X04SVLP*/
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
GNXT     IDASVR14
*   RESPECIFY                                                      0529
*     R14 UNRESTRICTED;             /* RELEASE REG 14                */
*                                                                  0529
*   /*****************************************************************/
*   /*                                                               */
*   /* GET THE NEXT DATA CONTROL INTERVAL. IF NO RBA (SEE IDAFRBA) IS*/
*   /* SET, SET AN END-OF-DATA CONDITION.                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0530
*   RBUFC=PLHDBUFC;                 /* POINT TO NEXT BUFC            */
         L     RBUFC,PLHDBUFC(,RPLH)                               0530
*   IF BUFCEPT=OFF THEN             /* IF I/O UNDONE         @ZA17533*/
         TM    BUFCEPT(RBUFC),B'00000001'                          0531
         BNZ   @RF00531                                            0531
*     DO;                           /* WAIT                  @X04SVMR*/
*       RPARM1=PLHDIOB;             /* SET PTR TO DATA IOB           */
         L     RPARM1,PLHDIOB(,RPLH)                               0533
*I13:                                                              0534
*       DO;                         /* IDACALL(IDAWAIT)              */
I13      DS    0H                                                  0535
*         CALL IDAWAIT;             /* EXIT TO IDAWAIT               */
         L     @15,@CV00040                                        0535
         BALR  @14,@15                                             0535
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I13;                    /* WAIT FOR BUFFER       @X04SVLP*/
*       RBUFC=PLHDBUFC;             /* RESET BUFC PTR        @X04SVMR*/
         L     RBUFC,PLHDBUFC(,RPLH)                               0541
*     END;                          /* END OF WAIT           @X04SVMR*/
*   IF BUFCEOD=ON                   /* IF BUFCEOD ON         @ZA14824*/
*     THEN                          /* IT CAN ONLY MEAN THAT         */
@RF00531 TM    BUFCEOD(RBUFC),B'00001000'                          0543
         BNO   @RF00543                                            0543
*     DO;                           /* READ AHEAD DETECTED AN        */
*       RPLERREG='08'X;             /* END OF DATA CONDITION.        */
         MVI   RPLERREG(RRPL),X'08'                                0545
*       RPLERRCD=RPLEODER;          /* SET EOD CODE IN RPL           */
         MVI   RPLERRCD(RRPL),X'04'                                0546
*     END;                          /* END OF EOD CODE               */
*                                                                  0547
*   /*****************************************************************/
*   /*                                                               */
*   /* MAKE SURE OF PROPER EXCLUSIVE CONTROL AND LACK OF ERRORS      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0548
*   ELSE                            /* RBA VALID = NO EOD            */
*     DO;                                                          0548
         B     @RC00543                                            0548
@RF00543 DS    0H                                                  0549
*       IF PLHRDEXC=ON&             /* IF EXCL CNTL NEEDED,          */
*           BUFCEXC=OFF             /* BUT NOT OBTAINED, TRY         */
*         THEN                      /* TO OBTAIN EXCL CNTL.          */
         TM    PLHRDEXC(RPLH),B'00001000'                          0549
         BNO   @RF00549                                            0549
         TM    BUFCEXC(RBUFC),B'00000010'                          0549
         BNZ   @RF00549                                            0549
*         DO;                                                      0550
*           BUFCRRD=ON;             /* REREAD IS REQUIRED            */
         OI    BUFCRRD(RBUFC),B'00100000'                          0551
*           CALL GETEXCL;           /* GET EXCLUSIVE CONTROL         */
         BAL   @14,GETEXCL                                         0552
*           RPARM1=PLHDIOB;         /* I/O IS FOR DATA               */
         L     RPARM1,PLHDIOB(,RPLH)                               0553
*           IF RPLERREG='00'X THEN  /* IF EXCL CNTL ACQUIRED,        */
         CLI   RPLERREG(RRPL),0                                    0554
         BNE   @RF00554                                            0554
*             DO;                   /*                       @ZA17533*/
*I14:                                                              0556
*               DO;                 /* IDACALL(IDAWAIT)              */
I14      DS    0H                                                  0557
*                 CALL IDAWAIT;     /* EXIT TO IDAWAIT               */
         L     @15,@CV00040                                        0557
         BALR  @14,@15                                             0557
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I14;            /* WAIT FOR I/O          @ZA17533*/
*               RPARM1=PLHDIOB;     /* I/O IS FOR DATA       @ZA17533*/
         L     RPARM1,PLHDIOB(,RPLH)                               0563
*               CALL READBFR;       /* READ THE CINV.                */
         BAL   @14,READBFR                                         0564
*             END;                  /*                       @ZA17533*/
*           ELSE                    /* EXCL CNTL ERROR               */
*             DO;                   /*                       @ZA07544*/
         B     @RC00554                                            0566
@RF00554 DS    0H                                                  0567
*               RPARM1=BUFCDDDD;    /* PASS BACK RBA         @ZA07544*/
         L     RPARM1,BUFCDDDD(,RBUFC)                             0567
*               BUFCRRD=OFF;        /* NO READ IF ERROR              */
         NI    BUFCRRD(RBUFC),B'11011111'                          0568
*             END;                  /* END EXCL ERROR        @ZA07544*/
*         END;                      /* END OF OBTAIN EXCL CNTL       */
*       ELSE                        /* EXCL CNTL OK                  */
*         DO;                       /*                       @X04SVMR*/
         B     @RC00549                                            0571
@RF00549 DS    0H                                                  0572
*           IF BUFCRRD=ON THEN      /* READ TO DO?           @X04SVMR*/
         TM    BUFCRRD(RBUFC),B'00100000'                          0572
         BNO   @RF00572                                            0572
*             DO;                   /*                       @X04SVMR*/
*               RPARM1=PLHDIOB;     /* I/O IS FOR DATA       @ZA17533*/
         L     RPARM1,PLHDIOB(,RPLH)                               0574
*I15:                                                              0575
*               DO;                 /* IDACALL(IDAWAIT)              */
I15      DS    0H                                                  0576
*                 CALL IDAWAIT;     /* EXIT TO IDAWAIT               */
         L     @15,@CV00040                                        0576
         BALR  @14,@15                                             0576
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I15;            /* WAIT FOR I/O          @ZA17533*/
*               RPARM1=PLHDIOB;     /* SET IOB PTR           @X04SVMR*/
         L     RPARM1,PLHDIOB(,RPLH)                               0582
*               CALL READBFR;       /* YES, DO READ          @X04SVMR*/
         BAL   @14,READBFR                                         0583
*             END;                  /* END READ TO DO        @X04SVMR*/
*           CALL ERRORCHK;          /* SEE IF ANY ERRORS             */
@RF00572 BAL   @14,ERRORCHK                                        0585
*         END;                      /* END OF EXCL OK        @X04SVMR*/
*     END;                          /* END OF VALID RBA              */
@RC00549 DS    0H                                                  0588
*   GEN(IDARST14);                  /* RESTORE RETURN REG            */
@RC00543 DS    0H                                                  0588
         IDARST14
*   RESPECIFY                                                      0589
*     R14 RESTRICTED;               /* SAVE RETURN REG               */
*   RETURN;                         /* END OF GET NEXT               */
         B     @EL00001                                            0590
*                                                                  0591
*   /*****************************************************************/
*   /*                                                               */
*   /* GETEXCL - GET EXCLUSIVE CONTROL OF BUFC               @X04SVLP*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0591
*/*                                                                  */
*/* FUNCTION = GET PROPER EXCLUSIVE CONTROL OF A CONTROL INTERVAL.   */
*/* INPUT = RBUFC CONTAINS THE BUFC FOR WHICH EXCLUSIVE CONTROL IS   */
*/*         TO BE OBTAINED.                                          */
*/* OUTPUT = BUFC IS SET TO INDICATE LEVEL OF EXCLUSIVE CONTROL      */
*/*          OBTAINED AND A RETURN CODE IS SET IN THE RPL.           */
*                                                                  0591
*GETEXCL:                           /* ACQUIRE EXCL CNTL OF          */
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);/* BFR IF NECESSARY            */
GETEXCL  DS    0H                                                  0592
*   RESPECIFY                                                      0592
*     R14 RESTRICTED;               /* SAVE RETURN REG               */
*   BUFXIRBA=BUFCDDDD;              /* COPY RBA              @X04SVLP*/
*                                                                  0593
         L     @15,BUFCDDDD(,RBUFC)                                0593
         ST    @15,BUFXIRBA(,RBUFC)                                0593
*   /*****************************************************************/
*   /*                                                               */
*   /* IF PLACEHOLDER IS IN READ EXCLUSIVE MODE, GET CINV IN         */
*   /* EXCLUSIVE CONTROL.                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0594
*   IF PLHRDEXC=ON                  /* SEE IF EXCL CNTL IS           */
*     THEN                          /* REQUIRED                      */
         TM    PLHRDEXC(RPLH),B'00001000'                          0594
         BNO   @RF00594                                            0594
*     DO;                           /* YES, ACQUIRE IT               */
*                                                                  0595
*       /*************************************************************/
*       /*                                                           */
*       /* MARK THE BUFC AS HAVING THE RECORD IN EXCLUSIVE CONTROL.  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0596
*       BUFCEXC=ON;                 /* INDICATE EXCL CNTL            */
         OI    BUFCEXC(RBUFC),B'00000010'                          0596
*       GEN(BR    0);               /* SYNCH FOR M P         @X04SVMR*/
*                                                                  0597
         BR    0
*       /*************************************************************/
*       /*                                                           */
*       /* IF A CONFLICT EXISTS WITH ANOTHER PLACEHOLDER THAT IS     */
*       /* PERFORMING A CONTROL AREA SPLIT, EXIT WITH ERROR          */
*       /* INDICATED.                                                */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0598
*       IF(DIWCAS=ON&               /* IF CA SPLIT ACTIVE    @ZA25653*/
*           DIWPLH^=RPLH&           /* FOR OTHER PLH,        @ZA25653*/
*           (BUFXIRBA>=DIWLRBA&     /* RBA GT START, BUT     @ZA25653*/
*           BUFXIRBA<=DIWHRBA))×    /* LT END OF CA, OR      @ZA25653*/
*           (DIWSHIFT=ON&           /* INSERT CI SHIFTED     @ZA25653*/
*           DIWPLH^=RPLH&           /* FOR OTHER PLH,        @ZA25653*/
*           BUFXIRBA=DIWINRBA) THEN /* AND CONFLICT.         @ZA25653*/
         L     @15,AMBIWA(,RAMB)                                   0598
         TM    DIWCAS(@15),B'10000000'                             0598
         BNO   @GL00025                                            0598
         C     RPLH,DIWPLH(,@15)                                   0598
         BE    @GL00025                                            0598
         L     @10,BUFXIRBA(,RBUFC)                                0598
         CL    @10,DIWLRBA(,@15)                                   0598
         BL    @GL00025                                            0598
         CL    @10,DIWHRBA(,@15)                                   0598
         BNH   @RT00598                                            0598
@GL00025 L     @15,AMBIWA(,RAMB)                                   0598
         TM    DIWSHIFT(@15),B'00000100'                           0598
         BNO   @RF00598                                            0598
         C     RPLH,DIWPLH(,@15)                                   0598
         BE    @RF00598                                            0598
         CLC   BUFXIRBA(4,RBUFC),DIWINRBA(@15)                     0598
         BE    @RT00598                                            0598
*         GO TO RDEXCLER;           /* IF SO, SET ERROR.     @OX02678*/
*       RESPECIFY                                                  0600
*        (RWORK1,                                                  0600
*         RWORK2) RESTRICTED;       /* GET REGISTERS                 */
*                                                                  0600
@RF00598 DS    0H                                                  0601
*       /*************************************************************/
*       /*                                                           */
*       /* SEE IF ANY OTHER PLACEHOLDERS HAVE THE CONTROL INTERVAL IN*/
*       /* EXCLUSIVE CONTROL OR HAVE AN UPDATE PENDING FOR IT.       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0601
*       RWORK1=BUFDBUFC;            /* POINT TO FIRST BUFC@X04SVMR   */
         L     @15,AMBBUFC(,RAMB)                                  0601
         L     RWORK1,BUFDBUFC(,@15)                               0601
*       DO RWORK2=BUFDRNO TO ONE BY-ONE;/* SEARCH BUFFER POOL.       */
         SLR   RWORK2,RWORK2                                       0602
         IC    RWORK2,BUFDRNO(,@15)                                0602
         B     @DE00602                                            0602
@DL00602 DS    0H                                                  0603
*         IF RWORK1->BUFCPLH^=RPLH  /* SEE IF BFR ASSIGNED TO        */
*           THEN                    /* OTHER PLH. YES, CHECK         */
         C     RPLH,BUFCPLH(,RWORK1)                               0603
         BE    @RF00603                                            0603
*           DO;                     /* IT FOR CONFLICT               */
*             IF RWORK1->BUFCEXC=ON&/* IF IN EXCL CNTL AND IF        */
*                 (RWORK1->BUFCDDDD=BUFXIRBA×/* INPUT RBA MATCH    0605
*                                                            @ZA07530*/
*                 (AMDSPAN=ON&      /* SPANNED RECORDS OK    @ZA07530*/
*                 RWORK1->BUFXIRBA=BUFXIRBA)) THEN/*         @ZA07530*/
         TM    BUFCEXC(RWORK1),B'00000010'                         0605
         BNO   @RF00605                                            0605
         L     @15,BUFXIRBA(,RBUFC)                                0605
         CL    @15,BUFCDDDD(,RWORK1)                               0605
         BE    @RT00605                                            0605
         L     @10,AMBDSB(,RAMB)                                   0605
         TM    AMDSPAN(@10),B'00000001'                            0605
         BNO   @RF00605                                            0605
         CL    @15,BUFXIRBA(,RWORK1)                               0605
         BE    @RT00605                                            0605
*               GO TO RDEXCLER;     /* SET ERROR CONDITION.          */
*             IF RWORK1->BUFCMW=ON& /* IF BFR WILL BE WRITTEN        */
*                 (RWORK1->BUFCORBA=BUFXIRBA×/* OUTPUT RBA MATCH   0607
*                                                            @ZA07530*/
*                 (AMDSPAN=ON&      /* SPANNED RECORDS OK    @ZA07530*/
*                 RWORK1->BUFXORBA=BUFXIRBA)) THEN/*         @ZA07530*/
@RF00605 TM    BUFCMW(RWORK1),B'10000000'                          0607
         BNO   @RF00607                                            0607
         L     @15,BUFXIRBA(,RBUFC)                                0607
         CL    @15,BUFCORBA(,RWORK1)                               0607
         BE    @RT00607                                            0607
         L     @10,AMBDSB(,RAMB)                                   0607
         TM    AMDSPAN(@10),B'00000001'                            0607
         BNO   @RF00607                                            0607
         CL    @15,BUFXORBA(,RWORK1)                               0607
         BE    @RT00607                                            0607
*               GO TO RDEXCLER;     /* SET ERROR IF EQUAL.           */
*           END;                    /* END OF OTHER PLH CODE         */
@RF00607 DS    0H                                                  0610
*         RWORK1=RWORK1->BUFCHAIN;  /* POINT TO NEXT BFR     @X04SVMR*/
@RF00603 L     RWORK1,BUFCHAIN(,RWORK1)                            0610
*       END;                        /* END OF BFR POOL SEARCH        */
         BCTR  RWORK2,0                                            0611
@DE00602 CL    RWORK2,@CF00036                                     0611
         BNL   @DL00602                                            0611
*       RESPECIFY                                                  0612
*        (RWORK1,                                                  0612
*         RWORK2) UNRESTRICTED;     /* DROP REGISTERS                */
*       RETURN;                     /* EXCL CNTL ACQUIRED OK         */
*                                                                  0613
@EL00003 DS    0H                                                  0613
@EF00003 DS    0H                                                  0613
@ER00003 BR    @14                                                 0613
*       /*************************************************************/
*       /*                                                           */
*       /* IF ANOTHER PLACEHOLDER HAS EXCLUSIVE CONTROL, RESET OUR   */
*       /* EXCLUSIVE CONTROL AND SET AN ERROR IN THE RPL.            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0614
*RDEXCLER:                          /* HERE FOR ERROR                */
*       BUFCEXC=OFF;                /* RESET EXCL CNTL FLAG          */
RDEXCLER NI    BUFCEXC(RBUFC),B'11111101'                          0614
*       RPLERREG='08'X;             /* SET LOGICAL ERROR             */
         MVI   RPLERREG(RRPL),X'08'                                0615
*       RPLERRCD=RPLEXCL;           /* SET EXCL CNTL CONFLICT        */
         MVI   RPLERRCD(RRPL),X'14'                                0616
*     END;                          /* END EXCL CNTL REQUIRED        */
*   ELSE                            /* NOT IN RD EXCL        @X04SVMR*/
*     BUFCEXC=OFF;                  /* NO EXCL CNTL          @X04SVMR*/
         B     @RC00594                                            0618
@RF00594 NI    BUFCEXC(RBUFC),B'11111101'                          0618
*   END GETEXCL;                    /* END, GET EXCL CNTL CODE       */
         B     @EL00003                                            0619
*                                                                  0620
*   /*****************************************************************/
*   /*                                                               */
*   /* READBFR - READ A CONTROL INTERVAL                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0620
*/*                                                                  */
*/* FUNCTION = CALL I/O MANAGER, CALL IDAWAIT, AND CHECK FOR ERROR   */
*/* INPUT = RBUFC IS THE BUFC TO READ, RPARM1 IS THE IOB POINTER.    */
*/*         THE OTHER REGISTERS HAVE THEIR STANDARD CONTENTS.        */
*/* OUTPUT = REGISTERS UNCHANGED, ERROR CODE SET IN RPL.             */
*                                                                  0620
*READBFR:                                                          0620
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0620
READBFR  DS    0H                                                  0621
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
         IDASVR14
*   RFY                                                            0622
*     R14 UNRSTD;                   /* RELEASE REGISTER              */
*   IF RPLASY=OFF THEN              /* IF SYNCHRONOUS REQUEST      0623
*                                                            @Z40GSDT*/
         TM    RPLASY(RRPL),B'00001000'                            0623
         BNZ   @RF00623                                            0623
*     PLHSR=ON;                     /* DO SUSPEND/RESUME     @Z40GSDT*/
         OI    PLHSR(RPLH),B'00000001'                             0624
*I16:                                                              0625
*   DO;                             /* IDACALL(IDA019R3)             */
@RF00623 DS    0H                                                  0625
I16      DS    0H                                                  0626
*     CALL IDA019R3;                /* EXIT TO IDA019R3              */
         L     @15,@CV00038                                        0626
         BALR  @14,@15                                             0626
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I16;                        /* CALL I/O MGR FOR READ         */
*I17:                                                              0632
*   DO;                             /* IDACALL(IDAWAIT)              */
I17      DS    0H                                                  0633
*     CALL IDAWAIT;                 /* EXIT TO IDAWAIT               */
         L     @15,@CV00040                                        0633
         BALR  @14,@15                                             0633
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I17;                        /* WAIT FOR I/O COMPLETION     0638
*                                                            @X04SVLP*/
*   CALL ERRORCHK;                  /* CHECK FOR READ ERROR          */
         BAL   @14,ERRORCHK                                        0639
*   GEN(IDARST14);                  /* RESTORE RETURN                */
         IDARST14
*   END READBFR;                    /* END OF READ BUFFER            */
@EL00004 DS    0H                                                  0641
@EF00004 DS    0H                                                  0641
@ER00004 BR    @14                                                 0641
*                                                                  0642
*   /*****************************************************************/
*   /*                                                               */
*   /* ERRORCHK -- CHECK FOR READ ERROR                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0642
*/*                                                                  */
*/* FUNCTION = TEST BUFC FOR SUCCESS OF READ.                        */
*/* INPUT = RBUFC IS ADDRESS OF BUFC FOR READ.                       */
*/* OUTPUT = RETURN CODE IS SET IN THE RPL.                          */
*/*          RPARM1 = RBA IF ERROR.                          @ZA07544*/
*                                                                  0642
*ERRORCHK:                          /* CHECK FOR ERRORS              */
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0642
ERRORCHK DS    0H                                                  0643
*   RFY                                                            0643
*     R14 RSTD;                     /* GUARD RETURN REGISTER         */
*   IF BUFCER1=ON×                  /* CHECK FOR INPUT ERROR,        */
*       BUFCER2=ON×                 /* OUTPUT ERROR, OR DATA         */
*       (BUFCRRD=ON&AMBTYPE=OFF) THEN/* READ ERROR IN        @ZA14809*/
         TM    BUFCER1(RBUFC),B'00011000'                          0644
         BNZ   @RT00644                                            0644
         TM    BUFCRRD(RBUFC),B'00100000'                          0644
         BNO   @RF00644                                            0644
         TM    AMBTYPE(RAMB),B'01000000'                           0644
         BNZ   @RF00644                                            0644
@RT00644 DS    0H                                                  0645
*     DO;                           /* THE DATA CHAIN        @ZA14809*/
*       RPLERREG='0C'X;             /* SET PHYSICAL I/O ERROR        */
         MVI   RPLERREG(RRPL),X'0C'                                0646
*       RPARM1=BUFCDDDD;            /* PASS BACK RBA         @ZA07544*/
         L     RPARM1,BUFCDDDD(,RBUFC)                             0647
*     END;                          /* END I/O ERROR         @ZA07544*/
*   IF BUFCXEDB=ON                  /* IF VOLUME NOT MOUNTED,        */
*     THEN                          /* SET ERROR.                    */
@RF00644 TM    BUFCXEDB(RBUFC),B'00000100'                         0649
         BNO   @RF00649                                            0649
*     DO;                                                          0650
*       RPARM1=BUFCDDDD;            /* PASS BACK RBA         @ZA07544*/
         L     RPARM1,BUFCDDDD(,RBUFC)                             0651
*       RPLERREG='08'X;             /* SET LOGICAL ERROR             */
         MVI   RPLERREG(RRPL),X'08'                                0652
*       RPLERRCD=RPLNOMNT;          /* SET MOUNT ERROR               */
         MVI   RPLERRCD(RRPL),X'18'                                0653
*       BUFCXEDB=OFF;               /* RESET ERROR           @ZA19610*/
         NI    BUFCXEDB(RBUFC),B'11111011'                         0654
*     END;                          /* END OF MOUNT ERROR            */
*   RFY                                                            0656
*     R14 UNRSTD;                   /* RELEASE RETURN REG            */
*   END ERRORCHK;                   /* END OF READ ERROR CHECK       */
@EL00005 DS    0H                                                  0657
@EF00005 DS    0H                                                  0657
@ER00005 BR    @14                                                 0657
*                                                                  0658
*   /*****************************************************************/
*   /*                                                               */
*   /* RDAHEAD                                                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0658
*/*                                                                  */
*/* FUNCTION = PREPARE FREE BUFFERS FOR INPUT.                       */
*/* INPUT = PLHNBUFC POINTS TO THE NEXT READ AHEAD BUFC.             */
*/* OUTPUT = FREE BUFFER COUNT AND PLHNBUFC MODIFIED.                */
*                                                                  0658
*RDAHEAD:                           /* READ AHEAD ROUTINE            */
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             0658
RDAHEAD  DS    0H                                                  0659
*   IF RPLERREG^='00'X THEN         /* IF PREVIOUS ERRORS,           */
         CLI   RPLERREG(RRPL),0                                    0659
         BNE   @RT00659                                            0659
*     RETURN;                       /* NO READ-AHEAD.                */
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
         IDASVR14
*   RESPECIFY                                                      0662
*     R14 UNRESTRICTED;             /* RELEASE REG 14                */
*                                                                  0662
*   /*****************************************************************/
*   /*                                                               */
*   /* ATTEMPT READ-AHEAD UNTIL ENOUGH BUFFERS ARE SCHEDULED         */
*   /* END-OF-DATA IS DETECTED, OR END OF CONTROL AREA IS REACHED.   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0663
*   DO WHILE PLHFRCNT>ZERO;         /*                       @X04SVMR*/
*                                                                  0663
         B     @DE00663                                            0663
@DL00663 DS    0H                                                  0664
*     /***************************************************************/
*     /*                                                             */
*     /* PREVENT READ AHEAD FROM OVERLAYING FIRST SEGMENT OF A       */
*     /* SPANNED RECORD MARKED FOR UPDATE IN ORDER TO USE THE EMPTY  */
*     /* BUFFERS FOR THE NEW VERSION OF THE RECORD.          @X04SVMR*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0664
*     IF PLHNBUFC->BUFXIRBA=PLHDBUFC->BUFXIRBA&PLHDBUFC->BUFCEXC=ON&
*         PLHFRCNT^=PLHBFRNO THEN   /* STOP RD AHEAD         @X04SVMR*/
         L     @10,PLHNBUFC(,RPLH)                                 0664
         L     @05,PLHDBUFC(,RPLH)                                 0664
         CLC   BUFXIRBA(4,@10),BUFXIRBA(@05)                       0664
         BNE   @RF00664                                            0664
         TM    BUFCEXC(@05),B'00000010'                            0664
         BNO   @RF00664                                            0664
         CLC   PLHFRCNT(1,RPLH),PLHBFRNO(RPLH)                     0664
         BNE   @RT00664                                            0664
*       GO TO RDAHEADX;                                            0665
*                                                                  0665
*     /***************************************************************/
*     /*                                                             */
*     /* GET THE NEXT SEQUENTIAL DATA RBA. IF READ-AHEAD WOULD SPAN A*/
*     /* CONTROL AREA, RETURN TO CALLER.                             */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0666
*I18:                                                              0666
*     DO;                           /* IDACALL(IDAFRBA)              */
@RF00664 DS    0H                                                  0666
I18      DS    0H                                                  0667
*       CALL IDAFRBA;               /* EXIT TO IDAFRBA               */
         L     @15,@CV00041                                        0667
         BALR  @14,@15                                             0667
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I18;                      /* GET NEXT RBA          @X04SVMR*/
*     RFY                                                          0673
*       R15 RSTD;                   /* GET RETURN CODE               */
*     IF RPLERREG^='00'X THEN       /* STOP READ-AHEAD IF AN         */
         CLI   RPLERREG(RRPL),0                                    0674
         BNE   @RT00674                                            0674
*       GO TO RDAHEADX;             /* INDEX I/O ERROR OCCURS.       */
*     IF R15=TWO THEN               /* IF CA END,                    */
         C     R15,@CF00049                                        0676
         BE    @RT00676                                            0676
*       GO TO RDAHEADX;             /* STOP READ AHEAD               */
*     RBUFC=PLHNBUFC;               /* PTR TO READ AHEAD BUFR        */
         L     RBUFC,PLHNBUFC(,RPLH)                               0678
*     PLHFRCNT=PLHFRCNT-ONE;        /* DECREMENT FREE BFR CNT        */
         SLR   @14,@14                                             0679
         IC    @14,PLHFRCNT(,RPLH)                                 0679
         BCTR  @14,0                                               0679
         STC   @14,PLHFRCNT(,RPLH)                                 0679
*     PLHNBUFC=BUFCNXT2;            /* NEW READ AHD          @X04SVMR*/
*                                                                  0680
         L     @14,BUFCNXT2-1(,RBUFC)                              0680
         LA    @14,0(,@14)                                         0680
         ST    @14,PLHNBUFC(,RPLH)                                 0680
*     /***************************************************************/
*     /*                                                             */
*     /* IF NOT END-OF-DATA, PUT THE RBA IN THE READ-AHEAD BUFC, SET */
*     /* READ REQUIRED, AND GET EXCLUSIVE CONTROL OF THE CONTROL     */
*     /* INTERVAL.                                                   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0681
*     IF R15=ZERO                   /* IF NOT EOD, CALL              */
*       THEN                        /* DATA LOOK-ASIDE.              */
         LTR   R15,R15                                             0681
         BNZ   @RF00681                                            0681
*       DO;                                                        0682
*         CALL DATALOOK;            /* SET UP BUFC                   */
         BAL   @14,DATALOOK                                        0683
*         IF RPLERREG^='00'X        /* IF A READ EXCL ERROR,         */
*           THEN                    /* CLEAR ERROR STATUS            */
         CLI   RPLERREG(RRPL),0                                    0684
         BE    @RF00684                                            0684
*           DO;                     /* AND STOP READ AHEAD.          */
*             RPLERREG='00'X;       /* NO ERROR YET                  */
         MVI   RPLERREG(RRPL),X'00'                                0686
*             RPLERRCD='00'X;       /*                               */
         MVI   RPLERRCD(RRPL),X'00'                                0687
*             GO TO RDAHEADX;       /* STOP READ AHEAD.              */
         B     RDAHEADX                                            0688
*           END;                    /* END OF READ EXCL ERROR        */
*       END;                        /* END OF DATA LOOK-ASIDE        */
*                                                                  0690
*     /***************************************************************/
*     /*                                                             */
*     /* DO ONE LAST READ IF THIS IS THE LAST SEGMENT OF RECORD AND  */
*     /* DIRECT RECORD LOCATE IS FORCING A READ AHEAD.       @X04SVMR*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0691
*     ELSE                          /* R15 IS NON-ZERO               */
*       IF R15=SIX THEN             /* STOP AFTER THIS       @X04SVMR*/
         B     @RC00681                                            0691
@RF00681 C     R15,@CF00051                                        0691
         BNE   @RF00691                                            0691
*         DO;                                                      0692
*           CALL DATALOOK;          /* SET UP BUFC           @X04SVMR*/
         BAL   @14,DATALOOK                                        0693
*           GO TO RDAHEADX;         /* EXIT RDAHEAD          @X04SVMR*/
         B     RDAHEADX                                            0694
*         END;                      /* END LAST RD           @X04SVMR*/
*                                                                  0695
*     /***************************************************************/
*     /*                                                             */
*     /* FLAG THE END-OF-DATA BUFC BY INVALIDATING THE RBA.          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0696
*       ELSE                        /* COME HERE IF EOD              */
*         DO;                       /*                               */
@RF00691 DS    0H                                                  0697
*           BUFCEOD=ON;             /* SET BUFCEOD           @ZA14824*/
         OI    BUFCEOD(RBUFC),B'00001000'                          0697
*           GO TO RDAHEADX;         /* EXIT FROM READ-AHEAD          */
         B     RDAHEADX                                            0698
*         END;                      /* END OF EOD CODE               */
*     RFY                                                          0700
*       R15 UNRSTD;                 /* RELEASE RETURN CODE           */
@RC00681 DS    0H                                                  0701
*   END;                            /* END, RD SETUP                 */
@DE00663 CLI   PLHFRCNT(RPLH),0                                    0701
         BH    @DL00663                                            0701
*RDAHEADX:                                                         0702
*   IF RPLKEY=ON&                   /* IF A KEYED REQ        @X04SVMR*/
*       AMDRRDS=OFF THEN            /* AND NOT RRDS,         @X04SVMR*/
RDAHEADX TM    RPLKEY(RRPL),B'10000000'                            0702
         BNO   @RF00702                                            0702
         L     @10,AMBDSB(,RAMB)                                   0702
         TM    AMDRRDS(@10),B'00000010'                            0702
         BNZ   @RF00702                                            0702
*     PLHNRBA=ZERO;                 /* RESET FOR NOW.        @X04SVMR*/
         SLR   @10,@10                                             0703
         ST    @10,PLHNRBA(,RPLH)                                  0703
*   GEN(IDARST14);                  /* RESTORE RETURN REGISTER       */
@RF00702 DS    0H                                                  0704
         IDARST14
*   END RDAHEAD;                    /* END OF READ AHEAD             */
@EL00006 DS    0H                                                  0705
@EF00006 DS    0H                                                  0705
@ER00006 BR    @14                                                 0705
*                                                                  0706
*   /*****************************************************************/
*   /*                                                               */
*   /* DATALOOK -- DATA LOOK-ASIDE                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0706
*/*                                                                  */
*/* FUNCTION = SEE IF DESIRED RBA IS IN BUFFER AND GET PROPER LEVEL  */
*/*            OF EXCLUSIVE CONTROL.                                 */
*/* INPUT = RPARM1 CONTAINS THE DESIRED RBA, RBUFC POINTS TO THE     */
*/*         BUFC WHICH IS TO BE USED.                                */
*/* OUTPUT = BUFC STATUS MODIFIED, RBA SET IN BUFC, RETURN CODE IN   */
*/*          REGISTER 15, RBUFC UPDATED IF RBA FOUND.  RPARM1 IS     */
*/*          UNCHANGED.                                      @ZA07544*/
*                                                                  0706
*DATALOOK:                                                         0706
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0706
DATALOOK DS    0H                                                  0707
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
         IDASVR14
*/*  SEARCH THE BUFFERS ON THE CHAIN TO SEE IF RBA IN CORE.  @X04SVMR*/
*                                                                  0708
*   RFY                                                            0708
*    (RWORK1,                                                      0708
*     RWORK2) RSTD;                 /* GET WORK REGS         @OZ12926*/
*   RWORK1=RBUFC;                   /* CANDIDATE BUFC        @X04SVMR*/
         LR    RWORK1,RBUFC                                        0709
*   IF AMBINBUF=OFF THEN            /* IF NOT SHR(4),        @ZA07698*/
         TM    AMBINBUF(RAMB),B'00000001'                          0710
         BNZ   @RF00710                                            0710
*     DO UNTIL RBUFC=RWORK1;        /* CHECK ALL BFRS        @X04SVMR*/
@DL00711 DS    0H                                                  0712
*       IF BUFCVAL=ON&BUFCDDDD=RPARM1&/* IF DESIRED RBA      @X04SVMR*/
*           (PLHRDEXC=OFF×BUFCEXC=ON)/* & OK EXCL CNTL       @OZ12926*/
*         THEN                                                     0712
         TM    BUFCVAL(RBUFC),B'00000100'                          0712
         BNO   @RF00712                                            0712
         CL    RPARM1,BUFCDDDD(,RBUFC)                             0712
         BNE   @RF00712                                            0712
         TM    PLHRDEXC(RPLH),B'00001000'                          0712
         BZ    @RT00712                                            0712
         TM    BUFCEXC(RBUFC),B'00000010'                          0712
         BNO   @RF00712                                            0712
@RT00712 DS    0H                                                  0713
*         DO;                       /* NO READ TO DO         @OZ12926*/
*           IF RWORK1^=RBUFC THEN   /* IN CANDIDATE?         @X04SVMR*/
         CR    RWORK1,RBUFC                                        0714
         BE    @RF00714                                            0714
*             DO;                   /* NO, RECHAIN.          @X04SVMR*/
*               IF PLHBFRNO>TWO&    /* IF MORE THAN 2        @X04SVMR*/
*                   BUFCNXT2^=RWORK1 THEN/* AND BAD CHAIN    @X04SVMR*/
         CLI   PLHBFRNO(RPLH),2                                    0716
         BNH   @RF00716                                            0716
         L     @10,BUFCNXT2-1(,RBUFC)                              0716
         LA    @10,0(,@10)                                         0716
         CR    @10,RWORK1                                          0716
         BE    @RF00716                                            0716
*                 DO;               /* REORDER BUFCS         @X04SVMR*/
*                                                                  0717
*                   /*************************************************/
*                   /*                                               */
*                   /* RECHAIN THE BUFFERS                   @X04SVMR*/
*                   /* FIRST REMOVE THE SELECTED BUFC FROM THE CHAIN.*/
*                   /*                                       @X04SVMR*/
*                   /*                                               */
*                   /*************************************************/
*                                                                  0718
*                   RWORK2->BUFCNXT2=BUFCNXT2;/* POINT PAST NEW    0718
*                                                            @X04SVMR*/
         STCM  @10,7,BUFCNXT2(RWORK2)                              0718
*                   RWORK2=RBUFC;   /* SET SCH START         @X04SVMR*/
*                                                                  0719
         LR    RWORK2,RBUFC                                        0719
*                   /*************************************************/
*                   /*                                               */
*                   /* LOCATE THE BUFC POINTING TO ORIGINAL          */
*                   /* CANDIDATE.                            @X04SVMR*/
*                   /*                                               */
*                   /*************************************************/
*                                                                  0720
*                   DO WHILE RWORK2->BUFCNXT2^=RWORK1;             0720
         B     @DE00720                                            0720
@DL00720 DS    0H                                                  0721
*                     RWORK2=RWORK2->BUFCNXT2;/* NEXT ONE    @X04SVMR*/
         L     @10,BUFCNXT2-1(,RWORK2)                             0721
         LA    @10,0(,@10)                                         0721
         LR    RWORK2,@10                                          0721
*                   END;            /* N-1 BUFC FOUND        @X04SVMR*/
*                                                                  0722
@DE00720 L     @10,BUFCNXT2-1(,RWORK2)                             0722
         LA    @10,0(,@10)                                         0722
         CR    RWORK1,@10                                          0722
         BNE   @DL00720                                            0722
*                   /*************************************************/
*                   /*                                               */
*                   /* MAKE THE BUFC ORIGINALLY PRIOR TO THE         */
*                   /* CANDIDATE PRIOR TO THE NEWLY SELECTED BUFC.   */
*                   /*                                       @X04SVMR*/
*                   /*                                               */
*                   /*************************************************/
*                                                                  0723
*                   RWORK2->BUFCNXT2=RBUFC;/* MAKE NEW NTH   @X04SVMR*/
*                                                                  0723
         STCM  RBUFC,7,BUFCNXT2(RWORK2)                            0723
*                   /*************************************************/
*                   /*                                               */
*                   /* MAKE THE ORIGINAL CANDIDATE BUFC FOLLOW THE   */
*                   /* NEWLY SELECTED BUFC.                  @X04SVMR*/
*                   /*                                               */
*                   /*************************************************/
*                                                                  0724
*                   BUFCNXT2=RWORK1;/* FINISH RECHAIN        @X04SVMR*/
         STCM  RWORK1,7,BUFCNXT2(RBUFC)                            0724
*                 END;              /* END BFRNO > 2         @X04SVMR*/
*               IF PLHDBUFC=RWORK1 THEN/* IF NECESSARY       @X04SVMR*/
@RF00716 C     RWORK1,PLHDBUFC(,RPLH)                              0726
         BNE   @RF00726                                            0726
*                 PLHDBUFC=RBUFC;   /* UPDATE PTR            @X04SVMR*/
         ST    RBUFC,PLHDBUFC(,RPLH)                               0727
*               PLHNBUFC=BUFCNXT2;  /* NEW READ AHEAD        @X04SVMR*/
@RF00726 L     @10,BUFCNXT2-1(,RBUFC)                              0728
         LA    @10,0(,@10)                                         0728
         ST    @10,PLHNBUFC(,RPLH)                                 0728
*             END;                  /* NOT IN CAND           @X04SVMR*/
*           CALL GETEXCL;           /* GET EXCL CNTL         @OZ12926*/
@RF00714 BAL   @14,GETEXCL                                         0730
*           CALL BMEXIT;            /* EXIT ROUTINE          @X04SVMR*/
         BAL   @14,BMEXIT                                          0731
*         END;                      /* END NO READ           @X04SVMR*/
*       IF BUFCORBA=RPARM1&BUFCMW=ON/* TST OUTPUT RBA        @OZ12926*/
*         THEN                                                     0733
@RF00712 L     @10,BUFCORBA(,RBUFC)                                0733
         CLR   @10,RPARM1                                          0733
         BNE   @RF00733                                            0733
         TM    BUFCMW(RBUFC),B'10000000'                           0733
         BNO   @RF00733                                            0733
*         DO;                       /* SWAP BUFFERS          @OZ12926*/
*           RFY                                                    0735
*            (RWORK3) RSTD;         /* GET WORK REG          @OZ12926*/
*           RWORK3=RBUFC->BUFCBAD;  /* GET NEW BUFFER        @OZ12926*/
         L     RWORK3,BUFCBAD(,RBUFC)                              0736
*           RWORK2=RWORK1->BUFCBAD; /* GET OLD BUFFER        @OZ12926*/
         L     RWORK2,BUFCBAD(,RWORK1)                             0737
*           RBUFC->BUFCBAD=RWORK2;  /* SWAP BUFCBADS         @OZ12926*/
         ST    RWORK2,BUFCBAD(,RBUFC)                              0738
*           RWORK1->BUFCBAD=RWORK3; /* SWAP BUFCBADS         @OZ12926*/
         ST    RWORK3,BUFCBAD(,RWORK1)                             0739
*           RWORK3=RBUFC->BUFCORBA; /* GET NEW ORBA          @OZ12926*/
         LR    RWORK3,@10                                          0740
*           RWORK2=RWORK1->BUFCORBA;/* GET OLD ORBA          @OZ12926*/
         L     RWORK2,BUFCORBA(,RWORK1)                            0741
*           RBUFC->BUFCORBA=RWORK2; /* SWAP BUFCORBA         @OZ12926*/
         ST    RWORK2,BUFCORBA(,RBUFC)                             0742
*           RWORK1->BUFCORBA=RWORK3;/* SWAP BUFCORBA         @OZ12926*/
         ST    RWORK3,BUFCORBA(,RWORK1)                            0743
*           RWORK3=RBUFC->BUFCCPA;  /* GET NEW CPA           @OZ12926*/
         L     RWORK3,BUFCCPA(,RBUFC)                              0744
*           RWORK2=RWORK1->BUFCCPA; /* GET OLD CPA           @OZ12926*/
         L     RWORK2,BUFCCPA(,RWORK1)                             0745
*           RBUFC->BUFCCPA=RWORK2;  /* SWAP BUFCCPA          @OZ12926*/
         ST    RWORK2,BUFCCPA(,RBUFC)                              0746
*           RWORK1->BUFCCPA=RWORK3; /* SWAP BUFCCPA          @OZ12926*/
         ST    RWORK3,BUFCCPA(,RWORK1)                             0747
*           RFY                                                    0748
*            (RWORK3) UNRSTD;       /* FREE WORK REG         @OZ12926*/
*           IF RWORK1->BUFCMW=OFF   /* IF NEW MW OFF         @OZ12926*/
*             THEN                                                 0749
         TM    BUFCMW(RWORK1),B'10000000'                          0749
         BNZ   @RF00749                                            0749
*             RBUFC->BUFCMW=OFF;    /* THEN OLD OFF          @OZ12926*/
         NI    BUFCMW(RBUFC),B'01111111'                           0750
*           IF RBUFC->BUFCRRD=ON    /* OLD RRD ON?           @OZ12926*/
*             THEN                                                 0751
@RF00749 TM    BUFCRRD(RBUFC),B'00100000'                          0751
         BNO   @RF00751                                            0751
*             RBUFC->BUFCVAL=ON;    /* YES, SET VAL          @OZ12926*/
         OI    BUFCVAL(RBUFC),B'00000100'                          0752
*           ELSE                                                   0753
*             RBUFC->BUFCVAL=OFF;   /* NO, SET OFF           @OZ12926*/
         B     @RC00751                                            0753
@RF00751 NI    BUFCVAL(RBUFC),B'11111011'                          0753
*           RWORK1->BUFCMW=ON;      /* NEW MW ON             @OZ12926*/
@RC00751 DS    0H                                                  0755
*           RWORK1->BUFCXEDB=OFF;   /* NEW XEDB OFF          @OZ12926*/
         OI    BUFCMW(RWORK1),B'10000000'                          0755
         NI    BUFCXEDB(RWORK1),B'11111011'                        0755
*           RWORK1->BUFCVAL=ON;     /* NEW VAL ON            @OZ12926*/
         OI    BUFCVAL(RWORK1),B'00000100'                         0756
*           RWORK1->BUFCDDDD=RPARM1;/* SET NEW DDDD          @OZ12926*/
         ST    RPARM1,BUFCDDDD(,RWORK1)                            0757
*           RBUFC=RWORK1;           /* SET RBUFC             @OZ12926*/
         LR    RBUFC,RWORK1                                        0758
*           CALL GETEXCL;           /* GET EXCL CNTL         @OZ12926*/
         BAL   @14,GETEXCL                                         0759
*           CALL BMEXIT;            /* EXIT DATALOOK         @OZ12926*/
         BAL   @14,BMEXIT                                          0760
*         END;                      /* E SWAP BUFFERS        @OZ12926*/
*       RWORK2=RBUFC;               /* SET PRIOR BUFC        @X04SVMR*/
@RF00733 LR    RWORK2,RBUFC                                        0762
*       RBUFC=BUFCNXT2;             /* NEXT BUFC             @X04SVMR*/
         L     @10,BUFCNXT2-1(,RBUFC)                              0763
         LA    @10,0(,@10)                                         0763
         LR    RBUFC,@10                                           0763
*     END;                          /* END LOOK-ASIDE        @X04SVMR*/
@DE00711 CR    RBUFC,RWORK1                                        0764
         BNE   @DL00711                                            0764
*   RFY                                                            0765
*    (RWORK1,                                                      0765
*     RWORK2) UNRSTD;               /* DROP WORK REGS        @OZ12926*/
@RF00710 DS    0H                                                  0766
*/*  THE RBA HAS NOT BEEN FOUND IN CORE--A READ IS REQUIRED. @X04SVMR*/
*                                                                  0766
*   BUFCRRD=ON;                     /* SET READ REQUIRED             */
         OI    BUFCRRD(RBUFC),B'00100000'                          0766
*   BUFCDDDD=RPARM1;                /* SET THE RBA DESIRED           */
         ST    RPARM1,BUFCDDDD(,RBUFC)                             0767
*   BUFCVAL=ON;                     /* MAKE RBA VALID                */
         OI    BUFCVAL(RBUFC),B'00000100'                          0768
*   BUFCEOD=OFF;                    /* INSURE EOD OFF        @ZA14824*/
         NI    BUFCEOD(RBUFC),B'11110111'                          0769
*   BUFCXEDB=OFF;                   /* RESET RESIDUAL ERROR          */
         NI    BUFCXEDB(RBUFC),B'11111011'                         0770
*   CALL GETEXCL;                   /* GET EXCLUSIVE CONTROL         */
         BAL   @14,GETEXCL                                         0771
*   CALL BMEXIT;                    /* EXIT ROUTINE          @X04SVMR*/
         BAL   @14,BMEXIT                                          0772
*   END DATALOOK;                   /* END OF DATA LOOK-ASIDE        */
@EL00007 DS    0H                                                  0773
@EF00007 DS    0H                                                  0773
@ER00007 BR    @14                                                 0773
*                                                                  0774
*   /*****************************************************************/
*   /*                                                               */
*   /* BMEXIT - BUFFER MGR EXIT ROUTINE                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0774
*BMEXIT:                                                           0774
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0774
*                                                                  0774
BMEXIT   DS    0H                                                  0775
*/*                                                                0775
*01 FUNCTION = RESTORE R14 AND EXIT VIA IT.                        0775
*01 INPUT =    STD VSAM REGS.                                      0775
*01 OUTPUT =   R14 RESTORED FROM PLHRET1.                            */
*                                                                  0775
*   GEN REFS(HWORD4)(IDARST14);     /* RESTORE RETURN REG            */
         IDARST14
*   END BMEXIT;                     /* RETURN VIA R14                */
@EL00008 DS    0H                                                  0776
@EF00008 DS    0H                                                  0776
@ER00008 BR    @14                                                 0776
*   GEN(IDAPATCH);                  /* DEFINE PATCH          @X04SVMR*/
         IDAPATCH
*   END IDA019R2                    /* END BFR MGR           @X04SVMR*/
*                                                                  0778
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IDACIDF )                                       */
*/*%INCLUDE SYSLIB  (IDARDF  )                                       */
*/*%INCLUDE SYSLIB  (IDAIRD  )                                       */
*/*%INCLUDE SYSLIB  (IDAIXSPL)                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IDADIWA )                                       */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*                                                                  0778
*       ;                                                          0778
         B     @EL00001                                            0778
@DATA    DS    0H
@DATD    DSECT
         DS    0F
IDA019R2 CSECT
         DS    0F
@CF00036 DC    F'1'
@CF00049 DC    F'2'
@CF00051 DC    F'6'
@CF00332 DC    F'7'
@DATD    DSECT
         DS    0D
IDA019R2 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00038 DC    V(IDA019R3)
@CV00039 DC    V(IDARVRS1)
@CV00040 DC    V(IDAWAIT)
@CV00041 DC    V(IDAFRBA)
         DS    0D
HWORD4   DC    H'4'
@DATD    DSECT
TWELVE   EQU   12                       OFFSET TO REGS
@DATD    DSECT
*                                                          /*@X04SVLC*/
RDFCTNUA EQU   X'40'                    COMPLEX RDF INDICATOR
RDFCTNUX EQU   X'FF'-RDFCTNUA           RESET COMPLEX MASK
RDFREPLA EQU   X'08'                    COUNT RDF INDICATOR
RDFREPLX EQU   X'FF'-RDFREPLA           RESET COUNT MASK
RDFEMPTI EQU   X'04'                    EMPTY RECORD       /*@X04SVLC*/
RDFLEN   EQU   3                        LENGTH OF RDF
RDFLLOFF EQU   1                        OFFSET WITHIN RDF TO LL
RDFSGLR  EQU   X'00'                   MASK FOR SINGLE RECORD RDF
RDFGRP   EQU   RDFCTNUA                 MASK FOR LL RDF OF A GROUP RDF
RDFCNT   EQU   RDFREPLA                 MASK FOR COUNT RDF
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019R2 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R1       EQU   @01
RRPL     EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RPARM1   EQU   @12
R14      EQU   @14
R15      EQU   @15
RWORK0   EQU   @00
RWORK4   EQU   @08
RWORK5   EQU   @09
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
IOECB    EQU   0
IDACIDF  EQU   0
CIDFLL   EQU   IDACIDF+2
IDARDF   EQU   0
RDFRBYTE EQU   IDARDF
RDFSEG   EQU   RDFRBYTE
RDFNOT1  EQU   RDFSEG
RDF1ST   EQU   RDFSEG
IDADATA  EQU   0
IDAKEY   EQU   0
IDAIXH   EQU   0
IDAIBFLP EQU   0
IBFLP3   EQU   IDAIBFLP+2
IBFLP2   EQU   IBFLP3
IDASELL  EQU   0
IDAIXK   EQU   0
IDAIXSPL EQU   0
IXSILN   EQU   IDAIXSPL+13
IXSBFLG  EQU   IDAIXSPL+17
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDPRF   EQU   IDAARDB+28
IDADIWA  EQU   0
DIWFLG1  EQU   IDADIWA+4
DIWCAS   EQU   DIWFLG1
DIWSHIFT EQU   DIWFLG1
DIWFLG2  EQU   IDADIWA+5
DIWLRBA  EQU   IDADIWA+8
DIWHRBA  EQU   IDADIWA+12
DIWPLH   EQU   IDADIWA+16
DIWBUFC  EQU   IDADIWA+20
DIWSAVE  EQU   IDADIWA+28
DIWINRBA EQU   IDADIWA+52
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLREQ   EQU   RPLIDWD+2
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLSEQ   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLKEY   EQU   RPLOPT2
RPLADR   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IDABUFDR EQU   0
BUFDRNO  EQU   IDABUFDR+1
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
BUFDRREL EQU   BUFDRFLG
BUFDBUFC EQU   IDABUFDR+12
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCINS  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCEPT  EQU   BUFCFLG1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCEOD  EQU   BUFCFLG2
BUFCPLH  EQU   IDABUFC+4
BUFCDDDD EQU   IDABUFC+8
BUFCORBA EQU   IDABUFC+12
BUFCCPA  EQU   IDABUFC+16
BUFCBAD  EQU   IDABUFC+20
BUFCNXT1 EQU   IDABUFC+24
BUFCINV  EQU   IDABUFC+28
BUFCIDXL EQU   IDABUFC+36
BUFCNXT2 EQU   IDABUFC+37
BUFXIRBA EQU   IDABUFC+40
BUFXORBA EQU   IDABUFC+44
BUFCHAIN EQU   IDABUFC+48
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBINFL1 EQU   ACBINFLG
ACBVVIC  EQU   ACBINFL1
ACBINFL2 EQU   ACBINFLG+1
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMB   EQU   0
AMBBUFC  EQU   IDAAMB+8
AMBPH    EQU   IDAAMB+12
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBTYPE  EQU   AMBFLG1
AMBINBUF EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBCAT   EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBPUG   EQU   AMBFLG2
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLQ2   EQU   IDAAMBL+31
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLVVIC EQU   AMBLFLG1
AMBLFLG2 EQU   IDAAMBL+36
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDRRDS  EQU   AMDATTR
AMDSPAN  EQU   AMDATTR
AMDNEST  EQU   IDAAMDSB+4
AMDCINV  EQU   IDAAMDSB+20
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
IDAPLHDR EQU   0
PLHCNT   EQU   IDAPLHDR+1
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHENDRQ EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHSR    EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHEFLGS EQU   IDAPLH+4
PLHSKPER EQU   PLHEFLGS
PLHFLG3  EQU   IDAPLH+6
PLHRAHD  EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHAFLGS EQU   IDAPLH+7
PLHRMIN  EQU   IDAPLH+13
PLHFRCNT EQU   IDAPLH+14
PLHBFRNO EQU   IDAPLH+15
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJRNLL EQU   IDAPLH+32
PLHJCODE EQU   IDAPLH+40
PLHRSCS  EQU   IDAPLH+43
PLHDBUFC EQU   IDAPLH+52
PLHNBUFC EQU   IDAPLH+56
PLHDIOB  EQU   IDAPLH+76
PLHIIOB  EQU   PLHDIOB
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHNRBA  EQU   IDAPLH+184
PLHIBUFC EQU   IDAPLH+188
PLHRBUFC EQU   IDAPLH+192
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHKEYPT EQU   IDAPLH+248
PLHTMRPL EQU   IDAPLH+265
PLHEND   EQU   IDAPLH+280
PLHKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
RPLADDR  EQU   0
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00065 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00064 EQU   IDAPLH+266
@NM00063 EQU   PLHTMRPL
PLHTMIOB EQU   PLHTMRPL
PLHTMINX EQU   PLHTMRPL
PLHTMDTA EQU   PLHTMRPL
PLHTMDIW EQU   PLHTMRPL
PLHTMBUF EQU   PLHTMRPL
PLHTERM  EQU   PLHTMRPL
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00062 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00061 EQU   IDAPLH+172
@NM00060 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHAMB   EQU   IDAPLH+108
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHARET  EQU   IDAPLH+80
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHRDFP  EQU   IDAPLH+68
PLHFSP   EQU   IDAPLH+64
PLHRECP  EQU   IDAPLH+60
PLHLRECL EQU   IDAPLH+48
PLHARDB  EQU   IDAPLH+44
@NM00059 EQU   PLHRSCS
PLHDBPER EQU   PLHRSCS
PLHDSERR EQU   PLHRSCS
PLHASYER EQU   PLHRSCS
@NM00058 EQU   PLHRSCS
PLHBUFHD EQU   PLHRSCS
PLHINEOV EQU   PLHRSCS
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00057 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHASKBF EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHID    EQU   IDAPLHDR
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00056 EQU   IDAAMDSB+41
@NM00055 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDKEYLN EQU   IDAAMDSB+8
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLIX   EQU   IDAAMBL+56
AMBLDTA  EQU   IDAAMBL+52
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00054 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00053 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00052 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLSDS  EQU   AMBLVVIC
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00051 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00050 EQU   AMBLQ2
AMBLCBIC EQU   AMBLQ2
@NM00049 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00048 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00047 EQU   AMBCSWD1+1
@NM00046 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBLSR   EQU   AMBAFLG
@NM00045 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00044 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00043 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00042 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBSDS   EQU   AMBINFL
AMBUPX   EQU   AMBINFL
@NM00041 EQU   AMBINFL
@NM00040 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00039 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00038 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00037 EQU   AMBDSORG
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00036 EQU   AMBFLG0
AMBSWSP  EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00035 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00034 EQU   ACBINFL2
ACBCBIC  EQU   ACBINFL2
@NM00033 EQU   ACBINFL2
ACBBYPSS EQU   ACBINFL1
ACBSDS   EQU   ACBVVIC
ACBUCRA  EQU   ACBINFL1
ACBSCRA  EQU   ACBINFL1
ACBCAT   EQU   ACBINFL1
ACBIJRQE EQU   ACBINFL1
ACBJEPS  EQU   ACBINFL1
@NM00032 EQU   ACBINFL1
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00031 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00030 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00029 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00028 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00027 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00026 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00025 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00024 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00023 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCAMB  EQU   BUFCPLH
@NM00022 EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00021 EQU   IDABUFDR+16
@NM00020 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRID  EQU   IDABUFDR
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00019 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00018 EQU   RPLRBAR+3
@NM00017 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00016 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
@NM00015 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
@NM00014 EQU   IDADIWA+92
@NM00013 EQU   IDADIWA+88
@NM00012 EQU   IDADIWA+84
@NM00011 EQU   IDADIWA+80
@NM00010 EQU   IDADIWA+76
@NM00009 EQU   IDADIWA+72
@NM00008 EQU   IDADIWA+68
@NM00007 EQU   IDADIWA+64
@NM00006 EQU   IDADIWA+60
@NM00005 EQU   IDADIWA+56
DIWRKCT  EQU   IDADIWA+48
DIWSAVE5 EQU   DIWSAVE+16
DIWSAVE4 EQU   DIWSAVE+12
DIWSAVE3 EQU   DIWSAVE+8
DIWSAVE2 EQU   DIWSAVE+4
DIWSAVE1 EQU   DIWSAVE
DIWSPLTP EQU   IDADIWA+24
@NM00004 EQU   IDADIWA+6
DIWFSPF  EQU   DIWFLG2
DIW1ST   EQU   DIWFLG1
DIWNOT1  EQU   DIWFLG1
DIWGSPC  EQU   DIWFLG1
DIWEOKR  EQU   DIWFLG1
DIWPFERR EQU   DIWFLG1
DIWCISPL EQU   DIWFLG1
DIWLEN   EQU   IDADIWA+2
DIWATV   EQU   IDADIWA+1
DIWID    EQU   IDADIWA
ARDKEYS  EQU   IDAARDB+29
@NM00003 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDERBA  EQU   IDAARDB+16
ARDHRBA  EQU   IDAARDB+12
ARDHKRBA EQU   IDAARDB+8
ARDNPTR  EQU   IDAARDB+4
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDEOD   EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
IXSLEP   EQU   IDAIXSPL+28
IXSSEP   EQU   IDAIXSPL+24
IXSHEP   EQU   IDAIXSPL+20
IXSPEC   EQU   IDAIXSPL+19
IXSEKON  EQU   IDAIXSPL+18
@NM00002 EQU   IXSBFLG
IXSLELV  EQU   IXSBFLG
IXSSSRH  EQU   IXSBFLG
IXSNOSR  EQU   IDAIXSPL+16
IXSKLEN  EQU   IDAIXSPL+14
IXSTLN   EQU   IDAIXSPL+12
IXSARG   EQU   IDAIXSPL+8
IXSBUFC  EQU   IDAIXSPL+4
IXSSTRBA EQU   IDAIXSPL
IXKEY    EQU   IDAIXK
IXSELL   EQU   IDASELL
IBFLP1   EQU   IBFLP2
IBFLPL   EQU   IDAIBFLP+1
IBFLPF   EQU   IDAIBFLP
IXHSEO   EQU   IDAIXH+22
IXHLEO   EQU   IDAIXH+20
IXHFSO   EQU   IDAIXH+18
IXHFLGS  EQU   IDAIXH+17
IXHLV    EQU   IDAIXH+16
IXHXX    EQU   IDAIXH+12
IXHHP    EQU   IDAIXH+8
IXHBRBA  EQU   IDAIXH+4
IXHPTLS  EQU   IDAIXH+3
IXHFLPLN EQU   IDAIXH+2
IXHLL    EQU   IDAIXH
KEY      EQU   IDAKEY
AMDATA   EQU   IDADATA
RDFLL    EQU   IDARDF+1
RDFEMPTY EQU   RDFRBYTE
RDFREPL  EQU   RDFRBYTE
RDFCTNU  EQU   RDFRBYTE
RDFTYPE  EQU   RDFRBYTE
@NM00001 EQU   CIDFLL
CIDFBUSY EQU   CIDFLL
CIDFOSET EQU   IDACIDF
IOECBPT  EQU   IOECB
IOECBWT  EQU   IOECB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00208 EQU   @RC00196
@RC00186 EQU   @EL00001
@RC00174 EQU   @EL00001
@RF00214 EQU   @EL00001
@RF00405 EQU   @RC00365
@RT00429 EQU   RBAFND
@RF00431 EQU   @RC00427
@RC00554 EQU   @RC00549
@RT00598 EQU   RDEXCLER
@RT00605 EQU   RDEXCLER
@RT00607 EQU   RDEXCLER
@RC00594 EQU   @EL00003
@RF00649 EQU   @EL00005
@RT00659 EQU   @EL00006
@RT00664 EQU   RDAHEADX
@RT00674 EQU   RDAHEADX
@RT00676 EQU   RDAHEADX
@RF00684 EQU   @RC00681
@ENDDATA EQU   *
         END   IDA019R2,(C'PLS1742',0701,78192)
