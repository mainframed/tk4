         TITLE 'IDA019RW--VSAM BUFFER MANAGER--PART TWO                *
                        '
IDA019RW CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'IDA019RW  78.192'                                 0001
IDAABF   DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00171-IDAABF)
         ENTRY IDAABF
IDAAIBF  DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00242-IDAAIBF)
         ENTRY IDAAIBF
IDAGWSGW DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00252-IDAGWSGW)
         ENTRY IDAGWSGW
IDAFRBA  DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00310-IDAFRBA)
         ENTRY IDAFRBA
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
*                                                                  0171
*   /*****************************************************************/
*   /*                                                               */
*   /* IDAABF - ADD BUFFER                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0171
*/* FUNCTION = TO ADD A BUFC TO A PLACEHOLDER CHAIN BY ACQUIRING USE */
*/*            OF THE BUFC HEADER (IF POSSIBLE), LOCATING A FREE     */
*/*            DATA BUFC, PUTTING THE BUFC IN THE PLACEHOLDER CHAIN, */
*/*            AND RESETTING THE BUFC COUNTS.                        */
*/* INPUT = STANDARD VSAM REGISTERS, RPARM1 = NUMBER OF BUFFERS      */
*/*         DESIRED IN THE I/O CHAIN OR, IF ZERO, THE MAXIMUM        */
*/*         IS DESIRED.                                              */
*/* OUTPUT = STANDARD VSAM REGISTERS.                                */
*                                                                  0171
*IDAABF:                                                           0171
*   ENTRY;                                                         0171
@EP00171 DS    0H                                                  0172
*   RESPECIFY                                                      0172
*    (RPARM1,                                                      0172
*     RWORK2,                                                      0172
*     R14) RESTRICTED;              /* SAVE REGS                     */
*                                                                  0172
*   /*****************************************************************/
*   /*                                                               */
*   /* FOR DBDC, RESET PLHASKBF & EXIT                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0173
*   IF AMBLSR=ON×                   /* LOCAL SHR -                   */
*       AMBGSR=ON                   /* OR GLOBAL SHARE?              */
*     THEN                                                         0173
         TM    AMBLSR(RAMB),B'01100000'                            0173
         BZ    @RF00173                                            0173
*     DO;                           /* YES                           */
*       PLHASKBF=OFF;               /* RESET                         */
         NI    PLHASKBF(RPLH),B'11011111'                          0175
*       RETURN;                     /* EXIT                          */
@EL00001 DS    0H                                                  0176
@EF00001 DS    0H                                                  0176
@ER00001 BR    @14                                                 0176
*     END;                                                         0177
*                                                                  0177
*   /*****************************************************************/
*   /*                                                               */
*   /* IF BUFFER HEADER CAN BE ACQUIRED, LOOK FOR AN UNASSIGNED BUFC */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0178
*   TS(BUFDRTSB);                   /* SEE IF HEADER AVAIL           */
@RF00173 L     @15,AMBBUFC(,RAMB)                                  0178
         TS    BUFDRTSB(@15)                                       0178
*   GEN(BNZ   BUSYHDR);             /* IF BUSY, EXIT                 */
         BNZ   BUSYHDR
*   PLHBUFHD=ON;                    /* SET OWNERSHIP BIT IN PLH    0180
*                                                            @ZA32757*/
         OI    PLHBUFHD(RPLH),B'01000000'                          0180
*   RWORK2=R14;                     /* SAVE RETURN                   */
         LR    RWORK2,R14                                          0181
*   RFY                                                            0182
*     R14 UNRSTD;                   /* RELEASE RETURN REGISTER       */
*                                                                  0182
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE THE NUMBER OF BUFFERS DESIRED                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0183
*   IF RPARM1^=ZERO THEN            /* IF SPECIFIC NO                */
         LTR   RPARM1,RPARM1                                       0183
         BZ    @RF00183                                            0183
*     RPARM1=MIN(RPARM1,BUFDRMAX);  /* LIMIT TO MAX                  */
         L     @10,AMBBUFC(,RAMB)                                  0184
         SLR   @07,@07                                             0184
         IC    @07,BUFDRMAX(,@10)                                  0184
         CR    RPARM1,@07                                          0184
         BNH   *+6
         LR    RPARM1,@07                                          0184
*   ELSE                                                           0185
*     RPARM1=BUFDRMAX;              /* ELSE ALLOW MAX                */
*                                                                  0185
         B     @RC00183                                            0185
@RF00183 L     @10,AMBBUFC(,RAMB)                                  0185
         SLR   RPARM1,RPARM1                                       0185
         IC    RPARM1,BUFDRMAX(,@10)                               0185
*   /*****************************************************************/
*   /*                                                               */
*   /* GET NUMBER OF ADDITIONAL BUFFERS TO BE ADDED                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0186
*   RPARM1=RPARM1-PLHBFRNO;                                        0186
*                                                                  0186
@RC00183 SLR   @10,@10                                             0186
         IC    @10,PLHBFRNO(,RPLH)                                 0186
         SLR   RPARM1,@10                                          0186
*   /*****************************************************************/
*   /*                                                               */
*   /* SEE IF THIS PLH ALREADY HAS ALL IT NEEDS.                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0187
*   IF RPARM1>ZERO THEN             /* IF BUFFERS TO ADD,            */
         LTR   RPARM1,RPARM1                                       0187
         BNP   @RF00187                                            0187
*     DO;                           /* TRY TO ADD SOME               */
*/*  SEE IF AN UNASSIGNED BUFC MAY BE IN THE BUFC POOL.              */
*                                                                  0189
*       IF BUFDRREL=ON              /* SEE IF A BFR RELEASED         */
*         THEN                      /* IF SO COME HERE               */
         L     @10,AMBBUFC(,RAMB)                                  0189
         TM    BUFDRREL(@10),B'10000000'                           0189
         BNO   @RF00189                                            0189
*         DO;                                                      0190
*           BUFDRREL=OFF;           /* TURN OFF RELEASE FLAG         */
         NI    BUFDRREL(@10),B'01111111'                           0191
*           GO TO SCANBFRS;         /* GO SCAN POOL                  */
         B     SCANBFRS                                            0192
*         END;                      /* END OF RELEASE CODE           */
*       IF BUFDRAVL=ON              /* SEE IF A BFR AVAILABLE        */
*         THEN                      /* IF SO, LOOK FOR IT            */
@RF00189 L     @10,AMBBUFC(,RAMB)                                  0194
         TM    BUFDRAVL(@10),B'01000000'                           0194
         BNO   @RF00194                                            0194
*         DO;                                                      0195
*SCANBFRS:                          /* FIND AVAILABLE BFR            */
*           RBUFC=BUFDBUFC->BUFCHAIN;/* 1ST NON-INS BFR              */
SCANBFRS L     @10,AMBBUFC(,RAMB)                                  0196
         L     @10,BUFDBUFC(,@10)                                  0196
         L     RBUFC,BUFCHAIN(,@10)                                0196
*           RESPECIFY                                              0197
*             RWORK1 RESTRICTED;    /* GET REGISTER                  */
*                                                                  0197
*           /*********************************************************/
*           /*                                                       */
*           /* ISSUE A TEST-AND-SET ON ALL BUT THE INSERT BUFC(UNLESS*/
*           /* SPLIT) SEARCH UNTIL ALL NEEDED BUFFERS OBTAINED OR NO */
*           /* MORE BUFFERS ARE IN THE POOL.                         */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0198
*           DO WHILE(RBUFC^=ZERO&RPARM1^=ZERO);                    0198
         B     @DE00198                                            0198
@DL00198 DS    0H                                                  0199
*             GEN SETS(BUFCAVL)(TS   BUFCAVL(RBUFC));/* SEE IF AVAIL */
         TS   BUFCAVL(RBUFC)
*             GEN(BNZ   UNAVLBFR);  /* BRANCH IF NOT                 */
         BNZ   UNAVLBFR
*             CALL CHAINBFR;        /* CHAIN BUFC                    */
         BAL   @14,CHAINBFR                                        0201
*             RPARM1=RPARM1-ONE;    /* ONE LESS TO DO                */
         BCTR  RPARM1,0                                            0202
*UNAVLBFR:                          /* BUFFER IS UNAVAILABLE         */
*             RBUFC=BUFCHAIN;       /* PTR TO NEXT                   */
UNAVLBFR L     RBUFC,BUFCHAIN(,RBUFC)                              0203
*           END;                    /* END, POOL SEARCHED            */
@DE00198 SLR   @10,@10                                             0204
         CR    RBUFC,@10                                           0204
         BE    @DC00198                                            0204
         CR    RPARM1,@10                                          0204
         BNE   @DL00198                                            0204
@DC00198 DS    0H                                                  0205
*/*  DETERMINE THE NUMBER OF BUFFERS TO SCHEDULE EACH I/O.           */
*                                                                  0205
*           IF PLHBFRNO<=TWO THEN   /* IF LESS THAN 3 BFRS,          */
         CLI   PLHBFRNO(RPLH),2                                    0205
         BH    @RF00205                                            0205
*             PLHRMIN=PLHBFRNO;     /* OVERLAP UNDESIRABLE.          */
         IC    @10,PLHBFRNO(,RPLH)                                 0206
         STC   @10,PLHRMIN(,RPLH)                                  0206
*           ELSE                    /* SOME OVERLAP DESIRABLE        */
*             DO;                                                  0207
*                                                                  0207
         B     @RC00205                                            0207
@RF00205 DS    0H                                                  0208
*               /*****************************************************/
*               /*                                                   */
*               /* FIRST CONSIDER THAT THE RATIO OF CPU PROCESSING   */
*               /* TIME FOR A LOGICAL RECORD TO THE CPU TIME REQUIRED*/
*               /* FOR READING A CONTROL INTERVAL IS ABOUT 1/9.      */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0208
*               RWORK1=((AMDCINV/AMDLRECL)+EIGHT)/NINE;/* ROUND UP   */
         L     @10,AMBDSB(,RAMB)                                   0208
         L     @08,AMDCINV(,@10)                                   0208
         SRDA  @08,32                                              0208
         D     @08,AMDLRECL(,@10)                                  0208
         LR    @14,@09                                             0208
         AL    @14,@CF00049                                        0208
         SRDA  @14,32                                              0208
         D     @14,@CF00051                                        0208
         LR    RWORK1,@15                                          0208
*               RFY                                                0209
*                 RWORK3 RSTD;      /* GET WORK REGISTER             */
*                                                                  0209
*               /*****************************************************/
*               /*                                                   */
*               /* REQUIRE A MINIMUM OF 1/2                          */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0210
*               RWORK3=(PLHBFRNO+ONE)/TWO;/* SET MINIMUM VALUE       */
         SLR   @10,@10                                             0210
         IC    @10,PLHBFRNO(,RPLH)                                 0210
         LA    @08,1                                               0210
         ALR   @08,@10                                             0210
         SRDA  @08,32                                              0210
         D     @08,@CF00045                                        0210
         LR    RWORK3,@09                                          0210
*               IF RWORK1^=ZERO THEN/* IF NON-SPANNED RECORDS,       */
*                                                                  0211
         LTR   RWORK1,RWORK1                                       0211
         BZ    @RF00211                                            0211
*                 /***************************************************/
*                 /*                                                 */
*                 /* MAKE THE MINIMUM NUMBER OF BUFFERS TO SCHEDULE  */
*                 /* PROPORTIONAL TO THE NUMBER OF RECORDS IN A      */
*                 /* CONTROL INTERVAL AND TO THE TOTAL NUMBER OF     */
*                 /* BUFFERS.                                        */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0212
*                 PLHRMIN=RWORK3+(((RWORK1-ONE)*(PLHBFRNO-RWORK3))/
*                     RWORK1);                                     0212
         LR    @09,RWORK1                                          0212
         BCTR  @09,0                                               0212
         SLR   @10,RWORK3                                          0212
         MR    @08,@10                                             0212
         DR    @08,RWORK1                                          0212
         ALR   @09,RWORK3                                          0212
         STC   @09,PLHRMIN(,RPLH)                                  0212
*               ELSE                /* SPANNED RECORDS               */
*                 PLHRMIN=RWORK3;   /* USE 1/2 THE BUFFERS           */
         B     @RC00211                                            0213
@RF00211 STC   RWORK3,PLHRMIN(,RPLH)                               0213
*               RFY                                                0214
*                 RWORK3 UNRSTD;    /* DROP WORK REGISTER            */
*                                                                  0214
@RC00211 DS    0H                                                  0215
*               /*****************************************************/
*               /*                                                   */
*               /* IF SPEED CREATE TRY TO SCHEDULE AN INTEGRAL       */
*               /* MULTIPLE OF TRACKS TO ELIMINATE TIME SPENT WAITING*/
*               /* FOR REPOSITIONING.                                */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0215
*               IF AMBSPEED=ON THEN /* IN SPEED CREATE?              */
         TM    AMBSPEED(RAMB),B'00001000'                          0215
         BNO   @RF00215                                            0215
*                 DO;               /* YES, ADJUST SCHED VAL         */
*                   RWORK1=LPMBPTRK/AMDCINV;/* GET CIS PER TRK       */
         L     @10,AMBEDB(,RAMB)                                   0217
         L     @10,EDBLPMBC(,@10)                                  0217
         L     @07,AMBDSB(,RAMB)                                   0217
         L     @08,LPMBPTRK(,@10)                                  0217
         SRDA  @08,32                                              0217
         D     @08,AMDCINV(,@07)                                   0217
         LR    RWORK1,@09                                          0217
*                   IF PLHBFRNO>=RWORK1 THEN/* NO. BFRS >= CIS/TRK?  */
         SLR   @10,@10                                             0218
         IC    @10,PLHBFRNO(,RPLH)                                 0218
         CR    RWORK1,@10                                          0218
         BH    @RF00218                                            0218
*                     DO;           /* ADJUST IF BFRS > TRACK        */
*                       IF PLHRMIN<RWORK1 THEN/* IF SCHED VAL < 1 TRK*/
         SLR   @10,@10                                             0220
         IC    @10,PLHRMIN(,RPLH)                                  0220
         CR    RWORK1,@10                                          0220
         BNH   @RF00220                                            0220
*                         PLHRMIN=RWORK1;/* MAKE IT ONE TRACK.       */
         STC   RWORK1,PLHRMIN(,RPLH)                               0221
*                       ELSE        /* >= 1 TRK, ROUND DOWN          */
*                         IF RWORK1^=ZERO THEN/* ENSURE >1 CI ON TRK */
         B     @RC00220                                            0222
@RF00220 LTR   RWORK1,RWORK1                                       0222
         BZ    @RF00222                                            0222
*                           PLHRMIN=(PLHRMIN/RWORK1)*RWORK1;/* TRK 0223
*                                      MULTIPLE.                     */
         SLR   @09,@09                                             0223
         IC    @09,PLHRMIN(,RPLH)                                  0223
         SLR   @08,@08                                             0223
         DR    @08,RWORK1                                          0223
         MR    @08,RWORK1                                          0223
         STC   @09,PLHRMIN(,RPLH)                                  0223
*                     END;          /* END OF BFRS > CI/TRK          */
*                   ELSE            /* NO. BFRS < CIS/TRK            */
*                     IF PLHBFRNO>=(RWORK1+ONE)/TWO THEN/* IF MORE 0225
*                                      THAN 1/2 TRK                  */
         B     @RC00218                                            0225
@RF00218 LA    @10,2                                               0225
         LA    @07,1                                               0225
         ALR   @07,RWORK1                                          0225
         LR    @08,@07                                             0225
         SRDA  @08,32                                              0225
         DR    @08,@10                                             0225
         SLR   @14,@14                                             0225
         IC    @14,PLHBFRNO(,RPLH)                                 0225
         CR    @09,@14                                             0225
         BH    @RF00225                                            0225
*                       PLHRMIN=(RWORK1+ONE)/TWO;/* USE 1/2 TRK OF 0226
*                                      BUFFERS                       */
         LR    @08,@07                                             0226
         SRDA  @08,32                                              0226
         DR    @08,@10                                             0226
         STC   @09,PLHRMIN(,RPLH)                                  0226
*                 END;              /* END OF SPEED CREATE           */
@RF00225 DS    0H                                                  0227
@RC00218 DS    0H                                                  0228
*             END;                  /* END OF CALCULATION            */
@RF00215 DS    0H                                                  0229
*           RESPECIFY                                              0229
*             RWORK1 UNRESTRICTED;  /* DROP REGISTER                 */
@RC00205 DS    0H                                                  0230
*           IF RPARM1^=ZERO THEN    /* IF NOT GOTTEN                 */
         LTR   RPARM1,RPARM1                                       0230
         BZ    @RF00230                                            0230
*             BUFDRAVL=OFF;         /* INDICATE NONE AVAILABLE       */
         L     @10,AMBBUFC(,RAMB)                                  0231
         NI    BUFDRAVL(@10),B'10111111'                           0231
*           ELSE                                                   0232
*             BUFDRAVL=ON;          /* BFR MAY BE AVAILABLE          */
         B     @RC00230                                            0232
@RF00230 L     @10,AMBBUFC(,RAMB)                                  0232
         OI    BUFDRAVL(@10),B'01000000'                           0232
*         END;                      /* END, BFR AVAILABLE CODE       */
@RC00230 DS    0H                                                  0234
*     END;                          /* END, BUFFERS TO ADD           */
@RF00194 DS    0H                                                  0235
*   PLHASKBF=OFF;                   /* STOP ASKING                   */
@RF00187 NI    PLHASKBF(RPLH),B'11011111'                          0235
*   RFY                                                            0236
*     R14 RSTD;                     /* GET RETURN REGISTER           */
*   R14=RWORK2;                     /* RESTORE R14                   */
         LR    R14,RWORK2                                          0237
*   RFY                                                            0238
*     RWORK2 UNRSTD;                /* DROP REG                      */
*                                                                  0238
*   /*****************************************************************/
*   /*                                                               */
*   /* RELEASE THE BUFFER HEADER                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0239
*   BUFDRTSB=CZERO;                 /* RELEASE BUFC HEADER           */
         L     @10,AMBBUFC(,RAMB)                                  0239
         MVI   BUFDRTSB(@10),B'00000000'                           0239
*   PLHBUFHD=OFF;                   /* CLEAR OWNERSHIP BIT IN PLH  0240
*                                                            @ZA32757*/
         NI    PLHBUFHD(RPLH),B'10111111'                          0240
*BUSYHDR:                                                          0241
*   RETURN;                         /* END OF ADD BUFFER CODE        */
         B     @EL00001                                            0241
*                                                                  0242
*   /*****************************************************************/
*   /*                                                               */
*   /* IDAAIBF - ADD INSERT BUFFER                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0242
*/* FUNCTION = ADD THE DATA INSERT BUFC TO THE PLH I/O CHAIN         */
*/* INPUT = STANDARD VSAM REGISTERS                                  */
*/* OUTPUT = RBUFC CONTAINS INSERT BUFC, STANDARD REGS               */
*                                                                  0242
*IDAAIBF:                                                          0242
*   ENTRY;                                                         0242
@EP00242 DS    0H                                                  0243
*   RFY                                                            0243
*    (R14,                                                         0243
*     RWORK1,                                                      0243
*     RWORK2) RSTD;                 /* GET REGS                      */
*   RWORK2=R14;                     /* SAVE R14                      */
         LR    RWORK2,R14                                          0244
*   RBUFC=DIWBUFC;                  /* POINT TO INS                  */
         L     @10,AMBIWA(,RAMB)                                   0245
         L     RBUFC,DIWBUFC(,@10)                                 0245
*   CALL CHAINBFR;                  /* PUT ON CHAIN                  */
         BAL   @14,CHAINBFR                                        0246
*   PLHRMIN=PLHRMIN+ONE;            /* INCREMENT SCHEDULE COUNT      */
         LA    @10,1                                               0247
         SLR   @07,@07                                             0247
         IC    @07,PLHRMIN(,RPLH)                                  0247
         ALR   @10,@07                                             0247
         STC   @10,PLHRMIN(,RPLH)                                  0247
*   BUFCINS=OFF;                    /* NO LONGER INS BFR             */
         NI    BUFCINS(RBUFC),B'11011111'                          0248
*   R14=RWORK2;                     /* RESTORE R14                   */
         LR    R14,RWORK2                                          0249
*   RFY                                                            0250
*    (RWORK1,                                                      0250
*     RWORK2) UNRSTD;               /* DROP REGS                     */
*   RETURN;                         /* EXIT                          */
         B     @EL00001                                            0251
*                                                                  0252
*   /*****************************************************************/
*   /*                                                               */
*   /* IDAGWSGW - GET WORK BUFFER FOR SPANNED RECORD                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0252
*/* FUNCTION = LOCATE AN EMPTY BUFFER IN THE PLH CHAIN (MAY BE THE   */
*/*            CURRENT BUFC).                                        */
*/* INPUT = STANDARD VSAM REGISTERS.                                 */
*/* OUTPUT = RBUFC POINTS TO THE EMPTY BUFFER.  OTHER REGISTERS ARE  */
*/*          STANDARD.                                               */
*                                                                  0252
*IDAGWSGW:                                                         0252
*   ENTRY;                                                         0252
@EP00252 DS    0H                                                  0253
*   RFY                                                            0253
*    (R14,                                                         0253
*     RWORK1) RSTD;                 /* GET REGISTERS                 */
*   RBUFC=PLHNBUFC;                 /* POINT TO THE 1ST EMPTY        */
         L     RBUFC,PLHNBUFC(,RPLH)                               0254
*   RWORK1=ZERO;                    /* NO EMPTY NON-MW YET           */
*                                                                  0255
         SLR   RWORK1,RWORK1                                       0255
*   /*****************************************************************/
*   /*                                                               */
*   /* ATTEMPT TO LOCATE AN EMPTY NON-MW BUFC                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0256
*   DO WHILE RBUFC^=PLHDBUFC&RWORK1=ZERO;                          0256
         B     @DE00256                                            0256
@DL00256 DS    0H                                                  0257
*     IF BUFCMW=OFF THEN            /* IF NON-MW, REMEMBER           */
         TM    BUFCMW(RBUFC),B'10000000'                           0257
         BNZ   @RF00257                                            0257
*       RWORK1=RBUFC;               /* ADDR AND CAUSE EXIT           */
         LR    RWORK1,RBUFC                                        0258
*     ELSE                          /* ELSE NEXT IN I/O CHAIN        */
*       RBUFC=BUFCNXT2;             /* ELSE NEXT IN I/O CHAIN        */
         B     @RC00257                                            0259
@RF00257 L     @10,BUFCNXT2-1(,RBUFC)                              0259
         LA    @10,0(,@10)                                         0259
         LR    RBUFC,@10                                           0259
*   END;                            /* END OF BUFC SEARCH            */
@RC00257 DS    0H                                                  0260
@DE00256 C     RBUFC,PLHDBUFC(,RPLH)                               0260
         BE    @DC00256                                            0260
         LTR   RWORK1,RWORK1                                       0260
         BZ    @DL00256                                            0260
@DC00256 DS    0H                                                  0261
*   IF RWORK1^=ZERO THEN            /* IF NON-MW FOUND,              */
         LTR   RWORK1,RWORK1                                       0261
         BZ    @RF00261                                            0261
*     RBUFC=RWORK1;                 /* USE IT.                       */
         LR    RBUFC,RWORK1                                        0262
*   ELSE                            /* ELSE, USE OTHER.              */
*     IF BUFCMW=ON THEN             /* WRITE 1ST IF MW ON            */
         B     @RC00261                                            0263
@RF00261 TM    BUFCMW(RBUFC),B'10000000'                           0263
         BNO   @RF00263                                            0263
*       DO;                                                        0264
*         GEN(IDASVR14);            /* SAVE RETURN REGISTER          */
         IDASVR14
*I01:                                                              0266
*         DO;                       /* IDACALL(IDAWRBFR)             */
I01      DS    0H                                                  0267
*           CALL IDAWRBFR;          /* EXIT TO IDAWRBFR              */
         L     @10,@CV00042                                        0267
         LR    @15,@10                                             0267
         BALR  @14,@15                                             0267
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I01;                  /* WRITE OUT BUFFER              */
*         GEN(IDARST14);            /* RESTORE RETURN REG            */
         IDARST14
*       END;                        /* END OF WRITE CODE             */
*   RFY                                                            0275
*     RWORK1 UNRSTD;                /* DROP WORK REGISTER            */
*   RETURN;                         /* RETURN TO CALLER              */
         B     @EL00001                                            0276
*                                                                  0277
*   /*****************************************************************/
*   /*                                                               */
*   /* READBFR - READ A CONTROL INTERVAL                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0277
*/*                                                                0277
*01 FUNCTION = CALL I/O MANAGER, CALL IDAWAIT, AND CHECK FOR READ ERROR
*01 INPUT = RBUFC IS THE BUFC TO READ, RPARM1 IS THE IOB POINTER, AND
*           THE OTHER REGISTERS HAVE THEIR STANDARD CONTENTS.      0277
*01 OUTPUT = REGISTERS UNCHANGED, ERROR CODE SET IN RPL.             */
*                                                                  0277
*READBFR:                                                          0277
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0277
READBFR  DS    0H                                                  0278
*   GEN SETS(PLHRETO,PLHRET1)(IDASVR14);/* SAVE RETURN REGISTER      */
         IDASVR14
*   RFY                                                            0279
*     R14 UNRSTD;                   /* RELEASE REGISTER              */
*   IF RPLASY=OFF THEN              /* SYNCHRONOUS REQUEST?  @Z40GSDT*/
         TM    RPLASY(RRPL),B'00001000'                            0280
         BNZ   @RF00280                                            0280
*     PLHSR=ON;                     /* YES, SUSPEND/RESUME   @Z40GSDT*/
         OI    PLHSR(RPLH),B'00000001'                             0281
*I02:                                                              0282
*   DO;                             /* IDACALL(IDA019R3)             */
@RF00280 DS    0H                                                  0282
I02      DS    0H                                                  0283
*     CALL IDA019R3;                /* EXIT TO IDA019R3              */
         L     @15,@CV00037                                        0283
         BALR  @14,@15                                             0283
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I02;                        /* CALL I/O MGR FOR READ         */
*I03:                                                              0289
*   DO;                             /* IDACALL(IDAWAIT)              */
I03      DS    0H                                                  0290
*     CALL IDAWAIT;                 /* EXIT TO IDAWAIT               */
         L     @15,@CV00040                                        0290
         BALR  @14,@15                                             0290
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I03;                        /* WAIT FOR I/O COMPLETION       */
*   CALL ERRORCHK;                  /* CHECK FOR READ ERROR          */
         BAL   @14,ERRORCHK                                        0296
*   GEN(IDARST14);                  /* RESTORE RETURN                */
         IDARST14
*   END READBFR;                    /* END OF READ BUFFER            */
@EL00002 DS    0H                                                  0298
@EF00002 DS    0H                                                  0298
@ER00002 BR    @14                                                 0298
*                                                                  0299
*   /*****************************************************************/
*   /*                                                               */
*   /* ERRORCHK -- CHECK FOR READ ERROR                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0299
*/*                                                                0299
*01 FUNCTION = TEST BUFC FOR SUCCESS OF READ.                      0299
*01 INPUT = RBUFC IS ADDRESS OF BUFC FOR READ.                     0299
*01 OUTPUT = RETURN CODE IS SET IN THE RPL.                          */
*                                                                  0299
*ERRORCHK:                          /* CHECK FOR ERRORS              */
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0299
ERRORCHK DS    0H                                                  0300
*   RFY                                                            0300
*     R14 RSTD;                     /* GUARD RETURN REGISTER         */
*   IF BUFCER1=ON×                  /* CHECK FOR INPUT ERRIR,        */
*       BUFCER2=ON×                 /* OUTPUT ERROR, OR READ         */
*       BUFCRRD=ON THEN             /* UNDONE BECAUSE OF ERROR       */
         TM    BUFCER1(RBUFC),B'00011000'                          0301
         BNZ   @RT00301                                            0301
         TM    BUFCRRD(RBUFC),B'00100000'                          0301
         BNO   @RF00301                                            0301
@RT00301 DS    0H                                                  0302
*     RPLERREG='0C'X;               /* ELSEWHERE IN BUFC CHAIN       */
         MVI   RPLERREG(RRPL),X'0C'                                0302
*   IF BUFCXEDB=ON                  /* IF VOLUME NOT MOUNTED,        */
*     THEN                          /* SET ERROR.                    */
@RF00301 TM    BUFCXEDB(RBUFC),B'00000100'                         0303
         BNO   @RF00303                                            0303
*     DO;                                                          0304
*       RPLERREG='08'X;             /* SET LOGICAL ERROR             */
         MVI   RPLERREG(RRPL),X'08'                                0305
*       RPLERRCD=RPLNOMNT;          /* SET MOUNT ERROR               */
         MVI   RPLERRCD(RRPL),X'18'                                0306
*     END;                          /* END OF MOUNT ERROR            */
*   RFY                                                            0308
*     R14 UNRSTD;                   /* RELEASE RETURN REG            */
*   END ERRORCHK;                   /* END OF READ ERROR CHECK       */
@EL00003 DS    0H                                                  0309
@EF00003 DS    0H                                                  0309
@ER00003 BR    @14                                                 0309
*                                                                  0310
*   /*****************************************************************/
*   /*                                                               */
*   /* IDAFRBA - FIND RBA                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0310
*/* FUNCTION = FIND THE RBA OF THE NEXT CONTROL INTERVAL IN LOGICAL  */
*/*            OR PHYSICAL SEQUENCE.                                 */
*/* INPUT = PLHNRBA IS THE LAST RBA RETRIEVED (SET BY IDAFRBA AND    */
*/*         BY IDAGRB). FOR KEYED RETRIEVAL, THE SEQUENCE SET        */
*/*         POINTERS IN THE PLACEHOLDER REFLECT THE LAST CONTROL     */
*/*         INTERVAL ACCESSED, RAMB = DATA AMB.                      */
*/* OUTPUT = RPARM1 IS SET TO THE NEXT RBA AND PLHNRBA OR THE SEQ    */
*/*          SET POINTERS ARE UPDATED, RAMB = DATA AMB ( INDEX AMB   */
*/*          IF I/O ERROR IN THE INDEX).                             */
*/*          R15 = 0 IF NEXT CI RBA PRESENTED WITH NO EXCEPTIONAL    */
*/*          CONDITION, R15 = 2 IF READ AHEAD SHOULD BE STOPPED      */
*/*          IMMEDIATELY (NO NEXT CI RETURNED), R15 = 4 IF END OF    */
*/*          DATA, R15 = 6 IF READ AHEAD SHOULD BE STOPPED AFTER THE */
*/*          CURRENT CI RBA THAT IS RETURNED HAS BEEN PROCESSED.     */
*                                                                  0310
*IDAFRBA:                                                          0310
*   ENTRY;                          /* GET NEXT SEQUENTIAL RBA       */
@EP00310 DS    0H                                                  0311
*   RESPECIFY                                                      0311
*     R14 RESTRICTED;               /* SAVE RETURN REG               */
*   RFY                                                            0312
*     RWORK3 RSTD;                  /* GET WORK REGISTER             */
*                                                                  0312
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE RPL DOES NOT SPECIFY KEYED ACCESS, GET THE NEXT RBA IN */
*   /* PHYSICAL SEQUENCE.                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0313
*   IF RPLKEY=OFF×                  /* IF NOT KEYED ACCESS           */
*       AMDRRDS=ON                  /* OR IF AN RRDS,                */
*     THEN                          /* GET NEXT RBA IN               */
         TM    RPLKEY(RRPL),B'10000000'                            0313
         BZ    @RT00313                                            0313
         L     @15,AMBDSB(,RAMB)                                   0313
         TM    AMDRRDS(@15),B'00000010'                            0313
         BNO   @RF00313                                            0313
@RT00313 DS    0H                                                  0314
*     DO;                           /* PHYSICAL SEQUENCE             */
*                                                                  0314
*       /*************************************************************/
*       /*                                                           */
*       /* ADVANCE TO NEXT CONTROL INTERVAL AND CHECK IT FOR         */
*       /* END-OF-DATA AND FOR A GAP AT THE END OF A KEY RANGE.      */
*       /* FWD/BWD                                                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0315
*       RFY                                                        0315
*         IDAARDB BASED(RWORK3);    /* SET ARDB BASE                 */
*       RWORK3=AMDPARDB;            /* POINT TO FIRST ARDB           */
*                                                                  0316
         L     @15,AMBDSB(,RAMB)                                   0316
         L     RWORK3,AMDPARDB(,@15)                               0316
*       /*************************************************************/
*       /*                                                           */
*       /* SEE WHAT DIRECTION THE ADVANCEMENT IS TO TAKE PLACE.      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0317
*       IF RPLBWD=ON THEN           /* SEE IF BWD                    */
         TM    RPLBWD(RRPL),B'00010000'                            0317
         BNO   @RF00317                                            0317
*         DO;                                                      0318
*                                                                  0318
*           /*********************************************************/
*           /*                                                       */
*           /* DECREMENT TO THE PRECEDING CONTROL INTERVAL.          */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0319
*           IF PLHNRBA=ZERO THEN    /* SEE IF EOD                    */
         L     @15,PLHNRBA(,RPLH)                                  0319
         LTR   @15,@15                                             0319
         BNZ   @RF00319                                            0319
*             DO;                                                  0320
*               R15=RPLEODER;       /* SET RETURN CODE       @ZA27875*/
         LA    R15,4                                               0321
*               GOTO FRBAEXIT;      /* EXIT FRBA             @ZA27875*/
         B     FRBAEXIT                                            0322
*             END;                                                 0323
*           RPARM1=PLHNRBA-AMDCINV; /* PRIOR CI                      */
@RF00319 L     @15,AMBDSB(,RAMB)                                   0324
         L     RPARM1,PLHNRBA(,RPLH)                               0324
         SL    RPARM1,AMDCINV(,@15)                                0324
*           DO WHILE RWORK3^=ZERO;  /* CHK ALL ARDBS                 */
         B     @DE00325                                            0325
@DL00325 DS    0H                                                  0326
*             IF PLHNRBA=ARDERBA THEN/* AT KEY RANGE                 */
         CLC   PLHNRBA(4,RPLH),ARDERBA(RWORK3)                     0326
         BNE   @RF00326                                            0326
*               DO;                 /* GAP--SKIP OVER                */
*                 RPARM1=ARDHRBA-AMDCINV;/* LAST IN ARDB             */
         L     @15,AMBDSB(,RAMB)                                   0328
         L     RPARM1,ARDHRBA(,RWORK3)                             0328
         SL    RPARM1,AMDCINV(,@15)                                0328
*                 RWORK3=ZERO;      /* RBA FOUND                     */
         SLR   RWORK3,RWORK3                                       0329
*               END;                /* END OF GAP TEST               */
*             ELSE                  /* NEXT ARDB                     */
*               RWORK3=ARDNPTR;     /* NEXT ARDB                     */
         B     @RC00326                                            0331
@RF00326 L     RWORK3,ARDNPTR(,RWORK3)                             0331
*           END;                    /* END OF SEARCH                 */
@RC00326 DS    0H                                                  0332
@DE00325 LTR   RWORK3,RWORK3                                       0332
         BNZ   @DL00325                                            0332
*           RWORK3=PLHNRBA;         /* SET CA BDY TEST               */
         L     RWORK3,PLHNRBA(,RPLH)                               0333
*           PLHRVRS=ON;             /* CAUSE BUFFER REORDER          */
         OI    PLHRVRS(RPLH),B'00001000'                           0334
*         END;                      /* END OF BWD CODE               */
*                                                                  0335
*       /*************************************************************/
*       /*                                                           */
*       /* HERE FOR FORWARD PROCESSING                               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0336
*       ELSE                        /* FWD                           */
*         DO;                                                      0336
         B     @RC00317                                            0336
@RF00317 DS    0H                                                  0337
*           RPARM1=PLHNRBA+AMDCINV; /* GO TO NEXT CNTL INTVL         */
         L     @15,AMBDSB(,RAMB)                                   0337
         L     RPARM1,PLHNRBA(,RPLH)                               0337
         AL    RPARM1,AMDCINV(,@15)                                0337
*           DO WHILE RWORK3^=ZERO;  /* SEARCH ALL ARDBS              */
         B     @DE00338                                            0338
@DL00338 DS    0H                                                  0339
*             IF RPARM1=ARDHRBA     /* IF END OF KEY RANGE           */
*               THEN                /* SEE IF END OF DATA            */
         CL    RPARM1,ARDHRBA(,RWORK3)                             0339
         BNE   @RF00339                                            0339
*               DO;                                                0340
*                 IF ARDEOD=ON THEN /* SEE IF EOD IN THIS ARDB       */
         TM    ARDEOD(RWORK3),B'00001000'                          0341
         BNO   @RF00341                                            0341
*                   DO;                                            0342
*                     R15=RPLEODER; /* SET RETURN CODE       @ZA27875*/
         LA    R15,4                                               0343
*                     GOTO FRBAEXIT;/* EXIT FRBA             @ZA27875*/
         B     FRBAEXIT                                            0344
*                   END;                                           0345
*                 RPARM1=ARDERBA;   /* POINT TO RBA AFTER THIS       */
@RF00341 L     RPARM1,ARDERBA(,RWORK3)                             0346
*                 RWORK3=ZERO;      /* INDICATE RBA FOUND            */
         SLR   RWORK3,RWORK3                                       0347
*               END;                /* END OF EOKR CODE              */
*             ELSE                  /* GO TO NEXT ARDB               */
*               RWORK3=ARDNPTR;     /* GO TO NEXT ARDB               */
         B     @RC00339                                            0349
@RF00339 L     RWORK3,ARDNPTR(,RWORK3)                             0349
*           END;                    /* END OF ARDB SEARCH            */
@RC00339 DS    0H                                                  0350
@DE00338 LTR   RWORK3,RWORK3                                       0350
         BNZ   @DL00338                                            0350
*           RWORK3=RPARM1;          /* CA BDY TEST                   */
         LR    RWORK3,RPARM1                                       0351
*         END;                      /* END OF FWD CODE               */
*                                                                  0352
*       /*************************************************************/
*       /*                                                           */
*       /* RETURN WITH CODE IN REGISTER 15 IF THE NEXT RBA IS ON A   */
*       /* NEW CONTROL AREA AND THERE ARE STILL BUFFERS TO PROCESS IN*/
*       /* THE OLD CONTROL AREA. IF NO PROCESS BUFFERS, FORCE WRITES.*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0353
*       RFY                                                        0353
*         IDAARDB BASED(PLHARDB);   /* RESET ARDB BASE               */
@RC00317 DS    0H                                                  0354
*       IF RWORK3X//(AMDCINV*AMDCIPCA)=ZERO/* IF RBA IS BDY  @ZA10887*/
*         THEN                      /* OF CA SEE IF PROCESSING       */
         L     @15,AMBDSB(,RAMB)                                   0354
         L     @10,AMDCINV(,@15)                                   0354
         MH    @10,AMDCIPCA(,@15)                                  0354
         LR    @09,RWORK3X                                         0354
         SLR   @08,@08                                             0354
         DR    @08,@10                                             0354
         LTR   @08,@08                                             0354
         BNZ   @RF00354                                            0354
*         DO;                       /* THROUGH IN OLD CA.            */
*           IF PLHFRCNT^=PLHBFRNO THEN/* IS PROCESSING THROUGH?      */
         CLC   PLHFRCNT(1,RPLH),PLHBFRNO(RPLH)                     0356
         BE    @RF00356                                            0356
*             DO;                                                  0357
*               R15=TWO;            /* SET RETURN CODE       @ZA27875*/
         LA    R15,2                                               0358
*               GOTO FRBAEXIT;      /* EXIT FRBA             @ZA27875*/
         B     FRBAEXIT                                            0359
*             END;                                                 0360
*           ELSE                    /* IF PROCESSING DONE,           */
*             DO;                   /* FORCE WRITE.          @ZA07571*/
@RF00356 DS    0H                                                  0362
*               PLHNRBA=RPARM1;     /* SAVE CURR RBA         @ZA07571*/
         ST    RPARM1,PLHNRBA(,RPLH)                               0362
*               IF AMBLSR=OFF&      /* NOT LSR, AND                  */
*                   AMBGSR=OFF THEN /* NOT GSR THEN                  */
         TM    AMBLSR(RAMB),B'01100000'                            0363
         BNZ   @RF00363                                            0363
*                 DO;               /* FORCE WRITES OUT TOO.         */
*                   GEN(IDASVR14);  /* SAVE REGISTER 14              */
         IDASVR14
*                   RBUFC=PLHNBUFC; /* PTR TO BUFC FOR WRITE         */
         L     RBUFC,PLHNBUFC(,RPLH)                               0366
*I04:                                                              0367
*                   DO;             /* IDACALL(IDAWRBFR)             */
I04      DS    0H                                                  0368
*                     CALL IDAWRBFR;/* EXIT TO IDAWRBFR              */
         L     @15,@CV00042                                        0368
         BALR  @14,@15                                             0368
*                     GEN(BALR @11,0);/* LOAD ADDR OF REENTRY        */
         BALR @11,0
*                     GEN(USING *,@11);/* ESTABLISH ADDRESSING       */
         USING *,@11
*                     GEN(L     @11,=A(@PSTART));/* RELOAD BASE      */
         L     @11,=A(@PSTART)
*                     GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING */
         USING @PSTART,@11
*                   END I04;        /* FORCE WRITES                  */
*                   RPARM1=PLHNRBA; /* RESTORE RBA REGISTER          */
         L     RPARM1,PLHNRBA(,RPLH)                               0374
*                   GEN(IDARST14);  /* RESTORE REG 14                */
         IDARST14
*                 END;              /* END SHARED            @ZA07571*/
*             END;                  /* END OF FORCE WRITES           */
@RF00363 DS    0H                                                  0378
*         END;                      /* END OF NEW CA CODE            */
*       ELSE                        /* SET NEXT RBA TO READ          */
*         PLHNRBA=RPARM1;           /* SET NEXT RBA TO READ          */
         B     @RC00354                                            0379
@RF00354 ST    RPARM1,PLHNRBA(,RPLH)                               0379
*       R15=ZERO;                   /* SET RETURN CODE       @ZA27875*/
@RC00354 SLR   R15,R15                                             0380
*       GOTO FRBAEXIT;              /* EXIT FRBA             @ZA27875*/
         B     FRBAEXIT                                            0381
*     END;                          /* END, NON-KEYED ACCESS         */
*   ELSE                            /* HERE FOR KEYED ACCESS         */
*     DO;                                                          0383
*                                                                  0383
@RF00313 DS    0H                                                  0384
*       /*************************************************************/
*       /*                                                           */
*       /* FIND NEXT CONTROL INTERVAL FOR KEYED SEQUENTIAL RETRIEVAL */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0384
*       RESPECIFY                                                  0384
*         RWORK3 RESTRICTED;        /* RESTRICT REGISTER             */
*       RESPECIFY                                                  0385
*         IDAIXH BASED(BUFCBAD);    /* IX HDR IS AT BFR START        */
*       RBUFC=PLHIBUFC;             /* POINT TO INDEX BUFC           */
*                                                                  0386
         L     RBUFC,PLHIBUFC(,RPLH)                               0386
*       /*************************************************************/
*       /*                                                           */
*       /* IF DBDC, THE SEQUENCE SET MUST BE READ                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0387
*       IF RBUFC=ZERO THEN          /* DBDC & NO BUFC?               */
         LTR   RBUFC,RBUFC                                         0387
         BNZ   @RF00387                                            0387
*         DO;                       /* YES, SET TO READ SEQ SET      */
*           GEN(IDASVR14);          /* SAVE RTRN REG                 */
         IDASVR14
*VALDBDC:                                                          0390
*           PLHRDEXC=OFF;           /* GET INDEX FOR SHARE           */
VALDBDC  NI    PLHRDEXC(RPLH),B'11110111'                          0390
*           RPARM1=PLHSSRBA;        /* SEQ SET RBA                   */
         L     RPARM1,PLHSSRBA(,RPLH)                              0391
*           RAMB=AMBLIX;            /* INDEX AMB                     */
         L     @15,RPLDACB(,RRPL)                                  0392
         L     @15,ACBAMBL(,@15)                                   0392
         L     RAMB,AMBLIX(,@15)                                   0392
*I05:                                                              0393
*           DO;                     /* IDACALL(IDAGRB)               */
I05      DS    0H                                                  0394
*             CALL IDAGRB;          /* EXIT TO IDAGRB                */
         L     @15,@CV00041                                        0394
         BALR  @14,@15                                             0394
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I05;                /* GET RBA                       */
*           IF RPLREQ=RPLPUT×       /* IF PUT OR GET UPDATE          */
*               RPLUPD=ON THEN      /* MUST HAVE EXCL CNTL           */
         CLI   RPLREQ(RRPL),1                                      0400
         BE    @RT00400                                            0400
         TM    RPLUPD(RRPL),B'00000010'                            0400
         BNO   @RF00400                                            0400
@RT00400 DS    0H                                                  0401
*             PLHRDEXC=ON;          /* OF THE DATA.                  */
         OI    PLHRDEXC(RPLH),B'00001000'                          0401
*           IF RPLRTNCD^=ZERO THEN  /* ERROR?                        */
@RF00400 CLI   RPLRTNCD(RRPL),0                                    0402
         BNE   @RT00402                                            0402
*             GOTO FINDX;           /* YES, EXIT                     */
*                                                                  0403
*           /*********************************************************/
*           /*                                                       */
*           /* SET TO CALL SCIB RTN                                  */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0404
*           RPARM1=ADDR(PLHKEY);    /* SEARCH ARG                    */
         L     RPARM1,PLHKEYPT(,RPLH)                              0404
*           RBUFC=BUFCBAD;          /* BUFFER ADDR                   */
         L     RBUFC,BUFCBAD(,RBUFC)                               0405
*           RFY                                                    0406
*             RWORK3 RSTD;          /* LOCK                          */
*           RWORK3=ADDR(PLHIXSPL);  /* IX SCH LIST BASE              */
         LA    RWORK3,PLHIXSPL(,RPLH)                              0407
*I06:                                                              0408
*           DO;                     /* IDACALL(IDA019RC)             */
I06      DS    0H                                                  0409
*             CALL IDA019RC;        /* EXIT TO IDA019RC              */
         L     @15,@CV00038                                        0409
         BALR  @14,@15                                             0409
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I06;                /* SCIB                          */
*           RFY                                                    0415
*             R15 RSTD;             /* GET RETURN CODE               */
*           RFY                                                    0416
*             RWORK3 UNRSTD;        /* UNLOCK                        */
*           RBUFC=PLHIBUFC;         /* RESTORE RBUFC                 */
         L     RBUFC,PLHIBUFC(,RPLH)                               0417
*           IF R15=ZERO THEN        /* KEY IN SEQ SET?               */
         LTR   R15,R15                                             0418
         BZ    @RT00418                                            0418
*             GOTO ADVNXT;          /* YES, GO ADV TO NXT            */
*           RFY                                                    0420
*             R15 UNRSTD;           /* RELEASE RETURN CODE REG       */
*                                                                  0420
*           /*********************************************************/
*           /*                                                       */
*           /* SET TO READ NEXT SEQ SET                              */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0421
*           PLHSSRBA=IXHHP;         /* RESET RBA IN PLH              */
         L     @15,BUFCBAD(,RBUFC)                                 0421
         L     @15,IXHHP(,@15)                                     0421
         ST    @15,PLHSSRBA(,RPLH)                                 0421
*           GO TO VALDBDC;          /* TRY NEXT SEQ SET IF NEED      */
         B     VALDBDC                                             0422
*         END;                      /* END RBUFC = ZERO              */
*                                                                  0423
*       /*************************************************************/
*       /*                                                           */
*       /* VALIDATE THE SEQUENCE SET--REREAD IT IF ANOTHER PLH HAS   */
*       /* DONE A CONTROL INTERVAL OR CONTROL AREA SPLIT WHILE THIS  */
*       /* PLACEHOLDER WAS DOING SEQUENTIAL RETRIEVAL IN             */
*       /* NON-EXCLUSIVE MODE TEST FOR SPANNED RECORD. IF A SPANNED  */
*       /* RECORD ADVANCE PTR AND THEN EXTRACT THE RBA. (SPANNED     */
*       /* RECORDS ARE ALWAYS RETRIEVED IN A FORWARD DIRECTION FOR A */
*       /* KSDS AND NEVER HAVE SECTION ENTRIES IN THE MIDDLE OF      */
*       /* THEM.)                                                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0424
*       IF IXSHEP->IBFLPF=AMDKEYLN& /* IF IN MIDDLE OF SPANNED       */
*           IXSHEP^=BUFCBAD+IXHLL THEN/* RECORD AND NOT END OF SEQ   */
@RF00387 L     @15,IXSHEP(,RPLH)                                   0424
         L     @10,AMBDSB(,RAMB)                                   0424
         SLR   @05,@05                                             0424
         IC    @05,IBFLPF(,@15)                                    0424
         CH    @05,AMDKEYLN(,@10)                                  0424
         BNE   @RF00424                                            0424
         L     @10,BUFCBAD(,RBUFC)                                 0424
         LH    @05,IXHLL(,@10)                                     0424
         N     @05,@CF01170                                        0424
         ALR   @05,@10                                             0424
         CR    @15,@05                                             0424
         BE    @RF00424                                            0424
*         DO;                       /* SET JUST ADVANCE PTR          */
*           IXSHEP=IXSHEP-IXHFLPLN; /* PTR TO NEXT RCD               */
         SLR   @05,@05                                             0426
         IC    @05,IXHFLPLN(,@10)                                  0426
         SLR   @15,@05                                             0426
         ST    @15,IXSHEP(,RPLH)                                   0426
*           RFY                                                    0427
*             R15 RSTD;             /* GET RETURN REGISTER           */
*           R15=ZERO;               /* SET RETURN CODE               */
         SLR   R15,R15                                             0428
*         END;                      /* END OF SPANNED RCD ADVANCE    */
*       ELSE                        /* NOT IN MIDDLE OF S.R.         */
*         DO;                                                      0430
         B     @RC00424                                            0430
@RF00424 DS    0H                                                  0431
*           RFY                                                    0431
*             R15 UNRSTD;           /* DROP R15                      */
*           IF BUFCRRD=ON           /* SEE IF INVALID SEQ SET        */
*             THEN                  /* IS INDICATED                  */
         TM    BUFCRRD(RBUFC),B'00100000'                          0432
         BNO   @RF00432                                            0432
*             DO;                                                  0433
*               IF PLHFRCNT^=PLHBFRNO THEN/* ALLOW PLHKEY VALUE      */
         CLC   PLHFRCNT(1,RPLH),PLHBFRNO(RPLH)                     0434
         BE    @RF00434                                            0434
*                 DO;                                              0435
*                   R15=TWO;        /* SET RETURN CODE       @ZA27875*/
         LA    R15,2                                               0436
*                   GOTO FRBAEXIT;  /* EXIT FRBA             @ZA27875*/
         B     FRBAEXIT                                            0437
*                 END;                                             0438
*               RESPECIFY                                          0439
*                 RWORK3 RESTRICTED;/* RESTRICT REGISTER             */
@RF00434 DS    0H                                                  0440
*               DO WHILE BUFCRRD=ON;/* MUST SEQ SET BE REREAD        */
         B     @DE00440                                            0440
@DL00440 DS    0H                                                  0441
*                 RAMB=AMBLIX;      /* I/O IS FOR INDEX AMB          */
         L     @15,RPLDACB(,RRPL)                                  0441
         L     @15,ACBAMBL(,@15)                                   0441
         L     RAMB,AMBLIX(,@15)                                   0441
*                 GEN(IDASVR14);    /* SAVE RETURN REGISTER          */
         IDASVR14
*                 RFY                                              0443
*                   R14 UNRSTD;     /* RELEASE RETURN REG            */
*                 RPARM1=PLHIIOB;   /* POINT TO INDEX IOB            */
         L     RPARM1,PLHIIOB(,RPLH)                               0444
*                 CALL READBFR;     /* PERFORM SEQ SET READ          */
         BAL   @14,READBFR                                         0445
*                 IF RPLERREG^='00'X/* IF AN ERROR ON READ,          */
*                   THEN            /* RETURN TO CALLER              */
         CLI   RPLERREG(RRPL),0                                    0446
         BE    @RF00446                                            0446
*                   DO;                                            0447
*FINDX:                                                            0448
*                     GEN(IDARST14);/* RESTORE RETURN                */
FINDX    IDARST14
*                     GOTO FRBAEXIT;/* EXIT FRBA             @ZA27875*/
         B     FRBAEXIT                                            0449
*                   END;            /* END OF READ ERROR             */
*                 RPARM1=ADDR(PLHKEY);/* POINT TO SEARCH ARG         */
@RF00446 L     RPARM1,PLHKEYPT(,RPLH)                              0451
*                 RBUFC=BUFCBAD;    /* POINT TO INDEX BUFFER         */
         L     RBUFC,BUFCBAD(,RBUFC)                               0452
*                 RWORK3=ADDR(PLHIXSPL);/* POINT TO INDEX SCH LIST   */
*                                                                  0453
         LA    RWORK3,PLHIXSPL(,RPLH)                              0453
*                 /***************************************************/
*                 /*                                                 */
*                 /* NOW CALL THE SCIB ROUTINE                       */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0454
*I07:                                                              0454
*                 DO;               /* IDACALL(IDA019RC)             */
I07      DS    0H                                                  0455
*                   CALL IDA019RC;  /* EXIT TO IDA019RC              */
         L     @15,@CV00038                                        0455
         BALR  @14,@15                                             0455
*                   GEN(BALR @11,0);/* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                   GEN(USING *,@11);/* ESTABLISH ADDRESSING         */
         USING *,@11
*                   GEN(L     @11,=A(@PSTART));/* RELOAD BASE        */
         L     @11,=A(@PSTART)
*                   GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING   */
         USING @PSTART,@11
*                 END I07;                                         0460
*                 RBUFC=PLHIBUFC;   /* POINT TO INDEX BUFC           */
         L     RBUFC,PLHIBUFC(,RPLH)                               0461
*                 RESPECIFY                                        0462
*                   R15 RESTRICTED; /* GET RETURN CODE REG           */
*                 IF R15^=ZERO      /* SEE IF KEY IS IN BFR.         */
*                   THEN            /* IF NOT, TRY NEXT ONE          */
         LTR   R15,R15                                             0463
         BZ    @RF00463                                            0463
*                   DO;                                            0464
*                     BUFCRRD=ON;   /* INDICATE READ REQUIRED        */
         OI    BUFCRRD(RBUFC),B'00100000'                          0465
*                     PLHSSRBA=IXHHP;/* RESET RBA IN PLH AND         */
         L     @14,BUFCBAD(,RBUFC)                                 0466
         L     @14,IXHHP(,@14)                                     0466
         ST    @14,PLHSSRBA(,RPLH)                                 0466
*                     BUFCDDDD=IXHHP;/* IN THE BUFC                  */
         ST    @14,BUFCDDDD(,RBUFC)                                0467
*                   END;            /* END OF SCIB ERROR CODE        */
*                 RESPECIFY                                        0469
*                   R15 UNRESTRICTED;/* DROP REGISTER 15             */
@RF00463 DS    0H                                                  0470
*                 RFY                                              0470
*                   RWORK1 RSTD;    /* GET WORK REGISTER             */
*                                                                  0470
*                 /***************************************************/
*                 /*                                                 */
*                 /* SKIP TO END OF SPANNED RECORD                   */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0471
*ADVNXT:                                                           0471
*                 DO WHILE IXSHEP->IBFLPF=AMDKEYLN;                0471
ADVNXT   B     @DE00471                                            0471
@DL00471 DS    0H                                                  0472
*                   CALL ADVSS;     /* ADVANCE SEQ SET ENTRY PTR     */
         BAL   @14,ADVSS                                           0472
*                 END;              /* END OF COMPLEX ENTRY SKIP     */
@DE00471 L     @10,IXSHEP(,RPLH)                                   0473
         L     @06,AMBDSB(,RAMB)                                   0473
         SLR   @00,@00                                             0473
         IC    @00,IBFLPF(,@10)                                    0473
         CH    @00,AMDKEYLN(,@06)                                  0473
         BE    @DL00471                                            0473
*                 RFY                                              0474
*                   RWORK1 UNRSTD;  /* DROP WORK REG                 */
*                 GEN(IDARST14);    /* RESTORE RETURN                */
         IDARST14
*                 RFY                                              0476
*                   R14 RSTD;       /* RELEASE RETURN REG            */
*               END;                /* END OF READ SEQ SET           */
@DE00440 TM    BUFCRRD(RBUFC),B'00100000'                          0477
         BO    @DL00440                                            0477
*               RAMB=AMBLDTA;       /* PTR TO DATA                   */
         L     @15,RPLDACB(,RRPL)                                  0478
         L     @15,ACBAMBL(,@15)                                   0478
         L     RAMB,AMBLDTA(,@15)                                  0478
*             END;                  /* END OF SEQ SET VALIDATE       */
*                                                                  0479
*           /*********************************************************/
*           /*                                                       */
*           /* ADVANCE THE INDEX POINTERS IN THE PLACEHOLDER         */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0480
*           RFY                                                    0480
*            (RWORK1,                                              0480
*             RWORK2,                                              0480
*             RWORK3,                                              0480
*             RWORK4) RSTD;         /* GET WORK REGS                 */
@RF00432 DS    0H                                                  0481
*           IF IXSHEP^=BUFCBAD+IXHLL THEN/* IF NOT SEQ SET END       */
         L     @15,IXSHEP(,RPLH)                                   0481
         L     @10,BUFCBAD(,RBUFC)                                 0481
         LH    @09,IXHLL(,@10)                                     0481
         N     @09,@CF01170                                        0481
         ALR   @09,@10                                             0481
         CR    @15,@09                                             0481
         BE    @RF00481                                            0481
*             DO;                   /* GO TO NEXT SEQ SET PTR        */
*               RPARM1=R14;         /* SAVE REG14                    */
         LR    RPARM1,R14                                          0483
*               RWORK2=IXSLEP;      /* SAVE LAST ENTRY PTR   @ZA27875*/
         L     RWORK2,IXSLEP(,RPLH)                                0484
*               RWORK3=IXSHEP;      /* SAVE LAST PTR                 */
         LR    RWORK3,@15                                          0485
*               IF RPLBWD=OFF THEN  /* IF FWD MODE                   */
         TM    RPLBWD(RRPL),B'00010000'                            0486
         BNZ   @RF00486                                            0486
*                 CALL ADVSS;       /* ADVANCE TO NEXT ENTRY         */
*                                                                  0487
         BAL   @14,ADVSS                                           0487
*               /*****************************************************/
*               /*                                                   */
*               /* HERE IF IN BACKWARD MODE                          */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0488
*               ELSE                                               0488
*                 DO;               /* BACK UP.                      */
         B     @RC00486                                            0488
@RF00486 DS    0H                                                  0489
*                   CALL BACKUP;    /* BACK UP ONE ENTRY             */
*                                                                  0489
         BAL   @14,BACKUP                                          0489
*                   /*************************************************/
*                   /*                                               */
*                   /* SKIP ACROSS SPANNED RECORD SEGMENTS UNTIL THE */
*                   /* FIRST SEGMENT IS LOCATED. (SPANNED RECORDS ARE*/
*                   /* ALWAYS RETRIEVED IN A FORWARD DIRECTION FOR A */
*                   /* KSDS.)                                        */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0490
*                   IF IXSHEP^=ZERO&IXSHEP->IBFLPF=AMDKEYLN THEN   0490
         L     @15,IXSHEP(,RPLH)                                   0490
         LTR   @15,@15                                             0490
         BZ    @RF00490                                            0490
         L     @10,AMBDSB(,RAMB)                                   0490
         SLR   @09,@09                                             0490
         IC    @09,IBFLPF(,@15)                                    0490
         CH    @09,AMDKEYLN(,@10)                                  0490
         BNE   @RF00490                                            0490
*                     DO;                                          0491
*                       CALL FIRSTSEG;/* POSITION TO FIRST SEGMENT   */
         BAL   @14,FIRSTSEG                                        0492
*                       CALL BACKUP;/* GET DESIRED ENTRY             */
         BAL   @14,BACKUP                                          0493
*                     END;          /* NOW AT PRIOR ENTRY            */
*                   CALL FIRSTSEG;  /* POSITION TO FIRST SEGMENT     */
@RF00490 BAL   @14,FIRSTSEG                                        0495
*                 END;              /* END OF BWD CODE               */
*               R14=RPARM1;         /* RESTORE 14                    */
@RC00486 LR    R14,RPARM1                                          0497
*             END;                  /* END OF NEXT SEQ SET PTR       */
*           ELSE                    /* BWD SET SEQ SET END           */
*             IXSHEP=ZERO;          /* CAUSE END OF SEQ SET          */
         B     @RC00481                                            0499
@RF00481 SLR   @15,@15                                             0499
         ST    @15,IXSHEP(,RPLH)                                   0499
*           IF IXSHEP<IXHLEO+BUFCBAD/* TEST FOR SEQ SET END          */
*             THEN                  /* IF SO, MUST TEST FOR          */
@RC00481 L     @15,BUFCBAD(,RBUFC)                                 0500
         LH    @10,IXHLEO(,@15)                                    0500
         ALR   @10,@15                                             0500
         C     @10,IXSHEP(,RPLH)                                   0500
         BNH   @RF00500                                            0500
*             DO;                   /* END OF DATA, ETC.             */
*                                                                  0501
*               /*****************************************************/
*               /*                                                   */
*               /* SKIP FORCE WRITE & CA SPLIT CHKS IF DBDC          */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0502
*               IF AMBLSR=OFF&      /* NOT LOCAL SHR AND -           */
*                   AMBGSR=OFF      /* NOT GLOBAL SHR?               */
*                 THEN                                             0502
         TM    AMBLSR(RAMB),B'01100000'                            0502
         BNZ   @RF00502                                            0502
*                 DO;               /* YES, CONTINUE                 */
*                                                                  0503
*                   /*************************************************/
*                   /*                                               */
*                   /* IF END OF SEQUENCE SET, RETURN WITH END OF    */
*                   /* CONTROL AREA CODE IN REGISTER 15 IF ACTIVITY  */
*                   /* STILL GOING ON IN OLD CONTROL AREA OR IF A    */
*                   /* CONTROL AREA SPLIT IS IN PROGRESS FOR THIS    */
*                   /* PLACEHOLDER. OTHERWISE, GO TO THE SEQUENCE SET*/
*                   /* OF THE NEXT CONTROL AREA OR SIGNAL AN         */
*                   /* END-OF-DATA CONDITION.                        */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0504
*                   IF PLHFRCNT^=PLHBFRNO×/* IF ACTIVITY GOING ON    */
*                       (DIWCAS=ON& /* OR IF CA                      */
*                       DIWPLH=RPLH)/* SPLIT IS ON                   */
*                     THEN          /* IN CONTROL AREA,              */
         CLC   PLHFRCNT(1,RPLH),PLHBFRNO(RPLH)                     0504
         BNE   @RT00504                                            0504
         L     @15,AMBIWA(,RAMB)                                   0504
         TM    DIWCAS(@15),B'10000000'                             0504
         BNO   @RF00504                                            0504
         C     RPLH,DIWPLH(,@15)                                   0504
         BNE   @RF00504                                            0504
@RT00504 DS    0H                                                  0505
*                     DO;           /* ALLOW IT TO FINISH            */
*                       IF RPLBWD=ON THEN/* SEE IF BWD               */
         TM    RPLBWD(RRPL),B'00010000'                            0506
         BNO   @RF00506                                            0506
*                         IXSHEP=BUFCBAD+IXHLL;/* RESTORE FOR NEXT 0507
*                                      TIME                          */
         L     @15,BUFCBAD(,RBUFC)                                 0507
         LH    @10,IXHLL(,@15)                                     0507
         N     @10,@CF01170                                        0507
         ALR   @10,@15                                             0507
         ST    @10,IXSHEP(,RPLH)                                   0507
*                       ELSE        /* IF FORWARD            @ZA27875*/
*                         DO;       /*                       @ZA27875*/
         B     @RC00506                                            0508
@RF00506 DS    0H                                                  0509
*                           IXSLEP=RWORK2;/* RESTORE LST ENTRY PTR 0509
*                                                            @ZA27875*/
         ST    RWORK2,IXSLEP(,RPLH)                                0509
*                           IXSHEP=RWORK3;/* RESTORE ENTRY PTR     0510
*                                                            @ZA27875*/
         ST    RWORK3,IXSHEP(,RPLH)                                0510
*                         END;      /*                       @ZA27875*/
*                       R15=TWO;    /* SET RETURN CODE       @ZA27875*/
@RC00506 LA    R15,2                                               0512
*                       GOTO FRBAEXIT;/* EXIT FRBA           @ZA27875*/
         B     FRBAEXIT                                            0513
*                       GEN;                                       0514
ICMINS   ICM   RPARM1,@00,@00(RWORK1)   PICK UP 1,2, OR 3 BYTE RBA
FFKEY    MVC   PLHKEY+@01(0,RWORK2),PLHKEY(RWORK2) SET KEY TO ALL X'FF'
*                     END;          /* END OF FINISH CA              */
*                   RFY                                            0516
*                    (RWORK1,                                      0516
*                     RWORK2) UNRSTD;/* DROP WORK REGISTERS  @ZA27875*/
*                                                                  0516
@RF00504 DS    0H                                                  0517
*                   /*************************************************/
*                   /*                                               */
*                   /* FINISH WRITING IN OLD CA BEFORE GOING TO THE  */
*                   /* NEW ONE                                       */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0517
*                   GEN(IDASVR14);  /* SAVE RETURN REGISTER          */
         IDASVR14
*                   RBUFC=PLHNBUFC; /* BUFC PTR FOR WRITE            */
         L     RBUFC,PLHNBUFC(,RPLH)                               0518
*I08:                                                              0519
*                   DO;             /* IDACALL(IDAWRBFR)             */
I08      DS    0H                                                  0520
*                     CALL IDAWRBFR;/* EXIT TO IDAWRBFR              */
         L     @15,@CV00042                                        0520
         BALR  @14,@15                                             0520
*                     GEN(BALR @11,0);/* LOAD ADDR OF REENTRY        */
         BALR @11,0
*                     GEN(USING *,@11);/* ESTABLISH ADDRESSING       */
         USING *,@11
*                     GEN(L     @11,=A(@PSTART));/* RELOAD BASE      */
         L     @11,=A(@PSTART)
*                     GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING */
         USING @PSTART,@11
*                   END I08;        /* FORCE OUT WRITES              */
*                   IF RPLERREG^='00'X THEN/* IF ANY ERROR,          */
         CLI   RPLERREG(RRPL),0                                    0526
         BNE   @RT00526                                            0526
*                     GO TO FINDX;  /* TAKE EXIT.                    */
*                   RBUFC=PLHIBUFC; /* RESET SEQ SET BUFC            */
         L     RBUFC,PLHIBUFC(,RPLH)                               0528
*                 END;              /* END NOT DBDC                  */
*               ELSE                /* HERE IF DBDC                  */
*                 GEN(IDASVR14);                                   0530
*                                                                  0530
         B     @RC00502                                            0530
@RF00502 DS    0H                                                  0530
         IDASVR14
*               /*****************************************************/
*               /*                                                   */
*               /* DETERMINE IN WHICH DIRECTION PROCESSING IS DONE   */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0531
*               IF RPLBWD=ON THEN   /* SEE IF BWD                    */
@RC00502 TM    RPLBWD(RRPL),B'00010000'                            0531
         BNO   @RF00531                                            0531
*                 DO;                                              0532
*                   RFY                                            0533
*                    (RWORK1,                                      0533
*                     RWORK2,                                      0533
*                     RWORK3,                                      0533
*                     RWORK4) RSTD; /* GET REGS                      */
*                                                                  0533
*                   /*************************************************/
*                   /*                                               */
*                   /* LOCATE THE KEY OF THE LOWEST RECORD IN THE SEQ*/
*                   /* SET                                           */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0534
*                   IXSHEP=IXSLEP;  /* POINT TO 1ST PHY ENTRY        */
*                                                                  0534
         L     @15,IXSLEP(,RPLH)                                   0534
         ST    @15,IXSHEP(,RPLH)                                   0534
*                   /*************************************************/
*                   /*                                               */
*                   /* SKIP ACROSS SPANNED RECORD ENTRIES UNTIL THE  */
*                   /* ONE CONTAINING THE KEY IS FOUND.              */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0535
*                   DO WHILE IXSHEP->IBFLPF=AMDKEYLN;              0535
         B     @DE00535                                            0535
@DL00535 DS    0H                                                  0536
*                     CALL ADVSS;   /* NEXT ENTRY                    */
         BAL   @14,ADVSS                                           0536
*                   END;            /* END OF S.R. SEG SKIP          */
*                                                                  0537
@DE00535 L     @15,IXSHEP(,RPLH)                                   0537
         L     @10,AMBDSB(,RAMB)                                   0537
         LH    @10,AMDKEYLN(,@10)                                  0537
         SLR   @09,@09                                             0537
         IC    @09,IBFLPF(,@15)                                    0537
         CR    @10,@09                                             0537
         BE    @DL00535                                            0537
*                   /*************************************************/
*                   /*                                               */
*                   /* PAD KEY WITH HEXADECIMAL FF                   */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0538
*                   PLHKEY(ONE)='FF'X;                             0538
         L     @15,PLHKEYPT(,RPLH)                                 0538
         MVI   PLHKEY(@15),X'FF'                                   0538
*                   RWORK1=AMDKEYLN;/* GET KEYLENGTH                 */
         LR    RWORK1,@10                                          0539
*                   IF RWORK1>1 THEN/* IF MORE BYTES                 */
*                                                                  0540
         C     RWORK1,@CF00058                                     0540
         BNH   @RF00540                                            0540
*                     /***********************************************/
*                     /*                                             */
*                     /* MAKE REST OF KEY ALL X'FF'                  */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0541
*                     DO;                                          0541
*                       RWORK1=RWORK1-TWO;/* SET FOR EXECUTE         */
         BCTR  RWORK1,0                                            0542
         BCTR  RWORK1,0                                            0542
*                       RWORK2=ADDR(PLHKEY);/* POINT TO PLHKEY       */
         LR    RWORK2,@15                                          0543
*                       GEN SETS(PLHKEY)(EX    RWORK1,FFKEY);/* MAKE
*                                      KEY FF                        */
         EX    RWORK1,FFKEY
*                     END;          /* END OF KEY SETTING            */
*                   RWORK1=IXSHEP->IBFLPL;/* GET KEYLN               */
@RF00540 L     @15,IXSHEP(,RPLH)                                   0546
         SLR   RWORK1,RWORK1                                       0546
         IC    RWORK1,IBFLPL(,@15)                                 0546
*                   RWORK2=IXSHEP-RWORK1;/* PTR TO KEY               */
         SLR   @15,RWORK1                                          0547
         LR    RWORK2,@15                                          0547
*                   IF RWORK1^=ZERO THEN/* IF ANY KEY ,MOVE IT.      */
*                                                                  0548
         LTR   RWORK1,RWORK1                                       0548
         BZ    @RF00548                                            0548
*                     /***********************************************/
*                     /*                                             */
*                     /* MOVE KEY INTO PLH                           */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0549
*                     PLHKEY(ONE:RWORK1)=RWORK2->KEY(ONE:RWORK1);  0549
         L     @15,PLHKEYPT(,RPLH)                                 0549
         LR    @10,RWORK1                                          0549
         BCTR  @10,0                                               0549
         EX    @10,@SM01171                                        0549
*                   PLHRDEXC=OFF;   /* GET INDEX FOR SHARE           */
@RF00548 NI    PLHRDEXC(RPLH),B'11110111'                          0550
*I09:                                                              0551
*                   DO;             /* IDACALL(IDA019RV)             */
I09      DS    0H                                                  0552
*                     CALL IDA019RV;/* EXIT TO IDA019RV              */
         L     @15,@CV00039                                        0552
         BALR  @14,@15                                             0552
*                     GEN(BALR @11,0);/* LOAD ADDR OF REENTRY        */
         BALR @11,0
*                     GEN(USING *,@11);/* ESTABLISH ADDRESSING       */
         USING *,@11
*                     GEN(L     @11,=A(@PSTART));/* RELOAD BASE      */
         L     @11,=A(@PSTART)
*                     GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING */
         USING @PSTART,@11
*                   END I09;        /* BACK UP SS                    */
*                   RFY                                            0558
*                     R15 RSTD;     /* GET RETURN CODE               */
*                   IF RPLREQ=RPLPUT×/* IF PUT OR GET UPDATE         */
*                       RPLUPD=ON THEN/* MUST HAVE EXCL CNTL         */
         CLI   RPLREQ(RRPL),1                                      0559
         BE    @RT00559                                            0559
         TM    RPLUPD(RRPL),B'00000010'                            0559
         BNO   @RF00559                                            0559
@RT00559 DS    0H                                                  0560
*                     PLHRDEXC=ON;  /* OF THE DATA.                  */
         OI    PLHRDEXC(RPLH),B'00001000'                          0560
*                   RAMB=AMBLDTA;   /* PTR TO DATA                   */
*                                                                  0561
@RF00559 L     @10,RPLDACB(,RRPL)                                  0561
         L     @10,ACBAMBL(,@10)                                   0561
         L     RAMB,AMBLDTA(,@10)                                  0561
*                   /*************************************************/
*                   /*                                               */
*                   /* CHK FOR ERROR STATUS                          */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0562
*                   IF R15=RPLEODER×RPLERREG^='00'X THEN           0562
         C     R15,@CF00243                                        0562
         BE    @RT00562                                            0562
         CLI   RPLERREG(RRPL),0                                    0562
         BE    @RF00562                                            0562
@RT00562 DS    0H                                                  0563
*                     DO;                                          0563
*                       GEN(IDARST14);/* RESTORE 14                  */
         IDARST14
*                       R15=RPLEODER;/* SET RETURN CODE      @ZA27875*/
         LA    R15,4                                               0565
*                       GOTO FRBAEXIT;/* EXIT FRBA           @ZA27875*/
         B     FRBAEXIT                                            0566
*                     END;          /* END OF ERROR                  */
*                   RFY                                            0568
*                     R15 UNRSTD;   /* DROP REGISTER 15              */
@RF00562 DS    0H                                                  0569
*                   RBUFC=PLHIBUFC; /* RESET SEQ SET BUFC            */
         L     RBUFC,PLHIBUFC(,RPLH)                               0569
*                 END;              /* END OF BWD                    */
*                                                                  0570
*               /*****************************************************/
*               /*                                                   */
*               /* HERE IF FORWARD MODE                              */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0571
*               ELSE                                               0571
*                 DO;                                              0571
*                                                                  0571
         B     @RC00531                                            0571
@RF00531 DS    0H                                                  0572
*                   /*************************************************/
*                   /*                                               */
*                   /* IF THE LAST ENTRY IS A DUMMY, INDICATE        */
*                   /* END-OF-DATA. OTHERWISE, GO TO THE NEXT        */
*                   /* SEQUENCE SET.                                 */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0572
*                   RFY                                            0572
*                     R15 RSTD;     /*                               */
*                   R15=RBUFC->BUFCBAD;/* POINT TO BUFFER            */
         L     R15,BUFCBAD(,RBUFC)                                 0573
*                   R15=R15+R15->IXHLEO;/* THEN LAST ENTRY           */
         AH    R15,IXHLEO(,R15)                                    0574
*                   IF R15->IBFLPF=ZERO&/* IF IT IS A                */
*                       R15->IBFLPL=ZERO/* DUMMY THEN                */
*                     THEN          /* SET EOD.                      */
         CLI   IBFLPF(R15),0                                       0575
         BNE   @RF00575                                            0575
         CLI   IBFLPL(R15),0                                       0575
         BNE   @RF00575                                            0575
*                     DO;                                          0576
*                       GEN(IDARST14);/* RESTORE RETURN REGISTER     */
         IDARST14
*                       R15=RPLEODER;/* SET RETURN CODE      @ZA27875*/
         LA    R15,4                                               0578
*                       GOTO FRBAEXIT;/* EXIT FRBA           @ZA27875*/
         B     FRBAEXIT                                            0579
*                     END;          /* END OF EOD CODE               */
*                   PLHSSRBA=IXHHP; /* SET NEW SS RBA                */
@RF00575 L     @10,BUFCBAD(,RBUFC)                                 0581
         L     @10,IXHHP(,@10)                                     0581
         ST    @10,PLHSSRBA(,RPLH)                                 0581
*                   RFY                                            0582
*                     R15 UNRSTD;   /*                               */
*                   RAMB=AMBLIX;    /* INDICATE INDEX READ           */
*                                                                  0583
         L     @15,RPLDACB(,RRPL)                                  0583
         L     @15,ACBAMBL(,@15)                                   0583
         L     RAMB,AMBLIX(,@15)                                   0583
*                   /*************************************************/
*                   /*                                               */
*                   /* IF DBDC, CALL IDAGRB RATHER THAN READBFR TO   */
*                   /* READ SEQ SET                                  */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0584
*                   IF AMBLSR=ON×   /* LOCAL SHR OR -                */
*                       AMBGSR=ON THEN/* GLOBAL SHR?                 */
         TM    AMBLSR(RAMB),B'01100000'                            0584
         BZ    @RF00584                                            0584
*                     DO;           /* YES, SET FOR GRB              */
*                       PLHRDEXC=OFF;/* GET INDEX FOR SHARE          */
         NI    PLHRDEXC(RPLH),B'11110111'                          0586
*                       RPARM1=PLHSSRBA;/* RBA                       */
         LR    RPARM1,@10                                          0587
*I10:                                                              0588
*                       DO;         /* IDACALL(IDAGRB)               */
I10      DS    0H                                                  0589
*                         CALL IDAGRB;/* EXIT TO IDAGRB              */
         L     @15,@CV00041                                        0589
         BALR  @14,@15                                             0589
*                         GEN(BALR @11,0);/* LOAD ADDR OF REENTRY    */
         BALR @11,0
*                         GEN(USING *,@11);/* ESTABLISH ADDRESSING   */
         USING *,@11
*                         GEN(L     @11,=A(@PSTART));/* RELOAD BASE  */
         L     @11,=A(@PSTART)
*                         GEN(USING @PSTART,@11);/* ESTABLISH      0593
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                       END I10;    /* GET RBA                       */
*                       IF RPLREQ=RPLPUT×/* IF PUT OR GET UPDATE     */
*                           RPLUPD=ON THEN/* MUST HAVE EXCL CNTL     */
         CLI   RPLREQ(RRPL),1                                      0595
         BE    @RT00595                                            0595
         TM    RPLUPD(RRPL),B'00000010'                            0595
         BNO   @RF00595                                            0595
@RT00595 DS    0H                                                  0596
*                         PLHRDEXC=ON;/* OF THE DATA.                */
         OI    PLHRDEXC(RPLH),B'00001000'                          0596
*                     END;          /* END DBDC SEQ SET RD           */
*                   ELSE            /* NO, CALL READBFR              */
*                     DO;                                          0598
*                                                                  0598
         B     @RC00584                                            0598
@RF00584 DS    0H                                                  0599
*                       /*********************************************/
*                       /*                                           */
*                       /* POINT TO THE NEXT SEQUENCE SET RBA, CALL  */
*                       /* I/O MANAGER TO READ IT, AND CALL IDAWAIT  */
*                       /* TO SYNCHRONIZE THE I/O.                   */
*                       /*                                           */
*                       /*********************************************/
*                                                                  0599
*                       BUFCRRD=ON; /* SET READ REQUIRED             */
         OI    BUFCRRD(RBUFC),B'00100000'                          0599
*                       BUFCDDDD=PLHSSRBA;/* SET NEW SEQ SET RBA     */
         L     @15,PLHSSRBA(,RPLH)                                 0600
         ST    @15,BUFCDDDD(,RBUFC)                                0600
*                       RFY                                        0601
*                        (RWORK1,                                  0601
*                         RWORK2,                                  0601
*                         RWORK3) UNRSTD;/* DROP REGISTERS           */
*                       RFY                                        0602
*                         R14 UNRSTD;/* RELEASE RETURN REG           */
*                       RPARM1=PLHIIOB;/* POINT TO INDEX IOB         */
         L     RPARM1,PLHIIOB(,RPLH)                               0603
*                       CALL READBFR;/* READ NEXT SEQUENCE SET       */
         BAL   @14,READBFR                                         0604
*                     END;          /* END NON DBDC SEQ SET RD       */
*                   IF RPLERREG^='00'X THEN/* IF AN ERROR OCCURRED,  */
@RC00584 CLI   RPLERREG(RRPL),0                                    0606
         BNE   @RT00606                                            0606
*                     GO TO FINDX;  /* RETURN TO CALLER              */
*                   RAMB=AMBLDTA;   /* PTR TO DATA                   */
         L     @10,RPLDACB(,RRPL)                                  0608
         L     @10,ACBAMBL(,@10)                                   0608
         L     RAMB,AMBLDTA(,@10)                                  0608
*                 END;              /* END OF FWD                    */
*                                                                  0609
*               /*****************************************************/
*               /*                                                   */
*               /* SET INDEX POINTERS IN THE PLACEHOLDER TO THE FIRST*/
*               /* ENTRY                                             */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0610
*               IXSHEP=BUFCBAD+IXHLL-IXHFLPLN;/* PTR TO 1ST ENTRY    */
@RC00531 L     @10,BUFCBAD(,RBUFC)                                 0610
         LH    @09,IXHLL(,@10)                                     0610
         N     @09,@CF01170                                        0610
         ALR   @09,@10                                             0610
         SLR   @05,@05                                             0610
         IC    @05,IXHFLPLN(,@10)                                  0610
         SLR   @09,@05                                             0610
         ST    @09,IXSHEP(,RPLH)                                   0610
*               IXSLEP=IXSHEP;      /* FIRST IS ALSO LOW             */
         ST    @09,IXSLEP(,RPLH)                                   0611
*               IXSSEP=IXHSEO+BUFCBAD;/* 1ST SECTION ENTRY PTR       */
         LH    @09,IXHSEO(,@10)                                    0612
         ALR   @09,@10                                             0612
         ST    @09,IXSSEP(,RPLH)                                   0612
*               IF RPLBWD=ON THEN   /* IF BWD,                       */
*                                                                  0613
         TM    RPLBWD(RRPL),B'00010000'                            0613
         BNO   @RF00613                                            0613
*                 /***************************************************/
*                 /*                                                 */
*                 /* LOCATE THE LEFT-MOST ENTRY IN THE SEQUENCE SET. */
*                 /* IF LAST ENTRY IS A COMPLEX ENTRY, POSITION TO   */
*                 /* ITS RIGHT- MOST ELEMENT.                        */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0614
*                 DO;                                              0614
*                   RFY                                            0615
*                    (RWORK1,                                      0615
*                     RWORK2,                                      0615
*                     RWORK3,                                      0615
*                     RWORK4) RSTD; /* GET REGS                      */
*                                                                  0615
*                   /*************************************************/
*                   /*                                               */
*                   /* LOCATE LAST SECTION                           */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0616
*                   DO WHILE IXSSEP^=IXHLEO+BUFCBAD;               0616
         B     @DE00616                                            0616
@DL00616 DS    0H                                                  0617
*                     IXSHEP=IXSSEP;/* MAKE CURR ENTRY A SECTION     */
         L     @10,IXSSEP(,RPLH)                                   0617
         ST    @10,IXSHEP(,RPLH)                                   0617
*                     CALL ADVSS;   /* ADVANCE TO NEW SECTION        */
         BAL   @14,ADVSS                                           0618
*                   END;            /* LAST SECTION FOUND            */
@DE00616 L     @10,IXSSEP(,RPLH)                                   0619
         L     @09,BUFCBAD(,RBUFC)                                 0619
         LH    @00,IXHLEO(,@09)                                    0619
         ALR   @00,@09                                             0619
         CR    @10,@00                                             0619
         BNE   @DL00616                                            0619
*                   IXSHEP=IXSSEP;  /* SET CURRENT ENTRY PTR         */
         ST    @10,IXSHEP(,RPLH)                                   0620
*                   CALL FIRSTSEG;  /* POSITION TO 1ST SEGMENT       */
         BAL   @14,FIRSTSEG                                        0621
*                   RFY                                            0622
*                    (RWORK2,                                      0622
*                     RWORK4) UNRSTD;/* DROP REGS                    */
*                 END;              /* END OF BWD CODE               */
*               GEN(IDARST14);      /* RESTORE RETURN                */
@RF00613 DS    0H                                                  0624
         IDARST14
*               RFY                                                0625
*                 R14 RSTD;         /* RESTRICT REGISTER             */
*               RFY                                                0626
*                 R15 RSTD;         /* GET RETURN REGISTER           */
*               R15=ZERO;           /* INDICATE NO EXCEPTION         */
         SLR   R15,R15                                             0627
*             END;                  /* END OF CODE FOR SS END        */
*                                                                  0628
*           /*********************************************************/
*           /*                                                       */
*           /* HERE IF NOT THE END OF THE SEQUENCE SET RECORD        */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0629
*           ELSE                                                   0629
*             IF PLHRAHD=ON&        /* IF READ AHEAD                 */
*                 (DIWCAS=OFF×      /* FORCED BY                     */
*                 DIWPLH^=RPLH)&    /* DIR RCD LOC                   */
*                 RWORK3->IBFLPF=AMDKEYLN&/* AND IF                  */
*                 IXSHEP->IBFLPF^=AMDKEYLN THEN/* LEAVING SPANNED    */
         B     @RC00500                                            0629
@RF00500 TM    PLHRAHD(RPLH),B'01000000'                           0629
         BNO   @RF00629                                            0629
         L     @10,AMBIWA(,RAMB)                                   0629
         TM    DIWCAS(@10),B'10000000'                             0629
         BZ    @GL00015                                            0629
         C     RPLH,DIWPLH(,@10)                                   0629
         BE    @RF00629                                            0629
@GL00015 L     @10,AMBDSB(,RAMB)                                   0629
         LH    @10,AMDKEYLN(,@10)                                  0629
         SLR   @06,@06                                             0629
         IC    @06,IBFLPF(,RWORK3)                                 0629
         CR    @10,@06                                             0629
         BNE   @RF00629                                            0629
         L     @06,IXSHEP(,RPLH)                                   0629
         SLR   @00,@00                                             0629
         IC    @00,IBFLPF(,@06)                                    0629
         CR    @10,@00                                             0629
         BE    @RF00629                                            0629
*               R15=SIX;            /* RCD, STOP RD                  */
         LA    R15,6                                               0630
*             ELSE                  /* SET NORMAL RETURN             */
*               R15=ZERO;                                          0631
         B     @RC00629                                            0631
@RF00629 SLR   R15,R15                                             0631
*         END;                      /* END OF NOT WITHIN S.R.        */
*                                                                  0632
@RC00629 DS    0H                                                  0632
@RC00500 DS    0H                                                  0633
*       /*************************************************************/
*       /*                                                           */
*       /* GET THE DATA RBA FROM THE CURRENT SEQUENCE SET ENTRY      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0633
*       RPARM1=IXHPTLS;             /* PICK UP RBA PTR MASK          */
@RC00424 L     @10,BUFCBAD(,RBUFC)                                 0633
         SLR   RPARM1,RPARM1                                       0633
         IC    RPARM1,IXHPTLS(,@10)                                0633
*       RFY                                                        0634
*         RWORK1 RSTD;              /* GET WORK REGISTER             */
*       RESPECIFY                                                  0635
*         IDAIBFLP BASED(IXSHEP);   /* DEFINE ENTRY BASE             */
*       RWORK1=ADDR(IBFLP3);        /* GET ADDR OF POINTER           */
         L     RWORK1,IXSHEP(,RPLH)                                0636
         LA    RWORK1,IBFLP3(,RWORK1)                              0636
*       GEN(EX    RPARM1,ICMINS);   /* GET RBA INCREMENT             */
         EX    RPARM1,ICMINS
*       RPARM1=AMDCINV*RPARM1+IXHBRBA;/* GET RBA OF DATA CINV        */
         L     @10,AMBDSB(,RAMB)                                   0638
         LR    @09,RPARM1                                          0638
         M     @08,AMDCINV(,@10)                                   0638
         L     @10,BUFCBAD(,RBUFC)                                 0638
         AL    @09,IXHBRBA(,@10)                                   0638
         LR    RPARM1,@09                                          0638
*       RESPECIFY                                                  0639
*         RWORK3 UNRESTRICTED;      /* DROP WORK REGISTER            */
*       IF RPARM1<PLHNRBA THEN      /* IF RBA OUT OF SEQUENCE        */
         CL    RPARM1,PLHNRBA(,RPLH)                               0640
         BNL   @RF00640                                            0640
*         PLHRVRS=ON;               /* SET REORDER FLAG.             */
         OI    PLHRVRS(RPLH),B'00001000'                           0641
*       PLHNRBA=RPARM1;             /* SAVE RBA FOR NEXT TEST.       */
@RF00640 ST    RPARM1,PLHNRBA(,RPLH)                               0642
*FRBAEXIT:                          /* EXIT FROM FIND RBA    @ZA27875*/
*       RETURN CODE(R15);           /* MAKE NORMAL RETURN            */
FRBAEXIT BR    @14                                                 0643
*     END;                          /* END OF KEYED ACCESS           */
*                                                                  0645
*   /*****************************************************************/
*   /*                                                               */
*   /* CHAINBFR - ADD A BUFFER TO PLH CHAIN                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0645
*/* FUNCTION = ADD A BUFFER TO A PLH CHAIN OF BUFFERS                */
*/* INPUT = RBUFC CONTAINS THE ADDRESS OF THE BUFC TO BE ADDED       */
*/*         TO THE BUFC CHAIN.  OTHER REGISTERS ARE STANDARD.        */
*/* OUTPUT = RBUFC AND STANDARD REGISTERS ARE UNCHANGED.  THE BUFC   */
*/*          IS IN THE I/O CHAIN AS AN EMPTY BUFC.                   */
*                                                                  0645
*CHAINBFR:                                                         0645
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0645
CHAINBFR DS    0H                                                  0646
*   RFY                                                            0646
*    (R14,                                                         0646
*     RWORK1,                                                      0646
*     RWORK2) RSTD;                 /* GET REGS                      */
*   BUFCPLH=RPLH;                   /* STORE PLH PTR                 */
*                                                                  0647
         ST    RPLH,BUFCPLH(,RBUFC)                                0647
*   /*****************************************************************/
*   /*                                                               */
*   /* PUT BUFC IN THE PLACEHOLDER BUFC CHAIN AND RESET THE          */
*   /* PLACEHOLDER BUFFER COUNTS.                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0648
*   RWORK1=PLHDBUFC;                /* GET ON BFR CH                 */
*                                                                  0648
         L     RWORK1,PLHDBUFC(,RPLH)                              0648
*   /*****************************************************************/
*   /*                                                               */
*   /* FIND THE BUFC PRIOR TO PLHNBUFC                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0649
*   DO WHILE RWORK1->BUFCNXT2^=PLHNBUFC;                           0649
         B     @DE00649                                            0649
@DL00649 DS    0H                                                  0650
*     RWORK1=RWORK1->BUFCNXT2;      /* GET NEXT BUFC                 */
         L     @10,BUFCNXT2-1(,RWORK1)                             0650
         LA    @10,0(,@10)                                         0650
         LR    RWORK1,@10                                          0650
*   END;                            /* END OF SCH                    */
*                                                                  0651
@DE00649 L     @10,PLHNBUFC(,RPLH)                                 0651
         L     @07,BUFCNXT2-1(,RWORK1)                             0651
         LA    @07,0(,@07)                                         0651
         CR    @10,@07                                             0651
         BNE   @DL00649                                            0651
*   /*****************************************************************/
*   /*                                                               */
*   /* POINT THE NEW BUFFER TO THE OLD FIRST EMPTY BUFFER.           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0652
*   BUFCNXT1=RWORK1->BUFCNXT1;      /*                       @ZA08319*/
         L     @07,BUFCNXT1(,RWORK1)                               0652
         ST    @07,BUFCNXT1(,RBUFC)                                0652
*   BUFCNXT2=PLHNBUFC;                                             0653
*                                                                  0653
         STCM  @10,7,BUFCNXT2(RBUFC)                               0653
*   /*****************************************************************/
*   /*                                                               */
*   /* POINT THE PRIOR BUFC TO THE NEWLY ADDED BUFC.                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0654
*   RWORK1->BUFCNXT1=RBUFC;                                        0654
         ST    RBUFC,BUFCNXT1(,RWORK1)                             0654
*   RWORK1->BUFCNXT2=RBUFC;                                        0655
*                                                                  0655
         STCM  RBUFC,7,BUFCNXT2(RWORK1)                            0655
*   /*****************************************************************/
*   /*                                                               */
*   /* SET A NEW FIRST EMPTY BUFC.                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0656
*   PLHNBUFC=RBUFC;                                                0656
         ST    RBUFC,PLHNBUFC(,RPLH)                               0656
*   PLHFRCNT=PLHFRCNT+ONE;          /* 1 MORE FREE BFR               */
         LA    @10,1                                               0657
         SLR   @07,@07                                             0657
         IC    @07,PLHFRCNT(,RPLH)                                 0657
         ALR   @07,@10                                             0657
         STC   @07,PLHFRCNT(,RPLH)                                 0657
*   PLHBFRNO=PLHBFRNO+ONE;          /* 1 MORE PLH BFR                */
         SLR   @07,@07                                             0658
         IC    @07,PLHBFRNO(,RPLH)                                 0658
         ALR   @10,@07                                             0658
         STC   @10,PLHBFRNO(,RPLH)                                 0658
*   END CHAINBFR;                   /* END OF CHAINING               */
@EL00004 DS    0H                                                  0659
@EF00004 DS    0H                                                  0659
@ER00004 BR    @14                                                 0659
*                                                                  0660
*   /*****************************************************************/
*   /*                                                               */
*   /* ADVSS - ADVANCE SEQUENCE SET PTR                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0660
*/* FUNCTION = ADVANCE TO NEXT SEQUENCE SET POINTER                  */
*/* INPUT = IXSHEP POINTS TO CURRENT SEQ SET ENTRY.  IXSLEP AND      */
*/*         IXSSEP REFLECT THE LOW AND HIGH ENTRIES OF THE SECTION.  */
*/* OUTPUT = IXSHEP POINTS TO NEXT SEQ SET ENTRY.  RWORK2 AND RWORK3 */
*/*          ARE UNCHANGED.  OTHER REGISTERS ARE STANDARD.   IXSSEP  */
*/*          AND IXSLEP ARE UPDATED AS NECESSARY.                    */
*                                                                  0660
*ADVSS:                                                            0660
*   PROCEDURE OPTIONS(DONTSAVE,NOSAVEAREA);                        0660
ADVSS    DS    0H                                                  0661
*   RFY                                                            0661
*    (RWORK1,                                                      0661
*     RWORK2,                                                      0661
*     RWORK3,                                                      0661
*     RWORK4,                                                      0661
*     R14) RSTD;                    /* GET REGS                      */
*   RWORK1=IXSHEP->IBFLPL;          /* CURR ENTRY LEN                */
         L     @10,IXSHEP(,RPLH)                                   0662
         SLR   RWORK1,RWORK1                                       0662
         IC    RWORK1,IBFLPL(,@10)                                 0662
*   IF IXSHEP=IXSSEP                /* SEE IF THIS ENTRY IS          */
*     THEN                          /* SECTION ENTRY AND IF          */
         L     @09,IXSSEP(,RPLH)                                   0663
         CR    @10,@09                                             0663
         BNE   @RF00663                                            0663
*     DO;                           /* SO, ACT ACCORDINGLY.          */
*       IXSHEP=IXSHEP-IXHFLPLN-RWORK1/* NEXT ENTRY                   */
*           -LENGTH(IXSELL);        /* POINTER SET UP                */
         L     @09,BUFCBAD(,RBUFC)                                 0665
         SLR   @00,@00                                             0665
         IC    @00,IXHFLPLN(,@09)                                  0665
         SLR   @10,@00                                             0665
         SLR   @10,RWORK1                                          0665
         BCTR  @10,0                                               0665
         BCTR  @10,0                                               0665
         ST    @10,IXSHEP(,RPLH)                                   0665
*       RWORK4=IXSHEP+IXHFLPLN;     /* POINT TO SECTION ENTRY        */
         ALR   @00,@10                                             0666
         LR    RWORK4,@00                                          0666
*       IXSSEP=IXSSEP-RWORK4->IXSELL;/* NEW SECTION ENTRY PTR        */
         L     @09,IXSSEP(,RPLH)                                   0667
         SLR   @00,@00                                             0667
         ICM   @00,3,IXSELL(RWORK4)                                0667
         SLR   @09,@00                                             0667
         ST    @09,IXSSEP(,RPLH)                                   0667
*       IXSLEP=IXSHEP;              /* SET NEW LOW ENTRY PTR         */
         ST    @10,IXSLEP(,RPLH)                                   0668
*     END;                          /* END OF SECTION ENTRY          */
*   ELSE                            /* IF NOT SECTION ENTRY,         */
*     IXSHEP=IXSHEP-IXHFLPLN-RWORK1;/* JUST RESET CURR.              */
         B     @RC00663                                            0670
@RF00663 L     @10,BUFCBAD(,RBUFC)                                 0670
         L     @09,IXSHEP(,RPLH)                                   0670
         SLR   @00,@00                                             0670
         IC    @00,IXHFLPLN(,@10)                                  0670
         SLR   @09,@00                                             0670
         SLR   @09,RWORK1                                          0670
         ST    @09,IXSHEP(,RPLH)                                   0670
*   RFY                                                            0671
*     RWORK4 UNRSTD;                /* DROP REGISTER                 */
*   END ADVSS;                      /* END OF SS ADV                 */
@EL00005 DS    0H                                                  0672
@EF00005 DS    0H                                                  0672
@ER00005 BR    @14                                                 0672
*                                                                  0673
*   /*****************************************************************/
*   /*                                                               */
*   /* BACKUP - BACKUP ONE SEQUENCE SET ENTRY                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0673
*/* FUNCTION = BACKUP ONE SEQUENCE SET ENTRY.                        */
*/* INPUT = IXSHEP, IXSLEP, AND IXSSEP REFLECT THE CURRENT POSITION. */
*/*         RBUFC POINTS TO THE SEQUENCE SET BUFC.                   */
*/* OUTPUT = IXSHEP, IXSLEP AND IXSSEP ARE SET TO REFLECT THE BACKED */
*/*         UP POSITION.  IXSHEP = ZERO IF END OF SEQUENCE SET IS    */
*/*         REACHED.  RWORK3 IS UNCHANGED.                           */
*                                                                  0673
*BACKUP:                                                           0673
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             0673
BACKUP   DS    0H                                                  0674
*   RFY                                                            0674
*    (RWORK1,                                                      0674
*     RWORK2,                                                      0674
*     RWORK3,                                                      0674
*     RWORK4,                                                      0674
*     RWORK5,                                                      0674
*     R14) RSTD;                    /* GET REGS                      */
*   RWORK1=IXSHEP;                  /* SAVE CURRENT ENTRY            */
         L     @10,IXSHEP(,RPLH)                                   0675
         LR    RWORK1,@10                                          0675
*   IF IXSHEP=IXSLEP THEN           /* IF CURRENT IS LAST IN         */
         L     @00,IXSLEP(,RPLH)                                   0676
         CR    @10,@00                                             0676
         BNE   @RF00676                                            0676
*     DO;                           /* SECTION LOCATE N-1     SECTION*/
*       RWORK4=IXHSEO+BUFCBAD;      /* 1ST SECTION ENTRY             */
         L     @10,BUFCBAD(,RBUFC)                                 0678
         LH    RWORK4,IXHSEO(,@10)                                 0678
         ALR   RWORK4,@10                                          0678
*       RWORK5=BUFCBAD+IXHLL-IXHFLPLN;/* FIRST ENTRY                 */
         LH    RWORK5,IXHLL(,@10)                                  0679
         N     RWORK5,@CF01170                                     0679
         ALR   RWORK5,@10                                          0679
         SLR   @00,@00                                             0679
         IC    @00,IXHFLPLN(,@10)                                  0679
         SLR   RWORK5,@00                                          0679
*       IF RWORK5=IXSLEP THEN       /* TEST FOR SEQ SET END          */
         L     @10,IXSLEP(,RPLH)                                   0680
         CR    RWORK5,@10                                          0680
         BNE   @RF00680                                            0680
*         DO;                                                      0681
*           IXSHEP=ZERO;            /* SET NO POINTER                */
         SLR   @10,@10                                             0682
         ST    @10,IXSHEP(,RPLH)                                   0682
*           RETURN;                 /* RETURN TO CALLER              */
@EL00006 DS    0H                                                  0683
@EF00006 DS    0H                                                  0683
@ER00006 BR    @14                                                 0683
*         END;                      /* END OF SEQUENCE SET           */
*       DO WHILE RWORK4>RWORK1;     /* LOCATE PRIOR SECTION          */
@RF00680 B     @DE00685                                            0685
@DL00685 DS    0H                                                  0686
*         IXSHEP=RWORK4;            /* UPDATE CURRENT POINTER        */
         ST    RWORK4,IXSHEP(,RPLH)                                0686
*         IXSLEP=RWORK5;            /* NEW LOW ENTRY IN SECTION      */
         ST    RWORK5,IXSLEP(,RPLH)                                0687
*         RWORK2=IXSHEP->IBFLPL;    /* CURRENT ENTRY LENGTH          */
         L     @10,IXSHEP(,RPLH)                                   0688
         SLR   RWORK2,RWORK2                                       0688
         IC    RWORK2,IBFLPL(,@10)                                 0688
*         RWORK2=IXSHEP-RWORK2-LENGTH(IXSELL);/* POINT TO LL         */
         SLR   @10,RWORK2                                          0689
         BCTR  @10,0                                               0689
         BCTR  @10,0                                               0689
         LR    RWORK2,@10                                          0689
*         RWORK4=RWORK4-RWORK2->IXSELL;/* NEW SECTION ENTRY POINTER  */
         SLR   @10,@10                                             0690
         ICM   @10,3,IXSELL(RWORK2)                                0690
         SLR   RWORK4,@10                                          0690
*         RWORK5=RWORK2-IXHFLPLN;   /* NEW LOW ENTRY POINTER         */
         L     @10,BUFCBAD(,RBUFC)                                 0691
         LR    RWORK5,RWORK2                                       0691
         SLR   @00,@00                                             0691
         IC    @00,IXHFLPLN(,@10)                                  0691
         SLR   RWORK5,@00                                          0691
*       END;                        /* END OF LOCATING PRIOR SECT    */
@DE00685 CR    RWORK4,RWORK1                                       0692
         BH    @DL00685                                            0692
*       IXSSEP=IXSHEP;              /* SET NEW SECTION ENTRY         */
         L     @10,IXSHEP(,RPLH)                                   0693
         ST    @10,IXSSEP(,RPLH)                                   0693
*     END;                          /* END OF LAST IN SECTION        */
*   ELSE                            /* MORE ENTRIES IN SECTION       */
*     DO;                                                          0695
         B     @RC00676                                            0695
@RF00676 DS    0H                                                  0696
*       RFY                                                        0696
*        (RWORK4,                                                  0696
*         RWORK5) UNRSTD;           /* RELEASE REGISTERS             */
*       RWORK2=IXSLEP;              /* POINT TO LOW ENTRY            */
         L     RWORK2,IXSLEP(,RPLH)                                0697
*       DO WHILE RWORK2>RWORK1;     /* SEARCH UNTIL PRIOR FOUND      */
         B     @DE00698                                            0698
@DL00698 DS    0H                                                  0699
*         IXSHEP=RWORK2;            /* SET NEW CURRENT ENTRY         */
         ST    RWORK2,IXSHEP(,RPLH)                                0699
*         RWORK2=IXSHEP->IBFLPL;    /* GET LENGTH OF KEY             */
         L     @10,IXSHEP(,RPLH)                                   0700
         SLR   RWORK2,RWORK2                                       0700
         IC    RWORK2,IBFLPL(,@10)                                 0700
*         RWORK2=IXSHEP-IXHFLPLN-RWORK2;/* SET POINTER TO NEXT       */
         L     @09,BUFCBAD(,RBUFC)                                 0701
         SLR   @00,@00                                             0701
         IC    @00,IXHFLPLN(,@09)                                  0701
         SLR   @10,@00                                             0701
         SLR   @10,RWORK2                                          0701
         LR    RWORK2,@10                                          0701
*       END;                        /* END OF PRIOR ENTRY SEARCH     */
@DE00698 CLR   RWORK2,RWORK1                                       0702
         BH    @DL00698                                            0702
*     END;                          /* END--MORE ENTRIES IN SECT     */
*   END BACKUP;                     /* END OF BACKUP ROUTINE         */
         B     @EL00006                                            0704
*                                                                  0705
*   /*****************************************************************/
*   /*                                                               */
*   /* FIRSTSEG - POSITION TO FIRST SEG IF SPANNED RECORD            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0705
*/* FUNCTION = POSITION TO THE FIRST SEGMENT IF THE RCD IS SPANNED   */
*/* INPUT = IXSHEP, IXSSEP, AND IXSLEP ARE SET APPROPRIATELY.  RBUFC */
*/*         POINTS TO THE SEQUENCE SET BUFC.                         */
*/* OUTPUT = IXSLEP AND IXSSEP ARE UNCHANGED.  IXSHEP IS SET TO THE  */
*/*          FIRST SEGMENT OF THE SPANNED RECORD OR LEFT AT ITS      */
*/*          ORIGINAL VALUE IF THE RECORD WAS NOT SPANNED.           */
*                                                                  0705
*FIRSTSEG:                                                         0705
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             0705
FIRSTSEG DS    0H                                                  0706
*   RFY                                                            0706
*    (RWORK1,                                                      0706
*     RWORK2,                                                      0706
*     RWORK3,                                                      0706
*     R14) RSTD;                    /* GET REGS                      */
*   PLHRBUFC=R14;                   /* SAVE RETURN REGISTER          */
         ST    R14,PLHRBUFC(,RPLH)                                 0707
*   IF IXSHEP^=ZERO THEN            /* IF AN ENTRY FOUND,            */
         L     @10,IXSHEP(,RPLH)                                   0708
         LTR   @10,@10                                             0708
         BZ    @RF00708                                            0708
*     DO;                           /* RESET POSITION IF SPANNED     */
*       CALL BACKUP;                /* POINT TO PRIOR ENTRY          */
         BAL   @14,BACKUP                                          0710
*       IF IXSHEP^=ZERO THEN        /* IF PRIOR EXISTS AND IT IS     */
*                                                                  0711
         L     @10,IXSHEP(,RPLH)                                   0711
         LTR   @10,@10                                             0711
         BZ    @RF00711                                            0711
*         /***********************************************************/
*         /*                                                         */
*         /* A SPANNED RECORD, SKIP TO THE FIRST SEGMENT.            */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0712
*         DO WHILE(IXSHEP^=ZERO&IXSHEP->IBFLPF=AMDKEYLN);          0712
         B     @DE00712                                            0712
@DL00712 DS    0H                                                  0713
*           CALL BACKUP;            /* BACK UP ENTRIES UNTIL         */
         BAL   @14,BACKUP                                          0713
*         END;                      /* END OF SEQ SET OR NEXT RCD    */
@DE00712 L     @10,IXSHEP(,RPLH)                                   0714
         LTR   @10,@10                                             0714
         BZ    @DC00712                                            0714
         L     @09,AMBDSB(,RAMB)                                   0714
         SLR   @00,@00                                             0714
         IC    @00,IBFLPF(,@10)                                    0714
         CH    @00,AMDKEYLN(,@09)                                  0714
         BE    @DL00712                                            0714
@DC00712 DS    0H                                                  0715
*       IF IXSHEP=ZERO THEN         /* IF END OF SEQ SET             */
@RF00711 L     @10,IXSHEP(,RPLH)                                   0715
         LTR   @10,@10                                             0715
         BNZ   @RF00715                                            0715
*         IXSHEP=IXSLEP;            /* POINT TO 1ST ENTRY            */
         L     @10,IXSLEP(,RPLH)                                   0716
         ST    @10,IXSHEP(,RPLH)                                   0716
*       ELSE                        /* ELSE---                       */
*         CALL ADVSS;               /* ---- POINT BACK TO 1ST SEG    */
         B     @RC00715                                            0717
@RF00715 BAL   @14,ADVSS                                           0717
*     END;                          /* END OF POSITION RESET         */
@RC00715 DS    0H                                                  0719
*   R14=PLHRBUFC;                   /* RESTORE RETURN                */
@RF00708 L     R14,PLHRBUFC(,RPLH)                                 0719
*   END FIRSTSEG;                   /* END OF FIRSTSEG               */
@EL00007 DS    0H                                                  0720
@EF00007 DS    0H                                                  0720
@ER00007 BR    @14                                                 0720
*   GEN(IDAPATCH);                  /* DEFINE A PATCH AREA           */
         IDAPATCH
*   END IDA019RW                    /* END OF BUFFER MANAGER--2      */
*                                                                  0722
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IDACIDF )                                       */
*/*%INCLUDE SYSLIB  (IDARDF  )                                       */
*/*%INCLUDE SYSLIB  (IDAIRD  )                                       */
*/*%INCLUDE SYSLIB  (IDAIXSPL)                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IDADIWA )                                       */
*/*%INCLUDE SYSLIB  (IDAEDB  )                                       */
*/*%INCLUDE SYSLIB  (IDALPMB )                                       */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*                                                                  0722
*       ;                                                          0722
         B     @EL00001                                            0722
@DATA    DS    0H
@SM01171 MVC   PLHKEY(0,@15),KEY(RWORK2)
@DATD    DSECT
         DS    0F
IDA019RW CSECT
         DS    0F
@CF00058 DC    F'1'
@CF00045 DC    F'2'
@CF00243 DC    F'4'
@CF00049 DC    F'8'
@CF00051 DC    F'9'
@CF01170 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
IDA019RW CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00037 DC    V(IDA019R3)
@CV00038 DC    V(IDA019RC)
@CV00039 DC    V(IDA019RV)
@CV00040 DC    V(IDAWAIT)
@CV00041 DC    V(IDAGRB)
@CV00042 DC    V(IDAWRBFR)
         DS    0D
HWORD4   DC    H'4'
@DATD    DSECT
TWELVE   EQU   12                       OFFSET TO REGS
@DATD    DSECT
*                                                          /*@X04SVLC*/
RDFCTNUA EQU   X'40'                    COMPLEX RDF INDICATOR
RDFCTNUX EQU   X'FF'-RDFCTNUA           RESET COMPLEX MASK
RDFREPLA EQU   X'08'                    COUNT RDF INDICATOR
RDFREPLX EQU   X'FF'-RDFREPLA           RESET COUNT MASK
RDFEMPTI EQU   X'04'                    EMPTY RECORD       /*@X04SVLC*/
RDFLEN   EQU   3                        LENGTH OF RDF
RDFLLOFF EQU   1                        OFFSET WITHIN RDF TO LL
RDFSGLR  EQU   X'00'                   MASK FOR SINGLE RECORD RDF
RDFGRP   EQU   RDFCTNUA                 MASK FOR LL RDF OF A GROUP RDF
RDFCNT   EQU   RDFREPLA                 MASK FOR COUNT RDF
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019RW CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RWORK3X  EQU   @07
RRPL     EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
RPARM1   EQU   @12
R14      EQU   @14
R15      EQU   @15
RWORK0   EQU   @00
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
IDACIDF  EQU   0
CIDFLL   EQU   IDACIDF+2
IDARDF   EQU   0
RDFRBYTE EQU   IDARDF
RDFSEG   EQU   RDFRBYTE
IDADATA  EQU   0
IDAKEY   EQU   0
KEY      EQU   IDAKEY
IDAIXH   EQU   0
IXHLL    EQU   IDAIXH
IXHFLPLN EQU   IDAIXH+2
IXHPTLS  EQU   IDAIXH+3
IXHBRBA  EQU   IDAIXH+4
IXHHP    EQU   IDAIXH+8
IXHLEO   EQU   IDAIXH+20
IXHSEO   EQU   IDAIXH+22
IDAIBFLP EQU   0
IBFLPF   EQU   IDAIBFLP
IBFLPL   EQU   IDAIBFLP+1
IBFLP3   EQU   IDAIBFLP+2
IBFLP2   EQU   IBFLP3
IDASELL  EQU   0
IXSELL   EQU   IDASELL
IDAIXK   EQU   0
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDEOD   EQU   ARDTYPE
ARDNPTR  EQU   IDAARDB+4
ARDHRBA  EQU   IDAARDB+12
ARDERBA  EQU   IDAARDB+16
ARDPRF   EQU   IDAARDB+28
IDADIWA  EQU   0
DIWFLG1  EQU   IDADIWA+4
DIWCAS   EQU   DIWFLG1
DIWFLG2  EQU   IDADIWA+5
DIWPLH   EQU   IDADIWA+16
DIWBUFC  EQU   IDADIWA+20
DIWSAVE  EQU   IDADIWA+28
IDAEDBHD EQU   0
EDBLPMBC EQU   IDAEDBHD+4
IDAEDB   EQU   0
EDBFLG1  EQU   IDAEDB+2
IDALPMB  EQU   0
LPMBFLGS EQU   IDALPMB+1
LPMBPTRK EQU   IDALPMB+8
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLREQ   EQU   RPLIDWD+2
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLASY   EQU   RPLOPT1
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLKEY   EQU   RPLOPT2
RPLADR   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRMAX EQU   BUFDRCIX
BUFDRTSB EQU   IDABUFDR+10
BUFDRFLG EQU   IDABUFDR+11
BUFDRREL EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDBUFC EQU   IDABUFDR+12
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCINS  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCDDDD EQU   IDABUFC+8
BUFCBAD  EQU   IDABUFC+20
BUFCNXT1 EQU   IDABUFC+24
BUFCINV  EQU   IDABUFC+28
BUFCNXT2 EQU   IDABUFC+37
BUFCHAIN EQU   IDABUFC+48
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBINFL1 EQU   ACBINFLG
ACBVVIC  EQU   ACBINFL1
ACBINFL2 EQU   ACBINFLG+1
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMB   EQU   0
AMBBUFC  EQU   IDAAMB+8
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBSPEED EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEDB   EQU   IDAAMB+52
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBLSR   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLQ2   EQU   IDAAMBL+31
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLVVIC EQU   AMBLFLG1
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDRRDS  EQU   AMDATTR
AMDNEST  EQU   IDAAMDSB+4
AMDKEYLN EQU   IDAAMDSB+8
AMDCIPCA EQU   IDAAMDSB+12
AMDCINV  EQU   IDAAMDSB+20
AMDLRECL EQU   IDAAMDSB+24
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDPARDB EQU   IDAAMDSB+36
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHASKBF EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHSR    EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHEFLGS EQU   IDAPLH+4
PLHFLG3  EQU   IDAPLH+6
PLHRAHD  EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHAFLGS EQU   IDAPLH+7
PLHRMIN  EQU   IDAPLH+13
PLHFRCNT EQU   IDAPLH+14
PLHBFRNO EQU   IDAPLH+15
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHRSCS  EQU   IDAPLH+43
PLHBUFHD EQU   PLHRSCS
PLHARDB  EQU   IDAPLH+44
PLHDBUFC EQU   IDAPLH+52
PLHNBUFC EQU   IDAPLH+56
PLHDIOB  EQU   IDAPLH+76
PLHIIOB  EQU   PLHDIOB
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHNRBA  EQU   IDAPLH+184
PLHIBUFC EQU   IDAPLH+188
PLHRBUFC EQU   IDAPLH+192
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHKEYPT EQU   IDAPLH+248
PLHTMRPL EQU   IDAPLH+265
PLHEND   EQU   IDAPLH+280
PLHKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
IDAIXSPL EQU   PLHIXSPL
IXSBFLG  EQU   IDAIXSPL+17
IXSHEP   EQU   IDAIXSPL+20
IXSSEP   EQU   IDAIXSPL+24
IXSLEP   EQU   IDAIXSPL+28
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00069 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
IXSPEC   EQU   IDAIXSPL+19
IXSEKON  EQU   IDAIXSPL+18
@NM00002 EQU   IXSBFLG
IXSLELV  EQU   IXSBFLG
IXSSSRH  EQU   IXSBFLG
IXSNOSR  EQU   IDAIXSPL+16
IXSKLEN  EQU   IDAIXSPL+14
IXSILN   EQU   IDAIXSPL+13
IXSTLN   EQU   IDAIXSPL+12
IXSARG   EQU   IDAIXSPL+8
IXSBUFC  EQU   IDAIXSPL+4
IXSSTRBA EQU   IDAIXSPL
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00068 EQU   IDAPLH+266
@NM00067 EQU   PLHTMRPL
PLHTMIOB EQU   PLHTMRPL
PLHTMINX EQU   PLHTMRPL
PLHTMDTA EQU   PLHTMRPL
PLHTMDIW EQU   PLHTMRPL
PLHTMBUF EQU   PLHTMRPL
PLHTERM  EQU   PLHTMRPL
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00066 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00065 EQU   IDAPLH+172
@NM00064 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHAMB   EQU   IDAPLH+108
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHARET  EQU   IDAPLH+80
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHRDFP  EQU   IDAPLH+68
PLHFSP   EQU   IDAPLH+64
PLHRECP  EQU   IDAPLH+60
PLHLRECL EQU   IDAPLH+48
@NM00063 EQU   PLHRSCS
PLHDBPER EQU   PLHRSCS
PLHDSERR EQU   PLHRSCS
PLHASYER EQU   PLHRSCS
@NM00062 EQU   PLHRSCS
PLHINEOV EQU   PLHRSCS
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00061 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00060 EQU   IDAAMDSB+41
@NM00059 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00058 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00057 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00056 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLSDS  EQU   AMBLVVIC
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00055 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00054 EQU   AMBLQ2
AMBLCBIC EQU   AMBLQ2
@NM00053 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00052 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00051 EQU   AMBCSWD1+1
@NM00050 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
@NM00049 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00048 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00047 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00046 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBSDS   EQU   AMBINFL
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00045 EQU   AMBINFL
@NM00044 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00043 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00042 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00041 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00040 EQU   AMBFLG0
AMBSWSP  EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00039 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00038 EQU   ACBINFL2
ACBCBIC  EQU   ACBINFL2
@NM00037 EQU   ACBINFL2
ACBBYPSS EQU   ACBINFL1
ACBSDS   EQU   ACBVVIC
ACBUCRA  EQU   ACBINFL1
ACBSCRA  EQU   ACBINFL1
ACBCAT   EQU   ACBINFL1
ACBIJRQE EQU   ACBINFL1
ACBJEPS  EQU   ACBINFL1
@NM00036 EQU   ACBINFL1
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00035 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00034 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00033 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00032 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00031 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00030 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00029 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00028 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00027 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFXORBA EQU   IDABUFC+44
BUFXIRBA EQU   IDABUFC+40
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCCPA  EQU   IDABUFC+16
BUFCORBA EQU   IDABUFC+12
BUFCAMB  EQU   BUFCPLH
@NM00026 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00025 EQU   IDABUFDR+16
@NM00024 EQU   BUFDRFLG
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00023 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00022 EQU   RPLRBAR+3
@NM00021 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00020 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
@NM00019 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
LPMBSST  EQU   IDALPMB+28
LPMBEXT  EQU   IDALPMB+24
@NM00018 EQU   IDALPMB+22
LPMBLKTR EQU   IDALPMB+20
LPMTPC   EQU   IDALPMB+18
LPMTRKAU EQU   IDALPMB+16
LPMBLKSZ EQU   IDALPMB+12
LPMAUSZ  EQU   IDALPMB+4
LPMBLEN  EQU   IDALPMB+2
@NM00017 EQU   LPMBFLGS
LPMBSSTH EQU   LPMBFLGS
LPMBTOFL EQU   LPMBFLGS
LPMSS    EQU   LPMBFLGS
LPMREPL  EQU   LPMBFLGS
LPMBRPS  EQU   LPMBFLGS
LPMBID   EQU   IDALPMB
EDBTKBAL EQU   IDAEDB+20
EDBHIRBA EQU   IDAEDB+16
EDBLORBA EQU   IDAEDB+12
EDBSTTRK EQU   IDAEDB+8
EDBLPMBA EQU   IDAEDB+4
EDBM     EQU   IDAEDB+3
@NM00016 EQU   EDBFLG1
EDBPSDS  EQU   EDBFLG1
EDBTOFLW EQU   EDBFLG1
EDBLKR   EQU   EDBFLG1
@NM00015 EQU   IDAEDB
EDBLEN   EQU   IDAEDBHD+2
EDBNO    EQU   IDAEDBHD+1
EDBID    EQU   IDAEDBHD
@NM00014 EQU   IDADIWA+92
@NM00013 EQU   IDADIWA+88
@NM00012 EQU   IDADIWA+84
@NM00011 EQU   IDADIWA+80
@NM00010 EQU   IDADIWA+76
@NM00009 EQU   IDADIWA+72
@NM00008 EQU   IDADIWA+68
@NM00007 EQU   IDADIWA+64
@NM00006 EQU   IDADIWA+60
@NM00005 EQU   IDADIWA+56
DIWINRBA EQU   IDADIWA+52
DIWRKCT  EQU   IDADIWA+48
DIWSAVE5 EQU   DIWSAVE+16
DIWSAVE4 EQU   DIWSAVE+12
DIWSAVE3 EQU   DIWSAVE+8
DIWSAVE2 EQU   DIWSAVE+4
DIWSAVE1 EQU   DIWSAVE
DIWSPLTP EQU   IDADIWA+24
DIWHRBA  EQU   IDADIWA+12
DIWLRBA  EQU   IDADIWA+8
@NM00004 EQU   IDADIWA+6
DIWFSPF  EQU   DIWFLG2
DIW1ST   EQU   DIWFLG1
DIWNOT1  EQU   DIWFLG1
DIWSHIFT EQU   DIWFLG1
DIWGSPC  EQU   DIWFLG1
DIWEOKR  EQU   DIWFLG1
DIWPFERR EQU   DIWFLG1
DIWCISPL EQU   DIWFLG1
DIWLEN   EQU   IDADIWA+2
DIWATV   EQU   IDADIWA+1
DIWID    EQU   IDADIWA
ARDKEYS  EQU   IDAARDB+29
@NM00003 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDHKRBA EQU   IDAARDB+8
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
IXKEY    EQU   IDAIXK
IBFLP1   EQU   IBFLP2
IXHFSO   EQU   IDAIXH+18
IXHFLGS  EQU   IDAIXH+17
IXHLV    EQU   IDAIXH+16
IXHXX    EQU   IDAIXH+12
AMDATA   EQU   IDADATA
RDFLL    EQU   IDARDF+1
RDFEMPTY EQU   RDFRBYTE
RDFREPL  EQU   RDFRBYTE
RDF1ST   EQU   RDFSEG
RDFNOT1  EQU   RDFSEG
RDFCTNU  EQU   RDFRBYTE
RDFTYPE  EQU   RDFRBYTE
@NM00001 EQU   CIDFLL
CIDFBUSY EQU   CIDFLL
CIDFOSET EQU   IDACIDF
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00222 EQU   @RC00218
@RC00220 EQU   @RC00218
BUSYHDR  EQU   @EL00001
@RF00263 EQU   @EL00001
@RC00261 EQU   @EL00001
@RF00303 EQU   @EL00003
@RT00402 EQU   FINDX
@RT00418 EQU   ADVNXT
@RT00526 EQU   FINDX
@RF00595 EQU   @RC00584
@RT00606 EQU   FINDX
@RC00663 EQU   @EL00005
@RC00676 EQU   @EL00006
@ENDDATA EQU   *
         END   IDA019RW,(C'PLS1801',0701,78192)
