         TITLE 'IDA019RP--VSAM ENDREQ, JRNAD, AND MISCELLANEOUS ROUTINE*
               ES       '
IDA019RP CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'IDA019RP  78.172'                                 0001
IDATJXIT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00192-IDATJXIT)
         ENTRY IDATJXIT
IDAENDRQ DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00263-IDAENDRQ)
         ENTRY IDAENDRQ
IDAPTCBV DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00477-IDAPTCBV)
         ENTRY IDAPTCBV
IDAPGETM DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00492-IDAPGETM)
         ENTRY IDAPGETM
IDAPFREE DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00529-IDAPFREE)
         ENTRY IDAPFREE
IDAUPXIT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00536-IDAUPXIT)
         ENTRY IDAUPXIT
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
*                                                                  0192
*/* IDATJXIT -- JRNAD ROUTINE INTERFACE                              */
*/* FUNCTION = SAVE REGISTERS, TAKE JRNAD EXIT, RESTORE REGISTERS.   */
*/* INPUT = STANDARD REGISTERS.                                      */
*/* OUTPUT = STANDARD REGISTERS.                                     */
*                                                                  0192
*IDATJXIT:                                                         0192
*   ENTRY;                          /* TAKE JOURNAL EXIT             */
@EP00192 DS    0H                                                  0193
*   RFY                                                            0193
*    (RWORK1,                                                      0193
*     RWORK2,                                                      0193
*     R13) RSTD;                    /* GET REGS FOR ACB, R1          */
*   IF AMBLPATH=ON×                 /* DO NOT JOURNAL PATH           */
*       AMBLUPGR=ON THEN            /* OR UPGRADE ACCESSES.          */
         L     @10,AMBPAMBL(,RAMB)                                 0194
         TM    AMBLPATH(@10),B'11000000'                           0194
         BNZ   @RT00194                                            0194
*     RETURN;                       /* IGNORE JRNAD.                 */
*   IF AMBDFR=ON&                   /* IF THE DFR OPTION AND         */
*       PLHJCODE=PLHJOER THEN       /* OUTPUT ERROR, FIND            */
         TM    AMBDFR(RAMB),B'00001000'                            0196
         BNO   @RF00196                                            0196
         CLI   PLHJCODE(RPLH),B'00101000'                          0196
         BNE   @RF00196                                            0196
*     PLHACB=AMBLACB;               /* SET ERROR ACB         @ZA14829*/
         L     @10,AMBLACB(,@10)                                   0197
         ST    @10,PLHACB(,RPLH)                                   0197
*   ELSE                            /* OTHERWISE, USE RPL PTR        */
*     IF AMBLBASE=ON&               /* IF JRNAD FOR BASE             */
*         PLHXPLH^=ZERO THEN        /* ACCESSED THROUGH A PATH,      */
         B     @RC00196                                            0198
@RF00196 L     @10,AMBPAMBL(,RAMB)                                 0198
         TM    AMBLBASE(@10),B'00010000'                           0198
         BNO   @RF00198                                            0198
         L     @10,PLHXPLH(,RPLH)                                  0198
         LTR   @10,@10                                             0198
         BZ    @RF00198                                            0198
*       PLHACB=PLHXPLH->PLHCRPL->RPLDACB;/* SET TO PATH ACB  @ZA14829*/
         L     @10,PLHCRPL(,@10)                                   0199
         L     @10,RPLDACB(,@10)                                   0199
         ST    @10,PLHACB(,RPLH)                                   0199
*   RFY                                                            0200
*     IFGACB BASED(PLHACB);         /* DEFINE ACB BASE       @ZA14829*/
@RF00198 DS    0H                                                  0200
@RC00196 DS    0H                                                  0201
*/*  MAKE SURE JRNAD IS PRESENT FIRST.                               */
*                                                                  0201
*   IF ACBUEL>ONE&                  /* SEE IF EXIT LIST      @ZA14829*/
*       EXLLEN=>35&                 /* EXISTS WHICH HAS      @ZA14829*/
*       EXLJRNF(2)=ON THEN          /* ACTIVE JRNAD          @ZA14829*/
         L     @10,PLHACB(,RPLH)                                   0201
         L     @10,ACBUEL(,@10)                                    0201
         C     @10,@CF00047                                        0201
         BNH   @RF00201                                            0201
         LH    @07,EXLLEN(,@10)                                    0201
         C     @07,@CF02406                                        0201
         BL    @RF00201                                            0201
         TM    EXLJRNF(@10),B'01000000'                            0201
         BNO   @RF00201                                            0201
*     DO;                           /*                       @ZA14829*/
*/*  SAVE INPUT REGISTERS.                                           */
*                                                                  0203
*       GEN SETS(PLHRETO,PLHRET1)(IDASVR14);/* SAVE RETURN           */
         IDASVR14
*       PLHAMB=RAMB;                /* SAVE RAMB                     */
         ST    RAMB,PLHAMB(,RPLH)                                  0204
*       PLHRBUFC=RBUFC;             /* SAVE RBUFC                    */
         ST    RBUFC,PLHRBUFC(,RPLH)                               0205
*       PLHPARM1=RPARM1;            /* SAVE RPARM1                   */
         ST    RPARM1,PLHPARM1(,RPLH)                              0206
*       PLHR13=R13;                 /* SAVE R13                      */
         ST    R13,PLHR13(,RPLH)                                   0207
*       RFY                                                        0208
*        (RWORK0,                                                  0208
*         R15) RSTD;                /* GET REGISTERS                 */
*       R15=EXLJRNP;                /* POINT TO JOURNAL EXIT         */
         L     @10,PLHACB(,RPLH)                                   0209
         L     @10,ACBUEL(,@10)                                    0209
         ICM   R15,15,EXLJRNP(@10)                                 0209
*/*  LOAD EXIT IF NECESSARY.                                         */
*                                                                  0210
*       IF EXLJRNF(3)=ON            /* SEE IF LINK                   */
*         THEN                      /* HERE FOR LINK                 */
         TM    EXLJRNF(@10),B'00100000'                            0210
         BNO   @RF00210                                            0210
*         DO;                                                      0211
*           RWORK1=R1;              /* SAVE REGISTER ONE             */
         LR    RWORK1,R1                                           0212
*           GEN(LOAD  EPLOC=(R15)); /* LOAD ROUTINE                  */
         LOAD  EPLOC=(R15)
*           R15=RWORK0;             /* GET ADDR INTO R15             */
         LR    R15,RWORK0                                          0214
*           R1=RWORK1;              /* RESTORE REGISTER 1            */
         LR    R1,RWORK1                                           0215
*         END;                      /* END OF LOAD CODE              */
*       IF RPLREQ>=RPLPFMTD&        /* HAS THE ORIGINAL              */
*           RPLREQ<RPLGETIX THEN    /* RPL ADDR BEEN SAVED?          */
@RF00210 CLI   RPLREQ(RRPL),8                                      0217
         BL    @RF00217                                            0217
         CLI   RPLREQ(RRPL),11                                     0217
         BNL   @RF00217                                            0217
*         DO;                       /* YES, SWAP IT.                 */
*           PLHIOSRQ=ON;            /* I/O SUPPORT REQ       @ZA06117*/
         OI    PLHIOSRQ(RPLH),B'01000000'                          0219
*           RWORK1=PLHSLRBA;        /* GET SAVED RPL ADDRESS         */
         L     RWORK1,PLHSLRBA(,RPLH)                              0220
*           PLHSLRBA=PLHCRPL;       /* SWAP THE CURRENT AND          */
         L     @14,PLHCRPL(,RPLH)                                  0221
         ST    @14,PLHSLRBA(,RPLH)                                 0221
*           PLHCRPL=RWORK1;         /* SAVED RPLS                    */
         ST    RWORK1,PLHCRPL(,RPLH)                               0222
*         END;                      /* END OF RPL SWAP               */
*       RFY                                                        0224
*         RWORK2 UNRSTD;            /* DROP ACB BASE                 */
@RF00217 DS    0H                                                  0225
*/*  SET UP COMMON PARAMETER LIST INFORMATION AND TAKE EXIT.         */
*                                                                  0225
*       IF AMBTYPE=AMBDATA THEN     /* SEE IF DATA AMB               */
         TM    AMBTYPE(RAMB),B'01000000'                           0225
         BNZ   @RF00225                                            0225
*         PLHDSTYP=PLHTDATA;        /* SET CODE FOR DATA             */
         MVI   PLHDSTYP(RPLH),B'00000001'                          0226
*       ELSE                        /* HERE FOR INDEX AMB            */
*         PLHDSTYP=PLHTIDX;         /* SET CODE FOR INDEX            */
         B     @RC00225                                            0227
@RF00225 MVI   PLHDSTYP(RPLH),B'00000010'                          0227
*       R1=ADDR(PLHCRPL);           /* POINT TO PARM LIST            */
@RC00225 LA    R1,PLHCRPL(,RPLH)                                   0228
*I01:                                                              0229
*       DO;                         /* IDACALL(JRNAD)                */
I01      DS    0H                                                  0230
*         CALL JRNAD;               /* EXIT TO JRNAD                 */
         BALR  @14,@15                                             0230
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I01;                    /* TAKE JRNAD EXIT               */
*       RRPL=RPLSAVE;               /* RESTORE RRPL                  */
         L     RRPL,RPLSAVE(,R1)                                   0236
*       RPLH=RPLPLHPT;              /* RESTORE RPLH                  */
         L     RPLH,RPLPLHPT(,RRPL)                                0237
*       IF PLHIOSRQ=ON THEN         /* IF I/O SUPPORT        @ZA06117*/
         TM    PLHIOSRQ(RPLH),B'01000000'                          0238
         BNO   @RF00238                                            0238
*         DO;                       /* RESTORE RPL ADDR      @ZA06117*/
*           PLHIOSRQ=OFF;           /* RESET FLAG.           @ZA06117*/
         NI    PLHIOSRQ(RPLH),B'10111111'                          0240
*           RWORK1=PLHSLRBA;        /* GET SAVED RPL ADDRESS         */
         L     RWORK1,PLHSLRBA(,RPLH)                              0241
*           PLHSLRBA=PLHCRPL;       /* SWAP THE CURRENT AND          */
         L     @14,PLHCRPL(,RPLH)                                  0242
         ST    @14,PLHSLRBA(,RPLH)                                 0242
*           PLHCRPL=RWORK1;         /* SAVED RPLS                    */
         ST    RWORK1,PLHCRPL(,RPLH)                               0243
*         END;                      /* END I/O SUPPORT       @ZA06117*/
*/*  DELETE EXIT IF IT WAS LOADED.                                   */
*                                                                  0245
*       IF EXLJRNF(3)=ON            /* WAS ROUTINE LOADED            */
*         THEN                      /* IF SO, MUST DELETE            */
@RF00238 L     @14,PLHACB(,RPLH)                                   0245
         L     @14,ACBUEL(,@14)                                    0245
         TM    EXLJRNF(@14),B'00100000'                            0245
         BNO   @RF00245                                            0245
*         DO;                                                      0246
*           RWORK1=R1;              /* SAVE REGISTER ONE             */
         LR    RWORK1,R1                                           0247
*           R15=EXLJRNP;            /* POINT TO RTN NAME             */
         ICM   R15,15,EXLJRNP(@14)                                 0248
*           GEN(DELETE EPLOC=(R15));/* DELETE ROUTINE                */
         DELETE EPLOC=(R15)
*           R1=RWORK1;              /* RESTORE REGISTER ONE          */
         LR    R1,RWORK1                                           0250
*         END;                      /* END OF DELETE CODE            */
*       RFY                                                        0252
*        (RWORK0,                                                  0252
*         R15) UNRSTD;              /* DROP REGISTERS                */
@RF00245 DS    0H                                                  0253
*/*  RESTORE REGISTERS                                               */
*                                                                  0253
*       RAMB=PLHAMB;                /* RESTORE RAMB                  */
         L     RAMB,PLHAMB(,RPLH)                                  0253
*       RBUFC=PLHRBUFC;             /* RESTORE RBUFC                 */
         L     RBUFC,PLHRBUFC(,RPLH)                               0254
*       RPARM1=PLHPARM1;            /* RESTORE RPARM1                */
         L     RPARM1,PLHPARM1(,RPLH)                              0255
*       R13=PLHR13;                 /* RESTORE R13                   */
         L     R13,PLHR13(,RPLH)                                   0256
*       GEN(IDARST14);                                             0257
         IDARST14
*     END;                          /*                       @ZA14829*/
*   RWORK1=PLHCRPL->RPLDACB;        /* POINT TO ACB          @ZA14829*/
@RF00201 L     @10,PLHCRPL(,RPLH)                                  0259
         L     RWORK1,RPLDACB(,@10)                                0259
*   GEN(LA RWORK1,0(RWORK1));       /* DROP HI ORDER BYTE    @ZA14829*/
         LA RWORK1,0(RWORK1)
*   PLHACB=RWORK1;                  /* RESTORE ACB ADDR      @ZA14829*/
         ST    RWORK1,PLHACB(,RPLH)                                0261
*   RETURN;                         /* RETURN TO CALLER              */
@EL00001 DS    0H                                                  0262
@EF00001 DS    0H                                                  0262
@ER00001 BR    @14                                                 0262
*                                                                  0263
*/* IDAENDRQ -- ENDREQ ROUTINE                                       */
*/*01 FUNCTION = QUIESCE I/O, FORCE WRITING, SUBTRACT EXCESS BUFFERS,*/
*/*   AND DISCONNECT THE PLACEHOLDER FROM THE RPL.                   */
*/*01 INPUT = RRPL IS A POINTER TO AN RPL AT THE HEAD OF A CHAIN,    */
*/*   RAMB POINTS TO THE DATA AMB, AND RPLH IS THE PLH ADDRESS.      */
*/*01 OUTPUT = REGISTERS SAME AS UPON ENTRY.                         */
*                                                                  0263
*IDAENDRQ:                                                         0263
*   ENTRY;                          /* END REQUEST ROUTINE           */
@EP00263 DS    0H                                                  0264
*   RFY                                                            0264
*     IFGACB BASED(RPLDACB);        /* DEFINE ACB BASE               */
*   RESPECIFY                                                      0265
*     IDAAMBL;                      /* DEFINE AMBL BASE REG          */
*   RESPECIFY                                                      0266
*    (RWORK1) RESTRICTED;           /* GET REGISTERS         @ZA14801*/
*   RFY                                                            0267
*     R14 RSTD;                     /* GET REGISTER                  */
*/*  HONOR THE ENDREQ UNLESS THE USER IS CALLING IN CREATE MODE.     */
*/*  (ALLOWING MULTIPLE ENDREQS IN CREATE WILL CAUSE DATA LOSS.)     */
*                                                                  0268
*   IF^(ACBIOSFG=OFF&AMBCREAT=ON) THEN/* VALID ENDREQ?               */
         L     @15,RPLDACB(,RRPL)                                  0268
         TM    ACBIOSFG(@15),B'00000001'                           0268
         BNZ   @RT00268                                            0268
         TM    AMBCREAT(RAMB),B'10000000'                          0268
         BO    @RF00268                                            0268
@RT00268 DS    0H                                                  0269
*     DO;                           /* HERE IF VALID ENDREQ          */
*/* PREVENT MORE RPLS IN THE CHAIN FROM STARTING BY SETTING THE      */
*/* ENDREQ FLAG                                                      */
*                                                                  0270
*       PLHENDRQ=ON;                /* INDICATE ENDREQ ISSUED        */
         OI    PLHENDRQ(RPLH),B'01000000'                          0270
*       RRPL=PLHCRPL;               /* POINT TO CURRENT RPL          */
         L     RRPL,PLHCRPL(,RPLH)                                 0271
*/* IF AN RPL IS ASSOCIATED WITH THE PLACEHOLDER, PROCESS THE        */
*/* ENDREQ REQUEST                                                   */
*                                                                  0272
*       IF RRPL=ZERO THEN           /* IF AN RPL IS NOT      @ZA14801*/
         LTR   RRPL,RRPL                                           0272
         BNZ   @RF00272                                            0272
*         RRPL=PLHMRPL;             /* ASSOCIATED--NO-OP     @ZA14801*/
         L     RRPL,PLHMRPL(,RPLH)                                 0273
*       ELSE                        /* IF RPL IS ASSOC W     @ZA14801*/
*         DO;                       /* THE PLH, COME HERE            */
*                                                                  0274
         B     @RC00272                                            0274
@RF00272 DS    0H                                                  0275
*           /*********************************************************/
*           /*                                                       */
*           /* IF THE CURRENT RPL IS ACTIVE, ALLOW IT TO COMPLETE    */
*           /* BEFORE ATTEMPTING TO USE THE PLACEHOLDER.             */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0275
*           TS(RPLACTIV);           /* IF RPL IS ACTIVE      @ZA14801*/
         TS    RPLACTIV(RRPL)                                      0275
*           BC(8,NOWAIT);           /* WAIT FOR IT.          @ZA14801*/
         BC    8,NOWAIT                                            0276
*           RWORK1=R1;              /* SAVE REGISTER ONE             */
         LR    RWORK1,R1                                           0277
*           IF RPLECBSW=OFF THEN    /* SEE WHERE ECB IS              */
         TM    RPLECBSW(RRPL),B'00000001'                          0278
         BNZ   @RF00278                                            0278
*             R1=ADDR(RPLECB);      /* POINT TO IT IN RPL            */
         LA    @15,RPLECB(,RRPL)                                   0279
         LR    R1,@15                                              0279
*           ELSE                    /* OR IN USER AREA               */
*             R1=ADDR(USERECB);                                    0280
         B     @RC00278                                            0280
@RF00278 L     R1,RPLECBPT(,RRPL)                                  0280
*           IF ECBPOST=OFF THEN     /* SEE IF POSTED YET             */
@RC00278 TM    ECBPOST(R1),B'01000000'                             0281
         BNZ   @RF00281                                            0281
*             DO;                   /* NOT POSTED            @OZ02513*/
*               IF ECBWAIT=ON THEN  /* AND WAITING           @OZ02513*/
         TM    ECBWAIT(R1),B'10000000'                             0283
         BNO   @RF00283                                            0283
*                 DO;               /* WAITING               @OZ02513*/
*                   RRPL=RWORK1;    /* RESTORE RPL REG       @ZA29389*/
         LR    RRPL,RWORK1                                         0285
*                   RPLERREG='08'X; /* SET LOGIC ERR         @OZ02513*/
         MVI   RPLERREG(RRPL),X'08'                                0286
*                   RPLERRCD=RPLINVEQ;/* INVALID ENDREQ      @OZ02513*/
         MVI   RPLERRCD(RRPL),X'D0'                                0287
*                   GOTO EQEXIT;    /* EXIT ENDREQ           @OZ02513*/
         B     EQEXIT                                              0288
*                 END;              /* END WAITING           @OZ02513*/
*               ELSE                                               0290
*                 GEN(WAIT ECB=(1));/* WAIT COMPLETE         @OZ02513*/
@RF00283 DS    0H                                                  0290
         WAIT ECB=(1)
*             END;                  /* END NOT POSTED        @OZ02513*/
*           R1=RWORK1;              /* RESTORE                       */
@RF00281 LR    R1,RWORK1                                           0292
*NOWAIT:                                                           0293
*           RFY                                                    0293
*             RWORK1 UNRSTD;        /* DROP WORK REGISTER            */
NOWAIT   DS    0H                                                  0294
*           GEN(IDASVR14);          /* SAVE RETURN ADDR              */
         IDASVR14
*           RFY                                                    0295
*             R14 UNRSTD;           /* RELEASE REGISTER              */
*/* POINT TO MASTER RPL.                                     @ZA14801*/
*                                                                  0296
*           RRPL=PLHMRPL;           /* FIRST RPL IN CH.      @ZA14801*/
         L     @10,PLHMRPL(,RPLH)                                  0296
         LR    RRPL,@10                                            0296
*/* FORCE SYNCHRONOUS PROCESSING                                     */
*                                                                  0297
*           PLHIWAIT=ON;            /* SET SYNCHRONOUS       @ZA14801*/
         OI    PLHIWAIT(RPLH),B'00000001'                          0297
*           PLHCRPL=PLHMRPL;        /* ENSURE RPL-ACB AGREE          */
         ST    @10,PLHCRPL(,RPLH)                                  0298
*           RPLFDBWD=ZERO;          /* CLEAR ERROR STATUS            */
         SLR   @10,@10                                             0299
         ST    @10,RPLFDBWD(,RRPL)                                 0299
*/* FOR CREATE MODE, WRITE OUT ALL DATA AND COMPLETE THE INDEXES     */
*                                                                  0300
*           IF AMBCREAT=ON&         /* IF CREATE MODE                */
*               ARDHRBA^=ZERO       /* AND THE DATA SET IS NOT       */
*             THEN                  /* NULL, PAD OUT CA, ETC.        */
         TM    AMBCREAT(RAMB),B'10000000'                          0300
         BNO   @RF00300                                            0300
         L     @05,PLHARDB(,RPLH)                                  0300
         CL    @10,ARDHRBA(,@05)                                   0300
         BE    @RF00300                                            0300
*             DO;                                                  0301
*                                                                  0301
*/* IF THIS IS A KEY RANGE DATA SET, CALL CONTROL INTERVAL SPLIT FOR */
*/* ALL NON-LAST KEY RANGES. (CI SPLIT WILL CALL INDEX CREATE FOR AN */
*/* INSERT, PREFORMAT THE FIRST CONTROL AREA IN THE NEXT KEY RANGE,  */
*/* AND CALL INDEX INSERT FOR A WRITE.)                              */
*                                                                  0302
*               IF ARDKR=ON         /* IF A KEY RANGE DATA SET       */
*                 THEN              /* PREFORMAT INDEX AND           */
         TM    ARDKR(@05),B'10000000'                              0302
         BNO   @RF00302                                            0302
*                 DO WHILE(RPLERREG='00'X&/* DATA IN UNUSED KEY      */
*                       ARDNPTR^=ZERO);/* RANGES UNLESS AN ERROR     */
         B     @DE00303                                            0303
@DL00303 DS    0H                                                  0304
*                   PLHKRE=ON;      /* OCCURS. END OF KEY RNG        */
         OI    PLHKRE(RPLH),B'00001000'                            0304
*                   RFY                                            0305
*                    (RWORK1,                                      0305
*                     RWORK2) RSTD; /* GET WORK REGISTERS            */
*                   RWORK1=ONE+AMDKEYLN;/* BEGINNING OF KEY          */
         L     @10,AMBDSB(,RAMB)                                   0306
         LH    @10,AMDKEYLN(,@10)                                  0306
         LA    RWORK1,1                                            0306
         ALR   RWORK1,@10                                          0306
*                   RWORK2=AMDKEYLN*TWO;/* END OF HIGH KEY           */
         LR    RWORK2,@10                                          0307
         ALR   RWORK2,RWORK2                                       0307
*                   PLHKEY(ONE:AMDKEYLN)=ARDKEYS(RWORK1:RWORK2);/* 0308
*                                      MOVE KEY                      */
         L     @07,PLHKEYPT(,RPLH)                                 0308
         BCTR  @10,0                                               0308
         L     @15,PLHARDB(,RPLH)                                  0308
         ALR   @15,RWORK1                                          0308
         EX    @10,@SM02475                                        0308
*                   RFY                                            0309
*                    (RWORK1,                                      0309
*                     RWORK2) UNRSTD;/* DROP WORK REGISTERS          */
*I02:                                                              0310
*                   DO;             /* IDACALL(IDA019SA)             */
I02      DS    0H                                                  0311
*                     CALL IDA019SA;/* EXIT TO IDA019SA              */
         L     @15,@CV02368                                        0311
         BALR  @14,@15                                             0311
*                     GEN(BALR @11,0);/* LOAD ADDR OF REENTRY        */
         BALR @11,0
*                     GEN(USING *,@11);/* ESTABLISH ADDRESSING       */
         USING *,@11
*                     GEN(L     @11,=A(@PSTART));/* RELOAD BASE      */
         L     @11,=A(@PSTART)
*                     GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING */
         USING @PSTART,@11
*                   END I02;        /* CALL CI INITIALIZATION        */
*                   PLHDBUFC->BUFCMW=OFF;/* WRITE NOT REQUIRED       */
         L     @10,PLHDBUFC(,RPLH)                                 0317
         NI    BUFCMW(@10),B'01111111'                             0317
*                   PLHDBUFC->BUFCVAL=OFF;/* INVALID RBA             */
         NI    BUFCVAL(@10),B'11111011'                            0318
*                 END;              /* END OF KEY RANGE CODE         */
@DE00303 CLI   RPLERREG(RRPL),0                                    0319
         BNE   @DC00303                                            0319
         L     @10,PLHARDB(,RPLH)                                  0319
         L     @10,ARDNPTR(,@10)                                   0319
         LTR   @10,@10                                             0319
         BNZ   @DL00303                                            0319
@DC00303 DS    0H                                                  0320
*/* CAUSE INDEX CREATE TO WRITE THE LAST INDEX ENTRIES IF THE DATA   */
*/* SET IS KEYED                                                     */
*                                                                  0320
*               IF AMDDST='1'B      /* IF THE DATA SET IS            */
*                 THEN              /* KEYED, THE INDEXES MUST       */
@RF00302 L     @10,AMBDSB(,RAMB)                                   0320
         TM    AMDDST(@10),B'10000000'                             0320
         BNO   @RF00320                                            0320
*                 DO;               /* BE WRITTEN                    */
*                   RPARM1=IXCLOSE; /* INDICATE CLOSE                */
         LA    RPARM1,8                                            0322
*I03:                                                              0323
*                   DO;             /* IDACALL(IDA019RG)             */
I03      DS    0H                                                  0324
*                     CALL IDA019RG;/* EXIT TO IDA019RG              */
         L     @15,@CV02367                                        0324
         BALR  @14,@15                                             0324
*                     GEN(BALR @11,0);/* LOAD ADDR OF REENTRY        */
         BALR @11,0
*                     GEN(USING *,@11);/* ESTABLISH ADDRESSING       */
         USING *,@11
*                     GEN(L     @11,=A(@PSTART));/* RELOAD BASE      */
         L     @11,=A(@PSTART)
*                     GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING */
         USING @PSTART,@11
*                   END I03;                                       0329
*                   RFY                                            0330
*                     R15 RSTD;     /* GET RETURN CODE               */
*                   IF R15=NOFIT    /* IF NO ROOM FOR ENTRY,         */
*                     THEN          /* MOVE CINV TO NEW CA           */
         C     R15,@CF00038                                        0331
         BNE   @RF00331                                            0331
*                     DO;                                          0332
*I04:                                                              0333
*                       DO;         /* IDACALL(IDA019SA)             */
I04      DS    0H                                                  0334
*                         CALL IDA019SA;/* EXIT TO IDA019SA          */
         L     @15,@CV02368                                        0334
         BALR  @14,@15                                             0334
*                         GEN(BALR @11,0);/* LOAD ADDR OF REENTRY    */
         BALR @11,0
*                         GEN(USING *,@11);/* ESTABLISH ADDRESSING   */
         USING *,@11
*                         GEN(L     @11,=A(@PSTART));/* RELOAD BASE  */
         L     @11,=A(@PSTART)
*                         GEN(USING @PSTART,@11);/* ESTABLISH      0338
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                       END I04;    /* CALL CI INITIALIZATION        */
*                       IF RPLERREG='00'X/* IF NO ERROR, CALL INDEX  */
*                         THEN      /* CREATE AGAIN.                 */
         CLI   RPLERREG(RRPL),0                                    0340
         BNE   @RF00340                                            0340
*                         DO;                                      0341
*                           RPARM1=IXCLOSE;/* INDICATE CLOSE ENTRY   */
         LA    RPARM1,8                                            0342
*I05:                                                              0343
*                           DO;     /* IDACALL(IDA019RG)             */
I05      DS    0H                                                  0344
*                             CALL IDA019RG;/* EXIT TO IDA019RG      */
         L     @15,@CV02367                                        0344
         BALR  @14,@15                                             0344
*                             GEN(BALR @11,0);/* LOAD ADDR OF REENTRY*/
         BALR @11,0
*                             GEN(USING *,@11);/* ESTABLISH        0346
*                                      ADDRESSING                    */
         USING *,@11
*                             GEN(L     @11,=A(@PSTART));/* RELOAD 0347
*                                      BASE                          */
         L     @11,=A(@PSTART)
*                             GEN(USING @PSTART,@11);/* ESTABLISH  0348
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                           END I05;/* CALL INDEX CREATE             */
*                         END;      /* END OF INDEX CREATE           */
*                     END;          /* END OF NO FIT CODE            */
@RF00340 DS    0H                                                  0352
*                   RFY                                            0352
*                     R15 UNRSTD;   /* RELEASE RETURN CODE           */
@RF00331 DS    0H                                                  0353
*                 END;              /* END OF KSDS CODE              */
*/* WRITE OUT THE DATA AND, IF THE SPEED OPTION WAS SPECIFIED, PAD   */
*/* THE CURRENT CONTROL AREA                                         */
*                                                                  0354
*               RBUFC=PLHDBUFC->BUFCNXT2;/* POINT TO A BUFC          */
@RF00320 L     @10,PLHDBUFC(,RPLH)                                 0354
         L     RBUFC,BUFCNXT2-1(,@10)                              0354
         LA    RBUFC,0(,RBUFC)                                     0354
*I06:                                                              0355
*               DO;                 /* IDACALL(IDAWRBFR)             */
I06      DS    0H                                                  0356
*                 CALL IDAWRBFR;    /* EXIT TO IDAWRBFR              */
         L     @15,@CV02370                                        0356
         BALR  @14,@15                                             0356
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I06;            /* WRITE OUT REMAINDER           */
*               IF AMBSPEED=ON      /* SPEED OPTION, THE CUR-        */
*                 THEN              /* RENT CA MUST BE PADDED        */
         TM    AMBSPEED(RAMB),B'00001000'                          0362
         BNO   @RF00362                                            0362
*                 DO;                                              0363
*                   RPARM1=ARDHRBA; /* POINT TO 1ST RBA TO PAD       */
         L     @10,PLHARDB(,RPLH)                                  0364
         L     RPARM1,ARDHRBA(,@10)                                0364
*                   IF RPARM1^=ARDERBA/* IF NOT END OF EXTENT,       */
*                     THEN          /* PAD CONTROL AREA.             */
         CL    RPARM1,ARDERBA(,@10)                                0365
         BE    @RF00365                                            0365
*I07:                                                              0366
*                     DO;           /* IDACALL(IDA019RK)             */
I07      DS    0H                                                  0367
*                       CALL IDA019RK;/* EXIT TO IDA019RK            */
         L     @15,@CV02371                                        0367
         BALR  @14,@15                                             0367
*                       GEN(BALR @11,0);/* LOAD ADDR OF REENTRY      */
         BALR @11,0
*                       GEN(USING *,@11);/* ESTABLISH ADDRESSING     */
         USING *,@11
*                       GEN(L     @11,=A(@PSTART));/* RELOAD BASE    */
         L     @11,=A(@PSTART)
*                       GEN(USING @PSTART,@11);/* ESTABLISH        0371
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                     END I07;                                     0372
*                   IF AMDRRDS=ON×  /* IF AN RRDS OR                 */
*                       AMDDST='1'B THEN/* IF A KSDS                 */
@RF00365 L     @10,AMBDSB(,RAMB)                                   0373
         TM    AMDRRDS(@10),B'10000010'                            0373
         BZ    @RF00373                                            0373
*                     ARDHRBA=RPARM1;/* SET PTR TO SEOF              */
         L     @10,PLHARDB(,RPLH)                                  0374
         ST    RPARM1,ARDHRBA(,@10)                                0374
*                   IF AMDRRDS=ON THEN/* RRDS.                       */
@RF00373 L     @10,AMBDSB(,RAMB)                                   0375
         TM    AMDRRDS(@10),B'00000010'                            0375
         BNO   @RF00375                                            0375
*                     DO;                                          0376
*                       AMDNLR=(ARDHRBA/AMDCINV)*AMDNSLOT;/* UPDATE
*                                      TOTAL NO. RECORDS.            */
         L     @05,PLHARDB(,RPLH)                                  0377
         L     @15,ARDHRBA(,@05)                                   0377
         LR    @07,@15                                             0377
         SLR   @06,@06                                             0377
         D     @06,AMDCINV(,@10)                                   0377
         M     @06,AMDNSLOT(,@10)                                  0377
         ST    @07,AMDNLR(,@10)                                    0377
*                       AMDASPA=ARDERBA-ARDHRBA;/* UPDATE NO BYTES 0378
*                                      FREE SPACE.                   */
         LCR   @15,@15                                             0378
         AL    @15,ARDERBA(,@05)                                   0378
         ST    @15,AMDASPA(,@10)                                   0378
*                     END;                                         0379
*                 END;              /* END OF PAD CA CODE            */
*             END;                  /* END OF CLOSE CODE             */
*/* FOR NON-CREATE, JUST FINISH WRITING THE DATA (INDEX ALWAYS       */
*/*  FORCED OUT).                                                    */
*                                                                  0382
*           ELSE                    /* HERE IF NOT CREATE            */
*             DO;                                                  0382
         B     @RC00300                                            0382
@RF00300 DS    0H                                                  0383
*               RBUFC=PLHDBUFC;     /* POINT TO CURRENT BUFC         */
         L     RBUFC,PLHDBUFC(,RPLH)                               0383
*               IF RBUFC^=ZERO THEN /* IF BUFC PRESENT,              */
         LTR   RBUFC,RBUFC                                         0384
         BZ    @RF00384                                            0384
*                 DO;               /* SET UP TO WRITE               */
*                   IF BUFCMW=ON THEN/* SEE IF BUFFER UPDATED        */
         TM    BUFCMW(RBUFC),B'10000000'                           0386
         BNO   @RF00386                                            0386
*                     DO;           /* IF SO, COME HERE.             */
*                       IF BUFCSEG=OFF THEN/* IF NOT SPANNED, SET    */
         TM    BUFCSEG(RBUFC),B'01000000'                          0388
         BNZ   @RF00388                                            0388
*                         BUFXIRBA=BUFCORBA;/* EXCL CNTL RBA         */
         L     @10,BUFCORBA(,RBUFC)                                0389
         ST    @10,BUFXIRBA(,RBUFC)                                0389
*                       BUFCVAL=ON; /* BUFFER CONTENTS VALID         */
@RF00388 OI    BUFCVAL(RBUFC),B'00000100'                          0390
*                     END;          /* END OF MW CODE                */
*                   IF AMBDFR=OFF THEN/* IF NOT DEFERRED,            */
@RF00386 TM    AMBDFR(RAMB),B'00001000'                            0392
         BNZ   @RF00392                                            0392
*                     DO UNTIL RBUFC=PLHDBUFC;/* SCAN BUFCS FOR MW   */
@DL00393 DS    0H                                                  0394
*                       RBUFC=BUFCNXT1;/* POINT TO A BUFC            */
         L     RBUFC,BUFCNXT1(,RBUFC)                              0394
*                       IF BUFCMW=ON THEN/* IF MUST WRITE, WRITE     */
         TM    BUFCMW(RBUFC),B'10000000'                           0395
         BNO   @RF00395                                            0395
*I08:                                                              0396
*                         DO;       /* IDACALL(IDAWRBFR)             */
I08      DS    0H                                                  0397
*                           CALL IDAWRBFR;/* EXIT TO IDAWRBFR        */
         L     @15,@CV02370                                        0397
         BALR  @14,@15                                             0397
*                           GEN(BALR @11,0);/* LOAD ADDR OF REENTRY  */
         BALR @11,0
*                           GEN(USING *,@11);/* ESTABLISH ADDRESSING */
         USING *,@11
*                           GEN(L     @11,=A(@PSTART));/* RELOAD BASE*/
         L     @11,=A(@PSTART)
*                           GEN(USING @PSTART,@11);/* ESTABLISH    0401
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                         END I08;  /* WRITE OUT ALL DATA            */
*                     END;          /* END OF BUFC SCAN              */
@RF00395 DS    0H                                                  0403
@DE00393 C     RBUFC,PLHDBUFC(,RPLH)                               0403
         BNE   @DL00393                                            0403
*                 END;              /* END OF BUFC PRESENT CODE      */
@RF00392 DS    0H                                                  0405
*             END;                  /* END OF NON-CREATE CODE        */
@RF00384 DS    0H                                                  0406
*           IF RPLERREG='0C'X       /* IF AN I/O ERROR               */
*             THEN                  /* OCCURRED, BUILD AN            */
@RC00300 CLI   RPLERREG(RRPL),12                                   0406
         BNE   @RF00406                                            0406
*             DO;                   /* ERROR MESSAGE.                */
*I09:                                                              0408
*               DO;                 /* IDACALL(IDA019R5)             */
I09      DS    0H                                                  0409
*                 CALL IDA019R5;    /* EXIT TO IDA019R5              */
         L     @15,@CV02366                                        0409
         BALR  @14,@15                                             0409
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I09;            /* BUILD ERROR MESSAGE           */
*               IF AMBEXEX(ONE)^=ZERO THEN/* IF EXCEPTION EXIT,      */
         CLI   AMBEXEX(RAMB),0                                     0415
         BE    @RF00415                                            0415
*I10:                                                              0416
*                 DO;               /* IDACALL(IDAEXEX)              */
I10      DS    0H                                                  0417
*                   CALL IDAEXEX;   /* EXIT TO IDAEXEX               */
         L     @15,@CV02369                                        0417
         BALR  @14,@15                                             0417
*                   GEN(BALR @11,0);/* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                   GEN(USING *,@11);/* ESTABLISH ADDRESSING         */
         USING *,@11
*                   GEN(L     @11,=A(@PSTART));/* RELOAD BASE        */
         L     @11,=A(@PSTART)
*                   GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING   */
         USING @PSTART,@11
*                 END I10;          /* TAKE IT.                      */
*             END;                  /* END I/O ERROR         @ZA14801*/
@RF00415 DS    0H                                                  0424
*           RBUFC=ZERO;             /* INDICATE SUBTRACT ALL         */
@RF00406 SLR   RBUFC,RBUFC                                         0424
*/*  REMOVE EXCESS BUFFERS                                           */
*                                                                  0425
*I11:                                                              0425
*           DO;                     /* IDACALL(IDASBF)               */
I11      DS    0H                                                  0426
*             CALL IDASBF;          /* EXIT TO IDASBF                */
         L     @15,@CV02363                                        0426
         BALR  @14,@15                                             0426
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I11;                                               0431
*           RFY                                                    0432
*             R14 RSTD;             /* GET REGISTER                  */
*           GEN(IDARST14);          /* RESTORE RETURN                */
         IDARST14
*         END;                      /* END OF ACTIVE RPL             */
*/*   FREE ALL BUT THE MASTER RPL.                           @ZA14801*/
*                                                                  0435
*       RRPL=RPLCHAIN;              /* NEXT RPL              @ZA14801*/
@RC00272 L     RRPL,RPLCHAIN(,RRPL)                                0435
*       DO WHILE RRPL^=ZERO;        /* PROCESS ALL OTHER     @ZA14801*/
         B     @DE00436                                            0436
@DL00436 DS    0H                                                  0437
*         RPLACTIV=CZERO;           /* MAKE RPL AVAIL.       @ZA14801*/
         MVI   RPLACTIV(RRPL),B'00000000'                          0437
*         RRPL=RPLCHAIN;            /* NEXT RPL              @ZA14801*/
         L     RRPL,RPLCHAIN(,RRPL)                                0438
*       END;                        /* END OF RPL CHAIN      @ZA14801*/
@DE00436 LTR   RRPL,RRPL                                           0439
         BNZ   @DL00436                                            0439
*       RRPL=PLHMRPL;               /* PT TO MASTER RPL      @ZA14801*/
         L     RRPL,PLHMRPL(,RPLH)                                 0440
*/*  IF I/O SUPPORT CALLED ENDREQ, PASS BACK ERROR INFORMATION.      */
*                                                                  0441
*       RFY                                                        0441
*         R13 RSTD;                 /* SAVEAREA REGISTER             */
*       IF ACBIOSFG=ON THEN         /* IS I/O SUPPORT THE            */
         L     @15,RPLDACB(,RRPL)                                  0442
         TM    ACBIOSFG(@15),B'00000001'                           0442
         BNO   @RF00442                                            0442
*         R15SAVE=RPLERREG;         /* CALLER? YES, SET R15.         */
         SLR   @15,@15                                             0443
         IC    @15,RPLERREG(,RRPL)                                 0443
         ST    @15,R15SAVE(,R13)                                   0443
*/*  DISCONNECT THE PLACEHOLDER FROM THE RPL AND INVALIDATE ITS      */
*/*  POSITION.                                                       */
*                                                                  0444
*       PLHFLG1=CZERO;              /* RESET PLH ERROR               */
@RF00442 MVI   PLHFLG1(RPLH),B'00000000'                           0444
*       PLHFLG2=CZERO;              /* FLAGS                         */
         MVI   PLHFLG2(RPLH),B'00000000'                           0445
*       PLHFLG3=CZERO;              /*                               */
         MVI   PLHFLG3(RPLH),B'00000000'                           0446
*       PLHEFLGS=C2ZERO;            /*                               */
         MVC   PLHEFLGS(2,RPLH),C2ZERO                             0447
*       PLHINVAL=ON;                /* INVALIDATE PLACEHOLDER        */
         OI    PLHINVAL(RPLH),B'00000010'                          0448
*       PLHACB=ZERO;                /* DISCONNECT NON-SHARED PLH     */
         SLR   @15,@15                                             0449
         ST    @15,PLHACB(,RPLH)                                   0449
*       PLHARDB=ZERO;               /* UNKNOWN ARDB                  */
         ST    @15,PLHARDB(,RPLH)                                  0450
*       PLHMRPL=ZERO;               /* DISCONNECT RPL                */
         ST    @15,PLHMRPL(,RPLH)                                  0451
*       PLHAVL=CZERO;               /* MAKE PLH AVAILABLE            */
         MVI   PLHAVL(RPLH),B'00000000'                            0452
*       GEN(BR    0);               /* SYNCHRONIZE CPUS.             */
         BR    0
*       PLHDRCUR=PLHDRCUR-ONE;      /* ONE LESS PLH ACTIVE           */
         L     @15,AMBPH(,RAMB)                                    0454
         LH    @10,PLHDRCUR(,@15)                                  0454
         BCTR  @10,0                                               0454
         STH   @10,PLHDRCUR(,@15)                                  0454
*       IF RPLERREG='0C'X THEN      /* IF AN I/O ERROR       @ZA14801*/
         CLI   RPLERREG(RRPL),12                                   0455
         BNE   @RF00455                                            0455
*         DO;                       /* TAKE SYNAD            @ZA14801*/
*           RFY                                                    0457
*             RWORK2 RSTD;          /* GET WORK REG          @ZA14801*/
*           RWORK2=R14;             /* SAVE RETURN REG       @ZA14801*/
         LR    RWORK2,R14                                          0458
*I12:                                                              0459
*           DO;                     /* IDACALL(IDALOCEX)             */
I12      DS    0H                                                  0460
*             CALL IDALOCEX;        /* EXIT TO IDALOCEX              */
         L     @15,@CV02364                                        0460
         BALR  @14,@15                                             0460
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I12;                /* LOCATE USER EXIT      @ZA14801*/
*           R14=RWORK2;             /* RESTORE RETURN        @ZA14801*/
         LR    R14,RWORK2                                          0466
*           IF RPARM1^=ZERO THEN    /* IF EXIT WAS FOUND     @ZA14801*/
         LTR   RPARM1,RPARM1                                       0467
         BZ    @RF00467                                            0467
*             DO;                   /* THEN TAKE IT.         @ZA14801*/
*               RPLACTIV=CZERO;     /* RELEASE RPL.          @ZA14801*/
         MVI   RPLACTIV(RRPL),B'00000000'                          0469
*               GO TO IDAEXITR;     /* TAKE USER EXIT.       @ZA14801*/
         L     @15,@CV02365                                        0470
         BR    @15                                                 0470
*             END;                  /* END EXIT FOUND        @ZA14801*/
*         END;                      /* END I/O ERROR         @ZA14801*/
@RF00467 DS    0H                                                  0473
*       RPLACTIV=CZERO;             /* MAKE RPL AVAILABLE    @ZA14801*/
@RF00455 MVI   RPLACTIV(RRPL),B'00000000'                          0473
*       RFY                                                        0474
*         R14 UNRSTD;               /* DROP REGISTER                 */
*EQEXIT:                            /* EXIT IDAENDRQ         @OZ02513*/
*     END;                          /* END OF VALID ENDREQ           */
*RPEXIT:                            /* RETURN TO CALLER      @ZA14801*/
*   RETURN;                         /* END OF ENDREQ ROUTINE         */
         B     @EL00001                                            0476
*                                                                  0477
*/*  IDAPTCBV--VALIDATE THE CURRENT TCB                              */
*/*  FUNCTION = ENSURE THE TCB IS PROPER FOR REQUESTING SYSTEM       */
*/*             RESOURCES.                                           */
*/*  INPUT = RRPL IS THE CURRENT RPL ADDRESS AND RAMB IS THE AMB PTR.*/
*/*  OUTPUT = RPLERREG IS NON-ZERO IF IN THE INCORRECT REGION, R15 IS*/
*/*            ZERO IF IN THE CORRECT REGION AND OPERATING UNDER THE */
*/*            JOB STEP TCB, R15 IS FOUR IF IN THE CORRECT REGION AND*/
*/*            OPERATING UNDER A SUBTASK.                            */
*                                                                  0477
*IDAPTCBV:                                                         0477
*   ENTRY;                                                         0477
@EP00477 DS    0H                                                  0478
*   RFY                                                            0478
*    (R14,                                                         0478
*     R15) RSTD;                    /* GET RETURN AND RC REGS        */
*   RFY                                                            0479
*     RWORK1 RSTD;                  /* GET WORK REGISTER             */
*   RWORK1=CURRTCB->TCBJSTCB;       /* POINT TO CURR JOB STEP TCB    */
         L     @10,CVTPTR                                          0480
         L     @10,CVTTCBP(,@10)                                   0480
         L     @10,CURRTCB(,@10)                                   0480
         L     RWORK1,TCBJSTCB(,@10)                               0480
*   IF AMBDEBAD->DEBTCBAD->TCBJSTCB^=RWORK1 THEN/* SAME JOB STEP?    */
         L     @10,AMBDEBAD-1(,RAMB)                               0481
         L     @10,DEBTCBAD(,@10)                                  0481
         C     RWORK1,TCBJSTCB(,@10)                               0481
         BE    @RF00481                                            0481
*     DO;                           /* NO, SET ERROR                 */
*       R15='08'X;                  /* SET RETURN CODE REG           */
         LA    R15,8                                               0483
*       RPLERREG='08'X;             /* SET LOGICAL ERROR             */
         MVI   RPLERREG(RRPL),X'08'                                0484
*       RPLERRCD=RPLINTCB;          /* INVALID TCB                   */
         MVI   RPLERRCD(RRPL),X'78'                                0485
*     END;                          /* END OF WRONG JOB STEP         */
*   ELSE                            /* HERE IF RIGHT JOB STEP        */
*     IF RWORK1=CURRTCB THEN        /* CURR = JOB STEP TCB?          */
         B     @RC00481                                            0487
@RF00481 L     @10,CVTPTR                                          0487
         L     @10,CVTTCBP(,@10)                                   0487
         C     RWORK1,CURRTCB(,@10)                                0487
         BNE   @RF00487                                            0487
*       R15=ZERO;                   /* YES--NO PROBLEM.              */
         SLR   R15,R15                                             0488
*     ELSE                          /* THIS IS A SUBTASK             */
*       R15=FOUR;                   /* POTENTIAL PROBLEM             */
         B     @RC00487                                            0489
@RF00487 LA    R15,4                                               0489
*   RFY                                                            0490
*     RWORK1 UNRSTD;                /* DROP WORK REGISTER            */
@RC00487 DS    0H                                                  0490
@RC00481 DS    0H                                                  0491
*   RETURN CODE(R15);               /* EXIT WITH R15 SET             */
         BR    @14                                                 0491
*                                                                  0492
*/*  IDAPGETM--GET A DUMMY ACB FOR THE PURPOSE OF DYNAMIC STRING     */
*/*            ADDITION OR GETMAIN.                                  */
*/*  FUNCTION = BUILD DUMMY ACB WITH NULL FUNCTION CODE              */
*/*  INPUT = STANDARD VSAM REGISTERS EXCEPT THAT RPARM1 POINTS TO    */
*/*          THE RPL AND RRPL (REGISTER ONE) IS INVALID.             */
*/*  OUTPUT = DUMMY ACB ADDRESS IN REGISTER ONE (RRPL) IF SUCCESSFUL.*/
*/*          REG 1 IS ZERO IF UNSUCCESSFUL.  RPARM1 POINTS TO RPL.   */
*/*          RWORK3, RWORK5, AND R10 ARE UNCHANGED.                  */
*                                                                  0492
*IDAPGETM:                                                         0492
*   ENTRY;                                                         0492
@EP00492 DS    0H                                                  0493
*   RFY                                                            0493
*    (RWORK1,                                                      0493
*     RWORK3,                                                      0493
*     RWORK5,                                                      0493
*     R10,                                                         0493
*     R14) RSTD;                    /*                       @ZA26092*/
*   RFY                                                            0494
*    (RWORK2,                                                      0494
*     RWORK4) UNRSTD;               /*                       @ZA26092*/
*   RWORK1=AMBWSHD;                 /* POINT TO FIRST IDAWSHD        */
         L     RWORK1,AMBWSHD(,RAMB)                               0495
*   RESPECIFY                                                      0496
*     IDAWSHD BASED(RWORK1);                                       0496
*   DO UNTIL RWORK1=ZERO;           /* LOOP THRU CHAIN       @ZA26092*/
@DL00497 DS    0H                                                  0498
*     TS(WSHDGMTB);                 /* TEST FOR AVAILABLE WSHD       */
         TS    WSHDGMTB(RWORK1)                                    0498
*     BC(8,GOTWSHD);                /* BR IF AVAILABLE               */
         BC    8,GOTWSHD                                           0499
*     RWORK1=WSHDNEXT;              /* POINT TO NEXT WSHD            */
         L     @08,WSHDNEXT-1(,RWORK1)                             0500
         LA    @08,0(,@08)                                         0500
         LR    RWORK1,@08                                          0500
*   END;                                                           0501
@DE00497 LTR   RWORK1,RWORK1                                       0501
         BNZ   @DL00497                                            0501
*   RRPL=ZERO;                      /* NO CORE GOTTEN                */
         SLR   RRPL,RRPL                                           0502
*   RETURN;                         /* EXIT, NO WSHD AVAILABLE       */
         B     @EL00001                                            0503
*GOTWSHD:                           /* WSHD WAS AVAILABLE            */
*   RFY                                                            0504
*    (RWORK2,                                                      0504
*     RWORK4) RSTD;                 /*                       @ZA26092*/
GOTWSHD  DS    0H                                                  0505
*   RWORK2=LENGTH(IDABLPRM);        /* SET LENGTH OF PARM LIST       */
         LA    RWORK2,52                                           0505
*   RWORK4=R14;                     /* SAVE RETURN ADDRESS           */
         LR    RWORK4,R14                                          0506
*   GEN SETS(WSHDGMWA);                                            0507
  GETMAIN EC,LV=(RWORK2),A=WSHDGMRA(RWORK1),MF=(E,WSHDGMWA(RWORK1))
*   RESPECIFY                                                      0508
*     R15 RESTRICTED;                                              0508
*   R1=WSHDGMRA;                    /* LOAD GETMAIN RESULT           */
         L     R1,WSHDGMRA(,RWORK1)                                0509
*   WSHDGMTB=0;                     /* RELEASE WSHD                  */
         MVI   WSHDGMTB(RWORK1),X'00'                              0510
*   IF R15^=0 THEN                  /* IF ANY ERROR                  */
         LTR   R15,R15                                             0511
         BZ    @RF00511                                            0511
*     DO;                                                          0512
*       RRPL=ZERO;                  /* INDICATE UNSUCCESSFUL         */
         SLR   RRPL,RRPL                                           0513
*       R14=RWORK4;                 /* RESTORE RETURN ADDRESS        */
         LR    R14,RWORK4                                          0514
*       RETURN;                     /* EXIT PROCEDURE                */
         B     @EL00001                                            0515
*     END;                                                         0516
*   RESPECIFY                                                      0517
*     IDABLPRM BASED(R1);                                          0517
@RF00511 DS    0H                                                  0518
*   IDABLPRM=IDABLPRM&&IDABLPRM;    /* ZERO PARM LIST                */
         XC    IDABLPRM(52,R1),IDABLPRM(R1)                        0518
*   BLPACBID=BLPACBCD;              /* SET ACB CODE                  */
         MVI   BLPACBID(R1),X'A0'                                  0519
*   BLPACBST=BLPSTCD;               /* SET STATUS CODE               */
         MVI   BLPACBST(R1),X'11'                                  0520
*   BLPUACB=RPARM1->RPLDACB;        /* DEFINE REAL ACB               */
         L     @00,RPLDACB(,RPARM1)                                0521
         ST    @00,BLPUACB(,R1)                                    0521
*   BLPDSORG=BLPDSOCD;              /* SET VSAM DSORG                */
         MVI   BLPDSORG(R1),X'08'                                  0522
*   BLPOFLGS=BLPOFLCD;              /* SET OFLAGS                    */
         MVI   BLPOFLGS(R1),X'02'                                  0523
*   BLPOCODE=BLPPRMCD;              /* SET OPEN CODE                 */
         MVI   BLPOCODE(R1),X'80'                                  0524
*   BLPOACB=ADDR(IDABLPRM);         /* SET OPEN PARM                 */
         STCM  R1,7,BLPOACB(R1)                                    0525
*   R14=RWORK4;                     /* RESTORE RETURN ADDRESS        */
         LR    R14,RWORK4                                          0526
*   RETURN;                         /* RETURN TO CALLER (R15=RC)     */
         B     @EL00001                                            0527
*   RESPECIFY                                                      0528
*     R15 UNRESTRICTED;                                            0528
*                                                                  0529
*/*  IDAPFREE--FREE DUMMY ACB                                        */
*/*  FUNCTION = RELEASE ACB OBTAINED BY IDAPGETM                     */
*/*  INPUT = REGISTER 1 POINTS TO DUMMY ACB.                         */
*/*  OUTPUT = REGISTERS 0 AND 1 ARE DESTROYED.                       */
*                                                                  0529
*IDAPFREE:                                                         0529
*   ENTRY;                                                         0529
@EP00529 DS    0H                                                  0530
*   RFY                                                            0530
*    (RWORK1,                                                      0530
*     RWORK2,                                                      0530
*     RWORK3,                                                      0530
*     RWORK4,                                                      0530
*     RWORK5,                                                      0530
*     R10) RSTD;                    /* GET REGS                      */
*   RFY                                                            0531
*    (RWORK0,                                                      0531
*     R1,                                                          0531
*     R14) RSTD;                    /* GET REGISTERS                 */
*   RWORK0=LENGTH(IDABLPRM);        /* GET LENGTH OF DUMMY ACB       */
         LA    RWORK0,52                                           0532
*   GEN(FREEMAIN R,LV=(0),A=(1));   /* FREE DUMMY ACB                */
         FREEMAIN R,LV=(0),A=(1)
*   RFY                                                            0534
*    (RWORK0,                                                      0534
*     RWORK1,                                                      0534
*     RWORK2,                                                      0534
*     RWORK3,                                                      0534
*     RWORK4,                                                      0534
*     RWORK5,                                                      0534
*     R10,                                                         0534
*     R1) UNRSTD;                   /* RELEASE REGS          @ZA07549*/
*   RETURN;                         /* RETURN TO CALLER              */
         B     @EL00001                                            0535
*                                                                  0536
*/* IDAUPXIT - USER PROCESSING ROUTINE (UPAD)                      0536
*01 FUNCTION = TAKE A USER PROCESSING EXIT(UPAD) IF PRESENT AND ACTIVE
*              SET UP PARAMETER LIST WITH COMMON USER INFORMATION  0536
*01 INPUT    = STANDARD VSAM REGISTERS                             0536
*01 OUTPUT   = STANDARD VSAM REGISTERS                       @ZA07549*/
*                                                                  0536
*IDAUPXIT:                                                         0536
*   ENTRY;                          /* TAKE USER EXIT        @ZA07549*/
@EP00536 DS    0H                                                  0537
*   RFY                                                            0537
*     IFGACB BASED(PLHACB);         /* ACB BASE              @ZA07549*/
*   RFY                                                            0538
*     IFGEXLST BASED(ACBUEL);       /* EXIT LIST BASE        @ZA07549*/
*   RFY                                                            0539
*     IDAAMB BASED(RAMB);           /* AMB BASE              @ZA07549*/
*   RFY                                                            0540
*     IDAAMBL BASED(AMBPAMBL);      /* AMBL BASE             @ZA07549*/
*   IF AMBLPATH=ON×                 /* DO NOT EXIT ON PATH   @ZA07549*/
*       AMBLUPGR=ON THEN            /* OR UPGRADE ACCESSES   @ZA07549*/
         L     @15,AMBPAMBL(,RAMB)                                 0541
         TM    AMBLPATH(@15),B'11000000'                           0541
         BNZ   @RT00541                                            0541
*     RETURN;                       /* IGNORE EXIT           @ZA07549*/
*/*  MAKE SURE USER EXIT IS PRESENT AND ACTIVE               @ZA07549*/
*                                                                  0543
*   IF ACBUEL<ONE×                  /* SEE IF AN EXIT LIST   @ZA07549*/
*       EXLLEN<25×                  /* EXISTS WHICH HAS AN   @ZA07549*/
*       EXLUPADA=OFF THEN           /* ACTIVE UPAD ENTRY     @ZA07549*/
         L     @15,PLHACB(,RPLH)                                   0543
         L     @15,ACBUEL(,@15)                                    0543
         LTR   @15,@15                                             0543
         BNP   @RT00543                                            0543
         LH    @10,EXLLEN(,@15)                                    0543
         C     @10,@CF02467                                        0543
         BL    @RT00543                                            0543
         TM    EXLUPADA(@15),B'01000000'                           0543
         BZ    @RT00543                                            0543
*     RETURN;                       /* IF NOT, IGNORE EXIT   @ZA07549*/
*/*  SAVE INPUT REGISTERS.                                   @ZA07549*/
*                                                                  0545
*   GEN SETS(PLHRETO,PLHRET1)(IDASVR14);/* SAVE RETURN       @ZA07549*/
         IDASVR14
*   PLHAMB=RAMB;                    /* SAVE RAMB             @ZA07549*/
         ST    RAMB,PLHAMB(,RPLH)                                  0546
*   PLHRBUFC=RBUFC;                 /* SAVE RBUFC            @ZA07549*/
         ST    RBUFC,PLHRBUFC(,RPLH)                               0547
*   PLHPARM1=RPARM1;                /* SAVE RPARM1           @ZA07549*/
         ST    RPARM1,PLHPARM1(,RPLH)                              0548
*   PLHR13=R13;                     /* SAVE R13              @ZA07549*/
         ST    R13,PLHR13(,RPLH)                                   0549
*   RFY                                                            0550
*    (RWORK0,                                                      0550
*     RWORK1,                                                      0550
*     R15) RSTD;                    /* GET REGISTERS         @ZA07549*/
*   R15=EXLUPADP;                   /* POINT TO EXIT         @ZA07549*/
         L     @10,PLHACB(,RPLH)                                   0551
         L     @10,ACBUEL(,@10)                                    0551
         ICM   R15,15,EXLUPADP(@10)                                0551
*/*  LOAD EXIT IF NECESSARY.                                 @ZA07549*/
*                                                                  0552
*   IF EXLUPADK=ON THEN             /* SEE IF LOAD           @ZA07549*/
         TM    EXLUPADK(@10),B'00100000'                           0552
         BNO   @RF00552                                            0552
*     DO;                           /* LOAD USER RTN         @ZA07549*/
*       RWORK1=R1;                  /* SAVE REG ONE          @ZA07549*/
         LR    RWORK1,R1                                           0554
*       GEN(LOAD  EPLOC=(R15));     /* LOAD ROUTINE          @ZA07549*/
         LOAD  EPLOC=(R15)
*       R15=RWORK0;                 /* GET ADDR INTO R15     @ZA07549*/
         LR    R15,RWORK0                                          0556
*       R1=RWORK1;                  /* RESTORE R1            @ZA07549*/
         LR    R1,RWORK1                                           0557
*     END;                          /* END LOAD              @ZA07549*/
*/*  SET UP COMMON PARAMETER LIST INFORMATION AND TAKE EXIT. @ZA07549*/
*                                                                  0559
*   IF AMBTYPE=AMBDATA THEN         /* SEE IF DATA AMB       @ZA07549*/
@RF00552 TM    AMBTYPE(RAMB),B'01000000'                           0559
         BNZ   @RF00559                                            0559
*     PLHDSTYP=PLHTDATA;            /* SET DATA CODE         @ZA07549*/
         MVI   PLHDSTYP(RPLH),B'00000001'                          0560
*   ELSE                            /* HERE FOR INDEX        @ZA07549*/
*     PLHDSTYP=PLHTIDX;             /* SET INDEX CODE        @ZA07549*/
         B     @RC00559                                            0561
@RF00559 MVI   PLHDSTYP(RPLH),B'00000010'                          0561
*   R1=ADDR(PLHCRPL);               /* POINT TO PARM LIST    @ZA07549*/
@RC00559 LA    R1,PLHCRPL(,RPLH)                                   0562
*I13:                                                              0563
*   DO;                             /* IDACALL(UPAD)                 */
I13      DS    0H                                                  0564
*     CALL UPAD;                    /* EXIT TO UPAD                  */
         BALR  @14,@15                                             0564
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I13;                        /* TAKE USER EXIT        @ZA07549*/
*   RRPL=RPLSAVE;                   /* RESTORE RPL PTR       @ZA07549*/
         L     RRPL,RPLSAVE(,R1)                                   0570
*   RPLH=RPLPLHPT;                  /* RESTORE RPLH          @ZA07549*/
         L     RPLH,RPLPLHPT(,RRPL)                                0571
*/*  DELETE EXIT IF IT WAS LOADED.                           @ZA07549*/
*                                                                  0572
*   IF EXLUPADK=ON THEN             /* ROUTINE LOADED ?      @ZA07549*/
         L     @10,PLHACB(,RPLH)                                   0572
         L     @10,ACBUEL(,@10)                                    0572
         TM    EXLUPADK(@10),B'00100000'                           0572
         BNO   @RF00572                                            0572
*     DO;                           /* DELETE IT             @ZA07549*/
*       RWORK1=R1;                  /* SAVE REGISTER ONE     @ZA07549*/
         LR    RWORK1,R1                                           0574
*       R15=EXLUPADP;               /* POINT TO ROUTINE      @ZA07549*/
         ICM   R15,15,EXLUPADP(@10)                                0575
*       GEN(DELETE EPLOC=(R15));    /* DELETE ROUTINE        @ZA07549*/
         DELETE EPLOC=(R15)
*       R1=RWORK1;                  /* RESTORE REG ONE       @ZA07549*/
         LR    R1,RWORK1                                           0577
*     END;                          /* END OF DELETE         @ZA07549*/
*   RFY                                                            0579
*    (RWORK0,                                                      0579
*     RWORK1,                                                      0579
*     R15) UNRSTD;                  /* DROP REGISTERS        @ZA07549*/
@RF00572 DS    0H                                                  0580
*/*  RESTORE VSAM REGS                                       @ZA07549*/
*                                                                  0580
*   RAMB=PLHAMB;                    /* RESTORE RAMB          @ZA07549*/
         L     RAMB,PLHAMB(,RPLH)                                  0580
*   RBUFC=PLHRBUFC;                 /* RESTORE RBUFC         @ZA07549*/
         L     RBUFC,PLHRBUFC(,RPLH)                               0581
*   RPARM1=PLHPARM1;                /* RESTORE RPARM1        @ZA07549*/
         L     RPARM1,PLHPARM1(,RPLH)                              0582
*   R13=PLHR13;                     /* RESTORE R13           @ZA07549*/
         L     R13,PLHR13(,RPLH)                                   0583
*   GEN(IDARST14);                  /* RESTORE RETURN        @ZA07549*/
         IDARST14
*   RETURN;                         /* RETURN                @ZA07549*/
         B     @EL00001                                            0585
*   RFY                                                            0586
*     R14 UNRSTD;                   /* DROP RETURN           @ZA07549*/
*   GEN(IDAPATCH);                  /* DEFINE A PATCH AREA           */
         IDAPATCH
*   END IDA019RP                    /* END OF MISCELLANEOUS          */
*                                                                  0588
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (LCGPLSSW)                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IDABLPRM)                                       */
*/*%INCLUDE SYSLIB  (IDAWSHD )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IFGEXLST)                                       */
*                                                                  0588
*       ;                                                          0588
         B     @EL00001                                            0588
@DATA    DS    0H
@SM02475 MVC   PLHKEY(0,@07),ARDKEYS-1(@15)
@DATD    DSECT
         DS    0F
IDA019RP CSECT
         DS    0F
@CF00047 DC    F'1'
@CF00038 DC    F'8'
@CF02467 DC    F'25'
@CF02406 DC    F'35'
@DATD    DSECT
         DS    0D
TCBPTR   DS    A
IDA019RP CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV02363 DC    V(IDASBF)
@CV02364 DC    V(IDALOCEX)
@CV02365 DC    V(IDAEXITR)
@CV02366 DC    V(IDA019R5)
@CV02367 DC    V(IDA019RG)
@CV02368 DC    V(IDA019SA)
@CV02369 DC    V(IDAEXEX)
@CV02370 DC    V(IDAWRBFR)
@CV02371 DC    V(IDA019RK)
         DS    0D
HWORD4   DC    H'4'
C2ZERO   DC    X'0000'
@DATD    DSECT
TWELVE   EQU   12                       R14 OFFSET IN USER SAVEAREA
TWENTY8  EQU   28                        REGISTER 2 OFFSET
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019RP CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RWORK0   EQU   @00
RRPL     EQU   @01
R1       EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
R10      EQU   @10
RPARM1   EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
R11      EQU   @11
CVTPTR   EQU   16
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLREQ   EQU   RPLIDWD+2
RPLLEN   EQU   RPLIDWD+3
RPLPLHPT EQU   RPLCOMN+4
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLCHAIN EQU   RPLNXTRP
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLACTIV EQU   RPLCOMN+69
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBUEL   EQU   ACBEXLST
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCSEG  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCORBA EQU   IDABUFC+12
BUFCNXT1 EQU   IDABUFC+24
BUFCINV  EQU   IDABUFC+28
BUFCNXT2 EQU   IDABUFC+37
BUFXIRBA EQU   IDABUFC+40
IDAPLHDR EQU   0
PLHDRCUR EQU   IDAPLHDR+10
IDAPLH   EQU   0
PLHAVL   EQU   IDAPLH
PLHFLG1  EQU   IDAPLH+2
PLHENDRQ EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHKRE   EQU   PLHFLG2
PLHIWAIT EQU   PLHFLG2
PLHEFLGS EQU   IDAPLH+4
PLHINVAL EQU   PLHEFLGS
PLHFLG3  EQU   IDAPLH+6
PLHAFLGS EQU   IDAPLH+7
PLHIOSRQ EQU   PLHAFLGS
PLHACB   EQU   IDAPLH+8
PLHDSTYP EQU   IDAPLH+12
PLHMRPL  EQU   IDAPLH+16
PLHCRPL  EQU   IDAPLH+20
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHARDB  EQU   IDAPLH+44
PLHDBUFC EQU   IDAPLH+52
PLHDIOB  EQU   IDAPLH+76
PLHAMB   EQU   IDAPLH+108
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHRBUFC EQU   IDAPLH+192
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHXPLH  EQU   PLHWAX
PLHSLRBA EQU   IDAPLH+244
PLHKEYPT EQU   IDAPLH+248
PLHPARM1 EQU   IDAPLH+256
PLHR13   EQU   IDAPLH+260
PLHEND   EQU   IDAPLH+280
PLHKEY   EQU   0
IDAAMB   EQU   0
AMBBUFC  EQU   IDAAMB+8
AMBPH    EQU   IDAAMB+12
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBCREAT EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBDEBAD EQU   AMBDEBPT+1
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBPAMBL EQU   IDAAMB+76
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBDFR   EQU   AMBAFLG
AMBWSHD  EQU   IDAAMB+96
AMBEXEX  EQU   IDAAMB+100
IDAAMBL  EQU   0
AMBLACB  EQU   IDAAMBL+8
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLPATH EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLFLG2 EQU   IDAAMBL+36
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDDST   EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDNEST  EQU   IDAAMDSB+4
AMDKEYLN EQU   IDAAMDSB+8
AMDCINV  EQU   IDAAMDSB+20
AMDHLRBA EQU   IDAAMDSB+28
AMDNSLOT EQU   AMDHLRBA
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
AMDNLR   EQU   AMDSTAT+12
AMDASPA  EQU   AMDSTAT+32
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDKR    EQU   ARDTYPE
ARDNPTR  EQU   IDAARDB+4
ARDHRBA  EQU   IDAARDB+12
ARDERBA  EQU   IDAARDB+16
ARDPRF   EQU   IDAARDB+28
ARDKEYS  EQU   IDAARDB+29
IDABLPRM EQU   0
BLPACBID EQU   IDABLPRM
BLPACBST EQU   IDABLPRM+1
BLPBUFLP EQU   IDABLPRM+4
BLPUACB  EQU   BLPBUFLP
BLPFLAGS EQU   IDABLPRM+10
BLPFLAG1 EQU   BLPFLAGS
BLPFLAG2 EQU   BLPFLAGS+1
BLPOCODE EQU   IDABLPRM+12
BLPOACB  EQU   IDABLPRM+13
BLPCORE  EQU   IDABLPRM+16
BLPGFLG  EQU   BLPCORE
BLPIOACB EQU   IDABLPRM+24
BLPDSORG EQU   BLPIOACB+3
BLPOFLGS EQU   IDABLPRM+48
BLPBUFL  EQU   0
BLPBRLFG EQU   BLPBUFL+4
IDAWSHD  EQU   0
WSHDACHN EQU   IDAWSHD+4
WSHDGMTB EQU   WSHDACHN
WSHDNEXT EQU   WSHDACHN+1
WSHDGMWA EQU   IDAWSHD+8
WSHDGMRA EQU   IDAWSHD+20
WSHDSLT  EQU   IDAWSHD+28
WSHDSAD  EQU   WSHDSLT
@NM00053 EQU   WSHDSAD
WSHDSGMW EQU   WSHDSLT+4
WSHDSFM  EQU   WSHDSGMW
WSHDSFLG EQU   WSHDSGMW+10
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
CVTMAP   EQU   0
CVTTCBP  EQU   CVTMAP
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IFGEXLST EQU   0
EXLCOMN  EQU   IFGEXLST
EXLLEN   EQU   EXLCOMN+2
EXLEODF  EQU   EXLCOMN+5
EXLSYNF  EQU   EXLCOMN+10
EXLLERF  EQU   EXLCOMN+15
EXLSCIPF EQU   EXLCOMN+20
EXLUPADF EQU   EXLSCIPF
EXLSCIPS EQU   EXLUPADF
EXLSCIPA EQU   EXLUPADF
EXLUPADA EQU   EXLSCIPA
EXLSCIPK EQU   EXLUPADF
EXLUPADK EQU   EXLSCIPK
EXLSCIPP EQU   EXLCOMN+21
EXLUPADP EQU   EXLSCIPP
EXLLGNF  EQU   EXLCOMN+25
EXLJRNF  EQU   EXLCOMN+30
EXLJRNP  EQU   EXLCOMN+31
EXLOPNF  EQU   EXLCOMN+35
IFGEXLEF EQU   0
EXLENTRY EQU   IFGEXLEF
EXLFLAG  EQU   EXLENTRY
EXLENFL  EQU   EXLFLAG
EXLEXITP EQU   EXLENTRY+1
JRNAD    EQU   0
UPAD     EQU   0
ECB      EQU   0
ECBWAIT  EQU   ECB
ECBPOST  EQU   ECB
USERECB  EQU   0
R15SAVE  EQU   16
RPLSAVE  EQU   0
@NM00075 EQU   0
CURRTCB  EQU   @NM00075+4
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
SHRCNT   EQU   0
USEREXIT EQU   0
PLHEXTEN EQU   PLHEND
PLHRESR1 EQU   PLHEXTEN
PLHBMWRK EQU   PLHEXTEN+5
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
@NM00055 EQU   DEBISAM+12
DEBRPSID EQU   @NM00055
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
RPLECBPT EQU   RPLECB
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
DEBEXPTA EQU   @NM00055+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00024 EQU   PLHEXTEN+4
@NM00076 EQU   @NM00075
EXLEADDR EQU   EXLEXITP
@NM00074 EQU   EXLENFL
EXLLNK   EQU   EXLENFL
EXLACTM  EQU   EXLENFL
EXLSPEC  EQU   EXLENFL
EXLOPNP  EQU   EXLCOMN+36
@NM00073 EQU   EXLOPNF
EXLOPNK  EQU   EXLOPNF
EXLOPNA  EQU   EXLOPNF
EXLOPNS  EQU   EXLOPNF
@NM00072 EQU   EXLJRNF
EXLJRNK  EQU   EXLJRNF
EXLJRNA  EQU   EXLJRNF
EXLJRNS  EQU   EXLJRNF
EXLLGNP  EQU   EXLCOMN+26
@NM00071 EQU   EXLLGNF
EXLLGNK  EQU   EXLLGNF
EXLLGNA  EQU   EXLLGNF
EXLLGNS  EQU   EXLLGNF
@NM00070 EQU   EXLUPADF
EXLUPADS EQU   EXLSCIPS
EXLLERP  EQU   EXLCOMN+16
@NM00069 EQU   EXLLERF
EXLLERK  EQU   EXLLERF
EXLLERA  EQU   EXLLERF
EXLLERS  EQU   EXLLERF
EXLSYNP  EQU   EXLCOMN+11
@NM00068 EQU   EXLSYNF
EXLSYNK  EQU   EXLSYNF
EXLSYNA  EQU   EXLSYNF
EXLSYNS  EQU   EXLSYNF
EXLEODP  EQU   EXLCOMN+6
@NM00067 EQU   EXLEODF
EXLEODK  EQU   EXLEODF
EXLEODA  EQU   EXLEODF
EXLEODS  EQU   EXLEODF
@NM00066 EQU   EXLCOMN+4
EXLLEN2  EQU   EXLLEN
EXLSTYP  EQU   EXLCOMN+1
EXLID    EQU   EXLCOMN
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00065 EQU   CVTFIX+248
@NM00064 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVT      EQU   CVTMAP
@NM00063 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00062 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00061 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00060 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
DEBXSAMB EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBESMVR EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00059 EQU   DEBACS08+12
@NM00058 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00057 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00056 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBUCBA  EQU   DEBUCBAD+1
DEBDVMOD EQU   DEBUCBAD
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBDCBB  EQU   DEBDCBAD+1
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBNMEXT EQU   DEBUSRPG
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBDEBB  EQU   DEBDEBAD+1
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
WSHDSBM  EQU   WSHDSGMW+11
WSHDSFNO EQU   WSHDSFLG
WSHDSBV  EQU   WSHDSGMW+8
WSHDSONX EQU   WSHDSGMW+4
WSHDSFLN EQU   WSHDSFM+1
WSHDSFSP EQU   WSHDSFM
WSHDKEY7 EQU   @NM00053
@NM00054 EQU   @NM00053
WSHDOCHN EQU   IDAWSHD+24
WSHDNUS  EQU   IDAWSHD+18
WSHDLEN  EQU   IDAWSHD+2
WSHDPOOL EQU   IDAWSHD+1
WSHDID   EQU   IDAWSHD
BLPBFLCT EQU   BLPBUFL+6
@NM00052 EQU   BLPBUFL+5
@NM00051 EQU   BLPBRLFG
BLPBFLST EQU   BLPBRLFG
BLPBUFSZ EQU   BLPBUFL
BLPERFLG EQU   IDABLPRM+51
@NM00050 EQU   IDABLPRM+49
@NM00049 EQU   IDABLPRM+28
@NM00048 EQU   BLPIOACB
BLPGAD   EQU   BLPCORE+5
BLPGSP   EQU   BLPCORE+4
BLPGSZ   EQU   BLPCORE+1
BLPGPG   EQU   BLPGFLG
BLPGREQ  EQU   BLPGFLG
BLPFRSTR EQU   BLPFLAG2
BLPFIOSR EQU   BLPFLAG2
BLPFINDX EQU   BLPFLAG2
BLPFDATA EQU   BLPFLAG2
BLPFPRIM EQU   BLPFLAG2
BLPFPATH EQU   BLPFLAG2
BLPFUPGR EQU   BLPFLAG2
BLPFPART EQU   BLPFLAG2
BLPFSTAD EQU   BLPFLAG1
BLPFBFRF EQU   BLPFLAG1
BLPFIOBF EQU   BLPFLAG1
BLPFGSR  EQU   BLPFLAG1
BLPFLSR  EQU   BLPFLAG1
BLPFDEL  EQU   BLPFLAG1
BLPFBLD  EQU   BLPFLAG1
BLPFDBDC EQU   BLPFLAG1
BLPSTRNO EQU   IDABLPRM+9
BLPKEYLN EQU   IDABLPRM+8
BLPIOPLH EQU   BLPUACB
@NM00047 EQU   IDABLPRM+2
@NM00046 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDHKRBA EQU   IDAARDB+8
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDEOD   EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDID    EQU   IDAARDB
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00045 EQU   IDAAMDSB+41
@NM00044 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDLRECL EQU   IDAAMDSB+24
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLIX   EQU   IDAAMBL+56
AMBLDTA  EQU   IDAAMBL+52
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00043 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00042 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00041 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00040 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00039 EQU   IDAAMBL+31
@NM00038 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00037 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00036 EQU   AMBCSWD1+1
@NM00035 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBLSR   EQU   AMBAFLG
@NM00034 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPIXP  EQU   IDAAMB+72
@NM00033 EQU   IDAAMB+68
AMBIWA   EQU   IDAAMB+64
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00032 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00031 EQU   AMBOFLGS
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00030 EQU   AMBINFL
@NM00029 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00028 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00027 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00026 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
@NM00025 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00023 EQU   IDAPLH+265
PLHDRMSK EQU   IDAPLH+264
PLHDRRSC EQU   IDAPLH+252
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
@NM00022 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHIBUFC EQU   IDAPLH+188
PLHNRBA  EQU   IDAPLH+184
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00021 EQU   IDAPLH+172
@NM00020 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHRDFP  EQU   IDAPLH+68
PLHFSP   EQU   IDAPLH+64
PLHRECP  EQU   IDAPLH+60
PLHNBUFC EQU   IDAPLH+56
PLHLRECL EQU   IDAPLH+48
@NM00019 EQU   IDAPLH+43
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00018 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
@NM00017 EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHASKBF EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCHAIN EQU   IDABUFC+48
BUFXORBA EQU   IDABUFC+44
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCBAD  EQU   IDABUFC+20
BUFCCPA  EQU   IDABUFC+16
BUFCDDDD EQU   IDABUFC+8
BUFCAMB  EQU   BUFCPLH
@NM00016 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00015 EQU   IDABUFDR+16
BUFDBUFC EQU   IDABUFDR+12
@NM00014 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00013 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00012 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00011 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00010 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00009 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00008 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00007 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00006 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00005 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00004 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00003 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00002 EQU   RPLRBAR+3
@NM00001 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLLEN2  EQU   RPLLEN
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00194 EQU   @EL00001
@RF00362 EQU   @RC00300
@RF00375 EQU   @RC00300
@RF00268 EQU   @EL00001
RPEXIT   EQU   @EL00001
EQEXIT   EQU   @EL00001
@RT00541 EQU   @EL00001
@RT00543 EQU   @EL00001
@ENDDATA EQU   *
         END   IDA019RP,(C'PLS2109',0701,78172)
