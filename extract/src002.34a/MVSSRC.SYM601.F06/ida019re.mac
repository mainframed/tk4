         TITLE 'IDA019RE--CONTROL INTERVAL SPLIT                       *
                        '
IDA019RE CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'IDA019RE  78.209'                                 0001
IDAREPOS DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00657-IDAREPOS)
         ENTRY IDAREPOS
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
*                                                                  0173
         IDASVR14
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THIS DATA SET IS USING SHROPT(4), AND DATA SET IS NOT A    */
*   /* CATALOG, UCRA OR SCRA THEN PREVENT SPLIT OF HIGH-KEY CINV.    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0174
*   IF AMBTRACE^=ZERO THEN          /* IS IDATRACE ACTIVE?   @ZA29388*/
         L     @10,AMBTRACE(,RAMB)                                 0174
         LTR   @10,@10                                             0174
         BZ    @RF00174                                            0174
*     DO;                           /*                       @ZA29388*/
*       CALL IDA019ST;              /* CALL IDATRACE         @ZA29388*/
         L     @15,@CV01034                                        0176
         BALR  @14,@15                                             0176
*       GEN(DC X'0006');            /* TRACE ID              @ZA29388*/
         DC X'0006'
*     END;                          /*                       @ZA29388*/
*   RBUFC=PLHDBUFC;                 /* POINT TO DATA BUFC    @ZA13567*/
@RF00174 L     RBUFC,PLHDBUFC(,RPLH)                               0179
*   IF AMBINBUF=ON&                 /* IF SHROPT(4)          @ZA13567*/
*       BUFXIRBA=ARDHKRBA&          /* AND HI-KEY CI SPLIT   @ZA13567*/
*       AMBSCRA=OFF&                /* AND NOT SCRA          @ZA13567*/
*       AMBUCRA=OFF&                /* UCRA                  @ZA13567*/
*       AMBCAT=OFF THEN             /* OR CATALOG            @ZA13567*/
         TM    AMBINBUF(RAMB),B'00000001'                          0180
         BNO   @RF00180                                            0180
         L     @10,PLHARDB(,RPLH)                                  0180
         CLC   BUFXIRBA(4,RBUFC),ARDHKRBA(@10)                     0180
         BNE   @RF00180                                            0180
         TM    AMBSCRA(RAMB),B'00011100'                           0180
         BNZ   @RF00180                                            0180
*     DO;                           /* PREVENT CI SPLIT      @ZA13567*/
*       RPLERREG='08'X;             /* IND LOGICAL ERROR     @ZA13567*/
         MVI   RPLERREG(RRPL),X'08'                                0182
*       RPLERRCD=RPLNOEXT;          /* UNABLE TO EXTEND ERR  @ZA13567*/
         MVI   RPLERRCD(RRPL),X'1C'                                0183
*       GOTO CISPLERR;              /* EXIT MODULE           @ZA13567*/
         B     CISPLERR                                            0184
*     END;                          /* END ERROR EXIT        @ZA13567*/
*                                                                  0185
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE SEQUENCE SET HAS BEEN INVALIDATED BY A CONTROL INTERVAL*/
*   /* SPLIT, IT MUST BE REREAD.                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0186
*   RBUFC=PLHIBUFC;                 /* POINT TO SEQ SET BUFC         */
@RF00180 L     RBUFC,PLHIBUFC(,RPLH)                               0186
*   IF RBUFC=ZERO×                  /* SEE IF SEQ SET        @X04SVMR*/
*       BUFCRRD=ON×                 /* MUST BE REREAD        @X04SVMR*/
*       BUFCVAL=OFF×                /* SHR(4) ?              @X04SVMR*/
*       BUFCEXC=OFF                 /* NOT UNDER EXCLUSIVE CONTROL 0187
*                                                            @X04SVMR*/
*     THEN                          /* IF SO, COME HERE              */
         LTR   RBUFC,RBUFC                                         0187
         BZ    @RT00187                                            0187
         TM    BUFCRRD(RBUFC),B'00100000'                          0187
         BO    @RT00187                                            0187
         TM    BUFCVAL(RBUFC),B'00000110'                          0187
         BO    @RF00187                                            0187
@RT00187 DS    0H                                                  0188
*     DO;                                                          0188
*       RAMB=AMBLIX;                /* POINT TO INDEX AMB            */
         L     @10,RPLDACB(,RRPL)                                  0189
         L     @10,ACBAMBL(,@10)                                   0189
         L     RAMB,AMBLIX(,@10)                                   0189
*       PLHSSR=ON;                  /* INDICATE SEQ SET REQ          */
         OI    PLHSSR(RPLH),B'00010000'                            0190
*       IXSILN=ONE;                 /* SET LEVEL NO.         @ZA02289*/
         MVI   IXSILN+200(RPLH),X'01'                              0191
*       RPARM1=PLHSSRBA;            /* GET DESIRED RBA       @X04SVMR*/
         L     RPARM1,PLHSSRBA(,RPLH)                              0192
*I01:                                                              0193
*       DO;                         /* IDACALL(IDAGRB)               */
I01      DS    0H                                                  0194
*         CALL IDAGRB;              /* EXIT TO IDAGRB                */
         L     @15,@CV01011                                        0194
         BALR  @14,@15                                             0194
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I01;                    /* CALL BUFFER MANAGER           */
*     END;                          /* END, REREAD SEQ SET           */
*   RAMB=AMBLDTA;                   /* POINT TO DATA AMB             */
@RF00187 L     @10,RPLDACB(,RRPL)                                  0201
         L     @10,ACBAMBL(,@10)                                   0201
         L     RAMB,AMBLDTA(,@10)                                  0201
*   IF RPLERREG^='00'X THEN                                        0202
         CLI   RPLERREG(RRPL),0                                    0202
         BNE   @RT00202                                            0202
*     GOTO CISPLERR;                /* IF ERROR, EXIT                */
*   RBUFC=PLHDBUFC;                 /* POINT TO DATA BUFC            */
         L     RBUFC,PLHDBUFC(,RPLH)                               0204
*   IF BUFCMW=ON                    /* IF CINV WAS UPDATED,          */
*     THEN                          /* WRITE IT BEFORE SPLIT.        */
         TM    BUFCMW(RBUFC),B'10000000'                           0205
         BNO   @RF00205                                            0205
*I02:                                                              0206
*     DO;                           /* IDACALL(IDAWRBFR)             */
I02      DS    0H                                                  0207
*       CALL IDAWRBFR;              /* EXIT TO IDAWRBFR              */
         L     @15,@CV01014                                        0207
         BALR  @14,@15                                             0207
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I02;                      /* FORCE OUT WRITES.             */
*   ELSE                            /* BUFC MUST WRT NOT ON.         */
*     BUFCORBA=BUFCDDDD;            /* MAKE SURE ORBA HAS RBA        */
         B     @RC00205                                            0213
@RF00205 L     @10,BUFCDDDD(,RBUFC)                                0213
         ST    @10,BUFCORBA(,RBUFC)                                0213
*   IF PLHRECP=PLHFSP               /* IF AT END OF CI       @ZA10852*/
*       &BUFXIRBA=ARDHKRBA THEN     /* & CI AT END OF DS     @ZA10852*/
@RC00205 CLC   PLHRECP(4,RPLH),PLHFSP(RPLH)                        0214
         BNE   @RF00214                                            0214
         L     @10,PLHARDB(,RPLH)                                  0214
         CLC   BUFXIRBA(4,RBUFC),ARDHKRBA(@10)                     0214
         BNE   @RF00214                                            0214
*     PLHADDTE=ON;                  /* SET ADD TO END ON     @ZA10852*/
         OI    PLHADDTE(RPLH),B'00010000'                          0215
*   ELSE                            /* IF NONE OF THE ABOVE  @ZA10852*/
*     PLHADDTE=OFF;                 /* SET ADD TO END OFF    @ZA10852*/
         B     @RC00214                                            0216
@RF00214 NI    PLHADDTE(RPLH),B'11101111'                          0216
*/*  AT THIS POINT ALL WRITES HAVE BEEN DONE.  CONTROL INTERVALS OR
*    CONTROL AREAS WILL BE SPLIT (IF NECESSARY) UNTIL A CALL TO DATA
*    INSERT IS MADE THAT RESULTS IN THE DATA RECORD BEING INSERTED 0217
*    (PLHCIINS SET ON).                                              */
*                                                                  0217
*   DO WHILE PLHCIINS=OFF;          /* SPLIT CINVS UNTIL INS.        */
@RC00214 B     @DE00217                                            0217
@DL00217 DS    0H                                                  0218
*/*  DETERMINE NUMBER OF FREE CONTROL INTERVALS IN THE CONTROL AREA.
*    IF THIS IS A SEQUENTIAL INSERT, ALLOW FOR FREE SPACE IN TESTING
*    FOR ENOUGH SPACE IN THE CONTROL AREA.  IF NOT ENOUGH FREE CONTROL
*    INTERVALS, THE CONTROL AREA MUST BE SPLIT.                      */
*                                                                  0218
*     RFY                                                          0218
*      (RWORK1,                                                    0218
*       RWORK2) RSTD;               /* GET WORK REGISTERS    @X04SVMR*/
*     RBUFC=PLHIBUFC;               /* POINT TO SEQ SET              */
         L     RBUFC,PLHIBUFC(,RPLH)                               0219
*     RWORK2=IXHFSO;                /* PTR TO END OF FS ENTRIE       */
         L     @10,BUFCBAD(,RBUFC)                                 0220
         LH    RWORK2,IXHFSO(,@10)                                 0220
*     RPARM1=(RWORK2-LENGTH(IDAIXH))/* LENGTH OF FS ENTRIES          */
*         /(IXHFLPLN-TWO);          /* DIVIDED BY ENTRY LENGTH       */
         LR    RPARM1,RWORK2                                       0221
         SL    RPARM1,@CF00085                                     0221
         SLR   @07,@07                                             0221
         IC    @07,IXHFLPLN(,@10)                                  0221
         BCTR  @07,0                                               0221
         BCTR  @07,0                                               0221
         LR    @09,RPARM1                                          0221
         SLR   @08,@08                                             0221
         DR    @08,@07                                             0221
         LR    RPARM1,@09                                          0221
*     IF AMBSIS=ON×                 /* IF SEQ. INSERT AND ADDING TO
*                                      THE END OF CI ON NON-UPDATE 0222
*                                                            @ZA07541*/
*         (RPLSEQ=ON&RPLUPD=OFF&PLHADDTE=ON) THEN/*          @ZA07541*/
         TM    AMBSIS(RAMB),B'00000100'                            0222
         BO    @RT00222                                            0222
         TM    RPLSEQ(RRPL),B'00100000'                            0222
         BNO   @RF00222                                            0222
         TM    RPLUPD(RRPL),B'00000010'                            0222
         BNZ   @RF00222                                            0222
         TM    PLHADDTE(RPLH),B'00010000'                          0222
         BNO   @RF00222                                            0222
@RT00222 DS    0H                                                  0223
*       RPARM1=RPARM1-AMDFSCA;      /* LEAVE FREE SPACE              */
         L     @10,AMBDSB(,RAMB)                                   0223
         SH    RPARM1,AMDFSCA(,@10)                                0223
*     IF ONE>RPARM1                 /* SEE IF ENOUGH ROOM IN CA      */
*       THEN                        /* IF NOT, SPLIT CA              */
@RF00222 LA    @10,1                                               0224
         CR    RPARM1,@10                                          0224
         BNL   @RF00224                                            0224
*       DO;                                                        0225
*         RPARM1=ONE;               /* ONE CI TO INSERT      @X04SVMR*/
         LR    RPARM1,@10                                          0226
*I03:                                                              0227
*         DO;                       /* IDACALL(IDA019RF)             */
I03      DS    0H                                                  0228
*           CALL IDA019RF;          /* EXIT TO IDA019RF              */
         L     @15,@CV01016                                        0228
         BALR  @14,@15                                             0228
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I03;                  /* CALL CA SPLIT         @X04SVMR*/
*         IF RPLERREG^='00'X×       /* IF ERROR              @ZA10890*/
*             RPARM1^=ZERO THEN     /* IF INSERT OR SPLIT    @ZA10890*/
         CLI   RPLERREG(RRPL),0                                    0234
         BNE   @RT00234                                            0234
         LTR   RPARM1,RPARM1                                       0234
         BZ    @RF00234                                            0234
@RT00234 DS    0H                                                  0235
*           DO;                     /* NOT REQUIRED          @ZA10890*/
*             IF RPLERREG='00'X&    /* IF NO ERROR           @ZA24733*/
*                 RPARM1^=0 THEN    /* IF SPLIT NOT REQD     @ZA24733*/
         CLI   RPLERREG(RRPL),0                                    0236
         BNE   @RF00236                                            0236
         LTR   RPARM1,RPARM1                                       0236
         BZ    @RF00236                                            0236
*               CALL IDAREPOS;      /* REPOSITION PLH        @ZA10890*/
         L     @15,@CA01045                                        0237
         BALR  @14,@15                                             0237
*             GO TO CISPLERR;       /* EXIT FROM MODULE.     @ZA10890*/
         B     CISPLERR                                            0238
*           END;                    /*                       @ZA10890*/
*         RBUFC=PLHIBUFC;           /* POINT TO INDEX BUFC           */
@RF00234 L     RBUFC,PLHIBUFC(,RPLH)                               0240
*         RWORK2=IXHFSO;            /* PTR TO END OF FS              */
         L     @10,BUFCBAD(,RBUFC)                                 0241
         LH    RWORK2,IXHFSO(,@10)                                 0241
*       END;                        /* END OF CA SPLIT CALL          */
*/*  DETERMINE THE RBA OF THE NEXT FREE CONTROL INTERVAL.            */
*                                                                  0243
*     RWORK1=RWORK2-IXHFLPLN+TWO+BUFCBAD;/* 1ST FREE CI              */
@RF00224 L     @10,BUFCBAD(,RBUFC)                                 0243
         LR    RWORK1,RWORK2                                       0243
         SLR   @07,@07                                             0243
         IC    @07,IXHFLPLN(,@10)                                  0243
         SLR   RWORK1,@07                                          0243
         AL    RWORK1,@CF00076                                     0243
         ALR   RWORK1,@10                                          0243
*     RWORK2=IXHPTLS;               /* GET RBA PTR MASK              */
         SLR   RWORK2,RWORK2                                       0244
         IC    RWORK2,IXHPTLS(,@10)                                0244
*     GEN(EX   RWORK2,ICMINS);      /* GET RBA MULTIPLIER            */
         EX   RWORK2,ICMINS
*     DIWSAVE3=IXHBRBA+AMDCINV*RWORK2;/* GET DATA CINV RBA           */
         L     @10,AMBIWA(,RAMB)                                   0246
         L     @07,BUFCBAD(,RBUFC)                                 0246
         L     @15,AMBDSB(,RAMB)                                   0246
         LR    @09,RWORK2                                          0246
         M     @08,AMDCINV(,@15)                                   0246
         AL    @09,IXHBRBA(,@07)                                   0246
         ST    @09,DIWSAVE3(,@10)                                  0246
*/*  LOCATE THE SPLIT POINT (IF ANY) WITHIN THE CONTROL INTERVAL BASED
*    ON THE MODE OF INSERT, THE INSERT POINT, AND THE LENGTH OF THE
*    RECORD TO BE INSERTED.                                          */
*                                                                  0247
*     RBUFC=PLHDBUFC;               /* POINT TO DATA BUFC            */
         L     RBUFC,PLHDBUFC(,RPLH)                               0247
*     SPLTDPTR=ZERO;                /* ZERO SPLIT POINTER            */
         SLR   @07,@07                                             0248
         ST    @07,SPLTDPTR(,@10)                                  0248
*     IF(PLHRECP^=PLHFSP×           /* IF THE INSERT IS NOT          */
*         PLHADDTE=OFF)&            /* TO THE END AND NOT TO         */
*         (PLHRECP^=BUFCBAD×(RPLUPD=ON×/* THE MIDDLE OF A CINV OR    */
*         (RPLSEQ=OFF&AMBSIS=OFF))) /* IF IT IS A DIR        @X04SVRQ*/
*       THEN                        /* INSERT TO THE BEGINNING       */
         CLC   PLHRECP(4,RPLH),PLHFSP(RPLH)                        0249
         BNE   @GL00011                                            0249
         TM    PLHADDTE(RPLH),B'00010000'                          0249
         BNZ   @RF00249                                            0249
@GL00011 CLC   PLHRECP(4,RPLH),BUFCBAD(RBUFC)                      0249
         BNE   @RT00249                                            0249
         TM    RPLUPD(RRPL),B'00000010'                            0249
         BO    @RT00249                                            0249
         TM    RPLSEQ(RRPL),B'00100000'                            0249
         BNZ   @RF00249                                            0249
         TM    AMBSIS(RAMB),B'00000100'                            0249
         BNZ   @RF00249                                            0249
@RT00249 DS    0H                                                  0250
*       DO;                         /* OF A CINV, SPLIT NEEDED       */
*                                                                  0250
*         /***********************************************************/
*         /*                                                         */
*         /* LOCATE THE POINT AT WHICH THE CINV SHOULD BE SPLIT      */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0251
*         RFY                                                      0251
*          (RWORK3) RSTD;           /* GET WORK REGISTER     @X04SVMR*/
*                                                                  0251
*         /***********************************************************/
*         /*                                                         */
*         /* INITIALIZE THE SPLIT POINTER TO THE INSERT POINT.       */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0252
*         IF PLHBWD=ON THEN         /* BACKWARD              @ZA02289*/
         TM    PLHBWD(RPLH),B'00010000'                            0252
         BNO   @RF00252                                            0252
*           DO;                     /* YES                   @ZA02289*/
*             DIWHRBA=PLHRDFC;      /* SAVE COUNT            @ZA02289*/
         L     @10,AMBIWA(,RAMB)                                   0254
         LH    @15,PLHRDFC(,RPLH)                                  0254
         ST    @15,DIWHRBA(,@10)                                   0254
*             IF PLHRDFP->RDFREPL=ON THEN/* IF COUNT >1      @ZA02289*/
         L     @10,PLHRDFP(,RPLH)                                  0255
         TM    RDFREPL(@10),B'00001000'                            0255
         BNO   @RF00255                                            0255
*               PLHRDFC=PLHRDFP->RDFLL-PLHRDFC+/* SET COUNT FOR    0256
*                                                            @ZA02289*/
*                   ONE;            /* FORWARD               @ZA02289*/
         LCR   @15,@15                                             0256
         SLR   @00,@00                                             0256
         ICM   @00,3,RDFLL(@10)                                    0256
         ALR   @15,@00                                             0256
         AL    @15,@CF00046                                        0256
         STH   @15,PLHRDFC(,RPLH)                                  0256
*           END;                    /*                       @ZA02289*/
@RF00255 DS    0H                                                  0258
*         SPLTDPTR=PLHRECP;         /* SET DATA PTR FOR SPLIT        */
@RF00252 L     @10,AMBIWA(,RAMB)                                   0258
         L     @00,PLHRECP(,RPLH)                                  0258
         ST    @00,SPLTDPTR(,@10)                                  0258
*         RWORK3=PLHRDFP;           /* SET SPLIT RDF PTR             */
         L     RWORK3,PLHRDFP(,RPLH)                               0259
*         SPLTRDFC=PLHRDFC;         /* SET SPLIT RDF COUNT           */
         LH    @00,PLHRDFC(,RPLH)                                  0260
         ST    @00,SPLTRDFC(,@10)                                  0260
*         IF RWORK3->RDFREPL=OFF THEN/* GET THE LENGTH OF THE        */
         TM    RDFREPL(RWORK3),B'00001000'                         0261
         BNZ   @RF00261                                            0261
*           RWORK2=RWORK3->RDFLL;   /* DATA RECORD THAT IS           */
         SLR   RWORK2,RWORK2                                       0262
         ICM   RWORK2,3,RDFLL(RWORK3)                              0262
*         ELSE                      /* TO THE RIGHT OF THE           */
*           DO;                     /* INSERT POINT. IT IS           */
         B     @RC00261                                            0263
@RF00261 DS    0H                                                  0264
*             RWORK1=RWORK3+LENGTH(IDARDF);/* NEEDED IN CASE THE     */
         LA    RWORK1,3                                            0264
         ALR   RWORK1,RWORK3                                       0264
*             RWORK2=RWORK1->RDFLL; /* SPLIT POINT SEARCH            */
         SLR   RWORK2,RWORK2                                       0265
         ICM   RWORK2,3,RDFLL(RWORK1)                              0265
*           END;                    /* STARTS FROM THE INSERT        */
*         RWORK1=BUFCBAD+AMDCINV-LENGTH(IDACIDF);/* POINT.           */
@RC00261 L     @10,AMBDSB(,RAMB)                                   0267
         L     @10,AMDCINV(,@10)                                   0267
         L     RWORK1,BUFCBAD(,RBUFC)                              0267
         ALR   RWORK1,@10                                          0267
         SL    RWORK1,@CF00197                                     0267
*/*  FOR SEQUENTIAL INSERT, SPLIT AT THE INSERT POINT.  FOR NON-   0268
* SEQUENTIAL INSERT, SPLIT AT THE MIDPOINT.                          */
*                                                                  0268
*         IF(RPLSEQ=OFF&AMBSIS=OFF& /* IF NOT A SEQ INS      @X04SVRQ*/
*             (RPLRLEN<=AMDCINV-LENGTH(IDARDF)/* AND NOT A SPANNED   */
*             -LENGTH(IDACIDF)))    /* RECORD TO BE INSERTED         */
*             ×RPLUPD=ON THEN       /* OR UPDATE MODE                */
         TM    RPLSEQ(RRPL),B'00100000'                            0268
         BNZ   @GL00016                                            0268
         TM    AMBSIS(RAMB),B'00000100'                            0268
         BNZ   @GL00016                                            0268
         SL    @10,@CF00050                                        0268
         C     @10,RPLRLEN(,RRPL)                                  0268
         BNL   @RT00268                                            0268
@GL00016 TM    RPLUPD(RRPL),B'00000010'                            0268
         BNO   @RF00268                                            0268
@RT00268 DS    0H                                                  0269
*           DO;                     /* COME HERE TO DO CINV SPLIT FOR
*                                      DIRECT                        */
*             ENDPTR=(AMDCINV-RWORK1->CIDFLL+/* SET MAX VALUE FOR    */
*                 RPLRLEN+LENGTH(IDARDF)*FIVE)/* SPLIT POINT ASSUMING*/
*                 /TWO+BUFCBAD;     /* MAXIMUM RDF EXPANSION         */
         L     @10,AMBIWA(,RAMB)                                   0270
         L     @15,AMBDSB(,RAMB)                                   0270
         L     @08,AMDCINV(,@15)                                   0270
         SH    @08,CIDFLL(,RWORK1)                                 0270
         AL    @08,RPLRLEN(,RRPL)                                  0270
         AL    @08,@CF00038                                        0270
         SRDA  @08,32                                              0270
         D     @08,@CF00076                                        0270
         L     @08,BUFCBAD(,RBUFC)                                 0270
         ALR   @09,@08                                             0270
         ST    @09,ENDPTR(,@10)                                    0270
*             IF PLHRECP>ENDPTR     /* IF INSERT POINT AFTER         */
*               THEN                /* MIDPOINT, START SEARCH        */
         C     @09,PLHRECP(,RPLH)                                  0271
         BNL   @RF00271                                            0271
*               DO;                 /* AT CINV BEGINNING             */
*                 SPLTDPTR=BUFCBAD; /* POINT TO BEGINNING OF         */
         ST    @08,SPLTDPTR(,@10)                                  0273
*                 RWORK3=RWORK1;    /* CINV AND SET RDF PTR          */
         LR    RWORK3,RWORK1                                       0274
*                 CALL NEXTRDF;     /* ADVANCE RDF POINTER           */
         BAL   @14,NEXTRDF                                         0275
*               END;                /* CINV. END OF SCH INIT         */
*             RWORK1=SPLTDPTR;      /* WK1 COUNT INCLUDES INS        */
*                                                                  0277
@RF00271 L     @10,AMBIWA(,RAMB)                                   0277
         L     RWORK1,SPLTDPTR(,@10)                               0277
*             /*******************************************************/
*             /*                                                     */
*             /* LOCATE A SPLIT POINT CLOSE TO THE MIDPOINT OF THE   */
*             /* CINV.                                               */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0278
*             DO WHILE RWORK1<ENDPTR;/* SEARCH FOR SPLIT POINT       */
         B     @DE00278                                            0278
@DL00278 DS    0H                                                  0279
*               IF RWORK1=PLHRECP THEN/* IF AT INSERT POINT, ADD     */
         C     RWORK1,PLHRECP(,RPLH)                               0279
         BNE   @RF00279                                            0279
*                 RWORK1=RWORK1+RPLRLEN+LENGTH(IDARDF);/* APPROX LEN */
         LR    @10,RWORK1                                          0280
         AL    @10,RPLRLEN(,RRPL)                                  0280
         AL    @10,@CF00066                                        0280
         LR    RWORK1,@10                                          0280
*               ELSE                /* ADD LENGTH FROM RDF IF        */
*                 DO;               /* NOT AT INSERT POINT           */
         B     @RC00279                                            0281
@RF00279 DS    0H                                                  0282
*                   IF RWORK1+RWORK2>ENDPTR THEN/* IF SP WILL BE   0282
*                                      PASSED,                       */
         LR    @10,RWORK1                                          0282
         ALR   @10,RWORK2                                          0282
         L     @15,AMBIWA(,RAMB)                                   0282
         CL    @10,ENDPTR(,@15)                                    0282
         BH    @RT00282                                            0282
*                     GO TO SPFOUND;/* EXIT BEFORE ADD               */
*                   RWORK1=RWORK1+RWORK2;/* INCREMENT BY REC LENGTH  */
         ALR   RWORK1,RWORK2                                       0284
*                   SPLTDPTR=SPLTDPTR+RWORK2;/* ADD RECORD LENGTH    */
         LR    @10,RWORK2                                          0285
         AL    @10,SPLTDPTR(,@15)                                  0285
         ST    @10,SPLTDPTR(,@15)                                  0285
*                   IF SPLTRDFC^=ONE THEN/* IF NOT THE LAST RDF IN   */
         L     @10,SPLTRDFC(,@15)                                  0286
         C     @10,@CF00046                                        0286
         BE    @RF00286                                            0286
*                     SPLTRDFC=SPLTRDFC-ONE;/* A GROUP, DECREMENT CNT*/
         BCTR  @10,0                                               0287
         ST    @10,SPLTRDFC(,@15)                                  0287
*                   ELSE            /* END OF RDF GROUP.             */
*                     CALL NEXTRDF; /* ELSE, ADVANCE RDF             */
         B     @RC00286                                            0288
@RF00286 BAL   @14,NEXTRDF                                         0288
*                 END;              /* END--LENGTH FROM RDF          */
@RC00286 DS    0H                                                  0290
*             END;                  /* END OF SPLIT PT SEARCH        */
@RC00279 DS    0H                                                  0290
@DE00278 L     @10,AMBIWA(,RAMB)                                   0290
         C     RWORK1,ENDPTR(,@10)                                 0290
         BL    @DL00278                                            0290
*           END;                    /* END OF DIRECT CODE            */
*                                                                  0291
*         /***********************************************************/
*         /*                                                         */
*         /* COME HERE WHEN THE SPLIT POINT HAS BEEN FOUND.          */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0292
*SPFOUND:                                                          0292
*         RFY                                                      0292
*          (RWORK1) UNRSTD;         /* DROP WORK REGISTER            */
@RF00268 DS    0H                                                  0292
SPFOUND  DS    0H                                                  0293
*/*  DO A SPECIAL TYPE OF SPLIT FOR A LARGE RECORD TO BE INSERTED OR
*    A LARGE RECORD AT THE BEGINNING OF A CONTROL INTERVAL.          */
*                                                                  0293
*         IF SPLTDPTR=BUFCBAD       /* IF A LARGE RECORD WAS         */
*           THEN                    /* AT BEGINNING OF CINV,         */
         L     @10,AMBIWA(,RAMB)                                   0293
         L     @05,BUFCBAD(,RBUFC)                                 0293
         C     @05,SPLTDPTR(,@10)                                  0293
         BNE   @RF00293                                            0293
*           DO;                     /* SPLIT AT INSERT POINT.        */
*             IF RPLUPD=ON THEN     /* UPDATE MODE           @ZA02289*/
         TM    RPLUPD(RRPL),B'00000010'                            0295
         BNO   @RF00295                                            0295
*               DO;                 /* YES                   @ZA02289*/
*                 RWORK3=BUFCBAD+AMDCINV-/* POINT TO RDF     @ZA02289*/
*                     LENGTH(IDACIDF)-/* OF FIRST RCD        @ZA02289*/
*                     LENGTH(IDARDF);/* IN BUFFER            @ZA02289*/
         L     @15,AMBDSB(,RAMB)                                   0297
         LR    RWORK3,@05                                          0297
         AL    RWORK3,AMDCINV(,@15)                                0297
         SL    RWORK3,@CF00050                                     0297
*                 SPLTDPTR=BUFCBAD+RWORK3->RDFLL;/* SET SPLIT PT   0298
*                                                            @ZA02289*/
         SLR   @00,@00                                             0298
         ICM   @00,3,RDFLL(RWORK3)                                 0298
         ALR   @05,@00                                             0298
         ST    @05,SPLTDPTR(,@10)                                  0298
*                 IF RWORK3->RDFCTNU=ON THEN/* MULTIPLE RDF  @ZA02289*/
         TM    RDFCTNU(RWORK3),B'01000000'                         0299
         BNO   @RF00299                                            0299
*                   DO;             /* YES                   @ZA02289*/
*                     RWORK3=RWORK3-LENGTH(IDARDF);/* POINT TO COUNT
*                                      RDF                   @ZA02289*/
         SL    RWORK3,@CF00066                                     0301
*                     SPLTRDFC=RWORK3->RDFLL;/* SET SPLIT COUNT    0302
*                                                            @ZA02289*/
         SLR   @05,@05                                             0302
         ICM   @05,3,RDFLL(RWORK3)                                 0302
         ST    @05,SPLTRDFC(,@10)                                  0302
*                   END;            /*                       @ZA02289*/
*                 ELSE              /* NOT MULTIPLE RDF      @ZA02289*/
*                   SPLTRDFC=ONE;   /* SET COUNT AT 1        @ZA02289*/
         B     @RC00299                                            0304
@RF00299 L     @10,AMBIWA(,RAMB)                                   0304
         MVC   SPLTRDFC(4,@10),@CF00046                            0304
*                 IF SPLTRDFC^=ONE THEN/* IS RECORD A MULTIPLE OF =
*                                      LENGTH                @ZA02289*/
@RC00299 L     @10,AMBIWA(,RAMB)                                   0305
         L     @05,SPLTRDFC(,@10)                                  0305
         C     @05,@CF00046                                        0305
         BE    @RF00305                                            0305
*                   SPLTRDFC=SPLTRDFC-ONE;/* YES, ADJUST COUNT       */
         BCTR  @05,0                                               0306
         ST    @05,SPLTRDFC(,@10)                                  0306
*                 ELSE              /*                       @ZA02289*/
*                   CALL NEXTRDF;   /* ADJUST RDFS           @ZA02289*/
         B     @RC00305                                            0307
@RF00305 BAL   @14,NEXTRDF                                         0307
*               END;                /*                       @ZA02289*/
*             ELSE                  /* NOT UPDATE            @ZA02289*/
*               DO;                 /*                       @ZA02289*/
         B     @RC00295                                            0309
@RF00295 DS    0H                                                  0310
*                 SPLTDPTR=PLHRECP; /* GET THE THREE                 */
         L     @10,AMBIWA(,RAMB)                                   0310
         L     @05,PLHRECP(,RPLH)                                  0310
         ST    @05,SPLTDPTR(,@10)                                  0310
*                 RWORK3=PLHRDFP;   /* SPLIT VALUES FROM             */
         L     RWORK3,PLHRDFP(,RPLH)                               0311
*                 SPLTRDFC=PLHRDFC; /* THE PLH.                      */
         LH    @05,PLHRDFC(,RPLH)                                  0312
         ST    @05,SPLTRDFC(,@10)                                  0312
*               END;                /*                       @ZA02289*/
*           END;                    /* END OF BEG. OF CINV           */
@RC00295 DS    0H                                                  0315
*         IF SPLTDPTR=BUFCBAD×      /* IF LARGE RECORD INS TO        */
*             SPLTDPTR=PLHFSP THEN  /* BEGINNING OF CINV OR          */
@RF00293 L     @10,AMBIWA(,RAMB)                                   0315
         L     @10,SPLTDPTR(,@10)                                  0315
         C     @10,BUFCBAD(,RBUFC)                                 0315
         BE    @RT00315                                            0315
         C     @10,PLHFSP(,RPLH)                                   0315
         BNE   @RF00315                                            0315
@RT00315 DS    0H                                                  0316
*           SPLTDPTR=ZERO;          /* EOCI, NO SPLIT NEEDED.        */
         L     @10,AMBIWA(,RAMB)                                   0316
         SLR   @05,@05                                             0316
         ST    @05,SPLTDPTR(,@10)                                  0316
*       END;                        /* END OF SPLIT NEEDED           */
@RF00315 DS    0H                                                  0318
*     SPLTRDFP=RWORK3;              /* SAVE RDF POINTER              */
@RF00249 L     @10,AMBIWA(,RAMB)                                   0318
         ST    RWORK3,SPLTRDFP(,@10)                               0318
*/*  GET A WORK BUFFER, MAKE A FREE SPACE CONTROL INTERVAL, AND SET
*    THE RBA TO THE NEXT FREE CONTROL INTERVAL.                      */
*                                                                  0319
*I04:                                                              0319
*     DO;                           /* IDACALL(IDAGNFL)              */
I04      DS    0H                                                  0320
*       CALL IDAGNFL;               /* EXIT TO IDAGNFL               */
         L     @15,@CV01010                                        0320
         BALR  @14,@15                                             0320
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I04;                      /* GET A WORK BUFFER             */
*     IF RPLERREG^='00'X THEN       /* BUFFER ERROR          @X04SVRQ*/
         CLI   RPLERREG(RRPL),0                                    0326
         BNE   @RT00326                                            0326
*       GOTO CISPLERR;              /* EXIT.                 @X04SVRQ*/
*     BUFCDDDD=DIWSAVE3;            /* SET INPUT RBA                 */
         L     @10,AMBIWA(,RAMB)                                   0328
         L     @10,DIWSAVE3(,@10)                                  0328
         ST    @10,BUFCDDDD(,RBUFC)                                0328
*     BUFCORBA=DIWSAVE3;            /* SET OUTPUT RBA                */
         ST    @10,BUFCORBA(,RBUFC)                                0329
*     BUFXIRBA=DIWSAVE3;            /* SET EXCL INPUT RBA    @X04SVMR*/
         ST    @10,BUFXIRBA(,RBUFC)                                0330
*     BUFXORBA=DIWSAVE3;            /* SET EXCL OUTPUT RBA   @ZA17187*/
         ST    @10,BUFXORBA(,RBUFC)                                0331
*     BUFCEXC=ON;                   /* SET BUFC EXCL.        @X04SVRQ*/
*     BUFCVAL=ON;                   /* SET BUFFER VALID              */
         OI    BUFCEXC(RBUFC),B'00000110'                          0333
*     CALL BUILDFS;                 /* BUILD FS CINV                 */
         BAL   @14,BUILDFS                                         0334
*/*  SAVE THE INSERT POINT ADDRESS.                                  */
*                                                                  0335
*     DIWSAVE2=PLHRECP-PLHDBUFC->BUFCBAD;/* SAVE INS PT      @ZA31009*/
         L     @10,AMBIWA(,RAMB)                                   0335
         L     @05,PLHDBUFC(,RPLH)                                 0335
         L     @05,BUFCBAD(,@05)                                   0335
         L     @00,PLHRECP(,RPLH)                                  0335
         SLR   @00,@05                                             0335
         ST    @00,DIWSAVE2(,@10)                                  0335
*     DIWSAVE5=PLHFSP-PLHDBUFC->BUFCBAD;/* IN CASE CNTL      @ZA31009*/
         L     @00,PLHFSP(,RPLH)                                   0336
         SLR   @00,@05                                             0336
         ST    @00,DIWSAVE5(,@10)                                  0336
*     DIWLRBA=PLHRDFP-PLHDBUFC->BUFCBAD;/* AREA SPLIT.       @ZA31009*/
         LCR   @05,@05                                             0337
         AL    @05,PLHRDFP(,RPLH)                                  0337
         ST    @05,DIWLRBA(,@10)                                   0337
*     IF PLHBWD=OFF THEN            /* BACKWARD              @ZA02289*/
         TM    PLHBWD(RPLH),B'00010000'                            0338
         BNZ   @RF00338                                            0338
*       DIWHRBA=PLHRDFC;            /* NO, SET COUNT                 */
         LH    @05,PLHRDFC(,RPLH)                                  0339
         ST    @05,DIWHRBA(,@10)                                   0339
*     IF SPLTDPTR=ZERO              /* IF NO SPLIT, MOVE             */
*       THEN                        /* INSERT POINT.                 */
@RF00338 L     @10,AMBIWA(,RAMB)                                   0340
         L     @10,SPLTDPTR(,@10)                                  0340
         LTR   @10,@10                                             0340
         BNZ   @RF00340                                            0340
*       DO;                                                        0341
*                                                                  0341
*         /***********************************************************/
*         /*                                                         */
*         /* RESET INSERT POINT TO THE BEGINNING OF THE NEWLY-CREATED*/
*         /* FREE SPACE CONTROL INTERVAL IF NO SPLIT IS NECESSARY.   */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0342
*         PLHFSP=BUFCBAD;           /* ALL FS                        */
         L     @10,BUFCBAD(,RBUFC)                                 0342
         ST    @10,PLHFSP(,RPLH)                                   0342
*         PLHRECP=BUFCBAD;          /* BOCI                          */
         ST    @10,PLHRECP(,RPLH)                                  0343
*         PLHRDFP=BUFCBAD+AMDCINV-LENGTH(IDACIDF);/* POINT TO CIDF   */
         L     @05,AMBDSB(,RAMB)                                   0344
         AL    @10,AMDCINV(,@05)                                   0344
         SL    @10,@CF00197                                        0344
         ST    @10,PLHRDFP(,RPLH)                                  0344
*       END;                        /* END OF NON-SPLIT CODE         */
*                                                                  0345
*     /***************************************************************/
*     /*                                                             */
*     /* SPLIT A CONTROL INTERVAL OF DATA                            */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0346
*     ELSE                          /* HERE FOR CI SPLIT.            */
*       DO;                                                        0346
*                                                                  0346
         B     @RC00340                                            0346
@RF00340 DS    0H                                                  0347
*         /***********************************************************/
*         /*                                                         */
*         /* COPY HIGH KEY PORTION OF THE DATA TO THE NEW CI.        */
*         /*                                                 @ZA31009*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0347
*         RFY                                                      0347
*          (RWORK4,                                                0347
*           RWORK5) RSTD;           /* GET REGISTERS         @X04SVMR*/
*         RWORK3=PLHFSP-SPLTDPTR;   /* AMT OF DATA TO RIGHT          */
         L     @10,AMBIWA(,RAMB)                                   0348
         L     @10,SPLTDPTR(,@10)                                  0348
         L     RWORK3,PLHFSP(,RPLH)                                0348
         SLR   RWORK3,@10                                          0348
*         RPARM1=RWORK3;            /* SAVE LENGTH OF MOVE           */
         LR    RPARM1,RWORK3                                       0349
*         RWORK5=RWORK3;            /* OF SP IN BOTH ODD REGS        */
         LR    RWORK5,RWORK3                                       0350
*         RWORK2=BUFCBAD;           /* RESET NEW CINV PTR            */
         L     RWORK2,BUFCBAD(,RBUFC)                              0351
*         RWORK4=SPLTDPTR;          /* SPLIT POINT                   */
         LR    RWORK4,@10                                          0352
*         GEN(MVCL  RWORK2,RWORK4); /* MOVE DATA TO NEW CINV         */
*                                                                  0353
         MVCL  RWORK2,RWORK4
*         /***********************************************************/
*         /*                                                         */
*         /* ADJUST DATA-RELATED POINTERS IN THE PLH IF NEEDED.      */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0354
*         IF PLHRECP>SPLTDPTR×(PLHRECP=/* IF INSERT PT IN THE        */
*             SPLTDPTR&RPLUPD=ON)   /* NEW CONTROL           @ZA28147*/
*           THEN                    /* INTERVAL, RESET RECORD        */
         L     @10,PLHRECP(,RPLH)                                  0354
         L     @05,AMBIWA(,RAMB)                                   0354
         L     @05,SPLTDPTR(,@05)                                  0354
         CR    @10,@05                                             0354
         BH    @RT00354                                            0354
         CR    @10,@05                                             0354
         BNE   @RF00354                                            0354
         TM    RPLUPD(RRPL),B'00000010'                            0354
         BNO   @RF00354                                            0354
@RT00354 DS    0H                                                  0355
*           DO;                     /* AND FREE SPACE POINTERS       */
*             PLHRECP=PLHRECP-SPLTDPTR+BUFCBAD;/* NEW REC PTR        */
         L     @10,AMBIWA(,RAMB)                                   0356
         L     @05,PLHRECP(,RPLH)                                  0356
         SL    @05,SPLTDPTR(,@10)                                  0356
         L     @10,BUFCBAD(,RBUFC)                                 0356
         ALR   @05,@10                                             0356
         ST    @05,PLHRECP(,RPLH)                                  0356
*             PLHFSP=BUFCBAD+RPARM1;/* SET NEW FS POINTER            */
         ALR   @10,RPARM1                                          0357
         ST    @10,PLHFSP(,RPLH)                                   0357
*           END;                    /* END OF NEW IP CODE            */
*         ELSE                      /* INSERT PT NOT IN NEW CI       */
*           PLHFSP=PLHFSP-RPARM1;   /* IF IN OLD, ADJUST FS PTR      */
*                                                                  0359
         B     @RC00354                                            0359
@RF00354 L     @10,PLHFSP(,RPLH)                                   0359
         SLR   @10,RPARM1                                          0359
         ST    @10,PLHFSP(,RPLH)                                   0359
*         /***********************************************************/
*         /*                                                         */
*         /* BUILD CIDF IN NEW CI.                           @ZA31009*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0360
*         RWORK2=BUFCBAD;           /* RESET NEW CINV POINTER        */
@RC00354 L     RWORK2,BUFCBAD(,RBUFC)                              0360
*         RWORK3=RWORK2+AMDCINV-LENGTH(IDACIDF);/* NEW CIDF          */
         LA    @10,4                                               0361
         L     @05,AMBDSB(,RAMB)                                   0361
         L     @05,AMDCINV(,@05)                                   0361
         LR    RWORK3,RWORK2                                       0361
         ALR   RWORK3,@05                                          0361
         SLR   RWORK3,@10                                          0361
*         RFY                                                      0362
*           IDACIDF BASED(RWORK3);  /* DEFINE CIDF BASE              */
*         CIDFLL=CIDFLL-RPARM1;     /* SPACE IN NEW                  */
         LH    @00,CIDFLL(,RWORK3)                                 0363
         SLR   @00,RPARM1                                          0363
         STH   @00,CIDFLL(,RWORK3)                                 0363
*         CIDFOSET=RPARM1;          /* SET FS OFFSET                 */
         STH   RPARM1,CIDFOSET(,RWORK3)                            0364
*         RWORK4=PLHDBUFC->BUFCBAD+AMDCINV-LENGTH(IDACIDF);        0365
         L     @15,PLHDBUFC(,RPLH)                                 0365
         L     @15,BUFCBAD(,@15)                                   0365
         ALR   @05,@15                                             0365
         SLR   @05,@10                                             0365
         LR    RWORK4,@05                                          0365
*         RFY                                                      0366
*           IDACIDF BASED(RWORK4);  /* POINT TO OLD CINV CIDF        */
*                                                                  0366
*         /***********************************************************/
*         /*                                                         */
*         /* INITIALIZE RDF POINTERS.                        @ZA31009*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0367
*         RWORK2=CIDFLL+CIDFOSET+PLHDBUFC->BUFCBAD;/* A(LAST RDF)    */
         LH    RWORK2,CIDFLL(,RWORK4)                              0367
         AH    RWORK2,CIDFOSET(,RWORK4)                            0367
         ALR   RWORK2,@15                                          0367
*         DIWSAVE3=RWORK2;          /* SAVE FOR RDF MOVE     @ZA31009*/
         L     @10,AMBIWA(,RAMB)                                   0368
         ST    RWORK2,DIWSAVE3(,@10)                               0368
*         RFY                                                      0369
*           RWORK1 RSTD;            /* GET WORK REGISTER             */
*         RWORK1=SPLTRDFP;          /* GET A(SPLIT RDF)              */
         L     RWORK1,SPLTRDFP(,@10)                               0370
*         RWORK5=RWORK1-RWORK2;     /* GET TOTAL RDF LENGTH          */
         LR    RWORK5,RWORK1                                       0371
         SLR   RWORK5,RWORK2                                       0371
*         RWORK2=RWORK3;            /* PTR TO END OF RDFS            */
*                                                                  0372
         LR    RWORK2,RWORK3                                       0372
*         /***********************************************************/
*         /*                                                         */
*         /* COPY THE RDFS REPRESENTING THE DATA SPLIT OFF TO THE NEW*/
*         /* CI. STEP 1.) COPY THE RDF AT THE SPLIT POINT. STEP 2.)  */
*         /* COPY THE RDFS TO THE LEFT OF THE SPLIT POINT. STEP 1 - -*/
*         /* IF THE INSERT POINT FALLS AT A GROUP RDF, COPY THE RDF  */
*         /* TO THE NEW CONTROL INTERVAL AND SET ITS COUNT. IF THE   */
*         /* COUNT IS ONE, CONVERT IT TO A SINGLE RDF. IF THE OLD    */
*         /* GROUP RDF COUNT GOES TO ONE IT MUST BE CONVERTED TO A   */
*         /* SINGLE RDF AND IF IT GOES TO ZERO (AT BEGINNING OF THE  */
*         /* GROUP) ELIMINATE IT COMPLETELY. ADJUST THE RDF POINTER  */
*         /* AND THE RDF COUNT IN THE PLACEHOLDER.                   */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0373
*         IF RWORK1->RDFREPL=ON     /* IF SPLIT IS AT GROUP          */
*           THEN                    /* RDF, COUNTS MUST BE           */
         TM    RDFREPL(RWORK1),B'00001000'                         0373
         BNO   @RF00373                                            0373
*           DO;                     /* RESET                         */
*             RWORK2=RWORK2-LENGTH(GRPRDF);/* POINT TO NEW RDF       */
         SL    RWORK2,@CF00356                                     0375
*             RWORK2->GRPRDF=RWORK1->GRPRDF;/* COPY GROUP RDF        */
         MVC   GRPRDF(6,RWORK2),GRPRDF(RWORK1)                     0376
*             RWORK2->RDFLL=SPLTRDFC;/* NEW CNT                      */
         L     @10,SPLTRDFC(,@10)                                  0377
         STCM  @10,3,RDFLL(RWORK2)                                 0377
*             IF RWORK2->RDFLL=ONE  /* IF NEW RDF IS A SINGLE        */
*               THEN                /* ONE, CONVERT IT               */
         C     @10,@CF00046                                        0378
         BNE   @RF00378                                            0378
*               DO;                                                0379
*                 RWORK2->IDARDF=ZERO;/* CLEAR 1ST RDF       @ZA02289*/
         SLR   @10,@10                                             0380
         STCM  @10,7,IDARDF(RWORK2)                                0380
*                 RWORK2=RWORK2+LENGTH(IDARDF);/* PTR TO 2ND RDF     */
         LA    @10,3                                               0381
         ALR   RWORK2,@10                                          0381
*                 RWORK2->RDFREPL=OFF;/* INDICATE A NON-GROUP        */
*                 RWORK2->RDFCTNU=OFF;/* RDF.                        */
         NI    RDFREPL(RWORK2),B'10110111'                         0383
*                 RPARM1=LENGTH(IDARDF);/* GET FS DECREMENT          */
         LR    RPARM1,@10                                          0384
*               END;                /* END OF SINGLE RDF             */
*             ELSE                  /* NOT SINGLE RDF.               */
*               RPARM1=LENGTH(GRPRDF);/* GET FS DECREMENT            */
*                                                                  0386
         B     @RC00378                                            0386
@RF00378 LA    RPARM1,6                                            0386
*             /*******************************************************/
*             /*                                                     */
*             /* ADJUST CIDF IN NEW CI TO REFLECT RDF COPIED OVER.   */
*             /*                                             @ZA31009*/
*             /*                                                     */
*             /*******************************************************/
*                                                                  0387
*             RWORK3->CIDFLL=RWORK3->CIDFLL-RPARM1;/* SET FS         */
*                                                                  0387
@RC00378 LH    @10,CIDFLL(,RWORK3)                                 0387
         SLR   @10,RPARM1                                          0387
         STH   @10,CIDFLL(,RWORK3)                                 0387
*             /*******************************************************/
*             /*                                                     */
*             /* ADJUST RDF POINTER AND COUNTER IN THE PLH IF NEEDED.*/
*             /*                                                     */
*             /*******************************************************/
*                                                                  0388
*             IF PLHRDFP=RWORK1     /* IF INSERT POINT RDF IS        */
*               THEN                /* INVOLVED, ADJUST IT TOO       */
         C     RWORK1,PLHRDFP(,RPLH)                               0388
         BNE   @RF00388                                            0388
*               DO;                                                0389
*                                                                  0389
*                 /***************************************************/
*                 /*                                                 */
*                 /* DETERMINE PLHRDFP ADJUSTMENT FACTOR     @ZA31009*/
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0390
*                 RPARM1=ZERO;      /* ASSUME ZERO           @ZA31009*/
*                                                                  0390
         SLR   RPARM1,RPARM1                                       0390
*                 /***************************************************/
*                 /*                                                 */
*                 /* DETERMINE WHAT THE REPL COUNT WILL BE   @ZA31009*/
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0391
*                 RWORK3=RWORK1->RDFLL-SPLTRDFC;/*           @ZA31009*/
         L     @10,AMBIWA(,RAMB)                                   0391
         SLR   RWORK3,RWORK3                                       0391
         ICM   RWORK3,3,RDFLL(RWORK1)                              0391
         SL    RWORK3,SPLTRDFC(,@10)                               0391
*                 IF RWORK3=ONE THEN/* IF REPL WILL SWITCH TO      0392
*                                                            @ZA31009*/
         C     RWORK3,@CF00046                                     0392
         BNE   @RF00392                                            0392
*                   RPARM1=LENGTH(IDARDF);/* NONREPL, USE 3  @ZA31009*/
         LA    RPARM1,3                                            0393
*                 ELSE              /* REPL COUNT NOT 1      @ZA31009*/
*                   IF RWORK3=ZERO THEN/* IF GROUP RDF WILL  @ZA31009*/
         B     @RC00392                                            0394
@RF00392 LTR   RWORK3,RWORK3                                       0394
         BNZ   @RF00394                                            0394
*                     RPARM1=LENGTH(GRPRDF);/* GO, USE 6     @ZA31009*/
         LA    RPARM1,6                                            0395
*                 PLHRDFP=RWORK1+RPARM1;/* NEW PLH RDF PTR           */
@RF00394 DS    0H                                                  0396
@RC00392 LR    @10,RWORK1                                          0396
         ALR   @10,RPARM1                                          0396
         ST    @10,PLHRDFP(,RPLH)                                  0396
*                 IF PLHRDFC>SPLTRDFC/* WAS INSERT RDF MOVED @ZA31009*/
*                   THEN            /* TO NEW CONTROL INTERVAL       */
         LH    @10,PLHRDFC(,RPLH)                                  0397
         L     @15,AMBIWA(,RAMB)                                   0397
         L     @15,SPLTRDFC(,@15)                                  0397
         CR    @10,@15                                             0397
         BNH   @RF00397                                            0397
*                   PLHRDFC=PLHRDFC-SPLTRDFC;/* YES, NEW PLH RDFC  0398
*                                                            @ZA31009*/
         SLR   @10,@15                                             0398
         STH   @10,PLHRDFC(,RPLH)                                  0398
*                 ELSE              /* INSERT RDF NOT MOVED.         */
*                   IF PLHRDFC<SPLTRDFC×/* SET NEW RDF PTR   @ZA31009*/
*                       (PLHRDFC=SPLTRDFC&RPLUPD=ON) THEN/*  @ZA31009*/
         B     @RC00397                                            0399
@RF00397 LH    @10,PLHRDFC(,RPLH)                                  0399
         L     @15,AMBIWA(,RAMB)                                   0399
         L     @15,SPLTRDFC(,@15)                                  0399
         CR    @10,@15                                             0399
         BL    @RT00399                                            0399
         CR    @10,@15                                             0399
         BNE   @RF00399                                            0399
         TM    RPLUPD(RRPL),B'00000010'                            0399
         BNO   @RF00399                                            0399
@RT00399 DS    0H                                                  0400
*                     PLHRDFP=RWORK2;/* NEW RDF PTR ALSO             */
         ST    RWORK2,PLHRDFP(,RPLH)                               0400
*               END;                /* END OF IP = SP CODE           */
*             ELSE                  /* RDF PTR NOT AT SPLIT RDF.     */
*               IF PLHRDFP<RWORK1 THEN/* IF RDF IN NEW CINV  @ZA31009*/
         B     @RC00388                                            0402
@RF00388 L     @10,PLHRDFP(,RPLH)                                  0402
         CR    @10,RWORK1                                          0402
         BNL   @RF00402                                            0402
*                 PLHRDFP=PLHRDFP-RWORK1+RWORK2;/* NEW RDF PTR     0403
*                                                            @ZA31009*/
         SLR   @10,RWORK1                                          0403
         ALR   @10,RWORK2                                          0403
         ST    @10,PLHRDFP(,RPLH)                                  0403
*           END;                    /* END OF SPLIT GROUP RDF        */
*                                                                  0404
*         /***********************************************************/
*         /*                                                         */
*         /* IF SPLITTING AT A SINGLE RDF, INCLUDE THE RDF TO THE    */
*         /* RIGHT OF THE SPLIT POINT IN THE MOVE AND ADJUST THE RDF */
*         /* POINTER IN THE PLACEHOLDER.                             */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0405
*         ELSE                      /* HERE IF NON-GROUP RDF         */
*           DO;                                                    0405
         B     @RC00373                                            0405
@RF00373 DS    0H                                                  0406
*             RWORK5=RWORK5+LENGTH(IDARDF);/* INCLUDE RDF POINTED    */
         LA    @10,3                                               0406
         ALR   RWORK5,@10                                          0406
*             IF RWORK1=PLHRDFP     /* IF IP = SP, RESET PLH         */
*                 &RPLUPD=OFF THEN  /*                       @ZA02289*/
         C     RWORK1,PLHRDFP(,RPLH)                               0407
         BNE   @RF00407                                            0407
         TM    RPLUPD(RRPL),B'00000010'                            0407
         BNZ   @RF00407                                            0407
*               PLHRDFP=RWORK1+LENGTH(IDARDF);/* ADJUST PTR          */
         ALR   @10,RWORK1                                          0408
         ST    @10,PLHRDFP(,RPLH)                                  0408
*             ELSE                  /* IP ^= SP.                     */
*               IF PLHRDFP^>RWORK1 THEN/* SEE IF RDF IN NEW CINV   0409
*                                                            @ZA02289*/
         B     @RC00407                                            0409
@RF00407 L     @10,PLHRDFP(,RPLH)                                  0409
         CR    @10,RWORK1                                          0409
         BH    @RF00409                                            0409
*                 PLHRDFP=PLHRDFP-RWORK1+RWORK2-LENGTH(IDARDF);/* NEW*/
         SLR   @10,RWORK1                                          0410
         ALR   @10,RWORK2                                          0410
         SL    @10,@CF00066                                        0410
         ST    @10,PLHRDFP(,RPLH)                                  0410
*           END;                    /* END OF NON-GROUP RDF          */
*                                                                  0411
@RF00409 DS    0H                                                  0411
@RC00407 DS    0H                                                  0412
*         /***********************************************************/
*         /*                                                         */
*         /* STEP 2) COPY RDFS TO THE LEFT OF THE SPLIT POINT.       */
*         /*                                                 @ZA31009*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0412
*         IF RWORK5>ZERO THEN       /* IS THERE A LENGTH?    @ZA31009*/
@RC00373 LTR   RWORK5,RWORK5                                       0412
         BNP   @RF00412                                            0412
*           DO;                     /* YES DATA WILL ACTUALLY BE   0413
*                                      MOVED.                @ZA31009*/
*             RWORK2=RWORK2-RWORK5; /* SET UP TO ADDRESS             */
         SLR   RWORK2,RWORK5                                       0414
*             RWORK4=DIWSAVE3;      /* SET UP FROM ADDRESS   @ZA31009*/
         L     @10,AMBIWA(,RAMB)                                   0415
         L     RWORK4,DIWSAVE3(,@10)                               0415
*             RWORK3=RWORK5;        /* GET LENGTH OF RDFS            */
         LR    RWORK3,RWORK5                                       0416
*             RPARM1=RWORK3;        /* SAVE LENGTH                   */
         LR    RPARM1,RWORK3                                       0417
*             GEN(MVCL  RWORK2,RWORK4);/* MOVE RDFS TO NEW CINV      */
         MVCL  RWORK2,RWORK4
*             RWORK3=BUFCBAD+AMDCINV-LENGTH(IDACIDF);/* NEW CIDF PTR.
*                                                            @ZA31009*/
         L     @10,AMBDSB(,RAMB)                                   0419
         L     RWORK3,BUFCBAD(,RBUFC)                              0419
         AL    RWORK3,AMDCINV(,@10)                                0419
         SL    RWORK3,@CF00197                                     0419
*             RWORK3->CIDFLL=RWORK3->CIDFLL-RPARM1;/* NEW FS VALUE   */
         LH    @10,CIDFLL(,RWORK3)                                 0420
         SLR   @10,RPARM1                                          0420
         STH   @10,CIDFLL(,RWORK3)                                 0420
*           END;                    /* END OF NON-ZERO LENGTH      0421
*                                      DETECTION GROUP.      @ZA31009*/
*         RFY                                                      0422
*           IDACIDF;                /* DROP CIDF BASE        @X04SVMR*/
@RF00412 DS    0H                                                  0423
*         RFY                                                      0423
*          (RWORK2,                                                0423
*           RWORK4,                                                0423
*           RWORK5) UNRSTD;         /* DROP REGISTERS        @X04SVMR*/
*       END;                        /* END OF SPLIT CINV             */
*     PLHCIINS=ON;                  /* INDICATE INS DONE     @X04SVMR*/
*                                                                  0425
@RC00340 OI    PLHCIINS(RPLH),B'00000100'                          0425
*     /***************************************************************/
*     /*                                                             */
*     /* IF THE RECORD TO BE INSERTED IS NOT SPANNED,        @X04SVMR*/
*     /* AND INSERT IS TO NEW CINV, INSERT                   @ZA31009*/
*     /*                                                             */
*     /***************************************************************/
*                                                                  0426
*     IF RPLRLEN<=AMDCINV-LENGTH(IDARDF)-LENGTH(IDACIDF)&RPLUPD=OFF
*       THEN                        /* NOT SPANNED           @ZA02289*/
         L     @10,AMBDSB(,RAMB)                                   0426
         L     @10,AMDCINV(,@10)                                   0426
         LR    @06,@10                                             0426
         SL    @06,@CF00050                                        0426
         C     @06,RPLRLEN(,RRPL)                                  0426
         BL    @RF00426                                            0426
         TM    RPLUPD(RRPL),B'00000010'                            0426
         BNZ   @RF00426                                            0426
*       DO;                                                        0427
*         RWORK1=BUFCBAD;           /* POINTER TO NEW CINV           */
         L     RWORK1,BUFCBAD(,RBUFC)                              0428
*         IF PLHRECP>=RWORK1&       /* IF INSERT IS IN NEW           */
*             PLHRECP<RWORK1+AMDCINV/* CINV, THEN SWAP               */
*           THEN                    /* BUFFERS AND INSERT            */
         L     @06,PLHRECP(,RPLH)                                  0429
         CR    @06,RWORK1                                          0429
         BL    @RF00429                                            0429
         ALR   @10,RWORK1                                          0429
         CR    @06,@10                                             0429
         BNL   @RF00429                                            0429
*           DO;                                                    0430
*             RWORK3=PLHDBUFC;      /* ORIGINAL DATA BUFC            */
         L     RWORK3,PLHDBUFC(,RPLH)                              0431
*             PLHDBUFC=RBUFC;       /* INSERT BUFC                   */
         ST    RBUFC,PLHDBUFC(,RPLH)                               0432
*             DIWBUFC=RWORK3;       /* PLH BUFC                      */
         L     @10,AMBIWA(,RAMB)                                   0433
         ST    RWORK3,DIWBUFC(,@10)                                0433
*             RFY                                                  0434
*               RWORK3 UNRSTD;      /* DROP WORK REGISTER    @X04SVMR*/
*I05:                                                              0435
*             DO;                   /* IDACALL(IDA019RM)             */
I05      DS    0H                                                  0436
*               CALL IDA019RM;      /* EXIT TO IDA019RM              */
         L     @15,@CV01018                                        0436
         BALR  @14,@15                                             0436
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I05;              /* CALL DATA INSERT              */
*                                                                  0441
*             /*******************************************************/
*             /*                                                     */
*             /* IF DATA INSERT RETURNS A NO FIT CODE RESET THE      */
*             /* INSERT DONE FLAG SO ANOTHER CONTROL INTERVAL SPLIT  */
*             /* WILL OCCUR IN ORDER TO GET ROOM FOR THE RECORD. CALL*/
*             /* INDEX INSERT REGARDLESS OF WHETHER OR NOT THE DATA  */
*             /* RECORD IS INSERTED IN ORDER TO REFLECT THE NEWLY    */
*             /* CREATED DATA CONTROL INTERVAL IN THE INDEX.         */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0442
*             RFY                                                  0442
*               R15 RSTD;           /* SAVE RETURN CODE              */
*             IF R15^=ZERO THEN     /* IF RECORD TOO BIG,            */
         LTR   R15,R15                                             0443
         BZ    @RF00443                                            0443
*               PLHCIINS=OFF;       /* NO INSERT YET                 */
         NI    PLHCIINS(RPLH),B'11111011'                          0444
*             RFY                                                  0445
*               R15 UNRSTD;         /* DROP RETURN CODE      @ZA31009*/
@RF00443 DS    0H                                                  0446
*/*  THE BUFCS WERE SWAPPED FOR DATA INSERT, SWITCH BACK.    @ZA31009*/
*                                                                  0446
*             RBUFC=PLHDBUFC;       /* GET CURRENT DATA BUFC         */
         L     RBUFC,PLHDBUFC(,RPLH)                               0446
*             RFY                                                  0447
*               RWORK3 RSTD;        /* GET WORK REGISTER             */
*             RWORK3=DIWBUFC;       /* GET DATA BUFC                 */
         L     @10,AMBIWA(,RAMB)                                   0448
         L     RWORK3,DIWBUFC(,@10)                                0448
*             DIWBUFC=RBUFC;        /* GET INSERT BUFC BACK          */
         ST    RBUFC,DIWBUFC(,@10)                                 0449
*             PLHDBUFC=RWORK3;      /* PUT DATA BUFC BACK            */
         ST    RWORK3,PLHDBUFC(,RPLH)                              0450
*             RFY                                                  0451
*               RWORK3 UNRSTD;      /* DROP WORK REGISTER    @X04SVMR*/
*           END;                    /* END OF INSERT IN NEW  @ZA31009*/
*       END;                        /* END OF DATA INS CALL  @X04SVMR*/
@RF00429 DS    0H                                                  0454
*     IF SPLTDPTR^=ZERO THEN        /* IF TRUE SPLIT OCCURRED      0454
*                                                            @ZA31009*/
@RF00426 L     @10,AMBIWA(,RAMB)                                   0454
         L     @10,SPLTDPTR(,@10)                                  0454
         LTR   @10,@10                                             0454
         BZ    @RF00454                                            0454
*       DO;                         /* WRITE OUT PAIR OF CIS @ZA31009*/
*         CALL WRTDATA;             /* WRITE OLD/NEW CI      @ZA31009*/
*                                                                  0456
         BAL   @14,WRTDATA                                         0456
*         /***********************************************************/
*         /*                                                         */
*         /* POINT TO THE OLD CIDF.                          @ZA31009*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0457
*         RBUFC=PLHDBUFC;           /* RESET TO OLD CI BUFC  @ZA31009*/
         L     RBUFC,PLHDBUFC(,RPLH)                               0457
*         RFY                                                      0458
*           RWORK1 RSTD;            /* GET WORK REG          @ZA31009*/
*         RWORK1=BUFCBAD+AMDCINV-LENGTH(IDACIDF);/*          @ZA31009*/
         L     @10,AMBDSB(,RAMB)                                   0459
         L     RWORK1,BUFCBAD(,RBUFC)                              0459
         AL    RWORK1,AMDCINV(,@10)                                0459
         SL    RWORK1,@CF00197                                     0459
*         RWORK1->CIDFBUSY=OFF;     /* RESET BUSY FLAG       @ZA31009*/
         NI    CIDFBUSY(RWORK1),B'01111111'                        0460
*         RFY                                                      0461
*           RWORK1 UNRSTD;          /* FREE WORK REG         @ZA31009*/
*         IF RPLERREG^='00'X THEN   /* IF ANY ERROR, FREE    @ZA31009*/
         CLI   RPLERREG(RRPL),0                                    0462
         BE    @RF00462                                            0462
*           CALL CISPLER3;          /* INSERT BFR AND EXIT   @ZA31009*/
         BAL   @14,CISPLER3                                        0463
*         CALL IDASPLT2;            /* ERASE HIGH KEY PART   @ZA31009*/
@RF00462 BAL   @14,IDASPLT2                                        0464
*         IF PLHBWD=ON THEN         /* IF BWD, ADJUST COUNT. @ZA31009*/
         TM    PLHBWD(RPLH),B'00010000'                            0465
         BNO   @RF00465                                            0465
*           IF PLHRDFP->RDFREPL=ON THEN/* IF REPLICATED THEN @ZA31009*/
         L     @10,PLHRDFP(,RPLH)                                  0466
         TM    RDFREPL(@10),B'00001000'                            0466
         BNO   @RF00466                                            0466
*             PLHRDFC=PLHRDFP->RDFLL-/* COMPLIMENT THE       @ZA31009*/
*                 PLHRDFC+ONE;      /* RDF COUNT.            @ZA31009*/
         SLR   @05,@05                                             0467
         ICM   @05,3,RDFLL(@10)                                    0467
         SH    @05,PLHRDFC(,RPLH)                                  0467
         AL    @05,@CF00046                                        0467
         STH   @05,PLHRDFC(,RPLH)                                  0467
*           ELSE                    /* IF NOT REPLICATED THEN      0468
*                                                            @ZA31009*/
*             PLHRDFC=ONE;          /* SET RDF COUNT TO ONE. @ZA31009*/
*                                                                  0468
         B     @RC00466                                            0468
@RF00466 MVC   PLHRDFC(2,RPLH),@CH00046                            0468
*         /***********************************************************/
*         /*                                                         */
*         /* IF THE RECORD TO BE INSERTED IS NOT SPANNED, INSERT.    */
*         /*                                                 @ZA31009*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0469
*         IF(RPLRLEN<=AMDCINV-LENGTH(IDARDF)-LENGTH(IDACIDF))/* NOT
*                                      SPANNED               @ZA31009*/
*             &RPLUPD=OFF           /* NOT UPDATE            @ZA31009*/
*             &((PLHRECP>=BUFCBAD)  /* AND INSERT POINT      @ZA31009*/
*             &(PLHRECP<=SPLTRDFP)) /* IN OLD CINV           @ZA31009*/
*           THEN                                                   0469
@RC00466 DS    0H                                                  0469
@RF00465 L     @10,AMBDSB(,RAMB)                                   0469
         L     @10,AMDCINV(,@10)                                   0469
         SL    @10,@CF00050                                        0469
         C     @10,RPLRLEN(,RRPL)                                  0469
         BL    @RF00469                                            0469
         TM    RPLUPD(RRPL),B'00000010'                            0469
         BNZ   @RF00469                                            0469
         L     @10,PLHRECP(,RPLH)                                  0469
         C     @10,BUFCBAD(,RBUFC)                                 0469
         BL    @RF00469                                            0469
         L     @05,AMBIWA(,RAMB)                                   0469
         C     @10,SPLTRDFP(,@05)                                  0469
         BH    @RF00469                                            0469
*           DO;                     /*                       @ZA31009*/
*I06:                                                              0471
*             DO;                   /* IDACALL(IDA019RM)             */
I06      DS    0H                                                  0472
*               CALL IDA019RM;      /* EXIT TO IDA019RM              */
         L     @15,@CV01018                                        0472
         BALR  @14,@15                                             0472
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I06;              /* CALL DATA INSERT      @ZA31009*/
*             RFY                                                  0478
*               R15 RSTD;           /* SAVE RETURN CODE      @ZA31009*/
*             IF R15^=ZERO THEN     /* IF RECORD TOO BIG,    @ZA31009*/
         LTR   R15,R15                                             0479
         BZ    @RF00479                                            0479
*               PLHCIINS=OFF;       /* NO INSERT YET         @ZA31009*/
         NI    PLHCIINS(RPLH),B'11111011'                          0480
*           END;                    /* END INS PT IN OLD CI  @ZA31009*/
*       END;                        /* END OF WRITE OLD/NEW  @ZA31009*/
*/*  IF THE NEW CI CONTAINS ONLY FREE SPACE OR 1 RECORD (INSERTED    */
*/*  ABOVE), WRITE IT ANYWAY.  THIS ENSURES THAT A SEQ SET ENTRY     */
*/*  WILL NOT BE CREATED THAT POINTS TO AN INVALID CI.       @ZA31009*/
*                                                                  0483
*     ELSE                          /* NOT A TRUE CI SPLIT   @ZA31009*/
*       DO;                         /* WRITE OUT NEW CI      @ZA31009*/
         B     @RC00454                                            0483
@RF00454 DS    0H                                                  0484
*         RBUFC=DIWBUFC;            /* POINT TO INSERT BUFC  @ZA31009*/
         L     @14,AMBIWA(,RAMB)                                   0484
         L     RBUFC,DIWBUFC(,@14)                                 0484
*         BUFCMW=ON;                /* SET WRITE FLAG        @ZA31009*/
         OI    BUFCMW(RBUFC),B'10000000'                           0485
*I07:                                                              0486
*         DO;                       /* IDACALL(IDAWRBFR)             */
I07      DS    0H                                                  0487
*           CALL IDAWRBFR;          /* EXIT TO IDAWRBFR              */
         L     @15,@CV01014                                        0487
         BALR  @14,@15                                             0487
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I07;                  /* WRITE NEW CI          @ZA31009*/
*         IF RPLERREG^='00'X THEN   /* IF ANY ERROR, FREE    @ZA31009*/
         CLI   RPLERREG(RRPL),0                                    0493
         BE    @RF00493                                            0493
*           CALL CISPLER3;          /* INSERT BFR AND EXIT   @ZA31009*/
         BAL   @14,CISPLER3                                        0494
*       END;                        /* END OF NON-SPLIT CODE @ZA31009*/
@RF00493 DS    0H                                                  0496
*     RPARM1=ZERO;                  /* INDICATE INSERT               */
@RC00454 SLR   RPARM1,RPARM1                                       0496
*I08:                                                              0497
*     DO;                           /* IDACALL(IDA019RH)             */
I08      DS    0H                                                  0498
*       CALL IDA019RH;              /* EXIT TO IDA019RH              */
         L     @15,@CV01017                                        0498
         BALR  @14,@15                                             0498
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I08;                      /* CALL INDEX INSERT             */
*     IF R15^=ZERO                  /* IF ENTRY WILL NOT FIT,        */
*       THEN                        /* THE CONTROL AREA MUST         */
         SLR   @14,@14                                             0504
         CR    R15,@14                                             0504
         BE    @RF00504                                            0504
*       DO;                         /* MUST BE SPLIT                 */
*         RPLERRCD=RPLIXEND;        /* SEQ SET IS FULL       @ZA31009*/
         MVI   RPLERRCD(RRPL),X'10'                                0506
*         IF SPLTDPTR^=ZERO THEN    /* IF A TRUE SPLIT       @ZA31009*/
         L     @10,AMBIWA(,RAMB)                                   0507
         C     @14,SPLTDPTR(,@10)                                  0507
         BE    @RF00507                                            0507
*           DO;                     /* BACK OUT BUSY BIT     @ZA31009*/
*                                                                  0508
*             /*******************************************************/
*             /*                                                     */
*             /* TURN OFF BUSY BIT ON DASD DEVICE. ALSO REFRESH      */
*             /* CONTENTS OF THE CI IN STORAGE (HIGH KEY RECORDS HAVE*/
*             /* BEEN REMOVED).                              @ZA31009*/
*             /*                                                     */
*             /*******************************************************/
*                                                                  0509
*             RFY                                                  0509
*               R15 UNRSTD;         /*                       @ZA31009*/
*             RPARM1=PLHDBUFC->BUFCDDDD;/* INSERT RBA VALUE  @ZA31009*/
         L     @10,PLHDBUFC(,RPLH)                                 0510
         L     RPARM1,BUFCDDDD(,@10)                               0510
*             PLHDBUFC->BUFCVAL=OFF;/* INVALIDATE BUFC       @ZA31009*/
         NI    BUFCVAL(@10),B'11111011'                            0511
*I09:                                                              0512
*             DO;                   /* IDACALL(IDAGRB)               */
I09      DS    0H                                                  0513
*               CALL IDAGRB;        /* EXIT TO IDAGRB                */
         L     @15,@CV01011                                        0513
         BALR  @14,@15                                             0513
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I09;              /* REREAD OLD CI         @ZA31009*/
*             IF RPLERREG^='00'X THEN/* IF ANY ERROR, FREE   @ZA31009*/
         CLI   RPLERREG(RRPL),0                                    0519
         BE    @RF00519                                            0519
*               CALL CISPLER3;      /* INSERT BFR AND EXIT   @ZA31009*/
*                                                                  0520
         BAL   @14,CISPLER3                                        0520
*             /*******************************************************/
*             /*                                                     */
*             /* POINT TO THE OLD CIDF                       @ZA31009*/
*             /*                                                     */
*             /*******************************************************/
*                                                                  0521
*             RFY                                                  0521
*               RWORK1 RSTD;        /* GET WORK REGISTER     @ZA31009*/
@RF00519 DS    0H                                                  0522
*             RWORK1=BUFCBAD+AMDCINV-LENGTH(IDACIDF);/*      @ZA31009*/
         L     @10,AMBDSB(,RAMB)                                   0522
         L     RWORK1,BUFCBAD(,RBUFC)                              0522
         AL    RWORK1,AMDCINV(,@10)                                0522
         SL    RWORK1,@CF00197                                     0522
*             RWORK1->CIDFBUSY=OFF; /* RESET BUSY FLAG       @ZA31009*/
         NI    CIDFBUSY(RWORK1),B'01111111'                        0523
*             RFY                                                  0524
*               RWORK1 UNRSTD;      /* FREE WORK REG         @ZA31009*/
*             BUFXORBA=BUFCDDDD;    /* SET EXCL OUTPUT RBA   @ZA31009*/
         L     @10,BUFCDDDD(,RBUFC)                                0525
         ST    @10,BUFXORBA(,RBUFC)                                0525
*             BUFCORBA=BUFCDDDD;    /* SET OUTPUT RBA        @ZA31009*/
         ST    @10,BUFCORBA(,RBUFC)                                0526
*             BUFCMW=ON;            /* CAUSE WRITE           @ZA31009*/
         OI    BUFCMW(RBUFC),B'10000000'                           0527
*I10:                                                              0528
*             DO;                   /* IDACALL(IDAWRBFR)             */
I10      DS    0H                                                  0529
*               CALL IDAWRBFR;      /* EXIT TO IDAWRBFR              */
         L     @15,@CV01014                                        0529
         BALR  @14,@15                                             0529
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I10;              /* REWRITE OLD CI        @ZA31009*/
*             IF RPLERREG^='00'X THEN/* IF ANY ERROR, FREE   @ZA31009*/
         CLI   RPLERREG(RRPL),0                                    0535
         BE    @RF00535                                            0535
*               CALL CISPLER3;      /* INSERT BFR AND EXIT   @ZA31009*/
         BAL   @14,CISPLER3                                        0536
*           END;                    /* END BACK OUT BUSY BIT @ZA31009*/
*                                                                  0537
@RF00535 DS    0H                                                  0538
*         /***********************************************************/
*         /*                                                         */
*         /* CONVERT THE NEW CI BACK TO FREE SPACE CI        @ZA31009*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0538
*         RBUFC=DIWBUFC;            /* POINT TO INSERT BUFC  @ZA31009*/
@RF00507 L     @10,AMBIWA(,RAMB)                                   0538
         L     RBUFC,DIWBUFC(,@10)                                 0538
*         CALL BUILDFS;             /* CONVERT TO FREE SPACE @ZA31009*/
         BAL   @14,BUILDFS                                         0539
*         BUFCMW=ON;                /* INDICATE WRITE NEEDED @ZA31009*/
         OI    BUFCMW(RBUFC),B'10000000'                           0540
*I11:                                                              0541
*         DO;                       /* IDACALL(IDAWRBFR)             */
I11      DS    0H                                                  0542
*           CALL IDAWRBFR;          /* EXIT TO IDAWRBFR              */
         L     @15,@CV01014                                        0542
         BALR  @14,@15                                             0542
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I11;                  /* REWRITE THE NEW CI AS FS    0547
*                                                            @ZA31009*/
*         IF RPLERREG^='00'X THEN   /* IF ANY ERROR, FREE    @ZA31009*/
         CLI   RPLERREG(RRPL),0                                    0548
         BE    @RF00548                                            0548
*           CALL CISPLER3;          /* INSERT BFR AND EXIT   @ZA31009*/
*                                                                  0549
         BAL   @14,CISPLER3                                        0549
*         /***********************************************************/
*         /*                                                         */
*         /* RESET THE INSERT POINTERS TO THEIR ORIGINAL VALUES      */
*         /* BECAUSE THE CONTROL AREA WILL BE SPLIT AND THEN THE CI  */
*         /* SPLIT WILL BE RESTARTED FROM THE BEGINNING.             */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0550
*         RBUFC=PLHDBUFC;           /* LOAD PTR TO DBUFC     @ZA31009*/
@RF00548 L     RBUFC,PLHDBUFC(,RPLH)                               0550
*         PLHRECP=DIWSAVE2+BUFCBAD; /* RESET INSERT PTRS     @ZA31009*/
         L     @10,AMBIWA(,RAMB)                                   0551
         L     @05,BUFCBAD(,RBUFC)                                 0551
         L     @00,DIWSAVE2(,@10)                                  0551
         ALR   @00,@05                                             0551
         ST    @00,PLHRECP(,RPLH)                                  0551
*         PLHFSP=DIWSAVE5+BUFCBAD;  /* TO THE SAME VALUES    @ZA31009*/
         L     @00,DIWSAVE5(,@10)                                  0552
         ALR   @00,@05                                             0552
         ST    @00,PLHFSP(,RPLH)                                   0552
*         PLHRDFP=DIWLRBA+BUFCBAD;  /* AS AT THE             @ZA31009*/
         AL    @05,DIWLRBA(,@10)                                   0553
         ST    @05,PLHRDFP(,RPLH)                                  0553
*         PLHRDFC=DIWHRBA;          /* BEGINNING OF CI SPLIT         */
         L     @05,DIWHRBA(,@10)                                   0554
         STH   @05,PLHRDFC(,RPLH)                                  0554
*         RBUFC=DIWBUFC;            /* POINT TO THE WORK BUFC        */
         L     RBUFC,DIWBUFC(,@10)                                 0555
*I12:                                                              0556
*         DO;                       /* IDACALL(IDAFREEB)             */
I12      DS    0H                                                  0557
*           CALL IDAFREEB;          /* EXIT TO IDAFREEB              */
         L     @15,@CV01019                                        0557
         BALR  @14,@15                                             0557
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I12;                  /* FREE WK BUFC          @X04SVLP*/
*         PLHCIINS=OFF;             /* INSERT NOT DONE               */
         NI    PLHCIINS(RPLH),B'11111011'                          0563
*         PLHDBUFC->BUFCVAL=OFF;    /* RCD INSERT NOT DONE   @X04SVMR*/
         L     @10,PLHDBUFC(,RPLH)                                 0564
         NI    BUFCVAL(@10),B'11111011'                            0564
*         RPARM1=ONE;               /* ONE CI TO INSERT      @X04SVMR*/
         LA    RPARM1,1                                            0565
*I13:                                                              0566
*         DO;                       /* IDACALL(IDA019RF)             */
I13      DS    0H                                                  0567
*           CALL IDA019RF;          /* EXIT TO IDA019RF              */
         L     @15,@CV01016                                        0567
         BALR  @14,@15                                             0567
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I13;                  /* CALL CA SPLIT                 */
*         IF RPLERREG^='00'X THEN   /* IF ERROR IN CA SPLIT,         */
         CLI   RPLERREG(RRPL),0                                    0573
         BNE   @RT00573                                            0573
*           GO TO CISPLERR;         /* GO PREPARE TO EXIT            */
*         IF RPARM1^=ZERO THEN      /* IF INSERT OR SPLIT NOT      0575
*                                      REQUIRED. INSERT      @X04SVRQ*/
         LTR   RPARM1,RPARM1                                       0575
         BNZ   @RT00575                                            0575
*           GO TO CISPLERR;         /* HAS BEEN DONE.                */
*       END;                        /* END OF NO FIT CODE            */
*     ELSE                          /* HERE IF THE INDEX             */
*       DO;                         /* INSERT WENT OK.               */
         B     @RC00504                                            0578
@RF00504 DS    0H                                                  0579
*         RFY                                                      0579
*           R15 UNRSTD;             /* DROP RETURN CODE      @ZA31009*/
*                                                                  0579
*         /***********************************************************/
*         /*                                                         */
*         /* IF A JOURNAL EXIT IS SPECIFIED, JOURNAL THE CINV SPLIT  */
*         /* (IF ANY) AND THE DATA SPREAD (IF ANY)           @ZA31009*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0580
*         IF AMBJRN=ON THEN         /* TEST FOR JRNAD        @ZA31009*/
         TM    AMBJRN(RAMB),B'00000010'                            0580
         BNO   @RF00580                                            0580
*           CALL REJRNAD;           /* TAKE JRNAD            @ZA31009*/
*                                                                  0581
         BAL   @14,REJRNAD                                         0581
*         /***********************************************************/
*         /*                                                         */
*         /* CONSIDER NEW CINV TO HAVE A VALID RBA FROM NOW ON       */
*         /*                                                 @ZA31009*/
*         /*                                                         */
*         /***********************************************************/
*                                                                  0582
*         AMDASPA=AMDASPA-AMDCINV;  /* DECREMENT AVAIL SPACE         */
@RF00580 L     @10,AMBDSB(,RAMB)                                   0582
         L     @05,AMDASPA(,@10)                                   0582
         SL    @05,AMDCINV(,@10)                                   0582
         ST    @05,AMDASPA(,@10)                                   0582
*         RPARM1=IXWRITE;           /* SET INDEX WRITE CODE          */
         LA    RPARM1,4                                            0583
*I14:                                                              0584
*         DO;                       /* IDACALL(IDA019RH)             */
I14      DS    0H                                                  0585
*           CALL IDA019RH;          /* EXIT TO IDA019RH              */
         L     @15,@CV01017                                        0585
         BALR  @14,@15                                             0585
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I14;                  /* CAUSE INDEX INSERT WRT        */
*         IF RPLERREG^='00'X THEN   /* IF ANY ERRORS HAVE            */
         CLI   RPLERREG(RRPL),0                                    0591
         BE    @RF00591                                            0591
*           CALL CISPLER2;          /* OCCURRED, FREE BFR.   @ZA31009*/
         BAL   @14,CISPLER2                                        0592
*         RBUFC=PLHDBUFC;           /* POINT TO OLD CINV             */
@RF00591 L     RBUFC,PLHDBUFC(,RPLH)                               0593
*/*  IF HIGH KEY CI SPLIT OR ADD TO END OF KEY RANGE OR DATA SET,    */
*/*  UPDATE ARDHKRBA.                                                */
*                                                                  0594
*         IF(SPLTDPTR^=ZERO&BUFCORBA=ARDHKRBA)×/*            @ZA31009*/
*             PLHADDTE=ON THEN      /*                       @ZA31009*/
         L     @10,AMBIWA(,RAMB)                                   0594
         L     @10,SPLTDPTR(,@10)                                  0594
         LTR   @10,@10                                             0594
         BZ    @GL00030                                            0594
         L     @10,PLHARDB(,RPLH)                                  0594
         CLC   BUFCORBA(4,RBUFC),ARDHKRBA(@10)                     0594
         BE    @RT00594                                            0594
@GL00030 TM    PLHADDTE(RPLH),B'00010000'                          0594
         BNO   @RF00594                                            0594
@RT00594 DS    0H                                                  0595
*           ARDHKRBA=DIWBUFC->BUFCDDDD;/* UPDATE HIGH KEY RBA      0595
*                                                            @ZA31009*/
         L     @10,PLHARDB(,RPLH)                                  0595
         L     @05,AMBIWA(,RAMB)                                   0595
         L     @05,DIWBUFC(,@05)                                   0595
         L     @05,BUFCDDDD(,@05)                                  0595
         ST    @05,ARDHKRBA(,@10)                                  0595
*         IF SPLTDPTR^=ZERO         /* IF A CINV WAS SPLIT,  @ZA31009*/
*           THEN                    /* THE OLD CI MUST BE    @ZA31009*/
@RF00594 L     @10,AMBIWA(,RAMB)                                   0596
         L     @10,SPLTDPTR(,@10)                                  0596
         LTR   @10,@10                                             0596
         BZ    @RF00596                                            0596
*           DO;                     /* REWRITTEN.            @ZA31009*/
*             BUFXORBA=BUFCDDDD;    /* SET EXCL OUTPUT RBA   @ZA31009*/
         L     @10,BUFCDDDD(,RBUFC)                                0598
         ST    @10,BUFXORBA(,RBUFC)                                0598
*             BUFCORBA=BUFCDDDD;    /* SET OUTPUT RBA        @ZA31009*/
         ST    @10,BUFCORBA(,RBUFC)                                0599
*             BUFCMW=ON;            /* SET MUST WRITE                */
         OI    BUFCMW(RBUFC),B'10000000'                           0600
*I15:                                                              0601
*             DO;                   /* IDACALL(IDAWRBFR)             */
I15      DS    0H                                                  0602
*               CALL IDAWRBFR;      /* EXIT TO IDAWRBFR              */
         L     @15,@CV01014                                        0602
         BALR  @14,@15                                             0602
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I15;              /* WRITE OUT OLD CINV            */
*             IF RPLERREG^='00'X THEN/* IF ANY ERROR,        @ZA31009*/
         CLI   RPLERREG(RRPL),0                                    0608
         BE    @RF00608                                            0608
*               CALL CISPLER2;      /* EXIT.                 @ZA31009*/
         BAL   @14,CISPLER2                                        0609
*             AMDNCIS=AMDNCIS+ONE;  /* ONE MORE CI SPLIT             */
@RF00608 L     @10,AMBDSB(,RAMB)                                   0610
         LA    @05,1                                               0610
         AL    @05,AMDNCIS(,@10)                                   0610
         ST    @05,AMDNCIS(,@10)                                   0610
*           END;                    /* END OF WRITE OLD CINV         */
*         RPARM1=DIWBUFC;           /* POINT TO INSERT BUFC          */
*                                                                  0612
@RF00596 L     @10,AMBIWA(,RAMB)                                   0612
         L     RPARM1,DIWBUFC(,@10)                                0612
*         /***********************************************************/
*         /*                                                         */
*         /* IF THE INSERT POINT IS IN THE NEW CONTROL INTERVAL, SWAP*/
*         /* THE INPUT RBAS, THE OUTPUT RBAS, THE BUFFER ADDRESSES,  */
*         /* AND THE CHANNEL PROGRAM POINTERS. THIS WILL HAVE THE    */
*         /* EFFECT OF RETAINING THE INSERT BUFC AS THE PLACEHOLDER  */
*         /* BUFC THEREBY KEEPING THE PLACEHOLDER INSERT POINTERS    */
*         /* VALID.                                                  */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0613
*         IF PLHRECP<BUFCBAD×       /* IF INSERT POINT IN NEW        */
*             PLHRECP>=BUFCBAD+AMDCINV/* CINV, EXCHANGE BUFFER       */
*           THEN                    /* POINTERS SO INSERT CINV       */
         L     @10,PLHRECP(,RPLH)                                  0613
         L     @05,BUFCBAD(,RBUFC)                                 0613
         CR    @10,@05                                             0613
         BL    @RT00613                                            0613
         L     @15,AMBDSB(,RAMB)                                   0613
         AL    @05,AMDCINV(,@15)                                   0613
         CR    @10,@05                                             0613
         BL    @RF00613                                            0613
@RT00613 DS    0H                                                  0614
*           DO;                     /* IS IN THE PLH.                */
*             IF AMBLSR=ON×AMBGSR=ON THEN/* IF SHR BFRS      @X04SVMR*/
         TM    AMBLSR(RAMB),B'01100000'                            0615
         BZ    @RF00615                                            0615
*               DO;                 /*                       @X04SVMR*/
*                 DIWBUFC=RBUFC;    /* SWAP DATA INSERT      @X04SVMR*/
         L     @10,AMBIWA(,RAMB)                                   0617
         ST    RBUFC,DIWBUFC(,@10)                                 0617
*                 PLHDBUFC=RPARM1;  /* AND PLH BUFFERS       @X04SVMR*/
         ST    RPARM1,PLHDBUFC(,RPLH)                              0618
*                 BUFCINS=ON;       /* SET DATA INSERT SW    @X04SVMR*/
         OI    BUFCINS(RBUFC),B'00100000'                          0619
*                 RPARM1->BUFCINS=OFF;/* DATA INS OFF IN PLH @X04SVMR*/
         NI    BUFCINS(RPARM1),B'11011111'                         0620
*               END;                /* END SHARED BFR CODE   @X04SVMR*/
*             ELSE                  /* HERE IF NOT SHARED    @X04SVMR*/
*               DO;                 /*                       @X04SVMR*/
         B     @RC00615                                            0622
@RF00615 DS    0H                                                  0623
*                 GEN;                                             0623
K8       EQU   8                         LENGTH OF 2 RBA'S
K16      EQU  16                         LEN OF 2 RBA'S, CPA & BFR ADR
         XC    BUFCDDDD(K16,RBUFC),BUFCDDDD(RPARM1)  SWITCH THE
         XC    BUFCDDDD(K16,RPARM1),BUFCDDDD(RBUFC)  INPUT/OUTPUT RBAS,
         XC    BUFCDDDD(K16,RBUFC),BUFCDDDD(RPARM1)  CHAN PGMS, BFRS
         XC    BUFXIRBA(K8,RBUFC),BUFXIRBA(RPARM1)  SWITCH THE
         XC    BUFXIRBA(K8,RPARM1),BUFXIRBA(RBUFC)  EXCLUSIVE CONTROL
         XC    BUFXIRBA(K8,RBUFC),BUFXIRBA(RPARM1)  RBAS ALSO.
*               END;                /* END, NON-SHARED       @X04SVMR*/
*           END;                    /* BY THE BUFFER EXCHANGE        */
@RC00615 DS    0H                                                  0626
*         RBUFC=DIWBUFC;            /* POINT TO THE WORK BUFC        */
@RF00613 L     @10,AMBIWA(,RAMB)                                   0626
         L     RBUFC,DIWBUFC(,@10)                                 0626
*I16:                                                              0627
*         DO;                       /* IDACALL(IDAFREEB)             */
I16      DS    0H                                                  0628
*           CALL IDAFREEB;          /* EXIT TO IDAFREEB              */
         L     @15,@CV01019                                        0628
         BALR  @14,@15                                             0628
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I16;                  /* FREE WK BFR           @X04SVLP*/
*       END;                        /* END OF INDEX INSERT OK        */
*   END;                            /* END OF INSERT OFF CODE        */
@RC00504 DS    0H                                                  0635
@DE00217 TM    PLHCIINS(RPLH),B'00000100'                          0635
         BZ    @DL00217                                            0635
*/*  NOW RESET THE SEQUENCE SET OFFSETS TO THE INSERT POINT          */
*                                                                  0636
*   CALL IDAREPOS;                  /* GO REPOSITION         @ZA02289*/
         L     @15,@CA01045                                        0636
         BALR  @14,@15                                             0636
*   IF PLHBFRNO>ONE                 /* IF ANY READ AHEAD,THE @ZA31009*/
*     THEN                          /* BUFFERS MUST          @ZA31009*/
         CLI   PLHBFRNO(RPLH),1                                    0637
         BNH   @RF00637                                            0637
*     DO;                           /* BE REPOSITIONED.      @ZA31009*/
*       RPARM1=PLHDBUFC->BUFCDDDD;  /* INSERT RBA VALUE      @ZA31009*/
         L     @10,PLHDBUFC(,RPLH)                                 0639
         L     RPARM1,BUFCDDDD(,@10)                               0639
*I17:                                                              0640
*       DO;                         /* IDACALL(IDAGRB)               */
I17      DS    0H                                                  0641
*         CALL IDAGRB;              /* EXIT TO IDAGRB                */
         L     @15,@CV01011                                        0641
         BALR  @14,@15                                             0641
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I17;                    /* REORDER READ-AHEAD    @ZA31009*/
*     END;                          /* END OF SEQ. SET NEW PTR       */
*CISPLERR:                                                         0648
*   PLHCIINS=OFF;                   /* RESET DATA INSERT FLAG        */
@RF00637 DS    0H                                                  0648
CISPLERR NI    PLHCIINS(RPLH),B'11111011'                          0648
*CISPLITX:                                                         0649
*   IF AMBTRACE^=ZERO THEN          /* IS IDATRACE ACTIVE?   @ZA29388*/
CISPLITX L     @10,AMBTRACE(,RAMB)                                 0649
         LTR   @10,@10                                             0649
         BZ    @RF00649                                            0649
*     DO;                           /*                       @ZA29388*/
*       CALL IDA019ST;              /* CALL IDATRACE         @ZA29388*/
         L     @15,@CV01034                                        0651
         BALR  @14,@15                                             0651
*       GEN(DC X'0007');            /* TRACE ID              @ZA29388*/
         DC X'0007'
*     END;                          /*                       @ZA29388*/
*   GEN REFS(PLHRETO,PLHRET1)(IDARST14);/* RESTORE REG 14    @X04SVMR*/
@RF00649 DS    0H                                                  0654
         IDARST14
*   RETURN;                         /* RETURN TO CALLER              */
@EL00001 DS    0H                                                  0655
@EF00001 DS    0H                                                  0655
@ER00001 BR    @14                                                 0655
*   GEN;                                                           0656
ICMINS   ICM   RWORK2,@00,@00(RWORK1)   PICK UP 1, 2, OR 3 BYTE RBA
ICMINS2 ICM RPARM1,@00,IBFLP3(RWORK3) GET RBA MULT(1,2, OR 3)
*                                                                  0657
*   /*****************************************************************/
*   /*                                                               */
*   /* IDAREPOS SUBROUTINE                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0657
*/*  RESETS THE SEQUENCE SET POSITION POINTERS USED BY THE BUFFER  0657
*    MANAGER, TO THE CURRENT POSITION                                */
*                                                                  0657
*IDAREPOS:                          /*                       @ZA02289*/
*   ENTRY;                          /*                       @ZA02289*/
@EP00657 DS    0H                                                  0658
*   GEN(IDASVR14);                  /* SAVE REG14            @ZA02289*/
         IDASVR14
*   RFY                                                            0659
*    (RWORK1,                                                      0659
*     RWORK2,                                                      0659
*     RWORK3) RSTD;                 /* GET WORK REGISTERS            */
*   RBUFC=PLHIBUFC;                 /* POINT TO THE SEQ. SET         */
         L     RBUFC,PLHIBUFC(,RPLH)                               0660
*   RWORK3=BUFCBAD+IXHLL-IXHFLPLN;  /* POINT TO THE 1ST ENTRY        */
         L     @10,BUFCBAD(,RBUFC)                                 0661
         LH    RWORK3,IXHLL(,@10)                                  0661
         N     RWORK3,@CF01143                                     0661
         ALR   RWORK3,@10                                          0661
         SLR   @00,@00                                             0661
         IC    @00,IXHFLPLN(,@10)                                  0661
         SLR   RWORK3,@00                                          0661
*   IXSHEP=RWORK3;                  /* CURRENT ENTRY=1ST ENTRY       */
         LA    @15,200                                             0662
         ALR   @15,RPLH                                            0662
         ST    RWORK3,IXSHEP(,@15)                                 0662
*   IXSLEP=IXSHEP;                  /* FIRST AS ALSO LOWEST          */
         L     @14,IXSHEP+200(,RPLH)                               0663
         ST    @14,IXSLEP(,@15)                                    0663
*   IXSSEP=IXHSEO+BUFCBAD;          /* 1ST SECTION ENTRY PTR.        */
*                                                                  0664
         LH    @00,IXHSEO(,@10)                                    0664
         ALR   @00,@10                                             0664
         ST    @00,IXSSEP(,@15)                                    0664
*   /*****************************************************************/
*   /*                                                               */
*   /* SAVE THE DATA INSERT POINT AS AN RBA MULTIPLIER               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0665
*   RWORK1=(PLHDBUFC->BUFCDDDD-IXHBRBA)/AMDCINV;                   0665
         L     @15,PLHDBUFC(,RPLH)                                 0665
         L     RWORK1,BUFCDDDD(,@15)                               0665
         SL    RWORK1,IXHBRBA(,@10)                                0665
         L     @15,AMBDSB(,RAMB)                                   0665
         LR    @09,RWORK1                                          0665
         SLR   @08,@08                                             0665
         D     @08,AMDCINV(,@15)                                   0665
         LR    RWORK1,@09                                          0665
*   RWORK2=IXHPTLS;                 /* GET RBA POINTER MASK          */
         SLR   RWORK2,RWORK2                                       0666
         IC    RWORK2,IXHPTLS(,@10)                                0666
*   RPARM1=ZERO;                    /* CLEAR SEARCH ARGUMENT         */
         SLR   RPARM1,RPARM1                                       0667
*   GEN REFS(IBFLP3)(EX    RWORK2,ICMINS2);/* GET RBA MULTIPLIER     */
         EX    RWORK2,ICMINS2
*   DO WHILE RPARM1^=RWORK1;        /* SCAN INDEX FOR INS. PT.       */
         B     @DE00669                                            0669
@DL00669 DS    0H                                                  0670
*     CALL IXINCR;                  /* GO TO NEXT INDEX ENTRY        */
         BAL   @14,IXINCR                                          0670
*     RWORK3=IXSHEP;                /* SET UP FOR ICMINS2            */
         L     RWORK3,IXSHEP+200(,RPLH)                            0671
*     GEN(EX    RWORK2,ICMINS2);    /* GET RBA MULTIPLIER            */
         EX    RWORK2,ICMINS2
*   END;                            /* END OF INDEX SEARCH           */
@DE00669 CR    RPARM1,RWORK1                                       0673
         BNE   @DL00669                                            0673
*   GEN(IDARST14);                  /* RESTORE REG14         @ZA02289*/
         IDARST14
*   RETURN;                         /* BACK TO CALLER        @ZA02289*/
         B     @EL00001                                            0675
*   RFY                                                            0676
*    (RWORK1,                                                      0676
*     RWORK2,                                                      0676
*     RWORK3) UNRSTD;               /* RELEASE WORK REGISTERS        */
*                                                                  0677
*/*  NEXTRDF -- GO TO THE NEXT RDF IN THE DATA CONTROL INTERVAL      */
*/*   FUNCTION - TO ADVANCE THE RDF POINTER AND COUNTER.             */
*/*   INPUT - RWORK3 = ADDRESS OF LAST RDF OR RDF PAIR USED.         */
*/* OUTPUT - RWORK3 = ADDRESS OF NEXT RDF OR RDF PAIR, RWORK2 = LEN. */
*/* OF DATA RECORDS REPRESENTED BY RDFS, AND SPLTRDFC = NO. OF DATA  */
*/* RECORDS REPRESENTED BY THE RDF OR RDF PAIR.                      */
*                                                                  0677
*NEXTRDF:                                                          0677
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0677
NEXTRDF  DS    0H                                                  0678
*   RFY                                                            0678
*     RWORK1 RSTD;                  /* SAVE REGISTER                 */
*   RFY                                                            0679
*    (RWORK2,                                                      0679
*     RWORK3,                                                      0679
*     R14) RSTD;                    /* GET WORK REGS         @X04SVRQ*/
*   RWORK3=RWORK3-LENGTH(IDARDF);   /* POINT TO NEXT RDF             */
         LA    @15,3                                               0680
         SLR   RWORK3,@15                                          0680
*   RWORK2=RDFLL;                   /* GET LENGTH OF DATA            */
         SLR   RWORK2,RWORK2                                       0681
         ICM   RWORK2,3,RDFLL(RWORK3)                              0681
*   IF RDFCTNU=ON                   /* SEE IF GROUP RDF              */
*     THEN                          /* IF SO, GET DATA LENGTH        */
         TM    RDFCTNU(RWORK3),B'01000000'                         0682
         BNO   @RF00682                                            0682
*     DO;                           /* AND GET NEXT RDF.             */
*       RWORK3=RWORK3-LENGTH(IDARDF);/* PTR TO COUNT RDF             */
         SLR   RWORK3,@15                                          0684
*       SPLTRDFC=RDFLL;             /* SET SPLIT RDF COUNT           */
         L     @15,AMBIWA(,RAMB)                                   0685
         SLR   @10,@10                                             0685
         ICM   @10,3,RDFLL(RWORK3)                                 0685
         ST    @10,SPLTRDFC(,@15)                                  0685
*     END;                          /* END OF GROUP RDF CODE         */
*   ELSE                            /* IF NOT A GROUP RDF,           */
*     SPLTRDFC=ONE;                 /* SET COUNT TO ONE              */
         B     @RC00682                                            0687
@RF00682 L     @15,AMBIWA(,RAMB)                                   0687
         MVC   SPLTRDFC(4,@15),@CF00046                            0687
*   END NEXTRDF;                    /* NEXT RDF SET                  */
@EL00002 DS    0H                                                  0688
@EF00002 DS    0H                                                  0688
@ER00002 BR    @14                                                 0688
*                                                                  0689
*/*   BUILDFS -- BUILD A FREE SPACE CONTROL INTERVAL                 */
*/*01 FUNCTION - BUILD ONE CONTROL OF FREE SPACE IN A DATA BUFFER    */
*/*01 INPUT - RBUFC POINTS TO A DATA BUFC                            */
*/*01 OUTPUT - WORK REGISTERS ARE ALTERED AND  A FREE SPACE CINV IS  */
*/*            CREATED IN THE DESIRED BUFFER.  RWORK1 = ADDR(CIDF).  */
*                                                                  0689
*BUILDFS:                                                          0689
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0689
BUILDFS  DS    0H                                                  0690
*   RFY                                                            0690
*    (RWORK1,                                                      0690
*     RWORK2,                                                      0690
*     RWORK3,                                                      0690
*     RWORK4,                                                      0690
*     RWORK5,                                                      0690
*     R14) RSTD;                    /* GET WORK REGS.        @X04SVRQ*/
*   RWORK2=BUFCBAD;                 /* POINT TO CINV                 */
         L     RWORK2,BUFCBAD(,RBUFC)                              0691
*   RWORK3=AMDCINV;                 /* GET LENGTH                    */
         L     @15,AMBDSB(,RAMB)                                   0692
         L     RWORK3,AMDCINV(,@15)                                0692
*   RWORK5=ZERO;                    /* GET PROPAGATION               */
         SLR   RWORK5,RWORK5                                       0693
*   GEN SETS(RWORK2,RWORK3,RWORK4,RWORK5)(MVCL  RWORK2,RWORK4);/*  0694
*                                      ZERO                          */
         MVCL  RWORK2,RWORK4
*   RFY                                                            0695
*    (RWORK4,                                                      0695
*     RWORK5) UNRSTD;               /* RELEASE WORK REGISTERS      0695
*                                                            @ZA31009*/
*   RWORK1=BUFCBAD+AMDCINV-LENGTH(IDACIDF);/* POINT TO CIDF          */
         LA    @15,4                                               0696
         L     @10,AMBDSB(,RAMB)                                   0696
         L     @10,AMDCINV(,@10)                                   0696
         L     RWORK1,BUFCBAD(,RBUFC)                              0696
         ALR   RWORK1,@10                                          0696
         SLR   RWORK1,@15                                          0696
*   RWORK1->CIDFLL=AMDCINV-LENGTH(IDACIDF);/* SET FREE SPACE         */
         SLR   @10,@15                                             0697
         STH   @10,CIDFLL(,RWORK1)                                 0697
*   END BUILDFS;                    /* FS CINV BUILT                 */
@EL00003 DS    0H                                                  0698
@EF00003 DS    0H                                                  0698
@ER00003 BR    @14                                                 0698
*                                                                  0699
*/********************************************************************/
*/*   IXINCR -- INCREMENT THE PLACEHOLDER SEQUENCE SET POINTERS      */
*/*01 FUNCTION - INCREMENT IXSHEP, IXSSEP, AND IXSLEP.               */
*/*01 INPUT - IXSHEP POINTS TO CURRENT INDEX ENTRY, IXSLEP IS A PTR  */
*/*           TO THE LOW ENTRY IN THE SECTION, IXSSEP IS A PTR TO    */
*/*           THE NEXT SECTION ENTRY.                                */
*/*01 OUTPUT - IXSHEP, IXSLEP, AND IXSSEP ARE UPDATED AS NECESSARY.  */
*/********************************************************************/
*                                                                  0699
*IXINCR:                                                           0699
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0699
IXINCR   DS    0H                                                  0700
*   RFY                                                            0700
*    (RWORK1,                                                      0700
*     RWORK2,                                                      0700
*     RWORK3,                                                      0700
*     R14) RSTD;                    /* GET REGISTERS                 */
*   RWORK3=IXSHEP->IBFLPL;          /* GET VALUE OF CURRENT L        */
         LA    @15,200                                             0701
         ALR   @15,RPLH                                            0701
         L     @10,IXSHEP(,@15)                                    0701
         SLR   RWORK3,RWORK3                                       0701
         IC    RWORK3,IBFLPL(,@10)                                 0701
*   IF IXSHEP=IXSSEP                /* IF AT A SECTION ENTRY,        */
*     THEN                          /* ITS LL MUST BE INCLUDED       */
         L     @09,IXSSEP(,@15)                                    0702
         CR    @10,@09                                             0702
         BNE   @RF00702                                            0702
*     DO;                                                          0703
*                                                                  0703
*       /*************************************************************/
*       /*                                                           */
*       /* INCREMENT THE CURRENT ENTRY POINTER                       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0704
*       IXSHEP=IXSHEP-IXHFLPLN-LENGTH(IXSELL)-RWORK3;              0704
         L     @08,BUFCBAD(,RBUFC)                                 0704
         SLR   @00,@00                                             0704
         IC    @00,IXHFLPLN(,@08)                                  0704
         SLR   @10,@00                                             0704
         BCTR  @10,0                                               0704
         BCTR  @10,0                                               0704
         SLR   @10,RWORK3                                          0704
         ST    @10,IXSHEP(,@15)                                    0704
*       RWORK3=IXSHEP+IXHFLPLN;     /* POINT TO THE SECTION LL       */
         ALR   @00,@10                                             0705
         LR    RWORK3,@00                                          0705
*       IXSSEP=IXSSEP-RWORK3->IXSELL;/* ADJUST NEXT SECTION PTR      */
         SLR   @00,@00                                             0706
         ICM   @00,3,IXSELL(RWORK3)                                0706
         SLR   @09,@00                                             0706
         ST    @09,IXSSEP(,@15)                                    0706
*       IXSLEP=IXSHEP;              /* NEW LOW ENTRY                 */
         ST    @10,IXSLEP(,@15)                                    0707
*     END;                          /* END OF SECTION CROSSING       */
*   ELSE                            /* NOT AT SECTION ENTRY.         */
*     IXSHEP=IXSHEP-RWORK3-IXHFLPLN;/* NORMAL IX INCREMENT           */
         B     @RC00702                                            0709
@RF00702 LA    @15,200                                             0709
         ALR   @15,RPLH                                            0709
         L     @10,IXSHEP(,@15)                                    0709
         SLR   @10,RWORK3                                          0709
         L     @09,BUFCBAD(,RBUFC)                                 0709
         SLR   @00,@00                                             0709
         IC    @00,IXHFLPLN(,@09)                                  0709
         SLR   @10,@00                                             0709
         ST    @10,IXSHEP(,@15)                                    0709
*   RETURN;                         /* RETURN TO CALLER              */
@EL00004 DS    0H                                                  0710
@EF00004 DS    0H                                                  0710
@ER00004 BR    @14                                                 0710
*   END IXINCR;                     /* END OF INDEX INCREMENT        */
         B     @EL00004                                            0711
*                                                                  0712
*/********************************************************************/
*/*           IDASPLT2 -- ERASE HIGH HALF OF A CI                    */
*/* INPUT - PLHDBUFC POINTS TO THE CI, SPLTRDFP POINTS TO THE        */
*/*         RDF SPLIT POINT, SPLTDPTR POINTS TO THE DATA SPLIT       */
*/*         POINT, AND SPLTRDFC IS SET.                              */
*/* OUTPUT - WORK REGISTERS ARE ALTERED, DATA AND RDFS ARE REMOVED,  */
*/*         AND CIDF IS UPDATED.  RBUFC IS UNCHANGED.        @ZA31009*/
*/********************************************************************/
*                                                                  0712
*IDASPLT2:                                                         0712
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0712
IDASPLT2 DS    0H                                                  0713
*   RFY                                                            0713
*     R14 RSTD;                     /* SAVE RETURN REG       @ZA31009*/
*   RFY                                                            0714
*    (RWORK1,                                                      0714
*     RWORK2,                                                      0714
*     RWORK3,                                                      0714
*     RWORK4,                                                      0714
*     RWORK5) RSTD;                 /* REGS                  @ZA31009*/
*   RWORK1=SPLTRDFP;                /* POINT TO RDF SPLIT PT @ZA31009*/
         L     @15,AMBIWA(,RAMB)                                   0715
         L     RWORK1,SPLTRDFP(,@15)                               0715
*   RWORK2=SPLTDPTR;                /* POINT TO DATA SPLIT PT      0716
*                                                            @ZA31009*/
         L     RWORK2,SPLTDPTR(,@15)                               0716
*/*  UPDATE THE CIDF IN THE OLD CI                           @ZA31009*/
*                                                                  0717
*   RWORK3=RWORK1-RWORK2;           /* LENGTH OF FREE SPACE  @ZA31009*/
         LR    RWORK3,RWORK1                                       0717
         SLR   RWORK3,RWORK2                                       0717
*/*  POINT TO CIDF                                           @ZA31009*/
*                                                                  0718
*   RWORK5=PLHDBUFC->BUFCBAD+AMDCINV-LENGTH(IDACIDF);              0718
*                                                                  0718
         L     @15,PLHDBUFC(,RPLH)                                 0718
         L     @15,BUFCBAD(,@15)                                   0718
         L     @10,AMBDSB(,RAMB)                                   0718
         LR    RWORK5,@15                                          0718
         AL    RWORK5,AMDCINV(,@10)                                0718
         SL    RWORK5,@CF00197                                     0718
*/*  SET NEW FREE SPACE LENGTH AND OFFSET IN THE CIDF        @ZA31009*/
*                                                                  0719
*   RWORK5->CIDFLL=RWORK3;          /* NEW FREE SPACE LENGTH @ZA31009*/
         STH   RWORK3,CIDFLL(,RWORK5)                              0719
*   RWORK5->CIDFOSET=RWORK2-PLHDBUFC->BUFCBAD;/* FSO         @ZA31009*/
         LCR   @15,@15                                             0720
         ALR   @15,RWORK2                                          0720
         STH   @15,CIDFOSET(,RWORK5)                               0720
*/*  REMOVE DATA AND RDFS BETWEEN RWORK2 AND RWORK1          @ZA31009*/
*                                                                  0721
*   RWORK5=ZERO;                    /* SET FOR PROPAGATION   @ZA31009*/
         SLR   RWORK5,RWORK5                                       0721
*   MVCL(RWORK2,RWORK4);            /* ZERO FREE SPACE       @ZA31009*/
         MVCL  RWORK2,RWORK4                                       0722
*/*  IF THE SPLIT POINT IS AT A REPLICATED RDF, IT MAY HAVE TO BE    */
*/*  CONVERTED TO A NON-REPLICATED ONE.                      @ZA31009*/
*                                                                  0723
*   IF RWORK1->RDFREPL=ON THEN      /* IS IT REPLICATED?     @ZA31009*/
         TM    RDFREPL(RWORK1),B'00001000'                         0723
         BNO   @RF00723                                            0723
*     DO;                           /* YES, DO THE FOLLOWING @ZA31009*/
*       RWORK1->RDFLL=RWORK1->RDFLL-SPLTRDFC;/* RESET COUNT          */
         L     @15,AMBIWA(,RAMB)                                   0725
         SLR   @10,@10                                             0725
         ICM   @10,3,RDFLL(RWORK1)                                 0725
         SL    @10,SPLTRDFC(,@15)                                  0725
         STCM  @10,3,RDFLL(RWORK1)                                 0725
*       RWORK3=ZERO;                /* INITIALIZE RDF CORRECTION     */
         SLR   RWORK3,RWORK3                                       0726
*       IF RWORK1->RDFLL=ONE        /* IF OLD REPLIC COUNT IS        */
*         THEN                      /* NOW ONE, CONVERT RDF          */
         C     @10,@CF00046                                        0727
         BNE   @RF00727                                            0727
*         DO;                       /* TO A SINGLE ONE.              */
*           RWORK3=LENGTH(IDARDF);  /* GET FS INCREMENT              */
         LA    @15,3                                               0729
         LR    RWORK3,@15                                          0729
*           RWORK1->IDARDF=RWORK1->IDARDF&&/* SET OLD                */
*               RWORK1->IDARDF;     /* RDF COUNT TO ZERO             */
         XC    IDARDF(3,RWORK1),IDARDF(RWORK1)                     0730
*           RWORK1=RWORK1+LENGTH(IDARDF);/* POINT TO 2ND RDF         */
         ALR   RWORK1,@15                                          0731
*           RWORK1->RDFREPL=OFF;    /* INDICATE A NON-GROUP          */
*           RWORK1->RDFCTNU=OFF;    /* RDF IS HERE                   */
         NI    RDFREPL(RWORK1),B'10110111'                         0733
*         END;                      /* END OF OLD RDF CONVERT        */
*       ELSE                        /* HERE IF NOT COUNT OF 1        */
*         IF RWORK1->RDFLL=ZERO     /* IF AT BEGINNING OF            */
*           THEN                    /* GROUP, ELIMINATE GRP          */
         B     @RC00727                                            0735
@RF00727 ICM   @15,3,RDFLL(RWORK1)                                 0735
         BNZ   @RF00735                                            0735
*           DO;                     /* RDF COMPLETELY.               */
*             RWORK3=LENGTH(GRPRDF);/* GET FS INCREMENT VALUE        */
         LA    RWORK3,6                                            0737
*             RWORK1->GRPRDF=RWORK1->GRPRDF&&/* CONVERT GROUP        */
*                 RWORK1->GRPRDF;   /* RDF TO BINARY ZEROES          */
         XC    GRPRDF(6,RWORK1),GRPRDF(RWORK1)                     0738
*           END;                    /* END OF GRP RDF ELIMINAT       */
*     END;                          /* END OF GROUP RDF      @ZA31009*/
*   ELSE                            /* HERE IF NON-GROUP RDF @ZA31009*/
*     DO;                           /* REMOVE NON-GROUP RDF  @ZA31009*/
         B     @RC00723                                            0741
@RF00723 DS    0H                                                  0742
*       RWORK3=LENGTH(IDARDF);      /* GET LENGTH OF RDF     @ZA31009*/
         LA    RWORK3,3                                            0742
*       RWORK1->IDARDF=RWORK1->IDARDF&&RWORK1->IDARDF;/*     @ZA31009*/
         XC    IDARDF(3,RWORK1),IDARDF(RWORK1)                     0743
*     END;                          /* END OF NON-GROUP RDF  @ZA31009*/
*   RFY                                                            0745
*    (RWORK1,                                                      0745
*     RWORK2,                                                      0745
*     RWORK4) UNRSTD;               /* DROP REGS             @ZA31009*/
@RC00723 DS    0H                                                  0746
*/*  POINT TO AND ADJUST THE OLD CI CIDF.                    @ZA31009*/
*                                                                  0746
*   RWORK5=PLHDBUFC->BUFCBAD+AMDCINV-LENGTH(IDACIDF);/*      @ZA31009*/
         L     @15,PLHDBUFC(,RPLH)                                 0746
         L     @10,AMBDSB(,RAMB)                                   0746
         L     RWORK5,BUFCBAD(,@15)                                0746
         AL    RWORK5,AMDCINV(,@10)                                0746
         SL    RWORK5,@CF00197                                     0746
*   RWORK5->CIDFLL=RWORK5->CIDFLL+RWORK3;/* ADJUST           @ZA31009*/
         LR    @15,RWORK3                                          0747
         AH    @15,CIDFLL(,RWORK5)                                 0747
         STH   @15,CIDFLL(,RWORK5)                                 0747
*   RFY                                                            0748
*     R14 UNRSTD;                   /* RELEASE RETURN REG    @ZA31009*/
*   RFY                                                            0749
*    (RWORK3,                                                      0749
*     RWORK5) UNRSTD;               /* DROP REGS             @ZA31009*/
*   END IDASPLT2;                   /* END OF FS CONVERT     @ZA31009*/
@EL00005 DS    0H                                                  0750
@EF00005 DS    0H                                                  0750
@ER00005 BR    @14                                                 0750
*                                                                  0751
*   /*****************************************************************/
*   /*                                                               */
*   /* WRTDATA SUBROUTINE - WRITES OLD CINV WITH BUSY BIT ON AND NEW */
*   /* CINV                                                  @ZA31009*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0751
*WRTDATA:                                                          0751
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* WRITE OLD/NEW CIS     @ZA31009*/
WRTDATA  DS    0H                                                  0752
*   GEN(IDASVR14);                  /* SAVE RETURN           @ZA31009*/
*                                                                  0752
         IDASVR14
*   /*****************************************************************/
*   /*                                                               */
*   /* SET ON BUSY BIT IN THE OLD CI AND THEN WRITE THE OLD AND THE  */
*   /* NEW CONTROL INTERVALS.                                @ZA31009*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0753
*   RBUFC=DIWBUFC;                  /* POINT TO NEW CI BUFC  @ZA31009*/
         L     @10,AMBIWA(,RAMB)                                   0753
         L     RBUFC,DIWBUFC(,@10)                                 0753
*   BUFCMW=ON;                      /* CAUSE WRITE           @ZA31009*/
*                                                                  0754
         OI    BUFCMW(RBUFC),B'10000000'                           0754
*   /*****************************************************************/
*   /*                                                               */
*   /* IF NSR, CHAIN IN THE WORK BUFFER TO SAVE 1 I/O.       @ZA31009*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0755
*   IF AMBLSR=OFF&AMBGSR=OFF THEN   /*                       @ZA31009*/
         TM    AMBLSR(RAMB),B'01100000'                            0755
         BNZ   @RF00755                                            0755
*I18:                                                              0756
*     DO;                           /* IDACALL(IDAAIBF)              */
I18      DS    0H                                                  0757
*       CALL IDAAIBF;               /* EXIT TO IDAAIBF               */
         L     @15,@CV01015                                        0757
         BALR  @14,@15                                             0757
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I18;                      /*                       @ZA31009*/
*   RBUFC=PLHDBUFC;                 /* POINT TO DATA BUFFER  @ZA31009*/
@RF00755 L     RBUFC,PLHDBUFC(,RPLH)                               0763
*   RFY                                                            0764
*     RWORK1 RSTD;                  /* GET WORK REG          @ZA31009*/
*   RWORK1=BUFCBAD+AMDCINV-LENGTH(IDACIDF);/* CIDF           @ZA31009*/
         L     @10,AMBDSB(,RAMB)                                   0765
         L     RWORK1,BUFCBAD(,RBUFC)                              0765
         AL    RWORK1,AMDCINV(,@10)                                0765
         SL    RWORK1,@CF00197                                     0765
*   RWORK1->CIDFBUSY=ON;            /* MARK CI BUSY          @ZA31009*/
         OI    CIDFBUSY(RWORK1),B'10000000'                        0766
*   BUFXORBA=BUFCDDDD;              /* SET OUTPUT RBA        @ZA31009*/
         L     @10,BUFCDDDD(,RBUFC)                                0767
         ST    @10,BUFXORBA(,RBUFC)                                0767
*   BUFCORBA=BUFCDDDD;              /* SET OUTPUT RBA        @ZA31009*/
         ST    @10,BUFCORBA(,RBUFC)                                0768
*   BUFCMW=ON;                      /* CAUSE WRITE           @ZA31009*/
*                                                                  0769
         OI    BUFCMW(RBUFC),B'10000000'                           0769
*   /*****************************************************************/
*   /*                                                               */
*   /* DO A WRITE NOW. FOR NSR IT WILL WRITE BOTH THE OLD CI WITH THE*/
*   /* BUSY BIT ON AND THE NEW CI. (WRITE CHANNEL PROGRAMS ARE       */
*   /* CHAINED.) FOR LSR OR GSR, ONLY THE OLD CI WITH THE BIT ON WILL*/
*   /* BE WRITTEN. (BUFCS ARE NOT CHAINED.)                  @ZA31009*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0770
*I19:                                                              0770
*   DO;                             /* IDACALL(IDAWRBFR)             */
I19      DS    0H                                                  0771
*     CALL IDAWRBFR;                /* EXIT TO IDAWRBFR              */
         L     @15,@CV01014                                        0771
         BALR  @14,@15                                             0771
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I19;                        /* WRITE DATA SPLIT OFF          */
*   RBUFC=DIWBUFC;                  /* PTR TO WORK BUFFER    @ZA31009*/
         L     @10,AMBIWA(,RAMB)                                   0777
         L     RBUFC,DIWBUFC(,@10)                                 0777
*   IF AMBLSR=OFF&AMBGSR=OFF THEN   /* IF NSR                @ZA31009*/
         TM    AMBLSR(RAMB),B'01100000'                            0778
         BNZ   @RF00778                                            0778
*I20:                                                              0779
*     DO;                           /* IDACALL(IDASBF)               */
I20      DS    0H                                                  0780
*       CALL IDASBF;                /* EXIT TO IDASBF                */
         L     @15,@CV01012                                        0780
         BALR  @14,@15                                             0780
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I20;                      /* THEN DECHAIN INS BFR  @ZA31009*/
*   ELSE                            /* LSR/GSR STILL MUST    @ZA31009*/
*     DO;                           /* WRITE INSERT BUFFER.  @ZA31009*/
         B     @RC00778                                            0786
@RF00778 DS    0H                                                  0787
*       IF RPLERREG='00'X THEN      /* IF NO I/O ERROR,      @ZA31009*/
         CLI   RPLERREG(RRPL),0                                    0787
         BNE   @RF00787                                            0787
*I21:                                                              0788
*         DO;                       /* IDACALL(IDAWRBFR)             */
I21      DS    0H                                                  0789
*           CALL IDAWRBFR;          /* EXIT TO IDAWRBFR              */
         L     @15,@CV01014                                        0789
         BALR  @14,@15                                             0789
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I21;                  /* WRITE NEW CI          @ZA31009*/
*       ELSE                        /* OLD CI WRITE ERROR    @ZA31009*/
*         BUFCMW=OFF;               /* DO NOT BOTHER WITH NEW      0795
*                                                            @ZA31009*/
         B     @RC00787                                            0795
@RF00787 NI    BUFCMW(RBUFC),B'01111111'                           0795
*     END;                          /* END OF LSR/GSR        @ZA31009*/
@RC00787 DS    0H                                                  0797
*   GEN(IDARST14);                  /* RESTORE RETURN REG    @ZA31009*/
@RC00778 DS    0H                                                  0797
         IDARST14
*   RETURN;                         /* RETURN TO CALLER      @ZA31009*/
@EL00006 DS    0H                                                  0798
@EF00006 DS    0H                                                  0798
@ER00006 BR    @14                                                 0798
*   END WRTDATA;                    /* WRITE OLD/NEW CIS     @ZA31009*/
*                                                                  0800
*   /*****************************************************************/
*   /*                                                               */
*   /* REJRNAD SUBROUTINE - JOURNALS CINV SPLIT (IF ANY) AND THE DATA*/
*   /* SPREAD (IF ANY)                                       @ZA31009*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0800
*REJRNAD:                                                          0800
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0800
REJRNAD  DS    0H                                                  0801
*   GEN(IDASVR14);                  /* SAVE RETURN REG       @ZA31009*/
         IDASVR14
*   PLHJCODE=PLHJRBAC;              /* RBA CHANGE            @ZA31009*/
         MVI   PLHJCODE(RPLH),B'00001100'                          0802
*   IF SPLTDPTR^=ZERO THEN          /* TRUE SPLIT            @ZA31009*/
         L     @10,AMBIWA(,RAMB)                                   0803
         L     @00,SPLTDPTR(,@10)                                  0803
         LTR   @00,@00                                             0803
         BZ    @RF00803                                            0803
*     DO;                           /*                       @ZA31009*/
*       RFY                                                        0805
*         RWORK3 RSTD;              /*                       @ZA31009*/
*       PLHJNRBA=DIWBUFC->BUFCORBA; /* NEW RBA               @ZA31009*/
*                                                                  0806
         L     @10,DIWBUFC(,@10)                                   0806
         L     @06,BUFCORBA(,@10)                                  0806
         ST    @06,PLHJNRBA(,RPLH)                                 0806
*       /*************************************************************/
*       /*                                                           */
*       /* SET LENGTH OF DATA MOVED                          @ZA31009*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0807
*       RWORK3=DIWBUFC->BUFCBAD+AMDCINV-LENGTH(IDACIDF);           0807
         LA    @15,4                                               0807
         L     @14,AMBDSB(,RAMB)                                   0807
         L     @14,AMDCINV(,@14)                                   0807
         L     RWORK3,BUFCBAD(,@10)                                0807
         ALR   RWORK3,@14                                          0807
         SLR   RWORK3,@15                                          0807
*       PLHJRNLL=RWORK3->CIDFOSET;  /*                       @ZA31009*/
*                                                                  0808
         LH    @10,CIDFOSET(,RWORK3)                               0808
         ST    @10,PLHJRNLL(,RPLH)                                 0808
*       /*************************************************************/
*       /*                                                           */
*       /* SET OLD RBA                                       @ZA31009*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0809
*       RWORK3=PLHDBUFC->BUFCBAD+AMDCINV-LENGTH(IDACIDF);          0809
         L     @10,PLHDBUFC(,RPLH)                                 0809
         L     @09,BUFCBAD(,@10)                                   0809
         ALR   @14,@09                                             0809
         SLR   @14,@15                                             0809
         LR    RWORK3,@14                                          0809
*       PLHJORBA=PLHDBUFC->BUFCORBA+RWORK3->CIDFOSET;              0810
*                                                                  0810
         LH    @06,CIDFOSET(,RWORK3)                               0810
         AL    @06,BUFCORBA(,@10)                                  0810
         ST    @06,PLHJORBA(,RPLH)                                 0810
*       /*************************************************************/
*       /*                                                           */
*       /* ADJUST OLD RBA IF INSERT IS IN THE OLD CINV       @ZA31009*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0811
*       IF PLHCIINS=ON&RPLUPD=OFF THEN                             0811
         TM    PLHCIINS(RPLH),B'00000100'                          0811
         BNO   @RF00811                                            0811
         TM    RPLUPD(RRPL),B'00000010'                            0811
         BNZ   @RF00811                                            0811
*         DO;                       /* INSERT IN OLD         @ZA31009*/
*           IF PLHRECP<=RWORK3&PLHRECP>=PLHDBUFC->BUFCBAD THEN     0813
         L     @10,PLHRECP(,RPLH)                                  0813
         CR    @10,RWORK3                                          0813
         BH    @RF00813                                            0813
         CR    @10,@09                                             0813
         BL    @RF00813                                            0813
*             PLHJORBA=PLHJORBA-RPLRLEN;                           0814
         SL    @06,RPLRLEN(,RRPL)                                  0814
         ST    @06,PLHJORBA(,RPLH)                                 0814
*           ELSE                    /* INSERT IN NEW         @ZA31009*/
*             PLHJRNLL=PLHJRNLL-RPLRLEN;                           0815
         B     @RC00813                                            0815
@RF00813 L     @10,PLHJRNLL(,RPLH)                                 0815
         SL    @10,RPLRLEN(,RRPL)                                  0815
         ST    @10,PLHJRNLL(,RPLH)                                 0815
*         END;                      /* END INS ADJUST        @ZA31009*/
@RC00813 DS    0H                                                  0817
*I22:                                                              0817
*       DO;                         /* IDACALL(IDATJXIT)             */
@RF00811 DS    0H                                                  0817
I22      DS    0H                                                  0818
*         CALL IDATJXIT;            /* EXIT TO IDATJXIT              */
         L     @15,@CV01013                                        0818
         BALR  @14,@15                                             0818
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I22;                    /* JOURNAL THE SPLIT     @ZA31009*/
*     END;                          /* END TRUE SPLIT        @ZA31009*/
*   IF PLHCIINS=ON&RPLUPD=OFF       /* IF THE DATA RECORD WAS      0825
*                                                            @ZA31009*/
*     THEN                          /* INSERTED, JOURNAL THE @ZA31009*/
@RF00803 TM    PLHCIINS(RPLH),B'00000100'                          0825
         BNO   @RF00825                                            0825
         TM    RPLUPD(RRPL),B'00000010'                            0825
         BNZ   @RF00825                                            0825
*     DO;                           /* INSERT.               @ZA31009*/
*       IF PLHRECP^=PLHFSP          /* IF DATA HAD TO BE     @ZA31009*/
*         THEN                      /* SPREAD APART FOR INS. @ZA31009*/
         L     @10,PLHRECP(,RPLH)                                  0827
         L     @06,PLHFSP(,RPLH)                                   0827
         CR    @10,@06                                             0827
         BE    @RF00827                                            0827
*         DO;                       /* JOURNAL IT            @ZA31009*/
*           PLHJRNLL=PLHFSP-PLHRECP;/* GET SHIFT LENGTH      @ZA31009*/
         SLR   @06,@10                                             0829
         ST    @06,PLHJRNLL(,RPLH)                                 0829
*           PLHJORBA=RPLDDDD;       /* INSERT DONE AT FRONT  @ZA31009*/
         L     @10,RPLDDDD(,RRPL)                                  0830
         ST    @10,PLHJORBA(,RPLH)                                 0830
*           PLHJNRBA=RPLDDDD+RPLRLEN;/* NEW RBA AT END       @ZA31009*/
         AL    @10,RPLRLEN(,RRPL)                                  0831
         ST    @10,PLHJNRBA(,RPLH)                                 0831
*I23:                                                              0832
*           DO;                     /* IDACALL(IDATJXIT)             */
I23      DS    0H                                                  0833
*             CALL IDATJXIT;        /* EXIT TO IDATJXIT              */
         L     @15,@CV01013                                        0833
         BALR  @14,@15                                             0833
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I23;                /* JOURNAL SPREAD APART  @ZA31009*/
*         END;                      /* END JOURNAL DATA SHFT @ZA31009*/
*     END;                          /* END OF JOURNAL INSERT @ZA31009*/
@RF00827 DS    0H                                                  0841
*   GEN(IDARST14);                  /* RESTORE RETURN REG    @ZA31009*/
@RF00825 DS    0H                                                  0841
         IDARST14
*   RETURN;                         /* RETURN TO CALLER      @ZA31009*/
@EL00007 DS    0H                                                  0842
@EF00007 DS    0H                                                  0842
@ER00007 BR    @14                                                 0842
*   END REJRNAD;                    /* END JRNAD SUBROUTINE  @ZA31009*/
*                                                                  0844
*/*  FREE INSERT BUFFER LEAVING CONTENTS VALIDITY UNCHANGED. @ZA31009*/
*                                                                  0844
*CISPLER2:                                                         0844
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0844
CISPLER2 DS    0H                                                  0845
*   RBUFC=DIWBUFC;                  /* POINT TO INSERT BUFC  @ZA31009*/
         L     @10,AMBIWA(,RAMB)                                   0845
         L     RBUFC,DIWBUFC(,@10)                                 0845
*I24:                                                              0846
*   DO;                             /* IDACALL(IDAFREEB)             */
I24      DS    0H                                                  0847
*     CALL IDAFREEB;                /* EXIT TO IDAFREEB              */
         L     @15,@CV01019                                        0847
         BALR  @14,@15                                             0847
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I24;                        /* FREE INSERT BUFFER    @ZA31009*/
*   PLHCIINS=OFF;                   /* RESET INSERT FLAG     @ZA31009*/
         NI    PLHCIINS(RPLH),B'11111011'                          0853
*   GEN(IDARST14);                  /* RESTORE EXTERNAL R14  @ZA31009*/
         IDARST14
*   END CISPLER2;                   /* END OF FREE INS BFR   @ZA31009*/
@EL00008 DS    0H                                                  0855
@EF00008 DS    0H                                                  0855
@ER00008 BR    @14                                                 0855
*                                                                  0856
*/*  INVALIDATE AND FREE THE INSERT BUFFER.                  @ZA31009*/
*                                                                  0856
*CISPLER3:                                                         0856
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0856
CISPLER3 DS    0H                                                  0857
*   DIWBUFC->BUFCVAL=OFF;           /* INVALIDATE INSERT BFR @ZA31009*/
         L     @10,AMBIWA(,RAMB)                                   0857
         L     @10,DIWBUFC(,@10)                                   0857
         NI    BUFCVAL(@10),B'11111011'                            0857
*   CALL CISPLER2;                  /* FREE INSERT BUFFER    @ZA31009*/
         BAL   @14,CISPLER2                                        0858
*   END CISPLER3;                   /* END OF FREE INS BFR   @ZA31009*/
@EL00009 DS    0H                                                  0859
@EF00009 DS    0H                                                  0859
@ER00009 BR    @14                                                 0859
*   GEN REFS(HWORD4)(IDAPATCH);     /* FURNISH PATCH AREA.   @ZA31009*/
         IDAPATCH
*   END IDA019RE                    /* END OF CI SPLIT               */
*                                                                  0861
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IDAIRD  )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDADIWA )                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDARDF  )                                       */
*/*%INCLUDE SYSLIB  (IDACIDF )                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IDAIXSPL)                                       */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*                                                                  0861
*       ;                                                          0861
         B     @EL00001                                            0861
@DATA    DS    0H
@DATD    DSECT
         DS    0F
IDA019RE CSECT
         DS    0F
@CF00046 DC    F'1'
@CH00046 EQU   @CF00046+2
@CF00076 DC    F'2'
@CF00066 DC    F'3'
@CF00197 DC    F'4'
@CF00356 DC    F'6'
@CF00050 DC    F'7'
@CF00038 DC    F'15'
@CF00085 DC    F'24'
@CF01143 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
IDA019RE CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CA01045 DC    A(IDAREPOS)
@CV01010 DC    V(IDAGNFL)
@CV01011 DC    V(IDAGRB)
@CV01012 DC    V(IDASBF)
@CV01013 DC    V(IDATJXIT)
@CV01014 DC    V(IDAWRBFR)
@CV01015 DC    V(IDAAIBF)
@CV01016 DC    V(IDA019RF)
@CV01017 DC    V(IDA019RH)
@CV01018 DC    V(IDA019RM)
@CV01019 DC    V(IDAFREEB)
@CV01034 DC    V(IDA019ST)
         DS    0D
HWORD4   DC    H'4'
@DATD    DSECT
*                                                          /*@X04SVLC*/
RDFCTNUA EQU   X'40'                    COMPLEX RDF INDICATOR
RDFCTNUX EQU   X'FF'-RDFCTNUA           RESET COMPLEX MASK
RDFREPLA EQU   X'08'                    COUNT RDF INDICATOR
RDFREPLX EQU   X'FF'-RDFREPLA           RESET COUNT MASK
RDFEMPTI EQU   X'04'                    EMPTY RECORD       /*@X04SVLC*/
RDFLEN   EQU   3                        LENGTH OF RDF
RDFLLOFF EQU   1                        OFFSET WITHIN RDF TO LL
RDFSGLR  EQU   X'00'                   MASK FOR SINGLE RECORD RDF
RDFGRP   EQU   RDFCTNUA                 MASK FOR LL RDF OF A GROUP RDF
RDFCNT   EQU   RDFREPLA                 MASK FOR COUNT RDF
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019RE CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RRPL     EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
RPARM1   EQU   @12
R14      EQU   @14
R15      EQU   @15
RWORK0   EQU   @00
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
IDAAMB   EQU   0
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBJRN   EQU   AMBFLG1
AMBINBUF EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBCAT   EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBLSR   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBTRACE EQU   IDAAMB+120
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLSEQ   EQU   RPLOPT1
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLDDDD  EQU   RPLRBAR+4
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IDAIXH   EQU   0
IXHLL    EQU   IDAIXH
IXHFLPLN EQU   IDAIXH+2
IXHPTLS  EQU   IDAIXH+3
IXHBRBA  EQU   IDAIXH+4
IXHFSO   EQU   IDAIXH+18
IXHSEO   EQU   IDAIXH+22
IDAIBFLP EQU   0
IBFLPL   EQU   IDAIBFLP+1
IBFLP3   EQU   IDAIBFLP+2
IBFLP2   EQU   IBFLP3
IDASELL  EQU   0
IXSELL   EQU   IDASELL
IDAIXK   EQU   0
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDADIWA  EQU   0
DIWFLG1  EQU   IDADIWA+4
DIWFLG2  EQU   IDADIWA+5
DIWLRBA  EQU   IDADIWA+8
DIWHRBA  EQU   IDADIWA+12
DIWBUFC  EQU   IDADIWA+20
DIWSPLTP EQU   IDADIWA+24
DIWSAVE  EQU   IDADIWA+28
DIWSAVE1 EQU   DIWSAVE
DIWSAVE2 EQU   DIWSAVE+4
DIWSAVE3 EQU   DIWSAVE+8
DIWSAVE4 EQU   DIWSAVE+12
DIWSAVE5 EQU   DIWSAVE+16
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHSSR   EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHADDTE EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHEFLGS EQU   IDAPLH+4
PLHFLG3  EQU   IDAPLH+6
PLHBWD   EQU   PLHFLG3
PLHAFLGS EQU   IDAPLH+7
PLHBFRNO EQU   IDAPLH+15
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJRNLL EQU   IDAPLH+32
PLHJNRBA EQU   IDAPLH+36
PLHJCODE EQU   IDAPLH+40
PLHRSCS  EQU   IDAPLH+43
PLHARDB  EQU   IDAPLH+44
PLHDBUFC EQU   IDAPLH+52
PLHRECP  EQU   IDAPLH+60
PLHFSP   EQU   IDAPLH+64
PLHRDFP  EQU   IDAPLH+68
PLHRDFC  EQU   IDAPLH+72
PLHDIOB  EQU   IDAPLH+76
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHIBUFC EQU   IDAPLH+188
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHKEYPT EQU   IDAPLH+248
PLHTMRPL EQU   IDAPLH+265
PLHEND   EQU   IDAPLH+280
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDNEST  EQU   IDAAMDSB+4
AMDFSCA  EQU   IDAAMDSB+14
AMDCINV  EQU   IDAAMDSB+20
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
AMDASPA  EQU   AMDSTAT+32
AMDNCIS  EQU   AMDSTAT+36
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCINS  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCDDDD EQU   IDABUFC+8
BUFCORBA EQU   IDABUFC+12
BUFCBAD  EQU   IDABUFC+20
BUFCINV  EQU   IDABUFC+28
BUFXIRBA EQU   IDABUFC+40
BUFXORBA EQU   IDABUFC+44
IDARDF   EQU   0
RDFRBYTE EQU   IDARDF
RDFCTNU  EQU   RDFRBYTE
RDFSEG   EQU   RDFRBYTE
RDFREPL  EQU   RDFRBYTE
RDFLL    EQU   IDARDF+1
IDADATA  EQU   0
IDAKEY   EQU   0
IDACIDF  EQU   0
CIDFOSET EQU   IDACIDF
CIDFLL   EQU   IDACIDF+2
CIDFBUSY EQU   CIDFLL
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDHKRBA EQU   IDAARDB+8
ARDPRF   EQU   IDAARDB+28
IDAIXSPL EQU   0
IXSILN   EQU   IDAIXSPL+13
IXSBFLG  EQU   IDAIXSPL+17
IXSHEP   EQU   IDAIXSPL+20
IXSSEP   EQU   IDAIXSPL+24
IXSLEP   EQU   IDAIXSPL+28
GRPRDF   EQU   0
PLHKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
SPLTDPTR EQU   DIWSAVE1
ENDPTR   EQU   DIWSAVE2
SPLTRDFC EQU   DIWSAVE4
SPLTRDFP EQU   DIWSPLTP
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00053 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
IXSPEC   EQU   IDAIXSPL+19
IXSEKON  EQU   IDAIXSPL+18
@NM00061 EQU   IXSBFLG
IXSLELV  EQU   IXSBFLG
IXSSSRH  EQU   IXSBFLG
IXSNOSR  EQU   IDAIXSPL+16
IXSKLEN  EQU   IDAIXSPL+14
IXSTLN   EQU   IDAIXSPL+12
IXSARG   EQU   IDAIXSPL+8
IXSBUFC  EQU   IDAIXSPL+4
IXSSTRBA EQU   IDAIXSPL
ARDKEYS  EQU   IDAARDB+29
@NM00060 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDERBA  EQU   IDAARDB+16
ARDHRBA  EQU   IDAARDB+12
ARDNPTR  EQU   IDAARDB+4
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDEOD   EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
@NM00059 EQU   CIDFLL
KEY      EQU   IDAKEY
AMDATA   EQU   IDADATA
RDFEMPTY EQU   RDFRBYTE
RDF1ST   EQU   RDFSEG
RDFNOT1  EQU   RDFSEG
RDFTYPE  EQU   RDFRBYTE
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCHAIN EQU   IDABUFC+48
BUFCNXT2 EQU   IDABUFC+37
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCCPA  EQU   IDABUFC+16
BUFCAMB  EQU   BUFCPLH
@NM00058 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00057 EQU   IDABUFDR+16
BUFDBUFC EQU   IDABUFDR+12
@NM00056 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00055 EQU   IDAAMDSB+41
@NM00054 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDFSCI  EQU   IDAAMDSB+16
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDKEYLN EQU   IDAAMDSB+8
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00052 EQU   IDAPLH+266
@NM00051 EQU   PLHTMRPL
PLHTMIOB EQU   PLHTMRPL
PLHTMINX EQU   PLHTMRPL
PLHTMDTA EQU   PLHTMRPL
PLHTMDIW EQU   PLHTMRPL
PLHTMBUF EQU   PLHTMRPL
PLHTERM  EQU   PLHTMRPL
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00050 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHRBUFC EQU   IDAPLH+192
PLHNRBA  EQU   IDAPLH+184
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00049 EQU   IDAPLH+172
@NM00048 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHAMB   EQU   IDAPLH+108
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHNBUFC EQU   IDAPLH+56
PLHLRECL EQU   IDAPLH+48
@NM00047 EQU   PLHRSCS
PLHDBPER EQU   PLHRSCS
PLHDSERR EQU   PLHRSCS
PLHASYER EQU   PLHRSCS
@NM00046 EQU   PLHRSCS
PLHBUFHD EQU   PLHRSCS
PLHINEOV EQU   PLHRSCS
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00045 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
@NM00044 EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHASKBF EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
@NM00043 EQU   IDADIWA+92
@NM00042 EQU   IDADIWA+88
@NM00041 EQU   IDADIWA+84
@NM00040 EQU   IDADIWA+80
@NM00039 EQU   IDADIWA+76
@NM00038 EQU   IDADIWA+72
@NM00037 EQU   IDADIWA+68
@NM00036 EQU   IDADIWA+64
@NM00035 EQU   IDADIWA+60
@NM00034 EQU   IDADIWA+56
DIWINRBA EQU   IDADIWA+52
DIWRKCT  EQU   IDADIWA+48
DIWPLH   EQU   IDADIWA+16
@NM00033 EQU   IDADIWA+6
DIWFSPF  EQU   DIWFLG2
DIW1ST   EQU   DIWFLG1
DIWNOT1  EQU   DIWFLG1
DIWSHIFT EQU   DIWFLG1
DIWGSPC  EQU   DIWFLG1
DIWEOKR  EQU   DIWFLG1
DIWPFERR EQU   DIWFLG1
DIWCISPL EQU   DIWFLG1
DIWCAS   EQU   DIWFLG1
DIWLEN   EQU   IDADIWA+2
DIWATV   EQU   IDADIWA+1
DIWID    EQU   IDADIWA
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00032 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00031 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00030 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00029 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00028 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00027 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00026 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00025 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00024 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00023 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
IXKEY    EQU   IDAIXK
IBFLP1   EQU   IBFLP2
IBFLPF   EQU   IDAIBFLP
IXHLEO   EQU   IDAIXH+20
IXHFLGS  EQU   IDAIXH+17
IXHLV    EQU   IDAIXH+16
IXHXX    EQU   IDAIXH+12
IXHHP    EQU   IDAIXH+8
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00022 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
@NM00021 EQU   RPLRBAR+3
@NM00020 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00019 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00018 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00017 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00016 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00015 EQU   IDAAMBL+31
@NM00014 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00013 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00012 EQU   AMBCSWD1+1
@NM00011 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
@NM00010 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00009 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00008 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00007 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBUPX   EQU   AMBINFL
@NM00006 EQU   AMBINFL
@NM00005 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00004 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00003 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00002 EQU   AMBDSORG
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00001 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00202 EQU   CISPLERR
@RF00236 EQU   CISPLERR
@RT00282 EQU   SPFOUND
@RC00305 EQU   @RC00295
@RT00326 EQU   CISPLERR
@RF00402 EQU   @RC00373
@RC00388 EQU   @RC00373
@RF00469 EQU   @RC00454
@RF00479 EQU   @RC00454
@RT00573 EQU   CISPLERR
@RT00575 EQU   CISPLERR
@RC00682 EQU   @EL00002
@RC00702 EQU   @EL00004
@RF00735 EQU   @RC00723
@RC00727 EQU   @RC00723
@RF00399 EQU   @RC00388
@RC00397 EQU   @RC00388
@ENDDATA EQU   *
         END   IDA019RE,(C'PLS1447',0701,78209)
