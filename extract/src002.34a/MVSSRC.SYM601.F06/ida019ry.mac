         TITLE 'IDA019RY--VSAM SHARED BUFFER MANAGER--PART ONE         *
                        '
IDA019RY CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA019RY  78.180'                                 0001
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  LA    @10,4095(,@11)                                      0001
         USING @PSTART,@11                                         0001
         USING @PSTART+4095,@10                                    0001
         LH    RWORK1,FUNCTLST(RWORK1)      PICK UP OFFSET
         B     @00(RWORK1,@11)              GO TO FUNCT EP
FUNCTLST DC    AL2(FREEB-@PSTART)           OFFSET
         DC    AL2(WRBFR-@PSTART)           OFFSET
         DC    AL2(SBF-@PSTART)             OFFSET
         DC    AL2(GRB-@PSTART)             OFFSET
         DC    AL2(GNFL-@PSTART)            OFFSET
         DC    AL2(GNNFL-@PSTART)           OFFSET
         DC    AL2(GNXT-@PSTART)            OFFSET
         DC    AL2(WRTBF-@PSTART)           OFFSET
         DC    AL2(SCHBF-@PSTART)           OFFSET
         DC    AL2(MRKBF-@PSTART)           OFFSET
         DC    AL2(GWSEG-@PSTART)           OFFSET
*                                                                  0204
*   /*****************************************************************/
*   /*                                                               */
*   /* FREEB - FREE BUFFER                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0204
*/*                                                                0204
*01 FUNCTION = TO FREE AN INDEX OR DATA BUFFER FOR REUSE.          0204
*01 INPUT =    STANDARD VSAM REGISTERS.  ALSO, RBUFC POINTS TO THE 0204
*              BUFC TO BE FREED.                                   0204
*01 OUTPUT =   STANDARD VSAM REGISTERS.                              */
*                                                                  0204
*FREEB:                             /* FREE BUFFER                   */
*   IF RBUFC=ZERO THEN              /* IF NO BUFC PTR        @ZA17500*/
FREEB    LTR   RBUFC,RBUFC                                         0204
         BZ    @RT00204                                            0204
*     RETURN;                       /* RTN TO CALLER         @ZA17500*/
*   GEN(IDASVR14);                  /* SAVE RETURN REG               */
         IDASVR14
*   IF BUFCMW=ON THEN               /* MUST WRITE ?                  */
         TM    BUFCMW(RBUFC),B'10000000'                           0207
         BNO   @RF00207                                            0207
*     DO;                           /* YES, SET MDBTS TO IND         */
*       CALL SETMDBTS;              /* SET MOD MASK                  */
         BAL   @14,SETMDBTS                                        0209
*       BUFCDDDD=BUFCORBA;          /* IND CORRECT RBA               */
         L     @15,BUFCORBA(,RBUFC)                                0210
         ST    @15,BUFCDDDD(,RBUFC)                                0210
*     END;                                                         0211
*                                                                  0211
*/* IF PROCESSING SPANNED RECORD SEGMENTS IN A FORWARD DIRECTION,    */
*/* RETAIN THE SAME BUFFER SO THAT BUFXIRBA WILL KEEP THE SAME VALUE */
*/* FOR ALL SEGMENTS OF THE RECORD.  IF PROCESSING BACKWARDS,        */
*/* INVALIDATE THE SEGMENTS UNTIL THE FIRST ONE IS REACHED SO THAT   */
*/* DUPLICATE RBAS WILL NOT OCCUR (GWSEG LOGIC DURING UPDATE WOULD   */
*/* OVERLAY THE CURRENT BUFFER) AND SO THAT EXCLUSIVE CONTROL CHECK- */
*/* ING WILL BE DONE WHEN GRBA IS ISSUED FOR THE 1ST SEGMENT @ZA07544*/
*                                                                  0212
*   IF BUFCSEG=ON THEN              /* SPANNED RCD?          @ZA07544*/
@RF00207 TM    BUFCSEG(RBUFC),B'01000000'                          0212
         BNO   @RF00212                                            0212
*     DO;                           /*                       @ZA07544*/
*       RFY                                                        0214
*         RWORK1 RSTD;              /* GET REG                       */
*/*   POINT TO RDF IN RECORD.                                        */
*                                                                  0215
*       RWORK1=BUFCBAD+AMDCINV-LENGTH(IDACIDF)-LENGTH(IDARDF);     0215
         L     @15,AMBDSB(,RAMB)                                   0215
         L     RWORK1,BUFCBAD(,RBUFC)                              0215
         AL    RWORK1,AMDCINV(,@15)                                0215
         SL    RWORK1,@CF00493                                     0215
*       IF(RPLBWD=OFF×RPLKEY=ON) THEN/* FORWARD MODE?        @ZA07544*/
         TM    RPLKEY(RRPL),B'10000000'                            0216
         BNZ   @RT00216                                            0216
         TM    RPLBWD(RRPL),B'00010000'                            0216
         BO    @RF00216                                            0216
@RT00216 DS    0H                                                  0217
*         DO;                       /* YES IF HERE           @ZA07544*/
*           IF RWORK1->RDF1ST=ON&   /* FIRST OR MIDDLE?      @ZA07544*/
*               BUFCINS=OFF THEN    /* NOT INSERT BFR        @ZA07544*/
         TM    RDF1ST(RWORK1),B'00010000'                          0218
         BNO   @RF00218                                            0218
         TM    BUFCINS(RBUFC),B'00100000'                          0218
         BNZ   @RF00218                                            0218
*             CALL BMEXIT;          /* YES, RETAIN BFR       @ZA07544*/
         BAL   @14,BMEXIT                                          0219
*           ELSE                    /* NOT 1ST OR MID        @ZA07544*/
*             CALL PURGEBFR;        /* REMOVE SEG            @ZA07544*/
         B     @RC00218                                            0220
@RF00218 BAL   @14,PURGEBFR                                        0220
*         END;                      /* END FWD MODE          @ZA07544*/
*       ELSE                        /* BWD PROCESSING        @ZA07544*/
*         CALL PURGEBFR;            /* REMOVE SEGMENT        @ZA07544*/
         B     @RC00216                                            0222
@RF00216 BAL   @14,PURGEBFR                                        0222
*     END;                          /* END SPANNED RCDS      @ZA07544*/
@RC00216 DS    0H                                                  0224
*   BUFCEXC=OFF;                    /* RESET EXC CTRL                */
@RF00212 DS    0H                                                  0225
*   BUFCINS=OFF;                    /* RESET INS IND                 */
         NI    BUFCEXC(RBUFC),B'11011101'                          0225
*   CALL DECRUCNT;                  /* DECR CNT & MK EMPTY IF NEEDED.*/
         BAL   @14,DECRUCNT                                        0226
*   IF RBUFC=PLHIBUFC THEN          /* INDEX BUFC ?                  */
         C     RBUFC,PLHIBUFC(,RPLH)                               0227
         BNE   @RF00227                                            0227
*     PLHIBUFC=ZERO;                /* YES, ZERO INDEX PTR           */
         SLR   @15,@15                                             0228
         ST    @15,PLHIBUFC(,RPLH)                                 0228
*   ELSE                            /* NO, IS DATA                   */
*     IF RBUFC=PLHDBUFC THEN        /* MAKE SURE                     */
         B     @RC00227                                            0229
@RF00227 C     RBUFC,PLHDBUFC(,RPLH)                               0229
         BNE   @RF00229                                            0229
*       PLHDBUFC=ZERO;              /* ZERO DATA PTR                 */
         SLR   @15,@15                                             0230
         ST    @15,PLHDBUFC(,RPLH)                                 0230
*     ELSE                          /* INSERT -              @ZA07544*/
*       IF RBUFC=DIWBUFC THEN       /* - BUFFER?             @ZA07544*/
         B     @RC00229                                            0231
@RF00229 L     @15,AMBIWA(,RAMB)                                   0231
         C     RBUFC,DIWBUFC(,@15)                                 0231
         BNE   @RF00231                                            0231
*         DIWBUFC=ZERO;             /* YES, ZERO PTR         @ZA07544*/
         SLR   @00,@00                                             0232
         ST    @00,DIWBUFC(,@15)                                   0232
*   CALL BMEXIT;                    /* EXIT TO CALLER                */
@RF00231 DS    0H                                                  0233
@RC00229 DS    0H                                                  0233
@RC00227 BAL   @14,BMEXIT                                          0233
*                                                                  0234
*   /*****************************************************************/
*   /*                                                               */
*   /* WRBFR - WRITE BUFFER                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0234
*/*                                                                0234
*01 FUNCTION = TO WRITE OUT BUFFER AND CHECK FOR I/O ERRORS.       0234
*01 INPUT =    RBUFC POINTS TO A BUFC FOR WHICH I/O IS TO BE DONE. 0234
*01 OUTPUT =   THE STANDARD REGISTERS AND RBUFC ARE UNCHANGED.  A  0234
*              CODE IS SET IN THE RPL IF AN I/O ERROR OCCURS.        */
*                                                                  0234
*WRBFR:                             /* WRITE BUFFER                  */
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             0234
         B     @PB00002                                            0234
WRBFR    DS    0H                                                  0235
*   IF BUFCMW=OFF&BUFCRRD=OFF THEN  /* IF NO FUNCTION        @ZA07549*/
         TM    BUFCMW(RBUFC),B'10100000'                           0235
         BNZ   @RF00235                                            0235
*     DO;                           /*                       @ZA16100*/
*       BUFCMDBT=ZERO;              /* ZERO MOD BITS         @ZA16100*/
         SLR   @15,@15                                             0237
         ST    @15,BUFCMDBT(,RBUFC)                                0237
*       RETURN;                     /* RETURN.               @ZA07549*/
@EL00002 DS    0H                                                  0238
@EF00002 DS    0H                                                  0238
@ER00002 BR    @14                                                 0238
*     END;                          /*                       @ZA16100*/
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
@RF00235 DS    0H                                                  0240
         IDASVR14
*   IF AMDWCK=ON THEN               /* WRITE CHK OPTION?             */
         L     @15,AMBDSB(,RAMB)                                   0241
         TM    AMDWCK(@15),B'01000000'                             0241
         BNO   @RF00241                                            0241
*     BUFCWC=ON;                    /* YES                           */
         OI    BUFCWC(RBUFC),B'00001000'                           0242
*   ELSE                            /* NO                            */
*     BUFCWC=OFF;                   /* NO WRT CHK                    */
         B     @RC00241                                            0243
@RF00241 NI    BUFCWC(RBUFC),B'11110111'                           0243
*   PLHBMSV5=RPARM1;                /* SAVE RPARM1                   */
@RC00241 ST    RPARM1,PLHBMSV5(,RPLH)                              0244
*   IF AMBJRN=ON&                   /* JRNAD REQD -                  */
*       BUFCVAL=ON THEN             /* FOR VALID RBA?                */
         TM    AMBJRN(RAMB),B'00000010'                            0245
         BNO   @RF00245                                            0245
         TM    BUFCVAL(RBUFC),B'00000100'                          0245
         BNO   @RF00245                                            0245
*     DO;                           /* YES                           */
*       PLHJCODE=PLHJIXM;           /* IND IX MOD                    */
         MVI   PLHJCODE(RPLH),B'00101100'                          0247
*       PLHJRNLL=AMDCINV;           /* CI SIZE                       */
         L     @15,AMBDSB(,RAMB)                                   0248
         L     @15,AMDCINV(,@15)                                   0248
         ST    @15,PLHJRNLL(,RPLH)                                 0248
*       PLHJNRBA=BUFCORBA;          /* RBA                           */
         L     @15,BUFCORBA(,RBUFC)                                0249
         ST    @15,PLHJNRBA(,RPLH)                                 0249
*       PLHCRBA=BUFCBAD;            /* BUFFER ADDR                   */
         L     @15,BUFCBAD(,RBUFC)                                 0250
         ST    @15,PLHCRBA(,RPLH)                                  0250
*I01:                                                              0251
*       DO;                         /* IDACALL(IDATJXIT)             */
I01      DS    0H                                                  0252
*         CALL IDATJXIT;            /* EXIT TO IDATJXIT              */
         L     @15,@CV00153                                        0252
         BALR  @14,@15                                             0252
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(USING *+4095,@10);    /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*         GEN(LA    @10,4095(@11)); /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*         GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE      */
         L     @10,=A(@PSTART+4095)
*         GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE       */
         USING @PSTART+4095,@10
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I01;                    /* JRNAD EXIT                    */
*     END;                                                         0262
*   RPARM1=PLHDIOB;                 /* POINT TO IOB                  */
@RF00245 L     RPARM1,PLHDIOB(,RPLH)                               0263
*   IF BUFCER2=ON THEN              /* IF PRIOR WRITE ERROR          */
         TM    BUFCER2(RBUFC),B'00001000'                          0264
         BNO   @RF00264                                            0264
*     DO;                           /* ADJUST ERROR COUNT.           */
*       BUFCER2=OFF;                /* CLEAR ERROR FLAG.             */
*                                                                  0266
         NI    BUFCER2(RBUFC),B'11110111'                          0266
*       /*************************************************************/
*       /*                                                           */
*       /* DECR BSPH ERR CNT                                         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0267
*WRBDERCT:                                                         0267
*       RFY                                                        0267
*        (RWORK4,                                                  0267
*         RWORK5) RSTD;             /* LOCK REGS                     */
WRBDERCT DS    0H                                                  0268
*       RWORK4=BSPHRSC2;            /* OLD CNT                       */
         L     @15,AMBBUFC(,RAMB)                                  0268
         L     RWORK4,BSPHRSC2(,@15)                               0268
*       RWORK5=RWORK4-ONE;          /* NEW CNT                       */
         LR    RWORK5,RWORK4                                       0269
         BCTR  RWORK5,0                                            0269
*       CS(RWORK4,RWORK5,BSPHRSC2); /* SWAP IF NO CHG                */
         CS    RWORK4,@09,BSPHRSC2(@15)                            0270
*       GEN(BNZ WRBDERCT);          /* LOOP TILL SUCCESSFUL          */
         BNZ WRBDERCT
*       RFY                                                        0272
*        (RWORK4,                                                  0272
*         RWORK5) UNRSTD;           /* UNLOCK                        */
*     END;                          /* END PREVIOUS WRITE ERR        */
*   IF RPLASY=OFF THEN              /* SYNCHRONOUS REQUEST?  @Z40GSDT*/
@RF00264 TM    RPLASY(RRPL),B'00001000'                            0274
         BNZ   @RF00274                                            0274
*     PLHSR=ON;                     /* SET SUSPEND/RESUME    @Z40GSDT*/
         OI    PLHSR(RPLH),B'00000001'                             0275
*I02:                                                              0276
*   DO;                             /* IDACALL(IDA019R3)             */
@RF00274 DS    0H                                                  0276
I02      DS    0H                                                  0277
*     CALL IDA019R3;                /* EXIT TO IDA019R3              */
         L     @15,@CV00148                                        0277
         BALR  @14,@15                                             0277
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(USING *+4095,@10);        /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*     GEN(LA    @10,4095(@11));     /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*     GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE          */
         L     @10,=A(@PSTART+4095)
*     GEN(USING @PSTART+4095,@10);  /* ESTABLISH SECOND BASE         */
         USING @PSTART+4095,@10
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I02;                        /* CALL I/O MGR                  */
*I03:                                                              0287
*   DO;                             /* IDACALL(IDAWAIT)              */
I03      DS    0H                                                  0288
*     CALL IDAWAIT;                 /* EXIT TO IDAWAIT               */
         L     @15,@CV00150                                        0288
         BALR  @14,@15                                             0288
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(USING *+4095,@10);        /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*     GEN(LA    @10,4095(@11));     /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*     GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE          */
         L     @10,=A(@PSTART+4095)
*     GEN(USING @PSTART+4095,@10);  /* ESTABLISH SECOND BASE         */
         USING @PSTART+4095,@10
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I03;                        /* SYNCHRONIZE                   */
*   CALL ERRORCHK;                  /* CHK FOR ERRORS                */
         BAL   @14,ERRORCHK                                        0298
*   RPARM1=PLHBMSV5;                /* RESTORE RPARM1                */
         L     RPARM1,PLHBMSV5(,RPLH)                              0299
*   IF RPLRTNCD=ZERO THEN           /* ERROR ?                       */
         CLI   RPLRTNCD(RRPL),0                                    0300
         BNE   @RF00300                                            0300
*     BUFCMDBT=ZERO;                /* NO, SET TO RETURN             */
         SLR   @15,@15                                             0301
         ST    @15,BUFCMDBT(,RBUFC)                                0301
*   ELSE                            /* YES, SET FOR MSG              */
*     IF RPLRTNCD='0C'X THEN        /* PHYSICAL ERR?                 */
         B     @RC00300                                            0302
@RF00300 CLI   RPLRTNCD(RRPL),12                                   0302
         BNE   @RF00302                                            0302
*       DO;                         /* YES                           */
*         PLHJNRBA=RPLRTNCD;        /* RETURN CODE                   */
         SLR   @15,@15                                             0304
         IC    @15,RPLRTNCD(,RRPL)                                 0304
         ST    @15,PLHJNRBA(,RPLH)                                 0304
*I04:                                                              0305
*         DO;                       /* IDACALL(IDA019R5)             */
I04      DS    0H                                                  0306
*           CALL IDA019R5;          /* EXIT TO IDA019R5              */
         L     @15,@CV00149                                        0306
         BALR  @14,@15                                             0306
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(USING *+4095,@10);  /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*           GEN(LA    @10,4095(@11));/* LOAD SECOND BASE             */
         LA    @10,4095(@11)
*           GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE    */
         L     @10,=A(@PSTART+4095)
*           GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE     */
         USING @PSTART+4095,@10
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I04;                  /* MSG RTN                       */
*         IF AMBEXEX(ONE:ONE)^=ZERO THEN/* YES                       */
         CLI   AMBEXEX(RAMB),0                                     0316
         BE    @RF00316                                            0316
*           DO;                                                    0317
*I05:                                                              0318
*             DO;                   /* IDACALL(IDAEXEX)              */
I05      DS    0H                                                  0319
*               CALL IDAEXEX;       /* EXIT TO IDAEXEX               */
         L     @15,@CV00154                                        0319
         BALR  @14,@15                                             0319
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE       */
         USING *+4095,@10
*               GEN(LA    @10,4095(@11));/* LOAD SECOND BASE         */
         LA    @10,4095(@11)
*               GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE*/
         L     @10,=A(@PSTART+4095)
*               GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE */
         USING @PSTART+4095,@10
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I05;              /* EXCEPTION RTN                 */
*           END;                    /* END EXCEPTION CODE            */
*         IF AMBJRN=ON THEN         /* JRN EXIT ACTIVE?              */
@RF00316 TM    AMBJRN(RAMB),B'00000010'                            0330
         BNO   @RF00330                                            0330
*           DO;                     /* YES                           */
*             PLHJCODE=PLHJOER;     /* IND OUTPUT ERR                */
         MVI   PLHJCODE(RPLH),B'00101000'                          0332
*             PLHJRNLL=BUFCMDBT;    /* MOD MASK                      */
         L     @15,BUFCMDBT(,RBUFC)                                0333
         ST    @15,PLHJRNLL(,RPLH)                                 0333
*             PLHCRBA=BUFCBAD;      /* BUFFER ADDR                   */
         L     @15,BUFCBAD(,RBUFC)                                 0334
         ST    @15,PLHCRBA(,RPLH)                                  0334
*I06:                                                              0335
*             DO;                   /* IDACALL(IDATJXIT)             */
I06      DS    0H                                                  0336
*               CALL IDATJXIT;      /* EXIT TO IDATJXIT              */
         L     @15,@CV00153                                        0336
         BALR  @14,@15                                             0336
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE       */
         USING *+4095,@10
*               GEN(LA    @10,4095(@11));/* LOAD SECOND BASE         */
         LA    @10,4095(@11)
*               GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE*/
         L     @10,=A(@PSTART+4095)
*               GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE */
         USING @PSTART+4095,@10
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I06;              /* JRNAD EXIT                    */
*                                                                  0345
*             /*******************************************************/
*             /*                                                     */
*             /* USE MASK RETURNED.                                  */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0346
*             BUFCMDBT=BUFCMDBT×PLHJRNLL;                          0346
         L     @15,BUFCMDBT(,RBUFC)                                0346
         O     @15,PLHJRNLL(,RPLH)                                 0346
         ST    @15,BUFCMDBT(,RBUFC)                                0346
*             RFY                                                  0347
*              (RWORK1,                                            0347
*               RWORK2) RSTD;       /* LOCK                          */
*WRBLOOP1:                                                         0348
*             RWORK1=BSPHMDBT;      /* OLD MASK                      */
WRBLOOP1 L     @15,AMBBUFC(,RAMB)                                  0348
         L     RWORK1,BSPHMDBT(,@15)                               0348
*             RWORK2=RWORK1×PLHJRNLL;/* NEW MASK                     */
         LR    RWORK2,RWORK1                                       0349
         O     RWORK2,PLHJRNLL(,RPLH)                              0349
*             CS(RWORK1,RWORK2,BSPHMDBT);/* MODIFY                   */
         CS    RWORK1,@06,BSPHMDBT(@15)                            0350
*             GEN(BNZ   WRBLOOP1);  /* LOOP TILL SUCCESSFUL          */
         BNZ   WRBLOOP1
*           END;                    /* END JRNAD CODE                */
*         IF RPLEMLEN>=LENGTH(ERBASE) THEN/* ANY MSG?                */
@RF00330 CLC   RPLEMLEN(2,RRPL),@CH01401                           0353
         BL    @RF00353                                            0353
*           ERMBFRA=ZERO;           /* YES, ZERO BUFC PTR            */
         L     @15,RPLERMSA(,RRPL)                                 0354
         SLR   @07,@07                                             0354
         STCM  @07,15,ERMBFRA(@15)                                 0354
*         IF PLHJNRBA=ZERO THEN     /* PROCESS OPTIONS ZERO?         */
@RF00353 SLR   @15,@15                                             0355
         CL    @15,PLHJNRBA(,RPLH)                                 0355
         BNE   @RF00355                                            0355
*           RPLFDBWD=ZERO;          /* CLEAR RTN CODE        @ZA07544*/
         ST    @15,RPLFDBWD(,RRPL)                                 0356
*         ELSE                      /* ERROR IS UNCLEARED            */
*           DO;                     /* INCREMENT ERROR COUNT         */
         B     @RC00355                                            0357
@RF00355 DS    0H                                                  0358
*             RWORK1=BSPHRSC2;      /* BSPHERCT                      */
         L     @15,AMBBUFC(,RAMB)                                  0358
         L     RWORK1,BSPHRSC2(,@15)                               0358
*CSLOOP7:                                                          0359
*             RWORK2=RWORK1+ONE;    /* NEW CNT                       */
CSLOOP7  LA    RWORK2,1                                            0359
         ALR   RWORK2,RWORK1                                       0359
*             CS(RWORK1,RWORK2,BSPHRSC2);/* SWAP IF NO CHNG          */
         L     @07,AMBBUFC(,RAMB)                                  0360
         CS    RWORK1,@06,BSPHRSC2(@07)                            0360
*             BC(7,CSLOOP7);        /* LOOP TILL SUCCESSFUL  @Z40GSDT*/
         BC    7,CSLOOP7                                           0361
*           END;                    /* END OF UNCLEARED ERROR        */
*         RFY                                                      0363
*          (RWORK1,                                                0363
*           RWORK2) UNRSTD;         /* UNLOCK                @OZ05537*/
@RC00355 DS    0H                                                  0364
*         RPARM1=PLHBMSV5;          /* RESTORE RPARM1                */
         L     RPARM1,PLHBMSV5(,RPLH)                              0364
*       END;                        /* END ERROR CODE                */
*   CALL BMEXIT;                    /* RETURN TO CALLER              */
@RF00302 DS    0H                                                  0366
@RC00300 BAL   @14,BMEXIT                                          0366
*   END WRBFR;                      /* END OF FORCE WRITE            */
         B     @EL00002                                            0367
@PB00002 DS    0H                                                  0368
*                                                                  0368
*   /*****************************************************************/
*   /*                                                               */
*   /* SBF - SUBTRACT BUFFER                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0368
*/*                                                                0368
*01 FUNCTION = REMOVAL OF CURRENT DATA AND INDEX BUFC FROM A CHAIN.
*01 INPUT =    RBUFC CONTAINS THE ADDRESS OF THE BUFC TO BE REMOVED .
*01 OUTPUT =   BUFC IS RELEASED. RPL CODES SET IF ERROR OCCURS.      */
*                                                                  0368
*SBF:                               /* SUBTRACT BUFFER               */
*   GEN(IDASVR14);                  /* SAVE                          */
SBF      IDASVR14
*   RBUFC=PLHDBUFC;                 /* SET FOR DATA BUFC             */
         L     RBUFC,PLHDBUFC(,RPLH)                               0369
*   RAMB=AMBLDTA;                   /* POINT TO DATA AMB     @ZA27946*/
         L     @15,RPLDACB(,RRPL)                                  0370
         L     @15,ACBAMBL(,@15)                                   0370
         L     RAMB,AMBLDTA(,@15)                                  0370
*SBFLP1:                                                           0371
*   IF RBUFC^=ZERO THEN             /* IS THERE A BUFC?              */
SBFLP1   LTR   RBUFC,RBUFC                                         0371
         BZ    @RF00371                                            0371
*     DO;                           /* YES                           */
*       IF BUFCMW=ON THEN           /* MUST WRITE?                   */
         TM    BUFCMW(RBUFC),B'10000000'                           0373
         BNO   @RF00373                                            0373
*         DO;                       /* YES                           */
*           CALL SETMDBTS;          /* SET MOD BITS                  */
         BAL   @14,SETMDBTS                                        0375
*           BUFCDDDD=BUFCORBA;      /* IND CORRECT RBA               */
         L     @15,BUFCORBA(,RBUFC)                                0376
         ST    @15,BUFCDDDD(,RBUFC)                                0376
*           IF AMBDFR=OFF&          /* NO DEFER &                    */
*               BUFCUCNT=ONE THEN   /* SINGLE USER                   */
         TM    AMBDFR(RAMB),B'00001000'                            0377
         BNZ   @RF00377                                            0377
         CLI   BUFCUCNT(RBUFC),1                                   0377
         BNE   @RF00377                                            0377
*             DO;                   /* YES WRITE IT                  */
*               BUFCBSYW=ON;        /* IND BSY WRITE                 */
         OI    BUFCBSYW(RBUFC),B'00010000'                         0379
*               CALL WRBFR;         /* WRITE IT                      */
         BAL   @14,WRBFR                                           0380
*               BUFCBSYW=OFF;       /* RESET BSY WRITE               */
         NI    BUFCBSYW(RBUFC),B'11101111'                         0381
*               RFY                                                0382
*                (RWORK1,                                          0382
*                 RWORK2) RSTD;     /* LOCK UP REGS                  */
*SBFLP2:                                                           0383
*               RWORK1=BSPHUIW;     /* OLD CNT                       */
SBFLP2   L     @15,AMBBUFC(,RAMB)                                  0383
         L     RWORK1,BSPHUIW(,@15)                                0383
*               RWORK2=RWORK1+ONE;  /* INCR                          */
         LA    RWORK2,1                                            0384
         ALR   RWORK2,RWORK1                                       0384
*               CS(RWORK1,RWORK2,BSPHUIW);/* MODIFY                  */
         CS    RWORK1,@06,BSPHUIW(@15)                             0385
*               GEN(BNZ   SBFLP2);  /* LOOP TILL SUCCESSFUL          */
         BNZ   SBFLP2
*               RFY                                                0387
*                (RWORK1,                                          0387
*                 RWORK2) UNRSTD;   /* FREE REGS                     */
*             END;                                                 0388
*         END;                      /* END MUST WRITE ON             */
@RF00377 DS    0H                                                  0390
*       IF BUFCSEG=ON THEN          /* IF SPANNED RCD        @ZA07544*/
@RF00373 TM    BUFCSEG(RBUFC),B'01000000'                          0390
         BNO   @RF00390                                            0390
*         CALL PURGEBFR;            /* FORGET IT             @ZA07544*/
         BAL   @14,PURGEBFR                                        0391
*       BUFCEXC=OFF;                /* RESET EXCL CTRL               */
@RF00390 NI    BUFCEXC(RBUFC),B'11111101'                          0392
*       CALL DECRUCNT;              /* DECR CNT                      */
         BAL   @14,DECRUCNT                                        0393
*       PLHDBUFC=ZERO;              /* FREE BUFC                     */
         SLR   @15,@15                                             0394
         ST    @15,PLHDBUFC(,RPLH)                                 0394
*     END;                          /* END RBUFC NE ZERO             */
*   IF AMBTYPE=AMBINDEX THEN        /* INDEX AMB?                    */
@RF00371 TM    AMBTYPE(RAMB),B'01000000'                           0396
         BNO   @RF00396                                            0396
*     DO;                           /* YES                           */
*       PLHIBUFC=ZERO;              /* FREE BUFC                     */
         SLR   @15,@15                                             0398
         ST    @15,PLHIBUFC(,RPLH)                                 0398
*       RAMB=AMBLDTA;               /* PT TO DATA AMB                */
         L     @15,RPLDACB(,RRPL)                                  0399
         L     @15,ACBAMBL(,@15)                                   0399
         L     RAMB,AMBLDTA(,@15)                                  0399
*     END;                                                         0400
*   ELSE                            /* NO CHK FOR IC BUFC            */
*     DO;                                                          0401
         B     @RC00396                                            0401
@RF00396 DS    0H                                                  0402
*       IF PLHIBUFC^=ZERO THEN      /* IS THERE AN IX BUFC?          */
         L     @15,PLHIBUFC(,RPLH)                                 0402
         LTR   @15,@15                                             0402
         BZ    @RF00402                                            0402
*         DO;                       /* YES                           */
*           RBUFC=PLHIBUFC;         /* PT TO IX BUFC                 */
         LR    RBUFC,@15                                           0404
*           RAMB=BUFCAMB;           /* PT TO IX AMB                  */
         L     RAMB,BUFCAMB(,RBUFC)                                0405
*           GOTO SBFLP1;            /* LOOP TO FREE IX BUFC          */
         B     SBFLP1                                              0406
*         END;                                                     0407
*     END;                                                         0408
@RF00402 DS    0H                                                  0409
*   CALL BMEXIT;                    /* END OF SUBTRACT BUFFER        */
@RC00396 BAL   @14,BMEXIT                                          0409
*                                                                  0410
*   /*****************************************************************/
*   /*                                                               */
*   /* GRB - GET RBA                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0410
*/*                                                                0410
*01 FUNCTION = GET A CI WITH THE SPECIFIED RBA.                    0410
*01 INPUT =    RRPL - RPL FOR REQUEST.                             0410
*              RPLH - PLH FOR REQUEST.                             0410
*              RPARM1 - RBA OF CI REQUESTED.                       0410
*              RAMB - AMB CONTAINING CI.                           0410
*01 OUTPUT =   RBUFC - BUFC OF BUFFER CONTAINING REQUESTED CI.     0410
*              EXCLUSIVE CTRL IS SET IF REQUIRED.                  0410
*              RPLERRCD & RPLRTNCD SET IF ANY ERRORS OCCUR.        0410
*              RPARM1 = CI RBA IF EXCLUSIVE CONTROL ERROR.   @ZA07544*/
*                                                                  0410
*GRB:                               /* GET RBA                       */
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0410
         B     @PB00003                                            0410
GRB      DS    0H                                                  0411
*   GEN(IDASVR14);                  /* SAVE RTRN REG                 */
         IDASVR14
*   IF AMBTYPE=AMBDATA THEN         /* DATA AMB?                     */
         TM    AMBTYPE(RAMB),B'01000000'                           0412
         BNZ   @RF00412                                            0412
*     DO;                                                          0413
*       RBUFC=PLHDBUFC;             /* PTR TO DBUFC          @ZA07544*/
         L     RBUFC,PLHDBUFC(,RPLH)                               0414
*       IF RBUFC^=ZERO THEN         /* IF NECESSARY,         @ZA07544*/
         LTR   RBUFC,RBUFC                                         0415
         BZ    @RF00415                                            0415
*         DO;                       /* FREE OLD BUFC         @ZA07544*/
*           IF BUFCSEG=ON THEN      /* DOES BFR HAVE         @ZA07544*/
         TM    BUFCSEG(RBUFC),B'01000000'                          0417
         BNO   @RF00417                                            0417
*             DO;                   /* SPANNED RCD?          @ZA07544*/
*               BUFCSEG=OFF;        /* YES, FORCE            @ZA07544*/
*               BUFCVAL=OFF;        /* FREEB TO GET          @ZA07544*/
         NI    BUFCSEG(RBUFC),B'10111011'                          0420
*             END;                  /* RID OF IT.            @ZA07544*/
*           CALL FREEB;             /* FREE OLD BFR.         @ZA07544*/
@RF00417 BAL   @14,FREEB                                           0422
*         END;                      /* END OF SPANNED        @ZA07544*/
*       PLHNRBA=RPARM1;             /* SAVE CURR RBA         @ZA07544*/
@RF00415 ST    RPARM1,PLHNRBA(,RPLH)                               0424
*     END;                          /* END DATA AMB          @ZA07544*/
*   ELSE                            /* INDEX AMB             @ZA07544*/
*     DO;                           /*                       @ZA07544*/
         B     @RC00412                                            0426
@RF00412 DS    0H                                                  0427
*       RBUFC=PLHIBUFC;             /* INDEX POINTER         @ZA07544*/
         L     RBUFC,PLHIBUFC(,RPLH)                               0427
*       IF RBUFC^=ZERO THEN         /* IF NECESSARY,         @ZA07544*/
         LTR   RBUFC,RBUFC                                         0428
         BZ    @RF00428                                            0428
*         CALL FREEB;               /* FREE OLD BFR.         @ZA07544*/
         BAL   @14,FREEB                                           0429
*     END;                          /* END INDEX AMB         @ZA07544*/
*                                                                  0430
@RF00428 DS    0H                                                  0431
*   /*****************************************************************/
*   /*                                                               */
*   /* SET EXCL CTRL ERR IF DESIRED RBA IS IN ACTIVE CI OR CA SPLIT  */
*   /* BY ANOTHER PLH.                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0431
*GRSTRT1:                           /* RESTART POS. 1                */
*   IF AMBTYPE=AMBDATA&             /* DATA AMB & -                  */
*       ((DIWCAS=ON&                /* CA SPLIT &            @ZA25653*/
*       RPLH^=DIWPLH&               /* ANOTHER PLH &         @ZA25653*/
*       (RPARM1>=DIWLRBA&           /* IN RBA                @ZA25653*/
*       RPARM1<=DIWHRBA))×          /* - RANGE OR            @ZA25653*/
*       (DIWSHIFT=ON&               /* INSERT POINT          @ZA25653*/
*       RPLH^=DIWPLH&               /* ANOTHER PLH &         @ZA25653*/
*       RPARM1=DIWINRBA)) THEN      /* SHIFT?                @ZA25653*/
@RC00412 DS    0H                                                  0431
GRSTRT1  TM    AMBTYPE(RAMB),B'01000000'                           0431
         BNZ   @RF00431                                            0431
         L     @15,AMBIWA(,RAMB)                                   0431
         TM    DIWCAS(@15),B'10000000'                             0431
         BNO   @GL00005                                            0431
         C     RPLH,DIWPLH(,@15)                                   0431
         BE    @GL00005                                            0431
         CL    RPARM1,DIWLRBA(,@15)                                0431
         BL    @GL00005                                            0431
         CL    RPARM1,DIWHRBA(,@15)                                0431
         BNH   @RT00431                                            0431
@GL00005 L     @15,AMBIWA(,RAMB)                                   0431
         TM    DIWSHIFT(@15),B'00000100'                           0431
         BNO   @RF00431                                            0431
         C     RPLH,DIWPLH(,@15)                                   0431
         BE    @RF00431                                            0431
         CL    RPARM1,DIWINRBA(,@15)                               0431
         BNE   @RF00431                                            0431
@RT00431 DS    0H                                                  0432
*     DO;                           /* YES, EXCL CTRL ERR            */
*GREXCLER:                                                         0433
*       RPLERRCD=RPLEXCL;           /* IND EXCL CTL ERR              */
GREXCLER MVI   RPLERRCD(RRPL),X'14'                                0433
*       RPLRTNCD='08'X;             /* IND LOGICAL ERR               */
         MVI   RPLRTNCD(RRPL),X'08'                                0434
*       CALL BMEXIT;                /* EXIT                          */
         BAL   @14,BMEXIT                                          0435
*     END;                                                         0436
*   CALL GUCHNSHR;                  /* GET SCH RIGHTS                */
@RF00431 BAL   @14,GUCHNSHR                                        0437
*   PLHRDCNT=AMBXRDCT;              /* SAVE CNT                      */
*                                                                  0438
         L     @15,AMBEOVPT(,RAMB)                                 0438
         LH    @15,AMBXRDCT(,@15)                                  0438
         STH   @15,PLHRDCNT(,RPLH)                                 0438
*   /*****************************************************************/
*   /*                                                               */
*   /* DO TILL END OF CHAIN OR ERROR.                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0439
*   RBUFC=BSPHUTOP;                 /* SEARCH ENTIRE CHAIN           */
*                                                                  0439
         L     @15,AMBBUFC(,RAMB)                                  0439
         L     RBUFC,BSPHUTOP(,@15)                                0439
*   /*****************************************************************/
*   /*                                                               */
*   /* SEARCH USE CHAIN FOR DESIRED RBA                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0440
*   DO WHILE(RBUFC^=ZERO&(BUFCAMB^=RAMB×(RPARM1^=BUFCDDDD&RPARM1^= 0440
*         BUFXIRBA)×BUFCVAL=OFF));                                 0440
         B     @DE00440                                            0440
@DL00440 DS    0H                                                  0441
*GRSTRT4:                                                          0441
*     RBUFC=BUFCUCDN;               /* POINT TO NEXT                 */
GRSTRT4  L     RBUFC,BUFCUCDN(,RBUFC)                              0441
*   END;                            /* END DO WHILE                  */
@DE00440 LTR   RBUFC,RBUFC                                         0442
         BZ    @DC00440                                            0442
         C     RAMB,BUFCAMB(,RBUFC)                                0442
         BNE   @DL00440                                            0442
         CL    RPARM1,BUFCDDDD(,RBUFC)                             0442
         BE    @GL00012                                            0442
         CL    RPARM1,BUFXIRBA(,RBUFC)                             0442
         BNE   @DL00440                                            0442
@GL00012 TM    BUFCVAL(RBUFC),B'00000100'                          0442
         BZ    @DL00440                                            0442
@DC00440 DS    0H                                                  0443
*   IF RBUFC^=ZERO THEN             /* RBA MATCH?                    */
         LTR   RBUFC,RBUFC                                         0443
         BZ    @RF00443                                            0443
*     DO;                           /* YES, CONT                     */
*       IF BUFCBSYR=ON THEN         /* BUSY READ?                    */
         TM    BUFCBSYR(RBUFC),B'00100000'                         0445
         BNO   @RF00445                                            0445
*         DO;                       /* YES, DEFER                    */
*           CALL UCHNRLSE;          /* RELEASE USE CHAIN             */
         BAL   @14,UCHNRLSE                                        0447
*GRBDFR1:                                                          0448
*           PLHDRMSK=BSYRWMSK;      /* MASK                          */
GRBDFR1  MVI   PLHDRMSK(RPLH),X'30'                                0448
*           PLHDRRSC=ADDR(BUFCFLG2);/* TARGET                        */
         LA    @15,BUFCFLG2(,RBUFC)                                0449
         ST    @15,PLHDRRSC(,RPLH)                                 0449
*GRBDFR2:                                                          0450
*           CALL BMDEFER;           /* DEFER RTN                     */
GRBDFR2  BAL   @14,BMDEFER                                         0450
*           GOTO GRSTRT1;           /* RESTART                       */
         B     GRSTRT1                                             0451
*         END;                                                     0452
*       CALL INCRUCNT;              /* LOCK UP BUFC                  */
*                                                                  0453
@RF00445 BAL   @14,INCRUCNT                                        0453
*       /*************************************************************/
*       /*                                                           */
*       /* VERIFY THAT RBA MATCH STILL EXISTS ACROSS USE CNT INCR    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0454
*       IF BUFCAMB=RAMB&            /* SAME AMB? &                   */
*           BUFCVAL=ON&             /* VALID BUFC &                  */
*           (RPARM1=BUFCDDDD×       /* CORRECT -                     */
*           RPARM1=BUFXIRBA)        /* - RBA?                        */
*         THEN                                                     0454
         C     RAMB,BUFCAMB(,RBUFC)                                0454
         BNE   @RF00454                                            0454
         TM    BUFCVAL(RBUFC),B'00000100'                          0454
         BNO   @RF00454                                            0454
         CL    RPARM1,BUFCDDDD(,RBUFC)                             0454
         BE    @RT00454                                            0454
         CL    RPARM1,BUFXIRBA(,RBUFC)                             0454
         BNE   @RF00454                                            0454
@RT00454 DS    0H                                                  0455
*         DO;                       /* YES, CONTINUE                 */
*           CALL UCHNRLSE;          /* RELE SEARCH RIGHTS            */
         BAL   @14,UCHNRLSE                                        0456
*           IF BUFCEXC=ON THEN      /* BUFC UNDER EXCL CTRL?         */
         TM    BUFCEXC(RBUFC),B'00000010'                          0457
         BNO   @RF00457                                            0457
*             DO;                   /* YES,                          */
*               CALL DECRUCNT;      /* DECR USE CNT                  */
         BAL   @14,DECRUCNT                                        0459
*               IF AMBTYPE=AMBINDEX THEN/* INDEX?                    */
         TM    AMBTYPE(RAMB),B'01000000'                           0460
         BNO   @RF00460                                            0460
*                 DO;               /* YES, DEFER TILL AVAIL         */
*                   PLHDRMSK=ZROMSK;/* MASK                          */
         MVC   PLHDRMSK(1,RPLH),ZROMSK                             0462
*                   PLHDRRSC=ADDR(BUFCUCNT);/* TARGET                */
         ST    RBUFC,PLHDRRSC(,RPLH)                               0463
*                   GOTO GRBDFR2;   /* DEFER                         */
         B     GRBDFR2                                             0464
*                 END;                                             0465
*               GOTO GREXCLER;      /* IND ERR                       */
         B     GREXCLER                                            0466
*             END;                                                 0467
*                                                                  0467
*           /*********************************************************/
*           /*                                                       */
*           /* IF MATCH WAS ON A SPANNED RECORD SEGMENT, THEN        */
*           /* CONTINUE THE SEARCH AT THE NEXT BUFC. (DO NOT SHARE   */
*           /* BUFFER)                                       @ZA07544*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0468
*           IF BUFCSEG=ON THEN      /* SPANNED RCD?          @ZA07544*/
@RF00457 TM    BUFCSEG(RBUFC),B'01000000'                          0468
         BNO   @RF00468                                            0468
*             DO;                   /* YES                           */
*               CALL DECRUCNT;      /* DECR USE CNT                  */
         BAL   @14,DECRUCNT                                        0470
*               CALL GUCHNSHR;      /* GET SEARCH RIGHTS             */
         BAL   @14,GUCHNSHR                                        0471
*               GOTO GRSTRT4;       /* CONTINUE SEARCH               */
         B     GRSTRT4                                             0472
*             END;                                                 0473
*           IF PLHRDEXC=ON THEN     /* READ EXCL REQUEST?            */
@RF00468 TM    PLHRDEXC(RPLH),B'00001000'                          0474
         BNO   @RF00474                                            0474
*             DO;                   /* YES                           */
*               RFY                                                0476
*                (RWORK1,                                          0476
*                 RWORK2) RSTD;     /* LOCK REGS                     */
*GRBCSLP1:                                                         0477
*               RWORK1=BUFCRSC2;    /* PICK UP CNT                   */
GRBCSLP1 L     RWORK1,BUFCRSC2(,RBUFC)                             0477
*               IF BUFCUCNT=ONE THEN/* SINGLE USER?                  */
         CLI   BUFCUCNT(RBUFC),1                                   0478
         BNE   @RF00478                                            0478
*                 IF BUFCBSYW=ON THEN/* & BUSY WRITE?                */
         TM    BUFCBSYW(RBUFC),B'00010000'                         0479
         BNO   @RF00479                                            0479
*                   DO;             /* DEFER REQUEST                 */
*                     CALL DECRUCNT;/* DECREMENT USE COUNT           */
         BAL   @14,DECRUCNT                                        0481
*                     GOTO GRBDFR1; /* YES, DEFER                    */
         B     GRBDFR1                                             0482
*                   END;            /* END OF BUSY WRITE CODE        */
*                 ELSE              /* NO, SET BUFCEXC               */
*                   DO;                                            0484
@RF00479 DS    0H                                                  0485
*                     RWORK2=RWORK1×EXCLMSK;/* SET BUFCEXC           */
         LR    RWORK2,RWORK1                                       0485
         O     RWORK2,EXCLMSK                                      0485
*                     CS(RWORK1,RWORK2,BUFCRSC2);/* MODIFY           */
         CS    RWORK1,@06,BUFCRSC2(RBUFC)                          0486
*                     GEN(BNZ GRBCSLP1);/* LOOP TILL SUCC.           */
         BNZ GRBCSLP1
*                   END;                                           0488
*               ELSE                /* NO, DFR TILL UCNT = 0         */
*                 DO;                                              0489
         B     @RC00478                                            0489
@RF00478 DS    0H                                                  0490
*                   CALL DECRUCNT;  /* DECR USE CNT                  */
*                                                                  0490
         BAL   @14,DECRUCNT                                        0490
*                   /*************************************************/
*                   /*                                               */
*                   /* INSURE NO OTHER EXCLUSIVE REQUEST IS DEFFERED */
*                   /* FOR THE SAME RESOURCE.                @ZA17500*/
*                   /*                                               */
*                   /*************************************************/
*                                                                  0491
*                   IF AMBPH->PLHDRREQ>ZERO THEN/* REQ. PENDING    0491
*                                                            @ZA17500*/
         L     @15,AMBPH(,RAMB)                                    0491
         L     @07,PLHDRREQ(,@15)                                  0491
         LTR   @07,@07                                             0491
         BNP   @RF00491                                            0491
*                     DO;           /* YES                   @ZA17500*/
*                       RWORK2=AMBPH+LENGTH(IDAPLHDR);/* POINT TO  0493
*                                      FIRST PLH             @ZA17500*/
         AL    @15,@CF00063                                        0493
         LR    RWORK2,@15                                          0493
*                       DO WHILE RWORK2^=ZERO;/* SEARCH PLHS @ZA17500*/
         B     @DE00494                                            0494
@DL00494 DS    0H                                                  0495
*                         IF RWORK2->PLHDRPND=ON&/* REQ PEND @ZA17500*/
*                             RWORK2->PLHRDEXC=ON&/* AND EXC       0495
*                                      CTL@ZA17500                   */
*                             RWORK2->PLHDRRSC=ADDR(BUFCUCNT) THEN/*
*                                      FOR SAME RESOURCE     @ZA17500*/
         TM    PLHDRPND(RWORK2),B'00001010'                        0495
         BNO   @RF00495                                            0495
         C     RBUFC,PLHDRRSC(,RWORK2)                             0495
         BE    @RT00495                                            0495
*                           GOTO GREXCLER;/* GIVE ERROR      @ZA17500*/
*                         RWORK2=RWORK2->PLHCHAIN;/* NEXT PLH      0497
*                                                            @ZA19628*/
@RF00495 L     RWORK2,PLHCHAIN(,RWORK2)                            0497
*                       END;        /* END SEARCH            @ZA17500*/
@DE00494 LTR   RWORK2,RWORK2                                       0498
         BNZ   @DL00494                                            0498
*                     END;          /* END PENDING           @ZA17500*/
*                   PLHDRMSK=ZROMSK;/* MASK                          */
@RF00491 MVC   PLHDRMSK(1,RPLH),ZROMSK                             0500
*                   PLHDRRSC=ADDR(BUFCUCNT);/* TARGET                */
         ST    RBUFC,PLHDRRSC(,RPLH)                               0501
*                   GOTO GRBDFR2;   /* DEFER                         */
         B     GRBDFR2                                             0502
*                 END;                                             0503
*               RFY                                                0504
*                (RWORK1,                                          0504
*                 RWORK2) UNRSTD;   /* UNLOCK                        */
@RC00478 DS    0H                                                  0505
*             END;                                                 0505
*                                                                  0505
*           /*********************************************************/
*           /*                                                       */
*           /* INCR BSPHFND. ( NO. TIMES RBA FOUND)                  */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0506
*GRBCSLP2:                                                         0506
*           RFY                                                    0506
*            (RWORK1,                                              0506
*             RWORK2) RSTD;         /* LOCK REGS                     */
@RF00474 DS    0H                                                  0506
GRBCSLP2 DS    0H                                                  0507
*           RWORK1=BSPHFND;         /* OLD CNT                       */
         L     @15,AMBBUFC(,RAMB)                                  0507
         L     RWORK1,BSPHFND(,@15)                                0507
*           RWORK2=RWORK1+ONE;      /* NEW CNT                       */
         LA    RWORK2,1                                            0508
         ALR   RWORK2,RWORK1                                       0508
*           CS(RWORK1,RWORK2,BSPHFND);/* MODIFY                      */
         CS    RWORK1,@06,BSPHFND(@15)                             0509
*           GEN(BNZ GRBCSLP2);      /* LOOP TILL SUCCESSFUL          */
         BNZ GRBCSLP2
*           RFY                                                    0511
*            (RWORK1,                                              0511
*             RWORK2) UNRSTD;       /* UNLOCK                        */
*                                                                  0511
*           /*********************************************************/
*           /*                                                       */
*           /* PLACE BUFC AT TOP OF CHAIN                            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0512
*           CALL PUTBTOP;                                          0512
*                                                                  0512
         BAL   @14,PUTBTOP                                         0512
*           /*********************************************************/
*           /*                                                       */
*           /* NORMAL EXIT. CI HAS BEEN LOCATED IN CHAIN OR READ IN. */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0513
*GRBXIT1:                                                          0513
*           IF AMBTYPE=AMBDATA THEN /* DATA AMB?                     */
GRBXIT1  TM    AMBTYPE(RAMB),B'01000000'                           0513
         BNZ   @RF00513                                            0513
*             DO;                   /* YES, IT IS DATA               */
*               BUFCIDXL=ZERO;      /* INDICATE NO INDEX             */
         MVI   BUFCIDXL(RBUFC),X'00'                               0515
*               PLHDBUFC=RBUFC;     /* SAVE BUFFER PTR               */
         ST    RBUFC,PLHDBUFC(,RPLH)                               0516
*             END;                  /* END OF DATA AMB CODE          */
*           ELSE                    /* NO, IS INDEX                  */
*             DO;                                                  0518
         B     @RC00513                                            0518
@RF00513 DS    0H                                                  0519
*               BUFCIDXL=IXSILN;    /* REMEMBER INDEX LEVEL          */
         IC    @15,IXSILN+200(,RPLH)                               0519
         STC   @15,BUFCIDXL(,RBUFC)                                0519
*               PLHIBUFC=RBUFC;     /* SAVE BUFC PTR                 */
         ST    RBUFC,PLHIBUFC(,RPLH)                               0520
*             END;                  /* END OF IX AMB CODE            */
*           CALL BMEXIT;            /* RETURN TO CALLER              */
@RC00513 BAL   @14,BMEXIT                                          0522
*         END;                      /* END RBA MATCH                 */
*       ELSE                        /* NO -                          */
*         DO;                                                      0524
         B     @RC00454                                            0524
@RF00454 DS    0H                                                  0525
*           CALL DECRUCNT;          /* DECR USE CNT                  */
         BAL   @14,DECRUCNT                                        0525
*           GOTO GRSTRT4;           /* CONTINUE SEARCH               */
         B     GRSTRT4                                             0526
*         END;                                                     0527
*     END;                          /* END RBUFC NE ZERO             */
*                                                                  0528
*   /*****************************************************************/
*   /*                                                               */
*   /* END OF USE CHAIN. RBA NOT FOUND, MUST BE READ.                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0529
*   ELSE                            /* RBUFC EQ ZERO                 */
*     DO;                                                          0529
         B     @RC00443                                            0529
@RF00443 DS    0H                                                  0530
*       CALL UCHNRLSE;              /* RELE SCH RIGHTS               */
         BAL   @14,UCHNRLSE                                        0530
*       CALL GETSPACE;              /* GET WORK BUFC                 */
         BAL   @14,GETSPACE                                        0531
*       IF RPLRTNCD^=ZERO THEN      /* BUFC OBTAINED?                */
         CLI   RPLRTNCD(RRPL),0                                    0532
         BE    @RF00532                                            0532
*         CALL BMEXIT;              /* NO, EXIT                      */
*                                                                  0533
         BAL   @14,BMEXIT                                          0533
*       /*************************************************************/
*       /*                                                           */
*       /* BUFC OBTAINED, INITIALIZE IT.                             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0534
*       BUFCBSYR=ON;                /* BSY READ                      */
@RF00532 OI    BUFCBSYR(RBUFC),B'00100000'                         0534
*       BUFCDDDD=RPARM1;            /* RBA                           */
         ST    RPARM1,BUFCDDDD(,RBUFC)                             0535
*       BUFXIRBA=RPARM1;            /* RBA                           */
         ST    RPARM1,BUFXIRBA(,RBUFC)                             0536
*       BUFCRRD=ON;                 /* READ REQ'D                    */
         OI    BUFCRRD(RBUFC),B'00100000'                          0537
*       BUFCVAL=ON;                 /* VALID RBA                     */
*                                                                  0538
         OI    BUFCVAL(RBUFC),B'00000100'                          0538
*       /*************************************************************/
*       /*                                                           */
*       /* CHECK TO SEE IF ANY READS DONE SINCE ENTRY                */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0539
*GRBCSLP3:                                                         0539
*       RFY                                                        0539
*        (RWORK1,                                                  0539
*         RWORK2) RSTD;             /* LOCK REGS                     */
GRBCSLP3 DS    0H                                                  0540
*       RWORK1=AMBXCSWD;            /* OLD CNT                       */
         L     @15,AMBEOVPT(,RAMB)                                 0540
         L     RWORK1,AMBXCSWD(,@15)                               0540
*       RWORK2=RWORK1+ONE;          /* NEW                           */
         LA    RWORK2,1                                            0541
         ALR   RWORK2,RWORK1                                       0541
*       CS(RWORK1,RWORK2,AMBXCSWD); /* MODIFY                        */
         CS    RWORK1,@06,AMBXCSWD(@15)                            0542
*       GEN(BNZ GRBCSLP3);          /* LOOP TILL SUCCESSFUL          */
*                                                                  0543
         BNZ GRBCSLP3
*       /*************************************************************/
*       /*                                                           */
*       /* IF ANY READS DONE, SEARCH CHAIN AGAIN IN BUFCHAIN         */
*       /* SEQUENCE.                                                 */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0544
*       IF RWORK1=PLHRDCNT THEN     /* CNT CHANGE?                   */
         CH    RWORK1,PLHRDCNT(,RPLH)                              0544
         BNE   @RF00544                                            0544
*         DO;                       /* NO, CONTINUE                  */
*GRBRDBFR:                          /* READ BUFFER                   */
*           CALL READBFR;           /* READ CI                       */
GRBRDBFR BAL   @14,READBFR                                         0546
*           IF RPLRTNCD=ZERO THEN   /* ERROR?                        */
         CLI   RPLRTNCD(RRPL),0                                    0547
         BNE   @RF00547                                            0547
*             DO;                   /* NO, SET TO EXIT               */
*               IF PLHRDEXC=ON THEN /* READ EXCL?                    */
         TM    PLHRDEXC(RPLH),B'00001000'                          0549
         BNO   @RF00549                                            0549
*                 BUFCEXC=ON;       /* YES, SET BUFC                 */
         OI    BUFCEXC(RBUFC),B'00000010'                          0550
*               BUFCBSYR=OFF;       /* RESET BSY RD                  */
@RF00549 NI    BUFCBSYR(RBUFC),B'11011111'                         0551
*               GOTO GRBXIT1;       /* EXIT                          */
         B     GRBXIT1                                             0552
*             END;                                                 0553
*           ELSE                    /* READ ERROR, RLSE BUFC,        */
*             DO;                                                  0554
@RF00547 DS    0H                                                  0555
*               BUFCVAL=OFF;        /* IND -                         */
         NI    BUFCVAL(RBUFC),B'11111011'                          0555
*               BUFCRRD=OFF;        /* ERROR -                       */
         NI    BUFCRRD(RBUFC),B'11011111'                          0556
*               BUFCEXC=OFF;        /* DECR -                        */
         NI    BUFCEXC(RBUFC),B'11111101'                          0557
*               BUFCBSYR=OFF;       /* USE -                         */
         NI    BUFCBSYR(RBUFC),B'11011111'                         0558
*               CALL DECRUCNT;      /* CNT AND                       */
         BAL   @14,DECRUCNT                                        0559
*               CALL BMEXIT;        /* EXIT.                         */
         BAL   @14,BMEXIT                                          0560
*             END;                                                 0561
*         END;                                                     0562
*                                                                  0562
*       /*************************************************************/
*       /*                                                           */
*       /* AMBRDCNT HAS CHANGED, GET 2ND SCH SERIAL RESOURCE AND SCH */
*       /* CHAIN AGAIN IN BUFCHAIN SEQUENCE.                         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0563
*GRBSCH2:                                                          0563
*       RWORK1=ZERO;                /* CLEAR                         */
@RF00544 DS    0H                                                  0563
GRBSCH2  SLR   RWORK1,RWORK1                                       0563
*       CS(RWORK1,RPLH,AMBXBM2S);   /* GET RSC IF IT IS ZERO         */
         L     @15,AMBEOVPT(,RAMB)                                 0564
         CS    RWORK1,@02,AMBXBM2S(@15)                            0564
*       BC(7,GRBDFR3);              /* DEFER IF NOT ZERO     @Z40GSDT*/
         BC    7,GRBDFR3                                           0565
*       RFY                                                        0566
*         RWORK2 UNRSTD;            /* UNLOCK                        */
*                                                                  0566
*       /*************************************************************/
*       /*                                                           */
*       /* 2ND SCH RESOURCE HAS BEEN OBTAINED, SCH CHAIN.            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0567
*       RWORK1=RBUFC;               /* SAVE BUFC FRM GETSPACE        */
         LR    RWORK1,RBUFC                                        0567
*       RBUFC=BSPHBUFC;             /* TOP OF BUFCHAIN               */
*                                                                  0568
         L     @15,AMBBUFC(,RAMB)                                  0568
         L     RBUFC,BSPHBUFC(,@15)                                0568
*       /*************************************************************/
*       /*                                                           */
*       /* SCH CHAIN FOR RBA MATCH ON ANOTHER BUFC                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0569
*       DO UNTIL(RBUFC=ZERO);                                      0569
@DL00569 DS    0H                                                  0570
*         IF BUFCAMB=RAMB&          /* SAME AMB &                    */
*             RBUFC^=RWORK1&        /* DIFF BUFC &                   */
*             (RPARM1=BUFCDDDD×     /* RBA MATCH &           @ZA07544*/
*             RPARM1=BUFXIRBA)&     /* RBA MATCH &           @ZA07544*/
*             BUFCVAL=ON THEN       /* VALID BUFFER?                 */
         C     RAMB,BUFCAMB(,RBUFC)                                0570
         BNE   @RF00570                                            0570
         CR    RBUFC,RWORK1                                        0570
         BE    @RF00570                                            0570
         CL    RPARM1,BUFCDDDD(,RBUFC)                             0570
         BE    @GL00019                                            0570
         CL    RPARM1,BUFXIRBA(,RBUFC)                             0570
         BNE   @RF00570                                            0570
@GL00019 TM    BUFCVAL(RBUFC),B'00000100'                          0570
         BNO   @RF00570                                            0570
*           DO;                     /* YES                           */
*                                                                  0571
*             /*******************************************************/
*             /*                                                     */
*             /* A DUPE HAS BEEN FOUND, FREE BUFC GOTTEN BY GETSPACE */
*             /* AND START OVER.                                     */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0572
*             RBUFC=RWORK1;         /* RESTORE BUFC PTR              */
         LR    RBUFC,RWORK1                                        0572
*             AMBXBM2S=ZERO;        /* RELE RESOURCE                 */
         L     @15,AMBEOVPT(,RAMB)                                 0573
         SLR   @00,@00                                             0573
         ST    @00,AMBXBM2S(,@15)                                  0573
*             BUFCRRD=OFF;          /* FREE BUFC AND SET -           */
         NI    BUFCRRD(RBUFC),B'11011111'                          0574
*             BUFCVAL=OFF;          /* TO -                          */
         NI    BUFCVAL(RBUFC),B'11111011'                          0575
*             BUFCBSYR=OFF;         /* START -                       */
         NI    BUFCBSYR(RBUFC),B'11011111'                         0576
*             CALL DECRUCNT;        /* OVER.                         */
         BAL   @14,DECRUCNT                                        0577
*             GOTO GRSTRT1;         /* START OVER PT                 */
         B     GRSTRT1                                             0578
*           END;                                                   0579
*                                                                  0579
*         /***********************************************************/
*         /*                                                         */
*         /* NO MATCH, PT TO NEXT BUFC AND LOOP BACK.                */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0580
*         RBUFC=BUFCHAIN;                                          0580
@RF00570 L     RBUFC,BUFCHAIN(,RBUFC)                              0580
*       END;                        /* END BUFCHAIN SEARCH           */
*                                                                  0581
@DE00569 SLR   @15,@15                                             0581
         CR    RBUFC,@15                                           0581
         BNE   @DL00569                                            0581
*       /*************************************************************/
*       /*                                                           */
*       /* END OF BUFCHAIN. NO DUPE FOUND, GO READ CI.               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0582
*       RBUFC=RWORK1;               /* RESTORE BUFC PTR              */
         LR    RBUFC,RWORK1                                        0582
*       AMBXBM2S=ZERO;              /* RELE RESOURCE                 */
         L     @09,AMBEOVPT(,RAMB)                                 0583
         ST    @15,AMBXBM2S(,@09)                                  0583
*       GOTO GRBRDBFR;              /* GO READ CI                    */
         B     GRBRDBFR                                            0584
*       RFY                                                        0585
*         RWORK1 UNRSTD;            /* UNLOCK                        */
*                                                                  0585
*       /*************************************************************/
*       /*                                                           */
*       /* 2ND SCH RESOURCE NOT OBTAINED, DEFER UNTILL IT CAN BE.    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0586
*GRBDFR3:                                                          0586
*       PLHDRMSK=ZROMSK;            /* MASK                          */
GRBDFR3  MVC   PLHDRMSK(1,RPLH),ZROMSK                             0586
*       PLHDRRSC=ADDR(AMBXBM2S);    /* PROT AGAINST ALL ZRO'S        */
         L     @15,AMBEOVPT(,RAMB)                                 0587
         LA    @15,AMBXBM2S(,@15)                                  0587
         ST    @15,PLHDRRSC(,RPLH)                                 0587
*       RFY                                                        0588
*         I RSTD;                   /* LOCK REG                      */
*       DO I=ONE TO FOUR;           /* DET WHICH BYTE IS NON-        */
         LA    I,1                                                 0589
@DL00589 DS    0H                                                  0590
*         IF GRBRSC1(I)^=ZERO THEN  /* ZERO.                         */
         L     @15,AMBEOVPT(,RAMB)                                 0590
         SLR   @00,@00                                             0590
         IC    @00,GRBRSC1-1(I,@15)                                0590
         C     @00,@CF00158                                        0590
         BE    @RF00590                                            0590
*           PLHDRRSC=ADDR(GRBRSC1(I));/* TARGET                      */
         LA    @15,GRBRSC1-1(I,@15)                                0591
         ST    @15,PLHDRRSC(,RPLH)                                 0591
*       END;                                                       0592
@RF00590 AL    I,@CF00047                                          0592
         C     I,@CF00156                                          0592
         BNH   @DL00589                                            0592
*       RFY                                                        0593
*         I UNRSTD;                 /* UNLOCK                        */
*       CALL BMDEFER;               /* DEFER RTN                     */
         BAL   @14,BMDEFER                                         0594
*       GOTO GRBSCH2;               /* LOOP TILL OBTAINED            */
         B     GRBSCH2                                             0595
*     END;                          /* END RBUFC EQ ZERO             */
*   END GRB;                                                       0597
@EL00003 DS    0H                                                  0597
@EF00003 DS    0H                                                  0597
@ER00003 BR    @14                                                 0597
@PB00003 DS    0H                                                  0598
*                                                                  0598
*   /*****************************************************************/
*   /*                                                               */
*   /* GNFL - GET A WORK BUFFER FOR OUTPUT                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0598
*/*                                                                0598
*01 FUNCTION = PROVIDE A POINTER TO A WORK BUFC ASSOCIATED WITH THE AMB
*01 INPUT =    STANDARD VSAM REGISTERS.                            0598
*01 OUTPUT =   RBUFC POINTS TO THE BUFC.                           0598
*              RPLRTNCD & RPLERRCD SET IF NO BUFFERS AVAILABLE.      */
*                                                                  0598
*GNFL:                              /* GET WK BUFFER                 */
*   GEN(IDASVR14);                  /* SAVE RETURN REG               */
GNFL     IDASVR14
*   IF AMBTYPE=AMBINDEX THEN        /* INDEX AMB?                    */
         TM    AMBTYPE(RAMB),B'01000000'                           0599
         BNO   @RF00599                                            0599
*     DO;                                                          0600
*                                                                  0600
*       /*************************************************************/
*       /*                                                           */
*       /* RELEASE ANY PREVIOUSLY ASSIGNED INDEX BUFFER IF NECESSARY */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0601
*       RBUFC=PLHIBUFC;             /* PTR TO IX BFR                 */
         L     RBUFC,PLHIBUFC(,RPLH)                               0601
*       IF RBUFC^=ZERO THEN         /* BUFFER PRESENT?               */
         LTR   RBUFC,RBUFC                                         0602
         BZ    @RF00602                                            0602
*         CALL FREEB;               /* YES, FREE IT.         @ZA07544*/
         BAL   @14,FREEB                                           0603
*       CALL GETSPACE;              /* GET A BUFFER                  */
@RF00602 BAL   @14,GETSPACE                                        0604
*       IF RPLERREG=ZERO THEN       /* GETSPACE ERR ?                */
         CLI   RPLERREG(RRPL),0                                    0605
         BNE   @RF00605                                            0605
*         DO;                       /* NO,                           */
*           PLHIBUFC=RBUFC;         /* SET BUFC PTR                  */
         ST    RBUFC,PLHIBUFC(,RPLH)                               0607
*         END;                      /* END OF NO ERROR               */
*     END;                          /* END OF INDEX AMB CODE         */
*   ELSE                            /* NO, IS DATA                   */
*     DO;                                                          0610
         B     @RC00599                                            0610
@RF00599 DS    0H                                                  0611
*       CALL GETSPACE;              /* GET A BUFFER                  */
         BAL   @14,GETSPACE                                        0611
*       IF RPLERREG=ZERO THEN       /* GETSPACE ERR ?                */
         CLI   RPLERREG(RRPL),0                                    0612
         BNE   @RF00612                                            0612
*         DO;                       /* NO,                           */
*           DIWBUFC=RBUFC;          /* PT TO BUFC                    */
         L     @15,AMBIWA(,RAMB)                                   0614
         ST    RBUFC,DIWBUFC(,@15)                                 0614
*           BUFCINS=ON;             /* MARK AS INSERT                */
         OI    BUFCINS(RBUFC),B'00100000'                          0615
*         END;                      /* END NO ERROR                  */
*     END;                          /* END NOT INDEX                 */
@RF00612 DS    0H                                                  0618
*   CALL BMEXIT;                    /* END OF GNFL                   */
@RC00599 BAL   @14,BMEXIT                                          0618
*                                                                  0619
*   /*****************************************************************/
*   /*                                                               */
*   /* GNNFL - GET A WORK BUFFER                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0619
*/*                                                                0619
*01 FUNCTION = PROVIDE A POINTER TO A WORK BUFC ASSOCIATED WITH THE AMB
*01 INPUT =    STANDARD VSAM REGISTERS.                            0619
*01 OUTPUT =   RBUFC POINTS TO THE BUFC.                           0619
*              RPLRTNCD & RPLERRCD SET IF NO BUFFERS AVAILABLE.      */
*                                                                  0619
*GNNFL:                             /* GET NEXT PLH BUFFER           */
*   GEN(IDASVR14);                  /* SAVE RETURN REG               */
GNNFL    IDASVR14
*   RBUFC=PLHDBUFC;                 /* BUFFER LEFT OVER?             */
         L     RBUFC,PLHDBUFC(,RPLH)                               0620
*   IF RBUFC^=ZERO THEN             /* IF SO, REUSE IT.              */
         LTR   RBUFC,RBUFC                                         0621
         BZ    @RF00621                                            0621
*     DO;                           /* NEED WRITTEN                  */
*       IF BUFCMW=ON THEN           /* WRITE NEEDED                  */
         TM    BUFCMW(RBUFC),B'10000000'                           0623
         BNO   @RF00623                                            0623
*         DO;                       /* YES WRITE IT                  */
*           BUFCBSYW=ON;            /* IND BSY WRITE                 */
         OI    BUFCBSYW(RBUFC),B'00010000'                         0625
*           CALL WRBFR;             /* WRITE IT                      */
         BAL   @14,WRBFR                                           0626
*           BUFCBSYW=OFF;           /* RESET BSY WRITE               */
         NI    BUFCBSYW(RBUFC),B'11101111'                         0627
*           RFY                                                    0628
*            (RWORK1,                                              0628
*             RWORK2) RSTD;         /* LOCK UP REGS                  */
*GNNLP2:                                                           0629
*           RWORK1=BSPHUIW;         /* OLD CNT                       */
GNNLP2   L     @15,AMBBUFC(,RAMB)                                  0629
         L     RWORK1,BSPHUIW(,@15)                                0629
*           RWORK2=RWORK1+ONE;      /* INCR                          */
         LA    RWORK2,1                                            0630
         ALR   RWORK2,RWORK1                                       0630
*           CS(RWORK1,RWORK2,BSPHUIW);/* MODIFY                      */
         CS    RWORK1,@06,BSPHUIW(@15)                             0631
*           GEN(BNZ   GNNLP2);      /* LOOP TILL SUCCESSFUL          */
         BNZ   GNNLP2
*           RFY                                                    0633
*            (RWORK1,                                              0633
*             RWORK2) UNRSTD;       /* FREE REGS                     */
*         END;                                                     0634
*       CALL BMEXIT;                /* MUST BE SPANNED RCD           */
@RF00623 BAL   @14,BMEXIT                                          0635
*     END;                                                         0636
*   CALL GETSPACE;                  /* GET A BUFFER                  */
@RF00621 BAL   @14,GETSPACE                                        0637
*   IF RPLERREG=ZERO THEN           /* GETSPACE ERR ?                */
         CLI   RPLERREG(RRPL),0                                    0638
         BNE   @RF00638                                            0638
*     DO;                           /* NO,                           */
*       PLHDBUFC=RBUFC;             /* PT TP BUFC                    */
         ST    RBUFC,PLHDBUFC(,RPLH)                               0640
*       BUFCINS=OFF;                /* RESET BUFCINS                 */
         NI    BUFCINS(RBUFC),B'11011111'                          0641
*     END;                                                         0642
*   CALL BMEXIT;                    /* END OF GNNFL                  */
@RF00638 BAL   @14,BMEXIT                                          0643
*                                                                  0644
*   /*****************************************************************/
*   /*                                                               */
*   /* GNXT - GET NEXT                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0644
*/*                                                                0644
*01 FUNCTION = GET THE NEXT CONTROL INTERVAL IN LOGICAL OR PHYSICAL
*              SEQUENCE.  FIRST, CHECK FOR END-OF-DATA AND THEN CHECK
*              FOR THE PROPER EXCLUSIVE CONTROL.                   0644
*01 INPUT =    STANDARD VSAM REGISTERS. (PLHDBUFC HAS BEEN ADVANCED TO
*              THE PROPER BUFC BY THE FREE BUFFER ROUTINE.)        0644
*01 OUTPUT =   RBUFC IS SET AND A RETURN CODE IS IN THE RPL.       0644
*              RPARM1 = THE RBA OF THE DESIRED CI IF AN EXCLUSIVE  0644
*              CONTROL ERROR OCCURS.                         @ZA07544*/
*                                                                  0644
*GNXT:                              /* GET NEXT                      */
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
GNXT     IDASVR14
*I07:                                                              0645
*   DO;                             /* IDACALL(IDAFRBA)              */
I07      DS    0H                                                  0646
*     CALL IDAFRBA;                 /* EXIT TO IDAFRBA               */
         L     @15,@CV00151                                        0646
         BALR  @14,@15                                             0646
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(USING *+4095,@10);        /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*     GEN(LA    @10,4095(@11));     /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*     GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE          */
         L     @10,=A(@PSTART+4095)
*     GEN(USING @PSTART+4095,@10);  /* ESTABLISH SECOND BASE         */
         USING @PSTART+4095,@10
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I07;                        /* FIND RBA                      */
*   RFY                                                            0656
*     R15 RSTD;                     /* LOCK                          */
*   RBUFC=PLHDBUFC;                 /* RESET BUFC PTR                */
         L     RBUFC,PLHDBUFC(,RPLH)                               0657
*   IF RPLRTNCD^=ZERO THEN          /* ERROR?                        */
         CLI   RPLRTNCD(RRPL),0                                    0658
         BE    @RF00658                                            0658
*     CALL BMEXIT;                  /* YES EXIT                      */
         BAL   @14,BMEXIT                                          0659
*   IF R15=RPLEODER THEN            /* EOF?                          */
@RF00658 C     R15,@CF00156                                        0660
         BNE   @RF00660                                            0660
*     DO;                           /* YES                           */
*       RPLRTNCD='08'X;             /* SET ERR -                     */
         MVI   RPLRTNCD(RRPL),X'08'                                0662
*       RPLERRCD=RPLEODER;          /* CODES                         */
         MVI   RPLERRCD(RRPL),X'04'                                0663
*       CALL BMEXIT;                /* EXIT                          */
         BAL   @14,BMEXIT                                          0664
*     END;                                                         0665
*   RFY                                                            0666
*     R15 UNRSTD;                   /* UNLOCK                        */
@RF00660 DS    0H                                                  0667
*   IF RBUFC=ZERO THEN              /* BUFC OWNED?                   */
         LTR   RBUFC,RBUFC                                         0667
         BNZ   @RF00667                                            0667
*     DO;                           /* NO,                           */
*GRBCALL:                                                          0669
*       CALL GRB;                   /* GET RBA RTN                   */
GRBCALL  BAL   @14,GRB                                             0669
*       CALL BMEXIT;                /* EXIT                          */
         BAL   @14,BMEXIT                                          0670
*     END;                                                         0671
*                                                                  0671
*/* FIRST OR MIDDLE SEGMENT OF A SPANNED RECORD MUST BE IN THE       */
*/* BUFFER.                                                  @ZA07544*/
*                                                                  0672
*   BUFCDDDD=RPARM1;                /* SET DDDD                      */
@RF00667 ST    RPARM1,BUFCDDDD(,RBUFC)                             0672
*   BUFCRRD=ON;                     /* IND READ REQD                 */
         OI    BUFCRRD(RBUFC),B'00100000'                          0673
*   IF BUFCMW=ON&AMBJRN=ON THEN     /* JRNAD XIT NEEDED?             */
         TM    BUFCMW(RBUFC),B'10000000'                           0674
         BNO   @RF00674                                            0674
         TM    AMBJRN(RAMB),B'00000010'                            0674
         BNO   @RF00674                                            0674
*     DO;                           /* YES                           */
*       PLHJCODE=PLHJIXM;           /* IND IX MOD                    */
         MVI   PLHJCODE(RPLH),B'00101100'                          0676
*       PLHJRNLL=AMDCINV;           /* CI SIZE                       */
         L     @15,AMBDSB(,RAMB)                                   0677
         L     @15,AMDCINV(,@15)                                   0677
         ST    @15,PLHJRNLL(,RPLH)                                 0677
*       PLHJNRBA=BUFCORBA;          /* RBA                           */
         L     @15,BUFCORBA(,RBUFC)                                0678
         ST    @15,PLHJNRBA(,RPLH)                                 0678
*       PLHCRBA=BUFCBAD;            /* BUFFER ADDR                   */
         L     @15,BUFCBAD(,RBUFC)                                 0679
         ST    @15,PLHCRBA(,RPLH)                                  0679
*I08:                                                              0680
*       DO;                         /* IDACALL(IDATJXIT)             */
I08      DS    0H                                                  0681
*         CALL IDATJXIT;            /* EXIT TO IDATJXIT              */
         L     @15,@CV00153                                        0681
         BALR  @14,@15                                             0681
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(USING *+4095,@10);    /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*         GEN(LA    @10,4095(@11)); /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*         GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE      */
         L     @10,=A(@PSTART+4095)
*         GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE       */
         USING @PSTART+4095,@10
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I08;                    /* JRNAD EXIT                    */
*     END;                                                         0691
*   CALL READBFR;                   /* READ NEXT SEG                 */
@RF00674 BAL   @14,READBFR                                         0692
*   IF RPLRTNCD=ZERO THEN           /* ANY ERROR                     */
         CLI   RPLRTNCD(RRPL),0                                    0693
         BNE   @RF00693                                            0693
*     CALL BMEXIT;                  /* NO, EXIT                      */
         BAL   @14,BMEXIT                                          0694
*   BUFCVAL=OFF;                    /* MRK BUFC INVALID              */
@RF00693 NI    BUFCVAL(RBUFC),B'11111011'                          0695
*   CALL DECRUCNT;                  /* DECR & MRK EMPTY              */
         BAL   @14,DECRUCNT                                        0696
*   PLHDBUFC=ZERO;                  /* FREE BUFC                     */
         SLR   @15,@15                                             0697
         ST    @15,PLHDBUFC(,RPLH)                                 0697
*   CALL BMEXIT;                    /* END OF GET NEXT               */
         BAL   @14,BMEXIT                                          0698
*                                                                  0699
*   /*****************************************************************/
*   /*                                                               */
*   /* WRTBF - WRITE BUFFER MACRO ROUTINE                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0699
*/*                                                                0699
*01 FUNCTION = SERVICE THE WRITE BUFFER MACRO.                     0699
*01 INPUT =    RRPL - RPL                                          0699
*              RPLH - PLH                                          0699
*              RAMB - FOR TYPE DS, THE AMB TO PROCESS. FOR ALL OTHER
*                     TYPES, AN AMB USING THE BUFFER POOL.         0699
*              RPARM1 = 0 - TYPE DS                                0699
*                     = 4 - TYPE LRU                               0699
*                     = 8 - TYPE ALL                               0699
*                     = 12 - TYPE TRN                              0699
*                     = 16 - TYPE CHK                              0699
*              R0 - FOR TYPE LRU, N(BINARY) PERCENT OF BUFFERS     0699
*                   TO PROCESS.                                    0699
*01 OUTPUT =   REQUESTED BUFFERS ARE WRITTEN.                        */
*                                                                  0699
*WRTBF:                             /* WRITE BUFFER                  */
*   RFY                                                            0699
*     RWORK0 RSTD;                  /* LOCK PARM REG                 */
WRTBF    DS    0H                                                  0700
*   GEN(IDASVR14);                  /* SAVE RETURN REG               */
         IDASVR14
*   RFY                                                            0701
*    (RWORK1,                                                      0701
*     RWORK2) RSTD;                 /* LOCK                          */
*   RWORK2=RPLSTRID;                /* TRANSID                       */
         LH    RWORK2,RPLSTRID(,RRPL)                              0702
*   RWORK1=SHIFTBIT;                /* HIGH BIT FOR SHIFT            */
         L     RWORK1,SHIFTBIT                                     0703
*   GEN(SRL   RWORK1,0(RWORK2));    /* FORM MASK                     */
         SRL   RWORK1,0(RWORK2)
*   DBMTRNID=RWORK1;                /* SAVE TRANSID MASK             */
         ST    RWORK1,DBMTRNID(,RPLH)                              0705
*   DBMLRUCT=RWORK0;                /* SAVE R0 FOR LRU               */
         STC   RWORK0,DBMLRUCT(,RPLH)                              0706
*   RFY                                                            0707
*    (RWORK0,                                                      0707
*     RWORK1,                                                      0707
*     RWORK2) UNRSTD;               /* UNLOCK                        */
*   IF RPARM1=DSTYP THEN            /* TYPE DS?                      */
         LTR   RPARM1,RPARM1                                       0708
         BNZ   @RF00708                                            0708
*     DO;                           /* YES                           */
*       RBUFC=BSPHBUFC;             /* USE AMB                       */
         L     @15,AMBBUFC(,RAMB)                                  0710
         L     RBUFC,BSPHBUFC(,@15)                                0710
*       DBMBSPH=AMBBUFC;            /* TO LOCATE BSPH                */
         STCM  @15,7,DBMBSPH(RPLH)                                 0711
*     END;                                                         0712
*   ELSE                            /* NO,                           */
*     DO;                                                          0713
         B     @RC00708                                            0713
@RF00708 DS    0H                                                  0714
*       RBUFC=BSPH1ST->BSPHBUFC;    /* USE BSPH1ST CHAIN             */
         L     @15,AMBBUFC(,RAMB)                                  0714
         L     @15,BSPH1ST(,@15)                                   0714
         L     RBUFC,BSPHBUFC(,@15)                                0714
*       DBMBSPH=BSPH1ST;            /* TO LOCATE BSPH                */
         STCM  @15,7,DBMBSPH(RPLH)                                 0715
*       IF RPARM1=CHKTYP×           /* TYPE CHK? OR                  */
*           RPARM1=TRNTYP THEN      /* TYPE TRN?                     */
         C     RPARM1,@CF00063                                     0716
         BE    @RT00716                                            0716
         C     RPARM1,@CF00065                                     0716
         BNE   @RF00716                                            0716
@RT00716 DS    0H                                                  0717
*         DO;                       /* YES                           */
*           DBMMASK=DBMTRNID;       /* MASK = TRANSID                */
         L     @15,DBMTRNID(,RPLH)                                 0718
         ST    @15,DBMMASK(,RPLH)                                  0718
*           GOTO WRTRST1;           /* START LOOP                    */
         B     WRTRST1                                             0719
*         END;                                                     0720
*       IF RPARM1=LRUTYP THEN       /* TYPE LRU?                     */
@RF00716 C     RPARM1,@CF00156                                     0721
         BE    @RT00721                                            0721
*         GOTO WRTLRU;              /* YES                           */
*       IF RPARM1^=ALLTYP THEN      /* IF NOT ALLTYP, -              */
         C     RPARM1,@CF00036                                     0723
         BE    @RF00723                                            0723
*         DO;                       /* INVALID REQUEST               */
*           RPLRTNCD='08'X;         /* LOGIC ERR                     */
         MVI   RPLRTNCD(RRPL),X'08'                                0725
*           RPLERRCD=RPLINVP;       /* INVALID PARM                  */
         MVI   RPLERRCD(RRPL),X'68'                                0726
*           CALL BMEXIT;            /* EXIT                          */
         BAL   @14,BMEXIT                                          0727
*         END;                                                     0728
*     END;                                                         0729
@RF00723 DS    0H                                                  0730
*   DBMMASK=ALLBITS;                /* ANY BIT MASK                  */
@RC00708 L     @15,ALLBITS                                         0730
         ST    @15,DBMMASK(,RPLH)                                  0730
*WRTRST1:                           /* RESTART PT 1                  */
*   RFY                                                            0731
*     IDABSPH BASED(DBMBSPH);       /* USE SAVED BSPH ADDR           */
WRTRST1  DS    0H                                                  0732
*   DO WHILE(BSPHMDBT^=ZERO);       /* BUFFER POOL LOOP              */
         B     @DE00732                                            0732
@DL00732 DS    0H                                                  0733
*/*  FOR WRTBFR TYPES ALL, CHK, AND TRN THE MODIFICATION BITS IN THE
*    BSPH ARE SET OFF PRIOR TO THE SUBPOOL SEARCH AND ARE SET BACK ON
*    IF AN ERROR OCCURES.                                            */
*                                                                  0733
*     IF RPARM1=CHKTYP×             /* IF TYPE=CHK OR        @ZA07544*/
*         RPARM1=TRNTYP THEN        /* TYPE=TRN THEN         @ZA07544*/
         C     RPARM1,@CF00063                                     0733
         BE    @RT00733                                            0733
         C     RPARM1,@CF00065                                     0733
         BNE   @RF00733                                            0733
@RT00733 DS    0H                                                  0734
*       BSPHMDBT=BSPHMDBT&(DBMTRNID&&ALLBITS);/* SET TRN ID OFF    0734
*                                                            @ZA07544*/
         L     @15,DBMBSPH-1(,RPLH)                                0734
         LA    @15,0(,@15)                                         0734
         L     @05,DBMTRNID(,RPLH)                                 0734
         X     @05,ALLBITS                                         0734
         N     @05,BSPHMDBT(,@15)                                  0734
         ST    @05,BSPHMDBT(,@15)                                  0734
*     ELSE                          /* NOT CHK OR TRN        @ZA07544*/
*       IF RPARM1=ALLTYP THEN       /* TYPE=ALL ?            @ZA07544*/
         B     @RC00733                                            0735
@RF00733 C     RPARM1,@CF00036                                     0735
         BNE   @RF00735                                            0735
*         DO;                       /* YES -                 @ZA07544*/
*                                                                  0736
*           /*********************************************************/
*           /*                                                       */
*           /* PLHNRBA USED TO SAVE THE MODIFICATION BIT SETTING IN  */
*           /* CASE OF ERROR WHILE WRITING BUFFERS. THE PLH IS       */
*           /* INVALIDATED AFTER WRTBFR REQUEST COMPLETED SO THIS PLH*/
*           /* FIELD IS NOT VALID.                                   */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0737
*           PLHNRBA=BSPHMDBT;       /* SAVE MOD BITS         @ZA07544*/
         L     @15,DBMBSPH-1(,RPLH)                                0737
         LA    @15,0(,@15)                                         0737
         L     @05,BSPHMDBT(,@15)                                  0737
         ST    @05,PLHNRBA(,RPLH)                                  0737
*           BSPHMDBT=ZERO;          /* SET ALL BITS OFF      @ZA07544*/
         SLR   @05,@05                                             0738
         ST    @05,BSPHMDBT(,@15)                                  0738
*         END;                      /* END TYPE=ALL          @ZA07544*/
*     RFY                                                          0740
*      (RWORK2,                                                    0740
*       RWORK3) RSTD;               /* LOCK                          */
@RF00735 DS    0H                                                  0740
@RC00733 DS    0H                                                  0741
*     DO UNTIL(RBUFC=ZERO);         /* BUFFER LOOP                   */
@DL00741 DS    0H                                                  0742
*       LM(RWORK2,RWORK3,BUFCRSC1); /* SET CDS REGS                  */
         LM    RWORK2,RWORK3,BUFCRSC1(RBUFC)                       0742
*       IF(DBMMASK&BUFCMDBT)^=ZERO THEN/* MOD BITS ON?               */
         SLR   @15,@15                                             0743
         L     @05,DBMMASK(,RPLH)                                  0743
         N     @05,BUFCMDBT(,RBUFC)                                0743
         CLR   @05,@15                                             0743
         BE    @RF00743                                            0743
*         DO;                       /* YES, CONT                     */
*           IF RPARM1^=ALLTYP       /* TYPE = ALL?                   */
*             THEN                  /* NO                            */
         C     RPARM1,@CF00036                                     0745
         BE    @RF00745                                            0745
*             IF RPARM1=DSTYP THEN  /* TYPE DS?                      */
         CR    RPARM1,@15                                          0746
         BNE   @RF00746                                            0746
*               IF RAMB^=RWORK3 THEN/* YES, SAME AMB?                */
         CR    RAMB,RWORK3                                         0747
         BNE   @RT00747                                            0747
*                 GOTO INCRBUFC;    /* NO, LOOP                      */
*               ELSE                                               0749
*                 ;                 /* SAME AMB                      */
*             ELSE                  /* NOT TYPE = DS OR ALL          */
*               IF BUFCUCNT^=ZERO THEN/* ANY USERS?                  */
         B     @RC00746                                            0750
@RF00746 CLI   BUFCUCNT(RBUFC),0                                   0750
         BE    @RF00750                                            0750
*                 DO;               /* YES, DEFER                    */
*                   PLHDRMSK=ZROMSK;/* MASK                          */
         MVC   PLHDRMSK(1,RPLH),ZROMSK                             0752
*                   PLHDRRSC=ADDR(BUFCUCNT);/* TARGET                */
         ST    RBUFC,PLHDRRSC(,RPLH)                               0753
*WRTDFR:                                                           0754
*                   CALL BMDEFER;   /* DEFER RTN                     */
WRTDFR   BAL   @14,BMDEFER                                         0754
*CHKTRNID:                                                         0755
*                   IF RPARM1=ALLTYP×/* TYPE=ALL OR          @ZA07544*/
*                       RPARM1=CHKTYP×/* TYPE=CHK OR         @ZA07544*/
*                       RPARM1=TRNTYP THEN/* TYPE=TRN ?      @ZA07544*/
CHKTRNID C     RPARM1,@CF00036                                     0755
         BE    @RT00755                                            0755
         C     RPARM1,@CF00063                                     0755
         BE    @RT00755                                            0755
         C     RPARM1,@CF00065                                     0755
         BNE   @RF00755                                            0755
@RT00755 DS    0H                                                  0756
*                     CALL RSETMDBT;/* YES- SET MOD BITS BACK ON   0756
*                                                            @ZA07544*/
         BAL   @14,RSETMDBT                                        0756
*                   GOTO WRTRST1;   /* RESTART                       */
         B     WRTRST1                                             0757
*                 END;                                             0758
*               ELSE                                               0759
*                 ;                 /* USE CNT = 0                   */
@RF00750 DS    0H                                                  0760
*           ELSE                                                   0760
*             ;                     /* TYPE = ALL                    */
@RF00745 DS    0H                                                  0761
*           IF BUFCBSYW=ON&         /* BUSY WRITE?                   */
*               ACBIOSFG=OFF THEN   /* AND NOT CLOSE?                */
@RC00745 TM    BUFCBSYW(RBUFC),B'00010000'                         0761
         BNO   @RF00761                                            0761
         L     @15,RPLDACB(,RRPL)                                  0761
         TM    ACBIOSFG(@15),B'00000001'                           0761
         BNZ   @RF00761                                            0761
*             DO;                   /* YES, DEFER                    */
*               PLHDRMSK=BSYRWMSK;  /* MASK                          */
         MVI   PLHDRMSK(RPLH),X'30'                                0763
*               PLHDRRSC=ADDR(BUFCFLG2);/* TARGET                    */
         LA    @15,BUFCFLG2(,RBUFC)                                0764
         ST    @15,PLHDRRSC(,RPLH)                                 0764
*               GOTO WRTDFR;        /* TO DEFER CODE                 */
         B     WRTDFR                                              0765
*             END;                                                 0766
*           IF BUFCER2=OFF THEN     /* ERR BUFFER?                   */
@RF00761 TM    BUFCER2(RBUFC),B'00001000'                          0767
         BNZ   @RF00767                                            0767
*             DO;                   /* NO                            */
*                                                                  0768
*               /*****************************************************/
*               /*                                                   */
*               /* TURN BUSY WRITE ON AND CALL WRBFR TO WRITE BUFC   */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0769
*               RFY                                                0769
*                (RWORK4,                                          0769
*                 RWORK5) RSTD;     /* LOCK                          */
*               RWORK5=RWORK3;      /* AMB                           */
         LR    RWORK5,RWORK3                                       0770
*               RWORK4=RWORK2×BSYWMSK;/* BSYW ON                     */
         LR    RWORK4,RWORK2                                       0771
         O     RWORK4,BSYWMSK                                      0771
*               CDS(RWORK2,RWORK4,BUFCRSC1);/* SWAP IF NO CHNG       */
         CDS   RWORK2,RWORK4,BUFCRSC1(RBUFC)                       0772
*               GEN(BNZ CHKTRNID);  /* CHNG START OVER       @ZA07544*/
         BNZ CHKTRNID
*               DBMAMB=RAMB;        /* SAVE RAMB                     */
         STCM  RAMB,7,DBMAMB(RPLH)                                 0774
*               RAMB=BUFCAMB;       /* PICK UP WRITE AMB             */
         L     RAMB,BUFCAMB(,RBUFC)                                0775
*               CALL WRBFR;         /* GO WRITE BUFC                 */
         BAL   @14,WRBFR                                           0776
*               RAMB=DBMAMB;        /* RESTORE RAMB                  */
         L     RAMB,DBMAMB-1(,RPLH)                                0777
         LA    RAMB,0(,RAMB)                                       0777
*WRTCSLP2:                                                         0778
*               RWORK4=BSPHUIW;     /* OLD CNT                       */
WRTCSLP2 L     @15,DBMBSPH-1(,RPLH)                                0778
         LA    @15,0(,@15)                                         0778
         L     RWORK4,BSPHUIW(,@15)                                0778
*               RWORK5=RWORK4+ONE;  /* NEW CNT                       */
         LA    RWORK5,1                                            0779
         ALR   RWORK5,RWORK4                                       0779
*               CS(RWORK4,RWORK5,BSPHUIW);/* SWAP IF NO CHNG         */
         CS    RWORK4,@09,BSPHUIW(@15)                             0780
*               GEN(BNZ WRTCSLP2);  /* LOOP TILL SUCCESSFUL          */
         BNZ WRTCSLP2
*               RFY                                                0782
*                (RWORK4,                                          0782
*                 RWORK5) UNRSTD;   /* UNLOCK                        */
*               BUFCBSYW=OFF;       /* RESET BSY WRITE               */
         NI    BUFCBSYW(RBUFC),B'11101111'                         0783
*               IF RPLRTNCD='08'X THEN/* IF LOGICAL ERROR,           */
         CLI   RPLRTNCD(RRPL),8                                    0784
         BNE   @RF00784                                            0784
*                 DO;               /* THEN -                @ZA07544*/
*                   IF RPARM1=ALLTYP×/* IF TYPE=ALL          @ZA07544*/
*                       RPARM1=CHKTYP×/* OR TYPE=CHK         @ZA07544*/
*                       RPARM1=TRNTYP THEN/* OR TYPE=TRN     @ZA07544*/
         C     RPARM1,@CF00036                                     0786
         BE    @RT00786                                            0786
         C     RPARM1,@CF00063                                     0786
         BE    @RT00786                                            0786
         C     RPARM1,@CF00065                                     0786
         BNE   @RF00786                                            0786
@RT00786 DS    0H                                                  0787
*                     CALL RSETMDBT;/* THEN SET MOD BITS BACK ON   0787
*                                                            @ZA07544*/
         BAL   @14,RSETMDBT                                        0787
*                   GO TO WRTEXIT;  /* RETURN TO CALLER.     @ZA07544*/
         B     WRTEXIT                                             0788
*                 END;              /* END LOGICAL ERROR     @ZA07544*/
*               IF BUFCER2=ON THEN  /* ANY ERR?              @ZA07544*/
@RF00784 TM    BUFCER2(RBUFC),B'00001000'                          0790
         BNO   @RF00790                                            0790
*                 DO;               /* YES-                  @ZA07544*/
*                                                                  0791
*                   /*************************************************/
*                   /*                                               */
*                   /* DECR BSPH ERR CNT                             */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0792
*WRTDERCT:                                                         0792
*                   RFY                                            0792
*                    (RWORK4,                                      0792
*                     RWORK5) RSTD; /* LOCK REGS                     */
WRTDERCT DS    0H                                                  0793
*                   RWORK4=BSPHRSC2;/* OLD CNT                       */
         L     @15,DBMBSPH-1(,RPLH)                                0793
         LA    @15,0(,@15)                                         0793
         L     RWORK4,BSPHRSC2(,@15)                               0793
*                   RWORK5=RWORK4-ONE;/* NEW CNT                     */
         LR    RWORK5,RWORK4                                       0794
         BCTR  RWORK5,0                                            0794
*                   CS(RWORK4,RWORK5,BSPHRSC2);/* SWAP IF NO CHG     */
         CS    RWORK4,@09,BSPHRSC2(@15)                            0795
*                   GEN(BNZ WRTDERCT);/* LOOP TILL SUCCESSFUL        */
         BNZ WRTDERCT
*                   RFY                                            0797
*                    (RWORK4,                                      0797
*                     RWORK5) UNRSTD;/* UNLOCK                       */
*                   RPLFDBWD=ZERO;  /* CLEAR ERROR           @ZA07544*/
         SLR   @15,@15                                             0798
         ST    @15,RPLFDBWD(,RRPL)                                 0798
*                   IF RPARM1=CHKTYP THEN/* CHK TYPE ?       @ZA07544*/
         C     RPARM1,@CF00063                                     0799
         BNE   @RF00799                                            0799
*                     CALL RSETMDBT;/* RESET BSPH MOD BITS ON      0800
*                                                            @ZA07544*/
         BAL   @14,RSETMDBT                                        0800
*                   ELSE            /* NOT CHK               @ZA07544*/
*                     IF RPARM1=TRNTYP/* TYPE TRN?                   */
*                       THEN        /* YES, SET -                    */
         B     @RC00799                                            0801
@RF00799 C     RPARM1,@CF00065                                     0801
         BNE   @RF00801                                            0801
*                       BUFCMDBT=BUFCMDBT&(DBMTRNID&&ALLBITS);/*   0802
*                                      TRNID OFF                     */
         L     @15,DBMTRNID(,RPLH)                                 0802
         X     @15,ALLBITS                                         0802
         N     @15,BUFCMDBT(,RBUFC)                                0802
         ST    @15,BUFCMDBT(,RBUFC)                                0802
*                     ELSE          /* NOT CHK OR TRN        @ZA07544*/
*                       IF RPARM1=ALLTYP THEN/* TYPE ALL ?   @ZA07544*/
         B     @RC00801                                            0803
@RF00801 C     RPARM1,@CF00036                                     0803
         BNE   @RF00803                                            0803
*                         BUFCMDBT=ZERO;/* CLEAR MOD BITS    @ZA07544*/
         SLR   @15,@15                                             0804
         ST    @15,BUFCMDBT(,RBUFC)                                0804
*                   IF BUFCMDBT=ZERO THEN/* ANY MOD BITS?            */
@RF00803 DS    0H                                                  0805
@RC00801 DS    0H                                                  0805
@RC00799 L     @15,BUFCMDBT(,RBUFC)                                0805
         LTR   @15,@15                                             0805
         BNZ   @RF00805                                            0805
*                     DO;           /* NO, SET TO EMPTY              */
*                       RFY                                        0807
*                        (RWORK4,                                  0807
*                         RWORK5) RSTD;/* LOCK                       */
*                       RWORK5=ZERO;/* AMB                           */
         SLR   RWORK5,RWORK5                                       0808
*                       RWORK4=RWORK2&UCNTMSK1;/* EMPTY STATUS       */
         LR    RWORK4,RWORK2                                       0809
         N     RWORK4,UCNTMSK1                                     0809
*                       CDS(RWORK2,RWORK4,BUFCRSC1);/* SWAP IF NO  0810
*                                      CHNG                          */
         CDS   RWORK2,RWORK4,BUFCRSC1(RBUFC)                       0810
*                       RFY                                        0811
*                        (RWORK4,                                  0811
*                         RWORK5) UNRSTD;/* UNLOCK                   */
*                     END;          /* END MDBT = ZERO               */
*                 END;              /* END ERROR             @ZA07544*/
@RF00805 DS    0H                                                  0814
*             END;                  /* END NOT ERR BUFC      @ZA07544*/
@RF00790 DS    0H                                                  0815
*         END;                      /* END MDBT ^= ZERO              */
@RF00767 DS    0H                                                  0816
*INCRBUFC:                          /* INCR RBUFC TO NXT ONE         */
*       RBUFC=BUFCHAIN;             /* POINT TO NEXT                 */
@RF00743 DS    0H                                                  0816
INCRBUFC L     RBUFC,BUFCHAIN(,RBUFC)                              0816
*     END;                          /* END OF DO UNTIL               */
@DE00741 LTR   RBUFC,RBUFC                                         0817
         BNZ   @DL00741                                            0817
*     GOTO WRTENDCK;                /* CHK FOR END                   */
         B     WRTENDCK                                            0818
*     RFY                                                          0819
*      (RWORK2,                                                    0819
*       RWORK3) UNRSTD;             /* UNLOCK                        */
*   END;                            /* END OF DO WHILE               */
*                                                                  0820
@DE00732 L     @15,DBMBSPH-1(,RPLH)                                0820
         L     @15,BSPHMDBT(,@15)                                  0820
         LTR   @15,@15                                             0820
         BNZ   @DL00732                                            0820
*   /*****************************************************************/
*   /*                                                               */
*   /* BSPHMDBT WAS ZERO OR THE SUBPOOL HAS BEEN PROCESSED.          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0821
*WRTENDCK:                                                         0821
*   IF RPARM1=DSTYP THEN            /* TYPE DS?                      */
WRTENDCK LTR   RPARM1,RPARM1                                       0821
         BNZ   @RF00821                                            0821
*     DO;                           /* YES, CLR ALL BUFCS            */
*       RBUFC=BSPHBUFC;             /* FIRST BUFC                    */
         L     @15,DBMBSPH-1(,RPLH)                                0823
         L     RBUFC,BSPHBUFC(,@15)                                0823
*       DO WHILE RBUFC^=ZERO;       /* LOOP THRU BUFCS               */
         B     @DE00824                                            0824
@DL00824 DS    0H                                                  0825
*         IF RAMB=BUFCAMB&          /* AMB MATCH?            @ZA26569*/
*             BUFCRRD=OFF&          /* ANY READ?             @ZA26569*/
*             BUFCMW=OFF THEN       /* ANY WRITE?            @ZA33208*/
         C     RAMB,BUFCAMB(,RBUFC)                                0825
         BNE   @RF00825                                            0825
         TM    BUFCRRD(RBUFC),B'10100000'                          0825
         BNZ   @RF00825                                            0825
*           BUFCRSC2=BUFCRSC2&UCNTMSK1;/* SET EMPTY STATUS           */
         L     @15,BUFCRSC2(,RBUFC)                                0826
         N     @15,UCNTMSK1                                        0826
         ST    @15,BUFCRSC2(,RBUFC)                                0826
*         RBUFC=BUFCHAIN;           /* NEXT BUFC                     */
@RF00825 L     RBUFC,BUFCHAIN(,RBUFC)                              0827
*       END;                        /* END DO WHILE                  */
@DE00824 LTR   RBUFC,RBUFC                                         0828
         BNZ   @DL00824                                            0828
*       GO TO WRTEXIT;              /* RETURN TO CALLER.     @ZA07544*/
         B     WRTEXIT                                             0829
*     END;                          /* END TYPE DS                   */
*   IF BSPHNBSP=ZERO THEN           /* NO MORE BSPH'S?               */
@RF00821 L     @15,DBMBSPH-1(,RPLH)                                0831
         L     @15,BSPHNBSP(,@15)                                  0831
         LTR   @15,@15                                             0831
         BZ    @RT00831                                            0831
*     GO TO WRTEXIT;                /* RETURN TO CALLER.     @ZA07544*/
*/* SET UP FOR NEXT SUBPOOL                                          */
*                                                                  0833
*   DBMBSPH=BSPHNBSP;               /* BSPH BASE                     */
         STCM  @15,7,DBMBSPH(RPLH)                                 0833
*   RBUFC=BSPHBUFC;                 /* FIRST BUFC                    */
         L     RBUFC,BSPHBUFC(,@15)                                0834
*   GOTO WRTRST1;                   /* LOOP BACK                     */
*                                                                  0835
         B     WRTRST1                                             0835
*   /*****************************************************************/
*   /*                                                               */
*   /* TYPE = LRU... PROCESS ONLY A SPECIFIED PERCENTAGE OF BUFFERS  */
*   /* IN EACH SUBPOOL.                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0836
*WRTLRU:                                                           0836
*   IF DBMLRUCT>ALL THEN            /* TOO HIGH?                     */
WRTLRU   CLI   DBMLRUCT(RPLH),100                                  0836
         BNH   @RF00836                                            0836
*     DBMLRUCT=ALL;                 /* YES, FORCE TO ALL             */
         MVI   DBMLRUCT(RPLH),X'64'                                0837
*   DO WHILE(DBMBSPH^=ZERO);                                       0838
@RF00836 B     @DE00838                                            0838
@DL00838 DS    0H                                                  0839
*     DBMCNTR=ZERO;                 /* INIT CNT                      */
         MVI   DBMCNTR(RPLH),X'00'                                 0839
*     RBUFC=BSPHUBTM;               /* BOTTOM BUFC                   */
         L     @15,DBMBSPH-1(,RPLH)                                0840
         L     RBUFC,BSPHUBTM(,@15)                                0840
*LRUSPLP:                           /* SUBPOOL LOOP                  */
*     IF BSPHMDBT^=ZERO             /* ANY MOD BITS ON?              */
*       THEN                        /* YES                           */
LRUSPLP  L     @15,DBMBSPH-1(,RPLH)                                0841
         L     @15,BSPHMDBT(,@15)                                  0841
         LTR   @15,@15                                             0841
         BZ    @RF00841                                            0841
*       DO WHILE((DBMCNTR<((DBMLRUCT*BSPHBFNO)/100))&RBUFC^=ZERO); 0842
         B     @DE00842                                            0842
@DL00842 DS    0H                                                  0843
*         RFY                                                      0843
*          (RWORK2,                                                0843
*           RWORK3) RSTD;           /* LOCK                          */
*         RWORK2=BUFCRSC2;          /* SET CS REG                    */
         L     RWORK2,BUFCRSC2(,RBUFC)                             0844
*         IF BUFCMDBT^=ZERO&        /* MOD BIT ON &                  */
*             BUFCUCNT=ZERO&        /* NO USERS &                    */
*             BUFCBSYW=OFF&         /* NOT BUSY WRITING &            */
*             BUFCER2=OFF THEN      /* NOT AN ERR BUFFER?            */
         L     @15,BUFCMDBT(,RBUFC)                                0845
         LTR   @15,@15                                             0845
         BZ    @RF00845                                            0845
         CLI   BUFCUCNT(RBUFC),0                                   0845
         BNE   @RF00845                                            0845
         TM    BUFCBSYW(RBUFC),B'00010000'                         0845
         BNZ   @RF00845                                            0845
         TM    BUFCER2(RBUFC),B'00001000'                          0845
         BNZ   @RF00845                                            0845
*           DO;                     /* YES, WRITE BUFFER             */
*             RWORK3=RWORK2×BSYWMSK;/* BUSY WRITE ON                 */
         LR    RWORK3,RWORK2                                       0847
         O     RWORK3,BSYWMSK                                      0847
*             CS(RWORK2,RWORK3,BUFCRSC2);/* SWAP IF NO CHNG          */
         CS    RWORK2,@07,BUFCRSC2(RBUFC)                          0848
*             GEN(BNZ LRUSPLP);     /* CHNGD, TRY AGAIN              */
         BNZ LRUSPLP
*             DBMAMB=RAMB;          /* SAVE RAMB                     */
         STCM  RAMB,7,DBMAMB(RPLH)                                 0850
*             RAMB=BUFCAMB;         /* PICK UP WRITE AMB             */
         L     RAMB,BUFCAMB(,RBUFC)                                0851
*             CALL WRBFR;           /* WRITE IT                      */
         BAL   @14,WRBFR                                           0852
*             RAMB=DBMAMB;          /* RESTORE RAMB                  */
         L     RAMB,DBMAMB-1(,RPLH)                                0853
         LA    RAMB,0(,RAMB)                                       0853
*WRTCSLP4:                                                         0854
*             RWORK2=BSPHUIW;       /* OLD CNT                       */
WRTCSLP4 L     @15,DBMBSPH-1(,RPLH)                                0854
         LA    @15,0(,@15)                                         0854
         L     RWORK2,BSPHUIW(,@15)                                0854
*             RWORK3=RWORK2+ONE;    /* NEW CNT                       */
         LA    RWORK3,1                                            0855
         ALR   RWORK3,RWORK2                                       0855
*             CS(RWORK2,RWORK3,BSPHUIW);/* SWAP IF NO CHNG           */
         CS    RWORK2,@07,BSPHUIW(@15)                             0856
*             GEN(BNZ WRTCSLP4);    /* LOOP TILL SUCCESSFUL          */
         BNZ WRTCSLP4
*             BUFCBSYW=OFF;         /* RESET BUSY WRITE              */
         NI    BUFCBSYW(RBUFC),B'11101111'                         0858
*             IF RPLRTNCD^=ZERO THEN/* IF ANY ERROR,                 */
         CLI   RPLRTNCD(RRPL),0                                    0859
         BNE   @RT00859                                            0859
*               GO TO WRTEXIT;      /* RETURN TO CALLER.     @ZA07544*/
*             DBMCNTR=DBMCNTR+ONE;  /* INCR BUFC CNT                 */
         LA    @15,1                                               0861
         SLR   @05,@05                                             0861
         IC    @05,DBMCNTR(,RPLH)                                  0861
         ALR   @15,@05                                             0861
         STC   @15,DBMCNTR(,RPLH)                                  0861
*             RFY                                                  0862
*              (RWORK2,                                            0862
*               RWORK3) UNRSTD;     /* UNLOCK                        */
*           END;                                                   0863
*         RBUFC=BUFCUCUP;           /* NEXT BUFC                     */
@RF00845 L     RBUFC,BUFCUCUP(,RBUFC)                              0864
*       END;                        /* END OF DO UNTIL               */
*                                                                  0865
@DE00842 L     @15,DBMBSPH-1(,RPLH)                                0865
         LH    @07,BSPHBFNO(,@15)                                  0865
         SLR   @15,@15                                             0865
         IC    @15,DBMLRUCT(,RPLH)                                 0865
         MR    @06,@15                                             0865
         D     @06,@CF00172                                        0865
         SLR   @15,@15                                             0865
         IC    @15,DBMCNTR(,RPLH)                                  0865
         CR    @07,@15                                             0865
         BNH   @DC00842                                            0865
         LTR   RBUFC,RBUFC                                         0865
         BNZ   @DL00842                                            0865
@DC00842 DS    0H                                                  0866
*     /***************************************************************/
*     /*                                                             */
*     /* SUBPOOL HAS BEEN PROCESSED, SET UP FOR NEXT                 */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0866
*     DBMBSPH=BSPHNBSP;             /* BSPH BASE                     */
@RF00841 L     @15,DBMBSPH-1(,RPLH)                                0866
         L     @15,BSPHNBSP(,@15)                                  0866
         STCM  @15,7,DBMBSPH(RPLH)                                 0866
*   END;                            /* END OF DO WHILE               */
*                                                                  0867
@DE00838 L     @15,DBMBSPH-1(,RPLH)                                0867
         LA    @15,0(,@15)                                         0867
         LTR   @15,@15                                             0867
         BNZ   @DL00838                                            0867
*   /*****************************************************************/
*   /*                                                               */
*   /* ALL SUBPOOLS HAVE BEEN PROCESSED, RETURN TO USER              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0868
*WRTEXIT:                           /*                       @ZA07544*/
*   PLHINVAL=ON;                    /* CAUSE PLH RELEASE     @ZA07544*/
WRTEXIT  OI    PLHINVAL(RPLH),B'00000010'                          0868
*   CALL BMEXIT;                    /* RETURN TO CALLER              */
         BAL   @14,BMEXIT                                          0869
*   RFY                                                            0870
*     IDABSPH BASED(AMBBUFC);       /* RESTORE NRM BSPH BASE         */
*                                                                  0871
*   /*****************************************************************/
*   /*                                                               */
*   /* SCHBF - SEARCH BUFFER MACRO ROUTINE                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0871
*/*                                                                0871
*01 FUNCTION = SEARCH BUFFER SUBPOOL STARTING AT RELATIVE BFR      0871
*              SPECIFIED FOR SPECIFIED RBA.                        0871
*01 INPUT =    RRPL - RPL                                          0871
*              RPLH - PLH                                          0871
*              RAMB - AMB                                          0871
*              RPARM1 - RELATIVE BFR NO.                           0871
*              RPLARG - PTR TO RBA RANGE                           0871
*01 OUTPUT =   RPLDDDD - RBA OF BFR RETURNED                       0871
*              RPLAREA - BFR ADDR                                  0871
*              RPARM1 - RELATIVE BFR NO. OF BUFC RETURNED.         0871
*              PLHDBUFC - PTR TO BUFC CONTAINING RBA.              0871
*              RBUFC - BUFC RETUTNED.                              0871
*              RPLRTNCD & RPLERRCD SET TO APPROPRIATE VALUES.        */
*                                                                  0871
*SCHBF:                             /* SEARCH BUFFER                 */
*   GEN(IDASVR14);                  /* SAVE RETURN REG               */
SCHBF    IDASVR14
*   RBUFC=PLHDBUFC;                 /* INIT RBUFC                    */
         L     RBUFC,PLHDBUFC(,RPLH)                               0872
*   IF RBUFC^=ZERO THEN             /* PLH OWN A BUFC?               */
         LTR   RBUFC,RBUFC                                         0873
         BZ    @RF00873                                            0873
*     DO;                           /* YES, FREE IT.         @ZA07544*/
*       IF BUFCSEG=ON THEN          /* IF SPANNED RCD        @ZA07544*/
         TM    BUFCSEG(RBUFC),B'01000000'                          0875
         BNO   @RF00875                                            0875
*         DO;                       /* THEN MUST             @ZA07544*/
*           BUFCSEG=OFF;            /* ENSURE AGAINST        @ZA07544*/
*           BUFCVAL=OFF;            /* NO-OPPED FREEB        @ZA07544*/
         NI    BUFCSEG(RBUFC),B'10111011'                          0878
*         END;                      /* END SPANNED           @ZA07544*/
*       CALL FREEB;                 /* YES, FREE IT          @ZA07544*/
@RF00875 BAL   @14,FREEB                                           0880
*     END;                          /* END FREE BFR          @ZA07544*/
*                                                                  0881
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK FOR INVALID PARAMETERS                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0882
*   IF RPARM1>BSPHBFNO×             /* BEYOND END?                   */
*       RPARM1<ONE THEN             /* OR BEFORE START               */
@RF00873 L     @15,AMBBUFC(,RAMB)                                  0882
         CH    RPARM1,BSPHBFNO(,@15)                               0882
         BH    @RT00882                                            0882
         LTR   RPARM1,RPARM1                                       0882
         BP    @RF00882                                            0882
@RT00882 DS    0H                                                  0883
*     DO;                           /* YES, SET ERR & EXIT           */
*       RPLRTNCD='08'X;             /* LOGICAL ERR                   */
         MVI   RPLRTNCD(RRPL),X'08'                                0884
*       RPLERRCD=RPLINVP;           /* INVALID REQUEST               */
         MVI   RPLERRCD(RRPL),X'68'                                0885
*       CALL BMEXIT;                /* EXIT                          */
         BAL   @14,BMEXIT                                          0886
*     END;                                                         0887
*                                                                  0887
*   /*****************************************************************/
*   /*                                                               */
*   /* SET TO POINT TO RELATIVE BUFC PER RPARM1                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0888
*   RBUFC=BSPHBUFC;                 /* POINT TO FIRST                */
@RF00882 L     @15,AMBBUFC(,RAMB)                                  0888
         L     RBUFC,BSPHBUFC(,@15)                                0888
*   RFY                                                            0889
*     I RSTD;                       /* LOCK REG                      */
*   IF RPARM1>ONE THEN              /* WAS FIRST SPECIFIED?          */
         LA    @15,1                                               0890
         CR    RPARM1,@15                                          0890
         BNH   @RF00890                                            0890
*     DO I=ONE TO(RPARM1-ONE);      /* NO, FIND SPECIFIED ONE        */
         LR    I,@15                                               0891
         B     @DE00891                                            0891
@DL00891 DS    0H                                                  0892
*       RBUFC=BUFCHAIN;             /* POINT TO NEXT                 */
         L     RBUFC,BUFCHAIN(,RBUFC)                              0892
*     END;                                                         0893
         AL    I,@CF00047                                          0893
@DE00891 LR    @15,RPARM1                                          0893
         BCTR  @15,0                                               0893
         CR    I,@15                                               0893
         BNH   @DL00891                                            0893
*   RFY                                                            0894
*     I UNRSTD;                     /* UNLOCK                        */
*                                                                  0894
@RF00890 DS    0H                                                  0895
*   /*****************************************************************/
*   /*                                                               */
*   /* RBUFC NOW POINTS TO RELATIVE BUFC SPECIFIED BY RPARM1. SEARCH */
*   /* BUFCHAIN FROM RBUFC TO END FOR AN RBA WITHIN THE RANGE        */
*   /* SPECIFIED BY RPLARG.                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0895
*   DO UNTIL(RBUFC=ZERO);           /* SCH TILL END                  */
@DL00895 DS    0H                                                  0896
*     IF RAMB=BUFCAMB&              /* SAME AMB? &                   */
*         BUFCDDDD=>SCHLRBA&        /* RBA -                         */
*         BUFCDDDD=<SCHHRBA&        /* IN LIMITS? &                  */
*         BUFCVAL=ON&               /* RBA IS VALID &                */
*         BUFCEXC=OFF THEN          /* BUFCEXC = OFF?                */
         C     RAMB,BUFCAMB(,RBUFC)                                0896
         BNE   @RF00896                                            0896
         L     @15,BUFCDDDD(,RBUFC)                                0896
         L     @05,RPLARG(,RRPL)                                   0896
         ICM   @00,15,SCHLRBA(@05)                                 0896
         CLR   @15,@00                                             0896
         BL    @RF00896                                            0896
         ICM   @00,15,SCHHRBA(@05)                                 0896
         CLR   @15,@00                                             0896
         BH    @RF00896                                            0896
         TM    BUFCVAL(RBUFC),B'00000100'                          0896
         BNO   @RF00896                                            0896
         TM    BUFCEXC(RBUFC),B'00000010'                          0896
         BNZ   @RF00896                                            0896
*       DO;                         /* YES, RBA MATCH                */
*         IF BUFCBSYR=OFF THEN      /* BUSY READ?                    */
         TM    BUFCBSYR(RBUFC),B'00100000'                         0898
         BNZ   @RF00898                                            0898
*           DO;                     /* NO, CONTINUE                  */
*             CALL INCRUCNT;        /* INCR USE CNT                  */
*                                                                  0900
         BAL   @14,INCRUCNT                                        0900
*             /*******************************************************/
*             /*                                                     */
*             /* VERIFY THAT RBA MATCH STILL EXISTS ACROSS INCRUCNT  */
*             /* CALL                                                */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0901
*             IF RAMB=BUFCAMB&      /* SAME AMB? &                   */
*                 BUFCDDDD=>SCHLRBA&/* RBA -                         */
*                 BUFCDDDD=<SCHHRBA&/* IN LIMITS? &                  */
*                 BUFCVAL=ON&       /* RBA IS VALID &                */
*                 BUFCEXC=OFF THEN  /* BUFCEXC = OFF?                */
         C     RAMB,BUFCAMB(,RBUFC)                                0901
         BNE   @RF00901                                            0901
         L     @15,BUFCDDDD(,RBUFC)                                0901
         L     @05,RPLARG(,RRPL)                                   0901
         ICM   @00,15,SCHLRBA(@05)                                 0901
         CLR   @15,@00                                             0901
         BL    @RF00901                                            0901
         ICM   @00,15,SCHHRBA(@05)                                 0901
         CLR   @15,@00                                             0901
         BH    @RF00901                                            0901
         TM    BUFCVAL(RBUFC),B'00000100'                          0901
         BNO   @RF00901                                            0901
         TM    BUFCEXC(RBUFC),B'00000010'                          0901
         BNZ   @RF00901                                            0901
*               DO;                 /* YES, RBA MATCH                */
*                 RPLDDDD=BUFCDDDD; /* RBA                           */
         ST    @15,RPLDDDD(,RRPL)                                  0903
*                 IF RPLLOC=ON THEN /* LOCATE MODE?                  */
         TM    RPLLOC(RRPL),B'10000000'                            0904
         BNO   @RF00904                                            0904
*                   USERPTR=BUFCBAD;/* YES, SET BFR ADDR             */
         L     @15,RPLAREA(,RRPL)                                  0905
         L     @05,BUFCBAD(,RBUFC)                                 0905
         ST    @05,USERPTR(,@15)                                   0905
*                 ELSE              /* NO, MOVE CI                   */
*                   DO;                                            0906
         B     @RC00904                                            0906
@RF00904 DS    0H                                                  0907
*                     IF RPLBUFL<AMDCINV THEN/* ENOUGH ROOM?         */
         L     @15,AMBDSB(,RAMB)                                   0907
         L     @05,RPLBUFL(,RRPL)                                  0907
         C     @05,AMDCINV(,@15)                                   0907
         BNL   @RF00907                                            0907
*                       DO;         /* NO, SET ERROR                 */
*                         RPLRTNCD='08'X;/* LOGICAL ERR              */
         MVI   RPLRTNCD(RRPL),X'08'                                0909
*                         RPLERRCD=RPLINBUF;/* INVALID BUF           */
         MVI   RPLERRCD(RRPL),X'2C'                                0910
*                         CALL BMEXIT;/* EXIT                        */
         BAL   @14,BMEXIT                                          0911
*                       END;                                       0912
*                     RFY                                          0913
*                      (RWORK2,                                    0913
*                       RWORK3,                                    0913
*                       RWORK4,                                    0913
*                       RWORK5) RSTD;/* LOCK                         */
@RF00907 DS    0H                                                  0914
*                     RWORK2=ADDR(USERAREA);/* TO LOC                */
         L     RWORK2,RPLAREA(,RRPL)                               0914
*                     RWORK3=AMDCINV;/* LENGTH                       */
         L     @15,AMBDSB(,RAMB)                                   0915
         L     RWORK3,AMDCINV(,@15)                                0915
*                     RWORK4=BUFCBAD;/* FROM LOC                     */
         L     RWORK4,BUFCBAD(,RBUFC)                              0916
*                     RWORK5=RWORK3;/* LENGTH                        */
         LR    RWORK5,RWORK3                                       0917
*                     MVCL(RWORK2,RWORK4);/* MOVE CI                 */
         MVCL  RWORK2,RWORK4                                       0918
*                     RFY                                          0919
*                      (RWORK2,                                    0919
*                       RWORK3,                                    0919
*                       RWORK4,                                    0919
*                       RWORK5) UNRSTD;/* UNLOCK                     */
*                   END;                                           0920
*                 PLHDBUFC=RBUFC;   /* BUFC PTR                      */
@RC00904 ST    RBUFC,PLHDBUFC(,RPLH)                               0921
*                 RFY                                              0922
*                  (RWORK1,                                        0922
*                   RWORK2) RSTD;   /* LOCK REGS                     */
*SCHCSLP1:                                                         0923
*                 RWORK1=BSPHFND;   /* OLD                           */
SCHCSLP1 L     @15,AMBBUFC(,RAMB)                                  0923
         L     RWORK1,BSPHFND(,@15)                                0923
*                 RWORK2=RWORK1+ONE;/* NEW                           */
         LA    RWORK2,1                                            0924
         ALR   RWORK2,RWORK1                                       0924
*                 CS(RWORK1,RWORK2,BSPHFND);/* MODIFY                */
         CS    RWORK1,@06,BSPHFND(@15)                             0925
*                 GEN(BNZ SCHCSLP1);/* LOOP TILL SUCCESSFUL          */
         BNZ SCHCSLP1
*                 RFY                                              0927
*                  (RWORK1,                                        0927
*                   RWORK2) UNRSTD; /* UNLOCK                        */
*                 CALL PUTBTOP;     /* PUT ON TOP OF UCHAIN          */
         BAL   @14,PUTBTOP                                         0928
*                 CALL BMEXIT;      /* EXIT                          */
         BAL   @14,BMEXIT                                          0929
*               END;                /* END RBA STILL MATCH           */
*             ELSE                  /* NO MATCH                      */
*               CALL DECRUCNT;      /* DOESN'T STILL MATCH           */
         B     @RC00901                                            0931
@RF00901 BAL   @14,DECRUCNT                                        0931
*           END;                    /* END BUFCBSYR = OFF            */
*         ELSE                      /* BSY READ, DFR TILL NOT        */
*           DO;                                                    0933
         B     @RC00898                                            0933
@RF00898 DS    0H                                                  0934
*             PLHDRMSK=BSYRWMSK;    /* MASK                          */
         MVI   PLHDRMSK(RPLH),X'30'                                0934
*             PLHDRRSC=ADDR(BUFCFLG2);/* TARGET                      */
         LA    @15,BUFCFLG2(,RBUFC)                                0935
         ST    @15,PLHDRRSC(,RPLH)                                 0935
*             CALL BMDEFER;         /* DEFER RTN                     */
         BAL   @14,BMDEFER                                         0936
*           END;                    /* END BUSY READ                 */
*       END;                        /* END RBA MATCH                 */
*     ELSE                          /* NO RBA MTCH, CHK NXT          */
*       DO;                                                        0939
         B     @RC00896                                            0939
@RF00896 DS    0H                                                  0940
*         RPARM1=RPARM1+ONE;        /* INCR REL BFNO CNTR            */
         AL    RPARM1,@CF00047                                     0940
*         RBUFC=BUFCHAIN;           /* POINT TO NEXT                 */
         L     RBUFC,BUFCHAIN(,RBUFC)                              0941
*       END;                                                       0942
*   END;                            /* END OF DO UNTIL               */
*                                                                  0943
@RC00896 DS    0H                                                  0943
@DE00895 LTR   RBUFC,RBUFC                                         0943
         BNZ   @DL00895                                            0943
*   /*****************************************************************/
*   /*                                                               */
*   /* END OF BUFCHAIN, SET 'NOT FOUND' & EXIT.                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0944
*   RPLERRCD=RPLNOREC;              /* NOT FOUND                     */
         MVI   RPLERRCD(RRPL),X'10'                                0944
*   RPLRTNCD='08'X;                 /* LOGICAL ERR                   */
         MVI   RPLRTNCD(RRPL),X'08'                                0945
*   CALL BMEXIT;                    /* EXIT                          */
         BAL   @14,BMEXIT                                          0946
*                                                                  0947
*   /*****************************************************************/
*   /*                                                               */
*   /* MRKBF - MARK BUFFER MACRO ROUTINE                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0947
*/*                                                                0947
*01 FUNCTION = MARK OUT - MARK A BUFC FOR OUTPUT                   0947
*              MARK RLS - RELEASE A BUFC.                          0947
*01 INPUT =    RRPL - RPL                                          0947
*              RPLH - PLH                                          0947
*              RAMB - AMB                                          0947
*              RBUFC - BUFC TO BE MARKED.                          0947
*              RPARM1 = 0 - MARK OUT                               0947
*                     = 4 - MARK RLS                               0947
*01 OUTPUT =   BUFC MARKED AS SPECIFIED.                           0947
*              RPLRTNCD & RPLERRCD SET TO APPROPRIATE VALUES.        */
*                                                                  0947
*MRKBF:                             /* MARK BUFFER                   */
*   GEN(IDASVR14);                  /* SAVE RETURN REG               */
MRKBF    IDASVR14
*   IF RPARM1=ZERO THEN             /* MARK OUT?                     */
         LTR   RPARM1,RPARM1                                       0948
         BNZ   @RF00948                                            0948
*     DO;                           /* YES, MARK FOR OUTPUT          */
*MRKLP1:                                                           0950
*       IF BUFCBSYW=ON THEN         /* BUSY WRITE?                   */
MRKLP1   TM    BUFCBSYW(RBUFC),B'00010000'                         0950
         BNO   @RF00950                                            0950
*         DO;                       /* YES, DEFER TILL OFF           */
*           PLHDRMSK=BSYRWMSK;      /* MASK                          */
         MVI   PLHDRMSK(RPLH),X'30'                                0952
*           PLHDRRSC=ADDR(BUFCFLG2);/* TARGET                        */
         LA    @15,BUFCFLG2(,RBUFC)                                0953
         ST    @15,PLHDRRSC(,RPLH)                                 0953
*           CALL BMDEFER;           /* DEFER RTN                     */
         BAL   @14,BMDEFER                                         0954
*           GOTO MRKLP1;            /* LOOP BACK                     */
         B     MRKLP1                                              0955
*         END;                                                     0956
*       ELSE                        /* NOT BSY, MRK FOR OUT          */
*         DO;                                                      0957
@RF00950 DS    0H                                                  0958
*           CALL SETMDBTS;          /* SET WRT MSK                   */
         BAL   @14,SETMDBTS                                        0958
*           BUFCORBA=BUFCDDDD;      /* OUT RBA                       */
         L     @15,BUFCDDDD(,RBUFC)                                0959
         ST    @15,BUFCORBA(,RBUFC)                                0959
*           BUFCMW=ON;              /* IND MUST WRITE                */
         OI    BUFCMW(RBUFC),B'10000000'                           0960
*           CALL PUTBTOP;           /* PUT AT TOP OF CHAIN           */
         BAL   @14,PUTBTOP                                         0961
*           CALL BMEXIT;            /* EXIT                          */
         BAL   @14,BMEXIT                                          0962
*         END;                                                     0963
*     END;                                                         0964
*   ELSE                            /* NOT MARK OUT                  */
*     IF RPARM1=FOUR THEN           /* MRK RLS?                      */
         B     @RC00948                                            0965
@RF00948 C     RPARM1,@CF00156                                     0965
         BNE   @RF00965                                            0965
*       DO;                         /* YES, RELE BUFC                */
*         IF BUFCMW=ON THEN         /* IF WRITE REQD         @ZA10886*/
         TM    BUFCMW(RBUFC),B'10000000'                           0967
         BNO   @RF00967                                            0967
*           DO;                     /*                       @ZA10886*/
*             CALL SETMDBTS;        /* SET MOD BITS          @ZA10886*/
         BAL   @14,SETMDBTS                                        0969
*             BUFCDDDD=BUFCORBA;    /* COPY OUTPUT RBA       @ZA10886*/
         L     @15,BUFCORBA(,RBUFC)                                0970
         ST    @15,BUFCDDDD(,RBUFC)                                0970
*           END;                    /*                       @ZA10886*/
*         BUFCEXC=OFF;              /* RESET EXCL CTRL               */
@RF00967 NI    BUFCEXC(RBUFC),B'11111101'                          0972
*         CALL DECRUCNT;            /* DECR USE CNT                  */
         BAL   @14,DECRUCNT                                        0973
*         PLHDBUFC=ZERO;            /* CLR BUFC PTR                  */
         SLR   @15,@15                                             0974
         ST    @15,PLHDBUFC(,RPLH)                                 0974
*         PLHINVAL=ON;              /* SET INVALID                   */
         OI    PLHINVAL(RPLH),B'00000010'                          0975
*         CALL BMEXIT;              /* EXIT                          */
         BAL   @14,BMEXIT                                          0976
*       END;                                                       0977
*                                                                  0977
*   /*****************************************************************/
*   /*                                                               */
*   /* INVALID REQUEST. RPARM1 WAS NOT ZERO OR FOUR.                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0978
*     ELSE                          /* EXIT ERR                      */
*       DO;                                                        0978
         B     @RC00965                                            0978
@RF00965 DS    0H                                                  0979
*         RPLRTNCD='08'X;           /* LOGICAL ERR                   */
         MVI   RPLRTNCD(RRPL),X'08'                                0979
*         RPLERRCD=RPLINVP;         /* INVALID REQUEST               */
         MVI   RPLERRCD(RRPL),X'68'                                0980
*         CALL BMEXIT;              /* EXIT                          */
         BAL   @14,BMEXIT                                          0981
*       END;                                                       0982
*                                                                  0983
*   /*****************************************************************/
*   /*                                                               */
*   /* GWSEG - GET WORK BUFC FOR SPANNED RECORDS                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0983
*/*                                                                0983
*01 FUNCTION = GET A WORK BUFFER FOR SPANNED RECORDS.              0983
*01 INPUT =    STD VSAM REGS.                                      0983
*01 OUTPUT =   THE CI WRITTEN IF REQUIRED.                         0983
*              RPLRTNCD & RPLERRCD SET IF A WRITE ERROR OCCURRED.  0983
*              RBUFC WORK BUFFER PROVIDED.                           */
*                                                                  0983
*GWSEG:                             /* GET WORK SEGMENT.             */
*   RBUFC=PLHDBUFC;                 /* BUFC PTR                      */
@RC00965 DS    0H                                                  0983
@RC00948 DS    0H                                                  0983
GWSEG    L     RBUFC,PLHDBUFC(,RPLH)                               0983
*   IF BUFCMW=OFF THEN              /* MUST WRITE?                   */
         TM    BUFCMW(RBUFC),B'10000000'                           0984
         BZ    @RT00984                                            0984
*     RETURN;                       /* NO, EXIT                      */
*   BUFCBSYW=ON;                    /* IND BSY WRITE                 */
         OI    BUFCBSYW(RBUFC),B'00010000'                         0986
*   GEN(IDASVR14);                  /* SAVE RTRN REG                 */
         IDASVR14
*   CALL WRBFR;                     /* WRITE CI                      */
         BAL   @14,WRBFR                                           0988
*   RFY                                                            0989
*    (RWORK1,                                                      0989
*     RWORK2) RSTD;                 /* LOCK C & S REGS               */
*CSLOOP4:                                                          0990
*   RWORK1=BSPHUIW;                 /* OLD CNT                       */
CSLOOP4  L     @15,AMBBUFC(,RAMB)                                  0990
         L     RWORK1,BSPHUIW(,@15)                                0990
*   RWORK2=RWORK1+ONE;              /* NEW CNT                       */
         LA    RWORK2,1                                            0991
         ALR   RWORK2,RWORK1                                       0991
*   CS(RWORK1,RWORK2,BSPHUIW);      /* SET IT                        */
         CS    RWORK1,@06,BSPHUIW(@15)                             0992
*   GEN(BNZ    CSLOOP4);            /* LOOP TILL SUCCESSFUL          */
         BNZ    CSLOOP4
*   BUFCBSYW=OFF;                   /* RESET BSY WRITE               */
         NI    BUFCBSYW(RBUFC),B'11101111'                         0994
*   IF BUFCER2=ON THEN              /* WRITE ERROR?          @ZA07544*/
         TM    BUFCER2(RBUFC),B'00001000'                          0995
         BNO   @RF00995                                            0995
*     DO;                           /* YES.                  @ZA07544*/
*       BUFCVAL=OFF;                /* IND INVALID RBA               */
         NI    BUFCVAL(RBUFC),B'11111011'                          0997
*       BUFCUCNT=ZERO;              /* UCNT = ZERO                   */
         MVI   BUFCUCNT(RBUFC),X'00'                               0998
*       RPLRTNCD='0C'X;             /* PHYSICAL ERR                  */
         MVI   RPLRTNCD(RRPL),X'0C'                                0999
*       RPLERRCD=RPLWTERD;          /* WRITE ERR                     */
         MVI   RPLERRCD(RRPL),X'10'                                1000
*     END;                                                         1001
*   RFY                                                            1002
*    (RWORK1,                                                      1002
*     RWORK2) UNRSTD;               /* FREE REGS                     */
@RF00995 DS    0H                                                  1003
*   CALL BMEXIT;                    /* END OF GWSEG                  */
         BAL   @14,BMEXIT                                          1003
*                                                                  1004
*   /*****************************************************************/
*   /*                                                               */
*   /* READBFR - READ A CONTROL INTERVAL                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1004
*READBFR:                                                          1004
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1004
*                                                                  1004
         B     @PB00004                                            1004
READBFR  DS    0H                                                  1005
*/*                                                                1005
*01 FUNCTION = CALL I/O MANAGER, CALL IDAWAIT, AND CHECK FOR READ ERROR
*01 INPUT =    RBUFC IS THE BUFC TO READ. THE OTHER REGISTERS HAVE 1005
*              THEIR STANDARD CONTENTS.                            1005
*01 OUTPUT =   REGISTERS UNCHANGED, ERROR CODE SET IN RPL.           */
*                                                                  1005
*   GEN(IDASVR14);                  /* SAVE RETURN REGISTER          */
         IDASVR14
*   RPARM1=PLHDIOB;                 /* SET IOB ADDR                  */
         L     RPARM1,PLHDIOB(,RPLH)                               1006
*   IF RPLASY=OFF THEN              /* SYNCHRONOUS REQUEST?  @Z40GSDT*/
         TM    RPLASY(RRPL),B'00001000'                            1007
         BNZ   @RF01007                                            1007
*     PLHSR=ON;                     /* SET SUSPEND/RESUME    @Z40GSDT*/
         OI    PLHSR(RPLH),B'00000001'                             1008
*I09:                                                              1009
*   DO;                             /* IDACALL(IDA019R3)             */
@RF01007 DS    0H                                                  1009
I09      DS    0H                                                  1010
*     CALL IDA019R3;                /* EXIT TO IDA019R3              */
         L     @15,@CV00148                                        1010
         BALR  @14,@15                                             1010
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(USING *+4095,@10);        /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*     GEN(LA    @10,4095(@11));     /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*     GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE          */
         L     @10,=A(@PSTART+4095)
*     GEN(USING @PSTART+4095,@10);  /* ESTABLISH SECOND BASE         */
         USING @PSTART+4095,@10
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I09;                        /* CALL I/O MGR FOR READ         */
*I10:                                                              1020
*   DO;                             /* IDACALL(IDAWAIT)              */
I10      DS    0H                                                  1021
*     CALL IDAWAIT;                 /* EXIT TO IDAWAIT               */
         L     @15,@CV00150                                        1021
         BALR  @14,@15                                             1021
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(USING *+4095,@10);        /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*     GEN(LA    @10,4095(@11));     /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*     GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE          */
         L     @10,=A(@PSTART+4095)
*     GEN(USING @PSTART+4095,@10);  /* ESTABLISH SECOND BASE         */
         USING @PSTART+4095,@10
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I10;                        /* WAIT FOR I/O CMPLETION        */
*   CALL ERRORCHK;                  /* CHECK FOR READ ERROR          */
         BAL   @14,ERRORCHK                                        1031
*   BUFCSEG=OFF;                    /* ASSUME NO SPAN        @ZA07544*/
         NI    BUFCSEG(RBUFC),B'10111111'                          1032
*   IF RPLRTNCD=ZERO THEN           /* I/O ERROR?                    */
         CLI   RPLRTNCD(RRPL),0                                    1033
         BNE   @RF01033                                            1033
*     DO;                           /* NO, INCR RD CNT & EXIT        */
*       IF AMDSPAN=ON THEN          /* SPANNED RCD DS?       @ZA07544*/
         L     @15,AMBDSB(,RAMB)                                   1035
         TM    AMDSPAN(@15),B'00000001'                            1035
         BNO   @RF01035                                            1035
*         DO;                       /* YES, CHK RDF          @ZA07544*/
*           RFY                                                    1037
*             RWORK1 RSTD;          /* GET WORK REG          @ZA07544*/
*           RWORK1=BUFCBAD+AMDCINV-LENGTH(IDACIDF)-LENGTH(IDARDF);/*
*                                      POINT TO RDF          @ZA07544*/
         L     RWORK1,BUFCBAD(,RBUFC)                              1038
         AL    RWORK1,AMDCINV(,@15)                                1038
         SL    RWORK1,@CF00493                                     1038
*           IF RWORK1->RDF1ST=ON×   /* SPANNED RCD?          @ZA07544*/
*               RWORK1->RDFNOT1=ON THEN/*                    @ZA07544*/
         TM    RDF1ST(RWORK1),B'00110000'                          1039
         BZ    @RF01039                                            1039
*             BUFCSEG=ON;           /* YES, SET FLAG         @ZA07544*/
         OI    BUFCSEG(RBUFC),B'01000000'                          1040
*           RFY                                                    1041
*             RWORK1 UNRSTD;        /* DROP WORK REG         @ZA07544*/
@RF01039 DS    0H                                                  1042
*         END;                      /* END S.R. DS           @ZA07544*/
*       RFY                                                        1043
*        (RWORK1,                                                  1043
*         RWORK2) RSTD;             /* LOCK REGS                     */
@RF01035 DS    0H                                                  1044
*RDBFLP1:                                                          1044
*       RWORK1=BSPHRDS;             /* OLD CNT                       */
RDBFLP1  L     @15,AMBBUFC(,RAMB)                                  1044
         L     RWORK1,BSPHRDS(,@15)                                1044
*       RWORK2=RWORK1+ONE;          /* NEW CNT                       */
         LA    RWORK2,1                                            1045
         ALR   RWORK2,RWORK1                                       1045
*       CS(RWORK1,RWORK2,BSPHRDS);  /* SWAP IF NO CHNG               */
         CS    RWORK1,@06,BSPHRDS(@15)                             1046
*       GEN(BNZ RDBFLP1);           /* LOOP TILL SUCCESSFUL          */
         BNZ RDBFLP1
*       RFY                                                        1048
*        (RWORK1,                                                  1048
*         RWORK2) UNRSTD;           /* UNLOCK                        */
*       CALL BMEXIT;                /* RETURN TO CALLER              */
         BAL   @14,BMEXIT                                          1049
*     END;                                                         1050
*   ELSE                            /* I/O ERR                       */
*     IF RPLRTNCD='0C'X THEN        /* PHYSICAL ERR?                 */
         B     @RC01033                                            1051
@RF01033 CLI   RPLRTNCD(RRPL),12                                   1051
         BNE   @RF01051                                            1051
*       DO;                         /* YES                           */
*         PLHJNRBA='0C'X;           /* INDICATE ERROR                */
         LA    @15,12                                              1053
         ST    @15,PLHJNRBA(,RPLH)                                 1053
*I11:                                                              1054
*         DO;                       /* IDACALL(IDA019R5)             */
I11      DS    0H                                                  1055
*           CALL IDA019R5;          /* EXIT TO IDA019R5              */
         L     @15,@CV00149                                        1055
         BALR  @14,@15                                             1055
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(USING *+4095,@10);  /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*           GEN(LA    @10,4095(@11));/* LOAD SECOND BASE             */
         LA    @10,4095(@11)
*           GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE    */
         L     @10,=A(@PSTART+4095)
*           GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE     */
         USING @PSTART+4095,@10
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I11;                  /* ERR MSG RTN                   */
*         IF AMBJRN=ON THEN         /* JRNAD EXIT ACTIVE?            */
         TM    AMBJRN(RAMB),B'00000010'                            1065
         BNO   @RF01065                                            1065
*           DO;                     /* YES                           */
*             PLHJCODE=PLHJIER;     /* IND INPUT ERR                 */
         MVI   PLHJCODE(RPLH),B'00100100'                          1067
*             PLHCRBA=BUFCBAD;      /* BUFFER ADDR                   */
         L     @15,BUFCBAD(,RBUFC)                                 1068
         ST    @15,PLHCRBA(,RPLH)                                  1068
*             PLHJNRBA=RPLRTNCD;    /* RETURN CODE                   */
         SLR   @15,@15                                             1069
         IC    @15,RPLRTNCD(,RRPL)                                 1069
         ST    @15,PLHJNRBA(,RPLH)                                 1069
*I12:                                                              1070
*             DO;                   /* IDACALL(IDATJXIT)             */
I12      DS    0H                                                  1071
*               CALL IDATJXIT;      /* EXIT TO IDATJXIT              */
         L     @15,@CV00153                                        1071
         BALR  @14,@15                                             1071
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE       */
         USING *+4095,@10
*               GEN(LA    @10,4095(@11));/* LOAD SECOND BASE         */
         LA    @10,4095(@11)
*               GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE*/
         L     @10,=A(@PSTART+4095)
*               GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE */
         USING @PSTART+4095,@10
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I12;              /* JRNAD EXIT                    */
*           END;                                                   1081
*         IF AMBEXEX(ONE:ONE)^=ZERO THEN/* EXCEPTION EXIT ACTIVE?    */
@RF01065 CLI   AMBEXEX(RAMB),0                                     1082
         BE    @RF01082                                            1082
*           DO;                     /* YES                           */
*I13:                                                              1084
*             DO;                   /* IDACALL(IDAEXEX)              */
I13      DS    0H                                                  1085
*               CALL IDAEXEX;       /* EXIT TO IDAEXEX               */
         L     @15,@CV00154                                        1085
         BALR  @14,@15                                             1085
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(USING *+4095,@10);/* ESTABLISH SECOND BASE       */
         USING *+4095,@10
*               GEN(LA    @10,4095(@11));/* LOAD SECOND BASE         */
         LA    @10,4095(@11)
*               GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE*/
         L     @10,=A(@PSTART+4095)
*               GEN(USING @PSTART+4095,@10);/* ESTABLISH SECOND BASE */
         USING @PSTART+4095,@10
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I13;              /* EXCEPTION RTN                 */
*           END;                                                   1095
*         IF PLHJNRBA=ZERO THEN     /* PROCESS OPTIONS ZERO?         */
@RF01082 L     @15,PLHJNRBA(,RPLH)                                 1096
         LTR   @15,@15                                             1096
         BNZ   @RF01096                                            1096
*           DO;                     /* YES                           */
*             RPLRTNCD=ZERO;        /* CLEAR RTN CODE                */
         MVI   RPLRTNCD(RRPL),X'00'                                1098
*             RPLERRCD=ZERO;        /* CLEAR                         */
         MVI   RPLERRCD(RRPL),X'00'                                1099
*           END;                                                   1100
*         BUFCER1=OFF;              /* FORGET ABOUT ERROR            */
@RF01096 NI    BUFCER1(RBUFC),B'11101111'                          1101
*       END;                        /* END PHY ERR                   */
*   CALL BMEXIT;                    /* RETURN TO CALLER              */
@RF01051 DS    0H                                                  1103
@RC01033 BAL   @14,BMEXIT                                          1103
*   END READBFR;                    /* END OF READ BUFFER            */
@EL00004 DS    0H                                                  1104
@EF00004 DS    0H                                                  1104
@ER00004 BR    @14                                                 1104
*                                                                  1105
*   /*****************************************************************/
*   /*                                                               */
*   /* SETMDBTS - SET MDBT MASK BITS IN BUFC & BSPH                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1105
*SETMDBTS:                                                         1105
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1105
*                                                                  1105
SETMDBTS DS    0H                                                  1106
*/*                                                                1106
*01 FUNCTION = SET MDBTS FOR THIS TRANSID IN BSPH AND BUFC         1106
*01 INPUT =    STD VSAM REGS                                       1106
*01 OUTPUT =   MDBT BIT CORRESPONDING TO RPL TRANSID SET IN        1106
*              BSPH AND BUFC.                                        */
*                                                                  1106
*   RFY                                                            1106
*    (RWORK1,                                                      1106
*     RWORK2,                                                      1106
*     RWORK3) RSTD;                 /* LOCK UP REGS                  */
*   RWORK1=RPLSTRID;                /* PICK UP ID                    */
         LH    RWORK1,RPLSTRID(,RRPL)                              1107
*   RWORK2=SHIFTBIT;                /* HI BIT FOR SHIFT              */
         L     RWORK2,SHIFTBIT                                     1108
*   GEN( SRL   RWORK2,0(RWORK1));   /* SHIFT TO POS.                 */
          SRL   RWORK2,0(RWORK1)
*CSLOOP1:                                                          1110
*   RWORK3=BUFCMDBT;                /* PRESENT MASK                  */
CSLOOP1  L     RWORK3,BUFCMDBT(,RBUFC)                             1110
*   RWORK1=RWORK3×RWORK2;           /* NEW MASK                      */
         LR    RWORK1,RWORK3                                       1111
         OR    RWORK1,RWORK2                                       1111
*   CS(RWORK3,RWORK1,BUFCMDBT);     /* C & S                         */
         CS    RWORK3,@05,BUFCMDBT(RBUFC)                          1112
*   GEN( BNZ    CSLOOP1);           /* LOOP TILL SUCCESSFUL          */
          BNZ    CSLOOP1
*CSLOOP2:                                                          1114
*   RWORK3=BSPHMDBT;                /* PRESENT MASK                  */
CSLOOP2  L     @15,AMBBUFC(,RAMB)                                  1114
         L     RWORK3,BSPHMDBT(,@15)                               1114
*   RWORK1=RWORK3×RWORK2;           /* NEW MASK                      */
         LR    RWORK1,RWORK3                                       1115
         OR    RWORK1,RWORK2                                       1115
*   CS(RWORK3,RWORK1,BSPHMDBT);     /* C & S                         */
         CS    RWORK3,@05,BSPHMDBT(@15)                            1116
*   GEN( BNZ    CSLOOP2);           /* LOOP TILL SUCCESSFUL          */
          BNZ    CSLOOP2
*   RFY                                                            1118
*    (RWORK1,                                                      1118
*     RWORK2,                                                      1118
*     RWORK3) UNRSTD;                                              1118
*   END SETMDBTS;                                                  1119
@EL00005 DS    0H                                                  1119
@EF00005 DS    0H                                                  1119
@ER00005 BR    @14                                                 1119
*                                                                  1120
*/* RESET MODIFICATION BITS ON IN THE BSPH                   @ZA07544*/
*                                                                  1120
*RSETMDBT:                                                         1120
*   PROC OPTIONS(DONTSAVE,NOSAVEAREA);                             1120
*                                                                  1120
RSETMDBT DS    0H                                                  1121
*/*                                                                1121
*01 FUNCTION = RESET THE BSPH MODIFICATION BITS BACK ON FOR WRTBFR 1121
*              REQUEST TYPES ALL, CHK, AND TRN.                    1121
*01 INPUT    = PLH FIELDS DBMTRNID AND PLHNRBA CONTAINING THE MOD  1121
*              BITS TO BE TURNED BACK ON.                          1121
*01 OUTPUT   = MODIFICATION BITS TURNED BACK ON IN THE BSPH FOR A  1121
*              SPECIFIC SUBPOOL.                                   1121
*                                                            @ZA07544*/
*                                                                  1121
*   GEN(IDASVR14);                  /* SAVE RETURN           @ZA07544*/
         IDASVR14
*   RFY                                                            1122
*    (RWORK4,                                                      1122
*     RWORK5) RSTD;                 /* LOCK WORK REGS        @ZA07544*/
*RESETID:                                                          1123
*   RWORK4=DBMBSPH->BSPHMDBT;       /* SAVE CURRENT MOD BITS @ZA28344*/
RESETID  L     @15,DBMBSPH-1(,RPLH)                                1123
         L     RWORK4,BSPHMDBT(,@15)                               1123
*   IF RPARM1=ALLTYP THEN           /* TYPE=ALL ?            @ZA07544*/
         C     RPARM1,@CF00036                                     1124
         BNE   @RF01124                                            1124
*     RWORK5=RWORK4×PLHNRBA;        /* YES- ADD SAVED MOD BITS     1125
*                                                            @ZA07544*/
         LR    RWORK5,RWORK4                                       1125
         O     RWORK5,PLHNRBA(,RPLH)                               1125
*   ELSE                            /* TYPE CHK OR TRN       @ZA07544*/
*     RWORK5=RWORK4×DBMTRNID;       /* ADD TRN ID TO MOD BITS      1126
*                                                            @ZA07544*/
         B     @RC01124                                            1126
@RF01124 LR    RWORK5,RWORK4                                       1126
         O     RWORK5,DBMTRNID(,RPLH)                              1126
*   CS(RWORK4,RWORK5,DBMBSPH->BSPHMDBT);/* SET NEW BSPHMDBT  @ZA28344*/
@RC01124 L     @15,DBMBSPH-1(,RPLH)                                1127
         CS    RWORK4,@09,BSPHMDBT(@15)                            1127
*   GEN(BNZ  RESETID);              /* LOOP UNTILL SUCCESSFUL      1128
*                                                            @ZA07544*/
         BNZ  RESETID
*   RFY                                                            1129
*    (RWORK4,                                                      1129
*     RWORK5) UNRSTD;               /* UNLOCK WORK REGS      @ZA07544*/
*   CALL BMEXIT;                    /* RETURN TO WRTBFR      @ZA07544*/
         BAL   @14,BMEXIT                                          1130
*   END RSETMDBT;                   /* END PROC              @ZA07544*/
@EL00006 DS    0H                                                  1131
@EF00006 DS    0H                                                  1131
@ER00006 BR    @14                                                 1131
*                                                                  1132
*   /*****************************************************************/
*   /*                                                               */
*   /* ERRORCHK - CHECK FOR ERRORS                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1132
*/*                                                                1132
*01 FUNCTION = TEST BUFC FOR SUCCESS OF READ.                      1132
*01 INPUT =    RBUFC IS ADDRESS OF BUFC FOR READ.                  1132
*01 OUTPUT =   RETURN CODE IS SET IN THE RPL.                        */
*                                                                  1132
*ERRORCHK:                          /* CHECK FOR ERRORS              */
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1132
ERRORCHK DS    0H                                                  1133
*   IF RPLERREG=ZERO&               /* IF NO ERROR YET,              */
*       (BUFCER1=ON×                /* CHECK FOR INPUT ERROR,        */
*       BUFCER2=ON×                 /* OUTPUT ERROR, OR READ         */
*       BUFCRRD=ON) THEN            /* UNDONE BECAUSE OF ERROR       */
         CLI   RPLERREG(RRPL),0                                    1133
         BNE   @RF01133                                            1133
         TM    BUFCER1(RBUFC),B'00011000'                          1133
         BNZ   @RT01133                                            1133
         TM    BUFCRRD(RBUFC),B'00100000'                          1133
         BNO   @RF01133                                            1133
@RT01133 DS    0H                                                  1134
*     RPLERREG='0C'X;               /* ELSEWHERE IN BUFC CHAIN       */
         MVI   RPLERREG(RRPL),X'0C'                                1134
*   IF BUFCXEDB=ON                  /* IF VOLUME NOT MOUNTED,        */
*     THEN                          /* SET ERROR.                    */
@RF01133 TM    BUFCXEDB(RBUFC),B'00000100'                         1135
         BNO   @RF01135                                            1135
*     DO;                                                          1136
*       RPLERREG='08'X;             /* SET LOGICAL ERROR             */
         MVI   RPLERREG(RRPL),X'08'                                1137
*       RPLERRCD=RPLNOMNT;          /* SET MOUNT ERROR               */
         MVI   RPLERRCD(RRPL),X'18'                                1138
*     END;                          /* END OF MOUNT ERROR            */
*   END ERRORCHK;                   /* END OF READ ERROR CHECK       */
@EL00007 DS    0H                                                  1140
@EF00007 DS    0H                                                  1140
@ER00007 BR    @14                                                 1140
*                                                                  1141
*   /*****************************************************************/
*   /*                                                               */
*   /* GETSPACE - GET A BUFC                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1141
*GETSPACE:                                                         1141
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1141
*                                                                  1141
GETSPACE DS    0H                                                  1142
*/*                                                                1142
*01 FUNCTION = OBTAIN AN EMPTY BUFFER FROM THE SPECIFIED SUBPOOL.  1142
*01 INPUT =    STD VSAM REGS.                                      1142
*01 OUTPUT =   RBUFC = BUFC OF BUFFER SELECTED.                    1142
*              RPLERRCD & RPLRTNCD ARE SET IF NO BUFFER IS OBTAINED. */
*                                                                  1142
*   GEN(IDASVR14);                  /* SAVE RETURN REG               */
         IDASVR14
*GSTOVER1:                          /* START OVER POS 1              */
*   CALL GUCHNSHR;                  /* GET SEARCH RIGHTS             */
GSTOVER1 BAL   @14,GUCHNSHR                                        1143
*GSTOVER2:                          /* START OVER POS 2              */
*   RBUFC=BSPHUBTM;                 /* PT TO CHAIN END               */
GSTOVER2 L     @15,AMBBUFC(,RAMB)                                  1144
         L     RBUFC,BSPHUBTM(,@15)                                1144
*   DO UNTIL(RBUFC=ZERO);           /* LOOP THRU CHAIN               */
@DL01145 DS    0H                                                  1146
*     RFY                                                          1146
*       RWORK1 RSTD;                /* GET WORK REGISTER             */
*     RWORK1=BUFCRSC2;              /* LOAD FLAG BYTES               */
         L     RWORK1,BUFCRSC2(,RBUFC)                             1147
*     IF BUFCUCNT=ZERO&             /* NO USERS &                    */
*         BUFCER1=OFF&              /* NO -                          */
*         BUFCER2=OFF THEN          /* - ERRORS?                     */
         CLI   BUFCUCNT(RBUFC),0                                   1148
         BNE   @RF01148                                            1148
         TM    BUFCER1(RBUFC),B'00011000'                          1148
         BNZ   @RF01148                                            1148
*       IF BUFCBSYR=ON×             /* BSY READ OR-                  */
*           BUFCBSYW=ON THEN        /* BSY WRITE?                    */
         TM    BUFCBSYR(RBUFC),B'00110000'                         1149
         BZ    @RF01149                                            1149
*         DO;                       /* YES DEFER                     */
*           CALL UCHNRLSE;          /* RELE SCH RIGHTS               */
         BAL   @14,UCHNRLSE                                        1151
*           PLHDRMSK=BSYRWMSK;      /* MASK                          */
         MVI   PLHDRMSK(RPLH),X'30'                                1152
*           PLHDRRSC=ADDR(BUFCFLG2);/* TARGET                        */
         LA    @15,BUFCFLG2(,RBUFC)                                1153
         ST    @15,PLHDRRSC(,RPLH)                                 1153
*           CALL BMDEFER;           /* DEFER RTN                     */
         BAL   @14,BMDEFER                                         1154
*           GOTO GSTOVER1;          /* START OVER                    */
         B     GSTOVER1                                            1155
*         END;                                                     1156
*       ELSE                        /* NO, CONTINUE                  */
*         DO;                                                      1157
@RF01149 DS    0H                                                  1158
*           IF BUFCMDBT=ZERO THEN   /* NEED TO BE WRITTEN?           */
         L     @15,BUFCMDBT(,RBUFC)                                1158
         LTR   @15,@15                                             1158
         BNZ   @RF01158                                            1158
*             DO;                   /* NO                            */
*               RFY                                                1160
*                (RWORK2,                                          1160
*                 RWORK3,                                          1160
*                 RWORK4,                                          1160
*                 RWORK5) RSTD;     /* LOCK REGS                     */
*               RWORK2=RWORK1&UCNTMSK2;/* FORCE UCNT = 0             */
         LR    RWORK2,RWORK1                                       1161
         N     RWORK2,UCNTMSK2                                     1161
*               RWORK3=BUFCAMB;     /* AMB                           */
         L     RWORK3,BUFCAMB(,RBUFC)                              1162
*               RWORK5=RAMB;        /* NEW AMB = RAMB                */
         LR    RWORK5,RAMB                                         1163
*               RWORK4=(RWORK2&UCNTMSK1)×UCNTMSK;/* RESET FLGS, UCNT
*                                      = 1                           */
         LR    RWORK4,RWORK2                                       1164
         N     RWORK4,UCNTMSK1                                     1164
         O     RWORK4,UCNTMSK                                      1164
*               CDS(RWORK2,RWORK4,BUFCRSC1);/* SWAP IF NO CHANGE     */
         CDS   RWORK2,RWORK4,BUFCRSC1(RBUFC)                       1165
*               GEN(BNZ GSTOVER2);  /* START OVER IF CHANGE          */
         BNZ GSTOVER2
*               RFY                                                1167
*                (RWORK2,                                          1167
*                 RWORK3,                                          1167
*                 RWORK4,                                          1167
*                 RWORK5) UNRSTD;   /* FREE REGS                     */
*               IF RPLERREG='00'X THEN/* IF NO ERROR         @ZA07549*/
         CLI   RPLERREG(RRPL),0                                    1168
         BNE   @RF01168                                            1168
*                 DO;               /* SET FDBK INFO         @ZA07549*/
*                   IF BUFCUCUP^=ZERO&/* NOT LAST BFR &              */
*                       BUFCUCUP->BUFCMDBT^=ZERO THEN/* NEEDS WRITTEN*/
         SLR   @15,@15                                             1170
         L     @09,BUFCUCUP(,RBUFC)                                1170
         CR    @09,@15                                             1170
         BE    @RF01170                                            1170
         CL    @15,BUFCMDBT(,@09)                                  1170
         BE    @RF01170                                            1170
*                     RPLERRCD=RPLWTBFR;/* YES, IND SO               */
         MVI   RPLERRCD(RRPL),X'0C'                                1171
*                   ELSE            /* NO                            */
*                     IF RPLERRCD=RPLWTBFR THEN/* CLR IF OLD WTBFR CD*/
         B     @RC01170                                            1172
@RF01170 CLI   RPLERRCD(RRPL),12                                   1172
         BNE   @RF01172                                            1172
*                       RPLERRCD=ZERO;/* CLEAR                       */
         MVI   RPLERRCD(RRPL),X'00'                                1173
*                 END;              /* END OF NON-ERR        @ZA07549*/
@RF01172 DS    0H                                                  1174
@RC01170 DS    0H                                                  1175
*               CALL UCHNRLSE;      /* REL SCH RIGHTS                */
@RF01168 BAL   @14,UCHNRLSE                                        1175
*               CALL PUTBTOP;       /* PLACE BUFC AT TOP             */
         BAL   @14,PUTBTOP                                         1176
*               CALL BMEXIT;        /* EXIT                          */
         BAL   @14,BMEXIT                                          1177
*             END;                                                 1178
*           ELSE                    /* YES, SET TO WRITE             */
*             DO;                                                  1179
         B     @RC01158                                            1179
@RF01158 DS    0H                                                  1180
*               RFY                                                1180
*                (RWORK2) RSTD;     /* LOCK REGS                     */
*               RWORK2=RWORK1×BSYWMSK;/* NEW. BSYW = ON              */
         LR    RWORK2,RWORK1                                       1181
         O     RWORK2,BSYWMSK                                      1181
*               CS(RWORK1,RWORK2,BUFCRSC2);/* SWAP IF NO CHANGE      */
         CS    RWORK1,@06,BUFCRSC2(RBUFC)                          1182
*               GEN(BNZ GSTOVER2);  /* START OVER IF INTERRUPT       */
         BNZ GSTOVER2
*               CALL UCHNRLSE;      /* RELE SCH RIGHTS               */
         BAL   @14,UCHNRLSE                                        1184
*               DBMAMB=RAMB;        /* SAVE RAMB                     */
         STCM  RAMB,7,DBMAMB(RPLH)                                 1185
*               RAMB=BUFCAMB;       /* PICK UP WRITE AMB             */
         L     RAMB,BUFCAMB(,RBUFC)                                1186
*               CALL WRBFR;         /* WRITE IT                      */
         BAL   @14,WRBFR                                           1187
*               RAMB=DBMAMB;        /* RESTORE RAMB                  */
         L     RAMB,DBMAMB-1(,RPLH)                                1188
         LA    RAMB,0(,RAMB)                                       1188
*               BUFCBSYW=OFF;       /* RESET BSY WRITE               */
         NI    BUFCBSYW(RBUFC),B'11101111'                         1189
*GSPLOOP2:                                                         1190
*               RWORK1=BSPHNUIW;    /* OLD CNT                       */
GSPLOOP2 L     @15,AMBBUFC(,RAMB)                                  1190
         L     RWORK1,BSPHNUIW(,@15)                               1190
*               RWORK2=RWORK1+ONE;  /* INCR                          */
         LA    RWORK2,1                                            1191
         ALR   RWORK2,RWORK1                                       1191
*               CS(RWORK1,RWORK2,BSPHNUIW);/* SWAP IF NO CHANGE      */
         CS    RWORK1,@06,BSPHNUIW(@15)                            1192
*               GEN(BNZ GSPLOOP2);  /* LOOP TILL SUCCESSFUL          */
         BNZ GSPLOOP2
*               IF RPLRTNCD^=ZERO THEN/* IF ANY ERROR,               */
         CLI   RPLRTNCD(RRPL),0                                    1194
         BE    @RF01194                                            1194
*                 CALL BMEXIT;      /* RETURN TO CALLER.             */
         BAL   @14,BMEXIT                                          1195
*               GOTO GSTOVER1;      /* START OVER                    */
         B     GSTOVER1                                            1196
*               RFY                                                1197
*                (RWORK1,                                          1197
*                 RWORK2) UNRSTD;   /* FREE REGS                     */
*             END;                                                 1198
*         END;                                                     1199
*     ELSE                          /* NO, --                        */
*       RBUFC=BUFCUCUP;             /* -- PT TO NXT                  */
         B     @RC01148                                            1200
@RF01148 L     RBUFC,BUFCUCUP(,RBUFC)                              1200
*   END;                            /* END DO UNTIL                  */
*                                                                  1201
@RC01148 DS    0H                                                  1201
@DE01145 LTR   RBUFC,RBUFC                                         1201
         BNZ   @DL01145                                            1201
*   /*****************************************************************/
*   /*                                                               */
*   /* NO BUFFER FOUND, SET ERR CODES & RETURN                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1202
*   CALL UCHNRLSE;                  /* RELE SCH RIGHTS               */
         BAL   @14,UCHNRLSE                                        1202
*   RPLERRCD=RPLNOBFR;              /* IND NO BFR                    */
         MVI   RPLERRCD(RRPL),X'98'                                1203
*   RPLRTNCD='08'X;                 /* IND LOGICAL ERR               */
         MVI   RPLRTNCD(RRPL),X'08'                                1204
*   CALL BMEXIT;                    /* RESTORE 14 & EXIT             */
         BAL   @14,BMEXIT                                          1205
*   END GETSPACE;                                                  1206
@EL00008 DS    0H                                                  1206
@EF00008 DS    0H                                                  1206
@ER00008 BR    @14                                                 1206
*                                                                  1207
*   /*****************************************************************/
*   /*                                                               */
*   /* PUTBTOP - PLACE A BUFC ON TOP OF USE CHAIN                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1207
*PUTBTOP:                                                          1207
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* PUT AT TOP                    */
PUTBTOP  DS    0H                                                  1208
*/*                                                                1208
*01 FUNCTION = PLACE BUFC POINTED TO BY RBUFC AT THE TOP OF        1208
*              THE USE CHAIN.                                      1208
*01 INPUT =    RBUFC -  THE BUFC TO BE PLACED AT THE TOP OF THE CHAIN.
*              RAMB - AMB FOR THE REQUESTING DATA SET.             1208
*              RPLH - PLH FOR THE REQUEST.                         1208
*01 OUTPUT =   THE BUFC IS PUT AT THE TOP OF THE CHAIN.              */
*                                                                  1208
*   GEN(IDASVR14);                  /* SAVE RETURN REG               */
         IDASVR14
*PUTBGO:                                                           1209
*   IF RBUFC=BSPHUTOP THEN          /* ALREADY AT TOP ?              */
PUTBGO   L     @15,AMBBUFC(,RAMB)                                  1209
         C     RBUFC,BSPHUTOP(,@15)                                1209
         BNE   @RF01209                                            1209
*     CALL BMEXIT;                  /* YES EXIT                      */
         BAL   @14,BMEXIT                                          1210
*   RFY                                                            1211
*    (RWORK1,                                                      1211
*     RWORK2) RSTD;                 /* CS REGS                       */
@RF01209 DS    0H                                                  1212
*   RWORK1=ZERO;                    /* BSPHPCUC & BSPHPSUC=0         */
         SLR   RWORK1,RWORK1                                       1212
*   RWORK2=UCHNLOCK;                /* BSPHCUC ON                    */
         L     RWORK2,UCHNLOCK                                     1213
*   CS(RWORK1,RWORK2,BSPHCSRC);     /* C & S                         */
         L     @07,AMBBUFC(,RAMB)                                  1214
         CS    RWORK1,@06,BSPHCSRC(@07)                            1214
*   GEN(BNZ DEFER);                 /* DEFER IF UNSUCCESSFUL         */
         BNZ DEFER
*   IF BUFCUCUP^=ZERO THEN          /* RETEST TOP OF         @OZ05537*/
         L     @15,BUFCUCUP(,RBUFC)                                1216
         LTR   @15,@15                                             1216
         BZ    @RF01216                                            1216
*     DO;                           /* USE CHAIN.            @OZ05537*/
*                                                                  1217
*       /*************************************************************/
*       /*                                                           */
*       /* PLACE BUFC IN RBUFC ON TOP OF THE USE CHAIN               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  1218
*       BUFCUCUP->BUFCUCDN=BUFCUCDN;/* NEW DN CHN                    */
         L     @07,BUFCUCDN(,RBUFC)                                1218
         ST    @07,BUFCUCDN(,@15)                                  1218
*       IF RBUFC=BSPHUBTM THEN      /* BOTTOM OF CHAIN ?             */
         L     @07,AMBBUFC(,RAMB)                                  1219
         C     RBUFC,BSPHUBTM(,@07)                                1219
         BNE   @RF01219                                            1219
*         BSPHUBTM=BUFCUCUP;        /* YES, SET NEW BTM              */
         ST    @15,BSPHUBTM(,@07)                                  1220
*       ELSE                        /* NO, --                        */
*         BUFCUCDN->BUFCUCUP=BUFCUCUP;/* -- SET DN CHAIN             */
         B     @RC01219                                            1221
@RF01219 L     @15,BUFCUCDN(,RBUFC)                                1221
         L     @07,BUFCUCUP(,RBUFC)                                1221
         ST    @07,BUFCUCUP(,@15)                                  1221
*       BUFCUCUP=ZERO;              /* END OF CHAIN                  */
@RC01219 SLR   @15,@15                                             1222
         ST    @15,BUFCUCUP(,RBUFC)                                1222
*       BUFCUCDN=BSPHUTOP;          /* OLD TOP                       */
         L     @15,AMBBUFC(,RAMB)                                  1223
         L     @07,BSPHUTOP(,@15)                                  1223
         ST    @07,BUFCUCDN(,RBUFC)                                1223
*       BSPHUTOP->BUFCUCUP=RBUFC;   /* UP CHAIN TO NEW TOP           */
         ST    RBUFC,BUFCUCUP(,@07)                                1224
*       BSPHUTOP=RBUFC;             /* NEW TOP                       */
         ST    RBUFC,BSPHUTOP(,@15)                                1225
*     END;                          /* END UC CHANGE         @OZ05537*/
*   BSPHPCUC=OFF;                   /* RLSE CTRL OF USE CHN          */
@RF01216 L     @15,AMBBUFC(,RAMB)                                  1227
         NI    BSPHPCUC(@15),B'10111111'                           1227
*   CALL BMEXIT;                    /* EXIT TO CALLER                */
*                                                                  1228
         BAL   @14,BMEXIT                                          1228
*   /*****************************************************************/
*   /*                                                               */
*   /* REQUEST WILL BE DEFERRED AS EITHER THE USE CHAIN IS BEING     */
*   /* MODIFIED OR THE NO. PLH'S SEARCHING THE CHAIN IS NOT ZERO.    */
*   /* DETERMINE THE REASON AND DEFER FOR THE APPROPRIATE REASON.    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1229
*DEFER:                                                            1229
*   IF BSPHPSUC=ZERO THEN           /* SEARCH CNT = 0?               */
DEFER    L     @15,AMBBUFC(,RAMB)                                  1229
         LH    @07,BSPHPSUC(,@15)                                  1229
         LTR   @07,@07                                             1229
         BNZ   @RF01229                                            1229
*     DO;                           /* YES, DEFER ON EXCL CTL        */
*       PLHDRRSC=ADDR(BSPHFLG2);    /* TARGET                        */
         LA    @15,BSPHFLG2(,@15)                                  1231
         ST    @15,PLHDRRSC(,RPLH)                                 1231
*       PLHDRMSK=PCUCMSK;           /* MASK                          */
         MVI   PLHDRMSK(RPLH),X'40'                                1232
*     END;                                                         1233
*   ELSE                            /* DEFER ON SCH CNT              */
*     DO;                                                          1234
         B     @RC01229                                            1234
@RF01229 DS    0H                                                  1235
*       PLHDRRSC=(ADDR(BSPHPSUC)+ONE);/* TARGET                      */
         L     @15,AMBBUFC(,RAMB)                                  1235
         LA    @15,BSPHPSUC(,@15)                                  1235
         AL    @15,@CF00047                                        1235
         ST    @15,PLHDRRSC(,RPLH)                                 1235
*       PLHDRMSK=ZROMSK;            /* MASK                          */
         MVC   PLHDRMSK(1,RPLH),ZROMSK                             1236
*     END;                                                         1237
*   CALL BMDEFER;                   /* DEFER RTN                     */
@RC01229 BAL   @14,BMDEFER                                         1238
*   GOTO PUTBGO;                    /* START OVER                    */
         B     PUTBGO                                              1239
*   END PUTBTOP;                    /* NO MORE                       */
*                                                                  1241
*   /*****************************************************************/
*   /*                                                               */
*   /* GUCHNSHR - GET BSPH USE CHAIN SEARCH RIGHTS                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1241
*GUCHNSHR:                                                         1241
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1241
*                                                                  1241
GUCHNSHR DS    0H                                                  1242
*/*                                                                1242
*01 FUNCTION = GET SEARCH RIGHTS TO BSPH USE CHAIN.                1242
*01 INPUT =    STD VSAM REGS.                                      1242
*01 OUTPUT =   SEARCH RIGHTS ON USE CHAIN.                           */
*                                                                  1242
*   GEN(IDASVR14);                  /* SAVE RETURN REG               */
         IDASVR14
*   RFY                                                            1243
*    (RWORK1,                                                      1243
*     RWORK2) RSTD;                 /* GET REGS                      */
*GUCLP1:                                                           1244
*   RWORK1=BSPHCSRC;                /* LOAD CS REG                   */
GUCLP1   L     @15,AMBBUFC(,RAMB)                                  1244
         L     RWORK1,BSPHCSRC(,@15)                               1244
*   IF BSPHPCUC=ON THEN             /* EXCL CTL?                     */
         TM    BSPHPCUC(@15),B'01000000'                           1245
         BNO   @RF01245                                            1245
*     DO;                           /* YES, DEFER                    */
*       PLHDRRSC=ADDR(BSPHFLG2);    /* TARGET                        */
         LA    @15,BSPHFLG2(,@15)                                  1247
         ST    @15,PLHDRRSC(,RPLH)                                 1247
*       PLHDRMSK=PCUCMSK;           /* MASK                          */
         MVI   PLHDRMSK(RPLH),X'40'                                1248
*       CALL BMDEFER;               /* DEFER RTN                     */
         BAL   @14,BMDEFER                                         1249
*       GOTO GUCLP1;                /* TRY AGAIN                     */
         B     GUCLP1                                              1250
*     END;                                                         1251
*   RWORK2=RWORK1+ONE;              /* NEW                           */
@RF01245 LA    RWORK2,1                                            1252
         ALR   RWORK2,RWORK1                                       1252
*   CS(RWORK1,RWORK2,BSPHCSRC);     /* SWAP                          */
         L     @07,AMBBUFC(,RAMB)                                  1253
         CS    RWORK1,@06,BSPHCSRC(@07)                            1253
*   GEN(BNZ GUCLP1);                /* SOMETHING CHANGED             */
         BNZ GUCLP1
*   PLHRESR1=ADDR(BSPHCSRC);        /* IND PLH SEARCHING CHN         */
         L     @15,AMBBUFC(,RAMB)                                  1255
         LA    @15,BSPHCSRC(,@15)                                  1255
         ST    @15,PLHRESR1(,RPLH)                                 1255
*   CALL BMEXIT;                    /* EXIT TO CALLER                */
         BAL   @14,BMEXIT                                          1256
*   END GUCHNSHR;                                                  1257
@EL00010 DS    0H                                                  1257
@EF00010 DS    0H                                                  1257
@ER00010 BR    @14                                                 1257
*                                                                  1258
*   /*****************************************************************/
*   /*                                                               */
*   /* BMDEFER - BUFFER MGR INTERFACE TO IDADRQ                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1258
*BMDEFER:                                                          1258
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1258
*                                                                  1258
BMDEFER  DS    0H                                                  1259
*/*                                                                1259
*01 FUNCTION = CALL IDADRQ TO DEFER REQUEST PER PLHDRRSC & PLHDRMSK.
*01 INPUT =    STD VSAM REGS.                                      1259
*              PLHDRRSC & PLHDRMSK ARS SET TO APPROPRIATE VALUES.  1259
*01 OUTPUT =   NONE.                                                 */
*                                                                  1259
*   GEN(IDASVR14);                  /* SAVE RETURN REG               */
         IDASVR14
*   RFY                                                            1260
*     RWORK0 RSTD;                  /* LOCK REG                      */
*   RWORK0=DFRMSK;                  /* IND DEFER VIA MASK            */
         LA    RWORK0,16                                           1261
*I14:                                                              1262
*   DO;                             /* IDACALL(IDADRQ)               */
I14      DS    0H                                                  1263
*     CALL IDADRQ;                  /* EXIT TO IDADRQ                */
         L     @15,@CV00152                                        1263
         BALR  @14,@15                                             1263
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(USING *+4095,@10);        /* ESTABLISH SECOND BASE         */
         USING *+4095,@10
*     GEN(LA    @10,4095(@11));     /* LOAD SECOND BASE              */
         LA    @10,4095(@11)
*     GEN(L     @10,=A(@PSTART+4095));/* RELOAD SECOND BASE          */
         L     @10,=A(@PSTART+4095)
*     GEN(USING @PSTART+4095,@10);  /* ESTABLISH SECOND BASE         */
         USING @PSTART+4095,@10
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I14;                        /* DEFER ENTRY PT                */
*   CALL BMEXIT;                    /* RESTORE R14 & EXIT            */
         BAL   @14,BMEXIT                                          1273
*   END BMDEFER;                                                   1274
@EL00011 DS    0H                                                  1274
@EF00011 DS    0H                                                  1274
@ER00011 BR    @14                                                 1274
*                                                                  1275
*   /*****************************************************************/
*   /*                                                               */
*   /* PURGEBFR--PURGE BUFFER FROM THE POOL                  @ZA07544*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1275
*PURGEBFR:                                                         1275
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1275
*                                                                  1275
PURGEBFR DS    0H                                                  1276
*/*                                                                1276
*01 FUNCTION = REMOVE A BUFFER FROM THE POOL.                      1276
*01 INPUT =    STD VSAM REGS.                                      1276
*01 OUTPUT =   BUFFER INVALIDATED AND WRITTEN IF MODIFIED.   @ZA07544*/
*                                                                  1276
*   RFY                                                            1276
*     R14 RSTD;                     /* SAVE REG 14           @ZA07544*/
*   IF BUFCMW=ON THEN               /* MUST WRITE?           @ZA07544*/
         TM    BUFCMW(RBUFC),B'10000000'                           1277
         BNO   @RF01277                                            1277
*     DO;                           /* YES, WRITE IT         @ZA07544*/
*       GEN(IDASVR14);              /* SAVE REG 14           @ZA07544*/
         IDASVR14
*       BUFCBSYW=ON;                /* SET BUSY WRITE        @ZA07544*/
         OI    BUFCBSYW(RBUFC),B'00010000'                         1280
*       CALL WRBFR;                 /* WRITE BFR             @ZA07544*/
         BAL   @14,WRBFR                                           1281
*       BUFCBSYW=OFF;               /* BUSY WRITE OFF        @ZA07544*/
         NI    BUFCBSYW(RBUFC),B'11101111'                         1282
*       RFY                                                        1283
*        (RWORK1,                                                  1283
*         RWORK2) RSTD;             /* GET WORK REGS         @ZA07544*/
*FREELOOP:                          /*                       @ZA07544*/
*       RWORK1=BSPHUIW;             /* OLD CNT               @ZA07544*/
FREELOOP L     @15,AMBBUFC(,RAMB)                                  1284
         L     RWORK1,BSPHUIW(,@15)                                1284
*       RWORK2=RWORK1+ONE;          /* INCR                  @ZA07544*/
         LA    RWORK2,1                                            1285
         ALR   RWORK2,RWORK1                                       1285
*       CS(RWORK1,RWORK2,BSPHUIW);  /* BUMP COUNT            @ZA07544*/
         CS    RWORK1,@06,BSPHUIW(@15)                             1286
*       GEN(BNZ FREELOOP);          /* LOOP TILL OK          @ZA07544*/
         BNZ FREELOOP
*       RFY                                                        1288
*        (RWORK1,                                                  1288
*         RWORK2) UNRSTD;           /* FREE REGS             @ZA07544*/
*       GEN(IDARST14);              /* RESTORE REG 14        @ZA07544*/
         IDARST14
*     END;                          /* END OF WRBFR          @ZA07544*/
*   BUFCVAL=OFF;                    /* MAKE INVALID          @ZA07544*/
@RF01277 DS    0H                                                  1292
*   BUFCSEG=OFF;                    /* NOT SPANNED           @ZA07544*/
         NI    BUFCVAL(RBUFC),B'10111011'                          1292
*   RFY                                                            1293
*     R14 UNRSTD;                   /* RELEASE REG14         @ZA07544*/
*   END PURGEBFR;                   /* END PURGEBFR          @ZA07544*/
@EL00012 DS    0H                                                  1294
@EF00012 DS    0H                                                  1294
@ER00012 BR    @14                                                 1294
*                                                                  1295
*   /*****************************************************************/
*   /*                                                               */
*   /* BMEXIT - BUFFER MGR EXIT ROUTINE                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1295
*BMEXIT:                                                           1295
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1295
*                                                                  1295
BMEXIT   DS    0H                                                  1296
*/*                                                                1296
*01 FUNCTION = RESTORE R14 AND EXIT VIA IT.                        1296
*01 INPUT =    STD VSAM REGS.                                      1296
*01 OUTPUT =   R14 RESTORED FROM PLHRET1.                            */
*                                                                  1296
*   GEN REFS(HWORD4)(IDARST14);     /* RESTORE RETURN REG            */
         IDARST14
*   END BMEXIT;                     /* RETURN VIA R14                */
@EL00013 DS    0H                                                  1297
@EF00013 DS    0H                                                  1297
@ER00013 BR    @14                                                 1297
*                                                                  1298
*   /*****************************************************************/
*   /*                                                               */
*   /* INCRUCNT - INCREMENT BUFC USE COUNT                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1298
*INCRUCNT:                                                         1298
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1298
*                                                                  1298
INCRUCNT DS    0H                                                  1299
*/*                                                                1299
*01 FUNCTION = INCREMENT BUFC USE COUNT.                           1299
*01 INPUT = STD VSAM REGS                                          1299
*01 OUTPUT = BUFCUCNT IS INCREMENTED BY ONE.                         */
*                                                                  1299
*   RFY                                                            1299
*    (RWORK1,                                                      1299
*     RWORK2) RSTD;                 /* LOCK REGS                     */
*CSLOOP5:                                                          1300
*   RWORK1=BUFCRSC2;                /* PICK UP OLD                   */
CSLOOP5  L     RWORK1,BUFCRSC2(,RBUFC)                             1300
*   RWORK2=RWORK1+UCNTMSK;          /* NEW                           */
         LR    RWORK2,RWORK1                                       1301
         AL    RWORK2,UCNTMSK                                      1301
*   CS(RWORK1,RWORK2,BUFCRSC2);     /* MODIFY                        */
         CS    RWORK1,@06,BUFCRSC2(RBUFC)                          1302
*   GEN(BNZ   CSLOOP5);             /* LOOP TILL SUCCESSFUL          */
         BNZ   CSLOOP5
*   END INCRUCNT;                                                  1304
@EL00014 DS    0H                                                  1304
@EF00014 DS    0H                                                  1304
@ER00014 BR    @14                                                 1304
*                                                                  1305
*   /*****************************************************************/
*   /*                                                               */
*   /* DECRUCNT - DECREMENT BUFC USE COUNT                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1305
*DECRUCNT:                                                         1305
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1305
*                                                                  1305
DECRUCNT DS    0H                                                  1306
*/*                                                                1306
*01 FUNCTION = DECREMENT BUFCUCNT BY ONE AND, IF SHR OPTION 4      1306
*              AND SINGLE USER, OR BUFCVAL IS OFF, SET THE         1306
*              BUFC TO EMPTY STATUS.                               1306
*01 INPUT =    STD VSAM REGS.                                      1306
*01 OUTPUT =   BUFCUCNT IS DECREMENTED BY ONE AND BUFC IS SET TO   1306
*              EMPTY STATUS IF NEEDED.                               */
*                                                                  1306
*   RFY                                                            1306
*    (RWORK2,                                                      1306
*     RWORK3,                                                      1306
*     RWORK4,                                                      1306
*     RWORK5) RSTD;                 /* LOCK REGS                     */
*CSLOOP6:                                                          1307
*   LM(RWORK2,RWORK3,BUFCRSC1);     /* OLD                           */
CSLOOP6  LM    RWORK2,RWORK3,BUFCRSC1(RBUFC)                       1307
*   RWORK4=RWORK2-UCNTMSK;          /* NEW                           */
         LR    RWORK4,RWORK2                                       1308
         SL    RWORK4,UCNTMSK                                      1308
*   CS(RWORK2,RWORK4,BUFCRSC2);     /* MODIFY                        */
         CS    RWORK2,@08,BUFCRSC2(RBUFC)                          1309
*   GEN(BNZ   CSLOOP6);             /* LOOP TILL SUCCESSFUL          */
         BNZ   CSLOOP6
*   IF(AMBINBUF=ON&                 /* SHR 4 AND                     */
*       (AMBTYPE^=AMBINDEX×         /* NON-INDEX OR                  */
*       AMBSCRA=ON×                 /* A CATALOG                     */
*       AMBUCRA=ON×                 /*                               */
*       AMBCAT=ON×                  /*                               */
*       BUFCIDXL<=ONE)&             /* SEQ SET LEVEL?                */
*       BUFCUCNT=ZERO)×             /* & SINGLE USER?                */
*       BUFCVAL=OFF THEN            /* OR INVALID RBA?               */
         TM    AMBINBUF(RAMB),B'00000001'                          1311
         BNO   @GL00047                                            1311
         TM    AMBTYPE(RAMB),B'01000000'                           1311
         BNO   @GL00048                                            1311
         TM    AMBSCRA(RAMB),B'00011100'                           1311
         BNZ   @GL00048                                            1311
         CLI   BUFCIDXL(RBUFC),1                                   1311
         BH    @GL00047                                            1311
@GL00048 CLI   BUFCUCNT(RBUFC),0                                   1311
         BE    @RT01311                                            1311
@GL00047 TM    BUFCVAL(RBUFC),B'00000100'                          1311
         BNZ   @RF01311                                            1311
@RT01311 DS    0H                                                  1312
*     DO;                           /* YES, SET EMPTY                */
*       RWORK5=RWORK3;              /* OLD AMB PTR                   */
         LR    RWORK5,RWORK3                                       1313
*       RWORK2=RWORK4&VALMSK;       /* BUFCVAL = OFF                 */
         LR    RWORK2,RWORK4                                       1314
         N     RWORK2,VALMSK                                       1314
*       CDS(RWORK4,RWORK2,BUFCRSC1);/* SWAP IF NOT CHANGED           */
         CDS   RWORK4,RWORK2,BUFCRSC1(RBUFC)                       1315
*     END;                                                         1316
*   RFY                                                            1317
*    (RWORK2,                                                      1317
*     RWORK3,                                                      1317
*     RWORK4,                                                      1317
*     RWORK5) UNRSTD;               /* DROP REGS                     */
*   END DECRUCNT;                                                  1318
@EL00015 DS    0H                                                  1318
@EF00015 DS    0H                                                  1318
@ER00015 BR    @14                                                 1318
*                                                                  1319
*   /*****************************************************************/
*   /*                                                               */
*   /* UCHNRLSE - REAEASE SEARCH RIGHTS ON BSPH USE CHAIN            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1319
*UCHNRLSE:                                                         1319
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1319
*                                                                  1319
UCHNRLSE DS    0H                                                  1320
*/*                                                                1320
*01 FUNCTION = RELEASE SEARCH RIGHTS ON BUFFER USE CHAIN.          1320
*01 INPUT =    STD VSAM REGS.                                      1320
*01 OUTPUT =   SEARCH RIGHTS RELEASED.                               */
*                                                                  1320
*   RFY                                                            1320
*    (RWORK1,                                                      1320
*     RWORK2) RSTD;                 /* LOCK REGS                     */
*   RWORK1=BSPHCSRC;                /* OLD                           */
         L     @07,AMBBUFC(,RAMB)                                  1321
         L     RWORK1,BSPHCSRC(,@07)                               1321
*   RWORK2=RWORK1-ONE;              /* NEW                           */
         LR    RWORK2,RWORK1                                       1322
         BCTR  RWORK2,0                                            1322
*   CS(RWORK1,RWORK2,BSPHCSRC);     /* SWAP?                         */
         CS    RWORK1,@06,BSPHCSRC(@07)                            1323
*   GEN(BNZ UCHNRLSE);              /* LOOP TILL SUCCESSFUL          */
         BNZ UCHNRLSE
*   PLHRESR1=ZERO;                  /* IND NOT USING RSC             */
         SLR   @07,@07                                             1325
         ST    @07,PLHRESR1(,RPLH)                                 1325
*   RFY                                                            1326
*    (RWORK1,                                                      1326
*     RWORK2) UNRSTD;               /* DROP REGS                     */
*   END UCHNRLSE;                                                  1327
@EL00016 DS    0H                                                  1327
@EF00016 DS    0H                                                  1327
@ER00016 BR    @14                                                 1327
@PB00016 DS    0H                                                  1328
*   GEN(IDAPATCH);                  /* DEFINE PATCH                  */
         IDAPATCH
*   END IDA019RY                    /* END BFR MGR                   */
*                                                                  1329
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (LCGPLSSW)                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDACIDF )                                       */
*/*%INCLUDE SYSLIB  (IDARDF  )                                       */
*/*%INCLUDE SYSLIB  (IDAIRD  )                                       */
*/*%INCLUDE SYSLIB  (IDAIXSPL)                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IDADIWA )                                       */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBXN)                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDABSPH )                                       */
*/*%INCLUDE SYSLIB  (IDAERMSG)                                       */
*                                                                  1329
*       ;                                                          1329
@EL00001 DS    0H                                                  1329
@EF00001 DS    0H                                                  1329
@ER00001 BR    @14                                                 1329
@DATA    DS    0H
@CH01401 DC    H'128'
@DATD    DSECT
         DS    0F
IDA019RY CSECT
         DS    0F
@CF00158 DC    F'0'
@CF00047 DC    F'1'
@CF00156 DC    F'4'
@CF00493 DC    F'7'
@CF00036 DC    F'8'
@CF00065 DC    F'12'
@CF00063 DC    F'16'
@CF00172 DC    F'100'
@DATD    DSECT
         DS    0D
IDA019RY CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00148 DC    V(IDA019R3)
@CV00149 DC    V(IDA019R5)
@CV00150 DC    V(IDAWAIT)
@CV00151 DC    V(IDAFRBA)
@CV00152 DC    V(IDADRQ)
@CV00153 DC    V(IDATJXIT)
@CV00154 DC    V(IDAEXEX)
         DS    0D
SHIFTBIT DC    XL4'80000000'
ALLBITS  DC    XL4'FFFFFFFF'
         ORG   ALLBITS
ZROMSK   DS    BL1
         ORG   ALLBITS+4
UCHNLOCK DC    XL4'40000000'
UCNTMSK  DC    XL4'01000000'
VALMSK   DC    XL4'FFBBFFFF'
EXCLMSK  DC    XL4'00020000'
UCNTMSK1 DC    XL4'000011C0'
UCNTMSK2 DC    XL4'00FFFFFF'
BSYWMSK  DC    XL4'00000010'
HWORD4   DC    H'4'
@DATD    DSECT
TWELVE   EQU   12                       OFFSET TO REGS
@DATD    DSECT
*                                                          /*@X04SVLC*/
RDFCTNUA EQU   X'40'                    COMPLEX RDF INDICATOR
RDFCTNUX EQU   X'FF'-RDFCTNUA           RESET COMPLEX MASK
RDFREPLA EQU   X'08'                    COUNT RDF INDICATOR
RDFREPLX EQU   X'FF'-RDFREPLA           RESET COUNT MASK
RDFEMPTI EQU   X'04'                    EMPTY RECORD       /*@X04SVLC*/
RDFLEN   EQU   3                        LENGTH OF RDF
RDFLLOFF EQU   1                        OFFSET WITHIN RDF TO LL
RDFSGLR  EQU   X'00'                   MASK FOR SINGLE RECORD RDF
RDFGRP   EQU   RDFCTNUA                 MASK FOR LL RDF OF A GROUP RDF
RDFCNT   EQU   RDFREPLA                 MASK FOR COUNT RDF
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019RY CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RRPL     EQU   @01
I        EQU   @05
RWORK0   EQU   @00
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
RPARM1   EQU   @12
R14      EQU   @14
R15      EQU   @15
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
IDAAMB   EQU   0
AMBBUFC  EQU   IDAAMB+8
AMBPH    EQU   IDAAMB+12
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBTYPE  EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBINBUF EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBCAT   EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBDFR   EQU   AMBAFLG
AMBEXEX  EQU   IDAAMB+100
IOECB    EQU   0
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCUCNT EQU   BUFCAVL
BUFCFLG1 EQU   IDABUFC+1
BUFCSEG  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCBSYR EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCPLH  EQU   IDABUFC+4
BUFCAMB  EQU   BUFCPLH
BUFCDDDD EQU   IDABUFC+8
BUFCORBA EQU   IDABUFC+12
BUFCBAD  EQU   IDABUFC+20
BUFCINV  EQU   IDABUFC+28
BUFCIDXL EQU   IDABUFC+36
BUFXIRBA EQU   IDABUFC+40
BUFCHAIN EQU   IDABUFC+48
BUFCMDBT EQU   IDABUFC+52
BUFCUCUP EQU   IDABUFC+56
BUFCUCDN EQU   IDABUFC+60
SCHRBA   EQU   0
SCHLRBA  EQU   SCHRBA
SCHHRBA  EQU   SCHRBA+4
USERAREA EQU   0
USERPTR  EQU   0
IDACIDF  EQU   0
CIDFLL   EQU   IDACIDF+2
IDARDF   EQU   0
RDFRBYTE EQU   IDARDF
RDFSEG   EQU   RDFRBYTE
RDFNOT1  EQU   RDFSEG
RDF1ST   EQU   RDFSEG
IDADATA  EQU   0
IDAKEY   EQU   0
IDAIXH   EQU   0
IDAIBFLP EQU   0
IBFLP3   EQU   IDAIBFLP+2
IBFLP2   EQU   IBFLP3
IDASELL  EQU   0
IDAIXK   EQU   0
IDAIXSPL EQU   0
IXSILN   EQU   IDAIXSPL+13
IXSBFLG  EQU   IDAIXSPL+17
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDPRF   EQU   IDAARDB+28
IDADIWA  EQU   0
DIWFLG1  EQU   IDADIWA+4
DIWCAS   EQU   DIWFLG1
DIWSHIFT EQU   DIWFLG1
DIWFLG2  EQU   IDADIWA+5
DIWLRBA  EQU   IDADIWA+8
DIWHRBA  EQU   IDADIWA+12
DIWPLH   EQU   IDADIWA+16
DIWBUFC  EQU   IDADIWA+20
DIWSAVE  EQU   IDADIWA+28
DIWINRBA EQU   IDADIWA+52
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLSTRID EQU   RPLCOMN+18
RPLDACB  EQU   RPLCOMN+24
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLLOC   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLKEY   EQU   RPLOPT2
RPLADR   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLBUFL  EQU   RPLCOMN+52
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLDDDD  EQU   RPLRBAR+4
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLEMLEN EQU   RPLCOMN+70
RPLERMSA EQU   RPLCOMN+72
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBINFL1 EQU   ACBINFLG
ACBVVIC  EQU   ACBINFL1
ACBINFL2 EQU   ACBINFLG+1
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMBXN EQU   0
AMBXEOV  EQU   IDAAMBXN
AMBXCSWD EQU   IDAAMBXN+16
AMBXRDCT EQU   AMBXCSWD+2
AMBXBM2S EQU   IDAAMBXN+20
IDAIOMBX EQU   0
IOMXFLGS EQU   IDAIOMBX+1
IOMXPDET EQU   IDAIOMBX+4
IOMXRECB EQU   IDAIOMBX+20
IOMXECB  EQU   IOMXRECB
IOMXRSLT EQU   IOMXECB
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLQ2   EQU   IDAAMBL+31
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLVVIC EQU   AMBLFLG1
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDWCK   EQU   AMDATTR
AMDSPAN  EQU   AMDATTR
AMDNEST  EQU   IDAAMDSB+4
AMDCINV  EQU   IDAAMDSB+20
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
IDAPLHDR EQU   0
PLHDRREQ EQU   IDAPLHDR+4
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHRDEXC EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHSR    EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHEFLGS EQU   IDAPLH+4
PLHINVAL EQU   PLHEFLGS
PLHFLG3  EQU   IDAPLH+6
PLHAFLGS EQU   IDAPLH+7
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJRNLL EQU   IDAPLH+32
PLHJNRBA EQU   IDAPLH+36
PLHJCODE EQU   IDAPLH+40
PLHRSCS  EQU   IDAPLH+43
PLHDBUFC EQU   IDAPLH+52
PLHDIOB  EQU   IDAPLH+76
PLHCHAIN EQU   IDAPLH+112
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHNRBA  EQU   IDAPLH+184
PLHIBUFC EQU   IDAPLH+188
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHKEYPT EQU   IDAPLH+248
PLHDRRSC EQU   IDAPLH+252
PLHDRMSK EQU   IDAPLH+264
PLHTMRPL EQU   IDAPLH+265
PLHEND   EQU   IDAPLH+280
IDABSPH  EQU   0
BSPHFLG1 EQU   IDABSPH+1
BSPHNBSP EQU   IDABSPH+8
BSPHBFNO EQU   IDABSPH+12
BSPHBUFC EQU   IDABSPH+16
BSPHMDBT EQU   IDABSPH+20
BSPHCSRC EQU   IDABSPH+28
BSPHFLG2 EQU   BSPHCSRC
BSPHPCUC EQU   BSPHFLG2
BSPHPSUC EQU   BSPHCSRC+2
BSPHRDS  EQU   IDABSPH+36
BSPHFND  EQU   IDABSPH+40
BSPHUIW  EQU   IDABSPH+44
BSPHNUIW EQU   IDABSPH+48
BSPHUTOP EQU   IDABSPH+52
BSPHUBTM EQU   IDABSPH+56
BSPH1ST  EQU   IDABSPH+60
IDAERMSG EQU   0
ERBASE   EQU   IDAERMSG
ERLGTH   EQU   ERBASE
ERMBFRA  EQU   ERBASE+8
ERDEVD   EQU   ERBASE+107
PLHKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
RPLADDR  EQU   0
BUFCRSC2 EQU   IDABUFC
BSPHRSC2 EQU   BSPHBFNO
GRBRSC1  EQU   AMBXBM2S
PLHEXTEN EQU   PLHEND
PLHRESR1 EQU   PLHEXTEN
PLHBMWRK EQU   PLHEXTEN+5
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSV1 EQU   PLHEXTEN+8
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV5 EQU   PLHEXTEN+24
BMSV1    EQU   PLHBMSV1
DBMCNTR  EQU   BMSV1
DBMAMB   EQU   BMSV1+1
BMSV2    EQU   PLHBMSV2
DBMLRUCT EQU   BMSV2
DBMBSPH  EQU   BMSV2+1
BMSV3    EQU   PLHBMSV3
DBMTRNID EQU   BMSV3
BMSV4    EQU   PLHBMSV4
DBMMASK  EQU   BMSV4
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00070 EQU   PLHEXTEN+4
ERDAAM   EQU   ERDEVD+15
ERDACOM  EQU   ERDEVD+14
ERDASEEK EQU   ERDEVD
COMMA8   EQU   ERBASE+106
ERDESC   EQU   ERBASE+91
COMMA7   EQU   ERBASE+90
EROPER   EQU   ERBASE+84
COMMA6   EQU   ERBASE+83
ERDDNM   EQU   ERBASE+75
COMMA5   EQU   ERBASE+74
ERUNTYPE EQU   ERBASE+72
COMMA4   EQU   ERBASE+71
ERUNIT   EQU   ERBASE+68
COMMA3   EQU   ERBASE+67
ERSTEPNM EQU   ERBASE+59
COMMA2   EQU   ERBASE+58
ERJOBNM  EQU   ERBASE+50
COMMA1   EQU   ERBASE+49
ERMVOL   EQU   ERBASE+43
COMMA9   EQU   ERBASE+42
ERMDSID  EQU   ERBASE+36
COMMA05  EQU   ERBASE+35
ERRBA    EQU   ERBASE+27
COMMA0   EQU   ERBASE+26
ERTIME   EQU   ERBASE+18
ERCOMMA  EQU   ERBASE+17
ERDATE   EQU   ERBASE+12
ERMZERO2 EQU   ERLGTH+6
ERMLL2   EQU   ERLGTH+4
ERMZERO1 EQU   ERLGTH+2
ERMLL1   EQU   ERLGTH
BSPHCPLH EQU   IDABSPH+32
@NM00071 EQU   BSPHCSRC+1
BSPHAPRT EQU   BSPHFLG2
BSPHBSZ  EQU   IDABSPH+24
BSPHERCT EQU   IDABSPH+14
BSPHNM   EQU   IDABSPH+4
BSPHLEN  EQU   IDABSPH+2
BSPHBFRF EQU   BSPHFLG1
BSPHIOBF EQU   BSPHFLG1
BSPHID   EQU   IDABSPH
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00069 EQU   IDAPLH+266
@NM00068 EQU   PLHTMRPL
PLHTMIOB EQU   PLHTMRPL
PLHTMINX EQU   PLHTMRPL
PLHTMDTA EQU   PLHTMRPL
PLHTMDIW EQU   PLHTMRPL
PLHTMBUF EQU   PLHTMRPL
PLHTERM  EQU   PLHTMRPL
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00067 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHRBUFC EQU   IDAPLH+192
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00066 EQU   IDAPLH+172
@NM00065 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHAMB   EQU   IDAPLH+108
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHRDFP  EQU   IDAPLH+68
PLHFSP   EQU   IDAPLH+64
PLHRECP  EQU   IDAPLH+60
PLHNBUFC EQU   IDAPLH+56
PLHLRECL EQU   IDAPLH+48
PLHARDB  EQU   IDAPLH+44
@NM00064 EQU   PLHRSCS
PLHDBPER EQU   PLHRSCS
PLHDSERR EQU   PLHRSCS
PLHASYER EQU   PLHRSCS
@NM00063 EQU   PLHRSCS
PLHBUFHD EQU   PLHRSCS
PLHINEOV EQU   PLHRSCS
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00062 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
PLHASYRQ EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHASKBF EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00061 EQU   IDAAMDSB+41
@NM00060 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDKEYLN EQU   IDAAMDSB+8
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLIX   EQU   IDAAMBL+56
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00059 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00058 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00057 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLSDS  EQU   AMBLVVIC
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00056 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00055 EQU   AMBLQ2
AMBLCBIC EQU   AMBLQ2
@NM00054 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00053 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
IOMXRBPT EQU   IOMXECB+1
IOMXIOCC EQU   IOMXRSLT
IOMXPOST EQU   IOMXRSLT
IOMXWAIT EQU   IOMXECB
IOMXR14  EQU   IDAIOMBX+16
IOMXRPL  EQU   IOMXPDET+8
IOMXR13S EQU   IOMXPDET+4
@NM00052 EQU   IOMXPDET+2
IOMXBFLG EQU   IOMXPDET
@NM00051 EQU   IDAIOMBX+2
@NM00050 EQU   IOMXFLGS
IOMXSCAN EQU   IOMXFLGS
IOMXEOVW EQU   IOMXFLGS
IOMXUSE  EQU   IOMXFLGS
IOMXLOCK EQU   IDAIOMBX
@NM00049 EQU   AMBXCSWD
AMBXECB  EQU   IDAAMBXN+12
AMBXASCB EQU   IDAAMBXN+8
@NM00048 EQU   AMBXEOV+7
AMBXEVRC EQU   AMBXEOV+6
AMBXEOVR EQU   AMBXEOV+5
AMBXRSC  EQU   AMBXEOV+4
AMBXEVPT EQU   AMBXEOV
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00047 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00046 EQU   ACBINFL2
ACBCBIC  EQU   ACBINFL2
@NM00045 EQU   ACBINFL2
ACBBYPSS EQU   ACBINFL1
ACBSDS   EQU   ACBVVIC
ACBUCRA  EQU   ACBINFL1
ACBSCRA  EQU   ACBINFL1
ACBCAT   EQU   ACBINFL1
ACBIJRQE EQU   ACBINFL1
ACBJEPS  EQU   ACBINFL1
@NM00044 EQU   ACBINFL1
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00043 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00042 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00041 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00040 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00039 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00038 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00037 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00036 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00035 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
@NM00033 EQU   IDABUFDR+16
BUFDBUFC EQU   IDABUFDR+12
@NM00032 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00031 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
@NM00030 EQU   RPLRBAR+3
@NM00029 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00028 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
@NM00027 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
@NM00026 EQU   IDADIWA+92
@NM00025 EQU   IDADIWA+88
@NM00024 EQU   IDADIWA+84
@NM00023 EQU   IDADIWA+80
@NM00022 EQU   IDADIWA+76
@NM00021 EQU   IDADIWA+72
@NM00020 EQU   IDADIWA+68
@NM00019 EQU   IDADIWA+64
@NM00018 EQU   IDADIWA+60
@NM00017 EQU   IDADIWA+56
DIWRKCT  EQU   IDADIWA+48
DIWSAVE5 EQU   DIWSAVE+16
DIWSAVE4 EQU   DIWSAVE+12
DIWSAVE3 EQU   DIWSAVE+8
DIWSAVE2 EQU   DIWSAVE+4
DIWSAVE1 EQU   DIWSAVE
DIWSPLTP EQU   IDADIWA+24
@NM00016 EQU   IDADIWA+6
DIWFSPF  EQU   DIWFLG2
DIW1ST   EQU   DIWFLG1
DIWNOT1  EQU   DIWFLG1
DIWGSPC  EQU   DIWFLG1
DIWEOKR  EQU   DIWFLG1
DIWPFERR EQU   DIWFLG1
DIWCISPL EQU   DIWFLG1
DIWLEN   EQU   IDADIWA+2
DIWATV   EQU   IDADIWA+1
DIWID    EQU   IDADIWA
ARDKEYS  EQU   IDAARDB+29
@NM00015 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDERBA  EQU   IDAARDB+16
ARDHRBA  EQU   IDAARDB+12
ARDHKRBA EQU   IDAARDB+8
ARDNPTR  EQU   IDAARDB+4
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDEOD   EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
IXSLEP   EQU   IDAIXSPL+28
IXSSEP   EQU   IDAIXSPL+24
IXSHEP   EQU   IDAIXSPL+20
IXSPEC   EQU   IDAIXSPL+19
IXSEKON  EQU   IDAIXSPL+18
@NM00014 EQU   IXSBFLG
IXSLELV  EQU   IXSBFLG
IXSSSRH  EQU   IXSBFLG
IXSNOSR  EQU   IDAIXSPL+16
IXSKLEN  EQU   IDAIXSPL+14
IXSTLN   EQU   IDAIXSPL+12
IXSARG   EQU   IDAIXSPL+8
IXSBUFC  EQU   IDAIXSPL+4
IXSSTRBA EQU   IDAIXSPL
IXKEY    EQU   IDAIXK
IXSELL   EQU   IDASELL
IBFLP1   EQU   IBFLP2
IBFLPL   EQU   IDAIBFLP+1
IBFLPF   EQU   IDAIBFLP
IXHSEO   EQU   IDAIXH+22
IXHLEO   EQU   IDAIXH+20
IXHFSO   EQU   IDAIXH+18
IXHFLGS  EQU   IDAIXH+17
IXHLV    EQU   IDAIXH+16
IXHXX    EQU   IDAIXH+12
IXHHP    EQU   IDAIXH+8
IXHBRBA  EQU   IDAIXH+4
IXHPTLS  EQU   IDAIXH+3
IXHFLPLN EQU   IDAIXH+2
IXHLL    EQU   IDAIXH
KEY      EQU   IDAKEY
AMDATA   EQU   IDADATA
RDFLL    EQU   IDARDF+1
RDFEMPTY EQU   RDFRBYTE
RDFREPL  EQU   RDFRBYTE
RDFCTNU  EQU   RDFRBYTE
RDFTYPE  EQU   RDFRBYTE
@NM00013 EQU   CIDFLL
CIDFBUSY EQU   CIDFLL
CIDFOSET EQU   IDACIDF
BUFCEND  EQU   IDABUFC+64
BUFXORBA EQU   IDABUFC+44
BUFCNXT2 EQU   IDABUFC+37
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCCPA  EQU   IDABUFC+16
@NM00034 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
IOECBPT  EQU   IOECB
IOECBWT  EQU   IOECB
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00012 EQU   AMBCSWD1+1
@NM00011 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBLSR   EQU   AMBAFLG
@NM00010 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00009 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00008 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00007 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBSDS   EQU   AMBINFL
AMBUPX   EQU   AMBINFL
@NM00006 EQU   AMBINFL
@NM00005 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00004 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00003 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00002 EQU   AMBDSORG
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00001 EQU   AMBFLG0
AMBSWSP  EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00204 EQU   @EL00001
@RC00218 EQU   @RC00216
@RF00460 EQU   GREXCLER
@RT00495 EQU   GREXCLER
@RC00443 EQU   @EL00003
@RF00605 EQU   @RC00599
@RT00721 EQU   WRTLRU
@RT00747 EQU   INCRBUFC
@RF00755 EQU   WRTRST1
@RC00746 EQU   @RC00745
@RF00786 EQU   WRTEXIT
@RT00831 EQU   WRTEXIT
@RT00859 EQU   WRTEXIT
@RC00898 EQU   @RC00896
@RT00984 EQU   @EL00001
@RF01135 EQU   @EL00007
@RF01194 EQU   GSTOVER1
@RC01158 EQU   @RC01148
@RF01311 EQU   @EL00015
@PB00015 EQU   @PB00016
@RC00454 EQU   @RC00443
@RC00901 EQU   @RC00898
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@ENDDATA EQU   *
         END   IDA019RY,(C'PLS1750',0701,78180)
