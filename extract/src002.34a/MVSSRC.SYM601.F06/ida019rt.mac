         TITLE 'IDA019RT--SPANNED RECORD DATA INSERT                   *
                        '
IDA019RT CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'IDA019RT  78.172'                                 0001
IDADARTV DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00429-IDADARTV)
         ENTRY IDADARTV
IDASPNPT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00568-IDASPNPT)
         ENTRY IDASPNPT
IDAJRNSR DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00599-IDAJRNSR)
         ENTRY IDAJRNSR
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
         IDASVR14
*   IF AMDDST='0'B THEN             /* IF ESDS               @ZA07544*/
         L     @10,AMBDSB(,RAMB)                                   0162
         TM    AMDDST(@10),B'10000000'                             0162
         BZ    @RT00162                                            0162
*     GO TO HAVDIWA;                /* AVOID DIWA                    */
*   IF AMBLSR=ON×AMBGSR=ON THEN     /* SHR RESOURSES         @ZA02289*/
         TM    AMBLSR(RAMB),B'01100000'                            0164
         BZ    @RF00164                                            0164
*     DO;                           /* YES                   @ZA02289*/
*       RBUFC=PLHIBUFC;             /* PNT TO SEQ SET        @ZA02289*/
         L     RBUFC,PLHIBUFC(,RPLH)                               0166
*       IF RBUFC^=ZERO THEN         /* OWNED BY PLH          @ZA02289*/
         LTR   RBUFC,RBUFC                                         0167
         BZ    @RF00167                                            0167
*I01:                                                              0168
*         DO;                       /* IDACALL(IDAFREEB)             */
I01      DS    0H                                                  0169
*           CALL IDAFREEB;          /* EXIT TO IDAFREEB              */
         L     @15,@CV01006                                        0169
         BALR  @14,@15                                             0169
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I01;                  /* YES, FREE IT          @ZA02289*/
*     END;                          /*                       @ZA02289*/
@RF00167 DS    0H                                                  0176
*LOCKDIWA:                                                         0176
*   RPARM1=ADDR(DIWATV);            /* POINT TO LOCK BYTE            */
@RF00164 DS    0H                                                  0176
LOCKDIWA L     RPARM1,AMBIWA(,RAMB)                                0176
         LA    RPARM1,DIWATV(,RPARM1)                              0176
*   GEN(TS  0(RPARM1));             /* TEST AND SET                  */
         TS  0(RPARM1)
*   GEN FLOWS(HAVDIWA)(BZ  HAVDIWA);/* OBTAINED DIWA                 */
         BZ  HAVDIWA
*   RESPECIFY                                                      0179
*     RWORK0 RSTD;                  /*                               */
*   RWORK0=DEFR0;                   /* DATA INSERT REQUEST           */
         SLR   RWORK0,RWORK0                                       0180
*I02:                                                              0181
*   DO;                             /* IDACALL(IDADRQ)               */
I02      DS    0H                                                  0182
*     CALL IDADRQ;                  /* EXIT TO IDADRQ                */
         L     @15,@CV01005                                        0182
         BALR  @14,@15                                             0182
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I02;                        /*                               */
*   GO TO LOCKDIWA;                 /* TRY AGAIN                     */
         B     LOCKDIWA                                            0188
*HAVDIWA:                           /* DIWA OBTAINED                 */
*   RESPECIFY                                                      0189
*     RWORK0 UNRSTD;                /*                               */
HAVDIWA  DS    0H                                                  0190
*   DIWPLH=RPLH;                    /* IDENTIFY LOCKING PLH          */
         L     @10,AMBIWA(,RAMB)                                   0190
         ST    RPLH,DIWPLH(,@10)                                   0190
*   PLHSAVE3=AMDCINV-LENGTH(IDACIDF)/* COMPUTE MAX. USABLE           */
*       -TWO*LENGTH(IDARDF);        /* SPACE IN A CI                 */
         L     @10,AMBDSB(,RAMB)                                   0191
         L     @10,AMDCINV(,@10)                                   0191
         SL    @10,@CF00314                                        0191
         ST    @10,PLHSAVE3(,RPLH)                                 0191
*   IF RPLRLEN//PLHSAVE3^=ZERO THEN /* IF RECORD PARTIALLY           */
         L     @06,RPLRLEN(,RRPL)                                  0192
         SRDA  @06,32                                              0192
         DR    @06,@10                                             0192
         LTR   @06,@06                                             0192
         BZ    @RF00192                                            0192
*     PLHNOSEG=ONE;                 /* FILLS LAST CI, USE 1          */
         MVC   PLHNOSEG(2,RPLH),@CH00053                           0193
*   ELSE                            /* OTHERWISE, START WITH         */
*     PLHNOSEG=ZERO;                /* SEG. COUNT OF ZERO            */
         B     @RC00192                                            0194
@RF00192 SLR   @10,@10                                             0194
         STH   @10,PLHNOSEG(,RPLH)                                 0194
*   PLHNOSEG=PLHNOSEG+              /* COMPUTE EXACT NUMBER OF       */
*       (RPLRLEN/PLHSAVE3);         /* SEGMENTS REQUIRED             */
@RC00192 L     @07,RPLRLEN(,RRPL)                                  0195
         SLR   @06,@06                                             0195
         D     @06,PLHSAVE3(,RPLH)                                 0195
         AH    @07,PLHNOSEG(,RPLH)                                 0195
         STH   @07,PLHNOSEG(,RPLH)                                 0195
*   IF AMBCREAT=ON×AMDDST='0'B THEN /* CREATE MODE OR ESDS           */
         TM    AMBCREAT(RAMB),B'10000000'                          0196
         BO    @RT00196                                            0196
         L     @10,AMBDSB(,RAMB)                                   0196
         TM    AMDDST(@10),B'10000000'                             0196
         BNZ   @RF00196                                            0196
@RT00196 DS    0H                                                  0197
*     DO;                           /* YES                           */
*       IF AMBCREAT=OFF&RPLSEQ=OFF THEN/* IF NOT CREATE & SEQ        */
         TM    AMBCREAT(RAMB),B'10000000'                          0198
         BNZ   @RF00198                                            0198
         TM    RPLSEQ(RRPL),B'00100000'                            0198
         BNZ   @RF00198                                            0198
*         DO;                       /* THEN ADD BUFFERS TO           */
*           RPARM1=PLHNOSEG;        /* TAKE CARE OF THIS RECD.       */
         LH    RPARM1,PLHNOSEG(,RPLH)                              0200
*I03:                                                              0201
*           DO;                     /* IDACALL(IDAABF)               */
I03      DS    0H                                                  0202
*             CALL IDAABF;          /* EXIT TO IDAABF                */
         L     @15,@CV01003                                        0202
         BALR  @14,@15                                             0202
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I03;                /*                               */
*         END;                      /*                               */
*       RESPECIFY                                                  0209
*        (RWORK2,                                                  0209
*         RWORK3,                                                  0209
*         RWORK4,                                                  0209
*         RWORK5) RSTD;             /*                               */
@RF00198 DS    0H                                                  0210
*       DO PLHSRCSG=ONE TO PLHNOSEG;/* LOOP COVERS ALL SEGS.         */
         LA    @10,1                                               0210
         B     @DE00210                                            0210
@DL00210 DS    0H                                                  0211
*         IF PLHRECP^=BUFCBAD THEN  /* IF FIRST BUFFER IS EMPTY DONT
*                                      CALL SPLT                     */
         L     @10,PLHDBUFC(,RPLH)                                 0211
         CLC   PLHRECP(4,RPLH),BUFCBAD(@10)                        0211
         BE    @RF00211                                            0211
*           DO;                     /*                               */
*I04:                                                              0213
*             DO;                   /* IDACALL(IDA019SA)             */
I04      DS    0H                                                  0214
*               CALL IDA019SA;      /* EXIT TO IDA019SA              */
         L     @15,@CV01015                                        0214
         BALR  @14,@15                                             0214
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I04;              /*                               */
*             IF RPLERREG^=ZERO THEN/* ERROR                         */
         CLI   RPLERREG(RRPL),0                                    0220
         BE    @RF00220                                            0220
*               DO;                 /* YES                           */
*                 IF AMDDST='1'B THEN/* IF KSDS                      */
         L     @10,AMBDSB(,RAMB)                                   0222
         TM    AMDDST(@10),B'10000000'                             0222
         BNO   @RF00222                                            0222
*                   DIWATV=ZERO;    /* FREE WORK AREA                */
         L     @10,AMBIWA(,RAMB)                                   0223
         MVI   DIWATV(@10),X'00'                                   0223
*                 CALL EXIT;        /* YES, LEAVE                    */
@RF00222 BAL   @14,EXIT                                            0224
*               END;                /*                               */
*           END;                    /*                               */
@RF00220 DS    0H                                                  0227
*         RWORK4=RPLAREA+((PLHSRCSG-/* COMPUTE ADDRESS IN USER       */
*             ONE)*PLHSAVE3);       /* AREA FROM WHICH TO MOVE       */
@RF00211 L     @10,RPLAREA(,RRPL)                                  0227
         LH    @15,PLHSRCSG(,RPLH)                                 0227
         BCTR  @15,0                                               0227
         L     @05,PLHSAVE3(,RPLH)                                 0227
         MR    @14,@05                                             0227
         ALR   @15,@10                                             0227
         LR    RWORK4,@15                                          0227
*         RWORK2=PLHRECP;           /* SET 'TO' ADDRESS              */
         L     RWORK2,PLHRECP(,RPLH)                               0228
*         RWORK3=(RPLAREA+RPLRLEN)- /* COMPUTE REMAINING BYTES       */
*             RWORK4;               /* TO BE MOVED                   */
         AL    @10,RPLRLEN(,RRPL)                                  0229
         SLR   @10,RWORK4                                          0229
         LR    RWORK3,@10                                          0229
*         IF RWORK3>PLHSAVE3 THEN   /* REMAINDER MORE THAN CI        */
         CR    RWORK3,@05                                          0230
         BNH   @RF00230                                            0230
*           RWORK3=PLHSAVE3;        /* YES, MOVE ONE CI FULL         */
         LR    RWORK3,@05                                          0231
*         RWORK5=RWORK3;            /*                               */
@RF00230 LR    RWORK5,RWORK3                                       0232
*         PLHRECP=RWORK2+RWORK3;    /* SET POSITION                  */
         LR    @10,RWORK2                                          0233
         ALR   @10,RWORK3                                          0233
         ST    @10,PLHRECP(,RPLH)                                  0233
*         PLHRDFP->CIDFLL=PLHRDFP->CIDFLL-/* BUILD PROPER FREE       */
*             (RWORK3+TWO*LENGTH(IDARDF));/* SPACE LENGTH            */
         L     @10,PLHRDFP(,RPLH)                                  0234
         LA    @05,6                                               0234
         ALR   @05,RWORK3                                          0234
         LCR   @05,@05                                             0234
         AH    @05,CIDFLL(,@10)                                    0234
         STH   @05,CIDFLL(,@10)                                    0234
*         PLHRDFP->CIDFOSET=RWORK3; /* BUILD FREE SPACE OFFSET       */
         STH   RWORK3,CIDFOSET(,@10)                               0235
*         PLHRDFP=PLHRDFP-LENGTH(IDARDF);/* MOVE RDF POINTER FROM  0236
*                                      CIDF TO RDF                   */
         LA    @05,3                                               0236
         SLR   @10,@05                                             0236
         ST    @10,PLHRDFP(,RPLH)                                  0236
*         PLHSAVE4=PLHRDFP-LENGTH(IDARDF);/* ESTABLISH ADDRESSABILITY
*                                      TO SEGMENT ID RDF             */
         LCR   @05,@05                                             0237
         ALR   @05,@10                                             0237
         ST    @05,PLHSAVE4(,RPLH)                                 0237
*         PLHRDFP->RDFLL=RWORK3;    /* PUT SEGMENT LL IN RDF         */
         STCM  RWORK3,3,RDFLL(@10)                                 0238
*         PLHRDFP->RDFCTNU=ON;      /* SET OVERHEAD BIT IN RDF       */
         OI    RDFCTNU(@10),B'01000000'                            0239
*         PLHSAVE4->RDFREPL=ON;     /* SAME FOR ID RDF               */
         OI    RDFREPL(@05),B'00001000'                            0240
*         IF PLHSRCSG^=PLHNOSEG THEN/* IS THIS THE LAST SEG.         */
         CLC   PLHSRCSG(2,RPLH),PLHNOSEG(RPLH)                     0241
         BE    @RF00241                                            0241
*           DO;                     /* NO                            */
*             PLHRDFP->RDF1ST=ON;   /* SET SECOND BIT IN RDF         */
         OI    RDF1ST(@10),B'00010000'                             0243
*             PLHSAVE4->RDF1ST=ON;  /* SAME FOR ID RDF               */
         OI    RDF1ST(@05),B'00010000'                             0244
*           END;                    /*                               */
*         IF PLHSRCSG^=ONE THEN     /* IS THIS THE FIRST SEG.        */
@RF00241 CLC   PLHSRCSG(2,RPLH),@CH00053                           0246
         BE    @RF00246                                            0246
*           DO;                     /* NO                            */
*             PLHRDFP->RDFNOT1=ON;  /* SET 1ST BIT ON                */
         L     @10,PLHRDFP(,RPLH)                                  0248
         OI    RDFNOT1(@10),B'00100000'                            0248
*             PLHSAVE4->RDFNOT1=ON; /* SAME FOR ID RDF               */
         L     @10,PLHSAVE4(,RPLH)                                 0249
         OI    RDFNOT1(@10),B'00100000'                            0249
*           END;                    /*                               */
*         GEN(MVCL  RWORK2,RWORK4); /* MOVE SEGMENT TO BUFFER        */
@RF00246 DS    0H                                                  0251
         MVCL  RWORK2,RWORK4
*         IF AMBJRN=ON THEN         /* JOURNAL EXIT REQUIRED         */
         TM    AMBJRN(RAMB),B'00000010'                            0252
         BNO   @RF00252                                            0252
*           DO;                     /* YES                           */
*             RBUFC=PLHDBUFC;       /* SET RBUFC                     */
         L     RBUFC,PLHDBUFC(,RPLH)                               0254
*             CALL IDAJRNSR;        /* GO TAKE JOURNAL EXIT          */
         L     @15,@CA01061                                        0255
         BALR  @14,@15                                             0255
*           END;                    /*                               */
*       END;                        /*                               */
@RF00252 LA    @10,1                                               0257
         AH    @10,PLHSRCSG(,RPLH)                                 0257
@DE00210 STH   @10,PLHSRCSG(,RPLH)                                 0257
         CH    @10,PLHNOSEG(,RPLH)                                 0257
         BNH   @DL00210                                            0257
*       RESPECIFY                                                  0258
*        (RWORK2,                                                  0258
*         RWORK3,                                                  0258
*         RWORK4,                                                  0258
*         RWORK5) UNRSTD;           /*                               */
*       IF AMDDST='1'B THEN         /* IF KSDS                       */
         L     @10,AMBDSB(,RAMB)                                   0259
         TM    AMDDST(@10),B'10000000'                             0259
         BNO   @RF00259                                            0259
*         DIWATV=ZERO;              /* FREE WORK AREA                */
         L     @10,AMBIWA(,RAMB)                                   0260
         MVI   DIWATV(@10),X'00'                                   0260
*       PLHLRECL=RPLRLEN;           /* SET LRECL IN PLH              */
@RF00259 L     @10,RPLRLEN(,RRPL)                                  0261
         ST    @10,PLHLRECL(,RPLH)                                 0261
*       RPLDDDD=BUFXIRBA;           /* SET RBA IN RPL                */
         L     @10,PLHDBUFC(,RPLH)                                 0262
         L     @10,BUFXIRBA(,@10)                                  0262
         ST    @10,RPLDDDD(,RRPL)                                  0262
*       PLHFSP=PLHRECP;             /* SET FREESPACE POINTER         */
         L     @10,PLHRECP(,RPLH)                                  0263
         ST    @10,PLHFSP(,RPLH)                                   0263
*       CALL EXIT;                  /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0264
*     END;                          /* END CREATE OR ESDS            */
*   DO;                             /* INSERT SPANNED RECORD         */
@RF00196 DS    0H                                                  0267
*     RBUFC=PLHIBUFC;               /* POINT TO SEQ SET BUFC         */
         L     RBUFC,PLHIBUFC(,RPLH)                               0267
*     IF RBUFC=ZERO×RBUFC->BUFCRRD=ON×/* MUST SEQ SET BE             */
*         RBUFC->BUFCEXC=OFF THEN   /* REREAD                        */
         LTR   RBUFC,RBUFC                                         0268
         BZ    @RT00268                                            0268
         TM    BUFCRRD(RBUFC),B'00100000'                          0268
         BO    @RT00268                                            0268
         TM    BUFCEXC(RBUFC),B'00000010'                          0268
         BNZ   @RF00268                                            0268
@RT00268 DS    0H                                                  0269
*       DO;                         /* YES                           */
*         RAMB=AMBLIX;              /* POINT TO INDEX AMB            */
         L     @10,RPLDACB(,RRPL)                                  0270
         L     @10,ACBAMBL(,@10)                                   0270
         L     RAMB,AMBLIX(,@10)                                   0270
*         RPARM1=ADDR(PLHIXSPL);    /* POINT TO INX PARM LIST        */
         LA    RPARM1,PLHIXSPL(,RPLH)                              0271
*         RPARM1->IXSILN=ONE;       /* SET LEVEL TO 1                */
         MVI   IXSILN(RPARM1),X'01'                                0272
*         PLHSSR=ON;                /* INDICATE SEQ SET REQD         */
         OI    PLHSSR(RPLH),B'00010000'                            0273
*         RPARM1=PLHSSRBA;          /* GET SEQ SET RBA               */
         L     RPARM1,PLHSSRBA(,RPLH)                              0274
*I05:                                                              0275
*         DO;                       /* IDACALL(IDAGRB)               */
I05      DS    0H                                                  0276
*           CALL IDAGRB;            /* EXIT TO IDAGRB                */
         L     @15,@CV01019                                        0276
         BALR  @14,@15                                             0276
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I05;                  /* GO READ THE SEQ SET           */
*         IF RPLERREG^=ZERO THEN    /* I/O ERROR                     */
         CLI   RPLERREG(RRPL),0                                    0282
         BE    @RF00282                                            0282
*           DO;                     /* YES                           */
*             RAMB=AMBLDTA;         /* SET DATA AMB                  */
         L     @10,RPLDACB(,RRPL)                                  0284
         L     @10,ACBAMBL(,@10)                                   0284
         L     RAMB,AMBLDTA(,@10)                                  0284
*             DIWATV=ZERO;          /* GIVE UP WORK AREA             */
         L     @10,AMBIWA(,RAMB)                                   0285
         MVI   DIWATV(@10),X'00'                                   0285
*             CALL EXIT;            /* RETURN                        */
         BAL   @14,EXIT                                            0286
*           END;                    /*                               */
*         RAMB=AMBLDTA;             /* RESET AMB REGISTER            */
@RF00282 L     @10,RPLDACB(,RRPL)                                  0288
         L     @10,ACBAMBL(,@10)                                   0288
         L     RAMB,AMBLDTA(,@10)                                  0288
*       END;                        /*                               */
*     IF RPLUPD=ON THEN             /* UPDATE MODE           @ZA02289*/
@RF00268 TM    RPLUPD(RRPL),B'00000010'                            0290
         BNO   @RF00290                                            0290
*       DO;                         /* YES, SPLIT            @ZA02289*/
*         CALL SPLTCA;              /* CA IF REQUIRED        @ZA02289*/
         BAL   @14,SPLTCA                                          0292
*         PLHFSP=BUFCBAD;           /* ERASE RECORD          @ZA02289*/
         L     @10,PLHDBUFC(,RPLH)                                 0293
         L     @10,BUFCBAD(,@10)                                   0293
         ST    @10,PLHFSP(,RPLH)                                   0293
*       END;                        /*                       @ZA02289*/
*     DO WHILE BUFCBAD^=PLHFSP;     /* LOOP UNTIL BUFFER EMPTY     0295
*                                                            @ZA02289*/
@RF00290 B     @DE00295                                            0295
@DL00295 DS    0H                                                  0296
*I06:                                                              0296
*       DO;                         /* IDACALL(IDA019RE)             */
I06      DS    0H                                                  0297
*         CALL IDA019RE;            /* EXIT TO IDA019RE              */
         L     @15,@CV01013                                        0297
         BALR  @14,@15                                             0297
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I06;                    /* CALL CI SPLIT                 */
*       IF RPLERREG^=ZERO THEN      /* ERROR ENCOUNTERED             */
         CLI   RPLERREG(RRPL),0                                    0303
         BE    @RF00303                                            0303
*         DO;                       /* YES                           */
*           DIWATV=ZERO;            /* FREE WORK AREA                */
         L     @10,AMBIWA(,RAMB)                                   0305
         MVI   DIWATV(@10),X'00'                                   0305
*           CALL EXIT;              /* RETURN                        */
         BAL   @14,EXIT                                            0306
*         END;                      /*                               */
*     END;                          /*                               */
@RF00303 DS    0H                                                  0308
@DE00295 L     @10,PLHDBUFC(,RPLH)                                 0308
         CLC   BUFCBAD(4,@10),PLHFSP(RPLH)                         0308
         BNE   @DL00295                                            0308
*     IF RPLUPD=OFF THEN            /* UPDATE MODE           @ZA02289*/
         TM    RPLUPD(RRPL),B'00000010'                            0309
         BNZ   @RF00309                                            0309
*       CALL SPLTCA;                /* NO-GO SPLIT IF REQUIRED     0310
*                                                            @ZA02289*/
         BAL   @14,SPLTCA                                          0310
*     RBUFC=PLHIBUFC->BUFCBAD;      /* POINT TO INDEX RECORD         */
@RF00309 L     @10,PLHIBUFC(,RPLH)                                 0311
         L     RBUFC,BUFCBAD(,@10)                                 0311
*     RPARM1=RPLAREA+AMDRKP;        /* POINT TO ARGUMENT             */
         L     @10,AMBDSB(,RAMB)                                   0312
         LH    RPARM1,AMDRKP(,@10)                                 0312
         AL    RPARM1,RPLAREA(,RRPL)                               0312
*     RAMB=AMBLIX;                  /* ADDRESS THRU INDEX CB         */
         L     @10,RPLDACB(,RRPL)                                  0313
         L     @10,ACBAMBL(,@10)                                   0313
         L     RAMB,AMBLIX(,@10)                                   0313
*     IMWIXSP=ADDR(IMWISWKA);       /* SET ADD. TO PARM LIST         */
         L     @10,AMBIWA(,RAMB)                                   0314
         L     @10,ICWCHN(,@10)                                    0314
         LA    @05,IMWISWKA(,@10)                                  0314
         ST    @05,IMWIXSP(,@10)                                   0314
*     RESPECIFY                                                    0315
*       RWORK3 RSTD;                /*                               */
*     RWORK3=IMWIXSP;               /* ADD. OF PARM FOR SCIB         */
         LR    RWORK3,@05                                          0316
*I07:                                                              0317
*     DO;                           /* IDACALL(IDA019RC)             */
I07      DS    0H                                                  0318
*       CALL IDA019RC;              /* EXIT TO IDA019RC              */
         L     @15,@CV01012                                        0318
         BALR  @14,@15                                             0318
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I07;                      /* SCIB                          */
*     RFY                                                          0324
*      (RWORK2,                                                    0324
*       RWORK4) RSTD;               /*                               */
*     RWORK2=PLHIBUFC->BUFCBAD;     /* POINT TO INDEX RECORD         */
         L     @10,PLHIBUFC(,RPLH)                                 0325
         L     RWORK2,BUFCBAD(,@10)                                0325
*     RWORK3=IXSHEP+LENGTH(IBFLPL)+ /* POINT TO CURRENT INDEX        */
*         LENGTH(IBFLPF);           /* ENTRY POINTER FIELD           */
         L     @10,AMBIWA(,RAMB)                                   0326
         L     @10,ICWCHN(,@10)                                    0326
         L     @10,IMWIXSP(,@10)                                   0326
         LA    RWORK3,2                                            0326
         AL    RWORK3,IXSHEP(,@10)                                 0326
*     RWORK4=RWORK2->IXHPTLS;       /* GET MASK FROM HEADER          */
         SLR   RWORK4,RWORK4                                       0327
         IC    RWORK4,IXHPTLS(,RWORK2)                             0327
*     RPARM1=ZERO;                  /* CLEAR PICKUP REG              */
         SLR   RPARM1,RPARM1                                       0328
*     GEN(EX  RWORK4,PICKPT);       /* EXTRACT POINTER FIELD         */
         EX  RWORK4,PICKPT
*     RAMB=AMBLDTA;                 /* ADDRESS DATA CB               */
         L     @10,RPLDACB(,RRPL)                                  0330
         L     @10,ACBAMBL(,@10)                                   0330
         L     RAMB,AMBLDTA(,@10)                                  0330
*     RPLDDDD=RWORK2->IXHBRBA+      /* COMPUTE RBA OF FIRST          */
*         AMDCINV*RPARM1;           /* SEGMENT OF SPANNED RCD        */
         L     @10,AMBDSB(,RAMB)                                   0331
         LR    @15,RPARM1                                          0331
         M     @14,AMDCINV(,@10)                                   0331
         AL    @15,IXHBRBA(,RWORK2)                                0331
         ST    @15,RPLDDDD(,RRPL)                                  0331
*     RFY                                                          0332
*      (RWORK2,                                                    0332
*       RWORK3,                                                    0332
*       RWORK4) UNRSTD;             /*                               */
*     IF RPLSEQ=OFF&AMBLSR=OFF&     /* DIR OR SKP AND NOT            */
*         AMBGSR=OFF THEN           /* DB/DC                         */
         TM    RPLSEQ(RRPL),B'00100000'                            0333
         BNZ   @RF00333                                            0333
         TM    AMBLSR(RAMB),B'01100000'                            0333
         BNZ   @RF00333                                            0333
*I08:                                                              0334
*       DO;                         /* IDACALL(IDAAIBF)              */
I08      DS    0H                                                  0335
*         CALL IDAAIBF;             /* EXIT TO IDAAIBF               */
         L     @15,@CV01004                                        0335
         BALR  @14,@15                                             0335
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I08;                    /* YES, ADD DI BUFFER TO BUFFER
*                                      CHAIN                         */
*     RPARM1=PLHNOSEG;              /* SET AT SEGMENT COUNT          */
@RF00333 LH    RPARM1,PLHNOSEG(,RPLH)                              0341
*I09:                                                              0342
*     DO;                           /* IDACALL(IDAABF)               */
I09      DS    0H                                                  0343
*       CALL IDAABF;                /* EXIT TO IDAABF                */
         L     @15,@CV01003                                        0343
         BALR  @14,@15                                             0343
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I09;                      /* TRY TO ADD BUFFERS            */
*     PLHSAVE1=AMDCINV-LENGTH(IDACIDF)/* COMPUTE AND SAVE MAX        */
*         -TWO*LENGTH(IDARDF);      /* SPACE IN CI FOR DATA          */
         L     @10,AMBDSB(,RAMB)                                   0349
         L     @10,AMDCINV(,@10)                                   0349
         SL    @10,@CF00314                                        0349
         ST    @10,PLHSAVE1(,RPLH)                                 0349
*     PLHSRCSG=ONE;                 /* SET SEG NO. AT 1              */
         MVC   PLHSRCSG(2,RPLH),@CH00053                           0350
*     RBUFC=PLHDBUFC;               /* USE CURRENT DATA BUFFER       */
         L     RBUFC,PLHDBUFC(,RPLH)                               0351
*I10:                                                              0352
*     DO;                           /* IDACALL(IDAMVSEG)             */
I10      DS    0H                                                  0353
*       CALL IDAMVSEG;              /* EXIT TO IDAMVSEG              */
         L     @15,@CV01016                                        0353
         BALR  @14,@15                                             0353
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I10;                      /* MOVE 1ST SEG TO BUFFER        */
*     RBUFC->BUFCORBA=RPLDDDD;      /* SET OUTPUT RBA                */
         L     @10,RPLDDDD(,RRPL)                                  0359
         ST    @10,BUFCORBA(,RBUFC)                                0359
*     IF AMBJRN=ON THEN             /* JOURNAL EXIT REQUIRED         */
         TM    AMBJRN(RAMB),B'00000010'                            0360
         BNO   @RF00360                                            0360
*       CALL IDAJRNSR;              /* YES, GO JOURNAL               */
         L     @15,@CA01061                                        0361
         BALR  @14,@15                                             0361
*     RFY                                                          0362
*      (RWORK2,                                                    0362
*       RWORK3,                                                    0362
*       RWORK4) RSTD;               /*                               */
@RF00360 DS    0H                                                  0363
*     DO PLHSRCSG=TWO TO PLHNOSEG;  /* LOOP STORES 2ND THRU LAST   0363
*                                      SEGMENT                       */
         LA    @10,2                                               0363
         B     @DE00363                                            0363
@DL00363 DS    0H                                                  0364
*       RAMB=AMBLDTA;               /* POINT TO DATA BLOCKS          */
         L     @10,RPLDACB(,RRPL)                                  0364
         L     @10,ACBAMBL(,@10)                                   0364
         L     RAMB,AMBLDTA(,@10)                                  0364
*       RBUFC=ZERO;                 /* USE WORK BUFFER               */
         SLR   RBUFC,RBUFC                                         0365
*I11:                                                              0366
*       DO;                         /* IDACALL(IDAMVSEG)             */
I11      DS    0H                                                  0367
*         CALL IDAMVSEG;            /* EXIT TO IDAMVSEG              */
         L     @15,@CV01016                                        0367
         BALR  @14,@15                                             0367
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I11;                    /* MOVE A SEG TO BUFFER          */
*       RAMB=AMBLIX;                /* ADDRESS THRU INDEX SIDE       */
         L     @10,RPLDACB(,RRPL)                                  0373
         L     @10,ACBAMBL(,@10)                                   0373
         L     RAMB,AMBLIX(,@10)                                   0373
*I12:                                                              0374
*       DO;                         /* IDACALL(IDAADSEG)             */
I12      DS    0H                                                  0375
*         CALL IDAADSEG;            /* EXIT TO IDAADSEG              */
         L     @15,@CV01017                                        0375
         BALR  @14,@15                                             0375
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I12;                    /* PLACE NEW SEGMENT IN SEQUENCE
*                                      SET                           */
*       RWORK2=PLHIBUFC->BUFCBAD;   /* POINT TO INDEX BUFFER         */
         L     @10,PLHIBUFC(,RPLH)                                 0381
         L     RWORK2,BUFCBAD(,@10)                                0381
*       RWORK3=RWORK2+RWORK2->IXHFSO-/* POINT TO FIRST UNUSED        */
*           RWORK2->IXHFLPLN+       /* POINTER IN THE SEQ SET        */
*           LENGTH(IBFLPF)+         /* FREE LIST                     */
*           LENGTH(IBFLPL);         /*                               */
         LR    RWORK3,RWORK2                                       0382
         LH    @10,IXHFSO(,RWORK2)                                 0382
         ALR   RWORK3,@10                                          0382
         SLR   @10,@10                                             0382
         IC    @10,IXHFLPLN(,RWORK2)                               0382
         SLR   RWORK3,@10                                          0382
         AL    RWORK3,@CF00155                                     0382
*       RWORK4=RWORK2->IXHPTLS;     /* GET MASK FROM HEADER          */
         SLR   RWORK4,RWORK4                                       0383
         IC    RWORK4,IXHPTLS(,RWORK2)                             0383
*       RPARM1=ZERO;                /* CLEAR PICKUP REGISTER         */
         SLR   RPARM1,RPARM1                                       0384
*       GEN(EX  RWORK4,PICKPT);     /* EXTRACT THE POINTER           */
         EX  RWORK4,PICKPT
*       RBUFC->BUFCORBA=RWORK2->IXHBRBA+/* COMPUTE THE RBA OF THE    */
*           AMBLDTA->AMBDSB->       /* BUFFER WHICH WAS JUST         */
*           AMDCINV*RPARM1;         /* FILLED                        */
         L     @10,RPLDACB(,RRPL)                                  0386
         L     @10,ACBAMBL(,@10)                                   0386
         L     @10,AMBLDTA(,@10)                                   0386
         L     @10,AMBDSB(,@10)                                    0386
         LR    @15,RPARM1                                          0386
         M     @14,AMDCINV(,@10)                                   0386
         AL    @15,IXHBRBA(,RWORK2)                                0386
         ST    @15,BUFCORBA(,RBUFC)                                0386
*       RBUFC->BUFCDDDD=RBUFC->BUFCORBA;/* SET INPUT RBA             */
         ST    @15,BUFCDDDD(,RBUFC)                                0387
*       RPARM1=ZERO;                /* CLEAR                         */
         SLR   RPARM1,RPARM1                                       0388
*       GEN(EX  RWORK4,STOREPT);    /* REMOVE POINTER FROM FREELIST  */
         EX  RWORK4,STOREPT
*       RWORK2->IXHFSO=RWORK2->IXHFSO/* ADJUST OFFSET TO             */
*           -RWORK2->IXHFLPLN+      /* FREESPACE AREA IN             */
*           LENGTH(IBFLPF)+         /* SEQ SET                       */
*           LENGTH(IBFLPL);         /*                               */
         LH    @10,IXHFSO(,RWORK2)                                 0390
         SLR   @09,@09                                             0390
         IC    @09,IXHFLPLN(,RWORK2)                               0390
         SLR   @10,@09                                             0390
         AL    @10,@CF00155                                        0390
         STH   @10,IXHFSO(,RWORK2)                                 0390
*       IF AMBJRN=ON THEN           /* JOURNAL EXIT REQUIRED         */
         TM    AMBJRN(RAMB),B'00000010'                            0391
         BNO   @RF00391                                            0391
*         CALL IDAJRNSR;            /* YES, GO JOURNAL               */
         L     @15,@CA01061                                        0392
         BALR  @14,@15                                             0392
*     END;                          /*                               */
@RF00391 LA    @10,1                                               0393
         AH    @10,PLHSRCSG(,RPLH)                                 0393
@DE00363 STH   @10,PLHSRCSG(,RPLH)                                 0393
         CH    @10,PLHNOSEG(,RPLH)                                 0393
         BNH   @DL00363                                            0393
*     RFY                                                          0394
*      (RWORK2,                                                    0394
*       RWORK3,                                                    0394
*       RWORK4) UNRSTD;             /*                               */
*     RBUFC=PLHIBUFC;               /* POINT RBUFC TO SEQ SET        */
         L     RBUFC,PLHIBUFC(,RPLH)                               0395
*     RBUFC->BUFCORBA=RBUFC->BUFCDDDD;/* SET OUTPUT RBA              */
         L     @10,BUFCDDDD(,RBUFC)                                0396
         ST    @10,BUFCORBA(,RBUFC)                                0396
*     RBUFC->BUFCMW=ON;             /* SET MUST WRITE                */
         OI    BUFCMW(RBUFC),B'10000000'                           0397
*I13:                                                              0398
*     DO;                           /* IDACALL(IDAWRBFR)             */
I13      DS    0H                                                  0399
*       CALL IDAWRBFR;              /* EXIT TO IDAWRBFR              */
         L     @15,@CV01011                                        0399
         BALR  @14,@15                                             0399
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I13;                      /* WRITE SEQ SET                 */
*I14:                                                              0405
*     DO;                           /* IDACALL(IDAIVIXB)             */
I14      DS    0H                                                  0406
*       CALL IDAIVIXB;              /* EXIT TO IDAIVIXB              */
         L     @15,@CV01008                                        0406
         BALR  @14,@15                                             0406
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I14;                      /* INVALIDATE OTHER COPIES       */
*     RAMB=AMBLDTA;                 /* POINT TO DATA CBS             */
         L     @10,RPLDACB(,RRPL)                                  0412
         L     @10,ACBAMBL(,@10)                                   0412
         L     RAMB,AMBLDTA(,@10)                                  0412
*     PLHFSP=PLHDBUFC->BUFCBAD;     /* SHOW CURRENT BUFFER OUT       */
         L     @10,PLHDBUFC(,RPLH)                                 0413
         L     @10,BUFCBAD(,@10)                                   0413
         ST    @10,PLHFSP(,RPLH)                                   0413
*     IF RPLSEQ=OFF&AMBLSR=OFF&     /* IS INSERT BUFFER ON           */
*         AMBGSR=OFF THEN           /* CHAIN OF BUFFERS              */
         TM    RPLSEQ(RRPL),B'00100000'                            0414
         BNZ   @RF00414                                            0414
         TM    AMBLSR(RAMB),B'01100000'                            0414
         BNZ   @RF00414                                            0414
*       DO;                         /* YES                           */
*         RBUFC=DIWBUFC;            /* SET RBUFC TO DI BUFC          */
         L     @10,AMBIWA(,RAMB)                                   0416
         L     RBUFC,DIWBUFC(,@10)                                 0416
*I15:                                                              0417
*         DO;                       /* IDACALL(IDASBF)               */
I15      DS    0H                                                  0418
*           CALL IDASBF;            /* EXIT TO IDASBF                */
         L     @15,@CV01009                                        0418
         BALR  @14,@15                                             0418
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I15;                  /* SUBTRACT BUFFER               */
*       END;                        /*                               */
*     DIWATV=ZERO;                  /* FREE DI WORK AREA             */
@RF00414 L     @10,AMBIWA(,RAMB)                                   0425
         MVI   DIWATV(@10),X'00'                                   0425
*     PLHLRECL=RPLRLEN;             /* SAVE RECORD LENGTH            */
         L     @10,RPLRLEN(,RRPL)                                  0426
         ST    @10,PLHLRECL(,RPLH)                                 0426
*     CALL EXIT;                    /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0427
*   END;                            /* END OF INSERT CODE            */
*                                                                  0429
*   /*****************************************************************/
*   /*                                                               */
*   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*   /* IDADARTV SUBROUTINE RETRIEVES A SPANNED RECORD FROM EXTERNAL  */
*   /* STORAGE AND PLACES IT IN THE USER AREA * * * * * * * * * * * **/
*   /* * * * * * * * * * * * * * * * * * * *                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0429
*IDADARTV:                                                         0429
*   ENTRY;                          /*                               */
@EP00429 DS    0H                                                  0430
*   GEN(IDASVR14);                  /* SAVE REGISTER 14              */
         IDASVR14
*   IF RPLADR=ON&AMDDST='1'B THEN   /* KSDS WITH ADDRESSED PROCESSING
*                                      OPTION                        */
         TM    RPLADR(RRPL),B'01000000'                            0431
         BNO   @RF00431                                            0431
         L     @10,AMBDSB(,RAMB)                                   0431
         TM    AMDDST(@10),B'10000000'                             0431
         BNO   @RF00431                                            0431
*     DO;                           /* YES, CANT ALLOW THAT          */
*       RPLERREG='08'X;             /* SET LOGICAL ERROR             */
         MVI   RPLERREG(RRPL),X'08'                                0433
*       RPLERRCD=RPLARSRK;          /* SET SPECIFIC ERROR CODE       */
         MVI   RPLERRCD(RRPL),X'88'                                0434
*       CALL EXIT;                  /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0435
*     END;                          /*                               */
*   RPLDDDD=BUFCDDDD;               /* SAVE RBA OF 1ST SEG.          */
@RF00431 L     @10,PLHDBUFC(,RPLH)                                 0437
         L     @05,BUFCDDDD(,@10)                                  0437
         ST    @05,RPLDDDD(,RRPL)                                  0437
*   PLHDDDD=BUFCDDDD;               /* SAVE RBA              @ZA07544*/
         ST    @05,PLHDDDD(,RPLH)                                  0438
*   IF AMDDST='1'B THEN             /* KSDS                          */
         L     @05,AMBDSB(,RAMB)                                   0439
         TM    AMDDST(@05),B'10000000'                             0439
         BNO   @RF00439                                            0439
*     DO;                           /* YES, MUST SAVE KEY            */
*       RFY                                                        0441
*        (RWORK2,                                                  0441
*         RWORK3,                                                  0441
*         RWORK4,                                                  0441
*         RWORK5) RSTD;             /*                               */
*       RWORK2=ADDR(PLHKEY);        /* 'TO' ADDRESS AT PLH KEY       */
         L     RWORK2,PLHKEYPT(,RPLH)                              0442
*       RWORK3=AMDKEYLN;            /* KEY LENGTH                    */
         LH    RWORK3,AMDKEYLN(,@05)                               0443
*       RWORK5=RWORK3;              /* DITTO                         */
         LR    RWORK5,RWORK3                                       0444
*       RWORK4=BUFCBAD+AMDRKP;      /* 'FROM' ADDRESS AT KEY         */
         LH    RWORK4,AMDRKP(,@05)                                 0445
         AL    RWORK4,BUFCBAD(,@10)                                0445
*       GEN(MVCL   RWORK2,RWORK4);  /* MOVE KEY TO PLH               */
         MVCL   RWORK2,RWORK4
*       RFY                                                        0447
*        (RWORK2,                                                  0447
*         RWORK3,                                                  0447
*         RWORK4,                                                  0447
*         RWORK5) UNRSTD;           /*                               */
*     END;                          /*                               */
*   IF RPLLOC=ON THEN               /* USER SPECIFY LOCATE MODE IN 0449
*                                      HIS RPL                       */
@RF00439 TM    RPLLOC(RRPL),B'10000000'                            0449
         BNO   @RF00449                                            0449
*     DO;                           /* YES, ERROR                    */
*       PLHSRINV=ON;                /* SET SPANNED RECORD EXCEPTION
*                                      FLAG                          */
         OI    PLHSRINV(RPLH),B'00010000'                          0451
*       RPLERREG='08'X;             /* SHOW LOGICAL ERROR            */
         MVI   RPLERREG(RRPL),X'08'                                0452
*       RPLERRCD=RPLSRLOC;          /* SHOW SPECIFIC CODE            */
         MVI   RPLERRCD(RRPL),X'84'                                0453
*       CALL EXIT;                  /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0454
*     END;                          /*                               */
*   RESPECIFY                                                      0456
*     RWORK1 RSTD;                  /*                               */
@RF00449 DS    0H                                                  0457
*   PLHSRSID=PLHRDFP->RDFLL;        /* MOVE ID CONTENTS TO PLH       */
         L     @10,PLHRDFP(,RPLH)                                  0457
         MVC   PLHSRSID(2,RPLH),RDFLL(@10)                         0457
*   PLHLRECL=ZERO;                  /* PREPARE TO ACCUMULATE RECORD
*                                      LENGTH                        */
         SLR   @10,@10                                             0458
         ST    @10,PLHLRECL(,RPLH)                                 0458
*   IF((RPLBWD=OFF×RPLKEY=ON)&      /* IF FORWARD OR KEYED AND       */
*       (PLHRDFP->RDFNOT1=OFF&      /* NOT THE FIRST SEGMENT         */
*       PLHRDFP->RDF1ST=ON))×       /* OR                            */
*       (RPLBWD=ON&                 /* BACKWARD AND NOT THE          */
*       (PLHRDFP->RDFNOT1=ON&       /* LAST SEGMENT OF        SPANNED*/
*       PLHRDFP->RDF1ST=OFF)) THEN  /* RECORD                        */
         TM    RPLKEY(RRPL),B'10000000'                            0459
         BNZ   @GL00009                                            0459
         TM    RPLBWD(RRPL),B'00010000'                            0459
         BO    @GL00008                                            0459
@GL00009 L     @10,PLHRDFP(,RPLH)                                  0459
         TM    RDF1ST(@10),B'00010000'                             0459
         BNO   @GL00008                                            0459
         TM    RDFNOT1(@10),B'00100000'                            0459
         BZ    @RT00459                                            0459
@GL00008 TM    RPLBWD(RRPL),B'00010000'                            0459
         BNO   @RF00459                                            0459
         L     @10,PLHRDFP(,RPLH)                                  0459
         TM    RDFNOT1(@10),B'00100000'                            0459
         BNO   @RF00459                                            0459
         TM    RDF1ST(@10),B'00010000'                             0459
         BNZ   @RF00459                                            0459
@RT00459 DS    0H                                                  0460
*     PLHSRBSG=OFF;                 /* CLEAR INCONSISTENT BIT        */
         NI    PLHSRBSG(RPLH),B'01111111'                          0460
*   ELSE                            /* IF FIRST, SET THE             */
*     PLHSRBSG=ON;                  /* INCONSISTANT FLAG BIT         */
         B     @RC00459                                            0461
@RF00459 OI    PLHSRBSG(RPLH),B'10000000'                          0461
*   PLHRAHD=ON;                     /* SET READ AHEAD ON FOR BUFFER
*                                      MANAGER                       */
@RC00459 OI    PLHRAHD(RPLH),B'01000000'                           0462
*   RESPECIFY                                                      0463
*     RWORK0 RSTD;                  /*                               */
*   PLHSRCSG=ONE;                   /* SET SEGMENT COUNT TO 1        */
         MVC   PLHSRCSG(2,RPLH),@CH00053                           0464
*   RWORK0=ZERO;                    /* CLEAR SWITCH                  */
         SLR   RWORK0,RWORK0                                       0465
*   RFY                                                            0466
*    (RWORK1,                                                      0466
*     RWORK2,                                                      0466
*     RWORK3,                                                      0466
*     RWORK4,                                                      0466
*     RWORK5) RSTD;                 /*                               */
*   DO WHILE RWORK0=ZERO;           /* LOOP COVERS ALL SEGS.         */
         B     @DE00467                                            0467
@DL00467 DS    0H                                                  0468
*     IF PLHRDFP->RDFLL^=PLHSRSID THEN/* SEGMENT ID OK               */
         L     @10,PLHRDFP(,RPLH)                                  0468
         CLC   RDFLL(2,@10),PLHSRSID(RPLH)                         0468
         BE    @RF00468                                            0468
*       PLHSRBSG=ON;                /* NO, SET REMINDER              */
         OI    PLHSRBSG(RPLH),B'10000000'                          0469
*     RWORK1=PLHRDFP+LENGTH(IDARDF);/* POINT TO LENGTH RDF           */
@RF00468 LA    RWORK1,3                                            0470
         AL    RWORK1,PLHRDFP(,RPLH)                               0470
*     IF PLHLRECL+RWORK1->RDFLL>RPLBUFL THEN/* DOES ROOM EXIST IN  0471
*                                      USERS AREA FOR THIS SEGMENT   */
         SLR   @10,@10                                             0471
         ICM   @10,3,RDFLL(RWORK1)                                 0471
         AL    @10,PLHLRECL(,RPLH)                                 0471
         C     @10,RPLBUFL(,RRPL)                                  0471
         BNH   @RF00471                                            0471
*       DO;                         /* NO                            */
*         PLHRAHD=OFF;              /* STOP READ AHEAD               */
         NI    PLHRAHD(RPLH),B'10111111'                           0473
*         PLHSRINV=ON;              /* SET EXCEPTION FLAG ON         */
         OI    PLHSRINV(RPLH),B'00010000'                          0474
*         RPLERREG='08'X;           /* SET LOGICAL ERROR             */
         MVI   RPLERREG(RRPL),X'08'                                0475
*         RPLERRCD=RPLINBUF;        /* SET SPECIFIC ERROR            */
         MVI   RPLERRCD(RRPL),X'2C'                                0476
*         CALL EXIT;                /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0477
*       END;                        /*                               */
*     RWORK2=RPLAREA+PLHLRECL;      /* POINT TO NEXT BYTE TO BE    0479
*                                      FILLED IN USERS AREA          */
@RF00471 L     RWORK2,RPLAREA(,RRPL)                               0479
         AL    RWORK2,PLHLRECL(,RPLH)                              0479
*     IF RPLBWD=ON&AMDDST='0'B&PLHSRCSG^=ONE THEN/* IF ESDS AND    0480
*                                      BACKWARD, THE RETRIEVAL ORDER
*                                      IS BACKWARDS                  */
         TM    RPLBWD(RRPL),B'00010000'                            0480
         BNO   @RF00480                                            0480
         L     @10,AMBDSB(,RAMB)                                   0480
         TM    AMDDST(@10),B'10000000'                             0480
         BNZ   @RF00480                                            0480
         CLC   PLHSRCSG(2,RPLH),@CH00053                           0480
         BE    @RF00480                                            0480
*       CALL SLIDESEG;              /* SO MOVE EXISTING DATA TO RIGHT
*                                      TO MAKE ROOM                  */
         BAL   @14,SLIDESEG                                        0481
*     RWORK1=PLHRDFP+LENGTH(IDARDF);/* POINT TO LENGTH RDF           */
@RF00480 LA    RWORK1,3                                            0482
         AL    RWORK1,PLHRDFP(,RPLH)                               0482
*     RWORK3=RWORK1->RDFLL;         /* SET MOVE LENGTH               */
         SLR   RWORK3,RWORK3                                       0483
         ICM   RWORK3,3,RDFLL(RWORK1)                              0483
*     RWORK5=RWORK3;                /* DITTO                         */
         LR    RWORK5,RWORK3                                       0484
*     RWORK4=BUFCBAD;               /* SET 'FROM' LENGTH             */
         L     @10,PLHDBUFC(,RPLH)                                 0485
         L     RWORK4,BUFCBAD(,@10)                                0485
*     PLHLRECL=PLHLRECL+RWORK3;     /* BUMP TOTAL BYTES MOVED        */
         LR    @10,RWORK3                                          0486
         AL    @10,PLHLRECL(,RPLH)                                 0486
         ST    @10,PLHLRECL(,RPLH)                                 0486
*     GEN(MVCL  RWORK2,RWORK4);     /* MOVE SEGMENT TO BUFFER        */
         MVCL  RWORK2,RWORK4
*     RFY                                                          0488
*      (RWORK1,                                                    0488
*       RWORK2,                                                    0488
*       RWORK3,                                                    0488
*       RWORK4,                                                    0488
*       RWORK5) UNRSTD;             /*                               */
*     IF AMBJRN=ON THEN             /* JOURNAL EXIT REQUIRED         */
         TM    AMBJRN(RAMB),B'00000010'                            0489
         BNO   @RF00489                                            0489
*       DO;                         /* YES                           */
*         RBUFC=PLHDBUFC;           /* SET RBUFC FOR IDAJRNSR        */
         L     RBUFC,PLHDBUFC(,RPLH)                               0491
*         CALL IDAJRNSR;            /* GO JOURNAL                    */
         L     @15,@CA01061                                        0492
         BALR  @14,@15                                             0492
*       END;                        /*                               */
*     IF((RPLBWD=OFF×RPLKEY=ON)&    /* IS DIRECTION FORWARD OR       */
*         (PLHRDFP->RDFNOT1=ON&     /* KEYED MODE AND SEGMENT        */
*         PLHRDFP->RDF1ST=OFF))×    /* IS THE LAST OR                */
*         (RPLBWD=ON&RPLADR=ON)&    /* BACKWARD DIRECTION AND        */
*         (PLHRDFP->RDFNOT1=OFF&    /* ESDS AND THE                  */
*         PLHRDFP->RDF1ST=ON) THEN  /* SEGMENT IS THE FIRST          */
@RF00489 TM    RPLKEY(RRPL),B'10000000'                            0494
         BNZ   @GL00014                                            0494
         TM    RPLBWD(RRPL),B'00010000'                            0494
         BO    @GL00013                                            0494
@GL00014 L     @10,PLHRDFP(,RPLH)                                  0494
         TM    RDFNOT1(@10),B'00100000'                            0494
         BNO   @GL00013                                            0494
         TM    RDF1ST(@10),B'00010000'                             0494
         BZ    @RT00494                                            0494
@GL00013 TM    RPLBWD(RRPL),B'01010000'                            0494
         BNO   @RF00494                                            0494
         L     @10,PLHRDFP(,RPLH)                                  0494
         TM    RDF1ST(@10),B'00010000'                             0494
         BNO   @RF00494                                            0494
         TM    RDFNOT1(@10),B'00100000'                            0494
         BNZ   @RF00494                                            0494
@RT00494 DS    0H                                                  0495
*       RWORK0=ONE;                 /* YES, SET SWITCH               */
         LA    RWORK0,1                                            0495
*     ELSE                          /* NO                            */
*       DO;                         /* PROCEED WITH NEXT SEG         */
         B     @RC00494                                            0496
@RF00494 DS    0H                                                  0497
*         RBUFC=PLHDBUFC;           /* REESTABLISH BUFC              */
         L     RBUFC,PLHDBUFC(,RPLH)                               0497
*I16:                                                              0498
*         DO;                       /* IDACALL(IDAFREEB)             */
I16      DS    0H                                                  0499
*           CALL IDAFREEB;          /* EXIT TO IDAFREEB              */
         L     @15,@CV01006                                        0499
         BALR  @14,@15                                             0499
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I16;                  /* FREE BUFFER                   */
*I17:                                                              0505
*         DO;                       /* IDACALL(IDAGNXT)              */
I17      DS    0H                                                  0506
*           CALL IDAGNXT;           /* EXIT TO IDAGNXT               */
         L     @15,@CV01007                                        0506
         BALR  @14,@15                                             0506
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I17;                  /* GET NEXT SEGMENT              */
*         IF RPLERREG^=ZERO THEN    /* ANY I/O ERRORS                */
         CLI   RPLERREG(RRPL),0                                    0512
         BE    @RF00512                                            0512
*           DO;                     /* YES                           */
*             PLHRAHD=OFF;          /* KILL READ AHEAD               */
*             PLHSRBSG=OFF;         /* CLEAR INCONSISTANT SEGS       */
         NI    PLHRAHD(RPLH),B'00111111'                           0515
*             IF RPLERREG='08'X&    /* EXCL CNTL ERR?        @ZA07544*/
*                 RPLERRCD=RPLEXCL THEN/* IF SO,             @ZA07544*/
         CLI   RPLERREG(RRPL),8                                    0516
         BNE   @RF00516                                            0516
         CLI   RPLERRCD(RRPL),20                                   0516
         BNE   @RF00516                                            0516
*               DO;                 /* CAUSE SCANDATA        @ZA07544*/
*                 PLHNOADV=ON;      /* NO ADV OF PLH         @ZA07544*/
*                 PLHDSCAN=ON;      /* DO SCANDATA           @ZA07544*/
         OI    PLHNOADV(RPLH),B'00001001'                          0519
*               END;                /* END EXCL CNTL         @ZA07544*/
*             CALL EXIT;            /* RETURN TO CALLER              */
@RF00516 BAL   @14,EXIT                                            0521
*           END;                    /*                               */
*         RWORK0=ZERO;              /* ASSURE RWORK0 IS CLEAN        */
@RF00512 SLR   RWORK0,RWORK0                                       0523
*         PLHRECP=RBUFC->BUFCBAD;   /* SET RECORD PTR                */
         L     @10,BUFCBAD(,RBUFC)                                 0524
         ST    @10,PLHRECP(,RPLH)                                  0524
*         PLHRDFP=RBUFC->BUFCBAD+AMDCINV/* SET RDF POINTER           */
*             -LENGTH(IDACIDF)      /*                               */
*             -TWO*(LENGTH(IDARDF));/*                               */
         L     @05,AMBDSB(,RAMB)                                   0525
         AL    @10,AMDCINV(,@05)                                   0525
         SL    @10,@CF00314                                        0525
         ST    @10,PLHRDFP(,RPLH)                                  0525
*         IF((RPLBWD=OFF×RPLKEY=ON)&/* IS DIRECTION FORWARD OR       */
*             (PLHRDFP->RDFNOT1=OFF))×/* KEYED MODE AND 1ST SEG      */
*             ((RPLBWD=ON&RPLADR=ON)&/* OR BACKWARD AND ADDR         */
*             PLHRDFP->RDF1ST=OFF) THEN/* AND SEGMENT IS LAST        */
         TM    RPLKEY(RRPL),B'10000000'                            0526
         BNZ   @GL00018                                            0526
         TM    RPLBWD(RRPL),B'00010000'                            0526
         BO    @GL00017                                            0526
@GL00018 L     @10,PLHRDFP(,RPLH)                                  0526
         TM    RDFNOT1(@10),B'00100000'                            0526
         BZ    @RT00526                                            0526
@GL00017 TM    RPLBWD(RRPL),B'01010000'                            0526
         BNO   @RF00526                                            0526
         L     @10,PLHRDFP(,RPLH)                                  0526
         TM    RDF1ST(@10),B'00010000'                             0526
         BNZ   @RF00526                                            0526
@RT00526 DS    0H                                                  0527
*           DO;                     /* YES                           */
*             RWORK0=ONE;           /* QUIT TO AVOID LOOP            */
         LA    RWORK0,1                                            0528
*             PLHSRBSG=ON;          /* SET INCONSISTANT SEGMENTS ON  */
         OI    PLHSRBSG(RPLH),B'10000000'                          0529
*           END;                    /*                               */
*         PLHSRCSG=PLHSRCSG+ONE;    /* BUMP SEGMENT COUNT            */
@RF00526 LA    @10,1                                               0531
         AH    @10,PLHSRCSG(,RPLH)                                 0531
         STH   @10,PLHSRCSG(,RPLH)                                 0531
*       END;                        /*                               */
*     RFY                                                          0533
*      (RWORK1,                                                    0533
*       RWORK2,                                                    0533
*       RWORK3,                                                    0533
*       RWORK4,                                                    0533
*       RWORK5) RSTD;               /*                               */
@RC00494 DS    0H                                                  0534
*   END;                            /*                               */
@DE00467 LTR   RWORK0,RWORK0                                       0534
         BZ    @DL00467                                            0534
*   RFY                                                            0535
*    (RWORK1,                                                      0535
*     RWORK2,                                                      0535
*     RWORK3,                                                      0535
*     RWORK4,                                                      0535
*     RWORK5) UNRSTD;               /*                               */
*   PLHRAHD=OFF;                    /* SET READ AHEAD OFF            */
         NI    PLHRAHD(RPLH),B'10111111'                           0536
*   RPLRLEN=PLHLRECL;               /* GIVE RECORD LENGTH TO USER    */
         L     @10,PLHLRECL(,RPLH)                                 0537
         ST    @10,RPLRLEN(,RRPL)                                  0537
*   IF RPLBWD=ON&AMDDST='0'B THEN   /* IF BACKWARDS & ESDS           */
         TM    RPLBWD(RRPL),B'00010000'                            0538
         BNO   @RF00538                                            0538
         L     @10,AMBDSB(,RAMB)                                   0538
         TM    AMDDST(@10),B'10000000'                             0538
         BNZ   @RF00538                                            0538
*     RPLDDDD=BUFCDDDD;             /* GET RBA FROM BUFC             */
         L     @10,PLHDBUFC(,RPLH)                                 0539
         L     @10,BUFCDDDD(,@10)                                  0539
         ST    @10,RPLDDDD(,RRPL)                                  0539
*   PLHDDDD=RPLDDDD;                /* SAVE LAST RBA                 */
@RF00538 L     @10,RPLDDDD(,RRPL)                                  0540
         ST    @10,PLHDDDD(,RPLH)                                  0540
*   PLHFSP=RBUFC->BUFCBAD+          /* SET FREE SPACE POINTER        */
*       PLHRDFP->RDFLL;             /*                               */
         L     @10,PLHRDFP(,RPLH)                                  0541
         SLR   @05,@05                                             0541
         ICM   @05,3,RDFLL(@10)                                    0541
         AL    @05,BUFCBAD(,RBUFC)                                 0541
         ST    @05,PLHFSP(,RPLH)                                   0541
*   IF RPLBWD=OFF THEN              /* IF DIRECTION FORWARD          */
         TM    RPLBWD(RRPL),B'00010000'                            0542
         BNZ   @RF00542                                            0542
*     PLHRECP=PLHFSP;               /* SHOW BUFFER EXHAUSTED         */
         ST    @05,PLHRECP(,RPLH)                                  0543
*   CALL EXIT;                      /* RETURN                        */
@RF00542 BAL   @14,EXIT                                            0544
*                                                                  0545
*   /*****************************************************************/
*   /*                                                               */
*   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*   /* SLIDESEG SUBROUTINE FUNCTION: MOVES EXISTING DATA IN USERS    */
*   /* AREA TO THE RIGHT TO MAKE ROOM FOR THE NEXT SEGMENT. * * * * **/
*   /* * * * * * * * * * * * * * * * * * * * * * * * * * *           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0545
*SLIDESEG:                                                         0545
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                               */
         B     @PB00002                                            0545
SLIDESEG DS    0H                                                  0546
*   RFY                                                            0546
*    (RWORK0,                                                      0546
*     RWORK1,                                                      0546
*     RWORK2,                                                      0546
*     RWORK3,                                                      0546
*     RWORK4,                                                      0546
*     RWORK5,                                                      0546
*     R14,                                                         0546
*     R15) RSTD;                    /*                               */
*   R15=PLHRDFP+LENGTH(IDARDF);     /* POINT TO LENGTH RDF           */
         LA    R15,3                                               0547
         AL    R15,PLHRDFP(,RPLH)                                  0547
*   DO WHILE RWORK0=ZERO;           /*                               */
         B     @DE00548                                            0548
@DL00548 DS    0H                                                  0549
*     RWORK3=ZERO;                  /* CLEAR                         */
         SLR   RWORK3,RWORK3                                       0549
*     RWORK1=RWORK2;                /* SAVE POSITION                 */
         LR    RWORK1,RWORK2                                       0550
*     RWORK4=RWORK2-R15->RDFLL;     /* SET FIRST 'FROM' ADD.         */
         LR    RWORK4,RWORK2                                       0551
         SLR   @10,@10                                             0551
         ICM   @10,3,RDFLL(R15)                                    0551
         SLR   RWORK4,@10                                          0551
*     IF RWORK4^>RPLAREA THEN       /* IS 'FROM' ADDRESS OUTSIDE OF
*                                      USERS AREA                    */
         L     @10,RPLAREA(,RRPL)                                  0552
         CR    RWORK4,@10                                          0552
         BH    @RF00552                                            0552
*       DO;                         /* YES                           */
*         RWORK3=RPLAREA-RWORK4;    /* COMPUTE EXTRA AMOUNT          */
         SLR   @10,RWORK4                                          0554
         LR    RWORK3,@10                                          0554
*         RWORK0=ONE;               /* CAUSE EXIT                    */
         LA    RWORK0,1                                            0555
*       END;                        /*                               */
*     RWORK2=RWORK2+RWORK3;         /* SET 'TO' ADDRESS              */
@RF00552 ALR   RWORK2,RWORK3                                       0557
*     RWORK4=RWORK4+RWORK3;         /* SET 'FROM' ADDRESS            */
         ALR   RWORK4,RWORK3                                       0558
*     RWORK5=R15->RDFLL-RWORK3;     /* SET MOVE AMOUNT               */
         SLR   RWORK5,RWORK5                                       0559
         ICM   RWORK5,3,RDFLL(R15)                                 0559
         SLR   RWORK5,RWORK3                                       0559
*     RWORK3=RWORK5;                /* DITTO                         */
         LR    RWORK3,RWORK5                                       0560
*     GEN(MVCL  RWORK2,RWORK4);     /* MOVE BLOCK TO RIGHT           */
         MVCL  RWORK2,RWORK4
*     RWORK2=RWORK1-R15->RDFLL;     /* SET NEW 'TO' ADDRESS          */
         LR    RWORK2,RWORK1                                       0562
         SLR   @10,@10                                             0562
         ICM   @10,3,RDFLL(R15)                                    0562
         SLR   RWORK2,@10                                          0562
*   END;                            /*                               */
@DE00548 LTR   RWORK0,RWORK0                                       0563
         BZ    @DL00548                                            0563
*   RWORK2=RPLAREA;                 /* RESET TO BEGINNING OF BUFFER  */
         L     RWORK2,RPLAREA(,RRPL)                               0564
*   RWORK0=ZERO;                    /* HOUSEKEEP                     */
         SLR   RWORK0,RWORK0                                       0565
*   END SLIDESEG;                   /* RETURN                        */
@EL00002 DS    0H                                                  0566
@EF00002 DS    0H                                                  0566
@ER00002 BR    @14                                                 0566
*   RFY                                                            0567
*    (RWORK0,                                                      0567
*     RWORK1,                                                      0567
*     RWORK2,                                                      0567
*     RWORK3,                                                      0567
*     RWORK4,                                                      0567
*     R14,                                                         0567
*     R15) UNRSTD;                  /*                               */
*                                                                  0568
*   /*****************************************************************/
*   /*                                                               */
*   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *   */
*   /* IDASPNPT ROUTINE FUNCTION: MAKES AN ENTRY INTO THE CURRENT    */
*   /* INDEX RECORD FOR A NON-LAST SPANNED RECORD SEGMENT. ON ENTRY, */
*   /* RWORK1 CONTAINS ADDRESS OF ICWA * * * * * * * * * * * * * * * */
*   /* * * * * * * * * * * * * * * *                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0568
*IDASPNPT:                                                         0568
*   ENTRY;                                                         0568
@EP00568 DS    0H                                                  0568
@EC00568 DS    0H                                                  0569
*   RESPECIFY                                                      0569
*    (RWORK0,                                                      0569
*     RWORK1,                                                      0569
*     RWORK2,                                                      0569
*     RWORK3,                                                      0569
*     RWORK4,                                                      0569
*     R14) RSTD;                    /*                               */
*   RESPECIFY                                                      0570
*     IDAICWA BASED(RWORK1);        /*                               */
*   RWORK2=ICWBUFC->BUFCBAD;        /* POINT TO INDEX BUFFER         */
         L     @15,ICWBUFC(,RWORK1)                                0571
         L     RWORK2,BUFCBAD(,@15)                                0571
*   RWORK3=RWORK2+RWORK2->IXHLEO;   /* POINT TO CURRENT POSITION IN
*                                      BUFFER                        */
         LR    RWORK3,RWORK2                                       0572
         LH    @15,IXHLEO(,RWORK2)                                 0572
         ALR   RWORK3,@15                                          0572
*   RWORK3->IBFLPF=AMDKEYLN;        /* SET F BYTE TO KEY LEN         */
         L     @15,AMBDSB(,RAMB)                                   0573
         LH    @15,AMDKEYLN(,@15)                                  0573
         STC   @15,IBFLPF(,RWORK3)                                 0573
*   RWORK3->IBFLPL=ZERO;            /* SET L BYTE TO ZERO            */
         MVI   IBFLPL(RWORK3),X'00'                                0574
*   RWORK3=RWORK2+RWORK2->IXHFSO-   /* POINT TO NEXT POINTER         */
*       ICWPTL;                     /* IN THE INDEX FREELIST         */
         LR    RWORK3,RWORK2                                       0575
         LH    @15,IXHFSO(,RWORK2)                                 0575
         ALR   RWORK3,@15                                          0575
         SLR   @15,@15                                             0575
         IC    @15,ICWPTL(,RWORK1)                                 0575
         SLR   RWORK3,@15                                          0575
*   RWORK4=RWORK2->IXHPTLS;         /* GET MASK FROM HEADER          */
         SLR   RWORK4,RWORK4                                       0576
         IC    RWORK4,IXHPTLS(,RWORK2)                             0576
*   RWORK0=RWORK3;                  /* REMEMBER PTR POSITION         */
         LR    RWORK0,RWORK3                                       0577
*   GEN(EX  RWORK4,PICKPT);         /* EXTRACT POINTER               */
         EX  RWORK4,PICKPT
*   RWORK3=RWORK2+RWORK2->IXHLEO-   /* POINT TO NEXT POINTER         */
*       ICWPTL;                     /* TO LEFT IN INDEX RECORD       */
         LR    RWORK3,RWORK2                                       0579
         LH    @15,IXHLEO(,RWORK2)                                 0579
         ALR   RWORK3,@15                                          0579
         SLR   @15,@15                                             0579
         IC    @15,ICWPTL(,RWORK1)                                 0579
         SLR   RWORK3,@15                                          0579
*   GEN(EX  RWORK4,STOREPT);        /* STORE PTR FROM FREELIST       */
         EX  RWORK4,STOREPT
*   RPARM1=ZERO;                    /* CLEAR STORING REGISTER        */
         SLR   RPARM1,RPARM1                                       0581
*   RWORK3=RWORK0;                  /* POINT BACK TO FREELIST        */
         LR    RWORK3,RWORK0                                       0582
*   GEN(EX  RWORK4,STOREPT);        /* CLEAR IT                      */
         EX  RWORK4,STOREPT
*   RWORK2->IXHFSO=RWORK2->IXHFSO-  /* ADJUST FREESPACE PTR          */
*       ICWPTL;                     /* FOR REMOVED POINTER           */
         LH    @15,IXHFSO(,RWORK2)                                 0584
         SLR   @10,@10                                             0584
         IC    @10,ICWPTL(,RWORK1)                                 0584
         SLR   @15,@10                                             0584
         STH   @15,IXHFSO(,RWORK2)                                 0584
*   RWORK2->IXHLEO=RWORK2->IXHLEO-  /* ADJUST CURRENT POSITION       */
*       RWORK2->IXHFLPLN;           /* TO THE LEFT                   */
         LH    @15,IXHLEO(,RWORK2)                                 0585
         SLR   @10,@10                                             0585
         IC    @10,IXHFLPLN(,RWORK2)                               0585
         SLR   @15,@10                                             0585
         STH   @15,IXHLEO(,RWORK2)                                 0585
*   IF ICWVSE=ON THEN               /* IS THERE A SECTION            */
         TM    ICWVSE(RWORK1),B'00010000'                          0586
         BNO   @RF00586                                            0586
*     DO;                           /* YES, UPDATE ITS LL            */
*       RWORK4=RWORK2+ICWPSEO;      /* POINT TO SECTION ENTRY        */
         LR    RWORK4,RWORK2                                       0588
         LH    @15,ICWPSEO(,RWORK1)                                0588
         ALR   RWORK4,@15                                          0588
*       RWORK3=RWORK4-RWORK4->IBFLPL-/* GET ADDRESSABILITY TO        */
*           LENGTH(IXSELL);         /* ITS LL FIELD                  */
         LR    RWORK3,RWORK4                                       0589
         SLR   @15,@15                                             0589
         IC    @15,IBFLPL(,RWORK4)                                 0589
         SLR   RWORK3,@15                                          0589
         BCTR  RWORK3,0                                            0589
         BCTR  RWORK3,0                                            0589
*       RWORK4='03'X;               /* SET MASK                      */
         LA    RWORK4,3                                            0590
*       RPARM1=ZERO;                /* ASSURE CLEAN REGISTER         */
         SLR   RPARM1,RPARM1                                       0591
*       GEN(EX  RWORK4,PICKPT);     /* PICK UP LL FIELD              */
         EX  RWORK4,PICKPT
*       RPARM1=RPARM1+RWORK2->IXHFLPLN;/* INCREMENT BY THIS ENTRY    */
         SLR   @15,@15                                             0593
         IC    @15,IXHFLPLN(,RWORK2)                               0593
         ALR   RPARM1,@15                                          0593
*       GEN(EX  RWORK4,STOREPT);    /* STORE IT BACK                 */
         EX  RWORK4,STOREPT
*     END;                          /*                               */
*   ELSE                            /* NO SECTION ENTRY YET          */
*     RWORK2->IXHSEO=RWORK2->IXHLEO;/* SO 1ST EQUALS LAST            */
         B     @RC00586                                            0596
@RF00586 LH    @15,IXHLEO(,RWORK2)                                 0596
         STH   @15,IXHSEO(,RWORK2)                                 0596
*   RETURN;                         /*                               */
@EL00001 DS    0H                                                  0597
@EF00001 DS    0H                                                  0597
@ER00001 BR    @14                                                 0597
*   RESPECIFY                                                      0598
*    (RWORK0,                                                      0598
*     RWORK1,                                                      0598
*     RWORK2,                                                      0598
*     RWORK3,                                                      0598
*     RWORK4,                                                      0598
*     R14) UNRSTD;                  /*                               */
*                                                                  0599
*   /*****************************************************************/
*   /*                                                               */
*   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*   /* IDAJRNSR SUBROUTINE FUNCTION: TAKES A JOURNAL EXIT FOR READING*/
*   /* OR WRITING A SPANNED RECORD SEGMENT ON ENTRY, RBUFC CONTAINS  */
*   /* THE ADDRESS OF THE BUFC CONTAINING THE DATA BEING JOURNALED * */
*   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0599
*IDAJRNSR:                                                         0599
*   ENTRY;                          /*                               */
@EP00599 DS    0H                                                  0600
*   GEN(IDASVR14);                  /* SAVE REGISTER 14              */
         IDASVR14
*   IF RBUFC->BUFCMW=ON THEN        /* IS THIS AN OUTPUT BUFF        */
         TM    BUFCMW(RBUFC),B'10000000'                           0601
         BNO   @RF00601                                            0601
*     DO;                           /* YES                           */
*       PLHJCODE=PLHWSRSG;          /* SET WRITE CODE IN LIST        */
         MVI   PLHJCODE(RPLH),B'00010100'                          0603
*       PLHJORBA=RBUFC->BUFCORBA;   /* SET RBA IN LIST               */
         L     @10,BUFCORBA(,RBUFC)                                0604
         ST    @10,PLHJORBA(,RPLH)                                 0604
*     END;                          /*                               */
*   ELSE                            /*                               */
*     DO;                           /* INPUT BUFFER                  */
         B     @RC00601                                            0606
@RF00601 DS    0H                                                  0607
*       PLHJCODE=PLHRSRSG;          /* SET READ CODE IN LIST         */
         MVI   PLHJCODE(RPLH),B'00010000'                          0607
*       PLHJORBA=RBUFC->BUFCDDDD;   /* SET RBA IN LIST               */
         L     @10,BUFCDDDD(,RBUFC)                                0608
         ST    @10,PLHJORBA(,RPLH)                                 0608
*     END;                          /*                               */
*   RPARM1=RBUFC->BUFCBAD+AMBLDTA-> /* POINT TO THE LAST             */
*       AMBDSB->AMDCINV-            /* RDF FIELD IN THE CI           */
*       LENGTH(IDACIDF)-            /*                               */
*       LENGTH(IDARDF);             /*                               */
@RC00601 L     @10,RPLDACB(,RRPL)                                  0610
         L     @10,ACBAMBL(,@10)                                   0610
         L     @10,AMBLDTA(,@10)                                   0610
         L     @10,AMBDSB(,@10)                                    0610
         L     RPARM1,BUFCBAD(,RBUFC)                              0610
         AL    RPARM1,AMDCINV(,@10)                                0610
         SL    RPARM1,@CF00288                                     0610
*   PLHJRNLL=RPARM1->RDFLL;         /* SET LENGTH                    */
         SLR   @10,@10                                             0611
         ICM   @10,3,RDFLL(RPARM1)                                 0611
         ST    @10,PLHJRNLL(,RPLH)                                 0611
*I18:                                                              0612
*   DO;                             /* IDACALL(IDATJXIT)             */
I18      DS    0H                                                  0613
*     CALL IDATJXIT;                /* EXIT TO IDATJXIT              */
         L     @15,@CV01010                                        0613
         BALR  @14,@15                                             0613
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I18;                        /* GO TO EXIT ROUTINE            */
*   CALL EXIT;                      /* RETURN                        */
         BAL   @14,EXIT                                            0619
*                                                                  0620
*/*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*/*  SUBROUTINE SPLTCA:                                      @ZA02289*/
*/*                                                          @ZA02289*/
*/*    FUNCTION:  DETERMINES IF A CONTROL AREA NEEDS TO BE   @ZA02289*/
*/*             SPLIT AND SPLITS IT IF NECESSARY             @ZA02289*/
*/*                                                          @ZA02289*/
*/*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*                                                                  0620
*SPLTCA:                                                           0620
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @ZA02289*/
         B     @PB00003                                            0620
SPLTCA   DS    0H                                                  0621
*   GEN(IDASVR14);                  /* SAVE R14              @ZA02289*/
         IDASVR14
*   RFY                                                            0622
*    (RWORK1,                                                      0622
*     RWORK2) RSTD;                 /*                       @ZA02289*/
*   RWORK2=PLHIBUFC->BUFCBAD;       /* INDX BUFF PTR         @ZA02289*/
         L     @10,PLHIBUFC(,RPLH)                                 0623
         L     RWORK2,BUFCBAD(,@10)                                0623
*   RWORK1=((RWORK2->IXHFSO-        /* COMPUTE NO. OF        @ZA02289*/
*       LENGTH(IDAIXH))/            /* FREESPACE CI'S        @ZA02289*/
*       (RWORK2->IXHFLPLN-          /* AVAILABLE FOR         @ZA02289*/
*       LENGTH(IBFLPL)-             /* STORING THE           @ZA02289*/
*       LENGTH(IBFLPF)))+ONE;       /* SPANNED RECORD        @ZA02289*/
         LH    @10,IXHFSO(,RWORK2)                                 0624
         LR    RWORK1,@10                                          0624
         SL    RWORK1,@CF00083                                     0624
         LA    @08,2                                               0624
         SLR   @07,@07                                             0624
         IC    @07,IXHFLPLN(,RWORK2)                               0624
         SLR   @07,@08                                             0624
         LR    @14,RWORK1                                          0624
         SRDA  @14,32                                              0624
         DR    @14,@07                                             0624
         AL    @15,@CF00053                                        0624
         LR    RWORK1,@15                                          0624
*   RBUFC=RWORK2+RWORK2->IXHLEO;    /* PT TO F FIELD OF LAST ENT IN
*                                      SEQ SET               @ZA02289*/
         LR    RBUFC,RWORK2                                        0625
         LH    @07,IXHLEO(,RWORK2)                                 0625
         ALR   RBUFC,@07                                           0625
*   RPARM1=RBUFC-RBUFC->IBFLPL-     /* MOVE ACROSS KEY FIELD,        */
*       LENGTH(IXSELL);             /* AND SECTION LL FIELD  @ZA02289*/
         LR    RPARM1,RBUFC                                        0626
         SLR   @07,@07                                             0626
         IC    @07,IBFLPL(,RBUFC)                                  0626
         SLR   RPARM1,@07                                          0626
         SLR   RPARM1,@08                                          0626
*   RBUFC=RPARM1-(RWORK2+           /* FIND LENGTH OF FREE           */
*       RWORK2->IXHFSO);            /* AREA IN IDX REC@ZA02289       */
         ALR   @10,RWORK2                                          0627
         LCR   @10,@10                                             0627
         ALR   @10,RPARM1                                          0627
         LR    RBUFC,@10                                           0627
*   DO WHILE PLHNOSEG>RWORK1×       /* LOOP CAUSES CA SPLIT IF       */
*         PLHNOSEG*(LENGTH(IBFLPF)+ /* NOT ENOUGH CIS, NOT           */
*         LENGTH(IBFLPL))>RBUFC×    /* ENOUGH ROOM IN SEQ SET,       */
*         (RPLSEQ=ON&PLHNOSEG<      /* OR SEQ AND NO. CIS LESS       */
*         (AMDCIPCA-AMDFSCA)&       /* THAN LOAD FACTOR AND          */
*         ((PLHNOSEG+AMDFSCA-RWORK1)>/* DISTANCE FROM END TO         */
*         (RWORK1-AMDFSCA-ONE)));   /* FREE SPACE POINT IS MORE THAN
*                                      FROM BEGINNING TO FREE SPACE
*                                      PT                    @ZA02289*/
         B     @DE00628                                            0628
@DL00628 DS    0H                                                  0629
*     RPARM1=PLHNOSEG-ONE;          /* SET NO SEGS. REQD.    @ZA02289*/
         LH    RPARM1,PLHNOSEG(,RPLH)                              0629
         BCTR  RPARM1,0                                            0629
*I19:                                                              0630
*     DO;                           /* IDACALL(IDA019RF)             */
I19      DS    0H                                                  0631
*       CALL IDA019RF;              /* EXIT TO IDA019RF              */
         L     @15,@CV01014                                        0631
         BALR  @14,@15                                             0631
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I19;                      /* CALL CA SPLIT         @ZA02289*/
*     IF RPLERREG^=ZERO THEN        /* DID ERR OCCUR         @ZA02289*/
         CLI   RPLERREG(RRPL),0                                    0637
         BE    @RF00637                                            0637
*       DO;                         /* YES                   @ZA02289*/
*         DIWPLH=ZERO;              /* CLEAR PLH PTR         @ZA02289*/
         L     @10,AMBIWA(,RAMB)                                   0639
         SLR   @08,@08                                             0639
         ST    @08,DIWPLH(,@10)                                    0639
*         DIWATV=ZERO;              /* FREE WORK AREA        @ZA02289*/
         MVI   DIWATV(@10),X'00'                                   0640
*         GEN(IDARST14);            /* PT TO CALLER          @ZA02289*/
         IDARST14
*         CALL EXIT;                /* RETURN                @ZA02289*/
         BAL   @14,EXIT                                            0642
*       END;                        /*                       @ZA02289*/
*I20:                                                              0644
*     DO;                           /* IDACALL(IDAREPOS)             */
@RF00637 DS    0H                                                  0644
I20      DS    0H                                                  0645
*       CALL IDAREPOS;              /* EXIT TO IDAREPOS              */
         L     @15,@CV01018                                        0645
         BALR  @14,@15                                             0645
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I20;                      /* RST BUFF MANAGER PTR POSITION
*                                                            @ZA02289*/
*     RWORK2=PLHIBUFC->BUFCBAD;     /* PT TO IDX BUFF        @ZA02289*/
         L     @10,PLHIBUFC(,RPLH)                                 0651
         L     RWORK2,BUFCBAD(,@10)                                0651
*     RWORK1=((RWORK2->IXHFSO-      /* COMPUTE THE NUMBER OF         */
*         LENGTH(IDAIXH))/          /* FREESPACE CONTROL             */
*         (RWORK2->IXHFLPLN-        /* INTERVALS AVAILABLE FOR       */
*         LENGTH(IBFLPL)-           /* STORING AWAY THE              */
*         LENGTH(IBFLPF)))+ONE;     /* SPANNED RECORD        @ZA02289*/
         LH    @10,IXHFSO(,RWORK2)                                 0652
         LR    RWORK1,@10                                          0652
         SL    RWORK1,@CF00083                                     0652
         LA    @08,2                                               0652
         SLR   @07,@07                                             0652
         IC    @07,IXHFLPLN(,RWORK2)                               0652
         SLR   @07,@08                                             0652
         LR    @14,RWORK1                                          0652
         SRDA  @14,32                                              0652
         DR    @14,@07                                             0652
         AL    @15,@CF00053                                        0652
         LR    RWORK1,@15                                          0652
*     RBUFC=RWORK2+RWORK2->IXHLEO;  /* POINT TO F FIELD OF LAST ENT
*                                      IN SEQ SET            @ZA02289*/
         LR    RBUFC,RWORK2                                        0653
         LH    @07,IXHLEO(,RWORK2)                                 0653
         ALR   RBUFC,@07                                           0653
*     RPARM1=RBUFC-RBUFC->IBFLPL-   /* MOVE ACROSS KEY FLD AND       */
*         LENGTH(IXSELL);           /* SECT LL FIELD         @ZA02289*/
         LR    RPARM1,RBUFC                                        0654
         SLR   @07,@07                                             0654
         IC    @07,IBFLPL(,RBUFC)                                  0654
         SLR   RPARM1,@07                                          0654
         SLR   RPARM1,@08                                          0654
*     RBUFC=RPARM1-(RWORK2+         /* FIND LNG OF FREE AREA         */
*         RWORK2->IXHFSO);          /* IN IDX RECORD         @ZA02289*/
         ALR   @10,RWORK2                                          0655
         LCR   @10,@10                                             0655
         ALR   @10,RPARM1                                          0655
         LR    RBUFC,@10                                           0655
*   END;                            /*                       @ZA02289*/
@DE00628 LH    @10,PLHNOSEG(,RPLH)                                 0656
         CR    @10,RWORK1                                          0656
         BH    @DL00628                                            0656
         LR    @08,@10                                             0656
         ALR   @08,@08                                             0656
         CR    @08,RBUFC                                           0656
         BH    @DL00628                                            0656
         TM    RPLSEQ(RRPL),B'00100000'                            0656
         BNO   @DC00628                                            0656
         L     @08,AMBDSB(,RAMB)                                   0656
         LH    @07,AMDFSCA(,@08)                                   0656
         LH    @08,AMDCIPCA(,@08)                                  0656
         SLR   @08,@07                                             0656
         CR    @10,@08                                             0656
         BNL   @DC00628                                            0656
         ALR   @10,@07                                             0656
         SLR   @10,RWORK1                                          0656
         LCR   @07,@07                                             0656
         ALR   @07,RWORK1                                          0656
         BCTR  @07,0                                               0656
         CR    @10,@07                                             0656
         BH    @DL00628                                            0656
@DC00628 DS    0H                                                  0657
*   CALL EXIT;                      /* RESTORE R14           @ZA02289*/
         BAL   @14,EXIT                                            0657
*   END SPLTCA;                     /*                       @ZA02289*/
@EL00003 DS    0H                                                  0658
@EF00003 DS    0H                                                  0658
@ER00003 BR    @14                                                 0658
*   RESPECIFY                                                      0659
*    (RWORK1,                                                      0659
*     RWORK2) UNRSTD;               /*                       @ZA02289*/
*                                                                  0660
*   /*****************************************************************/
*   /*                                                               */
*   /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*   /* EXIT SUBROUTINE                                       @ZA02289*/
*   /* FUNCTION: RESTORES REGISTER 14 FROM THE PLACEHOLDER PUSH DOWN */
*   /* LIST AND RETURNS * * * * * * * * * * * * * * * * * * * * * * **/
*   /* * * * * * * * *                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0660
*EXIT:                                                             0660
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                               */
EXIT     DS    0H                                                  0661
*   GEN(IDARST14);                  /* RESTORE REGISTER 14           */
         IDARST14
*   END EXIT;                       /* RETURN                        */
@EL00004 DS    0H                                                  0662
@EF00004 DS    0H                                                  0662
@ER00004 BR    @14                                                 0662
@PB00004 DS    0H                                                  0663
*   GEN;                                                           0663
PICKPT   ICM   RPARM1,@00,@00(RWORK3)      /* EXTRACTS POINTER       */
STOREPT  STCM  RPARM1,@00,@00(RWORK3)      /* STORES POINTER         */
*   GEN(IDAPATCH);                  /* PATCH SPACE                   */
         IDAPATCH
*   END IDA019RT                    /* MODULE END                    */
*                                                                  0665
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDADIWA )                                       */
*/*%INCLUDE SYSLIB  (IDAICWA )                                       */
*/*%INCLUDE SYSLIB  (IDACIDF )                                       */
*/*%INCLUDE SYSLIB  (IDAIRD  )                                       */
*/*%INCLUDE SYSLIB  (IDAIMWA )                                       */
*/*%INCLUDE SYSLIB  (IDAIXSPL)                                       */
*/*%INCLUDE SYSLIB  (IDARDF  )                                       */
*                                                                  0665
*       ;                                                          0665
         B     @EL00001                                            0665
@DATA    DS    0H
@DATD    DSECT
         DS    0F
IDA019RT CSECT
         DS    0F
@CF00053 DC    F'1'
@CH00053 EQU   @CF00053+2
@CF00155 DC    F'2'
@CF00288 DC    F'7'
@CF00314 DC    F'10'
@CF00083 DC    F'24'
@DATD    DSECT
         DS    0D
IDA019RT CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CA01061 DC    A(IDAJRNSR)
@CV01003 DC    V(IDAABF)
@CV01004 DC    V(IDAAIBF)
@CV01005 DC    V(IDADRQ)
@CV01006 DC    V(IDAFREEB)
@CV01007 DC    V(IDAGNXT)
@CV01008 DC    V(IDAIVIXB)
@CV01009 DC    V(IDASBF)
@CV01010 DC    V(IDATJXIT)
@CV01011 DC    V(IDAWRBFR)
@CV01012 DC    V(IDA019RC)
@CV01013 DC    V(IDA019RE)
@CV01014 DC    V(IDA019RF)
@CV01015 DC    V(IDA019SA)
@CV01016 DC    V(IDAMVSEG)
@CV01017 DC    V(IDAADSEG)
@CV01018 DC    V(IDAREPOS)
@CV01019 DC    V(IDAGRB)
         DS    0D
HWORD4   DC    H'4'
@DATD    DSECT
*                                                          /*@X04SVLC*/
RDFCTNUA EQU   X'40'                    COMPLEX RDF INDICATOR
RDFCTNUX EQU   X'FF'-RDFCTNUA           RESET COMPLEX MASK
RDFREPLA EQU   X'08'                    COUNT RDF INDICATOR
RDFREPLX EQU   X'FF'-RDFREPLA           RESET COUNT MASK
RDFEMPTI EQU   X'04'                    EMPTY RECORD       /*@X04SVLC*/
RDFLEN   EQU   3                        LENGTH OF RDF
RDFLLOFF EQU   1                        OFFSET WITHIN RDF TO LL
RDFSGLR  EQU   X'00'                   MASK FOR SINGLE RECORD RDF
RDFGRP   EQU   RDFCTNUA                 MASK FOR LL RDF OF A GROUP RDF
RDFCNT   EQU   RDFREPLA                 MASK FOR COUNT RDF
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019RT CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RWORK0   EQU   @00
RRPL     EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
RPARM1   EQU   @12
R14      EQU   @14
R15      EQU   @15
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLLOC   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLKEY   EQU   RPLOPT2
RPLADR   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLBUFL  EQU   RPLCOMN+52
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLDDDD  EQU   RPLRBAR+4
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMB   EQU   0
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBCREAT EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBLSR   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHSSR   EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHEFLGS EQU   IDAPLH+4
PLHSRINV EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHDSCAN EQU   PLHEFLGS
PLHFLG3  EQU   IDAPLH+6
PLHSRBSG EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHAFLGS EQU   IDAPLH+7
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJRNLL EQU   IDAPLH+32
PLHJCODE EQU   IDAPLH+40
PLHLRECL EQU   IDAPLH+48
PLHDBUFC EQU   IDAPLH+52
PLHRECP  EQU   IDAPLH+60
PLHFSP   EQU   IDAPLH+64
PLHRDFP  EQU   IDAPLH+68
PLHSRSID EQU   IDAPLH+74
PLHDIOB  EQU   IDAPLH+76
PLHSAVE1 EQU   IDAPLH+84
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE4 EQU   IDAPLH+96
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHDDDD  EQU   PLHEOVPT
PLHIBUFC EQU   IDAPLH+188
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHNOSEG EQU   IDAPLH+240
PLHSRCSG EQU   IDAPLH+242
PLHKEYPT EQU   IDAPLH+248
PLHEND   EQU   IDAPLH+280
PLHKEY   EQU   0
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCEXC  EQU   BUFCFLG1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCDDDD EQU   IDABUFC+8
BUFCORBA EQU   IDABUFC+12
BUFCBAD  EQU   IDABUFC+20
BUFCINV  EQU   IDABUFC+28
BUFXIRBA EQU   IDABUFC+40
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDDST   EQU   AMDATTR
AMDNEST  EQU   IDAAMDSB+4
AMDRKP   EQU   IDAAMDSB+6
AMDKEYLN EQU   IDAAMDSB+8
AMDCIPCA EQU   IDAAMDSB+12
AMDFSCA  EQU   IDAAMDSB+14
AMDCINV  EQU   IDAAMDSB+20
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
IDADIWA  EQU   0
DIWATV   EQU   IDADIWA+1
DIWFLG1  EQU   IDADIWA+4
DIWFLG2  EQU   IDADIWA+5
DIWPLH   EQU   IDADIWA+16
DIWBUFC  EQU   IDADIWA+20
DIWSAVE  EQU   IDADIWA+28
IDAICWA  EQU   0
ICWFLG1  EQU   IDAICWA+1
ICWVSE   EQU   ICWFLG1
ICWCHN   EQU   IDAICWA+4
ICWBUFC  EQU   IDAICWA+8
ICWPSEO  EQU   IDAICWA+20
ICWPTL   EQU   IDAICWA+55
IDACIDF  EQU   0
CIDFOSET EQU   IDACIDF
CIDFLL   EQU   IDACIDF+2
IDAIXH   EQU   0
IXHFLPLN EQU   IDAIXH+2
IXHPTLS  EQU   IDAIXH+3
IXHBRBA  EQU   IDAIXH+4
IXHFSO   EQU   IDAIXH+18
IXHLEO   EQU   IDAIXH+20
IXHSEO   EQU   IDAIXH+22
IDAIBFLP EQU   0
IBFLPF   EQU   IDAIBFLP
IBFLPL   EQU   IDAIBFLP+1
IBFLP3   EQU   IDAIBFLP+2
IBFLP2   EQU   IBFLP3
IDASELL  EQU   0
IXSELL   EQU   IDASELL
IDAIXK   EQU   0
IDAIMWA  EQU   0
IMWFLAGS EQU   IDAIMWA+1
IMWIXSP  EQU   IDAIMWA+4
IMWISWKA EQU   IDAIMWA+8
IDAIXSPL EQU   0
IXSILN   EQU   IDAIXSPL+13
IXSBFLG  EQU   IDAIXSPL+17
IXSHEP   EQU   IDAIXSPL+20
IDARDF   EQU   0
RDFRBYTE EQU   IDARDF
RDFCTNU  EQU   RDFRBYTE
RDFSEG   EQU   RDFRBYTE
RDFNOT1  EQU   RDFSEG
RDF1ST   EQU   RDFSEG
RDFREPL  EQU   RDFRBYTE
RDFLL    EQU   IDARDF+1
IDADATA  EQU   0
IDAKEY   EQU   0
ICWKEY2  EQU   0
ICWKEY3  EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00040 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
KEY      EQU   IDAKEY
AMDATA   EQU   IDADATA
RDFEMPTY EQU   RDFRBYTE
RDFTYPE  EQU   RDFRBYTE
IXSLEP   EQU   IDAIXSPL+28
IXSSEP   EQU   IDAIXSPL+24
IXSPEC   EQU   IDAIXSPL+19
IXSEKON  EQU   IDAIXSPL+18
@NM00060 EQU   IXSBFLG
IXSLELV  EQU   IXSBFLG
IXSSSRH  EQU   IXSBFLG
IXSNOSR  EQU   IDAIXSPL+16
IXSKLEN  EQU   IDAIXSPL+14
IXSTLN   EQU   IDAIXSPL+12
IXSARG   EQU   IDAIXSPL+8
IXSBUFC  EQU   IDAIXSPL+4
IXSSTRBA EQU   IDAIXSPL
IMWKEY1  EQU   IDAIMWA+76
@NM00059 EQU   IDAIMWA+72
IMWNSOFF EQU   IDAIMWA+70
IMWCIMVN EQU   IDAIMWA+68
@NM00058 EQU   IDAIMWA+67
IMWSVIEL EQU   IDAIMWA+66
IMWIEL   EQU   IDAIMWA+65
IMWFGAIN EQU   IDAIMWA+64
IMWBUFP  EQU   IDAIMWA+60
IMWLBUFC EQU   IDAIMWA+56
IMWIPTR  EQU   IDAIMWA+52
IMWXPTR  EQU   IDAIMWA+48
IMWIKEYP EQU   IDAIMWA+44
IMWXKEYP EQU   IDAIMWA+40
IMWLEN   EQU   IDAIMWA+2
IMWBSE   EQU   IMWFLAGS
IMWRIPL  EQU   IMWFLAGS
IMWNEWHL EQU   IMWFLAGS
IMWID    EQU   IDAIMWA
IXKEY    EQU   IDAIXK
IBFLP1   EQU   IBFLP2
IXHFLGS  EQU   IDAIXH+17
IXHLV    EQU   IDAIXH+16
IXHXX    EQU   IDAIXH+12
IXHHP    EQU   IDAIXH+8
IXHLL    EQU   IDAIXH
@NM00057 EQU   CIDFLL
CIDFBUSY EQU   CIDFLL
ICWKEY1  EQU   IDAICWA+60
ICWCERP  EQU   IDAICWA+59
ICWCEL   EQU   IDAICWA+58
ICWCEF   EQU   IDAICWA+57
ICWCER   EQU   IDAICWA+56
ICWREQ   EQU   IDAICWA+54
ICWCRSEG EQU   IDAICWA+52
ICWNOSEG EQU   IDAICWA+50
ICWNEST  EQU   IDAICWA+48
ICWKEY3L EQU   IDAICWA+46
ICWKEY2L EQU   IDAICWA+44
ICWKEY1L EQU   IDAICWA+42
ICWLN    EQU   IDAICWA+40
ICWARDBP EQU   IDAICWA+36
ICWTPTR  EQU   IDAICWA+32
ICWTBASE EQU   IDAICWA+28
ICWADD   EQU   IDAICWA+24
ICWSCNT  EQU   IDAICWA+22
ICWPRBA  EQU   IDAICWA+16
ICWCRBA  EQU   IDAICWA+12
ICWLEN   EQU   IDAICWA+2
ICWENDRQ EQU   ICWFLG1
ICWSPLIT EQU   ICWFLG1
ICWKRDS  EQU   ICWFLG1
ICWVNE   EQU   ICWFLG1
ICWRBAOK EQU   ICWFLG1
ICWWAGM  EQU   ICWFLG1
ICWWNF   EQU   ICWFLG1
ICWID    EQU   IDAICWA
@NM00056 EQU   IDADIWA+92
@NM00055 EQU   IDADIWA+88
@NM00054 EQU   IDADIWA+84
@NM00053 EQU   IDADIWA+80
@NM00052 EQU   IDADIWA+76
@NM00051 EQU   IDADIWA+72
@NM00050 EQU   IDADIWA+68
@NM00049 EQU   IDADIWA+64
@NM00048 EQU   IDADIWA+60
@NM00047 EQU   IDADIWA+56
DIWINRBA EQU   IDADIWA+52
DIWRKCT  EQU   IDADIWA+48
DIWSAVE5 EQU   DIWSAVE+16
DIWSAVE4 EQU   DIWSAVE+12
DIWSAVE3 EQU   DIWSAVE+8
DIWSAVE2 EQU   DIWSAVE+4
DIWSAVE1 EQU   DIWSAVE
DIWSPLTP EQU   IDADIWA+24
DIWHRBA  EQU   IDADIWA+12
DIWLRBA  EQU   IDADIWA+8
@NM00046 EQU   IDADIWA+6
DIWFSPF  EQU   DIWFLG2
DIW1ST   EQU   DIWFLG1
DIWNOT1  EQU   DIWFLG1
DIWSHIFT EQU   DIWFLG1
DIWGSPC  EQU   DIWFLG1
DIWEOKR  EQU   DIWFLG1
DIWPFERR EQU   DIWFLG1
DIWCISPL EQU   DIWFLG1
DIWCAS   EQU   DIWFLG1
DIWLEN   EQU   IDADIWA+2
DIWID    EQU   IDADIWA
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00045 EQU   IDAAMDSB+41
@NM00044 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDFSCI  EQU   IDAAMDSB+16
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCHAIN EQU   IDABUFC+48
BUFXORBA EQU   IDABUFC+44
BUFCNXT2 EQU   IDABUFC+37
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCCPA  EQU   IDABUFC+16
BUFCAMB  EQU   BUFCPLH
@NM00043 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00042 EQU   IDABUFDR+16
BUFDBUFC EQU   IDABUFDR+12
@NM00041 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00039 EQU   IDAPLH+265
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00038 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHRBUFC EQU   IDAPLH+192
PLHNRBA  EQU   IDAPLH+184
PLHAR14  EQU   IDAPLH+176
@NM00037 EQU   IDAPLH+172
@NM00036 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHAMB   EQU   IDAPLH+108
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE2 EQU   IDAPLH+88
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHRDFC  EQU   IDAPLH+72
PLHNBUFC EQU   IDAPLH+56
PLHARDB  EQU   IDAPLH+44
@NM00035 EQU   IDAPLH+43
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
@NM00034 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHINVAL EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
@NM00033 EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHASKBF EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00032 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00031 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00030 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00029 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00028 EQU   IDAAMBL+31
@NM00027 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00026 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00025 EQU   AMBCSWD1+1
@NM00024 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
@NM00023 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00022 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00021 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00020 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00019 EQU   AMBINFL
@NM00018 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00017 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00016 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00015 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
@NM00014 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00013 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00012 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00011 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00010 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00009 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00008 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00007 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00006 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00005 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00004 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00003 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
@NM00002 EQU   RPLRBAR+3
@NM00001 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00162 EQU   HAVDIWA
@PB00002 EQU   @EC00568
@RC00586 EQU   @EL00001
@PB00003 EQU   @PB00004
@ENDDATA EQU   *
         END   IDA019RT,(C'PLS2133',0701,78172)
