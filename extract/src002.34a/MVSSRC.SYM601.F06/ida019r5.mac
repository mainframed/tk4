         TITLE 'IDA019R5--VSAM I/O ERROR ROUTINE                       *
                        '
IDA019R5 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
         DC    AL1(16)                                             0001
         DC    C'IDA019R5  78.207'                                 0001
IDALOCEX DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00486-IDALOCEX)
         ENTRY IDALOCEX
IDAEXITR DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00587-IDAEXITR)
         ENTRY IDAEXITR
IDAEXEX  DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00691-IDAEXEX)
         ENTRY IDAEXEX
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
         IDASVR14
*/* LOCATE THE BUFC IN ERROR.  IF NONE FOUND, RETURN TO CALLER.      */
*                                                                  0322
*   RPARM1=ZERO;                    /* INDICATE NO BUFC      @X04SVMR*/
         SLR   RPARM1,RPARM1                                       0322
*   IF AMBLSR=ON×AMBGSR=ON THEN     /* CHECK I/O CHAIN       @X04SVMR*/
         TM    AMBLSR(RAMB),B'01100000'                            0323
         BZ    @RF00323                                            0323
*     DO;                           /* IF SHARED RESOURCES   @X04SVMR*/
*       RAMB=IOMAMB;                /* SET AMB ADDRESS       @X04SVMR*/
         L     @10,PLHDIOB(,RPLH)                                  0325
         L     RAMB,IOMAMB(,@10)                                   0325
*       RBUFC=IOMBUFC;              /* GET ON BUFC CHAIN             */
         L     RBUFC,IOMBUFC(,@10)                                 0326
*       CALL FINDBUFC;              /* LOCATE THE BUFC IN ERROR      */
         BAL   @14,FINDBUFC                                        0327
*     END;                          /* END OF SHR RESOURCE   @X04SVMR*/
*   ELSE                            /* NON-SHARED RESOURCES  @X04SVMR*/
*     DO;                           /*                       @X04SVMR*/
         B     @RC00323                                            0329
@RF00323 DS    0H                                                  0330
*       RAMB=AMBLDTA;               /* POINT TO DATA         @X04SVMR*/
         L     @10,RPLDACB(,RRPL)                                  0330
         L     @10,ACBAMBL(,@10)                                   0330
         L     RAMB,AMBLDTA(,@10)                                  0330
*       RFY                                                        0331
*         RWORK4 RSTD;              /* GET WORK REG          @X04SVMR*/
*                                                                  0331
*       /*************************************************************/
*       /*                                                           */
*       /* SEARCH BOTH THE DATA AND INDEX (IF PRESENT) BUFFER POOLS  */
*       /* UNTIL EITHER AN ERROR IS FOUND OR AMB IS NOT FOUND        */
*       /*                                                   @X04SVMR*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0332
*       DO RWORK4=AMBLNUM TO ONE BY-ONE;/* SEARCH ALL AMBS   @X04SVMR*/
         LH    RWORK4,AMBLNUM(,@10)                                0332
         B     @DE00332                                            0332
@DL00332 DS    0H                                                  0333
*         RBUFC=BUFDBUFC;           /* PTR TO 1ST BUFC       @X04SVMR*/
         L     @10,AMBBUFC(,RAMB)                                  0333
         L     RBUFC,BUFDBUFC(,@10)                                0333
*         CALL FINDBUFC;            /* SEARCH FOR ERROR      @X04SVMR*/
         BAL   @14,FINDBUFC                                        0334
*         RBUFC=BUFDRPFB;           /* PTR TO 1ST PFMT BUFC  @X04SVMR*/
         L     @10,AMBBUFC(,RAMB)                                  0335
         L     RBUFC,BUFDRPFB(,@10)                                0335
*         CALL FINDBUFC;            /* SEARCH AGAIN          @X04SVMR*/
         BAL   @14,FINDBUFC                                        0336
*         IF RPARM1=ZERO THEN       /* IF NO ERROR YET,      @X04SVMR*/
         LTR   RPARM1,RPARM1                                       0337
         BNZ   @RF00337                                            0337
*           RAMB=AMBLIX;            /* POINT TO INDEX        @X04SVMR*/
         L     @10,RPLDACB(,RRPL)                                  0338
         L     @10,ACBAMBL(,@10)                                   0338
         L     RAMB,AMBLIX(,@10)                                   0338
*       END;                        /* END OF BUFFER POOL    @X04SVMR*/
@RF00337 BCTR  RWORK4,0                                            0339
@DE00332 LTR   RWORK4,RWORK4                                       0339
         BP    @DL00332                                            0339
*       RFY                                                        0340
*         RWORK4 UNRSTD;            /* DROP WORK REG         @X04SVMR*/
*     END;                          /* END OF NON-SHARED     @X04SVMR*/
*   IF RPARM1=ZERO THEN             /* IF NO BUFC IN ERROR   @X04SVMR*/
@RC00323 LTR   RPARM1,RPARM1                                       0342
         BNZ   @RF00342                                            0342
*     CALL EXIT;                    /* RETURN                @X04SVMR*/
         BAL   @14,EXIT                                            0343
*   RBUFC=RPARM1;                   /* GET ERROR BUFC ADDR   @X04SVMR*/
@RF00342 LR    RBUFC,RPARM1                                        0344
*/* SET I/O ERROR QUALIFIER CODE                             @X04SVMR*/
*                                                                  0345
*   IF AMBTYPE=AMBDATA              /* COME HERE IF DATA             */
*     THEN                          /* COME HERE IF DATA             */
         TM    AMBTYPE(RAMB),B'01000000'                           0345
         BNZ   @RF00345                                            0345
*     DO;                                                          0346
*       IF BUFCER1=ON               /* IS IT A READ ERROR            */
*         THEN                      /* IF SO, COME HERE              */
         TM    BUFCER1(RBUFC),B'00010000'                          0347
         BNO   @RF00347                                            0347
*         DO;                                                      0348
*           PLHSKPER=ON;            /* SET ON READ SKIP FLAG         */
         OI    PLHSKPER(RPLH),B'00100000'                          0349
*           RPLERRCD=RPLRDERD;      /* SET DATA READ ERROR           */
         MVI   RPLERRCD(RRPL),X'04'                                0350
*         END;                      /* END, DATA READ ERROR          */
*       ELSE                        /* HERE IF WRITE ERROR           */
*         DO;                                                      0352
         B     @RC00347                                            0352
@RF00347 DS    0H                                                  0353
*           IF RPLCNV=ON THEN       /* IF CINV, SET 1ST TIME         */
         TM    RPLCNV(RRPL),B'00100000'                            0353
         BNO   @RF00353                                            0353
*             PLH1ST=ON;            /* TO PREVENT PLH ADVANCE        */
         OI    PLH1ST(RPLH),B'01000000'                            0354
*           ELSE                    /* OTHERWISE, DATA SCAN.         */
*             PLHDSCAN=ON;                                         0355
         B     @RC00353                                            0355
@RF00353 OI    PLHDSCAN(RPLH),B'00000001'                          0355
*           RPLERRCD=RPLWTERD;      /* INDICATE WRITE ERROR          */
@RC00353 MVI   RPLERRCD(RRPL),X'10'                                0356
*         END;                      /* END, DATA WRITE ERROR         */
*     END;                          /* END, DATA I/O ERROR           */
*   ELSE                            /* HERE IF INDEX ERROR           */
*     DO;                                                          0359
         B     @RC00345                                            0359
@RF00345 DS    0H                                                  0360
*       PLHINVAL=ON;                /* INVALIDATE POSITION           */
         OI    PLHINVAL(RPLH),B'00000010'                          0360
*       IF BUFCER1=ON               /* SEE IF A READ ERROR           */
*         THEN                      /* IF SO, COME HERE              */
         TM    BUFCER1(RBUFC),B'00010000'                          0361
         BNO   @RF00361                                            0361
*         DO;                                                      0362
*           IF PLHSSR=ON THEN       /* SEE IF SEQ SET READ           */
         TM    PLHSSR(RPLH),B'00010000'                            0363
         BNO   @RF00363                                            0363
*             RPLERRCD=RPLRDERS;    /* HERE IF SO                    */
         MVI   RPLERRCD(RRPL),X'0C'                                0364
*           ELSE                    /* OTHERWISE, INDEX ERROR        */
*             RPLERRCD=RPLRDERI;                                   0365
         B     @RC00363                                            0365
@RF00363 MVI   RPLERRCD(RRPL),X'08'                                0365
*         END;                      /* END, READ ERROR CODE          */
*       ELSE                        /* HERE IF WRITE ERROR           */
*         DO;                                                      0367
         B     @RC00361                                            0367
@RF00361 DS    0H                                                  0368
*           IF PLHSSR=ON THEN       /* SEE IF SEQ SET WRITE          */
         TM    PLHSSR(RPLH),B'00010000'                            0368
         BNO   @RF00368                                            0368
*             RPLERRCD=RPLWTERS;    /* YES, SET SS CODE              */
         MVI   RPLERRCD(RRPL),X'18'                                0369
*           ELSE                    /* NO, SET INDEX ERROR           */
*             RPLERRCD=RPLWTERI;    /* NO, SET INDEX ERROR           */
         B     @RC00368                                            0370
@RF00368 MVI   RPLERRCD(RRPL),X'14'                                0370
*         END;                      /* END, WRITE ERROR              */
@RC00368 DS    0H                                                  0372
*     END;                          /* END, INDEX ERROR CODE         */
@RC00361 DS    0H                                                  0373
*/* IF THERE IS ENOUGH ROOM FOR IT, BUILD AN ERROR MESSAGE IN THE    */
*/* USER AREA.                                                       */
*                                                                  0373
*   RESPECIFY                                                      0373
*    (RWORK1,                                                      0373
*     RWORK2,                                                      0373
*     RWORK4,                                                      0373
*     RWORK5) RESTRICTED;           /* GET REGISTER                  */
@RC00345 DS    0H                                                  0374
*   IF RPLEMLEN>=LENGTH(ERBASE)     /* SEE IF ROOM FOR MSG           */
*     THEN                          /* IF SO CONSTRUCT MSG           */
         CLC   RPLEMLEN(2,RRPL),@CH03097                           0374
         BL    @RF00374                                            0374
*     DO;                                                          0375
*       RWORK5=LENGTH(ERBASE);      /* GET MESSAGE LENGTH            */
         LA    RWORK5,128                                          0376
*       RWORK1=RRPL;                /* COPY RPL BASE                 */
         LR    RWORK1,RRPL                                         0377
*       RESPECIFY                                                  0378
*         IFGRPL BASED(RWORK1);     /* RESET RPL BASE                */
*       RESPECIFY                                                  0379
*         R15 UNRESTRICTED;         /* DROP REGISTER                 */
*       ERMLL1=RWORK5;              /* SET UP MSG LENGTH             */
         L     @10,RPLERMSA(,RWORK1)                               0380
         STH   RWORK5,ERMLL1(,@10)                                 0380
*       ERMZERO1=ZERO;              /* SET TO ZEROES                 */
         SLR   @07,@07                                             0381
         STH   @07,ERMZERO1(,@10)                                  0381
*       ERMLL2=RWORK5-LENGTH(ERMLL1)-LENGTH(ERMZERO1);/* SET LL      */
         LR    @00,RWORK5                                          0382
         SL    @00,@CF00042                                        0382
         STH   @00,ERMLL2(,@10)                                    0382
*       ERMZERO2=ZERO;              /* SET TO ZERO                   */
         STH   @07,ERMZERO2(,@10)                                  0383
*       IF PSATOLD=ZERO THEN        /* IF UNDER SRB,         @ZA32351*/
         C     @07,PSATOLD                                         0384
         BNE   @RF00384                                            0384
*         DO;                       /* NO TIME SVC.          @Z30SSMR*/
*           ERTIME=BLANK;           /* NO TIME               @Z30SSMR*/
         MVI   ERTIME+1(@10),C' '                                  0386
         MVC   ERTIME+2(6,@10),ERTIME+1(@10)                       0386
         MVI   ERTIME(@10),C' '                                    0386
*           ERDATE=BLANK;           /* NO DATE               @Z30SSMR*/
         MVI   ERDATE+1(@10),C' '                                  0387
         MVC   ERDATE+2(3,@10),ERDATE+1(@10)                       0387
         MVI   ERDATE(@10),C' '                                    0387
*         END;                      /* END SRB CODE.         @Z30SSMR*/
*       ELSE                        /* NON-SRB MODE          @Z30SSMR*/
*         DO;                       /*                       @X04SVMR*/
         B     @RC00384                                            0389
@RF00384 DS    0H                                                  0390
*           RWORK5=ADDR(IDAERMSG);  /* GET ADDRESS OF MSG            */
         L     RWORK5,RPLERMSA(,RWORK1)                            0390
*           GEN SETS(ERTIME,ERMBFRA,ERDATE);                       0391
         TIME  DEC                      GET TIME AND DATE
         ST   RWORK0,ERMBFRA(RWORK5)   SAVE TIME IN PACKED FORM
         UNPK  ERTIME(NINE,RWORK5),ERMBFRA(FIVE,RWORK5) UNPK TIME
         ST    R1,ERMBFRA(RWORK5)      SAVE DATE IN PACKED FORM
         UNPK  ERDATE(FIVE,RWORK5),ERMBFRA+ONE(THREE,RWORK5) UNPK
*         END;                      /* TIME SET              @X04SVMR*/
*       RRPL=RWORK1;                /* RESTORE RPL BASE              */
@RC00384 LR    RRPL,RWORK1                                         0393
*       RFY                                                        0394
*         IFGRPL BASED(RRPL);       /* DEFINE RPL BASE               */
*       RFY                                                        0395
*         RWORK1 UNRSTD;            /* DROP WORK REGISTER            */
*       ERCOMMA=COMMA;              /* SET PUNCTUATION               */
         L     @10,RPLERMSA(,RRPL)                                 0396
         MVI   ERCOMMA(@10),C','                                   0396
*       COMMA0=COMMA;               /* PUNCTUATION                   */
         MVI   COMMA0(@10),C','                                    0397
*       ERMBFRA=BUFCBAD;            /* SET SYS BUFFER ADDR           */
         MVC   ERMBFRA(4,@10),BUFCBAD(RBUFC)                       0398
*       COMMA1=COMMA;               /* PUNCTUATION                   */
         MVI   COMMA1(@10),C','                                    0399
*       COMMA4=COMMA;               /* PUNCTUATION                   */
         MVI   COMMA4(@10),C','                                    0400
*       COMMA5=COMMA;               /* PUNCTUATION                   */
         MVI   COMMA5(@10),C','                                    0401
*       COMMA2=COMMA;               /* PUNCTUATION                   */
         MVI   COMMA2(@10),C','                                    0402
*       ERUNTYPE=ERMDACD;           /* UNIT TYPE FIELD               */
         MVC   ERUNTYPE(2,@10),@CC03018                            0403
*       ERJOBNM=BIBJOBNM;           /* SET JOB NAME          @Z30SSMR*/
         L     @07,RPLDACB(,RRPL)                                  0404
         L     @07,ACBAMBL(,@07)                                   0404
         L     @07,AMBLBIB(,@07)                                   0404
         MVC   ERJOBNM(8,@10),BIBJOBNM(@07)                        0404
*       ERSTEPNM=BIBSTPNM;          /* SET STEP NAME         @Z30SSMR*/
         MVC   ERSTEPNM(8,@10),BIBSTPNM(@07)                       0405
*       ERDDNM=BIBDDNM;             /* SET DD NAME           @Z30SSMR*/
         MVC   ERDDNM(8,@10),BIBDDNM(@07)                          0406
*       IF BUFCER1=ON THEN          /* IF A READ ERROR, USE          */
         TM    BUFCER1(RBUFC),B'00010000'                          0407
         BNO   @RF00407                                            0407
*         RWORK4=ADDR(CPARSEEK);    /* READ SEEK             @X04SVMR*/
         L     RWORK4,BUFCCPA(,RBUFC)                              0408
         LA    RWORK4,CPARSEEK(,RWORK4)                            0408
*       ELSE                        /* OTHERWISE, WRITE SEEK         */
*         RWORK4=ADDR(CPAWSEEK);    /*                       @X04SVMR*/
*                                                                  0409
         B     @RC00407                                            0409
@RF00407 L     RWORK4,BUFCCPA(,RBUFC)                              0409
         LA    RWORK4,CPAWSEEK(,RWORK4)                            0409
*       /*************************************************************/
*       /*                                                           */
*       /* COPY BBCCHHR TO MESSAGE AREA.                     @X04SVMR*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0410
*       ERDASEEK(ONE:LENGTH(BBCCHHR))=RWORK4->BBCCHHR;             0410
@RC00407 L     @10,RPLERMSA(,RRPL)                                 0410
         MVC   ERDASEEK(7,@10),BBCCHHR(RWORK4)                     0410
*       RFY                                                        0411
*         BBCCHHR BASED(ADDR(ERDASEEK));/* NEW BASE          @X04SVMR*/
*       IF CCWPTR^=ZERO             /* IF A CSW IS HERE,             */
*         THEN                      /* GET THE COMMAND CODE          */
         L     @07,PLHDIOB(,RPLH)                                  0412
         L     @07,IOSBPTR(,@07)                                   0412
         L     @07,CCWPTR-1(,@07)                                  0412
         LA    @07,0(,@07)                                         0412
         LTR   @07,@07                                             0412
         BZ    @RF00412                                            0412
*         DO;                                                      0413
*           RWORK2=ADDR(LASTCCW);   /* POINT TO LAST CCW             */
         SL    @07,@CF00048                                        0414
         LR    RWORK2,@07                                          0414
*           RWORK5=ADDR(IDAERMSG);  /* GET ADDRESS OF MSG            */
         LR    RWORK5,@10                                          0415
*           GEN SETS(EROPER) REFS(TABLE);                          0416
*                                           /*               @X04SVMR*/
         UNPK  EROPER(THREE,RWORK5),K0(TWO,RWORK2) COMMAND CODE
         TR    EROPER(TWO,RWORK5),TABLE-CON0    TRANSLATE CODE
*           EROPER(3:6)=OPDEF;      /* FILL IN REST OF FIELD         */
*                                                                  0417
         L     @10,RPLERMSA(,RRPL)                                 0417
         MVC   EROPER+2(4,@10),OPDEF                               0417
*           /*********************************************************/
*           /*                                                       */
*           /* IF NOT A REPLICATED READ DETERMINE THE PHYSICAL BLOCK */
*           /* IN ERROR.                                     @X04SVMR*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0418
*           IF CPARREPL=OFF×        /* IF NOT REPLICATED     @X04SVMR*/
*               BUFCER1=OFF THEN    /* OR NOT A READ         @X04SVMR*/
*                                                                  0418
         L     @10,BUFCCPA(,RBUFC)                                 0418
         TM    CPARREPL(@10),B'01000000'                           0418
         BZ    @RT00418                                            0418
         TM    BUFCER1(RBUFC),B'00010000'                          0418
         BNZ   @RF00418                                            0418
@RT00418 DS    0H                                                  0419
*             /*******************************************************/
*             /*                                                     */
*             /* SET THE DIRECT ACCESS DEVICE ADDRESS.               */
*             /* SEGMENT(SETSEEK)REQUEST                             */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0419
*             DO;                                                  0419
*               GOTO SETSEEK;                                      0420
         B     SETSEEK                                             0420
*SETSEEK#:                                                         0421
*             END;                  /* SET MBBCCHHR          @X04SVMR*/
*         END;                      /* END OF CSW PRESENT            */
*       ELSE                        /* HERE IF NO CSW                */
*         EROPER=BLANK;                                            0423
         B     @RC00412                                            0423
@RF00412 L     @10,RPLERMSA(,RRPL)                                 0423
         MVI   EROPER+1(@10),C' '                                  0423
         MVC   EROPER+2(4,@10),EROPER+1(@10)                       0423
         MVI   EROPER(@10),C' '                                    0423
*       GEN SETS(ERDASEEK);                                        0424
@RC00412 DS    0H                                                  0424
*                                   /* SET SEEK FIELD        @X04SVMR*/
*        UNPACK BBCCHHR                                        @X04SVMR
         UNPK  ERDASEEK(FIFTEEN,RWORK5),ERDASEEK(EIGHT,RWORK5)
         TR    ERDASEEK(FOURTEEN,RWORK5),TABLE-CON0    MAKE PRINTABLE
*       RWORK5=IOSSKM;              /* GET EXTENT NUMBER     @X04SVMR*/
         L     @10,PLHDIOB(,RPLH)                                  0425
         L     @07,IOSBPTR(,@10)                                   0425
         SLR   RWORK5,RWORK5                                       0425
         IC    RWORK5,IOSSKM(,@07)                                 0425
*       RFY                                                        0426
*         RWORK1 RSTD;              /* GET WORK REGISTER             */
*       RWORK1=(RWORK5)*LENGTH(DEBDASD);/*                   @ZA33421*/
         LR    RWORK1,RWORK5                                       0427
         SLA   RWORK1,4                                            0427
*       RWORK5=AMBDEBPT+LENGTH(DEBBASIC)+RWORK1;/* SETUP             */
         LA    RWORK5,32                                           0428
         AL    RWORK5,AMBDEBPT(,RAMB)                              0428
         ALR   RWORK5,RWORK1                                       0428
*       RFY                                                        0429
*         RWORK1 UNRSTD;            /* DROP WORK REGISTER            */
*       RESPECIFY                                                  0430
*         DEBDASD BASED(RWORK5);    /* DEFINE EXTENT BASE            */
*       COMMA3=COMMA;               /* PUNCTUATION                   */
         L     @07,RPLERMSA(,RRPL)                                 0431
         MVI   COMMA3(@07),C','                                    0431
*       ERUNIT=UCBNAME;             /* UNIT NAME                     */
         L     @05,UCBPTR-1(,RWORK5)                               0432
         LA    @05,0(,@05)                                         0432
         MVC   ERUNIT(3,@07),UCBNAME(@05)                          0432
*       COMMA6=COMMA;               /* PUNCTUATION                   */
         MVI   COMMA6(@07),C','                                    0433
*       ERMVOL=UCBVOLI;             /* SET VOLUME SERIAL             */
         MVC   ERMVOL(6,@07),UCBVOLI(@05)                          0434
*       COMMA7=COMMA;               /* PUNCTUATION                   */
         MVI   COMMA7(@07),C','                                    0435
*       ERDESC=UNKNOWN;             /* SET UNKNOWN MESSAGE           */
*                                                                  0436
         MVC   ERDESC(15,@07),UNKNOWN                              0436
*       /*************************************************************/
*       /*                                                           */
*       /* DETERMINE GENERAL CATEGORY OF THE ERROR                   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0437
*       RFY                                                        0437
*         RWORK2 RSTD;              /* GET WORK REG          @X04SVMR*/
*       IF ECBCODE=PURGED THEN      /* IF PURGED REQUEST             */
         L     @10,IOMECBPT(,@10)                                  0438
         CLI   ECBCODE(@10),B'01001000'                            0438
         BNE   @RF00438                                            0438
*         ERDESC=PURGEMSG;          /* SET PURGE MESSAGE             */
         MVC   ERDESC(15,@07),PURGEMSG                             0439
*       IF ECBCODE=RDHAERR THEN     /* IF READ HOME ADDRESS OR       */
@RF00438 L     @10,PLHDIOB(,RPLH)                                  0440
         L     @10,IOMECBPT(,@10)                                  0440
         CLI   ECBCODE(@10),B'01001111'                            0440
         BNE   @RF00440                                            0440
*         ERDESC=RDHAMSG;           /* RECORD ZERO ERROR, SET        */
         L     @10,RPLERMSA(,RRPL)                                 0441
         MVC   ERDESC(15,@10),RDHAMSG                              0441
*       IF ECBCODE=PERMERR          /* MESSAGE. OTHERWISE,           */
*         THEN                      /* DETERMINE TYPE OF I/O         */
@RF00440 L     @10,PLHDIOB(,RPLH)                                  0442
         L     @07,IOMECBPT(,@10)                                  0442
         CLI   ECBCODE(@07),B'01000001'                            0442
         BNE   @RF00442                                            0442
*         DO;                       /* ERROR IN MORE DETAIL.         */
*           IF INCORLEN=ON THEN     /* SEE IF LENGTH ERROR           */
         L     @10,IOSBPTR(,@10)                                   0444
         TM    INCORLEN(@10),B'01000000'                           0444
         BNO   @RF00444                                            0444
*             ERDESC=LENMSG;        /* YES, SET MESSAGE              */
*                                                                  0445
         L     @10,RPLERMSA(,RRPL)                                 0445
         MVC   ERDESC(15,@10),LENMSG                               0445
*           /*********************************************************/
*           /*                                                       */
*           /* IF NOT PURGED OR READ HOME ADDRESS ERROR, QUALIFY THE */
*           /* CAUSE OF THE ERROR FURTHER.                           */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0446
*           IF UNITCHK=ON           /* SEE IF UNIT CHECK             */
*             THEN                  /* IF SO, ISOLATE TYPE           */
@RF00444 L     @10,PLHDIOB(,RPLH)                                  0446
         L     @10,IOSBPTR(,@10)                                   0446
         TM    UNITCHK(@10),B'00000010'                            0446
         BNO   @RF00446                                            0446
*             DO;                                                  0447
*               ERDESC=UNITCHKM;    /* SET UNIT CHECK MESSAGE        */
         L     @10,RPLERMSA(,RRPL)                                 0448
         MVC   ERDESC(15,@10),UNITCHKM                             0448
*               DO RWORK2=DIM(UNCKCDS) TO ONE BY-ONE;/* CHK ALL      */
         LA    RWORK2,16                                           0449
@DL00449 DS    0H                                                  0450
*                 RWORK5=SENSE&UNCKCD(RWORK2);/* ISOLATE ONE SENSE 0450
*                                      BIT                           */
         L     @10,PLHDIOB(,RPLH)                                  0450
         L     @10,IOSBPTR(,@10)                                   0450
         LR    @07,RWORK2                                          0450
         MH    @07,@CH02876                                        0450
         LA    @05,UNCKCD-17(@07)                                  0450
         SLR   RWORK5,RWORK5                                       0450
         ICM   RWORK5,3,0(@05)                                     0450
         LH    @10,SENSE(,@10)                                     0450
         N     @10,@CF03106                                        0450
         NR    RWORK5,@10                                          0450
*                 IF RWORK5^=ZERO THEN/* IF SENSE BIT ON THEN        */
         LTR   RWORK5,RWORK5                                       0451
         BZ    @RF00451                                            0451
*                   ERDESC=UNCKMSG(RWORK2);/* SET MESSAGE            */
         L     @10,RPLERMSA(,RRPL)                                 0452
         LA    @05,UNCKMSG-17(@07)                                 0452
         MVC   ERDESC(15,@10),0(@05)                               0452
*               END;                /* UNIT CHK ISOLATED             */
@RF00451 BCTR  RWORK2,0                                            0453
         CL    RWORK2,@CF00046                                     0453
         BNL   @DL00449                                            0453
*             END;                  /* END OF UNIT CHECK             */
*                                                                  0454
*           /*********************************************************/
*           /*                                                       */
*           /* SEARCH FOR OTHER STATUS IN THE CSW                    */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0455
*           DO RWORK2=DIM(CSWCODES) TO ONE BY-ONE;/* CHECK ALL FLGS  */
@RF00446 LA    RWORK2,7                                            0455
@DL00455 DS    0H                                                  0456
*             RWORK5=IOSTATUS&STATFLGS(RWORK2);/* ISOLATE A FLAG     */
         L     @10,PLHDIOB(,RPLH)                                  0456
         L     @10,IOSBPTR(,@10)                                   0456
         LR    @07,RWORK2                                          0456
         MH    @07,@CH02876                                        0456
         LA    @05,STATFLGS-17(@07)                                0456
         SLR   RWORK5,RWORK5                                       0456
         ICM   RWORK5,3,0(@05)                                     0456
         LH    @10,IOSTATUS(,@10)                                  0456
         N     @10,@CF03106                                        0456
         NR    RWORK5,@10                                          0456
*             IF RWORK5^=ZERO THEN  /* WAS FLAG ON?                  */
         LTR   RWORK5,RWORK5                                       0457
         BZ    @RF00457                                            0457
*               ERDESC=STATMSGS(RWORK2);/* YES, SET UP MESSAGE       */
         L     @10,RPLERMSA(,RRPL)                                 0458
         LA    @05,STATMSGS-17(@07)                                0458
         MVC   ERDESC(15,@10),0(@05)                               0458
*           END;                    /* END OF STATUS SEARCH          */
@RF00457 BCTR  RWORK2,0                                            0459
         CL    RWORK2,@CF00046                                     0459
         BNL   @DL00455                                            0459
*         END;                      /* END OF PERM ERROR             */
*       RWORK5=ADDR(IDAERMSG);      /* PTR TO MESSAGE        @X04SVMR*/
@RF00442 L     @10,RPLERMSA(,RRPL)                                 0461
         LR    RWORK5,@10                                          0461
*       COMMA8=COMMA;               /* PUNCTUATION                   */
         MVI   COMMA8(@10),C','                                    0462
*       ERDACOM=COMMA;              /* PUNCTUATION                   */
         MVI   ERDACOM(@10),C','                                   0463
*       ERDAAM=AM0CON;              /* ACCESS METHOD                 */
         MVC   ERDAAM(6,@10),AM0CON                                0464
*       IF BUFCER1=ON THEN          /* IF READ ERROR, POINT          */
         TM    BUFCER1(RBUFC),B'00010000'                          0465
         BNO   @RF00465                                            0465
*         RWORK2=ADDR(BUFCDDDD);    /* TO INPUT RBA, OTHERWISE       */
         LA    RWORK2,BUFCDDDD(,RBUFC)                             0466
*       ELSE                        /* POINT TO OUTPUT RBA.          */
*         RWORK2=ADDR(BUFCORBA);                                   0467
         B     @RC00465                                            0467
@RF00465 LA    RWORK2,BUFCORBA(,RBUFC)                             0467
*       GEN SETS(ERRBA);                                           0468
@RC00465 DS    0H                                                  0468
         UNPK ERRBA(NINE,RWORK5),K0(FIVE,RWORK2)
         TR    ERRBA(EIGHT,RWORK5),TABLE-CON0    MAKE PRINTABLE
*       COMMA05=COMMA;              /* PUNCTUATION                   */
         L     @10,RPLERMSA(,RRPL)                                 0469
         MVI   COMMA05(@10),C','                                   0469
*       IF AMBTYPE=AMBINDEX THEN    /* SEE IF ERROR IN INDEX         */
         TM    AMBTYPE(RAMB),B'01000000'                           0470
         BNO   @RF00470                                            0470
*         ERMDSID=ERMINDEX;         /* IF SO, SET INDEX ID           */
         MVI   ERMDSID+5(@10),C' '                                 0471
         MVC   ERMDSID(5,@10),ERMINDEX                             0471
*       ELSE                        /* OTHERWISE, SET DATA ID        */
*         ERMDSID=ERMDATA;                                         0472
         B     @RC00470                                            0472
@RF00470 L     @10,RPLERMSA(,RRPL)                                 0472
         MVI   ERMDSID+4(@10),C' '                                 0472
         MVI   ERMDSID+5(@10),C' '                                 0472
         MVC   ERMDSID(4,@10),ERMDATA                              0472
*       COMMA9=COMMA;               /* PUNCTUATION                   */
@RC00470 L     @10,RPLERMSA(,RRPL)                                 0473
         MVI   COMMA9(@10),C','                                    0473
*       RFY                                                        0474
*         RWORK2 UNRSTD;            /* DROP WORK REGISTER    @X04SVMR*/
*     END;                          /* END, MESSAGE BUILD            */
*   IF AMBLSR=OFF&                  /* IF NOT LSR AND        @X04SVMR*/
*       AMBGSR=OFF THEN             /* NOT GSR, RESET BUFC   @X04SVMR*/
@RF00374 TM    AMBLSR(RAMB),B'01100000'                            0476
         BNZ   @RF00476                                            0476
*     DO;                                                          0477
*                                                                  0477
*/* RESET THE ERROR INDICATORS AND RELEASE THE BUFC.         @X04SVMR*/
*                                                                  0478
*       BUFCER1=OFF;                /* TURN OFF INPUT                */
*       BUFCER2=OFF;                /* AND OUTPUT ERROR FLAGS        */
*       BUFCVAL=OFF;                /* FORGET THE RBA                */
*       BUFCEXC=OFF;                /* RELEASE EXCL CNTL     @X04SVMR*/
         NI    BUFCER1(RBUFC),B'11100001'                          0481
*       IF AMBTYPE=AMBINDEX THEN    /* INDEX BUFFER                  */
         TM    AMBTYPE(RAMB),B'01000000'                           0482
         BNO   @RF00482                                            0482
*         BUFCAVL=CZERO;            /* MUST BE FREED.        @X04SVMR*/
         MVI   BUFCAVL(RBUFC),B'00000000'                          0483
*     END;                          /* END OF NON-DB/DC      @X04SVMR*/
@RF00482 DS    0H                                                  0485
*   CALL EXIT;                      /* RETURN TO CALLER      @X04SVMR*/
@RF00476 BAL   @14,EXIT                                            0485
*                                                                  0486
*/*   IDALOCEX--LOCATE THE APPROPRIATE ERROR EXIT                    */
*/* FUNCTION = SEARCH FOR AN EXIT ROUTINE                            */
*/* INPUT = RPLERREG, RPLERRCD, ACB, EXLST. (PLH AVAILABLE IF EOD)   */
*/* OUTPUT = RPARM1 IS ZERO IF NO EXIT IS FOUND.  IF AN EXIT IS      */
*/*         FOUND, RPARM1 WILL POINT TO THE EXIT LIST ENTRY THAT     */
*/*         CORRESPONDS TO THE DESIRED EXIT. RWORK1 AND RWORK2 ARE   */
*/*         PRESERVED FOR THE CALLER.                        @ZA14801*/
*                                                                  0486
*IDALOCEX:                                                         0486
*   ENTRY;                                                         0486
@EP00486 DS    0H                                                  0487
*   RFY                                                            0487
*    (RWORK1,                                                      0487
*     RWORK2,                                                      0487
*     R14) RSTD;                    /* SAVE REGISTERS        @ZA14801*/
*   RPARM1=ZERO;                    /* NO EXIT YET           @ZA14801*/
         SLR   RPARM1,RPARM1                                       0488
*/*  IF AN I/O ERROR OCCURRED, LOCATE THE SYNAD EXIT ADDR.   @ZA14801*/
*                                                                  0489
*   IF RPLERREG='0C'X THEN          /* I/O ERROR?            @X04SVMR*/
         CLI   RPLERREG(RRPL),12                                   0489
         BNE   @RF00489                                            0489
*     DO;                                                          0490
*       IF ACBUEL>ONE&              /* IF SO, SEE            @ZA14801*/
*           EXLLEN>=15&             /* IF AN ACTIVE SYNAD            */
*           EXLSYNF(2)=ON           /* EXIT LIST ENTRY IS            */
*         THEN                      /* PRESENT.                      */
         L     @15,RPLDACB(,RRPL)                                  0491
         L     @15,ACBUEL(,@15)                                    0491
         C     @15,@CF00046                                        0491
         BNH   @RF00491                                            0491
         LH    @10,EXLLEN(,@15)                                    0491
         C     @10,@CF00037                                        0491
         BL    @RF00491                                            0491
         TM    EXLSYNF(@15),B'01000000'                            0491
         BNO   @RF00491                                            0491
*         RPARM1=ADDR(EXLSYNF);     /* POINT TO SYNAD ENTRY          */
         LA    RPARM1,EXLSYNF(,@15)                                0492
*     END;                          /* END OF I/O ERROR      @X04SVMR*/
@RF00491 DS    0H                                                  0494
*/*  IF AN END-OF-DATA OCCURRED TAKE THE EODAD                       */
*                                                                  0494
*   IF RPLERREG='08'X               /* SEE IF LOGICAL ERROR          */
*     THEN                          /* IF SO, COME HERE              */
@RF00489 CLI   RPLERREG(RRPL),8                                    0494
         BNE   @RF00494                                            0494
*     DO;                                                          0495
*       IF RPLERRCD=RPLEODER&       /* DID EOD OCCUR FOR THIS        */
*           PLHEODX=OFF             /* STRING FOR THE 1ST TIME       */
*         THEN                      /* IF SO, COME HERE              */
         CLI   RPLERRCD(RRPL),4                                    0496
         BNE   @RF00496                                            0496
         TM    PLHEODX(RPLH),B'00000100'                           0496
         BNZ   @RF00496                                            0496
*         DO;                                                      0497
*           PLHEODX=ON;             /* SET EOD EXIT TAKEN            */
         OI    PLHEODX(RPLH),B'00000100'                           0498
*           IF ACBUEL>ONE&          /* IF EXLST PRESENT,             */
*               EXLLEN>=10&         /* EODAD PRESENT, AND            */
*               EXLEODF(2)=ON       /* IT IS ACTIVE                  */
*             THEN                  /* IF SO, COME HERE              */
         L     @15,RPLDACB(,RRPL)                                  0499
         L     @15,ACBUEL(,@15)                                    0499
         C     @15,@CF00046                                        0499
         BNH   @RF00499                                            0499
         LH    @10,EXLLEN(,@15)                                    0499
         C     @10,@CF00455                                        0499
         BL    @RF00499                                            0499
         TM    EXLEODF(@15),B'01000000'                            0499
         BNO   @RF00499                                            0499
*             RPARM1=ADDR(EXLEODF); /* POINT TO EOD ENTRY            */
         LA    RPARM1,EXLEODF(,@15)                                0500
*           ELSE                    /* IF NOT EODAD--LERAD           */
*             IF ACBUEL>ONE&        /* IF EXLST EXISTS,              */
*                 EXLLEN>=20&       /* LERAD EXISTS,                 */
*                 EXLLERF(2)=ON     /* AND IS ACTIVE                 */
*               THEN                /* HERE FOR LERAD EXIT           */
         B     @RC00499                                            0501
@RF00499 L     @15,RPLDACB(,RRPL)                                  0501
         L     @15,ACBUEL(,@15)                                    0501
         C     @15,@CF00046                                        0501
         BNH   @RF00501                                            0501
         LH    @10,EXLLEN(,@15)                                    0501
         C     @10,@CF00370                                        0501
         BL    @RF00501                                            0501
         TM    EXLLERF(@15),B'01000000'                            0501
         BNO   @RF00501                                            0501
*               RPARM1=ADDR(EXLLERF);/* INDICATE LERAD ENTRY         */
         LA    RPARM1,EXLLERF(,@15)                                0502
*         END;                      /* END, EOD CODE                 */
*/*  IF A LOGICAL ERROR OCCURRED TAKE THE LERAD IF IT IS PRESENT     */
*                                                                  0504
*       ELSE                                                       0504
*         IF ACBUEL>ONE&            /* IF EXLST EXISTS,              */
*             EXLLEN>=20&           /* LERAD EXISTS,                 */
*             EXLLERF(2)=ON         /* AND IS ACTIVE                 */
*           THEN                    /* HERE FOR LERAD EXIT           */
         B     @RC00496                                            0504
@RF00496 L     @15,RPLDACB(,RRPL)                                  0504
         L     @15,ACBUEL(,@15)                                    0504
         C     @15,@CF00046                                        0504
         BNH   @RF00504                                            0504
         LH    @10,EXLLEN(,@15)                                    0504
         C     @10,@CF00370                                        0504
         BL    @RF00504                                            0504
         TM    EXLLERF(@15),B'01000000'                            0504
         BNO   @RF00504                                            0504
*           RPARM1=ADDR(EXLLERF);   /* INDICATE LERAD ENTRY          */
         LA    RPARM1,EXLLERF(,@15)                                0505
*     END;                          /* END OF LOGICAL ERROR          */
*   RETURN;                         /*                       @ZA14801*/
@EL00001 DS    0H                                                  0507
@EF00001 DS    0H                                                  0507
@ER00001 BR    @14                                                 0507
*   RFY                                                            0508
*    (RWORK1,                                                      0508
*     RWORK2,                                                      0508
*     R14) UNRSTD;                  /* RELEASE REGS          @ZA14801*/
*                                                                  0509
*/*   FINDBUFC--LOCATE AN ERROR BUFC                                 */
*/* FUNCTION = SEARCH FOR AN ERROR BUFC                              */
*/* INPUT = RBUFC POINTS TO THE CHAIN OF BUFCS TO BE SEARCHED        */
*/*         FOR AN ERROR BUFC, RPARM1 = ZERO IF NO BUFC FOUND YET.   */
*/* OUTPUT = RPARM1 IS ZERO IF NO ERROR IS FOUND.  IF AN ERROR IS    */
*/*         FOUND, RPARM1 AND RBUFC WILL POINT TO THE BUFC IN        */
*/*         ERROR.                                           @X04SVMR*/
*                                                                  0509
*FINDBUFC:                                                         0509
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0509
FINDBUFC DS    0H                                                  0510
*   RFY                                                            0510
*     RWORK4 RSTD;                  /* SAVE REG FOR CALLER   @X04SVMR*/
*   RFY                                                            0511
*    (RWORK1,                                                      0511
*     R14) RSTD;                    /* SAVE RETURN REGISTER          */
*/*  FOR SHARED RESOURCES SEARCH THE I/O BUFC CHAIN.  FOR NON-SHARED */
*/*  SEARCH THE PHYSICAL BUFC CHAIN.                         @X04SVMR*/
*                                                                  0512
*   IF AMBLSR=ON×AMBGSR=ON THEN     /* FOR SHARED RESOURCE   @X04SVMR*/
         TM    AMBLSR(RAMB),B'01100000'                            0512
         BZ    @RF00512                                            0512
*     RWORK1=RBUFC;                 /* SET SEARCH LIMIT      @X04SVMR*/
         LR    RWORK1,RBUFC                                        0513
*   ELSE                            /* FOR NON-SHARED        @X04SVMR*/
*     RWORK1=ZERO;                  /* SEARCH TIL END        @X04SVMR*/
         B     @RC00512                                            0514
@RF00512 SLR   RWORK1,RWORK1                                       0514
*   IF RPARM1=ZERO THEN             /* IF NO IOB FOUND YET,  @X04SVMR*/
@RC00512 LTR   RPARM1,RPARM1                                       0515
         BNZ   @RF00515                                            0515
*     DO;                           /* SEARCH FOR ONE.       @X04SVMR*/
*/*  SEARCH UNTIL THE END OF THE BUFFER CHAIN OR UNTIL THE ERROR     */
*/*  BUFC IS FOUND.                                          @X04SVMR*/
*                                                                  0517
*       DO UNTIL RPARM1^=ZERO×RBUFC=RWORK1;/* SCH TIL DONE   @X04SVMR*/
@DL00517 DS    0H                                                  0518
*         IF BUFCER1=ON×BUFCER2=ON THEN/* IF AN I/O ERROR SET RC     */
         TM    BUFCER1(RBUFC),B'00011000'                          0518
         BZ    @RF00518                                            0518
*           RPARM1=RBUFC;           /* TO NON-ZERO.                  */
         LR    RPARM1,RBUFC                                        0519
*         ELSE                      /* GET NEXT BUFC PTR             */
*           DO;                     /* NON-ERROR BUFC        @X04SVMR*/
         B     @RC00518                                            0520
@RF00518 DS    0H                                                  0521
*             IF AMBLSR=ON×AMBGSR=ON THEN/* IF SHARED RESOURCE,    0521
*                                                            @X04SVMR*/
         TM    AMBLSR(RAMB),B'01100000'                            0521
         BZ    @RF00521                                            0521
*               RBUFC=BUFCNXT1;     /* USE THE I/O CHAIN.    @X04SVMR*/
         L     RBUFC,BUFCNXT1(,RBUFC)                              0522
*             ELSE                  /* FOR NON-SHARED, USE   @X04SVMR*/
*               RBUFC=BUFCHAIN;     /* THE PHYSICAL CHAIN.   @X04SVMR*/
         B     @RC00521                                            0523
@RF00521 L     RBUFC,BUFCHAIN(,RBUFC)                              0523
*           END;                    /* END OF NON-ERROR      @X04SVMR*/
@RC00521 DS    0H                                                  0525
*       END;                        /* END OF ERROR SEARCH           */
@RC00518 DS    0H                                                  0525
@DE00517 LTR   RPARM1,RPARM1                                       0525
         BNZ   @DC00517                                            0525
         CR    RBUFC,RWORK1                                        0525
         BNE   @DL00517                                            0525
@DC00517 DS    0H                                                  0526
*       IF AMBTYPE=AMBDATA&         /* IF NO ERROR FOUND IN          */
*           RPARM1=ZERO             /* I/O CHAIN, IT MAY BE          */
*         THEN                      /* BECAUSE CONTROL AREA          */
         TM    AMBTYPE(RAMB),B'01000000'                           0526
         BNZ   @RF00526                                            0526
         LTR   RPARM1,RPARM1                                       0526
         BNZ   @RF00526                                            0526
*         DO;                       /* SPLIT SUBTRACTED THE          */
*           RWORK1=DIWBUFC;         /* INSERT BUFFER.        @X04SVMR*/
         L     @15,AMBIWA(,RAMB)                                   0528
         L     RWORK1,DIWBUFC(,@15)                                0528
*           IF RWORK1->BUFCER1=ON×  /* READ ERROR?           @X04SVMR*/
*               RWORK1->BUFCER2=ON THEN/* WRITE ERROR?       @X04SVMR*/
         TM    BUFCER1(RWORK1),B'00011000'                         0529
         BZ    @RF00529                                            0529
*             DO;                   /* YES, ERR FOUND        @X04SVMR*/
*               RBUFC=RWORK1;       /* SET BUFC BASE         @X04SVMR*/
         LR    RBUFC,RWORK1                                        0531
*               RPARM1=RBUFC;       /* SET PTR IF ERROR FOUND        */
         LR    RPARM1,RBUFC                                        0532
*             END;                  /* END OF INS ERR        @X04SVMR*/
*         END;                      /* END OF EXTRA DATA SCH.        */
*     END;                          /* END OF BUFC SEARCH    @X04SVMR*/
*   RETURN;                         /* RETURN TO CALLER              */
@EL00002 DS    0H                                                  0536
@EF00002 DS    0H                                                  0536
@ER00002 BR    @14                                                 0536
*   RFY                                                            0537
*     RWORK4 UNRSTD;                /* DROP CALLER REG       @X04SVMR*/
*   END FINDBUFC;                   /* END OF FINDBUFC       @X04SVMR*/
         B     @EL00002                                            0538
*                                                                  0539
*/*  DETERMINE THE DASD SEEK ADDRESS OF THE PHYSICAL BLOCK IN ERROR. */
*/*  RWORK2 POINTS TO THE LAST CCW AT ENTRY.                         */
*/*  RWORK5 POINTS TO THE ERROR MESSAGE.                     @X04SVMR*/
*/* SEGMENT(SETSEEK)START                                            */
*                                                                  0539
*   DO;                                                            0539
*     GOTO SETSEEK@;                                               0540
*SETSEEK:                                                          0541
*   END;                            /* START MBBCCHHR RESET  @X04SVMR*/
SETSEEK  DS    0H                                                  0542
*   RFY                                                            0542
*     R14 UNRSTD;                   /* RELEASE R14           @X04SVMR*/
*   RFY                                                            0543
*    (RWORK2,                                                      0543
*     RWORK5) RSTD;                 /* PRESERVE REGISTERS    @X04SVMR*/
*   RFY                                                            0544
*    (RWORK1,                                                      0544
*     RWORK3) RSTD;                 /* GET WORK REGS         @X04SVMR*/
*   RFY                                                            0545
*     LASTCCW BASED(RWORK2);        /* DEFINE CCW BASE       @X04SVMR*/
*/*  LOCATE THE CHANNEL PROGRAM SEGMENT IN ERROR.            @X04SVMR*/
*                                                                  0546
*   IF RWORK2>=CPAWCPS&             /* SEE IF ERROR IN       @X04SVMR*/
*       RWORK2<=CPAWCPE THEN        /* WRITE SEGMENT         @X04SVMR*/
         L     @10,BUFCCPA(,RBUFC)                                 0546
         L     @08,CPAWCPS(,@10)                                   0546
         CLR   RWORK2,@08                                          0546
         BL    @RF00546                                            0546
         CL    RWORK2,CPAWCPE(,@10)                                0546
         BH    @RF00546                                            0546
*     RWORK1=CPAWCPS;               /* POINT TO START        @X04SVMR*/
         LR    RWORK1,@08                                          0547
*   ELSE                                                           0548
*     IF RWORK2>=CPAWCKS&           /* SEE IF WRITE CHECK    @X04SVMR*/
*         RWORK2<=CPAWCKE THEN      /* SEGMENT OF CHN PGM    @X04SVMR*/
         B     @RC00546                                            0548
@RF00546 L     @10,BUFCCPA(,RBUFC)                                 0548
         L     @08,CPAWCKS(,@10)                                   0548
         CLR   RWORK2,@08                                          0548
         BL    @RF00548                                            0548
         CL    RWORK2,CPAWCKE(,@10)                                0548
         BH    @RF00548                                            0548
*       RWORK1=CPAWCKS;             /* PTR TO START          @X04SVMR*/
         LR    RWORK1,@08                                          0549
*     ELSE                          /* SEE IF IN READ        @X04SVMR*/
*       IF RWORK2>=CPARCPS&         /* IN READ               @X04SVMR*/
*           RWORK2<=CPARCPE THEN    /* SEGMENT AT ERROR?     @X04SVMR*/
         B     @RC00548                                            0550
@RF00548 L     @10,BUFCCPA(,RBUFC)                                 0550
         L     @08,CPARCPS(,@10)                                   0550
         CLR   RWORK2,@08                                          0550
         BL    @RF00550                                            0550
         CL    RWORK2,CPARCPE(,@10)                                0550
         BH    @RF00550                                            0550
*         RWORK1=CPARCPS;           /* YES, SET PTR          @X04SVMR*/
         LR    RWORK1,@08                                          0551
*       ELSE                        /* NEITHER READ OR WRITE @X04SVMR*/
*         RWORK1=RWORK2;            /* UNKNOWN ERROR         @X04SVMR*/
         B     @RC00550                                            0552
@RF00550 LR    RWORK1,RWORK2                                       0552
*   RFY                                                            0553
*     LASTCCW BASED(RWORK1);        /* RESET CCW BASE        @X04SVMR*/
@RC00550 DS    0H                                                  0553
@RC00548 DS    0H                                                  0553
@RC00546 DS    0H                                                  0554
*/*  DETERMINE THE NUMBER OF DATA READS OR WRITES PRIOR TO THE       */
*/*  OCCURRENCE OF THE ERROR.                                @X04SVMR*/
*                                                                  0554
*   RWORK3=ZERO;                    /* ZERO COUNTER          @X04SVMR*/
         SLR   RWORK3,RWORK3                                       0554
*   DO WHILE RWORK1<RWORK2;         /* COUNT DATA XFERS      @X04SVMR*/
         B     @DE00555                                            0555
@DL00555 DS    0H                                                  0556
*/*  DETERMINE IF CCW IS FOR A DATA TRANSFER                 @X04SVMR*/
*                                                                  0556
*     IF LASTOP=WRTDATA×            /* UPDATE WRITE?         @X04SVMR*/
*         (LASTOP=WRTCKD&           /* FORMAT WRITE          @X04SVMR*/
*         COUNT^=LENGTH(CCHHRKDD))× /* (NOT FIRST OF PAIR)   @X04SVMR*/
*         LASTOP=RDDATA×            /* READ DATA?            @X04SVMR*/
*         LASTOP=RDDATAMT THEN      /* MT READ DATA?         @X04SVMR*/
         CLI   LASTOP(RWORK1),X'05'                                0556
         BE    @RT00556                                            0556
         CLI   LASTOP(RWORK1),X'1D'                                0556
         BNE   @GL00017                                            0556
         CLC   COUNT(2,RWORK1),@CH00048                            0556
         BNE   @RT00556                                            0556
@GL00017 CLI   LASTOP(RWORK1),X'06'                                0556
         BE    @RT00556                                            0556
         CLI   LASTOP(RWORK1),X'86'                                0556
         BNE   @RF00556                                            0556
@RT00556 DS    0H                                                  0557
*       RWORK3=RWORK3+ONE;          /* INCREMENT COUNTER     @X04SVMR*/
         AL    RWORK3,@CF00046                                     0557
*     RWORK1=RWORK1+LENGTH(LASTCCW);/* NEXT CCW              @X04SVMR*/
@RF00556 AL    RWORK1,@CF00048                                     0558
*   END;                            /* END OF CCW COUNT      @X04SVMR*/
@DE00555 CLR   RWORK1,RWORK2                                       0559
         BL    @DL00555                                            0559
*   IF BUFCFMT=ON THEN              /* IF FORMAT WRITE       @X04SVMR*/
         TM    BUFCFMT(RBUFC),B'01000000'                          0560
         BNO   @RF00560                                            0560
*     RWORK3=RWORK3+ONE;            /* SCH IS ON N-1 RCD     @X04SVMR*/
         AL    RWORK3,@CF00046                                     0561
*   RFY                                                            0562
*     RWORK2 UNRSTD;                /* RELEASE WORK REG      @X04SVMR*/
*                                                                  0562
@RF00560 DS    0H                                                  0563
*   /*****************************************************************/
*   /*                                                               */
*   /* LOCATE THE PROPER EDB                                 @X04SVMR*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0563
*   RFY                                                            0563
*     RWORK1 RSTD;                  /* GET WORK REGISTER     @X04SVMR*/
*                                                                  0563
*   /*****************************************************************/
*   /*                                                               */
*   /* POINT TO THE FIRST EDB                                @X04SVMR*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0564
*   RWORK1=ADDR(IDAEDBHD)+LENGTH(IDAEDBHD);                        0564
         LA    RWORK1,8                                            0564
         AL    RWORK1,AMBEDB(,RAMB)                                0564
*   RFY                                                            0565
*     IDAEDB BASED(RWORK1);         /* DEFINE EDB BASE       @X04SVMR*/
*   DO WHILE EDBM^=IOSSKM;          /* SEARCH TIL M =        @X04SVMR*/
         B     @DE00566                                            0566
@DL00566 DS    0H                                                  0567
*     RWORK1=RWORK1+LENGTH(IDAEDB); /* NEXT EDB                      */
         AL    RWORK1,@CF00094                                     0567
*   END;                            /* END OF EDB SEARCH     @X04SVMR*/
@DE00566 L     @10,PLHDIOB(,RPLH)                                  0568
         L     @10,IOSBPTR(,@10)                                   0568
         CLC   EDBM(1,RWORK1),IOSSKM(@10)                          0568
         BNE   @DL00566                                            0568
*   RWORK1=EDBLPMBA;                /* SET LPMB BASE         @X04SVMR*/
         L     RWORK1,EDBLPMBA(,RWORK1)                            0569
*   RFY                                                            0570
*     IDALPMB BASED(RWORK1);        /* BASE LPMB             @X04SVMR*/
*                                                                  0570
*   /*****************************************************************/
*   /*                                                               */
*   /* ADJUST TRACK VALUE BY NUMBER TRKS SPANNED             @X04SVMR*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0571
*   HH=HH+RWORK3/LPMBLKTR;                                         0571
*                                                                  0571
         LA    @10,107                                             0571
         AL    @10,RPLERMSA(,RRPL)                                 0571
         LH    @08,LPMBLKTR(,RWORK1)                               0571
         LR    @15,RWORK3                                          0571
         SLR   @14,@14                                             0571
         DR    @14,@08                                             0571
         SLR   @06,@06                                             0571
         ICM   @06,3,HH(@10)                                       0571
         ALR   @15,@06                                             0571
         STCM  @15,3,HH(@10)                                       0571
*   /*****************************************************************/
*   /*                                                               */
*   /* ADJUST RECORD NUMBER BY REMAINDER                     @X04SVMR*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0572
*   R=R+RWORK3//LPMBLKTR;                                          0572
         LR    @14,RWORK3                                          0572
         SRDA  @14,32                                              0572
         DR    @14,@08                                             0572
         SLR   @06,@06                                             0572
         IC    @06,R(,@10)                                         0572
         ALR   @14,@06                                             0572
         STC   @14,R(,@10)                                         0572
*   IF R>LPMBLKTR THEN              /* ADJUST R              @X04SVMR*/
         CR    @14,@08                                             0573
         BNH   @RF00573                                            0573
*     DO;                           /* IF TOO HIGH           @X04SVMR*/
*       HH=HH+ONE;                  /* ON NEXT TRACK         @X04SVMR*/
         L     @06,RPLERMSA(,RRPL)                                 0575
         SLR   @15,@15                                             0575
         ICM   @15,3,HH+107(@06)                                   0575
         AL    @15,@CF00046                                        0575
         STCM  @15,3,HH(@10)                                       0575
*       R=R-LPMBLKTR;               /* RESET R               @X04SVMR*/
         SLR   @14,@08                                             0576
         STC   @14,R(,@10)                                         0576
*     END;                          /* END OF R RESET        @X04SVMR*/
*                                                                  0577
*   /*****************************************************************/
*   /*                                                               */
*   /* ADJUST TRACK VALUE IF NECESSARY                       @X04SVMR*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0578
*   IF HH>=LPMTPC THEN              /* TOO HIGH?             @X04SVMR*/
@RF00573 LA    @10,107                                             0578
         AL    @10,RPLERMSA(,RRPL)                                 0578
         SLR   @08,@08                                             0578
         ICM   @08,3,HH(@10)                                       0578
         LH    @06,LPMTPC(,RWORK1)                                 0578
         CR    @08,@06                                             0578
         BL    @RF00578                                            0578
*     DO;                           /* YES, RESET HH         @X04SVMR*/
*       CC=CC+ONE;                  /* ONE MORE CYLINDER     @X04SVMR*/
         LA    @00,1                                               0580
         SLR   @15,@15                                             0580
         ICM   @15,3,CC(@10)                                       0580
         ALR   @00,@15                                             0580
         STCM  @00,3,CC(@10)                                       0580
*       HH=HH-LPMTPC;               /* RESET TRACK VALUE     @X04SVMR*/
         SLR   @08,@06                                             0581
         STCM  @08,3,HH(@10)                                       0581
*     END;                          /* END OF TRACK RESET    @X04SVMR*/
*   RFY                                                            0583
*    (RWORK3,                                                      0583
*     RWORK1) UNRSTD;               /* DROP REGS             @X04SVMR*/
@RF00578 DS    0H                                                  0584
*/* SEGMENT(SETSEEK)FINISH                                           */
*                                                                  0584
*   DO;                                                            0584
*     GOTO SETSEEK#;                                               0585
         B     SETSEEK#                                            0585
*SETSEEK@:                                                         0586
*   END;                            /* END OF MBBCCHHR RESET @X04SVMR*/
*                                                                  0587
*/*  IDAEXITR-- EXIT TO USER ROUTINE                                 */
*/*  FUNCTION = SAVE VSAM REGISTERS, LOAD USER ROUTINE IF IT IS      */
*/*             NOT IN CORE, RESTORE USER REGISTERS, BALR TO         */
*/*             THE USER ROUTINE, RESTORE THE VSAM REGISTERS,        */
*/*             AND DELETE THE USER ROUTINE IF IT WAS LOADED.        */
*/*  INPUT    = RPARM1 POINTS TO DESIRED EXIT LIST ENTRY.  IF THE    */
*/*             PLH HAS BEEN DISCONNECTED, ONLY USER BLOCKS (RPL,    */
*/*             ACB, AND EXLST) ARE AVAILABLE FOR USE.  NOTE THAT    */
*/*             THE RPL HAS BEEN RELEASED AND MAY HAVE BEEN REUSED.  */
*/*  OUTPUT   = REGISTERS ARE UNCHANGED. IF USER ROUTINE DID NOT     */
*/*             RETURN, THE USER EXIT ROUTINE IS LEFT LOADED.@X04SVMR*/
*                                                                  0587
*IDAEXITR:                                                         0587
*   ENTRY;                          /* INTERFACE TO USER RTN @X04SVMR*/
@EP00587 DS    0H                                                  0587
@EC00587 DS    0H                                                  0588
*   RESPECIFY                                                      0588
*     IFGEXLEF BASED(RPARM1);       /* ENTRY BASE                    */
*   RFY                                                            0589
*    (RWORK0,                                                      0589
*     R15) RSTD;                    /* GET REGISTERS         @X04SVMR*/
*   R15=EXLEXITP;                   /* GET ROUTINE ADDRESS           */
         ICM   R15,15,EXLEXITP(RPARM1)                             0590
*   RFY                                                            0591
*     RWORK1 RSTD;                  /* GET REGISTER                  */
*   IF RPLREQ>=RPLPFMTD&            /* HAS THE ORIGINAL              */
*       RPLREQ<RPLGETIX THEN        /* RPL ADDR BEEN SAVED?          */
         CLI   RPLREQ(RRPL),8                                      0592
         BL    @RF00592                                            0592
         CLI   RPLREQ(RRPL),11                                     0592
         BNL   @RF00592                                            0592
*     DO;                           /* YES, SWAP IT.                 */
*       RWORK1=PLHSLRBA;            /* GET SAVED RPL ADDRESS         */
         L     RWORK1,PLHSLRBA(,RPLH)                              0594
*       PLHSLRBA=PLHCRPL;           /* SWAP THE CURRENT AND          */
         L     @14,PLHCRPL(,RPLH)                                  0595
         ST    @14,PLHSLRBA(,RPLH)                                 0595
*       PLHCRPL=RWORK1;             /* SAVED RPLS                    */
         ST    RWORK1,PLHCRPL(,RPLH)                               0596
*       PLHCRPL->RPLFDBWD=PLHSLRBA->RPLFDBWD;/* COPY FDBACK  @ZA14801*/
         L     @10,PLHCRPL(,RPLH)                                  0597
         L     @14,RPLFDBWD(,@14)                                  0597
         ST    @14,RPLFDBWD(,@10)                                  0597
*/*  LOAD THE USER EXIT ROUTINE IF REQUESTED                         */
*                                                                  0598
*       IF EXLFLAG(3)=ON            /* SEE IF LOAD REQUIRED          */
*         THEN                      /* IF SO, COME HERE              */
         TM    EXLFLAG(RPARM1),B'00100000'                         0598
         BNO   @RF00598                                            0598
*         DO;                                                      0599
*           RWORK1=R1;              /* SAVE REGISTER ONE             */
         LR    RWORK1,R1                                           0600
*           GEN(LOAD  EPLOC=(R15)); /* LOAD ROUTINE                  */
         LOAD  EPLOC=(R15)
*           R15=RWORK0;             /* GET ADDR INTO R15             */
         LR    R15,RWORK0                                          0602
*           R1=RWORK1;              /* RESTORE REGISTER ONE          */
*                                                                  0603
         LR    R1,RWORK1                                           0603
*           /*********************************************************/
*           /*                                                       */
*           /* RESTORE USER REGISTERS AND BALR TO THE USER ROUTINE   */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0604
*           GEN(LM @02,@12,TWENTY8(R13));/* RESTORE USER REGS        */
*                                                                  0604
         LM @02,@12,TWENTY8(R13)
*           /*********************************************************/
*           /*                                                       */
*           /* TAKE USER EXIT                                        */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0605
*I04:                                                              0605
*           DO;                     /* IDACALL(USEREXIT)             */
I04      DS    0H                                                  0606
*             CALL USEREXIT;        /* EXIT TO USEREXIT              */
         BALR  @14,@15                                             0606
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I04;                /* HOPE USER RETURNS     @ZA14801*/
*           RPLH=RPLPLHPT;          /* RESTORE PLH POINTER   @ZA29251*/
         L     RPLH,RPLPLHPT(,RRPL)                                0612
*           CALL IDALOCEX;          /* TRY TO FIND EXIT RTN  @ZA14801*/
         L     @15,@CA02871                                        0613
         BALR  @14,@15                                             0613
*         END;                      /* END OF LOAD CODE              */
*       ELSE                        /* NON-LOADED EXIT       @ZA14801*/
*         DO;                       /*                       @ZA14801*/
*                                                                  0615
         B     @RC00598                                            0615
@RF00598 DS    0H                                                  0616
*           /*********************************************************/
*           /*                                                       */
*           /* RESTORE USER REGISTERS AND BALR TO THE USER ROUTINE   */
*           /*                                               @ZA14801*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0616
*           GEN(LM @02,@12,TWENTY8(R13));/* RESTORE USER REGS      0616
*                                                            @ZA14801*/
*                                                                  0616
         LM @02,@12,TWENTY8(R13)
*           /*********************************************************/
*           /*                                                       */
*           /* TAKE USER EXIT                                @ZA14801*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0617
*I05:                                                              0617
*           DO;                     /* IDACALL(USEREXIT)             */
I05      DS    0H                                                  0618
*             CALL USEREXIT;        /* EXIT TO USEREXIT              */
         BALR  @14,@15                                             0618
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I05;                /* HOPE USER RETURNS     @ZA14801*/
*           RPARM1=ZERO;            /* SET NO DELETE FLAG    @ZA14801*/
         SLR   RPARM1,RPARM1                                       0624
*         END;                      /* END NON-LOADED EXIT   @ZA14801*/
*       RPLH=RPLPLHPT;              /* RESTORE PLH POINTER   @ZA14801*/
@RC00598 L     RPLH,RPLPLHPT(,RRPL)                                0626
*       RWORK1=PLHSLRBA;            /* GET SAVED RPL ADDRESS         */
         L     RWORK1,PLHSLRBA(,RPLH)                              0627
*       PLHSLRBA=PLHCRPL;           /* SWAP THE CURRENT AND          */
         L     @14,PLHCRPL(,RPLH)                                  0628
         ST    @14,PLHSLRBA(,RPLH)                                 0628
*       PLHCRPL=RWORK1;             /* SAVED RPLS                    */
         ST    RWORK1,PLHCRPL(,RPLH)                               0629
*     END;                          /* END OF RPL SWAP               */
*   ELSE                            /* NOT SPECIAL REQUEST   @ZA14801*/
*     DO;                           /* NO SWAP REQUIRED      @ZA14801*/
         B     @RC00592                                            0631
@RF00592 DS    0H                                                  0632
*/*  LOAD THE USER EXIT ROUTINE IF REQUESTED                         */
*                                                                  0632
*       IF EXLFLAG(3)=ON            /* SEE IF LOAD REQUIRED          */
*         THEN                      /* IF SO, COME HERE              */
         TM    EXLFLAG(RPARM1),B'00100000'                         0632
         BNO   @RF00632                                            0632
*         DO;                                                      0633
*           RWORK1=R1;              /* SAVE REGISTER ONE             */
         LR    RWORK1,R1                                           0634
*           GEN(LOAD  EPLOC=(R15)); /* LOAD ROUTINE                  */
         LOAD  EPLOC=(R15)
*           R15=RWORK0;             /* GET ADDR INTO R15             */
         LR    R15,RWORK0                                          0636
*           R1=RWORK1;              /* RESTORE REGISTER ONE          */
         LR    R1,RWORK1                                           0637
*           IF RPARM1=ADDR(EXLEODF) THEN/* IF EOD EXIT       @ZA14801*/
         L     @14,RPLDACB(,RRPL)                                  0638
         L     @14,ACBUEL(,@14)                                    0638
         LA    @14,EXLEODF(,@14)                                   0638
         CR    RPARM1,@14                                          0638
         BNE   @RF00638                                            0638
*             DO;                   /* USER                  @ZA14801*/
*                                                                  0639
*               /*****************************************************/
*               /*                                                   */
*               /* RESTORE USER REGISTERS AND BALR TO THE USER       */
*               /* ROUTINE                                   @ZA14801*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0640
*               GEN(LM @02,@12,TWENTY8(R13));/* RESTORE USER REGS  0640
*                                                            @ZA14801*/
*                                                                  0640
         LM @02,@12,TWENTY8(R13)
*               /*****************************************************/
*               /*                                                   */
*               /* TAKE USER EXIT                            @ZA14801*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0641
*I06:                                                              0641
*               DO;                 /* IDACALL(USEREXIT)             */
I06      DS    0H                                                  0642
*                 CALL USEREXIT;    /* EXIT TO USEREXIT              */
         BALR  @14,@15                                             0642
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I06;            /* HOPE USER RETURNS     @ZA14801*/
*               RPARM1=ADDR(EXLEODF);/* RESTORE EXIT ADDRESS @ZA14801*/
         L     @14,RPLDACB(,RRPL)                                  0648
         L     RPARM1,ACBUEL(,@14)                                 0648
         LA    RPARM1,EXLEODF(,RPARM1)                             0648
*             END;                  /* END EOD EXIT          @ZA14801*/
*           ELSE                    /* NOT EOD EXIT          @ZA14801*/
*             DO;                   /* TAKE OTHER EXIT       @ZA14801*/
*                                                                  0650
         B     @RC00638                                            0650
@RF00638 DS    0H                                                  0651
*               /*****************************************************/
*               /*                                                   */
*               /* RESTORE USER REGISTERS AND EXIT           @ZA14801*/
*               /*                                                   */
*               /*****************************************************/
*                                                                  0651
*               GEN(LM @02,@12,TWENTY8(R13));/* RESTORE REGS @ZA14801*/
         LM @02,@12,TWENTY8(R13)
*I07:                                                              0652
*               DO;                 /* IDACALL(USEREXIT)             */
I07      DS    0H                                                  0653
*                 CALL USEREXIT;    /* EXIT TO USEREXIT              */
         BALR  @14,@15                                             0653
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I07;            /* EXIT TO USER          @ZA14801*/
*               RPLH=RPLPLHPT;      /* RESTORE PLH POINTER   @ZA29251*/
         L     RPLH,RPLPLHPT(,RRPL)                                0659
*               CALL IDALOCEX;      /* LOCATE EXIT AGAIN     @ZA14801*/
         L     @15,@CA02871                                        0660
         BALR  @14,@15                                             0660
*             END;                  /* END NOT EOD           @ZA14801*/
*         END;                      /* END OF LOAD CODE      @ZA14801*/
*       ELSE                        /* NON-LOADED EXIT RTN   @ZA14801*/
*         DO;                       /*                       @ZA14801*/
*                                                                  0663
         B     @RC00632                                            0663
@RF00632 DS    0H                                                  0664
*           /*********************************************************/
*           /*                                                       */
*           /* RESTORE USER REGISTERS AND BALR TO THE USER ROUTINE   */
*           /*                                               @ZA14801*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0664
*           GEN(LM @02,@12,TWENTY8(R13));/* RESTORE USER REGS      0664
*                                                            @ZA14801*/
*                                                                  0664
         LM @02,@12,TWENTY8(R13)
*           /*********************************************************/
*           /*                                                       */
*           /* TAKE USER EXIT                                @ZA14801*/
*           /*                                                       */
*           /*********************************************************/
*                                                                  0665
*I08:                                                              0665
*           DO;                     /* IDACALL(USEREXIT)             */
I08      DS    0H                                                  0666
*             CALL USEREXIT;        /* EXIT TO USEREXIT              */
         BALR  @14,@15                                             0666
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I08;                /* HOPE USER RETURNS     @ZA14801*/
*           RPARM1=ZERO;            /* NO DELETE REQUIRED    @ZA14801*/
         SLR   RPARM1,RPARM1                                       0672
*         END;                      /* END NON-LOADED EXIT   @ZA14801*/
*     END;                          /* END NON-SPECIAL REQ   @ZA14801*/
@RC00632 DS    0H                                                  0675
*/* DELETE THE USER EXIT ROUTINE IF IT WAS LOADED                    */
*                                                                  0675
*   IF RPARM1^=ZERO&                /* LOADED EXIT FOUND?    @ZA14801*/
*       EXLFLAG(3)=ON               /* SEE IF DELETE NEEDED          */
*     THEN                          /* IF SO, COME HERE              */
@RC00592 LTR   RPARM1,RPARM1                                       0675
         BZ    @RF00675                                            0675
         TM    EXLFLAG(RPARM1),B'00100000'                         0675
         BNO   @RF00675                                            0675
*     DO;                                                          0676
*       RFY                                                        0677
*         RWORK1 RSTD;              /* GET REGISTER                  */
*       RWORK1=R1;                  /* SAVE REGISTER ONE             */
         LR    RWORK1,R1                                           0678
*       R15=EXLEXITP;               /* POINT TO ROUTINE NAME         */
         ICM   R15,15,EXLEXITP(RPARM1)                             0679
*       GEN(DELETE EPLOC=(R15));    /* DELETE ROUTINE                */
         DELETE EPLOC=(R15)
*       R1=RWORK1;                  /* RESTORE REGISTER ONE          */
         LR    R1,RWORK1                                           0681
*       RFY                                                        0682
*         RWORK1 UNRSTD;            /* DROP REGISTER                 */
*     END;                          /* END OF DELETE CODE            */
*   RFY                                                            0684
*    (RWORK0,                                                      0684
*     R15) UNRSTD;                  /* DROP REGISTERS        @X04SVMR*/
@RF00675 DS    0H                                                  0685
*   R15SAVE=RPLERREG;               /* SET RETURN CODE       @ZA14801*/
         SLR   @10,@10                                             0685
         IC    @10,RPLERREG(,RRPL)                                 0685
         ST    @10,R15SAVE(,R13)                                   0685
*   GEN(LM    @14,@12,@12(@13));    /* RELOAD USER REGS      @ZA14801*/
         LM    @14,@12,@12(@13)
*   GEN(BR    @14);                 /* EXIT TO USER          @ZA14801*/
         BR    @14
*                                                                  0688
*   /*****************************************************************/
*   /*                                                               */
*   /* * * * * * * * * * * * * * * * * * * * * * * * * *     #X04SVES*/
*   /*                                                       #X04SVES*/
*   /* EXIT SUBROUTINE                                       #X04SVES*/
*   /* FUNCTION - RESTORES REGISTER 14 FROM PLH              #X04SVES*/
*   /* PUSHDOWN LIST AND RETURNS                             #X04SVES*/
*   /*                                                       #X04SVES*/
*   /* * * * * * * * * * * * * * * * * * * * * * * * * *     #X04SVES*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0688
*EXIT:                                                             0688
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       #X04SVES*/
         B     @PB00003                                            0688
EXIT     DS    0H                                                  0689
*   GEN REFS(HWORD4)(IDARST14);     /* RESTORE REG 14        #X04SVES*/
         IDARST14
*   END EXIT;                       /* RETURN                #X04SVES*/
@EL00003 DS    0H                                                  0690
@EF00003 DS    0H                                                  0690
@ER00003 BR    @14                                                 0690
*                                                                  0691
*/*  IDAEXEX-- EXIT TO USER EXCEPTION EXIT                           */
*/*  FUNCTION = SAVE VSAM REGISTERS, LOAD USER ROUTINE, RESTORE      */
*/*             USER REGISTERS, BALR TO THE USER ROUTINE,            */
*/*             RESTORE THE VSAM REGISTERS, AND DELETE THE           */
*/*             USER ROUTINE.                                        */
*/*  INPUT    = AMBEXEX CONTAINS THE NAME OF THE EXCEPTION EXIT.     */
*/*  OUTPUT   = REGISTERS ARE UNCHANGED. IF USER ROUTINE DID NOT     */
*/*             RETURN, THE USER EXIT ROUTINE IS LEFT LOADED.#X04SVMR*/
*                                                                  0691
*IDAEXEX:                                                          0691
*   ENTRY;                          /* INTERFACE TO USER RTN #X04SVMR
*                                      SAVE VSAM REGISTERS           */
@EP00691 DS    0H                                                  0691
@EC00691 DS    0H                                                  0692
*   GEN(IDASVR14);                  /* SAVE RETURN REG               */
         IDASVR14
*   RFY                                                            0693
*    (RWORK0,                                                      0693
*     R15) RSTD;                    /* GET REGISTERS         @X04SVMR*/
*   PLHAMB=RAMB;                    /* SAVE AMB PTR          @X04SVMR*/
         ST    RAMB,PLHAMB(,RPLH)                                  0694
*   PLHRBUFC=RBUFC;                 /* SAVE RBUFC            @X04SVMR*/
         ST    RBUFC,PLHRBUFC(,RPLH)                               0695
*   PLHPARM1=RPARM1;                /* SAVE RPARM1           @X04SVMR*/
         ST    RPARM1,PLHPARM1(,RPLH)                              0696
*   PLHR13=R13;                     /* SAVE R13              @X04SVMR*/
         ST    R13,PLHR13(,RPLH)                                   0697
*   R15=ADDR(AMBEXEX);              /* PTR TO RTN NAME       @X04SVMR*/
         LA    R15,AMBEXEX(,RAMB)                                  0698
*   RFY                                                            0699
*     RWORK1 RSTD;                  /* GET REGISTER                  */
*/*  LOAD THE USER EXCEPTION EXIT ROUTINE                            */
*                                                                  0700
*   RWORK1=R1;                      /* SAVE REGISTER ONE             */
         LR    RWORK1,R1                                           0700
*   GEN(LOAD  EPLOC=(R15));         /* LOAD ROUTINE                  */
         LOAD  EPLOC=(R15)
*   R15=RWORK0;                     /* GET ADDR INTO R15             */
         LR    R15,RWORK0                                          0702
*   R1=RWORK1;                      /* RESTORE REGISTER ONE          */
         LR    R1,RWORK1                                           0703
*   IF RPLREQ>=RPLPFMTD&            /* HAS THE ORIGINAL              */
*       RPLREQ<RPLGETIX THEN        /* RPL ADDR BEEN SAVED?          */
         CLI   RPLREQ(RRPL),8                                      0704
         BL    @RF00704                                            0704
         CLI   RPLREQ(RRPL),11                                     0704
         BNL   @RF00704                                            0704
*     DO;                           /* YES, SWAP IT.                 */
*       RWORK1=PLHSLRBA;            /* GET SAVED RPL ADDRESS         */
         L     RWORK1,PLHSLRBA(,RPLH)                              0706
*       PLHSLRBA=PLHCRPL;           /* SWAP THE CURRENT AND          */
         L     @14,PLHCRPL(,RPLH)                                  0707
         ST    @14,PLHSLRBA(,RPLH)                                 0707
*       PLHCRPL=RWORK1;             /* SAVED RPLS                    */
         ST    RWORK1,PLHCRPL(,RPLH)                               0708
*       PLHIOSRQ=ON;                /* I/O SUPPORT REQ       @ZA06117*/
         OI    PLHIOSRQ(RPLH),B'01000000'                          0709
*     END;                          /* END OF RPL SWAP               */
*/*  RESTORE USER REGISTERS AND BALR TO THE USER ROUTINE             */
*                                                                  0711
*   GEN(LM @02,@12,TWENTY8(R13));   /* RESTORE USER REGS             */
@RF00704 DS    0H                                                  0711
         LM @02,@12,TWENTY8(R13)
*/*  TAKE USER EXIT                                                  */
*                                                                  0712
*I09:                                                              0712
*   DO;                             /* IDACALL(USEREXIT)             */
I09      DS    0H                                                  0713
*     CALL USEREXIT;                /* EXIT TO USEREXIT              */
         BALR  @14,@15                                             0713
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I09;                                                       0718
*                                                                  0718
*/* RESTORE THE VSAM REGISTERS                                       */
*                                                                  0719
*   RPLH=RPLPLHPT;                  /* RESTORE PLH POINTER           */
         L     RPLH,RPLPLHPT(,RRPL)                                0719
*   RAMB=PLHAMB;                    /* RESTORE RAMB          @X04SVMR*/
         L     RAMB,PLHAMB(,RPLH)                                  0720
*   RBUFC=PLHRBUFC;                 /* RESTORE RBUFC         @X04SVMR*/
         L     RBUFC,PLHRBUFC(,RPLH)                               0721
*   RPARM1=PLHPARM1;                /* RESTORE RPARM1        @X04SVMR*/
         L     RPARM1,PLHPARM1(,RPLH)                              0722
*   R13=PLHR13;                     /* RESTORE R13           @X04SVMR*/
         L     R13,PLHR13(,RPLH)                                   0723
*   IF PLHIOSRQ=ON THEN             /* SPECIAL REQUEST?              */
         TM    PLHIOSRQ(RPLH),B'01000000'                          0724
         BNO   @RF00724                                            0724
*     DO;                                                          0725
*       PLHIOSRQ=OFF;               /* RESET FLAG            @ZA06117*/
         NI    PLHIOSRQ(RPLH),B'10111111'                          0726
*       RWORK1=PLHSLRBA;            /* GET SAVED RPL ADDRESS         */
         L     RWORK1,PLHSLRBA(,RPLH)                              0727
*       PLHSLRBA=PLHCRPL;           /* SWAP THE CURRENT AND          */
         L     @14,PLHCRPL(,RPLH)                                  0728
         ST    @14,PLHSLRBA(,RPLH)                                 0728
*       PLHCRPL=RWORK1;             /* SAVED RPLS                    */
         ST    RWORK1,PLHCRPL(,RPLH)                               0729
*     END;                          /* END OF RPL SWAP               */
*/* DELETE THE USER EXCEPTION EXIT ROUTINE                           */
*                                                                  0731
*   RWORK1=R1;                      /* SAVE REGISTER ONE             */
@RF00724 LR    RWORK1,R1                                           0731
*   R15=ADDR(AMBEXEX);              /* PTR TO RTN NAME       @X04SVMR*/
         LA    R15,AMBEXEX(,RAMB)                                  0732
*   GEN(DELETE EPLOC=(R15));        /* DELETE ROUTINE                */
         DELETE EPLOC=(R15)
*   R1=RWORK1;                      /* RESTORE REGISTER ONE          */
         LR    R1,RWORK1                                           0734
*   RFY                                                            0735
*     RWORK1 UNRSTD;                /* DROP REGISTER                 */
*   RFY                                                            0736
*    (RWORK0,                                                      0736
*     R15) UNRSTD;                  /* DROP REGISTERS        @X04SVMR*/
*   GEN(IDARST14);                  /* RESTORE RETURN                */
         IDARST14
*   RETURN;                         /* END OF EXIT INTERFACE @X04SVMR*/
         B     @EL00001                                            0738
*   GEN(IDAPATCH);                  /* DEFINE A PATCH AREA           */
         IDAPATCH
*   END IDA019R5                    /* END OF I/O ERROR EXIT         */
*                                                                  0740
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (LCGPLSSW)                                       */
*/*%INCLUDE SYSLIB  (IDAERMSG)                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IFGEXLST)                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDACPA  )                                       */
*/*%INCLUDE SYSLIB  (IDAEDB  )                                       */
*/*%INCLUDE SYSLIB  (IDALPMB )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*/*%INCLUDE SYSLIB  (IDADIWA )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBXN)                                       */
*/*%INCLUDE SYSLIB  (IDAIOMB )                                       */
*/*%INCLUDE SYSLIB  (IHAIQE  )                                       */
*/*%INCLUDE SYSLIB  (IECDIOSB)                                       */
*/*%INCLUDE SYSLIB  (IDABIB  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IDAEQUS )                                       */
*                                                                  0740
*       ;                                                          0740
         B     @EL00001                                            0740
@DATA    DS    0H
@CH02876 DC    H'17'
@CH03097 DC    H'128'
@DATD    DSECT
         DS    0F
IDA019R5 CSECT
         DS    0F
@CF00046 DC    F'1'
@CF00042 DC    F'4'
@CF00048 DC    F'8'
@CH00048 EQU   @CF00048+2
@CF00455 DC    F'10'
@CF00037 DC    F'15'
@CF00370 DC    F'20'
@CF00094 DC    F'24'
@CF03106 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
IDA019R5 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CA02871 DC    A(IDALOCEX)
         DS    0D
HWORD4   DC    H'4'
@CC03018 DC    C'DA'
UNITCHKM DC    CL15'UNIT CHECK'
PURGEMSG DC    CL15'PURGED REQUEST'
RDHAMSG  DC    CL15'R.HA.R0 - ERROR'
LENMSG   DC    CL15'INCORR. LENGTH'
UNKNOWN  DC    CL15'UNKNOWN COND.'
TABLE    DC    CL16'0123456789ABCDEF'
AM0CON   DC    CL6'VSAM'
OPDEF    DC    CL4'- OP'
ERMINDEX DC    CL5'INDEX'
ERMDATA  DC    CL4'DATA'
CSWCODES DS    CL17
         ORG   CSWCODES+0
STATFLGS DC    X'0100'
STATMSGS DC    CL15'UNIT EXCEPTION'
         ORG   CSWCODES+17
         ORG   CSWCODES+17
         DC    X'0020'
         DC    CL15'PROGRAM CHECK'
         ORG   CSWCODES+34
         ORG   CSWCODES+34
         DC    X'0010'
         DC    CL15'PROTECTION CHK.'
         ORG   CSWCODES+51
         ORG   CSWCODES+51
         DC    X'0008'
         DC    CL15'CHAN DATA CHK'
         ORG   CSWCODES+68
         ORG   CSWCODES+68
         DC    X'0004'
         DC    CL15'CHAN CTRL CHK'
         ORG   CSWCODES+85
         ORG   CSWCODES+85
         DC    X'0002'
         DC    CL15'INTFCE CTRL CHK'
         ORG   CSWCODES+102
         ORG   CSWCODES+102
         DC    X'0001'
         DC    CL15'CHAINING CHECK'
         ORG   CSWCODES+119
UNCKCDS  DS    CL17
         ORG   UNCKCDS+0
UNCKCD   DC    X'8000'
UNCKMSG  DC    CL15' CMD REJECT'
         ORG   UNCKCDS+17
         ORG   UNCKCDS+17
         DC    X'4000'
         DC    CL15' INT REQ'
         ORG   UNCKCDS+34
         ORG   UNCKCDS+34
         DC    X'2000'
         DC    CL15'BUS OUT CK'
         ORG   UNCKCDS+51
         ORG   UNCKCDS+51
         DC    X'1000'
         DC    CL15'EQP CHECK'
         ORG   UNCKCDS+68
         ORG   UNCKCDS+68
         DC    X'0800'
         DC    CL15'DATA CHECK'
         ORG   UNCKCDS+85
         ORG   UNCKCDS+85
         DC    X'0400'
         DC    CL15'OVER RUN'
         ORG   UNCKCDS+102
         ORG   UNCKCDS+102
         DC    X'0200'
         DC    CL15'TRACK COND CK'
         ORG   UNCKCDS+119
         ORG   UNCKCDS+119
         DC    X'0100'
         DC    CL15'SEEK CHECK'
         ORG   UNCKCDS+136
         ORG   UNCKCDS+136
         DC    X'0080'
         DC    CL15'COUNT DATA CHK'
         ORG   UNCKCDS+153
         ORG   UNCKCDS+153
         DC    X'0040'
         DC    CL15'TRACK OVERRUN'
         ORG   UNCKCDS+170
         ORG   UNCKCDS+170
         DC    X'0020'
         DC    CL15'CYLINDER END'
         ORG   UNCKCDS+187
         ORG   UNCKCDS+187
         DC    X'0010'
         DC    CL15'INVALID SEQ'
         ORG   UNCKCDS+204
         ORG   UNCKCDS+204
         DC    X'0008'
         DC    CL15'NO RECORD FOUND'
         ORG   UNCKCDS+221
         ORG   UNCKCDS+221
         DC    X'0004'
         DC    CL15'FILE PROTECT'
         ORG   UNCKCDS+238
         ORG   UNCKCDS+238
         DC    X'0002'
         DC    CL15'MISSING A. M.'
         ORG   UNCKCDS+255
         ORG   UNCKCDS+255
         DC    X'0001'
         DC    CL15'OVERFL INCP'
         ORG   UNCKCDS+272
@DATD    DSECT
*
R0       EQU   0                        REGISTER ZERO
CON0     EQU   C'0'                     USED BY TRANSLATE INST
K0       EQU   0                        OFFSET FOR MOVE INST
ONE      EQU   1                        MISCELLANEOUS EQUATE
TWO      EQU   2                        MISCELLANEOUS EQUATE
THREE    EQU   3                        MISCELLANEOUS EQUATE
FOUR     EQU   4                        MISCELLANEOUS EQUATE
FIVE     EQU   5                        MISCELLANEOUS EQUATE
SIX      EQU   6                        MISCELLANEOUS EQUATE
SEVEN    EQU   7                        MISCELLANEOUS EQUATE
EIGHT    EQU   8                        MISCELLANEOUS EQUATE
NINE     EQU   9                        MISCELLANEOUS EQUATE
ELEVEN   EQU   11                       MISCELLANEOUS EQUATE
TWELVE   EQU   12                       MISCELLANEOUS EQUATE
THIRTEEN EQU   13                       MISCELLANEOUS EQUATE
FOURTEEN EQU   14                       MISCELLANEOUS EQUATE
FIFTEEN  EQU   15                       MISCELLANEOUS EQUATE
SIXTEEN  EQU   16                       MISCELLANEOUS EQUATE
TWENTY   EQU   20                       MISCELLANEOUS EQUATE
TWENTY4  EQU   24                       MISCELLANEOUS EQUATE
TWENTY8  EQU   28                       MISCELLANEOUS EQUATE
THIRTY2  EQU   32                       MISCELLANEOUS EQUATE
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019R5 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RWORK0   EQU   @00
RRPL     EQU   @01
R1       EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
RPARM1   EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
R10      EQU   @10
R11      EQU   @11
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
CVTPTR   EQU   16
IDAERMSG EQU   0
ERBASE   EQU   IDAERMSG
ERLGTH   EQU   ERBASE
ERMLL1   EQU   ERLGTH
ERMZERO1 EQU   ERLGTH+2
ERMLL2   EQU   ERLGTH+4
ERMZERO2 EQU   ERLGTH+6
ERMBFRA  EQU   ERBASE+8
ERDATE   EQU   ERBASE+12
ERCOMMA  EQU   ERBASE+17
ERTIME   EQU   ERBASE+18
COMMA0   EQU   ERBASE+26
ERRBA    EQU   ERBASE+27
COMMA05  EQU   ERBASE+35
ERMDSID  EQU   ERBASE+36
COMMA9   EQU   ERBASE+42
ERMVOL   EQU   ERBASE+43
COMMA1   EQU   ERBASE+49
ERJOBNM  EQU   ERBASE+50
COMMA2   EQU   ERBASE+58
ERSTEPNM EQU   ERBASE+59
COMMA3   EQU   ERBASE+67
ERUNIT   EQU   ERBASE+68
COMMA4   EQU   ERBASE+71
ERUNTYPE EQU   ERBASE+72
COMMA5   EQU   ERBASE+74
ERDDNM   EQU   ERBASE+75
COMMA6   EQU   ERBASE+83
EROPER   EQU   ERBASE+84
COMMA7   EQU   ERBASE+90
ERDESC   EQU   ERBASE+91
COMMA8   EQU   ERBASE+106
ERDEVD   EQU   ERBASE+107
ERDASEEK EQU   ERDEVD
ERDACOM  EQU   ERDEVD+14
ERDAAM   EQU   ERDEVD+15
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLFLG2 EQU   IDAAMBL+36
AMBLNUM  EQU   IDAAMBL+38
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
AMBLBIB  EQU   IDAAMBL+60
IFGEXLST EQU   0
EXLCOMN  EQU   IFGEXLST
EXLLEN   EQU   EXLCOMN+2
EXLEODF  EQU   EXLCOMN+5
EXLSYNF  EQU   EXLCOMN+10
EXLLERF  EQU   EXLCOMN+15
EXLSCIPF EQU   EXLCOMN+20
EXLUPADF EQU   EXLSCIPF
EXLSCIPS EQU   EXLUPADF
EXLSCIPA EQU   EXLUPADF
EXLSCIPK EQU   EXLUPADF
EXLSCIPP EQU   EXLCOMN+21
EXLLGNF  EQU   EXLCOMN+25
EXLJRNF  EQU   EXLCOMN+30
EXLOPNF  EQU   EXLCOMN+35
IFGEXLEF EQU   0
EXLENTRY EQU   IFGEXLEF
EXLFLAG  EQU   EXLENTRY
EXLENFL  EQU   EXLFLAG
EXLEXITP EQU   EXLENTRY+1
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHSSR   EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHEFLGS EQU   IDAPLH+4
PLH1ST   EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHDSCAN EQU   PLHEFLGS
PLHFLG3  EQU   IDAPLH+6
PLHAFLGS EQU   IDAPLH+7
PLHIOSRQ EQU   PLHAFLGS
PLHCRPL  EQU   IDAPLH+20
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHRSCS  EQU   IDAPLH+43
PLHDIOB  EQU   IDAPLH+76
PLHARET  EQU   IDAPLH+80
PLHAMB   EQU   IDAPLH+108
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHRBUFC EQU   IDAPLH+192
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHSLRBA EQU   IDAPLH+244
PLHKEYPT EQU   IDAPLH+248
PLHDRRSC EQU   IDAPLH+252
PLHPARM1 EQU   IDAPLH+256
PLHR13   EQU   IDAPLH+260
PLHTMRPL EQU   IDAPLH+265
PLHEND   EQU   IDAPLH+280
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBUEL   EQU   ACBEXLST
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMB   EQU   0
AMBBUFC  EQU   IDAAMB+8
AMBPH    EQU   IDAAMB+12
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBTYPE  EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEDB   EQU   IDAAMB+52
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBLSR   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBEXEX  EQU   IDAAMB+100
IDABUFDR EQU   0
BUFDRPFB EQU   IDABUFDR+4
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
BUFDBUFC EQU   IDABUFDR+12
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCER1  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCIOFL EQU   IDABUFC+2
BUFCFMT  EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCDDDD EQU   IDABUFC+8
BUFCORBA EQU   IDABUFC+12
BUFCCPA  EQU   IDABUFC+16
BUFCBAD  EQU   IDABUFC+20
BUFCNXT1 EQU   IDABUFC+24
BUFCINV  EQU   IDABUFC+28
BUFCHAIN EQU   IDABUFC+48
IDACPA   EQU   0
CPAWCPS  EQU   IDACPA+8
CPAWCPE  EQU   IDACPA+12
CPAWCKS  EQU   IDACPA+16
CPAWCKE  EQU   IDACPA+20
CPARCPS  EQU   IDACPA+28
CPARCPE  EQU   IDACPA+32
CPAWPHAD EQU   IDACPA+36
CPAWSEEK EQU   CPAWPHAD+1
CPARPHAD EQU   IDACPA+52
CPARSEEK EQU   CPARPHAD+1
CPASTAT1 EQU   IDACPA+83
CPAFLAGS EQU   IDACPA+84
CPAFLAG1 EQU   CPAFLAGS
CPAFLAG2 EQU   CPAFLAGS+1
CPARREPL EQU   CPAFLAG2
CPACCW   EQU   0
IDAEDBHD EQU   0
IDAEDB   EQU   0
EDBFLG1  EQU   IDAEDB+2
EDBM     EQU   IDAEDB+3
EDBLPMBA EQU   IDAEDB+4
IDALPMB  EQU   0
LPMBFLGS EQU   IDALPMB+1
LPMTPC   EQU   IDALPMB+18
LPMBLKTR EQU   IDALPMB+20
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLREQ   EQU   RPLIDWD+2
RPLLEN   EQU   RPLIDWD+3
RPLPLHPT EQU   RPLCOMN+4
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLEMLEN EQU   RPLCOMN+70
RPLERMSA EQU   RPLCOMN+72
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBUCBA  EQU   DEBUCBAD+1
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBTIO   EQU   TCB+12
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
TIOT1    EQU   0
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBNAME  EQU   UCBOB+13
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00079 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
IDADIWA  EQU   0
DIWFLG1  EQU   IDADIWA+4
DIWFLG2  EQU   IDADIWA+5
DIWBUFC  EQU   IDADIWA+20
DIWSAVE  EQU   IDADIWA+28
IDAAMBXN EQU   0
AMBXEOV  EQU   IDAAMBXN
AMBXCSWD EQU   IDAAMBXN+16
IDAIOMBX EQU   0
IOMXFLGS EQU   IDAIOMBX+1
IOMXPDET EQU   IDAIOMBX+4
IOMXRECB EQU   IDAIOMBX+20
IOMXECB  EQU   IOMXRECB
IOMXRSLT EQU   IOMXECB
IDAIOMB  EQU   0
IOMBUFC  EQU   IDAIOMB+4
IOMAMB   EQU   IDAIOMB+16
IOMIQE   EQU   IDAIOMB+20
IOMECBPT EQU   IDAIOMB+24
IOMIOSB  EQU   IDAIOMB+36
IOMFLAGS EQU   IDAIOMB+40
IOMFL    EQU   IOMFLAGS
IOMAPEND EQU   IOMFL
IOMSTIND EQU   IOMFLAGS+2
IOMSAVER EQU   IDAIOMB+52
IOMUFLD  EQU   IDAIOMB+120
IQESECT  EQU   0
IQELNK   EQU   IQESECT
IQEIRB   EQU   IQESECT+8
IQEFLAGS EQU   IQEIRB
IQETCB   EQU   IQESECT+12
IOSB     EQU   0
IOSFLA   EQU   IOSB
IOSACHN  EQU   IOSFLA
IOSFLB   EQU   IOSB+1
IOSFLC   EQU   IOSB+2
IOSDVALT EQU   IOSFLC
IOSPKEY  EQU   IOSB+12
IOSOPT   EQU   IOSB+14
IOSOPT2  EQU   IOSB+15
@NM00106 EQU   IOSB+20
IOSCSW   EQU   @NM00106+1
IOSCSWCA EQU   IOSCSW
IOSTATUS EQU   IOSCSW+3
IOSSNS   EQU   IOSB+42
IOSIPIB  EQU   IOSB+44
IOSPATH  EQU   IOSB+86
IOSCHN   EQU   IOSPATH
IOSCKEY  EQU   IOSB+89
IOSEEKA  EQU   IOSB+100
IOSSKM   EQU   IOSEEKA
IOSCCHH  EQU   IOSEEKA+3
IOSSKHH  EQU   IOSCCHH+2
IDABIB   EQU   0
BIBHDR   EQU   IDABIB
BIBFLG1  EQU   BIBHDR+1
BIBRTNS  EQU   IDABIB+60
BIBJOBNM EQU   IDABIB+76
BIBSTPNM EQU   IDABIB+84
BIBDDNM  EQU   IDABIB+92
USEREXIT EQU   0
R15SAVE  EQU   16
ECBCODE  EQU   0
BBCCHHR  EQU   0
CCHHR    EQU   BBCCHHR+2
CC       EQU   CCHHR
HH       EQU   CCHHR+2
R        EQU   CCHHR+4
CCHHRKDD EQU   0
LASTCCW  EQU   0
DATADDR  EQU   LASTCCW
LASTOP   EQU   DATADDR
COUNT    EQU   LASTCCW+6
ECB      EQU   0
IQEEND   EQU   0
PLHKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
RESTART  EQU   0
RPLSAVE  EQU   0
RSRCBYTE EQU   0
UCBBGN   EQU   0
USERECB  EQU   0
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
@NM00064 EQU   DEBISAM+12
DEBRPSID EQU   @NM00064
TCBPTR   EQU   DEBTCBAD
TIOTPTR  EQU   TCBTIO
TIOENTRY EQU   TIOT1+24
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
POOLSTAR EQU   TIOENTRY+20
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
UCBPTR   EQU   DEBUCBA
UCBOBS01 EQU   UCBDEV
UCBVOLI  EQU   UCBOBS01+4
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00078 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
IOSBPTR  EQU   IOMIOSB
IOSATTSC EQU   IOSIPIB
IOSWTOWA EQU   IOSIPIB
IOSPCISC EQU   IOSIPIB
PSARSVTE EQU   PSARSVT
SENSE    EQU   IOSSNS
RESULT   EQU   IOSTATUS
@NM00138 EQU   RESULT
UNITCHK  EQU   @NM00138
INCORLEN EQU   @NM00138+1
CCWPTR   EQU   IOSCSWCA
BUFCRSC1 EQU   BUFCAVL
FLC      EQU   PSA
PLHCSRSC EQU   IDAPLH
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00140 EQU   @NM00138
@NM00139 EQU   @NM00138
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
IOSPCIWA EQU   IOSPCISC+44
IOSPCIRS EQU   IOSPCISC+8
@NM00111 EQU   IOSPCISC+4
@NM00110 EQU   IOSPCISC
IOSWRNDR EQU   IOSWTOWA+4
IOSWTOPT EQU   IOSWTOWA+3
IOSWTOCP EQU   IOSWTOWA+2
IOSWTOCH EQU   IOSWTOWA
IOSATTWA EQU   IOSATTSC+40
@NM00109 EQU   IOSATTSC+24
IOSATTSN EQU   IOSATTSC
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00078
UCBSKPFG EQU   @NM00078
UCBRIPND EQU   @NM00078
UCBRTIAC EQU   @NM00078
UCBRSV79 EQU   @NM00078
UCBRSV78 EQU   @NM00078
UCBRSV77 EQU   @NM00078
UCBOLTEP EQU   @NM00078
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
@NM00077 EQU   UCBOBS03
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBDQDSP EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00076 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVTOC  EQU   UCBOBS01
TIOUCBP  EQU   TIOEDEVE+1
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00074 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00073 EQU   POOLSTAR
TIOEFSRT EQU   TIOENTRY+17
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOEJFCB EQU   TIOENTRY+12
TIOEDDNM EQU   TIOENTRY+4
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOEWTCT EQU   TIOERLOC
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
TIOELNGH EQU   TIOENTRY
DEBEXPTA EQU   @NM00064+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00026 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
ECBCC    EQU   ECB+1
@NM00142 EQU   ECB
ECBPOST  EQU   ECB
@NM00141 EQU   ECB
FLAGS    EQU   LASTCCW+4
DATADD   EQU   DATADDR+1
BB       EQU   BBCCHHR
BIBVSRTP EQU   IDABIB+104
BIBASCB  EQU   IDABIB+100
BIBSIOAP EQU   BIBRTNS+12
BIBASYRT EQU   BIBRTNS+8
BIBCEAPP EQU   BIBRTNS+4
BIBINTRF EQU   BIBRTNS
BIBVGTT  EQU   IDABIB+56
BIBPSAB  EQU   IDABIB+52
BIBCSL   EQU   IDABIB+48
BIBWSHD  EQU   IDABIB+44
BIBVCRT  EQU   IDABIB+40
BIBHEBFQ EQU   IDABIB+36
BIBHEBPT EQU   IDABIB+32
BIBPRSPH EQU   IDABIB+28
BIBSPHPT EQU   IDABIB+24
BIBPAMBL EQU   IDABIB+20
BIBDACB  EQU   IDABIB+16
BIBVMT   EQU   IDABIB+12
BIBUPT   EQU   IDABIB+8
@NM00113 EQU   IDABIB+5
BIBFLG2  EQU   IDABIB+4
BIBLEN   EQU   BIBHDR+2
@NM00112 EQU   BIBFLG1
BIBCKPT  EQU   BIBFLG1
BIBREST  EQU   BIBFLG1
BIBVIRT  EQU   BIBFLG1
BIBID    EQU   BIBHDR
IOSEND   EQU   IOSB+108
IOSSKR   EQU   IOSEEKA+7
IOSSKH2  EQU   IOSSKHH+1
IOSSKH1  EQU   IOSSKHH
IOSSKCC  EQU   IOSCCHH
IOSSKBB  EQU   IOSEEKA+1
IOSEEK   EQU   IOSB+92
IOSMDM   EQU   IOSB+91
IOSMDB   EQU   IOSB+90
IOSCKEY7 EQU   IOSCKEY
IOSCKEY6 EQU   IOSCKEY
IOSCKEY5 EQU   IOSCKEY
IOSCKEY4 EQU   IOSCKEY
@NM00108 EQU   IOSCKEY
IOSFMSK  EQU   IOSB+88
IOSCUDEV EQU   IOSPATH+1
@NM00107 EQU   IOSCHN
IOSPATH3 EQU   IOSCHN
IOSPATH2 EQU   IOSCHN
IOSEXP   EQU   IOSCHN
IOSGDP   EQU   IOSCHN
IOSAFF   EQU   IOSB+85
IOSRSS1B EQU   IOSB+84
IOSDSID  EQU   IOSB+80
IOSVST   EQU   IOSB+76
IOSRST   EQU   IOSB+72
IOSDIE   EQU   IOSB+68
IOSABN   EQU   IOSB+64
IOSNRM   EQU   IOSB+60
IOSPCI   EQU   IOSB+56
IOSERP   EQU   IOSB+52
IOSPCHN  EQU   IOSB+48
IOSAPMSK EQU   IOSB+40
IOSRES4A EQU   IOSB+36
IOSUSE   EQU   IOSB+32
IOSSRB   EQU   IOSB+28
IOSCSWRC EQU   IOSCSW+5
IOSTSB   EQU   IOSTATUS+1
IOSTSA   EQU   IOSTATUS
IOSCC    EQU   @NM00106
IOSUCB   EQU   IOSB+16
IOSOPT2X EQU   IOSOPT2
IOSIGP   EQU   IOSOPT2
IOSHTP   EQU   IOSOPT2
IOSRELSE EQU   IOSOPT
IOSAPR   EQU   IOSOPT
IOSTSLL  EQU   IOSOPT
IOSNERP  EQU   IOSOPT
IOSPSLL  EQU   IOSOPT
IOSQISCE EQU   IOSOPT
IOSDEP   EQU   IOSOPT
IOSBYP   EQU   IOSOPT
IOSCOD   EQU   IOSB+13
IOSPKY7  EQU   IOSPKEY
IOSPGDPX EQU   IOSPKEY
IOSIDR   EQU   IOSPKEY
IOSLCL   EQU   IOSPKEY
@NM00105 EQU   IOSPKEY
IOSPGAD  EQU   IOSB+8
IOSASID  EQU   IOSB+6
IOSPRLVL EQU   IOSB+5
IOSDVRID EQU   IOSB+4
IOSPROC  EQU   IOSB+3
IOSFLC7  EQU   IOSFLC
IOSCTCNR EQU   IOSFLC
IOSRWAIT EQU   IOSFLC
IOSTP    EQU   IOSFLC
IOSCC3WE EQU   IOSFLC
IOSVERIF EQU   IOSDVALT
IOSDVMNT EQU   IOSFLC
IOSLOG   EQU   IOSFLB
IOSBDCST EQU   IOSFLB
IOSMSG   EQU   IOSFLB
IOSFLB4  EQU   IOSFLB
IOSFLB3  EQU   IOSFLB
IOSNOTRS EQU   IOSFLB
IOSSDR   EQU   IOSFLB
IOSDIESE EQU   IOSFLB
IOSIOSB  EQU   IOSFLA
IOSDOM   EQU   IOSFLA
IOSEX    EQU   IOSFLA
IOSSMDB  EQU   IOSFLA
IOSSMDA  EQU   IOSFLA
IOSERR   EQU   IOSFLA
IOSCCHN  EQU   IOSACHN
IOSDCHN  EQU   IOSACHN
IQEOUTLM EQU   IQESECT+20
IQEDCB   EQU   IQESECT+16
IQETCBA  EQU   IQETCB+1
IQESTAT2 EQU   IQETCB
IQEIRBA  EQU   IQEIRB+1
@NM00104 EQU   IQEFLAGS
@NM00103 EQU   IQEFLAGS
@NM00102 EQU   IQEFLAGS
@NM00101 EQU   IQEFLAGS
@NM00100 EQU   IQEFLAGS
@NM00099 EQU   IQEFLAGS
@NM00098 EQU   IQEFLAGS
IQEPURGE EQU   IQEFLAGS
IQEPARAM EQU   IQESECT+4
IQELNKA  EQU   IQELNK+1
IQESTAT1 EQU   IQELNK
IOMNXT1  EQU   IDAIOMB+116
IOMSAVEF EQU   IOMSAVER+60
IOMSAVEE EQU   IOMSAVER+56
IOMSAVED EQU   IOMSAVER+52
IOMSAVEC EQU   IOMSAVER+48
IOMSAVEB EQU   IOMSAVER+44
IOMSAVEA EQU   IOMSAVER+40
IOMSAVE9 EQU   IOMSAVER+36
IOMSAVE8 EQU   IOMSAVER+32
IOMSAVE7 EQU   IOMSAVER+28
IOMSAVE6 EQU   IOMSAVER+24
IOMSAVE5 EQU   IOMSAVER+20
IOMSAVE4 EQU   IOMSAVER+16
IOMSAVE3 EQU   IOMSAVER+12
IOMSAVE2 EQU   IOMSAVER+8
IOMSAVE1 EQU   IOMSAVER+4
IOMSAVE0 EQU   IOMSAVER
IOMNSEG  EQU   IDAIOMB+50
IOMNBUF  EQU   IDAIOMB+48
IOMNMOD  EQU   IDAIOMB+46
IOMLOCK  EQU   IDAIOMB+45
IOMPFERR EQU   IDAIOMB+44
IOMCKEY  EQU   IDAIOMB+43
@NM00097 EQU   IOMSTIND
IOMSRBM  EQU   IOMSTIND
IOMSLOC  EQU   IOMSTIND
IOMLLOCK EQU   IOMSTIND
IOMEOVXC EQU   IOMSTIND
IOMEOVTS EQU   IOMSTIND
IOMEOVW  EQU   IOMSTIND
IOMAMUSE EQU   IOMSTIND
@NM00096 EQU   IOMFL+1
IOMIRBSW EQU   IOMFL+1
IOMEEXIT EQU   IOMFL+1
@NM00095 EQU   IOMFL+1
IOMCPRB  EQU   IOMFL+1
IOMDDR   EQU   IOMFL+1
IOMCSW   EQU   IOMFL
IOMPGFIX EQU   IOMFL
IOMADERR EQU   IOMFL
IOMCBERR EQU   IOMFL
@NM00094 EQU   IOMFL
IOMPURGE EQU   IOMFL
IOMAE    EQU   IOMAPEND
IOMNE    EQU   IOMAPEND
IOMPGAD  EQU   IDAIOMB+32
IOMVSL   EQU   IDAIOMB+28
IOMPLH   EQU   IDAIOMB+12
IOMCPA   EQU   IDAIOMB+8
IOMBID   EQU   IDAIOMB
IOMXRBPT EQU   IOMXECB+1
IOMXIOCC EQU   IOMXRSLT
IOMXPOST EQU   IOMXRSLT
IOMXWAIT EQU   IOMXECB
IOMXR14  EQU   IDAIOMBX+16
IOMXRPL  EQU   IOMXPDET+8
IOMXR13S EQU   IOMXPDET+4
IOMXBFLG EQU   IOMXPDET
@NM00093 EQU   IOMXFLGS
IOMXSCAN EQU   IOMXFLGS
IOMXEOVW EQU   IOMXFLGS
IOMXUSE  EQU   IOMXFLGS
IOMXLOCK EQU   IDAIOMBX
AMBXBM2S EQU   IDAAMBXN+20
AMBXRDCT EQU   AMBXCSWD+2
@NM00092 EQU   AMBXCSWD
AMBXECB  EQU   IDAAMBXN+12
AMBXASCB EQU   IDAAMBXN+8
@NM00091 EQU   AMBXEOV+7
AMBXEVRC EQU   AMBXEOV+6
AMBXEOVR EQU   AMBXEOV+5
AMBXRSC  EQU   AMBXEOV+4
AMBXEVPT EQU   AMBXEOV
@NM00090 EQU   IDADIWA+92
@NM00089 EQU   IDADIWA+88
@NM00088 EQU   IDADIWA+84
@NM00087 EQU   IDADIWA+80
@NM00086 EQU   IDADIWA+76
@NM00085 EQU   IDADIWA+72
@NM00084 EQU   IDADIWA+68
@NM00083 EQU   IDADIWA+64
@NM00082 EQU   IDADIWA+60
@NM00081 EQU   IDADIWA+56
DIWINRBA EQU   IDADIWA+52
DIWRKCT  EQU   IDADIWA+48
DIWSAVE5 EQU   DIWSAVE+16
DIWSAVE4 EQU   DIWSAVE+12
DIWSAVE3 EQU   DIWSAVE+8
DIWSAVE2 EQU   DIWSAVE+4
DIWSAVE1 EQU   DIWSAVE
DIWSPLTP EQU   IDADIWA+24
DIWPLH   EQU   IDADIWA+16
DIWHRBA  EQU   IDADIWA+12
DIWLRBA  EQU   IDADIWA+8
@NM00080 EQU   IDADIWA+6
DIWFSPF  EQU   DIWFLG2
DIW1ST   EQU   DIWFLG1
DIWNOT1  EQU   DIWFLG1
DIWSHIFT EQU   DIWFLG1
DIWGSPC  EQU   DIWFLG1
DIWEOKR  EQU   DIWFLG1
DIWPFERR EQU   DIWFLG1
DIWCISPL EQU   DIWFLG1
DIWCAS   EQU   DIWFLG1
DIWLEN   EQU   IDADIWA+2
DIWATV   EQU   IDADIWA+1
DIWID    EQU   IDADIWA
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBFCBPE EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00079
UCBHALI  EQU   @NM00079
UCBRSV09 EQU   @NM00079
UCBRSV08 EQU   @NM00079
UCBRSV07 EQU   @NM00079
UCBRSV06 EQU   @NM00079
UCBRSV05 EQU   @NM00079
UCBRSV04 EQU   @NM00079
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00075 EQU   UCB
TIOCSTEP EQU   TIOT1+8
TIOCNJOB EQU   TIOT1
@NM00072 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00071 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00070 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00069 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
DEBXSAMB EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBESMVR EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00068 EQU   DEBACS08+12
@NM00067 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00066 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00065 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBDVMOD EQU   DEBUCBAD
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBDCBB  EQU   DEBDCBAD+1
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBNMEXT EQU   DEBUSRPG
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBDEBB  EQU   DEBDEBAD+1
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00063 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00062 EQU   RPLRBAR+3
@NM00061 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLLEN2  EQU   RPLLEN
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
LPMBSST  EQU   IDALPMB+28
LPMBEXT  EQU   IDALPMB+24
@NM00060 EQU   IDALPMB+22
LPMTRKAU EQU   IDALPMB+16
LPMBLKSZ EQU   IDALPMB+12
LPMBPTRK EQU   IDALPMB+8
LPMAUSZ  EQU   IDALPMB+4
LPMBLEN  EQU   IDALPMB+2
@NM00059 EQU   LPMBFLGS
LPMBSSTH EQU   LPMBFLGS
LPMBTOFL EQU   LPMBFLGS
LPMSS    EQU   LPMBFLGS
LPMREPL  EQU   LPMBFLGS
LPMBRPS  EQU   LPMBFLGS
LPMBID   EQU   IDALPMB
EDBTKBAL EQU   IDAEDB+20
EDBHIRBA EQU   IDAEDB+16
EDBLORBA EQU   IDAEDB+12
EDBSTTRK EQU   IDAEDB+8
@NM00058 EQU   EDBFLG1
EDBPSDS  EQU   EDBFLG1
EDBTOFLW EQU   EDBFLG1
EDBLKR   EQU   EDBFLG1
@NM00057 EQU   IDAEDB
EDBLPMBC EQU   IDAEDBHD+4
EDBLEN   EQU   IDAEDBHD+2
EDBNO    EQU   IDAEDBHD+1
EDBID    EQU   IDAEDBHD
CPACCWTC EQU   CPACCW+24
CPACCWSI EQU   CPACCW+16
CPACCWSS EQU   CPACCW+8
CPACCWSK EQU   CPACCW
CPACPCHN EQU   IDACPA+92
CPANXT1  EQU   IDACPA+88
CPAWSECT EQU   IDACPA+87
CPARSECT EQU   IDACPA+86
CPATKOFL EQU   CPAFLAG2
CPAPFENT EQU   CPAFLAG2
CPAXLRA  EQU   CPAFLAG2
CPAWREPL EQU   CPAFLAG2
@NM00056 EQU   CPAFLAG1
CPACHNED EQU   CPAFLAG1
CPARRPS  EQU   CPAFLAG1
CPAWRPS  EQU   CPAFLAG1
CPARV    EQU   CPAFLAG1
CPAWCV   EQU   CPAFLAG1
CPAWV    EQU   CPAFLAG1
CPAVPLV  EQU   CPASTAT1
CPASSECT EQU   IDACPA+82
CPABCINV EQU   IDACPA+80
CPABLKSZ EQU   IDACPA+76
CPAWORK2 EQU   IDACPA+72
CPAWORK1 EQU   IDACPA+68
CPAVPL   EQU   IDACPA+64
CPAIDAL  EQU   IDACPA+60
@NM00055 EQU   CPARPHAD+7
CPARSID  EQU   CPARSEEK+2
CPARBB   EQU   CPARSEEK
@NM00054 EQU   CPARPHAD
CPAFWCNT EQU   IDACPA+48
CPAWSID  EQU   IDACPA+44
CPAWPHR  EQU   CPAWPHAD+7
CPAWCHR  EQU   CPAWSEEK+2
CPAWBB   EQU   CPAWSEEK
@NM00053 EQU   CPAWPHAD
CPARREAL EQU   IDACPA+24
CPAWREAL EQU   IDACPA+4
CPALEN   EQU   IDACPA+2
@NM00052 EQU   IDACPA+1
CPAID    EQU   IDACPA
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFXORBA EQU   IDABUFC+44
BUFXIRBA EQU   IDABUFC+40
BUFCNXT2 EQU   IDABUFC+37
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCAMB  EQU   BUFCPLH
@NM00051 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCMW   EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00050 EQU   IDABUFDR+16
@NM00049 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00048 EQU   AMBCSWD1+1
@NM00047 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
@NM00046 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00045 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00044 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00043 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00042 EQU   AMBINFL
@NM00041 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00040 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00039 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00038 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00037 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBDSB   EQU   IDAAMB+20
AMBCACB  EQU   IDAAMB+16
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00036 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00035 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00034 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00033 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00032 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00031 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00030 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00029 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00028 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00027 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00025 EQU   IDAPLH+266
@NM00024 EQU   PLHTMRPL
PLHTMIOB EQU   PLHTMRPL
PLHTMINX EQU   PLHTMRPL
PLHTMDTA EQU   PLHTMRPL
PLHTMDIW EQU   PLHTMRPL
PLHTMBUF EQU   PLHTMRPL
PLHTERM  EQU   PLHTMRPL
PLHDRMSK EQU   IDAPLH+264
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00023 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHIBUFC EQU   IDAPLH+188
PLHNRBA  EQU   IDAPLH+184
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00022 EQU   IDAPLH+172
@NM00021 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHRDFP  EQU   IDAPLH+68
PLHFSP   EQU   IDAPLH+64
PLHRECP  EQU   IDAPLH+60
PLHNBUFC EQU   IDAPLH+56
PLHDBUFC EQU   IDAPLH+52
PLHLRECL EQU   IDAPLH+48
PLHARDB  EQU   IDAPLH+44
@NM00020 EQU   PLHRSCS
PLHDBPER EQU   PLHRSCS
PLHDSERR EQU   PLHRSCS
PLHASYER EQU   PLHRSCS
@NM00019 EQU   PLHRSCS
PLHBUFHD EQU   PLHRSCS
PLHINEOV EQU   PLHRSCS
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHMRPL  EQU   IDAPLH+16
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00018 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHNOADV EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
@NM00017 EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHASKBF EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
EXLEADDR EQU   EXLEXITP
@NM00016 EQU   EXLENFL
EXLLNK   EQU   EXLENFL
EXLACTM  EQU   EXLENFL
EXLSPEC  EQU   EXLENFL
EXLOPNP  EQU   EXLCOMN+36
@NM00015 EQU   EXLOPNF
EXLOPNK  EQU   EXLOPNF
EXLOPNA  EQU   EXLOPNF
EXLOPNS  EQU   EXLOPNF
EXLJRNP  EQU   EXLCOMN+31
@NM00014 EQU   EXLJRNF
EXLJRNK  EQU   EXLJRNF
EXLJRNA  EQU   EXLJRNF
EXLJRNS  EQU   EXLJRNF
EXLLGNP  EQU   EXLCOMN+26
@NM00013 EQU   EXLLGNF
EXLLGNK  EQU   EXLLGNF
EXLLGNA  EQU   EXLLGNF
EXLLGNS  EQU   EXLLGNF
EXLUPADP EQU   EXLSCIPP
@NM00012 EQU   EXLUPADF
EXLUPADK EQU   EXLSCIPK
EXLUPADA EQU   EXLSCIPA
EXLUPADS EQU   EXLSCIPS
EXLLERP  EQU   EXLCOMN+16
@NM00011 EQU   EXLLERF
EXLLERK  EQU   EXLLERF
EXLLERA  EQU   EXLLERF
EXLLERS  EQU   EXLLERF
EXLSYNP  EQU   EXLCOMN+11
@NM00010 EQU   EXLSYNF
EXLSYNK  EQU   EXLSYNF
EXLSYNA  EQU   EXLSYNF
EXLSYNS  EQU   EXLSYNF
EXLEODP  EQU   EXLCOMN+6
@NM00009 EQU   EXLEODF
EXLEODK  EQU   EXLEODF
EXLEODA  EQU   EXLEODF
EXLEODS  EQU   EXLEODF
@NM00008 EQU   EXLCOMN+4
EXLLEN2  EQU   EXLLEN
EXLSTYP  EQU   EXLCOMN+1
EXLID    EQU   EXLCOMN
AMBLCMB  EQU   IDAAMBL+64
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00007 EQU   IDAAMBL+40
AMBLNST  EQU   IDAAMBL+37
@NM00006 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00005 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00004 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00003 EQU   IDAAMBL+31
@NM00002 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00001 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
@NM00137 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00136 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00135 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00134 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00133 EQU   FLCFSA
@NM00132 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00131 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00130 EQU   FLCIOA
@NM00129 EQU   FLCMCLA+15
@NM00128 EQU   FLCMCLA+14
@NM00127 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00126 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00125 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00124 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00123 EQU   FLCPER
@NM00122 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00121 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00120 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00119 EQU   FLCPIILC
@NM00118 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00117 EQU   FLCSVILC
@NM00116 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00115 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00114 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00347 EQU   @RC00345
@RC00363 EQU   @RC00361
@RF00418 EQU   @RC00412
SETSEEK# EQU   @RC00412
@RF00494 EQU   @EL00001
@RF00504 EQU   @EL00001
@RC00496 EQU   @EL00001
@RF00515 EQU   @EL00002
@RF00526 EQU   @EL00002
@RF00529 EQU   @EL00002
SETSEEK@ EQU   @EC00587
@RC00638 EQU   @RC00632
@PB00003 EQU   @EC00691
@RF00501 EQU   @RC00496
@RC00499 EQU   @RC00496
@ENDDATA EQU   *
         END   IDA019R5,(C'PLS1836',0701,78207)
