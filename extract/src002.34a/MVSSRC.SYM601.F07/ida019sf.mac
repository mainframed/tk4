         TITLE 'IDA019SF--CONTROL AREA SPLIT SPANNED RECORD            *
                        '
IDA019SF CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA019SF  78.172'                                 0001
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         IDASVR14
*   RAMB=AMBLDTA;                   /* POINT TO DATA AMB.            */
         L     @10,RPLDACB(,RRPL)                                  0169
         L     @10,ACBAMBL(,@10)                                   0169
         L     RAMB,AMBLDTA(,@10)                                  0169
*   DIW1ST=OFF;                     /* CLEAR BEG OF SEQ SET FLAG.    */
         L     @10,AMBIWA(,RAMB)                                   0170
         NI    DIW1ST(@10),B'11111110'                             0170
*   DIWFSPF=OFF;                    /* CLEAR NO SPLIT FLAG.          */
         NI    DIWFSPF(@10),B'01111111'                            0171
*   RBUFC=PLHIBUFC;                 /* POINT TO IX BUFC OF CUR SEQ 0172
*                                      SET.                          */
         L     RBUFC,PLHIBUFC(,RPLH)                               0172
*   RPARM1=IXHPTLS;                 /* GET RBA PTR MASK.             */
         L     @10,BUFCBAD(,RBUFC)                                 0173
         SLR   RPARM1,RPARM1                                       0173
         IC    RPARM1,IXHPTLS(,@10)                                0173
*   RWORK2=BUFCBAD+IXHLL-IXHFLPLN;  /* POINT TO 1ST SEG ENTRY OF SR
*                                      ENTRY.                        */
         LH    RWORK2,IXHLL(,@10)                                  0174
         N     RWORK2,@CF01121                                     0174
         ALR   RWORK2,@10                                          0174
         SLR   @05,@05                                             0174
         IC    @05,IXHFLPLN(,@10)                                  0174
         SLR   RWORK2,@05                                          0174
*   GEN(EX RPARM1,ICMINS);          /* GET DATA RBA MULTIPLIER.      */
         EX RPARM1,ICMINS
*   RPARM1=RPARM1*AMDCINV+IXHBRBA;  /* GET DATA CI RBA.              */
         L     @10,AMBDSB(,RAMB)                                   0176
         LR    @15,RPARM1                                          0176
         M     @14,AMDCINV(,@10)                                   0176
         L     @10,BUFCBAD(,RBUFC)                                 0176
         AL    @15,IXHBRBA(,@10)                                   0176
         LR    RPARM1,@15                                          0176
*I01:                                                              0177
*   DO;                             /* IDACALL(IDAGRB)               */
I01      DS    0H                                                  0178
*     CALL IDAGRB;                  /* EXIT TO IDAGRB                */
         L     @15,@CV01043                                        0178
         BALR  @14,@15                                             0178
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I01;                        /* GET DATA IP BFR-1ST SEG.      */
*   IF RPLERREG^='00'X THEN         /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0184
         BNE   @RT00184                                            0184
*     GOTO SFEXIT;                  /* RETURN.                       */
*   RAMB=AMBLIX;                    /* POINT TO IX AMB.              */
         L     @10,RPLDACB(,RRPL)                                  0186
         L     @10,ACBAMBL(,@10)                                   0186
         L     RAMB,AMBLIX(,@10)                                   0186
*   RBUFC=PLHIBUFC;                 /* POINT TO INDEX BUFC.          */
         L     RBUFC,PLHIBUFC(,RPLH)                               0187
*   ICWCRBA=BUFCDDDD;               /* SAVE RBA OF CUR. SEQ SET REC-
*                                      WILL BE IN ICWPRBA AFTER CALL
*                                      IDANEWRD.                     */
         L     @10,AMBIWA(,RAMB)                                   0188
         L     @05,BUFCDDDD(,RBUFC)                                0188
         ST    @05,ICWCRBA(,@10)                                   0188
*   ICWTPTR=IXHHP;                  /* SAVE HORIZ PTR OF CUR. SEQ SET
*                                      RECORD.                       */
         L     @05,BUFCBAD(,RBUFC)                                 0189
         L     @15,IXHHP(,@05)                                     0189
         ST    @15,ICWTPTR(,@10)                                   0189
*   RWORK2=BUFCBAD+IXHLEO;          /* POINT TO LAST ENTRY OF CUR. 0190
*                                      SEQ RECORD.                   */
         LH    RWORK2,IXHLEO(,@05)                                 0190
         ALR   RWORK2,@05                                          0190
*   RWORK3=RWORK2->IBFLPL;          /* GET L BYTE.                   */
         SLR   RWORK3,RWORK3                                       0191
         IC    RWORK3,IBFLPL(,RWORK2)                              0191
*   ICWKEY1L=RWORK3;                /* SAVE L BYTE.                  */
         STH   RWORK3,ICWKEY1L(,@10)                               0192
*   RWORK4=RWORK2-RWORK3;           /* POINT TO START OF KEY         */
         LR    RWORK4,RWORK2                                       0193
         SLR   RWORK4,RWORK3                                       0193
*   RWORK0=RWORK3;                  /* SAVE LENGTH                   */
         LR    RWORK0,RWORK3                                       0194
*   RWORK2=ADDR(ICWKEY1);           /* SET 'TO' ADDRESS              */
         LA    RWORK2,ICWKEY1(,@10)                                0195
*   RWORK5=RWORK3;                  /* SET MOVE LENGTH               */
         LR    RWORK5,RWORK3                                       0196
*   GEN(MVCL RWORK2,RWORK4);        /* SAVE KEY OF ENTRY             */
         MVCL RWORK2,RWORK4
*   RWORK3=AMDKEYLN-RWORK0;         /* PAD LENGTH.                   */
         L     @10,AMBDSB(,RAMB)                                   0198
         LH    RWORK3,AMDKEYLN(,@10)                               0198
         SLR   RWORK3,RWORK0                                       0198
*   RWORK5='FF000000'X;             /* PAD CHAR.                     */
         L     RWORK5,@CF01072                                     0199
*   GEN(MVCL RWORK2,RWORK4);        /* PAD KEY WITH F'S.             */
         MVCL RWORK2,RWORK4
*   RWORK2=PLHKEYPT;                /* SET TO ADDRESS.               */
         L     RWORK2,PLHKEYPT(,RPLH)                              0201
*   RWORK3=AMDKEYLN;                /* SET TO LENGTH.                */
         L     @10,AMBDSB(,RAMB)                                   0202
         LH    RWORK3,AMDKEYLN(,@10)                               0202
*   RWORK5=RWORK3;                  /* SET FROM LENGTH.              */
         LR    RWORK5,RWORK3                                       0203
*   IF ICWKEY1L=ZERO THEN           /* L=0, DUMMY ENTRY.             */
         L     @10,AMBIWA(,RAMB)                                   0204
         LH    @10,ICWKEY1L(,@10)                                  0204
         LTR   @10,@10                                             0204
         BNZ   @RF00204                                            0204
*     RWORK4=ADDR(ARDKEYS)+RWORK3;  /* USE ARDB HI-KEY.              */
         L     RWORK4,PLHARDB(,RPLH)                               0205
         LA    RWORK4,ARDKEYS(,RWORK4)                             0205
         ALR   RWORK4,RWORK3                                       0205
*   ELSE                            /* NOT DUMMY ENTRY.              */
*     RWORK4=ADDR(ICWKEY1);         /* USE ICWKEY1 KEY.              */
         B     @RC00204                                            0206
@RF00204 L     RWORK4,AMBIWA(,RAMB)                                0206
         LA    RWORK4,ICWKEY1(,RWORK4)                             0206
*   GEN(MVCL RWORK2,RWORK4);        /* PUT KEY IN PLH KEY.           */
@RC00204 DS    0H                                                  0207
         MVCL RWORK2,RWORK4
*   RFY                                                            0208
*    (RWORK0,                                                      0208
*     RWORK2,                                                      0208
*     RWORK3,                                                      0208
*     RWORK4,                                                      0208
*     RWORK5) UNRSTD;               /* FREE REGS.                    */
*   ICWLN=ONE;                      /* SET INDEX LEVEL NO.           */
         L     @10,AMBIWA(,RAMB)                                   0209
         MVC   ICWLN(2,@10),@CH00047                               0209
*   ICWADD=ADDR(IDAICWA);           /* POINT TO CURRENT ICWA.        */
         ST    @10,ICWADD(,@10)                                    0210
*   IF AMDRANGE=ON THEN             /* IF KEY RANGE DATA SET         */
         L     @05,AMBDSB(,RAMB)                                   0211
         TM    AMDRANGE(@05),B'00000100'                           0211
         BNO   @RF00211                                            0211
*     ICWKRDS=ON;                   /* MARK WORK AREA                */
         OI    ICWKRDS(@10),B'00000100'                            0212
*   RBUFC=PLHIBUFC;                 /* POINT TO INDEX BUFC.          */
@RF00211 L     RBUFC,PLHIBUFC(,RPLH)                               0213
*I02:                                                              0214
*   DO;                             /* IDACALL(IDAFREEB)             */
I02      DS    0H                                                  0215
*     CALL IDAFREEB;                /* EXIT TO IDAFREEB              */
         L     @15,@CV01044                                        0215
         BALR  @14,@15                                             0215
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I02;                        /* FREE INDEX BUFC.              */
*I03:                                                              0221
*   DO;                             /* IDACALL(IDANEWRD)             */
I03      DS    0H                                                  0222
*     CALL IDANEWRD;                /* EXIT TO IDANEWRD              */
         L     @15,@CV01050                                        0222
         BALR  @14,@15                                             0222
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I03;                        /* GET NEW INDEX RECRORD         */
*   IF RPLERREG^='00'X THEN         /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0228
         BNE   @RT00228                                            0228
*     GOTO SFEXIT;                  /* RETURN.                       */
*   RFY                                                            0230
*     RWORK2 RSTD;                  /* GET WORK REG.                 */
*   RWORK2=ADDR(IMWISWKA);          /* POINT TO INDEX WORK AREA.     */
         L     @10,AMBIWA(,RAMB)                                   0231
         L     RWORK2,ICWCHN(,@10)                                 0231
         LA    RWORK2,IMWISWKA(,RWORK2)                            0231
*   RBUFC=RWORK2->IXSBUFC;          /* POINT TO NEW REC. BUFC.       */
         L     RBUFC,IXSBUFC(,RWORK2)                              0232
*   RFY                                                            0233
*     RWORK2 UNRSTD;                /* FREE WORK REG.                */
*   RPARM1=AMBLDTA->AMBDSB->AMDCIPCA;/* GET CI PER CA.               */
         L     @05,RPLDACB(,RRPL)                                  0234
         L     @05,ACBAMBL(,@05)                                   0234
         L     @05,AMBLDTA(,@05)                                   0234
         L     @05,AMBDSB(,@05)                                    0234
         LH    RPARM1,AMDCIPCA(,@05)                               0234
*   IF RPARM1^>K256 THEN            /* CI/CA LTE 256.                */
         C     RPARM1,@CF01041                                     0235
         BH    @RF00235                                            0235
*     DO;                           /*                               */
*       ICWPTL=ONE;                 /* SET PTR LENGTH.               */
         MVI   ICWPTL(@10),X'01'                                   0237
*       IXHPTLS='01'X;              /* SET PTR LENGTH MASK.          */
         L     @10,BUFCBAD(,RBUFC)                                 0238
         MVI   IXHPTLS(@10),X'01'                                  0238
*     END;                          /*                               */
*   ELSE                            /* CI/CA GT 256.                 */
*     DO;                           /*                               */
         B     @RC00235                                            0240
@RF00235 DS    0H                                                  0241
*       ICWPTL=TWO;                 /* SET PTR LENGTH.               */
         L     @10,AMBIWA(,RAMB)                                   0241
         MVI   ICWPTL(@10),X'02'                                   0241
*       IXHPTLS='03'X;              /* SET PTR LENGTH MASK.          */
         L     @10,BUFCBAD(,RBUFC)                                 0242
         MVI   IXHPTLS(@10),X'03'                                  0242
*     END;                          /*                               */
*   IXHFLPLN=ICWPTL+LENGTH(IBFLPF)+LENGTH(IBFLPL);/* SET F,L,PTR   0244
*                                      TOTAL LENGTH.                 */
@RC00235 L     @10,BUFCBAD(,RBUFC)                                 0244
         L     @05,AMBIWA(,RAMB)                                   0244
         LA    @00,2                                               0244
         SLR   @15,@15                                             0244
         IC    @15,ICWPTL(,@05)                                    0244
         ALR   @00,@15                                             0244
         STC   @00,IXHFLPLN(,@10)                                  0244
*   RFY                                                            0245
*    (RWORK2,                                                      0245
*     RWORK3) RSTD;                 /* GET WORK REGS.                */
*   RWORK3=IXHPTLS;                 /* PICK UP PTR MASK.             */
         SLR   RWORK3,RWORK3                                       0246
         IC    RWORK3,IXHPTLS(,@10)                                0246
*   RWORK2=IMWBUFP+LENGTH(IDAIXH);  /* POINT BEYOND HEADER.          */
         L     @10,ICWCHN(,@05)                                    0247
         LA    RWORK2,24                                           0247
         AL    RWORK2,IMWBUFP(,@10)                                0247
*   DO RPARM1=RPARM1-1 BY-1 TO 1;   /* LOOP SETTING FS PTRS.         */
         LR    @10,RPARM1                                          0248
         BCTR  @10,0                                               0248
         LR    RPARM1,@10                                          0248
         B     @DE00248                                            0248
@DL00248 DS    0H                                                  0249
*     GEN(EX RWORK3,STOREPT);       /* STORE POINTER VALUE.          */
         EX RWORK3,STOREPT
*     RWORK2=RWORK2+ICWPTL;         /* NEXT POINTER LOCATION         */
         L     @10,AMBIWA(,RAMB)                                   0250
         SLR   @05,@05                                             0250
         IC    @05,ICWPTL(,@10)                                    0250
         ALR   RWORK2,@05                                          0250
*   END;                            /*                               */
         BCTR  RPARM1,0                                            0251
@DE00248 LTR   RPARM1,RPARM1                                       0251
         BP    @DL00248                                            0251
*   IXHFSO=RWORK2-IMWBUFP;          /* SET OFFSET TO FS.             */
         L     @10,BUFCBAD(,RBUFC)                                 0252
         L     @05,AMBIWA(,RAMB)                                   0252
         L     @15,ICWCHN(,@05)                                    0252
         LR    @00,RWORK2                                          0252
         SL    @00,IMWBUFP(,@15)                                   0252
         STH   @00,IXHFSO(,@10)                                    0252
*   IXHLEO=IXHLL-IXHFLPLN;          /* POINT TO LAST ENTRY.          */
         LH    @00,IXHLL(,@10)                                     0253
         N     @00,@CF01121                                        0253
         SLR   @15,@15                                             0253
         IC    @15,IXHFLPLN(,@10)                                  0253
         SLR   @00,@15                                             0253
         STH   @00,IXHLEO(,@10)                                    0253
*   IXHSEO=IXHLEO;                  /* POINT TO SECTION.             */
         STH   @00,IXHSEO(,@10)                                    0254
*   IXHLV=ONE;                      /* SET LEVEL NO.                 */
         MVI   IXHLV(@10),X'01'                                    0255
*   IXHBRBA=ICWTBASE;               /* SET BASE DATA RBA.            */
         L     @00,ICWTBASE(,@05)                                  0256
         ST    @00,IXHBRBA(,@10)                                   0256
*   ICWTBASE=ICWCRBA;               /* SAVE RBA OF NEW SEQ. SET REC. */
         L     @10,ICWCRBA(,@05)                                   0257
         ST    @10,ICWTBASE(,@05)                                  0257
*   IF(RPLAREA+AMDRKP)->KEY(1:AMDKEYLN)<(PLHDBUFC->BUFCBAD+AMDRKP)->KEY
*       (1:AMDKEYLN) THEN           /* USER KEY IS LT DATA BUFFER  0258
*                                      KEY.                          */
         L     @10,AMBDSB(,RAMB)                                   0258
         LH    @05,AMDRKP(,@10)                                    0258
         L     @15,RPLAREA(,RRPL)                                  0258
         ALR   @15,@05                                             0258
         L     @14,PLHDBUFC(,RPLH)                                 0258
         AL    @05,BUFCBAD(,@14)                                   0258
         LH    @10,AMDKEYLN(,@10)                                  0258
         LR    @14,@10                                             0258
         BCTR  @14,0                                               0258
         EX    @14,@SC01122                                        0258
         BNL   @RF00258                                            0258
*     DO;                           /* PROCESS USER KEY LT.          */
*/* BUILD KEY IN NEW SEQ SET RECORD - REAR COMPRESS USER KEY AGAINST */
*/*   DATA BUFFER KEY.                                               */
*                                                                  0260
*       RFY                                                        0260
*        (RWORK4,                                                  0260
*         RWORK5) RSTD;             /* GET WORK REGS.                */
*       RWORK2=RPLAREA+AMDRKP;      /* POINT TO USER KEY.            */
         LR    RWORK2,@15                                          0261
*       RWORK4=PLHDBUFC->BUFCBAD+AMDRKP;/* POINT TO DATA BFR KEY.    */
         LR    RWORK4,@05                                          0262
*       RWORK3=AMDKEYLN;            /* COMPARE LENGTH = KEY LENGTH.  */
         LR    RWORK3,@10                                          0263
*       RWORK5=RWORK3;              /* SET COMPARE LENGTH.           */
         LR    RWORK5,RWORK3                                       0264
*       GEN(CLCL RWORK2,RWORK4);    /* COMPARE USER KEY TO DATA BFR
*                                      KEY.                          */
         CLCL RWORK2,RWORK4
*       RWORK4=AMDKEYLN-RWORK3+ONE; /* INSERT KEY LENGTH = NO. EQUAL
*                                      CHARS. + 1.                   */
         L     @10,AMBDSB(,RAMB)                                   0266
         LH    RWORK4,AMDKEYLN(,@10)                               0266
         SLR   RWORK4,RWORK3                                       0266
         AL    RWORK4,@CF00047                                     0266
*       RWORK2=BUFCBAD+IXHLL-IXHFLPLN;/* POINT TO 1ST ENTRY OF NEW 0267
*                                      SEQ. SET RECORD.              */
         L     @05,BUFCBAD(,RBUFC)                                 0267
         LH    RWORK2,IXHLL(,@05)                                  0267
         N     RWORK2,@CF01121                                     0267
         ALR   RWORK2,@05                                          0267
         SLR   @00,@00                                             0267
         IC    @00,IXHFLPLN(,@05)                                  0267
         SLR   RWORK2,@00                                          0267
*       RWORK2->IBFLPL=RWORK4;      /* SET L BYTE OF ENTRY.          */
         STC   RWORK4,IBFLPL(,RWORK2)                              0268
*       RWORK2=RWORK2-RWORK4;       /* POINT TO START OF KEY IN    0269
*                                      ENTRY.                        */
         SLR   RWORK2,RWORK4                                       0269
*       RWORK2->KEY(1:RWORK4)=(RPLAREA+AMDRKP)->KEY(1:RWORK4);/* MOVE
*                                      REAR COMPRESSED KEY TO SEQ  0270
*                                      SET.                          */
         LR    @15,RWORK4                                          0270
         BCTR  @15,0                                               0270
         LH    @10,AMDRKP(,@10)                                    0270
         AL    @10,RPLAREA(,RRPL)                                  0270
         EX    @15,@SM01124                                        0270
*       ICWKEY1(1:RWORK4)=(RPLAREA+AMDRKP)->KEY(1:RWORK4);/* SAVE  0271
*                                      INSERT KEY.                   */
         L     @14,AMBIWA(,RAMB)                                   0271
         EX    @15,@SM01126                                        0271
*       ICWKEY1L=RWORK4;            /* SAVE INSERT KEY LENGTH.       */
         STH   RWORK4,ICWKEY1L(,@14)                               0272
*       RFY                                                        0273
*        (RWORK2,                                                  0273
*         RWORK3,                                                  0273
*         RWORK4,                                                  0273
*         RWORK5) UNRSTD;           /* FREE WORK REGS.               */
*       IXHHP=ICWPRBA;              /* SET HORIZ PTR TO CUR SEQ SET
*                                      RECORD.                       */
         L     @10,ICWPRBA(,@14)                                   0274
         ST    @10,IXHHP(,@05)                                     0274
*       RPARM1=ICWCRBA;             /* RBA OF NEW SEQ SET            */
         L     RPARM1,ICWCRBA(,@14)                                0275
*       DO;                         /* SET OUTPUT RBA                */
*         BUFCORBA=RPARM1;                                         0277
         ST    RPARM1,BUFCORBA(,RBUFC)                             0277
*         BUFCMW=ON;                /* SET MUST WRITE                */
         OI    BUFCMW(RBUFC),B'10000000'                           0278
*       END;                        /* SET BUFC MW & ORBA.           */
*       BUFCDDDD=RPARM1;            /* SET BUFC INPUT RBA.           */
         ST    RPARM1,BUFCDDDD(,RBUFC)                             0280
*       BUFXIRBA=RPARM1;            /* SET BUFC EXCL RBA.            */
         ST    RPARM1,BUFXIRBA(,RBUFC)                             0281
*       BUFCVAL=ON;                 /* SET BUFC VALID.               */
         OI    BUFCVAL(RBUFC),B'00000100'                          0282
*I05:                                                              0283
*       DO;                         /* IDACALL(IDAWRBFR)             */
I05      DS    0H                                                  0284
*         CALL IDAWRBFR;            /* EXIT TO IDAWRBFR              */
         L     @15,@CV01049                                        0284
         BALR  @14,@15                                             0284
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I05;                    /* WRITE NEW SEQ SET RECORD.     */
*       IF RPLERREG^='00'X THEN     /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0290
         BNE   @RT00290                                            0290
*         GOTO SFEXIT;              /* RETURN.                       */
*I06:                                                              0292
*       DO;                         /* IDACALL(IDA019RV)             */
I06      DS    0H                                                  0293
*         CALL IDA019RV;            /* EXIT TO IDA019RV              */
         L     @15,@CV01046                                        0293
         BALR  @14,@15                                             0293
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I06;                    /* LOCATE PREVIOUS SEQ SET RECORD
*                                      RBA.                          */
*       RFY                                                        0299
*         R15 RSTD;                 /* PROTECT REG 15                */
*       IF RPLERREG^='00'X THEN     /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0300
         BNE   @RT00300                                            0300
*         GOTO SFEXIT;              /* RETURN.                       */
*       IF R15=ZERO THEN            /* PREVIOUS SEQ. SET REC FOUND.  */
         LTR   R15,R15                                             0302
         BNZ   @RF00302                                            0302
*         DO;                       /* CHAIN PREV. SEQ. SET REC.     */
*           RFY                                                    0304
*             R15 UNRSTD;           /* RELEASE REG 15                */
*           IXHHP=ICWCRBA;          /* SET HORIZ PTR TO NEW SEQ SET
*                                      RECORD.                       */
         L     @10,BUFCBAD(,RBUFC)                                 0305
         L     @05,AMBIWA(,RAMB)                                   0305
         L     @05,ICWCRBA(,@05)                                   0305
         ST    @05,IXHHP(,@10)                                     0305
*           RPARM1=BUFCDDDD;        /* RBA OF BUFFER.                */
         L     RPARM1,BUFCDDDD(,RBUFC)                             0306
*           DO;                     /* SET OUTPUT RBA                */
*             BUFCORBA=RPARM1;                                     0308
         ST    RPARM1,BUFCORBA(,RBUFC)                             0308
*             BUFCMW=ON;            /* SET MUST WRITE                */
         OI    BUFCMW(RBUFC),B'10000000'                           0309
*           END;                    /* SET BUFC MW & ORBA.           */
*I08:                                                              0311
*           DO;                     /* IDACALL(IDAWRBFR)             */
I08      DS    0H                                                  0312
*             CALL IDAWRBFR;        /* EXIT TO IDAWRBFR              */
         L     @15,@CV01049                                        0312
         BALR  @14,@15                                             0312
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I08;                /* REWRITE PREV SEQ SET REC      */
*           IF RPLERREG^='00'X THEN /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0318
         BNE   @RT00318                                            0318
*             GOTO SFEXIT;          /* RETURN.                       */
*         END;                      /* END CHAIN PREV. SEQ SET REC.  */
*       RFY                                                        0321
*        (RWORK1,                                                  0321
*         RWORK2) RSTD;             /* GET WORK REGS.                */
@RF00302 DS    0H                                                  0322
*       IF ICWPRBA=AMDSSRBA THEN    /* CUR SEQ SET REC = 1ST SEQ SET
*                                      REC.                          */
         L     @10,AMBIWA(,RAMB)                                   0322
         L     @07,AMBDSB(,RAMB)                                   0322
         CLC   ICWPRBA(4,@10),AMDSSRBA(@07)                        0322
         BNE   @RF00322                                            0322
*         DO;                       /* UPDATE CATALOG.               */
*           AMDSSRBA=ICWCRBA;       /* 1ST SEQ SET REC = NEW SEQ SET
*                                      REC.                          */
         L     @10,ICWCRBA(,@10)                                   0324
         ST    @10,AMDSSRBA(,@07)                                  0324
*           PLHEOVR=AMBEOVUC;       /* SET UPDATE CATALOG REQ CODE.  */
         MVI   PLHEOVR(RPLH),B'00000100'                           0325
*I09:                                                              0326
*           DO;                     /* IDACALL(IDAEOVIF)             */
I09      DS    0H                                                  0327
*             CALL IDAEOVIF;        /* EXIT TO IDAEOVIF              */
         L     @15,@CV01051                                        0327
         BALR  @14,@15                                             0327
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I09;                /* CALL EOV INTERFACE.           */
*           AMBLDTA->AMBIWA->DIW1ST=ON;/* INDICATE NEW SEQ SET RCD IS
*                                      AT BEG.                       */
         L     @10,RPLDACB(,RRPL)                                  0333
         L     @10,ACBAMBL(,@10)                                   0333
         L     @10,AMBLDTA(,@10)                                   0333
         L     @10,AMBIWA(,@10)                                    0333
         OI    DIW1ST(@10),B'00000001'                             0333
*         END;                      /* END UPDATE CATALOG.           */
*       AMBLDTA->AMBIWA->DIWSAVE4=ONE;/* INDICATE NEW SEQ SET BEFORE
*                                      CUR                           */
@RF00322 L     @10,RPLDACB(,RRPL)                                  0335
         L     @10,ACBAMBL(,@10)                                   0335
         L     @10,AMBLDTA(,@10)                                   0335
         L     @10,AMBIWA(,@10)                                    0335
         MVC   DIWSAVE4(4,@10),@CF00047                            0335
*     END;                          /* END USER KEY LT.              */
*   ELSE                            /* USER KEY GT DATA BUFFER KEY.  */
*     DO;                           /* PROCESS USER KEY GT.          */
         B     @RC00258                                            0337
@RF00258 DS    0H                                                  0338
*       RWORK2=BUFCBAD+IXHLL-IXHFLPLN;/* POINT TO 1ST ENTRY OF NEW 0338
*                                      SEQ SET RECORD.               */
         L     @10,BUFCBAD(,RBUFC)                                 0338
         LH    RWORK2,IXHLL(,@10)                                  0338
         N     RWORK2,@CF01121                                     0338
         ALR   RWORK2,@10                                          0338
         SLR   @00,@00                                             0338
         IC    @00,IXHFLPLN(,@10)                                  0338
         SLR   RWORK2,@00                                          0338
*       RFY                                                        0339
*        (RWORK3,                                                  0339
*         RWORK4,                                                  0339
*         RWORK5) RSTD;             /*                               */
*       RWORK3=ICWKEY1L;            /* GET SAVED L BYTE.             */
         L     @10,AMBIWA(,RAMB)                                   0340
         LH    RWORK3,ICWKEY1L(,@10)                               0340
*       RWORK2->IBFLPL=RWORK3;      /* MOVE SAVED L BYTE TO NEW ENTRY*/
         STC   RWORK3,IBFLPL(,RWORK2)                              0341
*       RWORK2=RWORK2-RWORK3;       /* POINT TO START OF KEY IN    0342
*                                      ENTRY.                        */
         SLR   RWORK2,RWORK3                                       0342
*       RWORK4=ADDR(ICWKEY1);       /* SET FROM ADDRESS              */
         LA    RWORK4,ICWKEY1(,@10)                                0343
*       RWORK5=RWORK3;              /* SET LENGTH FOR MVCL           */
         LR    RWORK5,RWORK3                                       0344
*       GEN(MVCL RWORK2,RWORK4);    /* MOVE SAVED KEY TO NEW ENTRY.  */
         MVCL RWORK2,RWORK4
*       RFY                                                        0346
*        (RWORK1,                                                  0346
*         RWORK2,                                                  0346
*         RWORK3,                                                  0346
*         RWORK4,                                                  0346
*         RWORK5) UNRSTD;           /* FREE REGS                     */
*       IXHHP=ICWTPTR;              /* SET HORIZ PTR SAME AS CUR SEQ
*                                      SET.                          */
         L     @10,BUFCBAD(,RBUFC)                                 0347
         L     @05,AMBIWA(,RAMB)                                   0347
         L     @00,ICWTPTR(,@05)                                   0347
         ST    @00,IXHHP(,@10)                                     0347
*       RPARM1=ICWCRBA;             /* RBA OF NEW SEQ SET.           */
         L     RPARM1,ICWCRBA(,@05)                                0348
*       DO;                         /* SET OUTPUT RBA                */
*         BUFCORBA=RPARM1;                                         0350
         ST    RPARM1,BUFCORBA(,RBUFC)                             0350
*         BUFCMW=ON;                /* SET MUST WRITE                */
         OI    BUFCMW(RBUFC),B'10000000'                           0351
*       END;                        /* SET BUFC MW & ORBA.           */
*       BUFCDDDD=RPARM1;            /* SET BUFC INPUT RBA.           */
         ST    RPARM1,BUFCDDDD(,RBUFC)                             0353
*       BUFXIRBA=RPARM1;            /* SET BUFC EXCL. RBA.           */
         ST    RPARM1,BUFXIRBA(,RBUFC)                             0354
*       BUFCVAL=ON;                 /* SET BUFC VALID.               */
         OI    BUFCVAL(RBUFC),B'00000100'                          0355
*I11:                                                              0356
*       DO;                         /* IDACALL(IDAWRBFR)             */
I11      DS    0H                                                  0357
*         CALL IDAWRBFR;            /* EXIT TO IDAWRBFR              */
         L     @15,@CV01049                                        0357
         BALR  @14,@15                                             0357
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I11;                    /* WRITE NEW SEQ SET.            */
*       IF RPLERREG^='00'X THEN     /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0363
         BNE   @RT00363                                            0363
*         GOTO SFEXIT;              /* RETURN.                       */
*       PLHSSR=ON;                  /* SET PLH SEQ. SET REQ.         */
         OI    PLHSSR(RPLH),B'00010000'                            0365
*       RPARM1=ICWPRBA;             /* RBA OF CUR SEQ SET.           */
         L     @10,AMBIWA(,RAMB)                                   0366
         L     RPARM1,ICWPRBA(,@10)                                0366
*I12:                                                              0367
*       DO;                         /* IDACALL(IDAGRB)               */
I12      DS    0H                                                  0368
*         CALL IDAGRB;              /* EXIT TO IDAGRB                */
         L     @15,@CV01043                                        0368
         BALR  @14,@15                                             0368
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I12;                    /* GET CUR SEQ SET REC.          */
*       IF RPLERREG^='00'X THEN     /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0374
         BNE   @RT00374                                            0374
*         GOTO SFEXIT;              /* RETURN.                       */
*       IXHHP=ICWCRBA;              /* SET HORIZ PTR TO NEW SEQ SET
*                                      RECORD.                       */
         L     @10,BUFCBAD(,RBUFC)                                 0376
         L     @05,AMBIWA(,RAMB)                                   0376
         L     @05,ICWCRBA(,@05)                                   0376
         ST    @05,IXHHP(,@10)                                     0376
*/* REBUILD KEY IN CURRENT SEQ. SET RECORD. REAR COMPRESS DATA       */
*/*   BUFFER KEY AGAINST USER KEY. CURRENT SEQ. SET RECORD HAS ONLY  */
*/*   1 DATA RECORD ENTRY & IS A SPANNED RECORD.                     */
*                                                                  0377
*       RFY                                                        0377
*        (RWORK2,                                                  0377
*         RWORK3,                                                  0377
*         RWORK5) RSTD;             /* GET WORK REGS.                */
*       RWORK2=BUFCBAD+IXHLEO;      /* POINT TO LAST ENTRY IN CUR  0378
*                                      SEQ. SET RECORD.              */
         LH    RWORK2,IXHLEO(,@10)                                 0378
         ALR   RWORK2,@10                                          0378
*       RWORK3=RWORK2->IBFLPL;      /* GET L BYTE OF ENTRY.          */
         SLR   RWORK3,RWORK3                                       0379
         IC    RWORK3,IBFLPL(,RWORK2)                              0379
*       RWORK2=RWORK2-RWORK3;       /* POINT TO START OF KEY.        */
         SLR   RWORK2,RWORK3                                       0380
*       RWORK5=ZERO;                /* PAD CHAR.                     */
         SLR   RWORK5,RWORK5                                       0381
*       GEN(MVCL RWORK2,RWORK4);    /* ZERO OUT KEY IN ENTRY.        */
         MVCL RWORK2,RWORK4
*       RFY                                                        0383
*         RWORK4 RSTD;              /* GET WORK REG.                 */
*       RWORK2=RPLAREA+AMDRKP;      /* POINT TO USER KEY.            */
         L     @10,AMBDSB(,RAMB)                                   0384
         LH    @05,AMDRKP(,@10)                                    0384
         L     RWORK2,RPLAREA(,RRPL)                               0384
         ALR   RWORK2,@05                                          0384
*       RWORK4=PLHDBUFC->BUFCBAD+AMDRKP;/* POINT TO DATA BFR KEY.    */
         L     @15,PLHDBUFC(,RPLH)                                 0385
         AL    @05,BUFCBAD(,@15)                                   0385
         LR    RWORK4,@05                                          0385
*       RWORK3=AMDKEYLN;            /* COMPARE LENGTH = KEY LENGTH.  */
         LH    RWORK3,AMDKEYLN(,@10)                               0386
*       RWORK5=RWORK3;              /* SET COMPARE LENGTH.           */
         LR    RWORK5,RWORK3                                       0387
*       GEN(CLCL RWORK2,RWORK4);    /* COMPARE USER KEY TO DATA BFR
*                                      KEY.                          */
         CLCL RWORK2,RWORK4
*       RWORK4=AMDKEYLN-RWORK3+ONE; /* INSERT KEY LENGTH = NO. EQUAL
*                                      CHARS. + 1.                   */
         L     @10,AMBDSB(,RAMB)                                   0389
         LH    RWORK4,AMDKEYLN(,@10)                               0389
         SLR   RWORK4,RWORK3                                       0389
         AL    RWORK4,@CF00047                                     0389
*       RWORK2=BUFCBAD+IXHLEO;      /* POINT TO LAST ENTRY IN CUR. 0390
*                                      SEQ. SET REC.                 */
         L     @05,BUFCBAD(,RBUFC)                                 0390
         LH    RWORK2,IXHLEO(,@05)                                 0390
         ALR   RWORK2,@05                                          0390
*       RWORK2->IBFLPL=RWORK4;      /* SET L BYTE OF NEW KEY.        */
         STC   RWORK4,IBFLPL(,RWORK2)                              0391
*       RWORK2=RWORK2-RWORK4;       /* POINT TO START OF KEY IN ENTRY*/
         SLR   RWORK2,RWORK4                                       0392
*       RWORK3=PLHDBUFC->BUFCBAD+AMDRKP;/* POINT TO START OF KEY IN
*                                      DATA BUFFER.                  */
         L     @05,PLHDBUFC(,RPLH)                                 0393
         LH    RWORK3,AMDRKP(,@10)                                 0393
         AL    RWORK3,BUFCBAD(,@05)                                0393
*       RWORK2->KEY(1:RWORK4)=RWORK3->KEY(1:RWORK4);/* MOVE REAR   0394
*                                      COMPRESSED KEY TO SEQ. SET.   */
         LR    @10,RWORK4                                          0394
         BCTR  @10,0                                               0394
         EX    @10,@SM01129                                        0394
*       ICWKEY1(1:RWORK4)=RWORK3->KEY(1:RWORK4);/* SAVE INSERT KEY.  */
         L     @05,AMBIWA(,RAMB)                                   0395
         EX    @10,@SM01131                                        0395
*       ICWKEY1L=RWORK4;            /* SAVE INSERT KEY LENGTH.       */
         STH   RWORK4,ICWKEY1L(,@05)                               0396
*       RFY                                                        0397
*        (RWORK2,                                                  0397
*         RWORK3,                                                  0397
*         RWORK4,                                                  0397
*         RWORK5) UNRSTD;           /* FREE WORK REGS.               */
*       RPARM1=BUFCDDDD;            /* RBA OF BUFFER.                */
         L     RPARM1,BUFCDDDD(,RBUFC)                             0398
*       DO;                         /* SET OUTPUT RBA                */
*         BUFCORBA=RPARM1;                                         0400
         ST    RPARM1,BUFCORBA(,RBUFC)                             0400
*         BUFCMW=ON;                /* SET MUST WRITE                */
         OI    BUFCMW(RBUFC),B'10000000'                           0401
*       END;                        /* SET BUFC OUTPUT RBA & MW.     */
*I14:                                                              0403
*       DO;                         /* IDACALL(IDAWRBFR)             */
I14      DS    0H                                                  0404
*         CALL IDAWRBFR;            /* EXIT TO IDAWRBFR              */
         L     @15,@CV01049                                        0404
         BALR  @14,@15                                             0404
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I14;                    /* REWRITE CUR SEQ SET.          */
*       IF RPLERREG^='00'X THEN     /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0410
         BNE   @RT00410                                            0410
*         GOTO SFEXIT;              /* RETURN.                       */
*       AMBLDTA->AMBIWA->DIWSAVE4=ZERO;/* INDICATE NEW SEQ SET AFTER
*                                      CUR.                          */
         L     @10,RPLDACB(,RRPL)                                  0412
         L     @10,ACBAMBL(,@10)                                   0412
         L     @10,AMBLDTA(,@10)                                   0412
         L     @10,AMBIWA(,@10)                                    0412
         SLR   @05,@05                                             0412
         ST    @05,DIWSAVE4(,@10)                                  0412
*     END;                          /* END USER KEY GT.              */
*/* UPGRADE INDEX -                                                  */
*/*       ICWPRBA=CUR SEQ SET RBA                                    */
*/*       ICWCRBA=NEW SEQ SET RBA                                    */
*                                                                  0414
*I15:                                                              0414
*   DO;                             /* IDACALL(IDAHLINS)             */
@RC00258 DS    0H                                                  0414
I15      DS    0H                                                  0415
*     CALL IDAHLINS;                /* EXIT TO IDAHLINS              */
         L     @15,@CV01047                                        0415
         BALR  @14,@15                                             0415
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I15;                        /* CALL INDEX UPGRADE.           */
*   IF RPLERREG^='00'X THEN         /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0421
         BNE   @RT00421                                            0421
*     GOTO SFEXIT;                  /* RETURN.                       */
*   IF AMBLDTA->AMBIWA->DIWFSPF=ON&AMBLDTA->AMBIWA->DIW1ST=ON THEN/*
*                                      2ND LEVEL DIDN'T SPLIT & AT 0423
*                                      BEG OF SEQ SET.               */
         L     @10,RPLDACB(,RRPL)                                  0423
         L     @10,ACBAMBL(,@10)                                   0423
         L     @10,AMBLDTA(,@10)                                   0423
         L     @10,AMBIWA(,@10)                                    0423
         TM    DIWFSPF(@10),B'10000000'                            0423
         BNO   @RF00423                                            0423
         TM    DIW1ST(@10),B'00000001'                             0423
         BNO   @RF00423                                            0423
*     DO;                           /* CHANGE 2ND LEVEL PTR.         */
*       RPARM1=AMBLDTA->AMBIWA->DIWSAVE1;/* RBA OF 2ND LEVEL IX RCD. */
         L     RPARM1,DIWSAVE1(,@10)                               0425
*I16:                                                              0426
*       DO;                         /* IDACALL(IDAGRB)               */
I16      DS    0H                                                  0427
*         CALL IDAGRB;              /* EXIT TO IDAGRB                */
         L     @15,@CV01043                                        0427
         BALR  @14,@15                                             0427
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I16;                    /* READ 2ND LEVEL IX RCD.        */
*       IF RPLERREG^='00'X THEN     /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0433
         BNE   @RT00433                                            0433
*         GOTO SFEXIT;              /* RETURN.                       */
*       RFY                                                        0435
*        (RWORK2,                                                  0435
*         RWORK3) RSTD;             /* GET WORK REGS.                */
*       RWORK2=BUFCBAD+IXHLL-IXHFLPLN;/* POINT TO 1ST ENTRY.         */
         L     @10,BUFCBAD(,RBUFC)                                 0436
         LH    RWORK2,IXHLL(,@10)                                  0436
         N     RWORK2,@CF01121                                     0436
         ALR   RWORK2,@10                                          0436
         SLR   @05,@05                                             0436
         IC    @05,IXHFLPLN(,@10)                                  0436
         SLR   RWORK2,@05                                          0436
*       RWORK3=ICWTBASE/AMDCINV;    /* CALC RBA MULTI OF NEW SEQ SET.*/
         L     @05,AMBIWA(,RAMB)                                   0437
         L     @15,AMBDSB(,RAMB)                                   0437
         L     @09,ICWTBASE(,@05)                                  0437
         SLR   @08,@08                                             0437
         D     @08,AMDCINV(,@15)                                   0437
         LR    RWORK3,@09                                          0437
*       RPARM1=IXHPTLS;             /* GET RBA PTR MASK.             */
         SLR   RPARM1,RPARM1                                       0438
         IC    RPARM1,IXHPTLS(,@10)                                0438
*       GEN(EX RPARM1,STCMPTR);     /* STORE PTR IN 2ND LEVEL IX RCD.*/
         EX RPARM1,STCMPTR
*       RPARM1=BUFCDDDD;            /* RBA OF BUFFER.                */
         L     RPARM1,BUFCDDDD(,RBUFC)                             0440
*       DO;                         /* SET OUTPUT RBA                */
*         BUFCORBA=RPARM1;                                         0442
         ST    RPARM1,BUFCORBA(,RBUFC)                             0442
*         BUFCMW=ON;                /* SET MUST WRITE                */
         OI    BUFCMW(RBUFC),B'10000000'                           0443
*       END;                        /* SET BUFC MW & ORBA.           */
*I18:                                                              0445
*       DO;                         /* IDACALL(IDAWRBFR)             */
I18      DS    0H                                                  0446
*         CALL IDAWRBFR;            /* EXIT TO IDAWRBFR              */
         L     @15,@CV01049                                        0446
         BALR  @14,@15                                             0446
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I18;                    /* REWRITE 2ND LVL IX RCD.       */
*       IF RPLERREG^='00'X THEN     /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0452
         BNE   @RT00452                                            0452
*         GOTO SFEXIT;              /* RETURN.                       */
*       RFY                                                        0454
*        (RWORK2,                                                  0454
*         RWORK3) UNRSTD;           /* FREE WORK REGS.               */
*     END;                          /* END CHANGE 2ND LEVEL PTR.     */
*   RAMB=AMBLDTA;                   /* POINT TO DATA AMB.            */
@RF00423 L     @10,RPLDACB(,RRPL)                                  0456
         L     @10,ACBAMBL(,@10)                                   0456
         L     RAMB,AMBLDTA(,@10)                                  0456
*   RBUFC=ZERO;                     /* SET PARM FOR ALL.             */
         SLR   RBUFC,RBUFC                                         0457
*I19:                                                              0458
*   DO;                             /* IDACALL(IDASBF)               */
I19      DS    0H                                                  0459
*     CALL IDASBF;                  /* EXIT TO IDASBF                */
         L     @15,@CV01052                                        0459
         BALR  @14,@15                                             0459
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I19;                        /* SUBTRACT BUFFERS.             */
*   IF RPLERREG^='00'X THEN         /* IF I/O ERROR.                 */
         CLI   RPLERREG(RRPL),0                                    0465
         BNE   @RT00465                                            0465
*     GOTO SFEXIT;                  /* TERMINATE.                    */
*   PLHASKBF=ON;                    /* SET BFR REQUEST.              */
         OI    PLHASKBF(RPLH),B'00100000'                          0467
*   RPARM1=ZERO;                    /* SET PARM FOR MAX.             */
         SLR   RPARM1,RPARM1                                       0468
*I20:                                                              0469
*   DO;                             /* IDACALL(IDAABF)               */
I20      DS    0H                                                  0470
*     CALL IDAABF;                  /* EXIT TO IDAABF                */
         L     @15,@CV01048                                        0470
         BALR  @14,@15                                             0470
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I20;                        /* ADD BUFFERS.                  */
*I21:                                                              0476
*   DO;                             /* IDACALL(IDAGNNFL)             */
I21      DS    0H                                                  0477
*     CALL IDAGNNFL;                /* EXIT TO IDAGNNFL              */
         L     @15,@CV01042                                        0477
         BALR  @14,@15                                             0477
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I21;                        /* GET NEXT NO FILL.             */
*   IF RPLERREG^='00'X THEN         /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0483
         BNE   @RT00483                                            0483
*     GOTO SFEXIT;                  /* RETURN.                       */
*   RPARM1=DIWSAVE2;                /* RBA OF 1ST CI IN NEW CA.      */
         L     @10,AMBIWA(,RAMB)                                   0485
         L     RPARM1,DIWSAVE2(,@10)                               0485
*   DO;                             /* SET OUTPUT RBA                */
*     BUFCORBA=RPARM1;                                             0487
         ST    RPARM1,BUFCORBA(,RBUFC)                             0487
*     BUFCMW=ON;                    /* SET MUST WRITE                */
         OI    BUFCMW(RBUFC),B'10000000'                           0488
*   END;                            /* SET BUFC MW & ORBA.           */
*   BUFCDDDD=BUFCORBA;              /* SET BUFC INPUT RBA.           */
         L     @10,BUFCORBA(,RBUFC)                                0490
         ST    @10,BUFCDDDD(,RBUFC)                                0490
*   BUFXIRBA=BUFCORBA;              /* SET EXCL INPUT RBA.           */
         ST    @10,BUFXIRBA(,RBUFC)                                0491
*   BUFCVAL=ON;                     /* SET BUFC VALID.               */
*   BUFCEXC=ON;                     /* SET BUFC EXCL.                */
         OI    BUFCVAL(RBUFC),B'00000110'                          0493
*   CALL BFRFS;                     /* SET FS IN BUFFER.             */
         BAL   @14,BFRFS                                           0494
*   PLHRECP=BUFCBAD;                /* SET PLH RECORD PTR.           */
         L     @10,BUFCBAD(,RBUFC)                                 0495
         ST    @10,PLHRECP(,RPLH)                                  0495
*   PLHFSP=BUFCBAD;                 /* POINT TO FS - BFR ALL FREE.   */
         ST    @10,PLHFSP(,RPLH)                                   0496
*   PLHRDFP=BUFCBAD+AMDCINV-LENGTH(IDACIDF);/* SET RDF PTR - NO RDF'S*/
         L     @05,AMBDSB(,RAMB)                                   0497
         AL    @10,AMDCINV(,@05)                                   0497
         SL    @10,@CF00036                                        0497
         ST    @10,PLHRDFP(,RPLH)                                  0497
*   IF PLHADDTE=ON THEN             /* ADD TO END.                   */
         TM    PLHADDTE(RPLH),B'00010000'                          0498
         BNO   @RF00498                                            0498
*     ARDHKRBA=DIWSAVE2;            /* UPDATE HI-KEY RBA.            */
         L     @10,PLHARDB(,RPLH)                                  0499
         L     @05,AMBIWA(,RAMB)                                   0499
         L     @05,DIWSAVE2(,@05)                                  0499
         ST    @05,ARDHKRBA(,@10)                                  0499
*   IF RPLRLEN<=AMDCINV-LENGTH(IDACIDF)-LENGTH(IDARDF) THEN/* NOT  0500
*                                      SPANNED RECORD.               */
@RF00498 L     @10,AMBDSB(,RAMB)                                   0500
         L     @10,AMDCINV(,@10)                                   0500
         SL    @10,@CF00170                                        0500
         C     @10,RPLRLEN(,RRPL)                                  0500
         BL    @RF00500                                            0500
*I23:                                                              0501
*     DO;                           /* IDACALL(IDA019RM)             */
I23      DS    0H                                                  0502
*       CALL IDA019RM;              /* EXIT TO IDA019RM              */
         L     @15,@CV01045                                        0502
         BALR  @14,@15                                             0502
*       GEN(BALR @11,0);            /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*       GEN(USING *,@11);           /* ESTABLISH ADDRESSING          */
         USING *,@11
*       GEN(L     @11,=A(@PSTART)); /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*       GEN(USING @PSTART,@11);     /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*     END I23;                      /* CALL DATA INSERT.             */
*   RAMB=AMBLIX;                    /* POINT TO INDEX AMB.           */
@RF00500 L     @10,RPLDACB(,RRPL)                                  0508
         L     @10,ACBAMBL(,@10)                                   0508
         L     RAMB,AMBLIX(,@10)                                   0508
*   PLHSSR=ON;                      /* SET PLH SEQ. SET REQ.         */
         OI    PLHSSR(RPLH),B'00010000'                            0509
*   RPARM1=ICWTBASE;                /* SET RBA OF NEW SEQ. SET REC.  */
         L     @10,AMBIWA(,RAMB)                                   0510
         L     RPARM1,ICWTBASE(,@10)                               0510
*   PLHSSRBA=RPARM1;                /* INIT. PLH SEQ. SET RBA.       */
         ST    RPARM1,PLHSSRBA(,RPLH)                              0511
*I24:                                                              0512
*   DO;                             /* IDACALL(IDAGRB)               */
I24      DS    0H                                                  0513
*     CALL IDAGRB;                  /* EXIT TO IDAGRB                */
         L     @15,@CV01043                                        0513
         BALR  @14,@15                                             0513
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I24;                        /* READ NEW SEQ. SET REC.        */
*   IF RPLERREG^='00'X THEN         /* ERROR.                        */
         CLI   RPLERREG(RRPL),0                                    0519
         BNE   @RT00519                                            0519
*     GOTO SFEXIT;                  /* RETURN.                       */
*   RFY                                                            0521
*     IDAIXSPL BASED(PLHISPLP);     /* BASE IXSPL ON PLH IXSPL.      */
*   RFY                                                            0522
*    (RWORK2,                                                      0522
*     RWORK3) RSTD;                 /* GET WORK REGS.                */
*   RWORK2=PLHIBUFC->BUFCBAD;       /* POINT TO INDEX BUFFER.        */
         L     @10,PLHIBUFC(,RPLH)                                 0523
         L     RWORK2,BUFCBAD(,@10)                                0523
*   RWORK3=RWORK2+RWORK2->IXHLL-RWORK2->IXHFLPLN;/* POINT TO 1ST   0524
*                                      INDEX ENTRY.                  */
         LR    RWORK3,RWORK2                                       0524
         LH    @10,IXHLL(,RWORK2)                                  0524
         N     @10,@CF01121                                        0524
         ALR   RWORK3,@10                                          0524
         SLR   @10,@10                                             0524
         IC    @10,IXHFLPLN(,RWORK2)                               0524
         SLR   RWORK3,@10                                          0524
*   IXSHEP=RWORK3;                  /* SET CURRENT POINTER.          */
         L     @10,PLHISPLP(,RPLH)                                 0525
         ST    RWORK3,IXSHEP(,@10)                                 0525
*   IXSSEP=RWORK3;                  /* SET SECTION POINTER.          */
         ST    RWORK3,IXSSEP(,@10)                                 0526
*   IXSLEP=RWORK3;                  /* SET LOW POINTER.              */
         ST    RWORK3,IXSLEP(,@10)                                 0527
*   RFY                                                            0528
*    (RWORK2,                                                      0528
*     RWORK3) UNRSTD;               /* FREE WORK REGS.               */
*   RFY                                                            0529
*     IDAIXSPL BASED(IMWIXSP);      /* RESET IXSPL BASE.             */
*   RPARM1=ONE;                     /* INDICATE TO RE, SPLIT OR    0530
*                                      INSERT NOT REQUIRED.          */
         LA    RPARM1,1                                            0530
*SFEXIT:                                                           0531
*   RAMB=AMBLDTA;                   /* AMB TO DATA BLOCKS            */
SFEXIT   L     @10,RPLDACB(,RRPL)                                  0531
         L     @10,ACBAMBL(,@10)                                   0531
         L     RAMB,AMBLDTA(,@10)                                  0531
*   DIW1ST=OFF;                     /* CLEAR BEG OF SEQ SET FLAG.    */
         L     @10,AMBIWA(,RAMB)                                   0532
         NI    DIW1ST(@10),B'11111110'                             0532
*   DIWFSPF=OFF;                    /* CLEAR NO SPLIT FLAG.          */
         NI    DIWFSPF(@10),B'01111111'                            0533
*   GEN(IDARST14);                  /* RESTORE REG 14.               */
         IDARST14
*   RETURN;                         /* RETURN.                       */
@EL00001 DS    0H                                                  0535
@EF00001 DS    0H                                                  0535
@ER00001 BR    @14                                                 0535
*   GEN;                                                           0536
STCMPTR  STCM  RWORK3,@00,IBFLP3(RWORK2)  STORE 1,2, OR 3 BYTE RBA PTR
ICMINS   ICM   RPARM1,@00,IBFLP3(RWORK2)  GET 1,2, OR 3 BYTE RBA PTR
*                                                                  0537
*   /*****************************************************************/
*   /*                                                               */
*   /* BUFFER FREE SPACE --- INPUT - RBUFC. SETS BUFFER TO FREE      */
*   /* SPACE.                                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0537
*BFRFS:                                                            0537
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                               */
         B     @PB00002                                            0537
BFRFS    DS    0H                                                  0538
*   RFY                                                            0538
*     R14 RSTD;                     /* SAVE RETURN REG.              */
*   RFY                                                            0539
*    (RWORK2,                                                      0539
*     RWORK3,                                                      0539
*     RWORK5) RSTD;                 /* GET WORK REGS.                */
*   RWORK2=BUFCBAD;                 /* TO ADDRESS.                   */
         L     RWORK2,BUFCBAD(,RBUFC)                              0540
*   RWORK3=AMDCINV;                 /* TO LENGTH.                    */
         L     @15,AMBDSB(,RAMB)                                   0541
         L     RWORK3,AMDCINV(,@15)                                0541
*   RWORK5=ZERO;                    /* PAD CHAR.                     */
         SLR   RWORK5,RWORK5                                       0542
*   GEN(MVCL RWORK2,RWORK4);        /* ZERO BUFFER.                  */
         MVCL RWORK2,RWORK4
*   RWORK3=AMDCINV-LENGTH(IDACIDF); /* GET FS COUNT.                 */
         L     @15,AMBDSB(,RAMB)                                   0544
         L     RWORK3,AMDCINV(,@15)                                0544
         SL    RWORK3,@CF00036                                     0544
*   RWORK5=BUFCBAD+RWORK3;          /* POINT TO CIDF.                */
         LR    RWORK5,RWORK3                                       0545
         AL    RWORK5,BUFCBAD(,RBUFC)                              0545
*   RWORK5->CIDFLL=RWORK3;          /* SET CIDF FS LENGTH.           */
         STH   RWORK3,CIDFLL(,RWORK5)                              0546
*   RFY                                                            0547
*    (RWORK2,                                                      0547
*     RWORK3,                                                      0547
*     RWORK5) UNRSTD;               /* FREE WORK REGS.               */
*   RETURN;                         /* RETURN TO CALLER.             */
@EL00002 DS    0H                                                  0548
@EF00002 DS    0H                                                  0548
@ER00002 BR    @14                                                 0548
*   RFY                                                            0549
*     R14 UNRSTD;                   /* FREE RETURN REG.              */
*   END BFRFS;                      /* END PROC. BFRFS.              */
@PB00002 DS    0H                                                  0551
*   GEN;                                                           0551
STOREPT  STCM  RPARM1,@00,@00(RWORK2)       STORE FS PTR.
*   GEN(IDAPATCH);                  /* DEFINE PATCH AREA             */
         IDAPATCH
*   END IDA019SF                    /* END OF CA SR SPLIT.           */
*                                                                  0553
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDADIWA )                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IDAIRD  )                                       */
*/*%INCLUDE SYSLIB  (IDAIXSPL)                                       */
*/*%INCLUDE SYSLIB  (IDAICWA )                                       */
*/*%INCLUDE SYSLIB  (IDAIMWA )                                       */
*/*%INCLUDE SYSLIB  (IDACIDF )                                       */
*/*%INCLUDE SYSLIB  (IDARDF  )                                       */
*                                                                  0553
*       ;                                                          0553
         B     @EL00001                                            0553
@DATA    DS    0H
@SC01122 CLC   KEY(0,@15),KEY(@05)
@SM01124 MVC   KEY(0,RWORK2),KEY(@10)
@SM01126 MVC   ICWKEY1(0,@14),KEY(@10)
@SM01129 MVC   KEY(0,RWORK2),KEY(RWORK3)
@SM01131 MVC   ICWKEY1(0,@05),KEY(RWORK3)
@DATD    DSECT
         DS    0F
IDA019SF CSECT
         DS    0F
@CF00047 DC    F'1'
@CH00047 EQU   @CF00047+2
@CF00036 DC    F'4'
@CF00170 DC    F'7'
@CF01041 DC    F'256'
@CF01072 DC    XL4'FF000000'
@CF01121 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
IDA019SF CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV01042 DC    V(IDAGNNFL)
@CV01043 DC    V(IDAGRB)
@CV01044 DC    V(IDAFREEB)
@CV01045 DC    V(IDA019RM)
@CV01046 DC    V(IDA019RV)
@CV01047 DC    V(IDAHLINS)
@CV01048 DC    V(IDAABF)
@CV01049 DC    V(IDAWRBFR)
@CV01050 DC    V(IDANEWRD)
@CV01051 DC    V(IDAEOVIF)
@CV01052 DC    V(IDASBF)
         DS    0D
HWORD4   DC    H'4'
@DATD    DSECT
*                                                          /*@X04SVLC*/
RDFCTNUA EQU   X'40'                    COMPLEX RDF INDICATOR
RDFCTNUX EQU   X'FF'-RDFCTNUA           RESET COMPLEX MASK
RDFREPLA EQU   X'08'                    COUNT RDF INDICATOR
RDFREPLX EQU   X'FF'-RDFREPLA           RESET COUNT MASK
RDFEMPTI EQU   X'04'                    EMPTY RECORD       /*@X04SVLC*/
RDFLEN   EQU   3                        LENGTH OF RDF
RDFLLOFF EQU   1                        OFFSET WITHIN RDF TO LL
RDFSGLR  EQU   X'00'                   MASK FOR SINGLE RECORD RDF
RDFGRP   EQU   RDFCTNUA                 MASK FOR LL RDF OF A GROUP RDF
RDFCNT   EQU   RDFREPLA                 MASK FOR COUNT RDF
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019SF CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RWORK0   EQU   @00
RRPL     EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
RPARM1   EQU   @12
R14      EQU   @14
R15      EQU   @15
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IDAAMB   EQU   0
AMBBUFC  EQU   IDAAMB+8
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDADIWA  EQU   0
DIWFLG1  EQU   IDADIWA+4
DIW1ST   EQU   DIWFLG1
DIWFLG2  EQU   IDADIWA+5
DIWFSPF  EQU   DIWFLG2
DIWSAVE  EQU   IDADIWA+28
DIWSAVE1 EQU   DIWSAVE
DIWSAVE2 EQU   DIWSAVE+4
DIWSAVE4 EQU   DIWSAVE+12
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHASKBF EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHADDTE EQU   PLHFLG2
PLHEFLGS EQU   IDAPLH+4
PLHFLG3  EQU   IDAPLH+6
PLHAFLGS EQU   IDAPLH+7
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHEOVR  EQU   IDAPLH+42
PLHARDB  EQU   IDAPLH+44
PLHDBUFC EQU   IDAPLH+52
PLHRECP  EQU   IDAPLH+60
PLHFSP   EQU   IDAPLH+64
PLHRDFP  EQU   IDAPLH+68
PLHDIOB  EQU   IDAPLH+76
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHIBUFC EQU   IDAPLH+188
PLHISPLP EQU   IDAPLH+196
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHKEYPT EQU   IDAPLH+248
PLHEND   EQU   IDAPLH+280
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDRANGE EQU   AMDATTR
AMDNEST  EQU   IDAAMDSB+4
AMDRKP   EQU   IDAAMDSB+6
AMDKEYLN EQU   IDAAMDSB+8
AMDCIPCA EQU   IDAAMDSB+12
AMDCINV  EQU   IDAAMDSB+20
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCVAL  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCDDDD EQU   IDABUFC+8
BUFCORBA EQU   IDABUFC+12
BUFCBAD  EQU   IDABUFC+20
BUFCINV  EQU   IDABUFC+28
BUFXIRBA EQU   IDABUFC+40
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDHKRBA EQU   IDAARDB+8
ARDPRF   EQU   IDAARDB+28
ARDKEYS  EQU   IDAARDB+29
IDAIXH   EQU   0
IXHLL    EQU   IDAIXH
IXHFLPLN EQU   IDAIXH+2
IXHPTLS  EQU   IDAIXH+3
IXHBRBA  EQU   IDAIXH+4
IXHHP    EQU   IDAIXH+8
IXHLV    EQU   IDAIXH+16
IXHFSO   EQU   IDAIXH+18
IXHLEO   EQU   IDAIXH+20
IXHSEO   EQU   IDAIXH+22
IDAIBFLP EQU   0
IBFLPF   EQU   IDAIBFLP
IBFLPL   EQU   IDAIBFLP+1
IBFLP3   EQU   IDAIBFLP+2
IBFLP2   EQU   IBFLP3
IDASELL  EQU   0
IDAIXK   EQU   0
IDAIXSPL EQU   0
IXSBUFC  EQU   IDAIXSPL+4
IXSBFLG  EQU   IDAIXSPL+17
IXSHEP   EQU   IDAIXSPL+20
IXSSEP   EQU   IDAIXSPL+24
IXSLEP   EQU   IDAIXSPL+28
IDAICWA  EQU   0
ICWFLG1  EQU   IDAICWA+1
ICWKRDS  EQU   ICWFLG1
ICWCHN   EQU   IDAICWA+4
ICWCRBA  EQU   IDAICWA+12
ICWPRBA  EQU   IDAICWA+16
ICWADD   EQU   IDAICWA+24
ICWTBASE EQU   IDAICWA+28
ICWTPTR  EQU   IDAICWA+32
ICWLN    EQU   IDAICWA+40
ICWKEY1L EQU   IDAICWA+42
ICWPTL   EQU   IDAICWA+55
ICWKEY1  EQU   IDAICWA+60
IDAIMWA  EQU   0
IMWFLAGS EQU   IDAIMWA+1
IMWIXSP  EQU   IDAIMWA+4
IMWISWKA EQU   IDAIMWA+8
IMWBUFP  EQU   IDAIMWA+60
IDACIDF  EQU   0
CIDFLL   EQU   IDACIDF+2
IDARDF   EQU   0
RDFRBYTE EQU   IDARDF
RDFSEG   EQU   RDFRBYTE
IDADATA  EQU   0
IDAKEY   EQU   0
KEY      EQU   IDAKEY
ICWKEY2  EQU   0
ICWKEY3  EQU   0
PLHKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00051 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
AMDATA   EQU   IDADATA
RDFLL    EQU   IDARDF+1
RDFEMPTY EQU   RDFRBYTE
RDFREPL  EQU   RDFRBYTE
RDF1ST   EQU   RDFSEG
RDFNOT1  EQU   RDFSEG
RDFCTNU  EQU   RDFRBYTE
RDFTYPE  EQU   RDFRBYTE
@NM00061 EQU   CIDFLL
CIDFBUSY EQU   CIDFLL
CIDFOSET EQU   IDACIDF
IMWKEY1  EQU   IDAIMWA+76
@NM00060 EQU   IDAIMWA+72
IMWNSOFF EQU   IDAIMWA+70
IMWCIMVN EQU   IDAIMWA+68
@NM00059 EQU   IDAIMWA+67
IMWSVIEL EQU   IDAIMWA+66
IMWIEL   EQU   IDAIMWA+65
IMWFGAIN EQU   IDAIMWA+64
IMWLBUFC EQU   IDAIMWA+56
IMWIPTR  EQU   IDAIMWA+52
IMWXPTR  EQU   IDAIMWA+48
IMWIKEYP EQU   IDAIMWA+44
IMWXKEYP EQU   IDAIMWA+40
IMWLEN   EQU   IDAIMWA+2
IMWBSE   EQU   IMWFLAGS
IMWRIPL  EQU   IMWFLAGS
IMWNEWHL EQU   IMWFLAGS
IMWID    EQU   IDAIMWA
ICWCERP  EQU   IDAICWA+59
ICWCEL   EQU   IDAICWA+58
ICWCEF   EQU   IDAICWA+57
ICWCER   EQU   IDAICWA+56
ICWREQ   EQU   IDAICWA+54
ICWCRSEG EQU   IDAICWA+52
ICWNOSEG EQU   IDAICWA+50
ICWNEST  EQU   IDAICWA+48
ICWKEY3L EQU   IDAICWA+46
ICWKEY2L EQU   IDAICWA+44
ICWARDBP EQU   IDAICWA+36
ICWSCNT  EQU   IDAICWA+22
ICWPSEO  EQU   IDAICWA+20
ICWBUFC  EQU   IDAICWA+8
ICWLEN   EQU   IDAICWA+2
ICWENDRQ EQU   ICWFLG1
ICWSPLIT EQU   ICWFLG1
ICWVNE   EQU   ICWFLG1
ICWVSE   EQU   ICWFLG1
ICWRBAOK EQU   ICWFLG1
ICWWAGM  EQU   ICWFLG1
ICWWNF   EQU   ICWFLG1
ICWID    EQU   IDAICWA
IXSPEC   EQU   IDAIXSPL+19
IXSEKON  EQU   IDAIXSPL+18
@NM00058 EQU   IXSBFLG
IXSLELV  EQU   IXSBFLG
IXSSSRH  EQU   IXSBFLG
IXSNOSR  EQU   IDAIXSPL+16
IXSKLEN  EQU   IDAIXSPL+14
IXSILN   EQU   IDAIXSPL+13
IXSTLN   EQU   IDAIXSPL+12
IXSARG   EQU   IDAIXSPL+8
IXSSTRBA EQU   IDAIXSPL
IXKEY    EQU   IDAIXK
IXSELL   EQU   IDASELL
IBFLP1   EQU   IBFLP2
IXHFLGS  EQU   IDAIXH+17
IXHXX    EQU   IDAIXH+12
@NM00057 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDERBA  EQU   IDAARDB+16
ARDHRBA  EQU   IDAARDB+12
ARDNPTR  EQU   IDAARDB+4
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDEOD   EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCHAIN EQU   IDABUFC+48
BUFXORBA EQU   IDABUFC+44
BUFCNXT2 EQU   IDABUFC+37
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCCPA  EQU   IDABUFC+16
BUFCAMB  EQU   BUFCPLH
@NM00056 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00055 EQU   IDABUFDR+16
BUFDBUFC EQU   IDABUFDR+12
@NM00054 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00053 EQU   IDAAMDSB+41
@NM00052 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00050 EQU   IDAPLH+265
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00049 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHRBUFC EQU   IDAPLH+192
PLHNRBA  EQU   IDAPLH+184
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00048 EQU   IDAPLH+172
@NM00047 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHAMB   EQU   IDAPLH+108
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHNBUFC EQU   IDAPLH+56
PLHLRECL EQU   IDAPLH+48
@NM00046 EQU   IDAPLH+43
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00045 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
@NM00044 EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
@NM00043 EQU   IDADIWA+92
@NM00042 EQU   IDADIWA+88
@NM00041 EQU   IDADIWA+84
@NM00040 EQU   IDADIWA+80
@NM00039 EQU   IDADIWA+76
@NM00038 EQU   IDADIWA+72
@NM00037 EQU   IDADIWA+68
@NM00036 EQU   IDADIWA+64
@NM00035 EQU   IDADIWA+60
@NM00034 EQU   IDADIWA+56
DIWINRBA EQU   IDADIWA+52
DIWRKCT  EQU   IDADIWA+48
DIWSAVE5 EQU   DIWSAVE+16
DIWSAVE3 EQU   DIWSAVE+8
DIWSPLTP EQU   IDADIWA+24
DIWBUFC  EQU   IDADIWA+20
DIWPLH   EQU   IDADIWA+16
DIWHRBA  EQU   IDADIWA+12
DIWLRBA  EQU   IDADIWA+8
@NM00033 EQU   IDADIWA+6
DIWNOT1  EQU   DIWFLG1
DIWSHIFT EQU   DIWFLG1
DIWGSPC  EQU   DIWFLG1
DIWEOKR  EQU   DIWFLG1
DIWPFERR EQU   DIWFLG1
DIWCISPL EQU   DIWFLG1
DIWCAS   EQU   DIWFLG1
DIWLEN   EQU   IDADIWA+2
DIWATV   EQU   IDADIWA+1
DIWID    EQU   IDADIWA
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00032 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00031 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00030 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00029 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00028 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00027 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00026 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00025 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00024 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00023 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00022 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00021 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00020 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00019 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00018 EQU   IDAAMBL+31
@NM00017 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00016 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00015 EQU   AMBCSWD1+1
@NM00014 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBLSR   EQU   AMBAFLG
@NM00013 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00012 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00011 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00010 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00009 EQU   AMBINFL
@NM00008 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00007 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00006 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00005 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00004 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00003 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00002 EQU   RPLRBAR+3
@NM00001 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00184 EQU   SFEXIT
@RT00228 EQU   SFEXIT
@RT00290 EQU   SFEXIT
@RT00300 EQU   SFEXIT
@RT00318 EQU   SFEXIT
@RT00363 EQU   SFEXIT
@RT00374 EQU   SFEXIT
@RT00410 EQU   SFEXIT
@RT00421 EQU   SFEXIT
@RT00433 EQU   SFEXIT
@RT00452 EQU   SFEXIT
@RT00465 EQU   SFEXIT
@RT00483 EQU   SFEXIT
@RT00519 EQU   SFEXIT
@ENDDATA EQU   *
         END   IDA019SF,(C'PLS2227',0701,78172)
