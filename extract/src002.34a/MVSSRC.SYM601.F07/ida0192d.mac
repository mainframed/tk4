         TITLE 'IDA0192D - ACQUIRE AND RELINQUISH EXTENTS              *
                        '
IDA0192D CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA0192D  77.031'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
*   PARMPTR=R1;                     /* INIT PARM LIST POINTER        */
         LR    PARMPTR,R1                                          0161
*   R1=R13+36;                      /* POINT TO REG4 IN SAVE LIST    */
         LA    R1,36(,R13)                                         0162
*   GEN(LM R4,R6,36(R13));          /* SAVE REGISTERS                */
         LM R4,R6,36(R13)
*   R9=WKPOOL;                      /* LOAD SUBPOOL NUMBER           */
         LA    R9,252                                              0164
*   GEN(L R7,@SIZDATD)              /* GET SIZE OF TEMP AREA         */
*   SETS(R7);                                                      0165
         L R7,@SIZDATD
*   GEN(GETMAIN EC,LV=(R7),A=(R13),SP=(R9),MF=(E,(1)))             0166
*   SETS(RETCODE);                                                 0166
         GETMAIN EC,LV=(R7),A=(R13),SP=(R9),MF=(E,(1))
*   GEN(STM R4,R6,36(R13));         /* RESTORE SAVE AREA             */
         STM R4,R6,36(R13)
*   IF RETCODE^=0 THEN              /* IF GETMAIN UNSUCCESSFUL       */
         LTR   RETCODE,RETCODE                                     0168
         BZ    @RF00168                                            0168
*     DO;                           /* BAD GETMAIN CODE              */
*       RETCODE=GMFAIL;             /* LOAD RETURN CODE              */
         SLR   RETCODE,RETCODE                                     0170
         ICM   RETCODE,3,GMFAIL                                    0170
*       GEN(BR RET);                /* RETURN TO CALLER WITH ERROR   */
         BR RET
*     END;                          /* END BAD GETMAIN               */
*   ELSE                            /* IF GETMAIN SUCCESSFUL         */
*     DO;                           /* GETMAIN SUCCESSFUL            */
         B     @RC00168                                            0173
@RF00168 DS    0H                                                  0174
*       GEN(L RETCODE,0(R13));      /* GET POINTER TO GOTTEN CORE    */
         L RETCODE,0(R13)
*       R6=RETCODE;                 /* GET POINTER TO CORE FOR MVCL  */
         LR    R6,RETCODE                                          0175
*       R9=0;                       /* SET COUNT TO ZERO CORE        */
         SLR   R9,R9                                               0176
*       GEN(MVCL  R6,R8);           /* CLEAR GOTTEN CORE             */
         MVCL  R6,R8
*       GEN(ST R13,4(RETCODE));     /* SAVE SAVE AREA ADDRESS        */
         ST R13,4(RETCODE)
*       R13=RETCODE;                /* LOAD PTR TO AUTOMATIC CORE    */
         LR    R13,RETCODE                                         0179
*       GEN(USING @DATD,R13);       /* GET ADDRESSING                */
         USING @DATD,R13
*       RESPECIFY                                                  0181
*         R13 RESTRICTED;           /* RESTRICT REG 13               */
*     END;                          /* END GOOD GETMAIN              */
*   RESPECIFY                                                      0183
*     RETCODE UNRESTRICTED;         /* FREE UP RETURN CODE REG       */
*                                                                  0183
@RC00168 DS    0H                                                  0184
*   /*****************************************************************/
*   /*                                                               */
*   /* ALL POINTERS AND COUNTS ARE INITIALIZED HERE                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0184
*   RESPECIFY                                                      0184
*     IDAPDPRM BASED(ADDR(ERRORWD));/* ERROR CODE BYTES              */
*   PDPFUNC=FUNC40;                 /* INDICATE INITIALIZATION       */
         LA    @15,ERRORWD                                         0185
         MVI   PDPFUNC(@15),X'28'                                  0185
*   RESPECIFY                                                      0186
*     RET RESTRICTED;               /* RESTRICT RETURN REG           */
*   RESPECIFY                                                      0187
*     IDAVIRT BASED(PARMPTR);       /* PARMLIST BASE ON PARMPTR RG   */
*   RESPECIFY                                                      0188
*     IFGACB BASED(VIRTACB);        /* USE PARM LIST FOR ACB PTR     */
*   RESPECIFY                                                      0189
*     IDAAMDSB BASED(AMBDSB);       /* USE AMB POINTER TO AMDSB      */
*   RESPECIFY                                                      0190
*     DEBBASIC BASED(AMBDEBPT);     /* USE AMB PTR TO DEB            */
*   RESPECIFY                                                      0191
*     DEBDASD BASED(EXTENTS);       /* POINTER TO EACH EXTENT        */
*   RESPECIFY                                                      0192
*     IDAAMBL BASED(ACBAMBL);       /* USE ACB POINTER TO AMBL       */
*   RESPECIFY                                                      0193
*     IDAAMB BASED(RAMB);           /* AMB REG POINTER               */
*                                                                  0193
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE CALLER DESIRES ALL OF THE EXTENTS ASSOCIATED WITH AN   */
*   /* ACB TO BE PROCESSED, A COUNT OF ALL OF THE VIRTUAL UCBS MUST  */
*   /* BE OBTAINED. A LIST OF THERE UCBS INDEXED BY UCBCOUNT IS THEN */
*   /* BUILT                                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0194
*   IF VIRTBACB=ON THEN             /* CHECK IF ACB OPTION IS REQ    */
         TM    VIRTBACB(PARMPTR),B'00010000'                       0194
         BNO   @RF00194                                            0194
*     DO;                           /* GET COUNT OF APPLICABLE UCBS  */
*       RAMB=AMBLDTA;               /* GET THE DATA AMB      @Y30LSPS*/
         L     @15,VIRTACB(,PARMPTR)                               0196
         L     @15,ACBAMBL(,@15)                                   0196
         L     RAMB,AMBLDTA(,@15)                                  0196
*       IF AMBCAT=OFF&              /* CHECK IF CATLG        @Y30LSPS*/
*           AMBSCRA=OFF THEN        /* CHECK IF CRA          @Y30LSSM*/
         TM    AMBCAT(RAMB),B'00011000'                            0197
         BNZ   @RF00197                                            0197
*         DO;                       /* SEARCH DSABS IF NOT CATLG     */
*           RESPECIFY                                              0199
*             RTIOT RESTRICTED;     /* USE TIOT IN THIS ROUTINE      */
*           RTIOT=DEBAPPAD->DEBXTNP;/* DEB EXTENTION         @Y30LSPS*/
         L     @15,AMBDEBPT(,RAMB)                                 0200
         L     @15,DEBAPPAD(,@15)                                  0200
         L     RTIOT,DEBXTNP(,@15)                                 0200
*           DSABPTR=RTIOT->DEBXDSAB;/* FIRST DSAB PTR        @Y30LSPS*/
         L     @15,DEBXDSAB(,RTIOT)                                0201
         ST    @15,DSABPTR                                         0201
*           FSTDSAB=DSABPTR;        /* SAVE FIRST DSAB       @Y30LSPS*/
         ST    @15,FSTDSAB                                         0202
*           RTIOT=DSABTIOT;         /* FIRST TIOT ENTRY      @Y30LSPS*/
         L     RTIOT,DSABTIOT(,@15)                                0203
*           LISTCNT=0;              /* INIT LIST COUNT       @Y30LSPS*/
         SLR   LISTCNT,LISTCNT                                     0204
*           DO WHILE CONCEND=OFF;   /* COUNT ALL UCBS IN ALL ENTRYS  */
         B     @DE00205                                            0205
@DL00205 DS    0H                                                  0206
*             LISTCNT=LISTCNT+(TIOELNGH-16)/4;/* CALC UCB ENTRY    0206
*                                      ASSOCIATED WITH AMDSBS WITH 0206
*                                      STAGING OPTION SPECIFIED      */
         SLR   @00,@00                                             0206
         IC    @00,TIOELNGH(,RTIOT)                                0206
         SL    @00,@CF00078                                        0206
         SRDA  @00,32                                              0206
         D     @00,@CF00066                                        0206
         ALR   LISTCNT,@01                                         0206
*             IF DSABFCHN=0×        /* NO MORE DDNAMES       @Y30LSPS*/
*                 DSABFCHN->DSABTIOT->TIOEDDNM='        ' THEN/* NO
*                                      CONCATENATION         @Y30LSSM*/
         L     @15,DSABPTR                                         0207
         L     @15,DSABFCHN(,@15)                                  0207
         LTR   @15,@15                                             0207
         BZ    @RT00207                                            0207
         L     @15,DSABTIOT(,@15)                                  0207
         CLC   TIOEDDNM(8,@15),@CC03473                            0207
         BNE   @RF00207                                            0207
@RT00207 DS    0H                                                  0208
*               CONCEND=ON;         /* INDICATE END OF TIOE SCAN     */
         OI    CONCEND,B'00010000'                                 0208
*             ELSE                  /* PROCESS               @Y30LSPS*/
*               DO;                 /* ANOTHER DSAB          @Y30LSPS*/
         B     @RC00207                                            0209
@RF00207 DS    0H                                                  0210
*                 DSABPTR=DSABFCHN; /* GET NEXT DSAB         @Y30LSPS*/
         L     @15,DSABPTR                                         0210
         L     @15,DSABFCHN(,@15)                                  0210
         ST    @15,DSABPTR                                         0210
*                 RTIOT=DSABTIOT;   /* NEXT TIOT ENTRY       @Y30LSPS*/
         L     RTIOT,DSABTIOT(,@15)                                0211
*               END;                /* END GETTING MORE TIOTS      0212
*                                                            @Y30LSPS*/
*           END;                    /* END SCAN TIOT ENTRY FOR CNT   */
@RC00207 DS    0H                                                  0213
@DE00205 TM    CONCEND,B'00010000'                                 0213
         BZ    @DL00205                                            0213
*         END;                      /* END SEARCH DSAB CHAIN @Y30LSPS*/
*                                                                  0214
*       /*************************************************************/
*       /*                                                           */
*       /* IF THE DATA SET IS A CATALOG, OR CATALOG RECOVERY AREA THE*/
*       /* DSAB CHAIN MAY NOT BE VALID. THEREFOR, THE CALLER PASSED A*/
*       /* POINTER TO THE TIOT ENTRY IN VIRTTIOE. THIS IS THE ONLY   */
*       /* TIOT ENTRY, AS CONCATENATED CATALOGS AS ONE DATA SET ARE  */
*       /* NOT ALLOWED. ALSO, A CATALOG CAN NEVER SPAN MORE THAN ONE */
*       /* VOLUME, SO ONLY ONE UCB NEEDS TO BE PROCESSED. IF A       */
*       /* CATALOG IS BEING PROCESSED, THIS CODE WILL CONVERT THE    */
*       /* PARAMETER LIST INTO A SPECIAL CASE OF THE BYUCB PARAMETER */
*       /* LIST.                                             @Y30LSPS*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0215
*       ELSE                        /* AMBCAT IS ON AND THIS IS A CAT*/
*         DO;                       /* CONVERT THE PARAMETER LIST    */
         B     @RC00197                                            0215
@RF00197 DS    0H                                                  0216
*           VIRTBUCB=ON;            /* INDICATE UCB PROVIDED @Y30LSPS*/
         OI    VIRTBUCB(PARMPTR),B'00001000'                       0216
*           RTIOT=VIRTTIOE;         /* GET PTR TO TIOT ENTRY @Y30LSPS*/
         L     RTIOT,VIRTTIOE(,PARMPTR)                            0217
*           VIRTUCB=TIOEFSRT;       /* PUT UCB PTR IN PARM LIST      */
         L     @15,TIOEFSRT-1(,RTIOT)                              0218
         LA    @15,0(,@15)                                         0218
         ST    @15,VIRTUCB(,PARMPTR)                               0218
*           LISTCNT=1;              /* COUT OF ONE UCB       @Y30LSPS*/
         LA    LISTCNT,1                                           0219
*         END;                      /* END IF CATALOG        @Y30LSPS*/
*       RESPECIFY                                                  0221
*         RTIOT UNRESTRICTED;       /* FREEUP TIOT PTR REG   @Y30LSPS*/
@RC00197 DS    0H                                                  0222
*       CALL BLDUCBL;               /* GETMAIN A LIST FOR THE UCBS 0222
*                                      AND PLACE ALL APPLICABLE UCBS
*                                      INTO THE LIST                 */
         BAL   @14,BLDUCBL                                         0222
*     END;                          /* END SPECIAL ACB CLUSTER PROCE */
*                                                                  0223
*   /*****************************************************************/
*   /*                                                               */
*   /* IF EOV IS CALLING TO RELINQUISH ALL EXTENTS ON ONE DRIVE PRIOR*/
*   /* TO DISMOUNTING THE VOLUME, ONLY ONE UCB WILL BE PRESENT       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0224
*   ELSE                            /* ONLY A ONE ENTRY UCB LIST NED */
*     DO;                           /* SETUP TO BUILD ONLY ONE UCB   */
         B     @RC00194                                            0224
@RF00194 DS    0H                                                  0225
*       LISTCNT=1;                  /* COUNT OF ONE FOR UCBS         */
         LA    LISTCNT,1                                           0225
*       CALL BLDUCBL;               /* BUILD A UCB LIST FOR ONE UCB  */
         BAL   @14,BLDUCBL                                         0226
*     END;                          /* END SPECIAL SINGLE UCB PROC   */
*                                                                  0227
*   /*****************************************************************/
*   /*                                                               */
*   /* AT THIS POINT THE BYACB CASE AND THE ONEUCB CASES ARE TREATED */
*   /* IN THE SAME MANNER. FOR ANY OTHER CASES, THE UCBCOUNT IS STILL*/
*   /* ZERO                                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0228
*   DO WHILE LISTCNT^=0;            /* PROCESS ALL UCBS IN THE LIST  */
@RC00194 B     @DE00228                                            0228
@DL00228 DS    0H                                                  0229
*     RUCB=LISTUCB(LISTCNT);        /* GET A UCB FORM THE LIST       */
         LR    @15,LISTCNT                                         0229
         SLA   @15,3                                               0229
         L     @07,DOLISTPT                                        0229
         AL    @07,@CF03528                                        0229
         L     RUCB,LISTUCB-4(@15,@07)                             0229
*     CALL BLDACQL;                 /* BUILD ONE OR MORE 16 EXTENT 0230
*                                      ACQUIRE OR RELINQUISH LISTS 0230
*                                      FOR ALL OF THE EXTENTS ON THE
*                                      VOLUME SPECIFIED BY UCBPTR    */
         BAL   @14,BLDACQL                                         0230
*     LISTCNT=LISTCNT-1;            /* DECREMENT THE UCB COUNT       */
         BCTR  LISTCNT,0                                           0231
*   END;                            /* ALL ACQUIRE RELINQUISH LISTS
*                                      HAVE NOW BEEN BUILT           */
*                                                                  0232
@DE00228 SLR   @15,@15                                             0232
         CR    LISTCNT,@15                                         0232
         BNE   @DL00228                                            0232
*   /*****************************************************************/
*   /*                                                               */
*   /* IF ANY VIRTUAL UCBS WERE FOUND, A LIST WILL HAVE BEEN BUILT BY*/
*   /* BLDACQL. THIS LIST, OR CHAIN OF LISTS IF MORE THAN 16 EXTENTS */
*   /* WERE ASSOCIATED WITH ANY ONE UCB, IS IN THE PROPER FORM TO    */
*   /* ISSUE AN ACQUIRE OF RELINQUISH REQUEST AGAINST                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0233
*   LISTCNT=COUNT;                  /* RESTORE COUNT OF VIRTUAL UCBS
*                                      VIRTUAL UCBS                  */
         L     @11,DOLISTPT                                        0233
         LH    LISTCNT,COUNT(,@11)                                 0233
*   ACQPTR=FIRSTACQ;                /* GET THE FIRST ACQUIRE LIST    */
         L     ACQPTR,FIRSTACQ                                     0234
*   IF ACQPTR^=0 THEN               /* CHECK IF ANY ENTRIES          */
         CR    ACQPTR,@15                                          0235
         BE    @RF00235                                            0235
*     DO;                           /* STAGE ENTRIES IF NOT ZERO     */
*       PREVACQ=ADDR(FIRSTACQ)-(ADDR(ARNEDB)-ADDR(ACQINIT));       0237
         LA    @15,FIRSTACQ                                        0237
         SL    @15,@CF03227                                        0237
         ST    @15,PREVACQ                                         0237
*       DO WHILE ACQPTR^=0;         /* CHECK ALL ENTRIES FOR NULL    */
         B     @DE00238                                            0238
@DL00238 DS    0H                                                  0239
*         IF ARNMEXT=0 THEN         /* CHECK IF COUNT NULL           */
         CLI   ARNMEXT(ACQPTR),0                                   0239
         BNE   @RF00239                                            0239
*           PREVACQ->ARNEDB=ARNEDB; /* UNCHAIN NULL LIST             */
         L     @15,ARNEDB(,ACQPTR)                                 0240
         L     @11,PREVACQ                                         0240
         ST    @15,ARNEDB(,@11)                                    0240
*         ELSE                                                     0241
*           PREVACQ=ACQPTR;         /* MAKE THIS PREVIOUS IF NOT NUL */
         B     @RC00239                                            0241
@RF00239 ST    ACQPTR,PREVACQ                                      0241
*         ACQPTR=ARNEDB;            /* GET NEXT LIST OR ZERO         */
@RC00239 L     ACQPTR,ARNEDB(,ACQPTR)                              0242
*       END;                        /* END CHECK FOR NULL LISTS      */
@DE00238 SLR   @15,@15                                             0243
         CR    ACQPTR,@15                                          0243
         BNE   @DL00238                                            0243
*       ACQPTR=FIRSTACQ;            /* POINT TO FIRST AGAIN          */
         L     ACQPTR,FIRSTACQ                                     0244
*       IF ACQPTR^=0 THEN           /* CHECK IF ALL LISTS NULL       */
         CR    ACQPTR,@15                                          0245
         BE    @RF00245                                            0245
*         CALL STAGIT;              /* GO STAGE ALL ENTRYS IN LISTS  */
         BAL   @14,STAGIT                                          0246
*     END;                          /* END IF ANY LISTS CREATED      */
@RF00245 DS    0H                                                  0248
*EXIT:                              /* ENTRY CAN BE TO HERE ON     0248
*                                      TERMINATION, NORMAL OR ERROR  */
*                                                                  0248
*   /*****************************************************************/
*   /*                                                               */
*   /* ANY CORE GOTTEN MUST NOW BE FREED, AND THE CORRECT RETURN     */
*   /* INFORMATION MUST BE PASSED TO THE CALLER                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0248
*   RESPECIFY                                                      0248
*     COREPTR RESTRICTED;           /* RESTRICT REG FOR THIS RTN     */
@RF00235 DS    0H                                                  0248
EXIT     DS    0H                                                  0249
*   COREPTR=COREBASE;               /* GET BASE OF CORE CHAIN        */
         L     COREPTR,COREBASE                                    0249
*   DO WHILE COREPTR^=0;            /* FREE ALL CORE ENTRYS          */
         B     @DE00250                                            0250
@DL00250 DS    0H                                                  0251
*     R0=CORELEN;                   /* GET LENGTH FROM CORE HEADER   */
         LH    R0,CORELEN(,COREPTR)                                0251
*     R1=COREPTR;                   /* POINT TO THIS PIECE OF CORE   */
         LR    R1,COREPTR                                          0252
*     COREPTR=CORECHN;              /* GET NEXT PIECE OF CORE        */
         L     COREPTR,CORECHN(,COREPTR)                           0253
*     GEN(FREEMAIN  R,LV=(0),A=(1));/* FREE THE GOTTEN CORE          */
         FREEMAIN  R,LV=(0),A=(1)
*   END;                            /* END FREE GOTTEN CORE LOOP     */
@DE00250 LTR   COREPTR,COREPTR                                     0255
         BNZ   @DL00250                                            0255
*   RESPECIFY                                                      0256
*     COREPTR UNRESTRICTED;         /* FREE UP CORE PTR REG          */
*                                                                  0256
*   /*****************************************************************/
*   /*                                                               */
*   /* EXIT MODULE                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0257
*   IF PDPCODE=0 THEN               /* IF NO ERRORS                  */
         LA    @15,ERRORWD                                         0257
         CLI   PDPCODE(@15),0                                      0257
         BNE   @RF00257                                            0257
*     PDPFUNC=0;                    /* THEN ZERO FUNCTION CODE       */
         MVI   PDPFUNC(@15),X'00'                                  0258
*   RESPECIFY                                                      0259
*    (R6,                                                          0259
*     R7) RESTRICTED;               /* RESTRICT REGS 6 & 7           */
@RF00257 DS    0H                                                  0260
*   R6=ERRORWD;                     /* LOAD RETURN CODE              */
         L     R6,ERRORWD                                          0260
*   SLL(R6,8);                      /* SET PROB DET INFO FOR CALLER  */
         SLL   R6,8                                                0261
*   MAINPOOL=WKPOOL;                /* SET SUBPOOL FOR FREEMAIN      */
         MVI   MAINPOOL,X'FC'                                      0262
*   GEN(L R7,@SIZDATD);             /* LOAD BLOCK SIZE               */
         L R7,@SIZDATD
*   MAINLEN=R7;                     /* SET LENGTH FOR FREEMAIN       */
         STCM  R7,7,MAINLEN                                        0264
*   R1=R13;                         /* POINT TO BLOCK ADDR           */
         LR    R1,R13                                              0265
*   R0=MAINR0;                      /* LOAD SUBPOOL/LENGTB           */
         L     R0,MAINR0                                           0266
*   GEN(L R13,4(R13));              /* POINT TO LAST SAVEAREA        */
         L R13,4(R13)
*   GEN(FREEMAIN R,LV=(0),A=(1));   /* FREE AUTOMATICS               */
         FREEMAIN R,LV=(0),A=(1)
*   RETCODE=R6;                     /* LOAD RETURN CODE REGISTER     */
         LR    RETCODE,R6                                          0269
*   RESPECIFY                                                      0270
*    (R6,                                                          0270
*     R7) UNRESTRICTED;             /* UNRESTRICT REGS 6 & 7         */
*   GEN(L RET,12(R13));             /* LOAD RETURN ADDRESS           */
         L RET,12(R13)
*   GEN(LM R0,R12,20(R13));         /* RESTORE REGISTERS 0-12        */
         LM R0,R12,20(R13)
*   GEN(BR RET);                    /* RETURN TO CALLER              */
         BR RET
*   RESPECIFY                                                      0274
*    (R0,                                                          0274
*     R1) UNRESTRICTED;                                            0274
*BACKOUT:                           /* THIS IS AN ERROR RECOVERY   0275
*                                      ROUTINE THAT TRIES TO         */
*                                                                  0275
*   /*****************************************************************/
*   /*                                                               */
*   /* BACK OUT ANY ACQUIRES ISSUED BY ISSUING THE COMPLEMENTARY     */
*   /* RELINQUISHES                                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0275
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0275
BACKOUT  DS    0H                                                  0276
*   ARNEDB=0;                       /* TERMINATE THE CHAIN AT ERROR  */
         SLR   @15,@15                                             0276
         ST    @15,ARNEDB(,ACQPTR)                                 0276
*   ACQPTR=FIRSTACQ;                /* POINT TO FIRST LIST           */
         L     ACQPTR,FIRSTACQ                                     0277
*   DO WHILE ACQPTR^=0;             /* CHANGE ALL LISTS TO REL       */
         B     @DE00278                                            0278
@DL00278 DS    0H                                                  0279
*     AROP='02'X;                   /* MAKE OPERATION RELINQUISH     */
         MVI   AROP(ACQPTR),X'02'                                  0279
*     ARDRES=OFF;                   /* DO NOT WAIT FOR RELINQUISH    */
         NI    ARDRES(ACQPTR),B'10111111'                          0280
*     ACQPTR=ARNEDB;                /* GET THE NEXT LIST             */
         L     ACQPTR,ARNEDB(,ACQPTR)                              0281
*   END;                            /* ENDCHANGE TO RELINQUISH       */
@DE00278 LTR   ACQPTR,ACQPTR                                       0282
         BNZ   @DL00278                                            0282
*   ACQPTR=FIRSTACQ;                /* POINT TO START OF CHAIN       */
         L     ACQPTR,FIRSTACQ                                     0283
*   GEN(ICBACREL  MF=(E,(ACQPTR)),TYPE=REL);/* RELINQUISH IT         */
*                                                                  0284
         ICBACREL  MF=(E,(ACQPTR)),TYPE=REL
*   /*****************************************************************/
*   /*                                                               */
*   /* NO ERROR CHECKING IS DONE AS THIS IS A PURE BACKOUT WHICH WILL*/
*   /* CONTINUE BLINDLY ALONG UNTIL THE EXTENTS HAVE ALL BEEN TRIED  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0285
*   END BACKOUT;                    /* END OF ERROR BACKOUT MODULE   */
@EL00002 DS    0H                                                  0285
@EF00002 DS    0H                                                  0285
@ER00002 BR    @14                                                 0285
*BLDACQL:                           /* BUILD ONE OR MORE ACQUIRE   0286
*                                      RELINQUISH LISTS              */
*                                                                  0286
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE CALLS GETLIST TO GET ANY EMPTY ACQUIRE OR        */
*   /* RELINQUISH LIST AND CHAIN IT. GETAMB IS THEN CALLED TO GET THE*/
*   /* NEXT AMB IN THE CLUSTER. THE EXTENTS OF THE DEB ASSOCIATED    */
*   /* WITH THE AMB ARE SEARCHED, AND ANY EXTENTS ON THE DEVICE      */
*   /* CURRENTLY BEING PROCESSED ARE MOVED INTO THE ACQUIRE LIST.    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0286
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0286
BLDACQL  DS    0H                                                  0287
*   RESPECIFY                                                      0287
*    (EXTENTS,                                                     0287
*     RXTNT,                                                       0287
*     INDEX) RESTRICTED;            /* NEEDED REGS HERE              */
*   BLDASAVE=RET;                   /* SAVE RETURN REG               */
         ST    RET,BLDASAVE                                        0288
*   PDPFUNC=FUNC42;                 /* INDICATE BUILD ACQUIRE LIST   */
         LA    @15,ERRORWD                                         0289
         MVI   PDPFUNC(@15),X'2A'                                  0289
*   LASTAMB=OFF;                    /* SET TO CHECK ALL AMBS         */
*   FIRST=OFF;                      /* SET UP FOR FIRST AGAIN        */
         NI    LASTAMB,B'11011011'                                 0291
*   CALL GETAMB;                    /* GET THE FIRST AMB             */
         BAL   @14,GETAMB                                          0292
*   CALL GETLIST;                   /* GET A 16 ENTRY ACQUIRE LIST   */
         BAL   @14,GETLIST                                         0293
*   DO WHILE RAMB^=0;               /* PROCESS ALL AMBS              */
         B     @DE00294                                            0294
@DL00294 DS    0H                                                  0295
*     ACQPTR=ACQBASE(LISTCNT);      /* POINT TO FIRST ENTRY          */
         LR    @15,LISTCNT                                         0295
         SLA   @15,3                                               0295
         L     @11,DOLISTPT                                        0295
         L     ACQPTR,ACQBASE-8(@15,@11)                           0295
*     FIND=OFF;                     /* INIT NOT FOUND INDICATION     */
         NI    FIND,B'10111111'                                    0296
*     EXTENTS=AMBDEBAD+LENGTH(DEBBASIC)-LENGTH(DEBBASND);          0297
         L     EXTENTS,AMBDEBAD-1(,RAMB)                           0297
         LA    EXTENTS,0(,EXTENTS)                                 0297
         SL    EXTENTS,@CF03521                                    0297
*     IF AMDFAULT=OFF THEN          /* PROCESS IS STAGE REQUESTED    */
         L     @15,AMBDSB(,RAMB)                                   0298
         TM    AMDFAULT(@15),B'01000000'                           0298
         BNZ   @RF00298                                            0298
*       DO;                         /* STAGING SECTION               */
*         DO WHILE FIND=OFF;        /* SEARCH FOR CORRECT LIST       */
         B     @DE00300                                            0300
@DL00300 DS    0H                                                  0301
*           IF ARFLG^=AMBDISP×      /* CHECK IS ACQ LIST AND AMB     */
*               ACQFULL=ON THEN     /* CHECK IF ENTRY IS FULL THE  0301
*                                      NEXT LIST MUST BE GOTTEN      */
         CLC   ARFLG(1,ACQPTR),AMBDISP                             0301
         BNE   @RT00301                                            0301
         TM    ACQFULL(ACQPTR),B'10000000'                         0301
         BNO   @RF00301                                            0301
@RT00301 DS    0H                                                  0302
*             IF ARNEDB=0 THEN      /* CHECK IF ANOTHER LIST         */
         L     @15,ARNEDB(,ACQPTR)                                 0302
         LTR   @15,@15                                             0302
         BNZ   @RF00302                                            0302
*               CALL GETLIST;       /* THEN GET AND CHAIN A NEW LIST */
         BAL   @14,GETLIST                                         0303
*             ELSE                                                 0304
*               ACQPTR=ARNEDB;      /* GET NEXT LIST IN CHAIN        */
         B     @RC00302                                            0304
@RF00302 L     ACQPTR,ARNEDB(,ACQPTR)                              0304
*           ELSE                                                   0305
*             FIND=ON;              /* INDICATE CORRECT LIST FOUND   */
         B     @RC00301                                            0305
@RF00301 OI    FIND,B'01000000'                                    0305
*         END;                      /* END SEARCH LIST FOR OK LIST   */
*                                                                  0306
@RC00301 DS    0H                                                  0306
@DE00300 TM    FIND,B'01000000'                                    0306
         BZ    @DL00300                                            0306
*         /***********************************************************/
*         /*                                                         */
*         /* IF THIS IS THE SPECIAL ONE EXTENT CASE FROM EOV, THEN   */
*         /* THE START AND END CC MUST BE MOVED FROM THE EXTENT LIST */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0307
*         IF VIRTBEXT=ON THEN       /* CHECK IS SPECIAL ONE EXTENT   */
         TM    VIRTBEXT(PARMPTR),B'00000100'                       0307
         BNO   @RF00307                                            0307
*           DO;                     /* PROCESS THE EXTENT LIST       */
*             RXTNT=VIRTEXT;        /* POINT TO EXTENT               */
         L     RXTNT,VIRTEXT(,PARMPTR)                             0309
*             DO WHILE RXTNT<(VIRTEXT+VIRTLENG);/* PROCESS ALL       */
         B     @DE00310                                            0310
@DL00310 DS    0H                                                  0311
*               NEXTEXT=RXTNT+XTLNG;/* POINT TO NEXT EXTENT GO       */
         LR    @15,RXTNT                                           0311
         SLR   @11,@11                                             0311
         ICM   @11,3,XTLNG(RXTNT)                                  0311
         ALR   @15,@11                                             0311
         ST    @15,NEXTEXT                                         0311
*               DO WHILE RXTNT<NEXTEXT;/* PROCESS THIS GROUP         */
         B     @DE00312                                            0312
@DL00312 DS    0H                                                  0313
*                 DONTUSE=OFF;      /* INIT DONTUSE OFF              */
         NI    DONTUSE,B'01111111'                                 0313
*                 EXTENTS=AMBDEBAD+LENGTH(DEBBASIC)-LENGTH(DEBBASND);
         L     EXTENTS,AMBDEBAD-1(,RAMB)                           0314
         LA    EXTENTS,0(,EXTENTS)                                 0314
         SL    EXTENTS,@CF03521                                    0314
*                 IF VIRTMNT=OFF THEN/* IF NOT NEWLY MOUNTED         */
         TM    VIRTMNT(PARMPTR),B'00000010'                        0315
         BNZ   @RF00315                                            0315
*                   DO INDEX=1 TO DEBNMEXT;/* CHECK DEB EXTENTS      */
         LA    INDEX,1                                             0316
         B     @DE00316                                            0316
@DL00316 DS    0H                                                  0317
*                     IF DEBUCBA=VIRTUCB THEN/* CHECK THIS UCB EX    */
         L     @15,DEBUCBA-1(,EXTENTS)                             0317
         LA    @15,0(,@15)                                         0317
         C     @15,VIRTUCB(,PARMPTR)                               0317
         BNE   @RF00317                                            0317
*                       DO;         /* ANY EXTENTS DUPLICATE         */
*                         IF DEBSTRCC=STRCC THEN/* CHECK IF DUP      */
         CLC   DEBSTRCC(2,EXTENTS),STRCC(RXTNT)                    0319
         BNE   @RF00319                                            0319
*                           DONTUSE=ON;/* INDICATE EXTENT IS DUP     */
         OI    DONTUSE,B'10000000'                                 0320
*                       END;        /* END CHECKING THIS EXTENT      */
@RF00319 DS    0H                                                  0322
*                     EXTENTS=EXTENTS+LENGTH(DEBDASD);/* GET NX      */
@RF00317 LA    EXTENTS,16(,EXTENTS)                                0322
*                   END;            /* END CHECK IS DUPLICATE EXTENT */
         LA    INDEX,1(,INDEX)                                     0323
@DE00316 L     @15,AMBDEBPT(,RAMB)                                 0323
         SLR   @11,@11                                             0323
         IC    @11,DEBNMEXT(,@15)                                  0323
         CR    INDEX,@11                                           0323
         BNH   @DL00316                                            0323
*                 ELSE                                             0324
*                   DONTUSE=OFF;    /* IF NEW MOUNT THEN MUST BE OK  */
         B     @RC00315                                            0324
@RF00315 NI    DONTUSE,B'01111111'                                 0324
*                 IF DONTUSE=OFF THEN/* COPY EXTENTS IF GOOD         */
@RC00315 TM    DONTUSE,B'10000000'                                 0325
         BNZ   @RF00325                                            0325
*                   DO;             /* COPY EXTENTS TO ACQUIRE LIST  */
*                     IF ACQCC1(ARNMEXT)^=STRCC×/* DIFFERENT ST      */
*                         ACQCC2(ARNMEXT)^=ENDCC THEN/* DIFFER END   */
         SLR   @15,@15                                             0327
         IC    @15,ARNMEXT(,ACQPTR)                                0327
         SLA   @15,2                                               0327
         ST    @15,@TF00001                                        0327
         ALR   @15,ACQPTR                                          0327
         CLC   ACQCC1-4(2,@15),STRCC(RXTNT)                        0327
         BNE   @RT00327                                            0327
         LR    @15,ACQPTR                                          0327
         AL    @15,@TF00001                                        0327
         CLC   ACQCC2-4(2,@15),ENDCC(RXTNT)                        0327
         BE    @RF00327                                            0327
@RT00327 DS    0H                                                  0328
*                       DO;         /* IF UNIQUE THEN COPY           */
*                         ARNMEXT=ARNMEXT+1;/* INCR EXTENT CNT       */
         LA    @15,1                                               0329
         SLR   @11,@11                                             0329
         IC    @11,ARNMEXT(,ACQPTR)                                0329
         ALR   @15,@11                                             0329
         STC   @15,ARNMEXT(,ACQPTR)                                0329
*                         ACQCC1(ARNMEXT)=STRCC;/* GET START CC      */
         SLA   @15,2                                               0330
         ST    @15,@TF00001                                        0330
         ALR   @15,ACQPTR                                          0330
         MVC   ACQCC1-4(2,@15),STRCC(RXTNT)                        0330
*                         ACQCC2(ARNMEXT)=ENDCC;/* GET END CC        */
         LR    @15,ACQPTR                                          0331
         AL    @15,@TF00001                                        0331
         MVC   ACQCC2-4(2,@15),ENDCC(RXTNT)                        0331
*                         IF ARNMEXT=16 THEN/* ONLY 16 EXTENTS IN AN
*                                      ACQ LIST              @ZA16054*/
         CLI   ARNMEXT(ACQPTR),16                                  0332
         BNE   @RF00332                                            0332
*                           DO;     /* SET LIST FULL AND GET NEW LIST
*                                                            @ZA16054*/
*                             ACQFULL=ON;/* INDICATE THIS LIST IS  0334
*                                      FULL                  @ZA16054*/
         OI    ACQFULL(ACQPTR),B'10000000'                         0334
*                             CALL GETLIST;/* GET NEW LIST@ZA16054   */
         BAL   @14,GETLIST                                         0335
*                           END;    /* END IF LIST IS FULL   @ZA16054*/
*                       END;        /* END COPY NEW CYL EXTENT       */
@RF00332 DS    0H                                                  0338
*                   END;            /* END IF EXTENTS TO BE STAGED   */
@RF00327 DS    0H                                                  0339
*                 RXTNT=RXTNT+LENGTH(EXTENT);/* INCR TO NEXT EX      */
@RF00325 LA    RXTNT,20(,RXTNT)                                    0339
*               END;                /* END PROCESSING ONE EXTENT   0340
*                                      GROUP OCCURANCE               */
*                                                                  0340
@DE00312 C     RXTNT,NEXTEXT                                       0340
         BL    @DL00312                                            0340
*               /*****************************************************/
*               /*                                                   */
*               /* THE POINTERS MUST NOW BE ADVANCED TO THE NEXT     */
*               /* GROUP OCCURANCE SET OF EXTENT FIELDS RXTNT HAS    */
*               /* BEEN INCREMENTED TO THE END OF A SET OF EXTENTS BY*/
*               /* ONE EXTENT LENGTH AT A TIME. IT MUST NOW BE       */
*               /* INCREMENTED PAST THE FIXED LENGTH HEADER AND COUNT*/
*               /* FIELD OF THE NEXT SET OF EXTENTS                  */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0341
*               RXTNT=RXTNT+LENGTH(EXTFXD)+LENGTH(XTLNG);          0341
         LA    RXTNT,9(,RXTNT)                                     0341
*             END;                  /* END OF ALL EXTENTS AND GROUPS */
@DE00310 LH    @15,VIRTLENG(,PARMPTR)                              0342
         AL    @15,VIRTEXT(,PARMPTR)                               0342
         CR    RXTNT,@15                                           0342
         BL    @DL00310                                            0342
*           END;                    /* END IF EXTENT LIST PASSED     */
*         ELSE                      /* ALL EXTENTS OF DEB ARE CHECK  */
*           DO;                     /* PROCEED WITH NORMAL CASE      */
*                                                                  0344
         B     @RC00307                                            0344
@RF00307 DS    0H                                                  0345
*             /*******************************************************/
*             /*                                                     */
*             /* WHEN THE CORRECT ACQUIRE RELINQUISH LIST HAS BEEN   */
*             /* FOUND, THE DEB ASSOCIARED WITH THE AMB MUST BE      */
*             /* SEARCHED FOR ALL EXTENTS THAT ARE ON THE VOLUME IN  */
*             /* QUESTION                                            */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0345
*             DO INDEX=1 TO DEBNMEXT;/* PROCESS ALL EXTENT OF DEB    */
         LA    INDEX,1                                             0345
         B     @DE00345                                            0345
@DL00345 DS    0H                                                  0346
*               IF DEBUCBA=RUCB THEN/* CHECK IF THIS IS ON DEVICE    */
         L     @15,DEBUCBA-1(,EXTENTS)                             0346
         LA    @15,0(,@15)                                         0346
         CR    RUCB,@15                                            0346
         BNE   @RF00346                                            0346
*                 DO;               /* COPY EXTENTS TO ACQUIRE LIST  */
*                   IF ACQCC1(ARNMEXT)^=DEBSTRCC×/* START NEW CYL    */
*                       ACQCC2(ARNMEXT)^=DEBENDCC THEN/* NEW END CYL */
         SLR   @15,@15                                             0348
         IC    @15,ARNMEXT(,ACQPTR)                                0348
         SLA   @15,2                                               0348
         ST    @15,@TF00001                                        0348
         ALR   @15,ACQPTR                                          0348
         CLC   ACQCC1-4(2,@15),DEBSTRCC(EXTENTS)                   0348
         BNE   @RT00348                                            0348
         LR    @15,ACQPTR                                          0348
         AL    @15,@TF00001                                        0348
         CLC   ACQCC2-4(2,@15),DEBENDCC(EXTENTS)                   0348
         BE    @RF00348                                            0348
@RT00348 DS    0H                                                  0349
*                     DO;           /* COPY NEW CYL EXTENTS          */
*                       ARNMEXT=ARNMEXT+1;/* INCR ACQUIRE EXT CNT    */
         LA    @15,1                                               0350
         SLR   @11,@11                                             0350
         IC    @11,ARNMEXT(,ACQPTR)                                0350
         ALR   @15,@11                                             0350
         STC   @15,ARNMEXT(,ACQPTR)                                0350
*                       ACQCC1(ARNMEXT)=DEBSTRCC;/* COPY START CC ADD*/
         SLA   @15,2                                               0351
         ST    @15,@TF00001                                        0351
         ALR   @15,ACQPTR                                          0351
         MVC   ACQCC1-4(2,@15),DEBSTRCC(EXTENTS)                   0351
*                       ACQCC2(ARNMEXT)=DEBENDCC;/* COPY END CC O EX */
         LR    @15,ACQPTR                                          0352
         AL    @15,@TF00001                                        0352
         MVC   ACQCC2-4(2,@15),DEBENDCC(EXTENTS)                   0352
*                     END;          /* END COPY NEW CYL EXTENTS      */
*                   IF ARNMEXT=16 THEN/* ONLY 16 EXTENTS IN AN ACQ LS*/
@RF00348 CLI   ARNMEXT(ACQPTR),16                                  0354
         BNE   @RF00354                                            0354
*                     DO;           /* SET LIST FULL AND GET NEW LST */
*                       ACQFULL=ON; /* INDICATE THIS LIST IS FULL    */
         OI    ACQFULL(ACQPTR),B'10000000'                         0356
*                       CALL GETLIST;/* GET NEW LIST IF THIS ONE FULL*/
         BAL   @14,GETLIST                                         0357
*                     END;          /* END IF LIST IS FULL           */
*                 END;              /* END COPY EXTENTS TO LIST      */
@RF00354 DS    0H                                                  0360
*               EXTENTS=EXTENTS+LENGTH(DEBDASD);/* INCR EXTENTS      */
@RF00346 LA    EXTENTS,16(,EXTENTS)                                0360
*             END;                  /* END PROCESSING THIS DEB       */
         LA    INDEX,1(,INDEX)                                     0361
@DE00345 L     @15,AMBDEBPT(,RAMB)                                 0361
         SLR   @11,@11                                             0361
         IC    @11,DEBNMEXT(,@15)                                  0361
         CR    INDEX,@11                                           0361
         BNH   @DL00345                                            0361
*           END;                    /* END NORMAL FULL DEB CASE      */
*       END;                        /* END IF NOT CYLINDER FAULT     */
@RC00307 DS    0H                                                  0364
*     CALL GETAMB;                  /* GET THE NEXT AMB OR ZERO      */
@RF00298 BAL   @14,GETAMB                                          0364
*   END;                            /* END PROCESSING ALL AMBS       */
@DE00294 LTR   RAMB,RAMB                                           0365
         BNZ   @DL00294                                            0365
*   RET=BLDASAVE;                   /* RESTORE RETURN REG            */
         L     RET,BLDASAVE                                        0366
*   RETURN;                         /* RETURN TO THE CALLER          */
@EL00003 DS    0H                                                  0367
@EF00003 DS    0H                                                  0367
@ER00003 BR    @14                                                 0367
*   RESPECIFY                                                      0368
*    (EXTENTS,                                                     0368
*     RXTNT,                                                       0368
*     INDEX) UNRESTRICTED;          /* FREE UP REGS                  */
*   END BLDACQL;                    /* END OF BUILDING ACQUIRE LISTS */
*GETLIST:                           /* BUILD A SKELETON ACQUIRE LIST */
*                                                                  0370
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE GETS CORE FOR AN ACQUIRE LIST AND INITIALIZES IT */
*   /* AS AN ACQUIRE OR RELINQUISH LIST AND CHAINS IT FORM ACQBASE IN*/
*   /* THE TABLE OF ACQUIRE LISTS OR ON THE END OF A CHAIN. * * THE  */
*   /* ACQUIRE RELINQUISH LIST IS THE THE FOLLOWING FORM * * ACQFCHN */
*   /* FORWARD CHAIN OF ALL LISTS IN CHAIN* * ACQCHAIN LOOP CHAIN OF */
*   /* WAIT AND NON WAIT LST* * ACQFLAGS WORD OF FLAGS DISCRIBING    */
*   /* LIST * * BASIC ACQUIRE RELINQUISH PARAMETER LIST * *          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0370
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0370
GETLIST  DS    0H                                                  0371
*   RESPECIFY                                                      0371
*    (INDEX,                                                       0371
*     COREPTR) RESTRICTED;          /* RESTRICT NEED REGS            */
*   GETLSAVE=RET;                   /* SAVE RETURN REG               */
         ST    RET,GETLSAVE                                        0372
*   ACQSAVE=ACQPTR;                 /* SAVE CURRENT ACQPTR           */
         ST    ACQPTR,ACQSAVE                                      0373
*   MAINLEN=LENGTH(ACQINIT)+8;      /* GET NEEDED LENGTH             */
         MVC   MAINLEN(3),@CF03097+1                               0374
*   ACQCORE=ON;                     /* INDICATE CORE FOR ACQ LIST    */
         OI    ACQCORE,B'00000010'                                 0375
*   CALL GETMAIN;                   /* USE COMMON GETMAIN RTN        */
         BAL   @14,GETMAIN                                         0376
*   IF PDPCODE=PP1 THEN             /* IF NO CORE THEN PROCESS ALL   */
         LA    @15,ERRORWD                                         0377
         CLI   PDPCODE(@15),20                                     0377
         BNE   @RF00377                                            0377
*     DO;                           /* LISTS AND THEN TRY AGAIN      */
*       PDPCODE=0;                  /* CLEAR ERROR CODE FOR RETRY    */
         MVI   PDPCODE(@15),X'00'                                  0379
*       ACQPTR=FIRSTACQ;            /* POINT TO FIRST LIST ON CHAIN  */
         L     ACQPTR,FIRSTACQ                                     0380
*       CALL STAGIT;                /* GOT STAGE ALL LISTS           */
         BAL   @14,STAGIT                                          0381
*       DO INDEX=1 TO LISTCNT;      /* ZERO ALL OLD ACQ LIST PTRS    */
         LA    INDEX,1                                             0382
         B     @DE00382                                            0382
@DL00382 DS    0H                                                  0383
*         ACQBASE(INDEX)=0;         /* CLEAR ALL OLD PTRS            */
         LR    @15,INDEX                                           0383
         SLA   @15,3                                               0383
         SLR   @11,@11                                             0383
         L     @09,DOLISTPT                                        0383
         ST    @11,ACQBASE-8(@15,@09)                              0383
*       END;                        /* END CLEAR OLD ACQBASE PTRS    */
*                                                                  0384
         AL    INDEX,@CF00062                                      0384
@DE00382 CR    INDEX,LISTCNT                                       0384
         BNH   @DL00382                                            0384
*       /*************************************************************/
*       /*                                                           */
*       /* ALL OF THE OLD ACQUIRE LISTS MUST NOW BE FREED. AFTERWORDS*/
*       /* A SECOND ATTEMPT WILL BE MADE TO GETMAIN FOR A NEW LIST   */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0385
*       COREPTR=COREBASE;           /* GET FIRST CORE IN CHAIN       */
         L     COREPTR,COREBASE                                    0385
*       PREVCORE=COREPTR;           /* INIT PREV COREPTR             */
         ST    COREPTR,PREVCORE                                    0386
*       DO WHILE COREPTR^=0;        /* PROCESS ALL CORE ON CHAIN     */
         B     @DE00387                                            0387
@DL00387 DS    0H                                                  0388
*         IF COREACQ=ON THEN        /* CHECK IF ACQUIRE LIST         */
         TM    COREACQ(COREPTR),B'10000000'                        0388
         BNO   @RF00388                                            0388
*           DO;                     /* UNCHAIN AND FREE LIST         */
*             PREVCORE->CORECHN=CORECHN;/* UNCHAIN CORE              */
         L     @15,CORECHN(,COREPTR)                               0390
         L     @11,PREVCORE                                        0390
         ST    @15,CORECHN(,@11)                                   0390
*             R0=CORELEN;           /* GET LENGTH FROM CORE HEADR    */
         LH    R0,CORELEN(,COREPTR)                                0391
*             R1=COREPTR;           /* POINT TO CORE FOR FREEMAIN    */
         LR    R1,COREPTR                                          0392
*             COREPTR=CORECHN;      /* POINT TO NEXT CORE BEFORE FRE */
         LR    COREPTR,@15                                         0393
*             GEN(FREEMAIN  R,LV=(0),A=(1));/* FREE OLD ACQ LIST     */
         FREEMAIN  R,LV=(0),A=(1)
*           END;                    /* END IF ACQUIRE LIST FOUND     */
*         ELSE                      /* THIS IS NOT AN ACQUIRE LIST   */
*           DO;                     /* NORMAL NON ACQUIRE LIST       */
         B     @RC00388                                            0396
@RF00388 DS    0H                                                  0397
*             PREVCORE=COREPTR;     /* CURRENT BECOMES PREVIOUS      */
         ST    COREPTR,PREVCORE                                    0397
*             COREPTR=CORECHN;      /* NEXT BECORES CURRENT          */
         L     COREPTR,CORECHN(,COREPTR)                           0398
*           END;                    /* NORMAL INCREMENT ON CHAIN     */
*       END;                        /* END FREE CORE LOOP            */
@RC00388 DS    0H                                                  0400
@DE00387 SLR   @15,@15                                             0400
         CR    COREPTR,@15                                         0400
         BNE   @DL00387                                            0400
*       FIRSTACQ=0;                 /* INDICATE FIRST ACQUIRE LIST   */
         ST    @15,FIRSTACQ                                        0401
*       LISTOTAL=0;                 /* ZERO COUNT OF LISTS           */
         ST    @15,LISTOTAL                                        0402
*       MAINLEN=LENGTH(ACQINIT)+8;  /* GET NEEDED LENGTH AGAIN       */
         MVC   MAINLEN(3),@CF03097+1                               0403
*       ACQCORE=ON;                 /* INDICATE ACQUIRE LIST         */
         OI    ACQCORE,B'00000010'                                 0404
*       CALL GETMAIN;               /* TRY GETCORE AGAIN             */
         BAL   @14,GETMAIN                                         0405
*       IF PDPCODE=PP1 THEN         /* GIVE UP THIS TIME IF ERROR    */
         LA    @15,ERRORWD                                         0406
         CLI   PDPCODE(@15),20                                     0406
         BE    @RT00406                                            0406
*         GOTO EXIT;                /* EXIT NO CAN DO                */
*     END;                          /* END RECOVERY ON NO CORE ERR   */
*   ACQPTR=COREPTR;                 /* POINT TO RETURNED CORE        */
@RF00377 LR    ACQPTR,COREPTR                                      0409
*   LISTOTAL=LISTOTAL+1;            /* INCR COUNT OF TOTAL LIST      */
         LA    @15,1                                               0410
         AL    @15,LISTOTAL                                        0410
         ST    @15,LISTOTAL                                        0410
*   ACQINIT=ACQINIT&&ACQINIT;       /* CLEAR THE NEW LIST            */
         XC    ACQINIT(96,ACQPTR),ACQINIT(ACQPTR)                  0411
*   EXTENSON=EXTENSON&&EXTENSON;    /* CLEAR LIST EXTENSION          */
         XC    EXTENSON(9,ACQPTR),EXTENSON(ACQPTR)                 0412
*   IF VIRTACQ=OFF THEN             /* IS THIS AN RELINQUISH REQUEST */
         TM    VIRTACQ(PARMPTR),B'10000000'                        0413
         BNZ   @RF00413                                            0413
*     AROP=4;                       /* INDICATE RELINQUISH REQUEST   */
         MVI   AROP(ACQPTR),X'04'                                  0414
*   ELSE                                                           0415
*     AROP=2;                       /* INDICATE ACQUIRE LIST         */
         B     @RC00413                                            0415
@RF00413 MVI   AROP(ACQPTR),X'02'                                  0415
*   ARLL=LENGTH(ACQINIT);           /* PUT LENGTH INTO LIST          */
@RC00413 MVC   ARLL(4,ACQPTR),@CF03093                             0416
*   RUCB=LISTUCB(LISTCNT);          /* GET UCB FOR THIS LIST         */
         LR    @15,LISTCNT                                         0417
         SLA   @15,3                                               0417
         L     @09,DOLISTPT                                        0417
         AL    @09,@CF03528                                        0417
         L     RUCB,LISTUCB-4(@15,@09)                             0417
*   ARVOL=UCBVOLI;                  /* COPY VOLID FROM UCB INTO LIST */
         MVC   ARVOL(6,ACQPTR),UCBVOLI(RUCB)                       0418
*   CALL SELOPTNS;                  /* GO CALC OPTIONS NEEDED        */
         BAL   @14,SELOPTNS                                        0419
*   ARFLG=AMBDISP;                  /* COPY OPTIONS FOR THIS AMB     */
         MVC   ARFLG(1,ACQPTR),AMBDISP                             0420
*   IF ARDRES=ON THEN               /* IS WAIT OPTION SELECTED       */
         TM    ARDRES(ACQPTR),B'01000000'                          0421
         BNO   @RF00421                                            0421
*     ARECB=ADDR(RELECB);           /* POINT TO ECB IF WAIT OPT      */
*                                                                  0422
         LA    @15,RELECB(,ACQPTR)                                 0422
         ST    @15,ARECB(,ACQPTR)                                  0422
*   /*****************************************************************/
*   /*                                                               */
*   /* THE NEW ACQUIRE LIST MUST BE PUT ON THE FRONT OF THE CHAIN OF */
*   /* LISTS, AND THE OLD CHAIN MUST BE CHAINED OFF THE THE NEW LIST */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0423
*   IF FIRSTACQ=0 THEN              /* CHECK IF FIRST TIME ENTERED   */
@RF00421 L     @15,FIRSTACQ                                        0423
         LTR   @15,@15                                             0423
         BNZ   @RF00423                                            0423
*     FIRSTACQ=ACQPTR;              /* SETUP FIRST ACQ LIST PTR      */
         ST    ACQPTR,FIRSTACQ                                     0424
*   ELSE                            /* THIS IS NOT FORST, MUST CHAIN */
*     ACQSAVE->ARNEDB=ACQPTR;       /* ADD LIST TO END OF CHAIN      */
         B     @RC00423                                            0425
@RF00423 L     @15,ACQSAVE                                         0425
         ST    ACQPTR,ARNEDB(,@15)                                 0425
*   IF ACQBASE(LISTCNT)=0 THEN      /* FIRST TIME FOR THIS UCB       */
@RC00423 L     @15,DOLISTPT                                        0426
         LR    @11,LISTCNT                                         0426
         SLA   @11,3                                               0426
         L     @09,ACQBASE-8(@11,@15)                              0426
         LTR   @09,@09                                             0426
         BNZ   @RF00426                                            0426
*     ACQBASE(LISTCNT)=ACQPTR;      /* SETUP FIRST LIST FOR UCB      */
         ST    ACQPTR,ACQBASE-8(@11,@15)                           0427
*   RET=GETLSAVE;                   /* RESTORE RETURN REG            */
@RF00426 L     RET,GETLSAVE                                        0428
*   RETURN;                         /* RETURN TO CALLER              */
@EL00004 DS    0H                                                  0429
@EF00004 DS    0H                                                  0429
@ER00004 BR    @14                                                 0429
*   RESPECIFY                                                      0430
*    (INDEX,                                                       0430
*     COREPTR) UNRESTRICTED;        /* FREEUP USED REGS              */
*   END GETLIST;                    /* END OF GET AN ACQUIRE LIST    */
*BLDUCBL:                           /* BUILD LIST OF UCBS            */
*                                                                  0432
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE GETS CORE FOR A UCB LIST AND AN ACQUIRE BASE     */
*   /* POINTERS LIST BASED ON THE COUNT OF UCBS TO BE STAGED         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0432
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0432
BLDUCBL  DS    0H                                                  0433
*   RESPECIFY                                                      0433
*    (RTIOT,                                                       0433
*     RUCB,                                                        0433
*     INDEX) RESTRICTED;            /* RESTRICT NEEDED REGS          */
*   BLDUSAVE=RET;                   /* SAVE RETURN REG               */
         ST    RET,BLDUSAVE                                        0434
*   PDPFUNC=FUNC41;                 /* INDICATE BUILD UCB LIST       */
         LA    @15,ERRORWD                                         0435
         MVI   PDPFUNC(@15),X'29'                                  0435
*   MAINLEN=LISTCNT*8+LENGTH(LISTHDR);/* LENGTH OF NEEDED CORE       */
         LR    @15,LISTCNT                                         0436
         SLA   @15,3                                               0436
         LA    @15,4(,@15)                                         0436
         STCM  @15,7,MAINLEN                                       0436
*   CALL GETMAIN;                   /* USE COMMON GETMAIN RTN        */
         BAL   @14,GETMAIN                                         0437
*   IF PDPCODE=PP1 THEN             /* CHECK OF GETMAIN SUCCESSFUL   */
         LA    @15,ERRORWD                                         0438
         CLI   PDPCODE(@15),20                                     0438
         BE    @RT00438                                            0438
*     GOTO EXIT;                    /* GIVEUP AND RETURN             */
*   DOLISTPT=COREPTR;               /* POINT TO GOTTEN CORE          */
         ST    COREPTR,DOLISTPT                                    0440
*   COUNT=0;                        /* INITIALIZE COUNT              */
         L     @15,DOLISTPT                                        0441
         SLR   @11,@11                                             0441
         STH   @11,COUNT(,@15)                                     0441
*   CONCEND=OFF;                    /* INITIAL CONCATENTION OFF      */
         NI    CONCEND,B'11101111'                                 0442
*   IF VIRTBUCB=ON×                 /* NO SCAN TIOENTRY IF ONE UCB   */
*       VIRTBEXT=ON THEN            /* EOV BY EXTENT IS ALSO ONE     */
         TM    VIRTBUCB(PARMPTR),B'00001100'                       0443
         BZ    @RF00443                                            0443
*     DO;                           /* IF VALID UCB THEN OK          */
*       RUCB=VIRTUCB;               /* POINT TO PASSED UCB           */
         L     RUCB,VIRTUCB(,PARMPTR)                              0445
*       IF UCB2OPT4=ON&             /* IF THIS IS VIRTUAL DEV        */
*           UCBVOLI^='000000000000'X THEN/* VALID VOLID              */
         TM    UCB2OPT4(RUCB),B'00001000'                          0446
         BNO   @RF00446                                            0446
         CLC   UCBVOLI(6,RUCB),@CB03499                            0446
         BE    @RF00446                                            0446
*         DO;                       /* GET VALID UCB IN LIST         */
*           COUNT=1;                /* INDICATE ONE VALID UCB        */
         LA    @11,1                                               0448
         STH   @11,COUNT(,@15)                                     0448
*           LISTUCB(COUNT)=RUCB;    /* POINT TO PASSED UCB           */
         SLA   @11,3                                               0449
         AL    @15,@CF03528                                        0449
         ST    RUCB,LISTUCB-4(@11,@15)                             0449
*         END;                      /* END VALID ONE UCB CASE        */
*     END;                          /* END ONE UCB CASE              */
*   ELSE                            /* THE TIOENTRY MUST BE SCANNED  */
*     DO;                           /* FOR UCBS              @Y30LSSM*/
         B     @RC00443                                            0452
@RF00443 DS    0H                                                  0453
*       DSABPTR=FSTDSAB;            /* GET FIRST DSAB        @Y30LSSM*/
         L     @15,FSTDSAB                                         0453
         ST    @15,DSABPTR                                         0453
*       RTIOT=DSABTIOT;             /* FIRST TIOT ENTRY      @Y30LSSM*/
         L     RTIOT,DSABTIOT(,@15)                                0454
*       DO WHILE CONCEND=OFF;       /* PROCESS ALL ALLOCATED UCBS    */
         B     @DE00455                                            0455
@DL00455 DS    0H                                                  0456
*         LISTCNT=(TIOELNGH-16)/4;  /* GET NUMBER OF ENTRIES         */
         SLR   @00,@00                                             0456
         IC    @00,TIOELNGH(,RTIOT)                                0456
         SL    @00,@CF00078                                        0456
         SRDA  @00,32                                              0456
         D     @00,@CF00066                                        0456
         LR    LISTCNT,@01                                         0456
*         DO INDEX=1 TO LISTCNT;    /* PROCESS ALL ENTRIES IN ENTRY  */
         LA    INDEX,1                                             0457
         B     @DE00457                                            0457
@DL00457 DS    0H                                                  0458
*           RUCB=TIOEFSRT;          /* GET UCB FROM TIOT             */
         L     RUCB,TIOEFSRT-1(,RTIOT)                             0458
         LA    RUCB,0(,RUCB)                                       0458
*           IF UCB2OPT4=ON&         /* CHECK IF VIRTUAL UCB          */
*               UCBVOLI^='000000000000'X THEN/* CHECK IF MOUNTED     */
         TM    UCB2OPT4(RUCB),B'00001000'                          0459
         BNO   @RF00459                                            0459
         CLC   UCBVOLI(6,RUCB),@CB03499                            0459
         BE    @RF00459                                            0459
*             DO;                   /* PUT UCB IN LIST IF OK         */
*               DUPBIT=OFF;         /* INIT AS NO DUPLICATE          */
         NI    DUPBIT,B'11110111'                                  0461
*               DO INDEX2=1 TO INDEX;/* CHECK ALL PREV UCB ENTRY     */
         LA    @15,1                                               0462
         B     @DE00462                                            0462
@DL00462 DS    0H                                                  0463
*                 IF LISTUCB(INDEX2)=RUCB THEN/* CHECK FOR DUP       */
         SLA   @15,3                                               0463
         L     @11,DOLISTPT                                        0463
         AL    @11,@CF03528                                        0463
         C     RUCB,LISTUCB-4(@15,@11)                             0463
         BNE   @RF00463                                            0463
*                   DUPBIT=ON;      /* INDICATE DUPLICATE UCB        */
         OI    DUPBIT,B'00001000'                                  0464
*               END;                /* END OF DUPLICATE SEARCH       */
@RF00463 LA    @15,1                                               0465
         AL    @15,INDEX2                                          0465
@DE00462 ST    @15,INDEX2                                          0465
         CR    @15,INDEX                                           0465
         BNH   @DL00462                                            0465
*               IF DUPBIT=OFF THEN  /* ADD UNIQUE VIRTUAL UCB        */
         TM    DUPBIT,B'00001000'                                  0466
         BNZ   @RF00466                                            0466
*                 DO;               /* ADD UCB AND INCR COUNT        */
*                   COUNT=COUNT+1;  /* INCR COUNT OF OK UCBS         */
         L     @15,DOLISTPT                                        0468
         LA    @11,1                                               0468
         AH    @11,COUNT(,@15)                                     0468
         STH   @11,COUNT(,@15)                                     0468
*                   LISTUCB(COUNT)=RUCB;/* GET UCB FRM TIOT ENTRY    */
         SLA   @11,3                                               0469
         AL    @15,@CF03528                                        0469
         ST    RUCB,LISTUCB-4(@11,@15)                             0469
*                 END;              /* END ADD VIRTUAL UCB TO LIST   */
*             END;                  /* END GET VALID UCB IN LST      */
@RF00466 DS    0H                                                  0472
*           RTIOT=RTIOT+4;          /* INCR TO NEXT TIOT UCB         */
@RF00459 LA    RTIOT,4(,RTIOT)                                     0472
*         END;                      /* END PROCESSING A TIOT ENTRY   */
         LA    INDEX,1(,INDEX)                                     0473
@DE00457 CR    INDEX,LISTCNT                                       0473
         BNH   @DL00457                                            0473
*         IF DSABFCHN=0×            /* NO MORE DDNAMES       @Y30LSSM*/
*             DSABFCHN->DSABTIOT->TIOEDDNM='        ' THEN/* NO    0474
*                                      CONCATENATION         @Y30LSSM*/
         L     @15,DSABPTR                                         0474
         L     @15,DSABFCHN(,@15)                                  0474
         LTR   @15,@15                                             0474
         BZ    @RT00474                                            0474
         L     @15,DSABTIOT(,@15)                                  0474
         CLC   TIOEDDNM(8,@15),@CC03473                            0474
         BNE   @RF00474                                            0474
@RT00474 DS    0H                                                  0475
*           CONCEND=ON;             /* INDICATE STOP GETTING UCBS    */
         OI    CONCEND,B'00010000'                                 0475
*         ELSE                      /* PROCESS               @Y30LSSM*/
*           DO;                     /* ANOTHER DSAB          @Y30LSSM*/
         B     @RC00474                                            0476
@RF00474 DS    0H                                                  0477
*             DSABPTR=DSABFCHN;     /* GET NEXT DSAB         @Y30LSSM*/
         L     @15,DSABPTR                                         0477
         L     @15,DSABFCHN(,@15)                                  0477
         ST    @15,DSABPTR                                         0477
*             RTIOT=DSABTIOT;       /* NEXT TIOT ENTRY       @Y30LSSM*/
         L     RTIOT,DSABTIOT(,@15)                                0478
*           END;                    /* END GETTING TIOT      @Y30LSSM*/
*       END;                        /* END PROCESSING ALL TIOENTRYS  */
@RC00474 DS    0H                                                  0480
@DE00455 TM    CONCEND,B'00010000'                                 0480
         BZ    @DL00455                                            0480
*     END;                          /* END TIOT SCAN         @Y30LSSM*/
*   LISTCNT=COUNT;                  /* SET LISTCNT EQUAL TO VIRT UCB */
@RC00443 L     @15,DOLISTPT                                        0482
         LH    LISTCNT,COUNT(,@15)                                 0482
*   RET=BLDUSAVE;                   /* RESTORE RETURN REG            */
         L     RET,BLDUSAVE                                        0483
*   RETURN;                         /* RETURN TO THE CALLER          */
@EL00005 DS    0H                                                  0484
@EF00005 DS    0H                                                  0484
@ER00005 BR    @14                                                 0484
*   RESPECIFY                                                      0485
*    (RTIOT,                                                       0485
*     RUCB,                                                        0485
*     INDEX) UNRESTRICTED;          /* FREE UP REGS                  */
*   END BLDUCBL;                    /* END OF THIS ROUTINE           */
*GETAMB:                                                           0487
*                                                                  0487
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE GETS THE NEXT AMB OR ZERO FOR THE CALLER. IT ALSO*/
*   /* SETS THE AMBLSTAG BIT INDICATING THAT ALL OF THE EXTENTS      */
*   /* ASSOCIATED WITH A PARTICULAR AMBL HAVE BEEN STAGED            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0487
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0487
GETAMB   DS    0H                                                  0488
*   GETASAVE=RET;                   /* SAVE RETURN REG               */
         ST    RET,GETASAVE                                        0488
*   IF LASTAMB=ON THEN              /* CHECK IF LAST HAS BEEN FOUND  */
         TM    LASTAMB,B'00100000'                                 0489
         BNO   @RF00489                                            0489
*     DO;                           /* SETUP LAST INDICATORS         */
*       RAMB=0;                     /* INDICATE NO MORE AMBS         */
         SLR   RAMB,RAMB                                           0491
*       IF VIRTACQ=ON&              /* IS THIS AN ACQUIRE REQUEST    */
*           VIRTBACB=ON THEN        /* IS THIS A COMPLETE ACB REQST  */
         TM    VIRTACQ(PARMPTR),B'10010000'                        0492
         BNO   @RF00492                                            0492
*         AMBLSTAG=ON;              /* INDICATE THIS AMBL STAGED     */
         L     @15,VIRTACB(,PARMPTR)                               0493
         L     @15,ACBAMBL(,@15)                                   0493
         OI    AMBLSTAG(@15),B'00010000'                           0493
*     END;                          /* THE LAST AMB INDICATORS ARE   */
*                                                                  0494
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE LAST AMB WAS NOT PREVIOUSLY RETURNED, THEN AN AMB MUST */
*   /* BE RETURNED TO THE CALLER                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0495
*   ELSE                            /* AN AMB MUST BE RETURNED       */
*     DO;                           /* GO GET THE AMB                */
         B     @RC00489                                            0495
@RF00489 DS    0H                                                  0496
*       IF VIRTBEXT=ON THEN         /* AMB IS PASSED IF BY EXTENT RE */
         TM    VIRTBEXT(PARMPTR),B'00000100'                       0496
         BNO   @RF00496                                            0496
*         DO;                       /* GET PASSED AMB AND SET LAST   */
*           RAMB=VIRTACB;           /* GET PASSED AMB                */
         L     RAMB,VIRTACB(,PARMPTR)                              0498
*           LASTAMB=ON;             /* INDICATE NO MORE AMBS         */
         OI    LASTAMB,B'00100000'                                 0499
*         END;                      /* END OF BY EXTENT CASE         */
*       ELSE                        /* AN ACB WAS PASSED. GET AMBS   */
*         DO;                       /* GET INDEX AND DATA AMBS       */
         B     @RC00496                                            0501
@RF00496 DS    0H                                                  0502
*           IF FIRST=OFF THEN       /* IS THIS THE FIRST TIME        */
         TM    FIRST,B'00000100'                                   0502
         BNZ   @RF00502                                            0502
*             DO;                   /* PROCESS FIRST TIME REQUEST    */
*               IF AMBLNUM=1 THEN   /* CK IS ESDS                    */
         L     @15,VIRTACB(,PARMPTR)                               0504
         L     @15,ACBAMBL(,@15)                                   0504
         CLC   AMBLNUM(2,@15),@CH00062                             0504
         BNE   @RF00504                                            0504
*                 DO;               /* ONLY ONE AMB IF ESDS          */
*                   RAMB=AMBLDTA;   /* GET THE DATA AMB              */
         L     RAMB,AMBLDTA(,@15)                                  0506
*                   LASTAMB=ON;     /* IND NO MORE AMBS              */
         OI    LASTAMB,B'00100000'                                 0507
*                 END;              /* END IF ESDS DATA SET          */
*               ELSE                /* THIS IS A KSDS                */
*                 RAMB=AMBLIX;      /* GET INDEX AMB FIRST           */
         B     @RC00504                                            0509
@RF00504 L     @15,VIRTACB(,PARMPTR)                               0509
         L     @15,ACBAMBL(,@15)                                   0509
         L     RAMB,AMBLIX(,@15)                                   0509
*               FIRST=ON;           /* INDICATE FIRST REQUEST DONE   */
@RC00504 OI    FIRST,B'00000100'                                   0510
*             END;                  /* END FIRST TIME GET INDEX AMB  */
*           ELSE                    /* THE INDEX AMB HAS BEEN PASSED */
*             DO;                   /* PASS DATA IF NOT SEQ WITH DAT */
         B     @RC00502                                            0512
@RF00502 DS    0H                                                  0513
*               IF AMDSDT=ON THEN   /* IS SEQ WITH DATA THEN DONE    */
         L     @15,AMBDSB(,RAMB)                                   0513
         TM    AMDSDT(@15),B'00100000'                             0513
         BNO   @RF00513                                            0513
*                 DO;               /* THIS IS THE LAST TIME ENTERED */
*                   RAMB=0;         /* INDICATE NO MORE AMBS         */
         SLR   RAMB,RAMB                                           0515
*                   IF VIRTACQ=ON&  /* CHECK IF ACQUIRE REQUEST      */
*                       VIRTBACB=ON THEN/* IS COMPLETE CLUSTER REQ   */
         TM    VIRTACQ(PARMPTR),B'10010000'                        0516
         BNO   @RF00516                                            0516
*                     AMBLSTAG=ON;  /* INDICATE THE AMBL IS STAGED   */
         L     @15,VIRTACB(,PARMPTR)                               0517
         L     @15,ACBAMBL(,@15)                                   0517
         OI    AMBLSTAG(@15),B'00010000'                           0517
*                 END;              /* END IF SEQ WITH DATA AND LAST */
*               ELSE                /* THIS IS NOT SEQ WITH DATA     */
*                 DO;               /* RETURN DATA AMB TO CALLER     */
         B     @RC00513                                            0519
@RF00513 DS    0H                                                  0520
*                   RAMB=AMBLDTA;   /* GET DATA AMB                  */
         L     @15,VIRTACB(,PARMPTR)                               0520
         L     @15,ACBAMBL(,@15)                                   0520
         L     RAMB,AMBLDTA(,@15)                                  0520
*                   LASTAMB=ON;     /* INDICATE NO MORE AMBS IN AMBL */
         OI    LASTAMB,B'00100000'                                 0521
*                 END;              /* END SEPARATE DATA AND INDEX   */
*             END;                  /* END IF NOT FIRST TIME FR AMBL */
@RC00513 DS    0H                                                  0524
*         END;                      /* END IFNOT BY EXTENT CASE      */
@RC00502 DS    0H                                                  0525
*     END;                          /* END IF LASTAMB BIT NOT ON     */
@RC00496 DS    0H                                                  0526
*   IF RAMB^=0 THEN                 /* IF AN AMB WAS FOUND THEN      */
@RC00489 LTR   RAMB,RAMB                                           0526
         BZ    @RF00526                                            0526
*     CALL SELOPTNS;                /* THE NECESSARY OPTIONS SET     */
         BAL   @14,SELOPTNS                                        0527
*   RET=GETASAVE;                   /* RESTORE RETURN REG            */
@RF00526 L     RET,GETASAVE                                        0528
*   RETURN;                         /* RETURN TO CALLER WITH AMB     */
@EL00006 DS    0H                                                  0529
@EF00006 DS    0H                                                  0529
@ER00006 BR    @14                                                 0529
*   END GETAMB;                     /* END OF GETAMB ROUTINE         */
*GETMAIN:                                                          0531
*                                                                  0531
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION  - OBTAINS STORAGE                                    */
*/*   INPUT -     1. AMOUNT OF STORAGE REQUESTED IN MAINLEN          */
*/*   OUTPUT  -   1. ADDRESS OF AREA OBTAINED IN MAINADDR            */
*/*                                                                  */
*/********************************************************************/
*                                                                  0531
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0531
GETMAIN  DS    0H                                                  0532
*   RESPECIFY                                                      0532
*     COREPTR RESTRICTED;           /* RESTRICT NEEDED REGS          */
*   RSAVLF=RET;                     /* SAVE RETURN ADDRESS           */
         ST    RET,RSAVLF                                          0533
*   RESPECIFY                                                      0534
*    (R0,                                                          0534
*     R1,                                                          0534
*     R6,                                                          0534
*     R7,                                                          0534
*     R8,                                                          0534
*     R9) RESTRICTED;                                              0534
*   GEN(STM R6,R9,MAINSAVE)                                        0535
*   NOSETS;                         /* SAVE REGISTERS                */
         STM R6,R9,MAINSAVE
*   R7=MAINLEN+LENGTH(COREHDR);     /* LOAD NUMBER OF BYTES REQD     */
         L     @15,MAINLEN-1                                       0536
         LA    @15,8(,@15)                                         0536
         LR    R7,@15                                              0536
*   RESPECIFY                                                      0537
*     RETCODE RESTRICTED;                                          0537
*   GEN(GETMAIN EC,LV=(R7),A=MAINADDR,SP=0,MF=(E,MAINWORK))        0538
*   SETS(RETCODE);                                                 0538
         GETMAIN EC,LV=(R7),A=MAINADDR,SP=0,MF=(E,MAINWORK)
*   IF RETCODE=0 THEN               /* IF GETMAIN SUCCESSFUL         */
         LTR   RETCODE,RETCODE                                     0539
         BNZ   @RF00539                                            0539
*     DO;                           /* GETMAIN SUCCESSFUL            */
*       R6=MAINADDR;                /* POINT TO BLOCK                */
         L     R6,MAINADDR                                         0541
*       R9=0;                       /* ZERO PAD CHARACTER            */
         SLR   R9,R9                                               0542
*       GEN(MVCL R6,R8)                                            0543
*       NOSETS;                     /* ZERO BLOCK                    */
         MVCL R6,R8
*     END;                          /* END GOOD GETMAIN              */
*   ELSE                            /* IF GETMAIN FAILED             */
*     DO;                           /* GETMAIN FAILED                */
         B     @RC00539                                            0545
@RF00539 DS    0H                                                  0546
*       PDPCODE=PP1;                /* SET ERROR CODE                */
         LA    @04,ERRORWD                                         0546
         MVI   PDPCODE(@04),X'14'                                  0546
*       RET=RSAVLF;                 /* GET RETURN REG                */
         L     RET,RSAVLF                                          0547
*       RETURN;                     /* RETURN TO CALLER WITH ERROR   */
@EL00007 DS    0H                                                  0548
@EF00007 DS    0H                                                  0548
@ER00007 BR    @14                                                 0548
*     END;                          /* END BAD GETMAIN               */
*                                                                  0549
*   /*****************************************************************/
*   /*                                                               */
*   /* THE GOTTEN CORE MUST BE PUT ON THE CHAIN OF GOTTEN CORE       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0550
*   COREPTR=MAINADDR;               /* POINT TO GOTTEN CORE          */
@RC00539 L     COREPTR,MAINADDR                                    0550
*   CORECHN=COREBASE;               /* CHAIN OLD CHAIN TO NEW CORE   */
         L     @04,COREBASE                                        0551
         ST    @04,CORECHN(,COREPTR)                               0551
*   COREBASE=COREPTR;               /* POINT BASE TO NEW CORE        */
         ST    COREPTR,COREBASE                                    0552
*   CORELEN=MAINLEN+LENGTH(COREHDR);/* PUT LENGTH IN HEADER          */
         LA    @04,8                                               0553
         L     @11,MAINLEN-1                                       0553
         LA    @11,0(,@11)                                         0553
         ALR   @04,@11                                             0553
         STH   @04,CORELEN(,COREPTR)                               0553
*   IF ACQCORE=ON THEN              /* CHECK IF SPECIAL ACQUIRE LIST */
         TM    ACQCORE,B'00000010'                                 0554
         BNO   @RF00554                                            0554
*     DO;                           /* INDICATE ACQUIRE LIST         */
*       COREACQ=ON;                 /* SET ACQUIRE LIST INDICATOR    */
         OI    COREACQ(COREPTR),B'10000000'                        0556
*       ACQCORE=OFF;                /* TURN OFF ACQUIRE FLAG INPUT   */
         NI    ACQCORE,B'11111101'                                 0557
*     END;                          /* END SPECIAL PROCESS FOR ACQ   */
*   COREPTR=COREPTR+LENGTH(COREHDR);/* POINT TO CALLER CORE          */
@RF00554 LA    COREPTR,8(,COREPTR)                                 0559
*   RESPECIFY                                                      0560
*    (R0,                                                          0560
*     R1,                                                          0560
*     R6,                                                          0560
*     R7,                                                          0560
*     R8,                                                          0560
*     R9,                                                          0560
*     RETCODE) UNRESTRICTED;                                       0560
*   GEN(LM R6,R7,MAINSAVE)                                         0561
*   NOSETS;                         /* RESTORE REGISTERS             */
         LM R6,R7,MAINSAVE
*   RET=RSAVLF;                     /* RESTORE RETURN ADDRESS        */
         L     RET,RSAVLF                                          0562
*   RETURN;                         /* RETURN WITH CORE IN COREPTR   */
         B     @EL00007                                            0563
*   RESPECIFY                                                      0564
*     COREPTR UNRESTRICTED;         /* FREE UP REGS                  */
*   END GETMAIN;                                                   0565
*SELOPTNS:                          /* SELECT ACQ AND REL OPTIONS    */
*                                                                  0566
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE SELECTS THE OPTIONS THAT THE ACQUIRE OR          */
*   /* RELINQUISH REQUEST MUST HAVE FOR A GIVED AMB AND FOR A GIVEN  */
*   /* SET OF OPTIONS SPECIFIED BY THE CALLER. THIS ROUTINE IS CALLED*/
*   /* BY GETLIST TO FILL IN THE ACQ REL LIST AND BY GETAMB TO BUILD */
*   /* A BYTE OF NEEDED OPTIONS TO COMPARE WITH THE OPTIONS ON THE   */
*   /* CURRENT ACQ REL LIST                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0566
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0566
SELOPTNS DS    0H                                                  0567
*   RESPECIFY                                                      0567
*     EXTENTS RESTRICTED;           /* RESTRICT NEEDED REGS FOR RTN  */
*   RESPECIFY                                                      0568
*     ACQINIT BASED(ADDR(CURRENT)); /* CURRENT AMB OPTIONS           */
*   AMBDISP=0;                      /* ZERO OUT OLD CURRENT OPTIONS  */
         MVI   AMBDISP,X'00'                                       0569
*   EXTENTS=AMBDEBAD+LENGTH(DEBBASIC)-LENGTH(DEBBASND);            0570
         L     EXTENTS,AMBDEBAD-1(,RAMB)                           0570
         LA    EXTENTS,0(,EXTENTS)                                 0570
         SL    EXTENTS,@CF03521                                    0570
*   IF VIRTINHB=ON THEN             /* CHECK IF INHIBIT STAGING ON   */
         TM    VIRTINHB(PARMPTR),B'01000000'                       0571
         BNO   @RF00571                                            0571
*     ARINH=ON;                     /* INDICATE DO NOT STAGE DATA    */
         LA    @15,CURRENT                                         0572
         OI    ARINH(@15),B'00100000'                              0572
*   IF VIRTACQ=ON&                  /* IF ACQUIRE FUNCTION           */
*       AMBCREAT=ON&                /* THIS IS A NEW DATA SET OR THIS
*                                      IS REUSABLE OPT               */
*       CYLSEEK=OFF THEN            /* DATA IS ON CYL BOUNDRYS       */
@RF00571 TM    VIRTACQ(PARMPTR),B'10000000'                        0573
         BNO   @RF00573                                            0573
         TM    AMBCREAT(RAMB),B'10000000'                          0573
         BNO   @RF00573                                            0573
         TM    CYLSEEK(EXTENTS),B'00001000'                        0573
         BNZ   @RF00573                                            0573
*     ARINH=ON;                     /* INHIBIT STAGING OF DATA       */
         LA    @15,CURRENT                                         0574
         OI    ARINH(@15),B'00100000'                              0574
*   IF AMDWAIT=ON&                  /* IF THIS IS A WAIT AFTER REL   */
*       VIRTACQ=OFF THEN            /* AND THIS IS A RELINQUISH REQ  */
@RF00573 L     @15,AMBDSB(,RAMB)                                   0575
         TM    AMDWAIT(@15),B'00010000'                            0575
         BNO   @RF00575                                            0575
         TM    VIRTACQ(PARMPTR),B'10000000'                        0575
         BNZ   @RF00575                                            0575
*     ARDRES=ON;                    /* INDICATE WAIT TYPE IF SHOULD  */
         LA    @15,CURRENT                                         0576
         OI    ARDRES(@15),B'01000000'                             0576
*   IF AMDBIND=ON&                  /* IS THIS A BIND OPTION LIST    */
*       VIRTNOUN=OFF THEN           /* CHECK IF NO UNBIND OVERIDE    */
@RF00575 L     @15,AMBDSB(,RAMB)                                   0577
         TM    AMDBIND(@15),B'00100000'                            0577
         BNO   @RF00577                                            0577
         TM    VIRTNOUN(PARMPTR),B'00100000'                       0577
         BNZ   @RF00577                                            0577
*     ARBDUBD=ON;                   /* INDICATE BIND OPTION          */
         LA    @15,CURRENT                                         0578
         OI    ARBDUBD(@15),B'10000000'                            0578
*   RETURN;                         /* RETURN TO CALLER              */
@EL00008 DS    0H                                                  0579
@EF00008 DS    0H                                                  0579
@ER00008 BR    @14                                                 0579
*   RESPECIFY                                                      0580
*     EXTENTS UNRESTRICTED;         /* FREE UP REGS USED BY RTN      */
*   RESPECIFY                                                      0581
*     ACQINIT BASED(ACQPTR);        /* RE POINT TO ACQ LIST          */
*   END SELOPTNS;                   /* END OF THIS ROUTINE           */
         B     @EL00008                                            0582
*STAGIT:                            /* STAGE DESTAGE RTN             */
*                                                                  0583
*   /*****************************************************************/
*   /*                                                               */
*   /* THIS ROUTINE ACQUIRES OR RELINQUISHES THE EXTENTS DESCRIBED IN*/
*   /* THE CHAIN OF LISTS POINTED TO BY ACQBASE. EACH CHAIN OF LISTS */
*   /* CONTAINS ALL OF THE EXTENTS ON A SINGLE UCB                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0583
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0583
STAGIT   DS    0H                                                  0584
*   RESPECIFY                                                      0584
*    (RETCODE,                                                     0584
*     INDEX) RESTRICTED;            /* RESTRICT CODE REG             */
*   STAGSAVE=RET;                   /* SAVE RETURN REG               */
         ST    RET,STAGSAVE                                        0585
*   PDPFUNC=FUNC43;                 /* INDICATE ACQUIRE RELINQ FUNC  */
         LA    @04,ERRORWD                                         0586
         MVI   PDPFUNC(@04),X'2B'                                  0586
*   IF VIRTACQ=ON THEN              /* ACQUIRE PROCESSING            */
         TM    VIRTACQ(PARMPTR),B'10000000'                        0587
         BNO   @RF00587                                            0587
*     DO;                           /* SPECIAL ACQUIRE PROCESSING    */
*       GEN(ICBACREL  MF=(E,(ACQPTR)),TYPE=ACQ);/* ISSUE THE ACQ     */
         ICBACREL  MF=(E,(ACQPTR)),TYPE=ACQ
*       IF RETCODE^=0 THEN          /* CHECK IF SUCCESSFUL           */
         LTR   RETCODE,RETCODE                                     0590
         BZ    @RF00590                                            0590
*         DO;                       /* ACQURE SPECIAL ERRORS         */
*           DO WHILE ARCOMPC=0;     /* FIND LIST IN ERROR            */
         B     @DE00592                                            0592
@DL00592 DS    0H                                                  0593
*             ACQPTR=ARNEDB;        /* GET NEXT LIST IN CHAIN        */
         L     ACQPTR,ARNEDB(,ACQPTR)                              0593
*           END;                    /* END WHEN ERROR LIST FOUND     */
@DE00592 LH    @04,ARCOMPC(,ACQPTR)                                0594
         N     @04,@CF03535                                        0594
         LTR   @04,@04                                             0594
         BZ    @DL00592                                            0594
*           STOPACQ=ACQPTR;         /* SAVE FIRST ERROR LIST         */
         ST    ACQPTR,STOPACQ                                      0595
*           IF ARCOMPC=45 THEN      /* CHECK IF NO SPACE FOR A BIND
*                                      REQUEST. IN THIS CASE A     0596
*                                      ACQUIRE WITHOUT BIND CAN BE 0596
*                                      TRIED                         */
         C     @04,@CF03192                                        0596
         BNE   @RF00596                                            0596
*             DO;                   /* BIND ERROR RECOVERY           */
*               IF ARBDUBD=ON THEN  /* CHECK IF BIND WAS SPECI       */
         TM    ARBDUBD(ACQPTR),B'10000000'                         0598
         BNO   @RF00598                                            0598
*                 DO;               /* TRY ACQUIRE WITHOUT BIND      */
*                   DO WHILE ACQPTR^=0;/* CHANGE TO NO BIND          */
         B     @DE00600                                            0600
@DL00600 DS    0H                                                  0601
*                     ARBDUBD=OFF;  /* RESET THE BIND OPTION IN LST  */
         NI    ARBDUBD(ACQPTR),B'01111111'                         0601
*                     ACQPTR=ARNEDB;/* GET NEXT LIST IN CHAIN        */
         L     ACQPTR,ARNEDB(,ACQPTR)                              0602
*                   END;            /* END RESET BIND OPTIONS        */
@DE00600 LTR   ACQPTR,ACQPTR                                       0603
         BNZ   @DL00600                                            0603
*                   ACQPTR=STOPACQ; /* GET FIRST ERROR LIST          */
         L     ACQPTR,STOPACQ                                      0604
*                   GEN(ICBACREL  MF=(E,(ACQPTR)),TYPE=ACQ);       0605
         ICBACREL  MF=(E,(ACQPTR)),TYPE=ACQ
*                   IF RETCODE^=0 THEN/* CHECK IF SUCCESSFUL         */
         LTR   RETCODE,RETCODE                                     0606
         BZ    @RF00606                                            0606
*                     DO;           /* GO PROCESS AS AN ERROR        */
*                       PDPSFC=ARCOMPC;/* INDICAT TYPE OF ERROR      */
         LA    @04,ERRORWD                                         0608
         LH    @11,ARCOMPC(,ACQPTR)                                0608
         STC   @11,PDPSFC(,@04)                                    0608
*                       PDPCODE=PP92;/* STAGING ERROR CODE           */
         MVI   PDPCODE(@04),X'5C'                                  0609
*                       CALL BACKOUT;/* TRY TO BACK OUT PREV ACQ     */
         BAL   @14,BACKOUT                                         0610
*                       GOTO EXIT;  /* CLEANUP AND LEAVE             */
         B     EXIT                                                0611
*                     END;          /* END ERROR AND GIVE UP         */
*                   ELSE            /* THE RETRY WAS SUCCESSFUL      */
*                     DO;           /* WTO MSG STAGE WITH NO BIND    */
@RF00606 DS    0H                                                  0614
*                       GEN(L RCORE,4(R13));/* GET PREV SAVE AREA    */
         L RCORE,4(R13)
*                       GEN(L RCORE,36(RCORE));/* IDAFOREC BASE      */
         L RCORE,36(RCORE)
*                       RESPECIFY                                  0616
*                         IDAPDPRM BASED(ADDR(DXIOB));             0616
*                       ERRORWD=OCERROR;/* SAVE OLD IDAPDPRM CODE    */
         LA    @11,280                                             0617
         ALR   @11,RCORE                                           0617
         L     @10,OCERROR(,@11)                                   0617
         ST    @10,ERRORWD                                         0617
*                       PDPFUNC=FUNC43;/* INDICATE STAGING FUNCTN    */
         MVI   PDPFUNC(@11),X'2B'                                  0618
*                       PDPCODE=PP94;/* INDICATE STAGING PROBLEM     */
         MVI   PDPCODE(@11),X'5E'                                  0619
*                       PDPSFC=45;  /* GIVE 3850 REASON              */
         MVI   PDPSFC(@11),X'2D'                                   0620
*                       R1=ADDR(FORECORE);/* PASS ERROR LIST         */
         LR    R1,RCORE                                            0621
*                       CALL IDA0192P;/* CALL O/C/EOV MSG RTN        */
         L     @15,@CV03385                                        0622
         BALR  @14,@15                                             0622
*                       OCERROR=ERRORWD;/* RESTORE IDAPDPRM          */
         L     @11,ERRORWD                                         0623
         ST    @11,OCERROR+280(,RCORE)                             0623
*                       RESPECIFY                                  0624
*                         IDAPDPRM BASED(ADDR(ERRORWD));           0624
*                       ERRORWD=0;  /* REMOVE TRACES OF ERROR        */
         SLR   @04,@04                                             0625
         ST    @04,ERRORWD                                         0625
*                       PDPFUNC=FUNC43;/* INDICATE STAGING FUNC      */
         LA    @04,ERRORWD                                         0626
         MVI   PDPFUNC(@04),X'2B'                                  0626
*                     END;          /* END IF RETRY SUCCESSFUL       */
*                 END;              /* END RETRY WITHOUT BIND        */
*               ELSE                /* THIS IS NOT A RETRYABLE ERR   */
*                 DO;               /* SET ERROR CODE AND EXIT       */
         B     @RC00598                                            0629
@RF00598 DS    0H                                                  0630
*                   PDPSFC=ARCOMPC; /* INDICATE TYPE OF ERROR        */
         LA    @04,ERRORWD                                         0630
         LH    @11,ARCOMPC(,ACQPTR)                                0630
         STC   @11,PDPSFC(,@04)                                    0630
*                   PDPCODE=PP92;   /* INDICATE STAGING ERROR        */
         MVI   PDPCODE(@04),X'5C'                                  0631
*                   CALL BACKOUT;   /* TRY TO BACKOUT PREV ACQ       */
         BAL   @14,BACKOUT                                         0632
*                   GOTO EXIT;      /* CLEANUP AND LEAVE             */
         B     EXIT                                                0633
*                 END;              /* END ERROR AND QUIT            */
*             END;                  /* END NO SPACE RETURN FROM ACQ  */
*           ELSE                    /* UNRECOVERABLE TYPE OF ERROR   */
*             DO;                   /* SET ERROR CODE AND QUIT       */
         B     @RC00596                                            0636
@RF00596 DS    0H                                                  0637
*               PDPSFC=ARCOMPC;     /* INDICATE TYPE OF ERROR        */
         LA    @04,ERRORWD                                         0637
         LH    @11,ARCOMPC(,ACQPTR)                                0637
         STC   @11,PDPSFC(,@04)                                    0637
*               PDPCODE=PP92;       /* INDICATE STAGING ERROR        */
         MVI   PDPCODE(@04),X'5C'                                  0638
*               CALL BACKOUT;       /* TRY TO BACK OUT PREV ACQUIRS  */
         BAL   @14,BACKOUT                                         0639
*               GOTO EXIT;          /* CLEANUP AND LEAVE             */
         B     EXIT                                                0640
*             END;                  /* END UNRECOVERABLE ERROR       */
*         END;                      /* END IF ERROR ON ACQUIRE       */
*       ELSE                                                       0643
*         ;                         /* THE ACQUIRE WAS SUCCESSFUL    */
@RF00590 DS    0H                                                  0644
*     END;                          /* END ACQUIRE LOGIC             */
*   ELSE                            /* A RELINQUISH IS TO BE DONE    */
*     DO;                           /* PERFORM THE RELINQUISH        */
         B     @RC00587                                            0645
@RF00587 DS    0H                                                  0646
*       GEN(ICBACREL  MF=(E,(ACQPTR)),TYPE=REL);/* ISSUE RELINQ      */
         ICBACREL  MF=(E,(ACQPTR)),TYPE=REL
*       IF RETCODE^=0 THEN          /* CHECK IF AN ERROR OCCURRED    */
         LTR   RETCODE,RETCODE                                     0647
         BZ    @RF00647                                            0647
*         DO;                       /* ANY SPECIAL RELINQUISH ERRORS */
*           DO WHILE ARCOMPC=0;     /* SEARCH FOR ERROR LIST         */
         B     @DE00649                                            0649
@DL00649 DS    0H                                                  0650
*             ACQPTR=ARNEDB;        /* GET NEXT LIST IN CHAIN        */
         L     ACQPTR,ARNEDB(,ACQPTR)                              0650
*           END;                    /* END SEARCH FOR ERROR LIST     */
@DE00649 LH    @04,ARCOMPC(,ACQPTR)                                0651
         N     @04,@CF03535                                        0651
         LTR   @04,@04                                             0651
         BZ    @DL00649                                            0651
*           PDPCODE=PP93;           /* INDICATE RELINQUISH DESTAGE E */
         LA    @11,ERRORWD                                         0652
         MVI   PDPCODE(@11),X'5D'                                  0652
*           PDPSFC=ARCOMPC;         /* INDICATE TYPE OF ERROR      0653
*                                      CONTINUE TRYING TO RELINQUISH */
         STC   @04,PDPSFC(,@11)                                    0653
*         END;                      /* END IF AN ERROR OCCURRED      */
*       IF ARDRES=ON THEN           /* CHECK IF A WAIT IS REQUESTED  */
@RF00647 TM    ARDRES(ACQPTR),B'01000000'                          0655
         BNO   @RF00655                                            0655
*         DO;                       /* WAIT AND CHECK FOR ERRORS     */
*           MAINLEN=LISTOTAL*4;     /* CALC CORE                     */
         L     @04,LISTOTAL                                        0657
         SLA   @04,2                                               0657
         STCM  @04,7,MAINLEN                                       0657
*           CALL GETMAIN;           /* GET CORE FOR WAIT LIST        */
         BAL   @14,GETMAIN                                         0658
*           IF PDPCODE=PP1 THEN     /* CHECK IF GET CORE OK          */
         LA    @04,ERRORWD                                         0659
         CLI   PDPCODE(@04),20                                     0659
         BE    @RT00659                                            0659
*             GOTO EXIT;            /* QUIT IF GETMAIN BAD           */
*           WAITPTR=COREPTR;        /* POINT TO RETURNED CORE        */
         ST    COREPTR,WAITPTR                                     0661
*           ACQPTR=FIRSTACQ;        /* POINT TO FIRST ACQ LIST       */
         L     ACQPTR,FIRSTACQ                                     0662
*           R15=0;                  /* INIT FOR NO OK ECBS           */
         SLR   R15,R15                                             0663
*           DO WHILE ACQPTR^=0;     /* STOP IF NO MORE LISTS         */
         B     @DE00664                                            0664
@DL00664 DS    0H                                                  0665
*             IF ARCOMPC=0 THEN     /* INCR WAIT COUNT IF NO ERR     */
         LH    @04,ARCOMPC(,ACQPTR)                                0665
         N     @04,@CF03535                                        0665
         LTR   @04,@04                                             0665
         BNZ   @RF00665                                            0665
*               DO;                 /* SETUP TO USE THIS ECB         */
*                 R15=R15+1;        /* INCR COUNT BY ONE IF NO ERR   */
         LA    R15,1(,R15)                                         0667
*                 LISTECB(R15)=ADDR(RELECB);/* POINT TO ECB          */
         LR    @04,R15                                             0668
         SLA   @04,2                                               0668
         LA    @11,RELECB(,ACQPTR)                                 0668
         L     @10,WAITPTR                                         0668
         AL    @10,@CF03528                                        0668
         ST    @11,LISTECB(@04,@10)                                0668
*               END;                /* END POINT TO ECB TO WAIT ON   */
*             ACQPTR=ARNEDB;        /* GET NEXT LIST IN CHAIN        */
@RF00665 L     ACQPTR,ARNEDB(,ACQPTR)                              0670
*           END;                    /* END BUILD MULTI WAIT LIST     */
@DE00664 SLR   @04,@04                                             0671
         CR    ACQPTR,@04                                          0671
         BNE   @DL00664                                            0671
*           RFY                                                    0672
*             R1 RESTRICTED;                                       0672
*           R1=WAITPTR;             /* GET REG PTR TO WAIT LIST      */
         L     @11,WAITPTR                                         0673
         LR    R1,@11                                              0673
*           IF R15^=0 THEN          /* DO NOT WAIT IF 0 COUNT        */
         CR    R15,@04                                             0674
         BE    @RF00674                                            0674
*             DO;                   /* WAIT OF GOOD LISTS            */
*               LASTECB(R15)=ON;    /* INDICATE LAST ECB IN LIST     */
         LR    @04,R15                                             0676
         SLA   @04,2                                               0676
         ALR   @11,@04                                             0676
         AL    @11,@CF03528                                        0676
         OI    LASTECB(@11),B'10000000'                            0676
*               GEN(WAIT  (R15),ECBLIST=(R1));/* WAIT ON ECBS        */
         WAIT  (R15),ECBLIST=(R1)
*               RFY                                                0678
*                 R1 UNRESTRICTED;                                 0678
*               ACQPTR=FIRSTACQ;    /* GET FIRST RELINQ LIST         */
         L     ACQPTR,FIRSTACQ                                     0679
*               DO WHILE ACQPTR^=0; /* CHECK ALL ECBS FOR ERR        */
         B     @DE00680                                            0680
@DL00680 DS    0H                                                  0681
*                 IF ECBCODE^='7F'X&/* WAS THE RELINQUISH SCESS      */
*                     ECBCODE^=0&   /* ECB POSTED IN ERROR           */
*                     PDPCODE=0 THEN/* DO NOT REPLACE PRIOR ERROR    */
         CLI   ECBCODE(ACQPTR),X'7F'                               0681
         BE    @RF00681                                            0681
         CLI   ECBCODE(ACQPTR),0                                   0681
         BE    @RF00681                                            0681
         LA    @04,ERRORWD                                         0681
         CLI   PDPCODE(@04),0                                      0681
         BNE   @RF00681                                            0681
*                   DO;             /* INDICATE ERROR AND LEAVE      */
*                     PDPCODE=PP93; /* INDICATE RELINQUISH DESTAGE E */
         MVI   PDPCODE(@04),X'5D'                                  0683
*                     PDPSFC=ECBCODE;/* INDICATE TYPE OF ERROR     0684
*                                      CONTINUE TRYING TO RELINQUISH */
         IC    @11,ECBCODE(,ACQPTR)                                0684
         STC   @11,PDPSFC(,@04)                                    0684
*                   END;            /* END UNRECOVERABLE ERROR       */
*                 ACQPTR=ARNEDB;    /* GET NEXT LIST OR ZERO IN CHN  */
@RF00681 L     ACQPTR,ARNEDB(,ACQPTR)                              0686
*               END;                /* END CHECKING ALL ECBS FOR ERR */
@DE00680 LTR   ACQPTR,ACQPTR                                       0687
         BNZ   @DL00680                                            0687
*             END;                  /* END IF WAIT ISSUED            */
*         END;                      /* END IF WAIT OPTION            */
@RF00674 DS    0H                                                  0690
*     END;                          /* END SPECIAL RELINQUISH PROC   */
@RF00655 DS    0H                                                  0691
*   RET=STAGSAVE;                   /* RESTORE RETURN REG            */
@RC00587 L     RET,STAGSAVE                                        0691
*   RETURN;                         /* RETURN TO THE CALLER          */
@EL00009 DS    0H                                                  0692
@EF00009 DS    0H                                                  0692
@ER00009 BR    @14                                                 0692
*   RESPECIFY                                                      0693
*    (RETCODE,                                                     0693
*     INDEX) UNRESTRICTED;          /* FREE UP REGS                  */
*   END STAGIT;                     /* END ACQUIRE RELINQUISH RTN    */
@PB00009 DS    0H                                                  0694
*   END IDA0192D                    /* END OF ALL CODE               */
*                                                                  0695
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IDAIOSCN)                                       */
*/*%INCLUDE SYSLIB  (IDAIDXCB)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IEZXRB  )                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IDAFOREC)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBX)                                       */
*/*%INCLUDE SYSLIB  (IDAPDPRM)                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAERRCD)                                       */
*/*%INCLUDE SYSLIB  (IDAPPCDE)                                       */
*/*%INCLUDE SYSLIB  (IDAVIRT )                                       */
*/*%INCLUDE SYSLIB  (IHADSAB )                                       */
*                                                                  0695
*       ;                                                          0695
@DATA    DS    0H
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@TF00001 DS    F
IDA0192D CSECT
         DS    0F
@CF00062 DC    F'1'
@CH00062 EQU   @CF00062+2
@CF00066 DC    F'4'
@CF00078 DC    F'16'
@CF03192 DC    F'45'
@CF03227 DC    F'92'
@CF03093 DC    F'96'
@CF03097 DC    F'104'
@CF03521 DC    F'-32'
@CF03528 DC    F'-4'
@CF03535 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
DEBPTR   DS    A
DEBDAPTR DS    A
ERRORWD  DS    F
FIRSTACQ DS    A
DOLISTPT DS    A
WAITPTR  DS    A
ACQSAVE  DS    A
BLDASAVE DS    A
BLDUSAVE DS    A
COREBASE DS    A
GETASAVE DS    A
GETLSAVE DS    A
LISTOTAL DS    A
NEXTEXT  DS    A
PREVACQ  DS    A
PREVCORE DS    A
RSAVLF   DS    A
STAGSAVE DS    A
STOPACQ  DS    A
INDEX2   DS    A
DSABPTR  DS    A
FSTDSAB  DS    A
ENQPARML DS    CL20
         ORG   ENQPARML
ENQTCB   DS    AL4
ENQPROPR DS    CL16
         ORG   ENQPROPR
EQNOPT1  DS    BL1
         ORG   EQNOPT1
ENQEND   DS    BL1
ENQNEW   EQU   EQNOPT1+0
@NM00002 EQU   EQNOPT1+0
ENQDIR   EQU   EQNOPT1+0
         ORG   ENQPROPR+1
ENQRLEN  DS    FL1
ENQOPT2  DS    BL1
         ORG   ENQOPT2
ENQSHR   DS    BL1
         ORG   ENQPROPR+3
ENQRETC  DS    FL1
ENQQNADR DS    AL4
ENQRNADR DS    AL4
ENQUCADR DS    AL4
         ORG   ENQPARML+20
RNAME    DS    CL8
         ORG   RNAME
@NM00003 DS    CL3
@NM00004 DS    CL4
@NM00005 DS    CL1
         ORG   RNAME+8
MAINPARM DS    CL36
         ORG   MAINPARM
MAINSAVE DS    4F
MAINWORK DS    3F
MAINR0   DS    CL4
         ORG   MAINR0
MAINPOOL DS    FL1
MAINLEN  DS    FL3
         ORG   MAINPARM+32
MAINADDR DS    AL4
         ORG   MAINPARM+36
FLAGS2D  DS    BL2
         ORG   FLAGS2D
DONTUSE  DS    BL1
FIND     EQU   FLAGS2D+0
LASTAMB  EQU   FLAGS2D+0
CONCEND  EQU   FLAGS2D+0
DUPBIT   EQU   FLAGS2D+0
FIRST    EQU   FLAGS2D+0
ACQCORE  EQU   FLAGS2D+0
         ORG   FLAGS2D+2
         DS    CL2
CURRENT  DS    CL7
         ORG   CURRENT
@NM00110 DS    FL4
@NM00111 DS    CL2
AMBDISP  DS    BL1
         ORG   CURRENT+7
IDA0192D CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV03385 DC    V(IDA0192P)
         DS    0D
@CC03473 DC    C'        '
@CB03499 DC    X'000000000000'
GMFAIL   DC    X'1414'
IDA0192D CSECT
         DS    0D                       START ON DOUBLE WORD BOUNDARY
PTCH192D DC    ((*-IDA0192D)/20)X'00'   PATCH AREA
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA0192D CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R0       EQU   @00
R1       EQU   @01
RACB     EQU   @02
RBASE    EQU   @03
RCORE    EQU   @04
RAMB     EQU   @05
RES      EQU   @05
RWTG     EQU   @06
R6       EQU   @06
RPARC    EQU   @07
R7       EQU   @07
RWTGC    EQU   @08
R8       EQU   @08
RTIOT    EQU   @09
R9       EQU   @09
RUCB     EQU   @10
R13      EQU   @13
RET      EQU   @14
RETCODE  EQU   @15
R15      EQU   @15
ACQPTR   EQU   @02
PARMPTR  EQU   @03
LISTCNT  EQU   @06
EXTENTS  EQU   @04
RXTNT    EQU   @09
INDEX    EQU   @07
COREPTR  EQU   @08
ARR1     EQU   @01
RDEB     EQU   @11
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
R4       EQU   @04
CVTPTR   EQU   16
MSTRBLK  EQU   0
MSTRHDR  EQU   MSTRBLK
CVTMAP   EQU   0
CVTTCBP  EQU   CVTMAP
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
@NM00008 EQU   0
TCBPTR   EQU   @NM00008+4
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBRBP   EQU   TCB
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFERA  EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBFLGS2 EQU   TCBFLGS+1
TCBSYSTK EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFLGS3 EQU   TCBFLGS+2
TCBADINP EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBDWSTA EQU   TCBFLGS3
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBFTJST EQU   TCB+44
TCBJPQ   EQU   TCBFTJST
TCBPURGE EQU   TCBJPQ
TCBFTJSA EQU   TCBJPQ+1
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBIDF   EQU   TCBFSA
TCBTME   EQU   TCB+120
TCBPIB   EQU   TCB+124
TCBJSTCB EQU   TCBPIB
TCBPIBT  EQU   TCBJSTCB
TCBPIBA  EQU   TCBJSTCB+1
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBPQE   EQU   TCB+152
TCBFTFLG EQU   TCBPQE+1
TCBFTFL1 EQU   TCBFTFLG
TCBFTFL2 EQU   TCBFTFLG+1
TCBFTFL3 EQU   TCBFTFLG+2
TCBAQE   EQU   TCB+156
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBXCTL  EQU   TCBNSTAE
TCBSCAT  EQU   TCBNSTAE
TCBSUPER EQU   TCBNSTAE
TCBRETRY EQU   TCBNSTAE
TCBVALID EQU   TCBNSTAE
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBLJSND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBNDINT EQU   TCBNDSP3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBCPU   EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBNTJS  EQU   TCBFLGS6
TCBFLGS7 EQU   TCBBITS+3
TCBGPECB EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBPCB   EQU   TCB+212
TCBARB   EQU   TCB+220
TCBTTQE  EQU   TCB+224
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
XRBPSW   EQU   RBOPSW
RBOPSWB2 EQU   XRBPSW+1
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
XRBPRFX  EQU   0
XRBPRFX1 EQU   0
XRB      EQU   0
@NM00028 EQU   XRB+10
@NM00029 EQU   @NM00028
XRBLRBFX EQU   @NM00029
@NM00031 EQU   @NM00028+1
@NM00032 EQU   @NM00031
@NM00033 EQU   @NM00031
XRBWTL   EQU   XRB+12
XRBEP    EQU   XRBWTL
@NM00036 EQU   XRB+16
XRTLPRB  EQU   @NM00036+4
XRBLOCK  EQU   XRTLPRB
XRBFLAG1 EQU   XRBLOCK
@NM00039 EQU   XRB+28
CDB      EQU   0
CDBMDAD  EQU   CDB
CDBMDSZ  EQU   CDB+4
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00047 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
TIOT1    EQU   0
TIOENTRY EQU   0
TIOELNGH EQU   TIOENTRY
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOEDDNM EQU   TIOENTRY+4
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
TIOEFSRT EQU   TIOENTRY+17
POOLSTAR EQU   TIOENTRY+20
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBNMEXT EQU   DEBUSRPG
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBDVMOD EQU   DEBUCBAD
DEBUCBA  EQU   DEBUCBAD+1
DEBSTRCC EQU   DEBDASD+6
DEBENDCC EQU   DEBDASD+10
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
DEBXDSAB EQU   DEBXTN+4
FORECORE EQU   0
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
JFCBX    EQU   0
IDAPDPRM EQU   0
PDPCODE  EQU   IDAPDPRM+1
PDPFUNC  EQU   IDAPDPRM+2
PDPSFC   EQU   IDAPDPRM+3
PDPMSGFL EQU   IDAPDPRM+34
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBVVIC  EQU   ACBINFLG
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDSDT   EQU   AMDATTR
AMDNEST  EQU   IDAAMDSB+4
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDFAULT EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDSTAT  EQU   IDAAMDSB+48
IDAAMB   EQU   0
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBCREAT EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBCAT   EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBDEBPT EQU   IDAAMB+44
AMBDEBAD EQU   AMBDEBPT+1
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLFLG2 EQU   IDAAMBL+36
AMBLSTAG EQU   AMBLFLG2
AMBLNUM  EQU   IDAAMBL+38
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
EXTENTZ  EQU   0
EXTFXD   EQU   EXTENTZ
EXTTYP   EQU   EXTFXD+6
XTLNG    EQU   EXTENTZ+7
EXTENT   EQU   EXTENTZ+9
PHYXT    EQU   EXTENT+2
STRCCHH  EQU   PHYXT
STRCC    EQU   STRCCHH
ENDCCHH  EQU   PHYXT+4
ENDCC    EQU   ENDCCHH
RBAXT    EQU   EXTENT+12
COREHDR  EQU   0
CORECHN  EQU   COREHDR
COREFLAG EQU   COREHDR+4
COREACQ  EQU   COREFLAG
CORELEN  EQU   COREHDR+6
DOLIST   EQU   0
LISTHDR  EQU   DOLIST
COUNT    EQU   LISTHDR
DOENTRY  EQU   DOLIST+4
LISTUCB  EQU   DOENTRY
ACQBASE  EQU   DOENTRY+4
WAITLIST EQU   0
LISTECB  EQU   WAITLIST
LASTECB  EQU   LISTECB
OCERROR  EQU   0
IDAVIRT  EQU   0
VIRTFLAG EQU   IDAVIRT+1
VIRTACQ  EQU   VIRTFLAG
VIRTINHB EQU   VIRTFLAG
VIRTNOUN EQU   VIRTFLAG
VIRTBACB EQU   VIRTFLAG
VIRTBUCB EQU   VIRTFLAG
VIRTBEXT EQU   VIRTFLAG
VIRTMNT  EQU   VIRTFLAG
VIRTACB  EQU   IDAVIRT+4
VIRTUCB  EQU   IDAVIRT+8
VIRTEXT  EQU   IDAVIRT+12
VIRTTIOE EQU   IDAVIRT+16
VIRTLENG EQU   IDAVIRT+20
FILEMASK EQU   0
CYLSEEK  EQU   FILEMASK
ACQINIT  EQU   0
ARLL     EQU   ACQINIT
AROP     EQU   ACQINIT+4
ARFLG    EQU   ACQINIT+6
ARBDUBD  EQU   ARFLG
ARDRES   EQU   ARFLG
ARINH    EQU   ARFLG
ARNMEXT  EQU   ACQINIT+7
ARVOL    EQU   ACQINIT+8
ARECB    EQU   ACQINIT+16
ARCOMPC  EQU   ACQINIT+26
AREXT    EQU   ACQINIT+28
ARNEDB   EQU   ACQINIT+92
DSAB     EQU   0
DSABFCHN EQU   DSAB+4
DSABTIOT EQU   DSAB+16
DSABGIDP EQU   DSAB+24
DSABANMP EQU   DSAB+28
DSABORG  EQU   DSAB+32
DSABORG1 EQU   DSABORG
DSABORG2 EQU   DSABORG+1
DSABFLG1 EQU   DSAB+34
DSABFLG2 EQU   DSAB+35
DSABFLG3 EQU   DSAB+36
DSABFLG4 EQU   DSAB+37
DSABANMI EQU   0
DSABGIDL EQU   0
FL2BUFOF EQU   0
UCBBGN   EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
TCBS01   EQU   TCBPCB
TCBFOE   EQU   TCBS01+32
TCBESTAE EQU   TCBS01+52
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCBS01+64
TCBFBYT2 EQU   TCBS01+65
TCBRV124 EQU   TCBS01+66
TCBRV133 EQU   TCBS01+67
UCBOBS01 EQU   UCBDEV
UCBVOLI  EQU   UCBOBS01+4
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00046 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
DXLBL    EQU   FORECORE
DSECT01  EQU   FORECORE+37
DSECT02  EQU   FORECORE
FL1RES   EQU   DSECT02+73
DSECT03  EQU   FORECORE+4
FL2JSID  EQU   DSECT03+13
DXDSCB   EQU   FORECORE
DXDSCB3K EQU   FORECORE
DSCBEXSK EQU   DXDSCB3K+4
DSECT04  EQU   FORECORE
DSCBEXSD EQU   DSECT04+1
DSECT05  EQU   FORECORE
DSECT06  EQU   FORECORE+12
MSGINSTR EQU   DSECT06+3
MSGSER   EQU   MSGINSTR
DXJBF    EQU   FORECORE+100
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
DXIOB    EQU   FORECORE+280
IOBSENSE EQU   DXIOB+2
IOBECBPT EQU   DXIOB+4
IOBCSW   EQU   DXIOB+8
DYYYY    EQU   FORECORE+320
DXDEBIRB EQU   DYYYY+4
DXDEBDCB EQU   DYYYY+20
DXDCBAD  EQU   DXDEBDCB
DXDEBUCB EQU   DYYYY+28
DXCCW    EQU   FORECORE+368
PDWLIST  EQU   FORECORE
PDWWORK  EQU   FORECORE+320
ACQCC12  EQU   AREXT
ACQCC1   EQU   ACQCC12
ACQCC2   EQU   ACQCC12+2
EXTENSON EQU   ARNEDB
RELECB   EQU   EXTENSON+4
ECBCODE  EQU   RELECB+3
ACQFLAGS EQU   EXTENSON+8
ACQFULL  EQU   ACQFLAGS
DSCBEND  EQU   FORECORE+100
DSCCORE  EQU   FORECORE+96
DXDADDR  EQU   FORECORE+312
DXDCB    EQU   FORECORE+320
DXDCBDEB EQU   FORECORE+364
DXDEB    EQU   FORECORE+316
DXECB    EQU   FORECORE+276
DXVSAMID EQU   FORECORE+488
DXXXX    EQU   FORECORE+364
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
ACQINVAL EQU   ACQFLAGS
@NM00123 EQU   RELECB
@NM00122 EQU   EXTENSON
PDWORKSP EQU   PDWWORK+88
PDWERRCD EQU   PDWWORK+84
PDWMSGPT EQU   PDWWORK+80
PDWSAVED EQU   PDWWORK+76
PDWSAVEC EQU   PDWWORK+72
PDWSAVEB EQU   PDWWORK+68
PDWSAVEA EQU   PDWWORK+64
PDWSAVE  EQU   PDWWORK
WTPROUT  EQU   PDWLIST+75
WTPMSG   EQU   PDWLIST+4
WTPFLGS  EQU   PDWLIST+2
WTPLNGTH EQU   PDWLIST
DXCCW12  EQU   DXCCW+88
DXCCW11  EQU   DXCCW+80
DXCCW10  EQU   DXCCW+72
DXCCW9   EQU   DXCCW+64
DXCCW8   EQU   DXCCW+56
DXCCW7   EQU   DXCCW+48
DXCCW6   EQU   DXCCW+40
DXCCW5   EQU   DXCCW+32
DXCCW4   EQU   DXCCW+24
DXCCW3   EQU   DXCCW+16
DXCCW2   EQU   DXCCW+8
DXCCW1   EQU   DXCCW
DXDEBNTR EQU   DYYYY+42
DXDEBEHH EQU   DYYYY+40
DXDEBECC EQU   DYYYY+38
DXDEBSHH EQU   DYYYY+36
DXDEBSCC EQU   DYYYY+34
DXDEBBIN EQU   DYYYY+32
DXDEBMOD EQU   DXDEBUCB
DXDEBAPP EQU   DYYYY+24
DXDEBID  EQU   DXDCBAD
DXDEBECB EQU   DYYYY+16
DXDEBUSR EQU   DYYYY+12
DXDEBSYS EQU   DYYYY+8
DXDEBOFL EQU   DXDEBIRB
DXDEBDEB EQU   DYYYY
IOBERRCT EQU   DXIOB+30
IOBINCAM EQU   DXIOB+28
@NM00075 EQU   DXIOB+25
@NM00074 EQU   DXIOB+24
IOBDCBPT EQU   DXIOB+21
IOBWGHT  EQU   DXIOB+20
IOBSTART EQU   DXIOB+17
IOBSIOCC EQU   DXIOB+16
IOBCNT   EQU   IOBCSW+6
IOBSTAT1 EQU   IOBCSW+5
IOBSTAT0 EQU   IOBCSW+4
IOBCOMAD EQU   IOBCSW
@NM00073 EQU   IOBECBPT+1
@NM00072 EQU   IOBECBPT
IOBSENS1 EQU   IOBSENSE+1
IOBSENS0 EQU   IOBSENSE
IOBFLAG2 EQU   DXIOB+1
IOBFLAG1 EQU   DXIOB
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBSPNM EQU   JFCBS001+45
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCBADSP EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBMSGP EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXAD EQU   JFCBS001+31
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00068 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNVOL EQU   JFCUCSEG+9
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00067 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCORGIS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00066 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
MSGTEXT  EQU   DSECT06+21
MSGCOMM2 EQU   DSECT06+20
MSGVOLSR EQU   DSECT06+14
MSGCOMM1 EQU   DSECT06+13
MSGUN    EQU   DSECT06+10
MSGBLANK EQU   DSECT06+9
MSGACTN  EQU   MSGINSTR+5
@NM00064 EQU   MSGINSTR+3
MSGSERLO EQU   MSGSER+2
@NM00063 EQU   MSGSER
MSGIOSUP EQU   DSECT06
REPLY    EQU   DSECT05+84
ROUTCODE EQU   DSECT05+82
DESCODE  EQU   DSECT05+80
MESSAGEA EQU   DSECT05+12
MCSFLAGS EQU   DSECT05+10
MSGLSTSZ EQU   DSECT05+8
REPLYECB EQU   DSECT05+4
REPLYADR EQU   DSECT05+1
REPLYLTH EQU   DSECT05
DSCBNEXT EQU   DSECT04+91
DSCBEXD  EQU   DSCBEXSD+80
DSCBEXC  EQU   DSCBEXSD+70
DSCBEXB  EQU   DSCBEXSD+60
DSCBEXA  EQU   DSCBEXSD+50
DSCBEX9  EQU   DSCBEXSD+40
DSCBEX8  EQU   DSCBEXSD+30
DSCBEX7  EQU   DSCBEXSD+20
DSCBEX6  EQU   DSCBEXSD+10
DSCBEX5  EQU   DSCBEXSD
DSCBFMID EQU   DSECT04
DSCBEX4  EQU   DSCBEXSK+30
DSCBEX3  EQU   DSCBEXSK+20
DSCBEX2  EQU   DSCBEXSK+10
DSCBULMT EQU   DSCBEXSK+6
DSCBLLMT EQU   DSCBEXSK+2
DSCBEXSQ EQU   DSCBEXSK+1
DSCBEXTY EQU   DSCBEXSK
DSCBF3C  EQU   DXDSCB3K
DSCNEXT  EQU   DXDSCB+91
DSCEXT2  EQU   DXDSCB+81
DSCEXT1  EQU   DXDSCB+71
DSCUPPLM EQU   DXDSCB+67
DSCLOWLM EQU   DXDSCB+63
DSCEXTSQ EQU   DXDSCB+62
DSCEXTYP EQU   DXDSCB+61
DSCTRBAL EQU   DXDSCB+59
DSCLSTAR EQU   DXDSCB+54
DSCSCALO EQU   DXDSCB+50
DSCDSIND EQU   DXDSCB+49
DSCRKP   EQU   DXDSCB+47
DSCKEYL  EQU   DXDSCB+46
DSCLRECL EQU   DXDSCB+44
DSCBLKL  EQU   DXDSCB+42
DSCOPTCD EQU   DXDSCB+41
DSCRECFM EQU   DXDSCB+40
DSCFILTY EQU   DXDSCB+38
@NM00062 EQU   DXDSCB+31
DSCSYSCD EQU   DXDSCB+18
@NM00061 EQU   DXDSCB+17
DSCBLDBL EQU   DXDSCB+16
DSCNOEXT EQU   DXDSCB+15
DSCEXPDT EQU   DXDSCB+12
DSCCREDT EQU   DXDSCB+9
DSCVOLSR EQU   DXDSCB+7
DSCFILSR EQU   DXDSCB+1
DSCFMTID EQU   DXDSCB
FL2RES   EQU   DSECT03+35
FL2BLKA  EQU   DSECT03+34
@NM00060 EQU   DSECT03+33
FL2CNTRL EQU   DSECT03+32
FL2TRTCH EQU   DSECT03+30
FL2STEPD EQU   FL2JSID+9
FL2JSSP  EQU   FL2JSID+8
FL2JOBD  EQU   FL2JSID
FL2FILP  EQU   DSECT03+12
FL2DEN   EQU   DSECT03+11
FL2LRECL EQU   DSECT03+6
FL2BLKL  EQU   DSECT03+1
FL2RECFM EQU   DSECT03
FL1RES1  EQU   FL1RES+1
@NM00059 EQU   FL1RES
FL1SYSCD EQU   DSECT02+60
FL1BLKCT EQU   DSECT02+54
FL1FSEC  EQU   DSECT02+53
FL1EXPDT EQU   DSECT02+47
FL1CREDT EQU   DSECT02+41
FL1VNG   EQU   DSECT02+39
FL1GNO   EQU   DSECT02+35
FL1FILSQ EQU   DSECT02+31
FL1VOLSQ EQU   DSECT02+27
FL1FILSR EQU   DSECT02+21
FL1ID    EQU   DSECT02+4
FL1NO    EQU   DSECT02+3
FL1LABI  EQU   DSECT02
LABSTAND EQU   DSECT01+42
@NM00058 EQU   DSECT01+14
AVOLOWNR EQU   DSECT01
@NM00057 EQU   DXLBL+51
VOLOWNER EQU   DXLBL+41
@NM00056 EQU   DXLBL+31
@NM00055 EQU   DXLBL+21
@NM00054 EQU   DXLBL+16
VOLVTOC  EQU   DXLBL+11
VOLSEC   EQU   DXLBL+10
VOLSERNO EQU   DXLBL+4
VOLNO    EQU   DXLBL+3
VOLLABI  EQU   DXLBL
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
TIOUCBP  EQU   TIOEDEVE+1
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00046
UCBSKPFG EQU   @NM00046
UCBRIPND EQU   @NM00046
UCBRTIAC EQU   @NM00046
UCBRSV79 EQU   @NM00046
UCBRSV78 EQU   @NM00046
UCBRSV77 EQU   @NM00046
UCBOLTEP EQU   @NM00046
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00045 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVTOC  EQU   UCBOBS01
@NM00015 EQU   TCBS01+84
TCBSVCA2 EQU   TCBS01+80
TCBSWASA EQU   TCBS01+76
TCBDBTB  EQU   TCBS01+72
TCBRPT   EQU   TCBS01+68
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCBS01+62
TCBCCPVI EQU   TCBS01+60
TCBUKYSP EQU   TCBS01+56
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCBS01+48
TCBTCBID EQU   TCBS01+44
TCBRSV96 EQU   TCBS01+40
TCBSWA   EQU   TCBS01+36
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCBS01+28
TCBRSV41 EQU   TCBS01+27
TCBTID   EQU   TCBS01+26
TCBRSVAA EQU   TCBS01+25
TCBABCUR EQU   TCBS01+24
TCBTMSAV EQU   TCBS01+20
TCBIOTIM EQU   TCBS01+16
TCBRTWA  EQU   TCBS01+12
TCBBACK  EQU   TCBS01+8
TCBTIRB  EQU   TCBS01+4
TCBAECB  EQU   TCBS01
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
DSABGRID EQU   DSABGIDL+4
DSABLLEN EQU   DSABGIDL
DSABANAM EQU   DSABANMI+1
DSABANML EQU   DSABANMI
DSABRS04 EQU   DSAB+68
DSABSIOT EQU   DSAB+64
DSABRS03 EQU   DSAB+62
DSABDCBM EQU   DSAB+56
DSABSSCM EQU   DSAB+52
DSABSSNM EQU   DSAB+48
DSABPTTR EQU   DSAB+44
DSABTCBP EQU   DSAB+40
DSABRS02 EQU   DSAB+38
@NM00128 EQU   DSABFLG4
DSABCKSI EQU   DSABFLG4
DSABCKVL EQU   DSABFLG4
DSABCKDS EQU   DSABFLG4
@NM00127 EQU   DSABFLG3
DSABJSCT EQU   DSABFLG3
DSABCATL EQU   DSABFLG3
DSABVMSC EQU   DSABFLG3
DSABVAM  EQU   DSABFLG3
DSABPASS EQU   DSABFLG3
DSABDEFR EQU   DSABFLG3
@NM00126 EQU   DSABFLG2
DSABUNAL EQU   DSABFLG2
DSABIRM  EQU   DSABFLG2
DSABOPEN EQU   DSABFLG2
DSABNUSE EQU   DSABFLG1
DSABCATM EQU   DSABFLG1
DSABPCAT EQU   DSABFLG1
DSABDCAT EQU   DSABFLG1
DSABCONV EQU   DSABFLG1
DSABDCNV EQU   DSABFLG1
DSABPALC EQU   DSABFLG1
DSABDALC EQU   DSABFLG1
@NM00125 EQU   DSABORG2
DSABTR   EQU   DSABORG2
DSABAM   EQU   DSABORG2
@NM00124 EQU   DSABORG2
DSABTQ   EQU   DSABORG2
DSABTX   EQU   DSABORG2
DSABGS   EQU   DSABORG2
DSABU    EQU   DSABORG1
DSABPO   EQU   DSABORG1
DSABMQ   EQU   DSABORG1
DSABCQ   EQU   DSABORG1
DSABCX   EQU   DSABORG1
DSABDA   EQU   DSABORG1
DSABPS   EQU   DSABORG1
DSABIS   EQU   DSABORG1
DSABSSVA EQU   DSAB+21
DSABRS01 EQU   DSAB+20
DSABOPCT EQU   DSAB+14
DSABLNTH EQU   DSAB+12
DSABBCHN EQU   DSAB+8
DSABID   EQU   DSAB
@NM00121 EQU   AREXT
@NM00120 EQU   ACQINIT+25
ARHOST   EQU   ACQINIT+20
ARASID   EQU   ACQINIT+14
@NM00119 EQU   ARFLG
ARSEC    EQU   ARFLG
@NM00118 EQU   ACQINIT+5
@NM00117 EQU   FILEMASK
@NM00116 EQU   IDAVIRT+22
@NM00115 EQU   IDAVIRT+2
@NM00114 EQU   IDAVIRT
@NM00113 EQU   LISTHDR+2
@NM00112 EQU   COREHDR+5
HIRBA    EQU   RBAXT+4
LORBA    EQU   RBAXT
NMTRK    EQU   PHYXT+8
ENDHH    EQU   ENDCCHH+2
STRHH    EQU   STRCCHH+2
SSXT     EQU   EXTENT
SSDAT    EQU   EXTTYP
DEVTYP   EQU   EXTFXD+2
RRNO     EQU   EXTFXD
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00109 EQU   IDAAMBL+40
AMBLNST  EQU   IDAAMBL+37
@NM00108 EQU   AMBLFLG2
@NM00107 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00106 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00105 EQU   IDAAMBL+31
@NM00104 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00103 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00102 EQU   AMBCSWD1+1
@NM00101 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBLSR   EQU   AMBAFLG
@NM00100 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00099 EQU   IDAAMB+68
AMBIWA   EQU   IDAAMB+64
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00098 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00097 EQU   AMBOFLGS
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
@NM00096 EQU   AMBINFL
@NM00095 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00094 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00093 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00092 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
@NM00091 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00090 EQU   IDAAMDSB+41
@NM00089 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDCINV  EQU   IDAAMDSB+20
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDKEYLN EQU   IDAAMDSB+8
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00088 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00087 EQU   ACBINFLG+1
ACBBYPSS EQU   ACBINFLG
ACBSDS   EQU   ACBVVIC
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00086 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00085 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00084 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00083 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00082 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00081 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00080 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00079 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00078 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00077 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
PDPSFI   EQU   IDAPDPRM+36
@NM00076 EQU   IDAPDPRM+35
PDPNOMSG EQU   PDPMSGFL
PDPNOTRC EQU   PDPMSGFL
PDPSPACE EQU   PDPMSGFL
PDPNOTFC EQU   PDPMSGFL
PDPDSTYP EQU   IDAPDPRM+33
PDPKEY   EQU   IDAPDPRM+32
PDPCTACB EQU   IDAPDPRM+28
PDPDSN   EQU   IDAPDPRM+24
PDPCLSNM EQU   IDAPDPRM+20
PDPVLSER EQU   IDAPDPRM+16
PDPTIOT  EQU   IDAPDPRM+12
PDPUCB   EQU   IDAPDPRM+8
PDPACB   EQU   IDAPDPRM+4
PDPCALL  EQU   IDAPDPRM
JFCBXNXT EQU   JFCBX+172
@NM00071 EQU   JFCBX+144
JFCBXDEV EQU   JFCBX+140
JFCBXNAM EQU   JFCBX+96
@NM00070 EQU   JFCBX+94
JFCBXVOL EQU   JFCBX+4
@NM00069 EQU   JFCBX+3
JFCBXTTR EQU   JFCBX
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00065 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCAMSTR EQU   JFCBFRID+2
JFCAMCRO EQU   JFCBFRID
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
DEBXSAMB EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBESMVR EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00053 EQU   DEBACS08+12
@NM00052 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00051 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00050 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBSTRHH EQU   DEBDASD+8
DEBBINUM EQU   DEBDASD+4
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBDCBB  EQU   DEBDCBAD+1
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBDEBB  EQU   DEBDEBAD+1
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00049 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00048 EQU   POOLSTAR
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOEJFCB EQU   TIOENTRY+12
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOEWTCT EQU   TIOERLOC
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
TIOCSTEP EQU   TIOT1+8
TIOCNJOB EQU   TIOT1
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBRV032 EQU   UCBFLP1
UCBRV031 EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00047
UCBHALI  EQU   @NM00047
UCBRSV09 EQU   @NM00047
UCBRSV08 EQU   @NM00047
UCBRSV07 EQU   @NM00047
UCBRSV06 EQU   @NM00047
UCBRSV05 EQU   @NM00047
UCBRSV04 EQU   @NM00047
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00044 EQU   UCB
CDBMDSZA EQU   CDBMDSZ+1
CDBSUBPL EQU   CDBMDSZ
CDBMDADA EQU   CDBMDAD+1
CDBNLSZ  EQU   CDBMDAD
XSVRBEND EQU   XRB+152
@NM00043 EQU   XRB+96
XSIRBEND EQU   XRB+96
XIRBEND  EQU   XRB+96
@NM00042 EQU   XRB+32
XLPRBEND EQU   XRB+32
XPRBEND  EQU   XRB+32
@NM00041 EQU   @NM00039+1
@NM00040 EQU   @NM00039
XRBQ     EQU   XRB+24
XFRBEND  EQU   XRB+24
@NM00038 EQU   XRTLPRB+1
XRBWTIS  EQU   XRBFLAG1
@NM00037 EQU   XRBFLAG1
XRBSRSW  EQU   XRBFLAG1
XRBPFSW  EQU   XRBFLAG1
XRREQ    EQU   @NM00036
XLRBEND  EQU   XRB+16
XRBEPA   EQU   XRBEP+1
XRBUSE   EQU   XRBEP
@NM00035 EQU   @NM00031
@NM00034 EQU   @NM00031
XRBIRBBT EQU   @NM00031
XRBREUS  EQU   @NM00031
XRBRSREG EQU   @NM00031
XRBGTMAN EQU   @NM00033
XRBNRENT EQU   @NM00032
XRBREFR  EQU   @NM00029
XRBETXR  EQU   XRBLRBFX
@NM00030 EQU   @NM00029
XRBSVRES EQU   @NM00029
XRBTYPF  EQU   @NM00029
XRBSZY   EQU   XRB+9
XRBCDBPY EQU   XRB+8
XRBNM    EQU   XRB
XRBPFXND EQU   XRBPRFX1+8
XRBPRE   EQU   XRBPRFX1+4
XRBSUC   EQU   XRBPRFX1
XRBQMAJ  EQU   XRBPRFX+4
@NM00027 EQU   XRBPRFX
RBEXSAVE EQU   XRBESA
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00026 EQU   RBBASIC+24
RBOPSWPS EQU   RBOPSWB2
@NM00025 EQU   RBOPSWB2
@NM00024 EQU   XRBPSW
@NM00023 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00022 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00021 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00020 EQU   XSTAB1
@NM00019 EQU   RBBASIC+8
@NM00018 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00017 EQU   RBPRFX
@NM00016 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00014 EQU   TCB+232
TCBRV190 EQU   TCB+229
TCBSVCA1 EQU   TCB+228
TCBJSONQ EQU   TCBTTQE
TCBARBA  EQU   TCBARB+1
TCBRSV85 EQU   TCBARB
TCBGQE   EQU   TCB+216
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBRSV84 EQU   TCBADMP
TCBRSV83 EQU   TCBRSTSK
TCBSVCS  EQU   TCBFLGS7
TCBFWDD  EQU   TCBSTACK
TCBFDDEI EQU   TCBRSV34
TCBFDDT  EQU   TCBRSV33
TCBFDD   EQU   TCBGPECB
TCBSTIJS EQU   TCBNTJS
TCBDSINQ EQU   TCBAPG
TCBRUNJB EQU   TCBMIGR
TCBRUNPN EQU   TCBRV303
TCBFPROT EQU   TCBSPVLK
TCBPANIC EQU   TCBCPU
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBNDGTF EQU   TCBNDSP5
TCBNDSPL EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00013 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBRSV28 EQU   TCBNDINT
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBNDSDA EQU   TCBSRBND
TCBABTER EQU   TCBRV302
TCBTERM  EQU   TCBLJSND
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBVALID
TCBRV301 EQU   TCBRETRY
TCBSYNCH EQU   TCBSUPER
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBSCAT
TCB33E   EQU   TCBXCTL
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBDDRTI EQU   TCBAQE
TCBRSV73 EQU   TCBFTFL3
TCBRSV72 EQU   TCBFTFL3
TCBFTDUM EQU   TCBFTFL3
TCBRSV71 EQU   TCBFTFL3
TCBRSV70 EQU   TCBFTFL3
TCBRSV69 EQU   TCBFTFL3
TCBRSV68 EQU   TCBFTFL3
TCBRSV67 EQU   TCBFTFL3
TCBRSV66 EQU   TCBFTFL2
TCBSYSAB EQU   TCBFTFL2
@NM00012 EQU   TCBFTFL2
TCBRSV65 EQU   TCBFTFL2
TCBLPAGE EQU   TCBFTFL2
TCBDDEN  EQU   TCBFTFL2
TCBRSV62 EQU   TCBFTFL2
TCBRSV61 EQU   TCBFTFL2
TCBENQ   EQU   TCBFTFL1
TCBFTCOM EQU   TCBFTFL1
TCBFTTOP EQU   TCBFTFL1
TCBRSV60 EQU   TCBFTFL1
TCBRSV59 EQU   TCBFTFL1
TCBRSV58 EQU   TCBFTFL1
TCBVTAM  EQU   TCBFTFL1
TCBTCAM  EQU   TCBFTFL1
TCBFTLMP EQU   TCBPQE
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBPIBA
TCBSCHED EQU   TCBPIBT
TCBWRITE EQU   TCBPIBT
TCBSCHTI EQU   TCBPIBT
TCBRSV54 EQU   TCBPIBT
TCBSTOP  EQU   TCBPIBT
TCBSIZE  EQU   TCBPIBT
TCBPART  EQU   TCBPIBT
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBIDF
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBFTJSA
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBRSV53 EQU   TCBDWSTA
TCBPKCHG EQU   TCBRSV08
TCBSCHAB EQU   TCBRSV07
TCBFLREG EQU   TCBRSV06
TCBRSV52 EQU   TCBABGM
TCBSYSER EQU   TCBABTRM
TCBRSV51 EQU   TCBADINP
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBRSV50 EQU   TCBFDSOP
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBSYSTK
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBPOOL  EQU   TCBFT
TCBDMPA  EQU   TCBPDUMP
TCBJSTE  EQU   TCBNONPR
@NM00011 EQU   TCBFERA
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00010 EQU   TCBPMASK
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
@NM00009 EQU   @NM00008
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00007 EQU   CVTFIX+248
@NM00006 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVT      EQU   CVTMAP
MSTRCORE EQU   MSTRBLK+16
MSTRLEN  EQU   MSTRHDR+12
MSTRCODE EQU   MSTRHDR+11
MSTRPOOL EQU   MSTRHDR+10
MSTRKEY  EQU   MSTRHDR+9
@NM00001 EQU   MSTRHDR+8
MSTRLAST EQU   MSTRHDR+4
MSTRNEXT EQU   MSTRHDR
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00302 EQU   @RC00301
@RT00406 EQU   EXIT
@RT00438 EQU   EXIT
@RF00446 EQU   @RC00443
@RF00492 EQU   @RC00489
@RF00516 EQU   @RC00513
@RF00577 EQU   @EL00008
@PB00008 EQU   @PB00009
@RC00590 EQU   @RC00587
@RT00659 EQU   EXIT
@PB00007 EQU   @PB00008
@RC00596 EQU   @RC00590
@PB00006 EQU   @PB00007
@RC00598 EQU   @RC00596
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IDA0192D,(C'PLS0927',0701,77031)
