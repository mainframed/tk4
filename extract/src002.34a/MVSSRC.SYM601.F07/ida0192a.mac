         TITLE 'IDA0192A - VS2-3 VSAM OPEN STRING                      *
                        '
IDA0192A CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA0192A  78.188'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @03,0                                               0001
@PSTART  LA    @12,4095(,@03)                                      0001
         LA    @10,4095(,@12)                                      0001
         USING @PSTART,@03                                         0001
         USING @PSTART+4095,@12                                    0001
         USING @PSTART+8190,@10                                    0001
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
RBPRFXLN EQU 64
RBPRFLNA EQU 32
PRBLEN   EQU 136
SIRBLEN  EQU 200
TIRBLEN  EQU 136
IRBLEN   EQU 128
SVRBLEN  EQU 224
*   RSTATRTN=IDAR192A;              /* INDIC 192A CONTROL    @Y30DSDP*/
         MVC   RSTATRTN(4,RCORE),@CC05315                          0338
*   CALL INIT192A;                  /* MODULE INITIALIZATION         */
         BAL   @14,INIT192A                                        0339
*   RFY                                                            0340
*     FORCORE BASED(OPWCOMWA);      /*                       @Z30SSDP*/
*   GEN(USING @DATD,R13)                                           0341
*   REFS(R13) NOSETS;               /* ADDRESSABILITY                */
         USING @DATD,R13
*   CALL IDA0192F;                  /* OPEN CLUSTERS IN SPHERE       */
         L     @15,@CV05653                                        0342
         BALR  @14,@15                                             0342
*   RSTATRTN=IDAR192A;              /* INDIC 192A CONTROL    @Y30DSDP*/
         L     @11,OPWCOMWA(,RCORE)                                0343
         MVC   RSTATRTN(4,@11),@CC05315                            0343
*   RFY                                                            0344
*     RETCODE RSTD;                                                0344
*   IF RETCODE>4 THEN               /* IF OPEN FAILURE               */
         C     RETCODE,@CF00096                                    0345
         BNH   @RF00345                                            0345
*     DO;                           /* THEN TERMINATE OPEN           */
*       RFY                                                        0347
*         RETCODE UNRSTD;                                          0347
*       MWAOFAIL=ON;                /* IND OPEN FAILURE              */
         OI    MWAOFAIL,B'00010000'                                0348
*       GOTO TERM192A;              /* TERMINATE OPEN                */
         B     TERM192A                                            0349
*     END;                                                         0350
*   CALL BLDDDEB;                   /* BUILD DUMMY DEB FOR ACB       */
@RF00345 BAL   @14,BLDDDEB                                         0351
*TERM192A:                          /* TERMINATION PROCESSING        */
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: TERMINATE OPEN PROCESSING.  IF MODULE WORK AREA      */
*/*             DOES NOT EXIST, THEN RESTORE ACB AND EXIT.  IF OPW   */
*/*             EXISTS, THEN (1) IF CATALOG OPEN, CALL IDA0192C FOR  */
*/*             DUMMY LOCATE, (2) CALL UPSMF TO WRITE SMF RECORDS IF */
*/*             REQUIRED, (3) IF OPEN FAILED, CALL CLNUP, (4) USE    */
*/*             SSL TO UPDATE POINTERS, (5) CALL DEQBUSY TO DEQ      */
*/*             BUSY ENQ'S, (6) IF CHECKPONT/RESTART, CALL           */
*/*             JFCACBMG TO DO JFCB TO ACB MERGE, (7) CALL FREELSTS  */
*/*             TO FREE SAVE LISTS, (8) RESET OPEN INDICATORS IN     */
*/*             VMT'S, (9) INITIALIZE ADDRESS OF INTERFACE ROUTINE   */
*/*             IN USER ACB, (10) CALL IDA0192M TO RELEASE EXCESS    */
*/*             SPACE IN STORAGE BLOCKS.  FREE MODULE WORK AREA,     */
*/*             RESTORE REGISTERS, AND RETURN TO IFG0192A.           */
*/*                                                                  */
*/*   INPUTS:   1. IF MWA EXISTS RCORE NOT EQUAL TO ZERO. IF MWA     */
*/*                DOES NOT EXIST, RCORE EWUALS ZERO.                */
*/*             2. IF OPW EXISTS, OPWUACB POINTS TO USER ACB, ELSE   */
*/*                RACB POINTS TO USER ACB.                          */
*/*                                                                  */
*/*   OUTPUTS:  1. OPEN TERMINATED                                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0352
*   /*****************************************************************/
*   /*                                                               */
*   /* TERMINATE OPEN PROCESSING                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0352
*   IF RCORE=0 THEN                 /* IF MODULE WORK AREA DOES NOT
*                                      EXIST                         */
TERM192A LTR   RCORE,RCORE                                         0352
         BNZ   @RF00352                                            0352
*     DO;                           /* THEN RESTORE ACB              */
*       RFY                                                        0354
*         R1 RSTD;                                                 0354
*       RFY                                                        0355
*         FORCORE BASED(RCORE);                                    0355
*       RCORE=R1;                   /* RESTORE PTR TO COMMON WA      */
         LR    RCORE,R1                                            0356
*       RFY                                                        0357
*         R1 UNRSTD;                                               0357
*       ACBDDNM=PDPTIOT->TIOEDDNM;  /* RESTORE ACB DD NAME           */
         L     @11,PDPTIOT+280(,RCORE)                             0358
         MVC   ACBDDNM(8,RACB),TIOEDDNM(@11)                       0358
*       ACBEXFG='1'B;               /* RESET LOCK BIT                */
*       ACBIOSFG=OFF;               /* RESET BUSY BIT                */
         OI    ACBEXFG(RACB),B'00000010'                           0360
         NI    ACBIOSFG(RACB),B'11111110'                          0360
*       RFY                                                        0361
*         FORCORE BASED(OPWCOMWA);                                 0361
*     END;                                                         0362
*   ELSE                                                           0363
*     DO;                           /* ELSE MODULE WORK AREA EXISTS  */
         B     @RC00352                                            0363
@RF00352 DS    0H                                                  0364
*       IF MWAOPWRK=ON THEN         /* IF OPW EXISTS                 */
         TM    MWAOPWRK,B'10000000'                                0364
         BNO   @RF00364                                            0364
*         DO;                       /* THEN PERFORM NORMAL         0365
*                                      TERMINATION                   */
*           RACB=OPWUACB;           /* POINT TO USER ACB             */
         L     RACB,OPWUACB(,RCORE)                                0366
*           PDPFUNC=PDF95;          /* SET FUNCTION CODE             */
         L     @11,OPWCOMWA(,RCORE)                                0367
         MVI   PDPFUNC+280(@11),X'5F'                              0367
*           MWAEXIT=ON;             /* TERMINATION IN CONTROL        */
         OI    MWAEXIT,B'00000010'                                 0368
*           IF MWARSMAC=ON THEN     /* IF ACBMACRF NEEDS TO BE     0369
*                                      RESTORED                      */
         TM    MWARSMAC,B'00100000'                                0369
         BNO   @RF00369                                            0369
*             ACBMACRF=MWAMACRF;    /* THEN RESTORE ACBMACRF         */
         MVC   ACBMACRF(2,RACB),MWAMACRF                           0370
*           IF OPWCAT=ON×OPWSCRA=ON×OPWUCRA=ON THEN/* IF CATLG, SCRA
*                                      OR UCRA                       */
@RF00369 TM    OPWCAT(RCORE),B'11000000'                           0371
         BNZ   @RT00371                                            0371
         TM    OPWUCRA(RCORE),B'10000000'                          0371
         BNO   @RF00371                                            0371
@RT00371 DS    0H                                                  0372
*             DO;                   /* THEN DO DUMMY LOCATE          */
*               IF MWAOFAIL=OFF THEN/* IF NO ERRORS                  */
         TM    MWAOFAIL,B'00010000'                                0373
         BNZ   @RF00373                                            0373
*                 ACBOPEN=ON;       /* THEN IND CATLG OPENED         */
         OI    ACBOPEN(RACB),B'00010000'                           0374
*               MWACTID=DUM;        /* IND DUMMY LOCATE REQUEST      */
@RF00373 MVI   MWACTID,X'1C'                                       0375
*               MWACTSFI=ADDR(IDASFI);/* PT TO SFI AREA              */
         LA    @11,MWASFI                                          0376
         STCM  @11,7,MWACTSFI                                      0376
*               IDASFI=IDASFI&&IDASFI;/* ZERO SFI AREA               */
         XC    IDASFI(12,@11),IDASFI(@11)                          0377
*               RFY                                                0378
*                (R1,                                              0378
*                 R5) RSTD;                                        0378
*               ACBINRTN=BIBINTRF;  /* INIT ADDR OF INTERFACE ROUTINE
*                                      IN ACB                        */
         L     @11,OPWBIB(,RCORE)                                  0379
         L     @11,BIBINTRF(,@11)                                  0379
         ST    @11,ACBINRTN(,RACB)                                 0379
*               R5=ADDR(IDAAMB)-ADDR(AMBCACB)+ADDR(OPWUACB);/*     0380
*                                      SIMULATE AMB FOR DUMMY LOCATE
*                                      LOAD OF CATLG ACB ADDRESS     */
         LA    R5,OPWUACB(,RCORE)                                  0380
         AL    R5,@CF05876                                         0380
*               R1=ADDR(MWACATPL);  /* PT TO CATLG INTRF PARM LIST   */
         LA    R1,MWACATPL                                         0381
*               RSTATRTN=IDAR192C;  /* INDIC 192C CONTROL    @Y30DSDP*/
         L     @11,OPWCOMWA(,RCORE)                                0382
         MVC   RSTATRTN(4,@11),@CC05319                            0382
*               CALL IDA0192C;      /* DO DUMMY LOCATE               */
         L     @15,@CV05659                                        0383
         BALR  @14,@15                                             0383
*               RFY                                                0384
*                 RETCODE RSTD;                                    0384
*               RSTATRTN=IDAR192A;  /* INDIC 192A CONTROL    @Y30DSDP*/
         L     @14,OPWCOMWA(,RCORE)                                0385
         MVC   RSTATRTN(4,@14),@CC05315                            0385
*               IF RETCODE>0 THEN   /* IF ERROR FROM CATALOG         */
         SLR   @11,@11                                             0386
         CR    RETCODE,@11                                         0386
         BNH   @RF00386                                            0386
*                 DO;               /* THEN WRITE ERROR MESSAGE      */
*                   MWAPDPRM=RETCODE;/* LD RETCODE                   */
         ST    RETCODE,MWAPDPRM                                    0388
*                   RFY                                            0389
*                     RETCODE UNRSTD;                              0389
*                   PDPCODE=MWAPCODE;/* LOAD PROBLEM CODE            */
         AL    @14,@CF05875                                        0390
         IC    @00,MWAPCODE                                        0390
         STC   @00,PDPCODE(,@14)                                   0390
*                   PDPFUNC=MWAPFUNC;/* LOAD FUNCTION CODE           */
         IC    @00,MWAPFUNC                                        0391
         STC   @00,PDPFUNC(,@14)                                   0391
*                   PDPSFC=MWAPSFC; /* LOAD SUB-FUNCTION CODE        */
         IC    @00,MWAPSFC                                         0392
         STC   @00,PDPSFC(,@14)                                    0392
*                   IF PDPSFC=0&    /* IF NO SUB-FUNCTION CODE       */
*                       SFIRETCD^=0 THEN/* AND SFI INITIALIZED       */
         CLI   PDPSFC(@14),0                                       0393
         BNE   @RF00393                                            0393
         LA    @15,MWASFI                                          0393
         C     @11,SFIRETCD(,@15)                                  0393
         BE    @RF00393                                            0393
*                     PDPSFI=ADDR(IDASFI);/* THEN PT TO SFI AREA     */
         ST    @15,PDPSFI(,@14)                                    0394
*                   ELSE            /* IF NOT                        */
*                     PDPSFI=0;     /* IND NO SFI                    */
         B     @RC00393                                            0395
@RF00393 L     @11,OPWCOMWA(,RCORE)                                0395
         SLR   @00,@00                                             0395
         ST    @00,PDPSFI+280(,@11)                                0395
*                   MWAOFAIL=ON;    /* SET ERROR INDICATOR           */
@RC00393 OI    MWAOFAIL,B'00010000'                                0396
*                   CALL PROBDT;    /* PROCESS ERROR                 */
         BAL   @14,PROBDT                                          0397
*                   PDPSFI=0;       /* ZERO PTR TO SFI AREA          */
         LA    @11,280                                             0398
         AL    @11,OPWCOMWA(,RCORE)                                0398
         SLR   @00,@00                                             0398
         ST    @00,PDPSFI(,@11)                                    0398
*                   PDPSFC=0;       /* ZERO SUB=FUNCTION CODE        */
         MVI   PDPSFC(@11),X'00'                                   0399
*                 END;                                             0400
*               ACBOPEN=OFF;        /* RESET OPEN INDR IN CATLG ACB  */
@RF00386 NI    ACBOPEN(RACB),B'11101111'                           0401
*               RFY                                                0402
*                (R1,                                              0402
*                 R5) UNRSTD;                                      0402
*             END;                                                 0403
*           IF OPWDUMMY=OFF&        /* IF NOT DUMMY DATA SET         */
*               CVTSMCA^=0&         /* AND SMCA EXISTS               */
*               SMCADSA=ON&         /* AND DS INFO REQUIRED          */
*               (SMCAUSER=ON&SMCAMAN=ON)&/* AND SMF RECORDING        */
*               TCBTCTB^=0&         /* AND TCT EXIST AND     @ZA29395*/
*               OPWCACB^=0&OPWCACB->ACBUAPTR^=0 THEN/* CAT ACB EXIST
*                                                            @ZA07208*/
@RF00371 TM    OPWDUMMY(RCORE),B'00010000'                         0404
         BNZ   @RF00404                                            0404
         SLR   @11,@11                                             0404
         L     @05,FLCCVT                                          0404
         L     @05,CVTSMCA(,@05)                                   0404
         CR    @05,@11                                             0404
         BE    @RF00404                                            0404
         TM    SMCADSA(@05),B'00010000'                            0404
         BNO   @RF00404                                            0404
         TM    SMCAUSER(@05),B'11000000'                           0404
         BNO   @RF00404                                            0404
         L     @05,MWATCB                                          0404
         L     @05,TCBTCTB-1(,@05)                                 0404
         LA    @05,0(,@05)                                         0404
         LTR   @05,@05                                             0404
         BZ    @RF00404                                            0404
         L     @05,OPWCACB(,RCORE)                                 0404
         CR    @05,@11                                             0404
         BE    @RF00404                                            0404
         C     @11,ACBUAPTR(,@05)                                  0404
         BE    @RF00404                                            0404
*             CALL UPSMF;           /* UPDATE SMF DATA SET           */
         BAL   @14,UPSMF                                           0405
*           IF MWAOFAIL=ON THEN     /* IF OPEN FAILURE               */
@RF00404 TM    MWAOFAIL,B'00010000'                                0406
         BNO   @RF00406                                            0406
*             CALL CLNUP;           /* CLEANUP PROCESSING            */
         BAL   @14,CLNUP                                           0407
*           ELSE                    /* NOT OPEN FAILURE              */
*             DO;                                                  0408
         B     @RC00406                                            0408
@RF00406 DS    0H                                                  0409
*               ACBOPEN=ON;         /* IND ACB IS OPEN               */
         OI    ACBOPEN(RACB),B'00010000'                           0409
*               RFY                                                0410
*                 IFGACB BASED(RPLDACB);                           0410
*               RFY                                                0411
*                 IDAAMBL BASED(ACBAMBL);                          0411
*               IF OPWUPGOP=ON THEN /* IF UPGRADE SET OPENED         */
         TM    OPWUPGOP(RCORE),B'00100000'                         0412
         BNO   @RF00412                                            0412
*                 DO;               /* THEN UPDATE UPT               */
*                   OPWBAMBL->AMBLDTA->AMBUPX=ON;/* IND UPGRADE SET
*                                      EXISTS IN DATA AMB FOR BASE   */
         L     @11,OPWBAMBL(,RCORE)                                0414
         L     @11,AMBLDTA(,@11)                                   0414
         OI    AMBUPX(@11),B'00000010'                             0414
*                   DO MWAI=1 TO UPTNOENT;/* SCAN UPT                */
         LA    @11,1                                               0415
         B     @DE00415                                            0415
@DL00415 DS    0H                                                  0416
*                     IF UPTF1NOP(MWAI)=OFF THEN/* IF AIX OPEN       */
         MH    @11,@CH00033                                        0416
         L     @05,OPWUPT(,RCORE)                                  0416
         ALR   @11,@05                                             0416
         TM    UPTF1NOP-12(@11),B'00010000'                        0416
         BNZ   @RF00416                                            0416
*                       DO;         /* THEN IND PARTICIPATES IN    0417
*                                      UPGRADE                       */
*                         AMBLDTA->AMBPUG=ON;/* FLAG DATA AMB        */
         L     @11,MWAI                                            0418
         MH    @11,@CH00033                                        0418
         L     @11,UPTRPL-12(@11,@05)                              0418
         L     @11,RPLDACB(,@11)                                   0418
         L     @11,ACBAMBL(,@11)                                   0418
         L     @05,AMBLDTA(,@11)                                   0418
         OI    AMBPUG(@05),B'10000000'                             0418
*                         AMBLIX->AMBPUG=ON;/* FLAG INDEX AMB        */
         L     @11,AMBLIX(,@11)                                    0419
         OI    AMBPUG(@11),B'10000000'                             0419
*                       END;                                       0420
*                   END;                                           0421
@RF00416 LA    @11,1                                               0421
         AL    @11,MWAI                                            0421
@DE00415 ST    @11,MWAI                                            0421
         L     @05,OPWUPT(,RCORE)                                  0421
         SLR   @15,@15                                             0421
         IC    @15,UPTNOENT(,@05)                                  0421
         CR    @11,@15                                             0421
         BNH   @DL00415                                            0421
*                 END;                                             0422
*               RFY                                                0423
*                 IFGACB BASED(RACB);                              0423
@RF00412 DS    0H                                                  0424
*               RFY                                                0424
*                 IDAAMBL BASED(MWAXAMBL);                         0424
*                                                                  0424
*               /*****************************************************/
*               /*                                                   */
*               /* USE SWAP SAVE LIST TO CHAIN ADDED BLOCKS          */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0425
*               RFY                                                0425
*                 IDASSL BASED(MWAPTRA);                           0425
*               MWAPTRA=OPWSSL;     /* PT TO FIRST SSL               */
         L     @11,OPWSSL(,RCORE)                                  0426
         ST    @11,MWAPTRA                                         0426
*               RFY                                                0427
*                (R6,                                              0427
*                 R7) RSTD;                                        0427
*               DO WHILE(MWAPTRA^=0);/* SEARCH SWAP SAVE LISTS       */
         B     @DE00428                                            0428
@DL00428 DS    0H                                                  0429
*                 DO MWAI=1 TO SSLACEN;/* SWAP PTR'S IN THIS SSL     */
         LA    @11,1                                               0429
         B     @DE00429                                            0429
@DL00429 DS    0H                                                  0430
*                   R7=SSLSWAP(MWAI);/* LOAD SWAP VALUE              */
         L     @05,MWAPTRA                                         0430
         SLA   @11,3                                               0430
         L     R7,SSLSWAP-8(@11,@05)                               0430
*                   R6=SWAPWORD;    /* LOAD VALUE TO REPLACE         */
         L     @11,SSLSWPTR-8(@11,@05)                             0431
         L     R6,SWAPWORD(,@11)                                   0431
*                   DO UNTIL(R7=SWAPWORD);/* SWAP CONTENTS           */
@DL00432 DS    0H                                                  0433
*                     CS(R6,R7,SWAPWORD);/* COMPARE AND SWAP         */
         L     @11,MWAI                                            0433
         SLA   @11,3                                               0433
         L     @05,MWAPTRA                                         0433
         L     @11,SSLSWPTR-8(@11,@05)                             0433
         CS    R6,@07,SWAPWORD(@11)                                0433
*                   END;                                           0434
@DE00432 L     @11,MWAI                                            0434
         LR    @05,@11                                             0434
         SLA   @05,3                                               0434
         L     @01,MWAPTRA                                         0434
         L     @05,SSLSWPTR-8(@05,@01)                             0434
         C     R7,SWAPWORD(,@05)                                   0434
         BNE   @DL00432                                            0434
*                 END;                                             0435
         AL    @11,@CF00054                                        0435
@DE00429 ST    @11,MWAI                                            0435
         L     @05,MWAPTRA                                         0435
         CH    @11,SSLACEN(,@05)                                   0435
         BNH   @DL00429                                            0435
*                 MWAPTRA=SSLNXPTR; /* POINT TO NEXT SWAP SAVE LIST  */
         L     @11,MWAPTRA                                         0436
         L     @11,SSLNXPTR(,@11)                                  0436
         ST    @11,MWAPTRA                                         0436
*               END;                                               0437
@DE00428 L     @11,MWAPTRA                                         0437
         LTR   @11,@11                                             0437
         BNZ   @DL00428                                            0437
*               RFY                                                0438
*                 IDASSL BASED(OPWSSL);                            0438
*               RFY                                                0439
*                (R6,                                              0439
*                 R7) UNRSTD;                                      0439
*             END;                                                 0440
*           IF MWAENQPT^=0 THEN     /* IF ENQ BUSY DONE              */
@RC00406 L     @11,MWAENQPT                                        0441
         LTR   @11,@11                                             0441
         BZ    @RF00441                                            0441
*             CALL DEQBUSY;         /* DEQ BUSY AND FREE PARM LIST   */
*                                                                  0442
         BAL   @14,DEQBUSY                                         0442
*           /*********************************************************/
*           /*                                                       */
*           /* SCAN VMT'S AND RESET VOLUME BEING PROCESSED BY OPEN   */
*           /* INDICATOR                                             */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0443
*           IF OPWBIB^=0&MWAOFAIL=OFF/* IF OPEN SUCCESSFUL   @Z30SSDP*/
*               &OPWDUMMY=OFF THEN  /* AND NOT DUMMY         @Z30SSDP*/
@RF00441 L     @11,OPWBIB(,RCORE)                                  0443
         LTR   @11,@11                                             0443
         BZ    @RF00443                                            0443
         TM    MWAOFAIL,B'00010000'                                0443
         BNZ   @RF00443                                            0443
         TM    OPWDUMMY(RCORE),B'00010000'                         0443
         BNZ   @RF00443                                            0443
*             DO;                   /* THEN SCAN VMT'S               */
*               RFY                                                0445
*                 IDAVMT BASED(MWAPTRA);                           0445
*               MWAPTRA=BIBVMT;     /* PT TO FIRST VMT               */
         L     @11,BIBVMT(,@11)                                    0446
         ST    @11,MWAPTRA                                         0446
*               DO WHILE(MWAPTRA^=0);/* SEARCH VMT CHAIN             */
         B     @DE00447                                            0447
@DL00447 DS    0H                                                  0448
*                 DO MWAI=1 TO VMTNOVOL;/* SCAN ENTRIES IN VMT       */
         LA    @11,1                                               0448
         B     @DE00448                                            0448
@DL00448 DS    0H                                                  0449
*                   VMTOPEN(MWAI)=OFF;/* RESET IN PROCESS INDICATOR  */
         LR    @05,@11                                             0449
         SLA   @05,4                                               0449
         L     @01,MWAPTRA                                         0449
         ALR   @01,@05                                             0449
         NI    VMTOPEN-16(@01),B'01111111'                         0449
*                 END;                                             0450
         AL    @11,@CF00054                                        0450
@DE00448 ST    @11,MWAI                                            0450
         L     @05,MWAPTRA                                         0450
         CH    @11,VMTNOVOL(,@05)                                  0450
         BNH   @DL00448                                            0450
*                 MWAPTRA=VMTNXT;   /* POINT TO NEXT VMT ON CHAIN    */
         L     @11,MWAPTRA                                         0451
         L     @11,VMTNXT(,@11)                                    0451
         ST    @11,MWAPTRA                                         0451
*               END;                                               0452
@DE00447 L     @11,MWAPTRA                                         0452
         LTR   @11,@11                                             0452
         BNZ   @DL00447                                            0452
*               RFY                                                0453
*                 IDAVMT BASED(BIBVMT);                            0453
*               ACBINRTN=BIBINTRF;  /* INIT ADDR OF INTERFACE ROUTINE
*                                      IN ACB                        */
         L     @11,OPWBIB(,RCORE)                                  0454
         L     @11,BIBINTRF(,@11)                                  0454
         ST    @11,ACBINRTN(,RACB)                                 0454
*               OPWVSMPL=OPWVSMPL&&OPWVSMPL;/* ZERO VSM PARM LIST    */
         XC    OPWVSMPL(16,RCORE),OPWVSMPL(RCORE)                  0455
*               OPWVMTYP=FREESPH;   /* IND FREE EXCESS SPACE IN    0456
*                                      SPHERE BLOCKS                 */
         MVI   OPWVMTYP(RCORE),X'83'                               0456
*               CALL IDA0192M;      /* FREE EXCESS SPACE             */
         L     @15,@CV05673                                        0457
         BALR  @14,@15                                             0457
*               RSTATRTN=IDAR192A;  /* INDIC 192A CONTROL    @Y30DSDP*/
         L     @11,OPWCOMWA(,RCORE)                                0458
         MVC   RSTATRTN(4,@11),@CC05315                            0458
*               IF OPWFLGS1^=0&     /* CHK IF CAT OR SCRA    @Z40WSRL*/
*                   OPWSDS=OFF THEN /* AND NOT SYSTEM DATA SET     0459
*                                                            @Z40WSRL*/
         CLI   OPWFLGS1(RCORE),0                                   0459
         BE    @RF00459                                            0459
         TM    OPWSDS(RCORE),B'00100000'                           0459
         BNZ   @RF00459                                            0459
*                 DO;               /* YES,                  @Z30SSDP*/
*                   CALL DECHVGTT;  /* YES, DECHAIN VGTT     @Y30DSDP*/
         BAL   @14,DECHVGTT                                        0461
*                   MWAGFSP=GSRPOOL;/* SET SUBPOOL           @Z30SSDP*/
         MVI   MWAGFSP,X'F1'                                       0462
*                   MWAGFLEN=LENGTH(IDAVGTT);/* SET VGTT LENGTH    0463
*                                                            @Z30SSDP*/
         MVC   MWAGFLEN(3),@CF00349+1                              0463
*                   MWAGFADR=MWAVGTTP;/* SET ADDR OF VGTT    @Z30SSDP*/
         L     @11,MWAVGTTP                                        0464
         ST    @11,MWAGFADR                                        0464
*                   CALL FREECORE;  /* GO FREE VGTT          @Z30SSDP*/
         BAL   @14,FREECORE                                        0465
*                   BIBVGTT=0;      /* ZERO VGTT ADDR        @Z30SSDP*/
         L     @11,OPWBIB(,RCORE)                                  0466
         SLR   @05,@05                                             0466
         ST    @05,BIBVGTT(,@11)                                   0466
*                 END;              /*                       @Z30SSDP*/
*             END;                                                 0468
*           ELSE                    /* ELSE, BIB DOES NOT EXIST      */
*             IF MWAOFAIL=ON THEN   /* IF OPEN FAILED                */
         B     @RC00443                                            0469
@RF00443 TM    MWAOFAIL,B'00010000'                                0469
         BNO   @RF00469                                            0469
*               DO;                 /* THEN RESET ACB                */
*                 ACBDDNM=TIOEDDNM; /* RESTORE DDNAME                */
         L     @11,OPWTIOT(,RCORE)                                 0471
         MVC   ACBDDNM(8,RACB),TIOEDDNM(@11)                       0471
*                 ACBINRTN=0;       /* ZERO PTR TO INTERFACE ROUTINE */
         SLR   @11,@11                                             0472
         ST    @11,ACBINRTN(,RACB)                                 0472
*                 ACBCROPS='00'B;   /* RESET C/R OPTIONS             */
         NI    ACBCROPS(RACB),B'00111111'                          0473
*                 IF OPWBCON=0&     /* IF PRIME OPEN         @Z30SSDP*/
*                     OPWBIB^=0 THEN/* AND BIB EXISTS        @Z30SSDP*/
         C     @11,OPWBCON(,RCORE)                                 0474
         BNE   @RF00474                                            0474
         L     @05,OPWBIB(,RCORE)                                  0474
         CR    @05,@11                                             0474
         BE    @RF00474                                            0474
*                   DO;             /* FREE PROT SPH BLKS    @Z30SSDP*/
*                     MWAGFADR=OPWBIB;/* GET PTR TO BIB      @Z30SSDP*/
         ST    @05,MWAGFADR                                        0476
*                     MWAGFLEN=LENGTH(IDABIB);/* GET LENGTH OF BIB 0477
*                                                            @Z30SSDP*/
         MVC   MWAGFLEN(3),@CF01739+1                              0477
*                     IF OPWFLGS1^=0 THEN/* IF SYS DATA SET  @Z30DSDP*/
         CLI   OPWFLGS1(RCORE),0                                   0478
         BE    @RF00478                                            0478
*                       MWAGFSP=CATPOOL;/* IND SQA SUBPOOL   @Z30DSDP*/
         MVI   MWAGFSP,X'E7'                                       0479
*                     ELSE          /*                       @Z30DSDP*/
*                       IF ACBGSR=ON×ACBCBIC=ON THEN/* IF GSR OR   0480
*                                      CONTROL BLKS IN COMMON      0480
*                                      SPECIFIED             @ZA16012*/
         B     @RC00478                                            0480
@RF00478 TM    ACBGSR(RACB),B'00100000'                            0480
         BO    @RT00480                                            0480
         TM    ACBCBIC(RACB),B'00100000'                           0480
         BNO   @RF00480                                            0480
@RT00480 DS    0H                                                  0481
*                         MWAGFSP=GSRPOOL;/* YES, USE SUBPOOL 241  0481
*                                                            @Z30DSDP*/
         MVI   MWAGFSP,X'F1'                                       0481
*                       ELSE        /* NO, SET NORMAL POOL   @Z30DSDP*/
*                         MWAGFSP=BIBPOOL;/* SET SUBPOOL     @Z30DSDP*/
         B     @RC00480                                            0482
@RF00480 MVI   MWAGFSP,X'FC'                                       0482
*                     CALL FREECORE;/* GO FREE BIB           @Z30SSDP*/
@RC00480 DS    0H                                                  0483
@RC00478 BAL   @14,FREECORE                                        0483
*                     IF ACBLSR=OFF THEN/* CHK FOR NOT LSR   @Z30SSDP*/
         TM    ACBLSR(RACB),B'01000000'                            0484
         BNZ   @RF00484                                            0484
*                       VGTTBIB=0;  /* ZERO BIB PTR IN VGTT  @Z30SSDP*/
         L     @11,OPWBIB(,RCORE)                                  0485
         L     @11,BIBVGTT(,@11)                                   0485
         SLR   @05,@05                                             0485
         ST    @05,VGTTBIB(,@11)                                   0485
*                     OPWBIB=0;     /* INDICATE BIB FREED    @Z30SSDP*/
@RF00484 SLR   @11,@11                                             0486
         ST    @11,OPWBIB(,RCORE)                                  0486
*                   END;            /*                       @Z30SSDP*/
*                 IF MWAVGTTP^=0 THEN/* CHK IF VGTT EXISTS   @Z30SSDP*/
@RF00474 L     @11,MWAVGTTP                                        0488
         LTR   @11,@11                                             0488
         BZ    @RF00488                                            0488
*                   DO;             /* YES, DECHAIN AND FREE @Z30SSDP*/
*                     CALL DECHVGTT;/* GO DECHAIN VGTT       @Z30SSDP*/
         BAL   @14,DECHVGTT                                        0490
*                     MWAGFSP=GSRPOOL;/* SET SUBPOOL         @Z30SSDP*/
         MVI   MWAGFSP,X'F1'                                       0491
*                     MWAGFLEN=LENGTH(IDAVGTT);/* SET LENGTH @Z30SSDP*/
         MVC   MWAGFLEN(3),@CF00349+1                              0492
*                     MWAGFADR=MWAVGTTP;/* SET PTR TO VGTT   @Z30SSDP*/
         L     @11,MWAVGTTP                                        0493
         ST    @11,MWAGFADR                                        0493
*                     CALL FREECORE;/* GO FREE VGTT          @Z30SSDP*/
         BAL   @14,FREECORE                                        0494
*                   END;            /*                       @Z30SSDP*/
*               END;                /*                       @Z30SSDP*/
@RF00488 DS    0H                                                  0497
*           IF OPWBIB^=0 THEN       /* CHK IF BIB EXISTS     @Z30SSRL*/
@RF00469 DS    0H                                                  0497
@RC00443 L     @11,OPWBIB(,RCORE)                                  0497
         LTR   @11,@11                                             0497
         BZ    @RF00497                                            0497
*             CALL FREELSTS;        /* FREE SAVE LISTS       @Z30SSRL*/
         BAL   @14,FREELSTS                                        0498
*           ACBEXFG='1'B;           /* RESET LOCK BIT                */
@RF00497 DS    0H                                                  0500
*           ACBIOSFG=OFF;           /* RESET BUSY BIT                */
*                                                                  0500
         OI    ACBEXFG(RACB),B'00000010'                           0500
         NI    ACBIOSFG(RACB),B'11111110'                          0500
*           /*********************************************************/
*           /*                                                       */
*           /* FREE IDAOPWRK                                         */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0501
*           MWAGFADR=RCORE;         /* INIT ADDR OF OPW              */
         ST    RCORE,MWAGFADR                                      0501
*           RFY                                                    0502
*             FORCORE BASED(RCORE); /*                       @Z30SSDP*/
*           MWAGFSP=OPWSUBPL;       /* INIT SUBPOOL OF OPW           */
         IC    @11,OPWSUBPL(,RCORE)                                0503
         STC   @11,MWAGFSP                                         0503
*           MWAGFLEN=OPWLENTH;      /* INIT LENGTH OF OPW            */
         MVC   MWAGFLEN(3),OPWLENTH(RCORE)                         0504
*           OPWID=OPWID&&OPWID;     /* ZERO EBCDIC ID                */
         XC    OPWID(8,RCORE),OPWID(RCORE)                         0505
*           RCORE=OPWCOMWA;         /* SAVE COMMON OPEN WA   @Z30SSDP*/
         L     RCORE,OPWCOMWA(,RCORE)                              0506
*           CALL FREECORE;          /* FREE OPW                      */
         BAL   @14,FREECORE                                        0507
*           RFY                                                    0508
*             IDAAMBL BASED(ACBAMBL);/*                      @Z30SSDP*/
*           IF MWAOFAIL=OFF THEN    /* IF OPEN OK            @Z30SSDP*/
         TM    MWAOFAIL,B'00010000'                                0509
         BNZ   @RF00509                                            0509
*             DO;                   /* YES, RESET ACB PTRS   @Z30SSDP*/
*               AMBLACB=DXUACBAD;   /* PT TO USER ACB        @Z30SSDP*/
         L     @11,ACBAMBL(,RACB)                                  0511
         L     @05,DXUACBAD-1(,RCORE)                              0511
         LA    @05,0(,@05)                                         0511
         ST    @05,AMBLACB(,@11)                                   0511
*               ACBDEB->DEBDCBB=DXUACBAD;/* PT TO USER ACB   @Z30SSDP*/
         L     @15,ACBDEB-1(,RACB)                                 0512
         LA    @15,0(,@15)                                         0512
         STCM  @05,7,DEBDCBB(@15)                                  0512
*               RFY                                                0513
*                 RDEB RSTD;        /*                       @Z30SSDP*/
*               RDEB=ACBDEB;        /* ESTAB DEB ADDR        @Z30SSDP*/
         LR    RDEB,@15                                            0514
*               RFY                                                0515
*                 DEBBASIC BASED(RDEB);/*                    @Z30SSDP*/
*               RFY                                                0516
*                 DEB BASED(RDEB-LENGTH(DEB));/*             @Z30SSDP*/
*               DEBXCDCB=OFF;       /* ACB CLOSABLE BY TASK CLOSE  0517
*                                                            @Z30SSDP*/
         LR    @05,RDEB                                            0517
         AL    @05,@CF05547                                        0517
         L     @05,DEBXTNP-28(,@05)                                0517
         NI    DEBXCDCB(@05),B'01111111'                           0517
*               RFY                                                0518
*                 DEBBASIC BASED(MWADEB);/*                  @Z30SSDP*/
*               RFY                                                0519
*                 DEB BASED(DEBAPPAD);/*                     @Z30SSDP*/
*               RFY                                                0520
*                 RDEB UNRSTD;      /*                       @Z30SSDP*/
*               RFY                                                0521
*                 R1 RSTD;          /*                       @Z30SSDP*/
*               IF AMBLDUMY=OFF THEN/* IF NOT DUMMY DATASET  @ZA12911*/
         L     @11,ACBAMBL(,RACB)                                  0522
         TM    AMBLDUMY(@11),B'00000001'                           0522
         BNZ   @RF00522                                            0522
*                 DO;               /* NO                    @ZA11111*/
*                   R1=AMBLDTA->AMBPH+LENGTH(IDAPLHDR);/* GET 1ST PLH
*                                      ADDR                  @Z30SSDP*/
         L     @11,AMBLDTA(,@11)                                   0524
         LA    R1,16                                               0524
         AL    R1,AMBPH(,@11)                                      0524
*                   RFY                                            0525
*                     IDAPLH BASED(R1);/*                    @Z30SSDP*/
*                   DO WHILE(R1^=0);/* LOOP THRU PLH'S       @Z30SSDP*/
         B     @DE00526                                            0526
@DL00526 DS    0H                                                  0527
*                     IF PLHACB=DXPACBAD THEN/* CHK IF ACB COPY    0527
*                                                            @Z30SSDP*/
         L     @11,PLHACB(,R1)                                     0527
         L     @05,DXPACBAD-1(,RCORE)                              0527
         LA    @05,0(,@05)                                         0527
         CR    @11,@05                                             0527
         BNE   @RF00527                                            0527
*                       PLHACB=0;   /* SET ACB PT TO ZERO    @Z30SSDP*/
         SLR   @11,@11                                             0528
         ST    @11,PLHACB(,R1)                                     0528
*                     R1=PLHCHAIN;  /* GET NEXT PLH ADDR     @Z30SSDP*/
@RF00527 L     R1,PLHCHAIN(,R1)                                    0529
*                   END;            /*                       @Z30SSDP*/
@DE00526 SLR   @11,@11                                             0530
         CR    R1,@11                                              0530
         BNE   @DL00526                                            0530
*                   RFY                                            0531
*                     R1 UNRSTD;    /*                       @Z30SSDP*/
*                   RFY                                            0532
*                     IDAPLH BASED; /*                       @Z30SSDP*/
*                   IF(ACBCAT=ON×ACBSCRA=ON×ACBUCRA=ON)&ACBSDS=OFF THEN
         TM    ACBCAT(RACB),B'00011100'                            0533
         BZ    @RF00533                                            0533
         TM    ACBSDS(RACB),B'00000010'                            0533
         BNZ   @RF00533                                            0533
*                                   /* CHECK IF OPEN CAT     @Z40WSRL*/
*                     DO;           /* YES, SET ACB PTR      @Z30SSDP*/
*                       AMBLDTA->AMBCACB=DXUACBAD;/* SET ACB PT    0535
*                                                            @Z30SSDP*/
         L     @05,ACBAMBL(,RACB)                                  0535
         L     @15,AMBLDTA(,@05)                                   0535
         L     @14,DXUACBAD-1(,RCORE)                              0535
         LA    @14,0(,@14)                                         0535
         ST    @14,AMBCACB(,@15)                                   0535
*                       AMBLDTA->AMBCDSN=DXUACBAD;/* SET ACB PTR   0536
*                                                            @Z30SSDP*/
         STCM  @14,7,AMBCDSN(@15)                                  0536
*                       IF AMBLIX^=0 THEN/* CHK IF KSDS      @Z30SSDP*/
         L     @05,AMBLIX(,@05)                                    0537
         CR    @05,@11                                             0537
         BE    @RF00537                                            0537
*                         DO;       /*                       @Z30SSDP*/
*                           AMBLIX->AMBCACB=DXUACBAD;/* SET ACB PT 0539
*                                                            @Z30SSDP*/
         ST    @14,AMBCACB(,@05)                                   0539
*                           AMBLIX->AMBCDSN=DXUACBAD;/* SET ACB PTR
*                                                            @Z30SSDP*/
         STCM  @14,7,AMBCDSN(@05)                                  0540
*                         END;      /*                       @Z30SSDP*/
*                     END;          /*                       @Z30SSDP*/
@RF00537 DS    0H                                                  0543
*                 END;              /*                       @ZA11111*/
@RF00533 DS    0H                                                  0544
*             END;                  /*                       @Z30SSDP*/
@RF00522 DS    0H                                                  0545
*           RFY                                                    0545
*             FORCORE BASED(OPWCOMWA);/*                     @Z30SSDP*/
@RF00509 DS    0H                                                  0546
*           RFY                                                    0546
*             IDAAMBL BASED(MWAXAMBL);/*                     @Z30SSDP*/
*         END;                                                     0547
*       RFY                                                        0548
*        (R0,                                                      0548
*         R1) RSTD;                                                0548
*                                                                  0548
@RF00364 DS    0H                                                  0549
*       /*************************************************************/
*       /*                                                           */
*       /* FREE MODULE WORK AREA                                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0549
*       MWAGFSP=WKPOOL;             /* INIT SUBPOOL                  */
         MVI   MWAGFSP,X'FC'                                       0549
*       GEN(L R0,@SIZDATD)                                         0550
*       SETS(R0);                   /* INIT SIZE OF MODULE WORK AREA */
         L R0,@SIZDATD
*       MWAGFLEN=R0;                                               0551
         STCM  R0,7,MWAGFLEN                                       0551
*       R1=R13;                     /* INIT PTR TO MOD WORK AREA     */
         LR    R1,R13                                              0552
*       R0=MWAGFR0;                 /* INIT SUBPOOL AND LENGTH       */
         L     R0,MWAGFR0                                          0553
*       GEN(L R13,4(R13));          /* RESTORE PTR TO CALLER'S SAVE
*                                      AREA                          */
         L R13,4(R13)
*       GEN(FREEMAIN R,LV=(0),A=(1));/* FREE MODULE WORK AREA        */
         FREEMAIN R,LV=(0),A=(1)
*       RFY                                                        0556
*        (R0,                                                      0556
*         R1) UNRSTD;                                              0556
*     END;                                                         0557
*   GEN(LM RET,R12,12(R13))                                        0558
*   SETS(RET,R12) REFS(R13);        /* RESTORE REG'S                 */
@RC00352 DS    0H                                                  0558
         LM RET,R12,12(R13)
*   GEN(BR RET)                                                    0559
*   REFS(RET);                      /* RETURN TO IFG0192A            */
         BR RET
*DEQBUSY:                                                          0560
*                                                                  0560
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY TERM192A TO DEQ ENQ BUSY FOR EACH DATA     */
*/*             SET IN SPHERE AND FREE ENQ PARAMETER LIST.           */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO ENQ PARAMETER LIST IN MWAENQPT.            */
*/*             2. LENGTH OF ENQ PARAMETER LIST IN MWAENQLN.         */
*/*                                                                  */
*/*   OUTPUTS:  1. ENQ PARAMETER LIST FREED.                         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0560
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0560
DEQBUSY  DS    0H                                                  0561
*   RFY                                                            0561
*     RET RSTD;                                                    0561
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0562
*   RFY                                                            0563
*     RET UNRSTD;                                                  0563
*   RFY                                                            0564
*     R1 RSTD;                                                     0564
*   R1=ADDR(ENQENTRY(1));           /* PT TO ENQ PARAMETER LIST      */
         L     R1,MWAENQPT                                         0565
         LA    R1,ENQENTRY(,R1)                                    0565
*   GEN(DEQ (,,,),MF=(E,(R1)));     /* DEQ BUSY                      */
         DEQ (,,,),MF=(E,(R1))
*   RFY                                                            0567
*     R1 UNRSTD;                                                   0567
*   MWAGFADR=MWAENQPT;              /* INIT ADDR OF ENQ PARM LIST    */
         L     @11,MWAENQPT                                        0568
         ST    @11,MWAGFADR                                        0568
*   MWAGFSP=WKPOOL;                 /* INIT SUBPOOL OF ENQ PARM LIST */
         MVI   MWAGFSP,X'FC'                                       0569
*   MWAGFLEN=MWAENQLN;              /* INIT LENGTH OF ENQ PARM LIST  */
         MVC   MWAGFLEN(3),MWAENQLN+1                              0570
*   CALL FREECORE;                  /* FREE ENQ PARAMETER LIST       */
         BAL   @14,FREECORE                                        0571
*   RFY                                                            0572
*     RET RSTD;                                                    0572
*   RET=MWASAVEA;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEA                                        0573
*   RFY                                                            0574
*     RET UNRSTD;                                                  0574
*   END DEQBUSY;                                                   0575
@EL00002 DS    0H                                                  0575
@EF00002 DS    0H                                                  0575
@ER00002 BR    @14                                                 0575
*FREELSTS:                                                         0576
*                                                                  0576
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY TERM192A TO FREE ANY SAVE LISTS CHAINED    */
*/*             OFF OPW.                                             */
*/*                                                                  */
*/*   INPUTS:   1. SAME AS MODULE.                                   */
*/*                                                                  */
*/*   OUTPUTS:  1. ALL SAVE LISTS FREED.                             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0576
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0576
FREELSTS DS    0H                                                  0577
*   RFY                                                            0577
*     RET RSTD;                                                    0577
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0578
*   RFY                                                            0579
*     RET UNRSTD;                                                  0579
*   MWAI=1;                         /* SET DUMMYPTR INDEX    @Z30SSRL*/
         MVC   MWAI(4),@CF00054                                    0580
*   DO WHILE(BIBCSL^=0);            /* FREE CSL CHAIN        @Z30SSDP*/
         B     @DE00581                                            0581
@DL00581 DS    0H                                                  0582
*     MWAGFADR=BIBCSL;              /* INIT ADDRESS OF CSL   @Z30SSDP*/
         L     @11,OPWBIB(,RCORE)                                  0582
         L     @05,BIBCSL(,@11)                                    0582
         ST    @05,MWAGFADR                                        0582
*     OPWCSL=BIBCSL;                /* UPDATE CSL PTR        @Z30SSDP*/
         ST    @05,OPWCSL(,RCORE)                                  0583
*     MWAGFLEN=SVELENTH;            /* INIT LENGTH OF CSL    @Z30SSDP*/
         L     @05,MWAI                                            0584
         SLA   @05,2                                               0584
         L     @05,DUMMYPTR-4(@05,RCORE)                           0584
         MVC   MWAGFLEN(3),SVELENTH(@05)                           0584
*     MWAGFSP=SVESUBPL;             /* INIT SUBPOOL OF CSL   @Z30SSDP*/
         IC    @15,SVESUBPL(,@05)                                  0585
         STC   @15,MWAGFSP                                         0585
*     SVEID='00'X;                  /* ZERO EBCDIC ID        @Z30SSDP*/
         XC    SVEID+1(7,@05),SVEID+1(@05)                         0586
         MVI   SVEID(@05),X'00'                                    0586
*     BIBCSL=SVENXPTR;              /* PT TO NEXT CSL        @Z30SSDP*/
         L     @05,SVENXPTR(,@05)                                  0587
         ST    @05,BIBCSL(,@11)                                    0587
*     CALL FREECORE;                /* FREE CSL IF IT EXISTS @Z30SSDP*/
         BAL   @14,FREECORE                                        0588
*   END;                            /*                       @Z30SSDP*/
@DE00581 SLR   @11,@11                                             0589
         L     @05,OPWBIB(,RCORE)                                  0589
         C     @11,BIBCSL(,@05)                                    0589
         BNE   @DL00581                                            0589
*   OPWCSL=0;                       /* ZERO CSL PTR          @Z30SSDP*/
         ST    @11,OPWCSL(,RCORE)                                  0590
*   DO MWAI=2 TO LENGTH(OPWSAVE)/FWORDLEN;/* FREE SAVE LISTS @Z30SSDP*/
         LA    @11,2                                               0591
         ST    @11,MWAI                                            0591
@DL00591 DS    0H                                                  0592
*     DO WHILE(DUMMYPTR(MWAI)^=0);  /* FREE SAVE LIST CHAIN          */
         B     @DE00592                                            0592
@DL00592 DS    0H                                                  0593
*       MWAGFADR=DUMMYPTR(MWAI);    /* INIT ADDRESS OF SAVE LIST     */
         L     @11,MWAI                                            0593
         SLA   @11,2                                               0593
         L     @05,DUMMYPTR-4(@11,RCORE)                           0593
         ST    @05,MWAGFADR                                        0593
*       MWAGFLEN=SVELENTH;          /* INIT LENGTH OF SAVE LIST      */
         MVC   MWAGFLEN(3),SVELENTH(@05)                           0594
*       MWAGFSP=SVESUBPL;           /* INIT SUBPOOL OF SAVE LIST     */
         IC    @15,SVESUBPL(,@05)                                  0595
         STC   @15,MWAGFSP                                         0595
*       SVEID='00'X;                /* ZERO EBCDIC ID                */
         XC    SVEID+1(7,@05),SVEID+1(@05)                         0596
         MVI   SVEID(@05),X'00'                                    0596
*       DUMMYPTR(MWAI)=SVENXPTR;    /* PT TO NEXT SAVE LIST          */
         L     @05,SVENXPTR(,@05)                                  0597
         ST    @05,DUMMYPTR-4(@11,RCORE)                           0597
*       CALL FREECORE;              /* FREE SAVE LIST IF IT EXISTS   */
         BAL   @14,FREECORE                                        0598
*     END;                                                         0599
@DE00592 L     @11,MWAI                                            0599
         LR    @05,@11                                             0599
         SLA   @05,2                                               0599
         L     @05,DUMMYPTR-4(@05,RCORE)                           0599
         LTR   @05,@05                                             0599
         BNZ   @DL00592                                            0599
*   END;                                                           0600
         AL    @11,@CF00054                                        0600
         ST    @11,MWAI                                            0600
         C     @11,@CF00146                                        0600
         BNH   @DL00591                                            0600
*   RFY                                                            0601
*     RET RSTD;                                                    0601
*   RET=MWASAVEA;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEA                                        0602
*   RFY                                                            0603
*     RET UNRSTD;                                                  0603
*   END FREELSTS;                                                  0604
@EL00003 DS    0H                                                  0604
@EF00003 DS    0H                                                  0604
@ER00003 BR    @14                                                 0604
*INIT192A:                                                         0605
*                                                                  0605
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: VSAM OPEN INITIALIZATION.  BUILDS MODULE WORK AREA,  */
*/*             ACB WORK AREA(OPW), AND SAVE LISTS.  ISSUES ENQ BUSY */
*/*             FOR EACH DATA SET BEING PROCESSED.  ESTABLISHES      */
*/*             MODULE ADDRESSABILITY.                               */
*/*                                                                  */
*/*   INPUTS:   SAME AS MODULE                                       */
*/*                                                                  */
*/*   OUTPUTS:  1. PTR TO MODULE WORK AREA AND SAVE AREA IN REG 13.  */
*/*             2. PTR TO ACB WORK AREA IN REGISTER 4.               */
*/*             3. PTR'S TO ESL, DSL, CSL AND SSL IN OPW.            */
*/*                                                                  */
*/********************************************************************/
*                                                                  0605
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0605
INIT192A DS    0H                                                  0606
*   RFY                                                            0606
*     FORCORE BASED(RCORE);                                        0606
*   RFY                                                            0607
*     TCB BASED(PSATOLD);                                          0607
*                                                                  0607
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE PROB DET PARAMETER LIST                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0608
*   GEN(LA RACB,0(RACB));           /* ZERO OPTION BYTE IN ACB ADDR  */
         LA RACB,0(RACB)
*   IDAPDPRM=IDAPDPRM&&IDAPDPRM;    /* ZERO PROB DET PARM LIST       */
         LA    @11,280                                             0609
         ALR   @11,RCORE                                           0609
         XC    IDAPDPRM(40,@11),IDAPDPRM(@11)                      0609
*   PDPCALL=PDPOPEN;                /* CALLER IS OPEN                */
         MVI   PDPCALL(@11),X'00'                                  0610
*   PDPFUNC=PDF81;                  /* MOD INIT IN CONTROL           */
         MVI   PDPFUNC(@11),X'51'                                  0611
*   PDPACB=RACB;                    /* PT TO USER ACB                */
         ST    RACB,PDPACB(,@11)                                   0612
*   PDPTIOT=DXTIOTAD;               /* SET UP TIOT PTR       @Y30DSDP*/
         L     @05,DXTIOTAD(,RCORE)                                0613
         ST    @05,PDPTIOT(,@11)                                   0613
*   PDPCLSNM=ADDR(JFCBDSNM);        /* CLN PT'S TO DSN ON DD STMNT   */
         LA    @05,100                                             0614
         ALR   @05,RCORE                                           0614
         ST    @05,PDPCLSNM(,@11)                                  0614
*   PDPDSN=0;                       /* SET DATA SET NAME TO ZERO     */
         SLR   @05,@05                                             0615
         ST    @05,PDPDSN(,@11)                                    0615
*   PDPDSTYP=PDPDDNM;               /* SET DATA SET TYPE TO DD NAME  */
         MVI   PDPDSTYP(@11),X'01'                                 0616
*   IF ACBERFLG^=0&ACBERFLG^=OPERR188 THEN/* IF ERROR FROM COMMON  0617
*                                      OPEN                          */
         CLI   ACBERFLG(RACB),0                                    0617
         BE    @RF00617                                            0617
         CLI   ACBERFLG(RACB),188                                  0617
         BE    @RF00617                                            0617
*     DO;                                                          0618
*       RFY                                                        0619
*         R1 RSTD;                                                 0619
*       R1=RCORE;                   /* SAVE PTR TO COMMON WORK AREA  */
         LR    R1,RCORE                                            0620
*       RCORE=0;                    /* IND NO MOD WORK AREA OR OPW   */
         SLR   RCORE,RCORE                                         0621
*       RETURN TO TERM192A;         /* RESTORE ACB AND EXIT MODULE   */
         LA    @14,TERM192A                                        0622
@EL00004 DS    0H                                                  0622
@EF00004 DS    0H                                                  0622
@ER00004 BR    @14                                                 0622
*       RFY                                                        0623
*         R1 UNRSTD;                                               0623
*     END;                                                         0624
*   RFY                                                            0625
*     R6 RSTD;                                                     0625
@RF00617 DS    0H                                                  0626
*   RFY                                                            0626
*     RET RSTD;                                                    0626
*   R6=RET;                         /* SAVE RETURN ADDRESS           */
         LR    R6,RET                                              0627
*   RFY                                                            0628
*     RET UNRSTD;                                                  0628
*                                                                  0628
*/********************************************************************/
*/*           IDAGMAIN - GETS CORE STORAGE FOR AUTOMATICS.           */
*/*                      FOR VS2 IDAGMAIN WILL MOVE THE      @Z30SSRL*/
*/*                      ID AND DATE OF THE MODULE TO A      @Z30SSRL*/
*/*                      LOCATION DIRECTLY AFTER THE PLS     @Z30SSRL*/
*/*                      GENERATED SAVE AREA.                @Z30SSRL*/
*/*           DATE OF LAST CHANGE = 3 DECEMBER 74            @Z30SSRL*/
*/********************************************************************/
*                                                                  0629
*   GEN;                                                           0629
         L     @00,@SIZDATD             LOAD LENGTH OF AUTOMATICS
         GETMAIN RC,LV=(0),SP=0         ISSUE GETMAIN IN SUBPOOL ZERO
         LTR   @15,@15                  TEST RETURN CODE FOR ERROR
         BNZ   GMN00100                 BRANCH IF ERROR ENCOUNTERED
*                                       IF NO ERROR WAS ENCOUNTERED
         LR    @00,@01                  ADDRESS OF GOTTEN AREA IN R0
         LR    @14,@01                  SAVE THE ADDRESS IN REGISTER 14
         L     @01,@SIZDATD             LENGTH OF GOTTEN AREA
         MVCL  @00,@14                  ZERO THE GOTTEN AREA, R15=0
         LR    @15,@14                  ADDRESS OF AREA IN REGISTER 15
         ST    @15,8(,@13)              FORWARD CHAIN THIS SAVE AREA
         L     @01,@SIZDATD             LENGTH OF GOTTEN AREA
         ST    @01,88(,@15)             STORE LENGTH OF AREA
         LR    @14,@03                  LOAD BASE REGISTER OF MODULE
         LA    @01,23                   LOAD NEGATIVE OFFSET BYTE NO.
         SR    @14,@01                  NEGITIVE OFFSET 23 BYTES
         MVC   72(16,@15),0(@14)        GET MODULE NAME AND DATE
         B     GMN00200                 BYPASS SETTING ERROR
GMN00100 SR    @15,@15                  REGISTER 15 = 0 INDICATES ERROR
GMN00200 EQU   *                        R15 CONTAINS ADDRESS OR ZERO
*        REGISTER 15 CONTAINS EITHER THE ADDRESS OF GOTTEN CORE OR
*        ZERO IF THE GETMAIN WAS UNSUCCESSFUL.
*   RFY                                                            0630
*     RETCODE RSTD;                                                0630
*   IF RETCODE=0 THEN               /* IF GETMAIN ERROR              */
         LTR   RETCODE,RETCODE                                     0631
         BNZ   @RF00631                                            0631
*     DO;                           /* THEN CALL PROB DET            */
*       RFY                                                        0633
*         RETCODE UNRSTD;                                          0633
*       ACBERFLG=OPERR136;          /* SET ACB ERROR FLAG            */
         MVI   ACBERFLG(RACB),X'88'                                0634
*       PDPCODE=PP20;               /* SET PROB DET ERROR CODE       */
         MVI   PDPCODE+280(RCORE),X'14'                            0635
*       RFY                                                        0636
*         R1 RSTD;                                                 0636
*       R1=RCORE;                   /* PT TO COMMON WORK AREA        */
         LR    R1,RCORE                                            0637
*       RSTATRTN=IDAR192P;          /* INDIC 192P CONTROL    @Y30DSDP*/
         MVC   RSTATRTN(4,RCORE),@CC05329                          0638
*       CALL IDA0192P;              /* WRITE PROB DET MESSAGE        */
         L     @15,@CV05701                                        0639
         BALR  @14,@15                                             0639
*       RSTATRTN=IDAR192A;          /* INDIC 192A CONTROL    @Y30DSDP*/
         MVC   RSTATRTN(4,RCORE),@CC05315                          0640
*       RCORE=0;                    /* IND NO MOD OR ACB WORK AREA   */
         SLR   RCORE,RCORE                                         0641
*       RETURN TO TERM192A;         /* RESTORE ACB AND EXIT MODULE   */
         LA    @14,TERM192A                                        0642
         BR    @14                                                 0642
*       RFY                                                        0643
*         R1 UNRSTD;                                               0643
*     END;                                                         0644
*                                                                  0644
*   /*****************************************************************/
*   /*                                                               */
*   /* ESTABLISH MODULE ADDRESSABILITY                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0645
*   GEN(ST R13,4(R15))                                             0645
*   REFS(R13,R15) NOSETS;           /* SAVE LAST SAVE AREA PTR       */
@RF00631 DS    0H                                                  0645
         ST R13,4(R15)
*   RFY                                                            0646
*     R15 RSTD;                                                    0646
*   R13=R15;                        /* SET BASE FOR MOD WORK AREA    */
         LR    R13,R15                                             0647
*   RFY                                                            0648
*     R15 UNRSTD;                                                  0648
*   GEN(USING @DATD,R13)                                           0649
*   REFS(R13) NOSETS;                                              0649
         USING @DATD,R13
*   MWATCB=ADDR(TCB);               /* INIT TCB PTR IN MWA           */
         L     @11,PSATOLD                                         0650
         ST    @11,MWATCB                                          0650
*   RFY                                                            0651
*     TCB BASED(MWATCB);            /* ADDRESSABILITY TO TCB         */
*   MWASAVEA=R6;                    /* SAVE RETURN ADDRESS           */
         ST    R6,MWASAVEA                                         0652
*   RFY                                                            0653
*     R6 UNRSTD;                                                   0653
*                                                                  0653
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD ACB WORK AREA                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0654
*   MWAGFSP=WKPOOL;                 /* SET SUBPOOL                   */
         MVI   MWAGFSP,X'FC'                                       0654
*   MWAGFLEN=LENGTH(IDAOPWRK)+MAXNO*LENGTH(OPWUPAIX);/* CALC LENGTH  */
         MVC   MWAGFLEN(3),@CF05879+1                              0655
*   CALL GETCORE;                   /* OBTAIN STORAGE FOR OPW        */
         BAL   @14,GETCORE                                         0656
*   RFY                                                            0657
*     R9 RSTD;                                                     0657
*   R9=RCORE;                       /* SAVE PTR TO COMMON WORK AREA  */
         LR    R9,RCORE                                            0658
*   RFY                                                            0659
*     IDAOPWRK BASED(RCORE);        /* SET BASE FOR ACB WORK AREA    */
*   RCORE=MWAGFADR;                                                0660
         L     RCORE,MWAGFADR                                      0660
*   MWAOPWRK=ON;                    /* IND ACB WORK AREA EXISTS      */
         OI    MWAOPWRK,B'10000000'                                0661
*   OPWSUBPL=WKPOOL;                /* SET SUBPOOL IN ACB WORK       */
         MVI   OPWSUBPL(RCORE),X'FC'                               0662
*   OPWLENTH=MWAGFLEN;              /* SET LENGTH IN ACB WORK        */
         MVC   OPWLENTH(3,RCORE),MWAGFLEN                          0663
*   OPWID='IDAOPWRK';               /* SET EBCDIC ID IN OPW          */
         MVC   OPWID(8,RCORE),@CC05705                             0664
*   OPWCOMWA=R9;                    /* SET BASE FOR COMMON WORK AREA */
         ST    R9,OPWCOMWA(,RCORE)                                 0665
*   RFY                                                            0666
*     R9 UNRSTD;                                                   0666
*   RFY                                                            0667
*     FORCORE BASED(OPWCOMWA);                                     0667
*   OPWCTCB=ADDR(TCB);              /* INIT PTR TO CURRENT TCB       */
         L     @11,MWATCB                                          0668
         ST    @11,OPWCTCB(,RCORE)                                 0668
*   OPWJSTCB=TCBJSTCB;              /* PTR TO JOB STEP TCB   @Y30DSDP*/
         L     @11,TCBJSTCB(,@11)                                  0669
         ST    @11,OPWJSTCB(,RCORE)                                0669
*   OPWCURPT=ADDR(OPWBSECL);        /* SET CURR CLUSTER TO BASE      */
         LA    @05,OPWBSECL(,RCORE)                                0670
         ST    @05,OPWCURPT(,RCORE)                                0670
*   MWATCB=OPWJSTCB;                /* PT TO JOB STEP TCB            */
         ST    @11,MWATCB                                          0671
*   OPWUACB=RACB;                   /* INIT PTR TO USER ACB          */
         ST    RACB,OPWUACB(,RCORE)                                0672
*   OPWTIOT=DXTIOTAD;               /* PT TO TIOT ENTRY      @Y30DSDP*/
         L     @11,OPWCOMWA(,RCORE)                                0673
         L     @05,DXTIOTAD(,@11)                                  0673
         ST    @05,OPWTIOT(,RCORE)                                 0673
*   OPWERMAP=ERRMAP;                /* LD PPCODE TO ACBERFLG MAP     */
*                                                                  0674
         MVC   OPWERMAP(256,RCORE),ERRMAP                          0674
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE ACB FIELDS TO ZERO                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0675
*   ACBAMBL=0;                                                     0675
         SLR   @05,@05                                             0675
         ST    @05,ACBAMBL(,RACB)                                  0675
*   ACBDEB=0;                                                      0676
         STCM  @05,7,ACBDEB(RACB)                                  0676
*   ACBINRTN=0;                                                    0677
         ST    @05,ACBINRTN(,RACB)                                 0677
*   IF JFCBDSNM(1:9)='NULLFILE ' THEN/* IF DUMMY DATA SET            */
         CLC   JFCBDSNM+100(9,@11),@CC05707                        0678
         BNE   @RF00678                                            0678
*     DO;                           /* THEN PROCESS DUMMY DATA SET   */
*       OPWDUMMY=ON;                /* IND DUMMY DATA SET OPEN       */
         OI    OPWDUMMY(RCORE),B'00010000'                         0680
*       ACBERFLG=0;                 /* ZERO ERROR FLAG               */
         MVI   ACBERFLG(RACB),X'00'                                0681
*       ACBAMETH='11'X;             /* IND VSAM ACB                  */
         MVI   ACBAMETH(RACB),X'11'                                0682
*       CALL BLDBIB;                /* BUILD BIB FOR DUMMY   @Y30DSDP*/
         BAL   @14,BLDBIB                                          0683
*     END;                                                         0684
*   ELSE                            /* ELSE NOT DUMMY DATA SET       */
*     DO;                                                          0685
         B     @RC00678                                            0685
@RF00678 DS    0H                                                  0686
*       IF ACBCAT=ON&ACBSDS=OFF&ACBSCRA=OFF THEN/* OPEN FOR A CATALOG
*                                                            @Z40WSRL*/
         TM    ACBCAT(RACB),B'00010000'                            0686
         BNO   @RF00686                                            0686
         TM    ACBSDS(RACB),B'00001010'                            0686
         BNZ   @RF00686                                            0686
*         DO;                       /*                       @Z30SSDP*/
*           RSTATCSA=ON;            /* INDIC DUMP CSA        @Z30SSDP*/
         L     @11,OPWCOMWA(,RCORE)                                0688
         OI    RSTATCSA(@11),B'10000000'                           0688
*           OPWCAT=ON;              /* THEN IND CATLG OPEN IN OPW    */
         OI    OPWCAT(RCORE),B'10000000'                           0689
*         END;                      /*                       @Z30SSDP*/
*       ELSE                        /* NOT OPEN CATALOG              */
*         IF ACBSCRA=ON THEN        /* IF OPEN FOR SCRA              */
         B     @RC00686                                            0691
@RF00686 TM    ACBSCRA(RACB),B'00001000'                           0691
         BNO   @RF00691                                            0691
*           DO;                     /*                       @Z30SSDP*/
*             RSTATCSA=ON;          /* INDIC DUMP CSA        @Z30SSDP*/
         L     @11,OPWCOMWA(,RCORE)                                0693
         OI    RSTATCSA(@11),B'10000000'                           0693
*             OPWSCRA=ON;           /* THEN IND SCRA OPEN IN OPW     */
         OI    OPWSCRA(RCORE),B'01000000'                          0694
*           END;                    /*                       @Z30SSDP*/
*         ELSE                      /* NOT OPEN FOR SCRA             */
*           IF ACBUCRA=ON THEN      /* IF OPEN FOR UCRA              */
         B     @RC00691                                            0696
@RF00691 TM    ACBUCRA(RACB),B'00000100'                           0696
         BNO   @RF00696                                            0696
*             OPWUCRA=ON;           /* THEN IND UCRA OPEN IN OPW     */
         OI    OPWUCRA(RCORE),B'10000000'                          0697
*           ELSE                    /* NOT OPEN FOR UCRA             */
*             IF ACBSDS=ON THEN     /* IF SYSTEM DATA SET    @Z40WSRL*/
         B     @RC00696                                            0698
@RF00696 TM    ACBSDS(RACB),B'00000010'                            0698
         BNO   @RF00698                                            0698
*               DO;                 /*                       @Z30SSDP*/
*                 RSTATCSA=ON;      /* INDIC DUMP CSA        @Z30SSDP*/
         L     @11,OPWCOMWA(,RCORE)                                0700
         OI    RSTATCSA(@11),B'10000000'                           0700
*                 OPWSDS=ON;        /* THEN IND SYSTEM DATA SET OPEN
*                                      IN OPW                @Z40WSRL*/
         OI    OPWSDS(RCORE),B'00100000'                           0701
*               END;                /*                       @Z30SSDP*/
*       CALL CATIN;                 /* INIT ACB WORK WITH CATLG INFO */
@RF00698 DS    0H                                                  0703
@RC00696 DS    0H                                                  0703
@RC00691 DS    0H                                                  0703
@RC00686 BAL   @14,CATIN                                           0703
*       PDPCTACB=OPWCACB;           /* INIT CATLG ACB ADDR           */
         L     @11,OPWCOMWA(,RCORE)                                0704
         L     @05,OPWCACB(,RCORE)                                 0704
         ST    @05,PDPCTACB+280(,@11)                              0704
*       CALL BLDENQPL;              /* BUILD ENQ PARAMETER LIST      */
         BAL   @14,BLDENQPL                                        0705
*       RFY                                                        0706
*         R1 RSTD;                                                 0706
*       R1=ADDR(ENQENTRY(1));       /* PT TO ENQ PARM LIST           */
         L     R1,MWAENQPT                                         0707
         LA    R1,ENQENTRY(,R1)                                    0707
*       GEN(ENQ (,,,,),MF=(E,(R1)))                                0708
*       REFS(R1);                   /* ENQ BUSY                      */
         ENQ (,,,,),MF=(E,(R1))
*       RFY                                                        0709
*         R1 UNRSTD;                                               0709
*       CALL BLDLISTS;              /* BUILD SAVE LISTS              */
*                                                                  0710
         BAL   @14,BLDLISTS                                        0710
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE NUMBER OF STRINGS IN ACB WORK AREA             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0711
*       IF JFCAMSTR^=0 THEN         /* IF STRNO SPECIFIED IN AMP     */
         L     @11,OPWCOMWA(,RCORE)                                0711
         LH    @11,JFCAMSTR+100(,@11)                              0711
         LTR   @11,@11                                             0711
         BZ    @RF00711                                            0711
*         OPWSTRNO=JFCAMSTR;        /* THEN SET STRNO TO AMP VALUE   */
         STC   @11,OPWSTRNO(,RCORE)                                0712
*       ELSE                        /* ELSE INIT STRNO FROM ACB      */
*         IF ACBSTRNO^=0 THEN       /* IF STRNO SET IN ACB           */
         B     @RC00711                                            0713
@RF00711 CLI   ACBSTRNO(RACB),0                                    0713
         BE    @RF00713                                            0713
*           OPWSTRNO=ACBSTRNO;      /* THEN USE ACB VALUE            */
         IC    @11,ACBSTRNO(,RACB)                                 0714
         STC   @11,OPWSTRNO(,RCORE)                                0714
*         ELSE                      /* STRNO NOT SET IN ACB          */
*           OPWSTRNO=1;             /* USE DEFAULT                   */
         B     @RC00713                                            0715
@RF00713 MVI   OPWSTRNO(RCORE),X'01'                               0715
*       IF OPWPDTCI^=0 THEN         /* IF PATH PROCESSING            */
@RC00713 DS    0H                                                  0716
@RC00711 L     @11,OPWPDTCI-1(,RCORE)                              0716
         LA    @11,0(,@11)                                         0716
         LTR   @11,@11                                             0716
         BZ    @RF00716                                            0716
*         DO;                       /* THEN INIT BASE STRNO IN ACB 0717
*                                      WORK AREA                     */
*           IF ACBBSTNO^=0 THEN     /* IF BASE STRNO SET IN ACB      */
         CLI   ACBBSTNO(RACB),0                                    0718
         BE    @RF00718                                            0718
*             OPWBSTRN=ACBBSTNO;    /* THEN USE ACB VALUE            */
         IC    @11,ACBBSTNO(,RACB)                                 0719
         STC   @11,OPWBSTRN(,RCORE)                                0719
*           ELSE                    /* BASE STRNO NOT SET IN ACB     */
*             OPWBSTRN=OPWSTRNO;    /* USE DEFAULT VALUE             */
         B     @RC00718                                            0720
@RF00718 IC    @11,OPWSTRNO(,RCORE)                                0720
         STC   @11,OPWBSTRN(,RCORE)                                0720
*         END;                                                     0721
*       ELSE                        /* NOT PATH PROCESSING           */
*         OPWBSTRN=OPWSTRNO;        /* SET BASE STRNO TO STRNO       */
         B     @RC00716                                            0722
@RF00716 IC    @11,OPWSTRNO(,RCORE)                                0722
         STC   @11,OPWBSTRN(,RCORE)                                0722
*       IF JFCAMCRO(CRJFCBYT)^=0 THEN/* IF CHECKPOINT/RESTART OPTIONS
*                                      SPECIFIED                     */
@RC00716 L     @11,OPWCOMWA(,RCORE)                                0723
         CLI   JFCAMCRO+100(@11),0                                 0723
         BE    @RF00723                                            0723
*         CALL JFCACBMG;            /* THEN MERGE OPTIONS FROM JFCB  */
         BAL   @14,JFCACBMG                                        0724
*       CALL ACBVAL;                /* VALIDITY CHECK ACB'S          */
@RF00723 BAL   @14,ACBVAL                                          0725
*       CALL CONBASE;               /* SEARCH AMBL CHAINS            */
         BAL   @14,CONBASE                                         0726
*       PDPFUNC=PDF81;              /* RESTORE FUNCTION CODE         */
         L     @11,OPWCOMWA(,RCORE)                                0727
         MVI   PDPFUNC+280(@11),X'51'                              0727
*       IF OPWBCON=0 THEN           /* CHK FOR PRIME OPEN    @Z30SSDP*/
         L     @05,OPWBCON(,RCORE)                                 0728
         LTR   @05,@05                                             0728
         BNZ   @RF00728                                            0728
*         DO;                       /* YES, INCR VSRT USE COUNT    0729
*                                                            @Z30SSDP*/
*           RFY                                                    0730
*             R8 RSTD;              /*                       @Y30DSDP*/
*           IF ACBGSR=ON THEN       /* WAS GSR OPEN REQUESTED?     0731
*                                                            @Z30SSMD*/
         TM    ACBGSR(RACB),B'00100000'                            0731
         BNO   @RF00731                                            0731
*             R8=ADDR(CBSVSRT((DXUKEY/K16)+ONE));/* AMCBS IS BASE  0732
*                                                            @Z40ESSR*/
         SLR   @05,@05                                             0732
         IC    @05,DXUKEY(,@11)                                    0732
         SRL   @05,4                                               0732
         SLA   @05,3                                               0732
         L     @11,FLCCVT                                          0732
         L     R8,CVTCBSP(,@11)                                    0732
         LA    R8,CBSVSRT(@05,R8)                                  0732
*           ELSE                    /* IF NOT GSR CAN IT BE LSR?   0733
*                                                            @Z30SSMD*/
*             IF ACBLSR=ON THEN     /* WAS LSR REQUESTED?    @Z30SSMD*/
         B     @RC00731                                            0733
@RF00731 TM    ACBLSR(RACB),B'01000000'                            0733
         BNO   @RF00733                                            0733
*               DO;                 /* PROCESS UNIQUE LSR LOGIC.   0734
*                                                            @Z30SSMD*/
*                 IF JSCBSHR=0×     /* IF THE VAT IS NOT PRESENT OR
*                                      IF                    @Z30SSMD*/
*                     VATCBSTP^=JSCBSTEP THEN/* THE PTR IS NOT VALID,
*                                                            @Z30SSMD*/
         L     @11,MWATCB                                          0735
         L     @11,TCBJSCB(,@11)                                   0735
         L     @09,JSCBSHR(,@11)                                   0735
         LTR   @09,@09                                             0735
         BZ    @RT00735                                            0735
         CLC   VATCBSTP+196(1,@11),JSCBSTEP(@11)                   0735
         BE    @RF00735                                            0735
@RT00735 DS    0H                                                  0736
*                   DO;             /* NO VAT MEANS NO LSR VSRT, AN
*                                      ERROR.                @Z30SSMD*/
*                     PDPCODE=PP124;/* LSR AND NO VSRT PRESENT.    0737
*                                                            @Z30SSMD*/
         L     @11,OPWCOMWA(,RCORE)                                0737
         MVI   PDPCODE+280(@11),X'7C'                              0737
*                     CALL PROBDT;  /* SET ERROR CODE AND EXIT OPEN.
*                                                            @Z30SSMD*/
         BAL   @14,PROBDT                                          0738
*                   END;            /* END OF VSRT ERROR LOGIC PATH.
*                                                            @Z30SSMD*/
*                 ELSE              /* OTHERWISE PTR IS PRESENT &  0740
*                                      STEP NUMBER VALID     @Z30SSMD*/
*                   R8=ADDR(VATVSRT);/* USE THE LSR VSRT FOR THE   0740
*                                      BASE.                 @Z30SSMD*/
         B     @RC00735                                            0740
@RF00735 L     @11,MWATCB                                          0740
         L     @11,TCBJSCB(,@11)                                   0740
         L     R8,JSCBSHR(,@11)                                    0740
         LA    R8,VATVSRT(,R8)                                     0740
*               END;                /* END OF UNIQUE LSR LOGIC DO  0741
*                                      GROUP.                @Z30SSMD*/
@RC00735 DS    0H                                                  0742
*           RFY                                                    0742
*             MWACSVRP BASED(R8);   /*                       @Y30DSDP*/
@RF00733 DS    0H                                                  0742
@RC00731 DS    0H                                                  0743
*           IF ACBLSR=ON×ACBGSR=ON THEN/* CHK FOR LSR/GSR    @Y30DSDP*/
         TM    ACBLSR(RACB),B'01100000'                            0743
         BZ    @RF00743                                            0743
*             DO WHILE MWAVSRT=OFF; /* YES, INCR USE COUNT   @Y30DSDP*/
         B     @DE00744                                            0744
@DL00744 DS    0H                                                  0745
*               MWACSD0=MWACSVRP;   /* SET UP COMP/SWAP DW   @Y30DSDP*/
         MVC   MWACSD0(8),MWACSVRP(R8)                             0745
*               IF MWACSX0=0 THEN   /* CHK VSRT ADDR=ZERO    @Y30DSDP*/
         L     @11,MWACSX0                                         0746
         LTR   @11,@11                                             0746
         BNZ   @RF00746                                            0746
*                 DO;               /* YES,                  @Y30DSDP*/
*                   PDPCODE=PP124;  /* SET PROB DET CODE     @Y30DSDP*/
         L     @11,OPWCOMWA(,RCORE)                                0748
         MVI   PDPCODE+280(@11),X'7C'                              0748
*                   CALL PROBDT;    /* GO TO PROB DET        @Y30DSDP*/
         BAL   @14,PROBDT                                          0749
*                 END;              /*                       @Y30DSDP*/
*               ELSE                /* NO, VSRT EXISTS       @Y30DSDP*/
*                 DO;               /* INCREMENT USE COUNT   @Y30DSDP*/
         B     @RC00746                                            0751
@RF00746 DS    0H                                                  0752
*                   MWACS1=MWACS0+1;/* INCR USE COUNT        @Y30DSDP*/
         LA    @11,1                                               0752
         AL    @11,MWACS0                                          0752
         ST    @11,MWACS1                                          0752
*                   MWACSX1=MWACSX0;/* COPY VSRT ADDR        @Y30DSDP*/
         L     @11,MWACSX0                                         0753
         ST    @11,MWACSX1                                         0753
*                   CDS(MWACSD0,MWACSD1,MWACSVRP);/* ATTEMPT INCR  0754
*                                                            @Y30DSDP*/
         LM    @00,@01,MWACSD0                                     0754
         LM    @06,@07,MWACSD1                                     0754
         CDS   @00,@06,MWACSVRP(R8)                                0754
         BZ    @BC00754                                            0754
         STM   @00,@01,MWACSD0                                     0754
@BC00754 DS    0H                                                  0755
*                   BC(4,CSDL1);    /* CHK IF SUCCESS        @Z30SSDT*/
         BC    4,CSDL1                                             0755
*                   MWAVSRT=ON;     /* YES, BREAK LOOP       @Y30DSDP*/
         OI    MWAVSRT,B'01000000'                                 0756
*CSDL1:                                                            0757
*                   ;               /* BYPASS SETTING SWITCH @Z30SSDT*/
CSDL1    DS    0H                                                  0758
*                 END;              /*                       @Z30SSDT*/
*             END;                  /* END OF LOOP TO INCR VSRT USE
*                                      COUNT                 @Z30SSDT*/
@RC00746 DS    0H                                                  0759
@DE00744 TM    MWAVSRT,B'01000000'                                 0759
         BZ    @DL00744                                            0759
*           IF ACBGSR=ON THEN       /* CHK FOR GSR           @Z30SSDP*/
@RF00743 TM    ACBGSR(RACB),B'00100000'                            0760
         BNO   @RF00760                                            0760
*             VGTTVUSE=VGTTVUSE+ONE;/* INCR USE COUNT        @Z30SSDP*/
         L     @11,OPWBIB(,RCORE)                                  0761
         L     @11,BIBVGTT(,@11)                                   0761
         LA    @09,1                                               0761
         AL    @09,VGTTVUSE(,@11)                                  0761
         ST    @09,VGTTVUSE(,@11)                                  0761
*           RFY                                                    0762
*             R8 UNRSTD;            /*                       @Z30SSDP*/
@RF00760 DS    0H                                                  0763
*         END;                      /* END OF LOGIC DO GROUP FOR   0763
*                                      PRIME OPEN.           @Z30SSMD*/
*     END;                          /* END OF LOGIC DO GROUP FOR NON-
*                                      DD DUMMY.             @Z30SSMD*/
@RF00728 DS    0H                                                  0765
*   IF OPWBCON=0 THEN               /* IF NOT CONNECTING             */
@RC00678 L     @11,OPWBCON(,RCORE)                                 0765
         LTR   @11,@11                                             0765
         BNZ   @RF00765                                            0765
*     CALL LOADMODS;                /* THEN LD RCD MGT RTNS          */
         BAL   @14,LOADMODS                                        0766
*   RFY                                                            0767
*     RET RSTD;                                                    0767
@RF00765 DS    0H                                                  0768
*   RET=MWASAVEA;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEA                                        0768
*   RFY                                                            0769
*     RET UNRSTD;                                                  0769
*   END INIT192A;                                                  0770
         B     @EL00004                                            0770
*CATIN:                                                            0771
*                                                                  0771
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY INIT192A TO INTERFACE WITH THE CATALOG     */
*/*             INTERFACE ROUTINE (IDA0192C).  CALLS IDA0192C TO     */
*/*             LOCATE CATALOG INFORMATION FOR SPHERE AND            */
*/*             INITIALIZE OPW.  IF EXTRA SPACE EXISTS IN OPW,       */
*/*             CALL FREECORE TO FREE EXCESS SPACE.                  */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO OPW IN RCORE.                              */
*/*                                                                  */
*/*   OUTPUTS:  1. CATALOG INFORMATION INITIALIZED IN OPW.           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0771
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0771
CATIN    DS    0H                                                  0772
*   RFY                                                            0772
*     RET RSTD;                                                    0772
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        0773
*   RFY                                                            0774
*     RET UNRSTD;                                                  0774
*   MWACTID=OP1;                    /* IND LOCATE SPHERE INFO        */
         MVI   MWACTID,X'04'                                       0775
*   MWACTSFI=ADDR(IDASFI);          /* PT TO SFI AREA                */
         LA    @11,MWASFI                                          0776
         STCM  @11,7,MWACTSFI                                      0776
*   IDASFI=IDASFI&&IDASFI;          /* ZERO SFI                      */
         XC    IDASFI(12,@11),IDASFI(@11)                          0777
*   RFY                                                            0778
*     R1 RSTD;                                                     0778
*   R1=ADDR(MWACATPL);              /* PT TO PARM LIST FOR CATLG   0779
*                                      INTERFACE ROUTINE             */
         LA    R1,MWACATPL                                         0779
*   RSTATRTN=IDAR192C;              /* INDIC 192C CONTROL    @Y30DSDP*/
         L     @11,OPWCOMWA(,RCORE)                                0780
         MVC   RSTATRTN(4,@11),@CC05319                            0780
*   CALL IDA0192C;                  /* CALL CATLG INTRF TO INIT OPW  */
         L     @15,@CV05659                                        0781
         BALR  @14,@15                                             0781
*   RSTATRTN=IDAR192A;              /* INDIC 192A CONTROL    @Y30DSDP*/
         L     @11,OPWCOMWA(,RCORE)                                0782
         MVC   RSTATRTN(4,@11),@CC05315                            0782
*   RFY                                                            0783
*     R1 UNRSTD;                                                   0783
*   RFY                                                            0784
*     RETCODE RSTD;                                                0784
*   IF RETCODE>0 THEN               /* IF ERROR FROM CATALOG         */
         SLR   @14,@14                                             0785
         CR    RETCODE,@14                                         0785
         BNH   @RF00785                                            0785
*     DO;                           /* THEN WRITE ERROR MESSAGE      */
*       MWAPDPRM=RETCODE;           /* LD RETCODE                    */
         ST    RETCODE,MWAPDPRM                                    0787
*       RFY                                                        0788
*         RETCODE UNRSTD;                                          0788
*       PDPCODE=MWAPCODE;           /* LOAD PROBLEM CODE             */
         AL    @11,@CF05875                                        0789
         IC    @05,MWAPCODE                                        0789
         STC   @05,PDPCODE(,@11)                                   0789
*       PDPFUNC=MWAPFUNC;           /* LOAD FUNCTION CODE            */
         IC    @05,MWAPFUNC                                        0790
         STC   @05,PDPFUNC(,@11)                                   0790
*       PDPSFC=MWAPSFC;             /* LOAD SUB-FUNCTION CODE        */
         IC    @05,MWAPSFC                                         0791
         STC   @05,PDPSFC(,@11)                                    0791
*       IF PDPSFC=0&                /* IF NO SUB-FUNCTION CODE       */
*           SFIRETCD^=0 THEN        /* AND SFI INITIALIZED           */
         CLI   PDPSFC(@11),0                                       0792
         BNE   @RF00792                                            0792
         LA    @05,MWASFI                                          0792
         C     @14,SFIRETCD(,@05)                                  0792
         BE    @RF00792                                            0792
*         PDPSFI=ADDR(IDASFI);      /* THEN PT TO SFI AREA           */
         ST    @05,PDPSFI(,@11)                                    0793
*       ELSE                        /* IF NOT                        */
*         PDPSFI=0;                 /* IND NO SFI                    */
         B     @RC00792                                            0794
@RF00792 L     @11,OPWCOMWA(,RCORE)                                0794
         SLR   @05,@05                                             0794
         ST    @05,PDPSFI+280(,@11)                                0794
*       CALL PROBDT;                /* PROCESS ERROR                 */
@RC00792 BAL   @14,PROBDT                                          0795
*       PDPSFI=0;                   /* ZERO PTR TO SFI AREA          */
         LA    @11,280                                             0796
         AL    @11,OPWCOMWA(,RCORE)                                0796
         SLR   @05,@05                                             0796
         ST    @05,PDPSFI(,@11)                                    0796
*       PDPSFC=0;                   /* ZERO SUB=FUNCTION CODE        */
         MVI   PDPSFC(@11),X'00'                                   0797
*     END;                                                         0798
*   IF OPWNOUPG<MAXNO THEN          /* IF EXTRA SPACE IN OPW         */
@RF00785 CLI   OPWNOUPG(RCORE),125                                 0799
         BNL   @RF00799                                            0799
*     DO;                           /* THEN FREE EXTRA SPACE         */
*       MWAGFSP=OPWSUBPL;           /* INIT SUBPOOL                  */
         IC    @11,OPWSUBPL(,RCORE)                                0801
         STC   @11,MWAGFSP                                         0801
*       MWAGFADR=ADDR(OPWUPAIX(OPWNOUPG+1));/* INIT ADDR OF EXTRA  0802
*                                      SPACE                         */
         SLR   @11,@11                                             0802
         IC    @11,OPWNOUPG(,RCORE)                                0802
         SLA   @11,3                                               0802
         LA    @11,OPWUPAIX(@11,RCORE)                             0802
         ST    @11,MWAGFADR                                        0802
*       MWAGFLEN=OPWLENTH-(MWAGFADR-RCORE);/* CALC LENGTH OF EXTRA 0803
*                                      SPACE                         */
         LR    @15,@11                                             0803
         SLR   @15,RCORE                                           0803
         LCR   @15,@15                                             0803
         L     @14,OPWLENTH-1(,RCORE)                              0803
         LA    @14,0(,@14)                                         0803
         ALR   @15,@14                                             0803
         STCM  @15,7,MWAGFLEN                                      0803
*       MWADWADJ=MWAGFADR//DWORDLEN;/* CALC MODULO 8 OF ADDRESS      */
         LR    @00,@11                                             0804
         SRDA  @00,32                                              0804
         D     @00,@CF00039                                        0804
         LR    MWADWADJ,@00                                        0804
*       IF MWADWADJ^=0 THEN         /* IF ADDR IS NOT ON A DOUBLE  0805
*                                      WORD BOUNDARY                 */
         LTR   MWADWADJ,MWADWADJ                                   0805
         BZ    @RF00805                                            0805
*         DO;                       /* THEN ADJUST BOUNDARY TO DWORD */
*           MWADWADJ=DWORDLEN-MWADWADJ;/* CALCULATE ADJUSTMENT VALUE */
         LA    @14,8                                               0807
         SLR   @14,MWADWADJ                                        0807
         LR    MWADWADJ,@14                                        0807
*           MWAGFADR=MWAGFADR+MWADWADJ;/* ADJUST ADDR TO DOUBLE WORD */
         ALR   @11,MWADWADJ                                        0808
         ST    @11,MWAGFADR                                        0808
*           MWAGFLEN=MWAGFLEN-MWADWADJ;/* ADJUST LENGTH              */
         SLR   @15,MWADWADJ                                        0809
         STCM  @15,7,MWAGFLEN                                      0809
*         END;                                                     0810
*       CALL FREECORE;              /* FREE EXTRA SPACE              */
@RF00805 BAL   @14,FREECORE                                        0811
*       OPWLENTH=OPWLENTH-MWAGFLEN; /* ADJUST LENGTH OF OPW          */
         L     @11,OPWLENTH-1(,RCORE)                              0812
         LA    @11,0(,@11)                                         0812
         L     @05,MWAGFLEN-1                                      0812
         LA    @05,0(,@05)                                         0812
         SLR   @11,@05                                             0812
         STCM  @11,7,OPWLENTH(RCORE)                               0812
*     END;                                                         0813
*   RFY                                                            0814
*     RET RSTD;                                                    0814
@RF00799 DS    0H                                                  0815
*   RET=MWASAVEB;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEB                                        0815
*   RFY                                                            0816
*     RET UNRSTD;                                                  0816
*   END CATIN;                                                     0817
@EL00005 DS    0H                                                  0817
@EF00005 DS    0H                                                  0817
@ER00005 BR    @14                                                 0817
*CONBASE:                                                          0818
*                                                                  0818
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: DETERMINES IF THIS OPEN IS CONNECTING TO AN EXISTING */
*/*             STRUCTURE.  IF NOT CONNECTING, THEN BUILD BIB FOR    */
*/*             SPHERE AND IF NOT CATALOG OR CATALOG RECOVERY AREA,  */
*/*             BUILD WORK SPACE HEADER.                             */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO JSCB IN OPW.                               */
*/*                                                                  */
*/*   OUTPUTS:  1. PTR TO BASE AMBL CONNECTING TO IN OPWBCON, ZERO   */
*/*                IF NOT CONNECTING.                                */
*/*                                                                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0818
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0818
CONBASE  DS    0H                                                  0819
*   RFY                                                            0819
*     RET RSTD;                                                    0819
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        0820
*   RFY                                                            0821
*     RET UNRSTD;                                                  0821
*   PDPFUNC=PDF87;                  /* SET FUNCTION CODE             */
*                                                                  0822
         L     @11,OPWCOMWA(,RCORE)                                0822
         MVI   PDPFUNC+280(@11),X'57'                              0822
*   /*****************************************************************/
*   /*                                                               */
*   /* INIT AMBL SEARCH ARGUMENT IN ACB WORK AREA                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0823
*   OPWDCI=OPWBDTCI;                /* LD DATA CINV NO.              */
         MVC   OPWDCI(3,RCORE),OPWBDTCI(RCORE)                     0823
*   IF ACBCBIC=ON THEN              /* IF CONTROL BLKS IN COMMON   0824
*                                      SPECIFIED             @ZA16012*/
         TM    ACBCBIC(RACB),B'00100000'                           0824
         BNO   @RF00824                                            0824
*     DO;                           /* INDICATE THIS         @ZA16012*/
*       RSTATCSA=ON;                /* INDICATE CSA DUMP     @ZA16012*/
         OI    RSTATCSA(@11),B'10000000'                           0826
*       OPWCBIC=ON;                 /* SET CORRESPONDING OPWRK BIT 0827
*                                                            @ZA16012*/
         OI    OPWCBIC(RCORE),B'10000000'                          0827
*     END;                          /* END INDICATE          @ZA16012*/
*   IF ACBLSR=ON×ACBGSR=ON THEN     /* CHK FOR LSR OR GSR    @Y30DSDP*/
@RF00824 TM    ACBLSR(RACB),B'01100000'                            0829
         BZ    @RF00829                                            0829
*     DO;                           /* YES,                  @Y30DSDP*/
*       IF ACBLSR=ON THEN           /* CHK FOR LSR           @Y30DSDP*/
         TM    ACBLSR(RACB),B'01000000'                            0831
         BNO   @RF00831                                            0831
*         OPWLSR=ON;                /* YES, SET OPWRK LSR    @Y30DSDP*/
         OI    OPWLSR(RCORE),B'00100000'                           0832
*       ELSE                        /* NO, GSR               @Y30DSDP*/
*         DO;                       /*                       @Z30SSDP*/
         B     @RC00831                                            0833
@RF00831 DS    0H                                                  0834
*           RSTATCSA=ON;            /* INDIC DUMP CSA        @Z30SSDP*/
         L     @11,OPWCOMWA(,RCORE)                                0834
         OI    RSTATCSA(@11),B'10000000'                           0834
*           OPWGSR=ON;              /* SET GSR OPWRK BIT     @Y30DSDP*/
         OI    OPWGSR(RCORE),B'01000000'                           0835
*         END;                      /*                       @Z30SSDP*/
*       IF ACBDFR=ON THEN           /* IF DEFER SPECIFIED            */
@RC00831 TM    ACBDFR(RACB),B'00001000'                            0837
         BNO   @RF00837                                            0837
*         OPWDFR=ON;                /* THEN IND DEFER                */
         OI    OPWDFR(RCORE),B'00000001'                           0838
*     END;                                                         0839
*   ELSE                            /* NOT LSR                       */
*     IF ACBUBF=ON THEN             /* ELSE IF USER BUFFERING        */
         B     @RC00829                                            0840
@RF00829 TM    ACBUBF(RACB),B'00000001'                            0840
         BNO   @RF00840                                            0840
*       OPWUBF=ON;                  /* IND USER BUFFERING            */
         OI    OPWUBF(RCORE),B'00001000'                           0841
*   IF ACBICI=ON THEN               /* IF ICI PROCESSING             */
@RF00840 DS    0H                                                  0842
@RC00829 TM    ACBICI(RACB),B'00010000'                            0842
         BNO   @RF00842                                            0842
*     OPWFSTP=ON;                   /* THEN IND ICI (FAST PATH)      */
         OI    OPWFSTP(RCORE),B'00010000'                          0843
*   IF ACBDSN=OFF THEN              /* IF NOT SHARE BY DSN           */
@RF00842 TM    ACBDSN(RACB),B'00000010'                            0844
         BNZ   @RF00844                                            0844
*     OPWDDC=ON;                    /* THEN IND SHARE BY DDNAME      */
         OI    OPWDDC(RCORE),B'10000000'                           0845
*   IF OPWBIXCI=0 THEN              /* IF ESDS                       */
@RF00844 L     @11,OPWBIXCI-1(,RCORE)                              0846
         LA    @11,0(,@11)                                         0846
         LTR   @11,@11                                             0846
         BNZ   @RF00846                                            0846
*     OPWESDS=ON;                   /* THEN IND BASE IS A ESDS       */
         OI    OPWESDS(RCORE),B'00000010'                          0847
*   ELSE                            /* KSDS                          */
*     OPWKSDS=ON;                   /* IND BASE IS A KSDS            */
         B     @RC00846                                            0848
@RF00846 OI    OPWKSDS(RCORE),B'00000100'                          0848
*   MWAXAMBL=0;                     /* INIT CURRENT AMBL PTR TO 0    */
@RC00846 SLR   MWAXAMBL,MWAXAMBL                                   0849
*   IF JSCBSHR^=0&                  /* IF VAT PTR NOT ZERO           */
*       VATCBSTP=JSCBSTEP&          /* AND IF VAT EXISTS             */
*       VATPAMBL^=0 THEN            /* AND IF AMBL CHAIN EXISTS      */
         SLR   @11,@11                                             0850
         L     @07,MWATCB                                          0850
         L     @07,TCBJSCB(,@07)                                   0850
         L     @05,JSCBSHR(,@07)                                   0850
         CR    @05,@11                                             0850
         BE    @RF00850                                            0850
         CLC   VATCBSTP+196(1,@07),JSCBSTEP(@07)                   0850
         BNE   @RF00850                                            0850
         C     @11,VATPAMBL(,@05)                                  0850
         BE    @RF00850                                            0850
*     DO;                           /* THEN SEARCH PRIM AMBL CHAIN   */
*       MWARNAME=AMBLCHN;           /* SET RNAME FOR ENQ             */
         MVC   MWARNAME(9),@CC05488                                0852
*       MWAEQTCB=OPWJSTCB;          /* INIT PTR TO JOB STEP TCB      */
         L     @11,OPWJSTCB(,RCORE)                                0853
         ST    @11,MWAEQTCB                                        0853
*       MWAEQEND=ON;                /* INDICATE LAST ENTRY           */
         OI    MWAEQEND,B'10000000'                                0854
*       MWAEQRNM=LENGTH(MWARNAME);  /* INIT LENGTH OF RNAME          */
         MVI   MWAEQRNM,X'09'                                      0855
*       MWAEQQAD=ADDR(QNAME);       /* INIT ADDRESS OF QNAME         */
         LA    @11,@CC05493                                        0856
         ST    @11,MWAEQQAD                                        0856
*       MWAEQRAD=ADDR(MWARNAME);    /* INIT ADDR OF RNAME            */
         LA    @11,MWARNAME                                        0857
         ST    @11,MWAEQRAD                                        0857
*       GEN(ENQ (,,E,,STEP),MF=(E,MWAEQENT))                       0858
*       REFS(MWAEQENT);             /* ISSUE ENQ FOR PRIMARY AMBL  0858
*                                      CHAIN                         */
         ENQ (,,E,,STEP),MF=(E,MWAEQENT)
*       MWAXAMBL=VATPAMBL;          /* PT TO FIRST PRIM AMBL         */
         L     @11,MWATCB                                          0859
         L     @11,TCBJSCB(,@11)                                   0859
         L     @11,JSCBSHR(,@11)                                   0859
         L     MWAXAMBL,VATPAMBL(,@11)                             0859
*       DO WHILE(MWAXAMBL^=0&^(OPWIDF=AMBLIDF&OPWQ2=AMBLQ2));/*    0860
*                                      SEARCH PRIMARY AMBL CHAIN FOR
*                                      MATCHING ID'S         @ZA16012*/
         B     @DE00860                                            0860
@DL00860 DS    0H                                                  0861
*         MWAXAMBL=AMBLPCHN;        /* PT TO NEXT PRIM AMBL          */
         L     MWAXAMBL,AMBLPCHN(,MWAXAMBL)                        0861
*       END;                                                       0862
@DE00860 LTR   MWAXAMBL,MWAXAMBL                                   0862
         BZ    @DC00860                                            0862
         CLC   OPWIDF(8,RCORE),AMBLIDF(MWAXAMBL)                   0862
         BNE   @DL00860                                            0862
         CLC   OPWQ2(1,RCORE),AMBLQ2(MWAXAMBL)                     0862
         BNE   @DL00860                                            0862
@DC00860 DS    0H                                                  0863
*       GEN(DEQ (,,,STEP),MF=(E,MWAEQENT));/* ISSUE DEQ FOR PRIMARY
*                                      AMBL CHAIN                    */
         DEQ (,,,STEP),MF=(E,MWAEQENT)
*       IF MWAXAMBL^=0 THEN         /* IF CONNECTING                 */
         LTR   MWAXAMBL,MWAXAMBL                                   0864
         BZ    @RF00864                                            0864
*         IF OPWDDC=ON THEN         /* THEN IF CONNECT BY DDNAME     */
         TM    OPWDDC(RCORE),B'10000000'                           0865
         BNO   @RF00865                                            0865
*           DO;                     /* THEN CHECK IF ACB DDNAME    0866
*                                      EQUALS STRUCTURE DDNAME       */
*             IF ACBTIOT=AMBTIOT THEN/* IF ACBDDNAM EQUAL STRUCTURE
*                                      DDNAME                        */
         L     @11,AMBLDTA(,MWAXAMBL)                              0867
         CLC   ACBTIOT(2,RACB),AMBTIOT(@11)                        0867
         BNE   @RF00867                                            0867
*               OPWBCON=MWAXAMBL;   /* THEN INIT CONNECT AMBL PTR    */
         ST    MWAXAMBL,OPWBCON(,RCORE)                            0868
*             ELSE                  /* DDNAME NOT EQUAL              */
*               OPWBCON=0;          /* IND NOT CONNECT               */
         B     @RC00867                                            0869
@RF00867 SLR   @11,@11                                             0869
         ST    @11,OPWBCON(,RCORE)                                 0869
*           END;                                                   0870
*         ELSE                      /* ELSE CONNECT BY DSNAME        */
*           OPWBCON=MWAXAMBL;       /* INIT CONNECT AMBL PTR         */
         B     @RC00865                                            0871
@RF00865 ST    MWAXAMBL,OPWBCON(,RCORE)                            0871
*       ELSE                        /* IF NOT CONNECTING             */
*         OPWBCON=0;                /* IND NOT CONNECTING            */
         B     @RC00864                                            0872
@RF00864 SLR   @11,@11                                             0872
         ST    @11,OPWBCON(,RCORE)                                 0872
*     END;                                                         0873
@RC00864 DS    0H                                                  0874
*   IF OPWBCON=0 THEN               /* IF NOT CONNECTING             */
@RF00850 L     @11,OPWBCON(,RCORE)                                 0874
         LTR   @11,@11                                             0874
         BNZ   @RF00874                                            0874
*     DO;                           /* THEN BUILD BASE INFORMATION 0875
*                                      BLOCK                         */
*                                                                  0875
*       /*************************************************************/
*       /*                                                           */
*       /* GET VGTT FOR CAT, GSR, NORMAL D/S                 @Z30SSDP*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0876
*       IF OPWLSR=OFF&              /* IF NOT LSR AND        @Z40WSRL*/
*           OPWSDS=OFF THEN         /* NOT SYSTEM DATA SET   @Z40WSRL*/
         TM    OPWLSR(RCORE),B'00100000'                           0876
         BNZ   @RF00876                                            0876
         TM    OPWSDS(RCORE),B'00100000'                           0876
         BNZ   @RF00876                                            0876
*         CALL BLDVGTT;             /* BUILD VGTT            @Y30DSDP*/
         BAL   @14,BLDVGTT                                         0877
*       CALL BLDBIB;                /* GO BUILD BIB          @Y30DSDP*/
@RF00876 BAL   @14,BLDBIB                                          0878
*       IF OPWLSR=OFF&              /* IF NOT LSR AND        @Z40WSRL*/
*           OPWSDS=OFF THEN         /* NOT SYSTEM DATA SET   @Z40WSRL*/
         TM    OPWLSR(RCORE),B'00100000'                           0879
         BNZ   @RF00879                                            0879
         TM    OPWSDS(RCORE),B'00100000'                           0879
         BNZ   @RF00879                                            0879
*         DO;                       /* YES, CHAIN VGTT/BIB   @Z30SSDP*/
*           BIBVGTT=MWAVGTTP;       /* PT BIB TO VGTT        @Z30SSDP*/
         L     @11,OPWBIB(,RCORE)                                  0881
         L     @05,MWAVGTTP                                        0881
         ST    @05,BIBVGTT(,@11)                                   0881
*           VGTTBIB=OPWBIB;         /* PT VGTT TO BIB        @Z30SSDP*/
         ST    @11,VGTTBIB(,@05)                                   0882
*         END;                      /*                       @Z30SSDP*/
*       IF OPWSDS=ON THEN           /* IF SYSTEM DATA SET    @Z40WSRL*/
@RF00879 TM    OPWSDS(RCORE),B'00100000'                           0884
         BNO   @RF00884                                            0884
*         DO;                       /*                       @Z40WSRL*/
*           BIBVGTT=ACBUAPTR-((LENGTH(IDAVGTT)+7)&-8);/* POINT TO  0886
*                                      VGTT                  @Z40WSRL*/
         L     @11,OPWBIB(,RCORE)                                  0886
         L     @05,ACBUAPTR(,RACB)                                 0886
         SL    @05,@CF00349                                        0886
         ST    @05,BIBVGTT(,@11)                                   0886
*           VGTTBIB=OPWBIB;         /* POINT VGTT TO BIB     @Z40WSRL*/
         ST    @11,VGTTBIB(,@05)                                   0887
*         END;                      /*                       @Z40WSRL*/
*       IF OPWFLGS1=0&OPWGSR=OFF&   /* CHK CAT & GSR         @Y30DSDP*/
*           OPWUCRA=OFF&OPWLSR=OFF THEN/* IF NOT SPECIAL OPEN        */
@RF00884 CLI   OPWFLGS1(RCORE),0                                   0889
         BNE   @RF00889                                            0889
         TM    OPWGSR(RCORE),B'01000000'                           0889
         BNZ   @RF00889                                            0889
         TM    OPWUCRA(RCORE),B'10000000'                          0889
         BNZ   @RF00889                                            0889
         TM    OPWLSR(RCORE),B'00100000'                           0889
         BNZ   @RF00889                                            0889
*         DO;                       /* THEN BUILD WORK SPACE HEADER  */
*           OPWVSMPL=OPWVSMPL&&OPWVSMPL;/* ZERO VSM PARM LIST        */
         XC    OPWVSMPL(16,RCORE),OPWVSMPL(RCORE)                  0891
*           IF OPWCBIC=ON THEN      /* IF CONTROL BLKS IN COMMON   0892
*                                      SPECIFIED             @ZA16012*/
         TM    OPWCBIC(RCORE),B'10000000'                          0892
         BNO   @RF00892                                            0892
*             DO;                   /* SET VSM PARAMETERS    @ZA16012*/
*               OPWVMSP=GSRSPOOL;   /* COMMON STORAGE AREA SUBPOOL 0894
*                                                            @ZA16012*/
         MVI   OPWVMSP(RCORE),X'F1'                                0894
*               OPWVMDXK=ON;        /* GET CORE IN USER KEY  @ZA16012*/
         OI    OPWVMDXK(RCORE),B'00100000'                         0895
*             END;                  /* END SET               @ZA16012*/
*           ELSE                    /* CONTROL BLKS IN COMMON NOT  0897
*                                      SPECIFIED             @ZA16012*/
*             OPWVMSP=WSHDPL;       /* INIT SUBPOOL          @ZA16012*/
         B     @RC00892                                            0897
@RF00892 MVI   OPWVMSP(RCORE),X'FA'                                0897
*           OPWVMLNG=LENGTH(IDAWSHD);/* INIT LENGTH                  */
@RC00892 MVC   OPWVMLNG(3,RCORE),@CF00035+1                        0898
*           OPWVMTYP=DIRCTREQ;      /* IND DIRECT REQ        @Y30DSDP*/
         MVI   OPWVMTYP(RCORE),X'85'                               0899
*           CALL IDA0192M;          /* OBTAIN STORAGE FOR WSHDR      */
         L     @15,@CV05673                                        0900
         BALR  @14,@15                                             0900
*           RSTATRTN=IDAR192A;      /* INDIC 192A CONTROL    @Y30DSDP*/
         L     @11,OPWCOMWA(,RCORE)                                0901
         MVC   RSTATRTN(4,@11),@CC05315                            0901
*           IF OPWVMADR=0 THEN      /* IF ERROR FROM VSM             */
         L     @05,OPWVMADR(,RCORE)                                0902
         LTR   @05,@05                                             0902
         BNZ   @RF00902                                            0902
*             DO;                   /* THEN PROCESS ERROR            */
*               PDPCODE=PP20;       /* SET ERROR CODE                */
         MVI   PDPCODE+280(@11),X'14'                              0904
*               CALL PROBDT;        /* WRITE PROB DET MESSAGE        */
         BAL   @14,PROBDT                                          0905
*             END;                                                 0906
*           BIBWSHD=OPWVMADR;       /* INIT PTR TO WSHDR             */
@RF00902 L     @11,OPWBIB(,RCORE)                                  0907
         L     @05,OPWVMADR(,RCORE)                                0907
         ST    @05,BIBWSHD(,@11)                                   0907
*           WSHDID=IDXWSHD;         /* INIT ID IN BLOCK HEADER       */
         MVI   WSHDID(@05),B'01000100'                             0908
*           WSHDLEN=OPWVMLNG;       /* INIT LENGTH IN BLOCK HEADER   */
         L     @11,OPWVMLNG-1(,RCORE)                              0909
         LA    @11,0(,@11)                                         0909
         STH   @11,WSHDLEN(,@05)                                   0909
*           WSHDPOOL=WSHDPL;        /* INIT SUBPOOL                  */
         MVI   WSHDPOOL(@05),X'FA'                                 0910
*         END;                                                     0911
*     END;                                                         0912
*   ELSE                            /* IF CONNECTING AMBL            */
*     DO;                                                          0913
         B     @RC00874                                            0913
@RF00874 DS    0H                                                  0914
*       OPWBIB=AMBLBIB;             /* INIT BIB PTR FROM CONNECT AMBL*/
         L     @11,AMBLBIB(,MWAXAMBL)                              0914
         ST    @11,OPWBIB(,RCORE)                                  0914
*     END;                                                         0915
*   RFY                                                            0916
*     RET RSTD;                                                    0916
@RC00874 DS    0H                                                  0917
*   RET=MWASAVEB;                                                  0917
         L     RET,MWASAVEB                                        0917
*   RFY                                                            0918
*     RET UNRSTD;                                                  0918
*   END CONBASE;                                                   0919
@EL00006 DS    0H                                                  0919
@EF00006 DS    0H                                                  0919
@ER00006 BR    @14                                                 0919
*BLDENQPL:                                                         0920
*                                                                  0920
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: DETERMINES NUMBER OF DATA SETS BEING PROCESSED AND   */
*/*             BUILDS AN ENQ PARAMETER LIST WITH AN ENTRY FOR EACH  */
*/*             ELEMENTARY DATA SET BEING PROCESSED.                 */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO OPW IN RCORE.                              */
*/*                                                                  */
*/*   OUTPUTS:  1. PTR TO PARAMETER LIST FOR ENQ BUSY IN MWAENQPT    */
*/*             2. LENGTH OF ENQ BUSY PARAMETER LIST IN MWAENQLN.    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0920
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0920
BLDENQPL DS    0H                                                  0921
*   RFY                                                            0921
*     RET RSTD;                                                    0921
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        0922
*   RFY                                                            0923
*     RET UNRSTD;                                                  0923
*                                                                  0923
*   /*****************************************************************/
*   /*                                                               */
*   /* CALCULATE NUMBER OF ENTRIES IN LIST                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0924
*   IF OPWBIXCI=0 THEN              /* IF BASE IS AN ESDS            */
         L     @11,OPWBIXCI-1(,RCORE)                              0924
         LA    @11,0(,@11)                                         0924
         LTR   @11,@11                                             0924
         BNZ   @RF00924                                            0924
*     MWANODS=1;                    /* INIT NO. OF DATA SETS TO 1    */
         MVC   MWANODS(4),@CF00054                                 0925
*   ELSE                            /* ELSE BASE IS A KSDS           */
*     MWANODS=2;                    /* INIT NO. OF DATA SETS TO 2    */
         B     @RC00924                                            0926
@RF00924 MVC   MWANODS(4),@CF00093                                 0926
*   IF OPWPDTCI^=0 THEN             /* IF PATH PROCESSING            */
@RC00924 L     @11,OPWPDTCI-1(,RCORE)                              0927
         LA    @11,0(,@11)                                         0927
         LTR   @11,@11                                             0927
         BZ    @RF00927                                            0927
*     IF OPWNOUPG^=0 THEN           /* THEN IF UPGRADE PROCESSING    */
         CLI   OPWNOUPG(RCORE),0                                   0928
         BE    @RF00928                                            0928
*       DO;                         /* THEN DETERMINE IF PATH AIX IS
*                                      IN UPGRADE SET                */
*         DO MWAI=1 TO OPWNOUPG WHILE(OPWUDTCI(MWAI)^=OPWPDTCI);/* 0930
*                                      DETECT IF PATH IN             */
         LA    @11,1                                               0930
         B     @DE00930                                            0930
@DL00930 LR    @05,@11                                             0930
         SLA   @05,3                                               0930
         ALR   @05,RCORE                                           0930
         CLC   OPWUDTCI-8(3,@05),OPWPDTCI(RCORE)                   0930
         BE    @DC00930                                            0930
*         END;                      /* UPGRADE SET                   */
         AL    @11,@CF00054                                        0931
@DE00930 ST    @11,MWAI                                            0931
         SLR   @05,@05                                             0931
         IC    @05,OPWNOUPG(,RCORE)                                0931
         CR    @11,@05                                             0931
         BNH   @DL00930                                            0931
@DC00930 DS    0H                                                  0932
*         IF MWAI>OPWNOUPG THEN     /* IF PATH AIX NOT IN UPGR SET   */
         L     @11,MWAI                                            0932
         SLR   @05,@05                                             0932
         IC    @05,OPWNOUPG(,RCORE)                                0932
         CR    @11,@05                                             0932
         BNH   @RF00932                                            0932
*           MWANODS=MWANODS+2;      /* THEN ADD PATH AIX TO NO. OF 0933
*                                      DATA SETS                     */
         LA    @11,2                                               0933
         AL    @11,MWANODS                                         0933
         ST    @11,MWANODS                                         0933
*         ELSE                      /* PATH AIX IN UPGRADE SET       */
*           OPWPUPGR=ON;            /* IND PATH AIX IN UPGRADE SET   */
         B     @RC00932                                            0934
@RF00932 OI    OPWPUPGR(RCORE),B'01000000'                         0934
*       END;                                                       0935
*     ELSE                          /* ELSE NO UPGRADE PROCESSING    */
*       MWANODS=MWANODS+2;          /* ADD PATH AIX TO NO. OF DS'S   */
         B     @RC00928                                            0936
@RF00928 LA    @11,2                                               0936
         AL    @11,MWANODS                                         0936
         ST    @11,MWANODS                                         0936
*   MWANODS=MWANODS+OPWNOUPG*2;     /* ADD UPGR AIX'S TO NO. OF DS'S */
*                                                                  0937
@RC00928 DS    0H                                                  0937
@RF00927 SLR   @11,@11                                             0937
         IC    @11,OPWNOUPG(,RCORE)                                0937
         ALR   @11,@11                                             0937
         AL    @11,MWANODS                                         0937
         ST    @11,MWANODS                                         0937
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN STORAGE FOR ENQ PARAMETER LIST AND RNAME LIST          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0938
*   MWAGFSP=WKPOOL;                 /* INIT SUBPOOL                  */
         MVI   MWAGFSP,X'FC'                                       0938
*   MWAGFLEN=LENGTH(ENQPARML)+(LENGTH(ENQENTRY)+LENGTH(ENQRNAME))* 0939
*       MWANODS;                    /* INIT LENGTH                   */
         MH    @11,@CH02246                                        0939
         LA    @11,4(,@11)                                         0939
         STCM  @11,7,MWAGFLEN                                      0939
*   CALL GETCORE;                   /* GET STORAGE FOR ENQ PARM LIST */
         BAL   @14,GETCORE                                         0940
*   MWAENQPT=MWAGFADR;              /* SAVE ADDR OF LIST             */
         L     @11,MWAGFADR                                        0941
         ST    @11,MWAENQPT                                        0941
*   MWAENQLN=MWAGFLEN;              /* SAVE LENGTH OF LIST           */
         L     @15,MWAGFLEN-1                                      0942
         LA    @15,0(,@15)                                         0942
         ST    @15,MWAENQLN                                        0942
*   MWARNMPT=MWAENQPT+LENGTH(ENQPARML)+LENGTH(ENQENTRY)*MWANODS;/* 0943
*                                      INIT PTR TO RNAME LIST        */
*                                                                  0943
         AL    @11,@CF00096                                        0943
         L     MWARNMPT,MWANODS                                    0943
         MH    MWARNMPT,@CH00033                                   0943
         ALR   @11,MWARNMPT                                        0943
         LR    MWARNMPT,@11                                        0943
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE ENQ PARAMETER LIST AND RNAME LIST                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0944
*   MWAI=1;                         /* INIT INDEX TO ENQ PARM LIST   */
         LA    @11,1                                               0944
         ST    @11,MWAI                                            0944
*   ENQRNCI(MWAI)=OPWBDTCI;         /* LD BASE DATA CINV NO.         */
         SLA   @11,3                                               0945
         ALR   @11,MWARNMPT                                        0945
         AL    @11,@CF05547                                        0945
         MVC   ENQRNCI(3,@11),OPWBDTCI(RCORE)                      0945
*   CALL ENQINIT;                   /* INIT ENTRY FOR BASE DS        */
         BAL   @14,ENQINIT                                         0946
*   IF OPWBIXCI^=0 THEN             /* IF BASE IS A KSDS             */
         L     @11,OPWBIXCI-1(,RCORE)                              0947
         LA    @11,0(,@11)                                         0947
         LTR   @11,@11                                             0947
         BZ    @RF00947                                            0947
*     DO;                           /* THEN INIT ENTRY FOR BASE IDX  */
*       MWAI=MWAI+1;                /* INCR INDEX TO NEXT ENTRY      */
         LA    @15,1                                               0949
         AL    @15,MWAI                                            0949
         ST    @15,MWAI                                            0949
*       ENQRNCI(MWAI)=OPWBIXCI;     /* LD BASE INDEX CINV NO.        */
         SLA   @15,3                                               0950
         ALR   @15,MWARNMPT                                        0950
         AL    @15,@CF05547                                        0950
         STCM  @11,7,ENQRNCI(@15)                                  0950
*       CALL ENQINIT;               /* INIT ENTRY FOR BASE INDEX     */
         BAL   @14,ENQINIT                                         0951
*     END;                                                         0952
*   IF OPWPDTCI^=0&                 /* IF PATH PROCESSING            */
*       OPWPUPGR=OFF THEN           /* AND PATH IS NOT IN UPGRADE SET*/
@RF00947 L     @11,OPWPDTCI-1(,RCORE)                              0953
         LA    @11,0(,@11)                                         0953
         LTR   @11,@11                                             0953
         BZ    @RF00953                                            0953
         TM    OPWPUPGR(RCORE),B'01000000'                         0953
         BNZ   @RF00953                                            0953
*     DO;                           /* THEN INCLUDE PATH AIX CINV  0954
*                                      NUMBERS IN LIST               */
*       MWAI=MWAI+1;                /* INCR INDEX TO NEXT ENTRY      */
         LA    @15,1                                               0955
         AL    @15,MWAI                                            0955
         ST    @15,MWAI                                            0955
*       ENQRNCI(MWAI)=OPWPDTCI;     /* LD PATH DATA CINV NO. IN LIST */
         SLA   @15,3                                               0956
         ALR   @15,MWARNMPT                                        0956
         AL    @15,@CF05547                                        0956
         STCM  @11,7,ENQRNCI(@15)                                  0956
*       CALL ENQINIT;               /* INIT ENTRY FOR PATH DATA      */
         BAL   @14,ENQINIT                                         0957
*       MWAI=MWAI+1;                /* INCR INDEX TO NEXT ENTRY      */
         LA    @11,1                                               0958
         AL    @11,MWAI                                            0958
         ST    @11,MWAI                                            0958
*       ENQRNCI(MWAI)=OPWPIXCI;     /* LD PATH IDX CINV NO. INTO LIST*/
         SLA   @11,3                                               0959
         ALR   @11,MWARNMPT                                        0959
         AL    @11,@CF05547                                        0959
         MVC   ENQRNCI(3,@11),OPWPIXCI(RCORE)                      0959
*       CALL ENQINIT;               /* INIT ENTRY FOR PATH INDEX     */
         BAL   @14,ENQINIT                                         0960
*     END;                                                         0961
*   IF OPWNOUPG>0 THEN              /* IF UPGRADE SET EXISTS         */
@RF00953 CLI   OPWNOUPG(RCORE),0                                   0962
         BNH   @RF00962                                            0962
*     DO MWAJ=1 TO OPWNOUPG;        /* THEN INCLUDE CINV NUMBERS FOR
*                                      PATH AIX'S IN ENQ LIST        */
         LA    MWAJ,1                                              0963
         B     @DE00963                                            0963
@DL00963 DS    0H                                                  0964
*       MWAI=MWAI+1;                /* INCR INDEX TO NEXT ENTRY      */
         LA    @15,1                                               0964
         AL    @15,MWAI                                            0964
         ST    @15,MWAI                                            0964
*       ENQRNCI(MWAI)=OPWUDTCI(MWAJ);/* LD UPGR AIX DATA CINV NO.    */
         SLA   @15,3                                               0965
         LR    @14,MWAJ                                            0965
         SLA   @14,3                                               0965
         ALR   @15,MWARNMPT                                        0965
         AL    @15,@CF05547                                        0965
         ALR   @14,RCORE                                           0965
         MVC   ENQRNCI(3,@15),OPWUDTCI-8(@14)                      0965
*       CALL ENQINIT;               /* INIT ENTRY FOR UPGR AIX DATA  */
         BAL   @14,ENQINIT                                         0966
*       MWAI=MWAI+1;                /* INCR INDEX TO NEXT ENTRY      */
         LA    @15,1                                               0967
         AL    @15,MWAI                                            0967
         ST    @15,MWAI                                            0967
*       ENQRNCI(MWAI)=OPWUIXCI(MWAJ);/* LD UPGR AIX INDEX CINV NO.   */
         SLA   @15,3                                               0968
         LR    @14,MWAJ                                            0968
         SLA   @14,3                                               0968
         ALR   @15,MWARNMPT                                        0968
         AL    @15,@CF05547                                        0968
         ALR   @14,RCORE                                           0968
         MVC   ENQRNCI(3,@15),OPWUIXCI-8(@14)                      0968
*       CALL ENQINIT;               /* INIT ENTRY FOR UPGR AIX INDEX */
         BAL   @14,ENQINIT                                         0969
*     END;                                                         0970
         AL    MWAJ,@CF00054                                       0970
@DE00963 SLR   @15,@15                                             0970
         IC    @15,OPWNOUPG(,RCORE)                                0970
         CR    MWAJ,@15                                            0970
         BNH   @DL00963                                            0970
*   ENQEND(MWAI)=ON;                /* IND LAST ENTRY IN PARM LIST   */
@RF00962 L     @11,MWAI                                            0971
         MH    @11,@CH00033                                        0971
         L     @05,MWAENQPT                                        0971
         ALR   @05,@11                                             0971
         AL    @05,@CF05547                                        0971
         OI    ENQEND-4(@05),B'10000000'                           0971
*   RFY                                                            0972
*     RET RSTD;                                                    0972
*   RET=MWASAVEB;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEB                                        0973
*   RFY                                                            0974
*     RET UNRSTD;                                                  0974
*   END BLDENQPL;                                                  0975
@EL00007 DS    0H                                                  0975
@EF00007 DS    0H                                                  0975
@ER00007 BR    @14                                                 0975
*ENQINIT:                                                          0976
*                                                                  0976
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY BLDENQPL TO INITIALIZE AN ENTRY IN ENQ     */
*/*             PARAMETER LIST.                                      */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO ENQ ENTRY IN MWAENPTR(MWAI).               */
*/*                                                                  */
*/*   OUTPUTS:  1. INITIALIZED ENQ ENTRY.                            */
*/*                                                                  */
*/********************************************************************/
*                                                                  0976
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0976
ENQINIT  DS    0H                                                  0977
*   RFY                                                            0977
*     RET RSTD;                                                    0977
*   ENQRLEN(MWAI)=LENGTH(ENQRNAME); /* INIT LENGTH OF RNAME FOR ENQ  */
         L     @15,MWAENQPT                                        0978
         L     @09,MWAI                                            0978
         LR    @08,@09                                             0978
         MH    @08,@CH00033                                        0978
         LA    @07,8                                               0978
         LA    @06,0(@08,@15)                                      0978
         AL    @06,@CF05901                                        0978
         STC   @07,ENQRLEN-5(,@06)                                 0978
*   ENQQNADR(MWAI)=ADDR(QNAME);     /* INIT ADDR OF QNAME            */
         LA    @07,@CC05493                                        0979
         LA    @06,0(@08,@15)                                      0979
         AL    @06,@CF05902                                        0979
         ST    @07,ENQQNADR-8(,@06)                                0979
*   ENQRNADR(MWAI)=ADDR(ENQRNAME(MWAI));/* INIT ADDR OF RNAME        */
         SLA   @09,3                                               0980
         LR    @01,MWARNMPT                                        0980
         AL    @01,@CF05547                                        0980
         LA    @07,ENQRNAME(@09,@01)                               0980
         ST    @07,ENQRNADR-12(@08,@15)                            0980
*   ENQRNIND(MWAI)=ENQBUSY;         /* IND ENQ BUSY                  */
         ALR   @09,MWARNMPT                                        0981
         BCTR  @09,0                                               0981
         MVI   ENQRNIND-7(@09),C'B'                                0981
*   ENQRNACB(MWAI)=OPWCACB;         /* INIT CATLG ACB ADDR IN RNAME  */
         L     @09,MWAI                                            0982
         SLA   @09,3                                               0982
         L     @07,OPWCACB(,RCORE)                                 0982
         ALR   @09,MWARNMPT                                        0982
         AL    @09,@CF05903                                        0982
         STCM  @07,15,ENQRNACB-3(@09)                              0982
*   ENQSYS(MWAI)=ON;                /* INDICATE SYSTEM ENQ           */
         ALR   @15,@08                                             0983
         AL    @15,@CF05904                                        0983
         OI    ENQSYS-6(@15),B'01000000'                           0983
*   RFY                                                            0984
*     RET UNRSTD;                                                  0984
*   END ENQINIT;                                                   0985
@EL00008 DS    0H                                                  0985
@EF00008 DS    0H                                                  0985
@ER00008 BR    @14                                                 0985
*BLDLISTS:                                                         0986
*                                                                  0986
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY INIT192A TO BUILD THE FOLLOWING SAVE       */
*/*             LISTS: DEB SAVE LIST (DSL), ENQ SAVE LIST (ESL),     */
*/*             SWAP SAVE LIST (SSL).                                */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO OPW IN RCORE.                              */
*/*                                                                  */
*/*   OUTPUTS:  1. PTR TO DSL IN OPWDSL.                             */
*/*             2. PTR TO ESL IN OPWESL.                             */
*/*             3. PTR TO SSL IN OPWSSL.                             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0986
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0986
BLDLISTS DS    0H                                                  0987
*   RFY                                                            0987
*     RET RSTD;                                                    0987
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        0988
*   RFY                                                            0989
*     RET UNRSTD;                                                  0989
*   MWAGFSP=WKPOOL;                 /* INIT SUBPOOL                  */
         MVI   MWAGFSP,X'FC'                                       0990
*   MWAGFLEN=LENGTH(IDAESL);        /* INIT LENGTH OF ESL            */
         MVC   MWAGFLEN(3),@CF01745+1                              0991
*   CALL GETCORE;                   /* OBTAIN STORAGE FOR ESL        */
         BAL   @14,GETCORE                                         0992
*   OPWESL=MWAGFADR;                /* INIT PTR TO ESL IN MWA        */
         L     @11,MWAGFADR                                        0993
         ST    @11,OPWESL(,RCORE)                                  0993
*   ESLSUBPL=WKPOOL;                /* INIT ESL SUBPOOL              */
         MVI   ESLSUBPL(@11),X'FC'                                 0994
*   ESLLENTH=MWAGFLEN;              /* INIT ESL LENGTH               */
         MVC   ESLLENTH(3,@11),MWAGFLEN                            0995
*   ESLID=IDAESLID;                 /* INIT ESL EBCDIC ID            */
         MVC   ESLID(8,@11),@CC01769                               0996
*   MWAGFLEN=LENGTH(IDASSL);        /* INIT LENGTH OF SSL            */
         MVC   MWAGFLEN(3),@CF01727+1                              0997
*   CALL GETCORE;                   /* OBTAIN STORAGE FOR SSL        */
         BAL   @14,GETCORE                                         0998
*   OPWSSL=MWAGFADR;                /* INIT PTR TO SSL IN MWA        */
         L     @11,MWAGFADR                                        0999
         ST    @11,OPWSSL(,RCORE)                                  0999
*   SSLSUBPL=WKPOOL;                /* INIT SUBPOOL OF SSL           */
         MVI   SSLSUBPL(@11),X'FC'                                 1000
*   SSLLENTH=MWAGFLEN;              /* INIT LENGTH OF SSL            */
         MVC   SSLLENTH(3,@11),MWAGFLEN                            1001
*   SSLID=IDASSLID;                 /* INIT EBCDIC ID OF SSL         */
         MVC   SSLID(8,@11),@CC03556                               1002
*   MWAGFLEN=LENGTH(IDADSL);        /* INIT LENGTH OF DSL            */
         MVC   MWAGFLEN(3),@CF02282+1                              1003
*   CALL GETCORE;                   /* OBTAIN STORAGE FOR DSL        */
         BAL   @14,GETCORE                                         1004
*   OPWDSL=MWAGFADR;                /* INIT PTR TO DSL IN MWA        */
         L     @11,MWAGFADR                                        1005
         ST    @11,OPWDSL(,RCORE)                                  1005
*   DSLSUBPL=WKPOOL;                /* INIT DSL SUBPOOL              */
         MVI   DSLSUBPL(@11),X'FC'                                 1006
*   DSLLENTH=MWAGFLEN;              /* INIT DSL LENGTH               */
         MVC   DSLLENTH(3,@11),MWAGFLEN                            1007
*   DSLID=IDADSLID;                 /* INIT DSL EBCDIC ID            */
         MVC   DSLID(8,@11),@CC01721                               1008
*   RFY                                                            1009
*     RET RSTD;                                                    1009
*   RET=MWASAVEB;                   /* RESTORE RETURN REGISTER       */
         L     RET,MWASAVEB                                        1010
*   RFY                                                            1011
*     RET UNRSTD;                                                  1011
*   END BLDLISTS;                                                  1012
@EL00009 DS    0H                                                  1012
@EF00009 DS    0H                                                  1012
@ER00009 BR    @14                                                 1012
*LOADMODS:                                                         1013
*                                                                  1013
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY INIT192A TO LOAD THE ADDRESSES OF THE      */
*/*             REQUIRED RECORD MANAGEMENT MODULES INTO THE BIB      */
*/*             IF NOT A DUMMY DATA SET.  IF A DUMMY DATA SET IS     */
*/*             BEING OPENED THE ADDRESS OF INTERFACE ROUTINE        */
*/*             IS LOADED INTO THE ACB.  A LOAD MACRO IS ISSUED      */
*/*             TO OBTAIN THE ADDRESS OF EACH REQUIRED MODULE        */
*/*             FOLLOWED BY A DELETE TO MAINTAIN THE USE             */
*/*             COUNT AT ZERO.                                       */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO OPW IN RCORE.                              */
*/*                                                                  */
*/*   OUTPUTS:  1. ADDRESSES OF RECORD MANAGEMENT MODULES            */
*/*                INITIALIZED IN BIB.                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  1013
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1013
LOADMODS DS    0H                                                  1014
*   RFY                                                            1014
*     RET RSTD;                                                    1014
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1015
*   RFY                                                            1016
*     RET UNRSTD;                                                  1016
*   RFY                                                            1017
*     LDLSTMAP BASED(MWAPTRA);                                     1017
*   IF OPWDUMMY=ON THEN             /* IF DUMMY OPEN                 */
         TM    OPWDUMMY(RCORE),B'00010000'                         1018
         BNO   @RF01018                                            1018
*     DO;                           /* THEN INIT FOR DUMMY MODULES   */
*       MWAPTRA=ADDR(DUMYLIST);     /* PT TO ID FOR DUMMY DS         */
         LA    @11,DUMYLIST                                        1020
         ST    @11,MWAPTRA                                         1020
*       MWAPTRB=ADDR(ACBINRTN);     /* LOAD ADDRESS INTO ACB         */
         LA    MWAPTRB,ACBINRTN(,RACB)                             1021
*     END;                                                         1022
*   ELSE                            /* NOT DUMMY OPEN                */
*     DO;                           /* INIT NON-DUMMY DATA SETS      */
         B     @RC01018                                            1023
@RF01018 DS    0H                                                  1024
*       IF OPWFSTP=ON THEN          /* IF OPEN FOR ICI PROCESSING    */
         TM    OPWFSTP(RCORE),B'00010000'                          1024
         BNO   @RF01024                                            1024
*         MWAPTRA=ADDR(ICILIST);    /* THEN PT TO ICI LOAD LIST      */
         LA    @11,ICILIST                                         1025
         ST    @11,MWAPTRA                                         1025
*       ELSE                        /* NOT OPEN FOR ICI PROCESSING   */
*         MWAPTRA=ADDR(NORMLIST);   /* ELSE PT TO LOAD LIST FOR    1026
*                                      NORMAL PROCESSING             */
         B     @RC01024                                            1026
@RF01024 LA    @11,NORMLIST                                        1026
         ST    @11,MWAPTRA                                         1026
*       MWAPTRB=ADDR(BIBINTRF);     /* LOAD ADDRESSES INTO BIB       */
@RC01024 L     MWAPTRB,OPWBIB(,RCORE)                              1027
         LA    MWAPTRB,BIBINTRF(,MWAPTRB)                          1027
*     END;                                                         1028
*   MWACOMNM=RCDMGTPR;              /* LD COMMON PART OF MODULE NAME */
@RC01018 MVC   MWACOMNM(6),@CC05502                                1029
*   DO MWAI=1 TO LDLNOENT;          /* LOAD RCD MGT MODULES          */
         LA    @11,1                                               1030
         B     @DE01030                                            1030
@DL01030 DS    0H                                                  1031
*     IF LDLID(MWAI)^='  ' THEN     /* IF ID SPECIFIED               */
         L     @07,MWAPTRA                                         1031
         ALR   @11,@11                                             1031
         ALR   @11,@07                                             1031
         BCTR  @11,0                                               1031
         CLC   LDLID-1(2,@11),@CC05512                             1031
         BE    @RF01031                                            1031
*       DO;                         /* THEN LOAD AND DELETE MODULE   */
*         RFY                                                      1033
*          (R0,                                                    1033
*           R1) RSTD;                                              1033
*         MWAMODID=LDLID(MWAI);     /* LD LAST 2 CHARS OF MOD NAME   */
         L     @11,MWAI                                            1034
         ALR   @11,@11                                             1034
         ALR   @07,@11                                             1034
         BCTR  @07,0                                               1034
         MVC   MWAMODID(2),LDLID-1(@07)                            1034
*         R1=CVTSVDCB;              /* INIT PTR TO SVC DCB           */
         L     @11,FLCCVT                                          1035
         L     R1,CVTSVDCB(,@11)                                   1035
*         GEN(LOAD EPLOC=MWAMODNM,DCB=(1))                         1036
*         SETS(R0,R1) REFS(MWAMODNM);/* LOAD MODULE                  */
         LOAD EPLOC=MWAMODNM,DCB=(1)
*         MODADDR(MWAI)=R0;         /* LD ADDR OF LOADED RTN INTO BIB
*                                      OR ACB                        */
         L     @11,MWAI                                            1037
         SLA   @11,2                                               1037
         AL    @11,@CF05902                                        1037
         ST    R0,MODADDR(@11,MWAPTRB)                             1037
*         RFY                                                      1038
*          (R0,                                                    1038
*           R1) UNRSTD;                                            1038
*       END;                                                       1039
*     ELSE                          /* IF ID NOT SPECIFIED           */
*       MODADDR(MWAI)=0;            /* IND NO RCD MGT ROUTINE        */
         B     @RC01031                                            1040
@RF01031 L     @11,MWAI                                            1040
         SLA   @11,2                                               1040
         SLR   @07,@07                                             1040
         AL    @11,@CF05902                                        1040
         ST    @07,MODADDR(@11,MWAPTRB)                            1040
*   END;                                                           1041
@RC01031 LA    @11,1                                               1041
         AL    @11,MWAI                                            1041
@DE01030 ST    @11,MWAI                                            1041
         L     @07,MWAPTRA                                         1041
         SLR   @05,@05                                             1041
         IC    @05,LDLNOENT(,@07)                                  1041
         CR    @11,@05                                             1041
         BNH   @DL01030                                            1041
*   IF OPWDUMMY=OFF THEN            /* CHK FOR DUMMY         @Y30DSDP*/
         TM    OPWDUMMY(RCORE),B'00010000'                         1042
         BNZ   @RF01042                                            1042
*     ACBINRTN=BIBINTRF;            /* ADDR OF INRTN         @Y30DSDP*/
         L     @11,OPWBIB(,RCORE)                                  1043
         L     @11,BIBINTRF(,@11)                                  1043
         ST    @11,ACBINRTN(,RACB)                                 1043
*   IF JFCAMSYN^=NONAME&            /* IF SYNAD MOD SPECIFIED        */
*       ACBEXLST^=0&                /* AND EXIT LIST EXISTS          */
*       EXLLEN>=15 THEN             /* AND SYNAD PTR EXISTS          */
@RF01042 L     @11,OPWCOMWA(,RCORE)                                1044
         LA    @05,100                                             1044
         ALR   @05,@11                                             1044
         CLC   JFCAMSYN(8,@05),NONAME                              1044
         BE    @RF01044                                            1044
         L     @15,ACBEXLST(,RACB)                                 1044
         LTR   @15,@15                                             1044
         BZ    @RF01044                                            1044
         LH    @15,EXLLEN(,@15)                                    1044
         C     @15,@CF00042                                        1044
         BL    @RF01044                                            1044
*     DO;                           /* THEN LOAD SYNAD MODULE        */
*       RFY                                                        1046
*        (R0,                                                      1046
*         R6,                                                      1046
*         R15) RSTD;                /*                       @Y30DSDP*/
*       R6=ADDR(JFCAMSYN);          /* LD ADDR OF PTR TO SYNAD MOD   */
         LA    R6,JFCAMSYN(,@05)                                   1047
*       R15=ADDR(SYNADLDR);         /* GET PTR TO SYNAD LDR  @Y30DSDP*/
         LA    R15,SYNADLDR                                        1048
*       IF OPWFLGS1^=0×DXUKEY<X80 THEN/* CHK FOR SYS TASK    @Y30DSDP*/
         CLI   OPWFLGS1(RCORE),0                                   1049
         BNE   @RT01049                                            1049
         CLI   DXUKEY(@11),128                                     1049
         BNL   @RF01049                                            1049
@RT01049 DS    0H                                                  1050
*         CALL SYNADLDR;            /* YES, BR TO LDR        @Y30DSDP*/
         BAL   @14,SYNADLDR                                        1050
*       ELSE                        /* NO,                   @Y30DSDP*/
*         GEN(SYNCH (R15));         /* USE SYNCH MACRO       @Y30DSDP*/
         B     @RC01049                                            1051
@RF01049 DS    0H                                                  1051
         SYNCH (R15)
*       RFY                                                        1052
*        (R0,                                                      1052
*         R6,                                                      1052
*         R15) UNRSTD;              /*                       @Y30DSDP*/
@RC01049 DS    0H                                                  1053
*     END;                                                         1053
*   RFY                                                            1054
*     RET RSTD;                                                    1054
@RF01044 DS    0H                                                  1055
*   RET=MWASAVEB;                   /* RESTORE RETURN ADDR           */
         L     RET,MWASAVEB                                        1055
*   RFY                                                            1056
*     RET UNRSTD;                                                  1056
*   END LOADMODS;                                                  1057
@EL00010 DS    0H                                                  1057
@EF00010 DS    0H                                                  1057
@ER00010 BR    @14                                                 1057
*ACBVAL:                                                           1058
*                                                                  1058
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY INIT192A TO VALIDITY CHECK THE ACB.        */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO ACB IN RACB.                               */
*/*                                                                  */
*/*   OUTPUTS:  NONE                                                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  1058
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1058
ACBVAL   DS    0H                                                  1059
*   RFY                                                            1059
*     RET RSTD;                                                    1059
*   MWASAVEB=RET;                   /* SAVE RETURN ADDR              */
         ST    RET,MWASAVEB                                        1060
*   RFY                                                            1061
*     RET UNRSTD;                                                  1061
*   PDPFUNC=PDF82;                  /* SET FUNCTION CODE             */
         LA    @11,280                                             1062
         AL    @11,OPWCOMWA(,RCORE)                                1062
         MVI   PDPFUNC(@11),X'52'                                  1062
*   MWAMACRF=ACBMACRF;              /* SAVE ACB MACRF                */
         MVC   MWAMACRF(2),ACBMACRF(RACB)                          1063
*   IF ACBSDS=ON THEN               /* IF SYSTEM DATA SET    @Z40WSRL*/
         TM    ACBSDS(RACB),B'00000010'                            1064
         BNO   @RF01064                                            1064
*     DO;                           /*                       @Z40WSRL*/
*       IF ACBLSR=ON×ACBGSR=ON THEN /* IF LSR OR GSR         @Z40WSRL*/
         TM    ACBLSR(RACB),B'01100000'                            1066
         BZ    @RF01066                                            1066
*         DO;                       /*                       @Z40WSRL*/
*           PDPCODE=PP188;          /* SET PROBLEM CODE      @Z40WSRL*/
         MVI   PDPCODE(@11),X'BC'                                  1068
*           CALL PROBDT;            /* WRITE PROB DET MSG    @Z40WSRL*/
         BAL   @14,PROBDT                                          1069
*         END;                      /*                       @Z40WSRL*/
*       IF OPWPDTCI^=ZERO×OPWNOUPG>ZERO THEN/* IF PATH OR UPGRADE  1071
*                                      PROCESSING            @Z40WSRL*/
@RF01066 L     @11,OPWPDTCI-1(,RCORE)                              1071
         LA    @11,0(,@11)                                         1071
         LTR   @11,@11                                             1071
         BNZ   @RT01071                                            1071
         CLI   OPWNOUPG(RCORE),0                                   1071
         BNH   @RF01071                                            1071
@RT01071 DS    0H                                                  1072
*         DO;                       /*                       @Z40WSRL*/
*           PDPCODE=PP192;          /* SET PROBLEM CODE      @Z40WSRL*/
         L     @11,OPWCOMWA(,RCORE)                                1073
         MVI   PDPCODE+280(@11),X'C0'                              1073
*           CALL PROBDT;            /* PROBLEM DETERMINATION @Z40WSRL*/
         BAL   @14,PROBDT                                          1074
*         END;                      /*                       @Z40WSRL*/
*     END;                          /*                       @Z40WSRL*/
@RF01071 DS    0H                                                  1077
*   IF ACBLSR=ON×ACBGSR=ON THEN     /* IF OPEN FOR LSR OR GSR        */
@RF01064 TM    ACBLSR(RACB),B'01100000'                            1077
         BZ    @RF01077                                            1077
*     CALL DBDCVAL;                 /* THEN PERFORM DB/DC VALIDITY 1078
*                                      CHECK                         */
         BAL   @14,DBDCVAL                                         1078
*   ELSE                            /* NOT OPEN FOR LSR OR GSR       */
*     DO;                           /* VALIDITY CHECK NON-DB/DC ACB  */
         B     @RC01077                                            1079
@RF01077 DS    0H                                                  1080
*       IF ACBICI=ON THEN           /* ELSE IF ICI                   */
         TM    ACBICI(RACB),B'00010000'                            1080
         BNO   @RF01080                                            1080
*         DO;                                                      1081
*           ACBCNV=ON;              /* SET CINV PROCESSING IN ACB    */
*           ACBUBF=ON;              /* SET USER BUFFERING IN ACB     */
         OI    ACBCNV(RACB),B'00100001'                            1083
*           MWARSMAC=ON;            /* IND RESTORE ACB MACRF         */
         OI    MWARSMAC,B'00100000'                                1084
*           IF OPWBIXCI^=0          /* IF NOT AN ESDS OR RRDS        */
*               ×OPWPDTCI^=0 THEN   /* OR PATH PROCESSING            */
         L     @11,OPWBIXCI-1(,RCORE)                              1085
         LA    @11,0(,@11)                                         1085
         LTR   @11,@11                                             1085
         BNZ   @RT01085                                            1085
         L     @11,OPWPDTCI-1(,RCORE)                              1085
         LA    @11,0(,@11)                                         1085
         LTR   @11,@11                                             1085
         BZ    @RF01085                                            1085
@RT01085 DS    0H                                                  1086
*             DO;                                                  1086
*               PDPCODE=PP47;       /* SET PROB DET ERROR CODE       */
         L     @11,OPWCOMWA(,RCORE)                                1087
         MVI   PDPCODE+280(@11),X'2F'                              1087
*               CALL PROBDT;        /* WRITE PROB DET MESSAGE        */
         BAL   @14,PROBDT                                          1088
*             END;                                                 1089
*         END;                                                     1090
@RF01085 DS    0H                                                  1091
*       IF ACBUBF=ON&               /* IF USER BUFFERING             */
*           (ACBCNV=OFF×            /* IF NOT CINV PROCESSING        */
*           ACBKEY=ON×              /* IF KEY PROCESSING             */
*           ACBADR=ON) THEN         /* IF ADDR PROCESSING            */
@RF01080 TM    ACBUBF(RACB),B'00000001'                            1091
         BNO   @RF01091                                            1091
         TM    ACBKEY(RACB),B'11000000'                            1091
         BNZ   @RT01091                                            1091
         TM    ACBCNV(RACB),B'00100000'                            1091
         BO    @RF01091                                            1091
@RT01091 DS    0H                                                  1092
*         DO;                       /* THEN PROCESS ERROR            */
*           PDPCODE=PP44;           /* SET PROB DET ERROR CODE       */
         L     @11,OPWCOMWA(,RCORE)                                1093
         MVI   PDPCODE+280(@11),X'2C'                              1093
*           CALL PROBDT;            /* WRITE PROB DET MSG            */
         BAL   @14,PROBDT                                          1094
*         END;                                                     1095
*       IF ACBRST=ON THEN           /* IF RESET SPECIFIED            */
@RF01091 TM    ACBRST(RACB),B'00000100'                            1096
         BNO   @RF01096                                            1096
*         IF OPWPDTCI^=0 THEN       /* IF RESET FOR PATH AIX         */
         L     @11,OPWPDTCI-1(,RCORE)                              1097
         LA    @11,0(,@11)                                         1097
         LTR   @11,@11                                             1097
         BZ    @RF01097                                            1097
*           DO;                     /* THEN PROCESS ERROR            */
*             PDPCODE=PP88;         /* IND RESET OF PATH AIX         */
         L     @11,OPWCOMWA(,RCORE)                                1099
         MVI   PDPCODE+280(@11),X'58'                              1099
*             CALL PROBDT;          /* WRITE PROB DET MSG            */
         BAL   @14,PROBDT                                          1100
*           END;                                                   1101
*     END;                                                         1102
@RF01097 DS    0H                                                  1102
@RF01096 DS    0H                                                  1103
*   IF ACBCBIC=ON THEN              /* IF CONTROL BLKS IN COMMON   1103
*                                                            @ZA16012*/
@RC01077 TM    ACBCBIC(RACB),B'00100000'                           1103
         BNO   @RF01103                                            1103
*     DO;                           /* CHECK ACB PARMS       @ZA16012*/
*       RFY                                                        1105
*         RETCODE RSTD;             /* USE THIS REG          @ZA16012*/
*       GEN(TESTAUTH STATE=YES);    /* CHECK SUPER STATE     @ZA16012*/
         TESTAUTH STATE=YES
*       IF RETCODE^=0×              /* IF NOT SUPER STATE OR @ZA16012*/
*           (DXUKEY>MWAKEY7) THEN   /* NOT SYSTEM KEY        @ZA16012*/
         LTR   RETCODE,RETCODE                                     1107
         BNZ   @RT01107                                            1107
         L     @14,OPWCOMWA(,RCORE)                                1107
         CLI   DXUKEY(@14),112                                     1107
         BNH   @RF01107                                            1107
@RT01107 DS    0H                                                  1108
*         DO;                       /* ERROR                 @ZA16012*/
*           PDPCODE=PP196;          /* SET PROB CODE         @ZA16012*/
         L     @14,OPWCOMWA(,RCORE)                                1109
         MVI   PDPCODE+280(@14),X'C4'                              1109
*           CALL PROBDT;            /* CALL PROB DETERM      @ZA16012*/
         BAL   @14,PROBDT                                          1110
*         END;                      /* END ERROR             @ZA16012*/
*       RFY                                                        1112
*         RETCODE UNRSTD;           /* FREE REG FOR COMPILER @ZA16012*/
@RF01107 DS    0H                                                  1113
*       IF ACBLSR=ON×ACBGSR=ON THEN /* IF LSR OR GSR HAS BEEN      1113
*                                      SPECIFIED             @ZA16012*/
         TM    ACBLSR(RACB),B'01100000'                            1113
         BZ    @RF01113                                            1113
*         DO;                       /* ERROR                 @ZA16012*/
*           PDPCODE=PP197;          /* SET PROB CODE         @ZA16012*/
         L     @11,OPWCOMWA(,RCORE)                                1115
         MVI   PDPCODE+280(@11),X'C5'                              1115
*           CALL PROBDT;            /* CALL PROB DETERM      @ZA16012*/
         BAL   @14,PROBDT                                          1116
*         END;                      /* END ERROR             @ZA16012*/
*       IF ACBICI=OFF THEN          /* IF IMPROVED CONTROL INTERVAL
*                                      PROCESSING NOT SPECIFIED    1118
*                                                            @ZA16012*/
@RF01113 TM    ACBICI(RACB),B'00010000'                            1118
         BNZ   @RF01118                                            1118
*         DO;                       /* ERROR                 @ZA16012*/
*           PDPCODE=PP198;          /* SET PROB CODE         @ZA16012*/
         L     @11,OPWCOMWA(,RCORE)                                1120
         MVI   PDPCODE+280(@11),X'C6'                              1120
*           CALL PROBDT;            /* CALL PROB DETERM      @ZA16012*/
         BAL   @14,PROBDT                                          1121
*         END;                      /* END ERROR             @ZA16012*/
*     END;                          /* END CHECK ACB PARMS   @ZA16012*/
@RF01118 DS    0H                                                  1124
*   RFY                                                            1124
*     RET RSTD;                                                    1124
@RF01103 DS    0H                                                  1125
*   RET=MWASAVEB;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEB                                        1125
*   RFY                                                            1126
*     RET UNRSTD;                                                  1126
*   END ACBVAL;                                                    1127
@EL00011 DS    0H                                                  1127
@EF00011 DS    0H                                                  1127
@ER00011 BR    @14                                                 1127
*DBDCVAL:                                                          1128
*                                                                  1128
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY ACBVAL TO VALIDITY CHECK ACB IF LSR OR GSR */
*/*             IS SPECIFIED.                                        */
*/*                                                                  */
*/*   INPUTS:   SAME AS ACBVAL.                                      */
*/*                                                                  */
*/*   OUTPUTS:  NONE                                                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  1128
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1128
DBDCVAL  DS    0H                                                  1129
*   RFY                                                            1129
*     RET RSTD;                                                    1129
*   MWASAVEC=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEC                                        1130
*   RFY                                                            1131
*     RET UNRSTD;                                                  1131
*   IF ACBRST=ON THEN               /* IF RESET SPECIFIED            */
         TM    ACBRST(RACB),B'00000100'                            1132
         BNO   @RF01132                                            1132
*     DO;                           /* THEN PROCESS ERROR            */
*       PDPCODE=PP136;              /* SET ERROR CODE                */
         L     @11,OPWCOMWA(,RCORE)                                1134
         MVI   PDPCODE+280(@11),X'88'                              1134
*       CALL PROBDT;                /* WRITE PROB DET MSG            */
         BAL   @14,PROBDT                                          1135
*     END;                                                         1136
*   IF ACBICI=ON THEN               /* IF ICI SPECIFIED              */
@RF01132 TM    ACBICI(RACB),B'00010000'                            1137
         BNO   @RF01137                                            1137
*     DO;                                                          1138
*       PDPCODE=PP140;              /* SET ERROR CODE                */
         L     @11,OPWCOMWA(,RCORE)                                1139
         MVI   PDPCODE+280(@11),X'8C'                              1139
*       CALL PROBDT;                /* WRITE PROB DET MSG            */
         BAL   @14,PROBDT                                          1140
*     END;                                                         1141
*   IF ACBUBF=ON THEN               /* IF USER BUFFERING SPECIFIED   */
@RF01137 TM    ACBUBF(RACB),B'00000001'                            1142
         BNO   @RF01142                                            1142
*     DO;                                                          1143
*       PDPCODE=PP144;              /* SET ERROR CODE                */
         L     @11,OPWCOMWA(,RCORE)                                1144
         MVI   PDPCODE+280(@11),X'90'                              1144
*       CALL PROBDT;                /* WRITE PROB DET MSG            */
         BAL   @14,PROBDT                                          1145
*     END;                                                         1146
*   IF ACBGSR=ON THEN               /* CHK FOR GSR SPEC      @Z30SSDP*/
@RF01142 TM    ACBGSR(RACB),B'00100000'                            1147
         BNO   @RF01147                                            1147
*     DO;                           /* YES,                  @Z30SSDP*/
*       RFY                                                        1149
*         RETCODE RSTD;             /*                       @Z30SSDP*/
*       GEN(TESTAUTH STATE=YES);    /* CHK FOR SUPER STATE   @Z30SSDP*/
         TESTAUTH STATE=YES
*       IF RETCODE^=0×              /* IF NOT SUPER STATE    @Z30SSDP*/
*           (DXUKEY>MWAKEY7) THEN   /* CHK FOR SYSTEM KEY    @Z40ESSR*/
         LTR   RETCODE,RETCODE                                     1151
         BNZ   @RT01151                                            1151
         L     @14,OPWCOMWA(,RCORE)                                1151
         CLI   DXUKEY(@14),112                                     1151
         BNH   @RF01151                                            1151
@RT01151 DS    0H                                                  1152
*         DO;                       /* SET ERROR CODES       @Z30SSDP*/
*           PDPCODE=PP148;          /* GSR CALLER NOT AUTH   @Z30SSDP*/
         L     @14,OPWCOMWA(,RCORE)                                1153
         MVI   PDPCODE+280(@14),X'94'                              1153
*           CALL PROBDT;            /* CALL PROBLEM DET      @Z30SSDP*/
         BAL   @14,PROBDT                                          1154
*         END;                      /*                       @Z30SSDP*/
*       RFY                                                        1156
*         RETCODE UNRSTD;           /*                       @Z30SSDP*/
@RF01151 DS    0H                                                  1157
*     END;                          /*                       @Z30SSDP*/
*   RFY                                                            1158
*     RET RSTD;                                                    1158
@RF01147 DS    0H                                                  1159
*   RET=MWASAVEC;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEC                                        1159
*   RFY                                                            1160
*     RET UNRSTD;                                                  1160
*   END DBDCVAL;                                                   1161
@EL00012 DS    0H                                                  1161
@EF00012 DS    0H                                                  1161
@ER00012 BR    @14                                                 1161
*BLDDDEB:                                                          1162
*                                                                  1162
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: BUILDS DUMMY DEB FOR USER ACB AND INITAILIZES IT.    */
*/*             IF DEB IS NOT FOR CATALOG OR SYSTEM CATALOG          */
*/*             RECOVERY AREA, THEN ADD DEB TO DEB CHAIN OFF         */
*/*             CURRENT TCB.                                         */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO CURRENT TCB IN OPWCTCB.                    */
*/*                                                                  */
*/*   OUTPUTS:  1. DUMMY DEB IS BUILT.                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  1162
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1162
BLDDDEB  DS    0H                                                  1163
*   RFY                                                            1163
*     RET RSTD;                                                    1163
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        1164
*   RFY                                                            1165
*     RET UNRSTD;                                                  1165
*   PDPFUNC=PDF93;                  /* SET FUNCTION CODE             */
         L     @11,OPWCOMWA(,RCORE)                                1166
         MVI   PDPFUNC+280(@11),X'5D'                              1166
*   OPWVSMPL=OPWVSMPL&&OPWVSMPL;    /* ZERO VSM PARM LIST            */
         XC    OPWVSMPL(16,RCORE),OPWVSMPL(RCORE)                  1167
*   IF OPWFLGS1^=0 THEN             /* IF SYSTEM DATA SET            */
         CLI   OPWFLGS1(RCORE),0                                   1168
         BE    @RF01168                                            1168
*     OPWVMSP=SCATPOOL;             /* IND CATALOG SUBPOOL   @Y30DSDP*/
         MVI   OPWVMSP(RCORE),X'F1'                                1169
*   ELSE                            /* NO, NOT CAT           @Y30DSDP*/
*     IF OPWGSR=ON×OPWCBIC=ON THEN  /* IF GSR OR CONTROL BLKS IN   1170
*                                      COMMON SPECIFIED      @ZA16012*/
         B     @RC01168                                            1170
@RF01168 TM    OPWGSR(RCORE),B'01000000'                           1170
         BO    @RT01170                                            1170
         TM    OPWCBIC(RCORE),B'10000000'                          1170
         BNO   @RF01170                                            1170
@RT01170 DS    0H                                                  1171
*       OPWVMSP=GSRPOOL;            /* USE GSR SUBPOOL       @Y30DSDP*/
         MVI   OPWVMSP(RCORE),X'F1'                                1171
*     ELSE                          /* ELSE IND NORMAL SUBPOOL       */
*       OPWVMSP=DDEBPOOL;           /* INIT SUBPOOL                  */
         B     @RC01170                                            1172
@RF01170 MVI   OPWVMSP(RCORE),X'E6'                                1172
*   OPWVMLNG=DDEBLEN+LENGTH(DEBXTN);/* DETER LENGTH          @Z30SSDP*/
@RC01170 DS    0H                                                  1173
@RC01168 MVC   OPWVMLNG(3,RCORE),@CF02299+1                        1173
*   OPWVMTYP=DIRCTREQ;              /* IND DIRECT REQ        @Y30DSDP*/
         MVI   OPWVMTYP(RCORE),X'85'                               1174
*   IF OPWFLGS1=0 THEN              /* CHK FOR SYS DATA SET  @Y30DSDP*/
         CLI   OPWFLGS1(RCORE),0                                   1175
         BNE   @RF01175                                            1175
*     OPWVMKE5=ON;                  /* NO, INDIC KEY 5 CORE  @Y30DSDP*/
         OI    OPWVMKE5(RCORE),B'01000000'                         1176
*   CALL IDA0192M;                  /* OBTAIN STORAGE FOR DUMMY DEB  */
@RF01175 L     @15,@CV05673                                        1177
         BALR  @14,@15                                             1177
*   RSTATRTN=IDAR192A;              /* INDIC 192A CONTROL    @Y30DSDP*/
         L     @11,OPWCOMWA(,RCORE)                                1178
         MVC   RSTATRTN(4,@11),@CC05315                            1178
*   IF OPWVMADR=0 THEN              /* IF STORAGE NOT OBTAINED       */
         L     @05,OPWVMADR(,RCORE)                                1179
         LTR   @05,@05                                             1179
         BNZ   @RF01179                                            1179
*     DO;                           /* THEN WRITE PROB DET MESSAGE   */
*       PDPCODE=PP20;               /* IND GETMAIN ERROR             */
         MVI   PDPCODE+280(@11),X'14'                              1181
*       CALL PROBDT;                /* WRITE ERROR MESSAGE           */
         BAL   @14,PROBDT                                          1182
*     END;                                                         1183
*   OPWVMLNG=OPWVMLNG-LENGTH(DEBXTN);/* SET LEN              @Z30SSDP*/
@RF01179 L     @11,OPWVMLNG-1(,RCORE)                              1184
         LA    @11,0(,@11)                                         1184
         SL    @11,@CF00349                                        1184
         STCM  @11,7,OPWVMLNG(RCORE)                               1184
*   MWADEB=OPWVMADR;                /* INIT PTR TO DEB CORE          */
         L     @15,OPWVMADR(,RCORE)                                1185
         LR    MWADEB,@15                                          1185
*   MWATCB=OPWCTCB;                 /* PT TO CURRENT TCB             */
         L     @14,OPWCTCB(,RCORE)                                 1186
         ST    @14,MWATCB                                          1186
*   MWADEB=MWADEB+LENGTH(DEBPREFX); /* PT TO DEB BASIC               */
         AL    MWADEB,@CF00051                                     1187
*   RFY                                                            1188
*     DEB BASED(MWADEB-LENGTH(DEB));/* SET BASE FOR DEB PREFIX       */
*   DEBLNGTH=DDEBLEN/DWORDLEN;      /* INIT LENGTH IN DOUBLE WORDS   */
         LR    @09,MWADEB                                          1189
         SL    @09,@CF02568                                        1189
         MVI   DEBLNGTH(@09),X'07'                                 1189
*   DEBTCBB=MWATCB;                 /* INIT PTR TO TCB               */
         STCM  @14,7,DEBTCBB(MWADEB)                               1190
*   DEBDCBB=OPWUACB;                /* INIT PTR TO USER ACB          */
         MVC   DEBDCBB(3,MWADEB),OPWUACB+1(RCORE)                  1191
*   DEBAPPAD=ADDR(DEB);             /* PTR TO APPENDAGE VECTOR TABLE
*                                                            @Z30SSRL*/
         ST    @09,DEBAPPAD(,MWADEB)                               1192
*   ACBDEB=ADDR(DEBBASIC);          /* INIT DEB PTR IN ACB           */
         STCM  MWADEB,7,ACBDEB(RACB)                               1193
*   DEBPROTG=DXUKEY;                /* GET CALLER KEY        @Z30SSDP*/
         L     @08,OPWCOMWA(,RCORE)                                1194
         MVC   DEBPROTG(1,MWADEB),DXUKEY(@08)                      1194
*   DEBDEBID=DEBDEBID×IDXDEB;       /* INIT ID IN DEB                */
         OI    DEBDEBID(MWADEB),B'00001111'                        1195
*   DEBXTNIN=ON;                    /* SET DEBXTN INDICATR ON      1196
*                                                            @Z30SSDP*/
         OI    DEBXTNIN(MWADEB),B'00000001'                        1196
*   DEBXTNP=OPWVMADR+OPWVMLNG;      /* INIT PTR TO DEBXTN    @Z30SSDP*/
         ALR   @15,@11                                             1197
         ST    @15,DEBXTNP(,@09)                                   1197
*   DEBXTN=DXDEBXAD->DEBXTN;        /* SET DEBXTN = MODEL    @Z30SSDP*/
         L     @11,DXDEBXAD(,@08)                                  1198
         MVC   DEBXTN(32,@15),DEBXTN(@11)                          1198
*   DEBXCDCB=ON;                    /* SET NOT CLOSEABLE     @Z30SSDP*/
         OI    DEBXCDCB(@15),B'10000000'                           1199
*   DEBXDBPR=ADDR(DEBBASIC);        /* INIT PTR TO DEBBASIC  @Z30SSDP*/
         ST    MWADEB,DEBXDBPR(,@15)                               1200
*   IF OPWCAT=OFF&OPWSCRA=OFF&      /* IF NOT CATALOG OR SCRA        */
*       OPWVVIC=OFF THEN            /* AND NOT VVIC          @ZA05114*/
         TM    OPWCAT(RCORE),B'11100000'                           1201
         BNZ   @RF01201                                            1201
*     DO;                           /* THEN CHAIN DEB AND ADD TO DEB
*                                      TABLE                         */
*       RFY                                                        1203
*         R8 RSTD;                                                 1203
*       R8=TCBDEB;                  /* PT TO FIRST DEB ON CHAIN      */
         L     R8,TCBDEB(,@14)                                     1204
*CHANGED:                           /* ADD DEB TO CHAIN      @ZA05217*/
*       DEBDEBB=R8;                 /* PT NEW DEB TO FIRST DEB       */
CHANGED  STCM  R8,7,DEBDEBB(MWADEB)                                1205
*       CS(R8,MWADEB,TCBDEB);       /* ADD NEW DEB TO DEB CHAIN      */
         L     @11,MWATCB                                          1206
         CS    R8,@05,TCBDEB(@11)                                  1206
*       GEN(BC 7,CHANGED);          /* CONTINUE IF MORE DEBS @ZA05217*/
         BC 7,CHANGED
*       R8=DEBDCBB;                 /* PT TO USER ACB                */
         L     R8,DEBDCBB-1(,MWADEB)                               1208
         LA    R8,0(,R8)                                           1208
*       GEN(DEBCHK (R8),TYPE=ADD,AM=VSAM);/* ADD DEB TO DEB TABLE    */
         DEBCHK (R8),TYPE=ADD,AM=VSAM
*       RFY                                                        1210
*         R8 UNRSTD;                                               1210
*     END;                                                         1211
*   RFY                                                            1212
*     DEB BASED(DEBAPPAD);          /*                       @Z30SSDP*/
@RF01201 DS    0H                                                  1213
*   RFY                                                            1213
*     RET RSTD;                                                    1213
*   RET=MWASAVEA;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEA                                        1214
*   RFY                                                            1215
*     RET UNRSTD;                                                  1215
*   END BLDDDEB;                                                   1216
@EL00013 DS    0H                                                  1216
@EF00013 DS    0H                                                  1216
@ER00013 BR    @14                                                 1216
*GETCORE:                                                          1217
*                                                                  1217
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: THIS ROUTINE GETS VIRTUAL STORAGE.                   */
*/*                                                                  */
*/*   INPUTS:   1. SUBPOOL REQUIRED IN MWAGFSP.                      */
*/*             2. LENGTH OF CORE REQUIRED IN MWAGFLEN.              */
*/*                                                                  */
*/*   OUTPUTS:  1. GETMAIN IS ISSUED.                                */
*/*             2. CORE ALLOCATED IS ZEROED.                         */
*/*                                                                  */
*/********************************************************************/
*                                                                  1217
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1217
GETCORE  DS    0H                                                  1218
*   RFY                                                            1218
*     RET RSTD;                                                    1218
*   MWASAVEE=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEE                                        1219
*   RFY                                                            1220
*     RET UNRSTD;                                                  1220
*   RFY                                                            1221
*    (R0,                                                          1221
*     R1,                                                          1221
*     R6,                                                          1221
*     R7,                                                          1221
*     R8,                                                          1221
*     R9) RSTD;                                                    1221
*   STM(R6,R9,MWAGFSVE);            /* SAVE WORK REGISTERS           */
         STM   R6,R9,MWAGFSVE                                      1222
*   MWAGFLEN=(MWAGFLEN+SEVEN)&NEGEIGHT;/* ROUND LENGTH UP TO NEXT  1223
*                                      DOUBLE WORD MULTIPLE          */
         LA    @11,7                                               1223
         L     @05,MWAGFLEN-1                                      1223
         LA    @05,0(,@05)                                         1223
         ALR   @11,@05                                             1223
         N     @11,@CF05547                                        1223
         STCM  @11,7,MWAGFLEN                                      1223
*   R6=MWAGFSP;                     /* LOAD SUBPOOL                  */
         SLR   R6,R6                                               1224
         IC    R6,MWAGFSP                                          1224
*   R7=MWAGFLEN;                    /* LOAD BLOCK LENGTH             */
         LR    R7,@11                                              1225
*   GEN(GETMAIN RC,LV=(R7),SP=(R6))                                1226
*   SETS(RETCODE);                  /* GET BLOCK             @Y30DSDP*/
         GETMAIN RC,LV=(R7),SP=(R6)
*   RFY                                                            1227
*     RETCODE RSTD;                                                1227
*   IF RETCODE=0 THEN               /* WAS GETMAIN SUCCESSFUL        */
         LTR   RETCODE,RETCODE                                     1228
         BNZ   @RF01228                                            1228
*     DO;                           /* YES - ZERO CORE BLOCK         */
*       MWAGFADR=R1;                /* PTR TO GOTTEN CORE    @Y30DSDP*/
         ST    R1,MWAGFADR                                         1230
*       R6=MWAGFADR;                /* POINT TO CORE BLOCK           */
         L     @14,MWAGFADR                                        1231
         LR    R6,@14                                              1231
*       R7=MWAGFLEN;                /* LOAD BLOCK LENGTH             */
         L     R7,MWAGFLEN-1                                       1232
         LA    R7,0(,R7)                                           1232
*       R9=0;                       /* ZERO PAD CHARACTER            */
         SLR   R9,R9                                               1233
*       MVCL(R6,R8);                /* ZERO CORE BLOCK               */
         MVCL  R6,R8                                               1234
*     END;                                                         1235
*   LM(R6,R9,MWAGFSVE);             /* RESTORE WORK REGISTERS        */
@RF01228 LM    R6,R9,MWAGFSVE                                      1236
*   IF RETCODE^=0 THEN              /* IF GETMAIN FAILED             */
         LTR   RETCODE,RETCODE                                     1237
         BZ    @RF01237                                            1237
*     DO;                           /* THEN PROCESS ERROR            */
*       IF MWAOPWRK=ON THEN         /* IF OPW EXISTS                 */
         TM    MWAOPWRK,B'10000000'                                1239
         BNO   @RF01239                                            1239
*         DO;                       /* THEN DO NORMAL PROB DET       */
*           PDPCODE=PP20;           /* IND GETMAIN FAILURE           */
         L     @14,OPWCOMWA(,RCORE)                                1241
         MVI   PDPCODE+280(@14),X'14'                              1241
*           CALL PROBDT;            /* WRITE PROB DET MSG            */
         BAL   @14,PROBDT                                          1242
*         END;                                                     1243
*       ELSE                        /* ELSE OPW DOES NOT EXIST       */
*         DO;                       /* TERMINATE OPEN                */
         B     @RC01239                                            1244
@RF01239 DS    0H                                                  1245
*           RESPECIFY                                              1245
*             FORCORE BASED(RCORE); /*                       @ZA33666*/
*           PDPCODE=PP20;           /* IND GETMAIN FAILURE   @ZA33666*/
         MVI   PDPCODE+280(RCORE),X'14'                            1246
*           RESPECIFY                                              1247
*             FORCORE BASED(OPWCOMWA);/*                     @ZA33666*/
*           ACBERFLG=IDAERMAP(PP20);/* SET ACB ERROR CODE            */
         IC    @14,IDAERMAP+19                                     1248
         STC   @14,ACBERFLG(,RACB)                                 1248
*           R1=RCORE;               /* PT TO FORECORE                */
         LR    R1,RCORE                                            1249
*           RSTATRTN=IDAR192P;      /* INDIC 192P CONTROL    @Y30DSDP*/
         L     @14,OPWCOMWA(,RCORE)                                1250
         MVC   RSTATRTN(4,@14),@CC05329                            1250
*           CALL IDA0192P;          /* WRITE PROB DET MSG            */
         L     @15,@CV05701                                        1251
         BALR  @14,@15                                             1251
*           RSTATRTN=IDAR192A;      /* INDIC 192A CONTROL    @Y30DSDP*/
         L     @14,OPWCOMWA(,RCORE)                                1252
         MVC   RSTATRTN(4,@14),@CC05315                            1252
*           RETURN TO TERM192A;     /* TERMINATE OPEN                */
         LA    @14,TERM192A                                        1253
@EL00014 DS    0H                                                  1253
@EF00014 DS    0H                                                  1253
@ER00014 BR    @14                                                 1253
*         END;                                                     1254
*     END;                                                         1255
@RC01239 DS    0H                                                  1256
*   RFY                                                            1256
*     RETCODE UNRSTD;                                              1256
@RF01237 DS    0H                                                  1257
*   RFY                                                            1257
*     RET RSTD;                                                    1257
*   RET=MWASAVEE;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEE                                        1258
*   RFY                                                            1259
*     RET UNRSTD;                                                  1259
*   RFY                                                            1260
*    (R0,                                                          1260
*     R1,                                                          1260
*     R6,                                                          1260
*     R7,                                                          1260
*     R8,                                                          1260
*     R9) UNRSTD;                                                  1260
*   END GETCORE;                                                   1261
         B     @EL00014                                            1261
*FREECORE:                                                         1262
*                                                                  1262
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: THIS ROUTINE ISSUES THE FREEMAIN FOR IDA0192A        */
*/*                                                                  */
*/*   INPUTS:   1. SUBPOOL IN MWAGFPSP                               */
*/*             2. LENGTH IN MWAGFLEN                                */
*/*             3. ADDRESS IN MWAGFADR                               */
*/*                                                                  */
*/*   OUTPUTS:  1. THE FREEMAIN IS ISSUED                            */
*/*                                                                  */
*/********************************************************************/
*                                                                  1262
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1262
FREECORE DS    0H                                                  1263
*   RFY                                                            1263
*     RET RSTD;                                                    1263
*   MWASAVEE=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEE                                        1264
*   RFY                                                            1265
*     RET UNRSTD;                                                  1265
*   RFY                                                            1266
*    (R0,                                                          1266
*     R1) RSTD;                                                    1266
*   IF MWAGFADR^=0&MWAGFLEN>=DWORDLEN THEN/* IF VALID LENGTH & ADDR  */
         L     @11,MWAGFADR                                        1267
         LTR   @11,@11                                             1267
         BZ    @RF01267                                            1267
         CLC   MWAGFLEN(3),@CF00039+1                              1267
         BL    @RF01267                                            1267
*     DO;                           /* THEN PROCESS FREEMAIN         */
*       R0=MWAGFR0;                 /* INIT REG 0 FOR FREEMAIN       */
         L     R0,MWAGFR0                                          1269
*       R1=MWAGFADR;                /* INIT REG 1 FOR FREEMAIN       */
         LR    R1,@11                                              1270
*       GEN(FREEMAIN R,LV=(0),A=(1));/* ISSUE FREEMAIN               */
         FREEMAIN R,LV=(0),A=(1)
*     END;                                                         1272
*   RFY                                                            1273
*    (R0,                                                          1273
*     R1) UNRSTD;                                                  1273
@RF01267 DS    0H                                                  1274
*   RFY                                                            1274
*     RET RSTD;                                                    1274
*   RET=MWASAVEE;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEE                                        1275
*   RFY                                                            1276
*     RET UNRSTD;                                                  1276
*   END FREECORE;                                                  1277
@EL00015 DS    0H                                                  1277
@EF00015 DS    0H                                                  1277
@ER00015 BR    @14                                                 1277
*PROBDT:                                                           1278
*                                                                  1278
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: THIS ROUTINE IS THE INTERFACE BETWEEN THIS           */
*/*             MODULE AND IDA0192P.  IT IS CALLED IN THE EVENT      */
*/*             AN ERROR OR WARNING CONDITION.                       */
*/*                                                                  */
*/*   INPUTS:   1. PROBLEM DETERMINATION PROBLEM CODE (PPCODE).      */
*/*             2. PROBLEM DETERMINATION FUNCTION CODE (PPFUNC).     */
*/*                                                                  */
*/*   OUTPUTS:  1. PROBLEM DETERMINATION PARAMETER LIST IS           */
*/*                   COMPLETED.                                     */
*/*             2. THE ACBERFLG IS DETERMINED AND SET                */
*/*             3. THE CALL TO IDA0192P IS MADE                      */
*/*             4. RETURN TO CALLER IF WARNING CONDITION, OR ...     */
*/*             5. BRANCH TO LABEL EXIT IF ERROR CONDITION           */
*/*                                                                  */
*/********************************************************************/
*                                                                  1278
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1278
PROBDT   DS    0H                                                  1279
*   RFY                                                            1279
*     RET RSTD;                                                    1279
*   MWASAVEE=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEE                                        1280
*   RFY                                                            1281
*     RET UNRSTD;                                                  1281
*   RACB=OPWUACB;                   /* PT TO USER ACB                */
         L     RACB,OPWUACB(,RCORE)                                1282
*   ACBERFLG=OPWERMAP(PDPCODE);     /* SET ERROR FLAG IN USER ACB    */
         L     @11,OPWCOMWA(,RCORE)                                1283
         SLR   @07,@07                                             1283
         IC    @07,PDPCODE+280(,@11)                               1283
         ALR   @07,RCORE                                           1283
         MVC   ACBERFLG(1,RACB),OPWERMAP-1(@07)                    1283
*   RESPECIFY                                                      1284
*     R1 RESTRICTED;                                               1284
*   R1=OPWCOMWA;                    /* PT TO FORECORE                */
         LR    R1,@11                                              1285
*   RESPECIFY                                                      1286
*     R1 UNRESTRICTED;                                             1286
*   RSTATRTN=IDAR192P;              /* INDIC 192P CONTROL    @Y30DSDP*/
         MVC   RSTATRTN(4,@11),@CC05329                            1287
*   CALL IDA0192P;                  /* CALL PROBLEM DETERMINATION    */
         L     @15,@CV05701                                        1288
         BALR  @14,@15                                             1288
*   RSTATRTN=IDAR192A;              /* INDIC 192A CONTROL    @Y30DSDP*/
         L     @11,OPWCOMWA(,RCORE)                                1289
         MVC   RSTATRTN(4,@11),@CC05315                            1289
*   IF ACBERFLG>=OPERR128&          /* IF FATAL ERROR OCCURRED       */
*       MWAEXIT=OFF THEN            /* NOT ALREADY EXITING           */
         CLI   ACBERFLG(RACB),128                                  1290
         BL    @RF01290                                            1290
         TM    MWAEXIT,B'00000010'                                 1290
         BNZ   @RF01290                                            1290
*     DO;                           /* THEN TERMINATE OPEN           */
*       MWAOFAIL=ON;                /* IND OPEN FAILURE              */
         OI    MWAOFAIL,B'00010000'                                1292
*       RETURN TO TERM192A;         /* EXIT MODULE IMMEDIATELY       */
         LA    @14,TERM192A                                        1293
@EL00016 DS    0H                                                  1293
@EF00016 DS    0H                                                  1293
@ER00016 BR    @14                                                 1293
*     END;                                                         1294
*   RFY                                                            1295
*     RET RSTD;                                                    1295
@RF01290 DS    0H                                                  1296
*   RET=MWASAVEE;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEE                                        1296
*   RFY                                                            1297
*     RET UNRSTD;                                                  1297
*   END PROBDT;                                                    1298
         B     @EL00016                                            1298
*UPSMF:                                                            1299
*                                                                  1299
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: THIS ROUTINE IS THE INTERFACE BETWEEN THIS           */
*/*             MODULE AND THE SMF MODULE (IDA0192S).                */
*/*                                                                  */
*/*   INPUTS:   1. ADDRESS OF THE ACB (RACB).                        */
*/*             2. CLUSTER/DATA SET NAME FR JFCB.                    */
*/*             3. ERROR FLAG FR ACBERFLG.                           */
*/*             4. ADDRESS OF CATALOG ACB (CTHSHCAT).                */
*/*             5. CATALOG NAME FROM CATALOG CAXWA.                  */
*/*             6. VOLUME SERIAL OF THE CATALOG.                     */
*/*                                                                  */
*/*   OUTPUTS:  1. THE IDA0192S PARAMETER LIST IS BUILT.             */
*/*             2. IDA0192S IS CALLED.                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  1299
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1299
UPSMF    DS    0H                                                  1300
*   RFY                                                            1300
*     RET RSTD;                                                    1300
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        1301
*   RFY                                                            1302
*     RET UNRSTD;                                                  1302
*   MWARCNBR=OPENRCD;               /* SET RECORD NUMBER             */
         MVI   MWARCNBR,X'3E'                                      1303
*   MWARCACB=RACB;                  /* SET PTR TO ACB                */
         ST    RACB,MWARCACB                                       1304
*   MWARCDSN=ADDR(JFCBDSNM);        /* PT TO CLUSTER/DS NAME         */
         LA    @11,100                                             1305
         AL    @11,OPWCOMWA(,RCORE)                                1305
         ST    @11,MWARCDSN                                        1305
*   IF ACBERFLG=OPERR152 THEN       /* IF SECURITY NOT VERIFIED      */
         CLI   ACBERFLG(RACB),152                                  1306
         BNE   @RF01306                                            1306
*     MWARCSVL=ON;                  /* SET SECURITY VIOLATION INDIC  */
         OI    MWARCSVL,B'01000000'                                1307
*   ELSE                            /* IF SECURITY VERIFIED          */
*     IF ACBERFLG<OPERR128 THEN     /* IF OPEN WAS SUCCESSFUL        */
         B     @RC01306                                            1308
@RF01306 CLI   ACBERFLG(RACB),128                                  1308
         BNL   @RF01308                                            1308
*       MWARCOOK=ON;                /* SO INDICATE                   */
         OI    MWARCOOK,B'10000000'                                1309
*   MWAPTRA=OPWCACB->ACBUAPTR;      /* LD ADDR OF CAXWA              */
@RF01308 DS    0H                                                  1310
@RC01306 L     @11,OPWCACB(,RCORE)                                 1310
         L     @11,ACBUAPTR(,@11)                                  1310
         ST    @11,MWAPTRA                                         1310
*   RFY                                                            1311
*     IGGCAXWA BASED(MWAPTRA);                                     1311
*   IF OPWSCRA=ON×OPWUCRA=ON THEN   /* IF SCRA OR UCRA THEN  @ZA31854*/
         TM    OPWSCRA(RCORE),B'01000000'                          1312
         BO    @RT01312                                            1312
         TM    OPWUCRA(RCORE),B'10000000'                          1312
         BNO   @RF01312                                            1312
@RT01312 DS    0H                                                  1313
*     DO;                           /*                       @ZA31854*/
*       MWARCCSN=ADDR(CAXACB->ACBUAPTR->CAXCNAM);/* POINT TO CATALOG
*                                      DATASET NAME          @ZA31854*/
         L     @11,MWAPTRA                                         1314
         L     @11,CAXACB(,@11)                                    1314
         L     @11,ACBUAPTR(,@11)                                  1314
         LA    @11,CAXCNAM(,@11)                                   1314
         ST    @11,MWARCCSN                                        1314
*       MWARCCRA=ON;                /* INDICATE CRA OPEN     @ZA31854*/
         OI    MWARCCRA,B'00100000'                                1315
*     END;                          /*                       @ZA31854*/
*   ELSE                            /* NOT CRA OPEN          @ZA31854*/
*     MWARCCSN=ADDR(CAXCNAM);       /* POINT TO CATALOG NAME         */
         B     @RC01312                                            1317
@RF01312 L     @11,MWAPTRA                                         1317
         LA    @11,CAXCNAM(,@11)                                   1317
         ST    @11,MWARCCSN                                        1317
*   MWAPTRB=CAXUCB;                 /* POINT TO CATALOG UCB          */
@RC01312 L     @11,MWAPTRA                                         1318
         L     MWAPTRB,CAXUCB(,@11)                                1318
*   MWARCVSL=ADDR(UCBVOLI);         /* SET PTR TO VOLSER             */
         L     @11,OPWTIOT(,RCORE)                                 1319
         L     @05,TIOEFSRT-1(,@11)                                1319
         LA    @05,0(,@05)                                         1319
         LA    @05,UCBVOLI(,@05)                                   1319
         ST    @05,MWARCVSL                                        1319
*   MWARCTIO(1)=OPWTIOT;            /* PT TO TIOT ENTRY              */
         ST    @11,MWARCTIO                                        1320
*   RFY                                                            1321
*     R1 RSTD;                                                     1321
*   R1=ADDR(MWARCD62);              /* POINT TO PARM LIST            */
         LA    R1,MWARCD62                                         1322
*   RSTATRTN=IDAR192S;              /* INDIC 192S CONTROL    @Y30DSDP*/
         L     @11,OPWCOMWA(,RCORE)                                1323
         MVC   RSTATRTN(4,@11),@CC05331                            1323
*   CALL IDA0192S;                  /* WRITE SMF RECORD              */
         L     @15,@CV05778                                        1324
         BALR  @14,@15                                             1324
*   RSTATRTN=IDAR192A;              /* INDIC 192A CONTROL    @Y30DSDP*/
         L     @11,OPWCOMWA(,RCORE)                                1325
         MVC   RSTATRTN(4,@11),@CC05315                            1325
*   RFY                                                            1326
*     R1 UNRSTD;                                                   1326
*   RFY                                                            1327
*     RETCODE RSTD;                                                1327
*   IF RETCODE^=0 THEN              /* IF ANY ERROR                  */
         LTR   RETCODE,RETCODE                                     1328
         BZ    @RF01328                                            1328
*     DO;                                                          1329
*       MWAPDPRM=RETCODE;           /* SAVE RETURN CODE              */
         ST    RETCODE,MWAPDPRM                                    1330
*       RFY                                                        1331
*         RETCODE UNRSTD;                                          1331
*       PDPCODE=MWAPCODE;           /* LD PPCODE                     */
         AL    @11,@CF05875                                        1332
         IC    @05,MWAPCODE                                        1332
         STC   @05,PDPCODE(,@11)                                   1332
*       PDPFUNC=MWAPFUNC;           /* LD FUNCTION CODE              */
         IC    @05,MWAPFUNC                                        1333
         STC   @05,PDPFUNC(,@11)                                   1333
*       PDPSFC=MWAPSFC;             /* LD SUB-FUNCTION CODE          */
         IC    @05,MWAPSFC                                         1334
         STC   @05,PDPSFC(,@11)                                    1334
*       CALL PROBDT;                /* CALL PROBLEM DETERMINATION    */
         BAL   @14,PROBDT                                          1335
*     END;                                                         1336
*   RFY                                                            1337
*     RET RSTD;                                                    1337
@RF01328 DS    0H                                                  1338
*   RET=MWASAVEA;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEA                                        1338
*   RFY                                                            1339
*     RET UNRSTD;                                                  1339
*   END UPSMF;                                                     1340
@EL00017 DS    0H                                                  1340
@EF00017 DS    0H                                                  1340
@ER00017 BR    @14                                                 1340
*JFCACBMG:                                                         1341
*                                                                  1341
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: THIS ROUTINE DOES A JFCB TO ACB MERGE.               */
*/*                                                                  */
*/*   INPUTS:   1. CHECKPOINT/RESTART INDICATOR IN JFCB (JFCAMCRO).  */
*/*                                                                  */
*/*   OUTPUTS:  1. CHECKPOINT/RESTART INDICATORS IN ACB.             */
*/*                                                                  */
*/********************************************************************/
*                                                                  1341
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1341
JFCACBMG DS    0H                                                  1342
*   RFY                                                            1342
*     RET RSTD;                                                    1342
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1343
*   RFY                                                            1344
*     RET UNRSTD;                                                  1344
*                                                                  1344
*   /*****************************************************************/
*   /*                                                               */
*   /* MERGE USERS JFCB CHECKPOINT/RESTART INDICATORS INTO ACB       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1345
*   IF JFCAMCRO(CRJFCBYT)=RCK THEN  /* SHOULD C/R MAKE TESTS         */
         L     @11,OPWCOMWA(,RCORE)                                1345
         CLI   JFCAMCRO+100(@11),128                               1345
         BNE   @RF01345                                            1345
*     DO;                           /* YES                           */
*       ACBCRNCK=OFF;               /* SET "NO CHECK FOR MODIFY" OFF */
*       ACBCRNRE=OFF;               /* SET "NO DATA ERASE/REPOS" OFF */
         NI    ACBCRNCK(RACB),B'00111111'                          1348
*     END;                                                         1349
*   ELSE                            /* IF NOT RCK                    */
*     IF JFCAMCRO(CRJFCBYT)=NRC THEN/* SHOULD C/R MAKE TESTS         */
         B     @RC01345                                            1350
@RF01345 L     @11,OPWCOMWA(,RCORE)                                1350
         CLI   JFCAMCRO+100(@11),16                                1350
         BNE   @RF01350                                            1350
*       DO;                         /* NO                            */
*         ACBCRNCK=ON;              /* SET "NO CHECK FOR MODIFY" ON  */
*         ACBCRNRE=ON;              /* SET "NO DATA ERASE/REPOS" ON  */
         OI    ACBCRNCK(RACB),B'11000000'                          1353
*       END;                                                       1354
*     ELSE                          /* IF NOT NRC                    */
*       IF JFCAMCRO(CRJFCBYT)=NCK THEN/* NO CHECK FOR MODIFY         */
         B     @RC01350                                            1355
@RF01350 L     @11,OPWCOMWA(,RCORE)                                1355
         CLI   JFCAMCRO+100(@11),64                                1355
         BNE   @RF01355                                            1355
*         DO;                                                      1356
*           ACBCRNCK=ON;            /* SET "NO CHECK FOR MODIFY" ON  */
*           ACBCRNRE=OFF;           /* SET "NO DATA ERASE/REPOS" OFF */
         OI    ACBCRNCK(RACB),B'10000000'                          1358
         NI    ACBCRNRE(RACB),B'10111111'                          1358
*         END;                                                     1359
*       ELSE                        /* IF NOT NCK                    */
*         IF JFCAMCRO(CRJFCBYT)=NRE THEN/* NO DATA ERASE/REPOS       */
         B     @RC01355                                            1360
@RF01355 L     @11,OPWCOMWA(,RCORE)                                1360
         CLI   JFCAMCRO+100(@11),32                                1360
         BNE   @RF01360                                            1360
*           DO;                                                    1361
*             ACBCRNCK=OFF;         /* SET "NO CHECK FOR MODIFY" OFF */
*             ACBCRNRE=ON;          /* SET "NO DATA ERASE/REPOS" ON  */
         OI    ACBCRNRE(RACB),B'01000000'                          1363
         NI    ACBCRNCK(RACB),B'01111111'                          1363
*           END;                                                   1364
*   RFY                                                            1365
*     RET RSTD;                                                    1365
@RF01360 DS    0H                                                  1365
@RC01355 DS    0H                                                  1365
@RC01350 DS    0H                                                  1365
@RC01345 DS    0H                                                  1366
*   RET=MWASAVEB;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEB                                        1366
*   RFY                                                            1367
*     RET UNRSTD;                                                  1367
*   END JFCACBMG;                                                  1368
@EL00018 DS    0H                                                  1368
@EF00018 DS    0H                                                  1368
@ER00018 BR    @14                                                 1368
*CLNUP:                                                            1369
*                                                                  1369
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY TERM192A TO PERFORM SYSTEM CLEAN UP PRIOR  */
*/*             TO TERMINATION OF AN OPEN BECAUSE OF AN ERROR.  THE  */
*/*             FOLLOWING FUNCTIONS ARE PERFORMED AS REQUIRED        */
*/*             FOR THIS OPEN:                                       */
*/*             (1) RESET OPEN INDICATORS IN CATALOG, (2) DECHAIN    */
*/*             AMBL'S AND DELETE VAT ENTRIES, (3) DECHAIN DEB'S,    */
*/*             (4) DECREMENT VSRT USE COUNT, (5) DEQ ALL ENQ'S,     */
*/*             (6) DELETE VMT ENTRIES, (7) FREE FIXED PAGES,        */
*/*             (8) CALL IDA0192M TO FREE CORE.                      */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO BASE AMBL IN OPWBAMBL.                     */
*/*             2. PTR TO PATH AMBL IN OPWPAMBL.                     */
*/*             3. PTR TO UPT IN OPWUPT.                             */
*/*             4. PTR TO DSL IN OPWDSL.                             */
*/*             5. PTR TO ESL IN OPWESL.                             */
*/*             6. PTR TO BIB IN OPWBIB.                             */
*/*             7. PTR TO PSL IN OPWPSL.                             */
*/*                                                                  */
*/*   OUTPUTS:  NONE.                                                */
*/*                                                                  */
*/********************************************************************/
*                                                                  1369
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1369
CLNUP    DS    0H                                                  1370
*   RFY                                                            1370
*     RET RSTD;                                                    1370
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        1371
*   RFY                                                            1372
*     RET UNRSTD;                                                  1372
*   PDPFUNC=PDF96;                  /* IND CLEANUP PROCESSING        */
         L     @11,OPWCOMWA(,RCORE)                                1373
         MVI   PDPFUNC+280(@11),X'60'                              1373
*   OPWCURPT=ADDR(OPWBSECL);        /* PT TO BASE CLUSTER ENTRY      */
         LA    @11,OPWBSECL(,RCORE)                                1374
         ST    @11,OPWCURPT(,RCORE)                                1374
*   MWAXAMBL=OPWBAMBL;              /* PT TO BASE AMBL ADDR          */
         L     MWAXAMBL,OPWBAMBL(,RCORE)                           1375
*   IF OPWDOPEN=ON×OPWIOPEN=ON THEN /* IF OPEN INDR SET ON           */
         TM    OPWDOPEN(@11),B'10001000'                           1376
         BZ    @RF01376                                            1376
*     CALL PUTOPENI;                /* THEN RESET OPEN INDR          */
         BAL   @14,PUTOPENI                                        1377
*   OPWCURPT=ADDR(OPWPTAIX);        /* PT TO PATH AIX ENTRY          */
@RF01376 LA    @11,OPWPTAIX(,RCORE)                                1378
         ST    @11,OPWCURPT(,RCORE)                                1378
*   MWAXAMBL=OPWPAMBL;              /* PT TO PATH AMBL ADDR          */
         L     MWAXAMBL,OPWPAMBL(,RCORE)                           1379
*   IF(OPWDOPEN=ON×OPWIOPEN=ON)&    /* IF OPEN INDR SET ON AND       */
*       OPWPUPGR=OFF THEN           /* PATH NOT IN UPGRADE           */
         TM    OPWDOPEN(@11),B'10001000'                           1380
         BZ    @RF01380                                            1380
         TM    OPWPUPGR(RCORE),B'01000000'                         1380
         BNZ   @RF01380                                            1380
*     CALL PUTOPENI;                /* THEN RESET OPEN INDR          */
         BAL   @14,PUTOPENI                                        1381
*   IF OPWUPT^=0 THEN               /* IF UPGRADE SET OPENED         */
@RF01380 L     @11,OPWUPT(,RCORE)                                  1382
         LTR   @11,@11                                             1382
         BZ    @RF01382                                            1382
*     DO MWAI=1 TO OPWNOUPG;        /* RESET OPEN INDICATORS IN    1383
*                                      UPGRADE SET                   */
         LA    @11,1                                               1383
         B     @DE01383                                            1383
@DL01383 DS    0H                                                  1384
*       IF UPTRPL(MWAI)^=0&         /* CHK FOR VALID ENTRY   @Z30SSDP*/
*           UPTRPL(MWAI)->RPLDACB->ACBAMBL^=0 THEN/* IF YES  @Z30SSRL*/
         SLR   @05,@05                                             1384
         LR    @15,@11                                             1384
         MH    @15,@CH00033                                        1384
         L     @01,OPWUPT(,RCORE)                                  1384
         L     @15,UPTRPL-12(@15,@01)                              1384
         CR    @15,@05                                             1384
         BE    @RF01384                                            1384
         L     @01,RPLDACB(,@15)                                   1384
         L     @15,ACBAMBL(,@01)                                   1384
         CR    @15,@05                                             1384
         BE    @RF01384                                            1384
*         DO;                                                      1385
*           OPWCURPT=ADDR(OPWUPAIX(MWAI));/* PT TO UPGRADE ENTRY     */
         SLA   @11,3                                               1386
         LA    @11,OPWUPAIX-8(@11,RCORE)                           1386
         ST    @11,OPWCURPT(,RCORE)                                1386
*           MWAXAMBL=UPTRPL(MWAI)->RPLDACB->ACBAMBL;/* PT TO UPGR  1387
*                                      AMBL                          */
         LR    MWAXAMBL,@15                                        1387
*           IF OPWDOPEN=ON×OPWIOPEN=ON THEN/* IF OPEN INDR SET ON    */
         TM    OPWDOPEN(@11),B'10001000'                           1388
         BZ    @RF01388                                            1388
*             CALL PUTOPENI;        /* THEN RESET OPEN INDICATOR     */
         BAL   @14,PUTOPENI                                        1389
*         END;                      /*                       @Z30SSDP*/
@RF01388 DS    0H                                                  1391
*     END;                                                         1391
@RF01384 LA    @11,1                                               1391
         AL    @11,MWAI                                            1391
@DE01383 ST    @11,MWAI                                            1391
         SLR   @05,@05                                             1391
         IC    @05,OPWNOUPG(,RCORE)                                1391
         CR    @11,@05                                             1391
         BNH   @DL01383                                            1391
*   IF OPWBAMBL^=0&                 /* IF BASE AMBL EXISTS           */
*       OPWFLGS1=0&                 /* AND NOT SYSTEM DATA SET       */
*       OPWDUMMY=OFF THEN           /* AND NOT A DUMMY DATA SET      */
@RF01382 L     @11,OPWBAMBL(,RCORE)                                1392
         LTR   @11,@11                                             1392
         BZ    @RF01392                                            1392
         CLI   OPWFLGS1(RCORE),0                                   1392
         BNE   @RF01392                                            1392
         TM    OPWDUMMY(RCORE),B'00010000'                         1392
         BNZ   @RF01392                                            1392
*     CALL DCHNBASE;                /* DECHAIN BASE AMBL             */
         BAL   @14,DCHNBASE                                        1393
*   IF OPWPAMBL^=0 THEN             /* IF PATH AMBL EXISTS           */
@RF01392 L     @11,OPWPAMBL(,RCORE)                                1394
         LTR   @11,@11                                             1394
         BZ    @RF01394                                            1394
*     CALL DCHNPATH;                /* THEN DECHAIN PATH AMBL        */
         BAL   @14,DCHNPATH                                        1395
*   IF OPWUPGOP=ON THEN             /* IF UPGRADE SET OPENED         */
@RF01394 TM    OPWUPGOP(RCORE),B'00100000'                         1396
         BNO   @RF01396                                            1396
*     DO MWAI=1 TO OPWNOUPG;        /* REMOVE VAT ENTRIES FOR UPGRADE
*                                      AMBL'S                        */
         LA    @11,1                                               1397
         B     @DE01397                                            1397
@DL01397 DS    0H                                                  1398
*       IF UPTRPL(MWAI)^=0&UPTRPL(MWAI)->RPLDACB->ACBAMBL^=0 THEN/*
*                                      IF VALID ENTRY                */
         SLR   @05,@05                                             1398
         MH    @11,@CH00033                                        1398
         L     @01,OPWUPT(,RCORE)                                  1398
         L     @11,UPTRPL-12(@11,@01)                              1398
         CR    @11,@05                                             1398
         BE    @RF01398                                            1398
         L     @11,RPLDACB(,@11)                                   1398
         L     @11,ACBAMBL(,@11)                                   1398
         CR    @11,@05                                             1398
         BE    @RF01398                                            1398
*         DO;                       /* THEN DELETE VAT ENTRY         */
*           MWAXAMBL=UPTRPL(MWAI)->RPLDACB->ACBAMBL;/* LD PTR TO AMBL*/
         LR    MWAXAMBL,@11                                        1400
*           CALL VATDELET;          /* DELETE VAT ENTRY FOR AMBL     */
         BAL   @14,VATDELET                                        1401
*         END;                                                     1402
*     END;                                                         1403
@RF01398 LA    @11,1                                               1403
         AL    @11,MWAI                                            1403
@DE01397 ST    @11,MWAI                                            1403
         SLR   @05,@05                                             1403
         IC    @05,OPWNOUPG(,RCORE)                                1403
         CR    @11,@05                                             1403
         BNH   @DL01397                                            1403
*   IF OPWDAVAT=ON THEN             /* IF DUMMY AMBL FOR VAT ADDED TO
*                                      BASE                          */
@RF01396 TM    OPWDAVAT(RCORE),B'10000000'                         1404
         BNO   @RF01404                                            1404
*     DO;                           /* THEN DELETE VAT ENTRY FOR   1405
*                                      DUMMY AMBL                    */
*       MWAXAMBL=BIBDACB->ACBAMBL;  /* LD PTR TO DUMMY AMBL          */
         L     @11,OPWBIB(,RCORE)                                  1406
         L     @11,BIBDACB(,@11)                                   1406
         L     MWAXAMBL,ACBAMBL(,@11)                              1406
*       CALL VATDELET;              /* DELETE VAT ENTRY              */
         BAL   @14,VATDELET                                        1407
*     END;                                                         1408
*   IF OPWDSL^=0 THEN               /* IF DEB SAVE LIST EXISTS       */
@RF01404 L     @11,OPWDSL(,RCORE)                                  1409
         LTR   @11,@11                                             1409
         BZ    @RF01409                                            1409
*     CALL DEBDELET;                /* THEN DELETE DEBS              */
         BAL   @14,DEBDELET                                        1410
*   IF MWAVSRT=ON THEN              /* IF VSRT INCREMENTED           */
@RF01409 TM    MWAVSRT,B'01000000'                                 1411
         BNO   @RF01411                                            1411
*     CALL VSRTDECR;                /* DECREMENT VSRT USE COUNT      */
         BAL   @14,VSRTDECR                                        1412
*   IF OPWESL^=0 THEN               /* IF ENQ SAVE LIST EXISTS       */
@RF01411 L     @11,OPWESL(,RCORE)                                  1413
         LTR   @11,@11                                             1413
         BZ    @RF01413                                            1413
*     CALL ENQDELET;                /* THEN DEQ ALL ENQ'S ISSUED FOR
*                                      THIS ACB                      */
         BAL   @14,ENQDELET                                        1414
*   IF OPWBIB^=0 THEN               /* IF BIB EXISTS                 */
@RF01413 L     @11,OPWBIB(,RCORE)                                  1415
         LTR   @11,@11                                             1415
         BZ    @RF01415                                            1415
*     CALL VMTDELET;                /* DELETE VMT ENTRIES FOR THIS 1416
*                                      ACB                           */
         BAL   @14,VMTDELET                                        1416
*   IF OPWPSL^=0 THEN               /* IF PAGE FIX SAVE LIST EXISTS  */
@RF01415 L     @11,OPWPSL(,RCORE)                                  1417
         LTR   @11,@11                                             1417
         BZ    @RF01417                                            1417
*     CALL PAGEFREE;                /* THEN PAGE FREE FIXED PAGES    */
         BAL   @14,PAGEFREE                                        1418
*   OPWVSMPL=OPWVSMPL&&OPWVSMPL;    /* ZERO VSM PARM LIST            */
@RF01417 XC    OPWVSMPL(16,RCORE),OPWVSMPL(RCORE)                  1419
*   OPWVMTYP=ERRCLNUP;              /* IND ERROR CLEANUP OF STORAGE
*                                      BLOCKS                        */
         MVI   OPWVMTYP(RCORE),X'84'                               1420
*   IF OPWBCON=0&                   /* IF PRIMARY OPEN OF SPHERE     */
*       OPWBIB^=0 THEN              /* AND BIB EXISTS                */
         SLR   @11,@11                                             1421
         C     @11,OPWBCON(,RCORE)                                 1421
         BNE   @RF01421                                            1421
         L     @05,OPWBIB(,RCORE)                                  1421
         CR    @05,@11                                             1421
         BE    @RF01421                                            1421
*     DO;                           /* THEN FREE PROT SPHERE BLOCKS  */
*       OPWVMANC=BIBPRSPH;          /* IND FREE PROTECTED SPHERE   1423
*                                      BLOCKS                        */
         L     @11,BIBPRSPH(,@05)                                  1423
         ST    @11,OPWVMANC(,RCORE)                                1423
*       CALL IDA0192M;              /* CLEAN UP STORAGE BLOCKS       */
         L     @15,@CV05673                                        1424
         BALR  @14,@15                                             1424
*       RSTATRTN=IDAR192A;          /* INDIC 192A CONTROL    @Y30DSDP*/
         L     @11,OPWCOMWA(,RCORE)                                1425
         MVC   RSTATRTN(4,@11),@CC05315                            1425
*     END;                                                         1426
*   RFY                                                            1427
*     RET RSTD;                                                    1427
@RF01421 DS    0H                                                  1428
*   RET=MWASAVEA;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEA                                        1428
*   RFY                                                            1429
*     RET UNRSTD;                                                  1429
*   END CLNUP;                                                     1430
@EL00019 DS    0H                                                  1430
@EF00019 DS    0H                                                  1430
@ER00019 BR    @14                                                 1430
*DCHNPATH:                                                         1431
*                                                                  1431
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY CLNUP TO DECHAIN AMBL.  CALL VATDELET TO   */
*/*             DELETE VAT ENTRY FOR AMBL.                           */
*/*                                                                  */
*/*   INPUTS: 1. PTR TO PATH AMBL IN OPWPAMBL.                       */
*/*           2. IF CONNECTING, PTR TO PATH AMBL CONNECTING TO IN    */
*/*              OPWPCON.                                            */
*/*                                                                  */
*/*   OUTPUTS:  1. PATH AMBL DECHAINED AND VAT ENTRY DELETED.        */
*/*                                                                  */
*/********************************************************************/
*                                                                  1431
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1431
DCHNPATH DS    0H                                                  1432
*   RFY                                                            1432
*     RET RSTD;                                                    1432
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1433
*   RFY                                                            1434
*     RET UNRSTD;                                                  1434
*   MWAXAMBL=OPWPAMBL;              /* PT TO PATH AMBL               */
         L     MWAXAMBL,OPWPAMBL(,RCORE)                           1435
*   IF AMBLPRIM=OFF THEN            /* IF AMBL IS SECONDARY          */
         TM    AMBLPRIM(MWAXAMBL),B'10000000'                      1436
         BNZ   @RF01436                                            1436
*     OPWPCON->AMBLSCHN=AMBLSCHN;   /* THEN DECHAIN IT               */
         L     @11,OPWPCON(,RCORE)                                 1437
         L     @07,AMBLSCHN(,MWAXAMBL)                             1437
         ST    @07,AMBLSCHN(,@11)                                  1437
*   CALL VATDELET;                  /* DELETE AMBL FROM VAT          */
@RF01436 BAL   @14,VATDELET                                        1438
*   RFY                                                            1439
*     RET RSTD;                                                    1439
*   RET=MWASAVEB;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEB                                        1440
*   RFY                                                            1441
*     RET UNRSTD;                                                  1441
*   END DCHNPATH;                                                  1442
@EL00020 DS    0H                                                  1442
@EF00020 DS    0H                                                  1442
@ER00020 BR    @14                                                 1442
*PAGEFREE:                                                         1443
*                                                                  1443
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY CLNUP TO FREE PAGES THAT WERE FIXED        */
*/*             DURING THIS OPEN.  SCAN PSL CHAIN AND FREE FIXED     */
*/*             PAGES REFLECTED IN PSL ENTRIES.                      */
*/*                                                                  */
*/*   INPUTS: 1. PTR TO FIRST PSL IN OPWPSL.                         */
*/*                                                                  */
*/*   OUTPUTS:  1. ALL PAGES FIXED DURING THIS OPEN ARE FREED.       */
*/*                                                                  */
*/********************************************************************/
*                                                                  1443
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1443
PAGEFREE DS    0H                                                  1444
*   RFY                                                            1444
*     RET RSTD;                                                    1444
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1445
*   RFY                                                            1446
*     RET UNRSTD;                                                  1446
*   RFY                                                            1447
*     R6 RSTD;                                                     1447
*   RFY                                                            1448
*     IDAPSL BASED(MWAPTRA);                                       1448
*   MWAPTRA=OPWPSL;                 /* PT TO FIRST PSL               */
         L     @11,OPWPSL(,RCORE)                                  1449
         ST    @11,MWAPTRA                                         1449
*   DO UNTIL(MWAPTRA=0);            /* SCAN PSL CHAIN                */
@DL01450 DS    0H                                                  1451
*     R6=ADDR(PSLENTRY(1));         /* PT TO PAGE FREE LIST          */
         L     R6,MWAPTRA                                          1451
         LA    R6,PSLENTRY(,R6)                                    1451
*     GEN(PGFREE L,LA=(R6))                                        1452
*     REFS(R6);                     /* PAGE FREE FIXED PAGES         */
         PGFREE L,LA=(R6)
*     MWAPTRA=PSLNXPTR;             /* PT TO NEXT PSL                */
         L     @11,MWAPTRA                                         1453
         L     @11,PSLNXPTR(,@11)                                  1453
         ST    @11,MWAPTRA                                         1453
*   END;                                                           1454
@DE01450 L     @11,MWAPTRA                                         1454
         LTR   @11,@11                                             1454
         BNZ   @DL01450                                            1454
*   RFY                                                            1455
*     R6 UNRSTD;                                                   1455
*   RFY                                                            1456
*     IDAPSL BASED(OPWPSL);                                        1456
*   RFY                                                            1457
*     RET RSTD;                                                    1457
*   RET=MWASAVEB;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEB                                        1458
*   RFY                                                            1459
*     RET UNRSTD;                                                  1459
*   END PAGEFREE;                                                  1460
@EL00021 DS    0H                                                  1460
@EF00021 DS    0H                                                  1460
@ER00021 BR    @14                                                 1460
*DCHNBASE:                                                         1461
*                                                                  1461
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY CLNUP TO DECHAIN BASE AMBL ADDED TO AMBL   */
*/*             CHAIN FOR THIS OPEN.  CALLS VATDELET TO DELETE       */
*/*             ENTRY IN VAT FOR DECHAINED AMBL.                     */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO BASE AMBL IN OPWBAMBL.                     */
*/*             2. IF CONNECTING, PTR TO BASE AMBL CONNECTING TO     */
*/*                IN OPWBCON.                                       */
*/*                                                                  */
*/*   OUTPUTS:  1. BASE AMBL REMOVED FROM CHAIN AND VAT ENTRY        */
*/*                DELETED.                                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  1461
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1461
DCHNBASE DS    0H                                                  1462
*   RFY                                                            1462
*     RET RSTD;                                                    1462
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1463
*   RFY                                                            1464
*     RET UNRSTD;                                                  1464
*   MWAXAMBL=OPWBAMBL;              /* INIT PT TO BASE AMBL          */
         L     MWAXAMBL,OPWBAMBL(,RCORE)                           1465
*   IF AMBLPRIM=OFF THEN            /* IF AMBL IS SECONDARY          */
         TM    AMBLPRIM(MWAXAMBL),B'10000000'                      1466
         BNZ   @RF01466                                            1466
*     DO;                           /* THEN DECHAIN AMBL FROM      1467
*                                      SECONDARY CHAIN               */
*       OPWBCON->AMBLSCHN=AMBLSCHN; /* DECHAIN SECONDARY AMBL        */
         L     @11,OPWBCON(,RCORE)                                 1468
         L     @07,AMBLSCHN(,MWAXAMBL)                             1468
         ST    @07,AMBLSCHN(,@11)                                  1468
*     END;                                                         1469
*   ELSE                            /* PRIMARY AMBL                  */
*     DO;                           /* DECHAIN PRIMARY AMBL          */
         B     @RC01466                                            1470
@RF01466 DS    0H                                                  1471
*       MWARNAME=AMBLCHN;           /* SET RNAME FOR ENQ             */
         MVC   MWARNAME(9),@CC05488                                1471
*       MWAEQTCB=OPWJSTCB;          /* INIT PTR TO JOB STEP TCB      */
         L     @11,OPWJSTCB(,RCORE)                                1472
         ST    @11,MWAEQTCB                                        1472
*       MWAEQEND=ON;                /* INDICATE LAST ENTRY           */
         OI    MWAEQEND,B'10000000'                                1473
*       MWAEQRNM=LENGTH(MWARNAME);  /* INIT LENGTH OF RNAME          */
         MVI   MWAEQRNM,X'09'                                      1474
*       MWAEQQAD=ADDR(QNAME);       /* INIT ADDRESS OF QNAME         */
         LA    @11,@CC05493                                        1475
         ST    @11,MWAEQQAD                                        1475
*       MWAEQRAD=ADDR(MWARNAME);    /* INIT ADDR OF RNAME            */
         LA    @11,MWARNAME                                        1476
         ST    @11,MWAEQRAD                                        1476
*       GEN(ENQ (,,E,,STEP),MF=(E,MWAEQENT))                       1477
*       REFS(MWAEQENT);             /* ISSUE ENQ FOR PRIMARY AMBL  1477
*                                      CHAIN                         */
         ENQ (,,E,,STEP),MF=(E,MWAEQENT)
*       MWAXAMBL=VATPAMBL;          /* PT TO FIRST PRIMARY AMBL      */
         L     @11,MWATCB                                          1478
         L     @11,TCBJSCB(,@11)                                   1478
         L     @11,JSCBSHR(,@11)                                   1478
         L     MWAXAMBL,VATPAMBL(,@11)                             1478
*       IF MWAXAMBL=OPWBAMBL THEN   /* IF AMBL IS FIRST ON CHAIN     */
         C     MWAXAMBL,OPWBAMBL(,RCORE)                           1479
         BNE   @RF01479                                            1479
*         VATPAMBL=AMBLPCHN;        /* THEN DECHAIN BASE AMBL        */
         L     @07,AMBLPCHN(,MWAXAMBL)                             1480
         ST    @07,VATPAMBL(,@11)                                  1480
*       ELSE                        /* AMBL IS NOT FIRST ON CHAIN    */
*         DO;                       /* SEARCH PRIMARY AMBL CHAIN FOR
*                                      PREVIOUS AMBL                 */
         B     @RC01479                                            1481
@RF01479 DS    0H                                                  1482
*           DO WHILE(AMBLPCHN^=0&AMBLPCHN^=OPWBAMBL);/* SEARCH     1482
*                                      PRIMARY AMBL CHAIN    @ZA24721*/
         B     @DE01482                                            1482
@DL01482 DS    0H                                                  1483
*             MWAXAMBL=AMBLPCHN;    /* PT TO NEXT PRIMARY AMBL       */
         L     MWAXAMBL,AMBLPCHN(,MWAXAMBL)                        1483
*           END;                                                   1484
@DE01482 L     @11,AMBLPCHN(,MWAXAMBL)                             1484
         LTR   @11,@11                                             1484
         BZ    @DC01482                                            1484
         C     @11,OPWBAMBL(,RCORE)                                1484
         BNE   @DL01482                                            1484
@DC01482 DS    0H                                                  1485
*           IF AMBLPCHN^=0 THEN     /* IF PREVIOUS AMBL FOUND        */
         L     @11,AMBLPCHN(,MWAXAMBL)                             1485
         LTR   @11,@11                                             1485
         BZ    @RF01485                                            1485
*             AMBLPCHN=AMBLPCHN->AMBLPCHN;/* THEN DECHAIN PRIMARY  1486
*                                      AMBL                          */
         L     @11,AMBLPCHN(,@11)                                  1486
         ST    @11,AMBLPCHN(,MWAXAMBL)                             1486
*         END;                                                     1487
@RF01485 DS    0H                                                  1488
*       MWAEQOP2=MWAEQOP2&&MWAEQOP2;/* ZERO OPTION BYTE              */
@RC01479 XC    MWAEQOP2(1),MWAEQOP2                                1488
*       GEN(DEQ (,,,STEP),MF=(E,MWAEQENT));/* ISSUE DEQ FOR PRIMARY
*                                      AMBL CHAIN                    */
         DEQ (,,,STEP),MF=(E,MWAEQENT)
*     END;                                                         1490
*   MWAXAMBL=OPWBAMBL;              /* PT TO BASE AMBL               */
@RC01466 L     MWAXAMBL,OPWBAMBL(,RCORE)                           1491
*   CALL VATDELET;                  /* DELETE ENTRY FOR AMBL         */
         BAL   @14,VATDELET                                        1492
*   RFY                                                            1493
*     RET RSTD;                                                    1493
*   RET=MWASAVEB;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEB                                        1494
*   RFY                                                            1495
*     RET UNRSTD;                                                  1495
*   END DCHNBASE;                                                  1496
@EL00022 DS    0H                                                  1496
@EF00022 DS    0H                                                  1496
@ER00022 BR    @14                                                 1496
*VSRTDECR:                                                         1497
*                                                                  1497
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY CLNUP TO DECREMENT VSRT USE COUNT IN VAT.  */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO VAT IN JSCBSHR.                            */
*/*                                                                  */
*/*   OUTPUTS:  1. VSRT USE COUNT DECREMENTED.                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  1497
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1497
VSRTDECR DS    0H                                                  1498
*   RFY                                                            1498
*    (R6,                                                          1498
*     R7,                                                          1498
*     R8,                                                          1498
*     R9,                                                          1498
*     RET) RSTD;                    /*                       @Y30DSDP*/
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1499
*   IF ACBGSR=ON THEN               /* CHK FOR GSR           @Y30DSDP*/
         TM    ACBGSR(RACB),B'00100000'                            1500
         BNO   @RF01500                                            1500
*     RET=ADDR(CBSVSRT((DXUKEY/K16)+ONE));/* AMCBS IS BASE   @Z40ESSR*/
         L     @11,OPWCOMWA(,RCORE)                                1501
         SLR   @05,@05                                             1501
         IC    @05,DXUKEY(,@11)                                    1501
         SRL   @05,4                                               1501
         SLA   @05,3                                               1501
         L     @11,FLCCVT                                          1501
         L     RET,CVTCBSP(,@11)                                   1501
         LA    RET,CBSVSRT(@05,RET)                                1501
*   ELSE                            /* NO, ASSUME LSR        @Y30DSDP*/
*     RET=ADDR(VATVSRT);            /* VAT IS BASE           @Y30DSDP*/
         B     @RC01500                                            1502
@RF01500 L     @11,MWATCB                                          1502
         L     @11,TCBJSCB(,@11)                                   1502
         L     RET,JSCBSHR(,@11)                                   1502
         LA    RET,VATVSRT(,RET)                                   1502
*   RFY                                                            1503
*     MWACSVRP BASED(RET);          /*                       @Y30DSDP*/
@RC01500 DS    0H                                                  1504
*   LM(R6,R7,MWACSVRP);             /* LD VSRT PTR/USE CNT   @Y30DSDP*/
         LM    R6,R7,MWACSVRP(RET)                                 1504
*   DO UNTIL(MWAVSRT=OFF×R7=0);     /*                       @Z30SSDT*/
@DL01505 DS    0H                                                  1506
*     R8=R6-1;                      /* INIT NEW USE COUNT            */
         LR    R8,R6                                               1506
         BCTR  R8,0                                                1506
*     R9=R7;                        /* INIT REPLACEMENT COUNT        */
         LR    R9,R7                                               1507
*     CDS(R6,R8,MWACSVRP);          /* DECR VSRT USE COUNT   @Y30DSDP*/
         CDS   R6,R8,MWACSVRP(RET)                                 1508
*     BC(4,CSDL2);                  /* TEST IF UNSUCCESSFUL  @Z30SSDT*/
         BC    4,CSDL2                                             1509
*     MWAVSRT=OFF;                  /* ITS OK, SET SWITCH OFF      1510
*                                                            @Z30SSDT*/
         NI    MWAVSRT,B'10111111'                                 1510
*CSDL2:                                                            1511
*     ;                             /* BYPASS SETTING SWITCH @Z30SSDT*/
CSDL2    DS    0H                                                  1512
*   END;                            /*                       @Y30DSDP*/
@DE01505 TM    MWAVSRT,B'01000000'                                 1512
         BZ    @DC01505                                            1512
         LTR   R7,R7                                               1512
         BNZ   @DL01505                                            1512
@DC01505 DS    0H                                                  1513
*   IF ACBGSR=ON THEN               /* CHK FOR GSR           @Z30SSDP*/
         TM    ACBGSR(RACB),B'00100000'                            1513
         BNO   @RF01513                                            1513
*     VGTTVUSE=VGTTVUSE-ONE;        /* DECR USE COUNT IN VGTT      1514
*                                                            @Z30SSDP*/
         L     @15,OPWBIB(,RCORE)                                  1514
         L     @15,BIBVGTT(,@15)                                   1514
         L     @11,VGTTVUSE(,@15)                                  1514
         BCTR  @11,0                                               1514
         ST    @11,VGTTVUSE(,@15)                                  1514
*   RET=MWASAVEB;                   /* RESTORE RETURN ADDRESS        */
@RF01513 L     RET,MWASAVEB                                        1515
*   RFY                                                            1516
*    (R6,                                                          1516
*     R7,                                                          1516
*     R8,                                                          1516
*     R9,                                                          1516
*     RET) UNRSTD;                  /*                       @Y30DSDP*/
*   END VSRTDECR;                                                  1517
@EL00023 DS    0H                                                  1517
@EF00023 DS    0H                                                  1517
@ER00023 BR    @14                                                 1517
*DEBDELET:                                                         1518
*                                                                  1518
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY CLNUP TO DELETE DEB'S FROM DEB CHAIN.      */
*/*             SCANS DSL CHAIN AND CALLS DEHOOK TO REMOVE DEB'S     */
*/*             REFLECTED IN DSL ENTRIES FROM DEB CHAIN.             */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO FIRST DSL IN OPWDSL.                       */
*/*                                                                  */
*/*   OUTPUTS:  1. DEB'S ADDED THIS OPEN ARE DECHAINED.              */
*/*                                                                  */
*/********************************************************************/
*                                                                  1518
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1518
DEBDELET DS    0H                                                  1519
*   RFY                                                            1519
*     IDADSL BASED(MWAPTRA);                                       1519
*   RFY                                                            1520
*     RET RSTD;                                                    1520
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1521
*   RFY                                                            1522
*     RET UNRSTD;                                                  1522
*   MWAPTRA=OPWDSL;                 /* PT TO FIRST DSL               */
         L     @11,OPWDSL(,RCORE)                                  1523
         ST    @11,MWAPTRA                                         1523
*   DO UNTIL(MWAPTRA=0);            /* SCAN DSL CHAIN                */
@DL01524 DS    0H                                                  1525
*     DO MWAI=1 TO DSLACTEN;        /* SCAN ENTRIES IN DSL           */
         LA    @11,1                                               1525
         B     @DE01525                                            1525
@DL01525 DS    0H                                                  1526
*       IF DSLDEBAD(MWAI)^=0 THEN   /* IF ENTRY ACTIVE               */
         L     @05,MWAPTRA                                         1526
         SLA   @11,2                                               1526
         L     @15,DSLDEBAD-5(@11,@05)                             1526
         LA    @15,0(,@15)                                         1526
         LTR   @15,@15                                             1526
         BZ    @RF01526                                            1526
*         DO;                       /* THEN DELETE DEB               */
*           MWADEB=DSLDEBAD(MWAI);  /* INIT DEB PTR                  */
         LR    MWADEB,@15                                          1528
*           DSLENTRY(MWAI)=0;       /* ZERO ENTRY IN DSL             */
         L     @15,MWAPTRA                                         1529
         SLR   @14,@14                                             1529
         ST    @14,DSLENTRY-4(@11,@15)                             1529
*           CALL DEHOOK;            /* DECHAIN DEB AND DELETE FROM 1530
*                                      DEB TABLE                     */
         BAL   @14,DEHOOK                                          1530
*         END;                                                     1531
*     END;                                                         1532
@RF01526 LA    @11,1                                               1532
         AL    @11,MWAI                                            1532
@DE01525 ST    @11,MWAI                                            1532
         L     @05,MWAPTRA                                         1532
         CH    @11,DSLACTEN(,@05)                                  1532
         BNH   @DL01525                                            1532
*     MWAPTRA=DSLNXPTR;             /* PT TO NEXT DSL                */
         L     @11,MWAPTRA                                         1533
         L     @11,DSLNXPTR(,@11)                                  1533
         ST    @11,MWAPTRA                                         1533
*   END;                                                           1534
@DE01524 L     @11,MWAPTRA                                         1534
         LTR   @11,@11                                             1534
         BNZ   @DL01524                                            1534
*   RFY                                                            1535
*     RET RSTD;                                                    1535
*   RET=MWASAVEB;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEB                                        1536
*   RFY                                                            1537
*     RET UNRSTD;                                                  1537
*   RFY                                                            1538
*     IDADSL BASED(OPWDSL);                                        1538
*   END DEBDELET;                                                  1539
@EL00024 DS    0H                                                  1539
@EF00024 DS    0H                                                  1539
@ER00024 BR    @14                                                 1539
*VATDELET:                                                         1540
*                                                                  1540
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: DELETE VAT ENTRY FOR AMBL.  SEARCH VAT CHAIN TO      */
*/*             FIND VAT THAT CONTAINS ENTRY FOR AMBL.  IF ENTRY     */
*/*             IS FOUND, ZERO IT AND DECREMENT NUMBER OF ACTIVE     */
*/*             ENTRIES COUNT IN VAT.                                */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO AMBL IN MWAXAMBL.                          */
*/*             2. PTR TO FIRST VAT IN JSCBSHR.                      */
*/*                                                                  */
*/*   OUTPUTS:  1. VAT ENTRY DELETED FOR AMBL.                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  1540
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1540
VATDELET DS    0H                                                  1541
*   RFY                                                            1541
*     RET RSTD;                                                    1541
*   MWASAVEC=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEC                                        1542
*   RFY                                                            1543
*     RET UNRSTD;                                                  1543
*   RFY                                                            1544
*     IDAVAT BASED(MWAPTRA);                                       1544
*   MWAPTRA=JSCBSHR;                /* PT TO FIRST VAT               */
         L     @11,MWATCB                                          1545
         L     @11,TCBJSCB(,@11)                                   1545
         L     @11,JSCBSHR(,@11)                                   1545
         ST    @11,MWAPTRA                                         1545
*   DO WHILE(AMBLVRT^=VATVRT&MWAPTRA^=0);/* FIND CORRECT VAT         */
         B     @DE01546                                            1546
@DL01546 DS    0H                                                  1547
*     MWAPTRA=VATNEXT;                                             1547
         L     @11,MWAPTRA                                         1547
         L     @11,VATNEXT(,@11)                                   1547
         ST    @11,MWAPTRA                                         1547
*   END;                                                           1548
@DE01546 L     @11,MWAPTRA                                         1548
         CLC   AMBLVRT(1,MWAXAMBL),VATVRT(@11)                     1548
         BE    @DC01546                                            1548
         LTR   @11,@11                                             1548
         BNZ   @DL01546                                            1548
@DC01546 DS    0H                                                  1549
*   IF AMBLVRT=VATVRT THEN          /* IF CORRECT VAT FOUND          */
         L     @11,MWAPTRA                                         1549
         CLC   AMBLVRT(1,MWAXAMBL),VATVRT(@11)                     1549
         BNE   @RF01549                                            1549
*     DO;                           /* THEN FIND ENTRY FOR AMBL      */
*       IF VATAMBL(AMBLENO)=MWAXAMBL THEN/* IF CORRECT ENTRY FOUND   */
         SLR   @07,@07                                             1551
         IC    @07,AMBLENO(,MWAXAMBL)                              1551
         SLA   @07,2                                               1551
         C     MWAXAMBL,VATAMBL-4(@07,@11)                         1551
         BNE   @RF01551                                            1551
*         DO;                       /* THEN UPDATE VAT               */
*           VATAMBL(AMBLENO)=0;     /* ZERO ENTRY FOR AMBL           */
         SLR   @05,@05                                             1553
         ST    @05,VATAMBL-4(@07,@11)                              1553
*           RFY                                                    1554
*            (R6,                                                  1554
*             R7) RSTD;                                            1554
*           R6=VATNAE;              /* LD NUMBER OF ACTIVE ENTRIES   */
         L     R6,VATNAE(,@11)                                     1555
*           DO UNTIL(R7=R6-1);      /* DECR NO. OF ACTIVE ENTRIES    */
@DL01556 DS    0H                                                  1557
*             R7=R6-1;              /* INIT SWAP FIELD               */
         LR    R7,R6                                               1557
         BCTR  R7,0                                                1557
*             CS(R6,R7,VATNAE);     /* SWAP VATNAE FIELD             */
         L     @11,MWAPTRA                                         1558
         CS    R6,@07,VATNAE(@11)                                  1558
*           END;                                                   1559
@DE01556 LR    @11,R6                                              1559
         BCTR  @11,0                                               1559
         CR    R7,@11                                              1559
         BNE   @DL01556                                            1559
*           RFY                                                    1560
*            (R6,                                                  1560
*             R7) UNRSTD;                                          1560
*         END;                                                     1561
*     END;                                                         1562
@RF01551 DS    0H                                                  1563
*   RFY                                                            1563
*     RET RSTD;                                                    1563
@RF01549 DS    0H                                                  1564
*   RET=MWASAVEC;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEC                                        1564
*   RFY                                                            1565
*     RET UNRSTD;                                                  1565
*   RFY                                                            1566
*     IDAVAT BASED(JSCBSHR);                                       1566
*   END VATDELET;                                                  1567
@EL00025 DS    0H                                                  1567
@EF00025 DS    0H                                                  1567
@ER00025 BR    @14                                                 1567
*ENQDELET:                                                         1568
*                                                                  1568
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY CLNUP TO DEQ ENQ'S ISSUED FOR THIS OPEN.   */
*/*             SCANS ESL CHAIN AND ISSUES A DEQ FOR EACH ENQ        */
*/*             REFLECTED IN A ESL ENTRY.                            */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO FIRST ESL IN OPWESL.                       */
*/*                                                                  */
*/*   OUTPUTS:  1. ALL ENQ'S ARE DEQUED.                             */
*/*                                                                  */
*/********************************************************************/
*                                                                  1568
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1568
ENQDELET DS    0H                                                  1569
*   RFY                                                            1569
*     RET RSTD;                                                    1569
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1570
*   RFY                                                            1571
*     RET UNRSTD;                                                  1571
*   RFY                                                            1572
*     IDAESL BASED(MWAPTRA);                                       1572
*   MWAPTRA=OPWESL;                 /* PT TO FIRST ESL               */
         L     @11,OPWESL(,RCORE)                                  1573
         ST    @11,MWAPTRA                                         1573
*   DO UNTIL(MWAPTRA=0);            /* SCAN ESL CHAIN                */
@DL01574 DS    0H                                                  1575
*     DO MWAI=1 TO ESLACTEN;        /* SCAN ENTRIES IN ESL           */
         LA    @11,1                                               1575
         B     @DE01575                                            1575
@DL01575 DS    0H                                                  1576
*       MWAEQPRM=MWAEQPRM&&MWAEQPRM;/* ZERO ENQ PARM LIST            */
         XC    MWAEQPRM(20),MWAEQPRM                               1576
*       MWAEQTCB=OPWJSTCB;          /* SET PTR TO JOB STEP TCB       */
         L     @05,OPWJSTCB(,RCORE)                                1577
         ST    @05,MWAEQTCB                                        1577
*       MWAEQRNM=LENGTH(ENQRNAME);  /* INIT LENGTH OF RNAME          */
         MVI   MWAEQRNM,X'08'                                      1578
*       MWAEQDIR=ON;                /* IND DIRECTED ENQ              */
*       MWAEQEND=ON;                /* IND LAST ENTRY                */
         OI    MWAEQDIR,B'10000001'                                1580
*       MWAEQRAD=ADDR(MWARNAME);    /* INIT PTR TO RNAME             */
         LA    @05,MWARNAME                                        1581
         ST    @05,MWAEQRAD                                        1581
*       MWAEQQAD=ADDR(QNAME);       /* INIT PTR TO QNAME             */
         LA    @05,@CC05493                                        1582
         ST    @05,MWAEQQAD                                        1582
*       MWARNAME=ESLRNAME(MWAI);    /* LD RNAME                      */
         MVI   MWARNAME+8,C' '                                     1583
         MH    @11,@CH00105                                        1583
         L     @05,MWAPTRA                                         1583
         ALR   @05,@11                                             1583
         MVC   MWARNAME(8),ESLRNAME-9(@05)                         1583
*       GEN(DEQ (,,,SYSTEM),MF=(E,MWAEQENT));/* DEQ FOR ENQ          */
         DEQ (,,,SYSTEM),MF=(E,MWAEQENT)
*     END;                                                         1585
         LA    @11,1                                               1585
         AL    @11,MWAI                                            1585
@DE01575 ST    @11,MWAI                                            1585
         L     @05,MWAPTRA                                         1585
         CH    @11,ESLACTEN(,@05)                                  1585
         BNH   @DL01575                                            1585
*     MWAPTRA=ESLNXPTR;             /* PT TO NEXT ESL                */
         L     @11,MWAPTRA                                         1586
         L     @11,ESLNXPTR(,@11)                                  1586
         ST    @11,MWAPTRA                                         1586
*   END;                                                           1587
@DE01574 L     @11,MWAPTRA                                         1587
         LTR   @11,@11                                             1587
         BNZ   @DL01574                                            1587
*   RFY                                                            1588
*    (IDAESL) BASED(OPWESL);                                       1588
*   RFY                                                            1589
*     RET RSTD;                                                    1589
*   RET=MWASAVEB;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEB                                        1590
*   RFY                                                            1591
*     RET UNRSTD;                                                  1591
*   END ENQDELET;                                                  1592
@EL00026 DS    0H                                                  1592
@EF00026 DS    0H                                                  1592
@ER00026 BR    @14                                                 1592
*VMTDELET:                                                         1593
*                                                                  1593
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY CLNUP TO DECREMENT UCB USE COUNT AND ZERO  */
*/*             ENTRY FOR EACH VMT ENTRY ADDED THIS OPEN.  IF ALL    */
*/*             THE ENTRIES IN A PARTICULAR VMT WERE ADDED DURING    */
*/*             THIS OPEN, REMOVE VMT FROM CHAIN AND FREE IT.        */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO FIRST VMT IN BIBVMT.                       */
*/*             2. PTR TO BIB IN OPWBIB.                             */
*/*                                                                  */
*/*   OUTPUTS:  1. VMT ENTRIES ADDED FOR THIS OPEN ARE CLEANED UP.   */
*/*                                                                  */
*/********************************************************************/
*                                                                  1593
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1593
VMTDELET DS    0H                                                  1594
*   RFY                                                            1594
*     RET RSTD;                                                    1594
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1595
*   RFY                                                            1596
*     RET UNRSTD;                                                  1596
*   RFY                                                            1597
*     IDAVMT BASED(MWAPTRA);                                       1597
*   RFY                                                            1598
*     UCBOB BASED(VMTUCB(MWAI));                                   1598
*   MWAPTRA=BIBVMT;                 /* PT TO FIRST VMT               */
         L     @11,OPWBIB(,RCORE)                                  1599
         L     @11,BIBVMT(,@11)                                    1599
         ST    @11,MWAPTRA                                         1599
*   DO WHILE(MWAPTRA^=0);           /* SCAN VMT'S                    */
         B     @DE01600                                            1600
@DL01600 DS    0H                                                  1601
*     MWAJ=0;                       /* ZERO VMT OPEN COUNT           */
         SLR   MWAJ,MWAJ                                           1601
*     DO MWAI=1 TO VMTNOVOL;        /* SCAN ENTRIES IN VMT           */
         LA    @05,1                                               1602
         B     @DE01602                                            1602
@DL01602 DS    0H                                                  1603
*       IF VMTOPEN(MWAI)=ON THEN    /* IF ENTRY FOR THIS OPEN        */
         L     @15,MWAPTRA                                         1603
         SLA   @05,4                                               1603
         ALR   @05,@15                                             1603
         TM    VMTOPEN-16(@05),B'10000000'                         1603
         BNO   @RF01603                                            1603
*         DO;                       /* THEN DECR UCB USE COUNT AND 1604
*                                      REMOVE VMT ENTRY FOR VOL      */
*           IF OPWSCRA=OFF&OPWUCRA=OFF THEN/* IF NOT SCRA OR UCRA    */
         TM    OPWSCRA(RCORE),B'01000000'                          1605
         BNZ   @RF01605                                            1605
         TM    OPWUCRA(RCORE),B'10000000'                          1605
         BNZ   @RF01605                                            1605
*             DO;                   /* THEN DECR UCB USE COUNT       */
*               RFY                                                1607
*                (R6,                                              1607
*                 R7,                                              1607
*                 R8,                                              1607
*                 R9) RSTD;                                        1607
*               R9=VMTUCB(MWAI);    /* LD ADDR OF UCB                */
         L     @05,MWAI                                            1608
         SLA   @05,4                                               1608
         L     R9,VMTUCB-16(@05,@15)                               1608
*               GEN SETS(R6,R7,R8,UCBDMCT);                        1609
*                                      /* DECREMENT UCB USE COUNT */
L2       L     R6,UCBDMCT-3(R9)        LOAD FWORD WITH UCB USE COUNT
         SR    R7,R7                   ZERO REGISTER 7
         IC    R7,UCBDMCT(R9)          GET UCB USE COUNT
         BCTR  R7,0                    DECREMENT USE COUNT BY ONE
         L     R8,UCBDMCT-3(R9)        GET FWORD WITH UCB USE COUNT
         SRL   R8,8                    SHIFT OUT OLD USE COUNT
         SLL   R8,8                    SHIFT BACK TO ORIGINAL POSITION
         OR    R7,R8                   LOGICALLY OR IN NEW USE COUNT
         CS    R6,R7,UCBDMCT-3(R9)     COMPARE AND SWAP
         BC    7,L2                    IF UNSUCCESSFUL TRY AGAIN
*               RFY                                                1610
*                (R6,                                              1610
*                 R7,                                              1610
*                 R8,                                              1610
*                 R9) UNRSTD;                                      1610
*             END;                                                 1611
*           VMTVOL(MWAI)=VMTVOL(MWAI)&&VMTVOL(MWAI);/* ZERO VOLUME 1612
*                                      ENTRY                         */
@RF01605 L     @05,MWAI                                            1612
         SLA   @05,4                                               1612
         L     @01,MWAPTRA                                         1612
         ALR   @01,@05                                             1612
         XC    VMTVOL-16(16,@01),VMTVOL-16(@01)                    1612
*           MWAJ=MWAJ+1;            /* INCR OPEN COUNT               */
         AL    MWAJ,@CF00054                                       1613
*         END;                                                     1614
*     END;                                                         1615
@RF01603 LA    @05,1                                               1615
         AL    @05,MWAI                                            1615
@DE01602 ST    @05,MWAI                                            1615
         L     @01,MWAPTRA                                         1615
         CH    @05,VMTNOVOL(,@01)                                  1615
         BNH   @DL01602                                            1615
*     IF MWAJ=VMTNOVOL THEN         /* IF ALL VMT ENTRIES ADDED THIS
*                                      OPEN                          */
         L     @05,MWAPTRA                                         1616
         CH    MWAJ,VMTNOVOL(,@05)                                 1616
         BNE   @RF01616                                            1616
*       DO;                         /* THEN DECHAIN AND FREE VMT     */
*         MWAGFADR=MWAPTRA;         /* PT TO VMT TO FREE             */
         ST    @05,MWAGFADR                                        1618
*         MWAGFLEN=VMTLEN;          /* INIT LENGTH OF VMT            */
         LH    @11,VMTLEN(,@05)                                    1619
         STCM  @11,7,MWAGFLEN                                      1619
*         IF BIBVMT=MWAPTRA THEN    /* IF VMT IS FIRST ON CHAIN      */
         L     @11,OPWBIB(,RCORE)                                  1620
         C     @05,BIBVMT(,@11)                                    1620
         BNE   @RF01620                                            1620
*           DO;                     /* THEN DECHAIN VMT              */
*             BIBVMT=VMTNXT;        /* DECHAIN VMT                   */
         L     @05,VMTNXT(,@05)                                    1622
         ST    @05,BIBVMT(,@11)                                    1622
*             MWAPTRA=BIBVMT;       /* PT TO NEXT VMT                */
         ST    @05,MWAPTRA                                         1623
*           END;                                                   1624
*         ELSE                      /* ELSE FIND PREVIOUS VMT        */
*           DO;                                                    1625
         B     @RC01620                                            1625
@RF01620 DS    0H                                                  1626
*             RFY                                                  1626
*               IDAVMT BASED(MWAPTRB);                             1626
*             MWAPTRB=BIBVMT;       /* PT TO FIRST VMT               */
         L     @11,OPWBIB(,RCORE)                                  1627
         L     MWAPTRB,BIBVMT(,@11)                                1627
*             DO WHILE(VMTNXT^=MWAPTRA);/* FIND PREVIOUS VMT         */
         B     @DE01628                                            1628
@DL01628 DS    0H                                                  1629
*               MWAPTRB=VMTNXT;     /* PT TO NEXT VMT                */
         L     MWAPTRB,VMTNXT(,MWAPTRB)                            1629
*             END;                                                 1630
@DE01628 L     @11,MWAPTRA                                         1630
         C     @11,VMTNXT(,MWAPTRB)                                1630
         BNE   @DL01628                                            1630
*             VMTNXT=MWAPTRA->VMTNXT;/* DECHAIN VMT                  */
         L     @11,VMTNXT(,@11)                                    1631
         ST    @11,VMTNXT(,MWAPTRB)                                1631
*             RFY                                                  1632
*               IDAVMT BASED(MWAPTRA);                             1632
*             MWAPTRA=VMTNXT;       /* PT TO NEXT VMT                */
         ST    @11,MWAPTRA                                         1633
*           END;                                                   1634
*         IF OPWFLGS1^=0 THEN       /* IF SYSTEM DATA SET            */
@RC01620 CLI   OPWFLGS1(RCORE),0                                   1635
         BE    @RF01635                                            1635
*           MWAGFSP=CATPOOL;        /* THEN SET SYSTEM SUBPOOL       */
         MVI   MWAGFSP,X'E7'                                       1636
*         ELSE                      /* NO, NOT CAT           @Z30SSDP*/
*           IF ACBGSR=ON×OPWCBIC=ON THEN/* IF GSR OR CONTROL BLKS IN
*                                      COMMON                @ZA16012*/
         B     @RC01635                                            1637
@RF01635 TM    ACBGSR(RACB),B'00100000'                            1637
         BO    @RT01637                                            1637
         TM    OPWCBIC(RCORE),B'10000000'                          1637
         BNO   @RF01637                                            1637
@RT01637 DS    0H                                                  1638
*             MWAGFSP=GSRPOOL;      /* YES, USE SP 241       @Z30SSDP*/
         MVI   MWAGFSP,X'F1'                                       1638
*           ELSE                    /* ELSE SET NORMAL SUBPOOL       */
*             MWAGFSP=VMTPOOL;      /* INIT SUBPOOL FOR VMT          */
         B     @RC01637                                            1639
@RF01637 MVI   MWAGFSP,X'FC'                                       1639
*         CALL FREECORE;            /* FREE EMPTY VMT                */
@RC01637 DS    0H                                                  1640
@RC01635 BAL   @14,FREECORE                                        1640
*       END;                                                       1641
*     ELSE                          /* ELSE ALL ENTRIES NOT ADDED  1642
*                                      THIS OPEN                     */
*       MWAPTRA=VMTNXT;             /* PT TO NEXT VMT                */
         B     @RC01616                                            1642
@RF01616 L     @11,MWAPTRA                                         1642
         L     @11,VMTNXT(,@11)                                    1642
         ST    @11,MWAPTRA                                         1642
*   END;                                                           1643
@RC01616 DS    0H                                                  1643
@DE01600 L     @11,MWAPTRA                                         1643
         LTR   @11,@11                                             1643
         BNZ   @DL01600                                            1643
*   RFY                                                            1644
*     IDAVMT BASED(BIBVMT);                                        1644
*   RFY                                                            1645
*     UCBOB BASED(TIOEFSRT);                                       1645
*   RFY                                                            1646
*     RET RSTD;                                                    1646
*   RET=MWASAVEB;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEB                                        1647
*   RFY                                                            1648
*     RET UNRSTD;                                                  1648
*   END VMTDELET;                                                  1649
@EL00027 DS    0H                                                  1649
@EF00027 DS    0H                                                  1649
@ER00027 BR    @14                                                 1649
*PUTOPENI:                                                         1650
*                                                                  1650
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION: CALLED BY CLNUP TO RESET THE OPEN INDICATOR IN THE   */
*/*             CATALOG FOR EACH DATA SET SUCCESSFULLY OPENED PRIOR  */
*/*             TO THE FAILURE.  INITIALIZES PARAMETER LIST AND      */
*/*             CALLS IDA0192C TO RESET OPEN INDICATOR.              */
*/*                                                                  */
*/*   INPUTS:   1. PTR TO CURRENT CLUSTER IN OPWCURPT.               */
*/*             2. PTR TO CURRENT AMBL IN MWAXAMBL.                  */
*/*                                                                  */
*/*   OUTPUTS:  1. OPEN INDICATOR IS RESET IN CATALOG.               */
*/*                                                                  */
*/********************************************************************/
*                                                                  1650
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1650
PUTOPENI DS    0H                                                  1651
*   RFY                                                            1651
*     RET RSTD;                                                    1651
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1652
*   RFY                                                            1653
*     RET UNRSTD;                                                  1653
*   MWACTID=OPO;                    /* IND RESET OPEN INDICATOR      */
         MVI   MWACTID,X'0C'                                       1654
*   MWACTSFI=ADDR(IDASFI);          /* PT TO SFI AREA                */
         LA    @11,MWASFI                                          1655
         STCM  @11,7,MWACTSFI                                      1655
*   RESPECIFY                                                      1656
*    (R1,                                                          1656
*     R5,                                                          1656
*     RETCODE) RESTRICTED;                                         1656
*   R1=ADDR(MWACATPL);              /* PT TO CATALOG PARM LIST       */
         LA    R1,MWACATPL                                         1657
*   IF OPWDOPEN=ON THEN             /* OPEN INDR IN CATLG ON FOR DATA*/
         L     @14,OPWCURPT(,RCORE)                                1658
         TM    OPWDOPEN(@14),B'10000000'                           1658
         BNO   @RF01658                                            1658
*     DO;                                                          1659
*       IDASFI=IDASFI&&IDASFI;      /* ZERO SFI                      */
         XC    IDASFI(12,@11),IDASFI(@11)                          1660
*       R5=AMBLDTA;                 /* PT TO DATA AMB                */
         L     R5,AMBLDTA(,MWAXAMBL)                               1661
*       RSTATRTN=IDAR192C;          /* INDIC 192C CONTROL    @Y30DSDP*/
         L     @14,OPWCOMWA(,RCORE)                                1662
         MVC   RSTATRTN(4,@14),@CC05319                            1662
*       CALL IDA0192C;              /* CALL CATLG INTRF TO INIT OPW  */
         L     @15,@CV05659                                        1663
         BALR  @14,@15                                             1663
*       RSTATRTN=IDAR192A;          /* INDIC 192A CONTROL    @Y30DSDP*/
         L     @14,OPWCOMWA(,RCORE)                                1664
         MVC   RSTATRTN(4,@14),@CC05315                            1664
*       IF RETCODE>0 THEN           /* IF ERROR FROM CATALOG         */
         SLR   @11,@11                                             1665
         CR    RETCODE,@11                                         1665
         BNH   @RF01665                                            1665
*         DO;                       /* THEN WRITE ERROR MESSAGE      */
*           MWAPDPRM=RETCODE;       /* LD RETCODE                    */
         ST    RETCODE,MWAPDPRM                                    1667
*           PDPCODE=MWAPCODE;       /* LOAD PROBLEM CODE             */
         AL    @14,@CF05875                                        1668
         IC    @07,MWAPCODE                                        1668
         STC   @07,PDPCODE(,@14)                                   1668
*           PDPFUNC=MWAPFUNC;       /* LOAD FUNCTION CODE            */
         IC    @07,MWAPFUNC                                        1669
         STC   @07,PDPFUNC(,@14)                                   1669
*           PDPSFC=MWAPSFC;         /* LOAD SUB-FUNCTION CODE        */
         IC    @07,MWAPSFC                                         1670
         STC   @07,PDPSFC(,@14)                                    1670
*           IF PDPSFC=0&            /* IF NO SUB-FUNCTION CODE       */
*               SFIRETCD^=0 THEN    /* AND SFI INITIALIZED           */
         CLI   PDPSFC(@14),0                                       1671
         BNE   @RF01671                                            1671
         LA    @07,MWASFI                                          1671
         C     @11,SFIRETCD(,@07)                                  1671
         BE    @RF01671                                            1671
*             PDPSFI=ADDR(IDASFI);  /* THEN PT TO SFI AREA           */
         ST    @07,PDPSFI(,@14)                                    1672
*           ELSE                    /* IF NOT                        */
*             PDPSFI=0;             /* IND NO SFI                    */
         B     @RC01671                                            1673
@RF01671 L     @14,OPWCOMWA(,RCORE)                                1673
         SLR   @11,@11                                             1673
         ST    @11,PDPSFI+280(,@14)                                1673
*           CALL PROBDT;            /* PROCESS ERROR                 */
@RC01671 BAL   @14,PROBDT                                          1674
*           PDPSFI=0;               /* ZERO PTR TO SFI AREA          */
         LA    @14,280                                             1675
         AL    @14,OPWCOMWA(,RCORE)                                1675
         SLR   @11,@11                                             1675
         ST    @11,PDPSFI(,@14)                                    1675
*           PDPSFC=0;               /* ZERO SUB=FUNCTION CODE        */
         MVI   PDPSFC(@14),X'00'                                   1676
*         END;                                                     1677
*     END;                                                         1678
@RF01665 DS    0H                                                  1679
*   IF OPWIOPEN=ON THEN             /* OPEN INDR IN CATLG ON FOR INDX*/
@RF01658 L     @14,OPWCURPT(,RCORE)                                1679
         TM    OPWIOPEN(@14),B'00001000'                           1679
         BNO   @RF01679                                            1679
*     DO;                                                          1680
*       IDASFI=IDASFI&&IDASFI;      /* ZERO SFI                      */
         LA    @14,MWASFI                                          1681
         XC    IDASFI(12,@14),IDASFI(@14)                          1681
*       R5=AMBLIX;                  /* PT TO DATA AMB                */
         L     R5,AMBLIX(,MWAXAMBL)                                1682
*       CALL IDA0192C;              /* CALL CATLG INTRF TO INIT OPW  */
         L     @15,@CV05659                                        1683
         BALR  @14,@15                                             1683
*       IF RETCODE>0 THEN           /* IF ERROR FROM CATALOG         */
         LTR   RETCODE,RETCODE                                     1684
         BNP   @RF01684                                            1684
*         DO;                       /* THEN WRITE ERROR MESSAGE      */
*           MWAPDPRM=RETCODE;       /* LD RETCODE                    */
         ST    RETCODE,MWAPDPRM                                    1686
*           PDPCODE=MWAPCODE;       /* LOAD PROBLEM CODE             */
         LA    @14,280                                             1687
         AL    @14,OPWCOMWA(,RCORE)                                1687
         IC    @11,MWAPCODE                                        1687
         STC   @11,PDPCODE(,@14)                                   1687
*           PDPFUNC=MWAPFUNC;       /* LOAD FUNCTION CODE            */
         IC    @11,MWAPFUNC                                        1688
         STC   @11,PDPFUNC(,@14)                                   1688
*           PDPSFC=MWAPSFC;         /* LOAD SUB-FUNCTION CODE        */
         IC    @11,MWAPSFC                                         1689
         STC   @11,PDPSFC(,@14)                                    1689
*           PDPSFI=ADDR(IDASFI);    /* PT TO SFI AREA                */
         LA    @11,MWASFI                                          1690
         ST    @11,PDPSFI(,@14)                                    1690
*           CALL PROBDT;            /* PROCESS ERROR                 */
         BAL   @14,PROBDT                                          1691
*           PDPSFI=0;               /* ZERO PTR TO SFI AREA          */
         LA    @14,280                                             1692
         AL    @14,OPWCOMWA(,RCORE)                                1692
         SLR   @11,@11                                             1692
         ST    @11,PDPSFI(,@14)                                    1692
*           PDPSFC=0;               /* ZERO SUB=FUNCTION CODE        */
         MVI   PDPSFC(@14),X'00'                                   1693
*         END;                                                     1694
*     END;                                                         1695
@RF01684 DS    0H                                                  1696
*   RFY                                                            1696
*     RET RSTD;                                                    1696
@RF01679 DS    0H                                                  1697
*   RET=MWASAVEB;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEB                                        1697
*   RFY                                                            1698
*    (R1,                                                          1698
*     R5,                                                          1698
*     RET,                                                         1698
*     RETCODE) UNRSTD;                                             1698
*   END PUTOPENI;                                                  1699
@EL00028 DS    0H                                                  1699
@EF00028 DS    0H                                                  1699
@ER00028 BR    @14                                                 1699
*DEHOOK:                                                           1700
*                                                                  1700
*/********************************************************************/
*/*                                                          @Y30DSDP*/
*/*    01 FUNCTION -  THIS ROUTINE DECHAINS AND DEBCHK DELETES ONE   */
*/*                   DEB                                    @Y30DSDP*/
*/*    01 INPUT -  1. POINTER TO DEB (RDEB)                  @Y30DSDP*/
*/*                2. POINTER TO TCB FROM DEB (DEBTCB)       @Y30DSDP*/
*/*    01 OUTPUT - 1. DEB IS REMOVED FROM THE SPECIFIED DEB CHAIN    */
*/*                2. DEBCHK DELETE IS ISSUED AGAINST DEB    @Y30DSDP*/
*/*                                                          @Y30DSDP*/
*/********************************************************************/
*                                                                  1700
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @Y30DSDP*/
DEHOOK   DS    0H                                                  1701
*   RFY                                                            1701
*     RET RSTD;                     /*                       @Y30DSDP*/
*   MWASAVEC=RET;                   /* SAVE RETURN ADDRESS   @Y30DSDP*/
         ST    RET,MWASAVEC                                        1702
*   RFY                                                            1703
*     RET UNRSTD;                   /*                       @Y30DSDP*/
*                                                                  1703
*   /*****************************************************************/
*   /*                                                               */
*   /* FIND DEB ON TCBDEB CHAIN AND REMOVE IT IF FOUND       @Y30DSDP*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1704
*   IF MWADEB^=0 THEN               /* IF DEB ADDRESS VALID  @Y30DSDP*/
         LTR   MWADEB,MWADEB                                       1704
         BZ    @RF01704                                            1704
*     DO;                           /*                       @Y30DSDP*/
*       CALL DISABLE;               /* GET LOCK              @Y30DSDP*/
         BAL   @14,DISABLE                                         1706
*       IF DEBTCBB->TCBDEB=MWADEB THEN/* IF DEB 1ST ON CHAIN @Y30DSDP*/
         L     @11,DEBTCBB-1(,MWADEB)                              1707
         LA    @11,0(,@11)                                         1707
         C     MWADEB,TCBDEB(,@11)                                 1707
         BNE   @RF01707                                            1707
*         DO;                       /* DECHAIN DEB           @Y30DSDP*/
*           MWADEBAD=MWADEB;        /* POINT TO OUR DEB      @Y30DSDP*/
         LR    MWADEBAD,MWADEB                                     1709
*           MWADEBNX=DEBDEBB;       /* POINT TO NEXT DEB     @Y30DSDP*/
         L     MWADEBNX,DEBDEBB-1(,MWADEB)                         1710
         LA    MWADEBNX,0(,MWADEBNX)                               1710
*           CS(MWADEBAD,MWADEBNX,DEBTCBB->TCBDEB);/* CHAIN NXT DEB   */
         CS    MWADEBAD,@07,TCBDEB(@11)                            1711
*           BC(8,DEHOOK1);          /* IF CS GOOD            @Y30DSDP*/
         BC    8,DEHOOK1                                           1712
*         END;                      /* IF DEB NOT FIRST      @Y30DSDP*/
*       RESPECIFY                                                  1714
*         R6 RESTRICTED;                                           1714
@RF01707 DS    0H                                                  1715
*       R6=DEBTCBB->TCBDEB;         /* LOAD PTR TO FIRST DEB @Y30DSDP*/
         L     @11,DEBTCBB-1(,MWADEB)                              1715
         L     R6,TCBDEB(,@11)                                     1715
*       DO WHILE R6^=0;             /* LOOK FOR PRECEEDING DEB       */
         B     @DE01716                                            1716
@DL01716 DS    0H                                                  1717
*         IF R6->DEBDEBB=MWADEB THEN/* IS NEXT DEB OURS      @Y30DSDP*/
         L     @11,DEBDEBB-1(,R6)                                  1717
         LA    @11,0(,@11)                                         1717
         CR    MWADEB,@11                                          1717
         BNE   @RF01717                                            1717
*           DO;                     /*                       @Y30DSDP*/
*             R6->DEBDEBB=DEBDEBB;  /* DECHAIN DEB           @Y30DSDP*/
         MVC   DEBDEBB(3,R6),DEBDEBB(MWADEB)                       1719
*             R6=0;                 /* TO GET OUT OF LOOP    @Y30DSDP*/
         SLR   R6,R6                                               1720
*           END;                    /*                       @Y30DSDP*/
*         ELSE                      /* IF NEXT DEB NOT OURS  @Y30DSDP*/
*           R6=R6->DEBDEBB;         /* POINT TO NEXT DEB     @Y30DSDP*/
         B     @RC01717                                            1722
@RF01717 L     @11,DEBDEBB-1(,R6)                                  1722
         LA    @11,0(,@11)                                         1722
         LR    R6,@11                                              1722
*       END;                        /*                       @Y30DSDP*/
@RC01717 DS    0H                                                  1723
@DE01716 LTR   R6,R6                                               1723
         BNZ   @DL01716                                            1723
*       RESPECIFY                                                  1724
*         R6 UNRESTRICTED;                                         1724
*DEHOOK1:                           /*                       @Y30DSDP*/
*       CALL ENABLE;                /* FREE LOCK             @Y30DSDP*/
*                                                                  1725
DEHOOK1  BAL   @14,ENABLE                                          1725
*       /*************************************************************/
*       /*                                                           */
*       /* ISSUE DEBCHK DELETE IF DEB NEEDS IT               @Y30DSDP*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  1726
*       IF DEBAMTYP^=0 THEN         /* IF DEB HAS ACCESS METHOD TYPE
*                                      THEN DEBCHK ISSUED AGAINST IT */
         L     @11,DEBAPPAD(,MWADEB)                               1726
         CLI   DEBAMTYP(@11),0                                     1726
         BE    @RF01726                                            1726
*         DO;                       /*                       @Y30DSDP*/
*           RESPECIFY                                              1728
*             R1 RESTRICTED;                                       1728
*           R1=DEBDCBB;             /* POINT TO ACB/AMB      @Y30DSDP*/
         L     R1,DEBDCBB-1(,MWADEB)                               1729
         LA    R1,0(,R1)                                           1729
*           GEN(DEBCHK (1),TYPE=DELETE,AM=VSAM);/* DELETE FR DEB   1730
*                                      TABLE                         */
         DEBCHK (1),TYPE=DELETE,AM=VSAM
*           RESPECIFY                                              1731
*             R1 UNRESTRICTED;                                     1731
*         END;                      /*                       @Y30DSDP*/
*     END;                          /*                       @Y30DSDP*/
@RF01726 DS    0H                                                  1734
*   RESPECIFY                                                      1734
*     RET RESTRICTED;                                              1734
@RF01704 DS    0H                                                  1735
*   RET=MWASAVEC;                   /* RESTORE RETURN ADDR   @Y30DSDP*/
         L     RET,MWASAVEC                                        1735
*   RESPECIFY                                                      1736
*     RET UNRESTRICTED;                                            1736
*   END DEHOOK;                     /*                       @Y30DSDP*/
@EL00029 DS    0H                                                  1737
@EF00029 DS    0H                                                  1737
@ER00029 BR    @14                                                 1737
*BLDVGTT:                                                          1738
*                                                                  1738
*   /*****************************************************************/
*   /*                                                               */
*   /* ROUTINE GETS AND INITIALIZES THE VGTT                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1738
*   PROCEDURE OPTIONS(NOSAVE,NOSAVEAREA);                          1738
BLDVGTT  DS    0H                                                  1739
*   RFY                                                            1739
*     RET RSTD;                                                    1739
*   MWASAVEC=RET;                   /* SAVE RETURN ADDR      @Y30DSDP*/
         ST    RET,MWASAVEC                                        1740
*   RFY                                                            1741
*     RET UNRSTD;                   /*                       @Y30DSDP*/
*   OPWVSMPL=OPWVSMPL&&OPWVSMPL;    /* ZERO VSM PARM         @Y30DSDP*/
         XC    OPWVSMPL(16,RCORE),OPWVSMPL(RCORE)                  1742
*   OPWVMLNG=(LENGTH(IDAVGTT)+7)&-8;/* CALC LEN              @Y30DSDP*/
         MVC   OPWVMLNG(3,RCORE),@CF00349+1                        1743
*   OPWVMTYP=DIRCTREQ;              /* INDIC DIRECT REQ      @Y30DSDP*/
         MVI   OPWVMTYP(RCORE),X'85'                               1744
*   OPWVMSP=GSRPOOL;                /* INDIC GLOBAL SUBPOOL  @Y30DSDP*/
         MVI   OPWVMSP(RCORE),X'F1'                                1745
*   OPWVMNSL=ON;                    /* INDIC NO CSL          @Y30DSDP*/
         OI    OPWVMNSL(RCORE),B'00001000'                         1746
*   CALL IDA0192M;                  /* GO GET CORE FOR VGTT  @Y30DSDP*/
         L     @15,@CV05673                                        1747
         BALR  @14,@15                                             1747
*   RSTATRTN=IDAR192A;              /* INDIC 192A CONTROL    @Y30DSDP*/
         L     @11,OPWCOMWA(,RCORE)                                1748
         MVC   RSTATRTN(4,@11),@CC05315                            1748
*   IF OPWVMADR=0 THEN              /* CHK FOR FAILURE       @Y30DSDP*/
         L     @05,OPWVMADR(,RCORE)                                1749
         LTR   @05,@05                                             1749
         BNZ   @RF01749                                            1749
*     DO;                           /* YES,                  @Y30DSDP*/
*       PDPCODE=PP20;               /* INDIC GETCORE FAIL    @Y30DSDP*/
         MVI   PDPCODE+280(@11),X'14'                              1751
*       CALL PROBDT;                /* GO TO PROB DETER      @Y30DSDP*/
         BAL   @14,PROBDT                                          1752
*     END;                          /*                       @Y30DSDP*/
*   MWAVGTTP=OPWVMADR;              /* INIT PTR TO VGTT      @Y30DSDP*/
*                                                                  1754
@RF01749 L     @11,OPWVMADR(,RCORE)                                1754
         ST    @11,MWAVGTTP                                        1754
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE FIELDS IN VGTT                             @Y30DSDP*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1755
*   RFY                                                            1755
*     IDAVGTT BASED(MWAVGTTP);      /*                       @Z30SSDP*/
*   VGTTID=VGTTNAME;                /* SET ID='VGTT'         @Y30DSDP*/
         MVC   VGTTID(4,@11),@CC05274                              1756
*   VGTTSP=OPWVMSP;                 /* SET SUBPOOL NO.       @Y30DSDP*/
         IC    @05,OPWVMSP(,RCORE)                                 1757
         STC   @05,VGTTSP(,@11)                                    1757
*   VGTTSIZE=OPWVMLNG;              /* SET VGTT LENGTH       @Y30DSDP*/
         L     @05,OPWVMLNG-1(,RCORE)                              1758
         LA    @05,0(,@05)                                         1758
         ST    @05,VGTTSIZE(,@11)                                  1758
*   IF OPWFLGS1^=0 THEN             /* CHK CAT,SCRA,SYSTEM DATA SETS
*                                                            @Z40WSRL*/
         CLI   OPWFLGS1(RCORE),0                                   1759
         BE    @RF01759                                            1759
*     VGTTCTLG=ON;                  /* YES, SET CAT BIT      @Y30DSDP*/
         OI    VGTTCTLG(@11),B'00010000'                           1760
*   ELSE                            /* NO,                   @Y30DSDP*/
*     IF ACBGSR=ON THEN             /* CHK FOR GSR           @Y30DSDP*/
         B     @RC01759                                            1761
@RF01759 TM    ACBGSR(RACB),B'00100000'                            1761
         BNO   @RF01761                                            1761
*       DO;                         /*                       @Z40ESSR*/
*         VGTTGSRK=DXUKEY;          /* SAVE GSR KEY IN VGTT  @Z40ESSR*/
         L     @11,MWAVGTTP                                        1763
         L     @05,OPWCOMWA(,RCORE)                                1763
         IC    @15,DXUKEY(,@05)                                    1763
         STC   @15,VGTTGSRK(,@11)                                  1763
*         VGTTGSR=ON;               /* YES, SET GSR BIT      @Y30DSDP*/
         OI    VGTTGSR(@11),B'01000000'                            1764
*       END;                        /*                       @Z40ESSR*/
*     ELSE                          /* NOT GSR               @ZA16012*/
*       IF OPWCBIC=ON THEN          /* IF CONTROL BLKS IN COMMON   1766
*                                      SPECIFIED             @ZA16012*/
         B     @RC01761                                            1766
@RF01761 TM    OPWCBIC(RCORE),B'10000000'                          1766
         BNO   @RF01766                                            1766
*         DO;                       /*                       @ZA16012*/
*           VGTTCBIC=ON;            /* INDICATE THIS IS CONTROL BLKS
*                                      IN COMMON VGTT        @ZA16012*/
         L     @11,MWAVGTTP                                        1768
         OI    VGTTCBIC(@11),B'00000100'                           1768
*           VGTTGSRK=DXUKEY;        /* SAVE CBIC KEY IN VGTT @ZA16012*/
         L     @05,OPWCOMWA(,RCORE)                                1769
         IC    @15,DXUKEY(,@05)                                    1769
         STC   @15,VGTTGSRK(,@11)                                  1769
*         END;                      /*                       @ZA16012*/
*       ELSE                        /* NO, DEFAULT           @Y30DSDP*/
*         VGTTOPEN=ON;              /* SET OPEN BIT          @Y30DSDP*/
*                                                                  1771
         B     @RC01766                                            1771
@RF01766 L     @11,MWAVGTTP                                        1771
         OI    VGTTOPEN(@11),B'00001000'                           1771
*   /*****************************************************************/
*   /*                                                               */
*   /* CALL ROUTINE TO CHAIN VGTT                            @Y30DSDP*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1772
*   CALL CHNVGTT;                   /* CHAIN VGTT            @Y30DSDP*/
@RC01766 DS    0H                                                  1772
@RC01761 DS    0H                                                  1772
@RC01759 BAL   @14,CHNVGTT                                         1772
*   RFY                                                            1773
*     RET RSTD;                     /*                       @Y30DSDP*/
*   RET=MWASAVEC;                   /* RESTORE RETURN ADDR   @Y30DSDP*/
         L     RET,MWASAVEC                                        1774
*   RFY                                                            1775
*     RET UNRSTD;                   /*                       @Y30DSDP*/
*   END BLDVGTT;                    /*                       @Y30DSDP*/
@EL00030 DS    0H                                                  1776
@EF00030 DS    0H                                                  1776
@ER00030 BR    @14                                                 1776
*CHNVGTT:                                                          1777
*                                                                  1777
*   /*****************************************************************/
*   /*                                                               */
*   /* ROUTINE CHAINS VGTT TO ASCB                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1777
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @Z30SSRL*/
CHNVGTT  DS    0H                                                  1778
*   RFY                                                            1778
*     RET RSTD;                     /*                       @Y30DSDP*/
*   MWASAVED=RET;                   /* SAVE RETURN ADDR      @Y30DSDP*/
         ST    RET,MWASAVED                                        1779
*   RFY                                                            1780
*     RET UNRSTD;                   /*                       @Y30DSDP*/
*CHNLOOP:                                                          1781
*   VGTTNEXT=ASCBVGTT;              /* INIT CHAIN PTR        @Y30DSDP*/
CHNLOOP  L     @11,MWAVGTTP                                        1781
         L     @05,PSAAOLD                                         1781
         L     @15,ASCBVGTT(,@05)                                  1781
         ST    @15,VGTTNEXT(,@11)                                  1781
*   CS(VGTTNEXT,MWAVGTTP,ASCBVGTT); /* CHAIN WITH CS         @Y30DSDP*/
         L     @15,VGTTNEXT(,@11)                                  1782
         LR    @14,@11                                             1782
         CS    @15,@14,ASCBVGTT(@05)                               1782
         BZ    @BC01782                                            1782
         ST    @15,VGTTNEXT(,@11)                                  1782
@BC01782 DS    0H                                                  1783
*   BC(4,CHNLOOP);                  /* IF UNSUCCESSFUL, LOOP @Y30DSDP*/
         BC    4,CHNLOOP                                           1783
*   RFY                                                            1784
*     RET RSTD;                     /*                       @Y30DSDP*/
*   RET=MWASAVED;                   /* RESTORE RETURN ADDR   @Y30DSDP*/
         L     RET,MWASAVED                                        1785
*   RFY                                                            1786
*     RET UNRSTD;                   /*                       @Y30DSDP*/
*   END CHNVGTT;                    /*                       @Y30DSDP*/
@EL00031 DS    0H                                                  1787
@EF00031 DS    0H                                                  1787
@ER00031 BR    @14                                                 1787
*DECHVGTT:                                                         1788
*                                                                  1788
*   /*****************************************************************/
*   /*                                                               */
*   /* ROUTINE DECHAINS VGTT FROM ASCB                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1788
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @Z30SSRL*/
DECHVGTT DS    0H                                                  1789
*   RFY                                                            1789
*     RET RSTD;                     /*                       @Y30DSDP*/
*   MWASAVEB=RET;                   /* SAVE RET ADDR         @Y30DSDP*/
         ST    RET,MWASAVEB                                        1790
*   RFY                                                            1791
*     RET UNRSTD;                   /*                       @Y30DSDP*/
*   CALL DISABLE;                   /* LOCK UP VGTT CHAIN    @Y30DSDP*/
         BAL   @14,DISABLE                                         1792
*   IF ASCBVGTT^=0 THEN             /* CHK IF CHAIN EXISTS   @Y30DSDP*/
         L     @11,PSAAOLD                                         1793
         L     @11,ASCBVGTT(,@11)                                  1793
         LTR   @11,@11                                             1793
         BZ    @RF01793                                            1793
*     DO;                           /* YES,                  @Y30DSDP*/
*DCHNLOOP:                                                         1795
*       IF ASCBVGTT=MWAVGTTP THEN   /* CHK FOR 1ST VGTT OURS @Y30DSDP*/
DCHNLOOP L     @11,MWAVGTTP                                        1795
         L     @05,PSAAOLD                                         1795
         C     @11,ASCBVGTT(,@05)                                  1795
         BNE   @RF01795                                            1795
*         DO;                       /* YES,                  @Y30DSDP*/
*           MWAVGTCS=MWAVGTTP;      /* SET UP COMPARE WORD   @Y30DSDP*/
         LR    MWAVGTCS,@11                                        1797
*           CS(MWAVGTCS,VGTTNEXT,ASCBVGTT);/* DECHAIN        @Y30DSDP*/
         L     @11,VGTTNEXT(,@11)                                  1798
         L     @15,PSAAOLD                                         1798
         CS    MWAVGTCS,@11,ASCBVGTT(@15)                          1798
*           BC(4,DCHNLOOP);         /* LOOP IF UNSUCCESSFUL  @Y30DSDP*/
         BC    4,DCHNLOOP                                          1799
*         END;                      /*                       @Y30DSDP*/
*       ELSE                        /* NO, OURS NOT 1ST      @Y30DSDP*/
*         DO;                       /*                       @Y30DSDP*/
         B     @RC01795                                            1801
@RF01795 DS    0H                                                  1802
*           MWAVGTCS=ASCBVGTT;      /* PT TO 1ST VGTT        @Y30DSDP*/
         L     @11,PSAAOLD                                         1802
         L     MWAVGTCS,ASCBVGTT(,@11)                             1802
*           DO WHILE(MWAVGTCS->VGTTNEXT^=MWAVGTTP&/* FIND VGTT PTG   */
*                 MWAVGTCS->VGTTNEXT^=0);/* TO OURS          @ZA20930*/
         B     @DE01803                                            1803
@DL01803 DS    0H                                                  1804
*             MWAVGTCS=MWAVGTCS->VGTTNEXT;/* GET NEXT VGTT   @Y30DSDP*/
         L     MWAVGTCS,VGTTNEXT(,MWAVGTCS)                        1804
*           END;                    /*                       @Y30DSDP*/
@DE01803 L     @11,VGTTNEXT(,MWAVGTCS)                             1805
         C     @11,MWAVGTTP                                        1805
         BE    @DC01803                                            1805
         LTR   @11,@11                                             1805
         BNZ   @DL01803                                            1805
@DC01803 DS    0H                                                  1806
*           IF MWAVGTCS->VGTTNEXT=MWAVGTTP THEN/* CHK IF FOUND       */
         L     @11,MWAVGTTP                                        1806
         C     @11,VGTTNEXT(,MWAVGTCS)                             1806
         BNE   @RF01806                                            1806
*             MWAVGTCS->VGTTNEXT=VGTTNEXT;/* YES, DECHAIN    @Y30DSDP*/
         L     @11,VGTTNEXT(,@11)                                  1807
         ST    @11,VGTTNEXT(,MWAVGTCS)                             1807
*         END;                      /*                       @Y30DSDP*/
@RF01806 DS    0H                                                  1809
*     END;                          /*                       @Y30DSDP*/
@RC01795 DS    0H                                                  1810
*   CALL ENABLE;                    /* UNLOCK VGTT CHAIN     @Y30DSDP*/
@RF01793 BAL   @14,ENABLE                                          1810
*   RFY                                                            1811
*     IDAVGTT BASED(BIBVGTT);       /*                       @Z30SSDP*/
*   RFY                                                            1812
*     RET RSTD;                     /*                       @Y30DSDP*/
*   RET=MWASAVEB;                   /* RESTORE RET ADDR      @Y30DSDP*/
         L     RET,MWASAVEB                                        1813
*   RFY                                                            1814
*     RET UNRSTD;                   /*                       @Y30DSDP*/
*   END DECHVGTT;                   /*                       @Y30DSDP*/
@EL00032 DS    0H                                                  1815
@EF00032 DS    0H                                                  1815
@ER00032 BR    @14                                                 1815
*DISABLE:                                                          1816
*                                                                  1816
*/********************************************************************/
*/*                                                          @Y30DSDP*/
*/*    01 FUNCTION -  THIS ROUTINE WILL DISABLE INTERRUPTS   @Y30DSDP*/
*/*    01 INPUT -  1. DISABLE REQUEST COUNTER (DISABLCT)     @Y30DSDP*/
*/*    01 OUTPUT - 1. IF DISABLE REQUEST COUNT IS ZERO, INTERRUPTS   */
*/*                   ARE DISABLED                           @Y30DSDP*/
*/*                2. THE DISABLE REQUEST COUNT IS INCREMENTED BY 1  */
*/*                                                          @Y30DSDP*/
*/********************************************************************/
*                                                                  1816
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @Y30DSDP*/
DISABLE  DS    0H                                                  1817
*   RFY                                                            1817
*     RET RSTD;                     /*                       @Y30DSDP*/
*   MWASAVED=RET;                   /* SAVE RETURN ADDRESS   @Y30DSDP*/
         ST    RET,MWASAVED                                        1818
*   RFY                                                            1819
*     RET UNRSTD;                   /*                       @Y30DSDP*/
*   IF DISABLCT=0 THEN              /* IF NO OUTSTANDING ENABLE      */
         LH    @11,DISABLCT                                        1820
         LTR   @11,@11                                             1820
         BNZ   @RF01820                                            1820
*     DO;                           /*                       @Y30DSDP*/
*       RESPECIFY                                                  1822
*        (R1,                                                      1822
*         R11) RESTRICTED;                                         1822
*       LOCKSAVA=R11;               /* SAVE R11              @Y30DSDP*/
         LR    LOCKSAVA,R11                                        1823
*       LOCKSAVB=R12;               /* SAVE R12              @Y30DSDP*/
         LR    LOCKSAVB,R12                                        1824
*       LOCKSAVC=R1;                /* SAVE R1               @Y30DSDP*/
         LR    LOCKSAVC,R1                                         1825
*       R1=R13;                     /* SAVE R13              @Y30DSDP*/
         LR    R1,R13                                              1826
*       GEN SETS(R11,R12,R13,RET) REFS(PSALITA,FLC);               1827
*                                                          /*@Y30DSDP*/
      SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                           *
               RELATED=(LOCAL,IDA0192A(DISABLE))
*       R13=R1;                     /* RESTORE R13           @Y30DSDP*/
         LR    R13,R1                                              1828
*       R1=LOCKSAVC;                /* RESTORE R1            @Y30DSDP*/
         LR    R1,LOCKSAVC                                         1829
*       R12=LOCKSAVB;               /* RESTORE R12           @Y30DSDP*/
         LR    R12,LOCKSAVB                                        1830
*       R11=LOCKSAVA;               /* RESTORE R11           @Y30DSDP*/
         LR    R11,LOCKSAVA                                        1831
*       RESPECIFY                                                  1832
*        (R1,                                                      1832
*         R11) UNRESTRICTED;                                       1832
*     END;                          /*                       @Y30DSDP*/
*   DISABLCT=DISABLCT+1;            /* BUMP DISABLE COUNT    @Y30DSDP*/
@RF01820 LH    @11,DISABLCT                                        1834
         LA    @11,1(,@11)                                         1834
         STH   @11,DISABLCT                                        1834
*   RFY                                                            1835
*     RET RSTD;                     /*                       @Y30DSDP*/
*   RET=MWASAVED;                   /* RESTORE RETURN ADDR   @Y30DSDP*/
         L     RET,MWASAVED                                        1836
*   RFY                                                            1837
*     RET UNRSTD;                   /*                       @Y30DSDP*/
*   END DISABLE;                    /*                       @Y30DSDP*/
@EL00033 DS    0H                                                  1838
@EF00033 DS    0H                                                  1838
@ER00033 BR    @14                                                 1838
*ENABLE:                                                           1839
*                                                                  1839
*/********************************************************************/
*/*                                                          @Y30DSDP*/
*/*    01 FUNCTION -  THIS ROUTINE ENABLES INTERRUPTS        @Y30DSDP*/
*/*    01 INPUT -  1. DISABLE REQUEST COUNT (DISABLCT)       @Y30DSDP*/
*/*    01 OUTPUT - 1. THE DISABLE REQUEST COUNT IS DECREMENTED BY 1  */
*/*                2. IF DISABLE REQUEST COUNT IS ZERO, INTERRUPTS   */
*/*                   ARE ENABLED                            @Y30DSDP*/
*/*                                                          @Y30DSDP*/
*/********************************************************************/
*                                                                  1839
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @Y30DSDP*/
ENABLE   DS    0H                                                  1840
*   RFY                                                            1840
*     RET RSTD;                     /*                       @Y30DSDP*/
*   MWASAVED=RET;                   /* SAVE RETURN ADDR      @Y30DSDP*/
         ST    RET,MWASAVED                                        1841
*   RFY                                                            1842
*     RET UNRSTD;                   /*                       @Y30DSDP*/
*   DISABLCT=DISABLCT-1;            /* DECR DISABLE COUNTER  @Y30DSDP*/
         LH    @11,DISABLCT                                        1843
         BCTR  @11,0                                               1843
         STH   @11,DISABLCT                                        1843
*   IF DISABLCT=0 THEN              /* IF NO DISABLES OUTSTANTING    */
         LTR   @11,@11                                             1844
         BNZ   @RF01844                                            1844
*     DO;                           /*                       @Y30DSDP*/
*       RESPECIFY                                                  1846
*        (R1,                                                      1846
*         R11) RESTRICTED;                                         1846
*       LOCKSAVA=R11;               /* SAVE R11              @Y30DSDP*/
         LR    LOCKSAVA,R11                                        1847
*       LOCKSAVB=R12;               /* SAVE R12              @Y30DSDP*/
         LR    LOCKSAVB,R12                                        1848
*       LOCKSAVC=R1;                /* SAVE R1               @Y30DSDP*/
         LR    LOCKSAVC,R1                                         1849
*       R1=R13;                     /* SAVE R13              @Y30DSDP*/
         LR    R1,R13                                              1850
*       GEN SETS(R11,R12,R13,RET) REFS(PSALITA,FLC);               1851
*                                                          /*@Y30DSDP*/
      SETLOCK RELEASE,TYPE=LOCAL,                                      *
               RELATED=(LOCAL,IDA0192A(ENABLE))
*       R13=R1;                     /* RESTORE R13           @Y30DSDP*/
         LR    R13,R1                                              1852
*       R1=LOCKSAVC;                /* RESTORE R1            @Y30DSDP*/
         LR    R1,LOCKSAVC                                         1853
*       R12=LOCKSAVB;               /* RESTORE R12           @Y30DSDP*/
         LR    R12,LOCKSAVB                                        1854
*       R11=LOCKSAVA;               /* RESTORE R11           @Y30DSDP*/
         LR    R11,LOCKSAVA                                        1855
*       RESPECIFY                                                  1856
*        (R1,                                                      1856
*         R11) UNRESTRICTED;                                       1856
*     END;                          /*                       @Y30DSDP*/
*   RFY                                                            1858
*     RET RSTD;                     /*                       @Y30DSDP*/
@RF01844 DS    0H                                                  1859
*   RET=MWASAVED;                   /* RESTORE RETURN ADDR   @Y30DSDP*/
         L     RET,MWASAVED                                        1859
*   RFY                                                            1860
*     RET UNRSTD;                   /*                       @Y30DSDP*/
*   END ENABLE;                     /*                       @Y30DSDP*/
@EL00034 DS    0H                                                  1861
@EF00034 DS    0H                                                  1861
@ER00034 BR    @14                                                 1861
*BLDBIB:                                                           1862
*                                                                  1862
*   /*****************************************************************/
*   /*                                                               */
*   /* ROUTINE BUILDS A BIB FOR NORMAL & DUMMY PROCESSING            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1862
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1862
BLDBIB   DS    0H                                                  1863
*   RFY                                                            1863
*     RET RSTD;                     /*                       @Y30DSDP*/
*   MWASAVEC=RET;                   /* SAVE RETURN ADDR      @Y30DSDP*/
         ST    RET,MWASAVEC                                        1864
*   RFY                                                            1865
*     RET UNRSTD;                   /*                       @Y30DSDP*/
*   OPWVSMPL=OPWVSMPL&&OPWVSMPL;    /* ZERO VSM PARM         @Y30DSDP*/
         XC    OPWVSMPL(16,RCORE),OPWVSMPL(RCORE)                  1866
*   IF OPWFLGS1^=0 THEN             /* IF SYS DATA SET       @Y30DSDP*/
         CLI   OPWFLGS1(RCORE),0                                   1867
         BE    @RF01867                                            1867
*     OPWVMSP=CATPOOL;              /* IND SQA SUBPOOL       @Y30DSDP*/
         MVI   OPWVMSP(RCORE),X'E7'                                1868
*   ELSE                            /*                       @Y30DSDP*/
*     IF OPWDUMMY=OFF&(ACBGSR=ON×ACBCBIC=ON) THEN/* NOT A DUMMY D/S
*                                      AND GSR OR CONTROL BLKS IN  1869
*                                      COMMON SPECIFIED?     @ZA31654*/
         B     @RC01867                                            1869
@RF01867 TM    OPWDUMMY(RCORE),B'00010000'                         1869
         BNZ   @RF01869                                            1869
         TM    ACBGSR(RACB),B'00100000'                            1869
         BO    @RT01869                                            1869
         TM    ACBCBIC(RACB),B'00100000'                           1869
         BNO   @RF01869                                            1869
@RT01869 DS    0H                                                  1870
*       OPWVMSP=GSRPOOL;            /* YES, USE SUBPOOL 241  @Y30DSDP*/
         MVI   OPWVMSP(RCORE),X'F1'                                1870
*     ELSE                          /* NO, SET NORMAL POOL   @Y30DSDP*/
*       OPWVMSP=BIBPOOL;            /* SET SUBPOOL           @Y30DSDP*/
         B     @RC01869                                            1871
@RF01869 MVI   OPWVMSP(RCORE),X'FC'                                1871
*   OPWVMLNG=LENGTH(IDABIB);        /* INIT LENGTH           @Y30DSDP*/
@RC01869 DS    0H                                                  1872
@RC01867 MVC   OPWVMLNG(3,RCORE),@CF01739+1                        1872
*   OPWVMTYP=DIRCTREQ;              /* IND DIRECT REQ        @Y30DSDP*/
         MVI   OPWVMTYP(RCORE),X'85'                               1873
*   OPWVMNSL=ON;                    /* INDIC NO CSL          @Z30SSDP*/
         OI    OPWVMNSL(RCORE),B'00001000'                         1874
*   CALL IDA0192M;                  /* GET CORE FOR BIB      @Y30DSDP*/
         L     @15,@CV05673                                        1875
         BALR  @14,@15                                             1875
*   RSTATRTN=IDAR192A;              /* INDIC 192A CONTROL    @Y30DSDP*/
         L     @11,OPWCOMWA(,RCORE)                                1876
         MVC   RSTATRTN(4,@11),@CC05315                            1876
*   IF OPWVMADR=0 THEN              /* IF ERROR              @Y30DSDP*/
         L     @05,OPWVMADR(,RCORE)                                1877
         LTR   @05,@05                                             1877
         BNZ   @RF01877                                            1877
*     DO;                           /*                       @Y30DSDP*/
*       PDPCODE=PP20;               /* SET ERROR CODE        @Y30DSDP*/
         MVI   PDPCODE+280(@11),X'14'                              1879
*       CALL PROBDT;                /* CALL PROB DET         @Y30DSDP*/
         BAL   @14,PROBDT                                          1880
*     END;                          /*                       @Y30DSDP*/
*   OPWBIB=OPWVMADR;                /* INIT PTR TO BIB       @Y30DSDP*/
@RF01877 L     @11,OPWVMADR(,RCORE)                                1882
         ST    @11,OPWBIB(,RCORE)                                  1882
*   BIBID=IDXBIB;                   /* INIT BIB HDR ID       @Y30DSDP*/
         MVI   BIBID(@11),B'00010000'                              1883
*   BIBLEN=OPWVMLNG;                /* INIT BIB LENGTH       @Y30DSDP*/
         L     @05,OPWVMLNG-1(,RCORE)                              1884
         LA    @05,0(,@05)                                         1884
         STH   @05,BIBLEN(,@11)                                    1884
*   BIBASCB=ADDR(ASCB);             /* INIT PTR TO ASCB      @Z30SSDP*/
         L     @05,PSAAOLD                                         1885
         ST    @05,BIBASCB(,@11)                                   1885
*   BIBJOBNM=TIOCNJOB;              /* INIT JOB NAME         @Z30SSDP*/
         L     @05,MWATCB                                          1886
         L     @05,TCBTIO(,@05)                                    1886
         MVC   BIBJOBNM(8,@11),TIOCNJOB(@05)                       1886
*   BIBSTPNM=TIOCSTEP;              /* INIT STEP NAME        @Z30SSDP*/
         MVC   BIBSTPNM(8,@11),TIOCSTEP(@05)                       1887
*   BIBDDNM=TIOEDDNM;               /* INIT DDNAME           @Z30SSDP*/
         L     @05,OPWTIOT(,RCORE)                                 1888
         MVC   BIBDDNM(8,@11),TIOEDDNM(@05)                        1888
*   IF ACBGSR=ON THEN               /* IF GSR THEN           @ZA31740*/
         TM    ACBGSR(RACB),B'00100000'                            1889
         BNO   @RF01889                                            1889
*     BIBVSRTP=CBSVPTR(DXUKEY/K16+1);/* SET BIB              @ZA31740*/
         L     @05,OPWCOMWA(,RCORE)                                1890
         SLR   @15,@15                                             1890
         IC    @15,DXUKEY(,@05)                                    1890
         SRL   @15,4                                               1890
         SLA   @15,3                                               1890
         L     @05,FLCCVT                                          1890
         L     @05,CVTCBSP(,@05)                                   1890
         L     @05,CBSVPTR(@15,@05)                                1890
         ST    @05,BIBVSRTP(,@11)                                  1890
*   RFY                                                            1891
*     RET RSTD;                     /*                       @Y30DSDP*/
@RF01889 DS    0H                                                  1892
*   RET=MWASAVEC;                   /* RESTORE RETURN ADDR   @Y30DSDP*/
         L     RET,MWASAVEC                                        1892
*   RFY                                                            1893
*     RET UNRSTD;                   /*                       @Y30DSDP*/
*   END BLDBIB;                                                    1894
@EL00035 DS    0H                                                  1894
@EF00035 DS    0H                                                  1894
@ER00035 BR    @14                                                 1894
*SYNADLDR:                                                         1895
*                                                                  1895
*   /*****************************************************************/
*   /*                                                               */
*   /* LOAD SYNAD ROUTINE                                    @Z30SSRL*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1895
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @Z30SSRL*/
SYNADLDR DS    0H                                                  1896
*   RFY                                                            1896
*    (R0,                                                          1896
*     R5,                                                          1896
*     RET) RSTD;                    /*                       @Y30DSDP*/
*   R5=RET;                         /* SAVE RETURN ADDR      @Y30DSDP*/
         LR    R5,RET                                              1897
*   RFY                                                            1898
*     RET UNRSTD;                   /*                       @Y30DSDP*/
*   GEN(LOAD EPLOC=(R6),DCB=0);     /* ISSUE LOAD            @Y30DSDP*/
         LOAD EPLOC=(R6),DCB=0
*   EXLSYNP=R0;                     /* PUT IN EXIT LIST      @Y30DSDP*/
         L     @01,ACBEXLST(,RACB)                                 1900
         STCM  R0,15,EXLSYNP(@01)                                  1900
*   RFY                                                            1901
*     RET RSTD;                     /*                       @Y30DSDP*/
*   RET=R5;                         /* RESTORE RETURN ADDR   @Y30DSDP*/
         LR    RET,R5                                              1902
*   RFY                                                            1903
*    (R0,                                                          1903
*     R5,                                                          1903
*     RET) UNRSTD;                  /*                       @Y30DSDP*/
*   END SYNADLDR;                   /*                       @Y30DSDP*/
@EL00036 DS    0H                                                  1904
@EF00036 DS    0H                                                  1904
@ER00036 BR    @14                                                 1904
@PB00036 DS    0H                                                  1904
*   END IDA0192A                    /*                       @Y30DSDP*/
*                                                                  1905
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (LCGPLSSW)                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IDABIB  )                                       */
*/*%INCLUDE SYSLIB  (IGGCAXWA)                                       */
*/*%INCLUDE SYSLIB  (AMCBS   )                                       */
*/*%INCLUDE SYSLIB  (IDACMB  )                                       */
*/*%INCLUDE SYSLIB  (IDACSL  )                                       */
*/*%INCLUDE SYSLIB  (IDACTREC)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IDADSL  )                                       */
*/*%INCLUDE SYSLIB  (IDAERMAP)                                       */
*/*%INCLUDE SYSLIB  (IDAESL  )                                       */
*/*%INCLUDE SYSLIB  (IFGEXLST)                                       */
*/*%INCLUDE SYSLIB  (IDAIDXCB)                                       */
*/*%INCLUDE SYSLIB  (IEZJSCB )                                       */
*/*%INCLUDE SYSLIB  (IDAERRCD)                                       */
*/*%INCLUDE SYSLIB  (IDAOPWRK)                                       */
*/*%INCLUDE SYSLIB  (IDAPDFCD)                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDAPPCDE)                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IDAPSL  )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IKJRB   )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDASFI  )                                       */
*/*%INCLUDE SYSLIB  (IEESMCA )                                       */
*/*%INCLUDE SYSLIB  (IDASSL  )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*/*%INCLUDE SYSLIB  (IDAUPT  )                                       */
*/*%INCLUDE SYSLIB  (IDAVAT  )                                       */
*/*%INCLUDE SYSLIB  (IDAVMT  )                                       */
*/*%INCLUDE SYSLIB  (IDAVVOLL)                                       */
*/*%INCLUDE SYSLIB  (IDAWSHD )                                       */
*/*%INCLUDE SYSLIB  (IDAFOREC)                                       */
*/*%INCLUDE SYSLIB  (IECDSECT)                                       */
*/*%INCLUDE SYSLIB  (IECDSECS)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBX)                                       */
*/*%INCLUDE SYSLIB  (IDAPDPRM)                                       */
*/*%INCLUDE SYSLIB  (IDARTMAC)                                       */
*/*%INCLUDE SYSLIB  (IDAOCECN)                                       */
*/*%INCLUDE SYSLIB  (IDAGMAIN)                                       */
*                                                                  1905
*       ;                                                          1905
@DATA    DS    0H
@CH00105 DC    H'9'
@CH00033 DC    H'12'
@CH02246 DC    H'20'
@DATD    DSECT
         DS    0F
@SA00001 DS    23F
IDA0192A CSECT
         DS    0F
@CF00054 DC    F'1'
@CF00093 DC    F'2'
@CF00096 DC    F'4'
@CF00146 DC    F'5'
@CF00039 DC    F'8'
@CF00042 DC    F'15'
@CF00051 DC    F'16'
@CF00349 DC    F'32'
@CF02568 DC    F'36'
@CF02282 DC    F'84'
@CF02299 DC    F'88'
@CF00035 DC    F'92'
@CF01739 DC    F'108'
@CF01727 DC    F'148'
@CF01745 DC    F'164'
@CF05875 DC    F'280'
@CF05879 DC    F'1588'
@CF05876 DC    F'-16'
@CF05547 DC    F'-8'
@CF05901 DC    F'-7'
@CF05904 DC    F'-6'
@CF05903 DC    F'-5'
@CF05902 DC    F'-4'
@DATD    DSECT
         DS    0D
MWAI     DS    F
MWAVGTTP DS    A
MWAPDPRM DS    FL4
         ORG   MWAPDPRM
MWAPCODE DS    FL1
MWAPFUNC DS    FL1
MWAPSFC  DS    FL1
         ORG   MWAPDPRM+4
MWATCB   DS    A
MWANODS  DS    F
MWAENQPT DS    A
MWAENQLN DS    F
MWAPTRA  DS    A
DISABLCT DS    H
         DS    CL6
MWACSD0  DS    CL8
         ORG   MWACSD0
MWACS0   DS    FL4
MWACSX0  DS    AL4
         ORG   MWACSD0+8
MWACSD1  DS    CL8
         ORG   MWACSD1
MWACS1   DS    FL4
MWACSX1  DS    AL4
         ORG   MWACSD1+8
MWACATPL DS    CL8
         ORG   MWACATPL
@NM00250 DS    AL4
         ORG   @NM00250
MWACTID  DS    FL1
MWACTSFI DS    FL3
         ORG   MWACATPL+4
@NM00251 DS    AL4
         ORG   MWACATPL+8
MWASFI   DS    CL12
MWAGFWRK DS    CL36
         ORG   MWAGFWRK
MWAGFSVE DS    CL16
MWAGFADR DS    AL4
MWAGFR0  DS    FL4
         ORG   MWAGFR0
MWAGFSP  DS    FL1
MWAGFLEN DS    FL3
         ORG   MWAGFWRK+24
MWAGFPRM DS    3F
         ORG   MWAGFWRK+36
MWAFLGS1 DS    BL1
         ORG   MWAFLGS1
MWAOPWRK DS    BL1
MWAVSRT  EQU   MWAFLGS1+0
MWARSMAC EQU   MWAFLGS1+0
MWAOFAIL EQU   MWAFLGS1+0
MWADAMBL EQU   MWAFLGS1+0
MWAVATSW EQU   MWAFLGS1+0
MWAEXIT  EQU   MWAFLGS1+0
         ORG   MWAFLGS1+1
         DS    CL3
MWASAVER DS    CL20
         ORG   MWASAVER
MWASAVEA DS    AL4
MWASAVEB DS    AL4
MWASAVEC DS    AL4
MWASAVED DS    AL4
MWASAVEE DS    AL4
         ORG   MWASAVER+20
MWAMACRF DS    CL2
         DS    CL2
MWASWSAV DS    CL8
         ORG   MWASWSAV
MWASWPTR DS    AL4
MWASWAP  DS    FL4
         ORG   MWASWSAV+8
MWAMODNM DS    CL8
         ORG   MWAMODNM
MWACOMNM DS    CL6
MWAMODID DS    CL2
         ORG   MWAMODNM+8
MWARNAME DS    CL9
         DS    CL3
MWAEQPRM DS    CL20
         ORG   MWAEQPRM
MWAEQTCB DS    AL4
MWAEQENT DS    CL16
         ORG   MWAEQENT
MWAEQOP1 DS    BL1
         ORG   MWAEQOP1
MWAEQEND DS    BL1
MWAEQNEW EQU   MWAEQOP1+0
@NM00252 EQU   MWAEQOP1+0
MWAEQDIR EQU   MWAEQOP1+0
         ORG   MWAEQENT+1
MWAEQRNM DS    FL1
MWAEQOP2 DS    BL1
MWAEQRET DS    FL1
MWAEQQAD DS    AL4
MWAEQRAD DS    AL4
MWAEQUCB DS    AL4
         ORG   MWAEQPRM+20
MWARCD62 DS    CL32
         ORG   MWARCD62
MWARCNBR DS    FL1
@NM00253 DS    CL3
MWARCACB DS    AL4
MWARCDSN DS    AL4
MWARCIND DS    BL4
         ORG   MWARCIND
MWARCOOK DS    BL1
MWARCSVL EQU   MWARCIND+0
MWARCCRA EQU   MWARCIND+0
         ORG   MWARCD62+16
MWARCCSN DS    AL4
MWARCVSL DS    AL4
MWARCTIO DS    2A
         ORG   MWARCD62+32
IDA0192A CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV05653 DC    V(IDA0192F)
@CV05659 DC    V(IDA0192C)
@CV05673 DC    V(IDA0192M)
@CV05701 DC    V(IDA0192P)
@CV05778 DC    V(IDA0192S)
         DS    0D
@CC05488 DC    C'AMBLCHAIN'
@CC05707 DC    C'NULLFILE '
@CC01721 DC    C' IDADSL '
@CC01769 DC    C' IDAESL '
@CC03556 DC    C' IDASSL '
@CC05493 DC    C'SYSVSAM '
@CC05705 DC    C'IDAOPWRK'
@CC05502 DC    C'IDA019'
@CC05274 DC    C'VGTT'
@CC05315 DC    C'192A'
@CC05319 DC    C'192C'
@CC05329 DC    C'192P'
@CC05331 DC    C'192S'
@CC05512 DC    C'  '
NONAME   DC    X'0000000000000000'
NORMLIST DS    CL7
         ORG   NORMLIST
@NM00242 DC    AL1(3)
@NM00243 DC    CL2'L1'
@NM00244 DC    CL2'  '
@NM00245 DC    CL2'R7'
         ORG   NORMLIST+7
ICILIST  DS    CL3
         ORG   ICILIST
@NM00246 DC    AL1(1)
@NM00247 DC    CL2'L2'
         ORG   ICILIST+3
DUMYLIST DS    CL3
         ORG   DUMYLIST
@NM00248 DC    AL1(1)
@NM00249 DC    CL2'RD'
         ORG   DUMYLIST+3
IDAERMAP DC    3AL1(0)
         DC    AL1(132)
         DC    15AL1(0)
         DC    AL1(136)
         DC    AL1(0)
         DC    AL1(184)
         DC    5AL1(0)
         DC    AL1(180)
         DC    3AL1(0)
         DC    AL1(148)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(144)
         DC    AL1(148)
         DC    AL1(196)
         DC    AL1(100)
         DC    AL1(152)
         DC    AL1(160)
         DC    2AL1(0)
         DC    AL1(160)
         DC    AL1(96)
         DC    AL1(192)
         DC    AL1(160)
         DC    AL1(160)
         DC    AL1(224)
         DC    AL1(176)
         DC    AL1(0)
         DC    AL1(168)
         DC    AL1(0)
         DC    AL1(160)
         DC    AL1(0)
         DC    AL1(116)
         DC    AL1(0)
         DC    AL1(108)
         DC    AL1(104)
         DC    AL1(240)
         DC    7AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(188)
         DC    AL1(0)
         DC    AL1(188)
         DC    AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(232)
         DC    3AL1(0)
         DC    AL1(160)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(236)
         DC    AL1(236)
         DC    AL1(0)
         DC    5AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(164)
         DC    3AL1(0)
         DC    AL1(220)
         DC    3AL1(0)
         DC    AL1(228)
         DC    3AL1(0)
         DC    AL1(184)
         DC    3AL1(0)
         DC    AL1(208)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(204)
         DC    3AL1(0)
         DC    AL1(212)
         DC    3AL1(0)
         DC    AL1(216)
         DC    7AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(244)
         DC    3AL1(0)
         DC    AL1(200)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(204)
         DC    AL1(160)
         DC    AL1(160)
         DC    58AL1(0)
IDA0192A CSECT
         DS    0D                       START ON DOUBLE WORD BOUNDARY
PATCH2A  DC    ((*-IDA0192A)/20)X'00'   PATCH AREA
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA0192A CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
MWAXAMBL EQU   @06
MWARNMPT EQU   @05
MWAJ     EQU   @11
MWADWADJ EQU   @05
LOCKSAVC EQU   @08
LOCKSAVB EQU   @07
LOCKSAVA EQU   @06
MWADEBNX EQU   @07
MWADEBAD EQU   @06
MWAVGTCS EQU   @05
MWAPTRB  EQU   @06
MWADEB   EQU   @05
RCORE    EQU   @04
R0       EQU   @00
R1       EQU   @01
RACB     EQU   @02
RBASEA   EQU   @03
RBASEB   EQU   @12
R12      EQU   @12
R13      EQU   @13
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
RUCB     EQU   @10
RDEB     EQU   @11
R11      EQU   @11
RET      EQU   @14
RETCODE  EQU   @15
R15      EQU   @15
RTIOT    EQU   @09
R10      EQU   @10
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBINRTN EQU   ACBCOMN+8
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBKEY   EQU   ACBMACR1
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBUBF   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBRST   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBBSTNO EQU   ACBCOMN+14
ACBSTRNO EQU   ACBCOMN+15
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBLSR   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBCRNCK EQU   ACBCROPS
ACBCRNRE EQU   ACBCROPS
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBTIOT  EQU   ACBDDNM
ACBAMETH EQU   ACBDDNM+3
ACBDEB   EQU   ACBDDNM+5
ACBOFLGS EQU   ACBCOMN+48
ACBOPEN  EQU   ACBOFLGS
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBERFLG EQU   ACBCOMN+49
ACBINFLG EQU   ACBCOMN+50
ACBINFL1 EQU   ACBINFLG
ACBCAT   EQU   ACBINFL1
ACBSCRA  EQU   ACBINFL1
ACBUCRA  EQU   ACBINFL1
ACBVVIC  EQU   ACBINFL1
ACBSDS   EQU   ACBVVIC
ACBINFL2 EQU   ACBINFLG+1
ACBCBIC  EQU   ACBINFL2
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
ACBUAPTR EQU   ACBCOMN+64
IDAAMB   EQU   0
AMBPH    EQU   IDAAMB+12
AMBCACB  EQU   IDAAMB+16
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBCDSN  EQU   IDAAMB+32
AMBTIOT  EQU   IDAAMB+40
AMBINFL  EQU   IDAAMB+42
AMBUPX   EQU   AMBINFL
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBPUG   EQU   AMBFLG2
AMBEOVPT EQU   IDAAMB+56
AMBWKA   EQU   IDAAMB+60
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
IDAAMBL  EQU   0
AMBLPCHN EQU   IDAAMBL
AMBLSCHN EQU   IDAAMBL+4
AMBLACB  EQU   IDAAMBL+8
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLVRT  EQU   AMBLVC
AMBLENO  EQU   AMBLVC+1
AMBLTYPE EQU   IDAAMBL+30
AMBLQ2   EQU   IDAAMBL+31
AMBLSHAR EQU   IDAAMBL+33
AMBLPRIM EQU   AMBLSHAR
AMBLFLG1 EQU   IDAAMBL+35
AMBLVVIC EQU   AMBLFLG1
AMBLDUMY EQU   AMBLFLG1
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
AMBLBIB  EQU   IDAAMBL+60
AMBLCMB  EQU   IDAAMBL+64
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDNEST  EQU   IDAAMDSB+4
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBRSM  EQU   ASCB+52
ASCBRSMF EQU   ASCBRSM
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
ASCBVGTT EQU   ASCB+184
IDABIB   EQU   0
BIBHDR   EQU   IDABIB
BIBID    EQU   BIBHDR
BIBFLG1  EQU   BIBHDR+1
BIBLEN   EQU   BIBHDR+2
BIBVMT   EQU   IDABIB+12
BIBDACB  EQU   IDABIB+16
BIBPRSPH EQU   IDABIB+28
BIBWSHD  EQU   IDABIB+44
BIBCSL   EQU   IDABIB+48
BIBVGTT  EQU   IDABIB+56
BIBRTNS  EQU   IDABIB+60
BIBINTRF EQU   BIBRTNS
BIBJOBNM EQU   IDABIB+76
BIBSTPNM EQU   IDABIB+84
BIBDDNM  EQU   IDABIB+92
BIBASCB  EQU   IDABIB+100
BIBVSRTP EQU   IDABIB+104
IGGCAXWA EQU   0
CAXFLGS  EQU   IGGCAXWA+8
CAXFLG2  EQU   IGGCAXWA+9
CAXFLG3  EQU   IGGCAXWA+10
CAXACB   EQU   IGGCAXWA+24
CAXUCB   EQU   IGGCAXWA+28
CAXCCR   EQU   IGGCAXWA+32
CAXCNAM  EQU   IGGCAXWA+52
CAXOPLST EQU   IGGCAXWA+96
COPTS    EQU   CAXOPLST
CAXCCA   EQU   IGGCAXWA+104
CAXECB   EQU   IGGCAXWA+120
CAXECBHB EQU   CAXECB
CAXHRPLW EQU   IGGCAXWA+128
AMCBS    EQU   0
CBSCMP   EQU   AMCBS+16
CBSVSRT  EQU   AMCBS+32
CBSVPTR  EQU   CBSVSRT+4
IDACMB   EQU   0
CMBFLGS  EQU   IDACMB+4
CMBPTRS  EQU   IDACMB+8
IDACSL   EQU   0
CSLR0    EQU   IDACSL
CSLENTRY EQU   0
CSLFREMN EQU   CSLENTRY
CSLFLAGS EQU   CSLENTRY+8
AMBWORK  EQU   0
CTINFO   EQU   AMBWORK+14
CTATTRA  EQU   CTINFO
CTATTRB  EQU   CTINFO+1
CTSHROP  EQU   CTINFO+2
CTAUTH   EQU   CTINFO+3
CTDEVTYP EQU   CTINFO+10
CTDEV2   EQU   CTDEVTYP+1
CTVOLENT EQU   0
CTVOLFLG EQU   CTVOLENT
CTKEYENT EQU   0
CTKEYFLG EQU   CTKEYENT
CTEXTENT EQU   0
CTABSBEG EQU   CTEXTENT+2
CTABSEND EQU   CTEXTENT+6
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTSVDCB EQU   CVTMAP+84
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTSMCA  EQU   CVTMAP+196
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTCBSP  EQU   CVTMAP+256
CVTPURG  EQU   CVTMAP+260
CVTAMFF  EQU   CVTMAP+264
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBTCBB  EQU   DEBTCBAD+1
DEBDEBAD EQU   DEBBASIC+4
DEBDEBB  EQU   DEBDEBAD+1
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBXTNIN EQU   DEBFLGS1
DEBUSRPG EQU   DEBBASIC+16
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBDEBID EQU   DEBPROTG
DEBDCBB  EQU   DEBDCBAD+1
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBLNGTH EQU   DEBPREFX+12
DEBAMTYP EQU   DEBPREFX+13
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
DEBXCDCB EQU   DEBXFLG1
DEBXDBPR EQU   DEBXTN+12
IDADSL   EQU   0
DSLSUBPL EQU   IDADSL
DSLLENTH EQU   IDADSL+1
DSLID    EQU   IDADSL+4
DSLNXPTR EQU   IDADSL+12
DSLACTEN EQU   IDADSL+16
DSLENTRY EQU   IDADSL+20
DSLFLG   EQU   DSLENTRY
DSLDEBAD EQU   DSLENTRY+1
IDAESL   EQU   0
ESLSUBPL EQU   IDAESL
ESLLENTH EQU   IDAESL+1
ESLID    EQU   IDAESL+4
ESLNXPTR EQU   IDAESL+12
ESLACTEN EQU   IDAESL+16
ESLENTRY EQU   IDAESL+20
ESLRNAME EQU   ESLENTRY+1
IFGEXLST EQU   0
EXLCOMN  EQU   IFGEXLST
EXLLEN   EQU   EXLCOMN+2
EXLEODF  EQU   EXLCOMN+5
EXLSYNF  EQU   EXLCOMN+10
EXLSYNP  EQU   EXLCOMN+11
EXLLERF  EQU   EXLCOMN+15
EXLSCIPF EQU   EXLCOMN+20
EXLUPADF EQU   EXLSCIPF
EXLSCIPS EQU   EXLUPADF
EXLSCIPA EQU   EXLUPADF
EXLSCIPK EQU   EXLUPADF
EXLSCIPP EQU   EXLCOMN+21
EXLLGNF  EQU   EXLCOMN+25
EXLJRNF  EQU   EXLCOMN+30
EXLOPNF  EQU   EXLCOMN+35
IFGEXLEF EQU   0
EXLENTRY EQU   IFGEXLEF
EXLFLAG  EQU   EXLENTRY
EXLENFL  EQU   EXLFLAG
EXLEXITP EQU   EXLENTRY+1
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBSHR  EQU   JSCBSEC1+8
JSCBDCB  EQU   JSCBSEC1+36
JSCBSTEP EQU   JSCBSEC1+40
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBEND1 EQU   IEZJSCB+260
IDAOPWRK EQU   0
OPWSUBPL EQU   IDAOPWRK
OPWLENTH EQU   IDAOPWRK+1
OPWID    EQU   IDAOPWRK+4
OPWFLGS1 EQU   IDAOPWRK+12
OPWCAT   EQU   OPWFLGS1
OPWSCRA  EQU   OPWFLGS1
OPWVVIC  EQU   OPWFLGS1
OPWSDS   EQU   OPWVVIC
OPWFLGS2 EQU   IDAOPWRK+13
OPWUCRA  EQU   OPWFLGS2
OPWDUMMY EQU   OPWFLGS2
OPWFLGS3 EQU   IDAOPWRK+14
OPWDAVAT EQU   OPWFLGS3
OPWPUPGR EQU   OPWFLGS3
OPWUPGOP EQU   OPWFLGS3
OPWFLGS4 EQU   IDAOPWRK+15
OPWBIB   EQU   IDAOPWRK+16
OPWCOMWA EQU   IDAOPWRK+20
OPWIDF   EQU   IDAOPWRK+24
OPWCACB  EQU   OPWIDF
OPWDCI   EQU   OPWIDF+4
OPWQ     EQU   OPWIDF+7
OPWDDC   EQU   OPWQ
OPWGSR   EQU   OPWQ
OPWLSR   EQU   OPWQ
OPWFSTP  EQU   OPWQ
OPWUBF   EQU   OPWQ
OPWKSDS  EQU   OPWQ
OPWESDS  EQU   OPWQ
OPWDFR   EQU   OPWQ
OPWVSMPL EQU   IDAOPWRK+32
OPWVMANC EQU   OPWVSMPL
OPWVMSP  EQU   OPWVSMPL+4
OPWVMLNG EQU   OPWVSMPL+5
OPWVMADR EQU   OPWVSMPL+8
OPWVMTYP EQU   OPWVSMPL+12
OPWVMFLG EQU   OPWVSMPL+13
OPWVMKE5 EQU   OPWVMFLG
OPWVMDXK EQU   OPWVMFLG
OPWVMNSL EQU   OPWVMFLG
OPWVSMWA EQU   IDAOPWRK+48
OPWVGSPL EQU   OPWVSMWA+40
OPWVLSAV EQU   OPWVSMWA+80
OPWVFMPL EQU   OPWVSMWA+88
OPWSAVE  EQU   IDAOPWRK+144
OPWCSL   EQU   OPWSAVE
OPWESL   EQU   OPWSAVE+4
OPWPSL   EQU   OPWSAVE+8
OPWDSL   EQU   OPWSAVE+12
OPWSSL   EQU   OPWSAVE+16
OPWCURPT EQU   IDAOPWRK+164
OPWBCON  EQU   IDAOPWRK+176
OPWPCON  EQU   IDAOPWRK+180
OPWBAMBL EQU   IDAOPWRK+184
OPWPAMBL EQU   IDAOPWRK+188
OPWQ2    EQU   IDAOPWRK+198
OPWCBIC  EQU   OPWQ2
OPWCATTR EQU   IDAOPWRK+199
OPWUPT   EQU   IDAOPWRK+200
OPWUACB  EQU   IDAOPWRK+204
OPWDTWRK EQU   IDAOPWRK+212
OPWCTCB  EQU   IDAOPWRK+220
OPWJSTCB EQU   IDAOPWRK+224
OPWTIOT  EQU   IDAOPWRK+228
OPWSTRNO EQU   IDAOPWRK+241
OPWBSTRN EQU   IDAOPWRK+242
OPWERMAP EQU   IDAOPWRK+308
OPWBSECL EQU   IDAOPWRK+568
OPWBDTCI EQU   OPWBSECL+1
OPWBIXCI EQU   OPWBSECL+5
OPWPTAIX EQU   IDAOPWRK+576
OPWPDTCI EQU   OPWPTAIX+1
OPWPIXCI EQU   OPWPTAIX+5
OPWNOUPG EQU   IDAOPWRK+584
OPWUPAIX EQU   IDAOPWRK+588
OPWUDTCI EQU   OPWUPAIX+1
OPWUIXCI EQU   OPWUPAIX+5
OPWCURCL EQU   0
OPWCFLG1 EQU   OPWCURCL
OPWFLG2  EQU   OPWCURCL+4
OPWDOPEN EQU   OPWFLG2
OPWIOPEN EQU   OPWFLG2
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHFLG2  EQU   IDAPLH+3
PLHEFLGS EQU   IDAPLH+4
PLHFLG3  EQU   IDAPLH+6
PLHAFLGS EQU   IDAPLH+7
PLHACB   EQU   IDAPLH+8
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHRSCS  EQU   IDAPLH+43
PLHDIOB  EQU   IDAPLH+76
PLHCHAIN EQU   IDAPLH+112
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHKEYPT EQU   IDAPLH+248
PLHTMRPL EQU   IDAPLH+265
PLHEND   EQU   IDAPLH+280
IDAPSL   EQU   0
PSLNXPTR EQU   IDAPSL+12
PSLENTRY EQU   IDAPSL+16
PSLFLG   EQU   PSLENTRY+4
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
XRBPSW   EQU   RBOPSW
RBOPSWB2 EQU   XRBPSW+1
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
RBPREFIX EQU   0
RBRSV019 EQU   RBPREFIX+14
RBRSV028 EQU   RBPREFIX+15
RBRSV041 EQU   RBPREFIX+27
RBRSV054 EQU   RBPREFIX+39
RBRTOPSW EQU   RBPREFIX+40
RBRTPSW2 EQU   RBRTOPSW+8
RBRTICIL EQU   RBRTPSW2
RBFLAGS1 EQU   RBPREFIX+56
RBINTCDA EQU   RBPREFIX+61
RBSECT   EQU   0
RBPPSAV  EQU   RBSECT
@NM00139 EQU   RBSECT+10
@NM00140 EQU   @NM00139
RBTRSVRB EQU   @NM00140
@NM00142 EQU   @NM00139+1
RBETXR   EQU   @NM00142
RBEP     EQU   RBSECT+12
RBPGMQ   EQU   RBSECT+24
@NM00149 EQU   RBSECT+28
@NM00150 EQU   @NM00149
IRBEND   EQU   RBSECT+96
@NM00153 EQU   RBSECT+96
RBRSV138 EQU   @NM00153+7
RBSCBB   EQU   RBSECT+144
RBSPARM  EQU   RBSCBB+8
RBSFLGS1 EQU   RBSPARM
RBSIOPRC EQU   RBSFLGS1
RBSOWNR  EQU   RBSCBB+12
RBSFLGS2 EQU   RBSOWNR
RBSDATA  EQU   RBSCBB+16
RBSFLG3  EQU   RBSDATA
RBRSV150 EQU   RBSECT+167
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IDASFI   EQU   0
SFIRETCD EQU   IDASFI+4
SMCABASE EQU   0
SMCAOPT  EQU   SMCABASE
SMCADSA  EQU   SMCAOPT
SMCAMISC EQU   SMCABASE+1
SMCAUSER EQU   SMCAMISC
SMCAMAN  EQU   SMCAMISC
SMCABUF  EQU   SMCABASE+12
SMCAPSTA EQU   SMCABASE+30
SMCAPLBL EQU   SMCABASE+34
SMCASTA  EQU   SMCABASE+46
SMCAALBL EQU   SMCABASE+50
SMCAENTY EQU   SMCABASE+80
SMCAENDI EQU   SMCAENTY
SMCAFOPT EQU   SMCABASE+82
SMCASWA  EQU   SMCABASE+104
SMCAASCB EQU   SMCABASE+120
SMCAPGIN EQU   SMCABASE+136
SMCAPGOT EQU   SMCABASE+140
IDASSL   EQU   0
SSLSUBPL EQU   IDASSL
SSLLENTH EQU   IDASSL+1
SSLID    EQU   IDASSL+4
SSLNXPTR EQU   IDASSL+12
SSLACEN  EQU   IDASSL+16
SSLENTRY EQU   IDASSL+20
SSLSWPTR EQU   SSLENTRY
SSLSWAP  EQU   SSLENTRY+4
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBRBP   EQU   TCB
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBDEB   EQU   TCB+8
TCBTIO   EQU   TCB+12
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBTCTB  EQU   TCBTCT+1
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
TIOT1    EQU   0
TIOCNJOB EQU   TIOT1
TIOCSTEP EQU   TIOT1+8
TIOENTRY EQU   0
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOEDDNM EQU   TIOENTRY+4
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
TIOEFSRT EQU   TIOENTRY+17
POOLSTAR EQU   TIOENTRY+20
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00173 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
IDAUPT   EQU   0
UPTHDR   EQU   IDAUPT
UPTFLG0  EQU   UPTHDR+1
UPTNOENT EQU   IDAUPT+13
UPTSA    EQU   IDAUPT+16
UPTAXENT EQU   IDAUPT+88
UPTRPL   EQU   UPTAXENT
UPTFLG1  EQU   UPTAXENT+4
UPTF1NOP EQU   UPTFLG1
IDAVAT   EQU   0
VATHDR   EQU   IDAVAT
VATNEXT  EQU   IDAVAT+4
VATVSRT  EQU   IDAVAT+8
VATPAMBL EQU   IDAVAT+16
VATVC    EQU   IDAVAT+20
VATVRT   EQU   VATVC
VATNAE   EQU   IDAVAT+24
VATAMBL  EQU   IDAVAT+28
IDAVMT   EQU   0
VMTHDR   EQU   IDAVMT
VMTLEN   EQU   VMTHDR+2
VMTNXT   EQU   IDAVMT+4
VMTNOVOL EQU   IDAVMT+8
VMTDEV   EQU   IDAVMT+13
VMTVOL   EQU   IDAVMT+16
VMTVFLG1 EQU   VMTVOL+4
VMTOPEN  EQU   VMTVFLG1
VMTUCB   EQU   VMTVOL+12
IDAVVOLL EQU   0
@NM00181 EQU   IDAVVOLL
VVOLLERR EQU   IDAVVOLL+12
VVOLLENT EQU   IDAVVOLL+36
@NM00184 EQU   VVOLLENT+4
IDAWSHD  EQU   0
WSHDID   EQU   IDAWSHD
WSHDPOOL EQU   IDAWSHD+1
WSHDLEN  EQU   IDAWSHD+2
WSHDACHN EQU   IDAWSHD+4
WSHDSLT  EQU   IDAWSHD+28
WSHDSAD  EQU   WSHDSLT
@NM00185 EQU   WSHDSAD
WSHDSGMW EQU   WSHDSLT+4
WSHDSFM  EQU   WSHDSGMW
WSHDSFLG EQU   WSHDSGMW+10
FORCORE  EQU   0
DXDSCB   EQU   FORCORE
DXJBF    EQU   FORCORE+100
DXIOB    EQU   FORCORE+280
DXDAADDR EQU   FORCORE+312
DXDCB    EQU   FORCORE+320
DXCCW    EQU   FORCORE+368
DXCCW5   EQU   DXCCW+32
DXCCW8   EQU   DXCCW+56
DXCCW12  EQU   DXCCW+88
DXXCTL   EQU   FORCORE+472
DXVOLSR  EQU   FORCORE+500
DXVOLSR1 EQU   DXVOLSR
DXVOLSR2 EQU   DXVOLSR+6
DXVOLSR3 EQU   DXVOLSR+12
DXRESSW  EQU   FORCORE+524
DXUKEY   EQU   FORCORE+526
DXDEBXAD EQU   FORCORE+552
DXTIOTAD EQU   FORCORE+556
DXUCBSAV EQU   FORCORE+564
DXUDCBAD EQU   FORCORE+568
DXUACBAD EQU   DXUDCBAD+1
DXPDCBAD EQU   FORCORE+572
DXPACBAD EQU   DXPDCBAD+1
DXATCOM1 EQU   FORCORE+588
DXATGENS EQU   DXATCOM1
DXATVGIV EQU   DXATGENS
DXATOUTA EQU   DXATCOM1+2
DXATDACC EQU   DXATCOM1+3
DXATCOM2 EQU   FORCORE+592
DXATEOV  EQU   DXATCOM2
DXATOPEN EQU   DXATCOM2+1
DXATALL  EQU   DXATCOM2+2
DXATEXC1 EQU   FORCORE+604
DXATEXB1 EQU   DXATEXC1
DXATEXC2 EQU   FORCORE+608
DSECTSIZ EQU   FORCORE+612
IECPREFX EQU   0
IECEXTPR EQU   IECPREFX+32
IECWTGTB EQU   IECEXTPR+72
IECUPRML EQU   IECEXTPR+80
IECRESWA EQU   IECEXTPR+84
RWARESWA EQU   0
RWAPREFX EQU   RWARESWA
USERPRML EQU   0
IECRRPL  EQU   0
RRPLIST  EQU   IECRRPL
RRFUNCTN EQU   RRPLIST
RRFLAGS1 EQU   RRPLIST+1
RRFLAGS2 EQU   RRPLIST+2
RRFLAGS3 EQU   RRPLIST+3
RRXRETRY EQU   RRPLIST+12
DSMADTRL EQU   0
DSMADTW1 EQU   DSMADTRL
DSMADTB1 EQU   DSMADTW1
DSMADTB2 EQU   DSMADTW1+1
WTGTABLE EQU   0
WTGWTOPR EQU   WTGTABLE
WTG      EQU   0
WTGAREA  EQU   WTG
WTGMODNM EQU   WTGAREA
WTGPREFX EQU   WTGAREA+16
WTGPATHS EQU   WTG+30
WTGENTRY EQU   0
WTGIDTTR EQU   WTGENTRY
APPNMTBL EQU   0
APPENTRY EQU   APPNMTBL+4
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCAMCRO EQU   JFCBFRID
JFCAMSTR EQU   JFCBFRID+2
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
JFCBX    EQU   0
IDAPDPRM EQU   0
PDPCALL  EQU   IDAPDPRM
PDPCODE  EQU   IDAPDPRM+1
PDPFUNC  EQU   IDAPDPRM+2
PDPSFC   EQU   IDAPDPRM+3
PDPACB   EQU   IDAPDPRM+4
PDPTIOT  EQU   IDAPDPRM+12
PDPCLSNM EQU   IDAPDPRM+20
PDPDSN   EQU   IDAPDPRM+24
PDPCTACB EQU   IDAPDPRM+28
PDPDSTYP EQU   IDAPDPRM+33
PDPMSGFL EQU   IDAPDPRM+34
PDPSFI   EQU   IDAPDPRM+36
IDAVGTT  EQU   0
VGTTID   EQU   IDAVGTT
VGTTTYPE EQU   IDAVGTT+4
VGTTGSR  EQU   VGTTTYPE
VGTTCTLG EQU   VGTTTYPE
VGTTOPEN EQU   VGTTTYPE
VGTTCBIC EQU   VGTTTYPE
VGTTGSRK EQU   IDAVGTT+6
VGTTSP   EQU   IDAVGTT+7
VGTTSIZE EQU   IDAVGTT+8
VGTTNEXT EQU   IDAVGTT+12
VGTTBIB  EQU   IDAVGTT+16
VGTTVUSE EQU   IDAVGTT+20
ENQPARML EQU   0
ENQENTRY EQU   ENQPARML+4
ENQOPT1  EQU   ENQENTRY
ENQEND   EQU   ENQOPT1
ENQRLEN  EQU   ENQENTRY+1
ENQOPT2  EQU   ENQENTRY+2
ENQSYS   EQU   ENQOPT2
ENQQNADR EQU   ENQENTRY+4
ENQRNADR EQU   ENQENTRY+8
ENQRNAME EQU   0
ENQRNCI  EQU   ENQRNAME
ENQRNACB EQU   ENQRNAME+3
ENQRNIND EQU   ENQRNAME+7
LDLSTMAP EQU   0
LDLNOENT EQU   LDLSTMAP
LDLID    EQU   LDLSTMAP+1
MODADDR  EQU   0
SWAPWORD EQU   0
SVEHDR   EQU   0
SVESUBPL EQU   SVEHDR
SVELENTH EQU   SVEHDR+1
SVEID    EQU   SVEHDR+4
SVENXPTR EQU   SVEHDR+12
IDAVATCB EQU   0
VATCBSTP EQU   IDAVATCB
MWACSVRP EQU   0
PLHKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
UCBBGN   EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBFBYT EQU   JSCBSEC3+10
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCSCT   EQU   JSCBSEC3+68
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
FLC      EQU   PSA
PSARSVTE EQU   PSARSVT
RBSECS03 EQU   RBEP
RBCDE    EQU   RBSECS03
RBCDFLGS EQU   RBCDE
RBSECS05 EQU   RBPGMQ
RBSQE    EQU   RBSECS05
RBSECS06 EQU   RBPGMQ
RBIQE    EQU   RBSECS06
RBSECS07 EQU   RBPGMQ
RBIQE2   EQU   RBSECS07
RBSECS08 EQU   IRBEND
RBSECS09 EQU   IRBEND
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
UCBOBS01 EQU   UCBDEV
UCBVOLI  EQU   UCBOBS01+4
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00172 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
DXXWTG   EQU   DSECTSIZ
DXXAREA  EQU   DSECTSIZ+4
DXXMODNM EQU   DXXAREA
DXXLNG   EQU   DXXAREA+29
DXXENTRY EQU   DXXAREA+32
DXXIDTTR EQU   DXXENTRY
DXREGSAV EQU   DXCCW8
DXREG1   EQU   DXREGSAV+28
DXIDENT  EQU   DXCCW12
DXRETMOD EQU   DXIDENT+2
@NM00215 EQU   DXXCTL
DXSAVMOD EQU   @NM00215+2
@NM00216 EQU   DXRESSW
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
JFCBSPNM EQU   JFCBS001+45
JFCBFLG3 EQU   JFCBSPNM
PDWLIST  EQU   FORCORE
PDWWORK  EQU   DXDCB
IDARRPL  EQU   DXATCOM1
IDARRFLG EQU   IDARRPL+1
IDARSTAT EQU   DXATEXC1
RSTAT    EQU   IDARSTAT
RSTATCRO EQU   RSTAT+1
RSTATOP2 EQU   RSTAT+2
RSTATCSA EQU   RSTATOP2
IDARRTN  EQU   DXATEXC2
RSTATRTN EQU   IDARRTN
PSW      EQU   RBOPSW
@NM00235 EQU   PSW+1
DUMMYPTR EQU   OPWSAVE
ERRMAP   EQU   IDAERMAP
@NM00240 EQU   CVTAMFF
DXBTAMX  EQU   DXREG1
DXDSNAME EQU   DXCCW5
IDAESPL  EQU   DXATCOM1
IDARTSA  EQU   DXJBF
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
ACVTDBUG EQU   @NM00240+2
@NM00241 EQU   @NM00240
@NM00237 EQU   PSW+2
@NM00236 EQU   @NM00235
PROTKEY  EQU   @NM00235
@NM00234 EQU   PSW
@NM00233 EQU   RSTAT+3
@NM00232 EQU   RSTATOP2
IDARCURS EQU   RSTATCRO
IDARCRCU EQU   RSTATCRO
IDARRSTR EQU   RSTATCRO
IDARCKPT EQU   RSTATCRO
RSTATOPT EQU   RSTAT
@NM00231 EQU   IDARRPL+2
@NM00230 EQU   IDARRFLG
RRPLVSAM EQU   IDARRFLG
@NM00229 EQU   IDARRFLG
@NM00228 EQU   IDARRPL
PDWORKSP EQU   PDWWORK+88
PDWERRCD EQU   PDWWORK+84
PDWMSGPT EQU   PDWWORK+80
PDWSAVED EQU   PDWWORK+76
PDWSAVEC EQU   PDWWORK+72
PDWSAVEB EQU   PDWWORK+68
PDWSAVEA EQU   PDWWORK+64
PDWSAVE  EQU   PDWWORK
WTPROUT  EQU   PDWLIST+75
WTPMSG   EQU   PDWLIST+4
WTPFLGS  EQU   PDWLIST+2
WTPLNGTH EQU   PDWLIST
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBRV08 EQU   JFCBSPNM+1
JFCBRV07 EQU   JFCBFLG3
JFCBRV06 EQU   JFCBFLG3
JFCBRV05 EQU   JFCBFLG3
JFCBRV04 EQU   JFCBFLG3
JFCBRV03 EQU   JFCBFLG3
JFCBRV02 EQU   JFCBFLG3
JFCBEXP  EQU   JFCBFLG3
JFCDQDSP EQU   JFCBFLG3
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCBADSP EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBMSGP EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXAD EQU   JFCBS001+31
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00220 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNVOL EQU   JFCUCSEG+9
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00219 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCORGIS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00218 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
DXRESIND EQU   @NM00216
DXSAVOFF EQU   @NM00215+7
DXSAVADR EQU   DXSAVMOD+2
DXSAVID  EQU   DXSAVMOD
DXABCODE EQU   @NM00215
DXRETCOD EQU   DXIDENT+7
DXRETTTR EQU   DXRETMOD+2
DXRETID  EQU   DXRETMOD
DXCALLID EQU   DXIDENT
DXREG0   EQU   DXREGSAV+24
DXREGE   EQU   DXREGSAV+20
DXREGD   EQU   DXREGSAV+16
DXREGC   EQU   DXREGSAV+12
DXREGB   EQU   DXREGSAV+8
DXREGA   EQU   DXREGSAV+4
DXREG9   EQU   DXREGSAV
DXXEND   EQU   DXXAREA+48
DXXLAST  EQU   DXXAREA+40
DXXCORE  EQU   DXXENTRY+5
DXETTR   EQU   DXXIDTTR+2
DXEID    EQU   DXXIDTTR
DXXPATHS EQU   DXXAREA+30
DXOPCLSW EQU   DXXLNG
DXXTXTLN EQU   DXXAREA+27
DXXMODSZ EQU   DXXAREA+24
DXXATTRB EQU   DXXAREA+22
@NM00200 EQU   DXXAREA+20
DXXPREFX EQU   DXXAREA+16
@NM00199 EQU   DXXAREA+12
DXXMODEP EQU   DXXAREA+8
DXXMODID EQU   DXXMODNM+6
@NM00198 EQU   DXXMODNM
DXXWTOPR EQU   DXXWTG
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00172
UCBSKPFG EQU   @NM00172
UCBRIPND EQU   @NM00172
UCBRTIAC EQU   @NM00172
UCBRSV79 EQU   @NM00172
UCBRSV78 EQU   @NM00172
UCBRSV77 EQU   @NM00172
UCBOLTEP EQU   @NM00172
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBDQDSP EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00171 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVTOC  EQU   UCBOBS01
TIOUCBP  EQU   TIOEDEVE+1
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
RBRSV161 EQU   RBSECS09+64
RBSIRBWA EQU   RBSECS09
RBIQEWRK EQU   RBSECS08+4
RBNEXAV  EQU   RBSECS08
RBIQEA   EQU   RBIQE2
RBIQE1   EQU   RBIQE+1
RBUSE    EQU   RBIQE
RBSQEA   EQU   RBSQE+1
@NM00154 EQU   RBSQE
RBCDE1   EQU   RBCDE+1
RBCDLOAD EQU   RBCDFLGS
RBCDXCTL EQU   RBCDFLGS
RBCDSYNC EQU   RBCDFLGS
RBCDNODE EQU   RBCDFLGS
RBCDSAVE EQU   RBCDFLGS
RBCDATCH EQU   RBCDFLGS
RBRSV009 EQU   RBCDFLGS
RBNOCELL EQU   RBCDFLGS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00102 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCBASWA EQU   JSCBSEC3+96
JSCBUFPT EQU   JSCBSEC3+92
JSCBACT  EQU   JSCBSEC3+88
JSCBSWSP EQU   JSCBSEC3+87
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCDSABQ EQU   JSCBSEC3+60
JSCBSSIB EQU   JSCBSEC3+56
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00079 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00078 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCBRV08 EQU   JSCBSEC3+11
JSCBRV07 EQU   JSCBFBYT
JSCBRV06 EQU   JSCBFBYT
JSCBRV05 EQU   JSCBFBYT
JSCBRV04 EQU   JSCBFBYT
JSCBRV03 EQU   JSCBFBYT
JSCBRV02 EQU   JSCBFBYT
JSCBADSP EQU   JSCBFBYT
JSCBRV01 EQU   JSCBFBYT
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
CDSVSRT  EQU   MWACSVRP+4
CDSAVENT EQU   MWACSVRP
VATCBPTR EQU   IDAVATCB+1
ENQRETC  EQU   ENQENTRY+3
@NM00239 EQU   ENQOPT2
ENQSHR   EQU   ENQOPT2
ENQDIR   EQU   ENQOPT1
@NM00238 EQU   ENQOPT1
ENQNEW   EQU   ENQOPT1
ENQTCB   EQU   ENQPARML
VGTTCORE EQU   IDAVGTT+32
@NM00227 EQU   IDAVGTT+28
VGTTPSB  EQU   IDAVGTT+24
@NM00226 EQU   IDAVGTT+5
@NM00225 EQU   VGTTTYPE
VGTTLSR  EQU   VGTTTYPE
VGTTSDS  EQU   VGTTTYPE
@NM00224 EQU   IDAPDPRM+35
PDPNOMSG EQU   PDPMSGFL
PDPNOTRC EQU   PDPMSGFL
PDPSPACE EQU   PDPMSGFL
PDPNOTFC EQU   PDPMSGFL
PDPKEY   EQU   IDAPDPRM+32
PDPVLSER EQU   IDAPDPRM+16
PDPUCB   EQU   IDAPDPRM+8
JFCBXNXT EQU   JFCBX+172
@NM00223 EQU   JFCBX+144
JFCBXDEV EQU   JFCBX+140
JFCBXNAM EQU   JFCBX+96
@NM00222 EQU   JFCBX+94
JFCBXVOL EQU   JFCBX+4
@NM00221 EQU   JFCBX+3
JFCBXTTR EQU   JFCBX
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00217 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
APPNAMID EQU   APPNMTBL+24
APPOFFST EQU   APPENTRY+2
APPCOUNT EQU   APPENTRY
APPSIZE  EQU   APPNMTBL+2
APPBAL   EQU   APPNMTBL
WTGCORE  EQU   WTGENTRY+5
WTGETTR  EQU   WTGIDTTR+2
WTGEID   EQU   WTGIDTTR
WTGOPD   EQU   WTGPATHS+1
WTGRECHK EQU   WTGPATHS+1
WTGTSENQ EQU   WTGPATHS+1
@NM00214 EQU   WTGPATHS+1
WTGTRACE EQU   WTGPATHS+1
@NM00213 EQU   WTGPATHS
WTGJFCBW EQU   WTGPATHS
WTGSMF   EQU   WTGPATHS
WTGTCOS  EQU   WTGPATHS
WTGNSL   EQU   WTGPATHS
WTGPRLSE EQU   WTGPATHS
WTGLNG   EQU   WTG+29
WTGTXTLN EQU   WTGAREA+27
WTGMODSZ EQU   WTGAREA+24
WTGATTRB EQU   WTGAREA+22
@NM00212 EQU   WTGAREA+20
@NM00211 EQU   WTGAREA+12
WTGMODEP EQU   WTGAREA+8
WTGMODID EQU   WTGMODNM+6
@NM00210 EQU   WTGMODNM
DSMADTW6 EQU   DSMADTRL+20
DSMADTW5 EQU   DSMADTRL+16
DSMADTW4 EQU   DSMADTRL+12
DSMADTW3 EQU   DSMADTRL+8
DSMADTW2 EQU   DSMADTRL+4
DSMADTB4 EQU   DSMADTW1+3
DSMADTB3 EQU   DSMADTW1+2
@NM00209 EQU   DSMADTB2
DSMDSNE  EQU   DSMADTB2
DSMTIOTE EQU   DSMADTB2
DSMSMCE  EQU   DSMADTB2
DSMVTOCR EQU   DSMADTB2
DSMASWAP EQU   DSMADTB1
DSMUCBAL EQU   DSMADTB1
DSMRPSAP EQU   DSMADTB1
DSMLOCK  EQU   DSMADTB1
@NM00208 EQU   DSMADTB1
DSMVIO   EQU   DSMADTB1
DSMISAM  EQU   DSMADTB1
RRFWORK  EQU   RRPLIST+20
RRMLRTRY EQU   RRPLIST+16
RRUCBPTR EQU   RRXRETRY
RR1RETRY EQU   RRPLIST+8
RR1WRKAR EQU   RRPLIST+4
@NM00207 EQU   RRFLAGS3
RRFTERM  EQU   RRFLAGS3
RRFFCEXC EQU   RRFLAGS3
RRFFINFC EQU   RRFLAGS3
RRFNRTCA EQU   RRFLAGS3
@NM00206 EQU   RRFLAGS3
RRFENQUL EQU   RRFLAGS2
RRFPRDET EQU   RRFLAGS2
@NM00205 EQU   RRFLAGS2
RRFQMNGR EQU   RRFLAGS2
RRFENQPW EQU   RRFLAGS2
@NM00204 EQU   RRFLAGS2
RRFFIN1  EQU   RRFLAGS2
RRFTRACE EQU   RRFLAGS1
RRFSMF   EQU   RRFLAGS1
RRFNSL   EQU   RRFLAGS1
RRFAMSTR EQU   RRFLAGS1
RRFAMEXR EQU   RRFLAGS1
RRFAMEXG EQU   RRFLAGS1
RRFUSREX EQU   RRFLAGS1
@NM00203 EQU   RRFLAGS1
RRFRJFCB EQU   RRFUNCTN
RRFDADSM EQU   RRFUNCTN
DXDCBLST EQU   USERPRML
RWALIST  EQU   RWARESWA+12
RWAPARM  EQU   RWAPREFX+8
RWATRBUF EQU   RWAPREFX+4
RWATRACE EQU   RWAPREFX
IECQMNGR EQU   IECEXTPR+92
IECMSGQA EQU   IECEXTPR+88
IECDCBNO EQU   IECUPRML
IECRRPRM EQU   IECEXTPR+76
IECREGSV EQU   IECEXTPR
IECCORP2 EQU   IECPREFX+28
IECCORP1 EQU   IECPREFX+24
IECCORPS EQU   IECPREFX+20
IECCORSP EQU   IECPREFX+19
@NM00202 EQU   IECPREFX+17
IECCORKY EQU   IECPREFX+16
IECCORAD EQU   IECPREFX+12
IECCORLN EQU   IECPREFX+8
@NM00201 EQU   IECPREFX+4
IECCORID EQU   IECPREFX
DXATEXB2 EQU   DXATEXC2
DXEXHASP EQU   DXATEXB1
DXATCOM4 EQU   FORCORE+600
DXATCOM3 EQU   FORCORE+596
@NM00197 EQU   DXATCOM2+3
@NM00196 EQU   DXATALL
DXATSWAP EQU   DXATALL
DXATFC   EQU   DXATALL
@NM00195 EQU   DXATOPEN
DXATDFIN EQU   DXATOPEN
DXATDSIN EQU   DXATOPEN
DXATMODM EQU   DXATOPEN
DXATMODE EQU   DXATOPEN
DXATMODS EQU   DXATOPEN
DXATIGN  EQU   DXATOPEN
DXATVCAT EQU   DXATEOV
DXATDADM EQU   DXATEOV
DXATREMT EQU   DXATEOV
DXATDNEW EQU   DXATEOV
DXATDFRE EQU   DXATEOV
DXATDCHN EQU   DXATEOV
DXATNVOL EQU   DXATEOV
DXATCCAT EQU   DXATEOV
DXATRDDB EQU   DXATDACC
DXATEOF  EQU   DXATDACC
@NM00194 EQU   DXATDACC
DXATSMF  EQU   DXATDACC
DXATUPDB EQU   DXATDACC
DXATDRCT EQU   DXATDACC
DXATTRAK EQU   DXATDACC
DXATF1CE EQU   DXATDACC
DXATNSL  EQU   DXATOUTA
DXATTTM2 EQU   DXATOUTA
DXATTTM1 EQU   DXATOUTA
DXATTRL2 EQU   DXATOUTA
DXATTRL1 EQU   DXATOUTA
DXATDATM EQU   DXATOUTA
DXATHDTM EQU   DXATOUTA
DXATVLHD EQU   DXATOUTA
DXATCLOS EQU   DXATCOM1+1
DXATSRET EQU   DXATGENS
DXATVCIG EQU   DXATVGIV
DXATVTMG EQU   DXATVGIV
DXATVSMG EQU   DXATVGIV
DXATJFCB EQU   DXATGENS
DXATDISP EQU   DXATGENS
DXATREFR EQU   DXATGENS
DXATDMCT EQU   DXATGENS
DXMSGADR EQU   FORCORE+584
DXPRPARC EQU   FORCORE+580
DXUDCBML EQU   FORCORE+578
DXUDCBPL EQU   FORCORE+576
@NM00193 EQU   DXPDCBAD
@NM00192 EQU   DXUDCBAD
DXUCBSVV EQU   DXUCBSAV+1
@NM00191 EQU   DXUCBSAV
DXUCBADR EQU   FORCORE+560
DXDSAB   EQU   FORCORE+548
DXDSABAD EQU   FORCORE+544
DXDSABQD EQU   FORCORE+540
DXJSCBAD EQU   FORCORE+536
DXTCBADR EQU   FORCORE+532
DXASCBAD EQU   FORCORE+528
DXEXTSW  EQU   FORCORE+527
DXWKEYSV EQU   FORCORE+525
DXUNITOF EQU   FORCORE+522
DXNOUNIT EQU   FORCORE+520
DXVOLSEQ EQU   FORCORE+518
DXVOLMT3 EQU   DXVOLSR3
DXVOLMT2 EQU   DXVOLSR2
DXVOLMT1 EQU   DXVOLSR1
DXWORK4  EQU   FORCORE+496
DXWORK3  EQU   FORCORE+492
DXWORK2  EQU   FORCORE+488
DXWORK1  EQU   FORCORE+484
DXWORK   EQU   FORCORE+480
@NM00190 EQU   FORCORE+464
DXCCW11  EQU   DXCCW+80
DXCCW10  EQU   DXCCW+72
DXCCW9   EQU   DXCCW+64
DXCCW7   EQU   DXCCW+48
DXCCW6   EQU   DXCCW+40
DXCCW4   EQU   DXCCW+24
DXCCW3   EQU   DXCCW+16
DXCCW2   EQU   DXCCW+8
DXCCW1   EQU   DXCCW
DXDCBDEB EQU   DXDCB+44
@NM00189 EQU   DXDCB+24
DXDEBDCB EQU   DXDCB+20
@NM00188 EQU   DXDCB
DXDEB    EQU   DXDAADDR+4
@NM00187 EQU   DXDAADDR
DXECB    EQU   FORCORE+276
DSCCORE  EQU   FORCORE+96
DXLBL    EQU   DXDSCB
WSHDSBM  EQU   WSHDSGMW+11
WSHDSFNO EQU   WSHDSFLG
WSHDSBV  EQU   WSHDSGMW+8
WSHDSONX EQU   WSHDSGMW+4
WSHDSFLN EQU   WSHDSFM+1
WSHDSFSP EQU   WSHDSFM
WSHDGSR  EQU   @NM00185
@NM00186 EQU   @NM00185
WSHDOCHN EQU   IDAWSHD+24
WSHDGMRA EQU   IDAWSHD+20
WSHDNUS  EQU   IDAWSHD+18
WSHDGMWA EQU   IDAWSHD+8
WSHDNEXT EQU   WSHDACHN+1
WSHDGMTB EQU   WSHDACHN
VVOLLVSR EQU   VVOLLENT+6
VVOLLVFY EQU   @NM00184
VVOLLMNT EQU   @NM00184
VVOLLUCB EQU   VVOLLENT
VVOLLDEB EQU   IDAVVOLL+32
VVOLLBIB EQU   IDAVVOLL+28
VVOLLSFI EQU   IDAVVOLL+16
VVOLLCNT EQU   VVOLLERR+3
VVOLLSFC EQU   VVOLLERR+2
VVOLLFNC EQU   VVOLLERR+1
VVOLLPDC EQU   VVOLLERR
VVOLLACB EQU   IDAVVOLL+8
VVOLLTAB EQU   IDAVVOLL+4
VVOLLNBR EQU   IDAVVOLL+2
@NM00183 EQU   IDAVVOLL+1
VVOLLSWD EQU   @NM00181
VVOLLCAT EQU   @NM00181
VVOLLEOV EQU   @NM00181
VVOLLOPE EQU   @NM00181
VVOLLTIO EQU   @NM00181
VVOLLID  EQU   @NM00181
@NM00182 EQU   @NM00181
VMTVLSER EQU   VMTVOL+6
@NM00180 EQU   VMTVOL+5
@NM00179 EQU   VMTVFLG1
VMTUSECT EQU   VMTVOL
VMTDVTYP EQU   VMTDEV+1
VMTDVOPT EQU   VMTDEV
@NM00178 EQU   IDAVMT+10
@NM00177 EQU   VMTHDR+1
VMTID    EQU   VMTHDR
@NM00176 EQU   IDAVAT+22
VATENO   EQU   VATVC+1
VATVPTR  EQU   VATVSRT+4
VATVUSE  EQU   VATVSRT
VATLEN   EQU   VATHDR+2
@NM00175 EQU   VATHDR+1
VATID    EQU   VATHDR
UPTBG    EQU   UPTAXENT+10
UPTLNCDE EQU   UPTAXENT+9
UPTPASS  EQU   UPTAXENT+8
UPTRKP   EQU   UPTAXENT+6
UPTF1PUD EQU   UPTFLG1+1
UPTF1PNU EQU   UPTFLG1+1
UPTF1ERA EQU   UPTFLG1+1
UPTF1PHY EQU   UPTFLG1+1
UPTF1LOG EQU   UPTFLG1+1
UPTF1BKO EQU   UPTFLG1+1
UPTF1UPG EQU   UPTFLG1
UPTF1RTY EQU   UPTFLG1
UPTF1KEY EQU   UPTFLG1
UPTF1NRF EQU   UPTFLG1
UPTF1NUK EQU   UPTFLG1
UPTF1ATV EQU   UPTFLG1
UPTF1LST EQU   UPTFLG1
UPTF1LOP EQU   UPTRPL
UPTR15   EQU   UPTSA+16
UPTR14   EQU   UPTSA+12
UPTSARES EQU   UPTSA+11
@NM00174 EQU   UPTSA+10
UPTBERCD EQU   UPTSA+9
UPTBEREG EQU   UPTSA+8
UPTLSA   EQU   UPTSA+4
UPTBRPL  EQU   UPTSA
UPTLLEN  EQU   IDAUPT+14
UPTRSC   EQU   IDAUPT+12
UPTOLD   EQU   IDAUPT+8
UPTNEW   EQU   IDAUPT+4
UPTLEN   EQU   UPTHDR+2
UPTPWS   EQU   UPTFLG0
UPTID    EQU   UPTHDR
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBFCBPE EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00173
UCBHALI  EQU   @NM00173
UCBRSV09 EQU   @NM00173
UCBRSV08 EQU   @NM00173
UCBRSV07 EQU   @NM00173
UCBRSV06 EQU   @NM00173
UCBRSV05 EQU   @NM00173
UCBRSV04 EQU   @NM00173
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00170 EQU   UCB
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00169 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00168 EQU   POOLSTAR
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOEJFCB EQU   TIOENTRY+12
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOEWTCT EQU   TIOERLOC
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
TIOELNGH EQU   TIOENTRY
@NM00167 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00166 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBSTAFX EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAWA EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00165 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00164 EQU   TCBPMASK
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
@NM00163 EQU   IDASSL+18
SMCASTCB EQU   SMCABASE+176
SMCAWTCB EQU   SMCABASE+172
SMCAU83  EQU   SMCABASE+168
SMCAPGM  EQU   SMCABASE+164
SMCARGNM EQU   SMCABASE+160
SMCASPOT EQU   SMCABASE+156
SMCASPIN EQU   SMCABASE+152
SMCARGNS EQU   SMCABASE+148
SMCAPGRL EQU   SMCABASE+144
SMCADOMY EQU   SMCAPGOT
SMCADOMX EQU   SMCAPGIN
SMCATEXP EQU   SMCABASE+132
SMCASAVE EQU   SMCABASE+128
SMCARS21 EQU   SMCABASE+124
SMCATJID EQU   SMCAASCB+2
SMCAPOST EQU   SMCAASCB
SMCADSCT EQU   SMCABASE+116
SMCADSTM EQU   SMCABASE+108
SMCASWD  EQU   SMCABASE+107
SMCASWC  EQU   SMCABASE+106
SMCASWB  EQU   SMCABASE+105
SMCADSSW EQU   SMCASWA
SMCADSSP EQU   SMCASWA
SMCAZEOD EQU   SMCASWA
SMCANAVL EQU   SMCASWA
SMCANADA EQU   SMCASWA
SMCAOPFL EQU   SMCASWA
SMCADSTR EQU   SMCASWA
SMCASWAR EQU   SMCASWA
SMCAXNAM EQU   SMCABASE+96
@NM00162 EQU   SMCABASE+92
SMCAXCTL EQU   SMCABASE+88
SMCAWRTP EQU   SMCABASE+84
SMCAENAL EQU   SMCABASE+83
SMCAFGN  EQU   SMCAFOPT
SMCAFTDS EQU   SMCAFOPT
SMCAFR01 EQU   SMCAFOPT
SMCAFVOL EQU   SMCAFOPT
SMCAFDSA EQU   SMCAFOPT
SMCAFEXT EQU   SMCAFOPT
SMCAFOP2 EQU   SMCAFOPT
SMCAFOP1 EQU   SMCAFOPT
SMCAENOP EQU   SMCAENTY+1
SMCADSNF EQU   SMCAENDI
SMCARS20 EQU   SMCAENDI
SMCARS19 EQU   SMCAENDI
SMCARS18 EQU   SMCAENDI
SMCARS17 EQU   SMCAENDI
SMCARS16 EQU   SMCAENDI
SMCARS15 EQU   SMCAENDI
SMCARS14 EQU   SMCAENDI
SMCAWAIT EQU   SMCABASE+72
SMCASGFT EQU   SMCABASE+68
SMCASGWR EQU   SMCABASE+64
SMCABECB EQU   SMCABASE+60
SMCAWECB EQU   SMCABASE+56
SMCAADCB EQU   SMCABASE+52
SMCAYORX EQU   SMCABASE+51
SMCAANL  EQU   SMCAALBL
SMCAASL  EQU   SMCAALBL
SMCAANSL EQU   SMCAALBL
SMCARS13 EQU   SMCAALBL
SMCARS12 EQU   SMCAALBL
SMCARS11 EQU   SMCAALBL
SMCARS10 EQU   SMCAALBL
SMCARS09 EQU   SMCAALBL
SMCAADAR EQU   SMCABASE+47
SMCAAVOL EQU   SMCASTA
SMCAAUNT EQU   SMCASTA
SMCARS08 EQU   SMCASTA
SMCAAMOD EQU   SMCASTA
SMCAAMTY EQU   SMCASTA
SMCAADA  EQU   SMCASTA
SMCAATAP EQU   SMCASTA
SMCAANAV EQU   SMCASTA
SMCAADEV EQU   SMCABASE+40
SMCAPDCB EQU   SMCABASE+36
SMCAXORY EQU   SMCABASE+35
SMCAPNL  EQU   SMCAPLBL
SMCAPSL  EQU   SMCAPLBL
SMCAPNSL EQU   SMCAPLBL
SMCARS07 EQU   SMCAPLBL
SMCARS06 EQU   SMCAPLBL
SMCARS05 EQU   SMCAPLBL
SMCARS04 EQU   SMCAPLBL
SMCARS03 EQU   SMCAPLBL
SMCAPDAR EQU   SMCABASE+31
SMCAPVOL EQU   SMCAPSTA
SMCAPUNT EQU   SMCAPSTA
SMCARS02 EQU   SMCAPSTA
SMCAMOD  EQU   SMCAPSTA
SMCAPMTY EQU   SMCAPSTA
SMCAPDA  EQU   SMCAPSTA
SMCAPTAP EQU   SMCAPSTA
SMCAPNAV EQU   SMCAPSTA
SMCAPDEV EQU   SMCABASE+24
SMCABUFP EQU   SMCABASE+20
SMCASID  EQU   SMCABASE+16
SMCABSIZ EQU   SMCABUF
SMCAJWT  EQU   SMCABASE+8
SMCATIOT EQU   SMCABASE+4
SMCATOFF EQU   SMCABASE+2
SMCADUMP EQU   SMCAMISC
SMCABSW  EQU   SMCAMISC
SMCADBSY EQU   SMCAMISC
SMCAPSDP EQU   SMCAMISC
SMCAFIRT EQU   SMCAMISC
SMCAOPI  EQU   SMCAMISC
SMCAFGND EQU   SMCAOPT
SMCATDS  EQU   SMCAOPT
SMCARS01 EQU   SMCAOPT
SMCAVOL  EQU   SMCAOPT
SMCAEXT  EQU   SMCAOPT
SMCAOPT2 EQU   SMCAOPT
SMCAOPT1 EQU   SMCAOPT
SFIMODID EQU   IDASFI+10
SFIRSNCD EQU   IDASFI+9
@NM00161 EQU   IDASFI+8
@NM00160 EQU   IDASFI+1
SFIDESC  EQU   IDASFI
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00159 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00158 EQU   RPLRBAR+3
@NM00157 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00156 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
@NM00155 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
SVRBEND  EQU   RBSECT+192
RBFEPARM EQU   RBSECT+168
SIRBEND  EQU   RBSECT+168
RBRSV158 EQU   RBRSV150
RBRSV157 EQU   RBRSV150
RBRSV156 EQU   RBRSV150
RBRSV155 EQU   RBRSV150
RBRSV154 EQU   RBRSV150
RBRSV153 EQU   RBRSV150
RBRSV152 EQU   RBRSV150
RBRSV151 EQU   RBRSV150
RBRSV149 EQU   RBSECT+166
RBRSV148 EQU   RBSECT+164
RBRSV169 EQU   RBSDATA+3
RBSID    EQU   RBSDATA+2
RBSPKEY  EQU   RBSDATA+1
RBRSV168 EQU   RBSFLG3
RBSTERMO EQU   RBSFLG3
RBSBRNTR EQU   RBSFLG3
RBSPRNTR EQU   RBSFLG3
RBSCNCEL EQU   RBSFLG3
RBSRECRD EQU   RBSFLG3
RBSTERMI EQU   RBSFLG3
RBRSV167 EQU   RBSFLG3
RBSOWNRA EQU   RBSOWNR+1
RBSSUPER EQU   RBSFLGS2
RBSKEY0  EQU   RBSFLGS2
RBRSV166 EQU   RBSFLGS2
RBRSV165 EQU   RBSFLGS2
RBSINUSE EQU   RBSFLGS2
RBRSV164 EQU   RBSFLGS2
RBSXCTL2 EQU   RBSFLGS2
RBRSV163 EQU   RBSFLGS2
RBSPARMA EQU   RBSPARM+1
RBSHALT  EQU   RBSIOPRC
RBSNOIOP EQU   RBSIOPRC
RBSASYNC EQU   RBSFLGS1
RBRSV162 EQU   RBSFLGS1
RBSESTAE EQU   RBSFLGS1
RBSDUMMY EQU   RBSFLGS1
RBSSTAR  EQU   RBSFLGS1
RBSSTAI  EQU   RBSFLGS1
RBSEXIT  EQU   RBSCBB+4
RBSCHAIN EQU   RBSCBB
TIRBEND  EQU   @NM00153+8
PRBEND   EQU   @NM00153+8
RBRSV146 EQU   RBRSV138
RBRSV145 EQU   RBRSV138
RBRSV144 EQU   RBRSV138
RBRSV143 EQU   RBRSV138
RBRSV142 EQU   RBRSV138
RBRSV141 EQU   RBRSV138
RBRSV140 EQU   RBRSV138
RBRSV139 EQU   RBRSV138
RBRSV137 EQU   @NM00153+6
RBRSV136 EQU   @NM00153+4
RBRSV135 EQU   @NM00153
@NM00152 EQU   RBSECT+32
@NM00151 EQU   @NM00149+1
RBSCF    EQU   @NM00150
RBPGMQ1  EQU   RBPGMQ+1
@NM00148 EQU   RBPGMQ
@NM00147 EQU   RBSECT+16
@NM00146 EQU   @NM00142
@NM00145 EQU   @NM00142
RBIQETP  EQU   @NM00142
RBUSIQE  EQU   RBETXR
RBATTN   EQU   @NM00142
@NM00144 EQU   @NM00142
@NM00143 EQU   @NM00142
RBPMSVRB EQU   @NM00140
RBATNXIT EQU   @NM00140
@NM00141 EQU   @NM00140
RBWAITP  EQU   @NM00140
RBFNSVRB EQU   RBTRSVRB
RBFTP    EQU   @NM00140
RBSIZE   EQU   RBSECT+8
RBABOPSW EQU   RBSECT+4
RBPPSAV1 EQU   RBPPSAV+1
@NM00138 EQU   RBPPSAV
RBPRFXND EQU   RBPREFIX+64
RBINTCOD EQU   RBINTCDA+1
RBINLNTH EQU   RBINTCDA
RBWCSA   EQU   RBPREFIX+60
RBRSV004 EQU   RBPREFIX+57
RBSSSYN  EQU   RBFLAGS1
RBSCB    EQU   RBFLAGS1
RBLONGWT EQU   RBFLAGS1
RBASIR   EQU   RBFLAGS1
RBRSV159 EQU   RBFLAGS1
RBABEND  EQU   RBFLAGS1
RBXWAIT  EQU   RBFLAGS1
RBSLOCK  EQU   RBFLAGS1
RBRTRAN  EQU   RBRTPSW2+4
RBRTINCD EQU   RBRTICIL+2
RBRTILC  EQU   RBRTICIL+1
RBRSV160 EQU   RBRTICIL
RBRTPSW1 EQU   RBRTOPSW
RBRSV062 EQU   RBRSV054
RBRSV061 EQU   RBRSV054
RBRSV060 EQU   RBRSV054
RBRSV059 EQU   RBRSV054
RBRSV058 EQU   RBRSV054
RBRSV057 EQU   RBRSV054
RBRSV056 EQU   RBRSV054
RBRSV055 EQU   RBRSV054
RBRSV053 EQU   RBPREFIX+38
RBRSV052 EQU   RBPREFIX+36
RBRSV051 EQU   RBPREFIX+32
RBPRFXST EQU   RBPREFIX+32
RBRSV050 EQU   RBPREFIX+28
RBRSV049 EQU   RBRSV041
RBRSV048 EQU   RBRSV041
RBRSV047 EQU   RBRSV041
RBRSV046 EQU   RBRSV041
RBRSV045 EQU   RBRSV041
RBRSV044 EQU   RBRSV041
RBRSV043 EQU   RBRSV041
RBRSV042 EQU   RBRSV041
RBRSV040 EQU   RBPREFIX+26
RBRSV039 EQU   RBPREFIX+24
RBRSV038 EQU   RBPREFIX+20
RBRSV037 EQU   RBPREFIX+16
RBRSV036 EQU   RBRSV028
RBRSV035 EQU   RBRSV028
RBRSV034 EQU   RBRSV028
RBRSV033 EQU   RBRSV028
RBRSV032 EQU   RBRSV028
RBRSV031 EQU   RBRSV028
RBRSV030 EQU   RBRSV028
RBRSV029 EQU   RBRSV028
RBRSV027 EQU   RBRSV019
RBRSV026 EQU   RBRSV019
RBRSV025 EQU   RBRSV019
RBRSV024 EQU   RBRSV019
RBRSV023 EQU   RBRSV019
RBRSV022 EQU   RBRSV019
RBRSV021 EQU   RBRSV019
RBRSV020 EQU   RBRSV019
RBRSV018 EQU   RBPREFIX+13
RBRSV017 EQU   RBPREFIX+12
RBSRV016 EQU   RBPREFIX+11
RBRSV015 EQU   RBPREFIX+10
RBRSV014 EQU   RBPREFIX+8
RBRSV013 EQU   RBPREFIX+4
RBRSV012 EQU   RBPREFIX
RBEXSAVE EQU   XRBESA
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00137 EQU   RBBASIC+24
RBOPSWPS EQU   RBOPSWB2
@NM00136 EQU   RBOPSWB2
@NM00135 EQU   XRBPSW
@NM00134 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00133 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00132 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00131 EQU   XSTAB1
@NM00130 EQU   RBBASIC+8
@NM00129 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00128 EQU   RBPRFX
PSLENDAD EQU   PSLENTRY+5
@NM00127 EQU   PSLFLG
PSLFLGLT EQU   PSLFLG
PSLSTAD  EQU   PSLENTRY
PSLID    EQU   IDAPSL+4
PSLLENTH EQU   IDAPSL+1
PSLSUBPL EQU   IDAPSL
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00101 EQU   IDAPLH+266
@NM00100 EQU   PLHTMRPL
PLHTMIOB EQU   PLHTMRPL
PLHTMINX EQU   PLHTMRPL
PLHTMDTA EQU   PLHTMRPL
PLHTMDIW EQU   PLHTMRPL
PLHTMBUF EQU   PLHTMRPL
PLHTERM  EQU   PLHTMRPL
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00099 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHRBUFC EQU   IDAPLH+192
PLHIBUFC EQU   IDAPLH+188
PLHNRBA  EQU   IDAPLH+184
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00098 EQU   IDAPLH+172
@NM00097 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHAMB   EQU   IDAPLH+108
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHRDFP  EQU   IDAPLH+68
PLHFSP   EQU   IDAPLH+64
PLHRECP  EQU   IDAPLH+60
PLHNBUFC EQU   IDAPLH+56
PLHDBUFC EQU   IDAPLH+52
PLHLRECL EQU   IDAPLH+48
PLHARDB  EQU   IDAPLH+44
@NM00096 EQU   PLHRSCS
PLHDBPER EQU   PLHRSCS
PLHDSERR EQU   PLHRSCS
PLHASYER EQU   PLHRSCS
@NM00095 EQU   PLHRSCS
PLHBUFHD EQU   PLHRSCS
PLHINEOV EQU   PLHRSCS
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00094 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
PLHSR    EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHASKBF EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
OPWCIXCI EQU   OPWCURCL+5
OPWERR2B EQU   OPWFLG2
OPWEMPUP EQU   OPWFLG2
OPWMODWK EQU   OPWFLG2
OPWCDTCI EQU   OPWCURCL+1
OPWPRTBL EQU   OPWCFLG1
OPWSVWRK EQU   OPWCFLG1
OPWUPGR  EQU   OPWCFLG1
OPWPATH  EQU   OPWCFLG1
OPWBASE  EQU   OPWCFLG1
@NM00093 EQU   OPWUPAIX+4
@NM00092 EQU   OPWUPAIX
OPW2YPLH EQU   IDAOPWRK+585
@NM00091 EQU   OPWPTAIX+4
@NM00090 EQU   OPWPTAIX
@NM00089 EQU   OPWBSECL+4
@NM00088 EQU   OPWBSECL
OPWSAVEA EQU   IDAOPWRK+564
OPWSFI   EQU   IDAOPWRK+296
OPWDACB  EQU   IDAOPWRK+244
@NM00087 EQU   IDAOPWRK+243
OPWCSTRN EQU   IDAOPWRK+240
OPWBUFNI EQU   IDAOPWRK+236
OPWBUFND EQU   IDAOPWRK+232
OPWIXWRK EQU   IDAOPWRK+216
OPWWRKPT EQU   IDAOPWRK+208
OPWPSDS  EQU   OPWCATTR
OPWSWSP  EQU   OPWCATTR
@NM00086 EQU   OPWCATTR
@NM00085 EQU   OPWQ2
OPWCRA   EQU   IDAOPWRK+192
OPWCAMBL EQU   IDAOPWRK+172
OPWXAMBL EQU   IDAOPWRK+168
OPWVFMPT EQU   OPWVFMPL+4
OPWVFMLN EQU   OPWVFMPL+1
OPWVFMSP EQU   OPWVFMPL
OPWVRG13 EQU   OPWVLSAV+4
OPWVRG12 EQU   OPWVLSAV
OPWVANCS EQU   OPWVSMWA+76
OPWVREQL EQU   OPWVGSPL+9
OPWVGFLG EQU   OPWVGSPL+8
OPWVGSPT EQU   OPWVGSPL+4
OPWVGETL EQU   OPWVGSPL+1
OPWVGSSP EQU   OPWVGSPL
OPWVSAVE EQU   OPWVSMWA+24
OPWVR13  EQU   OPWVSMWA+20
OPWVHDRE EQU   OPWVSMWA+16
OPWVCSLE EQU   OPWVSMWA+12
OPWVCSLP EQU   OPWVSMWA+8
OPWVTBLP EQU   OPWVSMWA+4
OPWVANCP EQU   OPWVSMWA
@NM00084 EQU   OPWVSMPL+14
OPWVMTCB EQU   OPWVMFLG
OPWVMSRB EQU   OPWVMFLG
OPWVMPGB EQU   OPWVMFLG
@NM00083 EQU   OPWFLGS4
OPWUPD   EQU   OPWFLGS4
OPWCINV  EQU   OPWFLGS4
OPWFULL  EQU   OPWFLGS4
@NM00082 EQU   OPWFLGS3
OPWRSTRT EQU   OPWFLGS3
OPWNOWRK EQU   OPWFLGS3
@NM00081 EQU   OPWFLGS2
OPWAIXDT EQU   OPWFLGS2
OPWIXDT  EQU   OPWFLGS2
@NM00080 EQU   OPWFLGS1
JSCBCSCB EQU   JSCBSEC1+68
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00077 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00076 EQU   IEZJSCB
EXLEADDR EQU   EXLEXITP
@NM00075 EQU   EXLENFL
EXLLNK   EQU   EXLENFL
EXLACTM  EQU   EXLENFL
EXLSPEC  EQU   EXLENFL
EXLOPNP  EQU   EXLCOMN+36
@NM00074 EQU   EXLOPNF
EXLOPNK  EQU   EXLOPNF
EXLOPNA  EQU   EXLOPNF
EXLOPNS  EQU   EXLOPNF
EXLJRNP  EQU   EXLCOMN+31
@NM00073 EQU   EXLJRNF
EXLJRNK  EQU   EXLJRNF
EXLJRNA  EQU   EXLJRNF
EXLJRNS  EQU   EXLJRNF
EXLLGNP  EQU   EXLCOMN+26
@NM00072 EQU   EXLLGNF
EXLLGNK  EQU   EXLLGNF
EXLLGNA  EQU   EXLLGNF
EXLLGNS  EQU   EXLLGNF
EXLUPADP EQU   EXLSCIPP
@NM00071 EQU   EXLUPADF
EXLUPADK EQU   EXLSCIPK
EXLUPADA EQU   EXLSCIPA
EXLUPADS EQU   EXLSCIPS
EXLLERP  EQU   EXLCOMN+16
@NM00070 EQU   EXLLERF
EXLLERK  EQU   EXLLERF
EXLLERA  EQU   EXLLERF
EXLLERS  EQU   EXLLERF
@NM00069 EQU   EXLSYNF
EXLSYNK  EQU   EXLSYNF
EXLSYNA  EQU   EXLSYNF
EXLSYNS  EQU   EXLSYNF
EXLEODP  EQU   EXLCOMN+6
@NM00068 EQU   EXLEODF
EXLEODK  EQU   EXLEODF
EXLEODA  EQU   EXLEODF
EXLEODS  EQU   EXLEODF
@NM00067 EQU   EXLCOMN+4
EXLLEN2  EQU   EXLLEN
EXLSTYP  EQU   EXLCOMN+1
EXLID    EQU   EXLCOMN
ESLIO    EQU   ESLRNAME+7
ESLACBAD EQU   ESLRNAME+3
ESLCINBR EQU   ESLRNAME
ESLENQOP EQU   ESLENTRY
@NM00066 EQU   IDAESL+18
DSLFDDEB EQU   DSLFLG
@NM00065 EQU   DSLFLG
@NM00064 EQU   IDADSL+18
DEBXSAMB EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBESMVR EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00063 EQU   DEBACS08+12
@NM00062 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00061 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00060 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBUCBA  EQU   DEBUCBAD+1
DEBDVMOD EQU   DEBUCBAD
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBNMEXT EQU   DEBUSRPG
DEBRSV05 EQU   DEBBASIC+15
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBAMLNG EQU   DEBDEBAD
DEBNMSUB EQU   DEBTCBAD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00059 EQU   CVTFIX+248
@NM00058 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00057 EQU   CTEXTENT+20
CTRBAEND EQU   CTEXTENT+16
CTRBABEG EQU   CTEXTENT+12
CTNOTRKS EQU   CTEXTENT+10
CTHHEND  EQU   CTABSEND+2
CTCCEND  EQU   CTABSEND
CTHHBEG  EQU   CTABSBEG+2
CTCCBEG  EQU   CTABSBEG
@NM00056 EQU   CTEXTENT+1
CTEXTFLG EQU   CTEXTENT
CTKEY    EQU   CTKEYENT+16
CTKHARBA EQU   CTKEYENT+12
CTKHURBA EQU   CTKEYENT+8
CTKHKRBA EQU   CTKEYENT+4
CTKRELNO EQU   CTKEYENT+2
CTNOKEXT EQU   CTKEYENT+1
CTPRFMT  EQU   CTKEYFLG
CTSSWDTA EQU   CTKEYFLG
CTKEYEN1 EQU   CTVOLENT+20
@NM00055 EQU   CTVOLENT+18
CTVOLSER EQU   CTVOLENT+12
CTKEYLEN EQU   CTVOLENT+10
CTNOKEY  EQU   CTVOLENT+8
CTVOLUCB EQU   CTVOLENT+4
@NM00054 EQU   CTVOLENT+2
CTNOEXT  EQU   CTVOLENT+1
CTOFLOW  EQU   CTVOLFLG
CTVOLMT  EQU   CTVOLFLG
@NM00053 EQU   CTINFO+214
CTAMDSB  EQU   CTINFO+118
CTDATANM EQU   CTINFO+74
CTEXEX   EQU   CTINFO+66
CTCISIZ  EQU   CTINFO+62
CTBUFSIZ EQU   CTINFO+58
CTHURBA  EQU   CTINFO+54
CTHSHCAT EQU   CTINFO+50
@NM00052 EQU   CTINFO+49
CTHSHDSN EQU   CTINFO+46
CTSBYTRK EQU   CTINFO+42
CTBYTTRK EQU   CTINFO+38
CTSBYTAU EQU   CTINFO+34
CTBYTAU  EQU   CTINFO+30
CTSBLKTR EQU   CTINFO+26
CTBLKTR  EQU   CTINFO+22
CTSTRKAU EQU   CTINFO+18
CTTRKAU  EQU   CTINFO+14
CTVIRT   EQU   CTDEV2
CTBRPS   EQU   CTDEV2
@NM00051 EQU   CTDEV2
@NM00050 EQU   CTDEVTYP
CTBLKSZ  EQU   CTINFO+6
@NM00049 EQU   CTINFO+4
CTUPD    EQU   CTAUTH
CTCINV   EQU   CTAUTH
CTFULL   EQU   CTAUTH
CTUNUSE  EQU   CTSHROP
CTINTDS  EQU   CTSHROP
@NM00048 EQU   CTSHROP
CTSDHELP EQU   CTSHROP
CTHELP   EQU   CTSHROP
CTSHRF   EQU   CTSHROP
CTSHRW   EQU   CTSHROP
CTSHARE  EQU   CTSHROP
CTINDX   EQU   CTATTRB
CTINDXSS EQU   CTATTRB
CTCYL    EQU   CTATTRB
CTOPEN   EQU   CTATTRB
CTTOVFL  EQU   CTATTRA
CTTEMPEX EQU   CTATTRA
CTRDONLY EQU   CTATTRA
@NM00047 EQU   CTATTRA
CTERASE  EQU   CTATTRA
CTRELOP  EQU   CTATTRA
CTUNIQ   EQU   CTATTRA
CTAMDSPD EQU   CTATTRA
VOLENTNO EQU   AMBWORK+12
AMATIOE  EQU   AMBWORK+8
AMALEN   EQU   AMBWORK+6
AMATIOT  EQU   AMBWORK+4
AMACATLG EQU   AMBWORK
CSLANCPT EQU   CSLENTRY+9
CSLJSTCB EQU   CSLFLAGS
CSLGSRKT EQU   CSLFLAGS
CSLKEY5  EQU   CSLFLAGS
CSLCORPT EQU   CSLFREMN+4
CSLCORLN EQU   CSLFREMN+1
CSLPOOLN EQU   CSLFREMN
CSLNTRYS EQU   IDACSL+20
@NM00046 EQU   IDACSL+19
CSLGSRK  EQU   IDACSL+18
CSLACTEN EQU   IDACSL+16
CSLNXPTR EQU   IDACSL+12
CSLID    EQU   IDACSL+4
CSLLENTH EQU   CSLR0+1
CSLSUBPL EQU   CSLR0
@NM00045 EQU   CMBPTRS+52
CMBFXDPT EQU   CMBPTRS+48
CMBPUSPT EQU   CMBPTRS+44
CMBPSTPT EQU   CMBPTRS+40
CMBEDBPT EQU   CMBPTRS+36
CMBDEBPT EQU   CMBPTRS+32
CMBUBFPT EQU   CMBPTRS+28
CMBBFRPT EQU   CMBPTRS+24
CMBUFSPT EQU   CMBPTRS+20
CMBFSTPT EQU   CMBPTRS+16
CMBUSPTR EQU   CMBPTRS+12
CMBSTPTR EQU   CMBPTRS+8
CMBPRPTR EQU   CMBPTRS+4
CMBUSRPT EQU   CMBPTRS
CMBCNT   EQU   IDACMB+6
CMBNST   EQU   IDACMB+5
CMBOUT   EQU   CMBFLGS
CMBLEN   EQU   IDACMB+2
@NM00044 EQU   IDACMB+1
CMBID    EQU   IDACMB
CBSVUSE  EQU   CBSVSRT
CBSCRTCB EQU   AMCBS+28
CBSCRACA EQU   AMCBS+24
CBSCAXCN EQU   AMCBS+20
CBSMCUCB EQU   CBSCMP
CBSCBP   EQU   AMCBS+12
CBSACB   EQU   AMCBS+8
CBSMCSTA EQU   AMCBS+4
CBSSIZ   EQU   AMCBS+2
CBSID    EQU   AMCBS
CAXWNQID EQU   CAXHRPLW+2
CAXHRPLC EQU   CAXHRPLW
CAXASCBP EQU   IGGCAXWA+124
@NM00043 EQU   CAXECB+1
@NM00042 EQU   CAXECBHB
CAXECBPB EQU   CAXECBHB
CAXECBWB EQU   CAXECBHB
CAXRACP  EQU   IGGCAXWA+116
CAXCRACB EQU   IGGCAXWA+112
CAXJDE   EQU   IGGCAXWA+108
CAXPLOCK EQU   CAXCCA
CAXOPEWA EQU   IGGCAXWA+100
COPACB   EQU   CAXOPLST+1
@NM00041 EQU   COPTS
CENLST   EQU   COPTS
@NM00040 EQU   CAXCNAM+22
CAXRADDN EQU   CAXCNAM+14
CAXRATEP EQU   CAXCNAM+10
CAXRACTS EQU   CAXCNAM+6
CAXVOLID EQU   CAXCNAM
CAXRPL   EQU   IGGCAXWA+48
CAXRPLCT EQU   IGGCAXWA+46
CAXASID  EQU   IGGCAXWA+44
CAXFDCI  EQU   CAXCCR+9
CAXCDCI  EQU   CAXCCR+6
CAXNFCI  EQU   CAXCCR+3
CAXHACI  EQU   CAXCCR
CAXDRWP  EQU   IGGCAXWA+20
CAXSCHWA EQU   IGGCAXWA+16
CAXATIOT EQU   IGGCAXWA+12
CAXACT   EQU   IGGCAXWA+11
@NM00039 EQU   CAXFLG3
CAXF3B6  EQU   CAXFLG3
CAXF3B5  EQU   CAXFLG3
CAXRAC   EQU   CAXFLG3
@NM00038 EQU   CAXFLG3
CAXF3ANE EQU   CAXFLG3
CAXF3AT  EQU   CAXFLG3
CAXF2VTU EQU   CAXFLG2
CAXF2REC EQU   CAXFLG2
CAXF2CA  EQU   CAXFLG2
CAXF2CLR EQU   CAXFLG2
CAXF2IOE EQU   CAXFLG2
CAXF2NCR EQU   CAXFLG2
CAXF2NDD EQU   CAXFLG2
CAXF2DT  EQU   CAXFLG2
CAXSCR   EQU   CAXFLGS
CAXCMR   EQU   CAXFLGS
CAXMCT   EQU   CAXFLGS
CAXCMP   EQU   CAXFLGS
CAXEOV   EQU   CAXFLGS
CAXCLS   EQU   CAXFLGS
CAXOPN   EQU   CAXFLGS
CAXBLD   EQU   CAXFLGS
CAXCHN   EQU   IGGCAXWA+4
@NM00037 EQU   IGGCAXWA+1
CAXID    EQU   IGGCAXWA
BIBSIOAP EQU   BIBRTNS+12
BIBASYRT EQU   BIBRTNS+8
BIBCEAPP EQU   BIBRTNS+4
BIBPSAB  EQU   IDABIB+52
BIBVCRT  EQU   IDABIB+40
BIBHEBFQ EQU   IDABIB+36
BIBHEBPT EQU   IDABIB+32
BIBSPHPT EQU   IDABIB+24
BIBPAMBL EQU   IDABIB+20
BIBUPT   EQU   IDABIB+8
@NM00036 EQU   IDABIB+5
BIBFLG2  EQU   IDABIB+4
@NM00035 EQU   BIBFLG1
BIBCKPT  EQU   BIBFLG1
BIBREST  EQU   BIBFLG1
BIBVIRT  EQU   BIBFLG1
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSMA EQU   ASCBRSM+1
ASCBRV54 EQU   ASCBRSMF
ASCBRV53 EQU   ASCBRSMF
ASCBRV52 EQU   ASCBRSMF
ASCBRV51 EQU   ASCBRSMF
ASCBVEQR EQU   ASCBRSMF
ASCBN2LP EQU   ASCBRSMF
ASCB1LPU EQU   ASCBRSMF
ASCB2LPU EQU   ASCBRSMF
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00034 EQU   IDAAMDSB+41
@NM00033 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDCINV  EQU   IDAAMDSB+20
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDKEYLN EQU   IDAAMDSB+8
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00032 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00031 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00030 EQU   AMBLFLG2
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLSDS  EQU   AMBLVVIC
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00029 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00028 EQU   AMBLQ2
AMBLCBIC EQU   AMBLQ2
@NM00027 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00026 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00025 EQU   AMBCSWD1+1
@NM00024 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBLSR   EQU   AMBAFLG
@NM00023 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00022 EQU   IDAAMB+68
AMBIWA   EQU   IDAAMB+64
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00021 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00020 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBSDS   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00019 EQU   AMBINFL
@NM00018 EQU   AMBINFL
@NM00017 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBIOMB  EQU   AMBIOBAD
@NM00016 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00015 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00014 EQU   AMBFLG0
AMBSWSP  EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00013 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00012 EQU   ACBINFL2
@NM00011 EQU   ACBINFL2
ACBBYPSS EQU   ACBINFL1
ACBIJRQE EQU   ACBINFL1
ACBJEPS  EQU   ACBINFL1
@NM00010 EQU   ACBINFL1
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00009 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00008 EQU   ACBOFLGS
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00007 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00006 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBASA   EQU   ACBCCTYP
@NM00005 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00004 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00003 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
@NM00002 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBAIX   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00001 EQU   ACBMACR2
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
@NM00126 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00125 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00124 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00123 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00122 EQU   FLCFSA
@NM00121 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00120 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00119 EQU   FLCIOA
@NM00118 EQU   FLCMCLA+15
@NM00117 EQU   FLCMCLA+14
@NM00116 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00115 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00114 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00113 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00112 EQU   FLCPER
@NM00111 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00110 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00109 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00108 EQU   FLCPIILC
@NM00107 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00106 EQU   FLCSVILC
@NM00105 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00104 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00103 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00459 EQU   @RC00443
@RC00718 EQU   @RC00716
@RF00837 EQU   @RC00829
@RC00865 EQU   @RC00864
@RF00889 EQU   @RC00874
@RC00932 EQU   @RC00928
@PB00035 EQU   @PB00036
@RC00867 EQU   @RC00865
@PB00034 EQU   @PB00035
@PB00033 EQU   @PB00034
@PB00032 EQU   @PB00033
@PB00031 EQU   @PB00032
@PB00030 EQU   @PB00031
@PB00029 EQU   @PB00030
@PB00028 EQU   @PB00029
@PB00027 EQU   @PB00028
@PB00026 EQU   @PB00027
@PB00025 EQU   @PB00026
@PB00024 EQU   @PB00025
@PB00023 EQU   @PB00024
@PB00022 EQU   @PB00023
@PB00021 EQU   @PB00022
@PB00020 EQU   @PB00021
@PB00019 EQU   @PB00020
@PB00018 EQU   @PB00019
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IDA0192A,(C'PLS0841',0701,78188)
