         TITLE 'IDA0192B - VSAM OPEN CLUSTER VS2-3                     *
                        '
IDA0192B CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA0192B  78.151'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @03,0                                               0001
@PSTART  LA    @12,4095(,@03)                                      0001
         USING @PSTART,@03                                         0001
         USING @PSTART+4095,@12                                    0001
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
RBPRFXLN EQU 64
RBPRFLNA EQU 32
PRBLEN   EQU 136
SIRBLEN  EQU 200
TIRBLEN  EQU 136
IRBLEN   EQU 128
SVRBLEN  EQU 224
*                                                                  0372
*/********************************************************************/
*/*                                                                  */
*/*                     MODULE IDA0192B                              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0372
*   OPWFLG2=OPWFLG2&&OPWFLG2;       /* ZERO INDICATOR FLAGS IN OPW   */
         L     @05,OPWCURPT(,RCORE)                                0372
         XC    OPWFLG2(1,@05),OPWFLG2(@05)                         0372
*   RSTATRTN=IDAR192B;              /* INDIC RTN IN CONTROL  @Z30SSDP*/
         L     @05,OPWCOMWA(,RCORE)                                0373
         MVC   RSTATRTN(4,@05),@CC04253                            0373
*   PDPFUNC=PDF60;                  /* SET FUNCTION CODE             */
         AL    @05,@CF05493                                        0374
         MVI   PDPFUNC(@05),X'3C'                                  0374
*   PDPSFI=ZERO;                    /* ZERO POINTER TO SFI AREA      */
         SLR   @15,@15                                             0375
         ST    @15,PDPSFI(,@05)                                    0375
*/********************************************************************/
*/*           IDAGMAIN - GETS CORE STORAGE FOR AUTOMATICS.           */
*/*                      FOR VS2 IDAGMAIN WILL MOVE THE      @Z30SSRL*/
*/*                      ID AND DATE OF THE MODULE TO A      @Z30SSRL*/
*/*                      LOCATION DIRECTLY AFTER THE PLS     @Z30SSRL*/
*/*                      GENERATED SAVE AREA.                @Z30SSRL*/
*/*           DATE OF LAST CHANGE = 3 DECEMBER 74            @Z30SSRL*/
*/********************************************************************/
*                                                                  0376
*   GEN;                                                           0376
         L     @00,@SIZDATD             LOAD LENGTH OF AUTOMATICS
         GETMAIN RC,LV=(0),SP=0         ISSUE GETMAIN IN SUBPOOL ZERO
         LTR   @15,@15                  TEST RETURN CODE FOR ERROR
         BNZ   GMN00100                 BRANCH IF ERROR ENCOUNTERED
*                                       IF NO ERROR WAS ENCOUNTERED
         LR    @00,@01                  ADDRESS OF GOTTEN AREA IN R0
         LR    @14,@01                  SAVE THE ADDRESS IN REGISTER 14
         L     @01,@SIZDATD             LENGTH OF GOTTEN AREA
         MVCL  @00,@14                  ZERO THE GOTTEN AREA, R15=0
         LR    @15,@14                  ADDRESS OF AREA IN REGISTER 15
         ST    @15,8(,@13)              FORWARD CHAIN THIS SAVE AREA
         L     @01,@SIZDATD             LENGTH OF GOTTEN AREA
         ST    @01,88(,@15)             STORE LENGTH OF AREA
         LR    @14,@03                  LOAD BASE REGISTER OF MODULE
         LA    @01,23                   LOAD NEGATIVE OFFSET BYTE NO.
         SR    @14,@01                  NEGITIVE OFFSET 23 BYTES
         MVC   72(16,@15),0(@14)        GET MODULE NAME AND DATE
         B     GMN00200                 BYPASS SETTING ERROR
GMN00100 SR    @15,@15                  REGISTER 15 = 0 INDICATES ERROR
GMN00200 EQU   *                        R15 CONTAINS ADDRESS OR ZERO
*        REGISTER 15 CONTAINS EITHER THE ADDRESS OF GOTTEN CORE OR
*        ZERO IF THE GETMAIN WAS UNSUCCESSFUL.
*   RESPECIFY                                                      0377
*     RETCODE RESTRICTED;                                          0377
*   IF RETCODE=ZERO THEN            /* ERROR IN BUILDING MODULE WK 0378
*                                      AREA                          */
         LTR   RETCODE,RETCODE                                     0378
         BNZ   @RF00378                                            0378
*     DO;                                                          0379
*       OPWUACB->ACBERFLG=OPERR136; /* SET USER ACB ERROR FLAG       */
         L     @14,OPWUACB(,RCORE)                                 0380
         MVI   ACBERFLG(@14),X'88'                                 0380
*       PDPCODE=PP20;               /* SET PROBLEM CODE              */
         L     @14,OPWCOMWA(,RCORE)                                0381
         MVI   PDPCODE+280(@14),X'14'                              0381
*       CALL PROBDT2B;              /* PROBLEM DETERMINATION       0382
*                                      PROCESSING                    */
         BAL   @14,PROBDT2B                                        0382
*     END;                                                         0383
*   OPWMODWK=ON;                    /* INDICATE MODULE WORK AREA   0384
*                                      EXIST                         */
@RF00378 L     @14,OPWCURPT(,RCORE)                                0384
         OI    OPWMODWK(@14),B'01000000'                           0384
*   GEN(ST R13,4(RETCODE));         /* SAVE PREVIOUS SAVE AREA     0385
*                                      ADDRESS                       */
         ST R13,4(RETCODE)
*   R13=RETCODE;                    /* POINT TO MODULE WORK AREA     */
         LR    R13,RETCODE                                         0386
*   GEN(USING @DATD,R13);           /* ADDRESSABILITY FOR AUTOMATICS */
         USING @DATD,R13
*   MWASFIPT=ADDR(OPWSFI);          /* SFI AREA ADDRESS INTO CATALOG
*                                      PARAMETER LIST                */
         LA    @14,OPWSFI(,RCORE)                                  0388
         STCM  @14,7,MWASFIPT                                      0388
*   CALL ENQPARM;                   /* INITIALIZE ENQ PARAMETER LIST */
         BAL   @14,ENQPARM                                         0389
*   CALL LOCVAL;                    /* LOCATE AND VALIDITY CHECK DATA
*                                      SET ATTRIBUTES                */
         BAL   @14,LOCVAL                                          0390
*   IF OPWRSTRT=OFF THEN            /* THIS IS NOT A RESTART @Z30SSDT*/
         TM    OPWRSTRT(RCORE),B'00001000'                         0391
         BNZ   @RF00391                                            0391
*     IF OPWUPGR=ON THEN            /* OPEN FOR UPGRADE              */
         L     @14,OPWCURPT(,RCORE)                                0392
         TM    OPWUPGR(@14),B'00100000'                            0392
         BNO   @RF00392                                            0392
*       DO;                                                        0393
*         OPWBUFND=TWO;             /* SET NUMBER OF DATA BUFFERS    */
         MVC   OPWBUFND(4,RCORE),@CF00140                          0394
*         OPWBUFNI=ONE;             /* SET NUMBER OF INDEX BUFFERS   */
         MVC   OPWBUFNI(4,RCORE),@CF00059                          0395
*       END;                                                       0396
*     ELSE                          /* NOT OPEN UPGRADE              */
*       IF OPWCAMBL=ZERO×           /* IF NOT CONNECTING OR  @OZ04213*/
*           OPWPRTBL=ON THEN        /* A PARTIAL BUILD       @OZ04213*/
         B     @RC00392                                            0397
@RF00392 L     @14,OPWCAMBL(,RCORE)                                0397
         LTR   @14,@14                                             0397
         BZ    @RT00397                                            0397
         L     @14,OPWCURPT(,RCORE)                                0397
         TM    OPWPRTBL(@14),B'00001000'                           0397
         BNO   @RF00397                                            0397
@RT00397 DS    0H                                                  0398
*         DO;                                                      0398
*           OPWWRKPT=OPWDTWRK;      /* POINT TO DATA AMB WORK AREA   */
         L     @14,OPWDTWRK(,RCORE)                                0399
         ST    @14,OPWWRKPT(,RCORE)                                0399
*           CALL BUFNOSET;          /* CALCULATE BUFND & BUFNI       */
         BAL   @14,BUFNOSET                                        0400
*           OPWWRKPT=ZERO;          /* ZERO AMB WORK AREA POINTER    */
         SLR   @14,@14                                             0401
         ST    @14,OPWWRKPT(,RCORE)                                0401
*         END;                                                     0402
*   IF AMBLCAT=OFF&                 /* NOT CATALOG,NOT SCRA,NOT VVIC */
*       AMBLUCRA=OFF&               /* AND NOT UCRA,                 */
*       ACBRST=OFF THEN             /* AND NOT RESET                 */
@RF00397 DS    0H                                                  0403
@RC00392 DS    0H                                                  0403
@RF00391 L     @14,ACBAMBL(,RACB)                                  0403
         TM    AMBLCAT(@14),B'00000110'                            0403
         BNZ   @RF00403                                            0403
         TM    ACBRST(RACB),B'00000100'                            0403
         BNZ   @RF00403                                            0403
*     DO;                                                          0404
*       CALL AMSHARE;               /* SHARE PROCESSING              */
         BAL   @14,AMSHARE                                         0405
*       IF OPWCAMBL^=ZERO THEN      /* CONNECT PROCESSING            */
         L     @14,OPWCAMBL(,RCORE)                                0406
         LTR   @14,@14                                             0406
         BZ    @RF00406                                            0406
*         DO;                                                      0407
*           AMBLDTA=OPWCAMBL->AMBLDTA;/* CONNECT TO DATA AMB         */
         L     @05,ACBAMBL(,RACB)                                  0408
         L     @11,AMBLDTA(,@14)                                   0408
         ST    @11,AMBLDTA(,@05)                                   0408
*           AMBLIX=OPWCAMBL->AMBLIX;/* CONNECT TO INDEX AMB          */
         L     @14,AMBLIX(,@14)                                    0409
         ST    @14,AMBLIX(,@05)                                    0409
*           IF OPWPRTBL=ON&         /* PARTIAL BUILD INDICATED AND   */
*               (AMBLLSR=OFF&AMBLGSR=OFF) THEN/* NOT DBDC            */
         L     @14,OPWCURPT(,RCORE)                                0410
         TM    OPWPRTBL(@14),B'00001000'                           0410
         BNO   @RF00410                                            0410
         TM    AMBLLSR(@05),B'01100000'                            0410
         BNZ   @RF00410                                            0410
*             DO;                                                  0411
*               MWABYTES=LENGTH(IDABLPRM);/* LENGTH OF IDABLPRM      */
         MVC   MWABYTES(3),@CF04661+1                              0412
*               MWASPOOL=WKPOOL;    /* SUBPOOL NUMBER                */
         MVI   MWASPOOL,X'FC'                                      0413
*               CALL GETCORE;       /* BUILD IDABLPRM                */
         BAL   @14,GETCORE                                         0414
*               MWABLPTR=MWADDRES;  /* POINT TO CORE FOR IDABLPRM    */
         L     MWABLPTR,MWADDRES                                   0415
*               BLPUACB=RACB;       /* ADDRESS OF ACB                */
         ST    RACB,BLPUACB(,MWABLPTR)                             0416
*               BLPFPART=ON;        /* INDICATE PARTIAL BUILD        */
*               BLPFDATA=ON;        /* INDICATE DATA AMB             */
         OI    BLPFPART(MWABLPTR),B'10001000'                      0418
*               IF OPWUPGR=ON THEN  /* UPGRADE                       */
         L     @14,OPWCURPT(,RCORE)                                0419
         TM    OPWUPGR(@14),B'00100000'                            0419
         BNO   @RF00419                                            0419
*                 BLPFUPGR=ON;      /* YES, INDICATE TO IDA0192Y     */
         OI    BLPFUPGR(MWABLPTR),B'01000000'                      0420
*               IF OPWPATH=ON THEN  /* PATH                          */
@RF00419 L     @14,OPWCURPT(,RCORE)                                0421
         TM    OPWPATH(@14),B'01000000'                            0421
         BNO   @RF00421                                            0421
*                 BLPFPATH=ON;      /* YES, INDICATE TO IDA0192Y     */
         OI    BLPFPATH(MWABLPTR),B'00100000'                      0422
*               RACB=MWABLPTR;      /* LOAD ADDRESS OF PARAMETER LIST*/
@RF00421 LR    RACB,MWABLPTR                                       0423
*               CALL IDA0192Y;      /* BUILD PARTIAL CONTROL BLOCK   */
         L     @15,@CV05345                                        0424
         BALR  @14,@15                                             0424
*               RSTATRTN=IDAR192B;  /* IND 192B IN CONTROL   @Z30SSDP*/
         L     @14,OPWCOMWA(,RCORE)                                0425
         MVC   RSTATRTN(4,@14),@CC04253                            0425
*               RACB=BLPUACB;       /* RELOAD ADDRESS OF ACB         */
         L     RACB,BLPUACB(,MWABLPTR)                             0426
*               IF RETCODE^=ZERO THEN/* ERROR EXIST                  */
         LTR   RETCODE,RETCODE                                     0427
         BZ    @RF00427                                            0427
*                 DO;                                              0428
*                   MWAPDPRM=RETCODE;/* SAVE RETURN CODE             */
         ST    RETCODE,MWAPDPRM                                    0429
*                   CALL PROBDT2B;  /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0430
*                 END;                                             0431
*               BLPFDATA=OFF;       /* TURN OFF DATA INDICATOR       */
@RF00427 NI    BLPFDATA(MWABLPTR),B'11110111'                      0432
*               IF AMBLIX^=ZERO THEN/* IF KSDS                       */
         L     @14,ACBAMBL(,RACB)                                  0433
         L     @14,AMBLIX(,@14)                                    0433
         LTR   @14,@14                                             0433
         BZ    @RF00433                                            0433
*                 DO;                                              0434
*                   BLPFINDX=ON;    /* INDICATE INDEX AMB            */
         OI    BLPFINDX(MWABLPTR),B'00000100'                      0435
*                   RACB=MWABLPTR;  /* LOAD ADDRESS OF PARAMETER LIST*/
         LR    RACB,MWABLPTR                                       0436
*                   CALL IDA0192Y;  /* BUILD PARTIAL CONTROL BLOCK   */
         L     @15,@CV05345                                        0437
         BALR  @14,@15                                             0437
*                   RSTATRTN=IDAR192B;/* 192B IN CONTROL     @Z30SSDP*/
         L     @14,OPWCOMWA(,RCORE)                                0438
         MVC   RSTATRTN(4,@14),@CC04253                            0438
*                   RACB=BLPUACB;   /* RELOAD ADDRESS OF ACB         */
         L     RACB,BLPUACB(,MWABLPTR)                             0439
*                   IF RETCODE^=ZERO THEN/* IF ERROR EXIST           */
         LTR   RETCODE,RETCODE                                     0440
         BZ    @RF00440                                            0440
*                     DO;                                          0441
*                       MWAPDPRM=RETCODE;/* SAVE RETURN CODE         */
         ST    RETCODE,MWAPDPRM                                    0442
*                       CALL PROBDT2B;/* PROBLEM DETERMINATION       */
         BAL   @14,PROBDT2B                                        0443
*                     END;                                         0444
*                   BLPFINDX=OFF;   /* TURN OFF INDEX INDICATOR      */
@RF00440 NI    BLPFINDX(MWABLPTR),B'11111011'                      0445
*                 END;                                             0446
*               CALL FREECORE;      /* FREE CORE STORAGE FOR IDABLPRM*/
@RF00433 BAL   @14,FREECORE                                        0447
*             END;                                                 0448
*           MWATERM=ON;             /* INDICATE TERMINATION          */
@RF00410 OI    MWATERM,B'10000000'                                 0449
*         END;                                                     0450
*     END;                                                         0451
@RF00406 DS    0H                                                  0452
*   IF MWATERM=OFF THEN             /* IF NOT TERMINATION            */
@RF00403 TM    MWATERM,B'10000000'                                 0452
         BNZ   @RF00452                                            0452
*     DO;                                                          0453
*       CALL VOLPROC;               /* VOLUME PROCESSING             */
         BAL   @14,VOLPROC                                         0454
*       IF(AMBLLSR=ON×AMBLGSR=ON)&AMBLDFR=ON&/* GSR/LSR & DFR      0455
*                                                            @Z30SSDP*/
*           (OPWDTWRK->CTHELP=ON×OPWDTWRK->CTSDHELP=ON) THEN/* AND 0455
*                                      SHARE OPTION = 4      @ZA30758*/
         L     @14,ACBAMBL(,RACB)                                  0455
         TM    AMBLLSR(@14),B'01100000'                            0455
         BZ    @RF00455                                            0455
         TM    AMBLDFR(@14),B'00000001'                            0455
         BNO   @RF00455                                            0455
         L     @14,OPWDTWRK(,RCORE)                                0455
         TM    CTHELP(@14),B'00011000'                             0455
         BZ    @RF00455                                            0455
*         DO;                                                      0456
*           MWAPCODE=PP164;         /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'A4'                                      0457
*           CALL PROBDT2B;          /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0458
*         END;                                                     0459
*       CALL IDA0192Z;              /* BUILD CONTROL BLOCK           */
@RF00455 L     @15,@CV05348                                        0460
         BALR  @14,@15                                             0460
*       RSTATRTN=IDAR192B;          /* IND 192B IN CONTROL   @Z30SSDP*/
         L     @14,OPWCOMWA(,RCORE)                                0461
         MVC   RSTATRTN(4,@14),@CC04253                            0461
*       IF RETCODE^=ZERO THEN       /* IF ERROR EXIST                */
         LTR   RETCODE,RETCODE                                     0462
         BZ    @RF00462                                            0462
*         DO;                                                      0463
*           MWAPDPRM=RETCODE;       /* SAVE RETURN CODE              */
         ST    RETCODE,MWAPDPRM                                    0464
*           CALL PROBDT2B;          /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0465
*         END;                                                     0466
*       IF BIBVIRT=ON&AMBLPRIM=ON THEN/* PRIMARY OPEN WITH VIRTUAL 0467
*                                      DEVICE                        */
@RF00462 L     @14,ACBAMBL(,RACB)                                  0467
         L     @05,AMBLBIB(,@14)                                   0467
         TM    BIBVIRT(@05),B'10000000'                            0467
         BNO   @RF00467                                            0467
         TM    AMBLPRIM(@14),B'10000000'                           0467
         BNO   @RF00467                                            0467
*         CALL VIRTPROC;            /* ACQUIRE VIRTUAL DEVICE        */
         BAL   @14,VIRTPROC                                        0468
*       IF AMBLBASE=ON&             /* IF BASE AMBL AND              */
*           OPWRSTRT=OFF&           /* NOT A RESTART AND     @Z30SSDT*/
*           AMBLDTA->AMBCREAT=ON THEN/* DATA AMB INDICATE CREATE     */
@RF00467 L     @14,ACBAMBL(,RACB)                                  0469
         TM    AMBLBASE(@14),B'00010000'                           0469
         BNO   @RF00469                                            0469
         TM    OPWRSTRT(RCORE),B'00001000'                         0469
         BNZ   @RF00469                                            0469
         L     @14,AMBLDTA(,@14)                                   0469
         TM    AMBCREAT(@14),B'10000000'                           0469
         BNO   @RF00469                                            0469
*         CALL PRFMT;               /* PRE-FORMAT DIRECT ACCESS SPACE*/
         BAL   @14,PRFMT                                           0470
*     END;                                                         0471
@RF00469 DS    0H                                                  0472
*LTRM192B:                                                         0472
*   CALL TERM192B;                  /* TERMINATION PROCESSING        */
@RF00452 DS    0H                                                  0472
LTRM192B BAL   @14,TERM192B                                        0472
*   GEN(ST RETCODE,16(R13));        /* STORE RETURN CODE             */
         ST RETCODE,16(R13)
*   GEN(LM RET,R12,12(R13));        /* RESTORE CALLER REGISTERS      */
         LM RET,R12,12(R13)
*   RESPECIFY                                                      0475
*     RETCODE UNRESTRICTED;                                        0475
*   GEN(BR RET);                    /* EXIT MODULE                   */
         BR RET
*LOCVAL:                                                           0477
*                                                                  0477
*/********************************************************************/
*/*                                                                  */
*/*     01 FUNCTION - LOCATE DATA SET ATTRIBUTES AND VALIDITY CHECK  */
*/*                   THE DATA SET.                                  */
*/*     01 INPUT -    1. PARAMETER LIST FOR IDA0192C TO GET DATA SET */
*/*                      ATTRIBUTES.                                 */
*/*     01 OUTPUT -   1. VERIFIED DATA SET ATTRIBUTES IN THEIR AMB   */
*/*                      WORK AREAS.                                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0477
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0477
LOCVAL   DS    0H                                                  0478
*   RESPECIFY                                                      0478
*     RET RESTRICTED;                                              0478
*   RESPECIFY                                                      0479
*     IDAAMDSB BASED(ADDR(CTAMDSB));/* REBASE AMDSB                  */
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0480
*   RESPECIFY                                                      0481
*     RET UNRESTRICTED;                                            0481
*   MWAPFUNC=PDF61;                 /* SET FUNCTION CODE             */
         MVI   MWAPFUNC,X'3D'                                      0482
*   IF OPWCAMBL^=ZERO&ACBRST=ON THEN/* CONNECTING TO EXISTING DATA 0483
*                                      SET AND RESET INDICATED       */
         L     @05,OPWCAMBL(,RCORE)                                0483
         LTR   @05,@05                                             0483
         BZ    @RF00483                                            0483
         TM    ACBRST(RACB),B'00000100'                            0483
         BNO   @RF00483                                            0483
*     DO;                                                          0484
*       MWAPCODE=PP52;              /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'34'                                      0485
*       CALL PROBDT2B;              /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0486
*     END;                                                         0487
*   IF OPWDTWRK=ZERO THEN           /* NO AMB WORK AREAS     @ZA03663*/
@RF00483 L     @05,OPWDTWRK(,RCORE)                                0488
         LTR   @05,@05                                             0488
         BNZ   @RF00488                                            0488
*     DO;                                                          0489
*       RESPECIFY                                                  0490
*        (R1,                                                      0490
*         RETCODE) RESTRICTED;                                     0490
*       MWACATID=OP2;               /* INDICATE CALLER IS OPEN     0491
*                                      CLUSTER                       */
         MVI   MWACATID,X'2C'                                      0491
*       R1=ADDR(MWACATPM);          /* ADDRESS OF PARM LIST FOR 192C */
         LA    R1,MWACATPM                                         0492
*       RSTATRTN=IDAR192C;          /* INDICATE CALL TO 192C @Z30SSDP*/
         L     @14,OPWCOMWA(,RCORE)                                0493
         MVC   RSTATRTN(4,@14),@CC04255                            0493
*       CALL IDA0192C;              /* CALL CATALOG INTERFACE ROUTINE*/
         L     @15,@CV05359                                        0494
         BALR  @14,@15                                             0494
*       RSTATRTN=IDAR192B;          /* INDIC 192B IN CONTROL @Z30SSDP*/
         L     @14,OPWCOMWA(,RCORE)                                0495
         MVC   RSTATRTN(4,@14),@CC04253                            0495
*       IF RETCODE^=ZERO THEN       /* ERROR                         */
         LTR   RETCODE,RETCODE                                     0496
         BZ    @RF00496                                            0496
*         DO;                                                      0497
*           MWAPDPRM=RETCODE;       /* SAVE RETURN CODE              */
         ST    RETCODE,MWAPDPRM                                    0498
*           CALL PROBDT2B;          /* GO TO PROBLEM DETERMINATION   */
         BAL   @14,PROBDT2B                                        0499
*         END;                                                     0500
*       OPWDTWRK=MWADTAWK;          /* SAVE DATA AMB WORK AREA     0501
*                                      POINTER IN ACB WORK AREA      */
@RF00496 L     @14,MWADTAWK                                        0501
         ST    @14,OPWDTWRK(,RCORE)                                0501
*       OPWIXWRK=MWAIDXWK;          /* SAVE INDEX AMB WORK AREA    0502
*                                      POINTER IN ACB WORK AREA      */
         L     @14,MWAIDXWK                                        0502
         ST    @14,OPWIXWRK(,RCORE)                                0502
*       IF ACBRST=ON&ACBSDS=OFF THEN/* RESET AND NOT SYSTEM DS     0503
*                                                            @Z40WSRL*/
         TM    ACBRST(RACB),B'00000100'                            0503
         BNO   @RF00503                                            0503
         TM    ACBSDS(RACB),B'00000010'                            0503
         BNZ   @RF00503                                            0503
*         CALL AMSHARE;             /* GET EXCLUSIVE CONTROL         */
         BAL   @14,AMSHARE                                         0504
*       OPWWRKPT=OPWDTWRK;          /* POINT TO DATA AMB WORK AREA   */
@RF00503 L     @14,OPWDTWRK(,RCORE)                                0505
         ST    @14,OPWWRKPT(,RCORE)                                0505
*       CALL DSVALCHK;              /* CHECK VALIDITY OF DATA SET    */
         BAL   @14,DSVALCHK                                        0506
*       IF AMBLKSDS=ON THEN         /* IF KSDS                       */
         L     @14,ACBAMBL(,RACB)                                  0507
         TM    AMBLKSDS(@14),B'00000100'                           0507
         BNO   @RF00507                                            0507
*         DO;                                                      0508
*           OPWWRKPT=OPWIXWRK;      /* POINT TO INDEX AMB WORK AREA  */
         L     @14,OPWIXWRK(,RCORE)                                0509
         ST    @14,OPWWRKPT(,RCORE)                                0509
*           CALL DSVALCHK;          /* CHECK VALIDITY OF INDEX DATA
*                                      SET                           */
         BAL   @14,DSVALCHK                                        0510
*         END;                                                     0511
*       RESPECIFY                                                  0512
*        (R1,                                                      0512
*         RETCODE) UNRESTRICTED;                                   0512
@RF00507 DS    0H                                                  0513
*       OPWWRKPT=OPWDTWRK;          /* POINT TO DATA AMB WORK AREA   */
         L     @05,OPWDTWRK(,RCORE)                                0513
         ST    @05,OPWWRKPT(,RCORE)                                0513
*       MWAPTRB=ADDR(CTAMDSB);      /* POINT TO AMDSB IN AMB WORK  0514
*                                      AREA                          */
         LA    @05,CTAMDSB(,@05)                                   0514
         ST    @05,MWAPTRB                                         0514
*       IF(AMBLLSR=ON&              /* IF LSR                @Z30SSDP*/
*           MWAPTRB->AMDKEYLN>VSRTKL)×/* & KEY LEN GT MAX    @Z30SSDP*/
*           (AMBLGSR=ON&            /* OR GSR AND KEYLEN     @Z30SSDP*/
*           MWAPTRB->AMDKEYLN>CBSVPTR((DXUKEY/SIXTEEN)+ONE)->VSRTKL)
*         THEN                      /* GET MAX KEY LENGTH FROM VSRT
*                                                            @Z40ESSR*/
         L     @01,ACBAMBL(,RACB)                                  0515
         TM    AMBLLSR(@01),B'00100000'                            0515
         BNO   @GL00011                                            0515
         L     @01,PSATOLD                                         0515
         L     @01,TCBJSCB(,@01)                                   0515
         L     @01,JSCBSHR(,@01)                                   0515
         L     @01,VATVPTR(,@01)                                   0515
         LH    @05,AMDKEYLN(,@05)                                  0515
         SLR   @00,@00                                             0515
         IC    @00,VSRTKL(,@01)                                    0515
         CR    @05,@00                                             0515
         BH    @RT00515                                            0515
@GL00011 L     @05,ACBAMBL(,RACB)                                  0515
         TM    AMBLGSR(@05),B'01000000'                            0515
         BNO   @RF00515                                            0515
         L     @05,OPWCOMWA(,RCORE)                                0515
         SLR   @15,@15                                             0515
         IC    @15,DXUKEY(,@05)                                    0515
         SRL   @15,4                                               0515
         SLA   @15,3                                               0515
         L     @05,FLCCVT                                          0515
         L     @05,CVTCBSP(,@05)                                   0515
         L     @05,CBSVPTR(@15,@05)                                0515
         L     @01,MWAPTRB                                         0515
         LH    @15,AMDKEYLN(,@01)                                  0515
         SLR   @14,@14                                             0515
         IC    @14,VSRTKL(,@05)                                    0515
         CR    @15,@14                                             0515
         BNH   @RF00515                                            0515
@RT00515 DS    0H                                                  0516
*         DO;                                                      0516
*           MWAPCODE=PP156;         /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'9C'                                      0517
*           CALL PROBDT2B;          /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0518
*         END;                                                     0519
*       IF AMBLKSDS=ON THEN         /* IF KSDS                       */
@RF00515 L     @05,ACBAMBL(,RACB)                                  0520
         TM    AMBLKSDS(@05),B'00000100'                           0520
         BNO   @RF00520                                            0520
*         DO;                                                      0521
*           OPWWRKPT=OPWIXWRK;      /* POINT TO INDEX AMB WORK AREA  */
         L     @15,OPWIXWRK(,RCORE)                                0522
         ST    @15,OPWWRKPT(,RCORE)                                0522
*           MWAPTRA=ADDR(CTAMDSB);  /* POINT TO AMDSB IN AMB WORK  0523
*                                      AREA                          */
         LA    MWAPTRA,CTAMDSB(,@15)                               0523
*           IF MWAPTRA->AMDSTSP<    /* IF INDEX TIMESTAMP LESS THAN  */
*               MWAPTRB->AMDSTSP THEN/* DATA TIMESTAMP               */
         L     @01,MWAPTRB                                         0524
         CLC   AMDSTSP(8,MWAPTRA),AMDSTSP(@01)                     0524
         BNL   @RF00524                                            0524
*             DO;                                                  0525
*               MWAPCODE=PP58;      /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'3A'                                      0526
*               CALL PROBDT2B;      /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0527
*             END;                                                 0528
*         END;                                                     0529
@RF00524 DS    0H                                                  0530
*       OPWWRKPT=ZERO;              /* ZERO AMB WORK AREA POINTER    */
@RF00520 SLR   @05,@05                                             0530
         ST    @05,OPWWRKPT(,RCORE)                                0530
*     END;                                                         0531
*   RESPECIFY                                                      0532
*     IDAAMDSB BASED(AMBDSB);       /*                       @ZA29324*/
@RF00488 DS    0H                                                  0533
*   RESPECIFY                                                      0533
*     RET RESTRICTED;                                              0533
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        0534
*   RESPECIFY                                                      0535
*     RET UNRESTRICTED;                                            0535
*   END LOCVAL;                                                    0536
@EL00002 DS    0H                                                  0536
@EF00002 DS    0H                                                  0536
@ER00002 BR    @14                                                 0536
*DSVALCHK:                                                         0537
*                                                                  0537
*/********************************************************************/
*/*                                                                  */
*/*       01 FUNCTION - A SUB FUNCTION OF LOCVAL TO VERIFY INDIVIDUAL*/
*/*                     AMB DATA SET ATTRIBUTES.                     */
*/*       01 INPUT -    1. POINTER TO AMB WORK AREA IN OPWWRKPT.     */
*/*       01 OUTPUT -   1. AMB ATTRIBUTES VERIFIED.                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0537
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0537
DSVALCHK DS    0H                                                  0538
*   RESPECIFY                                                      0538
*     RET RESTRICTED;                                              0538
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        0539
*   RESPECIFY                                                      0540
*     RET UNRESTRICTED;                                            0540
*   RESPECIFY                                                      0541
*     IDAAMDSB BASED(ADDR(CTAMDSB));/* RFY IDAAMDSB          @ZA29324*/
*   IF CTRDONLY=ON&ACBOUT=ON THEN   /* IF WRITE INHIBIT ON   @ZA07533
*                                      AND OPENING FOR OUTPUT      0542
*                                                            @ZA07553
*                                      OR UPDATE PROCESSING  @ZA07553*/
         L     @05,OPWWRKPT(,RCORE)                                0542
         TM    CTRDONLY(@05),B'00000100'                           0542
         BNO   @RF00542                                            0542
         TM    ACBOUT(RACB),B'00000010'                            0542
         BNO   @RF00542                                            0542
*     DO;                           /*                       @ZA07553*/
*       MWAPCODE=PP52;              /* SET ERROR CODE        @ZA07553*/
         MVI   MWAPCODE,X'34'                                      0544
*       CALL PROBDT2B;              /* PROCESS ERROR         @ZA07553*/
         BAL   @14,PROBDT2B                                        0545
*     END;                          /*                       @ZA07553*/
*   IF(OPWPSDS=ON&CTOPEN=ON)×       /* PAGE SPACE DATA SET AND THE 0547
*                                      OPEN INDICATOR IS ON OR     0547
*                                                            @Z40WSRL*/
*       (CTINTDS=ON&CTHURBA^=ZERO) THEN/* INTERNAL DATA SET BUT NOT
*                                      CREATE MODE           @Z40WSRL*/
@RF00542 TM    OPWPSDS(RCORE),B'00000001'                          0547
         BNO   @GL00015                                            0547
         L     @05,OPWWRKPT(,RCORE)                                0547
         TM    CTOPEN(@05),B'10000000'                             0547
         BO    @RT00547                                            0547
@GL00015 L     @05,OPWWRKPT(,RCORE)                                0547
         TM    CTINTDS(@05),B'00000010'                            0547
         BNO   @RF00547                                            0547
         L     @05,CTHURBA(,@05)                                   0547
         LTR   @05,@05                                             0547
         BZ    @RF00547                                            0547
@RT00547 DS    0H                                                  0548
*     DO;                           /* OPEN INDICATOR IS ON  @Z30SSRL*/
*       MWAPCODE=PP76;              /* SET PROBLEM CODE      @Z30SSRL*/
         MVI   MWAPCODE,X'4C'                                      0549
*       CALL PROBDT2B;              /* PROBLEM DETERMINATION @Z30SSRL*/
         BAL   @14,PROBDT2B                                        0550
*     END;                                                         0551
*   IF CTUNUSE=ON THEN              /* DATA SET IS UNUSABLE          */
@RF00547 L     @05,OPWWRKPT(,RCORE)                                0552
         TM    CTUNUSE(@05),B'00000001'                            0552
         BNO   @RF00552                                            0552
*     DO;                                                          0553
*       IF AMBLWRIT=ON×ACBRST=ON THEN/* IF OUTPUT OR RESET           */
         L     @05,ACBAMBL(,RACB)                                  0554
         TM    AMBLWRIT(@05),B'00100000'                           0554
         BO    @RT00554                                            0554
         TM    ACBRST(RACB),B'00000100'                            0554
         BNO   @RF00554                                            0554
@RT00554 DS    0H                                                  0555
*         DO;                                                      0555
*           MWAPCODE=PP46;          /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'2E'                                      0556
*           CALL PROBDT2B;          /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0557
*         END;                                                     0558
*       MWAPCODE=PP45;              /* SET PROBLEM CODE              */
@RF00554 MVI   MWAPCODE,X'2D'                                      0559
*       CALL PROBDT2B;              /* PROBLEM DETERMIANTION         */
         BAL   @14,PROBDT2B                                        0560
*     END;                                                         0561
*   IF CTHURBA=ZERO×                /* IF CREATE MODE OR     @ZA29324*/
*       (AMDNLR=ZERO&               /* NO. OF RCDS=0 AND     @ZA29324*/
*       AMDDELR=ZERO&               /* NO. OF DELETED RCDS=0 &     0562
*                                                            @ZA29324*/
*       AMDRANGE=ON&                /* A RANGE D/S AND       @ZA29324*/
*       ACBCAT=OFF&ACBUCRA=OFF&ACBSCRA=OFF) THEN/* NOT A CATALOG,  0562
*                                      UCRA OR SCRA          @ZA29324*/
@RF00552 SLR   @05,@05                                             0562
         L     @15,OPWWRKPT(,RCORE)                                0562
         CL    @05,CTHURBA(,@15)                                   0562
         BE    @RT00562                                            0562
         AL    @15,@CF04580                                        0562
         C     @05,AMDNLR(,@15)                                    0562
         BNE   @RF00562                                            0562
         C     @05,AMDDELR(,@15)                                   0562
         BNE   @RF00562                                            0562
         TM    AMDRANGE(@15),B'00000100'                           0562
         BNO   @RF00562                                            0562
         TM    ACBCAT(RACB),B'00011100'                            0562
         BNZ   @RF00562                                            0562
@RT00562 DS    0H                                                  0563
*     DO;                                                          0563
*       IF(AMBLLSR=ON×AMBLGSR=ON) THEN/* LSR/GSR & CREATE MDE      0564
*                                                            @Z30SSDP*/
         L     @05,ACBAMBL(,RACB)                                  0564
         TM    AMBLLSR(@05),B'01100000'                            0564
         BZ    @RF00564                                            0564
*         DO;                                                      0565
*           MWAPCODE=PP152;         /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'98'                                      0566
*           CALL PROBDT2B;          /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0567
*         END;                                                     0568
*       IF AMBLPATH=ON THEN         /* IF OPEN PATH                  */
@RF00564 L     @05,ACBAMBL(,RACB)                                  0569
         TM    AMBLPATH(@05),B'10000000'                           0569
         BNO   @RF00569                                            0569
*         DO;                                                      0570
*           MWAPCODE=PP38;          /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'26'                                      0571
*           CALL PROBDT2B;          /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0572
*         END;                                                     0573
*       IF AMBLUPGR=ON THEN         /* IF EMPTY UPGRADE              */
@RF00569 L     @05,ACBAMBL(,RACB)                                  0574
         TM    AMBLUPGR(@05),B'01000000'                           0574
         BNO   @RF00574                                            0574
*         DO;                                                      0575
*           OPWEMPUP=ON;            /* INDICATE EMPTY UPGRADE IN OPW */
         L     @05,OPWCURPT(,RCORE)                                0576
         OI    OPWEMPUP(@05),B'00100000'                           0576
*           MWAPCODE=PP39;          /* PROBLEM CODE                  */
         MVI   MWAPCODE,X'27'                                      0577
*           CALL PROBDT2B;          /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0578
*           RETURN TO LTRM192B;     /* TERMINATION PROCESSING        */
         LA    @14,LTRM192B                                        0579
@EL00003 DS    0H                                                  0579
@EF00003 DS    0H                                                  0579
@ER00003 BR    @14                                                 0579
*         END;                                                     0580
*       IF OPWFSTP=ON THEN          /* IF THIS IS ICI PROCESSING     */
@RF00574 TM    OPWFSTP(RCORE),B'00010000'                          0581
         BNO   @RF00581                                            0581
*         DO;                                                      0582
*           MWAPCODE=PP49;          /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'31'                                      0583
*           CALL PROBDT2B;          /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0584
*         END;                                                     0585
*     END;                                                         0586
@RF00581 DS    0H                                                  0587
*   IF OPWFSTP=ON&                  /* IF THIS IS ICI PROCESSING     */
*       (AMDSDT=ON×AMDREPL=ON×      /* SEQUENCE SET WITH DATA OR   0587
*                                      REPLICATION OR                */
*       CTBLKSZ^=CTCISIZ) THEN      /* BLOCK SIZE NOT EQUAL CI SIZE  */
@RF00562 TM    OPWFSTP(RCORE),B'00010000'                          0587
         BNO   @RF00587                                            0587
         L     @05,OPWWRKPT(,RCORE)                                0587
         TM    AMDSDT+132(@05),B'00110000'                         0587
         BNZ   @RT00587                                            0587
         CLC   CTBLKSZ(4,@05),CTCISIZ(@05)                         0587
         BE    @RF00587                                            0587
@RT00587 DS    0H                                                  0588
*     DO;                                                          0588
*       MWAPCODE=PP47;              /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'2F'                                      0589
*       CALL PROBDT2B;              /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0590
*     END;                                                         0591
*   RESPECIFY                                                      0592
*     RET RESTRICTED;                                              0592
@RF00587 DS    0H                                                  0593
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        0593
*   RESPECIFY                                                      0594
*     RET UNRESTRICTED;                                            0594
*   RESPECIFY                                                      0595
*     IDAAMDSB BASED(AMBDSB);       /* REBASE AMDSB          @ZA12895*/
*   END DSVALCHK;                                                  0596
         B     @EL00003                                            0596
*BUFNOSET:                                                         0597
*                                                                  0597
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION -  THIS ROUTINE RESOLVES TWO THINGS. THE NUMBER       */
*/*               OF BUFFERS REQUIRED FOR THE DATA COMPONENT         */
*/*               AND THE NUMBER OF BUFFERS FOR THE INDEX COMPONENT  */
*/*   INPUT -     1. BUFFERS ATTRIBUTES FOR ACB AND JFCB             */
*/*   OUTPUT -    1. SET BUFND AND BUFNI IN OPEN ACB WORK AREA       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0597
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0597
BUFNOSET DS    0H                                                  0598
*   RESPECIFY                                                      0598
*     RET RESTRICTED;                                              0598
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0599
*   RESPECIFY                                                      0600
*     RET UNRESTRICTED;                                            0600
*   MWABUFND=ZERO;                  /* INSURE ZERO                   */
         SLR   MWABUFND,MWABUFND                                   0601
*   MWABUFNI=ZERO;                  /* INSURE ZERO                   */
         SLR   MWABUFNI,MWABUFNI                                   0602
*   MWABUFSP=ZERO;                  /* INSURE ZERO                   */
         SLR   MWABUFSP,MWABUFSP                                   0603
*   MWACISZD=OPWDTWRK->CTCISIZ;     /* GET DATA AMB CI SIZE          */
         L     @05,OPWDTWRK(,RCORE)                                0604
         L     MWACISZD,CTCISIZ(,@05)                              0604
*   IF AMBLKSDS=ON THEN             /* IF THIS IS A KSDS             */
         L     @06,ACBAMBL(,RACB)                                  0605
         TM    AMBLKSDS(@06),B'00000100'                           0605
         BNO   @RF00605                                            0605
*     MWACISZI=OPWIXWRK->CTCISIZ;   /* GET INDEX AMB CI SIZE         */
         L     @05,OPWIXWRK(,RCORE)                                0606
         L     MWACISZI,CTCISIZ(,@05)                              0606
*   ELSE                            /* IF NOT A KSDS                 */
*     MWACISZI=ZERO;                /* ZERO THE INDEX AMB CI SIZE    */
         B     @RC00605                                            0607
@RF00605 SLR   MWACISZI,MWACISZI                                   0607
*   IF AMBLBASE=OFF×                /* NOT OPEN BASE CLUSTER WITH    */
*       OPWPDTCI=ZERO THEN          /* PATH STRUCTURE ALREADY EXIST  */
@RC00605 L     @05,ACBAMBL(,RACB)                                  0608
         TM    AMBLBASE(@05),B'00010000'                           0608
         BZ    @RT00608                                            0608
         L     @05,OPWPDTCI-1(,RCORE)                              0608
         LA    @05,0(,@05)                                         0608
         LTR   @05,@05                                             0608
         BNZ   @RF00608                                            0608
@RT00608 DS    0H                                                  0609
*     DO;                                                          0609
*       IF JFCBADBF=ZERO THEN       /* IF DATA BFRS NOT SPEC IN JFCB */
         L     @05,OPWCOMWA(,RCORE)                                0610
         LH    @05,JFCBADBF+100(,@05)                              0610
         LTR   @05,@05                                             0610
         BNZ   @RF00610                                            0610
*         MWABUFND=ACBBUFND;        /* USE VALUE FROM ACB            */
         LH    MWABUFND,ACBBUFND(,RACB)                            0611
*       ELSE                        /* IF DATA BFRS SPEC IN JFCB     */
*         MWABUFND=JFCBADBF;        /* USE VALUE FROM JFCB           */
         B     @RC00610                                            0612
@RF00610 L     @05,OPWCOMWA(,RCORE)                                0612
         LH    MWABUFND,JFCBADBF+100(,@05)                         0612
*       IF JFCBAXBF=ZERO THEN       /* IF INDEX BFRS NOT SPEC IN JFCB*/
@RC00610 L     @08,OPWCOMWA(,RCORE)                                0613
         LH    @08,JFCBAXBF+100(,@08)                              0613
         LTR   @08,@08                                             0613
         BNZ   @RF00613                                            0613
*         MWABUFNI=ACBBUFNI;        /* USE VALUE FROM ACB            */
         LH    MWABUFNI,ACBBUFNI(,RACB)                            0614
*       ELSE                        /* IF INDEX BFRS SPEC IN JFCB    */
*         MWABUFNI=JFCBAXBF;        /* USE VALUE FROM JFCB           */
         B     @RC00613                                            0615
@RF00613 L     @05,OPWCOMWA(,RCORE)                                0615
         LH    MWABUFNI,JFCBAXBF+100(,@05)                         0615
*       IF JFCBABFS=ZERO THEN       /* IF MWABFSPACE NOT SPEC IN JFCB*/
@RC00613 L     @05,OPWCOMWA(,RCORE)                                0616
         ICM   @15,7,JFCBABFS+100(@05)                             0616
         BNZ   @RF00616                                            0616
*         MWABFSP=ACBBUFSP;         /* USE VALUE FROM ACB            */
         L     @05,ACBBUFSP(,RACB)                                 0617
         ST    @05,MWABFSP                                         0617
*       ELSE                        /* IF BUFSPACE SPEC IN JFCB      */
*         MWABFSP=JFCBABFS;         /* USE VALUE FROM JFCB           */
         B     @RC00616                                            0618
@RF00616 L     @05,OPWCOMWA(,RCORE)                                0618
         SLR   @15,@15                                             0618
         ICM   @15,7,JFCBABFS+100(@05)                             0618
         ST    @15,MWABFSP                                         0618
*     END;                                                         0619
@RC00616 DS    0H                                                  0620
*   IF OPWCAT=ON THEN               /* IF CATALOG DATA SET           */
@RF00608 TM    OPWCAT(RCORE),B'10000000'                           0620
         BNO   @RF00620                                            0620
*     DO;                                                          0621
*       CMBNST=MIN(CATMAXST,MAX(CATMINST,/* NO MORE THAN           0622
*                                      MAXIMUM@ZA08296               */
*           (MAX(MWABFSP,CTBUFSIZ)/(MWACISZD+MWACISZI))-ONE));/*   0622
*                                                            @ZA08296*/
         L     @05,ACBAMBL(,RACB)                                  0622
         L     @05,AMBLCMB(,@05)                                   0622
         L     @01,OPWWRKPT(,RCORE)                                0622
         L     @00,MWABFSP                                         0622
         L     @01,CTBUFSIZ(,@01)                                  0622
         CR    @00,@01                                             0622
         BNL   *+6
         LR    @00,@01                                             0622
         LR    @01,MWACISZD                                        0622
         ALR   @01,MWACISZI                                        0622
         ST    @01,@TF00001                                        0622
         SRDA  @00,32                                              0622
         D     @00,@TF00001                                        0622
         BCTR  @01,0                                               0622
         LA    @00,1                                               0622
         CR    @01,@00                                             0622
         BNL   *+6
         LR    @01,@00                                             0622
         LA    @00,7                                               0622
         CR    @01,@00                                             0622
         BNH   *+6
         LR    @01,@00                                             0622
         STC   @01,CMBNST(,@05)                                    0622
*       OPWCSTRN=CMBNST;            /* SET CURRENT STRING NUMBER     */
         STC   @01,OPWCSTRN(,RCORE)                                0623
*     END;                                                         0624
*   IF ACBICI=ON THEN               /* ICI PROCESSING                */
@RF00620 TM    ACBICI(RACB),B'00010000'                            0625
         BNO   @RF00625                                            0625
*     MWARQDBF=CMBNST;              /* SET MINIMUM DATA BUFFER NUMBER*/
         L     @05,ACBAMBL(,RACB)                                  0626
         L     @05,AMBLCMB(,@05)                                   0626
         SLR   MWARQDBF,MWARQDBF                                   0626
         IC    MWARQDBF,CMBNST(,@05)                               0626
*   ELSE                            /* IF NOT ICI PROCESSING         */
*     MWARQDBF=CMBNST+ONE;          /* SET MINIMUM DATA BUFFER NUMBER*/
         B     @RC00625                                            0627
@RF00625 L     @05,ACBAMBL(,RACB)                                  0627
         L     @05,AMBLCMB(,@05)                                   0627
         LA    MWARQDBF,1                                          0627
         SLR   @10,@10                                             0627
         IC    @10,CMBNST(,@05)                                    0627
         ALR   MWARQDBF,@10                                        0627
*   MWARQIBF=CMBNST;                /* SET MINIMUM INDEX BUFFER    0628
*                                      NUMBER                        */
@RC00625 L     @05,ACBAMBL(,RACB)                                  0628
         L     @05,AMBLCMB(,@05)                                   0628
         SLR   @15,@15                                             0628
         IC    @15,CMBNST(,@05)                                    0628
         ST    @15,MWARQIBF                                        0628
*   MWARQBFS=MWACISZI*MWARQIBF+MWACISZD*MWARQDBF;/* CALC MINIMUM   0629
*                                      BUFFER SPACE                  */
         MR    @14,MWACISZI                                        0629
         LR    @01,MWARQDBF                                        0629
         MR    @00,MWACISZD                                        0629
         ALR   @15,@01                                             0629
         LR    MWARQBFS,@15                                        0629
*   IF ACBUBF=ON THEN               /* IF USER BUFFERING             */
         TM    ACBUBF(RACB),B'00000001'                            0630
         BNO   @RF00630                                            0630
*     MWABUFND=MWARQDBF;            /* SET FINAL NUMBER AS MINIMUM   */
         LR    MWABUFND,MWARQDBF                                   0631
*   ELSE                            /* IF NOT USER BUFFERING         */
*     MWABUFND=MAX(MWABUFND,MWARQDBF);/* BUFNO FOR DATA & INDEX IS   */
         B     @RC00630                                            0632
@RF00630 CR    MWABUFND,MWARQDBF                                   0632
         BNL   *+6
         LR    MWABUFND,MWARQDBF                                   0632
*   MWABUFNI=MAX(MWABUFNI,MWARQIBF);/* INIT TO THE LARGER OF USER  0633
*                                      SPEC VALUES AND               */
@RC00630 L     @15,MWARQIBF                                        0633
         CR    MWABUFNI,@15                                        0633
         BNL   *+6
         LR    MWABUFNI,@15                                        0633
*   MWABFSPI=MWACISZI*MWABUFNI;     /* MINIMUM REQUIREMENTS TO       */
         LR    @01,MWABUFNI                                        0634
         MR    @00,MWACISZI                                        0634
         ST    @01,MWABFSPI                                        0634
*   MWABFSPD=MWACISZD*MWABUFND;     /* PROCESS THE DATA SET.         */
         LR    @15,MWABUFND                                        0635
         MR    @14,MWACISZD                                        0635
         ST    @15,MWABFSPD                                        0635
*   MWABUFSP=MWABFSPI+MWABFSPD;     /* CURRENT BUFFER SPACE          */
         ALR   @01,@15                                             0636
         LR    MWABUFSP,@01                                        0636
*   IF ACBUBF=OFF THEN              /* IF NOT USER BUFFERING         */
         TM    ACBUBF(RACB),B'00000001'                            0637
         BNZ   @RF00637                                            0637
*     DO;                                                          0638
*       IF MWABFSP^=ZERO THEN       /* MWABFSP SPECIFIED             */
         L     @15,MWABFSP                                         0639
         LTR   @15,@15                                             0639
         BZ    @RF00639                                            0639
*         DO;                                                      0640
*           MWABFSP=MAX(MWABFSP,CTBUFSIZ);/* MWABFSP MUST BE LARGER
*                                      THEN THE MINIMUM SPEC IN    0641
*                                      CATALOG                       */
         L     @01,OPWWRKPT(,RCORE)                                0641
         L     @14,CTBUFSIZ(,@01)                                  0641
         CR    @15,@14                                             0641
         BNL   *+6
         LR    @15,@14                                             0641
         ST    @15,MWABFSP                                         0641
*           IF MWABFSP<MWARQBFS THEN/* IF MWABFSP TOO SMALL TO     0642
*                                      PROCESS                       */
         CR    @15,MWARQBFS                                        0642
         BNL   @RF00642                                            0642
*             DO;                                                  0643
*               MWAPCODE=PP41;      /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'29'                                      0644
*               CALL PROBDT2B;      /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0645
*             END;                                                 0646
*           ELSE                    /* MWABFSP NOT TOO SMALL         */
*             DO;                                                  0647
         B     @RC00642                                            0647
@RF00642 DS    0H                                                  0648
*               IF MWABFSP<MWABUFSP THEN/* IF BUFFER SPACE EXCEEDS 0648
*                                      LIMIT                         */
         C     MWABUFSP,MWABFSP                                    0648
         BNH   @RF00648                                            0648
*                 CALL TRIMMER;     /* REDUCE NUMBER OF BUFFERS      */
         BAL   @14,TRIMMER                                         0649
*               ELSE                /* LIMIT NOT EXCEEDED            */
*                 CALL BEEFER;      /* INCREASE NUMBER OF BUFFERS    */
         B     @RC00648                                            0650
@RF00648 BAL   @14,BEEFER                                          0650
*             END;                                                 0651
*         END;                                                     0652
*       ELSE                        /* MWABFSP WAS NOT SPECIFIED     */
*         DO;                                                      0653
         B     @RC00639                                            0653
@RF00639 DS    0H                                                  0654
*           IF CTBUFSIZ>MWABUFSP THEN/* IF CURRENT BUFFER SPACE LESS
*                                      THAN MINIMUM SPACE IN CATALOG */
         L     @01,OPWWRKPT(,RCORE)                                0654
         L     @15,CTBUFSIZ(,@01)                                  0654
         CR    @15,MWABUFSP                                        0654
         BNH   @RF00654                                            0654
*             DO;                                                  0655
*               MWABFSP=CTBUFSIZ;   /* INIT FOR BUFFER               */
         ST    @15,MWABFSP                                         0656
*               CALL BEEFER;        /* INCREASE NUMBER OF BUFFERS    */
         BAL   @14,BEEFER                                          0657
*             END;                                                 0658
*         END;                                                     0659
@RF00654 DS    0H                                                  0660
*     END;                                                         0660
@RC00639 DS    0H                                                  0661
*   OPWBUFND=MWABUFND;              /* SAVE NUMBER OF DATA BUFFERS   */
@RF00637 ST    MWABUFND,OPWBUFND(,RCORE)                           0661
*   OPWBUFNI=MWABUFNI;              /* SAVE NUMBER OF INDEX BUFFERS  */
         ST    MWABUFNI,OPWBUFNI(,RCORE)                           0662
*   RESPECIFY                                                      0663
*     RET RESTRICTED;                                              0663
*   RET=MWASAVEA;                   /* LOAD RETURN ADDRESS           */
         L     RET,MWASAVEA                                        0664
*   RESPECIFY                                                      0665
*     RET UNRESTRICTED;                                            0665
*   END BUFNOSET;                                                  0666
@EL00004 DS    0H                                                  0666
@EF00004 DS    0H                                                  0666
@ER00004 BR    @14                                                 0666
*TRIMMER:                                                          0667
*                                                                  0667
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION -  THIS ROUTINE REDUCES THE NUMBER OF DATA AND        */
*/*               INDEX BUFFERS SUCH THAT THE BFSPACE PARAMETER      */
*/*               WILL BE SATISFIED                                  */
*/*   INPUT -     1. PROCESSING MODE FROM ACB                        */
*/*               2. MINIMUM REQUIRED DATA BUFFERS (MWARQDBF)        */
*/*               3. MINIMUM REQUIRED INDEX BUFFERS (MWARQIBF)       */
*/*               4. CURRENT NUMBER OF DATA BUFFERS (MWABUFND)       */
*/*               5. CURRENT NUMBER OF INDEX BUFFERS (MWABUFNI)      */
*/*               6. DATA BUFFER SIZE (MWACISZD)                     */
*/*               7. INDEX BUFFER SIZE (MWACISZI)                    */
*/*               8. CURRENT BFSPACE REQD FOR MWABUFND AND MWABUFNI  */
*/*   OUTPUT -    1. MWABUFND, MWABUFNI, AND MWABUFSP WILL BE REDUCED*/
*/*                                                                  */
*/********************************************************************/
*                                                                  0667
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0667
TRIMMER  DS    0H                                                  0668
*   RESPECIFY                                                      0668
*     RET RESTRICTED;                                              0668
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        0669
*   RESPECIFY                                                      0670
*     RET UNRESTRICTED;                                            0670
*   IF(ACBSEQ=OFF&ACBSKP=OFF) THEN  /* DIRECT PROCESSING             */
         TM    ACBSEQ(RACB),B'00010000'                            0671
         BNZ   @RF00671                                            0671
         TM    ACBSKP(RACB),B'00010000'                            0671
         BNZ   @RF00671                                            0671
*     DO;                                                          0672
*       MWABUFND=MAX(MWARQDBF,(MWABUFND-(MWABUFSP+MWACISZD-ONE-MWABFSP)
*           /MWACISZD));            /* DECREASE DATA BUFFERS UNTIL 0673
*                                      CURRENT BUFFER SPACE IS EQUAL
*                                      TO OR BELOW MAXIMUM OR NUMBER
*                                      OF DATA BUFFERS EQUALS MINIMUM
*                                      REQUIRED.                     */
         L     @10,MWABFSP                                         0673
         LR    @00,MWABUFSP                                        0673
         ALR   @00,MWACISZD                                        0673
         BCTR  @00,0                                               0673
         SLR   @00,@10                                             0673
         SRDA  @00,32                                              0673
         DR    @00,MWACISZD                                        0673
         LCR   @01,@01                                             0673
         ALR   @01,MWABUFND                                        0673
         CR    @01,MWARQDBF                                        0673
         BNL   *+6
         LR    @01,MWARQDBF                                        0673
         LR    MWABUFND,@01                                        0673
*       MWABUFSP=(MWACISZD*MWABUFND+MWABFSPI);/* UPDATE CURRENT    0674
*                                      BUFFER SPACE                  */
         LR    @01,MWABUFND                                        0674
         MR    @00,MWACISZD                                        0674
         AL    @01,MWABFSPI                                        0674
         LR    MWABUFSP,@01                                        0674
*       IF MWABUFSP>MWABFSP THEN    /* CURRENT BUFFER SPACE STILL BIG*/
         CR    MWABUFSP,@10                                        0675
         BNH   @RF00675                                            0675
*         MWABUFNI=MAX(MWARQIBF,(MWABUFNI-(MWABUFSP+MWACISZI-ONE-  0676
*             MWABFSP)/MWACISZI));  /* DECREASE INDEX BUFFER NUMBER  */
         LR    @00,MWABUFSP                                        0676
         ALR   @00,MWACISZI                                        0676
         BCTR  @00,0                                               0676
         SLR   @00,@10                                             0676
         SRDA  @00,32                                              0676
         DR    @00,MWACISZI                                        0676
         LCR   @01,@01                                             0676
         ALR   @01,MWABUFNI                                        0676
         L     @07,MWARQIBF                                        0676
         CR    @07,@01                                             0676
         BNL   *+6
         LR    @07,@01                                             0676
         LR    MWABUFNI,@07                                        0676
*     END;                                                         0677
*   ELSE                            /* NOT DIRECT PROCESSING         */
*     DO;                                                          0678
         B     @RC00671                                            0678
@RF00671 DS    0H                                                  0679
*       IF MWACISZI^=ZERO THEN      /* IF INDEX BUFFER SIZE NOT ZERO */
         LTR   MWACISZI,MWACISZI                                   0679
         BZ    @RF00679                                            0679
*         DO;                                                      0680
*           MWABUFNI=MAX(MWARQIBF+ONE,(MWABUFNI-(MWABUFSP+MWACISZI-ONE-
*               MWABUFSP)/MWACISZI));/* DECREASE INDEX BUFFERS       */
         LA    @10,1                                               0681
         AL    @10,MWARQIBF                                        0681
         LR    @00,MWABUFSP                                        0681
         ALR   @00,MWACISZI                                        0681
         BCTR  @00,0                                               0681
         SLR   @00,MWABUFSP                                        0681
         SRDA  @00,32                                              0681
         DR    @00,MWACISZI                                        0681
         LCR   @01,@01                                             0681
         ALR   @01,MWABUFNI                                        0681
         CR    @10,@01                                             0681
         BNL   *+6
         LR    @10,@01                                             0681
         LR    MWABUFNI,@10                                        0681
*           MWABUFSP=(MWACISZI*MWABUFNI+MWABFSPD);/* UPDATE CURRENT
*                                      BUFFER SPACE                  */
         LR    @01,MWABUFNI                                        0682
         MR    @00,MWACISZI                                        0682
         AL    @01,MWABFSPD                                        0682
         LR    MWABUFSP,@01                                        0682
*         END;                                                     0683
*       IF MWABUFSP>MWABFSP THEN    /* CURRENT BUFFER SPACE TOO BIG  */
@RF00679 L     @10,MWABFSP                                         0684
         CR    MWABUFSP,@10                                        0684
         BNH   @RF00684                                            0684
*         DO;                                                      0685
*           MWABUFND=MAX(MWARQDBF,(MWABUFND-(MWABUFSP+MWACISZD-ONE-
*               MWABFSP)/MWACISZD));/* DECREASE DATA BUFFERS         */
         LR    @00,MWABUFSP                                        0686
         ALR   @00,MWACISZD                                        0686
         BCTR  @00,0                                               0686
         SLR   @00,@10                                             0686
         SRDA  @00,32                                              0686
         DR    @00,MWACISZD                                        0686
         LCR   @01,@01                                             0686
         ALR   @01,MWABUFND                                        0686
         CR    @01,MWARQDBF                                        0686
         BNL   *+6
         LR    @01,MWARQDBF                                        0686
         LR    MWABUFND,@01                                        0686
*           MWABUFSP=(MWACISZD*MWABUFND+MWABFSPI);/* UPDATE CURRENT
*                                      BUFFER SPACE                  */
         LR    @01,MWABUFND                                        0687
         MR    @00,MWACISZD                                        0687
         AL    @01,MWABFSPI                                        0687
         LR    MWABUFSP,@01                                        0687
*           IF MWABUFSP>MWABFSP THEN/* CURRENT BFR SPACE STILL BIG   */
         CR    MWABUFSP,@10                                        0688
         BNH   @RF00688                                            0688
*             MWABUFNI=MWARQIBF;    /* REDUCE TO MINIMUM             */
         L     MWABUFNI,MWARQIBF                                   0689
*         END;                                                     0690
@RF00688 DS    0H                                                  0691
*     END;                                                         0691
@RF00684 DS    0H                                                  0692
*   RESPECIFY                                                      0692
*     RET RESTRICTED;                                              0692
@RC00671 DS    0H                                                  0693
*   RET=MWASAVEB;                   /* LOAD RETURN ADDRESS           */
         L     RET,MWASAVEB                                        0693
*   RESPECIFY                                                      0694
*     RET UNRESTRICTED;                                            0694
*   END TRIMMER;                                                   0695
@EL00005 DS    0H                                                  0695
@EF00005 DS    0H                                                  0695
@ER00005 BR    @14                                                 0695
*BEEFER:                                                           0696
*                                                                  0696
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION -  THIS ROUTINE INCREASES THE NUMBER OF DATA AND      */
*/*               INDEX BUFFERS SUCH THAT THE BFSPACE PARAMETER      */
*/*               WILL BE SATISFIED                                  */
*/*   INPUT -     1. PROCESSING MODE FROM ACB                        */
*/*               2. MINIMUM REQD DATA BUFFERS (MWARQDBF)            */
*/*               3. MINIMUM REQD INDEX BUFFERS (MWARQIBF)           */
*/*               4. CURRENT NUMBER OF DATA BUFFERS (MWABUFND)       */
*/*               5. CURRENT NUMBER OF INDEX BUFFERS (MWABUFNI)      */
*/*               6. DATA BUFFER SIZE (MWACISZD)                     */
*/*               7. INDEX BUFFER SIZE (MWACISZI)                    */
*/*               8. CURRENT MWABFSP REQD FOR MWABUFND AND MWABUFNI  */
*/*   OUTPUT -    1. MWABUFND,MWABUFNI AND MWABUFSP WILL BE INCREASED*/
*/*                                                                  */
*/********************************************************************/
*                                                                  0696
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0696
BEEFER   DS    0H                                                  0697
*   RESPECIFY                                                      0697
*     RET RESTRICTED;                                              0697
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        0698
*   RESPECIFY                                                      0699
*     RET UNRESTRICTED;                                            0699
*   IF(ACBSEQ=OFF&ACBSKP=OFF) THEN  /* IF DIRECT PROCESSING          */
         TM    ACBSEQ(RACB),B'00010000'                            0700
         BNZ   @RF00700                                            0700
         TM    ACBSKP(RACB),B'00010000'                            0700
         BNZ   @RF00700                                            0700
*     DO;                           /* INCREASE INDEX BUFFERS        */
*       IF MWACISZI^=ZERO THEN      /* IF INDEX BUFFER SIZE NOT ZERO */
         LTR   MWACISZI,MWACISZI                                   0702
         BZ    @RF00702                                            0702
*         DO;                                                      0703
*           MWABUFNI=MWABUFNI+(MWABFSP-MWABUFSP)/MWACISZI;/* SET   0704
*                                      INDEX BUFFER NUMBER           */
         L     @00,MWABFSP                                         0704
         SLR   @00,MWABUFSP                                        0704
         SRDA  @00,32                                              0704
         DR    @00,MWACISZI                                        0704
         ALR   MWABUFNI,@01                                        0704
*           MWABUFSP=MWACISZI*MWABUFNI+MWABFSPD;/* UPDATE CURRENT  0705
*                                      BUFFER SPACE                  */
         LR    @01,MWABUFNI                                        0705
         MR    @00,MWACISZI                                        0705
         AL    @01,MWABFSPD                                        0705
         LR    MWABUFSP,@01                                        0705
*         END;                                                     0706
*       ELSE                        /* IF INDEX BUFFER SIZE IS ZERO  */
*         MWABUFND=MWABUFND+(MWABFSP-MWABUFSP)/MWACISZD;/* SET DATA
*                                      BUFFER NUMBER                 */
         B     @RC00702                                            0707
@RF00702 L     @00,MWABFSP                                         0707
         SLR   @00,MWABUFSP                                        0707
         SRDA  @00,32                                              0707
         DR    @00,MWACISZD                                        0707
         ALR   MWABUFND,@01                                        0707
*     END;                                                         0708
*   ELSE                            /* IF NOT DIRECT PROCESSING      */
*     DO;                                                          0709
         B     @RC00700                                            0709
@RF00700 DS    0H                                                  0710
*       IF MWACISZI<=MWABFSP-MWABUFSP THEN/* IS THERE ROOM FOR 1   0710
*                                      INDEX BUFFERS                 */
         L     @15,MWABFSP                                         0710
         LR    @14,@15                                             0710
         SLR   @14,MWABUFSP                                        0710
         CR    MWACISZI,@14                                        0710
         BH    @RF00710                                            0710
*         DO;                                                      0711
*           MWABUFNI=MWABUFNI+ONE;  /* INCREASE INDEX BUFFER NUMBER  */
         AL    MWABUFNI,@CF00059                                   0712
*           MWABUFSP=MWABUFSP+MWACISZI;/* UPDATE CURRENT BUFFER SPACE*/
         ALR   MWABUFSP,MWACISZI                                   0713
*           MWABUFND=MWABUFND+(MWABFSP-MWABUFSP)/MWACISZD;/*       0714
*                                      REMAINING SPACE USED FOR DATA
*                                      BUFFERS                       */
         LR    @00,@15                                             0714
         SLR   @00,MWABUFSP                                        0714
         SRDA  @00,32                                              0714
         DR    @00,MWACISZD                                        0714
         ALR   MWABUFND,@01                                        0714
*           MWABUFSP=(MWACISZD*MWABUFND)+(MWACISZI*MWABUFNI);/*    0715
*                                      UPDATE BUFFER SPACE           */
         LR    @01,MWABUFND                                        0715
         MR    @00,MWACISZD                                        0715
         LR    @11,MWABUFNI                                        0715
         MR    @10,MWACISZI                                        0715
         ALR   @01,@11                                             0715
         LR    MWABUFSP,@01                                        0715
*           IF MWACISZI^=ZERO THEN  /* INDEX CI SIZE NOT ZERO        */
         LTR   MWACISZI,MWACISZI                                   0716
         BZ    @RF00716                                            0716
*             MWABUFNI=MWABUFNI+(MWABFSP-MWABUFSP)/MWACISZI;/*     0717
*                                      REMAINING SPACE USED FOR INDEX
*                                      BUFFERS                       */
         LR    @00,@15                                             0717
         SLR   @00,MWABUFSP                                        0717
         SRDA  @00,32                                              0717
         DR    @00,MWACISZI                                        0717
         ALR   MWABUFNI,@01                                        0717
*         END;                                                     0718
@RF00716 DS    0H                                                  0719
*     END;                                                         0719
@RF00710 DS    0H                                                  0720
*   RESPECIFY                                                      0720
*     RET RESTRICTED;                                              0720
@RC00700 DS    0H                                                  0721
*   RET=MWASAVEB;                   /* LOAD RETURN ADDRESS           */
         L     RET,MWASAVEB                                        0721
*   RESPECIFY                                                      0722
*     RET UNRESTRICTED;                                            0722
*   END BEEFER;                                                    0723
@EL00006 DS    0H                                                  0723
@EF00006 DS    0H                                                  0723
@ER00006 BR    @14                                                 0723
*VIRTPROC:                                                         0724
*                                                                  0724
*/********************************************************************/
*/*                                                                  */
*/*       01 FUNCTION - ACQUIRE VIRTUAL DEVICES.                     */
*/*       01 INPUT -    1. PARAMETER LIST IN MWAVIRT.                */
*/*       01 OUTPUT -   1. REQUEST TO IDA0192D COMPLETED.            */
*/*                                                                  */
*/********************************************************************/
*                                                                  0724
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0724
VIRTPROC DS    0H                                                  0725
*   RESPECIFY                                                      0725
*    (R1,                                                          0725
*     RET,                                                         0725
*     RETCODE) RESTRICTED;                                         0725
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0726
*   RESPECIFY                                                      0727
*     RET UNRESTRICTED;                                            0727
*   VIRTACB=RACB;                   /* ADDRESS OF USER ACB           */
         LA    @14,MWAVIRT                                         0728
         ST    RACB,VIRTACB(,@14)                                  0728
*   VIRTTIOE=OPWTIOT;               /* POINT TO TIOT ENTRY   @XM02122*/
         L     @05,OPWTIOT(,RCORE)                                 0729
         ST    @05,VIRTTIOE(,@14)                                  0729
*   VIRTACQ=ON;                     /* INDICATE ACQUIRE              */
*   VIRTBACB=ON;                    /* INDICATE CALL BY ACB          */
         OI    VIRTACQ(@14),B'10010000'                            0731
*   R1=ADDR(IDAVIRT);               /* POINT TO PARAMETER LIST       */
         LR    R1,@14                                              0732
*   CALL IDA0192D;                  /* ACQUIRE VIRTUAL DEVICE        */
         L     @15,@CV05384                                        0733
         BALR  @14,@15                                             0733
*   RSTATRTN=IDAR192B;              /* INDIC 192B IN CONTROL @Z30SSDP*/
         L     @14,OPWCOMWA(,RCORE)                                0734
         MVC   RSTATRTN(4,@14),@CC04253                            0734
*   IF RETCODE^=ZERO THEN           /* ERROR IN IDA0192D             */
         LTR   RETCODE,RETCODE                                     0735
         BZ    @RF00735                                            0735
*     DO;                                                          0736
*       MWAPDPRM=RETCODE;           /* SAVE RETURN CODE              */
         ST    RETCODE,MWAPDPRM                                    0737
*       CALL PROBDT2B;              /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0738
*     END;                                                         0739
*   RESPECIFY                                                      0740
*     RET RESTRICTED;                                              0740
@RF00735 DS    0H                                                  0741
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        0741
*   RESPECIFY                                                      0742
*    (R1,                                                          0742
*     RET,                                                         0742
*     RETCODE) UNRESTRICTED;                                       0742
*   END VIRTPROC;                                                  0743
@EL00007 DS    0H                                                  0743
@EF00007 DS    0H                                                  0743
@ER00007 BR    @14                                                 0743
*PRFMT:                                                            0744
*                                                                  0744
*/********************************************************************/
*/*                                                                  */
*/*    01 FUNCTION - THE PURPOSE OF THIS ROUTINE IS TO INTERFACE     */
*/*                  WITH RECORD MANAGEMENT TO DO PREFORMATTING AND  */
*/*                  WITH IDA0192C UPDATE THE CATALOG TO INDICATE    */
*/*                  THE PREFORMATTING                               */
*/*    01 INPUT -    1. ADDRESS OF AMB IN MWAAMBPT                   */
*/*                  2. SPEED BIT AMBSPEED                           */
*/*                  3. ARDPRFMT BIT ON INDICATES PREFORMATTING REQD */
*/*                  4. HIGH RBA ADDRESS                             */
*/*    01 OUTPUT -   1. EXIT TO RECORD MANAGEMENT TO PREFORMAT       */
*/*                  2. CALL IDA0192C TO INDICATE IN THE CATALOG     */
*/*                     THAT THE DATA SET HAS BEEN PREFORMATTED      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0744
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0744
PRFMT    DS    0H                                                  0745
*   RESPECIFY                                                      0745
*     RET RESTRICTED;                                              0745
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        0746
*   RESPECIFY                                                      0747
*     RET UNRESTRICTED;                                            0747
*   MWAAMBPT=AMBLDTA;               /* SET AMB POINTER               */
         L     @05,ACBAMBL(,RACB)                                  0748
         L     @05,AMBLDTA(,@05)                                   0748
         ST    @05,MWAAMBPT                                        0748
*   MWAPFUNC=PDF63;                 /* SET FUNCTION CODE             */
         MVI   MWAPFUNC,X'3F'                                      0749
*   OPWWRKPT=OPWDTWRK;              /* POINT TO DATA AMB WORK AREA   */
         L     @05,OPWDTWRK(,RCORE)                                0750
         ST    @05,OPWWRKPT(,RCORE)                                0750
*   MWABYTES=((LENGTH(IFGRPL)+(FWORDLEN-ONE))&(-FWORDLEN))+LENGTH( 0751
*       MWAPFTSA);                  /* BUILD DUMMY RPL AND REGISTER
*                                      SAVE AREA                     */
         MVC   MWABYTES(3),@CF04586+1                              0751
*   IF OPWCBIC=ON THEN              /* IF CBIC PROCESSING    @ZA16012*/
         TM    OPWCBIC(RCORE),B'10000000'                          0752
         BNO   @RF00752                                            0752
*     DO;                           /* SET UP FOR GETCORE    @ZA16012*/
*       MWAKEY=DXUKEY;              /* SET CALLER'S KEY      @ZA16012*/
         L     @05,OPWCOMWA(,RCORE)                                0754
         MVC   MWAKEY(1),DXUKEY(@05)                               0754
*       MWASPOOL=GSRSPOOL;          /* SET CSA SUBPOOL       @ZA16012*/
         MVI   MWASPOOL,X'F1'                                      0755
*     END;                          /* END SET UP            @ZA16012*/
*   ELSE                            /* NOT CBIC              @ZA16012*/
*     MWASPOOL=USERPOOL;            /* UNPROTECTED SUBPOOL FOR     0757
*                                      PROBLEM PROGRAM STATE         */
         B     @RC00752                                            0757
@RF00752 MVI   MWASPOOL,X'FA'                                      0757
*   CALL GETCORE;                   /* BUILD DUMMY RPL               */
@RC00752 BAL   @14,GETCORE                                         0758
*   MWARPLPT=MWADDRES;              /* POINT TO DUMMY RPL            */
         L     @05,MWADDRES                                        0759
         ST    @05,MWARPLPT                                        0759
*   RPLDACB=RACB;                   /* INITIALIZE RPL ACB POINTER    */
         ST    RACB,RPLDACB(,@05)                                  0760
*   RPLPLHPT=ADDR(IDAPLH);          /* POINT RPL TO PLH ENTRY        */
         LA    @15,16                                              0761
         L     @14,MWAAMBPT                                        0761
         AL    @15,AMBPH(,@14)                                     0761
         ST    @15,RPLPLHPT(,@05)                                  0761
*   MWAPLHSV=PLHARDB;               /* SAVE ARDB POINTER             */
         L     @05,PLHARDB(,@15)                                   0762
         ST    @05,MWAPLHSV                                        0762
*   DO WHILE MWAAMBPT^=ZERO;        /* PROCESS BOTH AMB'S            */
         B     @DE00763                                            0763
@DL00763 DS    0H                                                  0764
*     MWARDBPT=AMDPARDB;            /* INITIALIZE POINTER TO 1ST ARDB*/
         L     @05,MWAAMBPT                                        0764
         L     @01,AMBDSB(,@05)                                    0764
         L     @15,AMDPARDB(,@01)                                  0764
         ST    @15,MWARDBPT                                        0764
*     IF AMBSPEED=OFF THEN          /* IF NOT SPEED OPTION           */
         TM    AMBSPEED(@05),B'00001000'                           0765
         BNZ   @RF00765                                            0765
*       DO WHILE MWARDBPT^=ZERO;    /* PROCESS ALL ARDBS             */
         B     @DE00766                                            0766
@DL00766 DS    0H                                                  0767
*         IF ARDPRFMT=ON THEN       /* EXTENT NEED TO BE PREFORMATTED*/
         L     @05,MWARDBPT                                        0767
         TM    ARDPRFMT(@05),B'01000000'                           0767
         BNO   @RF00767                                            0767
*           DO;                                                    0768
*             RPLDDDD=ARDHRBA;      /* INITIALIZE RBA WHERE FORMAT 0769
*                                      BEGINS                        */
         L     @15,ARDHRBA(,@05)                                   0769
         L     @14,MWARPLPT                                        0769
         ST    @15,RPLDDDD(,@14)                                   0769
*             PLHARDB=ADDR(IDAARDB);/* INITIALIZE PLH ARDB           */
         L     @01,MWAAMBPT                                        0770
         L     @01,AMBPH(,@01)                                     0770
         ST    @05,PLHARDB+16(,@01)                                0770
*             RESPECIFY                                            0771
*              (R0,                                                0771
*               R1,                                                0771
*               R6,                                                0771
*               R7) RESTRICTED;                                    0771
*             MWAPFMTS=ON;          /* SET LOOP BIT          @Z30SSDP*/
         OI    MWAPFMTS,B'10000000'                                0772
*             DO WHILE(MWAPFMTS=ON);/* PREFMT PAGE SPACE     @Z30SSDP*/
         B     @DE00773                                            0773
@DL00773 DS    0H                                                  0774
*               R6=R13;             /* COPY CURRENT ADDRESSABILITY   */
         LR    R6,R13                                              0774
*               GEN(DROP R13);      /* REGISTER 13 DROPPED AS BASE   */
         DROP R13
*               GEN(USING @DATD,R6);/* USE REGISTER 6 AS BASE        */
         USING @DATD,R6
*               STM(RACB,R13,XRBESA);/* SAVE REGISTERS               */
         L     @05,PSATOLD                                         0777
         L     @05,TCBRBP(,@05)                                    0777
         STM   RACB,R13,XRBESA(@05)                                0777
*               R1=MWARPLPT;        /* POINT TO DUMMY RPL            */
         L     R1,MWARPLPT                                         0778
*               R13=(R1+LENGTH(IFGRPL)+(FWORDLEN-ONE))&(-FWORDLEN);/*
*                                      PT TO SAVE AREA ON FWORD BDY  */
         LA    R13,79                                              0779
         ALR   R13,R1                                              0779
         N     R13,@CF05495                                        0779
*               IF AMBTYPE=AMBINDEX THEN/* IF PROCESSING INDEX       */
         L     @05,MWAAMBPT                                        0780
         TM    AMBTYPE(@05),B'01000000'                            0780
         BNO   @RF00780                                            0780
*                 R0=RPLPFMTI;      /* SET INDICATOR FOR INDEX       */
         LA    R0,9                                                0781
*               ELSE                /* IF PROCESSING DATA            */
*                 R0=RPLPFMTD;      /* SET INDICATOR FOR DATA        */
         B     @RC00780                                            0782
@RF00780 LA    R0,8                                                0782
*               RESPECIFY                                          0783
*                 R15 RESTRICTED;                                  0783
@RC00780 DS    0H                                                  0784
*               R15=BIBINTRF;       /* COPY ADDR OF INTERFACE ROUTINE*/
         L     @05,ACBAMBL(,RACB)                                  0784
         L     @14,AMBLBIB(,@05)                                   0784
         L     R15,BIBINTRF(,@14)                                  0784
*               R7=ADDR(RBGRS2);    /* POINT TO USER REGISTER SAVE 0785
*                                      AREA                          */
         L     @14,PSATOLD                                         0785
         L     R7,TCBRBP(,@14)                                     0785
         LA    R7,RBGRS2(,R7)                                      0785
*               IF AMBLCAT=ON×DXUKEY<MWAKEY8/* BRANCH ENTER          */
*                 THEN              /* VSAM RCD MGMNT IF SPECIAL   0786
*                                      SYSTEM DATA SET OR KEY 0 TO 7
*                                      (THIS INCLUDES CBIC, GSR)   0786
*                                                            @ZA16012*/
         TM    AMBLCAT(@05),B'00000010'                            0786
         BO    @RT00786                                            0786
         L     @14,OPWCOMWA(,RCORE)                                0786
         CLI   DXUKEY(@14),128                                     0786
         BNL   @RF00786                                            0786
@RT00786 DS    0H                                                  0787
*                 DO;                                              0787
*                   IF OPWCBIC=ON THEN/* IF CBIC PROCESSING  @ZA16012*/
         TM    OPWCBIC(RCORE),B'10000000'                          0788
         BNO   @RF00788                                            0788
*                     DO;           /* CHANGE KEYS           @ZA16012*/
*                       RFY                                        0790
*                         R1 RSTD;  /* USE THIS REG          @ZA16012*/
*                       R1=DXUKEY;  /* SET CALLER'S KEY      @ZA16012*/
         L     @14,OPWCOMWA(,RCORE)                                0791
         SLR   R1,R1                                               0791
         IC    R1,DXUKEY(,@14)                                     0791
*                       SPKA(R1);   /* CHANGE TO CALLER'S KEY      0792
*                                                            @ZA16012*/
         SPKA  0(R1)                                               0792
*                       RFY                                        0793
*                         R1 UNRSTD;/* FREE REG              @ZA16012*/
*                     END;          /* END CHANGE            @ZA16012*/
*                   ELSE                                           0795
*                     ;             /* NOT CBIC              @ZA16012*/
@RF00788 DS    0H                                                  0796
*                   GEN(LM RACB,R12,0(R7));/* RESTORE USER'S       0796
*                                      REGISTERS                     */
         LM RACB,R12,0(R7)
*                   GEN(BALR RET,R15);/* REMAIN IN SUPERVISOR MODE   */
         BALR RET,R15
*                   GEN(DROP RBASEA);/* DROP PERMANENT BASE          */
         DROP RBASEA
*                   GEN(USING *,RET);/* SET UP TEMPORORY BASE        */
         USING *,RET
*                   GEN(SPKA  0);   /* GET INTO KEY ZERO     @Z30SSDT*/
         SPKA  0
*                 END;                                             0801
*               ELSE                /* IF NOT ACB FOR CATALOG        */
*                 DO;                                              0802
         B     @RC00786                                            0802
@RF00786 DS    0H                                                  0803
*                   GEN(DROP RET);  /* DROP TEMPORORY BASE           */
         DROP RET
*                   GEN(USING @PSTART,RBASEA);/* RE-ESTABLISH BASE 0804
*                                      REG                           */
         USING @PSTART,RBASEA
*                   GEN(LM RACB,R12,0(R7));/* RESTORE USER'S       0805
*                                      REGISTERS                     */
         LM RACB,R12,0(R7)
*                   GEN(SYNCH (15));/* CHANGE TO PROBLEM PROGRAM   0806
*                                      STATE                         */
         SYNCH (15)
*                 END;                                             0807
*               LM(RACB,R13,XRBESA);/* RESTORE REGISTERS             */
@RC00786 L     @14,PSATOLD                                         0808
         L     @01,TCBRBP(,@14)                                    0808
         LM    RACB,R13,XRBESA(@01)                                0808
*               GEN(DROP R6);       /* DROP TEMPORORY BASE REGISTER 6*/
         DROP R6
*               GEN(USING @DATD,R13);/* RESTORE REGISTER 13 AS BASE  */
         USING @DATD,R13
*               IF RETCODE^=ZERO THEN/* IF ANY ERROR                 */
         LTR   RETCODE,RETCODE                                     0811
         BZ    @RF00811                                            0811
*                 DO;                                              0812
*                   MWAPCODE=PP22;  /* SET ERROR CODE                */
         MVI   MWAPCODE,X'16'                                      0813
*                   CALL PROBDT2B;  /* CALL PROBLEM DETERMINATION    */
         BAL   @14,PROBDT2B                                        0814
*                 END;                                             0815
*               RESPECIFY                                          0816
*                 R15 UNRESTRICTED;                                0816
@RF00811 DS    0H                                                  0817
*               IF AMBPSDS=ON THEN  /* CHK FOR PAGE SPACE    @Z30SSDP*/
         L     @05,MWAAMBPT                                        0817
         TM    AMBPSDS(@05),B'10000000'                            0817
         BNO   @RF00817                                            0817
*                 DO;               /* YES,                  @Z30SSDP*/
*                   RPLDDDD=RPLDDDD+CTBYTAU;/* POINT TO NEXT CA    0819
*                                                            @Z30SSDP*/
         L     @05,MWARPLPT                                        0819
         L     @01,OPWWRKPT(,RCORE)                                0819
         L     @15,RPLDDDD(,@05)                                   0819
         AL    @15,CTBYTAU(,@01)                                   0819
         ST    @15,RPLDDDD(,@05)                                   0819
*                   IF RPLDDDD>=ARDERBA THEN/* IS LAST CA DONE     0820
*                                                            @Z30SSDP*/
         L     @05,MWARDBPT                                        0820
         CL    @15,ARDERBA(,@05)                                   0820
         BL    @RF00820                                            0820
*                     MWAPFMTS=OFF; /* YES, STOP LOOP        @Z30SSDP*/
         NI    MWAPFMTS,B'01111111'                                0821
*                   RESPECIFY                                      0822
*                    (R5,                                          0822
*                     RET) RESTRICTED;/*                     @ZA18306*/
@RF00820 DS    0H                                                  0823
*                   IF EDBTOFLW=ON THEN/* CHK FOR TRK OVERFLOW     0823
*                                                            @Z30SSDP*/
         L     @15,MWAAMBPT                                        0823
         L     @15,AMBEDB(,@15)                                    0823
         LA    @01,8                                               0823
         ALR   @01,@15                                             0823
         TM    EDBTOFLW(@01),B'01000000'                           0823
         BNO   @RF00823                                            0823
*                     DO;           /* YES, RESET TRK BAL    @ZA18306*/
*                       R5=AMBEDB+LENGTH(IDAEDBHD);/* GET FIRST EDB
*                                                            @ZA18306*/
         LR    R5,@01                                              0825
*                       DO RET=EDBNO TO 1 BY-1;/* PROCESS ALL EDBS 0826
*                                                            @ZA18306*/
         SLR   RET,RET                                             0826
         IC    RET,EDBNO(,@15)                                     0826
         B     @DE00826                                            0826
@DL00826 DS    0H                                                  0827
*                         R5->EDBTKBAL=CTBYTTRK;/* RESET TRK BAL   0827
*                                                            @ZA18306*/
         L     @01,OPWWRKPT(,RCORE)                                0827
         L     @15,CTBYTTRK(,@01)                                  0827
         ST    @15,EDBTKBAL(,R5)                                   0827
*                         R5=R5+LENGTH(IDAEDB);/* GET NEXT EDB     0828
*                                                            @ZA18306*/
         AL    R5,@CF00067                                         0828
*                       END;        /*                       @ZA18306*/
         BCTR  RET,0                                               0829
@DE00826 LTR   RET,RET                                             0829
         BP    @DL00826                                            0829
*                     END;          /*                       @ZA18306*/
*                   RESPECIFY                                      0831
*                    (R5,                                          0831
*                     RET) UNRESTRICTED;/*                   @ZA18306*/
@RF00823 DS    0H                                                  0832
*                 END;                                             0832
*               ELSE                /* NO,                   @Z30SSDP*/
*                 MWAPFMTS=OFF;     /* STOP LOOP             @Z30SSDP*/
         B     @RC00817                                            0833
@RF00817 NI    MWAPFMTS,B'01111111'                                0833
*             END;                                                 0834
@RC00817 DS    0H                                                  0834
@DE00773 TM    MWAPFMTS,B'10000000'                                0834
         BO    @DL00773                                            0834
*             RESPECIFY                                            0835
*              (R0,                                                0835
*               R1,                                                0835
*               R6,                                                0835
*               R7) UNRESTRICTED;                                  0835
*           END;                                                   0836
*         MWARDBPT=ARDNPTR;         /* POINT TO NEXT ARDB            */
@RF00767 L     @05,MWARDBPT                                        0837
         L     @05,ARDNPTR(,@05)                                   0837
         ST    @05,MWARDBPT                                        0837
*       END;                                                       0838
@DE00766 L     @05,MWARDBPT                                        0838
         LTR   @05,@05                                             0838
         BNZ   @DL00766                                            0838
*     IF AMBLSCRA=OFF THEN          /* NOT SCRA                      */
@RF00765 L     @05,ACBAMBL(,RACB)                                  0839
         TM    AMBLSCRA(@05),B'00001000'                           0839
         BNZ   @RF00839                                            0839
*       DO;                                                        0840
*         MWACATID=PRE;             /* SET CALLER ID                 */
         MVI   MWACATID,X'20'                                      0841
*         RESPECIFY                                                0842
*          (R1,                                                    0842
*           R5,                                                    0842
*           RETCODE) RESTRICTED;                                   0842
*         R1=ADDR(MWACATPM);        /* POINT TO PARAMETER LIST       */
         LA    R1,MWACATPM                                         0843
*         R5=MWAAMBPT;              /* POINT TO AMB                  */
         L     R5,MWAAMBPT                                         0844
*         RSTATRTN=IDAR192C;        /* NOTE CALL TO 192C     @Z30SSDP*/
         L     @14,OPWCOMWA(,RCORE)                                0845
         MVC   RSTATRTN(4,@14),@CC04255                            0845
*         CALL IDA0192C;            /* CALL CATALOG INTERFACE ROUTINE*/
         L     @15,@CV05359                                        0846
         BALR  @14,@15                                             0846
*         RSTATRTN=IDAR192B;        /* INDIC 192B CONTROL    @Z30SSDP*/
         L     @14,OPWCOMWA(,RCORE)                                0847
         MVC   RSTATRTN(4,@14),@CC04253                            0847
*         IF RETCODE^=ZERO THEN     /* IF ANY ERROR                  */
         LTR   RETCODE,RETCODE                                     0848
         BZ    @RF00848                                            0848
*           DO;                                                    0849
*             MWAPDPRM=RETCODE;     /* SAVE RETURN CODE              */
         ST    RETCODE,MWAPDPRM                                    0850
*             CALL PROBDT2B;        /* CALL PROBLEM DETERMINATION    */
         BAL   @14,PROBDT2B                                        0851
*           END;                                                   0852
*         RESPECIFY                                                0853
*          (R1,                                                    0853
*           R5,                                                    0853
*           RETCODE) UNRESTRICTED;                                 0853
@RF00848 DS    0H                                                  0854
*       END;                                                       0854
*     IF AMBTYPE=AMBINDEX THEN      /* IF INDEX AMB                  */
@RF00839 L     @05,MWAAMBPT                                        0855
         TM    AMBTYPE(@05),B'01000000'                            0855
         BNO   @RF00855                                            0855
*       MWAAMBPT=ZERO;              /* ZERO AMB POINTER              */
         SLR   @05,@05                                             0856
         ST    @05,MWAAMBPT                                        0856
*     ELSE                          /* IF NOT INDEX AMB              */
*       DO;                                                        0857
         B     @RC00855                                            0857
@RF00855 DS    0H                                                  0858
*         MWAAMBPT=AMBLIX;          /* POINT TO INDEX AMB            */
         L     @05,ACBAMBL(,RACB)                                  0858
         L     @05,AMBLIX(,@05)                                    0858
         ST    @05,MWAAMBPT                                        0858
*         OPWWRKPT=OPWIXWRK;        /* POINT TO INDEX AMB WORK AREA  */
         L     @05,OPWIXWRK(,RCORE)                                0859
         ST    @05,OPWWRKPT(,RCORE)                                0859
*       END;                                                       0860
*   END;                                                           0861
@RC00855 DS    0H                                                  0861
@DE00763 SLR   @05,@05                                             0861
         C     @05,MWAAMBPT                                        0861
         BNE   @DL00763                                            0861
*   MWAAMBPT=AMBLDTA;               /* RESTORE PTR TO DATA AMB       */
         L     @01,ACBAMBL(,RACB)                                  0862
         L     @15,AMBLDTA(,@01)                                   0862
         ST    @15,MWAAMBPT                                        0862
*   OPWWRKPT=ZERO;                  /* ZERO POINTER TO AMB WORK AREA */
         ST    @05,OPWWRKPT(,RCORE)                                0863
*   PLHARDB=MWAPLHSV;               /* RESTORE PLH ARDB POINTER      */
         L     @05,AMBPH(,@15)                                     0864
         L     @15,MWAPLHSV                                        0864
         ST    @15,PLHARDB+16(,@05)                                0864
*   CALL FREECORE;                  /* FREE DUMMY RPL                */
         BAL   @14,FREECORE                                        0865
*   MWAKEY=ZERO;                    /* RESET GETCORE KEY TO ZERO   0866
*                                                            @ZA16012*/
         MVI   MWAKEY,X'00'                                        0866
*   RESPECIFY                                                      0867
*     RET RESTRICTED;                                              0867
*   RET=MWASAVEA;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEA                                        0868
*   RESPECIFY                                                      0869
*     RET UNRESTRICTED;                                            0869
*   END PRFMT;                                                     0870
@EL00008 DS    0H                                                  0870
@EF00008 DS    0H                                                  0870
@ER00008 BR    @14                                                 0870
*AMSHARE:                                                          0871
*                                                                  0871
*/********************************************************************/
*/*                                                                  */
*/*       01 FUNCTION - FIRST LEVEL PROCESSING FOR SUBTASK AND CROSS */
*/*                     REGION SHARING AND CALL THE SECOND LEVEL     */
*/*                     PROCESSING ROUTINE.                          */
*/*       01 INPUT -    1. ADDRESS(ES) OF THE AMB WORK AREA(S).      */
*/*                        NOTE -IF ACBRST IS ON THEN THE AMB WORK   */
*/*                              AREA(S) WILL NOT HAVE ADDRESSABILITY*/
*/*       01 OUTPUT -   1. COMPLETED ALL SHARE PROCESSING.           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0871
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0871
AMSHARE  DS    0H                                                  0872
*   RESPECIFY                                                      0872
*     RET RESTRICTED;                                              0872
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        0873
*   RESPECIFY                                                      0874
*     RET UNRESTRICTED;                                            0874
*   MWAPFUNC=PDF84;                 /* SET FUNCTION CODE             */
         MVI   MWAPFUNC,X'54'                                      0875
*   OPWWRKPT=OPWDTWRK;              /* GET DATA AMB WORK AREA POINTER*/
         L     @05,OPWDTWRK(,RCORE)                                0876
         ST    @05,OPWWRKPT(,RCORE)                                0876
*   ENQRNACB=OPWCACB;               /* GET CATALOG ACB ADDRESS       */
         MVC   ENQRNACB(4),OPWCACB(RCORE)                          0877
*   ENQRNCI=OPWCDTCI;               /* GET DATA CI NUMBER            */
         L     @05,OPWCURPT(,RCORE)                                0878
         MVC   ENQRNCI(3),OPWCDTCI(@05)                            0878
*   CALL SHARE;                     /* DO SHARE PROCESSING           */
         BAL   @14,SHARE                                           0879
*   OPWWRKPT=OPWIXWRK;              /* GET INDEX AMB WORK AREA     0880
*                                      POINTER                       */
         L     @05,OPWIXWRK(,RCORE)                                0880
         ST    @05,OPWWRKPT(,RCORE)                                0880
*   ENQRNCI=OPWCIXCI;               /* GET INDEX CI NUMBER           */
         L     @05,OPWCURPT(,RCORE)                                0881
         MVC   ENQRNCI(3),OPWCIXCI(@05)                            0881
*   IF AMBLKSDS=ON THEN             /* IF INDEX AMB WORK AREA EXIST  */
         L     @05,ACBAMBL(,RACB)                                  0882
         TM    AMBLKSDS(@05),B'00000100'                           0882
         BNO   @RF00882                                            0882
*     CALL SHARE;                   /* DO SHARE PROCESSING           */
         BAL   @14,SHARE                                           0883
*   OPWWRKPT=ZERO;                  /* ZERO CURRENT AMB WORK AREA  0884
*                                      POINTER IN OPW                */
@RF00882 SLR   @05,@05                                             0884
         ST    @05,OPWWRKPT(,RCORE)                                0884
*   RESPECIFY                                                      0885
*     RET RESTRICTED;                                              0885
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        0886
*   RESPECIFY                                                      0887
*     RET UNRESTRICTED;                                            0887
*   END AMSHARE;                                                   0888
@EL00009 DS    0H                                                  0888
@EF00009 DS    0H                                                  0888
@ER00009 BR    @14                                                 0888
*SHARE:                                                            0889
*                                                                  0889
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - SECOND LEVEL PROCESSING FOR SUBTASK AND CROSS */
*/*                    REGION SHARING.                               */
*/*      01 INPUT -    1. OPWCAMBL^=0 INDICATE CONNECT TO EXISTING   */
*/*                       STRUCTURE.                                 */
*/*                    2. ACBRST INDICATE RESET OR NOT.              */
*/*                    3. JFCSHARE INDICATE DATA SET DISPOSITION.    */
*/*                    4. AMBLWRIT INDICATE OPEN FOR OUTPUT OR NOT.  */
*/*                    5. CTSHRF IF ON INDICATE FULL INTEGRITY.      */
*/*      01 OUTPUT -   1. ACCORDING TO THE INPUT INDICATORS ONE OF   */
*/*                       THE FOLLOWING PROCEDURES WAS CALLED.       */
*/*                       SUBTSKSS,SUBTSKMS,CRTSKRD OR CRTSKWR.      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0889
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0889
SHARE    DS    0H                                                  0890
*   RESPECIFY                                                      0890
*     RET RESTRICTED;                                              0890
*   MWASAVEC=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEC                                        0891
*   RESPECIFY                                                      0892
*     RET UNRESTRICTED;                                            0892
*   IF OPWCAMBL^=ZERO THEN          /* IF CONNECTING TO EXISTING   0893
*                                      STRUCTURES                    */
         L     @05,OPWCAMBL(,RCORE)                                0893
         LTR   @05,@05                                             0893
         BZ    @RF00893                                            0893
*     CALL SUBTSKSS;                /* CONNECT TO STRUCTURE          */
         BAL   @14,SUBTSKSS                                        0894
*   ELSE                            /* IF NOT CONNECTING             */
*     DO;                                                          0895
         B     @RC00893                                            0895
@RF00893 DS    0H                                                  0896
*       IF ACBRST=ON×               /* IF IT IS RESET OR             */
*           JFCSHARE=OFF×           /* DISP NOT EQUAL SHR OR         */
*           (AMBLWRIT=ON&CTSHRF=ON) THEN/* OUTPUT & SHR =1           */
         TM    ACBRST(RACB),B'00000100'                            0896
         BO    @RT00896                                            0896
         L     @05,OPWCOMWA(,RCORE)                                0896
         TM    JFCSHARE+100(@05),B'00001000'                       0896
         BZ    @RT00896                                            0896
         L     @05,ACBAMBL(,RACB)                                  0896
         TM    AMBLWRIT(@05),B'00100000'                           0896
         BNO   @RF00896                                            0896
         L     @05,OPWWRKPT(,RCORE)                                0896
         TM    CTSHRF(@05),B'00100000'                             0896
         BNO   @RF00896                                            0896
@RT00896 DS    0H                                                  0897
*         CALL SUBTSKMS;            /* INTRA-REGION SHARE PROCESSING */
         BAL   @14,SUBTSKMS                                        0897
*       ELSE                        /* NOT RESET OR SHR OR NOT OUTPUT
*                                      & SHR^=1                      */
*         DO;                                                      0898
         B     @RC00896                                            0898
@RF00896 DS    0H                                                  0899
*           IF AMBLWRIT=OFF THEN    /* OPEN FOR INPUT ONLY           */
         L     @05,ACBAMBL(,RACB)                                  0899
         TM    AMBLWRIT(@05),B'00100000'                           0899
         BNZ   @RF00899                                            0899
*             CALL CRTSKRD;         /* INTER-REGION SHARING FOR INPUT*/
         BAL   @14,CRTSKRD                                         0900
*           ELSE                    /* OUTPUT INDICATED              */
*             CALL CRTSKWR;         /* INTER-REGION SHARING FOR    0901
*                                      OUTPUT                        */
         B     @RC00899                                            0901
@RF00899 BAL   @14,CRTSKWR                                         0901
*         END;                                                     0902
@RC00899 DS    0H                                                  0903
*     END;                                                         0903
@RC00896 DS    0H                                                  0904
*   RESPECIFY                                                      0904
*     RET RESTRICTED;                                              0904
@RC00893 DS    0H                                                  0905
*   RET=MWASAVEC;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEC                                        0905
*   RESPECIFY                                                      0906
*     RET UNRESTRICTED;                                            0906
*   END SHARE;                                                     0907
@EL00010 DS    0H                                                  0907
@EF00010 DS    0H                                                  0907
@ER00010 BR    @14                                                 0907
*SUBTSKSS:                                                         0908
*                                                                  0908
*/********************************************************************/
*/*                                                                  */
*/*    01 FUNCTION - THIS ROUTINE DOES SHARE PROCESSING.  IT WILL    */
*/*                  CONNECT AN ACB TO AN EXISTING STRUCTURE.        */
*/*    01 INPUT -    1. AMBLWRIT BIT ON INDICATES OPENING FOR OUTPUT.*/
*/*                  2. CMBOUT BIT ON INDICATES EXISTING STRUCTURE   */
*/*                     OPENNED FOR OUTPUT.                          */
*/*                  3. OPEN INDICATOR FROM CATALOG (CTOPEN).        */
*/*                  4. CTSHRF BIT ON INDICATES FULL INTEGRITY.      */
*/*                  5. CTSHRW BIT ON INDICATES WRITE INTEGRITY.     */
*/*    01 OUTPUT -   1. MWACATON IS SET ON IF CATALOG OPEN INDICATOR */
*/*                     NEEDS TO BE SET.                             */
*/*                  2. ENQNEDO IS CALLED TO ENQ FOR THE ELEMENTARY  */
*/*                     DATA SET.                                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0908
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0908
SUBTSKSS DS    0H                                                  0909
*   RESPECIFY                                                      0909
*    (RET,                                                         0909
*     RETCODE) RESTRICTED;                                         0909
*   MWASAVED=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVED                                        0910
*   RESPECIFY                                                      0911
*     RET UNRESTRICTED;                                            0911
*   IF AMBLWRIT=ON THEN             /* OPENNING FOR OUTPUT           */
         L     @14,ACBAMBL(,RACB)                                  0912
         TM    AMBLWRIT(@14),B'00100000'                           0912
         BNO   @RF00912                                            0912
*     DO;                                                          0913
*       IF CMBOUT=OFF THEN          /* EXISTING STRUCTURE CLEARED FOR
*                                      OUTPUT                        */
         L     @14,AMBLCMB(,@14)                                   0914
         TM    CMBOUT(@14),B'10000000'                             0914
         BNZ   @RF00914                                            0914
*         DO;                                                      0915
*           CALL ENQEXDTO;          /* CONCURRENT USER FOR OUTPUT  0916
*                                      EXIST OR NOT                  */
         BAL   @14,ENQEXDTO                                        0916
*           IF RETCODE=ZERO THEN    /* NO CONCURRENT USER FOR OUTPUT */
         LTR   RETCODE,RETCODE                                     0917
         BNZ   @RF00917                                            0917
*             DO;                                                  0918
*               IF CTOPEN=ON THEN   /* IF CATALOG OPEN INDICATOR IS
*                                      ON                            */
         L     @14,OPWWRKPT(,RCORE)                                0919
         TM    CTOPEN(@14),B'10000000'                             0919
         BNO   @RF00919                                            0919
*                 DO;                                              0920
*                   MWAPCODE=PP56;  /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'38'                                      0921
*                   CALL PROBDT2B;  /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0922
*                 END;                                             0923
*               ELSE                /* CATALOG OPEN INDICATOR NOT ON */
*                 DO;                                              0924
         B     @RC00919                                            0924
@RF00919 DS    0H                                                  0925
*                   IF OPWWRKPT=OPWDTWRK THEN/* IF IT IS DATA        */
         CLC   OPWWRKPT(4,RCORE),OPWDTWRK(RCORE)                   0925
         BNE   @RF00925                                            0925
*                     MWACATDT=ON;  /* DATA NEEDS OPEN INDICATOR ON  */
         OI    MWACATDT,B'10000000'                                0926
*                   ELSE            /* IF IT IS INDEX        @ZA03663*/
*                     MWACATIX=ON;  /* INDEX NEEDS OPEN INDICATOR ON */
         B     @RC00925                                            0927
@RF00925 OI    MWACATIX,B'10000000'                                0927
*                 END;                                             0928
*             END;                                                 0929
*           ELSE                    /* CONCURRENT USER FOR OUTPUT  0930
*                                      EXIST                         */
*             IF CTSHRF=ON×CTSHRW=ON THEN/* IF FULL SHARE INDICATED  */
         B     @RC00917                                            0930
@RF00917 L     @14,OPWWRKPT(,RCORE)                                0930
         TM    CTSHRF(@14),B'01100000'                             0930
         BZ    @RF00930                                            0930
*               DO;                                                0931
*                 MWAPCODE=PP52;    /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'34'                                      0932
*                 CALL PROBDT2B;    /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0933
*               END;                                               0934
*           CALL ENQNEDO;           /* ENQ NON-EXCLUSIVE FOR OUTPUT  */
@RF00930 DS    0H                                                  0935
@RC00917 BAL   @14,ENQNEDO                                         0935
*           IF OPWWRKPT=OPWDTWRK THEN/* IF ENTRY FOR DATA    @Z30SSDP*/
         CLC   OPWWRKPT(4,RCORE),OPWDTWRK(RCORE)                   0936
         BNE   @RF00936                                            0936
*             DO;                   /* UPDATE TO OUTPUT      @ZA03663*/
*               MWAAMBPT=OPWCAMBL->AMBLDTA;/* PT TO DATA AMB @XM01165*/
         L     @14,OPWCAMBL(,RCORE)                                0938
         L     @14,AMBLDTA(,@14)                                   0938
         ST    @14,MWAAMBPT                                        0938
*               CALL UPDATDEB;      /* UPDATE DEB TO OUTPUT  @Z30SSDT*/
         BAL   @14,UPDATDEB                                        0939
*               IF AMBLLSR=OFF&AMBLGSR=OFF THEN/* IF NOT LSR OR GSR  */
         L     @14,ACBAMBL(,RACB)                                  0940
         TM    AMBLLSR(@14),B'01100000'                            0940
         BNZ   @RF00940                                            0940
*                 DO;               /* UPDATE IOSBS TO OUTPUT      0941
*                                                            @ZA03663*/
*                   MWAIOMBP=AMBIOMB;/* POINT TO IOMB        @Z30SSDP*/
         L     @14,MWAAMBPT                                        0942
         L     MWAIOMBP,AMBIOMB(,@14)                              0942
*                   DO UNTIL MWAIOMBP=0;/* LOOP THROUGH IOSBS      0943
*                                                            @Z30SSDT*/
@DL00943 DS    0H                                                  0944
*                     IOSFMSK=IOSFMSK&MWAFMWB;/* REMOVE INHIBIT WRITE
*                                                            @Z30SSDT*/
         L     @14,IOMIOSB(,MWAIOMBP)                              0944
         NI    IOSFMSK(@14),B'10111111'                            0944
*                     MWAIOMBP=IOMNXT1;/* POINT TO NEXT SET  @Z30SSDT*/
         L     MWAIOMBP,IOMNXT1(,MWAIOMBP)                         0945
*                   END;            /*                       @Z30SSDT*/
@DE00943 LTR   MWAIOMBP,MWAIOMBP                                   0946
         BNZ   @DL00943                                            0946
*                 END;              /*                       @ZA03663*/
*               IF OPWIXWRK=0 THEN  /* CHK FOR ESDS          @Z30SSDP*/
@RF00940 L     @14,OPWIXWRK(,RCORE)                                0948
         LTR   @14,@14                                             0948
         BNZ   @RF00948                                            0948
*                 CMBOUT=ON;        /* THEN INDICATE STRUCTURE OPEN  */
         L     @14,ACBAMBL(,RACB)                                  0949
         L     @14,AMBLCMB(,@14)                                   0949
         OI    CMBOUT(@14),B'10000000'                             0949
*             END;                  /*                       @Z30SSDP*/
*           ELSE                    /* ENTRY FOR INDEX       @Z30SSDP*/
*             DO;                   /* YES,                  @Z30SSDP*/
         B     @RC00936                                            0951
@RF00936 DS    0H                                                  0952
*               MWAAMBPT=OPWCAMBL->AMBLIX;/* PT TO INDEX AMB @Z30SSDP*/
         L     @14,OPWCAMBL(,RCORE)                                0952
         L     @14,AMBLIX(,@14)                                    0952
         ST    @14,MWAAMBPT                                        0952
*               CALL UPDATDEB;      /* UPDATE DEB TO OUTPUT  @Z30SSDT*/
         BAL   @14,UPDATDEB                                        0953
*               CMBOUT=ON;          /* TURN ON CMB OUT BIT           */
         L     @14,ACBAMBL(,RACB)                                  0954
         L     @14,AMBLCMB(,@14)                                   0954
         OI    CMBOUT(@14),B'10000000'                             0954
*             END;                  /*                       @Z30SSDP*/
*         END;                                                     0956
@RC00936 DS    0H                                                  0957
*     END;                                                         0957
@RF00914 DS    0H                                                  0958
*   IF ACBEXLST>ONE&EXLLEN>THIRTY5& /* EXIT LIST EXIST AND           */
*       EXLJRNF(2)=ON THEN          /* JOURNALLING INDICATED         */
@RF00912 L     @14,ACBEXLST(,RACB)                                 0958
         C     @14,@CF00059                                        0958
         BNH   @RF00958                                            0958
         LH    @05,EXLLEN(,@14)                                    0958
         C     @05,@CF00148                                        0958
         BNH   @RF00958                                            0958
         TM    EXLJRNF(@14),B'01000000'                            0958
         BNO   @RF00958                                            0958
*     DO;                                                          0959
*       OPWCAMBL->AMBLDTA->AMBJRN=ON;/* IND JOURNALLING IN DATA AMB  */
         L     @14,OPWCAMBL(,RCORE)                                0960
         L     @05,AMBLDTA(,@14)                                   0960
         OI    AMBJRN(@05),B'00000010'                             0960
*       IF OPWCAMBL->AMBLIX^=ZERO THEN/* IF INDEX AMB EXIST          */
         L     @14,AMBLIX(,@14)                                    0961
         LTR   @14,@14                                             0961
         BZ    @RF00961                                            0961
*         OPWCAMBL->AMBLIX->AMBJRN=ON;/* IND JOURNALLING IN INDEX AMB*/
         OI    AMBJRN(@14),B'00000010'                             0962
*     END;                                                         0963
@RF00961 DS    0H                                                  0964
*   RESPECIFY                                                      0964
*     RET RESTRICTED;                                              0964
@RF00958 DS    0H                                                  0965
*   RET=MWASAVED;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVED                                        0965
*   RESPECIFY                                                      0966
*    (RET,                                                         0966
*     RETCODE) UNRESTRICTED;                                       0966
*   END SUBTSKSS;                                                  0967
@EL00011 DS    0H                                                  0967
@EF00011 DS    0H                                                  0967
@ER00011 BR    @14                                                 0967
*UPDATDEB:                                                         0968
*                                                                  0968
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - UPDATE DEB TO REFLECT OUTPUT                  */
*/*      01 INPUT    - POINTER TO AMB IN MWAAMBPT                    */
*/*      01 OUTPUT   - DEB UPDATED                                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0968
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0968
UPDATDEB DS    0H                                                  0969
*   RESPECIFY                                                      0969
*     RET RESTRICTED;                                              0969
*   RESPECIFY                                                      0970
*     DEBDASD BASED(MWADEBEX);      /* ADDRESSIBILITY FOR EXTENTS    */
*   MWASAVEE=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEE                                        0971
*   RESPECIFY                                                      0972
*     RET UNRESTRICTED;                                            0972
*   MWADEBPT=AMBDEBAD;              /* POINT TO DEB          @Z30SSDT*/
         L     @01,MWAAMBPT                                        0973
         L     MWADEBPT,AMBDEBAD-1(,@01)                           0973
         LA    MWADEBPT,0(,MWADEBPT)                               0973
*   MWADEBEX=ADDR(DEBBASND);        /* POINT TO DEB EXTENT   @Z30SSDT*/
         LA    MWADEBEX,DEBBASND(,MWADEBPT)                        0974
*   DO MWAINDEX=DEBNMEXT TO 1 BY-1; /* LOOP THROUGH EXTENTS  @Z30SSDT*/
         SLR   MWAINDEX,MWAINDEX                                   0975
         IC    MWAINDEX,DEBNMEXT(,MWADEBPT)                        0975
         B     @DE00975                                            0975
@DL00975 DS    0H                                                  0976
*     DEBDVMOD=DEBDVMOD&MWAFMWB;    /* REMOVE INHIBIT WRITE IN FILE
*                                      MASK                  @Z30SSDT*/
         NI    DEBDVMOD(MWADEBEX),B'10111111'                      0976
*     MWADEBEX=ADDR(DEBDASD)+LENGTH(DEBDASD);/* POINT TO NEXT EXTENT */
         AL    MWADEBEX,@CF00146                                   0977
*   END;                                                           0978
         BCTR  MWAINDEX,0                                          0978
@DE00975 LTR   MWAINDEX,MWAINDEX                                   0978
         BP    @DL00975                                            0978
*   RESPECIFY                                                      0979
*     RET RESTRICTED;                                              0979
*   RET=MWASAVEE;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEE                                        0980
*   RESPECIFY                                                      0981
*     RET UNRESTRICTED;                                            0981
*   END UPDATDEB;                                                  0982
@EL00012 DS    0H                                                  0982
@EF00012 DS    0H                                                  0982
@ER00012 BR    @14                                                 0982
*SUBTSKMS:                                                         0983
*                                                                  0983
*/********************************************************************/
*/*                                                                  */
*/*    01 FUNCTION - THIS ROUTINE DOES SHARE PROCESSING FOR THE FIRST*/
*/*                  OPEN IN A REGION OF A DATA SET.                 */
*/*    01 INPUT -    1. OPEN INDICATOR FROM CATALOG (CTOPEN).        */
*/*                  2. AMBLWRIT BIT ON INDICATES OUTPUT PROCESSING. */
*/*    01 OUTPUT -   1. MWACATON IS SET ON IF CATALOG OPEN INDICATOR */
*/*                     NEEDS TO BE SET IN THE CATALOG.              */
*/*                  2. ENQEXDO IS CALLED TO ENQ FOR THE ELEMENTARY  */
*/*                     DATA SET.                                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0983
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0983
SUBTSKMS DS    0H                                                  0984
*   RESPECIFY                                                      0984
*    (RET,                                                         0984
*     RETCODE) RESTRICTED;                                         0984
*   MWASAVED=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVED                                        0985
*   RESPECIFY                                                      0986
*     RET UNRESTRICTED;                                            0986
*   CALL ENQEXD;                    /* ENQ EXCLUSIVE                 */
         BAL   @14,ENQEXD                                          0987
*   IF RETCODE=ZERO THEN            /* ENQ SUCCESSFUL                */
         LTR   RETCODE,RETCODE                                     0988
         BNZ   @RF00988                                            0988
*     DO;                                                          0989
*       IF ACBRST=OFF&CTOPEN=ON THEN/* CATALOG OPEN INDICATOR ON AND
*                                      NOT RESET             @XM01165*/
         TM    ACBRST(RACB),B'00000100'                            0990
         BNZ   @RF00990                                            0990
         L     @14,OPWWRKPT(,RCORE)                                0990
         TM    CTOPEN(@14),B'10000000'                             0990
         BNO   @RF00990                                            0990
*         DO;                                                      0991
*           MWAPCODE=PP56;          /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'38'                                      0992
*           CALL PROBDT2B;          /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        0993
*         END;                                                     0994
*       IF AMBLWRIT=ON×ACBRST=ON THEN/* OPEN FOR OUTPUT OR RESET     */
@RF00990 L     @14,ACBAMBL(,RACB)                                  0995
         TM    AMBLWRIT(@14),B'00100000'                           0995
         BO    @RT00995                                            0995
         TM    ACBRST(RACB),B'00000100'                            0995
         BNO   @RF00995                                            0995
@RT00995 DS    0H                                                  0996
*         DO;                                                      0996
*           CALL ENQEXDO;           /* ENQ EXCLUSIVE FOR OUTPUT      */
         BAL   @14,ENQEXDO                                         0997
*           IF OPWWRKPT=OPWDTWRK THEN/* IF IT IS DATA                */
         CLC   OPWWRKPT(4,RCORE),OPWDTWRK(RCORE)                   0998
         BNE   @RF00998                                            0998
*             MWACATDT=ON;          /* IND DATA NEEDS OPEN INDR ON   */
         OI    MWACATDT,B'10000000'                                0999
*           IF OPWWRKPT=OPWIXWRK THEN/* IF IT IS INDEX               */
@RF00998 CLC   OPWWRKPT(4,RCORE),OPWIXWRK(RCORE)                   1000
         BNE   @RF01000                                            1000
*             MWACATIX=ON;          /* IND INDEX NEEDS OPEN INDR ON  */
         OI    MWACATIX,B'10000000'                                1001
*         END;                                                     1002
*     END;                                                         1003
*   ELSE                            /* ENQ WAS UNSUCCESSFUL          */
*     DO;                                                          1004
         B     @RC00988                                            1004
@RF00988 DS    0H                                                  1005
*       IF RETCODE^=EIGHT×          /* REGION DOES NOT OWN RESOURCES
*                                      OR                            */
*           ACBRST=ON×              /* OPENNED FOR RESTART OR        */
*           AMBLWRIT=ON THEN        /* OPENNED FOR OUTPUT            */
         C     RETCODE,@CF00065                                    1005
         BNE   @RT01005                                            1005
         TM    ACBRST(RACB),B'00000100'                            1005
         BO    @RT01005                                            1005
         L     @14,ACBAMBL(,RACB)                                  1005
         TM    AMBLWRIT(@14),B'00100000'                           1005
         BNO   @RF01005                                            1005
@RT01005 DS    0H                                                  1006
*         DO;                                                      1006
*           MWAPCODE=PP52;          /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'34'                                      1007
*           CALL PROBDT2B;          /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        1008
*         END;                                                     1009
*       ELSE                        /* REGION OWN RESOURCES SHARING
*                                      STILL POSSIBLE                */
*         DO;                                                      1010
         B     @RC01005                                            1010
@RF01005 DS    0H                                                  1011
*           CALL ENQEXDTO;          /* CONCURRENT USER FOR OUTPUT    */
         BAL   @14,ENQEXDTO                                        1011
*           IF RETCODE^=ZERO THEN   /* IF ENQ FAILED                 */
         LTR   RETCODE,RETCODE                                     1012
         BZ    @RF01012                                            1012
*             DO;                                                  1013
*               MWAPCODE=PP52;      /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'34'                                      1014
*               CALL PROBDT2B;      /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        1015
*             END;                                                 1016
*         END;                                                     1017
@RF01012 DS    0H                                                  1018
*     END;                                                         1018
@RC01005 DS    0H                                                  1019
*   RESPECIFY                                                      1019
*     RET RESTRICTED;                                              1019
@RC00988 DS    0H                                                  1020
*   RET=MWASAVED;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVED                                        1020
*   RESPECIFY                                                      1021
*    (RET,                                                         1021
*     RETCODE) UNRESTRICTED;                                       1021
*   END SUBTSKMS;                                                  1022
@EL00013 DS    0H                                                  1022
@EF00013 DS    0H                                                  1022
@ER00013 BR    @14                                                 1022
*CRTSKRD:                                                          1023
*                                                                  1023
*/********************************************************************/
*/*                                                                  */
*/*    01 FUNCTION - THIS ROUTINE WILL DO SHARE PROCESSING WHEN AN   */
*/*                  ACB IS OPENING FOR READ-ONLY AND THERE IS CROSS */
*/*                  REGION SHARING.                                 */
*/*    01 INPUT -    1. OPEN INDICATOR FROM CATALOG (CTOPEN).        */
*/*                  2. CTSHRF ON INDICATES FULL INTEGRITY.          */
*/*    01 OUTPUT -   1. ENQNED IS CALLED TO ENQ FOR THE ELEMENTARY   */
*/*                     DATA SET.                                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  1023
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1023
CRTSKRD  DS    0H                                                  1024
*   RESPECIFY                                                      1024
*    (RET,                                                         1024
*     RETCODE) RESTRICTED;                                         1024
*   MWASAVED=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVED                                        1025
*   RESPECIFY                                                      1026
*     RET UNRESTRICTED;                                            1026
*   CALL ENQNED;                    /* ENQ NON-EXCLUSIVE             */
         BAL   @14,ENQNED                                          1027
*   IF RETCODE^=ZERO&RETCODE^=EIGHT THEN/* REGION DOES NOT OWN     1028
*                                      RESOURCE                      */
         LTR   RETCODE,RETCODE                                     1028
         BZ    @RF01028                                            1028
         C     RETCODE,@CF00065                                    1028
         BE    @RF01028                                            1028
*     DO;                                                          1029
*       MWAPCODE=PP52;              /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'34'                                      1030
*       CALL PROBDT2B;              /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        1031
*     END;                                                         1032
*   ELSE                            /* REGION OWNS RESOURCES         */
*     DO;                                                          1033
         B     @RC01028                                            1033
@RF01028 DS    0H                                                  1034
*       CALL ENQEXDTO;              /* CONCURRENT USER FOR OUTPUT    */
         BAL   @14,ENQEXDTO                                        1034
*       IF RETCODE=ZERO&            /* NO CONCURRENT USER AND        */
*           CTOPEN=ON THEN          /* OPEN INDICATOR IS ON          */
         LTR   RETCODE,RETCODE                                     1035
         BNZ   @RF01035                                            1035
         L     @14,OPWWRKPT(,RCORE)                                1035
         TM    CTOPEN(@14),B'10000000'                             1035
         BNO   @RF01035                                            1035
*         DO;                                                      1036
*           MWAPCODE=PP56;          /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'38'                                      1037
*           CALL PROBDT2B;          /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        1038
*         END;                                                     1039
*       ELSE                        /* CONCURRENT USER EXIST @Z30SSRL*/
*         IF RETCODE^=ZERO&         /* RESOURCES USED FOR OUTPUT   1040
*                                                            @XM01165*/
*             CTSHRF=ON THEN        /* SHR IS NOT PERMITTED  @XM01165*/
         B     @RC01035                                            1040
@RF01035 LTR   RETCODE,RETCODE                                     1040
         BZ    @RF01040                                            1040
         L     @14,OPWWRKPT(,RCORE)                                1040
         TM    CTSHRF(@14),B'00100000'                             1040
         BNO   @RF01040                                            1040
*           DO;                                                    1041
*             MWAPCODE=PP52;        /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'34'                                      1042
*             CALL PROBDT2B;        /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        1043
*           END;                                                   1044
*     END;                                                         1045
@RF01040 DS    0H                                                  1045
@RC01035 DS    0H                                                  1046
*   RESPECIFY                                                      1046
*     RET RESTRICTED;                                              1046
@RC01028 DS    0H                                                  1047
*   RET=MWASAVED;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVED                                        1047
*   RESPECIFY                                                      1048
*    (RET,                                                         1048
*     RETCODE) UNRESTRICTED;                                       1048
*   END CRTSKRD;                                                   1049
@EL00014 DS    0H                                                  1049
@EF00014 DS    0H                                                  1049
@ER00014 BR    @14                                                 1049
*CRTSKWR:                                                          1050
*                                                                  1050
*/********************************************************************/
*/*                                                                  */
*/*    01 FUNCTION - THIS ROUTINE DOES SHARE PROCESSING FOR THE ACB  */
*/*                  THAT IS OPENED FOR OUTPUT WHEN THERE IS CROSS   */
*/*                  REGION SHARING.                                 */
*/*    01 INPUT -    1. OPEN INDICATOR FROM CATALOG (CTOPEN).        */
*/*                  2. CTSHRW ON INDICATES WRITE INTEGRITY.         */
*/*    01 OUTPUT -   1. ENQNED IS CALLED TO ENQ FOR THE ELEMENTARY   */
*/*                     DATA SET.                                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  1050
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1050
CRTSKWR  DS    0H                                                  1051
*   RESPECIFY                                                      1051
*    (RET,                                                         1051
*     RETCODE) RESTRICTED;                                         1051
*   MWASAVED=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVED                                        1052
*   RESPECIFY                                                      1053
*     RET UNRESTRICTED;                                            1053
*   CALL ENQEXDT;                   /* ANYONE ENQ'ED ON DATA SET NAME*/
         BAL   @14,ENQEXDT                                         1054
*   IF RETCODE^=ZERO THEN           /* YES SOMEONE ENQ'ED ON DATA SET
*                                      NAME ALREADY                  */
         LTR   RETCODE,RETCODE                                     1055
         BZ    @RF01055                                            1055
*     DO;                                                          1056
*       CALL ENQEXDTO;              /* ANYONE USING RESOURCE FOR   1057
*                                      OUTPUT                        */
         BAL   @14,ENQEXDTO                                        1057
*       IF RETCODE=ZERO THEN        /* IF NO                         */
         LTR   RETCODE,RETCODE                                     1058
         BNZ   @RF01058                                            1058
*         DO;                                                      1059
*           IF CTOPEN=ON THEN       /* IF CATALOG OPEN INDICATOR IS
*                                      ON                            */
         L     @14,OPWWRKPT(,RCORE)                                1060
         TM    CTOPEN(@14),B'10000000'                             1060
         BNO   @RF01060                                            1060
*             DO;                                                  1061
*               MWAPCODE=PP56;      /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'38'                                      1062
*               CALL PROBDT2B;      /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        1063
*             END;                                                 1064
*           ELSE                    /* CATALOG OPEN INDICATOR IS NOT
*                                      ON                            */
*             DO;                                                  1065
         B     @RC01060                                            1065
@RF01060 DS    0H                                                  1066
*               IF OPWWRKPT=OPWDTWRK THEN/* IF IT IS DATA            */
         CLC   OPWWRKPT(4,RCORE),OPWDTWRK(RCORE)                   1066
         BNE   @RF01066                                            1066
*                 MWACATDT=ON;      /* IND DATA NEEDS OPEN INDR ON   */
         OI    MWACATDT,B'10000000'                                1067
*               IF OPWWRKPT=OPWIXWRK THEN/* IF IT IS INDEX           */
@RF01066 CLC   OPWWRKPT(4,RCORE),OPWIXWRK(RCORE)                   1068
         BNE   @RF01068                                            1068
*                 MWACATIX=ON;      /* IND INDEX NEEDS OPEN INDR ON  */
         OI    MWACATIX,B'10000000'                                1069
*             END;                                                 1070
*         END;                                                     1071
*       ELSE                        /* IF SOMEONE IS USING RESOURCES
*                                      FOR OUTPUT                    */
*         IF CTSHRW=ON THEN         /* NEED DATA INTEGRITY           */
         B     @RC01058                                            1072
@RF01058 L     @14,OPWWRKPT(,RCORE)                                1072
         TM    CTSHRW(@14),B'01000000'                             1072
         BNO   @RF01072                                            1072
*           DO;                                                    1073
*             MWAPCODE=PP52;        /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'34'                                      1074
*             CALL PROBDT2B;        /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        1075
*           END;                                                   1076
*     END;                                                         1077
*   ELSE                            /* NO ONE ENQ'ED ON DATA SET NAME*/
*     DO;                                                          1078
         B     @RC01055                                            1078
@RF01055 DS    0H                                                  1079
*       IF CTOPEN=ON THEN           /* IF OPEN INDICATOR IS ON       */
         L     @14,OPWWRKPT(,RCORE)                                1079
         TM    CTOPEN(@14),B'10000000'                             1079
         BNO   @RF01079                                            1079
*         DO;                                                      1080
*           MWAPCODE=PP56;          /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'38'                                      1081
*           CALL PROBDT2B;          /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        1082
*         END;                                                     1083
*       ELSE                        /* OPEN INDICATOR NOT ON         */
*         DO;                                                      1084
         B     @RC01079                                            1084
@RF01079 DS    0H                                                  1085
*           IF OPWWRKPT=OPWDTWRK THEN/* IF IT IS DATA                */
         CLC   OPWWRKPT(4,RCORE),OPWDTWRK(RCORE)                   1085
         BNE   @RF01085                                            1085
*             MWACATDT=ON;          /* DATA NEEDS OPEN INDICATOR ON  */
         OI    MWACATDT,B'10000000'                                1086
*           IF OPWWRKPT=OPWIXWRK THEN/* IF IT IS INDEX               */
@RF01085 CLC   OPWWRKPT(4,RCORE),OPWIXWRK(RCORE)                   1087
         BNE   @RF01087                                            1087
*             MWACATIX=ON;          /* INDEX NEEDS OPEN INDICATOR ON */
         OI    MWACATIX,B'10000000'                                1088
*         END;                                                     1089
@RF01087 DS    0H                                                  1090
*     END;                                                         1090
@RC01079 DS    0H                                                  1091
*   CALL ENQNED;                    /* ENQ NON-EXCLUSIVE             */
@RC01055 BAL   @14,ENQNED                                          1091
*   IF RETCODE=ZERO×RETCODE=EIGHT THEN/* IF DATA SET AVAILABLE       */
         LTR   RETCODE,RETCODE                                     1092
         BZ    @RT01092                                            1092
         C     RETCODE,@CF00065                                    1092
         BNE   @RF01092                                            1092
@RT01092 DS    0H                                                  1093
*     DO;                                                          1093
*       CALL ENQNEDO;               /* ENQ NON-EXCLUSIVE FOR OUTPUT  */
         BAL   @14,ENQNEDO                                         1094
*       IF RETCODE=EIGHT THEN       /* IF TASK ALREADY HAS RESOURCE  */
         C     RETCODE,@CF00065                                    1095
         BNE   @RF01095                                            1095
*         DO;                       /* THEN TEST FOR EXCLUSIVE     1096
*                                      CONTROL                       */
*           IF ENQEXSHR=OFF THEN    /* IF NOT SHARED         @Z30SSDP*/
         TM    ENQEXSHR,B'00010000'                                1097
         BNZ   @RF01097                                            1097
*             DO;                                                  1098
*               MWAPCODE=PP52;      /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'34'                                      1099
*               CALL PROBDT2B;      /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        1100
*             END;                                                 1101
*         END;                                                     1102
*       ELSE                        /* TASK DOES NOT HAVE RESOURCE   */
*         IF RETCODE^=ZERO THEN     /* IF DATA SET NOT AVAILABLE     */
         B     @RC01095                                            1103
@RF01095 LTR   RETCODE,RETCODE                                     1103
         BZ    @RF01103                                            1103
*           DO;                                                    1104
*             MWAPCODE=PP52;        /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'34'                                      1105
*             CALL PROBDT2B;        /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        1106
*           END;                                                   1107
*     END;                                                         1108
*   ELSE                            /* DATA SET NOT AVAILABLE        */
*     DO;                                                          1109
         B     @RC01092                                            1109
@RF01092 DS    0H                                                  1110
*       MWAPCODE=PP52;              /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'34'                                      1110
*       CALL PROBDT2B;              /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        1111
*     END;                                                         1112
*   RESPECIFY                                                      1113
*     RET RESTRICTED;                                              1113
@RC01092 DS    0H                                                  1114
*   RET=MWASAVED;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVED                                        1114
*   RESPECIFY                                                      1115
*    (RET,                                                         1115
*     RETCODE) UNRESTRICTED;                                       1115
*   END CRTSKWR;                                                   1116
@EL00015 DS    0H                                                  1116
@EF00015 DS    0H                                                  1116
@ER00015 BR    @14                                                 1116
*VOLPROC:                                                          1117
*                                                                  1117
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - PERFORM VOLUME PROCESSING FOR EACH AMB.       */
*/*      01 INPUT -    1. POINTERS TO AMB WORK AREAS IN OPWDTWRK AND */
*/*                       OPWIXWRK.                                  */
*/*      01 OUTPUT -   1. VOLUME PROCESSED.                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  1117
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1117
VOLPROC  DS    0H                                                  1118
*   RESPECIFY                                                      1118
*     RET RESTRICTED;                                              1118
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        1119
*   RESPECIFY                                                      1120
*     RET UNRESTRICTED;                                            1120
*   MWAPFUNC=PDF62;                 /* SET FUNCTION CODE             */
         MVI   MWAPFUNC,X'3E'                                      1121
*   OPWWRKPT=OPWDTWRK;              /* POINT TO AMB WORK AREA OF DATA
*                                      AMB                           */
         L     @05,OPWDTWRK(,RCORE)                                1122
         ST    @05,OPWWRKPT(,RCORE)                                1122
*   CALL VMTPROC;                   /* PROCESS VMT                   */
         BAL   @14,VMTPROC                                         1123
*   IF OPWIXWRK^=ZERO THEN          /* IF KSDS                       */
         L     @05,OPWIXWRK(,RCORE)                                1124
         LTR   @05,@05                                             1124
         BZ    @RF01124                                            1124
*     DO;                                                          1125
*       OPWWRKPT=OPWIXWRK;          /* POINT TO INDEX AMB WORK AREA  */
         ST    @05,OPWWRKPT(,RCORE)                                1126
*       CALL VMTPROC;               /* PROCESS VMT                   */
         BAL   @14,VMTPROC                                         1127
*     END;                                                         1128
*   OPWWRKPT=ZERO;                  /* ZERO OPW CURRENT AMB WORK AREA
*                                      POINTER                       */
@RF01124 SLR   @05,@05                                             1129
         ST    @05,OPWWRKPT(,RCORE)                                1129
*   RESPECIFY                                                      1130
*     RET RESTRICTED;                                              1130
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEA                                        1131
*   RESPECIFY                                                      1132
*     RET UNRESTRICTED;                                            1132
*   END VOLPROC;                                                   1133
@EL00016 DS    0H                                                  1133
@EF00016 DS    0H                                                  1133
@ER00016 BR    @14                                                 1133
*VMTPROC:                                                          1134
*                                                                  1134
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - CALL VMTVOLSR TO SCAN VMT'S FOR LIKE DEVICE   */
*/*                    TYPE. CALL VOLSRCH FOR VOLUME SERIAL NUMBERS  */
*/*                    MATCH.                                        */
*/*      01 INPUT -    1. POINTER TO VMT IN BIBVMT.                  */
*/*                    2. ADDRESS OF AMB WORK AREA IN OPWWRKPT       */
*/*      01 OUTPUT -   1. MWALLMNT=ON IF ALL VOLUMES ARE MOUNTED.    */
*/*                                                                  */
*/********************************************************************/
*                                                                  1134
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1134
VMTPROC  DS    0H                                                  1135
*   RESPECIFY                                                      1135
*     RET RESTRICTED;                                              1135
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1136
*   RESPECIFY                                                      1137
*     RET UNRESTRICTED;                                            1137
*   MWAINDFG=ON;                    /* SET INDICATOR FLAG TO INDICATE
*                                      FIRST CALL                    */
         OI    MWAINDFG,B'10000000'                                1138
*   MWAVMTPT=BIBVMT;                /* POINT TO VMT FROM BIB         */
         L     @01,ACBAMBL(,RACB)                                  1139
         L     @01,AMBLBIB(,@01)                                   1139
         L     MWAVMTPT,BIBVMT(,@01)                               1139
*   IF OPWCAT=ON×OPWSCRA=ON THEN    /* IF NOT CATALOG        @ZA05931*/
         TM    OPWCAT(RCORE),B'11000000'                           1140
         BZ    @RF01140                                            1140
*     OPWWRKPT->CTDEVTYP(2:4)=VMTDEV;/* SET DEVICE TYPE      @ZA05931*/
         L     @01,OPWWRKPT(,RCORE)                                1141
         MVC   CTDEVTYP+1(3,@01),VMTDEV(MWAVMTPT)                  1141
*   MWADEVTP=OPWWRKPT->CTDEVTYP(2:4);/* GET DEVICE TYPE      @ZA05931*/
@RF01140 L     @01,OPWWRKPT(,RCORE)                                1142
         MVC   MWADEVTP(3),CTDEVTYP+1(@01)                         1142
*   MWADVOPT=MWADVOPT&MWAOMASK;     /* RESET EXTRANEOUS BITS         */
         NI    MWADVOPT,B'00001000'                                1143
*   CALL VMTVOLSR;                  /* CALL VMT SCAN AND VOLUME    1144
*                                      SERIAL NUMBER SEARCH          */
         BAL   @14,VMTVOLSR                                        1144
*   IF MWARETCD=FOUR THEN           /* IF VMT DEVICE TYPE NOT FOUND  */
         CLC   MWARETCD(4),@CF00106                                1145
         BNE   @RF01145                                            1145
*     DO;                                                          1146
*       IF OPWIXDT=ON THEN          /* IF INDEX DATA SET OPEN AS ESDS*/
         TM    OPWIXDT(RCORE),B'01000000'                          1147
         BNO   @RF01147                                            1147
*         DO;                                                      1148
*           MWAVMTPT=BIBVMT;        /* POINT TO FIRST VMT            */
         L     @01,ACBAMBL(,RACB)                                  1149
         L     @01,AMBLBIB(,@01)                                   1149
         L     MWAVMTPT,BIBVMT(,@01)                               1149
*           IF VMTDEV=MWADEVTP THEN /* IF DEVICE TYPE MATCH          */
         CLC   VMTDEV(3,MWAVMTPT),MWADEVTP                         1150
         BNE   @RF01150                                            1150
*             MWAVMTPT=VMTNXT;      /* POINT TO NEXT VMT             */
         L     MWAVMTPT,VMTNXT(,MWAVMTPT)                          1151
*           IF MWAVMTPT^=ZERO THEN  /* IF FOUND                      */
@RF01150 LTR   MWAVMTPT,MWAVMTPT                                   1152
         BZ    @RF01152                                            1152
*             CALL VOLSRCH;         /* SEARCH FOR VOL SER MATCH      */
         BAL   @14,VOLSRCH                                         1153
*         END;                                                     1154
*       ELSE                        /* INDEX NOT OPENNED AS ESDS     */
*         DO;                                                      1155
         B     @RC01147                                            1155
@RF01147 DS    0H                                                  1156
*           IF CTINDXSS=ON THEN     /* IF INDEX SEQUENCE SET WITH  1156
*                                      DATA                          */
         L     @05,OPWWRKPT(,RCORE)                                1156
         TM    CTINDXSS(@05),B'00100000'                           1156
         BNO   @RF01156                                            1156
*             DO;                                                  1157
*               MWADEVTP=OPWDTWRK->CTDEVTYP(2:4);/* GET DEVICE TYPE  */
         L     @01,OPWDTWRK(,RCORE)                                1158
         MVC   MWADEVTP(3),CTDEVTYP+1(@01)                         1158
*               MWADVOPT=MWADVOPT&MWAOMASK;/* RESET EXTRANEOUS BITS  */
         NI    MWADVOPT,B'00001000'                                1159
*               MWAINDFG=ON;        /* INDICATE FIRST CALL           */
         OI    MWAINDFG,B'10000000'                                1160
*               MWAVMTPT=BIBVMT;    /* POINT TO VMT FROM BIB         */
         L     @01,ACBAMBL(,RACB)                                  1161
         L     @01,AMBLBIB(,@01)                                   1161
         L     MWAVMTPT,BIBVMT(,@01)                               1161
*               CALL VMTVOLSR;      /* CALL SCAN VMT & VOL SER SEARCH*/
         BAL   @14,VMTVOLSR                                        1162
*             END;                                                 1163
*         END;                                                     1164
@RF01156 DS    0H                                                  1165
*     END;                                                         1165
@RC01147 DS    0H                                                  1166
*   RESPECIFY                                                      1166
*     RET RESTRICTED;                                              1166
@RF01145 DS    0H                                                  1167
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        1167
*   RESPECIFY                                                      1168
*     RET UNRESTRICTED;                                            1168
*   END VMTPROC;                                                   1169
@EL00017 DS    0H                                                  1169
@EF00017 DS    0H                                                  1169
@ER00017 BR    @14                                                 1169
*VMTVOLSR:                                                         1170
*                                                                  1170
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - SEARCH FOR LIKE DEVICE TYPE.                  */
*/*      01 INPUT -    1. POINTER TO VMT IN MWAVMTPT.                */
*/*                    2. ADDRESS OF AMB WORK AREA IN OPWWRKPT.      */
*/*                    3. MWADEVTP INITIALIZED.                      */
*/*      01 OUTPUT -   1. RETURN CODE SET IN MWARETCD.               */
*/*                       4-LIKE DEVICE TYPE NOT FOUND.              */
*/*                       8-ALL VOLUMES MOUNTED.                     */
*/*                                                                  */
*/********************************************************************/
*                                                                  1170
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1170
VMTVOLSR DS    0H                                                  1171
*   RESPECIFY                                                      1171
*     RET RESTRICTED;                                              1171
*   MWASAVEC=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEC                                        1172
*   RESPECIFY                                                      1173
*     RET UNRESTRICTED;                                            1173
*   MWARETCD=ZERO;                  /* ZERO RETURN CODE              */
         SLR   @15,@15                                             1174
         ST    @15,MWARETCD                                        1174
*   DO WHILE MWARETCD=ZERO;                                        1175
         B     @DE01175                                            1175
@DL01175 DS    0H                                                  1176
*     DO WHILE(MWAVMTPT^=ZERO&VMTDEV^=MWADEVTP);/* MATCH DEVICE TYPE */
         B     @DE01176                                            1176
@DL01176 DS    0H                                                  1177
*       MWAVMTPT=VMTNXT;            /* POINT TO NEXT VMT             */
         L     MWAVMTPT,VMTNXT(,MWAVMTPT)                          1177
*     END;                                                         1178
@DE01176 LTR   MWAVMTPT,MWAVMTPT                                   1178
         BZ    @DC01176                                            1178
         CLC   VMTDEV(3,MWAVMTPT),MWADEVTP                         1178
         BNE   @DL01176                                            1178
@DC01176 DS    0H                                                  1179
*     IF MWAINDFG=ON&               /* IF FIRST CALL AND             */
*         MWAVMTPT=ZERO THEN        /* LIKE DEVICE TYPE NOT FOUND    */
         TM    MWAINDFG,B'10000000'                                1179
         BNO   @RF01179                                            1179
         LTR   MWAVMTPT,MWAVMTPT                                   1179
         BNZ   @RF01179                                            1179
*       DO;                                                        1180
*         MWAPCODE=PP68;            /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'44'                                      1181
*         CALL PROBDT2B;            /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        1182
*       END;                                                       1183
*     IF MWAVMTPT=ZERO THEN         /* DEVICE TYPE NOT FOUND & NOT 1184
*                                      FIRST CALL                    */
@RF01179 LTR   MWAVMTPT,MWAVMTPT                                   1184
         BNZ   @RF01184                                            1184
*       MWARETCD=FOUR;              /* SET RETCODE TO INDICATE DEVICE
*                                      TYPE NOT FOUND                */
         MVC   MWARETCD(4),@CF00106                                1185
*     ELSE                          /* DEVICE TYPE FOUND             */
*       DO;                                                        1186
         B     @RC01184                                            1186
@RF01184 DS    0H                                                  1187
*         MWAINDFG=OFF;             /* RESET INDICATOR FLAG          */
         NI    MWAINDFG,B'01111111'                                1187
*         CALL VOLSRCH;             /* TRY TO MATCH VOL SER NUMBER   */
         BAL   @14,VOLSRCH                                         1188
*         IF MWALLMNT=ON THEN       /* IF ALL VOLUMES MOUNTED        */
         TM    MWALLMNT,B'10000000'                                1189
         BNO   @RF01189                                            1189
*           MWARETCD=EIGHT;         /* SET RETCODE TO INDICATE SUCH  */
         MVC   MWARETCD(4),@CF00065                                1190
*         ELSE                      /* NOT ALL VOLUMES MOUNTED       */
*           MWAVMTPT=VMTNXT;        /* SEARCH THE REST OF THE VMT'S  */
         B     @RC01189                                            1191
@RF01189 L     MWAVMTPT,VMTNXT(,MWAVMTPT)                          1191
*       END;                                                       1192
@RC01189 DS    0H                                                  1193
*   END;                                                           1193
@RC01184 DS    0H                                                  1193
@DE01175 L     @15,MWARETCD                                        1193
         LTR   @15,@15                                             1193
         BZ    @DL01175                                            1193
*   RESPECIFY                                                      1194
*     RET RESTRICTED;                                              1194
*   RET=MWASAVEC;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEC                                        1195
*   RESPECIFY                                                      1196
*     RET UNRESTRICTED;                                            1196
*   END VMTVOLSR;                                                  1197
@EL00018 DS    0H                                                  1197
@EF00018 DS    0H                                                  1197
@ER00018 BR    @14                                                 1197
*VOLSRCH:                                                          1198
*                                                                  1198
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - SEARCH FOR VOLUME SERIAL NUMBER MATCH.        */
*/*                    IF FOUND INCREMENT VMT USE COUNT BY ONE.      */
*/*      01 INPUT -    1. VOLUME MOUNT TABLE.                        */
*/*                    2. ADDRESS OF AMB WORK AREA IN OPWWRKPT.      */
*/*      01 OUTPUT -   1. MWALLMNT=ON IF ALL VOLUMES ARE MOUNTED.    */
*/*                                                                  */
*/********************************************************************/
*                                                                  1198
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1198
VOLSRCH  DS    0H                                                  1199
*   RESPECIFY                                                      1199
*     RET RESTRICTED;                                              1199
*   MWASAVED=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVED                                        1200
*   RESPECIFY                                                      1201
*     RET UNRESTRICTED;                                            1201
*   MWALLMNT=ON;                    /* INDICATE ALL VOLUMES MOUNTED  */
         OI    MWALLMNT,B'10000000'                                1202
*   MWACTVOL=ADDR(AMBWORK)+LENGTH(AMBWORK);/* PT TO 1ST VOLUME ENTRY */
         LA    MWACTVOL,232                                        1203
         AL    MWACTVOL,OPWWRKPT(,RCORE)                           1203
*   DO MWAINDEX=1 TO VOLENTNO;      /* LOOK AT ALL THE VOLUME ENTRIES*/
         LA    MWAINDEX,1                                          1204
         B     @DE01204                                            1204
@DL01204 DS    0H                                                  1205
*     MWASWTCH=OFF;                 /* INITIALIZE SWITCH TO OFF      */
         NI    MWASWTCH,B'01111111'                                1205
*     IF CTVOLMT=OFF THEN           /* IF MOUNT BIT IS OFF           */
         TM    CTVOLMT(MWACTVOL),B'10000000'                       1206
         BNZ   @RF01206                                            1206
*       DO;                                                        1207
*         DO MWAIND=1 TO VMTNOVOL WHILE MWASWTCH=OFF;/* LOOP THROUGH
*                                      VMT ENTRIES                   */
         LA    MWAIND,1                                            1208
         B     @DE01208                                            1208
@DL01208 TM    MWASWTCH,B'10000000'                                1208
         BNZ   @DC01208                                            1208
*           IF CTVOLSER=VMTVLSER(MWAIND) THEN/* MATCH VOL SER NO.    */
         LR    @09,MWAIND                                          1209
         SLA   @09,4                                               1209
         ST    @09,@TF00001                                        1209
         ALR   @09,MWAVMTPT                                        1209
         CLC   CTVOLSER(6,MWACTVOL),VMTVLSER-16(@09)               1209
         BNE   @RF01209                                            1209
*             DO;                                                  1210
*               MWASWTCH=ON;        /* SET SWITCH TO INDICATE        */
         OI    MWASWTCH,B'10000000'                                1211
*               VMTUSECT(MWAIND)=VMTUSECT(MWAIND)+ONE;/* INCREASE VMT
*                                      USE COUNT BY ONE              */
         LA    @15,1                                               1212
         L     @14,@TF00001                                        1212
         AL    @15,VMTUSECT-16(@14,MWAVMTPT)                       1212
         L     @14,@TF00001                                        1212
         ST    @15,VMTUSECT-16(@14,MWAVMTPT)                       1212
*               CTVOLMT=ON;         /* INDICATE VOLUME MOUNTED       */
         OI    CTVOLMT(MWACTVOL),B'10000000'                       1213
*               CTVOLUCB=VMTUCB(MWAIND);/* UCB ADDR TO AMB WK AREA   */
         L     @01,@TF00001                                        1214
         L     @15,VMTUCB-16(@01,MWAVMTPT)                         1214
         ST    @15,CTVOLUCB(,MWACTVOL)                             1214
*               MWAUCBPT=VMTUCB(MWAIND);/* POINT TO UCB              */
         LR    MWAUCBPT,@15                                        1215
*             END;                                                 1216
*         END;                                                     1217
@RF01209 AL    MWAIND,@CF00059                                     1217
@DE01208 CH    MWAIND,VMTNOVOL(,MWAVMTPT)                          1217
         BNH   @DL01208                                            1217
@DC01208 DS    0H                                                  1218
*         IF MWASWTCH=OFF THEN      /* VOL SER NUMBER DOES NOT MATCH */
         TM    MWASWTCH,B'10000000'                                1218
         BNZ   @RF01218                                            1218
*           MWALLMNT=OFF;           /* INDICATE NOT ALL VOLUME     1219
*                                      MOUNTED                       */
         NI    MWALLMNT,B'01111111'                                1219
*       END;                                                       1220
@RF01218 DS    0H                                                  1221
*     MWACTVOL=MWACTVOL+LENGTH(CTVOLENT)+/* PT TO NEXT VOLUME ENTRY  */
*         (LENGTH(CTKEYENT)+CTKEYLEN*TWO)*CTNOKEY+LENGTH(CTEXTENT)*
*         CTNOEXT;                                                 1221
@RF01206 LA    @09,20                                              1221
         LR    @07,MWACTVOL                                        1221
         ALR   @07,@09                                             1221
         LH    @01,CTKEYLEN(,MWACTVOL)                             1221
         ALR   @01,@01                                             1221
         AL    @01,@CF00146                                        1221
         MH    @01,CTNOKEY(,MWACTVOL)                              1221
         ALR   @07,@01                                             1221
         LR    @01,@09                                             1221
         SLR   @09,@09                                             1221
         IC    @09,CTNOEXT(,MWACTVOL)                              1221
         MR    @00,@09                                             1221
         ALR   @07,@01                                             1221
         LR    MWACTVOL,@07                                        1221
*   END;                                                           1222
         AL    MWAINDEX,@CF00059                                   1222
@DE01204 L     @09,OPWWRKPT(,RCORE)                                1222
         CH    MWAINDEX,VOLENTNO(,@09)                             1222
         BNH   @DL01204                                            1222
*   RESPECIFY                                                      1223
*     RET RESTRICTED;                                              1223
*   RET=MWASAVED;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVED                                        1224
*   RESPECIFY                                                      1225
*     RET UNRESTRICTED;                                            1225
*   END VOLSRCH;                                                   1226
@EL00019 DS    0H                                                  1226
@EF00019 DS    0H                                                  1226
@ER00019 BR    @14                                                 1226
*PROBDT2B:                                                         1227
*                                                                  1227
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - COMPLETE PROBLEM DETERMINATION PARAMETER LIST */
*/*                    AND CALL IDA0192P TO WRITE ERROR MESSAGES.    */
*/*      01 INPUT -    1. PROBLEM DETERMINATION PARAMETER LIST.      */
*/*                    2. CATALOG INTERFACE PARAMETER LIST.          */
*/*      01 OUTPUT -   1. ERROR MESSAGE WRITTEN.                     */
*/*                    2. IF TERMINATING ERROR THEN GO TO TERMINATION*/
*/*                       PROCESSING.                                */
*/*                                                                  */
*/********************************************************************/
*                                                                  1227
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1227
PROBDT2B DS    0H                                                  1228
*   RESPECIFY                                                      1228
*    (R6,                                                          1228
*     RET) RESTRICTED;                                             1228
*   R6=RET;                         /* SAVE RETURN ADDRESS           */
         LR    R6,RET                                              1229
*   RESPECIFY                                                      1230
*     RET UNRESTRICTED;                                            1230
*   IF OPWMODWK=ON THEN             /* IF MODULE WORK AREA EXIST     */
         L     @10,OPWCURPT(,RCORE)                                1231
         TM    OPWMODWK(@10),B'01000000'                           1231
         BNO   @RF01231                                            1231
*     DO;                                                          1232
*       IF OPWCAT=OFF&OPWSCRA=OFF THEN/* IF NOT OPENNING CATALOG     */
         TM    OPWCAT(RCORE),B'11000000'                           1233
         BNZ   @RF01233                                            1233
*         DO;                                                      1234
*           MWACATID=CLC;           /* INDICATE OPEN WANTS CLUSTER 1235
*                                      NAME                          */
         MVI   MWACATID,X'30'                                      1235
*           IF OPWWRKPT^=ZERO THEN  /* AMB WORK AREA EXIST           */
         L     @10,OPWWRKPT(,RCORE)                                1236
         LTR   @10,@10                                             1236
         BZ    @RF01236                                            1236
*             MWACI=CTHSHDSN;       /* GET CI NO. FROM AMB WORK AREA */
         MVC   MWACI(3),CTHSHDSN(@10)                              1237
*           ELSE                    /* AMB WORK AREA POINTER IS ZERO */
*             MWACI=OPWDCI;         /* GET CI NO. FROM ACB WORK AREA */
         B     @RC01236                                            1238
@RF01236 MVC   MWACI(3),OPWDCI(RCORE)                              1238
*           MWACACB=OPWCACB;        /* CATALOG ACB ADDRESS           */
@RC01236 L     @10,OPWCACB(,RCORE)                                 1239
         ST    @10,MWACACB                                         1239
*           RESPECIFY                                              1240
*            (R1,                                                  1240
*             RETCODE) RESTRICTED;                                 1240
*           MWASFIPT=ZERO;          /* ZERO SFI POINTER IN CAT PARM
*                                      LIST                          */
         SLR   @14,@14                                             1241
         STCM  @14,7,MWASFIPT                                      1241
*           R1=ADDR(MWACATPM);      /* POINT TO PARM LIST FOR      1242
*                                      IDA0192C                      */
         LA    R1,MWACATPM                                         1242
*           RSTATRTN=IDAR192C;      /* NOTE CALL TO 192C     @Z30SSDP*/
         L     @14,OPWCOMWA(,RCORE)                                1243
         MVC   RSTATRTN(4,@14),@CC04255                            1243
*           CALL IDA0192C;          /* GET CLUSTER NAME              */
         L     @15,@CV05359                                        1244
         BALR  @14,@15                                             1244
*           RSTATRTN=IDAR192B;      /* INDIC 192B CONTROL    @Z30SSDP*/
         L     @14,OPWCOMWA(,RCORE)                                1245
         MVC   RSTATRTN(4,@14),@CC04253                            1245
*           MWASFIPT=ADDR(OPWSFI);  /* REINITIALIZE SFI POINTER      */
         LA    @10,OPWSFI(,RCORE)                                  1246
         STCM  @10,7,MWASFIPT                                      1246
*           IF RETCODE=ZERO THEN    /* IF NO ERROR ENCOUNTERED       */
         LTR   RETCODE,RETCODE                                     1247
         BNZ   @RF01247                                            1247
*             PDPCLSNM=ADDR(MWACLSNM);/* GET CLUSTER NAME FROM     1248
*                                      IDA0192C                      */
         LA    @10,MWACLSNM                                        1248
         ST    @10,PDPCLSNM+280(,@14)                              1248
*           ELSE                    /* NO ERROR                      */
*             PDPDSTYP=PDPDDNM;     /* INDICATE DD NAME USED         */
         B     @RC01247                                            1249
@RF01247 L     @14,OPWCOMWA(,RCORE)                                1249
         MVI   PDPDSTYP+280(@14),X'01'                             1249
*           RESPECIFY                                              1250
*             RETCODE UNRESTRICTED;                                1250
@RC01247 DS    0H                                                  1251
*         END;                                                     1251
*       ELSE                        /* IF OPENNING CATALOG           */
*         PDPDSTYP=PDPDDNM;         /* INDICATE DD NAME USED         */
         B     @RC01233                                            1252
@RF01233 L     @10,OPWCOMWA(,RCORE)                                1252
         MVI   PDPDSTYP+280(@10),X'01'                             1252
*       IF OPWWRKPT^=ZERO THEN      /* IF AMBWK AREA PTR EXIST IN OPW*/
@RC01233 L     @10,OPWWRKPT(,RCORE)                                1253
         LTR   @10,@10                                             1253
         BZ    @RF01253                                            1253
*         PDPDSN=ADDR(CTDATANM);    /* SET DATA SET NAME TO DATA SET
*                                      NAME IN AMB WORK AREA         */
         L     @15,OPWCOMWA(,RCORE)                                1254
         LA    @10,CTDATANM(,@10)                                  1254
         ST    @10,PDPDSN+280(,@15)                                1254
*       CALL ERRORFLG;              /* SET ACB ERROR FLAG            */
@RF01253 BAL   @14,ERRORFLG                                        1255
*     END;                                                         1256
*   R1=OPWCOMWA;                    /* POINT TO COMMON WORK AREA     */
@RF01231 L     @10,OPWCOMWA(,RCORE)                                1257
         LR    R1,@10                                              1257
*   RSTATRTN=IDAR192P;              /* NOTE CALL TO 192P     @Z30SSDP*/
         MVC   RSTATRTN(4,@10),@CC04265                            1258
*   CALL IDA0192P;                  /* PROBLEM DETERMINATION         */
         L     @15,@CV05445                                        1259
         BALR  @14,@15                                             1259
*   RSTATRTN=IDAR192B;              /* INDIC 192B CONTROL    @Z30SSDP*/
         L     @10,OPWCOMWA(,RCORE)                                1260
         MVC   RSTATRTN(4,@10),@CC04253                            1260
*   PDPSFI=ZERO;                    /* ZERO CATALOG SFI POINTER      */
         SLR   @15,@15                                             1261
         LA    @14,280                                             1261
         ALR   @14,@10                                             1261
         ST    @15,PDPSFI(,@14)                                    1261
*   PDPCLSNM=ADDR(JFCBDSNM);        /* RESET DATA SET TYPE TO DD NAME*/
         AL    @10,@CF04572                                        1262
         ST    @10,PDPCLSNM(,@14)                                  1262
*   PDPDSN=ZERO;                    /* RESET DATA SET NAME TO ZERO   */
         ST    @15,PDPDSN(,@14)                                    1263
*   OPWSFI=OPWSFI&&OPWSFI;          /* ZERO SFI AREA                 */
         XC    OPWSFI(12,RCORE),OPWSFI(RCORE)                      1264
*   IF OPWUACB->ACBERFLG>OPERR128 THEN/* TERMINATING ERROR IN      1265
*                                      IDA0192B                      */
         L     @10,OPWUACB(,RCORE)                                 1265
         CLI   ACBERFLG(@10),128                                   1265
         BNH   @RF01265                                            1265
*     DO;                                                          1266
*       OPWERR2B=ON;                /* INDICATE OPEN FAILED          */
         L     @07,OPWCURPT(,RCORE)                                1267
         OI    OPWERR2B(@07),B'00010000'                           1267
*       RETURN TO LTRM192B;         /* TERMINATION PROCESSING        */
         LA    @14,LTRM192B                                        1268
@EL00020 DS    0H                                                  1268
@EF00020 DS    0H                                                  1268
@ER00020 BR    @14                                                 1268
*     END;                                                         1269
*   RESPECIFY                                                      1270
*     RET RESTRICTED;                                              1270
@RF01265 DS    0H                                                  1271
*   RET=R6;                         /* GET RETURN ADDRESS            */
         LR    RET,R6                                              1271
*   RESPECIFY                                                      1272
*    (R1,                                                          1272
*     R6,                                                          1272
*     RET) UNRESTRICTED;                                           1272
*   END PROBDT2B;                                                  1273
         B     @EL00020                                            1273
*TERM192B:                                                         1274
*                                                                  1274
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - TERMINATION PROCESSING.                       */
*/*                    UPDATE CATALOG, FREE AMB WORK AREAS, FREE     */
*/*                    MODULE WORK AREA IF IT EXIST, AND SET ERROR   */
*/*                    RETURN CODE IN REGISTER 15.                   */
*/*      01 INPUT -    1. POINTER TO AMB WORK AREA IN OPWDTWRK AND   */
*/*                       OPWIXWRK.                                  */
*/*                    2. POINTER TO MODULE WORK AREA IN REGISTER 13.*/
*/*      01 OUTPUT -   1. SET ERROR RETURN CODE IN RETCODE (REG 15). */
*/*                       0-CLUSTER WAS SUCCESSFULLY OPENED.         */
*/*                       4-WARNING CONDITION.                       */
*/*                       8-TERMINATING ERROR.                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  1274
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1274
TERM192B DS    0H                                                  1275
*   RESPECIFY                                                      1275
*     RET RESTRICTED;                                              1275
*   OPWSAVEA=RET;                   /* SAVE RETURN ADDRESS IN OPW    */
         ST    RET,OPWSAVEA(,RCORE)                                1276
*   RESPECIFY                                                      1277
*     RET UNRESTRICTED;                                            1277
*   IF AMBLDUMY=OFF THEN            /* NOT A DUMMY DATA SET          */
         L     @05,ACBAMBL(,RACB)                                  1278
         TM    AMBLDUMY(@05),B'00000001'                           1278
         BNZ   @RF01278                                            1278
*     DO;                                                          1279
*       IF OPWERR2B=OFF&OPWEMPUP=OFF THEN/* OPEN SUCCESSFUL          */
         L     @05,OPWCURPT(,RCORE)                                1280
         TM    OPWERR2B(@05),B'00110000'                           1280
         BNZ   @RF01280                                            1280
*         DO;                                                      1281
*           IF MWACATDT=ON×MWACATIX=ON THEN/* CATALOG UPDATE REQUIRED*/
         TM    MWACATDT,B'10000000'                                1282
         BO    @RT01282                                            1282
         TM    MWACATIX,B'10000000'                                1282
         BNO   @RF01282                                            1282
@RT01282 DS    0H                                                  1283
*             CALL CATUPDT;         /* UPDATE CATALOG                */
         BAL   @14,CATUPDT                                         1283
*           AMBLDTA->AMBOPEN=ON;    /* TURN ON DATA AMB'S OPEN     1284
*                                      INDICATOR                     */
@RF01282 L     @05,ACBAMBL(,RACB)                                  1284
         L     @01,AMBLDTA(,@05)                                   1284
         OI    AMBOPEN(@01),B'00010000'                            1284
*           IF AMBLIX^=ZERO THEN    /* IF INDEX AMB EXIST            */
         L     @05,AMBLIX(,@05)                                    1285
         LTR   @05,@05                                             1285
         BZ    @RF01285                                            1285
*             AMBLIX->AMBOPEN=ON;   /* TURN ON INDEX AMB'S OPEN    1286
*                                      INDICATOR                     */
         OI    AMBOPEN(@05),B'00010000'                            1286
*         END;                                                     1287
@RF01285 DS    0H                                                  1288
*       MWASPOOL=WKPOOL;            /* SET SUBPOOL NUMBER            */
@RF01280 MVI   MWASPOOL,X'FC'                                      1288
*       IF OPWDTWRK^=ZERO&          /* DATA AMB WORK AREA EXIST AND  */
*           OPWSVWRK=OFF THEN       /* OPW INDICATE OKAY TO FREE     */
         L     @05,OPWDTWRK(,RCORE)                                1289
         LTR   @05,@05                                             1289
         BZ    @RF01289                                            1289
         L     @01,OPWCURPT(,RCORE)                                1289
         TM    OPWSVWRK(@01),B'00010000'                           1289
         BNZ   @RF01289                                            1289
*         DO;                                                      1290
*           MWADDRES=OPWDTWRK;      /* POINT TO DATA AMB WORK AREA   */
         ST    @05,MWADDRES                                        1291
*           MWABYTES=OPWDTWRK->AMALEN;/* SIZE OF DATA AMB WORK AREA  */
         LH    @05,AMALEN(,@05)                                    1292
         STCM  @05,7,MWABYTES                                      1292
*           CALL FREECORE;          /* FREE DATA AMB WORK AREA       */
         BAL   @14,FREECORE                                        1293
*           OPWDTWRK=ZERO;          /* ZERO PTR TO DATA AMB WORK AREA*/
         SLR   @05,@05                                             1294
         ST    @05,OPWDTWRK(,RCORE)                                1294
*         END;                                                     1295
*       IF OPWIXWRK^=ZERO&          /* INDEX AMB WORK AREA EXIST AND */
*           OPWSVWRK=OFF THEN       /* OPW INDICATE OKAY TO FREE     */
@RF01289 L     @05,OPWIXWRK(,RCORE)                                1296
         LTR   @05,@05                                             1296
         BZ    @RF01296                                            1296
         L     @01,OPWCURPT(,RCORE)                                1296
         TM    OPWSVWRK(@01),B'00010000'                           1296
         BNZ   @RF01296                                            1296
*         DO;                                                      1297
*           MWADDRES=OPWIXWRK;      /* POINT TO INDEX AMB WORK AREA  */
         ST    @05,MWADDRES                                        1298
*           MWABYTES=OPWIXWRK->AMALEN;/* SIZE OF INDEX AMB WORK AREA */
         LH    @05,AMALEN(,@05)                                    1299
         STCM  @05,7,MWABYTES                                      1299
*           CALL FREECORE;          /* FREE INDEX AMB WORK AREA      */
         BAL   @14,FREECORE                                        1300
*           OPWIXWRK=ZERO;          /* ZERO PTR TO INDEX AMB WORK  1301
*                                      AREA                          */
         SLR   @05,@05                                             1301
         ST    @05,OPWIXWRK(,RCORE)                                1301
*         END;                                                     1302
*     END;                                                         1303
@RF01296 DS    0H                                                  1304
*   RESPECIFY                                                      1304
*     RETCODE RESTRICTED;                                          1304
@RF01278 DS    0H                                                  1305
*   IF OPWMODWK=OFF THEN            /* MODULE WORK AREA DOES NOT   1305
*                                      EXIST                         */
         L     @14,OPWCURPT(,RCORE)                                1305
         TM    OPWMODWK(@14),B'01000000'                           1305
         BNZ   @RF01305                                            1305
*     RETCODE=EIGHT;                /* INDICATE TERMINATING ERROR    */
         LA    RETCODE,8                                           1306
*   ELSE                            /* IF MODULE WORK AREA EXIST     */
*     DO;                                                          1307
         B     @RC01305                                            1307
@RF01305 DS    0H                                                  1308
*       IF OPWEMPUP=OFF&OPWERR2B=OFF THEN/* IF OPEN CLUSTER        1308
*                                      SUCCESSFUL                    */
         L     @14,OPWCURPT(,RCORE)                                1308
         TM    OPWEMPUP(@14),B'00110000'                           1308
         BNZ   @RF01308                                            1308
*         DO;                                                      1309
*           OPWVSMPL=OPWVSMPL&&OPWVSMPL;/* ZERO IDA0192M PARM LIST   */
         XC    OPWVSMPL(16,RCORE),OPWVSMPL(RCORE)                  1310
*           OPWVMANC=AMBLCMB;       /* POINT TO THE ANCHOR BLOCK   1311
*                                      (CMB)                         */
         L     @14,ACBAMBL(,RACB)                                  1311
         L     @14,AMBLCMB(,@14)                                   1311
         ST    @14,OPWVMANC(,RCORE)                                1311
*           OPWVMTYP=FREECLSP;      /* INDICATE TYPE OF FUNCTION     */
         MVI   OPWVMTYP(RCORE),X'82'                               1312
*           CALL IDA0192M;          /* FREE EXCESS SPACE IN CLUSTER
*                                      BLK                           */
         L     @15,@CV05450                                        1313
         BALR  @14,@15                                             1313
*         END;                                                     1314
*       RESPECIFY                                                  1315
*        (R0,                                                      1315
*         R1) RESTRICTED;                                          1315
@RF01308 DS    0H                                                  1316
*       MWASPOOL=WKPOOL;            /* SUBPOOL NUMBER                */
         MVI   MWASPOOL,X'FC'                                      1316
*       GEN(L R1,@SIZDATD);         /* SIZE OF MWA                   */
         L R1,@SIZDATD
*       MWABYTES=R1;                                               1318
         STCM  R1,7,MWABYTES                                       1318
*       R1=R13;                     /* ADDRESS OF MWA                */
         LR    R1,R13                                              1319
*       R0=MWAMNWRD;                /* GET SUBPOOL NO. AND NO. OF  1320
*                                      BYTES                         */
         L     R0,MWAMNWRD                                         1320
*       GEN(L R13,4(R13));          /* GET ADDR OF PREVIOUS SAVE AREA*/
         L R13,4(R13)
*       GEN(FREEMAIN R,LV=(R0),A=(R1));/* FREE MODULE WORK AREA      */
         FREEMAIN R,LV=(R0),A=(R1)
*       RESPECIFY                                                  1323
*        (R0,                                                      1323
*         R1) UNRESTRICTED;                                        1323
*       IF OPWEMPUP=ON THEN         /* EMPTY UPGRADE AIX'S           */
         L     @14,OPWCURPT(,RCORE)                                1324
         TM    OPWEMPUP(@14),B'00100000'                           1324
         BNO   @RF01324                                            1324
*         RETCODE=FOUR;             /* SET WARNING CODE              */
         LA    RETCODE,4                                           1325
*       ELSE                        /* NOT EMPTY UPGRADE AIX'S       */
*         IF OPWERR2B=ON THEN       /* IF OPEN FAILED                */
         B     @RC01324                                            1326
@RF01324 L     @14,OPWCURPT(,RCORE)                                1326
         TM    OPWERR2B(@14),B'00010000'                           1326
         BNO   @RF01326                                            1326
*           RETCODE=EIGHT;          /* INDICATE TERMINATING ERROR    */
         LA    RETCODE,8                                           1327
*         ELSE                      /* OPEN CLUSTER SUCCESSFUL       */
*           RETCODE=ZERO;           /* SET RETURN CODE TO ZERO       */
         B     @RC01326                                            1328
@RF01326 SLR   RETCODE,RETCODE                                     1328
*     END;                                                         1329
@RC01326 DS    0H                                                  1329
@RC01324 DS    0H                                                  1330
*   RESPECIFY                                                      1330
*     RET RESTRICTED;                                              1330
@RC01305 DS    0H                                                  1331
*   RET=OPWSAVEA;                   /* GET RETURN ADDRESS            */
         L     RET,OPWSAVEA(,RCORE)                                1331
*   RESPECIFY                                                      1332
*    (RET,                                                         1332
*     RETCODE) UNRESTRICTED;                                       1332
*   END TERM192B;                                                  1333
@EL00021 DS    0H                                                  1333
@EF00021 DS    0H                                                  1333
@ER00021 BR    @14                                                 1333
*CATUPDT:                                                          1334
*                                                                  1334
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - UPDATE CATALOG BY WRITING NEW OPEN INDICATOR. */
*/*      01 INPUT -    1. PARAMETER LIST FOR CATALOG (MWACATPM).     */
*/*                    2. POINTERS TO AMB'S IN AMBLDTA AND AMBLIX.   */
*/*                    3. INDICATORS TO INDICATE IF DATA OR INDEX    */
*/*                       COMPONENT NEEDS THE CATALOG UPDATED.       */
*/*      01 OUTPUT -   1. CATALOG UPDATED.                           */
*/*                    2. AMBOPEN BIT SET ON IN THE AMB'S.           */
*/*                                                                  */
*/********************************************************************/
*                                                                  1334
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1334
CATUPDT  DS    0H                                                  1335
*   RESPECIFY                                                      1335
*     RET RESTRICTED;                                              1335
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1336
*   RESPECIFY                                                      1337
*     RET UNRESTRICTED;                                            1337
*   MWACATID=OPO;                   /* SET CALLER ID FOR IDA0192C    */
         MVI   MWACATID,X'0C'                                      1338
*   MWABTOPN=ON;                    /* SET OPEN INDICATOR BIT FOR  1339
*                                      192C                          */
         OI    MWABTOPN,B'10000000'                                1339
*   RESPECIFY                                                      1340
*    (R1,                                                          1340
*     R5,                                                          1340
*     RETCODE) RESTRICTED;                                         1340
*   R1=ADDR(MWACATPM);              /* POINT TO CATALOG PARAMETER  1341
*                                      LIST                          */
         LA    R1,MWACATPM                                         1341
*   IF MWACATDT=ON THEN             /* DATA COMPONENT NEEDS UPDATE   */
         TM    MWACATDT,B'10000000'                                1342
         BNO   @RF01342                                            1342
*     DO;                                                          1343
*       R5=AMBLDTA;                 /* POINT TO DATA AMB             */
         L     @14,ACBAMBL(,RACB)                                  1344
         L     R5,AMBLDTA(,@14)                                    1344
*       OPWWRKPT=OPWDTWRK;          /* POINT TO DATA AMB WORK AREA   */
         L     @14,OPWDTWRK(,RCORE)                                1345
         ST    @14,OPWWRKPT(,RCORE)                                1345
*       RSTATRTN=IDAR192C;          /* NOTE CALL TO 192C     @Z30SSDP*/
         L     @14,OPWCOMWA(,RCORE)                                1346
         MVC   RSTATRTN(4,@14),@CC04255                            1346
*       CALL IDA0192C;              /* WRITE THE OPEN INDICATOR      */
         L     @15,@CV05359                                        1347
         BALR  @14,@15                                             1347
*       RSTATRTN=IDAR192B;          /* INDIC 192B CONTROL    @Z30SSDP*/
         L     @14,OPWCOMWA(,RCORE)                                1348
         MVC   RSTATRTN(4,@14),@CC04253                            1348
*       IF RETCODE^=ZERO THEN       /* ERROR                         */
         LTR   RETCODE,RETCODE                                     1349
         BZ    @RF01349                                            1349
*         DO;                                                      1350
*           MWAPDPRM=RETCODE;       /* SAVE ERROR CODES              */
         ST    RETCODE,MWAPDPRM                                    1351
*           CALL PROBDT2B;          /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        1352
*         END;                                                     1353
*       OPWDOPEN=ON;                /* IND DATA OPEN INDICATOR     1354
*                                      UPDATED                       */
@RF01349 L     @14,OPWCURPT(,RCORE)                                1354
         OI    OPWDOPEN(@14),B'10000000'                           1354
*     END;                                                         1355
*   IF MWACATIX=ON THEN             /* INDEX COMPONENT NEEDS UPDATE  */
@RF01342 TM    MWACATIX,B'10000000'                                1356
         BNO   @RF01356                                            1356
*     DO;                                                          1357
*       R5=AMBLIX;                  /* ADDRESS OF INDEX AMB          */
         L     @14,ACBAMBL(,RACB)                                  1358
         L     R5,AMBLIX(,@14)                                     1358
*       OPWWRKPT=OPWIXWRK;          /* POINT TO INDEX AMB WORK AREA  */
         L     @14,OPWIXWRK(,RCORE)                                1359
         ST    @14,OPWWRKPT(,RCORE)                                1359
*       RSTATRTN=IDAR192C;          /* NOTE CALL TO 192C     @Z30SSDP*/
         L     @14,OPWCOMWA(,RCORE)                                1360
         MVC   RSTATRTN(4,@14),@CC04255                            1360
*       CALL IDA0192C;              /* WRITE OPEN INDICATOR          */
         L     @15,@CV05359                                        1361
         BALR  @14,@15                                             1361
*       RSTATRTN=IDAR192B;          /* INDIC 192B IN CONTROL @Z30SSDP*/
         L     @14,OPWCOMWA(,RCORE)                                1362
         MVC   RSTATRTN(4,@14),@CC04253                            1362
*       IF RETCODE^=ZERO THEN       /* ERROR                         */
         LTR   RETCODE,RETCODE                                     1363
         BZ    @RF01363                                            1363
*         DO;                                                      1364
*           MWAPDPRM=RETCODE;       /* SAVE ERROR CODE               */
         ST    RETCODE,MWAPDPRM                                    1365
*           CALL PROBDT2B;          /* PROBLEM DETERMINATION         */
         BAL   @14,PROBDT2B                                        1366
*         END;                                                     1367
*       OPWIOPEN=ON;                /* IND INDEX COMPONENT UPDATED   */
@RF01363 L     @14,OPWCURPT(,RCORE)                                1368
         OI    OPWIOPEN(@14),B'00001000'                           1368
*     END;                                                         1369
*   OPWWRKPT=ZERO;                  /* ZERO POINTER TO AMB WORK AREA */
@RF01356 SLR   @14,@14                                             1370
         ST    @14,OPWWRKPT(,RCORE)                                1370
*   RESPECIFY                                                      1371
*     RET RESTRICTED;                                              1371
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        1372
*   RESPECIFY                                                      1373
*    (R1,                                                          1373
*     R5,                                                          1373
*     RET,                                                         1373
*     RETCODE) UNRESTRICTED;                                       1373
*   END CATUPDT;                                                   1374
@EL00022 DS    0H                                                  1374
@EF00022 DS    0H                                                  1374
@ER00022 BR    @14                                                 1374
*ENQPARM:                                                          1375
*                                                                  1375
*/********************************************************************/
*/*                                                                  */
*/*      01 FUNCTION - INITIALIZE ENQ PARAMETER LIST.                */
*/*      01 INPUT -    1. ENQ PARAMETER LIST.                        */
*/*      01 OUTPUT -   1. INITIALIZED ENQ PARAMETER LIST.            */
*/*                                                                  */
*/********************************************************************/
*                                                                  1375
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1375
ENQPARM  DS    0H                                                  1376
*   RESPECIFY                                                      1376
*     RET RESTRICTED;                                              1376
*   MWASAVEA=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEA                                        1377
*   RESPECIFY                                                      1378
*     RET UNRESTRICTED;                                            1378
*   MWAQNAME='SYSVSAM ';            /* INITIALIZE QNAME              */
         MVC   MWAQNAME(8),@CC05457                                1379
*   ENQTCB=OPWJSTCB;                /* POINTER TO JOB STEP TCB       */
         L     @05,OPWJSTCB(,RCORE)                                1380
         ST    @05,ENQTCB                                          1380
*   ENQEND=ON;                      /* INDICATE LAST ENTRY           */
*   ENQDIR=ON;                      /* ENQ DIRECTED SET ON           */
         OI    ENQEND,B'10000001'                                  1382
*   ENQRLEN=LENGTH(ENQRNAME);       /* LENGTH OF RNAME               */
         MVI   ENQRLEN,X'08'                                       1383
*   ENQQNADR=ADDR(MWAQNAME);        /* QNAME ADDRESS                 */
         LA    @05,MWAQNAME                                        1384
         ST    @05,ENQQNADR                                        1384
*   ENQRNADR=ADDR(ENQRNAME);        /* RNAME ADDRESS                 */
         LA    @05,ENQRNAME                                        1385
         ST    @05,ENQRNADR                                        1385
*   RESPECIFY                                                      1386
*     RET RESTRICTED;                                              1386
*   RET=MWASAVEA;                   /* GET RETURN ADDRESS            */
         L     @05,MWASAVEA                                        1387
         LR    RET,@05                                             1387
*   RESPECIFY                                                      1388
*     RET UNRESTRICTED;                                            1388
*   END ENQPARM;                                                   1389
@EL00023 DS    0H                                                  1389
@EF00023 DS    0H                                                  1389
@ER00023 BR    @14                                                 1389
*ENQEXD:                                                           1390
*                                                                  1390
*/********************************************************************/
*/*                                                                  */
*/*    01 FUNCTION - THIS ROUTINE DOES AN EXCLUSIVE DIRECTED ENQ FOR */
*/*                  AN ELEMENTARY DATA SET                          */
*/*    01 INPUT -    1. THE ENQ PARAMETER LIST (ENQENTRY)            */
*/*    01 OUTPUT -   1. ENQ ISSUED                                   */
*/*                  2. RETURN CODE RETURNED IN REGISTER RETCODE     */
*/*                                                                  */
*/********************************************************************/
*                                                                  1390
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1390
ENQEXD   DS    0H                                                  1391
*   RESPECIFY                                                      1391
*    (RET,                                                         1391
*     RETCODE) RESTRICTED;                                         1391
*   MWASAVEE=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEE                                        1392
*   RESPECIFY                                                      1393
*     RET UNRESTRICTED;                                            1393
*   ENQRNIND='I';                   /* RNAME TYPE IN USE             */
         MVI   ENQRNIND,C'I'                                       1394
*   ENQOPT2=ENQOPT2&&ENQOPT2;       /* ZERO OPTION BYTE              */
         XC    ENQOPT2(1),ENQOPT2                                  1395
*   GEN(ENQ (,,E,,SYSTEM),RET=USE,MF=(E,ENQENTRY));/* ENQ IF REGION
*                                      DOES NOT HAVE RESOURCES       */
         ENQ (,,E,,SYSTEM),RET=USE,MF=(E,ENQENTRY)
*   IF RETCODE=ZERO THEN            /* IF ENQ SUCCESSFUL             */
         LTR   RETCODE,RETCODE                                     1397
         BNZ   @RF01397                                            1397
*     CALL ENQSAVE;                 /* RECORD THE ENQ                */
         BAL   @14,ENQSAVE                                         1398
*   ELSE                            /* IF ENQ FAILED                 */
*     RETCODE=ENQRETC;              /* SAVE ENQ RETURN CODE          */
         B     @RC01397                                            1399
@RF01397 SLR   RETCODE,RETCODE                                     1399
         IC    RETCODE,ENQRETC                                     1399
*   RESPECIFY                                                      1400
*     RET RESTRICTED;                                              1400
@RC01397 DS    0H                                                  1401
*   RET=MWASAVEE;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEE                                        1401
*   RESPECIFY                                                      1402
*    (RET,                                                         1402
*     RETCODE) UNRESTRICTED;                                       1402
*   END ENQEXD;                                                    1403
@EL00024 DS    0H                                                  1403
@EF00024 DS    0H                                                  1403
@ER00024 BR    @14                                                 1403
*ENQEXDT:                                                          1404
*                                                                  1404
*/********************************************************************/
*/*                                                                  */
*/*    01 FUNCTION - THIS ROUTINE DOES A TEST EXCLUSIVE DIRECTED ENQ */
*/*    01 INPUT -    1. THE ENQ PARAMETER LIST (ENQENTRY)            */
*/*    01 OUTPUT -   1. AN ENQ WITH RET=TEST IS ISSUED               */
*/*                  2. THE RETURN CODE IS PASSED BACK TO CALLER     */
*/*                                                                  */
*/********************************************************************/
*                                                                  1404
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1404
ENQEXDT  DS    0H                                                  1405
*   RESPECIFY                                                      1405
*    (RET,                                                         1405
*     RETCODE) RESTRICTED;                                         1405
*   MWASAVEE=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEE                                        1406
*   RESPECIFY                                                      1407
*     RET UNRESTRICTED;                                            1407
*   ENQRNIND='I';                   /* RENAME TYPE IN USE            */
         MVI   ENQRNIND,C'I'                                       1408
*   ENQOPT2=ENQOPT2&&ENQOPT2;       /* ZERO OPTION BYTE              */
         XC    ENQOPT2(1),ENQOPT2                                  1409
*   GEN(ENQ (,,E,,SYSTEM),RET=TEST,MF=(E,ENQENTRY));/* ISSUE ENQ     */
         ENQ (,,E,,SYSTEM),RET=TEST,MF=(E,ENQENTRY)
*   IF RETCODE^=ZERO THEN           /* IF ENQ UNSUCCESSFUL           */
         LTR   RETCODE,RETCODE                                     1411
         BZ    @RF01411                                            1411
*     RETCODE=ENQRETC;              /* SAVE RETURN CODE IF ERROR     */
         SLR   RETCODE,RETCODE                                     1412
         IC    RETCODE,ENQRETC                                     1412
*   RESPECIFY                                                      1413
*     RET RESTRICTED;                                              1413
@RF01411 DS    0H                                                  1414
*   RET=MWASAVEE;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEE                                        1414
*   RESPECIFY                                                      1415
*    (RET,                                                         1415
*     RETCODE) UNRESTRICTED;                                       1415
*   END ENQEXDT;                                                   1416
@EL00025 DS    0H                                                  1416
@EF00025 DS    0H                                                  1416
@ER00025 BR    @14                                                 1416
*ENQNED:                                                           1417
*                                                                  1417
*/********************************************************************/
*/*                                                                  */
*/*    01 FUNCTION - THIS ROUTINE DOES A DIRECTED ENQ FOR            */
*/*                  NON-EXCLUSIVE CONTROL                           */
*/*    01 INPUT -    1. ENQ PARAMETER LIST (ENQENTRY)                */
*/*    01 OUTPUT -   1. AN ENQ WITH RET=USE IS ISSUED                */
*/*                  2. THE RETURN CODE IS PASSED TO THE USER        */
*/*                                                                  */
*/********************************************************************/
*                                                                  1417
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1417
ENQNED   DS    0H                                                  1418
*   RESPECIFY                                                      1418
*    (RET,                                                         1418
*     RETCODE) RESTRICTED;                                         1418
*   MWASAVEE=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEE                                        1419
*   RESPECIFY                                                      1420
*     RET UNRESTRICTED;                                            1420
*   ENQRNIND='I';                   /* RNAME TYPE IN USE             */
         MVI   ENQRNIND,C'I'                                       1421
*   ENQOPT2=ENQOPT2&&ENQOPT2;       /* ZERO OPTION BYTE              */
         XC    ENQOPT2(1),ENQOPT2                                  1422
*   GEN(ENQ (,,S,,SYSTEM),RET=USE,MF=(E,ENQENTRY));/* ENQ IF REGION
*                                      DOES NOT HAVE RESOURSE        */
         ENQ (,,S,,SYSTEM),RET=USE,MF=(E,ENQENTRY)
*   IF RETCODE=ZERO THEN            /* IF ENQ SUCCESSFUL             */
         LTR   RETCODE,RETCODE                                     1424
         BNZ   @RF01424                                            1424
*     CALL ENQSAVE;                 /* RECORD THE ENQ                */
         BAL   @14,ENQSAVE                                         1425
*   ELSE                            /* IF ENQ UNSUCCESSFUL           */
*     RETCODE=ENQRETC;              /* SAVE ENQ RETURN CODE          */
         B     @RC01424                                            1426
@RF01424 SLR   RETCODE,RETCODE                                     1426
         IC    RETCODE,ENQRETC                                     1426
*   RESPECIFY                                                      1427
*     RET RESTRICTED;                                              1427
@RC01424 DS    0H                                                  1428
*   RET=MWASAVEE;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEE                                        1428
*   RESPECIFY                                                      1429
*    (RET,                                                         1429
*     RETCODE) UNRESTRICTED;                                       1429
*   END ENQNED;                                                    1430
@EL00026 DS    0H                                                  1430
@EF00026 DS    0H                                                  1430
@ER00026 BR    @14                                                 1430
*ENQEXDO:                                                          1431
*                                                                  1431
*/********************************************************************/
*/*                                                                  */
*/*    01 FUNCTION - THIS ROUTINE DOES AN EXCLUSIVE DIRECTED ENQ     */
*/*                  WITH AN OUTPUT TYPE RNAME                       */
*/*    01 INPUT -    1. ENQ PARAMETER LIST (ENQENTRY)                */
*/*    01 OUTPUT -   1. APPENDS A 'R' TO THE RNAME FOR THE ENQ       */
*/*                  2. ISSUES ENQ                                   */
*/*                  3. RETURNS RETURN CODE TO CALLER                */
*/*                                                                  */
*/********************************************************************/
*                                                                  1431
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1431
ENQEXDO  DS    0H                                                  1432
*   RESPECIFY                                                      1432
*    (RET,                                                         1432
*     RETCODE) RESTRICTED;                                         1432
*   MWASAVEE=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEE                                        1433
*   RESPECIFY                                                      1434
*     RET UNRESTRICTED;                                            1434
*   ENQRNIND='O';                   /* RNAME TYPE OUTPUT             */
         MVI   ENQRNIND,C'O'                                       1435
*   ENQOPT2=ENQOPT2&&ENQOPT2;       /* ZERO OPTION BYTE              */
         XC    ENQOPT2(1),ENQOPT2                                  1436
*   GEN(ENQ (,,E,,SYSTEM),RET=USE,MF=(E,ENQENTRY));/* ENQ IF REGION
*                                      DOES NOT HAVE RESOURSE        */
         ENQ (,,E,,SYSTEM),RET=USE,MF=(E,ENQENTRY)
*   IF RETCODE=ZERO THEN            /* IF ENQ SUCCESSFUL             */
         LTR   RETCODE,RETCODE                                     1438
         BNZ   @RF01438                                            1438
*     CALL ENQSAVE;                 /* RECORD THE ENQ                */
         BAL   @14,ENQSAVE                                         1439
*   ELSE                            /* IF ENQ UNSUCCESSFUL           */
*     RETCODE=ENQRETC;              /* SAVE ENQ RETURN CODE          */
         B     @RC01438                                            1440
@RF01438 SLR   RETCODE,RETCODE                                     1440
         IC    RETCODE,ENQRETC                                     1440
*   RESPECIFY                                                      1441
*     RET RESTRICTED;                                              1441
@RC01438 DS    0H                                                  1442
*   RET=MWASAVEE;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEE                                        1442
*   RESPECIFY                                                      1443
*    (RET,                                                         1443
*     RETCODE) UNRESTRICTED;                                       1443
*   END ENQEXDO;                                                   1444
@EL00027 DS    0H                                                  1444
@EF00027 DS    0H                                                  1444
@ER00027 BR    @14                                                 1444
*ENQEXDTO:                                                         1445
*                                                                  1445
*/********************************************************************/
*/*                                                                  */
*/*    01 FUNCTION - THIS ROUTINE DOES AN EXCLUSIVE DIRECTED ENQ     */
*/*                  WITH RET=TEST AND AN OUTPUT TYPE RNAME          */
*/*    01 INPUT -    1. ENQ PARAMETER LIST (ENQENTRY)                */
*/*    01 OUTPUT -   1. APPENDS A 'O' TO THE RNAME FOR THE ENQ       */
*/*                  2. ISSUES ENQ WITH RET=TEST                     */
*/*                  3. RETURNS RETURN CODE TO CALLER                */
*/*                                                                  */
*/********************************************************************/
*                                                                  1445
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1445
ENQEXDTO DS    0H                                                  1446
*   RESPECIFY                                                      1446
*    (RET,                                                         1446
*     RETCODE) RESTRICTED;                                         1446
*   MWASAVEE=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEE                                        1447
*   RESPECIFY                                                      1448
*     RET UNRESTRICTED;                                            1448
*   ENQRNIND='O';                   /* RENAME TYPE OUTPUT            */
         MVI   ENQRNIND,C'O'                                       1449
*   ENQOPT2=ENQOPT2&&ENQOPT2;       /* ZERO OPTION BYTE              */
         XC    ENQOPT2(1),ENQOPT2                                  1450
*   GEN(ENQ (,,E,,SYSTEM),RET=TEST,MF=(E,ENQENTRY));/* ISSUE ENQ     */
         ENQ (,,E,,SYSTEM),RET=TEST,MF=(E,ENQENTRY)
*   IF RETCODE^=ZERO THEN           /* ENQ UNSUCCESSFUL              */
         LTR   RETCODE,RETCODE                                     1452
         BZ    @RF01452                                            1452
*     RETCODE=ENQRETC;              /* SAVE RETURN CODE IF ERROR     */
         SLR   RETCODE,RETCODE                                     1453
         IC    RETCODE,ENQRETC                                     1453
*   RESPECIFY                                                      1454
*     RET RESTRICTED;                                              1454
@RF01452 DS    0H                                                  1455
*   RET=MWASAVEE;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEE                                        1455
*   RESPECIFY                                                      1456
*    (RET,                                                         1456
*     RETCODE) UNRESTRICTED;                                       1456
*   END ENQEXDTO;                                                  1457
@EL00028 DS    0H                                                  1457
@EF00028 DS    0H                                                  1457
@ER00028 BR    @14                                                 1457
*ENQNEDO:                                                          1458
*                                                                  1458
*/********************************************************************/
*/*                                                                  */
*/*    01 FUNCTION - THIS ROUTINE DORE A DIRECTED ENQ FOR NON-       */
*/*                  EXCLUSIVE CONTROL WITH A OUTPUT TYPE RNAME      */
*/*    01 INPUT -    1. ENQ PARAMETER LIST (ENQENTRY)                */
*/*    01 OUTPUT -   1. APPENDS A 'R' TO THE RNAME FOR THE ENQ       */
*/*                  2. ISSUES ENQ                                   */
*/*                  3. RETURNS RETURN CODE TO CALLER                */
*/*                                                                  */
*/********************************************************************/
*                                                                  1458
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1458
ENQNEDO  DS    0H                                                  1459
*   RESPECIFY                                                      1459
*    (RET,                                                         1459
*     RETCODE) RESTRICTED;                                         1459
*   MWASAVEE=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEE                                        1460
*   RESPECIFY                                                      1461
*     RET UNRESTRICTED;                                            1461
*   ENQRNIND='O';                   /* RNAME TYPE OUTPUT             */
         MVI   ENQRNIND,C'O'                                       1462
*   ENQOPT2=ENQOPT2&&ENQOPT2;       /* ZERO OPTION BYTE              */
         XC    ENQOPT2(1),ENQOPT2                                  1463
*   GEN(ENQ (,,S,,SYSTEM),RET=USE,MF=(E,ENQENTRY));/* ENQ IF REGION
*                                      DOES NOT HAVE RESOURSE        */
         ENQ (,,S,,SYSTEM),RET=USE,MF=(E,ENQENTRY)
*   IF RETCODE=ZERO THEN            /* IF ENQ SUCCESSFUL             */
         LTR   RETCODE,RETCODE                                     1465
         BNZ   @RF01465                                            1465
*     CALL ENQSAVE;                 /* RECORD THE ENQ                */
         BAL   @14,ENQSAVE                                         1466
*   ELSE                            /* ENQ UNSUCCESSFUL              */
*     RETCODE=ENQRETC;              /* SAVE ENQ RETURN CODE          */
         B     @RC01465                                            1467
@RF01465 SLR   RETCODE,RETCODE                                     1467
         IC    RETCODE,ENQRETC                                     1467
*   RESPECIFY                                                      1468
*     RET RESTRICTED;                                              1468
@RC01465 DS    0H                                                  1469
*   RET=MWASAVEE;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEE                                        1469
*   RESPECIFY                                                      1470
*    (RET,                                                         1470
*     RETCODE) UNRESTRICTED;                                       1470
*   END ENQNEDO;                                                   1471
@EL00029 DS    0H                                                  1471
@EF00029 DS    0H                                                  1471
@ER00029 BR    @14                                                 1471
*ENQSAVE:                                                          1472
*                                                                  1472
*/********************************************************************/
*/*                                                                  */
*/*    01 FUNCTION - THIS ROUTINE MAKES A RECORD OF A SUCCESSFUL ENQ */
*/*                  THE RECORD OF THE SUCCESSFUL ENQ IS USED TO     */
*/*                  ISSUE A DEQ IF THE OPEN FAILS                   */
*/*    01 INPUT -    1. THE RNAME OF THE ENQ                         */
*/*                  2. THE OPTION BYTE USED FOR THE ENQ             */
*/*    01 OUTPUT -   1. THE ENQ COUNT IS INCREMENTED BY 1 (ENQCNT)   */
*/*                  2. THE RNAME NAME IS SAVED                      */
*/*                  3. THE OPTION BYTE IS SAVED                     */
*/*                                                                  */
*/********************************************************************/
*                                                                  1472
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1472
ENQSAVE  DS    0H                                                  1473
*   RESPECIFY                                                      1473
*     IDAESL BASED(MWAESLPT);                                      1473
*   RESPECIFY                                                      1474
*     RET RESTRICTED;                                              1474
*   MWASAVEF=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEF                                        1475
*   RESPECIFY                                                      1476
*     RET UNRESTRICTED;                                            1476
*   MWAESLPT=OPWESL;                /* GET OPW ESL POINTER           */
         L     MWAESLPT,OPWESL(,RCORE)                             1477
*   IF MWAESLPT=ZERO×               /* IF THERE IS NO ESL OR         */
*       ESLACTEN=DIM(ESLENTRY) THEN /* IF ESL IS ALREADY FULL        */
         LTR   MWAESLPT,MWAESLPT                                   1478
         BZ    @RT01478                                            1478
         CLC   ESLACTEN(2,MWAESLPT),@CH00146                       1478
         BNE   @RF01478                                            1478
@RT01478 DS    0H                                                  1479
*     DO;                                                          1479
*       MWABYTES=LENGTH(IDAESL);    /* LENGTH OF ENQ SAVE LIST       */
         MVC   MWABYTES(3),@CF04592+1                              1480
*       MWASPOOL=WKPOOL;            /* SUBPOOL NUMBER                */
         MVI   MWASPOOL,X'FC'                                      1481
*       CALL GETCORE;               /* BUILD NEW ESL                 */
         BAL   @14,GETCORE                                         1482
*       MWADDRES->ESLNXPTR=MWAESLPT;/* CHAIN CURRENT ESL TO NEW ESL  */
         L     @10,MWADDRES                                        1483
         ST    MWAESLPT,ESLNXPTR(,@10)                             1483
*       MWAESLPT=MWADDRES;          /* NEW ESL BECOMES CURRENT ESL   */
         LR    MWAESLPT,@10                                        1484
*       OPWESL=MWAESLPT;            /* INITIALIZE ESL POINTER IN OPW */
         ST    MWAESLPT,OPWESL(,RCORE)                             1485
*       ESLSUBPL=WKPOOL;            /* SUBPOOL NUMBER FOR ESL        */
         MVI   ESLSUBPL(MWAESLPT),X'FC'                            1486
*       ESLLENTH=MWABYTES;          /* LENGTH OF THIS ESL            */
         MVC   ESLLENTH(3,MWAESLPT),MWABYTES                       1487
*       ESLID=IDAESLID;             /* ID FOR THIS BLOCK             */
         MVC   ESLID(8,MWAESLPT),@CC04942                          1488
*     END;                                                         1489
*   ESLACTEN=ESLACTEN+ONE;          /* INCREMENT NUMBER OF ENTRIES   */
@RF01478 LA    @10,1                                               1490
         AH    @10,ESLACTEN(,MWAESLPT)                             1490
         STH   @10,ESLACTEN(,MWAESLPT)                             1490
*   ENQSHR=OFF;                     /* DEQ DOES NOT NEED SHR BIT     */
         NI    ENQSHR,B'01111111'                                  1491
*   ESLENQOP(ESLACTEN)=ENQOPT2;     /* SAVE THE OPTION BYTE          */
         MH    @10,@CH00217                                        1492
         ST    @10,@TF00001                                        1492
         ALR   @10,MWAESLPT                                        1492
         MVC   ESLENQOP-9(1,@10),ENQOPT2                           1492
*   ESLRNAME(ESLACTEN)=ENQRNAME;    /* SAVE THE RNAME                */
         LR    @10,MWAESLPT                                        1493
         AL    @10,@TF00001                                        1493
         MVC   ESLRNAME-9(8,@10),ENQRNAME                          1493
*   RESPECIFY                                                      1494
*    (RETCODE,                                                     1494
*     RET) RESTRICTED;                                             1494
*   RETCODE=ZERO;                   /* INDICATE SUCCESSFUL ENQ       */
         SLR   RETCODE,RETCODE                                     1495
*   RET=MWASAVEF;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEF                                        1496
*   RESPECIFY                                                      1497
*    (RETCODE,                                                     1497
*     RET) UNRESTRICTED;                                           1497
*   END ENQSAVE;                                                   1498
@EL00030 DS    0H                                                  1498
@EF00030 DS    0H                                                  1498
@ER00030 BR    @14                                                 1498
*ERRORFLG:                                                         1499
*                                                                  1499
*/********************************************************************/
*/*                                                                  */
*/*    01 FUNCTION - THIS ROUTINE DETERMINES THE ACBERFLG.           */
*/*    01 INPUT -    1. PROBLEM DETERMINATION PROBLEM CODE (MWAPCODE)*/
*/*                  2. PROB DETERMINATION FUNCTION CODE (MWAPFUNC)  */
*/*                  3. PROB DET SUB FUNCTION CODE (MWAPSFC)         */
*/*    01 OUTPUT -   1. PROBLEM DETERMINATION PARAMETER LIST IS      */
*/*                     COMPLETED                                    */
*/*                  2. THE ACBERFLG IS DETERMINED AND SET           */
*/*                                                                  */
*/********************************************************************/
*                                                                  1499
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1499
ERRORFLG DS    0H                                                  1500
*   RESPECIFY                                                      1500
*    (RET,                                                         1500
*     R6) RESTRICTED;                                              1500
*   MWASAVEF=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEF                                        1501
*   RESPECIFY                                                      1502
*     RET UNRESTRICTED;                                            1502
*   PDPCODE=MWAPCODE;               /* COPY ERROR CODE               */
         LA    @10,280                                             1503
         AL    @10,OPWCOMWA(,RCORE)                                1503
         IC    @15,MWAPCODE                                        1503
         STC   @15,PDPCODE(,@10)                                   1503
*   PDPFUNC=MWAPFUNC;               /* COPY FUNCTION TYPE            */
         IC    @15,MWAPFUNC                                        1504
         STC   @15,PDPFUNC(,@10)                                   1504
*   PDPSFC=MWAPSFC;                 /* GET SUB FUNCTION CODE         */
         IC    @15,MWAPSFC                                         1505
         STC   @15,PDPSFC(,@10)                                    1505
*   IF PDPSFI=ZERO&SFIRETCD^=ZERO THEN/* SUB-FUNCTION INFO EXIST     */
         SLR   @15,@15                                             1506
         C     @15,PDPSFI(,@10)                                    1506
         BNE   @RF01506                                            1506
         C     @15,SFIRETCD+296(,RCORE)                            1506
         BE    @RF01506                                            1506
*     PDPSFI=MWASFIPT;              /* POINT TO SFI AREA             */
         L     @15,MWASFIPT-1                                      1507
         LA    @15,0(,@15)                                         1507
         ST    @15,PDPSFI(,@10)                                    1507
*   ELSE                            /* NO SUB-FUNCTION INFORMATIONS  */
*     PDPSFI=ZERO;                  /* ZERO SFI POINTER              */
         B     @RC01506                                            1508
@RF01506 L     @10,OPWCOMWA(,RCORE)                                1508
         SLR   @15,@15                                             1508
         ST    @15,PDPSFI+280(,@10)                                1508
*   IF OPWUACB->ACBERFLG<OPWERMAP(PDPCODE) THEN/* IF CURRENT ERROR IS
*                                      GREATER                       */
@RC01506 L     @10,OPWUACB(,RCORE)                                 1509
         L     @01,OPWCOMWA(,RCORE)                                1509
         SLR   @15,@15                                             1509
         IC    @15,PDPCODE+280(,@01)                               1509
         ST    @15,@TF00001                                        1509
         ALR   @15,RCORE                                           1509
         CLC   ACBERFLG(1,@10),OPWERMAP-1(@15)                     1509
         BNL   @RF01509                                            1509
*     OPWUACB->ACBERFLG=OPWERMAP(PDPCODE);/* SET GREATER ERROR FLAG  */
         LR    @01,RCORE                                           1510
         AL    @01,@TF00001                                        1510
         MVC   ACBERFLG(1,@10),OPWERMAP-1(@01)                     1510
*   RESPECIFY                                                      1511
*     RET RESTRICTED;                                              1511
@RF01509 DS    0H                                                  1512
*   RET=MWASAVEF;                   /* RESTORE RETURN ADDRESS        */
         L     RET,MWASAVEF                                        1512
*   RESPECIFY                                                      1513
*    (RET,                                                         1513
*     R6) UNRESTRICTED;                                            1513
*   END ERRORFLG;                                                  1514
@EL00031 DS    0H                                                  1514
@EF00031 DS    0H                                                  1514
@ER00031 BR    @14                                                 1514
*GETCORE:                                                          1515
*                                                                  1515
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-ISSUE GETMAIN TO OBTAIN CORE STORAGE          */
*/*      01   INPUT -  1. SUBPOOL NUMBER IN MWASPOOL                 */
*/*                    2. NUMBER OF BYTES REQUIRED IN MWABYTES       */
*/*                    3. STORAGE PROTECTION KEY OF THE CORE @ZA16012*/
*/*                       TO BE GOTTEN IN MWAKEY             @ZA16012*/
*/*      01   OUTPUT - 1. ADDRESS OF GOTTEN CORE IN MWADDRES         */
*/*                    2. IF GETMAIN FAILED, PROBLEM DETERMINATION   */
*/*                       IS CALLED.                                 */
*/*                    3. NOTE THAT MWAKEY IS NOT RESET TO   @ZA16012*/
*/*                       ZERO, HENCE LATER CALLS TO GETCORE @ZA16012*/
*/*                       OR FREECORE SHOULD INSURE THIS     @ZA16012*/
*/*                       FIELD IS INITIALIZED CORRECTLY.    @ZA16012*/
*/*                                                                  */
*/********************************************************************/
*                                                                  1515
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1515
GETCORE  DS    0H                                                  1516
*   RESPECIFY                                                      1516
*    (R1,                                                          1516
*     R6,                                                          1516
*     R7,                                                          1516
*     R8,                                                          1516
*     R9,                                                          1516
*     RET) RESTRICTED;              /*                       @Z30SSDP*/
*   MWASAVEG=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEG                                        1517
*   RESPECIFY                                                      1518
*     RET UNRESTRICTED;                                            1518
*   IF MWAKEY^=ZERO THEN            /* IF CORE TO BE GOTTEN IN     1519
*                                      NONZERO KEY           @ZA16012*/
         CLI   MWAKEY,0                                            1519
         BE    @RF01519                                            1519
*     DO;                           /* CHANGE KEYS           @ZA16012*/
*       RFY                                                        1521
*         R1 RSTD;                  /* USE THIS REG          @ZA16012*/
*       R1=MWAKEY;                  /* SET CALLER'S KEY      @ZA16012*/
         SLR   R1,R1                                               1522
         IC    R1,MWAKEY                                           1522
*       SPKA(R1);                   /* CHANGE KEYS           @ZA16012*/
         SPKA  0(R1)                                               1523
*       RFY                                                        1524
*         R1 UNRSTD;                /* FREE REG              @ZA16012*/
*     END;                          /* END CHANGE KEYS       @ZA16012*/
*   ELSE                                                           1526
*     ;                             /* CORE IS IN KEY ZERO   @ZA16012*/
@RF01519 DS    0H                                                  1527
*   R6=MWASPOOL;                    /* SUBPOOL NUMBER                */
         SLR   R6,R6                                               1527
         IC    R6,MWASPOOL                                         1527
*   R7=MWABYTES;                    /* NUMBER OF BYTES REQUIRED      */
         L     R7,MWABYTES-1                                       1528
         LA    R7,0(,R7)                                           1528
*   GEN(GETMAIN RC,LV=(R7),SP=(R6)) /*                       @Z30SSDP*/
*   SETS(RETCODE);                  /* ISSUE GETMAIN         @Z30SSDP*/
         GETMAIN RC,LV=(R7),SP=(R6)
*   RESPECIFY                                                      1530
*     RETCODE RESTRICTED;                                          1530
*   SPKA(0);                        /* RETURN TO KEY ZERO    @ZA16012*/
         SLR   @14,@14                                             1531
         SPKA  0(@14)                                              1531
*   IF RETCODE=ZERO THEN            /* GETMAIN SUCCESSFUL            */
         CR    RETCODE,@14                                         1532
         BNE   @RF01532                                            1532
*     DO;                                                          1533
*       MWADDRES=R1;                /* PTR TO GOTTEN CORE    @Z30SSDP*/
         ST    R1,MWADDRES                                         1534
*       R6=MWADDRES;                /* ADDRESS OF GOTTEN CORE        */
         L     @14,MWADDRES                                        1535
         LR    R6,@14                                              1535
*       R9=ZERO;                    /* ZERO PAD BYTE                 */
         SLR   R9,R9                                               1536
*       GEN(MVCL R6,R8)                                            1537
*       NOSETS;                     /* ZERO GOTTEN CORE              */
         MVCL R6,R8
*       RESPECIFY                                                  1538
*        (R1,                                                      1538
*         R6,                                                      1538
*         R7,                                                      1538
*         R8,                                                      1538
*         R9) UNRESTRICTED;         /*                       @Z30SSDP*/
*     END;                                                         1539
*   ELSE                            /* IF GETMAIN FAILED             */
*     DO;                                                          1540
         B     @RC01532                                            1540
@RF01532 DS    0H                                                  1541
*       MWAPCODE=PP20;              /* SET PROBLEM CODE              */
         MVI   MWAPCODE,X'14'                                      1541
*       CALL PROBDT2B;              /* CALL PROBLEM DETERMINATION    */
         BAL   @14,PROBDT2B                                        1542
*     END;                                                         1543
*   RESPECIFY                                                      1544
*     RET RESTRICTED;                                              1544
@RC01532 DS    0H                                                  1545
*   RET=MWASAVEG;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEG                                        1545
*   RESPECIFY                                                      1546
*    (RET,                                                         1546
*     RETCODE) UNRESTRICTED;                                       1546
*   END GETCORE;                                                   1547
@EL00032 DS    0H                                                  1547
@EF00032 DS    0H                                                  1547
@ER00032 BR    @14                                                 1547
*FREECORE:                                                         1548
*                                                                  1548
*/********************************************************************/
*/*                                                                  */
*/*      01   FUNCTION-FREEMAIN CORE STORAGE                         */
*/*      01   INPUT -  1. SUBPOOL NUMBER IN MWASPOOL                 */
*/*                    2. NUMBER OF BYTES TO BE FREED IN MWABYTES    */
*/*                    3. ADDRESS OF CORE TO BE FREED IN MWADDRES    */
*/*                    4. STORAGE PROTECTION KEY OF THE CORE @ZA16012*/
*/*                       TO BE GOTTEN IN MWAKEY             @ZA16012*/
*/*      01   OUTPUT - 1. CORE STORAGE FREED                         */
*/*                    2. NOTE THAT MWAKEY IS NOT RESET TO   @ZA16012*/
*/*                       ZERO, HENCE LATER CALLS TO GETCORE @ZA16012*/
*/*                       OR FREECORE SHOULD INSURE THIS     @ZA16012*/
*/*                       FIELD IS INITIALIZED CORRECTLY.    @ZA16012*/
*/*                                                                  */
*/********************************************************************/
*                                                                  1548
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1548
FREECORE DS    0H                                                  1549
*   RESPECIFY                                                      1549
*    (R0,                                                          1549
*     R1,                                                          1549
*     RET) RESTRICTED;                                             1549
*   MWASAVEB=RET;                   /* SAVE RETURN ADDRESS           */
         ST    RET,MWASAVEB                                        1550
*   RESPECIFY                                                      1551
*     RET UNRESTRICTED;                                            1551
*   IF MWAKEY^=ZERO THEN            /* IF CORE TO BE GOTTEN IN     1552
*                                      NONZERO KEY           @ZA16012*/
         CLI   MWAKEY,0                                            1552
         BE    @RF01552                                            1552
*     DO;                           /* CHANGE KEYS           @ZA16012*/
*       RFY                                                        1554
*         R1 RSTD;                  /* USE THIS REG          @ZA16012*/
*       R1=MWAKEY;                  /* SET CALLER'S KEY      @ZA16012*/
         SLR   R1,R1                                               1555
         IC    R1,MWAKEY                                           1555
*       SPKA(R1);                   /* CHANGE KEYS           @ZA16012*/
         SPKA  0(R1)                                               1556
*       RFY                                                        1557
*         R1 UNRSTD;                /* FREE REG              @ZA16012*/
*     END;                          /* END CHANGE KEYS       @ZA16012*/
*   ELSE                                                           1559
*     ;                             /* CORE IS IN KEY ZERO   @ZA16012*/
@RF01552 DS    0H                                                  1560
*   R1=MWADDRES;                    /* ADDRESS OF CORE TO BE FREED   */
         L     R1,MWADDRES                                         1560
*   R0=MWAMNWRD;                    /* SUBPOOL NO. AND BYTES TO BE 1561
*                                      FREE                          */
         L     R0,MWAMNWRD                                         1561
*   GEN(FREEMAIN R,LV=(R0),A=(R1)); /* FREEMAIN                      */
         FREEMAIN R,LV=(R0),A=(R1)
*   RESPECIFY                                                      1563
*     RET RESTRICTED;                                              1563
*   SPKA(0);                        /* RETURN TO KEY ZERO    @ZA16012*/
         SLR   @01,@01                                             1564
         SPKA  0(@01)                                              1564
*   RET=MWASAVEB;                   /* GET RETURN ADDRESS            */
         L     RET,MWASAVEB                                        1565
*   RESPECIFY                                                      1566
*    (R0,                                                          1566
*     R1,                                                          1566
*     RET) UNRESTRICTED;                                           1566
*   END FREECORE;                                                  1567
@EL00033 DS    0H                                                  1567
@EF00033 DS    0H                                                  1567
@ER00033 BR    @14                                                 1567
@PB00033 DS    0H                                                  1567
*   END IDA0192B                                                   1568
*                                                                  1568
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (LCGPLSSW)                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IDABIB  )                                       */
*/*%INCLUDE SYSLIB  (IDACMB  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IFGEXLST)                                       */
*/*%INCLUDE SYSLIB  (IEZJSCB )                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IKJRB   )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*/*%INCLUDE SYSLIB  (IDAVAT  )                                       */
*/*%INCLUDE SYSLIB  (IDAVMT  )                                       */
*/*%INCLUDE SYSLIB  (IDAVSRT )                                       */
*/*%INCLUDE SYSLIB  (AMCBS   )                                       */
*/*%INCLUDE SYSLIB  (IDAFOREC)                                       */
*/*%INCLUDE SYSLIB  (IECDSECT)                                       */
*/*%INCLUDE SYSLIB  (IECDSECS)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBX)                                       */
*/*%INCLUDE SYSLIB  (IDAPDPRM)                                       */
*/*%INCLUDE SYSLIB  (IDARTMAC)                                       */
*/*%INCLUDE SYSLIB  (IDAIOMB )                                       */
*/*%INCLUDE SYSLIB  (IECDIOSB)                                       */
*/*%INCLUDE SYSLIB  (IDAERRCD)                                       */
*/*%INCLUDE SYSLIB  (IDAPDFCD)                                       */
*/*%INCLUDE SYSLIB  (IDAPPCDE)                                       */
*/*%INCLUDE SYSLIB  (IDAOCECN)                                       */
*/*%INCLUDE SYSLIB  (IDAESL  )                                       */
*/*%INCLUDE SYSLIB  (IDAVIRT )                                       */
*/*%INCLUDE SYSLIB  (IDASFI  )                                       */
*/*%INCLUDE SYSLIB  (IDABLPRM)                                       */
*/*%INCLUDE SYSLIB  (IDACTREC)                                       */
*/*%INCLUDE SYSLIB  (IDAOPWRK)                                       */
*/*%INCLUDE SYSLIB  (IDAEDB  )                                       */
*/*%INCLUDE SYSLIB  (IDAGMAIN)                                       */
*                                                                  1568
*       ;                                                          1568
@DATA    DS    0H
@CH00217 DC    H'9'
@DATD    DSECT
         DS    0F
@SA00001 DS    23F
@TF00001 DS    F
IDA0192B CSECT
         DS    0F
@CF00059 DC    F'1'
@CF00140 DC    F'2'
@CF00106 DC    F'4'
@CF00065 DC    F'8'
@CF00146 DC    F'16'
@CH00146 EQU   @CF00146+2
@CF00067 DC    F'24'
@CF00148 DC    F'35'
@CF04661 DC    F'52'
@CF04572 DC    F'100'
@CF04580 DC    F'132'
@CF04586 DC    F'148'
@CF04592 DC    F'164'
@CF05493 DC    F'280'
@CF05495 DC    F'-4'
@DATD    DSECT
         DS    0D
MWAAMBPT DS    A
MWARPLPT DS    A
MWASAVEA DS    A
MWASAVEB DS    A
MWASAVEC DS    A
MWASAVED DS    A
MWASAVEE DS    A
MWASAVEF DS    A
MWASAVEG DS    A
MWARDBPT DS    A
MWAPLHSV DS    A
MWAPTRB  DS    A
MWARETCD DS    F
MWABFSPD DS    F
MWABFSPI DS    F
MWARQIBF DS    F
MWABFSP  DS    F
MWAPFMTS DS    BL1
         DS    CL3
MWAMNPRM DS    CL12
         ORG   MWAMNPRM
MWADDRES DS    AL4
MWAMNWRD DS    FL4
         ORG   MWAMNWRD
MWASPOOL DS    FL1
MWABYTES DS    AL3
         ORG   MWAMNPRM+8
MWAKEY   DS    CL1
@NM00001 DS    CL3
         ORG   MWAMNPRM+12
MWACATPM DS    CL56
         ORG   MWACATPM
MWACATID DS    FL1
MWASFIPT DS    AL3
MWADTAWK DS    AL4
         ORG   MWADTAWK
@NM00002 DS    BL1
         ORG   @NM00002
MWABTOPN DS    BL1
         ORG   MWADTAWK+1
MWACI    DS    CL3
         ORG   MWACATPM+8
MWAIDXWK DS    AL4
         ORG   MWAIDXWK
MWACACB  DS    AL4
         ORG   MWACATPM+12
MWACLSNM DS    CL44
         ORG   MWACATPM+56
MWAPDPRM DS    CL4
         ORG   MWAPDPRM
MWAPCODE DS    FL1
MWAPFUNC DS    FL1
MWAPSFC  DS    FL1
@NM00003 DS    CL1
         ORG   MWAPDPRM+4
ENQPARML DS    CL20
         ORG   ENQPARML
ENQTCB   DS    AL4
ENQENTRY DS    CL16
         ORG   ENQENTRY
ENQOPT1  DS    BL1
         ORG   ENQOPT1
ENQEND   DS    BL1
ENQNEW   EQU   ENQOPT1+0
@NM00004 EQU   ENQOPT1+0
ENQEXSHR EQU   ENQOPT1+0
@NM00005 EQU   ENQOPT1+0
ENQDIR   EQU   ENQOPT1+0
         ORG   ENQENTRY+1
ENQRLEN  DS    FL1
ENQOPT2  DS    BL1
         ORG   ENQOPT2
ENQSHR   DS    BL1
         ORG   ENQENTRY+3
ENQRETC  DS    FL1
ENQQNADR DS    AL4
ENQRNADR DS    AL4
ENQUCADR DS    AL4
         ORG   ENQPARML+20
ENQRNAME DS    CL8
         ORG   ENQRNAME
ENQRNCI  DS    CL3
ENQRNACB DS    CL4
ENQRNIND DS    CL1
         ORG   ENQRNAME+8
MWAVIRT  DS    CL24
MWAQNAME DS    CL8
MWADEVTP DS    CL3
         ORG   MWADEVTP
MWADVOPT DS    BL1
         ORG   MWADEVTP+3
MWACATDT DS    BL1
MWACATIX DS    BL1
MWALLMNT DS    BL1
MWAINDFG DS    BL1
MWASWTCH DS    BL1
MWATERM  DS    BL1
IDA0192B CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV05345 DC    V(IDA0192Y)
@CV05348 DC    V(IDA0192Z)
@CV05359 DC    V(IDA0192C)
@CV05384 DC    V(IDA0192D)
@CV05445 DC    V(IDA0192P)
@CV05450 DC    V(IDA0192M)
         DS    0D
@CC04942 DC    C' IDAESL '
@CC05457 DC    C'SYSVSAM '
@CC04253 DC    C'192B'
@CC04255 DC    C'192C'
@CC04265 DC    C'192P'
IDA0192B CSECT
         DS    0D                       DOUBLE WORD BOUNDARY
PTCH192B DC    ((*-IDA0192B)/20)X'00'   PATCH AREA
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA0192B CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
MWARQDBF EQU   @11
MWARQBFS EQU   @10
MWABUFSP EQU   @05
MWABUFNI EQU   @08
MWABUFND EQU   @09
MWAIND   EQU   @07
MWAINDEX EQU   @08
MWAPTRA  EQU   @05
MWACISZI EQU   @06
MWACISZD EQU   @07
MWABLPTR EQU   @07
MWAESLPT EQU   @11
MWACTVOL EQU   @06
MWAVMTPT EQU   @05
MWAUCBPT EQU   @09
MWADEBEX EQU   @05
MWADEBPT EQU   @06
MWAIOMBP EQU   @05
RCORE    EQU   @04
R0       EQU   @00
R1       EQU   @01
RACB     EQU   @02
RBASEA   EQU   @03
RBASEB   EQU   @12
R12      EQU   @12
R13      EQU   @13
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
RET      EQU   @14
RETCODE  EQU   @15
R15      EQU   @15
RDEB     EQU   @11
RTIOT    EQU   @09
RUCB     EQU   @10
R10      EQU   @10
R11      EQU   @11
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
MWAPFTSA EQU   0
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBUBF   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBSKP   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBBUFND EQU   ACBCOMN+16
ACBBUFNI EQU   ACBCOMN+18
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBICI   EQU   ACBMACR3
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBERFLG EQU   ACBCOMN+49
ACBINFLG EQU   ACBCOMN+50
ACBINFL1 EQU   ACBINFLG
ACBCAT   EQU   ACBINFL1
ACBSCRA  EQU   ACBINFL1
ACBUCRA  EQU   ACBINFL1
ACBVVIC  EQU   ACBINFL1
ACBSDS   EQU   ACBVVIC
ACBINFL2 EQU   ACBINFLG+1
ACBUJFCB EQU   ACBCOMN+52
ACBBUFSP EQU   ACBCOMN+56
ACBBLKSZ EQU   ACBCOMN+60
IDAAMB   EQU   0
AMBPH    EQU   IDAAMB+12
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBPSDS  EQU   AMBFLG0
AMBFLG1  EQU   IDAAMB+25
AMBCREAT EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBIOMB  EQU   AMBIOBAD
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBDEBAD EQU   AMBDEBPT+1
AMBOFLGS EQU   IDAAMB+48
AMBOPEN  EQU   AMBOFLGS
AMBFLG2  EQU   IDAAMB+49
AMBEDB   EQU   IDAAMB+52
AMBEOVPT EQU   IDAAMB+56
AMBWKA   EQU   IDAAMB+60
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLGSR  EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLDFR  EQU   AMBLQ
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLPATH EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLQ2   EQU   IDAAMBL+31
AMBLSHAR EQU   IDAAMBL+33
AMBLPRIM EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLFLG1 EQU   IDAAMBL+35
AMBLVVIC EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLDUMY EQU   AMBLFLG1
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
AMBLBIB  EQU   IDAAMBL+60
AMBLCMB  EQU   IDAAMBL+64
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDSDT   EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDNEST  EQU   IDAAMDSB+4
AMDKEYLN EQU   IDAAMDSB+8
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDPARDB EQU   IDAAMDSB+36
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
AMDSTSP  EQU   AMDSTAT
AMDNLR   EQU   AMDSTAT+12
AMDDELR  EQU   AMDSTAT+16
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDNPTR  EQU   IDAARDB+4
ARDHRBA  EQU   IDAARDB+12
ARDERBA  EQU   IDAARDB+16
ARDPRF   EQU   IDAARDB+28
ARDPRFMT EQU   ARDPRF
IDABIB   EQU   0
BIBHDR   EQU   IDABIB
BIBFLG1  EQU   BIBHDR+1
BIBVIRT  EQU   BIBFLG1
BIBVMT   EQU   IDABIB+12
BIBRTNS  EQU   IDABIB+60
BIBINTRF EQU   BIBRTNS
IDACMB   EQU   0
CMBFLGS  EQU   IDACMB+4
CMBOUT   EQU   CMBFLGS
CMBNST   EQU   IDACMB+5
CMBPTRS  EQU   IDACMB+8
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTCBSP  EQU   CVTMAP+256
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBNMEXT EQU   DEBUSRPG
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBDVMOD EQU   DEBUCBAD
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
IFGEXLST EQU   0
EXLCOMN  EQU   IFGEXLST
EXLLEN   EQU   EXLCOMN+2
EXLEODF  EQU   EXLCOMN+5
EXLSYNF  EQU   EXLCOMN+10
EXLLERF  EQU   EXLCOMN+15
EXLSCIPF EQU   EXLCOMN+20
EXLUPADF EQU   EXLSCIPF
EXLSCIPS EQU   EXLUPADF
EXLSCIPA EQU   EXLUPADF
EXLSCIPK EQU   EXLUPADF
EXLSCIPP EQU   EXLCOMN+21
EXLLGNF  EQU   EXLCOMN+25
EXLJRNF  EQU   EXLCOMN+30
EXLOPNF  EQU   EXLCOMN+35
IFGEXLEF EQU   0
EXLENTRY EQU   IFGEXLEF
EXLFLAG  EQU   EXLENTRY
EXLENFL  EQU   EXLFLAG
EXLEXITP EQU   EXLENTRY+1
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBSHR  EQU   JSCBSEC1+8
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBEND1 EQU   IEZJSCB+260
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHFLG2  EQU   IDAPLH+3
PLHEFLGS EQU   IDAPLH+4
PLHFLG3  EQU   IDAPLH+6
PLHAFLGS EQU   IDAPLH+7
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHARDB  EQU   IDAPLH+44
PLHDIOB  EQU   IDAPLH+76
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHKEYPT EQU   IDAPLH+248
PLHEND   EQU   IDAPLH+280
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
XRBPSW   EQU   RBOPSW
RBOPSWB2 EQU   XRBPSW+1
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
RBPREFIX EQU   0
RBRSV019 EQU   RBPREFIX+14
RBRSV028 EQU   RBPREFIX+15
RBRSV041 EQU   RBPREFIX+27
RBRSV054 EQU   RBPREFIX+39
RBRTOPSW EQU   RBPREFIX+40
RBRTPSW2 EQU   RBRTOPSW+8
RBRTICIL EQU   RBRTPSW2
RBFLAGS1 EQU   RBPREFIX+56
RBINTCDA EQU   RBPREFIX+61
RBSECT   EQU   0
RBPPSAV  EQU   RBSECT
@NM00106 EQU   RBSECT+10
@NM00107 EQU   @NM00106
RBTRSVRB EQU   @NM00107
@NM00109 EQU   @NM00106+1
RBETXR   EQU   @NM00109
RBEP     EQU   RBSECT+12
RBPGMQ   EQU   RBSECT+24
@NM00116 EQU   RBSECT+28
@NM00117 EQU   @NM00116
IRBEND   EQU   RBSECT+96
@NM00120 EQU   RBSECT+96
RBRSV138 EQU   @NM00120+7
RBSCBB   EQU   RBSECT+144
RBSPARM  EQU   RBSCBB+8
RBSFLGS1 EQU   RBSPARM
RBSIOPRC EQU   RBSFLGS1
RBSOWNR  EQU   RBSCBB+12
RBSFLGS2 EQU   RBSOWNR
RBSDATA  EQU   RBSCBB+16
RBSFLG3  EQU   RBSDATA
RBRSV150 EQU   RBSECT+167
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLPLHPT EQU   RPLCOMN+4
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLDDDD  EQU   RPLRBAR+4
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBRBP   EQU   TCB
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBSTAWA EQU   TCB+252
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
UCB      EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBCHAN  EQU   UCBOB+4
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00134 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCB3800X EQU   0
UCBOPTNS EQU   UCB3800X
UCBACTIV EQU   UCB3800X+3
UCBMDRBF EQU   UCB3800X+36
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
IDAVAT   EQU   0
VATHDR   EQU   IDAVAT
VATVSRT  EQU   IDAVAT+8
VATVPTR  EQU   VATVSRT+4
VATVC    EQU   IDAVAT+20
IDAVMT   EQU   0
VMTHDR   EQU   IDAVMT
VMTNXT   EQU   IDAVMT+4
VMTNOVOL EQU   IDAVMT+8
VMTDEV   EQU   IDAVMT+13
VMTVOL   EQU   IDAVMT+16
VMTUSECT EQU   VMTVOL
VMTVFLG1 EQU   VMTVOL+4
VMTVLSER EQU   VMTVOL+6
VMTUCB   EQU   VMTVOL+12
IDAVSRT  EQU   0
VSRTFLGS EQU   IDAVSRT+12
VSRTKL   EQU   IDAVSRT+14
VSRTCSL  EQU   IDAVSRT+44
VSRTCSLF EQU   VSRTCSL
VSRTCSBF EQU   VSRTCSLF
VSRTCSPF EQU   VSRTCSLF
AMCBS    EQU   0
CBSCMP   EQU   AMCBS+16
CBSVSRT  EQU   AMCBS+32
CBSVPTR  EQU   CBSVSRT+4
FORCORE  EQU   0
DXDSCB   EQU   FORCORE
DXJBF    EQU   FORCORE+100
DXIOB    EQU   FORCORE+280
DXDAADDR EQU   FORCORE+312
DXDCB    EQU   FORCORE+320
DXCCW    EQU   FORCORE+368
DXCCW5   EQU   DXCCW+32
DXCCW8   EQU   DXCCW+56
DXCCW12  EQU   DXCCW+88
DXXCTL   EQU   FORCORE+472
DXVOLSR  EQU   FORCORE+500
DXVOLSR1 EQU   DXVOLSR
DXVOLSR2 EQU   DXVOLSR+6
DXVOLSR3 EQU   DXVOLSR+12
DXRESSW  EQU   FORCORE+524
DXUKEY   EQU   FORCORE+526
DXUCBSAV EQU   FORCORE+564
DXUDCBAD EQU   FORCORE+568
DXPDCBAD EQU   FORCORE+572
DXATCOM1 EQU   FORCORE+588
DXATGENS EQU   DXATCOM1
DXATVGIV EQU   DXATGENS
DXATOUTA EQU   DXATCOM1+2
DXATDACC EQU   DXATCOM1+3
DXATCOM2 EQU   FORCORE+592
DXATEOV  EQU   DXATCOM2
DXATOPEN EQU   DXATCOM2+1
DXATALL  EQU   DXATCOM2+2
DXATEXC1 EQU   FORCORE+604
DXATEXB1 EQU   DXATEXC1
DXATEXC2 EQU   FORCORE+608
DSECTSIZ EQU   FORCORE+612
IECPREFX EQU   0
IECEXTPR EQU   IECPREFX+32
IECWTGTB EQU   IECEXTPR+72
IECUPRML EQU   IECEXTPR+80
IECRESWA EQU   IECEXTPR+84
RWARESWA EQU   0
RWAPREFX EQU   RWARESWA
USERPRML EQU   0
IECRRPL  EQU   0
RRPLIST  EQU   IECRRPL
RRFUNCTN EQU   RRPLIST
RRFLAGS1 EQU   RRPLIST+1
RRFLAGS2 EQU   RRPLIST+2
RRFLAGS3 EQU   RRPLIST+3
RRXRETRY EQU   RRPLIST+12
DSMADTRL EQU   0
DSMADTW1 EQU   DSMADTRL
DSMADTB1 EQU   DSMADTW1
DSMADTB2 EQU   DSMADTW1+1
WTGTABLE EQU   0
WTGWTOPR EQU   WTGTABLE
WTG      EQU   0
WTGAREA  EQU   WTG
WTGMODNM EQU   WTGAREA
WTGPREFX EQU   WTGAREA+16
WTGPATHS EQU   WTG+30
WTGENTRY EQU   0
WTGIDTTR EQU   WTGENTRY
APPNMTBL EQU   0
APPENTRY EQU   APPNMTBL+4
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCBADBF EQU   INFMJFCB+60
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCSHARE EQU   JFCBIND2
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
JFCBX    EQU   0
IDAPDPRM EQU   0
PDPCODE  EQU   IDAPDPRM+1
PDPFUNC  EQU   IDAPDPRM+2
PDPSFC   EQU   IDAPDPRM+3
PDPCLSNM EQU   IDAPDPRM+20
PDPDSN   EQU   IDAPDPRM+24
PDPDSTYP EQU   IDAPDPRM+33
PDPMSGFL EQU   IDAPDPRM+34
PDPSFI   EQU   IDAPDPRM+36
IDAVGTT  EQU   0
VGTTTYPE EQU   IDAVGTT+4
IDAIOMB  EQU   0
IOMIOSB  EQU   IDAIOMB+36
IOMFLAGS EQU   IDAIOMB+40
IOMFL    EQU   IOMFLAGS
IOMAPEND EQU   IOMFL
IOMSTIND EQU   IOMFLAGS+2
IOMSAVER EQU   IDAIOMB+52
IOMNXT1  EQU   IDAIOMB+116
IOSB     EQU   0
IOSFLA   EQU   IOSB
IOSACHN  EQU   IOSFLA
IOSFLB   EQU   IOSB+1
IOSFLC   EQU   IOSB+2
IOSDVALT EQU   IOSFLC
IOSPKEY  EQU   IOSB+12
IOSOPT   EQU   IOSB+14
IOSOPT2  EQU   IOSB+15
@NM00193 EQU   IOSB+20
IOSCSW   EQU   @NM00193+1
IOSTATUS EQU   IOSCSW+3
IOSIPIB  EQU   IOSB+44
IOSPATH  EQU   IOSB+86
IOSCHN   EQU   IOSPATH
IOSFMSK  EQU   IOSB+88
IOSCKEY  EQU   IOSB+89
IOSEEKA  EQU   IOSB+100
IOSCCHH  EQU   IOSEEKA+3
IOSSKHH  EQU   IOSCCHH+2
IDAESL   EQU   0
ESLSUBPL EQU   IDAESL
ESLLENTH EQU   IDAESL+1
ESLID    EQU   IDAESL+4
ESLNXPTR EQU   IDAESL+12
ESLACTEN EQU   IDAESL+16
ESLENTRY EQU   IDAESL+20
ESLENQOP EQU   ESLENTRY
ESLRNAME EQU   ESLENTRY+1
IDAVIRT  EQU   0
VIRTFLAG EQU   IDAVIRT+1
VIRTACQ  EQU   VIRTFLAG
VIRTBACB EQU   VIRTFLAG
VIRTACB  EQU   IDAVIRT+4
VIRTTIOE EQU   IDAVIRT+16
IDASFI   EQU   0
SFIRETCD EQU   IDASFI+4
IDABLPRM EQU   0
BLPBUFLP EQU   IDABLPRM+4
BLPUACB  EQU   BLPBUFLP
BLPFLAGS EQU   IDABLPRM+10
BLPFLAG1 EQU   BLPFLAGS
BLPFLAG2 EQU   BLPFLAGS+1
BLPFPART EQU   BLPFLAG2
BLPFUPGR EQU   BLPFLAG2
BLPFPATH EQU   BLPFLAG2
BLPFDATA EQU   BLPFLAG2
BLPFINDX EQU   BLPFLAG2
BLPCORE  EQU   IDABLPRM+16
BLPGFLG  EQU   BLPCORE
BLPIOACB EQU   IDABLPRM+24
BLPBUFL  EQU   0
BLPBRLFG EQU   BLPBUFL+4
AMBWORK  EQU   0
AMALEN   EQU   AMBWORK+6
VOLENTNO EQU   AMBWORK+12
CTINFO   EQU   AMBWORK+14
CTATTRA  EQU   CTINFO
CTRDONLY EQU   CTATTRA
CTATTRB  EQU   CTINFO+1
CTOPEN   EQU   CTATTRB
CTINDXSS EQU   CTATTRB
CTSHROP  EQU   CTINFO+2
CTSHRW   EQU   CTSHROP
CTSHRF   EQU   CTSHROP
CTHELP   EQU   CTSHROP
CTSDHELP EQU   CTSHROP
CTINTDS  EQU   CTSHROP
CTUNUSE  EQU   CTSHROP
CTAUTH   EQU   CTINFO+3
CTBLKSZ  EQU   CTINFO+6
CTDEVTYP EQU   CTINFO+10
CTDEV2   EQU   CTDEVTYP+1
CTBYTAU  EQU   CTINFO+30
CTBYTTRK EQU   CTINFO+38
CTHSHDSN EQU   CTINFO+46
CTHURBA  EQU   CTINFO+54
CTBUFSIZ EQU   CTINFO+58
CTCISIZ  EQU   CTINFO+62
CTDATANM EQU   CTINFO+74
CTAMDSB  EQU   CTINFO+118
CTVOLENT EQU   0
CTVOLFLG EQU   CTVOLENT
CTVOLMT  EQU   CTVOLFLG
CTNOEXT  EQU   CTVOLENT+1
CTVOLUCB EQU   CTVOLENT+4
CTNOKEY  EQU   CTVOLENT+8
CTKEYLEN EQU   CTVOLENT+10
CTVOLSER EQU   CTVOLENT+12
CTKEYENT EQU   0
CTKEYFLG EQU   CTKEYENT
CTEXTENT EQU   0
CTABSBEG EQU   CTEXTENT+2
CTABSEND EQU   CTEXTENT+6
IDAOPWRK EQU   0
OPWFLGS1 EQU   IDAOPWRK+12
OPWCAT   EQU   OPWFLGS1
OPWSCRA  EQU   OPWFLGS1
OPWVVIC  EQU   OPWFLGS1
OPWFLGS2 EQU   IDAOPWRK+13
OPWIXDT  EQU   OPWFLGS2
OPWFLGS3 EQU   IDAOPWRK+14
OPWRSTRT EQU   OPWFLGS3
OPWFLGS4 EQU   IDAOPWRK+15
OPWCOMWA EQU   IDAOPWRK+20
OPWIDF   EQU   IDAOPWRK+24
OPWCACB  EQU   OPWIDF
OPWDCI   EQU   OPWIDF+4
OPWQ     EQU   OPWIDF+7
OPWFSTP  EQU   OPWQ
OPWVSMPL EQU   IDAOPWRK+32
OPWVMANC EQU   OPWVSMPL
OPWVMTYP EQU   OPWVSMPL+12
OPWVMFLG EQU   OPWVSMPL+13
OPWVSMWA EQU   IDAOPWRK+48
OPWVGSPL EQU   OPWVSMWA+40
OPWVLSAV EQU   OPWVSMWA+80
OPWVFMPL EQU   OPWVSMWA+88
OPWSAVE  EQU   IDAOPWRK+144
OPWESL   EQU   OPWSAVE+4
OPWCURPT EQU   IDAOPWRK+164
OPWCAMBL EQU   IDAOPWRK+172
OPWQ2    EQU   IDAOPWRK+198
OPWCBIC  EQU   OPWQ2
OPWCATTR EQU   IDAOPWRK+199
OPWPSDS  EQU   OPWCATTR
OPWUACB  EQU   IDAOPWRK+204
OPWWRKPT EQU   IDAOPWRK+208
OPWDTWRK EQU   IDAOPWRK+212
OPWIXWRK EQU   IDAOPWRK+216
OPWJSTCB EQU   IDAOPWRK+224
OPWTIOT  EQU   IDAOPWRK+228
OPWBUFND EQU   IDAOPWRK+232
OPWBUFNI EQU   IDAOPWRK+236
OPWCSTRN EQU   IDAOPWRK+240
OPWSFI   EQU   IDAOPWRK+296
OPWERMAP EQU   IDAOPWRK+308
OPWSAVEA EQU   IDAOPWRK+564
OPWBSECL EQU   IDAOPWRK+568
OPWPTAIX EQU   IDAOPWRK+576
OPWPDTCI EQU   OPWPTAIX+1
OPWUPAIX EQU   IDAOPWRK+588
OPWCURCL EQU   0
OPWCFLG1 EQU   OPWCURCL
OPWPATH  EQU   OPWCFLG1
OPWUPGR  EQU   OPWCFLG1
OPWSVWRK EQU   OPWCFLG1
OPWPRTBL EQU   OPWCFLG1
OPWCDTCI EQU   OPWCURCL+1
OPWFLG2  EQU   OPWCURCL+4
OPWDOPEN EQU   OPWFLG2
OPWMODWK EQU   OPWFLG2
OPWEMPUP EQU   OPWFLG2
OPWERR2B EQU   OPWFLG2
OPWIOPEN EQU   OPWFLG2
OPWCIXCI EQU   OPWCURCL+5
IDAEDBHD EQU   0
EDBNO    EQU   IDAEDBHD+1
IDAEDB   EQU   0
EDBFLG1  EQU   IDAEDB+2
EDBTOFLW EQU   EDBFLG1
EDBTKBAL EQU   IDAEDB+20
PLHKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
UCBBGN   EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBFBYT EQU   JSCBSEC3+10
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCSCT   EQU   JSCBSEC3+68
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
PSARSVTE EQU   PSARSVT
RBSECS03 EQU   RBEP
RBCDE    EQU   RBSECS03
RBCDFLGS EQU   RBCDE
RBSECS05 EQU   RBPGMQ
RBSQE    EQU   RBSECS05
RBSECS06 EQU   RBPGMQ
RBIQE    EQU   RBSECS06
RBSECS07 EQU   RBPGMQ
RBIQE2   EQU   RBSECS07
RBSECS08 EQU   IRBEND
RBSECS09 EQU   IRBEND
UCBOBS01 EQU   UCBDEV
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00133 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBCTCAD EQU   UCBOBS08
UCBCTCF1 EQU   UCBOBS08+4
UCBOBS09 EQU   UCBDEV
DXXWTG   EQU   DSECTSIZ
DXXAREA  EQU   DSECTSIZ+4
DXXMODNM EQU   DXXAREA
DXXLNG   EQU   DXXAREA+29
DXXENTRY EQU   DXXAREA+32
DXXIDTTR EQU   DXXENTRY
DXREGSAV EQU   DXCCW8
DXREG1   EQU   DXREGSAV+28
DXIDENT  EQU   DXCCW12
DXRETMOD EQU   DXIDENT+2
@NM00170 EQU   DXXCTL
DXSAVMOD EQU   @NM00170+2
@NM00171 EQU   DXRESSW
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCBAXBF EQU   JFCBUFSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
JFCBSPNM EQU   JFCBS001+45
JFCBFLG3 EQU   JFCBSPNM
PDWLIST  EQU   FORCORE
PDWWORK  EQU   DXDCB
IDARRPL  EQU   DXATCOM1
IDARRFLG EQU   IDARRPL+1
IDARSTAT EQU   DXATEXC1
RSTAT    EQU   IDARSTAT
RSTATCRO EQU   RSTAT+1
RSTATOP2 EQU   RSTAT+2
IDARRTN  EQU   DXATEXC2
RSTATRTN EQU   IDARRTN
IOSATTSC EQU   IOSIPIB
IOSWTOWA EQU   IOSIPIB
IOSPCISC EQU   IOSIPIB
DXBTAMX  EQU   DXREG1
DXDSNAME EQU   DXCCW5
FLC      EQU   PSA
IDAESPL  EQU   DXATCOM1
IDARTSA  EQU   DXJBF
UCBDEV3  EQU   UCBTBYT2
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
IOSPCIWA EQU   IOSPCISC+44
IOSPCIRS EQU   IOSPCISC+8
@NM00198 EQU   IOSPCISC+4
@NM00197 EQU   IOSPCISC
IOSWRNDR EQU   IOSWTOWA+4
IOSWTOPT EQU   IOSWTOWA+3
IOSWTOCP EQU   IOSWTOWA+2
IOSWTOCH EQU   IOSWTOWA
IOSATTWA EQU   IOSATTSC+40
@NM00196 EQU   IOSATTSC+24
IOSATTSN EQU   IOSATTSC
@NM00188 EQU   RSTAT+3
@NM00187 EQU   RSTATOP2
RSTATCSA EQU   RSTATOP2
IDARCURS EQU   RSTATCRO
IDARCRCU EQU   RSTATCRO
IDARRSTR EQU   RSTATCRO
IDARCKPT EQU   RSTATCRO
RSTATOPT EQU   RSTAT
@NM00186 EQU   IDARRPL+2
@NM00185 EQU   IDARRFLG
RRPLVSAM EQU   IDARRFLG
@NM00184 EQU   IDARRFLG
@NM00183 EQU   IDARRPL
PDWORKSP EQU   PDWWORK+88
PDWERRCD EQU   PDWWORK+84
PDWMSGPT EQU   PDWWORK+80
PDWSAVED EQU   PDWWORK+76
PDWSAVEC EQU   PDWWORK+72
PDWSAVEB EQU   PDWWORK+68
PDWSAVEA EQU   PDWWORK+64
PDWSAVE  EQU   PDWWORK
WTPROUT  EQU   PDWLIST+75
WTPMSG   EQU   PDWLIST+4
WTPFLGS  EQU   PDWLIST+2
WTPLNGTH EQU   PDWLIST
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBRV08 EQU   JFCBSPNM+1
JFCBRV07 EQU   JFCBFLG3
JFCBRV06 EQU   JFCBFLG3
JFCBRV05 EQU   JFCBFLG3
JFCBRV04 EQU   JFCBFLG3
JFCBRV03 EQU   JFCBFLG3
JFCBRV02 EQU   JFCBFLG3
JFCBEXP  EQU   JFCBFLG3
JFCDQDSP EQU   JFCBFLG3
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCBADSP EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBMSGP EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXAD EQU   JFCBS001+31
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00175 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNVOL EQU   JFCUCSEG+9
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00174 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCORGIS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00173 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
DXRESIND EQU   @NM00171
DXSAVOFF EQU   @NM00170+7
DXSAVADR EQU   DXSAVMOD+2
DXSAVID  EQU   DXSAVMOD
DXABCODE EQU   @NM00170
DXRETCOD EQU   DXIDENT+7
DXRETTTR EQU   DXRETMOD+2
DXRETID  EQU   DXRETMOD
DXCALLID EQU   DXIDENT
DXREG0   EQU   DXREGSAV+24
DXREGE   EQU   DXREGSAV+20
DXREGD   EQU   DXREGSAV+16
DXREGC   EQU   DXREGSAV+12
DXREGB   EQU   DXREGSAV+8
DXREGA   EQU   DXREGSAV+4
DXREG9   EQU   DXREGSAV
DXXEND   EQU   DXXAREA+48
DXXLAST  EQU   DXXAREA+40
DXXCORE  EQU   DXXENTRY+5
DXETTR   EQU   DXXIDTTR+2
DXEID    EQU   DXXIDTTR
DXXPATHS EQU   DXXAREA+30
DXOPCLSW EQU   DXXLNG
DXXTXTLN EQU   DXXAREA+27
DXXMODSZ EQU   DXXAREA+24
DXXATTRB EQU   DXXAREA+22
@NM00155 EQU   DXXAREA+20
DXXPREFX EQU   DXXAREA+16
@NM00154 EQU   DXXAREA+12
DXXMODEP EQU   DXXAREA+8
DXXMODID EQU   DXXMODNM+6
@NM00153 EQU   DXXMODNM
DXXWTOPR EQU   DXXWTG
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBRV082 EQU   UCBCTCF1
UCBRV081 EQU   UCBCTCF1
UCBRV080 EQU   UCBCTCF1
UCBRV079 EQU   UCBCTCF1
UCBRV078 EQU   UCBCTCF1
UCBRV077 EQU   UCBCTCF1
UCBRV076 EQU   UCBCTCF1
UCBCTC80 EQU   UCBCTCF1
UCBCTCAL EQU   UCBCTCAD
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00133
UCBSKPFG EQU   @NM00133
UCBRIPND EQU   @NM00133
UCBRTIAC EQU   @NM00133
UCBRSV79 EQU   @NM00133
UCBRSV78 EQU   @NM00133
UCBRSV77 EQU   @NM00133
UCBOLTEP EQU   @NM00133
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBDQDSP EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00132 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRESVP EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVOLI  EQU   UCBOBS01+4
UCBVTOC  EQU   UCBOBS01
RBRSV161 EQU   RBSECS09+64
RBSIRBWA EQU   RBSECS09
RBIQEWRK EQU   RBSECS08+4
RBNEXAV  EQU   RBSECS08
RBIQEA   EQU   RBIQE2
RBIQE1   EQU   RBIQE+1
RBUSE    EQU   RBIQE
RBSQEA   EQU   RBSQE+1
@NM00121 EQU   RBSQE
RBCDE1   EQU   RBCDE+1
RBCDLOAD EQU   RBCDFLGS
RBCDXCTL EQU   RBCDFLGS
RBCDSYNC EQU   RBCDFLGS
RBCDNODE EQU   RBCDFLGS
RBCDSAVE EQU   RBCDFLGS
RBCDATCH EQU   RBCDFLGS
RBRSV009 EQU   RBCDFLGS
RBNOCELL EQU   RBCDFLGS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00070 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCBASWA EQU   JSCBSEC3+96
JSCBUFPT EQU   JSCBSEC3+92
JSCBACT  EQU   JSCBSEC3+88
JSCBSWSP EQU   JSCBSEC3+87
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCDSABQ EQU   JSCBSEC3+60
JSCBSSIB EQU   JSCBSEC3+56
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00063 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00062 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCBRV08 EQU   JSCBSEC3+11
JSCBRV07 EQU   JSCBFBYT
JSCBRV06 EQU   JSCBFBYT
JSCBRV05 EQU   JSCBFBYT
JSCBRV04 EQU   JSCBFBYT
JSCBRV03 EQU   JSCBFBYT
JSCBRV02 EQU   JSCBFBYT
JSCBADSP EQU   JSCBFBYT
JSCBRV01 EQU   JSCBFBYT
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
EDBHIRBA EQU   IDAEDB+16
EDBLORBA EQU   IDAEDB+12
EDBSTTRK EQU   IDAEDB+8
EDBLPMBA EQU   IDAEDB+4
EDBM     EQU   IDAEDB+3
@NM00237 EQU   EDBFLG1
EDBPSDS  EQU   EDBFLG1
EDBLKR   EQU   EDBFLG1
@NM00236 EQU   IDAEDB
EDBLPMBC EQU   IDAEDBHD+4
EDBLEN   EQU   IDAEDBHD+2
EDBID    EQU   IDAEDBHD
OPWBASE  EQU   OPWCFLG1
OPWUIXCI EQU   OPWUPAIX+5
@NM00235 EQU   OPWUPAIX+4
OPWUDTCI EQU   OPWUPAIX+1
@NM00234 EQU   OPWUPAIX
OPW2YPLH EQU   IDAOPWRK+585
OPWNOUPG EQU   IDAOPWRK+584
OPWPIXCI EQU   OPWPTAIX+5
@NM00233 EQU   OPWPTAIX+4
@NM00232 EQU   OPWPTAIX
OPWBIXCI EQU   OPWBSECL+5
@NM00231 EQU   OPWBSECL+4
OPWBDTCI EQU   OPWBSECL+1
@NM00230 EQU   OPWBSECL
OPWDACB  EQU   IDAOPWRK+244
@NM00229 EQU   IDAOPWRK+243
OPWBSTRN EQU   IDAOPWRK+242
OPWSTRNO EQU   IDAOPWRK+241
OPWCTCB  EQU   IDAOPWRK+220
OPWUPT   EQU   IDAOPWRK+200
OPWSWSP  EQU   OPWCATTR
@NM00228 EQU   OPWCATTR
@NM00227 EQU   OPWQ2
OPWCRA   EQU   IDAOPWRK+192
OPWPAMBL EQU   IDAOPWRK+188
OPWBAMBL EQU   IDAOPWRK+184
OPWPCON  EQU   IDAOPWRK+180
OPWBCON  EQU   IDAOPWRK+176
OPWXAMBL EQU   IDAOPWRK+168
OPWSSL   EQU   OPWSAVE+16
OPWDSL   EQU   OPWSAVE+12
OPWPSL   EQU   OPWSAVE+8
OPWCSL   EQU   OPWSAVE
OPWVFMPT EQU   OPWVFMPL+4
OPWVFMLN EQU   OPWVFMPL+1
OPWVFMSP EQU   OPWVFMPL
OPWVRG13 EQU   OPWVLSAV+4
OPWVRG12 EQU   OPWVLSAV
OPWVANCS EQU   OPWVSMWA+76
OPWVREQL EQU   OPWVGSPL+9
OPWVGFLG EQU   OPWVGSPL+8
OPWVGSPT EQU   OPWVGSPL+4
OPWVGETL EQU   OPWVGSPL+1
OPWVGSSP EQU   OPWVGSPL
OPWVSAVE EQU   OPWVSMWA+24
OPWVR13  EQU   OPWVSMWA+20
OPWVHDRE EQU   OPWVSMWA+16
OPWVCSLE EQU   OPWVSMWA+12
OPWVCSLP EQU   OPWVSMWA+8
OPWVTBLP EQU   OPWVSMWA+4
OPWVANCP EQU   OPWVSMWA
@NM00226 EQU   OPWVSMPL+14
OPWVMTCB EQU   OPWVMFLG
OPWVMNSL EQU   OPWVMFLG
OPWVMSRB EQU   OPWVMFLG
OPWVMDXK EQU   OPWVMFLG
OPWVMKE5 EQU   OPWVMFLG
OPWVMPGB EQU   OPWVMFLG
OPWVMADR EQU   OPWVSMPL+8
OPWVMLNG EQU   OPWVSMPL+5
OPWVMSP  EQU   OPWVSMPL+4
OPWDFR   EQU   OPWQ
OPWESDS  EQU   OPWQ
OPWKSDS  EQU   OPWQ
OPWUBF   EQU   OPWQ
OPWLSR   EQU   OPWQ
OPWGSR   EQU   OPWQ
OPWDDC   EQU   OPWQ
OPWBIB   EQU   IDAOPWRK+16
@NM00225 EQU   OPWFLGS4
OPWUPD   EQU   OPWFLGS4
OPWCINV  EQU   OPWFLGS4
OPWFULL  EQU   OPWFLGS4
@NM00224 EQU   OPWFLGS3
OPWNOWRK EQU   OPWFLGS3
OPWUPGOP EQU   OPWFLGS3
OPWPUPGR EQU   OPWFLGS3
OPWDAVAT EQU   OPWFLGS3
@NM00223 EQU   OPWFLGS2
OPWDUMMY EQU   OPWFLGS2
OPWAIXDT EQU   OPWFLGS2
OPWUCRA  EQU   OPWFLGS2
@NM00222 EQU   OPWFLGS1
OPWSDS   EQU   OPWVVIC
OPWID    EQU   IDAOPWRK+4
OPWLENTH EQU   IDAOPWRK+1
OPWSUBPL EQU   IDAOPWRK
@NM00221 EQU   CTEXTENT+20
CTRBAEND EQU   CTEXTENT+16
CTRBABEG EQU   CTEXTENT+12
CTNOTRKS EQU   CTEXTENT+10
CTHHEND  EQU   CTABSEND+2
CTCCEND  EQU   CTABSEND
CTHHBEG  EQU   CTABSBEG+2
CTCCBEG  EQU   CTABSBEG
@NM00220 EQU   CTEXTENT+1
CTEXTFLG EQU   CTEXTENT
CTKEY    EQU   CTKEYENT+16
CTKHARBA EQU   CTKEYENT+12
CTKHURBA EQU   CTKEYENT+8
CTKHKRBA EQU   CTKEYENT+4
CTKRELNO EQU   CTKEYENT+2
CTNOKEXT EQU   CTKEYENT+1
CTPRFMT  EQU   CTKEYFLG
CTSSWDTA EQU   CTKEYFLG
CTKEYEN1 EQU   CTVOLENT+20
@NM00219 EQU   CTVOLENT+18
@NM00218 EQU   CTVOLENT+2
CTOFLOW  EQU   CTVOLFLG
@NM00217 EQU   CTINFO+214
CTEXEX   EQU   CTINFO+66
CTHSHCAT EQU   CTINFO+50
@NM00216 EQU   CTINFO+49
CTSBYTRK EQU   CTINFO+42
CTSBYTAU EQU   CTINFO+34
CTSBLKTR EQU   CTINFO+26
CTBLKTR  EQU   CTINFO+22
CTSTRKAU EQU   CTINFO+18
CTTRKAU  EQU   CTINFO+14
CTVIRT   EQU   CTDEV2
CTBRPS   EQU   CTDEV2
@NM00215 EQU   CTDEV2
@NM00214 EQU   CTDEVTYP
@NM00213 EQU   CTINFO+4
CTUPD    EQU   CTAUTH
CTCINV   EQU   CTAUTH
CTFULL   EQU   CTAUTH
@NM00212 EQU   CTSHROP
CTSHARE  EQU   CTSHROP
CTINDX   EQU   CTATTRB
CTCYL    EQU   CTATTRB
CTTOVFL  EQU   CTATTRA
CTTEMPEX EQU   CTATTRA
@NM00211 EQU   CTATTRA
CTERASE  EQU   CTATTRA
CTRELOP  EQU   CTATTRA
CTUNIQ   EQU   CTATTRA
CTAMDSPD EQU   CTATTRA
AMATIOE  EQU   AMBWORK+8
AMATIOT  EQU   AMBWORK+4
AMACATLG EQU   AMBWORK
BLPBFLCT EQU   BLPBUFL+6
@NM00210 EQU   BLPBUFL+5
@NM00209 EQU   BLPBRLFG
BLPBFLST EQU   BLPBRLFG
BLPBUFSZ EQU   BLPBUFL
BLPERFLG EQU   IDABLPRM+51
@NM00208 EQU   IDABLPRM+49
BLPOFLGS EQU   IDABLPRM+48
@NM00207 EQU   IDABLPRM+28
BLPDSORG EQU   BLPIOACB+3
@NM00206 EQU   BLPIOACB
BLPGAD   EQU   BLPCORE+5
BLPGSP   EQU   BLPCORE+4
BLPGSZ   EQU   BLPCORE+1
BLPGPG   EQU   BLPGFLG
BLPGREQ  EQU   BLPGFLG
BLPOACB  EQU   IDABLPRM+13
BLPOCODE EQU   IDABLPRM+12
BLPFRSTR EQU   BLPFLAG2
BLPFIOSR EQU   BLPFLAG2
BLPFPRIM EQU   BLPFLAG2
BLPFSTAD EQU   BLPFLAG1
BLPFBFRF EQU   BLPFLAG1
BLPFIOBF EQU   BLPFLAG1
BLPFGSR  EQU   BLPFLAG1
BLPFLSR  EQU   BLPFLAG1
BLPFDEL  EQU   BLPFLAG1
BLPFBLD  EQU   BLPFLAG1
BLPFDBDC EQU   BLPFLAG1
BLPSTRNO EQU   IDABLPRM+9
BLPKEYLN EQU   IDABLPRM+8
BLPIOPLH EQU   BLPUACB
@NM00205 EQU   IDABLPRM+2
BLPACBST EQU   IDABLPRM+1
BLPACBID EQU   IDABLPRM
SFIMODID EQU   IDASFI+10
SFIRSNCD EQU   IDASFI+9
@NM00204 EQU   IDASFI+8
@NM00203 EQU   IDASFI+1
SFIDESC  EQU   IDASFI
@NM00202 EQU   IDAVIRT+22
VIRTLENG EQU   IDAVIRT+20
VIRTEXT  EQU   IDAVIRT+12
VIRTUCB  EQU   IDAVIRT+8
@NM00201 EQU   IDAVIRT+2
VIRTMNT  EQU   VIRTFLAG
VIRTBEXT EQU   VIRTFLAG
VIRTBUCB EQU   VIRTFLAG
VIRTNOUN EQU   VIRTFLAG
VIRTINHB EQU   VIRTFLAG
@NM00200 EQU   IDAVIRT
ESLIO    EQU   ESLRNAME+7
ESLACBAD EQU   ESLRNAME+3
ESLCINBR EQU   ESLRNAME
@NM00199 EQU   IDAESL+18
IOSEND   EQU   IOSB+108
IOSSKR   EQU   IOSEEKA+7
IOSSKH2  EQU   IOSSKHH+1
IOSSKH1  EQU   IOSSKHH
IOSSKCC  EQU   IOSCCHH
IOSSKBB  EQU   IOSEEKA+1
IOSSKM   EQU   IOSEEKA
IOSEEK   EQU   IOSB+92
IOSMDM   EQU   IOSB+91
IOSMDB   EQU   IOSB+90
IOSCKEY7 EQU   IOSCKEY
IOSCKEY6 EQU   IOSCKEY
IOSCKEY5 EQU   IOSCKEY
IOSCKEY4 EQU   IOSCKEY
@NM00195 EQU   IOSCKEY
IOSCUDEV EQU   IOSPATH+1
@NM00194 EQU   IOSCHN
IOSPATH3 EQU   IOSCHN
IOSPATH2 EQU   IOSCHN
IOSEXP   EQU   IOSCHN
IOSGDP   EQU   IOSCHN
IOSAFF   EQU   IOSB+85
IOSRSS1B EQU   IOSB+84
IOSDSID  EQU   IOSB+80
IOSVST   EQU   IOSB+76
IOSRST   EQU   IOSB+72
IOSDIE   EQU   IOSB+68
IOSABN   EQU   IOSB+64
IOSNRM   EQU   IOSB+60
IOSPCI   EQU   IOSB+56
IOSERP   EQU   IOSB+52
IOSPCHN  EQU   IOSB+48
IOSSNS   EQU   IOSB+42
IOSAPMSK EQU   IOSB+40
IOSRES4A EQU   IOSB+36
IOSUSE   EQU   IOSB+32
IOSSRB   EQU   IOSB+28
IOSCSWRC EQU   IOSCSW+5
IOSTSB   EQU   IOSTATUS+1
IOSTSA   EQU   IOSTATUS
IOSCSWCA EQU   IOSCSW
IOSCC    EQU   @NM00193
IOSUCB   EQU   IOSB+16
IOSOPT2X EQU   IOSOPT2
IOSIGP   EQU   IOSOPT2
IOSHTP   EQU   IOSOPT2
IOSRELSE EQU   IOSOPT
IOSAPR   EQU   IOSOPT
IOSTSLL  EQU   IOSOPT
IOSNERP  EQU   IOSOPT
IOSPSLL  EQU   IOSOPT
IOSQISCE EQU   IOSOPT
IOSDEP   EQU   IOSOPT
IOSBYP   EQU   IOSOPT
IOSCOD   EQU   IOSB+13
IOSPKY7  EQU   IOSPKEY
IOSPGDPX EQU   IOSPKEY
IOSIDR   EQU   IOSPKEY
IOSLCL   EQU   IOSPKEY
@NM00192 EQU   IOSPKEY
IOSPGAD  EQU   IOSB+8
IOSASID  EQU   IOSB+6
IOSPRLVL EQU   IOSB+5
IOSDVRID EQU   IOSB+4
IOSPROC  EQU   IOSB+3
IOSFLC7  EQU   IOSFLC
IOSCTCNR EQU   IOSFLC
IOSRWAIT EQU   IOSFLC
IOSTP    EQU   IOSFLC
IOSCC3WE EQU   IOSFLC
IOSVERIF EQU   IOSDVALT
IOSDVMNT EQU   IOSFLC
IOSLOG   EQU   IOSFLB
IOSBDCST EQU   IOSFLB
IOSMSG   EQU   IOSFLB
IOSFLB4  EQU   IOSFLB
IOSFLB3  EQU   IOSFLB
IOSNOTRS EQU   IOSFLB
IOSSDR   EQU   IOSFLB
IOSDIESE EQU   IOSFLB
IOSIOSB  EQU   IOSFLA
IOSDOM   EQU   IOSFLA
IOSEX    EQU   IOSFLA
IOSSMDB  EQU   IOSFLA
IOSSMDA  EQU   IOSFLA
IOSERR   EQU   IOSFLA
IOSCCHN  EQU   IOSACHN
IOSDCHN  EQU   IOSACHN
IOMSTCB  EQU   IDAIOMB+128
IOMSRBP  EQU   IDAIOMB+124
IOMUFLD  EQU   IDAIOMB+120
IOMSAVEF EQU   IOMSAVER+60
IOMSAVEE EQU   IOMSAVER+56
IOMSAVED EQU   IOMSAVER+52
IOMSAVEC EQU   IOMSAVER+48
IOMSAVEB EQU   IOMSAVER+44
IOMSAVEA EQU   IOMSAVER+40
IOMSAVE9 EQU   IOMSAVER+36
IOMSAVE8 EQU   IOMSAVER+32
IOMSAVE7 EQU   IOMSAVER+28
IOMSAVE6 EQU   IOMSAVER+24
IOMSAVE5 EQU   IOMSAVER+20
IOMSAVE4 EQU   IOMSAVER+16
IOMSAVE3 EQU   IOMSAVER+12
IOMSAVE2 EQU   IOMSAVER+8
IOMSAVE1 EQU   IOMSAVER+4
IOMSAVE0 EQU   IOMSAVER
IOMNSEG  EQU   IDAIOMB+50
IOMNBUF  EQU   IDAIOMB+48
IOMNMOD  EQU   IDAIOMB+46
IOMLOCK  EQU   IDAIOMB+45
IOMPFERR EQU   IDAIOMB+44
IOMCKEY  EQU   IDAIOMB+43
IOMSR    EQU   IOMSTIND
IOMSRBM  EQU   IOMSTIND
IOMSLOC  EQU   IOMSTIND
IOMLLOCK EQU   IOMSTIND
IOMEOVXC EQU   IOMSTIND
IOMEOVTS EQU   IOMSTIND
IOMEOVW  EQU   IOMSTIND
IOMAMUSE EQU   IOMSTIND
@NM00191 EQU   IOMFL+1
IOMIRBSW EQU   IOMFL+1
IOMEEXIT EQU   IOMFL+1
@NM00190 EQU   IOMFL+1
IOMCPRB  EQU   IOMFL+1
IOMDDR   EQU   IOMFL+1
IOMCSW   EQU   IOMFL
IOMPGFIX EQU   IOMFL
IOMADERR EQU   IOMFL
IOMCBERR EQU   IOMFL
@NM00189 EQU   IOMFL
IOMPURGE EQU   IOMFL
IOMAE    EQU   IOMAPEND
IOMNE    EQU   IOMAPEND
IOMPGAD  EQU   IDAIOMB+32
IOMVSL   EQU   IDAIOMB+28
IOMECBPT EQU   IDAIOMB+24
IOMIQE   EQU   IDAIOMB+20
IOMAMB   EQU   IDAIOMB+16
IOMPLH   EQU   IDAIOMB+12
IOMCPA   EQU   IDAIOMB+8
IOMBUFC  EQU   IDAIOMB+4
IOMBID   EQU   IDAIOMB
VGTTCORE EQU   IDAVGTT+32
@NM00182 EQU   IDAVGTT+28
VGTTPSB  EQU   IDAVGTT+24
VGTTVUSE EQU   IDAVGTT+20
VGTTBIB  EQU   IDAVGTT+16
VGTTNEXT EQU   IDAVGTT+12
VGTTSIZE EQU   IDAVGTT+8
VGTTSP   EQU   IDAVGTT+7
VGTTGSRK EQU   IDAVGTT+6
@NM00181 EQU   IDAVGTT+5
@NM00180 EQU   VGTTTYPE
VGTTCBIC EQU   VGTTTYPE
VGTTOPEN EQU   VGTTTYPE
VGTTCTLG EQU   VGTTTYPE
VGTTLSR  EQU   VGTTTYPE
VGTTGSR  EQU   VGTTTYPE
VGTTSDS  EQU   VGTTTYPE
VGTTID   EQU   IDAVGTT
@NM00179 EQU   IDAPDPRM+35
PDPNOMSG EQU   PDPMSGFL
PDPNOTRC EQU   PDPMSGFL
PDPSPACE EQU   PDPMSGFL
PDPNOTFC EQU   PDPMSGFL
PDPKEY   EQU   IDAPDPRM+32
PDPCTACB EQU   IDAPDPRM+28
PDPVLSER EQU   IDAPDPRM+16
PDPTIOT  EQU   IDAPDPRM+12
PDPUCB   EQU   IDAPDPRM+8
PDPACB   EQU   IDAPDPRM+4
PDPCALL  EQU   IDAPDPRM
JFCBXNXT EQU   JFCBX+172
@NM00178 EQU   JFCBX+144
JFCBXDEV EQU   JFCBX+140
JFCBXNAM EQU   JFCBX+96
@NM00177 EQU   JFCBX+94
JFCBXVOL EQU   JFCBX+4
@NM00176 EQU   JFCBX+3
JFCBXTTR EQU   JFCBX
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00172 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCAMSTR EQU   JFCBFRID+2
JFCAMCRO EQU   JFCBFRID
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
APPNAMID EQU   APPNMTBL+24
APPOFFST EQU   APPENTRY+2
APPCOUNT EQU   APPENTRY
APPSIZE  EQU   APPNMTBL+2
APPBAL   EQU   APPNMTBL
WTGCORE  EQU   WTGENTRY+5
WTGETTR  EQU   WTGIDTTR+2
WTGEID   EQU   WTGIDTTR
WTGOPD   EQU   WTGPATHS+1
WTGRECHK EQU   WTGPATHS+1
WTGTSENQ EQU   WTGPATHS+1
@NM00169 EQU   WTGPATHS+1
WTGTRACE EQU   WTGPATHS+1
@NM00168 EQU   WTGPATHS
WTGJFCBW EQU   WTGPATHS
WTGSMF   EQU   WTGPATHS
WTGTCOS  EQU   WTGPATHS
WTGNSL   EQU   WTGPATHS
WTGPRLSE EQU   WTGPATHS
WTGLNG   EQU   WTG+29
WTGTXTLN EQU   WTGAREA+27
WTGMODSZ EQU   WTGAREA+24
WTGATTRB EQU   WTGAREA+22
@NM00167 EQU   WTGAREA+20
@NM00166 EQU   WTGAREA+12
WTGMODEP EQU   WTGAREA+8
WTGMODID EQU   WTGMODNM+6
@NM00165 EQU   WTGMODNM
DSMADTW6 EQU   DSMADTRL+20
DSMADTW5 EQU   DSMADTRL+16
DSMADTW4 EQU   DSMADTRL+12
DSMADTW3 EQU   DSMADTRL+8
DSMADTW2 EQU   DSMADTRL+4
DSMADTB4 EQU   DSMADTW1+3
DSMADTB3 EQU   DSMADTW1+2
@NM00164 EQU   DSMADTB2
DSMDSNE  EQU   DSMADTB2
DSMTIOTE EQU   DSMADTB2
DSMSMCE  EQU   DSMADTB2
DSMVTOCR EQU   DSMADTB2
DSMASWAP EQU   DSMADTB1
DSMUCBAL EQU   DSMADTB1
DSMRPSAP EQU   DSMADTB1
DSMLOCK  EQU   DSMADTB1
@NM00163 EQU   DSMADTB1
DSMVIO   EQU   DSMADTB1
DSMISAM  EQU   DSMADTB1
RRFWORK  EQU   RRPLIST+20
RRMLRTRY EQU   RRPLIST+16
RRUCBPTR EQU   RRXRETRY
RR1RETRY EQU   RRPLIST+8
RR1WRKAR EQU   RRPLIST+4
@NM00162 EQU   RRFLAGS3
RRFTERM  EQU   RRFLAGS3
RRFFCEXC EQU   RRFLAGS3
RRFFINFC EQU   RRFLAGS3
RRFNRTCA EQU   RRFLAGS3
@NM00161 EQU   RRFLAGS3
RRFENQUL EQU   RRFLAGS2
RRFPRDET EQU   RRFLAGS2
@NM00160 EQU   RRFLAGS2
RRFQMNGR EQU   RRFLAGS2
RRFENQPW EQU   RRFLAGS2
@NM00159 EQU   RRFLAGS2
RRFFIN1  EQU   RRFLAGS2
RRFTRACE EQU   RRFLAGS1
RRFSMF   EQU   RRFLAGS1
RRFNSL   EQU   RRFLAGS1
RRFAMSTR EQU   RRFLAGS1
RRFAMEXR EQU   RRFLAGS1
RRFAMEXG EQU   RRFLAGS1
RRFUSREX EQU   RRFLAGS1
@NM00158 EQU   RRFLAGS1
RRFRJFCB EQU   RRFUNCTN
RRFDADSM EQU   RRFUNCTN
DXDCBLST EQU   USERPRML
RWALIST  EQU   RWARESWA+12
RWAPARM  EQU   RWAPREFX+8
RWATRBUF EQU   RWAPREFX+4
RWATRACE EQU   RWAPREFX
IECQMNGR EQU   IECEXTPR+92
IECMSGQA EQU   IECEXTPR+88
IECDCBNO EQU   IECUPRML
IECRRPRM EQU   IECEXTPR+76
IECREGSV EQU   IECEXTPR
IECCORP2 EQU   IECPREFX+28
IECCORP1 EQU   IECPREFX+24
IECCORPS EQU   IECPREFX+20
IECCORSP EQU   IECPREFX+19
@NM00157 EQU   IECPREFX+17
IECCORKY EQU   IECPREFX+16
IECCORAD EQU   IECPREFX+12
IECCORLN EQU   IECPREFX+8
@NM00156 EQU   IECPREFX+4
IECCORID EQU   IECPREFX
DXATEXB2 EQU   DXATEXC2
DXEXHASP EQU   DXATEXB1
DXATCOM4 EQU   FORCORE+600
DXATCOM3 EQU   FORCORE+596
@NM00152 EQU   DXATCOM2+3
@NM00151 EQU   DXATALL
DXATSWAP EQU   DXATALL
DXATFC   EQU   DXATALL
@NM00150 EQU   DXATOPEN
DXATDFIN EQU   DXATOPEN
DXATDSIN EQU   DXATOPEN
DXATMODM EQU   DXATOPEN
DXATMODE EQU   DXATOPEN
DXATMODS EQU   DXATOPEN
DXATIGN  EQU   DXATOPEN
DXATVCAT EQU   DXATEOV
DXATDADM EQU   DXATEOV
DXATREMT EQU   DXATEOV
DXATDNEW EQU   DXATEOV
DXATDFRE EQU   DXATEOV
DXATDCHN EQU   DXATEOV
DXATNVOL EQU   DXATEOV
DXATCCAT EQU   DXATEOV
DXATRDDB EQU   DXATDACC
DXATEOF  EQU   DXATDACC
@NM00149 EQU   DXATDACC
DXATSMF  EQU   DXATDACC
DXATUPDB EQU   DXATDACC
DXATDRCT EQU   DXATDACC
DXATTRAK EQU   DXATDACC
DXATF1CE EQU   DXATDACC
DXATNSL  EQU   DXATOUTA
DXATTTM2 EQU   DXATOUTA
DXATTTM1 EQU   DXATOUTA
DXATTRL2 EQU   DXATOUTA
DXATTRL1 EQU   DXATOUTA
DXATDATM EQU   DXATOUTA
DXATHDTM EQU   DXATOUTA
DXATVLHD EQU   DXATOUTA
DXATCLOS EQU   DXATCOM1+1
DXATSRET EQU   DXATGENS
DXATVCIG EQU   DXATVGIV
DXATVTMG EQU   DXATVGIV
DXATVSMG EQU   DXATVGIV
DXATJFCB EQU   DXATGENS
DXATDISP EQU   DXATGENS
DXATREFR EQU   DXATGENS
DXATDMCT EQU   DXATGENS
DXMSGADR EQU   FORCORE+584
DXPRPARC EQU   FORCORE+580
DXUDCBML EQU   FORCORE+578
DXUDCBPL EQU   FORCORE+576
DXPACBAD EQU   DXPDCBAD+1
@NM00148 EQU   DXPDCBAD
DXUACBAD EQU   DXUDCBAD+1
@NM00147 EQU   DXUDCBAD
DXUCBSVV EQU   DXUCBSAV+1
@NM00146 EQU   DXUCBSAV
DXUCBADR EQU   FORCORE+560
DXTIOTAD EQU   FORCORE+556
DXDEBXAD EQU   FORCORE+552
DXDSAB   EQU   FORCORE+548
DXDSABAD EQU   FORCORE+544
DXDSABQD EQU   FORCORE+540
DXJSCBAD EQU   FORCORE+536
DXTCBADR EQU   FORCORE+532
DXASCBAD EQU   FORCORE+528
DXEXTSW  EQU   FORCORE+527
DXWKEYSV EQU   FORCORE+525
DXUNITOF EQU   FORCORE+522
DXNOUNIT EQU   FORCORE+520
DXVOLSEQ EQU   FORCORE+518
DXVOLMT3 EQU   DXVOLSR3
DXVOLMT2 EQU   DXVOLSR2
DXVOLMT1 EQU   DXVOLSR1
DXWORK4  EQU   FORCORE+496
DXWORK3  EQU   FORCORE+492
DXWORK2  EQU   FORCORE+488
DXWORK1  EQU   FORCORE+484
DXWORK   EQU   FORCORE+480
@NM00145 EQU   FORCORE+464
DXCCW11  EQU   DXCCW+80
DXCCW10  EQU   DXCCW+72
DXCCW9   EQU   DXCCW+64
DXCCW7   EQU   DXCCW+48
DXCCW6   EQU   DXCCW+40
DXCCW4   EQU   DXCCW+24
DXCCW3   EQU   DXCCW+16
DXCCW2   EQU   DXCCW+8
DXCCW1   EQU   DXCCW
DXDCBDEB EQU   DXDCB+44
@NM00144 EQU   DXDCB+24
DXDEBDCB EQU   DXDCB+20
@NM00143 EQU   DXDCB
DXDEB    EQU   DXDAADDR+4
@NM00142 EQU   DXDAADDR
DXECB    EQU   FORCORE+276
DSCCORE  EQU   FORCORE+96
DXLBL    EQU   DXDSCB
CBSVUSE  EQU   CBSVSRT
CBSCRTCB EQU   AMCBS+28
CBSCRACA EQU   AMCBS+24
CBSCAXCN EQU   AMCBS+20
CBSMCUCB EQU   CBSCMP
CBSCBP   EQU   AMCBS+12
CBSACB   EQU   AMCBS+8
CBSMCSTA EQU   AMCBS+4
CBSSIZ   EQU   AMCBS+2
CBSID    EQU   AMCBS
VSRTCSLN EQU   VSRTCSL+5
VSRTCSSP EQU   VSRTCSL+4
VSRTCSAD EQU   VSRTCSL+1
VSRTCSBH EQU   VSRTCSLF
VSRTCSIO EQU   VSRTCSLF
VSRTCSPL EQU   VSRTCSLF
VSRTCSWS EQU   VSRTCSLF
VSRTCSVG EQU   VSRTCSPF
VSRTCSGT EQU   VSRTCSBF
VSRTCSVS EQU   VSRTCSLF
VSRTCSFX EQU   VSRTCSLF
VSRTNEXT EQU   IDAVSRT+40
VSRTASCB EQU   IDAVSRT+36
VSRTVIOT EQU   IDAVSRT+32
VSRTWAH  EQU   IDAVSRT+28
VSRTCPAH EQU   IDAVSRT+24
VSRTBUFH EQU   IDAVSRT+20
VSRTPLHH EQU   IDAVSRT+16
VSRTSTRN EQU   IDAVSRT+15
@NM00141 EQU   VSRTFLGS
VSRTBFRF EQU   VSRTFLGS
VSRTIOBF EQU   VSRTFLGS
VSRTLSRF EQU   VSRTFLGS
VSRTGSRF EQU   VSRTFLGS
VSRTEOV  EQU   IDAVSRT+8
VSRTID   EQU   IDAVSRT+4
VSRTLEN  EQU   IDAVSRT+2
VSRTKEY  EQU   IDAVSRT+1
VSRTBKID EQU   IDAVSRT
@NM00140 EQU   VMTVOL+5
@NM00139 EQU   VMTVFLG1
VMTOPEN  EQU   VMTVFLG1
VMTDVTYP EQU   VMTDEV+1
VMTDVOPT EQU   VMTDEV
@NM00138 EQU   IDAVMT+10
VMTLEN   EQU   VMTHDR+2
@NM00137 EQU   VMTHDR+1
VMTID    EQU   VMTHDR
VATAMBL  EQU   IDAVAT+28
VATNAE   EQU   IDAVAT+24
@NM00136 EQU   IDAVAT+22
VATENO   EQU   VATVC+1
VATVRT   EQU   VATVC
VATPAMBL EQU   IDAVAT+16
VATVUSE  EQU   VATVSRT
VATNEXT  EQU   IDAVAT+4
VATLEN   EQU   VATHDR+2
@NM00135 EQU   VATHDR+1
VATID    EQU   VATHDR
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBFCBPE EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBMDRBA EQU   UCBMDRBF+1
UCBRV075 EQU   UCBMDRBF
UCBRV074 EQU   UCB3800X+32
UCBIMAGE EQU   UCB3800X+28
UCBFCBNM EQU   UCB3800X+24
UCBCHAR4 EQU   UCB3800X+20
UCBCHAR3 EQU   UCB3800X+16
UCBCHAR2 EQU   UCB3800X+12
UCBCHAR1 EQU   UCB3800X+8
UCBCGMID EQU   UCB3800X+4
UCBBRSTA EQU   UCBACTIV
UCBRV063 EQU   UCBACTIV
UCBRV062 EQU   UCBACTIV
UCBRV061 EQU   UCBACTIV
UCBRV060 EQU   UCBACTIV
UCBRV059 EQU   UCBACTIV
UCBRV058 EQU   UCBACTIV
UCBRV057 EQU   UCBACTIV
UCBRV050 EQU   UCB3800X+2
UCBCGMNO EQU   UCB3800X+1
UCBRV083 EQU   UCBOPTNS
UCBBRSTR EQU   UCBOPTNS
UCBRV056 EQU   UCBOPTNS
UCBRV055 EQU   UCBOPTNS
UCBRV054 EQU   UCBOPTNS
UCBRV053 EQU   UCBOPTNS
UCBRV052 EQU   UCBOPTNS
UCBRV051 EQU   UCBOPTNS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBERLOG EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBINHIO EQU   UCBFLP1
UCBNSWAP EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00134
UCBHALI  EQU   @NM00134
UCBRSV09 EQU   @NM00134
UCBRSV08 EQU   @NM00134
UCBRSV07 EQU   @NM00134
UCBRSV06 EQU   @NM00134
UCBRSV05 EQU   @NM00134
UCBRSV04 EQU   @NM00134
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3DACC EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBSIGP  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBUA    EQU   UCBCHAN+1
UCBCHA   EQU   UCBCHAN
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBONLI  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBMMSGP EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBDUC   EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00131 EQU   UCB
@NM00130 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00129 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAFX EQU   TCBSTAWA
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00128 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00127 EQU   TCBPMASK
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00126 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
@NM00125 EQU   RPLRBAR+3
@NM00124 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00123 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
@NM00122 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
SVRBEND  EQU   RBSECT+192
RBFEPARM EQU   RBSECT+168
SIRBEND  EQU   RBSECT+168
RBRSV158 EQU   RBRSV150
RBRSV157 EQU   RBRSV150
RBRSV156 EQU   RBRSV150
RBRSV155 EQU   RBRSV150
RBRSV154 EQU   RBRSV150
RBRSV153 EQU   RBRSV150
RBRSV152 EQU   RBRSV150
RBRSV151 EQU   RBRSV150
RBRSV149 EQU   RBSECT+166
RBRSV148 EQU   RBSECT+164
RBRSV169 EQU   RBSDATA+3
RBSID    EQU   RBSDATA+2
RBSPKEY  EQU   RBSDATA+1
RBRSV168 EQU   RBSFLG3
RBSTERMO EQU   RBSFLG3
RBSBRNTR EQU   RBSFLG3
RBSPRNTR EQU   RBSFLG3
RBSCNCEL EQU   RBSFLG3
RBSRECRD EQU   RBSFLG3
RBSTERMI EQU   RBSFLG3
RBRSV167 EQU   RBSFLG3
RBSOWNRA EQU   RBSOWNR+1
RBSSUPER EQU   RBSFLGS2
RBSKEY0  EQU   RBSFLGS2
RBRSV166 EQU   RBSFLGS2
RBRSV165 EQU   RBSFLGS2
RBSINUSE EQU   RBSFLGS2
RBRSV164 EQU   RBSFLGS2
RBSXCTL2 EQU   RBSFLGS2
RBRSV163 EQU   RBSFLGS2
RBSPARMA EQU   RBSPARM+1
RBSHALT  EQU   RBSIOPRC
RBSNOIOP EQU   RBSIOPRC
RBSASYNC EQU   RBSFLGS1
RBRSV162 EQU   RBSFLGS1
RBSESTAE EQU   RBSFLGS1
RBSDUMMY EQU   RBSFLGS1
RBSSTAR  EQU   RBSFLGS1
RBSSTAI  EQU   RBSFLGS1
RBSEXIT  EQU   RBSCBB+4
RBSCHAIN EQU   RBSCBB
TIRBEND  EQU   @NM00120+8
PRBEND   EQU   @NM00120+8
RBRSV146 EQU   RBRSV138
RBRSV145 EQU   RBRSV138
RBRSV144 EQU   RBRSV138
RBRSV143 EQU   RBRSV138
RBRSV142 EQU   RBRSV138
RBRSV141 EQU   RBRSV138
RBRSV140 EQU   RBRSV138
RBRSV139 EQU   RBRSV138
RBRSV137 EQU   @NM00120+6
RBRSV136 EQU   @NM00120+4
RBRSV135 EQU   @NM00120
@NM00119 EQU   RBSECT+32
@NM00118 EQU   @NM00116+1
RBSCF    EQU   @NM00117
RBPGMQ1  EQU   RBPGMQ+1
@NM00115 EQU   RBPGMQ
@NM00114 EQU   RBSECT+16
@NM00113 EQU   @NM00109
@NM00112 EQU   @NM00109
RBIQETP  EQU   @NM00109
RBUSIQE  EQU   RBETXR
RBATTN   EQU   @NM00109
@NM00111 EQU   @NM00109
@NM00110 EQU   @NM00109
RBPMSVRB EQU   @NM00107
RBATNXIT EQU   @NM00107
@NM00108 EQU   @NM00107
RBWAITP  EQU   @NM00107
RBFNSVRB EQU   RBTRSVRB
RBFTP    EQU   @NM00107
RBSIZE   EQU   RBSECT+8
RBABOPSW EQU   RBSECT+4
RBPPSAV1 EQU   RBPPSAV+1
@NM00105 EQU   RBPPSAV
RBPRFXND EQU   RBPREFIX+64
RBINTCOD EQU   RBINTCDA+1
RBINLNTH EQU   RBINTCDA
RBWCSA   EQU   RBPREFIX+60
RBRSV004 EQU   RBPREFIX+57
RBSSSYN  EQU   RBFLAGS1
RBSCB    EQU   RBFLAGS1
RBLONGWT EQU   RBFLAGS1
RBASIR   EQU   RBFLAGS1
RBRSV159 EQU   RBFLAGS1
RBABEND  EQU   RBFLAGS1
RBXWAIT  EQU   RBFLAGS1
RBSLOCK  EQU   RBFLAGS1
RBRTRAN  EQU   RBRTPSW2+4
RBRTINCD EQU   RBRTICIL+2
RBRTILC  EQU   RBRTICIL+1
RBRSV160 EQU   RBRTICIL
RBRTPSW1 EQU   RBRTOPSW
RBRSV062 EQU   RBRSV054
RBRSV061 EQU   RBRSV054
RBRSV060 EQU   RBRSV054
RBRSV059 EQU   RBRSV054
RBRSV058 EQU   RBRSV054
RBRSV057 EQU   RBRSV054
RBRSV056 EQU   RBRSV054
RBRSV055 EQU   RBRSV054
RBRSV053 EQU   RBPREFIX+38
RBRSV052 EQU   RBPREFIX+36
RBRSV051 EQU   RBPREFIX+32
RBPRFXST EQU   RBPREFIX+32
RBRSV050 EQU   RBPREFIX+28
RBRSV049 EQU   RBRSV041
RBRSV048 EQU   RBRSV041
RBRSV047 EQU   RBRSV041
RBRSV046 EQU   RBRSV041
RBRSV045 EQU   RBRSV041
RBRSV044 EQU   RBRSV041
RBRSV043 EQU   RBRSV041
RBRSV042 EQU   RBRSV041
RBRSV040 EQU   RBPREFIX+26
RBRSV039 EQU   RBPREFIX+24
RBRSV038 EQU   RBPREFIX+20
RBRSV037 EQU   RBPREFIX+16
RBRSV036 EQU   RBRSV028
RBRSV035 EQU   RBRSV028
RBRSV034 EQU   RBRSV028
RBRSV033 EQU   RBRSV028
RBRSV032 EQU   RBRSV028
RBRSV031 EQU   RBRSV028
RBRSV030 EQU   RBRSV028
RBRSV029 EQU   RBRSV028
RBRSV027 EQU   RBRSV019
RBRSV026 EQU   RBRSV019
RBRSV025 EQU   RBRSV019
RBRSV024 EQU   RBRSV019
RBRSV023 EQU   RBRSV019
RBRSV022 EQU   RBRSV019
RBRSV021 EQU   RBRSV019
RBRSV020 EQU   RBRSV019
RBRSV018 EQU   RBPREFIX+13
RBRSV017 EQU   RBPREFIX+12
RBSRV016 EQU   RBPREFIX+11
RBRSV015 EQU   RBPREFIX+10
RBRSV014 EQU   RBPREFIX+8
RBRSV013 EQU   RBPREFIX+4
RBRSV012 EQU   RBPREFIX
RBEXSAVE EQU   XRBESA
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00104 EQU   RBBASIC+24
RBOPSWPS EQU   RBOPSWB2
@NM00103 EQU   RBOPSWB2
@NM00102 EQU   XRBPSW
@NM00101 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00100 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00099 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00098 EQU   XSTAB1
@NM00097 EQU   RBBASIC+8
@NM00096 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00095 EQU   RBPRFX
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00069 EQU   IDAPLH+265
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00068 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHRBUFC EQU   IDAPLH+192
PLHIBUFC EQU   IDAPLH+188
PLHNRBA  EQU   IDAPLH+184
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00067 EQU   IDAPLH+172
@NM00066 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHAMB   EQU   IDAPLH+108
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHRDFP  EQU   IDAPLH+68
PLHFSP   EQU   IDAPLH+64
PLHRECP  EQU   IDAPLH+60
PLHNBUFC EQU   IDAPLH+56
PLHDBUFC EQU   IDAPLH+52
PLHLRECL EQU   IDAPLH+48
@NM00065 EQU   IDAPLH+43
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00064 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
PLHSR    EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHASKBF EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
JSCBCSCB EQU   JSCBSEC1+68
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00061 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00060 EQU   IEZJSCB
EXLEADDR EQU   EXLEXITP
@NM00059 EQU   EXLENFL
EXLLNK   EQU   EXLENFL
EXLACTM  EQU   EXLENFL
EXLSPEC  EQU   EXLENFL
EXLOPNP  EQU   EXLCOMN+36
@NM00058 EQU   EXLOPNF
EXLOPNK  EQU   EXLOPNF
EXLOPNA  EQU   EXLOPNF
EXLOPNS  EQU   EXLOPNF
EXLJRNP  EQU   EXLCOMN+31
@NM00057 EQU   EXLJRNF
EXLJRNK  EQU   EXLJRNF
EXLJRNA  EQU   EXLJRNF
EXLJRNS  EQU   EXLJRNF
EXLLGNP  EQU   EXLCOMN+26
@NM00056 EQU   EXLLGNF
EXLLGNK  EQU   EXLLGNF
EXLLGNA  EQU   EXLLGNF
EXLLGNS  EQU   EXLLGNF
EXLUPADP EQU   EXLSCIPP
@NM00055 EQU   EXLUPADF
EXLUPADK EQU   EXLSCIPK
EXLUPADA EQU   EXLSCIPA
EXLUPADS EQU   EXLSCIPS
EXLLERP  EQU   EXLCOMN+16
@NM00054 EQU   EXLLERF
EXLLERK  EQU   EXLLERF
EXLLERA  EQU   EXLLERF
EXLLERS  EQU   EXLLERF
EXLSYNP  EQU   EXLCOMN+11
@NM00053 EQU   EXLSYNF
EXLSYNK  EQU   EXLSYNF
EXLSYNA  EQU   EXLSYNF
EXLSYNS  EQU   EXLSYNF
EXLEODP  EQU   EXLCOMN+6
@NM00052 EQU   EXLEODF
EXLEODK  EQU   EXLEODF
EXLEODA  EQU   EXLEODF
EXLEODS  EQU   EXLEODF
@NM00051 EQU   EXLCOMN+4
EXLLEN2  EQU   EXLLEN
EXLSTYP  EQU   EXLCOMN+1
EXLID    EQU   EXLCOMN
DEBXSAMB EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBESMVR EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00050 EQU   DEBACS08+12
@NM00049 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00048 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00047 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBUCBA  EQU   DEBUCBAD+1
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBDCBB  EQU   DEBDCBAD+1
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBDEBB  EQU   DEBDEBAD+1
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00046 EQU   CVTFIX+248
@NM00045 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00044 EQU   CMBPTRS+52
CMBFXDPT EQU   CMBPTRS+48
CMBPUSPT EQU   CMBPTRS+44
CMBPSTPT EQU   CMBPTRS+40
CMBEDBPT EQU   CMBPTRS+36
CMBDEBPT EQU   CMBPTRS+32
CMBUBFPT EQU   CMBPTRS+28
CMBBFRPT EQU   CMBPTRS+24
CMBUFSPT EQU   CMBPTRS+20
CMBFSTPT EQU   CMBPTRS+16
CMBUSPTR EQU   CMBPTRS+12
CMBSTPTR EQU   CMBPTRS+8
CMBPRPTR EQU   CMBPTRS+4
CMBUSRPT EQU   CMBPTRS
CMBCNT   EQU   IDACMB+6
CMBLEN   EQU   IDACMB+2
@NM00043 EQU   IDACMB+1
CMBID    EQU   IDACMB
BIBVSRTP EQU   IDABIB+104
BIBASCB  EQU   IDABIB+100
BIBDDNM  EQU   IDABIB+92
BIBSTPNM EQU   IDABIB+84
BIBJOBNM EQU   IDABIB+76
BIBSIOAP EQU   BIBRTNS+12
BIBASYRT EQU   BIBRTNS+8
BIBCEAPP EQU   BIBRTNS+4
BIBVGTT  EQU   IDABIB+56
BIBPSAB  EQU   IDABIB+52
BIBCSL   EQU   IDABIB+48
BIBWSHD  EQU   IDABIB+44
BIBVCRT  EQU   IDABIB+40
BIBHEBFQ EQU   IDABIB+36
BIBHEBPT EQU   IDABIB+32
BIBPRSPH EQU   IDABIB+28
BIBSPHPT EQU   IDABIB+24
BIBPAMBL EQU   IDABIB+20
BIBDACB  EQU   IDABIB+16
BIBUPT   EQU   IDABIB+8
@NM00042 EQU   IDABIB+5
BIBFLG2  EQU   IDABIB+4
BIBLEN   EQU   BIBHDR+2
@NM00041 EQU   BIBFLG1
BIBCKPT  EQU   BIBFLG1
BIBREST  EQU   BIBFLG1
BIBID    EQU   BIBHDR
ARDKEYS  EQU   IDAARDB+29
@NM00040 EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDHKRBA EQU   IDAARDB+8
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDEOD   EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
@NM00039 EQU   IDAAMDSB+41
@NM00038 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDCINV  EQU   IDAAMDSB+20
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00037 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00036 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00035 EQU   AMBLFLG2
AMBLSDS  EQU   AMBLVVIC
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00034 EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00033 EQU   AMBLQ2
AMBLCBIC EQU   AMBLQ2
@NM00032 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLESDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00031 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00030 EQU   AMBCSWD1+1
@NM00029 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBLSR   EQU   AMBAFLG
@NM00028 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00027 EQU   IDAAMB+68
AMBIWA   EQU   IDAAMB+64
AMBAMBXN EQU   AMBEOVPT
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00026 EQU   AMBOFLGS
@NM00025 EQU   AMBOFLGS
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBSDS   EQU   AMBINFL
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00024 EQU   AMBINFL
@NM00023 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00022 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
@NM00021 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00020 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
@NM00019 EQU   AMBFLG0
AMBSWSP  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
@NM00018 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00017 EQU   ACBINFL2
ACBCBIC  EQU   ACBINFL2
@NM00016 EQU   ACBINFL2
ACBBYPSS EQU   ACBINFL1
ACBIJRQE EQU   ACBINFL1
ACBJEPS  EQU   ACBINFL1
@NM00015 EQU   ACBINFL1
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00014 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00013 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00012 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00011 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00010 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00009 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00008 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00007 EQU   ACBMACR3
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
@NM00006 EQU   ACBMACR2
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
@NM00094 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00093 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00092 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00091 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00090 EQU   FLCFSA
@NM00089 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00088 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00087 EQU   FLCIOA
@NM00086 EQU   FLCMCLA+15
@NM00085 EQU   FLCMCLA+14
@NM00084 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00083 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00082 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00081 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00080 EQU   FLCPER
@NM00079 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00078 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00077 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00076 EQU   FLCPIILC
@NM00075 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00074 EQU   FLCSVILC
@NM00073 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00072 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00071 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00642 EQU   @RC00639
@RC00648 EQU   @RC00639
@RF00675 EQU   @RC00671
@RC00702 EQU   @RC00700
@RC00919 EQU   @RC00917
@RC00925 EQU   @RC00917
@RF00948 EQU   @RC00936
@RF00995 EQU   @RC00988
@RF01000 EQU   @RC00988
@RF01072 EQU   @RC01055
@RC01058 EQU   @RC01055
@RF01103 EQU   @RC01092
@RC01095 EQU   @RC01092
@RF01152 EQU   @RC01147
@PB00032 EQU   @PB00033
@RC01060 EQU   @RC01058
@RF01068 EQU   @RC01058
@RF01097 EQU   @RC01095
@PB00031 EQU   @PB00032
@PB00030 EQU   @PB00031
@PB00029 EQU   @PB00030
@PB00028 EQU   @PB00029
@PB00027 EQU   @PB00028
@PB00026 EQU   @PB00027
@PB00025 EQU   @PB00026
@PB00024 EQU   @PB00025
@PB00023 EQU   @PB00024
@PB00022 EQU   @PB00023
@PB00021 EQU   @PB00022
@PB00020 EQU   @PB00021
@PB00019 EQU   @PB00020
@PB00018 EQU   @PB00019
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IDA0192B,(C'PLS1755',0701,78151)
