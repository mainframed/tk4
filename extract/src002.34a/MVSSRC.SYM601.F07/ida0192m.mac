         TITLE 'IDA0192M - VSAM I/O SUPPORT VIRTUAL STORAGE MANAGER    *
                        '
IDA0192M CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA0192M  78.151'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @03,0                                               0001
@PSTART  LA    @12,4095(,@03)                                      0001
         USING @PSTART,@03                                         0001
         USING @PSTART+4095,@12                                    0001
*   RSTATRTN=IDAR192M;              /* NOTE ENTRY TO IDA0192M        */
         L     @08,OPWCOMWA(,RCORE)                                0133
         MVC   RSTATRTN(4,@08),@CC02991                            0133
*   RFY                                                            0134
*     IDABIB BASED(OPWBIB);         /* ESTABLISH BASE FOR BIB        */
*   OPWVSMWA=OPWVSMWA&&OPWVSMWA;    /* CLEAR VIRTL STORAGE MNGR W/A  */
         XC    OPWVSMWA(96,RCORE),OPWVSMWA(RCORE)                  0135
*   OPWVRG12=RBASEB;                /* SAVE BASE REG         @OZ04229*/
         ST    RBASEB,OPWVRG12(,RCORE)                             0136
*   OPWVR13=R13;                    /* SAVE ADDRESS OF THE SAVE AREA */
         ST    R13,OPWVR13(,RCORE)                                 0137
*   SAVENDEX=0;                     /* INITIALIZE SAVE AREA INDEX    */
         SLR   SAVENDEX,SAVENDEX                                   0138
*   GSNDEX=1;                       /* INITIALIZE GETSPACE INDEX     */
         LA    GSNDEX,1                                            0139
*   IF OPWVMTYP=DIRCTREQ THEN       /* IS THIS A DIRECT REQUEST      */
         CLI   OPWVMTYP(RCORE),133                                 0140
         BNE   @RF00140                                            0140
*     CALL DIRREQ;                  /* YES, CALL DIRECT REQUEST RTN  */
         BAL   @14,DIRREQ                                          0141
*   ELSE                            /* NO, CONT CHECKING REQUEST TYPE*/
*     IF OPWVMTYP=FREECLSP THEN     /* IS CLUSTER SPACE TO BE FREED  */
         B     @RC00140                                            0142
@RF00140 CLI   OPWVMTYP(RCORE),130                                 0142
         BNE   @RF00142                                            0142
*       CALL CLSRFREE;              /* YES, CALL CLUSTER FREE SPACE  */
         BAL   @14,CLSRFREE                                        0143
*     ELSE                          /* NO, CONT CHECKING REQUEST TYPE*/
*       IF OPWVMTYP=FREESPH THEN    /* IS SPHERE SPACE TO BE FREED   */
         B     @RC00142                                            0144
@RF00142 CLI   OPWVMTYP(RCORE),131                                 0144
         BNE   @RF00144                                            0144
*         CALL SPHFREE;             /* YES, CALL SPHERE FREE SPACE   */
         BAL   @14,SPHFREE                                         0145
*       ELSE                        /* NO, CONT CHECKING REQUEST TYPE*/
*         IF OPWVMTYP=FREESREQ THEN /* SPECIAL REQ BLKS TO BE FREED  */
         B     @RC00144                                            0146
@RF00144 CLI   OPWVMTYP(RCORE),135                                 0146
         BNE   @RF00146                                            0146
*           CALL SREQFREE;          /* YES, FREE SPECIAL REQ BLOCKS  */
         BAL   @14,SREQFREE                                        0147
*         ELSE                      /* NO, CONT CHECKING REQUEST TYPE*/
*           IF OPWVMTYP=ERRCLNUP THEN/* ERROR CLEAN UP TO BE DONE    */
         B     @RC00146                                            0148
@RF00146 CLI   OPWVMTYP(RCORE),132                                 0148
         BNE   @RF00148                                            0148
*             CALL CLEANUP;         /* YES, CALL ERROR CLEAN UP RTN  */
         BAL   @14,CLEANUP                                         0149
*           ELSE                    /* NO, CONT CHECKING REQUEST TYPE*/
*             DO;                   /* CHECK FOR GETSPACE REQUESTS   */
         B     @RC00148                                            0150
@RF00148 DS    0H                                                  0151
*               OPWVMLNG=(OPWVMLNG+3)&-FULLWDLN;/* ROUND LENGTH OF 0151
*                                      REQUEST TO A FULLWORD         */
         LA    @08,3                                               0151
         L     @05,OPWVMLNG-1(,RCORE)                              0151
         LA    @05,0(,@05)                                         0151
         ALR   @08,@05                                             0151
         N     @08,@CF03172                                        0151
         STCM  @08,7,OPWVMLNG(RCORE)                               0151
*               GSLREQLN=OPWVMLNG;  /* INIT LENGTH OF REQUEST        */
         LR    @05,GSNDEX                                          0152
         MH    @05,@CH00096                                        0152
         LA    @05,OPWVGSPL-12(@05,RCORE)                          0152
         STCM  @08,7,GSLREQLN(@05)                                 0152
*               IF OPWVMTYP=PRSPHBLK THEN/* PROTECTED SPHERE BLK REQ */
         CLI   OPWVMTYP(RCORE),129                                 0153
         BNE   @RF00153                                            0153
*                 DO;               /* YES, SET UP PROT SPH BLK PARMS*/
*                   OPWVANCS=ADDR(BIBPRSPH);/* SET UP PTR TO       0155
*                                      PROTECTED SPHERE BLOCK PTR    */
         L     @08,OPWBIB(,RCORE)                                  0155
         LA    @08,BIBPRSPH(,@08)                                  0155
         ST    @08,OPWVANCS(,RCORE)                                0155
*                   IF OPWLSR=ON THEN/* IF LSR OPEN          @OZ04230*/
         TM    OPWLSR(RCORE),B'00100000'                           0156
         BNO   @RF00156                                            0156
*                     GSLSPNO=PRTBLKPL;/* SUBPOOL IN MEMORY  @OZ04230*/
         MVI   GSLSPNO(@05),X'FC'                                  0157
*                   ELSE            /* NOT LSR, SO           @OZ04230*/
*                     GSLSPNO=PRTSPPL;/* USE SUBPOOL IN CSA  @OZ04230*/
         B     @RC00156                                            0158
@RF00156 LR    @08,GSNDEX                                          0158
         MH    @08,@CH00096                                        0158
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0158
         MVI   GSLSPNO(@08),X'F1'                                  0158
*                   GSLNOCSL=ON;    /* IND NO CSL ELEM IS TO BE BUILT*/
@RC00156 LR    @08,GSNDEX                                          0159
         MH    @08,@CH00096                                        0159
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0159
         OI    GSLNOCSL(@08),B'00001000'                           0159
*                   CALL PRTSPREQ;  /* CALL PROTECTED SPHERE BLK RTN */
         BAL   @14,PRTSPREQ                                        0160
*                 END;                                             0161
*               ELSE                /* NO, CONT CHECKING REQUEST TYPE*/
*                 IF OPWVMTYP=PSAMBLBK THEN/* PROTECTED AMBL BLK REQ */
         B     @RC00153                                            0162
@RF00153 CLI   OPWVMTYP(RCORE),134                                 0162
         BNE   @RF00162                                            0162
*                   DO;             /* YES, INIT PROT AMBL BLK PARMS */
*                     OPWVANCS=ADDR(BIBPSAB);/* SET UP PTR TO      0164
*                                      PROTECTED AMBL BLOCK PTR      */
         L     @08,OPWBIB(,RCORE)                                  0164
         LA    @08,BIBPSAB(,@08)                                   0164
         ST    @08,OPWVANCS(,RCORE)                                0164
*                     IF OPWGSR=ON×OPWCBIC=ON THEN/* IF REQUEST FOR
*                                      GSR OR CBIC           @ZA16012*/
         TM    OPWGSR(RCORE),B'01000000'                           0165
         BO    @RT00165                                            0165
         TM    OPWCBIC(RCORE),B'10000000'                          0165
         BNO   @RF00165                                            0165
@RT00165 DS    0H                                                  0166
*                       GSLSPNO=GSRSPOOL;/* YES, INIT TO GSR SP      */
         LR    @08,GSNDEX                                          0166
         MH    @08,@CH00096                                        0166
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0166
         MVI   GSLSPNO(@08),X'F1'                                  0166
*                     ELSE          /* NO, OPEN IS FOR LSR OR DS     */
*                       GSLSPNO=AMBLPOOL;/* INIT TO SP FOR LSR OR DS */
         B     @RC00165                                            0167
@RF00165 LR    @08,GSNDEX                                          0167
         MH    @08,@CH00096                                        0167
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0167
         MVI   GSLSPNO(@08),X'FC'                                  0167
*                     CALL PRTSPREQ;/* CALL PROTECTED SPHERE BLK RTN */
@RC00165 BAL   @14,PRTSPREQ                                        0168
*                   END;                                           0169
*                 ELSE              /* NO, CONT CHECKING REQUEST TYPE*/
*                   DO;             /* CHK FOR REQ DRIVEN BY GETSPACE*/
         B     @RC00162                                            0170
@RF00162 DS    0H                                                  0171
*                     IF OPWVMTYP=SPHBLK THEN/* IS THIS A SPHERE BLK
*                                      REQUEST                       */
         CLI   OPWVMTYP(RCORE),128                                 0171
         BNE   @RF00171                                            0171
*                       DO;         /* YES, SET UP SPHERE BLK PARMS  */
*                         OPWVANCP=ADDR(BIBSPHPT);/* SET UP PTR TO 0173
*                                      HEB HDR ELEMENT PTR           */
         L     @08,OPWBIB(,RCORE)                                  0173
         LA    @08,BIBSPHPT(,@08)                                  0173
         ST    @08,OPWVANCP(,RCORE)                                0173
*                         OPWVTBLP=ADDR(SPHREQTB);/* SET UP PTR TO 0174
*                                      REQUEST TYPE TABLE            */
         LA    @08,SPHREQTB                                        0174
         ST    @08,OPWVTBLP(,RCORE)                                0174
*                       END;                                       0175
*                     ELSE          /* NO, REQUEST IS CLUSTER RELATED*/
*                       DO;         /* SET UP CLUSTER RELTD BLK PARMS*/
         B     @RC00171                                            0176
@RF00171 DS    0H                                                  0177
*                         RFY                                      0177
*                           IDACMB BASED(OPWVMANC);/* BASE FOR CMB   */
*                         OPWVANCP=ADDR(CMBENTRY(OPWVMTYP));/* SET UP
*                                      POINTER TO CMB HEB ENTRY      */
         SLR   @08,@08                                             0178
         IC    @08,OPWVMTYP(,RCORE)                                0178
         LR    @05,@08                                             0178
         SLA   @05,2                                               0178
         L     @02,OPWVMANC(,RCORE)                                0178
         LA    @05,CMBENTRY-4(@05,@02)                             0178
         ST    @05,OPWVANCP(,RCORE)                                0178
*                         OPWVTBLP=ADDR(CLSTREQT(OPWVMTYP));/* SET UP
*                                      POINTER TO REQUEST TYPE TABLE */
         MH    @08,@CH02046                                        0179
         LA    @08,CLSTREQT-10(@08)                                0179
         ST    @08,OPWVTBLP(,RCORE)                                0179
*                       END;                                       0180
*                     IF OPWCAT=ON×OPWSCRA=ON×OPWVVIC=ON THEN/* IS 0181
*                                      REQUEST FOR CATALOGUE         */
@RC00171 TM    OPWCAT(RCORE),B'11100000'                           0181
         BZ    @RF00181                                            0181
*                       DO;         /* YES, INIT CATALOG PARAMETERS  */
*                         GSLSPNO=REQCATSP;/* INIT SUBPOOL FOR CATLG */
         LR    @08,GSNDEX                                          0183
         MH    @08,@CH00096                                        0183
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0183
         L     @05,OPWVTBLP(,RCORE)                                0183
         IC    @02,REQCATSP(,@05)                                  0183
         STC   @02,GSLSPNO(,@08)                                   0183
*                         GSLFLAGS=REQCATFG;/* INIT CATALOG FLAGS    */
         MVC   GSLFLAGS(1,@08),REQCATFG(@05)                       0184
*                       END;                                       0185
*                     ELSE          /* NO, CHECK FOR GSR             */
*                       IF OPWGSR=ON THEN/* IS THE REQUSEST FOR GSR  */
         B     @RC00181                                            0186
@RF00181 TM    OPWGSR(RCORE),B'01000000'                           0186
         BNO   @RF00186                                            0186
*                         DO;       /* YES, INIT GSR PARAMETERS      */
*                           GSLSPNO=REQGSRSP;/* INIT SUPPOOL FOR GSR */
         LR    @08,GSNDEX                                          0188
         MH    @08,@CH00096                                        0188
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0188
         L     @05,OPWVTBLP(,RCORE)                                0188
         IC    @02,REQGSRSP(,@05)                                  0188
         STC   @02,GSLSPNO(,@08)                                   0188
*                           GSLFLAGS=REQGSRFG;/* INIT GSR FLAGS      */
         MVC   GSLFLAGS(1,@08),REQGSRFG(@05)                       0189
*                         END;                                     0190
*                       ELSE        /* NO, REQUEST IS FOR O/C/EOV    */
*                         IF OPWCBIC=ON THEN/* IS THE REQUEST FOR  0191
*                                      CBIC                  @ZA16012*/
         B     @RC00186                                            0191
@RF00186 TM    OPWCBIC(RCORE),B'10000000'                          0191
         BNO   @RF00191                                            0191
*                           DO;     /* YES, INIT CBIC PARMS  @ZA16012*/
*                             GSLSPNO=REQCBCSP;/* INIT SUBPOOL FOR 0193
*                                      CBIC                  @ZA16012*/
         LR    @08,GSNDEX                                          0193
         MH    @08,@CH00096                                        0193
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0193
         L     @05,OPWVTBLP(,RCORE)                                0193
         IC    @02,REQCBCSP(,@05)                                  0193
         STC   @02,GSLSPNO(,@08)                                   0193
*                             GSLFLAGS=REQCBCFG;/* INIT CBIC FLAGS 0194
*                                                            @ZA16012*/
         MVC   GSLFLAGS(1,@08),REQCBCFG(@05)                       0194
*                           END;    /*                       @ZA16012*/
*                         ELSE      /* NO, REQUEST IS FOR O/C/EOV    */
*                           DO;     /* INIT O/C/EOV PARAMETERS       */
         B     @RC00191                                            0196
@RF00191 DS    0H                                                  0197
*                             GSLSPNO=REQOCESP;/* INIT O/C/E SUBPOOL */
         LR    @08,GSNDEX                                          0197
         MH    @08,@CH00096                                        0197
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0197
         L     @05,OPWVTBLP(,RCORE)                                0197
         IC    @02,REQOCESP(,@05)                                  0197
         STC   @02,GSLSPNO(,@08)                                   0197
*                             GSLFLAGS=REQOCEFG;/* INIT O/C/EOV FLAGS*/
         MVC   GSLFLAGS(1,@08),REQOCEFG(@05)                       0198
*                           END;                                   0199
*                     GSLFLAGS=GSLFLAGS×OPWVMFLG;/* MERGE WITH INPUT
*                                      FLAGS IN O/C/EOV WORK AREA    */
@RC00191 DS    0H                                                  0200
@RC00186 DS    0H                                                  0200
@RC00181 LR    @08,GSNDEX                                          0200
         MH    @08,@CH00096                                        0200
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0200
         OC    GSLFLAGS(1,@08),OPWVMFLG(RCORE)                     0200
*                     CALL GETSPACE;/* GET REQUESTED CORE            */
         BAL   @14,GETSPACE                                        0201
*                   END;                                           0202
*               OPWVMADR=GSLPTR;    /* RETURN ADDR OF CORE TO CALLER */
@RC00162 DS    0H                                                  0203
@RC00153 LR    @08,GSNDEX                                          0203
         MH    @08,@CH00096                                        0203
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0203
         L     @08,GSLPTR(,@08)                                    0203
         ST    @08,OPWVMADR(,RCORE)                                0203
*             END;                                                 0204
*   R13=OPWVR13;                    /* RESTORE ADDRESS OF SAVE AREA  */
@RC00148 DS    0H                                                  0205
@RC00146 DS    0H                                                  0205
@RC00144 DS    0H                                                  0205
@RC00142 DS    0H                                                  0205
@RC00140 L     R13,OPWVR13(,RCORE)                                 0205
*   RETURN;                         /* RETURN TO THE CALLER          */
@EL00001 DS    0H                                                  0206
@EF00001 DS    0H                                                  0206
@ER00001 LM    @14,@12,12(@13)                                     0206
         BR    @14                                                 0206
*                                                                  0207
*/********************************************************************/
*/*                                                                  */
*/* FUNCTION: THIS ROUTINE IS USED TO PROCESS DIRECT REQUESTS FOR    */
*/*           CORE.                                                  */
*/*                                                                  */
*/* INPUTS:   VIRTUAL STORAGE MANAGER PARAMETER LIST WITHIN THE OPEN */
*/*           WORK AREA.                                             */
*/*                                                                  */
*/* OUTPUTS:  A POINTER TO THE REQUESTED CORE IN OPWVMADR OR ZERO IF */
*/*           UNABLE TO OBTAIN SPACE.                                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0207
*DIRREQ:                                                           0207
*   PROC OPTIONS(NOSAVE);                                          0207
DIRREQ   DS    0H                                                  0208
*   SAVENDEX=SAVENDEX+1;            /* POINT TO NEXT SAVE AREA       */
         AL    SAVENDEX,@CF00082                                   0208
*   RFY                                                            0209
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   OPWVSAVE(SAVENDEX)=RET;         /* SAVE RETURN ADDRESS           */
         LR    @15,SAVENDEX                                        0210
         SLA   @15,2                                               0210
         ST    RET,OPWVSAVE-4(@15,RCORE)                           0210
*   RFY                                                            0211
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   GSLSPNO=OPWVMSP;                /* INIT SUBPOOL NUMBER           */
         LR    @08,GSNDEX                                          0212
         MH    @08,@CH00096                                        0212
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0212
         IC    @05,OPWVMSP(,RCORE)                                 0212
         STC   @05,GSLSPNO(,@08)                                   0212
*   GSLGETLN=OPWVMLNG;              /* INIT LENGTH OF REQUEST        */
         MVC   GSLGETLN(3,@08),OPWVMLNG(RCORE)                     0213
*   GSLFLAGS=OPWVMFLG;              /* INIT REQUEST FLAGS            */
         MVC   GSLFLAGS(1,@08),OPWVMFLG(RCORE)                     0214
*   CALL GETCORE;                   /* CALL GETCORE ROUTINE          */
         BAL   @14,GETCORE                                         0215
*   RFY                                                            0216
*     CSLENTRY BASED(OPWVCSLE);     /* BASE FOR NEW CSL ENTRY        */
*   IF GSLPTR^=0 THEN               /* WAS GETCORE SUCCESSFUL        */
         LR    @08,GSNDEX                                          0217
         MH    @08,@CH00096                                        0217
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0217
         L     @05,GSLPTR(,@08)                                    0217
         LTR   @05,@05                                             0217
         BZ    @RF00217                                            0217
*     OPWVMLNG=GSLGETLN;            /* RETRN ACTUAL LENGTH TO CALLER */
         MVC   OPWVMLNG(3,RCORE),GSLGETLN(@08)                     0218
*   ELSE                                                           0219
*     ;                             /* NO, NO FURTHER PROCESSING REQ */
@RF00217 DS    0H                                                  0220
*   OPWVMADR=GSLPTR;                /* RETURN ADDR OF CORE TO CALLER */
         LR    @08,GSNDEX                                          0220
         MH    @08,@CH00096                                        0220
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0220
         L     @08,GSLPTR(,@08)                                    0220
         ST    @08,OPWVMADR(,RCORE)                                0220
*   RFY                                                            0221
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   RET=OPWVSAVE(SAVENDEX);         /* RESTORE RETURN ADDRESS        */
         LR    @05,SAVENDEX                                        0222
         SLA   @05,2                                               0222
         L     RET,OPWVSAVE-4(@05,RCORE)                           0222
*   RFY                                                            0223
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   SAVENDEX=SAVENDEX-1;            /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0224
*   END DIRREQ;                     /* RETURN TO THE CALLER          */
@EL00002 DS    0H                                                  0225
@EF00002 DS    0H                                                  0225
@ER00002 BR    @14                                                 0225
*                                                                  0226
*/********************************************************************/
*/*                                                                  */
*/* FUNCTION: THIS ROUTINE IS USED TO GET SPACE IN PROTECTED SPHERE  */
*/*           AND PROTECTED AMBL BLOCKS.                             */
*/*                                                                  */
*/* INPUTS:   VIRTUAL STORAGE MANAGER AND GETSPACE PARAMETER LISTS   */
*/*           WITHIN THE OPEN WORK AREA.                             */
*/*                                                                  */
*/* OUTPUTS:  A POINTER TO THE REQUESTED CORE IN GSLPTR OR ZERO IF   */
*/*           UNABLE TO OBTAIN SPACE.                                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0226
*PRTSPREQ:                                                         0226
*   PROC OPTIONS(NOSAVE);                                          0226
PRTSPREQ DS    0H                                                  0227
*   SAVENDEX=SAVENDEX+1;            /* POINT TO NEXT SAVE AREA       */
         AL    SAVENDEX,@CF00082                                   0227
*   RFY                                                            0228
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   OPWVSAVE(SAVENDEX)=RET;         /* SAVE RETURN ADDRESS           */
         LR    @15,SAVENDEX                                        0229
         SLA   @15,2                                               0229
         ST    RET,OPWVSAVE-4(@15,RCORE)                           0229
*   RFY                                                            0230
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   RFY                                                            0231
*     HEBHDREL BASED(MSPHPTR);      /* ESTABLISH BASE FOR HEB        */
*   IF ADDR(HEBHDREL)^=0&HEBAVSP^=0&HEBAVSP<GSLREQLN THEN/* DET IF 0232
*                                      ANY BLKS EXIST, IF SO IS    0232
*                                      ENOUGH CORE AVAILABLE FOR THE
*                                      REQUEST                       */
         L     @08,OPWVANCS(,RCORE)                                0232
         L     @08,MSPHPTR(,@08)                                   0232
         LTR   @08,@08                                             0232
         BZ    @RF00232                                            0232
         L     @05,HEBAVSP-1(,@08)                                 0232
         LA    @05,0(,@05)                                         0232
         LTR   @05,@05                                             0232
         BZ    @RF00232                                            0232
         LR    @05,GSNDEX                                          0232
         MH    @05,@CH00096                                        0232
         LA    @05,OPWVGSPL-12(@05,RCORE)                          0232
         CLC   HEBAVSP(3,@08),GSLREQLN(@05)                        0232
         BNL   @RF00232                                            0232
*     DO;                           /* NOT ENOUGH, FREE EXCESS SPACE */
*       OPWVHDRE=ADDR(HEBHDREL);    /* SET UP HDR PTR FOR FREECORE   */
         ST    @08,OPWVHDRE(,RCORE)                                0234
*       IF OPWVMTYP=PSAMBLBK THEN   /* IS REQ FOR A PROT AMBL BLK    */
         CLI   OPWVMTYP(RCORE),134                                 0235
         BNE   @RF00235                                            0235
*         DO;                       /* YES, FREE EXCESS IN PROT AMBL */
*           CALL FNDCSLEL;          /* FIND CSL ENTRY FOR PROT AMBL  */
         BAL   @14,FNDCSLEL                                        0237
*           IF OPWVCSLE^=0 THEN     /* WAS CSL ENTRY FOUND           */
         L     @08,OPWVCSLE(,RCORE)                                0238
         LTR   @08,@08                                             0238
         BZ    @RF00238                                            0238
*             DO;                   /* YES, FREE EXCESS CORE         */
*               RFY                                                0240
*                 CSLENTRY BASED(OPWVCSLE);/* BASE FOR CSL ENTRY     */
*               CALL FREECORE;      /* FREE EXCESS SPACE IN BLOCK    */
         BAL   @14,FREECORE                                        0241
*               CSLCORLN=HEBLN;     /* REFLECT LENGTH IN CSL ENTRY   */
         L     @08,OPWVCSLE(,RCORE)                                0242
         L     @05,OPWVANCS(,RCORE)                                0242
         L     @05,MSPHPTR(,@05)                                   0242
         MVC   CSLCORLN(3,@08),HEBLN(@05)                          0242
*             END;                                                 0243
*           ELSE                    /* CSL ENTRY WAS NOT FOUND       */
*             HEBAVSP=0;            /* ZERO AMNT OF AVAILABLE SPACE  */
         B     @RC00238                                            0244
@RF00238 L     @08,OPWVANCS(,RCORE)                                0244
         L     @08,MSPHPTR(,@08)                                   0244
         SLR   @05,@05                                             0244
         STCM  @05,7,HEBAVSP(@08)                                  0244
*         END;                                                     0245
*       ELSE                        /* REQ IS FOR A PROT SPHERE BLK  */
*         CALL FREECORE;            /* FREE EXCESS SPACE IN BLOCK    */
         B     @RC00235                                            0246
@RF00235 BAL   @14,FREECORE                                        0246
*     END;                                                         0247
*   ELSE                                                           0248
*     ;                             /* NO EXCESS CORE TO BE FREED    */
@RF00232 DS    0H                                                  0249
*   IF ADDR(HEBHDREL)=0×HEBAVSP=0 THEN/* IS A NEW PROTECTED SPHERE 0249
*                                      BLOCK NEEDED                  */
@RC00232 L     @08,OPWVANCS(,RCORE)                                0249
         L     @08,MSPHPTR(,@08)                                   0249
         LTR   @08,@08                                             0249
         BZ    @RT00249                                            0249
         L     @08,HEBAVSP-1(,@08)                                 0249
         LA    @08,0(,@08)                                         0249
         LTR   @08,@08                                             0249
         BNZ   @RF00249                                            0249
@RT00249 DS    0H                                                  0250
*     DO;                           /* YES, BUILD A NEW PROT SPH BLK */
*       GSLGETLN=MAX(K,GSLREQLN);   /* INIT LENGTH OF BLOCK          */
         LR    @08,GSNDEX                                          0251
         MH    @08,@CH00096                                        0251
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0251
         L     @05,GSLREQLN-1(,@08)                                0251
         LA    @05,0(,@05)                                         0251
         LA    @02,1024                                            0251
         CR    @05,@02                                             0251
         BNL   *+6
         LR    @05,@02                                             0251
         STCM  @05,7,GSLGETLN(@08)                                 0251
*       CALL GETCORE;               /* GET CORE FOR PROT SPHERE BLK  */
         BAL   @14,GETCORE                                         0252
*       IF GSLPTR=0 THEN            /* WAS GETCORE SUCCESSFUL        */
         LR    @08,GSNDEX                                          0253
         MH    @08,@CH00096                                        0253
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0253
         L     @08,GSLPTR(,@08)                                    0253
         LTR   @08,@08                                             0253
         BNZ   @RF00253                                            0253
*         DO;                       /* NO, TERMINATE REQUEST         */
*           RFY                                                    0255
*             RET RSTD;             /* RESTRICT RETURN REGISTER      */
*           RET=OPWVSAVE(SAVENDEX); /* RESTORE RETURN ADDRESS        */
         LR    @08,SAVENDEX                                        0256
         SLA   @08,2                                               0256
         L     RET,OPWVSAVE-4(@08,RCORE)                           0256
*           RFY                                                    0257
*             RET UNRSTD;           /* DROP REGISTER RESTRICTION     */
*           SAVENDEX=SAVENDEX-1;    /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0258
*           RETURN;                 /* RETURN TO THE CALLER          */
@EL00003 DS    0H                                                  0259
@EF00003 DS    0H                                                  0259
@ER00003 BR    @14                                                 0259
*         END;                                                     0260
*       ELSE                        /* GETCORE WAS SUCCESSFUL        */
*         DO;                       /* INIT HEADER OF NEW BLOCK      */
@RF00253 DS    0H                                                  0262
*           RFY                                                    0262
*             HEBHDREL BASED(GSLPTR);/* NEW PROT SPHERE BLK BASE     */
*           HEBSP=GSLSPNO;          /* PUT SUBPOOL NO. IN NEW BLK    */
         LR    @08,GSNDEX                                          0263
         MH    @08,@CH00096                                        0263
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0263
         L     @05,GSLPTR(,@08)                                    0263
         IC    @02,GSLSPNO(,@08)                                   0263
         STC   @02,HEBSP(,@05)                                     0263
*           HEBLN=GSLGETLN;         /* INIT SIZE OF NEW BLOCK        */
         L     @08,GSLGETLN-1(,@08)                                0264
         LA    @08,0(,@08)                                         0264
         STCM  @08,7,HEBLN(@05)                                    0264
*           HEBBLKPT=ADDR(HEBHDREL);/* POINT TO BEGINNING OF CORE    */
         ST    @05,HEBBLKPT(,@05)                                  0265
*           HEBAVSP=HEBLN-LENGTH(HEBHDREL);/* CALC AMOUNT OF AVAIL-
*                                      ABLE SPACE IN NEW BLOCK       */
         LA    @02,24                                              0266
         SLR   @08,@02                                             0266
         STCM  @08,7,HEBAVSP(@05)                                  0266
*           HEBELCHN=MSPHPTR;       /* CHAIN NEW BLK TO FIRST BLK IN
*                                      CHAIN OF PROT SPHERE BLOCKS   */
         L     @08,OPWVANCS(,RCORE)                                0267
         L     @15,MSPHPTR(,@08)                                   0267
         ST    @15,HEBELCHN(,@05)                                  0267
*           HEBNBYTE=ADDR(HEBHDREL)+LENGTH(HEBHDREL);/* PT TO FIRST
*                                      BYTE OF UNUSED SPACE IN NEW 0268
*                                      BLK                           */
         ALR   @02,@05                                             0268
         ST    @02,HEBNBYTE(,@05)                                  0268
*           MSPHPTR=GSLPTR;         /* CHAIN NEW BLK TO THE BIB      */
         ST    @05,MSPHPTR(,@08)                                   0269
*           RFY                                                    0270
*             IDAVGTT BASED(BIBVGTT);/* ESTABLISH BASE FOR VGTT      */
*           IF OPWVMTYP^=PSAMBLBK&BIBVGTT^=0 THEN/* IF REQ IS FOR A
*                                      PROT SPH BLK AND VGTT EXISTS  */
         CLI   OPWVMTYP(RCORE),134                                 0271
         BE    @RF00271                                            0271
         L     @08,OPWBIB(,RCORE)                                  0271
         L     @08,BIBVGTT(,@08)                                   0271
         LTR   @08,@08                                             0271
         BZ    @RF00271                                            0271
*             VGTTPSB=GSLPTR;       /* CHAIN NEW PSB TO THE VGTT     */
         ST    @05,VGTTPSB(,@08)                                   0272
*           ELSE                                                   0273
*             ;                     /* PROT AMBL BLK REQ OR NO VGTT  */
@RF00271 DS    0H                                                  0274
*         END;                                                     0274
*       RFY                                                        0275
*         HEBHDREL BASED(MSPHPTR);  /* BASE FOR NEW PROT SPH BLK     */
*     END;                                                         0276
*   ELSE                                                           0277
*     ;                             /* GET SPACE FROM PROT SPH BLK   */
@RF00249 DS    0H                                                  0278
*   GSLPTR=HEBNBYTE;                /* RETRN ADDR OF REQUESTED SPACE */
         LR    @08,GSNDEX                                          0278
         MH    @08,@CH00096                                        0278
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0278
         L     @05,OPWVANCS(,RCORE)                                0278
         L     @05,MSPHPTR(,@05)                                   0278
         L     @02,HEBNBYTE(,@05)                                  0278
         ST    @02,GSLPTR(,@08)                                    0278
*   HEBAVSP=HEBAVSP-GSLREQLN;       /* DECR AVAIL SPACE BY REQ LENGTH*/
         L     @08,GSLREQLN-1(,@08)                                0279
         LA    @08,0(,@08)                                         0279
         L     @15,HEBAVSP-1(,@05)                                 0279
         LA    @15,0(,@15)                                         0279
         SLR   @15,@08                                             0279
         STCM  @15,7,HEBAVSP(@05)                                  0279
*   HEBNBYTE=HEBNBYTE+GSLREQLN;     /* UPDATE PTR TO UNUSED SPACE    */
         ALR   @02,@08                                             0280
         ST    @02,HEBNBYTE(,@05)                                  0280
*   RFY                                                            0281
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   RET=OPWVSAVE(SAVENDEX);         /* RESTORE RETURN ADDRESS        */
         LR    @08,SAVENDEX                                        0282
         SLA   @08,2                                               0282
         L     RET,OPWVSAVE-4(@08,RCORE)                           0282
*   RFY                                                            0283
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   SAVENDEX=SAVENDEX-1;            /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0284
*   END PRTSPREQ;                   /* RETURN TO THE CALLER          */
         B     @EL00003                                            0285
*                                                                  0286
*/********************************************************************/
*/*                                                                  */
*/* FUNCTION: THIS ROUTINE IS USED TO GET CORE FROM EXISTING BLOCKS  */
*/*           OR TO REQUEST A NEW BLOCK IF SUFFICIENT CORE IS NOT    */
*/*           AVAILABLE IN AN EXISTING BLOCK OR THIS IS THE FIRST    */
*/*           REQUEST FOR CORE.                                      */
*/*                                                                  */
*/* INPUTS:   VIRTUAL STORAGE MANAGER AND GETSPACE PARAMETER LISTS   */
*/*           WITHIN THE OPEN WORK AREA.                             */
*/*                                                                  */
*/* OUTPUTS:  A POINTER TO THE REQUESTED CORE IN GSLPTR OR ZERO IF   */
*/*           UNABLE TO OBTAIN SPACE.                                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0286
*GETSPACE:                                                         0286
*   PROC OPTIONS(NOSAVE);                                          0286
GETSPACE DS    0H                                                  0287
*   SAVENDEX=SAVENDEX+1;            /* POINT TO NEXT SAVE AREA       */
         AL    SAVENDEX,@CF00082                                   0287
*   RFY                                                            0288
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   OPWVSAVE(SAVENDEX)=RET;         /* SAVE RETURN ADDRESS           */
         LR    @15,SAVENDEX                                        0289
         SLA   @15,2                                               0289
         ST    RET,OPWVSAVE-4(@15,RCORE)                           0289
*   RFY                                                            0290
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   RFY                                                            0291
*     HEBHDREL BASED(MHEBPTR);      /* BASE FOR HEB HDR ELEMENT      */
*   OPWVHDRE=ADDR(HEBHDREL);        /* SET UP PTR TO HEB HDR ELEM    */
         L     @08,OPWVANCP(,RCORE)                                0292
         L     @08,MHEBPTR(,@08)                                   0292
         ST    @08,OPWVHDRE(,RCORE)                                0292
*   IF ADDR(HEBHDREL)^=0&HEBAVSP^=0&HEBAVSP<GSLREQLN THEN/* DET IF 0293
*                                      ANY BLKS EXIST, IF SO IS    0293
*                                      ENOUGH CORE AVAILABLE FOR THE
*                                      REQUEST                       */
         LTR   @08,@08                                             0293
         BZ    @RF00293                                            0293
         L     @05,HEBAVSP-1(,@08)                                 0293
         LA    @05,0(,@05)                                         0293
         LTR   @05,@05                                             0293
         BZ    @RF00293                                            0293
         LR    @05,GSNDEX                                          0293
         MH    @05,@CH00096                                        0293
         LA    @05,OPWVGSPL-12(@05,RCORE)                          0293
         CLC   HEBAVSP(3,@08),GSLREQLN(@05)                        0293
         BNL   @RF00293                                            0293
*     DO;                           /* NOT ENOUGH, FREE EXCESS SPACE */
*       CALL FNDCSLEL;              /* FIND SAVE LIST FOR THIS BLOCK */
         BAL   @14,FNDCSLEL                                        0295
*       IF OPWVCSLE^=0 THEN         /* WAS CSL FOUND                 */
         L     @08,OPWVCSLE(,RCORE)                                0296
         LTR   @08,@08                                             0296
         BZ    @RF00296                                            0296
*         DO;                       /* YES, DET AMOUNT TO BE FREED   */
*           RFY                                                    0298
*             CSLENTRY BASED(OPWVCSLE);/* BASE FOR CSL ENTRY         */
*           CALL FREECORE;          /* FREE EXCESS SPACE IN BLOCK    */
         BAL   @14,FREECORE                                        0299
*           CSLCORLN=HEBLN;         /* REFLECT LENGTH IN CSL         */
         L     @08,OPWVCSLE(,RCORE)                                0300
         L     @05,OPWVANCP(,RCORE)                                0300
         L     @05,MHEBPTR(,@05)                                   0300
         MVC   CSLCORLN(3,@08),HEBLN(@05)                          0300
*         END;                                                     0301
*       ELSE                        /* CSL ELEM WAS NOT FOUND        */
*         HEBAVSP=0;                /* ZERO AMNT OF AVAILABLE SPACE  */
         B     @RC00296                                            0302
@RF00296 L     @08,OPWVANCP(,RCORE)                                0302
         L     @08,MHEBPTR(,@08)                                   0302
         SLR   @05,@05                                             0302
         STCM  @05,7,HEBAVSP(@08)                                  0302
*     END;                                                         0303
*   ELSE                                                           0304
*     ;                             /* NO EXCESS CORE TO BE FREED    */
@RF00293 DS    0H                                                  0305
*   IF ADDR(HEBHDREL)=0×HEBAVSP=0 THEN/* IS A NEW CORE BLK NEEDED    */
@RC00293 L     @08,OPWVANCP(,RCORE)                                0305
         L     @08,MHEBPTR(,@08)                                   0305
         LTR   @08,@08                                             0305
         BZ    @RT00305                                            0305
         L     @08,HEBAVSP-1(,@08)                                 0305
         LA    @08,0(,@08)                                         0305
         LTR   @08,@08                                             0305
         BNZ   @RF00305                                            0305
@RT00305 DS    0H                                                  0306
*     DO;                           /* YES, GET A NEW CORE BLOCK     */
*       CALL GETHDREL;              /* GET A FREE HDR ELEMENT        */
         BAL   @14,GETHDREL                                        0307
*       IF OPWVHDRE=0 THEN          /* WAS A NEW HDR EL AVAILABLE    */
         SLR   @08,@08                                             0308
         C     @08,OPWVHDRE(,RCORE)                                0308
         BNE   @RF00308                                            0308
*         DO;                       /* NO, TERMINATE REQUEST         */
*           GSLPTR=0;               /* IND REQUEST NOT SATISFIED     */
         LR    @05,GSNDEX                                          0310
         MH    @05,@CH00096                                        0310
         LA    @05,OPWVGSPL-12(@05,RCORE)                          0310
         ST    @08,GSLPTR(,@05)                                    0310
*           RFY                                                    0311
*             RET RSTD;             /* RESTRICT RETURN REGISTER      */
*           RET=OPWVSAVE(SAVENDEX); /* RESTORE RETURN ADDRESS        */
         LR    @08,SAVENDEX                                        0312
         SLA   @08,2                                               0312
         L     RET,OPWVSAVE-4(@08,RCORE)                           0312
*           RFY                                                    0313
*             RET UNRSTD;           /* DROP REGISTER RESTRICTION     */
*           SAVENDEX=SAVENDEX-1;    /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0314
*           RETURN;                 /* RETURN TO THE CALLER          */
@EL00004 DS    0H                                                  0315
@EF00004 DS    0H                                                  0315
@ER00004 BR    @14                                                 0315
*         END;                                                     0316
*       ELSE                        /* A NEW HDR ELEMENT WAS FOUND   */
*         DO;                       /* GET A NEW CORE BLOCK          */
@RF00308 DS    0H                                                  0318
*           RFY                                                    0318
*             HEBHDREL BASED(OPWVHDRE);/* BASE FOR NEW HDR ELEM      */
*           GSLGETLN=MAX(REQSIZE,GSLREQLN);/* GET LARGER OF AMOUNT 0319
*                                      REQUESTED OR MAX BLOCK SIZE   */
         LR    @08,GSNDEX                                          0319
         MH    @08,@CH00096                                        0319
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0319
         L     @05,OPWVTBLP(,RCORE)                                0319
         LH    @05,REQSIZE(,@05)                                   0319
         L     @02,GSLREQLN-1(,@08)                                0319
         LA    @02,0(,@02)                                         0319
         CR    @05,@02                                             0319
         BNL   *+6
         LR    @05,@02                                             0319
         STCM  @05,7,GSLGETLN(@08)                                 0319
*           CALL GETCORE;           /* GET CORE FOR NEW BLOCK        */
         BAL   @14,GETCORE                                         0320
*           IF GSLPTR=0 THEN        /* WAS CORE OBTAINED SUCCESSFULLY*/
         SLR   @08,@08                                             0321
         LR    @05,GSNDEX                                          0321
         MH    @05,@CH00096                                        0321
         LA    @05,OPWVGSPL-12(@05,RCORE)                          0321
         C     @08,GSLPTR(,@05)                                    0321
         BNE   @RF00321                                            0321
*             DO;                   /* NO, TERMINATE REQUEST         */
*               OPWVMADR=0;         /* IND REQUEST NOT SATISFIED     */
         ST    @08,OPWVMADR(,RCORE)                                0323
*               HEBELCHN=BIBHEBFQ;  /* CHAIN HDR EL TO FIRST ON QUE  */
         L     @08,OPWVHDRE(,RCORE)                                0324
         L     @05,OPWBIB(,RCORE)                                  0324
         L     @02,BIBHEBFQ(,@05)                                  0324
         ST    @02,HEBELCHN(,@08)                                  0324
*               BIBHEBFQ=OPWVHDRE;  /* RETRN HDR ELEM TO FREE QUEUE  */
         ST    @08,BIBHEBFQ(,@05)                                  0325
*               RFY                                                0326
*                 RET RSTD;         /* RESTRICT RETURN REGISTER      */
*               RET=OPWVSAVE(SAVENDEX);/* RESTORE RETURN ADDRESS     */
         LR    @08,SAVENDEX                                        0327
         SLA   @08,2                                               0327
         L     RET,OPWVSAVE-4(@08,RCORE)                           0327
*               RFY                                                0328
*                 RET UNRSTD;       /* DROP REGISTER RESTRICTION     */
*               SAVENDEX=SAVENDEX-1;/* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0329
*               RETURN;             /* RETURN TO THE CALLER          */
         B     @EL00004                                            0330
*             END;                                                 0331
*           ELSE                    /* CORE WAS OBTAINED             */
*             DO;                   /* COMPLETE NEW HDR AND CSL      */
@RF00321 DS    0H                                                  0333
*               CSLANCPT=OPWVANCP;  /* PUT PTR TO ADDR OF FIRST HEB
*                                      HDR ELEMENT IN THE CSL        */
         L     @08,OPWVCSLE(,RCORE)                                0333
         MVC   CSLANCPT(3,@08),OPWVANCP+1(RCORE)                   0333
*               HEBSP=GSLSPNO;      /* INIT SP NO. IN NEW HDR ELEM   */
         L     @08,OPWVHDRE(,RCORE)                                0334
         LR    @05,GSNDEX                                          0334
         MH    @05,@CH00096                                        0334
         LA    @05,OPWVGSPL-12(@05,RCORE)                          0334
         IC    @02,GSLSPNO(,@05)                                   0334
         STC   @02,HEBSP(,@08)                                     0334
*               HEBLN=GSLGETLN;     /* INIT LENGTH IN NEW HDR ELEM   */
         MVC   HEBLN(3,@08),GSLGETLN(@05)                          0335
*               HEBBLKPT=GSLPTR;    /* PT HDR ELEM TO NEW CORE BLK   */
         L     @02,GSLPTR(,@05)                                    0336
         ST    @02,HEBBLKPT(,@08)                                  0336
*               HEBNBYTE=GSLPTR;    /* INIT AVAILABLE SPACE PTR      */
         ST    @02,HEBNBYTE(,@08)                                  0337
*               HEBAVSP=GSLGETLN;   /* INIT AMNT OF AVAILABLE SPACE  */
         MVC   HEBAVSP(3,@08),GSLGETLN(@05)                        0338
*               IF GSLKEY5=ON THEN  /* WAS CORE GOTTEN IN KEY 5      */
         TM    GSLKEY5(@05),B'01000000'                            0339
         BNO   @RF00339                                            0339
*                 DO;               /* YES, CHECK TCB OWNERSHIP      */
*                   HEBKEY5=ON;     /* INDICATE CORE GOTTEN IN KEY 5 */
         OI    HEBKEY5(@08),B'01000000'                            0341
*                   IF GSLJSTCB=ON THEN/* IS CORE OWNED BY JOBSTEP 0342
*                                      TCB                           */
         TM    GSLJSTCB(@05),B'00000100'                           0342
         BNO   @RF00342                                            0342
*                     HEBJSTCB=ON;  /* IND CORE OWNED BY JOBSTEP TCB */
         OI    HEBJSTCB(@08),B'10000000'                           0343
*                 END;                                             0344
@RF00342 DS    0H                                                  0345
*               IF GSLGSRKT=ON THEN /* CORE GOTTEN IN GSR KEY?     0345
*                                                            @Z40ESSR*/
@RF00339 LR    @08,GSNDEX                                          0345
         MH    @08,@CH00096                                        0345
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0345
         TM    GSLGSRKT(@08),B'00100000'                           0345
         BNO   @RF00345                                            0345
*                 DO;               /*                       @Z40ESSR*/
*                   HEBGSRKT=ON;    /* IND AS SUCH IN HEB    @Z40ESSR*/
         L     @08,OPWVHDRE(,RCORE)                                0347
         OI    HEBGSRKT(@08),B'00100000'                           0347
*                   HEBGSRK=DXUKEY; /* SAVE GSR KEY IN HEB   @Z40ESSR*/
         L     @05,OPWCOMWA(,RCORE)                                0348
         IC    @02,DXUKEY(,@05)                                    0348
         STC   @02,HEBGSRK(,@08)                                   0348
*                 END;              /*                       @Z40ESSR*/
*               IF GSLIOSUP=ON THEN /* IS THIS A SPECIAL REQ BLLK    */
@RF00345 LR    @08,GSNDEX                                          0350
         MH    @08,@CH00096                                        0350
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0350
         TM    GSLIOSUP(@08),B'00010000'                           0350
         BNO   @RF00350                                            0350
*                 HEBIOSUP=ON;      /* YES, REFLECT SAME IN THE HEB  */
         L     @08,OPWVHDRE(,RCORE)                                0351
         OI    HEBIOSUP(@08),B'00010000'                           0351
*               RFY                                                0352
*                 HEBHDREL BASED(MHEBPTR);/* BASE FOR HEB HDR ELEM   */
@RF00350 DS    0H                                                  0353
*               OPWVHDRE->HEBELCHN=MHEBPTR;/* CHAIN NEW HDR ELEMENT
*                                      TO FIRST HDR ELEM ON CHAIN    */
         L     @08,OPWVHDRE(,RCORE)                                0353
         L     @05,OPWVANCP(,RCORE)                                0353
         L     @02,MHEBPTR(,@05)                                   0353
         ST    @02,HEBELCHN(,@08)                                  0353
*               MHEBPTR=OPWVHDRE;   /* CHAIN NEW HEB HDR ELEM TO ITS
*                                      ANCHOR BLOCK                  */
         ST    @08,MHEBPTR(,@05)                                   0354
*             END;                                                 0355
*         END;                                                     0356
*     END;                                                         0357
*   ELSE                                                           0358
*     ;                             /* NEW CORE BLK NOT NEEDED       */
@RF00305 DS    0H                                                  0359
*   GSLPTR=HEBNBYTE;                /* RETURN ADDR OF GOTTEN CORE    */
         LR    @08,GSNDEX                                          0359
         MH    @08,@CH00096                                        0359
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0359
         L     @05,OPWVANCP(,RCORE)                                0359
         L     @05,MHEBPTR(,@05)                                   0359
         L     @02,HEBNBYTE(,@05)                                  0359
         ST    @02,GSLPTR(,@08)                                    0359
*   HEBNBYTE=HEBNBYTE+GSLREQLN;     /* UPDATE AVAIL SPACE PTR        */
         L     @08,GSLREQLN-1(,@08)                                0360
         LA    @08,0(,@08)                                         0360
         ALR   @02,@08                                             0360
         ST    @02,HEBNBYTE(,@05)                                  0360
*   HEBAVSP=HEBAVSP-GSLREQLN;       /* DECR AVAILABLE SPACE          */
         LCR   @08,@08                                             0361
         L     @02,HEBAVSP-1(,@05)                                 0361
         LA    @02,0(,@02)                                         0361
         ALR   @08,@02                                             0361
         STCM  @08,7,HEBAVSP(@05)                                  0361
*   RFY                                                            0362
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   RET=OPWVSAVE(SAVENDEX);         /* RESTORE RETURN ADDRESS        */
         LR    @08,SAVENDEX                                        0363
         SLA   @08,2                                               0363
         L     RET,OPWVSAVE-4(@08,RCORE)                           0363
*   RFY                                                            0364
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   SAVENDEX=SAVENDEX-1;            /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0365
*   END GETSPACE;                   /* RETURN TO THE CALLER          */
         B     @EL00004                                            0366
*                                                                  0367
*/********************************************************************/
*/*                                                                  */
*/* FUNCTION: THIS ROUTINE IS USED TO GET CORE FOR DIRECT REQUESTS   */
*/*           OR FOR NEW BLOCKS.                                     */
*/*                                                                  */
*/* INPUTS:   GETSPACE PARAMETER LIST WITHIN THE OPEN WORK AREA.     */
*/*                                                                  */
*/* OUTPUTS:  A POINTER TO THE GOTTEN CORE IN GSLPTR OR ZERO IF      */
*/*           UNABLE TO OBTAIN CORE.                                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0367
*GETCORE:                                                          0367
*   PROC OPTIONS(NOSAVE);                                          0367
GETCORE  DS    0H                                                  0368
*   SAVENDEX=SAVENDEX+1;            /* POINT TO NEXT SAVE AREA       */
         AL    SAVENDEX,@CF00082                                   0368
*   RFY                                                            0369
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   OPWVSAVE(SAVENDEX)=RET;         /* SAVE RETURN ADDRESS           */
         LR    @15,SAVENDEX                                        0370
         SLA   @15,2                                               0370
         ST    RET,OPWVSAVE-4(@15,RCORE)                           0370
*   RFY                                                            0371
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   IF GSLNOCSL^=ON THEN            /* IS A CSL ELEM TO BE BUILT     */
         LR    @08,GSNDEX                                          0372
         MH    @08,@CH00096                                        0372
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0372
         TM    GSLNOCSL(@08),B'00001000'                           0372
         BO    @RF00372                                            0372
*     DO;                           /* YES, BUILD A CSL ELEM         */
*       CALL GETCSLEL;              /* GET AN UNUSED CSL ELEMENT     */
         BAL   @14,GETCSLEL                                        0374
*       IF OPWVCSLE=0 THEN          /* WAS A CSL ELEMENT OBTAINED    */
         SLR   @08,@08                                             0375
         C     @08,OPWVCSLE(,RCORE)                                0375
         BNE   @RF00375                                            0375
*         DO;                       /* NO, TERMINATE REQUEST         */
*           GSLPTR=0;               /* INDICATE REQUEST FAILED       */
         LR    @05,GSNDEX                                          0377
         MH    @05,@CH00096                                        0377
         LA    @05,OPWVGSPL-12(@05,RCORE)                          0377
         ST    @08,GSLPTR(,@05)                                    0377
*           RFY                                                    0378
*             RET RSTD;             /* RESTRICT RETURN REGISTER      */
*           RET=OPWVSAVE(SAVENDEX); /* RESTORE RETURN ADDRESS        */
         LR    @08,SAVENDEX                                        0379
         SLA   @08,2                                               0379
         L     RET,OPWVSAVE-4(@08,RCORE)                           0379
*           RFY                                                    0380
*             RET UNRSTD;           /* DROP REGISTER RESTRICTION     */
*           SAVENDEX=SAVENDEX-1;    /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0381
*           RETURN;                 /* RETURN TO THE CALLER          */
@EL00005 DS    0H                                                  0382
@EF00005 DS    0H                                                  0382
@ER00005 BR    @14                                                 0382
*         END;                                                     0383
*       ELSE                                                       0384
*         ;                         /* A NEW CSL WAS OBTAINED        */
@RF00375 DS    0H                                                  0385
*       RFY                                                        0385
*         CSLENTRY BASED(OPWVCSLE); /* EST BASE FOR NEW CSL ELEM     */
*     END;                                                         0386
*   ELSE                                                           0387
*     ;                             /* NO CSL IS TO BE BUILT DET BNDY
*                                      ALIGNMENT FOR GETMAIN         */
@RF00372 DS    0H                                                  0388
*   GSLGETLN=(GSLGETLN+7)&-DOUBLWDL;/* ROUND REQ LNG TO A DBL WORD   */
         LR    @08,GSNDEX                                          0388
         MH    @08,@CH00096                                        0388
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0388
         LA    @05,7                                               0388
         L     @02,GSLGETLN-1(,@08)                                0388
         LA    @02,0(,@02)                                         0388
         ALR   @05,@02                                             0388
         N     @05,@CF03173                                        0388
         STCM  @05,7,GSLGETLN(@08)                                 0388
*   IF GSLKEY5=ON&GSLSPNO=RDEBPOOL THEN/* BR ENTRY TO GETMAIN REQD   */
         TM    GSLKEY5(@08),B'01000000'                            0389
         BNO   @RF00389                                            0389
         CLI   GSLSPNO(@08),230                                    0389
         BNE   @RF00389                                            0389
*     DO;                           /* YES, OBTAIN LOCAL LOCK FIRST
*                                      OBTAIN THE LOCAL LOCK         */
*       OPWVRG13=R13;               /* SAVE REG 13                   */
         ST    R13,OPWVRG13(,RCORE)                                0391
*       DO;                         /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) RELATED(GETMAIN,ID
*                                      A0192M(GETCORE))              */
*         RFY                                                      0393
*          (GPR11P,                                                0393
*           GPR12P,                                                0393
*           GPR13P,                                                0393
*           GPR14P) RSTD;                                          0393
*         GPR13P=PSALITA;           /* ADDRESS OF LOCK INTERFACE   0394
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0394
*         GEN(LM GPR11P,GPR13P,576(GPR13P));/* LOAD LOCKWORD, CLHT 0395
*                                      AND ENTRY ADRS.               */
         LM GPR11P,GPR13P,576(GPR13P)
*         GEN(BALR GPR14P,GPR13P);  /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*         RFY                                                      0397
*          (GPR11P,                                                0397
*           GPR12P,                                                0397
*           GPR13P,                                                0397
*           GPR14P) UNRSTD;                                        0397
*       END;                        /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) RELATED(GETMAIN,ID
*                                      A0192M(GETCORE))              */
*       R12=OPWVRG12;               /* RESTORE SECOND BASE REG       */
         L     R12,OPWVRG12(,RCORE)                                0399
*       RFY                                                        0400
*        (R4,                                                      0400
*         R7,                                                      0400
*         R11) RSTD;                /* RESTRICT REGS USED BY GETMAIN */
*       R11=RBASEA;                 /* SAVE MODULE BASE REGISTER     */
         LR    R11,RBASEA                                          0401
*       R13=RCORE;                  /* SAVE PTR TO O/C/E WORK AREA   */
         LR    R13,RCORE                                           0402
*       RFY                                                        0403
*         IDAOPWRK BASED(R13);      /* EST NEW BASE FOR VSAM W/A     */
*       GEN REFS(RBASEA,R11);                                      0404
*                                   /* RE-ESTABLISH MODULE BASE
          DROP  RBASEA                 DROP MODULE BASE REGISTER
          USING @PSTART,R11            ESTABLISH ADDRESSABILITY
*       IF GSLJSTCB=ON THEN         /* CHECK CORE TCB OWNERSHIP      */
         LR    @10,GSNDEX                                          0405
         MH    @10,@CH00096                                        0405
         LA    @10,OPWVGSPL-12(@10,R13)                            0405
         TM    GSLJSTCB(@10),B'00000100'                           0405
         BNO   @RF00405                                            0405
*         R4=TCBJSTCB;              /* PT TO JOBSTEP TCB FOR GETMAIN */
         L     @10,PSATNEW                                         0406
         L     R4,TCBJSTCB(,@10)                                   0406
*       ELSE                        /* NOT JOB STEP RELATED          */
*         R4=ADDR(TCB);             /* PT TO CURRENT TCB FOR GETMAIN */
         B     @RC00405                                            0407
@RF00405 L     R4,PSATNEW                                          0407
*       R7=PSAAOLD;                 /* POINT TO ASCB FOR GETMAIN GET
*                                      CORE FOR THE DEB BLOCK        */
@RC00405 L     R7,PSAAOLD                                          0408
*       DO;                         /* GETMAIN (RC) LV(GSLGETLN)   0409
*                                      SP(RDEBPOOL) KEY(5) BRANCH    */
*         RESPECIFY                                                0410
*          (GPR01F,                                                0410
*           GPR03F,                                                0410
*           GPR00F) RESTRICTED;                                    0410
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0411
*         GPR03F=0;                 /* RC-TYPE GETMAIN               */
         SLR   GPR03F,GPR03F                                       0412
*         GPR00F=GSLGETLN;          /* LENGTH REQUESTED              */
         LR    @10,GSNDEX                                          0413
         MH    @10,@CH00096                                        0413
         LA    @10,OPWVGSPL-12(@10,R13)                            0413
         L     GPR00F,GSLGETLN-1(,@10)                             0413
         ICM   GPR00F,8,@CB03185                                   0413
*         GPR03F=GPR03F×((RDEBPOOL)*256);/* SP IN BYTE 2             */
         O     GPR03F,@CF03174                                     0414
*         GPR03F=GPR03F×((5)*65536*16);/* KEY IN BYTE 1              */
         O     GPR03F,@CF03176                                     0415
*         CALL CVTCRMN;             /* BRANCH ENTRY POINT            */
         L     @10,CVTPTR                                          0416
         L     @15,CVTCRMN(,@10)                                   0416
         BALR  @14,@15                                             0416
*         RESPECIFY                                                0417
*          (GPR01F,                                                0417
*           GPR03F,                                                0417
*           GPR00F) UNRESTRICTED;                                  0417
*       END;                        /* GETMAIN (RC) LV(GSLGETLN)   0418
*                                      SP(RDEBPOOL) KEY(5) BRANCH    */
*       RBASEA=R11;                 /* RESTORE MODULE BASE REGISTER  */
         LR    RBASEA,R11                                          0419
*       RCORE=R13;                  /* RESTORE O/C/E WORK AREA PTR   */
         LR    RCORE,R13                                           0420
*       RFY                                                        0421
*         IDAOPWRK BASED(RCORE);    /* RE-ESTABLISH BASE FOR VSAM W/A*/
*       GEN REFS(RBASEA,R11);                                      0422
*                                   /* RE-ESTABLISH MODULE BASE
          DROP  R11                    DROP MODULE BASE REGISTER
          USING @PSTART,RBASEA         ESTABLISH ADDRESSABILITY
*       RFY                                                        0423
*        (R4,                                                      0423
*         R7,                                                      0423
*         R11) UNRSTD;              /* DROP REGISTER RESTRICTIONS  0423
*                                      RELEASE THE LOCAL LOCK        */
*       DO;                         /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(GETMAIN,IDA0192M(GETCO
*                                      RE))                          */
*         RFY                                                      0425
*          (GPR11P,                                                0425
*           GPR12P,                                                0425
*           GPR13P,                                                0425
*           GPR14P) RSTD;                                          0425
*         GPR13P=PSALITA;           /* ADDRESS OF LOCK INTERFACE   0426
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0426
*         GEN(LM GPR11P,GPR13P,588(GPR13P));/* LOAD LOCKWORD, CLHT 0427
*                                      AND ENTRY ADRS.               */
         LM GPR11P,GPR13P,588(GPR13P)
*         GEN(BALR GPR14P,GPR13P);  /* BALR TO SETLOCK RTN.          */
         BALR GPR14P,GPR13P
*         RFY                                                      0429
*          (GPR11P,                                                0429
*           GPR12P,                                                0429
*           GPR13P,                                                0429
*           GPR14P) UNRSTD;                                        0429
*       END;                        /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(GETMAIN,IDA0192M(GETCO
*                                      RE))                          */
*       LM(R12,R13,OPWVLSAV);       /* RESTORE REGS USED BY SETLOCK  */
         LM    R12,R13,OPWVLSAV(RCORE)                             0431
*     END;                                                         0432
*   ELSE                            /* NO, USE SVC GETMAIN           */
*     DO;                           /* CHECK FOR KEY REQUESTS        */
         B     @RC00389                                            0433
@RF00389 DS    0H                                                  0434
*       IF GSLKEY5=ON THEN          /* IS REQUEST FOR CORE IN KEY 5  */
         LR    @08,GSNDEX                                          0434
         MH    @08,@CH00096                                        0434
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0434
         TM    GSLKEY5(@08),B'01000000'                            0434
         BNO   @RF00434                                            0434
*         DO;                       /* MODESET EXTKEY(DATAMGT)       */
*           SPKA(80);               /* SET PSW KEY                   */
         LA    @08,80                                              0436
         SPKA  0(@08)                                              0436
*         END;                      /* MODESET EXTKEY(DATAMGT) YES,
*                                      MODESET TO RUN IN KEY 5       */
*       ELSE                        /* NO, CHECK FOR GSR REQ @Z40ESSR*/
*         IF GSLGSRKT=ON THEN       /* REQ FOR CORE IN GSR KEY?    0438
*                                                            @Z40ESSR*/
         B     @RC00434                                            0438
@RF00434 LR    @08,GSNDEX                                          0438
         MH    @08,@CH00096                                        0438
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0438
         TM    GSLGSRKT(@08),B'00100000'                           0438
         BNO   @RF00438                                            0438
*           DO;                     /*                       @Z40ESSR*/
*             RFY                                                  0440
*               R1 RSTD;            /*                       @Z40ESSR*/
*             R1=DXUKEY;            /* LOAD GSR KEY INTO REG @Z40ESSR*/
         L     @08,OPWCOMWA(,RCORE)                                0441
         SLR   R1,R1                                               0441
         IC    R1,DXUKEY(,@08)                                     0441
*             SPKA(R1);             /* MODESET TO GSR KEY    @Z40ESSR*/
         SPKA  0(R1)                                               0442
*             RFY                                                  0443
*               R1 UNRSTD;          /*                       @Z40ESSR*/
*           END;                    /*                       @Z40ESSR*/
*         ELSE                                                     0445
*           ;                       /* NO, CONTINUE TO RUN IN KEY 0  */
@RF00438 DS    0H                                                  0446
*       IF GSLPGBDY=ON THEN         /* IS CORE TO BE ON A PAGE BNDRY
*                                      YES, GET CORE ON A PAGE BNDY  */
@RC00434 LR    @08,GSNDEX                                          0446
         MH    @08,@CH00096                                        0446
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0446
         TM    GSLPGBDY(@08),B'10000000'                           0446
         BNO   @RF00446                                            0446
*/*       ? GETMAIN (RC) LV(GSLGETLN) SP(GSLSPNO) BNDRY              */
*                                                                  0447
*         DO;                       /* MANUALY EXPAND GETMAIN TO FIX
*                                      EXPANSION OF BNDRY PARAMETER  */
*           RFY                                                    0448
*            (GPR01F,                                              0448
*             GPR15F,                                              0448
*             GPR00F) RSTD;         /* RESTRICT REGISTERS            */
*           GPR01F=0;               /* REGISTER 1 MUST BE ZERO       */
         SLR   GPR01F,GPR01F                                       0449
*           GPR15F=0;               /* RC-TYPE GETMIAN               */
         SLR   GPR15F,GPR15F                                       0450
*           GPR00F=GSLGETLN;        /* LENGTH REQUESTED              */
         L     GPR00F,GSLGETLN-1(,@08)                             0451
         ICM   GPR00F,8,@CB03185                                   0451
*           GPR15F=GPR15F×((GSLSPNO)*256);/* SUBPOOL IN BYTE 2       */
         SLR   @14,@14                                             0452
         IC    @14,GSLSPNO(,@08)                                   0452
         SLA   @14,8                                               0452
         OR    GPR15F,@14                                          0452
*           GPR15F=GPR15F×'00000004'X;/* INDICATE PAGE BOUNDARY      */
         O     GPR15F,@CF03113                                     0453
*           SVC(120);               /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0454
*           RFY                                                    0455
*            (GPR01F,                                              0455
*             GPR15F,                                              0455
*             GPR00F) UNRSTD;       /* DROP REG RESTRICTS            */
*         END;                      /* END GETMAIN EXPANSION         */
*       ELSE                        /* PAGE BOUNDRY NOT REQUIRED     */
*         DO;                       /* GETMAIN (RC) LV(GSLGETLN)   0457
*                                      SP(GSLSPNO)                   */
         B     @RC00446                                            0457
@RF00446 DS    0H                                                  0458
*           RESPECIFY                                              0458
*            (GPR01F,                                              0458
*             GPR15F,                                              0458
*             GPR00F) RESTRICTED;                                  0458
*           GPR01F=0;               /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0459
*           GPR15F=0;               /* RC-TYPE GETMAIN               */
         SLR   GPR15F,GPR15F                                       0460
*           GPR00F=GSLGETLN;        /* LENGTH REQUESTED              */
         LR    @14,GSNDEX                                          0461
         MH    @14,@CH00096                                        0461
         LA    @14,OPWVGSPL-12(@14,RCORE)                          0461
         L     GPR00F,GSLGETLN-1(,@14)                             0461
         ICM   GPR00F,8,@CB03185                                   0461
*           GPR15F=GPR15F×((GSLSPNO)*256);/* SP IN BYTE 2            */
         SLR   @08,@08                                             0462
         IC    @08,GSLSPNO(,@14)                                   0462
         SLA   @08,8                                               0462
         OR    GPR15F,@08                                          0462
*           SVC(120);               /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0463
*           RESPECIFY                                              0464
*            (GPR01F,                                              0464
*             GPR15F,                                              0464
*             GPR00F) UNRESTRICTED;                                0464
*         END;                      /* GETMAIN (RC) LV(GSLGETLN)   0465
*                                      SP(GSLSPNO)                   */
*       DO;                         /* MODESET EXTKEY(SUPR)          */
@RC00446 DS    0H                                                  0467
*         SPKA(0);                  /* SET PSW KEY                   */
         SLR   @08,@08                                             0467
         SPKA  0(@08)                                              0467
*       END;                        /* MODESET EXTKEY(SUPR) RETURN TO
*                                      KEY O                         */
*     END;                                                         0469
*   RFY                                                            0470
*    (R1,                                                          0470
*     RETCODE) RSTD;                /* RESTRICT GETMAIN REGISTERS    */
@RC00389 DS    0H                                                  0471
*   IF RETCODE^=0 THEN              /* WAS GETMAIN SUCCESSFUL        */
         LTR   RETCODE,RETCODE                                     0471
         BZ    @RF00471                                            0471
*     DO;                           /* NO, TERMINATE REQUEST         */
*       RFY                                                        0473
*         RETCODE UNRSTD;           /* DROP REGISTER RESTRICTION     */
*       RFY                                                        0474
*         IDACSL BASED(BIBCSL);     /* EST BASE FOR CORE SAVE LIST   */
*       IF GSLNOCSL^=ON THEN        /* WAS A CSL ELEMENT GOTTEN      */
         LR    @08,GSNDEX                                          0475
         MH    @08,@CH00096                                        0475
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0475
         TM    GSLNOCSL(@08),B'00001000'                           0475
         BO    @RF00475                                            0475
*         CSLACTEN=CSLACTEN-1;      /* YES, IND CSL ELEM NOT ACTIVE  */
         L     @08,OPWBIB(,RCORE)                                  0476
         L     @08,BIBCSL(,@08)                                    0476
         LH    @05,CSLACTEN(,@08)                                  0476
         BCTR  @05,0                                               0476
         STH   @05,CSLACTEN(,@08)                                  0476
*       ELSE                                                       0477
*         ;                         /* NO, CONTINUE TERMINATION      */
@RF00475 DS    0H                                                  0478
*       GSLPTR=0;                   /* IND REQUEST FAILED            */
         LR    @08,GSNDEX                                          0478
         MH    @08,@CH00096                                        0478
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0478
         SLR   @05,@05                                             0478
         ST    @05,GSLPTR(,@08)                                    0478
*       RFY                                                        0479
*         RET RSTD;                 /* RESTRICT RETURN REGISTER      */
*       RET=OPWVSAVE(SAVENDEX);     /* RESTORE RETURN ADDRESS        */
         LR    @08,SAVENDEX                                        0480
         SLA   @08,2                                               0480
         L     RET,OPWVSAVE-4(@08,RCORE)                           0480
*       RFY                                                        0481
*         RET UNRSTD;               /* DROP REGISTER RESTRICTION     */
*       SAVENDEX=SAVENDEX-1;        /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0482
*       RETURN;                     /* RETURN TO THE CALLER          */
         B     @EL00005                                            0483
*     END;                                                         0484
*   ELSE                            /* GETMAIN WAS SUCCESSFUL        */
*     DO;                           /* FREE EXCESS CORE IF ANY       */
@RF00471 DS    0H                                                  0486
*       GSLPTR=R1;                  /* GET ADDRESS OF GOTTEN CORE    */
         LR    @08,GSNDEX                                          0486
         MH    @08,@CH00096                                        0486
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0486
         ST    R1,GSLPTR(,@08)                                     0486
*       RFY                                                        0487
*         R1 UNRSTD;                /* DROP REGISTER RESTRICTION     */
*       RFY                                                        0488
*        (R12,                                                     0488
*         R13,                                                     0488
*         R14,                                                     0488
*         R15) RSTD;                /* RESTRICT REGISTER USAGE       */
*       OPWVRG13=R13;               /* SAVE R13 IN SAVE AREA         */
         ST    R13,OPWVRG13(,RCORE)                                0489
*       R12=GSLPTR;                 /* POINT TO CORE TO BE CLEARED   */
         LR    @05,GSNDEX                                          0490
         MH    @05,@CH00096                                        0490
         LA    @05,OPWVGSPL-12(@05,RCORE)                          0490
         L     @05,GSLPTR(,@05)                                    0490
         LR    R12,@05                                             0490
*       R13=GSLGETLN;               /* AMOUNT OF CORE TO BE CLEARED  */
         L     R13,GSLGETLN-1(,@08)                                0491
         LA    R13,0(,R13)                                         0491
*       R15=0;                      /* PADDING CHARACTER             */
         SLR   R15,R15                                             0492
*       MVCL(R12,R14);              /* CLEAR GOTTEN CORE             */
         MVCL  R12,R14                                             0493
*       LM(R12,R13,OPWVLSAV);       /* RESTORE BASE REG & REG 13     */
         LM    R12,R13,OPWVLSAV(RCORE)                             0494
*       RFY                                                        0495
*        (R12,                                                     0495
*         R13,                                                     0495
*         R14,                                                     0495
*         R15) UNRSTD;              /* DROP REG RESTRICTIONS         */
*       IF GSLNOCSL^=ON THEN        /* WAS A CSL ELEM GOTTEN FOR REQ */
         LR    @08,GSNDEX                                          0496
         MH    @08,@CH00096                                        0496
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0496
         TM    GSLNOCSL(@08),B'00001000'                           0496
         BO    @RF00496                                            0496
*         DO;                       /* YES, INIT CSL ELEMENT         */
*           CSLPOOLN=GSLSPNO;       /* INIT SUBPOOL IN CSL ENTRY     */
         L     @05,OPWVCSLE(,RCORE)                                0498
         IC    @02,GSLSPNO(,@08)                                   0498
         STC   @02,CSLPOOLN(,@05)                                  0498
*           CSLCORLN=GSLGETLN;      /* INIT LENGTH OF GOTTEN CORE    */
         MVC   CSLCORLN(3,@05),GSLGETLN(@08)                       0499
*           CSLCORPT=GSLPTR;        /* INIT PTR TO GOTTEN CORE       */
         L     @02,GSLPTR(,@08)                                    0500
         ST    @02,CSLCORPT(,@05)                                  0500
*           CSLANCPT=0;             /* INIT ANCHOR PTR TO ZERO TO IND
*                                      NO HEB HDR ELEM ASSOC WITH CSL*/
         SLR   @02,@02                                             0501
         STCM  @02,7,CSLANCPT(@05)                                 0501
*           IF GSLKEY5=ON THEN      /* WAS CORE GOTTEN IN KEY 5      */
         TM    GSLKEY5(@08),B'01000000'                            0502
         BNO   @RF00502                                            0502
*             DO;                   /* YES, CHECK TCB OWNERSHIP      */
*               CSLKEY5=ON;         /* INDICATE CORE GOTTEN IN KEY 5 */
         OI    CSLKEY5(@05),B'10000000'                            0504
*               IF GSLJSTCB=ON THEN /* IS CORE OWNED BY JOBSTEP TCB  */
         TM    GSLJSTCB(@08),B'00000100'                           0505
         BNO   @RF00505                                            0505
*                 CSLJSTCB=ON;      /* IND CORE OWNED BY JOBSTEP TCB */
         OI    CSLJSTCB(@05),B'00100000'                           0506
*             END;                                                 0507
@RF00505 DS    0H                                                  0508
*           IF GSLGSRKT=ON THEN     /* CORE GOTTEN IN GSR KEY?     0508
*                                                            @Z40ESSR*/
@RF00502 LR    @08,GSNDEX                                          0508
         MH    @08,@CH00096                                        0508
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0508
         TM    GSLGSRKT(@08),B'00100000'                           0508
         BNO   @RF00508                                            0508
*             CSLGSRKT=ON;          /* IND GSR KEY TYPE IN CSL     0509
*                                                            @Z40ESSR*/
         L     @08,OPWVCSLE(,RCORE)                                0509
         OI    CSLGSRKT(@08),B'01000000'                           0509
*         END;                                                     0510
*       ELSE                                                       0511
*         ;                         /* NO CSL ELEMENT WAS GOTTEN     */
@RF00496 DS    0H                                                  0512
*     END;                                                         0512
@RC00496 DS    0H                                                  0513
*   RFY                                                            0513
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   RET=OPWVSAVE(SAVENDEX);         /* RESTORE RETURN ADDRESS        */
         LR    @08,SAVENDEX                                        0514
         SLA   @08,2                                               0514
         L     RET,OPWVSAVE-4(@08,RCORE)                           0514
*   RFY                                                            0515
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   SAVENDEX=SAVENDEX-1;            /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0516
*   END GETCORE;                    /* RETURN TO THE CALLER          */
         B     @EL00005                                            0517
*                                                                  0518
*/********************************************************************/
*/*                                                                  */
*/* FUNCTION: THIS ROUTINE IS USED TO GET A HEADER ELEMENT FROM THE  */
*/*           FREE QUEUE OR TO GET A NEW HEADER ELEMENT BLOCK IF     */
*/*           THERE ARE NO FREE HEADER ELEMENTS ON THE FREE QUEUE.   */
*/*                                                                  */
*/* INPUTS:   POINTERS IN THE BIB TO THE HEADER ELEMENT FREE QUEUE   */
*/*           AND THE PROTECTED SPHERE BLOCK.                        */
*/*                                                                  */
*/* OUTPUTS:  A POINTER TO A FREE HEADER ELEMENT IN OPWVHDRE OR ZERO */
*/*           IF UNABLE TO OBTAIN A FREE HEADER ELEMENT.             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0518
*GETHDREL:                                                         0518
*   PROC OPTIONS(NOSAVE);                                          0518
GETHDREL DS    0H                                                  0519
*   SAVENDEX=SAVENDEX+1;            /* POINT TO NEXT SAVE AREA       */
         LA    @08,1                                               0519
         ALR   SAVENDEX,@08                                        0519
*   RFY                                                            0520
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   OPWVSAVE(SAVENDEX)=RET;         /* SAVE RETURN ADDRESS           */
         LR    @15,SAVENDEX                                        0521
         SLA   @15,2                                               0521
         ST    RET,OPWVSAVE-4(@15,RCORE)                           0521
*   RFY                                                            0522
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   IF BIBHEBFQ=0 THEN              /* ANY FREE HEB HDR ELEMENTS     */
         L     @05,OPWBIB(,RCORE)                                  0523
         L     @02,BIBHEBFQ(,@05)                                  0523
         LTR   @02,@02                                             0523
         BNZ   @RF00523                                            0523
*     DO;                           /* NO, BUILD A NEW HEB BLOCK     */
*       GSNDEX=GSNDEX+1;            /* PT TO NEXT GETSPACE PARM LIST */
         ALR   GSNDEX,@08                                          0525
*       GSLREQLN=LENGTH(IDAHEB);    /* INIT REQ LENGTH TO LNG OF HEB */
         LR    @08,GSNDEX                                          0526
         MH    @08,@CH00096                                        0526
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0526
         MVC   GSLREQLN(3,@08),@CF03177+1                          0526
*       OPWVANCS=ADDR(BIBPRSPH);    /* SET UP PTR TO PROTECTED SPHERE
*                                      BLOCK PTR                     */
         LA    @05,BIBPRSPH(,@05)                                  0527
         ST    @05,OPWVANCS(,RCORE)                                0527
*       IF OPWLSR=ON THEN           /* IF LSR OPEN           @OZ04230*/
         TM    OPWLSR(RCORE),B'00100000'                           0528
         BNO   @RF00528                                            0528
*         GSLSPNO=PRTBLKPL;         /* SUBPOOL IN MEMORY     @OZ04230*/
         MVI   GSLSPNO(@08),X'FC'                                  0529
*       ELSE                        /* NOT LSR, SO           @OZ04230*/
*         GSLSPNO=PRTSPPL;          /* USE SUBPOOL IN CSA    @OZ04230*/
         B     @RC00528                                            0530
@RF00528 LR    @08,GSNDEX                                          0530
         MH    @08,@CH00096                                        0530
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0530
         MVI   GSLSPNO(@08),X'F1'                                  0530
*       GSLNOCSL=ON;                /* IND NO CSL ELEM IS TO BE BUILT*/
@RC00528 LR    @08,GSNDEX                                          0531
         MH    @08,@CH00096                                        0531
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0531
         OI    GSLNOCSL(@08),B'00001000'                           0531
*       CALL PRTSPREQ;              /* GET SPACE FOR A NEW HEB BLOCK */
         BAL   @14,PRTSPREQ                                        0532
*       IF GSLPTR=0 THEN            /* WAS A NEW HEB BLOCK GOTTEN    */
         SLR   @08,@08                                             0533
         LR    @05,GSNDEX                                          0533
         MH    @05,@CH00096                                        0533
         LA    @05,OPWVGSPL-12(@05,RCORE)                          0533
         C     @08,GSLPTR(,@05)                                    0533
         BNE   @RF00533                                            0533
*         DO;                       /* NO, TERMINATE REQUEST         */
*           OPWVHDRE=0;             /* IND UNABLE TO GET HDR ELEMENT */
         ST    @08,OPWVHDRE(,RCORE)                                0535
*           GSNDEX=GSNDEX-1;        /* POINT TO PREVIOUS PARM LIST   */
         BCTR  GSNDEX,0                                            0536
*           RFY                                                    0537
*             RET RSTD;             /* RESTRICT RETURN REGISTER      */
*           RET=OPWVSAVE(SAVENDEX); /* RESTORE RETURN ADDRESS        */
         LR    @08,SAVENDEX                                        0538
         SLA   @08,2                                               0538
         L     RET,OPWVSAVE-4(@08,RCORE)                           0538
*           RFY                                                    0539
*             RET UNRSTD;           /* DROP REGISTER RESTRICTION     */
*           SAVENDEX=SAVENDEX-1;    /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0540
*           RETURN;                 /* RETURN TO THE CALLER          */
@EL00006 DS    0H                                                  0541
@EF00006 DS    0H                                                  0541
@ER00006 BR    @14                                                 0541
*         END;                                                     0542
*       ELSE                        /* A NEW HEB WAS GOTTEN          */
*         DO;                       /* INIT HEADER OF NEW HEB BLOCK  */
@RF00533 DS    0H                                                  0544
*           RFY                                                    0544
*             IDAHEB BASED(GSLPTR); /* EST BASE FOR NEW HEB BLOCK    */
*           HEBID=IDXHEB;           /* PUT ID OF BLOCK INTO HEB      */
         LR    @08,GSNDEX                                          0545
         MH    @08,@CH00096                                        0545
         LA    @08,OPWVGSPL-12(@08,RCORE)                          0545
         L     @05,GSLPTR(,@08)                                    0545
         MVI   HEBID(@05),B'00010011'                              0545
*           HEBLEN=GSLREQLN;        /* INIT LENGTH OF HEB BLOCK      */
         L     @08,GSLREQLN-1(,@08)                                0546
         LA    @08,0(,@08)                                         0546
         STH   @08,HEBLEN(,@05)                                    0546
*           HEBCNT=DIM(HEBHDELS);   /* INIT NUMBER OF HDR ELEMENTS   */
         MVC   HEBCNT(2,@05),@CH00098                              0547
*           HEBNHEB=BIBHEBPT;       /* CHAIN NEW HEB TO FIRST HEB ON
*                                      CHAIN OF HEB(S)               */
         L     @08,OPWBIB(,RCORE)                                  0548
         L     @02,BIBHEBPT(,@08)                                  0548
         ST    @02,HEBNHEB(,@05)                                   0548
*           BIBHEBPT=GSLPTR;        /* PUT NEW HEB ON THE HEB CHAIN  */
         ST    @05,BIBHEBPT(,@08)                                  0549
*           BIBHEBFQ=ADDR(HEBHDELS);/* PT HEB FREE QUEUE TO FIRST  0550
*                                      ELEMENT IN THE NEW HEB        */
         LA    @05,HEBHDELS(,@05)                                  0550
         ST    @05,BIBHEBFQ(,@08)                                  0550
*           DO INDEX1=1 TO DIM(HEBHDELS)-1 BY 1;/* CHAIN NEW HDR   0551
*                                      ELEMENTS TOGETHER             */
         LA    INDEX1,1                                            0551
@DL00551 DS    0H                                                  0552
*             RFY                                                  0552
*               HEBHDREL BASED(ADDR(HEBHDELS(INDEX1)));/* EST BASE 0552
*                                      FOR HEB HEADER ELEMENTS       */
*             HEBELCHN=ADDR(HEBHDELS(INDEX1+1));/* CHAIN THIS HDR  0553
*                                      ELEMENT TO THE NEXT ONE       */
         LR    @08,INDEX1                                          0553
         MH    @08,@CH00102                                        0553
         LR    @02,GSNDEX                                          0553
         MH    @02,@CH00096                                        0553
         LA    @02,OPWVGSPL-12(@02,RCORE)                          0553
         L     @02,GSLPTR(,@02)                                    0553
         LA    @01,0(@08,@02)                                      0553
         AL    @01,@CF03186                                        0553
         LA    @08,HEBHDELS(@08,@02)                               0553
         ST    @08,HEBELCHN(,@01)                                  0553
*           END;                                                   0554
         AL    INDEX1,@CF00082                                     0554
         C     INDEX1,@CF00049                                     0554
         BNH   @DL00551                                            0554
*           HEBELCHN=0;             /* ZERO CHAIN PTR IN LAST ELEM   */
         LR    @08,INDEX1                                          0555
         MH    @08,@CH00102                                        0555
         LR    @02,GSNDEX                                          0555
         MH    @02,@CH00096                                        0555
         LA    @02,OPWVGSPL-12(@02,RCORE)                          0555
         L     @02,GSLPTR(,@02)                                    0555
         AL    @02,@CF03186                                        0555
         LA    @08,HEBHDELS-12(@08,@02)                            0555
         SLR   @02,@02                                             0555
         ST    @02,HEBELCHN(,@08)                                  0555
*         END;                                                     0556
*       GSNDEX=GSNDEX-1;            /* POINT TO PREVIOUS PARM LIST   */
         BCTR  GSNDEX,0                                            0557
*     END;                                                         0558
*   ELSE                                                           0559
*     ;                             /* A FREE HDR ELEM IS AVAILABLE  */
@RF00523 DS    0H                                                  0560
*   RFY                                                            0560
*     HEBHDREL BASED(BIBHEBFQ);     /* BASE FOR FIRST FREE HDR ELEM  */
*   OPWVHDRE=BIBHEBFQ;              /* RETURN ADDR OF FREE HDR ELEM  */
         L     @08,OPWBIB(,RCORE)                                  0561
         L     @05,BIBHEBFQ(,@08)                                  0561
         ST    @05,OPWVHDRE(,RCORE)                                0561
*   BIBHEBFQ=HEBELCHN;              /* REMOVE HDR ELEM FROM FREE QUE */
         L     @05,HEBELCHN(,@05)                                  0562
         ST    @05,BIBHEBFQ(,@08)                                  0562
*   RFY                                                            0563
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   RET=OPWVSAVE(SAVENDEX);         /* RESTORE RETURN ADDRESS        */
         LR    @08,SAVENDEX                                        0564
         SLA   @08,2                                               0564
         L     RET,OPWVSAVE-4(@08,RCORE)                           0564
*   RFY                                                            0565
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   SAVENDEX=SAVENDEX-1;            /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0566
*   END GETHDREL;                   /* RETURN TO THE CALLER          */
         B     @EL00006                                            0567
*                                                                  0568
*/********************************************************************/
*/*                                                                  */
*/* FUNCTION: THIS ROUTINE IS USED TO GET A FREE CORE SAVE LIST      */
*/*           ELEMENT IF ANY ARE AVAILABLE, OR TO GET A NEW CORE     */
*/*           SAVE LIST IF THERE ARE NO FREE ELEMENTS OR THERE ARE   */
*/*           NO CORE SAVE LISTS BUILT.                              */
*/*                                                                  */
*/* INPUTS:   A POINTER WITHIN THE OPEN WORK AREA TO THE CORE SAVE   */
*/*           LIST(S).                                               */
*/*                                                                  */
*/* OUTPUTS:  A POINTER IN OPWVCSLE TO A FREE CORE SAVE LIST ELEMENT */
*/*           OR ZERO IF UNABLE TO OBTAIN A FREE ELEMENT.            */
*/*                                                                  */
*/********************************************************************/
*                                                                  0568
*GETCSLEL:                                                         0568
*   PROC OPTIONS(NOSAVE);                                          0568
GETCSLEL DS    0H                                                  0569
*   SAVENDEX=SAVENDEX+1;            /* POINT TO NEXT SAVE AREA       */
         AL    SAVENDEX,@CF00082                                   0569
*   RFY                                                            0570
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   OPWVSAVE(SAVENDEX)=RET;         /* SAVE RETURN ADDRESS           */
         LR    @15,SAVENDEX                                        0571
         SLA   @15,2                                               0571
         ST    RET,OPWVSAVE-4(@15,RCORE)                           0571
*   RFY                                                            0572
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   RFY                                                            0573
*     IDACSL BASED(BIBCSL);         /* EST BASE FOR CORE SAVE LIST   */
*   IF BIBCSL=0×CSLACTEN=DIM(CSLNTRYS) THEN/* ANY FREE CSL ELEM      */
         L     @08,OPWBIB(,RCORE)                                  0574
         L     @08,BIBCSL(,@08)                                    0574
         LTR   @08,@08                                             0574
         BZ    @RT00574                                            0574
         CLC   CSLACTEN(2,@08),@CH00106                            0574
         BNE   @RF00574                                            0574
@RT00574 DS    0H                                                  0575
*     DO;                           /* NO, BUILD A NEW CORE SAVE LIST*/
*       IF OPWCAT=ON×OPWSCRA=ON×OPWVVIC=ON×OPWGSR=ON×OPWCBIC=ON THEN
         TM    OPWCAT(RCORE),B'11100000'                           0576
         BNZ   @RT00576                                            0576
         TM    OPWGSR(RCORE),B'01000000'                           0576
         BO    @RT00576                                            0576
         TM    OPWCBIC(RCORE),B'10000000'                          0576
         BNO   @RF00576                                            0576
@RT00576 DS    0H                                                  0577
*                                   /* IS REQUEST FOR CATALOGUE OR 0577
*                                      GSR OR CBIC           @ZA16012
*                                      YES, GET CORE IN GLOBAL SP    */
*         DO;                       /* GETMAIN (RC)                0577
*                                      LV(LENGTH(IDACSL))          0577
*                                      SP(SCATPOOL)                  */
*           RESPECIFY                                              0578
*            (GPR01F,                                              0578
*             GPR15F,                                              0578
*             GPR00F) RESTRICTED;                                  0578
*           GPR01F=0;               /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0579
*           GPR15F=0;               /* RC-TYPE GETMAIN               */
         SLR   GPR15F,GPR15F                                       0580
*           GPR00F=LENGTH(IDACSL);  /* LENGTH REQUESTED              */
         LA    GPR00F,404                                          0581
*           GPR15F=GPR15F×((SCATPOOL)*256);/* SP IN BYTE 2           */
         O     GPR15F,@CF03179                                     0582
*           SVC(120);               /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0583
*           RESPECIFY                                              0584
*            (GPR01F,                                              0584
*             GPR15F,                                              0584
*             GPR00F) UNRESTRICTED;                                0584
*         END;                      /* GETMAIN (RC)                0585
*                                      LV(LENGTH(IDACSL))          0585
*                                      SP(SCATPOOL)                  */
*       ELSE                        /* NO, OPEN IS FOR A DATA SET GET
*                                      CORE IN LOCAL SUBPOOL         */
*         DO;                       /* GETMAIN (RC)                0586
*                                      LV(LENGTH(IDACSL)) SP(WKPOOL) */
         B     @RC00576                                            0586
@RF00576 DS    0H                                                  0587
*           RESPECIFY                                              0587
*            (GPR01F,                                              0587
*             GPR15F,                                              0587
*             GPR00F) RESTRICTED;                                  0587
*           GPR01F=0;               /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0588
*           GPR15F=0;               /* RC-TYPE GETMAIN               */
         SLR   GPR15F,GPR15F                                       0589
*           GPR00F=LENGTH(IDACSL);  /* LENGTH REQUESTED              */
         LA    GPR00F,404                                          0590
*           GPR15F=GPR15F×((WKPOOL)*256);/* SP IN BYTE 2             */
         O     GPR15F,@CF03180                                     0591
*           SVC(120);               /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0592
*           RESPECIFY                                              0593
*            (GPR01F,                                              0593
*             GPR15F,                                              0593
*             GPR00F) UNRESTRICTED;                                0593
*         END;                      /* GETMAIN (RC)                0594
*                                      LV(LENGTH(IDACSL)) SP(WKPOOL) */
*       RFY                                                        0595
*        (R1,                                                      0595
*         RETCODE) RSTD;            /* RESTRICT GETMAIN REGISTERS    */
@RC00576 DS    0H                                                  0596
*       IF RETCODE^=0 THEN          /* WAS GETMAIN SUCCESSFUL        */
         SLR   @14,@14                                             0596
         CR    RETCODE,@14                                         0596
         BE    @RF00596                                            0596
*         DO;                       /* NO, TERMINATE REQUEST         */
*           RFY                                                    0598
*             RETCODE UNRSTD;       /* DROP REGISTER RESTRICTION     */
*           OPWVCSLE=0;             /* INDICATE REQUEST FAILED       */
         ST    @14,OPWVCSLE(,RCORE)                                0599
*           RFY                                                    0600
*             RET RSTD;             /* RESTRICT RETURN REGISTER      */
*           RET=OPWVSAVE(SAVENDEX); /* RESTORE RETURN ADDRESS        */
         LR    @08,SAVENDEX                                        0601
         SLA   @08,2                                               0601
         L     RET,OPWVSAVE-4(@08,RCORE)                           0601
*           RFY                                                    0602
*             RET UNRSTD;           /* DROP REGISTER RESTRICTION     */
*           SAVENDEX=SAVENDEX-1;    /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0603
*           RETURN;                 /* RETURN TO THE CALLER          */
@EL00007 DS    0H                                                  0604
@EF00007 DS    0H                                                  0604
@ER00007 BR    @14                                                 0604
*         END;                                                     0605
*       ELSE                        /* GETMAIN WAS SUCCESSFUL        */
*         DO;                       /* INIT NEW CORE SAVE LIST       */
@RF00596 DS    0H                                                  0607
*           OPWVCSLE=R1;            /* GET ADDRESS OF GOTTEN CORE    */
         ST    R1,OPWVCSLE(,RCORE)                                 0607
*           RFY                                                    0608
*            (R12,                                                 0608
*             R13,                                                 0608
*             R14,                                                 0608
*             R15) RSTD;            /* RESTRICT REGISTER USAGE       */
*           R12=R1;                 /* POINT TO CORE TO BE CLEARED   */
         LR    R12,R1                                              0609
*           RFY                                                    0610
*             R1 UNRSTD;            /* DROP REGISTER RESTRICTION     */
*           OPWVRG13=R13;           /* SAVE REG 13                   */
         ST    R13,OPWVRG13(,RCORE)                                0611
*           R13=LENGTH(IDACSL);     /* AMOUNT OF CORE TO BE CLEARED  */
         LA    R13,404                                             0612
*           R15=0;                  /* PADDING CHARACTER             */
         SLR   R15,R15                                             0613
*           MVCL(R12,R14);          /* CLEAR GOTTEN CORE             */
         MVCL  R12,R14                                             0614
*           LM(R12,R13,OPWVLSAV);   /* RESTORE BASE REG & REG 13     */
         LM    R12,R13,OPWVLSAV(RCORE)                             0615
*           RFY                                                    0616
*            (R12,                                                 0616
*             R13,                                                 0616
*             R14,                                                 0616
*             R15) UNRSTD;          /* DROP REG RESTRICTIONS         */
*           RFY                                                    0617
*             IDACSL BASED(OPWVCSLE);/* BASE FOR NEW CSL             */
*           IF OPWCAT=ON×OPWSCRA=ON×OPWVVIC=ON×OPWGSR=ON×OPWCBIC=ON
*             THEN                  /* IS REQ FOR CATALOG OR GSR OR
*                                      CBIC                  @ZA16012*/
         TM    OPWCAT(RCORE),B'11100000'                           0618
         BNZ   @RT00618                                            0618
         TM    OPWGSR(RCORE),B'01000000'                           0618
         BO    @RT00618                                            0618
         TM    OPWCBIC(RCORE),B'10000000'                          0618
         BNO   @RF00618                                            0618
@RT00618 DS    0H                                                  0619
*             CSLSUBPL=SCATPOOL;    /* INIT SUBPOOL OF CSL           */
         L     @08,OPWVCSLE(,RCORE)                                0619
         MVI   CSLSUBPL(@08),X'F1'                                 0619
*           ELSE                    /* NO, OPEN IS FOR A DATA SET    */
*             CSLSUBPL=WKPOOL;      /* INIT SUBPOOL OF CSL           */
         B     @RC00618                                            0620
@RF00618 L     @08,OPWVCSLE(,RCORE)                                0620
         MVI   CSLSUBPL(@08),X'FC'                                 0620
*           CSLLENTH=LENGTH(IDACSL);/* INIT LENGTH OF CSL            */
@RC00618 L     @08,OPWVCSLE(,RCORE)                                0621
         MVC   CSLLENTH(3,@08),@CF03178+1                          0621
*           CSLID=IDACSLID;         /* PUT ID INTO NEW CSL           */
         MVC   CSLID(8,@08),@CC00457                               0622
*           CSLACTEN=0;             /* INIT NUMBER OF ACTIVE ENTRIES */
         SLR   @05,@05                                             0623
         STH   @05,CSLACTEN(,@08)                                  0623
*           IF OPWGSR=ON×OPWCBIC=ON THEN/* IF GSR OR CBIC    @ZA16012*/
         TM    OPWGSR(RCORE),B'01000000'                           0624
         BO    @RT00624                                            0624
         TM    OPWCBIC(RCORE),B'10000000'                          0624
         BNO   @RF00624                                            0624
@RT00624 DS    0H                                                  0625
*             CSLGSRK=DXUKEY;       /* SAVE GSR OR CBIC KEY  @ZA16012*/
         L     @08,OPWVCSLE(,RCORE)                                0625
         L     @05,OPWCOMWA(,RCORE)                                0625
         IC    @02,DXUKEY(,@05)                                    0625
         STC   @02,CSLGSRK(,@08)                                   0625
*           CSLNXPTR=BIBCSL;        /* CHAIN NEW CSL TO FIRST CSL ON
*                                      CSL CHAIN                     */
@RF00624 L     @08,OPWVCSLE(,RCORE)                                0626
         L     @05,OPWBIB(,RCORE)                                  0626
         L     @02,BIBCSL(,@05)                                    0626
         ST    @02,CSLNXPTR(,@08)                                  0626
*           BIBCSL=OPWVCSLE;        /* PUT NEW CSL ON CSL CHAIN      */
         ST    @08,BIBCSL(,@05)                                    0627
*         END;                                                     0628
*       RFY                                                        0629
*         IDACSL BASED(BIBCSL);     /* BASE FOR CORE SAVE LIST       */
*     END;                                                         0630
*   ELSE                                                           0631
*     ;                             /* A FREE ELEMENT IS AVAILABLE   */
@RF00574 DS    0H                                                  0632
*   CSLACTEN=CSLACTEN+1;            /* UPDATE NO. OF ACTIVE ENTRIES  */
         L     @08,OPWBIB(,RCORE)                                  0632
         L     @08,BIBCSL(,@08)                                    0632
         LA    @05,1                                               0632
         AH    @05,CSLACTEN(,@08)                                  0632
         STH   @05,CSLACTEN(,@08)                                  0632
*   OPWVCSLE=ADDR(CSLNTRYS(CSLACTEN));/* RETURN ADDR OF FREE ELEM    */
         MH    @05,@CH00096                                        0633
         LA    @08,CSLNTRYS-12(@05,@08)                            0633
         ST    @08,OPWVCSLE(,RCORE)                                0633
*   RFY                                                            0634
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   RET=OPWVSAVE(SAVENDEX);         /* RESTORE RETURN ADDRESS        */
         LR    @08,SAVENDEX                                        0635
         SLA   @08,2                                               0635
         L     RET,OPWVSAVE-4(@08,RCORE)                           0635
*   RFY                                                            0636
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   SAVENDEX=SAVENDEX-1;            /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0637
*   END GETCSLEL;                   /* RETURN TO THE CALLER          */
         B     @EL00007                                            0638
*                                                                  0639
*/********************************************************************/
*/*                                                                  */
*/* FUNCTION: THIS ROUTINE IS USED TO RELEASE EXCESS SPACE IN        */
*/*           CLUSTER RELATED BLOCKS AT THE END OF OPEN.             */
*/*                                                                  */
*/* INPUTS:   A POINTER IN OPWVMANC TO THE CMB FOR THE CLUSTER.      */
*/*                                                                  */
*/* OUTPUTS:  NONE                                                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0639
*CLSRFREE:                                                         0639
*   PROC OPTIONS(NOSAVE);                                          0639
CLSRFREE DS    0H                                                  0640
*   SAVENDEX=SAVENDEX+1;            /* POINT TO NEXT SAVE AREA       */
         LA    @05,1                                               0640
         ALR   SAVENDEX,@05                                        0640
*   RFY                                                            0641
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   OPWVSAVE(SAVENDEX)=RET;         /* SAVE RETURN ADDRESS           */
         LR    @15,SAVENDEX                                        0642
         SLA   @15,2                                               0642
         ST    RET,OPWVSAVE-4(@15,RCORE)                           0642
*   RFY                                                            0643
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   RFY                                                            0644
*     IDACMB BASED(OPWVMANC);       /* ESTABLISH BASE FOR CMB        */
*   DO INDEX2=1 TO LENGTH(CMBPTRS)/4 BY 1;/* FREE EXCESS CORE IN   0645
*                                      CLUSTER RELATED BLOCKS        */
         LR    INDEX2,@05                                          0645
@DL00645 DS    0H                                                  0646
*     RFY                                                          0646
*       HEBHDREL BASED(CMBENTRY(INDEX2));/* EST HDR ENTRIES BASE     */
*     IF ADDR(HEBHDREL)^=0&HEBAVSP^=0 THEN/* ANY EXCES CORE IN BLK   */
         LR    @11,INDEX2                                          0647
         SLA   @11,2                                               0647
         L     @05,OPWVMANC(,RCORE)                                0647
         L     @11,CMBENTRY-4(@11,@05)                             0647
         LTR   @11,@11                                             0647
         BZ    @RF00647                                            0647
         L     @05,HEBAVSP-1(,@11)                                 0647
         LA    @05,0(,@05)                                         0647
         LTR   @05,@05                                             0647
         BZ    @RF00647                                            0647
*       DO;                         /* YES, FREE EXCESS CORE IN BLK  */
*         OPWVHDRE=ADDR(HEBHDREL);  /* SET UP PTR TO HEB HDR ELEM    */
         ST    @11,OPWVHDRE(,RCORE)                                0649
*         CALL FNDCSLEL;            /* FIND CORRESPONDING CSL ENTRY  */
         BAL   @14,FNDCSLEL                                        0650
*         RFY                                                      0651
*           CSLENTRY BASED(OPWVCSLE);/* EST BASE FOR CSL ENTRY       */
*         IF OPWVCSLE^=0 THEN       /* WAS CSL SUCCESSFULLY FOUND    */
         L     @11,OPWVCSLE(,RCORE)                                0652
         LTR   @11,@11                                             0652
         BZ    @RF00652                                            0652
*           DO;                     /* YES, EXCESS CORE CAN BE FREED */
*             CALL FREECORE;        /* FREE EXCESS CORE              */
         BAL   @14,FREECORE                                        0654
*             CSLCORLN=HEBLN;       /* UPDATE LENGTH OF CORE IN CSL  */
         L     @11,OPWVCSLE(,RCORE)                                0655
         LR    @05,INDEX2                                          0655
         SLA   @05,2                                               0655
         L     @02,OPWVMANC(,RCORE)                                0655
         L     @05,CMBENTRY-4(@05,@02)                             0655
         MVC   CSLCORLN(3,@11),HEBLN(@05)                          0655
*           END;                                                   0656
*         ELSE                                                     0657
*           ;                       /* CSL NOT FOUND, CORE NOT FREED */
@RF00652 DS    0H                                                  0658
*       END;                                                       0658
*     ELSE                                                         0659
*       ;                           /* NO EXCESS CORE TO BE FREED    */
@RF00647 DS    0H                                                  0660
*   END;                                                           0660
         AL    INDEX2,@CF00082                                     0660
         C     INDEX2,@CF03181                                     0660
         BNH   @DL00645                                            0660
*   RFY                                                            0661
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   RET=OPWVSAVE(SAVENDEX);         /* RESTORE RETURN ADDRESS        */
         LR    @05,SAVENDEX                                        0662
         SLA   @05,2                                               0662
         L     RET,OPWVSAVE-4(@05,RCORE)                           0662
*   RFY                                                            0663
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   SAVENDEX=SAVENDEX-1;            /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0664
*   END CLSRFREE;                   /* RETURN TO THE CALLER          */
@EL00008 DS    0H                                                  0665
@EF00008 DS    0H                                                  0665
@ER00008 BR    @14                                                 0665
*                                                                  0666
*/********************************************************************/
*/*                                                                  */
*/* FUNCTION: THIS ROUTINE IS USED TO RELEASE EXCESS SPACE IN        */
*/*           SPHERE, PROTECTED SPHERE, AND PROTECTED SPHERE AMBL    */
*/*           BLOCKS AT THE END OF OPEN.                             */
*/*                                                                  */
*/* INPUTS:   A POINTER WITHIN THE OPEN WORK AREA TO THE BIB.        */
*/*                                                                  */
*/* OUTPUTS:  NONE                                                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0666
*SPHFREE:                                                          0666
*   PROC OPTIONS(NOSAVE);                                          0666
SPHFREE  DS    0H                                                  0667
*   SAVENDEX=SAVENDEX+1;            /* POINT TO NEXT SAVE AREA       */
         AL    SAVENDEX,@CF00082                                   0667
*   RFY                                                            0668
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   OPWVSAVE(SAVENDEX)=RET;         /* SAVE RETURN ADDRESS           */
         LR    @15,SAVENDEX                                        0669
         SLA   @15,2                                               0669
         ST    RET,OPWVSAVE-4(@15,RCORE)                           0669
*   RFY                                                            0670
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   RFY                                                            0671
*     HEBHDREL BASED(OPWVHDRE);     /* ESTABLISH BASE FOR HDR ELEM   */
*   OPWVHDRE=BIBPRSPH;              /* PT TO PROTECTED SPHERE BLK HDR*/
         L     @05,OPWBIB(,RCORE)                                  0672
         L     @05,BIBPRSPH(,@05)                                  0672
         ST    @05,OPWVHDRE(,RCORE)                                0672
*   IF ADDR(HEBHDREL)^=0&HEBAVSP^=0 THEN/* ANY EXCESS CORE TO FREE   */
         LTR   @05,@05                                             0673
         BZ    @RF00673                                            0673
         L     @05,HEBAVSP-1(,@05)                                 0673
         LA    @05,0(,@05)                                         0673
         LTR   @05,@05                                             0673
         BZ    @RF00673                                            0673
*     CALL FREECORE;                /* YES, FREE EXCESS CORE         */
         BAL   @14,FREECORE                                        0674
*   ELSE                                                           0675
*     ;                             /* NO, CHECK SPHERE BLOCK        */
@RF00673 DS    0H                                                  0676
*   OPWVHDRE=BIBSPHPT;              /* PT TO SPHERE BLOCK HDR ELEM   */
         L     @05,OPWBIB(,RCORE)                                  0676
         L     @05,BIBSPHPT(,@05)                                  0676
         ST    @05,OPWVHDRE(,RCORE)                                0676
*   DO INDEX2=2 TO 1 BY-1;          /* FREE EXCESS SPACE IN SPHERE 0677
*                                      AND PROTECTED AMBL BLOCKS     */
         LA    INDEX2,2                                            0677
@DL00677 DS    0H                                                  0678
*     IF ADDR(HEBHDREL)^=0&HEBAVSP^=0 THEN/* EXCESS CORE TO FREE ?   */
         L     @11,OPWVHDRE(,RCORE)                                0678
         LTR   @11,@11                                             0678
         BZ    @RF00678                                            0678
         L     @11,HEBAVSP-1(,@11)                                 0678
         LA    @11,0(,@11)                                         0678
         LTR   @11,@11                                             0678
         BZ    @RF00678                                            0678
*       DO;                         /* YES, FREE EXCESS CORE         */
*         CALL FNDCSLEL;            /* FIND CSL CORRESPONDING TO BLK */
         BAL   @14,FNDCSLEL                                        0680
*         RFY                                                      0681
*           CSLENTRY BASED(OPWVCSLE);/* EST BASE FOR CSL ELEMENT     */
*         IF OPWVCSLE^=0 THEN       /* WAS THE CSL ELEMENT FOUND     */
         L     @11,OPWVCSLE(,RCORE)                                0682
         LTR   @11,@11                                             0682
         BZ    @RF00682                                            0682
*           DO;                     /* YES, EXCESS CORE CAN BE FREED */
*             CALL FREECORE;        /* FREE EXCESS CORE              */
         BAL   @14,FREECORE                                        0684
*             CSLCORLN=HEBLN;       /* UPDATE LENGTH OF CORE IN CSL  */
         L     @11,OPWVCSLE(,RCORE)                                0685
         L     @05,OPWVHDRE(,RCORE)                                0685
         MVC   CSLCORLN(3,@11),HEBLN(@05)                          0685
*           END;                                                   0686
*         ELSE                                                     0687
*           ;                       /* CSL NOT FOUND, CORE NOT FREED */
@RF00682 DS    0H                                                  0688
*       END;                                                       0688
*     ELSE                                                         0689
*       ;                           /* NO EXCESS SPACE IN SPHERE BLK */
@RF00678 DS    0H                                                  0690
*     OPWVHDRE=BIBPSAB;             /* PT TO PROT AMBL BLK HDR ELEM  */
         L     @11,OPWBIB(,RCORE)                                  0690
         L     @11,BIBPSAB(,@11)                                   0690
         ST    @11,OPWVHDRE(,RCORE)                                0690
*   END;                                                           0691
         BCTR  INDEX2,0                                            0691
         LTR   INDEX2,INDEX2                                       0691
         BP    @DL00677                                            0691
*   RFY                                                            0692
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   RET=OPWVSAVE(SAVENDEX);         /* RESTORE RETURN ADDRESS        */
         LR    @05,SAVENDEX                                        0693
         SLA   @05,2                                               0693
         L     RET,OPWVSAVE-4(@05,RCORE)                           0693
*   RFY                                                            0694
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   SAVENDEX=SAVENDEX-1;            /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0695
*   END SPHFREE;                    /* RETURN TO THE CALLER          */
@EL00009 DS    0H                                                  0696
@EF00009 DS    0H                                                  0696
@ER00009 BR    @14                                                 0696
*                                                                  0697
*/********************************************************************/
*/*                                                                  */
*/* FUNCTION: THIS ROUTINE IS USED WHEN AN ERROR CONDITION IS        */
*/*           DETECTED DURING OPEN TO RELEASE ALL CORE GOTTEN FOR    */
*/*           THIS CLUSTER AND, IF THIS IS A PRIMARY OPEN, ALL CORE  */
*/*           GOTTEN FOR THE SPHERE.                                 */
*/*                                                                  */
*/* INPUTS:   A POINTER WITHIN THE OPEN WORK AREA TO THE CORE SAVE   */
*/*           LIST(S).  A POINTER IN OPWVMANC TO THE PROTECTED       */
*/*           SPHERE BLOCKS(S), IF THEY ARE TO BE FREED.  OTHERWISE, */
*/*           OPWVMANC MUST BE ZERO.                                 */
*/*                                                                  */
*/* OUTPUTS:  NONE                                                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0697
*CLEANUP:                                                          0697
*   PROC OPTIONS(NOSAVE);                                          0697
CLEANUP  DS    0H                                                  0698
*   SAVENDEX=SAVENDEX+1;            /* POINT TO NEXT SAVE AREA       */
         AL    SAVENDEX,@CF00082                                   0698
*   RFY                                                            0699
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   OPWVSAVE(SAVENDEX)=RET;         /* SAVE RETURN ADDRESS           */
         LR    @15,SAVENDEX                                        0700
         SLA   @15,2                                               0700
         ST    RET,OPWVSAVE-4(@15,RCORE)                           0700
*   RFY                                                            0701
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   RFY                                                            0702
*     IDACSL BASED(BIBCSL);         /* EST BASE FOR CSL CHAIN        */
*   DO WHILE ADDR(IDACSL)^=0;       /* FREE ALL CORE DEFINED BY THE
*                                      CSL(S) AND FREE THE CSL(S)    */
         B     @DE00703                                            0703
@DL00703 DS    0H                                                  0704
*     DO INDEX3=CSLACTEN TO 1 BY-1; /* FREE ALL CORE DEFINED BY THE
*                                      ACTIVE ENTRIES IN THIS CSL    */
         L     @05,OPWBIB(,RCORE)                                  0704
         L     @05,BIBCSL(,@05)                                    0704
         LH    INDEX3,CSLACTEN(,@05)                               0704
         B     @DE00704                                            0704
@DL00704 DS    0H                                                  0705
*       RFY                                                        0705
*         CSLENTRY BASED(ADDR(CSLNTRYS(INDEX3)));/* EST BASE FOR CSL
*                                      ELEMENT ENTRIES               */
*       CSLACTEN=INDEX3-1;          /* DECREMENT NO. ACTIVE ENTRIES  */
         L     @08,OPWBIB(,RCORE)                                  0706
         L     @08,BIBCSL(,@08)                                    0706
         LR    @05,INDEX3                                          0706
         BCTR  @05,0                                               0706
         STH   @05,CSLACTEN(,@08)                                  0706
*       IF CSLCORLN^=0 THEN         /* ANY CORE TO BE FREED          */
         LR    @05,INDEX3                                          0707
         MH    @05,@CH00096                                        0707
         LA    @08,CSLNTRYS-12(@05,@08)                            0707
         L     @05,CSLCORLN-1(,@08)                                0707
         LA    @05,0(,@05)                                         0707
         LTR   @05,@05                                             0707
         BZ    @RF00707                                            0707
*         DO;                       /* YES, FREE CORE BLOCK          */
*           RFY                                                    0709
*            (R0,                                                  0709
*             R1) RSTD;             /* RESTRICT REGISTER USAGE       */
*           LM(R0,R1,CSLFREMN);     /* LOAD FREEMAIN PARAMETERS      */
         LM    R0,R1,CSLFREMN(@08)                                 0710
*           IF CSLKEY5=ON&CSLPOOLN=RDEBPOOL THEN/* BRANCH ENTRY TO 0711
*                                      FREEMAIN REQUIRED             */
         TM    CSLKEY5(@08),B'10000000'                            0711
         BNO   @RF00711                                            0711
         CLI   CSLPOOLN(@08),230                                   0711
         BNE   @RF00711                                            0711
*             DO;                   /* YES, OBTAIN LOCAL LOCK FIRST  */
*               R0=CSLCORLN;        /* REG 0 MUST ONLY CONTAIN LENGTH
*                                      FOR BRANCH ENTRY TO FREEMAIN
*                                      OBTAIN THE LOCAL LOCK         */
         LR    R0,@05                                              0713
*               OPWVRG13=R13;       /* SAVE REG 13                   */
         ST    R13,OPWVRG13(,RCORE)                                0714
*               DO;                 /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) RELATED(FREEMAIN,I
*                                      DA0192M(CLEANUP))             */
*                 RFY                                              0716
*                  (GPR11P,                                        0716
*                   GPR12P,                                        0716
*                   GPR13P,                                        0716
*                   GPR14P) RSTD;                                  0716
*                 GPR13P=PSALITA;   /* ADDRESS OF LOCK INTERFACE   0717
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0717
*                 GEN(LM GPR11P,GPR13P,576(GPR13P));/* LOAD LOCKWORD,
*                                      CLHT AND ENTRY ADRS.          */
         LM GPR11P,GPR13P,576(GPR13P)
*                 GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK RTN.    */
         BALR GPR14P,GPR13P
*                 RFY                                              0720
*                  (GPR11P,                                        0720
*                   GPR12P,                                        0720
*                   GPR13P,                                        0720
*                   GPR14P) UNRSTD;                                0720
*               END;                /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) RELATED(FREEMAIN,I
*                                      DA0192M(CLEANUP))             */
*               R12=OPWVRG12;       /* RESTORE SECOND BASE REG       */
         L     R12,OPWVRG12(,RCORE)                                0722
*               RFY                                                0723
*                (R4,                                              0723
*                 R7,                                              0723
*                 R11) RSTD;        /* RESTRICT REGISTERS            */
*               R11=RBASEA;         /* SAVE MODULE BASE REG  @OZ04229*/
         LR    R11,RBASEA                                          0724
*               R13=RCORE;          /* SAVE PTR TO O/C/E WORK AREA   */
         LR    R13,RCORE                                           0725
*               IF CSLJSTCB=ON THEN /* CHECK CORE TCB OWNERSHIP      */
         LR    @10,INDEX3                                          0726
         MH    @10,@CH00096                                        0726
         L     @08,OPWBIB(,RCORE)                                  0726
         L     @08,BIBCSL(,@08)                                    0726
         LA    @10,CSLNTRYS-12(@10,@08)                            0726
         TM    CSLJSTCB(@10),B'00100000'                           0726
         BNO   @RF00726                                            0726
*                 R4=TCBJSTCB;      /* PT TO JOBSTEP TCB FOR GETMAIN */
         L     @10,PSATNEW                                         0727
         L     R4,TCBJSTCB(,@10)                                   0727
*               ELSE                /* NOT JOB STEP RELATED          */
*                 R4=ADDR(TCB);     /* PT TO CURRENT TCB FOR GETMAIN */
         B     @RC00726                                            0728
@RF00726 L     R4,PSATNEW                                          0728
*               R7=PSAAOLD;         /* POINT TO ASCB FOR FREEMAIN  0729
*                                      FREE CORE BLOCK               */
@RC00726 L     R7,PSAAOLD                                          0729
*               GEN( FREEMAIN RU,LV=(0),A=(1),SP=230,BRANCH=YES,KEY=5)
*               REFS(R0,R1);                                       0730
          FREEMAIN RU,LV=(0),A=(1),SP=230,BRANCH=YES,KEY=5
*               RBASEA=R11;         /* RESTORE BASE REGISTER @OZ04229*/
         LR    RBASEA,R11                                          0731
*               RCORE=R13;          /* RESTORE O/C/E WORK AREA PTR   */
         LR    RCORE,R13                                           0732
*               RFY                                                0733
*                (R4,                                              0733
*                 R7,                                              0733
*                 R11) UNRSTD;      /* DROP REG RESTRICTIONS RELEASE
*                                      THE LOCAL LOCK                */
*               DO;                 /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(FREEMAIN,IDA0192M(CLEA
*                                      NUP))                         */
*                 RFY                                              0735
*                  (GPR11P,                                        0735
*                   GPR12P,                                        0735
*                   GPR13P,                                        0735
*                   GPR14P) RSTD;                                  0735
*                 GPR13P=PSALITA;   /* ADDRESS OF LOCK INTERFACE   0736
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0736
*                 GEN(LM GPR11P,GPR13P,588(GPR13P));/* LOAD LOCKWORD,
*                                      CLHT AND ENTRY ADRS.          */
         LM GPR11P,GPR13P,588(GPR13P)
*                 GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK RTN.    */
         BALR GPR14P,GPR13P
*                 RFY                                              0739
*                  (GPR11P,                                        0739
*                   GPR12P,                                        0739
*                   GPR13P,                                        0739
*                   GPR14P) UNRSTD;                                0739
*               END;                /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(FREEMAIN,IDA0192M(CLEA
*                                      NUP))                         */
*               LM(R12,R13,OPWVLSAV);/* RESTOR REGS USED BY   SETLOCK*/
         LM    R12,R13,OPWVLSAV(RCORE)                             0741
*             END;                                                 0742
*           ELSE                    /* NO, USE SVC FREEMAIN          */
*             DO;                   /* CHECK KEY OF CORE TO BE FREED */
         B     @RC00711                                            0743
@RF00711 DS    0H                                                  0744
*               IF CSLKEY5=ON THEN  /* IS CORE TO BE FREED IN KEY 5  */
         LR    @08,INDEX3                                          0744
         MH    @08,@CH00096                                        0744
         L     @05,OPWBIB(,RCORE)                                  0744
         L     @05,BIBCSL(,@05)                                    0744
         LA    @08,CSLNTRYS-12(@08,@05)                            0744
         TM    CSLKEY5(@08),B'10000000'                            0744
         BNO   @RF00744                                            0744
*                 DO;               /* MODESET EXTKEY(DATAMGT)       */
*                   SPKA(80);       /* SET PSW KEY                   */
         LA    @08,80                                              0746
         SPKA  0(@08)                                              0746
*                 END;              /* MODESET EXTKEY(DATAMGT) YES,
*                                      MODESET TO KEY 5              */
*               ELSE                /* NO, CHECK FOR KEY 7 CORE      */
*                 IF CSLGSRKT=ON THEN/* 2 B FREED IN GSR KEY?      0748
*                                                            @Z40ESSR*/
         B     @RC00744                                            0748
@RF00744 LR    @08,INDEX3                                          0748
         MH    @08,@CH00096                                        0748
         L     @05,OPWBIB(,RCORE)                                  0748
         L     @05,BIBCSL(,@05)                                    0748
         LA    @08,CSLNTRYS-12(@08,@05)                            0748
         TM    CSLGSRKT(@08),B'01000000'                           0748
         BNO   @RF00748                                            0748
*                   DO;             /*                       @Z40ESSR*/
*                     RFY                                          0750
*                       R15 RSTD;   /*                       @Z40ESSR*/
*                     R15=CSLGSRK;  /* LOAD GSR KEY INTO REG @Z40ESSR*/
         SLR   R15,R15                                             0751
         IC    R15,CSLGSRK(,@05)                                   0751
*                     SPKA(R15);    /* MODESET TO GSR KEY    @Z40ESSR*/
         SPKA  0(R15)                                              0752
*                     RFY                                          0753
*                       R15 UNRSTD; /*                       @Z40ESSR*/
*                   END;            /*                       @Z40ESSR*/
*                 ELSE                                             0755
*                   ;               /* NO, CONTINUE TO RUN IN KEY 0  */
@RF00748 DS    0H                                                  0756
*               GEN( FREEMAIN R,LV=(0),A=(1))/* FREE CORE BLOCK      */
*               REFS(R0,R1);                                       0756
@RC00744 DS    0H                                                  0756
          FREEMAIN R,LV=(0),A=(1)
*               RFY                                                0757
*                (R0,                                              0757
*                 R1) UNRSTD;       /* DROP REG RESTRICTIONS         */
*               DO;                 /* MODESET EXTKEY(SUPR)          */
*                 SPKA(0);          /* SET PSW KEY                   */
         SLR   @08,@08                                             0759
         SPKA  0(@08)                                              0759
*               END;                /* MODESET EXTKEY(SUPR) RETURN TO
*                                      KEY 0                         */
*             END;                                                 0761
*         END;                                                     0762
*       ELSE                                                       0763
*         ;                         /* NO CORE BLOCK TO BE FREED     */
@RF00707 DS    0H                                                  0764
*       IF CSLANCPT^=0 THEN         /* ANY HEB HDR ELEM ASSOCIATED 0764
*                                      WITH THIS CSL ENTRY           */
@RC00707 LR    @08,INDEX3                                          0764
         MH    @08,@CH00096                                        0764
         L     @05,OPWBIB(,RCORE)                                  0764
         L     @02,BIBCSL(,@05)                                    0764
         LA    @08,CSLNTRYS-12(@08,@02)                            0764
         L     @08,CSLANCPT-1(,@08)                                0764
         LA    @08,0(,@08)                                         0764
         LTR   @08,@08                                             0764
         BZ    @RF00764                                            0764
*         DO;                       /* YES, RETRN HDR ELEM TO FREE Q */
*           RFY                                                    0766
*             HEBHDREL BASED(MANCPTR);/* EST BASE FOR HDR ELEM       */
*           BIBHEBFQ=MANCPTR;       /* PUT HDR ELEM ON FREE QUEUE    */
         L     @02,MANCPTR(,@08)                                   0767
         ST    @02,BIBHEBFQ(,@05)                                  0767
*           MANCPTR=HEBELCHN;       /* RE-CHAIN HEB HDR ELEMENTS     */
         L     @05,HEBELCHN(,@02)                                  0768
         ST    @05,MANCPTR(,@08)                                   0768
*         END;                                                     0769
*       ELSE                                                       0770
*         ;                         /* NO HEB HDR ELEM TO RETURN     */
@RF00764 DS    0H                                                  0771
*     END;                                                         0771
         BCTR  INDEX3,0                                            0771
@DE00704 LTR   INDEX3,INDEX3                                       0771
         BP    @DL00704                                            0771
*     RFY                                                          0772
*      (R0,                                                        0772
*       R1) RSTD;                   /* RESTRICT REGISTER USAGE       */
*     R0=CSLR0;                     /* GET SUBPOOL AND LENGTH OF CSL */
         L     @05,OPWBIB(,RCORE)                                  0773
         L     @02,BIBCSL(,@05)                                    0773
         L     R0,CSLR0(,@02)                                      0773
*     R1=ADDR(IDACSL);              /* POINT TO CSL TO BE FREED      */
         LR    R1,@02                                              0774
*     CSLID=' ';                    /* CLEAR ID FIELD OF CSL         */
         MVI   CSLID+1(@02),C' '                                   0775
         MVC   CSLID+2(6,@02),CSLID+1(@02)                         0775
         MVI   CSLID(@02),C' '                                     0775
*     BIBCSL=CSLNXPTR;              /* POINT TO NEXT CSL             */
         L     @02,CSLNXPTR(,@02)                                  0776
         ST    @02,BIBCSL(,@05)                                    0776
*     GEN( FREEMAIN R,LV=(0),A=(1)) /* FREE CORE BLOCK               */
*     REFS(R0,R1);                                                 0777
          FREEMAIN R,LV=(0),A=(1)
*     RFY                                                          0778
*      (R0,                                                        0778
*       R1) UNRSTD;                 /* DROP REG RESTRICTIONS         */
*   END;                                                           0779
@DE00703 L     @05,OPWBIB(,RCORE)                                  0779
         L     @05,BIBCSL(,@05)                                    0779
         LTR   @05,@05                                             0779
         BNZ   @DL00703                                            0779
*   RFY                                                            0780
*     HEBHDREL BASED(OPWVMANC);     /* BASE FOR PROT SPHERE BLK HDR  */
*   DO WHILE ADDR(HEBHDREL)^=0;     /* FREE ALL PROTECTED SPHERE BLKS
*                                      WHICH WERE PASSED TO THIS RTN */
         B     @DE00781                                            0781
@DL00781 DS    0H                                                  0782
*     RFY                                                          0782
*      (R0,                                                        0782
*       R1) RSTD;                   /* RESTRICT REGISTER USAGE       */
*     LM(R0,R1,HEBFREMN);           /* LOAD FREEMAIN PARAMETERS      */
         L     @05,OPWVMANC(,RCORE)                                0783
         LM    R0,R1,HEBFREMN(@05)                                 0783
*     OPWVMANC=HEBELCHN;            /* POINT TO NEXT PROT SPHERE BLK */
         L     @05,HEBELCHN(,@05)                                  0784
         ST    @05,OPWVMANC(,RCORE)                                0784
*     GEN( FREEMAIN R,LV=(0),A=(1)) /* FREE PROTECTED SPHERE BLOCK   */
*     REFS(R0,R1);                                                 0785
          FREEMAIN R,LV=(0),A=(1)
*     RFY                                                          0786
*      (R0,                                                        0786
*       R1) UNRSTD;                 /* DROP REG RESTRICTIONS         */
*     BIBPRSPH=OPWVMANC;            /* UPDATE BIB PROT SPH BLK PTR   */
         L     @05,OPWBIB(,RCORE)                                  0787
         L     @02,OPWVMANC(,RCORE)                                0787
         ST    @02,BIBPRSPH(,@05)                                  0787
*     IF BIBVGTT^=0 THEN            /* DOES A VGTT EXIST             */
         L     @05,BIBVGTT(,@05)                                   0788
         LTR   @05,@05                                             0788
         BZ    @RF00788                                            0788
*       VGTTPSB=OPWVMANC;           /* YES, UPDATE VGTT PSB PTR      */
         ST    @02,VGTTPSB(,@05)                                   0789
*   END;                                                           0790
@RF00788 DS    0H                                                  0790
@DE00781 L     @05,OPWVMANC(,RCORE)                                0790
         LTR   @05,@05                                             0790
         BNZ   @DL00781                                            0790
*   RFY                                                            0791
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   RET=OPWVSAVE(SAVENDEX);         /* RESTORE RETURN ADDRESS        */
         LR    @05,SAVENDEX                                        0792
         SLA   @05,2                                               0792
         L     RET,OPWVSAVE-4(@05,RCORE)                           0792
*   RFY                                                            0793
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   SAVENDEX=SAVENDEX-1;            /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0794
*   END CLEANUP;                                                   0795
@EL00010 DS    0H                                                  0795
@EF00010 DS    0H                                                  0795
@ER00010 BR    @14                                                 0795
*                                                                  0796
*/********************************************************************/
*/*                                                                  */
*/* FUNCTION: THIS ROUTINE IS USED TO FREE CLUSTER BLOCKS GOTTEN     */
*/*           DURING CLOSE.                                          */
*/*                                                                  */
*/* INPUTS:   POINTER IN OPWVANCP TO THE CMB.                        */
*/*                                                                  */
*/* OUTPUTS:  NONE                                                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0796
*SREQFREE:                                                         0796
*   PROC OPTIONS(NOSAVE);                                          0796
SREQFREE DS    0H                                                  0797
*   SAVENDEX=SAVENDEX+1;            /* POINT TO NEXT SAVE AREA       */
         LA    @05,1                                               0797
         ALR   SAVENDEX,@05                                        0797
*   RFY                                                            0798
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   OPWVSAVE(SAVENDEX)=RET;         /* SAVE RETURN ADDRESS           */
         LR    @15,SAVENDEX                                        0799
         SLA   @15,2                                               0799
         ST    RET,OPWVSAVE-4(@15,RCORE)                           0799
*   RFY                                                            0800
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   RFY                                                            0801
*     IDACMB BASED(OPWVANCP);       /* ESTABLISH BASE FOR CMB        */
*   DO INDEX2=1 TO LENGTH(CMBPTRS)/4 BY 1;/* SCAN CMB ENTRIES FOR  0802
*                                      BLOCKS GOTTEN DURING CLOSE    */
         LR    INDEX2,@05                                          0802
@DL00802 DS    0H                                                  0803
*     RFY                                                          0803
*       HEBHDREL BASED(CMBENTRY(INDEX2));/* EST HEB HDR ELEM BASE    */
*     DO WHILE ADDR(HEBHDREL)^=0&HEBIOSUP=ON;/* SCAN EACH CMB ENTRY
*                                      FOR BLKS GOTTEN DURING CLOSE  */
         B     @DE00804                                            0804
@DL00804 DS    0H                                                  0805
*       OPWVHDRE=ADDR(HEBHDREL);    /* PT TO FIRST HDR ELEM IN CHAIN */
         LR    @11,INDEX2                                          0805
         SLA   @11,2                                               0805
         L     @05,OPWVANCP(,RCORE)                                0805
         L     @11,CMBENTRY-4(@11,@05)                             0805
         ST    @11,OPWVHDRE(,RCORE)                                0805
*       RFY                                                        0806
*         HEBHDREL BASED(OPWVHDRE); /* EST BASE FOR HEB HDR ELEM     */
*       HEBAVSP=HEBLN;              /* FREE ALL CORE DEFND BY HEB HDR*/
         MVC   HEBAVSP(3,@11),HEBLN(@11)                           0807
*       CALL FREECORE;              /* FREE CORE GOTTEN FOR CLOSE    */
         BAL   @14,FREECORE                                        0808
*       CMBENTRY(INDEX2)=HEBELCHN;  /* PT TO NEXT HDR ELEM IN CHAIN  */
         LR    @11,INDEX2                                          0809
         SLA   @11,2                                               0809
         L     @05,OPWVANCP(,RCORE)                                0809
         L     @02,OPWVHDRE(,RCORE)                                0809
         L     @15,HEBELCHN(,@02)                                  0809
         ST    @15,CMBENTRY-4(@11,@05)                             0809
*       HEBELCHN=BIBHEBFQ;          /* RETURN HEB HDR ELEMENT TO THE */
         L     @11,OPWBIB(,RCORE)                                  0810
         L     @05,BIBHEBFQ(,@11)                                  0810
         ST    @05,HEBELCHN(,@02)                                  0810
*       BIBHEBFQ=OPWVHDRE;          /* FREE QUEUE                    */
         ST    @02,BIBHEBFQ(,@11)                                  0811
*     END;                                                         0812
@DE00804 LR    @11,INDEX2                                          0812
         SLA   @11,2                                               0812
         L     @05,OPWVANCP(,RCORE)                                0812
         L     @11,CMBENTRY-4(@11,@05)                             0812
         LTR   @11,@11                                             0812
         BZ    @DC00804                                            0812
         TM    HEBIOSUP(@11),B'00010000'                           0812
         BO    @DL00804                                            0812
@DC00804 DS    0H                                                  0813
*   END;                                                           0813
         AL    INDEX2,@CF00082                                     0813
         C     INDEX2,@CF03181                                     0813
         BNH   @DL00802                                            0813
*   RFY                                                            0814
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   RET=OPWVSAVE(SAVENDEX);         /* RESTORE RETURN ADDRESS        */
         LR    @05,SAVENDEX                                        0815
         SLA   @05,2                                               0815
         L     RET,OPWVSAVE-4(@05,RCORE)                           0815
*   RFY                                                            0816
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   SAVENDEX=SAVENDEX-1;            /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0817
*   END SREQFREE;                   /* RETURN TO THE CALLER          */
@EL00011 DS    0H                                                  0818
@EF00011 DS    0H                                                  0818
@ER00011 BR    @14                                                 0818
*                                                                  0819
*/********************************************************************/
*/*                                                                  */
*/* FUNCTION: THIS ROUTINE IS USED TO FIND THE CORE SAVE LIST ENTRY  */
*/*           FOR A CORRESPONDING HEADER ELEMENT.                    */
*/*                                                                  */
*/* INPUTS:   POINTERS IN OPWVHDRE TO THE HEADER ELEMENT AND IN      */
*/*           BIBCSL TO THE CORE SAVE LIST(S).                       */
*/*                                                                  */
*/* OUTPUTS:  A POINTER IN OPWVCSLE TO THE CORE SAVE LIST ENTRY OR   */
*/*           ZERO IF UNABLE TO FIND THE ENTRY.                      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0819
*FNDCSLEL:                                                         0819
*   PROC OPTIONS(NOSAVE);                                          0819
FNDCSLEL DS    0H                                                  0820
*   RFY                                                            0820
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   RFY                                                            0821
*     HEBHDREL BASED(OPWVHDRE);     /* EST BASE FOR HDR ELEMENT      */
*   OPWVCSLP=BIBCSL;                /* POINT TO FIRST CORE SAVE LIST */
         L     @15,OPWBIB(,RCORE)                                  0822
         L     @15,BIBCSL(,@15)                                    0822
         ST    @15,OPWVCSLP(,RCORE)                                0822
*   RFY                                                            0823
*     IDACSL BASED(OPWVCSLP);       /* EST BASE FOR CORE SAVE LIST   */
*   OPWVCSLE=0;                     /* INIT CSL ELEMENT PTR TO ZERO  */
         SLR   @15,@15                                             0824
         ST    @15,OPWVCSLE(,RCORE)                                0824
*   DO WHILE(OPWVCSLP^=0&OPWVCSLE=0);/* SEARCH ALL THE CSL(S) FOR THE
*                                      DESIRED CSL ELEMENT           */
         B     @DE00825                                            0825
@DL00825 DS    0H                                                  0826
*     DO INDEX4=1 TO DIM(CSLNTRYS) BY 1 WHILE OPWVCSLE=0;/* EXAMINE
*                                      EACH CSL ELEMENT IN THIS CSL  */
         LA    INDEX4,1                                            0826
@DL00826 L     @15,OPWVCSLE(,RCORE)                                0826
         LTR   @15,@15                                             0826
         BNZ   @DC00826                                            0826
*       RFY                                                        0827
*         CSLENTRY BASED(ADDR(CSLNTRYS(INDEX4)));/* CSL ELEM BASE    */
*       IF CSLFREMN=HEBFREMN THEN   /* IS CSL FOR SAME BLK AS HEB    */
         LR    @15,INDEX4                                          0828
         MH    @15,@CH00096                                        0828
         L     @11,OPWVCSLP(,RCORE)                                0828
         LA    @15,CSLNTRYS-12(@15,@11)                            0828
         L     @11,OPWVHDRE(,RCORE)                                0828
         CLC   CSLFREMN(8,@15),HEBFREMN(@11)                       0828
         BNE   @RF00828                                            0828
*         OPWVCSLE=ADDR(CSLENTRY);  /* IF SO, RETURN ADDR TO CALLER  */
         ST    @15,OPWVCSLE(,RCORE)                                0829
*       ELSE                                                       0830
*         ;                         /* IF NOT, CONTINUE SEARCH       */
@RF00828 DS    0H                                                  0831
*     END;                                                         0831
         AL    INDEX4,@CF00082                                     0831
         C     INDEX4,@CF00106                                     0831
         BNH   @DL00826                                            0831
@DC00826 DS    0H                                                  0832
*     OPWVCSLP=CSLNXPTR;            /* POINT TO THE NEXT CSL         */
         L     @15,OPWVCSLP(,RCORE)                                0832
         L     @15,CSLNXPTR(,@15)                                  0832
         ST    @15,OPWVCSLP(,RCORE)                                0832
*   END;                                                           0833
@DE00825 SLR   @15,@15                                             0833
         C     @15,OPWVCSLP(,RCORE)                                0833
         BE    @DC00825                                            0833
         C     @15,OPWVCSLE(,RCORE)                                0833
         BE    @DL00825                                            0833
@DC00825 DS    0H                                                  0834
*   RFY                                                            0834
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   END FNDCSLEL;                   /* RETURN TO THE CALLER          */
@EL00012 DS    0H                                                  0835
@EF00012 DS    0H                                                  0835
@ER00012 BR    @14                                                 0835
*                                                                  0836
*/********************************************************************/
*/*                                                                  */
*/* FUNCTION: THIS ROUTINE IS USED TO FREE EXCESS CORE IN CLUSTER    */
*/*           AND SPHERE BLOCKS WHEN INSUFFICIENT SPACE IS AVAILABLE */
*/*           IN THE CURRENT BLOCK TO SATISFY A GET SPACE REQUEST,   */
*/*           OR AT THE END OF A SUCCESSFUL OPEN.                    */
*/*                                                                  */
*/* INPUTS:   A POINTER IN OPWVHDRE TO THE HEADER ELEMENT FOR THE    */
*/*           CORE.                                                  */
*/*                                                                  */
*/* OUTPUTS:  SAME AS INPUT.                                         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0836
*FREECORE:                                                         0836
*   PROC OPTIONS(NOSAVE);                                          0836
FREECORE DS    0H                                                  0837
*   SAVENDEX=SAVENDEX+1;            /* POINT TO NEXT SAVE AREA       */
         AL    SAVENDEX,@CF00082                                   0837
*   RFY                                                            0838
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   OPWVSAVE(SAVENDEX)=RET;         /* SAVE RETURN ADDRESS           */
         LR    @15,SAVENDEX                                        0839
         SLA   @15,2                                               0839
         ST    RET,OPWVSAVE-4(@15,RCORE)                           0839
*   RFY                                                            0840
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   RFY                                                            0841
*     HEBHDREL BASED(OPWVHDRE);     /* EST BASE FOR HEB HDR ELEMENT  */
*   OPWVFMLN=HEBAVSP&(-DOUBLWDL);   /* ROUND-DOWN AVAIL SPACE TO DW  */
         L     @11,@CF03173                                        0842
         L     @08,OPWVHDRE(,RCORE)                                0842
         L     @05,HEBAVSP-1(,@08)                                 0842
         LA    @05,0(,@05)                                         0842
         NR    @05,@11                                             0842
         STCM  @05,7,OPWVFMLN(RCORE)                               0842
*   IF OPWVFMLN^=0 THEN             /* LESS THAN A DW TO BE FREED    */
         LTR   @05,@05                                             0843
         BZ    @RF00843                                            0843
*     DO;                           /* NO, FREE EXCESS CORE          */
*       OPWVFMSP=HEBSP;             /* INIT SP OF CORE TO BE FREED   */
         IC    @02,HEBSP(,@08)                                     0845
         STC   @02,OPWVFMSP(,RCORE)                                0845
*       OPWVFMPT=(HEBNBYTE+7)&(-DOUBLWDL);/* ROUND-UP TO A DW THE PTR
*                                      TO CORE TO BE FREED           */
         LA    @02,7                                               0846
         AL    @02,HEBNBYTE(,@08)                                  0846
         NR    @02,@11                                             0846
         ST    @02,OPWVFMPT(,RCORE)                                0846
*       RFY                                                        0847
*        (R0,                                                      0847
*         R1) RSTD;                 /* RESTRICT REGISTER USAGE       */
*       LM(R0,R1,OPWVFMPL);         /* SET UP FREEMAIN REGISTERS     */
         LM    R0,R1,OPWVFMPL(RCORE)                               0848
*       IF HEBKEY5=ON&HEBSP=RDEBPOOL THEN/* BR ENTRY REQUIRED        */
         TM    HEBKEY5(@08),B'01000000'                            0849
         BNO   @RF00849                                            0849
         CLI   HEBSP(@08),230                                      0849
         BNE   @RF00849                                            0849
*         DO;                       /* YES, OBTAIN LOCAL LOCK FIRST  */
*           R0=OPWVFMLN;            /* REG 0 MUST ONLY CONTAIN LENGTH
*                                      FOR BRANCH ENTRY TO FREEMAIN
*                                      OBTAIN THE LOCAL LOCK         */
         LR    R0,@05                                              0851
*           OPWVRG13=R13;           /* SAVE REG 13                   */
         ST    R13,OPWVRG13(,RCORE)                                0852
*           DO;                     /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) RELATED(FREEMAIN,I
*                                      DA0192M(FREECORE))            */
*             RFY                                                  0854
*              (GPR11P,                                            0854
*               GPR12P,                                            0854
*               GPR13P,                                            0854
*               GPR14P) RSTD;                                      0854
*             GPR13P=PSALITA;       /* ADDRESS OF LOCK INTERFACE   0855
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0855
*             GEN(LM GPR11P,GPR13P,576(GPR13P));/* LOAD LOCKWORD,  0856
*                                      CLHT AND ENTRY ADRS.          */
         LM GPR11P,GPR13P,576(GPR13P)
*             GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK RTN.        */
         BALR GPR14P,GPR13P
*             RFY                                                  0858
*              (GPR11P,                                            0858
*               GPR12P,                                            0858
*               GPR13P,                                            0858
*               GPR14P) UNRSTD;                                    0858
*           END;                    /* SETLOCK (OBTAIN) MODE(UNCOND)
*                                      TYPE(LOCAL) RELATED(FREEMAIN,I
*                                      DA0192M(FREECORE))            */
*           R12=OPWVRG12;           /* RESTORE SECOND BASE REG       */
         L     R12,OPWVRG12(,RCORE)                                0860
*           RFY                                                    0861
*            (R4,                                                  0861
*             R7,                                                  0861
*             R11) RSTD;            /* RESTRICT REGISTERS            */
*           R11=RBASEA;             /* SAVE BASE REGISTER    @OZ04229*/
         LR    R11,RBASEA                                          0862
*           R13=RCORE;              /* SAVE PTR TO O/C/E WORK AREA   */
         LR    R13,RCORE                                           0863
*           IF HEBJSTCB=ON THEN     /* CHECK CORE TCB OWNERSHIP      */
         L     @08,OPWVHDRE(,RCORE)                                0864
         TM    HEBJSTCB(@08),B'10000000'                           0864
         BNO   @RF00864                                            0864
*             R4=TCBJSTCB;          /* PT TO JOBSTEP TCB FOR GETMAIN */
         L     @08,PSATNEW                                         0865
         L     R4,TCBJSTCB(,@08)                                   0865
*           ELSE                    /* NOT JOB STEP RELATED          */
*             R4=ADDR(TCB);         /* PT TO CURRENT TCB FOR GETMAIN */
         B     @RC00864                                            0866
@RF00864 L     R4,PSATNEW                                          0866
*           R7=PSAAOLD;             /* POINT TO ASCB FOR FREEMAIN  0867
*                                      FREE EXCESS CORE              */
@RC00864 L     R7,PSAAOLD                                          0867
*           GEN( FREEMAIN RU,LV=(0),A=(1),SP=230,BRANCH=YES,KEY=5) 0868
*           REFS(R0,R1);                                           0868
          FREEMAIN RU,LV=(0),A=(1),SP=230,BRANCH=YES,KEY=5
*           RBASEA=R11;             /* RESTORE BASE REGISTER @OZ04229*/
         LR    RBASEA,R11                                          0869
*           RCORE=R13;              /* RESTORE O/C/E WORK AREA PTR   */
         LR    RCORE,R13                                           0870
*           RFY                                                    0871
*            (R4,                                                  0871
*             R7,                                                  0871
*             R11) UNRSTD;          /* DROP REG RESTRICTIONS RELEASE
*                                      THE LOCAL LOCK                */
*           DO;                     /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(FREEMAIN,IDA0192M(FREE
*                                      CORE))                        */
*             RFY                                                  0873
*              (GPR11P,                                            0873
*               GPR12P,                                            0873
*               GPR13P,                                            0873
*               GPR14P) RSTD;                                      0873
*             GPR13P=PSALITA;       /* ADDRESS OF LOCK INTERFACE   0874
*                                      TABLE.                        */
         L     GPR13P,PSALITA                                      0874
*             GEN(LM GPR11P,GPR13P,588(GPR13P));/* LOAD LOCKWORD,  0875
*                                      CLHT AND ENTRY ADRS.          */
         LM GPR11P,GPR13P,588(GPR13P)
*             GEN(BALR GPR14P,GPR13P);/* BALR TO SETLOCK RTN.        */
         BALR GPR14P,GPR13P
*             RFY                                                  0877
*              (GPR11P,                                            0877
*               GPR12P,                                            0877
*               GPR13P,                                            0877
*               GPR14P) UNRSTD;                                    0877
*           END;                    /* SETLOCK (RELEASE) TYPE(LOCAL)
*                                      RELATED(FREEMAIN,IDA0192M(FREE
*                                      CORE))                        */
*           LM(R12,R13,OPWVLSAV);   /* RESTORE REGS USED BY SETLOCK  */
         LM    R12,R13,OPWVLSAV(RCORE)                             0879
*         END;                                                     0880
*       ELSE                        /* NO, USE SVC FREEMAIN          */
*         DO;                       /* CHECK OF CORE TO BE FREED     */
         B     @RC00849                                            0881
@RF00849 DS    0H                                                  0882
*           IF HEBKEY5=ON THEN      /* IS CORE TO BE FREED IN KEY 5  */
         L     @11,OPWVHDRE(,RCORE)                                0882
         TM    HEBKEY5(@11),B'01000000'                            0882
         BNO   @RF00882                                            0882
*             DO;                   /* MODESET EXTKEY(DATAMGT)       */
*               SPKA(80);           /* SET PSW KEY                   */
         LA    @11,80                                              0884
         SPKA  0(@11)                                              0884
*             END;                  /* MODESET EXTKEY(DATAMGT) YES,
*                                      MODESET TO KEY 5              */
*           ELSE                    /* NO, CHECK FOR KEY 7 CORE      */
*             IF HEBGSRKT=ON THEN   /* TO BE FREED IN GSR KEY?     0886
*                                                            @Z40ESSR*/
         B     @RC00882                                            0886
@RF00882 L     @11,OPWVHDRE(,RCORE)                                0886
         TM    HEBGSRKT(@11),B'00100000'                           0886
         BNO   @RF00886                                            0886
*               DO;                 /*                       @Z40ESSR*/
*                 RFY                                              0888
*                   R15 RSTD;       /*                       @Z40ESSR*/
*                 R15=HEBGSRK;      /* LOAD GSR KEY INTO REG @Z40ESSR*/
         SLR   R15,R15                                             0889
         IC    R15,HEBGSRK(,@11)                                   0889
*                 SPKA(R15);        /* MODESET TO GSR KEY    @Z40ESSR*/
         SPKA  0(R15)                                              0890
*                 RFY                                              0891
*                   R15 UNRSTD;     /*                       @Z40ESSR*/
*               END;                /*                       @Z40ESSR*/
*             ELSE                                                 0893
*               ;                   /* NO, CONTINUE TO RUN IN KEY 0  */
@RF00886 DS    0H                                                  0894
*           GEN( FREEMAIN R,LV=(0),A=(1))/* FREE EXCESS CORE         */
*           REFS(R0,R1);                                           0894
@RC00882 DS    0H                                                  0894
          FREEMAIN R,LV=(0),A=(1)
*           RFY                                                    0895
*            (R0,                                                  0895
*             R1) UNRSTD;           /* DROP REGISTER RESTRICTIONS    */
*           DO;                     /* MODESET EXTKEY(SUPR)          */
*             SPKA(0);              /* SET PSW KEY                   */
         SLR   @11,@11                                             0897
         SPKA  0(@11)                                              0897
*           END;                    /* MODESET EXTKEY(SUPR) RETURN TO
*                                      KEY O                         */
*         END;                                                     0899
*       HEBLN=HEBLN-OPWVFMLN;       /* DECR LENGTH OF BLOCK          */
@RC00849 L     @11,OPWVHDRE(,RCORE)                                0900
         L     @08,HEBLN-1(,@11)                                   0900
         LA    @08,0(,@08)                                         0900
         L     @05,OPWVFMLN-1(,RCORE)                              0900
         LA    @05,0(,@05)                                         0900
         SLR   @08,@05                                             0900
         STCM  @08,7,HEBLN(@11)                                    0900
*     END;                                                         0901
*   ELSE                                                           0902
*     ;                             /* LESS THAN A DW LEFT - ZERO  0902
*                                      AVAILABLE SPACE               */
@RF00843 DS    0H                                                  0903
*   HEBAVSP=0;                      /* ZERO AMNT OF AVAILABLE SPACE  */
         L     @11,OPWVHDRE(,RCORE)                                0903
         SLR   @08,@08                                             0903
         STCM  @08,7,HEBAVSP(@11)                                  0903
*   RFY                                                            0904
*     RET RSTD;                     /* RESTRICT RETURN REGISTER      */
*   RET=OPWVSAVE(SAVENDEX);         /* RESTORE RETURN ADDRESS        */
         LR    @11,SAVENDEX                                        0905
         SLA   @11,2                                               0905
         L     RET,OPWVSAVE-4(@11,RCORE)                           0905
*   RFY                                                            0906
*     RET UNRSTD;                   /* DROP REGISTER RESTRICTION     */
*   SAVENDEX=SAVENDEX-1;            /* POINT TO LAST SAVE AREA       */
         BCTR  SAVENDEX,0                                          0907
*   END FREECORE;                   /* RETURN TO THE CALLER          */
@EL00013 DS    0H                                                  0908
@EF00013 DS    0H                                                  0908
@ER00013 BR    @14                                                 0908
*   END IDA0192M                    /* RETURN TO THE CALLER          */
*                                                                  0909
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (LCGPLSSW)                                       */
*/*%INCLUDE SYSLIB  (IDAOCECN)                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDABIB  )                                       */
*/*%INCLUDE SYSLIB  (IDACMB  )                                       */
*/*%INCLUDE SYSLIB  (IDACSL  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IDAFOREC)                                       */
*/*%INCLUDE SYSLIB  (IECDSECT)                                       */
*/*%INCLUDE SYSLIB  (IECDSECS)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBX)                                       */
*/*%INCLUDE SYSLIB  (IDAPDPRM)                                       */
*/*%INCLUDE SYSLIB  (IDAHEB  )                                       */
*/*%INCLUDE SYSLIB  (IDAIDXCB)                                       */
*/*%INCLUDE SYSLIB  (IDALPMB )                                       */
*/*%INCLUDE SYSLIB  (IDAOPWRK)                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IEZXRB  )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IDARTMAC)                                       */
*                                                                  0909
*       ;                                                          0909
@DATA    DS    0H
@CH02046 DC    H'10'
@CH00096 DC    H'12'
@CH00098 DC    H'16'
@CH00102 DC    H'24'
@DATD    DSECT
         DS    0F
IDA0192M CSECT
         DS    0F
@CF00082 DC    F'1'
@CF03181 DC    F'14'
@CF00049 DC    F'15'
@CF00106 DC    F'32'
@CH00106 EQU   @CF00106+2
@CF03177 DC    F'396'
@CF03178 DC    F'404'
@CF03174 DC    F'58880'
@CF03179 DC    F'61696'
@CF03180 DC    F'64512'
@CF03176 DC    F'5242880'
@CF03186 DC    F'-12'
@CF03173 DC    F'-8'
@CF03172 DC    F'-4'
@CF03113 DC    XL4'00000004'
@DATD    DSECT
         DS    0D
IDA0192M CSECT
         NOPR  ((@ENDDATD-@DATD)*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC00457 DC    C' IDACSL '
@CC02991 DC    C'192M'
@CB03185 DC    X'00'
         DS    CL1
SPHREQTB DS    CL10
         ORG   SPHREQTB
@NM00164 DC    AL1(250)
@NM00165 DS    XL1
@NM00166 DC    AL1(241)
@NM00167 DC    AL1(241)
@NM00168 DC    B'00000000'
@NM00169 DS    XL1
@NM00170 DC    B'00100000'
@NM00171 DC    B'00100000'
@NM00172 DC    AL2(2*1024)
         ORG   SPHREQTB+10
CLSTREQT DS    CL10
         ORG   CLSTREQT+0
@NM00155 DC    AL1(250)
@NM00156 DC    AL1(231)
@NM00157 DC    AL1(241)
@NM00158 DC    AL1(241)
@NM00159 DC    B'00000000'
@NM00160 DC    B'00000000'
@NM00161 DC    B'00100000'
@NM00162 DC    B'00100000'
@NM00163 DC    AL2(2*1024)
         ORG   CLSTREQT+10
         ORG   CLSTREQT+10
         DC    AL1(252)
         DC    AL1(231)
         DC    AL1(241)
         DC    AL1(241)
         DC    B'00000000'
         DC    B'00000000'
         DC    B'00000000'
         DC    B'00000000'
         DC    AL2(3*28+2*120+64)
         ORG   CLSTREQT+20
         ORG   CLSTREQT+20
         DC    AL1(250)
         DC    AL1(231)
         DC    AL1(241)
         DC    AL1(241)
         DC    B'00000000'
         DC    B'00000000'
         DC    B'00100000'
         DC    B'00100000'
         DC    AL2(2*1024)
         ORG   CLSTREQT+30
         ORG   CLSTREQT+30
         DC    AL1(250)
         DS    XL1
         DS    XL1
         DC    AL1(241)
         DC    B'00000000'
         DS    XL1
         DS    XL1
         DC    B'00100000'
         DC    AL2(2*1024)
         ORG   CLSTREQT+40
         ORG   CLSTREQT+40
         DC    AL1(245)
         DC    AL1(245)
         DC    AL1(245)
         DC    AL1(245)
         DC    B'00000000'
         DC    B'00000000'
         DC    B'00000000'
         DC    B'00000000'
         DC    H'0'
         ORG   CLSTREQT+50
         ORG   CLSTREQT+50
         DC    AL1(245)
         DS    XL1
         DS    XL1
         DC    AL1(245)
         DC    B'00000000'
         DS    XL1
         DS    XL1
         DC    B'00000000'
         DC    H'0'
         ORG   CLSTREQT+60
         ORG   CLSTREQT+60
         DC    AL1(250)
         DC    AL1(231)
         DS    XL1
         DC    AL1(231)
         DC    B'10000000'
         DC    B'10000000'
         DS    XL1
         DC    B'10100000'
         DC    H'0'
         ORG   CLSTREQT+70
         ORG   CLSTREQT+70
         DC    AL1(250)
         DS    XL1
         DS    XL1
         DC    AL1(231)
         DC    B'10000000'
         DS    XL1
         DS    XL1
         DC    B'10100000'
         DC    H'0'
         ORG   CLSTREQT+80
         ORG   CLSTREQT+80
         DC    AL1(230)
         DC    AL1(241)
         DC    AL1(241)
         DC    AL1(241)
         DC    B'01000100'
         DC    B'00000000'
         DC    B'01000000'
         DC    B'01000000'
         DC    H'0'
         ORG   CLSTREQT+90
         ORG   CLSTREQT+90
         DC    AL1(252)
         DC    AL1(231)
         DC    AL1(241)
         DC    AL1(241)
         DC    B'00000000'
         DC    B'00000000'
         DC    B'00000000'
         DC    B'00000000'
         DC    H'0'
         ORG   CLSTREQT+100
         ORG   CLSTREQT+100
         DC    AL1(252)
         DC    AL1(231)
         DC    AL1(241)
         DC    AL1(241)
         DC    B'10000000'
         DC    B'10000000'
         DC    B'10000000'
         DC    B'10000000'
         DC    AL2(4*1024)
         ORG   CLSTREQT+110
         ORG   CLSTREQT+110
         DC    AL1(252)
         DS    XL1
         DS    XL1
         DC    AL1(241)
         DC    B'10000000'
         DS    XL1
         DS    XL1
         DC    B'10000000'
         DC    AL2(2*1024)
         ORG   CLSTREQT+120
         ORG   CLSTREQT+120
         DC    AL1(254)
         DC    AL1(245)
         DC    AL1(245)
         DC    AL1(245)
         DC    B'00000000'
         DC    B'00000000'
         DC    B'00000000'
         DC    B'00000000'
         DC    H'0'
         ORG   CLSTREQT+130
         ORG   CLSTREQT+130
         DS    XL1
         DS    XL1
         DS    XL1
         DS    XL1
         DS    XL1
         DS    XL1
         DS    XL1
         DS    XL1
         DS    XL2
         ORG   CLSTREQT+160
IDA0192M CSECT
         DS    0H                      ALIGN PATCH AREA TO HALFWORD
PATCH2M  DC    ((*-IDA0192M)/50)X'00'  INIT PATCH AREA TO ALL ZEROS
@DATD    DSECT
@ENDDATD EQU   *
IDA0192M CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
GSNDEX   EQU   @09
INDEX4   EQU   @05
INDEX3   EQU   @09
INDEX2   EQU   @10
INDEX1   EQU   @05
RBASEA   EQU   @03
RBASEB   EQU   @12
GPR00F   EQU   @00
GPR01F   EQU   @01
GPR15F   EQU   @15
GPR14P   EQU   @14
GPR03F   EQU   @03
GPR11P   EQU   @11
GPR12P   EQU   @12
GPR13P   EQU   @13
SAVENDEX EQU   @13
R14      EQU   @14
R0       EQU   @00
R1       EQU   @01
RACB     EQU   @02
R12      EQU   @12
R13      EQU   @13
RCORE    EQU   @04
R4       EQU   @04
R7       EQU   @07
R11      EQU   @11
RET      EQU   @14
RETCODE  EQU   @15
R15      EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14F   EQU   @14
GPR15P   EQU   @15
RDEB     EQU   @11
RTIOT    EQU   @09
RUCB     EQU   @10
R10      EQU   @10
R5       EQU   @05
R6       EQU   @06
R8       EQU   @08
R9       EQU   @09
CVTPTR   EQU   16
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATNEW  EQU   PSA+536
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
NOBASE   EQU   0
MHEBPTR  EQU   0
MSPHPTR  EQU   0
MANCPTR  EQU   0
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBINFL1 EQU   ACBINFLG
ACBVVIC  EQU   ACBINFL1
ACBINFL2 EQU   ACBINFLG+1
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMB   EQU   0
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
IDABIB   EQU   0
BIBHDR   EQU   IDABIB
BIBFLG1  EQU   BIBHDR+1
BIBSPHPT EQU   IDABIB+24
BIBPRSPH EQU   IDABIB+28
BIBHEBPT EQU   IDABIB+32
BIBHEBFQ EQU   IDABIB+36
BIBCSL   EQU   IDABIB+48
BIBPSAB  EQU   IDABIB+52
BIBVGTT  EQU   IDABIB+56
BIBRTNS  EQU   IDABIB+60
IDACMB   EQU   0
CMBFLGS  EQU   IDACMB+4
CMBPTRS  EQU   IDACMB+8
IDACSL   EQU   0
CSLR0    EQU   IDACSL
CSLSUBPL EQU   CSLR0
CSLLENTH EQU   CSLR0+1
CSLID    EQU   IDACSL+4
CSLNXPTR EQU   IDACSL+12
CSLACTEN EQU   IDACSL+16
CSLGSRK  EQU   IDACSL+18
CSLNTRYS EQU   IDACSL+20
CSLENTRY EQU   0
CSLFREMN EQU   CSLENTRY
CSLPOOLN EQU   CSLFREMN
CSLCORLN EQU   CSLFREMN+1
CSLCORPT EQU   CSLFREMN+4
CSLFLAGS EQU   CSLENTRY+8
CSLKEY5  EQU   CSLFLAGS
CSLGSRKT EQU   CSLFLAGS
CSLJSTCB EQU   CSLFLAGS
CSLANCPT EQU   CSLENTRY+9
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
FORCORE  EQU   0
DXDSCB   EQU   FORCORE
DXJBF    EQU   FORCORE+100
DXIOB    EQU   FORCORE+280
DXDAADDR EQU   FORCORE+312
DXDCB    EQU   FORCORE+320
DXCCW    EQU   FORCORE+368
DXCCW5   EQU   DXCCW+32
DXCCW8   EQU   DXCCW+56
DXCCW12  EQU   DXCCW+88
DXXCTL   EQU   FORCORE+472
DXVOLSR  EQU   FORCORE+500
DXVOLSR1 EQU   DXVOLSR
DXVOLSR2 EQU   DXVOLSR+6
DXVOLSR3 EQU   DXVOLSR+12
DXRESSW  EQU   FORCORE+524
DXUKEY   EQU   FORCORE+526
DXUCBSAV EQU   FORCORE+564
DXUDCBAD EQU   FORCORE+568
DXPDCBAD EQU   FORCORE+572
DXATCOM1 EQU   FORCORE+588
DXATGENS EQU   DXATCOM1
DXATVGIV EQU   DXATGENS
DXATOUTA EQU   DXATCOM1+2
DXATDACC EQU   DXATCOM1+3
DXATCOM2 EQU   FORCORE+592
DXATEOV  EQU   DXATCOM2
DXATOPEN EQU   DXATCOM2+1
DXATALL  EQU   DXATCOM2+2
DXATEXC1 EQU   FORCORE+604
DXATEXB1 EQU   DXATEXC1
DXATEXC2 EQU   FORCORE+608
DSECTSIZ EQU   FORCORE+612
IECPREFX EQU   0
IECEXTPR EQU   IECPREFX+32
IECWTGTB EQU   IECEXTPR+72
IECUPRML EQU   IECEXTPR+80
IECRESWA EQU   IECEXTPR+84
RWARESWA EQU   0
RWAPREFX EQU   RWARESWA
USERPRML EQU   0
IECRRPL  EQU   0
RRPLIST  EQU   IECRRPL
RRFUNCTN EQU   RRPLIST
RRFLAGS1 EQU   RRPLIST+1
RRFLAGS2 EQU   RRPLIST+2
RRFLAGS3 EQU   RRPLIST+3
RRXRETRY EQU   RRPLIST+12
DSMADTRL EQU   0
DSMADTW1 EQU   DSMADTRL
DSMADTB1 EQU   DSMADTW1
DSMADTB2 EQU   DSMADTW1+1
WTGTABLE EQU   0
WTGWTOPR EQU   WTGTABLE
WTG      EQU   0
WTGAREA  EQU   WTG
WTGMODNM EQU   WTGAREA
WTGPREFX EQU   WTGAREA+16
WTGPATHS EQU   WTG+30
WTGENTRY EQU   0
WTGIDTTR EQU   WTGENTRY
APPNMTBL EQU   0
APPENTRY EQU   APPNMTBL+4
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
JFCBX    EQU   0
IDAPDPRM EQU   0
PDPMSGFL EQU   IDAPDPRM+34
HEBHDREL EQU   0
HEBFREMN EQU   HEBHDREL
HEBSP    EQU   HEBFREMN
HEBLN    EQU   HEBFREMN+1
HEBBLKPT EQU   HEBFREMN+4
HEBFLAGS EQU   HEBHDREL+8
HEBJSTCB EQU   HEBFLAGS
HEBKEY5  EQU   HEBFLAGS
HEBGSRKT EQU   HEBFLAGS
HEBIOSUP EQU   HEBFLAGS
HEBAVSP  EQU   HEBHDREL+9
HEBELCHN EQU   HEBHDREL+12
HEBNBYTE EQU   HEBHDREL+16
@NM00071 EQU   HEBHDREL+20
HEBGSRK  EQU   @NM00071
IDAHEB   EQU   0
HEBID    EQU   IDAHEB
HEBLEN   EQU   IDAHEB+2
HEBNHEB  EQU   IDAHEB+4
HEBCNT   EQU   IDAHEB+10
HEBHDELS EQU   IDAHEB+12
IDALPMB  EQU   0
LPMBFLGS EQU   IDALPMB+1
IDAOPWRK EQU   0
OPWFLGS1 EQU   IDAOPWRK+12
OPWCAT   EQU   OPWFLGS1
OPWSCRA  EQU   OPWFLGS1
OPWVVIC  EQU   OPWFLGS1
OPWFLGS2 EQU   IDAOPWRK+13
OPWFLGS3 EQU   IDAOPWRK+14
OPWFLGS4 EQU   IDAOPWRK+15
OPWBIB   EQU   IDAOPWRK+16
OPWCOMWA EQU   IDAOPWRK+20
OPWIDF   EQU   IDAOPWRK+24
OPWQ     EQU   OPWIDF+7
OPWGSR   EQU   OPWQ
OPWLSR   EQU   OPWQ
OPWVSMPL EQU   IDAOPWRK+32
OPWVMANC EQU   OPWVSMPL
OPWVMSP  EQU   OPWVSMPL+4
OPWVMLNG EQU   OPWVSMPL+5
OPWVMADR EQU   OPWVSMPL+8
OPWVMTYP EQU   OPWVSMPL+12
OPWVMFLG EQU   OPWVSMPL+13
OPWVSMWA EQU   IDAOPWRK+48
OPWVANCP EQU   OPWVSMWA
OPWVTBLP EQU   OPWVSMWA+4
OPWVCSLP EQU   OPWVSMWA+8
OPWVCSLE EQU   OPWVSMWA+12
OPWVHDRE EQU   OPWVSMWA+16
OPWVR13  EQU   OPWVSMWA+20
OPWVSAVE EQU   OPWVSMWA+24
OPWVGSPL EQU   OPWVSMWA+40
OPWVANCS EQU   OPWVSMWA+76
OPWVLSAV EQU   OPWVSMWA+80
OPWVRG12 EQU   OPWVLSAV
OPWVRG13 EQU   OPWVLSAV+4
OPWVFMPL EQU   OPWVSMWA+88
OPWVFMSP EQU   OPWVFMPL
OPWVFMLN EQU   OPWVFMPL+1
OPWVFMPT EQU   OPWVFMPL+4
OPWSAVE  EQU   IDAOPWRK+144
OPWCURPT EQU   IDAOPWRK+164
OPWQ2    EQU   IDAOPWRK+198
OPWCBIC  EQU   OPWQ2
OPWCATTR EQU   IDAOPWRK+199
OPWBSECL EQU   IDAOPWRK+568
OPWPTAIX EQU   IDAOPWRK+576
OPWUPAIX EQU   IDAOPWRK+588
OPWCURCL EQU   0
OPWCFLG1 EQU   OPWCURCL
OPWFLG2  EQU   OPWCURCL+4
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
XRBPSW   EQU   RBOPSW
RBOPSWB2 EQU   XRBPSW+1
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
XRBPRFX  EQU   0
XRBPRFX1 EQU   0
XRB      EQU   0
@NM00126 EQU   XRB+10
@NM00127 EQU   @NM00126
XRBLRBFX EQU   @NM00127
@NM00129 EQU   @NM00126+1
@NM00130 EQU   @NM00129
@NM00131 EQU   @NM00129
XRBWTL   EQU   XRB+12
XRBEP    EQU   XRBWTL
@NM00134 EQU   XRB+16
XRTLPRB  EQU   @NM00134+4
XRBLOCK  EQU   XRTLPRB
XRBFLAG1 EQU   XRBLOCK
@NM00137 EQU   XRB+28
CDB      EQU   0
CDBMDAD  EQU   CDB
CDBMDSZ  EQU   CDB+4
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBSTAWA EQU   TCB+252
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
IDAVGTT  EQU   0
VGTTTYPE EQU   IDAVGTT+4
VGTTPSB  EQU   IDAVGTT+24
REQTABLE EQU   0
REQOCESP EQU   REQTABLE
REQCATSP EQU   REQTABLE+1
REQGSRSP EQU   REQTABLE+2
REQCBCSP EQU   REQTABLE+3
REQOCEFG EQU   REQTABLE+4
REQCATFG EQU   REQTABLE+5
REQGSRFG EQU   REQTABLE+6
REQCBCFG EQU   REQTABLE+7
REQSIZE  EQU   REQTABLE+8
GSLIST   EQU   0
GSLSPNO  EQU   GSLIST
GSLGETLN EQU   GSLIST+1
GSLPTR   EQU   GSLIST+4
GSLFLAGS EQU   GSLIST+8
GSLPGBDY EQU   GSLFLAGS
GSLKEY5  EQU   GSLFLAGS
GSLGSRKT EQU   GSLFLAGS
GSLIOSUP EQU   GSLFLAGS
GSLNOCSL EQU   GSLFLAGS
GSLJSTCB EQU   GSLFLAGS
GSLREQLN EQU   GSLIST+9
IKEBC    EQU   0
IKEBF15  EQU   0
IKEBF31  EQU   0
IKEBP15  EQU   0
IKEBP31  EQU   0
IKEBP8   EQU   0
CMBENTRY EQU   CMBPTRS
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTCRMN  EQU   CVTS01+156
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
DXXWTG   EQU   DSECTSIZ
DXXAREA  EQU   DSECTSIZ+4
DXXMODNM EQU   DXXAREA
DXXLNG   EQU   DXXAREA+29
DXXENTRY EQU   DXXAREA+32
DXXIDTTR EQU   DXXENTRY
DXREGSAV EQU   DXCCW8
DXREG1   EQU   DXREGSAV+28
DXIDENT  EQU   DXCCW12
DXRETMOD EQU   DXIDENT+2
@NM00061 EQU   DXXCTL
DXSAVMOD EQU   @NM00061+2
@NM00062 EQU   DXRESSW
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
JFCBSPNM EQU   JFCBS001+45
JFCBFLG3 EQU   JFCBSPNM
PDWLIST  EQU   FORCORE
PDWWORK  EQU   DXDCB
PSARSVTE EQU   PSARSVT
IDARRPL  EQU   DXATCOM1
IDARRFLG EQU   IDARRPL+1
IDARSTAT EQU   DXATEXC1
RSTAT    EQU   IDARSTAT
RSTATCRO EQU   RSTAT+1
RSTATOP2 EQU   RSTAT+2
IDARRTN  EQU   DXATEXC2
RSTATRTN EQU   IDARRTN
DXBTAMX  EQU   DXREG1
DXDSNAME EQU   DXCCW5
FLC      EQU   PSA
IDAESPL  EQU   DXATCOM1
IDARTSA  EQU   DXJBF
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00154 EQU   RSTAT+3
@NM00153 EQU   RSTATOP2
RSTATCSA EQU   RSTATOP2
IDARCURS EQU   RSTATCRO
IDARCRCU EQU   RSTATCRO
IDARRSTR EQU   RSTATCRO
IDARCKPT EQU   RSTATCRO
RSTATOPT EQU   RSTAT
@NM00152 EQU   IDARRPL+2
@NM00151 EQU   IDARRFLG
RRPLVSAM EQU   IDARRFLG
@NM00150 EQU   IDARRFLG
@NM00149 EQU   IDARRPL
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
PDWORKSP EQU   PDWWORK+88
PDWERRCD EQU   PDWWORK+84
PDWMSGPT EQU   PDWWORK+80
PDWSAVED EQU   PDWWORK+76
PDWSAVEC EQU   PDWWORK+72
PDWSAVEB EQU   PDWWORK+68
PDWSAVEA EQU   PDWWORK+64
PDWSAVE  EQU   PDWWORK
WTPROUT  EQU   PDWLIST+75
WTPMSG   EQU   PDWLIST+4
WTPFLGS  EQU   PDWLIST+2
WTPLNGTH EQU   PDWLIST
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBRV08 EQU   JFCBSPNM+1
JFCBRV07 EQU   JFCBFLG3
JFCBRV06 EQU   JFCBFLG3
JFCBRV05 EQU   JFCBFLG3
JFCBRV04 EQU   JFCBFLG3
JFCBRV03 EQU   JFCBFLG3
JFCBRV02 EQU   JFCBFLG3
JFCBEXP  EQU   JFCBFLG3
JFCDQDSP EQU   JFCBFLG3
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCBADSP EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBMSGP EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXAD EQU   JFCBS001+31
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00066 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNVOL EQU   JFCUCSEG+9
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00065 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCORGIS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00064 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
DXRESIND EQU   @NM00062
DXSAVOFF EQU   @NM00061+7
DXSAVADR EQU   DXSAVMOD+2
DXSAVID  EQU   DXSAVMOD
DXABCODE EQU   @NM00061
DXRETCOD EQU   DXIDENT+7
DXRETTTR EQU   DXRETMOD+2
DXRETID  EQU   DXRETMOD
DXCALLID EQU   DXIDENT
DXREG0   EQU   DXREGSAV+24
DXREGE   EQU   DXREGSAV+20
DXREGD   EQU   DXREGSAV+16
DXREGC   EQU   DXREGSAV+12
DXREGB   EQU   DXREGSAV+8
DXREGA   EQU   DXREGSAV+4
DXREG9   EQU   DXREGSAV
DXXEND   EQU   DXXAREA+48
DXXLAST  EQU   DXXAREA+40
DXXCORE  EQU   DXXENTRY+5
DXETTR   EQU   DXXIDTTR+2
DXEID    EQU   DXXIDTTR
DXXPATHS EQU   DXXAREA+30
DXOPCLSW EQU   DXXLNG
DXXTXTLN EQU   DXXAREA+27
DXXMODSZ EQU   DXXAREA+24
DXXATTRB EQU   DXXAREA+22
@NM00046 EQU   DXXAREA+20
DXXPREFX EQU   DXXAREA+16
@NM00045 EQU   DXXAREA+12
DXXMODEP EQU   DXXAREA+8
DXXMODID EQU   DXXMODNM+6
@NM00044 EQU   DXXMODNM
DXXWTOPR EQU   DXXWTG
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
VGTTCORE EQU   IDAVGTT+32
@NM00148 EQU   IDAVGTT+28
VGTTVUSE EQU   IDAVGTT+20
VGTTBIB  EQU   IDAVGTT+16
VGTTNEXT EQU   IDAVGTT+12
VGTTSIZE EQU   IDAVGTT+8
VGTTSP   EQU   IDAVGTT+7
VGTTGSRK EQU   IDAVGTT+6
@NM00147 EQU   IDAVGTT+5
@NM00146 EQU   VGTTTYPE
VGTTCBIC EQU   VGTTTYPE
VGTTOPEN EQU   VGTTTYPE
VGTTCTLG EQU   VGTTTYPE
VGTTLSR  EQU   VGTTTYPE
VGTTGSR  EQU   VGTTTYPE
VGTTSDS  EQU   VGTTTYPE
VGTTID   EQU   IDAVGTT
@NM00145 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00144 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAFX EQU   TCBSTAWA
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00143 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00142 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
CDBMDSZA EQU   CDBMDSZ+1
CDBSUBPL EQU   CDBMDSZ
CDBMDADA EQU   CDBMDAD+1
CDBNLSZ  EQU   CDBMDAD
XSVRBEND EQU   XRB+152
@NM00141 EQU   XRB+96
XSIRBEND EQU   XRB+96
XIRBEND  EQU   XRB+96
@NM00140 EQU   XRB+32
XLPRBEND EQU   XRB+32
XPRBEND  EQU   XRB+32
@NM00139 EQU   @NM00137+1
@NM00138 EQU   @NM00137
XRBQ     EQU   XRB+24
XFRBEND  EQU   XRB+24
@NM00136 EQU   XRTLPRB+1
XRBWTIS  EQU   XRBFLAG1
@NM00135 EQU   XRBFLAG1
XRBSRSW  EQU   XRBFLAG1
XRBPFSW  EQU   XRBFLAG1
XRREQ    EQU   @NM00134
XLRBEND  EQU   XRB+16
XRBEPA   EQU   XRBEP+1
XRBUSE   EQU   XRBEP
@NM00133 EQU   @NM00129
@NM00132 EQU   @NM00129
XRBIRBBT EQU   @NM00129
XRBREUS  EQU   @NM00129
XRBRSREG EQU   @NM00129
XRBGTMAN EQU   @NM00131
XRBNRENT EQU   @NM00130
XRBREFR  EQU   @NM00127
XRBETXR  EQU   XRBLRBFX
@NM00128 EQU   @NM00127
XRBSVRES EQU   @NM00127
XRBTYPF  EQU   @NM00127
XRBSZY   EQU   XRB+9
XRBCDBPY EQU   XRB+8
XRBNM    EQU   XRB
XRBPFXND EQU   XRBPRFX1+8
XRBPRE   EQU   XRBPRFX1+4
XRBSUC   EQU   XRBPRFX1
XRBQMAJ  EQU   XRBPRFX+4
@NM00125 EQU   XRBPRFX
RBEXSAVE EQU   XRBESA
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00124 EQU   RBBASIC+24
RBOPSWPS EQU   RBOPSWB2
@NM00123 EQU   RBOPSWB2
@NM00122 EQU   XRBPSW
@NM00121 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00120 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00119 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00118 EQU   XSTAB1
@NM00117 EQU   RBBASIC+8
@NM00116 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00115 EQU   RBPRFX
OPWCIXCI EQU   OPWCURCL+5
OPWIOPEN EQU   OPWFLG2
OPWERR2B EQU   OPWFLG2
OPWEMPUP EQU   OPWFLG2
OPWMODWK EQU   OPWFLG2
OPWDOPEN EQU   OPWFLG2
OPWCDTCI EQU   OPWCURCL+1
OPWPRTBL EQU   OPWCFLG1
OPWSVWRK EQU   OPWCFLG1
OPWUPGR  EQU   OPWCFLG1
OPWPATH  EQU   OPWCFLG1
OPWBASE  EQU   OPWCFLG1
OPWUIXCI EQU   OPWUPAIX+5
@NM00090 EQU   OPWUPAIX+4
OPWUDTCI EQU   OPWUPAIX+1
@NM00089 EQU   OPWUPAIX
OPW2YPLH EQU   IDAOPWRK+585
OPWNOUPG EQU   IDAOPWRK+584
OPWPIXCI EQU   OPWPTAIX+5
@NM00088 EQU   OPWPTAIX+4
OPWPDTCI EQU   OPWPTAIX+1
@NM00087 EQU   OPWPTAIX
OPWBIXCI EQU   OPWBSECL+5
@NM00086 EQU   OPWBSECL+4
OPWBDTCI EQU   OPWBSECL+1
@NM00085 EQU   OPWBSECL
OPWSAVEA EQU   IDAOPWRK+564
OPWERMAP EQU   IDAOPWRK+308
OPWSFI   EQU   IDAOPWRK+296
OPWDACB  EQU   IDAOPWRK+244
@NM00084 EQU   IDAOPWRK+243
OPWBSTRN EQU   IDAOPWRK+242
OPWSTRNO EQU   IDAOPWRK+241
OPWCSTRN EQU   IDAOPWRK+240
OPWBUFNI EQU   IDAOPWRK+236
OPWBUFND EQU   IDAOPWRK+232
OPWTIOT  EQU   IDAOPWRK+228
OPWJSTCB EQU   IDAOPWRK+224
OPWCTCB  EQU   IDAOPWRK+220
OPWIXWRK EQU   IDAOPWRK+216
OPWDTWRK EQU   IDAOPWRK+212
OPWWRKPT EQU   IDAOPWRK+208
OPWUACB  EQU   IDAOPWRK+204
OPWUPT   EQU   IDAOPWRK+200
OPWPSDS  EQU   OPWCATTR
OPWSWSP  EQU   OPWCATTR
@NM00083 EQU   OPWCATTR
@NM00082 EQU   OPWQ2
OPWCRA   EQU   IDAOPWRK+192
OPWPAMBL EQU   IDAOPWRK+188
OPWBAMBL EQU   IDAOPWRK+184
OPWPCON  EQU   IDAOPWRK+180
OPWBCON  EQU   IDAOPWRK+176
OPWCAMBL EQU   IDAOPWRK+172
OPWXAMBL EQU   IDAOPWRK+168
OPWSSL   EQU   OPWSAVE+16
OPWDSL   EQU   OPWSAVE+12
OPWPSL   EQU   OPWSAVE+8
OPWESL   EQU   OPWSAVE+4
OPWCSL   EQU   OPWSAVE
OPWVREQL EQU   OPWVGSPL+9
OPWVGFLG EQU   OPWVGSPL+8
OPWVGSPT EQU   OPWVGSPL+4
OPWVGETL EQU   OPWVGSPL+1
OPWVGSSP EQU   OPWVGSPL
@NM00081 EQU   OPWVSMPL+14
OPWVMTCB EQU   OPWVMFLG
OPWVMNSL EQU   OPWVMFLG
OPWVMSRB EQU   OPWVMFLG
OPWVMDXK EQU   OPWVMFLG
OPWVMKE5 EQU   OPWVMFLG
OPWVMPGB EQU   OPWVMFLG
OPWDFR   EQU   OPWQ
OPWESDS  EQU   OPWQ
OPWKSDS  EQU   OPWQ
OPWUBF   EQU   OPWQ
OPWFSTP  EQU   OPWQ
OPWDDC   EQU   OPWQ
OPWDCI   EQU   OPWIDF+4
OPWCACB  EQU   OPWIDF
@NM00080 EQU   OPWFLGS4
OPWUPD   EQU   OPWFLGS4
OPWCINV  EQU   OPWFLGS4
OPWFULL  EQU   OPWFLGS4
@NM00079 EQU   OPWFLGS3
OPWRSTRT EQU   OPWFLGS3
OPWNOWRK EQU   OPWFLGS3
OPWUPGOP EQU   OPWFLGS3
OPWPUPGR EQU   OPWFLGS3
OPWDAVAT EQU   OPWFLGS3
@NM00078 EQU   OPWFLGS2
OPWDUMMY EQU   OPWFLGS2
OPWAIXDT EQU   OPWFLGS2
OPWIXDT  EQU   OPWFLGS2
OPWUCRA  EQU   OPWFLGS2
@NM00077 EQU   OPWFLGS1
OPWSDS   EQU   OPWVVIC
OPWID    EQU   IDAOPWRK+4
OPWLENTH EQU   IDAOPWRK+1
OPWSUBPL EQU   IDAOPWRK
LPMBSST  EQU   IDALPMB+28
LPMBEXT  EQU   IDALPMB+24
@NM00076 EQU   IDALPMB+22
LPMBLKTR EQU   IDALPMB+20
LPMTPC   EQU   IDALPMB+18
LPMTRKAU EQU   IDALPMB+16
LPMBLKSZ EQU   IDALPMB+12
LPMBPTRK EQU   IDALPMB+8
LPMAUSZ  EQU   IDALPMB+4
LPMBLEN  EQU   IDALPMB+2
@NM00075 EQU   LPMBFLGS
LPMBSSTH EQU   LPMBFLGS
LPMBTOFL EQU   LPMBFLGS
LPMSS    EQU   LPMBFLGS
LPMREPL  EQU   LPMBFLGS
LPMBRPS  EQU   LPMBFLGS
LPMBID   EQU   IDALPMB
@NM00074 EQU   IDAHEB+8
@NM00073 EQU   IDAHEB+1
@NM00072 EQU   @NM00071+1
HEBRTFLG EQU   HEBFLAGS
PDPSFI   EQU   IDAPDPRM+36
@NM00070 EQU   IDAPDPRM+35
PDPNOMSG EQU   PDPMSGFL
PDPNOTRC EQU   PDPMSGFL
PDPSPACE EQU   PDPMSGFL
PDPNOTFC EQU   PDPMSGFL
PDPDSTYP EQU   IDAPDPRM+33
PDPKEY   EQU   IDAPDPRM+32
PDPCTACB EQU   IDAPDPRM+28
PDPDSN   EQU   IDAPDPRM+24
PDPCLSNM EQU   IDAPDPRM+20
PDPVLSER EQU   IDAPDPRM+16
PDPTIOT  EQU   IDAPDPRM+12
PDPUCB   EQU   IDAPDPRM+8
PDPACB   EQU   IDAPDPRM+4
PDPSFC   EQU   IDAPDPRM+3
PDPFUNC  EQU   IDAPDPRM+2
PDPCODE  EQU   IDAPDPRM+1
PDPCALL  EQU   IDAPDPRM
JFCBXNXT EQU   JFCBX+172
@NM00069 EQU   JFCBX+144
JFCBXDEV EQU   JFCBX+140
JFCBXNAM EQU   JFCBX+96
@NM00068 EQU   JFCBX+94
JFCBXVOL EQU   JFCBX+4
@NM00067 EQU   JFCBX+3
JFCBXTTR EQU   JFCBX
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00063 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCAMSTR EQU   JFCBFRID+2
JFCAMCRO EQU   JFCBFRID
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
APPNAMID EQU   APPNMTBL+24
APPOFFST EQU   APPENTRY+2
APPCOUNT EQU   APPENTRY
APPSIZE  EQU   APPNMTBL+2
APPBAL   EQU   APPNMTBL
WTGCORE  EQU   WTGENTRY+5
WTGETTR  EQU   WTGIDTTR+2
WTGEID   EQU   WTGIDTTR
WTGOPD   EQU   WTGPATHS+1
WTGRECHK EQU   WTGPATHS+1
WTGTSENQ EQU   WTGPATHS+1
@NM00060 EQU   WTGPATHS+1
WTGTRACE EQU   WTGPATHS+1
@NM00059 EQU   WTGPATHS
WTGJFCBW EQU   WTGPATHS
WTGSMF   EQU   WTGPATHS
WTGTCOS  EQU   WTGPATHS
WTGNSL   EQU   WTGPATHS
WTGPRLSE EQU   WTGPATHS
WTGLNG   EQU   WTG+29
WTGTXTLN EQU   WTGAREA+27
WTGMODSZ EQU   WTGAREA+24
WTGATTRB EQU   WTGAREA+22
@NM00058 EQU   WTGAREA+20
@NM00057 EQU   WTGAREA+12
WTGMODEP EQU   WTGAREA+8
WTGMODID EQU   WTGMODNM+6
@NM00056 EQU   WTGMODNM
DSMADTW6 EQU   DSMADTRL+20
DSMADTW5 EQU   DSMADTRL+16
DSMADTW4 EQU   DSMADTRL+12
DSMADTW3 EQU   DSMADTRL+8
DSMADTW2 EQU   DSMADTRL+4
DSMADTB4 EQU   DSMADTW1+3
DSMADTB3 EQU   DSMADTW1+2
@NM00055 EQU   DSMADTB2
DSMDSNE  EQU   DSMADTB2
DSMTIOTE EQU   DSMADTB2
DSMSMCE  EQU   DSMADTB2
DSMVTOCR EQU   DSMADTB2
DSMASWAP EQU   DSMADTB1
DSMUCBAL EQU   DSMADTB1
DSMRPSAP EQU   DSMADTB1
DSMLOCK  EQU   DSMADTB1
@NM00054 EQU   DSMADTB1
DSMVIO   EQU   DSMADTB1
DSMISAM  EQU   DSMADTB1
RRFWORK  EQU   RRPLIST+20
RRMLRTRY EQU   RRPLIST+16
RRUCBPTR EQU   RRXRETRY
RR1RETRY EQU   RRPLIST+8
RR1WRKAR EQU   RRPLIST+4
@NM00053 EQU   RRFLAGS3
RRFTERM  EQU   RRFLAGS3
RRFFCEXC EQU   RRFLAGS3
RRFFINFC EQU   RRFLAGS3
RRFNRTCA EQU   RRFLAGS3
@NM00052 EQU   RRFLAGS3
RRFENQUL EQU   RRFLAGS2
RRFPRDET EQU   RRFLAGS2
@NM00051 EQU   RRFLAGS2
RRFQMNGR EQU   RRFLAGS2
RRFENQPW EQU   RRFLAGS2
@NM00050 EQU   RRFLAGS2
RRFFIN1  EQU   RRFLAGS2
RRFTRACE EQU   RRFLAGS1
RRFSMF   EQU   RRFLAGS1
RRFNSL   EQU   RRFLAGS1
RRFAMSTR EQU   RRFLAGS1
RRFAMEXR EQU   RRFLAGS1
RRFAMEXG EQU   RRFLAGS1
RRFUSREX EQU   RRFLAGS1
@NM00049 EQU   RRFLAGS1
RRFRJFCB EQU   RRFUNCTN
RRFDADSM EQU   RRFUNCTN
DXDCBLST EQU   USERPRML
RWALIST  EQU   RWARESWA+12
RWAPARM  EQU   RWAPREFX+8
RWATRBUF EQU   RWAPREFX+4
RWATRACE EQU   RWAPREFX
IECQMNGR EQU   IECEXTPR+92
IECMSGQA EQU   IECEXTPR+88
IECDCBNO EQU   IECUPRML
IECRRPRM EQU   IECEXTPR+76
IECREGSV EQU   IECEXTPR
IECCORP2 EQU   IECPREFX+28
IECCORP1 EQU   IECPREFX+24
IECCORPS EQU   IECPREFX+20
IECCORSP EQU   IECPREFX+19
@NM00048 EQU   IECPREFX+17
IECCORKY EQU   IECPREFX+16
IECCORAD EQU   IECPREFX+12
IECCORLN EQU   IECPREFX+8
@NM00047 EQU   IECPREFX+4
IECCORID EQU   IECPREFX
DXATEXB2 EQU   DXATEXC2
DXEXHASP EQU   DXATEXB1
DXATCOM4 EQU   FORCORE+600
DXATCOM3 EQU   FORCORE+596
@NM00043 EQU   DXATCOM2+3
@NM00042 EQU   DXATALL
DXATSWAP EQU   DXATALL
DXATFC   EQU   DXATALL
@NM00041 EQU   DXATOPEN
DXATDFIN EQU   DXATOPEN
DXATDSIN EQU   DXATOPEN
DXATMODM EQU   DXATOPEN
DXATMODE EQU   DXATOPEN
DXATMODS EQU   DXATOPEN
DXATIGN  EQU   DXATOPEN
DXATVCAT EQU   DXATEOV
DXATDADM EQU   DXATEOV
DXATREMT EQU   DXATEOV
DXATDNEW EQU   DXATEOV
DXATDFRE EQU   DXATEOV
DXATDCHN EQU   DXATEOV
DXATNVOL EQU   DXATEOV
DXATCCAT EQU   DXATEOV
DXATRDDB EQU   DXATDACC
DXATEOF  EQU   DXATDACC
@NM00040 EQU   DXATDACC
DXATSMF  EQU   DXATDACC
DXATUPDB EQU   DXATDACC
DXATDRCT EQU   DXATDACC
DXATTRAK EQU   DXATDACC
DXATF1CE EQU   DXATDACC
DXATNSL  EQU   DXATOUTA
DXATTTM2 EQU   DXATOUTA
DXATTTM1 EQU   DXATOUTA
DXATTRL2 EQU   DXATOUTA
DXATTRL1 EQU   DXATOUTA
DXATDATM EQU   DXATOUTA
DXATHDTM EQU   DXATOUTA
DXATVLHD EQU   DXATOUTA
DXATCLOS EQU   DXATCOM1+1
DXATSRET EQU   DXATGENS
DXATVCIG EQU   DXATVGIV
DXATVTMG EQU   DXATVGIV
DXATVSMG EQU   DXATVGIV
DXATJFCB EQU   DXATGENS
DXATDISP EQU   DXATGENS
DXATREFR EQU   DXATGENS
DXATDMCT EQU   DXATGENS
DXMSGADR EQU   FORCORE+584
DXPRPARC EQU   FORCORE+580
DXUDCBML EQU   FORCORE+578
DXUDCBPL EQU   FORCORE+576
DXPACBAD EQU   DXPDCBAD+1
@NM00039 EQU   DXPDCBAD
DXUACBAD EQU   DXUDCBAD+1
@NM00038 EQU   DXUDCBAD
DXUCBSVV EQU   DXUCBSAV+1
@NM00037 EQU   DXUCBSAV
DXUCBADR EQU   FORCORE+560
DXTIOTAD EQU   FORCORE+556
DXDEBXAD EQU   FORCORE+552
DXDSAB   EQU   FORCORE+548
DXDSABAD EQU   FORCORE+544
DXDSABQD EQU   FORCORE+540
DXJSCBAD EQU   FORCORE+536
DXTCBADR EQU   FORCORE+532
DXASCBAD EQU   FORCORE+528
DXEXTSW  EQU   FORCORE+527
DXWKEYSV EQU   FORCORE+525
DXUNITOF EQU   FORCORE+522
DXNOUNIT EQU   FORCORE+520
DXVOLSEQ EQU   FORCORE+518
DXVOLMT3 EQU   DXVOLSR3
DXVOLMT2 EQU   DXVOLSR2
DXVOLMT1 EQU   DXVOLSR1
DXWORK4  EQU   FORCORE+496
DXWORK3  EQU   FORCORE+492
DXWORK2  EQU   FORCORE+488
DXWORK1  EQU   FORCORE+484
DXWORK   EQU   FORCORE+480
@NM00036 EQU   FORCORE+464
DXCCW11  EQU   DXCCW+80
DXCCW10  EQU   DXCCW+72
DXCCW9   EQU   DXCCW+64
DXCCW7   EQU   DXCCW+48
DXCCW6   EQU   DXCCW+40
DXCCW4   EQU   DXCCW+24
DXCCW3   EQU   DXCCW+16
DXCCW2   EQU   DXCCW+8
DXCCW1   EQU   DXCCW
DXDCBDEB EQU   DXDCB+44
@NM00035 EQU   DXDCB+24
DXDEBDCB EQU   DXDCB+20
@NM00034 EQU   DXDCB
DXDEB    EQU   DXDAADDR+4
@NM00033 EQU   DXDAADDR
DXECB    EQU   FORCORE+276
DSCCORE  EQU   FORCORE+96
DXLBL    EQU   DXDSCB
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00032 EQU   CVTFIX+248
@NM00031 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00030 EQU   IDACSL+19
@NM00029 EQU   CMBPTRS+52
CMBFXDPT EQU   CMBPTRS+48
CMBPUSPT EQU   CMBPTRS+44
CMBPSTPT EQU   CMBPTRS+40
CMBEDBPT EQU   CMBPTRS+36
CMBDEBPT EQU   CMBPTRS+32
CMBUBFPT EQU   CMBPTRS+28
CMBBFRPT EQU   CMBPTRS+24
CMBUFSPT EQU   CMBPTRS+20
CMBFSTPT EQU   CMBPTRS+16
CMBUSPTR EQU   CMBPTRS+12
CMBSTPTR EQU   CMBPTRS+8
CMBPRPTR EQU   CMBPTRS+4
CMBUSRPT EQU   CMBPTRS
CMBCNT   EQU   IDACMB+6
CMBNST   EQU   IDACMB+5
CMBOUT   EQU   CMBFLGS
CMBLEN   EQU   IDACMB+2
@NM00028 EQU   IDACMB+1
CMBID    EQU   IDACMB
BIBVSRTP EQU   IDABIB+104
BIBASCB  EQU   IDABIB+100
BIBDDNM  EQU   IDABIB+92
BIBSTPNM EQU   IDABIB+84
BIBJOBNM EQU   IDABIB+76
BIBSIOAP EQU   BIBRTNS+12
BIBASYRT EQU   BIBRTNS+8
BIBCEAPP EQU   BIBRTNS+4
BIBINTRF EQU   BIBRTNS
BIBWSHD  EQU   IDABIB+44
BIBVCRT  EQU   IDABIB+40
BIBPAMBL EQU   IDABIB+20
BIBDACB  EQU   IDABIB+16
BIBVMT   EQU   IDABIB+12
BIBUPT   EQU   IDABIB+8
@NM00027 EQU   IDABIB+5
BIBFLG2  EQU   IDABIB+4
BIBLEN   EQU   BIBHDR+2
@NM00026 EQU   BIBFLG1
BIBCKPT  EQU   BIBFLG1
BIBREST  EQU   BIBFLG1
BIBVIRT  EQU   BIBFLG1
BIBID    EQU   BIBHDR
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00025 EQU   AMBCSWD1+1
@NM00024 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBLSR   EQU   AMBAFLG
@NM00023 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00022 EQU   IDAAMB+68
AMBIWA   EQU   IDAAMB+64
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00021 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00020 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBSDS   EQU   AMBINFL
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00019 EQU   AMBINFL
@NM00018 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00017 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00016 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00015 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00014 EQU   AMBFLG0
AMBSWSP  EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBDSB   EQU   IDAAMB+20
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00013 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00012 EQU   ACBINFL2
ACBCBIC  EQU   ACBINFL2
@NM00011 EQU   ACBINFL2
ACBBYPSS EQU   ACBINFL1
ACBSDS   EQU   ACBVVIC
ACBUCRA  EQU   ACBINFL1
ACBSCRA  EQU   ACBINFL1
ACBCAT   EQU   ACBINFL1
ACBIJRQE EQU   ACBINFL1
ACBJEPS  EQU   ACBINFL1
@NM00010 EQU   ACBINFL1
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00009 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00008 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00007 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00006 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00005 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00004 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00003 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00002 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00001 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
@NM00114 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00113 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00112 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00111 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00110 EQU   FLCFSA
@NM00109 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00108 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00107 EQU   FLCIOA
@NM00106 EQU   FLCMCLA+15
@NM00105 EQU   FLCMCLA+14
@NM00104 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00103 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00102 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00101 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00100 EQU   FLCPER
@NM00099 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00098 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00097 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00096 EQU   FLCPIILC
@NM00095 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00094 EQU   FLCSVILC
@NM00093 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00092 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00091 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00235 EQU   @RC00232
@RC00296 EQU   @RC00293
@RF00508 EQU   @RC00496
@RC00711 EQU   @RC00707
@RC00238 EQU   @RC00235
@ENDDATA EQU   *
         END   IDA0192M,(C'PLS1919',0701,78151)
