         TITLE ' IGCMG10D - 3705 IPL - BUILD LOAD RECORD'
IGCMG10D CSECT
************************START OF SPECFICATIONS*************************
*                                                                     *
* MODULE NAME = IGCMG10D (TCAM,OPERATOR CONTROL)                      *
*                                                                     *
* DESCRIPTIVE NAME = IPL BUILD LOAD RECORD MODULE                     *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = VERSION 10.0                                               *
*                                                                     *
*    FUNCTION = THIS MODULE CONTAINS   THREE ROUTINES. IN ADDITION TO *
*    ITS BASIC FUNCTION OF SETTING UP THE OUTPUT BUFFER WITH DATA TO  *
*    BE SENT TO THE 3705, IT ALSO PERFORMS CESD AND RLD PROCESSING.   *
*    THE CESD CODE IS ENTERED FROM IGCME10D. AS CONTROL RECORDS ARE   *
*    READ OFF DISK IGCME10D CHECKS TO SEE IF THE RELOCATE FUNCTION    *
*    IS IN EFFECT. IT WILL BE IN EFFECT EXCEPT WHEN PROCESSING        *
*    INITIAL TEST RECORDS, OR WHEN IGCME10D DETECTS
*    A CESD CONTROL RECORD AND COMES TO IGCMG10D, IGCMG10D            *
*    WILL SEARCH CESD RECORDS FOR 'CXTEND' ENTRY. IF DETECTED, FOCUS  *
*    POINT IS SET AND GAPSIZE IS CALCULATED. FOR RLD RECORDS IT       *
*    PATCHES ALL RLD ITEMS OF AN RLD RECORD THAT HAVE VALUES GREATER  *
*    THAN FOCUS POINT.                                                *
*    IN THE CASE OF CESD PROCESSING IT FIRST GETS THE ID NUMBER FROM  *
*    THE RECORD POINTED TO BY REGISTER 6. IT THEN CALCULATES ENTRY    *
*    POINT OF THE MODULE AND SAVES IT IN THE WORKAREA. IT THEN CHECKS *
*    FOR 'CXTEND' IF NOT EQUAL IT LOOPS LOOKING FOR IT. WHEN FOUND IT *
*    SETS A FLAG IN INPUTSW TO X'08' AND CHECKS TO SEE IF STORAGE     *
*    PROTECTION IS REQUIRED. IF NO THE STORAGE PROTECT INDICATOR IS   *
*    TURNED OFF IN THE WORKAREA AND XCTLS BACK TO IGCME10D.  IF       *
*    STORAGE PROTECT IS REQUIRED ROUND UP ADDRESS TO 2K BOUNDARY, AND *
*    SET FLAG IN WORKAREA TO SAY RELOCATE IS REQUIRED.                *
*    AS IGCME10D READS LOAD MODULE RECORDS AND IT FINDS THAT THE      *
*    RECORD IS AN RLD RECORD IT XCTLS TO IGCMG10D TO GET THE ADCONS   *
*    PATCHED. EACH RECORD IS CHECKED TO SEE IF RELOCATE IS REQUIRED   *
*    IF NOT REQUIRED, THE ENTRY ADDRESS IS LESS THAN THE FOCUS POINT  *
*    INPUTSW IN THE WORKAREA IS SET TO INDICATE THAT RELOCATE IS NOT  *
*    REQUIRED ON THIS GROUP OF RLD'S. IF REQUIRED,HOWEVER, INPUTSW IS *
*    SET TO INDICATE THIS AND THE RELATIVE ADDRESS OF THIS ADCON IS   *
*    CHANGED TO THE ACTUAL CORE ADDRESS.                              *
*    IF IGCMG10D IS ENTERED FOR NORMAL OUTPUT PROCESSING, (REGISTER 0 *
*    EQUAL TO 1) A CHECK IS MADE TO SEE IF INITIAL TEST IS BEING      *
*    LOADED. IF YES,TURN OFF BRING-UP FLAG, GET BRING-UP START ADDRESS*
*    THEN SET REG 3 TO POINT TO THE END OF THE OUTPUT BUFFER. NEXT    *
*    GET SAVED RECORD LENGTH FROM THE WORKAREA AND IF NOT 0 SET REG 7 *
*    TO POINT TO END OF THE DATA. THE RELATIVE ADDRESS FOR AND THE    *
*    LENGTH OF THE TEXT ARE IN 'TXTADOR' AND 'TXTLNGTH' WHICH ARE IN  *
*    THE WORKAREA.                                                    *
*    THE RECEIVED TEXT IS MOVED TO THE OUTPUT BUFFER AND AS IT IS     *
*    BUFFER IT IS PASSED VIA XCTL TO IGCMF10D. WHEN THE TEXT RECEIVED *
*    FROM IGCME10D IS SO HANDLED AN XCTL TO IGCME10D IS MADE FOR THE  *
*    NEXT INPUT RECORD UNLESS LASTSW HAS BEEN SET BY IGCME10D WHICH   *
*    INDICATES THAT THIS WAS THE LAST RECORD. IN THIS CASE THE        *
*    PARTIALLY FILLED BUFFER ( IF ONE) IS PASSED TO IGCMF10D.WHO SENDS*
*    IT TO THE 3705. IGCMG10D MAINTAINS A COUNT OF THE NUMBER OF BYTES*
*    RECEIVED FROM IGCME10D. UPON BEGINNING TO PROCESS AN INPUT BLOCK *
*    THE ASSOCIATED 'TXTADDR' SHOULD EQUAL THIS COUNT. IF NOT THEN    *
*    THERE WAS A COMPRESSED DATA SET ON THE END OF THE LAST RECORD.   *
*    THE SIZE OF THE COMPRESSION IS CALCULATED AND THE OUTPUT BUFFER  *
*    POINTERS ARE ADJUSTED ACCORDINGLY. THEN THE BYTE COUNT IS SET    *
*    EQUAL TO 'TXTADOR' AND THE PROCESS OF MOVING THE TEXT TO THE     *
*    OUTPUT BUFFER RESUMES AS NORMAL. IF TXTLNGTH IS ZERO UPON ENTRY  *
*    THEN THIS INDICATES NO MORE INPUT TO BE PROCESSED. THIS CAUSES   *
*    THE ENDIN SWITCH TO BE SET. CONTROL IS PASSED TO IGCMF10D TO     *
*    FLUSH THE FINAL WRITES.                                          *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES = EBCDIC CHARACTER CODE DEPENDENCIES - CORRECTABLE  *
*                   BY REASSEMBLY                                     *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    REGISTER CONVENTIONS = R1 OPCAVT                                 *
*                           R2 OPCAVT                                 *
*                           R7 COMMON WORKAREA                        *
*                           RB 2ND WORKAREA                           *
*                           RE OPCE                                   *
*                                                                     *
*    PATCH LABEL = NONE                                               *
*                                                                     *
* MODULE TYPE =                                                       *
*                                                                     *
*    PROCESSOR = ASSEMBLER XF                                         *
*                                                                     *
*    ATTRIBUTES = REFRESHABLE,SERIALLY REUSABLE,TRANSIENT (TYPE 4),   *
*                 SUPERVISOR MODE,REENTRANT                           *
*                                                                     *
* ENTRY POINT = IGCMG10D                                              *
*                                                                     *
*    PURPOSE = SEE FUNCTION                                           *
*                                                                     *
*    LINKAGE = XCTL SF=(E,OPCXCTL)                                    *
*                                                                     *
* INPUT = R1 OPCAVT                                                   *
*           OPCCOPCE- CURRENT ELEMENT                                 *
*                                                                     *
* OUTPUT =R1 OPCAVT                                                   *
*           RD PTR TO END OF OUTPUT BUFFER                            *
*                                                                     *
* EXIT-NORMAL = IGCMF10D, IGCME10D                                    *
*                                                                     *
* EXIT-ERROR = IGCMI10D                                               *
*                                                                     *
* EXTERNAL REFERENCES = SEE BELOW                                     *
*                                                                     *
*    ROUTINES = NONE                                                  *
*                                                                     *
*    DATA AREAS = COMMON DUMP/IPL WORKAREA                            *
*                 1ST WORKAREA IPL                                    *
*                 2ND WORKAREA IPL                                    *
*                 LOCAL DATA AREA                                     *
*                                                                     *
*    CONTROL BLOCKS = AVT                                             *
*                     OPCAVT                                          *
*                     OPCE                                            *
*                                                                     *
* TABLES = CESD TABLE                                                 *
*                                                                     *
* MACROS = XCTL GETMAIN                                               *
*                                                                     *
* CHANGE ACTIVITY = AS FOLLOWS :                               @ZA03054
*-000000-999999                                                @Y17XARS
*D295500                                                       @ZA03054
*C505000                                                       @YA06868
*C118000,C257000,A353000,D354000-355500,C356000,C498000,       @Y17XARS
*A510000,A836000,D838000-846000,A852000                        @Y17XARS
*C512000                                                       @OY12420
*A428000,506000                                                @OZ31840
*C343000,363000,142000                                         @OZ31840
*D143000                                                       @OZ31840
*                                                                     *
*************************END OF SPECIFICATIONS*************************
         EJECT
         SPACE
         USING DATADS,RB                ADDRESSABILITY FOR C-WKAREA
         USING IEDQOPCE,RE              ADDRESSABILITY FOR OPCE
         USING IEDQOPCD,R2              ADDRESSABILITY FOR OPCAVT
         USING OUTBUF1,R3               ADDRESSABILITY FOR OUTPUT BUFF
         USING IEDCOM,R7                ADDRESSABILITY FOR     @Y17XARS
*                                       COMMON AREA
         SPACE
         BALR  RC,0                     ESTABLISH ADDRESSABILITY
         USING *,RC
IGCMG10D IEDHJN SKIPID
         LR    R2,R1                    BASE FOR OPVT
         L     RE,OPCCOPCE              GET OPCE OR L-WKAREA
         L     R7,OCMODNME              SET BASE FOR COMMON AREA
         LA    RE,COMCCWS               SET BASE FOR LWKAREA
         LA    RB,DATAOFF(RE)           BASE FOR C-WKAREA
         TM    EIGHT(RE),REENTRY         REENTERRED FROM IGCMF10D
         BO    REENTER                  YES
         BCT   R0,RLDCESD               EITHER CESD OR RLD PROCESSING
*                                       IS DESIRED
         TM    ZERO(RE),LOADBRUP        1ST BRING-UP RECORD ?
         BNO   NOTBRUP                  NO
         NI    ZERO(RE),BRUPOFF         TURN OFF FLAG
         L     R7,REGSAVE(RE)           GET BRUP START ADDR
         B     AROUND                   SKIP SIMILIAR CODE
NOTBRUP  EQU   *
         L     R7,WKBUFSAV(RE)          RELOAD START OF WKBUF  @OZ31840
AROUND   EQU   *
         L     R3,OUTBUF(RE)            ADDR OF OUTPUT BUFFER
         AH    R3,OUTBFSZ               GET END OF OUTPUT BUFFER
         TM    EIGHT(RE),BRUPFRST       PROCESSING RECORD
*                                       OUTPUT BUFFER NOT FULL
         BNO   NOTFIRST                 NO
         L     R4,LENSAVE(RE)           PICK UP SAVED LENGTH
         LA    R4,ZERO(R4)              CLEAR HI-ORDER BYTE
         NI    EIGHT(RE),OFFBRUP        TURN OFF 1ST TIME SWITCH
         B     BEGIN                    CONTINUE PROCESSING
NOTFIRST EQU   *
         LH    R4,OUTBFSZ               REGS FOR PROCESSING
         SPACE
BEGIN    EQU   *
         LH    R6,TXTLNGTH              GET LENGTH OF THIS TEXT
         LTR   R6,R6                    IS THE LENGTH ZERO ?
         BNP   NOINPUT                  YES - NO INPUT
         AR    R7,R6                    R7 POINTS TO END OF DATA
*                                       SET PTRS. TO PROCESS THIS
*                                       BUFFER ALLOWING
         NI    ENDIN,OFFEND             TURN OFF ENDIN SWITCH
         CLC   TOTLNGTH(THREE),TXTADDR  DO THE LENGTH P ADDR MATCH ?
         BE    NODS                     YES PROCESS NORMALLY
         L     R5,TXTADDRW              MUST HAVE A DS. FIND DIFF.
         LA    R5,ZERO(R5)              AND USE THIS DIFF. TO ADJUST
         S     R5,TOTLNGTW              OUTPUT BUFFER INDEX
         SR    R4,R5                    R4 IS NOW ADJUSTED
         BP    NOTFUL                   DID NOT FILL THE OUTPUT BUFF.
SENDBUF  EQU   *                        PASS BUFFER TO 3705
         OI    EIGHT(RE),FIRSTONE       INDICATES RE-ENTERED
         BAL   R5,PASS                  OUTPUT BUFFER FULL OF DS
SENDBUF1 EQU   *
         NI    EIGHT(RE),OFF            TURN OFF BIT INDICATORS
         LTR   R4,R4                    STILL MORE DS. ?
         BNP   SENDBUF                  YES SEND THIS BUFFER
*                                       PASS WILL PROPERLY ADJUST R4
*                                       BY ADJUSTING BUFFER SIZE
NOTFUL   EQU   *
         MVC   TOTLNGTH(THREE),TXTADDR  CORRECT LENGTH DISCREPANCY
         SPACE
NODS     EQU   *
         L     R5,TOTLNGTW              UPDATE TOTAL LENGTH COUNTER
         AR    R5,R6                    BY THE LENGTH OF THIS
         ST    R5,TOTLNGTW              TEXT RECORD
         SPACE 2
*  AT THIS POINT THE BUFFERS ARE READY TO PROCESS. R7 POINTS TO *
*  THE END OF THE WORK  BUFFER. R3 POINTS TO THE END OF THE     *
*  CURRENT OUTPUT BUFFER.  R4 CONTAINS THE NUMBER OF BYTES      *
*  REMAINING IN THE OUTPUT BUFFER. R5 WILL BE USED AS THE EX    *
*  REGISTER FOR THE MVC FROM THE INPUT BUFFER TO THE OUTPUT     *
*  BUFFER. R6 WILL CONTAIN THE NUMBER OF BYTES REMAINING IN     *
*  THE INPUT BUFFER TO BE MOVED.                                *
         SPACE
GETMORE  EQU   *
         CH    R6,N256HW                DOES 256 BYTES REMAIN ?
         BH    STMORE                   YES MORE THAN 256
         LR    R5,R6                    SET TO MOVE REMAINDER
         OI    ENDIN,ONEND              INDICATE INPUT EMPTY
         B     MOVEIT                   GO TO MOVE IT
STMORE   EQU   *
         LH    R5,N256HW                SET TO MOVE 256 BYTES
         SPACE
MOVEIT   EQU   *
         CR    R4,R5                    IS THERE ENOUGH ROOM ?
         BNL   MOVE                     YES CONTINUE
         LR    R5,R4                    NO FILL REMAINDER
         NI    ENDIN,OFFEND             AND TURN OFF END INDICATOR
MOVE     EQU   *
         LR    R8,R7                    SET FROM ADDR OF MVC BY
         SR    R8,R6                    SUBTRACTING R  6 FROM R8
         LR    R9,R3                    SET TO ADDR FOR MVC BY
         SR    R9,R4                    SUBTRACTING R4 FROM R9
         BCTR  R5,ZERO                  DECREMENT COUNT FOR EXECUTE
         EX    R5,MVC                   EXECUTE MOVE
* DATA HAS BEEN MOVED TO THE OUTPUT BUFFER. THE AMOUNT MOVED    *
* IS IN R5. NOW THE POINTERS ARE UPDATED TO REFLECT MOVE.       *
         LA    R5,ONE(ZERO,R5)          ADJUST TO ACTUAL VALUE
         SR    R6,R5                    ADJUST R6 TO REFLECT MOVE
         SR    R4,R5                    ADJUST R4 TO REFLECT MOVE
         BP    NTFULL                   OUTPUT BUFFER NOTFUL
         OI    EIGHT(RE),SECOND         INDICATES RE-ENTERED
         BAL   R5,PASS                  PASS FULL BUFFER TO MF
TSTINBUF EQU   *
         NI    EIGHT(RE),OFF            TURN OFF BIT INDICATORS
*                                       RETURN WITH NEW BUFFER
         TM    ENDIN,ONEND              INPUT BUFFER EMPTY ?
         BNO   GETMORE                  NO -- GET MORE DATE
BACK     EQU   *                        INPUT BUFFER IS EMPTY XCTL TO
*                                       IGCME10D TO GET MORE DATA
         ST    R4,LENSAVE(RE)           SAVE IT
         OI    EIGHT(RE),LENFRST        INDICATE LEN IS SAVED AND
*                                       PROCESSING 1ST BRING-UP REC
         LA    R0,TWO                   CONTROL CAME FROM IGCMG10D
         B     MOVEINPT                 PREPARE TO EXIT
         SPACE
NTFULL   EQU   *
         TM    ENDIN,ONEND              IS THERE MORE TO GET "
         BNO   GETMORE                  YES THEN GET IT
         TM    LASTSW,ONLAST            WAS THIS THE LAST ?
         BNO   BACK                     NO RETURN TO IGCME10D
*                                       PARTIAL BUFFER
         B     DONE                     FINISHED
         SPACE 2
NOINPUT  EQU   *                        ZERO LENGTH INDICATING
         OI    ENDIN,ONEND              NO INPUT (LASTSW IS ALSO ON )
DONE     EQU   *                        PASS LAST BUFFER TO MF TO
*                                       FALL THRU TO PASS LAST BUFFER
         EJECT
PASS     EQU   *
         SPACE
         STM   R3,R9,REGSAVE(RE)        SAVE REGISTERS
         LR    R0,R3                    PTR TO END OF OUTPUT BUFFER
         MVC   OPCMODID,XCTLWRTE        INSERT MOD ID          @Y17XARS
EXIT     EQU   *
         LR    R1,R2                    PARAMETER REGISTER
         XCTL  SF=(E,OPCXCTL)
         SPACE 5
REENTER  EQU   *
         LM    R3,R9,REGSAVE(RE)        RESTORE REGISTERS
         AH    R4,OUTBFSZ               END OF BUFFER
         TM    EIGHT(RE),SECOND         FIRST BRANCH POINT
         BO    TSTINBUF                 NO
         B     SENDBUF1                 YES
****************************************************************
         EJECT
RLDCESD  EQU   *
*                                       SET UP FOR EITHER CESD OR RLD
*                                       PROCESSOR
         USING INPUTDS,R6               ADDRESSABILITY FOR BUFFER
         L     R6,INBUFF(RE)            GET ADDR OF BUFFER
         USING LDATA,RA                 ADDRESSABILITY FOR DATA AREA
         LA    RA,EIGHTY4(RE)           SET BASE FOR LOCAL DATA AREA
         USING CESDD,RD                 ADDRESSABILITY FOR CESD TABLE
         LA    RD,CESDOFF(RE)           SET BASE FOR CESD
         BCTR  R0,0                     DECREMENT FOR COMPARE
         LTR   R0,R0                    IF = / CESD PROCESSING
         BNZ   RLD00                    RLD PROCESSING
         SPACE  3
         LR    R0,R2                    SAVE ADDRESS OF OPCAVT
*********************************** CESD PROCESSOR *************
CESD00   EQU   *
*              THIS ROUTINE SEARCHES A CESD RECORD             *
*              FOR 'CXTEND' ENTRY.  IF IT FINDS IT             *
*              THE RELON INDICATOR IS DET AND FOCUSPT          *
*              IS SET AND GAPSIZE IS CALCULATED.               *
         SPACE
         LH    R2,CESDID(R6)            GET FIRST ID NUMBER
         LA    R7,CESDSTRT(R6)          CALCULATE END POINT
         AH    R7,CESDCNT(R6)           OF THE DATA
         ST    R7,ENDPT(RE)             AND SAVE IT
         LA    R7,CESDSTRT(R6)          SET TO BEGINNING
         SPACE
CESD10   EQU   *                        PROCESS NEXT ITEM
         TM    INPUTSW,FOUND            FOUND CXTEND YET ?
         BO    CESDNXT                  YES
         CLC   ZERO(EIGHT,R7),CXTEND    THIS IT ?
         BNE   CESDNXT                  NO GET NEXT
         OI    INPUTSW,FOUND            INDICATE FOUND
         L     R5,CESDAD(R7)            YES
         LA    R5,ZERO(R5)              SET FOCUS POINT
         C     R5,ENTRYPT               IS STORAGE PROTECT REQUIRED ?
         BE    CESD30                   NO TURN IT OFF
         ST    R5,FOCUSPT               VALUE
         CLI   CESDAD+THREE(R7),ZERO    IS A STRETCH REQUIRED ?
         BNE   CESD20                   YES
         TM    CESDAD+TWO(R7),X07       MAYBE NOT
         BE    CESD30                   NO TURN IT OFF
CESD20   EQU   *                        ROUND UP TO 2K BOUNDARY
         SRL   R5,ELEVEN                CLEAR RIGHT BITS
         LA    R5,ONE(R5)               ADD 2K TO GET
         SLL   R5,ELEVEN                START OF SECOND PART
         S     R5,FOCUSPT               CALCULATE GAPSIZE
         STH   R5,GAPSIZE               AND SAVE IT
         CLC   ENTRYPT,FOCUSPT          ENTRY POINT NEED ADJUSTMENT ?
         BL    CESD22                   NO
         A     R5,ENTRYPT               YES - AND GAPSIZE
         ST    R5,ENTRYPT
CESD22   EQU   *
         OI   INPUTSW,RELON             INDICATE RELOCATE IN PROGRESS
         OI    ZERO(RE),CARRYCDE        CARRY OVER
         OI    ZERO(RE),STRETCH         STRETCH INDICATED
         SPACE 4
CESDNXT  EQU   *
         NI    CESDTYP(R7),X0F          CLEAR INSIGNIFICANT FLAGS
         CLI   CESDTYP(R7),X06          IS IT PR OR NULL ?
         BNL   CESD50                   YES NO ENTRY REQUIRED
         CLI   CESDTYP(R7),X02          IS IT AN ER ?
         BE    CESD50                   YES NO ENTRY REQUIRED
         L     R3,CURENTRY              GET ADDRESS OF CURRENT ENTRY
         LTR   R3,R3                    FIRST TIME ?
         BZ    GETBLOCK                 YES GO GET A BLOCK
         CLI   ZERO(R3),ZERO            END OF A BLOCK ?
         BE    CESDNXT2                 NO CONTINUE
         SPACE 2
GETBLOCK EQU   *
*            GET A NEW CESD TABLE BLOCK AND PLACE              *
*            ITBON THE TABLE QUEUE.  UPDATE THE CURRENT        *
*            ENTRY POINTER...                                  *
         LR    R9,R2                    SAVE ID ACROSS GETMAIN @OZ31840
         LR    R2,R0                    RE-ESTABLISH BASE FOR OPCAVT
         L     R3,OPCOPTLK              GETMAIN LIST IN CA
         MVC   ONE(THREE,R3),SIZE       LENGTH OF AREA NEEDED
         LA    R1,OPCDOUBL              PLACE TO PUT ADDR OF AREA
         ST    R1,FOUR(R3)              PUT IN PARALIST
         LR    R1,R3
         GETMAIN   SP=250,MF=(E,(1))
         LTR   RF,RF                    CORE OBTAINED
         BZ    GOTCORE                  YES
         LA    R0,MSG164                ERROR MSG NUMBER
         L     R3,OCTRUNIT              TRAILER ADDRESSABILITY @Y17XARS
         OI    OCTRRTN-IEDOCTR(R3),OCTRERI SET IPL ERROR FLAG  @Y17XARS
         MVC   OPCMODID,XCTLMI          ID OF IGCMI10D         @Y17XARS
         B     EXIT                     XCTL TO IT
GOTCORE  EQU   *
         L     R1,OPCDOUBL              GET CORE ADDR
         ST    R1,BLOCKADR              STORE IN BLOCK PTR
         LR    R0,R2                    SAVE ADDR OF OPCAVT
         LR    R2,R9                    RESTORE CESD ID        @OZ31840
         L     R3,BLOCKADR              GET BLOCK ADDRESS
         XC    ZERO(SIXTY4,R3),ZERO(R3)  CLEAR THE BLOCK
         MVI   SIXTY(R3),STOPPER        SET THE END-OF-BLOCK FLAG
         ST    R3,CURENTRY              SET CURRENT ENTRY PTR
         L     R4,LASTBLK               GET POINTER TO LAST BLOCK
         LTR   R4,R4                    IS THIS THE FIRST TIME ?
         BNZ   GETBLK2                  NO CHAIN IT
         ST    R3,FIRSTBLK              YES SET FIRST BLOCK PTR
         ST    R3,BLKSAVE(RE)           SAVE 1ST BLOCK ADDRESS
         B     GETBLK3                  CONTINUE
GETBLK2  EQU   *
         ST    R3,SIXTY(R4)             CHAIN IT
         MVI   SIXTY(R4),STOPPER
GETBLK3  EQU   *
         ST    R3,LASTBLK               SET NEW LAST BLOCK PTR
****************************************************************
         SPACE 2
CESDNXT2 EQU   *                        PLACE THE DATA IN THE ENTRY
         STH   R2,FOUR(R3)              PUT ID IN ENTRY
         MVC   ONE(THREE,R3),NINE(R7)      MOVE ADDRESS TO ENTRY
         MVI   ZERO(R3),INUSE           INDICATE ENTRY IN USE
         LA    R3,SIX(R3)               INCREMENT TO  THE NXT ENTRY
         ST    R3,CURENTRY              SAVE NEXT ENTRY POINTER
CESD50   EQU   *
         LA    R2,ONE(R2)               INCREMENT ID COUNTER
         LA    R7,SIXTEEN(R7)           GO TO NEXT ITEM
         C     R7,ENDPT(RE)             DONE YET ?
         BL    CESD10                   NO
         B     CESD28                   YES RETURN
CESD30   EQU   *                        NO RELOCATE REQUIRED
         NI    ZERO(RE),SQUELCH         NO RELOCATE PROCESSING
         SPACE 4
CESD28   EQU   *                        RETURN
         LR    R2,R0                    OPCAVT BASE
         LA    R0,THREE                 INDICATES CONTROL CAME FROM
*                                       CESD PROCESSOR IN OUTPUT RTN
         SPACE 3
MOVEINPT EQU   *
         SPACE 3
         MVC   OPCMODID,XCTLIPUT                               @Y17XARS
         B     EXIT                     PREPARE TO EXIT TO INPUT RTN
         SPACE
CESDSTRT EQU   8                        START OF CESD DATA
CESDCNT  EQU   6                        COUNT OF CESD DATA
CESDAD   EQU   8                        ADDRESS OF CESD ITEM
CESDID   EQU   4                        ESDID OF FIRST ITEM
CESDTYP  EQU   8                        CESD TYPE FIELD
         SPACE
         SPACE
CXTEND   DC    CL8'CXTEND'              UNIQUE RELOCATE ENTRY
*********************************** END OF CESD PROCESSOR ******
         EJECT
*********************************** RLD PROCESSOR **************
RLD00    EQU   *
*              THIS ROUTINE PATCHES ALL RLD ITEMS              *
*               OF AN RLD RECORD THAT HAVE VALUES               *
*              GREATER THAN FOCUS POINT.  THE ADDRESS          *
*              OF THE RLD RECORD IS IN R7 WITH THE             *
*               APPROPRIATE SETTING IN TXTADDRW.                *
         SPACE
         LR    RF,R2                    SAVE VALUE OF OPCAVT
         SR    R2,R2                    CLEAR A WORK REG
         LA    R1,RLDSTRT(R6)           CALCULATE THE END
         AH    R1,RLDCNT(R6)            OF THE RLD DATA
         ST    R1,ENDPT(RE)             AND SAVE IT
         LA    R1,RLDSTRT(R6)           POINT TO FIRST ITEM
         L     R7,WKBUFSAV(RE)          RELOAD START OF WKBUF  @OZ31840
         B     RLD18                    GO CHECK FOR RELOCATE
         SPACE
RLD10    EQU   *
         TM    INPUTSW,RELGRP           THIS GROUP NEED RELOCATED
         BO    RLDNXT                   NO CONTINUE
         TM    ZERO(R1),NOREL           THIS ONE TO BE PROCESSED ?
         BO    RLDNXT                   NO GO TO NEXT
         L     R5,ZERO(R1)              GET RELATIVE ADDRESS
         LA    R5,ZERO(R5)              OF THIS ADCON
         S     R5,TXTADDRW              CALCULATE ACTUAL
         AR    R5,R7                    CORE ADDRESS
         NI    ZERO(R1),CLEAR           CLEAR XXXX BITS
         IC    R2,ZERO(R1)              AND GET ADCON SIZE MINUS 1
         SRL   R2,TWO                   IN RIGHT BYTE
         LA    R4,WORD+THREE(RE)        CALCULATE MOVE
         SR    R4,R2                    TO ADDRESS
         XC    WORD(FOUR,RE),WORD(RE)            CLEAR PATCH WORD
         EX    R2,GETCON                GET THE ADCON
         L     R6,WORD(RE)              GET VALUE
         TM    ZERO(R1),NEGATIVE        IS IT NEGATIVE
         BNO   RLD15                    ADD......
         SH    R6,GAPSIZE               YES SUBTRACT
         B     RLD16                    CONTINUE
RLD15    EQU   *
         AH    R6,GAPSIZE               YES ADD GAPSIZE
RLD16    EQU   *
         ST    R6,WORD(RE)              SET TO RETURN IT
         EX    R2,PUTCON           PUT NES VALUE IN TEXT.
         SPACE
RLDNXT   EQU   *                        GET THE NEXT ONE
         TM    ZERO(R1),RLDTYP          NEXT RLD HAVE R/P FIELD ?
         BO    RLD20                    NO UPDATE ONLY 4
         LA    R1,FOUR(R1)              YES UPDATE 8 BYTES
RLD18    EQU   *                        BEGINNING OF A NEW GROUP
         L     R3,FIRSTBLK              GET POINTER TO 1ST ENTRY
RLD18A   EQU   *
         CLI   ZERO(R3),INUSE           THIS A VALID ENTRY ?
         BNE   RLD18B                   NO
         CLC   ZERO(TWO,R1),FOUR(R3)    YES DO ID'S MATCH ?
         BE    RLD19                    YES GO TEST FOR RELOCATE
         LA    R3,SIX(R3)               GO TO NEXT ENTRY
         B     RLD18A                   AND CONTINUE THE SEARCH
         SPACE
RLD18B   EQU   *
         CLI   ZERO(R3),STOPPER         IS THIS THE END OF A BLOCK ?
         BNE   RLD19A                   NO END OF TABLE - NO MATCH
         L     R3,ZERO(R3)              GET ADDRESS OF NEXT BLOCK
         LA    R3,ZERO(R3)              CLEAR HI-ORDER BYTE
         LTR   R3,R3                    IS THERE ANYMORE
         BZ    RLD19A                   NO END OF TABLE - NO MATCH
         B     RLD18A                    YES CONTINUE SEARCH
         SPACE
RLD19    EQU   *
         CLC   ONE(THREE,R3),FOCUSPT+ONE RELOCATE FOR THIS GROUP REQ?
         BL    RLD19A                   NO
         NI    INPUTSW,ONES-RELGRP      YES - INDICATE THAT
         B     RLD20                    CONTINUE
         SPACE
RLD19A   EQU   *
         OI    INPUTSW,RELGRP           INDICATE REL. NOT REQ. ON THIS
*                                       PARTICULAR GROUP OF RLDS
         SPACE
RLD20    EQU   *
         LA    R1,FOUR(R1)
         C     R1,ENDPT(RE)             IS THIS THE END ?
         BL    RLD10                    NO - GO PROCESS THE NEXT
         LR    R2,RF                    OPCAVT BASE
         LA    R0,FOUR                  INDICATES CONTROL CAME FROM
*                                       RLD PROCESSOR IN OUTPUT
         MVC   OPCMODID,XCTLIPUT                               @Y17XARS
         B     EXIT                     PREPARE TO EXIT TO INPUT RTN
         SPACE
GETCON   EQU   *
         MVC   ZERO(ZERO,R4),ZERO(R5)         GET ADCON INSTRUCTION
PUTCON   EQU   *
         MVC   ZERO(ZERO,R5),ZERO(R4)   PUT ADCON INSTR.
LENSAVE  EQU   100                      PLACE TO SAVE LENGTH   @YA06868
WORKBUF  EQU   36                       OFFSET TO ADDR OF WORK BUFFER
WKBUFSAV EQU   168                      OFFSET-WKBUF@ SAVEAREA @OZ31840
OFF      EQU   X'3F'                          MASK TO TURN OFF BITS
REENTRY  EQU   X'80'                    1ST BRANCH POINT
MSG164   EQU   164                      NOT ENOUGH CORE AVAIL ERR MSG
XCTLMI   DC    C'MI'                    COMMON EXIT ROUTINE    @Y17XARS
WORD     EQU   104                      PATCH WORD
ENDPT    EQU   108                      END POINT OF RECORD    @OY12420
BRUPFRST EQU   X'20'                    UST BRING-UP RECORD
OFFBRUP  EQU   X'DF'                    TURN OFF 1ST BRUP INDICATOR
LENFRST  EQU   X'20'                    LEN OF RECORD MASK
RLDSTRT  EQU   16                       START OF RLD DATA
RLDCNT   EQU   6                        COUNT OF RLD DATA
NOREL    EQU   X'80'                    DON'T RELOCATE INDICATOR
NEGATIVE EQU   X'02'                    NEGATIVE RELOCATE FLAG
CLEAR    EQU   X'0F'                    CLEAR XXXX MASK
RLDTYP   EQU   X'01'                    TYPE INDICATOR IN RLD ITEM
         SPACE
*********************************** END OF RLD PROCESSOR *******
         SPACE
         SPACE
******************* END OF EXECUTABLE CODE *********************
         EJECT
******************* LOCAL DATA AND DSECTS **********************
         SPACE
MVC      MVC   ZERO(ZERO,R9),ZERO(R8)  MOVE FOR EXECUTE..
         SPACE
         SPACE
XCTLWRTE DC    C'MF'                    IF OF IFLWRITE MOD
SIZE     DC    X'000040'                SIZE OF AREA NEEDED
CARRYCDE EQU   X'02'                    HEX 02                   S22024
STRETCH  EQU   X'08'                    HEX 08                   S22024
XCTLIPUT DC    C'ME'                    ID OF 'INPUT' RTN
EIGHTY4  EQU   84                       EIGHTY4                  S22024
SECOND   EQU   X'C0'                    SECOND ENTRY POINT
FIRSTONE EQU   X'80'                    FIRST ENTRY POINT
X07      EQU   X'07'                    HEX 07                   S22024
X0F      EQU   X'0F'                    HEX 0F                   S22024
X06      EQU   X'06'                    HEX 06                   S22024
X02      EQU   X'02'                    HEX 02                   S22024
SIXTY4   EQU   64                       LENGTH TO CLEAR
SIXTY    EQU   60                       OFFSET
SIXTEEN  EQU   16                       SIXTEEN                  S22024
INBUFF   EQU   32                       OFFSET IN L-WK TO INPUT BUFF
LOADBRUP EQU   X'10'                    MASK FOR 1ST BRUP RECORD
BRUPOFF  EQU   X'EF'                    MASK TO TURN OFF 1ST BRUP REC
REGSAVE  EQU   96                       REGISTER SAVEAREA IN L-WKAREA
CLNUPPRI EQU   X'88'                    CLEAN UP INDICATOR TO MH
AUTOIPL  EQU   X'DF'                    PRIORITY OF AUTO-IPL ELEMENT
DATAOFF  EQU   184                      START OF C-WKAREA
OUTBUF   EQU   28                       OFFSET IN L-WKAREA TO ADDR
*                                       OF OUTPUT BUFFER
OUTBUF1  DSECT
         DS    256H                     TEXT AREA
         SPACE
         SPACE
******************** CESD TABLE QUEUE AND ASSOCIATED VALUES ****
CESDD    DSECT
****************************************************************
FIRSTBLK DS    AL4                      FIRST BLOCK PTR
LASTBLK  DS    AL4                      LAST BLOCK PTR
CURENTRY DS    AL4                      CURRENT ENTRY PTR
INUSE    EQU   X'01'                    THIS ENTRY IS IN USE
STOPPER  EQU   X'80'                    THIS IS THE END OF THE BLOCK
BLKSAVE  EQU   X'160'                   SAVEAREA IN COMMON AREA
*                                       FOR 1ST BLOCK IN CESD
*                                       PROCESSING
BLOCKADR DS    AL4                      ADDR OF BLOCK FROM GETMAIN
CESDOFF  EQU   40                       OFFSET IN L-WKAREA TO CESD TABL
DECBOFF  EQU   56                       OFFSET TO DECB IN L-WKAREA
CESDRLD  EQU   X'10'                    CESD AND RLD HANDLING
CXTENDBT EQU   X'20'                    CXTEND PRESENT
RELOC    EQU   X'40'                    INDIATES TO TRY RELOCATE
NOOP     EQU   X'80'                    INDICATES NO BRING-UP
SQUELCH  EQU   X'BF'                    NO RELOCATE BUT DO BRING-UP
DOBRUP   EQU   X'EF'                    INDICATE TO DO BRING-UP
         SPACE  3
LDATA    DSECT
INPUTSW  DS    X                        INPUT SWITCH             S22024
FIRST    EQU   X'80'                    THIS IS THE 1ST TEXT
CARRY    EQU   X'40'                    A CORRY CONDITION EXISTS
BYFOCUS  EQU   X'20'                    BEYOND THE FOCUS POINT
RELON    EQU   X'10'                    RELOCATE IS REQUIRED
RELGRP   EQU   X'04'                    NO RELOCATE ON THIS GROUP
FOUND    EQU   X'08'                    CXTEND HAS BEEN FOUND
NOP      EQU   X'00'                    NOP FOR BYPASSX SWITCHES
BRANCH   EQU   X'F0'                    BRANCH FOR BYPASSX SWITCHES
         SPACE
         DS    AL3                      THREE BYTS               S22024
FOCUSPT  DS    AL4                      FOUR BYTS                S22024
GAPSIZE  DS    AL2                      GAP SIZE                 S22024
SAVEIT   DS    AL2                      SAVE IT                  S22024
         SPACE  3
INPUTDS  DSECT
LMTYPE   DC    AL1(0)                   TYPE INDICATOR FOR LOAD
*                                       MODULE RECORD
CONTROL  EQU   X'01'                    INDICATOR FOR CONTROL REC.
ENDOF    EQU   X'0C'                    INDICATOR FOR END OF L.M.
CESD     EQU   X'20'                    INDICATOR FOR CESD RECORD
RLD      EQU   X'02'                    INDICATOR FOR RLD RECORD
         ORG   *+8                      N/A
INADDR   DC    AL3(0)                   RELATIVE ADDR. FO FOLLOWING
*                                       TEXT RECORD
         ORG   *+12                     N/A
COUNT    DC    AL2(0)                   NUMBER OF BYTES IN THE
*                                       FOLLOWING TEXT RECORD
         SPACE
         EJECT
DATADS   DSECT
****************************************************************
*        REGISTER AND NUMBER EQUATES
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
RA       EQU   10
RB       EQU   11
RC       EQU   12
RD       EQU   13
RE       EQU   14
RF       EQU   15
         SPACE
         SPACE
ZERO     EQU   0
ONE      EQU   1
TWO      EQU   2
THREE    EQU   3
FOUR     EQU   4
FIVE     EQU   5
SIX      EQU   6
SEVEN    EQU   7
EIGHT    EQU   8
NINE     EQU   9
TEN      EQU   10
ELEVEN   EQU   11
TWELVE   EQU   12
         SPACE 2
****************************************************************
**    MISCELLANEOUS  EQUATES  AND CONSTANTS                   **
         SPACE
BIT10    EQU   X'10'          TEST FOR OPEN IN DCB
IFLGSD   EQU   49             DCB IFLGS DISPLACEMENT
NOERRTN  EQU   X'0C'          INDICATE NO SYS ERROR RTNS.
UCBCA    EQU   19             UCB DISP OF CA INDICATOR.
MINICA   EQU   X'15'          MINI CA INDICATOR IN UCB.
         SPACE
ABORTVAL EQU   12             ABORT RET CODE THRESHOLD.
RETCODE  DC    H'0'                RETURN CODE.
MAXRC    DC    H'0'          MAXIMUM RETURN CODE SET.
RNDDN    DC    C'        '    RN DDNAME
RNADR    DC    C'   '              UNIT ADDRESS AREA.
ENTRYPT  DC    F'0'           ENTRY POINT FOR LOAD.
ARADDR   EQU   12             DECB AREA ADDR. DISP.
RNSWITCH EQU   X'14'         DISP OF SWITCH IN DIAG PHASE 1.
SIXTBIT  EQU   X'01'         SIXTEEN BIT INDICATOR.
ALIASIND EQU   X'80'          THIS IS AN ALIAS-INDICATOR.  BLDL
RENREUS  EQU   X'C0'          REENTRANT & REUSABLE         BLDL
ABORT    EQU   X'03'          ABORT SENSE INDICATORS.
         DS    0H
TXTLNGTH DC    H'0'           LENGTH OF TEXT RECORD
         DS    0F
TOTLNGTW DC    AL1(0)         TOTAL LENGTH OF DATA
TOTLNGTH DC    AL3(0)         TRANSFERRED
         DS    0F
TXTADDRW DC    AL1(0)         ADDRESS (REL TO ZERO) OF
TXTADDR  DC    AL3(0)         THIS TEXT RECORD.
         SPACE
N256HW   DC    H'256'         MAXIMUM MVC COUNT
INBUFSZ  DC    H'1024'        SIZE OF INPUT BUFFER
OUTBFSZ  DC    H'512'         SIZE OF OUTPUT BUFFER.
DOUBLE   DC    D'0'           DOUBLE WORD WORK AREA
LINECNT  DC    H'0'           LINE COUNT FOR OUTPUT
MAXLIN   DC    H'52'          MAXIMUM LINES PER PAGE.
N4H      DC    H'4'           FOUR CONSTANT
         SPACE
**   BLDL  LIST  FOR  LOAD  MODULE  DATA  SET                 **
         DS    0H
BLDLIST  DC    H'1'           ONE ENTRY IN THIS LIST.
         DC    H'58'          EACH ENTRY IS 58 BYTES LONG
MEMBER   EQU   *              MEMBER NAME PLACE HERE.
         DS    CL8                      EIGHT BYTS               S22024
RALTTRK  DC    4X'00'              USED IN FIND
*
Z        DC    X'00'          FLAG BYTE
C        DC    X'00'          FLAG BYTE
         ORG   MEMBER+22
ATTRIB   EQU   *              ATTRIBUTE FIELD
         ORG   MEMBER+29
EPAMEM   EQU   *              ENTRY PT IF MEMBER DIR.ENTRY.
         ORG   MEMBER+43
EPAALS   EQU   *              ENTRY PT IF ALIAS DIR.ENTRY.
         ORG   MEMBER+58
         SPACE
MAXIVT   EQU   *
         DC    V(CXWMAXI1)         ADDRESS OF MAXI PHASE 1
         DC    V(CXWMAXI2)         ADDRESS OF MAXI PHASE 2..
         SPACE
MINIVT   EQU   *
         DC    V(CXWMINI1)         ADDRESS OF MINI PHASE 1
         DC    V(CXWMINI2)         ADDRESS OF MINI PHASE 2..
         SPACE
PHASPTR  DC    A(MAXIVT)           PHASE VECTOR TABLE PTR..
PHASCNT  DC    H'8'                NUMBER OF PHASES TIMES FOUR..
MAXIPH1  DC    V(CXWMAXI1)         ADDRESS OF MAXI PHASE 1.
MINIPH1  DC    V(CXWMINI1)         ADDRESS OF MINI PHASE 1.
MAXIBUPH DC    CL8'IFL3705B'       NAME OF DIAG MAXI PHASE 1.
MINIBUPH DC    CL8'IFL3705A'       NAME OF DIAG MINI PHASE 1.
         SPACE
*                               *                              *
****************************************************************
***      SWITCHES AND TEST EQUATES                            **
         SPACE
SWITCH   EQU   *         * SWITCH BYTE *
         SPACE
SW1      EQU   *          INDICATES ONE PARM PROCESSED
ON1      EQU   X'80'          TURN ON SW1
OFF1     EQU   X'7F'          TURN OFF SW1
         SPACE
TXTSW    EQU   *            INDICATES TEXT RECORD IN NEXT BUFFER
ONTXT    EQU   X'40'          TURN ON TXTSW
OFFTXT   EQU   X'BF'          TURN OFF TXTSW
         SPACE
LASTSW   EQU   *            INDICATES LAST TEXT RECORD
ONLAST   EQU   X'20'          TURN ON LASTSW
         SPACE
ENDIN    EQU   *            INDICATES INPUT BUFFER IS EMPTY.
ONEND    EQU   X'10'          TURN ON ENDIN.
OFFEND   EQU   X'EF'          TURN OFF ENDIN.
         SPACE
IPLSW    EQU   *            INDICATES BOOTSTRAP IS TO BE SENT
ONIPL    EQU   X'08'          TURN ON IPLSW.
OFFIPL   EQU   X'F7'          TURN OFF IPLSW.
         SPACE
IOPEND   EQU   *            INDICATES AN EXCP IS OUTSTANDING.
ONIO     EQU   X'04'          TURN ON IOPEND
OFFIO    EQU   X'FB'          TURN OFF IOPEND
         SPACE
ERRENT   EQU   *            INDICATES ERROR RTN HAS BEEN ENTERED
ONENT    EQU   X'02'          TURN ON ERRENT.
         SPACE
BUFFERSW EQU   *                 INDICATES PRIMING OF BUFFERS..
BUFSW    EQU   X'01'                    BUFF SWITCH              S22024
         SPACE
ONES     EQU   X'FF'          USED IN SWITCH MANIPULATIONS.
         SPACE
         DC    AL1(0)      * ACTUAL SWITCH BYTE *
         SPACE 2
SWITCH2  EQU   *
CASW     EQU   *
         SPACE
LOADFLG  EQU   X'80'          LOADMOD KEYWORD PROCESSED.
UNITFLG  EQU   X'40'          UNIT    KEYWORD PROCESSED.
DIAGFLG  EQU   X'20'          DIAG    KEYWORD PROCESSED.            BUP
DIAGOK   EQU   X'10'          BRING-UP COMPLETED INDICATOR.         BUP
ONCA     EQU   X'01'               ON INDICATING MINI CA.
COMPLETE EQU   X'02'          LAST WRITE JUST ISSUED.
NXTPHS   EQU   X'04'          NEXT PHASE REQUEST.
         SPACE
         DC    AL1(0)          * ACTUAL SWITCH2 BYTE *
         SPACE
DIAGIND  DC    C'Y6'              INITIAL-TEST INDICATOR.
DIAGDEF  DC    C'Y6'               DEFAULT DIAG VALUE.
CHARN    EQU   C'N'           NO BRING-UP INDICATOR.                BUP
         SPACE 2
WARN     DC    AL1(0)        BYTE USED FOR WARNING INDICATORS
RNFULL   EQU   X'80'            RN IS FULL WARNING
         SPACE
GOODCODE EQU   X'7F'          NORMAL ECB COMPLETION CODE.
PERMERR  EQU   X'41'          PERMANENT ERROR ECB CODE.
         SPACE 2
*****************  CCW'S AND RELATED EQUATES  ******************
RNCCW    DS    0D             CHANNEL COMMAND WORDS
         DC    AL1(0)           COMMAND CODE
RNCCWAD  DC    AL3(0)           DATA ADDRESS
         DC    X'60'            FLAGS
         DC    AL1(0)             --
RNCCWLN  DC    AL2(1025)        COUNT FOR WRITE
         SPACE
NOPCCW   DS    0D             NOP CHANNEL COMMAND IS
         DC    AL1(3)           CHAINED TO THE NORMAL
         DC    AL3(*)           COMMANDS TO ENSURE
         DC    X'20'            DEVICE END IS RETURNED
         DC    AL3(1)           BEFORE ECB POSTED.
         SPACE
RNEND    EQU   X'C0'        * TEMPORARY - WILL NEED TO BE *
*                               MORE EXTENSIVE.
****************************************************************
         SPACE
**********  CONTROL BLOCKS FOR ASSOCIATED DATA SETS  ***********
         SPACE
ECBRN    DC    F'0'       **  ECB FOR EXCP'S TO 27RN.
         SPACE
IOBRN    DS    0F         **  IOB FOR EXCP'S TO 27RN.
         DC    X'42'         -COMMAND CHAINING & NOT RELATED.
         DC    AL1(0)        -FLAGS
IOBSENSE DC    AL2(0)        -SENSE BYTES
         DC    AL1(0)        -ECB CODE
         DC    AL3(ECBRN)    -ECB ADDRESS
         DC    AL1(0)        -FLAGS
         DC    AL3(0)        -CSW COMMAND ADDRESS.
IOBCSWS  DC    AL2(0)        -CSW STATUS BYTES
IOBCSWC  DC    AL2(0)        -CSW BYTE COUNT.
         DC    AL1(0)        -SIO CODE
         DC    AL3(RNCCW)    -CHANNEL PROGRAM ADDRESS.
         DC    AL1(0)        -RESERVED
         DC    AL3(0)                   DCB ADDRESS
         DC    AL1(0)        -REPOSITION MODIFIER
         DC    AL3(0)        -RESTART ADDRESS.
         DC    AL2(0)        -BLOCK COUNT INCREMENT N/A.
         DC    AL2(0)        -ERROR COUNTS.
         DC    AL1(0)        -EXTENT 0 OF DEB.
         DC    AL3(0)        -BBCCHHR
         DC    AL4(0)        -(SAME)
* END OF IOB DEFINITION  ***************************************
         EJECT
         TCOMD                                                 @Y17XARS
         TCOMIPLD                                              @Y17XARS
         EJECT
         TOPCED
         EJECT
         TOPCAVTD
         EJECT
         TAVTD
         EJECT                                                 @Y17XARS
         TOCTRD                                                @Y17XARS
         END
