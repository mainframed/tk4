         TITLE 'IGCFE10D, ACTIVATE RESPONSE PROCESSOR                  *
                        '
IGCFE10D CSECT ,                                                01S0001
@PROLOG  DS    0H                                               01S0002
*                                                               02S0343
*   /*****************************************************************/
*   /*                                                               */
*   /* PROLOGUE: THIS SEGMENT COMPLETES THE PROLOGUE CODE THAT WAS   */
*   /* ALTERED BY THE MODULE PROCEDURE STATEMENT.                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0343
*   REG12=REG15;                    /* SET THE CODE BASE REGISTER
*                                      WITH THE ENTRY POINT ADDRESS
*                                      OF THE MODULE                 */
         LR    REG12,REG15                                      02S0343
*   RFY                                                         02S0344
*     REG15 UNRSTD;                 /* RELEASE THE REGISTER     02S0344
*                                      RESTRICTED AT ENTRY TO THE
*                                      MODULE THAT WAS USED TO  02S0344
*                                      CONTAIN THE ENTRY POINT  02S0344
*                                      ADDRESS OF THE MODULE         */
*   GEN REFS(REG12) NOSETS;                                     02S0345
*                                   /*
         USING IGCFE10D,REG12          INFORM THE ASSEMBLER OF THE
*                                      BASE REGISTER TO BE USED FOR
*                                      ADDRESSING CODE
*   GEN NOREFS NOSETS;                                          02S0346
*                                   /*
IGCFE10D IEDHJN AFTERHJN,HJN           MODULE IDENTIFICATION MACRO
*                                                               02S0347
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS: THIS SEGMENT DOES THE PROCESSING THAT IS NECESSARY TO*/
*   /* PERFORM THE FUNCTION OF THE MODULE.                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0347
*                                                               03S0347
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS.INITIAL: THIS SEGMENT DOES THE INITIAL PROCESSING.    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               03S0347
*   ROPCAVT=RPARM;                  /* SET PTR TO OP CNTL AVT        */
         LR    ROPCAVT,RPARM                                    03S0347
*   RAVT=OPCAVTPT;                  /* SET PTR TO TCAM AVT           */
         L     RAVT,OPCAVTPT(,ROPCAVT)                          03S0348
*   ROPCE=OPCCOPCE;                 /* SET PTR TO CURRENT OPCE       */
         L     ROPCE,OPCCOPCE(,ROPCAVT)                         03S0349
*   RDATA=OPCWORK;                  /* SET PTR TO OP CNTL WORK AREA  */
         L     RDATA,OPCWORK(,ROPCAVT)                          03S0350
*   RSAVE=ADDR(OPCSAVE);            /* SET PTR TO OP CNTL SAVE AREA  */
         LA    RSAVE,OPCSAVE(,ROPCAVT)                          03S0351
*   FLAGS=0;                        /* CLEAR FLAGS & SWITCHES        */
         SLR   @11,@11                                          03S0352
         ST    @11,FLAGS(,RDATA)                                03S0352
*                                                               03S0353
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS.RESPONSE: THIS SEGMENT DECREMENTS THE OUTSTANDING     */
*   /* RESPONSE COUNT (IF NOT REDRIVE OPCE) IN THE ORIGINAL OPCE AND */
*   /* THEN DETERMINES THE TYPE OF RESPONSE (OR REDRIVE) OPCE THAT   */
*   /* THE ELEMENT IS AND THE PROCESSING NECESSARY                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                               03S0353
*   IF OCDCARD=OFF THEN             /* IF DISCARD FLAG OFF IS NOT
*                                      RETURN                @YM03705*/
         LA    @11,8                                            03S0353
         LR    @09,ROPCE                                        03S0353
         SLR   @09,@11                                          03S0353
         TM    OCDCARD(@09),B'00000100'                         03S0353
         BNZ   @RF00353                                         03S0353
*     DO;                           /* FROM CKPT SO IS RESPONSE 03S0354
*                                                            @YM03705*/
*       IF OCREDRVE=OFF             /* IF NOT REDRIVE OPCE           */
*         THEN                                                  03S0355
         TM    OCREDRVE(ROPCE),B'00010000'                      03S0355
         BNZ   @RF00355                                         03S0355
*         DO;                                                   03S0356
*           RWORK=OCPTRSAV;         /* SET BASE FOR ORIGINAL OPCE    */
         L     RWORK,OCPTRSAV(,ROPCE)                           03S0357
*           RWORK=RWORK-LENGTH(IEDQOPCN);/* BACK UP TO NEG PREFIX    */
         SLR   RWORK,@11                                        03S0358
*           RWORK->OCRESPCT=RWORK->OCRESPCT-1;/* DECREMENT OUT REST
*                                      CT                            */
         LH    @11,OCRESPCT(,RWORK)                             03S0359
         N     @11,@CF01484                                     03S0359
         BCTR  @11,0                                            03S0359
         STH   @11,OCRESPCT(,RWORK)                             03S0359
*         END;                                                  03S0360
*       IF OCSWITCH=OCACTLK×OCSWITCH=OCACTPU/* IF ACTLINK OR ACTPU
*                                      RESP. OR REDRIVE              */
*         THEN                      /* PERFORM PROCESSING FOR ACTLINK
*                                      OR ACTPU RESPONSE OR REDRIVE  */
@RF00355 CLI   OCSWITCH(ROPCE),X'50'                            03S0361
         BE    @RT00361                                         03S0361
         CLI   OCSWITCH(ROPCE),X'30'                            03S0361
         BNE   @RF00361                                         03S0361
@RT00361 DS    0H                                               03S0362
*         DO;                                                   03S0362
*                                                               04S0363
*           /*********************************************************/
*           /*                                                       */
*           /* PROCESS.RESPONSE.ACTLNKPU: THIS SEG PROCESSES ACTLINK */
*           /* OR ACTPU RESPONSES OR REDRIVES. THE FIRST PHASE OF    */
*           /* PROCESSING IS SKIPPED IF THE OPCE IS A REDRIVE OPCE.  */
*           /* THE SECOND PHASE OF PROCESSING IS SKIPPED IF THE EXIT */
*           /* FLAG HAS BEEN SET ON IN THE FIRST PHASE OF PROCESSING */
*           /*                                                       */
*           /*********************************************************/
*                                                               04S0363
*           IF OCREDRVE=OFF THEN    /* IF NOT REDRIVE OPCE THEN DO
*                                      1ST PHASE                     */
         TM    OCREDRVE(ROPCE),B'00010000'                      04S0363
         BNZ   @RF00363                                         04S0363
*             DO;                   /* PROCESSING                    */
*                                                               04S0364
*               /*****************************************************/
*               /*                                                   */
*               /* THIS SEGMENT PERFORMS THE 1ST PHASE OF PROCESSING */
*               /* OF THE ACTLINK OR ACTPU RESP PROCESSING           */
*               /*                                                   */
*               /*****************************************************/
*                                                               04S0365
*                                                               05S0365
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESS.RESPONSE.ACTLNKPU.LNKPU1: THIS SEGMENT    */
*               /* PERFORMS THE PROCESSING TO HANDLE THE RESPONSE TO */
*               /* AN ACTLINK OR ACTPU REQUEST. IF THERE IS AN       */
*               /* ATTACHED RU, IT IS FREED. IF THE RESPONSE IS      */
*               /* NEGATIVE, THE FINI FLAG IS SET AND THE SEGMENT IS */
*               /* EXITED. IF THE IDLE FLAG IS ON IN THE ORIG OPCE,  */
*               /* THEN NO FURTHER ACTIVATIONS ARE REQUIRED, SO THE  */
*               /* ORIG OPCE IS MADE THE CURRENT & EXIT PROCESSING IS*/
*               /* PERFORMED. OTHERWISE, THE NO. OF BUFFER UNITS     */
*               /* NEEDED IS CALCULATED & THE APPROPRIATE NO. OF     */
*               /* UNITS IS OBTAINED                                 */
*               /*                                                   */
*               /*****************************************************/
*                                                               05S0365
*               IF TIC=VALTIC THEN  /* IF THERE IS AN ATTACHED RU
*                                                            @YM05731*/
         TM    TIC(ROPCE),B'00000011'                           05S0365
         BNZ   @RF00365                                         05S0365
*                 DO;                                           05S0366
*                   RPARM=OCUNIT;   /* THEN POINT RPARM TO IT        */
         L     RPARM,OCUNIT(,ROPCE)                             05S0367
*                   CALL FREEBUF;   /* AND FREE IT                   */
         L     @15,OPCFREBF(,ROPCAVT)                           05S0368
         BALR  @14,@15                                          05S0368
*                   OCUNIT=PRUINTIC;/* AND SET INVALID TIC           */
         MVC   OCUNIT(4,ROPCE),@CF01232                         05S0369
*                 END;                                          05S0370
*               ELSE                                            05S0371
*                 ;                                             05S0371
@RF00365 DS    0H                                               05S0372
*               IF OCPARM>0 THEN    /* IF POSITIVE RESPONSE          */
         SLR   @11,@11                                          05S0372
         CH    @11,OCPARM(,ROPCE)                               05S0372
         BNL   @RF00372                                         05S0372
*                 DO;                                           05S0373
*                   RWORK=OCPTRSAV; /* SET ORIG OPCE BASE            */
         L     RWORK,OCPTRSAV(,ROPCE)                           05S0374
*                   RWORK=RWORK-LENGTH(IEDQOPCN);/* BACK UP TO NEG
*                                      PREFIX                        */
         SL    RWORK,@CF00045                                   05S0375
*                   IF RWORK->OCIDLE=OFF THEN/* IF NOT IDLE THEN
*                                      DETERMINE NO. OF UNITS        */
         TM    OCIDLE(RWORK),B'00000001'                        05S0376
         BNZ   @RF00376                                         05S0376
*                     DO;           /* NEEDED & GET APPROPRIATE NO.  */
*                                                               05S0377
*                       /*********************************************/
*                       /*                                           */
*                       /* THIS SEGMENT DETERMINES THE NO. OF BUFF   */
*                       /* UNITS NEEDED                              */
*                       /*                                           */
*                       /*********************************************/
*                                                               05S0378
*                                                               06S0378
*                       /*********************************************/
*                       /*                                           */
*                       /* PROCESS.RESPONSE.ACTLNKPU.LNKPU1.GETNUM:  */
*                       /* THIS SEGMENT DETERMINES THE NO. OF BUF    */
*                       /* UNITS FOR CASCADING SET UP OPCE FOR       */
*                       /* REDRIVE                                   */
*                       /*                                           */
*                       /*********************************************/
*                                                               06S0378
*                       OCBUFNED=0; /* SET # NEED = 0                */
         STH   @11,OCBUFNED(,ROPCE)                             06S0378
*                       OCBUFGOT=0; /* SET # HAVE = 0                */
         STH   @11,OCBUFGOT(,ROPCE)                             06S0379
*                       OCWTG=THISMOD;/* SET RETURN TO THIS MODULE   */
         MVC   OCWTG(2,ROPCE),@CC01436                          06S0380
*                       OCREDRVE=ON;/* TURN ON REDRIVE INDICATOR     */
         OI    OCREDRVE(ROPCE),B'00010000'                      06S0381
*                       RPARM=OCTRMTBL;/* GET TTCIN                  */
         LH    RPARM,OCTRMTBL(,ROPCE)                           06S0382
         N     RPARM,@CF01484                                   06S0382
*                       CALL TNTLKUP;/* GET TTE ADDR                 */
         L     @15,AVTRNMPT(,RAVT)                              06S0383
         BALR  @14,@15                                          06S0383
*                       RTRM=RPARM; /* SET TTE BASE                  */
         LR    RTRM,RPARM                                       06S0384
*                       OCTRMTBL=TRMSUBST;/* POINT OPCE TO      06S0385
*                                      SUBORDINATE RESOURCE          */
         LR    @11,RTRM                                         06S0385
         SL    @11,@CF00620                                     06S0385
         LH    @09,TRMSUBST(,@11)                               06S0385
         N     @09,@CF01484                                     06S0385
         STH   @09,OCTRMTBL(,ROPCE)                             06S0385
*                       IF TRMSUBST^=0 THEN/* IF HAVE SUBORDINATE
*                                      RESOURCES                     */
         LH    @11,TRMSUBST(,@11)                               06S0386
         N     @11,@CF01484                                     06S0386
         LTR   @11,@11                                          06S0386
         BZ    @RF00386                                         06S0386
*                         DO;                                   06S0387
*                           RPARM=TRMSUBST;/* THEN GET ADDR OF       */
         LR    RPARM,@11                                        06S0388
*                           CALL TNTLKUP;/* OF 1ST TTE               */
         L     @15,AVTRNMPT(,RAVT)                              06S0389
         BALR  @14,@15                                          06S0389
*                           RTRM=RPARM;/* SET TTE BASE               */
         LR    RTRM,RPARM                                       06S0390
*                         END;                                  06S0391
*                       ELSE                                    06S0392
*                         ;                                     06S0392
@RF00386 DS    0H                                               06S0393
*                       IF OCSWITCH=OCACTLK THEN/* IF ACTLINK THEN
*                                      SET                           */
         CLI   OCSWITCH(ROPCE),X'50'                            06S0393
         BNE   @RF00393                                         06S0393
*                         RWORK=TRMSDLC;/* COMPARE TYPE = LINE       */
         LA    RWORK,33                                         06S0394
*                       ELSE                                    06S0395
*                         RWORK=TRMPUNT;/* ELSE COMPARE = PU         */
*                                                               06S0395
         B     @RC00393                                         06S0395
@RF00393 LA    RWORK,24                                         06S0395
*                       /*********************************************/
*                       /*                                           */
*                       /* THIS SEGMENT COUNTS THE TTE'S WITH TRMREMB*/
*                       /* ON                                        */
*                       /*                                           */
*                       /*********************************************/
*                                                               06S0396
*                                                               07S0396
*                       /*********************************************/
*                       /*                                           */
*                       /* PROCESS.RESPONSE.ACTLNKPU.LNKPU1.GETNUM.CO*/
*                       /* UNT: THIS SEGMENT FOLLOWS THE COHORT PTRS */
*                       /* TILL BACK TO THE SUPERIOR RESOURCE, AND   */
*                       /* COUNTS THE TTE'S WITH TRMREMB ON          */
*                       /*                                           */
*                       /*********************************************/
*                                                               07S0396
*                       DO WHILE TRMTYPE^=RWORK;/* DO UNTIL REACH
*                                      SUPERIOR RESOURCE             */
@RC00393 B     @DE00396                                         07S0396
@DL00396 DS    0H                                               07S0397
*                         IF TRMREMB=ON THEN/* IF REMEMBER BIT ON    */
         LR    @11,RTRM                                         07S0397
         AL    @11,@CF01486                                     07S0397
         TM    TRMREMB-2(@11),B'01000000'                       07S0397
         BNO   @RF00397                                         07S0397
*                           OCBUFNED=OCBUFNED+1;/* THEN INCREMENT NO.
*                                      NEED                          */
         LA    @11,1                                            07S0398
         LH    @09,OCBUFNED(,ROPCE)                             07S0398
         N     @09,@CF01484                                     07S0398
         ALR   @11,@09                                          07S0398
         STH   @11,OCBUFNED(,ROPCE)                             07S0398
*                         ELSE                                  07S0399
*                           ;                                   07S0399
@RF00397 DS    0H                                               07S0400
*                         RPARM=TRMCOHRT;/* POINT TO NEXT TTE        */
         LR    @11,RTRM                                         07S0400
         AL    @11,@CF01487                                     07S0400
         LH    RPARM,TRMCOHRT-4(,@11)                           07S0400
         N     RPARM,@CF01484                                   07S0400
*                         CALL TNTLKUP;/* AND GET ADDR               */
         L     @15,AVTRNMPT(,RAVT)                              07S0401
         BALR  @14,@15                                          07S0401
*                         RTRM=RPARM;/* SET TTE BASE                 */
         LR    RTRM,RPARM                                       07S0402
*                       END;                                    07S0403
@DE00396 LR    @11,RTRM                                         07S0403
         AL    @11,@CF01030                                     07S0403
         SLR   @09,@09                                          07S0403
         IC    @09,TRMTYPE-11(,@11)                             07S0403
         CR    RWORK,@09                                        07S0403
         BNE   @DL00396                                         07S0403
*                                                               05S0404
*                       /*********************************************/
*                       /*                                           */
*                       /* THIS SEGMENT GETS THE APPROPRIATE NO. OF  */
*                       /* UNITS                                     */
*                       /*                                           */
*                       /*********************************************/
*                                                               05S0404
*                                                               06S0404
*                       /*********************************************/
*                       /*                                           */
*                       /* PROCESS.RESPONSE.ACTLNKPU.LNKPU1.GETUNITS:*/
*                       /* THIS SEGMENT SETS THE NUMBER OF UNITS     */
*                       /* NEEDED (UP TO 50% LEVEL), INCREMENTS THE  */
*                       /* OUTSTANDING RESPONSE CT IN THE ORIGINAL   */
*                       /* OPCE (IF NOT F ACT, NCP & IS ACTLINK). IF */
*                       /* OPCADGOT IS > ONE HALF THE AVAILABLE      */
*                       /* BUFFER UNITS ALREADY, THEN THE REDRIVE    */
*                       /* OPCE IS PUT ON A WAIT CHAIN FOR REDRIVE   */
*                       /* UNTIL UNITS BECOME AVAILABLE, AND CONTROL */
*                       /* IS GIVEN UP.                              */
*                       /*                                           */
*                       /*********************************************/
*                                                               06S0404
*                       IF OCBUFNED^=0 THEN/* IF ANY UNITS NEEDED    */
         LH    @11,OCBUFNED(,ROPCE)                             06S0404
         N     @11,@CF01484                                     06S0404
         LTR   @11,@11                                          06S0404
         BZ    @RF00404                                         06S0404
*                         DO;                                   06S0405
*                           RWORK=OCPTRSAV;/* THEN SET BASE FOR ORIG
*                                      OPCE                          */
         L     RWORK,OCPTRSAV(,ROPCE)                           06S0406
*                           RWORK=RWORK-LENGTH(IEDQOPCN);/* BACK UP
*                                      TO NEG PREFIX                 */
         SL    RWORK,@CF00045                                   06S0407
*                           IF OCSWITCH=OCACTLK&RWORK->OCADNCP=ON/*
*                                      IF ORIG OPCE IS NOT ACT NCP OR
*                                      THIS                          */
*                             THEN                              06S0408
         CLI   OCSWITCH(ROPCE),X'50'                            06S0408
         BNE   @RF00408                                         06S0408
         TM    OCADNCP(RWORK),B'00010000'                       06S0408
         BO    @RT00408                                         06S0408
*                             ;     /* NOT ACTLINK RESP THEN         */
*                           ELSE                                06S0410
*                             RWORK->OCRESPCT=RWORK->OCRESPCT+OCBUFNED;
@RF00408 LH    @11,OCRESPCT(,RWORK)                             06S0410
         N     @11,@CF01484                                     06S0410
         LH    @09,OCBUFNED(,ROPCE)                             06S0410
         N     @09,@CF01484                                     06S0410
         ALR   @11,@09                                          06S0410
         STH   @11,OCRESPCT(,RWORK)                             06S0410
*                                   /* INCREMENT OUT. RESP. CT. BY
*                                      NO. NEED                      */
*                           IF OPCADGOT<(AVTNOLBF/2) THEN/* IF NOT UP
*                                      TO 50% LEVEL THEN             */
@RT00408 LH    @11,OPCADGOT(,ROPCAVT)                           06S0411
         N     @11,@CF01484                                     06S0411
         LA    @09,2                                            06S0411
         LH    @15,AVTNOLBF(,RAVT)                              06S0411
         LR    @06,@15                                          06S0411
         SRDA  @06,32                                           06S0411
         DR    @06,@09                                          06S0411
         CR    @11,@07                                          06S0411
         BNL   @RF00411                                         06S0411
*                             DO;   /* SET SOME OR ALL NEEDED UNITS  */
*                                                               06S0412
*                               /*************************************/
*                               /*                                   */
*                               /* THIS SEGMENT OBTAINS BUFFER UNITS */
*                               /*                                   */
*                               /*************************************/
*                                                               06S0413
*                                                               07S0413
*                               /*************************************/
*                               /*                                   */
*                               /* PROCESS.RESPONSE.ACTLNKPU.LNKPU1.G*/
*                               /* ETUNITS.GETTER: THIS SEGMENT GETS */
*                               /* UNITS (EITHER NO. NEEDED OR UP TO */
*                               /* 50% LEVEL, WHICHEVER COMES FIRST),*/
*                               /* SETS NO. NEED & NO. HAVE          */
*                               /* ACCORDINGLY, AND ATTACHES THE     */
*                               /* UNITS TO THE REDRIVE OPCE         */
*                               /*                                   */
*                               /*************************************/
*                                                               07S0413
*                               RFY                             07S0413
*                                 REG00 UNRSTD;                 07S0413
*                               RFY                             07S0414
*                                 RTRM UNRSTD;                  07S0414
*                               IF(OCBUFNED+OPCADGOT)>=(AVTNOLBF/2)
*                                 THEN/* IF #NEED PLUS NO IN USE GT
*                                      50%                           */
         LH    @14,OCBUFNED(,ROPCE)                             07S0415
         N     @14,@CF01484                                     07S0415
         LR    @00,@14                                          07S0415
         ALR   @00,@11                                          07S0415
         LR    @06,@15                                          07S0415
         SRDA  @06,32                                           07S0415
         DR    @06,@09                                          07S0415
         CR    @00,@07                                          07S0415
         BL    @RF00415                                         07S0415
*                                 DO;/* THEN                         */
*                                   RWORK=(AVTNOLBF/2)-OPCADGOT;/*
*                                      SET NO TO GET = UP TO 50%LEVEL*/
         LR    @06,@15                                          07S0417
         SRDA  @06,32                                           07S0417
         DR    @06,@09                                          07S0417
         SLR   @07,@11                                          07S0417
         LR    RWORK,@07                                        07S0417
*                                   OCBUFNED=OCBUFNED-RWORK;/* SET NO
*                                      NEED = REMAINDER              */
         SLR   @14,RWORK                                        07S0418
         STH   @14,OCBUFNED(,ROPCE)                             07S0418
*                                 END;                          07S0419
*                               ELSE/* ELSE                          */
*                                 DO;/* SET NO TO GET = NO NEED      */
         B     @RC00415                                         07S0420
@RF00415 DS    0H                                               07S0421
*                                   RWORK=OCBUFNED;             07S0421
         LH    RWORK,OCBUFNED(,ROPCE)                           07S0421
         N     RWORK,@CF01484                                   07S0421
*                                   OCBUFNED=0;/* SET NO NEED = 0    */
         SLR   @11,@11                                          07S0422
         STH   @11,OCBUFNED(,ROPCE)                             07S0422
*                                 END;                          07S0423
*                               OCBUFGOT=RWORK;/* SET NO HAVE=NO TO
*                                      GET                           */
@RC00415 STH   RWORK,OCBUFGOT(,ROPCE)                           07S0424
*                               OPCADGOT=OPCADGOT+RWORK;/* INCREMENT
*                                      NO A/D HAS            @YM03705*/
         LH    @11,OPCADGOT(,ROPCAVT)                           07S0425
         N     @11,@CF01484                                     07S0425
         ALR   @11,RWORK                                        07S0425
         STH   @11,OPCADGOT(,ROPCAVT)                           07S0425
*                               RFY                             07S0426
*                                 REG00 RSTD;                   07S0426
*                               RFY                             07S0427
*                                 RTRM RSTD;                    07S0427
*                               RFY                             07S0428
*                                 REG11 RSTD;                   07S0428
*                               DO WHILE RWORK>0;/* GET BUFFERS      */
         B     @DE00429                                         07S0429
@DL00429 DS    0H                                               07S0430
*                                 IF RWORK>255 THEN/* SET UP LOOP FOR
*                                      REQUESTS FOR                  */
         LA    @09,255                                          07S0430
         CR    RWORK,@09                                        07S0430
         BNH   @RF00430                                         07S0430
*                                   DO;/* MAX OF 255 UNITS AT A TIME */
*                                    RWORK=RWORK-255;/* SUB 255 FROM
*                                      NO TO GET                     */
         SLR   RWORK,@09                                        07S0432
*                                    RPARM=255;/* SET NO WANT = 255  */
         LR    RPARM,@09                                        07S0433
*                                   END;                        07S0434
*                                 ELSE                          07S0435
*                                   DO;                         07S0435
         B     @RC00430                                         07S0435
@RF00430 DS    0H                                               07S0436
*                                    RPARM=RWORK;/* SET LT 255  07S0436
*                                      REQUEST                       */
         LR    RPARM,RWORK                                      07S0436
*                                    RWORK=0;/* SET NO STILL NEED = 0*/
         SLR   RWORK,RWORK                                      07S0437
*                                   END;                        07S0438
*                                 CALL ALLOCBUF;/* GET UNITS         */
@RC00430 L     @15,OPCGETBF(,ROPCAVT)                           07S0439
         BALR  @14,@15                                          07S0439
*                                 REG11=ROPCE;/* POINT TO REDRIVE
*                                      OPCE                          */
         LR    REG11,ROPCE                                      07S0440
*                                 RFY                           07S0441
*                                   IEDQOPCE BASED(REG11);/* @YM05731*/
*                                 DO WHILE TIC=VALTIC;/* LOOK FOR
*                                      LAST UNIT             @YM05731*/
         B     @DE00442                                         07S0442
@DL00442 DS    0H                                               07S0443
*                                   REG11=OCUNIT;/* BUMP TO NEXT UNIT
*                                                            @YM05731*/
         L     REG11,OCUNIT(,REG11)                             07S0443
*                                 END;/* WHEN FINISH DO REG11 = LAST
*                                      UNIT ADDR                     */
@DE00442 TM    TIC(REG11),B'00000011'                           07S0444
         BZ    @DL00442                                         07S0444
*                                 OCUNIT=RPARM;/* ATTACH GOTTEN UNITS
*                                                            @YM05731*/
         ST    RPARM,OCUNIT(,REG11)                             07S0445
*                                 RFY                           07S0446
*                                   IEDQOPCE BASED(ROPCE);/* @YM05731*/
*                               END;                            07S0447
@DE00429 LTR   RWORK,RWORK                                      07S0447
         BP    @DL00429                                         07S0447
*                               RFY                             07S0448
*                                 REG11 UNRSTD;                 07S0448
*                             END;                              06S0449
*                           ELSE    /* ELSE PUT REDRIVE OPCE ON WAIT */
*                             DO;   /* CHAIN & PREPARE TO PASS CNTL  */
         B     @RC00411                                         06S0450
@RF00411 DS    0H                                               06S0451
*                               OCLINK=OPCBUFWT;/* ATTACH CHAIN TO
*                                      THIS OPCE                     */
         L     @11,OPCBUFWT(,ROPCAVT)                           06S0451
         ST    @11,OCLINK(,ROPCE)                               06S0451
*                               OPCBUFWT=ROPCE;/* SET ANCHOR TO POINT
*                                      TO THIS OPCE                  */
         ST    ROPCE,OPCBUFWT(,ROPCAVT)                         06S0452
*                               OCWTG=THISMOD;/* SET THIS MOD TO GET
*                                      CONTROL ON REDRIVE    @OZ31505*/
         MVC   OCWTG(2,ROPCE),@CC01436                          06S0453
*                               OPCMODID=CNTLMOD;/* SET EXIT MOD TO
*                                      00                            */
         MVC   OPCMODID(2,ROPCAVT),@CC01438                     06S0454
*                               EXITFLAG=ON;/* SET ON EXIT FLAG      */
         OI    EXITFLAG(RDATA),B'10000000'                      06S0455
*                             END;                              06S0456
*                         END;                                  06S0457
*                       ELSE                                    06S0458
*                         SKIPSW=ON;/* SET SKIP SW IF NO UNITS NEEDED*/
         B     @RC00404                                         06S0458
@RF00404 OI    SKIPSW(RDATA),B'00000100'                        06S0458
*                     END;                                      05S0459
*                   ELSE            /* IF IDLE THEN CMND FINISHED    */
*                     DO;                                       05S0460
         B     @RC00376                                         05S0460
@RF00376 DS    0H                                               05S0461
*                       REG00=1;    /* SET DECREMENT NO.             */
         LA    REG00,1                                          05S0461
*                       CALL DECRCT;/* DECREMENT OPCADGOT            */
         L     @15,OPCDECR(,ROPCAVT)                            05S0462
         BALR  @14,@15                                          05S0462
*                       RPARM=OPCCOPCE;/* POINT RPARM TO DUMMY OPCE  */
         L     RPARM,OPCCOPCE(,ROPCAVT)                         05S0463
*                       OPCCOPCE=OCPTRSAV;/* SET ORIG OPCE AS CURRENT*/
         L     @11,OCPTRSAV(,ROPCE)                             05S0464
         ST    @11,OPCCOPCE(,ROPCAVT)                           05S0464
*                       ROPCE=OPCCOPCE;/* POINT TO ORIG OPCE         */
         LR    ROPCE,@11                                        05S0465
*                       CALL FREEBUF;/* FREE DUMMY OPCE              */
         L     @15,OPCFREBF(,ROPCAVT)                           05S0466
         BALR  @14,@15                                          05S0466
*                       SUCCFLAG=ON;/* SET SUCCESSFUL FLAG ON        */
*                       FINIFLAG=ON;/* SET FINI FLAG ON              */
         OI    SUCCFLAG(RDATA),B'01001000'                      05S0468
*                     END;                                      05S0469
*                 END;                                          05S0470
*               ELSE                /* IF UNSUCCESSFUL CHK FOR SIB
*                                      SHORTAGE              @YM03705*/
*                 DO;               /*                       @YM03705*/
         B     @RC00372                                         05S0471
@RF00372 DS    0H                                               05S0472
*                   IF OCPARM=OCRCBSIB THEN/* IF SIB SHORTAGE THEN
*                                                            @YM03705*/
         CLC   OCPARM(2,ROPCE),@CH01028                         05S0472
         BNE   @RF00472                                         05S0472
*                     SIBFLAG=ON;   /* TURN ON SIB FLAG      @YM03705*/
         OI    SIBFLAG(RDATA),B'00100000'                       05S0473
*                   ELSE                                        05S0474
*                     ;             /*                       @YM03705*/
@RF00472 DS    0H                                               05S0475
*                   FINIFLAG=ON;    /* TURN ON FINIFLAG FOR  @YM03705*/
         OI    FINIFLAG(RDATA),B'00001000'                      05S0475
*                 END;              /* UNSUCCESSFUL          @YM03705*/
*             END;                                              04S0477
*           ELSE                                                04S0478
*             ;                                                 04S0478
@RF00363 DS    0H                                               04S0479
*           IF EXITFLAG=OFF THEN    /* IF EXIT FLAG NOT ON THEN DO
*                                      2ND PHASE PROCESSING          */
@RC00363 TM    EXITFLAG(RDATA),B'10000000'                      04S0479
         BNZ   @RF00479                                         04S0479
*             DO;                                               04S0480
*                                                               04S0480
*               /*****************************************************/
*               /*                                                   */
*               /* THIS SEGMENT PERFORMS THE 2ND PHASE (PRIMARILY    */
*               /* REDRIVE) PROCESSING OF THE ACTLINK OR ACTPU       */
*               /* RESPONSES OR REDRIVES                             */
*               /*                                                   */
*               /*****************************************************/
*                                                               04S0481
*                                                               05S0481
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESS.RESPONSE.ACTLNKPU.LNKPU2: THIS SEGMENT    */
*               /* PERFORMS THE SECOND PHASE OF ACTLINK OR ACTPU     */
*               /* RESPONSE PROCESSING OR REDRIVE PROCESSING OF SAME.*/
*               /*                                                   */
*               /*****************************************************/
*                                                               05S0481
*               IF FINIFLAG=OFF THEN/* PROCESS ONLY IF FINIFLAG OFF  */
         TM    FINIFLAG(RDATA),B'00001000'                      05S0481
         BNZ   @RF00481                                         05S0481
*                 DO;                                           05S0482
*                   IF SKIPSW=OFF THEN/* BUILD OPCES UNLESS SKIP
*                                      SWITCH IS ON                  */
         TM    SKIPSW(RDATA),B'00000100'                        05S0483
         BNZ   @RF00483                                         05S0483
*                     DO;                                       05S0484
*                                                               05S0484
*                       /*********************************************/
*                       /*                                           */
*                       /* THIS SEGMENT BUILDS ACTIVATION REQUEST    */
*                       /* OPCES                                     */
*                       /*                                           */
*                       /*********************************************/
*                                                               05S0485
*                                                               06S0485
*                       /*********************************************/
*                       /*                                           */
*                       /* PROCESS.RESPONSE.ACTLNKPU.LNKPU2.BLDER:   */
*                       /* THIS SEGMENT BUILDS THE NECESSARY OPCE'S  */
*                       /* AND POSTS THEM TO AVTOPCOB                */
*                       /*                                           */
*                       /*********************************************/
*                                                               06S0485
*                       OPCAQWD1=0; /* CLEAR SVC POINTERS            */
         SLR   @11,@11                                          06S0485
         ST    @11,OPCAQWD1(,ROPCAVT)                           06S0485
*                       OPCAQWD2=0;                             06S0486
*                                                               06S0486
         ST    @11,OPCAQWD2(,ROPCAVT)                           06S0486
*                       /*********************************************/
*                       /*                                           */
*                       /* THIS SEGMENT BUILDS OPCES                 */
*                       /*                                           */
*                       /*********************************************/
*                                                               06S0487
*                                                               07S0487
*                       /*********************************************/
*                       /*                                           */
*                       /* PROCESS.RESPONSE.ACTLNKPU.LNKPU2.BLDER.BLD*/
*                       /* ER1: THIS SEGMENT PERFORMS THE ACTIONS    */
*                       /* NECESSARY TO LOOP THRU THE HIERARCHY AND  */
*                       /* BUILD OPCES FOR RESOURCES WITH THEIR      */
*                       /* REMEMBER BIT ON                           */
*                       /*                                           */
*                       /*********************************************/
*                                                               07S0487
*                       DO WHILE OCBUFGOT^=0;                   07S0487
         B     @DE00487                                         07S0487
@DL00487 DS    0H                                               07S0488
*                         RPARM=OCTRMTBL;/* SET TTCIN IN RPARM       */
         LH    RPARM,OCTRMTBL(,ROPCE)                           07S0488
         N     RPARM,@CF01484                                   07S0488
*                         CALL TNTLKUP;/* GET TTE ADDR               */
         L     @15,AVTRNMPT(,RAVT)                              07S0489
         BALR  @14,@15                                          07S0489
*                         RTRM=RPARM;/* SET TTE BASE. IF REMEMBER    */
         LR    RTRM,RPARM                                       07S0490
*                         IF TRMREMB=ON THEN/* BIT IS ON, BUILD OPCE */
         LR    @11,RTRM                                         07S0491
         AL    @11,@CF01486                                     07S0491
         TM    TRMREMB-2(@11),B'01000000'                       07S0491
         BNO   @RF00491                                         07S0491
*                           DO;                                 07S0492
*                                                               07S0492
*                             /***************************************/
*                             /*                                     */
*                             /* THIS SEGMENT SETS UP THE OPCES      */
*                             /*                                     */
*                             /***************************************/
*                                                               07S0493
*                                                               08S0493
*                             /***************************************/
*                             /*                                     */
*                             /* PROCESS.RESPONSE.ACTLNKPU.LNKPU2.BLD*/
*                             /* ER.BLDER1.BLDOPCE: THIS SEGMENT     */
*                             /* BUILDS THE F ACT, PU, THE ACTPU, AND*/
*                             /* THE ACTLU OPCES                     */
*                             /*                                     */
*                             /***************************************/
*                                                               08S0493
*                             RFY                               08S0493
*                               REG11 RSTD;                     08S0493
*                             RWORK=OCUNIT;/* GET ADDR OF ATTACHED
*                                      UNIT                          */
         L     RWORK,OCUNIT(,ROPCE)                             08S0494
*                             OCUNIT=RWORK->OCUNIT;/* UNLINK UNIT    */
         L     @09,OCUNIT(,RWORK)                               08S0495
         ST    @09,OCUNIT(,ROPCE)                               08S0495
*                             RWORK->OCUNIT=PRUINTIC;/* SET INVALID
*                                      TIC IN UNIT                   */
         MVC   OCUNIT(4,RWORK),@CF01232                         08S0496
*                             RWORK->OCPTRSAV=OCPTRSAV;/* SET PTR TO
*                                      ORIG OPCE                     */
         L     @09,OCPTRSAV(,ROPCE)                             08S0497
         ST    @09,OCPTRSAV(,RWORK)                             08S0497
*                             RWORK->OCTRMTBL=OCTRMTBL;/* SET   08S0498
*                                      RESOURCE TTCIN                */
         LH    @15,OCTRMTBL(,ROPCE)                             08S0498
         N     @15,@CF01484                                     08S0498
         STH   @15,OCTRMTBL(,RWORK)                             08S0498
*                             IF OCSWITCH=OCACTLK THEN/* IF DOING PU
*                                      CASCADE                       */
         CLI   OCSWITCH(ROPCE),X'50'                            08S0499
         BNE   @RF00499                                         08S0499
*                               DO;                             08S0500
*                                 REG11=OCPTRSAV;/* POINT TO ORIG
*                                      OPCE                          */
         LR    REG11,@09                                        08S0501
*                                 REG11=REG11-LENGTH(IEDQOPCN);/*
*                                      BACK UP TO NEG PREFIX         */
         LA    @09,8                                            08S0502
         SLR   REG11,@09                                        08S0502
*                                 IF REG11->OCADNCP=ON THEN/* IF ORIG
*                                      CMND IS ACT NCP               */
         TM    OCADNCP(REG11),B'00010000'                       08S0503
         BNO   @RF00503                                         08S0503
*                                   DO;/* SET UP F ACT, PU'S         */
*                                    RWORK->OCSWITCH=OCTOFA;/* SET TO
*                                      ACTIVATE                      */
         MVI   OCSWITCH(RWORK),X'22'                            08S0505
*                                    RWORK->OCELMPRI=PRIMEDFG;/* SET
*                                      PRIORITY FOR ROUTING          */
         MVI   OCELMPRI(RWORK),X'DF'                            08S0506
*                                    RWORK->OCPRIFLG=OPRDRTN;/* SET
*                                      FLAG FOR ROUTING              */
         MVI   OCPRIFLG(RWORK),X'13'                            08S0507
*                                    RWORK=RWORK-LENGTH(IEDQOPCN);/*
*                                      BACK UP TO NEG PREFIX         */
         SLR   RWORK,@09                                        08S0508
*                                    RWORK->OCDCARD=ON;/* SET ON
*                                      DISCARD FLAG                  */
         OI    OCDCARD(RWORK),B'00000100'                       08S0509
*                                    RWORK=RWORK+LENGTH(IEDQOPCN);/*
*                                      RESET TO OPCE                 */
         ALR   RWORK,@09                                        08S0510
*                                   END;                        08S0511
*                                 ELSE/* ELSE BUILD SSCP REQUESTS    */
*                                   DO;/* FOR ACTPU                  */
         B     @RC00503                                         08S0512
@RF00503 DS    0H                                               08S0513
*                                    RWORK->OCSWITCH=OCACTPU;/* SET
*                                      ACTPU REQUEST CODE            */
         MVI   OCSWITCH(RWORK),X'30'                            08S0513
*                                    RWORK->OCPRIFLG=OPRA0;/* SET TO
*                                      ROUTE TO SSCP                 */
         MVI   OCPRIFLG(RWORK),X'01'                            08S0514
*                                    RWORK->OCACTREQ=ON;/* SET A/D
*                                      FLAG                  @YM03705*/
         OI    OCACTREQ(RWORK),B'00001000'                      08S0515
*                                    RWORK->OCELMPRI=PRIHIFLG;  08S0516
         MVI   OCELMPRI(RWORK),X'E9'                            08S0516
*                                    RWORK->OCWTG=THISMOD;/* SET
*                                      RETURN TO THIS MOD            */
         MVC   OCWTG(2,RWORK),@CC01436                          08S0517
*                                   END;                        08S0518
*                               END;                            08S0519
*                             ELSE  /* SET UP SSCP REQUESTS FOR ACTLU*/
*                               DO;                             08S0520
         B     @RC00499                                         08S0520
@RF00499 DS    0H                                               08S0521
*                                 RWORK->OCSWITCH=OCACTLU;/* SET
*                                      ACTLU REQUEST CODE            */
         MVI   OCSWITCH(RWORK),X'10'                            08S0521
*                                 RWORK->OCPRIFLG=OPRA0;/* SET TO
*                                      ROUTE TO SSCP                 */
         MVI   OCPRIFLG(RWORK),X'01'                            08S0522
*                                 RWORK->OCACTREQ=ON;/* SET A/D FLAG
*                                                            @YM03705*/
         OI    OCACTREQ(RWORK),B'00001000'                      08S0523
*                                 RWORK->OCELMPRI=PRIHIFLG;     08S0524
         MVI   OCELMPRI(RWORK),X'E9'                            08S0524
*                                 RWORK->OCWTG=THISMOD;/* SET RETURN
*                                      TO THIS MODULE                */
         MVC   OCWTG(2,RWORK),@CC01436                          08S0525
*                               END;                            08S0526
*                             RWORK->OCLINK=ADDR(AVTOPCOB);/* POINT
*                                      OPCE TO OPCOB QCB             */
*                                                               08S0527
@RC00499 LA    @09,AVTOPCOB(,RAVT)                              08S0527
         ST    @09,OCLINK(,RWORK)                               08S0527
*                             /***************************************/
*                             /*                                     */
*                             /* THIS SEGMENT ADDS OPCE TO SVC 102   */
*                             /* LIST                                */
*                             /*                                     */
*                             /***************************************/
*                                                               08S0528
*                                                               09S0528
*                             /***************************************/
*                             /*                                     */
*                             /* PROCESS.RESPONSE.ACTLNKPU.LNKPU2.BLD*/
*                             /* ER.BLDER1.BLDOPCE.LISTADD: THIS     */
*                             /* SEGMENT CHAINS OPCE'S INTO THE SVC  */
*                             /* 102 LIST                            */
*                             /*                                     */
*                             /***************************************/
*                                                               09S0528
*                             IF OPCAQWD1=0 THEN/* IF LIST EMPTY     */
         L     @09,OPCAQWD1(,ROPCAVT)                           09S0528
         LTR   @09,@09                                          09S0528
         BNZ   @RF00528                                         09S0528
*                               DO; /* THEN                          */
*                                 OPCAQWD1=RWORK;/* SET 1ST ELEMENT
*                                      ADDR                          */
         ST    RWORK,OPCAQWD1(,ROPCAVT)                         09S0530
*                                 OPCAQWD2=RWORK;/* SET LAST ELEMENT
*                                      ADDR                          */
         ST    RWORK,OPCAQWD2(,ROPCAVT)                         09S0531
*                               END;                            09S0532
*                             ELSE                              09S0533
*                               DO;                             09S0533
         B     @RC00528                                         09S0533
@RF00528 DS    0H                                               09S0534
*                                 REG11=OPCAQWD2;/* SET LAST ELEM
*                                      BASE                          */
         L     REG11,OPCAQWD2(,ROPCAVT)                         09S0534
*                                 REG11->OCELMPTR=RWORK;/* SET LAST
*                                      ELEM TO POINT TO THIS ONE     */
         STCM  RWORK,7,OCELMPTR(REG11)                          09S0535
*                                 OPCAQWD2=RWORK;/* SET LIST LAST
*                                      ELEM PTR                      */
         ST    RWORK,OPCAQWD2(,ROPCAVT)                         09S0536
*                               END;                            09S0537
*                             RFY                               08S0538
*                               REG11 UNRSTD;                   08S0538
@RC00528 DS    0H                                               08S0539
*                             POSTSW=ON;/* SET POST SW ON            */
         OI    POSTSW(RDATA),B'00010000'                        07S0539
*                             OCBUFGOT=OCBUFGOT-1;/* DECREMENT NO
*                                      HAVE FOR ONE USED             */
         LH    @11,OCBUFGOT(,ROPCE)                             07S0540
         N     @11,@CF01484                                     07S0540
         BCTR  @11,0                                            07S0540
         STH   @11,OCBUFGOT(,ROPCE)                             07S0540
*                           END;                                07S0541
*                         ELSE                                  07S0542
*                           ;                                   07S0542
@RF00491 DS    0H                                               07S0543
*                         OCTRMTBL=TRMCOHRT;/* SET TO POINT TO NEXT
*                                      RESOURCE                      */
         LR    @11,RTRM                                         07S0543
         AL    @11,@CF01487                                     07S0543
         LH    @11,TRMCOHRT-4(,@11)                             07S0543
         N     @11,@CF01484                                     07S0543
         STH   @11,OCTRMTBL(,ROPCE)                             07S0543
*                       END;                                    07S0544
@DE00487 LH    @11,OCBUFGOT(,ROPCE)                             07S0544
         N     @11,@CF01484                                     07S0544
         LTR   @11,@11                                          07S0544
         BNZ   @DL00487                                         07S0544
*                                                               06S0545
*                       /*********************************************/
*                       /*                                           */
*                       /* THIS SEGMENT POSTS THE OPCES              */
*                       /*                                           */
*                       /*********************************************/
*                                                               06S0545
*                                                               07S0545
*                       /*********************************************/
*                       /*                                           */
*                       /* PROCESS.RESPONSE.ACTLNKPU.LNKPU2.BLDER.BLD*/
*                       /* ER2: THIS SEGMENT COMPLETES THE SVC 102   */
*                       /* LIST & POSTS THE LIST OF OPCES TO THE     */
*                       /* ASYNCH READY QUEUE. IF MORE UNITS ARE     */
*                       /* NEEDED, THE REDRIVE OPCE IS PUT ON THE    */
*                       /* WAIT CHAIN & CONTROL IS GIVEN UP          */
*                       /*                                           */
*                       /*********************************************/
*                                                               07S0545
*                       IF POSTSW=ON THEN/* DO IF ANY TO BE POSTED   */
         TM    POSTSW(RDATA),B'00010000'                        07S0545
         BNO   @RF00545                                         07S0545
*                         DO;                                   07S0546
*                           OPCAQREQ='B4'X;/* SET REQUEST CODE  07S0547
*                                                            @G36XRRV*/
         MVI   OPCAQREQ(ROPCAVT),X'B4'                          07S0547
*                           RPARM=ADDR(OPCAQCTL);/* SET PTR TO LIST  */
         LA    RPARM,OPCAQCTL(,ROPCAVT)                         07S0548
*                           SVC(102);/* POST OPCE'S                  */
         SVC   102                                              07S0549
*                           IF OCBUFNED>0 THEN/* IF STILL NEED UNITS */
         CLC   OCBUFNED(2,ROPCE),@CH00783                       07S0550
         BNH   @RF00550                                         07S0550
*                             DO;                               07S0551
*                               OCLINK=OPCBUFWT;/* CHAIN REDRIVE OPCE
*                                      IN                            */
         L     @11,OPCBUFWT(,ROPCAVT)                           07S0552
         ST    @11,OCLINK(,ROPCE)                               07S0552
*                               OPCBUFWT=ROPCE;                 07S0553
         ST    ROPCE,OPCBUFWT(,ROPCAVT)                         07S0553
*                               OCWTG=THISMOD;/* SET THIS MOD TO GET
*                                      CONTROL ON REDRIVE    @OZ31505*/
         MVC   OCWTG(2,ROPCE),@CC01436                          07S0554
*                               OPCMODID=CNTLMOD;/* SET NEXT MOD = 00*/
         MVC   OPCMODID(2,ROPCAVT),@CC01438                     07S0555
*                               EXITFLAG=ON;/* SET ON EXIT FLAG      */
         OI    EXITFLAG(RDATA),B'10000000'                      07S0556
*                             END;                              07S0557
*                           ELSE                                07S0558
*                             ;                                 07S0558
@RF00550 DS    0H                                               07S0559
*                         END;                                  07S0559
*                       ELSE                                    07S0560
*                         ;                                     07S0560
@RF00545 DS    0H                                               07S0561
*                     END;                                      05S0561
*                   ELSE                                        05S0562
*                     ;                                         05S0562
@RF00483 DS    0H                                               05S0563
*                   IF EXITFLAG=OFF THEN/* SET UP FOR EXIT PROCESSING
*                                      UNLESS EXITFLAG ON            */
         TM    EXITFLAG(RDATA),B'10000000'                      05S0563
         BNZ   @RF00563                                         05S0563
*                     DO;                                       05S0564
*                                                               05S0564
*                       /*********************************************/
*                       /*                                           */
*                       /* THIS SEGMENT SETS UP FOR EXIT PROCESSING  */
*                       /*                                           */
*                       /*********************************************/
*                                                               05S0565
*                                                               06S0565
*                       /*********************************************/
*                       /*                                           */
*                       /* PROCESS.RESPONSE.ACTLNKPU.LNKPU2.ENDER:   */
*                       /* THIS SEGMENT SETS UP FOR END OF CMND      */
*                       /* PROCESSING IF NO OUTSTANDING RESPONSES.   */
*                       /* ELSE IT RELINQUISHES CONTROL. IN EITHER   */
*                       /* CASE THE REDRIVE OPCE IS FREED AND        */
*                       /* OPCADGOT IS DECREMENTED.                  */
*                       /*                                           */
*                       /*********************************************/
*                                                               06S0565
*                       RFY                                     06S0565
*                         RWORK RSTD;/* RESTRICT REG                 */
*                       RWORK=OCPTRSAV;/* SET BASE FOR ORIG OPCE     */
         L     @11,OCPTRSAV(,ROPCE)                             06S0566
         LR    RWORK,@11                                        06S0566
*                       RWORK=RWORK-LENGTH(IEDQOPCN);/* BACK UP TO
*                                      NEG PREFIX                    */
         SL    RWORK,@CF00045                                   06S0567
*                       IF RWORK->OCRESPCT<=0 THEN/* IF NO OUT. 06S0568
*                                      RSPONSES@YM03735              */
         CLC   OCRESPCT(2,RWORK),@CH00783                       06S0568
         BH    @RF00568                                         06S0568
*                         DO;       /* THEN END OF CMND              */
*                           SUCCFLAG=ON;/* SET SUCCESSFUL            */
         OI    SUCCFLAG(RDATA),B'01000000'                      06S0570
*                           OPCCOPCE=OCPTRSAV;/* SET ORIGINAL AS
*                                      CURRENT                       */
         ST    @11,OPCCOPCE(,ROPCAVT)                           06S0571
*                         END;                                  06S0572
*                       ELSE        /* ELSE AWAIT RESPONSES          */
*                         DO;                                   06S0573
         B     @RC00568                                         06S0573
@RF00568 DS    0H                                               06S0574
*                           OPCMODID=CNTLMOD;/* SET EXIT TO 00       */
         MVC   OPCMODID(2,ROPCAVT),@CC01438                     06S0574
*                           EXITFLAG=ON;/* SET EXIT FLAG ON          */
         OI    EXITFLAG(RDATA),B'10000000'                      06S0575
*                         END;                                  06S0576
*                       REG00=1;    /* SET DECREMENT CT = 1          */
@RC00568 LA    REG00,1                                          06S0577
*                       CALL DECRCT;/* DECREMENT OPCADGOT            */
         L     @15,OPCDECR(,ROPCAVT)                            06S0578
         BALR  @14,@15                                          06S0578
*                       RPARM=ROPCE;/* POINT TO REDRIVE OPCE         */
         LR    RPARM,ROPCE                                      06S0579
*                       CALL FREEBUF;/* FREE REDRIVE OPCE            */
         L     @15,OPCFREBF(,ROPCAVT)                           06S0580
         BALR  @14,@15                                          06S0580
*                       ROPCE=OPCCOPCE;/* RESET OPCE PTR             */
         L     ROPCE,OPCCOPCE(,ROPCAVT)                         06S0581
*                     END;                                      05S0582
*                   ELSE                                        05S0583
*                     ;                                         05S0583
@RF00563 DS    0H                                               05S0584
*                 END;                                          05S0584
*               ELSE                                            05S0585
*                 ;                                             05S0585
@RF00481 DS    0H                                               05S0586
*             END;                                              04S0586
*           ELSE                                                04S0587
*             ;                                                 04S0587
@RF00479 DS    0H                                               04S0588
*         END;                                                  03S0588
*       ELSE                                                    03S0589
*         IF OCSWITCH=OCVARON       /* IF RESPONSE TO STARTLINE 03S0589
*                                      REQUEST                       */
*           THEN                                                03S0589
         B     @RC00361                                         03S0589
@RF00361 CLI   OCSWITCH(ROPCE),X'D1'                            03S0589
         BNE   @RF00589                                         03S0589
*           DO;                                                 03S0590
*                                                               03S0590
*             /*******************************************************/
*             /*                                                     */
*             /* PERFORM PROCESSING FOR STARTLINE RESPONSE           */
*             /*                                                     */
*             /*******************************************************/
*                                                               03S0591
*                                                               04S0591
*             /*******************************************************/
*             /*                                                     */
*             /* PROCESS.RESPONSE.VARY: THIS SEGMENT PROCESSES THE   */
*             /* RESPONSES TO STARTLINE REQUESTS                     */
*             /*                                                     */
*             /*******************************************************/
*                                                               04S0591
*             RFY                                               04S0591
*               REG11 RSTD;                                     04S0591
*             RWORK=OCPTRSAV;       /* SET ORIG OPCE BASE    @YM09110*/
         L     @09,OCPTRSAV(,ROPCE)                             04S0592
         LR    RWORK,@09                                        04S0592
*             RWORK=RWORK-LENGTH(IEDQOPCN);/* BACK UP TO NEG PREF
*                                                            @YM09110*/
         SL    RWORK,@CF00045                                   04S0593
*             IF RWORK->OCRESPCT<=0 THEN/* IF NO OUTSTANDING    04S0594
*                                      RESPONSES             @YM09110*/
         CLC   OCRESPCT(2,RWORK),@CH00783                       04S0594
         BH    @RF00594                                         04S0594
*               DO;                 /* THEN                  @YM09110*/
*                 IF OCATTACH=ON THEN/* IF OTHER OPCE'S ATTACHED
*                                                            @YM09110*/
         TM    OCATTACH(ROPCE),B'00000010'                      04S0596
         BNO   @RF00596                                         04S0596
*                   DO;             /* THEN RELINK TO ORIG OPCE CHAIN
*                                                            @YM09110*/
*                     REG11=OCPTRSAV;/* SET ORIG OPCE BASE   @YM09110*/
         LR    REG11,@09                                        04S0598
*                     DO WHILE REG11->OCATTACH=ON;/* FIND LAST OPCE
*                                      ON CHAIN              @YM09110*/
         B     @DE00599                                         04S0599
@DL00599 DS    0H                                               04S0600
*                       REG11=REG11->OCELEM;/* BY LOOPING TO END
*                                                            @YM09110*/
         L     REG11,OCELEM(,REG11)                             04S0600
*                     END;          /*                       @YM09110*/
@DE00599 TM    OCATTACH(REG11),B'00000010'                      04S0601
         BO    @DL00599                                         04S0601
*                     REG11->OCATTACH=ON;/* TURN ON ATTACHED @YM09110*/
         OI    OCATTACH(REG11),B'00000010'                      04S0602
*                     REG11->OCELEM=OCELEM;/* ATTACH TO LAST @YM09110*/
         L     @09,OCELEM(,ROPCE)                               04S0603
         ST    @09,OCELEM(,REG11)                               04S0603
*                     OCELEM=0;     /* AND CLEAR             @YM09110*/
         SLR   @09,@09                                          04S0604
         ST    @09,OCELEM(,ROPCE)                               04S0604
*                   END;            /*                       @YM09110*/
*                 ELSE                                          04S0606
*                   ;               /*                       @YM09110*/
@RF00596 DS    0H                                               04S0607
*                 IF OCPARM=GOODVARY THEN/* IF STARTLINE IS OK  04S0607
*                                                            @YM09110*/
         CLC   OCPARM(2,ROPCE),@CH01440                         04S0607
         BNE   @RF00607                                         04S0607
*                   DO;             /*                       @YM09110*/
*                     SUCCFLAG=ON;  /* SET SUCCESSFUL        @YM09110*/
         OI    SUCCFLAG(RDATA),B'01000000'                      04S0609
*                     OPCCOPCE=OCPTRSAV;/* SET ORIG OPCE AS CURRENT
*                                                            @YM09110*/
         L     @09,OCPTRSAV(,ROPCE)                             04S0610
         ST    @09,OPCCOPCE(,ROPCAVT)                           04S0610
*                     REG00=1;      /* SET DECREMENT CT = 1  @YM09110*/
         LA    REG00,1                                          04S0611
*                     CALL DECRCT;  /* DECREMENT OPCADGOT    @YM09110*/
         L     @15,OPCDECR(,ROPCAVT)                            04S0612
         BALR  @14,@15                                          04S0612
*                     RPARM=ROPCE;  /* POINT TO REDRIVE OPCE @YM09110*/
         LR    RPARM,ROPCE                                      04S0613
*                     CALL FREEBUF; /* AND FREE IT           @YM09110*/
         L     @15,OPCFREBF(,ROPCAVT)                           04S0614
         BALR  @14,@15                                          04S0614
*                     ROPCE=OPCCOPCE;/* RESET OPCE PTR       @YM09110*/
         L     ROPCE,OPCCOPCE(,ROPCAVT)                         04S0615
*                   END;            /*                       @YM09110*/
*                 ELSE                                          04S0617
*                   ;               /*                       @YM09110*/
@RF00607 DS    0H                                               04S0618
*               END;                /*                       @YM09110*/
*             ELSE                                              04S0619
*               DO;                 /* ELSE IF MORE RESPONSES TO COME
*                                                            @YM09110*/
         B     @RC00594                                         04S0619
@RF00594 DS    0H                                               04S0620
*                 IF OCATTACH=ON THEN                           04S0620
         TM    OCATTACH(ROPCE),B'00000010'                      04S0620
         BNO   @RF00620                                         04S0620
*                   DO;             /* IF ATTACHED VARYS THEN   04S0621
*                                                            @YM09110*/
*                     OCATTACH=OFF; /* TURN OFF ATTACH       @YM09110*/
         NI    OCATTACH(ROPCE),B'11111101'                      04S0622
*                     OPCNEXT=OCELEM;/* SET ATTACHED AS NEXT TO 04S0623
*                                      PROCESS               @YM09110*/
         L     @09,OCELEM(,ROPCE)                               04S0623
         ST    @09,OPCNEXT(,ROPCAVT)                            04S0623
*                   END;            /*                       @YM09110*/
*                 ELSE                                          04S0625
*                   ;               /*                       @YM09110*/
@RF00620 DS    0H                                               04S0626
*                 IF OCPARM=GOODVARY THEN                       04S0626
         CLC   OCPARM(2,ROPCE),@CH01440                         04S0626
         BNE   @RF00626                                         04S0626
*                   DO;             /* IF GOOD RESP THEN     @YM09110*/
*                     OPCMODID=CNTLMOD;/* SET EXIT TO 00     @YM09110*/
         MVC   OPCMODID(2,ROPCAVT),@CC01438                     04S0628
*                     EXITFLAG=ON;  /* SET EXIT FLAG         @YM09110*/
         OI    EXITFLAG(RDATA),B'10000000'                      04S0629
*                     REG00=1;      /* SET DECREMENT CT = 1  @YM09110*/
         LA    REG00,1                                          04S0630
*                     CALL DECRCT;  /* DECREMENT OPCADGOT    @YM09110*/
         L     @15,OPCDECR(,ROPCAVT)                            04S0631
         BALR  @14,@15                                          04S0631
*                     RPARM=ROPCE;  /* POINT TO REDRIVE OPCE @YM09110*/
         LR    RPARM,ROPCE                                      04S0632
*                     CALL FREEBUF; /* AND FREE IT           @YM09110*/
         L     @15,OPCFREBF(,ROPCAVT)                           04S0633
         BALR  @14,@15                                          04S0633
*                     ROPCE=OPCCOPCE;/* RESET OPCE PTR       @YM09110*/
         L     ROPCE,OPCCOPCE(,ROPCAVT)                         04S0634
*                   END;            /*                       @YM09110*/
*                 ELSE                                          04S0636
*                   ;               /*                       @YM09110*/
@RF00626 DS    0H                                               04S0637
*               END;                /*                       @YM09110*/
*             RFY                                               04S0638
*               REG11 UNRSTD;       /*                       @YM09110*/
@RC00594 DS    0H                                               04S0639
*           END;                                                03S0639
*         ELSE                      /* PERFORM PROCESSING FOR ACTLU
*                                      RESPONSE                      */
*           DO;                                                 03S0640
         B     @RC00589                                         03S0640
@RF00589 DS    0H                                               03S0641
*                                                               04S0641
*             /*******************************************************/
*             /*                                                     */
*             /* PROCESS.RESPONSE.ACTLU: THIS SEGMENT PROCESSES ACTLU*/
*             /* RESPONSES. IT FREES ANY ATTACHED RU'S, AND REBUILDS */
*             /* THE OPCE INTO AN NSL SESSION PRIME ELEMENT AND POSTS*/
*             /* IT TO IEDNSL                                        */
*             /*                                                     */
*             /*******************************************************/
*                                                               04S0641
*             IF TIC=VALTIC THEN    /* IF ANY ATTACHED RU    @YM05731*/
         TM    TIC(ROPCE),B'00000011'                           04S0641
         BNZ   @RF00641                                         04S0641
*               DO;                 /* THEN FREE IT                  */
*                 RPARM=OCUNIT;     /* POINT TO RU                   */
         L     RPARM,OCUNIT(,ROPCE)                             04S0643
*                 OCUNIT=PRUINTIC;  /* SET INVALID TIC               */
         MVC   OCUNIT(4,ROPCE),@CF01232                         04S0644
*                 CALL FREEBUF;     /* FREE ATTACHED RU              */
         L     @15,OPCFREBF(,ROPCAVT)                           04S0645
         BALR  @14,@15                                          04S0645
*               END;                                            04S0646
*             ELSE                                              04S0647
*               ;                                               04S0647
@RF00641 DS    0H                                               04S0648
*             IF OCPARM>0 THEN      /* IF GOOD RESPONSE              */
         LH    @11,OCPARM(,ROPCE)                               04S0648
         LTR   @11,@11                                          04S0648
         BNP   @RF00648                                         04S0648
*               DO;                 /* THEN SET UP PRIME ELEMENT     */
*                 RFY                                           04S0650
*                   IEDNSLD BASED(ROPCE);/* RESET BASE               */
*                 OPCCOPCE=OCPTRSAV;/* SET ORIG OPCE AS CURRENT      */
         L     @11,OCPTRSAV(,ROPCE)                             04S0651
         ST    @11,OPCCOPCE(,ROPCAVT)                           04S0651
*                 REG00=1;          /* SET DECREMENT COUNT           */
         LA    REG00,1                                          04S0652
*                 CALL DECRCT;      /* DECREMENT OPCADGOT            */
*                                                               04S0653
         L     @15,OPCDECR(,ROPCAVT)                            04S0653
         BALR  @14,@15                                          04S0653
*                 /***************************************************/
*                 /*                                                 */
*                 /* THIS SEGMENT SETS UP THE PRIME ELEMENT          */
*                 /*                                                 */
*                 /***************************************************/
*                                                               04S0654
*                                                               05S0654
*                 /***************************************************/
*                 /*                                                 */
*                 /* PROCESS.RESPONSE.ACTLU.PRIMELU: THIS SEGMENT    */
*                 /* REFORMATS THE OPCE INTO A NSL SESSION PRIME     */
*                 /* ELEMENT                                         */
*                 /*                                                 */
*                 /***************************************************/
*                                                               05S0654
*                 RFY                                           05S0654
*                   IEDOPRED BASED(ROPCE);/* SET BASE                */
*                 RPARM=OCTRMTBL;   /* SET TTCIN                     */
         LH    RPARM,OCTRMTBL(,ROPCE)                           05S0655
         N     RPARM,@CF01484                                   05S0655
*                 CALL TNTLKUP;     /* GET TTE ADDR                  */
         L     @15,AVTRNMPT(,RAVT)                              05S0656
         BALR  @14,@15                                          05S0656
*                 IEDQOPCE=''B;     /* SET OPCE = 0          @YM03750*/
         XC    IEDQOPCE(56,ROPCE),IEDQOPCE(ROPCE)               05S0657
*                 OPREPRI=PRIOPCTL; /* SET ROUTING PRIORITY          */
         MVI   OPREPRI(ROPCE),X'DC'                             05S0658
*                 OPREQCB=SAVTSPLN; /* SET QCB ADDR                  */
         L     @11,AVTSAVTP(,RAVT)                              05S0659
         MVC   OPREQCB(3,ROPCE),SAVTSPLN+1(@11)                 05S0659
*                 NSLREQTY=NSLSTRLU;/* SET REQUEST TYPE              */
         MVI   NSLREQTY(ROPCE),X'07'                            05S0660
*                 NSLTTEPT=RPARM;   /* SET TTE ADDR                  */
         ST    RPARM,NSLTTEPT(,ROPCE)                           05S0661
*                 OPCAQWD1=0;       /* CLEAR AQCTL LIST              */
         SLR   @11,@11                                          04S0662
         ST    @11,OPCAQWD1(,ROPCAVT)                           04S0662
*                 OPCAQWD2=0;                                   04S0663
         ST    @11,OPCAQWD2(,ROPCAVT)                           04S0663
*                 OPCAQFST=ROPCE;   /* SET PTR TO ELEMENT            */
         STCM  ROPCE,7,OPCAQFST(ROPCAVT)                        04S0664
*                 OPCAQSEC=ROPCE;   /* IN BOTH WORDS                 */
         STCM  ROPCE,7,OPCAQSEC(ROPCAVT)                        04S0665
*                 OPCAQREQ='0C'X;   /* SET REQUEST CODE              */
         MVI   OPCAQREQ(ROPCAVT),X'0C'                          04S0666
*                 OPCAQRQ2=EOL;     /* SET END OF LIST               */
         MVI   OPCAQRQ2(ROPCAVT),X'80'                          04S0667
*                 RPARM=ADDR(OPCAQCTL);/* POINT TO LIST              */
         LA    RPARM,OPCAQCTL(,ROPCAVT)                         04S0668
*                 SVC(102);         /* POST ELEMENT                  */
         SVC   102                                              04S0669
*                 ROPCE=OPCCOPCE;   /* RESET BASE                    */
         L     ROPCE,OPCCOPCE(,ROPCAVT)                         04S0670
*                 IF OCRESPCT<=0 THEN/* IF NOT AWAITING         04S0671
*                                      RESPONSES@YM03735             */
         LR    @11,ROPCE                                        04S0671
         AL    @11,@CF01495                                     04S0671
         CLC   OCRESPCT(2,@11),@CH00783                         04S0671
         BH    @RF00671                                         04S0671
*                   SUCCFLAG=ON;    /* THEN SET SUCCESSFUL           */
         OI    SUCCFLAG(RDATA),B'01000000'                      04S0672
*                 ELSE                                          04S0673
*                   DO;             /* ELSE SET UP EXIT              */
         B     @RC00671                                         04S0673
@RF00671 DS    0H                                               04S0674
*                     OPCMODID=CNTLMOD;/* SET EXIT = 00              */
         MVC   OPCMODID(2,ROPCAVT),@CC01438                     04S0674
*                     EXITFLAG=ON;  /* SET ON EXITFLAG               */
         OI    EXITFLAG(RDATA),B'10000000'                      04S0675
*                   END;                                        04S0676
*               END;                                            04S0677
*             ELSE                                              04S0678
*               IF OCPARM=OCRCBSIB THEN/* ELSE IF NOT OK, & NO SIB   */
         B     @RC00648                                         04S0678
@RF00648 CLC   OCPARM(2,ROPCE),@CH01028                         04S0678
         BNE   @RF00678                                         04S0678
*                 SIBFLAG=ON;       /* SET SIBFLAG                   */
         OI    SIBFLAG(RDATA),B'00100000'                       04S0679
*               ELSE                                            04S0680
*                 ;                                             04S0680
@RF00678 DS    0H                                               04S0681
*           END;                                                03S0681
*     END;                          /*                       @YM03705*/
*   ELSE                            /* ELSE IS RETURN FROM CKPT AND
*                                      THE OPCE IS           @YM03705*/
*     DO;                           /* TO BE DISCARDED       @YM03705*/
         B     @RC00353                                         03S0683
@RF00353 DS    0H                                               03S0684
*       REG00=1;                    /* SET DECREMENT COUNT TO 1 03S0684
*                                                            @YM03705*/
         LA    REG00,1                                          03S0684
*       CALL DECRCT;                /* DECREMENT OPCADGOT    @YM03705*/
         L     @15,OPCDECR(,ROPCAVT)                            03S0685
         BALR  @14,@15                                          03S0685
*       IF OCATTACH=ON THEN         /* IF ANY OPCE'S ATTACHED   03S0686
*                                                            @YM03705*/
         TM    OCATTACH(ROPCE),B'00000010'                      03S0686
         BNO   @RF00686                                         03S0686
*         OPCNEXT=OCELEM;           /* THEN SET UP AS NEXT TO PROCESS
*                                                            @YM03705*/
         L     @11,OCELEM(,ROPCE)                               03S0687
         ST    @11,OPCNEXT(,ROPCAVT)                            03S0687
*       ELSE                                                    03S0688
*         ;                         /*                       @YM03705*/
@RF00686 DS    0H                                               03S0689
*       RPARM=ROPCE;                /* POINT RPARM TO OPCE   @YM03705*/
         LR    RPARM,ROPCE                                      03S0689
*       CALL FREEBUF;               /* FREE THE OPCE         @YM03705*/
         L     @15,OPCFREBF(,ROPCAVT)                           03S0690
         BALR  @14,@15                                          03S0690
*       OPCMODID=CNTLMOD;           /* SET TO EXIT TO 00     @YM03705*/
         MVC   OPCMODID(2,ROPCAVT),@CC01438                     03S0691
*       EXITFLAG=ON;                /* SET FOR EXIT          @YM03705*/
         OI    EXITFLAG(RDATA),B'10000000'                      03S0692
*     END;                          /*                       @YM03705*/
*                                                               03S0694
*   /*****************************************************************/
*   /*                                                               */
*   /* PROCESS.EXITCODE: THIS SEGMENT PERFORMS END OF COMMAND        */
*   /* PROCESSING                                                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               03S0694
*   IF EXITFLAG=OFF THEN            /* BYPASS IF EXIT FLAG ON        */
@RC00353 TM    EXITFLAG(RDATA),B'10000000'                      03S0694
         BNZ   @RF00694                                         03S0694
*     DO;                                                       03S0695
*                                                               03S0695
*       /*************************************************************/
*       /*                                                           */
*       /* THIS SEGMENT PROCESSES UNSUCCESSFUL CMNDS                 */
*       /*                                                           */
*       /*************************************************************/
*                                                               03S0696
*                                                               04S0696
*       /*************************************************************/
*       /*                                                           */
*       /* PROCESS.EXITCODE.EXIT1: THIS SEGMENT PERFORMS UNSUCCESSFUL*/
*       /* EXIT PROCESSING                                           */
*       /*                                                           */
*       /*************************************************************/
*                                                               04S0696
*       RFY                                                     04S0696
*         REG11 RSTD;                                           04S0696
*       IF SUCCFLAG=OFF THEN        /* DO IT UNSUCCESSFUL            */
         TM    SUCCFLAG(RDATA),B'01000000'                      04S0697
         BNZ   @RF00697                                         04S0697
*         DO;                                                   04S0698
*           REG11=OCPTRSAV;         /* SET ORIG OPCE BASE            */
         L     REG11,OCPTRSAV(,ROPCE)                           04S0699
*           IF OCTRMTBL^=REG11->OCTRMTBL THEN/* IF NOT ORIG RESOURCE */
         CLC   OCTRMTBL(2,ROPCE),OCTRMTBL(REG11)                04S0700
         BE    @RF00700                                         04S0700
*             DO;                   /* THEN                          */
*               REG11=REG11-LENGTH(IEDQOPCN);/* BACK UP TO NEG PREFIX*/
         SL    REG11,@CF00045                                   04S0702
*               REG11->OCPARTAL=ON; /* SET ON PARTIAL ACT FLAG       */
         OI    OCPARTAL(REG11),B'00001000'                      04S0703
*               SUCCFLAG=ON;        /* AND SUCCESSFUL FLAG           */
         OI    SUCCFLAG(RDATA),B'01000000'                      04S0704
*             END;                                              04S0705
*           ELSE                                                04S0706
*             ;                                                 04S0706
@RF00700 DS    0H                                               04S0707
*           RWORK=OCPTRSAV;         /* SAVE ORIG OPCE PTR            */
         L     RWORK,OCPTRSAV(,ROPCE)                           04S0707
*           REG00=1;                /* SET DECREMENT CT              */
         LA    REG00,1                                          04S0708
*           CALL DECRCT;            /* DECREMENT OPCADGOT            */
         L     @15,OPCDECR(,ROPCAVT)                            04S0709
         BALR  @14,@15                                          04S0709
*           RPARM=ROPCE;            /* POINT TO REDRIVE OPCE         */
         LR    RPARM,ROPCE                                      04S0710
*           CALL FREEBUF;           /* AND FREE IT                   */
         L     @15,OPCFREBF(,ROPCAVT)                           04S0711
         BALR  @14,@15                                          04S0711
*           ROPCE=RWORK;            /* SET OPCE BASE                 */
         LR    ROPCE,RWORK                                      04S0712
*           IF OCRESPCT<=0 THEN     /* SET ORIG AS CURRENT   @YM03735*/
         LR    @09,ROPCE                                        04S0713
         AL    @09,@CF01495                                     04S0713
         CLC   OCRESPCT(2,@09),@CH00783                         04S0713
         BH    @RF00713                                         04S0713
*             OPCCOPCE=ROPCE;       /* IF NO OUTSTANDING RESPONSES   */
         ST    ROPCE,OPCCOPCE(,ROPCAVT)                         04S0714
*           ELSE                                                04S0715
*             DO;                   /* ELSE SET UP FOR EXIT          */
         B     @RC00713                                         04S0715
@RF00713 DS    0H                                               04S0716
*               OPCMODID=CNTLMOD;   /* SET EXIT TO 00                */
         MVC   OPCMODID(2,ROPCAVT),@CC01438                     04S0716
*               EXITFLAG=ON;        /* SET EXIT FLAG ON              */
         OI    EXITFLAG(RDATA),B'10000000'                      04S0717
*             END;                                              04S0718
*           RFY                                                 04S0719
*             REG11 UNRSTD;                                     04S0719
@RC00713 DS    0H                                               04S0720
*         END;                                                  04S0720
*       ELSE                                                    04S0721
*         ;                                                     04S0721
@RF00697 DS    0H                                               04S0722
*       IF EXITFLAG=OFF THEN        /* BYPASS IF EXIT1 SET EXIT FLAG */
         TM    EXITFLAG(RDATA),B'10000000'                      03S0722
         BNZ   @RF00722                                         03S0722
*         DO;                                                   03S0723
*                                                               03S0723
*           /*********************************************************/
*           /*                                                       */
*           /* THIS SEGMENT PERFORMS THE DISCARD AND IN PROGRESS     */
*           /* PROCESSING                                            */
*           /*                                                       */
*           /*********************************************************/
*                                                               03S0724
*                                                               04S0724
*           /*********************************************************/
*           /*                                                       */
*           /* PROCESS.EXITCODE.EXIT2: THIS SEGMENT TURNS OFF THE    */
*           /* IN-PROCESS BITS, AND SETS UP TO FREE THE OPCE AFTER   */
*           /* CKPT IF DISCARD IS INDICATED                          */
*           /*                                                       */
*           /*********************************************************/
*                                                               04S0724
*           REG00=0;                /* SET TO TURN OFF               */
         SLR   REG00,REG00                                      04S0724
*           RPARM=ROPCE;            /* POINT TO OPCE                 */
         LR    RPARM,ROPCE                                      04S0725
*           CALL PROGRTNE;          /* TURN OFF IN-PROG BITS         */
         L     @15,OPCPGCK(,ROPCAVT)                            04S0726
         BALR  @14,@15                                          04S0726
*           IF OCDCARD=ON THEN      /* IF TO BE DISCARDED            */
         LR    @11,ROPCE                                        04S0727
         AL    @11,@CF01496                                     04S0727
         TM    OCDCARD-2(@11),B'00000100'                       04S0727
         BNO   @RF00727                                         04S0727
*             DO;                   /* THEN                          */
*               OCOPTCDE=OCMODIFY;  /* SET OPCDE F RESTART   @YM06521*/
         MVI   OCOPTCDE(ROPCE),X'44'                            04S0729
*               OPCMODID=CHKMOD;    /* SET TO GO TO CKPT     @YM03705*/
         MVC   OPCMODID(2,ROPCAVT),@CC01454                     04S0730
*               OCWTG=THISMOD;      /* SET RETURN TO THIS MODULE
*                                                            @YM03705*/
         MVC   OCWTG(2,ROPCE),@CC01436                          04S0731
*               EXITFLAG=ON;        /* SET TO EXIT MODULE    @YM03705*/
         OI    EXITFLAG(RDATA),B'10000000'                      04S0732
*             END;                  /*                       @YM03705*/
*           ELSE                                                04S0734
*             ;                                                 04S0734
@RF00727 DS    0H                                               04S0735
*           IF EXITFLAG=OFF THEN    /* BYPASS IF EXIT2 SET EXIT FLAG */
         TM    EXITFLAG(RDATA),B'10000000'                      03S0735
         BNZ   @RF00735                                         03S0735
*             DO;                                               03S0736
*                                                               03S0736
*               /*****************************************************/
*               /*                                                   */
*               /* THIS SEGMENT DOES THE MSG SETUP                   */
*               /*                                                   */
*               /*****************************************************/
*                                                               03S0737
*                                                               04S0737
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESS.EXITCODE.EXIT3: THIS SEGMENT DOES THE     */
*               /* FINAL END OF CMND PROCESSING                      */
*               /*                                                   */
*               /*****************************************************/
*                                                               04S0737
*               IF SUCCFLAG=ON THEN /* IF CMND SUCCESSFUL            */
         TM    SUCCFLAG(RDATA),B'01000000'                      04S0737
         BNO   @RF00737                                         04S0737
*                 DO;               /* THEN                          */
*                   IF OCPARTAL=ON THEN/* IF PARTIAL ACTIVATE        */
         LR    @11,ROPCE                                        04S0739
         AL    @11,@CF01496                                     04S0739
         TM    OCPARTAL-2(@11),B'00001000'                      04S0739
         BNO   @RF00739                                         04S0739
*                     DO;                                       04S0740
*                       REG00=PARTMSG;/* SET PARTIAL ACT MSG         */
         LA    @11,530                                          04S0741
         LR    REG00,@11                                        04S0741
*                       OCPARM=PARTMSG;                         04S0742
         STH   @11,OCPARM(,ROPCE)                               04S0742
*                       OPCMODID=MSGMOD1;/* AND MSG MOD ID           */
         MVC   OPCMODID(2,ROPCAVT),@CC01432                     04S0743
*                     END;                                      04S0744
*                   ELSE            /* ELSE                          */
*                     DO;                                       04S0745
         B     @RC00739                                         04S0745
@RF00739 DS    0H                                               04S0746
*                       REG00=OKMSG;/* SET ACT COMPLETE MSG          */
         LA    @11,382                                          04S0746
         LR    REG00,@11                                        04S0746
*                       OCPARM=OKMSG;                           04S0747
         STH   @11,OCPARM(,ROPCE)                               04S0747
*                       OPCMODID=MSGMOD2;/* AND MSG MOD ID           */
         MVC   OPCMODID(2,ROPCAVT),@CC01434                     04S0748
*                     END;                                      04S0749
*                   IF OCWTG=0 THEN /* IF NOT INTERNAL CALL          */
@RC00739 LH    @11,OCWTG(,ROPCE)                                04S0750
         N     @11,@CF01484                                     04S0750
         LTR   @11,@11                                          04S0750
         BNZ   @RF00750                                         04S0750
*                     IF OCTOTE=OFF THEN/* AND NOT TOTE              */
         TM    OCTOTE(ROPCE),B'01000000'                        04S0751
         BNZ   @RF00751                                         04S0751
*                       DO;         /* THEN                          */
*                         OCWTG=OPCMODID;/* SETWTG FOR CKPT          */
         MVC   OCWTG(2,ROPCE),OPCMODID(ROPCAVT)                 04S0753
*                         OPCMODID=CHKMOD;/* SET EXIT TO CHECKPT     */
         MVC   OPCMODID(2,ROPCAVT),@CC01454                     04S0754
*                       END;                                    04S0755
*                     ELSE          /* ELSE                          */
*                       DO;         /* IS TOTE SO                    */
         B     @RC00751                                         04S0756
@RF00751 DS    0H                                               04S0757
*                         REG00=TOTEGOOD;/* SET OK RTN CODE          */
         SLR   REG00,REG00                                      04S0757
*                         OPCMODID=SECMOD;/* SET EXIT MOD TO 07      */
         MVC   OPCMODID(2,ROPCAVT),@CC01452                     04S0758
*                       END;                                    04S0759
*                   ELSE                                        04S0760
*                     DO;                                       04S0760
         B     @RC00750                                         04S0760
@RF00750 DS    0H                                               04S0761
*                       OPCMODID=OCWTG;/* SET EXIT TO INTERNAL CALLER*/
         MVC   OPCMODID(2,ROPCAVT),OCWTG(ROPCE)                 04S0761
*                       OCWTG=0;    /* AND CLEAR OCWTG               */
         SLR   @11,@11                                          04S0762
         STH   @11,OCWTG(,ROPCE)                                04S0762
*                     END;                                      04S0763
*                 END;                                          04S0764
*               ELSE                /* ELSE IS UNSUCCESSFUL          */
*                 DO;                                           04S0765
         B     @RC00737                                         04S0765
@RF00737 DS    0H                                               04S0766
*                   IF SIBFLAG=OFF THEN/* IF NOT SIB SHORTAGE        */
         TM    SIBFLAG(RDATA),B'00100000'                       04S0766
         BNZ   @RF00766                                         04S0766
*                     DO;                                       04S0767
*                       REG00=BADMSG;/* SET UNSUCCESSFUL MSG         */
         LA    @11,529                                          04S0768
         LR    REG00,@11                                        04S0768
*                       OCPARM=BADMSG;                          04S0769
         STH   @11,OCPARM(,ROPCE)                               04S0769
*                       OPCMODID=MSGMOD1;/* SET MSG MOD              */
         MVC   OPCMODID(2,ROPCAVT),@CC01432                     04S0770
*                     END;                                      04S0771
*                   ELSE            /* ELSE IS SIB SHORTAGE          */
*                     DO;           /* SO                            */
         B     @RC00766                                         04S0772
@RF00766 DS    0H                                               04S0773
*                       REG00=SIBMSG;/* SET SIB SHORTAGE MSG         */
         LA    @11,531                                          04S0773
         LR    REG00,@11                                        04S0773
*                       OCPARM=SIBMSG;                          04S0774
         STH   @11,OCPARM(,ROPCE)                               04S0774
*                       OPCMODID=MSGMOD1;/* AND MSG MOD              */
         MVC   OPCMODID(2,ROPCAVT),@CC01432                     04S0775
*                     END;                                      04S0776
*                   IF OCWTG=0 THEN /* IF NOT INTERNAL CALL          */
@RC00766 LH    @11,OCWTG(,ROPCE)                                04S0777
         N     @11,@CF01484                                     04S0777
         LTR   @11,@11                                          04S0777
         BNZ   @RF00777                                         04S0777
*                     IF OCTOTE=ON THEN/* AND IF TOTE                */
         TM    OCTOTE(ROPCE),B'01000000'                        04S0778
         BNO   @RF00778                                         04S0778
*                       DO;                                     04S0779
*                         REG00=TOTEBAD;/* SET RETURN CODE           */
         LA    REG00,4                                          04S0780
*                         OPCMODID=SECMOD;/* SET 07 EXIT             */
         MVC   OPCMODID(2,ROPCAVT),@CC01452                     04S0781
*                       END;                                    04S0782
*                     ELSE                                      04S0783
*                       ;                                       04S0783
@RF00778 DS    0H                                               04S0784
*                   ELSE            /* ELSE IS INTERNAL CALL         */
*                     DO;           /* SO                            */
         B     @RC00777                                         04S0784
@RF00777 DS    0H                                               04S0785
*                       OPCMODID=OCWTG;/* SET EXIT                   */
         MVC   OPCMODID(2,ROPCAVT),OCWTG(ROPCE)                 04S0785
*                       OCWTG=0;                                04S0786
         SLR   @11,@11                                          04S0786
         STH   @11,OCWTG(,ROPCE)                                04S0786
*                     END;                                      04S0787
*                 END;                                          04S0788
*             END;                                              03S0789
*           ELSE                                                03S0790
*             ;                                                 03S0790
@RF00735 DS    0H                                               03S0791
*         END;                                                  03S0791
*       ELSE                                                    03S0792
*         ;                                                     03S0792
@RF00722 DS    0H                                               03S0793
*     END;                                                      03S0793
*   ELSE                                                        03S0794
*     ;                                                         03S0794
@RF00694 DS    0H                                               03S0795
*                                                               02S0795
*   /*****************************************************************/
*   /*                                                               */
*   /* EPILOGUE: THIS SEGMENT COMPLETES THE EPILOGUE CODE THAT WAS   */
*   /* ALTERED BY THE MODULE PROCEDURE STATEMENT. THE XCTL ASSEMBLER */
*   /* MACRO INSTRUCTION IS USED BY THIS SEGMENT TO TRANSFER CONTROL */
*   /* TO THE NEXT MODULE THAT IS TO BE EXECUTED.                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0795
*   RFY                                                         02S0795
*     REG01 RSTD;                   /* RESTRICT THE PARAMETER   02S0795
*                                      REGISTER TO BE USED TO CONTAIN
*                                      THE ADDRESS OF THE OPERATOR
*                                      CONTROL ADDRESS VECTOR TABLE
*                                      FROM USE BY THE COMPILER      */
@RC00694 DS    0H                                               02S0796
*   REG01=ROPCAVT;                  /* SET THE PARAMETER REGISTER IN
*                                      PREPARATION TO TRANSFERRING
*                                      CONTROL TO THE NEXT MODULE    */
         LR    REG01,ROPCAVT                                    02S0796
*   IF OPCMODID=CNTLMOD THEN                                    02S0797
         CLC   OPCMODID(2,ROPCAVT),@CC01438                     02S0797
         BNE   @RF00797                                         02S0797
*     REG00=REG00-REG00;            /* CLEAR FOR 0010D@YM03724       */
         SLR   REG00,REG00                                      02S0798
*   GEN EXIT REFS(OPCXCTL,ROPCAVT) NOSEQFLOW SETS(REG15);       02S0799
@RF00797 DS    0H                                               02S0799
*                                   /*
         XCTL  SF=(E,OPCXCTL(ROPCAVT)) TRANSFER CONTROL MACRO
*   END IGCFE10D                                                01S0800
*                                                               01S0800
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (TAVTD   )                                       */
*/*%INCLUDE SYSLIB  (TNSLD   )                                       */
*/*%INCLUDE SYSLIB  (TOPCAVTD)                                       */
*/*%INCLUDE SYSLIB  (TOPCED  )                                       */
*/*%INCLUDE SYSLIB  (TOPRED  )                                       */
*/*%INCLUDE SYSLIB  (TPRIOR  )                                       */
*/*%INCLUDE SYSLIB  (TPRUD   )                                       */
*/*%INCLUDE SYSLIB  (TTRMD   )                                       */
*/*%INCLUDE SYSUT5  (RFY     )                                       */
*/*%INCLUDE SYSUT5  (DCL     )                                       */
*/*%INCLUDE SYSUT5  (PROLOGUE)                                       */
*/*%INCLUDE SYSUT5  (PROCESS )                                       */
*/*%INCLUDE SYSUT5  (INITIAL )                                       */
*/*%INCLUDE SYSUT5  (RESPONSE)                                       */
*/*%INCLUDE SYSUT5  (ACTLNKPU)                                       */
*/*%INCLUDE SYSUT5  (LNKPU1  )                                       */
*/*%INCLUDE SYSUT5  (GETNUM  )                                       */
*/*%INCLUDE SYSUT5  (COUNT   )                                       */
*/*%INCLUDE SYSUT5  (GETUNITS)                                       */
*/*%INCLUDE SYSUT5  (GETTER  )                                       */
*/*%INCLUDE SYSUT5  (LNKPU2  )                                       */
*/*%INCLUDE SYSUT5  (BLDER   )                                       */
*/*%INCLUDE SYSUT5  (BLDER1  )                                       */
*/*%INCLUDE SYSUT5  (BLDOPCE )                                       */
*/*%INCLUDE SYSUT5  (LISTADD )                                       */
*/*%INCLUDE SYSUT5  (BLDER2  )                                       */
*/*%INCLUDE SYSUT5  (ENDER   )                                       */
*/*%INCLUDE SYSUT5  (VARY    )                                       */
*/*%INCLUDE SYSUT5  (ACTLU   )                                       */
*/*%INCLUDE SYSUT5  (PRIMELU )                                       */
*/*%INCLUDE SYSUT5  (EXITCODE)                                       */
*/*%INCLUDE SYSUT5  (EXIT1   )                                       */
*/*%INCLUDE SYSUT5  (EXIT2   )                                       */
*/*%INCLUDE SYSUT5  (EXIT3   )                                       */
*/*%INCLUDE SYSUT5  (EPILOGUE)                                       */
*                                                               01S0800
*       ;                                                       01S0800
@DATA    DS    0H
@CH00783 DC    H'0'
@CH01440 DC    H'20'
@CH01028 DC    H'-2'
@DATD    DSECT
         DS    0F
IGCFE10D CSECT
         DS    0F
@CF00045 DC    F'8'
@CF00620 DC    F'14'
@CF01486 DC    F'-12'
@CF01487 DC    F'-10'
@CF01495 DC    F'-8'
@CF01496 DC    F'-6'
@CF01030 DC    F'-3'
@CF01232 DC    XL4'08000002'
@CF01484 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
@ENDDATD EQU   *
IGCFE10D CSECT
         NOPR  ((@ENDDATD-@DATD)*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC01432 DC    C'0H'
@CC01434 DC    C'0D'
@CC01436 DC    C'FE'
@CC01438 DC    C'00'
@CC01452 DC    C'07'
@CC01454 DC    C'06'
ADPATCH  DC    XL80'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
IEDQAPTR EQU   @04
IEDNSLP  EQU   @05
ROPCAVT  EQU   @02
ROPCE    EQU   @03
IEDPRUQP EQU   @03
IEDQTPTR EQU   @08
RTRM     EQU   @08
RAVT     EQU   @04
REG00    EQU   @00
REG01    EQU   @01
RPARM    EQU   @01
RWORK    EQU   @05
RDATA    EQU   @10
REG11    EQU   @11
REG12    EQU   @12
RSAVE    EQU   @13
REG14    EQU   @14
REG15    EQU   @15
REG02    EQU   @02
REG03    EQU   @03
REG04    EQU   @04
REG05    EQU   @05
REG06    EQU   @06
REG07    EQU   @07
REG08    EQU   @08
REG09    EQU   @09
REG10    EQU   @10
REG13    EQU   @13
IEDQAVTD EQU   0
AVTSAVEX EQU   IEDQAVTD+288
AVTREADD EQU   IEDQAVTD+380
AVTBUFSW EQU   IEDQAVTD+384
@NM00004 EQU   IEDQAVTD+388
AVTCKFLG EQU   @NM00004
AVTBASE  EQU   IEDQAVTD+412
AVTPKF   EQU   AVTBASE
AVTRNMPT EQU   IEDQAVTD+424
AVTNOLBF EQU   IEDQAVTD+454
AVTOSECB EQU   IEDQAVTD+492
AVTECB1  EQU   AVTOSECB
AVTHG02  EQU   IEDQAVTD+528
AVTDISP  EQU   IEDQAVTD+552
AVTHD    EQU   IEDQAVTD+556
AVTSCOPT EQU   AVTHD
AVTSAVTP EQU   IEDQAVTD+612
AVTSAVTF EQU   AVTSAVTP
AVTCKPEL EQU   IEDQAVTD+652
AVTCKRMV EQU   AVTCKPEL
AVTCKELF EQU   IEDQAVTD+680
AVTCKBYT EQU   IEDQAVTD+691
AVTHG01  EQU   IEDQAVTD+692
AVTCKLNK EQU   IEDQAVTD+696
AVTCRELE EQU   IEDQAVTD+708
AVTCCELE EQU   AVTCRELE
AVTCLRHI EQU   IEDQAVTD+716
AVTADBUF EQU   IEDQAVTD+720
AVTSYSER EQU   IEDQAVTD+728
AVTBFRFG EQU   IEDQAVTD+784
AVTCKPQB EQU   IEDQAVTD+804
AVTCKPTB EQU   AVTCKPQB
AVTCKPEC EQU   AVTCKPQB+4
AVTCKPCC EQU   AVTCKPEC
AVTOPCQB EQU   IEDQAVTD+816
AVTOPCOB EQU   AVTOPCQB
AVTOPCEC EQU   AVTOPCQB+4
AVTOPCCC EQU   AVTOPCEC
AVTOLTQB EQU   IEDQAVTD+828
AVTCWFL1 EQU   IEDQAVTD+924
AVTCWFL2 EQU   IEDQAVTD+925
AVTSUBT  EQU   IEDQAVTD+948
AVTIOTR  EQU   IEDQAVTD+949
AVTBIT1  EQU   IEDQAVTD+1050
AVTBIT2  EQU   IEDQAVTD+1051
AVTBIT3  EQU   IEDQAVTD+1052
AVTBIT4  EQU   IEDQAVTD+1136
@NM00086 EQU   IEDQAVTD+1232
IEDNSVTD EQU   0
SAVTDIAG EQU   IEDNSVTD
SAVTDIAF EQU   SAVTDIAG
SAVTLUSQ EQU   IEDNSVTD+88
SAVTSPLN EQU   IEDNSVTD+224
SAVTTCPU EQU   IEDNSVTD+238
SAVTZELM EQU   IEDNSVTD+270
SAVTRDRV EQU   IEDNSVTD+284
SAVTCKQB EQU   IEDNSVTD+300
SAVTCKTB EQU   SAVTCKQB
SAVTCKEC EQU   SAVTCKQB+4
SAVTCKCC EQU   SAVTCKEC
IEDNNSLD EQU   0
IEDNSLD  EQU   0
NSLPLCB  EQU   IEDNSLD+8
NSLGPCUS EQU   IEDNSLD+12
NSLERB   EQU   IEDNSLD+20
NSLESTAT EQU   NSLERB+8
NSLREQTY EQU   IEDNSLD+35
NSLGRPNM EQU   IEDNSLD+36
NSLTTEPT EQU   IEDNSLD+44
IEDQOPCD EQU   0
OPCAVTPT EQU   IEDQOPCD+8
OPCCOPCE EQU   IEDQOPCD+12
OPCPGCK  EQU   IEDQOPCD+40
OPCSAVE  EQU   IEDQOPCD+56
OPCWORK  EQU   IEDQOPCD+140
OPCAQCTL EQU   IEDQOPCD+180
OPCXCTL  EQU   IEDQOPCD+204
OPCLDNME EQU   IEDQOPCD+212
OPCMODID EQU   OPCLDNME+3
OPCNEXT  EQU   IEDQOPCD+272
OPCGETBF EQU   IEDQOPCD+276
OPCFREBF EQU   IEDQOPCD+280
OPCSPEC  EQU   IEDQOPCD+300
OPCADGOT EQU   IEDQOPCD+318
OPCBUFWT EQU   IEDQOPCD+348
OPCDECR  EQU   IEDQOPCD+352
OPCPWCOB EQU   IEDQOPCD+368
OPCPWQCB EQU   OPCPWCOB
OPCPWECB EQU   OPCPWCOB+4
IEDQOPCE EQU   0
OCLINK   EQU   IEDQOPCE
OCELEM   EQU   IEDQOPCE+4
OCELMPRI EQU   OCELEM
OCELMPTR EQU   OCELEM+1
OCUNIT   EQU   IEDQOPCE+8
OCRUDEST EQU   OCUNIT
OCCKPKEY EQU   OCRUDEST
OCSCAN   EQU   OCCKPKEY
OCOPTCDE EQU   IEDQOPCE+12
OCPRIFLG EQU   OCOPTCDE
OCSWITCH EQU   IEDQOPCE+13
OCFLAG   EQU   IEDQOPCE+14
OCTOTE   EQU   OCFLAG
OCATTACH EQU   OCFLAG
@NM00129 EQU   IEDQOPCE+16
OCDEST   EQU   @NM00129
OCREQVAL EQU   OCDEST+1
OCTRMTBL EQU   IEDQOPCE+20
OCLINENO EQU   IEDQOPCE+22
OCTIOT   EQU   OCLINENO
OCTRUNIT EQU   IEDQOPCE+24
OCRSID   EQU   OCTRUNIT
OCALSTAT EQU   OCRSID
OCREDRVE EQU   OCALSTAT
OCACTREQ EQU   OCALSTAT
OCPARM   EQU   IEDQOPCE+28
OCWTG    EQU   IEDQOPCE+30
OCBACKUP EQU   IEDQOPCE+32
OCBUFNED EQU   OCBACKUP
OCBUFGOT EQU   OCBACKUP+2
OCMODNME EQU   IEDQOPCE+40
OCIPLWA  EQU   OCMODNME
OCPTRSAV EQU   OCMODNME+4
OCCKDATA EQU   IEDQOPCE+48
OCRSTGTM EQU   OCCKDATA
IEDQOPCN EQU   0
OCLDNME  EQU   IEDQOPCN
OCLINTTE EQU   OCLDNME
OCRESPCT EQU   OCLINTTE
OCREQFLG EQU   OCLINTTE+2
OCADNCP  EQU   OCREQFLG
OCPARTAL EQU   OCREQFLG
OCDCARD  EQU   OCREQFLG
OCIDLE   EQU   OCREQFLG
OCPREFLG EQU   OCLINTTE+3
IEDOPRED EQU   0
OPREQCB  EQU   IEDOPRED+1
OPREPRI  EQU   IEDOPRED+4
OPRESAVE EQU   IEDOPRED+8
OPREFLG3 EQU   IEDOPRED+14
IEDPRUQD EQU   0
PRUTIC   EQU   IEDPRUQD+8
IEDPRUND EQU   0
PRURHTH  EQU   IEDPRUND
PRURH    EQU   PRURHTH
PRURHFG0 EQU   PRURH
PRURHFG1 EQU   PRURH+1
PRURHFG2 EQU   PRURH+2
PRUTH    EQU   PRURHTH+3
PRUFIDN  EQU   PRUTH
IEDQTRM  EQU   0
TRMSTATE EQU   IEDQTRM
TRMLOG   EQU   TRMSTATE
TRMINSEQ EQU   IEDQTRM+4
TLISTCNT EQU   TRMINSEQ
TRMOUTSQ EQU   IEDQTRM+6
TLISTEN  EQU   TRMOUTSQ
TRMDSORG EQU   TLISTEN
TRMALTD  EQU   IEDQTRM+8
TRMDEVFL EQU   IEDQTRM+10
TRMSTAT  EQU   IEDQTRM+12
IEDNTRM  EQU   0
TRMBYTE4 EQU   IEDNTRM
TRMBYTE3 EQU   IEDNTRM+1
TRMBYTE2 EQU   IEDNTRM+2
TRMREMB  EQU   TRMBYTE2
TRMINPG  EQU   TRMBYTE2
TRMBYTE1 EQU   IEDNTRM+3
TRMSCPRQ EQU   TRMBYTE1
TRMCOHRT EQU   IEDNTRM+4
TRMBYTE0 EQU   IEDNTRM+6
TRMSIBPT EQU   IEDNTRM+7
TRMTYPE  EQU   IEDNTRM+11
TRMSUBST EQU   IEDNTRM+12
PROGRTNE EQU   0
DECRCT   EQU   0
ALLOCBUF EQU   0
FREEBUF  EQU   0
TNTLKUP  EQU   0
WORKSP   EQU   0
FLAGS    EQU   WORKSP
EXITFLAG EQU   FLAGS
SUCCFLAG EQU   FLAGS
SIBFLAG  EQU   FLAGS
POSTSW   EQU   FLAGS
FINIFLAG EQU   FLAGS
SKIPSW   EQU   FLAGS
OPCAQWD  EQU   OPCAQCTL
OPCAQWD1 EQU   OPCAQWD
OPCAQREQ EQU   OPCAQWD1
OPCAQFST EQU   OPCAQWD1+1
OPCAQWD2 EQU   OPCAQWD+4
OPCAQRQ2 EQU   OPCAQWD2
OPCAQSEC EQU   OPCAQWD2+1
OPCAQWD3 EQU   OPCAQWD+8
OCCKPKY1 EQU   OCCKPKEY
OCCKPTYP EQU   OCCKPKY1
OCICACTN EQU   OCMODNME
OCICDADR EQU   OCICACTN
OCICSW   EQU   OCICDADR+3
TRMPRE1  EQU   TRMBYTE4
TRMNCP1  EQU   TRMBYTE4
TRMPRE   EQU   TRMBYTE3
TRMNCP   EQU   TRMBYTE3
TRMPU    EQU   TRMBYTE3
TRMLU    EQU   TRMBYTE3
TRMLINK  EQU   TRMBYTE3
TICFLD   EQU   OCUNIT
TIC      EQU   TICFLD+3
OCCIB    EQU   OCREQVAL
TRMOPT   EQU   IEDQTRM+20
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00155 EQU   TICFLD
@NM00154 EQU   TRMLINK
TRMLSTAT EQU   TRMLINK
TRMLINT  EQU   TRMLINK
TRMEPMOD EQU   TRMLINK
TRMLULOG EQU   TRMLU
TRMINERR EQU   TRMLU
TRMLUREQ EQU   TRMLU
TRMSESRQ EQU   TRMLU
TRMTDIFF EQU   TRMLU
TRMLUTM  EQU   TRMLU
TRMLUIT  EQU   TRMLU
TRMAUTO  EQU   TRMLU
TRMPCONT EQU   TRMPU
@NM00153 EQU   TRMPU
TRMNCONT EQU   TRMNCP
TRMQUCKN EQU   TRMNCP
TRMSLOWN EQU   TRMNCP
TRMSYGEN EQU   TRMNCP
TRMNCPCL EQU   TRMNCP
TRMIPLDM EQU   TRMNCP
TRMINOUT EQU   TRMPRE
TRMRDOUT EQU   TRMPRE
TRMNLOUT EQU   TRMPRE
TRMWROUT EQU   TRMPRE
TRMASNXI EQU   TRMPRE
TRMSTMM  EQU   TRMPRE
TRMCMODE EQU   TRMPRE
TRMSTPND EQU   TRMPRE
@NM00152 EQU   TRMNCP1
TRMINOP  EQU   TRMNCP1
TRMLYNCH EQU   TRMPRE1
TRMSPOUT EQU   TRMPRE1
TRMERLCK EQU   TRMPRE1
TRMQNPL  EQU   TRMPRE1
TRMSPACT EQU   TRMPRE1
TRMOCNI  EQU   TRMPRE1
TRMSESSN EQU   TRMPRE1
TRMCONT  EQU   TRMPRE1
OCICINAC EQU   OCICSW
@NM00134 EQU   OCICSW
OCICATST EQU   OCICDADR+1
OCICTYPE EQU   OCICDADR
@NM00133 EQU   OCCKPKY1
OCCKPENV EQU   OCCKPKY1
OCCKPRST EQU   OCCKPTYP
OCCKPNCP EQU   OCCKPTYP
OCCKPINC EQU   OCCKPTYP
OPCAQLST EQU   OPCAQWD3+1
OPCAQRQ3 EQU   OPCAQWD3
TRMRLMCT EQU   IEDNTRM+10
TRMCOHTG EQU   TRMSIBPT+1
TRMGPCNT EQU   TRMSIBPT
TRMBUFRD EQU   TRMBYTE0
TRMSNA   EQU   TRMBYTE0
TRMGP    EQU   TRMBYTE0
TRMDIAL  EQU   TRMBYTE0
@NM00151 EQU   TRMBYTE0
TRMOUTPT EQU   TRMBYTE0
TRMINPUT EQU   TRMBYTE0
TRMUDEF  EQU   TRMBYTE0
TRMSTOTE EQU   TRMBYTE1
TRMCKPRN EQU   TRMBYTE1
TRMTSATN EQU   TRMBYTE1
TRMTRACE EQU   TRMBYTE1
TRMSWBCK EQU   TRMBYTE1
TRMAUTOC EQU   TRMBYTE1
TRMINPTP EQU   TRMBYTE1
TRMWTNEG EQU   TRMSCPRQ
TRMWRBRK EQU   TRMBYTE2
TRMNOSND EQU   TRMBYTE2
TRMPREP  EQU   TRMBYTE2
TRMGPACT EQU   TRMBYTE2
TRMANDL  EQU   TRMBYTE2
TRMCLOSN EQU   TRMINPG
TRMRSACT EQU   TRMBYTE2
TRMOPTBL EQU   IEDQTRM+18
TRMOPNO  EQU   IEDQTRM+17
TRMCHCIN EQU   IEDQTRM+16
TRMSENSE EQU   TRMSTAT+3
TRMTEMPR EQU   TRMSTAT+2
TRMSIO   EQU   TRMSTAT
@NM00150 EQU   TRMDEVFL+1
TRMTPIN  EQU   TRMDEVFL+1
TRMNCPI  EQU   TRMDEVFL+1
TRMRNTRM EQU   TRMDEVFL+1
@NM00149 EQU   TRMDEVFL+1
TRMLMD   EQU   TRMDEVFL+1
TRMCONC  EQU   TRMDEVFL+1
TRMTSOB  EQU   TRMDEVFL
TRMBFDY  EQU   TRMDEVFL
TRMTBLK  EQU   TRMDEVFL
TRMSBLK  EQU   TRMDEVFL
TRMBLKS  EQU   TRMDEVFL
TRMADDC  EQU   TRMDEVFL
TRMDDIG  EQU   TRMDEVFL
TRMBUFS  EQU   TRMDEVFL
TRMPRILK EQU   TRMALTD
TRMLGB   EQU   TRMDSORG
TRMUTERM EQU   TLISTCNT
TRMDESTQ EQU   IEDQTRM+1
TRMSCNYN EQU   TRMSTATE
TRMOPTFN EQU   TRMSTATE
TRMHELDN EQU   TRMSTATE
TRMACPTN EQU   TRMSTATE
TRMPREF  EQU   TRMSTATE
TRMPROC  EQU   TRMLOG
TRMLIST  EQU   TRMLOG
TRMLINE  EQU   TRMSTATE
@NM00148 EQU   IEDPRUND+4
PRUTHEFI EQU   PRUFIDN
PRUTHUSS EQU   PRUFIDN
PRUTHEIU EQU   PRUFIDN
PRUTHBIU EQU   PRUFIDN
PRUTHTYE EQU   PRUFIDN
@NM00147 EQU   PRURHFG2
PRURHCSI EQU   PRURHFG2
@NM00146 EQU   PRURHFG2
PRURHCDI EQU   PRURHFG2
PRURHEB  EQU   PRURHFG2
PRURHBB  EQU   PRURHFG2
PRURHPI  EQU   PRURHFG1
@NM00145 EQU   PRURHFG1
PRURHER  EQU   PRURHFG1
PRURHDR2 EQU   PRURHFG1
@NM00144 EQU   PRURHFG1
PRURHDR1 EQU   PRURHFG1
PRURHEC  EQU   PRURHFG0
PRURHBC  EQU   PRURHFG0
PRURHSDI EQU   PRURHFG0
PRURHFI  EQU   PRURHFG0
@NM00143 EQU   PRURHFG0
PRURUCAT EQU   PRURHFG0
PRURHTYP EQU   PRURHFG0
PRUDATA  EQU   IEDPRUQD+12
PRUNUNIT EQU   PRUTIC+1
@NM00142 EQU   PRUTIC
@NM00141 EQU   IEDPRUQD+4
PRUDATCT EQU   IEDPRUQD+2
PRUTTCIN EQU   IEDPRUQD
@NM00140 EQU   OPREFLG3
OPREATCH EQU   OPREFLG3
@NM00139 EQU   OPREFLG3
OPREFLG2 EQU   IEDOPRED+13
OPREFLG1 EQU   IEDOPRED+12
OPRETIC  EQU   OPRESAVE
OPRELINK EQU   IEDOPRED+5
OPREKEY  EQU   IEDOPRED
@NM00138 EQU   OCLDNME+4
@NM00137 EQU   OCPREFLG
OCTOTEP  EQU   OCPREFLG
OCREPOST EQU   OCPREFLG
OCRSPSNT EQU   OCPREFLG
OCBFREQ  EQU   OCPREFLG
OCFORCE  EQU   OCREQFLG
@NM00136 EQU   OCREQFLG
@NM00135 EQU   OCREQFLG
OCFLUSHZ EQU   OCREQFLG
OCCKPTWA EQU   OCCKDATA+4
@NM00132 EQU   OCRSTGTM+2
OCCKDAT2 EQU   OCRSTGTM+1
OCCKDAT1 EQU   OCRSTGTM
OCPUADR  EQU   OCIPLWA+2
OCWTGSAV EQU   OCIPLWA
OCDVRDCT EQU   OCBACKUP+6
OCNCP    EQU   OCBACKUP+4
OCRESNUM EQU   OCPARM
OCSEQ    EQU   OCTRUNIT+2
@NM00131 EQU   OCRSID+1
OCNONE   EQU   OCALSTAT
OCSOME   EQU   OCALSTAT
OCALLFLG EQU   OCALSTAT
OCSEQIND EQU   OCALSTAT
OCDACTIP EQU   OCALSTAT
OCRENTRD EQU   OCALSTAT
OCWTGB   EQU   OCTIOT
@NM00130 EQU   @NM00129+2
OCCONID  EQU   OCDEST
OCRLN    EQU   IEDQOPCE+15
OCRESP   EQU   OCFLAG
OCSSCP   EQU   OCFLAG
OCOUTPUT EQU   OCFLAG
OCLINE   EQU   OCFLAG
OCMPP    EQU   OCFLAG
OCCONSOL EQU   OCFLAG
@NM00128 EQU   OCSWITCH
OCQUCKN  EQU   OCSWITCH
@NM00127 EQU   OCRUDEST+1
@NM00126 EQU   OCSCAN
OCNOTUCB EQU   OCSCAN
OCNONAME EQU   OCSCAN
OCALLRLN EQU   OCSCAN
OCDDNAME EQU   OCSCAN
OCDDNRLN EQU   OCSCAN
OCADDR   EQU   OCSCAN
OPCBOTTM EQU   IEDQOPCD+1188
OPCDSRWT EQU   IEDQOPCD+1184
@NM00125 EQU   IEDQOPCD+1100
@NM00124 EQU   IEDQOPCD+948
@NM00123 EQU   IEDQOPCD+940
@NM00122 EQU   IEDQOPCD+380
@NM00121 EQU   OPCPWCOB+9
@NM00120 EQU   OPCPWCOB+8
@NM00119 EQU   OPCPWECB+1
OPCPWCCC EQU   OPCPWECB
OPCPWCHN EQU   OPCPWQCB+1
OPCPWVTO EQU   OPCPWQCB
OPCWAITV EQU   IEDQOPCD+364
OPCTOTCK EQU   IEDQOPCD+360
OPCAPXTL EQU   IEDQOPCD+356
OPCWRKSP EQU   IEDQOPCD+320
OPCRQCNT EQU   IEDQOPCD+316
OPPOLSTP EQU   IEDQOPCD+312
OPCCKCIB EQU   IEDQOPCD+308
OPCEND   EQU   IEDQOPCD+307
OPCSTCBS EQU   IEDQOPCD+306
OPCHNEND EQU   IEDQOPCD+302
OPCOQSW  EQU   IEDQOPCD+301
@NM00118 EQU   OPCSPEC
@NM00117 EQU   OPCSPEC
@NM00116 EQU   OPCSPEC
@NM00115 EQU   OPCSPEC
OPCFRMCA EQU   OPCSPEC
OPCRSTRT EQU   OPCSPEC
OPCPART  EQU   OPCSPEC
OPCALTD  EQU   OPCSPEC
OPCBFEND EQU   IEDQOPCD+296
OPCBFIRS EQU   IEDQOPCD+292
OPCAVBUF EQU   IEDQOPCD+290
OPCIPLCT EQU   IEDQOPCD+289
OPCCLNTS EQU   IEDQOPCD+288
OPCHA8   EQU   IEDQOPCD+286
OPCBFREQ EQU   IEDQOPCD+284
OPCFMDFC EQU   IEDQOPCD+268
OPCSCNC  EQU   IEDQOPCD+264
OPCHORTG EQU   IEDQOPCD+260
OPCHORT  EQU   IEDQOPCD+256
OPCCKPTL EQU   IEDQOPCD+252
OPCCKPTF EQU   IEDQOPCD+248
OPCWAITA EQU   IEDQOPCD+244
OPCWAITR EQU   IEDQOPCD+240
OPCWAITP EQU   IEDQOPCD+236
OPCWAITO EQU   IEDQOPCD+232
OPCWAITN EQU   IEDQOPCD+228
OPCWAITL EQU   IEDQOPCD+224
OPCWAITC EQU   IEDQOPCD+220
@NM00114 EQU   OPCLDNME+5
@NM00113 EQU   OPCLDNME
OPCWAIT  EQU   IEDQOPCD+192
OPCCKERB EQU   IEDQOPCD+164
OPCBFERB EQU   IEDQOPCD+148
OPCFLAG2 EQU   IEDQOPCD+147
OPCFLAG1 EQU   IEDQOPCD+146
OPCWRKSZ EQU   IEDQOPCD+144
OPCRSAVE EQU   IEDQOPCD+132
OPCQCBAD EQU   IEDQOPCD+128
OPCTRMWA EQU   IEDQOPCD+52
OPCPSTWT EQU   IEDQOPCD+48
OPCTNTEA EQU   IEDQOPCD+44
OPCLCB   EQU   IEDQOPCD+36
@NM00112 EQU   IEDQOPCD+32
OPCIPLAD EQU   IEDQOPCD+28
OPCTOFLK EQU   IEDQOPCD+24
OPCOPTLK EQU   IEDQOPCD+20
OPCDCBLK EQU   IEDQOPCD+16
OPCDOUBL EQU   IEDQOPCD
@NM00111 EQU   NSLGRPNM+4
NSLOPCEP EQU   NSLGRPNM
@NM00110 EQU   IEDNSLD+34
NSLUNCNT EQU   NSLERB+12
NSLBUFFR EQU   NSLERB+9
@NM00109 EQU   NSLESTAT
NSLMPPI  EQU   NSLESTAT
@NM00108 EQU   NSLESTAT
NSLELINK EQU   NSLERB+5
NSLERBPR EQU   NSLERB+4
NSLERQCB EQU   NSLERB
NSLFLGBK EQU   IEDNSLD+19
NSLPRIBK EQU   IEDNSLD+18
NSLTTCIN EQU   IEDNSLD+16
NSLCTTRM EQU   IEDNSLD+13
@NM00107 EQU   NSLGPCUS
NSLDRDRV EQU   NSLGPCUS
NSLSDIAL EQU   NSLGPCUS
NSLNGPSL EQU   NSLGPCUS
NSLGPTSP EQU   NSLGPCUS
NSLNGPST EQU   NSLGPCUS
NSLSAVE  EQU   IEDNSLD+9
@NM00106 EQU   NSLPLCB
NSLPLCBR EQU   NSLPLCB
NSLOPRE  EQU   IEDNSLD
NSLSAVE2 EQU   IEDNNSLD+4
NSLSAVE1 EQU   IEDNNSLD
SAVTLLCB EQU   IEDNSVTD+316
SAVTBITN EQU   IEDNSVTD+312
@NM00105 EQU   SAVTCKQB+8
@NM00104 EQU   SAVTCKEC+1
@NM00103 EQU   SAVTCKCC
SAVTCKPO EQU   SAVTCKCC
SAVTCKWA EQU   SAVTCKCC
SAVTCKCH EQU   SAVTCKTB+1
SAVTCKVT EQU   SAVTCKTB
@NM00102 EQU   IEDNSVTD+297
SAVTRDFG EQU   SAVTRDRV+12
@NM00101 EQU   SAVTRDRV+5
SAVTRDPY EQU   SAVTRDRV+4
SAVTRDQB EQU   SAVTRDRV+1
SAVTRDKY EQU   SAVTRDRV
SAVTNID  EQU   IEDNSVTD+280
SAVTDVAS EQU   IEDNSVTD+276
SAVTPLSZ EQU   IEDNSVTD+274
@NM00100 EQU   IEDNSVTD+273
SAVTSUBL EQU   IEDNSVTD+272
@NM00099 EQU   SAVTZELM+1
SAVTSUBM EQU   SAVTZELM
SAVTMHDX EQU   IEDNSVTD+268
SAVTNAT1 EQU   IEDNSVTD+266
SAVTSH20 EQU   IEDNSVTD+264
SAVTLCBS EQU   IEDNSVTD+260
SAVTRNMP EQU   IEDNSVTD+256
SAVTTNTX EQU   IEDNSVTD+252
SAVTNAX  EQU   IEDNSVTD+248
SAVTSUBV EQU   IEDNSVTD+247
SAVTSUBA EQU   IEDNSVTD+246
SAVTSIBC EQU   IEDNSVTD+244
SAVTBSM  EQU   IEDNSVTD+240
SAVTSCPT EQU   SAVTTCPU
SAVTRQTG EQU   IEDNSVTD+236
SAVTRQCH EQU   IEDNSVTD+232
SAVTMAND EQU   IEDNSVTD+228
SAVTNADL EQU   IEDNSVTD+222
SAVTNATL EQU   IEDNSVTD+220
SAVTMHTB EQU   IEDNSVTD+216
SAVTSSMH EQU   IEDNSVTD+212
SAVTQRS  EQU   IEDNSVTD+208
SAVTRQIN EQU   IEDNSVTD+204
SAVTDFCO EQU   IEDNSVTD+200
SAVTSAO  EQU   IEDNSVTD+196
SAVTSARI EQU   IEDNSVTD+192
SAVTSAC  EQU   IEDNSVTD+188
SAVTSAI  EQU   IEDNSVTD+184
SAVTCSCI EQU   IEDNSVTD+180
SAVTSSRP EQU   IEDNSVTD+176
SAVTSSRQ EQU   IEDNSVTD+172
SAVTSCLU EQU   IEDNSVTD+168
SAVTXTRQ EQU   IEDNSVTD+164
SAVTMVBF EQU   IEDNSVTD+160
@NM00098 EQU   IEDNSVTD+148
SAVTIPCQ EQU   IEDNSVTD+144
@NM00097 EQU   IEDNSVTD+136
SAVTXFMI EQU   IEDNSVTD+132
@NM00096 EQU   IEDNSVTD+124
SAVTXFMO EQU   IEDNSVTD+120
@NM00095 EQU   IEDNSVTD+116
SAVTSSSR EQU   IEDNSVTD+112
SAVTSCPQ EQU   IEDNSVTD+108
SAVTSLCB EQU   IEDNSVTD+104
SAVTLUSR EQU   IEDNSVTD+100
@NM00094 EQU   SAVTLUSQ+8
SAVTLUSP EQU   SAVTLUSQ+4
SAVTLUSB EQU   SAVTLUSQ
@NM00093 EQU   IEDNSVTD+84
SAVTSAT  EQU   IEDNSVTD+80
SAVTNAT  EQU   IEDNSVTD+76
SAVTCLUP EQU   IEDNSVTD+72
SAVTPIUT EQU   IEDNSVTD+68
SAVTRNTA EQU   IEDNSVTD+64
SAVTDNIR EQU   IEDNSVTD+60
SAVTCNIR EQU   IEDNSVTD+56
SAVTFLDH EQU   IEDNSVTD+52
SAVTSRTN EQU   IEDNSVTD+48
SAVTSREQ EQU   IEDNSVTD+44
SAVTFAIL EQU   IEDNSVTD+42
SAVTSUSE EQU   IEDNSVTD+40
SAVTSIB  EQU   IEDNSVTD+36
SAVTPRTN EQU   IEDNSVTD+32
@NM00092 EQU   IEDNSVTD+28
SAVTWH20 EQU   IEDNSVTD+26
SAVTPWT  EQU   IEDNSVTD+24
SAVTPRTQ EQU   IEDNSVTD+20
SAVTPREQ EQU   IEDNSVTD+16
SAVTPH20 EQU   IEDNSVTD+14
SAVTPUSE EQU   IEDNSVTD+12
SAVTPLCB EQU   IEDNSVTD+8
SAVTPOOL EQU   IEDNSVTD+4
SAVTPRMT EQU   SAVTDIAF
SAVTVIRT EQU   SAVTDIAF
AVTCPBNO EQU   IEDQAVTD+1244
AVTHRESS EQU   IEDQAVTD+1243
@NM00091 EQU   IEDQAVTD+1242
@NM00090 EQU   IEDQAVTD+1241
@NM00089 EQU   IEDQAVTD+1240
@NM00088 EQU   IEDQAVTD+1237
@NM00087 EQU   IEDQAVTD+1236
AVTHRESE EQU   @NM00086
AVTRADDR EQU   IEDQAVTD+1228
AVTNADDR EQU   IEDQAVTD+1224
AVTHRESN EQU   IEDQAVTD+1220
AVTVOLRN EQU   IEDQAVTD+1216
AVTTOTNN EQU   IEDQAVTD+1212
AVTTRCYN EQU   IEDQAVTD+1208
AVTRCTRN EQU   IEDQAVTD+1204
AVTNOVON EQU   IEDQAVTD+1200
AVTADEBN EQU   IEDQAVTD+1196
AVTVOLRR EQU   IEDQAVTD+1192
AVTTOTNR EQU   IEDQAVTD+1188
AVTTRCYR EQU   IEDQAVTD+1184
AVTRCTRR EQU   IEDQAVTD+1180
AVTNOVOR EQU   IEDQAVTD+1176
AVTADEBR EQU   IEDQAVTD+1172
AVTLODPT EQU   IEDQAVTD+1168
AVTIOBN  EQU   IEDQAVTD+1164
AVTIOBR  EQU   IEDQAVTD+1160
AVTCPBPT EQU   IEDQAVTD+1156
AVTFCPB  EQU   IEDQAVTD+1152
@NM00085 EQU   IEDQAVTD+1148
AVTINCPQ EQU   IEDQAVTD+1144
@NM00084 EQU   IEDQAVTD+1140
@NM00083 EQU   IEDQAVTD+1137
@NM00082 EQU   AVTBIT4
@NM00081 EQU   AVTBIT4
@NM00080 EQU   AVTBIT4
@NM00079 EQU   AVTBIT4
@NM00078 EQU   AVTBIT4
@NM00077 EQU   AVTBIT4
@NM00076 EQU   AVTBIT4
AVTRUFTN EQU   AVTBIT4
@NM00075 EQU   IEDQAVTD+1132
AVTNOBFQ EQU   IEDQAVTD+1128
@NM00074 EQU   IEDQAVTD+1124
AVTDKENQ EQU   IEDQAVTD+1120
@NM00073 EQU   IEDQAVTD+1116
AVTDKAPQ EQU   IEDQAVTD+1112
AVTCOPY  EQU   IEDQAVTD+1108
AVTIA    EQU   IEDQAVTD+1104
AVTFL    EQU   IEDQAVTD+1100
@NM00072 EQU   IEDQAVTD+1096
AVTNCPBQ EQU   IEDQAVTD+1092
AVTTOTNC EQU   IEDQAVTD+1088
AVTCMAX  EQU   IEDQAVTD+1084
AVTCMIN  EQU   IEDQAVTD+1080
AVTHM02  EQU   IEDQAVTD+1076
AVTOPCIN EQU   IEDQAVTD+1074
AVTDCTLN EQU   IEDQAVTD+1072
AVTOPMSK EQU   IEDQAVTD+1068
AVTDDFT  EQU   IEDQAVTD+1064
AVTSTEAL EQU   IEDQAVTD+1060
AVTOPTN  EQU   IEDQAVTD+1056
AVTDSKCT EQU   IEDQAVTD+1054
AVTCKRST EQU   IEDQAVTD+1053
AVTSTAN  EQU   AVTBIT3
AVTSTACN EQU   AVTBIT3
AVTSTAIN EQU   AVTBIT3
AVTSTAYN EQU   AVTBIT3
AVTOLTBN EQU   AVTBIT3
AVTTSAB  EQU   AVTBIT3
AVTRFULN EQU   AVTBIT3
AVTRECVN EQU   AVTBIT3
@NM00071 EQU   AVTBIT2
@NM00070 EQU   AVTBIT2
AVTOPEIN EQU   AVTBIT2
AVTSTRTN EQU   AVTBIT2
AVTTOPOL EQU   AVTBIT2
AVTCOPYN EQU   AVTBIT2
AVTREUSN EQU   AVTBIT2
AVTEXTSC EQU   AVTBIT2
AVTDISKN EQU   AVTBIT1
AVTQUCKN EQU   AVTBIT1
AVTCLOSN EQU   AVTBIT1
AVTREADN EQU   AVTBIT1
AVTDLAYN EQU   AVTBIT1
AVTAQTAN EQU   AVTBIT1
AVTTSON  EQU   AVTBIT1
AVTAPLKN EQU   AVTBIT1
AVTDUMBR EQU   IEDQAVTD+1048
AVTDLQX  EQU   IEDQAVTD+1046
AVTINTLV EQU   IEDQAVTD+1044
AVTSMCNT EQU   IEDQAVTD+1042
AVTAVFCT EQU   IEDQAVTD+1040
AVTOPCON EQU   IEDQAVTD+1038
AVTOPCNT EQU   IEDQAVTD+1036
AVTLNCNT EQU   IEDQAVTD+1034
AVTKEYLE EQU   IEDQAVTD+1032
AVTHA16  EQU   IEDQAVTD+1030
AVTHA7   EQU   IEDQAVTD+1028
AVTHA4   EQU   IEDQAVTD+1026
AVTHA3   EQU   IEDQAVTD+1024
AVTHA2   EQU   IEDQAVTD+1022
AVTGETMS EQU   IEDQAVTD+1021
@NM00069 EQU   IEDQAVTD+1020
AVTGETMD EQU   IEDQAVTD+1016
AVTGETMN EQU   IEDQAVTD+1012
AVTCWTOT EQU   IEDQAVTD+1008
AVTCWINT EQU   IEDQAVTD+956
AVTDTRAP EQU   IEDQAVTD+952
@NM00068 EQU   IEDQAVTD+950
@NM00067 EQU   AVTIOTR
AVTIOTRH EQU   AVTIOTR
AVTIOTRE EQU   AVTIOTR
@NM00066 EQU   AVTSUBT
AVTSUBPT EQU   AVTSUBT
AVTSUBON EQU   AVTSUBT
AVTAFE30 EQU   IEDQAVTD+944
AVTAFE20 EQU   IEDQAVTD+940
AVTAFE10 EQU   IEDQAVTD+936
AVTCWEC2 EQU   IEDQAVTD+932
AVTCWPM2 EQU   IEDQAVTD+928
AVTCWTS2 EQU   IEDQAVTD+927
AVTCWTS1 EQU   IEDQAVTD+926
AVTCWCLD EQU   AVTCWFL2
AVTCWRAP EQU   AVTCWFL2
@NM00065 EQU   AVTCWFL2
@NM00064 EQU   AVTCWFL2
@NM00063 EQU   AVTCWFL2
@NM00062 EQU   AVTCWFL2
@NM00061 EQU   AVTCWFL2
AVTCWACT EQU   AVTCWFL2
@NM00060 EQU   AVTCWFL1
@NM00059 EQU   AVTCWFL1
@NM00058 EQU   AVTCWFL1
@NM00057 EQU   AVTCWFL1
@NM00056 EQU   AVTCWFL1
@NM00055 EQU   AVTCWFL1
@NM00054 EQU   AVTCWFL1
AVTCOMWN EQU   AVTCWFL1
AVTCWEC1 EQU   IEDQAVTD+920
AVTCWPM1 EQU   IEDQAVTD+916
AVTCAREA EQU   IEDQAVTD+912
AVTFZERO EQU   IEDQAVTD+908
AVTCADDR EQU   IEDQAVTD+904
AVTCOREC EQU   IEDQAVTD+900
@NM00053 EQU   IEDQAVTD+892
AVTCPBCB EQU   IEDQAVTD+888
@NM00052 EQU   IEDQAVTD+880
AVTDSIOB EQU   IEDQAVTD+876
@NM00051 EQU   IEDQAVTD+868
AVTCPRMB EQU   IEDQAVTD+864
@NM00050 EQU   IEDQAVTD+856
AVTCLOSB EQU   IEDQAVTD+852
@NM00049 EQU   IEDQAVTD+844
AVTACTIB EQU   IEDQAVTD+840
@NM00048 EQU   IEDQAVTD+836
AVTOLTEB EQU   IEDQAVTD+832
AVTOLTCH EQU   AVTOLTQB+1
AVTOLTVT EQU   AVTOLTQB
@NM00047 EQU   AVTOPCQB+8
@NM00046 EQU   AVTOPCEC+1
@NM00045 EQU   AVTOPCCC
AVTOPCPO EQU   AVTOPCCC
AVTOPCWA EQU   AVTOPCCC
AVTOPCCH EQU   AVTOPCOB+1
AVTOPCVT EQU   AVTOPCOB
@NM00044 EQU   AVTCKPQB+9
AVTCKPTS EQU   AVTCKPQB+8
@NM00043 EQU   AVTCKPEC+1
@NM00042 EQU   AVTCKPCC
AVTCKPPO EQU   AVTCKPCC
AVTCKPWA EQU   AVTCKPCC
AVTCKPCH EQU   AVTCKPTB+1
AVTCKPVT EQU   AVTCKPTB
@NM00041 EQU   IEDQAVTD+796
AVTBFRTB EQU   IEDQAVTD+792
@NM00040 EQU   IEDQAVTD+788
AVTSELCH EQU   IEDQAVTD+785
AVTBFRTN EQU   AVTBFRFG
AVTBFREB EQU   IEDQAVTD+780
AVTTIMQ  EQU   IEDQAVTD+776
@NM00039 EQU   IEDQAVTD+772
AVTIMQPS EQU   IEDQAVTD+768
AVTINOUT EQU   IEDQAVTD+766
AVTREFTM EQU   IEDQAVTD+764
@NM00038 EQU   IEDQAVTD+752
AVTDELYB EQU   IEDQAVTD+748
AVTOCQPT EQU   IEDQAVTD+744
AVTTSOPT EQU   IEDQAVTD+740
AVTSUPPT EQU   IEDQAVTD+736
AVTCBQCB EQU   IEDQAVTD+732
AVTMSGS  EQU   IEDQAVTD+729
@NM00037 EQU   AVTSYSER
@NM00036 EQU   AVTSYSER
@NM00035 EQU   AVTSYSER
@NM00034 EQU   AVTSYSER
@NM00033 EQU   AVTSYSER
@NM00032 EQU   AVTSYSER
AVTCMAXN EQU   AVTSYSER
AVTCMINN EQU   AVTSYSER
AVT2260L EQU   IEDQAVTD+724
AVTABEPL EQU   AVTADBUF
AVTHFF   EQU   AVTCLRHI+2
@NM00031 EQU   AVTCLRHI
AVTCCLNK EQU   AVTCRELE+5
AVTCCPRI EQU   AVTCRELE+4
AVTCCQCB EQU   AVTCCELE+1
AVTCCKEY EQU   AVTCCELE
AVTDELAD EQU   IEDQAVTD+704
AVTDELEM EQU   IEDQAVTD+700
AVTBSX   EQU   AVTCKLNK
AVTOPETR EQU   AVTHG01
@NM00030 EQU   AVTCKBYT
AVTCKONQ EQU   AVTCKBYT
@NM00029 EQU   AVTCKBYT
@NM00028 EQU   AVTCKBYT
@NM00027 EQU   AVTCKBYT
@NM00026 EQU   AVTCKBYT
@NM00025 EQU   AVTCKBYT
@NM00024 EQU   AVTCKBYT
AVTOPERT EQU   IEDQAVTD+690
AVTOPXCL EQU   IEDQAVTD+688
AVTOPERL EQU   IEDQAVTD+687
@NM00023 EQU   IEDQAVTD+686
AVTCKTIM EQU   IEDQAVTD+684
AVTCKELV EQU   IEDQAVTD+682
AVTCPRCD EQU   IEDQAVTD+681
AVTWARMN EQU   AVTCKELF
AVTCRTLN EQU   AVTCKELF
AVTCPIPN EQU   AVTCKELF
AVTCCLCN EQU   AVTCKELF
AVTCINCN EQU   AVTCKELF
@NM00022 EQU   AVTCKELF
AVTCMCPN EQU   AVTCKELF
AVTNQBCK EQU   AVTCKELF
AVTCKQAD EQU   IEDQAVTD+677
AVTSCBSZ EQU   IEDQAVTD+676
@NM00021 EQU   IEDQAVTD+672
AVTCKELE EQU   IEDQAVTD+668
@NM00020 EQU   AVTCKPEL+8
AVTCKRLK EQU   AVTCKPEL+5
AVTCKRPR EQU   AVTCKPEL+4
AVTCKRMQ EQU   AVTCKRMV+1
AVTCKRKY EQU   AVTCKRMV
AVTHK    EQU   IEDQAVTD+648
AVTHI    EQU   IEDQAVTD+644
AVTIOT   EQU   IEDQAVTD+640
AVTNX    EQU   IEDQAVTD+636
AVTTONE  EQU   IEDQAVTD+632
AVTA3TL  EQU   IEDQAVTD+628
AVTDMECB EQU   IEDQAVTD+624
AVTABEND EQU   IEDQAVTD+618
AVTPLCBN EQU   IEDQAVTD+616
@NM00019 EQU   AVTSAVTP+1
@NM00018 EQU   AVTSAVTF
AVTSNA   EQU   AVTSAVTF
AVTONSNA EQU   AVTSAVTF
AVTVTMCP EQU   AVTSAVTF
@NM00017 EQU   IEDQAVTD+608
AVTCMBSS EQU   IEDQAVTD+604
AVTRCV   EQU   IEDQAVTD+600
AVTSEND  EQU   IEDQAVTD+596
AVTCSCH  EQU   IEDQAVTD+592
AVTQ1    EQU   IEDQAVTD+588
AVTE7    EQU   IEDQAVTD+584
AVTHB    EQU   IEDQAVTD+580
AVTR1    EQU   IEDQAVTD+576
AVTBZ    EQU   IEDQAVTD+572
AVTEZ    EQU   IEDQAVTD+568
AVTEC    EQU   IEDQAVTD+564
AVTEW    EQU   IEDQAVTD+560
AVTNDIAL EQU   AVTSCOPT
AVTN2741 EQU   AVTSCOPT
AVTCONCO EQU   AVTSCOPT
AVTCONC  EQU   AVTSCOPT
AVTCMBUF EQU   AVTSCOPT
AVTAPDMP EQU   AVTSCOPT
@NM00016 EQU   AVTSCOPT
AVTHA    EQU   AVTDISP
AVTEA    EQU   IEDQAVTD+548
AVTAX    EQU   IEDQAVTD+544
AVTA3    EQU   IEDQAVTD+540
AVTGD    EQU   IEDQAVTD+536
AVTAL    EQU   IEDQAVTD+532
AVTOLTST EQU   AVTHG02
AVTE8    EQU   IEDQAVTD+524
AVTUI    EQU   IEDQAVTD+520
AVTCOMPT EQU   IEDQAVTD+516
AVTCRSRF EQU   IEDQAVTD+512
@NM00015 EQU   IEDQAVTD+508
AVTKA02  EQU   IEDQAVTD+504
AVTOPTPT EQU   IEDQAVTD+500
AVTPCBPT EQU   IEDQAVTD+496
@NM00014 EQU   AVTECB1
AVTCOMP  EQU   AVTECB1
@NM00013 EQU   AVTECB1
AVTOPECA EQU   IEDQAVTD+488
AVTOLECA EQU   IEDQAVTD+484
AVTCKECA EQU   IEDQAVTD+480
AVTCWECA EQU   IEDQAVTD+476
AVTCWTCB EQU   IEDQAVTD+472
AVTOLTCB EQU   IEDQAVTD+468
AVTOCTCB EQU   IEDQAVTD+464
AVTCKTCB EQU   IEDQAVTD+460
AVTAS    EQU   IEDQAVTD+456
AVTNCKPR EQU   IEDQAVTD+453
AVTCIB   EQU   IEDQAVTD+452
AVTSPLPT EQU   IEDQAVTD+448
AVTMVBFR EQU   IEDQAVTD+444
AVTSBTA  EQU   IEDQAVTD+440
AVTRARTN EQU   IEDQAVTD+436
AVTBSCAN EQU   IEDQAVTD+432
AVTRDYA  EQU   IEDQAVTD+428
AVTDISTR EQU   IEDQAVTD+420
AVTPARM3 EQU   IEDQAVTD+416
@NM00012 EQU   AVTPKF
@NM00011 EQU   AVTPKF
@NM00010 EQU   AVTPKF
AVTFTCHF EQU   AVTPKF
@NM00009 EQU   AVTPKF
@NM00008 EQU   AVTPKF
@NM00007 EQU   AVTPKF
@NM00006 EQU   AVTPKF
AVTPARM  EQU   IEDQAVTD+408
AVTEXS2A EQU   IEDQAVTD+402
AVTEXA2S EQU   IEDQAVTD+396
AVTOCGET EQU   IEDQAVTD+392
AVTCKAVT EQU   @NM00004+1
@NM00005 EQU   AVTCKFLG
AVTCKHLT EQU   AVTCKFLG
AVTCKREQ EQU   AVTCKFLG
AVTCKENV EQU   AVTCKFLG
AVTCKNAC EQU   AVTCKFLG
AVTCKTAC EQU   AVTCKFLG
AVTBUENT EQU   IEDQAVTD+386
@NM00003 EQU   IEDQAVTD+385
AVTFULLT EQU   AVTBUFSW
AVTUNCON EQU   AVTBUFSW
@NM00002 EQU   AVTBUFSW
AVTBUFTR EQU   AVTREADD
AVTREADY EQU   IEDQAVTD+376
AVTRACE  EQU   IEDQAVTD+372
AVTTCB   EQU   IEDQAVTD+368
AVTPASWD EQU   IEDQAVTD+360
AVTCTLCH EQU   IEDQAVTD+352
AVTDOUBL EQU   IEDQAVTD+344
AVTDOUBX EQU   IEDQAVTD+336
AVTDPARM EQU   IEDQAVTD+332
AVTCSTCS EQU   IEDQAVTD+328
AVTDLQ   EQU   AVTSAVEX+32
@NM00001 EQU   AVTSAVEX
AVTSAVE4 EQU   IEDQAVTD+216
AVTSAVE3 EQU   IEDQAVTD+144
AVTSAVE2 EQU   IEDQAVTD+72
AVTSAVE1 EQU   IEDQAVTD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00372 EQU   @RC00363
@RC00503 EQU   @RC00499
@RC00589 EQU   @RC00353
@RC00361 EQU   @RC00353
@RC00648 EQU   @RC00353
@RC00722 EQU   @RC00694
@RC00376 EQU   @RC00372
@RC00671 EQU   @RC00648
@RC00735 EQU   @RC00722
@RC00404 EQU   @RC00376
@RC00737 EQU   @RC00735
@RC00777 EQU   @RC00735
@RC00411 EQU   @RC00404
@RC00750 EQU   @RC00737
@RC00751 EQU   @RC00750
@ENDDATA EQU   *
         END   IGCFE10D,(C'PLS0751',0701,78129)
