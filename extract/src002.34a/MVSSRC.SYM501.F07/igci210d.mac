         TITLE 'IGCI210D - ICHNG SERVICE ROUTINE FOR 3705              *
                        '
IGCI210D CSECT ,                                                   0001
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
IGCI210D  IEDHJN  AFTERHJN,HJN
*   ROPCAVT=REG1;                   /* SETUP OP CNTRL AVT    @Y17XARW*/
         LR    ROPCAVT,REG1                                        0355
*   PARAM=OCCIB;                    /* SETUP PARAMETER LIST ADDR   0356
*                                                            @Y17XARW*/
         L     @12,OPCCOPCE(,ROPCAVT)                              0356
         L     @15,OCCIB-1(,@12)                                   0356
         LA    @15,0(,@15)                                         0356
         ST    @15,PARAM(,ROPCAVT)                                 0356
*   AVT=OPCAVTPT;                   /* SETUP TCAM AVT        @Y17XARW*/
         L     AVT,OPCAVTPT(,ROPCAVT)                              0357
*   RSAVE=ADDR(OPCSAVE);            /* SETUP SAVEAREA ADDR   @Y17XARW*/
         LA    RSAVE,OPCSAVE(,ROPCAVT)                             0358
*   ELMNT=PARAM;                    /* GET OP CONTRL         @SA71947
*                                      ELEMENT ADDRESS       @SA71947*/
         ST    @15,ELMNT(,ROPCAVT)                                 0359
*   IF REG0=ZERO                    /* IS PARAMETER REG ZERO         */
*     THEN                                                         0360
         LTR   REG0,REG0                                           0360
         BZ    @RT00360                                            0360
*     GO TO AICHNG1;                /* YES, NORMAL PROCESSING        */
*   WORKAREA(1:12)=WORKAREA(1:12)&&WORKAREA(1:12);/* CLEAR WORK-     */
         XC    WORKAREA(12,@15),WORKAREA(@15)                      0362
*   WORKAREA(17:28)=WORKAREA(17:28)&&WORKAREA(17:28);/* AREA ZERO    */
         XC    WORKAREA+16(12,@15),WORKAREA+16(@15)                0363
*   WENTCD='04'X;                   /* SET ENTRY CODE FOR ICHNG      */
         MVI   WENTCD(@15),X'04'                                   0364
*   WANSCD='10'X;                   /* SET ANSWER CODE               */
         MVI   WANSCD(@15),X'10'                                   0365
*   WFROM=OCACTCD;                  /* SET USERS WORKAREA ADDRESS    */
         L     @14,OCACTCD(,@12)                                   0366
         ST    @14,WFROM(,@15)                                     0366
*   REG1=OCTRMTBL;                  /* GET LINES TNT OFFSET  @Y17XARW*/
         LH    REG1,OCTRMTBL(,@12)                                 0367
         N     REG1,@CF01689                                       0367
*   CALL IEDQTNT;                   /* GET TTE ADDRESS       @Y17XARW*/
         L     @15,AVTRNMPT(,AVT)                                  0368
         BALR  @14,@15                                             0368
*   WTO=REG1;                       /* SAVE TERM ENTRY ADDR  @Y17XARW*/
         L     @12,PARAM(,ROPCAVT)                                 0369
         ST    REG1,WTO(,@12)                                      0369
*   OPCMODID=MODNAME2;              /* SET NAME FOR XCTL     @Y17XARW*/
         MVC   OPCMODID(2,ROPCAVT),MODNAME2                        0370
*   GO TO XCTL;                     /* GO TO NEXT MODULE             */
         B     XCTL                                                0371
*AICHNG1:                                                          0372
*   UNIT=OCUNIT;                    /* SETUP RESPONSE UNIT ADDR    0372
*                                                            @Y17XARW*/
AICHNG1  L     @12,OPCCOPCE(,ROPCAVT)                              0372
         L     UNIT,OCUNIT(,@12)                                   0372
*   RWRK1=UNIT;                     /* SAVE FIRST UNIT ADDRESS       */
         LR    RWRK1,UNIT                                          0373
*   ENDUNIT=UNIT+AVTKEYLE+12;       /* END OF UNIT ADDRESS           */
         L     @12,OPCWORK(,ROPCAVT)                               0374
         LR    @15,UNIT                                            0374
         AH    @15,AVTKEYLE(,AVT)                                  0374
         AL    @15,@CF00262                                        0374
         ST    @15,ENDUNIT(,@12)                                   0374
*   RAREA=ELMNT->WFROM;             /* ADDRESS OF USER WORKAREA      */
         L     @12,ELMNT(,ROPCAVT)                                 0375
         L     RAREA,WFROM(,@12)                                   0375
*REPLACE:                                                          0376
*   RFROM=RAREA+8;                  /* POINTER TO FIRST ENTRY        */
REPLACE  LA    @12,8                                               0376
         LR    RFROM,RAREA                                         0376
         ALR   RFROM,@12                                           0376
*   IF PRURHSDI=ON×                 /* SENSE DATA OR         @Y17XARW*/
*       BDUSYRSP^='60'X THEN        /* WAS RESPONSE BAD?     @Y17XARW*/
         LCR   @12,@12                                             0377
         ALR   @12,UNIT                                            0377
         TM    PRURHSDI(@12),B'00000100'                           0377
         BO    @RT00377                                            0377
         CLI   BDUSYRSP+12(UNIT),X'60'                             0377
         BNE   @RT00377                                            0377
*     GOTO ERREXIT;                 /* GOTO ERROR EXIT       @Y17XARW*/
*   RDATA=ADDR(IEDBDU)+LENGTH(IEDBDU)+LVLBYTE;/* ADDR OF RESPONSE  0379
*                                      DATA                  @Y17XARW*/
         LA    @12,19                                              0379
         ALR   @12,UNIT                                            0379
         ST    @12,RDATA(,ROPCAVT)                                 0379
*   GENERATE;                                                      0380
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   IF RDATA->FIELD(1)=ZERO         /* IS THIS SWITCH ID     @Y17XARW*/
*     THEN                                                         0381
         L     @12,RDATA(,ROPCAVT)                                 0381
         CLI   FIELD(@12),0                                        0381
         BE    @RT00381                                            0381
*     GO TO SWTCHID;                /* YES, GO TO PROPER ROUTINE     */
*   NMBENT=RAREA->FIELD(1);         /* NUMBER OF ENTRIES TO PROCESS  */
         L     @15,OPCWORK(,ROPCAVT)                               0383
         IC    @14,FIELD(,RAREA)                                   0383
         STC   @14,NMBENT(,@15)                                    0383
*   NUMPROC=ZERO;                   /* NUMBER PROCESSED IS ZERO      */
         MVI   NUMPROC(@15),X'00'                                  0384
*   NUMTNT=ZERO;                    /* CLEAR TNT COUNT       @Y17XARW*/
         MVI   NUMTNT(@15),X'00'                                   0385
*   IF RDATA->FIELD='02'X THEN                                     0386
         CLI   FIELD(@12),X'02'                                    0386
         BNE   @RF00386                                            0386
*     OCICTYPE=OCICMUL;             /* IF THIS IS MULTIPT, SET     0387
*                                      INDICATOR IN OPCE     @Y17XARW*/
         L     @12,OPCCOPCE(,ROPCAVT)                              0387
         MVI   OCICTYPE(@12),X'02'                                 0387
*   ELSE                                                           0388
*     OCICTYPE=OCICLES;             /* ELSE INDICATE A LEASED LINE 0388
*                                                            @Y17XARW*/
         B     @RC00386                                            0388
@RF00386 L     @12,OPCCOPCE(,ROPCAVT)                              0388
         MVI   OCICTYPE(@12),X'01'                                 0388
*   IF AVTSTAIN=ON THEN                                            0389
@RC00386 TM    AVTSTAIN(AVT),B'00000100'                           0389
         BNO   @RF00389                                            0389
*     DO;                           /* IF CHKPT WILL BE TAKEN      0390
*                                                            @Y17XARW*/
*       IF RDATA->FIELD='02'X       /* THEN IF MULTIPT LINE  @Y17XARW*/
*         THEN                                                     0391
         L     @12,RDATA(,ROPCAVT)                                 0391
         CLI   FIELD(@12),X'02'                                    0391
         BNE   @RF00391                                            0391
*         DO;                       /* THEN DO               @Y17XARW*/
*           NUMDEV=RDATA->MULCURNB; /* GET NUMBER OF DEVICE ENTRIES
*                                                            @Y17XARW*/
         L     @15,OPCWORK(,ROPCAVT)                               0393
         SLR   @14,@14                                             0393
         IC    @14,MULCURNB(,@12)                                  0393
         STH   @14,NUMDEV(,@15)                                    0393
*           REG1=(NUMDEV+1)*THREE;  /* GET LENGTH OF ENTRIES @Y17XARW*/
         AL    @14,@CF00088                                        0394
         MH    @14,@CH00094                                        0394
         LR    REG1,@14                                            0394
*           REG0=ZERO;              /* CLEAR REMAINDER REG   @Y17XARW*/
         SLR   REG0,REG0                                           0395
*           RLNGTH=AVTKEYLE;        /* SETUP UNIT LENGTH     @Y17XARW*/
         LH    RLNGTH,AVTKEYLE(,AVT)                               0396
*           GEN REFS(REG0,REG1);                                   0397
         DR   REG0,RLNGTH      CALCULATE NUMBER OF UNITS
*           IF REG0^=ZERO THEN                                     0398
         LTR   REG0,REG0                                           0398
         BZ    @RF00398                                            0398
*             REG1=REG1+1;          /* IF THERE IS REMAINDER,      0399
*                                      INCREMENT NUMBER BY ONE     0399
*                                                            @Y17XARW*/
         LA    REG1,1(,REG1)                                       0399
*           NUMTNT=REG1;            /* SAVE NUMBER OF UNITS  @Y17XARW*/
@RF00398 L     @12,OPCWORK(,ROPCAVT)                               0400
         STC   REG1,NUMTNT(,@12)                                   0400
*         END;                      /*                       @Y17XARW*/
*       REG0=ZERO;                  /* CLEAR UNIT COUNTER    @Y17XARW*/
@RF00391 SLR   REG0,REG0                                           0402
*       REG1=UNIT;                  /* SETUP FIRST UNIT      @Y17XARW*/
         LR    REG1,UNIT                                           0403
*CHKEND:                            /*                       @Y17XARW*/
*       GEN REFS(REG1,OPCHNEND,ROPCAVT);                           0404
CHKEND   DS    0H                                                  0404
      EX  REG1,OPCHNEND(,ROPCAVT) END OF UNIT
*       BC(SEVEN,GETBUFFS);         /* YES, GET BUFFERS      @Y17XARW*/
         BC    7,GETBUFFS                                          0405
*       REG0=REG0+ONE;              /* INCREMENT UNIT COUNT  @Y17XARW*/
         AL    REG0,@CF00088                                       0406
*       REG1=REG1->PRFTIC;          /* GET NEXT UNIT ADDRESS @Y17XARW*/
         L     REG1,PRFTIC(,REG1)                                  0407
*       GOTO CHKEND;                /* CONTINUE CHECK FOR END OF UNIT
*                                                            @Y17XARW*/
         B     CHKEND                                              0408
*GETBUFFS:                          /*                       @Y17XARW*/
*       REG1=REG0+NUMTNT;           /* SETUP NUMBER OF BUFFS @Y17XARW*/
GETBUFFS L     @12,OPCWORK(,ROPCAVT)                               0409
         LR    REG1,REG0                                           0409
         SLR   @15,@15                                             0409
         IC    @15,NUMTNT(,@12)                                    0409
         ALR   REG1,@15                                            0409
*       CALL ALLOCBUF;              /* GET BUFFERS           @Y17XARW*/
         L     @15,OPCGETBF(,ROPCAVT)                              0410
         BALR  @14,@15                                             0410
*       OCPTRSAV=REG1;              /* SAVE ADDRESS OF FIRST BUFFER
*                                                            @Y17XARW*/
         L     @12,OPCCOPCE(,ROPCAVT)                              0411
         ST    REG1,OCPTRSAV(,@12)                                 0411
*       IF RDATA->FIELD='02'X       /* IF THIS IS A MULTIPT LINE   0412
*                                                            @Y17XARW*/
*         THEN                                                     0412
         L     @12,RDATA(,ROPCAVT)                                 0412
         CLI   FIELD(@12),X'02'                                    0412
         BNE   @RF00412                                            0412
*         DO;                       /*                       @Y17XARW*/
*           ICTNTNO=NUMDEV;         /* INITIALIZE NUMBER OF ENTRIES
*                                                            @Y17XARW*/
         L     @12,OPCCOPCE(,ROPCAVT)                              0414
         L     @12,OCPTRSAV(,@12)                                  0414
         L     @15,OPCWORK(,ROPCAVT)                               0414
         LH    @14,NUMDEV(,@15)                                    0414
         STH   @14,ICTNTNO(,@12)                                   0414
*           ICTNTNU=NUMTNT;         /* INITIALIZE NUMBER OF UNITS  0415
*                                                            @Y17XARW*/
         IC    @14,NUMTNT(,@15)                                    0415
         STC   @14,ICTNTNU(,@12)                                   0415
*           TNTOPTR=ADDR(ICTNTOFF); /* SET PTR TO FIRST ENTRY      0416
*                                                            @Y17XARW*/
         LA    @14,ICTNTOFF(,@12)                                  0416
         ST    @14,TNTOPTR(,@15)                                   0416
*           TNTOLEN=AVTKEYLE-THREE; /* SET NUMBER OF BYTES LEFT IN 0417
*                                      UNIT                  @Y17XARW*/
         LH    @14,AVTKEYLE(,AVT)                                  0417
         SL    @14,@CF00094                                        0417
         STH   @14,TNTOLEN(,@15)                                   0417
*           TNTOUNT=OCPTRSAV;       /* SET FIRST UNIT ADDRESS      0418
*                                                            @Y17XARW*/
         ST    @12,TNTOUNT(,@15)                                   0418
*         END;                      /*                       @Y17XARW*/
*     END;                          /*                       @Y17XARW*/
@RF00412 DS    0H                                                  0421
*NXTENT:                                                           0421
*   IF OCICTYPE=OCICMUL THEN        /* IS THIS MULTIPT LINE  @Y17XARW*/
@RF00389 DS    0H                                                  0421
NXTENT   L     @12,OPCCOPCE(,ROPCAVT)                              0421
         CLI   OCICTYPE(@12),2                                     0421
         BNE   @RF00421                                            0421
*     RDATA=RDATA+2;                /* CHECK TYPE OF LINE    @Y17XARW*/
         LA    @12,2                                               0422
         AL    @12,RDATA(,ROPCAVT)                                 0422
         ST    @12,RDATA(,ROPCAVT)                                 0422
*   RDATA=RDATA+ONE;                /* POINT TO DEVICE RECORD      0423
*                                                            @Y17XARW*/
@RF00421 LA    @12,1                                               0423
         AL    @12,RDATA(,ROPCAVT)                                 0423
         ST    @12,RDATA(,ROPCAVT)                                 0423
*   GENERATE;                                                      0424
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   NEXTRCD=RDATA+RDATA->FCOUNT;    /* ADDRESS NEXT DEV RECORD     0425
*                                                            @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0425
         L     @15,RDATA(,ROPCAVT)                                 0425
         SLR   @14,@14                                             0425
         IC    @14,FCOUNT(,@15)                                    0425
         ALR   @14,@15                                             0425
         ST    @14,NEXTRCD(,@12)                                   0425
*   IF RFROM->FIELD(1)='FE'X        /* IS THIS END OF ACTIVE ENTRIES */
*     THEN                                                         0426
         CLI   FIELD(RFROM),X'FE'                                  0426
         BNE   @RF00426                                            0426
*     DO;                           /* YES,                          */
*       OCICINAC=ON;                /* INACTIVE ENTRY PROCESSED    0428
*                                                            @Y17XARW*/
         L     @12,OPCCOPCE(,ROPCAVT)                              0428
         OI    OCICINAC(@12),B'00000001'                           0428
*       RFROM=RFROM+ONE;            /* POINT TO ENTRY                */
         LA    RFROM,1(,RFROM)                                     0429
*     END;                                                         0430
*   RCOUNT=RFROM->FIELD(WIDTH);     /* DEVICE RECORD NUMBER          */
@RF00426 L     @12,OPCWORK(,ROPCAVT)                               0431
         SLR   @15,@15                                             0431
         IC    @15,WIDTH(,RAREA)                                   0431
         BCTR  @15,0                                               0431
         SLR   @14,@14                                             0431
         IC    @14,FIELD(@15,RFROM)                                0431
         ST    @14,RCOUNT(,@12)                                    0431
*   IF RCOUNT>NMBENT×               /* IS INDEX TOO LARGE OR         */
*       RCOUNT=ZERO                 /* IS INDEX ZERO                 */
*     THEN                                                         0432
         SLR   @15,@15                                             0432
         IC    @15,NMBENT(,@12)                                    0432
         CR    @14,@15                                             0432
         BH    @RT00432                                            0432
         LTR   @14,@14                                             0432
         BZ    @RT00432                                            0432
*     GO TO ERREXIT;                /* YES, QUIT PROCESSING          */
*RCRDSRCH:                                                         0434
*   RCOUNT=RCOUNT-ONE;              /* REDUCE BY ONE                 */
RCRDSRCH L     @12,OPCWORK(,ROPCAVT)                               0434
         L     @15,RCOUNT(,@12)                                    0434
         BCTR  @15,0                                               0434
         ST    @15,RCOUNT(,@12)                                    0434
*   IF RCOUNT=ZERO                  /* IS THIS CORRECT DEVICE RECORD */
*     THEN                                                         0435
         LTR   @15,@15                                             0435
         BZ    @RT00435                                            0435
*     GO TO MOVPOLL;                /* YES, PROCESS IT               */
*   RDATA=NEXTRCD;                  /* POINT TO NXT RECORD   @Y17XARW*/
         L     @15,NEXTRCD(,@12)                                   0437
         ST    @15,RDATA(,ROPCAVT)                                 0437
*   NEXTRCD=RDATA+RDATA->FCOUNT;    /* ADDRESS OF NEXT DEVICE RECORD
*                                                            @Y17XARW*/
         SLR   @14,@14                                             0438
         IC    @14,FCOUNT(,@15)                                    0438
         ALR   @14,@15                                             0438
         ST    @14,NEXTRCD(,@12)                                   0438
*   GENERATE;                                                      0439
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   IF NUMTNT^=ZERO THEN            /* ARE THERE TNT OFSETS  @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0440
         CLI   NUMTNT(@12),0                                       0440
         BE    @RF00440                                            0440
*     DO;                           /*                       @Y17XARW*/
*       TNTOPTR=TNTOPTR+THREE;      /* BUMP TO NEXT TNT ENTRY      0442
*                                                            @Y17XARW*/
         LA    @15,3                                               0442
         L     @14,TNTOPTR(,@12)                                   0442
         ALR   @14,@15                                             0442
         ST    @14,TNTOPTR(,@12)                                   0442
*       TNTOLEN=TNTOLEN-THREE;      /* DECREMENT TOTAL LENGTH      0443
*                                                            @Y17XARW*/
         LCR   @15,@15                                             0443
         AH    @15,TNTOLEN(,@12)                                   0443
         STH   @15,TNTOLEN(,@12)                                   0443
*       CALL TNTCHK;                /* CHECK NEXT TNT        @Y17XARW*/
         BAL   @14,TNTCHK                                          0444
*     END;                          /*                       @Y17XARW*/
*   GO TO RCRDSRCH;                 /* GO CHECK IT                   */
         B     RCRDSRCH                                            0446
*MOVPOLL:                                                          0447
*   RDATA=RDATA+ONE;                /* BUMP TO RSID          @Y17XARW*/
MOVPOLL  LA    @12,1                                               0447
         AL    @12,RDATA(,ROPCAVT)                                 0447
         ST    @12,RDATA(,ROPCAVT)                                 0447
*   GENERATE;                                                      0448
*                                       /* CHECK END OF UNIT @ZA01116*/
         BAL   REG12,CHKUNIT            /*  EXCEEDED         @ZA01116*/
*   REG1=RDATA->FIELD(1);           /* GET FIRST RSID BYTE   @Y17XARW*/
         L     @12,RDATA(,ROPCAVT)                                 0449
         SLR   REG1,REG1                                           0449
         IC    REG1,FIELD(,@12)                                    0449
*   RDATA=RDATA+ONE;                /* BUMP TO SECOND        @Y17XARW*/
         AL    @12,@CF00088                                        0450
         ST    @12,RDATA(,ROPCAVT)                                 0450
*   GENERATE;                                                      0451
*                                       /* CHECK END OF UNIT @ZA01116*/
         BAL   REG12,CHKUNIT            /*  EXCEEDED         @ZA01116*/
*   REG1=REG1*256+RDATA->FIELD(1);  /* GET 2ND BYTE OF RSID  @Y17XARW*/
         LR    @12,REG1                                            0452
         SLA   @12,8                                               0452
         L     @15,RDATA(,ROPCAVT)                                 0452
         SLR   @14,@14                                             0452
         IC    @14,FIELD(,@15)                                     0452
         ALR   @12,@14                                             0452
         LR    REG1,@12                                            0452
*   RFY                                                            0453
*     REG15 RSTD;                   /*                       @Y17XARW*/
*   CALL IEDIAP03;                  /* CONVERT NETWORK ADDR TO A TNT
*                                      OFFSET                @Y17XARW*/
         L     @12,AVTSAVTP(,AVT)                                  0454
         L     @15,SAVTNAX(,@12)                                   0454
         BALR  @14,@15                                             0454
*   REG1=REG15;                     /* SET TNT OFFSET        @Y17XARW*/
         LR    REG1,REG15                                          0455
*   RFY                                                            0456
*     REG15 UNRSTD;                 /*                       @Y17XARW*/
*   IF REG1=ZERO                    /* IS TNT VALID                  */
*     THEN                                                         0457
         LTR   REG1,REG1                                           0457
         BZ    @RT00457                                            0457
*     GO TO UPDFROM;                /* NO, GO UPDATE POINTER         */
*   OFFSET=REG1;                    /* SAVE TNT OFFSET       @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0459
         STH   REG1,OFFSET(,@12)                                   0459
*   CALL IEDQTNT;                   /* GET TTE ADDRESS       @Y17XARW*/
         L     @15,AVTRNMPT(,AVT)                                  0460
         BALR  @14,@15                                             0460
*   RTRM=REG1-LENGTH(IEDNTRM);      /* SAVE TTE PREFIX ADDRESS     0461
*                                                            @Y17XARW*/
         LR    @12,REG1                                            0461
         SL    @12,@CF01098                                        0461
         ST    @12,RTRM(,ROPCAVT)                                  0461
*   RDATA=RDATA+ONE;                /* POINT TO WIDTH        @Y17XARW*/
         LA    @12,1                                               0462
         AL    @12,RDATA(,ROPCAVT)                                 0462
         ST    @12,RDATA(,ROPCAVT)                                 0462
*   GENERATE;                                                      0463
*                                       /* CHECK END OF UNIT @ZA01116*/
         BAL   REG12,CHKUNIT            /*  EXCEEDED         @ZA01116*/
*   IF RDATA->FIELD(1)^=WIDTH-1     /* IS THE WIDTH CORRECT  @Y17XARW*/
*     THEN                                                         0464
         L     @12,RDATA(,ROPCAVT)                                 0464
         SLR   @15,@15                                             0464
         IC    @15,FIELD(,@12)                                     0464
         SLR   @12,@12                                             0464
         IC    @12,WIDTH(,RAREA)                                   0464
         BCTR  @12,0                                               0464
         CR    @15,@12                                             0464
         BE    @RF00464                                            0464
*     IF RDATA->FIELD(1)=ZERO       /* NO, THEN IS IT ZERO   @Y17XARW*/
*       THEN                                                       0465
         LTR   @15,@15                                             0465
         BZ    @RT00465                                            0465
*       GOTO UPDFROM;               /* YES, UPDATE PTR       @ZA01116*/
*     ELSE                                                         0467
*       GOTO ERREXIT;               /* NO, ERROR             @ZA01116*/
         B     ERREXIT                                             0467
*   RLNGTH=RDATA->FIELD(1);         /* GET THE DATA COUNT    @Y17XARW*/
@RF00464 L     @12,RDATA(,ROPCAVT)                                 0468
         SLR   RLNGTH,RLNGTH                                       0468
         IC    RLNGTH,FIELD(,@12)                                  0468
*   RDATA=RDATA+ONE;                /* POINT TO POLLING      @Y17XARW
*                                      CHARACTERS            @ZA01116*/
         AL    @12,@CF00088                                        0469
         ST    @12,RDATA(,ROPCAVT)                                 0469
*   GENERATE;                                                      0470
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*MOVIT:                                                            0471
*   RDATA->FIELD(1)=RFROM->FIELD(1);/* MOVE ONE BYTE         @Y17XARW*/
MOVIT    L     @12,RDATA(,ROPCAVT)                                 0471
         MVC   FIELD(1,@12),FIELD(RFROM)                           0471
*   RLNGTH=RLNGTH-ONE;              /* REDUCE AMOUNT TO MOVE         */
         BCTR  RLNGTH,0                                            0472
*   RDATA=RDATA+ONE;                /* POINT TO NEXT BYTE    @Y17XARW*/
         AL    @12,@CF00088                                        0473
         ST    @12,RDATA(,ROPCAVT)                                 0473
*   GENERATE;                                                      0474
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   RFROM=RFROM+ONE;                /* POINT TO NEXT BYTE            */
         LA    @12,1                                               0475
         ALR   RFROM,@12                                           0475
*   IF RLNGTH^=ZERO                 /* HAS ALL BEEN MOVED            */
*     THEN                                                         0476
         LTR   RLNGTH,RLNGTH                                       0476
         BNZ   @RT00476                                            0476
*     GO TO MOVIT;                  /* NO, MOVE MORE                 */
*   RFROM=RFROM+ONE;                /* SKIP OVER INDEX BYTE          */
         ALR   RFROM,@12                                           0478
*   RDATA=RDATA+RDATA->FCOUNT+ONE;  /* POINT TO INPUT ID     @Y17XARW*/
         L     @15,RDATA(,ROPCAVT)                                 0479
         SLR   @14,@14                                             0479
         IC    @14,FCOUNT(,@15)                                    0479
         ALR   @14,@15                                             0479
         ALR   @14,@12                                             0479
         ST    @14,RDATA(,ROPCAVT)                                 0479
*   GENERATE;                                                      0480
         BAL   REG12,CHKUNIT       /* CHECK END OF UNIT EXCEEDED     */
*   IF RDATA->FIELD(1)=ZERO×        /* IS INPUT POSSIBLE IN  @Y17XARW*/
*       TRMINPUT=OFF                /* IN NCP OR IN MCP      @Y17XARW*/
*     THEN                                                         0481
         L     @12,RDATA(,ROPCAVT)                                 0481
         CLI   FIELD(@12),0                                        0481
         BE    @RT00481                                            0481
         L     @12,RTRM(,ROPCAVT)                                  0481
         TM    TRMINPUT(@12),B'01000000'                           0481
         BZ    @RT00481                                            0481
*     GO TO PROCNXT;                /* NO, PROCESS NEXT ENTRY        */
*   IF OCICINAC=OFF                 /* IS THIS ACTIVE ENTRY  @Y17XARW*/
*     THEN                                                         0483
         L     @15,OPCCOPCE(,ROPCAVT)                              0483
         TM    OCICINAC(@15),B'00000001'                           0483
         BNZ   @RF00483                                            0483
*     DO;                           /* YES,                          */
*       TRMRSACT=ON;                /* SET DEVICE ACTIVE     @Y17XARW*/
         LA    @07,TRMRSACT(,@12)                                  0485
         LR    @06,@07                                             0485
         LA    @15,3                                               0485
         NR    @06,@15                                             0485
         LCR   @06,@06                                             0485
         ALR   @07,@06                                             0485
         L     @15,0(,@07)                                         0485
@GL00004 LR    @14,@15                                             0485
         O     @14,@CB01691+3(@06)                                 0485
         CS    @15,@14,0(@07)                                      0485
         BNE   @GL00004                                            0485
*       STATUS=TNTOACT;             /*                       @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0486
         MVI   STATUS(@12),X'00'                                   0486
*     END;                                                         0487
*   ELSE                                                           0488
*     DO;                           /* NO,                           */
         B     @RC00483                                            0488
@RF00483 DS    0H                                                  0489
*       TRMRSACT=OFF;               /* SET DEVICE INACTIVE   @Y17XARW*/
         L     @06,RTRM(,ROPCAVT)                                  0489
         LA    @14,TRMRSACT(,@06)                                  0489
         LR    @07,@14                                             0489
         LA    @12,3                                               0489
         NR    @07,@12                                             0489
         LCR   @07,@07                                             0489
         ALR   @14,@07                                             0489
         L     @12,0(,@14)                                         0489
@GL00005 LR    @15,@12                                             0489
         N     @15,@CB01695+3(@07)                                 0489
         CS    @12,@15,0(@14)                                      0489
         BNE   @GL00005                                            0489
*       STATUS=TNTOINAC;            /*                       @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0490
         MVI   STATUS(@12),X'01'                                   0490
*     END;                                                         0491
*   IF NUMTNT^=0 THEN                                              0492
@RC00483 L     @12,OPCWORK(,ROPCAVT)                               0492
         CLI   NUMTNT(@12),0                                       0492
         BE    @RF00492                                            0492
*     DO;                           /* IF THIS A MULTIPT LINE WITH 0493
*                                      CHEKPT                @Y17XARW*/
*       LENDATA=THREE;              /* SETUP LEN OF DATA TO MOVE   0494
*                                                            @Y17XARW*/
         MVI   LENDATA(@12),X'03'                                  0494
*       EPTR=ADDR(OFFSET);          /* MOVE                  @Y17XARW*/
         LA    @15,OFFSET(,@12)                                    0495
         ST    @15,EPTR(,ROPCAVT)                                  0495
*       LENMOVE=TNTOLEN;            /* VARIABLE LENGTH TO MOVE     0496
*                                                            @Y17XARW*/
         LH    @15,TNTOLEN(,@12)                                   0496
         STC   @15,LENMOVE(,@12)                                   0496
*       IF LENMOVE>LENDATA THEN                                    0497
         CLC   LENMOVE(1,@12),LENDATA(@12)                         0497
         BNH   @RF00497                                            0497
*         LENMOVE=LENDATA;          /* ADJUST LENGTH         @Y17XARW*/
         IC    @15,LENDATA(,@12)                                   0498
         STC   @15,LENMOVE(,@12)                                   0498
*       DO UNTIL(LENMOVE=ZERO);     /* MOVE ALL OF DATA      @Y17XARW*/
@RF00497 DS    0H                                                  0499
@DL00499 DS    0H                                                  0500
*         TNTOPTR->MOVCHARS(1:LENMOVE)=EPTR->MOVCHARS(1:LENMOVE);/*
*                                      MOVE DATA             @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0500
         L     @15,TNTOPTR(,@12)                                   0500
         SLR   @14,@14                                             0500
         IC    @14,LENMOVE(,@12)                                   0500
         LR    @07,@14                                             0500
         BCTR  @07,0                                               0500
         L     @06,EPTR(,ROPCAVT)                                  0500
         EX    @07,@SM01699                                        0500
*         EPTR=EPTR+LENMOVE;        /* BUMP POINTER          @Y17XARW*/
         ALR   @06,@14                                             0501
         ST    @06,EPTR(,ROPCAVT)                                  0501
*         TNTOPTR=TNTOPTR+LENMOVE;  /* BUMP POINTER          @Y17XARW*/
         ALR   @15,@14                                             0502
         ST    @15,TNTOPTR(,@12)                                   0502
*         TNTOLEN=TNTOLEN-LENMOVE;  /* DECREMENT TOTAL LENGTH      0503
*                                                            @Y17XARW*/
         LCR   @14,@14                                             0503
         AH    @14,TNTOLEN(,@12)                                   0503
         STH   @14,TNTOLEN(,@12)                                   0503
*         CALL TNTCHK;              /* CHECK TNT             @Y17XARW*/
         BAL   @14,TNTCHK                                          0504
*         LENDATA=LENDATA-LENMOVE;  /* RESET LENGTH OF DATA  @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0505
         SLR   @15,@15                                             0505
         IC    @15,LENDATA(,@12)                                   0505
         SLR   @14,@14                                             0505
         IC    @14,LENMOVE(,@12)                                   0505
         SLR   @15,@14                                             0505
         STC   @15,LENDATA(,@12)                                   0505
*         LENMOVE=LENDATA;          /* RESET LENGTH TO MOVE  @Y17XARW*/
         STC   @15,LENMOVE(,@12)                                   0506
*       END;                        /*                       @Y17XARW*/
@DE00499 L     @12,OPCWORK(,ROPCAVT)                               0507
         CLI   LENMOVE(@12),0                                      0507
         BNE   @DL00499                                            0507
*     END;                          /*                       @Y17XARW*/
*   ELSE                                                           0509
*     OCTRMTBL=OFFSET;              /* SAVE TNT OFFSET       @Y17XARW*/
         B     @RC00492                                            0509
@RF00492 L     @12,OPCCOPCE(,ROPCAVT)                              0509
         L     @15,OPCWORK(,ROPCAVT)                               0509
         LH    @15,OFFSET(,@15)                                    0509
         N     @15,@CF01689                                        0509
         STH   @15,OCTRMTBL(,@12)                                  0509
*PROCNXT:                                                          0510
*   RDATA=ADDR(IEDBDU)+LENGTH(IEDBDU)+LVLBYTE;/* POINT TO START OF 0510
*                                      DATA                  @Y17XARW*/
@RC00492 DS    0H                                                  0510
PROCNXT  LA    @12,19                                              0510
         ALR   @12,UNIT                                            0510
         ST    @12,RDATA(,ROPCAVT)                                 0510
*   IF NUMTNT^=0 THEN                                              0511
         L     @12,OPCWORK(,ROPCAVT)                               0511
         CLI   NUMTNT(@12),0                                       0511
         BE    @RF00511                                            0511
*     DO;                           /* IF NO TNT OFFSETS     @Y17XARW*/
*       TNTOUNT=OCPTRSAV;           /* RESET PTR TO FIRST UNIT     0513
*                                                            @Y17XARW*/
         L     @15,OPCCOPCE(,ROPCAVT)                              0513
         L     @15,OCPTRSAV(,@15)                                  0513
         ST    @15,TNTOUNT(,@12)                                   0513
*       TNTOPTR=ADDR(ICTNTOFF);     /* RESET PTR TO FIRST ENTRY    0514
*                                                            @Y17XARW*/
         LA    @15,ICTNTOFF(,@15)                                  0514
         ST    @15,TNTOPTR(,@12)                                   0514
*       TNTOLEN=AVTKEYLE-THREE;     /* SET LENGTH IN UNIT    @Y17XARW*/
         LH    @15,AVTKEYLE(,AVT)                                  0515
         SL    @15,@CF00094                                        0515
         STH   @15,TNTOLEN(,@12)                                   0515
*     END;                          /*                       @Y17XARW*/
*   NUMPROC=NUMPROC+ONE;            /* UPDATE NUMBER PROCESSED       */
@RF00511 L     @12,OPCWORK(,ROPCAVT)                               0517
         LA    @15,1                                               0517
         SLR   @14,@14                                             0517
         IC    @14,NUMPROC(,@12)                                   0517
         ALR   @15,@14                                             0517
         STC   @15,NUMPROC(,@12)                                   0517
*   IF NUMPROC=NMBENT               /* HAVE ALL ENTRIES BEEN DONE    */
*     THEN                                                         0518
         CLC   NUMPROC(1,@12),NMBENT(@12)                          0518
         BE    @RT00518                                            0518
*     GO TO ALLDONE;                /* YES, EXIT                     */
*   RWRK1=UNIT;                     /* SAVE FIRST UNIT       @ZA01116*/
         LR    RWRK1,UNIT                                          0520
*   ENDUNIT=UNIT+AVTKEYLE+12;       /* END OF UNIT ADDR      @ZA01116*/
         LR    @15,UNIT                                            0521
         AH    @15,AVTKEYLE(,AVT)                                  0521
         AL    @15,@CF00262                                        0521
         ST    @15,ENDUNIT(,@12)                                   0521
*   GO TO NXTENT;                   /* GO PROCESS NEXT ENTRY         */
         B     NXTENT                                              0522
*UPDFROM:                                                          0523
*   RFROM=RFROM+WIDTH;              /* UPDATE TO NEXT ENTRY          */
UPDFROM  SLR   @12,@12                                             0523
         IC    @12,WIDTH(,RAREA)                                   0523
         ALR   RFROM,@12                                           0523
*   GO TO PROCNXT;                  /* GO PROCESS NEXT ENTRY         */
         B     PROCNXT                                             0524
*   RFY                                                            0525
*     REG12 RSTD;                   /*                       @Y17XARW*/
*CHKUNIT:                                                          0526
*   IF RDATA>=ENDUNIT               /* ARE WE PAST END OF UNIT     0526
*                                                            @Y17XARW*/
*     THEN                                                         0526
CHKUNIT  L     @15,RDATA(,ROPCAVT)                                 0526
         L     @14,OPCWORK(,ROPCAVT)                               0526
         L     @07,ENDUNIT(,@14)                                   0526
         CR    @15,@07                                             0526
         BL    @RF00526                                            0526
*     DO;                           /* YES,                          */
*       RDATA=RWRK1->PRFTIC+12+RDATA-ENDUNIT;/* DATA ADDRESS FOR NEW
*                                      UNIT                  @Y17XARW*/
         LA    @06,12                                              0528
         L     @15,PRFTIC(,RWRK1)                                  0528
         LR    @14,@15                                             0528
         ALR   @14,@06                                             0528
         L     @15,RDATA(,ROPCAVT)                                 0528
         ALR   @15,@14                                             0528
         SLR   @15,@07                                             0528
         ST    @15,RDATA(,ROPCAVT)                                 0528
*       NEXTRCD=RWRK1->PRFTIC+12+NEXTRCD-ENDUNIT;/* RESET NEXT DATA
*                                                            @ZA01116
*                                      RECORD POINTER        @ZA01116*/
         L     @15,OPCWORK(,ROPCAVT)                               0529
         AL    @14,NEXTRCD(,@15)                                   0529
         SLR   @14,@07                                             0529
         ST    @14,NEXTRCD(,@15)                                   0529
*       ENDUNIT=RWRK1->PRFTIC+AVTKEYLE+12;/* END OF NEXT UNIT ADDRESS*/
         L     @14,PRFTIC(,RWRK1)                                  0530
         LH    @07,AVTKEYLE(,AVT)                                  0530
         ALR   @07,@14                                             0530
         ALR   @07,@06                                             0530
         ST    @07,ENDUNIT(,@15)                                   0530
*       RWRK1=RWRK1->PRFTIC;        /* NEXT UNIT ADDRESS             */
         LR    RWRK1,@14                                           0531
*       GO TO CHKUNIT;                                             0532
         B     CHKUNIT                                             0532
*     END;                                                         0533
*   GENERATE;                                                      0534
@RF00526 DS    0H                                                  0534
         BR    REG12               /* RETURN TO CALLER               */
*   RFY                                                            0535
*     REG12 UNRSTD;                 /*                       @Y17XARW*/
*ALLDONE:                                                          0536
*   OCPARM=ZERO;                    /* CLEAR FIELDS FOR NEXT MOD   0536
*                                                            @Y17XARW*/
ALLDONE  L     @12,OPCCOPCE(,ROPCAVT)                              0536
         SLR   @15,@15                                             0536
         STH   @15,OCPARM(,@12)                                    0536
*   OCRESP=OFF;                     /*                       @Y17XARW*/
         NI    OCRESP(@12),B'11111110'                             0537
*   OCWTG=MODNAME2;                 /* SETUP WHERE-TO-GO     @Y17XARW*/
         MVC   OCWTG(2,@12),MODNAME2                               0538
*   OCACTREQ=ON;                    /* INDICATE ACTIVATE REQUEST   0539
*                                                            @Y17XARW*/
         OI    OCACTREQ(@12),B'00001000'                           0539
*   PRURH=TRHFID0;                  /* SETUP TH FIELDS       @Y17XARW*/
         LR    @15,UNIT                                            0540
         SL    @15,@CF00073                                        0540
         MVC   PRURH(3,@15),@CB01506                               0540
*   PRUTH=TTH0BYT0;                 /* SETUP RH FIELDS       @Y17XARW*/
         MVI   PRUTH(@15),X'0C'                                    0541
*   BDUMODIF=CD0CRSII;              /* SETUP MOD IDENTIFIER  @Y17XARW*/
         LA    @15,12                                              0542
         ALR   @15,UNIT                                            0542
         MVI   BDUMODIF(@15),X'02'                                 0542
*   BDUHEADR=ON;                    /* INDICATE A HEADER BUFFER    0543
*                                                            @Y17XARW*/
         OI    BDUHEADR(@15),B'01000000'                           0543
*   BDUSYRSP=BDUSYRSP&&BDUSYRSP;    /* CLEAR BDU RESPONSE    @Y17XARW*/
         XC    BDUSYRSP(1,@15),BDUSYRSP(@15)                       0544
*   OPCMODID=MODNAME4;              /* GOTO RU DISPATCHER    @Y17XARW*/
         MVC   OPCMODID(2,ROPCAVT),MODNAME4                        0545
*   WANSCD=ICHNG2;                  /* SETUP ICHNG ENTRY CODE      0546
*                                                            @Y17XARW*/
         L     @15,PARAM(,ROPCAVT)                                 0546
         MVI   WANSCD(@15),X'14'                                   0546
*   IF OCPTRSAV^=INVALTIC THEN                                     0547
         L     @15,OCPTRSAV(,@12)                                  0547
         C     @15,@CF01356                                        0547
         BE    @RF00547                                            0547
*     DO;                           /* IS THERE CHKPT DATA   @Y17XARW*/
*       IF ELMNT->WRTCD=ZERO THEN                                  0549
         L     @14,ELMNT(,ROPCAVT)                                 0549
         CLI   WRTCD(@14),0                                        0549
         BNE   @RF00549                                            0549
*         DO;                       /* YES, IS THIS GOOD RETURN?   0550
*                                                            @Y17XARW*/
*           IF OCICTYPE=OCICMUL THEN                               0551
         CLI   OCICTYPE(@12),2                                     0551
         BNE   @RF00551                                            0551
*             DO;                   /* IS THIS MULTIPT LINE? @Y17XARW*/
*               REG0=ICTNTNU;       /* SETUP NUMBER OF UNITS @Y17XARW*/
         SLR   REG0,REG0                                           0553
         IC    REG0,ICTNTNU(,@15)                                  0553
*               REG1=OCPTRSAV;      /* POINT TO START OF OFFSETS   0554
*                                                            @Y17XARW*/
         LR    REG1,@15                                            0554
*               DO UNTIL REG0=0;    /* FIND FIRST UNIT       @Y17XARW*/
@DL00555 DS    0H                                                  0556
*                 REG1=REG1->PRFTIC;/* POINT TO UNIT         @Y17XARW*/
         L     REG1,PRFTIC(,REG1)                                  0556
*                 REG0=REG0-ONE;    /* DECREMENT COUNT       @Y17XARW*/
         BCTR  REG0,0                                              0557
*               END;                /*                       @Y17XARW*/
@DE00555 LTR   REG0,REG0                                           0558
         BNZ   @DL00555                                            0558
*               PLMVTU=REG1;        /* SETUP TARGET UNIT     @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0559
         ST    REG1,PLMVTU(,@12)                                   0559
*               PLMVTD=REG1+12;     /* SETUP TARGET DATA     @Y17XARW*/
         LA    @15,12                                              0560
         ALR   @15,REG1                                            0560
         ST    @15,PLMVTD(,@12)                                    0560
*             END;                  /*                       @Y17XARW*/
*           ELSE                                                   0562
*             DO;                   /* USE FIRST UNIT        @Y17XARW*/
         B     @RC00551                                            0562
@RF00551 DS    0H                                                  0563
*               PLMVTU=OCPTRSAV;    /* SETUP TARGET UNIT     @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0563
         L     @15,OPCCOPCE(,ROPCAVT)                              0563
         L     @15,OCPTRSAV(,@15)                                  0563
         ST    @15,PLMVTU(,@12)                                    0563
*               PLMVTD=OCPTRSAV+12; /* SETUP TARGET DATA     @Y71XAR5*/
         AL    @15,@CF00262                                        0564
         ST    @15,PLMVTD(,@12)                                    0564
*             END;                  /*                       @Y17XARW*/
*           TTCIN=PRUTTCIN;         /* SETUP TTCIN IN TARGET @Y17XARW*/
@RC00551 L     @12,OPCCOPCE(,ROPCAVT)                              0566
         L     @12,OCPTRSAV(,@12)                                  0566
         LH    @15,PRUTTCIN(,UNIT)                                 0566
         N     @15,@CF01689                                        0566
         STH   @15,TTCIN(,@12)                                     0566
*           DATCT=PRUDATCT;         /* SETUP DATA COUNT IN TARGET  0567
*                                                            @Y17XARW*/
         LH    @15,PRUDATCT(,UNIT)                                 0567
         STH   @15,DATCT(,@12)                                     0567
*           PLMVLNTH=PRUDATCT;      /* SETUP LENGTH OF DATA  @Y17XARW*/
         L     @12,OPCWORK(,ROPCAVT)                               0568
         STH   @15,PLMVLNTH(,@12)                                  0568
*           PLMVSU=UNIT;            /* SETUP SOURCE UNIT     @Y17XARW*/
         ST    UNIT,PLMVSU(,@12)                                   0569
*           PLMVSD=ADDR(PRUDATA);   /* SETUP SOURCE DATA     @Y17XARW*/
         LA    @15,PRUDATA(,UNIT)                                  0570
         ST    @15,PLMVSD(,@12)                                    0570
*           PLMVFLG1=0;             /* CLEAR UNUSED FLAGS    @Y17XARW*/
         MVI   PLMVFLG1(@12),X'00'                                 0571
*           PLMVFLG2=0;             /*                       @Y17XARW*/
         MVI   PLMVFLG2(@12),X'00'                                 0572
*           PLMVUNCA=0;             /*                       @Y17XARW*/
         SLR   @15,@15                                             0573
         ST    @15,PLMVUNCA(,@12)                                  0573
*           REG1=ADDR(IEDPLMV);     /* SETUP PARM LIST       @Y17XARW*/
         LR    REG1,@12                                            0574
*           CALL IEDMVBFR;          /* MOVE COPY DATA        @Y17XARW*/
         L     @12,AVTSAVTP(,AVT)                                  0575
         L     @15,SAVTMVBF(,@12)                                  0575
         BALR  @14,@15                                             0575
*         END;                      /*                       @Y17XARW*/
*       ELSE                                                       0577
*         DO;                       /* BAD RETURN CODE       @Y17XARW*/
         B     @RC00549                                            0577
@RF00549 DS    0H                                                  0578
*           REG1=OCPTRSAV;          /* GET UNITS TO FREE     @Y17XARW*/
         L     @12,OPCCOPCE(,ROPCAVT)                              0578
         L     REG1,OCPTRSAV(,@12)                                 0578
*           OCPTRSAV=INVALTIC;      /* RESET BUFF POINTER    @Y17XARW*/
         MVC   OCPTRSAV(4,@12),@CF01356                            0579
*           CALL FREEBUFF;          /* FREE SAVED BUFFERS    @Y17XARW*/
         L     @15,OPCFREBF(,ROPCAVT)                              0580
         BALR  @14,@15                                             0580
*         END;                      /*                       @Y17XARW*/
*     END;                          /*                       @Y17XARW*/
*   GOTO XCTL;                      /* XCTL TO NEXT MOD      @Y17XARW*/
         B     XCTL                                                0583
*ERREXIT:                                                          0584
*   ELMNT->WRTCD='1C'X;             /* SET RETURN CODE               */
ERREXIT  L     @12,ELMNT(,ROPCAVT)                                 0584
         MVI   WRTCD(@12),X'1C'                                    0584
*   GOTO ALLDONE;                   /* TELL APPLICATION PROGRAM      */
         B     ALLDONE                                             0585
*SWTCHID:                                                          0586
*   OPCMODID=MODNAME1;              /* SET NAME FOR XCTL     @Y17XARW*/
SWTCHID  MVC   OPCMODID(2,ROPCAVT),MODNAME1                        0586
*XCTL:                                                             0587
*   REG1=ROPCAVT;                   /* SETUP OP CNTRL AVT ADDR     0587
*                                                            @Y17XARW*/
XCTL     LR    REG1,ROPCAVT                                        0587
*   GEN REFS(OPCXCTL);                                             0588
       XCTL  SF=(E,OPCXCTL(ROPCAVT))
*   RFY                                                            0589
*     REG14 RSTD;                   /*                       @Y17XARW*/
*TNTCHK:                                                           0590
*   IF TNTOLEN<=ZERO THEN                                          0590
TNTCHK   L     @15,OPCWORK(,ROPCAVT)                               0590
         LH    @12,TNTOLEN(,@15)                                   0590
         LTR   @12,@12                                             0590
         BP    @RF00590                                            0590
*     DO;                           /* IF NO ROOM IN THIS UNIT     0591
*                                                            @Y17XARW*/
*       TNTOPTR=TNTOUNT->PRFTIC+12-TNTOLEN;/* POINT TO NEXT TNT ENTRY
*                                                            @Y17XARW*/
         L     @07,TNTOUNT(,@15)                                   0592
         L     @07,PRFTIC(,@07)                                    0592
         LA    @06,12                                              0592
         ALR   @06,@07                                             0592
         SLR   @06,@12                                             0592
         ST    @06,TNTOPTR(,@15)                                   0592
*       TNTOLEN=AVTKEYLE+TNTOLEN;   /* CALCULATE LENGTH IN NEXT UNIT
*                                                            @Y17XARW*/
         AH    @12,AVTKEYLE(,AVT)                                  0593
         STH   @12,TNTOLEN(,@15)                                   0593
*       TNTOUNT=TNTOUNT->PRFTIC;    /* RESET UNIT ADDRESS    @Y17XARW*/
         ST    @07,TNTOUNT(,@15)                                   0594
*     END;                          /*                       @Y17XARW*/
*   RETURN;                                                        0596
@EL00001 DS    0H                                                  0596
@EF00001 DS    0H                                                  0596
@ER00001 BR    @14                                                 0596
*   RFY                                                            0597
*     REG14 UNRSTD;                 /*                       @Y17XARW*/
*   END IGCI210D                                                   0598
*                                                                  0598
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (TAVTD   )                                       */
*/*%INCLUDE SYSLIB  (TCD0D   )                                       */
*/*%INCLUDE SYSLIB  (TOPCED  )                                       */
*/*%INCLUDE SYSLIB  (TOPCAVTD)                                       */
*/*%INCLUDE SYSLIB  (TTRMD   )                                       */
*/*%INCLUDE SYSLIB  (TPRFD   )                                       */
*/*%INCLUDE SYSLIB  (TPRUD   )                                       */
*/*%INCLUDE SYSLIB  (TBDUD   )                                       */
*/*%INCLUDE SYSLIB  (TTNTD   )                                       */
*/*%INCLUDE SYSLIB  (TPLMVD  )                                       */
*/*%INCLUDE SYSLIB  (TRHD    )                                       */
*/*%INCLUDE SYSLIB  (TTHD    )                                       */
*                                                                  0598
*       ;                                                          0598
         B     @EL00001                                            0598
@DATA    DS    0H
@SM01699 MVC   MOVCHARS(0,@15),MOVCHARS(@06)
         DS    0F
         DS    0F
@CF00088 DC    F'1'
@CF00094 DC    F'3'
@CH00094 EQU   @CF00094+2
@CF00073 DC    F'8'
@CF00262 DC    F'12'
@CF01098 DC    F'14'
@CF01356 DC    XL4'08000002'
@CF01689 DC    XL4'0000FFFF'
         DS    0D
@CB01506 DC    X'0B8000'
@CB01691 DC    B'000000000000000000000000100000000000000000000000000000C
               00'
@CB01695 DC    B'111111111111111111111111011111111111111111111111111111C
               11'
MODNAME1 DC    CL2'I3'
MODNAME2 DC    CL2'T0'
MODNAME3 DC    CL2'06'
MODNAME4 DC    CL2'02'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
@0       EQU   00
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
REG0     EQU   @00
REG1     EQU   @01
ROPCAVT  EQU   @02
TNTNDX   EQU   @03
RWRK1    EQU   @03
AVT      EQU   @04
UNIT     EQU   @05
LCB      EQU   @08
RFROM    EQU   @08
RAREA    EQU   @09
RLNGTH   EQU   @10
RBASE    EQU   @11
REG12    EQU   @12
RSAVE    EQU   @13
REG14    EQU   @14
REG15    EQU   @15
IEDQAPTR EQU   0
IEDPRUQP EQU   0
IEDQPPTR EQU   0
IEDQNPTR EQU   0
IEDPLMVP EQU   0
ROPCE    EQU   0
IEDQAVTD EQU   0
AVTSAVEX EQU   IEDQAVTD+288
@NM00003 EQU   IEDQAVTD+388
AVTCKFLG EQU   @NM00003
AVTBASE  EQU   IEDQAVTD+412
AVTPKF   EQU   AVTBASE
AVTRNMPT EQU   IEDQAVTD+424
AVTHG02  EQU   IEDQAVTD+528
AVTDISP  EQU   IEDQAVTD+552
AVTHD    EQU   IEDQAVTD+556
AVTSCOPT EQU   AVTHD
AVTSAVTP EQU   IEDQAVTD+612
AVTSAVTF EQU   AVTSAVTP
AVTCKPEL EQU   IEDQAVTD+652
AVTCKRMV EQU   AVTCKPEL
AVTCKELF EQU   IEDQAVTD+680
AVTCKBYT EQU   IEDQAVTD+691
AVTHG01  EQU   IEDQAVTD+692
AVTCKLNK EQU   IEDQAVTD+696
AVTCRELE EQU   IEDQAVTD+708
AVTCCELE EQU   AVTCRELE
AVTCLRHI EQU   IEDQAVTD+716
AVTADBUF EQU   IEDQAVTD+720
AVTSYSER EQU   IEDQAVTD+728
AVTCKPQB EQU   IEDQAVTD+804
AVTCKPTB EQU   AVTCKPQB
AVTCKPEC EQU   AVTCKPQB+4
AVTCKPCC EQU   AVTCKPEC
AVTOPCQB EQU   IEDQAVTD+816
AVTOPCOB EQU   AVTOPCQB
AVTOPCEC EQU   AVTOPCQB+4
AVTOPCCC EQU   AVTOPCEC
AVTOLTQB EQU   IEDQAVTD+828
AVTCWFL1 EQU   IEDQAVTD+924
AVTCWFL2 EQU   IEDQAVTD+925
AVTSUBT  EQU   IEDQAVTD+948
AVTIOTR  EQU   IEDQAVTD+949
AVTKEYLE EQU   IEDQAVTD+1032
AVTBIT1  EQU   IEDQAVTD+1050
AVTBIT2  EQU   IEDQAVTD+1051
AVTBIT3  EQU   IEDQAVTD+1052
AVTSTAIN EQU   AVTBIT3
AVTBIT4  EQU   IEDQAVTD+1136
@NM00083 EQU   IEDQAVTD+1232
IEDNSVTD EQU   0
SAVTDIAG EQU   IEDNSVTD
SAVTDIAF EQU   SAVTDIAG
SAVTLUSQ EQU   IEDNSVTD+88
SAVTMVBF EQU   IEDNSVTD+160
SAVTTCPU EQU   IEDNSVTD+238
SAVTNAX  EQU   IEDNSVTD+248
SAVTZELM EQU   IEDNSVTD+270
SAVTRDRV EQU   IEDNSVTD+284
SAVTCKQB EQU   IEDNSVTD+300
SAVTCKTB EQU   SAVTCKQB
SAVTCKEC EQU   SAVTCKQB+4
SAVTCKCC EQU   SAVTCKEC
IEDQOPCE EQU   0
OCELEM   EQU   IEDQOPCE+4
OCUNIT   EQU   IEDQOPCE+8
OCRUDEST EQU   OCUNIT
OCCKPKEY EQU   OCRUDEST
OCSCAN   EQU   OCCKPKEY
OCOPTCDE EQU   IEDQOPCE+12
OCSWITCH EQU   IEDQOPCE+13
OCFLAG   EQU   IEDQOPCE+14
OCRESP   EQU   OCFLAG
@NM00106 EQU   IEDQOPCE+16
OCDEST   EQU   @NM00106
OCREQVAL EQU   OCDEST+1
OCTRMTBL EQU   IEDQOPCE+20
OCLINENO EQU   IEDQOPCE+22
OCTIOT   EQU   OCLINENO
OCTRUNIT EQU   IEDQOPCE+24
OCRSID   EQU   OCTRUNIT
OCALSTAT EQU   OCRSID
OCACTREQ EQU   OCALSTAT
OCPARM   EQU   IEDQOPCE+28
OCWTG    EQU   IEDQOPCE+30
OCBACKUP EQU   IEDQOPCE+32
OCMODNME EQU   IEDQOPCE+40
OCIPLWA  EQU   OCMODNME
OCPTRSAV EQU   OCMODNME+4
OCCKDATA EQU   IEDQOPCE+48
OCRSTGTM EQU   OCCKDATA
IEDQOPCN EQU   0
OCLDNME  EQU   IEDQOPCN
OCLINTTE EQU   OCLDNME
OCREQFLG EQU   OCLINTTE+2
OCPREFLG EQU   OCLINTTE+3
IEDQOPCD EQU   0
OPCAVTPT EQU   IEDQOPCD+8
OPCCOPCE EQU   IEDQOPCD+12
OPCSAVE  EQU   IEDQOPCD+56
OPCWORK  EQU   IEDQOPCD+140
OPCAQCTL EQU   IEDQOPCD+180
OPCXCTL  EQU   IEDQOPCD+204
OPCLDNME EQU   IEDQOPCD+212
OPCMODID EQU   OPCLDNME+3
OPCGETBF EQU   IEDQOPCD+276
OPCFREBF EQU   IEDQOPCD+280
OPCSPEC  EQU   IEDQOPCD+300
OPCHNEND EQU   IEDQOPCD+302
OPCWRKSP EQU   IEDQOPCD+320
IEDTRM   EQU   0
IEDNTRM  EQU   IEDTRM
TRMBYTE4 EQU   IEDNTRM
TRMBYTE3 EQU   IEDNTRM+1
TRMBYTE2 EQU   IEDNTRM+2
TRMRSACT EQU   TRMBYTE2
TRMINPG  EQU   TRMBYTE2
TRMBYTE1 EQU   IEDNTRM+3
TRMSCPRQ EQU   TRMBYTE1
TRMBYTE0 EQU   IEDNTRM+6
TRMINPUT EQU   TRMBYTE0
TRMSIBPT EQU   IEDNTRM+7
IEDQTRM  EQU   IEDTRM+14
TRMSTATE EQU   IEDQTRM
TRMLOG   EQU   TRMSTATE
TRMINSEQ EQU   IEDQTRM+4
TLISTCNT EQU   TRMINSEQ
TRMOUTSQ EQU   IEDQTRM+6
TLISTEN  EQU   TRMOUTSQ
TRMDSORG EQU   TLISTEN
TRMALTD  EQU   IEDQTRM+8
TRMDEVFL EQU   IEDQTRM+10
TRMSTAT  EQU   IEDQTRM+12
IEDQPRF  EQU   0
PRFRCB   EQU   IEDQPRF
PRFKEY   EQU   PRFRCB
PRFQCBA  EQU   PRFRCB+1
PRFPRI   EQU   PRFRCB+4
PRFLINK  EQU   PRFRCB+5
PRFTIC   EQU   IEDQPRF+8
PRFTICC  EQU   PRFTIC
PRFNBUNT EQU   IEDQPRF+12
PRFSUNIT EQU   PRFNBUNT
PRFPLQCB EQU   PRFSUNIT
@NM00140 EQU   IEDQPRF+16
PRFSVFFO EQU   @NM00140
PRFSTAT1 EQU   IEDQPRF+20
PRFEOFN  EQU   PRFSTAT1
PRFCORE  EQU   IEDQPRF+21
PRFXTRA  EQU   PRFCORE
PRFSCAN  EQU   IEDQPRF+24
PRFTQBCK EQU   IEDQPRF+26
PRFNTXT  EQU   PRFTQBCK
PRFEOBOF EQU   PRFNTXT
PRFCHDR  EQU   IEDQPRF+32
PRFHQBCK EQU   IEDQPRF+35
IEDPF1   EQU   0
PRF1FLG1 EQU   IEDPF1+3
PRF1WD2  EQU   IEDPF1+4
PRF1SEQP EQU   PRF1WD2
PRF1SQID EQU   PRF1SEQP
PRF1TAG1 EQU   PRF1SQID
IEDPF2   EQU   0
PRF2FLG2 EQU   IEDPF2
PRF2WD2  EQU   IEDPF2+4
IEDPRUQD EQU   0
PRUTTCIN EQU   IEDPRUQD
PRUDATCT EQU   IEDPRUQD+2
PRUTIC   EQU   IEDPRUQD+8
PRUDATA  EQU   IEDPRUQD+12
IEDPRUND EQU   0
PRURHTH  EQU   IEDPRUND
PRURH    EQU   PRURHTH
PRURHFG0 EQU   PRURH
PRURHSDI EQU   PRURHFG0
PRURHFG1 EQU   PRURH+1
PRURHFG2 EQU   PRURH+2
PRUTH    EQU   PRURHTH+3
PRUFIDN  EQU   PRUTH
IEDBDU   EQU   0
BDUMODIF EQU   IEDBDU+1
BDUFNFLG EQU   IEDBDU+2
BDUHEADR EQU   BDUFNFLG
BDUBDUFG EQU   IEDBDU+3
BDURSP   EQU   IEDBDU+4
BDUSYRSP EQU   BDURSP
BDUEXRSP EQU   BDURSP+1
BDUEND   EQU   IEDBDU+6
IEDQTNTD EQU   0
IEDQTCDE EQU   IEDQTNTD
IEDQTDCE EQU   IEDQTNTD+46
IEDTNTA  EQU   0
IEDPLMV  EQU   0
PLMVTU   EQU   IEDPLMV
PLMVTD   EQU   IEDPLMV+4
PLMVSU   EQU   IEDPLMV+8
PLMVSD   EQU   IEDPLMV+12
PLMVLNTH EQU   IEDPLMV+16
PLMVFLG1 EQU   IEDPLMV+18
PLMVFLG2 EQU   IEDPLMV+19
PLMVUNCA EQU   IEDPLMV+20
IEDRH    EQU   0
TRHBYTE0 EQU   IEDRH
TRHBYTE1 EQU   IEDRH+1
TRHBYTE2 EQU   IEDRH+2
IEDTH    EQU   0
TTHBYTE0 EQU   IEDTH
TTHSNF   EQU   IEDTH+6
TTHTAG   EQU   TTHSNF
TTHTAG1  EQU   TTHTAG
WORKAREA EQU   0
WENTCD   EQU   WORKAREA+9
WANSCD   EQU   WORKAREA+10
WRTCD    EQU   WORKAREA+11
WTO      EQU   WORKAREA+16
WFROM    EQU   WORKAREA+20
FIELD    EQU   0
FCOUNT   EQU   FIELD
FLAGS    EQU   FCOUNT
LASTID   EQU   FLAGS
CONTROL  EQU   0
WIDTH    EQU   CONTROL+2
ICTNT    EQU   0
ICTNTDAT EQU   ICTNT+12
ICTNTCTL EQU   ICTNTDAT
ICTNTNO  EQU   ICTNTCTL
ICTNTNU  EQU   ICTNTCTL+2
ICTNTOFF EQU   ICTNTDAT+3
WA       EQU   0
RCOUNT   EQU   WA+24
COUNTS   EQU   WA+28
NMBENT   EQU   COUNTS
NUMPROC  EQU   COUNTS+1
TNTDATA  EQU   WA+32
OFFSET   EQU   TNTDATA
STATUS   EQU   TNTDATA+2
NEXTRCD  EQU   WA+36
ENDUNIT  EQU   WA+40
TNTOPTR  EQU   WA+44
TNTOUNT  EQU   WA+48
TNTOLEN  EQU   WA+52
NUMDEV   EQU   WA+54
NUMTNT   EQU   WA+56
LENMOVE  EQU   WA+57
LENDATA  EQU   WA+58
MULTIPNT EQU   0
MULCURNB EQU   MULTIPNT+2
DEVRCD   EQU   0
TNTUNIT  EQU   12
PRUBUFF  EQU   0
TTCIN    EQU   PRUBUFF
DATCT    EQU   PRUBUFF+2
IEDQTNT  EQU   0
ALLOCBUF EQU   0
FREEBUFF EQU   0
IEDMVBFR EQU   0
IEDIAP03 EQU   0
MOVCHARS EQU   0
IEDNBPTR EQU   0
IEDNLPTR EQU   0
IEDQLPTR EQU   0
IEDQQPTR EQU   0
IEDQTPTR EQU   0
OCCIB    EQU   OCREQVAL
OCCKPKY1 EQU   OCCKPKEY
OCCKPTYP EQU   OCCKPKY1
OCICACTN EQU   OCMODNME
OCICDADR EQU   OCICACTN
OCICTYPE EQU   OCICDADR
OCICSW   EQU   OCICDADR+3
OCICINAC EQU   OCICSW
OPCAQWD  EQU   OPCAQCTL
OPCAQWD1 EQU   OPCAQWD
OPCAQWD2 EQU   OPCAQWD+4
OPCAQWD3 EQU   OPCAQWD+8
TRMPRE1  EQU   TRMBYTE4
TRMPRE   EQU   TRMBYTE3
TRMNCP   EQU   TRMBYTE3
TRMPU    EQU   TRMBYTE3
TRMLU    EQU   TRMBYTE3
TRMLINK  EQU   TRMBYTE3
PTRS     EQU   OPCWRKSP
ELMNT    EQU   PTRS
PARAM    EQU   PTRS+4
RTRM     EQU   PTRS+8
RDATA    EQU   PTRS+12
EPTR     EQU   PTRS+16
OCACTCD  EQU   OCMODNME
BDUTEXT  EQU   BDUEND
PRFSHDR  EQU   IEDQPRF+42
TNTCODE  EQU   IEDQTCDE
TNTDCODE EQU   IEDQTDCE
TNTFIRST EQU   IEDQTNTD+82
*                                      START UNREFERENCED COMPONENTS
@NM00133 EQU   TRMLINK
TRMLSTAT EQU   TRMLINK
TRMLINT  EQU   TRMLINK
TRMEPMOD EQU   TRMLINK
TRMLULOG EQU   TRMLU
TRMINERR EQU   TRMLU
TRMLUREQ EQU   TRMLU
TRMSESRQ EQU   TRMLU
TRMTDIFF EQU   TRMLU
TRMLUTM  EQU   TRMLU
TRMLUIT  EQU   TRMLU
TRMAUTO  EQU   TRMLU
TRMPCONT EQU   TRMPU
@NM00132 EQU   TRMPU
TRMNCONT EQU   TRMNCP
TRMQUCKN EQU   TRMNCP
TRMSLOWN EQU   TRMNCP
TRMSYGEN EQU   TRMNCP
TRMNCPCL EQU   TRMNCP
TRMIPLDM EQU   TRMNCP
TRMINOUT EQU   TRMPRE
TRMRDOUT EQU   TRMPRE
TRMNLOUT EQU   TRMPRE
TRMWROUT EQU   TRMPRE
TRMASNXI EQU   TRMPRE
TRMSTMM  EQU   TRMPRE
TRMCMODE EQU   TRMPRE
TRMSTPND EQU   TRMPRE
TRMLYNCH EQU   TRMPRE1
TRMSPOUT EQU   TRMPRE1
TRMERLCK EQU   TRMPRE1
TRMQNPL  EQU   TRMPRE1
TRMSPACT EQU   TRMPRE1
TRMOCNI  EQU   TRMPRE1
TRMSESSN EQU   TRMPRE1
TRMCONT  EQU   TRMPRE1
OPCAQLST EQU   OPCAQWD3+1
OPCAQRQ3 EQU   OPCAQWD3
OPCAQSEC EQU   OPCAQWD2+1
OPCAQRQ2 EQU   OPCAQWD2
OPCAQFST EQU   OPCAQWD1+1
OPCAQREQ EQU   OPCAQWD1
@NM00112 EQU   OCICSW
OCICATST EQU   OCICDADR+1
@NM00111 EQU   OCCKPKY1
OCCKPENV EQU   OCCKPKY1
OCCKPRST EQU   OCCKPTYP
OCCKPNCP EQU   OCCKPTYP
OCCKPINC EQU   OCCKPTYP
TNTSTRT  EQU   TNTUNIT+3
TNTNU    EQU   TNTUNIT+2
TNTNOFF  EQU   TNTUNIT
DEVDATA  EQU   DEVRCD+3
DEVID    EQU   DEVRCD+1
DEVLEN   EQU   DEVRCD
MULRCDS  EQU   MULTIPNT+3
MULMAX   EQU   MULTIPNT+1
MULDESC  EQU   MULTIPNT
@NM00176 EQU   TNTDATA+3
@NM00175 EQU   COUNTS+3
FLAGSN   EQU   COUNTS+2
@NM00174 EQU   WA+20
@NM00173 EQU   WA+16
@NM00172 EQU   WA+12
@NM00171 EQU   WA+8
@NM00170 EQU   WA+4
@NM00169 EQU   WA
ICTNTTIC EQU   ICTNT+8
@NM00168 EQU   ICTNT
CPUID    EQU   CONTROL+4
CNTFLG   EQU   CONTROL+3
ACTENT   EQU   CONTROL+1
TOTENT   EQU   CONTROL
FLDLNG   EQU   FIELD+2
@NM00167 EQU   FIELD+1
INVSTAT  EQU   FLAGS
@NM00166 EQU   FLAGS
CHNGSTAT EQU   LASTID
DEVASSO  EQU   FLAGS
WRQTG    EQU   WORKAREA+26
WTNTNDX  EQU   WORKAREA+24
WECBA    EQU   WORKAREA+12
WVERB    EQU   WORKAREA+8
WLINK    EQU   WORKAREA+5
WPRI     EQU   WORKAREA+4
WQCBADR  EQU   WORKAREA
TTHDCF   EQU   IEDTH+8
TTHTAG2  EQU   TTHTAG+1
@NM00165 EQU   TTHTAG1
TTHTAGS  EQU   TTHTAG1
TTHOAF   EQU   IEDTH+4
TTHDAF   EQU   IEDTH+2
TTHBYTE1 EQU   IEDTH+1
TTHEFI   EQU   TTHBYTE0
@NM00164 EQU   TTHBYTE0
TTHEBIU  EQU   TTHBYTE0
TTHBBIU  EQU   TTHBYTE0
TTHFTYPE EQU   TTHBYTE0
@NM00163 EQU   TRHBYTE2
@NM00162 EQU   TRHBYTE2
@NM00161 EQU   TRHBYTE2
TRHCSI   EQU   TRHBYTE2
@NM00160 EQU   TRHBYTE2
TRHCDI   EQU   TRHBYTE2
TRHEB    EQU   TRHBYTE2
TRHBB    EQU   TRHBYTE2
TRHPI    EQU   TRHBYTE1
@NM00159 EQU   TRHBYTE1
@NM00158 EQU   TRHBYTE1
@NM00157 EQU   TRHBYTE1
TRHER    EQU   TRHBYTE1
TRHDR2   EQU   TRHBYTE1
@NM00156 EQU   TRHBYTE1
TRHDR1   EQU   TRHBYTE1
TRHEC    EQU   TRHBYTE0
TRHBC    EQU   TRHBYTE0
TRHSDI   EQU   TRHBYTE0
TRHFI    EQU   TRHBYTE0
@NM00155 EQU   TRHBYTE0
TRHRUCAT EQU   TRHBYTE0
TRHTYPE  EQU   TRHBYTE0
@NM00154 EQU   PLMVFLG1
PLMVTCTG EQU   PLMVFLG1
PLMVSCTG EQU   PLMVFLG1
PLMVUNCF EQU   PLMVFLG1
TNTTRMAD EQU   IEDTNTA
TNTLEN   EQU   IEDQTNTD+44
TNTMIDEN EQU   IEDQTNTD+41
TNTENLEN EQU   IEDQTNTD+40
TNTSRCHX EQU   IEDQTNTD+38
BDUXGRPH EQU   BDUEXRSP
BDUXFINL EQU   BDUEXRSP
BDUXINIT EQU   BDUEXRSP
BDURESP  EQU   BDUSYRSP
BDUPHASE EQU   BDUSYRSP
BDUERROR EQU   BDUSYRSP
BDUXERLK EQU   BDUBDUFG
BDUALTAK EQU   BDUFNFLG
BDUNEGAK EQU   BDUFNFLG
BDUPOSAK EQU   BDUFNFLG
BDUTPTX  EQU   BDUFNFLG
BDUFRSTB EQU   BDUFNFLG
BDULEADG EQU   BDUFNFLG
BDUSTHDR EQU   BDUFNFLG
BDUCMND  EQU   IEDBDU
@NM00153 EQU   IEDPRUND+4
PRUTHEFI EQU   PRUFIDN
PRUTHUSS EQU   PRUFIDN
PRUTHEIU EQU   PRUFIDN
PRUTHBIU EQU   PRUFIDN
PRUTHTYE EQU   PRUFIDN
@NM00152 EQU   PRURHFG2
PRURHCSI EQU   PRURHFG2
@NM00151 EQU   PRURHFG2
PRURHCDI EQU   PRURHFG2
PRURHEB  EQU   PRURHFG2
PRURHBB  EQU   PRURHFG2
PRURHPI  EQU   PRURHFG1
@NM00150 EQU   PRURHFG1
PRURHER  EQU   PRURHFG1
PRURHDR2 EQU   PRURHFG1
@NM00149 EQU   PRURHFG1
PRURHDR1 EQU   PRURHFG1
PRURHEC  EQU   PRURHFG0
PRURHBC  EQU   PRURHFG0
PRURHFI  EQU   PRURHFG0
@NM00148 EQU   PRURHFG0
PRURUCAT EQU   PRURHFG0
PRURHTYP EQU   PRURHFG0
PRUNUNIT EQU   PRUTIC+1
@NM00147 EQU   PRUTIC
@NM00146 EQU   IEDPRUQD+4
PRF2SEQP EQU   PRF2WD2
@NM00145 EQU   IEDPF2+1
@NM00144 EQU   PRF2FLG2
PRF2SMI  EQU   PRF2FLG2
PRF2FORM EQU   PRF2FLG2
PRF2TNTI EQU   PRF2FLG2
PRF1RULN EQU   PRF1SEQP+2
PRF1TAG2 EQU   PRF1SQID+1
@NM00143 EQU   PRF1TAG1
PRF1TAGS EQU   PRF1TAG1
@NM00142 EQU   PRF1FLG1
PRF1LOGD EQU   PRF1FLG1
PRF1USS  EQU   PRF1FLG1
PRF1FORM EQU   PRF1FLG1
PRF1EXPI EQU   PRF1FLG1
PRF1FIDI EQU   PRF1FLG1
PRF1RH   EQU   IEDPF1
PRFDEST  EQU   IEDQPRF+40
PRFISEQ  EQU   IEDQPRF+38
PRFSTXT  EQU   PRFHQBCK
PRFNHDR  EQU   PRFCHDR
PRFCRCD  EQU   IEDQPRF+29
PRFSVSEQ EQU   PRFNTXT+1
PRFSVPRI EQU   PRFEOBOF
PRFISIZE EQU   PRFSCAN+1
@NM00141 EQU   PRFSCAN
PRFEOB   EQU   PRFXTRA+1
PRFSTSO  EQU   PRFXTRA
PRFNHDRN EQU   PRFSTAT1
PRFNLSTN EQU   PRFSTAT1
PRFLOCK  EQU   PRFEOFN
PRFDUPLN EQU   PRFSTAT1
PRFTSMSG EQU   PRFSTAT1
PRFITCPN EQU   PRFSTAT1
PRFERMGN EQU   PRFSTAT1
PRFCNCLN EQU   PRFSTAT1
PRFSVFLG EQU   @NM00140+3
PRFSIZE  EQU   PRFSVFFO+2
PRFSRCE  EQU   PRFSVFFO
PRFLCB   EQU   IEDQPRF+13
PRFPIUO  EQU   PRFPLQCB
PRFTI0   EQU   PRFTIC+1
@NM00139 EQU   PRFTICC
@NM00138 EQU   PRFTICC
@NM00137 EQU   PRFTICC
PRFTICON EQU   PRFTICC
@NM00136 EQU   PRFTICC
@NM00135 EQU   PRFTICC
PRFBFMM  EQU   PRFTICC
PRFEOMSG EQU   PRFTICC
PRFCOUNT EQU   PRFLINK+1
@NM00134 EQU   PRFLINK
PRFFLAGS EQU   PRFPRI
PRFIOADR EQU   PRFQCBA
PRFOPCDE EQU   PRFKEY
TRMOPT   EQU   IEDTRM+34
TRMOPTBL EQU   IEDQTRM+18
TRMOPNO  EQU   IEDQTRM+17
TRMCHCIN EQU   IEDQTRM+16
TRMSENSE EQU   TRMSTAT+3
TRMTEMPR EQU   TRMSTAT+2
TRMSIO   EQU   TRMSTAT
@NM00131 EQU   TRMDEVFL+1
TRMTPIN  EQU   TRMDEVFL+1
TRMNCPI  EQU   TRMDEVFL+1
TRMRNTRM EQU   TRMDEVFL+1
@NM00130 EQU   TRMDEVFL+1
TRMLMD   EQU   TRMDEVFL+1
TRMCONC  EQU   TRMDEVFL+1
TRMTSOB  EQU   TRMDEVFL
TRMBFDY  EQU   TRMDEVFL
TRMTBLK  EQU   TRMDEVFL
TRMSBLK  EQU   TRMDEVFL
TRMBLKS  EQU   TRMDEVFL
TRMADDC  EQU   TRMDEVFL
TRMDDIG  EQU   TRMDEVFL
TRMBUFS  EQU   TRMDEVFL
TRMPRILK EQU   TRMALTD
TRMLGB   EQU   TRMDSORG
TRMUTERM EQU   TLISTCNT
TRMDESTQ EQU   IEDQTRM+1
TRMSCNYN EQU   TRMSTATE
TRMOPTFN EQU   TRMSTATE
TRMHELDN EQU   TRMSTATE
TRMACPTN EQU   TRMSTATE
TRMPREF  EQU   TRMSTATE
TRMPROC  EQU   TRMLOG
TRMLIST  EQU   TRMLOG
TRMLINE  EQU   TRMSTATE
TRMSUBST EQU   IEDNTRM+12
TRMTYPE  EQU   IEDNTRM+11
TRMRLMCT EQU   IEDNTRM+10
TRMCOHTG EQU   TRMSIBPT+1
TRMGPCNT EQU   TRMSIBPT
TRMBUFRD EQU   TRMBYTE0
TRMSNA   EQU   TRMBYTE0
TRMGP    EQU   TRMBYTE0
TRMDIAL  EQU   TRMBYTE0
@NM00129 EQU   TRMBYTE0
TRMOUTPT EQU   TRMBYTE0
TRMUDEF  EQU   TRMBYTE0
TRMCOHRT EQU   IEDNTRM+4
TRMSTOTE EQU   TRMBYTE1
TRMCKPRN EQU   TRMBYTE1
TRMTSATN EQU   TRMBYTE1
TRMTRACE EQU   TRMBYTE1
TRMSWBCK EQU   TRMBYTE1
TRMAUTOC EQU   TRMBYTE1
TRMINPTP EQU   TRMBYTE1
TRMWTNEG EQU   TRMSCPRQ
TRMWRBRK EQU   TRMBYTE2
TRMNOSND EQU   TRMBYTE2
TRMPREP  EQU   TRMBYTE2
TRMGPACT EQU   TRMBYTE2
TRMANDL  EQU   TRMBYTE2
TRMCLOSN EQU   TRMINPG
TRMREMB  EQU   TRMBYTE2
OPCBOTTM EQU   IEDQOPCD+1172
@NM00128 EQU   IEDQOPCD+1088
@NM00127 EQU   IEDQOPCD+936
@NM00126 EQU   IEDQOPCD+928
@NM00125 EQU   IEDQOPCD+368
OPCWAITV EQU   IEDQOPCD+364
OPCTOTCK EQU   IEDQOPCD+360
OPCAPXTL EQU   IEDQOPCD+356
OPCDECR  EQU   IEDQOPCD+352
OPCBUFWT EQU   IEDQOPCD+348
OPCADGOT EQU   IEDQOPCD+318
OPCRQCNT EQU   IEDQOPCD+316
OPPOLSTP EQU   IEDQOPCD+312
OPCCKCIB EQU   IEDQOPCD+308
OPCEND   EQU   IEDQOPCD+307
OPCSTCBS EQU   IEDQOPCD+306
OPCOQSW  EQU   IEDQOPCD+301
@NM00124 EQU   OPCSPEC
@NM00123 EQU   OPCSPEC
@NM00122 EQU   OPCSPEC
@NM00121 EQU   OPCSPEC
OPCFRMCA EQU   OPCSPEC
OPCRSTRT EQU   OPCSPEC
OPCPART  EQU   OPCSPEC
OPCALTD  EQU   OPCSPEC
OPCBFEND EQU   IEDQOPCD+296
OPCBFIRS EQU   IEDQOPCD+292
OPCAVBUF EQU   IEDQOPCD+290
@NM00120 EQU   IEDQOPCD+289
OPCCLNTS EQU   IEDQOPCD+288
OPCHA8   EQU   IEDQOPCD+286
OPCBFREQ EQU   IEDQOPCD+284
OPCNEXT  EQU   IEDQOPCD+272
OPCFMDFC EQU   IEDQOPCD+268
OPCSCNC  EQU   IEDQOPCD+264
OPCHORTG EQU   IEDQOPCD+260
OPCHORT  EQU   IEDQOPCD+256
OPCCKPTL EQU   IEDQOPCD+252
OPCCKPTF EQU   IEDQOPCD+248
OPCWAITA EQU   IEDQOPCD+244
OPCWAITR EQU   IEDQOPCD+240
OPCWAITP EQU   IEDQOPCD+236
OPCWAITO EQU   IEDQOPCD+232
OPCWAITN EQU   IEDQOPCD+228
OPCWAITL EQU   IEDQOPCD+224
OPCWAITC EQU   IEDQOPCD+220
@NM00119 EQU   OPCLDNME+5
@NM00118 EQU   OPCLDNME
OPCWAIT  EQU   IEDQOPCD+192
OPCCKERB EQU   IEDQOPCD+164
OPCBFERB EQU   IEDQOPCD+148
OPCFLAG2 EQU   IEDQOPCD+147
OPCFLAG1 EQU   IEDQOPCD+146
OPCWRKSZ EQU   IEDQOPCD+144
OPCRSAVE EQU   IEDQOPCD+132
OPCQCBAD EQU   IEDQOPCD+128
OPCTRMWA EQU   IEDQOPCD+52
OPCPSTWT EQU   IEDQOPCD+48
OPCTNTEA EQU   IEDQOPCD+44
OPCPGCK  EQU   IEDQOPCD+40
OPCLCB   EQU   IEDQOPCD+36
@NM00117 EQU   IEDQOPCD+32
OPCIPLAD EQU   IEDQOPCD+28
OPCTOFLK EQU   IEDQOPCD+24
OPCOPTLK EQU   IEDQOPCD+20
OPCDCBLK EQU   IEDQOPCD+16
OPCDOUBL EQU   IEDQOPCD
@NM00116 EQU   OCLDNME+4
@NM00115 EQU   OCPREFLG
OCTOTEP  EQU   OCPREFLG
OCREPOST EQU   OCPREFLG
OCRSPSNT EQU   OCPREFLG
OCBFREQ  EQU   OCPREFLG
OCIDLE   EQU   OCREQFLG
OCFORCE  EQU   OCREQFLG
OCDCARD  EQU   OCREQFLG
OCPARTAL EQU   OCREQFLG
OCADNCP  EQU   OCREQFLG
@NM00114 EQU   OCREQFLG
@NM00113 EQU   OCREQFLG
OCFLUSHZ EQU   OCREQFLG
OCRESPCT EQU   OCLINTTE
OCCKPTWA EQU   OCCKDATA+4
@NM00110 EQU   OCRSTGTM+2
OCCKDAT2 EQU   OCRSTGTM+1
OCCKDAT1 EQU   OCRSTGTM
OCPUADR  EQU   OCIPLWA+2
OCWTGSAV EQU   OCIPLWA
OCDVRDCT EQU   OCBACKUP+6
OCNCP    EQU   OCBACKUP+4
OCBUFGOT EQU   OCBACKUP+2
OCBUFNED EQU   OCBACKUP
OCRESNUM EQU   OCPARM
OCSEQ    EQU   OCTRUNIT+2
@NM00109 EQU   OCRSID+1
OCNONE   EQU   OCALSTAT
OCSOME   EQU   OCALSTAT
OCALLFLG EQU   OCALSTAT
OCREDRVE EQU   OCALSTAT
OCSEQIND EQU   OCALSTAT
@NM00108 EQU   OCALSTAT
OCRENTRD EQU   OCALSTAT
OCWTGB   EQU   OCTIOT
@NM00107 EQU   @NM00106+2
OCCONID  EQU   OCDEST
OCRLN    EQU   IEDQOPCE+15
OCATTACH EQU   OCFLAG
OCSSCP   EQU   OCFLAG
OCOUTPUT EQU   OCFLAG
OCLINE   EQU   OCFLAG
OCMPP    EQU   OCFLAG
OCTOTE   EQU   OCFLAG
OCCONSOL EQU   OCFLAG
@NM00105 EQU   OCSWITCH
OCQUCKN  EQU   OCSWITCH
OCPRIFLG EQU   OCOPTCDE
@NM00104 EQU   OCRUDEST+1
@NM00103 EQU   OCSCAN
OCNOTUCB EQU   OCSCAN
OCNONAME EQU   OCSCAN
OCALLRLN EQU   OCSCAN
OCDDNAME EQU   OCSCAN
OCDDNRLN EQU   OCSCAN
OCADDR   EQU   OCSCAN
OCELMPTR EQU   OCELEM+1
OCELMPRI EQU   OCELEM
OCLINK   EQU   IEDQOPCE
SAVTBITN EQU   IEDNSVTD+312
@NM00102 EQU   SAVTCKQB+8
@NM00101 EQU   SAVTCKEC+1
@NM00100 EQU   SAVTCKCC
SAVTCKPO EQU   SAVTCKCC
SAVTCKWA EQU   SAVTCKCC
SAVTCKCH EQU   SAVTCKTB+1
SAVTCKVT EQU   SAVTCKTB
@NM00099 EQU   IEDNSVTD+297
SAVTRDFG EQU   SAVTRDRV+12
@NM00098 EQU   SAVTRDRV+5
SAVTRDPY EQU   SAVTRDRV+4
SAVTRDQB EQU   SAVTRDRV+1
SAVTRDKY EQU   SAVTRDRV
SAVTNID  EQU   IEDNSVTD+280
SAVTDVAS EQU   IEDNSVTD+276
SAVTPLSZ EQU   IEDNSVTD+274
@NM00097 EQU   IEDNSVTD+273
SAVTSUBL EQU   IEDNSVTD+272
@NM00096 EQU   SAVTZELM+1
SAVTSUBM EQU   SAVTZELM
SAVTMHDX EQU   IEDNSVTD+268
SAVTNAT1 EQU   IEDNSVTD+266
SAVTSH20 EQU   IEDNSVTD+264
SAVTLCBS EQU   IEDNSVTD+260
SAVTRNMP EQU   IEDNSVTD+256
SAVTTNTX EQU   IEDNSVTD+252
SAVTSUBV EQU   IEDNSVTD+247
SAVTSUBA EQU   IEDNSVTD+246
SAVTSIBC EQU   IEDNSVTD+244
SAVTBSM  EQU   IEDNSVTD+240
SAVTSCPT EQU   SAVTTCPU
SAVTRQTG EQU   IEDNSVTD+236
SAVTRQCH EQU   IEDNSVTD+232
SAVTMAND EQU   IEDNSVTD+228
SAVTSPLN EQU   IEDNSVTD+224
SAVTNADL EQU   IEDNSVTD+222
SAVTNATL EQU   IEDNSVTD+220
SAVTMHTB EQU   IEDNSVTD+216
SAVTSSMH EQU   IEDNSVTD+212
SAVTQRS  EQU   IEDNSVTD+208
SAVTRQIN EQU   IEDNSVTD+204
SAVTDFCO EQU   IEDNSVTD+200
SAVTSAO  EQU   IEDNSVTD+196
SAVTSARI EQU   IEDNSVTD+192
SAVTSAC  EQU   IEDNSVTD+188
SAVTSAI  EQU   IEDNSVTD+184
SAVTCSCI EQU   IEDNSVTD+180
SAVTSSRP EQU   IEDNSVTD+176
SAVTSSRQ EQU   IEDNSVTD+172
SAVTSCLU EQU   IEDNSVTD+168
SAVTXTRQ EQU   IEDNSVTD+164
@NM00095 EQU   IEDNSVTD+148
SAVTIPCQ EQU   IEDNSVTD+144
@NM00094 EQU   IEDNSVTD+136
SAVTXFMI EQU   IEDNSVTD+132
@NM00093 EQU   IEDNSVTD+124
SAVTXFMO EQU   IEDNSVTD+120
@NM00092 EQU   IEDNSVTD+116
SAVTSSSR EQU   IEDNSVTD+112
SAVTSCPQ EQU   IEDNSVTD+108
SAVTSLCB EQU   IEDNSVTD+104
SAVTLUSR EQU   IEDNSVTD+100
@NM00091 EQU   SAVTLUSQ+8
SAVTLUSP EQU   SAVTLUSQ+4
SAVTLUSB EQU   SAVTLUSQ
@NM00090 EQU   IEDNSVTD+84
SAVTSAT  EQU   IEDNSVTD+80
SAVTNAT  EQU   IEDNSVTD+76
SAVTCLUP EQU   IEDNSVTD+72
SAVTPIUT EQU   IEDNSVTD+68
SAVTRNTA EQU   IEDNSVTD+64
SAVTDNIR EQU   IEDNSVTD+60
SAVTCNIR EQU   IEDNSVTD+56
SAVTFLDH EQU   IEDNSVTD+52
SAVTSRTN EQU   IEDNSVTD+48
SAVTSREQ EQU   IEDNSVTD+44
SAVTFAIL EQU   IEDNSVTD+42
SAVTSUSE EQU   IEDNSVTD+40
SAVTSIB  EQU   IEDNSVTD+36
SAVTPRTN EQU   IEDNSVTD+32
@NM00089 EQU   IEDNSVTD+28
SAVTWH20 EQU   IEDNSVTD+26
SAVTPWT  EQU   IEDNSVTD+24
SAVTPRTQ EQU   IEDNSVTD+20
SAVTPREQ EQU   IEDNSVTD+16
SAVTPH20 EQU   IEDNSVTD+14
SAVTPUSE EQU   IEDNSVTD+12
SAVTPLCB EQU   IEDNSVTD+8
SAVTPOOL EQU   IEDNSVTD+4
SAVTPRMT EQU   SAVTDIAF
SAVTVIRT EQU   SAVTDIAF
AVTCPBNO EQU   IEDQAVTD+1244
AVTHRESS EQU   IEDQAVTD+1243
@NM00088 EQU   IEDQAVTD+1242
@NM00087 EQU   IEDQAVTD+1241
@NM00086 EQU   IEDQAVTD+1240
@NM00085 EQU   IEDQAVTD+1237
@NM00084 EQU   IEDQAVTD+1236
AVTHRESE EQU   @NM00083
AVTRADDR EQU   IEDQAVTD+1228
AVTNADDR EQU   IEDQAVTD+1224
AVTHRESN EQU   IEDQAVTD+1220
AVTVOLRN EQU   IEDQAVTD+1216
AVTTOTNN EQU   IEDQAVTD+1212
AVTTRCYN EQU   IEDQAVTD+1208
AVTRCTRN EQU   IEDQAVTD+1204
AVTNOVON EQU   IEDQAVTD+1200
AVTADEBN EQU   IEDQAVTD+1196
AVTVOLRR EQU   IEDQAVTD+1192
AVTTOTNR EQU   IEDQAVTD+1188
AVTTRCYR EQU   IEDQAVTD+1184
AVTRCTRR EQU   IEDQAVTD+1180
AVTNOVOR EQU   IEDQAVTD+1176
AVTADEBR EQU   IEDQAVTD+1172
AVTLODPT EQU   IEDQAVTD+1168
AVTIOBN  EQU   IEDQAVTD+1164
AVTIOBR  EQU   IEDQAVTD+1160
AVTCPBPT EQU   IEDQAVTD+1156
AVTFCPB  EQU   IEDQAVTD+1152
@NM00082 EQU   IEDQAVTD+1148
AVTINCPQ EQU   IEDQAVTD+1144
@NM00081 EQU   IEDQAVTD+1140
@NM00080 EQU   IEDQAVTD+1137
@NM00079 EQU   AVTBIT4
@NM00078 EQU   AVTBIT4
@NM00077 EQU   AVTBIT4
@NM00076 EQU   AVTBIT4
@NM00075 EQU   AVTBIT4
@NM00074 EQU   AVTBIT4
@NM00073 EQU   AVTBIT4
AVTRUFTN EQU   AVTBIT4
@NM00072 EQU   IEDQAVTD+1132
AVTNOBFQ EQU   IEDQAVTD+1128
@NM00071 EQU   IEDQAVTD+1124
AVTDKENQ EQU   IEDQAVTD+1120
@NM00070 EQU   IEDQAVTD+1116
AVTDKAPQ EQU   IEDQAVTD+1112
AVTCOPY  EQU   IEDQAVTD+1108
AVTIA    EQU   IEDQAVTD+1104
AVTFL    EQU   IEDQAVTD+1100
@NM00069 EQU   IEDQAVTD+1096
AVTNCPBQ EQU   IEDQAVTD+1092
AVTTOTNC EQU   IEDQAVTD+1088
AVTCMAX  EQU   IEDQAVTD+1084
AVTCMIN  EQU   IEDQAVTD+1080
AVTHM02  EQU   IEDQAVTD+1076
AVTOPCIN EQU   IEDQAVTD+1074
AVTDCTLN EQU   IEDQAVTD+1072
AVTOPMSK EQU   IEDQAVTD+1068
AVTDDFT  EQU   IEDQAVTD+1064
AVTSTEAL EQU   IEDQAVTD+1060
AVTOPTN  EQU   IEDQAVTD+1056
AVTDSKCT EQU   IEDQAVTD+1054
AVTCKRST EQU   IEDQAVTD+1053
AVTSTAN  EQU   AVTBIT3
AVTSTACN EQU   AVTBIT3
AVTSTAYN EQU   AVTBIT3
AVTOLTBN EQU   AVTBIT3
AVTTSAB  EQU   AVTBIT3
AVTRFULN EQU   AVTBIT3
AVTRECVN EQU   AVTBIT3
@NM00068 EQU   AVTBIT2
@NM00067 EQU   AVTBIT2
AVTOPEIN EQU   AVTBIT2
AVTSTRTN EQU   AVTBIT2
AVTTOPOL EQU   AVTBIT2
AVTCOPYN EQU   AVTBIT2
AVTREUSN EQU   AVTBIT2
AVTEXTSC EQU   AVTBIT2
AVTDISKN EQU   AVTBIT1
AVTQUCKN EQU   AVTBIT1
AVTCLOSN EQU   AVTBIT1
AVTREADN EQU   AVTBIT1
AVTDLAYN EQU   AVTBIT1
AVTAQTAN EQU   AVTBIT1
AVTTSON  EQU   AVTBIT1
AVTAPLKN EQU   AVTBIT1
AVTDUMBR EQU   IEDQAVTD+1048
AVTDLQX  EQU   IEDQAVTD+1046
AVTINTLV EQU   IEDQAVTD+1044
AVTSMCNT EQU   IEDQAVTD+1042
AVTAVFCT EQU   IEDQAVTD+1040
AVTOPCON EQU   IEDQAVTD+1038
AVTOPCNT EQU   IEDQAVTD+1036
AVTLNCNT EQU   IEDQAVTD+1034
AVTHA16  EQU   IEDQAVTD+1030
AVTHA7   EQU   IEDQAVTD+1028
AVTHA4   EQU   IEDQAVTD+1026
AVTHA3   EQU   IEDQAVTD+1024
AVTHA2   EQU   IEDQAVTD+1022
AVTGETMS EQU   IEDQAVTD+1021
@NM00066 EQU   IEDQAVTD+1020
AVTGETMD EQU   IEDQAVTD+1016
AVTGETMN EQU   IEDQAVTD+1012
AVTCWTOT EQU   IEDQAVTD+1008
AVTCWINT EQU   IEDQAVTD+956
AVTDTRAP EQU   IEDQAVTD+952
@NM00065 EQU   IEDQAVTD+950
@NM00064 EQU   AVTIOTR
AVTIOTRH EQU   AVTIOTR
AVTIOTRE EQU   AVTIOTR
@NM00063 EQU   AVTSUBT
AVTSUBPT EQU   AVTSUBT
AVTSUBON EQU   AVTSUBT
AVTAFE30 EQU   IEDQAVTD+944
AVTAFE20 EQU   IEDQAVTD+940
AVTAFE10 EQU   IEDQAVTD+936
AVTCWEC2 EQU   IEDQAVTD+932
AVTCWPM2 EQU   IEDQAVTD+928
AVTCWTS2 EQU   IEDQAVTD+927
AVTCWTS1 EQU   IEDQAVTD+926
AVTCWCLD EQU   AVTCWFL2
AVTCWRAP EQU   AVTCWFL2
@NM00062 EQU   AVTCWFL2
@NM00061 EQU   AVTCWFL2
@NM00060 EQU   AVTCWFL2
@NM00059 EQU   AVTCWFL2
@NM00058 EQU   AVTCWFL2
AVTCWACT EQU   AVTCWFL2
@NM00057 EQU   AVTCWFL1
@NM00056 EQU   AVTCWFL1
@NM00055 EQU   AVTCWFL1
@NM00054 EQU   AVTCWFL1
@NM00053 EQU   AVTCWFL1
@NM00052 EQU   AVTCWFL1
@NM00051 EQU   AVTCWFL1
AVTCOMWN EQU   AVTCWFL1
AVTCWEC1 EQU   IEDQAVTD+920
AVTCWPM1 EQU   IEDQAVTD+916
AVTCAREA EQU   IEDQAVTD+912
AVTFZERO EQU   IEDQAVTD+908
AVTCADDR EQU   IEDQAVTD+904
AVTCOREC EQU   IEDQAVTD+900
@NM00050 EQU   IEDQAVTD+892
AVTCPBCB EQU   IEDQAVTD+888
@NM00049 EQU   IEDQAVTD+880
AVTDSIOB EQU   IEDQAVTD+876
@NM00048 EQU   IEDQAVTD+868
AVTCPRMB EQU   IEDQAVTD+864
@NM00047 EQU   IEDQAVTD+856
AVTCLOSB EQU   IEDQAVTD+852
@NM00046 EQU   IEDQAVTD+844
AVTACTIB EQU   IEDQAVTD+840
@NM00045 EQU   IEDQAVTD+836
AVTOLTEB EQU   IEDQAVTD+832
AVTOLTCH EQU   AVTOLTQB+1
AVTOLTVT EQU   AVTOLTQB
@NM00044 EQU   AVTOPCQB+8
@NM00043 EQU   AVTOPCEC+1
@NM00042 EQU   AVTOPCCC
AVTOPCPO EQU   AVTOPCCC
AVTOPCWA EQU   AVTOPCCC
AVTOPCCH EQU   AVTOPCOB+1
AVTOPCVT EQU   AVTOPCOB
@NM00041 EQU   AVTCKPQB+9
AVTCKPTS EQU   AVTCKPQB+8
@NM00040 EQU   AVTCKPEC+1
@NM00039 EQU   AVTCKPCC
AVTCKPPO EQU   AVTCKPCC
AVTCKPWA EQU   AVTCKPCC
AVTCKPCH EQU   AVTCKPTB+1
AVTCKPVT EQU   AVTCKPTB
@NM00038 EQU   IEDQAVTD+796
AVTBFRTB EQU   IEDQAVTD+792
@NM00037 EQU   IEDQAVTD+784
AVTBFREB EQU   IEDQAVTD+780
AVTTIMQ  EQU   IEDQAVTD+776
@NM00036 EQU   IEDQAVTD+772
AVTIMQPS EQU   IEDQAVTD+768
AVTINOUT EQU   IEDQAVTD+766
AVTREFTM EQU   IEDQAVTD+764
@NM00035 EQU   IEDQAVTD+752
AVTDELYB EQU   IEDQAVTD+748
AVTOCQPT EQU   IEDQAVTD+744
AVTTSOPT EQU   IEDQAVTD+740
AVTSUPPT EQU   IEDQAVTD+736
AVTCBQCB EQU   IEDQAVTD+732
AVTMSGS  EQU   IEDQAVTD+729
@NM00034 EQU   AVTSYSER
@NM00033 EQU   AVTSYSER
@NM00032 EQU   AVTSYSER
@NM00031 EQU   AVTSYSER
@NM00030 EQU   AVTSYSER
@NM00029 EQU   AVTSYSER
AVTCMAXN EQU   AVTSYSER
AVTCMINN EQU   AVTSYSER
AVT2260L EQU   IEDQAVTD+724
AVTABEPL EQU   AVTADBUF
AVTHFF   EQU   AVTCLRHI+2
@NM00028 EQU   AVTCLRHI
AVTCCLNK EQU   AVTCRELE+5
AVTCCPRI EQU   AVTCRELE+4
AVTCCQCB EQU   AVTCCELE+1
AVTCCKEY EQU   AVTCCELE
AVTDELAD EQU   IEDQAVTD+704
AVTDELEM EQU   IEDQAVTD+700
AVTBSX   EQU   AVTCKLNK
AVTOPETR EQU   AVTHG01
@NM00027 EQU   AVTCKBYT
AVTCKONQ EQU   AVTCKBYT
@NM00026 EQU   AVTCKBYT
@NM00025 EQU   AVTCKBYT
@NM00024 EQU   AVTCKBYT
@NM00023 EQU   AVTCKBYT
@NM00022 EQU   AVTCKBYT
@NM00021 EQU   AVTCKBYT
AVTOPERT EQU   IEDQAVTD+690
AVTOPXCL EQU   IEDQAVTD+688
AVTOPERL EQU   IEDQAVTD+687
@NM00020 EQU   IEDQAVTD+686
AVTCKTIM EQU   IEDQAVTD+684
AVTCKELV EQU   IEDQAVTD+682
AVTCPRCD EQU   IEDQAVTD+681
AVTWARMN EQU   AVTCKELF
AVTCRTLN EQU   AVTCKELF
AVTCPIPN EQU   AVTCKELF
AVTCCLCN EQU   AVTCKELF
AVTCINCN EQU   AVTCKELF
@NM00019 EQU   AVTCKELF
AVTCMCPN EQU   AVTCKELF
AVTCRDYN EQU   AVTCKELF
AVTCKQAD EQU   IEDQAVTD+677
AVTSCBSZ EQU   IEDQAVTD+676
@NM00018 EQU   IEDQAVTD+672
AVTCKELE EQU   IEDQAVTD+668
@NM00017 EQU   AVTCKPEL+8
AVTCKRLK EQU   AVTCKPEL+5
AVTCKRPR EQU   AVTCKPEL+4
AVTCKRMQ EQU   AVTCKRMV+1
AVTCKRKY EQU   AVTCKRMV
AVTHK    EQU   IEDQAVTD+648
AVTHI    EQU   IEDQAVTD+644
AVTIOT   EQU   IEDQAVTD+640
AVTNX    EQU   IEDQAVTD+636
AVTTONE  EQU   IEDQAVTD+632
AVTA3TL  EQU   IEDQAVTD+628
AVTDMECB EQU   IEDQAVTD+624
AVTABEND EQU   IEDQAVTD+618
AVTPLCBN EQU   IEDQAVTD+616
@NM00016 EQU   AVTSAVTP+1
@NM00015 EQU   AVTSAVTF
AVTSNA   EQU   AVTSAVTF
AVTONSNA EQU   AVTSAVTF
AVTVTMCP EQU   AVTSAVTF
@NM00014 EQU   IEDQAVTD+608
AVTCMBSS EQU   IEDQAVTD+604
AVTRCV   EQU   IEDQAVTD+600
AVTSEND  EQU   IEDQAVTD+596
AVTCSCH  EQU   IEDQAVTD+592
AVTQ1    EQU   IEDQAVTD+588
AVTE7    EQU   IEDQAVTD+584
AVTHB    EQU   IEDQAVTD+580
AVTR1    EQU   IEDQAVTD+576
AVTBZ    EQU   IEDQAVTD+572
AVTEZ    EQU   IEDQAVTD+568
AVTEC    EQU   IEDQAVTD+564
AVTEW    EQU   IEDQAVTD+560
AVTNDIAL EQU   AVTSCOPT
AVTN2741 EQU   AVTSCOPT
AVTCONCO EQU   AVTSCOPT
AVTCONC  EQU   AVTSCOPT
AVTCMBUF EQU   AVTSCOPT
AVTAPDMP EQU   AVTSCOPT
@NM00013 EQU   AVTSCOPT
AVTHA    EQU   AVTDISP
AVTEA    EQU   IEDQAVTD+548
AVTAX    EQU   IEDQAVTD+544
AVTA3    EQU   IEDQAVTD+540
AVTGD    EQU   IEDQAVTD+536
AVTAL    EQU   IEDQAVTD+532
AVTOLTST EQU   AVTHG02
AVTE8    EQU   IEDQAVTD+524
AVTUI    EQU   IEDQAVTD+520
AVTCOMPT EQU   IEDQAVTD+516
AVTCRSRF EQU   IEDQAVTD+512
@NM00012 EQU   IEDQAVTD+508
AVTKA02  EQU   IEDQAVTD+504
AVTOPTPT EQU   IEDQAVTD+500
AVTPCBPT EQU   IEDQAVTD+496
AVTOSECB EQU   IEDQAVTD+492
AVTOPECA EQU   IEDQAVTD+488
AVTOLECA EQU   IEDQAVTD+484
AVTCKECA EQU   IEDQAVTD+480
AVTCWECA EQU   IEDQAVTD+476
AVTCWTCB EQU   IEDQAVTD+472
AVTOLTCB EQU   IEDQAVTD+468
AVTOCTCB EQU   IEDQAVTD+464
AVTCKTCB EQU   IEDQAVTD+460
AVTAS    EQU   IEDQAVTD+456
AVTNOLBF EQU   IEDQAVTD+454
AVTNCKPR EQU   IEDQAVTD+453
AVTCIB   EQU   IEDQAVTD+452
AVTSPLPT EQU   IEDQAVTD+448
AVTMVBFR EQU   IEDQAVTD+444
AVTSBTA  EQU   IEDQAVTD+440
AVTRARTN EQU   IEDQAVTD+436
AVTBSCAN EQU   IEDQAVTD+432
AVTRDYA  EQU   IEDQAVTD+428
AVTDISTR EQU   IEDQAVTD+420
AVTPARM3 EQU   IEDQAVTD+416
@NM00011 EQU   AVTPKF
@NM00010 EQU   AVTPKF
@NM00009 EQU   AVTPKF
AVTFTCHF EQU   AVTPKF
@NM00008 EQU   AVTPKF
@NM00007 EQU   AVTPKF
@NM00006 EQU   AVTPKF
@NM00005 EQU   AVTPKF
AVTPARM  EQU   IEDQAVTD+408
AVTEXS2A EQU   IEDQAVTD+402
AVTEXA2S EQU   IEDQAVTD+396
AVTOCGET EQU   IEDQAVTD+392
AVTCKAVT EQU   @NM00003+1
@NM00004 EQU   AVTCKFLG
AVTCKHLT EQU   AVTCKFLG
AVTCKREQ EQU   AVTCKFLG
AVTCKENV EQU   AVTCKFLG
AVTCKNAC EQU   AVTCKFLG
AVTCKTAC EQU   AVTCKFLG
@NM00002 EQU   IEDQAVTD+384
AVTREADD EQU   IEDQAVTD+380
AVTREADY EQU   IEDQAVTD+376
AVTRACE  EQU   IEDQAVTD+372
AVTTCB   EQU   IEDQAVTD+368
AVTPASWD EQU   IEDQAVTD+360
AVTCTLCH EQU   IEDQAVTD+352
AVTDOUBL EQU   IEDQAVTD+344
AVTDOUBX EQU   IEDQAVTD+336
AVTDPARM EQU   IEDQAVTD+332
AVTCSTCS EQU   IEDQAVTD+328
AVTDLQ   EQU   AVTSAVEX+32
@NM00001 EQU   AVTSAVEX
AVTSAVE4 EQU   IEDQAVTD+216
AVTSAVE3 EQU   IEDQAVTD+144
AVTSAVE2 EQU   IEDQAVTD+72
AVTSAVE1 EQU   IEDQAVTD
*                                      END UNREFERENCED COMPONENTS
@RT00360 EQU   AICHNG1
@RT00377 EQU   ERREXIT
@RT00381 EQU   SWTCHID
@RT00432 EQU   ERREXIT
@RT00435 EQU   MOVPOLL
@RF00440 EQU   RCRDSRCH
@RT00457 EQU   UPDFROM
@RT00465 EQU   UPDFROM
@RF00465 EQU   ERREXIT
@RT00476 EQU   MOVIT
@RT00481 EQU   PROCNXT
@RT00518 EQU   ALLDONE
@RF00547 EQU   XCTL
@RC00549 EQU   XCTL
@RF00590 EQU   @EL00001
@EL01    EQU   @EL00001
@ENDDATA EQU   *
@DATEND  EQU   *
         END   IGCI210D,(C'PLS0244',0701,76364)
