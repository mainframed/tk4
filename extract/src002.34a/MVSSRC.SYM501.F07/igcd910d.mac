         TITLE 'IGCD910D - DISPLAY LINE COMMANDS'
IGCD910D CSECT
***********************************************************************
*                                                                     *
*TITLE--'IGCD910D PROCESSOR OF DISPLAY LINE COMMANDS                  *
*                                                                     *
*STATUS--CHANGE LEVEL 10                                       @Y17XARX
*                                                                     *
*FUNCTION -- THIS ROUTINE PROCESSES OPERATOR CONTROL COMMANDS WHICH   *
*   REQUEST DISPLAY OF THE LCB FIELDS FOR A SPECIFIED LINE.           *
*                                                                     *
*   WHEN ENTERED IGCD010D THE 'DISPLAY' SCAN/MAP/DISPATCH ROUTINE WILL*
*   HAVE VALIDITY CHECKED THE OPERANDS IN THE COMMAND AND IF VALID    *
*   XCTLS TO THIS ROUTINE TO PROCESS THE COMMAND. IF ANY ERRORS WERE  *
*   FOUND ONE OF THE FOLLOWING ERROR MESSAGES WOULD HAVE BEEN WRITTEN *
*   OUT BY THE ERROR WRITER IGC0310D.                                 *
*                                                                     *
*   IT OBTAINS FROM THE OPERATOR CONTROL ELEMENT (OPCE) IN THE OCELEM *
*   FIELD THE ASSOCIATED DCB ADDRESS. LCB ADDRESS IS DETERMINED FROM  *
*   DCBIOBAD+(DCBEIOBX*RELATIVE LINE)-LENGTH OF AN IOB.  THE LCB      *
*   STATUS BYTE IS OBTAINED AND IF ANY BITS ARE ON THE STATUS         *
*   CONVERSION TABLE IS USED TO CONVERT THEIR VALUES TO PRINTABLE     *
*   DATA AND PLACE THESE EQUIVALENTS IN THE RESPONSE.  OTHERWISE      *
*   'NO BITS ON' IS PLACED IN THE RESPONSE.                           *
*                                                                     *
*   THE SCB IS THEN OBTAINED FROM THE LCB AND THE ERROR WORD IS       *
*   CONVERTED BY USE OF AN ERROR CONVERSION TABLE AND PRINTABLE       *
*   EQUIVALENTS ARE PLACED IN THE RESPONSE.  IF NO BITS ARE ON,       *
*   THIS INDICATOR IS PLACED IN THE MESSAGE.  THE ROUTINE RETURNS     *
*   TO THE MESSAGE WRITER ROUTINE IGC0710D.                           *
*                                                                     *
*ENTRY POINTS --                                                      *
*        'IGCD910D' TO PROCESS DISPLAY LINE STATUS COMMANDS           *
*                                                                     *
*INPUT-- REGISTER 1 - ADDRESS OF OPCAVT                               *
*        OPCAVT                                                       *
*           OPCCOPCE - ADDRESS OF CURRENT ELEMENT (OPCE)              *
*           OPCWORK - ADDRESS OF OPERATOR CONTROL RESIDENT WORK AREA  *
*                                                                     *
*        OPCE                                                         *
*          OCELEM - ADDRESS OF DCB                             @Y17XARX
*          OCLINK - ADDRESS OF LINE TTE                        @Y17XARX
*           OCSWITCH - X'40' LINE ADDRESS                      @Y17XARX
*                      X'00' GROUPNAME,RLN                            *
*           OCRLN - RLN                                        @Y17XARX
*           OCBACKUP - DDNAME OR LINE ADDRESS                  @Y17XARX
*                                                                     *
*OUTPUT-- REGISTER 1 - ADDRESS OF OPCAVT                              *
*                                                                     *
*        OPCAVT                                                       *
*           OPCWORK - ADDRESS OF RESIDENT WORK AREA                   *
*        RESIDENT WORK AREA CONTAIN RESPONSE MESSAGE                  *
*                                                                     *
*EXTERNAL ROUTINES -- N/A                                             *
*                                                                     *
*EXITS,NORMAL -- COMMAND IS PROCESSED.  A RESPONSE MESSAGE SO         *
*   INDICATING IS CONSTRUCTED AND ITS ADDRESS RETURNED TO THE         *
*   MESSAGE WRITER ROUTINE IGC0710D                                   *
*                                                                     *
*   NORMAL EXIT MESSAGES ARE-                                         *
*   IED032I 'GRPNAME,RLN/ADDRESS' LNSTAT='STATUS,...' ERR='ERROR,...' *
*                                                                     *
*EXITS,ERROR-- GENERATED BY IGCD010D                                  *
*                                                                     *
*   ERROR MESSAGES ARE-                                               *
*   IED017I LINE 'GRPNAME,RLN/ADDRESS' NOT OPEN --GENERATED BY        *
*   IGCD010D                                                          *
*                                                                     *
*TABLES/WORK AREAS--STATUS CONVERSION TABLE,OPCAVT,TCAM AVT,LCB,OPCE, *
*   DCB,DEB,SCB,QCB                                                   *
*                                                                     *
*ATTRIBUTES-- SERIALLY REUSABLE,DISABLED,TRANSIENT(TYPE 4),SUPERVISOR *
*   MODE,NON-REENTRANT,REFRESHABLE                                    *
*                                                                     *
*CHARACTER CODE DEPENDENCY                                            *
*        THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL        *
*        REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS        *
*        EQUIVALENT TO THE ONE USED AT ASSEMBLY TIME.  THE CODING     *
*        HAS BEEN ARRANGED SO THAT REDEFINITION OF CHARACTER          *
*        CONSTANTS, BY REASSEMBLY WILL RESULT IN A CORRECT MODULE     *
*        FOR THE NEW DEFINITION.                                      *
*                                                                     *
*NOTES   COMMUNICATIONS BETWEEN THE VARIOUS TRANSIENT MODULES IS      *
*        PRIMARILY THROUGH THE OPERATOR CONTROL AVT.                  *
*                                                                     *
*        THIS IS A MODULE RE-WRITE OF IEDQCI AS OF OS/TCAM LEVEL II   *
*                                                                     *
*CHANGE ACTIVITY                                               @Y17XARX
*A000000-999999                                                  S99240
*A200000,204000,262000,286000,290000,300000,572000,636000        S22024
*A216000,390000,450000                                           S22024
*D268000,270000,360000,368000                                    S22024
*C014000,197000                                                  S22024
*A631940                                                         Y06328
*C462000,524000,532000,540000,650000,656000,662000,672000        Y06328
*D217200                                                         Y06328
*A082000,169000,573840,688000,669600                           @Y17XARX
*C014000,082000,084000,088000,090000,573520,572420-572620      @Y17XARX
*C573220-573350                                                @Y17XARX
*D005000-005803,572420-572860,573220-573360,688400,688800      @Y17XARX
*D698200,706000                                                @Y17XARX
***********************************************************************
*
         EJECT
*        REGISTER EQUATES
RZERO    EQU   0                        REGISTER                 S22024
RPARM    EQU   1                        PARAMETER REGISTER       S22024
ROPCAVT  EQU   2                        BASE FOR OPC AVT         S22024
ROPCE    EQU   3                        BASE FOR OPC ELEMENT     S22024
RWKAREA  EQU   13                       BASE FOR OPC WORKAREA    S22024
R0       EQU   0                        WORK
R1       EQU   1                        PARAMETER
ROPC     EQU   2                        OPERATOR CONTROL AVT BASE
RAVT     EQU   4                        AVT BASE
RWORK    EQU   5                        WORK
RPRF     EQU   5                        BASE FOR BUFFER UNIT     S22024
RTCB     EQU   6                        TCB BASE
RDEB     EQU   6                        DEB BASE
RBTU     EQU   6                        BTU BASE REGISTER        S22024
RDCB     EQU   7                        DCB BASE
RWORK3   EQU   8                        WORK
RTERM    EQU   8                        TERMINAL ENTRY BASE REG  S22024
RLCB     EQU   9                        LCB BASE
ROFF     EQU   10                       OFFSET TO DDNAME
RCTR     EQU   10                       COUNTER
RTBL     EQU   10                       WORK TABLE
RRLN     EQU   11                       BASE FOR RLN
RUCB     EQU   11                       UCB BASE
RIDLEN   EQU   11                       BTU ID TXT LENGTH        S22024
RBASE    EQU   12                       ROUTINE BASE
R13      EQU   13                       SAVE AREA
RRETURN  EQU   14                       RETURN REGISTER
R14      EQU   14                       RETURN
R15      EQU   15                       ENTRY POINT
RWORK2   EQU   15                       WORK
         USING IEDQAVTD,RAVT            ADDRESSABILITY FOR AVT
         USING IEDQLCB,RLCB             ADDRESSABILITY FOR LCB
         USING IHADCB,RDCB              ADDRESSABILITY FOR DCB
         USING DEBNMSUB,RDEB            ADDRESSABILITY FOR DEB
         USING IEDQOPCD,ROPCAVT         ADDR FOR OP CTL AVT      S22024
         USING IEDQOPCE,ROPCE           ADDR FOR OP CTL ELEMENT  S22024
         USING IEDPRUND,RPARM           SET UP PRU ADDRESS     @Y17XARX
         USING IEDNTRM,RTERM            TERM ADDRESSABILITY    @Y17XARX
         BALR  RBASE,ZERO               ESTABLISH ADDRESSABILITY
         USING   *,RBASE
IGCD910D IEDHJN SKIPID
         LR    ROPC,R1
         L     RAVT,OPCAVTPT            GET AVT ADDRESS
         L     RDCB,OCELEM               GET ADDR OF DCB         S22024
         L     ROPCE,OPCCOPCE           GET ADDR OF OPC ELEMENT
         L     RWKAREA,OPCWORK          GET ADDR OF OPC WORKAREA
         TM    OCFLAG,OCRESP            RESPONSE BTU COMING BACK S22024
         BO    RSPBTU                   YES  CHECK DATA          S22024
         TM    DCBDSORG+ONE,A3705       IS DCB FOR A 3705 ?      S22024
         BO    ERR3705                  YES, INVALID FOR 3705    S22024
         TM    DCBDSORG,TXLGB           3705 CMD ?               S22024
         BO    CMD3705                  YES                      S22024
         SR    RZERO,RZERO              CLEAR REGISTER FOR INSERT CHAR
         IC    RZERO,OCRLN              INSERT RLN
         L     RLCB,DCBIOBAD            GET IOB
         LA    RLCB,OPCZERO(RLCB)       CLEAR HIGH BYTE
         SR    R1,R1                    CLEAR
         IC    R1,DCBEIOBX              GET IOB LENGTH
         MR    R0,R0                    MULTIPLY IOB BY RLN
         AR    RLCB,R1                  ADD RESULT TO IOB ADDR
         LA    RWORK3,LCBFLAG1-IEDQLCB  GET LENGTH OF IOB
         SR    RLCB,RWORK3              GET TO LCB START
         LA    RRETURN,NOT3705          BRANCH POINT             S22024
PROCESS1 EQU   *
         LA    R1,MSG                   GET ADDR OF MSG
MSGMOVE  EQU   *
         SR    RDEB,RDEB                CLEAR REGISTER
         IC    RDEB,LENOFF(R1)          GET LENGTH OF MSG
         STH   RDEB,LENOFF(RWKAREA)     STORE LENGTH IN WKAREA
         BCTR  RDEB,ZERO                DECREMENT FOR EXECUTE
         EX    RDEB,MOVEMSG             MOVE MSG INTO WORKAREA
         MVC   STATOFF(OPCSEVEN,RWKAREA),LNSTATID INSERT IN MSG  S22024
         MVI   STRSTAT(RWKAREA),BLANK   CLEAR OUTPUT AREA FOR    S22024
*                                       LINE STATUS TO BLANKS    S22024
         MVC   STRSTAT+ONE(CLEARLEN,RWKAREA),STRSTAT(RWKAREA)    S22024
         MVC   ERROFF(OPCFOUR,RWKAREA),ERRID INSERT IN MSG       S22024
         BR    RRETURN                   BRANCH TO PROPER CODE   S22024
NOT3705  EQU   *                                                 S22024
         SR    R0,R0                    CLEAR REGISTER
         IC    R0,OCRLN                 GET RLN
         SR    RWORK,RWORK              CLEAR FOR LOAD
         LH    RWORK,LCBSTATE           GET STATUS BYTES
         STH   RWORK,OCLINK+TWO         SAVE FOR ACCESS LATER
         LTR   RWORK,RWORK              ANY BITS ON
         BNZ   GETBYTE                  YES - PROCESS THEM
*
SETNO    EQU   *
         MVC   GOOD(OPCTEN,RWKAREA),NOBITS SET NOBITSON IN MSG
         B     PROC                     PROCESS SCB ERROR WORD
*
GETBYTE  EQU   *
         LA    RWORK,OCLINK+TWO         GET ADDR OF STATUS
         LA    RWORK2,OPCTWO
         LA    RWORK3,BYTE1             GET BIT TBL ADDR
         LA    RTBL,GOOD(RWKAREA)       GET MSG ADDR
         LA    RRETURN,PROC             PROCESS SCB ERROR WORD   S22024
*                                       AFTER STATUS CHECK       S22024
CHKSTAT  EQU   *                                                 S22024
         SR    R1,R1                    CLEAR
STATCLI  EQU   *
         CLI   OPCZERO(RWORK3),AVTEFF   END OF TABLE
         BE    NEXTST                   GO GET TABLE
*
         IC    R1,OPCZERO(RWORK3)       GET BIT VALUE
         EX    R1,TM                    IS THIS BIT ON
         BO    PUTST                    YES - PUT ITS TAG IN MSG
*
         LA    RWORK3,OPCTHREE(RWORK3)  BUMP TO NEXT BIT VALUE
         B     STATCLI                  CONTINUE SEARCH
*
*
NEXT     EQU   *
         LA    RWORK3,ONE(RWORK3)       GET NEXT TABLE ADDR      S22024
         B     STATCLI                  CONTINUE SEARCH
*
PUTST    EQU   *
         MVC   OPCZERO(OPCTWO,RTBL),OPCONE(RWORK3) PUT VALUEIN MSG
         LA    RTBL,OPCTHREE(,RTBL)     BUMP TO NEXT BIT
         LA    RWORK3,OPCTHREE(,RWORK3) BUMP MSG ADDR
         B     STATCLI                  CONTINUE SEARCH
*
NEXTST   EQU   *                        SET COUNTER              S22024
         LA    RWORK,OPCONE(RWORK)      SET COUNTER              S22024
         BCT   RWORK2,NEXT              DO NEXT STATUS TABLE     S22024
PROCESS2 EQU   *
         LA    RWORK,GOOD(RWKAREA)      RESET MSG ADDR
         CR    RTBL,RWORK               ANY BITS FOUND
         BCR   FOUND,RRETURN            YES, CONTINUE            S22024
         MVC   GOOD(OPCTEN,RWKAREA),NOBITS SET NO BITS ON IN MSG S22024
         BR    RRETURN                  CONTINUE                 S22024
*
PROC     EQU   *
         L     RLCB,LCBSCBA-ONE         GET SCB ADDR
         LA    RLCB,SCBERRST-IEDQSCB(RLCB) GET SCB ERROR WORD ADDR
         SR    RWORK,RWORK              CLEAR FOR LOAD
         L     RWORK,OPCZERO(RLCB)      GET STATUS WORD
         ST    RWORK,OCELEM             SAVE FOR COMPARES
         LTR   RWORK,RWORK              ANY BITS ON
         BNZ   ERLOOP                   YES - PROCESS THEM
*
SETNOE   EQU   *
         MVC   ERRLEN(OPCTEN,RWKAREA),NOBITS  SET NO BITS ON MSG
         LA    RTBL,LEN(RWKAREA)        BUMP ADDR TO END OF MSG
SETGOOD  EQU   *
         MVC   MSGN(OPCEIGHT,RWKAREA),OCBACKUP PUT NAME IN MSG
         TM    OCSWITCH,NORLN           LINE ADDR ONLY
         BNO   EXIT                     YES LEAVE RTN
         BAL   RRETURN,GETRLN           NO--- GRPNAME/RLN IN CMD
EXIT     EQU   *
         LR    RAVT,RWKAREA             SAVE ADDR OF WORKAREA
         LA    RWKAREA,OPCFOUR(RWKAREA) BUMP ADDR BY FOUR
         SR    RTBL,RWKAREA             CALCULATE LEN OF MSG
         STH   RTBL,LENOFF(RAVT)        STORE LEN IN WORKAREA
         MVC   OPCLDNME+OPCTHREE(OPCTWO),MSGWRIT INSERT ID OF IGC0710D
         XC    OCPARM(FOUR),OCPARM      ZERO OUT PARM AND WTG FIELDS
         L     RAVT,OPCAVTPT            GET AVT ADDR
OUT      EQU   *                        3705 SUPPORT EXIT        S22024
         LR    RPARM,ROPCAVT            SET UP PARAMETER REG
         XCTL  SF=(E,OPCXCTL)           XCTL TO NEXT MODULE
ERLOOP   EQU   *
         LA    RWORK,OCELEM             GET ADDR OS STATUS
         LA    RWORK2,OPCFOUR           SET LOOP CONTROL
         LA    RWORK3,BITONE            GET FIRST TBL ADDR       Y06328
         LA    RTBL,ERRLEN(RWKAREA)     GRT MSG ADDR
         SR    R1,R1                    CLEAR FOR IC
CLI      EQU   *
         CLI   OPCZERO(RWORK3),AVTEFF   END OF TABLE
         BE    NEXTBYTE                 YES
*
         IC    R1,OPCZERO(RWORK3)        GET BIT
         EX    R1,TM                     BIT ON
         BO    PUTFLD                   YES - PUT DESCRIPTION    S22024
*
         LA    RWORK3,OPCFOUR(RWORK3)   BUMP TO NEXT BIT SETTING
         B     CLI                      TEST IT
*
NEXTBYTE EQU   *
         LA    RWORK,OPCONE(RWORK)
         BCT   RWORK2,END               END OF PROCESSING
*
         LA    RWORK,ERRLEN(RWKAREA)       RESET MSG ADDR
         CR    RTBL,RWORK               ANY BITS ON
         BE    SETNOE                   NO, GO SET INDICATOR
         B     SETGOOD                  GO BUILD MESSAGE
*
END      EQU   *
         STC   RWORK2,OCOPTCDE          SAVE 1 BYTE
         CLI   OCOPTCDE,OPCTHREE        THREE TABLES TO GO
         BE    SBIT                     YES - GET SECOND TBL
*
         CLI   OCOPTCDE,OPCTWO          TWO TABLES TO GO
         BE    TBIT                     YES - GET THIRD TBL
*
         LA    RWORK3,BITFOUR           GET FOURTH TBL ADDR      Y06328
         B     CLI                      GO CHECK TABLE
*
SBIT     EQU   *
         LA    RWORK3,BITTWO            GET SECOND TBL ADDR      Y06328
         B     CLI                      GO CHECK TABLE
*
TBIT     EQU   *
         LA    RWORK3,BITTHREE          GET THIRD TBL ADDR       Y06328
         B     CLI                      GO CHECK TABLE
*
PUTFLD   EQU   *
         MVC   OPCZERO(OPCTHREE,RTBL),OPCONE(RWORK3)
         LA    RTBL,OPCFOUR(,RTBL)      INCREMENT MSG ADDR
         LA    RWORK3,OPCFOUR(,RWORK3)  BUMP TO NEXT BIT
         B     CLI                      GO PROCESS IT
*
GETRLN   EQU   *
         SR    RRLN,RRLN                CLEAR REGISTER
         IC    RRLN,OCRLN               GET RLN
         CVD   RRLN,OPCDOUBL            CONVERT TO DECIMAL
         UNPK  OPCDOUBL(OPCTHREE),OPCDOUBL+SIX(OPCTWO) MAKE PRINTABLE
         OI    OPCDOUBL+OPCTWO,FOXZERO  MAKE PRINTABLE
         MVC   NOACTRLN(OPCTHREE,RWKAREA),OPCDOUBL INSERT INTO MSG
         BR    RRETURN                  RETURN TO CALLING RTN
         SPACE 2
ERR3705  EQU   *                                                 S22024
         LA    R0,MSG201                SET MSG 201              S22024
         MVC   OPCEIGHT(OPCEIGHT,RWKAREA),INSRT201 PUT INSERT FORS22024
*                                       MSG 201 IN WORK AREA     S22024
         B     ERRMSG                   SET ID OF MSG MODULE     S22024
         EJECT
***********************************************************************
*                                                                     *
*  THE COMMAND IS FOR A LINE OFF A 3705 CONTROL UNIT. THIS SECTION OF *
*  CODE OBTAINS A UNIT FROM IEDQCA BUFFER ALLOCATION SUBROUTINE AND   *
*  BUILDS AND FORMATS A DISPLAY LINE STATUS BTU IN THIS UNIT AND THEN *
*  PASSES THE OPCE TO IGC0210D THE BTU DISPATCHER. THE 3RD WORD OF    *
*  THIS OPCE CONTAINS THE ADDRESS OF THE REQUEST BTU. IGC0210D WILL   *
*  ASSIGN A SEQUENCE NUMBER TO THE REQUEST CHAIN THE OPCE ONTO THE    *
*  OPCWAITN CHAIN AND TPOST THE REQUEST BTU TO THE 3705 CORE QCB      *
*  WHOSE ADDRESS IS PASSED IN THE 1ST WORD OF THE REQUEST BTU UNIT    *
*  BY THE FUNCTIONAL ROUTINE.                                         *
*                                                                     *
***********************************************************************
CMD3705  EQU   *
         L     RTERM,OCLINK             GET LINE TTE ADDR      @Y17XARX
         LA    RWORK,TRMPRFSZ           GET NEG PREFIXSIZE     @Y17XARX
         SR    RTERM,RWORK              ADJUST TTE PTR         @Y17XARX
         CLI   TRMTYPE,TRMSDLC          SDLC LINE              @Y17XARX
         BE    SDLCDISP                 YES                    @Y17XARX
         LA    R13,OPCSAVE              REG SAVE AREA            S22024
         L     R15,OPCGETBF             ADDR OF BUFFER REQ. RTN  S22024
         LA    R1,OPCONE                GET 1 UNIT               S22024
         BALR  R14,R15                  BRANCH TO GET A UNIT     S22024
         ST    R1,OCUNIT                INSERT IT IN OPCE        S22024
         LA    RWORK,PRUNLEN            NEG PREFIX LEN         @Y17XARX
         SR    RPARM,RWORK              BACKUP TO NEG PREFIX   @Y17XARX
         MVC   PRURHFG0(FOUR),FID0PRUH  SET UP PREFIX          @Y17XARX
         XC    PRURHFG0+FOUR(PRUNLEN-FOUR),PRURHFG0+FOUR       @Y17XARX
*                                       CLEAR REST OF PREFIX   @Y17XARX
         MVC   PRUTIC,INVALTIC          INDICATE ONE UNIT      @Y17XARX
         MVC   PRUTTCIN,OCTRMTBL        SET UP LINE AS TARGET  @YM07403
         LA    RWORK,SIX                SET UP RU LENGTH       @Y17XARX
         STH   RWORK,PRUDATCT                                  @Y17XARX
         MVC   PRUDATA(TWO),DISPSESS    BUILD DISPLAY SESSION  @Y17XARX
*                                       RU                     @Y17XARX
         MVI   OCALSTAT,OPCZERO         CLEAR ALL FLAGS        @Y17XARX
         MVC   OCWTG,MODID              SET ID FOR IGCD910D      S22024
         MVC   OPCLDNME+OPCTHREE(TWO),XCTL02 ID OF BTU DISPATCHR S22024
         B     OUT                      PREPARE TO EXIT          S22024
         EJECT
***********************************************************************
*                                                                     *
*  THIS SECTION OF CODE IS ENTERED WHEN OCSWITCH IN THE OPCE IS SET TO*
*  X'10' WHICH IDENTIFIES THIS AS BEING A RESPONSE BTU PASSED FROM    *
*  IGC0210D, THE BTU DISPATCHER. THE 3RD WORD OF THE OPCE CONTAINS    *
*  THE ADDRESS OF THE RESPONSE BTU. THE RESPONSE BTU IS CHECKED TO SEE*
*  IF THE COMMAND WAS SUCCESSFUL. IF NOT AN ERROR MSG IS WRITTEN OUT  *
*  OTHERWISE THE 4 BYTES OF STATUS POSITIONED BEHIND THE BTU ARE      *
*  CHECKED AND STATUS CONDITIONS ARE MAPPED INTO THE RESPONSE MESSAGE.*
*                                                                     *
***********************************************************************
RSPBTU   EQU   *                        RESPONSE BTU FROM 3705   S22024
         BAL   RRETURN,PROCESS1         MOVE MSG INTO WORKAREA   S22024
         L     RPARM,OCUNIT             GET RU ADDRESS         @Y17XARX
         LA    RWORK,PRUNLEN            NEG PREFIX LEN         @Y17XARX
         SR    RPARM,RWORK              BACKUP TO NEG PREFIX   @Y17XARX
         TM    PRURHFG0,PRURHSDI        ERROR ON RESPONSE      @Y17XARX
         BO    ERRRTRN                                         @Y17XARX
         CLI   PRUDATA+FOUR,RSPGOOD     CHECK SYSTEM RESPONSE  @Y17XARX
         BE    GOODRSP                  YES, PROCESS IT        @Y17XARX
ERRRTRN  EQU   *                                               @Y17XARX
         LA    R0,MSG199                LOAD ERROR MSG NUMBER    S22024
ERRMSG   EQU   *                                                 S22024
         MVC   OPCLDNME+OPCTHREE(TWO),XCTL03 ID OF ERROR WRITER  S22024
*                                       FOR 3705 SUPPORT         S22024
         B     OUT                      EXIT TO ERROR RTN        S22024
*
GOODRSP  EQU   *
         LA    RWORK,PRUDATA+SIX        POINT TO STATUS BYTES  @Y17XARX
*                                       IN THE BTU TEXT        @Y17XARX
         LA    RTBL,GOOD(RWKAREA)       SET MSG ADDR             S22024
         LA    RWORK2,RNNUM             GET NUMBER OF BYTES      S22024
*                                       TO CHECK                 S22024
         LA    RWORK3,RNBYTES           ADDR OF BIT TABLE        S22024
         TM    OPCZERO(RWORK),ACTIVE    IS LINE ACTIVE ?         S22024
         BZ    NOTACT                   NO, SET NOT ACTIVE       S22024
         MVC   OPCZERO(OPCTWO,RTBL),AC  YES, SET ACT IN MSG      S22024
         B     SETUPR                   SET UP FOR MSG ROUTINE   S22024
NOTACT   EQU   *                                                 S22024
         MVC   OPCZERO(OPCTWO,RTBL),LI  SET LINE INACTIVE        S22024
SETUPR   EQU   *                                                 S22024
         LA    RTBL,OPCTHREE(,RTBL)     BUMP IN MSG              S22024
         BAL   RRETURN,CHKSTAT          GO TO CHECK STATUS AND   S22024
*                                       BUILD A MESSAGE          S22024
         B     SETGOOD                  GO WRITE THE STATUS MSG  S22024
SDLCDISP EQU   *                                               @Y17XARX
         BAL   RRETURN,PROCESS1         MOVE MSG INTO WORK     @Y17XARX
*                                       AREA                   @Y17XARX
         LA    RTBL,GOOD(RWKAREA)       SET MSG ADDR           @Y17XARX
         MVC   OPCZERO(OPCFIVE,RTBL),SNALIAC                   @Y17XARX
*                                       SET SNA LINE ACTIVE    @Y17XARX
         TM    TRMBYTE2,TRMRSACT        IS LINE ACTIVE         @Y17XARX
         BO    SDLCCONT                 YES                    @Y17XARX
         MVC   OPCTHREE(TWO,RTBL),LI    SET LINE INACTIVE      @Y17XARX
SDLCCONT EQU   *                                               @Y17XARX
         LA    RTBL,OPCFIVE(RTBL)       BUMP TABLE PTR         @Y17XARX
         B     SETGOOD                  GO WRITE STATUS MSG    @Y17XARX
ENDIDTBL EQU   *                                                 S22024
MOVEMSG  MVC   OPCFOUR(OPCZERO,RWKAREA),OPCONE(R1) MOVE MSG INTO WKAREA
OPCZERO  EQU   0                        OFFSET
OPCONE   EQU   1                        OFFSET
OPCTWO   EQU   2                        OFFSET
OPCTHREE EQU   3                        OFFSET
OPCFOUR  EQU   4                        OFFSET
OPCFIVE  EQU   5                        OFFSET
OPCSIX   EQU   6                        OFFSET
OPCSEVEN EQU   7                        OFFSET
OPCEIGHT EQU   8                        OFFSET
OPCNINE  EQU   9                        OFFSET
OPCTEN   EQU   10                       OFFSET
FOXZERO  EQU   X'F0'                    FLAG BIT                 S22024
LENOFF   EQU   0                        OFFSET INTO WORKAREA FOR LEN
NOACTRLN EQU   21                       OFFSET IN MSG FOR NAME
MSGWRIT  DC    C'07'                    ID OF IGC0710D RTN
GOOD     EQU   32                       OFFSET INTO MSG          S22024
GOODE    EQU   67                       OFFSET INTO MSG          S22024
ERRLEN   EQU   69                       OFFSET INTO MSG FOR ERR
LEN      EQU   79                       LEN OF MSG IF NO BITS ON
MSGN     EQU   12                       OFFSET INTO MSG
NORLN    EQU   X'40'                    MASK FOR LINE OR GRPNAME
DEB      EQU   8                        OFFSET INTO TCB OF DEB
TIOT     EQU   12                       OFFSET INTO TCB OF TIOT
ADDR     EQU   13                       ADDRESS OFFSET
STARTOFF EQU   24                       START OFFSET
TX       EQU   X'40'                    TX
ADCODE   EQU   X'80'                    ADCODE
A        EQU   C'A'                     CHARACTER A
ZERO     EQU   0                        OFFSET
ONE      EQU   1                        OFFSET
TWO      EQU   2                        OFFSET
FOUR     EQU   4                        OFFSET
SIX      EQU   6                        OFFSET
RSPGOOD  EQU   X'60'                    GOOD RESPONSE            S22024
OPCTLID  EQU   X'08'                     IDENTIFIES THIS AS AN
*                                        OPCTL REQ BTU
TXLGB    EQU   X'80'                     LGB
A3705    EQU   X'04'                    DCB FOR 3705             S22024
ACTIVE   EQU   X'80'                    LINE ACTIVE              S22024
RNNUM    EQU   4                        CHECK 4 RN STATUS BYTES  S22024
FOUND    EQU   7                        BITS WERE SET            S22024
BTUOFF   EQU   X'14'                    WHERE TO BUILD BTU       S22024
CONTROL  EQU   X'08'                    CONTROL CMD              S22024
DISPLAY  EQU   X'01'                    TYPE CMD                 S22024
DATAOFF  EQU   34                       OFFSET IN UNIT TO DATA   S22024
STATOFF  EQU   25                       OFFSET IN MSG TO LNSTAT  S22024
ERROFF   EQU   65                       OFFSET IN MSG TO ERR=    S22024
LENSTAT  EQU   7                        LENGTH OF LNSTAT= KEYWORDS22024
STRSTAT  EQU   STATOFF+LENSTAT          START OF LNSTAT DATA     S22024
ENDSTAT  EQU   ERROFF-ONE               END OF LNSTAT DATA       S22024
CLEARLEN EQU   ENDSTAT-STRSTAT          LENGTH TO CLEAR          S22024
BLANK    EQU   C' '                     BLANK                    S22024
MSG199   EQU   199                      ERROR MSG NUM FOR 3705   S22024
MSG400   EQU   400                      MESSAGE NUMBER 400       S22024
MSG201   EQU   201                      'INVALID FOR 3705' MSG   S22024
LNSTATID DC    C'LNSTAT='               LNSTAT KEY WORD          S22024
ERRID    DC    C'ERR='                  ERR= KEYWORD             S22024
XCTL03   DC    C'03'                    ERROR WRITER ID          S22024
XCTLM3   DC    C'M3'                    ID OF IGCM310D ERROR RTN S22024
*                                       ERROR WRITER             S22024
MODID    DC    C'D9'                    MODIFIER FOR CMD         S22024
XCTL02   DC    C'02'                    BTU DISPATCHER           S22024
IOBOFF   DC    H'32'                     OFFSET IN LCB TO IOB
AC       DC    C'AC'                    LINE ACTIVE              S22024
LI       DC    C'LI'                         LINE INACTIVE       S22024
RNBYTES  DC    X'20',C'SN'              SESSION CURRENTLY ACTIVE S22024
         DC    X'08',C'SS'              SERVIVE SEEKING IN PROG  S22024
         DC    X'02',C'TC'              TEST COMMAND             S22024
         DC    X'FF'                    END OF FIRST BYTE TEST   S22024
         DC    X'80',C'DH'              DEACTIVATE LINE HALT     S22024
         DC    X'40',C'DO'              DEACTIVATE LINE ORDERLY  S22024
         DC    X'20',C'AP'              ACTIVATE LINE IN PROGRESSS22024
         DC    X'10',C'AU'              AUTO DIAL MODE           Y06328
         DC    X'04',C'BU'              LINE IN BACKUP MODE      Y06328
         DC    X'FF'                    END OF SECOND TEST BYTE  S22024
         DC    X'04',C'BS'              BSC LINE                 S22024
         DC    X'02',C'MP'              MULTIPOINT LINE          S22024
         DC    X'01',C'DL'              SWITCHED LINE            S22024
         DC    X'FF'                    END OF THIRD TEST BYTE   S22024
         DC    X'80',C'MT'              MULTIPOINT TRIBUTARY     S22024
         DC    X'40',C'PS'              POINT-POINT SECONDARY    S22024
         DC    X'01',C'EP'              LINE IN EP MODE          Y06328
         DC    X'FF'                    END OF FOURTH TEST BYTE  S22024
COMP     DC    X'00'                    COMPARAND
NOBITS   DC    C'NO BITS ON'            MESSAGE TEXT
*
TMBTUBYT TM    OPCZERO(RWORK3),OPCZERO  ANY BITS SET             S22024
MOVE     MVC   OPCZERO(OPCZERO,RTBL),OPCTWO(RWORK3)  MOVE IN MSG S22024
TM       TM    OPCZERO(RWORK),OPCZERO   TEST                     S22024
MSG      DS    0H
         DC    AL1(ENDMSG-*-1)          LENGTH                   S22024
         DC    C'IED032I '              TEXT                     S22024
ENDMSG   EQU   *                        END OF MSG               S22024
INSRT201 DC    CL8'TP,LINE,'            1ST 8 CHARACTERS OF      S22024
*                                       INVALID DISPLAY LINE CMD S22024
PACK     PACK  OPCDOUBL+SIX(OPCTWO),OPCDOUBL(OPCONE) PACK        S22024
BITONE   DC    X'80',C'HDR',X'40',C'ORG',X'20',C'NTS',X'10',C'SQH' 6328
         DC    X'08',C'SQL',X'04',C'MNS',X'02',C'ISB',X'01',C'CUT' TBL
         DC    X'FF'                    END OF TABLE
BITTWO   DC    X'80',C'MIN',X'40',C'MAX' TABLE                   Y06328
         DC    X'08',C'OLT',X'04',C'ABR',X'02',C'FWD'    TABLE
         DC    X'FF'                    END OF TABLE
BITTHREE DC    X'80',C'LST'             TABLE                    Y06328
         DC    X'40',C'INV'             TABLE
         DC    X'20',C'NOP'             TABLE
         DC    X'08',C'USE',X'04',C'FMT',X'02',C'HDW',X'01',C'UNX' TBL
         DC    X'FF'                    END OF TABLE
BITFOUR  DC    X'80',C'SEL',X'40',C'TXT',X'20',C'CDC',X'10',C'TER' 6328
         DC    X'08',C'LER',X'04',C'CUR',X'02',C'CHR',X'01',C'UNR' TBL
         DC    X'FF'                    END OF TABLE
BYTE1    DC    X'80',C'RC',X'40',C'CM',X'20',C'OC',X'10',C'IM' TABLE
         DC    X'08',C'CR',X'04',C'LF',X'02',C'RV',X'01',C'SD' TABLE
         DC    X'FF'                    END OF TABLE
BYTE2    DC    X'80',C'TR',X'40',C'MS',X'20',C'TB'   TABLE
         DC    X'08',C'NR',X'04',C'BS',X'02',C'DL'    TABLE
         DC    X'FF'                    END OF TABLE
FID0PRUH DC    X'0B80000C'              PRU PREFIX FLAGS FOR:  @Y17XARX
*                                       FM DATA, FMTD, BC, EC, @Y17XARX
*                                       DR1, FID0, BS, ES      @Y17XARX
INVALTIC DC    X'08000002'              INVALID TIC            @Y17XARX
DISPSESS DC    X'0801'                  DISPLAY SESSION RU     @Y17XARX
*                                       TEXT                   @Y17XARX
SNALIAC  DC    C'SL AC'                 SNA LINE IS ACTIVE     @Y17XARX
ZAPAREA  DC    50X'00'                  ZAPAREA                @Y17XARX
         EJECT
         EJECT
         EJECT
         EJECT
         DCBD  DSORG=(TX,TR)
         EJECT
*
         TOPCED
         TOPCAVTD
         TPRUD                                                 @Y17XARX
         TTRMD                                                 @Y17XARS
         TDEBD
         TLCBD
         TSCBD
         TAVTD
         END
