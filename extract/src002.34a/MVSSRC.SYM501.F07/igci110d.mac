         TITLE 'IGCI110D - ACTIVATE OR MOVE INVITATION LIST'
IGCI110D CSECT
         SPACE 3
* CHANGE-ACTIVITY = AS FOLLOWS:
********************* MICROFICHE FLAGS **********************SUPPT CODE
*000000-999999                                                 @Y16X5R0
*A258000,572000,580000                                          SA65381
*C592000-596000                                                 SA65381
*D686000-700000,708000,682000                                   SA60006
*A 604000                                                      @SA64382
*A388000                                                       @SA71091
*A258000,712000,846000                                         @Y17XARP
*D714000-734000                                                @Y17XARP
*C010006                                                       @Y17XARP
*C005000,008200,009400,042600                                  @Y17XART
*A042600,072000,166200                                         @Y17XART
*D022000,684000,736000                                         @Y17XART
***********************************************************************
**                                                                    *
**MODULE-NAME=IGCI110D  (TCAM,OP CTL)                          @Y17XART
**                                                                    *
**DESCRIPTIVE-NAME=ACTIVATE OR MOVE INVITATION LIST                   *
**                                                                    *
**COPYRIGHT='NONE'                                                    *
**                                                                    *
** STATUS:  CHANGE LEVEL 10                                    @Y17XART
**                                                                    *
* FUNCTION -- THE PURPOSE OF THIS MODULE IS TO ACTIVATE AN            *
*    INVITATION LIST ENTRY OR MOVE A NEW INVITATION LIST.  THIS MODULE*
*    GETS CONTROL AFTER THE OTHER ICHANGE MODULE HAS DETERMINED IT IS *
*    EITHER AN ACTIVATE OR MOVE TYPE ICHANGE.  THE ROUTINE CHECKS TO  *
*    SEE IF THE LINE IS STOPPED.  IF NOT, THE LINE MUST BE STOPPED    *
*    BEFORE THE FUNCTION CAN BE PERFORMED.  TO STOP THE LINE, CONTROL *
*    IS TRANSFERRED TO STOPLINE.  THE X'40' BIT IS SET IN OCSWITCH TO *
*    INDICATE THAT THE LINE IS TO BE RESTARTED.  AFTER SUCCESSFULLY   *
*    STOPPING THE LINE FROM IGCI010D, THE ICHANGE FUNCTION CAN BE     *
*    PERFORMED.  THE FIRST WORD OF OCMODNME IS USED TO DETERMINE THE  *
*    TYPE OF ICHANE TO BE DONE.  IF THE FUNCTION IS TO ACTIVATE THE   *
*    INVITATION LIST ENTRY, THE ENTRIES ARE CHECKED TO SEE IF THEY    *
*    ARE ALL ACTIVE.  IF SO, OCSWITCH IS CHECKED TO SEE IF THE LINE   *
*    WILL NEEDRESTARTING.  IF SO, THE LCB IS DEQUEUED AND THE LCB IS  *
*    POSTED TO ITSELF AND POSTED TO THE ASYNCRONOUS READY Q    @Y17XART
*    TO START                                                  @Y17XART
*    THE LINE.  IF THERE ARE SOME INACTIVE ENTRIES, THE COUNT OF THE  *
*    NUMBER OF INACTIVE ENTRIES IS SET UP.  EACH ENTRY IS SWAPPED     *
*    FROM THE INACTIVE TO THE ACTIVE SIDE OF THE LIST, AND THEN       *
*    SWAPPED WITH OTHER ACTIVE ENTRIES UNTIL IT IS IN ITS PROPER PLACE*
*    IN THE LIST.  THE COUNT IS DECREMENTED.  WNEN ALL ENTRIES HAVE   *
*    BEEN MADE ACTIVE, THE NUMBER OF ACTIVE ENTRIES IS SET TO EQUAL   *
*    THE TOTAL ENTRY COUNT.  THE LCB IS DEQUEUED AND THE LINE STARTED *
*    AS ABOVE.  IF THE FUNCTION IS AN ICHANGE MOVE, THE LIST SIZE IS  *
*    CALCULATED AND THE DATA AT THE MOVE WORK AREA IS MOVED TO OVERLAY*
*    THE LIST.  THE LCB IS DEQUEUED AND THE LINE STARTED AS ABOVE.    *
*                                                                     *
* ENTRY POINTS --                                                     *
*    IGCI110D TO PERFORM THE ICHNG ACTIVATE OR MOVE FUNCTIONS FROM    *
*    AN MPP.                                                          *
*    PURPOSE - SEE FUNCTION                                    @Y17XART
*    LINKAGE - XCTL SF=(E,OPCXCTL)                             @Y17XART
*                                                                     *
* INPUT --                                                            *
*    REGISTER 1 - ADDRESS OF OPERATOR CONTROL AVT.  RELEVANT FIELDS   *
*    ARE OPCDOUBL.  THIS FIELD CONTAINS THE DDNAME OR THE UCB ADDRESS.*
*    ANOTHER FIELD IS OPCCOPCE WHICH IS THE ADDRESS OF THE CURRENT    *
*    OPERATOR CONTROL ELEMENT.  RELEVANT FIELDS ARE OCBACKUP.  THIS   *
*    FIELD CONTAINS EITHER A DDNAME OR A UCB ADDRESS.  ANOTHER        *
*    RELEVANT FIELD IS OCSWITCH.  IF THE X'40' BIT IS ON, THE LINE    *
*    SHOULD BE RESTARTED AFTER ACTIVATING THE ENTRIES OR ALTERING     *
*    THE INVITATION LIST BY THE CONTENTS OF THE SPECIFIED WORK AREA.  *
*    ICHANGE FUNCTION TO BE PERFORMED EITHER ACTIVATE OR MOVE.        *
*                                                                     *
* OUTPUT --                                                           *
*    REGISTER 0 - RETURN CODE VALUES.                                 *
*                                                                     *
* EXTERNAL REFERENCES --                                              *
*         NONE.                                                       *
*                                                                     *
* EXITS,NORMAL --                                                     *
*         ENTRIES WERE ACTIVATED OR MOVED AS REQUESTED, X'00' RETURN  *
*         CODE SET.                                                   *
*         ENTRIES HAVE ALREADY BEEN ACTIVATED OR MOVED, X'00' RETURN  *
*         CODE SET.                                                   *
*                                                                     *
* EXITS,ERROR --                                                      *
*         ENTRIES COULD NOT BE ACTIVATED OR MOVED, X'04' RETURN CODE  *
*         SET.                                                        *
*                                                                     *
* TABLES/WORK AREAS --                                                *
*    OPERATOR CONTROL AVT, OPERATOR CONTROL ELEMENT, TERMNAME TABLE,  *
*    DCB, TERMINAL ENTRY, QCB, LCB, DEB.                              *
*                                                                     *
* ATTRIBUTES --                                                       *
*    SERIALLY REUSABLE, REFRESHABLE, ENABLED, TRANSIENT,              *
*    SUPERVISOR MODE.                                                 *
*                                                                     *
* CHARACTER CODE DEPENDENCY --                                        *
*    THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL            *
*    REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS            *
*    EQUIVALENT TO THE ONE USED AT ASSEMBLY TIME.  THE CODING         *
*    HAS BEEN ARRANGED SO THAT REDEFINITION OF CHARACTER              *
*    CONSTANTS, BY REASSEMBLY WILL RESULT IN A CORRECT MODULE         *
*    FOR THE NEW DEFINITION.                                          *
*                                                                     *
* NOTES --                                                            *
*    COMMUNICATIONS BETWEEN THE VARIOUS TRANSIENT MODULES IS          *
*    PRIMARILY THROUGH THE OPERATOR CONTROL AVT.                      *
*    RESTRICTIONS - NONE                                       @Y17XART
*    REGISTER CONVENTIONS - STANDARD OPCTL CONVENTIONS         @Y17XART
*    PATCH LABEL - ZAPAREA                                     @Y17XART
*                                                              @Y17XART
* MODULE TYPE = CSECT                                          @Y17XART
*    PROCESSOR - ASSEMBLER                                     @Y17XART
*    MODULE SIZE -                                             @Y17XART
*                                                                     *
*    THIS IS A MODULE RE-WRITE OF IEDQC1 AS OF OS/TCAM LEVEL II       *
***********************************************************************
         EJECT
         SPACE
*                                 E Q U A T E S
         SPACE
RZERO    EQU   0                        PARAMETER REGISTER
RPARM    EQU   1                        PARAMETER REGISTER
ROPCAVT  EQU   2                        POINTER TO OP CONTROL AVT
ROPCE    EQU   3                        POINTER TO CURRENT OPCE
RAVT     EQU   4                        TCAM AVT ADDRESS
RWORKA   EQU   5                        POINTER TO RESIDENT WORKAREA
RRLN     EQU   5                        RELATIVE LINE NUMBER
RMOVE    EQU   5                        MOVE REG
RLCB     EQU   5                        LCB ADDRESS
RLCB1    EQU   6                        LCB ADDRESS
RSCB     EQU   6                        SCB BASE
RUCB     EQU   6                        UCB BASE
RTNT     EQU   6                        TERMINAL NAME TABLE
RTERM    EQU   6
RENTRY   EQU   6                        INVITATION LIST ENTRY ADDRESS
RTCB     EQU   7                        TCB BASE
RDCB     EQU   7                        DCB BASE
ROFF     EQU   7                        OFFSET TO DDNAME, ADDR, RLN
RSWAP    EQU   8                        TO SWAP LIST ENTRIES
RWORK    EQU   8                        WORK REGISTER
RWORK1   EQU   9                        WORK REGISTER
RPREFIX  EQU   9
RLENGTH  EQU   10                       LENGTH OF ENTRY
RDEB     EQU   10                       DEB BASE
RLIST    EQU   11                       LIST ADDRESS
RQCB     EQU   11                       QCB ADDRESS
RBASE    EQU   12                       BASE FOR MODULE
RSAVE    EQU   13                       PTR TO SAVE AREA
RRET     EQU   14                       SUBROUTINE RETURN ADDRESS
CURR     EQU   14                       REGISTER 14            @Y17XARP
RBRNCH   EQU   15                       SUBROUTINE BRANCH ENTRY POINT
         SPACE 2
EIGHT    EQU   8                        LENGTH OF EIGHT
NAMELEN  EQU   2                        NO. OF NAME CHANGE CHARACTERS
VARINAME EQU   3                        OFFSET TO CHANGE LOAD NAME
FOUR     EQU   4
ONE      EQU   1
THREE    EQU   3
TWO      EQU   2
EOT      EQU   X'80'                    EOT FLAG
ENDACT   EQU   X'FE'                    END OF ACTIVE ENTRIES
INVSTAT  EQU   3                        OFFSET TO ILIST STATUS  SA65381
CKPSET2  EQU   X'04'                    ILIST CHECKPOINT STATUS SA65381
SEVEN    EQU   7
X1A      EQU   X'1A'                    FLAG FOR BUFFERED TERMINALS
CVTPTR   EQU   16                       POINTER TO CVT
BUSY     EQU   4                        QUEUE BUSY CONDITION
FIVE     EQU   5
ZERO     EQU   0
NINE     EQU   9
X40      EQU   X'40'                    INDICATES LINE NEEDS RESTARTED
TWO56    EQU   256                      MOVE LENGTH
TR       EQU   3                        DISPLACEMENT
ON       EQU   1                        DISPLACEMENT
ANYMOVED EQU   X'01'                    INDICATES ENTRIES MOVED
UCBNM    EQU   13                       OFFSET TO NAME IN UCB
LCBPRIOR EQU   X'E0'                    PRIORITY FOR LCB
SIX      EQU   6                        DISPLACEMENT
ORDERBIT EQU   X'20'                    SET WHEN ARRANGING ENTRIES
SAVEOFF  EQU   0                        DISPLACEMENT OF SAVE AREA
         EJECT
         USING IEDQAVTD,RAVT            TCAM AVT ADDRESSABILITY
         USING IEDQOPCD,ROPCAVT         OP CONTROL AVT ADDRESSABILITY
         USING IEDQOPCE,ROPCE           ELEMENT ADDRESSABILITY
         USING DEBNMSUB,RDEB            DEB ADDRESSABILITY
         USING IHADCB,RDCB              DCB ADDRESSABILITY
         USING IEDQQCB,RQCB             QCB ADDRESSABILITY
         USING IEDQTNTD,RTNT            TNT ADDRESSABILITY
         USING IEDQPRF,RPREFIX          BUFFER ADDRESSABILITY
         USING IEDQTRM,RTERM            TERM ENTRY ADDRESSABILITY
         USING IEDQSCB,RSCB             SCB ADDRESSABILITY
         SPACE
         BALR  RBASE,ZERO               SET BASE REGISTER
         USING *,RBASE                  MODULE ADDRESSABILITY
BASE     EQU   *
IGCI110D IEDHJN SKIPID
*              INITIAL SETUP                                          *
         LR    ROPCAVT,RPARM            SET UP AVT ADDRESSING
         L     RAVT,OPCAVTPT            TCAM AVT ADDRESSING
         L     ROPCE,OPCCOPCE           GET CURRENT ELEMENT POINTER
         LM    RLCB1,RDCB,SAVEOFF(RSAVE) RESTORE REGS SAVED BY I0
         MVC   OPCDOUBL(EIGHT),OCBACKUP SET DDNAME
INVLIST  EQU   *
         LA    RLIST,DCBINVLI-IHADCB(RDCB)
         SR    RWORK,RWORK
         IC    RWORK,LCBUCBX-IEDQLCB(RLCB1)  GET IOB INDEX
         SLL   RWORK,TWO                MULTIPLY BY FOUR
         AR    RLIST,RWORK              GET TO PROPER LIST ADDRESS
         L     RLIST,AVTEZERO(RLIST)    GET LIST
         LA    RLIST,AVTEZERO(RLIST)    CLEAR HIGH ORDER BYTE
         CLC   OCMODNME(THREE),AVTFZERO ACTIVATE INVITATION LIST
         BNE   MOVE                     NO,MOVE
         SPACE
*              ACTIVATEINVITATION LIST                                *
ACT      EQU   *
         SR    ROFF,ROFF
         STH   ROFF,OCMODNME+SIX        SET UP FIRST ENTRY
         SR    RLENGTH,RLENGTH          INIT REG
         SR    RWORK1,RWORK1            INIT REG
         IC    RLENGTH,TWO(RLIST)       LENGTH OF ENTRY
         LR    RWORK1,RLENGTH
         BCTR  RWORK1,AVTEZERO          DECREMENT FOR EXECUTE
         SPACE
GTENTRY1 EQU   *
         NI    OPCFLAG1,AVTEFF-ORDERBIT TURN OFF BIT           @SA71091
         LH    ROFF,OCMODNME+SIX        GET NEXT ENTRY
         LA    ROFF,ONE(ROFF)           INCREMENT BY ONE
         STH   ROFF,OCMODNME+SIX        GET NEXT ENTRY
         CLC   AVTEZERO(ONE,RLIST),ONE(RLIST) ALL ENTRIES ACTIVE
         BE    EXIT                     YES
         CLC   OCMODNME+SEVEN(ONE),AVTEZERO(RLIST) OUT OF ENTRIES
         BH    EXIT                     YES
         SPACE
         LA    RENTRY,SEVEN(RLIST)      POINTER TO FIRST ENTRY INDEX
         SR    RRET,RRET                CLEAR
         IC    RRET,ONE(RLIST)          NUMBER OF ACTIVE ENTRIES
         LTR   RRET,RRET                ANY ACTIVE ENTRIES
         BZ    CKINACT                  NO CHECK INACTIVE
         SPACE
CKNEXT1  EQU   *
         AR    RENTRY,RLENGTH           GO TO NEXT ENTRY'S INDEX
         CLC   AVTEZERO(ONE,RENTRY),OCMODNME+SEVEN IS THIS ACTIVE ENTRY
         BE    GTENTRY1                 YES ITS ACTIVE GET ANOTHER
         BCT   RRET,CKNEXT1             IF NOT END OF ACTIVE,GO BACK
CKINACT  EQU   *
         LA    RENTRY,ONE(RENTRY)       GET BY ACTIVE FLAG
         TM    THREE(RLIST),EOT         'EOT' ENTRY PRESENT
         BZ    CKINACT1                 NO,GO ON
         LA    RENTRY,ONE(RENTRY)       SKIP IT,TOO
CKINACT1 EQU   *
         AR    RENTRY,RLENGTH           GO TO NEXT ENTRY'S INDEX
         CLC   AVTEZERO(ONE,RENTRY),OCMODNME+SEVEN IS THIS ACTIVE ENTRY
         BNE   CKINACT1                 NO,GET ANOTHER
         SPACE
         SR    RENTRY,RLENGTH           YES,SET FOR SWAP
         LR    RSWAP,RENTRY             ONE BYTE SHY OF
         SR    RSWAP,RLENGTH            ENTRY AND PREVIOUS ENTRY
ACTIVATE EQU   *
         CLI   AVTEZERO(RENTRY),ENDACT  FIRST INACTIVE ENTRY ?
         BE    MACTIVE                  YES,MAKE IT ACTIVE
         SPACE
SWAPLOOP EQU   *
         EX    RWORK1,SWAP1             SWAP TWO
         EX    RWORK1,SWAP2             SUCCESSIVE
         EX    RWORK1,SWAP3             ENTRIES
         TM    OPCFLAG1,ORDERBIT        ARE ENTRIES BEING ARRANGED
         BO    CKPOS                    YES
         SR    RENTRY,RLENGTH           BACK UP ONE ENTRY
         SR    RSWAP,RLENGTH            BACK PREVIOUS ENTRY,ONE ENTRY
         B     ACTIVATE                 GO CHECK INACT ENTRIES
         SPACE
MACTIVE  EQU   *
         OI    OPCFLAG1,ANYMOVED        INDICATE FUNCTION PERFORMED
         TM    THREE(RLIST),EOT         EOT ENTRY PRESENT
         BO    MACTIVE1                 YES,SPECIAL CARE
         EX    RWORK1,MOVACT            PLACE ENTRY ON AVTIVE SIDE
         LA    RRET,AVTEZERO(RLENGTH,RENTRY) POINT TO NEW END OF ACTIVE
         BCTR  RENTRY,AVTEZERO          DECREMENT BY ONE
         BCTR  RSWAP,AVTEZERO           DECREMENT BY ONE
         MVI   AVTEZERO(RRET),ENDACT    RESET ACTIVE POINTER
MACTIVE2 EQU   *
         SR    RRET,RRET
         IC    RRET,ONE(RLIST)          GET NUMBER OF ACTIVE ENTRIES
         LA    RRET,ONE(RRET)           INCREMENT BY ONE
         SPACE
ACTLOOP  EQU   *
         BCT   RRET,ACTPOS              IF NOT LAST POSITION COMPARE
         SPACE
RETURNA  EQU   *
         IC    RRET,ONE(RLIST)          GET NUMBER OF ACTIVE ENTRIES
         LA    RRET,ONE(RRET)           INCREMENT BY ONE
         STC   RRET,ONE(RLIST)          STORE COUNT BACK
         B     GTENTRY1                     GET ANOTHER ENTRY
         SPACE
ACTPOS   EQU   *
         CLC   AVTEZERO(ONE,RENTRY),OCMODNME+SEVEN COMPARE ENTRY
         BL    RETURNA                  PREVIOUS ENTRY LOWER,DONE
         SPACE
         OI    OPCFLAG1,ORDERBIT        TRYING TO ARRANGE
         B     SWAPLOOP                 PERFORM SWAP ENTRY OPERATION
         SPACE
CKPOS    EQU   *
         SR    RENTRY,RLENGTH           BACK UP
         SR    RSWAP,RLENGTH               ONE ENTRY
         B     ACTLOOP                  GO CHECK POSITION
         SPACE
*              MOVE INVITATION LIST                                   *
MOVE     EQU   *
         L     RMOVE,OCMODNME           GET WORK AREA ADDRESS
         BAL   RRET,INVLNGTH            FIND LIST LENGTH
         SPACE
         TM    OPCSPEC,OPCRSTRT         RESTART IN PROGRESS
         BZ    MOVE1                    NO
         SPACE
MOVEA    EQU   *
         SR    RZERO,RZERO              CLEAR REGISTER
         L     RWORK,EIGHT(ROPCE)       FIRST INVITATION LIST UNIT
         MVC   OPCDOUBL(FOUR),FOUR(RLIST) SAVE CPUID ADDRESS    SA65381
         LR    RBRNCH,RLIST             SAVE ILIST ADDRESS      SA65381
MOVELOOP EQU   *
         SR    RLENGTH,RLENGTH          CLEAR
         IC    RLENGTH,OCCIB-IEDQOPCE(RWORK) LENGTH OF DATA-1
         LH    RLIST,OCFLAG-IEDQOPCE(RWORK) OFFSET TO DATA IN   SA65381
*                                        INVITATION LIST        SA65381
         AR    RLIST,RBRNCH             ADDRESS OF DATA IN ILISTSA65381
         LA    RMOVE,OCCIB+ONE-IEDQOPCE(RWORK) SET FROM ADDRESS
         EX    RLENGTH,MVC              MOVE INTO INVITATION LIST
         L     RWORK,EIGHT(RWORK)       GET NEXT UNIT ADDRESS
         LA    RWORK,AVTEZERO(RWORK)    CLEAR HIGH ORDER BYTE
         CH    RWORK,AVTHA4             LAST ELEMENT
         BNL   MOVELOOP                 MOVE NEXT UNIT INTO LISTSA65381
         MVC   FOUR(FOUR,RBRNCH),OPCDOUBL RESET CPUID ADDRESS   SA65381
         OI    INVSTAT(RBRNCH),CKPSET2  RESET CHECKPOINT STATUS SA65381
         B     EXIT                     AND RETURN              SA65381
         SPACE
MOVE1    EQU   *
         LR    RRET,RLIST               SAVE LIST POINTER
         LR    RTCB,RPARM               KEEP THE LENGTH
         NI    TR(RMOVE),ONE            TURN ON AUTOPOLL IN INPUT
*                                                              @SA64382
         NI    TR(RLIST),ENDACT         TURN OFF AUTOPOLL IN INVLIST
*                                                              @SA64382
         OC    TR(,RMOVE),TR(RLIST)     CHG ONLY AUTOPOLL BIT  @SA64382
         MVC   AVTEZERO(FOUR,RLIST),AVTEZERO(RMOVE) RESET CONTROL WORD
         CLI   LCBRSKEY-IEDQLCB(RLCB1),X1A IS THIS FOR BUFFERED TERM
         BE    MOVE2                    YES,SAVE ONLY ONE BYTE
         SPACE
         MVC   FOUR(FOUR,RLIST),FOUR(RMOVE)  SET SECOND CONTROL WORD
MOVE2    EQU   *
         MVC   FIVE(ONE,RLIST),FIVE(RMOVE)   SET BUFFERED BYTE
         LA    RLIST,EIGHT(RLIST)       RESET POINTER
         LA    RMOVE,EIGHT(RMOVE)       RESET ALSO
         SH    RPARM,H8                 RESET COUNT
MOVE3    EQU   *
         CH    RPARM,H256               WILL ONE MOVE DO IT
         BNH   MOVE4                    YES
         MVC   ZERO(TWO56,RLIST),AVTEZERO(RMOVE)  MOVE 256 CHARACTERS
         LA    RLIST,TWO56(RLIST)       SET UP
         LA    RMOVE,TWO56(RMOVE)         FOR
         SH    RPARM,H256                    NEXT MOVE
         B     MOVE3                    PERFORM NEXT MOVE
         SPACE
MOVE4    EQU   *
         BCTR  RPARM,AVTEZERO           DECREMENT FOR EXECUTE
         EX    RPARM,MVC                MOVE CHARACTER
         LR    RLIST,RRET               GET LIST BACK
         BAL   RRET,INVLNGTH            COMPUTE LENGTH OF INV LIST
         ST    RPARM,OCMODNME+FOUR      STORE INV LIST LENGTH
         ST    RLIST,OCMODNME           ADDRESS OF INVITATION LIST
*              DETERMINE ALL EXIT SITUATIONS                          *
EXIT     EQU   *
         L     RLCB,SAVEOFF(RSAVE)      GET ADDRESS OF LCB
         TM    OPCSPEC,OPCRSTRT         RESTART IN PROGRESS
         BO    CKPOINT1                 YES,GO TO CHECKPOINT
         SPACE
         SR    RZERO,RZERO              SET GOOD RETURN CODE
EXIT1    EQU   *
         LA    RRET,EIGHT(RLIST)        POINTER TO BEGINNING OF LIST
         ST    RRET,LCBINVPT-IEDQLCB-ONE(RLCB) FOR RECEIVE SCHEDULER
         TM    OCSWITCH,X40             SHOULD LINE BE RESTARTED
         BZ    OUT1                     NO
         SPACE
NOTMPS   EQU   *
         MVI   LCBPRI-IEDQLCB(RLCB),LCBPRIOR SET E0 PRIORITY IN LCB
         OI    LCBSTAT1-IEDQLCB(RLCB),LCBRECVN   SET STATUS FOR START
         ST    RLCB,AVTEZERO(RLCB)      MAKE LCB POINT TO ITSELF
         L     RWORK,CVTPTR             GET CVT ADDR           @Y17XARP
         L     RWORK,AVTCVTPT(RWORK)    GET ADDR OF TCX        @Y17XARP
         USING IEDQTCX,RWORK            ESTABLISH ADDR         @Y17XARP
         L     CURR,TCXREADY            GET ADDR OF CURRENT    @Y17XARP
*                                       ENTRY ON ASYN READY Q  @Y17XARP
NEWCURR  STCM  CURR,SEVEN,LCBLINK-IEDQLCB(RLCB)                @Y17XARP
*                                       LINK NEW ELEM TO CURR  @Y17XARP
         CS    CURR,RLCB,TCXREADY       WAS CURR ELEM UPDATED  @Y17XARP
*                                       ASYNCHRONOUSLY         @Y17XARP
         BNE   NEWCURR                  YES,LINK NEW ELEM TO   @Y17XARP
*                                       CURR ELEM. NO, ASYN    @Y17XARP
*                                       READY QUEUE NOW HAS    @Y17XARP
*                                       NEW ELEM               @Y17XARP
         TM    AVTBIT3,AVTSTAIN         CHECKPOINT THIS
         BZ    OUT1                     GO CHECKPOINT THE ELEMENT
         SPACE
CKPOINT1 EQU   *
         MVC   OPCLDNME+VARINAME(NAMELEN),CHECKPT
         STH   RZERO,OCPARM             SET FOR CHECKPOINT
         MVC   OCWTG(NAMELEN),WRITE     SET UP OUTPUT MODULE
         B     XCTL                     GO CHECKPOINT
         SPACE
OUT1     EQU   *
         SR    RZERO,RZERO
OUT      EQU   *
         MVC   OPCLDNME+VARINAME(NAMELEN),WRITE  SET MODULE NAME
XCTL     EQU   *
         NI    OPCFLAG1,AVTEZERO        CLEAR FLAGS
         LR    RPARM,ROPCAVT            PASS AVT ADDRESS
         XCTL  SF=(E,OPCXCTL)           CALL NEXT MODULE
MACTIVE1 EQU   *
         LA    RRET,TWO
         SR    RENTRY,RRET              BACK UP TWO
         SR    RSWAP,RRET               BACK UP TWO
         MVC   OCPARM,ONE(RENTRY)       SAVE EOT-FE
         EX    RWORK1,MOVACT1           MOVE TO ACTIVE
         LA    RRET,ONE(RLENGTH,RENTRY) ADDRESSING FOR EOTFE
         MVC   ZERO(TWO,RRET),OCPARM    RESET EOT-FE
         B     MACTIVE2                 GO INCREMENT ACTIVE COUNT
         SPACE
INVLNGTH EQU   *
         SR    RPARM,RPARM              CLEAR
         LR    RZERO,RPARM              REGISTERS
         IC    RZERO,AVTEZERO(RLIST)    GET NUMBER OF ENTRIES
         IC    RPARM,TWO(RLIST)         GET ENTRY WIDTH
         MR    RZERO,RZERO              GET LIST SIZE-1
         LA    RPARM,NINE(RPARM)        ADD STATUS AND FE
         TM    THREE(RLIST),EOT         BSC?
         BCR   EIGHT,RRET               NO
         SPACE
         LA    RPARM,ONE(RPARM)         YES,ADD ONE FOR EOT
         BR    RRET                     GO BACK
         SPACE
SWAP1    XC    ONE(AVTEZERO,RSWAP),ONE(RENTRY) SWAP TWO
SWAP2    XC    ONE(AVTEZERO,RENTRY),ONE(RSWAP) SUCCESSIVE
SWAP3    XC    ONE(AVTEZERO,RSWAP),ONE(RENTRY) ENTRIES
MOVACT   MVC   AVTEZERO(AVTEZERO,RENTRY),ONE(RENTRY)  TO ACTIVATE ENTRY
MVC      MVC   AVTEZERO(ONE,RLIST),AVTEZERO(RMOVE) MOVE NEW LIST IN
MOVACT1  MVC   ONE(ONE,RENTRY),THREE(RENTRY)
H256     DC    H'256'                   TO DETERMINE IF ONE MOVE ENOUGH
H8       DC    H'8'                     RESET LENGTH OF INVITATION LIST
CHECKPT  DC    C'06'                    CHECKPOINT MODULE NAME
WRITE    DC    C'07'                    OUTPUT WRITER NAME
STOPLN   DC    C'V1'                    STOPLINE MODULE
ICHNGMOD DC    C'I0'                    ICHANGE DEACTIVATE
FIRSTLD  DC    C'00'                    FIRST LOAD OF OP CTL
ICHNG1   DC    C'I1'                    ICHANGE ACTIVATE AND MOVE
ZAPAREA  DC   50X'FF'                   PATCH AREA             @Y17XART
         TITLE 'IGCI110D - DSECTS REFERENCED BY THIS MODULE'
         TAVTD
         EJECT
         TTCXD SVS
         EJECT
         DCBD DSORG=TX
         EJECT
         TDEBD
         EJECT
         TDISPD
         EJECT
         EJECT
         TLCBD
         EJECT
         TOPCED
         EJECT
         TOPCAVTD
         EJECT
         TPRFD
         EJECT
         TPRIOR
         EJECT
         TQCBD
         EJECT
         TSCBD
         EJECT
         TTNTD
         EJECT
         TTRMD
         END
