         TITLE 'IGCD510D - DISPLAY TERMINAL'
IGCD510D CSECT
*A000000-999999                                                  S99240
***********************************************************************
*                                                                     *
* MODULE NAME = IGCD510D (TCAM, OPERATOR CONTROL)              @Y17XARX
*                                                              @Y17XARX
* DESCRIPTIVE NAME = PROCESS DISPLAY TERMINAL COMMANDS         @Y17XARX
*                                                              @Y17XARX
* COPYRIGHT = NONE                                             @Y17XARX
*                                                                     *
* STATUS = VERSION 10.0                                        @Y17XARX
*                                                                     *
*FUNCTION -- THIS ROUTINE PROCESSES OPERATOR CONTROL COMMANDS WHICH   *
*   REQUEST DISPLAY OF THE FIELDS IN A SPECIFIED TERMINAL ENTRY.      *
*                                                                     *
*   WHEN ENTERED FROM IGCD010D THE DISPLAY COMMAND VERIFYING ROUTINE  *
*   THE TERMINAL NAME SPECIFIED IN THE COMMAND HAS BEEN FOUND TO BE   *
*   VALID. IF IT WAS NOT VALID IGCD010D WOULD HAVE GENERATED AN ERROR *
*   MESSAGE BY XCTLING TO THE ERROR WRITER IGC0310D.                  *
*                                                                     *
*   THE TERMINAL'S NAME IS OBTAINED FROM OPCDOUBL IN THE OPCAVT WHERE *
*   IT WAS PASSED BY IGCD010D. IT IS PLACED IN THE GOOD RESPONSE.     *
*   AND ITS ADDRESS IS OBTAINED FROM OCELEM IN THE OPERATOR CONTROL   *
*   ELEMENT (OPCE) PASSED ALSO BY IGCD010D. ITS INPUT AND OUTPUT      *
*   SEQUENCE NUMBERS (TRMINSEQ AND TRMOUTSQ) ARE CONVERTED TO         *
*   PRINTABLE CHARACTERS AND PLACED IN THE RESPONSE.  IF THE ENTRY    *
*   IS NOT A PROCESS ENTRY (TRMSTATE DOES NOT HAVE X'20' BIT ON),     *
*   THE INTENSIVE MODE SEARCH TABLE IS OBTAINED AND THE SENSE DATA    *
*   AT TRMSENSE IS CONVERTED TO PRINTABLE INFORMATION AND PLACED IN   *
*   THE RESPONSE.                                                     *
*                                                                     *
*   THE STATUS BYTE (TRMSTATE) IS ACCESSED AND THE PRINTABLE          *
*   EQUIVALENTS OF ITS BIT VALUES PLACED IN THE RESPONSE MESSAGE.     *
*   CONTROL RETURNS TO THE MESSAGE WRITER ROUTINE IGC0710D.           *
*                                                                     *
*   THE FOLLOWING 3705 TYPES ARE NOW ACCEPTED AS INPUT: SSCP,  @Y17XARX
*   NCP, PU, LU, LINE OR SINGLE ENTERY. INTENSIVE MODE WILL    @Y17XARX
*   ALWAYS EQUAL 'NO' FOR THESE TYPES.                         @Y17XARX
*                                                              @Y17XARX
*ENTRY POINTS --                                                      *
*        'IGCD510D' TO PROCESS DISPLAY TERM OPERATOR CONTROL COMMANDS *
*                                                                     *
*INPUT-- REGISTER 1 - ADDRESS OF OPCAVT. AT THE LABEL OPCDOUBL IN THE *
*   OPCAVT IS THE FOLLOWING:                                          *
*      (+0)OPCDOUBL - TERMINAL NAME                                   *
*      (+C)OPCCOPCE - ADDRESS OF CURRENT ELEMENT (OPCE)               *
*   OPCE                                                              *
*      (+4)OCELEM - TERMINAL ENTRY ADDRESS                            *
*                                                                     *
*OUTPUT-- REGISTER 1 - ADDRESS OF OPCAVT                              *
*        OPCAVT                                                       *
*      (+50)OPCWORK - ADDRESS OF OPERATOR CONTROL RESIDENT WORK AREA  *
*   THIS WORK AREA CONTAINS BUILT MESSAGE                             *
*                                                                     *
*                                                                     *
*EXTERNAL ROUTINES-- N/A                                              *
*                                                                     *
*EXITS,NORMAL-- COMMAND IS PROCESSED. A RESPONSE MESSAGE IS BUILT IN  *
*   THE RESIDENT WORK AREA AND IGC0710D THE MESSAGE WRITER IS XCTLED  *
*   TO.                                                               *
*                                                                     *
*   NORMAL EXIT MESSAGES ARE-                                         *
*   IED033I 'STATNAME' STATUS='STATUS,...' INTENSE='SENSE COUNT'      *
*   IN-SEQ='INTEGER' OUT-SEQ='INTEGER'                                *
*                                                                     *
*EXITS,ERROR-- N/A. ALL ERROR MESSAGES ARE GENERATED FROM IGCD010D    *
*                                                                     *
*   ERROR MESSAGES ARE-                                               *
*   IED017I STATION 'STATNAME' NOT FOUND  --GENERATED BY IGCD010D     *
*                                                                     *
*TABLES/WORK AREAS--OPCAVT,TCAM AVT,STATUS BYTE TABLE,SENSE BYTE      *
*   CONVERSION TABLE,TERMNAME TABLE,TERMINAL ENTRY,OPCE               *
*                                                                     *
*ATTRIBUTES-- SERIALLY REUSABLE,SUPERVISOR MODE,TRANSIENT(TYPE 4),    *
*   DISABLED,NON-REENTRANT,REFRESHABLE                                *
*                                                                     *
*CHARACTER CODE DEPENDENCY                                            *
*        THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL        *
*        REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS        *
*        EQUIVALENT TO THE ONE USED AT ASSEMBLY TIME.  THE CODING     *
*        HAS BEEN ARRANGED SO THAT REDEFINITION OF CHARACTER          *
*        CONSTANTS, BY REASSEMBLY WILL RESULT IN A CORRECT MODULE     *
*        FOR THE NEW DEFINITION.                                      *
*                                                                     *
*NOTES - COMMUNICATIONS BETWEEN THE VARIOUS TRANSIENT MODULES IS      *
*        PRIMARILY THROUGH THE OPERATOR CONTROL AVT.                  *
*                                                                     *
*        THIS IS A MODULE RE-WRITE OF IEDQCH AS OF OS/TCAM LEVEL II   *
***********************************************************************
         EJECT
*        REGISTER EQUATES
RZERO    EQU   0                   REGISTER
R0       EQU   0                       WORK REGISTER
R1       EQU   1                        PARAMETER
ROPCAVT  EQU   2                   OPC AVT ADDRESSABILITY
ROPC     EQU   2                        OPERATOR CONTROL AVT BASE
ROPCE    EQU   3                   OPC ELEMENT ADDRESSABILITY
RAVT     EQU   4                        AVT BASE
RWKAREA  EQU   5                   ADDRESS OF OPC WORKAREA
RTERM    EQU   6                        TERMINAL ENTRY BASE
RWORK    EQU   7                        WORK
RLULU    EQU   7                        REG TO TEST FOR LU-LU  @Y17XARX
RWORK2   EQU   8                        WORK
REGEX    EQU   9                   REGISTER USED FOR EXECUTE
RWORK3   EQU   9                        WORK
RQCB     EQU   10                       QCB BASE
RTNT     EQU   11                  TNT BASE
RTBL     EQU   11                       WORK TABLE
RBASE    EQU   12                       ROUTINE BASE
R13      EQU   13                       SAVE AREA
R14      EQU   14                       RETURN
R15      EQU   15                       ENTRY POINT
         EJECT
*        ADDRESSABILITY
         USING IEDQQCB,RQCB             ADDRESSABILITY FOR QCB
         USING IEDQOPCE,ROPCE      ADDRESSABILITY FOR OPCELEM
         USING IEDQAVTD,RAVT            ADDRESSABILITY FOR AVT
         USING IEDQOPCD,ROPC       ADDRESSABILITY FOR OP CTL
         USING IEDQTNTD,RTNT            ADDRESSABILITY FOR TNT
         USING IEDNTRM,RTERM            ADDRESSABILITY FOR TERM@Y17XARX
         BALR  RBASE,ZERO               ESTABLISH
         USING *,RBASE             ADDRESSABILITY
IGCD510D IEDHJN SKIPID
         LR    ROPC,R1                  SET UP OP CTL AVT
         L     RAVT,OPCAVTPT       GET AVT BASE
         L     RTNT,AVTRNMPT            GET TERMINAL TABLE
         L     RTERM,OCELEM        SET TERM ENTRY BSSE
         LA    RWORK,TRMPRFSZ           GET ABSOLUTE TTE LENGTH@Y17XARX
         SR    RTERM,RWORK              BACKUP TO NEG PART TTE @Y17XARX
         L     RWKAREA,OPCWORK     GET ADDR OF OPC WORKAREA
FOUND    EQU   *
         LA    R1,GOOD             GET MSG ADDRESS
MOVEAMSG SR    RWORK2,RWORK2       CLEAR REGISTER
         IC    RWORK2,LENOFF(R1)   GET LENGTH OF MSG
         STH   RWORK2,LENOFF(RWKAREA)  PLACE LENGTH IN WORKAREA
         BCTR  RWORK2,ZERO              DECREMENT FOR EXECUTE
         EX    RWORK2,MOVEMSG      MOVE MSG TO OPC WORKAREA
         LH    RWORK2,OCTRMTBL     GET TERMNAME OFFSET
         SR    RWORK3,RWORK3       CLEAR REGISTER FOR ENTRY LENGTH
         IC    RWORK3,TNTENLEN     PICK UP LEN FO TERM NAMES
         LR    R14,RWORK3          SAVE LEN OF NAMES
         LA    RWORK3,OPCTHREE(RWORK3) ADD THREE TO ALLOW FOR ADDR
         BCTR  RWORK2,ZERO              SUBTRACT 1 FROM OFFSET
         MR    RWORK2,RWORK2       CALCULATE OFFSET IN ENTRIES
         LA    R13,TNTFIRST        FET ADDR OF 1ST TNT ENTRY
         AR    R13,RWORK3          ADD OFFSET OT ADDR FOR LOCATION
         LR    REGEX,R14           SETUP FOR EXECUTE OF NAME
         BCTR  REGEX,ZERO               DECREMENT FOR EXECUTE
         EX    REGEX,MOVENAME      INSERT NAME INTO MSG
         LH    RWORK,TRMINSEQ           GET INPUT SEQUENCE
         TM    TRMSTATE,TRMPREF         DOES TTE PREFIX EXIST  @Y17XARX
         BZ    NOTONIN                  NOT ON, PROCEED TO PACK@Y17XARX
         TM    TRMSTATE,TRMLINE         IS THIS A LINE ENTRY   @Y17XARX
         BZ    NOTONIN                  NOT ON, PROCEED TO PACK@Y17XARX
         LA    RWORK,ONE           IS ON, LOAD '1' INTO RWORK  @Y17XARX
NOTONIN  EQU   *                                               @Y17XARX
         CVD   RWORK,OPCDOUBL           CONVERT IT TO PACKED DEC
         UNPK  OPCDOUBL(OPCFIVE),OPCDOUBL+FIVE(OPCTHREE) MAKE ZONED
         OI    OPCDOUBL+FOUR,ZONE       CHANGE ZONE FOR PRINTING
         MVC   SEQ7(OPCFOUR,RWKAREA),OPCDOUBL+ONE PUT SEQ-IN IN MSG
         LH    RWORK,TRMOUTSQ           GET OUTPUT SEQUENCE
*                             3705 LINE TTE'S HAVE INVALID     @Y17XARX
*                              TRMINSEQ & TRMOUTSQ.            @Y17XARX
         TM    TRMSTATE,TRMPREF         DOES TTE PREFIX EXIST  @Y17XARX
         BZ    NOTONOUT                 NOT ON, PROCEED TO PACK@Y17XARX
         TM    TRMSTATE,TRMLINE         IS THIS A LINE ENTRY   @Y17XARX
         BZ    NOTONOUT                 NOT ON, PROCEED TO PACK@Y17XARX
         LA    RWORK,ONE           IS ON, LOAD '1' INTO REWORK @Y17XARX
NOTONOUT EQU   *                                               @Y17XARX
         CVD   RWORK,OPCDOUBL           CONVERT IT TO PACKED DEC
         UNPK  OPCDOUBL(OPCFIVE),OPCDOUBL+FIVE(OPCTHREE) MAKE ZONED
         OI    OPCDOUBL+FOUR,ZONE       CHANGE ZONE FOR PRINTING
         MVC   SEQ21(OPCFOUR,RWKAREA),OPCDOUBL+ONE PUT SEQ-OUT IN MSG
         SR    RWORK,RWORK              CLEAR
         TM    TRMDSORG,TRMLGB          LINE GROUP BLOCK         S22024
         BO    LGB                      YES, BRANCH              S22024
         TM    TRMSTATE,TRMPREF         NCP RESOURCE CHECK     @Y17XARX
         BO    NOIMMSG                  YES, NO INTENSIVE MODE @Y17XARX
         TM    TRMSTATE,PROCESS         PROCESS ENTRY
         BO    NOIMMSG                  YES - NO INTENSIVE MODE
*
         LA    RTBL,IMTBL               GET BIT VALUE TBL
         BAL   RWORK2,CKLCB             GET INTENSEIVE MODE VALUE
         SRL   RWORK,OPCFOUR            CLEAR COUNT
         SLL   RWORK,OPCFOUR            RESTORE SENSE
         STC   RWORK,OPCDOUBL           PUT IN WORK AREA
ILOOP    EQU   *
         CLI   OPCZERO(RTBL),AVTEFF     END OF TABLE
         BE    NOIMMSG                  YES - NO SENSE BITS ON
*
         IC    RWORK,OPCZERO(RTBL)      GET BIT SETTING
         EX    RWORK,CLI               THIS IT
         BE    PUTIM                     YES
*
         LA    RTBL,OPCTHREE(,RTBL)     BUMP TO NEXT BIT
         B     ILOOP                    TEST IT
*
NOIMMSG  EQU   *
         MVC   INTENSE(OPCTWO,RWKAREA),NOIM  NO SENSE BITS ON
         B     TESTSTAT                 GO CHECK FOR LINE
*
PUTIM    EQU   *
         MVC   INTENSE(OPCTWO,RWKAREA),OPCONE(RTBL)  SET SENSE VALUE
         BAL   RWORK2,CKLCB             GET INTENSIVE MODE VALUE
         SLL   RWORK,TWENTY8       CLEAR HIGHHALF
         SRL   RWORK,TWENTY7        MULTIPLY BY TWO FOR HALFWORD
         LA    RWORK,COUNT(RWORK)       GET INDEX
         MVC   INTENSE3(OPCTWO,RWKAREA),OPCZERO(RWORK) SET IN MSG
TESTSTAT EQU   *
         TM    TRMSTATE,TRMPREF         NCP RESOURCE CHECK     @Y17XARX
         BO    NCP                      YES, GO HANDLE STATUS  @Y17XARX
         TM    TRMSTATE,LINE            LINE ENTRY
         BNO   ENTRIES                  NO - TEST OTHER TYPES
LINEMSG  EQU   *                                               @Y17XARX
         MVC   GOODMSG(OPCSEVEN,RWKAREA),LINEENT INSERT 'LINE' @Y17XARX
         B     OTHERS                   GO LOOK AT OTHER BITS
*
ENTRIES  EQU   *
         TM    TRMSTATE,DISCAS          DISTLIST OR CASCADE
         BNO   SNGLPROC                 NO - SINGLE OR PROCESS
*
         LH    RQCB,SHORTMSG            LEN OF MSG THRU STATUS FIELD
         STH   RQCB,LENOFF(RWKAREA)     STORE NEW LEN IN WORKAREA
         L     RQCB,TRMDESTQ-ONE        GET QCB ADDRESS
         CLI   OPCFIVE(RQCB),CASC       CASCADE LIST ENTRY
         BE    PUTCASC                  YES - PUT IN MSG
*
         MVC   GOODMSG(OPCSEVEN,RWKAREA),DISLIST PUT 'DISLIST' @Y17XARX
         B     OTHERS                   GO INSERT MESSAGE TEXT
*
PUTCASC  EQU   *
         MVC   GOODMSG(OPCSEVEN,RWKAREA),CASLIST  PUT 'CASLIST'@Y17XARX
         B     OTHERS                   GO INSERT MESSAGE TEXT
*
SNGLPROC EQU   *
         TM    TRMSTATE,PROCESS         PROCESS ENTRY
         BNO   PROC                     NO - SINGLE
*
         MVC   GOODMSG(OPCSEVEN,RWKAREA),PROCES  PUT 'PROCESS' @Y17XARX
         B     OTHERS                   GO INSERT MESSAGE TEXT
         EJECT
CKLCB    EQU   *
         TM    TRMSTATE,DISCAS          DISTLIST OR CASCADE
         BNZ   CKTRM                    YES, CAN'T BE IN LCB
         L     RQCB,TRMDESTQ-ONE        GET QCB ADDRESS
         IC    RWORK,QCBRELLN           GET RELATIVE LINE
         L     R1,QCBDCBAD-ONE          GET DCB ADDRESS
         USING IHADCB,R1                ADDRESSABILITY FOR DCB
         CLI   DCBTIOT,A                LINE OPEN
         BNL   CKTRM                     NO, NOT IN LCB
         LR    R15,RWORK                RELATIVE LINE NUMBER
         SLL   R15,OPCTWO               X 2 FOR UCB INDEX
         L     R14,DCBDEBAD             GET DEB ADDRESS
         CLC   QCBRELLN(OPCONE),DEBNMEXT-DEBNMSUB(R14) EXTENT HIGH
         BH    CKTRM                    YES, NOT IN LCB
         L     R15,DEBUCBAD-FOUR-DEBNMSUB(R14,R15) GET UCB ADDRESS
         LA    R15,OPCZERO(R15)          CLEAR HIGH BYTE
         LTR   R15,R15                   OPEN DD DUMMY
         BZ    CKTRM                     YES,  NOT LCB
         L     R15,DCBIOBAD             GET FIRST JOB ADDRESS
         LA    R15,OPCZERO(R15)         CLEAR HIGH BYTE
         SR    R0,R0                    CLEAR FOR INDEX
         IC    R0,DCBEIOBX              GET INDEX TO IOB
         DROP  R1
         LR    R1,RWORK                 RELATIVE LINE NUMBER
         MR    R0,R0                    INDEX TO PROPER IOB
         AR    R15,R1                   ADDRESS OF PROPER IOB
         LA    R1,LCBFLAG1-IEDQLCB      GET LCB INDEX
         SR    R15,R1                   GET LCB ADDRESS
         IC    RWORK,LCBERMSK-IEDQLCB(R15)   INTENSIVE MODE VALUE
         LTR   RWORK,RWORK              ANY IN LCB
         BCR   7,RWORK2                 YES, USE IT.
*
CKTRM    IC    RWORK,TRMSENSE           GET INTENSIVE MODE VALUE
         BR    RWORK2                   RETURN TO CALLER
PROC     EQU   *
         MVC   GOODMSG(OPCSEVEN,RWKAREA),SNGLTRM PUT 'SNGLTRM' @Y17XARX
OTHERS   EQU   *
         LA    RWORK3,GOODMSG8(RWKAREA)  GET START OF VARIABLE
         TM    TRMSTATE,TRMHELDN        INTERCEPT BIT ON
         BNO   OPTS                     NO
*
         MVC   OPCZERO(OPCSEVEN,RWORK3),INTCEPT  PUT 'INTCEPT' @Y17XARX
         LA    RWORK3,OPCEIGHT(,RWORK3) BUMP MSG ADDR
OPTS     EQU   *
         TM    TRMSTATE,TRMOPTFN        OPTION FIELDS BIT ON
         BNO   SEC                      NO
*
         MVC   OPCZERO(OPCSEVEN,RWORK3),OPTFLDS  PUT 'OPTFLDS' @Y17XARX
         LA    RWORK3,OPCEIGHT(,RWORK3) BUMP MSG ADDR
SEC      EQU   *
         TM    TRMSTATE,TRMSCNYN        SECONDARY BIT ON
         BNO   END                      NO
*
         MVC   OPCZERO(OPCSEVEN,RWORK3),SCNDARY  PUT 'SCNDARY' @Y17XARX
         LA    RWORK3,OPCEIGHT(,RWORK3) BUMP MSG ADDR
END      EQU   *
         TM    TRMSTATE,TRMPREF    NCP RESOURCE CHECK          @Y17XARX
         BNO   FINI                     NO,BRANCH INSERT MSGID @Y17XARX
         CLI   TRMTYPE,TRMLUNT          CHECK FOR LU           @Y17XARX
         BNE   FINI                     NO,BRANCH INSERT MSGID @Y17XARX
         SR    RLULU,RLULU              CLEAR REGISTER         @Y17XARX
         ICM   RLULU,LULUMASK,TRMSIBPT  MASK TEST FOR LU-LU    @Y17XARX
         BZ    NOTSESS             BRANCH NO LU-LU SESSION     @Y17XARX
         USING IEDSIBD,RLULU       SET UP FOR SECOND CHECK     @Y17XARX
         ICM   RLULU,LULUMASK,SIBCHAIN NOT ZERO,IS LU-LU SESS  @Y17XARX
         BNZ   FINI                BRANCH & INSERT MSGID       @Y17XARX
NOTSESS  MVC   OPCZERO(OPCSEVEN,RWORK3),NOTSES                 @Y17XARX
*                                       PUT 'NOTSESS' IN MSG   @Y17XARX
         LA    RWORK3,OPCEIGHT(,RWORK3) BUMP MSG ADDRESS       @Y17XARX
FINI     EQU   *                                               @Y17XARX
         MVC   OPCLDNME+OPCTHREE(OPCTWO),MSGWRIT INSERT ID OF
DIFFRTN  XC    OCPARM(THREE),OCPARM     CLEAR WTG & PARM FIELDS
         LR    R1,ROPCAVT          SET UP PARAMETER REGISTER
         L     R13,OPCSAVE         GET ADDR OF OPC SAVE AREA
         XCTL  SF=(E,OPCXCTL)      XCTL TO IGC0701D
LGB      EQU   *                   LINE GROUP BLOCK
         MVC   GOODMSG(OPCSEVEN,RWKAREA),LGBLOCK  PUT 'LGBLOCK'@Y17XARX
*                                       PUT LGB IN MSG           S22024
         LA    RWORK3,GOODMSG8(RWKAREA) START OF VARIABLE AREA   S22024
         LH    RWORK,LGBMSG        GET SHORT MSG LENGTH
         STH   RWORK,LENOFF(RWKAREA)   STORE LENGHT IN OPC WKAREA
         B     FINI                PREPARE TO EXIT & PRINT     @Y17XARX
NCP      EQU   *                                               @Y17XARX
         CLI   TRMTYPE,TRMSSCP          CHECK FOR SSCP         @Y17XARX
         BNE   CKNCP                    NO, BRANCH & CHECK NCP @Y17XARX
         MVC   GOODMSG(OPCFOUR,RWKAREA),SSCP PUT 'SSCP' IN MSG @YM06123
         B     OTHERS                   GO INSERT MSG TEXT     @Y17XARX
CKNCP    EQU   *                                               @Y17XARX
         CLI   TRMTYPE,TRMLNCP          CHECK FOR NCP          @Y17XARX
         BNE   CKPU                     NO,BRANCH & CHECK PU   @Y17XARX
         MVC   GOODMSG(OPCTHREE,RWKAREA),NCPFLAG   PUT 'NCP'   @YM06123
         B     OTHERS                                          @Y17XARX
CKPU     EQU   *                                               @Y17XARX
         CLI   TRMTYPE,TRMPUNT          CHECK FOR PU           @Y17XARX
         BNE   CKLU                     NO,BRANCH & CHECK LU   @Y17XARX
         MVC GOODMSG(OPCTWO,RWKAREA),PU  PUT 'PU' IN MESSAGE   @YM06123
         B     OTHERS                   BRANCH & CHECK INTRCPT @Y17XARX
CKLU     EQU   *                                               @Y17XARX
         CLI   TRMTYPE,TRMLUNT          CHECK FOR LU           @Y17XARX
         BNE   CKLN                     NO,BRANCH & CHECK LINE @Y17XARX
         MVC   GOODMSG(OPCTWO,RWKAREA),LU  PUT 'LU' IN MESSAGE @YM06123
         B     OTHERS                   BRANCH & CHECK INTRCPT @Y17XARX
CKLN     EQU   *                                               @Y17XARX
         TM   TRMSTATE,TRMLINE         CHECK FOR LINE          @Y17XARX
         BZ    PROC                    NO,BRANCH PUT SNGL INMSG@Y17XARX
         B     LINEMSG                  BRANCH & INSERT STATUS @Y17XARX
*
         SPACE 5
*        MOVES
MOVENAME MVC   GOODOFF(OPCZERO,RWKAREA),OPCZERO(R13) INSERT NAME
MOVEMSG  MVC   OPCFOUR(OPCZERO,RWKAREA),OPCONE(R1) MOVE MSG TO WKAREA
         SPACE 5
*        EQUATES
PROCESS  EQU   X'20'                    EQUATE FOR PROCESS
ZONE     EQU   X'30'                    CONVERSION FACTOR FOR ZONE
DISCAS   EQU   X'40'                    EQUATE FOR DIST OR CASC
LINE     EQU   X'80'                    EQUATE FOR LINE ENTRY
OPCZERO  EQU   0                   OFFSET
OPCONE   EQU   1                   OFFSET
OPCTWO   EQU   2                   OFFSET
OPCTHREE EQU   3                   OFFSET
OPCFOUR  EQU   4                   OFFSET
OPCFIVE  EQU   5                   OFFSET
OPCSEVEN EQU   7                   OFFSET
OPCEIGHT EQU   8                   OFFSET
LENOFF   EQU   0                   OFFSET FOR LENGTH OF MSG
GOODOFF  EQU   12                  OFFSET IN MSG FOR NAME OF TERM
OPCREG1  EQU   24                  OFFSET INTO SAVE OF REG1
SEQ7     EQU   97                  PUT SEQ-IN IN MSG
ZERO     EQU   0                        OFFSET
ONE      EQU   1                        OFFSET
THREE    EQU   3                        OFFSET
FOUR     EQU   4                        OFFSET
FIVE     EQU   5                        OFFSET
SEVEN    EQU   7                        OFFSET
FOURTEEN EQU   14                       OFFSET
TWENTY1  EQU   21                       OFFSET
FOURTY2  EQU   42                       OFFSET
FOURTY9  EQU   49                       OFFSET
FIFTY6   EQU   56                       OFFSET
SIXTY3   EQU   63                       OFFSET
SEQ21    EQU   111                 PUT SEQ-OUT IN MSG
FIFTEEN  EQU   15                       OFFSET                   S22024
TWENTY7  EQU   27                       OFFSET                   S22024
TWENTY8  EQU   28                       OFFSET                   S22024
SHORTMSG DC    H'0049'                  LEN OF MSG THRU STATUS FIELD
A        EQU   C'A'                     CHARACTER A              S22024
INTENSE  EQU   84                  OFFSET FOR INTENSIVE MODE VALUES
INTENSE3 EQU   87                  OFFSET FOR 2ND INTENSIVE MODE VALUE
GOODMSG  EQU   29                  OFFSET FOR 1S  ENTRY IN STATUS FIELD
GOODMSG8 EQU   37                  BUMP PAST 1ST ENTRY
DZERO    DC    C'0'                     DUMMY ZERO
MSGWRIT  DC    C'07'               ID FOR IGC0710D ROUTINE
CASC     EQU   C'G'                     IDENTIFIES CASCADE LIST ENTRY
LULUMASK EQU   B'0111'                  ICM MASK TO CHK LU-LU  @Y17XARX
CLI      CLI   OPCDOUBL,OPCZERO         EXECUTED COMPARE
COUNT    DC    C'00010203040506070809101112131415'    TABLE
         SPACE 5
*        MESSAGES
LGBMSG   DS    0H
         DC    AL2(GOODMSG1-GOOD)       MSG LENGTH               S22024
SMSG     DS    0H
         DC    AL2(GOODMSG1-GOOD)       LENGTH
GOOD     DS    0H
         DC    AL1(ENDGOOD-*-1)         LENGTH
         DC    C'IED033I ',8C' ',C' STATUS='  MSG TEXT
         DC    47C' '                   MSG TEXT
GOODMSG1 DC    C' INTENSE='             MSG TEXT
         DC    6C' '                    MSG TEXT
SEQ      DC    C'IN-SEQ=    , OUT-SEQ=    '   MSG TEXT
ENDGOOD  EQU   *
LINEENT  DC    C'LINEENT'               TABLE                  @Y17XARX
DISLIST  DC    C'DISLIST'                                      @Y17XARX
CASLIST  DC    C'CASLIST'                                      @Y17XARX
SNGLTRM  DC    C'SNGLTRM'                                      @Y17XARX
PROCES   DC    C'PROCESS'                                      @Y17XARX
ACPTING  DC    C'ACPTING'                                      @Y17XARX
INTCEPT  DC    C'INTCEPT'                                      @Y17XARX
OPTFLDS  DC    C'OPTFLDS'                                      @Y17XARX
SCNDARY  DC    C'SCNDARY'                                      @Y17XARX
LGBLOCK  DC    C'LGBLOCK'                                      @Y17XARX
NOTSES   DC    C'NOTSESS'                                      @Y17XARX
SSCP     DC    C'SSCP'                                         @Y17XARX
NCPFLAG  DC    C'NCP'                                          @Y17XARX
PU       DC    C'PU'                                           @Y17XARX
LU       DC    C'LU'                                           @Y17XARX
IMTBL    DC    X'10',C'TO',X'20',C'LD',X'30',C'OR',X'40',C'DC' TBL
         DC    X'50',C'EC',X'60',C'BO',X'70',C'IR',X'80',C'CR' TABLE
         DC    X'90',C'UE',X'A0',C'M2',X'F0',C'IM',X'FF'   MORE
NOIM     DC    C'NO'                    TEXT
         DC    50X'FF'                  ZAP AREA FOR PATCHES   @Y17XARX
*
         EJECT
*        MACROS
         TOPCED
         TOPCAVTD
         TAVTD
         TTRMD
         TTNTD
         TQCBD
         TLCBD
         DCBD  DSORG=TX
         TDEBD
         TSIBD                                                 @Y17XARX
*
         END
