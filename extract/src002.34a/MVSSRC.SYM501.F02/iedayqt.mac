         TITLE 'IEDAYQT - QTIP (TIOC EXTENDED ROUTER SVC)'
* **************************************************************
*
*01* MODULE-NAME = IEDAYQT
*
*01* DESCRIPTIVE-NAME = QTIP (TIOC EXTENDED ROUTER SVC)
*
*01* COPYRIGHT = NONE
*
*01* STATUS = 01
*
********    VS2-3.0 DELETIONS, CHANGES AND ADDITIONS
*C753600,753800,753900,753920,085500                            ZA00611
*
*01* FUNCTION = ROUTES QTIP REQUESTS TO THE APPROPRIATE ROUTINE.
*               THIS MODULE ALSO CONTAINS CERTAIN COMMON
*               SUBROUTINES USED BY THE VARIOUS QTIP ROUTINES.
*
*01* NOTES =
*
*02*   DEPENDENCIES = N/A
*
*02*   RESTRICTIONS = THE QTIP SVC WILL ACT AS A NOP WHEN ISSUED
*                     IN A NON-SYSTEM KEY, OR WHEN TIME SHARING
*                     IS NOT ACTIVE.
*
*02*   REGISTER-CONVENTIONS = SEE REGISTER EQUATES
*
*02*   PATCH-LABEL = PATCH
*
*01* MODULE-TYPE = ASSEMBLER LANGUAGE CSECT
*
*02*   PROCESSOR = SEE LISTING
*
*02*   MODULE-SIZE = SEE EXTERNAL SYMBOL DICTIONARY TYPE SD ID 01
*
*02*   ATTRIBUTES = REENTRANT, REFRESHABLE, SUPERVISOR STATE
*
*01* ENTRY-POINTS = IEDAYQT, IEDAYQT1, IEDAYTPQ, IEDAYQBA, IEDAYQBR
*
*02*   PURPOSE =
*
*        (IEDAYQT AND IEDAYQT1)
*        VALIDATE CALLING PARAMETERS (EXPLICIT AND IMPLICIT)
*        AND PASS CONTROL TO APPROPRIATE FUNCTIONAL CSECT.
*
*        (IEDAYTPQ)
*        TPOST THE SPECIFIED ELEMENT TO THE SPECIFIED QCB.
*
*        (IEDAYQBA)
*        GET A TIOC BUFFER FROM ONE OF THE FREE LISTS.
*
*        (IEDAYQBR)
*        RETURN A TIOC BUFFER TO THE PROPER FREE LIST.
*
*02*   LINKAGE =
*
*        IEDAYQT - ENTERED BECAUSE SVC 101 ISSUED.
*        IEDAYQT1 - ENTERED VIA BALR 14,15
*        IEDAYTPQ - ENTERED VIA BALR 0,15
*        IEDAYQBA - ENTERED VIA BALR 0,15
*        IEDAYQBR - ENTERED VIA BALR 0,15
*
*01* INPUT =
*
*        (IEDAYQT)
*        SVC MUST BE ISSUED IN SUPERVISOR KEY (0-7).
*        REGISTER 00 CONTAINS THE ENTRY CODE.
*        REGISTER 01 CONTAINS 0 OR THE ADDRESS OF A 12 WORD SAVE AREA.
*        REGISTER 03 CONTAINS CVT ADDRESS
*        REGISTER 04 CONTAINS TCB ADDRESS
*        REGISTER 05 CONTAINS RB ADDRESS
*        REGISTER 14 CONTAINS SUPERVISOR RETURN ADDRESS
*
*        (IEDAYQT1)
*        MUST BE CALLED IN SUPERVISOR STATE (ANY KEY).
*        REGISTER 00 CONTAINS THE ENTRY CODE
*        REGISTER 14 CONTAINS RETURN ADDRESS
*        REGISTER 15 CONTAINS ENTRY POINT ADDRESS
*
*        (IEDAYTPQ, IEDAYQBA, IEDAYQBR)
*        SEE COMMENTS IN FRONT OF SUBROUTINES THEMSELVES.
*
*01* OUTPUT =
*
*        (IEDAYQT)
*        INVOKES SPECIFIED QTIP ROUTINE IN TCAM'S KEY.
*        REGISTER 00 AND 01 CONTAIN ADDRESS OF QTIP ROUTINE.
*        REGISTERS 2-11 AND 13 ARE RESTORED FROM SAVE AREA IF PASSED
*        REGISTER 12 CONTAINS BASE ADDRESS OF QTIP ROUTINE.
*        REGISTER 14 CONTAINS SUPERVISOR RETURN ADDRESS
*        REGISTER 15 CONTAINS SAME CONTENTS AS WHEN SVC ISSUED.
*
*        (IEDAYQT1)
*        INVOKES SPECIFIED QTIP ROUTINE IN TCAM'S KEY.
*        REGISTERS 0, 1, 12 SAME AS WITH IEDAYQT.
*        REGISTERS 2-13 AND 15 SAME AS ENTRY.
*        REGISTER 14 CONTAINS ADDRESS OF BRANCH ENTRY EPILOG
*                    (IN IEDAYQT)
*        AFTER THE QTIP ROUTINE EXITS, THE BRANCH ENTRY EPILOG
*        RESTORES THE CALLER'S ORIGINAL KEY.
*        ALL REGISTERS EXCEPT 12 AND 14 ARE AS WHEN THE QTIP ROUTINE
*        EXITED.  12 IS CLOBBERED.  14 CONTAINS USERS RETURN ADDRESS.
*
*        (IEDAYTPQ, IEDAYQBA, IEDAYQBR)
*        SEE COMMENTS IN FRONT OF SUBROUTINES THEMSELVES.
*
*01* EXIT-NORMAL =
*
*        (IEDAYQT)
*        INVOKES SPECIFIED QTIP ROUTINE.
*
*        (IEDQYQT1)
*        INVOKES SPECIFIED QTIP ROUTINE, THEN RETURNS TO CALLER.
*
*        (IEDAYTPQ, IEDAYQBA, IEDAYQBR)
*        RETURN TO CALLER'S RETURN ADDRESS.
*
*01* EXIT-ERROR =
*
*        (IEDAYQT, IEDAYQT1) - BR 14
*
*        (IEDAYTPQ, IEDAYQBR, IEDAYQBA) - NONE
*
*01* EXTERNAL-REFERENCES -
*
*02*   ROUTINES = POST (IEA0PT01), AND THE QTIP ROUTINES
*
*02*   DATA-AREAS = NA
*
*02*   CONTROL-BLOCKS = SEE MAPPING MACROS AT END OF LISTING
*
*01* TABLES = QTIP ROUTINE ADDRESSES (SEE LABEL 'TABLE').
*
*01* MACROS = MODESET
*
*01* CHANGE-ACTIVITY -  SJ00088 05/07/73
*                       VS01090 05/14/73
*                       VS01373 06/16/73
*                       ZA00611 08/22/74
*
******************************************************************
         EJECT
IEDAYQT  CSECT
         COPY  LCGASMS2                 LIBRARY CONTROL
*
*   REGISTER EQUATES
*
R0       EQU   0                        INTERFACE REGISTER
RCODE    EQU   0                        ENTRY CODE
RWRK0    EQU   0                        WORK REGISTER
RPARM    EQU   1                        PARAMETER REGISTER
RELEM    EQU   1                        RECB POINTER
R2       EQU   2                        INTERFACE REGISTER
RQCB     EQU   2                        QCB POINTER
R3       EQU   3                        CVT POINTER
RTCB     EQU   4                        TCB POINTER
RRB      EQU   5                        RB POINTER
RRPT     EQU   6                        TIOCRPT POINTER
RWK9     EQU   9                        WORK REGISTER
R10      EQU   10                       INTERFACE REGISTER
RWK10    EQU   10                       INTERFACE REGISTER
RWK11    EQU   11                       INTERFACE REGISTER
R12      EQU   12                       INTERFACE REGISTER
RBASE    EQU   12                       BASE REGISTER
RTCX     EQU   12                       TCX POINTER
R13      EQU   13                       INTERFACE REGISTER
RLINK    EQU   14                       LINK REGISTER
R15      EQU   15                       INTERFACE REGISTER
*
*   MASKS AND DISPLACEMENTS
*
PKEYDISP EQU   1                        OFFSET OF PROTECTION
*                                       KEY IN PSW
USERKEY  EQU   X'80'                    MASK FOR KEYS 8-15
E0       EQU   0                        NULL
E24      EQU   24                       DECIMAL 24
E1       EQU   1                        DECIMAL 1
TBLSHIFT EQU   2                        SHIFT VALUE TO MULTIPLY
*                                       BY TABLE ENTRY LENGTH
E8       EQU   8                        DECIMAL 7
E7       EQU   7                        DECIMAL 8
EPGSHIFT EQU   12                       SHIFT VALUE FOR PAGE NO.
R13DISP  EQU   X'2C'                    R13 DISPL. IN PARM AREA
*
**********************************************************************
*
*              VALIDITY CHECK FOR SVC CALLER
*
**********************************************************************
*
         BALR  RBASE,RWRK0              GET BASE ADDRESS
         USING *,RBASE                  BASE REG
         B     SVCBASE                  BRANCH AROUND MODULE ID
         DC    C'IEDAYQT '              MODULE I.D.
         DC    X'4234'                  DATE - 08/22/74         ZA00611
SVCBASE  EQU   *
         USING RBSECT,RRB               RB PASSED BY FLIH
         TM    RBOPSW+PKEYDISP,USERKEY  WAS SVC ISSUED BY SYSTEM
         BOR   RLINK                    NO, EXIT
         DROP  RRB                      RB NOT ADDRESSABLE
         SPACE 3
*
**********************************************************************
*
*        SET UP FUNCTION RECOVERY ROUTINE FOR QTIP SVC
*
**********************************************************************
*
         LA    RWK9,QTIPFRR             GET FRR EXIT RTN ADDRESS
         SETFRR A,FRRAD=(9),WRKREGS=(10,11) SET UP FRR
         SPACE 3
*
**********************************************************************
*
*              SAVE RETURN ADDRESS IN TIOCQRET
*
**********************************************************************
*
         MODESET EXTKEY=TCAM            GET INTO TCAM'S KEY
         L     RRPT,CVTAQAVT-CVT(,R3)   ADDRESS OF TCX
         L     RRPT,TCXRPT-IEDQTCX(,RRPT)  ADDRESS OF TIOCRPT
         USING TIOCRPT,RRPT             TIOCRPT ADDRESSABLE
         ST    RLINK,TIOCQRET           SAVE RETURN ADDRESS
         MVI   TIOCQTKY,E0              CHANGE BACK TO KEY 0 BEFORE
*                                       RETURNING TO SUPERVISOR
         DROP  RRPT                     TIOCRPT NOT ADDRESSABLE
         SPACE 3
*
**********************************************************************
*
*   RESTORE REGISTERS 2-13 FROM THE CALLER-SUPPLIED PARAMETER AREA
*
**********************************************************************
*
         LTR   RPARM,RPARM              ANY PARAMETERS PASSED
         BZ    ROUTING                  NO, DON'T RESTORE
         LM    R2,RWK11,E0(RPARM)       RESTORE REG.S
         L     R13,R13DISP(,RPARM)      RESTORE REG. 13
ROUTING  EQU   *
         BAL   RLINK,ROUTER             GO CALCULATE DESTINATION
         DROP  RBASE                    MODULE NOT ADDRESSABLE
         SPACE 3
*
**********************************************************************
*
*              SVC ENTRY EPILOG
*
**********************************************************************
*
         USING *,RLINK                  SET UP BASE FOR MODULE
         MODESET EXTKEY=SUPR            CHANGE INTO SUPERVISOR KEY
         SETFRR D,WRKREGS=(1,12)        CANCEL THE FRR
         B     BREPILOG                 GO TO BRANCH ENTRY EPILOG
         DROP  RLINK                    DROP MODULE BASE
         SPACE 5
*
**********************************************************************
*
*              BRANCH ENTRY POINT TO QTIP
*
**********************************************************************
*
IEDAYQT1 EQU   *
         ENTRY IEDAYQT1                 ENTRY POINT
         SPACE 3
         L     RPARM,CVTPTR             GET CVT ADDR
         L     RPARM,CVTAQAVT-CVT(,RPARM)  GET TCX ADDR
         L     RPARM,TCXRPT-IEDQTCX(,RPARM) GET TIOCRPT ADDR
         USING TIOCRPT,RPARM            TIOCRPT ADDRESSABLE
         MODESET EXTKEY=TCAM,WORKREG=15, GET TCAM'S KEY AND            -
               SAVEKEY=TIOCQTKY          SAVE CALLER'S KEY
         L     R15,TIOCQTIP             RELOAD BRANCH ENTRY     YM01373
         ST    RLINK,TIOCQRET           SAVE RETURN ADDR
         ST    RBASE,TIOCSAVE           SAVE REGISTER 12
         DROP  RPARM                    NO LONGER TIOCRPT BASE
         BALR  RBASE,RWRK0              SET BASE REGISTER
         USING *,RBASE                  MODULE ADDRESSABILITY
         BAL   RLINK,ROUTER             SET RETURN ADDR AND
*                                       GO INVOKE QTIP ROUTINE
         DROP  RBASE                    END OF ADDRESSABILITY
         SPACE 3
*
**********************************************************************
*
*              BRANCH ENTRY EPILOG
*
**********************************************************************
*
BREPILOG EQU   *
         L     RBASE,CVTPTR             GET CVT ADDR
         L     RBASE,CVTAQAVT-CVT(,RBASE)   GET TCX ADDR
         L     RBASE,TCXRPT-IEDQTCX(,RBASE) GET TIOCRPT ADDR
         USING TIOCRPT,RBASE            TIOCRPT ADDRESSABLE
         L     RLINK,TIOCQRET           RESTORE RETURN ADDR
         MODESET KEYADDR=TIOCQTKY,      RESTORE CALLER'S KEY           -
               WORKREG=12
         LR    RBASE,R15                RESTORE REG 12 FOR SIC  VS01090
         DROP  RBASE                    RPT ADDRESSABILITY ENDS
QTIPEXIT EQU   *                        RETURN TO CALLER (OR SVC EPILOG
         BR    RLINK                    IN CASE OF INVALID ENTRY)
         SPACE 3
*
**********************************************************************
*
*   ROUTE THIS REQUEST TO THE APPROPRIATE QTIP ROUTINE
*
**********************************************************************
*
ROUTER   EQU   *
         BALR  RBASE,RWRK0              GET ADDRESSABILITY
         USING *,RBASE                  MODULE ADDRESSABILITY
         LTR   RPARM,RCODE              IS ENTRY CODE POSITIVE
         BMR   RLINK                    NO, EXIT
         C     RCODE,TBLIMIT            IS ENTRY CODE INVALID
         BHR   RLINK                    YES, EXIT
         SLL   RPARM,TBLSHIFT           GET OFFSET INTO TABLE
         L     RCODE,TABLE(RPARM)       LOAD ENTRY POINT
         LR    RPARM,RCODE              GET NO. OF BASE ENTRY
         SRL   RPARM,E24                RIGHT ADJUST ENTRY NO.
         SLL   RPARM,TBLSHIFT           GET OFFSET OF BASE ADDR
         L     RBASE,TABLE(RPARM)       GET BASE ADDR
         DROP  RBASE                    MODULE NOT ADDRESSABLE
         LR    RPARM,RCODE              PREPARE TO BRANCH
         BR    RPARM                    BR TO QTIP ROUTINE
         SPACE 3
*
**********************************************************************
*
*   ENTRY POINT AND BASE ADDRESS TABLE FOR QTIP ROUTINES
*
*        BYTE 0 OF EACH ENTRY CONTAINS THE NUMBER OF THE TABLE
*        ENTRY CONTAINING THE BASE ADDRESS FOR THAT MODULE.
*
**********************************************************************
*
TABLE    DS    0A
         DC    AL1(00),VL3(QTIP0000)    ATTENTION (IEDAYAA BASE)
         DC    AL1(23),VL3(QTIP0010)    LOGOFF RECONNECT (IEDAY88 BASE)
         DC    AL1(00),AL3(QTIPEXIT)    RESERVED
         DC    AL1(00),VL3(QTIP0030)    ATTENTION
         DC    AL1(04),VL3(QTIP0040)    HANGUP    (IEDAYHH BASE)
         DC    AL1(05),VL3(QTIP0050)    TSINPUT   (IEDAYII BASE)
         DC    AL1(05),VL3(QTIP0060)    TSINPUT
         DC    AL1(05),VL3(QTIP0070)    TSINPUT
         DC    AL1(05),VL3(QTIP0080)    TSINPUT
         DC    AL1(05),VL3(QTIP0090)    TSINPUT
         DC    AL1(10),VL3(QTIP0100)    LOGON     (IEDAYLL BASE)
         DC    AL1(11),VL3(QTIP0110)    TSOUTPUT  (IEDAYOO BASE)
         DC    AL1(11),VL3(QTIP0120)    TSOUTPUT
         DC    AL1(11),VL3(QTIP0130)    TSOUTPUT
         DC    AL1(11),VL3(QTIP0140)    TSOUTPUT
         DC    AL1(11),VL3(QTIP0150)    TSOUTPUT
         DC    AL1(11),VL3(QTIP0160)    TSOUTPUT
         DC    AL1(00),AL3(QTIPEXIT)    RESERVED
         DC    AL1(18),VL3(QTIP0180)    TGET/TPUT (IEDAYGP BASE)
         DC    AL1(18),VL3(QTIP0190)    TGET/TPUT
         DC    AL1(00),AL3(QTIPEXIT)    RESERVED
         DC    AL1(00),VL3(QTIP0210)    TCLEARQ
         DC    AL1(00),VL3(QTIP0220)    TCLEARQ
         DC    AL1(23),VL3(QTIP0230)    TERMINT'N (IEDAY88 BASE)
         DC    AL1(11),VL3(QTIP0240)    CANCEL
         DC    AL1(00),AL3(QTIPEXIT)    RESERVED
         DC    AL1(00),AL3(QTIPEXIT)    RESERVED
         DC    AL1(23),VL3(QTIP0270)    LOGOFF DISCONNECT(IEDAY88 BASE)
         DC    AL1(05),VL3(QTIP0280)    TSINPUT
         DC    AL1(18),VL3(QTIP0290)    TGET/TPUT
TBLIMIT  DC    A((*-TABLE)/4-1)         HIGHEST ENTRY IN TABLE
         EJECT
*
**********************************************************************
*
*   TPOSTING SUBROUTINE OF QTIP
*
**********************************************************************
*
*   REGISTERS AT ENTRY--
*        00 -- RETURN ADDRESS
*        01 -- ADDR OF ELEMENT TO BE TPOSTED (PRIORITY IN BYTE 0).
*              IF ZERO, MEANS SIMPLY TPOST TSB IF NOT ALREADY TPOSTED.
*        02 -- TARGET QCB ADDR IF REG. 1 IS NOT ZERO.
*              TSB ADDR IF REG. 1=0.
*        13 -- ADDR OF 6 WORD SAVE AREA
*        15 -- ENTRY POINT
*
*   REGISTERS 2-14 ARE PRESERVED ACROSS THE CALL
*
*   CALLER SHOULD BE IN TCAM'S KEY
*
IEDAYTPQ EQU   *
         ENTRY IEDAYTPQ                 ENTRY POINT
         USING *,R15                    ROUTINE ADDRESSABLE
         STM   RWK10,R15,E0(R13)        SAVE REGISTERS
         L     RTCX,CVTPTR              GET CVT ADDR
         L     RTCX,CVTAQAVT-CVT(,RTCX) GET TCX ADDR
         USING IEDQTCX,RTCX             TCX ADDRESSABLE
*
*   SET UP TO TPOST THE TSB TO IEDAYP
*
         LTR   RELEM,RELEM              TPOST OF TSB REQUESTED
         BNZ   TPOST                    NO, GO TPOST ELEM PASSED
         USING TSB,RQCB                 TSB ADDRESSABLE
         TM    TSBTPFLG,TSBPOSTO        IS TSB ALREADY TPOSTED
         BO    TPQEXIT                  YES, EXIT
*
         L     RWK10,TSBTPOST           GET CURRENT SETTINGS
RESWAP   EQU   *
         LR    RWK11,RWK10              COPY
         O     RWK11,MSKPOSTO           SET TSBPOSTO
         CS    RWK10,RWK11,TSBTPOST     FLAG TSB AS TPOSTED
         BNE   RESWAP                   RETRY UNTIL SUCCESSFUL
*
         LTR   RWK10,RWK10              WAS TSB ALREADY TPOSTED
         BM    TPQEXIT                  YES, EXIT
*
         LA    RELEM,TSBRCB             WILL TPOST RCB IN TSB
         DROP  RQCB                     TSB NOT ADDRESSABLE
         L     RQCB,TCXTSI              GET ADDR OF TSI
         O     RELEM,MSKPRI             INSERT TPOST PRIORITY
         LA    RQCB,TSITSAP-TSINPUT(,RQCB)  GET ADDR OF 'QCB'
*                                       FOR IEDAYP
*
*   TPOST AN ELEMENT TO A QCB
*
TPOST    EQU   *
         USING IEDQRECB,RELEM           ELEMENT IS ADDRESSABLE
         STCM  RQCB,E7,RECBQCBA         PUT QCB ADDR IN ELEM
         L     RWK10,TCXREADY           GET CURRENT 1ST ON LIST
ADDAGAIN EQU   *
         ST    RWK10,RECBLINK-E1        LINK NEW ELEM TO OLD
         STCM  RELEM,E8,RECBPRI         SET TPOST PRIORITY
         CS    RWK10,RELEM,TCXREADY     ADD NEW ELEM TO LIST
         BNE   ADDAGAIN                 RETRY UNTIL SUCCESSFUL
         DROP  RELEM                    ELEM ADDRESSABILITY ENDS
*
*   POST TCAM
*
         LR    RELEM,R13                HOLD SAVE AREA ADDR
         L     RWK11,TCXAVT             GET AVT ADDR
         SR    RWK10,RWK10              ZERO COMPLETION CODE
         LA    RWK11,AVTOSECB-IEDQAVTD(,RWK11)  GET ADDR OF ECB
         O     RWK11,MSKXMPST           SET XMPOST FLAG
         DROP  R15                      DROP BASE REG
         MODESET EXTKEY=SUPR            CHANGE INTO SUPERVISOR'S KEY
         L     R15,CVTPTR               GET CVT ADDR
         USING CVT,R15                  CVT ADDRESSABLE
         L     R13,TCXASCB              GET TCAM'S ASCB ADDR
         LA    R12,CVTBRET              NO ERROR RETURN
         L     R15,CVT0PT01             GET EPA FOR POST
         BALR  RLINK,R15                GO POST TCAM
         MODESET EXTKEY=TCAM            GET TCAM'S KEY
         DROP  R15                      CVT ADDR ENDS
         LR    R13,RELEM                RESTORE SAVE AREA ADDR
*
*   RESTORE REGISTERS AND RETURN TO CALLER
*
TPQEXIT  EQU   *
         LM    RWK10,RLINK,E0(R13)      RESTORE
         LR    R15,RWRK0                GET RETURN ADDR
         BR    R15                      RETURN
         EJECT
*
**********************************************************************
*
*    TIOC BUFFER ALLOCATION SUBROUTINE
*
**********************************************************************
*
*   INPUT--
*        REG. 00 - RETURN ADDR
*        REG. 10 - TIOCRPT ADDR (ONLY)
*        REG. 15 - ENTRY POINT ADDR
*   OUTPUT--
*        REG. 02 - ADDR OF ALLOCATED BUFFER
*        TIOCNFBF WILL BE DECREMENTED.
*
*   REGISTERS 2 & 15 WILL BE ALTERED BY THIS ROUTINE.
*
*   FOR PERFORMANCE OPTIMIZATION, THIS ROUTINE ASSUMES ITS
*   CALLER HAS DETERMINED THAT A BUFFER IS AVAILABLE.
*
IEDAYQBA EQU   *
         ENTRY IEDAYQBA                 BUFFER ALLOCATION
         USING *,R15                    ROUTINE ADDRESSABLE
         USING TIOCRPT,R10              PASSED AS PARAMETER
*
*   UPDATE THE FREE BUFFER COUNT
*
         LH    R2,TIOCNFBF              GET COUNT
         BCTR  R2,E0                    DECREMENT
         STH   R2,TIOCNFBF              STORE UPDATED COUNT
*
*   FIND FIRST AVAILABLE BUFFER
*
         LA    R10,TIOCFBFL             GET ADDR OF 1ST LIST
         DROP  R10                      TIOCRPT NOT ADDRESSABLE
BALOOP   EQU   *
         L     R2,E0(,R10)              GET ADDR OF 1ST ELEM
         LTR   R2,R2                    IS LIST EMPTY
         BP    BFRFOUND                 NO, GO ALLOCATE BFR
         LA    R10,L'TIOCFBFL(,R10)     GET ADDR OF NEXT LIST
         B     BALOOP                   GO CHECK IT
*
*   REMOVE ALLOCATED BUFFER FROM FREE LIST & RETURN
*
BFRFOUND EQU   *
         DROP  R15                      DROP BASE REGISTER
         L     R15,BUFFTRLR-E1-TIOCBUF(,R2)  ADDR OF NEXT ELEM
         ST    R15,E0(,R10)             MAKE IT FIRST ELEM
         L     R10,CVTPTR               GET CVT ADDR
         L     R10,CVTAQAVT-CVT(,R10)   GET TCX ADDR
         LR    R15,R0                   GET RETURN ADDR
         L     R10,TCXRPT-IEDQTCX(,R10) GET TIOCRPT ADDR
         BR    R15                      RETURN
         EJECT
*
**********************************************************************
*
*   TIOC BUFFER RETURN SUBROUTINE
*
**********************************************************************
*
*   INPUT--
*        REG. 00 - RETURN ADDR
*        REG. 02 - ADDR OF BUFFER BEING RETURNED
*        REG. 10 - TIOCRPT ADDR
*        REG. 15 - ENTRY POINT ADDR
*
*   OUTPUT--
*        TIOCNFBF WILL BE INCREMENTED
*
*   REGISTER 15 WILL BE ALTERED BY THIS ROUTINE
*   THE HIGH-ORDER BYTE OF REGISTERS 2 & 10 MAY BE ALTERED.
*
IEDAYQBR EQU   *
         ENTRY IEDAYQBR                 BUFFER RETURN
         USING TIOCRPT,R10              TIOCRPT ADDRESSABLE
*
*   UPDATE FREE BUFFER COUNT
*
         LH    R15,TIOCNFBF             GET COUNT
         LA    R15,E1(,R15)             INCREMENT
         STH   R15,TIOCNFBF             STORE UPDATED COUNT
         LA    R2,E0(,R2)               CLEAR BYTE ZERO
*
*   DETERMINE WHICH LIST THIS BUFFER SHOULD BE ADDED TO
*
         LA    R10,TIOCFBFL             GET ADDR OF FIRST LIST
         DROP  R10                      AS TIOCRPT BASE
BRLOOP   EQU   *
         L     R15,E0(,R10)             GET BUFFER ADDR
         LPR   R15,R15                  INSURE POSITIVE VALUE
*                                       (AN EMPTY LIST POINTER
*                                       CONTAINS THE COMPLEMENTED
*                                       ADDR OF THE BFR PAGE)
         SRL   R15,EPGSHIFT             ISOLATE PAGE NO.
         SLL   R15,EPGSHIFT             GET ADDRESS OF PAGE
*                                       CONTAINING THE BUFFERS
*                                       ON THIS LIST
         XR    R15,R2                   .SEE IF RETURNING
         SRL   R15,EPGSHIFT             .BUFFER BELONGS
         LTR   R15,R15                  .ON THIS LIST
         BALR  R15,E0                   SET BASE ADDR
         USING *,R15                    USE R15 AS BASE REG
QBRBASE  EQU   *                        TEMPORARY BASE
         BZ    LSTFOUND                 BR IF BFR GOES ON THIS LIST
         LA    R10,L'TIOCFBFL(,R10)     POINT AT NEXT LIST
         S     R15,QBRDISP              GET BRANCH ADDR
         DROP  R15                      ADDRESSABILITY CHANGED
         BR    R15                      GO CHECK NEXT LIST
QBRDISP  DC    A(QBRBASE-BRLOOP)        DISPLACEMENT TO BR ADDR
*
*   ADD BUFFER TO LIST & RETURN
*
LSTFOUND EQU   *
         L     R15,E0(,R10)             GET ADDR OF 1ST ELEMENT
         ST    R15,BUFFTRLR-E1-TIOCBUF(,R2)  LINK NEW BFR TO OLD
         ST    R2,E0(,R10)              PUT NEW BFR AS 1ST
*
         L     R10,CVTPTR               GET CVT ADDRESS
         L     R10,CVTAQAVT-CVT(,R10)   GET ADDR OF TCX
         LR    R15,R0                   GET RETURN ADDR
         L     R10,TCXRPT-IEDQTCX(,R10) GET ADDR OF TIOCRPT
         BR    R15                      RETURN
         DROP  RTCX                     TCX NOT ADDRESSABLE
         EJECT
*
**********************************************************************
*
*                      QTIP FRR EXIT ROUTINE
*
*        THIS ROUTINE GETS CONTROL WHEN ABNORMAL SITUATION OCCURS
*        DURING THE PROCESS OF SVC 101.  IT REQUESTS THE RTM TO -
*
*        * DUMP THE TIOCRPT AND TSB TABLE
*        * WRITE THE SDWA WORKAREA TO SYS1.LOGREC SO THE REGISTERS AT
*          TIME OF ERROR CAN BE EXAMINED
*        * RELEASE THE CMS AND LOCAL LOCKS
*        * CONTINUE WITH TERMINATION
*
*        REGISTERS AT ENTRY -
*
*        REGISTER  1 - SDWA
*        REGISTER 14 - RETURN ADDRESS
*        REGISTER 15 - ENTRY ADDRESS
*
**********************************************************************
*
QTIPFRR  EQU   *
         USING *,RBASE                  ROUTINE ADDRESSABLE
         LR    RBASE,R15                LOAD BASE REGISTER
         USING SDWA,RPARM               SDWA (RTCA) ADDRESSABLE
*
*   CALCULATE THE STORAGE OF TIOCRPT AND TSB TABLE TO DUMP
*
         L     R3,CVTPTR                GET CVT ADDRESS
         USING CVT,R3                   CVT ADDRESSABLE
         L     RRPT,CVTAQAVT            GET TCX ADDRESS
         L     RRPT,TCXRPT-IEDQTCX(,RRPT)    GET TIOCRPT ADDRESS
         USING TIOCRPT,RRPT             TIOCRPT ADDRESSABLE
         SR    RWK10,RWK10              CLEAR WORK REGISTER
         IC    RWK10,TIOCTSBS           GET TSB SIZE
         LH    RWK11,TIOCNTSB           GET NUMBER OF TSB'S
         MR    RWK10,RWK10              REG 11 HAS TSB TABLE SIZE
         BCTR  RWK11,R0                 1 LESS THAN TSB TABLE SIZE
         L     RWK10,TIOCTSB-E1         GET BEGINNING OF TSB TABLE
         LA    RWK10,E0(,RWK10)         CLEAR HIGH ORDER BYTE
         AR    RWK10,RWK11              GET ENDING ADDRESS OF TSB TABLE
*
*   SET UP THE LIST FOR RTM TO TAKE A SNAP DUMP
*
         MVC   SDWAVLST(ENDLIST-SNAPLIST),SNAPLIST   MOVE LIST TO WA
         LA    RWK11,STARTADD           GET ADDR OF SNAP SHOT LIST
         ST    RWK11,SNAPSHOT           PUT IT IN WORK AREA
         ST    RRPT,STARTADD            RPT IS THE STARTING ADDRESS
         O     RWK10,HIGHON             LAST PARM INDICATOR
         ST    RWK10,ENDADD             END OF TSB TABLE IS ENDING ADDR
         LR    RWK9,RLINK               SAVE RETURN ADDRESS TO RTM
         SPACE 1
         SETRP DUMP=YES,DUMPOPT=SDWAVLST,RECORD=YES,RECPARM=IDLIST,    X
               RC=0,FRELOCK=(CMS,LOCAL)
         SPACE 1
         BR    RWK9                     GO BACK TO RTM
         DROP  R3,RRPT                  DROP REGISTERS
         SPACE 4
SNAPLIST SNAP  STORAGE=(0,0),MF=L       LIST FORM FOR SNAP MACRO
ENDLIST  EQU   *                        END OF SNAP LIST
         SPACE 4
*
*   CONSTANTS
*
         DS    0F                       ALIGNMENT
MSKPOSTO DC    AL1(TSBPOSTO,0,0,0)      TSB POST OUTSTANDING
MSKXMPST EQU   MSKPOSTO                 CROSS-MEMORY POST
MSKPRI   DC    AL1(PRIDESTQ,0,0,0)      TPOST PRIORITY
HIGHON   DC    X'80000000'              USED TO SET HIGH ORDER BIT ON
IDLIST   DC    CL8'IEDAYQT'             MICROFICHE NAME
         DC    CL8'IEDAYQT'             CSECT NAME
         DC    CL8'IEDAYQT'             FRR ID
PATCH    DC    9F'0'                    PATCH AREA
         EJECT
         IHAASCB
         EJECT
         IHAASXB
         EJECT
         TAVTD
         EJECT
         IKJTIOCB
         EJECT
CVT      DSECT
         CVT
         EJECT
         IHAFRRS
         EJECT
         TPRIOR
         EJECT
         IHAPSA
         EJECT
         IKJRB
         EJECT
         TRECBD
         EJECT
         IHASDWA
         SPACE 1
SDWAVLST EQU   SDWAVRA                  USE FIRST PORTION OF    ZA00611
*                                       RECORDING AREA AS LIST FOR SNAP
SNAPSHOT EQU   SDWAVRA+16               ADDR OF SNAP-SHOT LIST  ZA00611
STARTADD EQU   SDWAVRA+20               BEGINNING ADDR FOR SNAP ZA00611
ENDADD   EQU   SDWAVRA+24               ENDING ADDRESS FOR SNAP ZA00611
         EJECT
         IKJTCB
         EJECT
         TTCXD
         EJECT
         IKJTIOCP
         EJECT
         IKJTSB
         EJECT
         TTSID
         EJECT
         IHAWSAVT
         END
