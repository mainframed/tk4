 TITLE ' IGG0325G - DADSM - DADSM RECORD UPDATE MODULE'
IGG0325G CSECT
*
*MODULE NAME = IGG0325G
*
*DESCRIPTIVE NAME = DADSM - DADSM RECORD UPDATE MODULE
*
*COPYRIGHT = NONE
*
*CHANGE ACTIVITY = SEE BELOW
*
*          RELEASE 17 DELETIONS
*0092000400,                                                          *
*          RELEASE 18 DELETIONS
*          RELEASE 19 DELETIONS
*          RELEASE 20 DELETIONS
*2412044000                                                      A37231
*          RELEASE 21 DELETIONS
*1199017400-017600,018000-018200,044800,087600,089000,092800     A37199
*1199000230,015600,024800-025400,087200,087600,089000,110600     S21042
*          RELEASE 22 DELETIONS
*          VS2 RELEASE 02 DELETIONS/CHANGES
*0000000030-000150,000470-000530,001400-001600,004400,005600,    Y02080
*0000006000,006600,007800,016000,017000,017800-018100,026600-    Y02080
*0000026800,027400-027600,029000,029400,029800,040200,042800,    Y02080
*0000043400,044000-044040,044120-044400,044800,046400,047800,    Y02080
*0000063400,064000-064200,066800,072200,072800,074200,075800,    Y02080
*0000078200-078400,079200,079600,087200,087600-094600,095000-    Y02080
*0000110400                                                      Y02080
*0000028000                                                      Y02082
*0000018100-018200,068600                                        XM2969
*
*STATUS CHANGE LEVEL 003
*FUNCTION/OPERATION: TO REDUCE THE FORMAT 5 DSCB'S -DADSM - BY THE    *
*   SPACE ALLOCATED AND TO ELIMINATE ALL HOLES IN THE FORMAT 5 DSCB'S.*
*                                                                     *
*ENTRY POINTS:                                                        *
*        IGG0325G - ENTRY IS MADE FROM IGG0325E VIA A BRANCH.         *
*   ZERO QUANTITY REQUESTS DO NOT EXECUTE THIS MODULE.                *
*                                                                     *
*INPUT: UPON ENTRY TO THIS MODULE THE WORK AREA WILL CONTAIN THE DATA *
*   PORTION OF THE FORMAT 4 DSCB, AND THE ABSOLUTE ADDRESSES OF THE   *
*   FORMAT 4 DSCB AND THE FIRST FORMAT 5 DSCB.  THE DADSM TABLE WILL  *
*   CONTAIN THE NUMBER OF EXTENTS AND THE ACTUAL SPACE ALLOCATED.     *
*   THE KEY/DATA OF THE FIRST F5 MAY ALSO BE IN CORE, IF SO THE       *
*   'FIRST FORMAT 5 IN CORE SWITCH' WILL BE ON.   THE WORK AREA WILL  *
*   ALSO CONTAIN A DEB, AN IOB, AN ECB, AND A CHANNEL PROGRAM TO      *
*   SEARCH FOR HOLES AND TO READ AND WRITE DADSM RECORDS.             *
*   REGISTER 11 WILL POINT TO THE FIRST JFCB.                         *
*   REGISTER 13 WILL POINT TO THE WORK AREA.                          *
*                                                                     *
*OUTPUT: UPON TRANSFER OF CONTROL, THE WORK AREA REGISTERS WILL BE AS *
*   AT INPUT.  NEW/UPDATED FORMAT 5 DSCB'S WILL BE WRITTEN OUT.       *
*                                                                     *
*EXTERNAL ROUTINES:                                                   *
*        EXCP(0) - READ FROM OR WRITE TO DIRECT ACCESS DEVICE         *
*        WAIT(1) - WAIT ON EVENT CONTROL BLOCK                        *
*        IECRES  - BRANCH TO THE NEXT ALLOCATE MODULE                 *
*                                                                     *
*EXITS-NORMAL: BRANCH TO IGG0325H TO WRITE OUT AN UPDATED F4 DSCB     *
*   AND TO WRITE OUT A ZERO RECORD IF REQUIRED.  ERROR CODE PASS      *
*   REGISTER WILL CONTAIN A ZERO.                                     *
*   -ERROR: BRANCH TO IGG0325H WITH CODE IN ERROR CODE PASS REGISTER. *
*                                                                     *
*   ERROR CODES THAT CAN BE ISSUED BY 'DADSM RECORD UPDATE MODULE'    *
*                                                                     *
*   0C - PERMANENT I/O ERROR                                          *
*                                                                     *
*TABLES/WORK AREAS: DADSM WORK AREA DESCRIBED BY MACRO 'IECALLWA'     *
*                                                                     *
*              ***************************************                *
*              *             DADSM TABLE             *                *
*              ***************************************                *
*                                                                     *
*              ***************************************                *
*              *        *         *                  *                *
*              *  TYPE  *  NO OF  *     USED HOLE    *                *
*              *  FLAG  * ENTRIES *      COUNTER     *                *
*              *        *         *                  *                *
*              ***************************************                *
*              *                  *                  *                *
*              *       RTA        *      RTA+1       *                *
*              *                  *                  *                *
*              ***************************************                *
*              *                  *                  *                *
*              *       RTA        *      RTA+1       *                *
*              *                  *                  *                *
*              ***************************************                *
*              *                  *                  *                *
*              *       RTA        *      RTA+1       *                *
*              *                  *                  *                *
*              ***************************************                *
*              *                  *                  *                *
*              *       RTA        *      RTA+1       *                *
*              *                  *                  *                *
*              ***************************************                *
*              *                  *                  *                *
*              *       RTA        *      RTA+1       *                *
*              *                  *                  *                *
*              ***************************************                *
*                                                                     *
*              TYPEFLG  =  02 - BPAM DIRECTORIES REQUESTED.           *
*                                                                     *
*                       =  40 - USER LABELS REQUESTED                 *
*                                                                     *
*                       =  80 - SET MUST COMPLETE IS ACTIVE           *
*                                                                     *
*              NO OF ENTRIES = NUMBER OF ENTRIES WITHIN DADSM TABLE.  *
*                                                                     *
*              RTA = THE STARTING TRACK OF THE ALLOCATED EXTENT.      *
*                                                                     *
*              RTA+1 = THE STARTING TRACK OF THE NEXT AVAILABLE EXTENT*
*                                                                     *
*ATTRIBUTES: REENTRANT                                                *
*                                                                     *
*NOTES:                                                               *
*   OTHER MACROS USED                                                 *
*   IECALLWA - ALLOCATE WORK AREA EXPANSION                           *
*   IECSDSL1 - BUILD DSCB'S                                           *
*   MODESET  - ASSUME DATAMGT KEY                                     *
*   CVT - BUILD CVT                                                   *
*                                                                     *
*STORAGE: PROGRAM CODE - LESS THAN 2048 BYTES                         *
*   WORK AREA - AS DEFINED IN THE IECALLWA MACRO                 XM2969
*   RPS WORK AREA - AS DEFINED IN THE IECRPS MACRO               XM2969
*                                                                     *
*
*REGISTER NAMES-
*
R0       EQU   0                        CHNL PRG START PTR AND WORK REG
R1       EQU   1                        WORK REGISTER
RCNT     EQU   1                        DADSM ENTRY COUNT REG
RTAB     EQU   2                        DADSMTBL POINTER
RIN      EQU   3                        INPUT POINTER
R4       EQU   4                        OUTPUT POINTER
ROUT     EQU   4                        OUTPUT POINTER
R5       EQU   5                        CONVERTED OUTPUT POINTER
ROEND    EQU   5                        END OF OUTPUT POINTER
R6       EQU   6                        CONVERT ROUTINE WORK REGISTER
R7       EQU   7                        CONVERT ROUTINE WORK REGISTER
R8       EQU   8                        CONVERT ROUTINE WORK REGISTER
RERRPASS EQU   8                        ERROR PASS REGISTER
R9       EQU   9                        CONVERT ROUTINE WORK REGISTER
RA       EQU   10                       CONVERT ROUTINE LOOP COUNTER
RB       EQU   11                       I/O LINK REGISTER
RJFCB    EQU   11                       JFCB POINTER
RBASE    EQU   12                       BASE REGISTER
RWKA     EQU   13                       WORK AREA POINTER.
RBAK     EQU   14                       RETURN REGISTER
RWRK     EQU   15                       WORK REGISTER
RERR     EQU   15                       ERROR CODE REGISTER
RF       EQU   15                       INPUT CONVERT LOOP COUNTER
*
* * * * * * * * * * * * *
*
*
* * * * * * * * * * * * *
*
* OTHER EQUATES
*
K2       EQU   2                        CONSTANT OF 2            Y02080
K4       EQU   4                        CONSTANT OF 4            Y02080
*
*REGISTER USAGE-
*
         BALR  RBASE,0
         USING DADSMSTR,RBASE
         USING ALLOCWKA,RWKA            WORK AREA ADDRESSABILITY Y02080
*
* INITIALIZE DADSM OUTPUT RECORD, DADSM INPUT AND OUTPUT ADDRESSES,
* AND SWITCHES.  PICK UP THE NUMBER OF ENTRIES IN THE DADSM TABLE,
* AND INITIALIZE POINTERS.
*
DADSMSTR EQU   *                        BRANCH LABEL             Y02082
         MODESET EXTKEY=DATAMGT         ASSUME DATAMGT KEY       Y02082
         MVC   DS1DSNAM(K4),FIVES       MOVE IN F5 KEY ID        Y02082
         MVC   IDAREA(5),FMTOUTAD       SET UP SRCH/ID FOR FIRST F5
         MVC   FMTINAD(5),FMTOUTAD      SET UP CURRENT F5 ADDRESS
         NI    SWITCH,FRSTF5            CLEAR ALL BUT 1ST F5 SWITCH
         OI    SWITCH,OUTBYP            SET READ/WRITE SWITCH
         SR    RCNT,RCNT
         IC    RCNT,AENTRYNM            GET NUMBER OF ENTRIES    Y02080
         LA    ROEND,F5OUT+108          LOAD END OF OUTPUT POINTER.
         LA    RTAB,AENTRIES            PT TO 1ST DADSMTBL ENTRY Y02080
RESTOUT  LA    ROUT,F5OUT+4             LOAD PTR TO START OF OUTPUT
RESTORE  XC    DS1DSNAM+4(136),DS1DSNAM+4  CLEAR OUTPUT AREA
*
* TEST FOR FIRST DADSM RECORD IN CORE.  IF FIRST F5 IS IN CORE GO
* CONVERT IT TO RTA-RTA+1.  IF FIRST F5 IS NOT IN CORE GO READ
* IT IN AND CONVERT IT.
*
         TM    SWITCH,FRSTF5            IS THE 1ST F5 STILL IN CORE
         BZ    SETFSTRD                 BRANCH IF 1ST F5 NOT IN CORE
         BAL   RBAK,CONVF5              GO CONVERT THIS F5
         B     DUELOOP
SETFSTRD OI    SWITCH,FRSTF5            SET FIRST F5 IN CORE SWITCH
FSTRD    BAL   RBAK,READF5              GO READ AND CONVERT 1ST F5
*
* THIS SECTION DETERMINES WHEN THE DADSM TABLE EXTENTS SHOULD BE
* MERGED INTO THE OUTPUT FORMAT 5
*
DUELOOP  CLR   ROEND,ROUT               IS OUTPUT AREA FULL.
         BNH   TEST1                    BRANCH IF OUTPUT IS FULL
COMZE    CLC   0(4,RIN),ZEROS           IS THIS INPUT EXTENT ZERO
         BE    CHEND                    BRANCH IF YES
         LTR   RCNT,RCNT                IS DADSMTBL EMPTY
         BZ    MOVEOUT                  BRANCH IF EMPTY
         LH    R0,2(RTAB)               GET THIS ENTRY RTA+1       UL17
         CH    R0,4(RTAB)               IS IT EQ TO NEXT ENTRY RTA UL17
         BNE   CMPSPACE                 BRANCH IF NO               UL17
         LH    R0,0(RTAB)               GET FIRST ENTRY RTA        UL17
         STH   R0,4(RTAB)              MERGE THIS WITH NEXT ENTRY  UL17
         LA    RTAB,4(RTAB)             STEP POINTER TO NEXT ENTRY UL17
         BCTR  RCNT,0                  DECREMENT ENTRIES COUNTER   UL17
         B     DUELOOP                  REPEAT MERGE LOOP          UL17
CMPSPACE EQU   *                                                   UL17
         CLC   2(2,RTAB),2(RIN)         IS THIS SPACE ALLOCATED.
         BL    ALTEREX                  CHECK FOR MIDDLE OR FRONT
*                                       ALLOCATION IF LOW
         BE    TOTALL                   CHECK FOR TOTAL OR REAR
*                                       ALLOCATION IF EQUAL
*
* MOVE FORMAT 5 DSCB EXTENTS TO OUTPUT AREA
*
MOVEOUT  TM    SWITCH,DADBYP            IS WRITE DADSM PENDING
         BO    CHEXTRTN                 BRANCH IF YES
         MVC   0(4,ROUT),0(RIN)         MOVE INPUT TO OUTPUT
INPUT    BCT   RWRK,UPDATEPT            BRANCH IF INPUT NOT EMPTY
         LA    ROUT,4(ROUT)             STEP OUTPUT POINTER
         OI    SWITCH,PRCNTL            SET PROCESS CONTROL SWITCH
*
* TEST FOR MULTIPLE FORMAT 5 RECORDS
*
CHECHAIN TM    DS5PTRDS+4,X'FF'         IS INPUT RECORD CHAINED.
         BZ    CHECALT                  NO - CHECK IF RECORD ALTERED
         MVC   ALLCCHHR,IDAREA          SAVE F5 CCHHR            XM2969
         TM    SWITCH,RCDALT            WAS DADSM RECORD ALTERED
         BC    1,BRTORDF5               BRANCH IF YES
         XI    SWITCH,OUTBYP            FLIP/FLOP READ/WRITE SWITCH
*
* OUTPUT DADSM RECORD IS THE SAME AS THE INPUT DADSM RECORD.  BYPASS
* WRITE DADSM AND CLEAR THE OUTPUT AREA.
*
TSTPROC  EX    0,RESTORE                CLEAR OUTPUT AREA
         LA    ROUT,F5OUT+4             RESET OUTPUT POINTER
         NI    SWITCH,X'FF'-PRCNTL      CLEAR PROCESS CONTROL SW Y02080
*
* LINK TO READ THE NEXT FORMAT 5 DSCB.
*
BRTORDF5 BAL   RBAK,SAVEID              GO READ IN NEXT F5
         B     DUELOOP
*
* TEST IF LAST DADSM OUTPUT RECORD WAS ALTERED.  IF ALTERED WRITE
* DADSM, IF NOT ALTERED BYPASS THE WRITE DADSM.
*
CHECALT  TM    SWITCH,RCDALT            WAS DADSM RECORD ALTERED
         BZ    EXIT1                    BRANCH IF NOT ALTERED
WRITEFNL OI    SWITCH,WRTFNL            SET WRITE FINAL RECORD SWITCH
         XC    CCHHRSAV,CCHHRSAV        CLEAR CHAIN ADDRESS      Y02080
         BAL   RBAK,WRITEF5             WRITING FINAL RECORD.
*
* SET UP TO BRANCH TO THE NEXT LOAD.
*
EXIT1    SR    RERRPASS,RERRPASS        CLEAR ERROR PASS REGISTER
ERREXIT  EQU   *                                                 A37231
         TM    SWITCH,NEWF5             TEST IF NEW F5 WAS       A37231
*                                       CREATED                  A37231
         BNO   NONEWF5                  BRANCH IF NOT            A37231
         NI    SWITCH,X'FF'-WRZERO-NEWF5  CLEAR WRITE ZERO DSCB  Y02080
*                                       AND NEW F5 CREATED BITS  Y02080
NONEWF5  EQU   *                                                 A37231
         L     RJFCB,AJFCBPTR           RESTORE JFCB POINTER     Y02080
         MODESET EXTKEY=ZERO            RETURN TO KEY ZERO       Y02082
*
         IECRES LOAD,EXTPR=(RWKA),MODID=ALLOCD2,BRANCH=DIRECT    Y02080
*
* TEST IF OTHER THAN THE FIRST DADSM RECORD HAS BEEN READ IN.
*
TEST1    TM    SWITCH,PRCNTL            IS PROCESS CONTROL SWITCH ON
         BZ    TSTCH                    BRANCH IF NO
         TM    SWITCH,OUTBYP            IS WRITE BEFORE READ
         BZ    TSTCH                    BRANCH IF YES
         MVC   CCHHRSAV,FMTOUTAD        OUTPUT F5 CHAIN ADDRESS  Y02080
         B     BRTOWR5                  GO TO WRITE F5 ROUTINE
*
* TEST IF ANOTHER DADSM RECORD EXISTS
*
TSTCH    TM    DS5PTRDS+4,X'FF'         IS INPUT DADSM RECORD CHAINED
         BZ    CHEXT                    NO-CHECK FOR ZERO INPUT EXTENT
WRITE1   EQU   *                        BRANCH LABEL             Y02080
         MVC   CCHHRSAV,DS5PTRDS        INSERT CHAIN ADDRESS     Y02080
BRTOWR5  BAL   RBAK,WRITEF5             GO WRITE OUT F5
         B     DUELOOP
*
* TEST IF THE FIRST DADSM RECORD IS STILL IN CORE.
*
CHEND    TM    SWITCH,FRSTF5            IS THE 1ST DADSM RCD IN CORE
         BO    WRITEFNL                 BRANCH IF YES
*
* TEST IF THERE HAS BEEN MORE INPUT DADSM RECORDS THAN OUTPUT DADSM
* RECORDS.  IF SO THEN SET UP TO ZERO OUT THE LAST INPUT DADSM RECORD.
*
TSTZERO  TM    SWITCH,OUTBYP            IS NBR OF WRTS EQUAL TO NBR RDS
         BO    WRITEZER                 BRANCH IF NO
         MVC   IDAREA(5),FMTOUTAD       NO - SET UP SRCH/ID ADDRESS
         B     WRITEFNL                 GO WRITE LAST F5
WRITEZER OI    SWITCH,WRZERO            SET WRITE ZERO RECORD SWITCH
         MVC   FMTINAD(5),FMTOUTAD      SET UP ZERO RECORD ADDRESS
         B     WRITEFNL                 GO WRITE THE LAST F5
*
* THIS SECTION MERGES DADSM TABLE ENTRIES WITH F5 DSCB
*
ALTEREX  OI    SWITCH,RCDALT            SET DADSM RECORD ALTERED SWITCH
*
* TEST IF A WRITE DADSM IS PENDING
*
         TM    SWITCH,DADBYP            IS DADSM WRITE BYPASS SWITCH ON
         BO    CHEXTRTN                 BRANCH IF YES
         CLC   0(2,RTAB),0(RIN)         TEST FOR MIDDLE OR FRONT ALLOC
         BNE   MIDDLE                   LOW OR NOT EQUAL - MIDDLE ALLOC
FRONT    MVC   0(2,ROUT),2(RTAB)        FRONT ALLOC-INSERT NEW LOW RTA
         MVC   2(2,ROUT),2(RIN)         KEEP OLD UPPER RTA
*
* UPDATE POINTERS AND COUNTERS
*
DECRMNT  BCTR  RCNT,0                   DECREMENT TABLE ENTRY COUNTER
         LA    RTAB,4(RTAB)             STEP PTR TO NEXT DADSMTBL ENTRY
         B     INPUT                    GO CHECK FOR INPUT EMPTY
UPDATEPT LA    ROUT,4(ROUT)             UPDATE OUTPUT POINTER.
UPDATIN  LA    RIN,4(RIN)               UPDATE INPUT  POINTER.
         B     DUELOOP
*
*
MIDDLE   MVC   0(2,ROUT),0(RIN)         MIDDLE ALLOC-INSERT OLD LOW RTA
         MVC   2(2,ROUT),0(RTAB)        INSERT NEW UPPER RTA
         LA    ROUT,4(ROUT)             UPDATE OUTPUT AREA POINTER
         CLR   ROEND,ROUT               IS OUTPUT AREA FULL
         BH    FRONT                    NO - INSERT NEXT EXTENT
         MVC   0(2,RIN),2(RTAB)         SAVE NEW LOW RTA IN INPUT
         LA    RTAB,4(RTAB)             STEP DADSMTBL POINTER
         BCTR  RCNT,0                   DECREMENT DADSMTBL ENTRY COUNT
         B     TEST1                    GO SET UP THIS DADSM WRITE
TOTALL   OI    SWITCH,RCDALT            SET DADSM RECORD ALTERED SWITCH
         CLC   0(2,RIN),0(RTAB)         IS ENTIRE EXTENT ALLOCATED.
         BNE   NOTALL                   NO - GO INSERT OLD LOW RTA
         SH    ROUT,FOUR                COMPENSATE FOR OUTPUT PTR STEP
         B     DECRMNT                  GO UPDATE POINTERS
NOTALL   TM    SWITCH,DADBYP            IS A WRITE DADSM PENDING
         BO    CHEXTRTN                 BRANCH IF YES
         MVC   0(2,ROUT),0(RIN)          INSERT LOW OLD RTA
         MVC   2(2,ROUT),0(RTAB)        INSERT NEW UPPER RTA
         B     DECRMNT                  GO STEP POINTERS
*
* IS ALL OF DADSM PROCESSED
*
CHEXT    CLC   0(4,RIN),ZEROS           IS NEXT INPUT EXTENT ZERO
         BE    WRITEFNL                 BRANCH IF YES
*
* THIS ROUTINE SEARCHES FOR HOLE IN VTOC TO WRITE NEW DSCB
*
SEARCH   MVC   FMTINAD(5),IDAREA        SAVE IDAREA
         MVC   IDAREA(5),VTOCADR        START SEEK/SRCH AT F4 DSCB
         LA    R0,CCW1                  START CHANNEL PROG AT CCW1
         MVI   CCW5+4,X'30'             STOP CHANNEL PROG AFTER CCW5
         BAL   RB,CHANNLGO              GO SEARCH FOR A HOLE
         LH    R0,DS4DSREC              GET NUMBER OF AVAIL HOLES
         BCTR  R0,0                     DECREMENT COUNT BY ONE
         STH   R0,DS4DSREC              RESET NUMBER OF AVAIL HOLES
         MVC   CCHHRSAV,IDAREA          SAVE HOLE ADDRESS        Y02080
         MVC   IDAREA(5),FMTINAD        RESTORE IDAREA
AFTERSRH BAL   RBAK,WRITEF5             GO WRITE THIS DADSM RECORD
         MVC   IDAREA,CCHHRSAV          SET NEXT OUTPUT F5 ADDR  Y02080
         MVC   FMTOUTAD,CCHHRSAV        SET NEXT OUTPUT F5 ADDR  Y02080
         OI    SWITCH,NEWF5             SET NEW F5 CREATED BIT   A37231
         B     DUELOOP
*
* THIS CONVERTS DADSM ENTRIES FROM RTA-RTA+1 BACK TO XXYYZ BEFORE
* WRITING THE FORMAT 5 DSCB.
*
WRITEF5  LA    ROUT,F5OUT+4             LOAD POINTER TO OUTPUT AREA
         TM SWITCH,WRTFNL               IS WRITE FINAL RECORD SW ON
         BO    CHEXTRT                  BRANCH IF YES
         ST    RBAK,PDLIST5             SAVE RETURN
         OI    SWITCH,DADBYP            SET DADSM WRITE PENDING SW
         B     DUELOOP                  GO PROCESS DADSM
CHEXTRTN L     RBAK,PDLIST5             RELOAD RETURN
CHEXTRT  EQU   *                        BRANCH LABEL             Y02080
         STM   R4,R5,CCW13              SAVE REGISTERS           Y02080
         LA    R5,DS1DSNAM+5            LOAD POINTER TO CONVERTED AREA
         LA    RA,26                    SET TO MAXIMUN NBR OF EXTENTS
         LH    R0,DS4DEVSZ+2            GET NBR OF TRKS/CYL
NEXTEXT  SR    R6,R6                    CLEAR HIGH DIVIDEND REGISTERS
         SR    R8,R8
         SR    R9,R9                    CLEAR FULL CYLINDER REGISTER
         LH    R7,0(ROUT)               GET EXTENT RTA
         LTR   R7,R7                    IS THIS EXTENT ZERO
         BNZ   NONZEROS                 BRANCH IF NOT ZERO       XM2969
         CH    RA,H26                   TEST FOR 26 EXTENTS      XM2969
         BNE   STORE                    BRANCH IF NOT EQUAL      XM2969
         OI    ACNVSW,AF5ZERO           SET BIT TO INDICATE      XM2969
*                                       26 ZERO EXTENTS          XM2969
         B     STORE                    CONTINUE                 XM2969
NONZEROS EQU   *                        BRANCH LABEL             XM2969
         LH    R9,2(ROUT)               GET EXTENT RTA+1
         DR    R6,R0                    CONVERT RTA TO CYL/TRK
         DR    R8,R0                    CONVERT RTA+1 TO CYL/TRKS
         SR    R9,R7                    CALCULATE CYL DIFFERENCE
         SR    R8,R6                    CALCULATE TRK DIFFERENCE
         LTR   R9,R9                    IS CYL DIFFERENCE ZERO
         BZ    STORE                    BRANCH IF YES
         LTR   R6,R6                    IS RTA TRK REMAINDER ZERO
         BZ    STORE                    BRANCH IF YES
         AR    R8,R0                    ADD TRK CONSTANT TO TRK DIFF
         BCTR  R9,0                     DECREMENT NBR OF CYLS
STORE    STH   R9,2(ROUT)               STORE NBR OF FULL CYLINDERS
         MVC   0(4,R5),0(ROUT)          MOVE RTA AND CYLS TO OUTPUT
         STC   R8,4(R5)                 STORE NBR OF EXCESS TRKS
         LA    R5,5(R5)                 STEP CONVERTED AREA POINTER
         LA    ROUT,4(ROUT)             STEP OUTPUT POINTER
         BCT   RA,NEXTEXT               BRANCH IF MORE OUTPUT TO PROC
         MVC   DS1PTRDS,CCHHRSAV        INSERT CHAIN ADDRESS     Y02080
INSERTF5 MVC   DS1DSNAM+4(40),DS1DSNAM+5  OPEN F5 HOLE
         MVI   DS1FMTID,X'F5'           INSERT FORMAT ID
         LM    R4,R5,CCW13              RESTORE REGISTERS        Y02080
         MVI   CCW11+4,X'10'            SET SKIP FLAG FOR WRITE CHECK
         LA    R0,CCW6                  START CHANNEL PROG AT CCW6
         BAL   RB,CHANNLGO              GO WRITE THIS DADSM RECORD
         MVC   IDAREA(5),DS1PTRDS       SET UP NEXT OUTPUT DADSM ADDR
         EX    0,RESTORE                CLEAR OUTPUT AREA
         XI    SWITCH,OUTBYP            FLIP/FLOP READ/WRITE SWITCH
WRTRTN   EQU   *                        BRANCH LABEL             Y02080
         NI    SWITCH,X'FF'-DADBYP      CLEAR WRT PENDING SWITCH Y02080
         BR    RBAK
*
* THIS SECTION READS IN FORMAT 5 (DADSM) DSCB AND CONERTS ENTRIES
* FROM XXYYZ TO RTA-RTA+1 FOR PROCESSING
*
SAVEID   MVC   FMTINAD(5),IDAREA        SAVE IDAREA
         MVC   FMTOUTAD(5),DS5PTRDS     SET UP NEXT OUTPUT DADSM ADDR
         NI    SWITCH,X'FF'-FRSTF5      CLEAR 1ST F5 IN CORE SW  Y02080
         MVC   IDAREA(5),DS5PTRDS       SET UP NEXT INPUT DADSM ADDR
READF5   LA    R0,CCW9                  START CHANNEL PROG AT CCW9
         MVI   CCW11+4,X'00'            CLEAR READ CCW FLAGS
         BAL   RB,CHANNLGO              GO READ A DADSM RECORD
         MVC   DS5KEYID+44(90),DS5KEYID+45   REMOVE FORMAT ID
CONVF5   LA    RIN,DS5AVEXT             RESET INPUT POINTER
         LR    R8,RIN                   SET UP PTR TP CONVERTED EXTENTS
         LA    RWRK,26                  SET TO MAX NUMBER OF EXTENTS
         SR    R6,R6                    CLEAR PICK UP REGISTER
TEST0    CLC   0(2,RIN),ZEROS           IS THIS EXTENT ZERO
         BE    INCRIN                   BRANCH IF YES
         MVC   FULLWORD(K4),0(RIN)      ALIGN RTA & NBR OF CYLS  Y02080
         LH    R7,FULLWORD+K2           LOAD NBR OF CYLS         Y02080
         MH    R7,DS4DEVSZ+2            MULTIPLY BY TRACK CONSTANT
         IC    R6,4(RIN)                GET ODD TRACKS
         AR    R7,R6                    ADD ODD TRACKS FOR TOAL TRACKS
         AH    R7,FULLWORD              ADD RTA                  Y02080
         STH   R7,2(R8)                 STORE RTA+1 IN INPUT CONV AREA
         MVC   0(K2,R8),FULLWORD        MOVE RTA TO CONV AREA    Y02080
         LA    R8,4(R8)                 UPDATE POINTER TO NEXT SPACE.
INCRIN   LA    RIN,5(RIN)               INCREMENT INPUT POINTER
         BCT   RF,TEST0                 BRANCH IF MORE EXTENTS
         LA    RIN,DS5AVEXT             RESET INPUT POINTER.
         XC    0(26,R8),0(R8)           CLEAR EXCESS BITS
         LA    RWRK,26                  RESET COUNT OF EXTENTS.
         XI    SWITCH,OUTBYP            FLIP/FLOP READ/WRITE SWITCH
         BZ    RETNBACK                 BRANCH IF READ BEFORE WRITE
         MVC   IDAREA(5),FMTINAD        SET UP NEXT OUTPUT WRT ADDR
RETNBACK BR    RBAK
*
* EXECUTE CHANNEL PROGRAM TO READ OR WRITE F5
*
CHANNLGO MVC   SEEK+3(4),IDAREA         INSERT SEEK ADDRESS FOR IOS.
         STM   RF,R1,REGSAVEA           SAVE REGISTERS
         ST    R0,IOB+16                STORE STARTING CCW INTO IOB.
         MVI   ECB,X'00'                CLEAR STATUS BYTE OF ECB.
         EXCP  IOB                      EXECUTE CHHNNEL PROGRAM.
         WAIT  ECB=ECB                  WAIT FOR I/O COMPLETION
         LM    RF,R1,REGSAVEA           RESTORE REGISTERS
         TM    ECB,X'20'                TEST FOR PERM IO ERROR
         BCR   5,RB                     NO - CONTINUE PROCESSING
*
* ERROR - PERMANENT I/O ERROR
*
         LA    RERRPASS,X'0C'           SET ERROR CODE 'PERM I/O ERROR
         B     ERREXIT
*
* * * * * * * * * * * * *
*
***   CONSTANTS
*
* * * * * * * * * * * * *
*
FOUR     DC    H'4'
FIVES    DC    X'05050505'
H26      DC    H'26'                    CONSTANT OF 26           XM2969
*
* TABLE OF MODULE IDS AND ENTRY POINT ADDRESSES
*
         XCTLTABL ID=(ALLOCD2,5H),SVC=032,LENGTH=,BRT=YES        Y02080
         EJECT                                                   Y02080
DSCBWKAR IECALLWA EP,F4,D1=(1),D2=(5)   ALLOCATE WORK AREA       Y02080
SWITCH   EQU   ASWITCH                  ALLOCATE SWITCH EQUATE   Y02080
REGSAVEA EQU   IECREGSV+12              REGISTER SAVE AREA       Y02080
ZEROS    EQU   CCW4+4                   4 BYTES OF ZEROS
         EJECT                                                   Y02080
CVT      DSECT                          CVT DSECT                Y02080
         CVT                                                     Y02080
         END   IGG0325G                                          S21042
