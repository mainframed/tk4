RP       TITLE '''IGG019RP'' - REUSABILITY SUBTASK'              S21903
         SPACE 1
         MACRO
         REUSPOOL &K
.* &K IS NUMBER OF PAIRS OF LCB + SCB TO BE GENERATED
         LCLA  &CNT
&CNT     SETA  &K
*
* FREEPOOL OF ELEMENTS TO SERVICE A TERMINAL NAME TABLE ENTRY.
* ELEMENTS ARE A PAIR OF BLOCKS, AN LCB WITH AN SCB ATTACHED.
*
         DS    0F .                     WORD BOUNDARY
POOLCB   DC    AL1(0) .                 COUNT OF ACTIVE ELE NOT IN POOL
         DC    AL3(*+3) .               ADDR OF FIRST LCB IN POOL,
*                                         ZERO IF POOL EMPTY
.AGN     ANOP
*
*                       LCB
         DC    AL1(&CNT) .                 LCB ID
         DC    AL3(*-1) .               LCB TO BE POSTED TO ITSELF
&CNT     SETA  &CNT-1                   DECREMENT COUNT OF ELEMENTS
         AIF   (&CNT LT 1).LNKZ
         DC    A(*+232) .               ADDR OF NEXT LCB IN POOL
         AGO   .SKP
.LNKZ    DC    A(0) .                   ZERO LINK, LAST LCB IN POOL
.SKP     ANOP
         DC    21A(0) .                 LCB PROPER
         DC    A(*+60) .                LCBSCBA POINTS TO SCB
         DC    14A(0) .                 REST OF LCB
*                       SCB
         DC    21A(0) .                 SCB BELONGING TO THIS LCB
         AIF   (&CNT GT 0).AGN
*
*                       END OF LCB-SCB FREEPOOL
*
         MEND
         SPACE 3
IGG019RP CSECT                                                        *
         SPACE 3                                                      *
******************** MICROFICHE FLAGS **********************  SUPT CODE
*CHANGE ACTIVITY AS FOLLOWS:                                          *
*A000000-999999                                                @Y17XARX
*A798000,859500                                                  S22029
*C144500,409360                                                  A47133
*A120000,334500,335000,371500,382000,501500,514000,540000,555500SA52971
*A567000,568000,659000,705000,771500,859000                     SA52971
*C050500-052000,093500-098000,119000,267500,288500,290500,302000SA52971
*C313000-313500,317500-332500,333200,333500,334500,337000-341500SA52971
*C343000-345000,351500-371000,375500-376400,415000-459500       SA52971
*C478250-478256,478270,518000-518500,520500-522000,523000-525000SA52971
*C541000,603500-603700,640500-641100,665500,686500-687100       SA52971
*C858000-858500,868000-869500                                   SA52971
*D346000-350000,405500,408520-408920,409060-409500,410500-411000SA52971
*D478000,478170-478200,516500-517000,526000-526500,527500-528500SA52971
*D544500-547000,558000-558500,565000-565500,571500,605000       SA52971
*D643500-654500,663000-663500,698500-703000,773500-774000       SA52971
*C706000-709000,759000-759600,776000-794500,832000-836000,851000SA52971
*D819500-823500                                                 SA52971
*D070000-070500                                                  S21903
*A070000                                                         S21903
*A037100-037400,040100-040400,042030-042450,066100-066200       SA51783
*C107000,112000                                                 SA51783
*A114100-114200                                                 SA51783
*D343500-343800                                                 SA51783
*A356250-356350                                                 SA51783
*D357600-357800                                                 SA51783
*A358320-358500                                                 SA51783
*D362000                                                        SA51783
*A362000-362320,362550-362950,364600-364900                     SA51783
*D371900-372100                                                 SA51783
*A373160-373220                                                 SA51783
*D375500-375660                                                 SA51783
*A375120-375660                                                 SA51783
*D375720-376250                                                 SA51783
*A375720-376160,378070-378420                                   SA51783
*D384200-384600                                                 SA51783
*D409030                                                        SA51783
*A409030-409430                                                 SA51783
*C413500                                                        SA51783
*A739070-739420                                                 SA51783
*D742070-742420                                                 SA51783
*D837000-839500                                                 SA51783
*A836960-839480,845940-845960,863600-863800                     SA51783
*A357010-357150                                                 SA58992
*A138500,352900,863000                                         SA63961
*A 472000                                                        S21903
*D 472300,472520-472620                                          S21903
*C845590                                                        SA59961
*D336000,336500                                                 SA61811
*A336000-336600,375501-375512                                   SA61811
*C273000,538500,812500-813000                                   SA61768
*C219000                                                        SA65862
*A712000                                                        OX02207
*C714700-716000                                                 OX02207
*D719320                                                        OX02207
*C024920                                                         X03039
*D218650,218950                                                  X03039
*A353072                                                       @SA64353
*C358380,358400                                                @SA70208
*D715600                                                       @SA70208
*A271500                                                       @XA06353
*A353064                                                       @SA74235
*C353024-353028                                                @SA74235
*D353004                                                       @SA74235
*A189500                                                       @SA69999
*C191500-194000,293000-293500,352980-352992,353084-353100      @SA69999
*C356400-357000,357100-357130                                  @SA69999
*A353020                                                     * @SA75126
*D353072                                                     * @SA75126
*C353200                                                     * @OS76478
*C845560-845590                                              * @OY11984
*A845680                                                     * @OY11984
*C271800                                                     * @OS76714
*A275500,138700                                              * @OS76714
*C353024-353044                                              * @OS76987
*C024500,024920,247000                                         @Y17XARX
*D023500                                                       @Y17XARX
*A124000,353140                                                @OS77008
*D192300-193900                                                @OS77008
*A194500,845500                                                @OS77388
*C292000,293000-293700,352952-352996,356480-356520             @OS77388
*C356600-356850,357106-357112-357124                           @OS77388
*D353084-353250,356950                                         @OS77388
*C845560                                                       @OS77826
         SPACE 3
***********************************************************************
* THIS ENTIRE MODULE HAS BEEN REWRITTEN, DIFFERING FROM THE      S21101
* FIRST RELEASE.  WHEREAS THE PREVIOUS VERSION USED ONE CPB TO   S21101
* DO ALL REUSABILITY PROCESSING, THIS VERSION ACTS MORE LIKE A   S21101
* GET OR PUT SCHEDULER IN THAT DISK I/O IS DONE BY POSTING ERBS  S21101
* AND BUFFERS.  SEVERAL QUEUES ALSO MAY BE SERVICED              S21101
* SIMULTANEOUSLY INSTEAD OF JUST ONE AT A TIME AS DONE BY THE    S21101
* PREVIOUS VERSION.                                              S21101
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*  MODULE NAME = IGG019RP (TCAM, QMANAGER)                     @Y17XARX
*                                                                     *
*  DESCRIPTIVE NAME = REUSABILITY / COPY SUBTASK                      *
*                                                                     *
*  COPYRIGHT = 'NONE'                                                 *
*                                                                     *
*  STATUS = VERSION 10.0                                       @Y17XARX
*                                                                     *
*FUNCTION -- THIS MODULE IS TO MAKE THE DISK DATA SET DEFINED AS      *
*   REUSABLE ACTUALLY REUSABLE BY PERFORMING PERIODICALLY TWO         *
*   FUNCTIONS,(1) MOVING UNUSED HEADERS INTO CURRENT ZONE BY          *
*   SENDING A CANCELLED HEADER TO OLD HEADER, (2) COPYING UNSENT      *
*   MESSAGES INTO THE CURRENT ZONE AND ENQUEUEING THEM FOR            *
*   TRANSMISSION TO AN ALTERNATE DESTINATION.                         *
*                                                                     *
*   THE COPY SUBTASK IS ACTIVATED TO COPY A MESSAGE FROM ONE          *
*   QUEUE MEDIUM TO ANOTHER.  THIS IS DONE WHENEVER TWO RECEIVERS     *
*   HAVE THEIR QUEUE ON TWO DIFFERENT QUEUE MEDIA, OR WHEN            *
*   MULTIPLE HEADER MESSAGES WOULD HAVE SECONDARY HEADER(S) IN        *
*   A ZONE DIFFERENT FROM TEXT RECORDS.                               *
*                                                                     *
*ENTRY POINTS -- THERE IS ONLY ONE DEFINED ENTRY POINT, IGG019RP,     *
*   BUT THERE ARE SEVERAL OTHER LOGICAL ENTRY POINTS -                *
*                                                                     *
*        'REUSQCB' QCB IS POSTED TO ITSELF BY IEDQHM TO ACTIVATE      *
*   REUSABILITY SERVICING WHENEVER AVTRADDR PASSES AVTLODPT.          *
*   CALLING SEQUENCE --                                               *
*        L     1,AVTIA                  POST REUS QCB TO ITSELF       *
*        BAL   14,DSPPOSTR                                            *
*                                                                     *
*        'WRITQCB' - QCB POINTED TO BY LCB WHICH IS POSTED BY         *
*   REUS TO ITSELF AFTER POSTING BUFFER TO BE WRITTEN.                *
*   ALSO, QCB TO WHICH ERB IS POSTED AFTER A CANCELLED          SA51783
*   HEADER HAS BEEN WRITTEN IN THE CURRENT ZONE AND SET AS      SA51783
*   PFEFO TO INSURE THAT AT LEAST ONE MESSAGE IN THE FEFO       SA51783
*   CHAIN IS IN A GOOD ZONE.                                    SA51783
*                                                                     *
*        'READONE' - QCB TO WHICH ERB IS POSTED WHEN A READ IS DONE.  *
*   LCB HAS BUFFER(S) JUST READ CHAINED ONTO LCBERBCH.                *
*                                                                     *
*        'UNITQCB' - QCB TO WHICH ERB IS POSTED WHEN A REQUESTED      *
*   UNIT BECOMES AVAILABLE FROM THE AVAILABLE BUFFER POOL.            *
*   ALSO, QCB TO WHICH ERB IS POSTED AFTER A FEFO POINTER       SA51783
*   HAS BEEN UPDATED TO REMOVE A MESSAGE IN A BAD ZONE          SA51783
*   FROM THE FEFO CHAIN.                                        SA51783
*                                                               SA51783
*                                                                     *
*        'COPY' - QCB TO WHICH BUFFER IS POSTED TO BE COPIED FROM     *
*   ONE QUEUE TO ANOTHER.                                             *
*                                                                     *
*        'NEWPFEFO' - IS A SUBROUTINE BRANCHED TO OUT OF        SA51783
*   IEDQFA AFTER AN 'EE' REQUEST FOR A CPB BY REUSABILITY.      SA51783
*   THIS SUBROUTINE BUILDS THE CPB PASSED TO IT BY IEDQFA       SA51783
*   TO WRITE A CANCELLED HEADER AT THE DNHDR SLOT.  THE         SA51783
*   CANCELLED HEADER IS MADE PFEFO AND ITS FEFO POINTER         SA51783
*   IS SET TO POINT TO THE ORIGINAL PFEFO THAT WAS FOUND IN     SA51783
*   A BAD ZONE.  THIS WILL INSURE THAT THERE EXISTS AT LEAST    SA51783
*   ONE MESSAGE IN THE FEFO CHAIN THAT IS IN A GOOD ZONE.       SA51783
*                                                               SA51783
*        'UPFEFO' - IS A SUBROUTINE BRANCHED TO OUT OF IEDQFA   SA51783
*   AFTER AN 'EE' REQUEST FOR A CPB BY REUSABILITY.  THIS       SA51783
*   SUBROUTINE BUILDS THE CPB PASSED TO IT FROM IEDQFA          SA51783
*   TO UPDATE A FEFO POINTER TO REMOVE A MESSAGE IN A BAD       SA51783
*   ZONE FROM A FEFO CHAIN.                                     SA51783
*                                                               SA51783
*INPUT -- CERTAIN REGISTERS ARE EXPECTED TO BE SET BY THE DISPATCHER  *
*   R13 ADDRESS OF AVTSAVE2                                           *
*   R11 ADDRESS OF DISPATCHER                                         *
*   R1  ADDRESS OF POSTED ELEMENT                                     *
*                                                                     *
*OUTPUT -- WHEN REUS EXITS TO DISPATCHER TO 'DSPCHAIN',               *
*   R1 HAS ADDRESS OF FIRST OF A CHAIN OF ELEMENTS TO BE TPOSTED,     *
*        OR ZERO IF NOTHING IS TO BE TPOSTED.                         *
*   R13 HAS ADDRESS OF AVTSAVE2.                                      *
*   R11 HAS DISPATCHER BASE FROM AVTEA.                               *
*                                                                     *
*EXTERNAL ROUTINES -- SEVERAL SUBROUTINES ARE USED.                   *
*        'IEDQHG02' - TIME DELAY (DELINK FUNCTION)                    *
*   WHEN REUS FINISHES, IT GETS THE CHECKPOINT ELEMENT OFF TIME       *
*   DELAY QUEUE AND POSTS IT TO ACTIVATE CHECKPOINT.                  *
*                                                                     *
*        'IEDQHM03' - ANSWERS THE QUESTION, IS THE CURRENT      SA52971
*   MESSAGE BEING SENT, AND/OR IF SO, UPDATES THE FIELD(S)      SA52971
*   IN WHICH THE FEFO POINTER IS SAVED.  ADDRESS OF HM03 ENTRY  SA52971
*   IS ONE WORD IN IEDQHM, JUST BEFORE THE IEDQHM02 ENTRY POINT.SA52971
*                                                                     *
*        'IEDQTNT' - TERMNAME TABLE LOOKUP ROUTINE - CONVERTS THE     *
*   INDEX TO THE TERMNAME TABLE INTO THE ADDRESS OF THE               *
*   CORRESPONDING TERMINAL TABLE ENTRY.                               *
*                                                                     *
*        'POST' (SVC 2) WHEN REUS FINISHES SERVICING A ZONE,          *
*   THE OS 'POST' MACRO IS ISSUED TO ACTIVATE OPERATOR CONTROL        *
*   IN CASE CLOSEDOWN IS WAITING FOR REUS TO QUIT.                    *
*                                                                     *
*EXIT-NORMAL -- RETURN TO DISPATCHER AT DSPCHAIN WITH R1 HAVING       *
*   ADDRESS OF A CHAIN OF ELEMENTS TO BE POSTED.                      *
*                                                                     *
*EXIT-ERROR -- WHEN AN ERB IS RECEIVED FOLLOWING A READ REQUEST,      *
*   IF THE READ RESULTED IN A LOGICAL READ ERROR, INDICATED BY        *
*   ZERO IN LCBERBCH, REUS ABENDS TCAM WITH S045, REG 15 HAS 2.       *
*                                                                     *
*TABLES/WORKAREAS -- DSECTS ARE MACRO GENERATED,                      *
*   TAVTD                                                             *
*   TSCBD                                                             *
*   TRECBD                                                            *
*   TTRMD                                                             *
*   TPRFD                                                             *
*   TPRIOR                                                            *
*   TDISPD                                                            *
*   TTNTD                                                             *
*   TQCBD                                                             *
*   TLCBD                                                             *
*   DCBD                                                              *
*   TCPBD 3330                                                  SA51783
*   TDATAD                                                      SA51783
*                                                                     *
*   TO LET REUS SERVICE MORE THAN ONE QUEUE AT A TIME, A DUMMY        *
*   LCB/SCB PAIR IS GENERATED FOR EACH SIMULTANEOUSLY PROCESSED       *
*   QCB.  PART OF THE LCB, STARTING AT LCBSNSV IS USED AS A LOCAL     *
*   WORKAREA SHOWING STATUS OF SERVICING ON THIS QUEUE.  THE          *
*   NUMBER OF QUEUES THAT CAN BE SIMULTANEOUSLY SERVICED IS THE       *
*   OPERAND ON THE 'REUSPOOL' MACRO STATEMENT IN CONSTANTS AREA       *
*   AT THE END OF THE MODULE.                                    S21903
*                                                                     *
* THIS ROUTINE USES CERTAIN FIELDS TO TEMPORARILY SAVE FIELDS IN      *
* PLACES THAT WERE NOT ORIGINALLY INTENDED FOR THIS PURPOSE.          *
*   1. FOR BOTH REUS AND COPY, A PORTION OF THE LCB IS REDEFINED      *
*        AS A LOCAL WORKAREA.  SEE LOCAL ADDITION TO LCB DSECT.       *
*   2. LCBSTART AND SCBDNSEG ARE SWAPPED BEFORE AND AFTER A READ.     *
*        THIS IS DONE BECAUSE THE SAME SCB IS USED TO RECALL A        *
*        BUFFER FROM THE SOURCE AND TO POST THAT BUFFER TO ITS        *
*        DESTINATION.  SEE TAG 'SWAP'.                                *
*   3. IN COPY, THE ORIGINAL BUFFER POSTED TO COPY IS MODIFIED        *
*        IF THE SOURCE QUEUE IS CORE ONLY.                            *
*        A. 'PRFNTXT' IS CHANGED TO HAVE THE PRFNTXT FROM THE         *
*              ORIGINAL HEADER STILL ON CORE Q.  SEE TAG 'SNDCORE'.   *
*        B. 'PRFCRCD' IS CHANGED TO POINT TO THE FIRST XTRA UNIT      *
*              OF THE HEADER BUFFER STILL ON CORE Q, AS MOVED         *
*              FROM THE TIC FIELD OF THE CORE QUEUED HEADER.          *
*              SEE TAG 'SNDCORE'.                                     *
*   4. IN COPY, THE ORIGINAL BUFFER POSTED TO COPY IS MODIFIED        *
*        REGARDLESS OF THE SOURCE QTYPE.                              *
*        A. 'PRFLINK' SAVES CONTENTS OF SCBDEOB+1, WHICH IS WHERE     *
*              MULTIPLE ROUTE WILL DO ITS NEXT RECALL.                *
*              SEE TAGS 'DISKRECL' AND 'CLEANCPY'.                    *
*        B. 'PRFQCBA' SAVES SCBSCHDR.  SEE TAG 'GOTCOPY'.  IF REUS    *
*              AND NOT COPY, SCBSCHDR IS SAVED IN WORKAREA            *
*              'SAVSCHDR' INSTEAD.  THIS CHOICE MADE AT TAG 'SWAP'.   *
*   5. IN COPY, 'LCBRECAD' IS USED TO SAVE LCBERBCH FOR MULTIPLE      *
*        ROUTE.  SEE TAGS 'DISKRECL' AND 'CLEANCPY'.                  *
*                                                                     *
*                                                                     *
*ATTRIBUTES -- REUSABLE, NON-REFRESHABLE, ENABLED, PROBLEM            *
*   PROGRAM MODE.                                                     *
*                                                                     *
*NOTES -- THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A PAR-    *
*   TICULAR INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.    *
*                                                                     *
*   THE COPY QCB IS FOUND BY OPEN BY A FULLWORD OFFSET AT THE         *
*   START OF THE MODULE POINTING IN TO THE COPY SUBTASK.              *
*                                                                     *
*   THE 'REUSABILITY' FUNCTION -- THE USER SPECIFIED 'QUEUES=DR'      *
*   (OR 'MR') ON THE TERMINAL (OR TPROCESS OR LOGTYPE) MACRO, AND     *
*   'OPTCD=R' ON THE DCB DEFINING THE REUSABLE DISK MESSAGE QUEUE     *
*   DATA SET.  THIS DISK DATA SET IS LOGICALLY DIVIDED INTO 4         *
*   ZONES.  WHEN DESTINATION ASSIGNMENT 'IEDQHM' FINDS THAT THE       *
*   VALUE IN AVTRADDR HAS PASSED AVTLODPT, IT POSTS THE REUS QCB      *
*   TO ITSELF TO ACTIVATE REUSABILITY.  THIS ACTIVATION OCCURS        *
*   AT MID-ZONE.  TO SEE HOW ZONES ARE USED, ASSUME ZONES ARE         *
*   CALLED A,B,C, AND D.  'REUS' IS CALLED WHEN AVTRADDR REACHES      *
*   MIDZONE OF 'D'.  AVTLODPT IS BUMPED TO MIDPOINT OF NEXT ZONE,     *
*   'A'.  REUS DOES (1) SENDS CANCELLED HEADER TO ALL UNUSED          *
*   HEADERS IN ZONE 'C' AND REASSIGNS NEW UNUSED HEADER TO ZONE       *
*   'D' AND (2) COPIES ALL UNSENT MESSAGES WHOSE HEADERS ARE IN       *
*   ZONE 'B' TO CURRENT ZONE 'D' AND ENQUEUES THEM TO THE             *
*   ALTERNATE DESTINATION.                                            *
*                                                                     *
*   REUS CAN CAUSE A 'SLOWDOWN' WHICH IS A CESSATION OF ALL           *
*   POLLING BY TURNING ON THE 'REUS DISK IS FULL' BIT (AVTBIT3,       *
*   X'40').  TCAM WILL ONLY SEND UNTIL REUS CLEARS THIS BIT.          *
*   REUS STARTS 'SLOWDOWN' WHENEVER IEDQHM POSTS THE REUS QCB TO      *
*   REQUEST A ZONE TO BE SERVICED, BUT REUS FINDS THAT REUS IS        *
*   ALREADY RUNNING, SO REUS REQUESTS 'SLOWDOWN' AND SETS 'REUS       *
*   FIRST TIME SWITCH' SO WHEN CURRENT ZONE IS FINALLY CLEANED        *
*   UP, THE 'FIRST TIME BIT' WILL INDICATE A NEED TO START            *
*   IMMEDIATELY ON THE NEXT ZONE.  THE 'SLOWDOWN' STAYS IN EFFECT     *
*   UNTIL REUS COMPLETES SERVICING ON ALL REQUESTED ZONES.            *
*                                                                     *
*   DEFINITION - 'SOURCE', AS USED IN COMMENTS IN THIS MODULE, IS     *
*   REFERRING TO THE ORIGINAL DESTINATION OF A MESSAGE.  REUS         *
*   READS THE MESSAGE FROM THE 'SOURCE' QCB AND ENQUEUES IT TO        *
*   THE 'DESTINATION' QCB (AS SPECIFIED BY ALTDEST KEYWORD ON         *
*   'SOURCE' QCB)                                                     *
*                                                                     *
*   REGISTERS FOR QCB DSECT - THERE ARE 3 REGS DEFINED FOR QCB--      *
*   RQCBSM (SOURCE MASTER), RQCBSP (SOURCE PRIORITY), AND RQCBD       *
*   (ALTDEST MASTER).  THE USING STATEMENTS USE RQCBSM AS THE   SA52971
*   STANDARD MASTER QCB DSECT BASE AND RQCBSP AS THE STANDARD   SA52971
*   PRIORITY LEVEL QCB DSECT BASE.  IF THE FIELD IS BEING       SA52971
*   REFERENCED BY THE OTHER REGS, THE USING IS OVERRIDDEN, AND  SA52971
*   THE BASE IS EXPLICITLY DEFINED.                             SA52971
*                                                                     *
*   FIXED REGISTERS - RDISP (REG 11) AND RAVT (REG 13) ARE            *
*   EXPECTED SET AT ENTRY, WILL NEVER BE MODIFIED BY IGG019RP,        *
*   AND WILL REMAIN SO SET AT EXIT.                                   *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
*                       REGISTER USAGE
R15      EQU   15                       ENTRY ADDRESS, WORK REG
R14      EQU   14                       RETURN ADDRESS FROM
*                                         INTERNAL SUBROUTINES
R13      EQU   13                       SAVEAREA ADDRESS - AVTSAVE2
RAVT     EQU   13                       AVT DSECT BASE
RBASE    EQU   12                       PROGRAM BASE
R12      EQU   12                       TWELVE                   S22024
RDISP    EQU   11                       DISPATCHER BASE
R11      EQU   11                       REG 11                   S22024
R10      EQU   10                       WORK REG IN CPB SUBRTNS SA51783
RQCBD    EQU   9                        DESTINATION MASTER QCB
R9       EQU   9                        REG 9                    S22024
RQCBSP   EQU   8                        SOURCE PRIORITY QCB
R8       EQU   8                        REG 8                    S22024
RQCBSM   EQU   7                        SOURCE MASTER QCB
*                                       QCB DSECT BASE
R7       EQU   7                        REG 7                    S22024
RPREFIX  EQU   6                        BUFFER ADDRESS
R6       EQU   6                        REG 6                    S22024
RCPB     EQU   5                        CPB ADDR IN CPB SUBRTNS SA51783
RLCB     EQU   4                        LCB ADDRESS
R4       EQU   4                        REG 4                    S22024
RSCB     EQU   3                        SCB ADDRESS
R3       EQU   3                        REG 3                    S22024
RDAT     EQU   2                        DATA FIELDS REG FOR CPB SA51783
*                                       SUBROUTINES             SA51783
R2       EQU   2                        TEMP SCB BASE, SET BY HM03
*                                       WORK REG
*                                       ALTERNATE BUFFER ADDRESS
R1       EQU   1                        PARAMETER PASSER
*                                       TEMPORARY TERM TABLE ADDR
RTIME    EQU   1                        TIME STAMP WORK REG     SA52971
R0       EQU   0                        WORK REGISTER
*
         USING REUSQCB,RBASE            ESTABLISH ADDRESSABILITY
         USING IEDQDISP,RDISP           DISPATCHER DSECT BASE
         USING    AVTSAVE2,RAVT         AVT DSECT BASE          SA52971
         USING IEDQPRF,RPREFIX          BUFFER DSECT BASE
         USING IEDQQCB,RQCBSM           QCB DSECT BASE
         USING IEDQPQCB,RQCBSP          PRIORITY QCB DSECT BASE SA52971
         USING IEDQLCB,RLCB             LCB DSECT BASE
         USING IEDQSCB,RSCB             SCB DSECT BASE
         EJECT
*                       EQUATES
*
BYFOUR   EQU   2                        DIVIDE BY 4 USING SHIFT
TAKEHALF EQU   1                        DIVIDE BY 2 USING SHIFT
ONE      EQU   1                        INCREMENTOR
THREE    EQU   3                        CONSTANT               @OS77008
FOUR     EQU   4                        BYTES PER WORD
TESTLOG  EQU   X'60'                    LOGTYPE ENTRY IN
*                                         TERMINAL TABLE
PROSING  EQU   X'C0'                    BOTH BITS IN SINGLE OR
*                                         PROCESS Q IN 'TRMSTATE'
QTYPE    EQU   X'03'                    LOW 2 BITS OF UNIT ADDR
*                                         DETERMINE Q TYPE
*                                         X'03' - REUS
*                                         X'01' - NON REUS
*                                         X'00' - CORE
*                                         X'10' - RESERVED
DUMBUFOU EQU   2                        DEFAULT DCBBUFOU
HISREG3  EQU   32                       OFFSET INTO SAVEAREA OF R3
HISREG4  EQU   36                       OFFSET INTO SAVEAREA OF R4
HMBASE   EQU   6                        OFFSET PAST V(HM) OF HM BASE
TIC      EQU   X'08'                    TIC CCW OP CODE
TOGGLE   EQU   X'F0'                    TOGGLES CONDITIONAL BRANCH
X0101    EQU   X'0101'                  REQUESTS ONE SINGLE UNIT BUF
CHAR     EQU   C'C'                     FILL CHAR FOR CANCELLED HEADERS
ABEND2   EQU   2                        ABEND S045 SUBCODE IN R15
*                                         FOR REUS LOGICAL READ ERROR
X0F      EQU   X'0F'                    BUFOUT MASK IN DCB
*
*                                       CONDITION CODES
NZ       EQU   7                        NON-ZERO
Z        EQU   8                        ZERO
ALWAYS   EQU   X'F0'                    MAKES BRANCH UNCONDITIONAL
NEVER    EQU   X'00'                    MAKES BRANCH NO-OP
BYTWO    EQU   1                        DIVIDE BY TWO          SA63961
         EJECT
         DC    A(COPY-*)                OFFSET TO COPY QCB, USED
*                                         BY OPEN
*
REUSQCB  DC    A(*)                     REUSABILITY QCB, POSTED TO
         DC    AL1(PRIREUSX),AL3(0)       ITSELF BY IEDQHM WHEN IT
*                                         FINDS THAT AVTRADDR
*                                         REACHES AVTLODPT
         DC    A(REUSSTCB)              ADDRESS OF STCB
*
IGG019RP IEDHJN ,                       MODULE ID AND DATE       A50184
*
         DS    0H                       HALFWORD BOUNDARY
REUSSTCB DC    AL1(DSPMCPL2),AL1(0)     STCB
*
* CONDITIONS AT ENTRY TO REUSABILITY
* R13 - ADDRESS OF AVTSAVE2
* R11 - ADDRESS OF DISPATCHER
* R1  - ADDRESS OF REUS QCB
*
         LR    RBASE,R1                 SET PROGRAM BASE TO VALUE
*                                         FOUND IN AVTIA.
*                                       HERE SET SINCE REUS QCB
*                                         IS POSTED TO ITSELF
         TM    AVTBIT2,AVTREUSN         IS REUS ALREADY RUNNING
         BZ    FIRSTIME                   NO, NOT RUNNING YET
*                                         YES, ALREADY RUNNING
         OI    FLAG,RUFTN               TURN ON REUS 1ST TIME SWITCH
         TM    AVTBIT3,AVTRFULN         IS SLOWDOWN ALREADY DONE
         BO    EXIT                       YES, QUIT
*                                         NO, START SLOWDOWN
         MVC   NAMETAG(MLN),FULL        MOVE MESSAGE TAG        SA52971
         BAL   R14,WRTOP                DO WRITE TO OPERATOR    SA52971
*
*
* 'SLOWDOWN' MEANS STOP RECEIVING.  THIS IS RESULT OF REUS FINDING
* BOTH 'REUS IS RUNNING' BIT AND 'REUS FIRST TIME SWITCH' BITS ON.
         OI    AVTBIT3,AVTRFULN         TURN ON 'REUS IS FULL' BIT
*                                         TO REQUEST SLOWDOWN
*
EXIT     EQU   *
         L     R1,POSTQ                 PICK UP CHAIN OF ELEMENTS
*                                         TO BE POSTED TO DISPATCHER
         XC    POSTQ+1(3),POSTQ+1       CLEAR POSTQ TO INDICATE
*                                         IT IS EMPTY
         B     DSPCHAIN                 RETURN TO DISPATCHER,
*                                         PASSING IT A CHAIN OF ELE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
RFULF    EQU   *
         TM    AVTBIT3,AVTRFULN         IS SLOWDOWN IN PROGRESS
         BZ    EXIT                       NO, QUIT
*                                         YES, TERMINATE SLOWDOWN
         MVC   NAMETAG(MLN),END         MOVE MESSAGE TAG        SA52971
         BAL   R14,WRTOP                DO WRITE TO OPERATOR    SA52971
         NI    AVTBIT3,X'FF'-AVTRFULN   TURN OFF 'REUS IS FULL' BIT
         B     EXIT                     NOW QUIT
*
CKFTS    EQU   *
         TM    FLAG,RUFTN               IS 'REUS 1ST TIME SWITCH' SET
         BZ    RFULF                      NO, QUIT
*                                         YES, CONTINUE
FIRSTIME EQU   *                        'REUS FIRST TIME SWITCH' SET
         MVC   NAMETAG(MLN),START       MOVE MESSAGE TAG        SA52971
         BAL   R14,WRTOP                DO WRITE TO OPERATOR    SA52971
         NI    FLAG,X'FF'-RUFTN         CLEAR 1ST TIME SWITCH
         OI    AVTBIT2,AVTREUSN         SET 'REUS IS RUNNING' BIT
*
* CALCULATE ZONE ADDRESSES
*
         L     R15,AVTTOTNR             GET SIZE OF REUS DATA SET
         LR    R1,R15                   SAVE ZONESIZE IN R1
         SRL   R15,TAKEHALF             GET SIZE OF HALF A ZONE
         L     R14,AVTLODPT             GET CURRENT LOAD POINT
         SLL   R14,BYFOUR               ADJUST LOADPOINT
         SR    R14,R15                  BACK UP LOAD POINT HALF A
*                                         ZONE TO END OF 'CURRENT'
*                                         ZONE
         SR    R14,R1                   BACK UP TO START OF
*                                         'CURRENT ZONE'
         ST    R14,BOUNDS3              SAVE START OF 'CURRENT ZONE'
         BNM   NOCLEAR                  BR ON NEG VALUE FOR    @SA69999
*                                        START OF CURRENT ZONE @SA69999
         XC    BOUNDS3,BOUNDS3          SET START OF 'CANCEL   @SA69999
*                                        ZONE' TO ZERO         @SA69999
NOCLEAR  EQU   *                                               @SA69999
         SR    R14,R1                   BACK UP TO START OF
*                                         'CANCEL ZONE'
         ST    R14,BOUNDS2              SAVE START OF 'CANCEL ZONE'
         BNM   STAY                     NEGATIVE NUMBER MEANS  @SA69999
*                                        POSSIBLE RRN WRAP     @SA69999
         XC    BOUNDS2,BOUNDS2          SET START OF CURRENT   @OS77008
*                                        ZONE TO ZERO          @OS77008
STAY     EQU   *                        GET TERMNAME TABLE DESCRIPTION
         LR    R15,R1                   COPY ZONE SIZE         @OS77388
         LR    R14,R15                  COPY ZONE SIZE         @OS77388
         SRL   R14,BYTWO                OFFSET OF EIGHTH LOAD  @OS77388
*                                        POINT                 @OS77388
         SLL   R15,BYFOUR               DISK SIZE              @OS77388
BS45LOOP EQU   *                                               @OS77388
         AR    R14,R15                  BUMP BY DISK SIZE      @OS77388
         SLL   R14,BYTELEN              SHIFT FOR TEST         @OS77388
         LTR   R14,R14                  TEST FOR RADDR WRAPP   @OS77388
         SRL   R14,BYTELEN              MOVE LENGTH BACK       @OS77388
         BP    BS45LOOP                 NO, NOT RADDR WRAP     @OS77388
         LR    R15,R1                   COPY ZONE SIZE         @OS77388
         SRL   R15,BYTWO                GET LOAD POINT         @OS77388
         SR    R14,R15                  GET CURRENT WRAP ZONE  @OS77388
         NC    BOUNDS3,BOUNDS3          BOUNDS3 ZERO MEANS WRAP@OS77388
*                                        OF RADDR              @OS77388
         BNZ   SETBS45                  NO, NORMAL CASE        @OS77388
         ST    R14,BOUNDS5              SAVE CURRENT WRAP ZONE @OS77388
         SR    R14,R1                   GET CANCEL WRAP ZONE   @OS77388
         ST    R14,BOUNDS4              SAVE CANCEL WRAP ZONE  @OS77388
         B     STAY1                    START REUSE PROCESS    @OS77388
SETBS45  EQU   *                                               @OS77388
         LR    R15,R14                  COPY RADDR WRAP ADDRESS@OS77388
         A     R15,BOUNDS2              GET VALUE FOR BOUNDS4  @OS77388
         ST    R15,BOUNDS4              SAVE CANCEL WRAP ZONE  @OS77388
         A     R14,BOUNDS3              GET BOUNDS5 VALUE      @OS77388
         ST    R14,BOUNDS5              SAVE CURRENT WRAP ZONE @OS77388
STAY1    EQU   *                                               @OS77388
         L     R15,AVTRNMPT             GET START OF TERMNAME TABLE
         MVC   LENTNT+2(L'TNTLEN),TNTLEN-IEDQTNTD(R15) PRESET INDEX
*                                         THROUGH TERMNAME TABLE TO
*                                         NO. OF TABLE ENTRIES
         B     GETBLKS                  GO GET REUS LCB
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
LOOP     EQU   *                        AS EACH Q IS SERVICED AS
*                                         FAR AS POSSIBLE, ITS
*                                         APPROPRIATE ELEMENTS PUT
*                                         TO POSTQ FOR DISPATCHING,
*                                         START HERE TO PROCESS
*                                         ANOTHER Q SIMULTANEOUSLY
         TM    BITS,COPYBIT             REUS OR COPY LCB
         BO    EXIT                       COPY, QUIT
*                                         REUS, TRY FOR AN LCB
GETBLKS  EQU   *                        REMOVE AN LCB AND SCB FROM
*                                         FREEPOOL, IF ANY AVAILABLE
         SR    R15,R15                  CLEAR WORK REG
         L     RLCB,POOLCB              GET ADDR OF FIRST LCB ON
         LA    RLCB,0(,RLCB)              POOL, IF ANY
         LTR   RLCB,RLCB                WAS ONE AVAILABLE
         BZ    EXIT                     NO, NONE AVAILABLE, QUIT
*                                         YES, GOT LCB
         L     RSCB,LCBSCBA-1           SET SCB REG WITH SCB
*                                         ATTACHED TO THIS LCB
         MVC   POOLCB+1(3),LCBLINK      MOVE NEXT LCB TO FREEPOOL
         IC    R15,POOLCB               GET LCB COUNT
         LA    R15,ONE(,R15)            BUMP COUNTER
         STC   R15,POOLCB               SAVE NEW COUNT
*
*                                       GOT THEM - RLCB AND RSCB
*                                         ARE NOW SET
GETTNT   EQU   *                        THIS PAIR OF LCB + SCB HAS
*                                         FINISHED A TERM ENTRY.
*                                       USE THEM TO DO ANOTHER
*                                         TERMINAL ENTRY.
         XC    1(LCBSCBA-IEDQLCB-1,RLCB),1(RLCB) CLEAR LCB
         XC    ALTDESX(BUFFERCN-ALTDESX+L'BUFFERCN),ALTDESX
*                                         AND WORKAREA
         XC    0(SCBRGSAV-IEDQSCB,RSCB),0(RSCB) CLEAR SCB
         L     R1,LENTNT                GET INDEX TO TERMNAME TABLE
         BAL   R14,CALLTNT              CONVERT INDEX IN R1 TO
*                                         TERM TABLE ADDRESS IN R1
         USING IEDQTRM,R1                                        S22024
         TM    TRMSTATE,TESTLOG         IS IT LOGTYPE ENTRY ?    S22024
         BO    SINGORPR                   YES, GO CHECK IT
*                                       NO NOT LOGTYPE           S22025
         TM    TRMDSORG,TRMLGB          IS IT A 3705 LGB ?       S22024
         BO    BUMPINDX                 YES, GET NEXT ENTRY      S22024
         TM    TRMSTATE,TRMLIST         PROCESS,SINGLE,LINE     SA65862
         BZ    SINGORPR                 YES, GO CHECK IT         S22025
*                                         NO, TRY NEXT TERMINAL
         DROP  R1                                                S22024
BUMPINDX EQU   *
         L     R1,LENTNT                GET INDEX OF OLD TERMINAL
         BCT   R1,GONEXTRM              BUMP INDEX TO NEXT TERMNAME
*
         MVC   LCBLINK,POOLCB+1         HANG FREE LCBS ONTO NEW LCB
         SR    R15,R15                  CLEAR WORK REG
         IC    R15,POOLCB               GET FREEPOOL COUNT
         BCTR  R15,0                    DECREMENT COUNT OF STILL
*                                         ACTIVE LCBS
         ST    RLCB,POOLCB              HANG NEW LCB ONTO FREEPOOL
         STC   R15,POOLCB               RESTORE NEW COUNT
         LTR   R15,R15                  SET CONDITION CODE
*                                         IF R15 IS NOW ZERO, ALL
*                                         LCBS ARE BACK INTO FREEPOOL
*                                       ARE ALL LCB + SCB BACK TO POOL
         BNZ   EXIT                       NO, REST WILL QUIT SOON
*                                         YES, REUS IS FINISHED
         MVC   NAMETAG(MLN),QUIT        MOVE MESSAGE TAG        SA52971
         BAL   R14,WRTOP                DO WRITE TO OPERATOR    SA52971
*
* NOW THAT REUS HAS FINISHED, THE SERVICED BIT IN EACH QCB IS SET TO
* INDICATE THE QCB IS SERVICED BY REUS.  NEXT TIME REUS IS ENTERED,
* REDEFINE THE BIT SO THIS SAME SETTING MEANS 'NOT SERVICED'.  DO
* THIS BY TOGGLING THE CONDITION CODE OF A CONDITIONAL BRANCH
*
FLIPTEST XI    TEST+1,TOGGLE            REVERSE BIT DEFINITION BY
*                                         MODIFYING A CONDITIONAL
*                                         BRANCH INSTRUCTION
*
* IF TCAM IS TRYING TO CLOSEDOWN, IT IS WAITING FOR REUS TO GET
* THROUGH.  IF SO, NO NEED TO REQUEST A CHECKPOINT, SINCE CLOSEDOWN
* WILL DO A CHECKPOINT.
*
         TM    AVTBIT1,AVTCLOSN         IS CLOSEDOWN IN PROGRESS
         BZ    CKCK                       NO, CHECK CHECKPOINT
*                                         YES, CLOSING DOWN
         LA    R1,AVTOPCOB+4            PASS ADDR OF OPERATOR
*                                         CONTROL'S ECB
*                                       CLOSEDOWN (ACTIVATED BY
*                                         OPERATOR CONTROL) CAN
*                                         TRY AGAIN NOW THAT REUS
         POST  (1)                        HAS FINISHED A ZONE
*
         B     OFFRUN                   FORGET CHECKPOINT, GO SEE
*                                         IF NEXT ZONE IS READY
*                                         FOR REUS SERVICEING
CKCK     EQU   *
         TM    AVTCKFLG,AVTCKTAC       IS CHECKPOINT IN SYSTEM @Y17XARX
         BZ    OFFRUN                     NO, FORGET CHECKPOINT
*                                         YES, REQUEST CHECKPOINT
*
* GO TO TIME DELAY SUBTASK AND GET CHECKPOINT ELEMENT
*
         LA    R1,AVTCKELE              REQUEST CKPT ELE FROM TIME Q
         L     R15,AVTHG02              GET DELINK TIME ELE ROUTINE
         BALR  R14,R15                  REMOVE CKPT ELE FROM TIME Q
*
         TM    AVTCKELF,AVTCRTLN        IS CKPT ELE ALREADY POSTED
         BO    OFFRUN                     YES, FORGET CHECKPOINT,
*                                           IT IS ALREADY REQUESTED
*                                         NO, NOT REQUESTED YET
         TM    AVTCKELF,AVTCPIPN        IS CKPT IN PROGRESS
         BO    FLAGELE                    YES, FLAG CKPT ELE TO TELL
*                                           CKPT TO DO IT AGAIN
*                                         NO, CKPT NOT IN PROGRESS
*
* NOW THAT A ZONE IS CLEANED UP, ACTIVATE CHECKPOINT.
*
         MVC   AVTCKELE+(RECBQCBA-IEDQRECB)(3),AVTCKQAD CKPT QCB ADDR
         LA    R1,AVTCKELE              PASS CKPT ELE TO DISPATCHER
         MVI   AVTCKELE+(RECBPRI-IEDQRECB),PRICKPT SET PRIORITY
         BAL   R14,POSTCHAN             PUT CKPT ELE ONTO READY Q
*
FLAGELE  EQU   *
         OI    AVTCKELF,AVTCRTLN        MARK CKPT ELE AS 'POSTED'
*
OFFRUN   EQU   *
         NI    AVTBIT2,X'FF'-AVTREUSN   CLEAR 'REUS IS RUNNING' BIT
         B     CKFTS                    GO SEE IF NEXT ZONE IS READY
*                                         FOR REUS CLEANUP
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
* ONE PORIORTY LEVEL DESTINATION QCB HAS BEEN PROCESSED.  REPEAT
* FOR LOWER PRIORITY LEVELS ON THIS SAME QCB.
*
NEXTPRI  EQU   *
         MVI   BITS,AVTEZERO            CLEAR FLAGS
         CLI   QCBPRIPQ,AVTEZERO        IS THIS THE LOWEST      SA52971
         BE    GOSCHED                    YES, LAST PRI QCB
*                                         NO, ANOTHER LOWER LEVEL
         LA    RQCBSP,QCBPSIZE(,RQCBSP) BUMP TO NEXT PRI QCB
         B     NEWPRI                   SERVICE NEW PRI QCB
*
GOSCHED  EQU   *
         XI    QCBFLAG,QCBRSRV          MARK MASTER SOURCE QCB SERVICED
         NI    QCBDSFLG,X'FF'-QCBHELD   PERMIT SENDING AGAIN
*                                       INITIALIZE FOR PRIORITY@XA06353
*                                       LEVEL SCAN             @XA06353
         LA    RQCBSP,IEDQQCB+QCBMSIZE-QCBPSIZE                @XA06353
SCANLOOP EQU   *                                               @XA06353
         LA    RQCBSP,QCBPSIZE(,RQCBSP) BUMP TO NEXT PRI LEVEL @XA06353
         OC    QCBFFEFO,QCBFFEFO        AND UNSENT MESSAGES    @XA06353
         BNZ   SCHEDSS                  BR YES                 @XA06353
*                                                              @XA06353
         CLI   QCBPRIPQ,AVTEZERO        LAST PRI LEVEL         @XA06353
         BE    CLOSPROC                 BR IF YES              @OS76714
*                                                              @XA06353
         B     SCANLOOP                 CHECK NEXT PRI LEVEL   @XA06353
*                                                              @XA06353
SCHEDSS  EQU   *                                               @XA06353
         BAL   R14,ACTSCHED             ACTIVATE THE SCHEDULER
*                                         TO SEND TO SOURCE QCB
         LR    R12,R0                   RESTORE BASE REG        SA61768
         B     BUMPINDX                 GO SERVICE NEXT TERMINAL
*
GONEXTRM EQU   *                        ANOTHER TNT ENTRY TO BE DONE
         ST    R1,LENTNT                SAVE NEW INDEX
         B     GETTNT                   CHECK OUT NEXT TNT ENTRY
CLOSPROC EQU   *                                               @OS76714
         TM    QCBFLAG,QCBPROC          PROCESS ENTRY          @OS76714
         BNO   BUMPINDX                 BR IF NO               @OS76714
         L     R1,QCBPREN               PROCESS ENTRY ADDR     @OS76714
         NC    TRMSTAT+1-IEDQTRM(2,R1),TRMSTAT+1-IEDQTRM(R1)   @OS76714
*                                       PROCESS ENTRY CLOSED?  @OS76714
         BZ    BUMPINDX                 BR IF YES              @OS76714
         L     R1,TRMSTAT-IEDQTRM(,R1)   PEWA ADDR             @OS76714
         TM    PEWAFLG-IEDQPEWA(R1),CFLG  CLOSE IN PROGRESS    @OS76714
         BO    SCHEDSS                  BR IF YES TO CAUSE     @OS76714
*                                       IEDQEW TO RUN          @OS76714
         B     BUMPINDX                 CONTINUE               @OS76714
         EJECT
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
SINGORPR EQU   *                        A SINGLE OR PROCESS TERMINAL
*                                         TABLE ENTRY HAS BEEN FOUND
         L     RQCBSM,TRMDESTQ-1-IEDQTRM(R1) GET SOURCE MASTER QCB
         TM    QCBDSFLG,QCBREUS         IS Q=MR OR DR
         BZ    BUMPINDX                   NEITHER, GET NEXT TERMINAL
*                                         YES, USES REUS DISK QUEUE
         TM    QCBFLAG,QCBRSRV          IS THIS QCB SERVICED YET
*
* (NEXT INSTRUCTION MODIFIED AT TAG 'FLIPTEST'.)
*
TEST     BNZ   BUMPINDX                   YES, ALREADY DONE
*                                         NO, NOT DONE YET, DO IT
         TM    QCBDSFLG,QCBHELD         IS THIS QCB BEING
*                                         SERVICED ALREADY
*                                         BY REUSABILITY
         BO    BUMPINDX                   YES, SKIP IT
*                                         NO, START CHECKING
         OI    QCBDSFLG,QCBHELD         STOP SENDING TO THIS SOURCE
*                                         MASTER QCB UNTIL REUS IS
*                                         FINISHED WITH THIS ONE QCB
         MVC   SOURCTNT,LENTNT+2        SAVE THIS SOURCE INDEX
         ST    RQCBSM,SOURCQCB          SAVE SOURCE MASTER QCB
         LA    RQCBSP,QCBMSIZE(,RQCBSM) SET SOURCE PRI QCB TO   SA52971
*                                         HIGHEST PRI QCB
NEWPRI   EQU   *
         ST    RQCBSP,SQCB              SAVE SOURCE PRI QCB
         MVC   AVTDOUBL+1(3),QCBDNHDR   GET ADDR OF             SA52971
         L     R14,AVTDOUBL               NEXT ASSIGNED-AHEAD HEADER
         LA    R14,0(,R14)              CLEAR HIGH BYTE
         LA    R15,BOUNDS3              ADDR OF CURRENT ZONE   @OS77388
         C     R14,AVTRADDR             POSSIBLE WRAP          @OS77388
         BNH   NOCHEK                   NO, BRANCH             @OS77388
         LA    R15,BOUNDS5              ADD CURRENT WRAP ZONE  @OS77388
NOCHEK   EQU   *                                               @OS77388
         C     R14,0(R15)               IS UNUSED HEADER IN CUR@OS77388
*                                         ZONE' AND THUS OK
         BH    UNSENT                   YES, BRANCH            @OS77388
*
* SEND CANCEL HEADER TO THIS PRI QCB TO CAUSE REASSIGNMENT OF A NEW
* HEADER IN 'CURRENT ZONE'.
*
         BAL   R14,BUFPOOL              GET UNIT FROM AVAILABLE BUF
*                                         POOL
         ST    RPREFIX,BUFFER           SAVE UNIT ADDRESS
*
* A BUFFER UNIT IS NOW AVAILABLE.  BUILD IT INTO A CANCELLED HEADER.
*
         ST    RLCB,PRFLCB-1            PASS ADDR OF REUS LOCAL LCB
         MVI   PRFNBUNT,ONE             SINGLE UNIT BUFFER
         XC    PRFSRCE(PRFDEST-PRFSRCE),PRFSRCE CLEAR PREFIX
         MVC   PRFDEST,SOURCTNT         SOURCE TERMINAL INDEX
         MVI   SCBQTYPE,SCBREUS         SET TO HAVE RADDR BUMPED
         OI    PRFSTAT1,PRFCNCLN        MARK MSG CANCELLED
         MVC   SCBPRI(1),QCBPRIPQ       PASS PRI OF SOURCE      SA52971
         LH    R15,AVTKEYLE             GET KEYLENGTH
         STH   R15,PRFSIZE              SET FOR SINGLE UNIT BUFFER
         LA    R14,AVTHDRSZ             REMOVE SIZE OF HEADER
         SR    R15,R14                    FROM KEYLENGTH
         MVI   PRFSHDR,CHAR             GET FILL CHARACTER
         BCTR  R15,0                    ADJUST TEXT SIZE FOR EX INSTR
         BCTR  R15,0                    ADJUST FOR 1ST CHAR DONE
         EX    R15,FILL                 PUT FILL CHAR TO CANCEL HEADER
*
* BUFFER IS READY TO BE POSTED TO DISK I/O TO BE WRITTEN AS A
* CANCELLED HEADER.  SET UP LCB TO BE POSTED BACK TO REUS SO IT
* KNOWS WHEN BUFFER HAS GONE TO DISK.  LCB USES LOWER PRI THAN BUF.
*
         LR    RQCBD,RQCBSM             SEND CANCEL HEADER TO
*                                         SOURCE MASTER
         BAL   R14,WRITE                'WRITE' POSTS BUFFER TO
*                                         DISK I/O SUBTASK AND
*                                         ERB TO IGG019RP
UNSENT   EQU   *                        COME HERE IF NO CANCEL MSG
*                                         WAS NEEDED, OR IF CANCEL
*                                         MSG HAS JUST BEEN WRITTEN
         NC    QCBINTFF(3),QCBINTFF     ANY HELD MESSAGES       SA52971
         BZ    NOINT                      NO, FORGET INTERCEPTED
*                                           MSG PROCESSING
*                                         YES, INTFF FIELD USED
         TM    QCBFLAG,QCBPROC          IS THIS A PROCESS Q
         BO    NOINT                      YES, PROCESS Q USES INTFF
*                                           FOR OTHER THAN INT MSGS
*                                         NO, INTFF HAS INT MSGS
         MVC   QCBFFEFO(3),QCBINTFF     MOV HELD MSG TO FEFO    SA52971
         XC    QCBINTFF(3),QCBINTFF     CLEAR FIRST HELD FEFO   SA52971
         MVC   QCBPREVF(3),QCBPFEFO     RESET SHUFFLE SPOT      SA52971
NOINT    EQU   *
         XC    IDBADPTR(3),IDBADPTR     SET NO GOOD PREV MSG    SA52971
         MVC   RESUME(3),QCBPFEFO       GET ADDRESS OF 1ST MSG  SA52971
HOLDOUT  EQU   *
         MVC   AVTDOUBL+1(3),RESUME     SET WHERE TO RESUME     SA52971
         NI    BITS,X'FF'-(SDFFO+LMSGN) RESET MSG ORIENTED FLGS SA52971
         L     R15,AVTDOUBL
         LA    R15,AVTEZERO(,R15)       CLEAR HI-ORDER BYTE     SA52971
         LTR   R15,R15                  ARE THERE ANY UNSENT MSGS
         BNZ   PROCESS                  BR YES                  SA61811
         NC    QCBPREVF,QCBPREVF        PREVF ZEROED BY REUS    SA61811
         BNZ   NEXTPRI                  BR NO                   SA61811
         MVC   QCBPREVF,QCBPFEFO        SET PREVF TO PFEFO      SA61811
         B     NEXTPRI                  PROCESS NEXT PRI LEVEL  SA61811
         SPACE
PROCESS  EQU   *                                                SA61811
         LA    R9,AVTDOUBL+1            SET SEARCH ARGUEMENT    SA52971
         SR    R10,R10                  SET 'LET ME KNOW'       SA52971
         BAL   R14,FINDHM03             IS FIRST MSG ON THIS PRI
*                                         QCB BEING SENT
         MVC   AVTDOUBL+1(3),RESUME     RESET RCD NUM TO BNDRY  SA52971
         LTR   R14,R14                  WAS MSG FOUND SENDING   SA52971
         BNM   SDFFONO                  NO, EVERYTHING'S FINE   SA52971
         OI    BITS,SDFFO               SET 'BEING SENT'        SA52971
SDFFONO  EQU   *                                                SA52971
         CLC   AVTDOUBL+1(3),QCBLFEFO   IS THE LAST ON QUEUE    SA52971
         BNE   NOLFEFO                  NO, CONTINEU            SA52971
         OI    BITS,LMSGN               REMEMBER THAT IT WAS    SA52971
*                                         AT READ               SA52971
NOLFEFO  EQU   *                                                SA52971
         L     R15,AVTDOUBL             AGAIN GET FFEFO MSG ADDR
         BAL   R14,READHEAD             GET ADDR OF HEADER BUFFER
*                                         TO RPREFIX
         TM    BITS,SDFFO               WAS IT BEING SENT       SA52971
         BZ    NOSDFFO                  NO, WE'RE OK            SA52971
         LA    R9,PRFCRCD               GET THIS RRN            SA52971
         SR    R10,R10                  SET 'LET ME KNOW'       SA52971
         BAL   R14,FINDHM03             GO SEE IF STILL BEING   SA52971
*                                         SENT                  SA52971
         LTR   R14,R14                  WAS MSG FOUND SENDING   SA52971
         BNM   REREAD                   NO, GO REREAD BUFFERS   SA52971
         TM    QCBFLAG,QCBPROC          IS THIS AN APPL PGM    SA63961
         BNO   NOTAPPL                  BR IF NOT AN APPL. PGM.SA63961
*        IF THE APPLICATION PROGRAM NEVER DOES A GET OR WAITS  SA63961
*        BETWEEN GETS FOR A COMPLETE ZONE, RP WILL NEVER MOVE  SA63961
*        THE MESSAGES ON THE REQCB OR IN EOMSAVE.  TO PREVENT  SA63961
*        045 ABENDS, WHEN A MESSAGE THAT IS UCRRENTLY BEING    SA63961
*        SENT (SDFFO ON) IS MORE THAN ONE AND ONEHALF ZONES    SA63961
*        BACK, RP WILL EITHER MOVE IT ANYWAY OR MARK IT        SA63961
*        SERVICED.  AT THIS TIME THE PROCESS QUEUE WILL BE     SA63961
*        MARKED AS STOP AND THE APPLICATION PROGRAM WILL BE    SA63961
*        GIVEN A RETURN CODE ON THE NEXT OPERATION, INDICATING SA63961
*        THAT THIS DCB MUST BE CLOSED AND REOPENED.            SA63961
         L     R1,AVTTOTNR              TOTAL RECORDS OR ADDR  @OS77388
*                                        FOR 1/4 OF DISK       @OS77388
         SRL   R1,BYTWO                 DIVIDE FOR 1/8         @OS77388
         L     R15,BOUNDS2              CURRENT ZONE BOUNDARY  @OS77388
         L     R14,PRFCRCD-1            CURRENT HEADER ADDRESS @OS77388
         LA    R14,AVTEZERO(R14)        CLEAR FOR COMPARE      @OS77388
         C     R14,AVTRADDR             POSSIBLE WRAP          @OS77388
         BNH   RETA                     NO, BRANCH             @OS77388
         L     R15,BOUNDS4              ADDR OF CANCEL WRAP ZON@OS77388
RETA     EQU   *                                               @OS77388
         SR    R15,R1                   NEW ZONE BOUNDARY      @OS77388
         CR    R14,R15                  IS MSG IN 'BAD ZONE'   @OS77008
         BH    NOTAPPL                  BR IF MSG OK           @OS77008
         NI    QCBFLAG,X'FF'-QCBSDFFO   RESET DSFFO TO ENABLE  @OS77008
*   THIS MSG TO BE MOVED IF NECESSARY                          @OS77008
         L     R14,QCBPREN              ADDR OF PROCESS ENTRY  @OS77008
         L     R14,TRMSTAT-IEDQTRM(,R14)   PEWA ADDR           SA63961
         NC    EOMSAVE+1-IEDQPEWA(3,R14),EOMSAVE+1-IEDQPEWA(R14) A63961
         BZ    REREAD                   IF NOT IN EOMSAVE      SA63961
*        TREAT AS IF THIS MSG WAS NOT BEING SENT - MOVE IT     SA63961
         L     R15,EOMSAVE-IEDQPEWA(,R14)  EOM BFR             SA63961
         ST    R15,BUFFERCN             EOM TO MARK SERVICED   @SA75126
*                                       R6=RECALLED HDR        @OS76987
         LA    R1,PRFCRCD-IEDQPRF(,R15)  ASSUME HDR            @OS76987
         TM    PRFSTAT1-IEDQPRF(R15),PRFNHDRN  IS IT A HDR     @OS76987
         BNO   HDR                      BR YES                 @OS76987
         LA    R1,PRFCHDR-IEDQPRF(,R15)   RESET HDR PTR        @OS76987
HDR      EQU   *                                               @OS76987
         TM    L'PRFCRCD-1(R1),CPBQTYPE   DISK HDR?            @OS76987
         BNZ   DISK                     BR IF YES              @OS76987
         MVC   AVTDOUBL+1(3),AVTEZERO(R1)  MOVE HDR PTR        @OS76987
         L     R15,AVTDOUBL             GET CORE Q PTR         @OS76987
         LA    R1,PRFCRCD-IEDQPRF(,R15)   POINT TO CORE COPY   @OS76987
DISK     EQU   *                                               @OS76987
*                                       R1=PTR TO ADDR OF      @OS76987
*                                        EOMSAVE HDR           @OS76987
         CLC   AVTEZERO(3,R1),PRFCRCD   IS THIS HDR TO BE      @OS76987
*                                           SERVICED           @OS76987
         BNE   REREAD                   BR IF NOT THIS ONE     SA63961
MKSRVCD  EQU   *                                               SA63961
*        IF THIS IS THE MSG IN EOMSAVE MARK IT SERVICED        SA63961
         XC    EOMSAVE-IEDQPEWA(4,R14),EOMSAVE-IEDQPEWA(R14)   SA63961
*                                       CLEAR EOMSAVE FOR QEU  SA63961
         OI    PEWAFLG-IEDQPEWA(R14),PEWASTOP                  @SA74235
*                                       SET ERROR FLG          @SA74235
         ST    RPREFIX,BUFFER           ORIG HDR BFR TO FREE   SA63961
*                                       POST A.P. ECB FOR      @SA64353
*                                       DISABLED TPROCESS ENTRY@SA64353
         MVC   PEWASAVE+TWENTY8-IEDQPEWA(4,R14),PEWAECBA-IEDQPEWA(R14)
*                                       MOVE ECB TO PARM LIST  @SA64353
         XC    PEWAECBA-IEDQPEWA(4,R14),PEWAECBA-IEDQPEWA(R14) @SA64353
*                                       CLEAR ECB              @SA64353
         NI    PEWAFLG-IEDQPEWA(R14),POSTOFFF  RESET POST FLAG @SA64353
         MVI   PEWASAVE+TWENTY8-IEDQPEWA(R14),ZERO CLEAR HI ORD@SA64353
         L     R15,PEPCBAD-IEDQPEWA(R14)  GET PCB ADDR         @SA64353
         L     R15,PCBPEBAD-IEDQPCB(R15)   GET PEB ADDR        @SA64353
         MVC   PEWASAVE+THIRTY2-IEDQPEWA(4,R14),PEBASCB-IEDQPEB(R15)
*                                       ASCB ADDR TO PARM LIST @SA64353
         L     R15,CVTPTR               CVT PTR                @SA64353
         LA    R15,CVTBRET-CVTMAP(R15)  ERROR RTN ADDR         @SA64353
         ST    R15,PEWASAVE+THIRTY6-IEDQPEWA(R14) TO PARM LIST @SA64353
         ST    R0,PEWASAVE+TWENTY4-IEDQPEWA(R14)  SAVE R0      @SA64353
         LA    R0,STOPQ                 DISABLE ENTRY CODE     @SA64353
         LA    R1,PEWASAVE+TWENTY8-IEDQPEWA(R14)  ADDR OF PARM @SA64353
*                                       LIST                   @SA64353
         NC    1(3,R1),1(R1)            IF PARM LIST ADDR      @ZM47770
         BZ    SKPOST                    EQUALS ZERO, BRANCH   @ZM47770
         POST  ,(0),MF=(E,(1))          POST A.P.              @SA64353
SKPOST   EQU   *                                               @ZM47770
         L     R0,PEWASAVE+TWENTY4-IEDQPEWA(R14)  RESTORE R0   @SA64353
*        ALL FIELDS NEEDED HAVE BEEN SET BY EW ALREADY         SA63961
         B     NOALTSP                  MARK THIS MSG SRVCD    SA63961
SETREL   EQU   *                                               @SA69999
*                                                             *@SA69999
*   THIS SUBROUTINE CONVERTS VALUE IN R14 TO A VALUE RELATIVE *@SA69999
*   TO ZERO.  THIS ALLOWS A COMPARISON OF A WRAPPED AND AN    *@SA69999
*   UNWRAPPED RELATIVE RECORD NUMBER.                         *@SA69999
*                                                             *@SA69999
         ST    R15,AVTDOUBL             SAVE FOR CALLER        @SA69999
         LR    R15,R14                  SET UP FOR DIVISION    @SA69999
         SR    R14,R14                  CLEAR LEFT MEMBER OF   @SA69999
*                                        REGISTER              @SA69999
         L     R0,AVTTOTNR              GET NUMBER OF RECORDS  @SA69999
*                                        IN REUS DATA SET      @SA69999
         SLL   R0,BYFOUR                MULTIPLY FOR FULL DISK @SA76478
*                                        SIZE                  @SA69999
         DR    R14,R0                   DO THE MODULO DIVIDE TO@SA69999
*                                        GET TRUE REL RECL NO  @SA69999
         L     R15,AVTDOUBL             RESTORE FOR CALLER     @SA69999
         BR    R1                       RETURN                 @SA69999
NOTAPPL  EQU   *                                               @SA69999
         OI    BITS,SDPREV              SET 'SENDING PREVIOUS   SA52971
         MVC   RESUME(3),SCBFEFO        SET TO RESUME SEARCH    SA52971
         B     OKMSG                    GO TREAT AS GOOD MSG    SA52971
         SPACE 1                                                SA52971
NOSDFFO  EQU   *                                                SA52971
         TM    BITS,LMSGN               WAS IT LAST             SA52971
         BZ    NOTLAST                  NO, SEE IT BAD          SA52971
         CLC   PRFCRCD(3),QCBLFEFO      IS IT STILL LAST        SA52971
         BNE   REREAD                   NO, GO REREAD IT TO     SA52971
*                                         OBTAIN CHANGED FEFO   SA52971
*                                         POINTER               SA52971
NOTLAST  EQU   *                                                SA52971
         MVC   RESUME,SCBFEFO           SAVE FEFO POINTER TO WHERE
*                                         TO RESUME SEARCH
         CLC   IDBADPTR,PRFCRCD         REREAD OF A SENDING MSG SA51783
         BE    SAVDATA                  BR YES                  SA51783
         SPACE
         L     R14,PRFCRCD-1            GET THIS RECORD NUMBER @SA69999
         LA    R14,AVTEZERO(,R14)       CLEAR HIGH-ORDER BYTE  @SA69999
         LA    R15,BOUNDS2              ADDRESS OF CANCEL ZONE @OS77388
         C     R14,AVTRADDR             PROBABLE WRAP          @SA69999
         BNH   RETB                     NO, BRANCH             @OS77388
         LA    R15,BOUNDS4              ADDR OF CANCEL WRAP ZON@OS77388
RETB     EQU   *                                               @OS77388
         C     R14,0(R15)               IS MSG IN 'BAD ZONE'   @OS77388
         BL    DLNKFEFO                 BR YES                 @SA69999
         MVC   AVTDOUBL+1(3),PRFXTRA    ASSUME MORE THAN 1 UNIT SA58992
         CLI   PRFNBUNT,ONE             ARE THERE ANY EXTRAS    SA58992
         BNE   PASTNTXT                 BR YES                  SA58992
         SPACE
         TM    PRFSTAT1,PRFNLSTN        LAST BUFFER             SA58992
         BZ    SETNOTSD                 BR YES                  SA58992
         SPACE
         MVC   AVTDOUBL+1(3),PRFNTXT    POINTER TO NEXT TEXT    SA58992
PASTNTXT EQU   *                                                SA58992
         L     R14,AVTDOUBL             GET VALUE OF XTRA OR   @SA69999
*                                        NTXT TO BE CHECKED    @SA69999
         LA    R14,AVTEZERO(,R14)       CLEAR HIGH-ORDER BYTE  @SA69999
         LA    R15,BOUNDS2              ADDRESS OF CANCEL ZONE @OS77388
         C     R14,AVTRADDR             PROBABLE WRAP          @SA69999
         BNH   RETC                     NO, BRANCH             @OS77388
         LA    R15,BOUNDS4              ADDR OF CANCEL WRAP ZON@OS77388
RETC     EQU   *                                               @OS77388
         C     R14,0(R15)               IS MSG IN 'BAD ZONE'   @OS77388
         BL    DLNKFEFO                 BR YES                 @SA69999
         SPACE
SETNOTSD EQU   *                                                SA58992
         NI    BITS,X'FF'-SDPREV        SET 'NOT SENDING PREVIOUSA52971
OKMSG    EQU   *                                                SA52971
         MVC   IDBADPTR,PRFCRCD         SAVE ID OF MSG THAT MIGHT
*                                         POINT TO A BAD MSG
SAVDATA  EQU   *                                                SA51783
*                                       SAVE DATA FLAGS         SA51783
         MVC   SCBMACR(ONE),DATFLAGS-IEDQDATA(RPREFIX)          SA51783
         MVC   SCBMACR+ONE(SEQLEN),SCBOSEQ SAVE SEQOUT NUMBER  @SA70208
         TM    BITS,LMSGN               LAST MSG ENCOUNTERED    SA51783
         BNO   REREAD                   BR NO                   SA51783
         SPACE
         MVC   QCBDATFL,SCBMACR         SAVE DATA FLAGS         SA51783
         MVC   QCBDATSQ,SCBMACR+ONE     SAVE SEQ OUT NUMBER     SA51783
REREAD   EQU   *                                                SA52971
         BAL   R14,RETBUF               FREE UP BUFFER
         B     HOLDOUT                  GO LOOK AT NEXT MSG     SA52971
*                                                               SA52971
DLNKFEFO EQU   *                                                SA52971
         CLC   QCBPFEFO(3),PRFCRCD      IS THIS START POINT     SA52971
         BNE   NOPFEFO                  NO, DON'T CHANGE        SA52971
         SPACE
EEPOST1  EQU   *                                                SA51783
         BAL   R14,BUFPOOL              GET UNIT TO POST TO FA  SA51783
         SPACE
         LA    R0,NEWPFEFO              ADDR OF SUBRTN TO WRITE SA51783
*                                       A CNCLD HDR IN A GOOD   SA51783
*                                       ZONE AND SET IT AS PFEFOSA51783
         LA    R1,WRITQCB               QCB TO POST ERB TO      SA51783
         BAL   R14,EEPOST               POST BFR TO IEDQFA WITH SA51783
*                                       EE PRI TO GET A CPB     SA51783
         L     RPREFIX,BUFFER           ADDR OF HDR JUST READ   SA51783
         BAL   R14,RETBUF               RETURN BFRS TO BFR RET  SA51783
         SPACE
         LA    R14,NOINT                SET RESUME ADDR WHEN    SA51783
         ST    R14,SAVE14               ERB COMES BACK          SA51783
         B     LOOP                     GO SERVICE ANOTHER TRM  SA51783
         SPACE
NOPFEFO  EQU   *                                                SA52971
         CLC   IDBADPTR,AVTFZERO        FOUND GOOD MSG YET      SA51783
         BNE   TSTPREVS                 BR YES                  SA51783
*                                       IF NOT THEN PFEFO MUST  SA51783
*                                       HAVE CHANGED .          SA51783
         BAL   R14,RETBUF               RETURN BFRS OF MSG READ SA51783
         SPACE
         B     NOINT                    START FROM PFEFO AGAIN  SA51783
         SPACE
TSTPREVS EQU   *                                                SA51783
         CLC   QCBPREVF(3),PRFCRCD      IS THIS IN SHUFFLE      SA52971
         BNE   NOPREVS                  NO, DON'T CHANGE        SA52971
         MVC   QCBPREVF(3),SCBFEFO      CHANGE SHUFFLE SPOT     SA52971
NOPREVS  EQU   *                                                SA52971
         CLC   QCBINTFF(3),PRFCRCD      FIRST HELD MESSAGE      SA51783
         BNE   NOINTFF                  BR NO                   SA51783
         MVC   QCBINTFF(3),SCBFEFO      UPDATE FIRST HELD       SA51783
NOINTFF  EQU   *                                                SA51783
         CLC   QCBFFEFO(3),PRFCRCD      HAS FFEFO BEEN          SA52971
*                                         UPDATED TO BAD MSG YET
         BNE   NOTIDBAD                   NO, FFEFO SAME AS WAS
*                                         YES, A SEND OPERATION
*                                           HAS ALREADY UPDATED
*                                           FFEFO WITH LINE
*                                           SCBFEFO FROM MSG
*                                           JUST SENT
         MVC   QCBFFEFO(3),SCBFEFO      REMOVE BAD MESSAGE      SA52971
*                                         FROM FEFO CHAIN
NOTIDBAD EQU   *                                                SA52971
         TM    BITS,LMSGN               IS THIS LAST MSG        SA52971
         BZ    FIXFEFO                  NO, NO NEED TO UPDATE   SA52971
         MVC   QCBLFEFO(3),IDBADPTR     MESSAGE THAT POINTED    SA52971
*                                         TO BAD MSG BECOMES    SA52971
*                                         NEW LAST MSG          SA52971
         MVC   QCBDATFL,SCBMACR         SAVE DATA FLAGS         SA51783
         MVC   QCBDATSQ,SCBMACR+ONE     SAVE SEQ OUT NUMBER     SA51783
FIXFEFO  EQU   *                                                SA52971
         LA    R9,IDBADPTR              GET PREV HDR ADDR       SA52971
         MVC   AVTDOUBL(3),SCBFEFO      MOVE NEXT HDR ADDR      SA52971
         NC    AVTDOUBL(3),AVTDOUBL     IS  THERE ONE           SA52971
         BNZ   NOSPEC                   YES, GO RESET IT        SA52971
         OI    AVTDOUBL+L'SCBFEFO-1,LASTNOFF SET SPECIAL        SA52971
*                                         'UPDATED' FLAG FOR FA SA52971
NOSPEC   EQU   *                                                SA52971
         LA    R10,AVTDOUBL             GET NEXT HDR ADDR       SA52971
         BAL   R14,FINDHM03             GO RESET SAVED FEFO PTR SA52971
*                                                               SA51783
* THE FEFO POINTER IN THE DATA RECORD OF THE MSG THAT POINTED   SA51783
* TO THIS BAD MSG MUST BE CHANGED.  IT SHOULD POINT TO THE MSG  SA51783
* POINTED TO BY THE BAD MSG, OR ZEROED IF IT IS LAST ON QUEUE.  SA51783
*                                                               SA51783
* IDBADPTR IS THE RECORD WHOSE DATA FIELD SHOULD BE CHANGED.    SA51783
* SCBFEFO HAS THE DATA FIELD OF THE BAD MSG JUST READ.          SA51783
* SCBSCHDR IS THE BAD MSG BEING REMOVED.                        SA51783
*                                                               SA51783
         TM    BITS,SDPREV              LAST GOOD MSG BEING SENTSA51783
         BNO   EEPOST2                  BR NO                   SA51783
         SPACE
         LA    R9,IDBADPTR              GET RRN OF LAST GOOD MSGSA51783
         SR    R10,R10                  SET NOT TO UPDATE FEFO  SA51783
         BAL   R14,FINDHM03             SEE IF STILL BEING SENT SA51783
         SPACE
         LTR   R14,R14                  STILL BEING SENT        SA51783
         BM    EEPOST2                  BR YES                  SA51783
         SPACE
         NI    BITS,X'FF'-SDPREV-SDFFO  TURN OFF BITS           SA51783
         CLC   QCBPREVF,IDBADPTR        GOOD MSG IN SHUFFLE SPOTSA61811
         BNE   NOTPREVF                 BR NO                   SA61811
         MVC   QCBPREVF,PRFCRCD         UPDATE SHUFFLE SPOT     SA61811
NOTPREVF EQU   *                                                SA61811
         CLC   QCBINTFF,IDBADPTR        GOOD MSG FIRST HELD     SA61811
         BNE   NOTINTFF                 BR NO                   SA61811
         MVC   QCBINTFF,PRFCRCD         UPDATE FIRST HELD       SA61811
NOTINTFF EQU   *                                                SA61811
         CLC   QCBFFEFO,IDBADPTR        GOOD MSG FIRST FEFO     SA61811
         BNE   NOTFFEFO                 BR NO                   SA61811
         MVC   QCBFFEFO,PRFCRCD         UPDATE FIRST FEFO       SA61811
NOTFFEFO EQU   *                                                SA61811
         MVC   AVTDOUBL+1(3),IDBADPTR   RE-READ GOOD MSG SINCE  SA51783
*                                       ITS DATA FIELDS HAVE    SA51783
*                                       CHANGED.                SA51783
         BAL   R14,RETBUF               FREE UP BAD MSG BFR     SA51783
         SPACE
         B     NOLFEFO                  BR TO RE-READ GOOD MSG  SA51783
         SPACE
EEPOST2  EQU   *                                                SA51783
         BAL   R14,BUFPOOL              REQUEST UNIT FROM FREEPOOL
*
         LA    R0,UPFEFO                ADDR OF THE SUBRTN TO   SA51783
*                                       UPDATE THE FEFO PTR OF  SA51783
*                                       THE LAST GOOD MSG FOUND SA51783
*                                       IN THE FEFO CHAIN       SA51783
         LA    R1,UNITQCB               QCB TO POST ERB TO      SA51783
         BAL   R14,EEPOST               POST BFR TO IEDQFA WITH SA51783
*                                       EE PRI TO GET A CPB     SA51783
         LA    R14,AFTERUPD             SET RESUME ADDR WHEN    SA51783
         ST    R14,SAVE14               ERB COMES BACK          SA51783
         B     LOOP                     GO SERVICE ANOTHER TRM  SA51783
         SPACE
AFTERUPD EQU   *                                                SA51783
         L     RPREFIX,BUFFER           GET BAD HEADER
GETALTD  EQU   *                                                SA52971
         LH    R1,PRFDEST               GET ORIGINAL DEST INDEX SA52971
         BAL   R14,CALLTNT              GET ORIGINAL DEST TERMINAL
*                                         TABLE ADDR TO R1
         LH    R1,TRMALTD-IEDQTRM(,R1)  GET ALT DEST INDEX
         STH   R1,ALTDESX               SAVE ALT DEST INDEX
         XC    BUFFERCN(4),BUFFERCN     CLEAR POINTER           SA51783
         TM    DATFLAGS-IEDQDATA(RPREFIX),(DATSENT+DATCNCLD) IS SA51783
*                                       MESSAGE CANCELLED OR    SA51783
*                                       FLAGGED SERVICED        SA51783
         BNZ   NOALTSP                  BR YES                  SA51783
*                                       NO, SEND TO ALT DEST    SA51783
         BAL   R14,BUFPOOL              GET EXTRA UNIT TO BE USED
*                                         TO MARK MSG SERVICED
*                                         TO RPREFIX
         L     R2,BUFFER                GET ADDR OF HEADER UNIT
         MVC   PRFLCB(PRFSHDR-PRFLCB),PRFLCB-IEDQPRF(R2) MOVE
*                                         PREFIX TO XTRA UNIT
         ST    RPREFIX,BUFFERCN         SAVE EXTRA UNIT ADDR
         MVC   PRFSRCE(3),SCBFEFO       PASS THE FEFO PTR        A47133
         MVC   PRFTQBCK+1(2),SCBOSEQ    PASS SEQ NO. TO FA
         NI    PRFSTAT1,X'FF'-(PRFNLSTN+PRFNHDRN) SET HDR-EOM   SA52971
         MVC   PRFTQBCK(1),SCBPRI       SET PRI QCB INDEX       SA52971
         LR    RPREFIX,R2               RESTORE BAD HEADER ADDR
         LH    R1,ALTDESX               GET ALT DEST INDEX
         LTR   R1,R1                    WAS ALT DEST SPECIFIED
         BZ    NOALTSP                    NO, NO ALT DEST
*                                         YES, ALTDEST SPECIFIED
         STH   R1,PRFDEST               CHANGE DEST TO ALTERNATE
         BAL   R14,CALLTNT              GET ALT DEST TERM TABLE ADDR
*                                         TO R1
         L     RQCBD,TRMDESTQ-1-IEDQTRM(,R1) GET ALT DEST QCB
         ST    RQCBD,DESTQCB            SAVE DEST QCB ADDR
         MVC   SCBPRI(1),QCBPRIPQ       SET PRI FROM QCB        SA52971
*
* POST THIS BUFFER TO DESTINATION QCB TO BE WRITTEN TO QUEUE.
* POST REUS ERB TO ITSELF AT LOWER PRIORITY SO REUS KNOWS WHEN
* BUFFER HAS BEEN WRITTEN.
*
PUTBUF   EQU   *
         OI    BITS,PUTBUFB             SET FLAG TO CAUSE MULTIPLE
*                                         BUFFERS POSTED BY 'WRITE'
         TM    QCBDSFLG-IEDQQCB(RQCBD),QCBDISK IS DEST Q=MO ONLY
         BNZ   DOWRITE                    NO, WRITE TO DISK
*                                         YES, WRITE TO CORE ONLY Q
         TM    SCBERR3,SCBLOSTN         WAS PREVIOUS WRITE OK
         BNO   DOWRITE                    YES, GO WRITE THIS BUF
*                                         NO, MAKE THIS WRITE
*                                           THE LAST ONE
         NI    BITS,X'FF'-PUTBUFB       DO NOT DO MULTIPLE
*                                         BUFFER POST
         NI    PRFSTAT1,X'FF'-PRFNLSTN  MARK THIS BUFFER AS LAST
DOWRITE  EQU   *
         BAL   R14,WRITE                POST BUFFER AND ERB
*
COPYLOOP EQU   *
         TM    SAVSTAT1,PRFNLSTN        WAS THAT THE LAST BUFFER
         BZ    SERVICED                   YES, LAST BUFFER WRITTEN
*                                         NO, MORE BUFFERS TO GO
         BAL   R14,GETBUF               GET NEXT BUFFER OF MSG
*                                         FROM SOURCE QCB
         B     PUTBUF                   GO SEND BUF TO ALT DEST Q
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
SERVICED EQU   *                        MSG SENT FROM SOURCE TO ALT
*                                         DEST QCB
         L     RPREFIX,LCBERBCH-1       GET ANY BUFFERS THAT MAY
         LA    RPREFIX,0(,RPREFIX)        STILL BE ON Q
         LTR   RPREFIX,RPREFIX          ANY BUFFERS STILL THERE
         BZ    NOFREE                     NO, NONE THERE
*                                         YES, STILL HAVE BUFFERS
NOALTSP  EQU   *                        NO ALT DEST SPECIFIED
         BAL   R14,RETBUF               PUT THEM BACK TO FREEPOOL
*
NOFREE   EQU   *
         NI    BITS,X'FF'-PUTBUFB       FORBID MULT POST OF BUFFERS
         TM    BITS,COPYBIT             REUS OR COPY LCB
         BO    CLEANCPY                   COPY, GO RETURN BUFFER
*                                         REUS, SET TO FLAG SERVICED
         L     RPREFIX,BUFFERCN         GET COPY OF HEADER BUFFER
         LTR   RPREFIX,RPREFIX          TO BE MARKED SERVICED   SA51783
         BZ    NOSRVCED                 NO, THEN AVOID IT       SA51783
         MVI   PRFPRI,PRIDKSRV          SET PRIORITY INTO BUFFER
         LR    RQCBD,RQCBSM             WRITE TO SOURCE MASTER QCB
         LA    R14,AVTDSIOB             POST BUFFER TO WRITE
         ST    R14,PRFQCBA-1              SERVICED TO IEDQFA
         BAL   R14,WRITCN               WRITE MESSAGE SERVICED BIT
NOSRVCED EQU   *                                                SA51783
         MVI   SAVSTAT1,AVTEZERO        CLEAR BOTH
         MVI   SCBERR3,AVTEZERO           STATUS BYTES
         B     HOLDOUT                  GO CHECK NEXT MESSAGE   SA52971
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*                       COPY SUBTASK
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         DS    0F                       WORD BOUNDARY
COPY     EQU   *-8                      COPY QCB
         DC    AL1(DSPMCPL4),AL3(*-1)   STCB
*
         L     RBASE,AVTIA              SET PROGRAM BASE
         LR    RPREFIX,R1               GET ADDR OF BUFFER POSTED
*                                         TO BE COPIED
         L     RLCB,PRFLCB-1            GET DESTINATION LCB ADDR
         L     RSCB,LCBSCBA-1           GET DESTINATION SCB ADDR
         L     RQCBD,SCBDESTQ-1         GET DESTINATION QCB ADDR
         MVI   BITS,COPYBIT             FLAG LCB AS BELONGING TO
*                                         COPY, CLEAR OTHER BITS
         ST    RPREFIX,AVTDOUBL         SAVE ORIGINAL BUFFER
         MVC   SAVCOPY(3),AVTDOUBL+1      POSTED TO COPY
         TM    SCBHBFNO,SCBREUS+SCBNREUS WAS SOURCE Q=MO
         BNZ   DISKRECL                   NO, RECALLED FROM DISK
*                                         YES, SOURCE Q=MO
         MVC   AVTDOUBL+1(3),SCBCCHDR   GET ORIG CORE Q HDR      S21903
*                                       ASSUME RECEIVE           S21903
         TM    LCBSTAT1,LCBSENDN        IS LCB SENDING
         BZ    RECCORE                    NO, RECEIVING
*                                         YES, SENDING
         MVC   AVTDOUBL+1(3),SCBSCHDR   SAVE SEND SIDE ADDR
*
RECCORE  EQU   *
         L     R2,AVTDOUBL                ADDR TO TEMPORARY REG
         MVC   PRFNTXT,PRFNTXT-IEDQPRF(R2) GET NTXT FROM CORE Q
*                                         TO MY COPY
         MVC   PRFCRCD,PRFTIC+1-IEDQPRF(R2) GET XTRA FROM CORE Q
*                                         TO MY COPY
DISKRECL EQU   *
         ST    RQCBD,DESTQCB            SAVE DESTINATION MASTER QCB
         ST    RQCBD,SOURCQCB
         LR    RQCBSM,RQCBD             FOR COPY, SET SOURCE=DEST QCB
         MVC   LCBRECAD,LCBERBCH        SAVE ERBCH FOR MULT ROUTE
         MVC   PRFLINK,SCBDEOB+1        SAVE DEOB FOR MULT ROUTE
         MVC   SAVRCQCB,LCBRCQCB        SAVE ADDR OF QCB TO RETURN
*                                         ORIGINAL BUFFER TO
*
* TO RECALL THE FIRST BUFFER, COPY MUST NOW FIND WHERE THAT
* BUFFER IS.
*
*                                         NO, RECALL FROM DISK
         L     R2,SCBTRANS-1            ONE RECALL ALREADY DONE TO
*                                         GET BUFFER POSTED TO COPY
*                                         SCBTRANS WAS SET THEN.
         TM    SCBHBFNO,SCBREUS+SCBNREUS IS MSG TO BE RECALLED
*                                         FROM CORE
         BNZ   TESTSEND                 NO, RECALL FROM DISK    SA52971
*                                         SINCE RECALL IS FROM DISK
         L     R2,SCBCCHDR-1            GUESS CORE RECALL
         TM    SCBERR3,SCBLOSTN         MSG WILL BE RECALLED FROM CORE
*                                       IS THE ENTIRE MSG AVAILABLE
         BO    CLEANCPY                   NO, PARTLY LOST, FORGET IT
*                                         YES, GOT ENTIRE MSG
TESTSEND EQU   *
         TM    LCBSTAT1,LCBSENDN        IS LCB SENDING
         BZ    OKCORE                     NO, ON RECEIVE SIDE OF MH
*                                         YES, SEND SIDE RECALL
         L     R2,SCBSCHDR-1            SEND SIDE RECALL ADDR
*                                         NOT IN SCBTRANS
OKCORE   EQU   *
         LA    R2,0(,R2)                CLEAR HIGH BYTE
         ST    R2,SCBDEOB               REQUEST FIRST BUFFER
*                                         BE RECALLED
         EX    R0,CLR                   CLEAR SCB FIELDS
         EX    R0,CLR1                  CLEAR SCB FIELDS
         BAL   R14,NOBUF                RECALL FIRST BUFFERS
*
         MVC   AVTDOUBL+1(3),SAVCOPY    GET ORIGINAL BUFFER POSTED
         L     R2,AVTDOUBL                TO COPY
         MVC   PRFDEST,PRFDEST-IEDQPRF(R2) MOVE DESTINATION FROM
         MVC   PRFLCB,PRFLCB-IEDQPRF(R2) ORIGINAL BUF TO RECALLED COPY
*
* THERE ARE NOW 2 COPIES OF FIRST BUFFER.  THE ORIGINAL BUFFER IS
* IN SAVCOPY WHERE IT STAYS UNTIL COPY IS DONE.  THE NEW BUFFER
* IN RPREFIX IS TO BE ASSIGNED A POSITION ON THE DESTINATION QUEUE
* AND WRITTEN TO THAT QUEUE.
*
         MVC   LCBSTART,SCBDNSEG        SAVE DNSEG BEFORE HM
*                                         CHANGES IT
         NI    PRFSTAT1,X'FF'-PRFDUPLN  TURN OFF DUP HEADER BIT
         LR    R15,RQCBD                CORE QUEUED BUF GOES TO DEST
*                                         QCB WITHOUT HM02 FIRST
         TM    QCBDSFLG-IEDQQCB(RQCBD),QCBDISK IS DEST Q=MO
         BZ    COREONLY                   YES, CORE ONLY
*                                         NO, DISK
         SR    R15,R15                  CLEAR WORK REG
         IC    R15,SCBPRI               GET PRIORITY LEVEL FROM SCB
         LA    R14,QCBPEND-QCBMEND      GET SIZE OF PRIORITY QCB
         MR    R15-1,R14                GET OFFSET TO PRI QVB
         LA    RQCBSP,IEDQPQCB-IEDQQCB(RQCBSM,R15) BUMP MASTER QCB
*                                         ADDR TO PRIORITY QCB
*
* CALL DESTINATION ASSIGNMENT TO GET NEW BUFFER ASSIGNED TO QUEUE.
*
* INPUT EXPECTED BY IEDQHM02 (DESTINATION ASSIGNEMENT)
* R8 - (RQCBSP) PRIORITY DESTINATION QCB
* R7 -(RQCBSM) MASTER DESTINATION QCB
* R6 - (RPREFIX) BUFFER
* R3 - (RSCB) SCB
* R4 - (RLCB) LCB
* R13- (RAVT) AVTSAVE2
* R14- RETURN ADDRESS
* R15- ENTRY ADDRESS TO IEDQHM02
*
         L     R15,AVTHM02              GET ADDR OF IEDQHM02
         BALR  R14,R15                  CALL DESTINATION ASSIGNEMNT
*
         MVC   AVTDOUBL(3),PRFNTXT      SAVE NEXT TEXT POINTER
         CLI   PRFNBUNT,ONE             SINGLE UNIT BUFFER
         BE    NOXTRA                     YES, NO XTRA UNITS
*                                         NO, HAS XTRA UNITS
         MVC   AVTDOUBL(3),PRFXTRA      SAVE XTRA UNIT POINTER
NOXTRA   EQU   *
         LA    R15,SCBMBSSA+4           ASSUME PERMANENT DISK   SA52971
         TM    QCBDSFLG-IEDQQCB(RQCBD),QCBREUS REUS DISK
         BZ    NON                        NO, NON-REUS
*                                         YES, REUS DISK
         LA    R15,SCBMBSSA             RESET FOR REUSABLE DISK SA52971
NON      EQU   *
         MVC   AVTEZERO(3,R15),AVTDOUBL SET NEXT RCD PTR        SA52971
         LA    R15,AVTDSIOB             POST BUFFER TO IEDQFA
COREONLY EQU   *
         MVI   PRFPRI,ED           PUT PRIORITY TO BUFFER
         ST    R15,PRFQCBA-1              TO BE WRITTEN TO DESTINATION
         BAL   R14,WRITCPY              PASS BUFFER AND ERB
*                                         TO DISPATCHER
         B     COPYLOOP                 MOVE REST OF MSG
*
CLEANCPY EQU   *                        MSG HAS BEEN COMPLETELY MOVED
         L     R15,SAVRCQCB             GET ADDR OF QCB TO RETURN
         ST    R15,LCBRCQCB               BUFFER TO RESTORED
         MVC   AVTDOUBL+5(3),SAVCOPY    GET ORIGINAL BUFFER
         L     RPREFIX,AVTDOUBL+4         POSTED TO COPY
         ST    R15,PRFQCBA-1            POST BUFFER TO DESIGNATED QCB
         MVC   LCBERBCH,LCBRECAD        RESTORE ERBCH FOR MULT ROUTE
         MVC   SCBDEOB+1(3),PRFLINK     RESTORE DEOB FOR MULT RT
         LR    R1,RPREFIX               PASS BUFFER TO BE POSTED
         BAL   R14,POSTCHAN             PUT BUFFER TO DISPATCHER
*
         LR    RQCBSM,RQCBD             PASS DESTINATION QCB
         BAL   R14,ACTSCHED             ACTIVATE SEND SCHEDULER
*
         LR    R12,R0                   RESTORE BASE REG        SA61768
         TM    SCBHBFNO,SCBREUS+SCBNREUS WAS SOURCE Q=MO
         BNZ   EXIT                       NO, DISK
*                                         YES, SOURCE IN CORE
         MVC   AVTDOUBL+1(3),PRFCRCD    GET ADDR OF CORE Q XTRA
*                                         SAVED FROM PRFTIC OF
*                                         ORIGINAL BUFFER
         CLI   PRFNBUNT,ONE             ANY XTRA UNITS
         BNE   GOCKCNT                  YES, GOT EXRA UNITS     SA52971
*                                         NO, NO XTRAS
         TM    PRFSTAT1,PRFNLSTN        IS THIS THE LAST BUFFER
         BZ    EXIT                       YES, SOURCE WAS A SINGLE
*                                           UNIT,SINGLE BUF MSG
*                                         NO, ANOTHER BUFFER
         MVC   AVTDOUBL+1(3),PRFNTXT    GET ADDR OF NEXT BUFFER
GOCKCNT  EQU   *
         L     RPREFIX,AVTDOUBL         GET ADDR OF 2ND UNIT OF MSG
         SR    R15,R15                  CLEAR WORK REG
         IC    R15,PRFTIC               GET MULT. ROUTE COUNT
         LTR   R15,R15                  IS MSG READY TO BE FREED
*                                         (IS USE COUNT ZERO)
         BZ    RETPOL                     YES, FREE CORE Q MSG
*                                         NO, MORE ROUTING TO GO
         BCTR  R15,0                    DECREMENT USE COUNT BY 1
         STC   R15,PRFTIC               SAVE DECREMENTED COUNTER
         B     EXIT                     FINISHED WITH CORE SOURCE
*                                         THIS TIME. MAYBE NEXT
*                                         TIME FREE CORE UNITS.
RETPOL   EQU   *                        USE COUNT IS ZERO, PASS
*                                         ALL BUFFERS OF THIS CORE
*                                         Q MSG TO AVAIL BUF POOL
         L     RPREFIX,AVTDOUBL+4       GET ADDR OF FIRST UNIT OF MSG
         LR    R2,RPREFIX               SET FOR LOOP ENTRY      SA52971
         IC    R15,PRFNBUNT             GET NO. UNITS IN 1ST BUF
         BCT   R15,DOUNIT               IS 1ST BUF MULTIUNIT
*                                         YES, BRANCH
*                                         NO, CONTINUE
         B     GORETBUF                 GO RETURN REST OF BUFS TO POOL
*
DOUNIT   EQU   *
         MVC   AVTDOUBL+1(3),PRFCRCD    GET 2ND UNIT OF 1ST BUF FROM
         L     R14,AVTDOUBL               SAVED TIC OF CORE QUEUED
*                                         ORIGINAL HEADER UNIT
         MVC   PRFNTXT-IEDQPRF(,R14),PRFNTXT HANG NEXT BUFFER OFF
*                                         NEW 'HEADER' BUFFER
         LR    RPREFIX,R14              SHIFT TO WHAT WAS
*                                         2ND UNIT FIRST BUFFER
         STC   R15,PRFNBUNT             SET NEW 'BUFFER' TO HAVE 1
*                                         LESS UNIT THAN ORIGINALLY
CLRLNK   XC    PRFLINK,PRFLINK          LINK NOT USED TO GO TO
*                                         2ND BUFFER
         LR    R2,RPREFIX               SAVE BUF ADDR
DECADDR  EQU   *                        WHEN RETURNING CORE Q UNITS,
*                                         DECREMENT CORE Q COUNT
         L     R15,AVTCADDR             GET ORIGINAL CORE Q COUNT
         SR    R1,R1                    CLEAR WORK REG
         IC    R1,PRFNBUNT              GET NO. OF UNITS IN BUFFER
         SR    R15,R1                   DECREMENT UNIT COUNT
         ST    R15,AVTCADDR             RESTORE DECREMENTED COUNT
         BAL   R14,RETBUF               FREE ENTIRE CORE Q MSG
*
GORETBUF EQU   *
         MVC   AVTDOUBL+1(3),PRFNTXT-IEDQPRF(R2) GET ADDR OF NEXT
         L     RPREFIX,AVTDOUBL           BUFFER
         LA    RPREFIX,0(,RPREFIX)      CLEAR HIGH BYTE
         LTR   RPREFIX,RPREFIX          IS THERE ANOTHER BUFFER
         BNZ   CLRLNK                     YES, ANOTHER BUFFER
*                                         NO, END OF LOOP
         B     EXIT                     QUIT COPY
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*                       SUBROUTINES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
CALLTNT  EQU   *                        CONVERT TERMNAME TABLE INDEX
*                                         TO ADDR OF TERMINAL TABLE
* INPUT - R1 HAS INDEX TO TERMNAME TABLE
*        R14 HAS RETURN ADDRESS
*        R15 IS USED FOR SCRATCH
*
* OUTPUT - R1 WILL HAVE ADDR OF TERMINAL TABLE
*
         N     R1,AVTCLRHI              CLEAR HIGH HALF WORD
         L     R15,AVTRNMPT             GET TNT ENTRY ADDRESS
         BR    R15                      CALL INDEX LOOKUP ROUTINE
*                                         WHO RETURNS TO R14,
*                                         ALREADY SET
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
POSTCHAN EQU   *
* INPUT - R1 HAS ADDR OF ELE TO BE ADDED TO POSTQ, A FIFO Q OF
*        ELEMENTS TO BE POSTED TO DISPATCHER AT EXIT TIME.
*        R14 HAS RETURN ADDRESS
*        R15 USED AS WORK REGISTER
*
         XC    RECBLINK-IEDQRECB(3,R1),RECBLINK-IEDQRECB(R1)
*                                       CLEAR LINK FIELD ON NEW ELE
*                                         TO BECOME LAST ON FIFO Q
         L     R15,POSTQ+4              GET ADDR OF LAST ELE (IF
*                                         ANY) ALREADY ON Q
         ST    R1,POSTQ+4               PUT NEW ELE AT END OF Q
         NC    POSTQ+1(3),POSTQ+1       WAS FIFO Q EMPTY
         BNZ   NOTEMPTY                   NO, SOMETHING ON Q
*                                         YES, Q WAS EMPTY
         LA    R15,POSTQ-(RECBLINK-1-IEDQRECB) SINCE NEW ELEMENTSA52971
*                                         IS ONLY ELEMENT       SA52971
*                                         ON Q, ADDR OF FIRST ELE
*                                         IS SAME AS ADDR OF LAST
NOTEMPTY EQU   *                        NEW ELE IS TO BE ADDED TO
*                                         ELEMENT(S) ALREADY ON Q
         MVC   RECBLINK-IEDQRECB(3,R15),POSTQ+5 PUT ADDR OF NEW ELE
*                                         INTO FORWARD POINTER OF
*                                         OLD LAST ELEMENT
         BR    R14                      RETURN TO MAIN CODE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
WRITE    EQU   *
* THIS ROUTINE IS TO PREPARE A BUFFER FOR WRITING, POST IT TO
* DESTINATION QCB (IEDQHM) TO BE WRITTEN.  IT ALSO POSTS THE ERB TO
* IGG019RP WITH A LOWER PRIORITY, SO THAT WHEN THE ERB RETURNS,
* REUS KNOWS THE BUFFER HAS BEEN SERVICED BY DISK I/O.
*
* INPUT - RPREFIX HAS ADDR OF BUFFER TO BE WRITTEN
*        RQCBD IS THE DESTINATION QCB TO RECEIVE THE BUFFER
*        SCBPRI HAS THE PRIORITY OF SOURCE QCB
*        R14 HAS RETURN ADDRESS
*        RLCB HAS LCB WHOSE ERB IS TO BE POSTED TO IGG019RP.
*        R0 IS USED AS SCRATCH REGISTER
*
* POST BUFFER TO POSTQ
*
         MVI   PRFPRI,ED                PUT PRIORITY TO BUFFER
         ST    RQCBD,PRFQCBA-1          PASS BUFFER TO DESTINATION QCB
WRITCN   EQU   *
         MVI   PRFTIC,TIC               MARK IT AS A BUFFER
         IC    R0,PRFLCB-1
         ST    RLCB,PRFLCB-1            PUT LCB ADDR INTO BUFFER
         STC   R0,PRFLCB-1
WRITCPY  EQU   *
         ST    R14,SAVE14               SAVE RETURN ADDRESS
         NI    PRFSTAT1,X'FF'-PRFDUPLN  NEVER WRITE A DUPLICATE
*                                         HEADER, REUS OR COPY
         MVC   SAVSTAT1(1),PRFSTAT1     SAVE STATUS OF BUFFER
         LR    R1,RPREFIX               PASS ADDR OF BUFFER AS
*                                         ELE TO BE ADDED TO POSTQ
         BAL   R14,POSTCHAN             POST BUFFER TO DEST QCB
*
         TM    BITS,PUTBUFB             IS MULTIPLE POST REQUESTED
         BZ    POSTE                      NO, GO POST ERB AND
*                                           WAIT FOR THIS ONE BUF
*                                         YES, TRY TO POST ANOTHER
*                                           BUFFER, IF AVAILABLE
         NC    LCBERBCH,LCBERBCH        IS ANOTHER BUFFER AVAILABLE
         BZ    POSTE                      NO, POST ERB AND WAIT
*                                         YES, STILL ANOTHER BUF
         BAL   R14,GETBUF               GO DELINK BUF FROM ERBCH
*
         L     R14,SAVE14               RESTORE RETURN ADDR
         B     WRITE                    GO POST NEW BUFFER
*
POSTE    EQU   *
         IC    R0,SCBDESTQ-1            SAVE HIGH BYTE
         ST    RQCBD,SCBDESTQ-1         PUT DEST QCB ADDR TO SCB
         STC   R0,SCBDESTQ-1            RESTORE HIGH BYTE
*
* POST ERB TO IGG019RP
*
         MVI   LCBERBPY,PRILNFRE        SET PRIORITY INTO ERB
*                                         (MUST BE LOWER THAN PRI
*                                         USED TO POST BUFFER)
         LA    R15,WRITQCB              PASS ADDR OF QCB TO GET
*                                         CONTROL WHEN ERB IS POSTED
         B     POSTE2                   GO POST ERB
*
         DS    0F
WRITQCB  EQU   *-8                      QCB
         DC    AL1(DSPMCPL4),AL3(*-1)   STCB TO GET LCB WHEN
*                                         WRITE IS DONE
         USING *,R15                                            SA52971
         BAL   R14,SETERB               RESET REGISTERS         SA52971
         DROP  R15                                              SA52971
*
         L     R14,SAVE14               RESTORE RETURN ADDR
         BR    R14                      RETURN TO MAIN ROUTINE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
READHEAD EQU   *
* TO READ THE FIRST BUFFER OF A MESSAGE, SET SCBDEOB TO ADDRESS OF
* HEADER DESIRED.  OTHER INPUT IN REGISTERS --
* RQCBSM - SOURCE MASTER QCB
* R14 - RETURN ADDRESS
* R15 - ADDRESS OF RECORD TO BE READ
*
         LA    R15,AVTEZERO(,R15)       SET TO GET BEGINNING OF SA52971
*                                         BUFFER                SA52971
         ST    R15,SCBDEOB              PASS ADDR OF RECORD
*                                         TO BE READ
         MVI   LCBCHAIN,LCBBFRSZ
         BAL   R1,ERBCT                 SET ERBCT TO DCBBUFOU
*
         MVI   LCBSTAT1,LCBRCLLN+LCBRECVN SET FOR RETRIEVE
*                                         TO READ ENTIRE BUFFER(S)
         IC    R0,SCBDESTQ-1            SAVE HIGH BYTE
         ST    RQCBSM,SCBDESTQ-1        PASS ADDR OF SOURCE MASTER
*                                         QCB TO BE READ FROM
         STC   R0,SCBDESTQ-1            RESTORE HIGH BYTE
         LR    R1,RQCBSP                GET THIS PRI LVL        SA52971
         LA    R0,QCBMSIZE(,RQCBSM)     GET FIRST PRI LVL       SA52971
         SR    R1,R0                    GET OFFSET              SA52971
         SR    R0,R0                    ZERO DIVIDE REG         SA52971
         LA    R15,QCBPSIZE             GET PRI LVL SIZE        SA52971
         DR    R1-1,R15                 DIVIDE FOR INDEX        SA52971
         STC   R1,SCBPRI                SET PRI LVL INDEX       SA52971
         NI    SCBQTYPE,X'FF'-(SCBNREUS+SCBREUS+SCBCOREQ+AVTE80) CLEAR
*                                         TYPE OF Q INDICATOR
         MVC   LCBSTART,SCBDNSEG        SAVE DNSEG BEFORE READ
CLR      XC    SCBSRCE(L'SCBSRCE+L'SCBSIZE+L'SCBSTAT1+L'SCBXTRA),SCBSRCE
               E                        CLEAR SCB FIELDS
CLR1     XC    SCBNTXT(L'SCBNTXT+L'SCBCRCD+L'SCBCHDR),SCBNTXT ** S22024
*                                       CLEAR SCB FIELDS, SAVING
*                                         SCBOSEQ
         B     SKERBCT                  ERBCT ALREADY SET
*
NOBUF    EQU   *
         BAL   R1,ERBCT                 SET ERBCT TO DCBBUFOU
*
SKERBCT  EQU   *
         TM    BITS,COPYBIT             REUS OR COPY
         BO    HBFNOSET                   COPY, SKIP RESET HBFNO
*                                         REUS, SET HBFNO
         MVI   SCBHBFNO,SCBREUS         SET TO READ FROM REUS DISK
HBFNOSET EQU   *
         LA    R15,READONE              REQUEST ERB TO BE RETURNED
         ST    R15,LCBRCQCB               TO REUS QCB WHEN READ DONE
         MVC   SCBUNTCT,SCBDEOB         PASS UNIT COUNT
         BAL   R1,SWAP                  SWAP LCBSTART+SCBDNSEG
*
         MVC   1(3,R15),SCBSCHDR        SAVE SCHDR BEFORE READ
*                                         (R15 SET BY ROUTINE 'SWAP')
         XC    LCBERBST(L'LCBERBST+L'LCBERBCH),LCBERBST CLEAR
*                                         BOTH LCBERBST+LCBERBCH
*
* POST ERB TO DISK I/O TO REQUEST A READ OF BUFFERS BY IEDQFA.
*
         LA    R15,AVTDSIOB             DISK I/O SUBTASK IS TO
*                                         RECEIVE THIS ERB
         B     POSTERB                  GO TPOST ERB
*
         DS    0F                       WORD BOUNDARY
READONE  EQU   *-8                      QCB
         DC    AL1(DSPMCPL4),AL3(*-1)   STCB THAT GETS CONTROL
*                                         WHEN ERB IS POSTED BACK
*                                         TO REUS WHEN READ IS DONE
         USING *,R15                                            SA52971
         BAL   R14,SETERB               PRESET REGISTERS        SA52971
         DROP  R15                                              SA52971
*
         LA    RPREFIX,0(,RPREFIX)      CLEAR HIGH BYTE
         LTR   RPREFIX,RPREFIX          WAS A BUFFER READ
         BZ    READEROR                   NO, NO BUFFER READ
*                                         YES, A BUFFER WAS READ
         TM    LCBERBST,LCBRDERR        WAS RIGHT BUFFER READ
         BO    READEROR                   NO, READ ERROR
*                                         YES, GOT GOOD BUFFER
         BAL   R1,SWAP                  SWAP LCBSTART+SCBDNSEG
*
         MVC   SCBSCHDR,1(R15)          RESTORE SCHDR AFTER READ
*                                         (R15 SET BY ROUTINE 'SWAP')
         L     R14,SAVE14               RESTORE ORIGINAL RETURN ADDR
         TM    PRFSTAT1,PRFNHDRN        IS THIS A HEADER
         BO    GOTBUF                     NO, NOT HEADER
*                                         YES,IT IS A HEADER
         TM    BITS,COPYBIT             REUS OR COPY
         BO    GOTBUF                     COPY
*                                         REUS
         MVC   SCBFEFO,DATFEFO-IEDQDATA(RPREFIX) GET FEFO POINTER
         B     GOTBUF                   GO TO LINK IN BUFFER     S21903
*
SWAP     EQU   *
         XC    LCBSTART,SCBDNSEG        SWAP LCBSTART AND SCBDNSEG
         XC    SCBDNSEG,LCBSTART
         XC    LCBSTART,SCBDNSEG        SWAP LCBSTART AND SCBDNSEG
         LA    R15,SAVSCHDR             GET ADDR OF A PLACE WHERE
*                                         TO SAVE SCBSCHDR
         TM    BITS,COPYBIT             REUS OR COPY
         BCR   8,R1                       REUS, GO IT;  RETURN  SA52971
*                                         COPY                  SA52971
         MVC   AVTDOUBL+1(3),SAVCOPY    GET ADDR OF BUF POSTED TO COPY
         L     R15,AVTDOUBL               TO USE ITS FIRST WORD AS
*                                         A PLACE TO SAVE SCBSCHDR
         BR    R1                       RETURN TO MAIN CODE
*
ERBCT    EQU   *
         LA    R0,DUMBUFOU              SET DEFAULT BUFOUT      OX02207
         TM    BITS,COPYBIT             REUS OR COPY
         BO    NOSETDCB                   COPY, DCB ADDR ALREADY SET
*                                         REUS, SET DCB ADDR
         MVC   LCBDCBPT+1(L'QCBDCBAD),QCBDCBAD SET DCB ADDRESS  OX02207
NOSETDCB EQU   *
         STH   R0,LCBERBCT              REQUEST DEFAULT NO. BUFS
         BR    R1                       RETURN TO MAIN ROUTINE
*
READEROR EQU   *
         LA    R15,ABEND2               PASS SUBCODE FOR LOGICAL
*                                         READ ERROR FROM REUS/COPY
         BAL   R14,AVTABEND             ABEND SYSTEM 045
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
GETBUF   EQU   *
* TO GET A NON-FIRST BUFFER FROM AN LCB.  IF ONE IS NOT THERE, POST
* ERB TO GET BUFFER(S) READ.
*
* INPUT - R14 HAS RETURN ADDRESS
*        RQCBSM HAS SOURCE MASTER QCB ADDR
*
* OUTPUT - RPREFIX HAS ADDR OF BUFFER
*
         L     RPREFIX,LCBERBCH-1       GET BUFFER, IF ANY
         LA    RPREFIX,0(,RPREFIX)      CLEAR HIGH BYTE
         LTR   RPREFIX,RPREFIX          IS BUFFER AVAILABLE
         BZ    NOBUF                      NO, GO READ BUFFERS
*                                         YES, GOT ONE
GOTBUF   EQU   *
         ST    RPREFIX,BUFFER           SAVE BUFFER ADDR
         MVC   LCBERBCH,PRFLINK         HANG NEXT BUFFER IN CHAIN
*                                         OFF LCB
         BR    R14                      RETURN TO CALLER WITH
*                                         BUFFER IN RPREFIX
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
BUFPOOL  EQU   *
* REQUEST A BUFFER (SINGLE UNIT) FROM THE AVAILABLE BUFFER POOL.
* THIS UNIT MAY BE NEEDED TO EITHER WRITE A CANCELLED HEADER TO
* AN UNUSED PRI QCB, OR TO WRITE A MESSAGE SERVICED FLAG,
* OR TO UPDATE A FEFO POINTER
*
* OUTPUT - ADDR OF BUFFER UNIT IS RETURNED IN RPREFIX.
*
* TEMPORARILY SAVE 'BUFFER' AND 'LCBERBCH'                      SA51783
*                                                               SA51783
         MVC   BUFFERCN+1(3),BUFFER+1   SAVE ADDRESS OF BAD     SA51783
*                                       HEADER JUST READ        SA51783
         MVC   DESTQCB+1(3),LCBERBCH    SAVE ADDR OF 2ND BFR OF SA51783
*                                       BAD MSG ALREADY READ    SA51783
         L     RPREFIX,AVTBFREB         GET A UNIT FROM AVAILABLE
         LA    RPREFIX,0(,RPREFIX)        BUFFER POOL
         LTR   RPREFIX,RPREFIX          WAS A BUFFER AVAILABLE
         BNZ   GOTBUFU                    YES, A BUFFER UNIT IS READY
*                                         NO, UNIT POOL IS EMPTY
*
* REUS NEEDS A BUFFER UNIT.  POST ERB TO AVAILABLE BUFFER Q TO
* REQUEST A BUFFER UNIT BE RETURNED TO REUS.
*
         LA    R15,X0101                REQUEST ONE SINGLE UNIT BUF
         STH   R15,LCBERBCT               FROM AVAILABLE BUF SUBTASK
*
* LCBERBCT IS A 2 BYTE FIELD.  THE UPPER BYTE IS THE NUMBER OF
* BUFFERS REQUESTED.  THE LOWER BYTE IS THE NUMBER OF UNITS PER
* BUFFER TO BE BUILT.
*
         LA    R15,UNITQCB              GET ADDR OF QCB TO GET
         ST    R15,LCBRCQCB             CONTROL WHEN UNIT IS
*                                         PASSED BACK TO REUS
         OI    LCBERBST,LCBPRCPG        ERB TO BE POSTED TO QCB
*                                         IN LCBRCQCB
         LA    R15,AVTBFREB             GET ADDR OF BUFFER REQUEST
POSTERB  EQU   *
         ST    R14,SAVE14               SAVE RETURN ADDR
         MVI   LCBERBPY,PRIINTRQ        SET PRIORITY INTO ERB
POSTE2   EQU   *
         ST    R15,LCBERBQB-1           SET QCB TO POST ERB TO
         LA    R1,LCBERB                PASS ADDR OF ERB TO POSTQ
         BAL   R14,POSTCHAN             HANG ERB ONTO POSTQ TO GO
*                                         TO DISPATCHER AT EXIT
         B     LOOP                     GO SERVICE ANOTHER TERMINAL
*
         DS    0F
UNITQCB  EQU   *-8                      QCB TO RECEIVE UNIT FROM
         DC    AL1(DSPMCPL4),AL3(*-1)     AVAIL BUF POOL
*
         USING *,R15                                            SA52971
         BAL   R14,SETERB               PRESET REGS             SA52971
         DROP  R15                                              SA52971
*
*
* 'SETERB' WILL CLOBBER 'BUFFER' AND SET RPREFIX TO NEW EMPTY UNIT
* FROM FREEPOOL.
* RESTORE 'BUFFER' AND 'LCBERBCH' FROM THEIR TEMPORARY HIDING PLACE.
*
         MVC   BUFFER+1(3),BUFFERCN+1   RESTORE ADDR OF BAD HEADER
         MVC   LCBERBCH,DESTQCB+1       RESTORE ADDR OF 2ND BUFFER
*                                         OF BAD MSG ALREADY READ
         L     R14,SAVE14               RESTORE RETURN ADDR
         BR    R14                      RETURN TO MAIN ROUTINE
*                                         TO CALLER
*
GOTBUFU  EQU   *                        REUS REMOVED UNIT FROM POOL
         MVC   AVTBFREB+1(3),PRFLINK    LEAVE OTHER UNITS IN POOL
         LH    R15,AVTAVFCT             GET COUNT OF AVAILABLE UNITS
         N     R15,AVTCLRHI             FORCE POSITIVE
         BCTR  R15,0                    DECREMENT COUNT BY ONE
         STH   R15,AVTAVFCT             RESTORE NEW COUNT
         MVI   PRFNBUNT,ONE             SET TO SINGLE UNIT BUFFER
         XC    PRFTIC+1(3),PRFTIC+1     CLEAR XTRA UNIT ADDR
         BR    R14                      RETURN TO MAIN CODE
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
FINDHM03 EQU   *
* IS THE ONLY MSG ON THIS PRIORITY QCB BEING SENT, IF SO GET SCB TO R2
* IEDQHM03 EXPECTS CERTAIN REGISTERS TO BE PRESET -
*        R13   AVTSAVE2
*        R7    MASTER QCB
*        R8    PRIORITY QCB
*        R9    ADDR OF PREVIOUS MESSAGE HEADER                  SA52971
*        R10   IN NON-ZERO, ADDR OF THING TO GO INTO DATFEFO    SA52971
*              IF ZERO, REQUEST TO KNOW IF MESSAGE IN R9 BEING  SA52971
*                SENT                                           SA52971
*        R14   RETURN ADDR
*        R15   ENTRY TO IEDQHM03
*
         L     R15,AVTHM02              THE ADDRESS OF HM03 IS IN
         SH    R15,AVTHA4                 THE WORD JUST PRECEEDING
         L     R15,0(,R15)                THE ENTRY TO HM02
         BR    R15                      GO TO HM03              SA52971
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
ACTSCHED EQU   *
* USING COMMON CODE IN IEDQHM, ACTIVATE SCHEDULER
* RQCBSM HAS ADDR OF MASTER QCB.
*
         TM    QCBDSFLG,QCBTSQ         TSO OR MIXED DEST QCB     S22029
         BZ    GETHM                   NO GET IEDQHM FROM QCB    S22029
         L     R15,AVTTSOPT            GET V(IEDQHM) FROM        S22029
         L     R15,TSIDEST-IEDQTSI(R15) TSINPUT QCB              S22029
         B     FOUNDHM                 IEDQHM NOW FOUND          S22029
GETHM    EQU   *                                                 S22029
         L     R15,QCBSTCHN-1           GET FIRST STCB ON DEST QCB
         CLI   0(R15),DSPMCPL6          IS IEDQHM THERE
         BE    FOUNDHM                    YES, V(IEDQHM) IN R15
*                                         NO, HM MUST BE IN NEXT WORD
         L     R15,QCBSLINK-1           GET V(IEDQHM) IN R15
FOUNDHM  EQU   *
         LR    R0,R12                   SAVE BASE REG           SA61768
         LA    R12,HMBASE(,R15)         SET HM BASE 6 PAST V(HM)
         L     R15,0(,R15)              1ST WORD OF HM HAS ADDR OF
*                                       SPECIAL ENTRY POINT
         BR    R15                      GO TELL HM TO ACTIVATE
*                                       SEND SCHEDULER
*
*                                         HM RETURNS TO R14,ALREADY
*                                         SET BY 'BAL' IN MAIN CODE
*        LR    R12,R0                   MAIN CODE MUST DO THIS  SA61768
*        IMMEDIATELY UPON RETURN                                SA61768
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
RETBUF   EQU   *                        RETURN BUFFER TO AVAILABLE
*                                         BUFFER POOL
* INPUT - RPREFIX HAS ADDR OF BUFFER TO BE RETURNED.
*        R14 HAS RETURN ADDRESS
*
* OUTPUT - THE BUFFER IS ENQUEUED ONTO 'POSTQ' TO BE POSTED TO
*        BUFFER RETURN AT EXIT TIME.
*        R15 AND R1 USED AS WORK REGS.
*
         LA    R15,AVTBFRTB             GET ADDR OF BUFFER RETURN QCB
         ST    R15,PRFQCBA-1              TO 1ST WORD OF BUFFER
         MVI   PRFPRI,PRIBFRTB          SET PRIORITY FOR RETURNING
*                                         A BUFFER
         LR    R1,RPREFIX               PASS ADDR OF BUFFER TO
*                                         TO BE POSTED TO DISPATCHER
         ST    R14,SAVE14               PRESERVE RETURN ADDR
         L     RPREFIX,PRFLINK-1        GET ADDR OF NEXT BUF, IF ANY
         BAL   R14,POSTCHAN             GO FREE BUF
*
         L     R14,SAVE14               RESTORE RETURN ADDR
         LA    RPREFIX,0(,RPREFIX)      CLEAR HIGH BYTE
         LTR   RPREFIX,RPREFIX          IS THERE A NTXT BUFFER
         BCR   Z,R14                      NO, RETURN TO MAIN ROUTINE
*                                         YES, STILL ANOTHER NTXT
         B     RETBUF                   GO POST BUF TO AVAIL BUF Q
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
SETERB   EQU   *
* AT CERTAIN ENTRY POINTS, THIS ROUTINE IS CALLED TO PRESET CERTAIN
* REGISTERS.  R11 ALREADY POINTS TO DISPATCHER.  RBASE IS PROG BASE.
*
* INPUT - R1 IS THE ELE POSTED TO REUS BY DISPATCHER, THE ERB
*        R14 IS RETURN ADDRESS                                  SA52971
         L     RBASE,AVTIA              SET PROGRAM BASE
         SH    R1,ERBFS                 BACK UP FROM ERB TO LCB
         MVC   BUFFER+1-IEDQLCB(3,R1),LCBERBCH-IEDQLCB(R1) GET
*                                         BUFFER RETURNED
*                                         ON ERB
         LR    RLCB,R1                  SET LCB BASE
         LM    RPREFIX,RQCBD,BUFFER     SET SEVERAL REGISTERS
*                                         RPREFIX
*                                         RQCBSM
*                                         RQCBSP
*                                         RQCBD
         L     RSCB,LCBSCBA-1           SET SCB BASE
         BR    R14                      RETURN                  SA52971
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
WRTOP    EQU   *                                                SA52971
         TIME  DEC                      GET TIME                SA52971
         ST    R0,TIME                  STORE TIME IN WORKAREA  SA52971
         UNPK  TIME(UTLEN),TIME(PTLEN)  UNPACK THE TIME         SA52971
         LH    RTIME,TIME+4             MOVE SECONDS            SA52971
         STH   RTIME,TIME+6               TO RIGHT              SA52971
         LH    RTIME,TIME+2             PICK UP MINUTES         SA52971
         STC   RTIME,TIME+4             STORE SECOND BYTE       SA52971
         SRL   RTIME,BYTELEN            SHIFT AND               SA52971
         STC   RTIME,TIME+3             STORE FIRST BYTE        SA52971
         MVI   TIME+2,AVTEPER           STORE PERIODS           SA52971
         MVI   TIME+5,AVTEPER             IN TIME               SA52971
         LA    R1,MESSAGE1              GET MESSAGE ADDRESS     SA52971
         WTO   MF=(E,(1))               WRITE IT                SA52971
         BR    R14                      RETURN TO CALLER        SA52971
         EJECT
EEPOST   EQU   *                                                SA51783
         SPACE 3
****************************************************************SA51783
*                                                              *SA51783
* THIS SUBROUTINE IS USED TO SET UP THE FIELDS NECESSARY TO    *SA51783
* POST A BUFFER TO IEDQFA TO REQUEST A CPB.                    *SA51783
* R0 CONTAINS THE ADDRESS OF THE SUBROUTINE TO BE BRANCHED TO  *SA51783
* OUT OF IEDQFA WHEN A CPB HAS BEEN OBTAINED.                  *SA51783
* R1 CONTAINS THE ADDRESS OF THE QCB THAT THE ERB SHOULD BE    *SA51783
* POSTED TO WHEN THE SUBROUTINE POSTS THE ERB.                 *SA51783
*                                                              *SA51783
****************************************************************SA51783
         SPACE 3
         ST    R0,PRFTIC                PUT ADDR OF SUBRTN TO   SA51783
*                                       GET CONTROL IN THE BFR  SA51783
         MVI   PRFTIC,TIC               MARK IT AS A BUFFER     SA51783
         MVI   PRFPRI,PRIFEFO           PRIORITY TO GET A CPB   SA51783
         ST    RLCB,PRFLCB-1            PASS LCB ADDR           SA51783
         MVI   PRFNBUNT,ONE             SET AS SINGLE UNIT BFR  SA51783
         ST    R1,LCBERBQB-1            SET QCB FOR SUBROUTINE  SA51783
*                                       TO POST THE ERB TO      SA51783
         MVI   LCBERBPY,PRIINTRQ        SET PRIORITY FOR ERB    SA51783
         LA    R15,AVTDSIOB             ADDR OF DISK I/O QCB    SA51783
         ST    R15,PRFQCBA-1            STORE IN BUFFER         SA51783
         LR    R1,RPREFIX               PASS BUFFER AS ELEMENT  SA51783
         ST    R14,SAVE14               SAVE RETURN ADDR        SA51783
         BAL   R14,POSTCHAN             TPOST BFR TO DISPATCHER SA51783
         SPACE
         L     R14,SAVE14               RESTORE RETURN ADDR     SA51783
         BR    R14                      RETURN                  SA51783
         EJECT
NEWPFEFO EQU   *                                                SA51783
         SPACE 3
****************************************************************SA51783
*                                                              *SA51783
* THIS SUBROUTINE IS BRANCHED TO OUT OF IEDQFA AFTER A REQUEST *SA51783
* FOR A CPB BY THE REUSABILITY SUBTASK HAS BEEN FULFILLED.  IT *SA51783
* BUILDS THE CPB AND DATA FIELDS NECESSARY TO WRITE A          *SA51783
* CANCELLED MESSAGE AT THE DNHDR SLOT WHICH WE KNOW AT THIS    *SA51783
* TIME IS IN A GOOD ZONE.  THIS CANCELLED MESSAGE IS MADE      *SA51783
* PFEFO AND ITS FEFO PTR POINTS TO THE OLD PFEFO.  THEREFORE,  *SA51783
* WE HAVE INSURED THAT PFEFO IS IN A GOOD ZONE AND THAT THERE  *SA51783
* IS AT LEAST ONE MESSAGE ON THE QUEUE THAT IS IN A GOOD ZONE. *SA51783
* THIS FORCES LFEFO TO BE UPDATED TO A MESSAGE IN A GOOD ZONE  *SA51783
* IF NECESSARY.                                                *SA51783
* THIS SUBROUTINE ALSO POSTS THE ERB BACK TO THE QCB ALREADY   *SA51783
* SET BY THE REUSABILITY SUBTASK BEFORE THE EE POST.           *SA51783
* THE ERB IS POSTED IN ORDER TO GIVE CONTROL BACK TO           *SA51783
* REUSABILITY TO CONTINUE PROCESSING THE QUEUE.                *SA51783
* THE EE BUFFER IS THEN RETURNED TO BUFFER RETURN BY A BRANCH  *SA51783
* TO DSPPOSTR WITH REGISTER 14 SET TO THE RETURN ADDR IN       *SA51783
* IEDQFA TO ENQUEUE THE CPB.                                   *SA51783
*                                                              *SA51783
****************************************************************SA51783
         SPACE 3
         DROP  RBASE                    DROP BASE FOR 19RP      SA51783
         USING *,R15                    BASE FOR THIS SUBROUTINESA51783
         USING IEDQCPB,RCPB             CPB                     SA51783
         SPACE 3
****************************************************************SA51783
* INITIALIZE REGISTERS                                         *SA51783
****************************************************************SA51783
         SPACE
         L     RCPB,PRFTIC              ADDR OF CPB FROM IEDQFA SA51783
         L     RDAT,CPBXREAF            UNIT ADDR               SA51783
         L     RLCB,PRFLCB-1            LCB ADDR                SA51783
         L     RSCB,LCBSCBA-1           SCB ADDR                SA51783
         LM    RQCBSM,RQCBSP,SOURCQCB   MASTER AND PRI QCB      SA51783
         EJECT
****************************************************************SA51783
* BUILD A CANCELLED HEADER                                     *SA51783
****************************************************************SA51783
         SPACE
         DROP  RPREFIX                  DROP EE BFR POSTED TO FASA51783
         USING IEDQPRF,RDAT             CANCELLED HDR REG       SA51783
         SPACE
         ST    RLCB,PRFLCB-1            PUT LCB ADDR IN BUFFER  SA51783
         MVC   PRFPLQCB,SCBPRI          SET PRIORITY LEVEL      SA51783
         MVI   PRFTIC,TIC               MARK UNIT AS BUFFER     SA51783
*                                       CLEAR PREFIX            SA51783
         XC    PRFSRCE(PRFDEST-PRFSRCE),PRFSRCE                 SA51783
         MVC   PRFDEST,SOURCTNT         SET SAVED DEST TNT INDX SA51783
         OI    PRFSTAT1,PRFCNCLN        MARK MSG CANCELLED      SA51783
         LH    R10,AVTKEYLE             UNIT SIZE               SA51783
         STH   R10,PRFSIZE              SET PRFSIZE             SA51783
         LA    R9,AVTHDRSZ              HEADER SIZE             SA51783
         N     R10,AVTCLRHI             CLEAR HI HALF           SA51783
         SR    R10,R9                   GET AMOUNT OF DATA      SA51783
         MVI   PRFSHDR,CHAR             GET FILL CHARACTER      SA51783
         BCTR  R10,0                    ADJUST DATA SIZE FOR EX SA51783
         BCTR  R10,0                    ADJUST FOR 1ST CHAR DONESA51783
         EX    R10,FILL2                PUT FILL CHAR IN MSG    SA51783
         MVC   PRFCRCD,QCBDNHDR         SET CURRENT RCD NUMBER  SA51783
         MVC   PRFHQBCK,QCBQBACK        SET Q BACK POINTER      SA51783
         MVC   QCBQBACK,PRFCRCD         UPDATE Q BACK POINTER   SA51783
         MVC   QCBPQBCK,PRFCRCD         UPDATE PRI Q BACK PTR   SA51783
         MVC   QCBDNHDR,AVTRADDR+ONE    UPDATE NEXT HEADER SLOT SA51783
         MVC   PRFNHDR,QCBDNHDR         SET NEXT HEADER         SA51783
         L     R10,AVTRADDR             BUMP NEXT               SA51783
         LA    R10,INCR(,R10)           AVAILABLE RECORD        SA51783
         ST    R10,AVTRADDR             BY FOUR                 SA51783
         SPACE 3
****************************************************************SA51783
* BUILD DATA FIELDS                                            *SA51783
****************************************************************SA51783
         SPACE
         DROP  RDAT                     DROP CANCELLED HDR REG  SA51783
         USING IEDQDATA,RDAT            DATA FIELDS REG         SA51783
         SPACE
         MVI   DATFLAGS,DATCNCLD        MARK AS CANCELLED       SA51783
         MVC   DATFEFO,QCBPFEFO         POINT TO PREVIOUS PFEFO SA51783
         XC    DATSEQOT,DATSEQOT        ZERO SEQ OUT NUMBER     SA51783
         EJECT
****************************************************************SA51783
* BUILD CPB                                                    *SA51783
****************************************************************SA51783
         SPACE
         DROP  RDAT                     DROP DATA FIELDS REG    SA51783
         USING IEDQPRF,RDAT             CANCELLED HDR REG       SA51783
         SPACE
         MVC   CPBADDR+1(3),PRFCRCD     SET RECORD ADDR         SA51783
         MVI   CPBRDWR,CPBWRKC          SET WRITE KEY AND DATA  SA51783
         MVI   CPBXDWR,CPBWRC           SET WRITE DATA          SA51783
         SPACE
         MVC   QCBPFEFO,PRFCRCD         SET THIS AS PFEFO       SA51783
         SPACE 3
****************************************************************SA51783
* POST THE ERB BACK TO THE QCB ALREADY SET BY REUSABILITY      *SA51783
****************************************************************SA51783
         SPACE
         DROP  RDAT                     DROP CANCELLED HDR REG  SA51783
         USING IEDQPRF,RPREFIX          EE BFR POSTED TO FA     SA51783
         SPACE
         ST    R14,PRFQCBA-1            SAVE RETURN ADDR IN FA  SA51783
         LA    R1,LCBERB                SET ERB AS ELEMENT      SA51783
         BAL   R14,DSPPOSTR             POST ERB BACK TO REUS   SA51783
         SPACE
         L     R14,PRFQCBA-1            RESTORE FA'S RETURN ADDRSA51783
         SPACE 3
****************************************************************SA51783
* RETURN THE BUFFER POSTED WITH EE PRIORITY TO IEDQFA TO       *SA51783
* REQUEST A CPB TO BUFFER RETURN AND GO TO IEDQFA TO WRITE     *SA51783
* THE NEW CANCELLED HEADER TO DISK.                            *SA51783
****************************************************************SA51783
         SPACE
         MVI   PRFPRI,PRIBFRTB          SET RETURN BFR PRIORITY SA51783
         LA    R10,AVTBFRTB             BFR RETURN QCB ADDR     SA51783
         ST    R10,PRFQCBA-1            PUT IT IN BUFFER        SA51783
         LR    R1,RPREFIX               SET BUFFER AS ELEMENT   SA51783
         LR    R15,RCPB                 PASS CPB BACK TO IEDQFA SA51783
         B     DSPPOSTR                 POST BUFFER TO BUFFER   SA51783
*                                       RETURN AND RETURN TO    SA51783
*                                       IEDQFA ON REGISTER 14   SA51783
*                                       TO WRITE MSG TO DISK    SA51783
****************************************************************SA51783
* MOVE FILL CHARACTERS INTO CANCELLED HEADER                   *SA51783
****************************************************************SA51783
         SPACE
         DROP  RPREFIX                  DROP EE BFR POSTED TO FASA51783
         USING IEDQPRF,RDAT             CANCELLED HDR REG       SA51783
         SPACE
FILL2    MVC   PRFSHDR+ONE(AVTEZERO),PRFSHDR                    SA51783
         SPACE
         DROP  RCPB                     DROP CPB                SA51783
         DROP  RDAT                     DROP CANCELLED HDR REG  SA51783
         DROP  R15                      DROP SUBROUTINE BASE    SA51783
         EJECT
UPFEFO   EQU   *                                                SA51783
         SPACE 3
****************************************************************SA51783
*                                                              *SA51783
* THIS SUBROUTINE IS BRANCHED TO OUT OF IEDQFA AFTER A REQUEST *SA51783
* FOR A CPB BY THE REUSABILITY SUBTASK HAS BEEN FULFILLED.  IT *SA51783
* BUILDS THE CPB AND DATA FIELDS NECESSARY TO CHANGE THE FEFO  *SA51783
* POINTER IN THE DATA FIELDS OF THE MESSAGE THAT POINTS TO THE *SA51783
* BAD MESSAGE FOUND.  THE FEFO POINTER SHOULD POINT TO THE     *SA51783
* MESSAGE POINTED TO BY THE BAD MESSAGE OR ZERO IF IT IS LAST  *SA51783
* ON THE QUEUE.                                                *SA51783
* THIS SUBROUTINE ALSO POSTS THE ERB BACK TO THE QCB ALREADY   *SA51783
* SET BY THE REUSABILITY SUBTASK BEFORE THE EE POST.           *SA51783
* THE ERB IS POSTED IN ORDER TO GIVE CONTROL BACK TO           *SA51783
* REUSABILITY TO CONTINUE PROCESSING THE QUEUE.                *SA51783
* THE EE BUFFER IS THEN RETURNED TO BUFFER RETURN BY A BRANCH  *SA51783
* TO DSPPOSTR WITH REGISTER 14 SET TO THE RETURN ADDR IN       *SA51783
* IEDQFA TO ENQUEUE THE CPB.                                   *SA51783
*                                                              *SA51783
****************************************************************SA51783
         SPACE 3
         USING *,R15                    BASE FOR THIS SUBRNT    SA51783
         USING IEDQCPB,RCPB             CPB                     SA51783
         USING IEDQPRF,RPREFIX          EE BFR POSTED TO IEDQFA SA51783
         USING IEDQDATA,RDAT            DATA FIELDS             SA51783
         SPACE 3
****************************************************************SA51783
* INITIALIZE REGISTERS                                         *SA51783
****************************************************************SA51783
         SPACE
         L     RCPB,PRFTIC              ADDR OF CPB FROM IEDQFA SA51783
         L     RDAT,CPBXREAF            UNIT ADDR               SA51783
         L     RLCB,PRFLCB-1            LCB ADDR                SA51783
         L     RSCB,LCBSCBA-1           SCB ADDR                SA51783
         SPACE 3
****************************************************************SA51783
* BUILD CPB TO CHANGE DATFEFO                                  *SA51783
****************************************************************SA51783
         SPACE
         MVI   CPBRDWR,CPBWRC           WRITE DATA COMMAND      SA51783
         MVI   CPBXDWR,CPBNOPC          NOP COMMAND             SA51783
         MVC   CPBADDR+1(3),IDBADPTR    SET LAST GOOD MSG'S RRN SA51783
         EJECT
****************************************************************SA51783
* BUILD DATA FILEDS                                            *SA51783
****************************************************************SA51783
         SPACE
         MVC   DATFLAGS,SCBMACR         SET SAVED DATA FLAGS    SA51783
         MVC   DATSEQOT,SCBMACR+ONE     SET SAVED SEQ OUT NUM   SA51783
         MVC   DATFEFO,SCBFEFO          SET BAD MSG'S FEFO PTR  SA51783
         SPACE 3
****************************************************************SA51783
* POST THE ERB BACK TO THE QCB ALREADY SET BY REUSABILITY      *SA51783
****************************************************************SA51783
         SPACE
         ST    R14,PRFQCBA-1            SAVE RETURN ADDR IN FA  SA51783
         LA    R1,LCBERB                SET ERB AS ELEMENT      SA51783
         BAL   R14,DSPPOSTR             POST ERB BACK TO REUS   SA51783
         SPACE
         L     R14,PRFQCBA-1            RESTORE FA'S RETURN ADDRSA51783
         SPACE 3
****************************************************************SA51783
* RETURN THE BUFFER POSTED WITH EE PRIORITY TO IEDQFA TO       *SA51783
* REQUEST A CPB TO BUFFER RETURN AND GO TO IEDQFA TO UPDATE    *SA51783
* THE FEFO POINTER OF THE LAST GOOD MESSAGE.                   *SA51783
****************************************************************SA51783
         SPACE
         MVI   PRFPRI,PRIBFRTB          SET RETURN BFR PRIORITY SA51783
         LA    R10,AVTBFRTB             BFR RETURN QCB ADDR     SA51783
         ST    R10,PRFQCBA-1            PUT IT IN BUFFER        SA51783
         LR    R1,RPREFIX               SET BUFFER AS ELEMENT   SA51783
         LR    R15,RCPB                 PASS CPB BACK TO IEDQFA SA51783
         B     DSPPOSTR                 POST BUFFER TO BUFFER   SA51783
*                                       RETURN AND RETURN TO    SA51783
*                                       IEDQFA ON REGISTER 14   SA51783
*                                       TO WRITE DATA FIELDS    SA51783
         DROP  RDAT                     DROP DATA FIELDS BASE   SA51783
         DROP  RCPB                     DROP CPB BASE           SA51783
         DROP  R15                      DROP SUBROUTINE BASE    SA51783
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                     *
*                       CONSTANTS                                     *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
FILL     MVC   PRFSHDR+1(0),PRFSHDR     FILL TEXT OF CANCEL HEADER
ERBFS    DC    AL2(LCBERB-IEDQLCB)      OFFSET INTO LCB OF ERB
FLAG     DS    0X                       FLAG BITS
*                       BIT DEFINITIONS
RUFTN    EQU   X'40'                    REUS FIRST TIME SWITCH
*                                         NEXT ZONE READY FOR REUS
POSTQ    DC    2F'0'                    FIFO Q OF ELE TO BE DISPATCHED
LENTNT   DC    F'0'                     INDEX TO TERMNAME TABLE
BOUNDS3  DC    A(0)                     START OF 'CURRENT ZONE'
BOUNDS2  DC    A(0)                     START OF 'CANCEL XONE'
BOUNDS5  DC    A(0)                     START CURRENT ZONE WRAP@OS77388
BOUNDS4  DC    A(0)                     START CANCEL ZONE WRAP @OS77388
MESSAGE1 DS    0F                                               SA52971
         DC    H'32'                    MESSAGE LENGTH         @OS77826
         DC    X'8000'                  MCS FLAGS              @OY11984
         DC    C'IED159I REUS '         MESSAGE TEXT            SA52971
NAMETAG  DC    CL7' '                   REUS DESCRIPTOR         SA52971
TIME     DC    CL8' '                   TIME STAMP              SA52971
         DC    X'1000'                  DESCRIPTOR CODES       @OY11984
         DC    X'0100'                  ROUTING CODES          @OY11984
START    DC    C'STARTS'                REUS STARTED            SA52971
QUIT     DC    C'QUITS '                REUS ENDED              SA52971
FULL     DC    C'FULL  '                REUS FULL               SA52971
END      DC    C'ENDS  '                REUS ENDED              SA52971
BYTELEN  EQU   8                        SHIFT FACTOR FOR ONE BT SA52971
MLN      EQU   6                        MESSAGE TAG LENGTH      SA52971
UTLEN    EQU   7                        LENGTH OF TIME UNPACKED SA52971
PTLEN    EQU   4                        LENGTH OF TIME PACKED   SA52971
INCR     EQU   4                        TO BUMP AVTRADDR        SA51783
SEQLEN   EQU   2                        LENGTH OF SEQ OUT NUM   SA51783
TWENTY4  EQU   24                       OFFSET INTO PEWASAVE   @SA64353
TWENTY8  EQU   28                       OFFSET INTO PEWA SAVE  @SA64353
THIRTY2  EQU   32                       OFFSET INTO PEWASAVE   @SA64353
THIRTY6  EQU   36                       OFFSET INTO PEWASAVE   @SA64353
ZERO     EQU   X'00'                    CONSTANT               @SA64353
STOPQ    EQU   X'14'                    DISABLED ENTRY R.C.    @SA64353
*
*
*
         REUSPOOL 6                                             SA52971
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*                       DSECTS
*
         TAVTD ,                                                SA52971
         TSCBD
LASTNOFF EQU   X'04'                    SCBFEFO HAS BEEN FORCED SA52971
*                                         TO ZEROES BY REUS     SA52971
*                                         BECAUSE THE MESSAGE   SA52971
*                                         WHICH WAS LAST FEFO   SA52971
*                                         WAS COPIED BY REUS ANDSA52971
*                                         THIS ONE WAS FORCED TOSA52971
*                                         LAST                  SA52971
         TRECBD
         TTSID
         TTRMD
         TPRFD
         TDATAD
         TPRIOR
ED       EQU   PRIFEFO-1                POST BUFS TO DEST QCB
         TDISPD
         TTNTD
         TQCBD
         TPEWAD                                                SA63961
         DCBD  DSORG=TX
         EJECT
         TCPBD 3330                                             SA51783
         EJECT
         TLCBD
*
*                       WORKAREA IN LCB
         ORG   LCBSNSV                  ESTABLISH ADDRESSABILITY S21903
ALTDESX  DS    H                        INDEX TO ALT DEST
SAVSTAT1 DS    X                        PRFSTAT1 OF HEADER
BITS     DS    X                        FLAGS
*                       BIT DEFINITIONS
SDPREV   EQU   X'80'                    SENDING IDBADPTR        SA52971
SDFFO    EQU   X'40'                    SENDING MSG BEFORE READ SA52971
LMSGN    EQU   X'20'                    LAST MSG BEFORE READ    SA52971
FMSGN    EQU   X'10'                    FIRST FEFO MSG ENCOUNTERSA52971
COPYBIT  EQU   X'08'                    LCB BELONGS TO COPY
PUTBUFB  EQU   X'04'                    REQUEST MULTIBUFFER WRITE
*
SAVE14   DS    A                        RETURN ADDR FROM SUBRT
         DS    0A                       USED BY APPL PROG, NOT
*                                         AVAILABLE TO COPY
SAVSCHDR DS    A                        HIGH BYTE UNUSED, AL3 USED BY
*                                         REUS ONLY TO SAVE SCBSCHDR
BUFFER   DS    A                        ADDR OF BUFFER
SOURCQCB DS    A                        SOURCE MASTER QCB
SQCB     DS    A                        SOURCE PRIORITY QCB
DESTQCB  DS    A                        DEST MASTER QCB
RESUME   DS    AL3                      WHERE TO RESUME TESTING
IDBADPTR DS    AL3                      ID OF MSG THAT POINTED
*                                         TO BAD MSG
SOURCTNT DS    H                        INDEX TO SOURCE TERMNAME
*                                         TABLE ENTRY
BUFFERCN DS    A                        EXTRA BUFFER ADDR - USED
*                                         TO WRITE SERVICED
*
* NOTE -- IN REUS, SUBROUTINE 'BUFPOOL' WILL CLOBBER 'BUFFERCN'
* AND 'DESTQCB' WITH 'BUFFER' AND 'LCBERBCH' RESPECTIVELY, IF THE
* AVAILABLE BUFFER POOL IS EMPTY AND AN ERB MUST BE POSTED TO
* REQUEST AN EMPTY UNIT FROM THE BUFFER POOL.
*
* THE FOLLOWING WORDS, USED ONLY IN COPY, ARE NOT DEFINED FOR
* THE POOL OF DUMMY LCBS GENERATED FOR REUS.
*
SAVCOPY  EQU   IDBADPTR                 ORIG BUF POSTED TO COPY
SAVRCQCB EQU   BUFFERCN                 QCB TO RETURN BUF TO
         EJECT
CVTMAP   CVT   DSECT=YES                                       @SA64353
         EJECT
         TPCBD                                                 @SA64353
         EJECT
         TPEBD                                                 @SA64353
         END
