         TITLE 'IGG01931 SECOND LOAD OF TCAM MESSAGE QUEUES OPEN'
IGG01931 CSECT
*A-000000-999999                                               @Y02X6N0
         SPACE 3
*CHANGE-ACTIVITY = AS FOLLOWS:                                   S21903
******************** MICROFICHE FLAGS *********************** SUPT CODE
*A335000,363000,470000,516000,570000                             X01004
*C341000-342000                                                  X01004
*C088000                                                         Y01004
*A363000,409000,509000,512000,517000                             A41033
*D369000-370000,378000,410000                                    A41033
*A335000,363000,470000,516000,570000                             X01004
*C084000,341000-342000,542000-545000                             X01004
*C088000                                                         Y01004
*A002000                                                         S21903
*C002000                                                         S21903
*C003000,137000,202000,497000,523000,528000-531000               S21903
*C004000,019000,022000,028000,039000,040000,042000,088000        Y02027
*C228000,333000,470560                                           Y02027
*D085000                                                         Y02027
*A086300,086600,465400,466400,498500,516050                      Y02027
*C004000,230000,374000,470080-470280,470480,470680,487000      @Z30X8NM
*D470400,470560-470600,519000-523000,525000,527000-531000      @Z30X8NM
*A302000,470020,517500,526000,570500                           @Z40X9NG
*C004000,303000-363400,450000-465000,468000-470000             @Z40X9NG
*C570700-570910                                                @OZ26164
* DUMMY APAR                                                   @OZ27328
         EJECT                                                 @Z40X9NG
***********************************************************************
*                                                                     *
*MODULE-NAME = IGG01931                                          S21903
*                                                                S21903
*DESCRIPTIVE-NAME = SECOND LOAD OF TCAM MESSAGE QUEUES OPEN      S21903
*                                                                S21903
*COPYRIGHTS = 'NONE'                                             S21903
*                                                                S21903
*STATUS - CHANGE LEVEL 9                                       @Z40X9NG
*                                                                     *
*FUNCTION/OPERATION - THIS ROUTINE COMPLETES INITIALIZATION OF        *
*   THE DEB EXTENTS AND COMPUTES VARIOUS TOTALS REQUIRED BY           *
*   EXCP DRIVER.  IN ADDITION THIS ROUTINE BUILDS AND INITIALIZES     *
*   ALL INPUT/OUTPUT BLOCKS, ONE PER DEB EXTENT, REQUIRED FOR         *
*   DISK OPERATION.                                                   *
*                                                                     *
*ENTRY POINTS - THIS ROUTINE IS ENTERED AT IGG01931 VIA AN XCTL       *
*   FROM AN I/O SUPPORT MOULE OR FROM ANOTHER ACCESS METHOD'S         *
*   OPEN EXECUTOR.  IT MAY ALSO BE RE-ENTERED FROM THE RELOOP         *
*   PORTION OF THIS ROUTINE IF IT DETERMINES THAT THERE IS            *
*   ANOTHER DATA CONTROL BLOCK TO BE OPENED.                          *
*                                                                     *
*INPUT - THE REGISTER'S 5,6,7, AND 8 ARE THE INPUT AS FOLLOWS,        *
*   5 - THE ADDRESS OF THE WTG TABLE PREFIX                      Y02027
*   6  - THE ADDRESS OF THE BEGINNING OF THE WHERE-TO-GO TABLE        *
*   7 - THE ADDRESS OF THE COPY OF THE CURRENT DCB               Y02027
*    8 - THE ADDRESS OF THE CURRENT EXECUTOR'S ENTRY IN THE           *
*    WHERE-TO-GO TABLE.                                               *
*                                                                     *
*OUTPUT - REGISTERS 7 AND 8 WILL BE POSITIONED AT THE NEXT ENTRIES    *
*   IN THE WHERE-TO-GO TABLE PREFIX AND THE WHERE-TO-GO TABLE    Y02027
*                                                                     *
*EXTERNAL ROUTINES - NONE                                             *
*                                                                     *
*EXITS - NORMAL                                                       *
*    THIS ROUTINE EXITS VIA AN XCTL TO THE MODULE IDENTIFIED BY       *
*    THE NEXT NON-ZERO ENTRY IN THE WHERE TO GO TABLE.                *
*                                                                     *
*      - ERROR                                                        *
*              XCTL TO IGG01933 WITH ERROR CODE IN AVTOPERT    @Z40X9NG
*                                                                     *
*TABLES/WORKAREAS - THE WHERE-TO-GO TABLE CONTAINS THE ID      @Z40X9NG
*   OF THE OPEN EXECUTORS. THE WHERE-TO-GO TABLE PREFIX        @Z40X9NG
*   CONTAINS THE ADDRESSES OF A COPY OF EACH DCB SPECIFIED       Y02027
*    IN THE OPEN MACRO INSTRUCTION.  THE OPEN WORK AREA               *
*   DESCRIBES THE CHARACTERISTICS AND UP TO 16 EXTENTS OF        Y02027
*    A DATA SET.  THE ADDRESS VECTOR TABLE IS A RESIDENT VECTOR       *
*    LIST USED IN ALL OPEN EXECUTORS                                  *
*                                                                     *
*ATTRIBUTES - THIS ROUTINE IS LOCATED IN LPALIB AND RUNS       @Z40X9NG
*    AS ENABLED, PRIVILEGED, AND RE-ENTRANT.                          *
***********************************************************************
         EJECT
*        REGISTER USAGE
*
RE       EQU   0                        WORK REGISTER
REG0     EQU   0                        REGISTER 0             @Z40X9NG
RF       EQU   1                        WORK REGISTER
REG1     EQU   1                        REGISTER 1             @Z40X9NG
RDCB     EQU   2                        ADDRESS OF THE CURRENT DCB
RTIOT    EQU   3                        WORK REGISTER
RWORK    EQU   3                        WORK REGISTER          @Z40X9NG
RCORE    EQU   4                        ADDRESS OF DCB WORK AREA
RPAR     EQU   5                        ADDRESS OF FIRST ENTRY IN
*                                         THE DCB PARAMETER LIST
RWTG     EQU   6                        ADDRESS OF THE WHERE-TO-GO
*                                         TABLE
RPARC    EQU   7                        ADDRESS OF THE CURRENT
*                                         ENTRY IN THE DCB
*                                         PARAMETER LIST
RWTGC    EQU   8                        ADDRESS OF THE CURRENT
*                                         ENTRY IN THE WTG TABLE
RAVT     EQU   9                        ADDRESS OF THE AVT
REXTENT  EQU   10                       DEB EXTENT             @Z40X9NG
RDEB     EQU   11                       WORK REGISTER
RBASE    EQU   12                       BASE OF THIS ROUTINE
RC       EQU   13                       WORK REGISTER
REG13    EQU   13                       REGISTER 13            @Z40X9NG
RD       EQU   14                       WORK REGISTER
REG14    EQU   14                       REGISTER 14            @Z40X9NG
RJ       EQU   15                       WORK REGISTER
REG15    EQU   15                       REGISTER 15            @Z40X9NG
*
         USING IEDQAVTD,RAVT            AVT DSECT
         USING IHADCB,RDCB              DCB DSECT
         USING FORCORE,RCORE            DSCB DSECT
         USING IEDQDEB,RDEB             DEB DSECT
         USING IEDQTCB,RC               TCB DSECT
         USING EXTENT,REXTENT           DEB EXTENT             @Z40X9NG
         EJECT                                                 @Z40X9NG
         BALR  RBASE,0                  ESTABLISH ADDRESSABILITY
         USING *,RBASE
*
IGG01931 IEDHJN RESTART                                          S22024
         L     RCORE,4(RWTGC)           ADDRESS OF THE OPEN WORK AREA
         L     RDCB,DXUDCBAD            GET THE ADDRESSES OF THE Y02027
*                                       CURRENT DCB              Y02027
         L     RAVT,DCBIOBAD            ADDRESS OF THE AVT
         L     RDEB,DCBDEBAD            LOAD THE BEGINNING ADDR  Y02027
*                                         OF THE DEB
         LA    RF,DEBPRFSZ              GET THE SIZE OF THE DEB
*                                         PREFIX
         SR    RDEB,RF                  SET THE DEB DSECT BASE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                 *
*        PREPARE FOR SCAN OF DSCB'S TO BUILD THE DEB EXTENTS      *
*                                                                 *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         L     RC,AVTTCB                ADDRESS OF THE TCB
         L     RC,TCBTIO-IEDQTCB(RC)    ADDRESS OF TIOT        @Z40X9NG
         AH    RC,DCBTIOT               ADD THE OFFSET TO THE DD
*                                         ENTRY IN THE TIOT
         SR    RE,RE                    CLEAR EXTENT
         SR    RDCB,RDCB                COUNT REGISTERS
         IC    RDCB,DSCNOEXT            LOAD THE NUMBER OF EXTENTS
*                                         ON THE FIRST VOLUME
         IC    RE,DEBNMEXT              THE TOTAL NUMBER OF EXTENTS
*                                         TO BE BUILT
         LA    REXTENT,DEBUCBAD         LOAD ADDRESS OF 1ST    @Z40X9NG
*                                         DEB EXTENT
         LA    RJ,12(RC)                POINTER TO THE FIRST UCB
*                                         ADDRESS WORD IN THE TIOT
         XC    SVCYLNO(FOUR),SVCYLNO    CLEAR FIELD FOR COUNT  @Z40X9NG
*                                         OF TOTAL CYLINDERS IN
*                                         THIS DATA SET
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                 *
*        BUILD FIRST/NEXT DEB EXTENT                              *
*                                                                 *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
NEXTDSCB EQU   *
         LA    RF,DSCEXTYP              SET POINTER TO FIRST DSCB
*                                         EXTENT FIELD ASSUMING A
*                                         FORMAT 1 DSCB
         LA    RD,THREE                 SET THE NUMBER OF EXTENTS
*                                         ON A FORMAT 1 DSCB
         SLR   RWORK,RWORK              CLEAR FORMAT 3 INDEX   @Z40X9NG
         CLI   DSCFMTID,FORM1           FORMAT 1 DSCB ?        @Z40X9NG
         BE    FORMAT1                  DSCB IS A FORMAT 1
         LA    RD,FORMAT3               SET THE NUMBER OF EXTENTS
*                                         ON A FORMAT 3 DSCB
         LA    RF,4(RCORE)              SET POINTER TO FIRST DSCB
*                                         EXTENT FIELD ASSUMING A
*                                         FORMAT 3 DSCB
         LA    RWORK,FORM3EXT           SET FORMAT 3 INDEX     @Z40X9NG
         B     CHECKCT                  GO CK NUMBER OF EXTENTS  S21903
*
FORMAT1  EQU   *
         LA    RJ,4(RJ)                 INCREMENT UCB POINTRE TO
*                                         THE NEXT UCB
         IC    RDCB,DSCNOEXT            LOAD THE NUMBER OF EXTENTS
*                                         ON THIS VOLUME
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                 *
*        SET THE POSSIBLE NUMBER OF EXTENTS EQUAL TO THE          *
*        ACTUAL REMAINING EXTENTS ON THIS VOLUME                  *
*                                                                 *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
CHECKCT  EQU   *
         CR    RD,RDCB                  COMPARE THE POSSIBLE NUMBER
*                                         OF EXTENTS AGAINST THE
*                                         NUMBER ACTUALLY ON VOLUME
         BNH   REDUCE                   BRANCH IF THE ACTUAL NUMBER
*                                         IS GREATER THAN THE INDEX
         LR    RD,RDCB                  LOAD WITH THE ACTUAL NUMBER
*                                         OF EXTENTS
REDUCE   SR    RDCB,RD                  REDUCE THE NUMBER OF
*                                         REMAINING EXTENTS
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                 *
*        BUILD THE NEXT EXTENT ON THE DEB                         *
*                                                                 *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         USING DEXTENT,RF               ADDRESSABILITY FOR     @Z40X9NG
*                                       DISK EXTENT            @Z40X9NG
MOVEUCB  EQU   *
         MVC   EXUCBAD,ONE(REG15)       MOVE UCB ADDR TO       @Z40X9NG
*                                         EXTENT
         MVI   EXFLAG1,EXWRTSK          ALLOW WRITE SEEKS      @Z40X9NG
         XC    EXBIN,EXBIN              CLEAR BIN VALUES       @Z40X9NG
         MVC   EXCCHH,DEXLLMT           MOVE THE BEGINNING AND @Z40X9NG
*                                         ENDING CCHH'S TO THE
*                                         EXTENT
         ST    RDCB,SVEXTENT            SAVE EXTENT COUNT      @Z40X9NG
         LH    RDCB,EXECYL              LOAD ENDING CYL ADDR   @Z40X9NG
*                                         ADDRESS
         SH    RDCB,EXSCYL              SUBTRACT THE STARTING  @Z40X9NG
*                                         CYLINDER ADDRESS
         LTR   RDCB,RDCB                ARE ALL TRACKS ON THE SAME
*                                         CYLINDER
         BNZ   TRACKCOM                 NO, COMPUTE THE TOTAL  @Z40X9NG
*                                         NUMBER OF TRACKS
         LA    RDCB,ONE(RDCB)           ADD ONE TO THE DIFFERENCE
         A     RDCB,SVCYLNO             BUMP COUNT BY THE      @Z40X9NG
*                                         TOTAL TO DATE
         ST    RDCB,SVCYLNO             SAVE NEW COUNT         @Z40X9NG
         LH    RDCB,EXETRK              LOAD THE ENDING TRACK  @Z40X9NG
*                                         ADDRESS
         SH    RDCB,EXSTRK              SUBTRACT STARTING ADDR @Z40X9NG
         LA    RDCB,ONE(RDCB)           BUMP TRACK COUNT BY 1  @Z40X9NG
         STH   RDCB,EXTRACKS            STORE IN DEB EXTENT    @Z40X9NG
         B     RESTORE                  RESET RDCB
STORECCT EQU   *
         LA    RDCB,ONE(RDCB)           BUMP COUNT BY 1        @Z40X9NG
         A     RDCB,SVCYLNO             BUMP COUNT BY THE      @Z40X9NG
*                                         TO DATE
         ST    RDCB,SVCYLNO             SAVE NEW CPOUNT        @Z40X9NG
         L     RDCB,SVEXTENT            RESTORE EXTENT COUNT   @Z40X9NG
RESTORE  EQU   *
         LA    RF,DEXLN(RF)             BUMP DSCB EXTENT PTR   @Z40X9NG
         BCT   RE,MOREXT                MORE EXTENTS, BR IF YES  S21903
*                                         EXTENTS TO BUILD
         B     NOMOEXT                  NO MORE EXTENTS TO BE BUILT
         EJECT
MOREXT   EQU   *
         LA    REXTENT,EXLEN(REXTENT)   POINT TO THE           @Z40X9NG
*                                       NEXT DEB EXTENT
         BCT   RD,SAMEDSCB              BRANCH IF THERE ARE MORE
*                                         EXTENTS ON THIS DSCB
         B     GETDCB                   NO MORE EXTENTS ON DSCB
SAMEDSCB EQU   *
         CLI   DEXTYPE,DEXFORM3         IS THE NEXT EXTENT THE @Z40X9NG
*                                       FIFTH EXTENT ON A FORMAT
*                                         3 DSCB
         BNE   MOVEUCB                  NOT FIFTH EXTENT, BUILD THE
*                                         NEXT EXTENT
         LA    RF,ONE(RF)               SKIP TO THE NEXT EXTENT
         B     MOVEUCB                  BUILD THE NEXT EXTENT
GETDCB   EQU   *
         L     RCORE,DSCCORE(RWORK)     LOAD ADDR OF THE NEXT  @Z40X9NG
*                                       DSCB
         B     NEXTDSCB                 BUILD FROM NEXT DSCB
*
         DROP  RF                       DROP ADDRESSABILITY OF @Z40X9NG
*                                       DISK EXTENT            @Z40X9NG
         EJECT
NOMOEXT  EQU   *
         L     RCORE,4(RWTGC)           RESET WORK AREA POINTER
         L     RDCB,DXUDCBAD            RESET THE DCB ADDRESS    Y02027
*
         TM    DCBOPTCD,CHKPOINT+CKP3705 IS THIS A CHKPT DCB   @ZM46687
         BNZ   ENDLOAD                  YES, EXIT TO NEXT LOAD   S22024
         SR    RE,RE                    CLEAR TWO
         SR    RF,RF                    WORK REGISTERS
         IC    RF,DSCLSTAR+2            GET RECORDS/TRACK VALUE
*                                       FROM THE DSCB
         LTR   RF,RF                    HAS THE DATA SET BEEN
*                                         FORMATTED CORRECTLY
         BZ    NOFORMAT                 NO, BRANCH
         SR    RCORE,RCORE              CLEAR UNDEX REGISTER
         TM    DCBOPTCD,DCBOPTRM        TEST FOR REUSABLE      @Z40X9NG
*                                       QUEUEING               @Z40X9NG
         BO    SKIP1                    YES, SKIP QUEUE        @Z40X9NG
*                                       CONSTANT UPDATE        @Z40X9NG
         LA    RCORE,QUECONST           SET THE QUEUEING CONSTANT
SKIP1    EQU   *                                               @Z40X9NG
         ST    RF,AVTRCTRR(RCORE)       STORE RECORDS/TRACK VALUE
*                                         IN THE AVT
         LR    RJ,RF                    COPY RECORDS/TRACK VALUE
         M     RE,AVTTRCYR(RCORE)       MULTIPLY RECORDS/TRACK BY
*                                         TRACKS/CYLINDER GIVING
*                                         RECORDS/CYLINDER
         SR    RE,RE                    CLEAR MULTIPLY REGISTER
         M     RE,SVCYLNO               MULT. RECORDS/TRACK BY @Z40X9NG
*                                         BY TOTAL CYLINDERS GIVING
*                                         THE TOTAL NUMBER OF RECORDS
         ST    RF,AVTTOTNR(RCORE)       STORE TOTAL NUMBER OF
*                                         RECORDS IN THE AVT
         LTR   RCORE,RCORE              TEST FOR NON - REUSABLE
*                                         QUEUEING
         BNE   THRESH                   QUEUEING IS NON-REUSABLE,
*                                         CALCULATE THE THRESHOLD
*                                         VALUE
         EJECT
*        QUEUEING IS REUSABLE, CALCULATE
*             THE LOADPOINT VALUE
*
         LR    RD,RF                    COPY NUMBER OF RECORDS
         SRL   RD,SHIFT3                DIVIDE RECORDS BY 8
         SRL   RF,SHIFT2                DIVIDE RECORDS BY 4
         AR    RF,RD                    WE HAVE JUST COMPUTED
*                                         3/8 THS OF THE TOTAL
*                                         NUMBER OF RECORSD ON THIS
*                                         DATA SET
         ST    RF,AVTLODPT              STORE IN THE AVT
         B     RECTRKXT                 BRANCH AROUND THE THRESHOLD
*                                         CODE
         EJECT
THRESH   EQU   *
         SR    RF,RF                    CLEAR THRESHOLD REGISTER
         IC    RF,DCBTHRES              INSERT THRESHOLD VALUE
         LTR   RF,RF                    HAS A THRESHOLD VALUE BEEN
*                                         SPECIFIED
         BNZ   MULTIPLY                 YES, BRANCH
         LA    RF,DEFAULT               ASSIGN A DEFAULT VALUE OF 95
MULTIPLY EQU   *
         M     RE,AVTTOTNR(RCORE)       MULTIPLY THE TOTAL NUMBER
*                                         OF RECORDS IN THE DATA
*                                         SET BY THE THRESHOLD VALUE
         LA    RC,PERCENT               LOAD THE PERCENTAGE FACTOR
         DR    RE,RC                    DIVIDE THE THRESHOLD VALUE
*                                         BY THE PERCENTAGE FACTOR
         LTR   RE,RE                    WAS THERE A REMAINDER
         BZ    NOINC                    NO, BRANCH             @Z40X9NG
         LA    RF,1(RF)                 YES, INCREMENT THE
NOINC    EQU   *                                               @Z40X9NG
         ST    RF,AVTHRESN              STORE THE CLOSEDOWN
*                                         THRESHOLD VALUE IN THE AVT
         SPACE 2                                               @Z40X9NG
RECTRKXT EQU   *
         SR    RF,RF                    CLEAR THE EXTENT REGISTER
         IC    RF,DEBNMEXT              LOAD THE NUMBER OF EXTENTS
         MR    RE,RJ                    MULTIPLY TOTAL NUMBER OF
*                                         EXTENTS BY RECORDS/TRACK
         ST    RF,AVTVOLRR(RCORE)       STORE TOTAL IN AVT
         EJECT
************************************************************** @Z40X9NG
*                                                            * @Z40X9NG
*        GET BLOCK OF SRB/IOSB'S - ONE PAIR FOR EACH EXTENT  * @Z40X9NG
*                                                            * @Z40X9NG
************************************************************** @Z40X9NG
         MVI   AVTOPERT,TCAMER0F        SET ERROR ID           @Z40X9NG
         SLR   REG14,REG14              CLEAR WORK REGISTER    @Z40X9NG
         SLR   REG15,REG15              CLEAR WORK REGISTER    @Z40X9NG
         IC    REG15,DEBNMEXT           GET NUMBER OF EXTENTS  @Z40X9NG
         LA    REG1,BLKSIZE             GET LENGTH OF ONE      @Z40X9NG
*                                       SRB/IOSB PAIR          @Z40X9NG
         MR    REG14,REG1               CALCULATE SIZE OF BLOCK@Z40X9NG
*                                       OF SRB/IOSB'S          @Z40X9NG
         LA    REG0,PREFIX(,REG15)      ADD LENGTH OF PREFIX   @Z40X9NG
*                                       TO SRB/IOSB BLOCK      @Z40X9NG
         LR    RWORK,REG0               SAVE LENGTH            @Z40X9NG
         SPACE 1                                               @Z40X9NG
*        GET STORAGE FOR SRB/IOSB'S IN CSA - ADDRESS OF        @Z40X9NG
*        STORAGE IS RETURNED IN REGISTER 1                     @Z40X9NG
         GETMAIN RC,LV=(0),SP=CSA,BNDRY=PAGE GET STORAGE       @VS41082
         SPACE 1                                               @Z40X9NG
         LTR   REG15,REG15              WAS GETMAIN GOOD       @Z40X9NG
         BNZ   WTGSETUP                 NO, BRANCH             @Z40X9NG
         EJECT                                                 @Z40X9NG
************************************************************** @Z40X9NG
*                                                            * @Z40X9NG
*        INITIALIZE PREFIX AND CHAIN BLOCK OFF TCX           * @Z40X9NG
*                                                            * @Z40X9NG
************************************************************** @Z40X9NG
         USING IEDQTCX,REG15            TCX ADDRESSABILITY     @Z40X9NG
         ST    RWORK,PRELENG(,REG1)     PUT LENGTH IN FIRST    @Z40X9NG
*                                       WORD OF PREFIX         @Z40X9NG
         L     REG15,CVTPTR             GET CVT ADDRESS        @Z40X9NG
         L     REG15,CVTAQAVT-CVT(,REG15) GET TCX ADDRESS      @Z40X9NG
         L     REG13,TCXSIOSB           GET ADDR OF 1ST BLOCK  @Z40X9NG
*                                       OF SRB/IOSB'S          @Z40X9NG
CHAIN    EQU   *                                               @Z40X9NG
         ST    REG13,PRELINK(,REG1)     POINT NEW BLOCK TO     @Z40X9NG
*                                       FIRST BLOCK            @Z40X9NG
         CS    REG13,REG1,TCXSIOSB      WAS ELEMENT UPDATED ?  @Z40X9NG
         BNE   CHAIN                    YES, TRY AGAIN         @Z40X9NG
*                                       NO, NEW BLOCK IS NOW   @Z40X9NG
*                                       FIRST BLOCK            @Z40X9NG
         DROP  REG15                                           @Z40X9NG
         SPACE 3                                               @Z40X9NG
************************************************************** @Z40X9NG
*                                                            * @Z40X9NG
*        FIX THE BLOCK OF SRB/IOSB'S                         * @Z40X9NG
*                                                            * @Z40X9NG
************************************************************** @Z40X9NG
         SPACE 1                                               @Z40X9NG
FIXBLK   EQU   *                                               @Z40X9NG
         LR    REG15,RWORK              GET LENGTH OF BLOCK    @Z40X9NG
         BAL   REG14,FIXPAGE            FIX SRB/IOSB BLOCK     @Z40X9NG
         EJECT                                                 @Z40X9NG
************************************************************** @Z40X9NG
*                                                            * @Z40X9NG
*        SET UP REGISTERS TO USE MVCL TO CLEAR ENTIRE BLOCK  * @Z40X9NG
*                                                            * @Z40X9NG
*              0  - START OF FIELD TO CLEAR                  * @Z40X9NG
*              1  - PAD CHARACTER IN HI ORDER BYTE           * @Z40X9NG
*                   LENGTH IN LOW ORDER THREE BYTES          * @Z40X9NG
*              14 - NOT CHANGED IF REG15=0                   * @Z40X9NG
*              15 - SET TO 0 IMPLIES USE PAD CHARACTER ONLY  * @Z40X9NG
************************************************************** @Z40X9NG
         SPACE 1                                               @Z40X9NG
         L     REG14,AVTGETMN+FOUR      GET BLOCK ADDR SAVED   @Z40X9NG
*                                       BY FIXPAGE SUBROUTINE  @Z40X9NG
         L     REG1,PRELENG(,REG14)     GET LENGTH OF BLOCK    @Z40X9NG
         SH    REG1,PRELEN              DECREMENT FOR PREFIX   @Z40X9NG
         LA    REG1,ZERO(,REG1)         CLEAR HI ORDER BYTE -  @Z40X9NG
*                                       IT CONTAINS THE PAD    @Z40X9NG
*                                       CHARACTER FOR MVCL     @Z40X9NG
         SLR   REG15,REG15              CLEAR TO INDICATE NO   @Z40X9NG
*                                       BYTES MOVED FROM       @Z40X9NG
*                                       'FROM' FIELD           @Z40X9NG
         LA    REG14,PREFIX(,REG14)     BUMP PAST PREFIX       @Z40X9NG
         LR    REG0,REG14               SET FIELD TO CLEAR     @Z40X9NG
*                                       (USE R14 TO SAVE ADDR  @Z40X9NG
*                                       OF SRB/IOSB BLOCK)     @Z40X9NG
         MVCL  REG0,REG14               CLEAR SRB/IOSB BLOCK   @Z40X9NG
         EJECT                                                 @Z40X9NG
************************************************************** @Z40X9NG
*                                                            * @Z40X9NG
*        INITIALIZE SRB AND IOSB                             * @Z40X9NG
*                                                            * @Z40X9NG
************************************************************** @Z40X9NG
         SPACE 1
         LA    REXTENT,DEBUCBAD         GET PTR TO UCB ADDR    @Z40X9NG
         LA    REG15,SRBSIZE(,REG14)    POINT TO IOSB THAT     @Z40X9NG
*                                       FOLLOWS 1ST SRB        @Z40X9NG
         ST    REG15,DCBIOBAD           USE DCB AS TEMPORARY   @Z40X9NG
*                                       SAVE AREA OF 1ST IOSB  @Z40X9NG
*                                       ADDRESS                @Z40X9NG
         SLR   REG13,REG13              CLEAR FOR INSERT       @Z40X9NG
         IC    REG13,DEBNMEXT           GET # OF SRB/IOSB'S    @Z40X9NG
         SPACE 1                                               @Z40X9NG
         USING SRBSECT,REG14            SRB ADDRESSABILITY     @Z40X9NG
         USING IOSB,REG15               IOSB ADDRESSABILITY    @Z40X9NG
INIT     EQU   *                                               @Z40X9NG
         ST    REG15,SRBPARM            POINT SRB TO IOSB      @Z40X9NG
         MVC   SRBID,IDSRB              SET SRB ID             @Z40X9NG
         MVI   IOSDVRID,TCAM            SET TCAM'S DRIVER ID   @Z40X9NG
         L     REG1,CVTPTR              GET CVT POINTER        @Z40X9NG
         LA    REG0,CVTBRET-CVT(,REG1)  GET ADDRESS OF BR 14   @VS41093
         ST    REG0,IOSPGAD             SET IO TERMINATION     @VS41093
*                                       ROUTINE ADDRESS        @Z40X9NG
         L     REG1,CVTAQAVT-CVT(,REG1) GET TCX ADDRESS        @VS41093
         MVC   IOSASID,TCXASID-IEDQTCX(REG1) SET ASID          @VS41093
         ST    REG14,IOSSRB             SET SRB ADDRESS        @Z40X9NG
         MVC   IOSUCB+ONE(THREE),EXUCBAD GET UCB ADDR FROM DEB @Z40X9NG
         MVC   IOSFMSK,EXFLAG1          SET MODE SET/FILE MASK @Z40X9NG
         MVI   IOSCKEY,TCAMKEY          SET PROTECT KEY OF     @Z40X9NG
*                                       THE CHANNEL PROGRAMS   @Z40X9NG
         ST    RDEB,IOSDSID             SET DEB ADDRESS        @Z40X9NG
         SPACE 1                                               @Z40X9NG
         LA    REG14,BLKSIZE(,REG14)    POINT TO NEXT SRB      @Z40X9NG
         LA    REG15,BLKSIZE(,REG15)    POINT TO NEXT IOSB     @Z40X9NG
         LA    REXTENT,EXLEN(,REXTENT)  POINT TO NEXT UCB ADDR @Z40X9NG
         BCT   REG13,INIT               CONTINUE IF MORE       @Z40X9NG
*                                       SRB/IOSB'S             @Z40X9NG
         SPACE 1                                               @Z40X9NG
         DROP  REG14                    SRB ADDRESSABILITY     @Z40X9NG
         DROP  REG15                    IOSB ADDRESSABILITY    @Z40X9NG
         EJECT                                                 @Z40X9NG
************************************************************** @Z40X9NG
*                                                            * @Z40X9NG
*        GET AND FIX ALL IOSB EXTENSIONS (IOSBE'S)           * @Z40X9NG
*                                                            * @Z40X9NG
************************************************************** @Z40X9NG
         SLR   REG1,REG1                CLEAR WORK REGISTER    @Z40X9NG
         IC    REG1,DEBNMEXT            GET # OF EXTENTS       @Z40X9NG
         MH    REG1,SZIOSBE             GET SIZE OF IOSBE'S    @Z40X9NG
         LA    REG0,AVTIOBR             ASSUME REUS QUEUES     @Z40X9NG
         LTR   RCORE,RCORE              TEST INDEX REGISTER    @Z40X9NG
         BZ    GET                      IF 0, QUEUES ARE       @Z40X9NG
*                                       REUS - BRANCH          @Z40X9NG
         LA    REG0,AVTIOBN             IF NOT 0, QUEUES ARE   @Z40X9NG
*                                       NON-REUS               @Z40X9NG
GET      EQU   *                                               @Z40X9NG
         LR    RWORK,REG1               SAVE LENGTH            @Z40X9NG
         ICM   REG1,HIBYTE,SPIOSBE      SET SUBPOOL ID         @Z40X9NG
         BAL   REG14,AVTPAR             BR TO GETMAIN CODE     @Z40X9NG
         SPACE 1                                               @Z40X9NG
         L     REG15,AVTGETMN           GET LENGTH OF          @Z40X9NG
*                                       GETMAINED STORAGE      @Z40X9NG
         L     REG1,AVTGETMN+FOUR       GET PTR TO WORD WITH   @Z40X9NG
*                                       ADDR OF STORAGE        @Z40X9NG
         L     REG1,ZERO(,REG1)         GET PTR TO STORAGE     @Z40X9NG
         BAL   REG14,FIXPAGE            FIX IOSBE'S            @Z40X9NG
         EJECT                                                 @Z40X9NG
************************************************************** @Z40X9NG
*                                                            * @Z40X9NG
*        INITIALIZE IOSBE'S                                  * @Z40X9NG
*                                                            * @Z40X9NG
************************************************************** @Z40X9NG
         LA    REG1,ZERO(,RWORK)        GET LENGTH OF IOSBE'S  @Z40X9NG
*                                       AND CLEAR HI-ORDER BYTE@Z40X9NG
*                                       (PAD CHARACTER)        @Z40X9NG
         L     REG14,AVTGETMN+FOUR      GET ADDR OF IOSBE'S -  @Z40X9NG
*                                       (SAVED BY FIXPAGE)     @Z40X9NG
         LR    REG0,REG14               SET FIELD TO BE CLEARED@Z40X9NG
         SLR   REG15,REG15              INDICATE NO BYTES MOVED@Z40X9NG
*                                       FROM 'FROM' FIELD      @Z40X9NG
         MVCL  REG0,REG14               CLEAR IOSB'S           @Z40X9NG
         LR    RWORK,REG14              SAVE START ADDR OF     @Z40X9NG
*                                       IOSBE'S                @Z40X9NG
         L     REG13,DCBIOBAD           GET ADDR OF 1ST IOSB - @Z40X9NG
*                                       SAVED HERE DURING      @Z40X9NG
*                                       IOSB INITIALIZATION    @Z40X9NG
         SH    REG14,SZIOSBE            SUBT SIZE OF 1 IOSBE   @Z40X9NG
         ST    REG14,DCBIOBAD           SET IOSBE ADDR IN DCB  @Z40X9NG
         SLR   REG15,REG15              CLEAR FOR INSERT       @Z40X9NG
         IC    REG15,DEBNMEXT           GET NO. OF IOSBE'S     @Z40X9NG
         SPACE 2                                               @Z40X9NG
         USING IOSBE,RWORK              IOSBE ADDRESSABILITY   @Z40X9NG
         USING IOSB,REG13               IOSB ADDRESSABILITY    @Z40X9NG
INITLOOP EQU   *                                               @Z40X9NG
         STCM  REG13,AD,IOSBEIOS        SET PTR TO IOSB        @Z40X9NG
         ST    RWORK,IOSUSE             MAKE IOSBE THE WORK    @Z40X9NG
*                                       AREA FOR THE IOSB      @Z40X9NG
         MVI   IOSBEENT,IOSBESIO        SET ENTRY CODE FOR     @Z40X9NG
*                                       SVC 102                @Z40X9NG
         MVI   IOSBEFLG,IOSBEEOL+IOSBERDY SET EOL FLAG AND     @Z40X9NG
*                                       READY FOR I/O FLAG     @Z40X9NG
         TM    DCBOPTCD,DCBOPTRM        REUS QUEUES            @Z40X9NG
         BO    REUS                     YES, BRANCH            @Z40X9NG
         OI    IOSBEFLG,IOSBENRQ        SET NON-REUS QUEUES    @Z40X9NG
REUS     EQU   *                                               @Z40X9NG
         SPACE 1                                               @Z40X9NG
         LA    REG13,BLKSIZE(,REG13)    PTR TO NEXT IOSB       @Z40X9NG
         LA    RWORK,IOSBELEN(,RWORK)   PTR TO NEXT IOSBE      @Z40X9NG
         BCT   REG15,INITLOOP           CONTINUE IF MORE IOSBE @Z40X9NG
         DROP  RWORK                                           @Z40X9NG
         DROP  REG13                                           @Z40X9NG
         EJECT                                                 @Z40X9NG
************************************************************** @Z40X9NG
*                                                            * @Z40X9NG
*        INITIALIZE TCAM'S PURGE ENTRY IN THE VECTOR OF IOS  * @Z40X9NG
*        DRIVERS (VOID). THIS ENTRY POINTS TO CODE IN IEDQEB * @Z40X9NG
*        (IGC0010B) THAT IS BRANCHED TO BY THE PURGE CODE    * @Z40X9NG
*        OF IOS. IEDQOT01 WILL RESET THIS ENTRY IN THE VOID. * @Z40X9NG
*                                                            * @Z40X9NG
************************************************************** @Z40X9NG
         L     RWORK,CVTPTR             GET CVT ADDR
         L     RWORK,CVTIXAVL-CVT(,RWORK) GET IOCOM ADDRESS    @Z40X9NG
         L     RWORK,IOCVOID-IOCOM(,RWORK) GET VOID ADDRESS    @Z40X9NG
         LA    RWORK,VOIEL*TCAM(,RWORK) POINT TO TCAM'S SLOT   @Z40X9NG
*                                       IN THE VOID            @Z40X9NG
         USING VOID,RWORK               VOID ADDRESSABILITY    @Z40X9NG
         CLC   VOIPRG,VOIRSTR           HAS PURGE ADDR BEEN    @Z40X9NG
*                                       CHANGED FROM INITIAL   @Z40X9NG
*                                       NO-OP                  @Z40X9NG
         BNE   FIXDCB                   YES,BRANCH             @Z40X9NG
         SPACE 1                                               @Z40X9NG
*                                       ISSUE LOAD TO FIND     @Z40X9NG
*                                       ADDRESS OF TCAM'S      @Z40X9NG
         LOAD  EP=IGC0010B              PURGE ROUTINE          @Z40X9NG
         SPACE 1                                               @Z40X9NG
         LR    REG1,REG0                COPY IGC0010B ADDR     @Z40X9NG
         AH    REG0,PURGEOFF(,REG1)     ADDR OF PURGE CODE     @Z40X9NG
*                                       IN IGC0010B            @Z40X9NG
         ST    REG0,VOIPRG              SET PURGE ADDRESS      @Z40X9NG
         DELETE EP=IGC0010B             DELETE PURGE ROUTINE   @Z40X9NG
         SPACE 1                                               @Z40X9NG
         DROP  RWORK                                           @Z40X9NG
         EJECT                                                 @Z40X9NG
************************************************************** @Z40X9NG
*                                                            * @Z40X9NG
*        FIX THE DCB                                         * @Z40X9NG
*                                                            * @Z40X9NG
************************************************************** @Z40X9NG
FIXDCB   EQU   *                                               @Z40X9NG
         LR    REG1,RDCB                ADDRESS OF DCB         @Z40X9NG
         LA    REG15,DCBLNG             LENGTH OF DCB          @Z40X9NG
         BAL   REG14,FIXPAGE            FIX THE DCB            @Z40X9NG
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                 *
*              XCTL TO THE NEXT OPEN EXECUTOR                     *
*                                                                 *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
ENDLOAD  EQU   *
         L     RCORE,4(RWTGC)           LOAD THE ADDRESS OF THE
*                                         OPEN WORK AREA
         MVC   AVTEZERO(TWO,RWTGC),OPENLD3 MOVE THE ID FOR THE @Z30X8NM
*                                         THIRD LOAD TO THE OPEN
*                                         WORK AREA
RELOOP   EQU   *
         LA    RWTGC,8(RWTGC)           INCREMENT POINTER TO NEXT
*                                         ENTRY IN THE WTG TABLE
         LA    RPARC,4(RPARC)           INCREMENT POINTER TO THE
*                                         NEXT DCB IN THE LIST
         CLC   0(2,RWTGC),AMIDCNST      IS IGG01931 REQUIRED AGAIN
         BE    RESTART                  IF YES, RETURN TO BEGINNING
         CLC   0(2,RWTGC),OPIDCNST      HAVE WE PROCESSED THE LAST
*                                         ENTRY IN THE WTG TABLE
         BNE   RELOOP                   NO, TEST THE NEXT ENTRY
         LR    RPARC,RPAR               RESET POINTER TO FIRST OF
*                                         THE DCB PARAMETER LIST
         LA    RWTGC,32(RWTG)           RESET POINTER TO FIRST
*                                         ENTRY IN WTG TABLE
ZCHEK    EQU   *
         CLI   ZERO(RWTGC),ZERO         HAVE WE COMPLETED      @Z40X9NG
*                                         FOR THIS DCB
         BNE   XCTLRTNE                 IF NOT, TRANSFER CONTROL
         LA    RWTGC,8(RWTGC)           PICK UP ADDRESS OF THE NEXT
*                                         ENTRY IN THE WTG TABLE
         LA    RPARC,4(RPARC)           PICK UP ADDRESS OF THE NEXT
*                                         DCB IN PARAMETER LIST
         B     ZCHEK                    TEST THE NEXT ENTRY
XCTLRTNE EQU   *
         LA    RJ,DXCCW12               ADDRESS OF A DOUBLE WORD
         MVC   6(2,RWTG),0(RWTGC)       PUT ID IN PARAMETER LIST
         XCTL  DE=(RWTG),SF=(E,(15))    TRANSFER CONTROL
         EJECT
TRACKCOM EQU   *
         ST    RDCB,SVCYLCNT            SAVE CYL COUNT         @Z40X9NG
         ST    RCORE,SVDSCBAD           SAVE DSCB ADDRESS      @Z40X9NG
         L     RCORE,CVTPTR             GET CVT ADDRESS        @Z40X9NG
         L     RCORE,CVTZDTAB-CVT(RCORE) GET ADDR OF I/O       @Z40X9NG
*                                       DEVICE CHARACTERISTIC  @Z40X9NG
*                                       TABLE                  @Z40X9NG
         L     REG13,EXUCB              GET ADDRESS OF UCB     @Z40X9NG
         IC    RC,UCBTYPE(RC)           PICK UP DIRECT ACCESS    A41033
*                                         INDEX BYTE             A41033
         N     RC,FULLWORD              REMOVE EXTRANEOUS BITS   A41033
         IC    RC,0(RC,RCORE)           PICK UP THE OFFSET BYTE  A41033
*                                         INTO THE DADT          A41033
         LH    RCORE,TWO(RC,RCORE)      GET THE NUMBER OF TRACKS A41033
*                                       PER CYLINDER FOR DEVICE  A41033
         STH   RCORE,SVTRKCYL           SAVE THE TRK/CYL       @Z40X9NG
*                                       IN CASE THERE IS MORE    A41033
*                                       THAN ONE CYLINDER        A41033
         SH    RCORE,EXSTRK             SUBTRACT STARTING TRK  @Z40X9NG
*                                         ADDRESS
         AH    RCORE,EXETRK             ADD THE ENDING TRACK   @Z40X9NG
*                                         ADDRESS
         LA    RCORE,1(RCORE)           INCREMENT TRACK COUNT BY 1
         CH    RDCB,CYLCOUNT            DO WE HAVE MORE THAN ONE
*                                         CYLINDER
         BNE   MULTICYL                 YES, WE HAVE MULTIPLE
*                                         CYLINDERS
RETURNIN EQU   *
         STH   RCORE,EXTRACKS           SAVE TRACK COUNT       @Z40X9NG
         L     RCORE,SVDSCBAD           RESTORE DSCB ADDR      @Z40X9NG
         B     STORECCT                 GO TO STORE CYLINDER COUNT
*
MULTICYL EQU   *
         BCTR  RDCB,0                   REDUCE CYLINDER COUNT BY 1
         MH    RDCB,SVTRKCYL            MULTIPLY CYLINDERS-1 BY@Z40X9NG
*                                         TRACKS/CYLINDER
         AR    RCORE,RDCB               ADD THE TOTALS
         L     RDCB,SVCYLCNT            RESTORE THE ORIGINAL   @Z40X9NG
*                                         CYLINDER COUNT
         B     RETURNIN                 RETURN TO IN-LINE CODE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                 *
*        THIS SECTION OF ERROR CODE IS EXECUTED ONLY WHEN         *
*        THE MESSAGE QUEUES DATA SET HAS NOT BEEN FORMATTED       *
*        CORRECTLY AND THE LAST RECORD NUMBER WRITTEN IS RECORD   *
*                         NUMBER ZERO                             *
*                                                                 *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
NOFORMAT EQU   *
         MVI   AVTOPERT,TCAMER10        MOVE THE ERROR IDENTIFIER
*                                         FOR TCAM INTO THE AVT
         B     WTGSETUP                 SET THE WHERE-TO-GO ENTRY
         EJECT
************************************************************** @Z40X9NG
*                                                            * @Z40X9NG
*        GETMAIN SUBROUTINE                                  * @Z40X9NG
*              INPUT: REG0  - ADDR OF WORD TO RECEIVE ADDR   * @Z40X9NG
*                             OF GETMAINED AREA              * @Z40X9NG
*                     REG1  - LENGTH REQUESTED; SUBPOOL ID   * @Z40X9NG
*                             IN HIGH ORDER BYTE             * @Z40X9NG
*                     REG14 - RETURN ADDRESS                 * @Z40X9NG
*                                                            * @Z40X9NG
************************************************************** @Z40X9NG
AVTPAR   EQU   *                                               @Z40X9NG
         ST    REG1,AVTGETMN            SET LENGTH TO GET      @Z40X9NG
         MVI   AVTGETMN,ZERO            CLEAR HIGH BYTE        @Z40X9NG
         ST    REG0,AVTGETMN+FOUR       SET ADDR TO RECEIVE    @Z40X9NG
         STCM  REG1,HIBYTE,AVTGETMN+NINE SET SUBPOOL ID        @Z40X9NG
         LA    REG1,AVTGETMN            SET PARM LIST ADDR     @Z40X9NG
         SPACE 2
         MODESET EXTKEY=TCAM            GET IOB IN TCAM'S KEY    Y02027
         SPACE 2
         GETMAIN ,MF=(E,(1))
         SPACE 2
         MODESET EXTKEY=SUPR            RETURN TO KEY 0          Y02027
         SPACE 2
*
         LTR   REG15,REG15              WAS GETMAIN GOOD       @Z40X9NG
         BNZ   WTGSETUP                 NO, BRANCH             @Z40X9NG
         BR    REG14                    RETURN TO CALLER       @Z40X9NG
         EJECT
************************************************************** @Z40X9NG
*                                                            * @Z40X9NG
*        PAGE FIX SUBROUTINE                                 * @Z40X9NG
*              INPUT: REG1  - AREA TO FIX                    * @Z40X9NG
*                     REG14 - RETURN ADDRESS                 * @Z40X9NG
*                     REG15 - LENGTH OF AREA                 * @Z40X9NG
*                                                            * @Z40X9NG
************************************************************** @Z40X9NG
FIXPAGE  EQU   *                                                 X01004
         ST    REG1,AVTGETMN+FOUR       SAVE ADDR TO FIX       @Z40X9NG
         LA    REG15,ZERO(REG1,REG15)   SET END ADDRESS        @Z40X9NG
         LA    REG0,AVTDMECB            ADDR OF FIX ECB        @Z40X9NG
         XC    AVTDMECB(FOUR),AVTDMECB  CLEAR ECB                X01004
*                                                                X01004
         PGFIX R,A=(1),EA=(15),ECB=(0)  FIX DATA AREA          @Z30X8NM
*                                                                X01004
*                                                                X01004
         WAIT  ECB=AVTDMECB             WAIT FOR PAGE FIX      @Z30X8NM
*                                                                X01004
         TM    AVTDMECB+THREE,FOUR      CHECK RETURN CODE        X01004
         BZR   REG14                    IF GOOD, RETURN TO     @Z40X9NG
*                                       CALLER                 @Z40X9NG
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                 *
*        THIS SECTION OF CODE IS USED TO SAVE THE ID OF THE       *
*        CURRENT OPEN EXECUTOR AND TO MOVE THE ID OF THE          *
*        ERROR RECOVERY MODULE INTO THE WHERE-TO-GO PARAMETER     *
*                            LIST                                 *
*                                                                 *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
WTGSETUP EQU   *
         L     RCORE,FOUR(RWTGC)        LOAD THE ADDRESS OF THE
*                                         OPEN WORK AREA
         MVC   AVTOPXCL(TWO),AMIDCNST   MOVE THE ID OF THE CURRENT
*                                         EXECUTOR INTO THE AVT
*                                         FOR THE RETURN TO THIS
*                                         EXECUTOR
         MVC   AVTEZERO(TWO,RWTGC),OPENERP MOVE THE ID FOR THE @Z30X8NM
*                                         ERROR HANDLER INTO THE
*                                         WHERE-TO-GO PARAMETER LIST
         B     XCTLRTNE                 GO TO THE XCTL ROUTINE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*                                                                 *
*        CONSTANTS AND EQUATES                                    *
*                                                                 *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
OPIDCNST DC    C'0S'                    ID OF LAST OPEN MODULE   S21903
AMIDCNST DC    C'31'                    ID OF THIS MODULE IGG01931
ZERO     EQU   0                        VALUE 0                  Y02027
ONE      EQU   1                        VALUE 1                  S22024
TWO      EQU   2                        VALUE 2                  S22024
SHIFT2   EQU   2                        VALUE 2                  S22024
THREE    EQU   3                        VALUE 3                  S22024
SHIFT3   EQU   3                        VALUE 3                  S22024
FOUR     EQU   4                        VALUE 4                  S22024
FIVE     EQU   5                        VALUE 5                  S22024
NINE     EQU   9                        VALUE 9                  Y02027
FORMAT3  EQU   13                       VALUE 13                 S22024
TCAMER0F EQU   15                       VALUE 15                 S22024
TCAMER10 EQU   16                       VALUE 1L                 S22024
UCBTYPE  EQU   19                       INDEX BYTE OFFSET        A41033
QUECONST EQU   24                       NUMERIC CONSTANT
DEBPRFSZ EQU   36                       SIZE OF THE DEB PREFIX
FORM3EXT EQU   44                       VALUE 44                 S22024
DADT     EQU   64                       DEVICE TABLE OFFSET      A41033
DEFAULT  EQU   95                       VALUE 95                 S22024
PERCENT  EQU   100                      A NUMERIC PERCENTAGE
FORM1    EQU   C'1'                     FORMAT 1 DSCB          @Z40X9NG
WAIT     EQU   1                        WAIT SVC NUMBER.         X01004
AD       EQU   7                        ICM/STCM MASK            X01004
EIGHT    EQU   8                        CONSTANT                 X01004
CHKPOINT EQU   X'20'                    OPTCD=C                  S22024
CKP3705  EQU   X'10'                    OPTCD=I                  S22024
         SPACE 1                                               @Z40X9NG
HIBYTE   EQU   B'1000'                  MASK FOR HI-ORDER BYTE @Z40X9NG
         SPACE 1                                               @Z40X9NG
*        SRB/IOSB BLOCK PREFIX EQUATES                         @Z40X9NG
PREFIX   EQU   8                        LENGTH OF SRB/IOSB     @Z40X9NG
*                                       BLOCK PREFIX           @Z40X9NG
PRELENG  EQU   0                        OFFSET TO LENGTH FIELD @Z40X9NG
*                                       IN PREFIX              @Z40X9NG
PRELINK  EQU   4                        OFFSET TO LINK FIELD   @Z40X9NG
*                                       IN PREFIX              @Z40X9NG
         SPACE 1                                               @Z40X9NG
TCAM     EQU   5                        TCAM DRIVER ID FOR IOS @Z40X9NG
TCAMKEY  EQU   6*16                     TCAM KEY               @Z40X9NG
CSA      EQU   241                      SUBPOOL FOR CSA GETMAIN@VS41091
PURGEOFF EQU   6                        OFFSET IN IGC0010B OF  @Z40X9NG
*                                       PTR TO PURGE CODE      @Z40X9NG
FULLWORD DC    F'15'                    EXTRANEOUS BIT REMOVAL   A41033
CYLCOUNT DC    H'1'                     CYLINDER COUNT OF 1    @Z40X9NG
         DS    0H                                              @Z40X9NG
SZIOSBE  DC    AL2(IOSBELEN)            LENGTH OF IOSBE        @Z40X9NG
PRELEN   DC    AL2(PREFIX)              LENGTH OF SRB/IOSB     @Z40X9NG
*                                       BLOCK PREFIX           @Z40X9NG
SPIOSBE  DC    AL1(250)                 SUBPOOL ID FOR IOSBE   @Z40X9NG
IDSRB    DC    CL4'SRB'                 SRB ID                 @Z40X9NG
         SPACE 3                                               @Z40X9NG
OPENERP  DC    C'33'                    OPEN ERROR RECOVERY MODULE
OPENLD3  DC    C'34'                    ID FOR IGG01934
         EJECT                                                 @Z40X9NG
*        DEB EXTENT DSECT                                      @Z40X9NG
         SPACE 1                                               @Z40X9NG
EXTENT   DSECT                                                 @Z40X9NG
EXUCB    DS    0A                       UCB ADDRESS            @Z40X9NG
EXFLAG1  DS    XL1                      FLAG BYTE              @Z40X9NG
EXWRTSK  EQU   X'C0'                    ALLOW WRITE SEEK       @Z40X9NG
EXUCBAD  DS    AL3                      UCB ADDRESS            @Z40X9NG
EXBIN    DS    H                        BIN BYTES              @Z40X9NG
EXCCHH   DS    0CL8                     BEGINNING AND ENDING   @Z40X9NG
*                                       CCHH'S                 @Z40X9NG
EXSCYL   DS    CL2                      STARTING CYLINDER      @Z40X9NG
EXSTRK   DS    CL2                      STARTING TRACK         @Z40X9NG
EXECYL   DS    CL2                      ENDING CYLINDER        @Z40X9NG
EXETRK   DS    CL2                      ENDING TRACK           @Z40X9NG
EXTRACKS DS    H                        NUMBER OF TRACKS       @Z40X9NG
EXLEN    EQU   *-EXTENT                 LENGTH OF DEB EXTENT   @Z40X9NG
         SPACE 5                                               @Z40X9NG
*        DISK EXTENT DSECT                                     @Z40X9NG
         SPACE 1                                               @Z40X9NG
DEXTENT  DSECT                                                 @Z40X9NG
DEXTYPE  DS    CL1                                             @Z40X9NG
DEXFORM1 EQU   C'1'                     FORMAT 1               @Z40X9NG
DEXFORM3 EQU   C'3'                     FORMAT 3               @Z40X9NG
DEXSEQ   DS    CL1                                             @Z40X9NG
DEXLLMT  DS    CL4                      BEGINNING CCHH         @Z40X9NG
DEXULMT  DS    CL4                      ENDING CCHH            @Z40X9NG
DEXLN    EQU   *-DEXTENT                LENGTH OF DISK EXTENT  @Z40X9NG
         EJECT
         TAVTD                          AVT DSECT
         SPACE 4
***********************************************************************
*                                                                     *
*        EQUATES FOR FIELDS IN THE AVT USED AS WORK AREAS             *
*                                                                     *
***********************************************************************
SVCYLNO  EQU   AVTDOUBL+FOUR            SAVE AREA FOR NUMBER   @Z40X9NG
*                                       OF CYLINDERS           @Z40X9NG
SVTRKCYL EQU   AVTSAVE3+10              HALF WORD SAVE AREA    @Z40X9NG
*                                       FOR TRACKS/CYLINDER    @Z40X9NG
SVDSCBAD EQU   AVTSAVE3+12              SAVE AREA FOR DSCB     @Z40X9NG
SVCYLCNT EQU   AVTSAVE3+16              SAVE AREA FOR CYL COUNT@Z40X9NG
SVEXTENT EQU   AVTSAVE3+20              SAVE AREA FOR EXTENT   @Z40X9NG
*                                       COUNT                  @Z40X9NG
         EJECT
         TTCBD                          TCB DSECT
         EJECT
         TDEBD                          DEB DSECT
         EJECT
IEDJCIOB DSECT          PRIVATE IOB DSECT USED ONLY BY DISK OPEN
JOBFLAG1 DS    C                        FIRST  FLAG  BYTE        S21903
JOBFLAG2 DS    C                        SECOND FLAG  BYTE        S21903
JOBSENSO DS    C                        FIRST  SENSE  BYTE       S21903
JOBSENS1 DS    C                        SECOND SENSE  BYTE       S21903
JOBECBCC DS    C                   COMPLETION CODE
JOBECBPT DS    AL3                 ADDRESS OF THE ECB
JOBFLAG3 DS    C                   I/O ERROR FLAGS
JOBCSW   DS    CL7                 CSW
JOBSIOCC DS    C                   SIO CONDITION CODES
JOBSTART DS    AL3                 ADDRESS OF CHANNEL PROGRAM
JOBRSVD  DS    C                   RESERVED
JOBDCBPT DS    AL3                 ADDRESS OF THE DCB
JOBOPCOD DS    C                   OP CODE
JOBRESTR DS    AL3                 RESTART ADDRESS OF IOS
JOBINCAM DS    H                   BLOCK COUNT
JOBERRCT DS    H                   NUMBER OF ERROR RETRIES
JOBSEEK  DS    CL8                 MBBCCHHR
JOBXECB  DS    F                   ECB
JOBXCC   DS    C                   CURRENT ARM POSITION - CYL
JOBXRETQ DS    AL3                 ADDRESS OF QUEUE OF CPB'S
*                                    AVAILABLE TO DISK END FOR RETRY
JOBXLOCK DS    C                   FLAG BITS
JOBXNEWQ DS    AL3                 ADDR OF CPB QUE BEING BUILT
JOBEND   EQU   *
         EJECT
FORCORE  DSECT                          WORK AREA DSECT
         IECDSECT
         EJECT
         DCBD  DSORG=TQ                 DCB DSECT
DCBLNG   EQU   *-IHADCB                                          X01004
         EJECT                                                 @Z40X9NG
         CVT   DSECT=YES                                       @Z40X9NG
         EJECT                                                 @Z40X9NG
*        SRB DSECT                                             @Z40X9NG
         SPACE 1                                               @Z40X9NG
         IHASRB                                                @Z40X9NG
         EJECT                                                 @Z40X9NG
         IECDVOID                                              @Z40X9NG
         EJECT                                                 @Z40X9NG
         IECDIOCM                                              @Z40X9NG
         EJECT                                                 @Z40X9NG
*        IOSB DSECT                                            @Z40X9NG
         SPACE 1                                               @Z40X9NG
         IECDIOSB                                              @Z40X9NG
         SPACE 4                                               @Z40X9NG
*        LENGTH OF CONTROL BLOCKS                              @Z40X9NG
LENIOSB  EQU   IOSEND-IOSB              LENGTH OF IOSB         @Z40X9NG
BLKSIZE  EQU   LENIOSB+SRBSIZE          LENGTH OF SRB/IOSB     @Z40X9NG
         EJECT                                                 @Z40X9NG
         TIOSBED                                               @OZ26164
         EJECT                                                 @Z40X9NG
         TTCXD                                                 @Z40X9NG
         END
