19R6     TITLE '''IGG019R6'' - START-UP MESSAGE ROUTINE'
IGG019R6 CSECT
*A-000000-999999                                               @X31X8N0
         SPACE 3
*CHANGE ACTIVITY = AS FOLLOWS:
*A277200-277800,373070                                          SA51078
*A373140-373420                                                 SA50192
*A137500,176000                                                  S99228
*A137000,377000,412000,467000,492000,493000                      S21101
*A245000,462000,4925000                                          S21101
*C152000,229000,364000,385000,440000,516000                      S21101
*D329000-331000,335000,345000-349000,413000-439000,524000-525000 S21101
*D410600,467070-467840                                           S21101
*C060000-061000,087000                                           S22025
*A179300                                                         S22026
*A137500,234000,274000,324000,446000,455000                     SA52971
*C055000-056000,144000,184000-194000,229000-229900,278000-281000SA52971
*D146000,156000-159000,160500,218000,238000,245500-246000       SA52971
*D249000-249600,251000-259000,267000-268000,270000-272000,276000SA52971
*D283000,332000,334000-338000,342000-344000,351000-361000       SA52971
*C308000-317000,322000-323200,325000,372500-375000,377500-406000SA52971
*D367000-371000,410300,454000,457800-458000,478000,480000-483000SA52971
*C448000-448900,457200,462500-462700,526000-527200              SA52971
*D486000-491000,493690,494000-514000,533000,535000              SA52971
*A005000,117000                                                  S21903
*D006000                                                         S21903
*A448300                                                        SA58995
*C446090-446120                                                 SA58995
*D448500-448600                                                 SA58995
*A448370                                                        SA59195
*C002100-002950                                                 SA59195
*A462000,538000                                                 SA67771
*A479000                                                        SA68003
*A493510                                                       @SA70647
*A164000                                                       @Z30X8NJ
*C001000-002000,008000                                         @Z30X8NJ
*C446630                                                       @SA64388
*A241000,457500                                                @YA07705
*A240000                                                       @OZ11205
         SPACE 3
***********************************************************************
*                                                                     *
*MODULE-NAME = IGG019R6                                          S21903
*                                                                S21903
*DESCRIPTIVE-TITLE = START-UP MESSAGE ROUTINE                    S21903
*                                                                S21903
*COPYRIGHT = 'NONE'                                              S21903
*                                                                     *
*STATUS: CHANGE LEVEL 8                                        @Z30X8NJ
*                                                                     *
*FUNCTION:THIS MODULE LOCATES ALL TERMINAL ENTRIES ASSOCIATED WITH A  *
*   PARTICULAR LCB. THE ADDRESS OF EACH ENTRY AND THE ADDRESS OF ITS  *
*   OPTION FIELDS(IF PRESENT) ARE PASSED TO A USER EXIT IN A TWO WORD *
*   PARAMETER LIST. THE ADDRESSES OF THE USER EXITS ARE OPTIONALLY    *
*   SPECIFIED ON THE READY MACRO. ONE EXIT IS GIVEN CONTROL IF A COLD *
*   START IS IN EFFECT FOR THE SYSTEM;THE OTHER EXIT IS GIVEN CONTROL *
*   IF A WARM OR CONTINUATION START IS IN EFFECT. IF THE USER EXIT HAS*
*   A MESSAGE TO SEND TO THE TERMINAL,IT RETURNS TO THIS MODULE  WITH *
*   THE ADDRESS OF THE MESSAGE IN REGISTER 1 AND THE LENGTH OF THE    *
*   MESSAGE IN THE FIRST BYTE OF THE MESSAGE;IF THE USER EXIT DOES NOT*
*   HAVE A MESSAGE,IT RETURNS WITH ZERO IN REGISTER 1.                *
*                                                                     *
*   IF CORE ONLY QUEUES ARE SPECIFIED FOR A PARTICULAR QUEUE,THIS     *
*   MODULE REMOVES BUFFERS FROM THE AVAILABLE BUFFER QUEUE, BUILDS    *
*   THE MESSAGE, AND PASSES IT, ONE UNIT AT A TIME, TO THE DESTINA-   *
*   TION SCHEDULER(IEDQHM02) SO THAT IT CAN BE PUT ON THE DESTINA-    *
*   TION QCB.  IN THE CORE ONLY SITUATION, THERE WILL NOT BE ANY      *
*   MESSAGES ALREADY ON THE QUEUE AS A RESULT OF RESTART,SO NO        *
*   SPECIAL MEASURES HAVE TO BE TAKEN TO ENSURE THAT START-UP         *
*   MESSAGES ARE ENQUEUED FIRST ON THE DESTINATION QCB.               *
*                                                                     *
*   IF DISK QUEUES ARE SPECIFIED FOR A PARTICULAR QUEUE, THIS         *
*   MODULE REMOVES ONE CPB FROM THE CPB FREEPOOL AND BUILDS THE       *
*   PROPER NUMBER                                                     *
*   OF BUFFERS IN A CPB WORK AREA,ONE UNIT AT A TIME. AFTER EACH UNIT *
*   IS BUILT,IT SETS UP THE CPB AND BRANCHES TO EXCP DRIVER (IEDQFL)  *
*   TO WRITE THE UNIT ON DISK. THE INTERFACE IS MADE TO LOOK LIKE EXCP*
*   DRIVER IS GETTING CONTROL FROM THE TCAM DISPATCHER: THE CPB IS PUT*
*   ON THE INPUT QUEUE(AVTINCPQ),A PRIORITY IS PUT INTO THE CPB CLEAN-*
*   QCB TO PREVENT THE QCB FROM BEING POSTED TO THE READY QUEUE BY    *
*   EXCP DRIVER,THE ENTRY POINT FOR IEDQFL IS PUT INTO REGISTER 15,   *
*   AND THE RETURN ADDRESS FOR THIS MODULE IS PUT IN PLACE OF THE     *
*   ADDRESS OF THE DISPATCHER (AVTEA). IN THIS MANNER,IEDQFL IS USED  *
*   AS A SUBROUTINE FOR THIS MODULE. WHEN IEDQFL RETURNS,THIS MODULE  *
*   WAITS ON THE ECB CALLED AVTOSECB,SO THAT THE I/O WILL BE COMPLETE *
*   BEFORE ANOTHER BUFFER UNIT IS BUILT.  AFTER ALL UNITS ARE BUILT,  *
*   THE CPB IS RETURNED TO THE CPB FREEPOOL.
*                                                                     *
*   THIS MODULE ASSIGNS DISK RECORD NUMBERS TO THE BUFFER UNITS BY    *
*   USING QCBDNHDR AND AVTRADDR OR AVTNADDR IN THE CONVENTIAL MANNER, *
*   BUT IT PUTS THE MESSAGE AT THE HEAD OF THE FEFO QUEUE (HIGHEST    *
*   PRIORITY LEVEL) BY MOVING QCBFFEFO INTO THE MESSAGE FEFO CHAIN    *
*   FIELD AND PUTTING THE NUMBER OF THE MESSAGE INTO QCBFFEFO.        *
*                                                                     *
*   AFTER THIS MODULE HAS GONE THROUGH THE TERMNAME TABLE AND         *
*   PROCESSED ALL TERMINALS, IT                                 SA52971
*   INCREMENTS THE NUMBER OF LINES PROCESSED (AVTSMCNT) AND COMPARES  *
*   IT WITH THE NUMBER OF LINES OPENED(AVTLNCNT). IF THEY EQUAL IT    *
*   RETURNS TO THE DISPATCHER AT DSPDLETE;IF NOT EQUAL, IT RETURNS TO *
*   THE DISPATCHER AT DSPCHAIN.  IN BOTH CASES THE LCB IS POSTED S22025
*   TO ITSELF UNLESS THE LINE IS OPENED IDLE.  IN THIS CASE, NO  S22025
*   ELEMENT IS POSTED.                                           S22025
*                                                                     *
*   ONLY SINGLE-TYPE TERMINAL ENTRIES WHOSE LINES ARE OPENED BEFORE   *
*   READY IS EXECUTED ARE PROCESSED BY THIS MODULE.                   *
*                                                                     *
*ENTRY POINT:                                                         *
*                                                                     *
*        IGG019R6                                                     *
*                                                                     *
*INPUT:REGISTERS 1,13,AND15 CONTAIN THE FOLLOWING:                    *
*                                                                     *
*      1-ADDRESS OF AN LCB                                            *
*      13-ADDRESS OF AVTSAVE2                                         *
*      15-ADDRESS OF FIRST EXECUTABLE INSTRUCTION FOR THIS MODULE     *
*         (THE QCB AND STCB ARE LOCATED AT THE BEGINNING OF THE CSECT)*
*                                                                     *
*OUTPUT:IF SPECIFIED BY USER EXIT,A MESSAGE IS WRITTEN TO DISK AT THE *
*   HEAD OF THE FEFO CHAIN.                                           *
*                                                                     *
*EXTERNAL ROUTINES:                                                   *
*                                                                     *
*        IEDQHM02                                                     *
*        IGG019RC                                                     *
*        USER EXIT SPECIFIED ON READY MACRO                           *
*        IGG019RC-WTORTN-DISK ERROR HANDLING                     99226
*                                                                     *
*EXITS-NORMAL:THIS MODULE EXITS TO THE TCAM DISPATCHER AT EITHER      *
*   DSPCHAIN OR DSPDELETE.  SEE 'FUNCTIONS'                      S22025
*                                                                     *
*EXITS-ERROR-BRANCH TO THE WTORTN OF IGG019RC ON DISK ERRORS     99226
*                                                                     *
*TABLES/WORK AREAS:                                                   *
*                                                                     *
*   AVT(AVTRNMPT,AVTCLRHI,AVTDOUBL,AVTOPTPT,AVTRDYA,AVTBIT2,AVTSAVE4, *
*      AVTKEYLE,AVTHDRSZ,AVTFCPB,AVTTXTSZ,AVTRADDR,AVTNADDR,AVTLODPT, *
*      AVTEA,AVTINCPQ,AVTSAVE2,AVTFL,AVTOSECB,AVTDKAPQ,AVTCPBCB,      *
*      AVTSMCNT,AVTLNCNT)                                             *
*   LCB                                                               *
*   TERMNAME TABLE                                                    *
*   TERMINAL TABLE                                                    *
*   QCB                                                               *
*   DCB                                                               *
*   OPTION TABLE                                                      *
*   PREFIX                                                            *
*   DATA AREA OF MESSAGE                                              *
*   CPB                                                               *
*   SCB                                                               *
*                                                                     *
*ATTRIBUTES:RE-ENTERABLE                                              *
*                                                                     *
*NOTES:THE USER EXIT MUST SAVE AND RESTORE REGISTERS FOR THIS MODULE. *
*                                                                     *
*NOTES:THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL REPRE-   *
*   SENTATION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT TO    *
*   THE ONE USED AT ASSEMBLY TIME. THE CODING HAS BEEN ARRANGED SO    *
*   THAT REDEFINITION OF 'CHARACTER' CONSTANTS,BY REASSEMBLY, WILL    *
*   RESULT IN A CORRECT MODULE FOR THE NEW DEFINITIONS.               *
*                                                                     *
***********************************************************************
         SPACE 3
*REGISTER ASSIGNMENTS
         SPACE
R0       EQU   0                        REMAINING LENGTH OF USER MSG
R1       EQU   1                        ADDRESS OF PARM,USER MSG
R2       EQU   2                        ADDRESS OF IOB-FROM DCB
R3       EQU   3                        ADDRESS OF SCB
R4       EQU   4                        ADDRESS OF LCB
R5       EQU   5                        COUNT OF TERM ENTRIES
R6       EQU   6                        ADDRESS OF PREFIX
R7       EQU   7                        ADDRESS OF QCB
R8       EQU   8                        ADDRESS OF TERM ENTRY
R9       EQU   9                        DESTINATION TERM OFFSET
R10      EQU   10                       ADDRESS OF DCB,MOVE INST
R11      EQU   11                       ADDRESS OF IEDQEA
R12      EQU   12                       BASE REG
R13      EQU   13                       ADDRESS OF AVTSAVE2
R14      EQU   14                       ADDRESS OF CPB
R15      EQU   15                       BRANCH REG
         SPACE
*LOCAL EQUATES                                                   S21101
         SPACE
MULT4    EQU   2                        VALUE FOR MULTIPLICATION S21101
INCR     EQU   4                        INCREMENTAL VALUE        S21101
OPEN     EQU   X'10'                    DCB OPEN LFAG           SA52971
SIZESCB  EQU   X'54'                    DUMMY SCB SIZE          SA52971
CUMASK   EQU   X'01'                    GENERAL POLL CONTROL UNITS99228
CBRDCST  EQU   X'40'                    BROADCAST DCT BIT        S22027
TWO      EQU   2                        TWO
ONE      EQU   1                        VALUE 1                  S22024
         SPACE 3
*COMBINED QCB AND STCB
         SPACE
QNCQCB   DC    X'02'                    QCB
         DC    XL3'0'                   QCB CONTINUED
         DC    F'0'                     QCB CONTINUED
QNCSTCB  DC    AL1(DSPMCPL4)            SUBTASK ENTRY CODE       CLUP21
         DC    AL3(QNCSTCB)             POINTER TO SELF
         SPACE 2
         USING *,R12                    DECLARE
         LR    R12,R15                  BASE REG
IGG019R6 IEDHJN QNC00                   IDENTIFIER AND DATE      S22026
         USING AVTSAVE2,R13             USE DISP SAVE AREA AS AVT      X
                                        BASE REG
         SPACE
         L     R9,AVTRNMPT              ADDRESS OF TERMNAME TABLE
         USING IEDQTNTD,R9
         LH    R5,TNTLEN                NUMBER OF ENTRIES
         N     R5,AVTCLRHI              CLEAR HIGH ORDER HALF WORD
         DROP  R9                       DROP BASE FOR TNT      @Z30X8NJ
         LA    R9,1                     INITIALIZE TERM OFFSET
         SPACE 3
*BEGINNING OF LOOP THROUGH TERMNAME TABLE
         SPACE
QNC20    EQU   *
         LR    R1,R9                    MOVE TERM OFFSET
         L     R15,AVTRNMPT             ADDRESS OF TERMNAME TABLE
         BALR  R14,R15                  GET TERM ENTRY ADDRESS
         LR    R8,R1                    MOVE ADDRESS
         USING IEDQTRM,R8               BASE FOR TERMINAL ENTRY
         TM    TRMDSORG,TRMLGB          IS THIS A 3705 LGB       S22024
         BO    QNC90                    YES, SKIP THIS ENTRY     S22024
         TM    TRMSTATE,TRMSNGLE        CHECK TYPE OF TERM ENTRY
         BNZ   QNC90                    BRANCH IF NOT SINGLE TYPE
         SPACE
*CHECK FOR GENERAL POLL CONTROL UNIT ENTRY                       S99228
*                  NO GOOD MORNING MESSAGE TO CONTROL UNITS      S99228
         SPACE 1
         SR    R7,R7                    CLEAR INDEX REGISTER     S99228
         IC    R7,TRMCHCIN              INSERT DCT ENTRY INDEX   S99228
         BCTR  R7,R0                    REDUCE FOR ENTRY         S99228
         MH    R7,AVTDCTLN              MULTIPLY FOR OFFSET    @YM07404
         A     R7,AVTCSTCS              ADD DCT START ADDR       S99228
         TM    ONE(R7),CUMASK           CONTROL UNIT ENTRY?      S99228
         BO    QNC90                    BRANCH YES               S99228
         L     R7,TRMDESTQ-1            ADDRESS OF QCB
         USING IEDQQCB,R7
         TM    QCBDSFLG,QCBDISK+QCBCORE ANY QUEUEING             S22029
         BZ    QNC90                    BRANCH IF NO             S22029
         SPACE
         L     R10,QCBDCBAD-1           ADDRESS OF DCB
         USING IHADCB,R10
         TM    TRMSTATE,TRMPREF         3705 RESOURCE          @YM07404
         BZ    CKOPEN                   NO, CHECK FOR DCB OPEN   S22024
         LA    R1,IEDQTRM-IEDNTRM       LENGTH OF NEG PREFIX   @YM07404
         SR    R8,R1                    BACKUP TO NEG PREFIX   @YM07404
         DROP  R8                                              @YM07404
         USING IEDNTRM,R8               ADDRESSIBILITY ON PRF  @YM07404
         CLI   TRMTYPE,TRMLUNT          SNA LU                 @YM07404
         BE    QNC30                    BR YES, GEN MESSAGE    @YM07404
         CLI   TRMTYPE,TRMCTERM         DIAL LINE ENTRY        @YM07404
         BE    QNC30                    BR YES, GEN MESSAGE    @YM07404
         CLI   TRMTYPE,TRMPSNA          PRE-SNA TERMINAL       @YM07404
         BE    QNC30                    BR YES, GEN MESSAGE    @YM07404
         B     QNC90                    BR, DO NOT GEN MESSAGE @YM07404
QNC30    EQU   *                                               @YM07404
         AR    R8,R1                    POINT TO TRM PROPER    @YM07404
         DROP  R8                                              @YM07404
         USING IEDQTRM,R8               ADDRESSIBILITY ON TRM  @YM07404
         B     QNC35                    BR TO GEN MESSAGE      @YM07404
CKOPEN   EQU   *                                                 S22024
         SPACE
         TM    DCBOFLGS,OPEN            IS DCB OPEN             SA52971
         BZ    QNC90                    NO, DON'T GEN MSG       SA52971
         SPACE 3
*PASS PARAMETERS TO USER ROUTINE
         SPACE
QNC35    EQU   *                                               @YM07404
         ST    R8,AVTDOUBL              ADDR OF TERM ENTRY
         LH    R1,TRMOPTBL              OPTION TABLE OFFSET
         N     R1,AVTCLRHI              CLEAR HIGH ORDER HALF WORD
         A     R1,AVTOPTPT              ADD BEGINNG ADDR OF OPT TBL
         ST    R1,AVTDOUBL+4            PUT INTO PARM LIST
         L     R1,AVTRDYA               ADDR OF USER EXITS
         TM    AVTBIT2,AVTSTRTN         CHECK FOR RESTART
         L     R15,4(0,R1)              ADDR OF RESTART EXIT
         BO    QNC40                    BRANCH IF RESTART
         L     R15,0(0,R1)              ADDR OF GOOD-MORNING EXIT
QNC40    EQU   *
         LTR   R15,R15                  CHECK FOR USER EXIT
         BZ    QNC95                    BRANCH IF NONE
         LA    R1,AVTDOUBL              ADDRESS OF PARAMETERS
         LA    R13,AVTSAVE4             SAVE AREA
         BALR  R14,R15                  BRANCH TO USER EXIT
         LA    R0,AVTSAVE4-AVTSAVE2
         SR    R13,R0                   RESTORE DISPATCHERS SAVE AR
         LTR   R1,R15                   CHECK FOR MSG TO SEND
         BZ    QNC90                    BRANCH IF NO MSG
         SPACE 3
*BUILD THE FIRST UNIT OF A HEADER BUFFER
         SPACE
         LH    R11,AVTKEYLE             GET KEY (UNIT) LENGTH
         LA    R10,AVTHDRSZ             GET LENGTH OF HEADER PREFIX
         SR    R11,R10                  GET DATA LENGTH
         IC    R0,0(R1)                 GET LENGTH OF USER MSG
         LA    R14,1                    CONSTANT
         SR    R0,R14                   SUBTRACT FOR LENG FIELD
         AR    R1,R14                   GET BEGINNING OF TEXT OF MS0601
         SR    R8,R8
         LR    R2,R11                   GET LENGTH IF 1ST UNIT
QNC98    EQU   *
         LA    R8,1(,R8)                ADD ONE TO COUNT OF UNITS
         CR    R2,R0                    CHECK FOR END OF MESSAGE
         BNL   QNC99                    BRANCH IF END OF MESSAGE
         AH    R2,AVTKEYLE              ADD LENGTH OF BFR -NO PRFIX
         B     QNC98                    GET NEXT UNIT              1029
QNC99    EQU   *
         LR    R2,R0                    GET LENGTH OF PARTIAL BUFFR
         SPACE 3
*IF CORE QUEUEING ONLY, GET BUFFER UNIT FOR MESSAGE FROM AVAILABLE
*BUFFER QUEUE.  FOR DISK QUEUEING, GET CPB AND BUFFER UNIT FROM CPB
*FREEPOOL.
         SPACE
         LA    R10,QNCMOVE1             MOVE 1ST SEGMENT OF MSG
QNC45    EQU   *
         USING IEDQPRF,R6
         USING IEDQCPB,R14              BASE FOR CPB
         TM    QCBDSFLG,QCBDISK         CHECK FOR DISK QUEUES
         BNZ   QNC46                    BRANCH IF DISK QUEUES
         CLC   AVTCADDR,AVTTOTNC        CORE QUEUE FULL        @OZ11205
         BE    QNC90                    YES,DONT QUEUE         @OZ11205
         LH    R14,AVTAVFCT             AVAILABLE BUFFER COUNT
         N     R14,AVTCLRHI             CLEAR HIGH BYTES       @YA07705
         LTR   R14,R14                  CHECK COUNT
         BZ    QNC90                    BRANCH IF NONE AVAILABLE
         BCTR  R14,0                    SUBTRACT ONE
         STH   R14,AVTAVFCT             RESTORE COUNT
         L     R6,AVTBFREB              GET BUFFER FROM POOL
         MVC   AVTBFREB+1(3),5(R6)      MOVE LINK FIELD
         ST    R6,AVTDOUBL+4            ADDR OF 1ST UNIT
         B     QNC51                    BRANCH IF 1ST BUFFER FOR M
         SPACE 3
*GET UNIT FOR DISK QUEUEING
         SPACE
QNC46    EQU   *
         L     R14,AVTFCPB              GET CPB FROM FREEPOOL
         L     R6,CPBXREAF              GET I/O AREA(PREFIX)
QNC51    EQU   *
         XC    0(AVTHDRSZ+AVTUMALN,R6),0(R6) CLEAR PREFIX IN NEW UN1029
         CLC   0(6,R10),QNCMOVE2        CHECK FOR 1ST UNIT IN BUFFR
         BNE   SETPRF                   IF 1ST, SET PREFIX      SA52971
         MVI   DATFLAGS-IEDQDATA(R6),DATNPRFX SET NO PREFIX     SA52971
         B     QNC53                    GO MOVE MESSAGE TEXT    SA52971
         SPACE 1                                                SA52971
SETPRF   EQU   *                                                SA52971
         STH   R9,PRFDEST               PUT TERM OFFSET IN PREFIX
         MVI   PRFSCAN,AVTHDRSZ         SET UP SCAN POINTER-ERRORMG0106
         STC   R8,PRFNBUNT              PUT UNIT COUNT IN BUFFER
         TM    QCBDSFLG,QCBDISK         DISK QUEUEING           SA51078
         BZ    NOPLQCB                  BRANCH IF NO            SA51078
         MVI   PRFNBUNT,0               SET PRIORITY LEVEL IND  SA51078
NOPLQCB  EQU   *                                                SA51078
         LA    R15,AVTHDRSZ(,R2)        SET BUFFER LENGTH       SA52971
         STH   R15,PRFSIZE              STORE IN PREFIX
         SPACE 3
*MOVE MESSAGE FROM USER AREA TO BUFFER UNIT
         SPACE
QNC53    EQU   *
         BCTR  R11,0                    SUBTRACT FOR EXECUTE
         EX    R11,0(R10)               MOVE MSG SEG TO BUFFER UNIT
         LA    R11,1(,R11)              MAKE UP FOR SUBTRACTION
         LA    R1,0(R1,R11)             UPDATE MSG ADDRESS         0601
         SR    R0,R11                   SUB FROM LENGTH TO BE MOVED
         BP    QNC78                    BRANCH IF REMAINING LENGTH     X
                                        TO BE MOVED IS POSITIVE
         AR    R11,R0                   RESTORE PARTIAL LENGTH
QNC78    EQU   *
         TM    DATFLAGS-IEDQDATA(R6),DATNPRFX FIRST UNIT        SA52971
         BZ    QNC54                    YES, GO SET IN QCB      SA52971
         STC   R11,DATCOUNT-IEDQDATA(R6) SET PARTIAL UNIT COUNT SA52971
         MVC   DATFEFO-IEDQDATA(3,R6),AVTDOUBL+5 ASSUME MO QUEUESA52971
         TM    QCBDSFLG,QCBDISK         MO QUEUES               SA52971
         BZ    QNC85                    YES, GO TO ENQUEUE      SA52971
         MVC   DATFEFO-IEDQDATA(3,R6),CPBADDR+1 SET RECORD NUM  SA52971
         B     QNC80                    GO ENQUEUE ON DISK      SA52971
         SPACE 3
*THIS IS THE FIRST UNIT IN THE BUFFER FOR DISK QUEUES
         SPACE
QNC54    EQU   *
         LH    R15,QCBMSGCT             INCREMENT COUNT OF MESSAGES
         LA    R15,1(,R15)              FOR THIS QCB
         STH   R15,QCBMSGCT             RESTORE COUNT
         TM    QCBDSFLG,QCBDISK         CHECK FOR DISK QUEUES
         BZ    QNC85                    BR IF MO QUEUES         SA52971
         LA    R10,AVTNADDR             VALUE OF ADDRESS
         TM    QCBDSFLG,QCBREUS         CHECK DISK TYPE
         BZ    QNC60                    BRANCH IF NON-REUS
         LA    R10,AVTRADDR             VALUE OF ADDRESS FOR REUS
QNC60    EQU   *
         SPACE 3
*THIS IS THE FIRST UNIT IN THE HEADER BUFFER-DISK QUEUES
         SPACE
         MVC   PRFCRCD(3),QCBDNHDR      ASSIGN DISK NO. TO RCD
         MVC   QCBDNHDR(3),1(R10)       ASSIGN AHEAD FOR NEXT HDR
         MVC   PRFNHDR(3),QCBDNHDR      CHAIN NEXT HDR
         LA    R15,INCR                 ADD 4 TO VALUE OF ADDR   S21101
         A     R15,0(,R10)              (NADDR OR RADDR)          0601
         ST    R15,0(,R10)                                         0601
         MVC   CPBADDR+1(3),PRFCRCD     MOVE NO. OF THIS RECORD
         MVC   PRFHQBCK(3),QCBQBACK     CHAIN INTO QBACK CHAIN  SA52971
         MVC   QCBQBACK(3),PRFCRCD                              SA52971
         MVC   QCBPQBCK,PRFCRCD         UPDATE PRI Q BACK PTR   SA51078
         NC    QCBPFEFO,QCBPFEFO        START POINT SET         SA50192
         BNZ   NOTFIRST                 BR YES                  SA50192
*                                       SET INITIAL FEFO        SA50192
         OI    DATFLAGS-IEDQDATA(R6),DATIFEFO                   SA50192
NOTFIRST EQU   *                                                SA50192
         MVC   DATFEFO-IEDQDATA(3,R6),QCBFFEFO CHAIN ONTO TOP   SA52971
*                                         OF FEFO CHAIN         SA52971
         BCT   R8,QNC7105               GET NUM. OF EXTRA UNITS SA52971
         B     QNC80                    BR IF NO EXTRA UNITS    SA52971
QNC7105  EQU   *
         MVC   PRFXTRA(3),1(R10)        ASSIGN DISK NO.S TO EXTRAS
         SLL   R8,MULT4                 MULTIPLY BY 4           SA52971
         A     R8,AVTEZERO(,R10)        ADD TO ADDRESS          SA52971
         ST    R8,AVTEZERO(,R10)        UPDATE ADDRESS          SA52971
         SPACE 3
*SET UP CPB FOR DISK EXCP DRIVER TO WRITE MSG OUT TO DISK
         SPACE
QNC80    EQU   *
         MVI   CPBRDWR,CPBWRKC          WRITE KEY,DATA CODE IN 1ST
         MVI   CPBXDWR,CPBWRC           WRITE DATA CODE IN 2ND CCW
         BAL   R10,QNC965               BRANCH TO EXCP DRIVER505 S21101
         LA    R10,INCR                 ADD 4 TO VALUE OF ADDR   S21101
         A     R10,CPBADDR              GET NEXT SEQUENTIAL RECORD
         ST    R10,CPBADDR              RESTORE ADDRESS
         USING IEDQDATA,R6
         TM    DATFLAGS,DATNPRFX        CHECK FOR PREFIX
         BO    QNC87                    BRANCH IF NO PREFIX
         USING IEDQPRF,R6
         NC    QCBFFEFO(3),QCBFFEFO     WILL THIS BE LAST ON CHNSA52971
         BNZ   NOFLAGS                  NO, SAVED FLAGS ARE OK  SA52971
         MVC   PRFTIC(1),DATFLAGS-IEDQDATA(R6) PRESERVE FLAGS   SA58995
NOFLAGS  EQU   *                                                SA52971
         CLC   QCBPFEFO(3),QCBFFEFO     IS START-SCAN SAME AS   SA52971
*                                         FIRST TO SEND MSG     SA52971
         BE    QNC81                    YES, RESET START SCAN   SA52971
         MVC   DATFLAGS-IEDQDATA(6,R6),QCBDATFL SET TO CHAIN    SA52971
         MVC   CPBADDR+1(3),QCBPFEFO    SET RECORD TO WRITE     SA52971
         CLC   QCBPFEFO(3),QCBLFEFO     IS THIS ALSO LAST ON CHNSA52971
         BE    NOREAD                   YES, WE HAVE SAVED INFO SA52971
         MVI   CPBRDWR,CPBRDC           SET TO READ DATA FIELDS SA52971
         MVI   CPBXDWR,CPBNOPC            ONLY                  SA52971
         BAL   R10,QNC965               GO EXECUTE DISK I/O     SA52971
NOREAD   EQU   *                                                SA52971
         MVC   DATFEFO-IEDQDATA(3,R6),PRFCRCD RS/GM MSG FROM    SA52971
*                                         PFEFO                 SA52971
         MVI   CPBRDWR,CPBWRC           SET TO WRITE DATA FIELD SA52971
         MVI   CPBXDWR,CPBNOPC            ONLY                  SA52971
         BAL   R10,QNC965               GO CHECK 1ST FEFO       SA52971
*        B     QNC83   FOR CASE WHERE SEQUENCE NUMBER IS       @SA64388
*        RESEQUENCED AT WARM START THIS PROVIDES CORRECT NO.   @SA64388
         SPACE  1                                               SA52971
QNC81    EQU   *                                                SA52971
         MVC   QCBPFEFO(3),PRFCRCD      RESET START SCAN AND    SA52971
         MVC   QCBPREVF(3),PRFCRCD      SHUFFLE SPOTS           SA52971
QNC83    EQU   *                                                SA52971
         MVC   CPBADDR+1(3),PRFXTRA     RECORD NO. FOR 1ST XTRA UNT
         NC    QCBFFEFO(3),QCBFFEFO     IS THERE A FIRST TO     SA52971
*              SND MSG                                          SA52971
         BNZ   QNC84                    YES, DON'T BOTHER LFEFO SA52971
         MVC   QCBLFEFO(3),PRFCRCD      SET AS 'LAST-TO-SEND'   SA52971
         MVC   QCBDATFL(1),PRFTIC       PRESERVE FLAGS          SA58995
         XC    QCBDATSQ,QCBDATSQ        CLEAR OUT SEQ NUMBER    SA59195
QNC84    EQU   *                                                SA52971
         MVC   QCBFFEFO(3),PRFCRCD      SET AS FIRST TO SEND    SA52971
         B     QNC87                    GO GET NEXT UNIT        SA52971
         SPACE 3
*BRANCH TO DESTINATION SCHEDULER (IEDQHM02) TO TAKE CARE OF CORE
*QUEUES
         SPACE
QNC85    EQU   *
         TM    DATFLAGS-IEDQDATA(R6),DATNPRFX IS THIS 1ST UNIT  SA52971
         BO    NOGTMN                   NO, SCB IS INITIALIZED  SA52971
         XC    AVTSAVE3+4(SIZESCB),AVTSAVE3+4 CLEAR SCB         SA52971
         LA    R3,AVTSAVE3+4            SET SCB REG             SA52971
         MVC   AVTDOUBL+1(3),QCBLFEFO   LAST MSG ON CORE QUEUE     0601
         L     R15,AVTDOUBL             LAST MSG ON CORE QUEUE     0601
         LA    R15,0(,R15)              CLEAR HIGH ORDER BYTE      0601
         LTR   R15,R15                  CHECK FOR EMPTY QUEUE      0601
         BNZ   QNC4505                  BRANCH IF NOT EMPTY        0601
         LA    R15,QCBFFEFO-(DATFEFO-IEDQDATA) POSITION FOR RCD ADD0601
QNC4505  EQU   *                                                   0601
         MVC   DATFEFO-IEDQDATA(3,R15),AVTDOUBL+5  PUT BFR ON QUEUE0601
         MVC   QCBLFEFO,AVTDOUBL+5      INDICATE BFR AS LAST ON QUE0601
NOGTMN   EQU   *                                                SA52971
         LA    R8,IEDQPQCB              ADDR OF PRIORITY QCB FOR HM0601
         L     R15,AVTHM02              GET ADDRESS OF IEDQHM02
         BALR  R14,R15                  BRANCH
         LTR   R15,R15                  CHECK FOR RETURNED UNIT    1029
         BZ    QNC87                    IF NONE, DON'T RE-POOL  SA52971
NOCORE   EQU   *                                                SA52971
         MVC   5(3,R15),AVTBFREB+1      LINK FIELD -BFR UNIT       1029
         ST    R15,AVTBFREB             RETURN BFR TO FREE POOL    1029
         LH    R15,AVTAVFCT             GET BUFFER COUNT           1029
         N     R15,AVTCLRHI             CLEAR HIGH BYTES       @YA07705
         LA    R15,1(,R15)              ADD 1 TO COUNT OF AVAILABLE1029
         STH   R15,AVTAVFCT             RESTORE COUNT              1029
         SPACE 3
*CHECK FOR END OF MESSAGE
         SPACE
QNC87    EQU   *
         TM    QCBDSFLG,QCBDISK         DISK QUEUING USED       SA67771
         BNZ   QNC88                    YES, BRANCH             SA67771
         USING IEDQSCB,R3               BASE FOR SCB            SA67771
         NC    SCBCCHDR,SCBCCHDR        WAS MSMAX EXCEEDED      SA67771
         BZ    QNC90                    YES, DO NOT QUEUE OTHER SA67771
*                                         UNITS                 SA67771
QNC88    EQU   *                                                SA67771
         LA    R10,QNCMOVE2             MOVE INSTR
         LH    R11,AVTKEYLE             GET UNIT SIZE FOR NEXT  SA52971
*                                         MOVE                  SA52971
         LTR   R0,R0                    CHECK FOR END OF MESSAGE
         BP    QNC45                    BRANCH IF NOT END OF MESSAGE
         SPACE
*END OF LOOP FOR THIS MESSAGE
         SPACE 3
         USING IEDQPRF,R6               BASE FOR PREFIX     0510 S21101
QNC90    EQU   *
         LA    R9,1(,R9)                GET NEXT OFFSET
         CR    R9,R5                    CHECK FOR END OF TERM TABLE
         BNH   QNC20                    BRANCH IF NOT END OF TABLE
         SPACE
*END OF LOOP THROUGH TERMNAME TABLE
         SPACE 3
* MOVE CODE TO THE AVT TO DELETE THIS MODULE AND RETURN TO THE
* DISPATCHER.
         SPACE 1                                                 X03039
QNC95    EQU   *                                                 X03039
         L     R11,AVTEA                DISPATCHER ENTRY POINT   X03039
         MVC   AVTSAVE3+4(MOVELEN),DELSTART MOVE CODE TO DELETE  X03039
         LA    R14,AVTSAVE3+4           BASE FOR DELETE CODE     X03039
         BR    R14                      BRANCH TO DELETE         X03039
         SPACE 3
*SUBROUTINE TO BRANCH TO EXCP DRIVER TO ACCESS MESSAGE QUEUE0510 S21101
*DATA SET ON DISK                                           0510 S21101
         SPACE
QNC965   EQU   *                                            0510 S21101
         MVC   AVTFCPB+1(3),CPBNEXT     DELINK CPB FROM FREE POOLS21101
         SPACE 3
         L     R8,AVTEA                 SAVE ADDRESS OF DISPATCHER
         XC    CPBNEXT,CPBNEXT          CLEAR LINK FIELD
         ST    R14,AVTINCPQ+4           PUT CPB IN INPUT QUEUE
         MVC   AVTINCPQ+1(3),AVTINCPQ+5
         STM   R14,R12,AVTSAVE3+12      SAVE REGS
         MVI   AVTOSECB,0               CLEAR POST BIT
         L     R15,AVTFL                ADDR OF EXCP DRIVER
         LA    R14,QNC82-(DSPDISP-IEDQDISP)
         ST    R14,AVTEA                SET UP RETURN ADDRESS
         MVI   AVTCPBCB+4,X'FF'         PUT DUMMY PRIORITY INTO        X
                                        CPB CLEANUP QCB TO PREVENT     X
                                        CPB FROM BEING POSTED
         BR    R15                      BRANCH TO EXCP DRIVER
QNC82    EQU   *
         WAIT  ECB=AVTOSECB             WAIT FOR COMPLETION OF I/O
         LM    R14,R12,AVTSAVE3+12      RESTORE REGS
         MVI   AVTOSECB,0               CLEAR ECB
         B     SKIPPOST                 SKIP CODE TO POST      @SA70647
*                                        THRESH CLOSE ELEMENT  @SA70647
OFFPOST  EQU   X'18'                    OFFSET FROM DSPDISP    @SA70647
*                                       TO DSPPOST             @SA70647
         ORG   QNC82+OFFPOST            ENTRY POINT IF BRANCH  @SA70647
*                                        FROM EXCP DRIVER IS   @SA70647
*                                        TO DSPPOST            @SA70647
         LM    R14,R12,AVTSAVE3+12      RESTORE REGISTERS      @SA70647
         LR    R11,R8                   SET DISPATCHER BASE    @SA70647
         LA    R1,AVTHRESE              GET ADDR OF THRESHOLD  @SA70647
*                                        CLOSEDOWN ELEMENT     @SA70647
         BAL   R14,DSPPOSTR-IEDQDISP(R11) POST TO OP CONTROL   @SA70647
         B     QNC82                    WAIT FOR I/O           @SA70647
SKIPPOST EQU   *                                               @SA70647
         NC    AVTDKAPQ+1(3),AVTDKAPQ+1 CHECK Q FROM DISK APPENDAGE
         BZ    QNC82                    BRANCH IF INTERRUPT WAS        X
                                        LINE END APPENDAGE NOT DISK
         XC    AVTDKAPQ+1(3),AVTDKAPQ+1 CLEAR CPB FROM QUEUE WHERE     X
                                        IT WAS PUT BY DISK END APND
         ST    R8,AVTEA                 RESTORE ADDR OF DISPATCHER
         EJECT ,                                                 99226
*                                                                99226
* WHEN THE CPB COMES BACK FROM APPENDAGE, A TEST IS MADE TO      99226
* DETERMINE IF THERE WAS A DISK ERROR . IF SO IT PICKS UP A      99226
* WTO ROUTINE IN IGG019RC TO HANDLE IT.                          99226
*                                                                99226
CPBER    EQU   X'01'                    CPB FLAG FROM DISK ERROR 99226
         TM    CPBFLAG,CPBER            DID CPB HAVE I/O ERROR   99226
         BZ    GOODCPB                    NO, GOOD CPB           99226
*                                         YES, I/O ERROR         99226
         LR    R7,R14                   GET CPB FOR WTO          99226
         L     R15,AVTFL                GET ADDRESS OF IGG019RC  99226
         L     R15,4(,R15)              GET 2ND WORD OF RC       99226
         BALR  R14,R15                  CALL DISK ERROR WTO RTN  99226
*                                                                99226
         LM    R14,R12,AVTSAVE3+12      RESTORE SYS REGS         99226
GOODCPB  EQU   *                                                 99226
         MVI   AVTCPBCB+4,0             CLEAR DUMMY PRIORITY
         MVC   CPBNEXT,AVTFCPB+1        RESTORE LINK FIELD
         MVC   AVTFCPB+1(3),AVTSAVE3+13 PUT CPB BACK ON QUEUE
         BR    R10                      RETURN FROM SUBROUTINE
         SPACE
*END OF SUBROUTINE
         SPACE 3
QNCMOVE1 MVC   PRFSHDR(0),0(R1)         MOVE MSG SEGMENT TO HEADER 0601X
                                        PREFIX
QNCMOVE2 MVC   PRFSUNIT(0),0(R1)        MOVE MSG SEGMENT TO UNIT   0601X
                                        WHICH DOES NOT CONTAIN PRFX
* THIS CODE IS EXECUTED FROM THE AVT AND REQUIRES THAT THE BASE
* REGISTER BE CHANGED, THEREFORE IT SHOULD ALWAYS BE LOCATED AFTER
* DATA AREAS AND CONSTANTS.
DELSTART EQU   *                                                 X03039
         USING IEDQDISP,R11             BASE FOR DISPATCHER      X03039
         USING *,R14                    BASE FOR DELETE CODE     X03039
         DELETE EP=IGG019R6             DELETE STARTUP MSG RTN   X03039
         B     DSPDISP                  DISPATCH NEXT SUBTASK    X03039
MOVELEN  EQU   *-DELSTART               LENGTH OF CODE           X03039
         EJECT
         SPACE 3
         TAVTD
         EJECT
         TTRMD
         EJECT
         TTNTD
         EJECT
         TLCBD
         EJECT
         DCBD  DSORG=TX
         EJECT
         TLGBD
         EJECT
         TPRFD
         EJECT
         TDISPD
         EJECT
         TQCBD
         EJECT
         TSCBD                                                  SA67771
         EJECT
         TPRIOR
         EJECT
         TCPBD 3330                     MERLIN VERSION             0421
         EJECT
         TDATAD
         END
