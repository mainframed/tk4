RC TITLE '''IGG019RC'' - EXCP DRIVER'
IGG019RC CSECT
*A155150,155930,175000,636000,644000,939000                      S21101
*C115000-130000,155120,168000,371000,604000,613000-615000,625000 S21101
*C646000,778000,798000,926000                                    S21101
*D171000-173000,587000-592000                                    S21101
*C167000,216000,217000,225000,226000,322000,376000,433000,475000 S22025
*C484000,519000,645000,647000,872000,891000                      S22025
*D551000,552000,910000                                           S22025
*C654000                                                         S21903
*A155950,624270,625080,649000                                    X01004
*C055000,079000,109000-114000,155110,174000-175400,188000-190000,X01004
*C210000-212000,219000-221000,339000,397000-399000,603100,636300 X01004
*D625050,644600                                                  X01004
*D650840                                                       @XA06323
*A650920                                                       @XA06323
*A469000,456000                                                @SA71677
*A048000,155100,155960,201000,209000,235000,266000,323000      @Z40X9QG
*A342000,355000,433000,438000,464000,484000,496000,519000      @Z40X9QG
*A551400,552500,584000,608000,616000,624360,625590,652080      @Z40X9QG
*A655000,739000,768000,815000,847000,897000,903200,925000      @Z40X9QG
*A926000,926240,930000,935000,935600,936200,937000,939000      @Z40X9QG
*A939200,939400                                                @Z40X9QG
*C004000,006000,010000,011000,031000.032000,055000,079000      @Z40X9QG
*C225000,265000,267000,273000,281000,286000,298000,299000      @Z40X9QG
*C305000,306000,307800,312000,314200-315000,317000,318000      @Z40X9QG
*C321000,322000,325000,346000,351000,366000,370000             @Z40X9QG
*C372000,380000,386000,387000,389000,391000,398000,410000      @Z40X9QG
*C480000,481000,482000,624090-624180,650600,893000,931000      @Z40X9QG
*D003000,046000-047000,155120-155130,155330,155510,214000      @Z40X9QG
*D223000,295000,319000,328000,329000-339000                    @Z40X9QG
*C277000,320000,344000,931000-933100                           @OZ26164
* DUMMY APAR                                                   @OZ27328
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
*MODULE NAME - IGG019RC                                        @Z40X9QG
*                                                              @Z40X9QG
*DESCRIPTIVE NAME - EXCP DRIVER                                @Z40X9QG
*                                                                     *
*STATUS - CHANGE LEVEL 9                                       @Z40X9QG
*                                                                     *
*FUNCTION--THIS MODULE TAKES THE CPBS BEGUN BY IEDQFA,                *
*   CHAINS THEM IN PROPER SEQUENCE, ADDS SEEK AND SEARCH-TIC CCWS     *
*   WHERE NECESSARY, CALLS IEDQEB VIA SVC 102 TO REQUEST THAT  @Z40X9QG
*   IOS BE CALLED VIA MACRO TO START DISK I/O,PASSES ADDITIONAL@Z40X9QG
*   CPBS TO THE IOB FOR DISK END APPENDAGE TO RETRY, AND RETURNS TO   *
*   THE DISPATCHER, ENDING DISK I/O SUBTASK.                          *
*                                                                99226
*   A ROUTINE ALSO RESIDES HERE WHICH WRITES A MESSAGE TO THE    99226
*   OPERATOR IN THE EVENT OF DISK ERROR                          99226
*   A DISK WRITE ERROR REQUESTS A QUICK CLOSEDOWN                99226
*   A DISK READ ERROR ISSUES AN ABEND                            99226
*                                                                99226
*                                                                     *
*ENTRY POINTS--ONLY ONE ENTRY, CALL BY IEDQFA                         *
*        'IGG019RC' - START DISK I/O                                  *
*        CALLING SEQUENCE --                                          *
*        L     15,IEDFL IEDFL IS TAG OF WORD CONTAINING ADDR OF       *
*                       IGG019RC                                      *
*        BR    15                                                     *
*                                                                     *
*INPUT--THERE ARE THREE TYPES OF INPUT--REGISTERS, AVT CONSTANTS, AND *
*   THE CPBS PREPARED BY IEDQFA                                       *
*   REGISTER INPUT -                                                  *
*   R15 HAD ADDRESS OF ENTRY POINT                                    *
*   R13 HAS ADDRESS OF AVTSAVE2                                       *
*                                                                     *
*   AVT CONSTANTS -                                                   *
*   AVTINCPQ HAS CHAIN OF CPBS PREPARED BY IEDQFA TO BE PROCESSED     *
*   BY EXCP DRIVER.                                                   *
*   AVTIOBR HAS ADDRESS OF REUSABLE DISK QUEUES IOSBE'S        @Z40X9QG
*   AVTIOBN HAS ADDRESS OF NON-REUSABLE DISK QUEUES IOSBE'S    @Z40X9QG
*   AVTFO HAS ADDRESS OF FIFO Q MANAGER                               *
*   AVTDSKCT HAS NUMBER OF WRITING CPBS, BUMPED BY IEDQFL             *
*                                                                     *
*   CPB FIELDS EXPECTED TO BE ALREADY DONE.                           *
*   CPBRDWR HAS READ OR WRITE CCW COMMAND CODE.                       *
*   CPBXDWR MAY BE NO-OP, READ, OR WRITE CCW COMMAND CODE.            *
*   CPBXREA HAS ADDR OF UNIT OF BUFFER (DATA PORTION).                *
*   CPNEXT POINTS TO THE NEXT CPB ON THE AVTINCPQ (OR ZERO).          *
*   CPBFLAG INDICATES REUSABLE OR NON-REUSABLE DISK MSG QUEUE.        *
*   CPBADDR HAS ABSOLUTE NUMBER OF DISK RECORD TO BE CONVERTED TO     *
*   MBBCCHHR.  THIS VALUE CAME FROM AVTNADDR OR AVTRADDR.             *
*   OTHER FIELDS IN CPB ARE IGNORED.                                  *
*                                                                     *
*OUTPUT--                                                             *
*   AVTINCPQ IS EMPTIED                                        @Z40X9QG
*   ALL CPBS ARE BUILT AND CHAINED.                                   *
*   EXCP HAS BEEN DONE ON ALL EXTENTS FOR WHICH THERE ARE CPBS.       *
*   AVTDSKCT HAS BEEN BUMPED 1 FOR EACH WRITING CPB THAT HAS AT       *
*   LEAST REACHED THE RETQ.                                           *
*                                                                     *
*EXTERNAL ROUTINES--                                                  *
*   AQCTL (SVC 102) TO REQUEST STARTIO MACRO                   @Z40X9QG
*                                                                     *
*EXITS-NORMAL -- AN EXIT IS MADE TO THE DISPATCHER WITH R11 HAVING    *
*   CONTENTS OF AVTEA AND R13 POINTING TO AVTSAVE2.                   *
*                                                                     *
*   IF STARTUP IS IN PROGRESS, CHECKPOINT OPEN HAS MODIFIED AVTEA     *
*   SO EXCP DRIVER ACTUALLY RETURNS TO OPEN.                          *
*                                                                     *
*EXITS-ERROR--N/A.                                                    *
*                                                                     *
*TABLES/WORK AREAS-                                                   *
*   FOLLOWING MACROS ARE USED TO GENERATE DSECTS-TIOBD,TDEBD,TCPBD,   *
*   TAVTD,TDISPD.  CPB AND AVT FIELDS USED DESCRIBED UNDER 'INPUT'.   *
*                                                                     *
*ATTRIBUTES -- RESIDENT, REUSABLE, REFRESHABLE                        *
*   PROBLEM PROGRAM MODE                                              *
*                                                                     *
*NOTES -- THE OPERATION OF THIS SUBROUTINE DEPENDS UPON AN INTERNAL   *
*   REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT  *
*   TO THE ONE USED AT ASSEMBLY TIME.  THE CODING HAS BEEN ARRANGED   *
*   SO THAT REDIFINITION OF 'CHARACTER' CONSTANTS, BY REASSEMBLY,     *
*   WILL RESULT IN A CORRECT MODULE FOR THE NEW DEFINITIONS.          *
*                                                                     *
*   THERE ARE THREE MAJOR STEPS IN THIS ROUTINE--INSERTION BY CC      *
*   PRIORITY, OPTIMIZE DISK CHANNEL PROGRAM, AND AQCTL.        @Z40X9QG
*                                                                     *
*   INSERT--TAKE EACH CPB FROM INPUT Q (AVTINCPQ),CONVERT CPBADDR     *
*   TO MBBCCHHR ABSOLUTE ADDRESS.   USE 'M' AS SEARCH INDEX, FIND     *
*   APPROPRIATE IOB FOR THIS EXTENT.  SEARCH NEWQ OF THIS IOB, USING  *
*   'CC' AS ARGUMENT TO FIND PROPER PLACE FOR NEW CPB.  ORDERING IS   *
*   FIFO PER CYLINDER, BUT CYLINDERS ARE ORDER WITH CURRENT ARM       *
*   POSITION AS HIGHEST PRIORITY.                                     *
*                                                                     *
*   OPTIMIZE--THE NEW CPB IS COMPARED WITH THE PREVIOUS CPB ON THE    *
*   NEWQ CHAIN.  5 CONDITIONS ARE RECOGNIZED, AND ACCORDINGLY ONE     *
*   OF THREE TYPES OF CPBS IS BUILT INTO NEW CPB.                     *
*   CONDITION--                                      CPB TYPE--       *
*   1.  THERE IS NO PREVIOUS CPB                        MEDIUM        *
*   2.  PREVIOUS CPB IS FOR A DIFFERENT CC.             MEDIUM        *
*   3.  PREVIOUS CPB IS FOR SAME CC, BUT DIFFERENT HH.  LARGE         *
*   4.  PREVIOUS CPB IS FOR TRACK, BUT ITS RECORD                     *
*   IS NOT THE ONE IMMEDIATELY PRECEEDING THE RECORD                  *
*   OF THE NEW CPB.                                     MEDIUM        *
*   5.  PREVIOUS CPB IS FOR THE RECORD IMMEDIATELY                    *
*   PRECEEDING THE RECORD OF THE NEW CPB. (READ ONLY)   SMALL         *
*                                                                     *
*   LARGE CPB STARTS WITH SEEK, SEARCH, AND TIC CCWS.  IT IS          *
*   USED TO CHANGE HEADS ON SAME CYLINDER ONLY.                       *
*   MEDIUM CPB STARTS WITH SEARCH AND TIC CCWS.  IT IS USED TO        *
*   ACCESS NON-SEQUENTIAL RECORDS ON THE SAME TRACK AS THE PREVIOUS   *
*   CPB.  ALSO USED TO START NEW CHANNEL PROGRAM ON A NEW CYLINDER.   *
*   SMALL CPB HAS ONLY READ/WRITE CCWS.  IT IS USED FOR ACCESSING     *
*   SEQUENTIAL RECORDS ON ONE TRACK ONLY.                             *
*                                                                     *
*   AQCTL - AFTER ALL CPBS HAVE BEEN BUILT ONTO NEW Q, EACH    @Z40X9QG
*   IOSBE IS CHECKED FOR CPB'S AVAILABLE. IF THE               @Z40X9QG
*   RETRY QUEUE HAS SOME AND THE IOSBE IS READY FOR I/O,       @Z40X9QG
*   SHIFT RETRY QUEUE CPB'S TO IOSVST AND SHIFT ONE CYLINDER   @Z40X9QG
*   OF CPB'S FROM NEW QUEUE TO RETRY QUEUE. ISSUE SVC 102      @Z40X9QG
*   TO HAVE I/O STARTED. WHEN ALL EXTENTS WITH CPB'S ARE       @Z40X9QG
*   RUNNING, RETURN TO TCAM DISPATCHER.                        @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         EJECT                                                 @Z40X9QG
R15      EQU   15                       ENTRY ADDRESS, WORK REG  S21101
R14      EQU   14                       RETURN ADDR FROM INTERNALS21101
*                                         SUBROUTINE, WORK REG   S21101
R13      EQU   13                       SAVEAREA ADDRESS         S21101
R12      EQU   12                       UNUSED BY THIS NAME      S21101
R11      EQU   11                       DISPATCHER ADDRESS       S21101
R10      EQU   10                       UNUSED BY THIS NAME      S21101
R9       EQU   9                        UNUSED BY THIS NAME      S21101
R8       EQU   8                        NUMBER OF EXTENTS        S21101
R7       EQU   7                        UNUSED BY THIS NAME      S21101
R6       EQU   6                        RETURN ADDR FROM INTERNALS21101
*                                         ROUTINES               S21101
R5       EQU   5                        UNUSED BY THIS NAME      S21101
R4       EQU   4                        UNUSED BY THIS NAME      S21101
R3       EQU   3                        WORK REG                 S21101
R2       EQU   2                        WORK REG, DCB,DEB,       S21101
*                                         UCB ADDRS              S21101
*                                         PARM PASSER TO SECTOR  S21101
*                                         CONVERT ROUTINE        S21101
R1       EQU   1                        WORK REG, PARAMETER PASS S21101
R0       EQU   0                        WORK REG, PARAMETER PASS S21101
*                                         TO SECTOR CONVERT      S21101
*                                         ROUTINE                S21101
*                                                                S21101
RM       EQU   15                       M OF MBBCCHHR (EXTENT)
RCC      EQU   15                       CYLINDER ID FROM CPB BEING
*                                         ADDED TO NEWQ
RIOBINDX EQU   14                       HAS SIZE OF AN IOB
RAVT     EQU   13                       AVT DSECT BASE
RBASE    EQU   12                       PROGRAM BASE
RIOSBE   EQU   11                       BASE OF IOSBE DSECT    @Z40X9QG
RDUMCPB  EQU   10                       MODIFIED POINTER TO NEW CPB
RNEXTCPB EQU   10                       PT TO NEXT CPB ON NEWQ
RSKIP    EQU   9                        ADDR OF EITHER 'DOTEST'
*                                         OR 'SKIPTEST'
RLASTCPB EQU   4                        PT TO PREVIOUS CPB ON NEWQ
RCPB     EQU   7                        BASE OF CPB DSECT. THE CPB
*                                         TO BE ADDED TO NEWQ
RPREFIX  EQU   6                        PREFIX DSECT BASE        99226
RDEB     EQU   5                        DEB DSECT BASE
RNEXTCC  EQU   2                        CYLINDER ID OF NEXT CPB ON
*                                         NEWQ
RARM     EQU   0                        CYLINDER ID OF CURRENT ARM
*                                         POSITION FROM IOBXCC
         USING *,R15                    TEMPORARY PROGRAM BASE
         USING IEDQCPB,RCPB             CPB DSECT BASE
         USING IEDQAVTD,RAVT            AVT DSECT BASE
         USING IOSBE,RIOSBE             IOSBE ADDRESSABILITY
         USING IEDQDEB,RDEB             DEB DSECT
         USING IEDQPRF,RPREFIX          PREFIX DSECT             99226
         EJECT                                                 @Z40X9QG
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*                       LOCAL EQUATES
*                                                                S21101
ZERO     EQU   0                        ZERO                   @Z40X9QG
HI       EQU   8                        MASK TO ICM HI-BYTE      X01004
FF       EQU   X'FF'                    DUMMY TIC OP CODE
RPS      EQU   X'10'                    RPS DEVICE IN UCBTBYT2   S21101
CCWLEN   EQU   8                        LENGTH OF CCW
CCWFLAG  EQU   4                        OFFSET INTO CCW OF FLAG BYTE
SAVECCW  EQU   12                       OFFSET INTO SAVE2 WHERE 3
*                                         CCWS ARE SAVED
THREECCW EQU   20                       LENGTH OF CCWS SAVED IN SAVE2
HISREG15 EQU   16                       OFFSET INTO SAVEAREA OF R15
HISREG14 EQU   12                       OFFSET INTO SAVEAREA OF R14
LBB      EQU   2                        LENGTH OF BB IN MBBCCHHR
LHHR     EQU   2                        LENGTH OF HH IN MBBCCHHR
LCC      EQU   2                        LENGTH OF CC IN MBBCCHHR
INC      EQU   1                        INCREMENTOR TO NEXT BYTE
FULLSHIF EQU   32                       DOUBLE REG SHIFT ENTIRE REG
BYTESHIF EQU   8                        SHIFT COUNT FOR ONE BYTE
THRESHFF EQU   X'FF'                    VALUE IN AVTHRESS - MEANS
*                                         ELE NO YET ACTIVATED
THRESHF7 EQU   X'F7'                    VALUE IN AVTHRESS - MEANS
*                                         ELE IS REQUESTED TO BE
*                                         POSTED UPON EXIT FROM '-RC'
THRESHF0 EQU   X'F0'                    VALUE IN AVTHRESS - MEANS
*                                         ELE HAS BEEN POSTED TO READY
ABEND1   EQU   1                        ABEND SUBCODE, OUT OF
*                                         SPACE, NON-REUS DISK
ABEND5   EQU   5                        ABEND SUBCODE, DISK DCB
*                                         NOT OPEN
ROUNDER  EQU   3                        VALUE FOR RRN ADJUSTMENT S21101
LORDER   EQU   3                        OFFSET VALUE             S21101
TWO      EQU   2                        MASK TO ICM BYTE 3       X01004
AD       EQU   7                        MASK TO ICM ADDRESS      X01004
ALL      EQU   15                       EFFECTIVE LOAD ICM MASK  X01004
DIV4     EQU   2                        VALUE FOR RRN ADJUSTMENT S21101
         EJECT                                                 @Z40X9QG
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*                       ENTRY - EXCP DRIVER
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         BAL   RBASE,LOOP               SKIP CONSTANTS AND
*                                         SET PROGRAM BASE
         DROP  R15                      FORGET TEMPORARY
         USING *,RBASE                  ESTABLISH ADDRESSABILITY
*
*                                                                99226
* THIS CONSTANT ALLOWS ANOTHER ROUTINE ACCESS TO THE DISK ERP WTO99226
*                                                                99226
         DC    A(WTORTN)                WTO ROUTINE FOR DISK ERP 99226
IGG019RC IEDHJN ,                                                S22025
*
LOOP     EQU   *
         LA    RBASE,AVTEZERO(,RBASE)   CLEAR SWITCH IN BASE REG.X01004
         SR    RCPB,RCPB                CLEAR FOR ICM            X01004
         ICM   RCPB,AD,AVTINCPQ+INC     FIRST CPB ON INPUT QUEUE X01004
*                                       IS QUEUE EMPTY           X01004
         BZ    CRANKIT                    YES, NO MORE CPBS      S21101
*                                         NO, GOT A CPB          S21101
         MVC   AVTINCPQ+INC(L'AVTINCPQ-INC),CPBNEXT LEAVE REST ON CPBS
         XC    CPBNEXT,CPBNEXT          ZERO FORWARD POINTER
         MVI   CPBXWFL,AVTEZERO         CLEAR FLAG BYTE 2ND CCW
         CLI   CPBXDWR,CPBNOPC          IS SECOND CCW A NO-OP
         BE    NOPCODE                    YES, IT IS A NOP
*                                         NO, IT IS READ/WRITE
         MVI   CPBRWFL,CPBCDC+CPBSLIC   SET 'DATA CHAIN' AND 'SLI'
         MVC   CPBCOUNT,AVTKEYLE        SET KEYLENGTH
         L     R15,CPBXREAF             GET UNIT ADDRESS
         LA    R15,AVTUMALN(,R15)       BUMP BY SIZE OF UNIT
*                                         MANAGEMENT AREA TO ADDR
*                                         OF KEY PORTION OF UNIT
         STCM  R15,AD,CPBAREA           SET KEY BUFFER ADDRESS   X01004
         B     DISKCPB                  GO PROCESS CPB ONTO NEWQ
*
NOPCODE  EQU   *
         MVI   CPBRWFL,AVTEZERO         CLEAR CCWFLAG BITS 1ST CCW
         MVI   CPBXDWR,FF               SET NO-OP TO DUMMY 'TIC'
         LA    R15,AVTDATLN             GET SIZE OF DATA RECORD
         STH   R15,CPBCOUNT               TO FIRST CCW LENGTH FIELD
         MVC   CPBAREA,CPBXREA          DATA WRITTEN FROM FIRST
*                                         OF UNIT
         B     DISKCPB                  GO PROCESS CPB ONTO NEWQ
*
         EJECT                                                 @Z40X9QG
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
CRANKIT  EQU   *
*
* BEFORE RETURNING TO THE DISPATCHER, EXCP DRIVER MUST CHECK THE
* CHAINS OF IOSBE'S (REUS AND NON-REUS) TO MAKE                @Z40X9QG
* SURE NO CPB IS UNNECESSARILY WAITING FOR EXCP.
*
************************************************************** @Z40X9QG
         SPACE 1                                               @Z40X9QG
         ICM   RIOSBE,ALL,AVTIOBR       FIRST IOSBE FOR REUS   @Z40X9QG
*                                       IS REUSEABLE DISK USED   X01004
         BZ    TRYNONRU                   NO, GO DO NON-REUS
         L     RDEB,AVTADEBR            GET DEB FOR REUSABLE DISK
         BAL   R6,CHECKIOB              CHK FOR IOSBE READY    @Z40X9QG
*                                       FOR EXCP                 S22025
TRYNONRU EQU   *
         ICM   RIOSBE,ALL,AVTIOBN       1ST IOSBE FOR NON-REUS @Z40X9QG
*                                       IS NON REUSEABLE DISK    X01004
         BZ    EXIT                       NO, QUIT
         L     RDEB,AVTADEBN            GET DEB FOR NON-REUS
         BAL   R6,CHECKIOB              CHK FOR IOSBE READY    @Z40X9QG
*                                       FOR EXCP                 S22025
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
EXIT     EQU   *
         L     R11,AVTEA
         CLI   AVTHRESS,THRESHF7        DOES ELE NEED POSTING
         BE    PASSELE                    YES, GO POST IT
*                                         NO, DO NOT POST IT
         USING IEDQDISP,R11
         B     DSPDISP                  RETURN TO DISPATCHER
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*
* IF STARTUP IS IN PROGRESS, CHECKPOINT OPEN IS USING CPBS TO LOOK
* AT THE DISK MESSAGE QUEUE DATA SETS.  OPEN IS CALLING EXCP DRIVER
* AS A SUBROUTINE TO FINISH BUILDING THE CPBS AND GET I/O STARTED
* ON THE DISK.  NORMALLY EXCP DRIVER IS NOT A SUBROUTINE, SINCE
* IEDQFA EXITS TO IT AND IT IN TURN EXITS TO THE DISPATCHER.
* HOWEVER, CHECKPOINT OPEN CAUSES IT TO BE A SUBROUTINE WHICH
* RETURNS TO OPEN (NOT EXITS TO DISPATCHER) BY PUTTING INTO AVTEA
* THE ADDRESS OF THE LOCATION TO WHICH EXCP DRIVER IS TO RETURN,
* MODIFIED BY THE OFFSET OF 'DSPDISP'.  OPEN ATTENDS TO SAVING AND
* RESTORING OF REGISTERS, USING R13 POINTING TO AVTSAVE2.  OPEN ALSO
* RESETS AVTEA BACK TO THE ADDRESS OF THE DISPATCHER, AND RESETS
* CERTAIN VALUES BACK INTO AVTSAVE2 WHICH ARE EXPECTED TO HAVE BEEN
* ASSEMBLED THERE.  AVTSAVE2 IS DISTROYED BY EXCP DRIVER, THUS THE
* NEED FOR REPAIR BY OPEN UPON COMPLETION OF ALL DISK I/O REQUESTS
* TO EXCP DRIVER.  THIS USE AS A SUBROUTINE PREVENTS PREMATURE
* ACTIVATION OF THE DISPATCHER.  WHEN OPEN GETS CONTROL BACK FROM
* EXCP DRIVER, IT ISSUES 'WAIT' ON AVTOSECB, WHICH WILL BE POSTED
* BY DISK APPENDAGE UPON COMPLETION OF I/O.
*
PASSELE  EQU   *
         LA    R1,AVTHRESE              PASS ADDRESS OF NON-REUS
*                                         THRESHOLD CLOSEDOWN ELE
*                                         TO DISPATCHER TO BE POSTED
*                                         TO 'FLUSH' CLOSE MCP
         MVI   AVTHRESS,THRESHF0        MARK ELEMENT 'POSTED'
         B     DSPPOST                  EXIT TO DISPATCHER
*
         DROP  R11
         USING IOSBE,RIOSBE             IOSBE ADDRESSABILITY   @Z40X9QG
*
         EJECT                                                 @Z40X9QG
         SPACE 1                                               @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* CHECK FOR IOSBE READY FOR NEW I/O                          * @Z40X9QG
*              INPUT: RIOSBE - PTR TO 1ST IOSBE              * @Z40X9QG
*                     RDEB   - PTR TO DEB                    * @Z40X9QG
*                     R6     - RETURN ADDRESS                * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
         SPACE 1                                               @Z40X9QG
CHECKIOB EQU   *                                               @Z40X9QG
         SR    R8,R8                    CLEAR COUNTER REGISTER
         IC    R8,DEBNMEXT              GET NUMBER OF EXTENTS
LOCK     EQU   *
         TS    IOSBELCK                 LOCK DOOR;FORBID DISK  @OZ26164
*                                       END TO RETRY             Y02027
         BNE   LOCK                     IF LOCKED, DISK END      Y02027
*                                       RETRY IS IN PROGRESS     Y02027
         ICM   RCPB,AD,IOSBERET         IS RETRY QUEUE ZERO    @Z40X9QG
         BNZ   GOODRETQ                   NO, SOMETHING ON RETQ
*                                         YES, RETQ IS EMPTY
TESTNEWQ EQU   *
         ICM   RCPB,AD,IOSBENEW         IS NEW QUEUE ZERO      @Z40X9QG
         BZ    UNLOCK                     YES, GO UNLOCK DOOR
*                                         NO, SOMETHING ON NEWQ
SAMECYL  EQU   *
         LR    RLASTCPB,RCPB            REMEMBER THIS CPB BEFORE
*                                         GOING TO NEXT CPB
         ICM   RCPB,AD,CPBNEXT          IS THIS THE LAST CPB     Y02027
         BZ    LASTCPB                    YES, LAST CPB
*                                         NO, THERE IS ANOTHER CPB
         CLC   IOSBEXCC,CPBCCHHR        IS NEW CPB FOR SAME CYL@Z40X9QG
*                                         AS FIRST CPB         @Z40X9QG
         BE    SAMECYL                    YES, KEEP LOOKING
*                                         NO, DIFFERENT CYLINDER
         XC    CPBNEXT-IEDQCPB(,RLASTCPB),CPBNEXT-IEDQCPB(RLASTCPB)
*                                       CLEAR POINTER OF LAST CPB
*                                         TO BE MOVED TO RETQ
         MVC   IOSBEXCC,CPBCCHHR        SAVE CYL ID OF NEXT CPB@Z40X9QG
*                                         AS TOP PRIORITY CYL  @Z40X9QG
         EJECT                                                 @Z40X9QG
LASTCPB  EQU   *
         MVC   IOSBERET,IOSBENEW        ENQUEUE FIRST CPBS ONTO@Z40X9QG
*                                         RETQ FROM NEWQ
         STCM  RCPB,AD,IOSBENEW         PUT FIRST CPB WITH     @Z40X9QG
*                                         DIFFERENT CYL ONTO   @Z40X9QG
*                                         NEWQ IN FIRST PLACE  @Z40X9QG
GOODRETQ EQU   *                        RETRY Q HAS SOMETHING
         TM    IOSBEFLG,IOSBERDY        CAN IOSBE ACCEPT NEW IO@Z40X9QG
         BO    STARTIO                  YES, BRANCH            @Z40X9QG
         MVI   IOSBELCK,AVTEZERO        UNLOCK RETRY DOOR      @OZ26164
         TM    IOSBEFLG,IOSBERDY        CAN IOSBE ACCEPT NEW IO@Z40X9QG
         BO    LOCK                     YES, BRANCH            @Z40X9QG
         B     NEXTIOB                  GO CHECK NEXT EXTENT
*
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* ISSUE AQCTL TO REQUEST THAT STARTIO BE ISSUED              * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
STARTIO  EQU   *                                               @Z40X9QG
         MVC   IOSBECPB,IOSBERET        PASS RET QUEUE TO      @Z40X9QG
*                                       SVC 102 AS PARAMETER   @Z40X9QG
         XC    IOSBERET,IOSBERET        CLEAR RETRY QUEUE      @Z40X9QG
         NI    IOSBEFLG,IOSBEBUS        SET IOSBE BUSY         @Z40X9QG
         LR    R1,RIOSBE                SET IOSBE AS PARM LIST @Z40X9QG
         AQCTL                          ISSUE SVC 102          @Z40X9QG
         B     TESTNEWQ                 IF ANYTHING IS ON NEWQ, GO
*                                         PUT IT TO RETQ FOR DISK
*                                         END APPENDAGE
         SPACE 2                                               @Z40X9QG
UNLOCK   EQU   *
         MVI   IOSBELCK,AVTEZERO        UNLOCK RETRY DOOR      @OZ26164
NEXTIOB  EQU   *
         LA    RIOSBE,IOSBELEN(,RIOSBE) BUMP TO NEXT IOSBE     @Z40X9QG
         BCT   R8,LOCK                  GO CHECK NEXT EXTENT,
*                                         IF ANY
         BR    R6                       FINISHED WITH THIS DISK
*                                         RETURN TO MAIN CODE
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*
* SEND CPB TO THE DISK ADDRESS CONVERT ROUTINE FOR IT TO GENERATE
* THE ABSOLUTE DISK ADDRESS IN THE FORM OF MBBCCHHR.
*
************************************************************** @Z40X9QG
DISKCPB EQU *
         LA    R15,IEDQFP               GET ADDR OF CONVERT ROUTINE
         BALR  R14,R15                  CALL CONVERT ROUTINE
*
         TM    CPBRDWR,CPBWRITB         IS THIS CPB FOR 'WRITE'
         BO    SKIPBUMP                   YES, SKIP BUMPING COUNTER
*                                         NO, COUNT READING CPBS
         LH    R1,AVTDSKCT              GET PREVIOUS COUNT
         LA    R1,INC(,R1)              BUMP COUNTER
         STH   R1,AVTDSKCT              RESTORE NEW COUNT
         SPACE 1                                               @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* SET RIOSBE TO FIRST IOSBE FOR THIS QUEUE                   * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
SKIPBUMP EQU   *                                               @Z40X9QG
         L     RIOSBE,AVTIOBR           GET ADDR OF 1ST IOSBE  @Z40X9QG
*                                         FOR REUS QUEUES      @Z40X9QG
         TM    CPBADDR+LORDER,CPBQTYPE  IS CPB FOR REUSABLE DISK S21101
         BO    SKIP                     YES, BRANCH            @Z40X9QG
         L     RIOSBE,AVTIOBN           GET ADDR OF 1ST IOSBE  @Z40X9QG
*                                         FOR NON-REUS QUEUES  @Z40X9QG
         SPACE 2                                               @Z40X9QG
************************************************************** @Z40X9QG
*                                                            * @Z40X9QG
* STEP THROUGH THE CHAIN OF IOSBE'S TO FIND ONE              * @Z40X9QG
* CORRESPONDING TO THE EXTENT SPECIFIED BY                   * @Z40X9QG
* M OF MBBCCHHR IN CPB                                       * @Z40X9QG
*                                                            * @Z40X9QG
************************************************************** @Z40X9QG
SKIP     EQU   *
         SR    RM,RM                    CLEAR WORK REG
         IC    RM,CPBABSAD              GET M OF MBBCCHHR
         LA    RIOBINDX,IOSBELEN        GET SIZE OF ONE IOSBE  @Z40X9QG
         MR    RM-1,RIOBINDX            GET TOTAL SIZE OF IOSBE@Z40X9QG
*                                         TO BE SKIPPED
         LA    RIOSBE,ZERO(RM,RIOSBE)   BUMP TO NEXT IOSBE     @Z40X9QG
         EJECT                                                 @Z40X9QG
*
* THE NEW CPB (RCPB) IS TO BE PLACED ON THE NEW Q OF THE IOSBE @Z40X9QG
* ORDER IS IN ASCENDING CYLINDER ID, WITH CURRENT ARM POSITION BEING
* THE TOP PRIORITY CYLINDER.  WITHIN A GROUP OF CPBS ALL FOR THE
* SAME CYLINDER, A NEW CPB FOR THE SAME CYLINDER IS ADDED AT THE
* END OF THAT GROUP OF CPBS, KEEPING FIFO ORDER WITHIN THE CYLINDER
*
         SR    RLASTCPB,RLASTCPB        CLEAR FOR ICM            X01004
         ICM   RLASTCPB,AD,IOSBENEW     FIRST CPB ON NEW QUEUE @Z40X9QG
         BZ    ZERONEWQ                   YES, NEWQ IS EMPTY
*                                         NO, NEWQ HAS CPB(S)
         L     RNEXTCPB,CPBNEXTF-IEDQCPB(0,RLASTCPB) GET ADDRESS OF
*                                         2ND CPB ON NEWQ
         LA    RNEXTCPB,0(0,RNEXTCPB)   CLEAR HIGH BYTE
*
* RCPB HAS ADDRESS OF NEW CPB TO BE ADDED.
* RLASTCPB HAS ADDRESS OF 1ST CPB ON NEWQ.
* RNEXTCPB HAS ADDRESS OF 2ND CPB (IF ANY) ON NEWQ.
*
         LH    RARM,IOSBEXCC            GET CURRENT ARM POS.   @Z40X9QG
         MVC   AVTDOUBL(LCC),CPBCCHHR   GET CYL ID FROM MBBCCHHR
         LH    RCC,AVTDOUBL               OF NEW CPB TO BE ADDED
         CR    RCC,RARM                 IS NEW CYL (RCC) GE CYL OF
*                                         CURRENT ARM POSITION (RARM)
         BL    SETEX                      NO, NEW CYL IS LESS THAN OLD
*                                         YES, NEW CYL IS GE OLD
         LA    RSKIP,DOTEST             SET SWITCH
*
* STEP THROUGH CPBS ON NEWQ LOOKING FOR PLACE FOR NEW CPB.
*
CPBLOOP  EQU   *
         LTR   RNEXTCPB,RNEXTCPB        IS THERE ANOTHER CPB ON NEWQ
         BNZ   ANOTHCPB                   YES,THERE IS ANOTHER CPB
*                                         NO, THIS IS THE LAST ONE
*
* RLASTCPB POINTS TO THE LAST CPB ON THE END OF THE NEWQ.
* RCPB HAS THE ADDRESS OF THE CPB TO BE ADDED AT THE END OF THE NEWQ.
*
CHAINEW  EQU   *
         STCM  RCPB,AD,CPBNEXT-IEDQCPB(RLASTCPB) CHAIN NEW CPB   Y02027
*                                       AT END OF NEWQ           Y02027
         B     BUILDCCW                 BRANCH TO BUILD DISK CCW S22025
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*
* RLASTCPB POINTS TO A CPB ON THE NEWQ, RNEXTCPB POINTS TO THE CPB
* WHICH FOLLOWS IT, RCPB IS THE NEW CPB WHICH MIGHT BE INSERTED
* BETWEEN THESE TWO, OR 2 OTHERS FURTHER ON.
*
************************************************************** @Z40X9QG
         SPACE 1                                               @Z40X9QG
ANOTHCPB EQU   *
         MVC   AVTDOUBL(LCC),CPBCCHHR-IEDQCPB(RNEXTCPB) GET CYL OF
         LH    RNEXTCC,AVTDOUBL           NEXT CPB
         BR    RSKIP                    GO TO EITHER 'DOTEST' OR
*                                         GO TO 'SKIPTEST'
DOTEST   EQU   *
         CR    RNEXTCC,RARM             IS CYL OF NEXT CPB(RNEXTCC)
*                                         LT CYL OF RET Q(RARM)
         BL    INSNEW                     YES,INSERT NEW CPB BEFORE
*                                           LAST CPB
SKIPTEST EQU   *                          NO, CONTINUE
ANOTHCP  EQU   *
         CR    RNEXTCC,RCC              IS CYL OF NEXT CPB (RNEXTCC)
*                                       GT CYL OF NEW CPB (RCC)
         BH    INSNEW                     YES, NEXT ONE IS HIGHER
*                                           THAN NEW CPB
*                                         NO, NEXT ONE IS LESS THAN
*                                           OR EQUAL TO NEW CPB
GETNEXT  EQU   *                                               @SA71677
         LR    RLASTCPB,RNEXTCPB        WHAT WAS 'NEXT' CPB BECOMES
*                                         THE 'PREVIOUS' OR 'LAST' CPB
         ICM   RNEXTCPB,AD,CPBNEXT-IEDQCPB(RLASTCPB) GET ADDRESS Y02027
*                                       OF NEXT CPB ON NEWQ      Y02027
         B     CPBLOOP                  GO SEE IF THE NEW CPB CAN
*                                         BE INSERTED BETWEEN THESE
*                                         NEXT TWO CPBS.
         EJECT                                                 @Z40X9QG
*
* RCPB IS TO BE INSERTED BETWEEN THE CPBS POINTED TO BY RNEXTCPB
* AND RLASTCPB (AFTER RLASTCPB AND BEFORE RNEXTCPB)
*
INSNEW   EQU   *
         CLC   CPBCCHHR-IEDQCPB(LCC,RLASTCPB),CPBCCHHR-IEDQCPB(RNEXTCPB)
               ) ARE NEXT AND LAST CPBS ON SAME CYLINDER       @SA71677
         BE    GETNEXT                  YES, DON'T INSERT HERE @SA71677
         STCM  RNEXTCPB,AD,CPBNEXT      HANG NEXT CPB FROM       Y02027
*                                       NEW CPB                  Y02027
         STCM  RCPB,AD,CPBNEXT-IEDQCPB(RLASTCPB) CHAIN NEW CPB   Y02027
*                                       FROM PREVIOUS CPB        Y02027
         B     BUILDCCW                 BRANCH TO BUILD DISK CCW S22025
*
* THE NEWQ IS EMPTY.  PUT THE NEW CPB ON THE NEWQ.
*
ZERONEWQ EQU   *
         MVC   IOSBEXCC,CPBCCHHR        SAVE CYL ID OF NEW CPB @Z40X9QG
*                                         AS TOP PRIORITY CYL  @Z40X9QG
         STCM  RCPB,AD,IOSBENEW         HANG NEW CPB ONTO NEWQ @Z40X9QG
         B     BUILDCCW                 BRANCH TO BUILD DISK CCW S22025
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*
* THE CYLINDER (IN RCC) OF THE NEW CPB (RCPB) IS LESS THAN THE
* CURRENT ARM POSITION (RARM).
*
* RCC HAS CYLINDER ID OF NEW CPB.
* RLASTCPB POINTS TO FIRST CPB ON NEWQ.
* RNEXTCPB POINTS TO 2ND CPB ON NEWQ.
*
* SEARCH FOR THE CPB ON THE NEWQ THAT IS NOT SAME OR GREATER THAN
* THE PREVIOUS CPB'S CYL ID, BUT THE CPB WHOSE CYL ID IS LESS THAN
* THE CURRENT ARM POSITION (OR FIND END OF NEWQ).
*
************************************************************** @Z40X9QG
         SPACE 2                                               @Z40X9QG
NEWLOW   EQU   *
         MVC   AVTDOUBL(LCC),CPBCCHHR-IEDQCPB(RNEXTCPB) GET CYL OF
         LH    RNEXTCC,AVTDOUBL           NEXT CPB
         CR    RNEXTCC,RARM             IS CYL OF NEXT CPB(RNEXTCC)
*                                         LESS THAN CYL OF CURRENT
*                                         ARM POSITION (RARM)
         BL    ANOTHCP                    YES,RNEXTCPB IS BELOW
*                                           CURRENT ARM POSITION
*                                         NO, KEEP LOOKING
         LR    RLASTCPB,RNEXTCPB        WHAT WAS 'NEXT' CPB BECOMES
*                                         'PREVIOUS' OR 'LAST' CPB
         L     RNEXTCPB,CPBNEXTF-IEDQCPB(0,RNEXTCPB) LOOK AT A NEW
*                                         'NEXT' CPB
         LA    RNEXTCPB,0(0,RNEXTCPB)   CLEAR HIGH BYTE
NEWLOWOK EQU   *
         LTR   RNEXTCPB,RNEXTCPB        IS THERE ANOTHER CPB
         BZ    CHAINEW                    NO, PUT NEW CPB AT END
*                                           OF NEWQ
         B     NEWLOW                     YES, KEEP LOOKING
*
SETEX    EQU   *
         LA    RSKIP,SKIPTEST           SET SWITCH
         B     NEWLOWOK                 CHECK FOR ANOTHER CPB    S22025
         EJECT                                                 @Z40X9QG
*
* RCPB HAS THE ADDRESS OF THE CPB JUST ADDED TO THE NEWQ.
* RLASTCPB HAS THE ADDRESS OF THE CPB ON THE NEWQ JUST BEFORE THE
* CPB JUST ADDED (RCPB).  RLASTCPB IS ZERO IF RCPB IS THE ONLY
* CPB ON NEWQ.
*
* BUILD CHANNEL PROGRAM FOR DISK IN CPB.
*
BUILDCCW EQU   *
         MVC   SAVECCW(THREECCW,R13),CPBRDWR SAVE 2 READ/WRITE
*                                         CCWS AND TIC
         LR    RDUMCPB,RCPB             SET SECONDARY CPB BASE REG
         LTR   RLASTCPB,RLASTCPB        IS THERE ANOTHER CPB ON NEW
*                                         Q JUST BEFORE THIS ONE
         BZ    NOPREV                     NO, THIS IS THE ONLY ONE
*                                         YES, THERE IS A PREVIOUS
*                                           CPB
         CLC   CPBCCHHR-IEDQCPB(LCC,RLASTCPB),CPBCCHHR IS CYL OF
*                                         PREVIOUS CPB SAME AS CYL
*                                         OF NEW CPB
         BE    EQUALCC                    YES, CYLINDERS ARE ALIKE
*                                         NO, DIFFERENT CYLINDERS
*
NOPREV   EQU   *
         SH    RDUMCPB,HALF8            MODIFY SECONDARY CPB BASE
*                                         FOR MEDIUM CPB
         BAL   R6,MEDIUMCP              GO BUILD MEDIUM CPB
*
ZEROADDR EQU   *
         NC    CPBADDR+INC(L'CPBADDR-INC),CPBADDR+INC IS ADDRESS 0 ****
         BNZ   LOOP                       NO, FINISHED WITH NEW CPB
* THIS SHOULD NEVER OCCUR.   BUT, JUST IN CASE, BETTER KILL IT NOW
* BEFORE ALL TRACE OF WHY THE FALSE REQUEST WAS MADE IS LOST.
*
         DC    H'0'                     CPB REQUESTS DISK REC ZERO
************************************************************** @Z40X9QG
*
* THIS IS AN INTENTIONAL PROGRAM CHECK TO TRAP A TYPE OF INTERNAL
* TCAM LOGICAL BUG THAT CAUSES RECORD ZERO TO INCORRECTLY BE REFERENCED
* IN THE CPB.  THERE IS NO SUCH RECORD.
* THE FIX LIES NOT IN IGG019RC BUT IN WHOEVER BUILT THE CPB AND GAVE
* IT TO IGG019RC FOR ITS INPUT QUEUE.   RCPB POINTS TO THE CPB.
* CPBFLAG X'80' BIT ON SAYS CPB BUILT BY REUS/COPY, IGG019RP.
* IF THAT NOT ON, CHECK 'READY HAD BEEN EXECUTED ' BIT IN AVT.
* IF ON, PROBABLY CPB BUILT BY IEDQFA. IF NOT ON, WARMSTART BUILT CPB.
*
************************************************************** @Z40X9QG
         EJECT                                                 @Z40X9QG
EQUALCC  EQU   *
         CLC   CPBHHR-IEDQCPB(LHHR,RLASTCPB),CPBHHR IS HEAD ID OF
*                                         PREVIOUS CPB SAME AS HEAD
*                                         OF NEW CPB
         BE    SAMEHEAD                   YES, HEADS ARE ALIKE
*                                         NO, DIFFERENT HEADS
*                                       LEAVE SECONDARY CPB BASE
*                                         FOR LARGE CPB
         BAL   R6,LARGECPB              GO BUILD LARGE CPB
*
         B     HUNTFF                   GO CHAIN CPBS TOGETHER
MEDIUM   EQU   *
         SH    RDUMCPB,HALF8            MODIFY SECONDARY CPB BASE
*                                         FOR MEDIUM CPB
         BAL   R6,MEDIUMCP              GO BUILD MEDIUM CPB
*
* TIC OF PREVIOUS CPB IS X'FF'. FIND IT, CHANGE IT TO REAL TIC OP.
*
HUNTFF   EQU   *
         CLI   CCWLEN(RLASTCPB),FF      IS THIS THE TIC
         BE    GOTFF                      YES, THIS IS THE TIC
*                                         NO, KEEP LOOKING
         LA    RLASTCPB,CCWLEN(0,RLASTCPB) LOOK AT NEXT CCW
         B     HUNTFF                   GO HUNT FOR TIC
*
GOTFF    EQU   *                        FOUND TIC
         OI    CCWFLAG(RLASTCPB),CPBCCC TURN ON COMMAND CHAIN BIT
*                                         IN RD/WR CCW
         ST    RCPB,CCWLEN(0,RLASTCPB)  SET TIC ADDR TO NEXT CPB
         MVI   CCWLEN(RLASTCPB),CPBTICC CHANGE X'FF' TO TIC OP CODE
         B     ZEROADDR                 FINISHED WITH THIS CPB
*                                       START ALL OVER
         EJECT                                                 @Z40X9QG
SAMEHEAD EQU   *                        NEW AND PREVIOUS CPBS HAVE
*                                         SAME HEAD
         SR    R15,R15                  CLEAR WORK REGISTER
         IC    R15,CPBR-IEDQCPB(RLASTCPB) GET R OF MBBCCHHR
*                                         FROM PREVIOUS CPB
         SR    R14,R14
         IC    R14,CPBR                 GET R OF MBBCCHHR OF NEW CPB
         SR    R14,R15                  SUBTRACT R OF PREVIOUS CPB
*                                         FROM R OF NEW CPB
         BCT   R14,MEDIUM               IS THE DIFFERENCE EXACTLY
*                                         ONE
*                                         NO, DIFFERENCE IS NOT ONE
*                                         YES, DIFFERENCE IS ONE
         ICM   RBASE,HI,XFF             SET A SWITCH TO          X01004
*                                         SKIP RPS SO SEQUENTIAL S21101
*                                         'WRITES' HAVE NO SET   S21101
*                                         SECTOR CCW             S21101
         TM    CPBRDWR,CPBWRITB         IS THIS CPB FOR 'WRITE'  S21101
         BO    MEDIUM                     YES, WRITE MUST BE     S21101
*                                         AFTER SEARCH - TIC     S21101
*                                         NO, READS MAY BE       S21101
*                                         CHAINED TOGETHER       S21101
         SH    RDUMCPB,HALF32           MODIFY SECONDARY CPB BASES21101
*                                         FOR SMALL CPB
         BAL   R6,SMALLCPB              GO BUILD SMALL CPB
*
         B     HUNTFF                   GO CHAIN CPBS TOGETHER
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*
* THERE ARE 2 CPB REGISTERS, RCPB POINTS TO THE NEW CPB TO RECEIVE
* THE DISK CHANNEL PROGRAM,RDUMCPB HAS A MODIFIED VALUE OF RCPB TO
* CAUSE CCWS TO BE BUILT AT LOWER LOCATIONS.
* RDUMCPB IS RCPB    LARGE CPB (HAS ALL CCWS)                    S21101
* RDUMCPB IS RCPB-8  LARGE CPB (HAS ALL BUT SET SECTOR)          S21101
* RDUMCPB IS RCPB-8  MEDIUM CPB (NO SEEK)                        S21101
* RDUMCPB IS RCPB-16 MEDIUM CPB (NO SEEK NOR SET SECTOR)         S21101
* RDUMCPB IS RCPB-32 SMALL CPB (NO SEEK, SET SECTOR, SEARCH-TIC) S21101
*
************************************************************** @Z40X9QG
         SPACE 2                                               @Z40X9QG
LARGECPB EQU   *                        GENERATE SEEK HEAD CCW
         LA    R15,CPBBBCC              ADDR OF BBCCHH
         ST    R15,CPBHEADF-IEDQCPB(0,RDUMCPB) PT TO BBCCHH
         MVI   CPBSEEK-IEDQCPB(RDUMCPB),CPBSEEKC SEEK OP CODE
         MVI   CPBSEKFL-IEDQCPB(RDUMCPB),CPBCCC COMMAND CHAIN
         LA    R15,CPBSEK6
         STH   R15,CPBSEKCT-IEDQCPB(0,RDUMCPB) SET SEEK COUNT TO 6
*
MEDIUMCP EQU   *                        AFTER OPTIONAL SET SECTORS21101
*                                         GENERATE SEARCH-TIC    S21101
         L     R2,AVTADEBR              GET DEB ADDR FOR       @Z40X9QG
*                                       REUS QUEUES            @Z40X9QG
         TM    IOSBEFLG,IOSBENRQ        NON-REUS QUEUES        @Z40X9QG
         BZ    REUS                     NO, BRANCH             @Z40X9QG
         L     R2,AVTADEBN              GET DEB ADDR FOR       @Z40X9QG
*                                       NON-REUS QUEUES        @Z40X9QG
REUS     EQU   *                                               @Z40X9QG
         L     R2,DEBUCBAD-IEDQDEB(,R2) GET UCB ADDRESS        @Z40X9QG
         LTR   RBASE,RBASE              CAN WE SKIP SET SECTOR   X01004
         BM    RPSSW1                   YES, BRANCH              X01004
         TM    UCBTBYT2-UCB(R2),RPS     IS RPS SUPPORTED         S21101
RPSSW    BO    BUILDRPS                   YES, GO BUILD SET SECTOS21101
*                                         NO, SKIP SET SECTOR    S21101
RPSSW1   EQU   *                                                 X01004
         SH    RDUMCPB,HALF8            ADJUST PSEUDO CPB BASE   S21101
*                                         FOR MISSING SET SECTOR S21101
         B     SKIPRPS                  SKIP SET SECTOR CCW      S21101
         EJECT                                                 @Z40X9QG
************************************************************** @Z40X9QG
*                                                                S21101
BUILDRPS EQU   *                        BUILD SET SECTOR CCW     S21101
* SET UP PARAMETERS TO CALL SECTOR CONVERT ROUTINE               S21101
* R0 HAS DDKR                                                    S21101
*        DD -  PHYSICAL BLOCK SIZE                               S21101
*        K  -  KEYLENGTH                                         S21101
*        R  -  RECORD NUMBER                                     S21101
* R2 HAS DAAA                                                    S21101
*        D  -  UCB DEVICE TYPE CODE FROM UCB+19                  S21101
*        AAA-  POINTER TO ONE BYTE AREA TO RECEIVE SECTOR VALUE  S21101
* R14 HAS RETURN ADDRESS                                         S21101
* R15 HAS ENTRY ADDRESS (FROM CVT+232)                           S21101
*                                                                S21101
* R2 HOW HAS ADDRESS OF UCB                                      S21101
*                                                                S21101
         IC    R2,UCBTBYT4-UCB(R2)      DEVICE TYPE CODE         S21101
         LA    R3,CPBSECTR-IEDQCPB(,RDUMCPB) SECTOR VALUE ADDRESSS21101
         ST    R3,CPBSETAF-IEDQCPB(,RDUMCPB) POINT CCW TO        S21101
*                                         SECTOR VALUE           S21101
         SLL   R3,BYTESHIF              ADDRESS TO TOP 3 BYTES   S21101
         SLDL  R2,FULLSHIF-BYTESHIF     R2 NOW HAS DAAA          S21101
*                                                                S21101
         L     R0,ZEROPARM              R0 NOW HAS DDKX          S21101
         ICM   R0,TWO,AVTKEYLE+INC      GET K OF DDKR            X01004
         IC    R0,CPBR                  R0 NOW HAS DDKR          S21101
*                                                                S21101
         L     R15,CVTPTR               GET CVT                  S21101
         USING CVT,R15                                           S21101
         L     R15,CVT0SCR1             GET ENTRY TO SECTOR      S21101
*                                         CONVERSION ROUTINE     S21101
         STM   R0,R12,AVTSAVE4          SAVE REGS CLOBBERED      S21101
*                                         BY CONVERT ROUTINE     S21101
         BALR  R14,R15                  CALCULATE SECTOR VALUE   S21101
*                                       BUILD SET SECTOR CCW     S21101
         DROP  R15                                               S21101
         LM    R0,R12,AVTSAVE4          RESTORE REGS             S21101
         MVI   CPBSET-IEDQCPB(RDUMCPB),CPBSETC SET SECTOR OP CODES21101
         LA    R15,CPBSET1              GET COUNT OF 1           S21101
         ST    R15,CPBSETCT-2-IEDQCPB(RDUMCPB) CCW AND CLEAR     S21101
*                                         UNUSED BYTE            S21101
         MVI   CPBSETFL-IEDQCPB(RDUMCPB),CPBCCC COMMAND CHAIN    S21101
         EJECT                                                 @Z40X9QG
SKIPRPS  EQU   *                                                 S21101
         LA    R15,CPBCCHHR
         ST    R15,CPBSRECF-IEDQCPB(0,RDUMCPB) ADDR OF CCHHR
         MVI   CPBSRCH-IEDQCPB(RDUMCPB),CPBSRCHC SEARCH ID EQ OP
         MVI   CPBSRHFL-IEDQCPB(RDUMCPB),CPBCCC COMMAND CHAIN
         LA    R15,CPBSRH5
         STH   R15,CPBSRHCT-IEDQCPB(0,RDUMCPB) COUNT FIELD TO 5
         LA    R15,CPBSRCH-IEDQCPB(0,RDUMCPB)
         ST    R15,CPBTICSF-IEDQCPB(0,RDUMCPB) ADDR OF SEARCH CCW
         MVI   CPBTIC1-IEDQCPB(RDUMCPB),CPBTICC TIC OP CODE
*
SMALLCPB EQU   *
         LA    RBASE,AVTEZERO(,RBASE)   RESET SWITCH IN BASE REG.X01004
*                                         TO TEST FOR RPS DEVICE S21101
         MVC   CPBRDWR-IEDQCPB(THREECCW,RDUMCPB),SAVECCW(R13) GET
*                                         BOTH RD/WR CCWS AND TIC
         MVI   CPBTIC2-IEDQCPB(RDUMCPB),FF SET OP CODE OF FINAL
*                                         TIC TO X'FF' TEMPORARILY
         BR    R6                       RETURN TO MAIN CODE
*
*
*                       LOCAL CONSTANTS
         DS    0F                       R0 PARAM TO SET SECTOR   S21101
ZEROPARM DC    H'6'                     DATALENGTH OF DISK RECORDS21101
*                                                                S21101
HALF8    DC    H'8'                     ADJUSTS FOR MEDIUM CPB   S22025
*                                       SIZE OF CCW              S22025
HALF32   DC    H'32'                    ADJUSTS FOR SMALL CPB    S21101
XFF      DC    X'FF'                    SWITCH FOR RPS SET SECTORX01004
         EJECT ,                                                 99226
*                                                                99226
* THE WTORTN IS A WTO MESSAGE WRITTEN AT DISK ERP TIME.          99226
*   IT IS CALLED UPON TO SEND A MESSAGE TO THE OPERATOR BY       99226
*   IEDQFQ, IGG019Q8,IGG019R6                                    99226
*                                                                99226
* A CHECK IS ALSO MADE FOR THE TYPE OF DISK ERROR.               99226
*   IF IT IS A DISK WRITE ERROR, A QUICK CLOSEDOWN IS REQUESTED. 99226
*   IF IT IS A DISK READ ERROR, AN ABEND IS ISSUED.              99226
*                                                                99226
*   ENTRY HERE IS THROUGH A BRANCH TO THE ADDRESS IN THE         99226
*          SECOND WORD OF IGG019RC                               99226
*                                                                99226
*   INPUT--R13 HAS AVTSAVE2                                      99226
*          R7 HAS CPB BASE                                       99226
*          R14 HAS RETURN ADDRESS                                99226
*          R15 HAS ENTRY POINT                                   99226
*                                                                99226
*   OUTPUT-ALL REGISTERS ARE UNCHANGED                           99226
*                                                                99226
*   EXTERNAL ROUTINES--DSPPOSTR--PUTS CLOSEDOWN ELEMENT ON       99226
*          READY QUEUE IN CASE OF DISK WRITE ERRORS              99226
*                                                                99226
*   EXITS-NORMAL - N/A                                           99226
*                                                                99226
*   EXITS-ERROR                                                  99226
*          AVTABEND--TO ABEND S045 U008 DISK READ ERROR          99226
*                                                                99226
*          RETURN TO CALLING PROGRAM TO AWAIT CLOSEDOWN ON       99226
*          DISK WRITE ERRORS                                     99226
*                                                                99226
*                                                                99226
WTORTN   DS    0H                                                99226
         STM   R14,R12,12(R13)                                   99226
         BALR  RBASE,0                  ESTABLISH ADDRESSABILITY 99226
         USING *,RBASE                                           99226
         USING IEDQCPB,RCPB                                      99226
*        USING IEDQAVTD,RAVT                                     99226
*        USING IEDQPRF,RPREFIX                                   99226
         DROP  RIOSBE                                          @Z40X9QG
         USING IEDQDISP,R11                                      99226
         UNPK  MSGECBCC(3),CPBECBCC(2)  GET COMPLETION CODE      99226
         UNPK  MSGFLAG1(9),CPBFLAG1(5)  GET FLAG1-2,SENS0-1      99226
         UNPK  MSGCSW(9),CPBFLAG3(5)    GET FLAG3 AND HALF CSW   99226
         UNPK  MSGCSW+8(9),CPBCSW+3(5)  GET LAST HALF CSW        99226
         UNPK  MSGADDR(7),CPBADDR+1(4)  GET DISK ADDRESS         99226
         TR    MSGECBCC(46),TRTABLE     MAKE IT PRINTABLE        99226
         MVC   MSGUCBID(3),CPBUCBID     GET UCB IDENTIFICATION @XA06323
         MVC   MSGECBCC+2(2),COMBLNK    SEPARATE WITH FIELD      99226
         MVC   MSGFLAG1+8(2),COMBLNK      SEPARATORS, A COMMA    99226
         MVC   MSGCSW+16(2),COMBLNK       AND A BLANK            99226
         MVC   MSGUCBID+3(2),COMBLNK                             99226
         MVI   MSGADDR+6,AVTEPER        PUT PERIOD AT END        99226
         NI    CPBADDR,AVTEFF-EXCLVAL   RESET ERROR FLAG         99226
         TM    CPBRDWR,CPBWRITB         IS CPB FOR WRITE         99226
         BZ    BADREAD                    NO, READ               99226
*                                                                99226
*                                         YES, WRITE             99226
         MVC   MSGRDWR(3),WR            SET TO WRITE             99226
*                                                                99226
* REQUEST A CLOSEDOWN IF NOT ALREADY REQUESTED                   99226
*                                                                99226
         CLI   AVTHRESS,THRESHFF        REQUEST FOR CLOSEDOWN YET99226
         BNE   DISKERR                    YES, CONTINUE          99226
*                                         NO,REQUEST IT          99226
         LA    R1,AVTHRESE              PASS ADDRESS OF CLOSEDOWN99226
*                                         ELEMENT TO DISPATCHER  99226
*                                         TO BE POSTED TO QUICK  99226
*                                         CLOSEDOWN              99226
         MVI   AVTHRESE+CLOSETYP,QUICK  SET CLOSE AS QUICK       99226
         MVI   AVTHRESS,THRESHF0        MARK ELEMENT POSTED      99226
         L     R11,AVTEA                GET DISPATCHER           99226
         LR    R5,R7                    SAVE CPB BASE            99226
         BAL   R14,DSPPOSTR             GO TO DISPATCHER         99226
*                                                                99226
         LR    R7,R5                    RESTORE CPB BASE         99226
         B     DISKERR                  GO TO WTO                99226
*                                                                99226
         EJECT                                                 @Z40X9QG
BADREAD  EQU   *                                                 99226
         MVC   MSGRDWR(3),RD            SET TO READ              99226
*                                                                99226
DISKERR  EQU   *                                                 99226
         CLI   CNT,MSGCNT               TEST COUNT EXCEEDED      99226
         BNL   RETURNX                    IF YES,SKIP WTO        99226
*                                         IF NO, WRITE MSG       99226
         SR    R3,R3                    INCREMENT WTO COUNT      99226
         IC    R3,CNT                                            99226
         LA    R3,1(,R3)                                         99226
         STC   R3,CNT                                            99226
         WTO   MF=(E,MSGNAME)           DISPLAY ERROR MESSAGE    99226
*                                                                99226
         CLI   CNT,MSGCNT               TEST LAST OF COUNT       99226
         BL    RETURNX                    IF NO, SKIP LAST MSG   99226
*                                         IF LAST, WRITE SUCH MSG99226
         WTO   MF=(E,MSGNAME2)          PRINT STOPPED MSG        99226
RETURNX  DS    0H                                                99226
         TM    CPBRDWR,CPBWRITB         IS CPB FOR WRITE         99226
         BNZ   RETURN                     YES, RETURN            99226
*                                         NO, ABEND              99226
         LA    R15,ABCODE               SET ABEND CODE           99226
         BAL   R14,AVTABEND             ABEND                    99226
*                                                                99226
RETURN   RETURN (14,12)                                          99226
*                                                                99226
CLOSETYP EQU   8                        CLOSEDOWN TYPE           99226
QUICK    EQU   X'30'                    QUICK CLOSE IN CLOSEDOWN 99226
CNT      DC    X'00'                    COUNTER FOR DISK WTOS    99226
MSGCNT   EQU   X'05'                    DISK WTO MAX             99226
ABCODE   EQU   X'08'                    DISK READ ERROR CODE     99226
RD       DC    CL3'RD '                 READ IDENTIFIER          99226
WR       DC    CL3'WR '                 WRITE IDENTIFIER         99226
EXCLVAL  EQU   X'01'                    REVERSE BIT              99226
COMBLNK  DC    CL2', '                  FIELD SEPARATOR          99226
*                                                                99226
   TITLE 'IGG019RC-IEDQFP-ABSOLUTE RECORD NUMBER TO MBBCCHHR CONVERTER'
IEDQFP   DS    0H
         SPACE 1                                               @Z40X9QG
************************************************************** @Z40X9QG
*                                                                     *
*TITLE   'IEDQFP' - ABSOLUTE RECORD NUMBER TO MBBCCHHR CONVERTER      *
*                                                                     *
*STATUS - CHANGE LEVEL 0                                              *
*                                                                     *
*FUNCTION/OPERATION - THE PURPOSE OF THIS ROUTINE IS TO CONVERT       *
*   THE ABSOLUTE RECORD NUMBER INTO AN MBBCCHHR DISK ADDRESS FOR      *
*   A MULTIVOLUME QTAM DISK MESSAGE QUEUE.                            *
*                                                                     *
*   THE DISK MESSAGE QUEUE CONSISTS OF ONE OR MORE SIMILAR EXTENTS    *
*   OF ONE FIXED, UNBLOCKED DATA SET, ONE ON EACH OF ONE OR MORE      *
*   DISK DRIVES OF THE SAME TYPE.  EACH EXTENT MUST CONTAIN THE       *
*   SAME NUMBER OF CONTINUOUS CYLINDERS ON A CYLINDER BOUNDARY.       *
*                                                                     *
*   THE RECORDS ARE ASSIGNED TO THE DISKS IN THE FOLLOWING ORDER -    *
*   SEQUENTIALLY ON THE FIRST TRACK ON THE FIRST CYLINDER OF THE      *
*   FIRST EXTENT.  THEN SEQUENTIALY ON THE FIRST TRACK OF THE         *
*   FIRST CYLINDER ON THE SECOND EXTENT, AND SO ON UNTIL THE FIRST    *
*   TRACK OF ALL EXTENTS ARE ASSIGNED.  THEN CONTINUE BACK ON THE     *
*   FIRST EXTENT WITH THE SECOND TRACK OF THE FIRST CYLINDER. THEN    *
*   THE SAME FOR THE SECOND EXTENT, AND SO ON.  THIS PROCESS IS       *
*   REPEATED FOR THE REST OF THE FIRST CYLINDER OF ALL EXTENTS.       *
*   PROCEED TO THE SECOND CYLINDER, AND CONTINUE THRU THE DATA SET.   *
*   THIS ALGORITHM IS DESIGNED FOR USE WITH MULTIPLE ARM SUPPORT.     *
*                                                                     *
*ENTRY POINTS -                                                       *
*        'IEDQFP - CONVERT ABSOLUTE RECORD NUMBER TO MBBCCHHR         *
*   CALLING SEQUENCE IS                                               *
*        LA    R15,IEDQFP                                             *
*        BALR  R14,R15                                                *
*                                                                     *
*INPUT - RCPB HAS THE ADDR OF THE CPB WHICH CONTAINS IN THE CPBADDR   *
*   FIELD THE ABSOLUTE RECORD NUMBER TO BE CONVERTED.  REGISTER 13    *
*   POINTS TO AVTSAVE2. R15 HAS ENTRY ADDRESS.R14 HAS EXIT ADDRESS    *
*                                                                     *
*   THE AVT HAS TWO 6 WORD AREAS INITIALIZED TO HAVE THE FOLLOWING    *
*   FULLWORD VALUES.  A BIT IN CPBFLAG DETERMINES WHICH 6 WORD AREA   *
*   IS TO BE USED.  (ONE GROUP IS FOR REUSABLE DISK, THE OTHER FOR    *
*   NON-REUSABLE DISK QUEUES.)                                        *
*                                                                     *
*        AVTDQDEB DC F'0' ADDRESS OF DEB OF DISK QUEUE DCB            *
*        AVTNOVOL DC F'0' NUMBER OF EXTENTS                           *
*        AVTRCTRK DC F'0' NUMBER OF RECORDS PER TRACK                 *
*        AVTTRCYL DC F'0' NUMBER OF TRACKS PER CYLINDER               *
*        AVTTOTNO DC F'0' NUMBER OF RECORDS IN ENTIRE DATA SET        *
*        AVTVOLRT DC F'0' PRODUCT OF NO. OF VOLUMES * NO. RECORDS     *
*                          PER TRACK                                  *
*                                                                     *
*OUTPUT - ALL REGISTERS ARE UNCHANGED.  IN THE CPB, THE               *
*   CPBABSAD FIELD OF THE CPB NOW CONTAINS THE MBBCCHHR.  ALL OTHER   *
*   FIELDS, INCLUDING THE INPUT FIELD, CPBADDR, ARE UNCHANGED,        *
*   EXCEPT THE COMMAND CHAIN BIT IN SECOND READ/WRITE CCW IS          *
*   TURNED OFF.                                                       *
*                                                                     *
*EXTERNAL REFERENCES - THE ABSOLUTE CYLINDER ID COMES FROM DEB EXTENT *
*                                                                     *
*   THE DSECT OF THE AVT IS TO BE PROVIDED BY THE MACRO, 'AVT'.       *
*                                                                     *
*   THE ROUTINE MAKES NO CALL TO ANY EXTERNAL SUBROUTINE.  THUS IT    *
*   DOES NOT CHANGE THE VALUE IN R13, HAVING NO SAVEAREA OF ITS OWN.  *
*                                                                     *
*EXITS-NORMAL - ALL REGISTERS REMAIN UNCHANGED.  NO RETURN CODE.      *
*   CPBABSAD FIELD OF THE CPB NOW CONTAINS THE REQUIRED MBBCCHHR.     *
*   RETURN IS MADE TO THE ADDRESS IN R14                              *
*                                                                     *
*EXITS-ERROR  --  ABEND CODE S045 U001 - NON-REUS DISK WRAP           *
*   ABEND CODE S045 U005 - CPB REQUESTING I/O ON UNOPENED DATA SET    *
*                                                                     *
*TABLES/WORKAREAS - ALL LOCAL STORAGE IS IN REGISTERS. REFERENCE      *
*   IS MADE TO THE AREAS OF THE AVT DESCRIBED UNDER 'INPUT' ABOVE.    *
*   IN THE CPB, THE FIELD CPBTTR IS REFERENCED, AND THE FIELD         *
*   CPBABSAD MODIFIED.                                                *
*                                                                     *
*ATTRIBUTES - REUSABLE, REFRESHABLE                                   *
*                                                                     *
*NOTES - THE OPERATION OF THIS SUBROUTINE DOES NOT DEPEND UPON A      *
*   PARTICULAR INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER      *
*   SET.                                                              *
*                                                                     *
*   A MESSAGE IS DISPLAYED WITH 'WTO',ROUTCDE=(2,11),DESC=6           *
*   'IED076I TCAM NON-REUSABLE DISK THRESHOLD CLOSEDOWN' - THE SYSTEM *
*   IS CLOSING DOWN DUE TO AN IMPENDING FULLNESS OF THE DISK.         *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
         EJECT                                                 @Z40X9QG
*
*                        REGISTER USAGE DEFINITIONS
*
*15      EQU   15                       PROGRAM BASE
*14      EQU   14                       RETURN ADDRESS
*13      EQU   13                       CALLER'S SAVEAREA
*12      EQU   12
RVOLRT   EQU   12                       PRODUCT OF NO. OF VOLUMES
*                                         TIMES NO. RECORDS PER TRK
RTOTNO   EQU   11                       TOTAL NO. OF RECORDS IN
*                                         ENTIRE DATA SET
RTRCYL   EQU   10                       NO. TRACKS PER CYLINDER
RRCTRK   EQU   9                        NO. RECORDS PER TRACK
RNOVOL   EQU   8                        NO. OF EXTENTS
RDEBX    EQU   7                        ADDR OF DEB OF DISK Q
*7       EQU   7                        7-12 LOADED FROM AVT
RCPBX    EQU   6                        BASE OF CPB DSECT
*5       EQU   5                        UNUSED IN CONVERT ROUTINE
*4       EQU   4                        UNUSED IN CONVERT ROUTINE
*3       EQU   3                        2-3 EVEN ODD PAIR FOR DIVISION
*2       EQU   2                        2-3 EVEN ODD PAIR FOR DIVISION
*1       EQU   1                        1-0 EVEN ODD PAIR FOR DIVISION
*0       EQU   0                        1-0 EVEN ODD PAIR FOR DIVISION
*
         DROP  RCPB
         DROP  RDEB
         USING *,R15                    PROGRAM BASE
         USING IEDQCPB,RCPBX            BASE OF CPB DSECT
         USING IEDQDEBX,RDEBX           BASE OF DEB EXTENT DSECT
         EJECT                                                 @Z40X9QG
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*                        ENTRY POINT
*
         STM   R14,R12,HISREG14(R13)    SAVE REGISTERS
         LA    RCPBX,0(,RCPB)           CLEAR HIGH BYTE AND
*                                         SET CPB DSECT BASE
         L     R1,CPBADDR               GET ABS. REC. NO. FROM CPB
         LA    R1,0(,R1)                CLEAR HIGH BYTE
         LA    R1,ROUNDER(R1)           ADJUST THE               S21101
         SRL   R1,DIV4                    RELATIVE RECORD NO.    S21101
         TM    CPBADDR+LORDER,CPBQTYPE  IS CPB FOR REUSABLE DISK S21101
         BO    PEUSDISK                   YES, REUSABLE DISK
*                                         NO, NON-REUSABLE
         LM    R7,R12,AVTADEBN          GET VALUES FROM AVT
         L     R0,AVTHRESN              GET THRESHOLD VALUE
         CR    R1,R0                    DOES THIS RECORD EXCEED THE
*                                         THRESHOLD
         BH    EXCEED                     YES, THRESHOLD EXCEEDED
*                                         NO, WITHIN LIMITS OK
*
* ABSOLUTE RECORD NUMBER / TOTAL NO OF RECORDS GIVES
* QUOTIENT - IGNORED
* REMAINDER- RELATIVE RECORD NUMBER
CONTINUE EQU   *
         LTR   RTOTNO,RTOTNO            HAS OPEN DONE THIS TYPE OF
*                                         DISK MSG Q
         BZ    NOTOPEN                    NO, DATA SET NOT OPEN
*                                         YES, IT IS OPEN OK
         SR    R0,R0                    CLEAR EVEN REG FOR DIVISION
         DR    R1-1,RTOTNO
         TM    CPBADDR+LORDER,CPBQTYPE  IS CPB FOR REUSABLE DISK S21101
         BO    NOTWRAP                    YES, REUSABLE DISK
*                                         NO, NON-REUSABLE DISK
         LTR   R1,R1                    HAS ENTIRE DATA BEEN USED
         BZ    NOTWRAP                    NO, NOT WRAPPED
*                                         YES, NON-REUSABLE DISK
*                                           IS TRYING TO WRAP
         LA    R15,ABEND1               PASS SUBCODE IN R15
         BAL   R14,AVTABEND             ABEND, OUT OF SPACE NON REUS
*
NOTOPEN  EQU   *
         LA    R15,ABEND5               PASS SUBCODE IN R15
         BAL   R14,AVTABEND             ABEND, DISK DCB NOT OPEN
*
NOTWRAP  EQU   *
         SRDA  R0,FULLSHIF              MOVE REMAINDER TO ODD REG
         EJECT                                                 @Z40X9QG
*
* RELATIVE RECORD NUMBER / PRODUCT OF NO. VOLS AND NO. REC PER TRK
* QUOTIENT - RELATIVE TRACK
* REMAINDER - RELATIVE RECORD NO. ON THIS ROW OF TRACKS
*
         DR    R1-1,RVOLRT
*
* R1 HAS RELATIVE TRACK, R0 HAS RELATIVE RECORD NO. ON THIS ROW
*
         LR    R3,R1                    GET RELATIVE TRACK
         SR    R2,R2                    CLEAR EVEN REG FOR DIVISION
*
* RELATIVE TRACK / NO. TRACKS PER CYL GIVES
* QUOTIENT - RELATIVE CYLINDER NO.
* REMAINDER- RELATIVE TRACK NO.
*
         DR    R3-1,RTRCYL
*
* R3 HAS RELATIVE CYLINDER NO, R2 HAS RELATIVE TRACK NO.
*
* RELATIVE RECORD NO. ON THIS ROW OF TRACKS / NO RECORDS PER TRACK
* QUOTIENT - RELATIVE DRIVE NUMBER
* REMAINDER- RELATIVE RECORD NUMBER
*
         SRDA  R0,FULLSHIF              CLEAR EVEN REG.
         DR    R1-1,RRCTRK
*
* R1 HAS RELATIVE DRIVE NUMBER, R0 HAS RELATIVE RECORD NUMBER
*
         XR    R1,R0                    SWAP REGISTERS R0, R1
         XR    R0,R1
         XR    R1,R0
         EJECT                                                 @Z40X9QG
*
* R0 HAS RELATIVE DRIVE NUMBER, R1 HAS RELATIVE RECORD NUMBER
*
         STC   R0,CPBABSAD              SET M OF MBBCCHHR
         XC    CPBBBCC(LBB),CPBBBCC     SET BB OF MBBCCHHR TO 0
         LA    R1,INC(,R1)              MAKE REC. NO. REL. TO 1
         STC   R1,CPBR                  SET R OF MBBCCHHR
         STC   R2,CPBHHR+INC            GET REL TRACK NO.
         SRL   R2,BYTESHIF
         STC   R2,CPBHHR
*
         LA    R1,DEBEXTLM              GET SIZE OF EACH DEB EXTENT
         MR    R1-1,R0                  MULT BY RELATIVE DRIVE NO.
         LA    RDEBX,DEBEXTPT(RDEBX,R1) BUMP DEB PT TO PROPER EXT
         AH    R3,DEBSTRCC              GET ABSOLUTE CYLINDER ADDR
         STC   R3,CPBCCHHR+INC            INTO MBBCCHHR
         SRL   R3,BYTESHIF
         STC   R3,CPBCCHHR
         LM    R14,R12,HISREG14(R13)    RESTORE REGISTERS
         BR    R14                      RETURN TO MAIN ROUTINE
*
*
PEUSDISK EQU   *
         LM    R7,R12,AVTADEBR          GET VALUES FROM AVT
         B     CONTINUE                 BRANCH TO GET REL REC NO.S22025
*
EXCEED   EQU   *
         TM    AVTBIT1,AVTREADN         IS CHECKPOINT OPEN DOING
*                                         THIS CPB (OR, HAS READY NOT
*                                         BEEN EXECUTED YET)
         BZ    CONTINUE                   YES, CKPOINT,IGNORE THRESHOLD
*                                         NO, USUAL DISK TRAFFIC
         CLI   AVTHRESS,THRESHFF        HAS CLOSEDOWN BEEN REQUESTED
         BNE   CONTINUE                   YES, IGNORE THRESHOLD
*                                         NO, REQUEST THRESHOLD
         MVI   AVTHRESS,THRESHF7        MARK IT AS REQUESTED
         LR    R3,R1                    SAVE VALUE OF ADDR
*
         WTO   MF=(E,IED076I)           THRESHOLD CLOSEDOWN MSG
*
         L     R15,HISREG15(R13)        RELOAD PGM BASE
         LR    R1,R3                    RESTORE VALUE OF ADDR
         B     CONTINUE                 RETURN                   S22025
*
         EJECT                                                 @Z40X9QG
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*                       WRITE - TO - OPERATOR
*
************************************************************** @Z40X9QG
         SPACE 2                                               @Z40X9QG
IED076I  WTO   'IED076I TCAM NON-REUSABLE DISK THRESHOLD CLOSEDOWN',   *
               ROUTCDE=(2,11),DESC=4,MF=L
         ENTRY IED076I
IED140I  WTO   'IED140I TCAM DISK ERROR 41, F1F2S0S1, F3CSWCSWCSWCSWCS,*
                UCB, RD ADDRESS',ROUTCDE=(2,10,11),DESC=4,MF=L   99226
MSGNAME  EQU   IED140I                                           99226
MSGECBCC EQU   MSGNAME+28               2 BYTE ECB CODE          99226
MSGFLAG1 EQU   MSGNAME+32               8 BYTE FLAG1-2,SENS0-1   99226
MSGCSW   EQU   MSGNAME+42               16 BYTE FLAG3 AND CSW    99226
MSGUCBID EQU   MSGNAME+60               3 BYTE UCBID             99226
MSGRDWR  EQU   MSGNAME+65               2 BYTE TYPE OPERATION    99226
MSGADDR  EQU   MSGNAME+68               6 BYTE DISK ADDR         99226
         ENTRY IED140I                                           99226
IED139I  WTO   'IED139I PRINTING STOPPED',                       99226 *
               ROUTCDE=(2,10,11),DESC=4,MF=L                     99226
         ENTRY IED139I                                           99226
MSGNAME2 EQU   IED139I                                           99226
TRTABLE  EQU   *-239                    TRANSLATE TABLE          99226
         DC    C' 0123456789ABCDEF'     TRANSLATE TABLE          99226
         EJECT                                                 @Z40X9QG
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*                        DSECTS
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
IEDQDEBX DSECT
DEBEXTPT EQU   68                       POINTER TO FIRST DEB EXTENT
DEBEXTLM EQU   16                       LENGTH OF EACH EXTENT
DEBDVMO  DS    0C                       DEVICE MODIFIER
DEBUCBA  DS    A                        ADDRESS OF UCB
         DS    2C                       RESERVED
DEBSTRCC DS    CL2                      CYLINDER START ADDRESS
DEBSTRHH DS    CL2                      READ OR WRITE TRACK START ADDR
DEBENDCC DS    CL2                      CYLINDER END ADDRESS
DEBENDHH DS    CL2                      READ OR WRITE TRACK END ADDR
DEBNMTRK DS    H                        NUMBER OF TRACKS ALLOCATED
*                                         IN THIS EXTENT
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         EJECT                                                 @Z40X9QG
         TCPBD 3330                                              S21101
************************************************************** @Z40X9QG
*                                                                99226
* IN DISK ERROR CONDITIONS, DISK APPENDAGE PASSES                99226
* ERROR STATUS INFORMATION IN THE CPB AS FOLLOWS                 99226
*                                                                99226
************************************************************** @Z40X9QG
         SPACE 1                                               @Z40X9QG
         ORG   CPBSEEK                  REDEFINE FROM CPB START  99226
         DS    A                        RESERVED FOR IEDQFQ      99226
CPBFLAG3 DS    C                        FROM IOBFLAG3            99226
CPBCSW   DS    CL7                      FORM IOBCSW              99226
CPBFLAG1 DS    C                        FORM IOBFLAG1            99226
CPBFLAG2 DS    C                        FORM IOBFLAG2            99226
CPBSENS0 DS    C                        FORM IOBSENS0            99226
CPBSENS1 DS    C                        FROM IOBSENS1            99226
CPBECBCC DS    C                        FORM IOBECBCC            99226
CPBUCBID DS    CL3                      FROM UCBNAME             99226
*                                                                99226
CPBBBCC  EQU   CPBABSAD+1               BB OF MBBCCHHR
CPBCCHHR EQU   CPBABSAD+3               CC OF MBBCCHHR
CPBHHR   EQU   CPBABSAD+5               HH OF MBBCCHHR
CPBR     EQU   CPBABSAD+7               R  OF MBBCCHHR
         EJECT                                                 @Z40X9QG
         TIOSBED                                               @OZ26164
         EJECT                                                 @Z40X9QG
         TDEBD
         EJECT                                                 @Z40X9QG
         TDATAD                                                  99226
         EJECT                                                 @Z40X9QG
         TPRFD                                                   99226
         EJECT                                                 @Z40X9QG
         TDISPD
         EJECT                                                 @Z40X9QG
         TAVTD 2
         EJECT                                                 @Z40X9QG
CVT      DSECT                                                   S21101
         CVT   RPS=YES                                           S21101
         EJECT                                                 @Z40X9QG
UCB      DSECT                                                   S21101
         IEFUCBOB                                                S21101
         EJECT                                                 @Z40X9QG
         DCBD  DSORG=TQ                                          S21101
         END
