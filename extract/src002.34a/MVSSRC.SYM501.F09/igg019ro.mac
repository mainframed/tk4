19RO     TITLE '''IGG019RO'' - TCAM DISPATCHER SUBTASK AND POST TRACE'
IGG019RO CSECT
         SPACE 3
*A000000-999999                                                @Z30X8D0
********************* MICROFICHE FLAGS ********************** SUPT CODE
*A545600-545800,596700                                           S22027
*A545500,596500                                                  S22026
*A268000,561000,639600                                           A42413
*C289600,561200                                                  A42413
*C250000,289600,290300,314000,639600                             S21903
*C564000-564500                                                 SA60006
*C561500                                                        SA60010
*C007000,545600                                                  S22024
*A596700                                                         S22024
*C631000-632000                                                @ZA01127
*C631000-632000                                                @ZA01127
*C545600,545700,596800,298000
*D108000-118000,315000-322000
*A596900
*C007006,277000-285000                                         @Y17XADU
*A314000,639600,268000,265000                                  @Y17XADU
*D250000,270000,287000-290300,298000                           @Y17XADU
*A256000,260000,268200,662000                                  @Y17XADU
*D268500                                                       @Y17XADU
*C496000-497000,550000,640000                                  @Y17XADU
*A338500,361500,384500,388020-388900,494500,501710             @Y17XADA
*A555300-555400,555700,560200-560300,560700                    @Y17XADA
*A568500-568600,573500-573600,578500-578600,583500-583600      @Y17XADA
*A600500-600600,622010-622750,625500,633450-634500             @Y17XADA
*A638100-638700,640922-640990,643500-644500-647500,648500      @Y17XADA
*A662900                                                       @Y17XADA
*C480000,633500                                                @Y17XADA
*D478000-479000,634000,615000-618000,633600-634000             @Y17XADA
*D104000-194000,639300-639600                                  @Y17XADA
* A561000,563000,661100                                        @G36XRDV
*A621000,662400                                                @OY19395
*C560300                                                       @OY19395
*D622004                                                       @OY19395
*A460000                                                       @OY19919
**************************************************************
*                                                            *
*TITLE:'IGG019RO' DISPATCHER                                          *
*                                                                     *
* MODULE-NAME=IGG010RO                                                *
*                                                                     *
* DESCRIPTIVE-NAME= TCAM DISPATCHER                            @Y17XADA
*                                                                     *
* COPYRIGHT='NONE'                                                    *
*                                                                     *
* STATUS: CHANGE LEVEL A                                       @Y17XADU
*                                                                     *
*FUNCTION: THIS MODULE ALLOCATES AND SCHEDULES SYSTEM RESOURCES. THE  *
*   VARIOUS RESOURCES OR ELEMENTS WAIT IN QUEUES FOR ALLOCATION.  THE *
*   ACTIVITY OF THESE QUEUES IS CONTROLLED BY THE 'READY QUEUE' WHICH *
*   CONTAINS RESOURCES TO BE PASSED FROM ONE SUBTASK TO ANOTHER.      *
*   ASSOCIATED WITH EACH RESOURCE ON THE READY QUEUE IS THE QUEUE TO  *
*   WHICH THE RESOURCE IS DIRECTED.                                   *
*                                                                     *
*   REPRESENTING EACH QUEUE IN THE SYSTEM IS A QUEUE CONTROL BLOCK    *
*   (QCB) WHICH IS THE CONNECTING LINK BETWEEN ELEMENTS AND SUBTASKS  *
*   WAITING FOR ELEMENTS. EACH WAITING SUBTASK IS REPRESENTED BY A    *
*   SUBTASK CONTROL BLOCK(STCB). EACH ELEMENT IS PREFACED BY A        *
*   RESOURCE CONTROL BLOCK(RCB).                                      *
*                                                                     *
*   ELEMENTS AND STCB'S ARE INSERTED IN THEIR RESPECTIVE CHAINS       *
*   WITHIN THE QCB IN PRIORITY/FIFO ORDER(FIRST IN, FIRST OUT) BY     *
*   PRIORITY.                                                         *
*                                                                     *
*                  QUEUE CONTROL BLOCK(QCB)                           *
*                                                                     *
*     DEC                                                             *
*        *******************************                              *
*      0 *       *       ELCHN         *                              *
*        *******************************                              *
*      4 *       *                     *                              *
*        *******************************                              *
*      8 *       *       STCHN         *                              *
*        *******************************                              *
*                                                                     *
*   ELCHN - ADDRESS OF FIRST ELEMENT CONTROLLED BY THIS QCB, IF       *
*           THIS QCB CONTROLS ANY ELEMENTS.                           *
*   STCHN - ADDRESS OF FIRST SUBTASK CONTROL BLOCK TO RECEIVE         *
*           CONTROL WHEN AN ELEMENT IS QPOSTED TO THIS QCB.           *
*   ALL OTHER FIELDS ARE IGNORED BY THE DISPATCHER.                   *
         EJECT
*                  RESOURCE CONTROL BLOCK(RECB)                       *
*     DEC                                                             *
*        *******************************                              *
*      0 *       *       QCBA          *                              *
*        *******************************                              *
*      4 *  PRI  *       LINK          *                              *
*        *******************************                              *
*                                                                     *
*   QCBA - ADDRESS OF QCB TO WHICH RECB IS QPOSTED.                   *
*   PRI  - READY QUEUE AND CHAINING PRIORITY OF THE RECB.             *
*                                                                     *
*   LINK - ADDRESS OF NEXT ITEM IN CHAIN IN WHICH THIS ONE APPEARS.   *
*     ALL OTHER FIELDS ARE IGNORED BY THE DISPATCHER.                 *
*                                                                     *
*                                                                     *
*                  SUBTASK CONTROL BLOCK(STCB)                        *
*                                                                     *
*     DEC                                                             *
*        *******************************                              *
*      0 *  VTO  *                     *                              *
*        *******************************                              *
*      4 *  PRI  *       LINK          *                              *
*        *******************************                              *
*                                                                     *
*   VTO  - SUBTASK ENTRY CODE.                                        *
*   PRI  - PRIORITY OF THE SUBTASK.                                   *
*   LINK - ADDRESS OF NEXT ITEM IN CHAIN IN WHICH THIS ONE APPEARS.   *
*      ALL OTHER FIELDS ARE IGNORED BY THE DISPATCHER.                *
         EJECT
*                                                                     *
*   WHEN AN ELEMENT REACHES THE TOP OF THE READY QUEUE, THE HIGHEST-  *
*   PRIORITY SUBTASK ASSOCIATED WITH THE QCB SPECIFIED IN THE RECB    *
*   IS ACTIVATED. THIS ELEMENT BECOMES THE PARAMETER PASSED TO THE    *
*   NEWLY ACTIVATED SUBTASK.                                          *
*                                                                     *
*   WHEN AN ELEMENT IS POSTED TO A QCB REPRESENTING AN ATTACHED TCAM  *
*   SUBTASK, THE DISPATCHER LINKS THE RECB INTO THE ELEMENT CHAIN OF  *
*   THE QCB AND POSTS THE EVENT CONTROL BLOCK(SECOND WORD OF QCB IN   *
*   THIS CASE) FOR THE ATTACHED TASK COMPLETE.                        *
*                                                                     *
*   THE FOLLOWING REGISTERS MUST BE PRESERVED FOR THE DISPATCHER BY   *
*   ALL MCP SUBTASKS:                                                 *
*                                                                     *
*   REGISTER 11 - ADDRESS OF DISPATCHER                               *
*   REGISTER 13 - ADDRESS OF DISPATCHER'S SAVE AREA                   *
*                                                                     *
*   EACH TIME A SUBTASK IS ACTIVATED, AN ENTRY IS MADE IN THE WRAP-   *
*   AROUND TRACE TABLE POINTED TO BY THE AVT(AVTDISTR) IF DTRACE=ON   *
*   SPECIFIED                                                  @Y17XADA
*ENTRY POINTS: PRIMARY ENTRY POINT IS IGG019RO. HOWEVER, THE          *
*   DISPATCHER ALSO PROVIDES SOME SERVICE FUNCTIONS OF A QUEUE MANAGER*
*   AS WELL AS DISPATCHING FUNCTIONS AND SERVICES. THESE FUNCTIONS ARE*
*   GENERATED BY THE TDISP DSECT. ENTRY POINT LABELS NOT ENDING IN 'R'*
*   RESULT IN LOSS OF CONTROL BY THE BRANCHING SUBTASK. THOSE ENDING  *
*   IN 'R' RESULT IN AN IMMEDIATE RETURN TO THE BRANCHING SUBTASK     *
*   AFTER THE REQUESTED FUNCTION HAS BEEN PERFORMED.                  *
         EJECT
*INPUT: SEE 'ENTRY POINTS' BELOW.                                     *
*                                                                     *
*OUTPUT: REGISTERS 1,3,7,11,13, AND 15 CONTAIN THE FOLLOWING:         *
*           1- ADDRESS OF LAST DISPATCHED RECB.                       *
*           3- ADDRESS OF LAST DISPATCHED STCB.                       *
*           7- ADDRESS OF LAST DISPATCHED QCB.                        *
*           11- ADDRESS OF DISPATCHER.                                *
*           13- ADDRESS OF DISPATCHER'S REGISTER SAVEAREA(AVTSAVE2)   *
*           15- ENTRY POINT ADDRESS OF ACTIVATED SUBTASK.             *
*                                                                     *
*EXTERNAL ROUTINES:                                                   *
*           NONE                                                      *
*                                                                     *
*EXITS-NORMAL:                                                        *
*           1- ENTRY POINT ADDRESS OF ACTIVATED SUBTASK.              *
*           2- ADDRESS IN REGISTER 14 IF DISPATCHER IS USED AS A      *
*              QUEUE MANAGEMENT SERVICE ROUTINE.                      *
*                                                                     *
*EXITS-ERROR:                                                         *
*           NONE                                                      *
*                                                                     *
*TABLES/WORK AREAS:                                                   *
*   AVT(AVTDISP,AVTOSECB,AVTREADD,AVTREADY,AVTSAVE2)                  *
*   QCB                                                               *
*   RECB                                                              *
*   STCB                                                              *
*                                                                     *
*ATTRIBUTES:                                                          *
*   RE-USEABLE                                                        *
*   REFRESHABLE                                                       *
*                                                                     *
         EJECT
*NOTES:                                                               *
*   IF A SUBTASK WISHES TO EXECUTE WITHOUT BEING PASSED AN ELEMENT,   *
*   IT MUST QPOST ITS STCB AS IF IT WERE AN RECB, WITH STCBVTO        *
*   CONTAINING THE CORRECT VALUE TO ACTIVATE THE SUBTASK, THE NEXT    *
*   THREE BYTES CONTAINING THE ADDRESS OF AVTREADY-8. STCBPRI MUST    *
*   CONTAIN A PRIORITY VALUE, AND STCBLINK MUST BE RESERVED FOR A     *
*   LINK FIELD.                                                       *
*                                                                     *
*   TO SUPPORT DISPATCHING WHILE ENABLED FOR INTERRUPTION, TWO READY  *
*   QUEUES ARE USED.  ONE OF THESE IS DESIGNATED AS THE 'ASYNCHRONOUS *
*   READY QUEUE'.  IT IS USED BY DISABLED TCAM CODE(APPENDAGES AND    *
*   AQCTL SVC) AS A MEANS OF PASSING ELEMENTS TO THE MCP.THE  @Y17XADA*
*   READY QUEUE IS PRIORITY-FIFO,THE ASYNC IS LIFO , CONVERTED@Y17XADA*
*   TO FIFO WHEN MERGED WITH THE READY QUEUE                  @Y17XADA*
*   THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL             *
*   REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT  *
*   TO THE ONE USED AT ASSEMBLY TIME.  THE CODING HAS BEEN ARRANGED   *
*   SO THAT REDEFINITION OF 'CHARACTER' CONSTANTS, BY REASSEMBLY,     *
*   WILL RESULT IN A CORRECT MODULE FOR THE NEW DEFINITIONS.          *
*                                                                     *
***********************************************************************
         EJECT
*                                      REGISTER EQUATES
         SPACE 2
R0       EQU   0                        GENERAL WORK REGISTER
RRECB    EQU   1                  ELEMENT ADDRESS
TBASE    EQU   2                  TRACE TABLE ENTRY BASE REG
RWORK    EQU   2                        WORK REGISTER          @Y17XADU
RSTCB    EQU   3                  LAST DISPATCHED STCB
RLIST    EQU   4                  LIST POINTER
TCBASE   EQU   5                        TRACE TABLE CONTROL BLOCK
*                                       BASE REGISTER
RNEXT    EQU   5                        WORK REGISTER          @Y17XADU
RTCX     EQU   6                        TCX BASE               @Y17XADU
RCVT     EQU   6                        CVT BASE               @Y17XADU
RQCB     EQU   7                  LAST DISPATCHED QCB
R8       EQU   8                  TEMPORARY WORK REG
RAVT     EQU   9                  AVT ADDR
R10      EQU   10                 TEMPORARY WORK REGISTER
RBASE    EQU   11                 DISPATCHER BASE REGISTER     @Y17XADA
R12      EQU   12                 REGISTER 12                  @Y17XADU
RSAVE    EQU   13                 SAVE AREA ADDR IN AVT
RETURN   EQU   14                 RETURN REGISTER
RENTRY   EQU   15                 ENTRY POINT, RETURN CODE REG
ONE      EQU   1                        CONSTANT VALUE 1       @Y17XADA
TWO      EQU   2                        CONSTANT VALUE 2       @Y17XADA
DISPL04  EQU   4                        CONSTANT VALUE 4       @Y17XADU
DISPL12  EQU   12                       CONSTANT VALUE 12      @Y17XADU
ADRMSK   EQU   7                        ADDRESS MASK           @Y17XADU
ADROFF   EQU   1                        ADDRESS OFFSET         @Y17XADU
         SPACE 1
         USING IEDQRECB,RRECB
         USING IEDQSTCB,RSTCB
         USING IEDQQCB,RQCB
         USING AVTSAVE2,RSAVE
         EJECT
         TDISPD CSECT=YES               DISPATCHER CSECT       @Y17XADU
         SPACE 3                                               @Y17XADA
IGG019RO IEDHJN ,                       HJN                    @Y17XADA
         EJECT
TRCHAIN  EQU   *
         ST    RETURN,SAVERET     SAVE REG 14 AT ENTRY TO CHAIN@Y17XADA
CHAIN    EQU   *
         LR    RLIST,RRECB        SET REG FOR LOOP
         BALR  RETURN,0           SET RETURN POINT FROM QUEUER
         LA    RRECB,0(,RLIST)    ZERO HI-ORDER BYTE
         LTR   RRECB,RRECB        IS THERE ANOTHER ITEM
CBDISP   BZ    DISPATCH           NO, GO TO DISPATCH READY QUEUE
         L     RLIST,RECBLINK-1   SAVE NEXT ITEM'S ADDRESS
         B     POSTR              GO PLACE THIS ONE ON READY QUEUE
         SPACE 3
TRLIST   EQU   *
         ST    RETURN,SAVERET     SAVE REG 14 AT ENTRY TO LIST @Y17XADA
LIST     EQU   *
         LR    RLIST,RRECB        SET LIST POINTER
         BALR  RETURN,0           SET LOOP RETURN POINT
         L     RRECB,0(0,RLIST)   GET NEXT ITEM TO QPOST
         TM    0(RLIST),AVTE80    IS THIS LAST ITEM
         LA    RLIST,4(,RLIST)    BUMP TO NEXT ITEM, IF ANY
         BZ    POSTR              NO, GO QPOST THIS ONE AND RETURN
         SPACE 3
TRPOST   EQU   *
         ST    RETURN,POSTR14     SAVE REG 14 AT ENTRY TO POST @Y17XADA
POST     EQU   *
PLADISP  LA    RETURN,DISPATCH    GET EXIT POINT ADDR
POSTR    EQU   *
         LA    RQCB,AVTREADY      GET READY QUEUE ADDR
         SPACE 1                                               @Y17XADA
************************************************************** @Y17XADA
*        THE FOLLOWING INSTRUCTION BYPASSES POST TRACE CODE  * @Y17XADA
*             WHEN POST TRACE IS ACTIVE IT WILL BE CHANGED TO* @Y17XADA
*             A NOP PRIORITR BY CODE IN ROUTINE TEST         * @Y17XADA
************************************************************** @Y17XADA
         SPACE 1                                               @Y17XADA
TRC      B     PRIORITR           B IF POST TRACE NOT ACTIVE   @Y17XADA
         EJECT                                                 @Y17XADA
************************************************************** @Y17XADA
*   THIS ROUTINE WILL TRACE ELEMENTS PLACED ON THE ENABLED   * @Y17XADA
*   READY QUEUE IF DTRACE=POST SPECIFIED . THIS ROUTINE WILL * @Y17XADA
*   TRACE THE INFORMATION RELATED TO THE TYPE OF POST        * @Y17XADA
*        1. ENTRY FROM CHAIN OR DSPCHAIN                     * @Y17XADA
*        2. ENTRY FROM LIST  OR DSPLIST                      * @Y17XADA
*        3. ENTRY TO   POST  OR DSPPOST                      * @Y17XADA
*        4. ENTRY TO   POSTR OR DSPPOSTR                     * @Y17XADA
* ********************************************************** * @Y17XADA
* * X'FE' * ELEMENT * EXIT-ADDRESS *   REG12   *   REG15   * * @Y17XADA
* ********************************************************** * @Y17XADA
*        5. ENTRY FROM CLEARRQ                               * @Y17XADA
* ********************************************************** * @Y17XADA
* * X'FF' * ELEMENT *    ZERO      *   ZERO    *    ZERO   * * @Y17XADA
* ********************************************************** * @Y17XADA
         SPACE 1                                               @Y17XADA
         STM   TBASE,TCBASE,SAVEREGS  SAVE REGS 2 - 5          @Y17XADA
         USING TABCB,TCBASE       TRACE TABLE CONTROL BLOCK    @Y17XADA
*                                 ADDRESSABILITY               @Y17XADA
         USING SENTRY,TBASE       SUBTASK TRACE TABLE ENTRY    @Y17XADA
*                                 ADDRESSABILITY               @Y17XADA
         L     TCBASE,AVTDISTR    ADDRESS OF TRACE TABLE       @Y17XADA
         L     TBASE,SCURRENT     ADDRESS OF CURRENT ENTRY     @Y17XADA
         ST    RRECB,STRECB       ELEMENT ADDRESS              @Y17XADA
         NC    ENTRY,ENTRY        ENTRY FROM IGG019RO          @Y17XADA
         BNZ   POSTRX             YES , TEST ENTRY ADDRESS     @Y17XADA
         ST    RETURN,STEPA       RETURN ADDRESS               @Y17XADA
         CLC   STRET,POSTRET      POST ENTRY FROM SUBTASK      @Y17XADA
         BNE   RETURNOK           NO , FORMAT TRACE ENTRY      @YM06934
         MVC   STEPA,POSTR14      MOVE SUBTASK ENTRY ADDRESS   @Y17XADA
         B     RETURNOK           BRANCH TO CONTINUE           @YM06934
POSTRX   EQU   *                                               @Y17XADA
         CLC   ENTRY,ASYNCMER     ASYNC MERGE RETURN ADDRESS   @YM06934
         BNE   NOTMERGE           NO , CONTINUE NORMALLY       @Y17XADA
         MVI   STEPRI,FF          INDICATE MERGE ENTRY         @Y17XADA
         XC    STEPALL,STEPALL    CLEAR REG14 REG12 & REG15    @Y17XADA
         B     MRGASYNC           BRANCH TO CONTINUE           @Y17XADA
NOTMERGE EQU   *                                               @Y17XADA
         MVC   STEPA,SAVERET      MOVE RETURN ADDRESS          @Y17XADA
RETURNOK EQU   *                                               @YM06934
         MVI   STEPRI,FE          INDICATE POST ENTRY          @Y17XADA
         ST    R12,STQCB          REG 12                       @Y17XADA
         ST    RENTRY,STSTCB      REG 15                       @Y17XADA
MRGASYNC EQU   *                                               @Y17XADA
         C     TBASE,SLAST        CURRENT EQ LAST              @Y17XADA
         BL    POSTRNX            NO , UPDATE TO NEXT          @Y17XADA
         MVC   SCURRENT,SFIRST    WRAP AROUND TRACE TABLE      @Y17XADA
         TM    AVTAFE10,AVTEFF    IS DUMP REQUESTED            @Y17XADA
         BZ    POSTRNO            NO , CONTINUE                @Y17XADA
         L     TBASE,AVTAFE10     ADDRESS OF IEDQFE10          @Y17XADA
         ST    RETURN,SAVE14      SAVE REG 14                  @Y17XADA
         BALR  RETURN,TBASE       GO DUMP TRACE TABLE          @Y17XADA
         L     RETURN,SAVE14      RESTORE REG 14               @Y17XADA
         B     POSTRNO            BYPASS UPDATING NEXT ENTRY   @Y17XADA
POSTRNX  EQU   *                                               @Y17XADA
         LA    TBASE,ENLEN(,TBASE)   INCREMENT CURRENT ENTRY   @Y17XADA
         ST    TBASE,SCURRENT     SAVE ADDRESS OF NEXT ENTRY   @Y17XADA
POSTRNO  EQU   *                                               @Y17XADA
         LM    TBASE,TCBASE,SAVEREGS  RESTORE REGS 2 - 5       @Y17XADA
         B     PRIORITR           GO PLACE ELEMENT BY PRIORITY
         EJECT
QWAIT    EQU   *
         L     RRECB,QCBELCHN-1-IEDQQCB(0,RSTCB) GET ELEMENT ADDR
         MVC   QCBELCHN-IEDQQCB(3,RSTCB),RECBLINK DE-LINK ELEMENT
         CLI   RECBPRI,AVTEZERO   IS THERE AN ELEMENT
         BNE   BYPASS             GO DISPATCH SUBTASK
         SPACE 2
***  FALL THROUGH TO TESTQ AND UNAVAIL TO CAUSE SUBTASK TO WAIT
         SPACE 2
TESTQ    EQU   *
         LA    RETURN,DISPATCH    GET EXIT POINT ADDR
TESTQR   EQU   *
         LA    RSTCB,0(,RSTCB)    ZERO HI-ORDER BYTES
         LA    RQCB,0(,RQCB)
         CLR   RQCB,RSTCB         IS STCB IN CORRECT QCB
         BCR   8,RETURN           YES, RETURN
         SPACE 3
UNAVAILR EQU   *
         L     RRECB,QCBSTCHN-1   GET STCB TO MOVE
         MVC   QCBSTCHN(3),STCBLINK-IEDQSTCB(RRECB) DE-LINK STCB
         LA    RSTCB,QCBSTCHN-5-IEDQQCB(,RSTCB)  SET STCB CHAIN AS
*                                      RECIPIENT
         SPACE 3
***  FALL THROUGH TO PRIORITY SEARCH ROUTINE
         SPACE 3
SCAN     EQU   *
         LA    RQCB,RECBLINK-1-IEDQRECB(,RSTCB)  POINT AT NEXT RECB
PRIORITR EQU   *
         L     RSTCB,QCBELCHN-1   GET NEXT ELEMENT ADDR
         CLC   RECBPRI-IEDQRECB(1,RSTCB),RECBPRI COMPARE PRIORITIES
         BH    SCAN                     IF HIGH GET NEXT ELEM  @OY19919
         BL    LIFOR                    IF LOW INSERT ELEMENT  @OY19919
         CLM   RRECB,ADRMSK,QCBELCHN    ELEMENT ALREADY ON QUE @OY19919
         BNE   SCAN                     NO, GET NEXT ELEMENT   @OY19919
         SPACE 1                                               @OY19919
ABDEBUG  EX    RRECB,ABDEBUG            FORCE ABEND0C6         @OY19919
         SPACE 3
LIFOR    EQU   *
         MVC   RECBLINK(3),QCBELCHN INSERT ITEM AT THIS POINT
         STCM  RRECB,ADRMSK,QCBELCHN INSERT ELEMENT ON CHAIN   @YM05632
         BR    RETURN             EXIT
         EJECT
TRDISP   EQU   *                                               @Y17XADA
         XC    ENTRY,ENTRY              CLEAR ENTRY ADDRESS    @Y17XADA
DISPATCH EQU   *
         L     RCVT,CVTPTR              GET CVT ADDRESS        @Y17XADU
         USING CVTMAP,RCVT              SET CVT ADDRESSABILITY @Y17XADU
         L     RTCX,CVTAQAVT            GET TCX ADDRESS        @Y17XADU
         DROP  RCVT                                            @Y17XADU
         USING IEDQTCX,RTCX             SET TCX ADDRESSABILITY @Y17XADU
         L     RLIST,TCXREADY           GET ELEMENT            @YM05632
         LTR   RLIST,RLIST              ELEMENT EXIST          @YM05632
         BZ    TESTRQ                   NO-TEST SYSCHRONOUS Q  @Y17XADU
***  THIS ROUTINE RE-ORDERS THE ASYNCHRONOUS READY QUEUE       @Y17XADU
***  FROM LIFO ORDERING TO FIFO THEN MERGES THIS FIFO          @Y17XADU
***  QUEUE WITH THE ENABLED READY QUEUE.                       @Y17XADU
LIFOFIFO EQU   *                                               @Y17XADU
         SLR   RWORK,RWORK              CLEAR WORK REGISTER    @Y17XADU
CLEARRQ  EQU   *                                               @Y17XADU
         CS    RLIST,RWORK,TCXREADY     REMOVE LIST OF ELEMENTS
*                                       FROM LIFO-ORDERED ASYNCH
*                                       READY QUEUE            @Y17XADU
         BNE   CLEARRQ                  IF ASYNCHRONOUSLY
*                                       UPDATED, TRY AGAIN     @Y17XADU
         SLR   RNEXT,RNEXT              CLEAR NEXT PTR REG     @YM02947
REORDER  EQU   *                                               @Y17XADU
         LR    RRECB,RLIST              PUSH LIFO ELEMENT ONTO
*                                       FIFO LIST              @Y17XADU
         ICM   RNEXT,ADRMSK,RECBLINK    GET NEXT ELEMENT
*                                       FROM LIFO QUEUE        @Y17XADU
         STCM  RWORK,ADRMSK,RECBLINK    LINK NEW 1ST ELEMENT
*                                       TO FORMER FIRST ELEMENT
*                                       OF FIFO QUEUE          @Y17XADU
         LR    RWORK,RLIST              UPDATE ADDRESS OF CURRENT
*                                       FIRST ELEMENT ON FIFO
*                                       QUEUE                  @Y17XADU
         LTR   RLIST,RNEXT              UPDATE ADDRESS OF NEXT
*                                       ELEMENT ON LIFO QUEUE  @Y17XADU
         BNZ   REORDER                  CONTINUE LIFO TO FIFO
*                                       REORDERING IF LIFO QUEUE
*                                       HAS NOT BEEN EXHAUSTED @Y17XADU
ASYNCBAL BAL   RETURN,CHAIN             PLACE ELEMENT ON READY @Y17XADA
*                                       QUEUE BY PRIORITY      @Y17XADU
ASYNCRET EQU   *                                               @Y17XADA
         DROP  RTCX                                            @Y17XADU
************************************************************** @Y17XADU
         SPACE 2
TESTRQ   EQU   *
         L     RRECB,AVTREADY     GET HIGHEST PRIORITY READY ELEM
         L     RQCB,RECBQCBA-1    GET QCB ADDR
         L     RSTCB,QCBSTCHN-1   GET HIGHEST PRIORITY STCB ADDR
         L     RLIST,RECBLINK-1   DE-LINK IT FROM CHAIN
         ST    RLIST,AVTREADY
         SPACE 2
BYPASS   EQU   *
         SLR   R8,R8              ZERO INDEX REG               @Y17XADA
         IC    R8,STCBVTO         GET SUBTASK ENTRY CODE
         LH    R10,INDEX(R8)      GET ACTIVATION ROUTINE INDEX
         B     ROUTINES(R10)      GO TO ACTIVATION ROUTINE
         EJECT
INDEX    EQU   *   INDEX TO SUBTASKS                           @Y17XADA
         DC    AL2(MCPWAIT-ROUTINES)     0 - ISSUE SYSTEM WAIT
         SPACE 2                                               @Y17XADA
************************************************************** @Y17XADA
*                                                            * @Y17XADA
*   TO MAXIMIZE PERFORMANCE THE FOLLOWING TABLE WILL BE      * @Y17XADA
*        MODIFIED TO ALLOW ACTIVATION ROUTINE TO BE          * @Y17XADA
*        DISPATCHED FROM ONE OF TWO TABLES                   * @Y17XADA
*             1. INDEX  WHEN SUBTASK TRACE IS NOT ACTIVE     * @Y17XADA
*             2. TINDEX WHEN SUBTASK TRACE IS     ACTIVE     * @Y17XADA
*                                                            * @Y17XADA
*   BY ALTERING THE TABLE THE APPROPRIATE ACTIVATION         * @Y17XADA
*        ROUTINE WILL GET CONTROL , THAT WILL CONTAIN THE    * @Y17XADA
*        CODE REQUIRED TO BRANCH TO TRACE IF SUBTASK TRACE   * @Y17XADA
*        IS ACTIVE                                           * @Y17XADA
*                                                            * @Y17XADA
************************************************************** @Y17XADA
         SPACE 2
VRINDXST EQU   *                         * VARIABLE INDEX START@Y17XADA
         DC    AL2(ATTPOST-ROUTINES)     2 - POST ATTACHED TASK
         DC    AL2(MCP2-ROUTINES)        4 - ACTIVATE 2-BYTE STCB
         DC    AL2(MCP4-ROUTINES)        6 - ACTIVATE 4-BYTE STCB
         DC    AL2(MCP6-ROUTINES)        8 - ACTIVATE 6-BYTE STCB
         DC    AL2(MCP8-ROUTINES)        10 - ACTIVATE 8-BYTE STCB
VRINDXSP EQU   *                         * VARIABLE INDEX STOP @Y17XADA
VRINDXLN EQU   VRINDXSP-VRINDXST         * LENGTH VAR INDEXES  @Y17XADA
SPECIALS EQU   *                                               @Y17XADA
         DC    AL2(RCVSCH-ROUTINES)      12 - RECEIVE SCHEDULER
         DC    AL2(SNDSCH-ROUTINES)      14 - SEND SCHEDULER
         DC    AL2(GETSCH-ROUTINES)      16 - GET SCHEDULER
         DC    AL2(PUTSCH-ROUTINES)      18 - PUT SCHEDULER
         DC    AL2(GFFSCH-ROUTINES)      20 - GET FIFO ROUTINE
         DC    AL2(LOGSCH-ROUTINES)      22 - LOG SCHEDULER
         DC    AL2(DIASCH-ROUTINES)      24 - DIAL SCHEDULER
         DC    AL2(DIASCH-ROUTINES)      26 - BUFFERED SCHEDULER
         DC    AL2(DIASCH-ROUTINES)      28 - RETRIEVE SCHEDULER
         DC    AL2(LOCSCH-ROUTINES)      30 - 2260 LOCAL SCHEDULER
         DC    AL2(CONCSCH-ROUTINES)     32 - CONC SCHEDULER     S22026
         DC    AL2(VTSSCH-ROUTINES)      34 - NCP SEND SCHEDULER X03039
         DC    AL2(VTRSCH-ROUTINES)      36 - NCP RECV SCHEDULER X03039
         DC    AL2(COMBSCH-ROUTINES)     38 - COMBUF SCHEDULER   S22027
         SPACE 3
***            END OF TABLE                                    @Y17XADA
         EJECT
***  ROUTINES TO ACTIVATE SUBTASKS -                           @Y17XADA
         SPACE 2
ROUTINES EQU   *
MCPWAIT  EQU   *
         MVI   AVTOSECB,AVTEZERO        SET MCP ECB FOR WAIT
         L     RCVT,CVTPTR              GET CVT ADDRESS        @Y17XADU
         USING CVTMAP,RCVT              SET CVT ADDRESSABILITY @Y17XADU
         L     RTCX,CVTAQAVT            GET TCX ADDRESS        @Y17XADU
         DROP  RCVT                                            @Y17XADU
         USING IEDQTCX,RTCX             SET TCX ADDRESSABILITY @Y17XADU
         L     RLIST,TCXREADY           GET ELEMENT            @YM05632
         LTR   RLIST,RLIST              ELEMENT EXIST          @YM05632
         BNZ   LIFOFIFO                 YES MERGE ASYNCH QUEUE @Y17XADU
         DROP  RTCX                                            @Y17XADU
MCPWAITB NOP   TRACE              BAL   RENTRY,TRACE  OR  NOP  @Y17XADA
         WAIT  ECB=AVTOSECB       WAIT ON INTERRUPT
         B     DISPATCH           GO DISPATCH
         SPACE 1
TATTPOST EQU   *
         L     TCBASE,AVTDISTR          LOAD ADDRESS CURRENT   @OY19395
         L     TBASE,SCURRENT           TRACE TABLE ENTRY      @OY19395
         L     RENTRY,RECBELAD          GET ADDRESS BUFFER     @OY19395
         ST    RENTRY,STEPA             STORE ENTRY POINT      @OY19395
         BAL   RENTRY,TRACE1            TRACE ELEMENT          @OY19395
ATTPOST  EQU   *
         LR    R10,RQCB                 SAVE QCB ADDRESS
         LR    R8,RRECB           SAVE ELEMENT POINTER         @G36XRDV
         MODESET MODE=SUP         ENTER SUPERVISOR STATE       @G36XRDV
         MODESET EXTKEY=SUPR      ENTER KEY ZERO               @G36XRDV
SETATSK  DS    0H                                              @G36XRDV
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=USE,       @G36XRDVC
               RELATED=ATTACHED-TASKS-IEDQWA1(SETATSK)-        @G36XRDVC
               IGC0010D(SETATSK)-IEDQNF(SETATSK)-              @G36XRDVC
               IEDQNS(SETATSK)-IEDQNQ(SETATSK)                 @G36XRDV
         LR    RRECB,R8           RESTORE ELEMENT POINTER      @G36XRDV
         BAL   RETURN,PRIORITR    GO QUEUE THE ELEMENT
         LR    RQCB,R10                 RESTORE QCB ADDRESS
         SETLOCK RELEASE,TYPE=LOCAL,REGS=USE,                  @G36XRDVC
               RELATED=IGG019RO(SETATSK)                       @G36XRDV
         MODESET EXTKEY=TCAM      SET TO TCAM KEY              @G36XRDV
         MODESET MODE=PROB        SET TO PROBLEM STATE         @G36XRDV
         POST  QCBPRI                   POST THE TASK           SA60006
         B     DISPATCH           GO DISPATCH
         SPACE 1
MCP2     EQU   *
         LA    RENTRY,2(,RSTCB)   GET SUBTASK ENTRY POINT ADDR
         BR    RENTRY             BRANCH TO SUBTASK
         SPACE 1
TMCP2    EQU   *                                               @Y17XADA
         LA    RENTRY,2(,RSTCB)   GET SUBTASK ENTRY POINT ADDR @Y17XADA
         B     TRACE              BRANCH TO TRACE THEN SUBTASK @Y17XADA
         SPACE 1                                               @Y17XADA
MCP4     EQU   *
         LA    RENTRY,4(,RSTCB)   GET SUBTASK ENTRY POINT ADDR
         BR    RENTRY             BRANCH TO SUBTASK
         SPACE 1
TMCP4    EQU   *                                               @Y17XADA
         LA    RENTRY,4(,RSTCB)   GET SUBTASK ENTRY POINT ADDR @Y17XADA
         B     TRACE              BRANCH TO TRACE THEN SUBTASK @Y17XADA
         SPACE 1                                               @Y17XADA
MCP6     EQU   *
         LA    RENTRY,6(,RSTCB)   GET SUBTASK ENTRY POINT ADDR
         BR    RENTRY             BRANCH TO SUBTASK
         SPACE 1
TMCP6    EQU   *                                               @Y17XADA
         LA    RENTRY,6(,RSTCB)   GET SUBTASK ENTRY POINT ADDR @Y17XADA
         B     TRACE              BRANCH TO TRACE THEN SUBTASK @Y17XADA
         SPACE 1                                               @Y17XADA
MCP8     EQU   *
         LA    RENTRY,8(,RSTCB)   GET SUBTASK ENTRY POINT ADDR
         BR    RENTRY             BRANCH TO SUBTASK
         SPACE 1
TMCP8    EQU   *                                               @Y17XADA
         LA    RENTRY,8(,RSTCB)   GET SUBTASK ENTRY POINT ADDR @Y17XADA
         B     TRACE              BRANCH TO TRACE THEN SUBTASK @Y17XADA
         SPACE 1                                               @Y17XADA
RCVSCH   EQU   *
SNDSCH   EQU   *
GETSCH   EQU   *
PUTSCH   EQU   *
GFFSCH   EQU   *
LOGSCH   EQU   *
DIASCH   EQU   *
BUFSCH   EQU   *
RETSCH   EQU   *
LOCSCH   EQU   *
CONCSCH  EQU   *                                                 S22026
COMBSCH  EQU   *                                                 S22027
VTSSCH   EQU   *                                                 X03039
VTRSCH   EQU   *                                                 X03039
         LA    RENTRY,0(R8,R8)    MULTIPLY BY TWO TO WORD INDEX
         L     RENTRY,AVTDISP-2*(SPECIALS-INDEX)(RENTRY)  ADDR OF CODE
MCPXBE   BR    RENTRY             BRANCH TO ENTRY OR           @Y17XADA
*                                 FALL THROUGH TO TRACE        @Y17XADA
         EJECT
************************************************************** @Y17XADA
*   THIS ROUTINE WILL TRACE ELEMENTS DISPATCHED IF SUBTASK   * @Y17XADA
*   TRACE ACTIVE THE TRACE TABLE WILL HAVE THE FOLLOWING     * @Y17XADA
*                       FORMATS                              * @Y17XADA
*                                                            * @Y17XADA
*        1. NORMAL DISPATCHER TRACE ENTRY                    * @Y17XADA
*                                                            * @Y17XADA
* ********************************************************** * @Y17XADA
* * P * ELEMENT *   * ENTRY-@ * QP * QCB-@ * MCPL * STCB-@ * * @Y17XADA
* ********************************************************** * @Y17XADA
*                                                            * @Y17XADA
*        2. ELEMENT DISPATCHED IS A BUFFER                   * @Y17XADA
*                                                            * @Y17XADA
* ********************************************************** * @Y17XADA
* * P * ELEMENT * FE * ENTRY-@ * QP * QCB-@ * MCPL * LCB-@ * * @Y17XADA
* ********************************************************** * @Y17XADA
*                                                            * @Y17XADA
************************************************************** @Y17XADA
         SPACE 2
TRACE    EQU   *
         L     TCBASE,AVTDISTR          ADDRESS OF TRACE TABLE
*                                       CONTROL BLOCK FROM AVT
         L     TBASE,SCURRENT .         ADDRESS OF CURRENT ENTRY
         ST    RENTRY,STEPA             SAVE ENTRY POINT       @OY19395
TRACE1   EQU   *                                               @OY19395
         ST    RRECB,STRECB .           ELEMENT ADDRESS
         USING IEDQPRF,RRECB            USING BUFFER DSECT     @Y17XADA
         CLM   RRECB,ADRMSK,AVTCOREC+1  ADDRESS GT BUFFER POOL @Y17XADA
         BL    NOTBUF                   NO , NOT BUFFER        @Y17XADA
         TM    PRFTIC,TIC               ELEMENT + 8 TIC        @Y17XADA
         BZ    NOTBUF                   NO , NOT BUFFER        @Y17XADA
         TM    PRFTIC,NOTTIC            ELEMENT + 8 TIC        @Y17XADA
         BNZ   NOTBUF                   NO , NOT BUFFER        @Y17XADA
         MVI   STEPFE,FE                INDICATE ELEMENT BUFFER@Y17XADA
         MVC   STSTLCB,PRFLCB           MOVE LCB ADDRESS       @Y17XADA
         B     NOTSTCB                  BYPASS STCB CODE       @Y17XADA
         USING IEDQRECB,RRECB           USING RECB DSECT       @Y17XADA
NOTBUF   EQU   *                                               @Y17XADA
         ST    RSTCB,STSTCB .           STCB ADDRESS
         MVI   STEPFE,AVTEZERO          INDICATE NOT BUFFER    @Y17XADA
NOTSTCB  EQU   *                                               @Y17XADA
         STC   R8,STMCPL                VECTOR TABLE OFFSET    @Y17XADA
         ST    RQCB,STQCB .             QCB ADDRESS
         MVC   STQDSFLG,QCBDSFLG        QCB FLAG BYTE
         MVC   STEPRI,RECBPRI           ELEMENT'S CURRENT PRIORITY
         C     TBASE,SLAST              CURRENT EQ LAST        @ZA01127
         BL    SBUMP                    BR IF NO               @ZA01127
         MVC   SCURRENT,SFIRST .        WRAP AROUND TRACE TABLE
         TM    AVTAFE10,AVTEFF          IS DUMP REQUESTED
         BZ    NOTRACE                  BRANCH IF NO
R2       EQU   2                        TWO                      S22024
         L     R2,AVTAFE10              ADDRESS OF IEDQFE10
         BALR  RETURN,R2                GO DUMP TRACE TABLE    @Y17XADA
         B     NOTRACE                  BYPASS UPDATING TRACE  @Y17XADA
SBUMP    EQU   *
         LA    TBASE,ENLEN(,TBASE) .   INCREMENT CURRENT ENTRY
*                                       POINTER BY ENTRY LENGTH
         ST    TBASE,SCURRENT .         SAVE ADDR OF NEXT ENTRY
NOTRACE  EQU   *                                               @Y17XADA
         CLC   AVTDTRAP,AVTFZERO        TRAP LOADED            @Y17XADA
         BER   RENTRY                   NO,RETURN OR ENTER ST  @Y17XADA
         ST    RENTRY,SAVE15            SAVE REG 15            @Y17XADA
         L     RENTRY,AVTDTRAP          LOAD ENTRY ADDRESS     @Y17XADA
         BALR  RETURN,RENTRY            ENTER ROUTINE          @Y17XADA
         L     RENTRY,SAVE15            RESTORE REG 15         @Y17XADA
         BR    RENTRY                   RETURN OR ENTER ST     @Y17XADA
         EJECT                                                 @Y17XADU
*        FIRST ENTRY SET-UP CODE                               @Y17XADU
*                                                              @Y17XADU
SAVE     DS    0H                       BOUNDARY ALLIGNMENT    @Y17XADU
         STM   RETURN,R12,DISPL12(RSAVE) SAVE CALLER'S REGS    @Y17XADU
         LM    RETURN,R12,DISPL12(RRECB) RESTORE CALLER'S REGS @Y17XADU
         ST    RSAVE,AVTSAVE2+DISPL04-IEDQAVTD(,RAVT) SAVE     @Y17XADU
*                                       CALLER'S SAVE AREA PTR @Y17XADU
         LA    R10,AVTSAVE2-IEDQAVTD(,RAVT) AVE AREA ADDRESS   @Y17XADU
         ST    R10,AVTECD8(,RSAVE)      SAVE ADDRESS           @Y17XADU
         LR    RSAVE,R10                SET SAVE AREA REG      @Y17XADU
         SLR   RQCB,RQCB                INDICATE INITIAL ENTRY @Y17XADA
         B     TEST                     TEST INTRO OPTIONS     @Y17XADA
         SPACE 1                                               @Y17XADA
************************************************************** @Y17XADA
*                                                            * @Y17XADA
*        SUBTASK TO MODIFY / SETUP TRACE OPTIONS             * @Y17XADA
*                                                            * @Y17XADA
************************************************************** @Y17XADA
         DS    0F                                              @Y17XADA
         SPACE 1                                               @Y17XADA
TRCQCB   EQU   *-8                                             @Y17XADA
TRCSTCB  DC    AL1(DSPMCPL4),AL3(TRCSTCB)                      @Y17XADA
TEST     EQU   *                        ENTRY TO MODIFY TRACE  @Y17XADA
         TM    AVTSUBT,AVTSUBON         SUBTASK TRACE ACTIVE   @Y17XADA
         BZ    RESET1                   NO , RESET NORM TRACE  @Y17XADA
         MVC   VRINDXST(VRINDXLN),TINDEX INITILIZE TO TINDEX   @Y17XADA
         MVC   MCPWAITB(TWO),BAL        INITILIZE MCPWAITB BAL @Y17XADA
         MVI   MCPXBE+1,AVTEZERO        INITILIZE MCPXBE '0700 @Y17XADA
         TM    AVTSUBT,AVTSUBPT         POST TRACE ACTIVE      @Y17XADA
         BZ    RESET2                   NO , RESET POST TRACE  @Y17XADA
         MVC   DSPLIST+TWO(TWO),TLIST   INITILIZE TO TRLIST    @Y17XADA
         MVC   DSPCHAIN+TWO(TWO),TCHAIN INITILIZE TO TRCHAIN   @Y17XADA
         MVC   DSPPOST+TWO(TWO),TPOST   INITILIZE TO TRPOST    @Y17XADA
         MVC   CBDISP+TWO(TWO),TDISP    INITILIZE TO TRDISP    @Y17XADA
         MVC   PLADISP+TWO(TWO),TDISP   INITILIZE TO TRDISP    @Y17XADA
         MVI   TRC+ONE,AVTEZERO         INITILIZE POST TRACE   @Y17XADA
         MVC   ASYNCBAL+TWO(TWO),TCHAIN INITILIZE TO TRCHAIN   @Y17XADA
         B     TESTEND                  BRANCH TO TESTEND      @Y17XADA
RESET1   EQU   *                        RESET SUPTASK TRACE    @Y17XADA
         MVC   VRINDXST(VRINDXLN),NINDEX RESET TO NINDEX       @Y17XADA
         MVC   MCPWAITB(TWO),NOP        RESET MCPWAITB 'NOP'   @Y17XADA
         MVI   MCPXBE+1,FF              RESET MCXBE '07FF'     @Y17XADA
RESET2   EQU   *                        RESET POST TRACE       @Y17XADA
         MVC   DSPLIST+TWO(TWO),NLIST   RESET TO LIST          @Y17XADA
         MVC   DSPCHAIN+TWO(TWO),NCHAIN RESET TO CHAIN         @Y17XADA
         MVC   DSPPOST+TWO(TWO),NPOST   RESET TO POST          @Y17XADA
         MVC   CBDISP+TWO(TWO),NDISP    RESET TO DISPATCH      @Y17XADA
         MVC   PLADISP+TWO(TWO),NDISP   RESET TO DISPATCH      @Y17XADA
         MVI   TRC+ONE,F0               RESET POST TRACE       @Y17XADA
         MVC   ASYNCBAL+TWO(TWO),NCHAIN RESET TO CHAIN         @Y17XADA
TESTEND  EQU   *                                               @Y17XADA
         LTR   RQCB,RQCB                INITIAL ENTRY          @Y17XADA
         BNZ   FREEUNIT                 NO , FREE UNIT         @Y17XADA
         BAL   RETURN,DSPCHAIN          YES , BEGIN PROCESSING @Y17XADA
FREEUNIT EQU   *                                               @Y17XADA
         LA    RQCB,AVTBFRTB            BUFFER RETURN QCB ADDR @Y17XADA
         ST    RQCB,RECBQCBA-1          INITILIZE ELEMENT      @Y17XADA
         MVI   RECBPRI,PRIBFRTB         SET PRIORITY           @Y17XADA
         USING IEDQPRF,RRECB            USING BUFFER DSECT     @Y17XADA
         MVI   PRFNBUNT,ONE             INITILIZE COUNT TO 1   @Y17XADA
         BAL   RETURN,DSPPOST           POST TO BUFFER RETURN  @Y17XADA
         EJECT
POSTR14  DS    F                        ENTRY ADDRESS TO POST  @Y17XADA
SAVERET  DS    0F                       SAVE AREA FOR REG 14   @Y17XADA
SAVERETX DS    CL1                      LIST OR CHAIN ENTRY    @Y17XADA
ENTRY    DC    AL3(0)                   POST ENTRY ADDRESS     @Y17XADA
SAVEREGS DS    4F                       SAVE AREA REGS 2 - 5   @Y17XADA
SAVE14   DS    F                        SAVE AREA REG 14       @Y17XADA
SAVE15   DS    F                        SAVE AREA REG 15       @Y17XADA
         SPACE 3                                               @Y17XADA
NLIST    DC    S(LIST)                  BASE + DISP OF LIST    @Y17XADA
NCHAIN   DC    S(CHAIN)                 BASE + DISP OF CHAIN   @Y17XADA
NPOST    DC    S(POST)                  BASE + DISP OF POST    @Y17XADA
NDISP    DC    S(DISPATCH)              BASE + DISP OF DISPATCH@Y17XADA
TLIST    DC    S(TRLIST)                BASE + DISP OF TRLIST  @Y17XADA
TCHAIN   DC    S(TRCHAIN)               BASE + DISP OF TRCAHIN @Y17XADA
TPOST    DC    S(TRPOST)                BASE + DISP OF TRPOST  @Y17XADA
TDISP    DC    S(TRDISP)                BASE + DISP OF TRDISP  @Y17XADA
         SPACE 3                                               @Y17XADA
ASYNCMER DC    AL3(ASYNCRET)            RETURN ASYNC MERGE RTN @Y17XADA
POSTRET  DC    AL3(TRDISP)              RETURN POST RTN        @Y17XADA
         SPACE 3                                               @Y17XADA
F0       EQU   240                      X'F0' INDICATOR        @Y17XADA
FE       EQU   254                      X'FE' INDICATOR        @Y17XADA
FF       EQU   255                      X'FF' INDICATOR        @Y17XADA
TIC      EQU   8                        X'08' TIC TEST 1       @Y17XADA
NOTTIC   EQU   X'17'                    X'17' TIC TEST 2       @Y17XADA
         SPACE 2
BAL      DC    X'45F0'                  BAL   RENTRY           @Y17XADA
NOP      DC    X'4700'                  NOP   RENTRY           @Y17XADA
         EJECT
NINDEX   EQU   *                                               @Y17XADA
         DC    AL2(ATTPOST-ROUTINES)  2 - POST ATTACHED TASK   @Y17XADA
         DC    AL2(MCP2-ROUTINES)     4 - ACTIVATE 2-BYTE STCB @Y17XADA
         DC    AL2(MCP4-ROUTINES)     6 - ACTIVATE 4-BYTE STCB @Y17XADA
         DC    AL2(MCP6-ROUTINES)     8 - ACTIVATE 6-BYTE STCB @Y17XADA
         DC    AL2(MCP8-ROUTINES)    10 - ACTIVATE 8-BYTE STCB @Y17XADA
TINDEX   EQU   *                                               @Y17XADA
         DC    AL2(TATTPOST-ROUTINES) 2 - POST ATTACHED TASK   @Y17XADA
         DC    AL2(TMCP2-ROUTINES)    4 - ACTIVATE 2-BYTE STCB @Y17XADA
         DC    AL2(TMCP4-ROUTINES)    6 - ACTIVATE 4-BYTE STCB @Y17XADA
         DC    AL2(TMCP6-ROUTINES)    8 - ACTIVATE 6-BYTE STCB @Y17XADA
         DC    AL2(TMCP8-ROUTINES)   10 - ACTIVATE 8-BYTE STCB @Y17XADA
         SPACE 3                                               @Y17XADA
SENTRY   DSECT                          TRACE TABLE ENTRY
STEPRI   DS    0FL1                     ELEMENT PRIORITY
STRECB   DS    F .                      ELEMENT ADDRESS
STEPALL  DS    0CL12                    REG14 REG12 & REG15    @Y17XADA
STEPA    DS    0FL4                     ENTRY ADDRESS          @Y17XADA
STEPFE   DS    CL1                      HIGH ORDER BYTE        @Y17XADA
STRET    DS    CL3                      SUBTASK RETURN ADDRESS @Y17XADA
STQDSFLG DS    0FL1                     QCB FLAG BYTE
STQCB    DS    F .                      QCB ADDRESS
STSTCB   DS    0FL4                     STCB ADDRESS           @Y17XADA
STMCPL   DS    CL1                      VECTOR TABLE OFFSET    @Y17XADA
STSTLCB  DS    CL3                      LCB ADDRESS STSTFE=FE  @Y17XADA
ENLEN    EQU   16 .                     TRACE TABLE ENTRY LENGTH
         SPACE 4
TABCB    DSECT                          TRACE TABLE CONTROL BLOCK
SCURRENT DS    A                        ADDRESS OF CURRENT ENTRY
SFIRST   DS    A                        ADDRESS OF FIRST ENTRY
SLAST    DS    A                        ADDRESS OF LAST ENTRY
         EJECT
         TAVTD                          DSECT AVT              @Y17XADA
         EJECT
CVTMAP   CVT                            DSECT CVT              @Y17XADA
         EJECT
         TPRFD                          DSECT BUFFER           @Y17XADA
         EJECT
         TPRIOR                         DSECT PRIORITY         @Y17XADA
         EJECT                                                 @G36XRDV
         IHAPSA                                                @G36XRDV
         EJECT
         TQCBD                          DSECT QCB              @Y17XADA
         EJECT
         TRECBD                         DSECT RECB             @Y17XADA
RECBELAD DS    XL4                      ADDRESS ELEMENT POSTED @OY19395
*                                       TO OPERATOR CONTROL    @OY19395
         EJECT
         TSTCBD                         DSECT STCB             @Y17XADA
         EJECT
         TTCXD                          DSECT TCX              @Y17XADA
         END
