         TITLE 'IGG019TE - 3705 SEND SCHEDULER                         *
                        '
IGG019TE CSECT ,                                                01S0001
@PROLOG  DS    0H                                               01S0002
*                                   /*
*        3705 SEND SCHEDULER STCB - 6 BYTES
         DC    AL1(08)                  STCB VTO
         DC    XL5'00'
         LR    RBASE,RSTCB              SET BASE REGISTER - REG 3
*                                       AT ENTRY IS POINTER TO STCB
         USING IGG019TE,RBASE           MODULE ADDRESSABILITY
IGG019TE IEDHJN AFTERHJN,HJN            IDENTIFICATION MACRO
*   REXIT=ZERO;                     /* INITIALIZE RETURN ADDRESS     */
         SLR   REXIT,REXIT                                      02S0278
*   IF RPARM->LCBRSKEY^=DSPLOCSC THEN/* TEST FOR INPUT TYPE - PIU OR
*                                      LCB                           */
         CLI   LCBRSKEY(RPARM),X'1E'                            02S0279
         BE    @RF00279                                         02S0279
*     DO;                           /* ENTRY WITH A PIU              */
*       RLCB=RQCB-(ADDR(LCBCOREQ)-ADDR(IEDQLCB));/* CALCULATE LCB
*                                      ADDRESS - QCB AT ENTRY IS
*                                      LCBCOREQ                      */
         LR    @10,RQCB                                         02S0281
         SL    @10,@CF01541                                     02S0281
         LR    RLCB,@10                                         02S0281
*       CALL DSPPRIOR;              /* CALL DISPATCHER TO INSERT THE
*                                      PIU ON THE OUTPUT CORE QUEUE  */
         LA    @15,DSPPRIOR(,RDISP)                             02S0282
         BALR  @14,@15                                          02S0282
*       RPARM=LCBTTCIN;             /* GET NCP TNT INDEX     @YM08120*/
         LH    RPARM,LCBTTCIN(,RLCB)                            02S0283
         N     RPARM,@CF01549                                   02S0283
*       CALL TNTCODE;               /* GET NCP TTE ADDR      @YM08120*/
         L     @15,IEDQNPTR(,RAVT)                              02S0284
         BALR  @14,@15                                          02S0284
*       RTRM=RPARM-LENGTH(IEDNTRM); /* SET NCP TTE BASE      @YM08120*/
         LR    RTRM,RPARM                                       02S0285
         SL    RTRM,@CF01287                                    02S0285
*       IF LCBFREEN=OFF THEN        /* IS 3705 LCB FREE      @YM07717*/
         TM    LCBFREEN(RLCB),B'00000100'                       02S0286
         BNZ   @RF00286                                         02S0286
*         IF TRMINOP=OFF THEN       /* AND INOP HAS NOT OCCURRED
*                                                            @YM08120*/
         TM    TRMINOP(RTRM),B'10000000'                        02S0287
         BNZ   @RF00287                                         02S0287
*           REXIT=ADDR(DSPDISP);    /* NO, EXIT AND WAIT UNTIL NEXT
*                                      SCHEDULE OF THE LCB   @YM07717*/
         LA    REXIT,DSPDISP(,RDISP)                            02S0288
*         ELSE                                                  02S0289
*           ;                       /*                       @YM07784*/
@RF00287 DS    0H                                               02S0290
*       ELSE                        /* YES, THE 3705 LCB IS FREE
*                                                            @YM07717*/
*         IF TRMSLOWN=ON THEN       /* IS 3705 IN SLOWDOWN           */
         B     @RC00286                                         02S0290
@RF00286 TM    TRMSLOWN(RTRM),B'00010000'                       02S0290
         BNO   @RF00290                                         02S0290
*           REXIT=ADDR(DSPDISP);    /* YES, REQUEST EXIT WITH NO
*                                      PROCESSING                    */
         LA    REXIT,DSPDISP(,RDISP)                            02S0291
*     END;                                                      02S0292
*   ELSE                            /* ENTRY WITH AN LCB             */
*     DO;                                                       02S0293
         B     @RC00279                                         02S0293
@RF00279 DS    0H                                               02S0294
*       RLCB=RPARM;                 /* SAVE LCB ADDRESS              */
         LR    RLCB,RPARM                                       02S0294
*       RPARM=LCBTTCIN;             /* GET TNT OFFSET OF THE 3705 LCB*/
         LH    RPARM,LCBTTCIN(,RLCB)                            02S0295
         N     RPARM,@CF01549                                   02S0295
*       CALL TNTCODE;               /* GET 3705 TERM ENTRY ADDRESS   */
         L     @15,IEDQNPTR(,RAVT)                              02S0296
         BALR  @14,@15                                          02S0296
*       RTRM=RPARM-LENGTH(IEDNTRM); /* SAVE TERM ENTRY ADDRESS       */
         LR    RTRM,RPARM                                       02S0297
         SL    RTRM,@CF01287                                    02S0297
*     END;                                                      02S0298
*   RFY                                                         02S0299
*     RQCB UNRSTD;                                              02S0299
@RC00279 DS    0H                                               02S0300
*   IF REXIT=ZERO THEN              /* HAS EXIT BEEN REQUESTED       */
         LTR   REXIT,REXIT                                      02S0300
         BNZ   @RF00300                                         02S0300
*     DO;                           /* NO, CONTINUE PROCESSING       */
*       IF TRMINOP=ON×TRMIPLDM=ON THEN/* HAS CHANNEL INOP BEEN  02S0302
*                                      DETECTED OR IS IPL/DUMP IN
*                                      PROGRESS              @YM08120*/
         TM    TRMINOP(RTRM),B'10000000'                        02S0302
         BO    @RT00302                                         02S0302
         TM    TRMIPLDM(RTRM),B'10000000'                       02S0302
         BNO   @RF00302                                         02S0302
@RT00302 DS    0H                                               02S0303
*         DO;                       /* YES, POST PIU'S ON OUTPUT CORE
*                                      QUEUE TO CLEANUP              */
*                                                               03S0304
*           /*********************************************************/
*           /*                                                       */
*           /* PROCESS.POSTPIUS: POST ALL PIU'S THAT WERE ON THE     */
*           /* OUTPUT CORE QUEUE TO CLEANUP VIA A RETURN TO DSPCHAIN.*/
*           /* SET OUTPUT CORE QUEUE TO POINT TO DUMMY END.          */
*           /*                                                       */
*           /*********************************************************/
*                                                               03S0304
*           RFY                                                 03S0304
*             RBRANCH RSTD;                                     03S0304
*           IF LCBCQELE^=AVTDELAD THEN/* DOES OUTPUT CORE QUEUE 03S0305
*                                      CONTAIN ANY PIU'S             */
         L     @14,LCBCQELE(,RLCB)                              03S0305
         L     @10,AVTDELAD(,RAVT)                              03S0305
         CR    @14,@10                                          03S0305
         BE    @RF00305                                         03S0305
*             DO;                   /* YES, POST THEM TO CLEANUP     */
*               RPARM=LCBCQELE;     /* GET ADDR OF 1ST ELEMENT ON
*                                      OUTPUT CORE QUEUE             */
         LR    RPARM,@14                                        03S0307
*               LCBCQELE=AVTDELAD;  /* DELINK ALL PIU'S FROM THE
*                                      QUEUE                         */
         ST    @10,LCBCQELE(,RLCB)                              03S0308
*               RPRF=RPARM;         /* GET ADDRESS OF 1ST PIU        */
         LR    RPRF,RPARM                                       03S0309
*               DO UNTIL RPRF=AVTDELAD;/* SET UP ALL PIU'S FOR POST
*                                      TO CLEANUP                    */
@DL00310 DS    0H                                               03S0311
*                 PRFQCBA=SAVTCLUP; /* QUEUE THE PIU FOR CLEANUP     */
         L     @14,AVTSAVTP(,RAVT)                              03S0311
         MVC   PRFQCBA(3,RPRF),SAVTCLUP+1(@14)                  03S0311
*                 PRFPRI=PRIOUTQ;   /* SET PRIORITY                  */
         MVI   PRFPRI(RPRF),X'E0'                               03S0312
*                 RBRANCH=RPRF;     /* SAVE ELEMENT ADDRESS          */
         LR    RBRANCH,RPRF                                     03S0313
*                 RPRF=PRFLINK;     /* GET NEXT ELEMENT              */
         L     @14,PRFLINK-1(,RPRF)                             03S0314
         LA    @14,0(,@14)                                      03S0314
         LR    RPRF,@14                                         03S0314
*               END;                                            03S0315
@DE00310 C     RPRF,AVTDELAD(,RAVT)                             03S0315
         BNE   @DL00310                                         03S0315
*               RBRANCH->PRFLINK=ZERO;/* CLEAR LINK IN LAST PIU      */
         SLR   @14,@14                                          03S0316
         STCM  @14,7,PRFLINK(RBRANCH)                           03S0316
*               REXIT=ADDR(DSPCHAIN);/* REQUEST RETURN TO DSPCHAIN
*                                      ENTRY POINT OF THE DISPATCHER */
         LA    REXIT,DSPCHAIN(,RDISP)                           03S0317
*               RFY                                             03S0318
*                 RBRANCH UNRSTD;                               03S0318
*             END;                                              03S0319
*         END;                                                  02S0320
*       ELSE                        /* NO INOP                       */
*         IF LCBATTN=ON&            /* TEST FOR ATTENTION ...        */
*             LCBBFRAV=OFF          /* ... WITH NO BUFFERS AVAILABLE */
*           THEN                                                02S0321
         B     @RC00302                                         02S0321
@RF00302 TM    LCBATTN(RLCB),B'00000100'                        02S0321
         BNO   @RF00321                                         02S0321
         TM    LCBBFRAV(RLCB),B'00000010'                       02S0321
         BZ    @RT00321                                         02S0321
*           ;                       /* YES, NO PROCESSING            */
*         ELSE                      /* NO ATTENTION OR BUFFERS ARE
*                                      AVAILABLE                     */
*           DO;                     /* CHECK FOR AVAILABLE LCB SO
*                                      THAT BTU'S CAN BE BUILT       */
@RF00321 DS    0H                                               02S0324
*             TS(LCBTSTSW);         /* IS LCB AVAILABLE FOR I/O      */
         TS    LCBTSTSW(RLCB)                                   02S0324
*             BC(NZ,NOPROC);        /* NO, SKIP PROCESSING           */
         BC    7,NOPROC                                         02S0325
*                                                               03S0326
*             /*******************************************************/
*             /*                                                     */
*             /* PROCESS.BLDBTUS: BUILD THE WRITE AND READ CCW'S AND */
*             /* ISSUE AN AQCTL TO START I/O ON THE BTU'S.   @G36XRIB*/
*             /*                                                     */
*             /*******************************************************/
*                                                               03S0326
*             RFY                                               03S0326
*              (REG9,                                           03S0326
*               REG10) RSTD;        /*                       @YM04622*/
*             GEN REFS(LCBFREEN,LCBSENDN,CSMASK1) SETS(LCBFREEN,
*                 LCBSENDN,REG9,REG10);                         03S0327
*                                   /* @YM04622*/
*                                     /*                       @YM04622
         L     REG10,LCBSENDN-2(,RLCB)  GET WORD CONTAINING    @YM04622
*                                       LCBSENDN AND LCBFREEN  @YM04622
CSLOOP1  EQU   *                                               @YM04622
         LR    REG9,REG10                                      @YM04622
         N     REG9,CSMASK1             TURN OFF LCBFREEN      @YM04622
         O     REG9,CSMASK1+4           TURN ON LCBSENDN       @YM04622
         CS    REG10,REG9,LCBSENDN-2(RLCB) CS BOTH BITS        @YM04622
         BNE   CSLOOP1                  DO AGAIN IF NOT EQUAL  @YM04622
*             RFY                                               03S0328
*              (REG9,                                           03S0328
*               REG10) UNRSTD;      /*                       @YM04622*/
*             LCBSTART=ADDR(LCBCCW1);/* GET ADDR OF CHANNEL PROGRAM
*                                      AREA IN THE 3705 LCB          */
         LA    @10,LCBCCW1(,RLCB)                               03S0329
         STCM  @10,7,LCBSTART(RLCB)                             03S0329
*             CPAWRTBF=LCBCQELE;    /* WRITE START TIC POINTS TO
*                                      FIRST PIU ON OUTPUT CORE QUEUE*/
         MVC   CPAWRTBF(3,RLCB),LCBCQELE+1(RLCB)                03S0330
*                                                               04S0331
*             /*******************************************************/
*             /*                                                     */
*             /* PROCESS.BLDBTUS.BLDWRITE: BUILD THE WRITE CCW'S. IF */
*             /* THIS IS THE FIRST CHANNEL PROGRAM TO EXECUTE AFTER  */
*             /* THE ACTPU FOR THE 3705, THEN A RESTART CCW MUST     */
*             /* PRECEED THE FIRST WRITE CCW. BUILD A WRITE BREAK CCW*/
*             /* IN THE PREFIX OF THE LAST UNIT OF THE LAST PIU.     */
*             /*                                                     */
*             /*******************************************************/
*                                                               04S0331
*             RFY                                               04S0331
*               REG9 RSTD;          /*                       @YM05684*/
*             IF TRMINPG=ON&        /* FIRST ...                     */
*                 TRMRSACT=OFF THEN /* ... TIME                      */
         TM    TRMINPG(RTRM),B'00100000'                        04S0332
         BNO   @RF00332                                         04S0332
         TM    TRMRSACT(RTRM),B'10000000'                       04S0332
         BNZ   @RF00332                                         04S0332
*               DO;                 /* YES, BUILD THE RESTART CCW    */
*                 RPRF=ADDR(CPARST);/* GET ADDRESS INTO WHICH RESTART
*                                      CCW IS TO BE BUILT            */
         LA    @10,8                                            04S0334
         LA    RPRF,LCBCPA(,RLCB)                               04S0334
         SLR   RPRF,@10                                         04S0334
*                 CCWOPCDE=CCWRRS;  /* SET RESTART OP CODE           */
         MVI   CCWOPCDE(RPRF),X'93'                             04S0335
*                 CCWADDR=ADDR(CCWADDR)-1;/* DUMMY DATA ADDRESS 04S0336
*                                                            @YM03703*/
         LA    @07,CCWADDR(,RPRF)                               04S0336
         BCTR  @07,0                                            04S0336
         STCM  @07,7,CCWADDR(RPRF)                              04S0336
*                 CCWFLAGS=''B;     /* CLEAR CCW FLAGS               */
         MVI   CCWFLAGS(RPRF),X'00'                             04S0337
*                 CCWCC=ON;         /* COMMAND CHAINING              */
*                 CCWSLI=ON;        /* SUPPRESS INCORRECT LENGTH     */
         OI    CCWCC(RPRF),B'01100000'                          04S0339
*                 CCWRSV=CLEAR;     /* CLEAR UNUSED FIELD            */
         MVI   CCWRSV(RPRF),X'00'                               04S0340
*                 CCWCOUNT=ONE;     /* SET COUNT FIELD               */
         LA    @07,1                                            04S0341
         STCM  @07,3,CCWCOUNT(RPRF)                             04S0341
*                 LCBSTART=RPRF;    /* SET START OF CHANNEL PROGRAM
*                                      TO RESTART CCW                */
         STCM  RPRF,7,LCBSTART(RLCB)                            04S0342
*                 RPRF=RPRF+8;      /* BUMP TO WRITE START CH PGM
*                                                            @XM05830*/
         ALR   RPRF,@10                                         04S0343
*                 CCWOPCDE=CCWWS0;  /* SET TO WRITE START ZERO  04S0344
*                                                            @XM05830*/
         MVI   CCWOPCDE(RPRF),X'31'                             04S0344
*                 CCWADDR=ADDR(CCWADDR)-1;/* SET DUMMY ADDR  @XM05830*/
         LA    @05,CCWADDR(,RPRF)                               04S0345
         BCTR  @05,0                                            04S0345
         STCM  @05,7,CCWADDR(RPRF)                              04S0345
*                 CCWFLAGS=''B;     /* CLEAR FLAGS           @XM05830*/
         MVI   CCWFLAGS(RPRF),X'00'                             04S0346
*                 CCWCC=ON;         /* TURN ON COMMAND CHAINING 04S0347
*                                                            @XM05830*/
*                 CCWSLI=ON;        /* SUPPRESS INCORRECT LENGTH
*                                                            @XM05830*/
         OI    CCWCC(RPRF),B'01100000'                          04S0348
*                 CCWRSV=CLEAR;     /* ZERO UNUSED AREA      @XM05830*/
         MVI   CCWRSV(RPRF),X'00'                               04S0349
*                 CCWCOUNT=ONE;     /* LENGTH OF WRITE START @XM05830*/
         STCM  @07,3,CCWCOUNT(RPRF)                             04S0350
*                 RPRF=RPRF+8;      /* BUMP TO TIC CCW       @XM05830*/
         ALR   RPRF,@10                                         04S0351
*                 CCWOPCDE=CCWTIC;  /* SET TO TIC            @XM05830*/
         MVI   CCWOPCDE(RPRF),X'08'                             04S0352
*                 RPRF=RPRF+8;      /* BUMP TO READ START CCW   04S0353
*                                                            @XM05830*/
         ALR   RPRF,@10                                         04S0353
*                 CCWOPCDE=CCWRS0;  /* SET TO READ START ZERO   04S0354
*                                                            @XM05830*/
         MVI   CCWOPCDE(RPRF),X'32'                             04S0354
*                 CCWADDR=ADDR(CCWADDR)-1;/* DUMMY ADDRESS   @XM05830*/
         LA    @10,CCWADDR(,RPRF)                               04S0355
         BCTR  @10,0                                            04S0355
         STCM  @10,7,CCWADDR(RPRF)                              04S0355
*                 CCWFLAGS=''B;     /* CLEAR FLAGS           @XM05830*/
         MVI   CCWFLAGS(RPRF),X'00'                             04S0356
*                 CCWCC=ON;         /* TURN ON COMMAND CHAINING 04S0357
*                                                            @XM05830*/
*                 CCWSLI=ON;        /* SUPPRESS INCORRECT LENGTH
*                                                            @XM05830*/
         OI    CCWCC(RPRF),B'01100000'                          04S0358
*                 CCWRSV=CLEAR;     /* CLEAR UNUSED AREA     @XM05830*/
         MVI   CCWRSV(RPRF),X'00'                               04S0359
*                 CCWCOUNT=ONE;     /* SET COUNT TO ONE      @XM05830*/
         STCM  @07,3,CCWCOUNT(RPRF)                             04S0360
*                 LCBREAL=OFF;      /* INDICATE LCB CCWS NOT    04S0361
*                                      TRANSLATED            @OZ27812*/
         NI    LCBREAL(RLCB),B'11111011'                        04S0361
*               END;                                            04S0362
*             RPRF=ADDR(CPAWRTS);   /* MAKE THE WRITE START CCW THE
*                                      CURRENT UNIT FOR THE PURPOSE
*                                      OF INITIALIZING CPAWRTBK      */
@RF00332 LA    RPRF,CPAWRTS(,RLCB)                              04S0363
*             DO UNTIL LCBCQELE=AVTDELAD;/* BUILD CCW'S UNTIL OUTPUT
*                                      CORE QUEUE IS EMPTY           */
@DL00364 DS    0H                                               04S0365
*                                                               05S0365
*               /*****************************************************/
*               /*                                                   */
*               /* PROCESS.BLDBTUS.BLDWRITE.BLDCCWS: DELINK TOP PIU  */
*               /* FROM OUTPUT CORE QUEUE. BUILD A WRITE CCW WITH A  */
*               /* TIC FOLLOWING IT IN THE FIRST 12 BYTES OF THE     */
*               /* BUFFER UNIT.                                      */
*               /*                                                   */
*               /*****************************************************/
*                                                               05S0365
*               RFY                                             05S0365
*                 RCOUNT RSTD;                                  05S0365
*               REG9=RPRF;          /* SAVE FOR LAST PIU CHECK  05S0366
*                                                            @YM05684*/
         LR    REG9,RPRF                                        05S0366
*               CPAWRTBK=RPRF;      /* SAVE FOR LAST UNIT TO WRTBRK
*                                      CHECK                         */
         STCM  RPRF,7,CPAWRTBK(RLCB)                            05S0367
*               RPRF=LCBCQELE;      /* GET TOP ELEMENT (PIU) FROM
*                                      OUTPUT CORE QUEUE             */
         L     RPRF,LCBCQELE(,RLCB)                             05S0368
*               LCBCQELE=PRFLINK;   /* DELINK THE ELEMENT            */
         L     @10,PRFLINK-1(,RPRF)                             05S0369
         LA    @10,0(,@10)                                      05S0369
         ST    @10,LCBCQELE(,RLCB)                              05S0369
*               CCWOPCDE=CCWWRITE;  /* SET WRITE COMMAND CODE        */
         MVI   CCWOPCDE(RPRF),X'01'                             05S0370
*               CCWADDR=ADDR(PRFSUNIT)+PRFPIUO;/* SET ADDR OF DATA   */
         LA    @10,PRFSUNIT(,RPRF)                              05S0371
         SLR   @07,@07                                          05S0371
         IC    @07,PRFPIUO(,RPRF)                               05S0371
         ALR   @10,@07                                          05S0371
         STCM  @10,7,CCWADDR(RPRF)                              05S0371
*               CCWFLAGS=''B;       /* CLEAR CCW FLAGS               */
         MVI   CCWFLAGS(RPRF),X'00'                             05S0372
*               CCWCC=ON;           /* COMMAND CHAINING              */
*               CCWSLI=ON;          /* SUPPRESS INCORRECT LENGTH     */
         OI    CCWCC(RPRF),B'01100000'                          05S0374
*               CCWRSV=CLEAR;       /* CLEAR UNUSED FIELD            */
         MVI   CCWRSV(RPRF),X'00'                               05S0375
*               PRFTICC=CCWTIC;     /* SET TIC COMMAND               */
         MVI   PRFTICC(RPRF),X'08'                              05S0376
*               RCOUNT=LENGTH(IEDTH)+TTHDCF;/* GET LENGTH OF DATA IN
*                                      PIU                           */
         LA    @10,PRFPIUO(,RPRF)                               05S0377
         ALR   @10,@07                                          05S0377
         LA    RCOUNT,10                                        05S0377
         SLR   @03,@03                                          05S0377
         ICM   @03,3,TTHDCF(@10)                                05S0377
         ALR   RCOUNT,@03                                       05S0377
*               IF AVTKEYLE>=RCOUNT+PRFPIUO THEN/* DOES ENTIRE PIU
*                                      FIT IN ONE BUFFER UNIT        */
         ALR   @07,RCOUNT                                       05S0378
         CH    @07,AVTKEYLE(,RAVT)                              05S0378
         BH    @RF00378                                         05S0378
*                 CCWCOUNT=RCOUNT;  /* YES, SET COUNT IN THE CCW     */
         STCM  RCOUNT,3,CCWCOUNT(RPRF)                          05S0379
*               ELSE                /* NO, PROCESS MULTIPLE UNITS    */
*                 DO;                                           05S0380
         B     @RC00378                                         05S0380
@RF00378 DS    0H                                               05S0381
*                   CCWCOUNT=AVTKEYLE-PRFPIUO;/* SET COUNT IN 1ST
*                                      UNIT                          */
         LH    @10,AVTKEYLE(,RAVT)                              05S0381
         SLR   @07,@07                                          05S0381
         IC    @07,PRFPIUO(,RPRF)                               05S0381
         SLR   @10,@07                                          05S0381
         STCM  @10,3,CCWCOUNT(RPRF)                             05S0381
*                   RCOUNT=RCOUNT-CCWCOUNT;/* ADJUST REMAINING COUNT
*                                      IN THE PIU                    */
         SLR   RCOUNT,@10                                       05S0382
*                                                               06S0383
*                   /*************************************************/
*                   /*                                               */
*                   /* PROCESS.BLDBTUS.BLDWRITE.BLDCCWS.BLDUNITS:    */
*                   /* PROCESS THE EXTRA UNITS OF A WRITE PIU BY     */
*                   /* BUILDING WRITES AND TIC'S IN THE UNITS.       */
*                   /*                                               */
*                   /*************************************************/
*                                                               06S0383
*                   DO UNTIL RCOUNT<=ZERO;/* BUILD EACH UNIT UNTIL
*                                      LAST UNIT REACHED             */
@DL00383 DS    0H                                               06S0384
*                     CPAWRTBK=RPRF;/* SAVE CURRENT LAST UNIT FOR
*                                      WRITE BRK CHK         @YM05684*/
         STCM  RPRF,7,CPAWRTBK(RLCB)                            06S0384
*                     CCWCC=OFF;    /* TURN OFF COM CHAIN IN 1ST UNIT
*                                                            @YM05684*/
*                     CCWCD=ON;     /* TURN ON DATA CHAIN IN 1ST UNIT
*                                                            @YM05684*/
         OI    CCWCD(RPRF),B'10000000'                          06S0386
         NI    CCWCC(RPRF),B'10111111'                          06S0386
*                     RPRF=PRFTI0;  /* GET NEXT UNIT OF THE PIU      */
         L     @10,PRFTI0-1(,RPRF)                              06S0387
         LA    @10,0(,@10)                                      06S0387
         LR    RPRF,@10                                         06S0387
*                     CCWOPCDE=CCWWRITE;/* SET WRITE COMMAND CODE    */
         MVI   CCWOPCDE(RPRF),X'01'                             06S0388
*                     CCWADDR=ADDR(PRFSUNIT);/* POINT TO DATA IN THE
*                                      UNIT                          */
         LA    @10,PRFSUNIT(,RPRF)                              06S0389
         STCM  @10,7,CCWADDR(RPRF)                              06S0389
*                     CCWFLAGS=''B; /* CLEAR CCW FLAGS               */
         MVI   CCWFLAGS(RPRF),X'00'                             06S0390
*                     CCWCD=ON;     /* DATA CHAINING         @YM05684*/
*                     CCWSLI=ON;    /* SUPPRESS INCORRECT LENGTH     */
         OI    CCWCD(RPRF),B'10100000'                          06S0392
*                     CCWRSV=CLEAR; /* CLEAR RESERVED FIELD          */
         MVI   CCWRSV(RPRF),X'00'                               06S0393
*                     CCWCOUNT=AVTKEYLE;/* COUNT IS ONE BUFFER UNIT  */
         LH    @10,AVTKEYLE(,RAVT)                              06S0394
         STCM  @10,3,CCWCOUNT(RPRF)                             06S0394
*                     PRFTICC=CCWTIC;/* SET TIC COMMAND CODE         */
         MVI   PRFTICC(RPRF),X'08'                              06S0395
*                     RCOUNT=RCOUNT-AVTKEYLE;/* ADJUST REMAINING
*                                      LENGTH                        */
         SLR   RCOUNT,@10                                       06S0396
*                   END;                                        06S0397
@DE00383 LTR   RCOUNT,RCOUNT                                    06S0397
         BP    @DL00383                                         06S0397
*                   CCWCC=ON;       /* COM CHAIN ON FOR LAST UNIT IN
*                                      PIU                   @YM05684*/
*                   CCWCD=OFF;      /* DATA CHAIN OFF FOR LAST UNIT
*                                      IN PIU                @YM05684*/
         OI    CCWCC(RPRF),B'01000000'                          06S0399
         NI    CCWCD(RPRF),B'01111111'                          06S0399
*                   CCWCOUNT=RCOUNT+AVTKEYLE;/* CORRECT THE LENGTH
*                                      SET IN THE LAST UNIT          */
         LR    @10,RCOUNT                                       06S0400
         AH    @10,AVTKEYLE(,RAVT)                              06S0400
         STCM  @10,3,CCWCOUNT(RPRF)                             06S0400
*                 END;                                          05S0401
*               PRFTI0=LCBCQELE;    /* TIC LAST (OR ONLY) UNIT OF
*                                      THIS PIU TO THE NEXT PIU      */
@RC00378 MVC   PRFTI0(3,RPRF),LCBCQELE+1(RLCB)                  05S0402
*               RFY                                             05S0403
*                 RCOUNT UNRSTD;                                05S0403
*             END;                                              04S0404
@DE00364 CLC   LCBCQELE(4,RLCB),AVTDELAD(RAVT)                  04S0404
         BNE   @DL00364                                         04S0404
*             RPRF=REG9->PRFTI0;    /* POINT TO FIRST UNIT OF LAST
*                                      PIU                   @YM05684*/
         L     RPRF,PRFTI0-1(,REG9)                             04S0405
         LA    RPRF,0(,RPRF)                                    04S0405
*             DO WHILE CCWCD=ON;    /* CYCLE THRU LAST PIU   @YM05684*/
         B     @DE00406                                         04S0406
@DL00406 DS    0H                                               04S0407
*               CCWOPCDE=CCWBRK;    /* MAKE UNIT WRITE BREAK @YM05684*/
         MVI   CCWOPCDE(RPRF),X'09'                             04S0407
*               RPRF=RPRF->PRFTI0;  /* GET NEXT UNIT         @YM05684*/
         L     @10,PRFTI0-1(,RPRF)                              04S0408
         LA    @10,0(,@10)                                      04S0408
         LR    RPRF,@10                                         04S0408
*             END;                  /*                       @YM05684*/
@DE00406 TM    CCWCD(RPRF),B'10000000'                          04S0409
         BO    @DL00406                                         04S0409
*             RPARM=CPAWRTBK;       /* GET ADDR OF CCW THAT TIC'S TO
*                                      LAST UNIT OF LAST PIU         */
         L     RPARM,CPAWRTBK-1(,RLCB)                          04S0410
         LA    RPARM,0(,RPARM)                                  04S0410
*             RPRF=RPARM->PRFTI0;   /* GET ADDR OF LAST UNIT         */
         L     @10,PRFTI0-1(,RPARM)                             04S0411
         LA    @10,0(,@10)                                      04S0411
         LR    RPRF,@10                                         04S0411
*             RPARM->PRFTI0=RPARM->PRFTI0-LENGTH(IEDQCCW);/* CHANGE
*                                      TIC TO POINT TO PREFIX OF LAST
*                                      UNIT                          */
         SL    @10,@CF00044                                     04S0412
         STCM  @10,7,PRFTI0(RPARM)                              04S0412
*             RPARM=RPARM->PRFTI0;  /* GET ADDR OF PREFIX            */
         LR    RPARM,@10                                        04S0413
*             CCWOPCDE=CCWBRK;      /* CHANGE LAST WRITE TO WRITE
*                                      BREAK                         */
         MVI   CCWOPCDE(RPRF),X'09'                             04S0414
*             RPARM->CCW=CCW;       /* MOVE WRT BREAK CCW TO PREFIX  */
         MVC   CCW(8,RPARM),CCW(RPRF)                           04S0415
*             CCWOPCDE=CCWNOP;      /* BUILD NOOP CCW IN THE UNIT    */
         MVI   CCWOPCDE(RPRF),X'03'                             04S0416
*             CCWFLAGS=''B;         /* CLEAR CCW FLAGS               */
         MVI   CCWFLAGS(RPRF),X'00'                             04S0417
*             CCWCOUNT=ONE;         /* SET COUNT FOR NOOP            */
         MVC   CCWCOUNT(2,RPRF),@CH00059                        04S0418
*             PRFTI0=ADDR(LCBCCW6); /* SET TIC TO SPECIAL NOOP  04S0419
*                                      COMMAND                       */
         LA    @10,LCBCCW6(,RLCB)                               04S0419
         STCM  @10,7,PRFTI0(RPRF)                               04S0419
*             RFY                                               04S0420
*               REG9 UNRSTD;        /*                       @YM05684*/
*             IF LCBBFRAV=ON THEN   /* ARE READ BUFFERS AVAILABLE    */
         TM    LCBBFRAV(RLCB),B'00000010'                       03S0421
         BNO   @RF00421                                         03S0421
*               DO;                 /* YES, BUILD THE READS          */
*                                                               04S0423
*                 /***************************************************/
*                 /*                                                 */
*                 /* PROCESS.BLDREAD: CHAIN THE READ BUFFERS TO THE  */
*                 /* WRITE BREAK UNIT AND INDICATE RECEIVING         */
*                 /*                                                 */
*                 /***************************************************/
*                                                               04S0423
*                 PRFTI0=ADDR(CPARDS);/* TIC THE WRITE BREAK UNIT TO
*                                      THE READ START                */
         LA    @10,CPARDS(,RLCB)                                04S0423
         STCM  @10,7,PRFTI0(RPRF)                               04S0423
*                 CPARDU=LCBRDBFR;  /* SET TIC AFTER READ START TO
*                                      THE READ BUFFERS              */
         MVC   CPARDU(3,RLCB),LCBRDBFR(RLCB)                    04S0424
*                 RFY                                           04S0425
*                  (REG9,                                       04S0425
*                   REG10) RSTD;    /*                       @YM04622*/
*                 GEN REFS(LCBRECVN,LCBBFRAV,CSMASK2) SETS(REG9,REG10,
*                     LCBRECVN,LCBBFRAV);                       04S0426
*                                                         /* @YM04622*/
*                                     /*                       @YM04622
         L     REG10,LCBBFRAV-3(,RLCB)  GET WORD CONTAINING    @YM04622
*                                       LCBBFRAV AND LCBRECVN  @YM04622
CSLOOP2  EQU   *                                               @YM04622
         LR    REG9,REG10                                      @YM04622
         N     REG9,CSMASK2             TURN OFF LCBBFRAV      @YM04622
         O     REG9,CSMASK2+4           TURN ON LCBRECVN       @YM04622
         CS    REG10,REG9,LCBBFRAV-3(RLCB) CS BOTH BITS        @YM04622
         BNE   CSLOOP2                  DO AGAIN IF NOT EQUAL  @YM04622
*                 RFY                                           04S0427
*                  (REG9,                                       04S0427
*                   REG10) UNRSTD;  /*                       @YM04622*/
*               END;                                            03S0428
*             LCBSIO=SIOCODE;       /* STARTIO ENTRY CODE FOR AQCTL
*                                      (IEDQEB)              @G36XRIB*/
@RF00421 MVI   LCBSIO(RLCB),X'30'                               03S0429
*             LCBCP=LCBSTART;       /* ADDR OF START OF CHANNEL 03S0430
*                                      PROGRAM               @G36XRIB*/
         L     @10,LCBSTART-1(,RLCB)                            03S0430
         LA    @10,0(,@10)                                      03S0430
         ST    @10,LCBCP(,RLCB)                                 03S0430
*             RPARM=ADDR(LCBQEBPL); /* ADDR OF PARM LIST FOR IEDQEB
*                                                            @G36XRIB*/
         LA    RPARM,LCBQEBPL(,RLCB)                            03S0431
*             GEN(AQCTL);           /* DO STARTIO            @G36XRIB*/
         AQCTL
*NOPROC:                                                        02S0433
*           END;                                                02S0433
NOPROC   DS    0H                                               02S0434
*     END;                                                      02S0434
@RT00321 DS    0H                                               02S0434
@RC00302 DS    0H                                               02S0435
*                                                               02S0435
*   /*****************************************************************/
*   /*                                                               */
*   /* EPILOGUE: THIS SEGMENT COMPLETES THE EPILOGUE CODE THAT WAS   */
*   /* ALTERED BY THE MODULE PROCEDURE STATEMENT.                    */
*   /*                                                               */
*   /*****************************************************************/
*                                                               02S0435
*   RFY                                                         02S0435
*     RRETURN RSTD;                                             02S0435
@RF00300 DS    0H                                               02S0436
*   IF REXIT^=ZERO THEN             /* HAS EXIT ADDRESS BEEN    02S0436
*                                      ESTABLISHED                   */
         LTR   REXIT,REXIT                                      02S0436
         BZ    @RF00436                                         02S0436
*     RRETURN=REXIT;                /* YES, SET RETURN ADDRESS       */
         LR    RRETURN,REXIT                                    02S0437
*   ELSE                            /* NO                            */
*     RRETURN=ADDR(DSPDISP);        /* RETURN TO DISPATCHER          */
         B     @RC00436                                         02S0438
@RF00436 LA    RRETURN,DSPDISP(,RDISP)                          02S0438
*   RFY                                                         02S0439
*     RRETURN UNRSTD;                                           02S0439
*   END IGG019TE                                                01S0440
*                                                               01S0440
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (TAVTD   )                                       */
*/*%INCLUDE SYSLIB  (TCCWD   )                                       */
*/*%INCLUDE SYSLIB  (TDISPD  )                                       */
*/*%INCLUDE SYSLIB  (TLCBD   )                                       */
*/*%INCLUDE SYSLIB  (TPRFD   )                                       */
*/*%INCLUDE SYSLIB  (TPRIOR  )                                       */
*/*%INCLUDE SYSLIB  (TTNTD   )                                       */
*/*%INCLUDE SYSLIB  (TTRMD   )                                       */
*/*%INCLUDE SYSLIB  (TTHD    )                                       */
*/*%INCLUDE SYSUT5  (RFY     )                                       */
*/*%INCLUDE SYSUT5  (DCL     )                                       */
*/*%INCLUDE SYSUT5  (PROLOGUE)                                       */
*/*%INCLUDE SYSUT5  (PROCESS )                                       */
*/*%INCLUDE SYSUT5  (POSTPIUS)                                       */
*/*%INCLUDE SYSUT5  (BLDBTUS )                                       */
*/*%INCLUDE SYSUT5  (BLDWRITE)                                       */
*/*%INCLUDE SYSUT5  (BLDCCWS )                                       */
*/*%INCLUDE SYSUT5  (BLDUNITS)                                       */
*/*%INCLUDE SYSUT5  (BLDREAD )                                       */
*/*%INCLUDE SYSUT5  (EPILOGUE)                                       */
*                                                               01S0440
*       ;                                                       01S0440
@EL00001 DS    0H                                               01S0440
@EF00001 DS    0H                                               01S0440
@ER00001 BR    @14                                              01S0440
@DATA    DS    0H
@CH00059 DC    H'1'
         DS    0F
         DS    0F
@CF00044 DC    F'8'
@CF01287 DC    F'14'
@CF01541 DC    F'100'
@CF01549 DC    XL4'0000FFFF'
         DS    0D
CSMASK1  DC    X'FFFFFBFF00000100'
CSMASK2  DC    X'FFFFFFFD00000200'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
IEDQAPTR EQU   @13
RDISP    EQU   @11
IEDQLPTR EQU   @04
LCBXPTR  EQU   @05
IEDQPPTR EQU   @06
RTRM     EQU   @08
RAVT     EQU   @13
RPRF     EQU   @06
RLCB     EQU   @04
RPARM    EQU   @01
REXIT    EQU   @02
RSTCB    EQU   @03
RCOUNT   EQU   @05
RQCB     EQU   @07
REG9     EQU   @09
REG10    EQU   @10
RBASE    EQU   @12
RRETURN  EQU   @14
RBRANCH  EQU   @15
IEDQTPTR EQU   @08
IEDQAVTD EQU   0
AVTSAVEX EQU   IEDQAVTD+216
@NM00003 EQU   IEDQAVTD+316
AVTCKFLG EQU   @NM00003
AVTBASE  EQU   IEDQAVTD+340
AVTPKF   EQU   AVTBASE
AVTRNMPT EQU   IEDQAVTD+352
AVTOSECB EQU   IEDQAVTD+420
AVTECB1  EQU   AVTOSECB
AVTHG02  EQU   IEDQAVTD+456
AVTDISP  EQU   IEDQAVTD+480
AVTHD    EQU   IEDQAVTD+484
AVTSCOPT EQU   AVTHD
AVTSAVTP EQU   IEDQAVTD+540
AVTSAVTF EQU   AVTSAVTP
AVTCKPEL EQU   IEDQAVTD+580
AVTCKRMV EQU   AVTCKPEL
AVTCKELF EQU   IEDQAVTD+608
AVTCKBYT EQU   IEDQAVTD+619
AVTHG01  EQU   IEDQAVTD+620
AVTCKLNK EQU   IEDQAVTD+624
AVTDELAD EQU   IEDQAVTD+632
AVTCRELE EQU   IEDQAVTD+636
AVTCCELE EQU   AVTCRELE
AVTCLRHI EQU   IEDQAVTD+644
AVTADBUF EQU   IEDQAVTD+648
AVTSYSER EQU   IEDQAVTD+656
AVTBFRFG EQU   IEDQAVTD+712
AVTCKPQB EQU   IEDQAVTD+732
AVTCKPTB EQU   AVTCKPQB
AVTCKPEC EQU   AVTCKPQB+4
AVTCKPCC EQU   AVTCKPEC
AVTOPCQB EQU   IEDQAVTD+744
AVTOPCOB EQU   AVTOPCQB
AVTOPCEC EQU   AVTOPCQB+4
AVTOPCCC EQU   AVTOPCEC
AVTOLTQB EQU   IEDQAVTD+756
AVTCWFL1 EQU   IEDQAVTD+852
AVTCWFL2 EQU   IEDQAVTD+853
AVTSUBT  EQU   IEDQAVTD+876
AVTIOTR  EQU   IEDQAVTD+877
AVTKEYLE EQU   IEDQAVTD+960
AVTBIT1  EQU   IEDQAVTD+978
AVTBIT2  EQU   IEDQAVTD+979
AVTBIT3  EQU   IEDQAVTD+980
AVTBIT4  EQU   IEDQAVTD+1064
@NM00085 EQU   IEDQAVTD+1160
IEDNSVTD EQU   0
SAVTDIAG EQU   IEDNSVTD
SAVTDIAF EQU   SAVTDIAG
SAVTCLUP EQU   IEDNSVTD+72
SAVTLUSQ EQU   IEDNSVTD+88
SAVTTCPU EQU   IEDNSVTD+238
SAVTZELM EQU   IEDNSVTD+270
SAVTRDRV EQU   IEDNSVTD+284
SAVTCKQB EQU   IEDNSVTD+300
SAVTCKTB EQU   SAVTCKQB
SAVTCKEC EQU   SAVTCKQB+4
SAVTCKCC EQU   SAVTCKEC
IEDQCCW  EQU   0
CCW      EQU   IEDQCCW
CCWOPCDE EQU   CCW
CCWADDR  EQU   CCW+1
CCWFLAGS EQU   CCW+4
CCWCD    EQU   CCWFLAGS
CCWCC    EQU   CCWFLAGS
CCWSLI   EQU   CCWFLAGS
CCWRSV   EQU   CCW+5
CCWCOUNT EQU   CCW+6
IEDQDISP EQU   0
DSPDISP  EQU   4
DSPCHAIN EQU   12
DSPPRIOR EQU   52
IEDQLCB  EQU   0
LCBRCB   EQU   IEDQLCB
LCBRSKEY EQU   IEDQLCB+8
LCBTSOB  EQU   IEDQLCB+19
LCBCHAIN EQU   IEDQLCB+20
LCBSCRNN EQU   LCBCHAIN
LCBTETEN EQU   LCBCHAIN
LCBINSRC EQU   IEDQLCB+21
LCBLKMDE EQU   LCBINSRC+2
LCBNTXT  EQU   IEDQLCB+24
LCBSTAT4 EQU   LCBNTXT
LCBPHASE EQU   LCBSTAT4
LCBREAL  EQU   LCBPHASE
LCBSCBDA EQU   IEDQLCB+25
LCBMHA   EQU   IEDQLCB+29
LCBFLAG1 EQU   IEDQLCB+32
LCBIOBSN EQU   IEDQLCB+33
LCBSNS   EQU   LCBIOBSN+1
LCBSENS0 EQU   LCBSNS
LCBLOSDT EQU   LCBSENS0
LCBTMOUT EQU   LCBSENS0
LCBFLAG3 EQU   LCBIOBSN+7
LCBCSW   EQU   LCBIOBSN+8
LCBCSWST EQU   LCBCSW+3
LCBCSWUS EQU   LCBCSWST
LCBCSWCS EQU   LCBCSWST+1
LCBSIOCC EQU   LCBIOBSN+15
LCBSTART EQU   LCBIOBSN+16
LCBDCBPT EQU   IEDQLCB+52
LCBRCQCB EQU   IEDQLCB+56
LCBRESTR EQU   LCBRCQCB
LCBTHSQ  EQU   IEDQLCB+60
LCBINCAM EQU   LCBTHSQ
LCBERRCT EQU   IEDQLCB+62
LCBLSPCI EQU   IEDQLCB+65
LCBRCBFR EQU   LCBLSPCI
LCBRDBFR EQU   LCBRCBFR
LCBSTATE EQU   IEDQLCB+70
LCBSTAT1 EQU   LCBSTATE
LCBFREEN EQU   LCBSTAT1
LCBRECVN EQU   LCBSTAT1
LCBSENDN EQU   LCBSTAT1
LCBSTAT2 EQU   LCBSTATE+1
LCBBEOTN EQU   LCBSTAT2
LCBSYNC  EQU   LCBSTAT2
LCBATTN  EQU   LCBSYNC
LCBDIAL  EQU   LCBSTAT2
LCBBFRAV EQU   LCBDIAL
LCBTSTSW EQU   IEDQLCB+72
LCBERB   EQU   IEDQLCB+76
LCBERBST EQU   IEDQLCB+84
LCBDLNKN EQU   LCBERBST
LCBERBCT EQU   IEDQLCB+88
LCBRBCT2 EQU   LCBERBCT+1
LCBTTCIN EQU   IEDQLCB+90
LCBMSGFM EQU   IEDQLCB+92
LCBOBRCH EQU   IEDQLCB+96
LCBINVPT EQU   LCBOBRCH+1
LCBBFRW  EQU   LCBINVPT
LCBTPCD  EQU   IEDQLCB+100
LCBSTAT5 EQU   LCBTPCD
LCBSTAT6 EQU   LCBTPCD+4
LCBRSPSV EQU   LCBTPCD+8
LCBSAVSN EQU   IEDQLCB+112
LCBERCCW EQU   IEDQLCB+120
LCBCPA   EQU   IEDQLCB+144
LCBCCW1  EQU   LCBCPA
LCBCCW2  EQU   LCBCPA+8
LCBCCW3  EQU   LCBCPA+16
LCBCCW4  EQU   LCBCPA+24
LCBCCW5  EQU   LCBCPA+32
LCBATTEL EQU   LCBCCW5
LCBQEBPL EQU   LCBATTEL
LCBSIO   EQU   LCBQEBPL
LCBCP    EQU   LCBQEBPL+4
LCBCCW6  EQU   LCBCPA+40
IEDQLCBX EQU   0
LCBXCON  EQU   IEDQLCBX
LCBXFLAG EQU   LCBXCON
LCBXDCT  EQU   LCBXCON+1
LCBXRADR EQU   LCBXCON+4
IEDQPRF  EQU   0
PRFRCB   EQU   IEDQPRF
PRFKEY   EQU   PRFRCB
PRFQCBA  EQU   PRFRCB+1
PRFPRI   EQU   PRFRCB+4
PRFLINK  EQU   PRFRCB+5
PRFTIC   EQU   IEDQPRF+8
PRFTICC  EQU   PRFTIC
PRFTI0   EQU   PRFTIC+1
PRFNBUNT EQU   IEDQPRF+12
PRFSUNIT EQU   PRFNBUNT
PRFPLQCB EQU   PRFSUNIT
PRFPIUO  EQU   PRFPLQCB
@NM00154 EQU   IEDQPRF+16
PRFSVFFO EQU   @NM00154
PRFSTAT1 EQU   IEDQPRF+20
PRFEOFN  EQU   PRFSTAT1
PRFCORE  EQU   IEDQPRF+21
PRFXTRA  EQU   PRFCORE
PRFSCAN  EQU   IEDQPRF+24
PRFTQBCK EQU   IEDQPRF+26
PRFNTXT  EQU   PRFTQBCK
PRFEOBOF EQU   PRFNTXT
PRFCHDR  EQU   IEDQPRF+32
PRFHQBCK EQU   IEDQPRF+35
IEDPF1   EQU   0
PRF1FLG1 EQU   IEDPF1+3
PRF1WD2  EQU   IEDPF1+4
PRF1SEQP EQU   PRF1WD2
PRF1SQID EQU   PRF1SEQP
PRF1TAG1 EQU   PRF1SQID
IEDPF2   EQU   0
PRF2FLG2 EQU   IEDPF2
PRF2WD2  EQU   IEDPF2+4
IEDQTNTD EQU   0
IEDQTCDE EQU   IEDQTNTD
IEDQTDCE EQU   IEDQTNTD+46
TNTCODE  EQU   0
IEDTNTA  EQU   0
IEDTRM   EQU   0
IEDNTRM  EQU   IEDTRM
TRMBYTE4 EQU   IEDNTRM
TRMBYTE3 EQU   IEDNTRM+1
TRMBYTE2 EQU   IEDNTRM+2
TRMRSACT EQU   TRMBYTE2
TRMINPG  EQU   TRMBYTE2
TRMBYTE1 EQU   IEDNTRM+3
TRMSCPRQ EQU   TRMBYTE1
TRMBYTE0 EQU   IEDNTRM+6
TRMSIBPT EQU   IEDNTRM+7
IEDQTRM  EQU   IEDTRM+14
TRMSTATE EQU   IEDQTRM
TRMLOG   EQU   TRMSTATE
TRMINSEQ EQU   IEDQTRM+4
TLISTCNT EQU   TRMINSEQ
TRMOUTSQ EQU   IEDQTRM+6
TLISTEN  EQU   TRMOUTSQ
TRMDSORG EQU   TLISTEN
TRMALTD  EQU   IEDQTRM+8
TRMDEVFL EQU   IEDQTRM+10
TRMSTAT  EQU   IEDQTRM+12
IEDTH    EQU   0
TTHBYTE0 EQU   IEDTH
TTHSNF   EQU   IEDTH+6
TTHTAG   EQU   TTHSNF
TTHTAG1  EQU   TTHTAG
TTHDCF   EQU   IEDTH+8
CPARST   EQU   0
DSPBYPAS EQU   20
DSPLIFO  EQU   56
DSPLIFOR EQU   60
DSPLIST  EQU   8
DSPPOST  EQU   24
DSPPOSTR EQU   28
DSPPRIO  EQU   48
DSPTRACE EQU   64
DSPTSTQ  EQU   32
DSPTSTQR EQU   36
DSPUNAV  EQU   40
DSPUNAVR EQU   44
DSPWAIT  EQU   16
TNTDCODE EQU   0
TNTFIRST EQU   0
LCBRSPIN EQU   LCBIOBSN
LCBLUSNS EQU   LCBRSPIN+5
LCBSCPRS EQU   LCBRSPIN+9
LCBCSWU1 EQU   LCBSCPRS+2
LCBRSPFG EQU   LCBRSPIN+15
LCBCOREQ EQU   LCBTPCD
LCBCQELE EQU   LCBCOREQ
@NM00134 EQU   LCBCPA+40
LCBQNX   EQU   LCBERCCW
LCBQNXMN EQU   LCBQNX
LCBCANCL EQU   LCBSAVSN
LCBCANFG EQU   LCBCANCL
IEDQNPTR EQU   AVTRNMPT
TRMPRE1  EQU   TRMBYTE4
TRMNCP1  EQU   TRMBYTE4
TRMINOP  EQU   TRMNCP1
TRMPRE   EQU   TRMBYTE3
TRMNCP   EQU   TRMBYTE3
TRMIPLDM EQU   TRMNCP
TRMSLOWN EQU   TRMNCP
TRMPU    EQU   TRMBYTE3
TRMLU    EQU   TRMBYTE3
TRMLINK  EQU   TRMBYTE3
CPACCW1  EQU   LCBCCW1
CPAWRTS  EQU   CPACCW1
CPACCW2  EQU   LCBCCW2
CPAWRTBF EQU   CPACCW2+1
CPAWRTBK EQU   CPACCW2+5
CPACCW3  EQU   LCBCCW3
CPARDS   EQU   CPACCW3
CPACCW4  EQU   LCBCCW4
CPARDU   EQU   CPACCW4+1
PRFSHDR  EQU   IEDQPRF+42
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00173 EQU   CPACCW4
@NM00172 EQU   CPACCW3+4
@NM00171 EQU   CPACCW3+1
@NM00170 EQU   CPACCW2+4
@NM00169 EQU   CPACCW2
@NM00168 EQU   CPACCW1+1
@NM00165 EQU   TRMLINK
TRMLSTAT EQU   TRMLINK
TRMLINT  EQU   TRMLINK
TRMEPMOD EQU   TRMLINK
TRMLULOG EQU   TRMLU
TRMINERR EQU   TRMLU
TRMLUREQ EQU   TRMLU
TRMSESRQ EQU   TRMLU
TRMTDIFF EQU   TRMLU
TRMLUTM  EQU   TRMLU
TRMLUIT  EQU   TRMLU
TRMAUTO  EQU   TRMLU
TRMPCONT EQU   TRMPU
@NM00164 EQU   TRMPU
TRMNCONT EQU   TRMNCP
TRMQUCKN EQU   TRMNCP
TRMSYGEN EQU   TRMNCP
TRMNCPCL EQU   TRMNCP
TRMINOUT EQU   TRMPRE
TRMRDOUT EQU   TRMPRE
TRMNLOUT EQU   TRMPRE
TRMWROUT EQU   TRMPRE
TRMASNXI EQU   TRMPRE
TRMSTMM  EQU   TRMPRE
TRMCMODE EQU   TRMPRE
TRMSTPND EQU   TRMPRE
@NM00163 EQU   TRMNCP1
TRMLYNCH EQU   TRMPRE1
TRMSPOUT EQU   TRMPRE1
TRMERLCK EQU   TRMPRE1
TRMQNPL  EQU   TRMPRE1
TRMSPACT EQU   TRMPRE1
TRMOCNI  EQU   TRMPRE1
TRMSESSN EQU   TRMPRE1
TRMCONT  EQU   TRMPRE1
@NM00142 EQU   LCBCANCL+3
LCBCANTH EQU   LCBCANCL+1
@NM00141 EQU   LCBCANFG
LCBCANCD EQU   LCBCANFG
@NM00140 EQU   LCBCANFG
LCBCANEB EQU   LCBCANFG
LCBCANXT EQU   LCBCANFG
LCBUNADD EQU   LCBQNX+21
LCBUASZE EQU   LCBQNX+20
LCBDSTEA EQU   LCBQNX+16
@NM00139 EQU   LCBQNX+8
LCBIOSBS EQU   LCBQNX+5
@NM00138 EQU   LCBQNX+4
LCBSTSAV EQU   LCBQNX+1
@NM00137 EQU   LCBQNXMN
LCBNX509 EQU   LCBQNXMN
LCBNX162 EQU   LCBQNXMN
LCBNX142 EQU   LCBQNXMN
LCBNX064 EQU   LCBQNXMN
@NM00136 EQU   @NM00134+4
LCBNCPPT EQU   @NM00134+1
@NM00135 EQU   @NM00134
LCBWRSCH EQU   LCBCOREQ+8
LCBCQLNK EQU   LCBCOREQ+4
LCBPAKCH EQU   LCBRSPIN+16
@NM00133 EQU   LCBRSPFG
LCBRSRH  EQU   LCBRSPFG
LCBEXPI  EQU   LCBRSPFG
@NM00132 EQU   LCBRSPIN+12
LCBUSUE1 EQU   LCBCSWU1
@NM00131 EQU   LCBCSWU1
@NM00130 EQU   LCBSCPRS+1
LCBDFCMD EQU   LCBSCPRS
LCBUSER  EQU   LCBLUSNS+2
LCBSMIN  EQU   LCBLUSNS+1
LCBSMAJ  EQU   LCBLUSNS
LCBRHSV  EQU   LCBRSPIN+2
LCBSNS0  EQU   LCBRSPIN+1
@NM00129 EQU   LCBRSPIN
TTHTAG2  EQU   TTHTAG+1
@NM00167 EQU   TTHTAG1
TTHTAGS  EQU   TTHTAG1
TTHOAF   EQU   IEDTH+4
TTHDAF   EQU   IEDTH+2
TTHBYTE1 EQU   IEDTH+1
TTHEFI   EQU   TTHBYTE0
@NM00166 EQU   TTHBYTE0
TTHEBIU  EQU   TTHBYTE0
TTHBBIU  EQU   TTHBYTE0
TTHFTYPE EQU   TTHBYTE0
TRMOPT   EQU   IEDTRM+34
TRMOPTBL EQU   IEDQTRM+18
TRMOPNO  EQU   IEDQTRM+17
TRMCHCIN EQU   IEDQTRM+16
TRMSENSE EQU   TRMSTAT+3
TRMTEMPR EQU   TRMSTAT+2
TRMSIO   EQU   TRMSTAT
@NM00162 EQU   TRMDEVFL+1
TRMTPIN  EQU   TRMDEVFL+1
TRMNCPI  EQU   TRMDEVFL+1
TRMRNTRM EQU   TRMDEVFL+1
@NM00161 EQU   TRMDEVFL+1
TRMLMD   EQU   TRMDEVFL+1
TRMCONC  EQU   TRMDEVFL+1
TRMTSOB  EQU   TRMDEVFL
TRMBFDY  EQU   TRMDEVFL
TRMTBLK  EQU   TRMDEVFL
TRMSBLK  EQU   TRMDEVFL
TRMBLKS  EQU   TRMDEVFL
TRMADDC  EQU   TRMDEVFL
TRMDDIG  EQU   TRMDEVFL
TRMBUFS  EQU   TRMDEVFL
TRMPRILK EQU   TRMALTD
TRMLGB   EQU   TRMDSORG
TRMUTERM EQU   TLISTCNT
TRMDESTQ EQU   IEDQTRM+1
TRMSCNYN EQU   TRMSTATE
TRMOPTFN EQU   TRMSTATE
TRMHELDN EQU   TRMSTATE
TRMACPTN EQU   TRMSTATE
TRMPREF  EQU   TRMSTATE
TRMPROC  EQU   TRMLOG
TRMLIST  EQU   TRMLOG
TRMLINE  EQU   TRMSTATE
TRMSUBST EQU   IEDNTRM+12
TRMTYPE  EQU   IEDNTRM+11
TRMRLMCT EQU   IEDNTRM+10
TRMCOHTG EQU   TRMSIBPT+1
TRMGPCNT EQU   TRMSIBPT
TRMBUFRD EQU   TRMBYTE0
TRMSNA   EQU   TRMBYTE0
TRMGP    EQU   TRMBYTE0
TRMDIAL  EQU   TRMBYTE0
@NM00160 EQU   TRMBYTE0
TRMOUTPT EQU   TRMBYTE0
TRMINPUT EQU   TRMBYTE0
TRMUDEF  EQU   TRMBYTE0
TRMCOHRT EQU   IEDNTRM+4
TRMSTOTE EQU   TRMBYTE1
TRMCKPRN EQU   TRMBYTE1
TRMTSATN EQU   TRMBYTE1
TRMTRACE EQU   TRMBYTE1
TRMSWBCK EQU   TRMBYTE1
TRMAUTOC EQU   TRMBYTE1
TRMINPTP EQU   TRMBYTE1
TRMWTNEG EQU   TRMSCPRQ
TRMWRBRK EQU   TRMBYTE2
TRMNOSND EQU   TRMBYTE2
TRMPREP  EQU   TRMBYTE2
TRMGPACT EQU   TRMBYTE2
TRMANDL  EQU   TRMBYTE2
TRMCLOSN EQU   TRMINPG
TRMREMB  EQU   TRMBYTE2
TNTTRMAD EQU   IEDTNTA
TNTLEN   EQU   IEDQTNTD+44
TNTMIDEN EQU   IEDQTNTD+41
TNTENLEN EQU   IEDQTNTD+40
TNTSRCHX EQU   IEDQTNTD+38
PRF2SEQP EQU   PRF2WD2
@NM00159 EQU   IEDPF2+1
@NM00158 EQU   PRF2FLG2
PRF2TERM EQU   PRF2FLG2
PRF2SMI  EQU   PRF2FLG2
PRF2FORM EQU   PRF2FLG2
PRF2TNTI EQU   PRF2FLG2
PRF1RULN EQU   PRF1SEQP+2
PRF1TAG2 EQU   PRF1SQID+1
@NM00157 EQU   PRF1TAG1
PRF1TAGS EQU   PRF1TAG1
@NM00156 EQU   PRF1FLG1
PRF1LOGD EQU   PRF1FLG1
PRF1USS  EQU   PRF1FLG1
PRF1FORM EQU   PRF1FLG1
PRF1EXPI EQU   PRF1FLG1
PRF1FIDI EQU   PRF1FLG1
PRF1RH   EQU   IEDPF1
PRFDEST  EQU   IEDQPRF+40
PRFISEQ  EQU   IEDQPRF+38
PRFSTXT  EQU   PRFHQBCK
PRFNHDR  EQU   PRFCHDR
PRFCRCD  EQU   IEDQPRF+29
PRFSVSEQ EQU   PRFNTXT+1
PRFSVPRI EQU   PRFEOBOF
PRFISIZE EQU   PRFSCAN+1
@NM00155 EQU   PRFSCAN
PRFEOB   EQU   PRFXTRA+1
PRFSTSO  EQU   PRFXTRA
PRFNHDRN EQU   PRFSTAT1
PRFNLSTN EQU   PRFSTAT1
PRFLOCK  EQU   PRFEOFN
PRFDUPLN EQU   PRFSTAT1
PRFTSMSG EQU   PRFSTAT1
PRFITCPN EQU   PRFSTAT1
PRFERMGN EQU   PRFSTAT1
PRFCNCLN EQU   PRFSTAT1
PRFSVFLG EQU   @NM00154+3
PRFSIZE  EQU   PRFSVFFO+2
PRFSRCE  EQU   PRFSVFFO
PRFLCB   EQU   IEDQPRF+13
@NM00153 EQU   PRFTICC
@NM00152 EQU   PRFTICC
@NM00151 EQU   PRFTICC
PRFTICON EQU   PRFTICC
@NM00150 EQU   PRFTICC
@NM00149 EQU   PRFTICC
PRFBFMM  EQU   PRFTICC
PRFEOMSG EQU   PRFTICC
PRFCOUNT EQU   PRFLINK+1
@NM00148 EQU   PRFLINK
PRFFLAGS EQU   PRFPRI
PRFIOADR EQU   PRFQCBA
PRFOPCDE EQU   PRFKEY
LCBERADR EQU   LCBXRADR+1
LCBPCIRC EQU   LCBXRADR
LCBDCT3  EQU   LCBXDCT+2
LCBDCT2  EQU   LCBXDCT+1
LCBDCT1  EQU   LCBXDCT
@NM00147 EQU   LCBXFLAG
LCBERPND EQU   LCBXFLAG
LCBSRCPF EQU   LCBXFLAG
LCBGPCTV EQU   LCBXFLAG
@NM00146 EQU   LCBXFLAG
@NM00145 EQU   LCBXFLAG
@NM00144 EQU   LCBXFLAG
@NM00143 EQU   LCBXFLAG
LCBCCW10 EQU   LCBCPA+72
LCBCCW9  EQU   LCBCPA+64
LCBCCW8  EQU   LCBCPA+56
LCBCCW7  EQU   LCBCPA+48
LCBIOSB  EQU   LCBQEBPL+1
@NM00128 EQU   LCBERCCW+16
LCBATL05 EQU   LCBERCCW+8
@NM00127 EQU   LCBERCCW
LCBCSWSV EQU   LCBSAVSN+1
LCBSNSV  EQU   LCBSAVSN
LCBBFSNS EQU   LCBRSPSV
LCBWAITC EQU   LCBTPCD+5
LCBINPAK EQU   LCBSTAT6
LCBMHBID EQU   LCBSTAT6
LCBRTRRO EQU   LCBSTAT6
LCBHDRPD EQU   LCBSTAT6
LCBCHN   EQU   LCBSTAT6
LCBBFRSV EQU   LCBTPCD+1
@NM00126 EQU   LCBSTAT5
LCBLUS   EQU   LCBSTAT5
LCBLUNIT EQU   LCBSTAT5
LCBPERM  EQU   LCBSTAT5
LCBNXCMD EQU   LCBBFRW
LCBERMSK EQU   LCBOBRCH
LCBSCBA  EQU   IEDQLCB+93
LCBOLT   EQU   LCBMSGFM
LCBEOT   EQU   LCBMSGFM
LCBENQ   EQU   LCBMSGFM
LCBTTD   EQU   LCBMSGFM
LCBRSTRT EQU   LCBMSGFM
LCBVSTRT EQU   LCBMSGFM
LCBACKI  EQU   LCBMSGFM
LCBNAK   EQU   LCBMSGFM
@NM00125 EQU   LCBRBCT2
LCBDCNT  EQU   LCBRBCT2
LCBRBCT1 EQU   LCBERBCT
LCBERBCH EQU   IEDQLCB+85
LCBCOMPL EQU   LCBDLNKN
LCBPRCPG EQU   LCBERBST
LCBERROR EQU   LCBERBST
@NM00124 EQU   LCBERBST
LCBINQ   EQU   LCBERBST
LCBRDERR EQU   LCBERBST
LCBEOMSG EQU   LCBERBST
LCBMSG   EQU   LCBERBST
LCBERBLK EQU   IEDQLCB+81
LCBERBPY EQU   IEDQLCB+80
LCBERBQB EQU   LCBERB+1
LCBERBKY EQU   LCBERB
LCBRECAD EQU   IEDQLCB+73
@NM00123 EQU   LCBTSTSW
@NM00122 EQU   LCBTSTSW
@NM00121 EQU   LCBTSTSW
@NM00120 EQU   LCBTSTSW
@NM00119 EQU   LCBTSTSW
@NM00118 EQU   LCBTSTSW
@NM00117 EQU   LCBTSTSW
LCBCONCT EQU   LCBTSTSW
LCBRESP  EQU   LCBSTAT2
LCBNEGRP EQU   LCBSTAT2
LCBSNDPR EQU   LCBSTAT2
LCBCONNN EQU   LCBBEOTN
LCBMSGNN EQU   LCBSTAT2
LCBTRACE EQU   LCBSTAT2
LCBCONT  EQU   LCBSTAT1
LCBINITN EQU   LCBSTAT1
LCBOCNI  EQU   LCBSTAT1
LCBOCWTN EQU   LCBSTAT1
LCBRCLLN EQU   LCBSTAT1
LCBRECOF EQU   IEDQLCB+68
LCBUCBX  EQU   IEDQLCB+64
LCBTTBIN EQU   LCBERRCT
@NM00116 EQU   LCBINCAM
LCBGETMN EQU   LCBINCAM
@NM00115 EQU   LCBRESTR+1
LCBCMDSV EQU   LCBRESTR
LCBPCILK EQU   LCBDCBPT
LCBAP4OL EQU   LCBSIOCC
LCBAP3OL EQU   LCBSIOCC
LCBAP2OL EQU   LCBSIOCC
LCBAP1OL EQU   LCBSIOCC
LCBSIOC2 EQU   LCBSIOCC
LCBSIOC1 EQU   LCBSIOCC
@NM00114 EQU   LCBSIOCC
LCBCSWRC EQU   LCBCSW+5
LCBCSCHC EQU   LCBCSWCS
LCBCSICC EQU   LCBCSWCS
LCBCSCCC EQU   LCBCSWCS
LCBCSCDC EQU   LCBCSWCS
LCBCSPTC EQU   LCBCSWCS
LCBCSPGC EQU   LCBCSWCS
LCBCSIL  EQU   LCBCSWCS
LCBCSPCI EQU   LCBCSWCS
LCBUSUE  EQU   LCBCSWUS
LCBUSUC  EQU   LCBCSWUS
LCBUSDE  EQU   LCBCSWUS
LCBUSCE  EQU   LCBCSWUS
LCBUSBSY EQU   LCBCSWUS
LCBUSCUE EQU   LCBCSWUS
LCBUSSM  EQU   LCBCSWUS
LCBUSAT  EQU   LCBCSWUS
LCBCSWCA EQU   LCBCSW
LCBOBR   EQU   LCBFLAG3
LCBOBRRD EQU   LCBFLAG3
LCBIOMSG EQU   LCBFLAG3
LCBSOHC  EQU   LCBFLAG3
LCBRLAD  EQU   LCBFLAG3
LCBSOHR  EQU   LCBFLAG3
@NM00113 EQU   LCBFLAG3
LCBECBPT EQU   LCBIOBSN+4
LCBECBCC EQU   LCBIOBSN+3
LCBSENS1 EQU   LCBSNS+1
LCBABORT EQU   LCBTMOUT
LCBNOTIN EQU   LCBLOSDT
LCBOVRUN EQU   LCBSENS0
LCBDATCK EQU   LCBSENS0
LCBEQUCK EQU   LCBSENS0
LCBBUSCK EQU   LCBSENS0
LCBINTRQ EQU   LCBSENS0
LCBCMDRJ EQU   LCBSENS0
LCBFLAG2 EQU   LCBIOBSN
@NM00112 EQU   LCBFLAG1
LCBUNREL EQU   LCBFLAG1
LCBEXCPN EQU   LCBFLAG1
@NM00111 EQU   LCBFLAG1
LCBERPIN EQU   LCBFLAG1
@NM00110 EQU   LCBFLAG1
LCBFSBFR EQU   LCBMHA
LCBISZE  EQU   IEDQLCB+28
LCBLNENT EQU   LCBSCBDA+1
@NM00109 EQU   LCBSCBDA
LCBCPGMH EQU   LCBSTAT4
@NM00108 EQU   LCBSTAT4
LCBACTRQ EQU   LCBSTAT4
LCBIPLRQ EQU   LCBSTAT4
LCBDACRQ EQU   LCBSTAT4
LCBDMPRQ EQU   LCBSTAT4
@NM00107 EQU   LCBLKMDE
LCBLOCKI EQU   LCBLKMDE
LCBLOCKR EQU   LCBLKMDE
LCBHMFLG EQU   LCBLKMDE
LCBBDFLG EQU   LCBLKMDE
@NM00106 EQU   LCBINSRC
LCBABRTN EQU   LCBCHAIN
LCBCTLMD EQU   LCBTETEN
LCBBFRSZ EQU   LCBCHAIN
LCBUREQN EQU   LCBCHAIN
LCBNORTY EQU   LCBCHAIN
LCBERMSG EQU   LCBCHAIN
LCBEXCP  EQU   LCBCHAIN
LCBINVRQ EQU   LCBSCRNN
LCB2741N EQU   LCBTSOB
LCBINHBN EQU   LCBTSOB
LCBCIRCD EQU   LCBTSOB
LCBPREP  EQU   LCBTSOB
LCBSOPL  EQU   LCBTSOB
LCBSATRD EQU   LCBTSOB
LCBTSBUF EQU   LCBTSOB
LCBWRBRK EQU   LCBTSOB
LCBTDL   EQU   IEDQLCB+18
LCBEOLTD EQU   IEDQLCB+16
LCBRSLNK EQU   IEDQLCB+13
LCBRSPRI EQU   IEDQLCB+12
LCBSTCBA EQU   IEDQLCB+9
LCBLINK  EQU   LCBRCB+5
LCBPRI   EQU   LCBRCB+4
LCBQCBA  EQU   LCBRCB+1
LCBKEY   EQU   LCBRCB
@NM00105 EQU   CCWFLAGS
CCWIDA   EQU   CCWFLAGS
CCWPCI   EQU   CCWFLAGS
CCWSKIP  EQU   CCWFLAGS
SAVTLLCB EQU   IEDNSVTD+316
SAVTBITN EQU   IEDNSVTD+312
@NM00104 EQU   SAVTCKQB+8
@NM00103 EQU   SAVTCKEC+1
@NM00102 EQU   SAVTCKCC
SAVTCKPO EQU   SAVTCKCC
SAVTCKWA EQU   SAVTCKCC
SAVTCKCH EQU   SAVTCKTB+1
SAVTCKVT EQU   SAVTCKTB
@NM00101 EQU   IEDNSVTD+297
SAVTRDFG EQU   SAVTRDRV+12
@NM00100 EQU   SAVTRDRV+5
SAVTRDPY EQU   SAVTRDRV+4
SAVTRDQB EQU   SAVTRDRV+1
SAVTRDKY EQU   SAVTRDRV
SAVTNID  EQU   IEDNSVTD+280
SAVTDVAS EQU   IEDNSVTD+276
SAVTPLSZ EQU   IEDNSVTD+274
@NM00099 EQU   IEDNSVTD+273
SAVTSUBL EQU   IEDNSVTD+272
@NM00098 EQU   SAVTZELM+1
SAVTSUBM EQU   SAVTZELM
SAVTMHDX EQU   IEDNSVTD+268
SAVTNAT1 EQU   IEDNSVTD+266
SAVTSH20 EQU   IEDNSVTD+264
SAVTLCBS EQU   IEDNSVTD+260
SAVTRNMP EQU   IEDNSVTD+256
SAVTTNTX EQU   IEDNSVTD+252
SAVTNAX  EQU   IEDNSVTD+248
SAVTSUBV EQU   IEDNSVTD+247
SAVTSUBA EQU   IEDNSVTD+246
SAVTSIBC EQU   IEDNSVTD+244
SAVTBSM  EQU   IEDNSVTD+240
SAVTSCPT EQU   SAVTTCPU
SAVTRQTG EQU   IEDNSVTD+236
SAVTRQCH EQU   IEDNSVTD+232
SAVTMAND EQU   IEDNSVTD+228
SAVTSPLN EQU   IEDNSVTD+224
SAVTNADL EQU   IEDNSVTD+222
SAVTNATL EQU   IEDNSVTD+220
SAVTMHTB EQU   IEDNSVTD+216
SAVTSSMH EQU   IEDNSVTD+212
SAVTQRS  EQU   IEDNSVTD+208
SAVTRQIN EQU   IEDNSVTD+204
SAVTDFCO EQU   IEDNSVTD+200
SAVTSAO  EQU   IEDNSVTD+196
SAVTSARI EQU   IEDNSVTD+192
SAVTSAC  EQU   IEDNSVTD+188
SAVTSAI  EQU   IEDNSVTD+184
SAVTCSCI EQU   IEDNSVTD+180
SAVTSSRP EQU   IEDNSVTD+176
SAVTSSRQ EQU   IEDNSVTD+172
SAVTSCLU EQU   IEDNSVTD+168
SAVTXTRQ EQU   IEDNSVTD+164
SAVTMVBF EQU   IEDNSVTD+160
@NM00097 EQU   IEDNSVTD+148
SAVTIPCQ EQU   IEDNSVTD+144
@NM00096 EQU   IEDNSVTD+136
SAVTXFMI EQU   IEDNSVTD+132
@NM00095 EQU   IEDNSVTD+124
SAVTXFMO EQU   IEDNSVTD+120
@NM00094 EQU   IEDNSVTD+116
SAVTSSSR EQU   IEDNSVTD+112
SAVTSCPQ EQU   IEDNSVTD+108
SAVTSLCB EQU   IEDNSVTD+104
SAVTLUSR EQU   IEDNSVTD+100
@NM00093 EQU   SAVTLUSQ+8
SAVTLUSP EQU   SAVTLUSQ+4
SAVTLUSB EQU   SAVTLUSQ
@NM00092 EQU   IEDNSVTD+84
SAVTSAT  EQU   IEDNSVTD+80
SAVTNAT  EQU   IEDNSVTD+76
SAVTPIUT EQU   IEDNSVTD+68
SAVTRNTA EQU   IEDNSVTD+64
SAVTDNIR EQU   IEDNSVTD+60
SAVTCNIR EQU   IEDNSVTD+56
SAVTFLDH EQU   IEDNSVTD+52
SAVTSRTN EQU   IEDNSVTD+48
SAVTSREQ EQU   IEDNSVTD+44
SAVTFAIL EQU   IEDNSVTD+42
SAVTSUSE EQU   IEDNSVTD+40
SAVTSIB  EQU   IEDNSVTD+36
SAVTPRTN EQU   IEDNSVTD+32
@NM00091 EQU   IEDNSVTD+28
SAVTWH20 EQU   IEDNSVTD+26
SAVTPWT  EQU   IEDNSVTD+24
SAVTPRTQ EQU   IEDNSVTD+20
SAVTPREQ EQU   IEDNSVTD+16
SAVTPH20 EQU   IEDNSVTD+14
SAVTPUSE EQU   IEDNSVTD+12
SAVTPLCB EQU   IEDNSVTD+8
SAVTPOOL EQU   IEDNSVTD+4
SAVTPRMT EQU   SAVTDIAF
SAVTVIRT EQU   SAVTDIAF
AVTCPBNO EQU   IEDQAVTD+1172
AVTHRESS EQU   IEDQAVTD+1171
@NM00090 EQU   IEDQAVTD+1170
@NM00089 EQU   IEDQAVTD+1169
@NM00088 EQU   IEDQAVTD+1168
@NM00087 EQU   IEDQAVTD+1165
@NM00086 EQU   IEDQAVTD+1164
AVTHRESE EQU   @NM00085
AVTRADDR EQU   IEDQAVTD+1156
AVTNADDR EQU   IEDQAVTD+1152
AVTHRESN EQU   IEDQAVTD+1148
AVTVOLRN EQU   IEDQAVTD+1144
AVTTOTNN EQU   IEDQAVTD+1140
AVTTRCYN EQU   IEDQAVTD+1136
AVTRCTRN EQU   IEDQAVTD+1132
AVTNOVON EQU   IEDQAVTD+1128
AVTADEBN EQU   IEDQAVTD+1124
AVTVOLRR EQU   IEDQAVTD+1120
AVTTOTNR EQU   IEDQAVTD+1116
AVTTRCYR EQU   IEDQAVTD+1112
AVTRCTRR EQU   IEDQAVTD+1108
AVTNOVOR EQU   IEDQAVTD+1104
AVTADEBR EQU   IEDQAVTD+1100
AVTLODPT EQU   IEDQAVTD+1096
AVTIOBN  EQU   IEDQAVTD+1092
AVTIOBR  EQU   IEDQAVTD+1088
AVTCPBPT EQU   IEDQAVTD+1084
AVTFCPB  EQU   IEDQAVTD+1080
@NM00084 EQU   IEDQAVTD+1076
AVTINCPQ EQU   IEDQAVTD+1072
@NM00083 EQU   IEDQAVTD+1068
@NM00082 EQU   IEDQAVTD+1065
@NM00081 EQU   AVTBIT4
@NM00080 EQU   AVTBIT4
@NM00079 EQU   AVTBIT4
@NM00078 EQU   AVTBIT4
@NM00077 EQU   AVTBIT4
@NM00076 EQU   AVTBIT4
@NM00075 EQU   AVTBIT4
AVTRUFTN EQU   AVTBIT4
@NM00074 EQU   IEDQAVTD+1060
AVTNOBFQ EQU   IEDQAVTD+1056
@NM00073 EQU   IEDQAVTD+1052
AVTDKENQ EQU   IEDQAVTD+1048
@NM00072 EQU   IEDQAVTD+1044
AVTDKAPQ EQU   IEDQAVTD+1040
AVTCOPY  EQU   IEDQAVTD+1036
AVTIA    EQU   IEDQAVTD+1032
AVTFL    EQU   IEDQAVTD+1028
@NM00071 EQU   IEDQAVTD+1024
AVTNCPBQ EQU   IEDQAVTD+1020
AVTTOTNC EQU   IEDQAVTD+1016
AVTCMAX  EQU   IEDQAVTD+1012
AVTCMIN  EQU   IEDQAVTD+1008
AVTHM02  EQU   IEDQAVTD+1004
AVTOPCIN EQU   IEDQAVTD+1002
AVTDCTLN EQU   IEDQAVTD+1000
AVTOPMSK EQU   IEDQAVTD+996
AVTDDFT  EQU   IEDQAVTD+992
AVTSTEAL EQU   IEDQAVTD+988
AVTOPTN  EQU   IEDQAVTD+984
AVTDSKCT EQU   IEDQAVTD+982
AVTCKRST EQU   IEDQAVTD+981
AVTSTAN  EQU   AVTBIT3
AVTSTACN EQU   AVTBIT3
AVTSTAIN EQU   AVTBIT3
AVTSTAYN EQU   AVTBIT3
AVTOLTBN EQU   AVTBIT3
AVTTSAB  EQU   AVTBIT3
AVTRFULN EQU   AVTBIT3
AVTRECVN EQU   AVTBIT3
@NM00070 EQU   AVTBIT2
@NM00069 EQU   AVTBIT2
AVTOPEIN EQU   AVTBIT2
AVTSTRTN EQU   AVTBIT2
AVTTOPOL EQU   AVTBIT2
AVTCOPYN EQU   AVTBIT2
AVTREUSN EQU   AVTBIT2
AVTEXTSC EQU   AVTBIT2
AVTDISKN EQU   AVTBIT1
AVTQUCKN EQU   AVTBIT1
AVTCLOSN EQU   AVTBIT1
AVTREADN EQU   AVTBIT1
AVTDLAYN EQU   AVTBIT1
AVTAQTAN EQU   AVTBIT1
AVTTSON  EQU   AVTBIT1
AVTAPLKN EQU   AVTBIT1
AVTDUMBR EQU   IEDQAVTD+976
AVTDLQX  EQU   IEDQAVTD+974
AVTINTLV EQU   IEDQAVTD+972
AVTSMCNT EQU   IEDQAVTD+970
AVTAVFCT EQU   IEDQAVTD+968
AVTOPCON EQU   IEDQAVTD+966
AVTOPCNT EQU   IEDQAVTD+964
AVTLNCNT EQU   IEDQAVTD+962
AVTHA16  EQU   IEDQAVTD+958
AVTHA7   EQU   IEDQAVTD+956
AVTHA4   EQU   IEDQAVTD+954
AVTHA3   EQU   IEDQAVTD+952
AVTHA2   EQU   IEDQAVTD+950
AVTGETMS EQU   IEDQAVTD+949
@NM00068 EQU   IEDQAVTD+948
AVTGETMD EQU   IEDQAVTD+944
AVTGETMN EQU   IEDQAVTD+940
AVTCWTOT EQU   IEDQAVTD+936
AVTCWINT EQU   IEDQAVTD+884
AVTDTRAP EQU   IEDQAVTD+880
@NM00067 EQU   IEDQAVTD+878
@NM00066 EQU   AVTIOTR
AVTIOTRH EQU   AVTIOTR
AVTIOTRE EQU   AVTIOTR
@NM00065 EQU   AVTSUBT
AVTSUBPT EQU   AVTSUBT
AVTSUBON EQU   AVTSUBT
AVTAFE30 EQU   IEDQAVTD+872
AVTAFE20 EQU   IEDQAVTD+868
AVTAFE10 EQU   IEDQAVTD+864
AVTCWEC2 EQU   IEDQAVTD+860
AVTCWPM2 EQU   IEDQAVTD+856
AVTCWTS2 EQU   IEDQAVTD+855
AVTCWTS1 EQU   IEDQAVTD+854
AVTCWCLD EQU   AVTCWFL2
AVTCWRAP EQU   AVTCWFL2
@NM00064 EQU   AVTCWFL2
@NM00063 EQU   AVTCWFL2
@NM00062 EQU   AVTCWFL2
@NM00061 EQU   AVTCWFL2
@NM00060 EQU   AVTCWFL2
AVTCWACT EQU   AVTCWFL2
@NM00059 EQU   AVTCWFL1
@NM00058 EQU   AVTCWFL1
@NM00057 EQU   AVTCWFL1
@NM00056 EQU   AVTCWFL1
@NM00055 EQU   AVTCWFL1
@NM00054 EQU   AVTCWFL1
@NM00053 EQU   AVTCWFL1
AVTCOMWN EQU   AVTCWFL1
AVTCWEC1 EQU   IEDQAVTD+848
AVTCWPM1 EQU   IEDQAVTD+844
AVTCAREA EQU   IEDQAVTD+840
AVTFZERO EQU   IEDQAVTD+836
AVTCADDR EQU   IEDQAVTD+832
AVTCOREC EQU   IEDQAVTD+828
@NM00052 EQU   IEDQAVTD+820
AVTCPBCB EQU   IEDQAVTD+816
@NM00051 EQU   IEDQAVTD+808
AVTDSIOB EQU   IEDQAVTD+804
@NM00050 EQU   IEDQAVTD+796
AVTCPRMB EQU   IEDQAVTD+792
@NM00049 EQU   IEDQAVTD+784
AVTCLOSB EQU   IEDQAVTD+780
@NM00048 EQU   IEDQAVTD+772
AVTACTIB EQU   IEDQAVTD+768
@NM00047 EQU   IEDQAVTD+764
AVTOLTEB EQU   IEDQAVTD+760
AVTOLTCH EQU   AVTOLTQB+1
AVTOLTVT EQU   AVTOLTQB
@NM00046 EQU   AVTOPCQB+8
@NM00045 EQU   AVTOPCEC+1
@NM00044 EQU   AVTOPCCC
AVTOPCPO EQU   AVTOPCCC
AVTOPCWA EQU   AVTOPCCC
AVTOPCCH EQU   AVTOPCOB+1
AVTOPCVT EQU   AVTOPCOB
@NM00043 EQU   AVTCKPQB+9
AVTCKPTS EQU   AVTCKPQB+8
@NM00042 EQU   AVTCKPEC+1
@NM00041 EQU   AVTCKPCC
AVTCKPPO EQU   AVTCKPCC
AVTCKPWA EQU   AVTCKPCC
AVTCKPCH EQU   AVTCKPTB+1
AVTCKPVT EQU   AVTCKPTB
@NM00040 EQU   IEDQAVTD+724
AVTBFRTB EQU   IEDQAVTD+720
@NM00039 EQU   IEDQAVTD+716
AVTSELCH EQU   IEDQAVTD+713
AVTBFRTN EQU   AVTBFRFG
AVTBFREB EQU   IEDQAVTD+708
AVTTIMQ  EQU   IEDQAVTD+704
@NM00038 EQU   IEDQAVTD+700
AVTIMQPS EQU   IEDQAVTD+696
AVTINOUT EQU   IEDQAVTD+694
AVTREFTM EQU   IEDQAVTD+692
@NM00037 EQU   IEDQAVTD+680
AVTDELYB EQU   IEDQAVTD+676
AVTOCQPT EQU   IEDQAVTD+672
AVTTSOPT EQU   IEDQAVTD+668
AVTSUPPT EQU   IEDQAVTD+664
AVTCBQCB EQU   IEDQAVTD+660
AVTMSGS  EQU   IEDQAVTD+657
@NM00036 EQU   AVTSYSER
@NM00035 EQU   AVTSYSER
@NM00034 EQU   AVTSYSER
@NM00033 EQU   AVTSYSER
@NM00032 EQU   AVTSYSER
@NM00031 EQU   AVTSYSER
AVTCMAXN EQU   AVTSYSER
AVTCMINN EQU   AVTSYSER
AVT2260L EQU   IEDQAVTD+652
AVTABEPL EQU   AVTADBUF
AVTHFF   EQU   AVTCLRHI+2
@NM00030 EQU   AVTCLRHI
AVTCCLNK EQU   AVTCRELE+5
AVTCCPRI EQU   AVTCRELE+4
AVTCCQCB EQU   AVTCCELE+1
AVTCCKEY EQU   AVTCCELE
AVTDELEM EQU   IEDQAVTD+628
AVTBSX   EQU   AVTCKLNK
AVTOPETR EQU   AVTHG01
@NM00029 EQU   AVTCKBYT
AVTCKONQ EQU   AVTCKBYT
@NM00028 EQU   AVTCKBYT
@NM00027 EQU   AVTCKBYT
@NM00026 EQU   AVTCKBYT
@NM00025 EQU   AVTCKBYT
@NM00024 EQU   AVTCKBYT
@NM00023 EQU   AVTCKBYT
AVTOPERT EQU   IEDQAVTD+618
AVTOPXCL EQU   IEDQAVTD+616
AVTOPERL EQU   IEDQAVTD+615
@NM00022 EQU   IEDQAVTD+614
AVTCKTIM EQU   IEDQAVTD+612
AVTCKELV EQU   IEDQAVTD+610
AVTCPRCD EQU   IEDQAVTD+609
AVTWARMN EQU   AVTCKELF
AVTCRTLN EQU   AVTCKELF
AVTCPIPN EQU   AVTCKELF
AVTCCLCN EQU   AVTCKELF
AVTCINCN EQU   AVTCKELF
@NM00021 EQU   AVTCKELF
AVTCMCPN EQU   AVTCKELF
AVTNQBCK EQU   AVTCKELF
AVTCKQAD EQU   IEDQAVTD+605
AVTSCBSZ EQU   IEDQAVTD+604
@NM00020 EQU   IEDQAVTD+600
AVTCKELE EQU   IEDQAVTD+596
@NM00019 EQU   AVTCKPEL+8
AVTCKRLK EQU   AVTCKPEL+5
AVTCKRPR EQU   AVTCKPEL+4
AVTCKRMQ EQU   AVTCKRMV+1
AVTCKRKY EQU   AVTCKRMV
AVTHK    EQU   IEDQAVTD+576
AVTHI    EQU   IEDQAVTD+572
AVTIOT   EQU   IEDQAVTD+568
AVTNX    EQU   IEDQAVTD+564
AVTTONE  EQU   IEDQAVTD+560
AVTA3TL  EQU   IEDQAVTD+556
AVTDMECB EQU   IEDQAVTD+552
AVTABEND EQU   IEDQAVTD+546
AVTPLCBN EQU   IEDQAVTD+544
@NM00018 EQU   AVTSAVTP+1
@NM00017 EQU   AVTSAVTF
AVTSNA   EQU   AVTSAVTF
AVTONSNA EQU   AVTSAVTF
AVTVTMCP EQU   AVTSAVTF
@NM00016 EQU   IEDQAVTD+536
AVTCMBSS EQU   IEDQAVTD+532
AVTRCV   EQU   IEDQAVTD+528
AVTSEND  EQU   IEDQAVTD+524
AVTCSCH  EQU   IEDQAVTD+520
AVTQ1    EQU   IEDQAVTD+516
AVTE7    EQU   IEDQAVTD+512
AVTHB    EQU   IEDQAVTD+508
AVTR1    EQU   IEDQAVTD+504
AVTBZ    EQU   IEDQAVTD+500
AVTEZ    EQU   IEDQAVTD+496
AVTEC    EQU   IEDQAVTD+492
AVTEW    EQU   IEDQAVTD+488
AVTNDIAL EQU   AVTSCOPT
AVTN2741 EQU   AVTSCOPT
AVTCONCO EQU   AVTSCOPT
AVTCONC  EQU   AVTSCOPT
AVTCMBUF EQU   AVTSCOPT
AVTAPDMP EQU   AVTSCOPT
@NM00015 EQU   AVTSCOPT
AVTHA    EQU   AVTDISP
AVTEA    EQU   IEDQAVTD+476
AVTAX    EQU   IEDQAVTD+472
AVTA3    EQU   IEDQAVTD+468
AVTGD    EQU   IEDQAVTD+464
AVTAL    EQU   IEDQAVTD+460
AVTOLTST EQU   AVTHG02
AVTE8    EQU   IEDQAVTD+452
AVTUI    EQU   IEDQAVTD+448
AVTCOMPT EQU   IEDQAVTD+444
AVTCRSRF EQU   IEDQAVTD+440
@NM00014 EQU   IEDQAVTD+436
AVTKA02  EQU   IEDQAVTD+432
AVTOPTPT EQU   IEDQAVTD+428
AVTPCBPT EQU   IEDQAVTD+424
@NM00013 EQU   AVTECB1
AVTCOMP  EQU   AVTECB1
@NM00012 EQU   AVTECB1
AVTOPECA EQU   IEDQAVTD+416
AVTOLECA EQU   IEDQAVTD+412
AVTCKECA EQU   IEDQAVTD+408
AVTCWECA EQU   IEDQAVTD+404
AVTCWTCB EQU   IEDQAVTD+400
AVTOLTCB EQU   IEDQAVTD+396
AVTOCTCB EQU   IEDQAVTD+392
AVTCKTCB EQU   IEDQAVTD+388
AVTAS    EQU   IEDQAVTD+384
AVTNOLBF EQU   IEDQAVTD+382
AVTNCKPR EQU   IEDQAVTD+381
AVTCIB   EQU   IEDQAVTD+380
AVTSPLPT EQU   IEDQAVTD+376
AVTMVBFR EQU   IEDQAVTD+372
AVTSBTA  EQU   IEDQAVTD+368
AVTRARTN EQU   IEDQAVTD+364
AVTBSCAN EQU   IEDQAVTD+360
AVTRDYA  EQU   IEDQAVTD+356
AVTDISTR EQU   IEDQAVTD+348
AVTPARM3 EQU   IEDQAVTD+344
@NM00011 EQU   AVTPKF
@NM00010 EQU   AVTPKF
@NM00009 EQU   AVTPKF
AVTFTCHF EQU   AVTPKF
@NM00008 EQU   AVTPKF
@NM00007 EQU   AVTPKF
@NM00006 EQU   AVTPKF
@NM00005 EQU   AVTPKF
AVTPARM  EQU   IEDQAVTD+336
AVTEXS2A EQU   IEDQAVTD+330
AVTEXA2S EQU   IEDQAVTD+324
AVTOCGET EQU   IEDQAVTD+320
AVTCKAVT EQU   @NM00003+1
@NM00004 EQU   AVTCKFLG
AVTCKHLT EQU   AVTCKFLG
AVTCKREQ EQU   AVTCKFLG
AVTCKENV EQU   AVTCKFLG
AVTCKNAC EQU   AVTCKFLG
AVTCKTAC EQU   AVTCKFLG
@NM00002 EQU   IEDQAVTD+312
AVTREADD EQU   IEDQAVTD+308
AVTREADY EQU   IEDQAVTD+304
AVTRACE  EQU   IEDQAVTD+300
AVTTCB   EQU   IEDQAVTD+296
AVTPASWD EQU   IEDQAVTD+288
AVTCTLCH EQU   IEDQAVTD+280
AVTDOUBL EQU   IEDQAVTD+272
AVTDOUBX EQU   IEDQAVTD+264
AVTDPARM EQU   IEDQAVTD+260
AVTCSTCS EQU   IEDQAVTD+256
AVTDLQ   EQU   AVTSAVEX+32
@NM00001 EQU   AVTSAVEX
AVTSAVE4 EQU   IEDQAVTD+144
AVTSAVE3 EQU   IEDQAVTD+72
AVTSAVE2 EQU   IEDQAVTD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00290 EQU   @RC00279
@RC00286 EQU   @RC00279
@RF00305 EQU   @RC00302
@RC00436 EQU   @EL00001
@ENDDATA EQU   *
         END   IGG019TE,(C'PLS2322',0701,77312)
