         TITLE 'IGG0CLBV, WRITES CATALOG SMF RECORDS                   *
                        '
IGG0CLBV CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IGG0CLBV  76.012'                                 0001
         DROP  @15
@PROLOG  DS    0H                                                  0002
         USING @MAINENT,@15
         USING @DATD-(CCATEMPS-IGGCCA),R11
         DS 0F
         DC CL8'IGGPSMFA'
         EJECT
         B     @PB00002                                            0200
IGGPSMFA DS    0H                                                  0201
         ENTRY IGGPSMFA
         DROP @15
Z003     DS    0H                                                  0203
Z003SMFA DS    0H                                                  0204
         STM 12,14,12(13)
         LA 13,12(13)
         BALR 12,0
IGGSEGST DS 0H
         USING *,12
*   IF CVTSMCA=0×SMCADSA=OFF×       /* IF NO SMF OR NO DATA SET      */
*       SMCAUSER=OFF THEN                                          0211
         L     @10,CVTPTR                                          0211
         L     @10,CVTSMCA(,@10)                                   0211
         LTR   @10,@10                                             0211
         BZ    @RT00211                                            0211
         TM    SMCADSA(@10),B'00010000'                            0211
         BZ    @RT00211                                            0211
         TM    SMCAUSER(@10),B'10000000'                           0211
         BZ    @RT00211                                            0211
*     ;                             /* ACCOUNTING OR NO SMF DATA DONT
*                                      PROCESS SMF                   */
*   ELSE                            /* WRITE SMF RECORD 63           */
*     IF CCACD1^=RCS×CCASMFCD^=RCS THEN/* IF IN ERROR MODE           */
         CLI   CCACD1(R11),0                                       0213
         BNE   @RT00213                                            0213
         CLI   CCASMFCD(R11),0                                     0213
         BE    @RF00213                                            0213
@RT00213 DS    0H                                                  0214
*Z004SMFF:                                                         0214
*       CALL IGGPSMFF;              /* FREE CORE                     */
Z004SMFF BAL   @14,IGGPSMFF                                        0214
*     ELSE                          /* NOT IN ERROR MODE             */
*       DO;                         /* SMF WRITE                     */
         B     @RC00213                                            0215
@RF00213 DS    0H                                                  0216
*         CCASMFLN=LENGTH(SMFRCD63);/* LENGTH OF FIXED INFO IN THIS
*                                      RECORD                        */
         MVC   CCASMFLN(2,R11),@CH00369                            0216
*         IF CCASMFDF=ON THEN       /* IF DEFINE CALLER              */
         TM    CCASMFDF(R11),B'10000000'                           0217
         BNO   @RF00217                                            0217
*           DO;                     /* SET UP FOR DEFINE             */
*             CCASMFPT=0;           /* NO SMF CHAIN                  */
         SLR   @10,@10                                             0219
         ST    @10,CCASMFPT(,R11)                                  0219
*             CCASMFCT=0;           /* NO SMF CHAIN COUNT            */
         STH   @10,CCASMFCT(,R11)                                  0220
*           END;                    /* END SET UP                    */
*         ELSE                                                     0222
*           ;                       /* ALTER CALLER                  */
@RF00217 DS    0H                                                  0223
*         IF CCASMFRD^=0&CCASMFDF=ON THEN/* IF THIS IS DEFINE      0223
*                                      CATALOG, SPECIAL PROCESS      */
         L     @10,CCASMFRD(,R11)                                  0223
         LTR   @10,@10                                             0223
         BZ    @RF00223                                            0223
         TM    CCASMFDF(R11),B'10000000'                           0223
         BNO   @RF00223                                            0223
*Z005SMFD:                                                         0224
*           CALL IGGPSMFD;          /* GET CORE AND SET CATALOG ENTRY
*                                      FIELD                         */
Z005SMFD BAL   @14,IGGPSMFD                                        0224
*         ELSE                      /* NOT DEFINE CATALOG            */
*           IF CCASMFBR=ON THEN     /* IF BASE NOT IN CORE           */
         B     @RC00223                                            0225
@RF00223 TM    CCASMFBR(R11),B'00010000'                           0225
         BNO   @RF00225                                            0225
*             DO;                   /* READ BASE RECORD              */
*               CCAURAB=ADDR(CCARAB1);/* SET UP RAB                  */
         LA    @10,CCARAB1(,R11)                                   0227
         ST    @10,CCAURAB(,R11)                                   0227
*               DO;                                                0228
*                 CCAF1KEY=OFF;     /* GET BY CI NO.                 */
*                 CCAF1KGE=OFF;     /* NOT GET NEXT                  */
*                 CCAF1UP=OFF;      /* NOT GET UPD                   */
*                                                                  0231
         NI    CCAF1KEY(R11),B'11100101'                           0231
*                 /***************************************************/
*                 /*                                                 */
*                 /* CALL TO MODULE IGG0CLBI                         */
*                 /*                                                 */
*                 /***************************************************/
*                                                                  0232
*Z007GET:                                                          0232
*                 CALL IGGPGET;     /* GET RECORD                    */
Z007GET  L     @15,@CV00036                                        0232
         BALR  @14,@15                                             0232
*               END;                /* READ RECORD                   */
*               IF CCACD1^=RCS THEN                                0234
         CLI   CCACD1(R11),0                                       0234
         BNE   @RT00234                                            0234
*                 ;                 /* CHECK FOR ERROR               */
*               ELSE                /* NO ERROR                      */
*Z008SMFE:                                                         0236
*                 CALL IGGPSMFE;    /* GET CORE FOR RECORD AND INSERT
*                                      NEW ENTRY                     */
Z008SMFE BAL   @14,IGGPSMFE                                        0236
*             END;                  /* END READ                      */
*           ELSE                    /* BASE IN-CORE                  */
*Z009SMFE:                                                         0238
*             CALL IGGPSMFE;        /* GET CORE AND ENTRY RCD        */
         B     @RC00225                                            0238
@RF00225 DS    0H                                                  0238
Z009SMFE BAL   @14,IGGPSMFE                                        0238
*         IF CCACD1^=RCS THEN       /* CHECK ERROR                   */
@RC00225 DS    0H                                                  0239
@RC00223 CLI   CCACD1(R11),0                                       0239
         BE    @RF00239                                            0239
*Z010SMFF:                                                         0240
*           CALL IGGPSMFF;          /* FREE SMF CHAIN CORE           */
Z010SMFF BAL   @14,IGGPSMFF                                        0240
*         ELSE                      /* NO ERROR                      */
*           DO;                     /* FORMAT ENTRY                  */
         B     @RC00239                                            0241
@RF00239 DS    0H                                                  0242
*             SMF63RTY=SMFALT;      /* DEFINE/ALTER RECORD TYPE      */
         L     @10,CCASMFRD(,R11)                                  0242
         MVI   SMF63RTY(@10),X'3F'                                 0242
*             SMF63IND=CCASMFG1×SMF63IND;/* RECORDING IND    @Y30SSRS*/
         OC    SMF63IND(1,@10),CCASMFG1(R11)                       0243
*             SMF63NSZ=R4;          /* NEW CATALOG ENTRY SIZE        */
         STH   R4,SMF63NSZ(,@10)                                   0244
*             SMF63OSZ=0;           /* OLD CATALOG ENTRY SIZE        */
         SLR   @05,@05                                             0245
         STH   @05,SMF63OSZ(,@10)                                  0245
*             SMF63CNM=CAXCNAM;     /* CATALOG NAME                  */
         L     @05,CCAACB(,R11)                                    0246
         L     @05,ACBUAPTR(,@05)                                  0246
         MVC   SMF63CNM(44,@10),CAXCNAM(@05)                       0246
*             RFY                                                  0247
*               CATRCD BASED(ADDR(SMF63NCE));/* MAP ENTRY            */
*             SMF63DNM=DSNAME;      /* SET DATA SET NAME             */
         MVC   SMF63DNM(44,@10),DSNAME+185(@10)                    0248
*             RFY                                                  0249
*               CATRCD BASED(CCACPE1);/* OLD BASE                    */
*             IF CCASMFAL=ON THEN   /* IF ALTER CALLER               */
         TM    CCASMFAL(R11),B'01000000'                           0250
         BNO   @RF00250                                            0250
*               DO;                 /* SET OLD ALTERED RCDS INTO SMF
*                                      RECORD                        */
*                 RFY                                              0252
*                   RCDAREA BASED(R3);/* MAP CHAIN ELEMENT           */
*                 RFY                                              0253
*                   SMFRCDAR BASED(CCASMFRD+LENGTH(SMFRCD63)/* MAP   */
*                       +SMF63NSZ+SMF63OSZ);/* SMF RECORD            */
*                 R3=CCASMFPT;      /* FIRST ELEMENT                 */
         L     R3,CCASMFPT(,R11)                                   0254
*                 DO WHILE(R3^=0);  /* SEARCH CHAIN FOR OLD          */
*                                                                  0255
         B     @DE00255                                            0255
@DL00255 DS    0H                                                  0256
*                   /*************************************************/
*                   /*                                               */
*                   /* ALTERED RECORDS                               */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0256
*                   IF SMFPRES=ON THEN/* IF RECORD TO BE SAVED       */
         TM    SMFPRES(R3),B'10000000'                             0256
         BNO   @RF00256                                            0256
*                     DO;           /* SAVE IT                       */
*                       SMFRCDAR(1:256)=RCDAREA(1:256);/* SAVE RECORD*/
         L     @10,CCASMFRD(,R11)                                  0258
         LA    @05,136                                             0258
         ALR   @05,@10                                             0258
         AH    @05,SMF63NSZ(,@10)                                  0258
         LH    @15,SMF63OSZ(,@10)                                  0258
         ALR   @05,@15                                             0258
         MVC   SMFRCDAR(256,@05),RCDAREA(R3)                       0258
*                       SMFRCDAR(257:512)=RCDAREA(257:512);/* SAVE 0259
*                                      RECORD                        */
         MVC   SMFRCDAR+256(256,@05),RCDAREA+256(R3)               0259
*                       SMF63OSZ=SMF63OSZ+(R3->RCDSIZ);/* INCR OLD 0260
*                                      SIZE                          */
         ICM   @05,12,RCDSIZ(R3)                                   0260
         SRA   @05,16                                              0260
         ALR   @15,@05                                             0260
         STH   @15,SMF63OSZ(,@10)                                  0260
*                     END;          /* END SAVE IT                   */
*                   ELSE                                           0262
*                     ;             /* NOT RECORD TO BE SAVED        */
@RF00256 DS    0H                                                  0263
*                   R3=SMFCHAIN;    /* NEXT ELEMENT                  */
         ICM   R3,15,SMFCHAIN(R3)                                  0263
*                 END;              /* END SEARCH                    */
@DE00255 LTR   R3,R3                                               0264
         BNZ   @DL00255                                            0264
*               END;                /* END SET                       */
*             ELSE                                                 0266
*               ;                   /* DEFINE CALLER                 */
@RF00250 DS    0H                                                  0267
*             SMF63LEN=LENGTH(SMFRCD63)+/* SET TOTAL SMF RECORD      */
*                 SMF63OSZ+SMF63NSZ;/* LENGTH                        */
         L     @10,CCASMFRD(,R11)                                  0267
         LA    @05,136                                             0267
         AH    @05,SMF63OSZ(,@10)                                  0267
         AH    @05,SMF63NSZ(,@10)                                  0267
         STH   @05,SMF63LEN(,@10)                                  0267
*Z011SMFC:                                                         0268
*             CALL IGGPSMFC;        /* CREATE COMMON SMF RECORD AND
*                                      WRITE IT                      */
Z011SMFC BAL   @14,IGGPSMFC                                        0268
*Z012SMFF:                                                         0269
*             CALL IGGPSMFF;        /* FREE CORE                     */
Z012SMFF BAL   @14,IGGPSMFF                                        0269
*           END;                    /* END FORMAT ENTRY              */
*         IF CCACD1^=RCS THEN       /* IF ERROR              @Y30SSRS*/
@RC00239 CLI   CCACD1(R11),0                                       0271
         BE    @RF00271                                            0271
*           CCASMFP=IGGSEGID+CCACD1*K256+RCSMFER;/* SET ERR  @Y30SSRS*/
         SLR   @10,@10                                             0272
         IC    @10,CCACD1(,R11)                                    0272
         SLA   @10,8                                               0272
         AL    @10,@CF04584                                        0272
         ST    @10,CCASMFP(,R11)                                   0272
*         ELSE                      /* NO ERROR              @Y30SSRS*/
*           CCASMFP=0;              /* ZERO ERR FIELD        @Y30SSRS*/
*                                                                  0273
         B     @RC00271                                            0273
@RF00271 SLR   @10,@10                                             0273
         ST    @10,CCASMFP(,R11)                                   0273
*         /***********************************************************/
*         /*                                                         */
*         /* CLEAR CCAMODID, CCAREASN, AND CCARETRN                  */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0274
*         CCAPROB=IGNOREIT;         /* ZERO RETURN CODE      @Y30SSRS*/
@RC00271 SLR   @10,@10                                             0274
         ST    @10,CCAPROB(,R11)                                   0274
*       END;                        /* END SMF WRITE                 */
*   CALL EXIT;                      /* RETURN TO CALLER              */
@RC00213 DS    0H                                                  0276
@RT00211 BAL   @14,EXIT                                            0276
*   GEN(DS 0F);                     /* FULLWORD BOUNDARY ALIGNMENT   */
         DS 0F
*   GEN(DC CL8'IGGPSMFD');          /* NAME OF FOLLOWING PROCEDURE   */
         DC CL8'IGGPSMFD'
*   END;                            /* END OF INNER PROCEDURE        */
@EL00002 DS    0H                                                  0279
@EF00002 DS    0H                                                  0279
@ER00002 BR    @14                                                 0279
@PB00002 DS    0H                                                  0280
*   GEN(EJECT);                     /* GO TO A NEW PRINT PAGE        */
         EJECT
*                                                                  0281
*/********************************************************************/
*/*                                                                  */
*/*        IGGPSMFD  -  PROCEDURE  INTERNALLY  CALLED  NESTED        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0281
*IGGPSMFD:                                                         0281
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);/* SPECIFY PROCEDURE OPTIONS     */
         B     @PB00003                                            0281
IGGPSMFD DS    0H                                                  0282
*Z014:                              /* LABEL FOR PROCEDURE TRACKING  */
*Z014SMFD:                          /* LABEL FOR PROCEDURE TRACKING  */
*   RFY                                                            0282
*    (R5,                                                          0282
*     R6,                                                          0282
*     R7,                                                          0282
*     R8,                                                          0282
*     R9,                                                          0282
*     R10) UNRSTD;                  /* PL/S COMPILER WORK REGISTERS  */
Z014     DS    0H                                                  0282
Z014SMFD DS    0H                                                  0283
*   RFY                                                            0283
*    (R2,                                                          0283
*     R3,                                                          0283
*     R4) RSTD;                     /* RESTRICT LOCAL WORK REGISTERS */
*   GEN(STM 12,14,12(13));          /* SAVE REGISTERS OF CALLER      */
         STM 12,14,12(13)
*   GEN(LA 13,12(13));              /* POINT TO NEXT SAVE AREA     0285
*                                      PROCEDURE                     */
         LA 13,12(13)
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**   MODULE NAME =  IGGPSMFD (IGG0CLBV)                               *
**                                                                    *
**   DESCRIPTIVE NAME =                                               *
**      OBTAIN AND PARTIALLY FORMAT SMF RECORD 63 FOR DEFINE CATALOG  *
**                                                                    *
**   FUNCTION =                                                       *
**      THIS SUB-FUNCTION IS CALLED BY IGGPSMFA.  IT OBTAINS THE CORE *
**      REQUIRED FOR SMF RECORD 63 IN THE CASE OF A DEFINE CATALOG    *
**      AND INITIALIZES THE NEW CATALOG ENTRY FIELD AND DATA SET TYPE *
**      FIELD IN THIS RECORD.  THE PROCESSING IS AS FOLLOWS:          *
**      1. MAP THE BASE CATALOG ENTRY RECORD POINTED TO BY CCASMFIX   *
**         AND SCAN THE GROUP OCCURRENCE POINTERS FOR EXTENSION       *
**         RECORDS. RETRIEVE THE EXTENSION RECORDS OF THE ENTRY BY    *
**         USING THE GROUP OCCURRENCE CI VALUE + 1 TO INDEX INTO THE  *
**         CATALOG RECORD LIST. CALL IGGPSMFZ TO ZERO SECURITY INFO.  *
**      2. SET THE DATA SET TYPE FIELD BY THE BASE ENTRY RECORD TYPE. *
**                                                                    *
**   INPUT =                                                          *
**      IGGCCA INPUT:                                                 *
**         CCASMFRD - ADDRESS OF CATALOG RECORD LIST, CONTAINING A    *
**                    POINTER TO EACH OF THE FIRST 10 CATALOG RECORDS *
**                    (BEFORE CLOSE FOR CREATE).                      *
**         CCASMFIX - INDEX INTO CATALOG RECORD LIST FOR BASE ENTRY   *
**                    RECORD (IE. DATA, INDEX, OR CLUSTER).           *
**                                                                    *
**   OUTPUT =                                                         *
**      IGGCCA OUTPUT:                                                *
**         CCASMFRD - ADDRESS OF SMF RECORD 63 FOR DEFINE CATALOG.    *
**         CCASMFLN - LENGTH OF CORE GOTTEN FOR SMF RECORD.           *
**         CCACD1 - RCS, NO ERROR.  RCINSSWA, MAINSTORAGE CORE        *
**                  UNAVAILABLE.                                      *
**      SMF RECORD FIELDS:                                            *
**         SMF63NCE - NEW CATALOG ENTRY FIELD INITIALIZED.            *
**         SMF63DTY - DATA SET TYPE FIELD INITIALIZED.                *
**      R4 - SIZE  OF RECORDS IN ENTIRE CATALOG ENTRY.                *
**                                                                    *
**                                                                    *
** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*                                                                  0286
*   CCAMNLEN=MXCTLN+LENGTH(SMFRCD63);/* CORE LENGTH REQUIRED         */
         MVC   CCAMNLEN(3,R11),@CF04585+1                          0286
*   RFY                                                            0287
*     R1 RSTD;                      /* USED IN GETMAIN               */
*   R1=ADDR(CCAMSSPL);              /* POINT TO STRG MGMT P.L.       */
         LA    R1,CCAMSSPL(,R11)                                   0288
*   CCAMNSPL=USUBPOOL;              /* STORE SUBPOOL VALUE           */
*                                                                  0289
         MVI   CCAMNSPL(R11),X'FC'                                 0289
*   /*****************************************************************/
*   /*                                                               */
*   /* ALLOCATE MAIN STORAGE FROM USER SUBPOOL 252                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0290
*   GEN(GETMAIN LC,MF=(E,(1)));     /* GET MAIN STORAGE SPACE        */
         GETMAIN LC,MF=(E,(1))
*   GEN(LR R1,R15);                 /* PICK UP RETURN CODE           */
         LR R1,R15
*   IF R1^=NOGETMSE THEN            /* CHECK FOR ERROR RETURN        */
*                                                                  0292
         LTR   R1,R1                                               0292
         BZ    @RF00292                                            0292
*     /***************************************************************/
*     /*                                                             */
*     /* SET CCAMODID='BV', CCAREASN=RSN2, CCARETRN=RCINSSWA         */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0293
*     CCAPROB=IGGSEGID+(RSN2*K256)+RCINSSWA;/* INSUFFICIENT CORE   0293
*                                      ERROR                         */
         MVC   CCAPROB(4,R11),@CF04587                             0293
*   ELSE                            /* GETMAIN SUCCESSFUL            */
*     DO;                                                          0294
         B     @RC00292                                            0294
@RF00292 DS    0H                                                  0295
*       DO;                                                        0295
*         IF MNATFULL=ON THEN       /* TRACKING TABLE FULL           */
*                                                                  0296
         TM    MNATFULL(R11),B'10000000'                           0296
         BNO   @RF00296                                            0296
*           /*********************************************************/
*           /*                                                       */
*           /* CALL TO MODULE IGG0CLAT                               */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0297
*Z018ARFS:                                                         0297
*           CALL IGGPARFS;          /* YES,CALL SPILL ROUTINE        */
Z018ARFS L     @15,@CV00037                                        0297
         BALR  @14,@15                                             0297
*         GEN REFS(CCAMNAT)(MVC CCAMNAT(248,11),CCAMNAT+8(11));/*  0298
*                                      PUSH AND TRACK                */
@RF00296 DS    0H                                                  0298
         MVC CCAMNAT(248,11),CCAMNAT+8(11)
*       END;                                                       0299
*     END;                          /* GET MAIN STORAGE              */
*   RFY                                                            0301
*     R1 UNRSTD;                    /* FREE REG                      */
@RC00292 DS    0H                                                  0302
*   IF CCACD1^=RCS THEN                                            0302
         CLI   CCACD1(R11),0                                       0302
         BNE   @RT00302                                            0302
*     ;                             /* SEE IF ERROR                  */
*   ELSE                            /* CORE GOTTEN                   */
*     DO;                           /* FORMAT RECORD                 */
*       RFY                                                        0305
*         SMFRCD63 BASED(CCAMNADR); /* MAP SMF RECORD                */
*       CCASMFLN=CCAMNLEN;          /* SAVE FOR FREE CORE            */
         L     @10,CCAMNLEN-1(,R11)                                0306
         LA    @10,0(,@10)                                         0306
         STH   @10,CCASMFLN(,R11)                                  0306
*       RFY                                                        0307
*         CATRCD BASED(DCATRCD(CCASMFIX));/* MAP BASE ENTRY          */
*       R2=ADDR(CATRCD)+NREPLF;     /* POINT TO REPEATING CNTRL    0308
*                                      INFORMATION                   */
         LH    @10,CCASMFIX(,R11)                                  0308
         SLA   @10,2                                               0308
         L     @05,CCASMFRD(,R11)                                  0308
         AL    @05,@CF04594                                        0308
         L     @10,DCATRCD(@10,@05)                                0308
         SLR   R2,R2                                               0308
         IC    R2,NREPLF(,@10)                                     0308
         ALR   R2,@10                                              0308
*       R4=RCDSIZ;                  /* SET BASE ENTRY RECODE SZ      */
         ICM   R4,12,RCDSIZ(@10)                                   0309
         SRA   R4,16                                               0309
*       RFY                                                        0310
*         REPCNTRL BASED(R2);       /* MAP REPEATING CNTRL INFO      */
*       CCACPE5=ADDR(REPGOPT);      /* POINT TO FIRST OCCURR PTR     */
         LA    @10,REPGOPT(,R2)                                    0311
         ST    @10,CCACPE5(,R11)                                   0311
*       DO R3=1 TO REPCNT;          /* SCAN OCCURR PTRS              */
         LA    R3,1                                                0312
         B     @DE00312                                            0312
@DL00312 DS    0H                                                  0313
*         IF CATGOEXT=ON&CATGODEL=OFF THEN/* IF EXTENSION PTR        */
         L     @10,CCACPE5(,R11)                                   0313
         TM    CATGOEXT(@10),B'10000000'                           0313
         BNO   @RF00313                                            0313
         TM    CATGODEL(@10),B'01000000'                           0313
         BNZ   @RF00313                                            0313
*           DO;                     /* RETRIEVE RECORD               */
*             SMFRCD1(1:256)=CATRCD1(1:256);/* INITLZ ENTRY FIELD    */
         LA    @05,136                                             0315
         AL    @05,CCAMNADR(,R11)                                  0315
         ALR   @05,R4                                              0315
         SLR   @15,@15                                             0315
         ICM   @15,7,CATGOCI(@10)                                  0315
         SLA   @15,2                                               0315
         L     @10,CCASMFRD(,R11)                                  0315
         L     @10,DCATRCD(@15,@10)                                0315
         MVC   SMFRCD1(256,@05),CATRCD1(@10)                       0315
*             SMFRCD1(257:512)=CATRCD1(257:512);/* INITLZ ENTRY FIELD*/
         MVC   SMFRCD1+256(256,@05),CATRCD1+256(@10)               0316
*             RFY                                                  0317
*               R1 RSTD;            /* INPUT REG FOR SMFZ            */
*             R1=ADDR(SMFRCD1);     /* POINT TO RCD WITH POSSIBLE  0318
*                                      PSWD INFO                     */
         LR    R1,@05                                              0318
*Z019SMFZ:                                                         0319
*             CALL IGGPSMFZ;        /* ZERO ANY SECURITY INFO        */
Z019SMFZ BAL   @14,IGGPSMFZ                                        0319
*             RFY                                                  0320
*               R1 UNRSTD;          /* FREE REG                      */
*             R4=R4+(ADDR(CATRCD1)->RCDSIZ);/* INCR ENTRY SIZE       */
         L     @10,CCACPE5(,R11)                                   0321
         SLR   @05,@05                                             0321
         ICM   @05,7,CATGOCI(@10)                                  0321
         SLA   @05,2                                               0321
         L     @10,CCASMFRD(,R11)                                  0321
         L     @10,DCATRCD(@05,@10)                                0321
         ICM   @10,12,RCDSIZ(@10)                                  0321
         SRA   @10,16                                              0321
         ALR   R4,@10                                              0321
*           END;                    /* END RETRIEVE                  */
*         ELSE                                                     0323
*           ;                       /* NOT EXTENSION                 */
@RF00313 DS    0H                                                  0324
*         CCACPE5=CCACPE5+LENGTH(CATGOPT);/* NEXT GOP                */
         LA    @10,5                                               0324
         AL    @10,CCACPE5(,R11)                                   0324
         ST    @10,CCACPE5(,R11)                                   0324
*       END;                        /* END PROCESS                   */
         AL    R3,@CF00040                                         0325
@DE00312 SLR   @10,@10                                             0325
         IC    @10,REPCNT(,R2)                                     0325
         CR    R3,@10                                              0325
         BNH   @DL00312                                            0325
*       RFY                                                        0326
*         SMFRCD1 BASED(CCAMNADR+LENGTH(SMFRCD63));/* MAP FIRST    0326
*                                      RECORD OF ENTRY FIELD         */
*       RFY                                                        0327
*         CATRCD1 BASED(ADDR(CATRCD));/* MAP BASE RECORD             */
*       IF RCDSIZ>MXM THEN          /* ID BASE RCD REQUIRES TWO MOVES*/
         LH    @10,CCASMFIX(,R11)                                  0328
         SLA   @10,2                                               0328
         L     @05,CCASMFRD(,R11)                                  0328
         AL    @05,@CF04594                                        0328
         L     @10,DCATRCD(@10,@05)                                0328
         ICM   @05,12,RCDSIZ(@10)                                  0328
         SRA   @05,16                                              0328
         C     @05,@CF00078                                        0328
         BNH   @RF00328                                            0328
*         DO;                       /* MOVE TWICE                    */
*           SMFRCD1(1:MXM)=CATRCD1(1:MXM);/* INITLZ ENTRY FIELD      */
         LA    @15,136                                             0330
         AL    @15,CCAMNADR(,R11)                                  0330
         MVC   SMFRCD1(256,@15),CATRCD1(@10)                       0330
*           SMFRCD1(MXM+1:RCDSIZ)=CATRCD1(MXM+1:RCDSIZ);/* INITLZ  0331
*                                      ENTRY FIELD                   */
         SL    @05,@CF04362                                        0331
         EX    @05,@SM04595                                        0331
*         END;                      /* END MOVE TWICE                */
*       ELSE                        /* MOVE ONCE                     */
*         SMFRCD1(1:RCDSIZ)=CATRCD1(1:RCDSIZ);/* INITLZ ENTRY FIELD  */
         B     @RC00328                                            0333
@RF00328 L     @10,CCAMNADR(,R11)                                  0333
         LH    @05,CCASMFIX(,R11)                                  0333
         SLA   @05,2                                               0333
         L     @01,CCASMFRD(,R11)                                  0333
         AL    @01,@CF04594                                        0333
         L     @05,DCATRCD(@05,@01)                                0333
         ICM   @15,12,RCDSIZ(@05)                                  0333
         SRA   @15,16                                              0333
         BCTR  @15,0                                               0333
         EX    @15,@SM04597                                        0333
*       RFY                                                        0334
*         R1 RSTD;                  /* INPUT REG FOR SMFZ            */
@RC00328 DS    0H                                                  0335
*       R1=ADDR(SMFRCD1);           /* POINT TO RCD WITH POSSIBLE  0335
*                                      PSWD INFO                     */
         LA    R1,136                                              0335
         AL    R1,CCAMNADR(,R11)                                   0335
*Z020SMFZ:                                                         0336
*       CALL IGGPSMFZ;              /* ZERO ANY SECURITY INFO        */
Z020SMFZ BAL   @14,IGGPSMFZ                                        0336
*       RFY                                                        0337
*         R1 UNRSTD;                /* FREE REG                      */
*       SMF63DTY=0;                 /* ZERO DATA SET TYPE FLAG       */
         L     @10,CCAMNADR(,R11)                                  0338
         MVI   SMF63DTY(@10),X'00'                                 0338
*       SMF63IND=0;                 /* ZERO DATA SET         @Y30SSRS
*                                      TYPE FIELD            @Y30SSRS*/
         MVI   SMF63IND(@10),X'00'                                 0339
*       IF CCASMFIX=CATIXD THEN     /* IF DATA                       */
         CLC   CCASMFIX(2,R11),@CH00040                            0340
         BNE   @RF00340                                            0340
*         SMF63DS=ON;               /* INDICATE DATA                 */
         OI    SMF63DS(@10),B'01000000'                            0341
*       ELSE                        /* NOT DATA                      */
*         IF CCASMFIX=CATIXI THEN   /* IF INDEX                      */
         B     @RC00340                                            0342
@RF00340 CLC   CCASMFIX(2,R11),@CH00059                            0342
         BNE   @RF00342                                            0342
*           SMF63IDS=ON;            /* INDICATE INDEX                */
         L     @10,CCAMNADR(,R11)                                  0343
         OI    SMF63IDS(@10),B'00100000'                           0343
*         ELSE                      /* NOT INDEX                     */
*           SMF63CL=ON;             /* INDICATE CLUSTER              */
         B     @RC00342                                            0344
@RF00342 L     @10,CCAMNADR(,R11)                                  0344
         OI    SMF63CL(@10),B'10000000'                            0344
*       SMF63CAT=ON;                /* INDICATE CATALOG              */
@RC00342 DS    0H                                                  0345
@RC00340 L     @10,CCAMNADR(,R11)                                  0345
         OI    SMF63CAT(@10),B'00010000'                           0345
*       CCASMFRD=CCAMNADR;          /* POINT TO SMF RECORD           */
         ST    @10,CCASMFRD(,R11)                                  0346
*     END;                          /* END FORMAT                    */
*   RFY                                                            0348
*     CATRCD BASED(CCACPE1);        /* ORIGINAL BASE                 */
@RT00302 DS    0H                                                  0349
*   RFY                                                            0349
*     REPCNTRL BASED(CCACPE2);      /* ORIGINAL BASE                 */
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0350
*   GEN(DS 0F);                     /* FULLWORD BOUNDARY ALIGNMENT   */
         DS 0F
*   GEN(DC CL8'IGGPSMFE');          /* NAME OF FOLLOWING PROCEDURE   */
         DC CL8'IGGPSMFE'
*   END;                            /* END OF INNER PROCEDURE        */
@EL00003 DS    0H                                                  0353
@EF00003 DS    0H                                                  0353
@ER00003 BR    @14                                                 0353
@PB00003 DS    0H                                                  0354
*   GEN(EJECT);                     /* GO TO A NEW PRINT PAGE        */
         EJECT
*                                                                  0355
*/********************************************************************/
*/*                                                                  */
*/*        IGGPSMFE  -  PROCEDURE  INTERNALLY  CALLED  NESTED        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0355
*IGGPSMFE:                                                         0355
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);/* SPECIFY PROCEDURE OPTIONS     */
         B     @PB00004                                            0355
IGGPSMFE DS    0H                                                  0356
*Z021:                              /* LABEL FOR PROCEDURE TRACKING  */
*Z021SMFE:                          /* LABEL FOR PROCEDURE TRACKING  */
*   RFY                                                            0356
*    (R5,                                                          0356
*     R6,                                                          0356
*     R7,                                                          0356
*     R8,                                                          0356
*     R9,                                                          0356
*     R10) UNRSTD;                  /* PL/S COMPILER WORK REGISTERS  */
Z021     DS    0H                                                  0356
Z021SMFE DS    0H                                                  0357
*   RFY                                                            0357
*    (R2,                                                          0357
*     R3,                                                          0357
*     R4) RSTD;                     /* RESTRICT LOCAL WORK REGISTERS */
*   GEN(STM 12,14,12(13));          /* SAVE REGISTERS OF CALLER      */
         STM 12,14,12(13)
*   GEN(LA 13,12(13));              /* POINT TO NEXT SAVE AREA     0359
*                                      PROCEDURE                     */
         LA 13,12(13)
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**   MODULE NAME =  IGGPSMFE (IGG0CLBV)                               *
**                                                                    *
**   DESCRIPTIVE NAME =                                               *
**      OBTAIN AND PARTIALLY FORMAT SMF RECORD 63 AND 67              *
**                                                                    *
**   FUNCTION =                                                       *
**      THIS SUB-FUNCTION IS CALLED BY IGGPSMFS AND IGGPSMFA.  IT     *
**      OBTAINS THE CORE REQUIRED FOR SMF RECORDS 63 AND 67 (USING    *
**      CORE APPOXIMATIONS) AND FILLS IN THE (NEW OR OLD) CATALOG     *
**      ENTRY FIELD AND THE DATA SET TYPE FIELD IN THESE TWO RECORDS. *
**      THE PROCESSING IS AS FOLLOWS:                                 *
**      1. APPROXIMATE SMF RECORD SIZE BY SCANNING BASE RECORD FOR    *
**         EXTENSION RECORDS.                                         *
**      2. OBTAIN THE APPROXIMATE AMOUNT OF CORE REQUIRED AND CALL    *
**         IGGPSMFM TO INITIALIZE THE NEW CATALOG ENTRY FIELD AND THE *
**         DATA SET TYPE FIELD.                                       *
**      3. IF THE FIRST APPROXIMATION OF THE SIZE  OF RECORDS IN THE  *
**         ENTIRE ENTRY (USED TO GET SMF RECORD CORE) IS BELOW THE    *
**         ACTUAL SIZE, FREE THE OLD SMF RECORD CORE. OBTAIN THE      *
**         CORRECT AMOUNT AND CALL IGGPSMFM AGAIN.                    *
**                                                                    *
**   INPUT =                                                          *
**      IGGCCA INPUT:                                                 *
**         CCASMFCT - COUNT OF PRESERVED RECORDS WHICH WERE ALTERED.  *
**                    MUST BE INCLUDED IN CORE APPROXIMATION.         *
**         CCA RECORD AREA 1 HAS CATALOG ENTRY BASE RECORD.           *
**         CCASMFLN - DISPALCEMENT TO NEW CATALOG ENTRY FIELD IN SMF  *
**                    RECORD 63 OR 67.                                *
**                                                                    *
**   OUTPUT =                                                         *
**      IGGCCA OUTPUT:                                                *
**         CCASMFRD - ADDRESS OF CORE FOR SMF RECORD 63 OR 67.        *
**         CCASMFLN - LENGTH OF CORE GOTTEN FOR SMF RECORD.           *
**         CCACD1 - RCS, NO ERROR                                     *
**                - ANY ERROR CODE RETURNED BY GET CI.                *
**                - RCINSSWA, MAIN STORAGE CORE UNAVAILABLE.          *
**         CCA RECORD AREAS 1,2,AND 3 VOLATILE.                       *
**      SMF RECORD FIELDS:                                            *
**         SMF NEW CATALOG ENTRY FIELD INITIALIZED.                   *
**         SMF63DTY - DATA SET TYPE FIELD INITIALIZED.                *
**      R4 - SIZE  OF RECORDS IN ENTIRE CATALOG ENTRY.                *
**                                                                    *
**                                                                    *
** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*                                                                  0360
*   /*****************************************************************/
*   /*                                                               */
*   /* APPROXIMATE AMOUNT OF CORE REQUIRED FOR SMF RECORD            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0360
*   RFY                                                            0360
*     CCARAB BASED(ADDR(CCARAB1));  /* MAP BASE RECORD AREA          */
*   R4=-1;                          /* COUNT OF EXTENSION RCDS     0361
*                                      DISCOUNT SPACE POINTER        */
         SLR   R4,R4                                               0361
         BCTR  R4,0                                                0361
*   R2=ADDR(REPGOPT);               /* POINT TO FIRST GOP            */
         L     R2,CCACPE2+108(,R11)                                0362
         LA    R2,REPGOPT(,R2)                                     0362
*   DO WHILE(R2<CCACPE3);           /* SCAN OCCURRENCE POINTERS      */
         B     @DE00363                                            0363
@DL00363 DS    0H                                                  0364
*     RFY                                                          0364
*       CATGOPT BASED(R2);          /* REGISTER BASE                 */
*     IF CATGOEXT=ON THEN           /* IF EXTENSION POINTER          */
         TM    CATGOEXT(R2),B'10000000'                            0365
         BNO   @RF00365                                            0365
*       R4=R4+1;                    /* INCR COUNT OF SUCH PTRS       */
         AL    R4,@CF00040                                         0366
*     ELSE                                                         0367
*       ;                           /* NOT EXTENSION POINTER         */
@RF00365 DS    0H                                                  0368
*     R2=R2+LENGTH(CATGOPT);        /* NEXT GROUP OCCURR PTR         */
         AL    R2,@CF00256                                         0368
*     RFY                                                          0369
*       CATGOPT BASED(CCACPE5);     /* OLD BASE                      */
*   END;                            /* END SCAN                      */
@DE00363 C     R2,CCACPE3+108(,R11)                                0370
         BL    @DL00363                                            0370
*   IF R4^=0 THEN                   /* IF EXTENSION POINTERS         */
         LTR   R4,R4                                               0371
         BZ    @RF00371                                            0371
*     R4=R4/COREFC3+COREFC1;        /* ADD HEDGE FACTOR      @Y30SSRS*/
         LR    @10,R4                                              0372
         SRL   @10,2                                               0372
         AL    @10,@CF00040                                        0372
         LR    R4,@10                                              0372
*   ELSE                                                           0373
*     ;                             /* NO EXTENSION POINTERS         */
@RF00371 DS    0H                                                  0374
*   R4=R4+1;                        /* ACCOUNT FOR BASE RECORD       */
         AL    R4,@CF00040                                         0374
*   IF EXTGOCI^=0 THEN              /* IF EXTENSION OF BASE          */
         L     @10,CCACPE2+108(,R11)                               0375
         ICM   @05,7,EXTGOCI(@10)                                  0375
         BZ    @RF00375                                            0375
*     R4=R4+COREFC2;                /* ADD APPROXIMATION FACTOR      */
         AL    R4,@CF00059                                         0376
*   ELSE                                                           0377
*     ;                             /* NO EXTENSION OF BASE          */
@RF00375 DS    0H                                                  0378
*   R3=R4+CCASMFCT;                 /* ACCOUNT FOR ANY ALTERED     0378
*                                      RECORDS                       */
         LR    R3,R4                                               0378
         AH    R3,CCASMFCT(,R11)                                   0378
*   CCAMNLEN=R3*CATRCDLN+CCASMFLN;  /* GET TOTAL SMF RECORD CORE   0379
*                                      REQUIRED                      */
         LR    @10,R3                                              0379
         SLA   @10,9                                               0379
         AH    @10,CCASMFLN(,R11)                                  0379
         STCM  @10,7,CCAMNLEN(R11)                                 0379
*   CCASMFRD=0;                     /* INDICATE NO CORE TO BE FREED  */
         SLR   @10,@10                                             0380
         ST    @10,CCASMFRD(,R11)                                  0380
*   RFY                                                            0381
*     R1 RSTD;                      /* USED IN GETMAIN               */
*   R1=ADDR(CCAMSSPL);              /* POINT TO STRG MGMT P.L.       */
         LA    R1,CCAMSSPL(,R11)                                   0382
*   CCAMNSPL=USUBPOOL;              /* STORE SUBPOOL VALUE           */
*                                                                  0383
         MVI   CCAMNSPL(R11),X'FC'                                 0383
*   /*****************************************************************/
*   /*                                                               */
*   /* ALLOCATE MAIN STORAGE FROM USER SUBPOOL 252                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0384
*   GEN(GETMAIN LC,MF=(E,(1)));     /* GET MAIN STORAGE SPACE        */
         GETMAIN LC,MF=(E,(1))
*   GEN(LR R1,R15);                 /* PICK UP RETURN CODE           */
         LR R1,R15
*   IF R1^=NOGETMSE THEN            /* CHECK FOR ERROR RETURN        */
*                                                                  0386
         LTR   R1,R1                                               0386
         BZ    @RF00386                                            0386
*     /***************************************************************/
*     /*                                                             */
*     /* SET CCAMODID='BV', CCAREASN=RSN2, CCARETRN=RCINSSWA         */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0387
*     CCAPROB=IGGSEGID+(RSN2*K256)+RCINSSWA;/* INSUFFICIENT CORE   0387
*                                      ERROR                         */
         MVC   CCAPROB(4,R11),@CF04587                             0387
*   ELSE                            /* GETMAIN SUCCESSFUL            */
*     DO;                                                          0388
         B     @RC00386                                            0388
@RF00386 DS    0H                                                  0389
*       DO;                                                        0389
*         IF MNATFULL=ON THEN       /* TRACKING TABLE FULL           */
*                                                                  0390
         TM    MNATFULL(R11),B'10000000'                           0390
         BNO   @RF00390                                            0390
*           /*********************************************************/
*           /*                                                       */
*           /* CALL TO MODULE IGG0CLAT                               */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0391
*Z025ARFS:                                                         0391
*           CALL IGGPARFS;          /* YES,CALL SPILL ROUTINE        */
Z025ARFS L     @15,@CV00037                                        0391
         BALR  @14,@15                                             0391
*         GEN REFS(CCAMNAT)(MVC CCAMNAT(248,11),CCAMNAT+8(11));/*  0392
*                                      PUSH AND TRACK                */
@RF00390 DS    0H                                                  0392
         MVC CCAMNAT(248,11),CCAMNAT+8(11)
*       END;                                                       0393
*     END;                          /* GET MAIN CORE STORAGE         */
*   RFY                                                            0395
*     R1 UNRSTD;                    /* FREE REG                      */
@RC00386 DS    0H                                                  0396
*   IF CCACD1^=RCS THEN                                            0396
         CLI   CCACD1(R11),0                                       0396
         BNE   @RT00396                                            0396
*     ;                             /* CHECK ERROR                   */
*   ELSE                            /* NO ERROR                      */
*     DO;                           /* FORMAT RECORD                 */
*       CCASMFRD=CCAMNADR;          /* SAVE SMF RECORD ADDR          */
         L     @10,CCAMNADR(,R11)                                  0399
         ST    @10,CCASMFRD(,R11)                                  0399
*       RFY                                                        0400
*         SMFRCD63 BASED(CCASMFRD); /* MAP SMF RECORD                */
*       SMF63NSZ=R4*CATRCDLN;       /* SAVE RECORD APPROXIMATION FOR
*                                      ENTIRE ENTRY                  */
         LR    @05,R4                                              0401
         SLA   @05,9                                               0401
         STH   @05,SMF63NSZ(,@10)                                  0401
*       SMF63LEN=CCAMNLEN;          /* SAVE LENGTH OF GOTTEN CORE    */
*                                                                  0402
         L     @05,CCAMNLEN-1(,R11)                                0402
         LA    @05,0(,@05)                                         0402
         STH   @05,SMF63LEN(,@10)                                  0402
*       /*************************************************************/
*       /*                                                           */
*       /* MOVE AS MUCH OF THE ENTIRE CATALOG ENTRY AS WILL FIT INTO */
*       /* THE SMF RECORD CORE GOTTEN. IN ADDITON,KEEP THE SIZE OF   */
*       /* THE COMPLETE ENTRY IN SMF63SEG. IF INSUFFICIENT CORE, A   */
*       /* CORRECT AMOUNT OF CORE MUST BE GOTTEN AND THEN            */
*       /* RE-INITIALIZED.                                           */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0403
*Z026SMFM:                                                         0403
*       CALL IGGPSMFM;              /* MOVE ENTRY TO RECORD          */
Z026SMFM BAL   @14,IGGPSMFM                                        0403
*       IF SMF63SEG>SMF63NSZ&CCACD1=RCS THEN/* IF INSUFF CORE        */
         L     @10,CCASMFRD(,R11)                                  0404
         LH    @05,SMF63SEG(,@10)                                  0404
         CH    @05,SMF63NSZ(,@10)                                  0404
         BNH   @RF00404                                            0404
         CLI   CCACD1(R11),0                                       0404
         BNE   @RF00404                                            0404
*         DO;                       /* GET CORRECT AMOUNT OF CORE    */
*           CCAMNLEN=SMF63LEN;      /* FREE CORE LENGTH              */
         LH    @15,SMF63LEN(,@10)                                  0406
         STCM  @15,7,CCAMNLEN(R11)                                 0406
*           CCAMNADR=CCASMFRD;      /* FREE CORE ADDRESS             */
         ST    @10,CCAMNADR(,R11)                                  0407
*           R4=SMF63SEG;            /* SAVE ENTIRE ENTRY SIZE        */
         LR    R4,@05                                              0408
*           RFY                                                    0409
*             R1 RSTD;              /* USED IN FREEMAIN              */
*           R1=ADDR(CCAMSSPL);      /* POINT TO STRG MGMT P.L.       */
         LA    R1,CCAMSSPL(,R11)                                   0410
*           CCAMNSPL=USUBPOOL;      /* STORE SUBPOOL VALUE           */
         MVI   CCAMNSPL(R11),X'FC'                                 0411
*           DO;                                                    0412
*             IF MNATFULL=ON THEN   /* TRACKING TABLE FULL           */
*                                                                  0413
         TM    MNATFULL(R11),B'10000000'                           0413
         BNO   @RF00413                                            0413
*               /*****************************************************/
*               /*                                                   */
*               /* CALL TO MODULE IGG0CLAT                           */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0414
*Z029ARFS:                                                         0414
*               CALL IGGPARFS;      /* YES,CALL SPILL ROUTINE        */
Z029ARFS L     @15,@CV00037                                        0414
         BALR  @14,@15                                             0414
*             GEN REFS(CCAMNAT)(MVC CCAMNAT(248,11),CCAMNAT+8(11));/*
*                                      PUSH AND TRACK                */
@RF00413 DS    0H                                                  0415
         MVC CCAMNAT(248,11),CCAMNAT+8(11)
*           END;                                                   0416
*                                                                  0416
*           /*********************************************************/
*           /*                                                       */
*           /* RELEASE MAIN STORAGE FROM USER SUBPOOL 252            */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0417
*           GEN(FREEMAIN L,MF=(E,(1))) ;/* FREE CORE                 */
         FREEMAIN L,MF=(E,(1))
*           RFY                                                    0418
*             R1 UNRSTD;            /* FREE REG                      */
*           CCASMFRD=0;             /* NO CORE TO BE FREED           */
         SLR   @10,@10                                             0419
         ST    @10,CCASMFRD(,R11)                                  0419
*           CCAMNLEN=R4+CCASMFCT*CATRCDLN+/* GET TOTLAL SMF RCD      */
*               CCASMFLN;           /* CORE REQUIRED                 */
         LH    @10,CCASMFCT(,R11)                                  0420
         SLA   @10,9                                               0420
         ALR   @10,R4                                              0420
         AH    @10,CCASMFLN(,R11)                                  0420
         STCM  @10,7,CCAMNLEN(R11)                                 0420
*           RFY                                                    0421
*             R1 RSTD;              /* USED WITH GETMAIN             */
*           R1=ADDR(CCAMSSPL);      /* POINT TO STRG MGMT P.L.       */
         LA    R1,CCAMSSPL(,R11)                                   0422
*           CCAMNSPL=USUBPOOL;      /* STORE SUBPOOL VALUE           */
*                                                                  0423
         MVI   CCAMNSPL(R11),X'FC'                                 0423
*           /*********************************************************/
*           /*                                                       */
*           /* ALLOCATE MAIN STORAGE FROM USER SUBPOOL 252           */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0424
*           GEN(GETMAIN LC,MF=(E,(1)));/* GET MAIN STORAGE SPACE     */
         GETMAIN LC,MF=(E,(1))
*           GEN(LR R1,R15);         /* PICK UP RETURN CODE           */
         LR R1,R15
*           IF R1^=NOGETMSE THEN    /* CHECK FOR ERROR RETURN        */
*                                                                  0426
         LTR   R1,R1                                               0426
         BZ    @RF00426                                            0426
*             /*******************************************************/
*             /*                                                     */
*             /* SET CCAMODID='BV', CCAREASN=RSN2, CCARETRN=RCINSSWA */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0427
*             CCAPROB=IGGSEGID+(RSN2*K256)+RCINSSWA;/* INSUFFICIENT
*                                      CORE ERROR                    */
         MVC   CCAPROB(4,R11),@CF04587                             0427
*           ELSE                    /* GETMAIN SUCCESSFUL            */
*             DO;                                                  0428
         B     @RC00426                                            0428
@RF00426 DS    0H                                                  0429
*               DO;                                                0429
*                 IF MNATFULL=ON THEN/* TRACKING TABLE FULL          */
*                                                                  0430
         TM    MNATFULL(R11),B'10000000'                           0430
         BNO   @RF00430                                            0430
*                   /*************************************************/
*                   /*                                               */
*                   /* CALL TO MODULE IGG0CLAT                       */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0431
*Z033ARFS:                                                         0431
*                   CALL IGGPARFS;  /* YES,CALL SPILL ROUTINE        */
Z033ARFS L     @15,@CV00037                                        0431
         BALR  @14,@15                                             0431
*                 GEN REFS(CCAMNAT)(MVC CCAMNAT(248,11),CCAMNAT+8(11));
@RF00430 DS    0H                                                  0432
         MVC CCAMNAT(248,11),CCAMNAT+8(11)
*                                   /* PUSH AND TRACK                */
*               END;                                               0433
*             END;                  /* GET MAIN STORAGE              */
*           RFY                                                    0435
*             R1 UNRSTD;            /* FREE REG                      */
@RC00426 DS    0H                                                  0436
*           IF CCACD1^=RCS THEN                                    0436
         CLI   CCACD1(R11),0                                       0436
         BNE   @RT00436                                            0436
*             ;                     /* CHECK ERROR                   */
*           ELSE                    /* NO ERROR                      */
*             DO;                   /* FORMAT RECORD                 */
*               CCASMFRD=CCAMNADR;  /* SAVE SMF RECORD ADDR          */
         L     @10,CCAMNADR(,R11)                                  0439
         ST    @10,CCASMFRD(,R11)                                  0439
*               SMF63NSZ=R4;        /* SET ENTRY SIZE                */
         STH   R4,SMF63NSZ(,@10)                                   0440
*               SMF63LEN=CCAMNLEN;  /* SMF CORE LENGTH               */
         L     @05,CCAMNLEN-1(,R11)                                0441
         LA    @05,0(,@05)                                         0441
         STH   @05,SMF63LEN(,@10)                                  0441
*Z034SMFM:                                                         0442
*               CALL IGGPSMFM;      /* MOVE ENTRY TO SMF RECORD      */
Z034SMFM BAL   @14,IGGPSMFM                                        0442
*             END;                  /* END FORMAT RECORD             */
*         END;                      /* END GET CORRECT AMOUNT        */
*       ELSE                                                       0445
*         ;                         /* SUFFICIENT CORE OR ERROR      */
@RF00404 DS    0H                                                  0446
*       CCASMFLN=SMF63LEN;          /* SET SMF RECORD LENGTH         */
@RC00404 L     @10,CCASMFRD(,R11)                                  0446
         LH    @05,SMF63LEN(,@10)                                  0446
         STH   @05,CCASMFLN(,R11)                                  0446
*       R4=SMF63SEG;                /* SET ENTRY RECORD SIZE         */
         LH    R4,SMF63SEG(,@10)                                   0447
*     END;                          /* END FORMAT RECORD             */
*   CCARABB=ADDR(CCARAB1);          /* RESET BASE RCD AREA ADDR      */
@RT00396 LA    @10,CCARAB1(,R11)                                   0449
         ST    @10,CCARABB(,R11)                                   0449
*   RFY                                                            0450
*     CCARAB BASED(CCAURAB);        /* ORIGINAL BASE                 */
*   IF CCACD1^=RCS&CCASMFRD^=0 THEN /* IF ERROR AND CORE GOTTEN      */
         CLI   CCACD1(R11),0                                       0451
         BE    @RF00451                                            0451
         L     @10,CCASMFRD(,R11)                                  0451
         LTR   @10,@10                                             0451
         BZ    @RF00451                                            0451
*     DO;                           /* FREE CORE                     */
*       CCAMNLEN=SMF63LEN;          /* SET LENGTH                    */
         LH    @05,SMF63LEN(,@10)                                  0453
         STCM  @05,7,CCAMNLEN(R11)                                 0453
*       CCAMNADR=CCASMFRD;          /* SET ADDRESS                   */
         ST    @10,CCAMNADR(,R11)                                  0454
*       RFY                                                        0455
*         R1 RSTD;                  /* USE REG IN FREEING            */
*       R1=ADDR(CCAMSSPL);          /* POINT TO STRG MGMT P.L.       */
         LA    R1,CCAMSSPL(,R11)                                   0456
*       CCAMNSPL=USUBPOOL;          /* STORE SUBPOOL VALUE           */
         MVI   CCAMNSPL(R11),X'FC'                                 0457
*       DO;                                                        0458
*         IF MNATFULL=ON THEN       /* TRACKING TABLE FULL           */
*                                                                  0459
         TM    MNATFULL(R11),B'10000000'                           0459
         BNO   @RF00459                                            0459
*           /*********************************************************/
*           /*                                                       */
*           /* CALL TO MODULE IGG0CLAT                               */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0460
*Z037ARFS:                                                         0460
*           CALL IGGPARFS;          /* YES,CALL SPILL ROUTINE        */
Z037ARFS L     @15,@CV00037                                        0460
         BALR  @14,@15                                             0460
*         GEN REFS(CCAMNAT)(MVC CCAMNAT(248,11),CCAMNAT+8(11));/*  0461
*                                      PUSH AND TRACK                */
@RF00459 DS    0H                                                  0461
         MVC CCAMNAT(248,11),CCAMNAT+8(11)
*       END;                                                       0462
*                                                                  0462
*       /*************************************************************/
*       /*                                                           */
*       /* RELEASE MAIN STORAGE FROM USER SUBPOOL 252                */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0463
*       GEN(FREEMAIN L,MF=(E,(1))) ;/* FREE CORE                     */
         FREEMAIN L,MF=(E,(1))
*       RFY                                                        0464
*         R1 UNRSTD;                /* FREE REG                      */
*     END;                          /* END FREE CORE                 */
*   ELSE                                                           0466
*     ;                             /* NO FREE CORE NECESSARY        */
@RF00451 DS    0H                                                  0467
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0467
*   GEN(DS 0F);                     /* FULLWORD BOUNDARY ALIGNMENT   */
         DS 0F
*   GEN(DC CL8'IGGPSMFM');          /* NAME OF FOLLOWING PROCEDURE   */
         DC CL8'IGGPSMFM'
*   END;                            /* END OF INNER PROCEDURE        */
@EL00004 DS    0H                                                  0470
@EF00004 DS    0H                                                  0470
@ER00004 BR    @14                                                 0470
@PB00004 DS    0H                                                  0471
*   GEN(EJECT);                     /* GO TO A NEW PRINT PAGE        */
         EJECT
*                                                                  0472
*/********************************************************************/
*/*                                                                  */
*/*        IGGPSMFM  -  PROCEDURE  INTERNALLY  CALLED  NESTED        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0472
*IGGPSMFM:                                                         0472
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);/* SPECIFY PROCEDURE OPTIONS     */
         B     @PB00005                                            0472
IGGPSMFM DS    0H                                                  0473
*Z038:                              /* LABEL FOR PROCEDURE TRACKING  */
*Z038SMFM:                          /* LABEL FOR PROCEDURE TRACKING  */
*   RFY                                                            0473
*    (R5,                                                          0473
*     R6,                                                          0473
*     R7,                                                          0473
*     R8,                                                          0473
*     R9,                                                          0473
*     R10) UNRSTD;                  /* PL/S COMPILER WORK REGISTERS  */
Z038     DS    0H                                                  0473
Z038SMFM DS    0H                                                  0474
*   RFY                                                            0474
*    (R2,                                                          0474
*     R3,                                                          0474
*     R4) RSTD;                     /* RESTRICT LOCAL WORK REGISTERS */
*   GEN(STM 12,14,12(13));          /* SAVE REGISTERS OF CALLER      */
         STM 12,14,12(13)
*   GEN(LA 13,12(13));              /* POINT TO NEXT SAVE AREA     0476
*                                      PROCEDURE                     */
         LA 13,12(13)
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**   MODULE NAME =  IGGPSMFM (IGG0CLBV)                               *
**                                                                    *
**   DESCRIPTIVE NAME =  CREATE SMF NEW CATALOG ENTRY FIELD           *
**                                                                    *
**   FUNCTION =                                                       *
**      THIS SUB-FUNCTION IS CALLED BY IGGPSMFE TO CREATE THE NEW     *
**      CATALOG ENTRY FIELD IN SMF RECORDS 63 AND 67.  IT READS IN    *
**      ALL RECORDS ASSOCIATED WITH THE CATALOG ENTRY AND USES        *
**      IGGPSMFP TO PLACE THEM INTO THE SMF RECORD.  (IF THE APPROX-  *
**      IMATION OF THE SIZE OF THE RECORDS IN THE ENTIRE CATALOG      *
**      ENTRY IS LESS THAN THE ACTUAL SIZE,   THIS SUB-FUNCTION       *
**      EFFECTIVELY ONLY RETURNS THE CORRECT COUNT FOR A RE-TRY)      *
**      IT ALSO INTIALIZES THE CATALOG DATA SET ENTRY TYPE FIELD.     *
**      BECAUSE THIS SUB-FUNCTION MAY BE CALLED AGAIN FOR A RE-TRY,   *
**      THE BUFFERS ARE MANIPULATED SO THAT THE BASE ENTRY RECORD IS  *
**      NOT OVERLAID.                                                 *
**                                                                    *
**   INPUT =                                                          *
**      IGGCCA INPUT:                                                 *
**         CCASMFRD - POINTS TO SMF RECORD 63 OR 67.                  *
**         CCASMFLN - DISPLACEMENT TO NEW CATALOG ENTRY FIELD.        *
**         CCA RECORD AREA 1 HAS CATALOG ENTRY BASE RECORD.           *
**      SMF RECORD FIELDS:                                            *
**         SMF63NSZ - APPROXIMATION OF THE TOTAL NUMBER OF RECORDS    *
**                    IN THE CATALOG ENTRY.                           *
**                                                                    *
**   OUTPUT =                                                         *
**      IGGCCA OUTPUT:                                                *
**         CCAURAB,CCARABB - USED TO KEEP TRACK OF CATALOG ENTRY      *
**                           RECORDS.                                 *
**         CCA RECORD AREAS 1,2,AND 3 VOLATILE                        *
**         CCACD1 - RCS, NO ERROR.                                    *
**                  ANY ERROR CODE RETURNED BY GET CI.                *
**      SMF RECORD FIELDS:                                            *
**         SMF63SEG - SIZE  OF RECORDS IN ENTIRE CATALOG ENTRY.       *
**         SMF63DTY - DATA SET TYPE FIELD INITIALIZED NEW CATALOG     *
**                    ENTRY FIELD INITIALIZED.                        *
**                                                                    *
**                                                                    *
** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*                                                                  0477
*   RFY                                                            0477
*     SMFRCD63 BASED(CCASMFRD);     /* MAP SMF RECORD AREA           */
*   CCASMFEX=OFF;                   /* ENTER SEARCH LOOP             */
         NI    CCASMFEX(R11),B'10111111'                           0478
*   SMF63SEG=0;                     /* SET THE INITIAL SIZE OF THE 0479
*                                      ENTIRE ENTRY          @Y30SSRS*/
         L     @10,CCASMFRD(,R11)                                  0479
         SLR   @05,@05                                             0479
         STH   @05,SMF63SEG(,@10)                                  0479
*   CCARABB=ADDR(CCARAB1);          /* INITLZ BASE RAB ADDR          */
         LA    @10,CCARAB1(,R11)                                   0480
         ST    @10,CCARABB(,R11)                                   0480
*   CCAURAB=ADDR(CCARAB1);          /* MAP RECORD AREA FOR BASE      */
         ST    @10,CCAURAB(,R11)                                   0481
*Z039SMFP:                                                         0482
*   CALL IGGPSMFP;                  /* PUT BASE RCD INTO SMF AREA    */
Z039SMFP BAL   @14,IGGPSMFP                                        0482
*   DO WHILE(CCASMFEX=OFF&CCACD1=RCS);/* PROCESS EXTENSION RECORDS   */
         B     @DE00483                                            0483
@DL00483 DS    0H                                                  0484
*     RFY                                                          0484
*       CCARAB BASED(CCARABB);      /* MAP BASE RCD AREA             */
*     CCACPE5=ADDR(REPGOPT);        /* POINT FIRST OCCURR PTR        */
         L     @10,CCARABB(,R11)                                   0485
         L     @10,CCACPE2(,@10)                                   0485
         LA    @10,REPGOPT(,@10)                                   0485
         ST    @10,CCACPE5(,R11)                                   0485
*     DO WHILE(CCACPE5<CCACPE3&CCACD1=RCS);/* SCAN OCCURR PTRS       */
         B     @DE00486                                            0486
@DL00486 DS    0H                                                  0487
*       IF CATGOEXT=ON&CATGODEL=OFF THEN/* IF EXTENSION POINTER      */
         L     @10,CCACPE5(,R11)                                   0487
         TM    CATGOEXT(@10),B'10000000'                           0487
         BNO   @RF00487                                            0487
         TM    CATGODEL(@10),B'01000000'                           0487
         BNZ   @RF00487                                            0487
*         DO;                       /* RETRIEVE RECORD               */
*           CCASRID=CATGOCI;        /* SET SEARCH ARGUMENT           */
         MVC   CCASRID(3,R11),CATGOCI(@10)                         0489
*           CCAURAB=ADDR(CCARAB5);  /* SET RAB POINTER               */
         LA    @10,CCARAB5(,R11)                                   0490
         ST    @10,CCAURAB(,R11)                                   0490
*           DO;                                                    0491
*             CCAF1KEY=OFF;         /* GET BY CI NO.                 */
*             CCAF1KGE=OFF;         /* NOT GET NEXT                  */
*             CCAF1UP=OFF;          /* NOT GET UPD                   */
*                                                                  0494
         NI    CCAF1KEY(R11),B'11100101'                           0494
*             /*******************************************************/
*             /*                                                     */
*             /* CALL TO MODULE IGG0CLBI                             */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0495
*Z041GET:                                                          0495
*             CALL IGGPGET;         /* GET RECORD                    */
Z041GET  L     @15,@CV00036                                        0495
         BALR  @14,@15                                             0495
*           END;                    /* READ RECORD                   */
*           IF CCACD1^=RCS THEN                                    0497
         CLI   CCACD1(R11),0                                       0497
         BNE   @RT00497                                            0497
*             ;                     /* CHECK ERROR                   */
*           ELSE                    /* NO ERROR                      */
*             DO;                   /* PROCESS RECORD                */
*Z042SMFP:                                                         0500
*               CALL IGGPSMFP;      /* PUT RECORD INTO SMF AREA      */
Z042SMFP BAL   @14,IGGPSMFP                                        0500
*               RFY                                                0501
*                 CCARAB BASED(CCAURAB);/* ORIGINAL BASE             */
*               DO WHILE(EXTGOCI^=0&CCACD1=RCS);/* PROCESS EXTENSIONS
*                                      OF EXTENSIONS                 */
         B     @DE00502                                            0502
@DL00502 DS    0H                                                  0503
*                 CCASRID=EXTGOCI;  /* SET SEARCH ARGUMENT           */
         L     @10,CCAURAB(,R11)                                   0503
         L     @10,CCACPE2(,@10)                                   0503
         MVC   CCASRID(3,R11),EXTGOCI(@10)                         0503
*                 DO;                                              0504
*                   CCAF1KEY=OFF;   /* GET BY CI NO.                 */
*                   CCAF1KGE=OFF;   /* NOT GET NEXT                  */
*                                                                  0506
         NI    CCAF1KEY(R11),B'11100111'                           0506
*                   /*************************************************/
*                   /*                                               */
*                   /* CALL TO MODULE IGG0CLBI                       */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0507
*Z044GET:                                                          0507
*                   CALL IGGPGET;   /* GET RECORD                    */
Z044GET  L     @15,@CV00036                                        0507
         BALR  @14,@15                                             0507
*                 END;              /* READ RECORD                   */
*Z045SMFP:                                                         0509
*                 CALL IGGPSMFP;    /* PUT RECORD INTO SMF AREA      */
Z045SMFP BAL   @14,IGGPSMFP                                        0509
*               END;                /* END PROCESS EXTENSIONS        */
@DE00502 L     @10,CCAURAB(,R11)                                   0510
         L     @10,CCACPE2(,@10)                                   0510
         ICM   @05,7,EXTGOCI(@10)                                  0510
         BZ    @DC00502                                            0510
         CLI   CCACD1(R11),0                                       0510
         BE    @DL00502                                            0510
@DC00502 DS    0H                                                  0511
*             END;                  /* END PROCESS RECORD            */
*         END;                      /* END RETRIEVE RECORD           */
*       ELSE                                                       0513
*         ;                         /* NOT EXTENSION POINTER         */
@RF00487 DS    0H                                                  0514
*       CCACPE5=CCACPE5+LENGTH(CATGOPT);/* NEXT GOP                  */
@RC00487 LA    @10,5                                               0514
         AL    @10,CCACPE5(,R11)                                   0514
         ST    @10,CCACPE5(,R11)                                   0514
*     END;                          /* END SCAN OCCURR PTRS          */
@DE00486 L     @10,CCARABB(,R11)                                   0515
         CLC   CCACPE5(4,R11),CCACPE3(@10)                         0515
         BNL   @DC00486                                            0515
         CLI   CCACD1(R11),0                                       0515
         BE    @DL00486                                            0515
@DC00486 DS    0H                                                  0516
*     RFY                                                          0516
*       CCARAB BASED(CCARABB);      /* MAP BASE RCD AREA             */
*     IF EXTGOCI^=0&CCACD1=RCS THEN /* SEE IF EXTENSION OF BASE      */
         L     @10,CCARABB(,R11)                                   0517
         L     @10,CCACPE2(,@10)                                   0517
         ICM   @05,7,EXTGOCI(@10)                                  0517
         BZ    @RF00517                                            0517
         CLI   CCACD1(R11),0                                       0517
         BNE   @RF00517                                            0517
*       DO;                         /* SET UP TO GET EXTENSION       */
*         CCASRID=EXTGOCI;          /* SET SEARCH ARGUMENT           */
         MVC   CCASRID(3,R11),EXTGOCI(@10)                         0519
*         CCAURAB=ADDR(CCARAB4);    /* SET RAB PTR FOR EXTENSION OF
*                                      BASE                          */
         LA    @10,CCARAB4(,R11)                                   0520
         ST    @10,CCAURAB(,R11)                                   0520
*         CCARABB=CCAURAB;          /* RESET BASE RAB ADDR           */
         ST    @10,CCARABB(,R11)                                   0521
*         DO;                                                      0522
*           CCAF1KEY=OFF;           /* GET BY CI NO.                 */
*           CCAF1KGE=OFF;           /* NOT GET NEXT                  */
*                                                                  0524
         NI    CCAF1KEY(R11),B'11100111'                           0524
*           /*********************************************************/
*           /*                                                       */
*           /* CALL TO MODULE IGG0CLBI                               */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0525
*Z047GET:                                                          0525
*           CALL IGGPGET;           /* GET RECORD                    */
Z047GET  L     @15,@CV00036                                        0525
         BALR  @14,@15                                             0525
*         END;                      /* READ EXTENSION OF BASE        */
*Z048SMFP:                                                         0527
*         CALL IGGPSMFP;            /* PUT BASE RCD INTO SMFAREA     */
Z048SMFP BAL   @14,IGGPSMFP                                        0527
*       END;                        /* END SET UP                    */
*     ELSE                          /* NO EXTENSION                  */
*       CCASMFEX=ON;                /* EXIT                          */
         B     @RC00517                                            0529
@RF00517 OI    CCASMFEX(R11),B'01000000'                           0529
*   END;                            /* END PROCESS                   */
@RC00517 DS    0H                                                  0530
@DE00483 TM    CCASMFEX(R11),B'01000000'                           0530
         BNZ   @DC00483                                            0530
         CLI   CCACD1(R11),0                                       0530
         BE    @DL00483                                            0530
@DC00483 DS    0H                                                  0531
*   SMF63DTY=0;                     /* ZERO DATA SET TYPE FLAG       */
         L     @10,CCASMFRD(,R11)                                  0531
         MVI   SMF63DTY(@10),X'00'                                 0531
*   SMF63IND=0;                     /* Z D.S. TYPE FLAG      @Y30SSRS*/
         MVI   SMF63IND(@10),X'00'                                 0532
*   RFY                                                            0533
*     CCARAB BASED(ADDR(CCARAB1));  /* MAP ENTRY                     */
*   IF RCDID=CLUSTER THEN           /* SEE IF CLUSTER ENTRY          */
         L     @05,CCACPE1+108(,R11)                               0534
         CLI   RCDID(@05),C'C'                                     0534
         BNE   @RF00534                                            0534
*     SMF63CL=ON;                   /* INDICATE CLUSTER              */
         OI    SMF63CL(@10),B'10000000'                            0535
*   ELSE                            /* NOT CLUSTER                   */
*     IF RCDID=DATAE THEN           /* SEE IF DATA                   */
         B     @RC00534                                            0536
@RF00534 L     @10,CCACPE1+108(,R11)                               0536
         CLI   RCDID(@10),C'D'                                     0536
         BNE   @RF00536                                            0536
*       SMF63DS=ON;                 /* INDICATE DATA                 */
         L     @10,CCASMFRD(,R11)                                  0537
         OI    SMF63DS(@10),B'01000000'                            0537
*     ELSE                          /* NOT DATA                      */
*       IF RCDID=INDEX THEN         /* CHECK IF INDEX                */
         B     @RC00536                                            0538
@RF00536 L     @10,CCACPE1+108(,R11)                               0538
         CLI   RCDID(@10),C'I'                                     0538
         BNE   @RF00538                                            0538
*         SMF63IDS=ON;              /* INDICATE INDEX                */
         L     @10,CCASMFRD(,R11)                                  0539
         OI    SMF63IDS(@10),B'00100000'                           0539
*       ELSE                        /* NOT INDEX                     */
*         IF RCDID=ALIEN THEN       /* SEE IF ALIEN                  */
         B     @RC00538                                            0540
@RF00538 L     @10,CCACPE1+108(,R11)                               0540
         CLI   RCDID(@10),C'A'                                     0540
         BNE   @RF00540                                            0540
*           SMF63ALN=ON;            /* INDICATE ALIEN                */
         L     @10,CCASMFRD(,R11)                                  0541
         OI    SMF63ALN(@10),B'00001000'                           0541
*         ELSE                      /* NOT ALIEN                     */
*           IF RCDID=USER THEN      /* IF USER CATALOG               */
         B     @RC00540                                            0542
@RF00540 L     @10,CCACPE1+108(,R11)                               0542
         CLI   RCDID(@10),C'U'                                     0542
         BNE   @RF00542                                            0542
*             SMF63CAT=ON;          /* INDICATE CATALOG              */
         L     @10,CCASMFRD(,R11)                                  0543
         OI    SMF63CAT(@10),B'00010000'                           0543
*           ELSE                    /* NOT CATALOG           @Y30SSRS*/
*             IF RCDID=PATH THEN    /* IF PATH TYPE          @Y30SSRS*/
         B     @RC00542                                            0544
@RF00542 L     @10,CCACPE1+108(,R11)                               0544
         CLI   RCDID(@10),C'R'                                     0544
         BNE   @RF00544                                            0544
*               SMF63PTH=ON;        /* INDICATE PATH         @Y30SSRS*/
         L     @10,CCASMFRD(,R11)                                  0545
         OI    SMF63PTH(@10),B'00000010'                           0545
*             ELSE                  /* NOT PATH              @Y30SSRS*/
*               IF RCDID=AIX THEN   /* IF AIX TYPE           @Y30SSRS*/
         B     @RC00544                                            0546
@RF00544 L     @10,CCACPE1+108(,R11)                               0546
         CLI   RCDID(@10),C'G'                                     0546
         BNE   @RF00546                                            0546
*                 SMF63AIX=ON;      /* INDICATE AIX          @Y30SSRS*/
         L     @10,CCASMFRD(,R11)                                  0547
         OI    SMF63AIX(@10),B'00000001'                           0547
*               ELSE                                               0548
*                 ;                 /* NOT AIX               @Y30SSRS*/
@RF00546 DS    0H                                                  0549
*   IF RCDID=GDGBASE THEN           /* IF GDG BASE ENTRY       Y02020*/
@RC00544 DS    0H                                                  0549
@RC00542 DS    0H                                                  0549
@RC00540 DS    0H                                                  0549
@RC00538 DS    0H                                                  0549
@RC00536 DS    0H                                                  0549
@RC00534 L     @10,CCACPE1+108(,R11)                               0549
         CLI   RCDID(@10),C'B'                                     0549
         BNE   @RF00549                                            0549
*     SMF63GDB=ON;                  /* TURN BIT ON             Y02020*/
         L     @10,CCASMFRD(,R11)                                  0550
         OI    SMF63GDB(@10),B'00000100'                           0550
*   ELSE                            /* NOT GDG BASE            Y02020*/
*     IF RCDID=ALIAS THEN           /* IF ALIAS ENTRY          Y02020*/
         B     @RC00549                                            0551
@RF00549 L     @10,CCACPE1+108(,R11)                               0551
         CLI   RCDID(@10),C'X'                                     0551
         BNE   @RF00551                                            0551
*       SMF63ALX=ON;                /* TURN BIT ON             Y02020*/
         L     @10,CCASMFRD(,R11)                                  0552
         OI    SMF63ALX(@10),B'00000010'                           0552
*     ELSE                                                         0553
*       ;                           /*                         Y02020*/
@RF00551 DS    0H                                                  0554
*   IF RCDCINO<=CATCINO THEN        /* IF CATALOG RECORD             */
@RC00549 L     @10,CCACPE1+108(,R11)                               0554
         CLC   RCDCINO(3,@10),@CF00059+1                           0554
         BH    @RF00554                                            0554
*     SMF63CAT=ON;                  /* INDICATE CATALOG              */
         L     @10,CCASMFRD(,R11)                                  0555
         OI    SMF63CAT(@10),B'00010000'                           0555
*   ELSE                                                           0556
*     ;                             /* NOT CATALOG                   */
@RF00554 DS    0H                                                  0557
*   RFY                                                            0557
*     CCARAB BASED(CCAURAB);        /* ORIGINAL BASE                 */
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0558
*   GEN(DS 0F);                     /* FULLWORD BOUNDARY ALIGNMENT   */
         DS 0F
*   GEN(DC CL8'IGGPSMFP');          /* NAME OF FOLLOWING PROCEDURE   */
         DC CL8'IGGPSMFP'
*   END;                            /* END OF INNER PROCEDURE        */
@EL00005 DS    0H                                                  0561
@EF00005 DS    0H                                                  0561
@ER00005 BR    @14                                                 0561
@PB00005 DS    0H                                                  0562
*   GEN(EJECT);                     /* GO TO A NEW PRINT PAGE        */
         EJECT
*                                                                  0563
*/********************************************************************/
*/*                                                                  */
*/*        IGGPSMFP  -  PROCEDURE  INTERNALLY  CALLED  NESTED        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0563
*IGGPSMFP:                                                         0563
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);/* SPECIFY PROCEDURE OPTIONS     */
         B     @PB00006                                            0563
IGGPSMFP DS    0H                                                  0564
*Z049:                              /* LABEL FOR PROCEDURE TRACKING  */
*Z049SMFP:                          /* LABEL FOR PROCEDURE TRACKING  */
*   RFY                                                            0564
*    (R5,                                                          0564
*     R6,                                                          0564
*     R7,                                                          0564
*     R8,                                                          0564
*     R9,                                                          0564
*     R10) UNRSTD;                  /* PL/S COMPILER WORK REGISTERS  */
Z049     DS    0H                                                  0564
Z049SMFP DS    0H                                                  0565
*   RFY                                                            0565
*    (R2,                                                          0565
*     R3,                                                          0565
*     R4) RSTD;                     /* RESTRICT LOCAL WORK REGISTERS */
*   GEN(STM 12,14,12(13));          /* SAVE REGISTERS OF CALLER      */
         STM 12,14,12(13)
*   GEN(LA 13,12(13));              /* POINT TO NEXT SAVE AREA     0567
*                                      PROCEDURE                     */
         LA 13,12(13)
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**   MODULE NAME =  IGGPSMFP (IGG0CLBV)                               *
**                                                                    *
**   DESCRIPTIVE NAME =  PLACE CATALOG ENTRY RECORD INTO SMF RECORD.  *
**                                                                    *
**   FUNCTION =                                                       *
**      THIS SUB-FUNCTION IS PART OF THE ROUTINE IGGPSMFM, WHICH      *
**      PARTIALLY INITIALIZES SMF RECORDS 63 AND 67.  IT IS CALLED TO *
**      COPY RECORDS FROM A RECORD AREA BUFFER INTO THE               *
**      ACTUAL SMF RECORD NEW CATALOG ENTRY FIELD, AS LONG AS THERE   *
**      IS AVAILABLE SPACE. IT CALLS IGGPSMFZ TO ZERO ANY SECURITY    *
**      INFORMATION IN THE RECORD.                                    *
**                                                                    *
**   INPUT =                                                          *
**      IGGCCA INPUT:                                                 *
**         CCASMFRD - ADDRESS OF SMF RECORD 63 OR 67.                 *
**         CCASMFLN - DISPLACEMENT TO NEW CATALOG ENTRY FIELD.        *
**         CCAURAB  - RECORD AREA BLOCK ADDRESS OF CATALOG ENTRY      *
**                    RECORD.                                         *
**      SMF RECORD FIELDS:                                            *
**         SMF63SEG - CURRENT SIZE  OF RECORDS IN ENTIRE CATALOG ENTRY*
**         SMF63NSZ - APPROXIMATION OF SIZE  OF RECORDS IN ENTIRE     *
**                    CATALOG ENTRY.                                  *
**                                                                    *
**   OUTPUT =                                                         *
**      SMF RECORD FIELDS:                                            *
**         SMF63SEG - CURRENT SIZE  OF RECORDS IN ENTIRE CATALOG      *
**                    ENTRY INCREMENTED.                              *
**         NEW CATALOG ENTRY FIELD INITIALIZED WITH CATALOG ENTRY     *
**         RECORD (NOT DONE IF SMF63SEG EXCEEDS SMF63NSZ).            *
**                                                                    *
**                                                                    *
** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*                                                                  0568
*   RFY                                                            0568
*     SMFRCD63 BASED(CCASMFRD);     /* MAP SMF RECORD AREA           */
*   RFY                                                            0569
*     RCDAREA BASED(CCACPE1);       /* MAP CATALOG RCD AREA          */
*   RFY                                                            0570
*     SMFRCDAR BASED(CCASMFRD+CCASMFLN/* MAP SMF RECORD AREA         */
*         +SMF63SEG);                                              0570
*                                                                  0570
*   /*****************************************************************/
*   /*                                                               */
*   /* COPY CATALOG ENTRY RECORD INTO SMF RECORD ONLY IF IT HAS NOT  */
*   /* BEEN PREVIOUSLY COPIED                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0571
*   R2=CCASMFRD+CCASMFLN;           /* POINT TO FIRST RCD            */
         LH    R2,CCASMFLN(,R11)                                   0571
         AL    R2,CCASMFRD(,R11)                                   0571
*   DO WHILE(R2^=0&R2<CCASMFRD+CCASMFLN+SMF63SEG&SMF63SEG<=SMF63NSZ);
         B     @DE00572                                            0572
@DL00572 DS    0H                                                  0573
*                                   /* SEARCH FOR DUPLICATE RCD IN 0573
*                                      SMF RCD                       */
*     IF R2->RCDCINO=RCDCINO THEN   /* IF EQUAL CI NUMBERS           */
         L     @10,CCAURAB(,R11)                                   0573
         L     @10,CCACPE1(,@10)                                   0573
         CLC   RCDCINO(3,R2),RCDCINO(@10)                          0573
         BNE   @RF00573                                            0573
*       R2=0;                       /* INDICATE DUPLICATE RCD        */
         SLR   R2,R2                                               0574
*     ELSE                          /* NOT DUPLICATE RCD             */
*       R2=R2+(R2->RCDSIZ);         /* INCR TO NEXT RECORD           */
         B     @RC00573                                            0575
@RF00573 ICM   @10,12,RCDSIZ(R2)                                   0575
         SRA   @10,16                                              0575
         ALR   R2,@10                                              0575
*   END;                            /* END SEARCH                    */
@RC00573 DS    0H                                                  0576
@DE00572 LTR   R2,R2                                               0576
         BZ    @DC00572                                            0576
         L     @10,CCASMFRD(,R11)                                  0576
         LH    @05,CCASMFLN(,R11)                                  0576
         ALR   @05,@10                                             0576
         LH    @15,SMF63SEG(,@10)                                  0576
         ALR   @05,@15                                             0576
         CR    R2,@05                                              0576
         BNL   @DC00572                                            0576
         CH    @15,SMF63NSZ(,@10)                                  0576
         BNH   @DL00572                                            0576
@DC00572 DS    0H                                                  0577
*   IF R2^=0 THEN                   /* IF RCD NOT DUPLICATE          */
         LTR   R2,R2                                               0577
         BZ    @RF00577                                            0577
*     DO;                           /* PLACE RCD INTO SMF RCD        */
*       IF SMF63SEG+RCDSIZ<=SMF63NSZ THEN/* IF RECORD FITS           */
         L     @10,CCASMFRD(,R11)                                  0579
         LH    @05,SMF63SEG(,@10)                                  0579
         L     @01,CCAURAB(,R11)                                   0579
         L     @15,CCACPE1(,@01)                                   0579
         ICM   @14,12,RCDSIZ(@15)                                  0579
         SRA   @14,16                                              0579
         LR    @09,@05                                             0579
         ALR   @09,@14                                             0579
         CH    @09,SMF63NSZ(,@10)                                  0579
         BH    @RF00579                                            0579
*         DO;                       /* PUT RECORD INTO SMF AREA      */
*           IF RCDSIZ>MXM THEN      /* IF TWO MOVES REQUIRED         */
         C     @14,@CF00078                                        0581
         BNH   @RF00581                                            0581
*             DO;                   /* MOVE TWICE                    */
*               SMFRCDAR(1:MXM)=RCDAREA(1:MXM);/* FIRST HALF RCD COPY*/
         AH    @10,CCASMFLN(,R11)                                  0583
         ALR   @10,@05                                             0583
         MVC   SMFRCDAR(256,@10),RCDAREA(@15)                      0583
*               SMFRCDAR(MXM+1:RCDSIZ)=RCDAREA(MXM+1:RCDSIZ);/*    0584
*                                      SECOND HALF RCD COPY          */
         SL    @14,@CF04362                                        0584
         EX    @14,@SM04608                                        0584
*             END;                  /* END MOVE TWICE                */
*           ELSE                    /* ONE MOVE                      */
*             SMFRCDAR(1:RCDSIZ)=RCDAREA(1:RCDSIZ);/* MOVE ONCE      */
         B     @RC00581                                            0586
@RF00581 L     @10,CCASMFRD(,R11)                                  0586
         LH    @05,CCASMFLN(,R11)                                  0586
         ALR   @05,@10                                             0586
         AH    @05,SMF63SEG(,@10)                                  0586
         L     @10,CCAURAB(,R11)                                   0586
         L     @10,CCACPE1(,@10)                                   0586
         ICM   @15,12,RCDSIZ(@10)                                  0586
         SRA   @15,16                                              0586
         BCTR  @15,0                                               0586
         EX    @15,@SM04610                                        0586
*           RFY                                                    0587
*             R1 RSTD;              /* INPUT REG FOR SMFZ            */
@RC00581 DS    0H                                                  0588
*           R1=ADDR(SMFRCDAR);      /* POINT TO RCD WITH POSSIBLE  0588
*                                      PSWD INFO                     */
         L     @10,CCASMFRD(,R11)                                  0588
         LH    R1,CCASMFLN(,R11)                                   0588
         ALR   R1,@10                                              0588
         AH    R1,SMF63SEG(,@10)                                   0588
*Z050SMFZ:                                                         0589
*           CALL IGGPSMFZ;          /* ZERO ANY SECURITY INFO        */
Z050SMFZ BAL   @14,IGGPSMFZ                                        0589
*           RFY                                                    0590
*             R1 UNRSTD;            /* FREE REG                      */
*         END;                      /* END PUT RECORD                */
*       ELSE                                                       0592
*         ;                         /* RECORD NOT FIT                */
@RF00579 DS    0H                                                  0593
*       SMF63SEG=SMF63SEG+RCDSIZ;   /* INCR SIZE OF RCDS FOR ENTIRE
*                                      ENTRY                         */
         L     @10,CCASMFRD(,R11)                                  0593
         L     @05,CCAURAB(,R11)                                   0593
         L     @05,CCACPE1(,@05)                                   0593
         ICM   @05,12,RCDSIZ(@05)                                  0593
         SRA   @05,16                                              0593
         AH    @05,SMF63SEG(,@10)                                  0593
         STH   @05,SMF63SEG(,@10)                                  0593
*     END;                          /* END PLACE                     */
*   ELSE                                                           0595
*     ;                             /* DUPLICATE RCD                 */
@RF00577 DS    0H                                                  0596
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0596
*   GEN(DS 0F);                     /* FULLWORD BOUNDARY ALIGNMENT   */
         DS 0F
*   GEN(DC CL8'IGGPSMFF');          /* NAME OF FOLLOWING PROCEDURE   */
         DC CL8'IGGPSMFF'
*   END;                            /* END OF INNER PROCEDURE        */
@EL00006 DS    0H                                                  0599
@EF00006 DS    0H                                                  0599
@ER00006 BR    @14                                                 0599
@PB00006 DS    0H                                                  0600
*   GEN(EJECT);                     /* GO TO A NEW PRINT PAGE        */
         EJECT
*                                                                  0601
*/********************************************************************/
*/*                                                                  */
*/*        IGGPSMFF  -  PROCEDURE  EXTERNALLY  CALLED  NESTED        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0601
*IGGPSMFF:                                                         0601
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);/* SPECIFY PROCEDURE OPTIONS     */
         B     @PB00007                                            0601
IGGPSMFF DS    0H                                                  0602
*   GEN(ENTRY IGGPSMFF );           /* IDENTIFY ENTRY-POINT SYMBOL   */
         ENTRY IGGPSMFF
*Z051:                              /* LABEL FOR PROCEDURE TRACKING  */
*Z051SMFF:                          /* LABEL FOR PROCEDURE TRACKING  */
*   RFY                                                            0603
*    (R5,                                                          0603
*     R6,                                                          0603
*     R7,                                                          0603
*     R8,                                                          0603
*     R9,                                                          0603
*     R10) UNRSTD;                  /* PL/S COMPILER WORK REGISTERS  */
Z051     DS    0H                                                  0603
Z051SMFF DS    0H                                                  0604
*   RFY                                                            0604
*    (R2,                                                          0604
*     R3,                                                          0604
*     R4) RSTD;                     /* RESTRICT LOCAL WORK REGISTERS */
*   GEN(STM 12,14,12(13));          /* SAVE REGISTERS OF CALLER      */
         STM 12,14,12(13)
*   GEN(LA 13,12(13));              /* POINT TO NEXT SAVE AREA       */
         LA 13,12(13)
*   GEN(BALR 12,0);                 /* ESTABLISH ADDRESSABILITY      */
         BALR 12,0
*   GEN(LA 15,*-IGGSEGST(0,0));     /* COMPUTE MODULE BASE           */
         LA 15,*-IGGSEGST(0,0)
*   GEN(SR 12,15);                  /* SET BASE TO MODULE BASE     0609
*                                      PROCEDURE                     */
         SR 12,15
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**   MODULE NAME =  IGGPSMFF (IGG0CLBV)                               *
**                                                                    *
**   DESCRIPTIVE NAME =  FREE SMF RECORD CHAIN CORE                   *
**                                                                    *
**   FUNCTION =                                                       *
**      THIS SUB-FUNCTION IS ASSOCIATED WITH WRITING SMF RECORD 63    *
**      (IGGPSMFA) FOR ALTER TYPE CASES.  IT FREES THE SMF RECORD     *
**      CHAIN CORE, ORIGINALLY OBTAINED BY IGGPSMFG.  IF CALLED IN A  *
**      NON-ALTER CASE, IT IMMEDIATELY RETURNS.                       *
**                                                                    *
**   INPUT =                                                          *
**      IGGCCA INPUT:                                                 *
**         CCASMFPT - ADDRESS OF SMF RECORD CHAIN.                    *
**                                                                    *
**   OUTPUT =                                                         *
**      IGGCCA OUTPUT:                                                *
**         CCA SMF RECORD CHAIN CORE FREED.                           *
**                                                                    *
**                                                                    *
** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*                                                                  0610
*   R3=CCASMFPT;                    /* FIRST ELEMENT                 */
         L     R3,CCASMFPT(,R11)                                   0610
*   DO WHILE(R3^=0);                /* FREEING LOOP                  */
         B     @DE00611                                            0611
@DL00611 DS    0H                                                  0612
*     IF SMFELTSZ^=0 THEN           /* IF CORE MUST BE FREED         */
         ICM   @10,12,SMFELTSZ(R3)                                 0612
         SRA   @10,16                                              0612
         LTR   @10,@10                                             0612
         BZ    @RF00612                                            0612
*       DO;                         /* ISSUE FREEMS                  */
*         CCAMNLEN=SMFELTSZ;        /* CORE SIZE                     */
         STCM  @10,7,CCAMNLEN(R11)                                 0614
*         CCAMNADR=R3+LENGTH(SMFELT)-/* POINT TO BEGINNING OF        */
*             SMFELTSZ;             /* CORE TO BE FREED              */
         LA    @05,512                                             0615
         ALR   @05,R3                                              0615
         SLR   @05,@10                                             0615
         ST    @05,CCAMNADR(,R11)                                  0615
*         R3=SMFCHAIN;              /* NEXT ELEMENT                  */
         ICM   R3,15,SMFCHAIN(R3)                                  0616
*         RFY                                                      0617
*           R1 RSTD;                /* USED IN FREEMAIN              */
*         R1=ADDR(CCAMSSPL);        /* POINT TO STRG MGMT P.L.       */
         LA    R1,CCAMSSPL(,R11)                                   0618
*         CCAMNSPL=USUBPOOL;        /* STORE SUBPOOL VALUE           */
         MVI   CCAMNSPL(R11),X'FC'                                 0619
*         DO;                                                      0620
*           IF MNATFULL=ON THEN     /* TRACKING TABLE FULL           */
*                                                                  0621
         TM    MNATFULL(R11),B'10000000'                           0621
         BNO   @RF00621                                            0621
*             /*******************************************************/
*             /*                                                     */
*             /* CALL TO MODULE IGG0CLAT                             */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0622
*Z054ARFS:                                                         0622
*             CALL IGGPARFS;        /* YES,CALL SPILL ROUTINE        */
Z054ARFS L     @15,@CV00037                                        0622
         BALR  @14,@15                                             0622
*           GEN REFS(CCAMNAT)(MVC CCAMNAT(248,11),CCAMNAT+8(11));/*
*                                      PUSH AND TRACK                */
@RF00621 DS    0H                                                  0623
         MVC CCAMNAT(248,11),CCAMNAT+8(11)
*         END;                                                     0624
*                                                                  0624
*         /***********************************************************/
*         /*                                                         */
*         /* RELEASE MAIN STORAGE FROM USER SUBPOOL 252              */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0625
*         GEN(FREEMAIN L,MF=(E,(1))) ;/* FREE CORE                   */
         FREEMAIN L,MF=(E,(1))
*         RFY                                                      0626
*           R1 UNRSTD;              /* FREE REG                      */
*       END;                        /* END ISSUE FREEMS              */
*     ELSE                          /* NO CORE TO BE FREED           */
*       R3=SMFCHAIN;                /* NEXT ELEMENT                  */
         B     @RC00612                                            0628
@RF00612 ICM   R3,15,SMFCHAIN(R3)                                  0628
*   END;                            /* END FREEING                   */
@RC00612 DS    0H                                                  0629
@DE00611 SLR   @10,@10                                             0629
         CR    R3,@10                                              0629
         BNE   @DL00611                                            0629
*   CCASMFPT=0;                     /* RE-INITIALIZE TO INDICATE NO
*                                      SMF CHAIN                     */
         ST    @10,CCASMFPT(,R11)                                  0630
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0631
*   GEN(DS 0F);                     /* FULLWORD BOUNDARY ALIGNMENT   */
         DS 0F
*   GEN(DC CL8'IGGPSMFS');          /* NAME OF FOLLOWING PROCEDURE   */
         DC CL8'IGGPSMFS'
*   END;                            /* END OF INNER PROCEDURE        */
@EL00007 DS    0H                                                  0634
@EF00007 DS    0H                                                  0634
@ER00007 BR    @14                                                 0634
@PB00007 DS    0H                                                  0635
*   GEN(EJECT);                     /* GO TO A NEW PRINT PAGE        */
         EJECT
*                                                                  0636
*/********************************************************************/
*/*                                                                  */
*/*        IGGPSMFS  -  PROCEDURE  EXTERNALLY  CALLED  NESTED        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0636
*IGGPSMFS:                                                         0636
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);/* SPECIFY PROCEDURE OPTIONS     */
         B     @PB00008                                            0636
IGGPSMFS DS    0H                                                  0637
*   GEN(ENTRY IGGPSMFS );           /* IDENTIFY ENTRY-POINT SYMBOL   */
         ENTRY IGGPSMFS
*Z055:                              /* LABEL FOR PROCEDURE TRACKING  */
*Z055SMFS:                          /* LABEL FOR PROCEDURE TRACKING  */
*   RFY                                                            0638
*    (R5,                                                          0638
*     R6,                                                          0638
*     R7,                                                          0638
*     R8,                                                          0638
*     R9,                                                          0638
*     R10) UNRSTD;                  /* PL/S COMPILER WORK REGISTERS  */
Z055     DS    0H                                                  0638
Z055SMFS DS    0H                                                  0639
*   RFY                                                            0639
*    (R2,                                                          0639
*     R3,                                                          0639
*     R4) RSTD;                     /* RESTRICT LOCAL WORK REGISTERS */
*   GEN(STM 12,14,12(13));          /* SAVE REGISTERS OF CALLER      */
         STM 12,14,12(13)
*   GEN(LA 13,12(13));              /* POINT TO NEXT SAVE AREA       */
         LA 13,12(13)
*   GEN(BALR 12,0);                 /* ESTABLISH ADDRESSABILITY      */
         BALR 12,0
*   GEN(LA 15,*-IGGSEGST(0,0));     /* COMPUTE MODULE BASE           */
         LA 15,*-IGGSEGST(0,0)
*   GEN(SR 12,15);                  /* SET BASE TO MODULE BASE     0644
*                                      PROCEDURE                     */
         SR 12,15
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**   MODULE NAME =  IGGPSMFS (IGG0CLBV)                               *
**                                                                    *
**   DESCRIPTIVE NAME =  WRITE SMF DATA DELETE RECORD 67              *
**                                                                    *
**   FUNCTION =                                                       *
**      THIS SUB-FUNCTION WRITES SMF RECORD 67 WHEN A DATA SET,       *
**      CLUSTER, OR CHAIN DATA SET IS DELETED FROM A VSAM CATALOG.    *
**      THE PROCESSING IS AS FOLLOWS:                                 *
**      1. CHECK THAT SMF IS ACTIVE ON THIS SYSTEM.                   *
**      2. CALL IGGPSMFE TO GET MAIN STORAGE CORE FOR THE SMF RECORD  *
**         AND TO INITIALIZE THE CATALOG ENTRY FIELDS, SMF67CE AND    *
**         SMF67DTY.                                                  *
**      3. INITIALIZE THE SMF FIELDS UNIQUE TO THIS SMF RECORD.       *
**      4. CALL IGGPSMFC TO INITIALIZE THE COMMON SMF FIELDS AND TO   *
**         INVOKE THE WRITE SMF SVC.                                  *
**                                                                    *
**   INPUT =                                                          *
**      IGGCCA INPUT:                                                 *
**         CCACD1 - MUST BE ZERO.                                     *
**         CCA RECORD AREA 1 HAS CATALOG ENTRY BASE RECORD.           *
**         CCASMFG1 - DATA SET DELETE INDICATOR (RESERVED BITS MUST   *
**                    BE ZERO).                                       *
**                    CCASMFUC - UNCATALOG                            *
**                    CCASMFSR - SCRATCH                              *
**      CVTSMCA,SMCAUSER,SMCADSA - SMF PROCESSING INDICATES.          *
**                                                                    *
**   OUTPUT =                                                         *
**      SMF RECORD 67 WRITTEN                                         *
**      IGGCCA OUTPUT:                                                *
**         CCASMFCD - RCS, NO ERROR                                   *
**                  - ANY ERROR CODE RETURNED BY GET CI               *
**                  - RCINSSWA, MAIN STORAGE CORE UNAVAILABLE         *
**         CCA RECORD AREAS 1,2, AND 3 VOLATILE.                      *
**         CCACD1 - SET TO ZERO AT EXIT.                              *
**                                                                    *
**                                                                    *
** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*                                                                  0645
*   IF CVTSMCA=0×SMCADSA=OFF×       /* IF NO SMF OR NO DATA SET      */
*       SMCAUSER=OFF THEN                                          0645
         L     @10,CVTPTR                                          0645
         L     @10,CVTSMCA(,@10)                                   0645
         LTR   @10,@10                                             0645
         BZ    @RT00645                                            0645
         TM    SMCADSA(@10),B'00010000'                            0645
         BZ    @RT00645                                            0645
         TM    SMCAUSER(@10),B'10000000'                           0645
         BZ    @RT00645                                            0645
*     ;                             /* ACCOUNTING OR NO SMF DATA DONT
*                                      PROCESS SMF                   */
*   ELSE                            /* WRITE SMF RECORD 67           */
*     DO;                           /* SMF WRITE                     */
*       CCASMFLN=LENGTH(SMFRCD67);  /* LENGTH FIXED INFO IN THIS   0648
*                                      RECORD                        */
         MVC   CCASMFLN(2,R11),@CH04588                            0648
*       CCASMFPT=0;                 /* NO SMF CHAIN                  */
         SLR   @10,@10                                             0649
         ST    @10,CCASMFPT(,R11)                                  0649
*       CCASMFCT=0;                 /* NO SMF CHAIN COUNT            */
         STH   @10,CCASMFCT(,R11)                                  0650
*Z056SMFE:                                                         0651
*       CALL IGGPSMFE;              /* GET CORE FOR RECORD AND INSERT
*                                      ENTRY                         */
Z056SMFE BAL   @14,IGGPSMFE                                        0651
*       IF CCACD1^=RCS THEN                                        0652
         CLI   CCACD1(R11),0                                       0652
         BNE   @RT00652                                            0652
*         ;                         /* CHECK ERROR                   */
*       ELSE                        /* NO ERROR                      */
*         DO;                       /* FORMAT ENTRY                  */
*           RFY                                                    0655
*             SMFRCD67 BASED(CCASMFRD);/* MAP SMF RECORD             */
*           SMF67ESZ=R4;            /* SET ENTRY SIZE                */
         L     @10,CCASMFRD(,R11)                                  0656
         STH   R4,SMF67ESZ(,@10)                                   0656
*           SMF67LEN=LENGTH(SMFRCD67)+/* SET SMF LOGICAL RECORD      */
*               SMF67ESZ;           /* SIZE                          */
         L     @05,CCASMFRD(,R11)                                  0657
         LH    @05,SMF67ESZ(,@05)                                  0657
         AL    @05,@CF04588                                        0657
         STH   @05,SMF67LEN(,@10)                                  0657
*           SMF67RTY=SMFSCR;        /* SET RECORD TYPE               */
         MVI   SMF67RTY(@10),X'43'                                 0658
*           SMF67IND=CCASMFG1×SMF67IND;/* INDICATORS         @Y30SSRS*/
         OC    SMF67IND(1,@10),CCASMFG1(R11)                       0659
*           SMF67CNM=CAXCNAM;       /* CATALOG NAME                  */
         L     @05,CCAACB(,R11)                                    0660
         L     @05,ACBUAPTR(,@05)                                  0660
         MVC   SMF67CNM(44,@10),CAXCNAM(@05)                       0660
*           RFY                                                    0661
*             CATRCD BASED(ADDR(SMF67CE));/* MAP CATALOG ENTRY       */
*           SMF67DNM=DSNAME;        /* SET DATA SET NAME             */
         MVC   SMF67DNM(44,@10),DSNAME+183(@10)                    0662
*           RFY                                                    0663
*             CATRCD BASED(CCACPE1);/* ORIGINAL BASE         @Y30SSRS*/
*Z057SMFC:                                                         0664
*           CALL IGGPSMFC;          /* FORMAT COMMON AND WRITE SMF 0664
*                                      RECORD                        */
Z057SMFC BAL   @14,IGGPSMFC                                        0664
*         END;                      /* END FORMAT ENTRY              */
*       IF CCACD1^=RCS THEN         /* IF ERROR              @Y30SSRS*/
@RT00652 CLI   CCACD1(R11),0                                       0666
         BE    @RF00666                                            0666
*         CCASMFP=IGGSEGID+CCACD1*K256+RCSMFER;/* SET ERR    @Y30SSRS*/
         SLR   @10,@10                                             0667
         IC    @10,CCACD1(,R11)                                    0667
         SLA   @10,8                                               0667
         AL    @10,@CF04584                                        0667
         ST    @10,CCASMFP(,R11)                                   0667
*       ELSE                        /* NO ERROR              @Y30SSRS*/
*         CCASMFP=0;                /* ZERO ERR FIELD        @Y30SSRS*/
*                                                                  0668
         B     @RC00666                                            0668
@RF00666 SLR   @10,@10                                             0668
         ST    @10,CCASMFP(,R11)                                   0668
*       /*************************************************************/
*       /*                                                           */
*       /* CLEAR CCAMODID, CCAREASN, AND CCARETRN                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0669
*       CCAPROB=IGNOREIT;           /* NO ERR CODE RET       @Y30SSRS*/
@RC00666 SLR   @10,@10                                             0669
         ST    @10,CCAPROB(,R11)                                   0669
*     END;                          /* END SMF WRITE                 */
*   CALL EXIT;                      /* RETURN TO CALLER              */
@RT00645 BAL   @14,EXIT                                            0671
*   GEN(DS 0F);                     /* FULLWORD BOUNDARY ALIGNMENT   */
         DS 0F
*   GEN(DC CL8'IGGPSMFL');          /* NAME OF FOLLOWING PROCEDURE   */
         DC CL8'IGGPSMFL'
*   END;                            /* END OF INNER PROCEDURE        */
@EL00008 DS    0H                                                  0674
@EF00008 DS    0H                                                  0674
@ER00008 BR    @14                                                 0674
@PB00008 DS    0H                                                  0675
*   GEN(EJECT);                     /* GO TO A NEW PRINT PAGE        */
         EJECT
*                                                                  0676
*/********************************************************************/
*/*                                                                  */
*/*        IGGPSMFL  -  PROCEDURE  EXTERNALLY  CALLED  NESTED        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0676
*IGGPSMFL:                                                         0676
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);/* SPECIFY PROCEDURE OPTIONS     */
         B     @PB00009                                            0676
IGGPSMFL DS    0H                                                  0677
*   GEN(ENTRY IGGPSMFL );           /* IDENTIFY ENTRY-POINT SYMBOL   */
         ENTRY IGGPSMFL
*Z059:                              /* LABEL FOR PROCEDURE TRACKING  */
*Z059SMFL:                          /* LABEL FOR PROCEDURE TRACKING  */
*   RFY                                                            0678
*    (R5,                                                          0678
*     R6,                                                          0678
*     R7,                                                          0678
*     R8,                                                          0678
*     R9,                                                          0678
*     R10) UNRSTD;                  /* PL/S COMPILER WORK REGISTERS  */
Z059     DS    0H                                                  0678
Z059SMFL DS    0H                                                  0679
*   RFY                                                            0679
*    (R2,                                                          0679
*     R3,                                                          0679
*     R4) RSTD;                     /* RESTRICT LOCAL WORK REGISTERS */
*   GEN(STM 12,14,12(13));          /* SAVE REGISTERS OF CALLER      */
         STM 12,14,12(13)
*   GEN(LA 13,12(13));              /* POINT TO NEXT SAVE AREA       */
         LA 13,12(13)
*   GEN(BALR 12,0);                 /* ESTABLISH ADDRESSABILITY      */
         BALR 12,0
*   GEN(LA 15,*-IGGSEGST(0,0));     /* COMPUTE MODULE BASE           */
         LA 15,*-IGGSEGST(0,0)
*   GEN(SR 12,15);                  /* SET BASE TO MODULE BASE     0684
*                                      PROCEDURE                     */
         SR 12,15
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**   MODULE NAME =  IGGPSMFL (IGG0CLBV)                               *
**                                                                    *
**   DESCRIPTIVE NAME =  WRITE SMF VOLUME SPACE RECORD 69             *
**                                                                    *
**   FUNCTION =                                                       *
**      THIS SUB-FUNCTION WRITES SMF RECORD 69, VOLUME SPACE          *
**      INFORMATION, WHEN A DATA SPACE IS ALLOCATED, EXTENDED, OR     *
**      SCRATCHED.  THE PROCESSING IS AS FOLLOWS:                     *
**      1. CHECK THAT SMF IS IN THE SYSTEM AND VOLUME INFORMATION     *
**         IS REQUIRED.                                               *
**      2. READ THE VOLUME ENTRY BASE RECORD, IF IT IS NOT IN CORE.   *
**      3. CALL LSPACE (IGGPLDCS) TO OBTAIN THE FREE SPACE            *
**         INFORMATION ON THE VOLUME, IF IT HASN'T BEEN PASSED AS AN  *
**         INPUT PARAMETER.                                           *
**      4. INITIALIZE THE FIELDS UNIQUE TO THIS SMF RECORD:           *
**         A. FIND THE UNIT ON WHICH THIS VOLUME IS MOUNTED TO OBTAIN *
**            THE UNIT ADDRESS.                                       *
**         B. BUILD AND EXECUTE A SENSE CHANNNEL PROGRAM TO OBTAIN    *
**            THE SPINDLE DATA                                        *
**      5. CALL IGGPSMFC TO INITIALIZE THE COMMON SMF FIELDS, AND TO  *
**         INVOKE THE SMF SVC TO WRITE THE SMF RECORD.                *
**      NOTE: THE SMF RECORD 69 IS BUILT IN CCA RECORD AREA 5.        *
**                                                                    *
**   INPUT =                                                          *
**      IGGCCA INPUT:                                                 *
**         CCASMFPT - IF NON-ZERO, MUST CONTAIN THE ADDRESS OF 2-1/2  *
**                    WORDS OF FREE SPACE INFORMATION (FIELDS SMF69NDS*
**                    THROUGH SMF69LNT) NOT LOCATED IN RECORD AREA    *
**                    5. OTHERWISE, IF ZERO, IGGPLDCS IS CALLED TO    *
**                    OBTAIN THE 2-1/2 WORDS OF FREE SPACE            *
**                    INFORMATION.                                    *
**         CCASMFBR - IF ON, CCASRID HAS THE CI OF THE BASE VOLUME    *
**                    ENTRY RECORD TO BE USED. IF OFF, CCA RECORD     *
**                    AREA 1 HAS BASE VOLUME ENTRY RECORD.            *
**         CCACD1 - MUST BE ZERO.                                     *
**         CVTSMCA,SMCAVOL,SMCAUSER - SMF PROCESSING INDICATORS       *
**                                                                    *
**   OUTPUT =                                                         *
**      IGGCCA OUTPUT:                                                *
**         CCASMFCD - CONTAINS ANY ERROR CODE SET IN CCACD1 DURING    *
**                    SMF PROCESSING.                                 *
**                  - RCS, NO ERROR                                   *
**                  - ANY ERROR CODE RETURNED FROM IGGPLDCS           *
**                  -RCNMNTD, VOLUME NOT MOUNTED                      *
**         CCA RECORD AREAS 1,2,3,4,5 VOLATILE                        *
**         CCACD1 - SET TO ZERO AT EXIT                               *
**      SMF RECORD 69 WRITTEN.                                        *
**                                                                    *
**                                                                    *
** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*                                                                  0685
*   DCL                                                            0685
*     CHANO FIXED(31) CONSTANT(1);  /* POSITION OF CHANNEL DATA      */
*   DCL                                                            0686
*     UANO FIXED(31) CONSTANT(2);   /* POSITION OF UNIT DATA         */
*   DCL                                                            0687
*     UCB2321 BIT(8) CONSTANT('05'X);/* 2321                         */
*   DCL                                                            0688
*     ENDUCB BIT(16) CONSTANT('FFFF'X);/* END UCB ADDR TABLE         */
*   DCL                                                            0689
*     DEBID BIT(8) CONSTANT('0F'X); /* DEB ID                        */
*   DCL                                                            0690
*     CCWCC BIT(8) CONSTANT('04'X); /* COMMAND CODE FOR SENSE        */
*   DCL                                                            0691
*     CCWFG BIT(8) CONSTANT('20'X); /* CCW FLAG                      */
*   DCL                                                            0692
*     CCWCT FIXED(15) CONSTANT(18); /* CCW BYTE COUNT                */
*   DCL                                                            0693
*     MASKSPNO BIT(8) CONSTANT('0F'X);/* TO GET SPINDLE NUMBER       */
*   DCL                                                            0694
*     MASKCHA BIT(8) CONSTANT('0F'X);/* TO GET CHANNEL ADDR          */
*   DCL                                                            0695
*     SPDLNO FIXED(31) CONSTANT(4); /* STRING POSITION OF SPINDLE  0695
*                                      INFORMATION                   */
*   DCL                                                            0696
*     EXSCL BIT(8) CONSTANT('04'X); /* DEB EXTENT SCALE              */
*   DCL                                                            0697
*     DVMOD BIT(8) CONSTANT('C0'X); /* DEVICE MODIFICATION MASK      */
*   DCL                                                            0698
*     UCBADDR PTR(16) BASED(R3);    /* MAP UCB ADDR TABLE            */
*   DCL                                                            0699
*     LSPACE1 CHAR(10) BASED(ADDR(SMF69NDS));/* MAP LSPACE INFO      */
*   DCL                                                            0700
*     LSPACE2 CHAR(10) BASED(CCASMFPT);/* LSPACE INFO                */
*                                                                  0700
*   /*****************************************************************/
*   /*                                                               */
*   /* MAPPING FOR SMF WORK AREA                             @Y30SSRS*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0701
*   DCL                                                            0701
*     1 SMFWKA BASED(CCAR4REC),     /* SMF WORK AREA TO GET SENSE  0701
*                                      DATA                          */
*      2 SMFECB CHAR(4),            /* ECB                           */
*      2 SMFUCB PTR(16),            /* UCB ADDR                      */
*      2 SMFSENSE,                  /* SENSE DATA                    */
*       3 * CHAR(4),                /* RESERVED                      */
*       3 SMFSPDL CHAR(1),          /* SPINDLE NUMBER                */
*       3 * CHAR(12),               /* RESERVED                      */
*       3 SMFSPDL1 CHAR(1),         /* SPINDLE NUMBER-3330           */
*      2 SMFIOB CHAR(40),           /* IOB                           */
*      2 SMFDEB CHAR(48),           /* DEB                           */
*      2 SMFDCB CHAR(48),           /* DCB                           */
*      2 SMFCCW,                    /* CCW                           */
*       3 SMFCCWDA PTR(31),         /* DATA ADDRESS                  */
*        4 SMFCCWCC BIT(8),         /* COMMAND CODE                  */
*        4 * CHAR(3),               /* RESERVED                      */
*       3 SMFCCWFG BIT(8),          /* CCW FLAGS                     */
*       3 * BIT(8),                 /* RESERVED                      */
*       3 SMFCCWCT FIXED(15);       /* CCW BYTE COUNT                */
*   RFY                                                            0702
*     SMFRCD69 BASED(CCASMFRD);     /* SMF RECORD AREA BASE          */
*   IF CVTSMCA=0×SMCAVOL=OFF×       /* IF NO SMF OR NO DATA SET      */
*       SMCAUSER=OFF THEN                                          0703
         L     @10,CVTPTR                                          0703
         L     @10,CVTSMCA(,@10)                                   0703
         LTR   @10,@10                                             0703
         BZ    @RT00703                                            0703
         TM    SMCAVOL(@10),B'00001000'                            0703
         BZ    @RT00703                                            0703
         TM    SMCAUSER(@10),B'10000000'                           0703
         BZ    @RT00703                                            0703
*     ;                             /* ACCOUNTING OR NO SMF DATA DONT
*                                      PROCESS SMF                   */
*   ELSE                            /* WRITE SMF RECORD 69           */
*     DO;                           /* WRITE SMF                     */
*       IF CCASMFBR=ON THEN         /* IF BASE RECORD MUST BE READ   */
         TM    CCASMFBR(R11),B'00010000'                           0706
         BNO   @RF00706                                            0706
*         DO;                       /* READ VOLUME BASE RECORD       */
*           CCAURAB=ADDR(CCARAB1);  /* SET RAB ADDR                  */
         LA    @10,CCARAB1(,R11)                                   0708
         ST    @10,CCAURAB(,R11)                                   0708
*           DO;                                                    0709
*             CCAF1KEY=OFF;         /* GET BY CI NO.                 */
*             CCAF1KGE=OFF;         /* NOT GET NEXT                  */
*             CCAF1UP=OFF;          /* NOT GET UPD                   */
*                                                                  0712
         NI    CCAF1KEY(R11),B'11100101'                           0712
*             /*******************************************************/
*             /*                                                     */
*             /* CALL TO MODULE IGG0CLBI                             */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0713
*Z061GET:                                                          0713
*             CALL IGGPGET;         /* GET RECORD                    */
Z061GET  L     @15,@CV00036                                        0713
         BALR  @14,@15                                             0713
*           END;                    /* READ RECORD                   */
*         END;                      /* END READ                      */
*       ELSE                                                       0716
*         ;                         /* NO READ NECESSARY             */
@RF00706 DS    0H                                                  0717
*       IF CCACD1^=RCS THEN                                        0717
         CLI   CCACD1(R11),0                                       0717
         BNE   @RT00717                                            0717
*         ;                         /* CHECK FOR ERROR               */
*       ELSE                        /* NO ERROR                      */
*         DO;                       /* SMF WRITE                     */
*           CCASMFRD=CCAR5REC;      /* SMF RECORD AREA BASE          */
         L     @10,CCAR5REC(,R11)                                  0720
         ST    @10,CCASMFRD(,R11)                                  0720
*           IF CCASMFPT^=0 THEN     /* IF LSPACE INFO PASSED         */
         L     @05,CCASMFPT(,R11)                                  0721
         LTR   @05,@05                                             0721
         BZ    @RF00721                                            0721
*             LSPACE1=LSPACE2;      /* SET INFO INTO RECORD          */
         MVC   LSPACE1+46(10,@10),LSPACE2(@05)                     0722
*           ELSE                    /* LSPACE INFO NOT PASSED        */
*             DO;                   /* GET INFO                      */
*                                                                  0723
         B     @RC00721                                            0723
@RF00721 DS    0H                                                  0724
*               /*****************************************************/
*               /*                                                   */
*               /* CALL TO MODULE IGG0CLBK                           */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0724
*Z062LDCS:                                                         0724
*               CALL IGGPLDCS;      /* CALL LSPACE FOR INFO          */
Z062LDCS L     @15,@CV00038                                        0724
         BALR  @14,@15                                             0724
*               LSPACE1=LSPACE2;    /* SET INFO INTO RECORD          */
         L     @10,CCASMFRD(,R11)                                  0725
         L     @05,CCASMFPT(,R11)                                  0725
         MVC   LSPACE1+46(10,@10),LSPACE2(@05)                     0725
*             END;                  /* END GET INFO                  */
*           IF CCACD1^=RCS THEN                                    0727
@RC00721 CLI   CCACD1(R11),0                                       0727
         BNE   @RT00727                                            0727
*             ;                     /* CHECK FOR ERROR               */
*           ELSE                    /* NO ERROR                      */
*             DO;                   /* FORMAT LSPACE SMF RECORD      */
*               SMFWKA=SMFWKA&&SMFWKA;/* ZERO SMF WORK AREA          */
         L     @10,CCAR4REC(,R11)                                  0730
         XC    SMFWKA(168,@10),SMFWKA(@10)                         0730
*               SMF69LEN=LENGTH(SMFRCD69);/* LENGTH SMF RECORD       */
         L     @10,CCASMFRD(,R11)                                  0731
         MVC   SMF69LEN(2,@10),@CH00353                            0731
*               SMF69RTY=SMFLSP;    /* LSPACE RECORD TYPE            */
         MVI   SMF69RTY(@10),X'45'                                 0732
*               SMF69CNM=CAXCNAM;   /* CATALOG NAME                  */
         L     @05,CCAACB(,R11)                                    0733
         L     @05,ACBUAPTR(,@05)                                  0733
         MVC   SMF69CNM(44,@10),CAXCNAM(@05)                       0733
*               RFY                                                0734
*                 CATRCD BASED(CCAR1REC);/* MAP VOLUME ENTRY         */
*               SMF69VSR=CNAME(1:LENGTH(SMF69VSR));/* SET VOL SER    */
         L     @05,CCAR1REC(,R11)                                  0735
         MVC   SMF69VSR(6,@10),CNAME(@05)                          0735
*               RFY                                                0736
*                 CATRCD BASED(CCACPE1);/* MAP ORGINAL BASE          */
*               R3=CVTILK2;         /* ADDR UCB ADDR TABLE           */
         L     @10,CVTPTR                                          0737
         L     R3,CVTILK2(,@10)                                    0737
*               SMFUCB=0;           /* INITLZ UCB ADDR               */
         L     @10,CCAR4REC(,R11)                                  0738
         SLR   @05,@05                                             0738
         STH   @05,SMFUCB(,@10)                                    0738
*               DO WHILE(UCBADDR^=ENDUCB);/* SEARCH FOR UCB OF VOLUME*/
         B     @DE00739                                            0739
@DL00739 DS    0H                                                  0740
*                 IF UCBADDR^=0&UCBONLI=ON&/* IF NON-ZERO UCB ADDR,  */
*                     UCBTBYT4^=UCB2321&UCB3DACC=ON&/* WHERE ON-LINE,
*                                      NOT                           */
*                     UCBVOLI=SMF69VSR THEN/* 2321, DIRECT ACCESS, 0740
*                                      AND EQUAL VOLUME SERIALS      */
         LH    @10,UCBADDR(,R3)                                    0740
         N     @10,@CF04612                                        0740
         LTR   @10,@10                                             0740
         BZ    @RF00740                                            0740
         TM    UCBONLI(@10),B'10000000'                            0740
         BNO   @RF00740                                            0740
         CLI   UCBTBYT4(@10),X'05'                                 0740
         BE    @RF00740                                            0740
         TM    UCB3DACC(@10),B'00100000'                           0740
         BNO   @RF00740                                            0740
         L     @05,CCASMFRD(,R11)                                  0740
         CLC   UCBVOLI(6,@10),SMF69VSR(@05)                        0740
         BNE   @RF00740                                            0740
*                   DO;             /* SAVE UCB ADDR                 */
*                     SMFUCB=UCBADDR;/* SAVE IT                      */
         L     @05,CCAR4REC(,R11)                                  0742
         STH   @10,SMFUCB(,@05)                                    0742
*                   END;            /* END SAVE                      */
*                 ELSE                                             0744
*                   ;               /* NOT CORRECT UNIT ADDR         */
@RF00740 DS    0H                                                  0745
*                 R3=R3+LENGTH(UCBADDR);/* GET NEXT UCB ADDR         */
         AL    R3,@CF00059                                         0745
*               END;                /* END SEARCH                    */
@DE00739 CLC   UCBADDR(2,R3),@CH04499                              0746
         BNE   @DL00739                                            0746
*               SMFSPDL=0;          /* INITLZ SPINDLE ID             */
         L     @10,CCAR4REC(,R11)                                  0747
         MVI   SMFSPDL(@10),X'00'                                  0747
*               IF SMFUCB=0 THEN    /* IF UCB ADDR NOT FOUND         */
         LH    @10,SMFUCB(,@10)                                    0748
         N     @10,@CF04612                                        0748
         LTR   @10,@10                                             0748
         BNZ   @RF00748                                            0748
*                 CCACD1=RCNMNTD;   /* SET USER VOLUME NOT MOUNTED 0749
*                                      ERROR CODE                    */
         MVI   CCACD1(R11),X'48'                                   0749
*               ELSE                /* UNIT FOUND                    */
*                 DO;               /* GET SENSE DATA                */
         B     @RC00748                                            0750
@RF00748 DS    0H                                                  0751
*                   RFY                                            0751
*                     UCBOB BASED(SMFUCB);/* MAP LSPACE UCB          */
*                   DCBDEBAD=ADDR(DEBBASIC);/* DCB POINTS TO DEB     */
         L     @10,CCAR4REC(,R11)                                  0752
         LA    @05,64                                              0752
         ALR   @05,@10                                             0752
         ST    @05,DCBDEBAD+152(,@10)                              0752
*                   DEBTCBB=CCATCB; /* SET TCB ADDRESS               */
         MVC   DEBTCBB(3,@05),CCATCB+1(R11)                        0753
*                   DEBAPPAD=CVTXAPG;/* VECTOR TABLE ADDR            */
         L     @01,CVTPTR                                          0754
         L     @15,CVTXAPG(,@01)                                   0754
         ST    @15,DEBAPPAD(,@05)                                  0754
*                   DEBEXSCL=EXSCL; /* EXTENT SCALE                  */
         MVI   DEBEXSCL(@05),X'04'                                 0755
*                   DEBNMEXT=1;     /* NO. OF EXTENTS                */
         MVI   DEBNMEXT(@05),X'01'                                 0756
*                   DEBDCBB=ADDR(IHADCB);/* DEB POINTS TO DCB        */
         LA    @15,112                                             0757
         ALR   @15,@10                                             0757
         STCM  @15,7,DEBDCBB(@05)                                  0757
*                   DEBDEBID=DEBID; /* DEB ID                        */
         MVI   DEBDEBID(@05),X'0F'                                 0758
*                   DEBUCBA=SMFUCB; /* UCB ADDR                      */
         LA    @05,96                                              0759
         ALR   @05,@10                                             0759
         LH    @14,SMFUCB(,@10)                                    0759
         N     @14,@CF04612                                        0759
         STCM  @14,7,DEBUCBA(@05)                                  0759
*                   DEBDVMOD=DVMOD; /* DEVICE MODIFICATION MASK      */
         MVI   DEBDVMOD(@05),X'C0'                                 0760
*                   IOBUNREL=ON;    /* NON-SEQUENTIAL                */
         LA    @05,24                                              0761
         ALR   @05,@10                                             0761
         OI    IOBUNREL(@05),B'00000010'                           0761
*                   IOBDCBPT=ADDR(IHADCB);/* IOB POINTS TO DCB       */
         ST    @15,IOBDCBPT(,@05)                                  0762
*                   IOBECBPT=ADDR(SMFECB);/* IOB POINTS TO ECB       */
         ST    @10,IOBECBPT(,@05)                                  0763
*                   IOBSTART=ADDR(SMFCCW);/* IOB POINTS TO FIRST CCW */
         LA    @15,SMFCCW(,@10)                                    0764
         ST    @15,IOBSTART(,@05)                                  0764
*                   SMFCCWDA=ADDR(SMFSENSE);/* SENSE DATA AREA       */
         LA    @05,SMFSENSE(,@10)                                  0765
         ST    @05,SMFCCWDA(,@10)                                  0765
*                   SMFCCWCC=CCWCC; /* COMMAND CODE FOR SENSE        */
         MVI   SMFCCWCC(@10),X'04'                                 0766
*                   SMFCCWFG=CCWFG; /* CCW FLAG                      */
         MVI   SMFCCWFG(@10),X'20'                                 0767
*                   SMFCCWCT=CCWCT; /* CCW BYTE COUNT                */
         MVC   SMFCCWCT(2,@10),@CH00452                            0768
*                   RFY                                            0769
*                     R1 RSTD;      /* EXCP REG                      */
*                   R1=ADDR(SMFIOB);/* IOB ADDR                      */
         LA    R1,SMFIOB(,@10)                                     0770
*                   R2=ADDR(SMFECB);/* ECB ADDR                      */
         LR    R2,@10                                              0771
*                   GEN(EXCP (R1)); /* GET SENSE DATA                */
         EXCP (R1)
*                   GEN(WAIT ECB=(R2));/* WAIT                       */
         WAIT ECB=(R2)
*                   RFY                                            0774
*                     R1 UNRSTD;    /* FREE REG                      */
*                   SMFSPDL=SMFSPDL&MASKSPNO;/* GET CORREXT BITS     */
         L     @10,CCAR4REC(,R11)                                  0775
         NI    SMFSPDL(@10),X'0F'                                  0775
*                 END;              /* END GET SENSE DATA            */
*               SMF69CUM=0;         /* INITLZ CHANNEL UNIT FIELD     */
@RC00748 SLR   @10,@10                                             0777
         L     @05,CCASMFRD(,R11)                                  0777
         STCM  @10,15,SMF69CUM(@05)                                0777
*               SMF69CUM(CHANO)=UCBCHA&MASKCHA;/* SET CHANNEL ID     */
         L     @15,CCAR4REC(,R11)                                  0778
         LH    @14,SMFUCB(,@15)                                    0778
         N     @14,@CF04612                                        0778
         LA    @09,15                                              0778
         SLR   @08,@08                                             0778
         IC    @08,UCBCHA(,@14)                                    0778
         NR    @09,@08                                             0778
         STC   @09,SMF69CUM(,@05)                                  0778
*               SMF69CUM(UANO)=UCBUA;/* SET UNIT ID                  */
         IC    @09,UCBUA(,@14)                                     0779
         STC   @09,SMF69CUM+1(,@05)                                0779
*               SMF69CUM(SPDLNO)=SMFSPDL;/* SET SPINDLE DATA         */
         MVC   SMF69CUM+3(1,@05),SMFSPDL(@15)                      0780
*               CCASMFLN=0;         /* DONT FREE CORE                */
         STH   @10,CCASMFLN(,R11)                                  0781
*Z063SMFC:                                                         0782
*               CALL IGGPSMFC;      /* CREATE COMMON PORTION OF SMF
*                                      RECORD AND WRITE IT           */
Z063SMFC BAL   @14,IGGPSMFC                                        0782
*             END;                  /* END FORMAT                    */
*           IF CCACD1^=RCS THEN     /* IF ERROR              @Y30SSRS*/
@RT00727 CLI   CCACD1(R11),0                                       0784
         BE    @RF00784                                            0784
*             CCASMFP=IGGSEGID+CCACD1*K256+RCSMFER;/* SET ERR      0785
*                                                            @Y30SSRS*/
         SLR   @10,@10                                             0785
         IC    @10,CCACD1(,R11)                                    0785
         SLA   @10,8                                               0785
         AL    @10,@CF04584                                        0785
         ST    @10,CCASMFP(,R11)                                   0785
*           ELSE                    /* NO ERROR              @Y30SSRS*/
*             CCASMFP=0;            /* ZERO ERR FIELD        @Y30SSRS*/
*                                                                  0786
         B     @RC00784                                            0786
@RF00784 SLR   @10,@10                                             0786
         ST    @10,CCASMFP(,R11)                                   0786
*           /*********************************************************/
*           /*                                                       */
*           /* CLEAR CCAMODID, CCAREASN, AND CCARETRN                */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0787
*           CCAPROB=IGNOREIT;       /* NO ERR CODE RET       @Y30SSRS*/
@RC00784 SLR   @10,@10                                             0787
         ST    @10,CCAPROB(,R11)                                   0787
*         END;                      /* END SMF WRITE                 */
*     END;                          /* END WRITE SMF                 */
@RT00717 DS    0H                                                  0790
*   CALL EXIT;                      /* RETURN TO CALLER              */
@RT00703 BAL   @14,EXIT                                            0790
*   GEN(DS 0F);                     /* FULLWORD BOUNDARY ALIGNMENT   */
         DS 0F
*   GEN(DC CL8'IGGPSMFR');          /* NAME OF FOLLOWING PROCEDURE   */
         DC CL8'IGGPSMFR'
*   END;                            /* END OF INNER PROCEDURE        */
@EL00009 DS    0H                                                  0793
@EF00009 DS    0H                                                  0793
@ER00009 BR    @14                                                 0793
@PB00009 DS    0H                                                  0794
*   GEN(EJECT);                     /* GO TO A NEW PRINT PAGE        */
         EJECT
*                                                                  0795
*/********************************************************************/
*/*                                                                  */
*/*        IGGPSMFR  -  PROCEDURE  EXTERNALLY  CALLED  NESTED        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0795
*IGGPSMFR:                                                         0795
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);/* SPECIFY PROCEDURE OPTIONS     */
         B     @PB00010                                            0795
IGGPSMFR DS    0H                                                  0796
*   GEN(ENTRY IGGPSMFR );           /* IDENTIFY ENTRY-POINT SYMBOL   */
         ENTRY IGGPSMFR
*Z065:                              /* LABEL FOR PROCEDURE TRACKING  */
*Z065SMFR:                          /* LABEL FOR PROCEDURE TRACKING  */
*   RFY                                                            0797
*    (R5,                                                          0797
*     R6,                                                          0797
*     R7,                                                          0797
*     R8,                                                          0797
*     R9,                                                          0797
*     R10) UNRSTD;                  /* PL/S COMPILER WORK REGISTERS  */
Z065     DS    0H                                                  0797
Z065SMFR DS    0H                                                  0798
*   RFY                                                            0798
*    (R2,                                                          0798
*     R3,                                                          0798
*     R4) RSTD;                     /* RESTRICT LOCAL WORK REGISTERS */
*   GEN(STM 12,14,12(13));          /* SAVE REGISTERS OF CALLER      */
         STM 12,14,12(13)
*   GEN(LA 13,12(13));              /* POINT TO NEXT SAVE AREA       */
         LA 13,12(13)
*   GEN(BALR 12,0);                 /* ESTABLISH ADDRESSABILITY      */
         BALR 12,0
*   GEN(LA 15,*-IGGSEGST(0,0));     /* COMPUTE MODULE BASE           */
         LA 15,*-IGGSEGST(0,0)
*   GEN(SR 12,15);                  /* SET BASE TO MODULE BASE       */
         SR 12,15
*/* PROCEDURE                                                        */
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**   MODULE NAME =  IGGPSMFR (IGG0CLBV)                               *
**                                                                    *
**   DESCRIPTIVE NAME =  WRITE SMF RENAME RECORD 68                   *
**                                                                    *
**   FUNCTION =                                                       *
**      THIS SUB-FUNCTION WRITES SMF RECORD 68 WHENEVER A CATALOG     *
**      OBJECT IS RENAMED VIA THE CMS ALTER FUNCTION.  THE PROCESSING *
**      IS AS FOLLOWS:                                                *
**      1. CHECK THAT SMF IS ACTIVE WITHIN THE SYSTEM AND DATA SET    *
**         ACCOUNTING IS DESIRED.                                     *
**      2. INITIALIZE THE FIELDS UNIQUE TO THIS SMF RECORD.           *
**      3. CALL IGGPSMFC TO INITIALIZE THE COMMON SMF FIELDS AND TO   *
**         INVOKE THE SMF SVC.                                        *
**      NOTE: THE SMF RECORD 68 IS BUILT IN RECORD AREA 5.            *
**                                                                    *
**   INPUT =                                                          *
**      IGGCCA INPUT:                                                 *
**         CCACPL - ADDR OF CALLER CPL CONTAINING POINTERS TO OLD     *
**                  AND NEW NAMES.                                    *
**         CVTSMCA,SMCAUSER,SMCADSA - SMF PROCESSING INDICATORS.      *
**                                                                    *
**   OUTPUT =                                                         *
**      SMF RECORD 68 WRITTEN:                                        *
**      IGGCCA OUTPUT:                                                *
**         CCA RECORD AREA 5 VOLATILE.                                *
**                                                                    *
**                                                                    *
** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*                                                                  0804
*   IF CVTSMCA=0×SMCADSA=OFF×       /* IF NO SMF OR NO DATA SET      */
*       SMCAUSER=OFF THEN                                          0804
         L     @10,CVTPTR                                          0804
         L     @10,CVTSMCA(,@10)                                   0804
         LTR   @10,@10                                             0804
         BZ    @RT00804                                            0804
         TM    SMCADSA(@10),B'00010000'                            0804
         BZ    @RT00804                                            0804
         TM    SMCAUSER(@10),B'10000000'                           0804
         BZ    @RT00804                                            0804
*     ;                             /* ACCOUNTING OR NO SMF DATA DONT
*                                      PROCESS SMF DONT WRITE SMF    */
*   ELSE                            /* WRITE SMF RECORD 68           */
*     DO;                           /* WRITE SMF                     */
*       CCASMFLN=0;                 /* CORE LENGTH TO BE FREED       */
         SLR   @10,@10                                             0807
         STH   @10,CCASMFLN(,R11)                                  0807
*       CCASMFRD=CCAR5REC;          /* AREA FOR SMF RECORD BUILD     */
         L     @10,CCAR5REC(,R11)                                  0808
         ST    @10,CCASMFRD(,R11)                                  0808
*       RFY                                                        0809
*         SMFRCD68 BASED(CCASMFRD); /* MAP SMF RECORD                */
*       SMF68RTY=SMFREN;            /* RENAME RECORD TYPE            */
         MVI   SMF68RTY(@10),X'44'                                 0810
*       SMF68LEN=LENGTH(SMFRCD68);  /* SMF RCD LENGTH                */
         MVC   SMF68LEN(2,@10),@CH04590                            0811
*       SMF68CNM=CAXCNAM;           /* INITLZ CATALOG NAME           */
         L     @05,CCAACB(,R11)                                    0812
         L     @05,ACBUAPTR(,@05)                                  0812
         MVC   SMF68CNM(44,@10),CAXCNAM(@05)                       0812
*       RFY                                                        0813
*         DSNAME BASED(CTGFVENT);   /* MAP OLD DATA SET NAME         */
*       SMF68ONM=DSNAME;            /* INITLZ DATA SET NAME-OLD      */
         L     @05,CCACPL(,R11)                                    0814
         L     @01,CTGFVT(,@05)                                    0814
         L     @01,CTGFVENT(,@01)                                  0814
         MVC   SMF68ONM(44,@10),DSNAME(@01)                        0814
*       SMF68NNM=DSNAME1;           /* INITLZ NEW DATA SET NAME      */
         L     @05,CTGNEWNM(,@05)                                  0815
         MVC   SMF68NNM(44,@10),DSNAME1(@05)                       0815
*Z066SMFC:                                                         0816
*       CALL IGGPSMFC;              /* FORMAT COMMON PORTION SMF   0816
*                                      RECORD, WRITE IT              */
Z066SMFC BAL   @14,IGGPSMFC                                        0816
*       CCASMFP=0;                  /* NO SMF ERROR          @Y30SSRS*/
*                                                                  0817
         SLR   @10,@10                                             0817
         ST    @10,CCASMFP(,R11)                                   0817
*       /*************************************************************/
*       /*                                                           */
*       /* CLEAR CCAMODID, CCAREASN, AND CCARETRN                    */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0818
*       CCAPROB=IGNOREIT;           /* ZERO ERR CODE         @Y30SSRS*/
         ST    @10,CCAPROB(,R11)                                   0818
*     END;                          /* END WRITE                     */
*   CALL EXIT;                      /* RETURN TO CALLER              */
@RT00804 BAL   @14,EXIT                                            0820
*   GEN(DS 0F);                     /* FULLWORD BOUNDARY ALIGNMENT   */
         DS 0F
*   GEN(DC CL8'IGGPSMFC');          /* NAME OF FOLLOWING PROCEDURE   */
         DC CL8'IGGPSMFC'
*   END;                            /* END OF INNER PROCEDURE        */
@EL00010 DS    0H                                                  0823
@EF00010 DS    0H                                                  0823
@ER00010 BR    @14                                                 0823
@PB00010 DS    0H                                                  0824
*   GEN(EJECT);                     /* GO TO A NEW PRINT PAGE        */
         EJECT
*                                                                  0825
*/********************************************************************/
*/*                                                                  */
*/*        IGGPSMFC  -  PROCEDURE  INTERNALLY  CALLED  NESTED        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0825
*IGGPSMFC:                                                         0825
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);/* SPECIFY PROCEDURE OPTIONS     */
         B     @PB00011                                            0825
IGGPSMFC DS    0H                                                  0826
*Z068:                              /* LABEL FOR PROCEDURE TRACKING  */
*Z068SMFC:                          /* LABEL FOR PROCEDURE TRACKING  */
*   RFY                                                            0826
*    (R5,                                                          0826
*     R6,                                                          0826
*     R7,                                                          0826
*     R8,                                                          0826
*     R9,                                                          0826
*     R10) UNRSTD;                  /* PL/S COMPILER WORK REGISTERS  */
Z068     DS    0H                                                  0826
Z068SMFC DS    0H                                                  0827
*   RFY                                                            0827
*    (R2,                                                          0827
*     R3,                                                          0827
*     R4) RSTD;                     /* RESTRICT LOCAL WORK REGISTERS */
*   GEN(STM 12,14,12(13));          /* SAVE REGISTERS OF CALLER      */
         STM 12,14,12(13)
*   GEN(LA 13,12(13));              /* POINT TO NEXT SAVE AREA     0829
*                                      PROCEDURE                     */
         LA 13,12(13)
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**   MODULE NAME =  IGGPSMFC (IGG0CLBV)                               *
**                                                                    *
**   DESCRIPTIVE NAME =  BUILD AND WRITE COMMON SMF RECORD            *
**                                                                    *
**   FUNCTION =                                                       *
**      THIS SUB-FUNCTION FORMATS THE COMMON PORTIONS OF SMF RECORDS  *
**      63,67,68, AND 69. INVOKES THE SMF SVC TO WRITE THE SMF        *
**      RECORD. AND FREES ANY SMF RECORD CORE OBTAINED IN THIS        *
**      MODULE.                                                       *
**                                                                    *
**   INPUT =                                                          *
**      IGGCCA INPUT:                                                 *
**         CCASMFRD - ADDRESS OF SMF RECORD TO BE WRITTEN             *
**         CCASMFLN - LENGTH OF SMF RECORD CORE TO BE FREED. MAY BE   *
**                    ZERO.                                           *
**                                                                    *
**   OUTPUT =                                                         *
**      SMF RECORD WRITTEN                                            *
**      SMF RECORD CORE FREED                                         *
**                                                                    *
**                                                                    *
** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*                                                                  0830
*   DCL                                                            0830
*     JM1JOB CHAR(8) BASED(ADDR(JMRJOB));/* MAP JOB NAME             */
*   DCL                                                            0831
*     JM1USEID CHAR(8) BASED(ADDR(JMRUSEID));/* MAP USER ID          */
*   DO;                             /* CREATE COMMON FIELDS          */
*     RFY                                                          0833
*       SMFRCD63 BASED(CCASMFRD);   /* USE THIS DECLARE TO MAP COMMON
*                                      PORTION OF SMF RCD            */
*     SMF63SEG=0;                   /* ZERO RCD SPAN INDICATOR       */
         SLR   @10,@10                                             0834
         L     @05,CCASMFRD(,R11)                                  0834
         STH   @10,SMF63SEG(,@05)                                  0834
*     SMF63SYS=0;                   /* CLEAR SYSTEM IND      @VS06444*/
         MVI   SMF63SYS(@05),X'00'                                 0835
*     IF TCBTCT^=0&TCTJMR^=0 THEN   /* IF JOB MGMT RCD EXISTS        */
         L     @01,CVTPTR                                          0836
         L     @01,CVTTCBP(,@01)                                   0836
         L     @01,TCBPTR(,@01)                                    0836
         L     @15,TCBTCT(,@01)                                    0836
         CR    @15,@10                                             0836
         BE    @RF00836                                            0836
         L     @15,TCTJMR(,@15)                                    0836
         CR    @15,@10                                             0836
         BE    @RF00836                                            0836
*       DO;                         /* SET INFO FROM JMR             */
*         SMF63JNM=JM1JOB;          /* JOB NAME                      */
         MVC   SMF63JNM(8,@05),JM1JOB(@15)                         0838
*         SMF63RST=JMRENTRY;        /* READER START TIME             */
         LR    @10,@15                                             0839
         SL    @10,@CF00061                                        0839
         MVC   SMF63RST(4,@05),JMRENTRY(@10)                       0839
*         SMF63RDT=JMREDATE;        /* READER START DATE             */
         MVC   SMF63RDT(4,@05),JMREDATE(@10)                       0840
*         SMF63UID=JM1USEID;        /* USER ID                       */
         MVC   SMF63UID(8,@05),JM1USEID+20(@15)                    0841
*       END;                        /* END SET                       */
*     ELSE                          /* JOB MGMT RCD NOT EXIST        */
*       DO;                         /* DEFAULT VALUES SET            */
         B     @RC00836                                            0843
@RF00836 DS    0H                                                  0844
*         SMF63JNM=BLANKS;          /* JOB NAME                      */
         L     @10,CCASMFRD(,R11)                                  0844
         MVC   SMF63JNM(8,@10),@CC00062                            0844
*         SMF63RST=0;               /* READER START TIME             */
         SLR   @05,@05                                             0845
         STCM  @05,15,SMF63RST(@10)                                0845
*         SMF63RDT=0;               /* READER START DATE             */
         STCM  @05,15,SMF63RDT(@10)                                0846
*         SMF63UID=BLANKS;          /* USER ID                       */
         MVC   SMF63UID(8,@10),@CC00062                            0847
*       END;                        /* END DEFAULT                   */
*     R2=CCASMFRD;                  /* SET UP TO WRITE SMF RECORD    */
@RC00836 L     R2,CCASMFRD(,R11)                                   0849
*     GEN(SMFWTM (R2));             /* WRITE SMF                     */
         SMFWTM (R2)
*     IF CCASMFLN^=0 THEN           /* CHECK IF CORE GOTTEN          */
         LH    @10,CCASMFLN(,R11)                                  0851
         LTR   @10,@10                                             0851
         BZ    @RF00851                                            0851
*       DO;                         /* FREE IT                       */
*         CCAMNLEN=CCASMFLN;        /* CORE LENGTH TO BE FREED       */
         STCM  @10,7,CCAMNLEN(R11)                                 0853
*         CCAMNADR=CCASMFRD;        /* CORE ADDRESS                  */
         L     @10,CCASMFRD(,R11)                                  0854
         ST    @10,CCAMNADR(,R11)                                  0854
*         RFY                                                      0855
*           R1 RSTD;                /* USE THIS REG IN FREEMAIN      */
*         R1=ADDR(CCAMSSPL);        /* POINT TO STRG MGMT P.L.       */
         LA    R1,CCAMSSPL(,R11)                                   0856
*         CCAMNSPL=USUBPOOL;        /* STORE SUBPOOL VALUE           */
         MVI   CCAMNSPL(R11),X'FC'                                 0857
*         DO;                                                      0858
*           IF MNATFULL=ON THEN     /* TRACKING TABLE FULL           */
*                                                                  0859
         TM    MNATFULL(R11),B'10000000'                           0859
         BNO   @RF00859                                            0859
*             /*******************************************************/
*             /*                                                     */
*             /* CALL TO MODULE IGG0CLAT                             */
*             /*                                                     */
*             /*******************************************************/
*                                                                  0860
*Z071ARFS:                                                         0860
*             CALL IGGPARFS;        /* YES,CALL SPILL ROUTINE        */
Z071ARFS L     @15,@CV00037                                        0860
         BALR  @14,@15                                             0860
*           GEN REFS(CCAMNAT)(MVC CCAMNAT(248,11),CCAMNAT+8(11));/*
*                                      PUSH AND TRACK                */
@RF00859 DS    0H                                                  0861
         MVC CCAMNAT(248,11),CCAMNAT+8(11)
*         END;                                                     0862
*                                                                  0862
*         /***********************************************************/
*         /*                                                         */
*         /* RELEASE MAIN STORAGE FROM USER SUBPOOL 252              */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0863
*         GEN(FREEMAIN L,MF=(E,(1))) ;/* FREE CORE                   */
         FREEMAIN L,MF=(E,(1))
*         RFY                                                      0864
*           R1 UNRSTD;              /* FREE REG                      */
*       END;                        /* END FREE IT                   */
*     ELSE                                                         0866
*       ;                           /* NO CORE GOTTEN                */
@RF00851 DS    0H                                                  0867
*     CCASMFRD=0;                   /* CLEAR FOR REUSE               */
         SLR   @10,@10                                             0867
         ST    @10,CCASMFRD(,R11)                                  0867
*   END;                            /* END CREATE COMMON FIELDS      */
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0869
*   GEN(DS 0F);                     /* FULLWORD BOUNDARY ALIGNMENT   */
         DS 0F
*   GEN(DC CL8'IGGPSMFZ');          /* NAME OF FOLLOWING PROCEDURE   */
         DC CL8'IGGPSMFZ'
*   END;                            /* END OF INNER PROCEDURE        */
@EL00011 DS    0H                                                  0872
@EF00011 DS    0H                                                  0872
@ER00011 BR    @14                                                 0872
@PB00011 DS    0H                                                  0873
*   GEN(EJECT);                     /* GO TO A NEW PRINT PAGE        */
         EJECT
*                                                                  0874
*/********************************************************************/
*/*                                                                  */
*/*        IGGPSMFZ  -  PROCEDURE  EXTERNALLY  CALLED  NESTED        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0874
*IGGPSMFZ:                                                         0874
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);/* SPECIFY PROCEDURE OPTIONS     */
         B     @PB00012                                            0874
IGGPSMFZ DS    0H                                                  0875
*   GEN(ENTRY IGGPSMFZ );           /* IDENTIFY ENTRY-POINT SYMBOL   */
         ENTRY IGGPSMFZ
*Z072:                              /* LABEL FOR PROCEDURE TRACKING  */
*Z072SMFZ:                          /* LABEL FOR PROCEDURE TRACKING  */
*   RFY                                                            0876
*    (R5,                                                          0876
*     R6,                                                          0876
*     R7,                                                          0876
*     R8,                                                          0876
*     R9,                                                          0876
*     R10) UNRSTD;                  /* PL/S COMPILER WORK REGISTERS  */
Z072     DS    0H                                                  0876
Z072SMFZ DS    0H                                                  0877
*   RFY                                                            0877
*    (R2,                                                          0877
*     R3,                                                          0877
*     R4) RSTD;                     /* RESTRICT LOCAL WORK REGISTERS */
*   GEN(STM 12,14,12(13));          /* SAVE REGISTERS OF CALLER      */
         STM 12,14,12(13)
*   GEN(LA 13,12(13));              /* POINT TO NEXT SAVE AREA       */
         LA 13,12(13)
*   GEN(BALR 12,0);                 /* ESTABLISH ADDRESSABILITY      */
         BALR 12,0
*   GEN(LA 15,*-IGGSEGST(0,0));     /* COMPUTE MODULE BASE           */
         LA 15,*-IGGSEGST(0,0)
*   GEN(SR 12,15);                  /* SET BASE TO MODULE BASE     0882
*                                      PROCEDURE                     */
         SR 12,15
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
**   MODULE NAME =  IGGPSMFZ (IGG0CLBV)                               *
**                                                                    *
**   DESCRIPTIVE NAME =  ZERO SECURITY INFORMATION                    *
**                                                                    *
**   FUNCTION =                                                       *
**      THIS SUB-FUNCTION SCANS THE GOP'S IN THE CATALOG RECORD       *
**      SPECIFIED BY REGISTER 1 FOR A SECURITY GROUP OCCURRENCE. IF   *
**      ONE IS FOUND THE SECURITY INFORMATION IS ZEROED.              *
**                                                                    *
**   INPUT =                                                          *
**      R1 = ADDRESS OF THE CATALOG RECORD TO BE EXAMINED.            *
**   OUTPUT =                                                         *
**      SECURITY INFORMATION CLEARED.                                 *
**                                                                    *
**                                                                    *
** * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
*                                                                  0883
*   RFY                                                            0883
*    (R1,                                                          0883
*     R6,                                                          0883
*     R7) RSTD;                     /* WORK REGS                     */
*   RFY                                                            0884
*     CATRCD BASED(R1);             /* MAP CAT RCD                   */
*   RFY                                                            0885
*     REPCNTRL BASED(R6);           /* MAP REPEATING CNTRL INFO      */
*   RFY                                                            0886
*     CATGOPT BASED(R6);            /* MAP GOP                       */
*   RFY                                                            0887
*     CNTRLINF BASED(R6);           /* MAP GROUP OCCURR INFO         */
*   RFY                                                            0888
*     VARFIELD BASED(R7);           /* MAP VARIABLE LENGTH FIELD     */
*   R6=R1+NREPLF;                   /* POINT TO REPEATING CONTROL  0889
*                                      INFORMATION                   */
         LR    R6,R1                                               0889
         SLR   @10,@10                                             0889
         IC    @10,NREPLF(,R1)                                     0889
         ALR   R6,@10                                              0889
*   R7=REPCNT*LENGTH(CATGOPT)+LENGTH(REPCNTRL)+R6;/* POINT TO FIRST
*                                      GROUP OCCUR                   */
         LA    @10,6                                               0890
         SLR   R7,R7                                               0890
         IC    R7,REPCNT(,R6)                                      0890
         MH    R7,@CH00256                                         0890
         ALR   R7,@10                                              0890
         ALR   R7,R6                                               0890
*   R6=R6+LENGTH(REPCNTRL);         /* POINT TO FIRST GOP            */
         ALR   R6,@10                                              0891
*   DO WHILE(R6<R7&R7^=0);          /* SCAN GOP'S FOR GROUP 4        */
         B     @DE00892                                            0892
@DL00892 DS    0H                                                  0893
*     IF CATGOGC1=PSWDGC THEN       /* IF GROUP CODE 4               */
         CLI   CATGOGC1(R6),4                                      0893
         BNE   @RF00893                                            0893
*       DO;                         /* SET UP FOR CLEAR              */
*         R6=R7+CATGODSP;           /* POINT TO PSWD OCCUR           */
         LR    @10,R7                                              0895
         ICM   @05,12,CATGODSP(R6)                                 0895
         SRA   @05,16                                              0895
         ALR   @10,@05                                             0895
         LR    R6,@10                                              0895
*         R7=0;                     /* INDICATE EXIT                 */
         SLR   R7,R7                                               0896
*       END;                        /* END SET UP                    */
*     ELSE                          /* NOT GROUP CODE 4              */
*       R6=R6+LENGTH(CATGOPT);      /* CHECK NEXT GOP                */
         B     @RC00893                                            0898
@RF00893 AL    R6,@CF00256                                         0898
*   END;                            /* END SCAN                      */
@RC00893 DS    0H                                                  0899
@DE00892 CR    R6,R7                                               0899
         BNL   @DC00892                                            0899
         LTR   R7,R7                                               0899
         BNZ   @DL00892                                            0899
@DC00892 DS    0H                                                  0900
*   IF R7^=0 THEN                                                  0900
         LTR   R7,R7                                               0900
         BNZ   @RT00900                                            0900
*     ;                             /* IF GROUP 4 NOT FOUND          */
*   ELSE                            /* GROUP 4 FOUND                 */
*     DO;                           /* ZERO GROUP 4                  */
*       R7=R6+LENFIX;               /* POINT TO VAR FIELD            */
         LR    R7,R6                                               0903
         SLR   @10,@10                                             0903
         IC    @10,LENFIX(,R6)                                     0903
         ALR   R7,@10                                              0903
*       IF CNTVAR^=0 THEN           /* IF VARIABLE FIELDS            */
         CLI   CNTVAR(R6),0                                        0904
         BE    @RF00904                                            0904
*         R7=R7+VARLEN+LENGTH(VARLEN);/* POINT TO END OF OCCURR      */
         LR    @10,R7                                              0905
         ICM   @05,12,VARLEN(R7)                                   0905
         SRA   @05,16                                              0905
         ALR   @10,@05                                             0905
         AL    @10,@CF00059                                        0905
         LR    R7,@10                                              0905
*       ELSE                                                       0906
*         ;                         /* NO VARIABLE FIELDS            */
@RF00904 DS    0H                                                  0907
*       R6=R6+LENGTH(CNTRLINF);     /* POINT TO DATA                 */
         AL    R6,@CF00059                                         0907
*       R7=R7-R6;                   /* GROUP 4 LENGTH                */
         SLR   R7,R6                                               0908
*       RFY                                                        0909
*        (R8,                                                      0909
*         R9) RSTD;                 /* USE THESE REGS TO ZERO        */
*       R9=0;                       /* PAD CHARACTER                 */
         SLR   R9,R9                                               0910
*       GEN(MVCL R6,R8);            /* ZERO SECURITY INFO            */
         MVCL R6,R8
*       RFY                                                        0912
*        (R8,                                                      0912
*         R9) UNRSTD;               /* FREE REGS                     */
*     END;                          /* END ZERO GROUP 4              */
*   RFY                                                            0914
*     CATRCD BASED(CCACPE1);        /* ORGINAL BASE                  */
@RT00900 DS    0H                                                  0915
*   RFY                                                            0915
*     REPCNTRL BASED(CCACPE2);      /* ORGINAL BASE                  */
*   RFY                                                            0916
*     CATGOPT BASED(CCACPE5);       /* ORGINAL BASE                  */
*   RFY                                                            0917
*     CNTRLINF BASED(CCACPE6);      /* ORGINAL BASE                  */
*   RFY                                                            0918
*     VARFIELD BASED(CCACPE7);      /* ORGINAL BASE                  */
*   RFY                                                            0919
*    (R1,                                                          0919
*     R6,                                                          0919
*     R7) UNRSTD;                   /* FREE REGS                     */
*   CALL EXIT;                      /* RETURN TO CALLER              */
         BAL   @14,EXIT                                            0920
*   END;                            /* END OF INNER PROCEDURE        */
@EL00012 DS    0H                                                  0921
@EF00012 DS    0H                                                  0921
@ER00012 BR    @14                                                 0921
@PB00012 DS    0H                                                  0922
*   GEN(EJECT);                     /* GO TO A NEW PRINT PAGE        */
         EJECT
*                                                                  0923
*/********************************************************************/
*/*                                                                  */
*/*         RETURN-TO-CALLER  PROCEDURE-EXITING  SUBFUNCTION         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0923
*EXIT:                                                             0923
*   PROC OPTIONS(NOSAVEAREA,NOSAVE);/* SPECIFY PROCEDURE OPTIONS     */
         B     @PB00013                                            0923
EXIT     DS    0H                                                  0924
*   GEN(LM 12,14,0(13));            /* RESTORE REGISTERS OF CALLER   */
         LM 12,14,0(13)
*   GEN(MVI 12(13),255);            /* MARK END OF PDL               */
         MVI 12(13),255
*   GEN(BR 14);                     /* RETURN TO CALLER              */
         BR 14
*PATCH:                                                            0927
*   GEN(DC (12+((*+139-@MAINENT)/140))A(0));/* PATCH AREA            */
PATCH    DC (12+((*+139-@MAINENT)/140))A(0)
*   END;                            /* END OF EXIT PROCEDURE         */
@EL00013 DS    0H                                                  0928
@EF00013 DS    0H                                                  0928
@ER00013 BR    @14                                                 0928
*   END                             /* END PROCEDURE                 */
*                                                                  0929
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IGGMCDCL)                                       */
*/*%INCLUDE SYSLIB  (IGGMCTRC)                                       */
*/*%INCLUDE SYSLIB  (IGGCCA  )                                       */
*/*%INCLUDE SYSLIB  (IEZCTGPL)                                       */
*/*%INCLUDE SYSLIB  (IEZCTGFL)                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (AMCBS   )                                       */
*/*%INCLUDE SYSLIB  (IGGCAXWA)                                       */
*/*%INCLUDE SYSLIB  (IEZCTGFV)                                       */
*/*%INCLUDE SYSLIB  (IEZCTGWA)                                       */
*/*%INCLUDE SYSLIB  (IEZCTGVL)                                       */
*/*%INCLUDE SYSLIB  (IEZCTGCV)                                       */
*/*%INCLUDE SYSLIB  (IGGMCMDM)                                       */
*/*%INCLUDE SYSLIB  (IEESMCA )                                       */
*/*%INCLUDE SYSLIB  (IEFTCT  )                                       */
*/*%INCLUDE SYSLIB  (IEFJMR  )                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IEZIOB  )                                       */
*/*%INCLUDE SYSLIB  (IEFUCBOB)                                       */
*                                                                  0929
*       ;                                                          0929
@EL00001 DS    0H                                                  0929
@EF00001 DS    0H                                                  0929
@ER00001 BR    @14                                                 0929
@DATA    DS    0H
@CH00452 DC    H'18'
@CH00353 DC    H'106'
@CH00369 DC    H'136'
@CH04590 DC    H'174'
@CH04499 DC    XL2'FFFF'
@SM04595 MVC   SMFRCD1+256(0,@15),CATRCD1+256(@10)
@SM04597 MVC   SMFRCD1+136(0,@10),CATRCD1(@05)
@SM04608 MVC   SMFRCDAR+256(0,@10),RCDAREA+256(@15)
@SM04610 MVC   SMFRCDAR(0,@05),RCDAREA(@10)
@DATD    DSECT
         DS    0F
IGG0CLBV CSECT
         DS    0F
@CF00040 DC    F'1'
@CH00040 EQU   @CF00040+2
@CF00059 DC    F'2'
@CH00059 EQU   @CF00059+2
@CF00256 DC    F'5'
@CH00256 EQU   @CF00256+2
@CF00061 DC    F'8'
@CF04588 DC    F'134'
@CH04588 EQU   @CF04588+2
@CF00078 DC    F'256'
@CF04362 DC    F'257'
@CF04585 DC    F'2184'
@CF04584 DC    F'-1025179416'
@CF04587 DC    F'-1025178972'
@CF04594 DC    F'-4'
@CF04612 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IGG0CLBV CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00036 DC    V(IGGPGET)
@CV00037 DC    V(IGGPARFS)
@CV00038 DC    V(IGGPLDCS)
         DS    0D
@CC00062 DC    C'        '
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
IGGSEGBR EQU   @12
R4       EQU   @04
R3       EQU   @03
RWA      EQU   @02
R1       EQU   @01
R2       EQU   @02
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
R10      EQU   @10
R11      EQU   @11
R12      EQU   @12
RET      EQU   @14
RFLD     EQU   @04
RGO      EQU   @15
RNDX     EQU   @03
RP0      EQU   @00
RP1      EQU   @01
RSAVE    EQU   @13
RWK1     EQU   @06
RWK2     EQU   @07
RWK3     EQU   @08
RWK4     EQU   @09
RZERO    EQU   @00
R0       EQU   @00
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
WKR2     EQU   @02
WKR3     EQU   @03
WKR4     EQU   @04
CVTPTR   EQU   16
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
DCATRCD  EQU   0
SMFRCD1  EQU   0
SMFRCD63 EQU   0
SMF63LEN EQU   SMFRCD63
SMF63SEG EQU   SMFRCD63+2
SMF63SYS EQU   SMFRCD63+4
SMF63RTY EQU   SMFRCD63+5
SMF63CPU EQU   SMFRCD63+14
SMF63JNM EQU   SMFRCD63+18
SMF63RST EQU   SMFRCD63+26
SMF63RDT EQU   SMFRCD63+30
SMF63UID EQU   SMFRCD63+34
SMF63IND EQU   SMFRCD63+42
SMF63PTH EQU   SMF63IND
SMF63AIX EQU   SMF63IND
SMF63DTY EQU   SMFRCD63+43
SMF63CL  EQU   SMF63DTY
SMF63DS  EQU   SMF63DTY
SMF63IDS EQU   SMF63DTY
SMF63CAT EQU   SMF63DTY
SMF63ALN EQU   SMF63DTY
SMF63GDB EQU   SMF63DTY
SMF63ALX EQU   SMF63DTY
SMF63NSZ EQU   SMFRCD63+44
SMF63OSZ EQU   SMFRCD63+46
SMF63CNM EQU   SMFRCD63+48
SMF63DNM EQU   SMFRCD63+92
SMF63NCE EQU   SMFRCD63+136
CATRCD1  EQU   0
DSNAME   EQU   0
DSNAME1  EQU   0
RCDAREA  EQU   0
SMFRCDAR EQU   0
SMFELT   EQU   0
SMFCNTRL EQU   SMFELT+505
SMFLAG   EQU   SMFCNTRL
SMFPRES  EQU   SMFLAG
SMFELTSZ EQU   SMFCNTRL+1
SMFCHAIN EQU   SMFCNTRL+3
SMFRCD67 EQU   0
SMF67LEN EQU   SMFRCD67
SMF67SYS EQU   SMFRCD67+4
SMF67RTY EQU   SMFRCD67+5
SMF67IND EQU   SMFRCD67+42
SMF67DTY EQU   SMFRCD67+43
SMF67CNM EQU   SMFRCD67+44
SMF67DNM EQU   SMFRCD67+88
SMF67ESZ EQU   SMFRCD67+132
SMF67CE  EQU   SMFRCD67+134
SMFRCD68 EQU   0
SMF68LEN EQU   SMFRCD68
SMF68SYS EQU   SMFRCD68+4
SMF68RTY EQU   SMFRCD68+5
SMF68CNM EQU   SMFRCD68+42
SMF68ONM EQU   SMFRCD68+86
SMF68NNM EQU   SMFRCD68+130
SMFRCD69 EQU   0
SMF69LEN EQU   SMFRCD69
SMF69SYS EQU   SMFRCD69+4
SMF69RTY EQU   SMFRCD69+5
SMF69CUM EQU   SMFRCD69+42
SMF69NDS EQU   SMFRCD69+46
SMF69CNM EQU   SMFRCD69+56
SMF69VSR EQU   SMFRCD69+100
IGGCCA   EQU   0
CCAPROB  EQU   IGGCCA+4
CCAERRCD EQU   CCAPROB+2
CCAREASN EQU   CCAERRCD
CCARETRN EQU   CCAERRCD+1
CCACD1   EQU   CCARETRN
CCAFLG1  EQU   IGGCCA+14
CCAF1KEY EQU   CCAFLG1
CCAF1KGE EQU   CCAFLG1
CCAF1UP  EQU   CCAFLG1
CCAFLG2  EQU   IGGCCA+15
CCAF2COB EQU   CCAFLG2
CCAFLG3  EQU   IGGCCA+16
CCAFLG4  EQU   IGGCCA+17
CCAFLG5  EQU   IGGCCA+18
CCAFLG6  EQU   IGGCCA+19
CCATCB   EQU   IGGCCA+20
CCARB    EQU   IGGCCA+24
CCACPL   EQU   IGGCCA+28
CCAACB   EQU   IGGCCA+32
CCAURAB  EQU   IGGCCA+40
CCASRCH  EQU   IGGCCA+44
CCASRID  EQU   CCASRCH
CCARAB0  EQU   IGGCCA+88
CCAR0FLG EQU   CCARAB0
CCAR0SEG EQU   CCARAB0+8
CCARAB1  EQU   IGGCCA+108
CCAR1FLG EQU   CCARAB1
CCAR1REC EQU   CCARAB1+4
CCAR1SEG EQU   CCARAB1+8
CCARAB2  EQU   IGGCCA+128
CCAR2FLG EQU   CCARAB2
CCAR2SEG EQU   CCARAB2+8
CCARAB3  EQU   IGGCCA+148
CCAR3FLG EQU   CCARAB3
CCAR3SEG EQU   CCARAB3+8
CCARAB4  EQU   IGGCCA+168
CCAR4FLG EQU   CCARAB4
CCAR4REC EQU   CCARAB4+4
CCAR4SEG EQU   CCARAB4+8
CCARAB5  EQU   IGGCCA+188
CCAR5FLG EQU   CCARAB5
CCAR5REC EQU   CCARAB5+4
CCAR5SEG EQU   CCARAB5+8
CCATIQRN EQU   IGGCCA+212
CCADESA  EQU   IGGCCA+224
CCAEXTDE EQU   CCADESA+4
CCAEXTAD EQU   CCAEXTDE+2
CCAEQDQ  EQU   IGGCCA+280
CCAEDOPT EQU   CCAEQDQ+2
CCAMSSPL EQU   IGGCCA+300
CCAMNSPL EQU   CCAMSSPL+9
CCACMS   EQU   IGGCCA+316
CCACPE5  EQU   IGGCCA+324
CCACPE6  EQU   IGGCCA+340
CCACPE61 EQU   IGGCCA+344
CCACPE7  EQU   IGGCCA+348
CCAFLPT  EQU   IGGCCA+364
CCADICT  EQU   IGGCCA+372
CCAXCPL  EQU   IGGCCA+376
CCARABB  EQU   IGGCCA+380
CCALREL  EQU   IGGCCA+396
CCASN    EQU   IGGCCA+398
CCARBA   EQU   IGGCCA+448
CCACRAVL EQU   CCARBA
CCACRADT EQU   CCARBA+6
CCATLNG  EQU   IGGCCA+468
CCASMFIX EQU   IGGCCA+474
CCAIDPT3 EQU   IGGCCA+480
CCAGRGC  EQU   IGGCCA+493
CCAGRHI  EQU   IGGCCA+494
CCASSEQ  EQU   CCAGRHI
CCASMFPT EQU   IGGCCA+544
CCAFLG7  EQU   IGGCCA+552
CCASMFEX EQU   CCAFLG7
CCASMFBR EQU   CCAFLG7
CCAFLG8  EQU   IGGCCA+553
CCAFLG9  EQU   IGGCCA+554
CCASMFRD EQU   IGGCCA+556
CCASMFCT EQU   IGGCCA+560
CCASMFLG EQU   IGGCCA+562
CCASMFG1 EQU   CCASMFLG
CCASMFUC EQU   CCASMFG1
CCASMFDF EQU   CCASMFUC
CCASMFSR EQU   CCASMFG1
CCASMFAL EQU   CCASMFSR
CCASMFLN EQU   IGGCCA+564
CCABMINP EQU   IGGCCA+684
CCABMFLG EQU   CCABMINP+6
CCABMOUT EQU   IGGCCA+692
CCABMOFG EQU   CCABMOUT+4
CCATEMPS EQU   IGGCCA+744
CCAMNCAT EQU   IGGCCA+784
CCAMNAT  EQU   CCAMNCAT
MNATTOP  EQU   CCAMNAT
MNATFULL EQU   MNATTOP
MNATFLGS EQU   CCAMNAT+240
CCAMNLEN EQU   CCAMNCAT+249
CCAMNADR EQU   CCAMNCAT+252
CCAARFWA EQU   IGGCCA+1040
ARFGMLEN EQU   CCAARFWA
CCARVFG1 EQU   IGGCCA+1056
CCAREGS  EQU   IGGCCA+1060
CCABZSAV EQU   IGGCCA+1408
CCARALSA EQU   IGGCCA+1440
CCAFLG10 EQU   IGGCCA+1444
CCASMFP  EQU   IGGCCA+1480
CCASMFCD EQU   CCASMFP+3
CCAPROBX EQU   IGGCCA+1484
CCAERCDX EQU   CCAPROBX+2
CTGPL    EQU   0
CTGOPTN1 EQU   CTGPL
CTGOPTN2 EQU   CTGPL+1
CTGEXT   EQU   CTGOPTN2
CTGERASE EQU   CTGOPTN2
CTGSMF   EQU   CTGERASE
CTGREL   EQU   CTGSMF
CTGPURG  EQU   CTGOPTN2
CTGVMNT  EQU   CTGPURG
CTGOPTN3 EQU   CTGPL+2
CTGOPTN4 EQU   CTGPL+3
CTGENT   EQU   CTGPL+4
CTGFVT   EQU   CTGENT
CTGCAT   EQU   CTGPL+8
CTGCVOL  EQU   CTGCAT
CTGWKA   EQU   CTGPL+12
CTGDSORG EQU   CTGPL+16
CTGDDNM  EQU   CTGPL+20
CTGNEWNM EQU   CTGDDNM
CTGFBFLG EQU   CTGNEWNM+2
CTGJSCB  EQU   CTGPL+24
CTGFL    EQU   0
CTGFLDGC EQU   CTGFL+2
CTGFLDRE EQU   CTGFL+3
CTGFLDWA EQU   CTGFL+4
CTGFLDNM EQU   CTGFL+8
CTGFLDAT EQU   CTGFL+16
CTGFLPT  EQU   CTGFLDAT+4
USERWKA  EQU   0
WKA      EQU   USERWKA+4
ENTNAMES EQU   WKA
DICTENT  EQU   0
DICTFLGS EQU   DICTENT
DIC2ENT  EQU   0
DIC2FLGS EQU   DIC2ENT
CCARAB   EQU   0
CCARABFL EQU   CCARAB
CCACPE1  EQU   CCARAB+4
CCACPE2  EQU   CCARAB+8
CCACPE3  EQU   CCARAB+12
CATGOPT  EQU   0
CATGOCI  EQU   CATGOPT
CATGOFLG EQU   CATGOCI
CATGODSP EQU   CATGOCI+1
CATGOGC1 EQU   CATGOPT+3
CATGOEXT EQU   CATGOGC1
CATGODEL EQU   CATGOGC1
CATGOSEQ EQU   CATGOPT+4
CATRCD   EQU   0
RCDCINO  EQU   CATRCD+1
RCDID    EQU   CATRCD+44
RCDSIZ   EQU   CATRCD+45
NREPLF   EQU   CATRCD+48
REPCNTRL EQU   0
EXTRCDPT EQU   REPCNTRL
EXTGOCI  EQU   EXTRCDPT
REPCNT   EQU   REPCNTRL+5
REPGOPT  EQU   REPCNTRL+6
VARFIELD EQU   0
VARLEN   EQU   VARFIELD
CNTRLINF EQU   0
CNTVAR   EQU   CNTRLINF
LENFIX   EQU   CNTRLINF+1
CVTMAP   EQU   0
CVTTCBP  EQU   CVTMAP
CVTXAPG  EQU   CVTMAP+20
CVTILK2  EQU   CVTMAP+40
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTSMCA  EQU   CVTMAP+196
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTCBSP  EQU   CVTMAP+256
CVTPURG  EQU   CVTMAP+260
CVTAMFF  EQU   CVTMAP+264
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
TCBWORDS EQU   0
TCBPTR   EQU   TCBWORDS+4
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
ACBUAPTR EQU   ACBCOMN+64
AMCBS    EQU   0
CBSCMP   EQU   AMCBS+16
CBSVSRT  EQU   AMCBS+32
IGGCAXWA EQU   0
CAXFLGS  EQU   IGGCAXWA+8
CAXFLG2  EQU   IGGCAXWA+9
CAXFLG3  EQU   IGGCAXWA+10
CAXCCR   EQU   IGGCAXWA+32
CAXCNAM  EQU   IGGCAXWA+52
CAXOPLST EQU   IGGCAXWA+96
COPTS    EQU   CAXOPLST
CTGFV    EQU   0
CTGFVPRO EQU   CTGFV+1
CTGFVENT EQU   CTGFV+20
CTGFVSPC EQU   CTGFV+52
CTGFVAMD EQU   CTGFV+56
CTGFVLMT EQU   CTGFV+72
CTGFVGAT EQU   CTGFV+76
CTGWA    EQU   0
CTGWAVL  EQU   CTGWA
CTGVL    EQU   0
CTGVLX   EQU   0
CTGCV    EQU   0
CTGCVDSN EQU   CTGCV+6
MWA      EQU   0
VLST     EQU   MWA+2
CVOLIND  EQU   MWA+252
ASGO     EQU   1
PASSGO   EQU   1
PASSWORD EQU   PASSGO
USERAREC EQU   PASSGO+50
USERLIST EQU   0
LTENTRY  EQU   USERLIST+2
LTRETCOD EQU   LTENTRY
SPACEPRM EQU   0
SPCOPTNS EQU   SPACEPRM+6
CTGDSATR EQU   0
CTGATR1  EQU   CTGDSATR
CTGATR2  EQU   CTGDSATR+1
RGATTRFL EQU   0
RGATTR1  EQU   RGATTRFL
RGATTSG1 EQU   RGATTRFL+1
DEVCHARS EQU   0
RTDEVUCB EQU   DEVCHARS
RTBOKAB  EQU   DEVCHARS+14
RTDVFLGS EQU   DEVCHARS+17
SMCABASE EQU   0
SMCAOPT  EQU   SMCABASE
SMCADSA  EQU   SMCAOPT
SMCAVOL  EQU   SMCAOPT
SMCAMISC EQU   SMCABASE+1
SMCAUSER EQU   SMCAMISC
SMCABUF  EQU   SMCABASE+12
SMCAPSTA EQU   SMCABASE+30
SMCAPLBL EQU   SMCABASE+34
SMCASTA  EQU   SMCABASE+46
SMCAALBL EQU   SMCABASE+50
SMCAENTY EQU   SMCABASE+80
SMCAENDI EQU   SMCAENTY
SMCAFOPT EQU   SMCABASE+82
SMCASWA  EQU   SMCABASE+104
SMCAASCB EQU   SMCABASE+120
SMFTCT   EQU   0
TCTSW    EQU   SMFTCT+3
TCTCRTBL EQU   SMFTCT+8
TCTIOTBL EQU   SMFTCT+12
TCTPOOL  EQU   SMFTCT+16
TCTJMR   EQU   SMFTCT+28
TCTJSTX  EQU   SMFTCT+36
TCTTJLM  EQU   SMFTCT+40
TCTPGSMF EQU   SMFTCT+64
TCTCORE  EQU   0
TCTTIOT  EQU   0
TCTPLEXT EQU   TCTTIOT
JMR      EQU   0
JMRSIZE  EQU   JMR+8
JMRLOGSZ EQU   JMRSIZE
JMRJOB   EQU   JMRLOGSZ
JMRENTRY EQU   JMRLOGSZ+8
JMREDATE EQU   JMRLOGSZ+12
JMRUSEID EQU   JMRLOGSZ+20
JMROPT   EQU   JMRSIZE+29
JMRJOBP  EQU   JMR+108
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
IHADCS28 EQU   0
DCBOPTCD EQU   IHADCS28
DCBOPTZ  EQU   DCBOPTCD
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBTCBB  EQU   DEBTCBAD+1
DEBDEBAD EQU   DEBBASIC+4
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBNMEXT EQU   DEBUSRPG
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBDEBID EQU   DEBPROTG
DEBDCBB  EQU   DEBDCBAD+1
DEBAPPAD EQU   DEBBASIC+28
DEBEXSCL EQU   DEBAPPAD
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBDVMOD EQU   DEBUCBAD
DEBUCBA  EQU   DEBUCBAD+1
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
IOBPREFX EQU   0
IOBCFLG1 EQU   IOBPREFX
IOBSTDRD EQU   0
IOBFLAG1 EQU   IOBSTDRD
IOBCYCCK EQU   IOBFLAG1
IOBUNREL EQU   IOBFLAG1
IOBRSTRT EQU   IOBFLAG1
IOBFLAG2 EQU   IOBSTDRD+1
IOBPURGE EQU   IOBFLAG2
IOBRDHA0 EQU   IOBFLAG2
IOBSENS0 EQU   IOBSTDRD+2
IOBS0B7  EQU   IOBSENS0
IOBSENS1 EQU   IOBSTDRD+3
IOBECBPT EQU   IOBSTDRD+4
IOBFLAG3 EQU   IOBSTDRD+8
IOBFL3   EQU   IOBFLAG3
IOBCSW   EQU   IOBSTDRD+9
IOBIOCSW EQU   IOBCSW
IOBSTART EQU   IOBSTDRD+16
IOBDCBPT EQU   IOBSTDRD+20
IOBFLAG4 EQU   IOBDCBPT
IOBRESTR EQU   IOBSTDRD+24
IOBINCAM EQU   IOBSTDRD+28
IOBBTAMF EQU   IOBINCAM
UCB      EQU   0
UCBADDR  EQU   0
UCBOB    EQU   0
UCBJBNR  EQU   UCBOB
UCBFL5   EQU   UCBOB+1
UCBAF    EQU   UCBFL5
UCBSTAT  EQU   UCBOB+3
UCBONLI  EQU   UCBSTAT
UCBCHAN  EQU   UCBOB+4
UCBCHA   EQU   UCBCHAN
UCBUA    EQU   UCBCHAN+1
UCBSFLS  EQU   UCBOB+6
UCBFLA   EQU   UCBSFLS
UCBFL1   EQU   UCBFLA
UCBBSY   EQU   UCBFL1
UCBNRY   EQU   UCBFL1
UCBPST   EQU   UCBFL1
UCBCUB   EQU   UCBFL1
UCBFLB   EQU   UCBSFLS+1
UCBCHM   EQU   UCBOB+8
UCBCHM1  EQU   UCBCHM
UCBPTH0  EQU   UCBCHM1
UCBPTH1  EQU   UCBCHM1
UCBWGT   EQU   UCBOB+12
UCBTYP   EQU   UCBOB+16
UCBTBYT1 EQU   UCBTYP
UCB1FEA5 EQU   UCBTBYT1
UCB1FEA6 EQU   UCBTBYT1
UCBTBYT2 EQU   UCBTYP+1
UCB2OPT2 EQU   UCBTBYT2
UCBDUDN1 EQU   UCB2OPT2
UCB2OPT3 EQU   UCBTBYT2
UCBDUDN2 EQU   UCB2OPT3
UCB2OPT4 EQU   UCBTBYT2
UCBRWTAU EQU   UCB2OPT4
UCB2OPT6 EQU   UCBTBYT2
UCB2OPT7 EQU   UCBTBYT2
UCBTBYT3 EQU   UCBTYP+2
UCBDVCLS EQU   UCBTBYT3
UCB3DACC EQU   UCBDVCLS
UCBTBYT4 EQU   UCBTYP+3
UCBEXTPT EQU   UCBOB+20
UCBFLC   EQU   UCBEXTPT
UCBDEV   EQU   UCBOB+24
UCBCMEXT EQU   0
UCBATI   EQU   UCBCMEXT+3
@NM00151 EQU   UCBATI
UCBFLP1  EQU   UCBCMEXT+5
UCBMT    EQU   0
UCBOCR   EQU   0
UCB3540X EQU   0
UCBDKBYT EQU   UCB3540X+6
UCBUCS   EQU   0
UCBUCSOP EQU   UCBUCS+4
UCBFCBOP EQU   UCBUCS+5
LSPACE1  EQU   0
LSPACE2  EQU   0
SMFWKA   EQU   0
SMFECB   EQU   SMFWKA
SMFUCB   EQU   SMFWKA+4
SMFSENSE EQU   SMFWKA+6
SMFSPDL  EQU   SMFSENSE+4
SMFIOB   EQU   SMFWKA+24
SMFDEB   EQU   SMFWKA+64
SMFDCB   EQU   SMFWKA+112
SMFCCW   EQU   SMFWKA+160
SMFCCWDA EQU   SMFCCW
SMFCCWCC EQU   SMFCCWDA
SMFCCWFG EQU   SMFCCW+4
SMFCCWCT EQU   SMFCCW+6
JM1JOB   EQU   0
JM1USEID EQU   0
BUFSIZE  EQU   0
CATRECRD EQU   0
CATSN    EQU   0
CI       EQU   0
CTGVLDSP EQU   0
DATEFLD  EQU   0
ENTRYNAM EQU   0
EXCPNAME EQU   0
FIELDNM  EQU   0
LRECL    EQU   0
OWNIDFLD EQU   0
SMFELT1  EQU   0
TNAM     EQU   0
UCBBGN   EQU   0
@NM00044 EQU   CTGDDNM
CTGPROB  EQU   @NM00044
CTGREASN EQU   CTGPROB+2
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
PSARSVTE EQU   PSARSVT
MCATDSTR EQU   CVTAMFF
CVTAMF1  EQU   MCATDSTR
CTGRBASE EQU   NREPLF+1
CNAME    EQU   CTGRBASE
CATTR    EQU   CTGRBASE+58
CATTR1   EQU   CATTR
CATTR2   EQU   CATTR+1
COPEN    EQU   CTGRBASE+60
CSPACPRM EQU   CTGRBASE+65
@NM00106 EQU   CATTR1
CCATTR   EQU   @NM00106
@NM00107 EQU   CCATTR
@NM00109 EQU   CATTR1
CRGATTR  EQU   @NM00109
CUPG     EQU   CRGATTR
TCTIODSP EQU   TCTPLEXT+8
TCTDCBLE EQU   TCTIODSP+4
TCTDDENT EQU   TCTDCBLE+4
TCTFLGS  EQU   TCTDDENT+3
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
IOBORG01 EQU   IOBPREFX+8
IOBNIOBA EQU   IOBORG01
IOBNFLG1 EQU   IOBNIOBA
IOBORG02 EQU   IOBPREFX+8
IOBDQADA EQU   IOBORG02
IOBDEQIN EQU   IOBDQADA
IOBORG03 EQU   IOBPREFX+12
IOBORG04 EQU   IOBINCAM
IOBORG12 EQU   IOBINCAM
IOBFL4   EQU   IOBORG12
IOBEXTEN EQU   IOBSTDRD+32
IOBSEEK  EQU   IOBEXTEN
IOBBB    EQU   IOBSEEK+1
IOBCC    EQU   IOBSEEK+3
IOBHH    EQU   IOBSEEK+5
IOBORG05 EQU   IOBEXTEN
IOBORG06 EQU   IOBEXTEN
IOBNXTPT EQU   IOBORG06+4
IOBSTATA EQU   IOBNXTPT
IOBORG07 EQU   IOBEXTEN+8
W1IEXTEN EQU   IOBORG07
IOBORG08 EQU   IOBEXTEN+8
IOBINDCT EQU   IOBORG08+4
IOBUNSQR EQU   IOBORG08+5
IOBFCHAD EQU   IOBORG08+8
IOBORG09 EQU   IOBEXTEN+8
IOBDPLAD EQU   IOBORG09+4
IOBDTYPE EQU   IOBORG09+8
IOBDTYP2 EQU   IOBORG09+9
IOBDSTAT EQU   IOBORG09+10
IOBSTAT1 EQU   IOBDSTAT
IOBORG10 EQU   IOBEXTEN+8
IOBSEEK2 EQU   IOBORG10
IOBORG11 EQU   IOBEXTEN
IOBERCT  EQU   IOBORG11
IOBUCBXV EQU   IOBERCT
IOBNAME  EQU   IOBORG11+4
IOBORG13 EQU   IOBEXTEN
IOBSKADR EQU   IOBORG13
UCBOBS01 EQU   UCBDEV
UCBVOLI  EQU   UCBOBS01+4
UCBSTAB  EQU   UCBOBS01+10
UCBBSVL  EQU   UCBSTAB
UCBPRSRS EQU   UCBSTAB
UCBDMCT  EQU   UCBOBS01+11
UCBFL4   EQU   UCBOBS01+13
UCBOBS02 EQU   UCBDEV
UCBTFL1  EQU   UCBOBS02+19
UCBXTN   EQU   UCBOBS02+20
UCBVOPT  EQU   UCBXTN
UCBOBS03 EQU   UCBDEV
UCBXTADR EQU   UCBOBS03
UCBOBS04 EQU   UCBDEV
UCBBTA   EQU   UCBOBS04+12
UCBOBS06 EQU   UCBDEV
UCBAOF   EQU   UCBOBS06
UCBAOF1  EQU   UCBAOF
UCBAOF2  EQU   UCBAOF+1
@NM00150 EQU   UCBOBS06+3
UCBIRB   EQU   UCBOBS06+4
UCBGRAF  EQU   UCBIRB
UCBLDNCA EQU   UCBOBS06+8
UCBRDYQ  EQU   UCBLDNCA
UCBIRLN  EQU   UCBRDYQ
UCBLDNCB EQU   UCBRDYQ+1
UCBCTLNK EQU   UCBOBS06+12
UCBOBS07 EQU   UCBDEV
UCBOBS08 EQU   UCBDEV
UCBOBS09 EQU   UCBDEV
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
UCBRV066 EQU   UCBOBS09+4
UCBIOSBA EQU   UCBOBS09
UCBRV042 EQU   UCBOBS08+5
UCBCTCF1 EQU   UCBOBS08+4
UCBCTCAD EQU   UCBOBS08
UCBICNCB EQU   UCBOBS07+4
UCBRV040 EQU   UCBOBS07
UCBCTLNA EQU   UCBCTLNK+1
UCBRLN   EQU   UCBCTLNK
UCBRDYQA EQU   UCBLDNCB
UCBINRLN EQU   UCBIRLN
UCBIRBA  EQU   UCBIRB+1
UCBRV039 EQU   UCBGRAF
UCBDWNR  EQU   UCBGRAF
UCBRPND  EQU   UCBGRAF
UCBUPM   EQU   UCBGRAF
UCBBTAM  EQU   UCBGRAF
UCBDRNO  EQU   UCBGRAF
UCBDRO   EQU   UCBGRAF
UCBOIP   EQU   UCBGRAF
UCBATRCD EQU   @NM00150
UCBSKPFG EQU   @NM00150
UCBRIPND EQU   @NM00150
UCBRTIAC EQU   @NM00150
UCBRSV79 EQU   @NM00150
UCBRSV78 EQU   @NM00150
UCBRSV77 EQU   @NM00150
UCBOLTEP EQU   @NM00150
UCBATNCT EQU   UCBOBS06+2
UCBRSV76 EQU   UCBAOF2
UCBRSV75 EQU   UCBAOF2
UCBRSV74 EQU   UCBAOF2
UCBRSV73 EQU   UCBAOF2
UCBRSV72 EQU   UCBAOF2
UCBRSV71 EQU   UCBAOF2
UCBRSV70 EQU   UCBAOF2
UCBRSV69 EQU   UCBAOF2
UCBRSV68 EQU   UCBAOF1
UCBRSV67 EQU   UCBAOF1
UCBRSV66 EQU   UCBAOF1
UCBRSV65 EQU   UCBAOF1
UCBRSV64 EQU   UCBAOF1
UCBOFNL  EQU   UCBAOF1
UCBOFSP  EQU   UCBAOF1
UCBOFMCR EQU   UCBAOF1
UCBBTB   EQU   UCBBTA+1
UCBDI    EQU   UCBBTA
UCBSNS   EQU   UCBOBS04+8
UCBTEB   EQU   UCBOBS04+4
UCBGCB   EQU   UCBOBS04+3
UCBOPEN  EQU   UCBOBS04+2
UCBSTART EQU   UCBOBS04
UCBXTNB  EQU   UCBXTN+1
UCBRSV22 EQU   UCBVOPT
UCBRSV21 EQU   UCBVOPT
UCBRSV20 EQU   UCBVOPT
UCBESVE  EQU   UCBVOPT
UCBERPC  EQU   UCBVOPT
UCBESVC  EQU   UCBVOPT
UCBEVA   EQU   UCBVOPT
UCBESV   EQU   UCBVOPT
UCBRV009 EQU   UCBTFL1
UCBRV008 EQU   UCBTFL1
UCBRV007 EQU   UCBTFL1
UCBRV006 EQU   UCBTFL1
UCBRV005 EQU   UCBTFL1
UCBRV038 EQU   UCBTFL1
UCBNSLTP EQU   UCBTFL1
UCBNLTP  EQU   UCBTFL1
UCBRES1B EQU   UCBOBS02+18
UCBFSER  EQU   UCBOBS02+12
@NM00149 EQU   UCBOBS02+4
UCBFSEQ  EQU   UCBOBS02+2
UCBFSCT  EQU   UCBOBS02
UCBNEXP  EQU   UCBOBS01+20
UCBBASE  EQU   UCBOBS01+16
UCBRES1A EQU   UCBOBS01+15
UCBUSER  EQU   UCBOBS01+14
UCBFL47  EQU   UCBFL4
UCBFL46  EQU   UCBFL4
UCBFL45  EQU   UCBFL4
UCBRV065 EQU   UCBFL4
UCBDSS   EQU   UCBFL4
UCBRV028 EQU   UCBFL4
UCBWDAV  EQU   UCBFL4
UCBDAVV  EQU   UCBFL4
UCBSQC   EQU   UCBOBS01+12
UCBDATP  EQU   UCBOBS01+12
UCBDMC   EQU   UCBDMCT
UCBMOUNT EQU   UCBDMCT
UCBBNUL  EQU   UCBSTAB
UCBSHAR  EQU   UCBSTAB
UCBBSTR  EQU   UCBSTAB
UCBBPUB  EQU   UCBSTAB
UCBBPRV  EQU   UCBSTAB
UCBBALB  EQU   UCBPRSRS
UCBPGFL  EQU   UCBSTAB
UCBDVSHR EQU   UCBBSVL
UCBVTOC  EQU   UCBOBS01
IOBSKSS  EQU   IOBSKADR+3
IOBSK0   EQU   IOBSKADR+2
IOBSKTT  EQU   IOBSKADR+1
IOBSKRV  EQU   IOBSKADR
IOBCSWSV EQU   IOBORG11+17
IOBSENSV EQU   IOBORG11+16
IOBRCD   EQU   IOBORG11+12
IOBMDREC EQU   IOBORG11+8
IOBNAMEA EQU   IOBNAME+1
IOBNAMSZ EQU   IOBNAME
IOBERCTA EQU   IOBERCT+1
IOBRTYPE EQU   IOBUCBXV
IOBRDCHP EQU   IOBORG10+20
IOBNEXTA EQU   IOBORG10+16
IOBREADA EQU   IOBORG10+12
IOBBUFC  EQU   IOBORG10+8
IOBSK2R  EQU   IOBSEEK2+7
IOBSK2HH EQU   IOBSEEK2+5
IOBSK2CC EQU   IOBSEEK2+3
IOBSK2BB EQU   IOBSEEK2+1
IOBSK2M  EQU   IOBSEEK2
IOBCHNPR EQU   IOBORG09+40
IOBDNCRF EQU   IOBORG09+32
IOBRSV35 EQU   IOBORG09+24
IOBDQPTR EQU   IOBORG09+20
IOBRSV34 EQU   IOBORG09+18
IOBDBYTN EQU   IOBORG09+16
IOBDCPND EQU   IOBORG09+12
IOBSTAT2 EQU   IOBDSTAT+1
IOBSIORT EQU   IOBSTAT1
IOBADDVU EQU   IOBSTAT1
IOBBUFF  EQU   IOBSTAT1
IOBENQUE EQU   IOBSTAT1
IOBPASS2 EQU   IOBSTAT1
IOBSYNCH EQU   IOBSTAT1
IOBNEWVL EQU   IOBSTAT1
IOBABNRM EQU   IOBSTAT1
IOBRELEX EQU   IOBDTYP2
IOBADDTY EQU   IOBDTYP2
IOBTYPE  EQU   IOBDTYP2
IOBRQUST EQU   IOBDTYP2
IOBSUFFX EQU   IOBDTYP2
IOBSBLKL EQU   IOBDTYP2
IOBSKEY  EQU   IOBDTYP2
IOBRELBL EQU   IOBDTYPE
IOBRDEXC EQU   IOBDTYPE
IOBDYNBF EQU   IOBDTYPE
IOBACTAD EQU   IOBDTYPE
IOBFDBCK EQU   IOBDTYPE
IOBEXTSC EQU   IOBDTYPE
IOBOVFLO EQU   IOBDTYPE
IOBVERFY EQU   IOBDTYPE
IOBDPLB  EQU   IOBDPLAD+1
IOBDAYLI EQU   IOBDPLAD
IOBDIOBS EQU   IOBORG09+2
IOBDBYTR EQU   IOBORG09
IOBBCHAD EQU   IOBORG08+12
IOBFCHNB EQU   IOBFCHAD+1
IOBCOUNT EQU   IOBFCHAD
IOBASYN  EQU   IOBORG08+7
IOBAPP   EQU   IOBORG08+6
IOBRSV32 EQU   IOBUNSQR
IOBRSV31 EQU   IOBUNSQR
IOBRSV30 EQU   IOBUNSQR
IOBKNRWR EQU   IOBUNSQR
IOBKNWR  EQU   IOBUNSQR
IOBNTAV2 EQU   IOBUNSQR
IOBNTAV1 EQU   IOBUNSQR
IOBCPBSY EQU   IOBUNSQR
IOBCHNNL EQU   IOBINDCT
IOBRSV29 EQU   IOBINDCT
IOBRSV28 EQU   IOBINDCT
IOBRSV27 EQU   IOBINDCT
IOBKEYAD EQU   IOBINDCT
IOBOVPTR EQU   IOBINDCT
IOBUNSCH EQU   IOBINDCT
IOBDEQCP EQU   IOBINDCT
IOBCCWAD EQU   IOBORG08
W1OEXTEN EQU   W1IEXTEN
IOBCCW   EQU   IOBORG06+8
IOBNXTPB EQU   IOBNXTPT+1
IOBRSV26 EQU   IOBSTATA
IOBRSV25 EQU   IOBSTATA
IOBRSV24 EQU   IOBSTATA
IOBRSV23 EQU   IOBSTATA
IOBRSV22 EQU   IOBSTATA
IOBRSV21 EQU   IOBSTATA
IOBRSV20 EQU   IOBSTATA
IOBAVLFL EQU   IOBSTATA
IOBRSV37 EQU   IOBORG06+1
IOBUCBXG EQU   IOBORG06
IOBCPA   EQU   IOBORG05+32
IOBERINF EQU   IOBORG05+16
IOBERCCW EQU   IOBORG05+8
IOBSNDPT EQU   IOBORG05+7
IOBRCVPT EQU   IOBORG05+6
IOBWORK  EQU   IOBORG05+1
IOBUCBX  EQU   IOBORG05
IOBR     EQU   IOBSEEK+7
IOBHH2   EQU   IOBHH+1
IOBHH1   EQU   IOBHH
IOBCC2   EQU   IOBCC+1
IOBCC1   EQU   IOBCC
IOBBB2   EQU   IOBBB+1
IOBBB1   EQU   IOBBB
IOBM     EQU   IOBSEEK
IOBRSV46 EQU   IOBFL4
IOBRSV47 EQU   IOBFL4
IOBENT   EQU   IOBFL4
IOBEQP   EQU   IOBFL4
IOBBUS   EQU   IOBFL4
IOBDCK   EQU   IOBFL4
IOBREJ   EQU   IOBFL4
IOBOVR   EQU   IOBFL4
IOBCRILC EQU   IOBORG04+1
IOBCRDCC EQU   IOBORG04
IOBGQECB EQU   IOBORG03
IOBSWAP  EQU   IOBORG02+4
IOBDQADB EQU   IOBDQADA+1
IOBRSV13 EQU   IOBDEQIN
IOBRSV12 EQU   IOBDEQIN
IOBRSV11 EQU   IOBDEQIN
IOBRSV10 EQU   IOBDEQIN
IOBRSV09 EQU   IOBDEQIN
IOBRSV08 EQU   IOBDEQIN
IOBRSV07 EQU   IOBDEQIN
IOBDEQ   EQU   IOBDEQIN
IOBNECB  EQU   IOBORG01+4
IOBNIOBB EQU   IOBNIOBA+1
IOBFIRST EQU   IOBNFLG1
IOBUPERR EQU   IOBNFLG1
IOBSPAN  EQU   IOBNFLG1
IOBBKSPC EQU   IOBNFLG1
IOBUPDAT EQU   IOBNFLG1
IOBREAD  EQU   IOBNFLG1
IOBWRITE EQU   IOBNFLG1
IOBPRTOV EQU   IOBNFLG1
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
TCTTKRLD EQU   TCTDDENT+13
TCTEXRLD EQU   TCTDDENT+12
TCTRSV10 EQU   TCTDDENT+8
TCTDCTR  EQU   TCTDDENT+4
TCTRSV26 EQU   TCTFLGS
TCTRSV25 EQU   TCTFLGS
TCTRSV24 EQU   TCTFLGS
TCTRSV23 EQU   TCTFLGS
TCTRSV22 EQU   TCTFLGS
TCTRSV21 EQU   TCTFLGS
TCTVAMDS EQU   TCTFLGS
TCTDDIND EQU   TCTFLGS
TCTSCTR  EQU   TCTDDENT+2
TCTUCBP  EQU   TCTDDENT
TCTIOTSD EQU   TCTIODSP+2
TCTDCBTD EQU   TCTIODSP
@NM00110 EQU   CRGATTR
CUPD     EQU   CUPG
CPGSP    EQU   @NM00107
@NM00108 EQU   @NM00107
CEXT     EQU   CTGRBASE+86
CDOSUINF EQU   CTGRBASE+84
CLRECL   EQU   CTGRBASE+80
CHIA     EQU   CTGRBASE+76
CHIU     EQU   CTGRBASE+72
CSORT    EQU   CSPACPRM+6
CSEC     EQU   CSPACPRM+3
CPRIM    EQU   CSPACPRM
CBUF     EQU   CTGRBASE+61
@NM00105 EQU   COPEN
COPENDS  EQU   COPEN
CNUS     EQU   CATTR2
@NM00104 EQU   CATTR2
CATTRSSH EQU   CATTR2
CATTRISH EQU   CATTR2
CTRKOV   EQU   CATTR1
CTEMP    EQU   CATTR1
CINHIB   EQU   CATTR1
CRECOV   EQU   CATTR1
CERASE   EQU   CATTR1
CREUSE   EQU   CATTR1
CUNIQ    EQU   CATTR1
CSP      EQU   CATTR1
CEXP     EQU   CTGRBASE+55
CCRE     EQU   CTGRBASE+52
COWNID   EQU   CTGRBASE+44
@NM00094 EQU   MCATDSTR+1
@NM00093 EQU   CVTAMF1
AMF1NONX EQU   CVTAMF1
AMF1OPEN EQU   CVTAMF1
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTRV612 EQU   CVTS01+664
CVTRV611 EQU   CVTS01+660
CVTRV610 EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTRV608 EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTRV519 EQU   CVTS01+92
CVTRV327 EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
CTGREAS2 EQU   CTGREASN+1
CTGREAS1 EQU   CTGREASN
CTGMODID EQU   CTGPROB
@NM00155 EQU   SMFCCW+5
@NM00154 EQU   SMFCCWDA+1
SMFSPDL1 EQU   SMFSENSE+17
@NM00153 EQU   SMFSENSE+5
@NM00152 EQU   SMFSENSE
UCBERADR EQU   UCBUCS+12
UCBFCBID EQU   UCBUCS+8
UCBERCNT EQU   UCBUCS+7
UCBRSV51 EQU   UCBUCS+6
UCBRSV50 EQU   UCBFCBOP
UCBRSV49 EQU   UCBFCBOP
UCBRSV48 EQU   UCBFCBOP
UCBRSV47 EQU   UCBFCBOP
UCBRSV46 EQU   UCBFCBOP
UCBRSV45 EQU   UCBFCBOP
UCBRSV44 EQU   UCBFCBOP
UCBFCBO1 EQU   UCBFCBOP
UCBUCSPE EQU   UCBUCSOP
UCBRSV43 EQU   UCBUCSOP
UCBRSV42 EQU   UCBUCSOP
UCBRSV41 EQU   UCBUCSOP
UCBRSV40 EQU   UCBUCSOP
UCBRSV39 EQU   UCBUCSOP
UCBUCSO2 EQU   UCBUCSOP
UCBUCSO1 EQU   UCBUCSOP
UCBUCSID EQU   UCBUCS
UCBRV073 EQU   UCB3540X+7
UCBRV072 EQU   UCBDKBYT
UCBRV071 EQU   UCBDKBYT
UCBRV070 EQU   UCBDKBYT
UCBRV069 EQU   UCBDKBYT
UCBRV068 EQU   UCBDKBYT
UCBRV067 EQU   UCBDKBYT
UCBVLVER EQU   UCBDKBYT
UCBDKAMX EQU   UCBDKBYT
UCBVLSER EQU   UCB3540X
UCBRDATA EQU   UCBOCR+4
UCBFRID  EQU   UCBOCR
UCBCLN   EQU   UCBMT+14
UCBERG   EQU   UCBMT+12
UCBMS    EQU   UCBMT+11
UCBNB    EQU   UCBMT+10
UCBPW    EQU   UCBMT+9
UCBPR    EQU   UCBMT+8
UCBSIO   EQU   UCBMT+6
UCBTW    EQU   UCBMT+5
UCBTR    EQU   UCBMT+4
UCBTWT   EQU   UCBMT+3
UCBTRT   EQU   UCBMT+2
UCBCTD   EQU   UCBMT
UCBWTOID EQU   UCBCMEXT+17
UCBRV043 EQU   UCBCMEXT+16
UCBASID  EQU   UCBCMEXT+14
UCBMFCNT EQU   UCBCMEXT+12
UCBPMSK  EQU   UCBCMEXT+10
UCBCCWOF EQU   UCBCMEXT+8
UCBRV041 EQU   UCBCMEXT+6
UCBRV036 EQU   UCBFLP1
UCBRV035 EQU   UCBFLP1
UCBRV034 EQU   UCBFLP1
UCBRV033 EQU   UCBFLP1
UCBRV032 EQU   UCBFLP1
UCBRV031 EQU   UCBFLP1
UCBSHRUP EQU   UCBFLP1
UCBNSRCH EQU   UCBFLP1
UCBSNSCT EQU   UCBCMEXT+4
UCBHPDV  EQU   @NM00151
UCBHALI  EQU   @NM00151
UCBRSV09 EQU   @NM00151
UCBRSV08 EQU   @NM00151
UCBRSV07 EQU   @NM00151
UCBRSV06 EQU   @NM00151
UCBRSV05 EQU   @NM00151
UCBRSV04 EQU   @NM00151
UCBDTI   EQU   UCBCMEXT+2
UCBSTI   EQU   UCBCMEXT+1
UCBETI   EQU   UCBCMEXT
UCBEXTP  EQU   UCBEXTPT+1
UCBDDRSW EQU   UCBFLC
UCBTICBT EQU   UCBFLC
UCBIVRR  EQU   UCBFLC
UCBIVRS  EQU   UCBFLC
UCBITF   EQU   UCBFLC
UCBUDE   EQU   UCBFLC
UCBWAA   EQU   UCBFLC
UCBATTP  EQU   UCBFLC
UCBUNTYP EQU   UCBTBYT4
UCBRSV11 EQU   UCBDVCLS
UCBRSV10 EQU   UCBDVCLS
UCB3CHAR EQU   UCBDVCLS
UCB3UREC EQU   UCBDVCLS
UCB3DISP EQU   UCBDVCLS
UCB3COMM EQU   UCBDVCLS
UCB3TAPE EQU   UCBDVCLS
UCBDVPWR EQU   UCB2OPT7
UCBVLPWR EQU   UCB2OPT6
UCB2OPT5 EQU   UCBTBYT2
UCBRVDEV EQU   UCBRWTAU
UCBRPS   EQU   UCBDUDN2
UCBRR    EQU   UCBDUDN1
UCB2OPT1 EQU   UCBTBYT2
UCB2OPT0 EQU   UCBTBYT2
UCB1FEA7 EQU   UCBTBYT1
UCBD6250 EQU   UCB1FEA6
UCBD1600 EQU   UCB1FEA5
UCB1FEA4 EQU   UCBTBYT1
UCB1FEA3 EQU   UCBTBYT1
UCB1FEA2 EQU   UCBTBYT1
UCB1FEA1 EQU   UCBTBYT1
UCB1FEA0 EQU   UCBTBYT1
UCBNAME  EQU   UCBOB+13
UCBRV029 EQU   UCBWGT
UCBVHRSN EQU   UCBWGT
UCBVORSN EQU   UCBWGT
UCBMTPXP EQU   UCBWGT
UCBREW   EQU   UCBWGT
UCBPUB   EQU   UCBWGT
UCBOUT   EQU   UCBWGT
UCBIN    EQU   UCBWGT
UCBCPU   EQU   UCBOB+11
UCBLCI   EQU   UCBOB+10
UCBCNT   EQU   UCBOB+9
UCBRV017 EQU   UCBCHM1
UCBRV016 EQU   UCBCHM1
UCBRV015 EQU   UCBCHM1
UCBRV014 EQU   UCBCHM1
UCBSPB   EQU   UCBPTH1
UCBPPB   EQU   UCBPTH1
UCBSPA   EQU   UCBPTH0
UCBPPA   EQU   UCBPTH0
UCBFLB7  EQU   UCBFLB
UCBVALPH EQU   UCBFLB
UCBCRHSN EQU   UCBFLB
UCBCRHRV EQU   UCBFLB
UCBRESVH EQU   UCBFLB
UCBSPST  EQU   UCBFLB
UCBASNS  EQU   UCBFLB
UCBIORST EQU   UCBFLB
UCBQISCE EQU   UCBFL1
UCBACTV  EQU   UCBFL1
UCBSAP   EQU   UCBFL1
UCBNOTRC EQU   UCBCUB
UCBPSNS  EQU   UCBFL1
UCBUSING EQU   UCBPST
UCBNOTRD EQU   UCBNRY
UCBBUSYD EQU   UCBBSY
UCBDADI  EQU   UCBSTAT
UCBSYSR  EQU   UCBSTAT
UCBPRES  EQU   UCBSTAT
UCBALOC  EQU   UCBSTAT
UCBUNLD  EQU   UCBSTAT
UCBRESV  EQU   UCBSTAT
UCBCHGS  EQU   UCBSTAT
UCBID    EQU   UCBOB+2
UCBALTPH EQU   UCBFL5
UCBALTCU EQU   UCBFL5
UCBNALOC EQU   UCBFL5
UCBENVRD EQU   UCBFL5
UCBVSDR  EQU   UCBFL5
UCBSASK  EQU   UCBFL5
UCBAMV   EQU   UCBAF
UCBDCC   EQU   UCBFL5
UCBMONT  EQU   UCBJBNR
UCBRV011 EQU   UCBJBNR
UCBRSV02 EQU   UCBJBNR
UCBOLDSM EQU   UCBJBNR
UCBRV003 EQU   UCBJBNR
UCBRV002 EQU   UCBJBNR
UCBJES3  EQU   UCBJBNR
UCBVRDEV EQU   UCBJBNR
UCBCMSEG EQU   UCBOB
UCBPFXND EQU   UCB+512
UCBIOQ   EQU   UCB+508
UCBLOCK  EQU   UCB+504
UCBPXST  EQU   UCB+504
@NM00148 EQU   UCB
IOBERRCT EQU   IOBSTDRD+30
IOBRSV19 EQU   IOBINCAM+1
IOBOLTST EQU   IOBBTAMF
IOBRFTMG EQU   IOBBTAMF
IOBRSV17 EQU   IOBBTAMF
IOBRSV16 EQU   IOBBTAMF
IOBRSV15 EQU   IOBBTAMF
IOBRSV14 EQU   IOBBTAMF
IOBINUSE EQU   IOBBTAMF
IOBPRMER EQU   IOBBTAMF
IOBRSTRB EQU   IOBRESTR+1
IOBREPOS EQU   IOBRESTR
IOBDCBPB EQU   IOBDCBPT+1
IOBRSV44 EQU   IOBFLAG4
IOBJES3I EQU   IOBFLAG4
IOBRSV42 EQU   IOBFLAG4
IOBRSV41 EQU   IOBFLAG4
IOBRSV40 EQU   IOBFLAG4
IOBPMERR EQU   IOBFLAG4
IOBCC3WE EQU   IOBFLAG4
IOBGDPOL EQU   IOBFLAG4
IOBSTRTB EQU   IOBSTART+1
IOBSIOCC EQU   IOBSTART
IOBSTBYT EQU   IOBIOCSW+3
IOBCMDA  EQU   IOBIOCSW
IOBLOG   EQU   IOBFL3
IOBICL   EQU   IOBFL3
IOBMSG   EQU   IOBFL3
IOBCNC   EQU   IOBFL3
IOBACU   EQU   IOBFL3
IOBCDC   EQU   IOBFL3
IOBICC   EQU   IOBFL3
IOBCCC   EQU   IOBFL3
IOBECBPB EQU   IOBECBPT+1
IOBECBCC EQU   IOBECBPT
IOBS1B7  EQU   IOBSENS1
IOBS1B6  EQU   IOBSENS1
IOBS1B5  EQU   IOBSENS1
IOBS1B4  EQU   IOBSENS1
IOBS1B3  EQU   IOBSENS1
IOBS1B2  EQU   IOBSENS1
IOBS1B1  EQU   IOBSENS1
IOBS1B0  EQU   IOBSENS1
IOBSNSC9 EQU   IOBS0B7
IOBS0B6  EQU   IOBSENS0
IOBS0B5  EQU   IOBSENS0
IOBS0B4  EQU   IOBSENS0
IOBS0B3  EQU   IOBSENS0
IOBS0B2  EQU   IOBSENS0
IOBS0B1  EQU   IOBSENS0
IOBS0B0  EQU   IOBSENS0
IOBPNCH  EQU   IOBFLAG2
IOBSTATO EQU   IOBFLAG2
IOBSKUPD EQU   IOBFLAG2
IOBALTTR EQU   IOBFLAG2
IOBRRT2  EQU   IOBRDHA0
IOBRRT3  EQU   IOBPURGE
IOBSENSE EQU   IOBFLAG2
IOBHALT  EQU   IOBFLAG2
IOBSPSVC EQU   IOBRSTRT
IOBIOERR EQU   IOBFLAG1
IOBFCREX EQU   IOBCYCCK
IOBRPSTN EQU   IOBFLAG1
IOBERRTN EQU   IOBFLAG1
IOBCMDCH EQU   IOBFLAG1
IOBDATCH EQU   IOBFLAG1
IOBCNOPA EQU   IOBPREFX+12
IOBCICB  EQU   IOBPREFX+8
IOBCECB  EQU   IOBPREFX+4
IOBCONOP EQU   IOBPREFX+3
IOBCINOP EQU   IOBPREFX+2
IOBRSV05 EQU   IOBPREFX+1
IOBPCI   EQU   IOBCFLG1
IOBRSTCH EQU   IOBCFLG1
IOBABAPP EQU   IOBCFLG1
IOBPTST  EQU   IOBCFLG1
IOBRSV04 EQU   IOBCFLG1
IOBRSV03 EQU   IOBCFLG1
IOBRSV02 EQU   IOBCFLG1
IOBRSV01 EQU   IOBCFLG1
DEBXRV40 EQU   DEBXTN+28
DEBXRV39 EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXRV42 EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBRSV19 EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00147 EQU   DEBACS08+12
@NM00146 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00145 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00144 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBAPPB  EQU   DEBAPPAD+1
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBDEBB  EQU   DEBDEBAD+1
DEBAMLNG EQU   DEBDEBAD
DEBNMSUB EQU   DEBTCBAD
@NM00143 EQU   IHADCS28+1
@NM00142 EQU   DCBOPTCD
DCBSRCHD EQU   DCBOPTZ
@NM00141 EQU   DCBOPTCD
DCBDEBA  EQU   DCBDEBAD+1
@NM00140 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBIFPCT EQU   DCBIFLGS
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00139 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBIBPCT EQU   DCBIFLG
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBRECL  EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00138 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00137 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00136 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00135 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
@NM00134 EQU   DCBDSRG1
@NM00133 EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBKEYLE EQU   DCBRELB
DCBTRBAL EQU   IHADCS01+6
@NM00132 EQU   IHADCS01+5
@NM00131 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00130 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00129 EQU   IHADCB
JMRPTOFS EQU   JMR+120
JMRJCLCP EQU   JMR+116
JMRJCLP  EQU   JMR+112
JMRPTRS  EQU   JMRJOBP
@NM00128 EQU   JMR+106
JMRJCLCD EQU   JMR+105
JMRSYSOC EQU   JMR+100
@NM00127 EQU   JMR+98
JMRRDR   EQU   JMR+96
JMRJOBIN EQU   JMR+92
JMRDRSTP EQU   JMR+84
JMRUJVP  EQU   JMRSIZE+72
JMRLWT   EQU   JMRSIZE+68
JMRTNT   EQU   JMRSIZE+64
JMRLNPU  EQU   JMRSIZE+60
JMRTNPU  EQU   JMRSIZE+56
JMRLPR   EQU   JMRSIZE+52
JMRTNPR  EQU   JMRSIZE+48
JMRJOBC  EQU   JMRSIZE+46
JMRJPR   EQU   JMRSIZE+44
JMRNLRD  EQU   JMRSIZE+40
JMRTNRDR EQU   JMRSIZE+36
JMRUCOM  EQU   JMRSIZE+32
@NM00126 EQU   JMRSIZE+30
@NM00125 EQU   JMROPT
@NM00124 EQU   JMROPT
@NM00123 EQU   JMROPT
@NM00122 EQU   JMROPT
JMRXONLY EQU   JMROPT
JMREXITS EQU   JMROPT
JMRSTPSW EQU   JMROPT
JMRJOBSW EQU   JMROPT
JMRSTEP  EQU   JMRLOGSZ+28
JMRCPUID EQU   JMRLOGSZ+16
@NM00121 EQU   JMR+7
JMRNXT   EQU   JMR+4
JMRID    EQU   JMR+3
JMRTTR   EQU   JMR
TCTRSV11 EQU   TCTTIOT+6
TCTSZLKP EQU   TCTTIOT+4
TCTSZEXT EQU   TCTPLEXT+2
@NM00120 EQU   TCTPLEXT
TCTLCS   EQU   TCTCORE+16
TCTRBA   EQU   TCTCORE+12
TCTRSZ   EQU   TCTCORE+10
TCTMINC  EQU   TCTCORE+8
TCTHWM   EQU   TCTCORE+4
TCTLWM   EQU   TCTCORE
TCTSOUT  EQU   TCTPGSMF+16
TCTSIN   EQU   TCTPGSMF+12
TCTRGNS  EQU   TCTPGSMF+8
TCTPGOUT EQU   TCTPGSMF+4
TCTPGIN  EQU   TCTPGSMF
TCTPPST  EQU   SMFTCT+60
TCTAST   EQU   SMFTCT+56
TCTLOUT  EQU   SMFTCT+52
TCTLIN   EQU   SMFTCT+48
TCTWLMT  EQU   SMFTCT+44
TCTSACT  EQU   TCTTJLM
TCTSTOF  EQU   TCTJSTX
TCTRSV08 EQU   SMFTCT+32
TCTUDATA EQU   SMFTCT+24
TCTUTL   EQU   SMFTCT+20
TCTSZE   EQU   TCTPOOL+2
@NM00119 EQU   TCTPOOL
TCTTCB   EQU   SMFTCT+4
TCTRSV07 EQU   TCTSW
TCTRSV06 EQU   TCTSW
TCTRSV05 EQU   TCTSW
TCTRSV04 EQU   TCTSW
TCTRSV03 EQU   TCTSW
TCTRSV02 EQU   TCTSW
TCTIEX   EQU   TCTSW
TCTJSTI  EQU   TCTSW
TCTQA    EQU   SMFTCT
SMCASTCB EQU   SMCABASE+176
SMCAWTCB EQU   SMCABASE+172
SMCAU83  EQU   SMCABASE+168
SMCAPGM  EQU   SMCABASE+164
SMCARGNM EQU   SMCABASE+160
SMCASPOT EQU   SMCABASE+156
SMCASPIN EQU   SMCABASE+152
SMCARGNS EQU   SMCABASE+148
SMCAPGRL EQU   SMCABASE+144
SMCAPGOT EQU   SMCABASE+140
SMCAPGIN EQU   SMCABASE+136
SMCATEXP EQU   SMCABASE+132
SMCARS22 EQU   SMCABASE+128
SMCARS21 EQU   SMCABASE+124
SMCATJID EQU   SMCAASCB+2
SMCAPOST EQU   SMCAASCB
SMCADSCT EQU   SMCABASE+116
SMCADSTM EQU   SMCABASE+108
SMCASWD  EQU   SMCABASE+107
SMCASWC  EQU   SMCABASE+106
SMCASWB  EQU   SMCABASE+105
SMCADSSW EQU   SMCASWA
SMCADSSP EQU   SMCASWA
SMCAZEOD EQU   SMCASWA
SMCANAVL EQU   SMCASWA
SMCANADA EQU   SMCASWA
SMCAOPFL EQU   SMCASWA
SMCADSTR EQU   SMCASWA
SMCASWAR EQU   SMCASWA
SMCAXNAM EQU   SMCABASE+96
@NM00118 EQU   SMCABASE+92
SMCAXCTL EQU   SMCABASE+88
SMCAWRTP EQU   SMCABASE+84
SMCAENAL EQU   SMCABASE+83
SMCAFGN  EQU   SMCAFOPT
SMCAFTDS EQU   SMCAFOPT
SMCAFR01 EQU   SMCAFOPT
SMCAFVOL EQU   SMCAFOPT
SMCAFDSA EQU   SMCAFOPT
SMCAFEXT EQU   SMCAFOPT
SMCAFOP2 EQU   SMCAFOPT
SMCAFOP1 EQU   SMCAFOPT
SMCAENOP EQU   SMCAENTY+1
SMCADSNF EQU   SMCAENDI
SMCARS20 EQU   SMCAENDI
SMCARS19 EQU   SMCAENDI
SMCARS18 EQU   SMCAENDI
SMCARS17 EQU   SMCAENDI
SMCARS16 EQU   SMCAENDI
SMCARS15 EQU   SMCAENDI
SMCARS14 EQU   SMCAENDI
SMCAWAIT EQU   SMCABASE+72
SMCASGFT EQU   SMCABASE+68
SMCASGWR EQU   SMCABASE+64
SMCABECB EQU   SMCABASE+60
SMCAWECB EQU   SMCABASE+56
SMCAADCB EQU   SMCABASE+52
SMCAYORX EQU   SMCABASE+51
SMCAANL  EQU   SMCAALBL
SMCAASL  EQU   SMCAALBL
SMCAANSL EQU   SMCAALBL
SMCARS13 EQU   SMCAALBL
SMCARS12 EQU   SMCAALBL
SMCARS11 EQU   SMCAALBL
SMCARS10 EQU   SMCAALBL
SMCARS09 EQU   SMCAALBL
SMCAADAR EQU   SMCABASE+47
SMCAAVOL EQU   SMCASTA
SMCAAUNT EQU   SMCASTA
SMCARS08 EQU   SMCASTA
SMCAAMOD EQU   SMCASTA
SMCAAMTY EQU   SMCASTA
SMCAADA  EQU   SMCASTA
SMCAATAP EQU   SMCASTA
SMCAANAV EQU   SMCASTA
SMCAADEV EQU   SMCABASE+40
SMCAPDCB EQU   SMCABASE+36
SMCAXORY EQU   SMCABASE+35
SMCAPNL  EQU   SMCAPLBL
SMCAPSL  EQU   SMCAPLBL
SMCAPNSL EQU   SMCAPLBL
SMCARS07 EQU   SMCAPLBL
SMCARS06 EQU   SMCAPLBL
SMCARS05 EQU   SMCAPLBL
SMCARS04 EQU   SMCAPLBL
SMCARS03 EQU   SMCAPLBL
SMCAPDAR EQU   SMCABASE+31
SMCAPVOL EQU   SMCAPSTA
SMCAPUNT EQU   SMCAPSTA
SMCARS02 EQU   SMCAPSTA
SMCAMOD  EQU   SMCAPSTA
SMCAPMTY EQU   SMCAPSTA
SMCAPDA  EQU   SMCAPSTA
SMCAPTAP EQU   SMCAPSTA
SMCAPNAV EQU   SMCAPSTA
SMCAPDEV EQU   SMCABASE+24
SMCABUFP EQU   SMCABASE+20
SMCASID  EQU   SMCABASE+16
SMCABSIZ EQU   SMCABUF
SMCAJWT  EQU   SMCABASE+8
SMCATIOT EQU   SMCABASE+4
SMCATOFF EQU   SMCABASE+2
SMCADUMP EQU   SMCAMISC
SMCABSW  EQU   SMCAMISC
SMCADBSY EQU   SMCAMISC
SMCAPSDP EQU   SMCAMISC
SMCAFIRT EQU   SMCAMISC
SMCAOPI  EQU   SMCAMISC
SMCAMAN  EQU   SMCAMISC
SMCAFGND EQU   SMCAOPT
SMCATDS  EQU   SMCAOPT
SMCARS01 EQU   SMCAOPT
SMCAEXT  EQU   SMCAOPT
SMCAOPT2 EQU   SMCAOPT
SMCAOPT1 EQU   SMCAOPT
RTTOLFCT EQU   DEVCHARS+18
RTTOLFLG EQU   RTDVFLGS
@NM00117 EQU   RTDVFLGS
RTKABFLG EQU   RTDVFLGS
@NM00116 EQU   RTDVFLGS
RTBONK   EQU   DEVCHARS+16
RTBOKLB  EQU   RTBOKAB+1
RTBOKNLB EQU   RTBOKAB
RTTRKSIZ EQU   DEVCHARS+12
RTNOTRKS EQU   DEVCHARS+10
RTNOCYLS EQU   DEVCHARS+8
RTMXDBLK EQU   DEVCHARS+4
RTCLSTYP EQU   RTDEVUCB+2
@NM00115 EQU   RTDEVUCB
@NM00114 EQU   RGATTSG1
RGATSUP1 EQU   RGATTSG1
@NM00113 EQU   RGATTR1
RGATTUPG EQU   RGATTR1
CTGDSNUS EQU   CTGATR2
@NM00112 EQU   CTGATR2
CTGDSSSH EQU   CTGATR2
CTGDSISH EQU   CTGATR2
CTGTRKOV EQU   CTGATR1
CTGDSTPX EQU   CTGATR1
CTGDSINH EQU   CTGATR1
CTGDSREC EQU   CTGATR1
CTGDSERA EQU   CTGATR1
CTGDSREU EQU   CTGATR1
CTGDSUNQ EQU   CTGATR1
CTGDSSPD EQU   CTGATR1
SPCROUND EQU   SPCOPTNS
SPCALXRQ EQU   SPCOPTNS
SPCMXIGR EQU   SPCOPTNS
SPCCNTIG EQU   SPCOPTNS
@NM00111 EQU   SPCOPTNS
SPCRQTYP EQU   SPCOPTNS
SPCSECDQ EQU   SPACEPRM+3
SPCPRIMQ EQU   SPACEPRM
LTVOLSER EQU   LTENTRY+2
LTRETCD2 EQU   LTRETCOD+1
LTRETCD1 EQU   LTRETCOD
LTLENGTH EQU   USERLIST
USERAREV EQU   USERAREC+2
USERAREL EQU   USERAREC
USVRMDUL EQU   PASSGO+42
PASSATMP EQU   PASSGO+40
PASSPRMT EQU   PASSGO+32
READPW   EQU   PASSWORD+24
UPDATEPW EQU   PASSWORD+16
CIPW     EQU   PASSWORD+8
MASTERPW EQU   PASSWORD
ASCI     EQU   ASGO+1
ASTYPE   EQU   ASGO
CVLSER   EQU   MWA+259
TTR2     EQU   MWA+256
BIN0     EQU   CVOLIND+3
TTR1     EQU   CVOLIND
@NM00103 EQU   MWA+242
FSN      EQU   VLST+10
VOLSER   EQU   VLST+4
DEVTYP   EQU   VLST
VOLENTCT EQU   MWA
CTGCVCC  EQU   CTGCV+50
CTGCVDEV EQU   CTGCVDSN
CTGCVVOL EQU   CTGCV
CTGVLTTR EQU   CTGVLX+12
@NM00102 EQU   CTGVLX
CTGVLSEQ EQU   CTGVL+10
CTGVLDEV EQU   CTGVL+6
CTGVLVOL EQU   CTGVL
CTGWAGB  EQU   CTGWA+12
CTGWAGCT EQU   CTGWA+10
CTGWAUCT EQU   CTGWA+8
CTGWAVCT EQU   CTGWA+6
CTGWALV  EQU   CTGWA+4
CTGFVWKA EQU   CTGFV+88
CTGFVPWD EQU   CTGFV+84
CTGFVNAM EQU   CTGFV+80
CTGFVUPG EQU   CTGFVGAT
CTGFVEXT EQU   CTGFVLMT
CTGFVLRS EQU   CTGFV+68
CTGFVBUF EQU   CTGFV+64
CTGFVATR EQU   CTGFV+60
CTGFVFSN EQU   CTGFVAMD
CTGFVTTR EQU   CTGFVSPC
CTGFVDVT EQU   CTGFV+48
CTGFVRNG EQU   CTGFV+44
CTGFVVLT EQU   CTGFV+40
CTGFVCRE EQU   CTGFV+36
CTGFVEXP EQU   CTGFV+32
CTGFVOWN EQU   CTGFV+28
CTGFVSTY EQU   CTGFV+24
CTGFVIND EQU   CTGFV+16
CTGFVVCH EQU   CTGFV+12
CTGFVICH EQU   CTGFV+8
CTGFVDCH EQU   CTGFV+4
@NM00101 EQU   CTGFV+3
CTGFVELM EQU   CTGFV+2
@NM00100 EQU   CTGFVPRO
CTGFVDRC EQU   CTGFVPRO
CTGFVNDC EQU   CTGFVPRO
CTGFVRVL EQU   CTGFVPRO
CTGFVAVL EQU   CTGFVPRO
CTGFVTYP EQU   CTGFV
CAXCRACB EQU   IGGCAXWA+112
CAXJDE   EQU   IGGCAXWA+108
CAXCCA   EQU   IGGCAXWA+104
CAXOPEWA EQU   IGGCAXWA+100
COPACB   EQU   CAXOPLST+1
@NM00099 EQU   COPTS
CENLST   EQU   COPTS
@NM00098 EQU   CAXCNAM+22
CAXRADDN EQU   CAXCNAM+14
CAXRATEP EQU   CAXCNAM+10
CAXRACTS EQU   CAXCNAM+6
CAXVOLID EQU   CAXCNAM
CAXRPL   EQU   IGGCAXWA+48
CAXRPLCT EQU   IGGCAXWA+46
CAXASID  EQU   IGGCAXWA+44
CAXFDCI  EQU   CAXCCR+9
CAXCDCI  EQU   CAXCCR+6
CAXNFCI  EQU   CAXCCR+3
CAXHACI  EQU   CAXCCR
CAXUCB   EQU   IGGCAXWA+28
CAXACB   EQU   IGGCAXWA+24
CAXDRWP  EQU   IGGCAXWA+20
CAXSCHWA EQU   IGGCAXWA+16
CAXATIOT EQU   IGGCAXWA+12
CAXACT   EQU   IGGCAXWA+11
@NM00097 EQU   CAXFLG3
CAXF3B6  EQU   CAXFLG3
CAXF3B5  EQU   CAXFLG3
@NM00096 EQU   CAXFLG3
CAXF3ANE EQU   CAXFLG3
CAXF3AT  EQU   CAXFLG3
CAXF2VTU EQU   CAXFLG2
CAXF2REC EQU   CAXFLG2
CAXF2CA  EQU   CAXFLG2
CAXF2CLR EQU   CAXFLG2
CAXF2IOE EQU   CAXFLG2
CAXF2NCR EQU   CAXFLG2
CAXF2NDD EQU   CAXFLG2
CAXF2DT  EQU   CAXFLG2
CAXSCR   EQU   CAXFLGS
CAXCMR   EQU   CAXFLGS
CAXMCT   EQU   CAXFLGS
CAXCMP   EQU   CAXFLGS
CAXEOV   EQU   CAXFLGS
CAXCLS   EQU   CAXFLGS
CAXOPN   EQU   CAXFLGS
CAXBLD   EQU   CAXFLGS
CAXCHN   EQU   IGGCAXWA+4
@NM00095 EQU   IGGCAXWA+1
CAXID    EQU   IGGCAXWA
CBSVPTR  EQU   CBSVSRT+4
CBSVUSE  EQU   CBSVSRT
CBSCRTCB EQU   AMCBS+28
CBSCRACA EQU   AMCBS+24
CBSCAXCN EQU   AMCBS+20
CBSMCUCB EQU   CBSCMP
CBSCBP   EQU   AMCBS+12
CBSACB   EQU   AMCBS+8
CBSMCSTA EQU   AMCBS+4
CBSSIZ   EQU   AMCBS+2
CBSID    EQU   AMCBS
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00092 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00091 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00090 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00089 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00088 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00087 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00086 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00085 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00084 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00083 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
@NM00058 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBRV143 EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBRSV48 EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00057 EQU   TCB+296
TCBSCBQ  EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBRSV36 EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBRSV35 EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00056 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBRSV04 EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00055 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
NEXTTCB  EQU   TCBWORDS
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00054 EQU   CVTFIX+248
@NM00053 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTRSV99 EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRSV37 EQU   CVTDMSR
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVT      EQU   CVTMAP
VARINFO  EQU   VARFIELD+2
@NM00052 EQU   EXTRCDPT+3
NREPCV   EQU   CATRCD+47
@NM00051 EQU   CATRCD+26
RCDDICTS EQU   CATRCD+22
RCDRACTS EQU   CATRCD+18
RCDCRADT EQU   CATRCD+14
RCDCRACI EQU   CATRCD+11
RCDCRAVL EQU   CATRCD+5
RCDRELID EQU   CATRCD+4
RCDKEYTY EQU   CATRCD
CATGOGC  EQU   CATGOGC1
@NM00050 EQU   CATGOFLG
CCACPE4  EQU   CCARAB+16
@NM00049 EQU   CCARAB+2
CCARABRI EQU   CCARAB+1
CCARBUPD EQU   CCARABFL
@NM00048 EQU   CCARABFL
CCARBPA  EQU   CCARABFL
CCARBWR  EQU   CCARABFL
CCARBU2  EQU   CCARABFL
CCARBU1  EQU   CCARABFL
CCARBUR  EQU   CCARABFL
DIC2GC   EQU   DIC2ENT+3
DIC2LC   EQU   DIC2ENT+2
DIC2ST   EQU   DIC2ENT+1
@NM00047 EQU   DIC2FLGS
DIC2UPGD EQU   DIC2FLGS
DIC2SCRA EQU   DIC2FLGS
DIC2MV   EQU   DIC2FLGS
DIC2FLG  EQU   DIC2FLGS
DIC2COMB EQU   DIC2FLGS
DIC2REP  EQU   DIC2FLGS
DIC2VAR  EQU   DIC2FLGS
DICTGC   EQU   DICTENT+3
DICTLC   EQU   DICTENT+2
DICTST   EQU   DICTENT+1
@NM00046 EQU   DICTFLGS
DICTUPGD EQU   DICTFLGS
DICTSCRA EQU   DICTFLGS
DICTMV   EQU   DICTFLGS
DICTFLG  EQU   DICTFLGS
DICTCOMB EQU   DICTFLGS
DICTREP  EQU   DICTFLGS
DICTVAR  EQU   DICTFLGS
ENTNAMEV EQU   ENTNAMES+1
ENTNAMET EQU   ENTNAMES
WKALEN2  EQU   USERWKA+2
WKALEN1  EQU   USERWKA
CTGFLNG  EQU   CTGFLDAT
CTGFLCHN EQU   CTGFL+12
CTGFLDTS EQU   CTGFLDRE
@NM00045 EQU   CTGFLDRE
CTGFLDCD EQU   CTGFL+1
CTGFLDNO EQU   CTGFL
CTGFIELD EQU   CTGPL+28
CTGPSWD  EQU   CTGJSCB
@NM00043 EQU   CTGFBFLG
CTGNGDSN EQU   CTGFBFLG
CTGGDGB  EQU   CTGFBFLG
CTGKEEP  EQU   CTGFBFLG
CTGPAR   EQU   CTGFBFLG
CTGFDBK  EQU   CTGNEWNM
CTGNOFLD EQU   CTGPL+19
CTGTYPE  EQU   CTGPL+18
@NM00042 EQU   CTGDSORG
CTGOPTNS EQU   CTGDSORG
@NM00041 EQU   CTGOPTN4
CTGDOCAT EQU   CTGOPTN4
CTGLBASE EQU   CTGOPTN4
CTGAM0   EQU   CTGOPTN3
CTGNUM   EQU   CTGOPTN3
CTGSRH   EQU   CTGOPTN3
CTGGDGL  EQU   CTGOPTN3
CTGSUPLT EQU   CTGOPTN3
CTGFUNC  EQU   CTGOPTN3
@NM00040 EQU   CTGOPTN2
CTGSCR   EQU   CTGOPTN2
CTGOVRID EQU   CTGOPTN2
CTGDISC  EQU   CTGOPTN2
CTGGTNXT EQU   CTGOPTN2
CTGRCATN EQU   CTGVMNT
CTGGTALL EQU   CTGREL
CTGNSVS  EQU   CTGEXT
CTGGENLD EQU   CTGOPTN1
CTGCNAME EQU   CTGOPTN1
CTGNAME  EQU   CTGOPTN1
CTGREAD  EQU   CTGOPTN1
CTGUPD   EQU   CTGOPTN1
CTGCI    EQU   CTGOPTN1
CTGMAST  EQU   CTGOPTN1
CTGBYPSS EQU   CTGOPTN1
CCAEND   EQU   IGGCCA+1492
CCADGDGA EQU   IGGCCA+1488
CCARETRX EQU   CCAERCDX+1
CCARESNX EQU   CCAERCDX
CCAMODDX EQU   CCAPROBX
CCASMFRC EQU   CCASMFP+2
CCASMFMD EQU   CCASMFP
CCAREWKA EQU   IGGCCA+1476
CCAVTS   EQU   IGGCCA+1468
CCARAVCA EQU   IGGCCA+1460
CCARANCA EQU   IGGCCA+1452
CCADICTS EQU   IGGCCA+1448
CCASUMTT EQU   IGGCCA+1445
@NM00039 EQU   CCAFLG10
CCAPRANX EQU   CCAFLG10
CCARARTC EQU   CCAFLG10
CCARAFEV EQU   CCAFLG10
CCACATAC EQU   CCAFLG10
CCAPDMW  EQU   CCAFLG10
CCAINCPL EQU   CCAFLG10
@NM00038 EQU   CCARALSA+2
CCACRABT EQU   CCARALSA
CCARAREC EQU   IGGCCA+1436
CCARARBA EQU   IGGCCA+1432
CCARARPL EQU   IGGCCA+1428
CCARAACB EQU   IGGCCA+1424
CCACRACI EQU   IGGCCA+1420
CCASBASE EQU   IGGCCA+1417
CCATNQCT EQU   IGGCCA+1416
CCACUMPL EQU   IGGCCA+1412
CCADSPWA EQU   CCABZSAV
CCAMODNM EQU   CCAREGS+4
@NM00037 EQU   CCAREGS
@NM00036 EQU   IGGCCA+1057
@NM00035 EQU   CCARVFG1
RVESBOR  EQU   CCARVFG1
RVESBO   EQU   CCARVFG1
RVCMSFG  EQU   CCARVFG1
RVARFI   EQU   CCARVFG1
RVCCAV   EQU   CCARVFG1
ARFSBECH EQU   CCAARFWA+12
ARFSBSCH EQU   CCAARFWA+8
ARFGMADR EQU   CCAARFWA+4
ARFLEN   EQU   ARFGMLEN+1
ARFGMLP  EQU   ARFGMLEN
CCAMNLL  EQU   CCAMNCAT+248
MNATARG2 EQU   CCAMNAT+244
MNATARG1 EQU   CCAMNAT+241
MNATSCLS EQU   MNATFLGS
@NM00034 EQU   MNATFLGS
MNATVAL  EQU   MNATFLGS
@NM00033 EQU   CCAMNAT+1
@NM00032 EQU   MNATTOP
CCABMRB2 EQU   IGGCCA+740
CCABMRB1 EQU   IGGCCA+736
CCABMWK4 EQU   IGGCCA+732
CCABMWK3 EQU   IGGCCA+728
CCABMWK2 EQU   IGGCCA+724
CCABMWK1 EQU   IGGCCA+720
CCABMSTR EQU   IGGCCA+718
CCABMBYT EQU   IGGCCA+716
CCABMBTL EQU   IGGCCA+714
CCABMBT1 EQU   IGGCCA+712
CCABMEND EQU   IGGCCA+708
CCABMPTR EQU   IGGCCA+704
CCABMGOP EQU   IGGCCA+700
CCABMPAD EQU   IGGCCA+699
@NM00031 EQU   IGGCCA+697
CCABMOST EQU   CCABMOFG
CCABMOTR EQU   CCABMOUT+2
CCABMONN EQU   CCABMOUT
@NM00030 EQU   CCABMINP+7
CCABMLST EQU   CCABMFLG
CCABMCCK EQU   CCABMFLG
CCABMSET EQU   CCABMFLG
CCABMCHK EQU   CCABMFLG
CCABMST  EQU   CCABMFLG
CCABMMIN EQU   CCABMINP+4
CCABMLIM EQU   CCABMINP+2
CCABMTRK EQU   CCABMINP
CCAR14S  EQU   IGGCCA+680
CCAXLATE EQU   IGGCCA+640
CCADEL2  EQU   IGGCCA+637
CCADEL1  EQU   IGGCCA+634
CCAVAR1  EQU   IGGCCA+614
CCAVAR   EQU   IGGCCA+594
CCADELN  EQU   IGGCCA+592
CCAVARPT EQU   IGGCCA+588
CCARBASE EQU   IGGCCA+584
CCARRAB  EQU   IGGCCA+580
CCAVARLN EQU   IGGCCA+578
CCACI3   EQU   IGGCCA+575
CCACI2   EQU   IGGCCA+572
CCACI1   EQU   IGGCCA+569
CCACHAIN EQU   IGGCCA+566
CCASMFG2 EQU   CCASMFLG+1
@NM00029 EQU   CCASMFG1
CCANORBA EQU   IGGCCA+555
CCARESUM EQU   CCAFLG9
CCARAICI EQU   CCAFLG9
CCARAACT EQU   CCAFLG9
CCAUCRA  EQU   CCAFLG9
CCARACR  EQU   CCAFLG9
CCARALRD EQU   CCAFLG9
CCARAEOV EQU   CCAFLG9
CCARABYC EQU   CCAFLG9
CCAAUCAT EQU   CCAFLG8
CCALEOD  EQU   CCAFLG8
CCAVRIND EQU   CCAFLG8
CCALPIND EQU   CCAFLG8
CCASCICK EQU   CCAFLG8
CCASCRA  EQU   CCAFLG8
CCAVBUFI EQU   CCAFLG8
CCADSRCL EQU   CCAFLG8
CCACRABU EQU   CCAFLG7
CCAFEOV  EQU   CCAFLG7
CCAROREQ EQU   CCAFLG7
CCAONCE  EQU   CCAFLG7
CCASMFA  EQU   CCAFLG7
CCALSP   EQU   CCAFLG7
CCALCPL  EQU   IGGCCA+548
CCAALPTR EQU   IGGCCA+540
CCAILNG2 EQU   IGGCCA+536
CCAILNG3 EQU   IGGCCA+532
CCASDWAP EQU   IGGCCA+528
CCACWAP  EQU   IGGCCA+524
CCACDTCT EQU   IGGCCA+522
CCADTCT  EQU   IGGCCA+520
CCACDTA  EQU   IGGCCA+516
CCADTA   EQU   IGGCCA+512
CCASVCI1 EQU   IGGCCA+509
CCASVCI  EQU   IGGCCA+506
CCADISP  EQU   IGGCCA+504
CCAREPCT EQU   IGGCCA+502
CCADIFF  EQU   IGGCCA+500
CCADLEN  EQU   IGGCCA+498
CCAIXTPL EQU   IGGCCA+496
CCAGRHI1 EQU   CCASSEQ
CCARCDID EQU   CCAGRGC
@NM00028 EQU   IGGCCA+492
CCANEFV  EQU   IGGCCA+491
CCAGVEXT EQU   IGGCCA+488
CCANEVV  EQU   IGGCCA+486
CCAGVCT  EQU   IGGCCA+484
CCARABSM EQU   CCAIDPT3
CCAIDPT2 EQU   IGGCCA+476
CCACNIX  EQU   IGGCCA+472
CCARBAL  EQU   IGGCCA+470
CCATLEN  EQU   CCATLNG
CCARBA2  EQU   CCARBA+16
CCARBA1  EQU   CCARBA+12
CCATT    EQU   CCARBA+10
CCACCHH2 EQU   CCACRADT
CCACCHH1 EQU   CCACRAVL+2
CCASS    EQU   CCACRAVL
CCATEST  EQU   IGGCCA+444
CCATNO   EQU   IGGCCA+442
CCATREL  EQU   IGGCCA+410
CCATNUM  EQU   IGGCCA+408
CCATNREL EQU   IGGCCA+406
CCAIXREL EQU   IGGCCA+404
CCAIXFPL EQU   IGGCCA+402
@NM00027 EQU   IGGCCA+400
CCASN1   EQU   CCASN
CCALREL1 EQU   CCALREL
CCAGC    EQU   IGGCCA+395
CCACBASE EQU   IGGCCA+392
CCARABL  EQU   IGGCCA+388
CCARABF  EQU   IGGCCA+384
CCAMCPL  EQU   CCAXCPL
CCARABPT EQU   IGGCCA+368
CCATFLPT EQU   CCAFLPT
CCAILNG  EQU   IGGCCA+360
CCASL    EQU   IGGCCA+358
CCAGOPLN EQU   IGGCCA+356
CCACPE71 EQU   IGGCCA+352
CCAIDPT  EQU   CCACPE7
CCARABSE EQU   CCACPE61
CCACPE53 EQU   IGGCCA+336
CCACPE52 EQU   IGGCCA+332
CCACPE51 EQU   IGGCCA+328
CCALUME  EQU   IGGCCA+324
CCAEXCMS EQU   CCACMS+4
CCACMSWA EQU   CCACMS
CCARPRM  EQU   IGGCCA+312
@NM00026 EQU   CCAMSSPL+10
@NM00025 EQU   CCAMSSPL+8
CCAMNPTR EQU   CCAMSSPL+4
CCAMNLLP EQU   CCAMSSPL
CCAMLRET EQU   IGGCCA+296
CCAEDUCB EQU   CCAEQDQ+12
CCAEDRNM EQU   CCAEQDQ+8
CCAEDQNM EQU   CCAEQDQ+4
CCAEDRCD EQU   CCAEQDQ+3
@NM00024 EQU   CCAEDOPT
CCAEDSHR EQU   CCAEDOPT
CCAEDRLN EQU   CCAEQDQ+1
CCAEDXFF EQU   CCAEQDQ
CCAASCI  EQU   IGGCCA+271
CCAASCIX EQU   IGGCCA+270
CCACRRP  EQU   IGGCCA+269
CCAASCIK EQU   IGGCCA+268
CCAEXTTH EQU   CCAEXTDE+6
CCAEXTHH EQU   CCAEXTAD+2
CCAEXTCC EQU   CCAEXTAD
CCAEXTSS EQU   CCAEXTDE
CCASSVOL EQU   CCADESA+2
CCAIXEXT EQU   CCADESA+1
CCANDEXT EQU   CCADESA
CCARPL1  EQU   IGGCCA+220
CCAQLEN  EQU   IGGCCA+219
CCASC    EQU   IGGCCA+218
CCATQDB  EQU   CCATIQRN+2
CCATASID EQU   CCATIQRN
CCARPLT  EQU   IGGCCA+211
CCARPLX  EQU   IGGCCA+210
CCARPLF  EQU   IGGCCA+209
CCARPLK  EQU   IGGCCA+208
CCACPE45 EQU   CCAR5SEG+8
CCACPE35 EQU   CCAR5SEG+4
CCACPE25 EQU   CCAR5SEG
@NM00023 EQU   CCARAB5+2
CCAR5RPL EQU   CCARAB5+1
CCAR5UPD EQU   CCAR5FLG
@NM00022 EQU   CCAR5FLG
CCAR5PA  EQU   CCAR5FLG
CCAR5WR  EQU   CCAR5FLG
CCAR5U2  EQU   CCAR5FLG
CCAR5U1  EQU   CCAR5FLG
CCAR5UR  EQU   CCAR5FLG
CCACPE44 EQU   CCAR4SEG+8
CCACPE34 EQU   CCAR4SEG+4
CCACPE24 EQU   CCAR4SEG
@NM00021 EQU   CCARAB4+2
CCAR4RPL EQU   CCARAB4+1
CCAR4UPD EQU   CCAR4FLG
@NM00020 EQU   CCAR4FLG
CCAR4PA  EQU   CCAR4FLG
CCAR4WR  EQU   CCAR4FLG
CCAR4U2  EQU   CCAR4FLG
CCAR4U1  EQU   CCAR4FLG
CCAR4UR  EQU   CCAR4FLG
CCACPE43 EQU   CCAR3SEG+8
CCACPE33 EQU   CCAR3SEG+4
CCACPE23 EQU   CCAR3SEG
CCAR3REC EQU   CCARAB3+4
@NM00019 EQU   CCARAB3+2
CCAR3RPL EQU   CCARAB3+1
CCAR3UPD EQU   CCAR3FLG
@NM00018 EQU   CCAR3FLG
CCAR3PA  EQU   CCAR3FLG
CCAR3WR  EQU   CCAR3FLG
CCAR3U2  EQU   CCAR3FLG
CCAR3U1  EQU   CCAR3FLG
CCAR3UR  EQU   CCAR3FLG
CCACPE42 EQU   CCAR2SEG+8
CCACPE32 EQU   CCAR2SEG+4
CCACPE22 EQU   CCAR2SEG
CCAR2REC EQU   CCARAB2+4
@NM00017 EQU   CCARAB2+2
CCAR2RPL EQU   CCARAB2+1
CCAR2UPD EQU   CCAR2FLG
@NM00016 EQU   CCAR2FLG
CCAR2PA  EQU   CCAR2FLG
CCAR2WR  EQU   CCAR2FLG
CCAR2U2  EQU   CCAR2FLG
CCAR2U1  EQU   CCAR2FLG
CCAR2UR  EQU   CCAR2FLG
CCACPE41 EQU   CCAR1SEG+8
CCACPE31 EQU   CCAR1SEG+4
CCACPE21 EQU   CCAR1SEG
@NM00015 EQU   CCARAB1+2
CCAR1RPL EQU   CCARAB1+1
CCAR1UPD EQU   CCAR1FLG
@NM00014 EQU   CCAR1FLG
CCAR1PA  EQU   CCAR1FLG
CCAR1WR  EQU   CCAR1FLG
CCAR1U2  EQU   CCAR1FLG
CCAR1U1  EQU   CCAR1FLG
CCAR1UR  EQU   CCAR1FLG
CCACPE40 EQU   CCAR0SEG+8
CCACPE30 EQU   CCAR0SEG+4
CCACPE20 EQU   CCAR0SEG
CCAR0REC EQU   CCARAB0+4
@NM00013 EQU   CCARAB0+2
CCAR0RPL EQU   CCARAB0+1
CCAR0UPD EQU   CCAR0FLG
@NM00012 EQU   CCAR0FLG
CCAR0PA  EQU   CCAR0FLG
CCAR0WR  EQU   CCAR0FLG
CCAR0U2  EQU   CCAR0FLG
CCAR0U1  EQU   CCAR0FLG
CCAR0UR  EQU   CCAR0FLG
@NM00011 EQU   CCASRCH+3
CCASRCIN EQU   CCASRID
CCANPCCB EQU   IGGCCA+36
CCADPL   EQU   CCARB
CCALBCYL EQU   CCATCB
CCAMOD   EQU   CCAFLG6
CCAEXT   EQU   CCAFLG6
CCAREUSE EQU   CCAFLG6
CCASUPFD EQU   CCAFLG6
CCAINIT  EQU   CCAFLG6
CCAMNOSP EQU   CCAFLG6
CCADELP  EQU   CCAFLG6
CCAMCODR EQU   CCAFLG6
CCATEX2  EQU   CCAFLG5
CCATEX1  EQU   CCAFLG5
CCATEX   EQU   CCAFLG5
CCATHIT  EQU   CCAFLG5
CCAMODPA EQU   CCAFLG5
CCAMEX1  EQU   CCAFLG5
CCAMEX   EQU   CCAFLG5
CCAMEX2  EQU   CCAFLG5
CCATCOMP EQU   CCAFLG4
CCAGVNE  EQU   CCAFLG4
CCAGVEX  EQU   CCAFLG4
CCAGVNBS EQU   CCAFLG4
CCAGVNF  EQU   CCAFLG4
CCAGVNC  EQU   CCAFLG4
CCAF4BYS EQU   CCAFLG4
CCAF4DRQ EQU   CCAFLG4
CCAEGREC EQU   CCAFLG3
CCALFT   EQU   CCAFLG3
CCAELC2  EQU   CCAFLG3
CCANF    EQU   CCAFLG3
CCAEXGR2 EQU   CCAFLG3
CCAGDSP  EQU   CCAFLG3
CCAGC4   EQU   CCAFLG3
CCAEXGR1 EQU   CCAFLG3
CCAF2SMO EQU   CCAFLG2
CCAF2CB  EQU   CCAF2COB
CCAF2CO  EQU   CCAF2COB
CCAF2RHS EQU   CCAFLG2
CCAF2XEQ EQU   CCAFLG2
CCAF2CCT EQU   CCAFLG2
CCAF2NVC EQU   CCAFLG2
CCAF2SYS EQU   CCAFLG2
CCAF1DK  EQU   CCAFLG1
CCAF1CR  EQU   CCAFLG1
CCAF1LRD EQU   CCAFLG1
CCAF1CNS EQU   CCAFLG1
CCAF1LPS EQU   CCAFLG1
CCACD2   EQU   IGGCCA+13
@NM00010 EQU   IGGCCA+8
CCACDR   EQU   CCAREASN
CCAMODID EQU   CCAPROB
CCASZ    EQU   IGGCCA+2
CCAID    EQU   IGGCCA
SMF69END EQU   SMFRCD69+106
SMF69LNT EQU   SMFRCD69+54
SMF69LNC EQU   SMFRCD69+52
SMF69NUT EQU   SMFRCD69+50
SMF69NUC EQU   SMFRCD69+48
SMF69UID EQU   SMFRCD69+34
SMF69RDT EQU   SMFRCD69+30
SMF69RST EQU   SMFRCD69+26
SMF69JNM EQU   SMFRCD69+18
SMF69MOD EQU   SMFRCD69+16
SMF69SID EQU   SMFRCD69+14
SMF69DTE EQU   SMFRCD69+10
SMF69TME EQU   SMFRCD69+6
SMF69VS1 EQU   SMF69SYS
SMF69VS2 EQU   SMF69SYS
@NM00009 EQU   SMF69SYS
SMF69SEG EQU   SMFRCD69+2
SMF68END EQU   SMFRCD68+174
SMF68UID EQU   SMFRCD68+34
SMF68RDT EQU   SMFRCD68+30
SMF68RST EQU   SMFRCD68+26
SMF68JNM EQU   SMFRCD68+18
SMF68MOD EQU   SMFRCD68+16
SMF68SID EQU   SMFRCD68+14
SMF68DTE EQU   SMFRCD68+10
SMF68TME EQU   SMFRCD68+6
SMF68VS1 EQU   SMF68SYS
SMF68VS2 EQU   SMF68SYS
@NM00008 EQU   SMF68SYS
SMF68SEG EQU   SMFRCD68+2
SMF67END EQU   SMFRCD67+134
@NM00007 EQU   SMF67DTY
SMF67ALX EQU   SMF67DTY
SMF67GDB EQU   SMF67DTY
SMF67ALN EQU   SMF67DTY
SMF67CAT EQU   SMF67DTY
SMF67IDS EQU   SMF67DTY
SMF67DS  EQU   SMF67DTY
SMF67CL  EQU   SMF67DTY
SMF67AIX EQU   SMF67IND
SMF67PTH EQU   SMF67IND
@NM00006 EQU   SMF67IND
SMF67SCR EQU   SMF67IND
SMF67UNC EQU   SMF67IND
SMF67UID EQU   SMFRCD67+34
SMF67RDT EQU   SMFRCD67+30
SMF67RST EQU   SMFRCD67+26
SMF67JNM EQU   SMFRCD67+18
SMF67MOD EQU   SMFRCD67+16
SMF67SID EQU   SMFRCD67+14
SMF67DTE EQU   SMFRCD67+10
SMF67TME EQU   SMFRCD67+6
SMF67VS1 EQU   SMF67SYS
SMF67VS2 EQU   SMF67SYS
@NM00005 EQU   SMF67SYS
SMF67SEG EQU   SMFRCD67+2
SMFREL   EQU   SMFLAG
@NM00001 EQU   SMFLAG
SMFCAND  EQU   SMFLAG
SMFRCD   EQU   SMFELT
SMF63END EQU   SMFRCD63+136
SMF63OCE EQU   SMFRCD63+136
@NM00004 EQU   SMF63DTY
@NM00003 EQU   SMF63IND
SMF63ALT EQU   SMF63IND
SMF63DEF EQU   SMF63IND
SMF63MOD EQU   SMF63CPU+2
SMF63SID EQU   SMF63CPU
SMF63DTE EQU   SMFRCD63+10
SMF63TME EQU   SMFRCD63+6
SMF63VS1 EQU   SMF63SYS
SMF63VS2 EQU   SMF63SYS
@NM00002 EQU   SMF63SYS
@NM00082 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00081 EQU   PSA+1040
PSAUSEND EQU   PSA+1040
PSARV062 EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00080 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00079 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSARV010 EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSAIPCRP EQU   PSASUP1
PSAIPCDR EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00078 EQU   FLCFSA
@NM00077 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00076 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00075 EQU   FLCIOA
@NM00074 EQU   FLCMCLA+15
@NM00073 EQU   FLCMCLA+14
@NM00072 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00071 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00070 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00069 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00068 EQU   FLCPER
@NM00067 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00066 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00065 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00064 EQU   FLCPIILC
@NM00063 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00062 EQU   FLCSVILC
@NM00061 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00060 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00059 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00234 EQU   @RC00225
@RT00436 EQU   @RC00404
@RT00497 EQU   @RC00487
@PB00013 EQU   @EL00001
@ENDDATA EQU   *
         END   IGG0CLBV,(C'PLS2332',0701,76012)
