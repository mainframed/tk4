8104       TITLE ' IGG08104 - LOAD FCB, VERIFY FCB, FREE AREAS'  Y02072
IGG08104 CSECT                                                   M0191
* /*  START OF SPECIFICATIONS****                             @Z40MSAP
*01*  PROCESSOR = ASSEMXF:
**** END OF SPECIFICATIONS **                                @Z40MSAP*/
*
*MODULE-NAME = IGG08104
*
*DESCRIPTIVE-NAME = SETPRT FCB LOAD AND VERIFY
*
*COPYRIGHT = NONE
*
*STATUS = LEVEL 001
*
*FUNCTION = EXECUTE LOADING OF FORMS CONTROL BUFFER (FCB)
*         - WHEN VERIFY SPECIFIED PRINT OUT FCB IMAGE FOR VISUAL
*           VERIFICATION AND HAVE OPERATOR VERIFY FORMS ALIGNMENT
*         - WHEN ALIGN SPECIFIED, HAVE OPERATOR VERIFY FORMS ALIGNMENT
*         - UPDATE UCB TO SHOW STATUS OF FCB
*         - DELETE FCB IMAGE LOADED
*         - FREE SETPRT MESSAGE/WORK AREA
*         - FREE BLDL PARAMETER LIST                             YM5703
*
*NOTES =
*    DEPENDENCIES = BLANK IS USED--CORRECTABLE BY REASSEMBLY.
*        THE FOLLOWING CHARACTER STRINGS ARE USED IN
*        TESTING OPERATOR REPLIES:
*        'V', 'R', 'C', 'RETRY', 'VERIFY', 'CANCEL'
*        THESE STRINGS ARE CONSIDERED TO BE OPERATING SYSTEM KEYWORDS
*        RATHER THAN LANGUAGE DEPENDENT PHRASES.
*
*        BLANKS ARE OR'ED TO ALL REPLIES TO CONVERT THEM TO UPPER CASE
*
*    RESTRICTIONS = NONE
*
*    REGISTER-CONVENTIONS = ALL REGISTER NAMES BEGIN WITH R
*        SEE EQUATES IMMEDIATELY FOLLOWING PROLOG
*
*    PATCH-LABEL = PATCH, AN AREA ASSEMBLED AS BINARY 0
*
*MODULE-TYPE =
*    PROCESSOR = OS/VS ASSEMBLER
*
*    MODULE-SIZE = 1100 DECIMAL BYTES
*
*    ATTRIBUTES = REENTRANT, ENABLED, PRIVELEGED,
*        EXECUTES IN SETPRT INVOKER KEY
*        CODE AT ENTRY POINT WTOR IS NON-PRIVELEGED
*
*ENTRY POINT = IGG08104
*    PURPOSE = SEE FUNCTION
*
*    LINKAGE = BRANCH FROM IGG08103
*
*INPUT =
*    REGISTER 4(RSPW) = WORK AREA ADDRESS
*    REGISTER R5/BYTE 0(RPAR) = UCS RETURN CODE
*    REGISTER R5/BYTES 1-3(RPAR) = PARAMETER LIST ADDRESS
*    REGISTER 6(RSVR) = SVRB EXTENDED SAVE AREA ADDRESS
*    REGISTER 8(RWK4) = ADDR OF IMAGE TO BE LOADED
*    REGISTER 9(RIOB) = IOB ADDRESS
*
*OUTPUT =
*    REGISTER 15(R15) = RETURN CODE (SEE EXITS)
*
*    MESSAGES = RETRIEVED FROM IGGMSG01
*      'IEC125A ERROR - REPEAT REPLY'
*      'IEC128D V XXXX,VERIFY FORMS ALIGNMENT'
*      'LINE NN CHANNEL NN FCB ID=XXXX SPACING=N LPI' - FCB HEADING VER
*      'CHANNEL' - INSERT FOR FCB VERIFICATION
*      'LINE NN CHANNEL NN' - FCB PRINT LINE FOR VERIFICATION
*      'LINE NN CHANNEL NN END' - FCB FINAL PRINT LINE FOR VERIFICATION
*
*    UCB = UPDATED TO REFLECT NEW FCB IMAGE
*
*    PRINTER = FORMS CONTROL BUFFER IS LOADED
*
*EXITS =
*    NORMAL = RETURN TO SUPERVISOR WITH RETURN CODE = 0 IN BITS 15-31
*             OF REGISTER 15 FOR SUCCESSFUL FCB OPERATION
*           = REGISTER 15 BITS 0-15 WITH UCS RETURN CODE
*
*    ERROR = RETURN TO SUPERVISOR WITH RETURN CODE IN BITS 15-31 OF
*            REGISTER 15 FOR UNSUCCESSFUL FCB OPERATION =
*              X'0C' - PERMANENT I/O ERROR DURING FCB LOAD
*              X'10' - PERMAINENT I/O ERROR DURING FCB IMAGE VERIFY
*              X'14' - OPERATOR CANCELED REPLY TO IEC128D
*
*EXTERNAL REFERENCES =
*    ROUTINES = EXCP     (SVC 0)
*               WAIT     (SVC 1)
*               DELETE   (SVC 9)
*               IMGLIB   (SVC 105)
*               FREEMAIN (SVC 10)
*               SYNCH    (SVC 12)
*               WTOR     (SVC 35)
*               SETLOCK  (BALR 14,13)
*               DEBCHK   (BALR 14,15)
*
*    DATA-AREAS = SPP - SETPRT PARM LIST
*                 SPW5 - BLDL PARM LIST                        @Z40MSAP
*                 SPW - SETPRT WORK AREA
*                 FCBIMAGE - FORMS CONTROL BUFFER IMAGE
*                 MSG CSECT - IGGMSG01
*                 SPRBXSV - SVRB EXTENDED SAVE AREA
*
*    CONTROL-BLOCKS = DCB, IOB, UCB, ECB, DEB
*
*    MACROS-ACTION = EXCP, WAIT, DELETE, IMGLIB, FREEMAIN, SYNCH, WTOR,
*                    SETLOCK (OBTAIN AND RELEASE), MODESET
*
*    MACROS-MAPPING = IGGSPW, IHASPP, IHAFCBIM, IEZIOB, IEFUCBOB,
*                     IHAECB, IEZDEB, IHADCB
*
*CHANGE ACTIVITY = AS FOLLOWS
*
*NOTE =  THIS MODULE WAS BROUGHT UP TO STANDARDS FOR VS2-2
*        WHICH CAUSED ALL PREVIOUS RELEASE SEQUENCE NUMBER DELETIONS TO
*        BECOME INVALID.
*
*         VS2 RELEASE 4 CHANGES
*                                                              @Z40MSMI
*
*         VS2 RELEASE 3 CHANGES
*A195700-196200,202500,419100-419120,419900,478100-478200,      ZA02199
*A479520,503500-504000,510500                                   ZA02199
*A420000                                                       @ZA07594
*C405000,459000,461000                                         @ZA07594
*D318000-322500                                                @ZA07594
*A348010                                                       @ZA10220
*         VS2 RELEASE 3.7 CHANGES                              @ZA10228
*C074900,463000,465000,476000                                  @ZA10228
*C162150,162200,516123,517367,517375                           @ZA19734
*C162150,162180                                                @ZA20901
*A146900,176500-178500                                         @ZA20901
*C162150-162180                                                @ZA25004
*A450500,515481-515482                                         @ZA25004
*A178500,178700                                                @ZA28402
*C162150,162180,177500                                         @ZA28905
*A517320,517325                                                @ZA30716
*A188500                                                       @ZA32079
*         VS2 RELEASE 2 DELETIONS
*THE FOLLOWING DEVELOPMENT CODE WAS FOR VS2-2 - Y02072
*                                                                YM4640
*                                                                YM5703
*                                                                YM5919
*                                                                YA3018
*
*         VS1 RELEASE 2 DELETIONS
*THE FOLLOWING PTM'S WERE FIXED IN THIS RELEASE - 2963
*
*         RELEASE 21 DELETIONS
*THE FOLLOWING PTMS WERE FIXED IN THIS RELEASE - 0092, 0191, 1759
*THE FOLLOWING APARS WERE FIXED IN THIS RELEASE - 52367, 50699
*THE FOLLOWING DEVELOPMENT CODE WAS FOR 2245 SUPPORT - S21092
         EJECT
*
*   REGISTER CONVENTIONS USED THROUGH OUT ALL SETPRT EXECUTORS
*
R0       EQU   0                        PARAMETER REGISTER
RWK1     EQU   R0                       WORK REGISTER
R1       EQU   1                        PARAMETER REGISTER
RWK2     EQU   R1                       WORK REGISTER
RDCB     EQU   2                        USER'S DCB ADDR
RIMAGSAV EQU   RDCB                     REG TO SAVE ADDR OF FCB  Y02072
*                                         IMAGE                  Y02072
RBASE    EQU   3                        BASE REG
RCORE    EQU   4                        WORK AREA/MESSAGE ADDRESS
RPAR     EQU   5                        PARAMETER LIST ADDRESS
RSVR     EQU   6                        SVRB EXTENDED SAVE AREA
RRET     EQU   7                        WORK REGISTER
RWK4     EQU   8                        WORK REGISTER
RIOB     EQU   9                        ADDRESS OF LAST IOB USED
R10      EQU   10                       LIMIT FOR STM RANGE      Y02072
*                                       AND DEBCHK INPUT REG     Y02072
RUCB     EQU   10                       UCB ADDRESS
RDEB     EQU   11                       DEB ADDRESS
RWK5     EQU   12                       WORK REGISTER
RWK6     EQU   13                       WORK REGISTER
R14      EQU   14                       PARAMETER REGISTER
RWK7     EQU   R14                      WORK REGISTER
R15      EQU   15                       PARAMETER REGISTER
RWK8     EQU   R15                      WORK REGISTER
         EJECT
***********************************************************************
*              RETURN CODES
*
OKCOMP   EQU   X'00'                    RETURN CODE - SUCCESSFUL COMP
OPRCANCL EQU   X'14'                    RETURN CODE - OPER CAN @ZA10228
PERMIOER EQU   X'0C'                    RETURN CODE - PERM I/O ERR
*                                         LOADING FCB IMAGE
PERMIOEV EQU   X'10'                    RETURN CODE - PERM I/O ERR
*                                         VERIFYING FCB IMAGE
RCNOPEN  EQU   X'18'                    DCB NOT OPEN             Y02072
*
***********************************************************************
*              MESSAGE NUMBERS IN IGGMSG01
*        ALL MESSAGE NUMBERS HAVE BEEN DOUBLED IN THESE EQUATES
*        TO PROVIDE OFFSETS INTO THE MESSAGE CSECT.
*        THIS IS DEPENDENT ON L'MSGINDOF BEING 2.
*
MSG128   EQU   14*2                     IEC128D--VERIFY FORMS    Y02072
MSG125   EQU   8*2                      IEC125A--ERROR - REPEAT  Y02072
MSGFHEAD EQU   20*2                     LINE--FCB ID--SPACING    Y02072
MSGFCHAN EQU   19*2                     'CHANNEL' FILL IN        Y02072
MSGFLINE EQU   21*2                     LINE MESSAGE             Y02072
MSGFFOOT EQU   22*2                     LAST LINE MESSAGE        Y02072
*
***********************************************************************
*              OTHER EQUATES
*
CMDRETRY EQU   X'80'                    MASK FOR COMMAND RETRY ON
*                                         IN IOB SENSE BYTE 1    Y02072
MASKSIGN EQU   X'F0'                    MASK TO REMOVE SIGN
BLANK    EQU   X'40'                    CONSTANT=C' '
PRT2245  EQU   X'0B'                    CODE IN UCBTBYT4 FOR     Y02072
*                                         2245 PRINTER           Y02072
NOFCBLD  EQU   X'40'                    NO FCB LOAD REQUIRED   @ZA20901
         EJECT
*
* INITIALIZE REGISTERS
*
         BALR  RBASE,0
FCBLD000 EQU   *
         USING FCBLD000,RBASE
         USING SPW,RCORE
         USING SPRBXSV,RSVR
         USING SPPARM,RPAR
         SPACE 2
         B     BEGIN                    BRANCH AROUND MODULE ID  YM4640
         DC    C'IGG08104'              MODULE NAME            @ZA20901
         DC    C'@ZA32079'              LAST MODULE CHANGE     @ZA32079
         DC    C'04/26/78'              LAST SHIP DATE         @ZA32079
BEGIN    DS    0H                       END OF MODULE ID         YM4640
         L     RDCB,SPPDCBA             LOAD DCB ADDRESS
         USING IHADCB,RDCB
         L     RDEB,DCBDEBAD            LOAD DEB ADDRESS
         USING DEBBASIC,RDEB
         L     RUCB,DEBSUCBA            LOAD UCB ADDRESS
         USING UCBOB,RUCB
         MVI   SPWFLG8,0                CLEAR FLAG FOR USE HERE  Y02072
         USING IOBQSAMN,RIOB
         MVI   IOBFLAG1,IOBCMDCH+IOBUNREL SET IOBFLAG=CMD CHAINING/UNRL
         L     RWK2,UCBXTADR            LOAD UCB EXTENSION ADD @ZA20901
         USING UCBUCS,RWK2                                     @ZA20901
         TM    SPWFLG1,NOFCBLD          LOAD FCB IMAGE ?       @ZA28905
         BO    FCBLD020                 NO- GO CHECK OPTIONS   @ZA20901
         MODESET EXTKEY=SUPR            GET INTO SUPERVISOR KEY@ZA28402
         NI    UCBFCBOP,X'FE'           TURN OFF PARITY ERROR  @ZA20901
         MODESET KEYADDR=SPRKEY,WORKREG=2 RESUME NORMAL KEY    @ZA28402
*
* FORM CCW TO LOAD FCB
*
         USING FCBIMBEG,RWK4
         LR    RIMAGSAV,RWK4            SAVE IMAGE ADDR FOR      Y02072
*                                         RE-VERIFICATION        Y02072
         LA    RWK1,FCBLINE1            GET ADDR OF FCB IMAGE
         ST    RWK1,SPWADD1A            STORE FCB ADDR IN CCW
         SR    RWK1,RWK1                ZERO OUT REGISTER
         IC    RWK1,FCBLENTH            GET LENGTH OF FCB IMAGE
         ST    RWK1,SPWCCWF1            STORE LENGTH OF FCB IMG IN CCW
         MVI   SPWOPCD1,SPWFCBLD        MOVE IN LOAD FCB COMMAND
         MVI   SPWCCWF1,SPWSILI         SET SILI ON           @ZA32079
*
* ISSUE EXCP AND WAIT TO LOAD FCB
*
FCBLD010 EQU   *
         BAL   RRET,SETUCB              MOVE SPWFCB2H TO UCB     Y02072
         OI    IOBFLAG1,IOBSPSVC        IND NO SAM APPENDAGE    ZA02199
*                                       PROCESSING REQUIRED     ZA02199
         EXCP  IOBSTDRD                 EXCP FOR FCB LOAD
*
         L     R1,IOBECBPT              GET ADDRESS OF ECB
         WAIT  ECB=(1)                  WAIT FOR COMPLETION OF FCB LD
         NI    IOBFLAG1,X'FF'-IOBSPSVC  RESET IOB FLAG          ZA02199
*
         L     RWK2,IOBECBPT            GET ADDR OF ECB
         USING ECBCC,RWK2
         CLI   ECBCC,ECBNORM            CK FOR SUCCESSFUL FCB LOAD
         BE    FCBLD020                 YES GO CK FCB OPTIONS
*
* WHEN A PERMANENT I/O ERROR IS DETECTED DURING AN FCB LOAD, UPDATE
* THE UCB WITH X'00', DELETE THE FCB IMAGE LOADED AND GIVE CONTROL
* BACK TO THE PROBLEM PROGRAM WITH RETURN CODE=0C IN BITS 16-23
* OF REGISTER 15
*
         LA    RWK5,PERMIOER            LOAD RETURN CODE =X'0C'
FCBLD015 EQU   *
         L     RWK1,SPWFCB2H            SAVE ID OF IMAGE LOADED  Y02072
         SR    RWK2,RWK2                CLEAR FCB ID             Y02072
         ST    RWK2,SPWFCB2H                                     Y02072
         BAL   RRET,SETUCB              CLEAR ID IN UCB          Y02072
         ST    RWK1,SPWFCB2H            RESTORE NAME FOR DELETE  Y02072
         B     FCBLD040                 GO TO HOUSE CLEANING ROUTINE
*
* TEST  FCB OPTION BITS FOR VERIFY OR ALIGN
*
FCBLD020 EQU   *
         TM    SPWFLG1,SPWVRFCB         TEST IF VERIFY FCB SPECIFIED
         BO    FCBLD070                 YES GO PRINT LINES OF VERIFICAT
         TM    SPWFLG1,SPWALIGN         TEST IF ALIGN FORMS SPECIFIED
         BO    FCBLD120                 YES GO ISSUE ALIGN FORMS MSG
         LA    RWK5,OKCOMP              SET RETURN CODE=00
*                                         NO FALL THROUGH TO EXIT RTN
*
* EXIT ROUTINE  -  UPDATE FCB FIELDS OF UCB FOR SUCCESSFUL FCB LOAD
*               -  DELETE FCB IMAGE IF ONE WAS LOADED
*               -  DELETE MESSAGE CSECT
*               -  FREE MESSAGE/WORK AREA
*               -  FREE BLDL PARAMETER LIST                      YM5703
*               -  SET RETURN CODE IN BITS 16-23 REG.15
*               -  RETURN TO INVOKER
*
FCBLD030 EQU   *
         OI    SPWFLG8,SPWFCBOP         REQUEST OPTION UPDATE    Y02072
         BAL   RRET,SETUCB              PUT OPTIONS & ID IN UCB  Y02072
         NI    SPWFLG8,X'FF'-SPWFCBOP   RESET OPTIONS REQUEST    Y02072
*
* DETERMINE IF AN FCB IMAGE WAS LOADED
*
FCBLD040 EQU   *
         TM    SPWFLG5,SPWFCBDE         DID USER SUPPLY IMAG VIA Y02072
*                                          DCB EXIT LIST         Y02072
         BZ    FCBLD050                 YES, DO NOT ISSUE DELETE Y02072
*
* DELETE FCB IMAGE
*
         DELETE EPLOC=SPWFCBIM          DELETE THE FCB IMAGE LOADED
         NI    SPWFLG5,X'FF'-SPWFCBDE   INDICATE IMAGE DELETED   Y02072
FCBLD050 SR    RWK6,RWK6                                         Y02072
         ST    RWK6,SPWFCB2H            CLEAR IMAGE NAME         Y02072
*
*  DELETE MESSAGE CSECT
*
         DELETE EP=IGGMSG01             DELETE MSG CSECT         Y02072
         SPACE 2
         MODESET EXTKEY=SUPR            PREPARE TO MODIFY SVRB   Y02072
         SPACE
         ST    RWK6,SPRMSG              INDICATE MSGS DELETED    Y02072
*
*  CLOSE SYS1.IMAGELIB
*
         IMGLIB  CLOSE,SPRIDCBA         CLOSE SYS1.IMGLIB        Y02072
*
         ST    RWK6,SPRIDCBA            INDICATE IMGLIB DELETED  Y02072
         ST    RWK6,SPRIOBSV            INDICATE IOB RESTORED    Y02072
         MODESET KEYADDR=SPRKEY,WORKREG=1 RESUME NORMAL KEY      Y02072
*
* RESTORE IOB TO ORIGIONAL STATUS                                Y02072
*
         MVC   IOBFLAG1(4),SPWFLGSV     RESTORE IOB FLAGS        Y02072
         MVC   IOBSTART,SPWSTRSV        RESTORE IOB START ADDR   Y02072
*
*  FREEMAIN SETPRT WORKAREA AND BLDL PARAMETER LIST              YM5703
*
         FREEMAIN R,LV=SPWLNGTH,A=(RCORE),SP=SPWPOOL             Y02072
         SPACE
         MODESET  EXTKEY=DATAMGT        KEY OF BLDL LIST         YM5703
         SPACE
         L     RWK2,SPRBLDLA            ADDR OF BLDL PARM LIST   YM5703
         USING SPW5,RWK2                                       @Z40MSAP
         ST    RWK6,SPWWKADR            INDIC WORKAREA FREED     YM5703
         SPACE
         FREEMAIN  R,LV=SPW5LNTH,A=(RWK2),SP=SPW5POOL          @Z40MSAP
         SPACE
         MODESET  EXTKEY=SUPR           KEY TO RETURN IN         Y02072
         SPACE
         ST    RWK6,SPRBLDLA            INDIC BLDL LIST FREED    YM5703
*
* RESET REGISTERS AND IOB TO RETURN TO PROBLEM PROGRAM
*
         L     RDCB,SPPDCBA             GET DCB ADDRESS
         L     RDEB,DCBDEBAD            GET DEB ADDRESS
*
*        RETURN TO PROBLEM PROGRAM
*
         SLL   RWK5,8                   SHIFT RETURN CODE TO BITS 16-23
         LR    R15,RWK5
         SRL   RPAR,24                  MOVE UCS RTN CODE TO BYTE 3
         OR    R15,RPAR                 OR IN UCS PART OF RTN CODE
*
         L     R14,SPREXIT              GET EXIT ADDRESS         Y02072
         BR    R14                      RETURN TO EXIT PROLOG    Y02072
         EJECT
*
* VERIFICATION ROUTINE TO DISPLAY THE FCB IMAGE
*
FCBLD070 EQU   *
         CLI   UCBTBYT4,PRT2245         CHECK FOR 2245 PRINTER   S21092
         BE    FCBLD120                 IF VERIFY SPECIFIED GO TO M0191
*                                         ALIGN                  S21092
*
* INITIALIZE REGISTERS FOR VERIFICATION
* -RWK5 CONTAINS LINE NUMBER
* -RWK7 POINTER TO ENTRIES IN FCB IMAGE
*
         LA    RWK5,1                   SET LINE COUNTER TO 1
         LA    RWK7,FCBLINE1            SET FCB IMG PTR TO START OF IM
         TM    FCBINDEX,FCBLFTIN+FCBRGTIN  IS INDEXING SPECIFIED XM2963
         BZ    FCBLD072                 NO, RWK7 HAS RIGHT ADDR  XM2963
         LA    RWK7,FCBLNPN1            ADDR IF USING INDEXING   XM2963
FCBLD072 EQU   *                                                 XM2963
*
* FORM CCW TO PRINT LINES OF VERIFICATION
*
         LA    RWK6,SPWMSGTX            GET ADDR OF PRINT LINE
         ST    RWK6,SPWADD1A            SET ADDR OF PRT LINE
         MVI   SPWOPCD1,SPWWRTSP        SET COMMAND CODE TO PRINT+SKP1
         MVI   SPWCCWF1,SPWSILI         SET SILI ON            @ZA10220
*
* INITIALIZE PRINT LINE
*
         LA    RWK2,MSGFHEAD            REQUEST FCB HEADER       Y02072
         BAL RRET,GETMSG                GO GET IT                Y02072
         LR    RWK6,RWK8                KEEP PTR TO MSG ENTRY    Y02072
         USING MSGENTRY,RWK6                                     Y02072
         SR    RWK2,RWK2                CLEAR REG FOR INSERTS    Y02072
         IC    RWK2,MSGLNG              GET LENGTH-1 FOR CCW    Y02072
         LA    RWK2,1(RWK2)             ADD TO GET REAL LENGTH   Y02072
         STH   RWK2,SPWBYTE1            PUT LEN IN THE CCW       Y02072
         IC    RWK2,MSGOFF5             OFFSET TO FCB ID         Y02072
         L     RWK8,SPWFCB2H            PICK UP FCB ID           Y02072
         ST    RWK8,SPWMSGTX(RWK2)      STORE IT AT ITS OFFSET   Y02072
         IC    RWK2,MSGOFF6             OFFSET TO LINES/INCH     Y02072
         LA    RWK8,SPWMSGTX(RWK2)      PTR TO LINES/INCH        Y02072
         DROP  RWK4
         USING FCBLINE,RWK7
         MVI   0(RWK8),SPW6LINE         INIT AT 6 INES/INCH      Y02072
         TM    FCBLINE,FCB8LINE         CK IF LINE/INCH = 8
         BNO   FCBLD075                 NO CONTINUE WITH 1ST PRINT LINE
         MVI   0(RWK8),SPW8LINE         YES SET TO 8 LINES/INCH  Y02072
FCBLD075 EQU   *
*
* INSERT LINE NUMBER INTO PRINT LINE
*
FCBLD080 EQU   *
         CVD   RWK5,SPWUNPKA            CONVERT LINE NO TO DECIMAL
         UNPK  SPWUNPKA,SPWLNENO        UNPACK LINE NO.
         OI    SPWZONE,MASKSIGN         INSERT ZONE IN LOW ORDER DIGIT
         SR    RWK2,RWK2                                         Y02072
         IC    RWK2,MSGOFF1             OFFSET TO LINE NUMBER    Y02072
         LA    RWK8,SPWMSGTX(RWK2)      PTR TO LINE NUMBER       Y02072
         MVC   0(L'SPWWKAR,RWK8),SPWWKAR+1 MOVE LINE NO TO PRINT Y02072
*
* TRANSLATE CHANNEL CODE TO CHARACTER FORM AND ADD TO PRINT LINE
*
         LA    RWK8,FCBCHAN             PICK UP CHANNEL MASK     Y02072
         IC    RWK2,FCBLINE             GET CHANNEL CODE         Y02072
         NR    RWK2,RWK8                IF CHANNEL CODE IS 00    Y02072
         BZ    FCBLD100                 BYPASS TRANSLATION       Y02072
         SLL   RWK2,1                   MUTIPLY CODE BY 2        Y02072
         LH    RWK8,TRANSTAB(RWK2)      GET EBCDIC CHANNEL CODE  Y02072
         IC    RWK2,MSGOFF3             OFFSET TO CHANNEL CODE   Y02072
         STH   RWK8,SPWMSGTX(RWK2)      STORE CODE IN MSG        Y02072
         LA    RWK2,MSGFCHAN            REQUEST 'CHANNEL' MSG    Y02072
         OI    SPWFLG8,SPWNOMOV         SUPPRESS SUBR MOVE       Y02072
         BAL   RRET,GETMSG              GET THE MESSAGE          Y02072
         USING MSGTXT,RWK2                                       Y02072
         USING MSGENTRY,RWK8                                     Y02072
         NI    SPWFLG8,X'FF'-SPWNOMOV   RESTORE NORMAL MODE      Y02072
         IC    RWK8,MSGLNG              GET LENGTH OF 'CHANNEL'  Y02072
         DROP  RWK8                                              Y02072
         USING MSGENTRY,RWK6            RETURN TO MAIN MESSAGE   Y02072
         SR    RWK4,RWK4                                         Y02072
         IC    RWK4,MSGOFF2             OFFSET TO 'CHANNEL       Y02072
         LA    RWK4,SPWMSGTX(RWK4)      PTR TO 'CHANNEL' IN      Y02072
*                                       WORK AREA                Y02072
         EX    RWK8,MVCHAN              MOVE WORD INTO MSG       Y02072
         DROP  RWK2                                              Y02072
FCBLD100 EQU   *
         BAL   RRET,EXCP                PRINT A VERIF LINE       Y02072
         TM    SPWFLG8,SPWVREND         IF THIS WAS LAST LINE    Y02072
         BO    FCBLD120                 GO TO MSG 'IEC128D'    @ZA07594
*
* SET REGISTERS AND MESSAGE TO PRINT NEXT LINE OF VERIFICATION
*
         LA    RWK5,1(RWK5)             INCREMENT LINE COUNTER
         LA    RWK7,1(RWK7)             INCREMENT POINTER TO NEXT
*                                         POSITION OF FCB IMAGE
         LA    RWK2,MSGFLINE            REQUEST LINE MSG         Y02072
         TM    FCBLINE,FCBLAST          CK FOR END OF IMAGE FLAG
         BNO   FCBLD105                 NO - FORM NEXT LINE      Y02072
*                                         YES SET FOR LAST LINE OF VFY
         LA    RWK2,MSGFFOOT            REQUEST LAST LINE MSG    Y02072
         OI    SPWFLG8,SPWVREND         SET LAST LINE FLAG       Y02072
FCBLD105 EQU   *                                                 Y02072
         BAL   RRET,GETMSG              GET REQUESTED MESSAGE    Y02072
         LR    RWK6,RWK8                SAVE ITS ENTRY PTR       Y02072
         SR    RWK2,RWK2                                         Y02072
         IC    RWK2,MSGLNG              GET LENGTH-1 OF MSG      Y02072
         LA    RWK2,1(RWK2)             ADD TO GET REAL LENGTH   Y02072
         STH   RWK2,SPWBYTE1            AND UPDATE CCW           Y02072
         B     FCBLD075                 GO PUT LINE NUM IN       Y02072
*                                         IN PRINT LINE          Y02072
         DROP  RWK6                                              Y02072
*                                                                Y02072
* FOLLOWING INSTRUCTION EXECUTED FROM FCBLD080 ABOVE             Y02072
*                                                                Y02072
MVCHAN   MVC   0(0,RWK4),0(RWK2)        MOVE 'CHANNEL' INTO MSG  Y02072
*
* ISSUE SKIP TO CHANNEL 1
*
FCBLD110 EQU   *
         XC    SPWCCW1,SPWCCW1          RESET CCW
         MVI   SPWBYTE1+1,1             SET DATA LENGTH =1
         MVI   SPWCCWF1,SPWSILI         SET SILI ON
         MVI   SPWOPCD1,SPWSKIP         MOVE SKIP COMMAND CD
         OI    IOBFLAG1,IOBSPSVC        IND NO SAM APPENDAGE    ZA02199
*                                       PROCESSING REQUIRED     ZA02199
         EXCP  IOBSTDRD                 ISSUE SKIP TO CH 1
*
         L     R1,IOBECBPT              GET ADDRESS OF ECB
         WAIT  ECB=(1)                  WAIT FOR SKIP TO COMPLETE
         NI    IOBFLAG1,X'FF'-IOBSPSVC  RESET IOB FLAG          ZA02199
         B     FCBLD030                 RETURN TO PROBLEM PROG @ZA07594
* WTOR TO REQUEST OPERATOR TO VERIFY FORMS ALIGNMENT
* 'IEC128D V XXX,VERIFY FORMS ALIGNMENT'
*
FCBLD120 EQU   *
         LA    RWK2,MSG128              REQUEST 'VERIFY' MSG     Y02072
         BAL   RRET,GETMSG              GET IT IN WORK AREA      Y02072
         USING MSGENTRY,RWK8                                     Y02072
         SR    RWK2,RWK2                                         Y02072
         IC    RWK2,MSGOFF1             OFFSET TO UNIT ADDRESS   Y02072
         LA    RWK2,SPWMSGTX(RWK2)      POINT TO VAR IN WORKAREA Y02072
         MVC   0(L'UCBNAME,RWK2),UCBNAME   MOVE IN UCBNAME       Y02072
         DROP  RWK8
*
* CLEAR REPLY AREA
*
FCBLD130 EQU   *
         MVI   SPWREPLY,BLANK           MOVE BLANK TO 1ST POSITION
         MVC   SPWREPC1,SPWREPLY        CLEAR REPLY AREA
         MVI   SPWRPECB,0               SET REPLY ECB NOT COMPLETE
         LA    RWK5,OKCOMP              SET RETURN CODE =00
         TM    SPRKEY,SPRUSKEY          TEST KEY FOR SYS FUNCT   Y02072
         BZ    FCBLD131                 YES, DO NOT SYNCH        Y02072
         SYNCH WTOR                     GO ISSUE WTOR IN         Y02072*
                                        USER KEY, PROBLEM STATE  Y02072
         B     FCBLD132                 GO ISSUE WAIT            Y02072
FCBLD131 BAL   R14,WTOR                 GO ISSUE WTOR IN SYS KEY Y02072
*
FCBLD132 WAIT  ECB=SPWRPECB,LONG=YES    WAIT FOR OPERATOR REPLY  Y02072
         XC    SPWMSGID(4),SPWMSGID     CLEAR MSG ID           @ZA25004
*
* ANALYSIS OF REPLY
*
         OC    SPWREPLY(L'LOWCASE),LOWCASE SET FOR LOWER CASE
         CLC   SPWREPLY(L'VERIFY01),VERIFY01 TEST REPLY='VERIFIED'
         BE    FCBLD110                 YES ISSUE SKIP CHANN 1 @ZA07594
         CLC   SPWREPLY(L'VERIFY02),VERIFY02  TEST REPLY='V'
         BE    FCBLD110                 YES ISSUE SKIP CHANN 1 @ZA07594
         CLC   SPWREPLY(L'CANCEL01),CANCEL01  TEST REPLY='CANCEL'
         BE    FCBLD135                 YES-SET RETURN CODE=14 @ZA10228
         CLC   SPWREPLY(L'CANCEL02),CANCEL02  TEST IF REPLY='C'
         BE    FCBLD135                 YES-SET RETURN CODE=14 @ZA10228
         CLC   SPWREPLY(L'RETRY01),RETRY01   TST IF REPLY=RETRY
         BE    FCBLD133                 YES GO CK IF VERIFY OR
*                                         ALIGN SPECIFIED
         CLC   SPWREPLY(L'RETRY02),RETRY02  TST IF REPLY = RETRY
         BE    FCBLD133                 YES GO CK IF VERIFY OR ALIGN
*                                         SPECIFIED, NO ISSUE REPEAT
*                                         REPLY MSG
* ERROR IN REPLY - ISSUE 'IEC125I ERROR - REPEAT REPLY'
*
         LA    RWK2,MSG125              REQUEST ERROR MSG        Y02072
         BAL   RRET,GETMSG              GET IT IN WORK AREA      Y02072
         B     FCBLD130                 GO CLEAR REPLY AREA AND
*                                         ISSUE MESSAGE
FCBLD133 EQU   *
         TM    SPWFLG1,SPWALIGN         TST IF ALIGN MSG RETRY   Y02072
         BO    FCBLD120                 YES, GO REPEAT ALIGN MSG Y02072
         NI    SPWFLG8,X'FF'-SPWVREND   NO, RESET END INDICATOR  Y02072
         LR    RWK4,RIMAGSAV            GET ADDR OF FCB IMAGE    Y02072
         B     FCBLD070                 GO RE-VERIFY IMAGE       Y02072
FCBLD135 EQU   *
         LA    RWK5,OPRCANCL            SET RETURN CODE =14    @ZA10228
         B     FCBLD015                 GO RETURN TO PROB PROG
         EJECT
EXCP     EQU   *
***********************************************************************
*        SUBROUTINE TO EXCP AND TEST RESULTS
*        INPUT: IOB AND CHANNEL PROGRAM ARE READY FOR EXCP
*        ADDRESSIBILITY REQUIRED:
*               IOB
*               SETPRT WORK AREA
*        OUTPUT:ECB IS POSTED COMPLETE, EXCP COMPLETED NORMALLY
*        OUTPUT, ERROR:  SKIP TO 0 CCW IS EXECUTED, RETURN CODE 16 SET
*        THIS ROUTINE NORMALLY RETURNS ON REGISTER RRET
*        ON UNCORRECTABLE ERRORS IT BRANCHES TO EXIT FUNCTION
*        ALL REGISTERS EXCEPT R15,R0,R1 (AND RWK2=R1) ARE TRANSPARENT
***********************************************************************
*
         OI    IOBFLAG1,IOBSPSVC        IND NO SAM APPENDAGE    ZA02199
*                                       PROCESSING REQUIRED     ZA02199
         EXCP  IOBSTDRD                 ISSUE REQUESTED EXCP
*
         L     R1,IOBECBPT              GET ADDRESS OF ECB
         WAIT  ECB=(1)                  WAIT FOR COMPLETION
         NI    IOBFLAG1,X'FF'-IOBSPSVC  RESET IOB FLAG          ZA02199
*
         L     RWK2,IOBECBPT            GET ADDR OF ECB
         USING ECB,RWK2
         CLI   ECBCC,ECBNORM            CK IF SKIP TO CH 1 SUCCESSFUL
         BNE   FCBLD140                 NO GO TO ERROR RTN
         NI    SPWFLG8,X'FF'-SPWRETRY   YES, CLEAR ERROR BIT     Y02072
         BR    RRET                     AND RETURN TO CALLER     Y02072
*
* ERROR ROUTINE - FOR ERRORS OCCURING WHILE PRINTING OUT THE FCB IMG
*
FCBLD140 EQU   *
         TM    CSWSTAT1,CSWUNCHK        IF NOT UNIT CHECK        Y02072
         BNO   FCBLD160                 DON'T CONSIDER RETRY     Y02072
         TM    IOBSENS1,CMDRETRY        CK IF COMMAND RETRY ON
         BNO   FCBLD160                 NO GO SET RETURN CODE FOR
*                                         PERM I/O ERROR DURING VERIFY
* TEST IF PRINT LINE SHOULD BE RETRIED
*
         TM    SPWFLG8,SPWRETRY         ARE WE ALREADY RETRYING  Y02072
         BNZ   FCBLD150                 YES GO RESET CONTROL UNIT
         OI    SPWFLG8,SPWRETRY         NO, INDICATE WE WILL     Y02072
         B     FCBLD100                 GO RETRY PRINT LINE
FCBLD150 EQU   *
         MVC   SPWCCW1,SKP0CCW          REPLACE 1ST CCW          Y02072
         OI    IOBFLAG1,IOBSPSVC        IND NO SAM APPENDAGE    ZA02199
*                                       PROCESSING REQUIRED     ZA02199
         EXCP  IOBSTDRD                 ISSUE RESET FOR CONTROL UNIT
*
         L     R1,IOBECBPT              GET ADDRESS OF ECB
         WAIT  ECB=(1)                  ISSUE WAIT FOR SKIP TO 0
         NI    IOBFLAG1,X'FF'-IOBSPSVC  RESET IOB FLAG          ZA02199
*
FCBLD160 EQU   *
         LA    RWK5,PERMIOEV            SET RETURN CODE=10
         B     FCBLD030                 GO TO EXIT ROUTINE
         SPACE 6
*
* THE FOLLOWING WTOR IS EXECUTED IN PROBLEM STATE, SINCE THE
* MESSAGE AREA IS IN CORE (THE SETPRT WORK AREA) ACCESSIBLE
* TO THE USER.  THIS CAUSES WTOR TO MARK THE MESSAGE AS A
* USER REQUEST (LEADING + ADDED), AND ALERTS THE OPERATOR
* THAT NO CRITICAL FUNCTION IS BEING REQUESTED.
*
WTOR     WTOR  MF=(E,SPWRPLYA)          ISSUE MESSAGE WITH REPLY Y02072
         ST    R1,SPWMSGID              SAVE MSG ID FOR DOM    @ZA25004
         OI    SPWMSGID,X'80'           SET HIGH ORDER BIT     @ZA25004
         BR    R14                      RETURN TO SYNCH          Y02072
         EJECT
***********************************************************************
*        THIS SUBROUTINE FINDS A MESSAGE IN THE MESSAGE CSECT
*        AND (UNLESS SUPPRESSED) MOVES IT INTO THE SETPRINT WORK AREA
*        INPUT: RWK2 CONTAINS AN INDEX OFFSET (MSG NUMBER * 2)
*               SPRMSG CONTAINS THE ADDRESS OF THE MESSAGE CSECT
*               SPWNOMOV IS ON IF MOVE SHOULD BE SUPPRESSED
*        ADDRESSIBILITY REQUIRED:
*               SVRB EXTENDED SAVE AREA
*               SETPRT WORK AREA
*        OUTPUT:RWK2 POINTS TO MESSAGE TEXT IN MSG CSECT
*               RWK8 POINTS TO THE MSG ENTRY IN MSG CSECT
*               SPWMSGTX CONTAINS A COPY OF THE MESSAGE TEXT
*               (UNLESS MOVE SUPPRESSED BY SPWNOMOV)
*        THIS ROUTINE RETURNS ON REGISTER RRET
*        ALL REGISTERS EXCEPT RWK2 AND RWK8 ARE TRANSPARENT
***********************************************************************
GETMSG   L     RWK8,SPRMSG              PICK UP MSG CSECT ADDR   Y02072
         USING MSGINDEX,RWK8                                     Y02072
         AH    RWK8,MSGINDOF(RWK2)      ADD ENTRY OFFSET         Y02072
         USING MSGENTRY,RWK8                                     Y02072
         SR    RWK2,RWK2                                         Y02072
         IC    RWK2,MSGOFF              PICK UP TEXT OFFSET      Y02072
         AR    RWK2,RWK8                GET PTR TO TEXT          Y02072
         USING MSGTXT,RWK2                                       Y02072
         TM    SPWFLG8,SPWNOMOV         IF MOVE SHOULD BE        Y02072
         BOR   RRET                     BYPASSED, RETURN         Y02072
         MVC   SPWMSGTX,MSGTXT          MOVE TEXT INTO WORK AREA Y02072
         BR    RRET                     RETURN TO CALLER         Y02072
         DROP  RWK2,RWK8                                         Y02072
         DROP  RDEB,RUCB                                         Y02072
         EJECT
SETUCB   EQU   *                                                 Y02072
***********************************************************************
*        THIS ROUTINE UPDATES THE UCB
*        TO PERFORM THIS FUNCTION IT MUST VALIDATE THAT:
*        1. A PROTECTED CHAIN LEADS TO THE UCB
*        2. THE UCB IS ALLOCATED TO THE JOB REQUESTING SETPRT
*        BOTH OF THESE ARE SATISFIED BY DEBCHK, SO LONG AS THERE
*        IS NO TIME OF CHECK TO TIME OF USE EXPOSURE.
*        THAT EXPOSURE IS COVERED BY RUNNING WITH THE LOCAL LOCK.
*        INPUT: SPWFCB2H CONTAINS THE FCB ID TO PLACE IN THE UCB
*               SPWFCBOP IN FLG8 IS ON IF OPTIONS SHOULD BE UPDATED
*               IF ON, FCBDEFLT CONTAINS THE OPTIONS
*               IF ON, RWK4 MUST POINT TO FCBIMAGE             @ZA19734
*        ADDRESSIBILITY REQUIRED:
*               SVRB EXTENDED SAVE AREA
*               SETPRT WORK AREA
*        OUTPUT:UCBFCBID AND (OPTIONALLY) UCBFCBOP ARE UPDATED (NORMAL)
*               THE SAVE AREA SPRSAVE IN SVRB IS USED
*               IF DEB NOT VALID, DOES NOT RETURN TO SUBROUTINE CALLER,
*               INSTEAD SETS RETURN CODE AND EXITS
*        THIS ROUTINE RETURNS ON REGISTER RRET
*        ALL REGISTERS EXCEPT R15 AND R1 (= RWK2) ARE TRANSPARENT
***********************************************************************
         MODESET EXTKEY=ZERO            CHANGE TO KEY FOR BR ENT Y02072
         SPACE
         STM   R10,R14,SPRSAVE          SAVE VOLATILE REGS       Y02072
LOCK     SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                  Y02072*
               RELATED=(DEB/UCB,UNLOCK) GET THE LOCAL LOCK       Y02072
         L     R10,CVTPTR               FIND CVT                 Y02072
         USING CVT,R10                                           Y02072
         L     R15,CVTEXT2              FIND CVT EXTENSION       Y02072
         USING CVTXTNT2,R15                                      Y02072
         L     R15,CVTDEBVR             GET PTR TO DEBCHK        Y02072
         L     R14,SPPDCBA              GET DCB ADDR             YM5919
         USING IHADCB,R14               TEMP USING               YM5919
         L     R1,DCBDEBAD              GET DEB ADDRESS          YM5703
         LA    R1,0(R1)                 CLEAR HI-BYTE            YM5703
         DROP  R14,R15                                           YM5919
         USING PSA,0                                             Y02072
         L     R10,PSATOLD              FIND CURRENT TCB         Y02072
         DROP  R10                                               Y02072
         BALR  R14,R15                  CALL DEBCHK              Y02072
*
*  DEBCHK RETURNS ON REGISTER 14 PLUS THE CONTENTS OF REG 15     YM5703
*    REG 15 : 0 - DEB VALID                                      YM5703
*             4 - DEB INVALID                                    YM5703
*  REGARDLESS OF DEBCHK RETURN, THE LOCAL LOCK MUST BE RELEASED  YM5703
*  AS SVC'S CANNOT BE ISSUED WHILE HOLDING THE LOCK.             YM5703
*
         B     DEBOK                    DEB VALID--PTR IN R1     Y02072
         B     UNLOCK                   INVALID--GET OUT         YM5703
DEBOK    EQU   *                                                 Y02072
         USING DEBDASD-(DEBBASND-DEBBASIC),R1                    Y02072
         L     RWK2,DEBUCBAD            FIND UCB                 Y02072
         DROP  R1                                                Y02072
         USING SRT,RWK2                                          Y02072
         L     RWK2,UCBXTADR            FIND UCS EXTENSION       Y02072
         USING UCBUCS,RWK2                                       Y02072
         LM    R10,R14,SPRSAVE          RESTORE VOLATILE REGS    Y02072
         TM    SPWFLG1,NOFCBLD          FCB LOADED?            @ZA30716
         BO    UNLOCK                   NO-DONT UPDATE FCB     @ZA30716
         MVC   UCBFCBID,SPWFCB2H        STORE FCB ID             Y02072
         TM    SPWFLG8,SPWFCBOP         IF NO OPTIONS REQUEST,   Y02072
         BZ    UNLOCK                   BYPASS OPTIONS STORE     Y02072
         USING FCBIMBEG,RWK4                                   @ZA19734
         MVC   UCBFCBOP,FCBDEFLT        MOVE IN FCB OPTION       Y02072
         DROP  RWK4                                            @ZA19734
UNLOCK   SETLOCK RELEASE,TYPE=LOCAL,RELATED=(DEB/UCB,LOCK)       Y02072
         LM    R10,R14,SPRSAVE          RESTORE VOLATILE REGS    Y02072
         SPACE
         MODESET KEYADDR=SPRKEY,WORKREG=1  RESUME NORMAL KEY     Y02072
         SPACE
         LTR   R15,R15                  WAS DEB VALID            YM5703
         BZR   RRET                     YES, CONTINUE            YM5703
*
NOTOPEN  ICM   RPAR,B'1000',=AL1(RCNOPEN) SET DCB NOT OPEN       Y02072
*                                         AS UCS ERROR CODE      Y02072
         SR    RWK5,RWK5                NO FCB ERROR CODE        Y02072
         B     FCBLD040                 GO GET OUT               Y02072
         EJECT
*
* CONSTANTS
*
SKP0CCW  CCW   SPWSKIP0,0,SPWSILI,1     SKIP TO CHANNEL 0 CCW
LOWCASE  DC    CL10' '                  TO ALLOW LOWER CASE REPLYS
BLANKFLD EQU   LOWCASE                  TO BLANK A FIELD
VERIFY01 DC    C'VERIFIED'              REPLY=VERIFIED
VERIFY02 DC    C'V '                    REPLY='V'
CANCEL01 DC    C'CANCEL'                REPLY=CANCEL
CANCEL02 DC    C'C '                    REPLY='C'
RETRY01  DC    C'R '                    CONST FOR RETRY
RETRY02  DC    C'RETRY'                 RETRY CONST
         DS    0H                       SET ON HALF WORD BDY
TRANSTAB DC    C'00010203040506070809101112'
*
* PATCH AREA
*
PATCH    DC    25H'0'                   PATCH AREA               YM4640
END      EQU   *                        END OF MODULE            Y02072
         TITLE 'IGG08104 - SYSTEM DESECTS'                       YM4640
         CVT   DSECT=YES                                         Y02072
         EJECT
         DCBD  DSORG=PS
         EJECT
         IEZDEB
         EJECT
         IHAECB
         EJECT
         IHAFCBIM
         EJECT
         IEZIOB
         EJECT
         ORG   IOBCSW-1
         IHACSW DSECT=NO
         EJECT
         IGGMSG                                                  Y02072
         EJECT
         IHAPSA                                                  Y02072
         EJECT
         IHASPP
         EJECT
         IGGSPW
         EJECT
SRT      DSECT
         IEFUCBOB  LIST=YES
         END
