 TITLE 'IGG01913 - SAM EXECUTOR FOR PCI/TRACK OVERFLOW'
IGG01913 CSECT                                                     UT18
*MODULE NAME - IGG01913                                          Y02072
*
*DESCRIPTIVE NAME - LOAD ACCESS METHOD ROUTINES                  Y02072
*
*COPYRIGHT - NONE                                                Y02072
*
*CHANGE ACTIVITY - AS FOLLOWS:                                   Y02072
*
*          RELEASE 20 DELETIONS
*0945059134,059142,143400                                        M5150
*0945                                                            S20038
*0945059120-059150,125000,147800                                 S20202
*0945143400                                                      M5701
*          RELEASE 21 DELETIONS
*1091002800,118000-118600                                        A39228
*                                                               SA66897
*          VS2 RELEASE 2 DELETIONS
*000090,000230-000320,000410-000500,125000,055900,056100,        Y02072
*056300-056340,59160,107200-107400,108200,108800,110400-112400,  Y02072
*113000-117200                                                   Y02072
*                                                                YM1141
*                                                                YM1140
*
*          VS2 RELEASE 3 DELETIONS
*                                                              @Z30TSCF
*
*STATUS CHANGE LEVEL 004
*
*FUNCTION/OPERATION - THIS ROUTINE WILL LOAD SOME OF THE I/O       UT18
*      PROCESSING MODULES.  THE MODULES TO BE LOADED ARE DETERMINEDUT18
*      FOR THE ACCESS METHODS AND DEVICE TYPE TO BE USED.          UT18
*      IT WILL PLACE THE ADDRESS OF THE LOADED MODULES IN THE
*      APPROPRIATE DCB FIELDS, AND THE ID'S IN THE DEB.
*      IT WILL BRING IN THE APPROPRIATE ERROR ROUTINES.
*      THIS MODULE WAS SPLIT IN RELEASE 18 TO INCLUDE USER         UT18
*      TOTALING SUPPORT.  THE SECOND HALF OF THIS MODULE IS NOW    UT18
*      IGG01919.                                                   UT18
*
*ENTRY POINT -- ENTERED FROM IGG0191K,IGG0191R,IGG0191Q
*      AND IGG0191H BY USE OF THE XCTL MACRO.
*
*INPUT: SEE DESCRIPTION OF REGISTERS, DCB(USERS)
*
*OUTPUT: DCB(USERS),IOB(USERS).
*
*EXTERNAL ROUTINES: NONE.
*
*EXITS-NORMAL   XCTL TO IGG01919.                                  UT18
*
*EXITS-ERROR: NONE.
*
*TABLES/WORKAREAS- WHERE TO GO TABLE (WTG)
*
*      BYTE  0-7  NAME
*      BYTE  8-10 RELATIVE DISK ADDRESS(TTR) OF FIRST RECORD
*      BYTE 11    CONCATENATION NUMBER
*      BYTE 12    ZERO
*      BYTE 13    ALIAS INDICATOR AND USER DATA FIELD DESCRIPTOR.
*                        ALIAS INDICATOR 1 BIT
*                        NUMBER OF TTRS IN USERS DATA FIELD 2 BITS
*      BYTE 14-16 TTR OF FIRST TEXT RECORD
*      BYTE 17    ZERO
*      BYTE 18-19 TTR OF NOTE LIST OR SCATTER LIST
*      BYTE 20    TRANSLATION TABLE
*      BYTE 21    ZERO OR NUMBER OF ENTRIES IN THE NOTE LIST
*      BYTE 22-23 ATTRIBUTES
*      BYTE 24-26 TOTAL CONTIGUOUS MAIN STORAGE REQUIRED FOR MODULE
*      BYTE 27-28 LENGTH OF FIRST TEXT RECORD
*      BYTE 29    LENGTH OF WTG TABLE (IN DOUBLE WORDS)
*      BYTE 30-31 PATH THROUGH LOADS OF ROUTINES
*      BYTE 32-36 IDTTR OF EXECUTOR FOR FIRST DCB
*      BYTE 37-39 WORKAREA ADDRESS FOR FIRST DCB
*      BYTE 40-   TABLE OF IDTTR'S
*      BYTE 32+N(8) IDTTR OF EXECUTOR FOR N TH DCB   (5 BYTES)
*                   WORKAREA ADDRESS FOR N TH DCB    (3 BYTES)
*                   IDTTR OF LAST ROUTINE LOAD       (5 BYTES)
*                   NOT USED                         (3 BYTES)
*
*ATTRIBUTES: REENTRANT, REUSABLE, RUNS IN DATA MANAGEMENT KEY,   Y02072
*            SUPERVISOR STATE                                    Y02072
*
*NOTES: THIS ROUTINE HAS A LIST OF ALL BSAM, QSAM MODULES SUPPORTED.
*
***********************************************************************
*
*
*  REGISTER CONVENTIONS USED THROUGH OUT ALL OPEN PASSES
*
***********************************************************************
*
RE       EQU   0         WORK REG5
RF       EQU   1         WORK REG6
R1       EQU   RF        PARM REG                                YM1140
RDCB     EQU   2         DCB REGISTER
RBASE    EQU   3         BASE REGISTER
RCORE    EQU   4         WORK AREA ADDRESS
RPAR     EQU   5         TOP OF PARAMETER LIST
RWTG     EQU   6         TOP OF WTG TABLE
RPARC    EQU   7         CURRENT PARAMETER
RWTGC    EQU   8         CURRENT TRANS LOAD
RTIOT    EQU   9         USED HERE AS WRK REG AND  COMM VECTOR ADDR.
RUCB     EQU   10        USED HERE AS A COUNTER IN IOB GENERATION
RDEB     EQU   11        DEB ADDRESS
RB       EQU   12        WORK REG1  **
RC       EQU   13        WORK REG2  **  USED IN IOB GENERATION
RD       EQU   14        WORK REG3  **
RJ       EQU   15        WORK REG4
*
*
PARAR    EQU   RPARC
*
***********************************************************************
*
***********************************************************************
*
* MASK'S TO TEST PARAMETER LIST WITH
*
*********************************************************************
INP      EQU   X'0F'
OUTP       EQU   X'0F'
UPDATE     EQU   X'04'
INOUT      EQU   X'03'
OUTIN      EQU   X'07'
RDBACK     EQU   X'01'
INPRDBK  EQU   X'0E'               MASK TO CK INPUT AND RDBACK     UT18
*
*
*********************************************************************
*
*
* OFFSET FOR PARAMETER TESTS
*
ONE        EQU   X'01'
THREE    EQU   X'03'                    CONSTANT=3               S20202
K24      EQU   X'18'                    CONSTANT=24              S20202
K25      EQU   X'19'                    CONSTANT=25              S20202
FRTYATE    EQU   48
DISPSN     EQU   X'0'
*
*
*********************************************************************
*
* OFFSETS FOR DEB REFERENCE
*
*
DEBIRBOF EQU   9                        OFFSET TO IRB ADDR       S20202
FOUR     EQU   X'04'                                             M5150
BIN      EQU   36
BEXT     EQU   38
*
*
*
*********************************************************************
*
* MASK'S USED TO TEST OPTION FIELDS IN DCB
*
*
*
DOUBLE     EQU   X'01'
*
*
STOWB      EQU   X'80'
WRTCK      EQU   X'80'
OVRFLO   EQU   X'20'
PCI        EQU   X'20'
MINKEY     EQU   X'01'
CONCAT     EQU   X'FF'
UTFMASK  EQU   X'02'                    MASK FOR TOTALING FACILITY UT18
*
*********************************************************************
*
* MASKS FOR ACCESS METHODS IN SAM
*
QSAMB      EQU   X'01'
BSAMBIT    EQU   X'00'
PAM        EQU   X'02'
*
*
* MASKS FOR MACRO'S TO BE USED
*
GETB       EQU   X'40'
PUTB       EQU   X'40'
READB      EQU   X'20'
WRITEB     EQU   X'20'
POINTB     EQU   X'04'
CNTRLB     EQU   X'02'
*
*
*********************************************************************
*
* MASKS FOR DEVICES TO BE SUPPORTED
*
*
*
PTR3211  EQU   X'49'                    MASK FOR 3211 PRINTER    S20202
*********************************************************************
*
*
*
*
*********************************************************************
*
* MASKS FOR STATUS BITS TO BE TESTED
*
*
EXCPN      EQU   X'30'
COMPLETE   EQU   X'80'
FIRSTIOB   EQU   X'01'
*
*
*
*********************************************************************
*
* MASKS FOR BUFFER TECHNIQUE'S
*
EXCHANGB   EQU   X'10'
SIMPLEB    EQU   X'40'
*
*********************************************************************
*
*
* MODES OF OPERATION FOR QSAM
*
LOCATEB    EQU   X'08'
MOVEB      EQU   X'10'
MOVEXCHB EQU X'14'
SUBSTUTB   EQU   X'04'
*
*
*********************************************************************
*
*
* COMMAND BYTES FOR THE 2841
*
*       CONTROL UNIT
*
*
*
SRCHE      EQU   X'31'
WRTCKD     EQU   X'1D'
RDC        EQU   X'92'
RDKD       EQU   X'8E'
RDD        EQU   X'86'
TIC        EQU   X'08'
*
*
*********************************************************************
*
*
* MASKS FOR RECORD FORMATS
*
*
STANDRDF   EQU   X'08'
FORMATU    EQU   X'C0'
FORMATF    EQU   X'80'
FORMATV    EQU   X'40'
FORMATD  EQU   X'20'                    D FORMAT RECORDS         S20038
BLOCKED    EQU   X'10'
FIXEDBLK   EQU   X'90'
*
*
*********************************************************************
*
*
*   CHANNEL CONTROL WORD FLAGS
*
SKIP       EQU   X'10'
SLI        EQU   X'20'
CC         EQU   X'40'
DATACH     EQU   X'A0'
SLICC      EQU   X'60'
SLICCSK    EQU   X'70'
*
*
*********************************************************************
*
*
KEYS       EQU   X'01'
QSAM       EQU   X'01'
*
*
*********************************************************************
*
*
*********************************************************************
*
*
**********************************************************************
ASISVLN  EQU   9                        DBLWORDS FOR IRB WKA     YM1141
ASA        EQU   X'04'
BKREAD     EQU   X'01'
URBITS   EQU   X'40'
TAPEB    EQU   X'80'
DABIT    EQU   X'20'
         EJECT
         BALR  RBASE,0
         USING SLDA,RBASE
         USING IHADCB,RDCB
         USING BLDEB,RDEB
         USING FORCORE,RCORE
*
*
SLDA     EQU   *
*
         B     BEGIN                    BR AROUND CONSTANTS      Y02072
         DC    C'IGG01913'              MODULE NAME              Y02072
         DC    C'@Z30TSCF'              LAST SHIP CODE         @Z30TSCF
         DC    C'10/22/74'              LAST DATE MODIFIED     @Z30TSCF
BEGIN    DS    0H
*
         L     RDCB,0(RPARC)            GET DCB ADDRESS
         LA    RDCB,0(RDCB)             CLEAR HI BYTE
         L     RDEB,DCBDEBAD            GET DEB ADDRESS
         L     RCORE,4(RWTGC)           GET WORK AREA
         MVI   22(RWTG),X'CB'          CHANGE DE ATTR.TO ONLY LOADABLE
*
         L     RTIOT,DEBAPPAD           GET APPENDAGE ADDRESS
         SR    RUCB,RUCB                CLEAR REG
         SR    RF,RF                    CLEAR RER
         IC    RUCB,DEBNMEXT            GET NUMBER OF EXTENTS
         IC    RF,DEBEXSCL              GET SCALING FACTOR
         SLL   RUCB,0(RF)               SHIFT ACCORDING TO EXTENT SIZE
         IC    RF,DEBAMLNG              GET ACCESS METHOD LENGTH
         LA    RUCB,0(RF,RUCB)          ADD TO POINT TO SUBRT ID FLD
         LA    RUCB,32(RUCB,RDEB)       ADD BASIC DEB SZ TO DEB AD
*
*  RUCB NOW POINTS TO THE SUBROUTINE ID FIELD IN THE DEB
*
         TM    DCBOPTCD,UTFMASK         TEST FOR TOTALING          UT18
         BZ    SLDAA                    BR IF NOT SPECIFIED        UT18
         TM    0(RPARC),INPRDBK         IS OPEN FOR INPUT/RDBACK   UT18
         BZ    SLDAA                    IF YES, NO TOTALING REQ'D  UT18
*                                                                  UT18
* SINCE UTF WAS SPECIFIED THE TOTALING SAVE ROUTINE (IGG019AX)     UT18
*        WAS LOADED BY IGG0191Y IN STAGE 1 - SO IT IS NECESSARY    UT18
*        TO UPDATE THE SUBROUTINE ID POINTER (RUCB) TO POINT       UT18
*        TO THE SECOND ID SUBFIELD.                                UT18
*                                                                  UT18
         LA    RUCB,2(RUCB)             POINT TO NEXT ID SUBFIELD  UT18
SLDAA    EQU   *                                                 S20202
         CLI   DCBDEVT,PTR3211          TEST FOR 3211 PRINTER    S20202
         BNE   SLDAB                    NO BRANCH AROUND         S20202
*
*   FOR A 3211 PRINTER LOAD AN ERROR RETRY MODULE
*
         LA    RB,ERRMOD                GET ADDR OF ERROR RETRY  S20202
         BAL   RC,SLDROUT               GO LOAD ERROR RETRY MOD  S20202
*   WHEN RETURN FROM 'SLDROUT'- R0 CONTAINS THE ADDR OF THE
*   ASYNCHRONOUS ERROR ROUTINE. NOW BUILD AN IRB TO BE USED  IN
*   SCHEDULING THIS ROUTINE. WKA IS USED IN IGG019C3.
         CIRB  EP=(0),KEY=PP,MODE=PP,STAB=(RE),WKAREA=ASISVLN    YM1141
         ST    RF,K24(RWTG)             TEMP SAVE FOR IRB ADDR   S20202
         MVC   DEBIRBOF(THREE,RDEB),K25(RWTG) MV IRB ADDR INTO   S20202
*                                       DEB                      S20202
SLDAB    EQU   *                                                 M5150
         USING WTGENTRY,RWTGC                                    Y02072
         MVC   WTGIDTTR,NEXTMOD         ID OF NEXT MOD         @Z30TSCF
         TM    DCBCIND2,QSAMB          DCB FOR QSAM
         BO    SLD100                  YES,BRANCH
*
         LA    RB,CHECK                GET ID OF CHECK ROUTINE
         B     SLD105
*
SLD100   EQU   *
         LA    RB,GERR                 GET GERR ROUTINE ID
*
         TM    DISPSN(PARAR),OUTP      DCB FOR OUTPUT
         BO    SLD200                  YES, BRANCH
*
SLD105   EQU   *
         TM    DCBOFLGS,X'20'           CONCATENATION UNLIKE ATTRIBUTES
         BZ    SLDA0                   NO,GO TO LOAD ROUTINE
*
         BAL   RC,SLDROUT1             STORE CHECK OR GERR ID IN DEB
         B     SLDA1
*
SLDA0    EQU   *
         BAL   RC,SLDROUT              GO TO LOAD ROUTINE
         MVC   DCBCHECK+1(3),25(RWTG)  STORE CHECK/GERR ID IN DCB
*
SLDA1    EQU   *
         TM    DCBCIND2,QSAMB          DCB FOR QSAMB
         BO    SLD101                  YES,BRANCH
*
         LA    RB,WRH2                 GET READ WRITE ID
         B     SLD150                  GO TO LOAD ROUTINE
*
*
*
SLD101   EQU   *
         TM    DCBDEVT,TAPEB            DCB USING TAPE
         BZ    SLD160                   NO,BRANCH
*
         TM    DEBOPATB,X'03'           OPEN FOR BACKWARD READ
         BC    9,SLD160                 NO,BRANCH
*
         LA    RB,SBLF                  SET UP BASE FOR BACKWARD GETS
         TM    DCBMACRF,MOVEXCHB       DCB USING MOVE OR SUBST. MODE
         BZ    SLD150                   NO,BRANCH MUST BE LOCATE MODE
         LA    RB,L'IDLEN(RB)           POINT TO MOVE MODE       Y02072
SLD150   EQU   *
         BAL   RC,SLDROUT               TO LOAD FUNCTION
         MVC   DCBGET+1(3),25(RWTG)    PUT ADDRESS IN DCBGET/READ
         B     SLDEOB                   TO SPECIAL ROUTINES
*
SLD160   EQU   *
*
         LA    RB,SGLF                  SET UP FOR NORMAL GET IDS
         TM    DCBMACRF,MOVEXCHB       DCB USING MOVE OR SUBST. MODE
         BZ    SLD175                   NO,BRANCH MUST BE LOCATE MODE
SLD173   EQU   *
         LA    RB,2*L'IDLEN(RB)         UPDATE TO MOVE MODE      Y02072
SLD175   EQU   *
         TM    DCBRECFM,DCBRECF         FORMAT F OR U           SA66897
         BO    SLD150                   YES, GO LOAD ROUTINE    SA66897
         TM    DCBRECFM,DCBRECV         FORMAT V                SA66897
         BO    SLD180                   YES, GO INCR TO NEXT ID SA66897
*
* BECAUSE DCBRECFM FIELD BITS 0, 1, & 2 HAVE DUPLICATE MEANINGS
* IT IS NECESSARY TO MAKE THE FOLLOWING TWO TESTS TO DETERMINE
* IF FORMAT D RECORDS ARE BEING USED.
*   RECFM = 001XXXXX - UNDEFINED REC FORMAT WITH TRK OVERFLO
*   RECFM = 001XXXXX - ASCII TAPE (OPTCD = Q)
* AT THIS POINT BITS 0 & 1 ARE ZERO.
*
         TM    DCBRECFM,DCBRECD         ASCII TAPE OR TRK OVFLO SA66897
         BZ    SLD150                   NO, GO LOAD FOR FORMAT  SA66897
*                                         U RECORDS             SA66897
         TM    DCBOPTCD,DCBOPTQ         ASCII TAPE              SA66897
         BZ    SLD150                   NO, GO LOAD U FORMAT    SA66897
SLD180   EQU   *                                                 S20038
         LA    RB,L'IDLEN(RB)           UPDATE TO V REC IDS      Y02072
         B     SLD150                   TO LOAD FUNCTION
*
SLD200   LA    RB,PERR                  GET ADDRESS OF PERR ID
         BAL   RC,SLDROUT               TO LOAD SUBROUTINE
         MVC   DCBPERR+1(3),25(RWTG)    LOAD PERR ADDRESS IN DCB
*
SLD250   LA    RB,SPLF                  ESTABLISH BASE FOR PUTS
*
         TM    DCBMACRF+1,MOVEXCHB     DCB USING MOVE OR SUBST. MODE
         BZ    SLD175                   NO,BRANCH MUST BE LOCATE MODE
         B     SLD173                   SET UP FOR MOVE ROUTINES
*
***********************************************************************
*
SLDEOB   EQU   *
*
RELOOP   LA    RWTGC,WGOFF(0,RWTGC)     INCREMENT CURR WTG ENTRY
         LA    RPARC,PLOFF(0,RPARC)     INCR CURRENT DCB ENTRY PRTR
         CLC   0(2,RWTGC),AMIDCNST      THIS RT NEEDED AGAIN
         BCR   8,RBASE
*
         CLC   0(2,RWTGC),OPIDCNST      END OF TABLE
         BC    7,RELOOP                 NO,CHECK NEXT ENTRY
*
         LR    RPARC,RPAR
         LA    RWTGC,WAOFF(0,RWTG)      REINITIALIZE WTG LIST PTR
ZCHEK    CLI   0(RWTGC),X'00'          IS THIS ENTRY COMPLETE
         BC    7,TCTLRTN                IF NOT TRANSFER CONTROL
*
         LA    RWTGC,WGOFF(0,RWTGC)     GET NEXT ENTRY
         LA    RPARC,PLOFF(0,RPARC)
         BC    15,ZCHEK
*
TCTLRTN  EQU   *
         USING WTG,RWTG
         IECRES LOAD,PREFIX=WTGPREFX,BRANCH=DIRECT,            @Z30TSCF*
               MODID=WTGENTRY                                  @Z30TSCF
         DROP  RWTGC,RWTG                                      @Z30TSCF
*
WAOFF    EQU   32
PLOFF    EQU   4                        OFFSET OF DCB ENTRIES
WGOFF    EQU   8                        OFFSET OF WTG ENTRIES
OPIDCNST DC    C'0S'
AMIDCNST DC    C'13'
         DS    0H
SLDROUT  EQU   *
         USING WTGMODNM,RWTG                                     Y02072
         MVC   WTGMODID,0(RB)           ID TO MOD NAME           Y02072
         DROP  RWTG                                              Y02072
         L     R1,CVTPTR                LOAD CVT ADDRESS         YM1140
         USING CVT,R1                   CVT ADDRESSABILITY       YM1140
         L     R1,CVTLINK               GET LPALIB DCB ADDRESS   YM1140
         DROP  R1                       DROP CVT BASE            YM1140
*
         LOAD  EPLOC=(RWTG),DCB=(1)                              YM1140
*
*
*
         ST    RE,24(RWTG)              TEMP STORE OF ROUTINE ADDR,
SLDROUT1 MVC   0(2,RUCB),0(RB)          STORE ROUTINES ID IN DEB
         LA    RUCB,2(RUCB)             UPDATE SUBRT PNTR
         SR    RD,RD                                             A39228
         IC    RD,DEBNMSUB              GET NO. OF SUBROUTINES   A39228
*                                       LOADED                   A39228
         LA    RD,1(RD)                 ADD ONE TO TOTAL         A39228
         STC   RD,DEBNMSUB              STORE NEW TOTAL OF       A39228
*                                       SUBROUTINES LOADED
         BR    RC                      RETURN
         EJECT
*
*   BELOW ARE THE QSAM ROUTINES BEING SUPPORTED
*
NEXTMOD  DC    C'19',VL3(IGG01919)      IGG01919 - THIS IS THE @Z30TSCF
SGLF     DC    C'AA'                    SIMPLE GET LOC MODE FIXED REC.
SGLV     DC    C'AB'                    SIMPLE GET LOC MODE VARIABLE R.
SGMF     DC    C'AC'                    SIMPLE GET MOVE MD FIXED RECS.
SGMV     DC    C'AD'                    SIMPLE GET MOVE MD VARIABLE REC
SPLF     DC    C'AI'                   SIMPLE PUT LOC MD. FIXED RECS.
SPLV     DC    C'AJ'                    SIMPLE PUT LOC MD. VARIABLE REC
SPMF     DC    C'AK'                    SIMPLE PUT MOVE MD. FIXED REGS
SPMV     DC    C'AL'                    SIMPLE PUT MOVE MD. VARIABLE RC
SBLF     DC    C'AM'                    SIMPLE GETBACKWARDS LOC MD  FIX
SBMF     DC    C'AN'                    SIMPLE GETBACKWARDS MOVE MD VAR
GERR     DC    C'AQ'                    GET ERROR ROUTINE
PERR     DC    C'AR'                    PUT ERROR ROUTINE
*
*  THIS CONCLUDES THOSE QSAM MODULES THAT ARE BEING SUPPORTED NOW
*
*   BELOW ARE THE BSAM MODULES BEING SUPPORTED AT THIS TIME
*
WRH2     DC    C'BA'                    READ-WRITE ROUTINE
CHECK    DC    C'BB'                    CHECK ROUTINE
*
*    THIS CONCLUDES THE BSAM MODES BEING SUPPORTED NOW
*
*   3211 ERROR RETRY MODULE
*
ERRMOD   DC    C'FS'        ERR RTRY MOD TTR                     M5150
IDLEN    DS    0CL2                     LENGTH OF MODULE ID      Y02072
         SPACE
PATCH    DC    25H'0'                   PATCH AREA               Y02072
END      EQU   *                        END OF MODULE            Y02072
         IECDSECS  MAIN,WTG,PREFX,EXPAND=YES                   @Z30TSCF
         ORG   WTGIDTTR                                          Y02072
WTGID    DS    CL2                      NEXT MODS ID             Y02072
*
*
CVT      DSECT
         CVT
*
*
BLDEB    DSECT
DEB      DS    0F
DEBNMSUB DS    0CL1
DEBTCBAD DS    CL4
DEBAMLNG DS    0CL1
DEBDEBAD DS    CL4
DEBOGLGS DS    0CL1
DEBIRBAD DS    CL4
DEBOPATB DS    0CL1
DEBSYSPG DS    CL4
DEBNMEXT DS    0CL1
DEBUSRPG DS    CL4
DEBPRIOR DS    0CL1
DEBECBAD DS    CL4
DEBPROTG DS    0CL1
DEBDEBID DS    0CL1
DEBDCBAD DS    CL4
DEBEXSCL DS    0CL1
DEBAPPAD DS    CL4
DEBDVMOD DS    0CL1
DEBUCBAD DS    CL4
DEBBINUM DS    CL2
DEBSTRCC DS    CL2
DEBSTRHH DS    CL2
DEBENDCC DS    CL2
DEBENDHH DS    CL2
DEBNMTRK DS    CL2
*
           DCBD  DSORG=PS
*
**********************************************************************
*
           END
