         TITLE 'IFG0202K                      CLOSE FINAL COMMON FUNCTIO
               ON STRING 2'                                      Y02134
IFG0202K CSECT
***********************************************************************
*                                                                     *
*          VS2 RELEASE 03 DELETIONS                                   *
*360720,435924                                                 @ZA02193
*0000435602                                                    @ZA12942
*0000435905                                                    @ZA13790
*          VS2 RELEASE 02 DELETIONS                                   *
*0000                                                          @ZA02201
*          VS2 RELEASE 01 DELETIONS                                   *
*                                                                     *
*0000                                                            YM2093
*0000                                                            YM3035
*0000                                                            YM2949
*0000                                                            YM4411
*
*          VS1 RELEASE 02 DELETIONS
*0000                                                            XM0633
*                                                                     *
*          RELEASE 21 DELETIONS/CHANGES                               *
*0000025000-029000,079000-083000,097000,106000-114000,146000-    M0528
*0000292000,320000-328000,387000-388000,488000-555000            M0528
*                                                                A36405
*                                                                S21088
*                                                                M0023
*                                                                     *
* MODULE NAME = IFG0202K                                              *
*                                                                     *
* DESCRIPTIVE NAME = CLOSE COMMON FINAL FUNCTION STRING 2             *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS CHANGE LEVEL 000                                             *
*                                                                     *
* FUNCTION -                                                          *
*    THIS MODULE CONTAINS THE FUNCTION(S) OR PART(S) OF FUNCTION(S)-- *
*    CLOSE FINAL RESTORE SYSTEM FUNCTION.                             *
*       THIS FUNCTION STARTS IN MODULE IFG0202J.                      *
*    CLOSE FINAL TERMINATION FUNCTION.                                *
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)' FOR DETAILS.         *
*                                                                     *
* ENTRY POINTS -                                                      *
*         IFG0202K - ENTRY POINT VIA AN XCTL FROM THE FOLLOWING--     *
*             IFG0202J - PROCESS CLOSE FINAL RESTORE SYSTEM           *
*                        FUNCTION.                                    *
*             IFG0200Y - IF ACB BUSY AFTER RETURN FROM EXECUTORS      *
*                                                                     *
* INPUT -                                                             *
*    ENTERED IN DATA MANAGEMENT KEY                              Y02082
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
* OUTPUT -                                                            *
*    EXIT IN DATA MANAGEMENT KEY                                 Y02082
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*         IFG019RA - OPEN/CLOSE/EOV RESIDENT ROUTINE FOR XCTL AND     *
*                    WAIT.                                            *
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
* EXITS, NORMAL -                                                     *
*    EXIT VIA THE RESIDENT ROUTINE XCTL TO THE FOLLOWING--            *
*         IFG0202L - CONTINUE PROCESSING CLOSE FINAL TERMINATION      *
*                    FUNCTION.                                        *
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
* EXITS, ERROR -                                                      *
*    EXIT IS TO THE PROBLEM DETERMINATION MODULE IFG0200P, IF AN      *
*    ABEND SITUATION OCCURS IN THIS MODULE.  REFER TO THE FOLLOWING   *
*    'FUNCTION PROLOG(S)'.                                            *
*                                                                     *
* TABLES/WORK AREAS -                                                 *
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
* ATTRIBUTES -                                                        *
*    REENTRANT, REFRESHABLE, READ-ONLY, ENABLED, PRIVILEGED           *
*                                                                     *
* CHARACTER CODE DEPENDENCY -                                         *
*    CLASS ONE CHARACTER CODE DEPENDENCY - THE EBCDIC CHARACTER CODE  *
*    WAS USED FOR ASSEMBLY.  THE MODULE MUST BE REASSEMBLED IF A      *
*    DIFFERENT CHARACTER SET IS USED FOR EXECUTION.                   *
*                                                                     *
* NOTES -                                                             *
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
***********************************************************************
         EJECT
         USING IHADCB,RDCB
         USING FORCORE,RCORE
         USING WTG,RWTG                 WHERE-TO-GO TABLE        Y02080
         USING TCB,RET
         USING UCBOB,RUCB
         USING CVT,RD
         USING TIOENTRY,RTIOT
         USING DEBBASIC,RDEB                                     Y02134
*
         BALR  RBASE,0                  ESTABLISH BASE REGISTER
         USING *,RBASE
         EJECT
*                                                                     *
*                          FUNCTION PROLOG                            *
*                                                                     *
***********************************************************************
*                                                                     *
* FUNCTION NAME -                                                     *
*    CLOSE FINAL RESTORE SYSTEM FUNCTION.                             *
*                                                                     *
* (STATUS) -                                                          *
*    NOT APPLICABLE                                                   *
*                                                                     *
* FUNCTION -                                                          *
*    RESTORE DCB TO ITS PRE-OPEN STATE IF THE DCB WAS MODIFIED BY OPEN*
*    DECREMENT DATA MANAGEMENT COUNT.                                 *
*                                                                     *
* ENTRY POINTS -                                                      *
*    ENTERED FROM THE FOLLOWING--                                     *
*    CLOSE FINAL RESTORE USER FUNCTION.                               *
*                                                                     *
* INPUT -                                                             *
*    A POINTER TO EACH OF THE FOLLOWING--                             *
*       CURRENT PARAMETER LIST ENTRY- RPARC                           *
*       DD ENTRY IN THE TIOT- RTIOT                                   *
*       WTG TABLE- RWTG                                               *
*       CURRENT WTG TABLE ENTRY- RWTGC                                *
*       DCB- RDCB                                                     *
*       WORK AREA- RCORE                                              *
*       RESIDENT ROUTINE- RES                                         *
*       UCB- RUCB                                                     *
*       DEB- RDEB                                                     *
*                                                                     *
* OUTPUT -                                                            *
*    DATA MANAGEMENT COUNT DECREMENTED BY ONE.                        *
*    DEB PAGE FREED IF IT HAD BEEN PAGE FIXED                         *
*    DEB REMOVED FROM THE DEB CHAIN.                                  *
*    DCB RESTORED TO ITS PRE-OPEN STATE.                              *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* EXITS, NORMAL -                                                     *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*    CLOSE FINAL TERMINATION FUNCTION.                                *
*                                                                     *
* EXITS, ERROR -                                                      *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* TABLES/WORK AREAS -                                                 *
*    THE OPEN, CLOSE, OR EOV WORK AREA AND THE WHERE-TO-GO (WTG)      *
*    TABLE ARE DESCRIBED BY THE DSECTS AT THE END OF THE LISTING.     *
*                                                                     *
* ATTRIBUTES -                                                        *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* CHARACTER CODE DEPENDENCY -                                         *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* NOTES -                                                             *
*    NOT APPLICABLE                                                   *
*                                                                     *
***********************************************************************
         EJECT
***********************************************************************
*                                                                     *
*                          FUNCTION PROLOG                            *
*                                                                     *
***********************************************************************
*                                                                     *
* FUNCTION NAME -                                                     *
*    CLOSE FINAL TERMINATION FUNCTION.                                *
*                                                                     *
* (STATUS) -                                                          *
*    NOT APPLICABLE                                                   *
*                                                                     *
* FUNCTION -                                                          *
*    REMOVE DEB FROM THE DEB CHAIN.                                   *
*    INTERFACE WITH TRACE TERMINATION FACILITY.                       *
*    FREE STORAGE FOR IRB, DEB, WORKAREA AND ECBLIST.                 *
*    DECREMENT DSAB OPEN COUNT IN DSABOPCT IN CURRENT DSAB       Y02134
*      AND IN ALL SUBSEQUENT CONCATENATED DSABS IF ISAM OR IF    Y02134
*      BPAM OPEN FOR INPUT OR UPDATE                             Y02134
*    DELETE RESIDENT ROUTINE.                                         *
*    RELEASE WTG TABLE.                                               *
*    EXIT TO CALLING PROGRAM OR INITIAL LOAD OF OPEN IF CONCATENATION *
*    OF UNLIKE ATTRIBUTES IS SPECIFIED.                               *
*                                                                     *
* ENTRY POINTS -                                                      *
*    ENTERED FROM THE FOLLOWING--                                     *
*    CLOSE FINAL RESTORE SYSTEM FUNCTION.                             *
*                                                                     *
* INPUT -                                                             *
*    A POINTER TO EACH OF THE FOLLOWING--                             *
*       CURRENT PARAMETER LIST ENTRY- RPARC                           *
*       DD ENTRY IN THE TIOT- RTIOT                                   *
*       WTG TABLE- RWTG                                               *
*       CURRENT WTG TABLE ENTRY- RWTGC                                *
*       DCB- RDCB                                                     *
*       WORK AREA- RCORE                                              *
*       RESIDENT ROUTINE- RES                                         *
*       UCB- RUCB                                                     *
*       DEB- RDEB                                                     *
*                                                                     *
* OUTPUT -                                                            *
*    ALL STORAGE USED BY CLOSE RELEASED.                              *
*    RESIDENT ROUTINE DELETED.                                        *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* EXITS, NORMAL -                                                     *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*    CALLING PROGRAM.                                                 *
*    INITIAL LOAD OF OPEN.                                            *
*                                                                     *
* EXITS, ERROR -                                                      *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* TABLES/WORK AREAS -                                                 *
*    THE OPEN, CLOSE, OR EOV WORK AREA AND THE WHERE-TO-GO (WTG)      *
*    TABLE ARE DESCRIBED BY THE DSECTS AT THE END OF THE LISTING.     *
*                                                                     *
* ATTRIBUTES -                                                        *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* CHARACTER CODE DEPENDENCY -                                         *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* NOTES -                                                             *
*    NOT APPLICABLE                                                   *
*                                                                     *
***********************************************************************
         EJECT
         L     RD,CVTPTR                GET VECTOR TABLE ADDRESS M0528
         BAL   RF,CFN07300              BR TO SET UP TASK        M0528
*                                       PARAMETERS               M0528
CFN06100 EQU   *
         TM    DCBMACRF,DCBMEXCP        EXCP ACCESS TYPE
         BO    CFN06120                 YES  CANNOT BE JES
         TM    DCBDSORG+K1,ACBDORGA     JES DATA CONTROL BLOCK
         BO    CFN06110                 BR IF YES, CHECK VTAM    Y02004
         TM    TIOELINK,TIOESYIN+TIOESYOT SPOOLED DCB            Y02120
         BZ    CFN06120                 BR IF NO TO UNHOOK DEB   Y02120
         B     CFN06690                 BR YES TO RESTORE DCB  @ZA02193
CFN06110 EQU   *                        ACB                      Y02004
         CLI   ACBAMETH-IFGACB(RDCB),ACBVTAM IS IT VTAM ACB      YM3011
         BE    CFN06700                 BR IF YES TO RESTORE ACB YM3011
CFN06120 EQU   *
         L     RDEB,DCBDEBAD            DEB ADDRESS              YM5929
         LA    RF,DEBBASIC              DEB ADDRESS-HIGH BYTE 0  YM5929
         SH    RF,AVTOFSET              RF POINTS TO AVT IF IT   YM5929
*                                       IS PRESENT IN DEB PREFIX YM5929
         CLM   RF,B'0111',DEBAPPB       IS AVT IN DEB PREFIX     YM5929
         BNE   CFN06122                 BRANCH IF NO             YM5929
         USING DEBAVT,RF                                         YM5929
         TM    DEBSIOAB,X10             IS DEB PAGE FIXED        YM5929
         BZ    CFN06122                 BRANCH IF NO             YM5929
         XR    R1,R1                    ZERO FOR IC              YM5929
         IC    R1,DEBLNGTH              LENGTH OF DEB IN DWORDS  YM5929
         SLL   R1,K3                    LENGTH OF DEB            YM5929
         AR    RF,R1                    END OF DEB + 1           YM5929
         ICM   R1,B'0111',DEBAPPB       START OF PAGE FREE       YM5929
         PGFREE R,A=(1),EA=(15)         PAGE FREE DEB            YM5929
         L     RF,DEBAPPAD              DEB AVT ADDR             YM5929
         NI    DEBSIOAB,K255-X10        ZERO DEB FIXED BIT       YM5929
         DROP  RF                                                YM5929
CFN06122 EQU   *                        UNCHAIN DEB FROM TCB     YM5929
*
*   REMOVE DEB FROM DEB CHAIN
*
         L     RF,WTGPREFX              LOAD POINTER TO PREFIX   Y02080
         USING IECPREFX,RF              RF POINTS TO PREFIX      Y02080
         STM   R0,RF,IECREGSV+K8        SAVE 16 REGISTERS        Y02080
         MODESET EXTKEY=ZERO            MODESET KEY              Y02082
CFN06121 SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND, DISABLE          Y02080X
               RELATED=(LOCAL,IFG0202K(CFN06170))                Y02080
         LTR   RD,RD                    TEST FOR ERROR           Y02080
         LM    R0,RF,IECREGSV+K8        RESTORE 16 REGISTERS     Y02080
         BNZ   CFN01706                 BRANCH IF ERROR          Y02080
         L     RDEB,DCBDEBAD            LOAD POINTER TO DEB      Y02080
CFN06125 EQU   *                        LOOP TCB/DEB DECHAIN     Y02082
         L     R1,DEBTCBAD              TCB ADDRESS FROM DEB     Y02080
         LA    R1,TCBDEB-TCB-(DEBDEBAD-DEBBASIC)(,R1) INITIALIZE Y02134
*                                    TO PROCESS FIRST DEB        Y02134
CFN06130 EQU   *
         CLM   RDEB,K7,DEBDEBAD-DEBBASIC+K1(R1) COMPARE DEBS     Y02134
         BE    CFN06150                 BRANCH IF DEB IS FOUND   Y02080
         CLC   DEBDEBAD-DEBBASIC+K1(K3,R1),ZERO CHECK FOR END    Y02134
*                                       OF DEBS                  Y02134
         BE    CFN06170                 DEB IS NOT ON CHAIN      Y02080
         L     R1,DEBDEBAD-DEBBASIC(,R1) GET ADDR OF NEXT DEB    Y02134
         B     CFN06130                 BRANCH TO PROCESS NEXT DEB
CFN06150 EQU   *
         LR    RC,RDEB                  GET DEB ADDRESS          Y02082
         L     RD,DEBDEBAD              PT TO NEXT DEB           Y02082
         ICM   RD,K8,DEBDEBAD-DEBBASIC(R1) PRIME HI ORDER BYTE   Y02082
         ICM   RC,K8,DEBDEBAD-DEBBASIC(R1) PRIME HI ORDER BYTE   Y02082
         CS    RC,RD,DEBDEBAD-DEBBASIC(R1) DECHAIN DEB           Y02082
         BNZ   CFN06125                 BR IF NOT SUCCESSFUL     Y02082
         MVI   DXATCLOS,DXATRDEB        DEB REMOVED FR DEB CHAIN Y02144
CFN06170 SETLOCK RELEASE,TYPE=LOCAL,    ENABLE                   Y02080X
               RELATED=(LOCAL,IFG0202K(CFN06121))                Y02080
         MODESET EXTKEY=DATAMGT         RETURN TO DATA MGT KEY   Y02082
         LTR   RD,RD                    TEST FOR ERROR           Y02080
         LM    R0,RF,IECREGSV+K8        RESTORE 16 REGISTERS     Y02080
         BNZ   CFN01706                 BRANCH IF ERROR          Y02080
         EJECT
*
*        DECREMENT DSAB OPEN COUNT IN CURRENT DSAB               Y02134
*        AND IN ALL CONCATENATED DSABS UNLESS THE CONCATENATION  Y02134
*        BIT IN DCBOFLGS IS ON, INDICATING AN UNLIKE ATTRIBUTES  Y02134
*        CONCATENATION                                           Y02134
*        CHAIN THROUGH CONCATENATED DSABS BOTH IN FORWARD AND    Y02134
*        BACKWARD DIRECTION                                      Y02134
*
         MVI   DXATCLOS,DXATSABS        START DECREMENTING OPEN  Y02144
*                                       COUNT IN DSAB(S)         Y02144
         L     RC,DXDSABAD              GET CURRENT DSAB         Y02134
         LTR   RC,RC                    IS THERE A DSAB          Y02134
         BZ    CFN06192                 BRANCH IF NO             Y02134
         USING DSAB,RC                                           Y02134
         TM    DCBOFLGS,DCBOCON         CONCATENATION TEST       Y02134
         BO    CFN06192                 BRANCH IF YES            Y02134
CFN06172 EQU   *                        NEXT DSAB                Y02134
         L     RD,DSABOPCT-K2           DSABOPCT 2ND HALFWORD    Y02134
CFN06174 EQU   *                        TRY AGAIN                Y02134
         MODESET EXTKEY=SCHED           ASSUME SCHEDULER KEY     Y02082
         LR    RET,RD                   SAVE FOR CS IN RD        Y02134
         SRDL  RET,K16                  SHIFT OPEN CT TO RF      Y02134
         SRA   RF,K16                   PROPOGATE SIGN FOR LTR   Y02134
         LTR   RF,RF                    MAKE SURE ITS POSITIVE   Y02134
         BNP   CFN06180                 BRANCH IF NO             Y02134
         BCTR  RF,R0                    DECREMENT BY ONE         Y02134
         SLL   RF,K16                   SHIFT TO HIGH 16 BITS    Y02134
         SLDL  RET,K16                  UPDATED FULLWORD IN RET  Y02134
         CS    RD,RET,DSABOPCT-K2       TRY TO SNEAK IT IN       Y02134
         BNE   CFN06174                 BR IF HAVE TO TRY AGAIN  Y02134
CFN06180 EQU   *                        NEGATIVE OPEN COUNT      Y02134
         MODESET EXTKEY=DATAMGT         DATA MANAGEMENT KEY      Y02082
*        DECREMENT COUNT IN ALL DSABS WHOSE TIOT                 Y02134
*        ENTRIES HAVE BLANK DDNAMES                              Y02134
         L     RC,DSABFCHN              NEXT DSAB                Y02134
         LTR   RC,RC                    IS THERE A NEXT DSAB?    Y02134
         BZ    CFN06186                 BRANCH IF NO             Y02134
         L     RTIOT,DSABTIOT           GET TIOT ENTRY           Y02134
         CLI   TIOEDDNM,C' '            CONCATENATION?           Y02134
         BE    CFN06172                 GET NEXT DSAB            Y02134
CFN06186 EQU   *                        NO MORE DSAB'S           Y02134
         L     RTIOT,DXTIOTAD           RESTORE TIOT ADDRESS     Y02134
         L     RC,DXDSABAD              GET CURRENT DSAB         Y02134
CFN06188 EQU   *                        BACK UP DSAB CHAIN       Y02134
         CLI   TIOEDDNM,C' '            IS THIS TIOT ENTRY       Y02134
*                                       CONCATENATED?            Y02134
         BNE   CFN06192                 BR IF NO-DONT BACK UP    Y02134
         L     RC,DSABBCHN              GET PREVIOUS DSAB        Y02134
         L     RTIOT,DSABTIOT           GET TIOT ADDRESS         Y02134
         L     RET,DSABOPCT-K2          GET OPEN COUNT           Y02134
CFN06190 EQU   *                        TRY AGAIN                Y02134
         LR    RD,RET                   SAVE FOR CS              Y02134
         SRDL  RET,K16                  SHIFT COUNT TO RF        Y02134
         SRA   RF,K16                   PROPOGATE SIGN BIT       Y02134
         LTR   RF,RF                    MAKE SURE ITS POSITIVE   Y02134
         BNP   CFN06188                 BRANCH IF NO TO KEEP     Y02134
*                                       BACKING UP DSAB CHAIN    Y02134
         BCTR  RF,R0                    DECREMENT OPEN COUNT     Y02134
         SLL   RF,K16                   SHIFT TO HIGH 16 BITS    Y02134
         SLDL  RET,K16                  UPDATED FULLWORD IN RET  Y02134
         MODESET EXTKEY=SCHED           SCHEDULER KEY FOR DSAB   Y02082
         CS    RD,RET,DSABOPCT-K2       TRY TO SNEAK IT IN       Y02134
         MODESET EXTKEY=DATAMGT         RETURN TO DATA MGT KEY   Y02082
         BNE   CFN06190                 BR IF NEED TO TRY AGAIN  Y02134
         B     CFN06188                 KEEP BACKING UP CHAIN    Y02134
         EJECT
CFN06192 EQU   *                        NO CONCATENATION         Y02134
         MVI   DXATCLOS,DXATSABF        FINISHED DECREMENTING    Y02144
*                                       OPEN COUNT IN DSAB(S)    Y02144
         L     RTIOT,DXTIOTAD           RESTORE TIOT ADDRESS     Y02134
         TM    DCBMACRF,DCBMEXCP        EXCP
         BO    CFN06195                 YES  NORMAL PROCESSING
         TM    DCBDSORG+K1,ACBDORGA     JES CONTROL BLOCK
         BO    CFN06010                 BR IF YES TO RESTORE ACB Y02102
*                                       MUST BE SPOOLED ACB      Y02120
CFN06195 EQU   *
         LTR   RUCB,RUCB                DUMMY DATA SET           M0528
         BZ    CFN01800                 YES                      M0528
         TM    DXATEOV,DXATNVOL         DM CT ALREADY REDUCED    YM6559
         BO    CFN01800                 BRANCH IF YES            YM6559
         TM    UCBTBYT3,UCB3TAPE+UCB3DACC DA OR TAPE             YM6559
         BZ    CFN01800                 BRANCH IF NOT            YM6559
         SPACE 1                                                 M0528
*        DECREMENT DATA MANAGEMENT COUNT USING THE DEB EXTENTS
*        1. IF NOT BPAM CONCATENATION DEB, EACH UCB WHOSE
*           ADDRESS IS IN AT LEAST ONE OF THE DEB'S EXTENTS
*           WILL HAVE ITS DATA MANAGEMENT COUNT DECREMENTED ONCE.
*        2. IF BPAM CONCATENATION, EACH CONCATENATED DATA SET
*           WILL HAVE THE UCB ON WHICH IT EXISTS DECREMENTED
*           ONCE.
*
*        NOTE- THE DATA MANAGEMENT COUNT WILL NOT BE
*        DECREMENTED IF IT IS ALREADY ZERO.
*
         MVI   DXATCLOS,DXATDMS         START DECREMENTING DATA  Y02144
*                                       MANAGEMENT CNT IN UCB(S) Y02144
         XR    RET,RET                  ZERO FOR IC              YM6559
         IC    RET,DEBNMEXT             NUMBER OF EXTENTS        YM6559
         LA    RC,DEBSUCBA              FIRST EXTENT ADDRESS     YM6559
         TM    UCBTBYT3,UCB3DACC        DIRECT ACCESS            YM6559
         BZ    CFN01295                 BRANCH IF NO             YM6559
         TM    DEBOFLGS,DEBRERR         BPAM CONCATENATION       YM6559
         BO    CFN01280                 BRANCH IF YES            YM6559
CFN01250 EQU   *                        NON BPAM CONCAT. LOGIC   YM6559
         LA    RD,DEBBASIC-DEBAMTYP     OFFSET BACK TO DEBAMTYP  YM6559
         LA    RDEB,K0(,RDEB)           CLEAR FOR SR             YM6559
         SR    RDEB,RD                  RDEB POINTS TO AMTYP     YM6559
         CLC   ISAMDEBT,DEBAMTYP-DEBAMTYP(RDEB) ISAM DEB         YM6559
         BNE   CFN01255                 BRANCH IF NOT            YM6559
         LA    RC,K16(,RC)              INCREMENT PAST FIRST     YM6559
*                                       DUMMY ISAM EXTENT        YM6559
         BCTR  RET,0                    REDUCE NO. OF EXTS BY 1  YM6559
CFN01255 EQU   *                        LOOP FOR EACH UNIQUE UCB YM6559
         LTR   RET,RET                  ANY MORE EXTENTS         YM6559
         BZ    CFN01700                 BRANCH IF NOT            YM6559
         L     RUCB,K0(,RC)             UCB FROM NEXT EXTENT     YM6559
         LA    RUCB,K0(,RUCB)           CLEAR FOR LTR            YM6559
         LTR   RUCB,RUCB                IS IT ZERO               YM6559
         BZ    CFN01275                 BRANCH IF YES            YM6559
         LR    RD,RET                   SAVE NO. EXTENTS         YM6559
         LR    RDEB,RC                  SAVE CURRENT EXT. ADDR.  YM6559
CFN01260 EQU   *                        ZERO UCBS IN DEB = RUCB  YM6559
         CLM   RUCB,B'0111',K1(RDEB)    EXTENT HAS OUR UCB       YM6559
         BNE   CFN01265                 BRANCH IF NOT            YM6559
         XC    K0(K4,RDEB),K0(RDEB)     ZERO UCB ADDR IN EXTENT  YM6559
CFN01265 EQU   *                        GET NEXT EXTENT          YM6559
         LA    RDEB,K16(,RDEB)          GET NEXT EXTENT          YM6559
         BCT   RD,CFN01260              PROCESS NEXT EXTENT      YM6559
CFN01270 EQU   *                        DECR. RUCB'S D.M. COUNT  YM6559
         BAL   RTIOT,CFN01300           DECR DM COUNT            YM6559
CFN01275 EQU   *                        PROCESS NEXT EXTENT      YM6559
         LA    RC,K16(,RC)              INCREMENT TO NEXT EXTENT YM6559
         BCT   RET,CFN01255             TRY NEXT EXTENT          YM6559
         B     CFN01700                 FINISHED                 YM6559
         SPACE 2
CFN01280 EQU   *                        BPAM CONCAT. DEB         YM6559
         SLL   RET,K4                   SIZE OF EXTENTS          YM6559
         LA    RET,K0(RC,RET)           RET POINTS TO EXTENT     YM6559
*                                       NUMBERS AT END OF DEB    YM6559
         SR    RD,RD                    ZERO FOR IC              YM6559
         IC    RD,DEBAMLNG              NUMBER OF EXTENT NOS.    YM6559
         LA    RD,K1(,RD)               NUMBER OF DATASETS       YM6559
CFN01285 EQU   *                        LOOP FOR EACH DATA SET   YM6559
         CLM   RD,K1,DEBAMLNG           ARE WE ON EXTENT 0       YM6559
         LA    RF,K0(,0)                INIT EXTENT TO 0         YM6559
         BH    CFN01290                 BR IF EXTENT 0           YM6559
         IC    RF,K0(RET)               GET EXTENT NUMBER        YM6559
         SLL   RF,K4                    EXTNO TIMES 16           YM6559
         LA    RET,K1(,RET)             INCREMENT EXTENT NO.     YM6559
*                                       ADDR TO NEXT EXT. NO.    YM6559
CFN01290 EQU   *                        ZERO UCBADDR & DECR DMCT YM6559
         LA    RTIOT,K0(RC,RF)          ADDR OF EXTENT           YM6559
         L     RUCB,K0(,RTIOT)          GET UCB ADDR             YM6559
         XC    K0(K4,RTIOT),K0(RTIOT)   ZERO UCB ADDR            YM6559
         BAL   RTIOT,CFN01300           DECR. D. M. COUNT        YM6559
         BCT   RD,CFN01285              GET NEXT DATA SET        YM6559
         B     CFN01700                 FINISHED BPAM CONCAT     YM6559
         SPACE 2
CFN01295 EQU   *                        TAPE                     YM6559
         L     RUCB,K0(,RC)             GET UCB ADDR             YM6559
         XC    K0(K4,RC),K0(RC)         ZERO UCB ADDR IN DEB     YM6559
         LA    RTIOT,CFN01700           FINISHED ADDR            YM6559
         SPACE 2
CFN01300 EQU   *                        DECREMENT DATA           YM6559
*                                       MANAGEMENT COUNT         YM6559
         STM   RTIOT,RET,DXREG9         SAVE 9-14                YM6559
*                                                                Y02080
*        DECREMENT D M COUNT BY 1. REPLACE D M COUNT IN UCB      Y02080
*                                                                Y02080
         L     R0,UCB+(((UCBDMCT-UCB)/4)*4) LOAD WORD CONTAINING Y02080
*                                       BYTE TO BE MODIFIED      Y02080
         MODESET EXTKEY=ZERO            ASSUME KEY ZERO          YM6559
CFN01502 EQU   *                        DECREMENT DM COUNT       Y02132
         LR    R1,R0                    PREPARE RESET MOUNT BIT  YM6559
         L     RF,CONFF7F               GET MASK FOR MOUNT BIT   YM6559
         NR    R1,RF                    RESET MOUNT BIT IN REG   YM6559
         LR    RF,R0                    GET DATA MGT COUNT       Y02132
         SLL   RF,K25                   LEAVE ONLY DM COUNT      Y02132
         LTR   RF,RF                    TEST FOR COUNT OF ZERO   Y02132
         BZ    CFN01600                 BRANCH IF ZERO           Y02132
         SH    R1,ONE                   DECREMENT COUNT BY ONE   Y02132
CFN01600 EQU   *                        ZERO DM COUNT & MNT BIT  YM6559
         CS    R0,R1,UCB+(((UCBDMCT-UCB)/4)*4) TRY TO UPDATE     Y02080
         BNE   CFN01502                 IF NO, DO IT AGAIN       Y02080
*                                                                Y02132
*        IF DMCOUNT = 0 AND VIO UCB, ISSUE WICLOSE               Y02132
*                                                                Y02132
         TM    UCBJBNR,UCBVRDEV         TEST FOR VIO UCB         Y02132
         BNO   CFN01650                 BR IF NOT                Y02132
         TM    UCBDMCT,K255-UCBMOUNT    TEST COUNT FOR 0         Y02132
         BNZ   CFN01650                 BR IF NOT                Y02132
*        OBTAIN LOCAL LOCK -- FOR WICLOSE                        YM7363
*        TO BE RELEASED IN THIS MODULE                           YM7363
*                                                                YM7363
         MODESET EXTKEY=ZERO            ASSUME KEY ZERO          YM7363
         L     RF,WTGPREFX              LOAD PREFIX POINTER      YM7363
         USING IECPREFX,RF              PREFIX ADDRESSABILITY    YM7363
         STM   RD,RC,IECREGSV+K8        SAVE REGS 13 - 12        YM7363
CFN01610 SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                  YM7363*
               RELATED=(LOCAL,IFG0202K(CFN01630)) GET LOCAL LOCK YM7363
         LM    RET,RC,IECREGSV+K12      RESTORE REGS 14 - 12     YM7363
         LTR   RD,RD                    TEST RETURN CODE         YM7363
         BNZ   CFN01706                 GO TO ERROR ROUTINE      YM7363
         LA    R1,VDSUCB-VDSCB(,RUCB)   GET ADDR OF VDSCB        Y02132
         LA    RD,IECREGSV              POINTER TO SAVE AREA     YM7363
         WICLOSE VDSCB=(1)              ISSUE VIO CLOSE          Y02132
*                                                                YM7363
*        RELEASE LOCAL LOCK -- OBTAINED IN THIS MODULE           YM7363
*                                                                YM7363
         L     RF,WTGPREFX              LOAD PREFIX POINTER      YM7363
         STM   RD,RC,IECREGSV+K8        SAVE REGS 13 - 12        YM7363
CFN01630 SETLOCK RELEASE,TYPE=LOCAL,                             YM7363*
               RELATED=(LOCAL,IFG0202K(CFN01610)) RELEASE LOCK   YM7363
         LTR   RD,RD                    TEST RETURN CODE         YM7363
         LM    RD,RC,IECREGSV+K8        RESTORE REGS 13-12       YM7363
         BNZ   CFN01706                 YES ERROR, BRANCH        YM7363
CFN01650 EQU   *                        RETURN FROM ROUTINE      YM6559
         MODESET EXTKEY=DATAMGT         RETURN TO D.M. KEY       YM6559
         LM    RTIOT,RET,DXREG9         RESTORE 9-14             YM7334
         BR    RTIOT                    RETURN                   YM6559
         DROP  RF                                                YM7363
         SPACE 2
CFN01700 EQU   *                                                 M0528
         MVI   DXATCLOS,DXATDMF         FINISHED DECREMENTING    Y02144
*                                       DATA MANAGEMENT COUNT(S) Y02144
         L     RDEB,DCBDEBAD            RESTORE DEB ADDR         YM6559
         L     RTIOT,DXTIOTAD           RESTORE TO CURRENT TIOT  Y02134
*                                       ENTRY                    Y02134
         L     RUCB,DXUCBADR            RESTORE TO CURRENT UCB   YM2381
         LA    RUCB,K0(,RUCB)           ZERO HIGH ORDER BYTE     YM2381
         B     CFN01800                 BRANCH AROUND ERROR RTN  YM7363
*                                                                Y02080
*         SETLOCK ERROR ROUTINE                                  Y02080
*                                                                Y02080
CFN01706 EQU   *                        SETLOCK ERROR            Y02082
         MODESET EXTKEY=DATAMGT         RETURN TO DATA MGT KEY   Y02082
         DMABCOND PCK,SETLOCK           SETLOCK ERROR            Y02132
*                                                                Y02080
         EJECT
*
*  RESTORE MERGED FIELDS TO PRE-OPEN STATUS                      Y02120
*
CFN06010 EQU   *                        RESTORE MERGED FIELDS    Y02080
         BAL   RF,CFN07300              BRANCH TO RESTORE REGS   Y02080
         TM    DEBOFLGS,MODACB          WAS ACB MODIFIED
         BZ    CFN06030                 NO, SKIP ACB RESTORE
         L     RC,DXDEBXAD              GET DEB EXTENSION ADDR   Y02120
         USING DEBXTN,RC                                         Y02120
         LA    RF,DEBXDCBM              POINT RF TO MODIFICATION Y02120
*                                       MASK                     Y02120
         DROP  RC                                                Y02120
         USING IFGACB,RDCB              USING FOR ACB
         TM    K2(RC),K16               WAS BLKSIZE MODIFIED
         BZ    CFN06020                 NO, DO NOT RESTORE
         XC    ACBBLKSZ,ACBBLKSZ        YES, ZERO BLKSIZE
CFN06020 TM    K3(RC),K22               WAS LRECL MODIFIED
         BZ    CFN06030                 NO, DO NOT RESTORE
         XC    ACBLRECL,ACBLRECL        YES, ZERO LRECL
         USING IHADCB,RDCB              USING FOR DCB
CFN06030 EQU   *                        END OF ACB MODIFICATION
         EJECT
CFN01800 EQU   *                                                 M0528
         L     R1,DCBDEBAD              DEB ADDRESS
         TM    TIOELINK,TIOESYIN+TIOESYOT SPOOLED ACB            Y02120
         BNZ   CFN06600                 BRANCH IF YES-NO IRB OR  Y02120
*                                       RELATED REQUEST QUEUE    Y02120
         L     R1,DEBIRBAD-DEBBASIC(R1) LOAD IRB ADDRESS         Y02134
         LA    R1,0(R1)                 CLEAR HI ORDER BYTE
         LTR   R1,R1                    IS THERE AN IRB
         BZ    CFN06550                 BRANCH IS THERE ISN'T    Y02080
         TM    RBSTAB2-RBSECT(R1),RBFACTV  IS IRB BUSY           A36405
         BO    CFN06550                 BRANCH IF YES            Y02080
         LH    R0,RBSIZE-RBSECT(R1)     SIZE OF IRB              Y02080
         SLL   R0,K3                    IRB SIZE IN BYTES        Y02080
         LA    RF,RBPRFLNA              GET LENGTH OF IRB PREFIX Y02080
         SR    R1,RF                    POINT TO IRB PREFIX      Y02080
*                                       FREE IRB                 Y02080
         IECRES FREE,A=(1),PREFIX=NO,STM=(0,14,WTGPREFX),SP=253,       *
               LV=(R0),KEY=0            FREE IRB                 Y02134
         EJECT
CFN06550 EQU   *                        IRB BUSY                 Y02080
         MVI   DXATCLOS,DXATIRB         IRB (IF ANY) HANDLED     Y02144
         L     R1,DCBDEBAD              DEB ADDRESS              Y02080
         L     R1,DEBECBAD-DEBBASIC(R1) RELATED REQUEST QUE PTR  Y02134
         LA    R1,0(R1)                 CLEAR HI ORDER BYTE      Y02080
         LTR   R1,R1                    RELATED REQUEST QUE ZERO Y02080
         BZ    CFN06600                 BRANCH IS ZERO           Y02080
         TM    UCBTBYT3,UCB3UREC        UNIT RECORD DEVICE       YM7233
         BZ    CFN06570                 BRANCH IF NOT            YM7233
*
*        ENSURE NO DEB ON CURRENT TCB DEB CHAIN HAS SAME         YM7233
*        RELATED REQUEST QUEUE POINTER.                          YM7233
*        ONLY WITH 3505/3525 ASSOCIATED DATA SETS SHOULD THIS    YM7233
*        OCCUR.                                                  YM7233
*
         L     RF,WTGPREFX              PREFIX ADDRESS           YM7233
         STM   RDEB,RET,IECREGSV-IECPREFX(RF) SAVE SETLOCK REGS  YM7233
         MODESET EXTKEY=SUPR            SETLOCK KEY              YM7233
*
*        LOCAL LOCK SERIALIZES TCB DEB CHAIN                     YM7233
*
CFN06555 SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                  YM7233*
               RELATED=(LOCAL,IFG0202K(CFN06568)) GET LOCK       YM7233
         MODESET EXTKEY=DATAMGT         RETURN TO OUR KEY        YM7233
         LM    RDEB,RET,IECREGSV-IECPREFX(RF) RESTORE REGS       YM7233
         L     RF,DXTCBADR              TCB ADDRESS IN RF        YM7233
         LA    RF,(TCBDEB-TCB)-(DEBDEBAD-DEBBASIC)(RF) INIT'LIZE YM7233
CFN06560 EQU   *                        CHECK ALL RRQS           YM7233
         ICM   RF,B'0111',DEBDEBB-DEBBASIC(RF) NEXT DEB          YM7233
         BZ    CFN06566                 NO MORE DEBS-FREE RRQ    YM7233
         CLM   R1,B'0111',DEBECBB-DEBBASIC(RF) IS RRQ SAME       YM7233
         BNE   CFN06560                 BR IF NO-TRY NEXT DEB    YM7233
         XR    R1,R1                    DO NOT FREE RRQ          YM7233
CFN06566 EQU   *                        RELEASE LOCK             YM7233
         L     RF,WTGPREFX              PREFIX ADDRESS           YM7233
         STM   RDEB,RET,IECREGSV-IECPREFX(RF) SAVE SETLOCK REGS  YM7233
         MODESET EXTKEY=SUPR            SETLOCK KEY              YM7233
CFN06568 SETLOCK RELEASE,TYPE=LOCAL,                             YM7233*
               RELATED=(LOCAL,IFG0202K(CFN06555)) RELEASE LOCK   YM7233
         MODESET EXTKEY=DATAMGT         RETURN TO OUR KEY        YM7233
         LM    RDEB,RET,IECREGSV-IECPREFX(RF) RESTORE LOCK REGS  YM7233
         LTR   R1,R1                    DO WE FREE RRQ           YM7233
         BZ    CFN06600                 BRANCH IF NO             YM7233
CFN06570 EQU   *                        FREE RRQ                 YM7233
*                                       FREE RELATED REQUEST QUE Y02080
         IECRES FREE,A=(1),PREFIX=NO,STM=(0,14,WTGPREFX),SP=254,       *
               LV=K8,KEY=0              FREE RELATED REQ QUEUE   Y02134
         EJECT
CFN06600 EQU   *                        SPOOLED ACB              Y02080
         MVI   DXATCLOS,DXATRRQ         RELATED REQUEST Q DONE   Y02144
         L     R1,DCBDEBAD              LOAD DEB ADDRESS         Y02080
         LA    R1,K0(,R1)               CLEAR HIGH BYTE          Y02120
         LA    RF,K4                    DISP OF DEB LENGTH       Y02080
         SR    R1,RF                    POINT TO DEB LENGTH      Y02080
         SR    R0,R0                    CLEAR R0 FOR IC INST     Y02080
         IC    R0,0(R1)                 DEB LENGTH IN DOUBLE WDS Y02080
         LA    R1,K4(R1)                POINT BACK TO DEB        Y02080
         LA    RF,K8                    LENGTH OF ACB DEB PREFIX Y02080
         TM    TIOELINK,TIOESYIN+TIOESYOT SPOOLED ACB            Y02120
         BNZ   CFN06601                 YES, BRANCH             YA03025
         LA    RF,K36                   LENGTH OF DCB DEB PREFIX Y02080
CFN06601 EQU   *                        SPOOLED ACB             YA03025
         SR    R1,RF                    FIND ADDR OF DEB PREFIX  Y02080
         SLL   R0,K3                    DEB SIZE IN BYTES        Y02080
         TM    DCBMACRF,DCBMEXCP        TEST FOR EXCP            Y02004
         BO    CFN06602                 YES, CANNOT BE ACB      YA03025
         TM    DCBDSRG2,ACBDORGA        IS CONTROL BLOCK AN ACB? Y02004
         BO    CFN06608                 BR IF YES, NO DEVICE     Y02120
*                                       TYPE FIELDS-FREE DEB     Y02120
         LTR   RUCB,RUCB                TEST FOR DUMMY           Y02080
         BZ    CFN06607                 BRANCH IF DUMMY          Y02080
CFN06602 EQU   *                        TEST DEVICE TYPE        YA03025
* ZERO OUT DEVT AND DVTBL FIELDS FOR D.A. DCB'S HERE             Y02080
*                                                                Y02080
         TM    UCBTBYT3,UCB3DACC        IS IT DIRECT ACCESS      Y02080
         BNO   CFN06606                 NO, CONTINUE USUAL RTN   Y02080
         TM    DCBMACRF,DCBMEXCP        IS IT EXCP              YA03025
         BNO   CFN06603                 NO, GO TEST DSORG       YA03025
         TM    DCBMACRF+K1,DCBMDI1W     EXCP AND 1 WORD DI?     YA03025
         BO    CFN06605                 YES BRANCH              YA03025
*    CHECK FOR 3,4, OR 5 WORD DEVICE INTERFACE WITH EXCP        YA03025
         TM    DCBMACRF+K1,DCBMDI5W+DCBMDI3W+DCBMDI4W           YA03025
         BZ    CFN06608                 NO DEVICE INTERFACE     YA03025
         B     CFN06604                 YES, ZERO DI FIELDS     YA03025
CFN06603 EQU   *                        TEST DSORG              YA03025
         TM    DCBDSORG,DCBORGIS+DCBORGDA  ISAM OR DIRECT?      YA03025
         BM    CFN06605                 NO DCBDVTBL IF ISAM/DA  YA03025
CFN06604 EQU   *                        DVTBL FIELD             YA03025
         XC    DCBDVTBL+K1(K3),DCBDVTBL+K1  CLEAR DVTBL FIELD   YA03025
CFN06605 EQU   *                        CLEAR DEVT FIELD        YA03025
         MVI   DCBDEVT,K0               CLEAR DEVT FIELD         Y02080
         XC    DCBTRBAL(K2),DCBTRBAL    CLEAR TRACK BALANCE     XA02424
         B     CFN06608                 GO FREE DEB             YA03025
CFN06606 EQU   *                        TEST FOR TP              Y02080
         TM    DCBDSORG,DCBORGMQ        QTAM DUMMY               Y02080
         BZ    CFN06608                 BRANCH IF NO             Y02080
CFN06607 EQU   *                        DUMMY                    Y02080
         TM    DCBMACRF,DCBMEXCP        EXCP?                  @ZA02201
         BZ    CFN06611                 NO, CONTINUE           @ZA02201
         TM    DCBMACRF,DCBMCOM         COMMON SECTION PRESENT?@ZA02201
         BZ    CFN06609                 NO, ASSUME PS          @ZA02201
CFN06611 EQU   *                                               @ZA02201
         NC    DCBDSORG,DCBDSORG        ANY DSORG?             @ZA02201
         BZ    CFN06609                 NO, ASSUME PS          @ZA02201
         TM    DCBDSORG,DCBORGPS+DCBORGMQ  QTAM OR TCAM DUMMY    Y02080
         BNM   CFN06608                 BR IF NO                 Y02080
         TM    TIOELINK,TIOTTERM        IS THIS TSO              Y02080
         BO    CFN06608                 BRANCH IF YES            Y02080
CFN06609 EQU   *                                               @ZA02201
         LA    R1,K20(,R1)              POINT TO DEB ORIGIN      Y02080
CFN06608 EQU   *                        FREE DEB                 Y02080
*                                       FREE DEB                 Y02080
         IECRES FREE,LV=(R0),A=(R1),KEY=5,SP=230,PREFIX=NO,      Y02080C
               STM=(0,14,WTGPREFX)                               Y02080
         EJECT
         MVI   DXATCLOS,DXATDEB         DEB CORE FREED           Y02144
         L     R1,DXDEBXAD              GET DEB EXTENSION ADDR   Y02134
         LTR   R1,R1                    TEST FOR DEB EXTENSION @ZA02193
         BZ    CFN06690                 BRANCH IF NO DEBX      @ZA02193
         XC    DXDEBXAD,DXDEBXAD        CLEAR DEBX PTR         @ZA02193
         USING DEBXTN,R1                                         Y02134
         L     RD,DEBXOPNJ              LOAD OPENJ ALLOC PTR   @ZA12942
         LH    R0,DEBXLNGH              GET DEB EXTENSION LENGTH Y02134
         IECRES FREE,LV=(0),A=(1),KEY=5,SP=230,PREFIX=NO,        Y02134*
               STM=(2,14,WTGPREFX)      FREE DEB EXTENSION       Y02134
         EJECT
*
***********************************************************************
*
*        SET UP PARMLIST FOR SVC 99 DYNAMIC ALLOCATION
*
*        DYNAMICALLY UNALLOCATE DDNAME ALLOCATED BY OPEN TYPE=J
*        WITH INHIBIT JFCB UPDATE
*
***********************************************************************
*
         LTR   RD,RD                    TEST FOR OPENJ ALLOC   @ZA02193
         BZ    CFN06690                 BRANCH IF NONE         @ZA02193
         XC    DXXCTL(OPNJDLEN),DXXCTL  CLEAR PARM LIST        @ZA02193
         XC    DXCCW1(TEXTLEN),DXCCW1   CLEAR TEXT UNITS       @ZA02193
         LA    R1,DXXCTL                PARM LIST              @ZA02193
         USING OPNJDYNA,R1              R1 PTR TO PARM WORD    @ZA02193
         LA    RF,PARMS                 POINT TO PARM LIST     @ZA02193
         ST    RF,DAPTR                 R1 -> DAPTR -> PARMS   @ZA02193
         OI    DAPTR,LASTNTRY           LAST IN LIST           @ZA02193
         MVC   PARMS(L'DYNPRM1),DYNPRM1 SET UP LIST            @ZA02193
         LA    RF,DXCCW1                POINT TO TEXT UNITS    @ZA02193
         ST    RF,TXTPP                 TXTPP -> TEXT UNITS    @ZA02193
         MVI   FLAGS21,DYNEQU5          SET FLAGS              @ZA02193
*
         LA    R1,DXCCW1                POINT TO TEXT UNITS    @ZA02193
         USING TEXTUNIT,R1              TEXT UNIT POINTER      @ZA02193
         LA    RF,UNIT1                 POINT TO UNALLOC UNIT  @ZA02193
         ST    RF,TEXTU1                UNIT 1 POINTER         @ZA02193
         LA    RF,UNIT2                 POINT TO DDNAME UNIT   @ZA02193
         ST    RF,TEXTU2                UNIT 2 POINTER         @ZA02193
         OI    TEXTU2,LASTNTRY          IND LAST IN LIST       @ZA02193
*
*        SET UP TEXT UNITS
*
         MVC   UNIT1(L'DYNU1),DYNU1     UNALLOCATE APRMS       @ZA02193
         MVC   UNIT2(L'DYNU2),DYNU2     DDNAME PARMS           @ZA02193
*
         L     RD,DSABTIOT-DSAB(,RD)    GET TIOT PTR           @ZA02193
         MVC   U2PRM,TIOEDDNM-TIOENTRY(RD) MOVE IN DDNAME      @ZA02193
*
*        GET NUMBER OF NON-BLANK CHARACTERS IN DDNAME NAME
*
         LA    RC,U2PRM+L'TIOEDDNM-K1   LAST BYTE OF DDNAME    @ZA02193
CFN06620 EQU   *                        SEARCH FOR NON-BLANK   @ZA02193
         CLI   K0(RC),C' '              IS THIS ONE BLANK      @ZA02193
         BNE   CFN06630                 BR IF NO TO COMPUTE    @ZA02193
*                                       LENGTH OF NAME         @ZA02193
         BCT   RC,CFN06620              TRY NEXT BYTE          @ZA02193
CFN06630 EQU   *                        CALCULATE LENGTH       @ZA02193
         LA    RF,U2PRM-K1              BYTE PRECEDING DDNAME  @ZA02193
         SR    RC,RF                    RC HAS LENGTH          @ZA13790
         LTR   RC,RC                    TEST NO DDNAME         @ZA13790
         BZ    CFN06640                 BRANCH IF BLANKS       @ZA02193
         STH   RC,U2LEN                 STORE DDNAME LENGTH    @ZA02193
*
         DROP  R1
         LA    R1,DXXCTL                DYN ALLOC PRM LIST     @ZA02193
         DYNALLOC                       CALL DYNAMIC ALLOC     @ZA02193
*
CFN06640 EQU   *                        CLEAR PARM LIST        @ZA02193
*
         XC    DXCCW1(TEXTLEN),DXCCW1   CLEAR PARMS            @ZA02193
         XC    DXXCTL(OPNJDLEN),DXXCTL  CLEAR PARM LIST        @ZA02193
         EJECT
CFN06690 EQU   *                        RESTORE DCB/ACB        @ZA02193
         MVI   DXATCLOS,DXATDEBX        DEB EXTENSION CORE FREED Y02144
*        TURN OFF TRAILER SW,RD BKWD SW, OPEN BIT, TM READ BIT,  Y02120
*        AND BUSY BIT. LEAVE LOCK AND CONCATENATION BITS ON.     Y02120
         NI    DCBOFLGS,DCBOCON+DCBOUNLK+DCBOLOCK                Y02080
         BAL   RF,CFN07300              BRANCH TO SET TASK PERAMETER
         TM    TCBFLGS,TCBFA            IS ABEND BIT ON
         BO    CFN06700                 BRANCH IF ABEND BIT IS ON
         TM    DCBOFLGS,DCBOCON         SEQTL CONCATENATION TEST
         BO    CFN07200                 BR IF SEQTL CONCATENATION
CFN06700 EQU   *
*    VTAM ROUTINES USE 'DCBOBUSY' AND 'ACBERFLG' TO INDICATE     YM3011
*    SUCCESSFUL OR UNSUCCESSFUL CLOSE OF A VTAM ACB, AS FOLLOWS  YM3011
*        -BUSY BIT SET TO 0 BY VTAM INDICATES AN ERROR. THE OPEN YM3011
*         BIT AND 'ACBDDNAM' WILL NOT BE RESTORED.               YM3011
*        -BUSY BIT LEFT AT 1 AND 'ACBERFLG' NON-ZERO ALSO        YM3011
*         INDICATES AN ERROR. IN THIS CASE THE OPEN BIT WILL BE  YM3011
*         RESET TO ZERO AND 'ACBDDNAM' RESTORED.                 YM3011
*        -A SUCCESSFUL CLOSE OF A VTAM ACB WILL ALSO CAUSE A     YM3011
*         RESET OF 'ACBDDNAM' AND THE OPEN BIT.                  YM3011
*        -THE BUSY BIT IS RESET TO 0 FOR ALL OF THE ABOVE CASES  YM3011
*                                                                Y02004
* CHECK FOR VTAM ACB                                             Y02004
*                                                                Y02004
         TM    DCBMACRF,DCBMEXCP        TEST FOR EXCP            Y02004
         BO    CFN06750                 YES, CANNOT BE ACB       Y02004
         TM    DCBDSRG2,ACBDORGA        IS CONTROL BLOCK AN ACB? Y02004
         BZ    CFN06750                 NO, RESTORE DCB FIELDS   Y02004
         CLI   ACBAMETH-IFGACB(RDCB),ACBVTAM IS ACB FOR VTAM?    YM3011
         BNE   CFN06750                 BR IF NO                 Y02004
*    INSURE THAT VSAM BIT AND THE DELAYED ABEND BIT IN THE WORK  YM3011
*    AREA ARE SET TO 0. ALTHOUGH THESE ARE NOT USED BY VTAM,     YM3011
*    THEY WILL BE TESTED IN THE NEXT LOAD (IFG0202L) AND SHOULD  YM3011
*    BE 0 TO AVOID ERRONEOUS BRANCHES.                           YM3011
*                                                                YM3011
         NI    JFCDSRG2,X'FF'-JFCORGAM  ZERO VSAM BIT            YM3011
         NI    JFCBMASK+K4,X'FF'-JFCMABND  0 DELAYED ABEND BIT   YM3011
*    TEST THE BUSY BIT                                           YM3011
         TM    DCBOFLGS,DCBOBUSY        DID VTAM SET BUSY BIT 0  YM3011
         BNZ   CFN06720                 NO,  RESTORE ACB         YM3011
         NI    DCBOFLGS,DCBOPEN+DCBOLOCK  RESET ALL DCBOFLAGS    YM3011
*                                       EXCEPT OPEN AND LOCK BIT YM3011
         B     CFN07200                 GO TO NEXT LOAD          YM3011
CFN06720 EQU   *                        RESTORE ACB              YM3011
         MVI   DCBOFLGS,DCBOLOCK        RESTSORE OFLGS           Y02004
         MVC   DCBDDNAM,=X'FF00000000000000' RESTORE NAME        Y02004
         B     CFN07200                 GO TO NEXT LOAD          YM3011
CFN06750 EQU   *                        NOT ACB                  Y02004
         CLI   TIOEDDNM,BLANK           IS THIS NAME BLANKS
         BNE   CFN07100                 BR IF NAME NOT BLANK
         L     RF,DXDSABAD              GET DSAB ADDR            Y02134
         USING DSAB,RF                                           Y02134
CFN06800 EQU   *                        GET PREVIOUS DSAB        Y02134
         L     RTIOT,DSABTIOT           GET TIOT ADDR            Y02134
         CLI   TIOEDDNM,C' '            BLANK DDNAME?            Y02134
         BNE   CFN07100                 BRANCH IF NON-BLANK      Y02134
         L     RF,DSABBCHN              GET PREVIOUS DSAB        Y02134
         B     CFN06800                 TRY IT                   Y02134
CFN07100 EQU   *
         MVC   DCBMACR,DCBMACRF         RESTORE MACRF
         MVC   DCBIFLG,DCBIFLGS         RESTORE IFLGS
         MVC   DCBDDNAM,TIOEDDNM        RESTORE DDNAME
CFN07170 EQU   *                        TURN OFF IOS ERROR FLAGS Y02004
         NI    DCBIFLG,X'FF'-DCBIFPIO   SET OFF ERROR FLAGS IN DCB
CFN07200 EQU   *
         SR    RET,RET                  SET UP FOR BRANCH TABLE
         IECRES LOAD,MODID=EXITMOD,BRCODE=(RET),BRANCH=QUEUED    Y02080
*                                       BRANCH TO XCTL           Y02080
         EJECT
CFN07300 EQU   *
         L     RD,CVTPTR                GET VECTOR TABLE ADDRESS
         L     RET,DXTCBADR             CURRENT TCB ADDR         Y02134
         L     RTIOT,DXTIOTAD           CURRENT TIOT ENTRY ADDR  Y02134
*
         L     RUCB,DXUCBADR            SRT-UCB ADDRESS          Y02134
         LA    RUCB,0(RUCB)             CLEAR HI-ORDER BYTE
         BR    RF                       BRANCH TO CALLER
         EJECT
         SPACE 1
**********************************************************************
*                                                                    *
*                    CONSTANTS                                       *
*                                                                    *
**********************************************************************
         SPACE 1
TIOTSPOL EQU   X'06'                    SPOOL D.S. INDICATORS    Y02080
MODACB   EQU   X'08'                    MODIFIED ACB INDICATOR   Y02080
         DS    0F                       FULLWORD BOUNDARY        YM6559
CONFF7F  DC    X'FFFFFF7F'              CONST TO RESET MOUNT BIT YM6559
ISAMDEBT DEBCHK AM=ISAM,MF=L            ISAM DEBAMTYP            YM6559
ZERO     DC    X'00000000'              ZERO COMPARE FIELD       Y02080
ONE      DC    H'1'                     HALFWORD VALUE OF ONE    Y02132
AVTOFSET DC    AL2(DEBBASIC-DEBAVT)     OFFSET FROM DEB TO AVT   YM5929
BLANKS   DC    CL8' '                   BLANK DD NAME MODEL      M0528
         EJECT
*
***********************************************************************
*
*        DYNAMIC UNALLOCATION PARAMETERS
*
***********************************************************************
*
DYNPRM1  DS    0CL2                     SVC 99 PARMS           @ZA02193
         DC    AL1(S99RBEND-S99RB)      LENGTH OF PARMS        @ZA02193
         DC    AL1(S99VRBUN)            UNALLOCATE DDNAME      @ZA02193
         DS    0F                       ALIGN BOUNDRY          @ZA02193
DYNU1    DS    0CL4                     UNALLOCATE             @ZA02193
         DC    AL2(DUNUNALC)            UNALLOCATE FUNCTION    @ZA02193
         DC    AL2(K0)                  1 PARM                 @ZA13790
DYNU2    DS    0CL4                     UNALLOCATE DDNAME      @ZA02193
         DC    AL2(DUNDDNAM)            UNALLOC DDNAME FUNCTION@ZA02193
         DC    AL2(K1)                  1 PARM                 @ZA02193
         EJECT
         XCTLTABL ID=(EXITMOD,2L,,0P),SVC=020,BRT=YES,LENGTH=    Y02080
         EJECT
*
***********************************************************************
*
*        DYNAMIC ALLOCATION MACROS AND WORKAREAS               @ZA02193
*
***********************************************************************
*
         IEFZB4D0                       DYNAMIC ALLOC PARM LIST@ZA02193
         EJECT
         IEFZB4D2                       DYNAMIC ALLOC KEYS     @ZA02193
         EJECT
*
***************************************************************@ZA02193
*                                                              @ZA02193
*        DYNAMIC ALLOCATE PARMLIST FOR UNALLOCATION            @ZA02193
*                                                              @ZA02193
***************************************************************@ZA02193
*                                                              @ZA02193
OPNJDYNA DSECT                          ALLOCATION PARMS       @ZA02193
DAPTR    DS    A                        POINTER TO PARMS       @ZA02193
PARMS    DS    0A                       PARM LIST              @ZA02193
LENGTH   DC    AL1(S99RBEND-S99RB)      LENGTH OF LIST         @ZA02193
VERB     DC    AL1(S99VRBUN)            ALLOCATE DSNAME        @ZA02193
FLAGS1   DS    0AL2                     FLAG BYTES 1           @ZA02193
FLAGS11  DC    AL1(0)                   NO PARMS               @ZA02193
FLAGS12  DC    AL1(0)                   RESERVED               @ZA02193
ERRCODE  DS    AL2                      ERROR RETURN CODE      @ZA02193
INFOCODE DS    AL2                      INFORMATION CODE       @ZA02193
TXTPP    DS    A                        TEXT POINTER           @ZA02193
         DS    F                        RESERVED FIELD         @ZA02193
FLAGS2   DS    0A                       FLAG BYTES 2           @ZA02193
DYNEQU1  EQU   S99WTVOL                 WAIT FOR VOLUMES       @ZA02193
DYNEQU2  EQU   S99WTDSN                 WAIT FOR DATA SETS     @ZA02193
DYNEQU3  EQU   S99WTUNT                 WAIT FOR UNITS         @ZA02193
DYNEQU4  EQU   S99OFFLN                 CONSIDER OFFLINE UNITS @ZA02193
DYNEQU5  EQU   S99TIONQ                 TIOT ENQD              @ZA02193
DYNEQU6  EQU   S99MOUNT                 MOUNTING PERMITED      @ZA02193
DYNEQU   EQU   DYNEQU1+DYNEQU2+DYNEQU3+DYNEQU4+DYNEQU5+DYNEQU6 @ZA02193
FLAGS21  DC    AL1(DYNEQU)              ALLOCATION REQUEST     @ZA02193
FLAGS22  DS    AL1                      RESERVED               @ZA02193
FLAGS23  DS    AL1                      RESERVED               @ZA02193
FLAGS24  DS    AL1                      RESERVED               @ZA02193
OPNJDEND DS    0F                       END OF PARM LIST       @ZA02193
OPNJDLEN EQU   OPNJDEND-OPNJDYNA        LENGTH OF ALLOC PARMS  @ZA02193
*
TEXTUNIT DSECT                          TEXT UNITS             @ZA02193
TEXTU1   DC    A(UNIT1)                 PTR TEXT UNIT 1        @ZA02193
TEXTU2   DC    AL1(LASTNTRY),AL3(UNIT2) PTR TEXT UNIT 2        @ZA02193
UNIT1    DS    0CL4                     UNALLOCATE UNIT        @ZA02193
U1KEY    DC    AL2(DUNUNALC)            UNALLOCATE FUNCTION    @ZA02193
U1NUM    DC    AL2(K0)                  NUMBER OF PARMS        @ZA02193
UNIT2    DS    0CL14                    DDNAME UNALLOC UNIT    @ZA02193
U2KEY    DC    AL2(DALRTDDN)            DDNAME UNALOC FUNCTION @ZA02193
U2NUM    DC    AL2(K1)                  NUMBER OF PARMS        @ZA02193
U2LEN    DC    AL2(L'TIOEDDNM)          LENGTH OF DDNAME       @ZA02193
U2PRM    DS    CL8                      PARM                   @ZA02193
TEXTEND  DS    0F                       END OF TEXT UNITS      @ZA02193
TEXTLEN  EQU   TEXTEND-TEXTUNIT         LENGTH OF TEXT         @ZA02193
         EJECT
         IECDSECS CVT,TCB,TIOT,DCB,UCB,MAIN,WTG,RB,TSENQ,        Y02134*
               ACB,PSA,PREFX,DSAB,IEZDEB,EXPAND=YES              Y02134
         IECEQU IEZDEB=YES                                       Y02134
         IDDVDSCB                                                Y02132
         END
