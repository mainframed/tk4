         TITLE 'IFG0202E - DIRECT ACCESS FINAL PROCESSING'
IFG0202E CSECT
***********************************************************************
*                                                                     *
*      VS2 RELEASE 03.7 DELETIONS/CHANGES                             *
*0000                                                          @ZA12212
*                                                                     *
*                                                                     *
*          RELEASE 21.7 DELETIONS/CHANGES                             *
*0000038000,172000,342000,348000,440000,594000,599600,602000,   SA53753
*0000718500-720320,742000,750000-752000,814000                  SA53753
*0000600920-601220,812530-812550                                SA53147
*          RELEASE 21 DELETIONS/CHANGES                               *
*0000                                                            A37487
*0000056000-058000,172000,220000-236000,330000-334000,350000-    A38013
*0000352000,626000,642000-658000,722000-724000,814000            A38013
*0000812000                                                     SA51711
*0000578000                                                      M1801
*0000770000                                                     SA50728
*0000777000                                                      M4362
*                                                                     *
* MODULE NAME = IFG0202E                                              *
*                                                                     *
* DESCRIPTIVE NAME = DIRECT ACCESS FINAL PROCESSING                   *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS CHANGE LEVEL 000                                             *
*                                                                     *
* FUNCTION -                                                          *
*    THIS MODULE CONTAINS THE FUNCTION(S) OR PART(S) OF FUNCTION(S)-- *
*    CLOSE DA WRITE FILE MARK FUNCTION.                               *
*    CLOSE DA EXIT FUNCTION.                                          *
*    CLOSE DA PARTIAL RELEASE INTERFACE FUNCTION.                     *
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)' FOR DETAILS.         *
*                                                                     *
* ENTRY POINTS -                                                      *
*         IFG0202E - ENTRY POINT VIA AN XCTL FROM THE FOLLOWING--     *
*             INITIAL ENTRY--                                         *
*                IFG0200Y - PROCESS CLOSE DA WRITE FILE MARK          *
*                IFG0201R   FUNCTION.                                 *
*                IFG0202D                                             *
*                IFG0RR0B                                             *
*             DADSM PARTIAL RELEASE MODULE - PROCESS CLOSE DA WRITE   *
*                        DSCB FUNCTION.                               *
*             SECOND ENTRY--                                          *
*                IFG0200P - CONTINUE PROCESSING CLOSE DA WRITE FILE   *
*                           MARK FUNCTION.                            *
*             THIRD ENTRY--                                           *
*                IFG0200P - PROCESS CLOSE DA EXIT FUNCTION.           *
*                IFG0200Y                                             *
*                IFG0202C                                             *
*                                                                     *
* INPUT -                                                             *
*    ENTERED IN DATA MANAGEMENT KEY                              Y02082
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
* OUTPUT -                                                            *
*    EXIT IN DATA MANAGEMENT KEY                                 Y02082
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*         IFG019RA - OPEN/CLOSE/EOV RESIDENT ROUTINE FOR XCTL AND     *
*                    WAIT.                                            *
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
* EXITS, NORMAL -                                                     *
*    EXIT VIA THE RESIDENT ROUTINE XCTL TO THE FOLLOWING--            *
*         IFG0202H - PROCESS CLOSE/EOV SMF DATA SET FUNCTION.         *
*         IFG0202J - PROCESS CLOSE FINAL STRING.                      *
*         IFG0RR0B - FORCE CLOSE PROCESSING.                          *
*    OR AN XCTL MACRO INSTRUCTION TO DADSM PARTIAL RELEASE MODULE     *
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
* EXITS, ERROR -                                                      *
*    EXIT IS TO THE PROBLEM DETERMINATION MODULE IFG0200P, IF AN      *
*    ABEND SITUATION OCCURS IN THIS MODULE.  REFER TO THE FOLLOWING   *
*    'FUNCTION PROLOG(S)'.                                            *
*                                                                     *
* TABLES/WORK AREAS -                                                 *
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
* ATTRIBUTES -                                                        *
*    REENTRANT, REFRESHABLE, READ-ONLY, ENABLED, PRIVILEGED           *
*                                                                     *
* CHARACTER CODE DEPENDENCY -                                         *
*    CLASS ONE CHARACTER CODE DEPENDENCY - THE EBCDIC CHARACTER CODE  *
*    WAS USED FOR ASSEMBLY.  THE MODULE MUST BE REASSEMBLED IF A      *
*    DIFFERENT CHARACTER SET IS USED FOR EXECUTION.                   *
*                                                                     *
* NOTES -                                                             *
*    THIS MODULE HAS AN ALIAS NAME OF IFG0202E.                       *
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
***********************************************************************
         EJECT
*
         USING IHADCB,RDCB
         USING FORCORE,RCORE
         USING TCB,RET
         USING UCBOB,RUCB
         USING CVT,RD
         USING TIOENTRY,RTIOT
         USING DEB,RDEB
         USING WTG,RWTG                                          A38013
         USING WTGENTRY,RWTGC                                    A38013
         BALR  RBASE,0                  ESTABLISH BASE REGISTER
         USING *,RBASE
         L     R1,WTGPREFX              GET BASE PREFIX ADDR     YM6520
         CLC   IECCORID-IECPREFX(K4,R1),RECCORID  RECOVERY ENTRY YM6520
         BE    CDA06560                 BRANCH IF RECOVERY ENTRY YM6520
         TM    WTGPATHS,WTGPRLSE        ENTERED FROM PART RLSE  SA53753
         BO    CDA07940                 BR IF YES               SA53753
         B     CDA06550(RET)            USE BRANCH TABLE
CDA06550 EQU   *
         B     CDA06560                 INITIAL ENTRY
         B     CDA07000                 ENTRY FROM P. D. RTN
         B     CDA07840                 ENTRY TO DA EXIT        SA53753
         EJECT
*                                                                     *
*                          FUNCTION PROLOG                            *
*                                                                     *
***********************************************************************
*                                                                     *
* FUNCTION NAME -                                                     *
*    CLOSE DA WRITE FILE MARK FUNCTION.                               *
*                                                                     *
* (STATUS) -                                                          *
*    NOT APPLICABLE                                                   *
*                                                                     *
* FUNCTION -                                                          *
*    WRITE A FILE MARK FOR A PHYSICAL SEQUENTIAL DATA SET OPENED FOR  *
*    OUTPUT PROCESSING.                                               *
*                                                                     *
* ENTRY POINTS -                                                      *
*    ENTERED FROM THE FOLLOWING--                                     *
*    CLOSE DA WRITE DSCB FUNCTION.                                    *
*    CLOSE DA OUTPUT USER LABELS FUNCTION.                            *
*                                                                     *
* INPUT -                                                             *
*    A POINTER TO EACH OF THE FOLLOWING--                             *
*       CURRENT PARAMETER LIST ENTRY- RPARC                           *
*       DD ENTRY IN THE TIOT- RTIOT                                   *
*       WTG TABLE- RWTG                                               *
*       CURRENT WTG TABLE ENTRY- RWTGC                                *
*       DCB- RDCB                                                     *
*       WORK AREA- RCORE                                              *
*       RESIDENT ROUTINE- RES                                         *
*       UCB- RUCB                                                     *
*       DEB- RDEB                                                     *
*                                                                     *
* OUTPUT -                                                            *
*    FILE MARK IS WRITTEN.                                            *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* EXITS, NORMAL -                                                     *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*    CLOSE DA EXIT FUNCTION.                                          *
*                                                                     *
* EXITS, ERROR -                                                      *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*    EXIT WITH THE FOLLOWING INTERNAL CODES--                         *
*       90 - 614 ABEND - ERROR IN WRITING FILE MARK.                  *
*      234 - 614 ABEND - M IN DCBFDAD REFRENCES AN EXTENT        Y02082
*                        IN THE DEB WHICH IS NOT THERE           Y02082
*                                                                     *
* TABLES/WORK AREAS -                                                 *
*    THE OPEN, CLOSE, OR EOV WORK AREA AND THE WHERE-TO-GO (WTG)      *
*    TABLE ARE DESCRIBED BY THE DSECTS AT THE END OF THE LISTING.     *
*                                                                     *
* ATTRIBUTES -                                                        *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* CHARACTER CODE DEPENDENCY -                                         *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* NOTES -                                                             *
*    NOT APPLICABLE                                                   *
*                                                                     *
***********************************************************************
         EJECT
CDA06560 EQU   *
         LR    RET,RUCB                   MAIN UCB ADDRESS       Y02080
         USING UCBOB,RUCB
*
* NOTE- CLOSE WILL NOT PERFORM ANY DIRECT ACCESS DISPOSITION.
*       SCHEDULER WILL ASSUME THIS FUNCTION.
*
         TM    DCBMACRF,DCBMEXCP        IS IT EXCP
         BZ    CDA06600                 BRANCH IF NOT EXCP
         TM    DCBMCRF1,DCBMDEV         TEST FOR PRESENCE OF DA DEV DEP
         BZ    CDA08000                 BRANCH IF NOT PRESENT   XA02024
         TM    DCBMACRF,DCBMRCI         COMMON INTERFACE        XA02024
         BZ    CDA08000                 NO, GO TO DA END        XA02024
CDA06600 EQU   *
         TM    DCBDSORG,DCBORGPO        IS IT PO                XA02024
         BO    CDA07840                 YES, GO CHECK PRLSE     XA02024
         TM    DCBDSORG,DCBORGPS        TEST FOR PHYSICAL SEQUENTIAL
         BZ    CDA08000                 BR IF NOT PHYSICAL SEQ  XA02024
         NC    DCBFDAD+K3(K4),DCBFDAD+K3 TEST CCHH FOR ZERO     SA51711
         BZ    CDA08000                 BRANCH IF TRUE          SA51711
         SR    RC,RC                    CLEAR REGISTER
         IC    RC,DCBFDAD               GET M (CURRENT EXTENT NUMBER)
         CLM   RC,B'0001',DEBNMEXT      ARE THERE M EXTENTS      Y02082
*                                       IN THE DEB               Y02082
CABD614  EQU   234                      BAD DCBFDAD INTERNAL     Y02082
*                                       ABEND CODE               Y02082
         LA    R0,CABD614               LOAD INTERNAL ABCODE     Y02082
         BNL   CDA08210                 BRANCH IF NO-ABEND       Y02082
         SLL   RC,K4                    MULTIPLY BY 16
         AR    RDEB,RC                  CAN POINT TO CURRENT EXTENT
         MVC   DXDEBBIN(K12),DEBBINUM   GET NR OF USER EXTENTS
         MVC   DXCCW4+K1(K8),DCBFDAD    MOVE MBBCCHHR TO WORKAREA
*
* THIS CODE WILL NOT ALLOW A FILE MARK TO BE WRITTEN ON THE     SA56326
* CURRENT AND THE NEXT TRACK WHEN DCBFDAD FIELD CCHH=00000000   SA56326
* OR FFFFFFFF.                                                  SA56326
*                                                               SA56326
         CLC   DXCCW4+K4(K4),FOXES      TEST FOR NO DATA        SA56326
         BE    CDA08000                 BR TO EXIT IF NO DATA   SA56326
*                                       ..WITHOUT WRITING EOF   SA56326
         NC    DXCCW4+K4(K4),DXCCW4+K4  TEST FOR ZERO           SA56326
         BZ    CDA08000                 BR IF NO DATA           SA56326
*                                       ..WITHOUT WRITING EOF   SA56326
         MVI   DXDEBMOD,X'C0'           SET MODFY IN DEB
         L     R1,DCBDVTBL              ADDRESS OF DEVICE TABLE
         LH    RF,K4(R1)                PICK UP NR OF BYTES PER TRACK
         CH    RF,DCBTRBAL              IS FULL TRCK AVAILABLE FOR FM
         BE    CDA07600                 BR IF FULL TRCK AVAILABLE
*                                       RC NOT ZEROED BEFORE INSERT
         TM    DCBMCRF1,DCBMWRIT+DCBMWID  TEST FOR BDAM          A37487
         BO    CDA06650                 YES, BR                  A37487
         TM    DCBRECFM,DCBRECFX+DCBRECST  TEST FOR FIXED STANDARD
         BNO   CDA07000                 BR , IF NOT F STANDARD
*    FOR FIXED STANDARD, WRITE FILE MARK ON EXISTING TRACK
*        BDAM DATA SET
CDA06650 EQU   *                                                 A37487
         IC    RC,K7(R1)                LAST RECORD ID OV'HEAD
         TM    K9(R1),X'08'             TWO BYTE OVERHEAD USED
         BNO   CDA06700                 BRANCH NO
         LH    RC,K6(R1)                GET TWO BYTE OVERHEAD
CDA06700 EQU   *
         LR    RF,RC                    COPY RC
         SR    RC,RC                    CLEAR REGISTER
         IC    RC,DCBKEYCN              KEY O'HEAD (0 IF KEYS)
         SR    RF,RC                    HI ORDER 3 BYTES OF RF
*                                       ARE ZEROED
         LR    RC,RDEB                  SAVE PTR TO CURRENT EXTENT
         L     RDEB,DCBDEBAD            PICK UP DEB ADDRESS
         SR    RD,RD                    CLEAR REGISTER
         IC    RD,DEBNMEXT              PICK UP NO. OF EXTENTS
         SLL   RD,K4                    MULTIPLY BY 16
         AR    RD,RDEB                  ADD DEB ADDRESS
         TM    DCBMACRF,DCBMEXCP        IS IT EXCP
         BZ    CDA06800                 BRANCH,NOT EXCP
         LA    RF,K8                    GET LENGTH NEEDED FOR FM
         B     CDA06900                 GO CK ENOUGH SPACE
CDA06800 EQU   *
         TM    DCBMCRF1,DCBMWRIT+DCBMWID  TEST FOR BDAM          A37487
         BNO   CDA06850                 NO, BR                   A37487
         SR    RDEB,RDEB                ZERO REG                 A37487
         IC    RDEB,DCBKEYLE            GET KEY LENGTH           A37487
         AH    RDEB,DCBBLKSI            ADD BLOCKSIZE FROM DCB   A37487
         AR    RF,RDEB                                           A37487
*                                       RF=BLKSI+KEYLEN+ID-KEYOVHA37487
         B     CDA06900                 BR AROUND FIX STANDARD   A37487
CDA06850 EQU   *                                                 A37487
         AH    RF,K44(RD)               ADD KEYLENGTH+BLOCKSIZE
CDA06900 CH    RF,DCBTRBAL              WILL A RCD FIT ON THIS TK
         LR    RDEB,RC                  RESTORE PTR TO CURRENT EXTENT
         BP    CDA07000                 BR IF NO TO CK NEXT TRACK
         BAL   RC,CDA08100              BR IF YES TO SET UP TO WR FM
         IC    RF,DXCCW4+K8             GET R OF LAST REC WRITTEN
         LA    RF,K1(,RF)               INCR R BY 1.
         STC   RF,DXCCW7+K4             STORE NEW R  COUNT BUFF SA53753
         LA    RET,K4                   SET UP FOR BR TABLE IF ERROR
         BAL   RC,CDA08200              GO TO WRITE FM.
*    RECORD DOES NOT FIT ON THIS TRACK. CHECK NEXT TRACK.
CDA07000 EQU   *
         SR    RF,RF                    CLEAR WORK REG
         MVI   DXCCW4+K8,K0             SET R=0
         IC    RF,DXCCW4+K7             (RF)=000H
         LA    RF,K1(,RF)               RF=H+1
         STC   RF,DXCCW4+K7             C(DXCCW4+7)=CCH(H+1)
         L     R1,DCBDVTBL              ADDRESS OF DEVICE TABLE
         CLC   DXCCW4+K7(K1),K3(R1)     IS TRACK VALID
         BNL   CDA07100                 BR IF TRK NOT VALID
         L     R1,DCBDEBAD              DEB ADDRESS
         TM    DEBOFLGS-DEB(R1),DEBOFSPL  CHK FOR SPLIT CYL
         BNO   CDA07600                 BR IF NO SPLIT CYL
         CLC   DXCCW4+K7(K1),DEBENDHH+K1  CHK FOR SPLIT CYL END TRK
         BNH   CDA07600                 BR IF NOT END TRACK
*              IF TRACK NOT VALID FOR DEVICE OR AT END OF SPLIT CYL
*              STEP TO NEXT CYLINDER
CDA07100 EQU   *
CDA07400 EQU   *                        NOT 2321, ADD 1 TO CC
         LH    RF,DXCCW4+K4             C(RF)=00CC
         LA    RF,K1(,RF)               C(RF)=00C(C+1)
         SLL   RF,K16                   C(RF)=C(C+1)00
*
CDA07500 EQU   *                        SET TRACK TO ZERO OR START
*                                       OF SPLIT CYLINDER
         ST    RF,DXCCW4+K4             C(DXCCW4+4)=NEXT CYL
         L     RF,DCBDEBAD              ADDR OF DEB
         TM    DEBOFLGS-DEB(RF),DEBOFSPL  CHK FOR SPLIT CYL
         BZ    CDA07600                 BR IF NOT SPLIT CYL
         MVC   DXCCW4+K7(K1),DEBSTRHH+K1  SPLIT CYL, SET TRK TO START
*    CHECK WITHIN THIS EXTENT
CDA07600 EQU   *                        CHECK IF STILL WITHIN EXTENT
         CLC   DXCCW4+K4(K4),DEBENDCC   IS NEW TRK IN EXTENT
         BNH   CDA07700                 BRANCH IF YES
         L     RDEB,DCBDEBAD            PICK UP DEB ADDRESS
         SR    RF,RF                    CLEAR WORK REGISTERS
         SR    RC,RC                    CLEAR REG
         IC    RC,DCBFDAD               GET M(CURRENT EXTENT NUMBER)
         IC    RF,DEBNMEXT              PICK UP NUMBER OF EXTENTS
         LA    RC,K1(,RC)               UPDATE M TO POINT TO NEXT EXT
         CR    RC,RF                    ARE THERE ANY MORE EXTENTS
         BC    10,CDA07800              DO NOT WRITE FILE MARK    M1801
         SLL   RC,K4                    MULTIPLY BY 16
         AR    RDEB,RC                  POINT TO CORRECT EXTENT
         MVC   DXDEBBIN(K12),DEBBINUM   MOVE EXTENT INFO TO WORK AREA
         MVC   DXCCW4+K2(K6),DXDEBBIN   PLACE BEGINNING BBCCHH IN SCH
CDA07700 EQU   *
         MVI   DXCCW4+K8,K0             SET SEARCH R TO 0
         BAL   RC,CDA08100              SET UP TO WRITE FILE MARK
         MVI   DXCCW7+K4,K1             SET R OF FM=01.         SA53753
         LA    RET,K8                   SET UP FOR BR TABLE IF ERROR
         BAL   RC,CDA08200              GO TO WRITE THE FILE MARK
         OI    DXATDACC,DXATEOF         EOF WRITTEN FOR PS DS    Y02144
CDA07800 EQU   *                                                 M1801
         L     R1,WTGPREFX              GET BASE PREFIX ADDR     YM6520
         CLC   IECCORID-IECPREFX(K4,R1),RECCORID  RECOVERY ENTRY YM6520
         BE    CDA08060                 BRANCH IF RECOVERY ENTRY YM6520
         MODESET EXTKEY=SCHED           ASSUME SCHED KEY         Y02082
         NI    TIOELINK,X'FF'-TIOSYOUT  INSURE INDICATOR OFF     M1801
         MODESET EXTKEY=DATAMGT         DATA MANAGEMENT KEY      Y02082
         OC    DSCLSTAR(3),DSCLSTAR     CHECK IF ANY DATA        M1801
         BZ    CDA07840                 BRANCH IF NONE          SA53753
         MODESET EXTKEY=SCHED           ASSUME SCHED KEY         Y02082
         OI    TIOELINK,TIOSYOUT        SET INDICATOR IF DATA    M1801
         MODESET EXTKEY=DATAMGT         DATA MANAGEMENT KEY      Y02082
         EJECT                                                  SA53753
***********************************************************************
*                                                                     *
*                          FUNCTION PROLOG                            *
*                                                                     *
***********************************************************************
*                                                                     *
* FUNCTION NAME -                                                     *
*    CLOSE DA PARTIAL RELEASE INTERFACE FUNCTION.                     *
*                                                                     *
* (STATUS) -                                                          *
*    NOT APPLICABLE                                                   *
*                                                                     *
* FUNCTION -                                                          *
*    XCTL TO THE PARTIAL RELEASE ROUTINES TO RELEASE UNUSED EXTERNAL  *
*    STORAGE AND WRITE BACK THE FORMAT 1 DSCB IF RELEASE IS SPECIFIED.*
*                                                                     *
* ENTRY POINTS -                                                      *
*    ENTERED FROM THE FOLLOWING--                                     *
*    CLOSE DA UPDATE DSCB FUNCTION.                                   *
*    DADSM PARTIAL RELEASE ROUTINE.                                   *
*                                                                     *
* INPUT -                                                             *
*    A POINTER TO EACH OF THE FOLLOWING--                             *
*       CURRENT PARAMETER LIST ENTRY- RPARC                           *
*       DD ENTRY IN THE TIOT- RTIOT                                   *
*       WTG TABLE- RWTG                                               *
*       CURRENT WTG TABLE ENTRY- RWTGC                                *
*       DCB- RDCB                                                     *
*       WORK AREA- RCORE                                              *
*       RESIDENT ROUTINE- RES                                         *
*       UCB- RUCB                                                     *
*       DEB- RDEB                                                     *
*                                                                     *
* OUTPUT -                                                            *
*    UNUSED STORAGE IS RELEASED AND AN UPDATED FORMAT 1 DSCB IS       *
*    WRITTEN IF PARTIAL RELEASE IS SPECIFIED.                         *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* EXITS, NORMAL -                                                     *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*    CLOSE DA PARTIAL RELEASE INTERFACE FUNCTION.                     *
*                                                                     *
* EXITS, ERROR -                                                      *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*    EXIT WITH THE FOLLOWING INTERNAL CODES--                         *
*       87 - A14 ABEND - I/O ERROR OCCUR DURING PARTIAL RELEASE.      *
* TABLES/WORK AREAS -                                                 *
*    THE OPEN, CLOSE, OR EOV WORK AREA AND THE WHERE-TO-GO (WTG)      *
*    TABLE ARE DESCRIBED BY THE DSECTS AT THE END OF THE LISTING.     *
*                                                                     *
* ATTRIBUTES -                                                        *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* CHARACTER CODE DEPENDENCY -                                         *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* NOTES -                                                             *
*    MODULE ID FOR PARTIAL RELEASE ROUTINE IS IGG020P1.               *
*                                                                     *
***********************************************************************
*
         EJECT                                                  SA53753
CDA07840 EQU   *                                                SA53753
         L     R1,WTGPREFX              GET BASE PREFIX ADDR     YM6520
         CLC   IECCORID-IECPREFX(K4,R1),RECCORID  RECOVERY ENTRY YM6520
         BE    CDA08060                 BRANCH IF RECOVERY ENTRY YM6520
         TM    UCBJBNR,UCBVRDEV         TEST FOR VIO             Y02132
         BO    CDA08000                 BR IF YES, NO PART REL   Y02132
         L     RDEB,DCBDEBAD            RELOAD DEB ADDR         SA53753
         L     RET,DXTCBADR             CURRENT TCB ADDRESS     SA53753
         TM    TCBFLG,TCBFA             IS ABEND BIT ON         SA53753
         BO    CDA08000                 BR IF YES - NO PARTIAL  SA53753
*                                       RELEASE                 SA53753
         TM    DCBOFLGS,DCBOWRIT        WAS DATA SET            SA53753
*                                       OPEN FOR OUTPUT         SA53753
         BZ    CDA08000                 BRANCH IF NO            SA53753
         TM    DEBOFLGS,DEBOFRLS        TEST FOR PARTIAL        SA53753
*                                       RELEASE                 SA53753
         BZ    CDA08000                 BRANCH IF NOT           SA53753
         TM    DCBMACRF,DCBMEXCP        IS IT EXCP             @ZA12212
         BZ    CDA07920                 BRANCH IF NOT EXCP     @ZA12212
         TM    DCBMCRF1,DCBMDEV         TEST FOR PRESENCE OF   @ZA12212
*                                       DA DEV DEP SECTION     @ZA12212
         BZ    CDA08000                 BRANCH IF NOT PRESENT  @ZA12212
CDA07920 EQU   *                                               @ZA12212
         CLC   DCBFDAD(K8),FOXES        TEST FOR NO DATA       @ZA12212
         BE    CDA08000                 BR TO EXIT IF NO DATA  @ZA12212
         NC    DCBFDAD(K8),DCBFDAD      TEST FOR ZERO          @ZA12212
         BZ    CDA08000                 BR IF NO DATA          @ZA12212
         TM    DEBOFLGS,DEBOFSPL        TEST IF SPLIT CYL       SA53753
         BO    CDA08000                 YES,NO PARTIAL RELEASE  SA53753
         TM    DSCFILTY,DS1ORGIS        IS THIS ISAM DATA SET   SA53753
         BO    CDA08000                 YES, NO PARTIAL RELEASE SA53753
         OI    WTGPATHS,WTGPRLSE        IND RLSE COMING UP      SA53753
         LA    RCORE,0(RCORE)           MAKE  REG. POSITIVE     SA53753
         IECRES LOAD,PREFIX=WTGPREFX,MODNM=CLRLSE,BRANCH=DIRECT  Y02080
*
*  IF RETURNING FROM PARTIAL RELEASE, CONTINUE PROCESSING HERE
*
CDA07940 EQU   *                                                SA53753
         MVC   WTGMODNM(K8),IFG2E       RESTORE NAME 'IFG0202E'  YM2488
         NI    WTGPATHS,CHARFF-WTGPRLSE ZERO PARTIAL RELEASE    SA53753
*                                       INDICATOR               SA53753
         LA    R0,X10                   LOAD REG WITH I/O       SA53753
*                                       ERROR CODE              SA53753
         CR    R1,R0                    CK FOR I/O ERROR        SA53753
         BNE   CDA08000                 BRANCH IF NO             SM5456
         LA    R0,CABD087               ERR - PARTIAL RELEASE   SA53753
         B     CDA08210                 BRANCH TO ISSUE ABEND   SA53753
         EJECT                                                  SA53753
*
*                          FUNCTION PROLOG                            *
*                                                                     *
***********************************************************************
*                                                                     *
* FUNCTION NAME -                                                     *
*    CLOSE DA EXIT FUNCTION.                                          *
*                                                                     *
* (STATUS) -                                                          *
*    NOT APPLICABLE                                                   *
*                                                                     *
* FUNCTION -                                                          *
*    INTERFACE WITH SMF DATA SET FUNCTION IF THE DATA SET IS NOT      *
*    SYSIN OR SYSOUT.                                                 *
*                                                                     *
* ENTRY POINTS -                                                      *
*    ENTERED FROM THE FOLLOWING--                                     *
*    CLOSE DA ACCESS METHOD EXECUTOR INTERFACE FUNCTION.              *
*    CLOSE DA INPUT USER LABEL FUNCTION.                              *
*    CLOSE DA WRITE FILE MARK FUNCTION.                               *
*                                                                     *
* INPUT -                                                             *
*    A POINTER TO EACH OF THE FOLLOWING--                             *
*       CURRENT PARAMETER LIST ENTRY- RPARC                           *
*       DD ENTRY IN THE TIOT- RTIOT                                   *
*       WTG TABLE- RWTG                                               *
*       CURRENT WTG TABLE ENTRY- RWTGC                                *
*       DCB- RDCB                                                     *
*       WORK AREA- RCORE                                              *
*       RESIDENT ROUTINE- RES                                         *
*       UCB- RUCB                                                     *
*       DEB- RDEB                                                     *
*                                                                     *
* OUTPUT -                                                            *
*    DA STRING COMPLETE.                                              *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* EXITS, NORMAL -                                                     *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*    CLOSE FINAL STRING.                                              *
*    CLOSE/EOV SMF DATA SET FUNCTION.                                 *
*                                                                     *
* EXITS, ERROR -                                                      *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* TABLES/WORK AREAS -                                                 *
*    THE OPEN, CLOSE, OR EOV WORK AREA AND THE WHERE-TO-GO (WTG)      *
*    TABLE ARE DESCRIBED BY THE DSECTS AT THE END OF THE LISTING.     *
*                                                                     *
* ATTRIBUTES -                                                        *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* CHARACTER CODE DEPENDENCY -                                         *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* NOTES -                                                             *
*    NOT APPLICABLE                                                   *
*                                                                     *
***********************************************************************
         EJECT
CDA08000 EQU   *
         L     R1,WTGPREFX              GET BASE PREFIX ADDR     YM6520
         CLC   IECCORID-IECPREFX(K4,R1),RECCORID  RECOVERY ENTRY YM6520
         BE    CDA08060                 BRANCH IF RECOVERY ENTRY YM6520
         L     RDEB,DCBDEBAD            RELOAD DEB ADDR
         TM    WTGPATHS,WTGSMF          SMF REQUESTED            A38013
         BZ    CDA08020                 BRANCH IF NOT            A38013
         TM    JFCBTSDM,JFCSDS          IS SYSIN/SYSOUT DS       A38013
         BO    CDA08020                 BRANCH IF YES            A38013
         LA    RF,SMFMOD                SET UP FOR XCTL TO SMF   A38013
         MVC   DXRETMOD,FINALMOD        MOVE IN RETURN IDTTR     A38013
         B     CDA08040                 BRANCH TO SMF STRING     A38013
CDA08020 EQU   *                                                 A38013
         LA    RF,FINALMOD              SET UP FOR XCTL          A38013
CDA08040 EQU   *                                                 A38013
         SR    RET,RET                  SET BRANCH OFFSET        A38013
         IECRES LOAD,MODID=(RF),BRCODE=(RET),BRANCH=QUEUED       Y02080
*                                       XCTL TO SMF OR FINAL     Y02080
CDA08060 EQU   *                                                 YM6520
         MVC   WTGMODNM,RECMOD          MOVE RECOVERY MOD NAME   YM6520
         L     RF,DXATCOM3              GET RRPLIST PTR          YM6520
         USING RRPLIST,RF
         L     RF,RRFWORK               RECOVERY SUBRTN SAVEAREA YM6520
         DROP  RF
         L     RET,IECREGSV-IECEXTPR+K4*RET(,RF) GET RETURN ADDR YM6520
         ST    RET,WTGMODEP             SET EPA TO RETURN ADDR   YM6520
         LM    R0,RD,0(RF)              GET RECOVERY SUBRTN REGS YM6520
         IECRES LOAD,EXTPR=(RF),BRANCH=DIRECT RETURN TO IFG0RR0B YM6520
         EJECT
CDA08100 EQU   *
         LA    RF,DXCCW4+K4             ID OF FILE MARK
         ST    RF,DXCCW1                STORE SEARCH ID
         LA    RF,DXCCW1                ADDRESS OF FIRST CCW
         MVI   DXCCW1,CCWSCHID          SEARCH ID EQU OP CODE
         ST    RF,DXCCW2                STORE TIC ADDR
         MVC   DXCCW1+K4(K5),CX10       SET CC FLAG AND NO. OF BYTES
         LA    RF,DXCCW7                ADDRESS OF COUNT BUFFER SA53753
         ST    RF,DXCCW3                STORE IN CCW3
         MVI   DXCCW3,X'1D'             WRITE CT,KEY,DATA
         MVC   DXCCW3+K4(K4),CX12       SET SILI FLAG AND BYTE COUNT
         MVC   DXCCW7(K4),DXCCW4+K4     MOVE CCHH INTO COUNT    SA53753
         XC    DXCCW7+K5(K3),DXCCW7+K5  CLEAR KEY AND DATA      SA53753
*                                       LENGTH                  SA53753
         BR    RC                       RETURN TO CALLER
         EJECT
CDA08200 EQU   *
         ST    RET,DXWORK               SAVE RETURN OFFSET       YM2488
         MVC   DXDAADDR,DXCCW4+K1       MOVE IN SEEK ADDRESS
         MVI   DXDAADDR,K0              ASSURE A ZERO M
*
*        THIS CODE WILL NOT ALLOW A FILE MARK TO BE WRITTEN AT
*        CCHH = 00000000 BY TESTING FOR THAT SEEK ADDRESS,      SA51711
*        AND BY TESTING SEEK ADDRESS FOR CCHH = FFFFFFFF TO     SA50728
*        INDICATE THAT NO DATA HAS BEEN WRITTEN TO FILE.        SA50728
*
         NC    DXDAADDR+K3(K4),DXDAADDR+K3 TEST FOR TRACK ZERO  SA51711
         BCR   8,RC                     NO EOF IF ZERO          SA51711
         CLC   DXDAADDR+K3(K4),FOXES    TEST FOR NO DATA        SA50728
         BCR   8,RC                     NO DATA,                 M4362
*                                       EXIT WITHOUT WRITING EOFSA50728
         EXCP  DXIOB                    GO WRITE FILE MARK
         L     R1,WTGPREFX              GET BASE PREFIX ADDR     YM7047
         CLC   IECCORID-IECPREFX(K4,R1),RECCORID  RECOVERY ENTRY YM7047
         BNE   CDA08204                 BR IF NOT RECOVERY ENTRY YM7047
         WAIT  ,ECB=DXECB               WAIT FOR COMPLETION      YM7047
         B     CDA08208                 GO CHK FOR ERROR         YM7047
CDA08204 EQU   *                                                 YM7047
         IECRES WAIT                    WAIT FOR COMPLETION
CDA08208 EQU   *                                                 YM7047
         TM    DXECB,ECBNOERR           CK FOR PERM I/O ERROR
         BCR   1,RC                     BRANCH IF NO ERROR
         L     RET,DXWORK               LOAD RETURN OFFSET       YM2488
         LA    R0,CABD090               ERR- WRITE FILE MARK
CDA08210 EQU   *                                                SA53753
         L     R1,WTGPREFX              GET BASE PREFIX ADDR     YM6520
         CLC   IECCORID-IECPREFX(K4,R1),RECCORID  RECOVERY ENTRY YM6520
         BE    CDA08060                 BRANCH IF RECOVERY ENTRY YM6520
         DMABCOND (0),PDMOD             ABEND MACRO
         EJECT
         SPACE 1
***********************************************************************
*                                                                     *
*                       CONSTANTS                                     *
*                                                                     *
***********************************************************************
         SPACE 1
CX10     DC    X'4000000508'            CC, 5 BYTES, TIC
CX12     DC    X'20000008'              SILI,8 CHARACTERS
IFG2E    DC    C'IFG0202E'              TO RESTORE NAME          YM2488
RECCORID DC    C'RR0A'                  RECOVERY CORE ID         YM6520
FOXES    DC    F'-1'                    OVERWRITE PROTECTION    SA50728
BADKEY   DC    H'8'                     NO MATCH FOR KEY ERROR  SA53753
*                                       CODE                    SA53753
         XCTLTABL ID=(FINALMOD,2J,PDMOD,0P,SMFMOD,2H,CLRLSE,IGG020P1,  *
               RECMOD,IFG0RR0B),SVC=020,BRT=YES,LENGTH=          YM6520
         IECDSECS CVT,TCB,TIOT,DCB,DEB,UCB,MAIN,WTG,PREFX,             *
               RRPL,EXPAND=YES                                   YM6520
         IECEQU
         END
