         TITLE 'IFG019RA--OPEN/CLOSE/EOV/DADSM SERVICE ROUTINE'  YM3066
IFG019RA CSECT
***********************************************************************
*                                                                     *
*     VS2 RELEASE 037 DELETIONS/CHANGES/ADDITIONS                     *
* D188800-189600                                               @ZA20900
*C210600,241000,248620,248791                                  @ZA30676
*                                                                     *
*                                                                     *
*          VS2 RELEASE 02 DELETIONS/CHANGES                           *
*0000                                                           Y30ASJC
*0000513843,515300                                             @ZA00113
*0000489800,499100                                             @ZA00114
*0000                                                          @ZA01283
*0000199600,200600-201800,202400                               @ZA01491
*0000200910,200922,597430-597490                               @ZA02166
*0000                                                          @ZA02177
*0000                                                          @ZA15963
*          VS2 RELEASE 03 DELETIONS/CHANGES                           *
*0000                                                          @ZA03157
*0000                                                          @ZA01348
*          VS2 RELEASE 03.7 DELETIONS/CHANGES                         *
*0000516600,517000-517200                                      @ZA13574
*0000                                                          @ZA18282
*0000                                                          @ZA18282
***********************************************************************
*
* MODULE NAME = IFG019RA (OS/VS2)
*
* DESCRIPTIVE NAME = OPEN/CLOSE/EOV/DADSM SERVICE ROUTINE
*
* COPYRIGHT = NONE
*
* STATUS = CHANGE LEVEL 000
*
* FUNCTION = IFG019RA PERFORMS THE FOLLOWING SERVICES FOR THE OPEN,
*            CLOSE, END OF VOLUME, AND DADSM MODULES:
*            - WAIT
*            - SELECT-LOAD
*            - DCB SYNCHRONIZATION
*            - QMNGRIO
*            - LOAD AND BRANCH
*            - LOAD AND RETURN
*            - GET A WORK AREA
*            - GET WTG/EOV WORK AREA
*            - GET FIRST WORK AREA
*            - INITIALIZE A PREFIX=FIRST WORK AREA
*            - INITIALIZATION AND/OR COPY A DCB
*            - FREE A WORK AREA
*            - FREE FIRST OR WTG/EOV WORK AREA
*            - USER EXIT
*
*
*      WAIT, SELECT-LOAD, LOAD AND BRANCH, LOAD AND RETURN, AND DCB
*      SYNCHRONIZATION FACILITIES:
*
*      THE WAIT, SELECT-LOAD, AND DCB SYNCHRONIZATION FACILITIES OF
*      THE SERVICE ROUTINE PERFORM THE FUNCTION OF AN INPUT/OUTPUT
*      SUPERVISOR FOR THE OPEN, CLOSE, AND EOV COMPONENTS, ESSENTIALLY
*      ALLOWING THESE COMPONENTS TO PROCESS PARALLEL DCB'S IN A SERIAL
*      MANNER WITHIN PARTICULAR MODULES.  THESE FACILITIES CONTROL
*      PROCESSING BY ISSUING ALL WAIT'S, LOADS, AND SWITCHING DCB'S
*      TO BE PROCESSED BY MODIFYING REGISTERS.
*
*      A MODULE DESIRING TO ISSUE A WAIT FOR A DCB BRANCHES TO THE
*      SERVICE ROUTINE FOR THIS PURPOSE.  THE SERVICE ROUTINE THEN
*      RETURNS TO THE MODULE WITH ANOTHER DCB IMMEDIATELY, RATHER
*      THAN ISSUING A WAIT.  WHEN ALL DCB'S HAVE A WAIT PENDING,
*      THE SERVICE ROUTINE ISSUES A MULTIPLE WAIT.  ON RETURN FROM
*      THE WAIT, THE FIRST DCB IN THE PARAMETER LIST WHICH IS POSTED
*      IS SELECTED FOR PROCESSING. THIS ALLOWS OVERLAP OF I/O BETWEEN
*      DCB'S IN THE MODULE.
*
*      RATHER THAN A DCB ISSUING A LOAD WITHIN A MODULE, THE DCB
*      INDICATES WHICH MODULE IT WOULD LIKE TO LOAD BY PLACING THAT
*      MODULE'S TWO BYTE MODULE ID AND ENTRY POINT ADDRESS (EPA) IN
*      ITS WHERE-TO-GO (WTG) TABLE ENTRY AND BRANCHING TO IFG019RA,
*      WHICH THEN CHECKS WHETHER ANY DCB'S REMAIN IN NEED OF THE
*      CURRENT MODULE (IT CHECKS WHETHER ANY DCB'S ARE 'ACTIVE').
*      IT DOES THIS BY COMPARING THE MODULE ID'S IN THE WTG TABLE
*      BASIC SECTION AND THE WTG TABLE DCB ENTRY.  IF THE ID'S MATCH,
*      THE DCB IS ACTIVE.
*
*      AN ACTIVE DCB IS RETURNED TO THE MODULE.  IF NONE IS ACTIVE,
*      THE ID THAT IS LOWEST IN COLLATING SEQUENCE OF THE ID'S IN
*      THE WTG ENTRIES IS FOUND, AND A LOAD AND BRANCH IS EFFECTED
*      TO THAT MODULE.
*
*      IN SOME INSTANCES, SUCH AS INTERFACING WITH MODULES NOT USING
*      THE SERVICE ROUTINE, IT IS DESIRABLE TO EXIT FROM THE SERVICE
*      ROUTINE'S CONTROL OF DCB LOOPING, ETC.  THIS IS ACCOMPLISHED BY
*      THE DCB SYNCHRONIZATION FACILITY OF THE SERVICE ROUTINE, WHICH
*      OPERATES SIMILARLY TO THE WAIT FACILITY.  RATHER THAN THE DCB
*      IN CONTROL IN A MODULE BRANCHING TO THE SERVICE ROUTINE FOR A
*      WAIT, A BRANCH IS TAKEN FOR A PSEUDO-WAIT.  IN THIS CASE, WHEN
*      ALL DCB'S FOR THIS MODULE HAVE PSEUDO-WAITS, A WAIT IS NOT
*      ISSUED, BUT CONTROL IS RETURNED TO THE MODULE, WITH REGISTERS
*      POINTING TO THE FIRST ACTIVE DCB IN THE OPEN/CLOSE PARAMETER
*      LIST.  THIS ENSURES THAT ALL DCB'S ACTIVE IN THE MODULE HAVE
*      COMPLETED EXECUTION UP TO THAT POINT AND EFFECTIVELY EXITS FROM
*      SERVICE ROUTINE CONTROL.
*
*      A DUMMY DCB IS INDICATED BY A MODULE ID OF X'00'.  THIS WILL
*      RESULT IN THE DCB NEVER BEING ACTIVE, AS NO MODULE HAS AN ID
*      EQUAL TO X'00'.
*
*      IF THE SERVICE ROUTINE IS ENTERED FOR A LOAD AND A GTF TRACE IS
*      REQUESTED FOR THE DCB ENTERING THE SERVICE ROUTINE, THE TRACE
*      ROUTINE (IFG019TR) IS CALLED BY THE SERVICE ROUTINE VIA A BALR.
*      THE TRACE ROUTINE RETURNS CONTROL TO THE SERVICE ROUTINE AT
*      THE LINK ADDRESS AFTER TRACING REGISTER AND STORAGE CONTENTS.
*
*      THE THREE LOAD FACILITIES ARE BRANCH=QUEUED (SELECT-LOAD),
*      BRANCH=DIRECT (LOAD & BRANCH), AND BRANCH=NO (LOAD & RETURN).
*
*      IECRES LOAD,BRANCH=QUEUED IS USED BY OPEN/CLOSE/EOV WHEN
*      CONTROL IS TO BE PASSED TO ANOTHER OPEN/CLOSE/EOV MODULE.
*      IT FIRST RESETS THE WAIT BIT.  THEN, IF A GTF TRACE WAS
*      REQUESTED, IT GIVES CONTROL TO THE TRACE ROUTINE (IFG019TR).
*      IT THEN LOOKS FOR A WTG TABLE ENTRY WITH THE CALLING MODULE'S
*      ID.  IF FOUND, IT GIVES IT CONTROL.  OTHERWISE, IT FINDS
*      THE MODULE ID WITH THE LOWEST COLLATING SEQUENCE AMONG THE
*      WTG TABLE ENTRIES AND GIVES IT CONTROL.
*
*      IECRES LOAD, BRANCH=QUEUED, BRANCH=DIRECT, OR BRANCH=NO
*      FIRST LOCATES THE ENTRY POINT ADDRESS OF THE MODULE SPECIFIED
*      IN WTGMODNM.  IF WTGMODEP IS ZERO, IT BRANCHES TO THE ACTIVE
*      LPA SEARCH SERVICE ROUTINE (IEAQCDSR) AND POSSIBLY TO THE LPA
*      SEARCH SERVICE ROUTINE (IEAVVMSR) TO FIND THE ENTRY POINT
*      ADDRESS.  IF NEITHER OF THESE ROUTINES CAN LOCATE THE MODULE,
*      IT ISSUES THE LOAD MACRO ON SYS1.SVCLIB.  FOR BRANCH=DIRECT,
*      CONTROL IS PASSED TO THE SPECIFIED MODULE.  FOR BRANCH=NO,
*      CONTROL IS RETURNED TO THE CALLING MODULE WITH THE EPA IN
*      WTGMODEP.
*
*      BEFORE PERFORMING THE LOAD, A TEST IS MADE TO DETERMINE IF
*      THE WTGMODEP FIELD IS NON-ZERO.  IF SO, IT IS ASSUMED THAT
*      THE EPA IS ALREADY KNOWN AND CONTROL WILL RETURN
*      IMMEDIATELY TO THE CALLING MODULE.  IF THE CALL TO LOAD
*      HAS COME FROM THE SELECT-LOAD OR LOAD AND BRANCH ENTRY OF
*      THIS MODULE, THIS WILL RESULT IN A BRANCH TO THE ADDRESS
*      IN 'WTGMODEP'.
*
*
*      QMNGRIO FACILITY -
*
*      THE QMNGRIO ROUTINE ISSUES THE QMNGRIO MACRO TO 'READ' OR
*      'WRITE' THE JFCB IN SWA.
*
*
*      GET FACILITY -
*
*      THE GET FACILITY HAS FOUR FUNCTIONS:
*      1. IT CAN GET A SINGLE WORK AREA WITH OR WITHOUT PREFIX;
*      2. IT CAN GET AN EOV WORK AREA OR A WTG TABLE (OPEN/CLOSE);
*      3. IT CAN GET A FIRST WORK AREA FOR DADSM OR TASK CLOSE;
*      4. IT CAN INITIALIZE THIS WORK AREA FOR DADSM OR TASK CLOSE.
*
*      IECRES GET,PREFIX=YES OR =NO OR EXTPR=ADDR IS ENTERED BY
*      OPEN/CLOSE/EOV/DADSM MODULES TO GET STORAGE OTHER THAN FOR
*      A WTG TABLE OR FIRST WORK AREA. IT ISSUES THE GETMAIN MACRO
*      AND ZEROS THE STORAGE.  IT BUILDS A PREFIX AND CHAINS THE
*      WORK AREA IF REQUESTED.
*
*      IECRES GET,PREFIX=WTG OR =EOV GETS THE FIRST WORK AREA FOR
*      THE O/C/E MODULES.  IT GETS A SINGLE ENTRY WTG TABLE AND
*      WORK AREA FOR EOV OR A VARIABLE-LENGTH WTG TABLE FOR OPEN
*      AND CLOSE.  THE STORAGE IT REQUESTS INCLUDES A PREFIX,
*      EXTENDED PREFIX, WTG TABLE, RECOVERY ROUTINE PARAMETER LIST,
*      DCB PARAMETER LIST, WORK AREA USED BY IFG019RA, AND A TRACE
*      BUFFER, IF REQUESTED.  AFTER ISSUING THE GETMAIN MACRO, IT
*      ZEROS THE STORAGE AND BUILDS THE PREFIX.  IT THEN ENQUEUES
*      ON THE TIOT AND ISSUES THE ESTAE MACRO TO ESTABLISH THE
*      ADDRESS OF THE O/C/E/D RECOVERY ROUTINE OR THE ADDRESS OF
*      THE SECOND LEVEL RECOVERY ROUTINE IF THE WORK AREA IS BEING
*      OBTAINED FOR THE FIRST LEVEL O/C/E/D RECOVERY ROUTINE.
*
*      IECRES GET,PREFIX=FIRST IS ENTERED BY THE DADSM FUNCTIONS OR
*      BY TASK CLOSE TO GET STORAGE FOR THE MAIN WORK AREA.  THE
*      ROUTINE ADDS THE LENGTH OF A PREFIX, EXTENDED PREFIX, AND
*      RECOVERY ROUTINE PARAMETER LIST TO THE REQUESTED AMOUNT OF
*      SPACE.  AFTER ISSUING THE GETMAIN MACRO, IT ZEROS THE
*      STORAGE AND BUILDS THE PREFIX.
*
*      THE SECOND ENTRY OF IECRES GET,PREFIX=FIRST INITIALIZES
*      THE WTO LENGTH FIELD IN THE PSEUDO WTG TABLE AND ISSUES
*      THE ESTAE MACRO TO ESTABLISH THE ADDRESS OF THE O/C/E/D
*      OR TASK CLOSE RECOVERY ROUTINE.
*
*
*      INITIALIZATION/DCB COPY FACILITY -
*
*      THE INIT/DCB COPY FACILITY PERFORMS TWO BASIC FUNCTIONS:
*      1 CERTAIN POINTERS IN THE OPEN/CLOSE/EOV WORK AREA ARE
*        INITIALIZED;
*      2 THE DCB COPY FUNCTION IS PERFORMED.
*
*      THE FIELDS WHICH ARE INITIALIZED BY THE INIT FUNCTION ARE:
*            DXUKEY   KEY OF CALLER OBTAINED FROM RESUME PSW IN
*                     SVRB
*            DXASCBAD ADDRESS OF ASCB
*            DXTCBADR ADDRESS OF TCB
*            DXJSCBAD ADDRESS OF ACTIVE JSCB POINTED TO BY JSCBACT
*                     IN THE JSCB POINTED TO BY THE TCB
*            DXDSABQD ADDRESS OF DSAB QUEUE DESCRIPTOR BLOCK FROM
*                     THE ACTIVE JSCB
*            DXDSABAD ADDRESS OF DSAB FOR THE DCB/ACB BEING
*                     PROCESSED - OBTAINED FROM THE DEB EXTENSION
*                     OR BY SEARCHING THE DSAB CHAIN USING THE
*                     DCBDDNAM
*            DXDSAB   ADDRESS OF CURRENT DSAB. SAME AS DXDSABAD
*            DXDEBXAD ADDRESS OF DEB EXTENSION IF THE DCB IS OPEN
*            DXTIOTAD ADDRESS OF TIOT ENTRY FOR DCB BEING PROCESSED
*                     OBTAINED FROM THE DSAB OBTAINED AS
*                     STATED ABOVE
*            DXUCBADR ADDRESS OF UCB - FIRST UCB ADDRESS IN THE
*                     TIOT ENTRY OBTAINED AS STATED ABOVE IF THE
*                     DCB IS CLOSED; FIRST UCB ADDRESS IN THE DEB
*                     IF THE DCB IS OPEN AND THE DSORG IS NOT IS;
*                     SECOND UCB ADDRESS IN THE DEB IF THE DCB IS
*                     OPEN AND THE DSORG IS ISAM.
*
*
*      FREE WORK AREA FACILITY -
*
*      THE FREE WORK AREA FACILITY HAS TWO FUNCTIONS:  IT CAN FREE
*      A SINGLE WORK AREA, OR IT CAN FREE A CHAIN OF WORK AREAS.
*
*      IECRES FREE DECHAINS THE WORK AREA BEING RELEASED IF A
*      PREFIX IS PRESENT.
*
*      IECRES FREE,PREFIX=WTG, =EOV, OR =FIRST DEQUEUES THE
*      TIOT IF IT WAS ENQUEUED DURING THE GETMAIN ROUTINE AND
*      DELETES THE RECOVERY ROUTINE ENVIRONMENT THAT WAS
*      ESTABLISHED AT THAT TIME.  IT THEN RELEASES THE INITIAL
*      WORK AREA AND ALL WORK AREAS CHAINED FROM THE INITIAL WORK AREA.
*
*
*      USER EXIT FACILITY -
*
*      IF THE PROTECT KEY INDICATED IN BITS 0-3 AT DXUKEY
*      IN THE OPEN/CLOSE/EOV WORK AREA POINTED TO BY REG 4
*      IS 7 OR LESS, THAT KEY WILL BE ASSUMED AND THE USER
*      EXIT WILL BE BRANCHED TO. OTHERWISE, THE SYNCH SVC 12
*      WILL BE USED TO PASS CONTROL TO THE USER EXIT.
*
*      DXTCBADR IN THE OPEN/CLOSE/EOV WORK AREA WILL BE USED
*      TO LOCATE THE CURRENT SVRB. IF DXUKEY IS 8 OR GREATER
*      (USER IS NOT A SYSTEM ROUTINE) THE PREVIOUS RB IS
*      INSPECTED TO SEE IF IT IS A PRB (BITS 0 AND 1 OF RBSATB
*      SET TO 0). IF SO, THE REGISTERS 2-13 PASSED TO THE USER
*      EXIT WILL BE LOADED FROM THE CURRENT SVRB'S REGISTER
*      SAVE AREA. IF THE PREVIOUS RB IS NOT A PRB, THE RB
*      CHAIN WILL BE SEARCHED FOR A PRB. WHEN THE PRB MOST
*      RECENTLY IN CONTROL IS FOUND, THE REGISTERS 2-13 PASSED
*      TO THE USER EXIT ARE LOADED FROM THE SVRB WHICH THE
*      PRB PASSED CONTROL TO. IF NO PRB IS FOUND, OR IF
*      DXUKEY IS 7 OR LESS, THE REGISTERS ARE LOADED FROM THE
*      CURRENT SVRB.
*
*      REGISTERS 2-13 ARE SAVED ACROSS THE USER EXIT IN THE
*      CURRENT SVRB'S EXTENDED SAVE AREA. HENCE, THE USER EXIT
*      ROUTINE MUST NOT USE IT.
*
*      IMMEDIATELY BEFORE PASSING CONTROL TO THE USER EXIT,
*      BIT RRFUSREX IS SET TO 1 IN RRFLAGS1 IN THE RECOVERY
*      ROUTINE PARAMETER LIST.  UPON RETURN, IT IS RESET.
*
*
* NOTES = SEE BELOW
*
*      DEPENDENCIES = THE EBCDIC CHARACTER SET WAS USED FOR ASSEMBLY.
*                     THE MODULE MUST BE REASEEMBLED IF A DIFFERENT
*                     CHARACTER SET IS USED DURING EXECUTION.
*                     THE CHARACTER SET CHARACTERISTICS THAT THIS
*                     MODULE IS DEPENDENT UPON ARE -
*                     1. X'FF' IS NOT AN ALPHANUMERIC.
*                     2. X'00' IS NOT AN ALPHANUMERIC.
*                     3. A-Z,0-9 ARE IN COLLATING SEQUENCE, IN THAT
*                        ORDER.
*                     THESE CHARACTERISTICS APPLY TO THE TWO BYTE
*                     MODULE ID IN DETERMINING WHICH MODULE IS TO
*                     LOADED NEXT.
*
*      RESTRICTIONS = ONLY THE OPEN, CLOSE, AND EOV ROUTINES
*                     (INCLUDING RDJFCB) USE THE WAIT, SELECT-LOAD,
*                     SYNCH DCB, QMNGRIO, GET WTG/EOV, INIT/COPY,
*                     AND UEXIT FACILITIES.
*                     ONLY DADSM ROUTINES AND TASK CLOSE USE THE
*                     GET FIRST AND INITIALIZE PREFIX=FIRST FACILITIES.
*
*      REGISTER CONVENTIONS = REGISTER 5 IS THE BASE REGISTER.
*                             REGISTER 14 CONTAINS THE RETURN ADDRESS.
*                             FOR MOST FUNCTIONS, REGISTER 15 POINTS
*                             TO A REGISTER SAVE AREA.
*                             FOR ADDITIONAL REGISTER CONVENTIONS,
*                             SEE THE DESCRIPTIONS AT THE BEGINNING
*                             OF EACH FUNCTION.
*
* PATCH LABEL = THERE ARE TWO PATCH LABELS: THE NEXT TO THE LAST LABEL
*               IN THE FIRST 4K AND THE THIRD LABEL BEFORE THE ORG
*               STATEMENT AT THE END OF THE LISTING.
*
* MODULE TYPE = CONTROL
*
*      PROCESSOR = ASSEMBLER XF
*
*      MODULE SIZE = SEE THE EXTERNAL SYMBOL DICTIONARY OR THE ORG
*                    STATEMENT AT THE END OF THE LISTING.
*
*      ATTRIBUTES = REENTRANT, REFRESHABLE, ENABLED, PRIVILEGED,
*                   KEY ZERO, DATA MANAGEMENT KEY, AND USER KEY,
*                   LINK PACK AREA RESIDENT/PAGEABLE OR NUCLEUS
*                   RESIDENT
*
* ENTRY POINT = ENTRY TO THIS MODULE IS MADE BY A DIRECT BRANCH FROM
*               ANY OPEN/CLOSE/EOV/DADSM MODULE.  THERE ARE FOURTEEN
*               ENTRY POINTS:
*
*               IFG019RA+0  - ENTRY FOR WAIT FACILITY
*               IFG019RA+4  - ENTRY FOR SELECT-LOAD FACILITY
*               IFG019RA+8  - ENTRY FOR DCB SYNCHRONIZATION FACILITY
*               IFG019RA+12 - ENTRY FOR QMNGRIO FACILITY
*               IFG019RA+20 - ENTRY FOR LOAD AND BRANCH FACILITY
*               IFG019RA+24 - ENTRY FOR LOAD AND RETURN FACILITY
*               IFG019RA+28 - ENTRY FOR GET WORK AREA FACILITY
*               IFG019RA+32 - ENTRY FOR GET WTG/EOV WORK AREA FACILITY
*               IFG019RA+36 - ENTRY FOR GET FIRST WORK AREA FACILITY
*               IFG019RA+40 - ENTRY TO INITIALIZE PREFIX=FIRST WKAREA
*               IFG019RA+44 - ENTRY TO INITIALIZE AND/OR COPY THE DCB
*               IFG019RA+48 - ENTRY FOR FREE WORK AREA FACILITY
*               IFG019RA+52 - ENTRY FOR FREE FIRST OR WTG/EOV FACILITY
*               IFG019RA+56 - ENTRY FOR UEXIT FACILITY
*
*      PURPOSE = SEE FUNCTION
*
*      LINKAGE = THIS MODULE IS BRANCHED TO VIA A FULLWORD POINTER
*                IN THE CVT, CVTDMSR.
*
*
*      INPUT = AS FOLLOWS:
*
*
*      THE INPUT FOR WAIT, SELECT-LOAD, AND DCB SYNCHRONIZATION:
*
*      REGISTERS -
*          0 & 1 - SAVED BY SERVICE ROUTINE IN WORK AREA
*          3     - BASE REGISTER OF CALLING MODULE
*          4     - ADDRESS OF DCB'S WORK AREA
*          5     - ADDRESS OF IFG019RA
*          6     - WHERE-TO-GO TABLE ADDRESS
*          9-13  - SAVED BY SERVICE ROUTINE IN WORK AREA
*         14     - RETURN ADDRESS TO CALLING MODULE FOR WAIT FACILITY
*                  AND DCB SYNCHRONIZATION FACILITY, SAVED BY SERVICE
*                  ROUTINE IN WORK AREA.
*
*      WHERE-TO-GO TABLE BASIC SECTION -
*         + 0 - EIGHT BYTE CURRENT MODULE NAME
*         + 6 - TWO BYTE CURRENT MODULE ID
*         +16 - FULLWORD WITH SERVICE ROUTINE WORK AREA ADDRESS
*               IN LOW ORDER THREE BYTES
*         +31 - (WTGPATHS+1) TRACE ROUTINE INDICATOR
*
*      WHERE-TO-GO TABLE DCB ENTRY -
*         + 0 - TWO BYTE MODULE ID
*         + 2 - THREE BYTE MODULE ENTRY POINT ADDRESS
*         + 5 - DCB WORK AREA ADDRESS
*
*      SERVICE ROUTINE WORK AREA -
*         + 0 - PREFIX FOR OPTIONAL TRACE FUNCTION, ADDRESS OF
*               OPTIONAL TRACE ROUTINE
*         + 4 - OPTIONAL TRACE BUFFER ADDRESS
*         + 8 - FULLWORD WITH PARAMETER LIST ADDRESS
*        + 12 - MULTIPLE WAIT ECBLIST
*
*
*      THE INPUT FOR THE LOAD FACILITY:
*
*      REGISTERS -
*          5 - BASE REGISTER FOR THIS MODULE
*          6 - POINTER TO (PSEUDO) WHERE-TO-GO TABLE
*         14 - RETURN ADDRESS OF CALLING MODULE
*         15 - PTR TO PREFIX OF A WORK AREA WHERE REGISTERS MAY
*              BE SAVED, PRESERVED FOR THE CALLING MODULE.
*
*      STORAGE -
*      THE FIELD 'WTGMODNM' MUST CONTAIN THE NAME (PADDED WITH
*      BLANKS) OF THE CSECT TO RECEIVE CONTROL.
*      THE FIELD 'WTGMODEP' MUST BE ZERO IN ORDER TO GET THE
*      GIVEN MODULE LOADED.  IF NOT ZERO, IT IS ASSUMED TO
*      BE THE ADDRESS OF THE DESIRED MODULE.
*
*
*      THE INPUT FOR THE QMNGRIO FACILITY:
*
*      REGISTERS -
*          0 = ZERO IF READ REQUESTED
*            = JFCB ADDRESS IF WRITE REQUESTED
*          1 = POINTER TO JFCB TTR (JFCB PREFIX ADDRESS)
*          5 = BASE ADDRESS
*         14 = POINTER TO RETURN ADDRESS
*         15 = POINTER TO IECPREFX
*
*
*      THE INPUT FOR THE GET FACILITY:
*
*      REGISTERS -
*          0 - AMOUNT OF STORAGE BEING REQUESTED FOR PREFIX=YES OR =NO
*            - AMOUNT OF STORAGE BEING REQUESTED FOR PREFIX=FIRST
*              OR PREFIX=EOV
*            - 0 FOR PREFIX=WTG
*          1 - PREFIX ADDRESS FOR PREFIX=YES
*            - NOT USED FOR PREFIX=NO
*            - EXTENDED PREFIX ADDRESS FOR EXTPR=ADDR (DADSM)
*            - 0 (MEANING NO PREVIOUS PREFIX) FOR PREFIX=FIRST
*            - DCB PARAMETER LIST ADDRESS FOR PREFIX=EOV OR =WTG
*          2 - SUBPOOL FOR PREFIX=YES, =NO, OR =FIRST
*          3 - STORAGE PROTECT KEY FOR PREFIX=YES, =NO, OR =FIRST
*          4 - INDEX FOR PREFIX/LOCK STATUS IF PREFIX=YES,
*              PREFIX=NO, OR PREFIX=FIRST
*              0 = NO PREFIX FOR WORK AREA/NO LOCAL LOCK HELD
*              1 = PREFIX FOR WORK AREA/NO LOCAL LOCK HELD
*              2 = PREFIX FOR WORK AREA/LOCAL LOCK HELD
*              3 = NO PREFIX FOR WORK AREA/LOCAL LOCK HELD
*            - CALLER ID FOR PREFIX=WTG, OR =EOV
*              0 = PREFIX=WTG
*              1 = PREFIX=EOV
*          5 - BASE REGISTER FOR THIS MODULE
*         14 +0 - RETURN ADDRESS FOR PREFIX=NO, =WTG, OR =EOV
*               - ADDRESS OF A 4 BYTE ID FOR PREFIX=FIRST OR =YES
*         14 +4 - RETURN ADDRESS FOR PREFIX=FIRST OR PREFIX=YES OR
*                 EXTPR=ADDR
*         15 - REGISTER SAVE AREA ADDRESS
*
*
*      THE INPUT FOR THE INIT/DCB COPY FACILITY:
*
*        REGISTERS -
*            0 - INDICATION OF WHETHER DCB IS OPEN OR CLOSED AND,
*                HENCE, WHETHER A DEB ADDRESS IN DCBDEBAD WILL BE
*                USED TO FIND SEVERAL OF THE POINTERS NEEDED FOR
*                THE INITIALIZATION FUNCTION:
*                0 - NO WORK AREA INITIALIZATION IS REQUESTED
*                4 - DCB IS OPEN
*                8 - DCB IS CLOSED
*            1 - INDICATION OF DCB COPY FUNCTION REQUESTED
*                0 - NO DCB COPY REQUESTED
*                4 - THE DCB POINTED TO BY DXUDCBAD IN THE OPEN/
*                    CLOSE/EOV WORK AREA (WHICH IS IN PROTECT KEY
*                    INDICATED BY DXUKEY IN THE WORK AREA) IS TO BE
*                    COPIED INTO THE PROTECTED WORK AREA POINTED TO
*                    REGISTER 2.
*                8 - THE PROTECTED WORK AREA COPY OF THE DCB POINTED
*                    TO BY REGISTER 2 IS TO BE COPIED ON TOP OF THE
*                    DCB POINTED TO BY WORK AREA LABEL, DXUDCBAD
*            2 - ADDRESS OF PROTECTED COPY OF DCB BEING PROCESSED
*            4 - ADDRESS OF OPEN/CLOSE/EOV WORK AREA
*            5 - ADDRESS OF IFG019RA
*            6 - ADDRESS OF PREFIX OF MAIN WORK AREA
*           14 - RETURN ADDRESS TO THE CALLING MODULE
*           15 - POINTER TO A REGISTER SAVE AREA
*
*
*      THE INPUT FOR THE FREE WORK AREA FACILITY:
*
*      REGISTERS -
*          0 - AMOUNT OF STORAGE BEING FREED IF PREFIX=NO
*          1 - ADDRESS OF A PREFIX OR AN EXTENDED PREFIX OR ADDRESS
*              OF A WORK AREA TO BE FREED
*          2 - SUBPOOL FOR THE AREA IF PREFIX=NO
*          3 - STORAGE PROTECT KEY OF THE AREA IF PREFIX=NO
*          4 - INDEX FOR PREFIX/LOCK STATUS IF PREFIX=YES OR =NO
*              0 = WORK AREA HAS NO PREFIX/NO LOCAL LOCK HELD
*              1 = WORK AREA HAS A PREFIX/NO LOCAL LOCK HELD
*              2 = WORK AREA HAS A PREFIX/LOCAL LOCK HELD
*              3 = WORK AREA HAS NO PREFIX/LOCAL LOCK HELD
*            - CALLER ID FOR PREFIX=WTG, =EOV, OR =FIRST
*              0 = PREFIX=WTG
*              1 = PREFIX=WTG FROM THE RECOVERY ROUTINES
*              2 = PREFIX=EOV
*              3 = PREFIX=EOV FROM THE RECOVERY ROUTINES
*              4 = PREFIX=FIRST
*              5 = PREFIX=FIRST FROM THE RECOVERY ROUTINES
*          5 - BASE REGISTER FOR THIS MODULE
*         14 - RETURN ADDRESS OF CALLING MODULE
*         15 - ADDRESS OF THE REGISTER SAVE AREA FOR IECRES FREE ONLY
*
*
*      THE INPUT FOR THE USER EXIT FACILITY:
*
*      REGISTERS -
*          0 & 1 VALUES TO BE PASSED TO USER EXIT
*          1     VALUE TO BE PASSED TO USER EXIT
*          2     MAY BE ADDRESS OF REGISTER SAVE AREA OF CALLER
*          4     ADDRESS OF OPEN/CLOSE/EOV WORK AREA
*          5     BASE REGISTER
*         14     RETURN ADDRESS OF CALLER
*         15     ADDRESS OF USER EXIT ROUTINE
*
*
*      OUTPUT = AS FOLLOWS:
*
*
*      THE OUTPUT FOR WAIT, SELECT-LOAD, AND DCB SYNCHRONIZATION:
*
*      REGISTERS -
*          0 & 1 - CONTENTS OF DXREG0 AND DXREG1
*          2     - DCB ADDRESS (FROM OPEN/CLOSE PARAMETER LIST)
*          4     - DCB WORK AREA ADDRESS (FROM WTG TABLE DCB ENTRY)
*          7     - ADDRESS OF CURRENT PARAMETER LIST ENTRY
*          8     - ADDRESS OF CURRENT WTG DCB ENTRY
*          9-14  - CONTENTS OF DXREG9 - DXREGE
*
*
*      THE OUTPUT FOR THE LOAD FACILITY:
*
*      THE OUTPUT OF THIS FACILITY IS THE ENTRY POINT ADDRESS TO
*      THE MODULE WHOSE NAME IS IN 'WTGMODNM'.  FOR BRANCH=NO,
*      THIS ADDRESS IF PLACED IN THE FIELD 'WTGMODEP'.  HOWEVER,
*      FOR BRANCH=DIRECT, REGISTER 15 CONTAINS THE ENTRY POINT
*      ADDRESS, AND 'WTGMODEP' IS ZERO.
*
*
*      THE OUTPUT FOR THE QMNGRIO FACILITY:
*
*      REGISTERS -
*          REGISTERS 0 - 15 ARE RESTORED.
*
*      STORAGE -
*      IF A READ WAS REQUESTED, IECQMNGR CONTAINS THE ADDRESS
*      OF THE WORK AREA WHICH NOW CONTAINS THE JFCB.
*
*
*      THE OUTPUT FOR THE GET FACILITY:
*
*
*      REGISTERS -
*          1 - ADDRESS OF THE STORAGE REQUESTED
*          8 - PRESERVED FOR CALLING MODULE
*          9 - PRESERVED FOR CALLING MODULE
*         10 - PRESERVED FOR CALLING MODULE
*         15 - PRESERVED FOR CALLING MODULE
*
*
*      THE OUTPUT FOR THE INIT/DCB COPY FACILITY:
*
*      REGISTERS -
*          2 - ADDRESS OF THE PROTECTED (COPIED) DCB
*          5 - ADDRESS OF IFG019RA
*         14 - RETURN ADDRESS OF THE CALLING MODULE
*         15 - POINTER TO THE REGISTER SAVE AREA
*      DATA -
*          THE INITIALIZED WORK AREA POINTERS AND/OR THE REFRESHED
*          DCB.  IF THE FUNCTION REQUESTED WAS NOT COMPLETED
*          SATISFACTORILY, ONE OF THE BITS IN DXWCOPYE WILL
*          BE SET TO ONE.  OTHERWISE, THIS BYTE WILL BE ZERO.
*
*
*      THE OUTPUT FOR THE FREE WORK AREA FACILITY:
*
*      REGISTERS -
*          8 - PRESERVED FOR THE CALLING MODULE
*          9 - PRESERVED FOR THE CALLING MODULE
*         10 - PRESERVED FOR THE CALLING MODULE
*         14 - RETURN ADDRESS OF THE CALLING MODULE
*         15 - ADDRESS OF A REGISTER SAVE AREA FOR IECRES FREE ONLY
*
*
*      THE OUTPUT FOR THE USER EXIT FACILITY:
*
*      REGISTERS -
*          REGISTER 15 CONTAINS THE RETURN CODE FROM THE USER
*          EXIT ROUTINE. OTHER REGISTERS ARE RESTORED FROM THE
*          REGISTER SAVE AREA POINTED TO BY REGISTER 2.
*
*
* EXIT-NORMAL = FOR WAIT, SELECT-LOAD, AND DCB SYNCHRONIZATION, SEE
*               THE EXPLANATION UNDER 'FUNCTION'.
*               FOR THE LOAD AND BRANCH FACILITY, CONTROL IS PASSED
*               TO THE ENTRY POINT OF THE REQUESTED MODULE.
*               FOR ALL OTHER FACILITIES, CONTROL IS RETURNED TO
*               THE ADDRESS IN REGISTER 14.
*
* EXIT-ERROR = AN OC1 ABEND IS ISSUED FOR SETLOCK OR TIOT ENQ ERRORS.
*
* EXTERNAL REFERENCES = SEE BELOW
*
*      ROUTINES = DEQ
*                 ENQ
*                 ESTAE
*                 FREEMAIN
*                 GETMAIN
*                 IEAQCDSR
*                 IEAVVMSR
*                 IECRES
*                 LOAD
*                 SETLOCK
*                 WAIT
*                 WTO
*
*      DATA AREAS = NONE
*
*      CONTROL BLOCKS = ACB
*                       AMB
*                       ASCB
*                       CDE
*                       CVT
*                       DCB
*                       DEB
*                       DSAB
*                       JESCT
*                       JFCB
*                       JSCB
*                       LPDE
*                       PSA
*                       QDB
*                       RB
*                       TIOT
*                       TCB
*                       UCB
*
* TABLES = OPEN/CLOSE WORK AREA (CONTAINING JFCB)
*          EOV WORK AREA (CONTAINING JFCB)
*          VARIOUS DADSM WORK AREAS
*          OPEN/CLOSE WTG TABLE
*
* MACROS = DEQ
*          DEBCHK
*          DMABCOND
*          ENQ
*          ESTAE
*          FREEMAIN
*          GETMAIN
*          IDAAMB
*          IECDSECS
*          IECEQU
*          IECRES
*          IEFJESCT
*          IEFQMIOP
*          MODESET
*          QMNGRIO
*          RETURN
*          SETLOCK
*          SYNCH
*          WAIT
*          WTO
*          XCTLTABL
*
* CHANGE ACTIVITY = SEE DELETIONS/CHANGES FOLLOWING CSECT STATEMENT.
*
***********************************************************************
         EJECT
*
*        MISCELLANEOUS EQUATES
*
GETPREFX EQU   X'80000000'              ON = PREFIX WANTED       Y02080
GETLCKHD EQU   X'40000000'              ON = LOCAL LOCK HELD     Y02080
         IECEQU IEZDEB=YES,AOS=YES                               Y02134
***********************************************************************
*                                                                     *
*        ENTRY TO OPEN/CLOSE/EOV/DADSM SERVICE ROUTINE                *
*                                                                     *
***********************************************************************
         USING *,RES                    ADDRESS OF THIS MODULE
         USING FORCORE,RCORE            WORK AREA ADDRESS
         USING WTG,RWTG                 ADDRESS OF WTG TABLE
         USING WTGENTRY,RWTGC           WTG TABLE ENTRY ADDRESS
*
RES00100 B     RES00500                 ENTRY FOR WAIT
RES00200 B     RES01900                 ENTRY FOR SELECT-LOAD    Y02080
RES00300 B     RES00400                 ENTRY TO SYNCHRONIZE     Y02080X
                                        ALL DCB'S                YM3066
RES00310 B     RES10000                 ENTRY FOR QMNGRIO        YM3138
RES00320 DC    F'0'                     UNUSED ENTRY             Y02080
RES00330 B     RES02800                 ENTRY TO LOAD NEXT MOD   Y02080X
                                        & BRANCH TO IT DIRECTLY  YM3066
RES00340 B     RES02810                 ENTRY TO LOAD NEXT MOD   Y02080X
                                        BUT RETURN TO CALLER     YM3066
RES00350 B     RES01830                 GET ENTRY                Y02080
RES00360 B     RES01810                 GET WTG,EOV ENTRY        Y02080
RES00370 B     RES01750                 GET FIRST ENTRY          Y02080
RES00380 B     RES01760                 INITIALIZE PREFIX=FIRST  Y02080
RES00382 B     RES07000                 ENTRY FOR INIT/COPY      YM3138
RES00384 B     RES01860                 FREE ENTRY               Y02080
RES00386 B     RES01880                 FREE FIRST,WTG,EOV ENTRY Y02080
RES00388 B     RES09000                 UEXIT ENTRY              YM3138
         TITLE 'IFG019RA--OPEN/CLOSE/EOV WAIT AND SYNCH DCB FACILITIES'
***********************************************************************
*                                                                     *
* WAIT AND PSEUDO WAIT HANDLING FACILITY OF THE SERVICE ROUTINE       *
*                                                                     *
* THIS SECTION RECEIVES CONTROL FROM THE CALLING MODULE WHEN THE      *
* CALLING MODULE REQUESTS A WAIT OR PSEUDO-WAIT FOR A PARTICULAR DCB  *
* AND FROM THE SELECT-LOAD FACILITY OF THE SERVICE ROUTINE WHEN  Y02080
* THERE REMAINS ONE OR MORE ACTIVE DCB'S IN THE CALLING MODULE   Y02080
* SO THAT A LOAD MAY NOT BE DONE.                                Y02080
*                                                                     *
* THE WAIT-PENDING BIT OR THE PSEUDO-WAIT BIT IS SET AS APPROPRIATE.  *
* ALL ACTIVE DCB'S ARE SCANNED, SEARCHING FOR A DCB WITH NEITHER A    *
* WAIT-PENDING NOR A PSEUDO-WAIT WHILE SIMULTANEOUSLY BUILDING AN     *
* ECBLIST FOR DCB'S WITH A WAIT PENDING.  UPON ENCOUNTERING AN ACTIVE *
* DCB WITH NEITHER A WAIT PENDING NOR A PSEUDO-WAIT, OR A DCB WITH A  *
* WAIT PENDING THAT IS ALREADY POSTED, CONTROL IS RETURNED TO THE     *
* CALLING MODULE FOR THAT DCB.  OTHERWISE, IF THERE ARE ANY DCB'S     *
* WITH A WAIT PENDING, A MULTIPLE WAIT IS ISSUED ON THE ECBLIST,      *
* THE POSTED DCB IS FOUND ON RETURN FROM WAIT, AND A RETURN IS TAKEN  *
* TO THE CALLING MODULE.  IF THERE ARE NO WAITS PENDING, ALL ACTIVE   *
* DCB'S MUST HAVE PSEUDO-WAITS.  THEREFORE, THE PSEUDO-WAIT BITS FOR  *
* ALL THE DCB'S ARE RESET AND A RETURN IS TAKEN TO THE CALLING MODULE *
* FOR THE FIRST ACTIVE DCB.                                           *
*                                                                     *
***********************************************************************
*
* ENTRY TO SYNCHRONIZE ALL DCB'S TO THE SAME PROCESSING POINT
*
RES00400 EQU   *                        SET PSEUDO-WAIT BIT      YM3066
         MVI   DXRESIND,PSEUDOWT        SET PSEUDO-WAIT (SYNCH) BIT
         B     RES02000                 GO PROCESS AS IF THIS    Y02080
*                                       WERE A SELECT-LOAD       Y02080
*                                       REQUEST SO THAT THE      Y02080
*                                       TRACE RTN MAY BE CALLED. Y02080
*                                       THE SELECT-LOAD ENTRY    Y02080
*                                       WILL FIND AN ACTIVE DCB  Y02080
*
* ENTRY FOR WAIT
*
RES00500 EQU   *                        ENTRY FOR WAIT           YM3066
         MVI   DXRESIND,WAITBIT         SET WAIT PENDING BIT
         BAL   R7,RES03000              GO SAVE REGISTERS        Y02080
         BAL   RET,RES03100             GO INITIALIZE REGISTERS
*
* SCAN THE DCB'S FOR WAIT-PENDING AND PSEUDO-WAIT CONDITION TO
* DETERMINE WHETHER A DCB MAY BE PROCESSED WITHOUT WAITING.  IF YES,
* SWITCH DCB'S AND RETURN.  IF NOT, BUILD ECBLIST AND ISSUE MULTIPLE
* WAIT.  IF NO DCB MAY BE STARTED AND NONE HAS A WAIT PENDING, ALL
* DCB'S MUST HAVE A PSEUDO-WAIT, IN WHICH CASE GO RESET PSEUDO-WAIT
* BITS PREPARATORY TO RETURNING TO THE CALLING MODULE.
*
RES00600 EQU   *                        FIND A DCB TO PROCESS    YM3066
RES00700 CLC   WTGMODID,WTGIDTTR        IS THIS DCB ACTIVE             X
                                        (MODULE ID'S EQUAL)
         BNE   RES00800                 NO, GO CHECK FOR LAST ENTRY
         TM    DXRESIND,WAITBIT         YES, TEST FOR WAIT PENDING
         BO    RES01000                 YES, GO SEE IF POSTED
         TM    DXRESIND,PSEUDOWT        NO, TEST FOR A PSEUDO-WAIT
         BNO   RES01200                 NO, GO RETURN TO BEGINNING OF  X
                                        CALLING MODULE
RES00800 EQU   *                        CHECK FOR LAST ENTRY     YM3138
         TM    PLISTOPT(RPARC),LASTNTRY  IS THIS LAST PARAMETER  YM3138X
                                        LIST ENTRY
         BNO   RES01100                 NO, GO INCREMENT AND LOOP
*                                       YES, HAS ECBLIST PTR     Y02080
*                                       BEEN INCREMENTED?        Y02080
*                                       (I.E., HAVE THERE BEEN   Y02080
*                                       ANY WAIT'S PENDING WITH  Y02080
*                                       CORRESPONDING ENTRIES IN Y02080
*                                       THE ECBLIST?)            Y02080
         L     RET,WTGPREFX             GET PTR TO PREFIX        Y02080
         USING IECPREFX,RET                                      Y02080
         L     RET,IECRESWA             GET PTR TO RES WORK AREA Y02080
         USING RWARESWA,RET                                      Y02080
         LA    RET,RWALIST              ADDR FIRST ECB ENTRY     Y02080
         CR    RET,RTIOT                CHECK IF ANY ECBS        Y02080
         DROP  RET                                               Y02080
         BE    RES01500                 NO, MUST HAVE ALL PSEUDO-WAITS,
*                                       OR NONE FOR THIS MODULE  Y02080
*                                       GO INITIALIZE AND RESET ALL
*                                       PSEUDO-WAIT BITS
         SH    RTIOT,FOUR               POINT TO LAST ECB ADDR   Y02080
         OI    0(RTIOT),LASTNTRY        YES, HAVE WAIT'S PENDING AND   X
                                        NO DCB'S TO PROCESS, INDICATE  X
                                        END OF ECBLIST
         BAL   RET,RES03100             INITIALIZE AND RESET ECBLIST   X
                                        ADDRESS
         WAIT  1,ECBLIST=ECBLIST(RTIOT) MULTIPLE WAIT ON ANY ECB Y02080X
                                        IN ECBLIST               Y02080
         B     RES00600                 GO FIND THE DCB WITH A POSTED  X
                                        ECB
RES01000 EQU   *                        TEST IF ECB IS POSTED    YM3138
         TM    DXECB,ECBPOST            IS ECB POSTED ALREADY
         BO    RES01300                 YES, RETURN TO CALLING MODULE
*
         LA    RUCB,DXECB               GET ECB ADDRESS FOR THIS DCB
         ST    RUCB,0(,RTIOT)           ADD ECB ADDRESS TO ECBLIST
         LA    RTIOT,K4(,RTIOT)         NO, INCREMENT            Y02080X
                                        TO NEXT ECB POINTER      Y02080
         B     RES00800                 PROCESS NEXT DCB         Y02080
RES01100 EQU   *                        INCREMENT TO NEXT DCB    YM3138
         BAL   RET,RES03200             INCREMENT TO NEXT DCB
         B     RES00600                 LOOP TO CHECK NEXT DCB
*
* RETURN TO START OF CALLING MODULE SINCE THERE WAS NO WAIT PENDING
* OR PSEUDO-WAIT FOR THIS DCB.
*
RES01200 EQU   *                        RETURN TO START OF CALLING MOD
         L     RDCB,0(,RPARC)           GET DCB ADDRESS FROM PARAMETER X
                                        LIST ENTRY
         MVI   DXREGE,K0                ZERO HIGH ORDER BYTE OF XA01734X
                                        REGISTER 14 IN WORKAREA XA01734
         NI    DCBIFLGS-IHADCB+DXDCB,ALLBITS-DCBIFPIO CLEAR ERR  YM8526
         LM    RTIOT,RET,DXREG9         RESTORE REGISTERS 9 THROUGH 14
         LM    R0,R1,DXREG0             RESTORE REGISTERS 0 AND 1
         BR    RBASE                    RETURN TO START OF CALLING     X
                                        MODULE VIA CALLING MODULE'S    X
                                        BASE REGISTER
*
* RESET WAIT PENDING BIT
*
RES01300 EQU   *                        RESET WAIT PENDING BIT   YM3138
         NI    DXRESIND,X'FF'-WAITBIT   RESET WAIT PENDING BIT
*
* RETURN TO CALLING MODULE VIA CALLING MODULE'S LINK REGISTER
*
RES01400 EQU   *                        RETURN TO CALLING MODULE YM3138
         L     RDCB,0(,RPARC)           GET DCB ADDRESS FROM PARAMETER X
                                        LIST ENTRY
         LM    RTIOT,RET,DXREG9         RESTORE REGISTERS 9 THROUGH 14
         LM    R0,R1,DXREG0             RESTORE REGISTERS 0 AND 1
         BR    RET                      RETURN TO CALLING MODULE VIA   X
                                        CALLING MODULE'S LINK REGISTER
*
* RESET ALL PSEUDO-WAIT BITS AND FIND THE FIRST ACTIVE DCB IN THE
* PARAMETER LIST FOR THE RETURN.
*
RES01500 EQU   *                        INITIALIZE REGISTERS     YM3138
         BAL   RET,RES03100             INITIALIZE REGISTERS
RES01600 EQU   *                        FIND 1ST ACTIVE DCB      YM3138
         EX    0,RES00700               IS THIS DCB ACTIVE             X
                                        (MODULE ID'S EQUAL)
         BNE   RES01700                 NO, GO INCREMENT AND LOOP
         TM    DXRESIND,PSEUDOWT        YES, IS PSEUDO-WAIT BIT ON
         BNO   RES01400                 NO, GO RETURN VIA LINK REGISTER
         NI    DXRESIND,X'FF'-PSEUDOWT  YES, RESET PSEUDO-WAIT BIT
RES01700 TM    PLISTOPT(RPARC),LASTNTRY  IS THIS LAST PARM LIST ENTRY
         BO    RES01500                 YES, GO INITIALIZE REGS  YM3138
         BAL   RET,RES03200             INCREMENT TO NEXT DCB
         B     RES01600                 GO LOOP
         TITLE 'IFG019RA--OPEN/CLOSE/EOV/DADSM GETMAIN FACILITY' YM3138
***********************************************************************
*                                                                     *
*        FUNCTION PROLOGUE                                            *
*                                                                     *
***********************************************************************
*
* FUNCTION NAME -
*
*        GETMAIN FACILITY FOR OPEN/CLOSE/EOV/DADSM
*
* FUNCTION -
*
*        THIS ROUTINE HAS FOUR FUNCTIONS:
*        1. IT CAN GET A SINGLE WORK AREA WITH OR WITHOUT PREFIX;
*        2. IT CAN GET AN EOV WORK AREA OR A WTG TABLE (OPEN/CLOSE);
*        3. IT CAN GET A FIRST WORK AREA FOR DADSM OR TASK CLOSE;
*        4. IT CAN INITIALIZE THIS WORK AREA FOR DADSM OR TASK CLOSE.
*
*        IECRES GET,PREFIX=YES OR =NO IS ENTERED BY O/C/E/D MODULES
*        TO GET STORAGE OTHER THAN FOR A WTG TABLE OR FIRST WORK AREA.
*        IT ISSUES THE GETMAIN MACRO AND ZEROS THE STORAGE.  IT BUILDS
*        A PREFIX AND CHAINS THE WORK AREA IF REQUESTED.
*
*        IECRES GET,PREFIX=WTG OR =EOV GETS THE FIRST WORK AREA FOR
*        THE O/C/E MODULES.  IT GETS A SINGLE ENTRY WTG TABLE AND
*        WORK AREA FOR EOV OR A VARIABLE-LENGTH WTG TABLE FOR OPEN
*        AND CLOSE.  THE STORAGE IT REQUESTS INCLUDES A PREFIX,
*        EXTENDED PREFIX, PREFIX, RECOVERY ROUTINE PARAMETER LIST,
*        DCB PARAMETER LIST, WORK AREA USED BY IFG019RA, AND A TRACE
*        BUFFER, IF REQUESTED.  AFTER ISSUING THE GETMAIN MACRO, IT
*        ZEROS THE STORAGE AND BUILDS THE PREFIX.  IT THEN ENQUEUES
*        ON THE TIOT AND ISSUES THE ESTAE MACRO TO ESTABLISH THE
*        ADDRESS OF THE O/C/E/D RECOVERY ROUTINE.
*
*        IECRES GET,PREFIX=FIRST IS ENTERED BY THE DADSM FUNCTIONS OR
*        BY TASK CLOSE TO GET STORAGE FOR THE MAIN WORK AREA.  THE
*        ROUTINE ADDS THE LENGTH OF A PREFIX, EXTENDED PREFIX, AND
*        RECOVERY ROUTINE PARAMETER LIST TO THE REQUESTED AMOUNT OF
*        SPACE.  AFTER ISSUING THE GETMAIN MACRO, IT ZEROS THE
*        STORAGE AND BUILDS THE PREFIX.
*
*        THE SECOND ENTRY OF IECRES GET,PREFIX=FIRST INITIALIZES
*        THE WTO LENGTH FIELD IN THE PSEUDO WTG TABLE AND ISSUES
*        THE ESTAE MACRO TO ESTABLISH THE ADDRESS OF THE O/C/E/D
*        OR TASK CLOSE RECOVERY ROUTINE.
*
* ENTRY POINTS -
*
*        ENTRY TO THIS MODULE IS MADE BY A DIRECT BRANCH FROM ANY
*        MODULE IN THE COMPONENT.
*              IFG019RA+28 - ENTRY FOR GET WORK AREA FACILITY
*              IFG019RA+32 - ENTRY FOR GET WTG/EOV WORK AREA FACILITY
*              IFG019RA+36 - ENTRY FOR GET FIRST WORK AREA FACILITY
*              IFG019RA+40 - ENTRY TO INITIALIZE PREFIX=FIRST WORK AREA
*
* INPUT -
*
*        REGISTERS -
*        0 - AMOUNT OF STORAGE BEING REQUESTED FOR PREFIX=YES OR =NO
*          - AMOUNT OF STORAGE BEING REQUESTED FOR PREFIX=FIRST OR =EOV
*          - 0 FOR PREFIX=WTG
*        1 - PREFIX ADDRESS FOR PREFIX=YES
*          - NOT USED FOR PREFIX=NO
*          - EXTENDED PREFIX ADDRESS FOR EXTPR=ADDR (DADSM)
*          - 0 (MEANING NO PREVIOUS PREFIX) FOR PREFIX=FIRST
*          - DCB PARAMETER LIST ADDRESS FOR PREFIX=EOV OR =WTG
*        2 - SUBPOOL FOR PREFIX=YES, =NO, OR =FIRST
*        3 - STORAGE PROTECT KEY FOR PREFIX=YES, =NO, OR =FIRST
*        4 - INDEX FOR PREFIX/LOCK STATUS IF PREFIX=YES, =NO, OR =FIRST
*            0 = NO PREFIX FOR WORK AREA/NO LOCAL LOCK HELD
*            1 = PREFIX FOR WORK AREA/NO LOCAL LOCK HELD
*            2 = PREFIX FOR WORK AREA/LOCAL LOCK HELD
*            3 = NO PREFIX FOR WORK AREA/LOCAL LOCK HELD
*          - CALLER ID FOR PREFIX=WTG, OR =EOV -
*            0 = PREFIX=WTG
*            1 = PREFIX=EOV
*        5 - BASE REGISTER FOR THIS MODULE
*       14 +0 - RETURN ADDRESS FOR PREFIX=NO, =WTG, OR =EOV
*             - ADDRESS OF A 4 BYTE ID FOR PREFIX=FIRST OR =YES
*       14 +4 - RETURN ADDRESS FOR PREFIX=FIRST OR =YES OR EXTPR=ADDR
*       15 - REGISTER SAVE AREA ADDRESS
*
* OUTPUT -
*
*        REGISTERS -
*        1 - ADDRESS OF THE STORAGE REQUESTED
*        8 - PRESERVED FOR CALLING MODULE
*        9 - PRESERVED FOR CALLING MODULE
*       10 - PRESERVED FOR CALLING MODULE
*       15 - PRESERVED FOR CALLING MODULE
*
***********************************************************************
         EJECT                                                   Y02080
         DS    0F                                                Y02080
RES01801 DC    F'0'                     NO PREFX - NO LOCK       Y02080
RES01802 DC    AL4(GETPREFX)            PREFIX                   Y02080
RES01803 DC    AL4(GETLCKHD+GETPREFX)   PREFIX + LOCK HELD       Y02080
RES01804 DC    AL4(GETLCKHD)            LOCK HELD                Y02080
**************************************************************** Y02080
*        GET FIRST FOLLOWED BY GET FIRST INITIALIZATION          Y02080
**************************************************************** Y02080
RES01750 LA    RB,RRPLEND-IECRRPL       LENGTH OF RRPLIST        Y02080
         LA    RB,IECDAEND-IECEXTPR(,RB)  LENGTH OF EXTENDED     Y02080X
                                        PREFIX FOR DADSM         Y02080
         AR    R0,RB                    ADD RRPLIST AND EP       Y02080
         B     RES01830                 GETMAIN                  Y02080
**************************************************************** Y02080
*        GET FIRST INITIALIZATION                                Y02080
**************************************************************** Y02080
RES01760 LA    R0,IECSTART-IECPREFX     LENGTH OF BASE           Y02080
         SR    R1,R0                    ADDR OF BASE PREFIX      Y02080
         USING IECPREFX,R1              BASE PREFIX              Y02080
         LA    RWTG,IECDAEND            ADDR WTO PREFIX          Y02134
         MVC   0(K4,RWTG),MSGPREFX      SET WTO MSG PREFIX       Y02080
         LA    RWTG,WTG-WTGTABLE(,RWTG) POINTER TO WTG TABLE     Y02134
         ST    RWTG,IECWTGTB            ADDR OF WTG TBL          Y02080
         LR    R2,R1                    ADDR OF BASE PREFIX      Y02080
         A     R2,IECCORLN              LENGTH OF GETMAIN        Y02080
         LA    R0,RRPLEND-IECRRPL       LENGTH OF RRPLIST        Y02080
         SR    R2,R0                    GET ADDR OF RRPLIST      Y02080
         ST    R2,IECRRPRM              SAVE ADDR OF RRPLIST     Y02080
         LR    RA,RET                   SAVE RETURN ADDR         Y02144
         LA    RET,RR0F                 IFG0RR0A RECOVERY ID     Y02144
         CLC   IECCORID,RR0A+K4         IFG0RR0A ENTRY           Y02144
         BE    RES01770                 BRANCH IF YES            Y02144
         LA    RET,TC4A                 TASK CLOSE RECOVERY ID   Y02144
         CLC   IECCORID,TC0A+K4         TASK CLOSE ENTRY         Y02144
         BE    RES01770                 BRANCH IF YES            Y02144
         OI    RRFUNCTN-IECRRPL(R2),RRFDADSM INDICATE DADSM    @ZA02177
         LA    RET,RR0A                 DADSM RECOVERY ID        Y02144
RES01770 EQU   *                        ESTABLISH RECOVERY RTN   Y02144
         BAL   RC,RES06000              ESTABLISH RECOVERY RTN   Y02144
         LR    RET,RA                   RESTORE RETURN ADDR      Y02144
         L     R1,IECCORAD              RETURN ADDR OF EXT PREFX Y02080
         DROP  R1                                                Y02080
         BR    RET                      RETURN                   Y02080
         EJECT
**************************************************************** Y02080
*        GET WTG,EOV                                             Y02080
*                                                                Y02080
*        0 - LENGTH OF WORK AREA (0 FOR WTG)                     Y02080
*        1 - ADDRESS OF USER'S PARAM LIST                        Y02080
*        4 - 0 IF WTG, 1 IF EOV                                  Y02080
*        5 - BASE REG FOR 19RA                                   Y02080
*        14 - RETURN ADDRESS                                     Y02080
*        15 - REGISTER SAVE AREA ADDRESS                         Y02080
**************************************************************** Y02080
RES01810 LA    RA,K0(,RET)              SAVE RETURN ADDRESS      Y02080
         MODESET EXTKEY=ZERO            KEY = ZERO               Y02080
RES01812 SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        *
               RELATED=(LOCAL,IFG019RA(RES01827))                Y02080
         LTR   RD,RD                    TEST FOR ERROR           Y02134
         BNZ   ERROR1                   BRANCH IF SETLOCK ERROR  Y02080
         LR    R8,R1                    ADDR OF USER'S PARAM LST Y02080*
                                        OR ADDR DCB FOR EOV/FEOV Y02080
         SLL   R4,K31                   GET WTG, EOV INDICATOR   Y02080
         OR    RA,R4                    SAVE INDR ACROSS GET     Y02080
         LA    R9,K1                    1 DCB FOR EOV            Y02080
         LTR   RA,RA                    CHECK IF EOV             Y02080
         BM    RES01816                 EOV - NO DCB COUNT       Y02080
***                                                              Y02080
* NUMBER OF DCBS COMPUTED                                        Y02080
***                                                              Y02080
         L     R4,CVTPTR                LOAD CVT ADDRESS         Y02080
         L     R4,CVTTCBP-CVT(,R4)      ADDR OF TCB/ASCB PTRS    Y02080
         L     R4,K4(,R4)               ADDR OF CURRENT TCB      Y02080
         USING TCB,R4                   TCB FOR MODESET          Y02080
         MODESET EXTKEY=RBT234,WORKREG=2 USER'S KEY              Y02080
         DROP  R4                       NO TCB ADDR              Y02080
         LR    R6,R8                    ADDR USER PARAM LIST     Y02080
         LA    R9,K0                    INIT COUNT               Y02080
RES01814 TM    PLISTOPT(R6),LASTNTRY    CHECK IF LAST DCB ADDR   Y02080
         LA    R9,K1(,R9)               INCREMENT COUNT          Y02080
         LA    R6,K4(,R6)               INCREMENT TO NEXT ADDR   Y02080
         BNO   RES01814                 CHECK NEXT DCB           Y02080
         MODESET EXTKEY=ZERO            KEY ZERO                 Y02080
***                                                              Y02080
* CALCULATE LENGTH OF CORE DESIRED                               Y02080
***                                                              Y02080
RES01816 LR    R6,R0                    INIT WITH CORE REQ ENTRY Y02080
         LR    RB,R9                    NUMBER OF DCBS           Y02080
         SLL   RB,K4                    4 BYTES PER USER PLIST ENTRY   *
                                        4 BYTES PER ECBLIST ENTRY      *
                                        8 BYTES PER WTG ENTRY    Y02080
         AR    R6,RB                    INCR SIZE BY ABOVE       Y02080
         LA    R6,WTGFIXED(,R6)         INCR FOR FIXED LENGTH    Y02080
*                                       EXT PREFIX, WTO PREFIX,  Y02080
*                                       WTG BASE + 1 ENTRY,      Y02080
*                                       RECOVERY PARAMETER LIST, Y02080
*                                       RES WORK AREA            Y02080
*                                       TEST IF TRACE WAS REQUESTED. IF
*                                       SO, GET CORE FOR TRACE BUFFER
         L     R3,CVTPTR                GET POINTER TO CVT       Y02080
         LA    R6,TRCBFRLN(,R6)         INCREMENT GETMAIN SIZE   Y02080
RES01817 EQU   *                        CONT SETUP FOR GETMAIN   Y02080
***                                                              Y02080
*        SET PARAMETERS FOR GET                                  Y02080
***                                                              Y02080
         LR    R0,R6                    LENGTH                   Y02080
         SR    R1,R1                    NO PREVIOUS PREFIX       Y02080
         LA    R2,SP230                 SUBPOOL                  YM3138
         LA    R3,K5                    DATAMGT KEY              Y02080
         LA    R4,K2                    PREFIX + LOCK HELD       Y02080
         LTR   RA,RA                    CHECK IF EOV OR O/C      Y02080
         BM    RES01818                 EOV BRANCH               Y02080
         BAL   RET,RES01830             GETMAIN AREA             Y02080
         DC    CL4'O/C'                 STD ID FOR OPEN/CLOSE    Y02080
         B     RES01820                 INIT WORK AREA           Y02080
         EJECT                                                   Y02080
RES01818 BAL   RET,RES01830             GETMAIN AREA EOV         Y02080
         DC    CL4'EOV'                 ID FOR EOV               Y02080
*****************************************************************Y02080
*                                                                Y02080
*  RETURN FROM GETMAIN                                           Y02080
*                                                                Y02080
*        1 - ADDR OF EXTENDED PREFIX                             Y02080
*        8 - PRESERVED = USER'S PARAM LIST ADDR                  Y02080
*        9 - PRESERVED = NUMBER OF DCBS                          Y02080
*        10 - PRESERVED = ADDR RET TO INIT CALLER                Y02080
*        15 - PRESERVED = REG SAVE AREA ADDR                     Y02080
*                                                                Y02080
*        LOCAL LOCK HELD AND IN KEY 5                            Y02080
*****************************************************************Y02080
RES01820 LA    RB,IECSTART-IECPREFX     OFFSET FROM BASE TO EXT  Y02080
         SR    R1,RB                    PTR TO BASE PREFIX       Y02080
         USING IECPREFX,R1              BASE PREFIX              Y02080
         LA    R0,K0                    NO CORE AREA FOR WTG     Y02080
         LTR   RA,RA                    WTG?                     Y02080
         BNM   RES01822                 BR WTG                   Y02080
         LA    R0,EOVSIZE               LENGTH OF EOV W/A        Y02080
RES01822 LA    R2,IECOCEND              ADDRESS TO BE RETURNED   Y02080
         LR    RWTG,R2                  GET AREA POINTER         Y02080
         AR    RWTG,R0                  ADDR WTO PREFIX          Y02080
         MVC   0(K4,RWTG),MSGPREFX      SET WTO MSG PREFIX       Y02080
         LA    RWTG,WTG-WTGTABLE(,RWTG) ADDR OF WTG TABLE        Y02134
         ST    RWTG,IECWTGTB            ADDR WTG TBL IN EXT PREF Y02080
         ST    R1,WTGPREFX              SET ADDR BASE IN WTGTBL  Y02080
         LR    RD,R9                    NUMBER OF DCBS           Y02080
         SLL   RD,K3                    8 BYTES PER WTG ENTRY    Y02080
         LA    RB,WTGEND-WTG(RD,RWTG)   ADDR RECOVERY PARAM LIST Y02080
         ST    RB,IECRRPRM              ADDR RECOVERY PARAM LIST Y02080
         LA    RB,RRPLEND-IECRRPL(,RB)  ADDR OF USER'S PARAM LST Y02080
         ST    RB,IECUPRML              SAVE ADDR USER'S PLIST   Y02080
         STC   R9,IECDCBNO              SAVE NO. OF DCBS         Y02144
         LTR   RA,RA                    CHECK IF EOV             Y02080
         BM    RES01825                 EOV                      Y02080
         LR    R2,RWTG                  RETURN ADDR WTG IF O/C   Y02080
         LR    RC,R8                    SAVE USER PARMLIST PTR @ZA01491
         LR    RD,R9                    NUMBER OF DCBS           Y02080
         L     R4,CVTPTR                LOAD CVT POINTER       @ZA01491
         L     R4,CVTTCBP-CVT(,R4)      LOAD TCB POINTERS      @ZA01491
         L     R4,K4(,R4)               LOAD CURRENT TCB PTR   @ZA01491
         L     R4,TCBRBP-TCB(,R4)       LOAD CURRENT RB POINTER@ZA01491
         L     R4,RBLINK-RBBASIC(,R4)   LOAD CALLER RB POINTER @ZA01491
RES01824 EQU   *                        LOOP TO COPY PARMS     @ZA01491
         MODESET KEYADDR=RBOPSW+K1-RBBASIC(,R4),WORKREG=14     @ZA02166
*
***********************************************************************
*
*        COPY USER PARAMETER LIST TO AVOID POSSIBLE ASYNCHRONOUS
*        MODIFICATION AND AVOID POSSIBLE INTEGRITY EXPOSURE.
*
***********************************************************************
*
*        A PROGRAM CHECK AT THE NEXT INSTRUCTION INDICATES
*        THAT THE CALLERS PARAMETER LIST IS NOT IN THE SAME KEY
*        THAT THE CALLER WAS IN WHEN HE ISSUED THE SVC.
*
***********************************************************************
*
         L     RET,DXDCBLST-USERPRML(,RC) LOAD DCB PARM        @ZA01491
*
***********************************************************************
*
         MODESET EXTKEY=DATAMGT         OUR KEY                @ZA01491
         ST    RET,DXDCBLST-USERPRML(,RB) COPY TO OUR LIST     @ZA01491
         LA    RC,L'DXDCBLST(,RC)       NEXT IN USER LIST      @ZA01491
         LA    RB,L'DXDCBLST(,RB)       NEXT IN OUR LIST       @ZA01491
         BCT   RD,RES01824              BRANCH IF MORE         @ZA01491
         LA    RD,L'DXDCBLST            GET OFFSET TO LAST     @ZA01491
         SR    RB,RD                    SUBTRACT GET LAST ENTRY@ZA01491
         OI    DXDCBLST-USERPRML(RB),LASTNTRY END OF PARM LIST   Y02134
         B     RES01826                 CONTINUE                 Y02080
RES01825 ST    R8,DXDCBLST-USERPRML(,RB) STORE DCB IN PARM LIST  Y02134
         OI    DXDCBLST-USERPRML(RB),LASTNTRY END OF PARM LIST   Y02134
         LR    R8,RB                    PT TO W/A PARM LIST      Y02080
RES01826 LA    RB,L'DXDCBLST(,RB)       ADDR OF RES WORK AREA    Y02080
         ST    RB,IECRESWA              SAVE RES WA POINTER      Y02134
         ST    R8,RWAPARM-RWARESWA(,RB) ADDRESS OF USER PARMLIST Y02134
         LR    R8,RB                    SAVE RESIDENT WKA PTR    Y02080
*
         MODESET EXTKEY=SUPR            SETLOCK KEY            @ZA01491
*
RES01827 SETLOCK RELEASE,TYPE=LOCAL,    END OF USER MOVE         Y02134X
               RELATED=(LOCAL,IFGO19RA(RES01812))                Y02080
         LTR   RD,RD                    TEST FOR SETLOCK ERROR   Y02080
         BNZ   ERROR1                   BRANCH IF SETLOCK ERROR  Y02080
         MODESET EXTKEY=DATAMGT         KEY OF AREA              Y02080
*
         L     RET,CVTPTR               LOAD POINTER TO CVT      Y02080
         TM    CVTGTFST-CVT(RET),CVTGTFAV  IS GTF ACTIVE         YM7365
         BNO   RES01828                 NO, DON'T LOAD IFG019TR  Y02080
         LR    RB,R8                    RESTORE RESIDENT WKA PTR Y02080
         USING RWARESWA,R8              RESIDENT WORK AREA       Y02080
         LR    RD,R9                    NUMBER OF DCB'S          Y02080
         SLL   RD,2                     4 BYTES PER DCB          Y02080
         LA    RB,RWALIST-RWARESWA(RD,RB) INCREMENT TO TRACE     Y02080C
                                        BUFFER ADDRESS           Y02080
         ST    RB,RWATRBUF              SAVE TRACE BUFFER ADDR   Y02080
         LR    RD,RF                    SAVE REG SAVE AREA ADDR  Y02080
         IECRES LOAD,MODNM=TRAC,PREFIX=WTGPREFX,BRANCH=NO        Y02080C
                                        GET EPA OF IFG019TR      Y02080
         LR    RF,RD                    RESTORE SAVE AREA ADDR   Y02080
         MVC   RWATRACE,WTGMODEP        SAVE EPA OF IFG019TR     Y02080
         XC    WTGMODNM(K12),WTGMODNM   CLEAR MODULE NAME + EPA  Y02080
         DROP  R8                       STOP USE OF RESWA DSECT  Y02080
         LR    R8,RB                    PT TO TRACE BUFFER       Y02080
         LA    RB,K8(,RB)               INCREMENT TO FIRST DATA  Y02080
         ST    RB,K4(R8)                SAVE PTR TO FIRST DATA   Y02080
         MVC   K2(L'FID,R8),FID         MOVE FORMAT ID TO BUFFER Y02080
*
RES01828 EQU   *                        ESTABLISH RECOVERY RTN   Y02080
         USING WTGENTRY,RWTGC           RESTORE ADDRESSABILITY   Y02080
         LA    RET,RR0A                 PT TO O/C/E RECOVERY RTN Y02144
         BAL   RC,RES06000              ESTABLISH RECOVERY RTN   Y02144
*
         BAL   RC,RES01850              ENQ TIOT               @ZA30676
*
*        ON RETURN REGISTER 0 CONTAINS RETURN INDICATOR FROM ENQ YM3185
*        0 - ENQ SUCCESSFUL OR CALLER HOLDS RESOURCE SHARED      YM3185
*        4 - CALLER HOLDS RESOURCE EXCLUSIVELY                   YM3185
*
* SET UP TO RETURN TO CALLER                                     Y02080
*                                                                Y02080
*        15 RESTORED                                             Y02080
*        14 RETURN ADDR                                          Y02080
*        0 - RESULT OF ENQ ON TIOT                               YM3185
*        1 - ADDR OF BASE PREFIX                                 Y02080
*        2 - ADDR OF WORK AREA IF EOV OR WTG IF OPEN             Y02080
*        6 - ADDR WTG TABLE                                      Y02080
***                                                              Y02080
         LR    RET,RA                   SET RETURN ADDR          Y02080
         LR    R1,R2                    ADDR OF AREA             Y02144
         BR    RET                      RETURN                   Y02080
         DROP  R1                                                Y02080
         EJECT                                                   Y02080
***                                                              Y02080
*        GET LOCAL LOCK FOR ENTRY TO GETMAIN                     Y02080
***                                                              Y02080
RES01830 LR    R6,RET                   SAVE RET ADDR            Y02080
         MODESET EXTKEY=ZERO            KEY 0 FOR SETLOCK        Y02080
         SLL   R4,K2                    CONVERT INDEX TO OFFSET  Y02080
         L     R4,RES01801(R4)          GET OPTIONS MASK         Y02080
         LR    RC,R4                    SAVE OPTIONS             Y02080
         N     R4,RES01802              PREFIX DESIRED           Y02080
         BZ    RES01831                 NO - THEN DON'T          Y02080
         LA    RB,IECSTART-IECPREFX     OFFSET FOR BASE PREFIX   Y02080
         AR    R0,RB                    ALLOW FOR BASE PREFIX    Y02080
RES01831 LR    R4,RC                    GET OPTIONS MASK         Y02080
         N     R4,RES01804              LOCK ALREADY HELD?       Y02080
         LR    R4,RC                    RESTORE MASK             Y02080
         BNZ   RES01834                 YES - THEN NO GET LOCK   Y02080
RES01832 SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                  Y02080*
               RELATED=(LOCAL,IFG019RA(RES01847))                Y02080
         LTR   RD,RD                    TEST FOR SETLOCK ERROR   Y02080
         BNZ   ERROR1                   BRANCH IF SETLOCK ERROR  Y02080
***                                                              Y02080
*        SET UP FOR GETMAIN                                      Y02080
***                                                              Y02080
RES01834 LR    RB,RF                    SAVE REG SAVE AREA ADDR  Y02080
         SLL   R3,K4                    00 00 00 KEY0            Y02080
         LR    RC,R4                    SAVE INDICATORS          Y02080
         OR    RC,R3                    MASK - KEY               Y02080
         L     R4,CVTPTR                PT CVT                   Y02080
         L     R4,CVTTCBP-CVT(,R4)      PT TO THE TCB/ASCB WORDS Y02080
         L     R7,K12(,R4)              PT ASCB                  Y02080
         L     R4,K4(,R4)               PT CURRENT TCB           Y02080
         LR    RD,R1                    SAVE PREFIX PTR          Y02080
         SR    R1,R1                    SCAFFOLD GETMAIN INDR    Y02080
         GETMAIN RU,SP=(R2),LV=(0),KEY=(3),BRANCH=YES            Y02080
         LR    R7,RC                    MASK - KEY               Y02080
         LR    R4,R2                    SAVE SP                  Y02080
         LR    R2,RC                    SAVE KEY OF AREA         Y02080
         MODESET KEYADDR=(2),WORKREG=2                           Y02080
***                                                              Y02080
*        CLEAR AREA TO ZEROS                                     Y02080
***                                                              Y02080
         LR    RC,R0                    SAVE LENGTH OF AREA      Y02080
         LR    RET,R1                   SAVE ADDR OF AREA        Y02080
         LR    R0,R1                    ADDR OF AREA             Y02080
         LR    R1,RC                    LENGTH OF AREA           Y02080
         LA    RF,K0                    FILL CHARACTER 0         Y02080
         MVCL  R0,RET                   CLEAR WORK AREA          Y02080
***                                                              Y02080
*        CHECK IF PREFIX                                         Y02080
***                                                              Y02080
         LR    R1,RET                   GET ADDR OF AREA         Y02080
         SLL   R2,K24                   KEY0 00 00 00            Y02080
         OR    R2,R4                    KEY0 00 00 SP            Y02080
         LR    RF,R7                    GET OPTIONS MASK         Y02080
         N     RF,RES01802              PREFIX REQUIRED?         Y02080
         BZ    RES01846                 NO - EXIT                Y02080
***                                                              Y02080
* ESTABLISH PREFIX                                               Y02080
***                                                              Y02080
         USING IECPREFX,R1              R1 PTS TO BASE PREFIX    Y02080
         MVC   IECCORID,K0(R6)          SET CORE ID              Y02080
         CLI   IECCORID,BLANK           CHECK FOR ID             Y02134
         BNE   RES01838                 BRANCH IF ID SPEC        Y02134
         MVC   IECCORID,OCED            MOVE IN DUMMY ID         Y02134
RES01838 ST    R2,IECCORKY              SAVE KEY AND SP          Y02080
         ST    RC,IECCORLN              SAVE LENGTH OF CORE      Y02080
         LA    RC,IECSTART              GET ADDR OF WORK AREA    Y02080
         ST    RC,IECCORAD              SET WORK AREA ADDR       Y02080
*                                                                Y02080
         LTR   RD,RD                    PREVIOUS PREFIX?         Y02080
         BZ    RES01840                 NO - THEN FIRST          Y02080
         LA    R3,IECSTART-IECPREFX     LENGTH OF BASE PREFIX    Y02080
         SR    RD,R3                    BACK UP TO BASE          Y02080
***                                                              Y02080
*        SET UP NTH ENTRY                                        Y02080
***                                                              Y02080
         MODESET EXTKEY=ZERO            KEY ZERO FOR MULTIPLE    Y02080*
                                        KEYED AREAS - PROB IF    Y02080*
                                        FETCH PROTECTED          Y02080
         L     RET,IECCORPS-IECPREFX(,RD) PTR TO HEAD            Y02080
         ST    RET,IECCORPS             SET CURRENT PTR TO HEAD  Y02080
         ST    RET,IECCORP2             SET CURR FWD PTR TO HEAD Y02080
         L     RF,IECCORP1-IECPREFX(,RET) GET PTR TO LAST        Y02080
         ST    RF,IECCORP1              SET CURR BACK PTR TO LST Y02080
         ST    R1,IECCORP2-IECPREFX(,RF)  SET LST FWD PTR TO CUR Y02080
         ST    R1,IECCORP1-IECPREFX(,RET)  SET FIRST BACK PTR TO Y02080*
                                        CURRENT                  Y02080
         B     RES01842                 EXIT                     Y02080
***                                                              Y02080
*        FIRST PREFIX                                            Y02080
***                                                              Y02080
RES01840 ST    R1,IECCORPS              SET HEAD PTR TO THIS     Y02080
         ST    R1,IECCORP1              SET BACK PTR TO THIS     Y02080
         ST    R1,IECCORP2              SET FWD PTR TO THIS      Y02080
*                                                                Y02080
RES01842 L     R1,IECCORAD              R1 PTS TO WRK AREA ON RT Y02080
         DROP  R1                                                Y02080
         LA    R6,K4(,R6)               SET RETURN ADDR PAST ID  Y02080
***                                                              Y02080
*        SET UP RETURN                                           Y02080
***                                                              Y02080
RES01846 EQU   *                        RELEASE LOCAL LOCK       Y02080
         MODESET EXTKEY=ZERO            KEY 0 FOR SETLOCK        Y02080
         LR    RF,RB                    RESTORE SAVE AREA        Y02080
         N     R7,RES01804              LOCK HELD ON ENTRY       Y02080
         BNZ   RES01848                 RETURN IF TRUE           Y02080
RES01847 SETLOCK RELEASE,TYPE=LOCAL,                             Y02080*
               RELATED=(LOCAL,IFG019RA(RES01832))                Y02080
         LTR   RD,RD                    TEST FOR SETLOCK ERROR   Y02080
         BNZ   ERROR1                   BRANCH IF ERROR          Y02134
RES01848 SRL   R2,K24                   00 00 00 KEY0            Y02080
         MODESET KEYADDR=(2),WORKREG=2  SET RET KEY              Y02080
RES01849 LR    RET,R6                   SET UP RETURN            Y02080
         BR    RET                      RETURN                   Y02080
         EJECT
***
*        THIS SECTION ENQ'S UPON THE TIOT.                       Y02134
*
*        THE TIOT IS ENQ'ED WHEN AN EOV WORK AREA OR A WTG       Y02134
*        IS OBTAINED.                                            Y02134
*
*        THE TIOT RESOURCE IS A SYSTEM (NOT STEP) RESOURCE -     Y02134
*              MAJOR NAME - SYSZTIOT                             Y02134
*              MINOR NAME - SIX BYTES CONTAINING                 Y02134
*                TWO BYTE ASID,                                  Y02134
*                FOUR BYTE DSAB QDB ADDRESS OBTAINED FROM THE    Y02134
*                ACTIVE JSCB.                                    Y02134
*        THE ENQ IS ISSUED RET=HAVE FOR SHARED CONTROL. THIS     Y02134
*        TASK WILL WAIT FOR THE RESOURCE IF ANOTHER TASK         Y02134
*        HAS IT EXCLUSIVELY. IF THE ENQ IS SUCCESSFUL,           Y02134
*        THE BIT WTGTSENQ IN THE WTG TABLE AT WTGPATHS+1         Y02134
*        WILL BE SET TO 1 INDICATING THAT THE RESOURCE SHOULD    Y02134
*        BE DEQ'ED WHEN THE EOV OR WTG WORK AREA IS FREED.       Y02134
*        IF THIS TASK HAD PREVIOUSLY ACQUIRED THE RESOURCE       Y02134
*        FOR SHARED CONTROL OR EXCLUSIVE CONTROL                 YM3185
*        (AS IN EOV BEING CALLED FROM CLOSE), BIT WTGTSENQ       Y02134
*        IN THE WTG TABLE AT WTGPATHS+1 WILL NOT BE SET TO 1.    Y02134
*
*        IF THE ENQ WAS SUCCESSFUL OR IF THE CALLER HOLDS THE    YM3185
*        TIOT RESOURCE FOR SHARED CONTROL, A RETURN CODE OF ZERO YM3185
*        WILL BE PASSED BACK IN REGISTER 0. IF THE CALLER HOLDS  YM3185
*        THE RESOURCE FOR EXCLUSIVE CONTROL, A RETURN CODE OF    YM3185
*        FOUR WILL BE PASSED BACK IN REGISTER 4.  THIS RETURN    YM3185
*        CODE WILL BE RETURNED TO THE CALLER OF IECRES GET,      YM3185
*        PREFIX=WTG OR PREFIX=EOV.                               YM3185
*
*        UPON ENTRY TO THIS SUBROUTINE RC CONTAINS THE RETURN  @ZA30676
*        ADDRESS.  RB, RC, RET MAY BE USED AS WORK REGISTERS.    Y02134
*        R2 POINTS TO THE START OF THE WTG TABLE OR THE EOV      Y02134
*        WORK AREA.  R1 POINTS TO THE BASE PREFIX.               Y02134
*
RES01850 EQU   *                        ISSUE ENQ ON TIOT        Y02134
         STM   RB,R6,IECREGSV-IECPREFX(R1) SAVE 12 REGISTERS     Y02134
         LA    R3,IECREGSV-IECPREFX+K4*K12(,R1)  POINT TO PARM   Y02134X
                                        LIST IMMEDIATELY AFTER   YM3138X
                                        THE 12 SAVED REGISTERS   YM3138
         USING ENQPARMS,R3              USING ON ENQ PARM LIST   Y02134
         MVC   ENQLIST(ENQLTH),ENQMACRO  MOVE IN LIST FORM       Y02134
         L     RB,CVTPTR                CVT ADDRESS              Y02134
         USING CVT,RB                                            Y02134
         L     RB,CVTTCBP               TCB/ASCB POINTERS        Y02134
         DROP  RB                                                Y02134
         L     RC,K12(,RB)              CURRENT ASCB             Y02134
         USING ASCB,RC                                           Y02134
         MVC   ENQASID,ASCBASID         ASID TO MINOR NAME       Y02134
         DROP  RC                                                Y02134
         L     RB,K4(,RB)               CURRENT TCB              Y02134
         USING TCB,RB                                            Y02134
         L     RB,TCBJSCB               TCB'S JSCB               Y02134
         USING IEZJSCB,RB                                        Y02134
         L     RB,JSCBACT               ACTIVE JSCB              Y02134
         MVC   ENQDSABQ,JSCDSABQ        DSAB QDB TO MINOR NAME   Y02134
         DROP  RB                                                Y02134
         ENQ   (,ENQMIN),MF=(E,ENQLIST)  ENQ TIOT                Y02134
         SR    R0,R0                    SET RETURN CODE 0        YM3185
         LTR   RF,RF                    ENQ SUCCESSFUL           Y02134
         BZ    RES01856                 BRANCH IF YES            Y02134
*
*        RETURN CODE OF 8 SHOULD BE PRESENT                      YM3185
*
         CLI   K3(RF),K8                WAS TIOT PREVIOUSLY      Y02134
*                                       ENQED BY THIS TASK       Y02134
         BNE   ERROR2                   BRANCH IF OTHER ERROR    Y02134
*
*        IF BIT 3 OF THE FIRST BYTE IS SET TO 1, THEN THE TASK   YM5904
*        HOLDS THE RESOURCE SHARED.  IF BIT 3 OF THE FIRST BYTE  YM5904
*        IS SET TO 0, THE TASK HOLDS THE RESOURCE EXCLUSIVELY.   YM5904
*
         TM    K0(RF),X10               TEST IF THE CALLER IS    YM5904X
                                        ENQ'ED EXCLUSIVELY       YM5904
         BO    RES01857                 BRANCH IF ENQ'ED SHARED  YM5904
         LA    R0,K4(,0)                RETURN CODE TO CALLER    YM3185
         B     RES01857                 YES - DON'T SET ENQ BIT  YM1423
RES01856 OI    WTGPATHS+K1,WTGTSENQ     INDICATE ENQ SUCCESSFUL  Y02134
RES01857 EQU   *                        RETURN TO CALLER         YM1423
         XC    ENQLIST(ENQPARML),ENQLIST  ZERO ENQ LIST          Y02134
         DROP  R3                       DROP ENQ LIST POINTER    Y02134
         L     R1,WTGPREFX              LOAD PREFIX POINTER      Y02134
*
*        RESTORE RB - R6 BUT NOT R0, IT CONTAINS RETURN CODE     YM3185
*
         LM    RB,RF,IECREGSV-IECPREFX(R1) RESTORE FIRST 5 REGS  YM3185
*                                       RESTORE LAST 6 REGS      YM3185
         LM    R1,R6,IECREGSV-IECPREFX+(RF+K1-RB+(R1-R0))*K4(R1) YM3185
         LTR   R0,R0                    RET CODE=0 ?           @ZA15963
         BNZ   RES01858                 NO, BRANCH             @ZA15963
         BR    RC                       RETURN TO CALLER       @ZA30676
RES01858 L     R1,WTGPREFX              LOAD PREFIX POINTER    @ZA15963
         STM   R0,RF,IECREGSV-IECPREFX(R1) SAVE REGS           @ZA15963
         L     R2,IECUPRML-IECPREFX(,R1) POINT TO COPY OF PLIST@ZA15963
         L     R2,PLISTDCB(,R2)         LOAD ADDR OF DCB/ACB   @ZA15963
         LR    R3,R2                    POINT R3 TO DCB/ACB    @ZA15963
         USING IHADCB,R2                USE R2 FOR DCB         @ZA15963
         USING IFGACB,R3                USE R3 FOR ACB         @ZA15963
         MODESET EXTKEY=ZERO            KEY ZERO               @ZA15963
         TM    DCBMACRF,DCBMEXCP        EXCP DCB ?             @ZA15963
         BO    RES01859                 YES, BRANCH            @ZA15963
         TM    DCBDSRG2,ACBDORGA        ACB/AMB ?              @ZA15963
         BNO   RES01859                 NO, BRANCH             @ZA15963
         TM    ACBINFLG,ACBCAT+ACBSCRA  VSAM CAT FUNCTION ?    @ZA15963
         BNO   RES01859                 NO, BRANCH             @ZA15963
         DROP  R2,R3                    DROP DCB/ACB REGS      @ZA15963
         MODESET EXTKEY=DATAMGT         OPEN KEY               @ZA15963
         TESTAUTH FCTN=1,KEY=YES,BRANCH=YES                    @ZA15963
         LTR   RF,RF                    AUTHORIZED ?           @ZA15963
         L     R1,WTGPREFX              LOAD PREFIX POINTER    @ZA15963
         LM    R0,RF,IECREGSV-IECPREFX(R1) RESTORE REGS        @ZA15963
         BNZ   RES01861                 NOT AUTHORIZED,BRANCH  @ZA15963
         SR    R0,R0                    RET CODE 0 TO CALLER   @ZA15963
         B     RES01861                 BRANCH TO RETURN       @ZA15963
RES01859 MODESET EXTKEY=DATAMGT         OPEN KEY               @ZA15963
         L     R1,WTGPREFX              LOAD PREFIX POINTER    @ZA15963
         LM    R0,RF,IECREGSV-IECPREFX(R1) RESTORE REGS        @ZA15963
RES01861 BR    RC                       RETURN TO CALLER       @ZA30676
         TITLE 'IFG019RA--OPEN/CLOSE/EOV/DADSM FREEMAIN FACILITY'      *
                                                                 Y02080
***********************************************************************
*                                                                     *
*        FUNCTION PROLOGUE                                            *
*                                                                     *
***********************************************************************
*
* FUNCTION NAME -
*
*        FREEMAIN FACILITY FOR OPEN/CLOSE/EOV/DADSM
*
* FUNCTION -
*
*        THIS ROUTINE HAS TWO FUNCTIONS:  IT CAN FREE A SINGLE
*        WORK AREA, OR IT CAN FREE A CHAIN OF WORK AREAS.
*
*        IECRES FREE UNCHAINS THE WORK AREA BEING RELEASED AND
*        RECHAINS THE REMAINING WORK AREAS, IF NECESSARY.
*
*        IECRES FREE,PREFIX=WTG, =EOV, OR =FIRST DEQUEUES THE
*        TIOT IF IT WAS ENQUEUED DURING THE GETMAIN ROUTINE AND
*        DELETES THE RECOVERY ROUTINE ENVIRONMENT THAT WAS
*        ESTABLISHED AT THAT TIME.  IT THEN RELEASES THE INITIAL
*        WORK AREA AND ALL WORK AREAS CHAINED FROM THE INITIAL
*        WORK AREA.
*
* ENTRY POINTS -
*
*        ENTRY TO THIS MODULE IS MADE BY A DIRECT BRANCH FROM ANY
*        MODULE IN THE COMPONENT.
*              IFG019RA+48 - ENTRY FOR FREEMAIN FACILITY
*              IFG019RA+52 - ENTRY TO FREE PREFIX=WTG, =EOV, OR =FIRST
*
* INPUT -
*
*        REGISTERS -
*        0 - AMOUNT OF STORAGE BEING FREED IF PREFIX=NO
*        1 - ADDR OF PREFIX OR EXTENDED PREFIX OR WORK AREA TO BE FREED
*        2 - SUBPOOL FOR THE AREA IF PREFIX=NO
*        3 - STORAGE PROTECT KEY OF THE AREA IF PREFIX=NO
*        4 - INDEX FOR PREFIX/LOCK STATUS IF PREFIX=YES OR =NO -
*            0 = WORK AREA HAS NO PREFIX/NO LOCAL LOCK HELD
*            1 = WORK AREA HAS A PREFIX/NO LOCAL LOCK HELD
*            2 = WORK AREA HAS A PREFIX/LOCAL LOCK HELD
*            3 = WORK AREA HAS NO PREFIX/LOCAL LOCK HELD
*          - CALLER ID FOR PREFIX=WTG, =EOV, OR =FIRST -
*            0 = PREFIX=WTG
*            1 = PREFIX=WTG FROM THE RECOVERY ROUTINES
*            2 = PREFIX=EOV
*            3 = PREFIX=EOV FROM THE RECOVERY ROUTINES
*            4 = PREFIX=FIRST
*            5 = PREFIX=FIRST FROM THE RECOVERY ROUTINES
*        5 - BASE REGISTER FOR THIS MODULE
*       14 - RETURN ADDRESS OF CALLING MODULE
*       15 - ADDRESS OF THE REGISTER SAVE AREA FOR IECRES FREE ONLY
*
* OUTPUT -
*
*        REGISTERS -
*              8 - PRESERVED FOR THE CALLING MODULE
*              9 - PRESERVED FOR THE CALLING MODULE
*             10 - PRESERVED FOR THE CALLING MODULE
*             14 - RETURN ADDRESS OF THE CALLING MODULE
*             15 - ADDRESS OF A REGISTER SAVE AREA FOR IECRES FREE ONLY
*
***********************************************************************
         EJECT                                                   Y02080
RES01860 LR    R6,RET                   SAVE RETURN              Y02080
         SLL   R3,K4                    00 00 00 KEY0 IF NO PRFX Y02080
         LR    R7,R2                    SP SAVED                 Y02080
         XR    R2,R2                    CLEAR FOR MODESET        YM8350
         MODESET EXTKEY=ZERO,SAVEKEY=(2) KEY 0 AND SAVE THE KEY  Y02080
         SLL   R4,K2                    CONVERT INDEX TO OFFSET  Y02080
         L     R4,RES01801(R4)          GET OPTS                 Y02080
         OR    R4,R2                    SAVE KEY ENTRY IN OPTS   Y02080
*
         LR    RC,R4                    GET OPTION MASK          Y02080
         N     RC,RES01804              TEST FOR LOCK HELD       Y02080
         BNZ   RES01865                 BRANCH IF LOCK HELD      Y02080
RES01864 SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                  Y02080*
               RELATED=(LOCAL,IFG019RA(RES01876))                Y02080
         LTR   RD,RD                    TEST FOR SETLOCK ERROR   Y02080
         BNZ   ERROR1                   BRANCH IF SETLOCK ERROR  Y02080
RES01865 LR    RB,RF                    SAVE REG SAVE AREA ADDR  Y02080
         LR    RD,R1                    SAVE ADDR W/A OR PREFIX  Y02080
         LR    R2,R7                    SAVE SP                  Y02080
         LR    RF,R4                    GET OPTS                 Y02080
         N     RF,RES01802              PREFIX?                  Y02080
         BZ    RES01870                 NO - THEN BR             Y02080
         LA    RC,IECSTART-IECPREFX     GET LENGTH OF BASE PREFX Y02080
         SR    R1,RC                    BACK UP TO BASE PREFX    Y02080
         LR    RD,R1                    POINT TO AREA TO FREE    Y02080
***                                                              Y02080
*        DELINK PREFIX                                           Y02080
***                                                              Y02080
         USING IECPREFX,R1                                       Y02080
RES01866 L     RC,IECCORPS              ADDR OF FIRST PREFIX     Y02080
         CR    R1,RC                    FREEING THE FIRST?       Y02080
         BNE   RES01868                 NO - THEN BR             Y02080
         LR    RD,RC                    SET PTR TO FIRST FOR     Y02080*
                                        FREE ALL                 Y02080
         L     R1,IECCORP1-IECPREFX(,RC) FREE LAST               Y02080
*                                                                Y02080
RES01868 L     RF,IECCORP1              GET NEXT                 Y02080
         L     RC,IECCORP2              GET PREV                 Y02080
         ST    RC,IECCORP2-IECPREFX(,RF) SET PREV TO NEXT        Y02080
         ST    RF,IECCORP1-IECPREFX(,RC) SET NEXT TO PREV        Y02080
***                                                              Y02080
*        SET UP PARAMETER FOR FREEMAIN                           Y02080
***                                                              Y02080
         L     R0,IECCORLN              GET LENGTH               Y02080
         XR    R2,R2                    CLEAR REG FOR FREEMAIN   Y02134
         IC    R2,IECCORSP              GET SP                   Y02080
         XR    R3,R3                    CLEAR REG FOR FREEMAIN   Y02134
         IC    R3,IECCORKY              GET KEY                  Y02080
         DROP  R1                                                Y02080
***                                                              Y02080
*        COMMON FREEMAIN SETUP                                   Y02080
***                                                              Y02080
RES01870 LR    RC,R4                    SAVE MASK-KEY            Y02080
         LR    RF,R2                    SP                       Y02080
         LR    R2,R1                    SAVE ADDR TO FREE        Y02080
         L     R4,CVTPTR                CVT ADDRESS              Y02080
         L     R4,CVTTCBP-CVT(,R4)      TCB/ASCB PTRS            Y02080
         L     R7,K12(,R4)              PTR ASCB                 Y02080
         L     R4,K4(,R4)               PTR CURRENT TCB          Y02080
         FREEMAIN RU,LV=(R0),SP=(RF),KEY=(R3),A=(R1),BRANCH=YES  Y02080
***
*        ANY MORE                                                Y02080
***                                                              Y02080
         LR    R4,RC                    RESTORE MASK & KEY       Y02080
         LR    R1,RD                    SET UP TO FREE NEXT      Y02080
         CR    RD,R2                    DID WE FREE THE LAST ONE Y02080
         BNE   RES01866                 NO - FREE THE NEXT       Y02080
         LR    R2,R4                    GET KEY ON ENDTRY        Y02080
         LR    RF,RB                    RESTR REG SAVE AREA ADR  Y02080
***                                                              Y02080
*        FINISHED                                                Y02080
***                                                              Y02080
         LR    RC,R4                    GET OPTION MASK          Y02080
         N     RC,RES01804              TEST FOR LOCK HELD       Y02080
         BNZ   RES01877                 BRANCH IF LOCK HELD      Y02080
RES01876 SETLOCK RELEASE,TYPE=LOCAL,                             Y02080*
               RELATED=(LOCAL,IFG019RA(RES01864))                Y02080
         LTR   RD,RD                    TEST FOR SETLOCK ERROR   Y02080
         BNZ   ERROR1                   BRANCH IF ERROR          Y02080
RES01877 MODESET KEYADDR=(2),WORKREG=2  RESTORE ENTRY KEY        Y02134
         LR    RET,R6                   RESTORE RET ADDR         Y02080
         BR    RET                      RETURN                   Y02080
         EJECT                                                   YM3138
*
*        FREEMAIN THE EOV WORK AREA, THE OPEN/CLOSE WTG TABLE,
*        OR A FIRST DADSM WORK AREA
*
*        THIS ENTRY DEQS THE TIOT IF IT HAD BEEN ENQED,          Y02134
*        AND THEN BRANCHES TO THE FREEMAIN ROUTINE TO            Y02134
*        PERFORM THE FREEMAIN.                                   Y02134
*
*        UPON ENTRY FOR PREFIX=EOV OR =WTG, REGISTER 1 POINTS    Y02134
*        TO THE EXTENDED PREFIX OF THE EOV WORK AREA OR THE WTG  Y02134
*        TABLE.  THUS THE WTG TABLE CAN BE LOCATED FROM THE      Y02134
*        IECWTGTB ADDRESS IN THE EXTENDED PREFIX.                Y02134
*
*        THE WTGTSENQ BIT IN WTGPATHS+1 INDICATES WHETHER        Y02134
*        A DEQ NEED BE DONE. IF WTGTSENQ IS SET TO ONE,          Y02134
*        A DEQ IS ISSUED. OTHERWISE NO DEQ IS PERFORMED.         Y02134
*        FOR PREFIX=FIRST, CONTROL BRANCHES AROUND THE DEQ.      Y02134
*
*        REGISTERS 6, 7, 11, 12, AND 13 CAN BE USED AS WORK      Y02134
*        REGISTERS, BUT REGS 0-5, 8-9, 14-15 MUST NOT BE ALTERED Y02134
*        WITHOUT BEING RESTORED.                                 Y02134
*
RES01879 DS    0F                       FREEMAIN BXLE MASKS      Y02080
         DC    X'00000000'              WTG FREEMAIN             Y02080
         DC    X'20000000'              WTG RECOVERY FREEMAIN    Y02080
         DC    X'00000000'              EOV FREEMAIN             Y02080
         DC    X'20000000'              EOV RECOVERY FREEMAIN    Y02080
         DC    X'40000000'              FIRST FREEMAIN           Y02080
         DC    X'60000000'              FIRST RECOVERY FREEMAIN  Y02080
*
RES01880 EQU   *                        LOAD BXLE MASK           Y02134
         LA    RB,K1                    SET ARG FOR BXLE         Y02080
         SLL   R4,K2                    MULTIPLY BY FOUR         Y02134
         O     RB,RES01879(R4)          OR IN BXLE MASK          Y02080
         BXLE  RB,RB,RES01885           BRANCH AROUND DEQ        Y02080
         USING IECEXTPR,R1              R1 POINTS TO EXT PREFIX  Y02134
         L     R7,IECWTGTB              R7 POINTS TO WTG TABLE   Y02134X
                                        OR TO DXXWTG             Y02134
         TM    WTGPATHS-WTG+K1(R7),WTGTSENQ  IS DEQ NEEDED       Y02134
         BZ    RES01885                 BRANCH IF NOT TO FREE    Y02134X
                                        ENTRY                    Y02134
         LA    R7,IECREGSV              DEQ WORK AREA            Y02134
         USING DEQPARMS,R7              USE REG SAV AREA FOR DEQ Y02134
         L     R4,CVTPTR                CVT ADDRESS              Y02134
         USING CVT,R4                                            Y02134
         L     R4,CVTTCBP               TCB PTR WORDS            Y02134
         L     RC,K12(,R4)              CURRENT ASCB             Y02134
         USING ASCB,RC                                           Y02134
         MVC   DEQASID,ASCBASID         MOVE ASID TO MIN NAME    Y02134
         L     R4,K4(,R4)               CURRENT TCB              Y02134
         USING TCB,R4                                            Y02134
         L     R4,TCBJSCB               TCB'S JSCB               Y02134
         USING IEZJSCB,R4                                        Y02134
         L     R4,JSCBACT               ACTIVE JSCB ADDR         Y02134
         MVC   DEQDSABQ,JSCDSABQ        MOVE DSAB QDB ADDR TO    Y02134X
                                        MINOR NAME               Y02134
         DROP  R1,R4,RC                 DROP REGISTER USAGE      YM3198
         MVC   DEQLIST(DEQLTH),DEQMACRO  MOVE IN LIST FORM       Y02134
         LR    R4,R0                    SAVE R0                  Y02134
         LR    RC,R1                    SAVE R1                  Y02134
         LR    R6,RET                   SAVE RET                 Y02134
         LR    RD,RF                    SAVE RF                  Y02134
         DEQ   (,DEQMIN),MF=(E,DEQLIST) DEQ TIOT                 Y02134
         LR    R0,R4                    RESTORE R0               Y02134
         LR    R1,RC                    RESTORE R1               Y02134
         LR    RET,R6                   RESTORE RET              Y02134
         LR    RF,RD                    RESTORE RF               Y02134
         DROP  R7                                                Y02134
RES01885 BXLE  RB,RB,RES01890           BRANCH AROUND ESTAE      Y02080
         LR    R4,R0                    SAVE R0                  Y02080
         LR    RC,R1                    SAVE R1                  Y02080
         LR    R6,RET                   SAVE RET                 Y02080
         LR    RD,RF                    SAVE RF                  Y02080
         ESTAE 0                                                 Y02080
         LR    R0,R4                    RESTORE R0               Y02080
         LR    R1,RC                    RESTORE R1               Y02080
         LR    RET,R6                   RESTORE RET              Y02080
         LR    RF,RD                    RESTORE RF               Y02080
RES01890 EQU   *                        FREEMAIN ROUTINE         Y02080
         LA    R4,K1                    LOAD FREEMAIN BXLE MASKS Y02080
         B     RES01860                 BRANCH TO FREE CORE      Y02080
         TITLE 'IFG019RA--OPEN/CLOSE/EOV/DADSM LOAD FACILITY'   Y02080
***********************************************************************
*                                                                     *
*        FUNCTION PROLOGUE                                            *
*                                                                     *
***********************************************************************
*
* FUNCTION NAME -
*
*        LOAD FACILITY FOR OPEN/CLOSE/EOV/DADSM
*
* FUNCTION -
*
*        THERE ARE 3 LOAD FUNCTIONS - BRANCH=QUEUED, =DIRECT, AND =NO.
*
*        IECRES LOAD,BRANCH=QUEUED IS USED BY OPEN AND CLOSE WHEN
*        CONTROL IS TO BE PASSED TO ANOTHER OPEN OR CLOSE MODULE.
*        IT FIRST RESETS THE WAIT BIT.  THEN, IF A GTF TRACE WAS
*        REQUESTED, IT GIVES CONTROL TO THE TRACE ROUTINE (IFG019TR).
*        IT THEN LOOKS FOR A WTG TABLE ENTRY WITH THE CALLING MODULE'S
*        ID.  IF FOUND, IT GIVES IT CONTROL.  OTHERWISE, IT FINDS
*        THE MODULE ID WITH THE LOWEST COLLATING SEQUENCE AMONG THE
*        WTG TABLE ENTRIES AND GIVES IT CONTROL.
*
*        IECRES LOAD,BRANCH=DIRECT OR BRANCH=NO FIRST LOCATES THE
*        ENTRY POINT ADDRESS OF THE MODULE SPECIFIED IN WTGMODNM.
*        IF WTGMODEP IS ZERO, IT BRANCHES TO THE ACTIVE LPA SEARCH
*        SERVICE ROUTINE (IEAQCDSR) AND POSSIBLY TO THE LPA SEARCH
*        SERVICE ROUTINE (IEAVVMSR) TO FIND THE ENTRY POINT ADDRESS.
*        IF NEITHER OF THESE ROUTINES CAN LOCATE THE MODULE, IT
*        ISSUES THE LOAD MACRO.  FOR BRANCH=DIRECT, CONTROL IS
*        PASSED TO THE SPECIFIED MODULE.  FOR BRANCH=NO, CONTROL IS
*        RETURNED TO THE CALLING MODULE WITH THE EPA IN WTGMODEP.
*
*        BEFORE PERFORMING THE LOAD, A TEST IS MADE TO DETERMINE IF
*        THE WTGMODEP FIELD IS NON-ZERO.  IF SO, IT IS ASSUMED THAT
*        THE EPA IS ALREADY KNOWN AND CONTROL WILL RETURN
*        IMMEDIATELY TO THE CALLING MODULE.  IF THE CALL TO LOAD
*        HAS COME FROM THE SELECT-LOAD OR LOAD AND BRANCH ENTRY OF
*        THIS MODULE, THIS WILL RESULT IN A BRANCH TO THE ADDRESS
*        IN 'WTGMODEP'.
*
* ENTRY POINTS -
*
*        ENTRY TO THIS MODULE IS MADE BY A DIRECT BRANCH FROM ANY
*        MODULE IN THE COMPONENT.
*              IFG019RA+4  - ENTRY FOR SELECTIVE LOAD AND BRANCH
*                            FACILITY (BRANCH=QUEUED)
*              IFG019RA+20 - ENTRY FOR LOAD AND BRANCH FACILITY
*              IFG019RA+24 - ENTRY FOR LOAD AND RETURN FACILITY
*
* INPUT -
*
*        REGISTERS -
*        5 - BASE REGISTER FOR THIS MODULE
*        6 - POINTER TO (PSEUDO) WHERE-TO-GO TABLE
*       14 - RETURN ADDRESS OF CALLING MODULE
*       15 - PTR TO PREFIX OF A WORK AREA WHERE REGISTERS MAY
*            BE SAVED, PRESERVED FOR THE CALLING MODULE.
*
*        STORAGE -
*        THE FIELD 'WTGMODNM' MUST CONTAIN THE NAME (PADDED WITH
*        BLANKS) OF THE CSECT TO RECEIVE CONTROL.
*        THE FIELD 'WTGMODEP' MUST BE ZERO IN ORDER TO GET THE
*        GIVEN MODULE LOADED.
*
* OUTPUT -
*
*        THE OUTPUT OF THIS FUNCTION IS THE ENTRY POINT ADDRESS TO
*        THE MODULE WHOSE NAME IS IN 'WTGMODNM'.  FOR BRANCH=NO,
*        THIS ADDRESS IF PLACED IN THE FIELD 'WTGMODEP'.  HOWEVER,
*        FOR BRANCH=DIRECT, REGISTER 15 CONTAINS THE ENTRY POINT
*        ADDRESS, AND 'WTGMODEP' IS ZERO.
*
***********************************************************************
         EJECT                                                   Y02080
**************************************************************** Y02080
*                                                                Y02080
* ENTRY FOR LOAD,BRANCH=QUEUED                                   Y02080
*                                                                Y02080
**************************************************************** Y02080
*                                                                Y02080
         USING FORCORE,RCORE            WORK AREA                Y02080
RES01900 EQU   *                        RESET WAIT, PSEUDO-WAIT  YM3138
         MVI   DXRESIND,K0              ENSURE WAIT, PSEUDO-WAIT OFF
RES02000 EQU   *                        TEST IF TRACE REQUIRED   YM3138
         BAL   R7,RES03000              GO SAVE REGISTERS        Y02080
         TM    WTGPATHS+K1,WTGTRACE     IS TRACE RTN SPECIFIED   YM3138
         BNO   RES02100                 NO, SKIP TRACE
         TM    JFCBMASK+K6,JFCTRACE     IS TRACE REQUESTED FOR THIS DCB
         BNO   RES02100                 NO, SKIP TRACE
         L     RTIOT,WTGPREFX           GET PTR TO PREFIX        Y02080
         USING IECPREFX,RTIOT                                    Y02080
         L     RTIOT,IECRESWA           GET PTR TO RES WORK AREA Y02080
         USING RWARESWA,RTIOT                                    Y02080
         L     RF,RWATRACE              LOAD TRACE ROUTINE ADDR  YM4623
         LTR   RF,RF                    TEST IF THIS ADDR EXISTS YM4623
         BZ    RES02100                 BRANCH IF NOT            YM4623
         DROP  RTIOT                                             Y02080
         BALR  RET,RF                   GO TO TRACE RTN TO TRACE YM3138X
                                        THIS DCB AND RETURN      YM3138
*
* RETURN FROM THE OPTIONAL TRACE ROUTINE
*
RES02100 EQU   *                        GO INITIALIZE REGISTERS  YM3138
         BAL   RET,RES03100             GO INITIALIZE REGISTERS
*
* SCAN DCB'S FOR A DCB ACTIVE IN THIS MODULE.  IF ONE IS FOUND, LET
* WAIT SECTION HANDLE IT.
*
RES02200 EQU   *                        FIND AN ACTIVE DCB       YM3138
         CLC   WTGMODID,WTGIDTTR        IS THIS DCB ACTIVE       Y02080X
                                        (MODULE ID'S EQUAL)
         BE    RES00600                 YES, LET WAIT SECTION HANDLE IT
         TM    PLISTOPT(RPARC),LASTNTRY  NO, IS THIS LAST PARAMETER
*                                       LIST ENTRY
         BO    RES02300                 YES, NONE ACTIVE, GO INITIALIZE
         BAL   RET,RES03200             NO, INCREMENT TO NEXT DCB
         B     RES02200                 GO LOOP TO CHECK NEXT DCB
RES02300 EQU   *                        GO INITIALIZE            YM3138
         BAL   RET,RES03100             INITIALIZE
         MVI   WTGMODID,HIGHID          SET HIGH ID IN WTG TABLE
*                                       BASIC SECTION SO PRESENT
*                                       MODULE IN BASIC SECTION WILL
*                                       NOT BE LOWEST ID.
*
* SCAN DCB'S TO FIND LOWEST NEXT MODULE ID.  COMPARE NEXT MODULE
* ID IN WTG ENTRY WITH THAT IN WTG BASIC SECTION.  IF ID IN ENTRY
* IS SMALLER, GO MOVE IT INTO BASIC SECTION.  WHEN FINISHED (LAST
* PARAMETER LIST ENTRY), GO EXIT VIA LOAD.
*
RES02400 EQU   *                        TEST FOR AN ACTIVE DCB   YM3138
         CLC   WTGMODID,WTGIDTTR        IS THIS DCB ACTIVE       Y02080
         BL    RES02500                 YES, GO LOOP
         CLI   WTGIDTTR,CHAR00          IS MOD ID BINARY ZEROS IN      X
                                        ENTRY (IGNORED DCB)
         BE    RES02500                 YES, DO NOT MOVE MOD ID TO     X
                                        BASIC SECTION OF WTG TABLE
*
* MOVE NEXT ID AND TTR FROM WTG TABLE ENTRY TO WTG TABLE BASIC SECTION.
*
         MVC   WTGMODID,WTGIDTTR        MOVE MODULE ID FROM WTG        X
                                        ENTRY TO WTG BASIC SECTION
         MVC   WTGMODEP+K1(K3),WTGIDTTR+L'WTGMODID  MOVE MODULE  Y02080X
                                        VCON FROM WTG ENTRY TO   Y02080X
                                        WTG BASIC SECTION        Y02080
RES02500 EQU   *                        TEST FOR LAST PARM LIST ENTRY
         TM    PLISTOPT(RPARC),LASTNTRY  IS THIS LAST PARM LIST ENTRY
         BO    RES02600                 YES, GO EXIT VIA LOAD    Y02080X
                                        NO, COMPARE MODULE ID'S
         BAL   RET,RES03200             GO INCREMENT TO NEXT DCB
         B     RES02400                 GO LOOP
*
* FIND THE FIRST ACTIVE DCB AND EXIT VIA LOAD                    Y02080
*
RES02600 EQU   *                        GO INITIALIZE REGISTERS  YM3138
         BAL   RET,RES03100             INITIALIZE
RES02700 EQU   *                        TEST FOR AN ACTIVE DCB   YM3138
         CLC   WTGMODID,WTGIDTTR        IS THIS DCB ACTIVE       Y02080
         BE    RES02750                 YES, GO LOAD             Y02080
         BAL   RET,RES03200             NO, GO INCREMENT TO NEXT DCB
         B     RES02700                 GO LOOP TO CHECK NEXT DCB
RES02750 EQU   *                        GET ACTIVE DCB'S ADDRESS Y02080
         L     RDCB,0(,RPARC)           GET DCB ADDRESS FROM PARAMETER X
                                        LIST ENTRY
         LM    RTIOT,RET,DXREG9         RESTORE REGISTERS 9 - 14 Y02080
         LM    R0,R1,DXREG0             RESTORE REGISTERS 0 & 1  Y02080
         L     RF,WTGPREFX              GET WHERE-TO-GO PREFIX   Y02080
         USING IECPREFX,RF              ADDRESS PREFIX WITH R15  Y02080
         STM   R0,RET,IECREGSV          SAVE REGISTERS           Y02080
         DROP  RF                                                Y02080
*                                                                Y02080
* FALL THROUGH INTO LOAD-AND-BRANCH ROUTINE                      Y02080
*                                                                Y02080
         EJECT                                                   Y02080
**************************************************************** Y02080
*                                                                Y02080
* ENTRY FOR LOAD,BRANCH=DIRECT                                   Y02080
*                                                                Y02080
**************************************************************** Y02080
*                                                                Y02080
RES02800 ST    RET,IECREGSV-IECPREFX+K4*RET(,RF)  SAVE REG 14    Y02134
         BAL   RET,RES02810             GO LOAD INDICATED MODULE Y02080
         USING IECPREFX,RA              RET POINTS TO PREFIX     Y02080
         L     RF,WTGMODEP              LOAD CSECT ENTRY POINT   Y02080
         XC    WTGMODEP,WTGMODEP        ZERO EPA FOR REUSE       Y02080
         LM    R0,RET,IECREGSV          RESTORE REGISTERS        Y02080
         BR    RF                       BRANCH TO LOADED MODULE  Y02080
         DROP  RA                                                Y02080
         EJECT                                                   Y02080
**************************************************************** Y02080
*                                                                Y02080
* ENTRY FOR LOAD,BRANCH=NO                                       Y02080
*                                                                Y02080
**************************************************************** Y02080
*                                                                Y02080
RES02810 EQU   *                        ENTRY FOR LOAD FUNCTION  Y02080
         LR    R4,RET                   SAVE RETURN POINT        Y02080
         LR    RA,RF                    SAVE POINTER TO PREFIX   Y02080
**************************************************************** Y02080
*                                                                Y02080
* THE FOLLOWING INSTRUCTION IS A MODIFIABLE NOP BRANCH TO A WTO  Y02080
* MODULE TRACE ROUTINE.                                          Y02080
*                                                                Y02080
* CHANGE THIS INSTRUCTION TO AN UNCONDITIONAL BRANCH X'47F0' TO  Y02080
* ENABLE THE MODULE TRACE.  THE ADDRESS OF THIS MODULE MAY BE    Y02080
* FOUND IN THE CVT WORD CVTDMSR AT CVT OFFSET X'110'.            Y02080
*                                                                Y02080
* FURTHER DESCRIPTION PRECEDES THE WTO MODULE TRACE ROUTINE.     Y02080
*                                                                Y02080
**************************************************************** Y02080
RESTRACE NOP   RES03300                 GO TO MODULE TRACE RTN   Y02134
RES02820 EQU   *                        RETURN FROM MOD TRACE    Y02080
         L     R0,WTGMODEP              GET EPA                  Y02080
         LTR   R0,R0                    TEST IF EPA IS KNOWN     Y02080
         BNZ   RES02960                 YES, BYPASS LOAD         Y02080
*
         MODESET EXTKEY=ZERO,SAVEKEY=(2)                         Y02080
RES02830 EQU   *                        OBTAIN LOCAL LOCK        Y02080
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                  Y02080*
               RELATED=(LOAD,IFG019RA(RES02885,RES02860))        Y02080
         LTR   RD,RD                    TEST FOR SETLOCK ERROR   Y02080
         BNZ   ERROR1                   BRANCH IF ERROR          Y02080
RES02840 EQU   *                        OBTAIN CMS LOCK          Y02080
         SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,                    Y02080*
               RELATED=(LOAD,IFG019RA(RES02850,RES02870))        Y02080
         LTR   RD,RD                    TEST FOR SETLOCK ERROR   Y02080
         BNZ   ERROR1                   BRANCH IF ERROR          Y02080
*                                                                Y02080
*  CALL IEAQCDSR - ACTIVE LPA SEARCH SERVICE ROUTINE             Y02080
*                                                                Y02080
*        ENTRY                                                   Y02080
*              R8 - ADDRESS OF QUEUE TO SCAN                     Y02080
*              R9 - ADDRESS OF ENTRY POINT NAME                  Y02080
*              R14 - RETURN ADDRESS                              Y02080
*                                                                Y02080
*        EXIT                                                    Y02080
*              R0-R1 - ENTRY POINT NAME                          Y02080
*              R11 - ADDRESS OF CDE OR ZERO                      Y02080
*              R15 - SCRATCHED                                   Y02080
*                                                                Y02080
*              RETURN R14 + 0 IF EP FOUND                        Y02080
*                     R14 + 4 IF EP NOT FOUND                    Y02080
*                                                                Y02080
         L     R3,CVTADDR               LOAD CVT ADDRESS         Y02080
         L     R8,CVTQLPAQ-CVT(,R3)     LPAQ - CDES              Y02080
         LR    R9,RWTG                  ADDRESS OF EP NAME       Y02080
         L     RF,CVTQCDSR-CVT(,R3)     ADDRESS OF IEAQCDSR RTN  Y02080
         BALR  RET,RF                   LPA CDE SEARCH           Y02080
         B     RES02870                 BR RET IF CDE FOUND      Y02080
*                                                                Y02080
*  CALL IEAVVMSR - LPA SEARCH (LPDES) SERVICE ROUTINE            Y02080
*                                                                Y02080
*        ENTRY                                                   Y02080
*              R0-R1 - ENTRY POINT NAME                          Y02080
*              R3 - CVT ADDRESS                                  Y02080
*              R14 - RETURN ADDRESS                              Y02080
*                                                                Y02080
*        EXIT                                                    Y02080
*              R0 - ADDRESS OF LPDE OR ZERO                      Y02080
*              R6-R9 - SCRATCHED                                 Y02080
*                                                                Y02080
*              RETURN R14 + 0 - LPDE FOUND                       Y02080
*                     R14 + 4 - LPDE NOT FOUND                   Y02080
*                                                                Y02080
RES02850 EQU   *                        RELEASE CMS LOCK         Y02080
         SETLOCK RELEASE,TYPE=CMS,                               Y02080*
               RELATED=(LOAD,IFG019RA(RES02840))                 Y02080
         LTR   RD,RD                    TEST FOR SETLOCK ERROR   Y02080
         BNZ   ERROR1                   BRANCH IF SETLOCK ERROR  Y02080
         LR    RC,RWTG                  SAVE REGISTER 6          Y02080
         L     RF,CVTLPDSR-CVT(,R3)     ADDRESS OF IEAVVMSR RTN  Y02080
         BALR  RET,RF                   PAGEABLE LPA SEARCH      Y02080
         B     RES02880                 LPDE FOUND               Y02080
*                                                                Y02080
*  AS A LAST RECOURSE TRY A LOAD                                 Y02080
*                                                                Y02080
RES02860 EQU   *                        RELEASE LOCAL LOCK       Y02080
         LR    RWTG,RC                  RESTORE REGISTER 6       Y02080
         SETLOCK RELEASE,TYPE=LOCAL,                             Y02080*
               RELATED=(LOAD,IFG019RA(RES02830))                 Y02080
         LTR   RD,RD                    TEST FOR SETLOCK ERROR   Y02080
         BNZ   ERROR1                   BRANCH IF SETLOCK ERROR  Y02134
         MODESET KEYADDR=(2),WORKREG=2  RESTORE KEY              Y02080
         L     R1,CVTPTR                LOAD CVT ADDRESS         YM1280
         L     R1,CVTSVDCB-CVT(,R1)     GET SYS1.SVCLIB DCB ADDR YM1451
         LOAD  EPLOC=WTGMODNM,DCB=(1)   ISSUE LOAD TO FIND IT    YM1280
         B     RES02950                 RETURN TO CALLING MODULE Y02080
*                                                                Y02080
*  CDE IN REGISTER 11                                            Y02080
*                                                                Y02080
RES02870 EQU   *                        CDE FOUND                Y02080
         L     R0,CDENTPT-CDENTRY(,RB)  MODULE ENTRY POINT       Y02080
         SETLOCK RELEASE,TYPE=CMS,                               Y02080*
               RELATED=(LOAD,IFG019RA(RES02840))                 Y02080
         LTR   RD,RD                    TEST FOR SETLOCK ERROR   Y02080
         BNZ   ERROR1                   BRANCH IF SETLOCK ERROR  Y02134
         B     RES02885                 CONTINUE                 Y02080
*                                                                Y02080
*  LPDE IN REGISTER 0                                            Y02080
*                                                                Y02080
RES02880 EQU   *                        LPDE FOUND               Y02080
         LR    RWTG,RC                  RESTORE WTG REGISTER     Y02134
         LR    R1,R0                    SAVE LPDE ADDRESS        Y02080
         L     R0,LPDENTP-LPDE(,R1)     EPA IN REGISTER 0        Y02080
RES02885 EQU   *                        RELEASE LOCAL LOCK       Y02080
         SETLOCK RELEASE,TYPE=LOCAL,                             Y02080*
               RELATED=(LOAD,IFG019RA(RES02830))                 Y02080
         LTR   RD,RD                    TEST FOR SETLOCK ERROR   Y02134
         BNZ   ERROR1                   BRANCH IF SETLOCK ERROR  Y02134
RES02950 EQU   *                        RESTORE KEY              Y02080
         MODESET KEYADDR=(2),WORKREG=2  RESTORE KEY              Y02080
RES02960 EQU   *                        STORE MODULE EPA         Y02080
         ST    R0,WTGMODEP              STORE MODULE EPA         Y02080
         LR    RET,R4                   RESTORE RETURN POINT     Y02080
         LR    RF,RA                    RESTORE POINTER TO PREFX Y02080
         CLC   WTGMODNM,STOPNAME        CHECK IF MOD TO STOP ON  Y02080
         BNE   RES02965                 NO, THEN SKIP NOP        Y02080
         CNOP  0,8                      ALIGN NOP'S ON DOUBLEWD  YM4623
RESTRAC1 LR    RF,RF                    TWO BYTES OF LOGICAL NOP YM1280
         LR    RF,RF                    TWO MORE BYTES OF NOP    YM4623
         LR    RF,RF                    TWO MORE BYTES OF NOP    YM1280
         LR    RF,RF                    LAST TWO BYTES OF NOP    YM4623
RES02965 EQU   *                        RETURN TO CALLING MODULE Y02080
         BR    RET                      RETURN TO CALLING MODULE Y02080
     TITLE 'IFG019RA--OPEN/CLOSE/EOV REGISTER INITIALIZATION'    Y02080
***********************************************************************
*                                                                     *
* ROUTINE TO SAVE REGISTERS                                           *
*                                                                     *
***********************************************************************
*
RES03000 EQU   *                        SAVE REGISTERS IN WORK AREA
         STM   RTIOT,RET,DXREG9         SAVE REGISTERS 9 THROUGH 14    X
                                        IN THE WORK AREA.
         STM   R0,R1,DXREG0             SAVE REGISTERS 0 AND 1 IN THE  X
                                        WORK AREA.
         BR    R7                       RETURN
***********************************************************************
*                                                                     *
* ROUTINE TO INITIALIZE WTG TABLE ENTRY PTR, PARAMETER LIST ENTRY     *
* PTR, SERVICE ROUTINE WORK AREA ADDRESS, AND WORK AREA ADDRESS       *
*                                                                     *
***********************************************************************
*
         DROP  RWTGC                                             YM1105
RES03100 EQU   *                        INITIALIZE REGISTERS     YM3138
         L     RTIOT,WTGPREFX           GET PTR TO PREFIX        Y02080
         USING IECPREFX,RTIOT                                    Y02080
         L     RPARC,IECUPRML           PARAMETER LIST ADDRESS   Y02080
         L     RTIOT,IECRESWA           GET PTR TO RES WORK AREA Y02080
         USING RWARESWA,RTIOT                                    Y02080
         LA    RTIOT,RWALIST            INITIALIZE ECB LIST PTR  Y02080
         DROP  RTIOT                                             Y02080
         LA    RWTGC,WTGENTRY           PTR TO FIRST WTG ENTRY
         USING WTGENTRY,RWTGC           WTG TABLE ENTRY ADDR
         L     RCORE,WTGCORE-K1         PTR TO WORK AREA FROM THIS     X
                                        DCB'S WTG ENTRY
         BR    RET                      RETURN
***********************************************************************
*                                                                     *
* ROUTINE TO INCREMENT TO THE NEXT DCB THE PARAMETER LIST ENTRY AND   *
* THE WTG TABLE ENTRY, AND GET THE WORK AREA ADDRESS OF THAT DCB.     *
*                                                                     *
***********************************************************************
*
RES03200 EQU   *                        INCREMENT RPARC AND RWTGC
         LA    RPARC,K4(,RPARC)         INCREMENT TO NEXT PARAMETER    X
                                        LIST ENTRY
         LA    RWTGC,L'WTGENTRY(,RWTGC)  INCREMENT TO NEXT WTG TABLE   X
                                        ENTRY
         L     RCORE,WTGCORE-K1         PTR TO WORK AREA FROM THIS     X
                                        DCB'S WTG ENTRY
         BR    RET                      RETURN
         TITLE 'IFG019RA--OPEN/CLOSE/EOV/DADSM SERVICE ROUTINE'  YM3138
***********************************************************************
*                                                                     *
*        WTO MODULE TRACE ROUTINE                                     *
*                                                                     *
* THIS ROUTINE ISSUES A WRITE TO OPERATOR OF THE NAME OF THE          *
* MODULE THAT WILL BE LOADED NEXT.                               Y02080
*                                                                     *
* FOR ALL OPEN/CLOSE/EOV/DADSM MODULES ISSUING THE IECRES LOAD MACRO, *
* THE NAME OF THE MODULE BEING LOADED MAY BE TRACED.                  *
*                                                                     *
* THIS TRACE ROUTINE MAY BE ENABLED BY CHANGING THE NOP BRANCH        *
* INSTRUCTION AT LABEL RESTRACE TO AN UNCONDITIONAL BRANCH            *
* X'47F0'.  THE ADDRESS OF THIS MODULE MAY BE FOUND IN THE CVT        *
* WORD NAMED CVTDMSR AT CVT OFFSET X'110'.                            *
*                                                                     *
* THE EIGHT BYTE MESSAGE IS ROUTED TO THE CONSOLE OPERATOR.      Y02080
*                                                                     *
* NOTE THAT A SIMULTANEOUS TRACE OF MORE THAN ONE TASK WILL TEND Y02080
* TO GIVE A CONFUSING TRACE.  IT WOULD BE BETTER TO MAKE SURE    Y02080
* THAT ONLY ONE TASK IS RUNNING WHEN THE TRACE IS USED.          Y02080
*                                                                     *
* IF SMF IS ACTIVE, EOV MAY TRANSFER CONTROL TO SEVERAL CLOSE    Y02080
* MODULES IN ORDER TO PROCESS SMF RECORDS. THIS RESULTS IN CLOSE Y02080
* MODULE NAMES APPEARING BETWEEN EOV MODULE NAMES.               Y02080
*                                                                Y02080
* AT THE TIME THIS MODULE TRACE ROUTINE GAINS CONTROL, REGISTER  Y02080
* CONTENTS ARE AS FOLLOWS--                                      Y02080
*    REG  5 - BASE REGISTER FOR IFG019RA                         Y02080
*    REG  6 - WHERE-TO-GO TABLE ADDRESS (FIRST EIGHT BYTES       Y02080
*             CONTAIN THE MODULE NAME BEING LOADED).             Y02080
*                                                                Y02080
***********************************************************************
*
RES03300 EQU   *                        ENTRY TO TRACE ROUTINE   S21940
         LA    R1,WTGMODNM              GET ADDR OF MODULE NAME  Y02080
         SH    R1,FOUR                  BACK UP FOUR BYTES       Y02080
         WTO   MF=(E,(1))               ISSUE MESSAGE            Y02080
         B     RES02820                 RETURN TO LOAD           Y02080
         EJECT                                                   YM1360
**************************************************************** Y02144
*                                                                Y02144
*        ROUTINE TO ESTABLISH THE RECOVERY ENVIRONMENT           Y02144
*                                                                Y02144
*        THE INPUT REGISTERS TO THIS ROUTINE ARE:                Y02144
*        R1 POINTS TO THE MAIN WORK AREA PREFIX.                 Y02144
*        RC CONTAINS THE RETURN ADDRESS.                         Y02144
*        RET POINTS TO THE NAME OF THE RECOVERY MODULE.          Y02144
*        RF POINTS TO THE CALLER'S REGISTER SAVE AREA.           Y02144
*                                                                Y02144
**************************************************************** Y02144
*                                                                Y02144
RES06000 EQU   *                        ESTABLISH RECOVERY ENV   Y02144
         USING IECPREFX,R1                                       Y02144
         L     RWTG,IECWTGTB            GET PTR TO WTG TABLE     Y02144
         LR    RD,RF                    SAVE CALLER'S REGISTER   Y02144
*                                       SAVE AREA POINTER        Y02144
         IECRES LOAD,PREFIX=(R1),MODNM=(RET),BRANCH=NO           Y02144*
                                        GET RECOVERY RTN ADDR    Y02144
         LR    R4,R1                    SAVE PREFIX ADDRESS      Y02144
         L     RET,WTGMODEP             RECOVERY RTN ADDR IN RET Y02144
         L     R7,IECRRPRM              GET PTR TO RRPLIST       Y02144
         USING RRPLIST,R7                                        Y02144
         MVC   RRPLIST+K4(ESTAELN),RESESTAE  MOVE ESTAE LIST     Y02144
*                                       FORM TO DSECT CORE       Y02144
         CLC   WTGMODNM,RR0F            ENTRY FROM IFG0RR0A      Y02144
         BNE   RES06100                 BRANCH IF NOT            Y02144
         MVC   IECRRPRM,IECRRPRM-IECPREFX(RD)  RESET ADDRESS OF  Y02144
*                                       RECOVERY PARMLIST TO THE Y02144
*                                       RRPLIST PTR IN EXISTENCE Y02144
*                                       UPON ENTRY TO IFG0RR0A   Y02144
RES06100 EQU   *                        ISSUE ESTAE              Y02144
         XC    WTGMODNM(K12),WTGMODNM   CLEAR MODULE NAME + EPA  Y02144
         LA    R1,RRPLIST+K4            POINT TO ESTAE LIST      Y02144
*                                                                Y02144
         ESTAE (RET),CT,PARAM=(R4),XCTL=YES,PURGE=NONE,          Y02144*
               ASYNCH=YES,TERM=YES,RECORD=NO,MF=(E,(1))          Y02144
*                                                                Y02144
         LR    R1,R4                    RESTORE PREFIX ADDRESS   Y02144
         XC    RRPLIST+K4(ESTAELN),RRPLIST+K4  CLEAR ESTAE LIST  Y02144
         LM    R0,RET,IECREGSV          RESTORE REGISTERS        Y02144
         LR    RF,RD                    RESTORE CALLER'S REG     Y02144
*                                       SAVE AREA POINTER        Y02144
         DROP  R1,R7                                             Y02144
         BR    RC                       RETURN                   Y02144
***                                                              Y02144
* LIST FORM OF ESTAE MACRO FOR ESTABLISHING RECOVERY ENVIRONMENT Y02144
***                                                              Y02144
RESESTAE ESTAE ,CT,PURGE=NONE,                                   Y02144X
               ASYNCH=YES,TERM=YES,RECORD=NO,MF=L                Y02144
ESTAELN  EQU   *-RESESTAE               LENGTH OF ESTAE LIST     Y02144
         EJECT                                                   Y02144
*********************************************************************
* THIS SECTION ESTABLISHES THE BASE REGISTER FOR THE ROUTINES    YM1360
* IN THE SECOND PAGE OF IFG019RA.                                YM1360
*********************************************************************
*
RES07000 EQU   *                        DCB INIT/COPY ENTRY      YM3138
         L     RES,RESPAGE2             LOAD ADDRESS OF PAGE 2   YM1360
         B     K0(,RES)                 BRANCH TO INIT/COPY RTN  YM3138
*
         TITLE 'IFG019RA--OPEN/CLOSE/EOV USER EXIT FACILITY'     YM1360
***********************************************************************
*
*        USER EXIT INTERFACE FOR OPEN/CLOSE/EOV                  Y02082
*
* REGISTERS -
*
*        THE REGISTERS ON ENTRY ARE:                             Y02082
*        0 & 1 VALUES TO BE PASSED TO USER EXIT                  Y02082
*        1     VALUE TO BE PASSED TO USER EXIT                   Y02082
*        2     MAY BE ADDRESS OF REGISTER SAVE AREA OF CALLER    Y02082
*        4     ADDRESS OF OPEN/CLOSE/EOV WORK AREA               Y02082
*        5     BASE REGISTER                                     YM3138
*        14    RETURN ADDRESS OF CALLER                          Y02082
*        15    ADDRESS OF USER EXIT ROUTINE                      Y02082
*
*        ON EXIT REGISTER 15 CONTAINS THE RETURN CODE FROM THE   Y02082
*        USER EXIT ROUTINE.                                      Y02082
*
* FUNCTION -                                                     Y02082
*
*        IF THE PROTECT KEY INDICATED IN BITS 0-3 AT DXUKEY      Y02082
*        IN THE OPEN/CLOSE/EOV WORKAREA POINTED TO BY REG 4      Y02082
*        IS 7 OR LESS, THAT KEY WILL BE ASSUMED AND THE USER     Y02082
*        EXIT WILL BE BRANCHED TO. OTHERWISE, THE SYNCH SVC 12   Y02082
*        WILL BE USED TO PASS CONTROL TO THE USER EXIT.          Y02082
*
*        DXTCBADR IN THE OPEN/CLOSE/EOV WORKAREA WILL BE USED    Y02082
*        TO LOCATE THE CURRENT SVRB. IF DXUKEY IS 8 OR GREATER   Y02082
*        (USER IS NOT A SYSTEM ROUTINE) THE PREVIOUS RB IS       Y02082
*        INSPECTED TO SEE IF IT IS A PRB (BITS 0 AND 1 OF RBSATB Y02082
*        SET TO 0). IF SO, THE REGISTERS 2-13 PASSED TO THE USER Y02082
*        EXIT WILL BE LOADED FROM THE CURRENT SVRB'S REGISTER    Y02082
*        SAVE AREA. IF THE PREVIOUS RB IS NOT A PRB, THE RB      Y02082
*        CHAIN WILL BE SEARCHED FOR A PRB. WHEN THE PRB MOST     Y02082
*        RECENTLY IN CONTROL IS FOUND, THE REGISTERS 2-13 PASSED Y02082
*        TO THE USER EXIT ARE LOADED FROM THE SVRB WHICH THE     Y02082
*        PRB PASSED CONTROL TO. IF NO PRB IS FOUND, OR IF        Y02082
*        DXUKEY IS 7 OR LESS, THE REGISTERS ARE LOADED FROM THE  Y02082
*        CURRENT SVRB.                                           Y02082
*
*        REGISTERS 2-13 ARE SAVED ACROSS THE USER EXIT IN THE    Y02082
*        CURRENT SVRB'S EXTENDED SAVE AREA. HENCE, THE USER      Y02082
*        EXIT ROUTINE MUST NOT USE IT.                           Y02082
*
*        IMMEDIATELY BEFORE PASSING CONTROL TO THE USER EXIT,    Y02082
*        BIT RRFUSREX IS SET TO 1 IN RRFLAGS1 IN THE RECOVERY    Y02082
*        ROUTINE PARAMETER LIST.  UPON RETURN, IT IS RESET.      Y02082
*
***********************************************************************
*
RES09000 EQU   *                        USER EXIT ROUTINE        Y02082
         LA    RF,K0(,RF)               USER EXIT ADDRESS        Y02082
         LR    R3,RET                   SAVE RETURN ADDRESS      Y02082
         L     R6,DXTCBADR              CURRENT TCB ADDRESS      Y02082
         USING TCB,R6                                            Y02082
         L     RB,TCBRBP                CURRENT SVRB ADDRESS     Y02082
         USING RBBASIC,RB                                        Y02082
         L     RD,DXATCOM3              RECOVERY ROUTINE AREA    Y02082
         USING RRPLIST,RD                                        Y02082
         MODESET EXTKEY=SUPR            SVRB KEY                 Y02082
         STM   R2,RD,RBEXSAVE           SAVE ACROSS EXIT         Y02082
         MODESET EXTKEY=DATAMGT         DATA MANAGEMENT KEY      Y02082
         CLI   DXUKEY,USERKEY           IS USER IN SYSTEM KEY    Y02082
         BNL   RES09100                 BRANCH IF NO TO SYNCH    Y02082
         OI    RRFLAGS1,RRFUSREX        USER EXIT BIT FOR FRR    Y02082
         MODESET KEYADDR=DXUKEY,WORKREG=14  ASSUME USER KEY      Y02082
         LM    R2,RD,RBGRS2             LOAD USER REGS           Y02082
         BALR  RET,RF                   TAKE EXIT                Y02082
         MODESET EXTKEY=DATAMGT         RETURN TO D.M. KEY       Y02082
         BALR  RET,K0                   ESTABLISH BASE           Y02082
         USING *,RET                    BASE FOR ONE INSTRUCTION Y02082
         B     RES09300                 BRANCH TO RESTORE REGS   Y02082
         DROP  RET                                               Y02082
RES09100 EQU   *                        TEST FOR A PRB           Y02082
         L     RC,RBLINK                PREVIOUS RB              Y02082
         TM    RBSTAB-RBBASIC(RC),RBSTPRB  IS PREVIOUS A PRB     Y02082
         BZ    RES09200                 BRANCH IF YES            Y02082
         LR    RB,RC                    PREVIOUS RB IS CURRENT   Y02082
         CLM   R6,B'0111',RBLINK+K1     IS PREVIOUS RB LAST      Y02082
         BNE   RES09100                 BR IF NO TO TEST FOR PRB Y02082
         L     RB,TCBRBP                ASSUME USER REGS IN      Y02082
*                                       CURRENT SVRB             Y02082
RES09200 EQU   *                        ISSUE SYNCH              Y02082
         OI    RRFLAGS1,RRFUSREX        USER EXIT BIT FOR FRR    Y02082
         LM    R2,RD,RBGRS2             LOAD USER REGS           Y02082
         SYNCH (15)                     TAKE USER EXIT           Y02082
*
RES09300 EQU   *                        RETURN FROM SYNCH        Y02082
         L     R2,CVTPTR                LOAD CVT ADDRESS         Y02082
         L     R6,CVTTCBP-CVT(,R2)      TCB/ASCB POINTERS        Y02082
         L     R6,K4(,R6)               CURRENT TCB              Y02082
         L     RB,TCBRBP                CURRENT SVRB             Y02082
         LM    R2,RD,RBEXSAVE           RESTORE OUR REGS         Y02082
         NI    RRFLAGS1,X'FF'-RRFUSREX  TURN OFF USER EXIT BIT   Y02082
         LR    RET,R3                   RETURN ADDRESS           Y02082
         BR    RET                      RETURN TO CALLER         Y02082
         DROP  R6,RB,RD                 DROP REGISTER USAGE      YM3198
         TITLE 'IFG019RA--OPEN/CLOSE/EOV QMNGRIO FACILITY'       YM1360
**************************************************************** Y02134
*                                                                Y02134
*        QMNGRIO READ/WRITE JFCB ROUTINE                         Y02134
*                                                                Y02134
*        ON ENTRY                                                Y02134
*        REGISTERS 0-14 SAVED IN IECREGSV                        Y02134
*        R0 = 0 IF READ REQUESTED                                Y02134
*        R0 = JFCB ADDRESS IF WRITE REQUESTED                    Y02134
*        R1 = POINTER TO JFCB TTR (JFCB PREFIX ADDRESS)          Y02134
*        RES = BASE ADDRESS                                      YM3138
*        RET = POINTER TO RETURN ADDRESS                         Y02134
*        RF = POINTER TO IECPREFX                                Y02134
*                                                                Y02134
*        INITIAL ENTRY VIA BAL RET,12(,RES)                      YM1360
*                                                                Y02134
*****************************************************************Y02134
*                                                                Y02134
RES10000 EQU   *                        ENTRY FOR QMNGRIO        YM1360
         LR    R8,RET                   SAVE RETURN POINTER      Y02134
         LR    R9,RF                    SAVE POINTER TO SAVEAREA Y02134
         LR    RA,RES                   SAVE BASE ADDRESS        YM1360
*                                                                Y02134
         USING IECPREFX,R9              R9 POINTS TO PREFIX      Y02134
*                                                                Y02134
         ICM   R1,B'1110',TIOEJFCB-TIOEJFCB(R1) GET JFCB PTR     Y02134
         STM   R0,R1,IECREGSV+K64       SAVE PARAMETERS          Y02134
*                                                                Y02134
         L     R1,IECQMNGR              POINTER TO QMNGRIO LIST  Y02134
         LTR   R1,R1                    TEST IF AREA OBTAINED    Y02134
         BNZ   RES10010                 BRANCH IF AREA OBTAINED  YM1360
         LA    R1,IECSTART              POINT TO AREA            Y02134
*                                                                Y02134
         IECRES GET,LV=QMIEND-QMIOP+JESWORK+JFCBLGTH+K72,        Y02134X
               ID=QMGR,PREFIX=YES,A=(R1)                         Y02134
         LR    RES,RA                   RESTORE BASE ADDRESS     YM1360
*                                                                Y02134
         USING QMIOP,R1                                          Y02134
         L     RD,CVTPTR                LOAD CVT POINTER         Y02134
         L     RD,CVTTCBP-CVT(,RD)      GET ADDRESS OF TCB QUE   Y02134
         L     RD,K4(,RD)               GET CURRENT TCB          Y02134
         ST    RD,QMITCBAD              PUT TCB ADDR IN LIST     Y02134
         LA    RD,QMIEND                JES WORK AREA            Y02134
         ST    RD,QMIWRKAD              PUT WA ADDR IN LIST      Y02134
         MVI   QMIRECL+K1,JFCBLGTH      READ/WRITE 176 BYTES     Y02134
         ST    R1,IECQMNGR              SAVE POINTER TO LIST     Y02134
*                                                                Y02134
RES10010 EQU   *                        SET UP TO WRITE OR READ  YM1360
         LA    RD,QMIEND+JESWORK+JFCBLGTH GET QMNGR SAVEAREA PTR Y02134
*                                                                Y02134
*        SET UP FOR WRITE                                        Y02134
*                                                                Y02134
         MVI   QMIFLAGS,QMIOWRTE        SET TO WRITE             Y02134
         MVC   QMIRECAD,IECREGSV+K64    MOVE IN PARM REG 0       Y02134
         MVC   QMIDSKAD(K3),IECREGSV+K68 MOVE IN PARM REG 1      Y02134
*                                                                Y02134
         NC    QMIRECAD,QMIRECAD        JFCB POINTER = ZERO      Y02134
         BNZ   RES10020                 BRANCH IF WRITE REQUESTD YM1360
*                                                                Y02134
*        SET UP FOR READ                                         Y02134
*                                                                Y02134
         MVI   QMIFLAGS,QMIOREAD        SET TO READ              Y02134
         LA    R0,QMIEND+JESWORK        JFCB READ AREA POINTER   Y02134
         ST    R0,QMIRECAD              SAVE JFCB BUFFER PTR     Y02134
         ST    R0,IECREGSV+K68          SAVE PARM REG 1          Y02134
*                                                                Y02134
RES10020 EQU   *                        ISSUE QMNGRIO MACRO      YM1360
         MODESET EXTKEY=ZERO            QMNGRIO KEY              Y02134
         QMNGRIO
         MODESET EXTKEY=DATAMGT         RESET KEY                Y02134
*                                                                Y02134
         LM    R0,R1,IECREGSV+K64       RESTORE PARAMETERS       Y02134
         LR    RET,R8                   RESTORE RETURN ADDRESS   Y02134
         LR    RF,R9                    RESTORE IECPREFX POINTER Y02134
         RETURN ,                                                Y02134
         DROP  R1,R9                                             Y02134
         TITLE 'IFG019RA--OPEN/CLOSE/EOV/DADSM SERVICE ROUTINE'  YM1360
***********************************************************************
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
***********************************************************************
*
RESPAGE2 DC    A(RES11000)              BASE ADDRESS OF PAGE 2   YM3138
ERROR1   DMABCOND PCK,SETLOCK           ERROR ON SETLOCK         Y02080
ERROR2   DMABCOND PCK,ENQ               ERROR ON ENQ             Y02080
OCED     DC    CL4'OCED'                DUMMY CORE ID            Y02134
STOPNAME DC    CL8' '                   NAME TO STOP ON          Y02080
MSGPREFX DC    XL4'000C0000'            WTO PREFIX LENGTH        Y02080
FID      DC    X'00FF'                  FORMAT ID FOR GTF        Y02080
FOUR     DC    H'4'                     CONSTANT 4               Y02080
ENQMACRO ENQ   (SYSZTIOT,,S,6,SYSTEM),RET=HAVE,MF=L ENQ PARMLIST Y02082
ENQLTH   EQU   *-ENQMACRO               LENGTH OF PARM LIST      Y02082
DEQMACRO DEQ   (SYSZTIOT,,6,SYSTEM),RET=HAVE,MF=L DEQ PARMLIST   Y02082
DEQLTH   EQU   *-DEQMACRO               LENGTH OF PARM LIST      Y02134
SYSZTIOT DC    CL8'SYSZTIOT'            TIOT ENQ MAJOR NAME      YM1399
         EJECT                                                   YM3937
***********************************************************************
*        TABLE OF MODULE NAMES AND ENTRY POINT ADDRESSES
***********************************************************************
*
         XCTLTABL ID=(RR0A,IFG0RR0A,RR0F,IFG0RR0F,               YM1360X
               TC0A,IFG0TC0A,TC4A,IFG0TC4A,TRAC,IFG019TR),       YM1360X
               BRT=SHORT,LENGTH=4K                               YM1360
         EJECT                                                   YM1360
***********************************************************************
*        BRANCH TABLE FOR THE SECOND PAGE OF IFG019RA
***********************************************************************
*
         USING *,RES                    ESTABLISH ADDRESSABILITY YM1360
RES11000 EQU   *                        2ND PAGE OF IFG019RA     YM3138
RES11010 B     RES14000                 BRANCH TO INIT/COPY RTN  YM3138
          TITLE  'IFG019RA--OPEN/CLOSE/EOV INITIALIZATION AND DCB COPY X
               FACILITIES'                                       Y02080
***********************************************************************
*                                                                     *
*        FUNCTION PROLOGUE                                            *
*                                                                     *
***********************************************************************
*                                                                     *
* FUNCTION NAME -                                                     *
*                                                                     *
*        INITIALIZATION AND DCB COPY FACILITIES FOR OPEN/CLOSE/EOV    *
*                                                                     *
* FUNCTION -                                                          *
*                                                                     *
*        THIS ROUTINE PERFORMS TWO BASIC FUNCTIONS:                   *
*        1 CERTAIN POINTERS IN THE OPEN/CLOSE/EOV WORKAREA ARE        *
*          INITIALIZED;                                               *
*        2 THE DCB COPY FUNCTION IS PERFORMED.                        *
*                                                                     *
*        THE FIELDS WHICH ARE INITIALIZED ARE                         *
*              DXUKEY   KEY OF CALLER OBTAINED FROM RESUME PSW IN     *
*                       SVRB                                          *
*              DXASCBAD ADDRESS OF ASCB                               *
*              DXTCBADR ADDRESS OF TCB                                *
*              DXJSCBAD ADDRESS OF ACTIVE JSCB POINTED TO BY JSCBACT  *
*                       IN THE JSCB POINTED TO BY THE TCB             *
*              DXDSABQD ADDRESS OF DSAB QUEUE DESCRIPTOR BLOCK FROM   *
*                       THE ACTIVE JSCB                               *
*              DXDSABAD ADDRESS OF DSAB FOR THE DCB/ACB BEING         *
*                       PROCESSED - OBTAINED FROM THE DEB EXTENSION   *
*                       OR BY SEARCHING THE DSAB CHAIN USING THE      *
*                       DCBDDNAM                                      *
*              DXDSAB   ADDRESS OF CURRENT DSAB. SAME AS DXDSABAD     *
*              DXDEBXAD ADDRESS OF DEB EXTENSION IF THE DCB IS OPEN   *
*              DXTIOTAD ADDRESS OF TIOT ENTRY FOR DCB BEING PROCESSED *
*                       OBTAINED FROM THE DSAB OBTAINED AS            *
*                       STATED ABOVE                                  *
*              DXUCBADR ADDRESS OF UCB - FIRST UCB ADDRESS IN THE     *
*                       TIOT ENTRY OBTAINED AS STATED ABOVE IF THE    *
*                       DCB IS CLOSED; FIRST UCB ADDRESS IN THE DEB   *
*                       IF THE DCB IS OPEN AND THE DSORG IS NOT IS;   *
*                       SECOND UCB ADDRESS IN THE DEB IF THE DCB IS   *
*                       OPEN AND THE DSORG IS IS.                     *
*                                                                     *
* ENTRY POINT -                                                       *
*                                                                     *
*        ENTRY TO THIS ROUTINE IS MADE BY A DIRECT BRANCH FROM ANY    *
*        MODULE IN OPEN/CLOSE/EOV.                                    *
*        IFG019RA+44 - ENTRY FOR INIT FUNCTION.                       *
*                                                                     *
* INPUT -                                                             *
*                                                                     *
*        REGISTERS -                                                  *
*              0 - INDICATION OF WHETHER DCB IS OPEN OR CLOSED AND,   *
*                  HENCE, WHETHER A DEB ADDRESS IS IN DCBDEBAD        *
*                  FOR THE PURPOSE OF FINDING SEVERAL OF THE POINTERS *
*                  NEEDED FOR THE INITIALIZATION FUNCTION:            *
*                  0 - NO WORKAREA INITIALIZATION IS REQUESTED        *
*                  4 - DCB IS OPEN                                    *
*                  8 - DCB IS CLOSED                                  *
*              1 - INDICATION OF DCB COPY FUNCTION REQUESTED          *
*                  0 - NO DCB COPY REQUESTED                          *
*                  4 - THE DCB POINTED TO BY DXUDCBAD IN THE OPEN/    *
*                      CLOSE/EOV WORKAREA (WHICH IS IN PROTECT KEY    *
*                      INDICATED BY DXUKEY IN THE WORKAREA) IS TO BE  *
*                      COPIED INTO THE PROTECTED WORKAREA POINTED TO  *
*                      REGISTER 2                                     *
*                  8 - THE PROTECTED WORKAREA COPY OF THE DCB POINTED *
*                      TO BY REGISTER 2 IS TO BE COPIED ON TOP OF THE *
*                      DCB POINTED TO BY WORKAREA LABEL, DXUDCBAD     *
*              2 - ADDRESS OF PROTECTED COPY OF DCB BEING PROCESSED   *
*              4 - ADDRESS OF OPEN/CLOSE/EOV WORKAREA                 *
*              5 - ADDRESS OF IFG019RA                                *
*              6 - ADDRESS OF PREFIX OF MAIN WORK AREA                *
*              14 - RETURN ADDRESS TO THE CALLING MODULE              *
*              15 - POINTER TO A REGISTER SAVE AREA                   *
*        KEY - DATA MANAGEMENT KEY                                    *
*                                                                     *
* OUTPUT -                                                            *
*                                                                     *
*        REGISTERS -                                                  *
*              2 - ADDRESS OF THE PROTECTED (COPIED) DCB              *
*              5 - ADDRESS OF IFG019RA                                *
*              14 - RETURN ADDRESS OF THE CALLING MODULE              *
*              15 - POINTER TO THE REGISTER SAVE AREA                 *
*        DATA -                                                       *
*              THE INITIALIZED WORKAREA POINTERS AND/OR THE REFRESHED *
*              DCB.  IF THE FUNCTION REQUESTED WAS NOT COMPLETED      *
*              SATISFACTORILY, ONE OF THE BITS IN DXWCOPYE WILL       *
*              BE SET TO ONE.  OTHERWISE, THIS BYTE WILL BE ZERO.     *
*                                                                     *
*                                                                     *
***********************************************************************
         EJECT                                                   Y02134
*
*        THIS ROUTINE IS CONTROLLED BY ONE OF NINE BXLE MASKS    Y02134
*        LOADED DEPENDING UPON THE INPUT OF REGISTERS ZERO AND   Y02134
*        ONE. THE MASK IS KEPT IN R7 AND IS USED IN              Y02134
*        THE INSTRUCTIONS:                                       Y02134
*              BXLE R7,R7,LABEL                                  Y02134
*        THE BRANCH IS TAKEN IF THE HIGH ORDER BIT OF R7 IS ONE. Y02134
*
RES14000 EQU   *                        ENTRY FOR INIT/COPY      YM3066
         XC    DXWCOPYE,DXWCOPYE        CLEAR COPY ERROR         Y02134
         USING IHADCB,RDCB                                       Y02134
         LR    R3,R0                    SAVE DCBCOPY PARM        Y02134
         L     R7,MASKTBLE(R1)          LOAD ADDRESS OF ONE OF   Y02134
*                                       THREE LISTS OF MASKS     Y02134
         L     R7,K0(R7,R3)             GET PROPER MASK IN LIST  Y02134
* BXLE1  BRANCH IF NO INITIALIZATION                             Y02134
         BXLE  R7,R7,RES14300           BRANCH TO BXLE2          Y02134
         L     R3,CVTPTR                LOAD CVT ADDRESS         Y02134
         USING CVT,R3                                            Y02134
         L     R3,CVTTCBP               ADDR OF TCB/ASCB PTRS    Y02134
         L     R3,K4(,R3)               ADDRESS OF TCB           Y02134
         USING TCB,R3                                            Y02134
         L     R3,TCBRBP                ADDR OF CURRENT SVRB     Y02134
         USING RBBASIC,R3                                        Y02134
         L     R3,RBLINK                GET CALLER'S RB          Y02134
         MVC   DXUKEY,RBOPSW+K1         MOVE KEY, AMWP TO WORKAR Y02134
         NI    DXUKEY,KEYMASK           ZERO AMWP FIELD          Y02134
         ST    RDCB,DXUDCBAD            SET USER'S DCB ADDR      Y02134
         ST    RDCB,DXPDCBAD            SET PROTECTED DCB = USER Y02134
*                                                                Y02134
*        DCB COPY LOGIC INITIALIZATION                           Y02134
*                                                                Y02134
         LA    R2,DCBDDNAM              PT TO USER'S FOUNDATION  Y02134
         LA    R1,DXWFOUN               PT TO WORK AREA SAVE     Y02134
         LA    R3,L'DXWFOUN             LENGTH OF THE FOUNDATION Y02134
         BAL   RD,RES14850              COPY USER FOUNDATION     Y02134
         L     RDCB,DXUDCBAD            GET USER DCB ADDR        Y02134
         MVC   DXWMCR,DXWMACRF          GET MACREF OPENED DCB    Y02134
         TM    DXWOFLGS,DCBOFOPN+DCBOFEOV  CHECK IF DCB IS OPEN  Y02134
         BM    RES14010                 BRANCH IF DCB IS OPEN    Y02134
         MVC   DXWMCR,DXWMACR           GET MACREF UN-OPENED DCB Y02134
RES14010 EQU   *                        CHECK IF EXCP            Y02134
         XC    DXWDSORG,DXWDSORG        CLEAR SAVED DSORG        Y02134
         TM    DXWMCR,DCBMEXCP          CHECK IF EXCP            Y02134
         BNO   RES14020                 BRANCH IF NOT EXCP       Y02134
         TM    DXWMCR,DCBMFOUN          CHK FOUNDATION EXIST     Y02134
         BNO   RES14030                 NO FOUNDATION, NO DSORG  Y02134
RES14020 EQU   *                        PREPARE TO COPY          Y02134
         LA    R2,DCBDSORG              POINT TO USER'S DSORG    Y02134
         LA    R1,DXWDSORG              POINT TO PROTECTED DSORG Y02134
         LA    R3,L'DXWDSORG            LENGTH OF DSORG          Y02134
         BAL   RD,RES14850              COPY DCB TEMPORARILY     Y02134
*
*        THE FOLLOWING FIELDS WILL BE INITIALIZED                Y02134
*              DXASCBAD  ASCB ADDRESS                            Y02134
*              DXTCBADR  TCB ADDRESS                             Y02134
*              DXJSCBAD  ACTIVE JSCB ADDRESS                     Y02134
*              DXDSABQD  DSAB QUEUE DESCRIPTOR BLOCK ADDRESS     Y02134
*              DXTIOTAD  TIOT ADDRESS                            Y02134
*
RES14030 EQU   *                        INITIALIZE WKAREA FIELDS Y02134
         L     R3,CVTPTR                LOAD CVT ADDRESS         Y02134
         USING CVT,R3                                            Y02134
         L     R3,CVTTCBP               ADDR OF TCB/ASCB POINTRS Y02134
         MVC   DXASCBAD,K12(R3)         MOVE ASCB ADDRESS        Y02134
         L     R3,K4(,R3)               LOAD TCB ADDRESS         Y02134
         ST    R3,DXTCBADR              STORE TCB ADDR IN WORKAR Y02134
         USING TCB,R3                                            Y02134
         MVC   DXTIOTAD,TCBTIO          SAVE TIOT ADDRESS        Y02134
         L     R3,TCBJSCB               JSCB ADDRESS             Y02134
         USING IEZJSCB,R3                                        Y02134
         L     R3,JSCBACT               ACTIVE JSCB ADDR         Y02134
         ST    R3,DXJSCBAD              STORE ACTIVE JSCB ADDR   Y02134
         L     R3,JSCDSABQ              DSAB QDB ADDR            Y02134
         ST    R3,DXDSABQD              STORE QDB ADDR IN WORKAR Y02134
* BXLE11 BRANCH IF DEB=YES - FALL THROUGH IF DEB=NO              Y02134
         BXLE  R7,R7,RES14200           BRANCH TO DEB=YES        Y02134
         DROP  R3                       DROP REGISTER USAGE      YM3198
         EJECT                                                   Y02134
*
*        AT THIS POINT IN THE INITIALIZATION ROUTINE:            Y02134
*        R3  POINTS TO THE DSAB QDB.                             Y02134
*        R4  POINTS TO THE OPEN/CLOSE/EOV WORKAREA.              Y02134
*        R5  IS THE BASE REGISTER.                               Y02134
*        R6  POINTS TO THE PREFIX OF THE MAIN WORK AREA.         Y02134
*        R7  CONTAINS THE BXLE MASK.                             Y02134
*        R8  MUST BE PRESERVED FOR THE CALLER.                   Y02134
*        R9  MUST BE PRESERVED FOR THE CALLER.                   Y02134
*        R14 CONTAINS THE RETURN ADDRESS.                        Y02134
*        R15 MUST BE PRESERVED FOR THE CALLER.                   Y02134
*                                                                Y02134
*        THIS ROUTINE FILLS IN THE FIELDS                        Y02134
*              DXDSABAD                                          Y02134
*              DXDSAB                                            Y02134
*              DXTIOTAD                                          Y02134
*              DXUCBADR                                          Y02134
*        IN THE CASE THAT THE DCB IS NOT OPEN.                   Y02134
*
*
* TEST FOR CONCATENATION BIT.  IF ON, USE DCBTIOT.
*
         TM    DXWOFLGS,DCBOFEOV        IS CONCATENATION BIT ON? Y02134
         BO    RES14100                 BRANCH IF YES            YM3138
         CLI   DXWDDNAM,C' '            IS DDNAME BLANK?         Y02134
         BE    RES14710                 BRANCH IF YES TO ERROR   Y02134X
                                        EXIT                     Y02134
         TM    DXWMCR1,DCBMEXCP         IS IT EXCP?              Y02134
         BO    RES14110                 BRANCH IF YES            Y02134
         TM    DXWDSRG2,DCBACBM         IS CONTROL BLOCK ACB     Y02134
         BZ    RES14110                 BRANCH IF NO             Y02134
         CLC   DXWDDNAM,VTAMDDN         DOES DDNAME INDICATE     Y02134X
                                        VTAM?                    Y02134
         BE    RES14170                 BRANCH IF YES TO EXIT  @ZA00114
RES14110 EQU   *                        TEST FOR A DSAB QDB ADDR Y02134
         LTR   R3,R3                    TEST FOR A DSAB QDB ADDR YM6708
         BZ    RES14160                 BRANCH IF NO TO ERROR    YM6708
         USING QDB,R3                   R3 POINTS TO DSAB QDB    YM1240
         L     RB,QDBFELMP              GET FIRST DSAB ADDRESS   Y02134
RES14120 EQU   *                        GET TIOT ENTRY ADDRESS   Y02134
         LTR   RB,RB                    ANY MORE DSABS?          Y02134
         BZ    RES14160                 BRANCH IF NO TO ERROR    Y02134X
                                        EXIT                     Y02134
         USING DSAB,RB                                           Y02134
         L     RC,DSABTIOT              GET TIOT ENTRY FOR DSAB  Y02134
         USING TIOENTRY,RC                                       Y02134
         CLC   DXWDDNAM,TIOEDDNM        IS DCB FOR THIS TIOT     Y02134X
                                        ENTRY?                   Y02134
         BE    RES14140                 BRANCH IF YES            Y02134
         L     RB,DSABFCHN              GET NEXT DSAB ADDRESS    Y02134
         B     RES14120                 TRY NEXT DSAB            Y02134
*
*        DCBTIOT OFFSET INTO TIOT WILL BE USED TO OBTAIN THE     Y02134
*        DSAB ADDRESS AND TIOT ENTRY ADDRESS.                    Y02134
*
RES14100 EQU   *                        TEST IF VTAM             Y02134
         BAL   RD,RES14250              OBTAIN TIOT ENTRY AS IF  Y02134X
                                        DCB WERE OPEN            Y02134
*
*        RB NOW CONTAINS DSAB ADDRESS.                           Y02134
*        RC NOW CONTAINS TIOT ENTRY ADDRESS.                     Y02134
*        RB AND RC ARE ZERO IF NO DSAB WAS FOUND.                Y02134
*
         LTR   RB,RB                    WAS DSAB/TIOT OBTAINED?  Y02134
         BZ    RES14710                 BRANCH IF NO - ERROR     Y02134
RES14140 EQU   *                        STORE DSAB ADDRESS       Y02134
         ST    RB,DXDSABAD              STORE DSAB ADDRESS       Y02134
         ST    RB,DXDSAB                STORE CURRENT DSAB ADDR  Y02134
RES14150 EQU   *                        STORE TIOT AND UCB ADDRESSES
         ST    RC,DXTIOTAD              STORE TIOT ENTRY ADDRESS Y02134
         TM    TIOELINK,TIOESYOT+TIOESYIN  IS DATA SET SPOOLED?  Y02134
         BNZ   RES14240                 BR IF YES - NO UCB ADDR  Y02134
         MVC   DXUCBADR+K1(K3),TIOEFSRT  PUT UCB ADDR IN WKAREA  Y02134
         B     RES14240                 BRANCH TO EXIT           Y02134
RES14160 EQU   *                        ERROR EXIT TEST          Y02080
         TM    DXWMCR1,DCBMEXCP         IS IT EXCP?              Y02134
         BO    RES14700                 BRANCH IF YES            Y02134
         TM    DXWDSRG2,DCBACBM         IS CONTROL BLOCK ACB     Y02134
         BZ    RES14700                 BRANCH IF NO             Y02134
         TM    DXWFOUN+ACBINFLG-ACBDDNM,ACBCAT+ACBSCRA CHECK    Z30SSRL
*                                       FOR VSAM CATALOG/SCRA   Z30SSRL
         BZ    RES14700                 BR IF NOT TO ERROR EXIT Z30SSRL
RES14170 EQU   *                        VTAM ACB ENTRY         @ZA00114
         XC    DXTIOTAD,DXTIOTAD        IF YES, THEN NO TIOT OR  YM3937X
                                        DSAB ADDRESS IS REQUIRED YM3937
         XC    DXDSAB,DXDSAB            CLEAR CURRENT DSAB ADDR  YM3937
         XC    DXDSABAD,DXDSABAD        CLEAR DSAB ADDRESS       YM3937
         B     RES14240                 BR TO SUCCESSFUL EXIT    YM3937
         DROP  R3                                                YM1240
         EJECT                                                   Y02134
*
*        AT THIS POINT IN THE INITIALIZATION ROUTINE:            Y02134
*        R4  POINTS TO THE OPEN/CLOSE/EOV WORKAREA.              Y02134
*        R5  IS THE BASE REGISTER.                               Y02134
*        R3  POINTS TO THE DSAB QDB.                             Y02134
*        R7  CONTAINS THE BXLE MASK.                             Y02134
*        R8  MUST BE PRESERVED FOR THE CALLER.                   Y02134
*        R9  MUST BE PRESERVED FOR THE CALLER.                   Y02134
*        R14 CONTAINS THE RETURN ADDRESS.                        Y02134
*        R15 MUST BE PRESERVED FOR THE CALLER.                   Y02134
*                                                                Y02134
*        THIS ROUTINE FILLS IN THE FIELDS                        Y02134
*              DXDSABAD                                          Y02134
*              DXTIOTAD                                          Y02134
*              DXUCBADR                                          Y02134
*              DXDEBXAD                                          Y02134
*        IN THE CASE THAT THE DCB IS OPEN.  IT OBTAINS THE DSAB
*        AND TIOT ADDRESSES BASED UPON THE TIOT OFFSET IN DCBTIOT.
*
RES14200 EQU   *                        INITIALIZE MORE FIELDS   Y02134
         BAL   RD,RES14250              LINK TO SUBROUTINE       Y02134
*
*        RB NOW CONTAINS DSAB ADDRESS                            Y02134
*        RC NOW CONTAINS TIOT ENTRY ADDRESS                      Y02134
*        RB AND RC ARE ZERO IF NO DSAB WAS FOUND                 Y02134
*
         L     RA,DXWDEBAD              LOAD DEB ADDRESS         Y02134
         LR    RD,RA                    LOAD DEB ADDR TO RA      Y02134
         LA    R3,DEBBASIC-DEBXTNP      NEGATIVE OFFSET TO       Y02134X
                                        DEB EXTENSION ADDRESS    Y02134
         SR    RD,R3                    POINT RA TO EXT ADDR     Y02134
         USING DEBXTNP,RD                                        Y02134
         LTR   RB,RB                    CHECK IF DSAB/TIOT FOUND YM6519
         BNZ   RES14220                 BRANCH IF FOUND          YM6519
         TM    DXWDSRG2,ACBDORGA        CHECK FOR ACB/AMB        YM7861
         BNO   RES14710                 BRANCH IF NOT            YM7861
         CLI   DXWFOUN+ACBAMETH-ACBDDNM,ACBVTAM TEST FOR VTAM   Z30SSRL
         BE    RES14240                 EXIT IF VTAM            Y30ASJC
         TM    DXWFOUN+ACBINFL-ACBDDNM,ACBCAT+ACBSCRA  CHECK    Z30SSRL
*                                       FOR VSAM CATALOG/SCRA   Z30SSRL
         BZ    RES14710                 BR IF NOT CATALOG/SCRA  Z30SSRL
         MVC   DXDEBXAD(K4),DEBXTNP     SET DEB XTN ADDR         YM7046
         XC    DXTIOTAD,DXTIOTAD        ZERO TIOT ADDR FOR VSAM  YM8506
         B     RES14240                 BR TO SUCCESS EXIT       YM7046
RES14220 EQU   *                        COMPARE DSAB ADDRESSES   YM6519
         L     R3,DEBXTNP               LOAD DEB EXTENSION ADDR  Y02134
         USING DEBXTN,R3                                         Y02134
         USING DEBBASIC,RA                                       Y02134
         ST    R3,DXDEBXAD              STORE DEB EXTENSION ADDR YM7861
         C     RB,DEBXDSAB              DOES DSAB OBTAINED FROM  Y02134X
                                        TIOT OFFSET MATCH THAT   Y02134X
                                        IN DEB EXTENSION?
         BE    RES14225                 BR IF DSAB OK            YM7861
         TM    DXWDSRG2,ACBDORGA        CHECK FOR ACB/AMB        YM7861
         BNO   RES14710                 BRANCH IF NOT            YM7861
         TM    DXWFOUN+ACBINFL-ACBDDNM,ACBCAT+ACBSCRA  CHECK    Z30SSRL
*                                       FOR VSAM CATALOG/SCRA   Z30SSRL
*                                       IF VSAM CATALOG ORIGINAL YM7861
*                                       TIOT MAY NOT BE PRESENT  YM7861
*                                       VSAM WILL RECTIFY THIS   YM7861
         BZ    RES14710                 BR IF BAD CONTROL BLOCK Z30SSRL
         XC    DXTIOTAD,DXTIOTAD        ZERO TIOT ADDR FOR VSAM  YM8506
         B     RES14240                 BR IF VSAM CATALOG       YM8506
RES14225 EQU   *                        GOOD TIOT ENTRY          YM7861
         ST    RB,DXDSABAD              STORE DSAB ADDRESS       Y02134
         ST    RB,DXDSAB                STORE CURRENT DSAB ADD   Y02134
         DROP  R3                                                YM1240
         CLI   DEBNMEXT,K0              ANY EXTENTS?             Y02134
         BE    RES14230                 BR IF NO: NO UCBAD       Y02134
         MVC   DXUCBADR+K1(K3),DEBSUCBA+K1 USE FIRST EXTENT    @ZA13574
         CLC   DEBAMTYP,ISAM            CHECK FOR ISAM           YM1240
         BNE   RES14230                 BRANCH IF NOT ISAM     @ZA13574
         ST    R2,DXTIOTAD              SAVE REG 2             @ZA25526
         SR    R2,R2                    ZERO REG 2             @ZA18282
         ICM   R2,7,DEBSUCBA+K1         INDEX EXTENT ADDR      @ZA18282
         BNZ   RES14227                 BR IF VALID ADR        @ZA18282
         ICM   R2,7,DEBSUCBA+K5         PRIME EXTENT ADDR      @ZA18282
RES14227 EQU   *                                               @ZA25526
         MVC   DXUCBADR+K1(K3),1(R2)    UCBADDR TO WORK AREA   @ZA25526
         L     R2,DXTIOTAD              RESTORE R2             @ZA25526
RES14230 EQU   *                        STORE TIOT ENTRY ADDRESS Y02134
         ST    RC,DXTIOTAD              STORE TIOT ENTRY ADDRESS Y02134
*                                                                Y02134
* SUCCESSFUL INITIALIZATION EXIT                                 Y02134
*                                                                Y02134
RES14240 EQU   *                        SUCCESSFUL INIT EXIT     Y02134
         B     RES14310                 GO TEST IF COPY REQUIRED Y02134
         DROP  RA,RD                                             YM3198
         EJECT                                                   Y02134
*
*        THIS SUBROUTINE IS CALLED TO DETERMINE THE DSAB         Y02134
*        ADDRESS AND THE TIOT ENTRY ADDRESS BASED UPON THE       Y02134
*        TIOT OFFSET IN DCBTIOT.                                 Y02134
*        CALLING SEQUENCE IS BAL RD,RES14250                     Y02134
*        INPUT IS -                                              Y02134
*              RCORE POINTS TO O/C/E WORKAREA                    Y02134
*              R3    POINTS TO DSAB QDB                          Y02134
*              RD    RETURN ADDRESS                              Y02134
*              DXTIOTAD IN O/C/E WORKAREA CONTAINS TIOT ADDRESS  Y02134
*        OUTPUT IS -                                             Y02134
*              RB    ZERO OR POINTER TO DSAB                     Y02134
*              RC    ZERO OR POINTER TO TIOT ENTRY               Y02134
*        IF RB AND RC ARE ZERO ON EXIT, NO DSAB/TIOT ENTRY       Y02134
*        COULD BE FOUND MATCHING THE TIOT OFFSET IN THE DCB.     Y02134
*
RES14250 EQU   *                        GET DSAB ADDRESS         Y02134
         USING QDB,R3                   R3 POINTS TO DSABQDB     YM1240
         LH    RC,DXWTIOT               GET TIOT OFFSET          Y02134
         LA    RB,TIOENTRY-TIOT         MINIMUM TIOT OFFSET      Y02134
         CR    RC,RB                    IS IT LESS THAN MINIMUM  Y02134
         BL    RES14270                 BRANCH IF TOO LOW        Y02134
         A     RC,DXTIOTAD              RC IS NOW POINTER TO     Y02134X
                                        TIOT ENTRY FOR DCBTIOT   Y02134
         L     RB,QDBFELMP              GET FIRST DSAB           Y02134
RES14260 EQU   *                        FIND DSAB/TIOT ADDRESSES Y02134
         LTR   RB,RB                    ANY MORE DSABS           Y02134
         BZ    RES14270                 BRANCH IF NO MORE        Y02134
         C     RC,DSABTIOT              IS TIOT ADDR IN THIS ONE Y02134
         BE    K0(,RD)                  RETURN IF YES            Y02134
         L     RB,DSABFCHN              GET NEXT DSAB            Y02134
         B     RES14260                 TEST THIS DSAB           Y02134
RES14270 EQU   *                        DSAB/TIOT NOT FOUND      Y02134
         SR    RC,RC                    ZERO TIOT ADDRESS        Y02134
         SR    RB,RB                    ZERO DSAB ADDRESS        Y02134
         BR    RD                       RETURN                   Y02134
         DROP  R3,RB,RC                                          YM3198
         EJECT                                                   Y02134
*                                                                Y02134
* NO INIT, SEE IF COPY AND/OR FIRST COPY                         Y02134
*                                                                Y02134
RES14300 EQU   *                        NO INIT ENTRY            Y02134
         SLL   R7,K1                    ELIMINATE INIT ARGUMENT  Y02134
* BXLE2  BRANCH IF DCBCOPY LOGIC NOT REQUIRED                    Y02134
         BXLE  R7,R7,RES14990           BRANCH TO BXLE10         Y02134
         CLC   DXUDCBAD,DXPDCBAD        TEST IF HAVE COPY        Y02134
         BNE   RES14800                 BR IF ALREADY HAVE COPY  Y02134
*                                                                Y02134
*        DCB COPY LOGIC INITIALIZATION                           Y02134
*                                                                Y02134
         L     RDCB,DXUDCBAD            POINT TO USER'S DCB      Y02134
         LA    R2,DCBDDNAM              PT TO USER'S FOUNDATION  Y02134
         LA    R1,DXWFOUN               POINT TO SAVE AREA       Y02134
         LA    R3,L'DXWFOUN             LENGTH OF THE FOUNDATION Y02134
         BAL   RD,RES14850              COPY USER FOUNDATION     Y02134
         L     RDCB,DXUDCBAD            GET USER DCB ADDRESS     Y02134
         MVC   DXWMCR,DXWMACRF          GET MACREF OPENED DCB    Y02134
         TM    DXWOFLGS,DCBOFOPN+DCBOFEOV CHECK IF DCB OPEN      Y02134
         BM    RES14304                 BRANCH IF DCB OPNE       Y02134
         MVC   DXWMCR,DXWMACR           GET MACREF UN-OPENED DCB Y02134
RES14304 EQU   *                        TEST FOR DCB FOUNDATION  Y02134
         XC    DXWDSORG,DXWDSORG        CLEAR SAVED DSORG        Y02134
         TM    DXWMCR,DCBMEXCP          CHECK IF EXCP            Y02134
         BNO   RES14306                 BR - NOT EXCP            Y02134
         TM    DXWMCR,DCBMFOUN          CHK IF FOUNDATION EXISTS Y02134
         BNO   RES14308                 NO FOUNDATION, NO DSORG  Y02134
RES14306 EQU   *                        COPY DCB TEMPORARILY     Y02134
         LA    R2,DCBDSORG              POINT TO USER'S DSORG    Y02134
         LA    R1,DXWDSORG              POINT TO PROTECTED DSORG Y02134
         LA    R3,L'DXWDSORG            LENGTH OF DSORG          Y02134
         BAL   RD,RES14850              COPY DCB TEMPORARILY     Y02134
RES14308 EQU   *                        GO GET COPY WORK AREA    Y02134
         B     RES14320                 GET COPY AREA            Y02134
         EJECT                                                   Y02134
RES14310 EQU   *                        TEST IF DCBCOPY REQUIRED Y02134
* BXLE2  BRANCH IF DCBCOPY LOGIC NOT REQUIRED                    Y02134
         BXLE  R7,R7,RES14990           BRANCH TO BXLE10         Y02134
*                                                                Y02134
*        DCB COPY LOGIC INITIALIZATION                           Y02134
*                                                                Y02134
         CLC   DXUDCBAD,DXPDCBAD        TEST IF HAVE COPY        Y02134
         BNE   RES14800                 BR IF ALREADY HAVE COPY  Y02134
*                                                                Y02134
*        DETERMINE SIZE OF DCB                                   Y02134
*                                                                Y02134
RES14320 EQU   *                        DETERMINE DCB SIZE       Y02134
         XR    RC,RC                    CLEAR LENGTH             Y02134
         XR    RD,RD                    CLR DELTA FROM DCB BASE  Y02134
         L     RDCB,DXUDCBAD            POINT TO USER'S DCB      Y02134
         TM    DXWMCR,DCBMEXCP          EXCP ACCESS METHOD       Y02134
         BNO   RES14450                 BRANCH IF NOT EXCP       Y02134
*                                                                Y02134
*        EXCP                                                    Y02134
*                                                                Y02134
         LA    RC,K52                   BASIC LENGTH             Y02134
         TM    DXWMCR,DCBMRAPG          APPENDAGES PRESENT       Y02134
         BNO   RES14340                 BRANCH IF NO APPENDAGES  Y02134
         LA    RC,K20(,RC)              LENGTH APPENDAGES = 20   Y02134
RES14340 EQU   *                        TEST FOR FOUNDATION      Y02134
         TM    DXWMCR,DCBMFOUN          FOUNDATION PRESENT       Y02134
         BO    RES14350                 BRANCH IF PRESENT        Y02134
         LA    RD,K40                   DELTA = 40               Y02134
         B     RES14750                 GET CORE                 Y02134
RES14350 EQU   *                        CHK FOR COMMON INTERFACE Y02134
         TM    DXWMCR,DCBMRCI           COMMON INTERFACE PRESENT Y02134
         BO    RES14370                 BRANCH IF YES            Y02134
         LA    RD,K32                   DELTA = 32               Y02134
         B     RES14750                 GET CORE                 Y02134
RES14370 EQU   *                        1 WORD DEVICE INTERFACE  Y02134
         TM    DXWMCR2,DCBMR1WD         1 WORD DEVICE INTERFACE  Y02134
         BNO   RES14390                 BRANCH IF NOT            Y02134
         LA    RD,K16                   DELTA = 16               Y02134
         B     RES14750                 GET CORE                 Y02134
RES14390 EQU   *                        3 WORD DEVICE INTERFACE  Y02134
         TM    DXWMCR2,DCBMR3WD         3 WORD DEVICE INTERFACE  Y02134
         BNO   RES14410                 BRANCH IF NOT            Y02134
         LA    RD,K8                    DELTA = 8                Y02134
         B     RES14750                 GET CORE                 Y02134
RES14410 EQU   *                        4 WORD DEVICE INTERFACE  Y02134
         TM    DXWMCR2,DCBMR4WD         4 WORD DEVICE INTERFACE  Y02134
         BNO   RES14430                 BRANCH IF NOT            Y02134
         LA    RD,K4                    DELTA = 4                Y02134
         B     RES14750                 GET CORE                 Y02134
RES14430 EQU   *                        5 WORD DEVICE INTERFACE  Y02134
         TM    DXWMCR2,DCBMR5WD         5 WORD DEVICE INTERFACE  Y02134
         BO    RES14750                 BRANCH - FULL FRONT END  Y02134
         LA    RD,K20                   DELTA = 20               Y02134
         B     RES14750                 GET CORE                 Y02134
*                                                                Y02134
*        ACB                                                     Y02134
*                                                                Y02134
RES14450 EQU   *                        CHECK FOR ACB/AMB        Y02134
         TM    DXWDSRG2,ACBDORGA        CHECK FOR ACB/AMB        Y02134
         BNO   RES14470                 BRANCH IF NOT            Y02134
         MODESET KEYADDR=DXUKEY,WORKREG=12  ASSUME USER KEY      YM1225
         LH    RC,ACBLENG-IFGACB(,RDCB)  GET LENGTH OF ACB       Y02134
         MODESET EXTKEY=DATAMGT         RESTORE DM KEY           YM1225
         SLL   RC,K17                   ENSURE POSITIVE LENGTH   Y02134
         SRL   RC,K17                   SIGN BIT 0               Y02134
         B     RES14750                 GET CORE                 Y02134
*                                                                Y02134
*        PHYSICAL SEQUENTIAL (PS)                                Y02134
*                                                                Y02134
RES14470 EQU   *                        TEST IF PS               Y02134
         TM    DXWDSORG,DCBDSGPS        TEST IF PS               Y02134
         BNO   RES14530                 BRANCH IF NOT PS         Y02134
*                                                                Y02134
*        QSAM                                                    Y02134
*                                                                Y02134
RES14480 EQU   *                        TEST IF BSAM OR QSAM     YM3070
         LA    RC,K96                   LN = 96 QSAM             Y02134
         TM    DXWMCR1,XC0              CHECK IF QSAM            Y02134
         BM    RES14490                 BRANCH IF QSAM           Y02134
         TM    DXWMCR2,XC0              CHECK IF QSAM            Y02134
         BM    RES14490                 BRANCH IF QSAM           Y02134
*                                                                Y02134
*        BSAM                                                    Y02134
*                                                                Y02134
         LA    RC,K88                   LN = 88 BSAM             Y02134
*                                                                Y02134
RES14490 EQU   *                        TEST FOR DUMMY DCB       Y02134
         L     R3,DXUCBADR              GET FIRST UCB ADDRESS    Y02134
         LTR   R3,R3                    CHECK FOR DUMMY DCB      Y02134
         BNZ   RES14495                 BRANCH IF NOT DUMMY      YM3066
*                                                                YM3066
         L     R3,DXTIOTAD              GET TIOT ADDRESS         YM3066
         LA    RD,K16                   INITIALIZE FOR A 1 WORD  YM3066X
                                        DEVICE INTERFACE FOR TSO YM3066
         TM    TIOELINK-TIOENTRY(R3),TIOTTERM  TEST FOR TSO TERM YM3856
         BO    RES14750                 BR IF YES TO GET CORE    YM3066
         LA    RD,K20                   DUMMY DCB - INDICATE     YM3066X
                                        NO DEVICE INTERFACE      YM3066
         B     RES14750                 GO GET THE CORE          YM3066
*                                                                YM3066
         USING UCBOB,R3                                          Y02134
RES14495 EQU   *                        CHECK IF UNIT RECORD     YM3066
         XR    RD,RD                    FULL DEVICE INTERFACE    Y02134
         TM    UCBTBYT3,UCB3UREC        CHECK IF UNIT RECORD     Y02134
         BNO   RES14750                 NOT U/R HAS DELTA = 0    Y02134
* CHECK IF PAPER TAPE                                            Y02134
         LA    RD,K8                    3 WORD DEVICE INTERFACE  Y02134
         CLI   UCBTBYT4,X'10'           PAPER TAPE - 2671        Y02134
         BE    RES14750                 BRANCH IF PAPER TAPE     Y02134
* CHECK IF OCR/MICR DEVICE                                       Y02134
         XR    RD,RD                    5 WORD DEVICE INTERFACE  YM3102X
                                        FOR AN OCR/MICR DEVICE   YM3102
         LA    RB,RESOCMIE-RESOCMI      NBR OF OCR/MICR DEVICES  Y02134
         LA    R1,RESOCMI               FIRST OCR/MICR UNIT TYPE Y02134
RES14500 EQU   *                        CHECK IF OCR/MICR        Y02134
         CLC   UCBTBYT4,K0(R1)          CHECK IF OCR/MICR        Y02134
         BE    RES14750                 BRANCH IF OCR/MICR       Y02134
         LA    R1,K1(R1)                INCREMENT TO NEXT ENTRY  Y02134
         BCT   RB,RES14500              CHECK NEXT ENTRY         Y02134
* CARD READER/PUNCH/PRINTER DELTA=16                             Y02134
         LA    RD,K16                   UNIT RECORD HAS 1 WORD   Y02134X
                                        DEVICE INTERFACE         YM3138
         B     RES14750                 GET CORE                 Y02134
         DROP  R3                                                Y02134
*                                                                Y02134
*        BPAM                                                    Y02134
*                                                                Y02134
RES14530 EQU   *                        CHECK IF BPAM            Y02134
         TM    DXWDSORG,DCBDSGPO        CHECK IF BPAM            Y02134
         BNO   RES14550                 BRANCH IF NOT BPAM       Y02134
         LA    RC,K88                   LN = 88, DELTA = 0       Y02134
         B     RES14750                 GET CORE                 Y02134
*                                                                Y02134
*        BDAM                                                    Y02134
*                                                                Y02134
RES14550 EQU   *                        CHECK IF BDAM            Y02134
         TM    DXWDSORG,DCBDSGDA        CHECK IF BDAM            Y02134
         BNO   RES14570                 BRANCH IF NOT BDAM       Y02134
         LA    RD,K16                   1 WORD DEVICE INTERFACE  YM4622
         LA    RC,K104                  LENGTH = 104, DELTA = 16 YM4622
         B     RES14750                 GET CORE                 Y02134
*                                                                Y02134
*        ISAM                                                    Y02134
*                                                                Y02134
RES14570 EQU   *                        CHECK IF ISAM            Y02134
         TM    DXWDSORG,DCBDSGIS        CHECK IF ISAM            Y02134
         BNO   RES14590                 BRANCH IF NOT ISAM       Y02134
         LA    RD,K16                   1 WORD DEVICE INTERFACE  Y02134
         LA    RC,K252                  LN = 252, DELTA = 16     Y02134
         B     RES14750                 GET CORE                 Y02134
*                                                                Y02134
*        BTAM                                                    Y02134
*                                                                Y02134
RES14590 EQU   *                        CHECK IF BTAM            Y02134
         TM    DXWDSORG,DCBDSGCX        CHECK IF BTAM            Y02134
         BNO   RES14630                 BRANCH IF NOT BTAM       Y02134
* PREFIX = 1 WORD FOR WTTA DEVICE                                Y02134
* PREFIX = 0 WORDS FOR ALL OTHER DEVICES                         Y02134
         L     R3,DXUCBADR              GET UCB ADDRESS          Y02134
         USING UCBOB,R3                 UCB ADDRESSABILITY       Y02134
         LA    RD,K20                   NO DEVICE INTERFACE      Y02134
         LA    RC,K56                   MINIMUM DCB LENGTH      YA02128
         CLI   UCBTBYT3,UCB3COMM        TEST FOR COMM EQUIP      Y02134
         BNE   RES14750                 NO - DEFAULT MIN DCB     Y02134
         LA    R1,K6                    WTTA INDICATOR           Y02134
         XR    RB,RB                    CLEAR WORK REGISTER      Y02134
         IC    RB,UCBTBYT4              GET DEVICE TYPE          Y02134
         SRL   RB,K4                    ALIGN BITS 0-3           Y02134
         CR    R1,RB                    CHECK IF WTTA            Y02134
         BNE   RES14600                 NO - THEN NO DEV INTF    Y02134
         LA    RD,K16                   WTTA HAS 1 WORD DEV INTF Y02134
* LENGTH = 100 FOR BI-SYNC                                       Y02134
* LENGTH = 56 FOR NOT BI-SYNC                                   YA02128
RES14600 EQU   *                        FIGURE OUT THE LENGTH    Y02134
         LA    RC,K100                  LENGTH BI-SYNC DCB       Y02134
         LA    R1,K7                    ID SYNC ADAPTOR TYPE I   Y02134
         CR    R1,RB                    CHK IF BI-SYNC ADAPTOR   Y02134
         BE    RES14750                 BRANCH IF YES            Y02134
         LA    R1,K9                    ID SYNC ADAPTOR TYPE II  Y02134
         CR    R1,RB                    CHK IF BI-SYNC ADAPTOR   Y02134
         BE    RES14750                 YES - GO GET CORE        Y02134
         DROP  R3                                                Y02134
* NOT BI-SYNC                                                    Y02134
         LA    RC,K56                   MINIMUM DCB LENGTH      YA02128
         B     RES14750                 GET CORE FOR DCB         Y02134
*                                                                Y02134
*        TCAM                                                    Y02134
*                                                                Y02134
RES14630 EQU   *                        CHK IF TCAM LINE GROUP   Y02134
         TM    DXWDSRG2,DCBDSGTX        CHK IF TCAM LINE GROUP   Y02134
         BNO   RES14640                 BRANCH IF NOT TX         Y02134
         MODESET KEYADDR=DXUKEY,WORKREG=11  DCB IN USER CORE     Y02134
         IC    RC,DCBOFLGS+K4           DCBILCT                  Y02134
         MODESET EXTKEY=DATAMGT         RETURN TO O/C/E KEY      Y02134
         SLL   RC,K2                    NUMBER OF BYTES          Y02134
         LA    RC,K60(,RC)              BASE DCB = 60            Y02134
         LA    RD,K20                   DELTA = 20               Y02134
         B     RES14750                 GET CORE                 Y02134
RES14640 EQU   *                        CHECK IF TCAM            Y02134
         TM    DXWDSRG2,DCBDSGTQ        CHECK IF TCAM            Y02134
         BNO   RES14670                 BRANCH IF NOT TCAM       S22024
         LA    RC,K64                   LN = 64                  YM3933
         LA    RD,K20                   DELTA = 20               Y02134
         B     RES14750                 GET CORE                 Y02134
*                                                                S22024
RES14670 EQU   *                        TEST FOR 3705            S22024
         TM    DXWDSRG2,DCBDSGTR        TEST FOR A 3705          S22024
         BNO   RES14680                 BRANCH IF NOT            S22024
         LA    RC,K56                   DCB LENGTH = 56 BYTES    S22024
         LA    RD,K8                    DELTA = 8 BYTES SINCE    S22024X
                                        DCB HAS A 3 WORD DEVICE  S22024X
                                        DEPENDENT SECTION        S22024
         B     RES14750                 GO GET THE CORE          S22024
*                                                                S22024
RES14680 EQU   *                        CHECK FOR GAM            Y02134
         TM    DXWDSRG2,DCBDSGGS        CHECK IF GAM             Y02134
         BNO   RES14690                 UNKNOWN DSORG            YM3070
         LA    RC,K52                   LN = 52                  Y02134
         B     RES14750                 GET CORE                 Y02134
*                                                                YM3070
RES14690 EQU   *                        UNKNOWN DSORG            YM3070
         OI    DXWCOPYE,X04             SET UNKNOWN DSORG FLAG   YM3070
         B     RES14480                 GO ASSUME DSORG IS PS    YM3070
*                                                                Y02134
* INVALID INITIALIZATION OR INITIAL COPY                         Y02134
*                                                                Y02134
RES14700 EQU   *                        DDNAME MISSING           Y02134
         OI    DXWCOPYE,X02             SET DDNAME MISSING BIT   Y02134
         B     RES14720                 CHECK IF COPY REQUEST    Y02134
RES14710 EQU   *                        SET ERROR INIT/COPY      Y02134
         OI    DXWCOPYE,X01             SET ERROR INIT/COPY BIT  Y02134
RES14720 EQU   *                        ZERO POINTERS            Y02134
         XC    DXDSABAD,DXDSABAD        ZERO DSAB POINTER        Y02134
         XC    DXTIOTAD,DXTIOTAD        ZERO TIOT ENTRY POINTER  Y02134
         BXLE  R7,R7,RES14950           BRANCH IF NO COPY        Y02134
         LA    RC,K52                   MINIMUM DCB LENGTH       Y02134
         LA    RD,K40                   GET FOUNDATION ONLY      Y02134
*
* THIS SECTION GETS THE CORE FOR THE PROTECTED (COPIED) DCB.
*
*        THE CALLER MUST BE IN KEY 5.
*        RC CONTAINS THE LENGTH.
*        RD CONTAINS THE DEAD SPACE IN FRONT OF THE DCB.
*
RES14750 EQU   *                        GET CORE FOR THE DCB     Y02134
         LTR   RC,RC                    CHECK IF ANY CORE TO GET Y02134
         BZ    RES14800                 BRANCH IF NOT            Y02134
         TM    DXWCOPYE,X04             TEST IF UNKNOWN DSORG    YM3070
         BNO   RES14760                 BRANCH IF DSORG KNOWN    YM3070
         STH   RC,DXUDCBML              SAVE BSAM/QSAM LENGTH    YM3070
         LA    RC,K252                  SET UP TO GET LARGEST    YM3070X
                                        (ISAM) DCB LENGTH        YM3070
RES14760 EQU   *                        GET CORE FOR DCB         YM3070
         STM   RC,RF,DXREGD             SAVE RC, RD, CALLER'S    YM7079X
                                        RETURN ADDR, & CALLER'S  YM7079X
                                        REG SAVE AREA ADDRESS    YM7079
         LA    RD,K96                   MINIMUM GETMAIN LEN    @ZA01348
         C     RD,DXREGD                IS DCB LENGTH GE 96?   @ZA01348
         BNH   RES14765                 YES,CONTINUE           @ZA01348
         LR    RC,RD                    NO, SET LEN TO 96      @ZA01348
RES14765 EQU   *                                               @ZA01348
         LA    R6,IECEXTPR-IECPREFX(,R6) ADDR OF REGISTER SAVE   Y02134
         IECRES GET,LV=(RC),A=(R6),STM=(RCORE,R7,DXREG9),        YM7079X
               ID=DCB,PREFIX=YES        GET COPY AREA            Y02134
*
         LM    RC,RF,DXREGD             RESTORE RC, RD, CALLER'S YM7079X
                                        RETURN ADDR, & CALLER'S  YM7079X
                                        REG SAVE AREA ADDRESS    YM7079
         ST    R1,DXPDCBAD              SAVE ADDR PROTECTED COPY Y02134
         LR    RDCB,R1                  POINT TO PROTECTED DCB   Y02134
         STH   RD,DXUDCBPL              SAVE DEAD SPACE LENGTH   Y02134
         TM    DXWCOPYE,X04             TEST IF UNKNOWN DSORG    YM3070
         BNO   RES14770                 BRANCH IF DSORG KNOWN    YM3070
         LH    RC,DXUDCBML              RELOAD SAVED LENGTH      YM3070
         NI    DXWCOPYE,X'FF'-X04       RESET UNKNOWN DSORG BIT  YM3070
*                                                                YM3070
RES14770 EQU   *                        SAVE REAL LENGTH OF DCB  YM3070
         SR    RC,RD                    REAL LENGTH OF DCB       Y02134
         STH   RC,DXUDCBML              SAVE REAL LENGTH OF DCB  Y02134
         MVC   DCBDDNAM(L'DXWFOUN),DXWFOUN  SET ORIG FOUN IN DCB Y02134
         MVC   DCBDSORG,DXWDSORG        SET ORIG DSORG IN DCB    Y02134
*                                                                Y02134
         L     R6,IECUPRML-IECEXTPR(,R6)  PT USER PLIST IN W/A   Y02134
         L     RB,DXUDCBAD              ADDRESS OF USER'S DCB    Y02134
RES14780 EQU   *                        CHECK IF ADDR IN LIST    Y02134
         CLM   RB,B'0111',K1(R6)        CHECK IF ADDR IN LIST    Y02134
         BE    RES14790                 BRANCH IF YES            Y02134
         TM    PLISTOPT(R6),LASTNTRY    TEST IF END OF PLIST     Y02134
         BO    RES14800                 YES - THEN NOT IN LIST   Y02134
         LA    R6,K4(R6)                SET NEXT ENTRY           Y02134
         B     RES14780                 KEEP LOOKING             Y02134
RES14790 EQU   *                        REPLACE USER POINTER     Y02134
         STCM  R2,B'0111',K1(R6)        REPLACE USER PTR WITH PROTECT  *
                                        COPY ADDR IN USER PARAMETER    *
                                        LIST IN THE WORK AREA    Y02134
         EJECT                                                   Y02134
***                                                              Y02134
*                                                                Y02134
*        DCB COPY LOGIC                                          Y02134
*                                                                Y02134
***                                                              Y02134
RES14800 EQU   *                        DCB COPY                 Y02134
         BXLE  R7,R7,RES14820           BR COPY FROM WORK AREA   Y02134
*                                                                Y02134
* COPY FROM THE USER'S DCB TO THE WORK AREA                      Y02134
*                                                                Y02134
         L     RDCB,DXPDCBAD            POINT TO PROTECTED COPY  Y02134
         MVC   DXWFOUN,DCBDDNAM         GET ORIG FOUNDATION      Y02134
         MVC   DXWDSORG,DCBDSORG        GET ORIGINAL DSORG       Y02134
         L     R1,DXPDCBAD              TARGET = PROTECTED COPY  Y02134
         L     R2,DXUDCBAD              FROM USER COPY           Y02134
         AH    R1,DXUDCBPL              BUMP PAST DEAD SPACE     Y02134
         AH    R2,DXUDCBPL              BUMP PAST DEAD SPACE     Y02134
         LH    R3,DXUDCBML              SET LENGTH OF MOVE       Y02134
         BAL   RD,RES14850              MOVE USER TO US          Y02134
*
         L     RDCB,DXPDCBAD            POINT TO PROTECTED COPY  Y02134
         LA    RC,ALLBITS-DCBOFIOF      SET BUSY OFF MASK        Y02134
         TM    DCBOFLGS,DCBOFIOF        CHK IF BUSY ON IN USER   Y02134
         BNO   RES14805                 BRANCH IF NOT ON         Y02134
         LA    RC,ALLBITS               SET BUSY ON MASK         Y02134
RES14805 EQU   *                        SET BUSY ON/OFF          Y02134
         IC    RD,DXWOFLGS              GET ORIGINAL OPEN FLAGS  Y02134
         NR    RD,RC                    SET BUSY ON/OFF          Y02134
         STC   RD,DXWOFLGS              SET IN PROTECTED COPY    Y02134
         MVC   DCBDDNAM(L'DXWFOUN),DXWDDNAM  SET ORIG FOUNDATION Y02134
         BXLE  R7,R7,RES14816           BRANCH IF NOT INIT       Y02134
*                                                                YM3136
* SET BUSY BIT IN BOTH THE USER'S DCB AND THE COPIED DCB         YM3136
*                                                                YM3136
         TM    DXWCOPYE,ALLBITS         CHECK IF ERROR           YM3136
         BM    RES14816                 BRANCH IF AN ERROR       YM3136
         TM    DCBOFLGS,DCBOPEN         TEST IF OPEN             YM3800
         BNO   RES14808                 BRANCH IF NOT OPEN       YM3800
         TM    DCBMACRF,DCBMEXCP        TEST FOR EXCP            YM3800
         BO    RES14812                 BRANCH IF EXCP           YM3800
         B     RES14810                 BRANCH TO TEST DSORG     YM3800
RES14808 EQU   *                        EXCP TEST IF UNOPENED    YM3800
         TM    DCBMACR,DCBMEXCP         TEST FOR EXCP            YM3800
         BO    RES14812                 BRANCH IF EXCP           YM3800
RES14810 EQU   *                        TEST FOR ACB/AMB         YM3800
         TM    DCBDSRG2,DCBACBM         TEST FOR ACB/AMB         YM3800
         BNO   RES14812                 BRANCH IF NOT            YM3800
         CLI   AMBID-IDAAMB(RDCB),AMBIDENT  TEST FOR AMB         YM3800
         BE    RES14814                 DO NOT SET BUSY BIT ON   YM3800X
                                        IN USER'S AMB            YM3800
RES14812 EQU   *                        SET BUSY BIT IN DCB      YM3800
         MODESET KEYADDR=DXUKEY,WORKREG=11  SWITCH TO USER KEY   YM3800
         L     RB,DXUDCBAD              LOAD USER'S DCB ADDRESS  YM3136
         OI    DCBOFLGS-IHADCB(RB),DCBOFIOF  SET BUSY BIT ON     YM3136X
                                        IN USER'S DCB            YM3136
         MODESET EXTKEY=DATAMGT         RETURN TO DATAMGT KEY    YM3800
RES14814 EQU   *                        SET BIT IN PROT'D DCB    YM3800
         OI    DCBOFLGS,DCBOFIOF        SET BUSY BIT ON IN       YM3136X
                                        COPIED (PROTECTED) DCB   YM3136
RES14816 EQU   *                        MOVE IN ORIGINAL DSORG   Y02134
         MVC   DCBDSORG,DXWDSORG        SET ORIGINAL DSORG       Y02134
         B     RES14990                 EXIT                     Y02134
         EJECT
*                                                                Y02134
* COPY FROM THE WORK AREA TO THE USER'S DCB                      Y02134
*                                                                Y02134
RES14820 EQU   *                        COPY FROM WORK AREA      Y02134
         MODESET KEYADDR=DXUKEY,WORKREG=11  ASSUME USER KEY      Y02134
         L     R0,DXUDCBAD              TARGET = USER'S DCB      Y02134
         L     R2,DXPDCBAD              FROM PROTECTED COPY      Y02134
         AH    R0,DXUDCBPL              BUMP PAST DEAD SPACE     Y02134
         AH    R2,DXUDCBPL              BUMP PAST DEAD SPACE     Y02134
         LH    R1,DXUDCBML              LENGTH OF DCB            Y02134
         LR    R3,R1                    LENGTH OF FROM SAME      Y02134
* AN 0C4 ABEND AT THE NEXT INSTRUCTION IS CAUSED BY A USER ERROR.
         MVCL  R0,R2                    COPY DCB                 Y02134
         MODESET EXTKEY=DATAMGT         RESTORE ENTRY KEY        Y02134
         B     RES14990                 EXIT                     Y02134
         EJECT                                                   Y02134
*                                                                Y02134
*        COPY FROM USER DCB TO WORK AREA COPY                    Y02134
*                                                                Y02134
*        R1 POINTS TO THE WORK AREA COPY (IN KEY 5).             Y02134
*        R2 POINTS TO THE USER'S DCB (IN USER KEY).              Y02134
*        R3 CONTAINS THE LENGTH OF THE MOVE IN BYTES.            Y02134
*        RD CONTAINS THE RETURN ADDRESS.                         Y02134
*                                                                Y02134
RES14850 EQU   *                        COPY FROM USER'S DCB     Y02134
         IC    RC,DXUKEY                GET CALLER'S KEY         YM1391
         L     RB,DXUDCBAD              LOAD USER'S DCB ADDRESS  YM3001
         MODESET EXTKEY=ZERO            ASSUME KEY ZERO          YM1391
         TM    DCBOFLGS-IHADCB(RB),DCBOPEN  TEST IF OPEN         YM3001
         BNO   RES14860                 BRANCH IF NOT            YM3001
         TM    DCBMACRF-IHADCB(RB),DCBMEXCP  TEST FOR EXCP       YM3001
         BO    RES14880                 BRANCH IF EXCP           YM3001
         B     RES14870                 BRANCH TO TEST DSORG     YM3001
RES14860 EQU   *                        TEST ON UNOPEN DCB       YM3001
         TM    DCBMACR-IHADCB(RB),DCBMEXCP  TEST FOR EXCP        YM3001
         BO    RES14880                 BRANCH IF EXCP           YM3001
RES14870 EQU   *                        TEST FOR ACB/AMB         YM3001
         TM    DCBDSRG2-IHADCB(RB),DCBACBM  TEST FOR ACB/AMB     YM3001
         BNO   RES14880                 BRANCH IF NOT            YM3001
         CLI   AMBID-IDAAMB(RB),AMBIDENT  TEST FOR AMB           YM3001
         BNE   RES14880                 BRANCH IF NOT AMB        YM3001
         SR    RC,RC                    SET KEY = 0 IN REG       YM1391
*                                                                YM3001
RES14880 EQU   *                        PROPER KEY IN REG 12     YM3001
         SPKA  0(RC)                    ASSUME PROPER KEY        YM3001
         IC    R0,K0(R2)                GET BYTE                 Y02134
         MODESET EXTKEY=DATAMGT         KEY OF WORK AREA         Y02134
         STC   R0,K0(R1)                MOVE BYTE TO WORK AREA   Y02134
         LA    R1,K1(R1)                POINT TO NEXT SLOT       Y02134
         LA    R2,K1(R2)                POINT TO NEXT FROM SLOT  Y02134
         BCT   R3,RES14880              BRANCH IF MORE TO MOVE   YM3001
         BR    RD                       RETURN                   Y02134
         EJECT                                                   Y02134
*
*        EXIT ROUTINE FROM INIT                                  Y02134
*
RES14950 EQU   *                        ERROR RETURN             Y02134
RES14990 EQU   *                        EXIT ROUTINE             Y02134
         XC    DXWFOUN,DXWFOUN          CLEAR WORK AREA          Y02134
         XC    DXWDSORG,DXWDSORG        CLEAR WORK AREA          Y02134
         L     RDCB,DXPDCBAD            ADDRESS OF PROTECTED DCB Y02134
         L     RES,CVTPTR               ADDRESS OF CVT           Y02080
         L     RES,CVTDMSR-CVT(,RES)    ADDRESS OF IFG019RA      Y02080
         BR    RET                      RETURN                   Y02134
         EJECT
***********************************************************************
*                                                                     *
*        CONSTANTS                                                    *
*                                                                     *
***********************************************************************
*
ISAM     DEBCHK AM=ISAM,MF=L            ISAM DEB TYPE            YM1240
*
MASKTBLE DS    0F                       TABLE OF POINTERS TO     Y02134
*                                       TABLES OF BXLE MASKS     Y02134
         DC    A(RESNOCPY)              ADDR OF MASKS IF NO      Y02134
*                                       DCB COPY REQUESTED       Y02134
         DC    A(RESTOWK)               ADDR OF MASKS IF DCB     Y02134
*                                       COPY IS TO WORKAREA      Y02134
         DC    A(RESFRWK)               ADDR OF MASKS IF DCB     Y02134
*                                       COPY IS FROM WORKAREA    Y02134
RESNOCPY DS    0F                       TABLE OF MASKS: DCB      Y02134
*                                       COPY NOT REQUESTED       Y02134
         DC    BL1'01111100',AL3(1)     INVALID                  Y02134
         DC    BL1'00111000',AL3(1)     INIT, DEB=YES, NOCOPY    Y02134
         DC    BL1'00011000',AL3(1)     INIT, DEB=NO, NOCOPY     Y02134
RESTOWK  DS    0F                       TABLE OF MASKS: DCB      Y02134
*                                       COPY TO WORKAREA         Y02134
         DC    BL1'01100100',AL3(1)     COPY TOWKAR              Y02134
         DC    BL1'00100000',AL3(1)     INIT, DEB=YES, COPY      Y02134
         DC    BL1'00000000',AL3(1)     INIT, DEB=NO, COPY       Y02134
RESFRWK  DS    0F                       TABLE OF MASKS: DCB      Y02134
*                                       COPY FROM WORKAREA       Y02134
         DC    BL1'01101100',AL3(1)     COPY FRWKAR              Y02134
         DC    BL1'01111100',AL3(1)     INVALID                  Y02134
         DC    BL1'01111100',AL3(1)     INVALID                  Y02134
*
VTAMDDN  DC    X'FF00000000000000'      VTAM DDNAME TEST         Y02134
*                                                                Y02134
*        OCR/MICR DEVICES - FOR DCBCOPY                          Y02134
*                                                                Y02134
RESOCMI  EQU   *                        OCR/MICR TABLE           Y02134
         DC    X'16'                    SENECA                   Y02134
         DC    X'17'                    SHARK                    Y02134
         DC    X'18'                    TCR                      Y02134
         DC    X'1A'                    1285 OPTICAL READER      Y02134
         DC    X'1B'                    1287 OPTICAL READER      Y02134
         DC    X'1C'                    1288 OPTICAL READER      Y02134
         DC    X'1D'                    1419 MICR PRIMARY        Y02134
         DC    X'1E'                    1419 MICR SECONDARY      Y02134
         DC    X'1F'                    1275 OPTICAL READER    @ZA03157
         DC    X'00'                    PATCH                    Y02134
         DC    X'00'                    PATCH                    Y02134
RESOCMIE EQU   *                        END OCR/MICR TABLE       Y02134
         DS    0H                       ALIGN                    Y02134
         EJECT                                                   YM3066
***********************************************************************
*        PATCH AREA FOR THE SECOND PAGE OF IFG019RA
***********************************************************************
*
         XCTLTABL LENGTH=,PATCH=104,BRT=YES                      YM3138
         EJECT
         IECDSECS CVT,PSA,MAIN,PREFX,RRPL,WTG,ACB,UCB,ASCB,      Y02134X
               CDE,LPDE,DCB,                                     Y02134X
               DSAB,QDB,JSCB,TCB,RB,IEZDEB,TIOT,EXPAND=YES       Y02134
DCBERROP EQU   IHADCB+33                ERROR RECOVERY PROC BITS Y02080
DCBERPC  EQU   BIT4                     EROPT=C FOR BTAM         Y02080
         IEFQMIOP                                                Y02134
QMIEND   DS    0D                                                Y02134
         EJECT                                                   YM3066
         IEFJESCT                                                Y02134
         EJECT                                                   YM1360
ENQPARMS DSECT                          ENQ PARAMETER LIST DSECT Y02134
ENQLIST  DS    0C                       ENQ MACRO AREA           Y02134
         ORG   *+ENQLTH                                          Y02134
ENQMIN   DS    0CL6                     MINOR NAME               Y02134
ENQASID  DS    CL2                      ASID AREA                Y02134
ENQDSABQ DS    CL4                      DSAB QDB ADDRESS AREA    Y02134
ENQPARML EQU   *-ENQLIST                LENGTH OF ENQPARMS       Y02134
         SPACE 2                                                 YM3066
DEQPARMS DSECT                          DEQ PARAMETER LIST DSECT Y02134
DEQLIST  DS    0C                       DEQ MACRO AREA           Y02134
         ORG   *+DEQLTH                                          Y02134
DEQMIN   DS    0CL6                     MINOR NAME               Y02134
DEQASID  DS    CL2                      ASID AREA                Y02134
DEQDSABQ DS    CL4                      DSAB QDB ADDRESS AREA    Y02134
DEQPARML EQU   *-DEQLIST                LENGTH OF DEQPARMS       Y02134
         EJECT                                                   YM3066
         IDAAMB                                                  YM1391
         END
