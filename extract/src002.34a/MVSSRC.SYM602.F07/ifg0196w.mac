         TITLE 'IFG0196W/OPEN - ACCESS METHOD EXECUTOR RETURN FUNCTION,X
               JFCB TO DSCB MERGE'
         COPY  LCGASMSW
IFG0196W CSECT
         ENTRY IGG0190S                                          Y02080
IGG0190S EQU   IFG0196W                 ALLIAS ENTRY POINT       Y02080
***********************************************************************
*                                                                     *
*                                                                     *
*        VS2 RELEASE 03 DELETIONS/CHANGES                             *
*0000161108,163200-163950                                       Y30ASJC
*C000364000,A00036710-367070                                   @ZA10215
*C000                                                          @ZA13601
*A37920-37990                                                  @ZA32721
*                                                                     *
* MODULE NAME = IFG0196W (OS/VS2)                                     *
*                                                                     *
* DESCRIPTIVE NAME = ACCESS METHOD EXECUTOR RETURN FUNCTION, JFCB TO  *
*                    DSCB MERGE                                       *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = RELEASE 2, LEVEL 0                                         *
*                                                                     *
* FUNCTION =                                                          *
*        1. OPEN ACCESS METHOD RETURN FUNCTIONS:                      *
*           A. RESTORE THE WTG TABLE ENTRIES FOR USE BY IFG019RA      *
*           THE ACCESS METHOD EXECUTORS ZEROED THE IDTTR'S.           *
*                                                                     *
*           B. VALIDITY CHECK THE DEB.                                *
*                                                                     *
*        2. RESUME PARALLEL PROCESSING WITH RESIDENT ROUTINE.         *
*                                                                     *
*        3. TEST IF CHECK POINT DATA SET INDICATOR IN THE DSAB IS ON. *
*        IF IT IS, TURN ON THE SWITCH IN THE DSCB AND SET THE DSCB    *
*        MODIFIED SWITCH ON.                                          *
*                                                                     *
*        4. MERGE JFCB FIELDS TO THE DSCB.                            *
*                                                                     *
*        5. IF THE DSCB HAS BEEN MODIFIED, WRITE BACK THE DSCB TO THE *
*        VTOC.                                                        *
*                                                                     *
* NOTES = SEE BELOW                                                   *
*                                                                     *
*    DEPENDENCIES =                                                   *
*            CLASS ONE CHARACTER CODE.  THE EBCDIC CHARACTER CODE     *
*            WAS USED FOR ASSEMBLY.  THE MODULE MUST BE REASSEMBLED   *
*            IF A DIFFERENT CHARACTER SET IS USED FOR EXECUTION.      *
*                                                                     *
*    RESTRICTIONS = NONE                                              *
*                                                                     *
*    REGISTER CONVENTIONS =                                           *
*            R2 POINTS TO DCB                                         *
*            R4 POINTS TO OPEN WORK AREA                              *
*            R5 POINTS TO THE RESIDENT ROUTINE                        *
*            R6 POINTS TO THE WTG TABLE                               *
*            R7 POINTS TO THE CURRENT PARAMETER LIST ENTRY            *
*            R8 POINTS TO THE CURRENT WTG TABLE ENTRY                 *
*            R9 POINTS TO THE DD ENTRY IN THE TIOT                    *
*            R10 POINTS TO THE UCB                                    *
*                                                                     *
*    PATCH LABEL = SEE NEXT TO LAST LABEL BEFORE ORG STATEMENT AT END *
*                  OF LISTING.                                        *
*                                                                     *
* MODULE TYPE = CONTROL (OPEN, CLOSE, EOV DATA MANAGEMENT)            *
*                                                                     *
*    PROCESSOR = ASSEMBLER XF                                         *
*                                                                     *
*    MODULE SIZE = SEE EXTERNAL SYMBOL DICTIONARY OR LOC FIELD ON     *
*                  ORG STATEMENT AT END OF LISTING                    *
*                                                                     *
*    ATTRIBUTES = REENTRANT, REFRESHABLE,READ-ONLY, ENABLED,          *
*                  PRIVILEGED, SUPERVISOR STATE, DATA MANAGEMENT KEY, *
*                  LINK PACK AREA RESIDENT/PAGEABLE                   *
*                                                                     *
* ENTRY POINT =                                                       *
*        IFG0196W OR IGG0190S                                         *
*                                                                     *
*    PURPOSE = SEE FUNCTION                                           *
*                                                                     *
*    LINKAGE =                                                        *
*        FROM IGG0193K:                                               *
*           LA   REG15,WTGPREFX(,RWTG)                                *
*           L    15,0(,15)                                            *
*           STM  0,14,IECREGSV-IECPREFX(15)                           *
*           MVC  WTGMODNM+6(2,6),0(RWTGC)                             *
*           MVC  WTGMODEP+1(3,6),2(RWTGC)                             *
*           LA   6,WTGMNODNM(,6)                                      *
*           L    5,CVTPTR(0,0)                                        *
*           L    5,CVTDMSR-CVT(,5)                                    *
*           B    20(,5)                                               *
*                                                                     *
* INPUT =                                                             *
*        JFCB IN MAIN WORK AREA.                                      *
*        FORMAT 1 DSCB IN MAIN WORK AREA.                             *
*                                                                     *
* OUTPUT =                                                            *
*        REINITIALIZED WTG ENTRIES                                    *
*        UPDATED FORMAT 1 DSCB IN VTOC.                               *
*                                                                     *
* EXIT-NORMAL =                                                       *
*        IFG0196X                                                     *
*        IFG0198N                                                     *
*                                                                     *
* EXIT-ERROR = NONE                                                   *
*                                                                     *
* EXTERNAL REFERENCES = SEE BELOW                                     *
*                                                                     *
*    ROUTINES = NONE                                                  *
*                                                                     *
*    DATA AREAS = STANDARD                                            *
*                                                                     *
*    CONTROL BLOCK = STANDARD                                         *
*                                                                     *
* TABLES = STANDARD                                                   *
*                                                                     *
* MACROS = IECEQU, IECRES, IECDSECS, MODESET, DEBCHK, EXCP, XCTLTABL  *
*                                                                     *
* CHANGE ACTIVITY = NEW RELEASE (LEVEL 0)                             *
*                                                                     *
***********************************************************************
         EJECT
         IECDSECS CVT,TCB,TIOT,UCB,DCB,ACB,MAIN,WTG,DSAB,        Y02134*
               IEZDEB,PREFX,RRPL                                 Y02144
TIOTSPOL EQU   X'06'
         IECEQU AOS=YES,IEZDEB=YES                               Y02134
***********************************************************************
*                                                                     *
*    OPEN AM RETURN FUNCTIONS:                                        *
*                                                                     *
*    RESTORE THE WTG TABLE ENTRIES FOR USE BY THE IFG019RA            *
*    RESIDENT ROUTINE, SINCE THE ACCESS METHOD EXECUTORS ZEROED       *
*    THE IDTTR'S WHEN THEY WERE THROUGH PROCESSING.                   *
*    DEB VALIDITY CHECKING IS ACCOMPLISHED VIA A DEB VALIDITY CHECK   *
*    ROUTINE.                                                         *
*                                                                     *
*    REGISTERS 9-14,0-1 ARE RESTORED IN CASE A PARALLEL OPEN DCB IS   *
*    GOING TO A DEFERED ABEND AND DID NOT GO THROUGH THE EXECUTORS,   *
*    IN WHICH CASE THEY ARE SIGNIFICANT, ALTHOUGH NOT USED FOR        *
*    PROCESSING.                                                      *
*                                                                     *
***********************************************************************
*
         USING IHADCB,RDCB              DEFINE BASE TO USER'S DCB
         USING FORCORE,RCORE            DEFINE BASE TO MAIN WORK AREA
         USING WTG,RWTG                 DEFINE BASE TO WTG TABLE
         USING TIOENTRY,RTIOT           DEFINE BASE TO TIOT DD ENTRY
         USING UCBOB,RUCB               DEFINE BASE TO MAIN UCB
         USING DEBBASIC,RDEB            DEFINE BASE TO DEB       Y02134
*
         BALR  RBASE,0                  ESTABLISH BASE REGISTER
         USING *,RBASE                  DEFINE BASE REGISTER
*
         CLI   WTGMODNM+K1,C'G'         IS ENTRY FROM IGG019XX EXECUTOR
         BE    OFN00400                 BR IF YES TO INITIALIZE
*
OFN00100 B     OFN00200(RET)            BR TO INDICATED FUNCTION
*
OFN00200 B     OFN10000                 RET=0 CONTINUE NORMAL OPEN
         B     OFN23600                 RET=4 NO LONGER OPENING
*
***********************************************************************
*
*  REINITIALIZE WHERE-TO-GO TABLE ENTRY IDTTR'S AND REGISTERS AFTER
*  RECEIVING CONTROL FROM IGG019XX ACCESS METHOD EXECUTOR MODULES.
*
OFN00400 EQU   *                        ACCESS METHOD RETURN ENTRY
         L     RC,WTGPREFX              GET PTR TO WTG PREFIX    Y02144
         L     RC,IECRRPRM-IECPREFX(,RC) GET RRPLIST PTR         Y02144
         OI    RRFLAGS1-RRPLIST(RC),RRFAMEXR SHOW A.M. EXECUTOR  Y02144
*                                       RETURNED CONTROL         Y02144
         IECRES LOAD,MODNM=THISMOD,PREFIX=WTGPREFX,BRANCH=NO     Y02080*
                                        GIVE OPT TRACE A SHOT    Y02080
         XC    WTGMODEP,WTGMODEP        CLEAR NEXT MOD ADDR      Y02080
         LR    RPARC,RPAR               POINT TO FIRST ENTRY IN LIST
         LA    RWTGC,WTGENTRY           POINT TO FIRST WTG TABLE ENTRY
         USING WTGENTRY,RWTGC           DEFINE BASE TO CURRENT WTG
*
OFN00600 EQU   *                        PROCESS DCB
         L     RCORE,WTGCORE-K1         LOAD CURRENT WORK AREA ADDR
         LA    RCORE,0(RCORE)           CLEAR HIGH ORDER BYTE
         LTR   RCORE,RCORE              TEST IF DCB HAS WORK AREA
         BZ    OFN01000                 BR IF NO TO PROCESS NEXT DCB
         MVC   WTGIDTTR,ID6W6W          SET ID TTR TO CURRENT ID YM1342
         MVI   DXRESIND,K0              SET INDICATOR TO XCTL    YM1342
         LA    RET,K4                   DEFAULT BR INDEX VALUE   YM1342
         ST    RET,DXREGE               SAVE FOR LOAD BY 19RA    YM1342
         L     RDCB,PLISTDCB(,RPARC)    LOAD CURRENT DCB ADDR   YM01212
         TM    DCBOFLGS,DCBOBUSY        IS COPIED DCB BUSY?      Y02080
         BZ    OFN01000                 NO, DO NOT USE USERS     Y02080*
                                        DCBOFLGS                 Y02080
*
*
         L     RDCB,DXUDCBAD            GET PTR TO USER'S DCB    Y02082
         MODESET KEYADDR=DXUKEY,WORKREG=1 ASSUME USER'S KEY      Y02082
         OC    DCBOFLGS,DCBOFLGS        TOUCH THE USER'S MEMORY  Y02082
         LA    R0,ALLBITS-DCBOBUSY      SET MASK FOR BUSY BIT    YM3005
         IC    R1,DCBOFLGS              GET USER'S DCBOFLGS      Y02082
         MODESET EXTKEY=DATAMGT         RESUME DATA MGT KEY      Y02082
         OR    R0,R1                    COMBINE COPIED DCBOFLGS  YM3005
         L     RDCB,DXPDCBAD            WITH USER'S DCBOFLGS     YM3005
         IC    R0,DCBOFLGS              MAKING COPIED BUSY BIT   YM3005
         NR    R1,R0                    SAME AS USER'S BUSY BIT  YM3005
         STC   R1,DCBOFLGS              UPDATE DCBOFLGS IN COPY  Y02082
         TM    DCBOFLGS,DCBOLOCK+DCBOBUSY IS DCB BEING OPENED?   YM1342
         BNO   OFN01000                 BRANCH IF NOT            YM1342
*                                                                Y02004
* TEST FOR ACB                                                   Y02004
*                                                                Y02004
         TM    DCBMACRF,DCBMEXCP        IS ACCESS METHOD EXCP    Y02004
         BO    OFN00640                 YES, CANNOT BE AN ACB    Y02004
         TM    DCBDSRG2,ACBDORGA        IS CONTROL BLOCK AN ACB? Y02004
         BZ    OFN00640                 BRANCH IF NOT ACB       Y30ASJC
         CLI   ACBAMETH-IFGACB(RACB),ACBVTAM IF VTAM, NO DEBCHK Y30ASJC
         BE    OFN01000                 REG 14 SET TO 4         Y30ASJC
         B     OFN00670                 DEBCHK ACB              Y30ASJC
*
* TEST FOR SPOOLED DCB
*
OFN00640 EQU   *                        TEST FOR SPOOLED DCB     Y02004
         L     RTIOT,DXTIOTAD           RESET TIOT ENTRY ADDR    Y02134
*
         TM    TIOELINK,TIOTSPOL        SPOOLED DATA SET?        Y02120
         BZ    OFN00670                 BRANCH IF NO             Y02120
*
*        SPOOLED DCB'S DEB'S DEBDCBAD POINTS TO ACB SO NO DEBCHK Y02120
*        CAN BE DONE ON DCB - DEBECBAD POINTS TO SUBSYSTEM ACB   Y02120
*        DEBCHK THE ACB POINTED TO BY DEBECBAD                   Y02120
*
         L     RDEB,DCBDEBAD            GET DEB                  Y02120
         L     RET,DEBDCBAD             LOAD CI ACB FOR DEBCHK   Y02120
         DEBCHK (RET),AM=SUBSYS         DEBCHK THE CI ACB'S DEB  Y02120
         LA    R1,K0(R1)                CLEAR HIGH BYTE OF DEBAD Y02120
         LA    RDEB,K0(RDEB)            CLEAR HIGH BYTE OF DEBAD Y02120
         CR    RDEB,R1                  ARE DEBS EQUAL?          Y02120
         BNE   OFN00670                 BR IF NO TO FORCE DEBCHK Y02120
         XR    RET,RET                  BRANCH OFFSET            YM1342
         ST    RET,DXREGE               STORE BRANCH OFFSET      Y02120
         LA    RET,K8                   GET DEB EXT OFFSET       YM3051
         SR    R1,RET                   POINT TO DEB EXTN ADDR   Y02134
         MVC   DXDEBXAD+K1(K3),K1(R1)   DEB EXT ADDR TO WKAREA   Y02134
         B     OFN01000                 BRANCH TO CHECK NEXT DCB Y02120
OFN00670 EQU   *                        FORCE DEBCHK             Y01021
         L     R1,DXUDCBAD              POINT TO USER'S DCB      Y02082
         DEBCHK (R1)                    VALIDATE DEB             Y02082
         STCM  R1,B'0111',DCBDEBAD+K1   STORE VERIFIED DEBAD     Y02134
         L     RDCB,DXUDCBAD            ADDRESS USER DCB         Y02082
         MODESET KEYADDR=DXUKEY,WORKREG=13 ASSUME USER KEY       Y02082
* REPEAT DCB FIELD CHANGES                                       Y02082
         STCM  R1,B'0111',DCBDEBAD+K1   STORE VERIFIED DEBAD     Y02082
         MODESET EXTKEY=DATAMGT         RESUME DATA MGT KEY      Y02082
         L     RDCB,DXPDCBAD            ADDRESS COPY OF DCB      Y02082
*
*        SET A BRANCH INDEX VALUE OF 0 FOR RE-ENTRY INTO THIS    YM1342
*        MODULE IF A DCB OR NON-VTAM ACB IS BEING OPENED.        YM1342
*
         XR    RET,RET                  DCB STILL BEING OPEN     Y02134
         ST    RET,DXREGE               SET FOR LOAD BY IFG019RA YM1342
*
*        CHAIN DEB EXTENSION FOR ALL DCB/ACBS WHICH ARE STILL    Y02134
*        BEING PROCESSED (LOCK & BUSY BITS ON) OR WHICH HAVE THE Y02134
*        OPEN BIT ON BUT ARE NOT BEING PROCESSED AND FOR WHICH   Y02134
*        THE DEB EXTENSION HAS NOT ALREADY BEEN CHAINED.         Y02134
*        THIS IS NOT DONE FOR A SPOOLED DCB.                     Y02134
*
OFN00900 L     RDEB,DCBDEBAD            GET DEB ADDRESS          Y02134
         LA    RD,DEBBASIC              CLEAR HI BYTE OF DEB ADD Y02134
         LA    RC,DEBBASIC-DEBXTNP      OFFSET BACK TO DEBX PTR  Y02134
         SR    RD,RC                    RD POINTS TO DEBX PTR    Y02134
         USING DEBXTNP,RD                                        Y02134
         CLC   DEBXTNP,DXDEBXAD         IS DEBX ALREADY CHAINED? Y02134
         BE    OFN00950                 BRANCH IF YES            Y02134
         L     RC,DXDEBXAD              LOAD DEBX ADDR           Y02134
         USING DEBXTN,RC                DEB EXTENSION USING      Y02134
         ST    RC,DEBXTNP               PUT DEBX PTR IN DEB      Y02134
         LA    RDEB,DEBBASIC            CLEAR HI BYTE OF RDEB    Y02134
         ST    RDEB,DEBXDBPR            PUT DEB ADDR IN DEBX     Y02134
         DROP  RC,RD                                             Y02134
OFN00950 EQU   *                        DEBX ALREADY CHAINED
         OI    DEBFLGS1,DEBXTNIN        TURN ON DEB EXTENSION    Y02134
*                                       BIT                      Y02134
*
OFN01000 EQU   *                        ACB FPR VTAM
         TM    PLISTOPT(RPARC),LASTNTRY  CHECK FOR LAST DCB ENTRY
         BO    OFN01200                 BR IF YES
         LA    RPARC,K4(,RPARC)         ADVANCE TO NEXT DCB ENTRY
         LA    RWTGC,L'WTGENTRY(RWTGC)  ADVANCE TO NEXT WTG ENTRY
         B     OFN00600                 BR TO PROCESS NEXT DCB
*
***********************************************************************
*
*  LOCATE A DCB TO START PARALLEL PROCESSING.
*
OFN01200 EQU   *
         LA    RWTGC,WTGENTRY-WTG(,RWTG)  POINT TO FIRST ENTRY IN WTG
         LR    RPARC,RPAR               POINT TO FIRST DCB IN PARM LIST
         L     RES,CVTPTR               GET CVT ADDR
         L     RES,CVTDMSR-CVT(,RES)    LOAD ADDR IFG019RA ROUTINE
*
OFN01400 EQU   *                        FIND AN ACTIVE DCB
         CLC   WTGIDTTR(K2),ID6W6W      IS DCB ACTIVE IN THIS MODULE
         BE    OFN01600                 BR IF YES
*
         LA    RPARC,K4(RPARC)          ADVANCE TO NEXT PARM DCB ADDR
         LA    RWTGC,L'WTGENTRY(RWTGC)  ADVANCE TO NEXT WTG ENTRY
         B     OFN01400                 BR TO FIND ACTIVE DCB
*
OFN01600 EQU   *                        ACTIVE DCB
         L     RDCB,PLISTDCB(,RPARC)    LOAD CURRENT DCB ADDR
         L     RCORE,WTGCORE-K1         LOAD CURRENT WORK AREA ADDR
*
         DROP  RWTGC                                             Y02080
*
         LM    RTIOT,RET,DXREG9         RESTORE REGISTERS 9-14
         LM    R0,R1,DXREG0             RESTORE REGISTERS 0-1
*
         B     OFN00100                 BR TO USE BRANCH TABLE
*
***********************************************************************
*
*  PARALLEL PROCESSING BY THE RESIDENT ROUTINE RESUMES HERE.
*
***********************************************************************
*
*  SAVE DCB MODIFICATION MASK IN DEB
*
OFN10000 EQU   *
         L     RDEB,DCBDEBAD            GET DEB ADDRESS          Y02134
         L     RF,DXDEBXAD              GET DEB EXTENSION ADDRESSY02134
         USING DEBXTN,RF                USING ON DEBX ADDR       Y02134
         OC    DEBXDCBM,JFCBMASK        MOVE DCB MASK TO DEBX    Y02134
         BZ    OFN10200                 BR IF NO MASK BITS SET
         OI    DEBOFLGS,DEBDCB          SET DCB MOD BIT IN DEB   Y02134
         XC    JFCBMASK(K4),JFCBMASK    CLEAR DCB MERGE MASK IN JFCB
OFN10200 EQU   *                        NO MASK BITS SET
*
         TM    JFCBMASK+K4,JFCMPSWD     DID DATA SET REQ A PASSWORD
         BZ    OFN10400                 BRANCH IF NO
         OI    DEBFLGS1,DEBPWCKD        IND PASSWORD HAS BEEN CHECKED
         NI    JFCBMASK+K4,X'FF'-JFCMPSWD  CLEAR JFCB PW REQ SWITCH
OFN10400 EQU   *                        DATA SET DID NOT REQ A PASSWORD
*
***********************************************************************
*
         L     RTIOT,DXTIOTAD           REESTABLISH TIOT ADDR    Y02134
         TM    TIOELINK,TIOTSPOL        SPOOLED DATA SET?        Y02120
         BM    OFN23000                 BRANCH IF YES            Y02120
*
         LA    RET,K4                   LOAD ENTRY CODE FOR NULL DS
         TM    JFCBMASK+K4,JFCMNULL     CHECK FOR NULL DATA SET
         BO    OFN23200                 BR IF YES
*
         L     RUCB,DXUCBADR            LOAD FIRST UCB ADDR      Y02082
*
         TM    UCBTBYT3,UCB3DACC        IS DEVICE DIRECT ACCESS
         BZ    OFN23000                 BR IF NO
*
***********************************************************************
*
         EJECT
***********************************************************************
*                                                                     *
*    OPEN FINAL JFCB TO DSCB MERGE FUNCTIONS:                         *
*                                                                     *
*    MERGES JFCB FIELDS TO THE DSCB.                                  *
*    IF THE DSCB HAS BEEN MODIFIED BY THIS MERGE OR BY ANY OTHER      *
*    FUNCTION, WRITES THE DSCB BACK TO THE VTOC.                      *
*                                                                     *
***********************************************************************
*
***********************************************************************
*
*  PROCESSING FOR DIRECT ACCESS ONLY.
*
OFN20000 EQU   *
         CLI   DSCFMTID,C'1'            CHECK FOR FORMAT 1 DSCB
         BNE   OFN23000                 BR IF NO, (FMT 4 DSCB)
*
         TM    JFCBIND1,JFCRLSE         CHECK FOR PARTIAL RELEASE
         BZ    OFN20200                 BR IF NO
         OI    DEBOFLGS,DEBOFRLS        SET PARTIAL RELEASE BIT IN DEB
*
OFN20200 EQU   *                        NOT A PARTIAL RELEASE
         L     RF,DXDSAB                CURRENT DSAB ADR         Y02083
         USING DSAB,RF                                           Y02083
         TM    DSABFLG4,DSABCKDS        CHK PT DS IND ON IN DSAB Y02083
         BNO   OFN20210                 NO                       Y02083
         OI    DSCDSIND,K1              SET IND ON IN DSCB       Y02083
         OI    JFCBMASK+K4,JFCMDMOD     SET DSCB MOD SW ON       Y02083
         DROP  RF                                                Y02083
OFN20210 EQU   *                        NO CHK PT DS IND IN DSAB Y02083
         TM    0(RPARC),PLISTUPD        OUTPUT, OUTIN, UPDATE    A50703
         BNO   OFN22000                 BR IF NO, NO MERGE FOR INPUT
*
***********************************************************************
*
*        JFCB TO DSCB MERGE
*
* MERGE IS PERFORMED FOR OUTPUT AND OUTIN, ONLY, WITH THE        A50703
* FOLLOWING EXCEPTIONS-                                          A50703
*    - PERFORMED FOR UPDAT IF BOTH THE DSCB AND DCB DSORG'S      A50703
*      ARE DA (BDAM FOR UPDAT)                                   A50703
*    - NOT PERFORMED FOR ISAM (DCB DSORG=IS) UNLESS LOAD MODE    A48584
*      IS SPECIFIED (IE, LOAD MODE IS THE INDICATION OF OUTPUT   A48584
*      FOR ISAM, SINCE OPEN OPTIONS ARE IGNORED FOR ISAM)        A48584
*
* MERGE OPTCD ONLY IF DSORG IN DSCB AND DCB ARE BOTH DA OR BOTH   M0943
* NOT DA.  IF ONE IS DA AND THE OTHER IS NOT, THE DATA SET IS     M0943
* BEING ACCESSED DIFFERENTLY THAN AT CREATION, AND OPTCD BIT      M0943
* MEANINGS MAY CONFLICT.  PARTICULARLY, BDAM OPTCD A AND SAM      M0943
* OPTCD Q ARE THE SAME BIT.                                       M0943
         TM    DCBMACRF,DCBMEXCP        EXCP                      M0943
         BZ    OFN20300                 NO, BR, DSORG PRESENT    A50703
         TM    0(RPARC),PLISTOP1-PLISTUPD  UPDATE                A50703
         BZ    OFN22000                 YES, BR, SKIP MERGE      A50703
         TM    DCBMACRF,DCBMFOUN        IS DSORG FIELD PRESENT   A50703
         BZ    OFN20600                 NO, BR, SKIP OPTCD MERGE A50703
OFN20300 EQU   *                        DSOG PRESENT             A50703
         TM    DCBDSORG,DCBORGDA        DCB DSORG DA             A50703
         BNO   OFN20350                 NO, BR                   A50703
         TM    DSCFILTY,DCBORGDA        DSCB DSORG DA            A50703
         BO    OFN20500                 YES, BR, MERGE OPTCD TOO A50703
         TM    0(RPARC),PLISTOP1-PLISTUPD  UPDATE                A50703
         BZ    OFN22000                 YES, BR, SKIP MERGE      A50703
         B     OFN20600                 NO, BR, SKIP OPTCD MERGE A50703
OFN20350 EQU   *                        DCB DSORG NOT DA         A50703
         TM    0(RPARC),PLISTOP1-PLISTUPD  UPDATE                A50703
         BZ    OFN22000                 YES, BR, SKIP MERGE      A50703
         TM    DCBDSORG,DCBORGIS        DCB DSORG IS (ISAM)      A48584
         BNO   OFN20400                 NO, BR                   A48584
         TM    DCBMACRF,DCBMEXCP        EXCP                     A48584
         BO    OFN22000                 YES, BR, SKIP MERGE      A48584
*                                       NO, LOAD MODE TEST VALID A48584
         TM    DCBMACRF+1,DCBMPMOV+DCBMLOC  ISAM LOAD MODE       A48584
         BZ    OFN22000                 NO, BR, SKIP MERGE       A48584
         B     OFN20500                 YES, MERGE OPTCD TOO     A48584
OFN20400 EQU   *                        DCB DSORG NOT ISAM       A50703
         TM    DSCFILTY,DCBORGDA        DSCB DSORG DA            A50703
         BO    OFN20600                 YES, BR, NO OPTCD MERGE  A50703
*                                       NO, MERGE OPTCD TOO      A50703
*                                                                A50703
OFN20500 EQU   *                        MERGE OPTCD TOO           M0943
         CLC   DSCOPTCD,JFCOPTCD        COMPARE OPTION CODE FIELDS
         BE    OFN20600                 BR IF EQUAL
         MVC   DSCOPTCD,JFCOPTCD        ****MERGE****
         OI    JFCBMASK+K4,JFCMDMOD     SET DSCB MOD SW ON
*
OFN20600 EQU   *                        OPTION CODE FIELDS EQUAL
         CLC   DSCRECFM,JFCRECFM        COMPARE RECFM FIELDS     A50703
         BE    OFN20700                 BR IF EQUAL              A50703
         MVC   DSCRECFM,JFCRECFM        ****MERGE****            A50703
         OI    JFCBMASK+K4,JFCMDMOD     SET DSCB MOD SW ON       A50703
*                                                                A50703
OFN20700 EQU   *                        RECFM FIELDS EQUAL       A50703
         CLC   DSCKEYL,JFCKEYLE         COMPARE KEY LENGTH FIELDS
         BE    OFN20800                 BR IF EQUAL
         MVC   DSCKEYL,JFCKEYLE         ****MERGE****
         OI    JFCBMASK+K4,JFCMDMOD     SET DSCB MOD SW ON
*
OFN20800 EQU   *                        KEY LENGTH FIELDS EQUAL
         NC    DSCFILTY,DSCFILTY        CHECK FOR ZERO DSCB DSORG
         BNZ   OFN20900                 BR IF NO               @ZA10215
         MVC   DSCFILTY,JFCDSORG        ***MERGE****
         OI    JFCBMASK+K4,JFCMDMOD     SET DSCB MOD SW ON
*
OFN20900 EQU   *                                               @ZA10215
         TM    DCBDSORG,DCBORGPS+DCBORGUM  DCB PSU SPECIFIED   @ZA10215
         BNO   OFN21000                 NO,BR                  @ZA10215
         TM    JFCDSORG,JFCORGPO+JFCORGPS JFCB PS OR PO SPEC.  @ZA13601
         BZ    OFN21000                 NO,BR                  @ZA13601
         OI    DSCFILTY,DS1ORGUN        SET DSCB UNMOVABLE     @ZA10215
         OI    JFCBMASK+4,JFCMDMOD      SET DSCB MOD SW ON     @ZA10215
*
OFN21000 EQU   *                        COMPARE BLOCK SIZE FIELDS
         CLC   DSCBLKL,JFCBLKSI         COMPARE BLOCK SIZE FIELDS
         BE    OFN21200                 BR IF EQUAL
         MVC   DSCBLKL,JFCBLKSI         ***MERGE***
         OI    JFCBMASK+K4,JFCMDMOD     SET DSCB MOD SW ON
*
OFN21200 EQU   *                        COMPARE RECORD LENGTH FIELDS
         CLC   DSCLRECL,JFCLRECL        COMPARE RECORD LENGTH FIELDS
         BE    OFN21300                 BR IF EQUAL
         MVC   DSCLRECL,JFCLRECL        ****MERGE****
         OI    JFCBMASK+K4,JFCMDMOD     SET DSCB MOD SW ON
*
OFN21300 EQU   *                        CHK FOR PROTECTION IN JFCB
         TM    JFCBIND2,JFCSECUR        PROTECT?               @ZA32721
         BNO   OFN21400                 NO                     @ZA32721
         OI    DSCDSIND,DS1SECTY        INDICATE PROTECT       @ZA32721
         NI    DSCDSIND,X'FF'-DS1WRSEC  NOPWREAD=OFF           @ZA32721
         TM    JFCBIND2,JFCBRWPW        NOPWREAD?              @ZA32721
         BNO   OFN21310                 NO                     @ZA32721
         OI    DSCDSIND,DS1WRSEC        MODIFY DSCB1           @ZA32721
OFN21310 OI    JFCBMASK+K4,JFCMDMOD     SET DSCB MOD SW ON     @ZA32721
OFN21400 EQU   *                        CKECK KEY POSITION FOR ISAM
         CLC   DSCRKP,JFCRKP            COMPARE KEY POSITION FOR ISAM
         BE    OFN22000                 BR IF EQUAL
         MVC   DSCRKP,JFCRKP            ****MERGE****
         OI    JFCBMASK+K4,JFCMDMOD     SET DSCB MOD SW ON
*
***********************************************************************
*
*        WRITE BACK DSCB IF MODIFIED
*
OFN22000 EQU   *
         TM    JFCBMASK+K4,JFCMDMOD     IS DSCB MODIFIED SW ON
         BZ    OFN23000                 BR IF OFF
         TM    UCBJBNR,UCBVRDEV         TEST FOR VIO UCB         Y02132
         BNO   OFN22200                 BR IF NOT                Y02132
*        WRITE FORMAT 1 DSCB TO SWA FOR VIO                      Y02132
         MODESET EXTKEY=SCHED           ASSUME SCHEDULER KEY     Y02132
*                                                                Y02132
         MVC   VDSDSCB-VDSUCB+L'JFCBDSNM(DSCEXT2-DSCFMTID,RUCB),DXDSCB
*                                                                Y02132
         MODESET EXTKEY=DATAMGT         DATA MANAGEMENT KEY      Y02132
*                                                                Y02132
         MVI   DXECB,ECBCOD7F           INDICATE NO ERROR - 196X Y02132
         B     OFN22450                 CONTINUE PROCESSING      Y02132
OFN22200 EQU   *                        NOT VIO UCB              Y02132
*
*        CONSTRUCT CHANNEL PROGRAM TO WRITE BACK DSCB
*
*        SEARCH ID EQ
*        TIC *-8
*        SEARCH KEY EQ
*        NOP  (NO CHAIN, SLI)
*        WRITE DATA  (DSCB)  (NO CHAIN , 96 BYTES)
*
         XC    DXCCW1(K40),DXCCW1       CLEAR CCW AREA
         LA    RF,DXDAADDR+K3           SEARCH ADDRESS
         ST    RF,DXCCW1                INTO SEARCH ID EQ CCW
         LA    RF,DXCCW1                TIC *-8
         ST    RF,DXCCW2                INTO FIRST TIC
         LA    RF,JFCBDSNM              DSNAME KEY ADDRESS
         ST    RF,DXCCW3                INTO SEARCH KEY EQ CCW
         LA    RF,DXDSCB                DSCB ADDRESS
         ST    RF,DXCCW5                INTO WRITE CCW
         OC    DXCCW1(K40),OFN2800K     OR IN CMND, FLAGS, LENGTH
*
*        REINITIALIZE WORK DEB EXTENT FOR THIS FIRST VOLUME
*
         MVI   DXDEBBIN+K1,K0           CLEAR BIN NUMBER
*
         LA    RUCB,0(RUCB)             SET MODE TO ZERO
         ST    RUCB,DXDEBUCB            PUT MAIN UCB ADDR IN DEB
*
         XC    DXDEBSCC(K4),DXDEBSCC    SET START EXTENT TO COVER DISK
*
         L     RF,CVTPTR                GET CVT ADDR
         L     RF,CVTZDTAB-CVT(,RF)     GET ADDR I/O DEVICE TABLE
         SR    R1,R1                    CLEAR REG FOR IC
         IC    R1,UCBTBYT4              GET UCB DEVICE TYPE
         IC    R1,0(R1,RF)              INDEX TO DEVICE OFFSET BYTE
         AR    RF,R1                    ADDR OF DEVICE ENTRY IN TABLE
         MVC   DXDEBECC(K4),0(RF)       SET MAX EXTENT FROM DEVICE TBL
*
         MVC   DXDEBNTR,OFN2820K        SET TRACKS TO LARGEST NUMBER
*
         LA    RF,K16                   BACK UP RDEB TO POINT
         SR    RDEB,RF                  TO PREFIX SECTION FOR
         MVC   DXDAADDR+K1(K7),K1(RDEB)  DSCB BBCCHHR DISK ADDR
         MVI   DXDAADDR,K0              SET M TO ZERO
         AR    RDEB,RF                  RESTORE DEB POINTER
*
*        START DSCB WRITE BACK
*
         EXCP  DXIOB                    START DSCB WRITE BACK
*
OFN22450 EQU   *                        CONTINUE                 Y02132
         STM   RTIOT,RUCB,DXWORK1       SAVE REGS 9-10
         LM    RTIOT,RUCB,DXCCW8        LOAD REGS 9-10 FROM DXCCW8
*                                       SO THAT XCTL AND WAIT WILL
*                                       NOT DESTROY DXCCW8 WHEN THE
*                                       RESIDENT ROUTINE SAVES THE
*                                       REGISTERS.
         LA    RET,K0                   LOAD BRANCH TABLE OFFSET
         B     OFN23400                 BR TO XCTL TO MODULE IFG0196X
*
***********************************************************************
*
OFN23000 EQU   *                        OUTLIMITS
         LA    RET,K0                   LOAD ENTRY CODE FOR OUTLIM
*
OFN23200 EQU   *                        NULL DATA SET
         NI    JFCBMASK+K4,X'FF'-JFCMDMOD  TURN OFF ANY DSCB MOD SW
*
OFN23400 EQU   *                        GO TO NEXT MODULE
*                                   XCTL TO IFGO196X TO CONTINUE Y02080
         IECRES LOAD,MODID=ID6W6X,BRCODE=(RET),BRANCH=QUEUED     Y02080
*
***********************************************************************
*
OFN23600 EQU   *                        NO LONGER OPENING ENTRY
*                                                                YM1342
* TEST FOR VTAM ACB                                              YM1342
*                                                                YM1342
         TM    DCBMACRF,DCBMEXCP        IS ACCESS METHOD EXCP    YM1342
         BO    OFN23700                 YES, CANNOT BE AN ACB    YM1342
         TM    DCBDSRG2,ACBDORGA        IS CONTROL BLOCK AN ACB? YM1342
         BZ    OFN23700                 BRANCH IF NO             YM1342
         USING IFGACB,RACB              ADDRESS ACB              YM1342
         CLI   ACBAMETH,ACBVTAM         IS THIS ACB FOR VTAM?    YM3011
         BNE   OFN23700                 NO, EXIT TO IFG0198N     YM1342
         USING IHADCB,RDCB              RESTORE DCB ADDRESSING   YM1342
         LA    RET,K8                   LOAD ENTRY FOR LAST MOD  YM1342
OFN23700 EQU   *                        GO TO TERMINATE MOD      YM1342
         IECRES LOAD,MODID=ID6W8N,BRCODE=(RET),BRANCH=QUEUED     Y02080
*                                  XCTL TO LAST MOD TO TERMINATE Y02080
*
         DROP  RDEB
*
***********************************************************************
*
*        CONSTANTS
*
*        CCW'S TO WRITE BACK DSCB
OFN2800K DC    X'3100000040000005'      SEARCH ID EQ
         DC    X'0800000000000000'      TIC *-8
         DC    X'290000004000002C'      SEARCH ID EQ
         DC    X'0300000020000001'      NOP  (NO CHAIN, SLI)
         DC    X'0500000000000060'      WRITE DATA (NO CHAIN, 96)
*
OFN2820K DC    X'7FFF'                  MAX NO. OF TRACKS IN EXTENT
*
OFN2840K DC    C'IFG0196W'              FULL NAME OF THIS MODULE
*
         XCTLTABL ID=(ID6W6W,6W,ID6W6X,6X,ID6W8N,8N,             Y02080X
               THISMOD,IFG0196W),                                Y02080X
               BRT=YES,LENGTH=                                   Y02080
*
         IDDVDSCB
         IECDSECS EXPAND=YES            EXPAND DESIRED DSECTS HERE
*
         END
