         TITLE 'IFG0202B - NONSTANDARD LABEL TAPE TRAILER PROCESSING'
IFG0202B CSECT
         ENTRY IFG0232Y,IFG0556B,IGG0200B                        Y02080
IFG0232Y EQU   IFG0202B                 ALLIAS ENTRY POINT       Y02080
IFG0556B EQU   IFG0202B                 ALLIAS ENTRY POINT       Y02080
IGG0200B EQU   IFG0202B                 ALLIAS ENTRY POINT       Y02080
***********************************************************************
*                                                                     *
*                                                                     *
*          VS2 RELEASE 037 DELETION/CHANGES                           *
*0000                                                          @ZA09122
*0000                                                          @ZA07210
*0000                                                          @ZA07184
*0000                                                          @ZA05231
*0000540000-543000                                             @ZA03180
*0000465000-969000                                             @ZA04212
*0000                                                          @ZA13589
*0000                                                          @ZA29604
*A613000,D608200                                               @ZA31147
*                                                                     *
*          VS2 RELEASE 3 DELETION/CHANGES                             *
*0000687300-687420                                              ZA01504
*                                                                     *
*          VS1 RELEASE 2 DELETION/CHANGES
*                                                                     *
*0000895800                                                      XM0476
*0000                                                           XA00441
*                                                                     *
*                                                                     *
*          VS2 RELEASE 1 DELETIONS/CHANGES
*00000532500,760500                                              YM3099
*                                                                     *
*          RELEASE 21 DELETIONS/CHANGES                               *
*0000147000,213000,219000,345000-369000,399000,483000,807000-    A38013
*0000816000,852000,939000-960000                                 A38013
*                                                                M0039
*0000792000,798000                                               M0147
*D510000,768000                                                 SA53294
*0000                                                           SA55450
*          RELEASE 21.7 DELETIONS/CHANGES                             *
*0000519500,528000-531000,762000-768500,747000-759000           SA55602
*                                                                     *
* MODULE NAME = IFG0202B                                              *
*                                                                     *
* DESCRIPTIVE NAME = NONSTANDARD LABEL TAPE TRAILER PROCESSING        *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS CHANGE LEVEL 000                                             *
*                                                                     *
* FUNCTION -                                                          *
*    THIS MODULE CONTAINS THE FUNCTION(S) OR PART(S) OF FUNCTION(S)-- *
*    CLOSE TAPE NONSTANDARD LABEL FUNCTION.                           *
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)' FOR DETAILS.         *
*                                                                     *
* ENTRY POINTS -                                                      *
*         IFG0202B - ENTRY POINT VIA AN XCTL FROM THE FOLLOWING--     *
*             INITIAL ENTRY--                                         *
*                IFG0200Y - PROCESS CLOSE TAPE NONSTANDARD LABEL      *
*                           FUNCTION.                                 *
*             SECOND ENTRY--                                          *
*                NSLETRLI - VIA IFG0552R TO CONTINUE PROCESSING CLOSE *
*                           TAPE NONSTANDARD LABEL FUNCTION.          *
*             THIRD ENTRY--                                           *
*                NSLCTRLO - CONTINUE PROCESSING CLOSE TAPE NONSTANDARD*
*                           LABEL FUNCTION.                           *
*             FOURTH ENTRY--                                          *
*                IFG0202H - PROCESS CLOSE TAPE NONSTANDARD LABEL      *
*                           FUNCTION.                                 *
*                                                                     *
* INPUT -                                                             *
*    ENTERED IN DATA MANAGEMENT KEY                              Y02082
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
* OUTPUT -                                                            *
*    EXIT IN DATA MANAGEMENT KEY                                 Y02082
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*         IFG019RA - OPEN/CLOSE/EOV RESIDENT ROUTINE FOR XCTL AND     *
*                    WAIT.                                            *
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
* EXITS, NORMAL -                                                     *
*    EXIT VIA THE RESIDENT ROUTINE XCTL TO THE FOLLOWING--            *
*         IFG0202H - PROCESS CLOSE/EOV SMF DATA SET FUNCTION.         *
*         NSLETRLI - PROCESS DEFER INPUT LABEL PROCESSING FUNCTION.   *
*         NSLCTRLO - PROCESS OUTPUT LABEL PROCESSING FUNCTION.        *
*         IFG0232Z - PROCESS TCLOSE TAPE FINAL FUNCTION.              *
*         IFG0202F - PROCESS CLOSE TAPE VOLUME DISPOSITION FUNCTION.  *
*         IFG0202J - PROCESS CLOSE FINAL STRING.                      *
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
* EXITS, ERROR -                                                      *
*    EXIT IS TO THE PROBLEM DETERMINATION MODULE IFG0200P, IF AN      *
*    ABEND SITUATION OCCURS IN THIS MODULE.  REFER TO THE FOLLOWING   *
*    'FUNCTION PROLOG(S)'.                                            *
*                                                                     *
* TABLES/WORK AREAS -                                                 *
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*                                                                     *
* ATTRIBUTES -                                                        *
*    REENTRANT, REFRESHABLE, READ-ONLY, ENABLED, PRIVILEGED           *
*                                                                     *
* CHARACTER CODE DEPENDENCY -                                         *
*    CLASS ONE CHARACTER CODE DEPENDENCY - THE EBCDIC CHARACTER CODE  *
*    WAS USED FOR ASSEMBLY.  THE MODULE MUST BE REASSEMBLED IF A      *
*    DIFFERENT CHARACTER SET IS USED FOR EXECUTION.                   *
*                                                                     *
* NOTES -                                                             *
*    REFER TO THE FOLLOWING 'FUNCTION PROLOG(S)'.                     *
*    THIS MODULE MUST HAVE A NAME ALIAS OF IGG0200B FOR NON-STANDARD  *
*    TAPE LABEL ROUTINE INTERFACE.                                    *
*    THIS MODULE MUST HAVE A NAME ALIAS OF IFG0232Y FOR ENTRY FROM    *
*    TCLOSE FOR DEFER NSL PROCESSING.                                 *
*    THIS MODULE MUST HAVE A NAME ALIAS OF IFG0556B FOR ENTRY FROM    *
*    END-OF-VOLUME AFTER DEFER NSL PROCESSING.                        *
*                                                                     *
***********************************************************************
         EJECT
         USING WTG,RWTG
         USING WTGENTRY,RWTGC
         USING FORCORE,RCORE
         USING USERPRML,RPARC
         USING IHADCB,RDCB
         USING UCBOB,RUCB
         USING DEB,RDEB
*
         BALR  RBASE,0                  ESTABLISH BASE REGISTER
         USING *,RBASE
*
*     NSL ROUTINES ARE ENTERED IN KEY ZERO, THEREFORE DATA MGT  YA02116
*     KEY MUST BE RESTORED ON RETURN                            YA02116
         MODESET EXTKEY=DATAMGT         DATA MANAGEMENT KEY      Y02082
*
         CLC   WTGMODNM,RETCTRLO        RETURN FROM NSLCTRLO   @ZA04212
         BE    CCM01000                 BRANCH IF YES          @ZA04212
         CLC   WTGMODNM,RETETRLI        RETURN FROM NSLETRLI   @ZA04212
         BE    CCM00500                 BRANCH IF FR IFG0552R  @ZA04212
*
         B     CCM00000(RET)            GO TO PROPER ENTRY     @ZA04212
CCM00000 EQU   *                        BRANCH TABLE           @ZA04212
         B     CCM00100                 INITIAL ENTRY          @ZA04212
         B     CCM00500                 ENTRY FROM IFG0552R    @ZA04212
         B     CCM01000                 ENTRY FROM NSLCTRLO    @ZA04212
         B     CCM00200                 ENTRY FR SMF IFG0202H  @ZA04212
*
         EJECT
*                                                                     *
***********************************************************************
*                                                                     *
*                          FUNCTION PROLOG                            *
*                                                                     *
***********************************************************************
*                                                                     *
* FUNCTION NAME -                                                     *
*    CLOSE TAPE NONSTANDARD LABEL FUNCTION.                           *
*                                                                     *
* (STATUS) -                                                          *
*    NOT APPLICABLE                                                   *
*                                                                     *
* FUNCTION -                                                          *
*    INTERFACE WITH SMF DATA SET FUNCTION IF THE DATA SET IS NOT      *
*    SYSIN OR SYSOUT.                                                 *
*    TEST NONSTANDARD LABEL DCB'S FOR LABEL PROCESSING DEFERRED       *
*    AT END-OF-DATA TIME. IF THE INPUT TRAILER LABELS WERE NOT        *
*    PROCESSED, TRANSFER CONTROL TO THE EOV NSLETRLI ROUTINE.         *
*    FREE EXTRA CORE ACQUIRED FOR DEFER LABEL PROCESSING.             *
*    TRANSFER CONTROL TO THE CLOSE NSLCTRLO ROUTINE TO PROCESS        *
*    OUTPUT NONSTANDARD LABELS AND TO PERFORM VOLUME DISPOSITION      *
*    FOR NSL VOLUME, IF NECESSARY.                                    *
*    VOLUME DISPOSITION IS PERFORMED AS SPECIFIED IN THE TIOT.        *
*                                                                     *
* ENTRY POINTS -                                                      *
*    ENTERED FROM THE FOLLOWING--                                     *
*    CLOSE TAPE ACCESS METHOD EXECUTOR INTERFACE FUNCTION.            *
*    TCLOSE TAPE LABEL FUNCTION.                                      *
*                                                                     *
* INPUT -                                                             *
*    A POINTER TO EACH OF THE FOLLOWING--                             *
*       CURRENT PARAMETER LIST ENTRY- RPARC                           *
*       DD ENTRY IN THE TIOT- RTIOT                                   *
*       WTG TABLE- RWTG                                               *
*       CURRENT WTG TABLE ENTRY- RWTGC                                *
*       DCB- RDCB                                                     *
*       WORK AREA- RCORE                                              *
*       RESIDENT ROUTINE- RES                                         *
*       UCB- RUCB                                                     *
*       DEB- RDEB                                                     *
*                                                                     *
* OUTPUT -                                                            *
*    NONSTANDARD LABELS PROCESSED.                                    *
*                                                                     *
* EXTERNAL REFERENCES -                                               *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* EXITS, NORMAL -                                                     *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*    CLOSE/EOV SMF DATA SET FUNCTION.                                 *
*    CLOSE TAPE VOLUME DISPOSITION FUNCTION.                          *
*    TCLOSE FINAL FUNCTION.                                           *
*                                                                     *
* EXITS, ERROR -                                                      *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* TABLES/WORK AREAS -                                                 *
*    THE OPEN, CLOSE, OR EOV WORK AREA AND THE WHERE-TO-GO (WTG)      *
*    TABLE ARE DESCRIBED BY THE DSECTS AT THE END OF THE LISTING.     *
*                                                                     *
* ATTRIBUTES -                                                        *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* CHARACTER CODE DEPENDENCY -                                         *
*    REFER TO THE PRECEEDING MODULE PROLOG.                           *
*                                                                     *
* NOTES -                                                             *
*    NOT APPLICABLE                                                   *
*                                                                     *
***********************************************************************
         EJECT
*
CCM00100 EQU   *                        INITAL ENTRY           @ZA04212
*
***********************************************************************
*                                                                     *
*              SMF TYPE 14 & 15 RECORD DETERMINATION                  *
*                                                                     *
***********************************************************************
*
         TM    WTGPATHS,WTGTCLOS        BYPASS SMF FOR TCLOSE  @ZA05231
         BO    CCM00200                 BRANCH IF TCLOSE       @ZA05231
         TM    WTGPATHS,WTGSMF          SMF REQUESTED          @ZA04212
         BZ    CCM00200                 BRANCH IF NOT          @ZA04212
         TM    JFCBTSDM,JFCSDS          IS SYSIN/SYSOUT DS     @ZA04212
         BO    CCM00200                 BRANCH IF YES          @ZA04212
*
         MVC   DXRETMOD,ID2B2B          MOVE IN RETURN IDTTR   @ZA04212
         IECRES LOAD,MODID=IFG0202H,BRCODE=K0,BRANCH=QUEUED    @ZA04212
         EJECT
*
CCM00200 EQU   *                        SMF RETURN             @ZA04212
*
***********************************************************************
*                                                                     *
*        COPY THE DCB(S) FROM THE WORK AREA TO USER'S STORAGE
*
***********************************************************************
*
         IECRES INIT,DCBCOPY=FRWKAR,STM=(3,14,WTGPREFX)        @ZA04212
*
         IECRES SYNCHDCB                                       @ZA04212
*
         MVC   WTGMODNM,THISMOD         INDICATE THIS MOD      @ZA05231
         L     RF,WTGPREFX              LOAD POINTER TO PREFIX @ZA04212
         L     RPAR,IECUPRML-IECPREFX(,RF) LOAD PTR TO PARMS   @ZA04212
         LR    RPARC,RPAR               GET FIRST PARM PTR     @ZA04212
         LA    RWTGC,WTGENTRY-WTG(,RWTG) PTR TO 1ST WTG ENTRY  @ZA04212
*
CCM00300 EQU   *                        PROCESS DCB            @ZA04212
*
         CLC   WTGIDTTR(K2),ID2B2Y      CHECK IF ENTRY TCLOSE  @ZA05231
         BNE   CCM00303                 BRANCH IF NOT          @ZA05231
         MVC   WTGIDTTR,ID2B2B          SET FOR 2B PROCESS     @ZA05231
CCM00303 EQU   *                        CHECK FOR THIS MOD     @ZA05231
         CLC   WTGIDTTR(K2),ID2B2B      CHECK FOR THIS MODULE  @ZA04212
         BNE   CCM00600                 BRANCH IF WRONG MODULE @ZA04212
*
         L     RCORE,WTGCORE-K1         GET WORK AREA PTR      @ZA04212
         LA    RCORE,FORCORE            CLEAR HI BYTE          @ZA04212
         LTR   RCORE,RCORE              TEST FOR WORK AREA     @ZA04212
         BZ    CCM00600                 BRANCH IF INVALID      @ZA04212
*
         L     RTIOT,DXTIOTAD           GET CURRENT TIOT PTR   @ZA04212
         L     RUCB,DXUCBADR            GET CURRENT UCB ADDR   @ZA04212
         STM   RTIOT,RUCB,DXREG9        SAVE FOR QUED USE      @ZA04212
*
         LTR   RUCB,RUCB                TEST FOR DUMMY         @ZA04212
         BZ    CCM00600                 BRANCH IF NOT TAPE     @ZA04212
         TM    UCBTBYT3,UCB3TAPE        TEST FOR TAPE UNIT     @ZA04212
         BZ    CCM00600                 BRANCH IF NOT TAPE     @ZA04212
         TM    UCBTFL1,UCBNSLTP         CHECK FOR NSL          @ZA04212
         BZ    CCM00600                 BRANCH IF NOT NSL      @ZA04212
*
         MVI   DXRESIND,K0              SET WAIT OFF           @ZA04212
*
         EJECT
         L     RDCB,DXPDCBAD            LOAD DCB COPY          @ZA04212
         L     RDEB,DCBDEBAD            LOAD DEB ADDR          @ZA04212
         MVC   DXDEBUCB,DEBUCBAD        UCB ADDRESS TO DEB     @ZA04212
*
         TM    DEBOFLGS,DEBOFNSL+DEBOFEOF  TEST FOR NSL + EOF  @ZA04212
         BNO   CCM00600                 SKIP DEFERED EXIT      @ZA04212
         TM    DCBOFLGS,DCBOWRIT        TEST FOR INPUT         @ZA04212
         BO    CCM00600                 NO,BR TO CLOSE NSL     @ZA04212
*
         L     RC,DCBEXLST              ADDR OF EXIT LIST      @ZA04212
         LA    RC,0(,RC)                CLEAR HIGH-ORDER BYTE  @ZA04212
         LTR   RC,RC                    EXLST SPECIFIED        @ZA04212
         BZ    CCM00600                 BRANCH IF NOT          @ZA04212
*
***********************************************************************
*
*        GET LOCAL LOCK TO ACCESS USER MEMORY
*
***********************************************************************
*
         L     RF,WTGPREFX              LOAD PREFIX PTR        @ZA04212
         STM   R0,RF,IECREGSV-IECPREFX(RF) SAVE REGS - SETLOCK @ZA04212
*
         MODESET EXTKEY=SUPR            SETLOCK KEY            @ZA04212
*
CCM00305 SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND, GET LOCK       @ZA04212X
               RELATED=(LOCAL,IFG0202B(CCM00325))              @ZA04212
*
         LM    R0,RF,IECREGSV-IECPREFX(RF) RESTORE REGS        @ZA04212
*
         MODESET KEYADDR=DXUKEY,WORKREG=13 USER EXIT LIST      @ZA04212
*
***********************************************************************
*
*        TEST FOR DEFERRED PROCESSING OF INPUT TRAILER LABELS
*
***********************************************************************
*
CCM00310 EQU   *                        CHECK EXIT LIST        @ZA04212
*
         CLI   K0(RC),XLDEFNSL          DEFER LABEL PROC       @ZA04212
         BE    CCM00320                 BRANCH IF YES          @ZA04212
         CLI   K0(RC),XLDEFNSL+LASTNTRY DEFER + LAST ENTRY     @ZA04212
         BE    CCM00320                 BRANCH IF YES          @ZA04212
         TM    K0(RC),LASTNTRY          CHECK FOR LAST ENTRY   @ZA04212
         LA    RC,K4(,RC)               INCREMENT TO NEXT EXIT @ZA04212
         BNO   CCM00310                 BRANCH IF MORE         @ZA04212
         XR    RC,RC                    SET ERROR IND          @ZA04212
*
CCM00320 EQU   *                        RELEASE LOCK           @ZA04212
*
         MODESET EXTKEY=DATAMGT         CLOSE KEY              @ZA04212
*
         STM   R0,RF,IECREGSV-IECPREFX(RF) SAVE REGS - SETLOCK @ZA04212
*
         MODESET EXTKEY=SUPR            SETLOCK KEY            @ZA04212
*
CCM00325 SETLOCK RELEASE,TYPE=LOCAL,    FREE LOCK              @ZA04212X
               RELATED=(LOCAL,IFG0202B(CCM00305))              @ZA04212
*
         MODESET EXTKEY=DATAMGT         CLOSE KEY              @ZA04212
*
         LM    R0,RF,IECREGSV-IECPREFX(RF) RESTORE REGS        @ZA04212
*
         LTR   RC,RC                    CHECK IF EXIT FOUND    @ZA04212
         BZ    CCM00600                 BRANCH IF NO EXIT      @ZA04212
         EJECT
*
***********************************************************************
*
*****          INITIALIZE TO PASS CONTROL TO END-OF-VOLUME NSL
*****          ROUTINE FOR INPUT TRAILER LABEL PROCESSING
*
***********************************************************************
*
         L     RPAR,DCBDEBAD            LOAD DEB ADDR          @ZA04212
         LA    RET,K12                  BRANCH TABLE OFFSET    @ZA04212
*                                       FOR RETURN FROM        @ZA04212
*                                       NSLETRLI TO IFG0552R   @ZA04212
*                                       (ALIAS IGG0550B) WHICH @ZA04212
*                                       RETURNS TO THIS LOAD   @ZA04212
*                                       WITH RET SET TO 4      @ZA04212
*
         L     RF,WTGPREFX              LOAD PREFIX POINTER    @ZA04212
         L     RF,IECRRPRM-IECPREFX(,RF) LOAD RRPLIST          @ZA04212
         OI    RRFLAGS1-RRPLIST(RF),RRFNSL NSL IN CONTROL      @ZA04212
         TM    WTGPATHS,WTGTCLOS        TEST FOR TCLOSE        @ZA04212
         BZ    CCM00340                 BRANCH IF NOT TCLOSE   @ZA04212
         OI    DXATALL,DXATFC           FORCE CLOSE ON ERROR   @ZA04212
*
CCM00340 EQU   *                        GOTO NSL ROUTINE       @ZA04212
*
         LA    RF,WTGMODNM              LOAD WTG-4             @ZA05231
         LA    RD,K4                    INTO REG 15            @ZA05231
         SR    RF,RD                                           @ZA05231
         MVC   DXXWTOPR(WTGEND-WTGTABLE),WTGWTOPR-WTGTABLE(RF) @ZA05231
         LA    RWTG,DXXPREFX
         LA    RD,FORCORE               RETURN INDICATOR       @ZA04212
         MODESET EXTKEY=ZERO            NSL ROUTINE KEY        @ZA04212
*
         IECRES LOAD,MODNM=NSLETRLI,BRCODE=(RET), NSLETRLI     @ZA04212X
               PREFIX=DXXPREFX,BRANCH=DIRECT                   @ZA04212
         EJECT
*
CCM00500 EQU   *                        RETURN FROM NSLETRLI   @ZA04212
*
***********************************************************************
*
*        RETURN FROM NSLETRLI VIA IFG0552R
*
***********************************************************************
*
         L     RF,DXXPREFX                                     @ZA05231
         L     RWTG,IECWTGTB-IECPREFX(,RF)
         IECRES LOAD,MODNM=THISMOD,PREFIX=WTGPREFX,BRANCH=NO   @ZA04212
*
         XC    WTGMODEP,WTGMODEP        CLEAR BRANCH ADDR      @ZA04212
         L     RF,WTGPREFX              LOAD POINTER TO PREFIX @ZA04212
         L     RPAR,IECUPRML-IECPREFX(,RF) LOAD PTR TO PARMS   @ZA04212
         L     RF,IECRRPRM-IECPREFX(,RF) LOAD RRPLIST          @ZA04212
         NI    RRFLAGS1-RRPLIST(RF),ALLBITS-RRFNSL RESET NSL   @ZA04212
         LR    RPARC,RPAR               GET FIRST PARM PTR     @ZA04212
         LA    RWTGC,WTGENTRY-WTG(,RWTG) PTR TO 1ST WTG ENTRY  @ZA04212
*
CCM00510 EQU   *                        PROCESS DCB            @ZA04212
*
         MVI   DXECB,K32                REINITIALIZE ECB       @ZA29604
         CLC   WTGIDTTR(K2),ID2B2B      CHECK FOR THIS MODULE  @ZA04212
         BNE   CCM00550                 BRANCH IF WRONG MODULE @ZA04212
*
         L     RCORE,WTGCORE-K1         GET WORK AREA PTR      @ZA04212
         LA    RCORE,FORCORE            CLEAR HI BYTE          @ZA04212
         LTR   RCORE,RCORE              TEST FOR WORK AREA     @ZA04212
         BZ    CCM00550                 BRANCH IF INVALID      @ZA04212
*
         CR    RD,RCORE                 VERIFY RIGHT AREA      @ZA04212
         BNE   CCM00550                 BRANCH IF NOT          @ZA04212
*
         L     RTIOT,DXTIOTAD           GET CURRENT TIOT PTR   @ZA04212
         L     RUCB,DXUCBADR            GET CURRENT UCB ADDR   @ZA04212
         L     RDCB,DXPDCBAD            LOAD DCB COPY          @ZA04212
         L     RDEB,DCBDEBAD            LOAD DEB ADDR          @ZA04212
*
         TM    WTGPATHS,WTGTCLOS        TEST FOR TCLOSE        @ZA04212
         BZ    CCM00600                 BRANCH IF NOT TCLOSE   @ZA04212
         NI    DXATALL,ALLBITS-DXATFC   RESET NSL BIT          @ZA04212
         B     CCM00600                 BRANCH TO NEXT DCB     @ZA04212
*
CCM00550 EQU   *                        GET NEXT DCB           @ZA04212
*
         TM    DXDCBLST,LASTNTRY        IS THIS THE LAST DCB   @ZA04212
         LA    RPARC,DXDCBLST+L'DXDCBLST GET NEXT PARM PTR     @ZA04212
         LA    RWTGC,WTGENTRY+L'WTGENTRY GET NEXT ENTRY PTR    @ZA04212
         BNO   CCM00510                 NO, BRANCH             @ZA04212
         B     CCM00610                 BRANCH OUT IF ALL DONE @ZA04212
*
CCM00600 EQU   *                        GET NEXT DCB           @ZA04212
*
         TM    DXDCBLST,LASTNTRY        IS THIS THE LAST DCB   @ZA04212
         LA    RPARC,DXDCBLST+L'DXDCBLST GET NEXT PARM PTR     @ZA04212
         LA    RWTGC,WTGENTRY+L'WTGENTRY GET NEXT ENTRY PTR    @ZA04212
         BNO   CCM00300                 NO, BRANCH             @ZA04212
*
CCM00610 EQU   *                        PROCESS FOR NSLCTRLO   @ZA04212
*
         L     RF,WTGPREFX              LOAD POINTER TO PREFIX @ZA04212
         L     RPAR,IECUPRML-IECPREFX(,RF) LOAD PTR TO PARMS   @ZA04212
         LR    RPARC,RPAR               GET FIRST PARM PTR     @ZA04212
         LA    RWTGC,WTGENTRY-WTG(,RWTG) PTR TO 1ST WTG ENTRY  @ZA04212
*
CCM00620 EQU   *                        PROCESS DCB            @ZA04212
*
         CLC   WTGIDTTR(K2),ID2B2B      CHECK FOR THIS MODULE  @ZA04212
         BNE   CCM00700                 BRANCH IF WRONG MODULE @ZA04212
*
         L     RCORE,WTGCORE-K1         GET WORK AREA PTR      @ZA04212
         LA    RCORE,FORCORE            CLEAR HI BYTE          @ZA04212
         LTR   RCORE,RCORE              TEST FOR WORK AREA     @ZA04212
         BZ    CCM00700                 BRANCH IF INVALID      @ZA04212
*
         L     RTIOT,DXTIOTAD           GET CURRENT TIOT PTR   @ZA04212
         L     RUCB,DXUCBADR            GET CURRENT UCB ADDR   @ZA04212
         STM   RTIOT,RUCB,DXREG9        SAVE FOR QUED USE      @ZA04212
*
         LTR   RUCB,RUCB                TEST FOR DUMMY         @ZA04212
         BZ    CCM00700                 BRANCH IF NOT TAPE     @ZA04212
         TM    UCBTBYT3,UCB3TAPE        TEST FOR TAPE UNIT     @ZA04212
         BZ    CCM00700                 BRANCH IF NOT TAPE     @ZA04212
         TM    UCBTFL1,UCBNSLTP         CHECK FOR NSL          @ZA04212
         BZ    CCM00700                 BRANCH IF NOT NSL      @ZA04212
*
         MVI   DXRESIND,K0              SET WAIT OFF           @ZA04212
*
         L     RDCB,DXPDCBAD            LOAD DCB COPY          @ZA04212
         L     RDEB,DCBDEBAD            LOAD DEB ADDR          @ZA04212
         MVC   DXDEBUCB,DEBUCBAD        UCB ADDRESS TO DEB     @ZA04212
*
         TM    DEBOFLGS,DEBOFNSL        CHECK IF NSL OPEN      @ZA04212
         BNO   CCM00700                 SKIP NSLCTRLO EXIT     @ZA04212
*
         TM    WTGPATHS,WTGTCLOS        TEST FOR TCLOSE        @ZA04212
         BZ    CCM00630                 BRANCH IF NOT TCLOSE   @ZA04212
         OI    DXATALL,DXATFC           FORCE CLOSE ON ERROR   @ZA04212
*
CCM00630 EQU   *                        CHECK FOR OUTPUT       @ZA04212
*
         TM    DCBOFLGS,DCBOWRIT        TEST FOR INPUT         @ZA04212
         BNO   CCM00700                 NO,BR TO CLOSE NSL     @ZA04212
         OI    DXATOUTA,DXATNSL         SET NSL OUTPUT         @ZA04212
*
CCM00700 EQU   *                        GET NEXT DCB           @ZA04212
*
         TM    DXDCBLST,LASTNTRY        IS THIS THE LAST DCB   @ZA04212
         LA    RPARC,DXDCBLST+L'DXDCBLST GET NEXT PARM PTR     @ZA04212
         LA    RWTGC,WTGENTRY+L'WTGENTRY GET NEXT ENTRY PTR    @ZA04212
         BNO   CCM00620                 NO, BRANCH             @ZA04212
*
         L     RF,WTGPREFX              LOAD POINTER TO PREFIX @ZA04212
         L     RPAR,IECUPRML-IECPREFX(,RF) LOAD PTR TO PARMS   @ZA04212
         LR    RPARC,RPAR               GET FIRST PARM PTR     @ZA04212
         LA    RWTGC,WTGENTRY-WTG(,RWTG) PTR TO 1ST WTG ENTRY  @ZA04212
*
         L     RF,IECRRPRM-IECPREFX(,RF) LOAD RRPLIST          @ZA04212
         OI    RRFLAGS1-RRPLIST(RF),RRFNSL NSL IN CONTROL      @ZA04212
*************************************************              @ZA09122
* MODIFY DXDEBMOD FOR TRAILER LABEL PROCESSING  *              @ZA09122
*************************************************              @ZA09122
         MVC   DXDEBMOD(K4),DEBDVMOD    DENS,MODE,UCB ADDR     @ZA09122
         NI    DXDEBMOD,DX6250          REMOVE USER TRTCH      @ZA09122
         TM    UCBTBYT2,UCB3TAPE        CHECK FOR 7 TRACK      @ZA09122
         BZ    CCM00900                 BRANCH, NO.            @ZA09122
         NI    DXDEBMOD,DXTRTMSK        TURN OFF 6250 BPI BIT  @ZA09122
CCM00800 EQU   X'28'                    INDICATE TRANSLATOR    @ZA09122
         OI    DXDEBMOD,CCM00800        SET TRANSLATE MODE     @ZA09122
CCM00900 EQU   *                        GO TO NSLCTRLO         @ZA09122
         MODESET EXTKEY=ZERO            NSL ROUTINE KEY        @ZA04212
*
         IECRES LOAD,MODNM=NSLCTRLO,BRCODE=K8,   NSLCTRLO      @ZA07210X
               PREFIX=WTGPREFX,BRANCH=DIRECT                   @ZA04212
         EJECT
*
CCM01000 EQU   *                        RETURN FROM NSLCTRLO   @ZA04212
*
***********************************************************************
*
*        RETURN FROM NSLCTRLO
*
***********************************************************************
*
         IECRES LOAD,MODNM=THISMOD,PREFIX=WTGPREFX,BRANCH=NO   @ZA04212
*
         XC    WTGMODEP,WTGMODEP        CLEAR BRANCH ADDR      @ZA04212
         L     RF,WTGPREFX              LOAD POINTER TO PREFIX @ZA04212
         L     RPAR,IECUPRML-IECPREFX(,RF) LOAD PTR TO PARMS   @ZA04212
         L     RF,IECRRPRM-IECPREFX(,RF) LOAD RRPLIST          @ZA04212
         NI    RRFLAGS1-RRPLIST(RF),ALLBITS-RRFNSL RESET NSL   @ZA04212
         LR    RPARC,RPAR               GET FIRST PARM PTR     @ZA04212
         LA    RWTGC,WTGENTRY-WTG(,RWTG) PTR TO 1ST WTG ENTRY  @ZA04212
*
CCM01100 EQU   *                        PROCESS DCB            @ZA04212
*
         MVI   DXECB,K32                RESTORE DXECB          @ZA31147
         CLC   WTGIDTTR(K2),ID2B2B      CHECK FOR THIS MODULE  @ZA04212
         BNE   CCM01200                 BRANCH IF WRONG MODULE @ZA04212
*
         L     RCORE,WTGCORE-K1         GET WORK AREA PTR      @ZA04212
         LA    RCORE,FORCORE            CLEAR HI BYTE          @ZA04212
         LTR   RCORE,RCORE              TEST FOR WORK AREA     @ZA04212
         BZ    CCM01200                 BRANCH IF INVALID      @ZA04212
*
         L     RTIOT,DXTIOTAD           GET CURRENT TIOT PTR   @ZA04212
         L     RUCB,DXUCBADR            GET CURRENT UCB ADDR   @ZA04212
         MVI   DXRESIND,K0              SET WAIT OFF           @ZA04212
*
         L     RDCB,DXPDCBAD            LOAD DCB COPY          @ZA04212
         L     RDEB,DCBDEBAD            LOAD DEB ADDR          @ZA04212
         MVC   DXDEBUCB(K6),DEBUCBAD    UCB ADDRESS TO DEB     @ZA04212
*
         TM    WTGPATHS,WTGTCLOS        CHECK FOR TCLOSE       @ZA04212
         BZ    CCM01110                 BRANCH IF NOT TCLOSE   @ZA04212
         MVC   WTGMODNM,TCLOSE          SETUP TO RETURN TCLOSE @ZA04212
         MVC   WTGIDTTR,IFG0202U        SETUP FOR IFG0232Z     @ZA04212
         MVC   WTGIDTTR(K2),ID2B2Z      SETUP ALIAS ENTRY      @ZA04212
         LA    RET,K4                   SET BRANCH TABLE ENTRY @ZA04212
         B     CCM01150                 BRANCH, CHECK NEXT DCB @ZA04212
*
CCM01110 EQU   *                        CHECK NEXT LOAD        @ZA04212
*
         TM    UCBFL1,UCBNOTRD          CHECK IF VOL MTD       @ZA04212
         BO    CCM01120                 BRANCH IF NOT MTD      @ZA04212
         TM    DXDCBLST,PLISTLV         LEAVE OR REREAD        @ZA04212
         BNZ   CCM01120                 BRANCH IF EITHER       @ZA04212
*        ASSUME POSITIONING TO BE DONE IN IFG0202F
         MVC   WTGIDTTR,IFG0202F        POSITIONING MOD        @ZA04212
         LA    RET,K4                   BRANCH TABLE ENTRY     @ZA04212
         B     CCM01150                 BRANCH, CHECK NEXT DCB @ZA04212
*
CCM01120 EQU   *                        CHECK NEXT LOAD        @ZA04212
*
         MVC   WTGIDTTR,IFG0202J        FINISH UP DCB          @ZA04212
         XR    RET,RET                  BRANCH TABLE ENTRY     @ZA04212
*
CCM01150 EQU   *                        SAVE REGISTERS         @ZA04212
*
         STM   RTIOT,RET,DXREG9         STORE FOR QUEUED PROC  @ZA04212
*
CCM01200 EQU   *                        WRONG MODULE           @ZA04212
*
         TM    DXDCBLST,LASTNTRY        IS THIS THE LAST DCB   @ZA04212
         LA    RPARC,DXDCBLST+L'DXDCBLST GET NEXT PARM PTR     @ZA04212
         LA    RWTGC,WTGENTRY+L'WTGENTRY GET NEXT ENTRY PTR    @ZA04212
         BNO   CCM01100                 NO, BRANCH             @ZA04212
*
         L     RF,WTGPREFX              LOAD POINTER TO PREFIX @ZA04212
         L     RPAR,IECUPRML-IECPREFX(,RF) LOAD PTR TO PARMS   @ZA04212
         LR    RPARC,RPAR               GET FIRST PARM PTR     @ZA04212
         LA    RWTGC,WTGENTRY-WTG(,RWTG) PTR TO 1ST WTG ENTRY  @ZA04212
         L     RES,CVTPTR               LOAD CVT POINTER       @ZA04212
         L     RES,CVTDMSR-CVT(,RES)    RESTORE RESIDENT PTR   @ZA04212
*
CCM01500 EQU   *                        NOT LAST DCB           @ZA04212
*
         L     RCORE,WTGCORE-K1         GET WORK AREA PTR      @ZA04212
         LA    RCORE,FORCORE            CLEAR HI BYTE          @ZA04212
         LTR   RCORE,RCORE              TEST FOR WORK AREA     @ZA04212
         BNZ   CCM02000                 BRANCH IF VALID        @ZA04212
*
         TM    DXDCBLST,LASTNTRY        IS THIS THE LAST DCB   @ZA04212
         LA    RPARC,DXDCBLST+L'DXDCBLST GET NEXT PARM PTR     @ZA04212
         LA    RWTGC,WTGENTRY+L'WTGENTRY GET NEXT ENTRY PTR    @ZA04212
         BNO   CCM01500                 NO, BRANCH             @ZA04212
*
CCM02000 EQU   *                        RIGHT MODULE           @ZA04212
*
         L     RDCB,DXPDCBAD            LOAD DCB POINTER       @ZA04212
         LM    RTIOT,RET,DXREG9         RELOAD                 @ZA07184
         LM    R0,R1,DXREG0             REGISTERS              @ZA07184
         IECRES LOAD,BRANCH=QUEUED      GOTO NEXT LOAD         @ZA04212
*                                                                Y02134
         EJECT
*
***********************************************************************
*
*        CONSTANTS
*
***********************************************************************
*
ID2B2Y   DC    CL2'2Y'                  IFG0232Y ALIAS         @ZA05231
ID2B2Z   DC    CL2'2Z'                  IFG0202U ALIAS         @ZA04212
*
         XCTLTABL ID=(ID2B2B,2B,,2H,,2F,,2U,,2J,               @ZA04212X
               THISMOD,IFG0202B,TCLOSE,IFG0232Y,               @ZA04212X
               RETETRLI,IFG0556B,RETCTRLO,IGG0200B,            @ZA04212X
               ,NSLETRLI,,NSLCTRLO),                           @ZA04212X
               SVC=020,BRT=YES,LENGTH=                         @ZA04212
*
         IECDSECS CVT,TCB,TIOT,DCB,DEB,UCB,PSA,                @ZA04212X
               MAIN,WTG,PREFX,RRPL,                            @ZA04212X
               EXPAND=YES                                      @ZA04212
*
         IECEQU
         END
