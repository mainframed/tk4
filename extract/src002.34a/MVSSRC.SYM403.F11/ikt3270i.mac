         TITLE '*** IKT3270I: INPUT DATA HANDLING ROUTINE ***          *
                        '
IKT3270I CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKT3270I  78.045'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @05,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@05                                         0001
*  TVWAPTR=TSBXTVWA;                   /* ADDRESSING TO TVWA @G58AK3B*/
         L     @12,PSAAOLD                                         0111
         L     @12,ASCBTSB(,@12)                                   0111
         L     @07,TSBEXTNT(,@12)                                  0111
         L     TVWAPTR,TSBXTVWA(,@07)                              0111
*  TIMGETMN = TVWATIMW;                /* TIM WORK AREA ADDR @G58AK3B*/
         L     TIMGETMN,TVWATIMW(,TVWAPTR)                         0112
*  TIMLNNO = MAX(2,MIN(TSBLNNO,PHYSLNNO));                 /*@ZA13627*/
*                                                                  0113
         SLR   @08,@08                                             0113
         IC    @08,TSBLNNO(,@12)                                   0113
         L     @07,PHYSLNNO(,TIMGETMN)                             0113
         CR    @08,@07                                             0113
         BNH   *+6
         LR    @08,@07                                             0113
         LA    @07,2                                               0113
         CR    @08,@07                                             0113
         BNL   *+6
         LR    @08,@07                                             0113
         ST    @08,TIMLNNO(,TIMGETMN)                              0113
*  IF TSBIFLSH='1'B THEN               /* THROW DATA AWAY?           */
         TM    TSBIFLSH(@12),B'00001000'                           0114
         BNO   @RF00114                                            0114
*   DO;                                                            0115
*     IF RPLRLEN > BUFLEN ×            /* CHECK ANOTHER RECEIVE NEC. */
*        RPLFIRST = '1'B ×                                 /*@G58AK3B*/
*        RPLMIDLE = '1'B THEN                              /*@G58AK3B*/
         LA    @12,2348                                            0116
         LR    @08,TIMGETMN                                        0116
         ALR   @08,@12                                             0116
         CLC   RPLRLEN(4,@08),@CF02152                             0116
         BH    @RT00116                                            0116
         ALR   @12,TIMGETMN                                        0116
         TM    RPLFIRST+16(@12),B'11000000'                        0116
         BZ    @RF00116                                            0116
@RT00116 DS    0H                                                  0117
*       REC2FLG = '1'B;                /* INDICATE NEXT RECEIVE NECES*/
         OI    REC2FLG(TIMGETMN),B'00000010'                       0117
*     ELSE                             /* OTHERWISE SCHEDULE TOM     */
*       DO;                                                        0118
         B     @RC00116                                            0118
@RF00116 DS    0H                                                  0119
*         REC2FLG='0'B;                /* NO 2ND RECEIVE NECESSARY   */
*         TIMSCHTM='1'B;               /* SCHEDULE TOM               */
         OI    TIMSCHTM(TIMGETMN),B'01000000'                      0120
         NI    REC2FLG(TIMGETMN),B'11111101'                       0120
*         TVWANOFB = '0'B;             /* RESET NO FLASHBACK @G38AK3B*/
         NI    TVWANOFB(TVWAPTR),B'11101111'                       0121
*         TVWABKMG='0'B;               /* NO FLASHBACK       @ZM20856*/
         NI    TVWABKMG(TVWAPTR),B'11111011'                       0122
*         TVWATQL1=0;                  /* CLEAR FLASHBACK 1  @ZM20856*/
         MVI   TVWATQL1(TVWAPTR),X'00'                             0123
*         TVWATQL2=0;                  /* CLEAR FLASHBACK 2  @ZM20856*/
         MVI   TVWATQL2(TVWAPTR),X'00'                             0124
*       END;                                                       0125
*   END;                               /* END DO FOR TSBIFLSH='1'    */
*  ELSE                                                            0127
*      DO;                                                         0127
         B     @RC00114                                            0127
@RF00114 DS    0H                                                  0128
*      IF TVWAPGN='0'B THEN            /* NO PAGING?                 */
         TM    TVWAPGN(TVWAPTR),B'01000000'                        0128
         BNZ   @RF00128                                            0128
*      DO;                             /* NO PAGING                  */
*        IF RPLCSI='1'B   THEN         /* CHECK FOR ASCII INPUT      */
         LA    @12,2348                                            0130
         ALR   @12,TIMGETMN                                        0130
         TM    RPLCSI+16(@12),B'00001000'                          0130
         BNO   @RF00130                                            0130
*         CALL ASCITRAN;               /* CALL ROUTINE TO CONVERT INP*/
         BAL   @14,ASCITRAN                                        0131
*        ELSE;                         /* DO NOTHING IF ALREADY EBCD */
*                                                                  0132
@RF00130 DS    0H                                                  0133
*        /************************************************************/
*        /*  THE FOLLOWING CODE CHECKS THE AVAILIBILITY OF A USER    */
*        /*  EXIT. IF THE ADDRESS OF IKTIDSX2 IS NOT ZERO, THEN THE  */
*        /*  USER IS GIVEN CONTROL WITH REG0 CONTAINING THE ADDRESS  */
*        /*  OF THE DATA TO BE SCANNED AND REG1 CONTAINING THE       */
*        /*  LENGTH OF THAT DATA.                                    */
*        /************************************************************/
*                                                                  0133
*        IF ADDR(IKTIDSX2)^=0 THEN                                 0133
         L     @12,@CV02178                                        0133
         LTR   @12,@12                                             0133
         BZ    @RF00133                                            0133
*         DO;                                                      0134
*           RFY (REG0,REG1,REG2) RSTD; /* RESTRICT WORK REGS         */
*           REG0=RPLAREA;              /* DATA TO BE TRANSLATED      */
         LA    @12,2348                                            0136
         LR    @08,TIMGETMN                                        0136
         ALR   @08,@12                                             0136
         L     REG0,RPLAREA(,@08)                                  0136
*           IF RPLRLEN > BUFLEN THEN                               0137
         LA    @08,1500                                            0137
         ALR   @12,TIMGETMN                                        0137
         C     @08,RPLRLEN(,@12)                                   0137
         BNL   @RF00137                                            0137
*             REG1=BUFLEN;             /* SCAN MAX BUFFER LENGTH     */
         LR    REG1,@08                                            0138
*           ELSE                       /* OTHERWISE SCAN ALL DATA    */
*             REG1=RPLRLEN;                                        0139
         B     @RC00137                                            0139
@RF00137 LA    @12,2348                                            0139
         ALR   @12,TIMGETMN                                        0139
         L     REG1,RPLRLEN(,@12)                                  0139
*           REG2 = REG13;              /* SAVE REGISTER 13   @G58AK3B*/
@RC00137 LR    REG2,REG13                                          0140
*           REG13 = ADDR(SAREA2);      /* SEC SAVE AREA      @G58AK3B*/
         LA    REG13,SAREA2(,TIMGETMN)                             0141
*           CALL IKTIDSX2;             /* CALL USER TRANSLATION RTN  */
         L     @15,@CV02178                                        0142
         BALR  @14,@15                                             0142
*           REG13 = REG2;              /* RESTORE REG 13     @G58AK3B*/
         LR    REG13,REG2                                          0143
*           RFY (REG0,REG1,REG2) UNRSTD;                           0144
*         END;                                                     0145
*        ELSE;                                                     0146
@RF00133 DS    0H                                                  0147
*/********************************************************************/
*/*    AT THIS POINT THE INPUT DATA HAS BEEN TRANSLATED IF NECESSARY */
*/*    NOW THE DATA WILL BE SCANNED FOR INPUT LINE DELIMITERS.       */
*/*            THE DATA WILL BE BROKEN INTO LINE SEGMENTS AND        */
*/*    PLACED ON THE INPUT QUEUE.                                    */
*/********************************************************************/
*                                                                  0147
*        /************************************************************/
*        /* THIS CODE WILL HELP TOM IN THE PLACEMENT OF THE NEXT     */
*        /* ATTRIBUTE BYTE WHEN VTIOC IS DOING THE SCREEN MANAGEMENT */
*        /************************************************************/
*                                                                  0147
*        IF REC2FLG='0'B & TVWASCAN='1'B THEN                      0147
         TM    REC2FLG(TIMGETMN),B'00000010'                       0147
         BNZ   @RF00147                                            0147
         TM    TVWASCAN(TVWAPTR),B'10000000'                       0147
         BNO   @RF00147                                            0147
*          TVWADARC='1'B;              /* SET DATA FOUND BIT @ZA19883*/
         OI    TVWADARC(TVWAPTR),B'00000001'                       0148
*        ELSE;                         /* 2ND RECEIVE OR TVWASCAN OFF*/
*                                                                  0149
@RF00147 DS    0H                                                  0150
*        SCANPTR=RPLAREA;              /* INITIALIZE SCAN AREA       */
         LA    @12,2348                                            0150
         LR    @08,TIMGETMN                                        0150
         ALR   @08,@12                                             0150
         L     SCANPTR,RPLAREA(,@08)                               0150
*        DONECNT=0;                    /* NUMBER BYTES DATA PROCESSED*/
         SLR   @08,@08                                             0151
         ST    @08,DONECNT(,TIMGETMN)                              0151
*        DATALINE=0;                   /* INPUT LINE LENGTH          */
         ST    @08,DATALINE(,TIMGETMN)                             0152
*        IF RPLRLEN > BUFLEN THEN      /* IS ALL DATA IN BUFFER?     */
         LA    @08,1500                                            0153
         ALR   @12,TIMGETMN                                        0153
         C     @08,RPLRLEN(,@12)                                   0153
         BNL   @RF00153                                            0153
*          COUNT=BUFLEN;               /* NO, SCAN BUFFER LENGTH     */
         ST    @08,COUNT(,TIMGETMN)                                0154
*        ELSE                                                      0155
*          COUNT=RPLRLEN;              /* YES, SCAN DATA LENGTH      */
         B     @RC00153                                            0155
@RF00153 LA    @12,2348                                            0155
         ALR   @12,TIMGETMN                                        0155
         L     @12,RPLRLEN(,@12)                                   0155
         ST    @12,COUNT(,TIMGETMN)                                0155
*        IF REC2FLG = '0'B THEN                            /*@ZA13627*/
@RC00153 TM    REC2FLG(TIMGETMN),B'00000010'                       0156
         BNZ   @RF00156                                            0156
*          CALL HEADPROC;              /* CALL HEADER PROCESS RTN    */
         BAL   @14,HEADPROC                                        0157
*        ELSE;                                             /*@ZA13627*/
@RF00156 DS    0H                                                  0159
         EJECT
*      /**************************************************************/
*      /*  NOW THE DATA WILL BE SCANNED FOR THE LINE LENGTH          */
*      /*  WHEN THE LINE LENGTH IS FOUND, THE DATA WILL BE PUT ON    */
*      /*  THE INPUT QUEUE PRECEDED BY THE HEADER INFORMATION.       */
*      /*  SINCE DATA CAN ONLY BE SCANNED IN 256 BYTE LENGTHS,       */
*      /*  THIS VALUE WILL BE USED WHEN THE REMAINING DATA EXCEEDS   */
*      /*  THE 256 BYTE MAXIMUM.                                     */
*      /**************************************************************/
*                                                                  0159
*        DO UNTIL DONECNT=COUNT  × TIMADDER='1'B;                  0159
@DL00159 DS    0H                                                  0160
*          RFY SCANAREA BASED(SCANPTR); /* BUFFER AREA POINTER       */
*          RFY (REG1,REG2) RSTD;       /* USED BY TRT BUILT-IN FUNC  */
*          DELIMFLG='0'B;              /* INIT DELIM FLAG            */
         NI    DELIMFLG(TIMGETMN),B'01111111'                      0162
*          REG1=0;                     /* INITIALIZE REG 1 FOR SCAN  */
         SLR   REG1,REG1                                           0163
*          BUFPTR=SCANPTR;             /* RESET BUFFER POINTER       */
         ST    SCANPTR,BUFPTR(,TIMGETMN)                           0164
*          DO UNTIL DELIMFLG='1'B × DONECNT=COUNT;                 0165
@DL00165 DS    0H                                                  0166
*           /* SET UP VALUE FOR TRT LENGTH. LIMIT TO 256             */
*           IF COUNT-DONECNT > 256 THEN                            0166
         LA    @12,256                                             0166
         L     @08,COUNT(,TIMGETMN)                                0166
         SL    @08,DONECNT(,TIMGETMN)                              0166
         CR    @08,@12                                             0166
         BNH   @RF00166                                            0166
*            VALUE=256;                /* SCAN VALUE AT MAX          */
         ST    @12,VALUE(,TIMGETMN)                                0167
*           ELSE                                                   0168
*            VALUE=COUNT-DONECNT;      /* ELSE SCAN ALL DATA         */
         B     @RC00166                                            0168
@RF00166 L     @12,COUNT(,TIMGETMN)                                0168
         SL    @12,DONECNT(,TIMGETMN)                              0168
         ST    @12,VALUE(,TIMGETMN)                                0168
*           IF VALUE >0 THEN           /* CHECK FOR NULL LINE        */
@RC00166 L     @12,VALUE(,TIMGETMN)                                0169
         LTR   @12,@12                                             0169
         BNP   @RF00169                                            0169
*           DO;                                                    0170
*           TRT(SCANAREA(1:VALUE),NEWLINE(1)); /* TRANSLATE DATA     */
         L     @03,VALUE(,TIMGETMN)                                0171
         BCTR  @03,0                                               0171
         EX    @03,@SB02264                                        0171
*           BC(8,NODELIM);             /* NO DELIMITER FOUND         */
         BC    8,NODELIM                                           0172
*           DELIMFLG='1'B;             /* TURN ON DELIMITER FOUND FLG*/
         OI    DELIMFLG(TIMGETMN),B'10000000'                      0173
*           DATALINE=(REG1-SCANPTR)+DATALINE; /* LINE SIZE           */
         LR    @12,REG1                                            0174
         SLR   @12,SCANPTR                                         0174
         LR    @08,@12                                             0174
         AL    @08,DATALINE(,TIMGETMN)                             0174
         ST    @08,DATALINE(,TIMGETMN)                             0174
*           VALUE=REG1-SCANPTR;        /* RESET VALUE                */
         ST    @12,VALUE(,TIMGETMN)                                0175
*           BC(15,DELIM);              /* SKIP TO DELIMITER FND CDE  */
         BC    15,DELIM                                            0176
*           END;                       /* END VALUE GREATER THAN 0   */
*           ELSE;                                                  0178
@RF00169 DS    0H                                                  0179
*        NODELIM:                                                  0179
*           DATALINE=VALUE+DATALINE;   /* SIZE OF DATA LINE          */
NODELIM  L     @12,VALUE(,TIMGETMN)                                0179
         AL    @12,DATALINE(,TIMGETMN)                             0179
         ST    @12,DATALINE(,TIMGETMN)                             0179
*        DELIM:                                                    0180
*           SCANPTR=SCANPTR+VALUE;     /* UPDATE SCAN POINTER        */
DELIM    L     @12,VALUE(,TIMGETMN)                                0180
         ALR   SCANPTR,@12                                         0180
*           DONECNT=DONECNT+VALUE;     /* UPDATE DATA PROCESSED COUNT*/
         AL    @12,DONECNT(,TIMGETMN)                              0181
         ST    @12,DONECNT(,TIMGETMN)                              0181
*          END;                        /* END OF DO WHILE LOOP       */
@DE00165 TM    DELIMFLG(TIMGETMN),B'10000000'                      0182
         BO    @DC00165                                            0182
         CLC   DONECNT(4,TIMGETMN),COUNT(TIMGETMN)                 0182
         BNE   @DL00165                                            0182
@DC00165 DS    0H                                                  0183
*          RFY (REG1,REG2) UNRSTD;     /* FREE REGISTERS 1 AND 2     */
*                                                                  0183
*         /***********************************************************/
*         /* THIS MARKS THE END OF THE DO WHILE TO SCAN FOR DELIMITER*/
*         /* EITHER A DELIMITER WAS FOUND OR ALL THE DATA IN THE     */
*         /* BUFFER WAS PROCESSED.                                   */
*         /***********************************************************/
*                                                                  0184
*         IF DELIMFLG='1'B THEN        /* CHECK FOR A DELIMITER FOUND*/
         TM    DELIMFLG(TIMGETMN),B'10000000'                      0184
         BNO   @RF00184                                            0184
*          DO;                                                     0185
*            IF IPPRTL='1'B THEN       /* CHECK FOR PRIOR PARTIAL    */
         TM    IPPRTL(TIMGETMN),B'00100000'                        0186
         BNO   @RF00186                                            0186
*              PRIORPRT='1'B;          /* SET FLAG ACCORDINGLY       */
         OI    PRIORPRT(TIMGETMN),B'00000001'                      0187
*            ELSE;                                                 0188
@RF00186 DS    0H                                                  0189
*            IPAVBL='1'B;              /* MARK LINE AVAILABLE        */
*            IPPRTL='0'B;              /* LINE NOT PARTIAL LINE      */
         OI    IPAVBL(TIMGETMN),B'10000000'                        0190
         NI    IPPRTL(TIMGETMN),B'11011111'                        0190
*            IF PRIORPRT='0'B THEN     /* INCLUDE HEADER FOR NEW LINE*/
         TM    PRIORPRT(TIMGETMN),B'00000001'                      0191
         BNZ   @RF00191                                            0191
*            DO;                                                   0192
*            IPBFSZ=HEADCNT+DATALINE;  /* SET LINE LENGTH FOR Q MGR  */
         LH    @12,HEADCNT(,TIMGETMN)                              0193
         LR    @08,@12                                             0193
         AL    @08,DATALINE(,TIMGETMN)                             0193
         STH   @08,IPBFSZ(,TIMGETMN)                               0193
*            IPCCC=HEADCNT;            /* SIZE OF  HEADER            */
         STC   @12,IPCCC(,TIMGETMN)                                0194
*            END;                                                  0195
*            ELSE                      /* NO HEADER FOR PREVIOUS PRTL*/
*            DO;                                                   0196
         B     @RC00191                                            0196
@RF00191 DS    0H                                                  0197
*            IPBFSZ=DATALINE;          /* ONLY DATA ON QUEUE         */
         L     @12,DATALINE(,TIMGETMN)                             0197
         STH   @12,IPBFSZ(,TIMGETMN)                               0197
*            IPCCC=0;                  /* HEADER VALUE SET TO ZERO   */
         MVI   IPCCC(TIMGETMN),X'00'                               0198
*            END;                                                  0199
*            IF SCANAREA(1)=FIELDMRK THEN                          0200
@RC00191 CLI   SCANAREA(SCANPTR),X'1E'                             0200
         BNE   @RF00200                                            0200
*              DONECNT=DONECNT+1;      /* UPDATE DATA SCANNED NUMBER */
         LA    @12,1                                               0201
         AL    @12,DONECNT(,TIMGETMN)                              0201
         ST    @12,DONECNT(,TIMGETMN)                              0201
*            ELSE;                                                 0202
@RF00200 DS    0H                                                  0203
*            CALL ADDELRTN;            /* ADD ELEMENT TO INPUT QUEUE */
         BAL   @14,ADDELRTN                                        0203
*          END;                        /* END DELIMITER FOUND PROC   */
*         ELSE                                                     0205
*             DO;                      /* NO DELIMITER FOUND         */
         B     @RC00184                                            0205
@RF00184 DS    0H                                                  0206
*               IF IPPRTL='1'B THEN    /* CHECK FOR PREVIOUS PRTL    */
         TM    IPPRTL(TIMGETMN),B'00100000'                        0206
         BNO   @RF00206                                            0206
*                 PRIORPRT='1'B;       /* SET INDICATOR IF YES       */
         OI    PRIORPRT(TIMGETMN),B'00000001'                      0207
*               ELSE;                                              0208
@RF00206 DS    0H                                                  0209
*               IF PRIORPRT='0'B THEN  /* CHECK FOR PARTIAL LINE     */
         TM    PRIORPRT(TIMGETMN),B'00000001'                      0209
         BNZ   @RF00209                                            0209
*               DO;                                                0210
*               IPBFSZ=HEADCNT+DATALINE; /* SIZE OF ELEMENT NEEDED   */
         LH    @12,HEADCNT(,TIMGETMN)                              0211
         LR    @08,@12                                             0211
         AL    @08,DATALINE(,TIMGETMN)                             0211
         STH   @08,IPBFSZ(,TIMGETMN)                               0211
*               IPCCC=HEADCNT;         /* PART OF LINE THAT IS HEADER*/
         STC   @12,IPCCC(,TIMGETMN)                                0212
*               END;                   /* END FULL LINE PROCESS      */
*               ELSE                   /* PARTIAL LINE PROCESS       */
*                 DO;                                              0214
         B     @RC00209                                            0214
@RF00209 DS    0H                                                  0215
*                   IPCCC=0;           /* DO NOT PROCESS HEADER      */
         MVI   IPCCC(TIMGETMN),X'00'                               0215
*                   IPBFSZ=DATALINE;   /* SIZE OF Q MANAGER BUFFER   */
         L     @12,DATALINE(,TIMGETMN)                             0216
         STH   @12,IPBFSZ(,TIMGETMN)                               0216
*                 END;                                             0217
*               IF RPLRLEN > COUNT ×     /* MORE DATA?       @ZM20581*/
*                  RPLFIRST='1'B ×       /* BOC?             @ZM20581*/
*                  RPLMIDLE='1'B THEN    /* MOC?             @ZM20581*/
@RC00209 LA    @12,2348                                            0218
         LR    @08,TIMGETMN                                        0218
         ALR   @08,@12                                             0218
         L     @08,RPLRLEN(,@08)                                   0218
         C     @08,COUNT(,TIMGETMN)                                0218
         BH    @RT00218                                            0218
         ALR   @12,TIMGETMN                                        0218
         TM    RPLFIRST+16(@12),B'11000000'                        0218
         BZ    @RF00218                                            0218
@RT00218 DS    0H                                                  0219
*                 DO;                                              0219
*                   DONECNT=COUNT;     /* PROCESSING FINISHED        */
         L     @12,COUNT(,TIMGETMN)                                0220
         ST    @12,DONECNT(,TIMGETMN)                              0220
*                   IPAVBL='0'B;       /* LINE NOT AVAILABLE FOR TGET*/
*                   IPPRTL='1'B;       /* INPUT NOT A FULL LINE      */
         OI    IPPRTL(TIMGETMN),B'00100000'                        0222
         NI    IPAVBL(TIMGETMN),B'01111111'                        0222
*                 END;                                             0223
*               ELSE                                               0224
*                 DO;                                              0224
         B     @RC00218                                            0224
@RF00218 DS    0H                                                  0225
*                   IPAVBL='1'B;       /* LINE IS AVAILABLE          */
*                   IPPRTL='0'B;       /* INPUT IS A FULL LINE       */
         OI    IPAVBL(TIMGETMN),B'10000000'                        0226
         NI    IPPRTL(TIMGETMN),B'11011111'                        0226
*                 END;                                             0227
*               CALL ADDELRTN;                                     0228
@RC00218 BAL   @14,ADDELRTN                                        0228
*             END;                                                 0229
*         SCANPTR=RPLAREA+DONECNT;     /* UPDATE BUFFER POINTER      */
@RC00184 LA    @12,2348                                            0230
         ALR   @12,TIMGETMN                                        0230
         L     SCANPTR,RPLAREA(,@12)                               0230
         AL    SCANPTR,DONECNT(,TIMGETMN)                          0230
*      END;                            /* END OF SCAN DATA LOOP      */
@DE00159 CLC   DONECNT(4,TIMGETMN),COUNT(TIMGETMN)                 0231
         BE    @DC00159                                            0231
         TM    TIMADDER(TIMGETMN),B'00010000'                      0231
         BNO   @DL00159                                            0231
@DC00159 DS    0H                                                  0232
*      END;                            /* END NON-PAGING             */
*                                                                  0232
*    ELSE                              /* BEGIN SUPPORT              */
*      DO;                             /* FORCE RESHOW CODE          */
         B     @RC00128                                            0233
@RF00128 DS    0H                                                  0234
*        TIMADDER='1'B;                /* TREAT AS ADD-ERROR @ZM21079*/
         OI    TIMADDER(TIMGETMN),B'00010000'                      0234
*        COUNT=MIN(RPLRLEN,BUFLEN);    /* LENGTH OF DATA RECEIVED  0235
*                                                            @ZM21467*/
         LA    @12,2348                                            0235
         ALR   @12,TIMGETMN                                        0235
         L     @12,RPLRLEN(,@12)                                   0235
         LA    @08,1500                                            0235
         CR    @12,@08                                             0235
         BNH   *+6
         LR    @12,@08                                             0235
         ST    @12,COUNT(,TIMGETMN)                                0235
*        IPREQ=ADDEL;                  /* REQUEST ADD ELEMENT        */
         MVI   IPREQ(TIMGETMN),X'01'                               0236
*        IPCCC=0;                      /* NO HEADER INFORMATION      */
         MVI   IPCCC(TIMGETMN),X'00'                               0237
*        IPPRTL='0'B;                  /* FULL LINE INPUT            */
*        IPAVBL='1'B;                  /* AVAILABLE FOR TGET         */
         OI    IPAVBL(TIMGETMN),B'10000000'                        0239
         NI    IPPRTL(TIMGETMN),B'11011111'                        0239
*        IPBFSZ=1;                     /* LENGTH OF INPUT            */
         MVC   IPBFSZ(2,TIMGETMN),@CH00067                         0240
*        RFY (REG1,REG2) RSTD;         /* RESTRICT WORK REGS @G58AK3B*/
*        REG2 = REG13;                 /* SAVE REG 13        @G58AK3B*/
         LR    REG2,REG13                                          0242
*        QMPTR = ADDR(IPARMS);         /* POINTER TO IPARMS  @G58AK3B*/
         LA    @12,IPARMS(,TIMGETMN)                               0243
         ST    @12,QMPTR(,TIMGETMN)                                0243
*        REG1 = ADDR(QMPTR);           /* IPARMS PTR ADDRESS @G58AK3B*/
         LA    REG1,QMPTR(,TIMGETMN)                               0244
*        REG13 = ADDR(SAREA2);         /* SEC SAVE AREA      @G58AK3B*/
         LA    REG13,SAREA2(,TIMGETMN)                             0245
*        CALL IKTQMIN;                 /* CALL INPUT QUEUE MANAGER   */
         L     @12,FLCCVT                                          0246
         L     @12,CVTTCASP(,@12)                                  0246
         L     @15,TCASIQM(,@12)                                   0246
         BALR  @14,@15                                             0246
*        REG13 = REG2;                 /* RESTORE REG 13     @G58AK3B*/
         LR    REG13,REG2                                          0247
*        RFY (REG1,REG2) UNRSTD;       /* FREE WORK REGS     @G58AK3B*/
*        IF IPRC=1 THEN                /* CHECK RETURN CODE          */
         CLI   IPRC(TIMGETMN),1                                    0249
         BNE   @RF00249                                            0249
*          QINBUF(1:1)=TVWARSHW;       /* MOVE IN RESHOW CDE         */
         L     @12,IPBUFADR(,TIMGETMN)                             0250
         MVC   QINBUF(1,@12),TVWARSHW(TVWAPTR)                     0250
*        ELSE;                         /* BAD RETURN ACTION          */
@RF00249 DS    0H                                                  0252
*      END;                            /* END PAGING SUPPORT         */
*      /**************************************************************/
*      /*  AT THIS POINT THE INPUT DATA STREAM HAS BEEN SCANNED AND  */
*      /*  EITHER ALL THE AVAILABLE DATA HAS BEEN PUT ON THE INPUT Q */
*      /*  OR WE HAVE FALLEN THROUGH THE PROCESS LOOP DUE TO AN ERROR*/
*      /*  THE FIRST CHECK MADE IS TO DETERMINE IF ALL THE PROCESSING*/
*      /*  WAS SUCCESSFUL.                                           */
*      /**************************************************************/
*                                                                  0253
*       IF TIMADDER='0'B THEN                                      0253
@RC00128 TM    TIMADDER(TIMGETMN),B'00010000'                      0253
         BNZ   @RF00253                                            0253
*         DO;                                                      0254
*           IF RPLRLEN > COUNT ×                                   0255
*              RPLFIRST = '1'B ×       /* BOC?               @G58AK3B*/
*              RPLMIDLE = '1'B THEN    /* MIDDLE OF CHAIN?   @G58AK3B*/
         LA    @12,2348                                            0255
         LR    @08,TIMGETMN                                        0255
         ALR   @08,@12                                             0255
         L     @08,RPLRLEN(,@08)                                   0255
         C     @08,COUNT(,TIMGETMN)                                0255
         BH    @RT00255                                            0255
         ALR   @12,TIMGETMN                                        0255
         TM    RPLFIRST+16(@12),B'11000000'                        0255
         BZ    @RF00255                                            0255
@RT00255 DS    0H                                                  0256
*             REC2FLG='1'B;            /* ANOTHER RECEIVE NECESSARY  */
         OI    REC2FLG(TIMGETMN),B'00000010'                       0256
*           ELSE                                                   0257
*             DO;                                                  0257
         B     @RC00255                                            0257
@RF00255 DS    0H                                                  0258
*               REC2FLG = '0'B;                            /*@ZA13627*/
         NI    REC2FLG(TIMGETMN),B'11111101'                       0258
*               TVWANOFB = '0'B;       /* RESET NO FLASHBACK @G38AK3B*/
         NI    TVWANOFB(TVWAPTR),B'11101111'                       0259
*               IF TVWALNCT > TIMLNNO THEN                 /*@ZA13627*/
         SLR   @12,@12                                             0260
         IC    @12,TVWALNCT(,TVWAPTR)                              0260
         C     @12,TIMLNNO(,TIMGETMN)                              0260
         BNH   @RF00260                                            0260
*                 TVWALNCT = 1;        /* RESET LINE COUNT   @ZA13627*/
         MVI   TVWALNCT(TVWAPTR),X'01'                             0261
*               ELSE;                                      /*@ZA13627*/
@RF00260 DS    0H                                                  0263
*             END;                     /* END RPLELEN=COUNT          */
*         END;                                                     0264
*       ELSE                                                       0265
*         DO;                                                      0265
         B     @RC00253                                            0265
@RF00253 DS    0H                                                  0266
*           IF RPLRLEN > COUNT ×       /* CHECK FOR 2ND RECEIVE NEC  */
*              RPLFIRST = '1'B ×       /* BOC?               @G58AK3B*/
*              RPLMIDLE = '1'B THEN    /* MIDDLE OF CHAIN?   @G58AK3B*/
         LA    @12,2348                                            0266
         LR    @08,TIMGETMN                                        0266
         ALR   @08,@12                                             0266
         L     @08,RPLRLEN(,@08)                                   0266
         C     @08,COUNT(,TIMGETMN)                                0266
         BH    @RT00266                                            0266
         ALR   @12,TIMGETMN                                        0266
         TM    RPLFIRST+16(@12),B'11000000'                        0266
         BZ    @RF00266                                            0266
@RT00266 DS    0H                                                  0267
*             REC2FLG='1'B;            /* SET SECOND RECEIVE FLAG    */
         OI    REC2FLG(TIMGETMN),B'00000010'                       0267
*           ELSE                       /* RECEIVE COMPLETE   @ZA13627*/
*             REC2FLG = '0'B;          /* RESET RECEIVE FLAG @ZA13627*/
         B     @RC00266                                            0268
@RF00266 NI    REC2FLG(TIMGETMN),B'11111101'                       0268
*           TVWANOFB = '0'B;           /* RESET NO FLASHBACK @G58AK3B*/
@RC00266 NI    TVWANOFB(TVWAPTR),B'11101111'                       0269
*           TVWABKMG='0'B;             /* NO FLASHBACK       @ZM20856*/
         NI    TVWABKMG(TVWAPTR),B'11111011'                       0270
*           TVWATQL1=0;                /* CLEAR FLASHBACK 1  @ZM20856*/
         MVI   TVWATQL1(TVWAPTR),X'00'                             0271
*           TVWATQL2=0;                /* CLEAR FLASHBACK 2  @ZM20856*/
         MVI   TVWATQL2(TVWAPTR),X'00'                             0272
*           TIMSCHTM='1'B;             /* SET SCHEDULE TOM FLAG      */
         OI    TIMSCHTM(TIMGETMN),B'01000000'                      0273
*         END;                                                     0274
*       IF REC2FLG='0'B ×              /* RECEIVE COMPLETED? @ZM21079*/
*          TIMADDER='1'B THEN          /* ADD-ERROR?         @ZM21079*/
@RC00253 TM    TIMADDER(TIMGETMN),B'00010000'                      0275
         BNZ   @RT00275                                            0275
         TM    REC2FLG(TIMGETMN),B'00000010'                       0275
         BO    @RF00275                                            0275
@RT00275 DS    0H                                                  0276
*         IF TSBIWAIT='1'B THEN                                    0276
         L     @12,PSAAOLD                                         0276
         L     @12,ASCBTSB(,@12)                                   0276
         TM    TSBIWAIT(@12),B'01000000'                           0276
         BNO   @RF00276                                            0276
*           DO;                                                    0277
*             RFY (REG0,REG1,REG2) RSTD;                           0278
*             REG2=REG13;              /* REG2 WILL HOLD SAVE ADDRESS*/
         LR    REG2,REG13                                          0279
*             REG0=8;                                              0280
         LA    REG0,8                                              0280
*             REG1='80000000'X;                                    0281
         L     REG1,@CF02224                                       0281
*             REG13='0800'X;                                       0282
         LA    REG13,2048                                          0282
*             CALL STATUS;                                         0283
         L     @12,FLCCVT                                          0283
         L     @12,CVTABEND(,@12)                                  0283
         L     @15,SCVTSTAT(,@12)                                  0283
         BALR  @14,@15                                             0283
*             REG13=REG2;              /* RESTORE SAVE AREA          */
         LR    REG13,REG2                                          0284
*             RFY (REG0,REG1,REG2) UNRSTD;                         0285
*             TSBIWAIT='0'B;                                       0286
         L     @12,PSAAOLD                                         0286
         L     @12,ASCBTSB(,@12)                                   0286
         NI    TSBIWAIT(@12),B'10111111'                           0286
*           END;                                                   0287
*         ELSE;                                                    0288
@RF00276 DS    0H                                                  0289
*       ELSE;                          /*                    @ZM21079*/
@RF00275 DS    0H                                                  0290
*      END;                            /* END TSBIFLSH = ZERO        */
         EJECT
*         /***********************************************************/
*         /* THE FOLLOWING CODE WILL CONVERT THE DATA IN THE INPUT   */
*         /* BUFFER FROM ASCII TO EBCDIC. THE LENGTH OF THE DATA     */
*         /* TO BE CONVERTED CAN NOT EXCEED THE BUFFER SIZE, EVEN    */
*         /* THOUGH RPLBUFL MAY INDICATE THAT ADDITIONAL DATA IS     */
*         /* WAITING TO BE RECEIVED. THE DATA WILL BE CONVERTED IN   */
*         /* 256 BYTE INCREMENTS UNTIL REMAINING DATA IS LESS THAN   */
*         /* 256 BYTES.                                              */
*         /* COUNT WILL CONTAIN THE LENGTH TO  BE TRANSLATED         */
*         /* VALUE WILL BE USED TO SUBSTRING THE TRANSLATE INSTRUCT  */
*         /***********************************************************/
*                                                                  0291
*RFY REG14 RSTD;                                                   0291
*ASCITRAN: PROCEDURE OPTIONS(NOSAVE);                              0292
@EL00001 DS    0H                                                  0292
@EF00001 DS    0H                                                  0292
@ER00001 LM    @14,@12,12(@13)                                     0292
         BR    @14                                                 0292
ASCITRAN DS    0H                                                  0293
*           IF RPLRLEN <= BUFLEN THEN   /* MAX TRANSLATE LENGTH      */
         LA    @15,2348                                            0293
         ALR   @15,TIMGETMN                                        0293
         L     @15,RPLRLEN(,@15)                                   0293
         C     @15,@CF02152                                        0293
         BH    @RF00293                                            0293
*             COUNT=RPLRLEN;            /* BUFLEN USED HERE          */
         ST    @15,COUNT(,TIMGETMN)                                0294
*           ELSE                                                   0295
*             COUNT=BUFLEN;             /* RPLRLEN USED HERE         */
         B     @RC00293                                            0295
@RF00293 MVC   COUNT(4,TIMGETMN),@CF02152                          0295
*          DONE='0'B;                   /* INITIALIZE LOOP FLAG      */
@RC00293 NI    DONE(TIMGETMN),B'11111011'                          0296
*          SCANPTR=RPLAREA;             /* INIT BEGIN DATA AREA      */
         LA    @15,2348                                            0297
         ALR   @15,TIMGETMN                                        0297
         L     SCANPTR,RPLAREA(,@15)                               0297
*          DO WHILE DONE='0'B;                                     0298
         B     @DE00298                                            0298
@DL00298 DS    0H                                                  0299
*            IF COUNT>256 THEN          /* MORE THAN 256 BYTES IN BUF*/
         LA    @15,256                                             0299
         L     @12,COUNT(,TIMGETMN)                                0299
         CR    @12,@15                                             0299
         BNH   @RF00299                                            0299
*              DO;                                                 0300
*                VALUE=256;             /* MAX TRANSLATION NUMB      */
         ST    @15,VALUE(,TIMGETMN)                                0301
*                COUNT=COUNT-256;       /* DECREMENT SCAN NUMBER     */
         SLR   @12,@15                                             0302
         ST    @12,COUNT(,TIMGETMN)                                0302
*              END;                                                0303
*            ELSE                       /* LESS THAT 256 TO TRANS    */
*              DO;                                                 0304
         B     @RC00299                                            0304
@RF00299 DS    0H                                                  0305
*                VALUE=COUNT;           /* SCAN LENGTH = ALL DATA    */
         L     @15,COUNT(,TIMGETMN)                                0305
         ST    @15,VALUE(,TIMGETMN)                                0305
*                DONE='1'B;             /* TRANSLATE LAST OF DATA    */
         OI    DONE(TIMGETMN),B'00000100'                          0306
*              END;                                                0307
*            TR(SCANAREA(1:VALUE),ASCIITAB); /* TRANSLATE TO EBCDIC  */
@RC00299 L     @15,VALUE(,TIMGETMN)                                0308
         BCTR  @15,0                                               0308
         L     @12,TVWAATBI(,TVWAPTR)                              0308
         EX    @15,@SB02272                                        0308
*            SCANPTR=SCANPTR+VALUE;          /* RESET BUFF POINTER   */
         AL    SCANPTR,VALUE(,TIMGETMN)                            0309
*          END;                              /* END OF DO WHILE LOOP */
@DE00298 TM    DONE(TIMGETMN),B'00000100'                          0310
         BZ    @DL00298                                            0310
*    END;                                    /* END ASCII TRANSLATION*/
@EL00002 DS    0H                                                  0311
@EF00002 DS    0H                                                  0311
@ER00002 BR    @14                                                 0311
         EJECT
*         /***********************************************************/
*         /* THE SAME PROCESS THAT WAS FOLLOWED FOR ASCII TRANSLATION*/
*         /* WILL BE FOLLOWED FOR USER TABLE TRANSLATION             */
*         /***********************************************************/
*                                                                  0312
* USERTRAN: PROCEDURE OPTIONS(NOSAVE);                             0312
USERTRAN DS    0H                                                  0313
*          RFY (REG1,REG2) RSTD;       /* RESTRICT REGS      @ZA18919*/
*          RFY REG3 RSTD;              /* USE TO POINT TO SCAN BUFF  */
*          RFY SCANAREA BASED(REG3);   /* BASE INPUT BUFFER ON REG3  */
*          REG3=BUFPTR;                /* INITIALIZE REG3            */
         L     REG3,BUFPTR(,TIMGETMN)                              0316
*          CNTRL=DATALINE;             /* INITIALIZE COUNT           */
         L     @15,DATALINE(,TIMGETMN)                             0317
         ST    @15,CNTRL(,TIMGETMN)                                0317
*          DONE='0'B;                  /* INITIALIZE LOOP CONTROL    */
         NI    DONE(TIMGETMN),B'11111011'                          0318
*          DO  WHILE DONE='0'B;        /* BEGIN TRANSLATION LOOP     */
         B     @DE00319                                            0319
@DL00319 DS    0H                                                  0320
*            REG1=0;                   /* INIT REG FOR TRT   @ZA18919*/
         SLR   REG1,REG1                                           0320
*            REG2=0;                   /* INIT REG FOR TRT   @ZA18919*/
         SLR   REG2,REG2                                           0321
*            IF CNTRL > 256 THEN                                   0322
         LA    @15,256                                             0322
         L     @12,CNTRL(,TIMGETMN)                                0322
         CR    @12,@15                                             0322
         BNH   @RF00322                                            0322
*              DO;                                                 0323
*                VALUE=256;            /* TRANLATE MAX VALUE         */
         ST    @15,VALUE(,TIMGETMN)                                0324
*                CNTRL=CNTRL-256;      /* REDUCE DATA TO TRANSLATE   */
         SLR   @12,@15                                             0325
         ST    @12,CNTRL(,TIMGETMN)                                0325
*              END;                                                0326
*            ELSE                                                  0327
*              DO;                     /* OTHERWISE TRANS ALL DATA   */
         B     @RC00322                                            0327
@RF00322 DS    0H                                                  0328
*                VALUE=CNTRL;          /* VALUE = DATA LEFT          */
         L     @15,CNTRL(,TIMGETMN)                                0328
         ST    @15,VALUE(,TIMGETMN)                                0328
*                DONE='1'B;            /* SET END OF LOOP INDICATOR  */
         OI    DONE(TIMGETMN),B'00000100'                          0329
*              END;                                                0330
*            TRT(SCANAREA(1:VALUE),SBATAB(1)); /* SBA?       @ZA18919*/
@RC00322 L     @15,VALUE(,TIMGETMN)                                0331
         BCTR  @15,0                                               0331
         EX    @15,@SB02274                                        0331
*            IF REG2=SBA THEN           /* SBA FOUND         @ZA18919*/
         C     REG2,@CF00454                                       0332
         BNE   @RF00332                                            0332
*              DO;                      /*                   @ZA18919*/
*                REG1=REG1-REG3;        /* INDEX OF SBA      @ZA18919*/
         SLR   REG1,REG3                                           0334
*                CNTRL=CNTRL+(VALUE-(REG1+3));             /*@ZA18919*/
         LA    @15,3                                               0335
         ALR   @15,REG1                                            0335
         LCR   @15,@15                                             0335
         AL    @15,VALUE(,TIMGETMN)                                0335
         AL    @15,CNTRL(,TIMGETMN)                                0335
         ST    @15,CNTRL(,TIMGETMN)                                0335
*                VALUE=REG1;            /* POINT BEFORE SBA  @ZA18919*/
         ST    REG1,VALUE(,TIMGETMN)                               0336
*                IF CNTRL=0 THEN        /*                   @ZA18919*/
         LTR   @15,@15                                             0337
         BNZ   @RF00337                                            0337
*                  DONE='1'B;           /* EXIT LOOP         @ZA18919*/
         OI    DONE(TIMGETMN),B'00000100'                          0338
*                ELSE;                  /*                   @ZA18919*/
@RF00337 DS    0H                                                  0340
*              END;                     /*                   @ZA18919*/
*            ELSE;                      /*                   @ZA18919*/
@RF00332 DS    0H                                                  0342
*            IF VALUE^=0 THEN           /*                   @ZA18919*/
         L     @15,VALUE(,TIMGETMN)                                0342
         LTR   @15,@15                                             0342
         BZ    @RF00342                                            0342
*              TR(SCANAREA(1:VALUE),TRANTAB);/* USER TRANSLATION     */
         L     @15,VALUE(,TIMGETMN)                                0343
         BCTR  @15,0                                               0343
         L     @12,TVWATABI(,TVWAPTR)                              0343
         EX    @15,@SB02276                                        0343
*            ELSE;                           /*              @ZA18919*/
@RF00342 DS    0H                                                  0345
*            IF REG2=0 THEN                  /*              @ZA18919*/
         LTR   REG2,REG2                                           0345
         BNZ   @RF00345                                            0345
*              REG3=REG3+VALUE;              /* UPDATE BUFFER POINTER*/
         AL    REG3,VALUE(,TIMGETMN)                               0346
*            ELSE                                                  0347
*              REG3=REG3+VALUE+3;            /* UDATE BUFFER PTR     */
         B     @RC00345                                            0347
@RF00345 LR    @15,REG3                                            0347
         AL    @15,VALUE(,TIMGETMN)                                0347
         AL    @15,@CF00072                                        0347
         LR    REG3,@15                                            0347
*          END;                              /* END DO WHILE LOOP    */
@RC00345 DS    0H                                                  0348
@DE00319 TM    DONE(TIMGETMN),B'00000100'                          0348
         BZ    @DL00319                                            0348
*          RFY (REG1,REG2,REG3) UNRSTD;      /* FREE REGS    @ZA18919*/
*          RFY SCANAREA BASED(SCANPTR);      /* REBASE INPUT AREA    */
*    END;                                    /* END USERTRAN ROUTINE */
@EL00003 DS    0H                                                  0351
@EF00003 DS    0H                                                  0351
@ER00003 BR    @14                                                 0351
         EJECT
*        /************************************************************/
*        /*  CHECK THAT THIS WAS THE PRIMARY RECEIVE TO GET THE DATA */
*        /*  IF REC2FLG=1 THEN A SUBSEQUENT RECEIVE WAS NEEDED       */
*        /*  TO RECEIVE ALL THE DATA FROM THE TERMINAL.              */
*        /************************************************************/
*                                                                  0352
* HEADPROC: PROCEDURE OPTIONS(NOSAVE);                             0352
HEADPROC DS    0H                                                  0353
*             HEADCNT=0;                /* INITIALIZE HEADER COUNT   */
         SLR   @15,@15                                             0353
         STH   @15,HEADCNT(,TIMGETMN)                              0353
*             IF COUNT<3 THEN           /* CHECK FOR SHORT READ      */
         L     @15,COUNT(,TIMGETMN)                                0354
         C     @15,@CF00072                                        0354
         BNL   @RF00354                                            0354
*             DO;                                                  0355
*             HEADER(1:COUNT)=SCANAREA; /* MOVE AID TO HEADER        */
         LR    @12,@15                                             0356
         BCTR  @12,0                                               0356
         EX    @12,@SM02278                                        0356
*             HEADCNT=COUNT;            /* RESET SIZE OF HEADER      */
         STH   @15,HEADCNT(,TIMGETMN)                              0357
*             SCANPTR=SCANPTR+COUNT;    /* ADJUST BUFFER POINTER     */
         ALR   SCANPTR,@15                                         0358
*             DONECNT=DONECNT+COUNT;    /* ADJUST DONECNT            */
         AL    @15,DONECNT(,TIMGETMN)                              0359
         ST    @15,DONECNT(,TIMGETMN)                              0359
*             END;                      /* END SHORT READ PROCESS    */
*             ELSE                                                 0361
*               DO;                     /* REGULAR INPUT PROCESSING  */
         B     @RC00354                                            0361
@RF00354 DS    0H                                                  0362
*                 HEADER(1:3)=SCANAREA; /* SAVE HEADER               */
         MVC   HEADER(3,TIMGETMN),SCANAREA(SCANPTR)                0362
*                 HEADCNT=HEADCNT+3;    /* UPDATE HEAD COUNT         */
         LA    @15,3                                               0363
         LH    @12,HEADCNT(,TIMGETMN)                              0363
         ALR   @12,@15                                             0363
         STH   @12,HEADCNT(,TIMGETMN)                              0363
*                 SCANPTR=SCANPTR+3;    /* UPDATE BUFFER POINTER     */
         ALR   SCANPTR,@15                                         0364
*                 DONECNT=DONECNT+3;    /* UPDATE BYTES PROCESSED    */
         AL    @15,DONECNT(,TIMGETMN)                              0365
         ST    @15,DONECNT(,TIMGETMN)                              0365
*               END;                                               0366
*             IF DONECNT<COUNT THEN                                0367
@RC00354 L     @15,DONECNT(,TIMGETMN)                              0367
         C     @15,COUNT(,TIMGETMN)                                0367
         BNL   @RF00367                                            0367
*             DO;                                                  0368
*             IF SCANAREA(1)=SBA THEN   /* CHECK SET BUFFER ADDRESS  */
         CLI   SCANAREA(SCANPTR),X'11'                             0369
         BNE   @RF00369                                            0369
*               DO;                                                0370
*                 HEADER(4:6)=SCANAREA; /* MOVE IN ADDITIONAL HEAD   */
         MVC   HEADER+3(3,TIMGETMN),SCANAREA(SCANPTR)              0371
*                 HEADCNT=HEADCNT+3;    /* UPDATE HEADER LENGTH      */
         LA    @12,3                                               0372
         LH    @08,HEADCNT(,TIMGETMN)                              0372
         ALR   @08,@12                                             0372
         STH   @08,HEADCNT(,TIMGETMN)                              0372
*                 SCANPTR=SCANPTR+3;    /* UPDATE BUFFER POINTER     */
         ALR   SCANPTR,@12                                         0373
*                 DONECNT=DONECNT+3;    /* UPDATE BYTES PROCESSED    */
         ALR   @15,@12                                             0374
         ST    @15,DONECNT(,TIMGETMN)                              0374
*               END;                                               0375
*             ELSE;                     /* UNFORMATTED INPUT         */
@RF00369 DS    0H                                                  0377
*            END;                                                  0377
*            ELSE;                                                 0378
@RF00367 DS    0H                                                  0379
*        END HEADPROC;                  /* END OF HEADPROC           */
@EL00004 DS    0H                                                  0379
@EF00004 DS    0H                                                  0379
@ER00004 BR    @14                                                 0379
         EJECT
*/********************************************************************/
*/*    THE ADDEL ROUTINE IS CALLED TO PLACE INCOMING DATA FROM THE   */
*/*    TERMINAL ON THE INPUT QUEUE, ONE LINE AT A TIME.              */
*/*    NOADDEL IS CHECKED TO SEE IF THE DATA SHOULD BE ADDED TO THE  */
*/*    QUEUE, LINE PROMPTING IS HANDLED, AND THE RETURN CODE FROM    */
*/*    THE QUEUE MANAGER IS CHECKED TO ASSURE A SUCCESSFUL ADD.      */
*/********************************************************************/
*                                                                  0380
*ADDELRTN:                                                         0380
*  PROCEDURE OPTIONS(NOSAVE);                                      0380
ADDELRTN DS    0H                                                  0381
*        SAVE14 = REG14;                /* SAVE RETURN ADDRESS       */
         ST    REG14,SAVE14(,TIMGETMN)                             0381
*        RFY REG14 UNRSTD;              /* FREE REGISTER 14          */
*        IF TSBAUTON='1'B THEN          /* CHECK FOR PROMPTING       */
         L     @12,PSAAOLD                                         0383
         L     @12,ASCBTSB(,@12)                                   0383
         TM    TSBAUTON(@12),B'01000000'                           0383
         BNO   @RF00383                                            0383
*          DO;                          /* PROMPTING ON              */
*            IF IPBFSZ<=HEADCNT & IPPRTL='0'B & PRIORPRT='0'B THEN 0385
         LH    @08,IPBFSZ(,TIMGETMN)                               0385
         CH    @08,HEADCNT(,TIMGETMN)                              0385
         BH    @RF00385                                            0385
         TM    IPPRTL(TIMGETMN),B'00100000'                        0385
         BNZ   @RF00385                                            0385
         TM    PRIORPRT(TIMGETMN),B'00000001'                      0385
         BNZ   @RF00385                                            0385
*              DO;                                                 0386
*                IPPRMPT='0'B;          /* SET PROMPT FLAG OFF       */
         NI    IPPRMPT(TIMGETMN),B'10111111'                       0387
*                TSBAUTON='0'B;         /* TURN OFF AUTOPROMPT       */
         NI    TSBAUTON(@12),B'10111111'                           0388
*                TVWAULK='0'B;          /* UNLOCK-KEYBOARD SW OFF    */
         NI    TVWAULK(TVWAPTR),B'11111011'                        0389
*              END;                                                0390
*            ELSE                                                  0391
*              IF TSBAULST='1'B & IPPRTL='0'B THEN                 0391
         B     @RC00385                                            0391
@RF00385 L     @12,PSAAOLD                                         0391
         L     @12,ASCBTSB(,@12)                                   0391
         TM    TSBAULST(@12),B'00010000'                           0391
         BNO   @RF00391                                            0391
         TM    IPPRTL(TIMGETMN),B'00100000'                        0391
         BNZ   @RF00391                                            0391
*                IPPRMPT='1'B;          /* SET PROMPT FLAG ON        */
         OI    IPPRMPT(TIMGETMN),B'01000000'                       0392
*              ELSE                                                0393
*                IPPRMPT='0'B;          /* SET PROMPT FLAG OFF       */
         B     @RC00391                                            0393
@RF00391 NI    IPPRMPT(TIMGETMN),B'10111111'                       0393
*          END;                         /* END OF PROMPTING          */
*        ELSE;                          /* PROMPTING OFF             */
@RF00383 DS    0H                                                  0396
*        IPREQ=ADDEL;                   /* REQUEST TO ADD ELT TO Q   */
@RC00383 MVI   IPREQ(TIMGETMN),X'01'                               0396
*        RFY (REG1,REG2) RSTD;          /* RESTRICT REGS     @G58AK3B*/
*        REG2 = REG13;                  /* SAVE REGISTER 13  @G58AK3B*/
         LR    REG2,REG13                                          0398
*        QMPTR = ADDR(IPARMS);          /* POINTER TO IPARMS @G58AK3B*/
         LA    @12,IPARMS(,TIMGETMN)                               0399
         ST    @12,QMPTR(,TIMGETMN)                                0399
*        REG1 = ADDR(QMPTR);            /* IPARMS PTR ADDR   @G58AK3B*/
         LA    REG1,QMPTR(,TIMGETMN)                               0400
*        REG13 = ADDR(SAREA2);          /* SEC SAVE AREA     @G58AK3B*/
         LA    REG13,SAREA2(,TIMGETMN)                             0401
*        CALL IKTQMIN;                  /* CALL INPUT QUEUE MANAGER  */
         L     @12,FLCCVT                                          0402
         L     @12,CVTTCASP(,@12)                                  0402
         L     @15,TCASIQM(,@12)                                   0402
         BALR  @14,@15                                             0402
*        REG13 = REG2;                  /* RESTORE REG 13    @G58AK3B*/
         LR    REG13,REG2                                          0403
*        RFY REG2 UNRSTD;               /* FREE WORK REG     @G58AK3B*/
*        PRIORPRT='0'B;                 /* SET PRIOR PARTIAL FLAG OFF*/
         NI    PRIORPRT(TIMGETMN),B'11111110'                      0405
*        IF IPRC=1 THEN                 /* CHECK RETURN CODE         */
         CLI   IPRC(TIMGETMN),1                                    0406
         BNE   @RF00406                                            0406
*          DO;                          /* GOOD RETURN, MOVE LINE    */
*            IF IPCCC>0 THEN            /* DO NOT MOVE NULL HEADER   */
         CLI   IPCCC(TIMGETMN),0                                   0408
         BNH   @RF00408                                            0408
*              QINBUF(1:IPCCC)=HEADER;  /* MOVE IN HEADER            */
         L     @12,IPBUFADR(,TIMGETMN)                             0409
         SLR   @08,@08                                             0409
         IC    @08,IPCCC(,TIMGETMN)                                0409
         BCTR  @08,0                                               0409
         EX    @08,@SM02281                                        0409
*            ELSE;                                                 0410
@RF00408 DS    0H                                                  0411
*            IF DATALINE > 0 THEN                                  0411
         L     @12,DATALINE(,TIMGETMN)                             0411
         LTR   @12,@12                                             0411
         BNP   @RF00411                                            0411
*              DO;                                                 0412
*                IF TVWATRAN='1'B THEN  /* CHECK FOR USER TRANSLATION*/
         TM    TVWATRAN(TVWAPTR),B'00000010'                       0413
         BNO   @RF00413                                            0413
*                  CALL USERTRAN;       /* TRANSLATE DATA INPUT      */
         BAL   @14,USERTRAN                                        0414
*                ELSE;                  /* NO USER TRANSLATION       */
@RF00413 DS    0H                                                  0416
*                RFY (REG0,REG1,REG2,WRK3) RSTD; /* MVCL WORK REGS   */
*                REG0=IPBUFADR+IPCCC;                              0417
         SLR   REG0,REG0                                           0417
         IC    REG0,IPCCC(,TIMGETMN)                               0417
         AL    REG0,IPBUFADR(,TIMGETMN)                            0417
*                REG1=DATALINE;         /* LENGTH OF DATA TO BE MOVED*/
         L     REG1,DATALINE(,TIMGETMN)                            0418
*                REG2=BUFPTR;           /* MOVE DATA FROM            */
         L     REG2,BUFPTR(,TIMGETMN)                              0419
*                WRK3=REG1;             /* NO PADDING CHAR           */
         LR    WRK3,REG1                                           0420
*                MVCL(REG0,REG2);       /* MOVE IN DATA              */
         MVCL  REG0,REG2                                           0421
*                RFY (REG0,REG1,REG2,WRK3) UNRSTD;                 0422
*              END;                                                0423
*            ELSE;                                                 0424
@RF00411 DS    0H                                                  0425
*            TIMADDER='0'B;            /* REFRESH ERROR FLAG         */
         NI    TIMADDER(TIMGETMN),B'11101111'                      0425
*            IF TSBAUTON='1'B THEN     /* CHECK FOR PROMPTING        */
         L     @12,PSAAOLD                                         0426
         L     @12,ASCBTSB(,@12)                                   0426
         TM    TSBAUTON(@12),B'01000000'                           0426
         BNO   @RF00426                                            0426
*              DO;                     /* PROMPTING ON               */
*                IF TSBAULST='1'B THEN /* CHECK FOR LINE PROMPTING   */
         TM    TSBAULST(@12),B'00010000'                           0428
         BNO   @RF00428                                            0428
*                  IF IPPRTL='0'B THEN /* FOR FULL LINE PROMPT       */
         TM    IPPRTL(TIMGETMN),B'00100000'                        0429
         BNZ   @RF00429                                            0429
*                    DO;                                           0430
*                      TSBAUTOS=TSBAUTOS+TSBAUTOI; /* INCREMENT LINE */
         L     @08,TSBAUTOS(,@12)                                  0431
         AL    @08,TSBAUTOI(,@12)                                  0431
         ST    @08,TSBAUTOS(,@12)                                  0431
*                      TSBSTAUT='1'B;  /* START LINE PROMPT          */
         OI    TSBSTAUT(@12),B'00000100'                           0432
*                      TIMSCHTM='1'B;  /* OUTPUT MANAGER TO BE SCHED */
         OI    TIMSCHTM(TIMGETMN),B'01000000'                      0433
*                    END;                                          0434
*                  ELSE;                                           0435
@RF00429 DS    0H                                                  0436
*                ELSE                                              0436
*                  DO;                                             0436
         B     @RC00428                                            0436
@RF00428 DS    0H                                                  0437
*                    TSBSTAUT='1'B;    /* START PROMPTING            */
         L     @12,PSAAOLD                                         0437
         L     @12,ASCBTSB(,@12)                                   0437
         OI    TSBSTAUT(@12),B'00000100'                           0437
*                    TIMSCHTM='1'B;    /* SCHEDULE TOM FLAG          */
         OI    TIMSCHTM(TIMGETMN),B'01000000'                      0438
*                  END;                                            0439
*              END;                    /* END OF PROMPTING           */
*            ELSE;                     /* NO PROMPTING               */
*                                                                  0441
@RF00426 DS    0H                                                  0442
*            /********************************************************/
*            /*  LINECNT IS CALLED NOW  FOR UPDATING THE CURRENT     */
*            /*  LINE NUMBER AND TO SAVE THE INPUT TO BE FLASHED     */
*            /*  BACK TO THE TERMINAL OPERATOR.                      */
*            /********************************************************/
*                                                                  0442
*            IF TVWAFSM='1'B & TVWAWO='0'B THEN;                   0442
@RC00426 TM    TVWAFSM(TVWAPTR),B'01000000'                        0442
         BNO   @RF00442                                            0442
         TM    TVWAWO(TVWAPTR),B'00100000'                         0442
         BZ    @RT00442                                            0442
*            ELSE                      /* OTHERWISE LINE COUNT       */
*              CALL LINECNT;           /* CALL LINECNT ROUTINE       */
@RF00442 BAL   @14,LINECNT                                         0444
*          END;                                                    0445
*        ELSE                                                      0446
*          DO;                         /*                    @ZM21079*/
         B     @RC00406                                            0446
@RF00406 DS    0H                                                  0447
*            TIMADDER='1'B;            /* SET ERROR FLAG ON          */
         OI    TIMADDER(TIMGETMN),B'00010000'                      0447
*            TVWAERMG='1'B;            /* QUEUE-FULL MESSAGE @ZM21079*/
         OI    TVWAERMG(TVWAPTR),B'00001000'                       0448
*          END;                        /*                    @ZM21079*/
*      RFY REG14 RSTD;                 /* RESTRICT RETURN REGISTER   */
@RC00406 DS    0H                                                  0451
*      REG14 = SAVE14;                 /* RESTORE RETURN ADDRESS     */
         L     REG14,SAVE14(,TIMGETMN)                             0451
*    END ADDELRTN;                     /* END OF ADDELRTN            */
@EL00005 DS    0H                                                  0452
@EF00005 DS    0H                                                  0452
@ER00005 BR    @14                                                 0452
         EJECT
* /*******************************************************************/
* /*  LINECNT IS THE ROUTINE THAT WILL RECEIVE CONTROL WHEN FULL     */
* /*  SCREEN MODE IS NOT IN EFFECT. THE INPUT LINES WILL BE INCRE-   */
* /*  MENTED AS DATA IS RECEIVED. IF THE BYPASS FLAG IS NOT ON, THE  */
* /*  LINE COUNT IS CHECKED AND WHEN WE HAVE REACHED THE LAST TWO    */
* /*  LINES OF DATA ON THE SCREEN, THE DATA WILL BE SAVED AND FLASHED*/
* /*  BACK TO THE TERMINAL USER, EXCEPT IN FULLSCREEN  PROCESSING    */
* /*******************************************************************/
*                                                                  0453
* LINECNT:  PROCEDURE OPTIONS(NOSAVE);                             0453
LINECNT  DS    0H                                                  0454
*  IF TSBXTMBF=480 THEN                  /* SMALL SCREEN?    @ZM20647*/
         L     @15,PSAAOLD                                         0454
         L     @15,ASCBTSB(,@15)                                   0454
         L     @15,TSBEXTNT(,@15)                                  0454
         CLC   TSBXTMBF(2,@15),@CH02247                            0454
         BNE   @RF00454                                            0454
*    LINESIZE=40;                        /* SMALL SCREEN     @ZM20647*/
         MVC   LINESIZE(4,TIMGETMN),@CF02248                       0455
*  ELSE                                  /* LARGER SCREEN    @ZM20647*/
*    LINESIZE=80;                        /* LARGER SCREEN    @ZM20647*/
         B     @RC00454                                            0456
@RF00454 MVC   LINESIZE(4,TIMGETMN),@CF02149                       0456
*  DO UNTIL DATALINE<=0;                 /* DO LOOP TO PROCES@ZM20647*/
@RC00454 DS    0H                                                  0457
@DL00457 DS    0H                                                  0458
*  RFY SCANAREA BASED(BUFPTR);           /* BUFFER POINTER           */
*                                                                  0458
*  /******************************************************************/
*  /*  THE FOLLOWING CODE WILL PROCESS THE DATA IF THE LINE NUMBER   */
*  /*  IS LESS THAN THE NEXT TO LAST LINE ON THE SCREEN OR IF THE    */
*  /*  BYPASS FLAG IS ON.                                            */
*  /******************************************************************/
*                                                                  0459
*    IF TVWALNCT < (TIMLNNO-1) × TVWANOFB='1'B × DATALINE=0 ×      0459
*       TVWAFLSC='1'B THEN                                 /*@ZA13627*/
         L     @15,TIMLNNO(,TIMGETMN)                              0459
         BCTR  @15,0                                               0459
         SLR   @12,@12                                             0459
         IC    @12,TVWALNCT(,TVWAPTR)                              0459
         CR    @15,@12                                             0459
         BH    @RT00459                                            0459
         TM    TVWANOFB(TVWAPTR),B'00010000'                       0459
         BO    @RT00459                                            0459
         L     @15,DATALINE(,TIMGETMN)                             0459
         LTR   @15,@15                                             0459
         BZ    @RT00459                                            0459
         TM    TVWAFLSC(TVWAPTR),B'00001000'                       0459
         BNO   @RF00459                                            0459
@RT00459 DS    0H                                                  0460
*      DO;                                                         0460
*        IF DATALINE+PRELINE > LINESIZE THEN  /* MORE THAN ONE LINE  */
         L     @15,DATALINE(,TIMGETMN)                             0461
         L     @12,PRELINE(,TIMGETMN)                              0461
         LR    @08,@15                                             0461
         ALR   @08,@12                                             0461
         L     @07,LINESIZE(,TIMGETMN)                             0461
         CR    @08,@07                                             0461
         BNH   @RF00461                                            0461
*          DO;                                                     0462
*            DATALINE=DATALINE-(LINESIZE-PRELINE); /* NEW DATA LENGTH*/
         SLR   @07,@12                                             0463
         SLR   @15,@07                                             0463
         ST    @15,DATALINE(,TIMGETMN)                             0463
*            BUFPTR=BUFPTR+(LINESIZE-PRELINE); /* ADJUST BUFFER POINT*/
         AL    @07,BUFPTR(,TIMGETMN)                               0464
         ST    @07,BUFPTR(,TIMGETMN)                               0464
*            TVWALNCT=TVWALNCT+1;        /* UP LINE COUNT BY ONE     */
         LA    @15,1                                               0465
         SLR   @12,@12                                             0465
         IC    @12,TVWALNCT(,TVWAPTR)                              0465
         ALR   @15,@12                                             0465
         STC   @15,TVWALNCT(,TVWAPTR)                              0465
*            PRELINE=0;                  /* RESET PREVIOUS LINE TO 0 */
         SLR   @15,@15                                             0466
         ST    @15,PRELINE(,TIMGETMN)                              0466
*          END;                          /* END MORE THAN 1 LINE PROC*/
*        ELSE                            /* BEGIN ONLY ONE LINE      */
*          DO;                                                     0468
         B     @RC00461                                            0468
@RF00461 DS    0H                                                  0469
*            IF IPPRTL='0'B THEN         /* NOT PARTIAL LINE         */
         TM    IPPRTL(TIMGETMN),B'00100000'                        0469
         BNZ   @RF00469                                            0469
*              DO;                                                 0470
*                PRELINE=0;              /* RESET PREVIOUS LINE      */
         SLR   @15,@15                                             0471
         ST    @15,PRELINE(,TIMGETMN)                              0471
*                TVWALNCT=TVWALNCT+1;    /* UP LINE COUNT            */
         LA    @15,1                                               0472
         SLR   @12,@12                                             0472
         IC    @12,TVWALNCT(,TVWAPTR)                              0472
         ALR   @15,@12                                             0472
         STC   @15,TVWALNCT(,TVWAPTR)                              0472
*              END;                                                0473
*            ELSE                        /* PARTIAL LINE INDICATED   */
*              PRELINE=PRELINE+DATALINE; /* SAVE PARTIAL LINE LENGTH */
         B     @RC00469                                            0474
@RF00469 L     @15,PRELINE(,TIMGETMN)                              0474
         AL    @15,DATALINE(,TIMGETMN)                             0474
         ST    @15,PRELINE(,TIMGETMN)                              0474
*            DATALINE=0;                 /* ALL DATA PROCESSED       */
@RC00469 SLR   @15,@15                                             0475
         ST    @15,DATALINE(,TIMGETMN)                             0475
*          END;                          /* END NO FLASH BACK PROCESS*/
*      END;                                                        0477
*    ELSE;                                                         0478
*                                                                  0478
@RF00459 DS    0H                                                  0479
*        /************************************************************/
*        /*  AT THIS POINT A CHECK IS MADE TO SEE IF WE ARE PROCESS- */
*        /*  ING THE NEXT TO LAST LINE OF THE SCREEN AND FLASHBACK   */
*        /*  IS PERMITTED. THE INPUT DATA WILL BE SAVED IN THE FIRST */
*        /*  FLASHBACK BUFFER TO BE RETURNED TO THE TERMINAL USER.   */
*        /************************************************************/
*                                                                  0479
*        IF TVWALNCT=TIMLNNO-1 & TVWANOFB='0'B & DATALINE>0 THEN   0479
@RC00459 L     @15,TIMLNNO(,TIMGETMN)                              0479
         BCTR  @15,0                                               0479
         SLR   @12,@12                                             0479
         IC    @12,TVWALNCT(,TVWAPTR)                              0479
         CR    @15,@12                                             0479
         BNE   @RF00479                                            0479
         TM    TVWANOFB(TVWAPTR),B'00010000'                       0479
         BNZ   @RF00479                                            0479
         L     @15,DATALINE(,TIMGETMN)                             0479
         LTR   @15,@15                                             0479
         BNP   @RF00479                                            0479
*          DO;                                             /*@ZA13627*/
*            IF DATALINE > LINESIZE THEN                           0481
         L     @12,LINESIZE(,TIMGETMN)                             0481
         CR    @15,@12                                             0481
         BNH   @RF00481                                            0481
*              VALUE=LINESIZE;           /* MAXIMUM FLASHBACK SIZE   */
         ST    @12,VALUE(,TIMGETMN)                                0482
*            ELSE                        /* OTHERWISE USE DATA LENGTH*/
*              VALUE=DATALINE;                                     0483
         B     @RC00481                                            0483
@RF00481 L     @15,DATALINE(,TIMGETMN)                             0483
         ST    @15,VALUE(,TIMGETMN)                                0483
*            FLASHBK1(1:VALUE)=SCANAREA; /* MOVE DATA TO QUEUE       */
@RC00481 L     @15,VALUE(,TIMGETMN)                                0484
         LR    @12,@15                                             0484
         BCTR  @12,0                                               0484
         L     @08,BUFPTR(,TIMGETMN)                               0484
         EX    @12,@SM02284                                        0484
*            BUFPTR=BUFPTR+VALUE;        /* UPDATE BUFFER POINTER    */
         ALR   @08,@15                                             0485
         ST    @08,BUFPTR(,TIMGETMN)                               0485
*            DATALINE=DATALINE-VALUE;    /* RECOMPUTE DATA PROCESSED */
         L     @12,DATALINE(,TIMGETMN)                             0486
         SLR   @12,@15                                             0486
         ST    @12,DATALINE(,TIMGETMN)                             0486
*            TVWATQL1=VALUE;             /* RESET LINE SIZE OF DATA  */
         STC   @15,TVWATQL1(,TVWAPTR)                              0487
*            /* UPDATE LINE COUNT FOR FULL LINE.                     */
*            IF IPPRTL='0'B × DATALINE > 0 THEN                    0488
         TM    IPPRTL(TIMGETMN),B'00100000'                        0488
         BZ    @RT00488                                            0488
         LTR   @12,@12                                             0488
         BNP   @RF00488                                            0488
@RT00488 DS    0H                                                  0489
*              DO;                                                 0489
*                TVWALNCT=TVWALNCT+1;    /* UP LINE COUNT            */
         LA    @15,1                                               0490
         SLR   @12,@12                                             0490
         IC    @12,TVWALNCT(,TVWAPTR)                              0490
         ALR   @15,@12                                             0490
         STC   @15,TVWALNCT(,TVWAPTR)                              0490
*                TVWABKMG='1'B;          /* FLASHBACK AVAILABLE      */
         OI    TVWABKMG(TVWAPTR),B'00000100'                       0491
*              END;                                                0492
*            ELSE;                                                 0493
@RF00488 DS    0H                                                  0494
*          END;                          /* END OF NXT TO LAST LINE  */
*        ELSE;                                                     0495
*                                                                  0495
@RF00479 DS    0H                                                  0496
*        /************************************************************/
*        /*  THE NEXT BLOCK OF CODE WILL BUILD THE DATA FLASHBACK    */
*        /*  WHEN THE LINECOUNT EQUALS OR EXCEEDS THE LAST SCREEN    */
*        /*  LINE AND THE BYPASS FLAG IS NOT SET ON.                 */
*        /************************************************************/
*                                                                  0496
*        IF TVWALNCT>=TIMLNNO & TVWANOFB='0'B & DATALINE>0 THEN    0496
         SLR   @15,@15                                             0496
         IC    @15,TVWALNCT(,TVWAPTR)                              0496
         C     @15,TIMLNNO(,TIMGETMN)                              0496
         BL    @RF00496                                            0496
         TM    TVWANOFB(TVWAPTR),B'00010000'                       0496
         BNZ   @RF00496                                            0496
         L     @15,DATALINE(,TIMGETMN)                             0496
         LTR   @15,@15                                             0496
         BNP   @RF00496                                            0496
*          DO;                                                     0497
*                                                                  0497
*            /********************************************************/
*            /* ALL FOLLOWING CONDITIONS INDICATE MORE THAN 1 LINE   */
*            /* WILL BE FLASHED BACK TO THE USER.                    */
*            /********************************************************/
*                                                                  0498
*            IF DATALINE>LINESIZE × DONECNT<COUNT × IPPRTL='1'B THEN
         C     @15,LINESIZE(,TIMGETMN)                             0498
         BH    @RT00498                                            0498
         L     @15,DONECNT(,TIMGETMN)                              0498
         C     @15,COUNT(,TIMGETMN)                                0498
         BL    @RT00498                                            0498
         TM    IPPRTL(TIMGETMN),B'00100000'                        0498
         BNO   @RF00498                                            0498
@RT00498 DS    0H                                                  0499
*                                                          /*@ZA13627*/
*              DO;                       /* PLACE DATA IN FLASHBK 1  */
*                IF DATALINE> LINESIZE THEN                        0500
         L     @15,LINESIZE(,TIMGETMN)                             0500
         C     @15,DATALINE(,TIMGETMN)                             0500
         BNL   @RF00500                                            0500
*                  VALUE=LINESIZE;       /* LENGTH DATA = LINE SIZE  */
         ST    @15,VALUE(,TIMGETMN)                                0501
*                ELSE                                              0502
*                  VALUE=DATALINE;       /* FLASHBACK IS DATA SIZE   */
         B     @RC00500                                            0502
@RF00500 L     @15,DATALINE(,TIMGETMN)                             0502
         ST    @15,VALUE(,TIMGETMN)                                0502
*                FLASHBK1(1:VALUE)=SCANAREA; /* MORE DATA TO Q       */
@RC00500 L     @15,VALUE(,TIMGETMN)                                0503
         LR    @12,@15                                             0503
         BCTR  @12,0                                               0503
         L     @08,BUFPTR(,TIMGETMN)                               0503
         EX    @12,@SM02284                                        0503
*                DATALINE=DATALINE-VALUE; /* DECREASE DATA TO PROCESS*/
         L     @12,DATALINE(,TIMGETMN)                             0504
         SLR   @12,@15                                             0504
         ST    @12,DATALINE(,TIMGETMN)                             0504
*                TVWATQL1=VALUE;         /* LENGTH OF FLASH BACK DATA*/
         STC   @15,TVWATQL1(,TVWAPTR)                              0505
*                BUFPTR=BUFPTR+VALUE;    /* UPDATE BUFFER POINTER    */
         ALR   @08,@15                                             0506
         ST    @08,BUFPTR(,TIMGETMN)                               0506
*                IF IPPRTL='0'B × DATALINE > 0 THEN                0507
         TM    IPPRTL(TIMGETMN),B'00100000'                        0507
         BZ    @RT00507                                            0507
         LTR   @12,@12                                             0507
         BNP   @RF00507                                            0507
@RT00507 DS    0H                                                  0508
*                  DO;                                             0508
*                    TVWALNCT=TVWALNCT+1; /* UP LINE COUNT           */
         LA    @15,1                                               0509
         SLR   @12,@12                                             0509
         IC    @12,TVWALNCT(,TVWAPTR)                              0509
         ALR   @15,@12                                             0509
         STC   @15,TVWALNCT(,TVWAPTR)                              0509
*                    TVWABKMG='1'B;      /* READY FOR FLASH BACK     */
         OI    TVWABKMG(TVWAPTR),B'00000100'                       0510
*                  END;                                            0511
*                ELSE                                              0512
*                  TVWABKMG='0'B;        /* DO NOT FLASH BACK PARTIAL*/
         B     @RC00507                                            0512
@RF00507 NI    TVWABKMG(TVWAPTR),B'11111011'                       0512
*              END;                      /* END DATA > 1 LINE        */
*            ELSE                                                  0514
*              DO;                       /* PROCESS LAST FLSHBK DATA */
         B     @RC00498                                            0514
@RF00498 DS    0H                                                  0515
*                FLASHBK2(1:DATALINE)=SCANAREA; /* MOVE DATA TO BUFF */
         L     @15,DATALINE(,TIMGETMN)                             0515
         LR    @12,@15                                             0515
         BCTR  @12,0                                               0515
         L     @08,BUFPTR(,TIMGETMN)                               0515
         EX    @12,@SM02286                                        0515
*                TVWATQL2=DATALINE;      /* LENGTH OF FLASH BACK DATA*/
         STC   @15,TVWATQL2(,TVWAPTR)                              0516
*                TVWABKMG='1'B;          /* READY TO FLASH BACK      */
         OI    TVWABKMG(TVWAPTR),B'00000100'                       0517
*                DATALINE=0;             /* END OF DATA PROCESS      */
         SLR   @15,@15                                             0518
         ST    @15,DATALINE(,TIMGETMN)                             0518
*                TVWALNCT=TVWALNCT+1;    /* INCREMENT LINE COUNT     */
         LA    @15,1                                               0519
         SLR   @12,@12                                             0519
         IC    @12,TVWALNCT(,TVWAPTR)                              0519
         ALR   @15,@12                                             0519
         STC   @15,TVWALNCT(,TVWAPTR)                              0519
*              END;                                                0520
*          END;                                                    0521
*        ELSE;                                                     0522
@RF00496 DS    0H                                                  0523
*    END;                                /* END OF DO UNTIL DATA PROC*/
@RC00496 DS    0H                                                  0523
@DE00457 L     @15,DATALINE(,TIMGETMN)                             0523
         LTR   @15,@15                                             0523
         BP    @DL00457                                            0523
*    IF TVWABKMG='1'B THEN               /* CHECK IF TOM NEEDS SCHED */
         TM    TVWABKMG(TVWAPTR),B'00000100'                       0524
         BNO   @RF00524                                            0524
*      TIMSCHTM='1'B;                    /* YES, SET SCHED-TOM FLAG  */
         OI    TIMSCHTM(TIMGETMN),B'01000000'                      0525
*    ELSE;                                                         0526
@RF00524 DS    0H                                                  0527
*    RFY SCANAREA BASED(SCANPTR);        /* POINTER TO DATA BUFFER   */
*  END LINECNT;                          /* END OF LINECNT           */
@EL00006 DS    0H                                                  0528
@EF00006 DS    0H                                                  0528
@ER00006 BR    @14                                                 0528
         EJECT
*END IKT3270I                            /* END OF IKT3270I          */
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IHAPSA  )                                        *
*/*%INCLUDE SYSLIB  (IHAASCB )                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IHAWSAVT)                                        *
*/*%INCLUDE SYSLIB  (IHASCVT )                                        *
*/*%INCLUDE SYSLIB  (IKJTSB  )                                        *
*/*%INCLUDE SYSLIB  (IKTTSBX )                                        *
*/*%INCLUDE SYSLIB  (IKTTVWA )                                        *
*/*%INCLUDE SYSLIB  (IFGRPL  )                                        *
*/*%INCLUDE SYSLIB  (IFGRPLVT)                                        *
*/*%INCLUDE SYSLIB  (ISTRPLFB)                                        *
*/*%INCLUDE SYSLIB  (IKTEQU  )                                        *
*/*%INCLUDE SYSLIB  (IKTTCAST)                                        *
*/*%INCLUDE SYSLIB  (IKTTIMWA)                                        *
*/*%INCLUDE SYSLIB  (IKTOPARM)                                        *
*/*%INCLUDE SYSLIB  (IKTIPARM)                                        *
*;                                                                 0529
@DATA    DS    0H
@CH00067 DC    H'1'
@CH02247 DC    H'480'
@SB02264 TRT   SCANAREA(0,SCANPTR),NEWLINE
@SB02272 TR    SCANAREA(0,SCANPTR),ASCIITAB(@12)
@SB02274 TRT   SCANAREA(0,REG3),SBATAB
@SB02276 TR    SCANAREA(0,REG3),TRANTAB(@12)
@SM02278 MVC   HEADER(0,TIMGETMN),SCANAREA(SCANPTR)
@SM02281 MVC   QINBUF(0,@12),HEADER(TIMGETMN)
@SM02284 MVC   FLASHBK1(0,TIMGETMN),SCANAREA(@08)
@SM02286 MVC   FLASHBK2(0,TIMGETMN),SCANAREA(@08)
@DATD    DSECT
         DS    0F
IKT3270I CSECT
         DS    0F
@CF00072 DC    F'3'
@CF02248 DC    F'40'
@CF02149 DC    F'80'
@CF02152 DC    F'1500'
@CF02224 DC    XL4'80000000'
@CF00454 DC    XL4'11'
@DATD    DSECT
         DS    0D
@ENDDATD EQU   *
IKT3270I CSECT
         NOPR  ((@ENDDATD-@DATD)*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV02178 DC    V(IKTIDSX2)
         DS    0D
NEWLINE  DC    30X'00'
         DC    X'1E'
         DC    225X'00'
SBATAB   DC    17X'00'
         DC    X'11'
         DC    238X'00'
PATCH    DC    20F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
BASEREG  EQU   @05
TVWAPTR  EQU   @09
TIMGETMN EQU   @06
SCANPTR  EQU   @04
REG0     EQU   @00
REG1     EQU   @01
REG2     EQU   @02
REG3     EQU   @03
WRK3     EQU   @03
REG13    EQU   @13
REG14    EQU   @14
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
ISTPROCD EQU   0
PROPROC  EQU   ISTPROCD
PROPROC1 EQU   PROPROC
PROPROC2 EQU   PROPROC+1
PROPROC3 EQU   PROPROC+2
PROPROC4 EQU   PROPROC+3
PROPROCS EQU   0
PROSETMS EQU   PROPROCS+1
PROSETM2 EQU   PROSETMS
PROSETM3 EQU   PROSETMS+1
PROSETM4 EQU   PROSETMS+2
ISTDEVCH EQU   0
DEVSHCH  EQU   ISTDEVCH
DEVCHAR  EQU   DEVSHCH
DEVTCODE EQU   ISTDEVCH+1
DEVFLAGS EQU   ISTDEVCH+3
DEVFCCTL EQU   DEVFLAGS
DEVCHAR3 EQU   DEVFLAGS
ISTNIB   EQU   0
NIBFLGS  EQU   ISTNIB+40
NIBFLG1  EQU   NIBFLGS
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBTSB  EQU   ASCB+60
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVT0PT01 EQU   CVTMAP+152
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTABEND EQU   CVTMAP+200
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTSHS   EQU   CVTXTNT2+40
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
WSAG     EQU   0
SCVTSECT EQU   0
SCVTSTAT EQU   SCVTSECT+148
TSB      EQU   0
TSBASCBA EQU   TSB
TSBSTAT  EQU   TSBASCBA
TSBFLG1  EQU   TSB+4
TSBIFLSH EQU   TSBFLG1
TSBFLG2  EQU   TSB+16
TSBAUTON EQU   TSBFLG2
TSBAULST EQU   TSBFLG2
TSBSTAUT EQU   TSBFLG2
TSBFLG3  EQU   TSB+24
TSBFLG5  EQU   TSB+25
TSBTERMC EQU   TSB+26
TSBTERM1 EQU   TSBTERMC
TSBTERM2 EQU   TSBTERMC+1
TSBSTCC  EQU   TSB+34
TSBLNNO  EQU   TSB+40
TSBFLG4  EQU   TSB+41
TSBIWAIT EQU   TSBFLG4
TSBAUTOS EQU   TSB+48
TSBAUTOI EQU   TSB+52
TSBRCB   EQU   TSB+64
TSBLINKA EQU   TSBRCB+4
TSBTPOST EQU   TSB+72
TSBTPFLG EQU   TSBTPOST
TSBMINL  EQU   TSB+84
TSBEXTNT EQU   TSB+96
TSBX     EQU   0
TSBXFLG1 EQU   TSBX+32
TSBXTVWA EQU   TSBX+36
TSBXTERM EQU   TSBX+72
TSBXTMBF EQU   TSBXTERM+2
TVWA     EQU   0
TVWATIMW EQU   TVWA+8
TVWATQL1 EQU   TVWA+86
TVWATQL2 EQU   TVWA+87
TVWAFLG7 EQU   TVWA+110
TVWAECBL EQU   TVWA+120
TVWADLST EQU   TVWA+132
TVWAFLG1 EQU   TVWA+144
TVWAULK  EQU   TVWAFLG1
TVWAFLG2 EQU   TVWA+145
TVWAPGN  EQU   TVWAFLG2
TVWAERMG EQU   TVWAFLG2
TVWABKMG EQU   TVWAFLG2
TVWAFLG3 EQU   TVWA+146
TVWATRAN EQU   TVWAFLG3
TVWAFLG4 EQU   TVWA+147
TVWANOFB EQU   TVWAFLG4
TVWAFLSC EQU   TVWAFLG4
TVWADARC EQU   TVWAFLG4
TVWAFLG5 EQU   TVWA+150
TVWASCAN EQU   TVWAFLG5
TVWAFSM  EQU   TVWAFLG5
TVWAWO   EQU   TVWAFLG5
TVWALNCT EQU   TVWA+151
TVWATABI EQU   TVWA+152
TVWAATBI EQU   TVWA+168
TVWAFLG6 EQU   TVWA+182
TVWARSHW EQU   TVWA+183
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLVTEXT EQU   IFGRPL+76
RPLFDBK2 EQU   RPLVTEXT+12
RPLSSNSI EQU   RPLFDBK2
RPLDSB   EQU   RPLSSNSI
RPLDSB1  EQU   RPLDSB
RPLSSEI  EQU   RPLDSB1
RPLDSB2  EQU   RPLDSB+1
RPLUSNSI EQU   RPLFDBK2+2
RPLOPTC3 EQU   RPLVTEXT+20
RPLOPT9  EQU   RPLOPTC3
RPLOPT10 EQU   RPLOPTC3+1
RPLOPT11 EQU   RPLOPTC3+2
RPLOPT12 EQU   RPLOPTC3+3
RPLOSENS EQU   RPLVTEXT+24
RPLSSNSO EQU   RPLOSENS
RPLSSEO  EQU   RPLSSNSO
RPLOF16  EQU   0
RPLRH3   EQU   RPLOF16
RPLCSI   EQU   RPLRH3
RPLSRTYP EQU   RPLOF16+1
RPLSTYPE EQU   RPLSRTYP
RPLRTYPE EQU   RPLSRTYP
RPLCHN   EQU   RPLOF16+2
RPLFIRST EQU   RPLCHN
RPLMIDLE EQU   RPLCHN
RPLVTFL1 EQU   RPLOF16+3
RPLVTFL2 EQU   RPLOF16+4
RPLPOSTV EQU   RPLVTFL2
RPLRESP  EQU   RPLVTFL2
RPLCNTRL EQU   RPLOF16+5
RPLCNTDF EQU   RPLCNTRL
RPLCNTDC EQU   RPLCNTRL+1
RPLCNTSC EQU   RPLCNTRL+2
RPLOF60  EQU   0
RPLOBSQ  EQU   RPLOF60+4
RPLIBSQ  EQU   RPLOF60+5
TCAST    EQU   0
TCASUSER EQU   TCAST+4
TCASIQM  EQU   TCAST+72
TCASOQM  EQU   TCAST+76
TCASFLG1 EQU   TCAST+88
TCASFLG2 EQU   TCAST+89
TIMWA    EQU   400
QMPTR    EQU   TIMWA+4
OPARMS   EQU   TIMWA+8
OPFLAGS  EQU   OPARMS+8
OPOPTNS  EQU   OPFLAGS+1
OPNXFLGS EQU   OPARMS+16
IPARMS   EQU   TIMWA+28
IPBUFADR EQU   IPARMS
IPREQ    EQU   IPARMS+4
IPRC     EQU   IPARMS+5
IPBFSZ   EQU   IPARMS+6
IPFLAGS  EQU   IPARMS+8
IPAVBL   EQU   IPFLAGS+1
IPPRMPT  EQU   IPFLAGS+1
IPPRTL   EQU   IPFLAGS+1
IPCCC    EQU   IPFLAGS+2
IPNXFLGS EQU   IPARMS+16
TIMFLAG  EQU   TIMWA+48
DELIMFLG EQU   TIMFLAG
TIMSCHTM EQU   TIMFLAG
TIMADDER EQU   TIMFLAG
DONE     EQU   TIMFLAG
REC2FLG  EQU   TIMFLAG
PRIORPRT EQU   TIMFLAG
HEADCNT  EQU   TIMWA+50
HEADER   EQU   TIMWA+52
FLASHBK1 EQU   TIMWA+58
FLASHBK2 EQU   TIMWA+138
COUNT    EQU   TIMWA+1720
CNTRL    EQU   TIMWA+1724
LINESIZE EQU   TIMWA+1728
PRELINE  EQU   TIMWA+1732
DONECNT  EQU   TIMWA+1736
BUFPTR   EQU   TIMWA+1740
DATALINE EQU   TIMWA+1744
VALUE    EQU   TIMWA+1748
SAREA2   EQU   TIMWA+1816
SAVE14   EQU   TIMWA+1888
XITPARMS EQU   TIMWA+1896
TIMLNNO  EQU   TIMWA+1912
PHYSLNNO EQU   TIMWA+1916
IKTQMIN  EQU   0
TRANTAB  EQU   0
SCANAREA EQU   0
ASCIITAB EQU   0
QINBUF   EQU   0
STATUS   EQU   0
IKTQMOUT EQU   0
ISTRPL   EQU   0
POST     EQU   0
PSARSVTE EQU   PSARSVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTSPSA  EQU   CVTS01+336
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
CVTTCASP EQU   CVTS01+664
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTIRM   EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
@NM00137 EQU   TIMWA+1920
TEMPBFPT EQU   TIMWA+1908
LIOWA    EQU   XITPARMS+8
WRKAREAL EQU   XITPARMS+4
SRBRTN   EQU   XITPARMS
RECERCNT EQU   TIMWA+1892
SAVEREGS EQU   TIMWA+1752
@NM00136 EQU   TIMWA+1718
TIMBUFF  EQU   TIMWA+218
@NM00135 EQU   TIMWA+49
REGRTN   EQU   TIMFLAG
NOADDEL  EQU   TIMFLAG
IPNXTMTP EQU   IPNXFLGS+3
IPNXCCC  EQU   IPNXFLGS+2
@NM00134 EQU   IPNXFLGS+1
IPNXPRTL EQU   IPNXFLGS+1
IPNXPMT  EQU   IPNXFLGS+1
IPNXAVBL EQU   IPNXFLGS+1
@NM00133 EQU   IPNXFLGS
IPNXALC  EQU   IPNXFLGS
IPNXBFSZ EQU   IPARMS+14
@NM00132 EQU   IPARMS+12
IPTRMTYP EQU   IPFLAGS+3
@NM00131 EQU   IPFLAGS+1
@NM00130 EQU   IPFLAGS
IPALLOC  EQU   IPFLAGS
@NM00129 EQU   OPNXFLGS+3
@NM00128 EQU   OPNXFLGS+2
@NM00127 EQU   OPNXFLGS+1
OPNXASID EQU   OPNXFLGS+1
OPNXEDIT EQU   OPNXFLGS+1
OPNXBRK  EQU   OPNXFLGS+1
OPNXHOLD EQU   OPNXFLGS+1
@NM00126 EQU   OPNXFLGS
OPNXADTP EQU   OPNXFLGS
OPNXALC  EQU   OPNXFLGS
OPNXBFSZ EQU   OPARMS+14
@NM00125 EQU   OPARMS+12
@NM00124 EQU   OPFLAGS+3
@NM00123 EQU   OPFLAGS+2
@NM00122 EQU   OPOPTNS
OPASID   EQU   OPOPTNS
OPEDIT   EQU   OPOPTNS
OPBRK    EQU   OPOPTNS
OPHOLD   EQU   OPOPTNS
@NM00121 EQU   OPFLAGS
OPADTOP  EQU   OPFLAGS
OPALLOC  EQU   OPFLAGS
OPBFSZ   EQU   OPARMS+6
OPRC     EQU   OPARMS+5
OPREQ    EQU   OPARMS+4
OPBUFADR EQU   OPARMS
FRRENTRY EQU   TIMWA
TCASTEND EQU   TCAST+136
TCASDUMP EQU   TCAST+132
TCASSCHD EQU   TCAST+128
TCASTPND EQU   TCAST+124
TCASOMJR EQU   TCAST+120
@NM00120 EQU   TCAST+118
TCASBR14 EQU   TCAST+116
TCASATTN EQU   TCAST+112
TCASASCI EQU   TCAST+108
TCASTTQH EQU   TCAST+104
@NM00119 EQU   TCAST+102
@NM00118 EQU   TCAST+100
@NM00117 EQU   TCAST+98
@NM00116 EQU   TCAST+96
TCASASCB EQU   TCAST+92
@NM00115 EQU   TCAST+90
@NM00114 EQU   TCASFLG2
@NM00113 EQU   TCASFLG1
TCASNACT EQU   TCASFLG1
TCASVSD  EQU   TCASFLG1
TCASABND EQU   TCASFLG1
TCASMDSW EQU   TCASFLG1
TCASBKMD EQU   TCASFLG1
TCASLTE  EQU   TCAST+84
TCASEXIT EQU   TCAST+80
TCASTSB  EQU   TCAST+68
TCASTTL  EQU   TCAST+64
TCASWA   EQU   TCAST+60
TCASFRR  EQU   TCAST+56
TCASMSGS EQU   TCAST+52
TCASDATO EQU   TCAST+48
TCASDATI EQU   TCAST+44
TCASXECB EQU   TCAST+40
TCASTID  EQU   TCAST+32
@NM00112 EQU   TCAST+31
TCASCHNL EQU   TCAST+30
TCASCRSZ EQU   TCAST+28
TCASLBUF EQU   TCAST+24
TCASHBUF EQU   TCAST+20
TCASCLSZ EQU   TCAST+18
TCASRCON EQU   TCAST+16
TCASACBP EQU   TCAST+8
TCASUMAX EQU   TCASUSER+2
TCASUSEC EQU   TCASUSER
TCASID   EQU   TCAST
RPLSEQNO EQU   RPLOF60+6
@NM00111 EQU   RPLIBSQ
RPLIINV  EQU   RPLIBSQ
RPLINEG  EQU   RPLIBSQ
RPLIPOS  EQU   RPLIBSQ
RPLIIGN  EQU   RPLIBSQ
RPLIRSET EQU   RPLIBSQ
RPLITST  EQU   RPLIBSQ
RPLISET  EQU   RPLIBSQ
@NM00110 EQU   RPLOBSQ
RPLOINV  EQU   RPLOBSQ
RPLONEG  EQU   RPLOBSQ
RPLOPOS  EQU   RPLOBSQ
RPLOIGN  EQU   RPLOBSQ
RPLORSET EQU   RPLOBSQ
RPLOTST  EQU   RPLOBSQ
RPLOSET  EQU   RPLOBSQ
RPLIBSQV EQU   RPLOF60+2
RPLOBSQV EQU   RPLOF60
@NM00109 EQU   RPLCNTSC
RPLRSHUT EQU   RPLCNTSC
RPLRQR   EQU   RPLCNTSC
RPLSHUTC EQU   RPLCNTSC
RPLSHUTD EQU   RPLCNTSC
RPLSTSN  EQU   RPLCNTSC
RPLCLEAR EQU   RPLCNTSC
RPLSDT   EQU   RPLCNTSC
@NM00108 EQU   RPLCNTDC
RPLSIGNL EQU   RPLCNTDC
RPLLUS   EQU   RPLCNTDC
RPLRTR   EQU   RPLCNTDC
RPLBID   EQU   RPLCNTDC
@NM00107 EQU   RPLCNTDF
RPLQI    EQU   RPLCNTDF
RPLRELQ  EQU   RPLCNTDF
RPLCHASE EQU   RPLCNTDF
RPLQEC   EQU   RPLCNTDF
RPLQC    EQU   RPLCNTDF
RPLCNCEL EQU   RPLCNTDF
RPLDATA  EQU   RPLCNTDF
RPLRRN   EQU   RPLRESP
RPLNFME  EQU   RPLRESP
RPLEX    EQU   RPLRESP
@NM00106 EQU   RPLRESP
@NM00105 EQU   RPLPOSTV
RPLSCHED EQU   RPLPOSTV
@NM00104 EQU   RPLVTFL1
RPLAUTUS EQU   RPLVTFL1
RPLVTUSE EQU   RPLVTFL1
@NM00103 EQU   RPLVTFL1
@NM00102 EQU   RPLCHN
RPLONLY  EQU   RPLCHN
RPLLAST  EQU   RPLCHN
@NM00101 EQU   RPLRTYPE
RPLDFASY EQU   RPLRTYPE
RPLNFSYN EQU   RPLRTYPE
RPLRRESP EQU   RPLRTYPE
@NM00100 EQU   RPLSTYPE
RPLSRESP EQU   RPLSTYPE
@NM00099 EQU   RPLRH3
RPLCHREQ EQU   RPLRH3
RPLCMD   EQU   RPLRH3
RPLEB    EQU   RPLRH3
RPLBB    EQU   RPLRH3
RPLSIGDA EQU   RPLVTEXT+32
RPLSAV13 EQU   RPLVTEXT+28
RPLUSNSO EQU   RPLOSENS+2
RPLSSMO  EQU   RPLSSNSO+1
@NM00098 EQU   RPLSSEO
RPLRRO   EQU   RPLSSEO
RPLFIO   EQU   RPLSSEO
RPLSTATO EQU   RPLSSEO
RPLCPMO  EQU   RPLSSEO
@NM00097 EQU   RPLSSEO
RPLFMHDR EQU   RPLOPT12
@NM00096 EQU   RPLOPT12
@NM00095 EQU   RPLOPT12
@NM00094 EQU   RPLOPT12
RPLNIBTK EQU   RPLOPT12
RPLTRUNC EQU   RPLOPT12
RPLKEEP  EQU   RPLOPT12
@NM00093 EQU   RPLOPT12
RPLRSVE8 EQU   RPLOPT11
RPLRSVE7 EQU   RPLOPT11
RPLRSVE6 EQU   RPLOPT11
RPLRSVE5 EQU   RPLOPT11
RPLRSVE4 EQU   RPLOPT11
RPLSTOP  EQU   RPLOPT11
RPLSTART EQU   RPLOPT11
RPLQUIES EQU   RPLOPT11
RPLRSVI6 EQU   RPLOPT10
RPLRSVI5 EQU   RPLOPT10
RPLRSVI4 EQU   RPLOPT10
RPLRSVI3 EQU   RPLOPT10
RPLRSVI2 EQU   RPLOPT10
RPLSPARM EQU   RPLOPT10
RPLDSPLY EQU   RPLOPT10
RPLBSCID EQU   RPLOPT10
RPLTOPL  EQU   RPLOPT9
RPLCIDE  EQU   RPLOPT9
RPLRNNM  EQU   RPLOPT9
RPLAPPST EQU   RPLOPT9
RPLCOUNT EQU   RPLOPT9
RPLTERMS EQU   RPLOPT9
RPLDEVCH EQU   RPLOPT9
RPLLOGON EQU   RPLOPT9
RPLUSFLD EQU   RPLVTEXT+16
RPLESR2  EQU   RPLUSNSI+1
RPLESR1  EQU   RPLUSNSI
RPLSSMI  EQU   RPLDSB2
@NM00092 EQU   RPLSSEI
RPLRRI   EQU   RPLSSEI
RPLFII   EQU   RPLSSEI
RPLSTATI EQU   RPLSSEI
RPLCPMI  EQU   RPLSSEI
RPLPATHI EQU   RPLSSEI
RPLARCLN EQU   RPLVTEXT+8
RPLAARLN EQU   RPLVTEXT+4
RPLAAREA EQU   RPLVTEXT
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00091 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00090 EQU   RPLRBAR+3
@NM00089 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00088 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLCHAIN EQU   RPLNXTRP
RPLBOP   EQU   RPLOPT4
@NM00087 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00086 EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLDACB  EQU   RPLCOMN+24
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
TVWAEND  EQU   TVWA+216
@NM00085 EQU   TVWA+208
TVWAUSRA EQU   TVWA+200
@NM00084 EQU   TVWA+192
TVWAFRWO EQU   TVWA+188
TVWAFRWI EQU   TVWA+184
@NM00083 EQU   TVWAFLG6
TVWAINB  EQU   TVWAFLG6
TVWAFMEW EQU   TVWAFLG6
TVWARCDT EQU   TVWAFLG6
TVWAIOP  EQU   TVWAFLG6
TVWAIOTR EQU   TVWAFLG6
TVWAISYS EQU   TVWAFLG6
@NM00082 EQU   TVWA+180
TVWAQMLB EQU   TVWA+176
TVWAATBO EQU   TVWA+172
TVWATRNM EQU   TVWA+160
TVWATABO EQU   TVWA+156
TVWAP1ST EQU   TVWAFLG5
TVWAPRMT EQU   TVWAFLG5
TVWANFSP EQU   TVWAFLG5
TVWATIR  EQU   TVWAFLG5
TVWAFSW  EQU   TVWAFLG5
@NM00081 EQU   TVWA+148
TVWARCRS EQU   TVWAFLG4
TVWAQMEV EQU   TVWAFLG4
TVWAKBDL EQU   TVWAFLG4
TVWADOOQ EQU   TVWAFLG4
TVWAFMSC EQU   TVWAFLG4
TVWATRDF EQU   TVWAFLG3
TVWAQLBU EQU   TVWAFLG3
TVWAQMIO EQU   TVWAFLG3
TVWAQMRT EQU   TVWAFLG3
TVWAAIGN EQU   TVWAFLG3
TVWASDSG EQU   TVWAFLG3
TVWABRIN EQU   TVWAFLG3
TVWABIR  EQU   TVWAFLG2
TVWARTRY EQU   TVWAFLG2
TVWAGERR EQU   TVWAFLG2
TVWASCD  EQU   TVWAFLG2
TVWABFC  EQU   TVWAFLG2
TVWAOOPS EQU   TVWAFLG1
TVWALTE  EQU   TVWAFLG1
TVWAXSCD EQU   TVWAFLG1
TVWATID  EQU   TVWAFLG1
TVWATAS  EQU   TVWAFLG1
TVWATIS  EQU   TVWAFLG1
TVWATOD  EQU   TVWAFLG1
TVWADIN3 EQU   TVWADLST+8
TVWADIN2 EQU   TVWADLST+4
TVWADIN1 EQU   TVWADLST
TVWAECB3 EQU   TVWAECBL+8
TVWAECB2 EQU   TVWAECBL+4
TVWAECB1 EQU   TVWAECBL
TVWATECB EQU   TVWA+116
TVWAECB  EQU   TVWA+112
TVWALNSV EQU   TVWA+111
@NM00080 EQU   TVWAFLG7
TVWACHSE EQU   TVWAFLG7
TVWATOBB EQU   TVWAFLG7
TVWARISW EQU   TVWAFLG7
TVWARET  EQU   TVWAFLG7
TVWARDBF EQU   TVWAFLG7
TVWASND1 EQU   TVWAFLG7
TVWABKPG EQU   TVWAFLG7
TVWAVSZ  EQU   TVWA+108
TVWAVST  EQU   TVWA+104
TVWAEXL  EQU   TVWA+100
TVWARPL  EQU   TVWA+96
TVWANIB  EQU   TVWA+92
TVWAACB  EQU   TVWA+88
TVWAATTN EQU   TVWA+85
TVWACHNL EQU   TVWA+84
TVWALBUF EQU   TVWA+80
TVWAHBUF EQU   TVWA+76
TVWACLSZ EQU   TVWA+74
TVWARTR  EQU   TVWA+72
TVWAGMPT EQU   TVWA+68
TVWATCB  EQU   TVWA+64
TVWAUSMN EQU   TVWA+60
TVWACPID EQU   TVWA+56
TVWAEOQ  EQU   TVWA+52
TVWANOM  EQU   TVWA+48
TVWABOQ  EQU   TVWA+44
TVWAEIQ  EQU   TVWA+40
TVWANIM  EQU   TVWA+36
TVWABIQ  EQU   TVWA+32
TVWAQMWA EQU   TVWA+28
TVWALLWA EQU   TVWA+24
TVWABFPT EQU   TVWA+20
TVWATOPQ EQU   TVWA+16
TVWATOMW EQU   TVWA+12
TVWAPPL  EQU   TVWA
TSBXEND  EQU   TSBX+120
@NM00079 EQU   TSBX+116
TSBXBIND EQU   TSBX+80
TSBXRPL  EQU   TSBX+76
@NM00078 EQU   TSBXTERM+1
TSBXTMTP EQU   TSBXTERM
TSBXAIND EQU   TSBX+70
TSBXRSZO EQU   TSBX+69
TSBXRSZI EQU   TSBX+68
TSBXLBUF EQU   TSBX+64
TSBXCSAP EQU   TSBX+60
TSBXSRB  EQU   TSBX+56
TSBXSRBI EQU   TSBX+52
@NM00077 EQU   TSBX+48
TSBXTOM  EQU   TSBX+44
TSBXTIM  EQU   TSBX+40
@NM00076 EQU   TSBX+33
@NM00075 EQU   TSBXFLG1
TSBXWREC EQU   TSBXFLG1
TSBXLOGF EQU   TSBXFLG1
TSBXACTV EQU   TSBXFLG1
TSBXASCI EQU   TSBXFLG1
TSBXUID  EQU   TSBX+24
@NM00074 EQU   TSBX+16
@NM00073 EQU   TSBX+12
TSBXECB  EQU   TSBX+8
TSBXBCK  EQU   TSBX+4
TSBXFWD  EQU   TSBX
TSBEND   EQU   TSB+120
TSBSF1   EQU   TSB+112
TSBTRMID EQU   TSB+104
TSBALTC  EQU   TSB+103
TSBALTR  EQU   TSB+102
TSBPRMC  EQU   TSB+101
TSBPRMR  EQU   TSB+100
TSBPSWD  EQU   TSB+88
TSBLECB  EQU   TSBMINL
TSBLINE  EQU   TSB+82
TSBSTAX  EQU   TSB+81
TSBATTNC EQU   TSB+80
TSBF1V   EQU   TSBTPOST+7
TSBF1M   EQU   TSBTPOST+6
TSBF2V   EQU   TSBTPOST+5
TSBF2M   EQU   TSBTPOST+4
TSBFLAGV EQU   TSBTPOST+3
TSBFLAGM EQU   TSBTPOST+2
TSBSBASV EQU   TSBTPOST+1
@NM00072 EQU   TSBTPFLG
@NM00071 EQU   TSBTPFLG
@NM00070 EQU   TSBTPFLG
@NM00069 EQU   TSBTPFLG
TSBNEWID EQU   TSBTPFLG
TSBTPAYI EQU   TSBTPFLG
TSBTPQCB EQU   TSBTPFLG
TSBPOSTO EQU   TSBTPFLG
TSBLINKB EQU   TSBLINKA+1
TSBPRI   EQU   TSBLINKA
TSBRQCB  EQU   TSBRCB
TSBCTCB  EQU   TSB+60
TSBERSDS EQU   TSB+56
TSBATNCC EQU   TSB+44
TSBASRCE EQU   TSB+42
TSBHLDL  EQU   TSBFLG4
TSBGETBF EQU   TSBFLG4
TSBCANC  EQU   TSBFLG4
TSBHOLD  EQU   TSBFLG4
TSBHUNG  EQU   TSBFLG4
TSBOWAIT EQU   TSBFLG4
TSBOCAB  EQU   TSBFLG4
TSBATNTC EQU   TSB+38
TSBATNLC EQU   TSB+36
TSBCHDCC EQU   TSBSTCC+1
TSBLNDCC EQU   TSBSTCC
TSBWTJID EQU   TSB+32
TSBECB   EQU   TSB+28
TSBC1050 EQU   TSBTERM2
@NM00068 EQU   TSBTERM2
@NM00067 EQU   TSBTERM2
@NM00066 EQU   TSBTERM2
@NM00065 EQU   TSBTERM2
TSBCTWX  EQU   TSBTERM2
@NM00064 EQU   TSBTERM2
@NM00063 EQU   TSBTERM2
@NM00062 EQU   TSBTERM1
@NM00061 EQU   TSBTERM1
@NM00060 EQU   TSBTERM1
TSBC2741 EQU   TSBTERM1
TSBC5041 EQU   TSBTERM1
TSBCATTN EQU   TSBTERM1
TSBCBRK  EQU   TSBTERM1
TSBCIHBN EQU   TSBTERM1
TSBVTAM  EQU   TSBFLG5
TSBKEYS  EQU   TSBFLG5
@NM00059 EQU   TSBFLG5
TSBATMP  EQU   TSBFLG5
TSBNFLOP EQU   TSBFLG3
TSBNOBRK EQU   TSBFLG3
TSBTPUT  EQU   TSBFLG3
TSBAWOIP EQU   TSBFLG3
TSBNBKSP EQU   TSBFLG3
TSBSPIT  EQU   TSBFLG3
TSBTJMSG EQU   TSBFLG3
TSBATTN  EQU   TSBFLG3
TSBIBFP  EQU   TSB+21
TSBNIBF  EQU   TSB+20
TSBITBFP EQU   TSB+17
TSBSATN2 EQU   TSBFLG2
TSBSATN1 EQU   TSBFLG2
TSBAUTOC EQU   TSBFLG2
TSBBRKIN EQU   TSBFLG2
TSBBIPI  EQU   TSBFLG2
TSBOBFP  EQU   TSB+13
TSBNOBF  EQU   TSB+12
TSBOTBFP EQU   TSB+9
TSBLNSZ  EQU   TSB+8
TSBWTCB  EQU   TSB+5
TSBTJBF  EQU   TSBFLG1
TSBTJIP  EQU   TSBFLG1
TSBTJOW  EQU   TSBFLG1
TSBWOWIP EQU   TSBFLG1
TSBOWIP  EQU   TSBFLG1
TSBOFLSH EQU   TSBFLG1
TSBANSR  EQU   TSBFLG1
TSBASCB  EQU   TSBASCBA+1
TSBATNLD EQU   TSBSTAT
TSB3270  EQU   TSBSTAT
TSBDISC  EQU   TSBSTAT
TSBITOFF EQU   TSBSTAT
TSBNOBUF EQU   TSBSTAT
TSBDSPLY EQU   TSBSTAT
TSBLWAIT EQU   TSBSTAT
TSBINUSE EQU   TSBSTAT
@NM00058 EQU   SCVTSECT+180
@NM00057 EQU   SCVTSECT+176
SCVTPIQE EQU   SCVTSECT+172
@NM00056 EQU   SCVTSECT+168
SCVTPTRM EQU   SCVTSECT+164
@NM00055 EQU   SCVTSECT+160
@NM00054 EQU   SCVTSECT+156
SCVTQCBR EQU   SCVTSECT+152
@NM00053 EQU   SCVTSECT+144
SCVTTQE  EQU   SCVTSECT+140
@NM00052 EQU   SCVTSECT+136
SCVTSVCT EQU   SCVTSECT+132
@NM00051 EQU   SCVTSECT+128
@NM00050 EQU   SCVTSECT+124
SCVTRXLQ EQU   SCVTSECT+120
@NM00049 EQU   SCVTSECT+116
SCVTCTCB EQU   SCVTSECT+112
@NM00048 EQU   SCVTSECT+108
@NM00047 EQU   SCVTSECT+104
@NM00046 EQU   SCVTSECT+100
@NM00045 EQU   SCVTSECT+96
SCVTCOMM EQU   SCVTSECT+92
@NM00044 EQU   SCVTSECT+88
@NM00043 EQU   SCVTSECT+84
@NM00042 EQU   SCVTSECT+80
@NM00041 EQU   SCVTSECT+76
@NM00040 EQU   SCVTSECT+72
SCVTGMBR EQU   SCVTSECT+68
SCVTRPTR EQU   SCVTSECT+64
SCVTHSKP EQU   SCVTSECT+60
@NM00039 EQU   SCVTSECT+56
@NM00038 EQU   SCVTSECT+52
SCVTLFRM EQU   SCVTSECT+48
SCVTCDCL EQU   SCVTSECT+44
@NM00037 EQU   SCVTSECT+40
SCVTRACE EQU   SCVTSECT+36
@NM00036 EQU   SCVTSECT+32
SCVTRMBR EQU   SCVTSECT+28
@NM00035 EQU   SCVTSECT+24
@NM00034 EQU   SCVTSECT+20
@NM00033 EQU   SCVTSECT+16
@NM00032 EQU   SCVTSECT+14
SCVTBR14 EQU   SCVTSECT+12
SCVTSPET EQU   SCVTSECT+8
SCVTPGWR EQU   SCVTSECT+4
SCVTPGTM EQU   SCVTSECT
WSAGSCHE EQU   WSAG+40
WSAGREST EQU   WSAG+36
WSAGNQDQ EQU   WSAG+32
WSAGMEMT EQU   WSAG+28
WSAGOPTM EQU   WSAG+24
WSAGSTAT EQU   WSAG+20
WSAGEMS0 EQU   WSAG+16
WSAGSSRS EQU   WSAG+12
WSAGRSM  EQU   WSAG+8
WSAGGMFM EQU   WSAG+4
WSAGPGIO EQU   WSAG
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00031 EQU   CVTFIX+248
@NM00030 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTSHSB  EQU   CVTSHS
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBQSVC EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
NIBRESV  EQU   ISTNIB+60
NIBNDAR  EQU   ISTNIB+56
NIBLMODE EQU   ISTNIB+48
NIBEXLST EQU   ISTNIB+44
NIBLIMIT EQU   ISTNIB+42
@NM00029 EQU   ISTNIB+41
@NM00028 EQU   NIBFLG1
@NM00027 EQU   NIBFLG1
@NM00026 EQU   NIBFLG1
@NM00025 EQU   NIBFLG1
NIBSHLTP EQU   NIBFLG1
NIBSDAPP EQU   NIBFLG1
NIBCON   EQU   NIBFLG1
NIBLAST  EQU   NIBFLG1
NIBPROCD EQU   ISTNIB+36
NIBDEVCH EQU   ISTNIB+28
NIBMODE  EQU   ISTNIB+20
NIBSYM   EQU   ISTNIB+12
NIBUSER  EQU   ISTNIB+8
NIBCID   EQU   ISTNIB+4
NIBLEN   EQU   ISTNIB+3
NIBCONDN EQU   ISTNIB+2
NIBRSV01 EQU   ISTNIB+1
NIBID    EQU   ISTNIB
DEVRSV03 EQU   ISTDEVCH+5
DEVPHYSA EQU   ISTDEVCH+4
DEVCSLPN EQU   DEVCHAR3
DEVCSTCL EQU   DEVCHAR3
DEVCCHEK EQU   DEVCHAR3
DEVCATTN EQU   DEVCHAR3
DEVCSWL  EQU   DEVFCCTL
DEVCRVB  EQU   DEVFCCTL
DEVCSSL  EQU   DEVFCCTL
DEVCBSC  EQU   DEVFCCTL
DEVMCODE EQU   ISTDEVCH+2
DEVCHAR2 EQU   DEVTCODE
DEVRSV01 EQU   DEVCHAR
DEVCCTL  EQU   DEVCHAR
DEVNNSPT EQU   DEVCHAR
DEVSPS   EQU   DEVCHAR
DEVSUBND EQU   DEVCHAR
DEVCONVR EQU   DEVCHAR
DEVOTPUT EQU   DEVCHAR
DEVINPUT EQU   DEVCHAR
PROSRDEF EQU   PROSETM4
PRORSV47 EQU   PROSETM4
PROSCON  EQU   PROSETM4
PRORSV46 EQU   PROSETM3
PROSMONT EQU   PROSETM3
PRORSV45 EQU   PROSETM3
PROSNTO  EQU   PROSETM3
PRORSV44 EQU   PROSETM3
PRORSV43 EQU   PROSETM2
PROSNTFL EQU   PROSETM2
PRORSV42 EQU   PROSETM2
PRORSV41 EQU   PROPROCS
PROMODC  EQU   PROPROC4
PROMODT  EQU   PROPROC4
PROMODM  EQU   PROPROC4
PROMODB  EQU   PROPROC4
PRORSV14 EQU   PROPROC4
PRORSV13 EQU   PROPROC4
PRORSV12 EQU   PROPROC4
PROEIB   EQU   PROPROC4
PROMONT3 EQU   PROPROC3
PROMONT2 EQU   PROPROC3
PROMONIT EQU   PROPROC3
PROSUBLK EQU   PROPROC3
PRONTO   EQU   PROPROC3
PROLGIN  EQU   PROPROC3
PROERPI  EQU   PROPROC3
PRORSV07 EQU   PROPROC3
PROCFTX  EQU   PROPROC2
PROEMLC  EQU   PROPROC2
PRONTFL  EQU   PROPROC2
PRORSV05 EQU   PROPROC2
PRORSV04 EQU   PROPROC2
PROLGOT  EQU   PROPROC2
PROERPO  EQU   PROPROC2
PRORSV03 EQU   PROPROC2
PRORPLC  EQU   PROPROC1
PROCS    EQU   PROPROC1
PROCA    EQU   PROPROC1
PRORESPX EQU   PROPROC1
PRODFASY EQU   PROPROC1
PROXPOPT EQU   PROPROC1
PROTRUNC EQU   PROPROC1
PROASYIP EQU   PROPROC1
@NM00024 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00023 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00022 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00021 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSARV063 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00020 EQU   FLCFSA
@NM00019 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00018 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00017 EQU   FLCIOA
@NM00016 EQU   FLCMCLA+15
@NM00015 EQU   FLCMCLA+14
@NM00014 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00013 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00012 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00011 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00010 EQU   FLCPER
@NM00009 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00008 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00007 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00006 EQU   FLCPIILC
@NM00005 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00004 EQU   FLCSVILC
@NM00003 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00002 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00001 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00255 EQU   @RC00253
@RC00391 EQU   @RC00383
@RC00385 EQU   @RC00383
@RC00428 EQU   @RC00426
@RT00442 EQU   @RC00406
@RC00461 EQU   @RC00459
@RC00498 EQU   @RC00496
@PB00006 EQU   @EL00001
@PB00005 EQU   @PB00006
@RC00507 EQU   @RC00498
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@RC00114 EQU   @PB00002
@RC00116 EQU   @RC00114
@ENDDATA EQU   *
         END   IKT3270I,(C'PLS2250',0701,78045)
