         TITLE '*** IKT3270O: TSO/VTAM TERMINAL SCREEN MANAGER ***     *
                        '
IKT3270O CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKT3270O  78.045'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @05,0                                               0001
@PSTART  LA    @06,4095(,@05)                                      0001
         LA    @07,4095(,@06)                                      0001
         USING @PSTART,@05                                         0001
         USING @PSTART+4095,@06                                    0001
         USING @PSTART+8190,@07                                    0001
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* SET UP ADDRESSING TO COMPILER WORK AREA, SET SCREEN PARMS AND    */
*/* PROCESS REQUEST CODE.                                            */
*/*                                                                  */
*/********************************************************************/
*                                                                  0045
*TVWAPTR=TSBXTVWA;                   /* SET TVWA POINTER             */
         L     @12,PSAAOLD                                         0045
         L     @12,ASCBTSB(,@12)                                   0045
         L     @12,TSBEXTNT(,@12)                                  0045
         L     TVWAPTR,TSBXTVWA(,@12)                              0045
*TOMWAPTR=TVWATOMW;                  /* SET BASE PTR FOR WORK AREA   */
         L     TOMWAPTR,TVWATOMW(,TVWAPTR)                         0046
*RFY IFGRPL BASED(EVAL(TOMWAPTR+                                   0047
*          LEN@DATA+LENGTH(TOMWA))); /* RPL ADDRESS                  */
*REG4=ADDR(TOMAUTOD);                /* ADDRESS OF AUTODATA AREA     */
         LA    REG4,TOMAUTOD(,TOMWAPTR)                            0048
*GEN REFS(REG4) SETS(REG13);         /* ADDRESSING-COMPILER WORK AREA*/
    USING @DATD,REG4
    ST REG13,@SA00001+4
    ST REG4,8(,REG13)
    LR REG13,REG4
*IF (TVWAXSCD='1'B) THEN             /* HAS SCREEN SIZE CHANGED?     */
         TM    TVWAXSCD(TVWAPTR),B'00001000'                       0050
         BNO   @RF00050                                            0050
*  CALL SETSCRSZ;                    /* SET UP & VALIDATE SCRN PARMS */
         BAL   @14,SETSCRSZ                                        0051
*ELSE;                               /* NO PARMS VALIDATION NEEDED   */
@RF00050 DS    0H                                                  0053
*TOMGETMN=TOMWAPTR+                  /* WORK AREA ADDRESS +  @ZM21356*/
*         LEN@DATA+                  /* AUTO DATA SIZE +     @ZM21356*/
*         LENGTH(TOMWA)+             /* WORK AREA SIZE +     @ZM21356*/
*         LENGTH(IFGRPL);            /* LENGTH OF RPL        @ZM21356*/
         LA    @12,856                                             0053
         ALR   @12,TOMWAPTR                                        0053
         ST    @12,TOMGETMN(,TOMWAPTR)                             0053
*TOMBFPTR=TOMGETMN;                  /* SET PTR TO BEGINNING OF RU   */
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0054
*IF TOMREQCD=BLDOPRU THEN            /* IS REQUEST CODE FOR RU BUILD?*/
         CLI   TOMREQCD(TOMWAPTR),0                                0055
         BNE   @RF00055                                            0055
*  CALL BLDRU;                       /* YES, BUILD OUTPUT RU         */
         BAL   @14,BLDRU                                           0056
*ELSE                                /* CONTINUE REQUEST CHK @G58AK2Q*/
*  IF TOMREQCD=BLDFMWRT THEN         /* REQ FOR FORMAT WRT?  @G58AK2Q*/
         B     @RC00055                                            0057
@RF00055 CLI   TOMREQCD(TOMWAPTR),1                                0057
         BNE   @RF00057                                            0057
*    CALL FORMTWRT;                  /* YES, BLD FORMAT WRT  @G58AK2Q*/
         BAL   @14,FORMTWRT                                        0058
*  ELSE                              /* CONTINUE REQUEST CHK @G58AK2Q*/
*    IF TOMREQCD=BLDRDBF THEN        /* IS REQ FOR READ BUFF @G58AK2Q*/
         B     @RC00057                                            0059
@RF00057 CLI   TOMREQCD(TOMWAPTR),2                                0059
         BNE   @RF00059                                            0059
*      CALL READBUFF;                /* YES, BLD READ BUFFER @G58AK2Q*/
         BAL   @14,READBUFF                                        0060
*    ELSE                            /* CONTINUE REQUEST CHK @G58AK2Q*/
*      IF TOMREQCD=BLDBKSE THEN      /* IS REQ FOR BREAK-IN? @G58AK2Q*/
         B     @RC00059                                            0061
@RF00059 CLI   TOMREQCD(TOMWAPTR),3                                0061
         BNE   @RF00061                                            0061
*        CALL BKMDSEND;              /* BLD BREAK-IN RU      @G58AK2Q*/
         BAL   @14,BKMDSEND                                        0062
*      ELSE                          /* CONTINUE REQ CHECK   @G58AK2Q*/
*        IF TOMREQCD=BLDSCRES THEN   /* BREAK-IN SCRN RES    @G58AK2Q*/
         B     @RC00061                                            0063
@RF00061 CLI   TOMREQCD(TOMWAPTR),4                                0063
         BNE   @RF00063                                            0063
*          CALL SCRNREST;            /* RESTORE SCREEN       @G58AK2Q*/
         BAL   @14,SCRNREST                                        0064
*        ELSE;                       /* END REQUEST CHECK    @G58AK2Q*/
@RF00063 DS    0H                                                  0066
*/********************************************************************/
*/*                                                                  */
*/* PROCESS USER AND/OR ASCII TRANSLATION REQUESTS                   */
*/*                                                                  */
*/********************************************************************/
*IF TOMBFCNT>0 THEN                  /* IS RU EMPTY?                 */
@RC00061 DS    0H                                                  0066
@RC00059 DS    0H                                                  0066
@RC00057 DS    0H                                                  0066
@RC00055 L     @12,TOMBFCNT(,TOMWAPTR)                             0066
         LTR   @12,@12                                             0066
         BNP   @RF00066                                            0066
*  IF (TVWATRAN='1'B)×               /* IS USER TRANSLATION NEEDED?  */
*     (TSBXASCI='1'B) THEN           /* IS ASCII TRANSLATION NEEDED? */
         TM    TVWATRAN(TVWAPTR),B'00000010'                       0067
         BO    @RT00067                                            0067
         L     @12,PSAAOLD                                         0067
         L     @12,ASCBTSB(,@12)                                   0067
         L     @12,TSBEXTNT(,@12)                                  0067
         TM    TSBXASCI(@12),B'10000000'                           0067
         BNO   @RF00067                                            0067
@RT00067 DS    0H                                                  0068
*    CALL TRANPROC;                  /* YES, DO USER &/OR ASCII TRANS*/
         BAL   @14,TRANPROC                                        0068
*  ELSE;                             /* NO TRANSLATION NEEDED        */
@RF00067 DS    0H                                                  0070
*ELSE;                               /* RU IS EMPTY                  */
@RF00066 DS    0H                                                  0071
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, SETSCRSZ, WILL BE CALL TO INITIALIZE PARAMETERS  */
*/* USED FOR SCREEN MANAGEMENT. SETSCRSZ WILL ALSO BE CALL TO ADJUST */
*/* THESE PARAMETERS AS NEEDED DURING THE SESSION.                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0071
*SETSCRSZ: PROCEDURE OPTIONS(SAVE(14));                            0071
*                                                                  0071
@EL00001 L     @13,4(,@13)                                         0071
@EF00001 DS    0H                                                  0071
@ER00001 LM    @14,@12,12(@13)                                     0071
         BR    @14                                                 0071
SETSCRSZ ST    @14,12(,@13)                                        0071
*IF TSBXTMBF=1920 THEN               /* IS THIS A MODEL TWO DISPLAY? */
         L     @12,PSAAOLD                                         0072
         L     @12,ASCBTSB(,@12)                                   0072
         L     @12,TSBEXTNT(,@12)                                  0072
         CLC   TSBXTMBF(2,@12),@CH02229                            0072
         BNE   @RF00072                                            0072
*  DO;                               /* YES, SCRN PARMS FOR MODEL-2  */
*    TOMPLSZ=80;                     /* SET PHYSICAL LINE-SIZE       */
         MVC   TOMPLSZ(4,TOMWAPTR),@CF01672                        0074
*    TOMPLNNO=24;                    /* SET PHYSICAL # OF LINES/SCRN */
         MVI   TOMPLNNO(TOMWAPTR),X'18'                            0075
*    TOMFMTAD='5D7F'X;               /* LAST SCREEN POSITION         */
         MVC   TOMFMTAD(2,TOMWAPTR),@CB02230                       0076
*  END;                              /* SET SCRN PARMS FOR MODEL-2   */
*ELSE                                /* IF NO, THEN THIS IS A MODEL-1*/
*  DO;                               /* SET SCRN PARMS FOR MODEL-1   */
         B     @RC00072                                            0078
@RF00072 DS    0H                                                  0079
*    TOMPLSZ=40;                     /* SET PHYSICAL LINE-SIZE       */
         MVC   TOMPLSZ(4,TOMWAPTR),@CF01910                        0079
*    TOMPLNNO=12;                    /* SET PHYSICAL # OF LINES/SCRN */
         MVI   TOMPLNNO(TOMWAPTR),X'0C'                            0080
*    TOMFMTAD='C75F'X;               /* LAST SCREEN POSITION         */
         MVC   TOMFMTAD(2,TOMWAPTR),@CB02231                       0081
*  END;                              /* SET SCRN PARMS FOR MODEL-1   */
*TOMSBACD=SBA;                       /* SET SBA CODE IN FORMAT DATA  */
@RC00072 MVI   TOMSBACD(TOMWAPTR),X'11'                            0083
*TOMFMATT=SFRDATT;                   /* SET FORMAT ATTRIBUTE IN DATA */
         MVC   TOMFMATT(2,TOMWAPTR),@CB01962                       0084
*TOMLNSZ=MAX(2,MIN(TSBLNSZ,TOMPLSZ));/* SET WORKING LINE-SIZE        */
         LA    @12,2                                               0085
         L     @01,PSAAOLD                                         0085
         L     @15,ASCBTSB(,@01)                                   0085
         SLR   @14,@14                                             0085
         IC    @14,TSBLNSZ(,@15)                                   0085
         L     @11,TOMPLSZ(,TOMWAPTR)                              0085
         CR    @14,@11                                             0085
         BNH   *+6
         LR    @14,@11                                             0085
         CR    @14,@12                                             0085
         BNL   *+6
         LR    @14,@12                                             0085
         STC   @14,TOMLNSZ(,TOMWAPTR)                              0085
*TOMLNNO=MAX(2,MIN(TSBLNNO,TOMPLNNO));/* SET WORKING # OF LINES/SCRN */
         SLR   @14,@14                                             0086
         IC    @14,TSBLNNO(,@15)                                   0086
         SLR   @15,@15                                             0086
         IC    @15,TOMPLNNO(,TOMWAPTR)                             0086
         CR    @14,@15                                             0086
         BNH   *+6
         LR    @14,@15                                             0086
         CR    @14,@12                                             0086
         BNL   *+6
         LR    @14,@12                                             0086
         ST    @14,TOMLNNO(,TOMWAPTR)                              0086
*TVWAXSCD='0'B;                      /* OFF, SET SCRN SIZE REQUEST   */
         NI    TVWAXSCD(TVWAPTR),B'11110111'                       0087
*END SETSCRSZ;                       /* END OF SETSCRSZ              */
@EL00002 DS    0H                                                  0088
@EF00002 DS    0H                                                  0088
@ER00002 L     @14,12(,@13)                                        0088
         BR    @14                                                 0088
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, FORMTWRT, WILL BUILD AN RU CONSISTING OF A.....  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0089
*FORMTWRT: PROCEDURE OPTIONS(SAVE(14));                    /*@G58AK2Q*/
*                                                                  0089
FORMTWRT ST    @14,12(,@13)                                        0089
*DCL ASCITABO CHAR(256) BASED(TVWAATBO);/* ASCII TRANS TABLE @G58AK2Q*/
*                                                                  0090
*TOMCOLMN=0;                         /* RESET COLUMN COUNT   @ZA17886*/
         SLR   @12,@12                                             0091
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0091
*I=9;                                /* INDEX INTO MESSAGE   @G58AK2Q*/
         LA    @12,9                                               0092
         ST    @12,I(,TOMWAPTR)                                    0092
*TOMWRKSZ=MIN(MSGSIZE,62)+18;        /* SET SIZE OF ERROR MS @G58AK2Q*/
         SLA   @12,2                                               0093
         L     @01,FLCCVT                                          0093
         L     @01,CVTTCASP(,@01)                                  0093
         L     @01,TCASMSGS(,@01)                                  0093
         AL    @01,@CF02389                                        0093
         L     @12,MSGADR(@12,@01)                                 0093
         LH    @15,MSGSIZE(,@12)                                   0093
         LA    @14,62                                              0093
         CR    @15,@14                                             0093
         BNH   *+6
         LR    @15,@14                                             0093
         AL    @15,@CF02240                                        0093
         STC   @15,TOMWRKSZ(,TOMWAPTR)                             0093
*TOMWRKBF(1)=EWRT;                   /* PUT IN COMMAND       @ZM21421*/
         MVI   TOMWRKBF(TOMWAPTR),X'F5'                            0094
*TOMWRKBF(2:7)='C21140401DC8'X;      /* WRITE CONTROL CHARACTER AND
*                                       ADDRESS              @ZM21421*/
         MVC   TOMWRKBF+1(6,TOMWAPTR),@CB02241                     0095
*TOMWRKBF(8:TOMWRKSZ-11)=MSGDATA(1:(MIN(MSGSIZE,62)));     /*@G58AK2Q*/
         LR    @14,@15                                             0096
         SL    @14,@CF02373                                        0096
         EX    @14,@SM02390                                        0096
*TOMWRKBF(TOMWRKSZ-10:TOMWRKSZ)='11C1501DC85C5C5C1D4013'X; /*@G58AK2Q*/
         ALR   @15,TOMWAPTR                                        0097
         MVC   TOMWRKBF-11(11,@15),@CB02243                        0097
*IF TSBXASCI='1'B THEN               /* ASCII TRANSLATION?   @G58AK@Q*/
         L     @12,PSAAOLD                                         0098
         L     @12,ASCBTSB(,@12)                                   0098
         L     @12,TSBEXTNT(,@12)                                  0098
         TM    TSBXASCI(@12),B'10000000'                           0098
         BNO   @RF00098                                            0098
*  TR(TOMWRKBF(1:TOMWRKSZ),ASCITABO);/* YES, TRANSLATE DATA  @G58AK2Q*/
         SLR   @12,@12                                             0099
         IC    @12,TOMWRKSZ(,TOMWAPTR)                             0099
         BCTR  @12,0                                               0099
         L     @01,TVWAATBO(,TVWAPTR)                              0099
         EX    @12,@SB02392                                        0099
*ELSE;                                                     /*@G58AK2Q*/
@RF00098 DS    0H                                                  0101
*TVWAPGN='1'B;                       /* SET PAGING FLAG ON   @G58AK2Q*/
         OI    TVWAPGN(TVWAPTR),B'01000000'                        0101
*TVWAKBDL='0'B;                      /* KEYBOARD UNLOCKED    @ZA13627*/
         NI    TVWAKBDL(TVWAPTR),B'11011111'                       0102
*IF RPLUSNSI='0001'X THEN            /* OPERATIONS CHECK?    @ZA17031*/
         LA    @12,744                                             0103
         ALR   @12,TOMWAPTR                                        0103
         CLC   RPLUSNSI(2,@12),@CH02246                            0103
         BNE   @RF00103                                            0103
*  TOMERLCT='0'B;                                          /*@ZA17031*/
         NI    TOMERLCT(TOMWAPTR),B'11111101'                      0104
*ELSE                                /* NOT OPERATIONS CHECK @ZA17031*/
*  TOMERLCT='1'B;                                          /*@ZA17031*/
         B     @RC00103                                            0105
@RF00103 OI    TOMERLCT(TOMWAPTR),B'00000010'                      0105
*TOMCURST='1'B;                      /* CURSOR SET                   */
@RC00103 OI    TOMCURST(TOMWAPTR),B'00010000'                      0106
*TOMERMG9='1'B;                      /* SPECIAL ERROR MSG RU @G58AK2Q*/
         OI    TOMERMG9(TOMWAPTR),B'00100000'                      0107
*END FORMTWRT;                       /* END OF FORMTWRT              */
@EL00003 DS    0H                                                  0108
@EF00003 DS    0H                                                  0108
@ER00003 L     @14,12(,@13)                                        0108
         BR    @14                                                 0108
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, READBUFF, WILL BUILD A RU TO ISSUE A READ BUFFER */
*/* COMMAND.                                                         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0109
*READBUFF: PROCEDURE OPTIONS(SAVE(14));                    /*@G58AK2Q*/
*                                                                  0109
READBUFF ST    @14,12(,@13)                                        0109
*IKTOBUF(1)=RDBFCMD;                 /* READ BUFFER CMD IN RU@G58AK2Q*/
         L     @12,TOMBFPTR(,TOMWAPTR)                             0110
         MVI   IKTOBUF(@12),X'F2'                                  0110
*TOMBFCNT=1;                         /* UPDATE COUNT OF DATA @G58AK2Q*/
         LA    @15,1                                               0111
         ST    @15,TOMBFCNT(,TOMWAPTR)                             0111
*TOMBFPTR=TOMBFPTR+1;                /* UPDATA RU BUFFER PTR @G58AK2Q*/
         ALR   @12,@15                                             0112
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0112
*TVWAKBDL='0'B;                      /* KB LOGICALLY UNLOCKED@G58AK2Q*/
         NI    TVWAKBDL(TVWAPTR),B'11011111'                       0113
*END READBUFF;                       /* END OF READBUFF      @G58AK2Q*/
@EL00004 DS    0H                                                  0114
@EF00004 DS    0H                                                  0114
@ER00004 L     @14,12(,@13)                                        0114
         BR    @14                                                 0114
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BKMDSEND, WILL BUILD AN RU....                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0115
*BKMDSEND: PROCEDURE OPTIONS(SAVE(14));                    /*@G58AK2Q*/
*                                                                  0115
BKMDSEND ST    @14,@SA00005                                        0115
*IF TOMBFCNT=0 THEN                  /* IS OUTPUT RU EMPTY?  @G58AK2Q*/
         L     @12,TOMBFCNT(,TOMWAPTR)                             0116
         LTR   @12,@12                                             0116
         BNZ   @RF00116                                            0116
*  CALL SCRFORMT;                    /* PUT IN CMD AND WCC   @G58AK2Q*/
         BAL   @14,SCRFORMT                                        0117
*ELSE;                               /* RU NOT EMPTY         @G58AK2Q*/
@RF00116 DS    0H                                                  0119
*IF TVWAFSM='0'B THEN                /* IN FULLSCREEN MODE?  @G58AK2Q*/
         TM    TVWAFSM(TVWAPTR),B'01000000'                        0119
         BNZ   @RF00119                                            0119
*  CALL NEWCURS;                     /* NO, FORMAT SCRN FOR  @G58AK2Q*/
         BAL   @14,NEWCURS                                         0120
*ELSE;                               /* FULLSCREEN MODE      @G58AK2Q*/
@RF00119 DS    0H                                                  0122
*END BKMDSEND;                       /* END OF BKMDSEND      @G58AK2Q*/
@EL00005 DS    0H                                                  0122
@EF00005 DS    0H                                                  0122
@ER00005 L     @14,@SA00005                                        0122
         BR    @14                                                 0122
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, SCRNREST, WILL BUILD A RU TO RESTORE SCRN WHICH  */
*/* WAS SAVED PRIOR TO BREAK-IN PROCESSING.                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0123
*SCRNREST: PROCEDURE OPTIONS(SAVE(14));                    /*@G58AK2Q*/
*                                                                  0123
SCRNREST ST    @14,12(,@13)                                        0123
*DECLARE                                                           0124
*  1 RDBFGETM BASED(TVWAGMPT),       /* GETMAINED FOR RD BUF @G58AK2Q*/
*   2 GETMLENG FIXED(31),            /* LENGTH OF GETMAIN    @G58AK2Q*/
*   2 DATALENG FIXED(31),            /* LGTH OF RD BUF INPUT @G58AK2Q*/
*   2 CNTLHEAD,                      /* SCRN RESTORE HEADER  @G58AK2Q*/
*    3 CMDWCCDE CHAR(2),             /* COMMAND AND WCC BYTE @G58AK2Q*/
*    3 SBASEQEN CHAR(3),             /* START ADR FOR RESTORE@G58AK2Q*/
*     4    *     CHAR(1),            /* AID OR SBA CODE      @G58AK2Q*/
*     4 CURSSBA@ CHAR(2);            /* CURS OR SBA ADDRESS  @G58AK2Q*/
*                                                                  0124
*DECLARE                                                           0125
*  1 ICCURSOR BASED(EVAL(TVWAGMPT+DATALENG+10)),           /*@G58AK2Q*/
*   2 SBACDE   CHAR(1),              /* SET BUFFER ADDR CODE @G58AK2Q*/
*   2 CURSADDR CHAR(2),              /* RESTORED CURSOR ADDR @G58AK2Q*/
*   2 ICORDER  CHAR(1);              /* INSERT CURSOR ORDER  @G58AK2Q*/
*                                                                  0125
*SBACDE=SBA;                         /* SET SBA CODE FOR IC  @G58AK2Q*/
         LA    @12,10                                              0126
         L     @15,TVWAGMPT(,TVWAPTR)                              0126
         L     @14,DATALENG(,@15)                                  0126
         LR    @11,@15                                             0126
         ALR   @11,@14                                             0126
         LR    @10,@11                                             0126
         ALR   @10,@12                                             0126
         MVI   SBACDE(@10),X'11'                                   0126
*CURSADDR=CURSSBA@;                  /* RESTORE CURSOR ADDR  @G58AK2Q*/
         LR    @10,@11                                             0127
         ALR   @10,@12                                             0127
         MVC   CURSADDR(2,@10),CURSSBA@(@15)                       0127
*ICORDER=IC;                         /* INSERT CURSOR ORDER  @G58AK2Q*/
         ALR   @11,@12                                             0128
         MVI   ICORDER(@11),X'13'                                  0128
*CNTLHEAD='F1C2114040'X;             /* SET HEADER FOR WRITE @G58AK2Q*/
         MVC   CNTLHEAD(5,@15),@CB02270                            0129
*TOMBFCNT=DATALENG+6;                /* SET LGTH OF OUTPUT RU@G58AK2Q*/
         AL    @14,@CF00033                                        0130
         ST    @14,TOMBFCNT(,TOMWAPTR)                             0130
*TOMGETMN=TVWAGMPT+8;                /* SET ADDR OF OUTPUT RU@G58AK2Q*/
         AL    @15,@CF00062                                        0131
         ST    @15,TOMGETMN(,TOMWAPTR)                             0131
*TVWAKBDL='0'B;                      /* KEYBD IS UNLOCKED    @G58AK2Q*/
         NI    TVWAKBDL(TVWAPTR),B'11011111'                       0132
*IF TOMPGNSV='0'B THEN               /* NO PAGING?           @ZM20919*/
         TM    TOMPGNSV(TOMWAPTR),B'00010000'                      0133
         BNZ   @RF00133                                            0133
*  TVWAPGN='0'B;                     /* TURN OFF PAGING BIT  @ZM20919*/
         NI    TVWAPGN(TVWAPTR),B'10111111'                        0134
*ELSE                                /* PAGING               @ZM20919*/
*  TVWAPGN='1'B;                     /* TURN ON PAGING BIT   @ZM20919*/
         B     @RC00133                                            0135
@RF00133 OI    TVWAPGN(TVWAPTR),B'01000000'                        0135
*END SCRNREST;                       /* END OF SCRNREST      @G58AK2Q*/
@EL00006 DS    0H                                                  0136
@EF00006 DS    0H                                                  0136
@ER00006 L     @14,12(,@13)                                        0136
         BR    @14                                                 0136
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BLDRU, WILL CONTROL THE BUILDING OF THE OUTPUT.  */
*/* APPROPRIATE ROUTINES WILL BE CALLED TO PUT DATA IN THE OUTPUT    */
*/* RU.                                                              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0137
*BLDRU: PROCEDURE OPTIONS(SAVE(14));                               0137
*                                                                  0137
BLDRU    ST    @14,@SA00007                                        0137
*OPASID  ='0'B;                      /* SET CROSS-MEMORY FLAG OFF    */
         NI    OPASID(TOMWAPTR),B'11110111'                        0138
*TOMSCHED='0'B;                      /* SEND RU POST=RESP            */
         NI    TOMSCHED(TOMWAPTR),B'11110111'                      0139
*TOMCURST='0'B;                      /* CURSOR NOT SET IN OUTPUT RU  */
*TOMEXBRU='0'B;                      /* OFF, CONTINUE RU DATA BUILD  */
         NI    TOMCURST(TOMWAPTR),B'11101101'                      0141
*TOMKBULK='0'B;                      /* KEYBD UNLOCK NOT REQ'ED YET  */
         NI    TOMKBULK(TOMWAPTR),B'01111111'                      0142
*TOMBFCNT= 0  ;                      /* SET COUNT OF DATA IN RU TO 0 */
         SLR   @12,@12                                             0143
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0143
*TOMTRSBA='0'B;                      /* SAVE LAST ATTRBUTE ADDRESS   */
*TOMALARM='0'B;                      /* OFF, AUDIBLE ALARM REQUEST   */
*TOMERASE='0'B;                      /* NO SCRN ERASE NEEDED         */
         NI    TOMTRSBA(TOMWAPTR),B'10101110'                      0146
*IF TVWABKMG='1'B THEN               /* IS FLASHBACK DATA PENDING?   */
         TM    TVWABKMG(TVWAPTR),B'00000100'                       0147
         BNO   @RF00147                                            0147
*  /******************************************************************/
*  /*                                                                */
*  /*      PUT LAST INPUT LINE(S) AT TOP OF 3270 SCREEN IF YES.      */
*  /*                                                                */
*  /******************************************************************/
*  CALL FLSHBACK;                    /* PUT FLASHBACK IN OUTPUT RU   */
         BAL   @14,FLSHBACK                                        0148
*ELSE;                               /* NO FLASHBACK PENDING         */
@RF00147 DS    0H                                                  0150
*IF (TVWAERMG='1'B)&                 /* TEST FOR TIM'S ERROR MESSAGE */
*   (TOMEXBRU='0'B) THEN             /* CAN RU BUILD CONTINUE?       */
         TM    TVWAERMG(TVWAPTR),B'00001000'                       0150
         BNO   @RF00150                                            0150
         TM    TOMEXBRU(TOMWAPTR),B'00000010'                      0150
         BNZ   @RF00150                                            0150
*  /******************************************************************/
*  /*                                                                */
*  /*            PUT TIM'S ERROR MESSAGE IN OUTPUT RU                */
*  /*                                                                */
*  /******************************************************************/
*  CALL BLDERR;                      /* GO TO ERROR MESSAGE ROUTINE  */
         BAL   @14,BLDERR                                          0151
*ELSE;                               /* TIM'S ERR MESSAGE NOT PENDING*/
@RF00150 DS    0H                                                  0153
*IF ((TVWAATTN^=0)   ×               /* REQ FOR ATTENTION ACCEPTED?  */
*    (TVWAAIGN='1'B))&               /* REQ FOR ATTENTION IGNORED?   */
*    (TOMEXBRU='0'B)  THEN           /* CAN RU BUILD CONTINUE        */
         CLI   TVWAATTN(TVWAPTR),0                                 0153
         BNE   @GL00003                                            0153
         TM    TVWAAIGN(TVWAPTR),B'00100000'                       0153
         BNO   @RF00153                                            0153
@GL00003 TM    TOMEXBRU(TOMWAPTR),B'00000010'                      0153
         BNZ   @RF00153                                            0153
*  /******************************************************************/
*  /*                                                                */
*  /*    PUT ATTENTION ACCEPTED AND/OR IGNORED MESSAGE(S) IN RU.     */
*  /*                                                                */
*  /******************************************************************/
*  CALL BLDATTN;                     /* PUT ATTENTION MESSAGES IN RU */
         BAL   @14,BLDATTN                                         0154
*ELSE;                               /* NO ATTENTION MESSAGES PENDING*/
@RF00153 DS    0H                                                  0156
*/********************************************************************/
*/*                                                                  */
*/*            BUILD AND EDIT USER DATA IN OUTPUT RU.                */
*/*                                                                  */
*/********************************************************************/
*IF TOMEXBRU='0'B THEN               /* CAN RU BUILD CONTINUE?       */
         TM    TOMEXBRU(TOMWAPTR),B'00000010'                      0156
         BNZ   @RF00156                                            0156
*  CALL BLDDTA;                      /* YES, CALL DATA BUILD ROUTINE */
         BAL   @14,BLDDTA                                          0157
*ELSE;                                                             0158
@RF00156 DS    0H                                                  0159
*IF (TSBSPIT='0'B) &                 /* NO TCLEARQ OR STBREAK ISSUED?*/
*   (TSBAUTON='1'B)&                 /* IS AUTO-PROMPTING IS EFFECT? */
*   (TSBSTAUT='1'B)&                 /* CAN PROMPT BE STARTED NOW?   */
*   (TOMEXBRU='0'B) THEN             /* CAN RU BUILD CONTINUE?       */
         L     @12,PSAAOLD                                         0159
         L     @12,ASCBTSB(,@12)                                   0159
         TM    TSBSPIT(@12),B'00100000'                            0159
         BNZ   @RF00159                                            0159
         TM    TSBAUTON(@12),B'01000100'                           0159
         BNO   @RF00159                                            0159
         TM    TOMEXBRU(TOMWAPTR),B'00000010'                      0159
         BNZ   @RF00159                                            0159
*  /******************************************************************/
*  /*                                                                */
*  /*       BUILD LINE OR CHARACTER PROMPT DATA IN OUTPUT RU.        */
*  /*                                                                */
*  /******************************************************************/
*  CALL BLDPRMPT;                    /* GO TO PROMPT ROUNTINE        */
         BAL   @14,BLDPRMPT                                        0160
*ELSE;                               /* NO AUTO-PROMPT REQUESTED     */
@RF00159 DS    0H                                                  0162
*IF TOMBFCNT>0 & TOMLNCNT>1 THEN     /* DATA IN RU & NOT FIRST LINE? */
         L     @12,TOMBFCNT(,TOMWAPTR)                             0162
         LTR   @12,@12                                             0162
         BNP   @RF00162                                            0162
         L     @12,TOMLNCNT(,TOMWAPTR)                             0162
         C     @12,@CF00064                                        0162
         BNH   @RF00162                                            0162
*  IF TOMTRSBA='0'B ×                /* IS LINE-COUNT GREATER THAN 1?*/
*     TOMEDSAV='00'B ×               /* LAST TPUT AN EDIT?   @ZA17040*/
*     TOMEDSAV='01'B THEN            /* LAST TPUT AN ASIS?   @ZA17040*/
         TM    TOMTRSBA(TOMWAPTR),B'00000001'                      0163
         BZ    @RT00163                                            0163
         TM    TOMEDSAV(TOMWAPTR),B'11000000'                      0163
         BZ    @RT00163                                            0163
         TM    TOMEDSAV(TOMWAPTR),B'01000000'                      0163
         BNO   @RF00163                                            0163
         TM    TOMEDSAV(TOMWAPTR),B'10000000'                      0163
         BNZ   @RF00163                                            0163
@RT00163 DS    0H                                                  0164
*    TVWASCAN='1'B;                  /* YES                  @ZA19883*/
         OI    TVWASCAN(TVWAPTR),B'10000000'                       0164
*  ELSE                              /* NO ATTRIBUTE TRACKING NEEDED */
*    TVWASCAN='0'B;                  /* TURN OFF REQ FOR ATTRIB TRACK*/
         B     @RC00163                                            0165
@RF00163 NI    TVWASCAN(TVWAPTR),B'01111111'                       0165
*ELSE;                               /* RU EMPTY OR FIRST LINE       */
@RF00162 DS    0H                                                  0167
*IF TOMBFCNT>0 THEN                  /* DATA IN RU?          @ZA17040*/
@RC00162 L     @12,TOMBFCNT(,TOMWAPTR)                             0167
         LTR   @12,@12                                             0167
         BNP   @RF00167                                            0167
*  TVWADARC='0'B;                    /* RESET DATA FOUND BIT @ZA17040*/
         NI    TVWADARC(TVWAPTR),B'11111110'                       0168
*ELSE;                               /* RU EMPTY             @ZA17040*/
@RF00167 DS    0H                                                  0170
*IF TOMENDBF='0'B THEN               /* ENOUGH BUFFER SPACE? @ZA19888*/
         TM    TOMENDBF(TOMWAPTR),B'00100000'                      0170
         BNZ   @RF00170                                            0170
*  IF (TOMCURST='0'B)&               /* IS CURSOR ALREADY SET IN RU? */
*     (TOMBFCNT>0) THEN              /* IS THERE DATA IN OUTPUT RU?  */
         TM    TOMCURST(TOMWAPTR),B'00010000'                      0171
         BNZ   @RF00171                                            0171
         L     @12,TOMBFCNT(,TOMWAPTR)                             0171
         LTR   @12,@12                                             0171
         BNP   @RF00171                                            0171
*     /***************************************************************/
*     /*                                                             */
*     /* THIS DO GROUP WILL SET CURSOR FOR ALL NON-EMPTY RU'S FOR    */
*     /* WHICH CURSOR HAS NOT ALREADY BEEN SET.                      */
*     /*                                                             */
*     /***************************************************************/
*    DO;                             /* BEGIN DEFAULT CURSOR PROCESS */
*      CALL NEWLINE;                 /* PUT LINE ADDR IN OUTPUT RU   */
         BAL   @14,NEWLINE                                         0173
*      IF (TOMLNCNT>=TOMLNNO)&       /* LINE-COUNT AT LAST SCRN LINE?*/
*         (TVWANOFB='0'B) THEN       /* IS IT OKAY TO DO FLASHBACK?  */
         L     @12,TOMLNCNT(,TOMWAPTR)                             0174
         C     @12,TOMLNNO(,TOMWAPTR)                              0174
         BL    @RF00174                                            0174
         TM    TVWANOFB(TVWAPTR),B'00010000'                       0174
         BNZ   @RF00174                                            0174
*        CALL SCRNPAGE;              /* YES, PUT PAGE PROMPT IN RU   */
         BAL   @14,SCRNPAGE                                        0175
*      ELSE                          /* NOT LAST LINE OR NO FLASHBACK*/
*        DO;                         /* SET CURSOR ON CURRENT LINE   */
         B     @RC00174                                            0176
@RF00174 DS    0H                                                  0177
*          TOMBFCNT=TOMBFCNT+1;      /* UPDATE COUNT OF DATA IN RU   */
         LA    @12,1                                               0177
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0177
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0177
*          IKTOBUF=IC;               /* PUT INSERT CURSOR IN RU      */
         L     @01,TOMBFPTR(,TOMWAPTR)                             0178
         XC    IKTOBUF+1(255,@01),IKTOBUF+1(@01)                   0178
         MVI   IKTOBUF(@01),X'13'                                  0178
*          TOMBFPTR=TOMGETMN+TOMBFCNT; /* UPDATE RU BUFFER POINTER   */
         AL    @12,TOMGETMN(,TOMWAPTR)                             0179
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0179
*          TOMSTCUR='0'B;            /* TURN OFF REQUEST FOR CURSOR  */
         NI    TOMSTCUR(TOMWAPTR),B'11111011'                      0180
*        END;                        /* END CURSOR SETING OF CURSOR  */
*    END;                            /* END DEFAULT CURSOR PROCESS   */
*  ELSE                              /* CURSOR IS SET OR RU IS EMPTY */
*    IF (TOMSTCUR='1'B)&             /* REQ FOR CURSOR AFTER PAGING? */
*       (TOMBFCNT=0)  THEN           /* IS OUTPUT RU EMPTY?          */
         B     @RC00171                                            0183
@RF00171 TM    TOMSTCUR(TOMWAPTR),B'00000100'                      0183
         BNO   @RF00183                                            0183
         L     @12,TOMBFCNT(,TOMWAPTR)                             0183
         LTR   @12,@12                                             0183
         BNZ   @RF00183                                            0183
*      DO;                           /* SET CURSOR AT TOP OF SCREEN  */
*        CALL SCRFORMT;              /* PUT CMD,WCC, & FORMAT IN RU  */
         BAL   @14,SCRFORMT                                        0185
*        CALL NEWLINE;               /* PUT LINE ADDRESS IN RU       */
         BAL   @14,NEWLINE                                         0186
*        IKTOBUF(1)=IC;              /* PUT INSERT CURSOR IN RU      */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0187
         MVI   IKTOBUF(@12),X'13'                                  0187
*        TOMBFCNT=TOMBFCNT+1;        /* UPDATE CNT FOR CURS          */
         LA    @12,1                                               0188
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0188
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0188
*        TOMBFPTR=TOMGETMN+TOMBFCNT; /* UPDATE RU BUFFER PTR         */
         AL    @12,TOMGETMN(,TOMWAPTR)                             0189
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0189
*        TOMSTCUR='0'B;              /* TURN OFF REQUEST FOR CURSOR  */
         NI    TOMSTCUR(TOMWAPTR),B'11111011'                      0190
*      END;                          /* END SET CURSOR AT TOP OF SCRN*/
*    ELSE                            /* NO CURSOR REQ OR RU NOT EMPTY*/
*      TOMSTCUR='0'B;                /* OFF, REQ FOR CURS AFTER PAGE */
         B     @RC00183                                            0192
@RF00183 NI    TOMSTCUR(TOMWAPTR),B'11111011'                      0192
*ELSE;                               /* NOT ENOUGH BUFFER SP @ZA19888*/
@RF00170 DS    0H                                                  0194
*RFY (REG2) RSTD;                    /* RESTRICT REGISTER 2          */
@RC00170 DS    0H                                                  0195
*REG2=TOMGETMN;                      /* SET ADDR OF OUTPUT RU IN R2  */
         L     REG2,TOMGETMN(,TOMWAPTR)                            0195
*IF TOMALARM='1'B THEN               /* SOUND AUDIBLE ALARM REQUEST? */
         TM    TOMALARM(TOMWAPTR),B'01000000'                      0196
         BNO   @RF00196                                            0196
*  GEN(OI 1(REG2),X'04')             /* YES, MODIFY WCC FOR ALARM    */
*     REFS(REG2);                    /* REGISTER 2 IS REFERENCED     */
         OI 1(REG2),X'04'
*ELSE;                               /* NO AUDIBLE ALARM REQUESTED   */
@RF00196 DS    0H                                                  0199
*RFY (REG2) UNRSTD;                  /* UNRESTRICT REGISTER 2        */
*IF TOMBRKPG='1'B THEN               /* PAGE AFTER BREAK-IN? @G58AK2Q*/
         TM    TOMBRKPG(TOMWAPTR),B'00000010'                      0200
         BNO   @RF00200                                            0200
*  DO;                               /*                      @G58AK2Q*/
*    IF TVWAPGN='0'B THEN            /* NO SCREEN PAGING?    @ZM21356*/
         TM    TVWAPGN(TVWAPTR),B'01000000'                        0202
         BNZ   @RF00202                                            0202
*      DO;                           /*                      @ZM21356*/
*        IF TOMBFCNT=0 THEN          /* IS CURRENT RU EMPTY? @G58AK2Q*/
         L     @12,TOMBFCNT(,TOMWAPTR)                             0204
         LTR   @12,@12                                             0204
         BNZ   @RF00204                                            0204
*          CALL SCRFORMT;            /* PUT CMD & WCC IN RU  @G58AK2Q*/
         BAL   @14,SCRFORMT                                        0205
*        ELSE;                       /*                      @G58AK2Q*/
@RF00204 DS    0H                                                  0207
*        CALL SCRNPAGE;              /* PUT IS PAGE PROMPT   @G58AK2Q*/
         BAL   @14,SCRNPAGE                                        0207
*      END;                          /*                      @ZM21356*/
*    ELSE;                           /* SCREEN PAGING        @ZM21356*/
@RF00202 DS    0H                                                  0210
*    TOMBPRSP='1'B;                  /* BREAK-IN IS COMPLETE @G58AK2Q*/
*    TOMBRKPG='0'B;                  /* BREAK-IN IS COMPLETE @G58AK2Q*/
         OI    TOMBPRSP(TOMWAPTR),B'00000100'                      0211
         NI    TOMBRKPG(TOMWAPTR),B'11111101'                      0211
*    TVWABKPG='1'B;                  /* BREAK-IN PAGING              */
         OI    TVWABKPG(TVWAPTR),B'10000000'                       0212
*  END;                              /*                      @G58AK2Q*/
*ELSE;                               /*                      @G58AK2Q*/
@RF00200 DS    0H                                                  0215
*IF ((TOMEXBRU='0'B × TVWANOFB='1'B) /* CONTINUE BLDRU?      @G58AK3B*/
*  & TVWAULK='1'B ) ×                /* GLOBAL UNLOCK REQ    @G58AK3B*/
*   (TOMKBULK='1'B)  THEN            /* LOCAL REQ FOR KEYBD UNLOCK?  */
         TM    TOMEXBRU(TOMWAPTR),B'00000010'                      0215
         BZ    @GL00014                                            0215
         TM    TVWANOFB(TVWAPTR),B'00010000'                       0215
         BNO   @GL00013                                            0215
@GL00014 TM    TVWAULK(TVWAPTR),B'00000100'                        0215
         BO    @RT00215                                            0215
@GL00013 TM    TOMKBULK(TOMWAPTR),B'10000000'                      0215
         BNO   @RF00215                                            0215
@RT00215 DS    0H                                                  0216
*  DO;                                                             0216
*  /******************************************************************/
*  /*                                                                */
*  /* MODIFY WCC IN RU TO RESTORE KEYBOARD OPERATION IF KEYBOARD UN- */
*  /* LOCK REQUEST IS OUTSTANDING.                                   */
*  /*                                                                */
*  /******************************************************************/
*  IF TOMBFCNT^=0 × TOMEB='0'B THEN                                0217
         L     @12,TOMBFCNT(,TOMWAPTR)                             0217
         LTR   @12,@12                                             0217
         BNZ   @RT00217                                            0217
         TM    TOMEB(TOMWAPTR),B'01000000'                         0217
         BNZ   @RF00217                                            0217
@RT00217 DS    0H                                                  0218
*    DO;                             /* BEGIN UNLOCK KEYBD PROCESS   */
*      IF TOMBFCNT=0 THEN            /* RU FOR UNLOCK KEYBOARD ONLY? */
         L     @12,TOMBFCNT(,TOMWAPTR)                             0219
         LTR   @12,@12                                             0219
         BNZ   @RF00219                                            0219
*        DO;                         /* YES, RU IS FOR KB UNLOCK ONLY*/
*          IF TVWAFMSC='1'B ×        /* FORMAT SCREEN?       @ZA19498*/
*            (TVWADARC='1'B &        /* HAS TIM RECEIVED DATA?       */
*             TOMLNCNT>1) THEN       /* IS LINE-COUNT GREATER THAN 1?*/
         TM    TVWAFMSC(TVWAPTR),B'10000000'                       0221
         BO    @RT00221                                            0221
         TM    TVWADARC(TVWAPTR),B'00000001'                       0221
         BNO   @RF00221                                            0221
         L     @12,TOMLNCNT(,TOMWAPTR)                             0221
         C     @12,@CF00064                                        0221
         BNH   @RF00221                                            0221
@RT00221 DS    0H                                                  0222
*            DO;                     /* SET SPECIAL CURSOR FOR INPUT */
*              CALL SCRFORMT;        /* CMD,WCC, & FORMAT            */
         BAL   @14,SCRFORMT                                        0223
*              CALL NEWCURS;         /* PUT CURSOR IN RU             */
         BAL   @14,NEWCURS                                         0224
*            END;                    /* END SET SPECIAL CURSOR       */
*          ELSE                      /* BLD HEADER FOR UNLOCK RU     */
*            DO;                     /* BLD HEADER FOR UNLOCK REQ    */
         B     @RC00221                                            0226
@RF00221 DS    0H                                                  0227
*              IKTOBUF(1:2)=WRTWCC;  /* YES, PUT CMD AND WCC         */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0227
         MVC   IKTOBUF(2,@12),@CB01968                             0227
*              TOMBFCNT=TOMBFCNT+2;  /* UPDATE COUNT OF DATA IN RU   */
         LA    @12,2                                               0228
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0228
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0228
*             TOMBFPTR=TOMGETMN+TOMBFCNT;/* UPDATE RU BUFFER POINTER */
         AL    @12,TOMGETMN(,TOMWAPTR)                             0229
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0229
*            END;                    /* END BLD HEADER FOR UNLOCK    */
*          TVWADARC='0'B;            /* OFF, DATA RECEIVED           */
@RC00221 NI    TVWADARC(TVWAPTR),B'11111110'                       0231
*        END;                        /* END RU FOR UNLOCK KEYBD ONLY */
*      ELSE;                         /* RU IS NON-EMPTY              */
@RF00219 DS    0H                                                  0234
*      RFY (REG2) RSTD;              /* RESTRICT REGISTER 2          */
*      REG2=TOMGETMN;                /* SET ADDR OF RU IN REGISTER 2 */
         L     REG2,TOMGETMN(,TOMWAPTR)                            0235
*      GEN(OI 1(REG2),X'02')         /* MODIFY WCC TO RESTORE KEYBD  */
*       REFS(REG2);                  /* REGISTER 2 IS REFERENCED     */
         OI 1(REG2),X'02'
*      RFY (REG2) UNRSTD;            /* UNRESTRICT REGISTER 2        */
*      IF TSBNOBRK='1'B THEN         /* NO BREAK TERMINAL?           */
         L     @12,PSAAOLD                                         0238
         L     @12,ASCBTSB(,@12)                                   0238
         TM    TSBNOBRK(@12),B'00000010'                           0238
         BNO   @RF00238                                            0238
*        TVWATAS='1'B;               /* ONLY TIM SHOULD SCHEDULE TOM */
         OI    TVWATAS(TVWAPTR),B'00100000'                        0239
*      ELSE;                         /* BREAK TERMINAL               */
@RF00238 DS    0H                                                  0241
*      TOMCOLMN=0;                   /* RESET COLUMN COUNT   @ZA1BBBB*/
         SLR   @12,@12                                             0241
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0241
*    END;                            /* END UNLOCK KEYBOARD PROCESS  */
*  ELSE;                             /* KEYBOARD ALREADY RESTORED    */
@RF00217 DS    0H                                                  0244
*  TVWAKBDL='0'B;                    /* SET KEYBD STATE TO UNLOCKED  */
         NI    TVWAKBDL(TVWAPTR),B'11011111'                       0244
*  IF TVWAPGN='0'B THEN              /* IS UNLOCK FOR PAGING?        */
         TM    TVWAPGN(TVWAPTR),B'01000000'                        0245
         BNZ   @RF00245                                            0245
*    TVWAULK='0'B;                   /* NO, TURN OFF USER REQUEST    */
         NI    TVWAULK(TVWAPTR),B'11111011'                        0246
*  ELSE;                             /* KB UNLOCK IS NOT FOR PAGING  */
@RF00245 DS    0H                                                  0248
*  END;                                                            0248
*ELSE;                               /* NO KEYBD UNLOCK REQUESTED    */
@RF00215 DS    0H                                                  0250
*TVWALNCT=TOMLNCNT;                  /* UPDATE LINE-COUNT IN TVWA    */
         L     @12,TOMLNCNT(,TOMWAPTR)                             0250
         STC   @12,TVWALNCT(,TVWAPTR)                              0250
*END BLDRU;                          /* END OF BLDRU                 */
@EL00007 DS    0H                                                  0251
@EF00007 DS    0H                                                  0251
@ER00007 L     @14,@SA00007                                        0251
         BR    @14                                                 0251
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, NEWLINE, WILL BE CALLED BY INTERNAL PROCEDURES   */
*/* TO BUILD LINE ADDRESSES WHILE BUILDING THE OUTPUT RU.            */
*/*                                                                  */
*/********************************************************************/
*                                                                  0252
*NEWLINE: PROCEDURE OPTIONS(SAVE(14));                             0252
*                                                                  0252
NEWLINE  ST    @14,@SA00008                                        0252
*RFY REG2 RSTD;                      /* RESTRICT REGISTER 2  @ZA17886*/
*REG2=1;                             /* SET R2 FOR BUFFER ADDRESS    */
         LA    REG2,1                                              0254
*CALL BUFFADDR;                      /* PUT LINE ADDRESS IN RU       */
         BAL   @14,BUFFADDR                                        0255
*TOMBFCNT=TOMBFCNT+3;                /* SET CNT FOR LINE ADDR IN RU  */
         LA    @12,3                                               0256
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0256
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0256
*IKTOBUF(1)=SBA;                     /* PUT SBA ORDER IN RU          */
         L     @03,TOMBFPTR(,TOMWAPTR)                             0257
         MVI   IKTOBUF(@03),X'11'                                  0257
*IKTOBUF(2:3)=TOMLNADR;              /* PUT LINE ADDR IN OUTPUT RU   */
         MVC   IKTOBUF+1(2,@03),TOMLNADR(TOMWAPTR)                 0258
*TOMBFPTR=TOMGETMN+TOMBFCNT;         /* POINT TO NEXT UNUSED RU BYTE */
         AL    @12,TOMGETMN(,TOMWAPTR)                             0259
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0259
*RFY REG2 UNRSTD;                    /* UNRESTRICT REGISTER 2@ZA17886*/
*END NEWLINE;                        /* END OF NEWLINE               */
@EL00008 DS    0H                                                  0261
@EF00008 DS    0H                                                  0261
@ER00008 L     @14,@SA00008                                        0261
         BR    @14                                                 0261
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BUFFADDR, WILL COMPUTE BUFFER ADDRESSES FOR TOM  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0262
*BUFFADDR: PROCEDURE OPTIONS(SAVE(14));                            0262
*                                                                  0262
BUFFADDR ST    @14,12(,@13)                                        0262
*TOMLNCNT=MIN(TOMLNCNT,TOMLNNO);     /* NOT BEYOND LAST SCREEN LINE  */
         L     @12,TOMLNCNT(,TOMWAPTR)                             0263
         L     @15,TOMLNNO(,TOMWAPTR)                              0263
         CR    @12,@15                                             0263
         BNH   *+6
         LR    @12,@15                                             0263
         ST    @12,TOMLNCNT(,TOMWAPTR)                             0263
*RFY REG2 RSTD;                      /* RESTRICT REGISTER 2  @ZA17886*/
*J=(TOMLNCNT-REG2)*TOMPLSZ+TOMCOLMN; /* OFFSET               @ZA17886*/
         LR    @01,@12                                             0265
         SLR   @01,REG2                                            0265
         M     @00,TOMPLSZ(,TOMWAPTR)                              0265
         AL    @01,TOMCOLMN(,TOMWAPTR)                             0265
         ST    @01,J(,TOMWAPTR)                                    0265
*J=MAX(0,J);                         /* J IS NONZERO         @ZA19877*/
         SLR   @12,@12                                             0266
         CR    @01,@12                                             0266
         BNL   *+6
         LR    @01,@12                                             0266
         ST    @01,J(,TOMWAPTR)                                    0266
*TOMROWAD=J/64;                      /* SET ROW INDEX FOR TRANSLATE  */
         LR    @10,@01                                             0267
         SRDA  @10,32                                              0267
         D     @10,@CF01025                                        0267
         STC   @11,TOMROWAD(,TOMWAPTR)                             0267
*TOMCOLAD=J//64;                     /* SET COL INDEX FOR TRANSLATE  */
         LR    @10,@01                                             0268
         SRDA  @10,32                                              0268
         D     @10,@CF01025                                        0268
         STC   @10,TOMCOLAD(,TOMWAPTR)                             0268
*TR(TOMLNADR,BFADRTAB);              /* SAVE BUFFER ADDRESS          */
         TR    TOMLNADR(2,TOMWAPTR),BFADRTAB                       0269
*RFY REG2 UNRSTD;                    /* UNRESTRICT REGISTER 2        */
*END BUFFADDR;                       /* END OF BUFFADDR              */
@EL00009 DS    0H                                                  0271
@EF00009 DS    0H                                                  0271
@ER00009 L     @14,12(,@13)                                        0271
         BR    @14                                                 0271
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, NEWCURS, WILL SET CURSOR AFTER SUCCESSIVE TGETS. */
*/*                                                                  */
*/********************************************************************/
*                                                                  0272
*NEWCURS: PROCEDURE OPTIONS(SAVE(14));                             0272
*                                                                  0272
NEWCURS  ST    @14,@SA00010                                        0272
*RFY REG2 RSTD;                      /* RESTRICT REGISTER 2  @ZA17886*/
*REG2=2;                             /* SET R2 FOR BUFFER ADDRESS    */
         LA    REG2,2                                              0274
*IF TOMCOLMN=TOMLNSZ THEN            /* NO SPACE ON LINE?    @ZA17040*/
         L     @12,TOMCOLMN(,TOMWAPTR)                             0275
         SLR   @03,@03                                             0275
         IC    @03,TOMLNSZ(,TOMWAPTR)                              0275
         CR    @12,@03                                             0275
         BNE   @RF00275                                            0275
*  DO;                               /* NO SPACE ON LINE     @ZA17040*/
*    TOMCOLMN=0;                     /* RESET COLUMN COUNT   @ZA17040*/
         SLR   @12,@12                                             0277
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0277
*    TOMLNCNT=TOMLNCNT+1;            /* MOVE TO NEXT LINE    @ZA17040*/
         LA    @12,1                                               0278
         AL    @12,TOMLNCNT(,TOMWAPTR)                             0278
         ST    @12,TOMLNCNT(,TOMWAPTR)                             0278
*  END;                              /*                      @ZA17040*/
*ELSE                                /* SPACE LEFT ON LINE   @ZA17040*/
*  TOMCOLMN=TOMLNSZ-1;               /*                      @ZA17040*/
         B     @RC00275                                            0280
@RF00275 SLR   @12,@12                                             0280
         IC    @12,TOMLNSZ(,TOMWAPTR)                              0280
         BCTR  @12,0                                               0280
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0280
*CALL BUFFADDR;                      /* COMPUTE BUFFER ADDRESS       */
@RC00275 BAL   @14,BUFFADDR                                        0281
*TOMBFCNT=TOMBFCNT+6;                /* UPDATE RU DATA COUNT         */
         LA    @12,6                                               0282
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0282
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0282
*IKTOBUF(1)=SBA;                     /* PUT SBA ORDER IN RU          */
         L     @03,TOMBFPTR(,TOMWAPTR)                             0283
         MVI   IKTOBUF(@03),X'11'                                  0283
*IKTOBUF(2:3)=TOMLNADR;              /* PUT BUFFER ADDRESS IN RU     */
         MVC   IKTOBUF+1(2,@03),TOMLNADR(TOMWAPTR)                 0284
*IKTOBUF(4:6)=SFRDATIC;              /* READ ATTRIBUTE AND CURSOR    */
         MVC   IKTOBUF+3(3,@03),@CB01960                           0285
*TOMBFPTR=TOMGETMN+TOMBFCNT;         /* UPDATE RU BUFFER POINTER     */
         AL    @12,TOMGETMN(,TOMWAPTR)                             0286
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0286
*TOMCOLMN=0;                         /* RESET COLUMN COUNT   @ZM20919*/
         SLR   @12,@12                                             0287
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0287
*TVWASCAN='1'B;                      /* REQ ATTRIBUTE TRACKING       */
         OI    TVWASCAN(TVWAPTR),B'10000000'                       0288
*RFY REG2 UNRSTD;                    /* FREE REGISTER 2              */
*END NEWCURS;                        /* END OF NEWCURS               */
@EL00010 DS    0H                                                  0290
@EF00010 DS    0H                                                  0290
@ER00010 L     @14,@SA00010                                        0290
         BR    @14                                                 0290
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, SCRFORMT, FORMATS THE 3270 SCREEN (IF NEEDED)    */
*/* AND PUTS THE PROPER WRITE CMD IN THE OUTPUT RU. THE SCREEN IS    */
*/* FORMATTED BY PUTTING AN ATTRIBUTE CHARACTER IN THE LAST          */
*/* BUFFER LOCATION.                                                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0291
*SCRFORMT: PROCEDURE OPTIONS(SAVE(14));                            0291
*                                                                  0291
SCRFORMT ST    @14,12(,@13)                                        0291
*IF (TOMLNCNT=1)   ×                 /* IS THIS THE TOP LINE OF SCRN?*/
*   (TVWAFMSC='1'B) THEN             /* IS FORMAT OF SCRN REQUESTED? */
         CLC   TOMLNCNT(4,TOMWAPTR),@CF00064                       0292
         BE    @RT00292                                            0292
         TM    TVWAFMSC(TVWAPTR),B'10000000'                       0292
         BNO   @RF00292                                            0292
@RT00292 DS    0H                                                  0293
*  /******************************************************************/
*  /*                                                                */
*  /* THIS DO GROUP FORMATS THE 3270 BUFFER AFTER DETERMINING THE    */
*  /* LAST BUFFER LOCATION.                                          */
*  /*                                                                */
*  /******************************************************************/
*  DO;                               /* SET FORMATTING DATA IN RU    */
*    IF TVWAFMSC='1'B THEN           /* FORMAT SCREEN BIT ON?@ZM17040*/
         TM    TVWAFMSC(TVWAPTR),B'10000000'                       0294
         BNO   @RF00294                                            0294
*      TOMCOLMN=0;                   /* RESET COLUMN COUNT   @ZA17040*/
         SLR   @12,@12                                             0295
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0295
*    ELSE;                           /* FORMAT SCREEN BIT OFF@ZA17040*/
@RF00294 DS    0H                                                  0297
*    TOMBFCNT=7;                     /* COUNT FOR CMD,WCC, & FORMAT  */
         MVC   TOMBFCNT(4,TOMWAPTR),@CF00034                       0297
*    IKTOBUF(3:7)=TOMFMTDA;          /* PUT FORMATTING DATA IN RU    */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0298
         MVC   IKTOBUF+2(5,@12),TOMFMTDA(TOMWAPTR)                 0298
*    TVWAFMSC='0'B;                  /* TURN OFF REQUEST FOR FORMAT  */
         NI    TVWAFMSC(TVWAPTR),B'01111111'                       0299
*  END;                              /* END SETTING OF FORMAT DATA   */
*ELSE                                /* SCREEN FORMATTING NOT NEEDED */
*  TOMBFCNT=2;                       /* SET COUNT FOR CMD AND WCC    */
         B     @RC00292                                            0301
@RF00292 MVC   TOMBFCNT(4,TOMWAPTR),@CF00076                       0301
*IF (TVWAFSM='1'B &                  /* IS FULLSCR MODE IS EFFECT?   */
*    TOMERASE='1'B) ×                /* SCREEN ERASE?        @ZM20919*/
*   (OPBRK='1'B &                    /* BREAK TPUT?          @ZM20919*/
*    TVWABRIN='1'B) THEN             /* BREAK-IN PROCESSING? @ZM20919*/
@RC00292 TM    TVWAFSM(TVWAPTR),B'01000000'                        0302
         BNO   @GL00020                                            0302
         TM    TOMERASE(TOMWAPTR),B'00010000'                      0302
         BO    @RT00302                                            0302
@GL00020 TM    OPBRK(TOMWAPTR),B'01000000'                         0302
         BNO   @RF00302                                            0302
         TM    TVWABRIN(TVWAPTR),B'10000000'                       0302
         BNO   @RF00302                                            0302
@RT00302 DS    0H                                                  0303
*  IKTOBUF(1:2)=EWRTWCCD;            /* YES, USE ERASE/WRITE         */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0303
         MVC   IKTOBUF(2,@12),@CB01938                             0303
*ELSE                                /* NO, CONTINUE CHECK           */
*  IF TOMLNCNT=1 THEN                /* IS THIS THE TOP SCREEN LINE? */
         B     @RC00302                                            0304
@RF00302 CLC   TOMLNCNT(4,TOMWAPTR),@CF00064                       0304
         BNE   @RF00304                                            0304
*    IF (TOMEDSAV='11'B)&            /* WAS LAST TPUT FULLSCRN MODE? */
*       (OPASID='1'B)    THEN        /* CURRENT TPUT A CROSS-MEMORY? */
         TM    TOMEDSAV(TOMWAPTR),B'11000000'                      0305
         BNO   @RF00305                                            0305
         TM    OPASID(TOMWAPTR),B'00001000'                        0305
         BNO   @RF00305                                            0305
*      IKTOBUF(1:2)=WRTWCCDF;        /* USE WRT-ASID FOLLOWS FULSCRN */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0306
         MVC   IKTOBUF(2,@12),@CB01970                             0306
*    ELSE                            /* USE ERASE WRITE COMMAND      */
*      IF TOMCOLMN=0 THEN            /* FIRST POSITION?      @ZA19498*/
         B     @RC00305                                            0307
@RF00305 L     @12,TOMCOLMN(,TOMWAPTR)                             0307
         LTR   @12,@12                                             0307
         BNZ   @RF00307                                            0307
*        IKTOBUF(1:2)=EWRTWCCD;      /* PUT EWRT CMD AND WCC IN RU   */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0308
         MVC   IKTOBUF(2,@12),@CB01938                             0308
*      ELSE                          /* NOT FIRST POSITION   @ZA19498*/
*        IKTOBUF(1:2)=WRTWCCDF;      /* WRITE CMD AND WCC    @ZA19498*/
         B     @RC00307                                            0309
@RF00307 L     @12,TOMBFPTR(,TOMWAPTR)                             0309
         MVC   IKTOBUF(2,@12),@CB01970                             0309
*  ELSE                              /* THIS IS NOT TOP LINE-USE WRT */
*    IKTOBUF(1:2)=WRTWCCDF;          /* PUT WRITE CMD AND WCC IN RU  */
         B     @RC00304                                            0310
@RF00304 L     @12,TOMBFPTR(,TOMWAPTR)                             0310
         MVC   IKTOBUF(2,@12),@CB01970                             0310
*TOMBFPTR=TOMGETMN+TOMBFCNT;         /* UPDATE RU BUFFER POINTER     */
@RC00304 DS    0H                                                  0311
@RC00302 L     @12,TOMGETMN(,TOMWAPTR)                             0311
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0311
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0311
*END SCRFORMT ;                      /* END OF SCRFORMT              */
@EL00011 DS    0H                                                  0312
@EF00011 DS    0H                                                  0312
@ER00011 L     @14,12(,@13)                                        0312
         BR    @14                                                 0312
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, FLSHBACK, WILL BE CALLED TO PUT THE LAST LOGICAL */
*/* INPUT SCREEN LINE(S) INTO THE OUTPUT RU FOR DISPLAY AT THE TOP   */
*/* OF THE SCREEN.                                                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0313
*FLSHBACK: PROCEDURE OPTIONS(SAVE(14));                            0313
*                                                                  0313
FLSHBACK ST    @14,@SA00012                                        0313
*DCL 1 TOPQ BASED(TVWATOPQ),         /* STRUCTURE FOR FLASHBACK DATA */
*     2 TQL1 CHAR(80),               /* FIRST FLASHBACK BUFFER       */
*     2 TQL2 CHAR(80);               /* SECOND FLASHBACK BUFFER      */
*                                                                  0314
*TOMCOLMN=0;                         /* RESET COLUMN COUNT   @ZA17886*/
         SLR   @12,@12                                             0315
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0315
*CALL SCRFORMT;                      /* PUT IN CMD,WCC, AND FORMAT   */
         BAL   @14,SCRFORMT                                        0316
*IF TOMLNCNT>=TOMLNNO THEN           /* IS THIS THE LAST LINE?       */
         L     @12,TOMLNCNT(,TOMWAPTR)                             0317
         C     @12,TOMLNNO(,TOMWAPTR)                              0317
         BL    @RF00317                                            0317
*  DO;                               /*                      @ZA19882*/
*    CALL NEWLINE;                   /* LINE ADDRESS IN RU   @ZA19882*/
         BAL   @14,NEWLINE                                         0319
*    CALL SCRNPAGE;                  /* YES, PUT PAGE PROMPT IN RU   */
         BAL   @14,SCRNPAGE                                        0320
*  END;                              /* END OF PAGING        @ZA19882*/
*ELSE                                /* NO, CONTINUE FLSHBACK PROCESS*/
*  /******************************************************************/
*  /*                                                                */
*  /* SCREEN LINE(S) IS AVAILABLE SO PUT FLASHBACK DATA IN RU.       */
*  /*                                                                */
*  /******************************************************************/
*  DO;                               /* START FLASHBACK PROCESSING   */
         B     @RC00317                                            0322
@RF00317 DS    0H                                                  0323
*    TOMLNCNT=1;                     /* TOP OF SCREEN        @ZA19882*/
         MVC   TOMLNCNT(4,TOMWAPTR),@CF00064                       0323
*    CALL NEWLINE;                   /* LINE ADDRESS IN RU   @ZA19882*/
         BAL   @14,NEWLINE                                         0324
*    IF TVWATQL1^=0 THEN             /* LENG OF 1ST FLSHBACK QUE > 0?*/
         CLI   TVWATQL1(TVWAPTR),0                                 0325
         BE    @RF00325                                            0325
*      /**************************************************************/
*      /*                                                            */
*      /* TAKE DATA FROM FIRST FLASHBACK QUEUE BUFFER.               */
*      /*                                                            */
*      /**************************************************************/
*      DO;                           /* BEGIN FIRST FLASHBACK PROCESS*/
*        TOMBFCNT=TOMBFCNT+          /* UPDATE COUNT OF DATA IN RU BY*/
*          MIN(TVWATQL1,TOMLNSZ)+2;  /* SMALLER OR LINE-SZ & QUE LENG*/
         LA    @12,2                                               0327
         SLR   @15,@15                                             0327
         IC    @15,TVWATQL1(,TVWAPTR)                              0327
         SLR   @14,@14                                             0327
         IC    @14,TOMLNSZ(,TOMWAPTR)                              0327
         LR    @11,@14                                             0327
         CR    @11,@15                                             0327
         BNH   *+6
         LR    @11,@15                                             0327
         AL    @11,TOMBFCNT(,TOMWAPTR)                             0327
         ALR   @11,@12                                             0327
         ST    @11,TOMBFCNT(,TOMWAPTR)                             0327
*        IKTOBUF(1:2)=SFWRTATT;      /* PUT WRITE ATTRIBUTE INTO RU  */
         L     @10,TOMBFPTR(,TOMWAPTR)                             0328
         MVC   IKTOBUF(2,@10),@CB01964                             0328
*                                    /* MOVE FIRST FLSHBACK BUFFER   */
*        IKTOBUF(3:(MIN(TVWATQL1,TOMLNSZ-1)+2))=TQL1; /* MOVE DATA   */
         BCTR  @14,0                                               0329
         CR    @15,@14                                             0329
         BNH   *+6
         LR    @15,@14                                             0329
         BCTR  @15,0                                               0329
         L     @01,TVWATOPQ(,TVWAPTR)                              0329
         EX    @15,@SM02405                                        0329
*        TR(IKTOBUF(3:(MIN(TVWATQL1,TOMLNSZ-1)+2)),EDITTAB);       0330
         SLR   @15,@15                                             0330
         IC    @15,TOMLNSZ(,TOMWAPTR)                              0330
         BCTR  @15,0                                               0330
         SLR   @14,@14                                             0330
         IC    @14,TVWATQL1(,TVWAPTR)                              0330
         CR    @14,@15                                             0330
         BNH   *+6
         LR    @14,@15                                             0330
         BCTR  @14,0                                               0330
         EX    @14,@SB02407                                        0330
*                                    /* TRANSLATE            @ZA19882*/
*        TOMBFPTR=TOMGETMN+TOMBFCNT; /* UPDATE RU BUFFER POINTER     */
         L     @10,TOMGETMN(,TOMWAPTR)                             0331
         LR    @15,@10                                             0331
         ALR   @15,@11                                             0331
         ST    @15,TOMBFPTR(,TOMWAPTR)                             0331
*        TOMBFCNT=TOMBFCNT+2;        /* UPDATE DATA CNT FOR RD ATTRI */
         ALR   @11,@12                                             0332
         ST    @11,TOMBFCNT(,TOMWAPTR)                             0332
*        IKTOBUF(1:2)=SFRDATT;       /* PUT READ ATTRIBUTE INTO RU   */
         MVC   IKTOBUF(2,@15),@CB01962                             0333
*        TOMBFPTR=TOMGETMN+TOMBFCNT; /* UPDATE RU BUFFER POINTER     */
         ALR   @10,@11                                             0334
         ST    @10,TOMBFPTR(,TOMWAPTR)                             0334
*        TVWATQL1=0;                 /* ZERO LENGTH OF FIRST QUEUE   */
         MVI   TVWATQL1(TVWAPTR),X'00'                             0335
*        TOMLNCNT=TOMLNCNT+1;        /* INCREMENT LINE-COUNT BY ONE  */
         LA    @12,1                                               0336
         AL    @12,TOMLNCNT(,TOMWAPTR)                             0336
         ST    @12,TOMLNCNT(,TOMWAPTR)                             0336
*      END;                          /* END FIRST FLASHBACK PROCESS  */
*    ELSE;                                                         0338
@RF00325 DS    0H                                                  0339
*    IF TOMLNCNT>=TOMLNNO THEN       /* IS THIS THE LAST SCRN LINE?  */
         L     @12,TOMLNCNT(,TOMWAPTR)                             0339
         C     @12,TOMLNNO(,TOMWAPTR)                              0339
         BL    @RF00339                                            0339
*      DO;                           /* BEGIN PAGING PROCESSING      */
*        CALL NEWLINE;               /* YES, PUT LINE ADDRESS IN RU  */
         BAL   @14,NEWLINE                                         0341
*        CALL SCRNPAGE;              /* YES, PUT PAGE PROMPT IN RU   */
         BAL   @14,SCRNPAGE                                        0342
*      END;                          /* END PAGING PROCESS           */
*    ELSE                            /* NOT LAST LINE SO CONTINUE    */
*      IF TVWATQL2^=0 THEN           /* LENG OF 2ND FLSHBACK BUFF>0? */
         B     @RC00339                                            0344
@RF00339 CLI   TVWATQL2(TVWAPTR),0                                 0344
         BE    @RF00344                                            0344
*        /************************************************************/
*        /*                                                          */
*        /*      TAKE DATA FROM SECOND FLASHBACK QUEUE BUFFER.       */
*        /*                                                          */
*        /************************************************************/
*        DO;                         /* BEGIN SECOND FLSHBACK PROCESS*/
*          CALL NEWLINE;             /* PUT LINE ADDRESS IN RU       */
         BAL   @14,NEWLINE                                         0346
*          TOMBFCNT=TOMBFCNT +       /* UPDATA COUNT OF DATA IN RU BY*/
*            MIN(TVWATQL2,TOMLNSZ)+2;/* SMALLER OF LINE-SZ & QUE LENG*/
         LA    @12,2                                               0347
         SLR   @15,@15                                             0347
         IC    @15,TVWATQL2(,TVWAPTR)                              0347
         SLR   @14,@14                                             0347
         IC    @14,TOMLNSZ(,TOMWAPTR)                              0347
         LR    @11,@14                                             0347
         CR    @11,@15                                             0347
         BNH   *+6
         LR    @11,@15                                             0347
         AL    @11,TOMBFCNT(,TOMWAPTR)                             0347
         ALR   @11,@12                                             0347
         ST    @11,TOMBFCNT(,TOMWAPTR)                             0347
*          IKTOBUF(1:2)=SFWRTATT;    /* PUT WRITE ATTRIBUTE INTO RU  */
         L     @10,TOMBFPTR(,TOMWAPTR)                             0348
         MVC   IKTOBUF(2,@10),@CB01964                             0348
*                                    /* MOVE SECOND FLASHBACK BUFFER */
*          IKTOBUF(3:(MIN(TVWATQL2,TOMLNSZ-1)+2))=TQL2; /* MOVE DATA */
         BCTR  @14,0                                               0349
         CR    @15,@14                                             0349
         BNH   *+6
         LR    @15,@14                                             0349
         BCTR  @15,0                                               0349
         L     @01,TVWATOPQ(,TVWAPTR)                              0349
         EX    @15,@SM02409                                        0349
*          TR(IKTOBUF(3:(MIN(TVWATQL2,TOMLNSZ-1)+2)),EDITTAB);     0350
         SLR   @15,@15                                             0350
         IC    @15,TOMLNSZ(,TOMWAPTR)                              0350
         BCTR  @15,0                                               0350
         SLR   @14,@14                                             0350
         IC    @14,TVWATQL2(,TVWAPTR)                              0350
         CR    @14,@15                                             0350
         BNH   *+6
         LR    @14,@15                                             0350
         BCTR  @14,0                                               0350
         EX    @14,@SB02407                                        0350
*                                    /* TRANSLATE            @ZA19882*/
*          TOMBFPTR=TOMGETMN+TOMBFCNT;/* UPDATE RU BUFFER POINTER    */
         L     @10,TOMGETMN(,TOMWAPTR)                             0351
         LR    @15,@10                                             0351
         ALR   @15,@11                                             0351
         ST    @15,TOMBFPTR(,TOMWAPTR)                             0351
*          TOMBFCNT=TOMBFCNT+2;      /* UPDATE DATA CNT FOR RD ATTRI */
         ALR   @11,@12                                             0352
         ST    @11,TOMBFCNT(,TOMWAPTR)                             0352
*          IKTOBUF(1:2)=SFRDATT;     /* PUT READ ATTRIBUTE INTO RU   */
         MVC   IKTOBUF(2,@15),@CB01962                             0353
*          TOMBFPTR=TOMGETMN+TOMBFCNT;/* UPDATE RU BUFFER POINTER    */
         ALR   @10,@11                                             0354
         ST    @10,TOMBFPTR(,TOMWAPTR)                             0354
*          TVWATQL2=0;               /* ZERO LENGTH OF 2ND BUFFER    */
         MVI   TVWATQL2(TVWAPTR),X'00'                             0355
*          TOMLNCNT=TOMLNCNT+1;      /* INCREMENT LINE-COUNT BY ONE  */
         LA    @12,1                                               0356
         AL    @12,TOMLNCNT(,TOMWAPTR)                             0356
         ST    @12,TOMLNCNT(,TOMWAPTR)                             0356
*        END;                        /* END SECOND FLASHBACK PROCESS */
*      ELSE;                         /* NO SECOND FLASHBACK NEEDED   */
@RF00344 DS    0H                                                  0359
*  END;                              /* END FLASHBACK PROCESSING     */
@RC00339 DS    0H                                                  0360
*IF TVWATQL1=0 & TVWATQL2=0 THEN     /* IS ALL FLASHBACK PROCESSED?  */
@RC00317 CLI   TVWATQL1(TVWAPTR),0                                 0360
         BNE   @RF00360                                            0360
         CLI   TVWATQL2(TVWAPTR),0                                 0360
         BNE   @RF00360                                            0360
*  TVWABKMG='0'B;                    /* YES, TURN OFF REQUEST BIT    */
         NI    TVWABKMG(TVWAPTR),B'11111011'                       0361
*ELSE;                                                             0362
@RF00360 DS    0H                                                  0363
*END FLSHBACK;                       /* END OF FLSHBACK              */
@EL00012 DS    0H                                                  0363
@EF00012 DS    0H                                                  0363
@ER00012 L     @14,@SA00012                                        0363
         BR    @14                                                 0363
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BLDATTN, BUILDS ATTENTIONS MESSAGES IN THE OUT-  */
*/* PUT RU. THE CHARACTER × IS PUT ON THE NEXT AVAILABLE SCREEN LINE */
*/* FOR EACH ACCEPTED ATTENTION. THE CHARACTER SEQUENCE ×I IS PUT ON */
*/* NEXT SCREEN LINE WHEN IGNORED ATTENTION(S) ARE DETECTED          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0364
*BLDATTN: PROCEDURE OPTIONS(SAVE(14));                             0364
*                                                                  0364
BLDATTN  ST    @14,@SA00013                                        0364
*TOMCOLMN=0;                         /* RESET COLUMN COUNT   @ZA17886*/
         SLR   @12,@12                                             0365
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0365
*IF TOMBFCNT=0 THEN                  /* IS OUTPUT RU EMPTY?          */
         C     @12,TOMBFCNT(,TOMWAPTR)                             0366
         BNE   @RF00366                                            0366
*  CALL SCRFORMT;                    /* YES, PUT IN CMD,WCC & FORMAT */
         BAL   @14,SCRFORMT                                        0367
*ELSE;                                                             0368
@RF00366 DS    0H                                                  0369
*/********************************************************************/
*/*                                                                  */
*/* THIS DO GROUP BUILDS ATTENTION MESSAGES UNTIL THE ATTENTION      */
*/* ACCEPTED COUNT GOES TO ZERO, THE ATTENTION IGNORED INDICATOR IS  */
*/* TURNED OFF, OR SCREEN PAGING IS NEEDED.                          */
*/*                                                                  */
*/********************************************************************/
*DO WHILE (((TVWAATTN>0)×(TVWAAIGN='1'B))&(TOMEXBRU='0'B));        0369
         B     @DE00369                                            0369
@DL00369 DS    0H                                                  0370
*  CALL NEWLINE;                     /* PUT LINE ADDR INTO OUTPUT RU */
         BAL   @14,NEWLINE                                         0370
*  IF TOMLNCNT>=TOMLNNO THEN         /* IS THIS THE LAST SCRN LINE?  */
         L     @12,TOMLNCNT(,TOMWAPTR)                             0371
         C     @12,TOMLNNO(,TOMWAPTR)                              0371
         BL    @RF00371                                            0371
*    CALL SCRNPAGE;                  /* YES, PUT PAGE PROMPT INTO RU */
         BAL   @14,SCRNPAGE                                        0372
*  ELSE                              /* NO, CONTINUE ATTEN PROCESSING*/
*    DO;                             /* BEGIN ATTENTION PROCESSING   */
         B     @RC00371                                            0373
@RF00371 DS    0H                                                  0374
*      IF TVWAATTN>0 THEN            /* IS ACCEPTED ATTN COUNT>0?    */
         CLI   TVWAATTN(TVWAPTR),0                                 0374
         BNH   @RF00374                                            0374
*        /************************************************************/
*        /*                                                          */
*        /* THIS DO GROUP PUTS THE MSG, ×, ON THE CURRENT LINE AND   */
*        /* DECREMENTS THE ACCEPTED ATTENTION COUNT BY ONE           */
*        /*                                                          */
*        /************************************************************/
*        DO;                         /* BEGIN ATTENTION ACCEPTED     */
*          TOMBFCNT=TOMBFCNT+5;      /* SET COUNT FOR ATTENTION MSG  */
         LA    @12,5                                               0376
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0376
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0376
*          IKTOBUF(1:5)=ATTNMSG;     /* PUT ATTENTION MESSAGE IN RU  */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0377
         MVC   IKTOBUF(5,@12),@CB01911                             0377
*          TVWAATTN=TVWAATTN-1;      /* DECREMENT ACCEPTED ATTN CNT  */
         SLR   @12,@12                                             0378
         IC    @12,TVWAATTN(,TVWAPTR)                              0378
         BCTR  @12,0                                               0378
         STC   @12,TVWAATTN(,TVWAPTR)                              0378
*        END;                        /* END ATTENTION ACCEPTED       */
*      ELSE                          /* ATTENTION WAS NOT ACCEPTED   */
*        /************************************************************/
*        /*                                                          */
*        /* THIS DO GROUP PUTS THE MSG, ×I, ON THE CURRENT LINE AND  */
*        /* ATTENTION IGNORED INDICATOR IS ON AND THE ATTENTION AC-  */
*        /* CEPTED COUNT IS ZERO.                                    */
*        /*                                                          */
*        /************************************************************/
*        DO;                         /* BEGIN ATTEN IGNORED PROCESS  */
         B     @RC00374                                            0380
@RF00374 DS    0H                                                  0381
*          TOMBFCNT=TOMBFCNT+6;      /* SET COUNT FOR ATTN MESSAGE   */
         LA    @12,6                                               0381
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0381
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0381
*          IKTOBUF(1:6)=ATTNIGN;     /* PUT ATTN IGNORED MSG IN RU   */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0382
         MVC   IKTOBUF(6,@12),@CB01907                             0382
*          TVWAAIGN='0'B;            /* TURN OFF ATTN INDICATOR      */
         NI    TVWAAIGN(TVWAPTR),B'11011111'                       0383
*          TVWAULK='1'B;             /* REQUEST KEYBOARD UNLOCK      */
         OI    TVWAULK(TVWAPTR),B'00000100'                        0384
*        END;                        /* END ATTENTION IGNORED PROCESS*/
*      TOMBFPTR=TOMGETMN+TOMBFCNT;   /* UPDATE RU BUFFER POINTER     */
@RC00374 L     @12,TOMGETMN(,TOMWAPTR)                             0386
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0386
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0386
*      TOMLNCNT=TOMLNCNT+1;          /* INCREMENT LINE-COUNT BY ONE  */
         LA    @12,1                                               0387
         AL    @12,TOMLNCNT(,TOMWAPTR)                             0387
         ST    @12,TOMLNCNT(,TOMWAPTR)                             0387
*    END;                            /* END ATTENTION PROCESSING     */
*END;                                /* END OF DO LOOP FOR ATTENTION */
@RC00371 DS    0H                                                  0389
@DE00369 CLI   TVWAATTN(TVWAPTR),0                                 0389
         BH    @GL00025                                            0389
         TM    TVWAAIGN(TVWAPTR),B'00100000'                       0389
         BNO   @DC00369                                            0389
@GL00025 TM    TOMEXBRU(TOMWAPTR),B'00000010'                      0389
         BZ    @DL00369                                            0389
@DC00369 DS    0H                                                  0390
*END BLDATTN;                        /* END OF BLDATTN               */
@EL00013 DS    0H                                                  0390
@EF00013 DS    0H                                                  0390
@ER00013 L     @14,@SA00013                                        0390
         BR    @14                                                 0390
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BLDDTA, CONTROLS BUILDING OF USER DATA IN THE    */
*/* OUTPUT RU                                                        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0391
*BLDDTA: PROCEDURE OPTIONS(SAVE(14));                              0391
*                                                                  0391
BLDDTA   ST    @14,@SA00014                                        0391
*TOMOWAIT='0'B;                      /* OFF, INTERNAL TPUT HOLD SW   */
*TOMENDBF='0'B;                      /* OFF, NOT AT END OF RU BUFFER */
*TOMENDSC='0'B;                      /* OFF, NOT AT END OF 3270 SCRN */
*TOMEXDTA='0'B;                      /* OFF, CONTINUE DATA BUILD     */
         NI    TOMOWAIT(TOMWAPTR),B'11010010'                      0395
*IF TSBNOBRK='0'B THEN               /* BREAK TERMINAL?              */
         L     @12,PSAAOLD                                         0396
         L     @12,ASCBTSB(,@12)                                   0396
         TM    TSBNOBRK(@12),B'00000010'                           0396
         BNZ   @RF00396                                            0396
*  IF TVWABRIN='0'B THEN             /* NOT BREAK-IN PROCESSING?     */
         TM    TVWABRIN(TVWAPTR),B'10000000'                       0397
         BNZ   @RF00397                                            0397
*    DO;                             /* SAVE INFORMATION     @ZM20919*/
*      IF TVWAPGN='0'B THEN          /* PAGING?              @ZM20919*/
         TM    TVWAPGN(TVWAPTR),B'01000000'                        0399
         BNZ   @RF00399                                            0399
*        TOMPGNSV='0'B;              /* SAVE PAGING INFO     @ZM20919*/
         NI    TOMPGNSV(TOMWAPTR),B'11101111'                      0400
*      ELSE                          /* ^ PAGING             @ZM20919*/
*        TOMPGNSV='1'B;              /* SAVE ^ PAGING INFO   @ZM20919*/
         B     @RC00399                                            0401
@RF00399 OI    TOMPGNSV(TOMWAPTR),B'00010000'                      0401
*      TVWALNSV=TOMLNCNT;            /* SAVE LINE COUNT              */
@RC00399 L     @12,TOMLNCNT(,TOMWAPTR)                             0402
         STC   @12,TVWALNSV(,TVWAPTR)                              0402
*    END;                            /* INFORMATION SAVED    @ZM20919*/
*  ELSE;                                                           0404
@RF00397 DS    0H                                                  0405
*ELSE;                               /* BREAK-IN PROCESSING          */
@RF00396 DS    0H                                                  0406
*/********************************************************************/
*/*                                                                  */
*/* THIS DO GROUP PUTS DATA IN THE RU UNTIL LOOP CNTL IS SET TO STOP */
*/*                                                                  */
*/********************************************************************/
*DO UNTIL (TOMEXDTA='1'B);                                         0406
@DL00406 DS    0H                                                  0407
*  TOMMVCNT=0;                       /* DATA MOVED THIS PASS IS 0    */
         SLR   @12,@12                                             0407
         ST    @12,TOMMVCNT(,TOMWAPTR)                             0407
*  TOMQDATA=0;                       /* DATA MOVED THIS PASS IS 0    */
         ST    @12,TOMQDATA(,TOMWAPTR)                             0408
*  OPREQ=OBTAINO;                    /* SET REQUEST CODE FOR OBTAIN  */
         MVI   OPREQ(TOMWAPTR),X'02'                               0409
*  REG13=ADDR(SAVEREGS);             /* PUT NEW SAVE AREA ADDR IS R13*/
         LA    REG13,SAVEREGS(,TOMWAPTR)                           0410
*  CALL IKTQMOUT(OPARMS);            /* OBTAIN DATA FROM OUTPUT QUE  */
         LA    @12,OPARMS(,TOMWAPTR)                               0411
         ST    @12,@AL00001                                        0411
         L     @12,FLCCVT                                          0411
         L     @12,CVTTCASP(,@12)                                  0411
         L     @15,TCASOQM(,@12)                                   0411
         LA    @01,@AL00001                                        0411
         BALR  @14,@15                                             0411
*  REG13=ADDR(TOMAUTOD);             /* RESTORE OLD SAVE AREA ADDR   */
         LA    REG13,TOMAUTOD(,TOMWAPTR)                           0412
*  IF OPRC=3 THEN                    /* WAS OUTPUT QUEUE EMPTY?      */
         CLI   OPRC(TOMWAPTR),3                                    0413
         BNE   @RF00413                                            0413
*    /****************************************************************/
*    /*                                                              */
*    /*  YES, NO MORE DATA IS AVAILABLE FROM OUTPUT MESSAGE QUEUE.   */
*    /*                                                              */
*    /****************************************************************/
*    DO;                             /* BEGIN QUEUE-IS-EMPTY PROCESS */
*      TSBIFLSH='0'B;                /* YES, TURN OFF INPUT FLSH BIT */
         L     @12,PSAAOLD                                         0415
         L     @12,ASCBTSB(,@12)                                   0415
         NI    TSBIFLSH(@12),B'11110111'                           0415
*      TOMEXDTA='1'B;                /* SET LOOP CNTL FOR EXIT       */
         OI    TOMEXDTA(TOMWAPTR),B'00000100'                      0416
*    END;                            /* END QUEUE-IS-EMPTY PROCESS   */
*  ELSE                                                    /*@G58AK3B*/
*    /****************************************************************/
*    /*                                                      @G58AK3B*/
*    /* IF PRINT-INHIBIT SITUATION (I.E., TVWANOFB ON) AND   @G58AK3B*/
*    /* MESSAGE IS A CROSS-MEMORY TPUT, RESET MESSAGE QUEUE  @G58AK3B*/
*    /* POINTER AND EXIT FROM LOOP.                          @G58AK3B*/
*    /*                                                      @G58AK3B*/
*    /****************************************************************/
*    IF (TVWANOFB='1'B &             /* NO FLASHBACK?        @G58AK3B*/
*        OPASID='1'B) THEN           /* CROSS-MEMORY TPUT?   @G58AK3B*/
         B     @RC00413                                            0418
@RF00413 TM    TVWANOFB(TVWAPTR),B'00010000'                       0418
         BNO   @RF00418                                            0418
         TM    OPASID(TOMWAPTR),B'00001000'                        0418
         BNO   @RF00418                                            0418
*      DO;                           /* YES                  @G58AK3B*/
*        TOMEXDTA='1'B;              /* SET EXIT LOOP CNTL   @G58AK3B*/
         OI    TOMEXDTA(TOMWAPTR),B'00000100'                      0420
*        OPREQ=UPDATO;               /* RESET MESSAGE Q PTR  @G58AK3B*/
         MVI   OPREQ(TOMWAPTR),X'04'                               0421
*        REG13=ADDR(SAVEREGS);       /* NEW SAVE AREA ADDR   @G58AK3B*/
         LA    REG13,SAVEREGS(,TOMWAPTR)                           0422
*        CALL IKTQMOUT(OPARMS);      /* CALL QUEUE MANAGER   @G58AK3B*/
         LA    @12,OPARMS(,TOMWAPTR)                               0423
         ST    @12,@AL00001                                        0423
         L     @12,FLCCVT                                          0423
         L     @12,CVTTCASP(,@12)                                  0423
         L     @15,TCASOQM(,@12)                                   0423
         LA    @01,@AL00001                                        0423
         BALR  @14,@15                                             0423
*        REG13=ADDR(TOMAUTOD);       /* RESTORE OLD SAVEAREA @G58AK3B*/
         LA    REG13,TOMAUTOD(,TOMWAPTR)                           0424
*        OPASID='0'B;                /* RESET X-MEMORY FLAG  @G58AK3B*/
         NI    OPASID(TOMWAPTR),B'11110111'                        0425
*      END;                                                /*@G58AK3B*/
*   ELSE                             /* OUTPUT QUEUE CONTAINS DATA   */
*    /****************************************************************/
*    /*                                                              */
*    /* OUTPUT QUEUE IS NOT EMPTY SO CONTINUE PROCESSING USER DATA   */
*    /*                                                              */
*    /****************************************************************/
*    DO;                             /* BEGIN USER TPUT PROCESSING   */
         B     @RC00418                                            0427
@RF00418 DS    0H                                                  0428
*    IF TOMEDSAV='00'B THEN          /* LAST TPUT AN EDIT?   @ZA17040*/
         TM    TOMEDSAV(TOMWAPTR),B'11000000'                      0428
         BNZ   @RF00428                                            0428
*      TOMCOLMN=0;                   /* RESET COLUMN COUNT   @ZA17040*/
         SLR   @12,@12                                             0429
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0429
*    ELSE;                           /* LAST TPUT NOT EDIT   @ZA17040*/
@RF00428 DS    0H                                                  0431
*    IF OPBRK='1'B THEN              /* BREAK-IN TPUT?               */
         TM    OPBRK(TOMWAPTR),B'01000000'                         0431
         BNO   @RF00431                                            0431
*      TOMBRKMG='1'B;                /* TURN ON BREAK-MESSAGE SWITCH */
         OI    TOMBRKMG(TOMWAPTR),B'10000000'                      0432
*    ELSE;                           /* NOT A BREAK-IN TPUT          */
@RF00431 DS    0H                                                  0434
*    IF ^(((OPEDIT='11'B) &          /* IS CURRENT TPUT FULLSCRN?    */
*         (TOMBFCNT>0))   ×          /* IS DATA CNT IN RU > 0?       */
*         (TOMCURST='1'B)) THEN      /* IS CURSOR ALREADY SET IN RU  */
         TM    OPEDIT(TOMWAPTR),B'00110000'                        0434
         BNO   @GL00028                                            0434
         L     @12,TOMBFCNT(,TOMWAPTR)                             0434
         LTR   @12,@12                                             0434
         BP    @RF00434                                            0434
@GL00028 TM    TOMCURST(TOMWAPTR),B'00010000'                      0434
         BO    @RF00434                                            0434
*      /**************************************************************/
*      /*                                                            */
*      /* THIS DO GROUP IS EXECUTED EITHER IF THE CURRENT TPUT IS A  */
*      /* FULLSRCN AND THE RU IS EMPTY OR IF CURSOR IS NOT SET IN A  */
*      /* NON-EMPTY RU . ALSO ENOUGH RU SPACE EXIST FOR AT LEAST ONE */
*      /* LINE OF DATA AND PAGING MESSAGE.                           */
*      /*                                                            */
*      /**************************************************************/
*      DO;                           /* CONTINUE PROCESSING USER TPUT*/
*      RFY (REG0,REG15) RSTD;        /* RESTRICT REGISTERS 0 AND 15  */
*      REG15=0;                      /* SET REGISTER 15 TO ZERO      */
         SLR   REG15,REG15                                         0437
*      TOMQBPTR=OPBUFADR;            /* PTR TO BEGINNING OF QUE DATA */
         L     @14,OPBUFADR(,TOMWAPTR)                             0438
         ST    @14,TOMQBPTR(,TOMWAPTR)                             0438
*      IF ADDR(IKTIDSX1)^=0 THEN     /* TEST FOR USER EXIT           */
         L     @14,@CV02201                                        0439
         LTR   @14,@14                                             0439
         BZ    @RF00439                                            0439
*        DO;                         /* SET PARAMETERS FOR USER EXIT */
*          TVWALNCT=TOMLNCNT;        /* SET LINE-CNT FOR USER EXIT   */
         L     @14,TOMLNCNT(,TOMWAPTR)                             0441
         STC   @14,TVWALNCT(,TVWAPTR)                              0441
*          TOMUPRM1=ADDR(OPARMS);    /* SET ADDR OF QUEUE PARAMETERS */
         LA    @14,OPARMS(,TOMWAPTR)                               0442
         ST    @14,TOMUPRM1(,TOMWAPTR)                             0442
*          TOMUPRM2=ADDR(TOMWFLGS);  /* LOAD ADDR OF EDITTING FLAGS  */
         LA    @14,TOMWFLGS(,TOMWAPTR)                             0443
         ST    @14,TOMUPRM2(,TOMWAPTR)                             0443
*          TOMUPRM3=ADDR(TOMBUFSZ);  /* LOAD ADDR OF RU BUFFER SIZE  */
         LA    @14,TOMBUFSZ(,TOMWAPTR)                             0444
         ST    @14,TOMUPRM3(,TOMWAPTR)                             0444
*          TOMUPRM4=ADDR(TOMBFPTR);  /* LOAD ADDR OF RU BUFFER PTR   */
         LA    @14,TOMBFPTR(,TOMWAPTR)                             0445
         ST    @14,TOMUPRM4(,TOMWAPTR)                             0445
*          TOMUPRM5=ADDR(TOMBFCNT);  /* LOAD ADDR FOR DATA CNT IN RU */
         LA    @14,TOMBFCNT(,TOMWAPTR)                             0446
         ST    @14,TOMUPRM5(,TOMWAPTR)                             0446
*          TOMUPRM6=ADDR(TOMQBPTR);  /* ADRR OF POINTER TO USER DATA */
         LA    @14,TOMQBPTR(,TOMWAPTR)                             0447
         ST    @14,TOMUPRM6(,TOMWAPTR)                             0447
*          TOMUPRM7=ADDR(TOMMVCNT);  /* ADDR OF MOVED USER DATA CNT  */
         LA    @14,TOMMVCNT(,TOMWAPTR)                             0448
         ST    @14,TOMUPRM7(,TOMWAPTR)                             0448
*          TOMUPRM8=ADDR(TOMQDATA);  /* ADDR OF MOVED USER DATA CNT  */
         LA    @14,TOMQDATA(,TOMWAPTR)                             0449
         ST    @14,TOMUPRM8(,TOMWAPTR)                             0449
*          REG0=ADDR(TOMUPARM);      /* ADDR OF PARM LIST IN REG(0)  */
         LA    REG0,TOMUPARM(,TOMWAPTR)                            0450
*          CALL IKTIDSX1;            /* CALL USER EXIT               */
         L     @15,@CV02201                                        0451
         BALR  @14,@15                                             0451
*          TOMLNCNT=TVWALNCT;        /* USE LINE-CNT FROM USER EXIT  */
         SLR   @14,@14                                             0452
         IC    @14,TVWALNCT(,TVWAPTR)                              0452
         ST    @14,TOMLNCNT(,TOMWAPTR)                             0452
*        END;                        /* END PARMS SET FOR USER EXIT  */
*      ELSE;                                                       0454
@RF00439 DS    0H                                                  0455
*      IF REG15=0 THEN               /* CHECK RETURN FROM USER EXIT  */
         LTR   REG15,REG15                                         0455
         BNZ   @RF00455                                            0455
*        /************************************************************/
*        /*                                                          */
*        /* USER EXIT NOT CALLED OR NORMAL PROCESSING WAS SPECIFIED  */
*        /*                                                          */
*        /************************************************************/
*        DO;                         /*                              */
*        RFY (REG0,REG15) UNRSTD;    /* UNRESTRICT REGISTERS 0 AND 15*/
*        IF ((TVWAFSM='1'B)   &      /* FULLSCRN-MODE PROCESSING?    */
*            (TOMEDSAV^='11'B)&      /* WAS LAST TPUT NON-FULLSCRN?  */
*            (OPEDIT='11'B))  &      /* IS CURRENT PUT FULLSCRN?     */
*           ((TVWANFSP='0'B)  ×      /* IS FULLSCR-MODE PAGING LEGAL */
*            (TVWAIOTR='0'B))  THEN  /* HAS I/O TRANSACTION OCCURRED?*/
         TM    TVWAFSM(TVWAPTR),B'01000000'                        0458
         BNO   @RF00458                                            0458
         TM    TOMEDSAV(TOMWAPTR),B'11000000'                      0458
         BO    @RF00458                                            0458
         TM    OPEDIT(TOMWAPTR),B'00110000'                        0458
         BNO   @RF00458                                            0458
         TM    TVWANFSP(TVWAPTR),B'00000100'                       0458
         BZ    @RT00458                                            0458
         TM    TVWAIOTR(TVWAPTR),B'01000000'                       0458
         BNZ   @RF00458                                            0458
@RT00458 DS    0H                                                  0459
*          /**********************************************************/
*          /*                                                        */
*          /* A FULLSCRN TPUT FOLLOWS A NON-FULLSCRN TPUT WHILE IN   */
*          /* FULLSCRN MODE AND PAGING IS ALLOWED.                   */
*          /*                                                        */
*          /**********************************************************/
*          DO;                       /* BEGIN FULLSCRN-MODE PAGE     */
*            IF TOMBFCNT=0 THEN      /* IS OUTPUT RU EMPTY?          */
         L     @12,TOMBFCNT(,TOMWAPTR)                             0460
         LTR   @12,@12                                             0460
         BNZ   @RF00460                                            0460
*              CALL SCRFORMT;        /* YES, PUT IN CMD/WCC          */
         BAL   @14,SCRFORMT                                        0461
*            ELSE;                                                 0462
@RF00460 DS    0H                                                  0463
*            TOMEDSAV='11'B;         /* CONSIDER RU AS FULLSCRN-MODE */
         OI    TOMEDSAV(TOMWAPTR),B'11000000'                      0463
*            TOMCOLMN=MAX(0,MIN(TOMCOLMN,TOMLNSZ-7));      /*@ZA19887*/
         SLR   @12,@12                                             0464
         IC    @12,TOMLNSZ(,TOMWAPTR)                              0464
         SL    @12,@CF00034                                        0464
         L     @15,TOMCOLMN(,TOMWAPTR)                             0464
         CR    @15,@12                                             0464
         BNH   *+6
         LR    @15,@12                                             0464
         SLR   @12,@12                                             0464
         CR    @15,@12                                             0464
         BNL   *+6
         LR    @15,@12                                             0464
         ST    @15,TOMCOLMN(,TOMWAPTR)                             0464
*            CALL NEWLINE;           /* PUT LINE ADDRESS IN RU       */
         BAL   @14,NEWLINE                                         0465
*            CALL SCRNPAGE;          /* PAGE PROMPT IN RU            */
         BAL   @14,SCRNPAGE                                        0466
*            TVWAFSW='1'B;           /* FULLSCREEN TPUT WAITING      */
         OI    TVWAFSW(TVWAPTR),B'00010000'                        0467
*          END;                      /* END FULLSCREEN MODE PAGE     */
*        ELSE                        /* NO FULLSCRN-MODE PAGE NEEDED */
*          DO;                                                     0469
         B     @RC00458                                            0469
@RF00458 DS    0H                                                  0470
*            IF TVWAFSM='1'B THEN    /* IS USER IN FULLSCRN-MODE?    */
         TM    TVWAFSM(TVWAPTR),B'01000000'                        0470
         BNO   @RF00470                                            0470
*              DO;                   /*                              */
*                TVWANFSP='0'B;      /* FULLSCRN-PAGING IS ALLOWED   */
         NI    TVWANFSP(TVWAPTR),B'11111011'                       0472
*                IF (TOMEDSAV='11'B)&/* WAS LAST TPUT FULLSCRN-MODE? */
*                   (OPEDIT^='11'B) THEN/* CURRENT TPUT NON-FULLSCR? */
         TM    TOMEDSAV(TOMWAPTR),B'11000000'                      0473
         BNO   @RF00473                                            0473
         TM    OPEDIT(TOMWAPTR),B'00110000'                        0473
         BO    @RF00473                                            0473
*                  /**************************************************/
*                  /*                                                */
*                  /* A NON-FULLSCRN TPUT FOLLOWS A FULLSCRN TPUT    */
*                  /* WHILE IN FULLSCRN MODE.                        */
*                  /*                                                */
*                  /**************************************************/
*                  DO;               /* BEGIN NON-FS FOLLOWS FS TPUT */
*                    TOMLNCNT=1;     /* WRT TO TOP OF SCRN           */
         MVC   TOMLNCNT(4,TOMWAPTR),@CF00064                       0475
*                    TOMALARM='1'B;  /* SOUND AUDIBLE ALARM          */
*                    TOMERASE='1'B;  /* ERASE SCREEN                 */
         OI    TOMALARM(TOMWAPTR),B'01010000'                      0477
*                    TVWAWO='1'B;    /* FULLSCR WRITTEN OVER         */
         OI    TVWAWO(TVWAPTR),B'00100000'                         0478
*                    CALL SCRFORMT;  /* PUT CMD & WCC IN RU          */
         BAL   @14,SCRFORMT                                        0479
*                    TOMEDSAV='00'B; /* CONSIDER RU AS EDIT          */
         NI    TOMEDSAV(TOMWAPTR),B'00111111'                      0480
*                  END;              /* END NON-FS FOLLOWS FS TPUT   */
*                ELSE;                                             0482
@RF00473 DS    0H                                                  0483
*              END;                                                0483
*            ELSE;                                                 0484
@RF00470 DS    0H                                                  0485
*            IF OPEDIT='00'B THEN    /* TEST FOR EDIT-MODE USER DATA */
         TM    OPEDIT(TOMWAPTR),B'00110000'                        0485
         BNZ   @RF00485                                            0485
*              CALL EDIT;            /* YES, USE EDIT-MODE PROCESS'  */
         BAL   @14,EDIT                                            0486
*            ELSE                    /* CONTINUE CHECK OF TPUT TYPE  */
*              IF OPEDIT='11'B THEN  /* TEST FOR FULLSCRN-MODE DATA  */
         B     @RC00485                                            0487
@RF00485 TM    OPEDIT(TOMWAPTR),B'00110000'                        0487
         BNO   @RF00487                                            0487
*                CALL FULSCRN;       /* YES, USE FULSCRN- MODE EDIT  */
         BAL   @14,FULSCRN                                         0488
*              ELSE                  /* CONTINUE CHECK OF TPUT TYPE  */
*                IF (TOMBFCNT=0)   × /* IN OUTPUT RU EMPTY           */
*                   ((QBUF(1)^=ESC)& /* FIRST BYTE AN ESCAPE CHAR ?  */
*                   ((OPBFSZ<3)    × /* IS LENGTH OF TPUT < 3 ?      */
*                    (QBUF(2)^=SBA))) THEN /* IS SBA ORDER IN HEADER?*/
         B     @RC00487                                            0489
@RF00487 L     @12,TOMBFCNT(,TOMWAPTR)                             0489
         LTR   @12,@12                                             0489
         BZ    @RT00489                                            0489
         L     @12,TOMQBPTR(,TOMWAPTR)                             0489
         CLI   QBUF(@12),X'27'                                     0489
         BE    @RF00489                                            0489
         LH    @15,OPBFSZ(,TOMWAPTR)                               0489
         C     @15,@CF00291                                        0489
         BL    @RT00489                                            0489
         CLI   QBUF+1(@12),X'11'                                   0489
         BE    @RF00489                                            0489
@RT00489 DS    0H                                                  0490
*                  /**************************************************/
*                  /*                                                */
*                  /* ASIS & CNTL TPUTS WILL BE COMBINED FOR OUTPUT  */
*                  /* WITH OTHER NON-FULLSCRN TPUTS ONLY IF NON OF   */
*                  /* USER-SPECIFIED HEADER (CMD,WCC,SBA) IS PRESENT.*/
*                  /*                                                */
*                  /**************************************************/
*                  IF OPEDIT='01'B THEN /* TEST FOR ASIS MODE DATA   */
         TM    OPEDIT(TOMWAPTR),B'00010000'                        0490
         BNO   @RF00490                                            0490
         TM    OPEDIT(TOMWAPTR),B'00100000'                        0490
         BNZ   @RF00490                                            0490
*                    CALL ASIS;      /* YES, USE ASIS MODE PROCESS'  */
         BAL   @14,ASIS                                            0491
*                  ELSE              /* CONTINUE CHECK OF TPUT TYPE  */
*                    CALL CNTL;      /* USE CNTL MODE PROCESSING     */
         B     @RC00490                                            0492
@RF00490 BAL   @14,CNTL                                            0492
*                ELSE                /*                      @G58AK2Q*/
*                  TOMBRKPG='0'B;    /* OFF, BREAK-IN PAGING @G58AK2Q*/
         B     @RC00489                                            0493
@RF00489 NI    TOMBRKPG(TOMWAPTR),B'11111101'                      0493
*            IF (OPEDIT^='11'B)&     /* IS TPUT NOT FULLSCRN TPUT?   */
*               (OPASID='0'B)   THEN /* IS TPUT A CROSS-MEMORY TPUT? */
@RC00489 DS    0H                                                  0494
@RC00487 DS    0H                                                  0494
@RC00485 TM    OPEDIT(TOMWAPTR),B'00110000'                        0494
         BO    @RF00494                                            0494
         TM    OPASID(TOMWAPTR),B'00001000'                        0494
         BNZ   @RF00494                                            0494
*              TVWAFLSC='0'B;        /* NO, TURN OFF FULLSCRN SEND   */
         NI    TVWAFLSC(TVWAPTR),B'11110111'                       0495
*            ELSE;                                                 0496
@RF00494 DS    0H                                                  0497
*          END;                                                    0497
*        END;                                                      0498
*      ELSE;                                                       0499
@RF00455 DS    0H                                                  0500
*      END;                                                        0500
*    ELSE;                                                         0501
@RF00434 DS    0H                                                  0502
*      IF TOMMVCNT<OPBFSZ THEN       /* WAS ALL USER DATA MOVED?     */
@RC00434 L     @12,TOMMVCNT(,TOMWAPTR)                             0502
         CH    @12,OPBFSZ(,TOMWAPTR)                               0502
         BNL   @RF00502                                            0502
*        /************************************************************/
*        /*                                                          */
*        /* IF ALL USER DATA NOT PROCESS THIS ENTRY, UPDATE OUTPUT   */
*        /* QUEUE FOR NEXT ENTRY.                                    */
*        /*                                                          */
*        /************************************************************/
*        DO;                         /* NO, UPDATE FOR NEXT ENTRY    */
*          OPBUFADR=OPBUFADR+TOMMVCNT;/* SET PTR TO UNUSED DATA      */
         AL    @12,OPBUFADR(,TOMWAPTR)                             0504
         ST    @12,OPBUFADR(,TOMWAPTR)                             0504
*          OPREQ=UPDATO;             /* SET REQUEST CODE TO UPDATE   */
         MVI   OPREQ(TOMWAPTR),X'04'                               0505
*          REG13=ADDR(SAVEREGS);     /* SET NEW SAVE AREA ADDR IN R13*/
         LA    REG13,SAVEREGS(,TOMWAPTR)                           0506
*          CALL IKTQMOUT(OPARMS);    /* CALL OUTPUT QUEUE MANAGER    */
         LA    @12,OPARMS(,TOMWAPTR)                               0507
         ST    @12,@AL00001                                        0507
         L     @12,FLCCVT                                          0507
         L     @12,CVTTCASP(,@12)                                  0507
         L     @15,TCASOQM(,@12)                                   0507
         LA    @01,@AL00001                                        0507
         BALR  @14,@15                                             0507
*          REG13=ADDR(TOMAUTOD);     /* RESTORE OLD SAVE AREA ADDR   */
         LA    REG13,TOMAUTOD(,TOMWAPTR)                           0508
*          TVWATAS='1'B;             /* SET RESCHEDULE BIT TO ON     */
         OI    TVWATAS(TVWAPTR),B'00100000'                        0509
*          TOMEXDTA='1'B;            /* SET BLD LOOP CNTL FOR EXIT   */
*          TOMEXBRU='1'B;            /* SET RU BLD LOOP CNTL TO STOP */
         OI    TOMEXDTA(TOMWAPTR),B'00000110'                      0511
*        END;                        /* END UPDATA PROCESSING        */
*      ELSE                          /* LOOP CNTL STILL FOR CONTINUE */
*        /************************************************************/
*        /*                                                          */
*        /* IF YES, DATA EDITTING ROUTINE DID NOT SET LOOP CONTROL   */
*        /* TO STOP. SO CHECK TO SEE IF MORE DATA IS ON QUEUE        */
*        /*                                                          */
*        /************************************************************/
*        DO;                         /* BEGIN END-OF-TPUT PROCESSING */
         B     @RC00502                                            0513
@RF00502 DS    0H                                                  0514
*          IF TOMBPREQ='1'B &        /* REQ FOR BRK-IN PAGE? @G58AK2Q*/
*             OPNXBRK='0'B &         /* NEXT TPUT NOT BREAK? @ZM21356*/
*             OPBRK='1'B THEN        /* CURRENT TPUT BRK-IN? @G58AK2Q*/
         TM    TOMBPREQ(TOMWAPTR),B'00001000'                      0514
         BNO   @RF00514                                            0514
         TM    OPNXBRK(TOMWAPTR),B'01000000'                       0514
         BNZ   @RF00514                                            0514
         TM    OPBRK(TOMWAPTR),B'01000000'                         0514
         BNO   @RF00514                                            0514
*            TOMBRKPG='1'B;          /* SET REQ FOR PAGING   @G58AK2Q*/
         OI    TOMBRKPG(TOMWAPTR),B'00000010'                      0515
*          ELSE;                     /*                      @G58AK2Q*/
@RF00514 DS    0H                                                  0517
*          IF OPHOLD='1'B THEN       /* WAS THIS OWAIT DATA?         */
         TM    OPHOLD(TOMWAPTR),B'10000000'                        0517
         BNO   @RF00517                                            0517
*            TOMOWAIT='1'B;          /* YES SET INDICATOR FOR STATUS */
         OI    TOMOWAIT(TOMWAPTR),B'00000001'                      0518
*          ELSE;                                                   0519
@RF00517 DS    0H                                                  0520
*          IF OPRC=2 THEN            /* IS MORE DATA ON OUTPUT QUE?  */
         CLI   OPRC(TOMWAPTR),2                                    0520
         BNE   @RF00520                                            0520
*            DO;                     /* BEGIN OUTPUT QUEUE EMPTY     */
*              TSBIFLSH='0'B;        /* NO, TURN OFF INPUT FLUSH BIT */
         L     @12,PSAAOLD                                         0522
         L     @12,ASCBTSB(,@12)                                   0522
         NI    TSBIFLSH(@12),B'11110111'                           0522
*              TOMEXDTA='1'B;        /* NO, SET LOOP CNTL TO STOP    */
         OI    TOMEXDTA(TOMWAPTR),B'00000100'                      0523
*            END;                    /* END OUTPUT QUEUE EMPTY       */
*          ELSE                      /* AT LEAST ONE TPUT IS ON QUEUE*/
*            IF (OPEDIT='11'B)  ×    /* IS CURRENT TPUT FULLSCREEN?  */
*               (TVWANOFB='1'B &     /* NO FLASH BACK?       @G58AK3B*/
*                OPNXASID='1'B) ×    /* NEXT CROSS MEMORY?   @G58AK3B*/
*               (OPNXEDIT='11'B) THEN/* IS NEXT TPUT FULLSCREEN TPUT?*/
         B     @RC00520                                            0525
@RF00520 TM    OPEDIT(TOMWAPTR),B'00110000'                        0525
         BO    @RT00525                                            0525
         TM    TVWANOFB(TVWAPTR),B'00010000'                       0525
         BNO   @GL00041                                            0525
         TM    OPNXASID(TOMWAPTR),B'00001000'                      0525
         BO    @RT00525                                            0525
@GL00041 TM    OPNXEDIT(TOMWAPTR),B'00110000'                      0525
         BNO   @RF00525                                            0525
@RT00525 DS    0H                                                  0526
*              /******************************************************/
*              /*                                                    */
*              /* IF THE CURRENT RU IS A FULLSCRN TPUT OR THE NEXT   */
*              /* QUEUE ELEMENT IS A FULLSCRN TPUT, THE CURRENT RU   */
*              /* WILL BE SENT & THE NEXT TPUT PROCESSED ON RETURN   */
*              /*                                                    */
*              /******************************************************/
*              DO;                   /* BEGIN FULLSCR FOLLOWS FULLSCR*/
*                TOMEXDTA='1'B;      /* USER DATA BLD IS COMPLETE    */
*                TOMEXBRU='1'B;      /* RU BLD IS COMPETE THIS ENTRY */
         OI    TOMEXDTA(TOMWAPTR),B'00000110'                      0528
*              END;                  /* END FULLSCRN FOLLOWS FULLSCRN*/
*            ELSE;                   /* NOT FULLSCREEN TPUT          */
@RF00525 DS    0H                                                  0531
*        END;                                                      0531
@RC00520 DS    0H                                                  0532
*    END;                                                          0532
@RC00502 DS    0H                                                  0533
*  IF TOMBPREQ='1'B &                /* BREAKIN TPUT BEING PROCESSED?
*                                                            @ZM21402*/
*     TVWADOOQ='0'B THEN             /* NO DATA ON QUEUE?    @ZM21402*/
@RC00418 DS    0H                                                  0533
@RC00413 TM    TOMBPREQ(TOMWAPTR),B'00001000'                      0533
         BNO   @RF00533                                            0533
         TM    TVWADOOQ(TVWAPTR),B'01000000'                       0533
         BNZ   @RF00533                                            0533
*    TOMBRKPG='1'B;                  /* SCREEN PAGE FOR END OF BREAKIN
*                                       MESSAGE              @ZM21402*/
         OI    TOMBRKPG(TOMWAPTR),B'00000010'                      0534
*  ELSE                              /* NOT END OF BREAKIN MESSAGE 0535
*                                                            @ZM21402*/
*    ;                                                             0535
@RF00533 DS    0H                                                  0536
*END;                                                              0536
@DE00406 TM    TOMEXDTA(TOMWAPTR),B'00000100'                      0536
         BNO   @DL00406                                            0536
*END BLDDTA;                         /* END OF BLDDTA                */
@EL00014 DS    0H                                                  0537
@EF00014 DS    0H                                                  0537
@ER00014 L     @14,@SA00014                                        0537
         BR    @14                                                 0537
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, CNTL,  BUILDS CONTROL DATA IN THE OUTPU RU.      */
*/* VALID CONTROL CHARATERS ARE PT, IC, BYP, RES. INVALID DATA IS    */
*/* REMOVE FROM THE OUTPUT DATA                                      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0538
*CNTL: PROCEDURE OPTIONS(SAVE(14));                                0538
*                                                                  0538
CNTL     ST    @14,@SA00015                                        0538
*TOMCOLMN=0;                         /* RESET COLUMN COUNT   @ZA17886*/
         SLR   @12,@12                                             0539
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0539
*CALL CNTLHDRS;                      /* PUT HEADER DATA IN RU        */
         BAL   @14,CNTLHDRS                                        0540
*/********************************************************************/
*/*                                                                  */
*/* THIS DO WHILE LOOP WILL BE EXECUTED AS LONG AS THE CURRENT TPUT  */
*/* HAS NOT BEEN COMPLETELY MOVED AND THERE IS OUTPUT RU SPACE.      */
*/*                                                                  */
*/********************************************************************/
*DO WHILE (TOMMVCNT<OPBFSZ)&(TOMBFCNT<TOMBUFSZ-2);                 0541
         B     @DE00541                                            0541
@DL00541 DS    0H                                                  0542
*  TOMWRKSZ=MIN(OPBFSZ-TOMQDATA,80); /* SET COUNT FOR MOVE   @ZA19885*/
         LH    @12,OPBFSZ(,TOMWAPTR)                               0542
         SL    @12,TOMQDATA(,TOMWAPTR)                             0542
         LA    @15,80                                              0542
         CR    @12,@15                                             0542
         BNH   *+6
         LR    @12,@15                                             0542
         STC   @12,TOMWRKSZ(,TOMWAPTR)                             0542
*  TOMWRKBF(1:TOMWRKSZ)=QBUF;        /* MOVE USER DATA TO WORK AREA  */
         BCTR  @12,0                                               0543
         L     @01,TOMQBPTR(,TOMWAPTR)                             0543
         EX    @12,@SM02416                                        0543
*  TOMEDSAV='10'B;                   /* SAVE MODE OF TPUT    @ZA19885*/
         NI    TOMEDSAV(TOMWAPTR),B'10111111'                      0544
         OI    TOMEDSAV(TOMWAPTR),B'10000000'                      0544
*  /******************************************************************/
*  /*                                                                */
*  /* THIS DO WHILE LOOP WILL SCAN DATA IN WORK AREA FOR VALID CON-  */
*  /* CONTROL CHARACTERS. VALID CHARACTERS ARE MOVED TO OUTPUT RU    */
*  /*                                                                */
*  /******************************************************************/
*  DO I=1 TO TOMWRKSZ WHILE (TOMBFCNT<(TOMBUFSZ-2));               0545
         LA    @12,1                                               0545
         B     @DE00545                                            0545
@DL00545 L     @12,TOMBFCNT(,TOMWAPTR)                             0545
         LA    @15,2                                               0545
         L     @14,TOMBUFSZ(,TOMWAPTR)                             0545
         SLR   @14,@15                                             0545
         CR    @12,@14                                             0545
         BNL   @DC00545                                            0545
*    IF TOMWRKBF(I)=RES THEN         /* IS CURRENT CHAR RESTORE?     */
         L     @01,I(,TOMWAPTR)                                    0546
         ALR   @01,TOMWAPTR                                        0546
         CLI   TOMWRKBF-1(@01),X'14'                               0546
         BNE   @RF00546                                            0546
*      /**************************************************************/
*      /*                                                            */
*      /* THIS DO GROUP PUTS RESTORE ATTRIBUTE IN OUTPUT RU          */
*      /*                                                            */
*      /**************************************************************/
*      DO;                                                         0547
*        TOMBFCNT=TOMBFCNT+2;        /* UPDATE COUNT OF DATA IN RU   */
         ALR   @12,@15                                             0548
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0548
*        IKTOBUF(1:2)=SFWRTATT;      /* PUT RESTORE ATTRIBUTE IN RU  */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0549
         MVC   IKTOBUF(2,@12),@CB01964                             0549
*        TVWANOFB='0'B;              /* RESET NO FLASHBACK   @G58AK3B*/
         NI    TVWANOFB(TVWAPTR),B'11101111'                       0550
*      END;                                                        0551
*    ELSE                            /* CURREN CHARACTER IS NOT RES  */
*      IF TOMWRKBF(I)=BYP THEN       /* IS CURRENT CHARACTER BYPASS? */
         B     @RC00546                                            0552
@RF00546 L     @12,I(,TOMWAPTR)                                    0552
         ALR   @12,TOMWAPTR                                        0552
         CLI   TOMWRKBF-1(@12),X'24'                               0552
         BNE   @RF00552                                            0552
*        /************************************************************/
*        /*                                                          */
*        /* THIS DO GROUP PUTS BYPASS ATTRIBUTE IN OUTPUT RU         */
*        /*                                                          */
*        /************************************************************/
*        DO;                                                       0553
*          TOMBFCNT=TOMBFCNT+3;      /* UPDATE COUNT OF DATA IN RU   */
         LA    @12,3                                               0554
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0554
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0554
*          IKTOBUF(1:2)=SFBYPATT;    /* PUT BYPASS ATTRIBUTE IN RU   */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0555
         MVC   IKTOBUF(2,@12),@CB01958                             0555
*          IKTOBUF(3)=IC;            /* PUT CURSOR AFTER BYP ATTRIB  */
         MVI   IKTOBUF+2(@12),X'13'                                0556
*          TOMCURST='1'B;            /* INDICATE CURSOR IS SET IN RU */
         OI    TOMCURST(TOMWAPTR),B'00010000'                      0557
*          TVWANOFB='1'B;            /* REQUEST HALT OF FLASK BACK   */
         OI    TVWANOFB(TVWAPTR),B'00010000'                       0558
*        END;                                                      0559
*      ELSE                          /* CURRENT CHAR IS NOT BYPASS   */
*        IF TOMWRKBF(I)=IC THEN      /* IS CURRENT CHAR INSERT CURS? */
         B     @RC00552                                            0560
@RF00552 L     @12,I(,TOMWAPTR)                                    0560
         ALR   @12,TOMWAPTR                                        0560
         CLI   TOMWRKBF-1(@12),X'13'                               0560
         BNE   @RF00560                                            0560
*          /**********************************************************/
*          /*                                                        */
*          /* THIS DO GROUP PUTS INSERT CURSOR ORDER IN OUTPUT  RU   */
*          /*                                                        */
*          /**********************************************************/
*          DO;                                                     0561
*            TOMBFCNT=TOMBFCNT+1;    /* UPDATE COUNT OF DATA IN RU   */
         LA    @12,1                                               0562
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0562
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0562
*            IKTOBUF(1)=IC;          /* PUT INSERT CURS ORDER IN RU  */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0563
         MVI   IKTOBUF(@12),X'13'                                  0563
*            TOMCURST='1'B;          /* INDICATE CURSOR IS SET IN RU */
         OI    TOMCURST(TOMWAPTR),B'00010000'                      0564
*          END;                                                    0565
*        ELSE                        /* CURRENT CHAR NOT INSERT CURS */
*          IF TOMWRKBF(I)=PT THEN    /* IS CURRENT CHAR PROGRAM TAB? */
         B     @RC00560                                            0566
@RF00560 L     @12,I(,TOMWAPTR)                                    0566
         ALR   @12,TOMWAPTR                                        0566
         CLI   TOMWRKBF-1(@12),X'05'                               0566
         BNE   @RF00566                                            0566
*            /********************************************************/
*            /*                                                      */
*            /* THIS DO GROUP PUTS PROGRAM TAB ORDER IN OUTPUT RU    */
*            /*                                                      */
*            /********************************************************/
*            DO;                                                   0567
*              TOMBFCNT=TOMBFCNT+1;  /* UPDATE COUNT OF DATA IN RU   */
         LA    @12,1                                               0568
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0568
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0568
*              IKTOBUF(1)=PT;        /* PUT PROGRAM TAB ORDER IN RU  */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0569
         MVI   IKTOBUF(@12),X'05'                                  0569
*            END;                                                  0570
*          ELSE;                     /* NO VALID CONTROL CHAR FOUND  */
@RF00566 DS    0H                                                  0572
*    TOMBFPTR=TOMGETMN+TOMBFCNT;     /* UPDATE PTR TO NEXT RU BYTE   */
@RC00560 DS    0H                                                  0572
@RC00552 DS    0H                                                  0572
@RC00546 L     @12,TOMGETMN(,TOMWAPTR)                             0572
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0572
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0572
*  END;                              /* END FOR INNER DO WHILE LOOP  */
         LA    @12,1                                               0573
         AL    @12,I(,TOMWAPTR)                                    0573
@DE00545 ST    @12,I(,TOMWAPTR)                                    0573
         SLR   @15,@15                                             0573
         IC    @15,TOMWRKSZ(,TOMWAPTR)                             0573
         CR    @12,@15                                             0573
         BNH   @DL00545                                            0573
@DC00545 DS    0H                                                  0574
*  TOMMVCNT=TOMMVCNT+I-1;            /* UPDATE DATA COUNT    @ZA19885*/
         L     @12,TOMMVCNT(,TOMWAPTR)                             0574
         AL    @12,I(,TOMWAPTR)                                    0574
         BCTR  @12,0                                               0574
         ST    @12,TOMMVCNT(,TOMWAPTR)                             0574
*  TOMQDATA=TOMMVCNT;                /* SAVE CNT OF USER DATA MOVED  */
         ST    @12,TOMQDATA(,TOMWAPTR)                             0575
*  TOMQBPTR=OPBUFADR+TOMMVCNT;       /* UPDATE PTR TO NEXT USER BYTE */
         AL    @12,OPBUFADR(,TOMWAPTR)                             0576
         ST    @12,TOMQBPTR(,TOMWAPTR)                             0576
*END;                                /* END FOR OUTTER DO WHILE LOOP */
@DE00541 L     @12,TOMMVCNT(,TOMWAPTR)                             0577
         CH    @12,OPBFSZ(,TOMWAPTR)                               0577
         BNL   @DC00541                                            0577
         L     @12,TOMBUFSZ(,TOMWAPTR)                             0577
         BCTR  @12,0                                               0577
         BCTR  @12,0                                               0577
         C     @12,TOMBFCNT(,TOMWAPTR)                             0577
         BH    @DL00541                                            0577
@DC00541 DS    0H                                                  0578
*END CNTL;                           /* END OF CNTL                  */
@EL00015 DS    0H                                                  0578
@EF00015 DS    0H                                                  0578
@ER00015 L     @14,@SA00015                                        0578
         BR    @14                                                 0578
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, FULSCRN, WILL EDIT USER FULLSCREEN MODE DATA AND */
*/* MOVE THE DATA TO THE OUTPUT RU.                                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0579
*FULSCRN: PROCEDURE OPTIONS(SAVE(14));                             0579
*                                                                  0579
FULSCRN  ST    @14,12(,@13)                                        0579
*TOMCOLMN=0;                         /* RESET COLUMN COUNT   @ZA17886*/
         SLR   @12,@12                                             0580
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0580
*IF  (QBUF(1)=ESC) &                 /* FIRST USER BYTE ESCAPE CHAR? */
*    (TOMBUFSZ<OPBFSZ) THEN          /* IS DATA LARGER THAN RU SIZE? */
         L     @12,TOMQBPTR(,TOMWAPTR)                             0581
         CLI   QBUF(@12),X'27'                                     0581
         BNE   @RF00581                                            0581
         L     @12,TOMBUFSZ(,TOMWAPTR)                             0581
         CH    @12,OPBFSZ(,TOMWAPTR)                               0581
         BNL   @RF00581                                            0581
*  OPBFSZ=TOMBUFSZ;                  /* YES, TRUNCATE DATA TO FIT RU */
         STH   @12,OPBFSZ(,TOMWAPTR)                               0582
*ELSE                                /* CONTINUE CHECK FOR TRUNCATION*/
*  IF (QBUF(1)^=ESC)       &         /* IS 1ST USER BYTE NOT ESCAPE? */
*     (TOMBUFSZ<(OPBFSZ+1)) THEN     /* DATA LARGER THAN RU SIZE?    */
         B     @RC00581                                            0583
@RF00581 L     @12,TOMQBPTR(,TOMWAPTR)                             0583
         CLI   QBUF(@12),X'27'                                     0583
         BE    @RF00583                                            0583
         L     @12,TOMBUFSZ(,TOMWAPTR)                             0583
         LA    @15,1                                               0583
         AH    @15,OPBFSZ(,TOMWAPTR)                               0583
         CR    @12,@15                                             0583
         BNL   @RF00583                                            0583
*    OPBFSZ=TOMBUFSZ-2;              /* YES, TRUNCATE DATA TO FIT RU */
         BCTR  @12,0                                               0584
         BCTR  @12,0                                               0584
         STH   @12,OPBFSZ(,TOMWAPTR)                               0584
*  ELSE;                             /* NO DATA TRUNCATION NEEDED    */
@RF00583 DS    0H                                                  0586
*IF QBUF(1)=ESC THEN                 /* IS FIRST CHARACTER ESCAPE?   */
@RC00581 L     @12,TOMQBPTR(,TOMWAPTR)                             0586
         CLI   QBUF(@12),X'27'                                     0586
         BNE   @RF00586                                            0586
*  /******************************************************************/
*  /*                                                                */
*  /* INCLUDE ESCAPE CHARACTER IS COUNT OF DATA MOVED BUT DO NOT MOVE*/
*  /* ESCAPE CHARACTER TO OUTPUT RU.                                 */
*  /*                                                                */
*  /******************************************************************/
*  DO;                                                             0587
*    TOMMVCNT=1;                     /* COUNT ESCAPE CHAR AS MOVED   */
         LA    @12,1                                               0588
         ST    @12,TOMMVCNT(,TOMWAPTR)                             0588
*    TOMQBPTR=OPBUFADR+1;            /* SET POINTER PASS ESCAPE      */
         AL    @12,OPBUFADR(,TOMWAPTR)                             0589
         ST    @12,TOMQBPTR(,TOMWAPTR)                             0589
*    OPBFSZ=OPBFSZ-1;                /* DECREMENT MSG SIZE   @ZA19889*/
         LH    @12,OPBFSZ(,TOMWAPTR)                               0590
         BCTR  @12,0                                               0590
         STH   @12,OPBFSZ(,TOMWAPTR)                               0590
*  END;                                                            0591
*ELSE                                /* ESCAPE CHARACTER NOT PRESENT */
*  /******************************************************************/
*  /*                                                                */
*  /* ESC NOT PRESENT. PUT DEFAULT WRITE COMMAND IN OUTPUT RU.       */
*  /*                                                                */
*  /******************************************************************/
*  DO;                                                             0592
         B     @RC00586                                            0592
@RF00586 DS    0H                                                  0593
*    TOMBFCNT=1;                     /* SET COUNT FOR MOVE INTO RU   */
         LA    @12,1                                               0593
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0593
*    IKTOBUF(1)=WRTCMD;              /* PUT WRITE CMD IN OUTPUT RU   */
         L     @01,TOMBFPTR(,TOMWAPTR)                             0594
         MVI   IKTOBUF(@01),X'F1'                                  0594
*    TOMBFPTR=TOMGETMN+TOMBFCNT;     /* UPPATE RU BUFFER PTR         */
         AL    @12,TOMGETMN(,TOMWAPTR)                             0595
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0595
*  END;                                                            0596
*/********************************************************************/
*/*                                                                  */
*/*           MOVE AND EDIT FULLSCREEN MODE DATA                     */
*/*                                                                  */
*/********************************************************************/
*RFY (REG1,REG2) RSTD;               /* R1 & R2 RSTD FOR TRT @ZA16238*/
@RC00586 DS    0H                                                  0598
*REG2=0;                             /* INIT FOR TRT USE     @ZA16238*/
         SLR   REG2,REG2                                           0598
*DO WHILE (TOMMVCNT<OPBFSZ);         /* CONTINUE UNTIL END OF DATA   */
         B     @DE00599                                            0599
@DL00599 DS    0H                                                  0600
*  TOMMVCNT=                         /* INCREMENT FOR NEXT MOVE      */
*      MIN(OPBFSZ,(TOMQDATA+256));                                 0600
         L     @12,TOMQDATA(,TOMWAPTR)                             0600
         LA    @03,256                                             0600
         ALR   @03,@12                                             0600
         LH    @00,OPBFSZ(,TOMWAPTR)                               0600
         CR    @00,@03                                             0600
         BNH   *+6
         LR    @00,@03                                             0600
         ST    @00,TOMMVCNT(,TOMWAPTR)                             0600
*  TOMBFCNT=TOMBFCNT                 /* MOVE 256 BYTES OR LESS       */
*          +(TOMMVCNT-TOMQDATA);                                   0601
         SLR   @00,@12                                             0601
         L     @12,TOMBFCNT(,TOMWAPTR)                             0601
         ALR   @12,@00                                             0601
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0601
*  IKTOBUF(1:(TOMMVCNT-TOMQDATA))=   /* MOVE USER DATA TO OUTPUT RU  */
*         QBUF;                                                    0602
         L     @12,TOMBFPTR(,TOMWAPTR)                             0602
         BCTR  @00,0                                               0602
         L     @03,TOMQBPTR(,TOMWAPTR)                             0602
         LR    @15,@00                                             0602
         EX    @15,@SM02418                                        0602
*  TR(IKTOBUF(1:(TOMMVCNT-TOMQDATA)),FLSCRTAB); /* EDIT OUTPUT RU    */
         L     @03,TOMMVCNT(,TOMWAPTR)                             0603
         SL    @03,TOMQDATA(,TOMWAPTR)                             0603
         BCTR  @03,0                                               0603
         EX    @03,@SB02420                                        0603
*  IF REG2=0 THEN                    /* HAS IC BEEN FOUND?   @ZA16238*/
         LTR   REG2,REG2                                           0604
         BNZ   @RF00604                                            0604
*    TRT(IKTOBUF(1:(TOMMVCNT-TOMQDATA)),ICTAB); /* FIND IC   @ZA16238*/
         L     @03,TOMBFPTR(,TOMWAPTR)                             0605
         L     @12,TOMMVCNT(,TOMWAPTR)                             0605
         SL    @12,TOMQDATA(,TOMWAPTR)                             0605
         BCTR  @12,0                                               0605
         EX    @12,@SB02422                                        0605
*  ELSE;                             /* YES, SKIP LOOKING    @ZA16238*/
@RF00604 DS    0H                                                  0607
*  TOMBFPTR=TOMGETMN+TOMBFCNT;       /* UPDATE RU BUFFER PTR         */
         L     @12,TOMGETMN(,TOMWAPTR)                             0607
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0607
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0607
*  TOMQBPTR=TOMQBPTR+TOMMVCNT-TOMQDATA;                     /*ZA17886*/
         L     @12,TOMMVCNT(,TOMWAPTR)                             0608
         L     @03,TOMQBPTR(,TOMWAPTR)                             0608
         ALR   @03,@12                                             0608
         SL    @03,TOMQDATA(,TOMWAPTR)                             0608
         ST    @03,TOMQBPTR(,TOMWAPTR)                             0608
*  TOMQDATA=TOMMVCNT;                /* SAVE COUNT OF DATA MOVED     */
         ST    @12,TOMQDATA(,TOMWAPTR)                             0609
*END;                                                              0610
@DE00599 L     @12,TOMMVCNT(,TOMWAPTR)                             0610
         CH    @12,OPBFSZ(,TOMWAPTR)                               0610
         BL    @DL00599                                            0610
*IF REG2=0 THEN                      /* NO IC WAS FOUND      @ZA16238*/
         LTR   REG2,REG2                                           0611
         BNZ   @RF00611                                            0611
*  DO;                                                             0612
*    RFY IKTOBUF BASED(TOMGETMN);    /* SET ADDR TO BEGINNING OF RU  */
*    IF IKTOBUF(1)=EAU THEN;         /* DON'T DEFAULT IC - EAU CMD!  */
         L     @12,TOMGETMN(,TOMWAPTR)                             0614
         CLI   IKTOBUF(@12),X'6F'                                  0614
         BE    @RT00614                                            0614
*    ELSE                                                          0616
*       DO;                                                /*@ZA16238*/
*          TOMBFCNT=TOMBFCNT+1;      /* UPDATE RU DATA CNT FOR CURS  */
         LA    @12,1                                               0617
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0617
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0617
*          RFY IKTOBUF BASED(TOMBFPTR); /* RESTORE ORIGINAL RU PTR   */
*          IKTOBUF(1)=IC;            /* PUT IC AT END OF RU  @ZA16238*/
         L     @12,TOMBFPTR(,TOMWAPTR)                             0619
         MVI   IKTOBUF(@12),X'13'                                  0619
*       END;                                               /*@ZA16238*/
*  END;                                                            0621
*ELSE;                                                     /*@ZA16238*/
@RF00611 DS    0H                                                  0623
*RFY (REG1,REG2) UNRSTD;             /* FREE REG1 AND REG2   @ZA16238*/
@RC00611 DS    0H                                                  0624
*TOMCURST='1'B;                      /* CURSOR IS SET IN RU          */
         OI    TOMCURST(TOMWAPTR),B'00010000'                      0624
*TVWAFLSC='1'B;                      /* NEXT SEND IS FULLSCREEN DATA */
         OI    TVWAFLSC(TVWAPTR),B'00001000'                       0625
*TOMTRSBA='1'B;                      /* NO SBA TRACKING              */
         OI    TOMTRSBA(TOMWAPTR),B'00000001'                      0626
*TOMEDSAV='11'B;                     /* SAVE MODE OF TPUT DATA       */
         OI    TOMEDSAV(TOMWAPTR),B'11000000'                      0627
*IF TVWAFSM='0'B THEN                /* FULLSCR MODE OFF?            */
         TM    TVWAFSM(TVWAPTR),B'01000000'                        0628
         BNZ   @RF00628                                            0628
*  TOMLNCNT=2;                       /* YES, SET LINE CNT FOR I/O    */
         MVC   TOMLNCNT(4,TOMWAPTR),@CF00076                       0629
*ELSE;                               /* FULLSCREEN MODE              */
@RF00628 DS    0H                                                  0631
*END FULSCRN;                        /* END OF FULSCRN               */
@EL00016 DS    0H                                                  0631
@EF00016 DS    0H                                                  0631
@ER00016 L     @14,12(,@13)                                        0631
         BR    @14                                                 0631
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, ASIS, WILL EDIT ASIS MODE  USER DATA. CONTROL    */
*/* HEADER INFORMATION (CMD,WCCSBA@@,SFATTRIB) WILL BE WILL BE VALID */
*/* IN ANY COMBINATION(NO REORDERING). MISSING CONTROL INFO  WILL BE */
*/* DEFAULTED. LINE COUNTING WILL BE IN EFFECT.                      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0632
*ASIS: PROCEDURE OPTIONS(SAVE(14));                                0632
*                                                                  0632
ASIS     ST    @14,@SA00017                                        0632
*DCL TEMPMVCT FIXED(31) DEF(J);      /* TEMPORARY WORK VARIABLE      */
*                                                                  0633
*IF (TOMBUFSZ-TOMBFCNT) <                                  /*@ZA19888*/
*   (MIN(OPBFSZ-TOMMVCNT,TOMLNSZ))+15 THEN                 /*@ZA19888*/
         L     @12,TOMBUFSZ(,TOMWAPTR)                             0634
         SL    @12,TOMBFCNT(,TOMWAPTR)                             0634
         LH    @15,OPBFSZ(,TOMWAPTR)                               0634
         SL    @15,TOMMVCNT(,TOMWAPTR)                             0634
         SLR   @14,@14                                             0634
         IC    @14,TOMLNSZ(,TOMWAPTR)                              0634
         CR    @15,@14                                             0634
         BNH   *+6
         LR    @15,@14                                             0634
         AL    @15,@CF00113                                        0634
         CR    @12,@15                                             0634
         BNL   @RF00634                                            0634
*  TOMENDBF='1'B;                    /* END OF BUFFER        @ZA19888*/
         OI    TOMENDBF(TOMWAPTR),B'00100000'                      0635
*ELSE                                /* ENOUGH BUFFER SPACE  @ZA19888*/
*IF TOMLNCNT>=TOMLNNO THEN           /* IS THIS THE LAST SCRN LINE?  */
         B     @RC00634                                            0636
@RF00634 L     @12,TOMLNCNT(,TOMWAPTR)                             0636
         C     @12,TOMLNNO(,TOMWAPTR)                              0636
         BL    @RF00636                                            0636
*  /******************************************************************/
*  /*                                                                */
*  /*    BOTTOM OF SCREEN HAS BEEN REACHED SO PAGE AND CONTINUE      */
*  /*                                                                */
*  /******************************************************************/
*  DO;                                                             0637
*    IF TOMBFCNT=0 THEN              /* IS OUTPUT RU EMPTY?          */
         L     @12,TOMBFCNT(,TOMWAPTR)                             0638
         LTR   @12,@12                                             0638
         BNZ   @RF00638                                            0638
*      CALL SCRFORMT;                /* YES, PUT IN CMD AND WCC      */
         BAL   @14,SCRFORMT                                        0639
*    ELSE;                                                         0640
@RF00638 DS    0H                                                  0641
*    TOMCOLMN=MAX(0,MIN(TOMCOLMN,TOMLNSZ-7)); /*RESET COLUMN @ZA19887*/
         SLR   @12,@12                                             0641
         IC    @12,TOMLNSZ(,TOMWAPTR)                              0641
         SL    @12,@CF00034                                        0641
         L     @15,TOMCOLMN(,TOMWAPTR)                             0641
         CR    @15,@12                                             0641
         BNH   *+6
         LR    @15,@12                                             0641
         SLR   @12,@12                                             0641
         CR    @15,@12                                             0641
         BNL   *+6
         LR    @15,@12                                             0641
         ST    @15,TOMCOLMN(,TOMWAPTR)                             0641
*    CALL NEWLINE;                   /* PUT LINE ADDR IN OUTPUT RU   */
         BAL   @14,NEWLINE                                         0642
*    CALL SCRNPAGE;                  /* PUT PAGE PROMPT DATA IN RU   */
         BAL   @14,SCRNPAGE                                        0643
*  END;                                                            0644
*ELSE                                /* NO SCREEN PAGING NEEDED      */
*DO;                                                               0645
         B     @RC00636                                            0645
@RF00636 DS    0H                                                  0646
*  TOMEDSAV='01'B;                   /* ASIS TPUT            @ZA17886*/
         NI    TOMEDSAV(TOMWAPTR),B'01111111'                      0646
         OI    TOMEDSAV(TOMWAPTR),B'01000000'                      0646
*  CALL CNTLHDRS;                    /* PUT CONTROL HEADER IN RU     */
         BAL   @14,CNTLHDRS                                        0647
*  TOMCOLMN=TOMCOLMN+1;              /* UP COLUMN COUNT      @ZA17886*/
         LA    @12,1                                               0648
         L     @15,TOMCOLMN(,TOMWAPTR)                             0648
         ALR   @15,@12                                             0648
         ST    @15,TOMCOLMN(,TOMWAPTR)                             0648
*  I=1;                                                            0649
         ST    @12,I(,TOMWAPTR)                                    0649
*  /******************************************************************/
*  /*                                                                */
*  /* THIS DO GROUP WILL BUILD LINES OF ASIS MODE DATA UNTIL THE DATA*/
*  /* COUNT IS ZERO,SCREEN PAGING IS NEEDED, OR RU BUFFER IS USED UP.*/
*  /*                                                                */
*  /******************************************************************/
*  DO WHILE (TOMMVCNT<OPBFSZ)&(TOMENDSC='0'B)&(TOMENDBF='0'B);     0650
         B     @DE00650                                            0650
@DL00650 DS    0H                                                  0651
*    TOMNWLSZ=TOMQDATA+MIN(TOMLNSZ-TOMCOLMN,OPBFSZ-TOMQDATA,       0651
*             TOMBUFSZ-TOMBFCNT);                           /*ZA17886*/
         L     @12,TOMQDATA(,TOMWAPTR)                             0651
         SLR   @15,@15                                             0651
         IC    @15,TOMLNSZ(,TOMWAPTR)                              0651
         LR    @14,@15                                             0651
         SL    @14,TOMCOLMN(,TOMWAPTR)                             0651
         LH    @11,OPBFSZ(,TOMWAPTR)                               0651
         SLR   @11,@12                                             0651
         CR    @14,@11                                             0651
         BNH   *+6
         LR    @14,@11                                             0651
         L     @11,TOMBUFSZ(,TOMWAPTR)                             0651
         SL    @11,TOMBFCNT(,TOMWAPTR)                             0651
         CR    @14,@11                                             0651
         BNH   *+6
         LR    @14,@11                                             0651
         ALR   @12,@14                                             0651
         ST    @12,TOMNWLSZ(,TOMWAPTR)                             0651
*    IF (I=1)             &          /* FIRST PASS THROUGH LOOP?     */
*       (TOMNWLSZ=TOMLNSZ) THEN      /* CURRENT LINE-SZ=LOGICAL SIZE */
         LA    @14,1                                               0652
         C     @14,I(,TOMWAPTR)                                    0652
         BNE   @RF00652                                            0652
         CR    @12,@15                                             0652
         BNE   @RF00652                                            0652
*      TOMNWLSZ=MAX(TOMNWLSZ-1,1);   /* SPACE FOR ATTRIB ON 1ST PASS */
         BCTR  @12,0                                               0653
         CR    @12,@14                                             0653
         BNL   *+6
         LR    @12,@14                                             0653
         ST    @12,TOMNWLSZ(,TOMWAPTR)                             0653
*    ELSE;                                                         0654
@RF00652 DS    0H                                                  0655
*    I=MAX(TOMQDATA,1);              /* MAX OF TOMQDATA & 1  @ZA17031*/
         L     @12,TOMQDATA(,TOMWAPTR)                             0655
         LA    @15,1                                               0655
         CR    @12,@15                                             0655
         BNL   *+6
         LR    @12,@15                                             0655
         ST    @12,I(,TOMWAPTR)                                    0655
*    /****************************************************************/
*    /*                                                              */
*    /* DETERMINE INDEX INTO UNPROCESSED USER'S DATA TO GET A LINE-  */
*    /* SIZE OF PRINTABLE DATA. STORE THIS INDEX IN NWLNSZ.          */
*    /*                                                              */
*    /****************************************************************/
*    TOMXCNT=0;                      /* INITIALIZE TOMXCNT   @ZA17886*/
         SLR   @12,@12                                             0656
         ST    @12,TOMXCNT(,TOMWAPTR)                              0656
*    DO WHILE((I<TOMNWLSZ) &                                       0657
*             (TOMNWLSZ<=OPBFSZ) &                                 0657
*             ((TOMBUFSZ-(TOMBFCNT+TOMNWLSZ))>0));                 0657
         B     @DE00657                                            0657
@DL00657 DS    0H                                                  0658
*      IF QBUF(I)=PT ×               /* CHECK FOR PROGRAM TAB (PT)   */
*         QBUF(I)=EUA×               /* ERASE UNPROTECTED T0 @ (EUA) */
*         QBUF(I)=RA  THEN           /* REPEAT TO ADDRESS (RA)?      */
         L     @12,I(,TOMWAPTR)                                    0658
         L     @15,TOMQBPTR(,TOMWAPTR)                             0658
         ALR   @12,@15                                             0658
         BCTR  @12,0                                               0658
         CLI   QBUF(@12),X'05'                                     0658
         BE    @RT00658                                            0658
         L     @12,I(,TOMWAPTR)                                    0658
         ALR   @12,@15                                             0658
         BCTR  @12,0                                               0658
         CLI   QBUF(@12),X'12'                                     0658
         BE    @RT00658                                            0658
         L     @12,I(,TOMWAPTR)                                    0658
         ALR   @15,@12                                             0658
         BCTR  @15,0                                               0658
         CLI   QBUF(@15),X'3C'                                     0658
         BNE   @RF00658                                            0658
@RT00658 DS    0H                                                  0659
*        DO;                         /*                      @ZA19884*/
*          TOMXCNT=TOMXCNT+1;        /*                      @ZA19884*/
         LA    @12,1                                               0660
         L     @15,TOMXCNT(,TOMWAPTR)                              0660
         ALR   @15,@12                                             0660
         ST    @15,TOMXCNT(,TOMWAPTR)                              0660
*          TOMNWLSZ=TOMNWLSZ+1;      /* INCREMENT PASS NONPRINT CHAR */
         AL    @12,TOMNWLSZ(,TOMWAPTR)                             0661
         ST    @12,TOMNWLSZ(,TOMWAPTR)                             0661
*        END;                        /*                      @ZA19884*/
*      ELSE                          /* CONTINUE CHK FOR BUFFER CNTLS*/
*        IF QBUF(I)=SBA THEN         /* SET BUFFER ADDRESS (SBA)?    */
         B     @RC00658                                            0663
@RF00658 L     @12,I(,TOMWAPTR)                                    0663
         L     @01,TOMQBPTR(,TOMWAPTR)                             0663
         ALR   @01,@12                                             0663
         BCTR  @01,0                                               0663
         CLI   QBUF(@01),X'11'                                     0663
         BNE   @RF00663                                            0663
*          DO;                                                     0664
*            TOMNWLSZ=TOMNWLSZ+3;    /* SET COUNT FOR SBA ORDER      */
         LA    @15,3                                               0665
         L     @14,TOMNWLSZ(,TOMWAPTR)                             0665
         ALR   @14,@15                                             0665
         ST    @14,TOMNWLSZ(,TOMWAPTR)                             0665
*            I=I+2;                  /*                              */
         AL    @12,@CF00076                                        0666
         ST    @12,I(,TOMWAPTR)                                    0666
*            TOMXCNT=TOMXCNT+3;      /* INCREMENT TOMXCNT    @ZA17886*/
         AL    @15,TOMXCNT(,TOMWAPTR)                              0667
         ST    @15,TOMXCNT(,TOMWAPTR)                              0667
*          END;                                                    0668
*        ELSE;                                                     0669
@RF00663 DS    0H                                                  0670
*      I=I+1;                        /* SET INDEX TO SKIP NON-PRINT  */
@RC00658 LA    @12,1                                               0670
         AL    @12,I(,TOMWAPTR)                                    0670
         ST    @12,I(,TOMWAPTR)                                    0670
*    END;                            /* END DO WHILE LOOP            */
@DE00657 L     @12,TOMNWLSZ(,TOMWAPTR)                             0671
         C     @12,I(,TOMWAPTR)                                    0671
         BNH   @DC00657                                            0671
         CH    @12,OPBFSZ(,TOMWAPTR)                               0671
         BH    @DC00657                                            0671
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0671
         LCR   @12,@12                                             0671
         AL    @12,TOMBUFSZ(,TOMWAPTR)                             0671
         LTR   @12,@12                                             0671
         BP    @DL00657                                            0671
@DC00657 DS    0H                                                  0672
*    /****************************************************************/
*    /*                                                              */
*    /* THIS DO GROUP WILL MOVE & EDIT ONE LINESIZE OR LESS OF PRINT-*/
*    /* ABLE USER S DATA-LESS IF DATA OR RU BUFFER SPACE RUNS OUT    */
*    /*                                                              */
*    /****************************************************************/
*    DO WHILE ((TOMNWLSZ-TOMQDATA)>0)&(((TOMBUFSZ-1)-TOMBFCNT)>0); 0672
         B     @DE00672                                            0672
@DL00672 DS    0H                                                  0673
*      TEMPMVCT=                                                   0673
*       MIN(TOMNWLSZ,(TOMQDATA+80)); /* MOVE MAXIMUM OF 80 CHARACTER */
         L     @12,TOMQDATA(,TOMWAPTR)                             0673
         LA    @15,80                                              0673
         ALR   @15,@12                                             0673
         L     @14,TOMNWLSZ(,TOMWAPTR)                             0673
         CR    @14,@15                                             0673
         BNH   *+6
         LR    @14,@15                                             0673
         ST    @14,TEMPMVCT(,TOMWAPTR)                             0673
*      TOMWRKSZ=MIN((TEMPMVCT-TOMQDATA),((TOMBUFSZ-1)-TOMBFCNT));  0674
         SLR   @14,@12                                             0674
         L     @12,TOMBUFSZ(,TOMWAPTR)                             0674
         BCTR  @12,0                                               0674
         L     @15,TOMBFCNT(,TOMWAPTR)                             0674
         SLR   @12,@15                                             0674
         CR    @14,@12                                             0674
         BNH   *+6
         LR    @14,@12                                             0674
         STC   @14,TOMWRKSZ(,TOMWAPTR)                             0674
*      TOMMVCNT=TOMMVCNT+TOMWRKSZ;   /* SET COUNT FOR MOVE OF DATA   */
         L     @12,TOMMVCNT(,TOMWAPTR)                             0675
         ALR   @12,@14                                             0675
         ST    @12,TOMMVCNT(,TOMWAPTR)                             0675
*      TOMWRKBF(1:TOMWRKSZ)=QBUF;    /* MOVE USER DATA TO WORK AREA  */
         LR    @11,@14                                             0676
         BCTR  @11,0                                               0676
         L     @01,TOMQBPTR(,TOMWAPTR)                             0676
         EX    @11,@SM02416                                        0676
*      TR(TOMWRKBF(1:TOMWRKSZ),ASISTAB);/* REPLACE INVALID CHARACTERS*/
         SLR   @10,@10                                             0677
         IC    @10,TOMWRKSZ(,TOMWAPTR)                             0677
         BCTR  @10,0                                               0677
         EX    @10,@SB02425                                        0677
*      TOMBFCNT=TOMBFCNT+TOMWRKSZ;   /* COUNT FOR MOVE TO RU BUFFER  */
         ALR   @15,@14                                             0678
         ST    @15,TOMBFCNT(,TOMWAPTR)                             0678
*      IKTOBUF(1:TOMWRKSZ)=TOMWRKBF; /* MOVE USER DATA TO RU BUFFER  */
         L     @01,TOMBFPTR(,TOMWAPTR)                             0679
         EX    @11,@SM02427                                        0679
*      TOMQDATA=TOMMVCNT;            /* SAVE CNT OF USER DATA MOVED  */
         ST    @12,TOMQDATA(,TOMWAPTR)                             0680
*      TOMBFPTR=TOMGETMN+TOMBFCNT;   /* UPDATE RU BUFFER PTR         */
         AL    @15,TOMGETMN(,TOMWAPTR)                             0681
         ST    @15,TOMBFPTR(,TOMWAPTR)                             0681
*      TOMQBPTR=OPBUFADR+TOMMVCNT;   /* UPDATE PTR TO UNUSED DATA    */
         AL    @12,OPBUFADR(,TOMWAPTR)                             0682
         ST    @12,TOMQBPTR(,TOMWAPTR)                             0682
*      TOMCOLMN=TOMCOLMN+TOMWRKSZ-TOMXCNT;                 /*@ZA17886*/
         AL    @14,TOMCOLMN(,TOMWAPTR)                             0683
         SL    @14,TOMXCNT(,TOMWAPTR)                              0683
         ST    @14,TOMCOLMN(,TOMWAPTR)                             0683
*    END;                            /* END DO WHILE LOOP            */
@DE00672 SLR   @12,@12                                             0684
         L     @15,TOMNWLSZ(,TOMWAPTR)                             0684
         SL    @15,TOMQDATA(,TOMWAPTR)                             0684
         CR    @15,@12                                             0684
         BNH   @DC00672                                            0684
         L     @15,TOMBUFSZ(,TOMWAPTR)                             0684
         BCTR  @15,0                                               0684
         SL    @15,TOMBFCNT(,TOMWAPTR)                             0684
         CR    @15,@12                                             0684
         BH    @DL00672                                            0684
@DC00672 DS    0H                                                  0685
*    IF TOMMVCNT=OPBFSZ THEN         /* HAS ALL DATA BEEN MOVED?     */
         L     @12,TOMMVCNT(,TOMWAPTR)                             0685
         CH    @12,OPBFSZ(,TOMWAPTR)                               0685
         BNE   @RF00685                                            0685
*      /**************************************************************/
*      /*                                                            */
*      /* AT END OF USER'S DATA THIS ENDDATA WILL PROCESS BYPASS AND */
*      /* INSERT CURSOR ORDERS.                                      */
*      /*                                                            */
*      /**************************************************************/
*      CALL ENDDATA;                 /* PROCESS LAST TWO DATA BYTES  */
         BAL   @14,ENDDATA                                         0686
*    ELSE                            /* END OF USER DATA NOT REACHED */
*      /**************************************************************/
*      /*                                                            */
*      /* MORE USER DATA EXIST SO DO NEWLINE PROCESSING & CONTINUE   */
*      /*                                                            */
*      /**************************************************************/
*      DO;                                                         0687
         B     @RC00685                                            0687
@RF00685 DS    0H                                                  0688
*        TOMCOLMN=0;                 /* RESET COLUMN COUNT   @ZA17886*/
         SLR   @12,@12                                             0688
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0688
*        TOMLNCNT=TOMLNCNT+1;        /* ADD ONE TO LINE COUNT        */
         LA    @12,1                                               0689
         AL    @12,TOMLNCNT(,TOMWAPTR)                             0689
         ST    @12,TOMLNCNT(,TOMWAPTR)                             0689
*        IF (TOMBUFSZ-TOMBFCNT)<                                   0690
*           EVAL(MIN((OPBFSZ-TOMMVCNT),TOMLNSZ)+15) THEN           0690
         L     @12,TOMBUFSZ(,TOMWAPTR)                             0690
         SL    @12,TOMBFCNT(,TOMWAPTR)                             0690
         LH    @15,OPBFSZ(,TOMWAPTR)                               0690
         SL    @15,TOMMVCNT(,TOMWAPTR)                             0690
         SLR   @14,@14                                             0690
         IC    @14,TOMLNSZ(,TOMWAPTR)                              0690
         CR    @15,@14                                             0690
         BNH   *+6
         LR    @15,@14                                             0690
         AL    @15,@CF00113                                        0690
         CR    @12,@15                                             0690
         BNL   @RF00690                                            0690
*          /**********************************************************/
*          /*                                                        */
*          /* NOT ENOUGH RU BUFFER FOR LINESZ OF DATA AND PAGING     */
*          /* PROMPT SO SEND CURRENT RU AND CONTINUE                 */
*          /*                                                        */
*          /**********************************************************/
*          TOMENDBF='1'B;            /* END OF OUTPUT RU REACHED     */
         OI    TOMENDBF(TOMWAPTR),B'00100000'                      0691
*        ELSE                        /* RU BUFFER SPACE STILL EXIST  */
*          DO;                       /*                      @ZA17040*/
         B     @RC00690                                            0692
@RF00690 DS    0H                                                  0693
*            CALL NEWLINE;           /* LINE ADDRESS IN RU   @ZA17040*/
         BAL   @14,NEWLINE                                         0693
*            IF TOMLNCNT>=TOMLNNO THEN /* LAST SCREEN LINE?          */
         L     @12,TOMLNCNT(,TOMWAPTR)                             0694
         C     @12,TOMLNNO(,TOMWAPTR)                              0694
         BL    @RF00694                                            0694
*              CALL SCRNPAGE;          /* PUT PAGE PROMPT IN RU      */
         BAL   @14,SCRNPAGE                                        0695
*            ELSE;                   /* NOT LAST SCREEN LINE         */
@RF00694 DS    0H                                                  0697
*          END;                      /*                      @ZA17040*/
*      END;                                                        0698
@RC00690 DS    0H                                                  0699
*  END;                              /* END DO WHILE LOOP            */
@RC00685 DS    0H                                                  0699
@DE00650 L     @12,TOMMVCNT(,TOMWAPTR)                             0699
         CH    @12,OPBFSZ(,TOMWAPTR)                               0699
         BNL   @DC00650                                            0699
         TM    TOMENDSC(TOMWAPTR),B'00101000'                      0699
         BZ    @DL00650                                            0699
@DC00650 DS    0H                                                  0700
*END;                                                              0700
*END ASIS;                           /* END OF ASIS                  */
@EL00017 DS    0H                                                  0701
@EF00017 DS    0H                                                  0701
@ER00017 L     @14,@SA00017                                        0701
         BR    @14                                                 0701
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, ENDDATA  , WILL BE CALLED TO PROCESS LAST TWO    */
*/* BYTES OF USER DATA IF EDIT OR ASIS IS SPECIFIED.                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0702
*ENDDATA: PROCEDURE OPTIONS(SAVE(14));                             0702
*                                                                  0702
ENDDATA  ST    @14,@SA00018                                        0702
*TOMBFPTR=TOMGETMN+TOMBFCNT-2;       /* BACK UP FOR MOVE OF BYPASS   */
         LA    @12,2                                               0703
         L     @15,TOMBFCNT(,TOMWAPTR)                             0703
         L     @14,TOMGETMN(,TOMWAPTR)                             0703
         ALR   @14,@15                                             0703
         SLR   @14,@12                                             0703
         ST    @14,TOMBFPTR(,TOMWAPTR)                             0703
*TOMQBPTR=OPBUFADR+TOMMVCNT-2;       /* BACK UP FOR MOVE OF BYPASS   */
         L     @11,OPBUFADR(,TOMWAPTR)                             0704
         AL    @11,TOMMVCNT(,TOMWAPTR)                             0704
         SLR   @11,@12                                             0704
         ST    @11,TOMQBPTR(,TOMWAPTR)                             0704
*IF QBUF(2)=BYP THEN                 /* IS LAST USER BYTE BYPASS?    */
         CLI   QBUF+1(@11),X'24'                                   0705
         BNE   @RF00705                                            0705
*  /******************************************************************/
*  /*                                                                */
*  /*       LAST IS BYPASS. REPLACE WITH START FIELD & BYPASS ATTRIB */
*  /*                                                                */
*  /******************************************************************/
*  DO;                                                             0706
*    TOMBFCNT=TOMBFCNT+1;            /* SET INDEX FOR MOVE INTO RU   */
         AL    @15,@CF00064                                        0707
         ST    @15,TOMBFCNT(,TOMWAPTR)                             0707
*    IKTOBUF(2:3)=SFBYPATT;          /* PUT START FLD/BYP ATT IN RU  */
         MVC   IKTOBUF+1(2,@14),@CB01958                           0708
*    TVWANOFB='1'B;                  /* NO FLASH BACK FOR THIS DATA  */
         OI    TVWANOFB(TVWAPTR),B'00010000'                       0709
*    TOMCOLMN=0;                     /* RESET COLUMN COUNT   @ZA17886*/
         SLR   @12,@12                                             0710
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0710
*  END;                                                            0711
*ELSE                                /* CONTINUE END CHARACTER CHECK */
*  IF OPBFSZ>1 &                     /* MESSAGE SIZE > 1?    @ZA17886*/
*    (QBUF(1:2)=BYPNL ×              /* IS LAST 2 USER BYTES BYP/NL? */
*     QBUF(1:2)=BYPCR) THEN          /* IS LAST 2 USER BYTES BYP/CR? */
         B     @RC00705                                            0712
@RF00705 LH    @12,OPBFSZ(,TOMWAPTR)                               0712
         C     @12,@CF00064                                        0712
         BNH   @RF00712                                            0712
         L     @12,TOMQBPTR(,TOMWAPTR)                             0712
         CLC   QBUF(2,@12),@CB01928                                0712
         BE    @RT00712                                            0712
         CLC   QBUF(2,@12),@CB01926                                0712
         BNE   @RF00712                                            0712
@RT00712 DS    0H                                                  0713
*    /****************************************************************/
*    /*                                                              */
*    /* LAST CHAR IS BYPASS. REPLACE WITH START FIELD & BYPASS ATTRIB*/
*    /*                                                              */
*    /****************************************************************/
*    DO;                                                           0713
*      IKTOBUF(1:2)=SFBYPATT;        /* PUT SF AND BYP ATTRIB IN RU  */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0714
         MVC   IKTOBUF(2,@12),@CB01958                             0714
*      TVWANOFB='1'B;                /* NO FLASH BACK FOR THIS DATA  */
         OI    TVWANOFB(TVWAPTR),B'00010000'                       0715
*      TOMCOLMN=0;                   /* RESET COLUMN COUNT   @ZA17886*/
         SLR   @12,@12                                             0716
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0716
*    END;                                                          0717
*  ELSE                              /* CONTINUE END CHARACTER CHECK */
*    IF (QBUF(2)=IC) &               /* IS LAST CHAR INSERT CURSOR?  */
*       (OPEDIT='01'B) THEN          /* IS CURRENT TPUT ASIS MODE?   */
         B     @RC00712                                            0718
@RF00712 L     @12,TOMQBPTR(,TOMWAPTR)                             0718
         CLI   QBUF+1(@12),X'13'                                   0718
         BNE   @RF00718                                            0718
         TM    OPEDIT(TOMWAPTR),B'00010000'                        0718
         BNO   @RF00718                                            0718
         TM    OPEDIT(TOMWAPTR),B'00100000'                        0718
         BNZ   @RF00718                                            0718
*      /**************************************************************/
*      /*                                                            */
*      /* INSERT CURSOR IS VALID AS LAST CHARACTER FOR ASIS MODE DATA*/
*      /*                                                            */
*      /**************************************************************/
*      DO;                                                         0719
*        IKTOBUF(2)=IC;              /* PUT INSERT CURS ORDER IN RU  */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0720
         MVI   IKTOBUF+1(@12),X'13'                                0720
*        TOMCURST='1'B;              /* TURN CURSOR SET FLAG ON      */
         OI    TOMCURST(TOMWAPTR),B'00010000'                      0721
*        TOMCOLMN=TOMCOLMN-1;        /*                      @ZA17040*/
         L     @12,TOMCOLMN(,TOMWAPTR)                             0722
         BCTR  @12,0                                               0722
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0722
*      END;                                                        0723
*    ELSE                            /* CONTINUE END CHARACTER CHECK */
*      /**************************************************************/
*      /*                                                            */
*      /* IF VALID BYPASS IS NOT FOUND AND CURSOR IS NOT SET         */
*      /* DO GROUP WILL PUT DEFAULT ATTRIBUTE AT END OF DATA         */
*      /*                                                            */
*      /**************************************************************/
*      DO;                                                         0724
         B     @RC00718                                            0724
@RF00718 DS    0H                                                  0725
*        IF QBUF(2)=NL THEN          /* IS LAST USER BYTE NEWLINE?   */
         L     @12,TOMQBPTR(,TOMWAPTR)                             0725
         CLI   QBUF+1(@12),X'15'                                   0725
         BNE   @RF00725                                            0725
*          TOMBFCNT=TOMBFCNT-1;      /* YES, REMOVE NL FROM RU       */
         L     @12,TOMBFCNT(,TOMWAPTR)                             0726
         BCTR  @12,0                                               0726
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0726
*        ELSE;                                                     0727
@RF00725 DS    0H                                                  0728
*        TOMBFPTR=TOMGETMN+TOMBFCNT; /* RESTORE RU BUFFER POINTER    */
         L     @12,TOMBFCNT(,TOMWAPTR)                             0728
         L     @15,TOMGETMN(,TOMWAPTR)                             0728
         ALR   @15,@12                                             0728
         ST    @15,TOMBFPTR(,TOMWAPTR)                             0728
*        IF TOMCOLMN<TOMLNSZ THEN    /* SPACE LEFT ON LINE?  @ZA17886*/
         L     @14,TOMCOLMN(,TOMWAPTR)                             0729
         SLR   @11,@11                                             0729
         IC    @11,TOMLNSZ(,TOMWAPTR)                              0729
         CR    @14,@11                                             0729
         BNL   @RF00729                                            0729
*          DO;                       /* SPACE LEFT ON LINE   @ZA17040*/
*            TOMBFCNT=TOMBFCNT+2;    /* ADD 2 TO BUF COUNT   @ZA17040*/
         AL    @12,@CF00076                                        0731
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0731
*            TOMCOLMN=TOMCOLMN+1;    /* ADD 1 TO COLUMN COUNT@ZA17886*/
         LA    @10,1                                               0732
         ALR   @14,@10                                             0732
         ST    @14,TOMCOLMN(,TOMWAPTR)                             0732
*            IKTOBUF(1:2)=SFRDATT;   /* PUT IN ATTR. BYTE    @ZA17040*/
         MVC   IKTOBUF(2,@15),@CB01962                             0733
*            IF OPEDIT='01'B & QBUF(2)^=NL THEN  /*ASIS & ^NL@ZA17040*/
         TM    OPEDIT(TOMWAPTR),B'00010000'                        0734
         BNO   @RF00734                                            0734
         TM    OPEDIT(TOMWAPTR),B'00100000'                        0734
         BNZ   @RF00734                                            0734
         L     @01,TOMQBPTR(,TOMWAPTR)                             0734
         CLI   QBUF+1(@01),X'15'                                   0734
         BE    @RF00734                                            0734
*              IF TOMCOLMN<TOMLNSZ THEN /* ROOM ON LINE?     @ZA17886*/
         CR    @14,@11                                             0735
         BNL   @RF00735                                            0735
*                DO;                 /* SPACE LEFT ON LINE   @ZA17040*/
*                  TOMBFCNT=TOMBFCNT+1; /* ADD 1 TO BUFCNT   @ZA17040*/
         ALR   @12,@10                                             0737
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0737
*                  TOMCURST='1'B;    /* SHOW CURSOR IS SET   @ZA17040*/
         OI    TOMCURST(TOMWAPTR),B'00010000'                      0738
*                  IKTOBUF(3)=IC;    /* PUT IC IN THE RU     @ZA17040*/
         MVI   IKTOBUF+2(@15),X'13'                                0739
*                END;                /*                      @ZA17040*/
*              ELSE                  /* NO ROOM LEFT ON LINE @ZA17040*/
*                DO;                 /*                      @ZA17040*/
         B     @RC00735                                            0741
@RF00735 DS    0H                                                  0742
*                  TOMLNCNT=TOMLNCNT+1;                    /*@ZA17040*/
         LA    @12,1                                               0742
         AL    @12,TOMLNCNT(,TOMWAPTR)                             0742
         ST    @12,TOMLNCNT(,TOMWAPTR)                             0742
*                  TOMCOLMN=0;       /* RESET COLUMN COUNT   @ZA17040*/
         SLR   @15,@15                                             0743
         ST    @15,TOMCOLMN(,TOMWAPTR)                             0743
*                  IF TOMLNCNT<TOMLNNO THEN                /*@ZA17040*/
         C     @12,TOMLNNO(,TOMWAPTR)                              0744
         BNL   @RF00744                                            0744
*                    DO;             /* SPACE ON SCREEN      @ZA17040*/
*                      CALL NEWLINE; /* GET ADDR OF NEW LINE @ZA17040*/
         BAL   @14,NEWLINE                                         0746
*                      TOMBFCNT=TOMBFCNT+1;                /*@ZA17040*/
         LA    @12,1                                               0747
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0747
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0747
*                      TOMCURST='1'B;/* CURSOR IS SET        @ZA17040*/
         OI    TOMCURST(TOMWAPTR),B'00010000'                      0748
*                      IKTOBUF(3)=IC;/* PUT IC IN RU         @ZA17040*/
         L     @12,TOMBFPTR(,TOMWAPTR)                             0749
         MVI   IKTOBUF+2(@12),X'13'                                0749
*                    END;            /*                      @ZA17040*/
*                  ELSE;             /* NO SPACE WAS LEFT    @ZA17040*/
@RF00744 DS    0H                                                  0752
*                END;                /*                      @ZA17040*/
*            ELSE                    /* EDIT OR NEWLINE      @ZA17040*/
*              TOMCOLMN=0;           /* RESET COLUMN COUNT   @ZA17040*/
         B     @RC00734                                            0753
@RF00734 SLR   @12,@12                                             0753
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0753
*          END;                      /*                      @ZA17040*/
*        ELSE                        /* NO SPACE ON LINE             */
*          /**********************************************************/
*          /*                                                        */
*          /*  NO SPACE ON THIS LINE PUT ATTRIBUTE ON NEXT LINE      */
*          /*                                                        */
*          /**********************************************************/
*          DO;                                                     0755
         B     @RC00729                                            0755
@RF00729 DS    0H                                                  0756
*            TOMLNCNT=TOMLNCNT+1;    /* ADD ONE TO LINE COUNT        */
         LA    @12,1                                               0756
         AL    @12,TOMLNCNT(,TOMWAPTR)                             0756
         ST    @12,TOMLNCNT(,TOMWAPTR)                             0756
*            TOMCOLMN=0;             /* RESET COLUMN COUNT   @ZA17886*/
         SLR   @15,@15                                             0757
         ST    @15,TOMCOLMN(,TOMWAPTR)                             0757
*            IF TOMLNCNT<TOMLNNO THEN/* IS THIS THE LAST SCRN LINE?  */
         C     @12,TOMLNNO(,TOMWAPTR)                              0758
         BNL   @RF00758                                            0758
*              /******************************************************/
*              /*                                                    */
*              /*THIS IS NOT THE LAST LINE. PUT IN ATTRIB AND CURSOR */
*              /*                                                    */
*              /******************************************************/
*              DO;                                                 0759
*                CALL NEWLINE;       /* GET ADDRESS OF NEW LINE      */
         BAL   @14,NEWLINE                                         0760
*                TOMBFCNT=TOMBFCNT+3;/* SET COUNT FOR ATTRIBUTE      */
         LA    @12,3                                               0761
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0761
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0761
*                IKTOBUF(1:3)=SFRDATIC;/* PUT SF & RD ATTRIB IN RU   */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0762
         MVC   IKTOBUF(3,@12),@CB01960                             0762
*                TOMCURST='1'B;      /* CURSOR IS SET IN RU          */
         OI    TOMCURST(TOMWAPTR),B'00010000'                      0763
*                TOMCOLMN=TOMCOLMN+1;/* UP COLUMN COUNT      @ZA17886*/
         LA    @12,1                                               0764
         AL    @12,TOMCOLMN(,TOMWAPTR)                             0764
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0764
*              END;                                                0765
*            ELSE;                                                 0766
@RF00758 DS    0H                                                  0767
*          END;                                                    0767
*      END;                                                        0768
@RC00729 DS    0H                                                  0769
*TOMBFPTR=TOMGETMN+TOMBFCNT;         /* UPDATE RU BUFFER POINTER     */
@RC00718 DS    0H                                                  0769
@RC00712 DS    0H                                                  0769
@RC00705 L     @12,TOMGETMN(,TOMWAPTR)                             0769
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0769
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0769
*TOMQBPTR=OPBUFADR+TOMMVCNT;         /* RESTORE QUEUE BUFFER POINTER */
         L     @12,OPBUFADR(,TOMWAPTR)                             0770
         AL    @12,TOMMVCNT(,TOMWAPTR)                             0770
         ST    @12,TOMQBPTR(,TOMWAPTR)                             0770
*IF (TOMLNCNT>=TOMLNNO)×             /* IF LAST LINE DON'T UPDATE CNT*/
*   (TOMCURST='1'B)     THEN;        /* IF CURSOR SET DON'T UP COUNT */
         L     @12,TOMLNCNT(,TOMWAPTR)                             0771
         C     @12,TOMLNNO(,TOMWAPTR)                              0771
         BNL   @RT00771                                            0771
         TM    TOMCURST(TOMWAPTR),B'00010000'                      0771
         BO    @RT00771                                            0771
*ELSE                                                              0773
*  TOMLNCNT=TOMLNCNT+1;              /* OTHERWISE ADD 1 TO LINE CNT  */
         LA    @12,1                                               0773
         AL    @12,TOMLNCNT(,TOMWAPTR)                             0773
         ST    @12,TOMLNCNT(,TOMWAPTR)                             0773
*END ENDDATA;                        /* END OF ENDDATA               */
@EL00018 DS    0H                                                  0774
@EF00018 DS    0H                                                  0774
@ER00018 L     @14,@SA00018                                        0774
         BR    @14                                                 0774
         EJECT
*                                                                  0775
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, CNTLHDRS, WILL BUILD THE OUTPUT HEADER FOR CON-  */
*/* TROL OR ASIS MODE USER DATA.                                     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0775
*CNTLHDRS: PROCEDURE OPTIONS(SAVE(14));                            0775
*                                                                  0775
CNTLHDRS ST    @14,@SA00019                                        0775
*IF (TOMBUFSZ-TOMBFCNT) <                                  /*@ZA19888*/
*   (MIN(OPBFSZ-TOMMVCNT,TOMLNSZ))+15 THEN                 /*@ZA19888*/
         L     @12,TOMBUFSZ(,TOMWAPTR)                             0776
         SL    @12,TOMBFCNT(,TOMWAPTR)                             0776
         LH    @15,OPBFSZ(,TOMWAPTR)                               0776
         SL    @15,TOMMVCNT(,TOMWAPTR)                             0776
         SLR   @14,@14                                             0776
         IC    @14,TOMLNSZ(,TOMWAPTR)                              0776
         CR    @15,@14                                             0776
         BNH   *+6
         LR    @15,@14                                             0776
         AL    @15,@CF00113                                        0776
         CR    @12,@15                                             0776
         BNL   @RF00776                                            0776
*  TOMENDBF='1'B;                    /* NOT ENOUGH BUFFER SP @ZA19888*/
         OI    TOMENDBF(TOMWAPTR),B'00100000'                      0777
*ELSE                                /* ENOUGH BUFFER SPACE  @ZA19888*/
*  DO;                                                     /*@ZA19888*/
         B     @RC00776                                            0778
@RF00776 DS    0H                                                  0779
*    IF TOMBFCNT=0 THEN              /* IS RU OUTPUT RU EMPTY?       */
         L     @12,TOMBFCNT(,TOMWAPTR)                             0779
         LTR   @12,@12                                             0779
         BNZ   @RF00779                                            0779
*      /**************************************************************/
*      /*                                                            */
*      /* BUILD CONTROL HEADER (CMD,WCC,SBA ORDER) ONLY IF RU IS     */
*      /* EMPTY.                                                     */
*      /*                                                            */
*      /**************************************************************/
*      DO;                                                         0780
*        IF OPBFSZ>2 &               /* IS TPUT LARGER THAN 2 BYTES? */
*           QBUF(1)=ESC THEN         /* IS FIRST BYTE ESCAPE CHAR?   */
         LA    @15,2                                               0781
         CH    @15,OPBFSZ(,TOMWAPTR)                               0781
         BNL   @RF00781                                            0781
         L     @14,TOMQBPTR(,TOMWAPTR)                             0781
         CLI   QBUF(@14),X'27'                                     0781
         BNE   @RF00781                                            0781
*          /**********************************************************/
*          /*                                                        */
*          /* ESC PRESENT, TAKE USER'S COMMAND.                      */
*          /*                                                        */
*          /**********************************************************/
*          DO;                                                     0782
*            TOMBFCNT=TOMBFCNT+1;    /* UPDATE COUNT OF DATA IN RU   */
         AL    @12,@CF00064                                        0783
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0783
*            TOMMVCNT=2;             /* INCLUDE ESC IN MOVE COUNT    */
         ST    @15,TOMMVCNT(,TOMWAPTR)                             0784
*            IKTOBUF(1:2)=QBUF(2:3); /* PUT USER'S CMD IN RU @ZM20636*/
         L     @01,TOMBFPTR(,TOMWAPTR)                             0785
         MVC   IKTOBUF(2,@01),QBUF+1(@14)                          0785
*            TOMBFPTR=TOMGETMN+TOMBFCNT; /* UPDATE RU BUFFER PTR     */
         AL    @12,TOMGETMN(,TOMWAPTR)                             0786
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0786
*            TOMQBPTR=OPBUFADR+TOMMVCNT; /* UPDATE PTR TO NEXT BYTE  */
         L     @12,OPBUFADR(,TOMWAPTR)                             0787
         ALR   @12,@15                                             0787
         ST    @12,TOMQBPTR(,TOMWAPTR)                             0787
*            TOMQDATA=TOMMVCNT;      /* SAVE CNT OF USER DATA MOVED  */
         ST    @15,TOMQDATA(,TOMWAPTR)                             0788
*          END;                                                    0789
*        ELSE                        /* FIRST DATA BYTE NOT ESCAPE   */
*          /**********************************************************/
*          /*                                                        */
*          /* ESCAPE CHAR IS NOT PRESENT SO PUT IN DEFAULT WRITE     */
*          /* COMMAND.                                               */
*          /*                                                        */
*          /**********************************************************/
*          DO;                       /* YES, PUT CMD IN RU           */
         B     @RC00781                                            0790
@RF00781 DS    0H                                                  0791
*            CALL SCRFORMT;          /* PUT DEFAULT CMD IN RU        */
         BAL   @14,SCRFORMT                                        0791
*            TOMBFCNT=TOMBFCNT-1;    /* DON'T COUNT DEFAULT WCC YET! */
         L     @12,TOMBFCNT(,TOMWAPTR)                             0792
         BCTR  @12,0                                               0792
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0792
*            TOMBFPTR=TOMBFPTR-1;    /* DON'T INCLUDE DEFAULT WCC YET*/
         L     @12,TOMBFPTR(,TOMWAPTR)                             0793
         BCTR  @12,0                                               0793
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0793
*          END;                                                    0794
*        IF OPBFSZ>4 &               /* IS TPUT LARGER THAN 4 BYTES? */
*           QBUF(2)=SBA THEN         /* USER HEADER CONTAIN SBA?     */
@RC00781 LA    @12,4                                               0795
         CH    @12,OPBFSZ(,TOMWAPTR)                               0795
         BNL   @RF00795                                            0795
         L     @15,TOMQBPTR(,TOMWAPTR)                             0795
         CLI   QBUF+1(@15),X'11'                                   0795
         BNE   @RF00795                                            0795
*          /**********************************************************/
*          /*                                                        */
*          /* MOVE USER WRITE CONTROL CHAR AND SBA ORDER INTO        */
*          /* OUTPUT RU.                                             */
*          /*                                                        */
*          /**********************************************************/
*          DO;                                                     0796
*            TOMBFCNT=TOMBFCNT+4;    /* UPDATE RU DATA COUNT         */
         L     @14,TOMBFCNT(,TOMWAPTR)                             0797
         ALR   @14,@12                                             0797
         ST    @14,TOMBFCNT(,TOMWAPTR)                             0797
*            TOMMVCNT=TOMMVCNT+4;    /* UPDATE COUNT OF DATA MOVED   */
         AL    @12,TOMMVCNT(,TOMWAPTR)                             0798
         ST    @12,TOMMVCNT(,TOMWAPTR)                             0798
*            IKTOBUF(1:4)=QBUF(1:4); /* PUT USER'S WCC IN RU @ZA19886*/
         L     @01,TOMBFPTR(,TOMWAPTR)                             0799
         MVC   IKTOBUF(4,@01),QBUF(@15)                            0799
*            TOMBFPTR=TOMGETMN+TOMBFCNT; /* UPDATE RU BUFFER PTR     */
         AL    @14,TOMGETMN(,TOMWAPTR)                             0800
         ST    @14,TOMBFPTR(,TOMWAPTR)                             0800
*            TOMQBPTR=OPBUFADR+TOMMVCNT; /* UPDATE PTR TO NEXT DATA  */
         L     @15,OPBUFADR(,TOMWAPTR)                             0801
         ALR   @15,@12                                             0801
         ST    @15,TOMQBPTR(,TOMWAPTR)                             0801
*            TOMQDATA=TOMMVCNT;      /* SAVE CNT OF MOVED USER DATA  */
         ST    @12,TOMQDATA(,TOMWAPTR)                             0802
*            TOMTRSBA='1'B;          /* NO SBA TRACKING              */
         OI    TOMTRSBA(TOMWAPTR),B'00000001'                      0803
*          END;                                                    0804
*        ELSE                        /* USER SBA ORDER NOT IN HEADER */
*          /**********************************************************/
*          /*                                                        */
*          /* USER SBA NOT IN HEADER SO USER DEFAULT WCC AND LINE    */
*          /* ADDRESS                                                */
*          /*                                                        */
*          /**********************************************************/
*          DO;                                                     0805
         B     @RC00795                                            0805
@RF00795 DS    0H                                                  0806
*            TOMBFCNT=TOMBFCNT+1;    /* COUNT DEFAULT WCC NOW        */
         LA    @12,1                                               0806
         L     @15,TOMBFCNT(,TOMWAPTR)                             0806
         ALR   @15,@12                                             0806
         ST    @15,TOMBFCNT(,TOMWAPTR)                             0806
*            TOMBFPTR=TOMBFPTR+1;    /* INCLUDE DEFAULT WCC NOW      */
         AL    @12,TOMBFPTR(,TOMWAPTR)                             0807
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0807
*            CALL NEWLINE;           /* PUT LINE ADDRESS IN RU       */
         BAL   @14,NEWLINE                                         0808
*          END;                                                    0809
*      END;                          /* NO DATA AT PROC ENTRY        */
*    ELSE                            /* DATA ALREADY IN RU           */
*      CALL NEWLINE;                 /* PUT LINE ADDRESS IN RU       */
         B     @RC00779                                            0811
@RF00779 BAL   @14,NEWLINE                                         0811
*    IF OPBFSZ-TOMMVCNT>1 &          /* MORE THAN 1 USER BYTES LEFT? */
*       QBUF(1)=SF THEN              /* IS CURRENT BYTE START FIELD? */
@RC00779 L     @12,TOMMVCNT(,TOMWAPTR)                             0812
         LH    @15,OPBFSZ(,TOMWAPTR)                               0812
         SLR   @15,@12                                             0812
         C     @15,@CF00064                                        0812
         BNH   @RF00812                                            0812
         L     @15,TOMQBPTR(,TOMWAPTR)                             0812
         CLI   QBUF(@15),X'1D'                                     0812
         BNE   @RF00812                                            0812
*      /**************************************************************/
*      /*                                                            */
*      /* IF START FIELD IS PRESENT, TAKE USER'S ATTRIBUTE CHARACTER.*/
*      /*                                                            */
*      /**************************************************************/
*      DO;                                                         0813
*        TOMBFCNT=TOMBFCNT+2;        /* UPDATE RU DATA CNT FOR MOVE  */
         LA    @14,2                                               0814
         L     @11,TOMBFCNT(,TOMWAPTR)                             0814
         ALR   @11,@14                                             0814
         ST    @11,TOMBFCNT(,TOMWAPTR)                             0814
*        TOMMVCNT=TOMMVCNT+2;        /* UPDATE COUNT OF DATA MOVED   */
         ALR   @12,@14                                             0815
         ST    @12,TOMMVCNT(,TOMWAPTR)                             0815
*        IKTOBUF(1:2)=QBUF;          /* MOVE USER'S ATTRIBUTE CHAR   */
         L     @01,TOMBFPTR(,TOMWAPTR)                             0816
         MVC   IKTOBUF(2,@01),QBUF(@15)                            0816
*        TOMQDATA=TOMMVCNT;          /* SAVE COUNT OF DATA MOVED     */
         ST    @12,TOMQDATA(,TOMWAPTR)                             0817
*        TOMQBPTR=OPBUFADR+TOMMVCNT; /* UPDATE POINTER TO USER DATA  */
         AL    @12,OPBUFADR(,TOMWAPTR)                             0818
         ST    @12,TOMQBPTR(,TOMWAPTR)                             0818
*      END;                                                        0819
*    ELSE                                                          0820
*      IF OPEDIT='01'B THEN          /* TPUT ASIS?           @ZA19886*/
         B     @RC00812                                            0820
@RF00812 TM    OPEDIT(TOMWAPTR),B'00010000'                        0820
         BNO   @RF00820                                            0820
         TM    OPEDIT(TOMWAPTR),B'00100000'                        0820
         BNZ   @RF00820                                            0820
*        IF OPBFSZ-TOMMVCNT=1 THEN   /* ONE BYTE LEFT?       @ZA19886*/
         LH    @12,OPBFSZ(,TOMWAPTR)                               0821
         SL    @12,TOMMVCNT(,TOMWAPTR)                             0821
         C     @12,@CF00064                                        0821
         BNE   @RF00821                                            0821
*          IF QBUF(1)=BYP×QBUF(1)=IC THEN; /* IC OR BYP?     @ZA19886*/
         L     @12,TOMQBPTR(,TOMWAPTR)                             0822
         CLI   QBUF(@12),X'24'                                     0822
         BE    @RT00822                                            0822
         CLI   QBUF(@12),X'13'                                     0822
         BE    @RT00822                                            0822
*          ELSE                                            /*@ZA19886*/
*            DO;                                                   0824
*              TOMBFCNT=TOMBFCNT+2;  /* CNT FOR MOVE OF WRITE ATTRIB */
         LA    @12,2                                               0825
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0825
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0825
*              IKTOBUF(1:2)=SFWRTATT; /* PUT IN DEFAULT WRITE ATTRIB */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0826
         MVC   IKTOBUF(2,@12),@CB01964                             0826
*            END;                                                  0827
*        ELSE                        /* MORE THAN 1 BYTE LEFT@ZA19886*/
*          IF OPBFSZ-TOMMVCNT=2 &    /*                      @ZA19886*/
*            (QBUF(1:2)=BYPNL × QBUF(1:2)=BYPCR) THEN;     /*@ZA19886*/
         B     @RC00821                                            0828
@RF00821 LH    @12,OPBFSZ(,TOMWAPTR)                               0828
         SL    @12,TOMMVCNT(,TOMWAPTR)                             0828
         C     @12,@CF00076                                        0828
         BNE   @RF00828                                            0828
         L     @12,TOMQBPTR(,TOMWAPTR)                             0828
         CLC   QBUF(2,@12),@CB01928                                0828
         BE    @RT00828                                            0828
         CLC   QBUF(2,@12),@CB01926                                0828
         BE    @RT00828                                            0828
*          ELSE                      /*                      @ZA19886*/
*            DO;                     /*                      @ZA19886*/
@RF00828 DS    0H                                                  0831
*              TOMBFCNT=TOMBFCNT+2;  /* ADD 2 TO BUFFER CNT  @ZA19886*/
         LA    @12,2                                               0831
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0831
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0831
*              IKTOBUF(1:2)=SFWRTATT; /* PUT IN ATTRIBUTE    @ZA19886*/
         L     @12,TOMBFPTR(,TOMWAPTR)                             0832
         MVC   IKTOBUF(2,@12),@CB01964                             0832
*            END;                    /*                      @ZA19886*/
*      ELSE;                         /* CONTROL TPUT         @ZA19886*/
@RF00820 DS    0H                                                  0835
*    TOMBFPTR=TOMGETMN+TOMBFCNT;     /* UPDATE PTR TO NEXT RU BYTE   */
@RC00820 DS    0H                                                  0835
@RC00812 L     @12,TOMGETMN(,TOMWAPTR)                             0835
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0835
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0835
*  END;                              /*                      @ZA19888*/
*END CNTLHDRS;                       /* END OF CNTLHDRS              */
@EL00019 DS    0H                                                  0837
@EF00019 DS    0H                                                  0837
@ER00019 L     @14,@SA00019                                        0837
         BR    @14                                                 0837
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, EDIT, DOES THE EDITING FOR EDIT MODE DATA. IN-   */
*/* VALID CHARACTERS ARE REPLACED WITH COLONS. BYPASS ('24'X) IS     */
*/* VALID ONLY AS LAST OR (CONDITIONALLY) NEXT TO LAST CHARACTER.    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0838
*EDIT: PROCEDURE OPTIONS(SAVE(14));                                0838
*                                                                  0838
EDIT     ST    @14,@SA00020                                        0838
*IF (TOMBUFSZ-TOMBFCNT) <                                  /*@ZA19888*/
*  (MIN(OPBFSZ-TOMMVCNT,TOMLNSZ))+15 THEN                  /*@ZA19888*/
         L     @12,TOMBUFSZ(,TOMWAPTR)                             0839
         SL    @12,TOMBFCNT(,TOMWAPTR)                             0839
         LH    @15,OPBFSZ(,TOMWAPTR)                               0839
         SL    @15,TOMMVCNT(,TOMWAPTR)                             0839
         SLR   @14,@14                                             0839
         IC    @14,TOMLNSZ(,TOMWAPTR)                              0839
         CR    @15,@14                                             0839
         BNH   *+6
         LR    @15,@14                                             0839
         AL    @15,@CF00113                                        0839
         CR    @12,@15                                             0839
         BNL   @RF00839                                            0839
*  TOMENDBF='1'B;                    /* NOT ENOUGH BUFFER SP @ZA19888*/
         OI    TOMENDBF(TOMWAPTR),B'00100000'                      0840
*ELSE                                /* ENOUGH BUFFER SPACE  @ZA19888*/
*DO;                                 /*                      @ZA19888*/
         B     @RC00839                                            0841
@RF00839 DS    0H                                                  0842
*IF TOMBFCNT=0 THEN                  /* IS OUTPUT RU EMPTY?          */
         L     @12,TOMBFCNT(,TOMWAPTR)                             0842
         LTR   @12,@12                                             0842
         BNZ   @RF00842                                            0842
*  CALL SCRFORMT;                    /* PUT IN CMD,WCC, & FORMAT     */
         BAL   @14,SCRFORMT                                        0843
*ELSE;                                                             0844
@RF00842 DS    0H                                                  0845
*/********************************************************************/
*/*                                                                  */
*/* BUILD LINES OF DATA UNTIL DATA,SCREEN, OR RU BUFFER RUNS OUT     */
*/*                                                                  */
*/********************************************************************/
*DO WHILE ((TOMMVCNT<OPBFSZ)&(TOMENDSC='0'B)&(TOMENDBF='0'B));     0845
         B     @DE00845                                            0845
@DL00845 DS    0H                                                  0846
*  IF TOMLNCNT>=TOMLNNO THEN         /* IS THIS THE LAST SCREEN LINE */
         L     @12,TOMLNCNT(,TOMWAPTR)                             0846
         C     @12,TOMLNNO(,TOMWAPTR)                              0846
         BL    @RF00846                                            0846
*    DO;                             /*                      @ZA17886*/
*      TOMCOLMN=MAX(0,MIN(TOMCOLMN,TOMLNSZ-7));            /*@ZA19887*/
         SLR   @12,@12                                             0848
         IC    @12,TOMLNSZ(,TOMWAPTR)                              0848
         SL    @12,@CF00034                                        0848
         L     @15,TOMCOLMN(,TOMWAPTR)                             0848
         CR    @15,@12                                             0848
         BNH   *+6
         LR    @15,@12                                             0848
         SLR   @12,@12                                             0848
         CR    @15,@12                                             0848
         BNL   *+6
         LR    @15,@12                                             0848
         ST    @15,TOMCOLMN(,TOMWAPTR)                             0848
*      CALL NEWLINE;                 /* PUT LINE ADDRESS IN RU       */
         BAL   @14,NEWLINE                                         0849
*      CALL SCRNPAGE;                /* YES, PUT PROMPT MSG IN RU    */
         BAL   @14,SCRNPAGE                                        0850
*    END;                            /*                              */
*  ELSE                              /* SCREEN PAGING NOT NEEDED     */
*    DO;                                                           0852
         B     @RC00846                                            0852
@RF00846 DS    0H                                                  0853
*      TOMEDSAV='00'B;               /* EDIT TPUT            @ZA17886*/
         NI    TOMEDSAV(TOMWAPTR),B'00111111'                      0853
*      CALL NEWLINE;                 /* PUT LINE ADDR IN RU  @ZA17886*/
         BAL   @14,NEWLINE                                         0854
*      IF TOMQDATA=0 &               /* FIRST PASS THRU LOOP?@ZA17040*/
*         TOMCOLMN=TOMLNSZ-1 THEN    /*                      @ZA17040*/
         L     @12,TOMQDATA(,TOMWAPTR)                             0855
         LTR   @12,@12                                             0855
         BNZ   @RF00855                                            0855
         SLR   @12,@12                                             0855
         IC    @12,TOMLNSZ(,TOMWAPTR)                              0855
         LR    @15,@12                                             0855
         BCTR  @15,0                                               0855
         C     @15,TOMCOLMN(,TOMWAPTR)                             0855
         BNE   @RF00855                                            0855
*        /************************************************************/
*        /*                                                          */
*        /* ON FIRST PASS FOR EACH TPUT, PUT ATTRIB IN FRONT OF DATA */
*        /*                                                          */
*        /************************************************************/
*        DO;                                                       0856
*          TOMBFCNT=TOMBFCNT+2;      /* SET COUNT FOR ATTRIBUTE      */
         LA    @15,2                                               0857
         AL    @15,TOMBFCNT(,TOMWAPTR)                             0857
         ST    @15,TOMBFCNT(,TOMWAPTR)                             0857
*          IKTOBUF(1:2)=SFWRTATT;    /* PUT IN ATTRIBUTE SEQUENCE    */
         L     @01,TOMBFPTR(,TOMWAPTR)                             0858
         MVC   IKTOBUF(2,@01),@CB01964                             0858
*          TOMBFPTR=TOMGETMN+TOMBFCNT;/* UPDATE RU BUFFER POINTER    */
         L     @14,TOMGETMN(,TOMWAPTR)                             0859
         ALR   @14,@15                                             0859
         ST    @14,TOMBFPTR(,TOMWAPTR)                             0859
*          TOMLNCNT=TOMLNCNT+1;      /* INCREMENT LINE COUNT         */
         LA    @14,1                                               0860
         AL    @14,TOMLNCNT(,TOMWAPTR)                             0860
         ST    @14,TOMLNCNT(,TOMWAPTR)                             0860
*          IF (TOMBUFSZ-TOMBFCNT)<                                 0861
*             EVAL(MIN((OPBFSZ-TOMMVCNT),TOMLNSZ)+15) THEN /*@ZA17040*/
         LCR   @15,@15                                             0861
         AL    @15,TOMBUFSZ(,TOMWAPTR)                             0861
         LH    @14,OPBFSZ(,TOMWAPTR)                               0861
         SL    @14,TOMMVCNT(,TOMWAPTR)                             0861
         CR    @14,@12                                             0861
         BNH   *+6
         LR    @14,@12                                             0861
         AL    @14,@CF00113                                        0861
         CR    @15,@14                                             0861
         BNL   @RF00861                                            0861
*            TOMENDBF='1'B;          /* END OF RU BUFFER REACHED     */
         OI    TOMENDBF(TOMWAPTR),B'00100000'                      0862
*          ELSE;                                                   0863
@RF00861 DS    0H                                                  0864
*          TOMCOLMN=0;               /* RESET COLUMN COUNT   @ZA17040*/
         SLR   @12,@12                                             0864
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0864
*        END;                                                      0865
*      ELSE                                                        0866
*        DO;                         /*                      @ZA17040*/
         B     @RC00855                                            0866
@RF00855 DS    0H                                                  0867
*          IF TOMQDATA=0 THEN        /* NO USER DATA MOVED?  @ZA17040*/
         L     @12,TOMQDATA(,TOMWAPTR)                             0867
         LTR   @12,@12                                             0867
         BNZ   @RF00867                                            0867
*            DO;                     /*                      @ZA17040*/
*              TOMBFCNT=TOMBFCNT+2;  /* SET COUNT FOR ATTR           */
         LA    @12,2                                               0869
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0869
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0869
*              IKTOBUF(1:2)=SFWRTATT;/* PUT IN ATTR SEQ      @ZA17040*/
         L     @01,TOMBFPTR(,TOMWAPTR)                             0870
         MVC   IKTOBUF(2,@01),@CB01964                             0870
*              TOMBFPTR=TOMGETMN+TOMBFCNT;                 /*@ZA17040*/
         AL    @12,TOMGETMN(,TOMWAPTR)                             0871
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0871
*              TOMCOLMN=TOMCOLMN+1;  /* INCREMENT COLUMN CNT @ZA17040*/
         LA    @12,1                                               0872
         L     @15,TOMCOLMN(,TOMWAPTR)                             0872
         ALR   @15,@12                                             0872
         ST    @15,TOMCOLMN(,TOMWAPTR)                             0872
*              J=MIN(OPBFSZ,(TOMLNSZ-TOMCOLMN));           /*@ZA17886*/
         LCR   @15,@15                                             0873
         SLR   @14,@14                                             0873
         IC    @14,TOMLNSZ(,TOMWAPTR)                              0873
         ALR   @15,@14                                             0873
         LH    @14,OPBFSZ(,TOMWAPTR)                               0873
         CR    @14,@15                                             0873
         BNH   *+6
         LR    @14,@15                                             0873
         ST    @14,J(,TOMWAPTR)                                    0873
*              TOMMVCNT=MAX(J,1);    /* MOVE OF AT LEAST ONE BYTE    */
         CR    @14,@12                                             0874
         BNL   *+6
         LR    @14,@12                                             0874
         ST    @14,TOMMVCNT(,TOMWAPTR)                             0874
*            END;                    /*                      @ZA17040*/
*          ELSE                      /* MOVE LINESIZE OR LESS@ZA17040*/
*            TOMMVCNT=MIN(OPBFSZ,(TOMQDATA+TOMLNSZ));/*LINESZ OR LESS*/
         B     @RC00867                                            0876
@RF00867 SLR   @12,@12                                             0876
         IC    @12,TOMLNSZ(,TOMWAPTR)                              0876
         AL    @12,TOMQDATA(,TOMWAPTR)                             0876
         LH    @15,OPBFSZ(,TOMWAPTR)                               0876
         CR    @15,@12                                             0876
         BNH   *+6
         LR    @15,@12                                             0876
         ST    @15,TOMMVCNT(,TOMWAPTR)                             0876
*      TOMWRKSZ=TOMMVCNT-TOMQDATA;   /* COUNT FOR MOVE TO WORK AREA  */
@RC00867 L     @12,TOMMVCNT(,TOMWAPTR)                             0877
         LR    @15,@12                                             0877
         SL    @15,TOMQDATA(,TOMWAPTR)                             0877
         STC   @15,TOMWRKSZ(,TOMWAPTR)                             0877
*      TOMCOLMN=TOMCOLMN+TOMWRKSZ;   /* ADD TO COLUMN COUNT  @ZA17886*/
         L     @14,TOMCOLMN(,TOMWAPTR)                             0878
         ALR   @14,@15                                             0878
         ST    @14,TOMCOLMN(,TOMWAPTR)                             0878
*      TOMWRKBF(1:TOMWRKSZ)=QBUF;    /* MOVE USER DATA TO WORK AREA  */
         LR    @14,@15                                             0879
         BCTR  @14,0                                               0879
         L     @01,TOMQBPTR(,TOMWAPTR)                             0879
         EX    @14,@SM02416                                        0879
*      TR(TOMWRKBF(1:TOMWRKSZ),EDITTAB);/* REPLACE INVALID CHARACTER */
         SLR   @11,@11                                             0880
         IC    @11,TOMWRKSZ(,TOMWAPTR)                             0880
         BCTR  @11,0                                               0880
         EX    @11,@SB02429                                        0880
*      TOMBFCNT=TOMBFCNT+TOMWRKSZ;   /* COUNT OF DATA IN OUTPUT RU   */
         AL    @15,TOMBFCNT(,TOMWAPTR)                             0881
         ST    @15,TOMBFCNT(,TOMWAPTR)                             0881
*      IKTOBUF(1:TOMWRKSZ)=TOMWRKBF; /* MOVE DATA TO OUTPUT RU       */
         L     @01,TOMBFPTR(,TOMWAPTR)                             0882
         EX    @14,@SM02427                                        0882
*      TOMQDATA=TOMMVCNT;            /* SAVE COUNT OF DATA MOVED     */
         ST    @12,TOMQDATA(,TOMWAPTR)                             0883
*      TOMBFPTR=TOMGETMN+TOMBFCNT;   /* UPDATE RU BUFFER POINTER     */
         AL    @15,TOMGETMN(,TOMWAPTR)                             0884
         ST    @15,TOMBFPTR(,TOMWAPTR)                             0884
*      TOMQBPTR=OPBUFADR+TOMMVCNT;   /* PTR TO BYTE OF UNUSED DATA   */
         L     @15,OPBUFADR(,TOMWAPTR)                             0885
         ALR   @15,@12                                             0885
         ST    @15,TOMQBPTR(,TOMWAPTR)                             0885
*      IF TOMMVCNT=OPBFSZ THEN       /* ALL USER DATA BEEN MOVED?    */
         CH    @12,OPBFSZ(,TOMWAPTR)                               0886
         BNE   @RF00886                                            0886
*        /************************************************************/
*        /*                                                          */
*        /* THIS DO GROUP PROCESSES BYPASS('24'X) WHEN FOUND IN NEXT */
*        /* LAST OR LAST DATA BYTE. A DEFAULT ATTRIBUTE IS PLACED IN */
*        /* RU WHEN A VALID BYPASS IS NOT FOUND                      */
*        /*                                                          */
*        /************************************************************/
*        CALL ENDDATA;                                             0887
         BAL   @14,ENDDATA                                         0887
*      ELSE                          /* MORE USER DATA TO BE PROCESS */
*        /************************************************************/
*        /*                                                          */
*        /* MORE USER DATA LEFT SO DO NEW-LINE PROCESSING & CONTINUE */
*        /*                                                          */
*        /************************************************************/
*        DO;                                                       0888
         B     @RC00886                                            0888
@RF00886 DS    0H                                                  0889
*          TOMLNCNT=TOMLNCNT+1;      /* ADD ONE TO LINE COUNT        */
         LA    @12,1                                               0889
         AL    @12,TOMLNCNT(,TOMWAPTR)                             0889
         ST    @12,TOMLNCNT(,TOMWAPTR)                             0889
*          TOMCOLMN=0;               /* RESET COLUMN COUNT   @ZA17886*/
         SLR   @12,@12                                             0890
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0890
*          IF (TOMBUFSZ-TOMBFCNT)<                                 0891
*             EVAL(MIN((OPBFSZ-TOMMVCNT),TOMLNSZ)+15) THEN         0891
         L     @12,TOMBUFSZ(,TOMWAPTR)                             0891
         SL    @12,TOMBFCNT(,TOMWAPTR)                             0891
         LH    @15,OPBFSZ(,TOMWAPTR)                               0891
         SL    @15,TOMMVCNT(,TOMWAPTR)                             0891
         SLR   @14,@14                                             0891
         IC    @14,TOMLNSZ(,TOMWAPTR)                              0891
         CR    @15,@14                                             0891
         BNH   *+6
         LR    @15,@14                                             0891
         AL    @15,@CF00113                                        0891
         CR    @12,@15                                             0891
         BNL   @RF00891                                            0891
*            /********************************************************/
*            /*                                                      */
*            /* NOT ENOUGH RU BUFFER FOR LINESZ OF DATA AND PAGING   */
*            /* PROMPT SO SEND CURRENT RU AND CONTINUE               */
*            /*                                                      */
*            /********************************************************/
*            TOMENDBF='1'B;          /* END OF RU BUFFER REACHED     */
         OI    TOMENDBF(TOMWAPTR),B'00100000'                      0892
*          ELSE;                                                   0893
@RF00891 DS    0H                                                  0894
*        END;                                                      0894
*      END;                          /*                      @ZA17040*/
@RC00886 DS    0H                                                  0896
*    END;                                                          0896
@RC00855 DS    0H                                                  0897
*END;                                /* END FOR DO WHILE LOOP        */
@RC00846 DS    0H                                                  0897
@DE00845 L     @12,TOMMVCNT(,TOMWAPTR)                             0897
         CH    @12,OPBFSZ(,TOMWAPTR)                               0897
         BNL   @DC00845                                            0897
         TM    TOMENDSC(TOMWAPTR),B'00101000'                      0897
         BZ    @DL00845                                            0897
@DC00845 DS    0H                                                  0898
*END;                                /*                      @ZA19888*/
*END EDIT;                           /* END OF EDIT                  */
@EL00020 DS    0H                                                  0899
@EF00020 DS    0H                                                  0899
@ER00020 L     @14,@SA00020                                        0899
         BR    @14                                                 0899
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THE PROCEDURE, BLDPRMPT, WILL BUILD AUTOPROMPT DATA IN THE OUT-  */
*/* PUT RU. FOR AUTO LINE NUMBERING, THIS ROUTINE WILL BUILD A VARI- */
*/* BLE LENGTH LINE NUMBER OF 5 TO 8 DIGITS WITH LEADING ZEROS TRUN- */
*/* CATED UP TO THE FIRST 3. AUTO CHARACTER PROMPTING WILL CONSIST   */
*/* OF POSITIONING THE CURSOR. THE KEYBOARD WILL BE UNLOCKED ON      */
*/* EITHER TYPE AUTO PROMPT.                                         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0900
*BLDPRMPT: PROCEDURE OPTIONS(SAVE(14));                            0900
*                                                                  0900
BLDPRMPT ST    @14,@SA00021                                        0900
*DCL UNPKNUM CHAR(8) BDY(DWORD);     /* STORAGE FOR CVD INSTRUCTION  */
*DCL PRMPTNUM CHAR(8) BDY(DWORD);    /* STORAGE FOR LINE NO. PROMPT  */
*                                                                  0902
*IF (TOMBUFSZ-TOMBFCNT) <                                  /*@ZA19888*/
*   (MIN(OPBFSZ-TOMMVCNT,TOMLNSZ))+15 THEN                 /*@ZA19888*/
         L     @12,TOMBUFSZ(,TOMWAPTR)                             0903
         SL    @12,TOMBFCNT(,TOMWAPTR)                             0903
         LH    @15,OPBFSZ(,TOMWAPTR)                               0903
         SL    @15,TOMMVCNT(,TOMWAPTR)                             0903
         SLR   @14,@14                                             0903
         IC    @14,TOMLNSZ(,TOMWAPTR)                              0903
         CR    @15,@14                                             0903
         BNH   *+6
         LR    @15,@14                                             0903
         AL    @15,@CF00113                                        0903
         CR    @12,@15                                             0903
         BNL   @RF00903                                            0903
*  TOMENDBF='1'B;                    /* NOT ENOUGH BUFFER SP @ZA19888*/
         OI    TOMENDBF(TOMWAPTR),B'00100000'                      0904
*ELSE                                /* ENOUGH BUFFER SPACE  @ZA19888*/
*IF TOMLNCNT>=TOMLNNO THEN           /* TEST FOR LAST SCREEN LINE    */
         B     @RC00903                                            0905
@RF00903 L     @12,TOMLNCNT(,TOMWAPTR)                             0905
         C     @12,TOMLNNO(,TOMWAPTR)                              0905
         BL    @RF00905                                            0905
*  DO;                                                             0906
*    IF TOMBFCNT=0 THEN              /* RU EMPTY?            @ZA19881*/
         L     @12,TOMBFCNT(,TOMWAPTR)                             0907
         LTR   @12,@12                                             0907
         BNZ   @RF00907                                            0907
*      CALL SCRFORMT;                /* FORMAT SCREEN        @ZA19881*/
         BAL   @14,SCRFORMT                                        0908
*    ELSE;                           /* RU NOT EMPTY         @ZA19881*/
@RF00907 DS    0H                                                  0910
*    TOMCOLMN=MAX(0,MIN(TOMCOLMN,TOMLNSZ-7));              /*@ZA19887*/
         SLR   @12,@12                                             0910
         IC    @12,TOMLNSZ(,TOMWAPTR)                              0910
         SL    @12,@CF00034                                        0910
         L     @15,TOMCOLMN(,TOMWAPTR)                             0910
         CR    @15,@12                                             0910
         BNH   *+6
         LR    @15,@12                                             0910
         SLR   @12,@12                                             0910
         CR    @15,@12                                             0910
         BNL   *+6
         LR    @15,@12                                             0910
         ST    @15,TOMCOLMN(,TOMWAPTR)                             0910
*    CALL NEWLINE;                   /* PUT LINE ADDRESS IN RU       */
         BAL   @14,NEWLINE                                         0911
*    CALL SCRNPAGE;                  /* PAGE SCREEN AT LAST LINE     */
         BAL   @14,SCRNPAGE                                        0912
*  END;                                                            0913
*ELSE                                /* SCREEN PAGING NOT NEEDED     */
*  DO;                                                             0914
         B     @RC00905                                            0914
@RF00905 DS    0H                                                  0915
*    IF TOMBFCNT=0 THEN              /* RU EMPTY?            @ZA19881*/
         L     @12,TOMBFCNT(,TOMWAPTR)                             0915
         LTR   @12,@12                                             0915
         BNZ   @RF00915                                            0915
*      DO;                           /*                      @ZA19881*/
*        TOMSCHED='1'B;              /* POST=SCHED           @ZA19881*/
         OI    TOMSCHED(TOMWAPTR),B'00001000'                      0917
*        CALL SCRFORMT;              /* FORMAT SCREEN        @ZA19881*/
         BAL   @14,SCRFORMT                                        0918
*      END;                          /*                      @ZA19881*/
*    ELSE;                           /* RU NOT EMPTY         @ZA19881*/
@RF00915 DS    0H                                                  0921
*    IF TSBAULST='1'B THEN           /* TEST FOR AUTO LINE PROMPTING */
         L     @12,PSAAOLD                                         0921
         L     @12,ASCBTSB(,@12)                                   0921
         TM    TSBAULST(@12),B'00010000'                           0921
         BNO   @RF00921                                            0921
*      /**************************************************************/
*      /*                                                            */
*      /* THIS DO GROUP BUILDS A VARIABLE LENGTH LINE NUMBER         */
*      /*                                                            */
*      /**************************************************************/
*      DO;                                                         0922
*        CALL NEWLINE;               /* PUT LINE ADDRESS IN RU       */
         BAL   @14,NEWLINE                                         0923
*        CVD(TSBAUTOS,UNPKNUM);      /* CHANGE LINE # TO PACKED DEC. */
         L     @12,PSAAOLD                                         0924
         L     @12,ASCBTSB(,@12)                                   0924
         L     @12,TSBAUTOS(,@12)                                  0924
         CVD   @12,UNPKNUM                                         0924
*        GEN SETS(UNPKNUM);                                        0925
            OI UNPKNUM+7,X'0F'
*        UNPK(PRMPTNUM,UNPKNUM);     /* CHANGE LINE # TO ZONED DEC.  */
         UNPK  PRMPTNUM(8),UNPKNUM(8)                              0926
*        DO I=1 TO 3                                               0927
*          WHILE PRMPTNUM(I)='F0'X;  /* INDEX PASS LEADING ZEROES    */
         LA    @12,1                                               0927
         ST    @12,I(,TOMWAPTR)                                    0927
@DL00927 L     @12,I(,TOMWAPTR)                                    0927
         LA    @01,PRMPTNUM-1(@12)                                 0927
         CLI   0(@01),X'F0'                                        0927
         BNE   @DC00927                                            0927
*        END;                                                      0928
         LA    @12,1                                               0928
         AL    @12,I(,TOMWAPTR)                                    0928
         ST    @12,I(,TOMWAPTR)                                    0928
         C     @12,@CF00291                                        0928
         BNH   @DL00927                                            0928
@DC00927 DS    0H                                                  0929
*        TOMBFCNT=TOMBFCNT+5+((8-I)+1);/* UPDATE BY LGTH LINE NO. + 5*/
         LA    @12,5                                               0929
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0929
         L     @15,I(,TOMWAPTR)                                    0929
         LA    @14,8                                               0929
         SLR   @14,@15                                             0929
         AL    @14,@CF00064                                        0929
         ALR   @12,@14                                             0929
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0929
*        IKTOBUF(1:2)=SFWRTATT;      /* PUT START FLD & WRT ATTRIB   */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0930
         MVC   IKTOBUF(2,@12),@CB01964                             0930
*        IKTOBUF(3:(11-I))=PRMPTNUM(I:8); /* PUT PROMPT NUMBER IN RU */
         LA    @14,11                                              0931
         SLR   @14,@15                                             0931
         SL    @14,@CF00291                                        0931
         LA    @01,PRMPTNUM-1(@15)                                 0931
         EX    @14,@SM02431                                        0931
*        IKTOBUF((12-I):(14-I))=SFRDATIC; /* SF, WRT ATTRIB, & IC    */
         LA    @14,12                                              0932
         SLR   @14,@15                                             0932
         ALR   @12,@14                                             0932
         BCTR  @12,0                                               0932
         LCR   @15,@15                                             0932
         AL    @15,@CF01015                                        0932
         SLR   @15,@14                                             0932
         EX    @15,@SM02433                                        0932
*      END;                                                        0933
*    ELSE;                             /* NO CHARACTER PROMPT@ZA19881*/
@RF00921 DS    0H                                                  0935
*    TOMBFPTR=TOMGETMN+TOMBFCNT;     /* UPDATE RU BUFFER POINTER     */
         L     @12,TOMGETMN(,TOMWAPTR)                             0935
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0935
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0935
*    TOMCURST='1'B;                  /* INDICATE CURSOR IS SET       */
         OI    TOMCURST(TOMWAPTR),B'00010000'                      0936
*    TOMKBULK='1'B;                  /* KEYBOARD UNLOCK NEEDED       */
         OI    TOMKBULK(TOMWAPTR),B'10000000'                      0937
*  END;                                                            0938
*END BLDPRMPT;                       /* END OF BLDPRMPT              */
@EL00021 DS    0H                                                  0939
@EF00021 DS    0H                                                  0939
@ER00021 L     @14,@SA00021                                        0939
         BR    @14                                                 0939
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, SCRNPAGE, WILL BE CALLED TO BUILD THE PAGING     */
*/* PROMPT MESSAGE AND TO SET APPROPRIATE INDICATORS.                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0940
*SCRNPAGE: PROCEDURE OPTIONS(SAVE(14));                            0940
*                                                                  0940
SCRNPAGE ST    @14,12(,@13)                                        0940
*TOMBFCNT=TOMBFCNT+8;                /* SET COUNT FOR PAGING MESSAGE */
         LA    @12,8                                               0941
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0941
         ST    @12,TOMBFCNT(,TOMWAPTR)                             0941
*IKTOBUF(1:8)='1DC85C5C5C1D4013'X;   /* PUT PAGE PROMPT IN OUTPUT RU */
         L     @01,TOMBFPTR(,TOMWAPTR)                             0942
         MVC   IKTOBUF(8,@01),@CB02350                             0942
*TOMBFPTR=TOMGETMN+TOMBFCNT;         /* UPDATE RU BUFFER POINTER     */
         AL    @12,TOMGETMN(,TOMWAPTR)                             0943
         ST    @12,TOMBFPTR(,TOMWAPTR)                             0943
*TOMCURST='1'B;                      /* INDICATE CURSOR IS SET IN RU */
         OI    TOMCURST(TOMWAPTR),B'00010000'                      0944
*TVWAPGN='1'B;                       /* PAGING RESPONSE OUTSTANDING  */
         OI    TVWAPGN(TVWAPTR),B'01000000'                        0945
*TOMENDSC='1'B;                      /* END OF SCRN HAS BEEN REACHED */
*TOMEXDTA='1'B;                      /* DATA BLD COMPLETE THIS ENTRY */
*TOMEXBRU='1'B;                      /* RU BUILD COMPLETE THIS ENTRY */
         OI    TOMENDSC(TOMWAPTR),B'00001110'                      0948
*TOMSTCUR='1'B;                      /* IC ON NEXT ENTRY IF NO DATA  */
*TOMKBULK='1'B;                      /* SET KEYBOARD UNLOCK NEEDED   */
         OI    TOMSTCUR(TOMWAPTR),B'10000100'                      0950
*END SCRNPAGE;                       /* END OF SCRNPAGE              */
@EL00022 DS    0H                                                  0951
@EF00022 DS    0H                                                  0951
@ER00022 L     @14,12(,@13)                                        0951
         BR    @14                                                 0951
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, BLDERR, WILL BE CALLED TO PUT ERROR MESSAGES IN  */
*/* THE OUTPUT RU                                                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0952
*BLDERR: PROCEDURE OPTIONS(SAVE(14));                              0952
*                                                                  0952
BLDERR   ST    @14,@SA00023                                        0952
*TOMCOLMN=0;                         /* RESET COLUMN COUNT   @ZA17886*/
         SLR   @12,@12                                             0953
         ST    @12,TOMCOLMN(,TOMWAPTR)                             0953
*IF TOMBFCNT=0 THEN                  /* IS RU EMPTY?                 */
         C     @12,TOMBFCNT(,TOMWAPTR)                             0954
         BNE   @RF00954                                            0954
*  CALL SCRFORMT;                    /* YES, PUT CMD,WCC, & FORMT    */
         BAL   @14,SCRFORMT                                        0955
*ELSE;                                                             0956
@RF00954 DS    0H                                                  0957
*CALL NEWLINE;                       /* PUT LINE ADDRESS IN RU       */
         BAL   @14,NEWLINE                                         0957
*IF TOMLNCNT>=TOMLNNO THEN           /* IS THIS THE LAST SCRN LINE?  */
         L     @12,TOMLNCNT(,TOMWAPTR)                             0958
         C     @12,TOMLNNO(,TOMWAPTR)                              0958
         BL    @RF00958                                            0958
*  CALL SCRNPAGE;                    /* YES, PUT PAGE PROMPT IN RU   */
         BAL   @14,SCRNPAGE                                        0959
*ELSE                                                              0960
*  DO;                               /* ENTRY FOR TIM'S ERROR MSG    */
         B     @RC00958                                            0960
@RF00958 DS    0H                                                  0961
*    I=4;                            /* INDEX INTO MESSAGE TABLE     */
         LA    @12,4                                               0961
         ST    @12,I(,TOMWAPTR)                                    0961
*    TOMBFCNT=TOMBFCNT+MSGSIZE+4;    /* UPDATE CNT FOR MESSAGE MOVE  */
         LR    @15,@12                                             0962
         SLA   @15,2                                               0962
         L     @01,FLCCVT                                          0962
         L     @01,CVTTCASP(,@01)                                  0962
         L     @01,TCASMSGS(,@01)                                  0962
         AL    @01,@CF02389                                        0962
         L     @15,MSGADR(@15,@01)                                 0962
         LH    @14,MSGSIZE(,@15)                                   0962
         L     @11,TOMBFCNT(,TOMWAPTR)                             0962
         ALR   @11,@14                                             0962
         ALR   @11,@12                                             0962
         ST    @11,TOMBFCNT(,TOMWAPTR)                             0962
*    IKTOBUF(1:2)=SFWRTATT;          /* PUT WRITE ATTRIBUTE IN RU    */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0963
         MVC   IKTOBUF(2,@12),@CB01964                             0963
*    IKTOBUF(3:MSGSIZE+2)=MSGDATA(1:MSGSIZE); /* PUT ERR MSG IN RU   */
         LR    @10,@14                                             0964
         BCTR  @10,0                                               0964
         EX    @10,@SM02435                                        0964
*    IKTOBUF(MSGSIZE+3:MSGSIZE+4)=SFRDATT;    /* PUT RD ATTRIB IN RU */
         ALR   @12,@14                                             0965
         MVC   IKTOBUF+2(2,@12),@CB01962                           0965
*    TOMBFPTR=TOMGETMN+TOMBFCNT;     /* UPDATE RU BUFFER POINTER     */
         AL    @11,TOMGETMN(,TOMWAPTR)                             0966
         ST    @11,TOMBFPTR(,TOMWAPTR)                             0966
*    TVWAERMG='0'B;                  /* OFF, REQUEST FOR ERROR MSG   */
         NI    TVWAERMG(TVWAPTR),B'11110111'                       0967
*    TVWAULK='1'B;                   /* REQUEST KEYBOARD UNLOCK      */
         OI    TVWAULK(TVWAPTR),B'00000100'                        0968
*    TOMLNCNT=TOMLNCNT+1;            /* AID ONE TO LINE COUNT        */
         LA    @12,1                                               0969
         AL    @12,TOMLNCNT(,TOMWAPTR)                             0969
         ST    @12,TOMLNCNT(,TOMWAPTR)                             0969
*  END;                                                            0970
*END BLDERR;                         /* END OF BLDERR                */
@EL00023 DS    0H                                                  0971
@EF00023 DS    0H                                                  0971
@ER00023 L     @14,@SA00023                                        0971
         BR    @14                                                 0971
         EJECT
*/********************************************************************/
*/*                                                                  */
*/* THIS PROCEDURE, TRANPROC, WILL PERFORM USER AND/OR ASCII TRANS-  */
*/* LATION ON THE OUTBOUND RU.                                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0972
*TRANPROC: PROCEDURE OPTIONS(SAVE(14));                            0972
*                                                                  0972
TRANPROC ST    @14,12(,@13)                                        0972
*DCL ASCITAB CHAR(256)               /* ADDRESSING FOR EBCDIC TO     */
*    BASED(TVWAATBO);                /*   ASCII TRANSLATE TABLE      */
*DCL USERTAB CHAR(256)               /* ADDRESSING TO USER DEFINED   */
*    BASED(TVWATABO);                /*   TRANSLATE TABLE            */
*DCL EOTR FIXED(31) DEF(TOMWRKVI);   /* ENDING INDEX FOR TRANSLATE   */
*DCL BOTR FIXED(31) DEF(TOMWRKVJ);   /* BEGINNING INDEX FOR TRANSL'  */
*DCL SCAN REG(1) PTR(31);            /* USE REG1 AS POINTER          */
*                                                                  0977
*IF TVWATRAN='1'B THEN               /* USER TRANSLATION?    @ZA18919*/
         TM    TVWATRAN(TVWAPTR),B'00000010'                       0978
         BNO   @RF00978                                            0978
*  DO;                               /* USER TRANSLATION     @ZA18919*/
*    BOTR=0;                         /* BEGIN TRANLATE               */
         SLR   @12,@12                                             0980
         ST    @12,BOTR(,TOMWAPTR)                                 0980
*    RFY (REG1,REG2,SCAN,REG3) RSTD; /* RESTRICT REGISTERS           */
*    REG3=3;                         /* SKIP CMD/WCC-USER TR         */
         LA    REG3,3                                              0982
*    DO WHILE BOTR<TOMBFCNT;         /* TRANSLATE UNTIL END OF RU    */
         B     @DE00983                                            0983
@DL00983 DS    0H                                                  0984
*      REG1=0;                                                     0984
         SLR   REG1,REG1                                           0984
*      TOMBFPTR=TOMGETMN+BOTR;       /* POINT NEXT UNTRANSLATED BYTE */
         L     @12,BOTR(,TOMWAPTR)                                 0985
         L     @00,TOMGETMN(,TOMWAPTR)                             0985
         ALR   @00,@12                                             0985
         ST    @00,TOMBFPTR(,TOMWAPTR)                             0985
*      EOTR=MIN((TOMBFCNT-BOTR),253); /* INDEX FOR TRANS' END        */
         LCR   @12,@12                                             0986
         AL    @12,TOMBFCNT(,TOMWAPTR)                             0986
         LA    @00,253                                             0986
         CR    @12,@00                                             0986
         BNH   *+6
         LR    @12,@00                                             0986
         ST    @12,EOTR(,TOMWAPTR)                                 0986
*      TRT(IKTOBUF(1:EOTR),SBATAB); /* SCAN FOR BUFFER CNTL ORDERS */
         L     @12,TOMBFPTR(,TOMWAPTR)                             0987
         L     @15,EOTR(,TOMWAPTR)                                 0987
         BCTR  @15,0                                               0987
         EX    @15,@SB02437                                        0987
*      BC(8,NONFLG);                 /* NO BUFFER ORDER-TRANSL' DATA */
         BC    8,NONFLG                                            0988
*      EOTR=REG1-TOMBFPTR;           /* ORDER FOUND-TRANL' TO ORDER  */
         LR    @12,REG1                                            0989
         SL    @12,TOMBFPTR(,TOMWAPTR)                             0989
         ST    @12,EOTR(,TOMWAPTR)                                 0989
*      RFY IKTOBUF BASED(SCAN);      /* BASE RU AT REG1              */
*      IF IKTOBUF(1)=SBA×IKTOBUF(1)=EUA THEN /* SBA OR EUA?          */
         CLI   IKTOBUF(SCAN),X'11'                                 0991
         BE    @RT00991                                            0991
         CLI   IKTOBUF(SCAN),X'12'                                 0991
         BNE   @RF00991                                            0991
@RT00991 DS    0H                                                  0992
*        REG1=3;                     /* CNT TO SKIP SBA/EUA          */
         LA    REG1,3                                              0992
*      ELSE                          /* NEITHER SBA NOR EUA          */
*        IF IKTOBUF(1)=RA THEN       /* REPEAT TO ADDRESS?           */
         B     @RC00991                                            0993
@RF00991 CLI   IKTOBUF(SCAN),X'3C'                                 0993
         BNE   @RF00993                                            0993
*          REG1=4;                   /* SET CNT TO SKIP RA           */
         LA    REG1,4                                              0994
*        ELSE                        /* NOT RA                       */
*          IF IKTOBUF(1)=SF THEN /* START FIELD?                     */
         B     @RC00993                                            0995
@RF00993 CLI   IKTOBUF(SCAN),X'1D'                                 0995
         BNE   @RF00995                                            0995
*            REG1=2;                 /* SET CNT TO SKIP SF           */
         LA    REG1,2                                              0996
*          ELSE                      /* NOT SF               @ZA18919*/
*            IF IKTOBUF(1)=IC ×      /* INSERT CURSOR?       @ZA18919*/
*               IKTOBUF(1)=PT THEN   /* PROGRAM TAB?         @ZA18919*/
         B     @RC00995                                            0997
@RF00995 CLI   IKTOBUF(SCAN),X'13'                                 0997
         BE    @RT00997                                            0997
         CLI   IKTOBUF(SCAN),X'05'                                 0997
         BNE   @RF00997                                            0997
@RT00997 DS    0H                                                  0998
*              REG1=1;               /*                      @ZA18919*/
         LA    REG1,1                                              0998
*            ELSE;                   /*                      @ZA18919*/
@RF00997 DS    0H                                                  1000
*      RFY IKTOBUF BASED(TOMBFPTR);  /* RESTORE RU BASE PTR          */
@RC00995 DS    0H                                                  1000
@RC00993 DS    0H                                                  1000
@RC00991 DS    0H                                                  1001
*      IF (REG3<=EOTR) &             /* LEFT <= RIGHT INDEX? @ZA18919*/
*         (REG3=1×EOTR>=3) THEN      /* DON'T TRANS CMD OR WCC       */
         L     @12,EOTR(,TOMWAPTR)                                 1001
         CR    REG3,@12                                            1001
         BH    @RF01001                                            1001
         C     REG3,@CF00064                                       1001
         BE    @RT01001                                            1001
         C     @12,@CF00291                                        1001
         BL    @RF01001                                            1001
@RT01001 DS    0H                                                  1002
*NONFLG: TR(IKTOBUF(REG3:EOTR),USERTAB);/* DO USER TRANSLATION       */
NONFLG   L     @12,TOMBFPTR(,TOMWAPTR)                             1002
         ALR   @12,REG3                                            1002
         BCTR  @12,0                                               1002
         L     @15,EOTR(,TOMWAPTR)                                 1002
         SLR   @15,REG3                                            1002
         L     @14,TVWATABO(,TVWAPTR)                              1002
         EX    @15,@SB02439                                        1002
*      ELSE;                                                       1003
@RF01001 DS    0H                                                  1004
*      REG3=1;                                                     1004
         LA    REG3,1                                              1004
*      BOTR=BOTR+EOTR+REG1;          /* SET INDEX FOR NEXT TRANSLATE */
         L     @12,BOTR(,TOMWAPTR)                                 1005
         AL    @12,EOTR(,TOMWAPTR)                                 1005
         ALR   @12,REG1                                            1005
         ST    @12,BOTR(,TOMWAPTR)                                 1005
*    END;                            /* END OF USER TRANSLATION LOOP */
@DE00983 L     @12,BOTR(,TOMWAPTR)                                 1006
         C     @12,TOMBFCNT(,TOMWAPTR)                             1006
         BL    @DL00983                                            1006
*    RFY (REG1,REG2,SCAN,REG3) UNRSTD;                             1007
*  END;                              /* END OF USER TRANS    @ZA18919*/
*ELSE;                               /* NOT USER TRANSLATION @ZA18919*/
@RF00978 DS    0H                                                  1010
*IF TSBXASCI='1'B THEN               /* ASCII?                       */
         L     @12,PSAAOLD                                         1010
         L     @12,ASCBTSB(,@12)                                   1010
         L     @12,TSBEXTNT(,@12)                                  1010
         TM    TSBXASCI(@12),B'10000000'                           1010
         BNO   @RF01010                                            1010
*  DO;                               /* ASCII                @ZA18919*/
*    BOTR=0;                         /* INITIALIZE INDEX     @ZA18919*/
         SLR   @12,@12                                             1012
         ST    @12,BOTR(,TOMWAPTR)                                 1012
*    DO WHILE BOTR < TOMBFCNT;       /* DO TILL END OF RU    @ZA18919*/
         B     @DE01013                                            1013
@DL01013 DS    0H                                                  1014
*      TOMBFPTR=TOMGETMN+BOTR;       /* NEXT BYTE TO TRANS.  @ZA18919*/
         L     @12,BOTR(,TOMWAPTR)                                 1014
         L     @15,TOMGETMN(,TOMWAPTR)                             1014
         ALR   @15,@12                                             1014
         ST    @15,TOMBFPTR(,TOMWAPTR)                             1014
*      EOTR=MIN(TOMBFCNT-BOTR,256);  /* AMOUNT TO TRANSLATE  @ZA18919*/
         L     @14,TOMBFCNT(,TOMWAPTR)                             1015
         SLR   @14,@12                                             1015
         LA    @11,256                                             1015
         CR    @14,@11                                             1015
         BNH   *+6
         LR    @14,@11                                             1015
         ST    @14,EOTR(,TOMWAPTR)                                 1015
*      TR(IKTOBUF(1:EOTR),ASCITAB);  /* TRANSLATE INTO ASCII @ZA18919*/
         L     @11,EOTR(,TOMWAPTR)                                 1016
         BCTR  @11,0                                               1016
         L     @01,TVWAATBO(,TVWAPTR)                              1016
         EX    @11,@SB02441                                        1016
*      BOTR=BOTR + EOTR;             /* UPDATE INDEX         @ZA18919*/
         ALR   @12,@14                                             1017
         ST    @12,BOTR(,TOMWAPTR)                                 1017
*    END;                            /* END OF TRANS. LOOP   @ZA18919*/
@DE01013 L     @12,BOTR(,TOMWAPTR)                                 1018
         C     @12,TOMBFCNT(,TOMWAPTR)                             1018
         BL    @DL01013                                            1018
*  END;                              /* END OF ASCII TRANS.  @ZA18919*/
*ELSE;                               /* NOT ASCII                    */
@RF01010 DS    0H                                                  1021
*END TRANPROC;                       /* END OF TRANPROC              */
@EL00024 DS    0H                                                  1021
@EF00024 DS    0H                                                  1021
@ER00024 L     @14,12(,@13)                                        1021
         BR    @14                                                 1021
         EJECT
*END IKT3270O                        /* END OF IKT3270O              */
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IFGRPL  )                                        *
*/*%INCLUDE SYSLIB  (IFGRPLVT)                                        *
*/*%INCLUDE SYSLIB  (ISTRPLFB)                                        *
*/*%INCLUDE SYSLIB  (IHAASCB )                                        *
*/*%INCLUDE SYSLIB  (IHAPSA  )                                        *
*/*%INCLUDE SYSLIB  (IKJTSB  )                                        *
*/*%INCLUDE SYSLIB  (IKTTSBX )                                        *
*/*%INCLUDE SYSLIB  (IKTEQU  )                                        *
*/*%INCLUDE SYSLIB  (IKTTCAST)                                        *
*/*%INCLUDE SYSLIB  (IKTTOMWA)                                        *
*/*%INCLUDE SYSLIB  (IKTOPARM)                                        *
*/*%INCLUDE SYSLIB  (IKTTVWA )                                        *
*;                                                                 1022
@DATA    DS    0H
@CH02229 DC    H'1920'
@CH02246 DC    XL2'0001'
@SM02390 MVC   TOMWRKBF+7(0,TOMWAPTR),MSGDATA(@12)
@SB02392 TR    TOMWRKBF(0,TOMWAPTR),ASCITABO(@01)
@SM02405 MVC   IKTOBUF+2(0,@10),TQL1(@01)
@SB02407 TR    IKTOBUF+2(0,@10),EDITTAB
@SM02409 MVC   IKTOBUF+2(0,@10),TQL2(@01)
@SM02416 MVC   TOMWRKBF(0,TOMWAPTR),QBUF(@01)
@SM02418 MVC   IKTOBUF(0,@12),QBUF(@03)
@SB02420 TR    IKTOBUF(0,@12),FLSCRTAB
@SB02422 TRT   IKTOBUF(0,@03),ICTAB
@SB02425 TR    TOMWRKBF(0,TOMWAPTR),ASISTAB
@SM02427 MVC   IKTOBUF(0,@01),TOMWRKBF(TOMWAPTR)
@SB02429 TR    TOMWRKBF(0,TOMWAPTR),EDITTAB
@SM02431 MVC   IKTOBUF+2(0,@12),0(@01)
@SM02433 MVC   IKTOBUF(0,@12),@CB01960
@SM02435 MVC   IKTOBUF+2(0,@12),MSGDATA(@15)
@SB02437 TRT   IKTOBUF(0,@12),SBATAB
@SB02439 TR    IKTOBUF(0,@12),USERTAB(@14)
@SB02441 TR    IKTOBUF(0,@15),ASCITAB(@01)
@DATD    DSECT
         DS    0F
@SA00001 DS    18F
@SA00007 DS    1F
@SA00005 DS    1F
@SA00010 DS    1F
@SA00012 DS    1F
@SA00023 DS    1F
@SA00013 DS    1F
@SA00014 DS    1F
@SA00021 DS    1F
@SA00008 DS    1F
@SA00020 DS    1F
@SA00017 DS    1F
@SA00015 DS    1F
@SA00019 DS    1F
@SA00018 DS    1F
@AL00001 DS    1A
IKT3270O CSECT
         DS    0F
@CF00064 DC    F'1'
@CF00076 DC    F'2'
@CF00291 DC    F'3'
@CF00033 DC    F'6'
@CF00034 DC    F'7'
@CF00062 DC    F'8'
@CF01015 DC    F'14'
@CF00113 DC    F'15'
@CF02240 DC    F'18'
@CF02373 DC    F'19'
@CF01910 DC    F'40'
@CF01025 DC    F'64'
@CF01672 DC    F'80'
@CF02389 DC    F'-4'
@DATD    DSECT
         DS    0D
UNPKNUM  DS    CL8
PRMPTNUM DS    CL8
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IKT3270O CSECT
         NOPR  ((@ENDDATD-@DATD)/201*16)
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV02201 DC    V(IKTIDSX1)
         DS    0D
@CB02243 DC    X'11C1501DC85C5C5C1D4013'
@CB02350 DC    X'1DC85C5C5C1D4013'
@CB01907 DC    X'1DC84FC91D40'
@CB02241 DC    X'C21140401DC8'
@CB01911 DC    X'1DC84F1D40'
@CB02270 DC    X'F1C2114040'
@CB01960 DC    X'1D4013'
@CB01926 DC    X'240D'
@CB01928 DC    X'2415'
@CB01938 DC    X'F5C1'
@CB01958 DC    X'1D4C'
@CB01962 EQU   @CB01960
@CB01964 EQU   @CB02350
@CB01968 DC    X'F140'
@CB01970 DC    X'F1C1'
@CB02230 DC    X'5D7F'
@CB02231 DC    X'C75F'
EDITTAB  DS    CL256
         ORG   EDITTAB
@NM00105 DC    X'007A7A7A7A057A7A7A7A7A7A0C7A7A7A'
@NM00106 DC    X'107A7A7A7A7A7A7A7A197A7A1C7A1E1F'
@NM00107 DC    X'7A7A7A7A7A7A7A277A7A7A7A7A7A7A7A'
@NM00108 DC    X'7A7A327A7A7A7A377A7A7A7A7A7A7A3F'
@NM00109 DC    X'407A7A7A7A7A7A7A7A7A4A4B4C4D4E4F'
@NM00110 DC    X'507A7A7A7A7A7A7A7A7A5A5B5C5D5E5F'
@NM00111 DC    X'60617A7A7A7A7A7A7A7A6A6B6C6D6E6F'
@NM00112 DC    X'7A7A7A7A7A7A7A7A7A7A7A7B7C7D7E7F'
@NM00113 DC    X'7A8182838485868788897A7A7A7A7A7A'
@NM00114 DC    X'7A9192939495969798997A7A7A7A7A7A'
@NM00115 DC    X'7A7AA2A3A4A5A6A7A8A97A7A7A7A7A7A'
@NM00116 DC    X'7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A7A'
@NM00117 DC    X'7AC1C2C3C4C5C6C7C8C97A7A7A7A7A7A'
@NM00118 DC    X'7AD1D2D3D4D5D6D7D8D97A7A7A7A7A7A'
@NM00119 DC    X'7A7AE2E3E4E5E6E7E8E97A7A7A7A7A7A'
@NM00120 DC    X'F0F1F2F3F4F5F6F7F8F97A7A7A7A7A7A'
         ORG   EDITTAB+256
ASISTAB  DS    CL256
         ORG   ASISTAB
@NM00121 DC    X'007A7A7A7A057A0708090A0B0C7A0E0F'
@NM00122 DC    X'1011127A7A7A7A7A18191A1B1C1D1E1F'
@NM00123 DC    X'202122237A257A2728292A2B2C7A2E2F'
@NM00124 DC    X'303132333435363738393A3B3C7A3E3F'
@NM00125 DC    X'404142434445464748494A4B4C4D4E4F'
@NM00126 DC    X'505152535455565758595A5B5C5D5E5F'
@NM00127 DC    X'606162636465666768696A6B6C6D6E6F'
@NM00128 DC    X'707172737475767778797A7B7C7D7E7F'
@NM00129 DC    X'808182838485868788898A8B8C8D8E8F'
@NM00130 DC    X'909192939495969798999A9B9C9D9E9F'
@NM00131 DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
@NM00132 DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
@NM00133 DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
@NM00134 DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
@NM00135 DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
@NM00136 DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
         ORG   ASISTAB+256
FLSCRTAB DS    CL256
         ORG   FLSCRTAB
@NM00137 DC    X'007A7A7A7A057A0708090A0B0C7A0E0F'
@NM00138 DC    X'101112137A7A7A7A18191A1B1C1D1E1F'
@NM00139 DC    X'20212223247A7A7A28292A2B2C7A2E2F'
@NM00140 DC    X'303132333435367A38393A3B3C7A3E3F'
@NM00141 DC    X'404142434445464748494A4B4C4D4E4F'
@NM00142 DC    X'505152535455565758595A5B5C5D5E5F'
@NM00143 DC    X'606162636465666768696A6B6C6D6E6F'
@NM00144 DC    X'707172737475767778797A7B7C7D7E7F'
@NM00145 DC    X'808182838485868788898A8B8C8D8E8F'
@NM00146 DC    X'909192939495969798999A9B9C9D9E9F'
@NM00147 DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'
@NM00148 DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'
@NM00149 DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'
@NM00150 DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'
@NM00151 DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'
@NM00152 DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'
         ORG   FLSCRTAB+256
SBATAB   DS    CL256
         ORG   SBATAB
@NM00153 DC    X'00000000000500000000000000000000'
@NM00154 DC    X'001112130000000000000000001D0000'
@NM00155 DC    X'00000000000000000000000000000000'
@NM00156 DC    X'0000000000000000000000003C000000'
@NM00157 DC    X'00000000000000000000000000000000'
@NM00158 DC    X'00000000000000000000000000000000'
@NM00159 DC    X'00000000000000000000000000000000'
@NM00160 DC    X'00000000000000000000000000000000'
@NM00161 DC    X'00000000000000000000000000000000'
@NM00162 DC    X'00000000000000000000000000000000'
@NM00163 DC    X'00000000000000000000000000000000'
@NM00164 DC    X'00000000000000000000000000000000'
@NM00165 DC    X'00000000000000000000000000000000'
@NM00166 DC    X'00000000000000000000000000000000'
@NM00167 DC    X'00000000000000000000000000000000'
@NM00168 DC    X'00000000000000000000000000000000'
         ORG   SBATAB+256
BFADRTAB DS    CL64
         ORG   BFADRTAB
@NM00169 DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'
@NM00170 DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'
@NM00171 DC    X'6061E2E3E4E5E6E7E8E96A6B6C6D6E6F'
@NM00172 DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'
         ORG   BFADRTAB+64
ICTAB    DS    CL256
         ORG   ICTAB
@NM00173 DC    X'00000000000000000000000000000000'
@NM00174 DC    X'00000013000000000000000000000000'
@NM00175 DC    X'00000000000000000000000000000000'
@NM00176 DC    X'00000000000000000000000000000000'
@NM00177 DC    X'00000000000000000000000000000000'
@NM00178 DC    X'00000000000000000000000000000000'
@NM00179 DC    X'00000000000000000000000000000000'
@NM00180 DC    X'00000000000000000000000000000000'
@NM00181 DC    X'00000000000000000000000000000000'
@NM00182 DC    X'00000000000000000000000000000000'
@NM00183 DC    X'00000000000000000000000000000000'
@NM00184 DC    X'00000000000000000000000000000000'
@NM00185 DC    X'00000000000000000000000000000000'
@NM00186 DC    X'00000000000000000000000000000000'
@NM00187 DC    X'00000000000000000000000000000000'
@NM00188 DC    X'00000000000000000000000000000000'
         ORG   ICTAB+256
PATCH    DC    75F'0'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
TOMWAPTR EQU   @08
TVWAPTR  EQU   @09
REG0     EQU   @00
REG1     EQU   @01
REG2     EQU   @02
REG3     EQU   @03
REG4     EQU   @04
REG5     EQU   @05
REG6     EQU   @06
REG7     EQU   @07
REG13    EQU   @13
REG15    EQU   @15
SCAN     EQU   @01
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTSHS   EQU   CVTXTNT2+40
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLVTEXT EQU   IFGRPL+76
RPLFDBK2 EQU   RPLVTEXT+12
RPLSSNSI EQU   RPLFDBK2
RPLDSB   EQU   RPLSSNSI
RPLDSB1  EQU   RPLDSB
RPLSSEI  EQU   RPLDSB1
RPLDSB2  EQU   RPLDSB+1
RPLUSNSI EQU   RPLFDBK2+2
RPLOPTC3 EQU   RPLVTEXT+20
RPLOPT9  EQU   RPLOPTC3
RPLOPT10 EQU   RPLOPTC3+1
RPLOPT11 EQU   RPLOPTC3+2
RPLOPT12 EQU   RPLOPTC3+3
RPLOSENS EQU   RPLVTEXT+24
RPLSSNSO EQU   RPLOSENS
RPLSSEO  EQU   RPLSSNSO
RPLOF16  EQU   0
RPLRH3   EQU   RPLOF16
RPLSRTYP EQU   RPLOF16+1
RPLSTYPE EQU   RPLSRTYP
RPLRTYPE EQU   RPLSRTYP
RPLCHN   EQU   RPLOF16+2
RPLVTFL1 EQU   RPLOF16+3
RPLVTFL2 EQU   RPLOF16+4
RPLPOSTV EQU   RPLVTFL2
RPLRESP  EQU   RPLVTFL2
RPLCNTRL EQU   RPLOF16+5
RPLCNTDF EQU   RPLCNTRL
RPLCNTDC EQU   RPLCNTRL+1
RPLCNTSC EQU   RPLCNTRL+2
RPLOF60  EQU   0
RPLOBSQ  EQU   RPLOF60+4
RPLIBSQ  EQU   RPLOF60+5
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBTSB  EQU   ASCB+60
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
TSB      EQU   0
TSBASCBA EQU   TSB
TSBSTAT  EQU   TSBASCBA
TSBFLG1  EQU   TSB+4
TSBIFLSH EQU   TSBFLG1
TSBLNSZ  EQU   TSB+8
TSBFLG2  EQU   TSB+16
TSBAUTON EQU   TSBFLG2
TSBAULST EQU   TSBFLG2
TSBSTAUT EQU   TSBFLG2
TSBFLG3  EQU   TSB+24
TSBSPIT  EQU   TSBFLG3
TSBNOBRK EQU   TSBFLG3
TSBFLG5  EQU   TSB+25
TSBTERMC EQU   TSB+26
TSBTERM1 EQU   TSBTERMC
TSBTERM2 EQU   TSBTERMC+1
TSBSTCC  EQU   TSB+34
TSBLNNO  EQU   TSB+40
TSBFLG4  EQU   TSB+41
TSBAUTOS EQU   TSB+48
TSBRCB   EQU   TSB+64
TSBLINKA EQU   TSBRCB+4
TSBTPOST EQU   TSB+72
TSBTPFLG EQU   TSBTPOST
TSBMINL  EQU   TSB+84
TSBEXTNT EQU   TSB+96
TSBX     EQU   0
TSBXFLG1 EQU   TSBX+32
TSBXASCI EQU   TSBXFLG1
TSBXTVWA EQU   TSBX+36
TSBXTERM EQU   TSBX+72
TSBXTMBF EQU   TSBXTERM+2
TCAST    EQU   0
TCASUSER EQU   TCAST+4
TCASMSGS EQU   TCAST+52
TCASOQM  EQU   TCAST+76
TCASFLG1 EQU   TCAST+88
TCASFLG2 EQU   TCAST+89
TOMWA    EQU   240
TOMAUTOD EQU   TOMWA
TOMWRKBF EQU   TOMWA+200
SAVEREGS EQU   TOMWA+280
TOMBFCNT EQU   TOMWA+352
TOMMVCNT EQU   TOMWA+356
TOMQDATA EQU   TOMWA+360
TOMWRKVI EQU   TOMWA+364
TOMWRKVJ EQU   TOMWA+368
TOMNWLSZ EQU   TOMWA+372
TOMQBPTR EQU   TOMWA+376
TOMGETMN EQU   TOMWA+380
TOMBUFSZ EQU   TOMWA+384
TOMBFPTR EQU   TOMWA+388
TOMWRKSZ EQU   TOMWA+392
TOMSCPRM EQU   TOMWA+396
TOMREQCD EQU   TOMSCPRM
TOMPLNNO EQU   TOMSCPRM+1
TOMLNSZ  EQU   TOMSCPRM+2
TOMLNNO  EQU   TOMSCPRM+4
TOMPLSZ  EQU   TOMSCPRM+8
TOMLNCNT EQU   TOMSCPRM+12
TOMFMTDA EQU   TOMSCPRM+16
TOMSBACD EQU   TOMFMTDA
TOMFMTAD EQU   TOMFMTDA+1
TOMFMATT EQU   TOMFMTDA+3
TOMLNADR EQU   TOMSCPRM+21
TOMROWAD EQU   TOMLNADR
TOMCOLAD EQU   TOMLNADR+1
TOMWFLGS EQU   TOMWA+421
TOMWFLG1 EQU   TOMWFLGS
TOMEDSAV EQU   TOMWFLG1
TOMENDBF EQU   TOMWFLG1
TOMCURST EQU   TOMWFLG1
TOMENDSC EQU   TOMWFLG1
TOMEXDTA EQU   TOMWFLG1
TOMEXBRU EQU   TOMWFLG1
TOMOWAIT EQU   TOMWFLG1
TOMWFLG2 EQU   TOMWFLGS+1
TOMKBULK EQU   TOMWFLG2
TOMALARM EQU   TOMWFLG2
TOMERMG9 EQU   TOMWFLG2
TOMERASE EQU   TOMWFLG2
TOMSCHED EQU   TOMWFLG2
TOMSTCUR EQU   TOMWFLG2
TOMERLCT EQU   TOMWFLG2
TOMTRSBA EQU   TOMWFLG2
TOMWFLG3 EQU   TOMWFLGS+2
TOMBPREQ EQU   TOMWFLG3
TOMBPRSP EQU   TOMWFLG3
TOMBRKPG EQU   TOMWFLG3
TOMWRLG4 EQU   TOMWFLGS+3
TOMBRKMG EQU   TOMWRLG4
TOMEB    EQU   TOMWRLG4
TOMPGNSV EQU   TOMWRLG4
TOMUPARM EQU   TOMWA+428
TOMUPRM1 EQU   TOMUPARM
TOMUPRM2 EQU   TOMUPARM+4
TOMUPRM3 EQU   TOMUPARM+8
TOMUPRM4 EQU   TOMUPARM+12
TOMUPRM5 EQU   TOMUPARM+16
TOMUPRM6 EQU   TOMUPARM+20
TOMUPRM7 EQU   TOMUPARM+24
TOMUPRM8 EQU   TOMUPARM+28
TOMCOLMN EQU   TOMWA+464
TOMXCNT  EQU   TOMWA+468
OPARMS   EQU   TOMWA+484
OPBUFADR EQU   OPARMS
OPREQ    EQU   OPARMS+4
OPRC     EQU   OPARMS+5
OPBFSZ   EQU   OPARMS+6
OPFLAGS  EQU   OPARMS+8
OPOPTNS  EQU   OPFLAGS+1
OPHOLD   EQU   OPOPTNS
OPBRK    EQU   OPOPTNS
OPEDIT   EQU   OPOPTNS
OPASID   EQU   OPOPTNS
OPNXFLGS EQU   OPARMS+16
OPNXBRK  EQU   OPNXFLGS+1
OPNXEDIT EQU   OPNXFLGS+1
OPNXASID EQU   OPNXFLGS+1
TVWA     EQU   0
TVWATOMW EQU   TVWA+12
TVWATOPQ EQU   TVWA+16
TVWAGMPT EQU   TVWA+68
TVWAATTN EQU   TVWA+85
TVWATQL1 EQU   TVWA+86
TVWATQL2 EQU   TVWA+87
TVWAFLG7 EQU   TVWA+110
TVWABKPG EQU   TVWAFLG7
TVWALNSV EQU   TVWA+111
TVWAECBL EQU   TVWA+120
TVWADLST EQU   TVWA+132
TVWAFLG1 EQU   TVWA+144
TVWATAS  EQU   TVWAFLG1
TVWAXSCD EQU   TVWAFLG1
TVWAULK  EQU   TVWAFLG1
TVWAFLG2 EQU   TVWA+145
TVWAPGN  EQU   TVWAFLG2
TVWAERMG EQU   TVWAFLG2
TVWABKMG EQU   TVWAFLG2
TVWAFLG3 EQU   TVWA+146
TVWABRIN EQU   TVWAFLG3
TVWAAIGN EQU   TVWAFLG3
TVWATRAN EQU   TVWAFLG3
TVWAFLG4 EQU   TVWA+147
TVWAFMSC EQU   TVWAFLG4
TVWADOOQ EQU   TVWAFLG4
TVWAKBDL EQU   TVWAFLG4
TVWANOFB EQU   TVWAFLG4
TVWAFLSC EQU   TVWAFLG4
TVWADARC EQU   TVWAFLG4
TVWAFLG5 EQU   TVWA+150
TVWASCAN EQU   TVWAFLG5
TVWAFSM  EQU   TVWAFLG5
TVWAWO   EQU   TVWAFLG5
TVWAFSW  EQU   TVWAFLG5
TVWANFSP EQU   TVWAFLG5
TVWALNCT EQU   TVWA+151
TVWATABO EQU   TVWA+156
TVWAATBO EQU   TVWA+172
TVWAFLG6 EQU   TVWA+182
TVWAIOTR EQU   TVWAFLG6
MSGADR   EQU   0
MSGDATA  EQU   2
MSGSIZE  EQU   0
QBUF     EQU   0
IKTOBUF  EQU   0
IKTQMOUT EQU   0
ASCITABO EQU   0
RDBFGETM EQU   0
DATALENG EQU   RDBFGETM+4
CNTLHEAD EQU   RDBFGETM+8
SBASEQEN EQU   CNTLHEAD+2
CURSSBA@ EQU   SBASEQEN+1
ICCURSOR EQU   0
SBACDE   EQU   ICCURSOR
CURSADDR EQU   ICCURSOR+1
ICORDER  EQU   ICCURSOR+3
TOPQ     EQU   0
TQL1     EQU   TOPQ
TQL2     EQU   TOPQ+80
ASCITAB  EQU   0
USERTAB  EQU   0
ISTRPL   EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
CVTTCASP EQU   CVTS01+664
PSARSVTE EQU   PSARSVT
I        EQU   TOMWRKVI
J        EQU   TOMWRKVJ
TEMPMVCT EQU   J
EOTR     EQU   TOMWRKVI
BOTR     EQU   TOMWRKVJ
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTIRM   EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
@NM00189 EQU   SBASEQEN
CMDWCCDE EQU   CNTLHEAD
GETMLENG EQU   RDBFGETM
TVWAEND  EQU   TVWA+216
@NM00104 EQU   TVWA+208
TVWAUSRA EQU   TVWA+200
@NM00103 EQU   TVWA+192
TVWAFRWO EQU   TVWA+188
TVWAFRWI EQU   TVWA+184
TVWARSHW EQU   TVWA+183
@NM00102 EQU   TVWAFLG6
TVWAINB  EQU   TVWAFLG6
TVWAFMEW EQU   TVWAFLG6
TVWARCDT EQU   TVWAFLG6
TVWAIOP  EQU   TVWAFLG6
TVWAISYS EQU   TVWAFLG6
@NM00101 EQU   TVWA+180
TVWAQMLB EQU   TVWA+176
TVWAATBI EQU   TVWA+168
TVWATRNM EQU   TVWA+160
TVWATABI EQU   TVWA+152
TVWAP1ST EQU   TVWAFLG5
TVWAPRMT EQU   TVWAFLG5
TVWATIR  EQU   TVWAFLG5
@NM00100 EQU   TVWA+148
TVWARCRS EQU   TVWAFLG4
TVWAQMEV EQU   TVWAFLG4
TVWATRDF EQU   TVWAFLG3
TVWAQLBU EQU   TVWAFLG3
TVWAQMIO EQU   TVWAFLG3
TVWAQMRT EQU   TVWAFLG3
TVWASDSG EQU   TVWAFLG3
TVWABIR  EQU   TVWAFLG2
TVWARTRY EQU   TVWAFLG2
TVWAGERR EQU   TVWAFLG2
TVWASCD  EQU   TVWAFLG2
TVWABFC  EQU   TVWAFLG2
TVWAOOPS EQU   TVWAFLG1
TVWALTE  EQU   TVWAFLG1
TVWATID  EQU   TVWAFLG1
TVWATIS  EQU   TVWAFLG1
TVWATOD  EQU   TVWAFLG1
TVWADIN3 EQU   TVWADLST+8
TVWADIN2 EQU   TVWADLST+4
TVWADIN1 EQU   TVWADLST
TVWAECB3 EQU   TVWAECBL+8
TVWAECB2 EQU   TVWAECBL+4
TVWAECB1 EQU   TVWAECBL
TVWATECB EQU   TVWA+116
TVWAECB  EQU   TVWA+112
@NM00099 EQU   TVWAFLG7
TVWACHSE EQU   TVWAFLG7
TVWATOBB EQU   TVWAFLG7
TVWARISW EQU   TVWAFLG7
TVWARET  EQU   TVWAFLG7
TVWARDBF EQU   TVWAFLG7
TVWASND1 EQU   TVWAFLG7
TVWAVSZ  EQU   TVWA+108
TVWAVST  EQU   TVWA+104
TVWAEXL  EQU   TVWA+100
TVWARPL  EQU   TVWA+96
TVWANIB  EQU   TVWA+92
TVWAACB  EQU   TVWA+88
TVWACHNL EQU   TVWA+84
TVWALBUF EQU   TVWA+80
TVWAHBUF EQU   TVWA+76
TVWACLSZ EQU   TVWA+74
TVWARTR  EQU   TVWA+72
TVWATCB  EQU   TVWA+64
TVWAUSMN EQU   TVWA+60
TVWACPID EQU   TVWA+56
TVWAEOQ  EQU   TVWA+52
TVWANOM  EQU   TVWA+48
TVWABOQ  EQU   TVWA+44
TVWAEIQ  EQU   TVWA+40
TVWANIM  EQU   TVWA+36
TVWABIQ  EQU   TVWA+32
TVWAQMWA EQU   TVWA+28
TVWALLWA EQU   TVWA+24
TVWABFPT EQU   TVWA+20
TVWATIMW EQU   TVWA+8
TVWAPPL  EQU   TVWA
TOMWAEND EQU   TOMWA+504
@NM00098 EQU   OPNXFLGS+3
@NM00097 EQU   OPNXFLGS+2
@NM00096 EQU   OPNXFLGS+1
OPNXHOLD EQU   OPNXFLGS+1
@NM00095 EQU   OPNXFLGS
OPNXADTP EQU   OPNXFLGS
OPNXALC  EQU   OPNXFLGS
OPNXBFSZ EQU   OPARMS+14
@NM00094 EQU   OPARMS+12
@NM00093 EQU   OPFLAGS+3
@NM00092 EQU   OPFLAGS+2
@NM00091 EQU   OPOPTNS
@NM00090 EQU   OPFLAGS
OPADTOP  EQU   OPFLAGS
OPALLOC  EQU   OPFLAGS
@NM00089 EQU   TOMWA+476
TOMCOLSV EQU   TOMWA+472
TOMERCNT EQU   TOMWA+460
@NM00088 EQU   TOMWFLGS+4
@NM00087 EQU   TOMWRLG4
TOMEBSV  EQU   TOMWRLG4
@NM00086 EQU   TOMWRLG4
TOMENDB  EQU   TOMWFLG3
TOMESEND EQU   TOMWFLG3
TOMEMAIN EQU   TOMWFLG3
TOMBRKSW EQU   TOMWFLG3
TOMINITS EQU   TOMWFLG3
@NM00085 EQU   TOMSCPRM+23
@NM00084 EQU   TOMSCPRM+3
@NM00083 EQU   TOMWA+393
TCASTEND EQU   TCAST+136
TCASDUMP EQU   TCAST+132
TCASSCHD EQU   TCAST+128
TCASTPND EQU   TCAST+124
TCASOMJR EQU   TCAST+120
@NM00082 EQU   TCAST+118
TCASBR14 EQU   TCAST+116
TCASATTN EQU   TCAST+112
TCASASCI EQU   TCAST+108
TCASTTQH EQU   TCAST+104
@NM00081 EQU   TCAST+102
@NM00080 EQU   TCAST+100
@NM00079 EQU   TCAST+98
@NM00078 EQU   TCAST+96
TCASASCB EQU   TCAST+92
@NM00077 EQU   TCAST+90
@NM00076 EQU   TCASFLG2
@NM00075 EQU   TCASFLG1
TCASNACT EQU   TCASFLG1
TCASVSD  EQU   TCASFLG1
TCASABND EQU   TCASFLG1
TCASMDSW EQU   TCASFLG1
TCASBKMD EQU   TCASFLG1
TCASLTE  EQU   TCAST+84
TCASEXIT EQU   TCAST+80
TCASIQM  EQU   TCAST+72
TCASTSB  EQU   TCAST+68
TCASTTL  EQU   TCAST+64
TCASWA   EQU   TCAST+60
TCASFRR  EQU   TCAST+56
TCASDATO EQU   TCAST+48
TCASDATI EQU   TCAST+44
TCASXECB EQU   TCAST+40
TCASTID  EQU   TCAST+32
@NM00074 EQU   TCAST+31
TCASCHNL EQU   TCAST+30
TCASCRSZ EQU   TCAST+28
TCASLBUF EQU   TCAST+24
TCASHBUF EQU   TCAST+20
TCASCLSZ EQU   TCAST+18
TCASRCON EQU   TCAST+16
TCASACBP EQU   TCAST+8
TCASUMAX EQU   TCASUSER+2
TCASUSEC EQU   TCASUSER
TCASID   EQU   TCAST
TSBXEND  EQU   TSBX+120
@NM00073 EQU   TSBX+116
TSBXBIND EQU   TSBX+80
TSBXRPL  EQU   TSBX+76
@NM00072 EQU   TSBXTERM+1
TSBXTMTP EQU   TSBXTERM
TSBXAIND EQU   TSBX+70
TSBXRSZO EQU   TSBX+69
TSBXRSZI EQU   TSBX+68
TSBXLBUF EQU   TSBX+64
TSBXCSAP EQU   TSBX+60
TSBXSRB  EQU   TSBX+56
TSBXSRBI EQU   TSBX+52
@NM00071 EQU   TSBX+48
TSBXTOM  EQU   TSBX+44
TSBXTIM  EQU   TSBX+40
@NM00070 EQU   TSBX+33
@NM00069 EQU   TSBXFLG1
TSBXWREC EQU   TSBXFLG1
TSBXLOGF EQU   TSBXFLG1
TSBXACTV EQU   TSBXFLG1
TSBXUID  EQU   TSBX+24
@NM00068 EQU   TSBX+16
@NM00067 EQU   TSBX+12
TSBXECB  EQU   TSBX+8
TSBXBCK  EQU   TSBX+4
TSBXFWD  EQU   TSBX
TSBEND   EQU   TSB+120
TSBSF1   EQU   TSB+112
TSBTRMID EQU   TSB+104
TSBALTC  EQU   TSB+103
TSBALTR  EQU   TSB+102
TSBPRMC  EQU   TSB+101
TSBPRMR  EQU   TSB+100
TSBPSWD  EQU   TSB+88
TSBLECB  EQU   TSBMINL
TSBLINE  EQU   TSB+82
TSBSTAX  EQU   TSB+81
TSBATTNC EQU   TSB+80
TSBF1V   EQU   TSBTPOST+7
TSBF1M   EQU   TSBTPOST+6
TSBF2V   EQU   TSBTPOST+5
TSBF2M   EQU   TSBTPOST+4
TSBFLAGV EQU   TSBTPOST+3
TSBFLAGM EQU   TSBTPOST+2
TSBSBASV EQU   TSBTPOST+1
@NM00066 EQU   TSBTPFLG
@NM00065 EQU   TSBTPFLG
@NM00064 EQU   TSBTPFLG
@NM00063 EQU   TSBTPFLG
TSBNEWID EQU   TSBTPFLG
TSBTPAYI EQU   TSBTPFLG
TSBTPQCB EQU   TSBTPFLG
TSBPOSTO EQU   TSBTPFLG
TSBLINKB EQU   TSBLINKA+1
TSBPRI   EQU   TSBLINKA
TSBRQCB  EQU   TSBRCB
TSBCTCB  EQU   TSB+60
TSBERSDS EQU   TSB+56
TSBAUTOI EQU   TSB+52
TSBATNCC EQU   TSB+44
TSBASRCE EQU   TSB+42
TSBHLDL  EQU   TSBFLG4
TSBGETBF EQU   TSBFLG4
TSBCANC  EQU   TSBFLG4
TSBHOLD  EQU   TSBFLG4
TSBHUNG  EQU   TSBFLG4
TSBOWAIT EQU   TSBFLG4
TSBIWAIT EQU   TSBFLG4
TSBOCAB  EQU   TSBFLG4
TSBATNTC EQU   TSB+38
TSBATNLC EQU   TSB+36
TSBCHDCC EQU   TSBSTCC+1
TSBLNDCC EQU   TSBSTCC
TSBWTJID EQU   TSB+32
TSBECB   EQU   TSB+28
TSBC1050 EQU   TSBTERM2
@NM00062 EQU   TSBTERM2
@NM00061 EQU   TSBTERM2
@NM00060 EQU   TSBTERM2
@NM00059 EQU   TSBTERM2
TSBCTWX  EQU   TSBTERM2
@NM00058 EQU   TSBTERM2
@NM00057 EQU   TSBTERM2
@NM00056 EQU   TSBTERM1
@NM00055 EQU   TSBTERM1
@NM00054 EQU   TSBTERM1
TSBC2741 EQU   TSBTERM1
TSBC5041 EQU   TSBTERM1
TSBCATTN EQU   TSBTERM1
TSBCBRK  EQU   TSBTERM1
TSBCIHBN EQU   TSBTERM1
TSBVTAM  EQU   TSBFLG5
TSBKEYS  EQU   TSBFLG5
@NM00053 EQU   TSBFLG5
TSBATMP  EQU   TSBFLG5
TSBNFLOP EQU   TSBFLG3
TSBTPUT  EQU   TSBFLG3
TSBAWOIP EQU   TSBFLG3
TSBNBKSP EQU   TSBFLG3
TSBTJMSG EQU   TSBFLG3
TSBATTN  EQU   TSBFLG3
TSBIBFP  EQU   TSB+21
TSBNIBF  EQU   TSB+20
TSBITBFP EQU   TSB+17
TSBSATN2 EQU   TSBFLG2
TSBSATN1 EQU   TSBFLG2
TSBAUTOC EQU   TSBFLG2
TSBBRKIN EQU   TSBFLG2
TSBBIPI  EQU   TSBFLG2
TSBOBFP  EQU   TSB+13
TSBNOBF  EQU   TSB+12
TSBOTBFP EQU   TSB+9
TSBWTCB  EQU   TSB+5
TSBTJBF  EQU   TSBFLG1
TSBTJIP  EQU   TSBFLG1
TSBTJOW  EQU   TSBFLG1
TSBWOWIP EQU   TSBFLG1
TSBOWIP  EQU   TSBFLG1
TSBOFLSH EQU   TSBFLG1
TSBANSR  EQU   TSBFLG1
TSBASCB  EQU   TSBASCBA+1
TSBATNLD EQU   TSBSTAT
TSB3270  EQU   TSBSTAT
TSBDISC  EQU   TSBSTAT
TSBITOFF EQU   TSBSTAT
TSBNOBUF EQU   TSBSTAT
TSBDSPLY EQU   TSBSTAT
TSBLWAIT EQU   TSBSTAT
TSBINUSE EQU   TSBSTAT
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBQSVC EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBCSCB EQU   ASCB+56
ASCBRSM  EQU   ASCB+52
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
RPLSEQNO EQU   RPLOF60+6
@NM00028 EQU   RPLIBSQ
RPLIINV  EQU   RPLIBSQ
RPLINEG  EQU   RPLIBSQ
RPLIPOS  EQU   RPLIBSQ
RPLIIGN  EQU   RPLIBSQ
RPLIRSET EQU   RPLIBSQ
RPLITST  EQU   RPLIBSQ
RPLISET  EQU   RPLIBSQ
@NM00027 EQU   RPLOBSQ
RPLOINV  EQU   RPLOBSQ
RPLONEG  EQU   RPLOBSQ
RPLOPOS  EQU   RPLOBSQ
RPLOIGN  EQU   RPLOBSQ
RPLORSET EQU   RPLOBSQ
RPLOTST  EQU   RPLOBSQ
RPLOSET  EQU   RPLOBSQ
RPLIBSQV EQU   RPLOF60+2
RPLOBSQV EQU   RPLOF60
@NM00026 EQU   RPLCNTSC
RPLRSHUT EQU   RPLCNTSC
RPLRQR   EQU   RPLCNTSC
RPLSHUTC EQU   RPLCNTSC
RPLSHUTD EQU   RPLCNTSC
RPLSTSN  EQU   RPLCNTSC
RPLCLEAR EQU   RPLCNTSC
RPLSDT   EQU   RPLCNTSC
@NM00025 EQU   RPLCNTDC
RPLSIGNL EQU   RPLCNTDC
RPLLUS   EQU   RPLCNTDC
RPLRTR   EQU   RPLCNTDC
RPLBID   EQU   RPLCNTDC
@NM00024 EQU   RPLCNTDF
RPLQI    EQU   RPLCNTDF
RPLRELQ  EQU   RPLCNTDF
RPLCHASE EQU   RPLCNTDF
RPLQEC   EQU   RPLCNTDF
RPLQC    EQU   RPLCNTDF
RPLCNCEL EQU   RPLCNTDF
RPLDATA  EQU   RPLCNTDF
RPLRRN   EQU   RPLRESP
RPLNFME  EQU   RPLRESP
RPLEX    EQU   RPLRESP
@NM00023 EQU   RPLRESP
@NM00022 EQU   RPLPOSTV
RPLSCHED EQU   RPLPOSTV
@NM00021 EQU   RPLVTFL1
RPLAUTUS EQU   RPLVTFL1
RPLVTUSE EQU   RPLVTFL1
@NM00020 EQU   RPLVTFL1
@NM00019 EQU   RPLCHN
RPLONLY  EQU   RPLCHN
RPLLAST  EQU   RPLCHN
RPLMIDLE EQU   RPLCHN
RPLFIRST EQU   RPLCHN
@NM00018 EQU   RPLRTYPE
RPLDFASY EQU   RPLRTYPE
RPLNFSYN EQU   RPLRTYPE
RPLRRESP EQU   RPLRTYPE
@NM00017 EQU   RPLSTYPE
RPLSRESP EQU   RPLSTYPE
@NM00016 EQU   RPLRH3
RPLCSI   EQU   RPLRH3
RPLCHREQ EQU   RPLRH3
RPLCMD   EQU   RPLRH3
RPLEB    EQU   RPLRH3
RPLBB    EQU   RPLRH3
RPLSIGDA EQU   RPLVTEXT+32
RPLSAV13 EQU   RPLVTEXT+28
RPLUSNSO EQU   RPLOSENS+2
RPLSSMO  EQU   RPLSSNSO+1
@NM00015 EQU   RPLSSEO
RPLRRO   EQU   RPLSSEO
RPLFIO   EQU   RPLSSEO
RPLSTATO EQU   RPLSSEO
RPLCPMO  EQU   RPLSSEO
@NM00014 EQU   RPLSSEO
RPLFMHDR EQU   RPLOPT12
@NM00013 EQU   RPLOPT12
@NM00012 EQU   RPLOPT12
@NM00011 EQU   RPLOPT12
RPLNIBTK EQU   RPLOPT12
RPLTRUNC EQU   RPLOPT12
RPLKEEP  EQU   RPLOPT12
@NM00010 EQU   RPLOPT12
RPLRSVE8 EQU   RPLOPT11
RPLRSVE7 EQU   RPLOPT11
RPLRSVE6 EQU   RPLOPT11
RPLRSVE5 EQU   RPLOPT11
RPLRSVE4 EQU   RPLOPT11
RPLSTOP  EQU   RPLOPT11
RPLSTART EQU   RPLOPT11
RPLQUIES EQU   RPLOPT11
RPLRSVI6 EQU   RPLOPT10
RPLRSVI5 EQU   RPLOPT10
RPLRSVI4 EQU   RPLOPT10
RPLRSVI3 EQU   RPLOPT10
RPLRSVI2 EQU   RPLOPT10
RPLSPARM EQU   RPLOPT10
RPLDSPLY EQU   RPLOPT10
RPLBSCID EQU   RPLOPT10
RPLTOPL  EQU   RPLOPT9
RPLCIDE  EQU   RPLOPT9
RPLRNNM  EQU   RPLOPT9
RPLAPPST EQU   RPLOPT9
RPLCOUNT EQU   RPLOPT9
RPLTERMS EQU   RPLOPT9
RPLDEVCH EQU   RPLOPT9
RPLLOGON EQU   RPLOPT9
RPLUSFLD EQU   RPLVTEXT+16
RPLESR2  EQU   RPLUSNSI+1
RPLESR1  EQU   RPLUSNSI
RPLSSMI  EQU   RPLDSB2
@NM00009 EQU   RPLSSEI
RPLRRI   EQU   RPLSSEI
RPLFII   EQU   RPLSSEI
RPLSTATI EQU   RPLSSEI
RPLCPMI  EQU   RPLSSEI
RPLPATHI EQU   RPLSSEI
RPLARCLN EQU   RPLVTEXT+8
RPLAARLN EQU   RPLVTEXT+4
RPLAAREA EQU   RPLVTEXT
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00008 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00007 EQU   RPLRBAR+3
@NM00006 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00005 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
RPLBOP   EQU   RPLOPT4
@NM00004 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00003 EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLDACB  EQU   RPLCOMN+24
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTSHSB  EQU   CVTSHS
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00052 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00051 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00050 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00049 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSARV063 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00048 EQU   FLCFSA
@NM00047 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00046 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00045 EQU   FLCIOA
@NM00044 EQU   FLCMCLA+15
@NM00043 EQU   FLCMCLA+14
@NM00042 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00041 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00040 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00039 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00038 EQU   FLCPER
@NM00037 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00036 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00035 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00034 EQU   FLCPIILC
@NM00033 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00032 EQU   FLCSVILC
@NM00031 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00030 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00029 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00133 EQU   @EL00006
@RC00163 EQU   @RC00162
@RC00183 EQU   @RC00170
@RC00171 EQU   @RC00170
@RC00307 EQU   @RC00304
@RC00305 EQU   @RC00304
@RC00490 EQU   @RC00489
@RC00455 EQU   @RC00434
@RT00614 EQU   @RC00611
@RC00636 EQU   @EL00017
@RC00634 EQU   @EL00017
@RC00734 EQU   @RC00729
@RT00771 EQU   @EL00018
@RC00795 EQU   @RC00779
@RT00828 EQU   @RC00820
@RC00821 EQU   @RC00820
@RC00776 EQU   @EL00019
@RC00839 EQU   @EL00020
@RC00905 EQU   @EL00021
@RC00903 EQU   @EL00021
@RC00958 EQU   @EL00023
@PB00024 EQU   @EL00001
@RC00174 EQU   @RC00171
@RC00458 EQU   @RC00455
@RC00735 EQU   @RC00734
@RT00822 EQU   @RC00821
@PB00023 EQU   @PB00024
@PB00022 EQU   @PB00023
@PB00021 EQU   @PB00022
@PB00020 EQU   @PB00021
@PB00019 EQU   @PB00020
@PB00018 EQU   @PB00019
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IKT3270O,(C'PLS2005',0701,78045)
