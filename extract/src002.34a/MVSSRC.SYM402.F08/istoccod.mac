         TITLE 'ISTOCCOD - OPNDSTPART1                                 *
                        '
ISTOCCOD CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTOCCOD  78.016'                                 0001
         DROP  @15
@PROLOG  BALR  @12,0                                               0001
@PSTART  LA    @09,4095(,@12)                                      0001
         USING @PSTART,@12                                         0001
         USING @PSTART+4095,@09                                    0001
         PRINT OFF
         PRINT ON
*/*                                                                  */
*/*      MAIN STRUCTURE OF ISTOCCOD FOLLOWS                          */
*/*           INITIALIZATION - FLOWCHART NAME = DOINIT               */
*/*                                                                  */
*  DO;                                                             0335
*/***  CRRMAINT  PROCNM(ISTOCCOD)COMP(OC)FUNC(MAIN)  ***/          0336
*  DCL CMZK0008 PTR(31) REG(1);                                    0336
*  RFY (CMZK0008) RSTD;                                            0337
*                                                                  0337
*/* ATBUILD (ISTRPH,ISTCRA,ISTPFCRR,ISTOCCRR)  */                  0338
*  RFY ISTLCCW ;                                                   0338
*  RFY ISTLCPB ;                                                   0339
*  RFY ISTZSAVE;                                                   0340
*  RFY ISTPFCRR;                                                   0341
*  RFY ISTCFCRR;                                                   0342
*  RFY ISTZCRR ;                                                   0343
*  RFY ISTASCRR;                                                   0344
*  RFY ISTAPCRR;                                                   0345
*  RFY ISTCRA  ;                                                   0346
*  RFY ISTCNSTA;                                                   0347
*  RFY ISTOCCRR;                                                   0348
*/* END OF ATBUILD */                                              0349
*  /*** SAVE CRR AND FRR POINTERS ***/                             0349
*ADDR(CMZK0008->RPHCRR->CRAPROCR)->PFCCRRO = CMZK0008->RPHCRR->CRACRR;
         L     @08,RPHCRR(,CMZK0008)                               0349
         LA    @05,312                                             0349
         ALR   @05,@08                                             0349
         L     @03,CRACRR(,@08)                                    0349
         ST    @03,PFCCRRO(,@05)                                   0349
*ADDR(CMZK0008->RPHCRR->CRAPROCR)->PFCFRRO = CMZK0008->RPHCRR->CRAFRR;
         L     @03,CRAFRR(,@08)                                    0350
         ST    @03,PFCFRRO(,@05)                                   0350
*  /*** SET UP POINTERS TO OUR CRR, FRR ***/                       0351
*CMZK0008->RPHCRR->CRACRR = ADDR(CMZK0008->RPHCRR->CRAPROCR);      0351
         LA    @05,CRAPROCR(,@08)                                  0351
         ST    @05,CRACRR(,@08)                                    0351
*CMZK0008->RPHCRR->CRAFRR = 0;                                     0352
         SLR   @03,@03                                             0352
         ST    @03,CRAFRR(,@08)                                    0352
*  /*** SET OUR COMPONENT PROCESS ID IN CRR ***/                   0353
*CMZK0008->RPHCRR->CRACRR->PFCFTA = TIDOCCOD;                      0353
         MVI   PFCFTA(@05),X'02'                                   0353
*  /*** CLEAR COMPONENT ENTERED INDICATORS ***/                    0354
*CMZK0008->RPHCRR->CRACRR->OCCNTRD = '0'B;                         0354
         XC    OCCNTRD+1(2,@05),OCCNTRD+1(@05)                     0354
         MVI   OCCNTRD(@05),B'00000000'                            0354
*  /*** SET ENTERED BIT FOR THIS PROCEDURE ***/                    0355
*CMZK0008->RPHCRR->CRACRR->NOCCOD = '1'B;                          0355
         OI    NOCCOD(@05),B'00100000'                             0355
*  /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                   0356
*CMZK0008->RPHCRR->CRACRR->OCCCRT = '0'B;                          0356
         XC    OCCCRT+1(2,@05),OCCCRT+1(@05)                       0356
         MVI   OCCCRT(@05),B'00000000'                             0356
*CMZK0008->RPHCRR->CRACRR->COCCOD = '1'B;                          0357
         OI    COCCOD(@05),B'00100000'                             0357
*  END;                                                            0358
*   OCWPTR = RPHWEA;                   /* ISTOCW PTR FROM RPH-DCR 830*/
         L     OCWPTR,RPHWEA(,RPHPTR)                              0359
*   OCWOENIB=RPLARG;                   /* SAVE NIB POINTER   @D32CKQM*/
         L     @08,OCWRPL(,OCWPTR)                                 0360
         L     @08,RPLARG(,@08)                                    0360
         ST    @08,OCWOENIB(,OCWPTR)                               0360
*   CSAVEPTR = ADDR(OCWSAVE1);         /* SAVE AREA ADDRESS          */
         LA    CSAVEPTR,OCWSAVE1(,OCWPTR)                          0361
*   C14SVPTR = ADDR(OCWR14SV)+4;       /* SET UP R14 SAVE AREA PTR   */
         LA    @05,OCWR14SV(,OCWPTR)                               0362
         AL    @05,@CF00045                                        0362
         ST    @05,C14SVPTR+624(,OCWPTR)                           0362
*   OCWRPH = RPHPTR;                   /* SAVE RPH ADDR IN OCWRPH    */
         ST    RPHPTR,OCWRPH(,OCWPTR)                              0363
*   OCWNIB = RPLARG;                   /* SAVE NIB ADDR IN OCW       */
         ST    @08,OCWNIB(,OCWPTR)                                 0364
*   CSPSRC = OCWARDTE;                 /* PLACE RDTE ADDR IN CSP     */
         L     @08,OCWARDTE(,OCWPTR)                               0365
         ST    @08,CSPSRC+224(,OCWPTR)                             0365
*   OCWODLST=ADDR(OCWCSL);             /* SETUP PTRS TO THE  @D32CKMP*/
         LA    @08,OCWCSL(,OCWPTR)                                 0366
         ST    @08,OCWODLST(,OCWPTR)                               0366
*   OCWODNAS=ADDR(OCWCSL);             /* CON SVC RSCE LIST  @D32CKMP*/
         ST    @08,OCWODNAS(,OCWPTR)                               0367
*   CALL DOTYPCHK;                     /* PROCESS RPL PARAMS         */
         BAL   @14,DOTYPCHK                                        0368
*/*                                                                  */
*/*      END OF DOINIT - BACK TO MAIN CODE OF ISTOCCOD               */
*/*                                                                  */
*   IF OCWRC = CSUCCESS                                            0369
*    THEN DO;                      /* RC = 0                     */
         CLI   OCWRC(OCWPTR),0                                     0369
         BNE   @RF00369                                            0369
*     CALL CODDORDT;                     /* GET RDT PTRS FOR DESTS */
         BAL   @14,CODDORDT                                        0371
*        IF OCWRC = CSUCCESS                                       0372
*             THEN                     /* RC = 0                     */
         CLI   OCWRC(OCWPTR),0                                     0372
         BNE   @RF00372                                            0372
*                  CALL CODODSTS;      /* OBTAIN DESTINATIONS        */
         BAL   @14,CODODSTS                                        0373
*             ELSE;                    /* RC ^= 0                    */
@RF00372 DS    0H                                                  0375
*        END;                                                      0375
*   ELSE;                              /* RC ^= 0                    */
@RF00369 DS    0H                                                  0377
*   IF RPLREQ ^= '16'X THEN        /*IF NOT SIMLOGON         @OZ08419*/
         L     @08,OCWRPL(,OCWPTR)                                 0377
         CLI   RPLREQ(@08),22                                      0377
         BE    @RF00377                                            0377
*       RPLAREA=OCWOENIB; /*PUT NIB ADDR INTO RPL- DCR 3960  @D32CKQM*/
         L     @05,OCWOENIB(,OCWPTR)                               0378
         ST    @05,RPLAREA(,@08)                                   0378
*   ELSE;            /*FOR SIMLOGON DON'T MODIFY RPLAREA     @OZ08419*/
@RF00377 DS    0H                                                  0380
*/*                                                                  */
*/*      REMAINING CODE EXITS TO THE FOLLOWING ROUTINES              */
*/*           IF RC SET  CALL ISTOCCOF FOR CLEANUP                   */
*/*                                                                  */
*/*             RC 0    CALL ISTOCCOE TO CONTINUE OPNDST             */
*/*                                                                  */
*   IF OCWRC^=0 × RPLREQ='16'X       /* ANY ERRORS OR SIMLOGON*/   0380
*        THEN                                                      0380
         CLI   OCWRC(OCWPTR),0                                     0380
         BNE   @RT00380                                            0380
         L     @08,OCWRPL(,OCWPTR)                                 0380
         CLI   RPLREQ(@08),22                                      0380
         BNE   @RF00380                                            0380
@RT00380 DS    0H                                                  0381
*             CALL ISTOCCOF;           /* OPNDST CLEANUP             */
         L     @15,@CV03241                                        0381
         BALR  @14,@15                                             0381
*        ELSE                                                      0382
*             CALL ISTOCCOE;           /* OPNDST PART2               */
         B     @RC00380                                            0382
@RF00380 L     @15,@CV03240                                        0382
         BALR  @14,@15                                             0382
*DOTYPCHK: PROC OPTIONS(NOSAVEAREA,NOSAVE);                        0383
         B     @PB00002                                            0383
DOTYPCHK DS    0H                                                  0384
*/********************************************************************/
*/*  ROUTINE NAME:   DOTYPCHK                                        */
*/*  FUNCTION:                                                       */
*/*      THIS ROUTINE CHECKS THE TYPE OF OPEN DST AND ENSURES THAT   */
*/*      SOME OPTIONS ARE CORRECT. IF A QUICK HALT HAS NOT BEEN DONE,*/
*/*      THE LOCAL MEMORY LOCK WILL BE OBT AND THE NIB PTD TO BY     */
*/*      RPLARG WILL BE VALIDATED AND COPIED INTO OCWDNIB. THEN THE  */
*/*      APPROPIATE ROUTINE WILL BE CALLED TO SET UP THE CONN SERV   */
*/*      PARM LIST.                                                  */
*/* ROUTINES CALLED:                                                 */
*/*      ISTOCCNV - VALIDATE AND COPY NIB                            */
*/*      DOLOGSET - SET CONN SERV PARM LIST FOR SIM LOGONS           */
*/*      DOACQSET - SET UP CONN SERV PARM LIST FOR ACQUIRES          */
*/*      DOACPSET - SET UP CONN SERV PARM LIST FOR ACCEPTS           */
*/* MACROS USED:                                                     */
*/*      CRRMAINT                                                    */
*/********************************************************************/
*C14SAVE = CR14PTR;               /*SAVE R14 FOR RETURN              */
         LA    @08,624                                             0384
         ALR   @08,OCWPTR                                          0384
         L     @05,C14SVPTR(,@08)                                  0384
         ST    CR14PTR,C14SAVE(,@05)                               0384
*C14SVPTR = C14SVPTR+4;                                            0385
         AL    @05,@CF00045                                        0385
         ST    @05,C14SVPTR(,@08)                                  0385
*IF ATCQKHLT=CON×ATCSNHLT=CON    /*QUICK HALT IN PROGRESS   @ZA26339*/
* THEN                                                             0386
         L     @08,OCWACVT(,OCWPTR)                                0386
         TM    ATCQKHLT(@08),B'00110000'                           0386
         BZ    @RF00386                                            0386
*  DO;                                                             0387
*   OCWRC = '08'X;               /*LOGICAL ERROR */                0388
         MVI   OCWRC(OCWPTR),X'08'                                 0388
*   OCWEC = '5B'X;               /* QUICK HALT IN PROGRESS*/       0389
         MVI   OCWEC(OCWPTR),X'5B'                                 0389
*  END;                                                            0390
* ELSE                                                             0391
*  DO;                                                             0391
         B     @RC00386                                            0391
@RF00386 DS    0H                                                  0392
*   CPARMRG0=1;                        /*PARM FOR CALL TO SUBROUT.*/
         LA    CPARMRG0,1                                          0392
*   CALL DOVSTLCK;                 /*GET LOCAL MEMORY LOCK*/       0393
         BAL   @14,DOVSTLCK                                        0393
*   IF OCWRC=0                     /*LOCK OBT?*/                   0394
*    THEN                                                          0394
         CLI   OCWRC(OCWPTR),0                                     0394
         BNE   @RF00394                                            0394
*     DO;                                                          0395
*      CALL ISTOCCNV;              /*VALIDATE &COPY USER NIB*/     0396
*                                                                  0396
         L     @15,@CV03243                                        0396
         BALR  @14,@15                                             0396
*        DO;                                                       0397
*/***  CRRMAINT  PROCNM(ISTOCCOD)COMP(OC)FUNC(RET)  ***/           0398
*        DCL CMZK0010 PTR(31) REG(1);                              0398
*        RFY (CMZK0010) RSTD;                                      0399
*        /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/             0400
*CMZK0010->RPHCRR->CRACRR->OCCCRT = '0'B;                          0400
         L     @08,RPHCRR(,CMZK0010)                               0400
         L     @08,CRACRR(,@08)                                    0400
         XC    OCCCRT+1(2,@08),OCCCRT+1(@08)                       0400
         MVI   OCCCRT(@08),B'00000000'                             0400
*CMZK0010->RPHCRR->CRACRR->COCCOD = '1'B;                          0401
         OI    COCCOD(@08),B'00100000'                             0401
*        END; /* FOOTPRINT*/                                       0402
*      CPARMRG0=-1;                /* PARM FOR CALL TO SUB ROUT.*/ 0403
         SLR   CPARMRG0,CPARMRG0                                   0403
         BCTR  CPARMRG0,0                                          0403
*      CALL DOVSTLCK;              /*RELEASE LCL MEMORY LOCK*/     0404
         BAL   @14,DOVSTLCK                                        0404
*     END;                                                         0405
*    ELSE;                                                         0406
@RF00394 DS    0H                                                  0407
*  END;                                                            0407
*IF OCWRC=0                         /*CONTINUE?*/                  0408
* THEN                                                             0408
@RC00386 CLI   OCWRC(OCWPTR),0                                     0408
         BNE   @RF00408                                            0408
*  IF RPLREQ='16'X                  /* IF LOGON REQUEST           */
*   THEN                                                           0409
         L     @08,OCWRPL(,OCWPTR)                                 0409
         CLI   RPLREQ(@08),22                                      0409
         BNE   @RF00409                                            0409
*      CALL DOLOGSET;              /* CALL LOGON PARAMETER RTN   */
         BAL   @14,DOLOGSET                                        0410
*   ELSE                                                           0411
*    IF RPLODACQ=CON                 /* IF ACQUIRE REQUEST         */
*     THEN CALL DOACQSET;              /* THEN CALL ACQUIRE RTN      */
         B     @RC00409                                            0411
@RF00409 L     @08,OCWRPL(,OCWPTR)                                 0411
         TM    RPLODACQ(@08),B'10000000'                           0411
         BNO   @RF00411                                            0411
         BAL   @14,DOACQSET                                        0412
*     ELSE IF NIBLAST=CON             /* IF LIST REQUEST            */
*      THEN                                                        0413
         B     @RC00411                                            0413
@RF00411 TM    NIBLAST+112(OCWPTR),B'10000000'                     0413
         BNO   @RF00413                                            0413
*       DO;                                                        0414
*        OCWRC = '08'X;                  /*LOGICAL ERROR*/         0415
         MVI   OCWRC(OCWPTR),X'08'                                 0415
*        OCWEC='40'X;                   /* INVALID USE OF LIST        *
         MVI   OCWEC(OCWPTR),X'40'                                 0416
*       END;                                                       0417
*      ELSE                                                        0418
*       DO;                                                        0418
         B     @RC00413                                            0418
@RF00413 DS    0H                                                  0419
*        OCWDSTNO =1;                                              0419
         MVC   OCWDSTNO(2,OCWPTR),@CH00068                         0419
*        IF RPLODACP=CON          /* IF ACCEPT REQUEST          */ 0420
*         THEN                                                     0420
         L     @08,OCWRPL(,OCWPTR)                                 0420
         TM    RPLODACP(@08),B'01000000'                           0420
         BNO   @RF00420                                            0420
*           CALL DOACPSET;           /* CALL ACCEPT RTN            */
         BAL   @14,DOACPSET                                        0421
*         ELSE                                                     0422
*               DO;                                                0422
         B     @RC00420                                            0422
@RF00420 DS    0H                                                  0423
*                OCWRC = '08'X;       /*LOGICAL ERROR*/            0423
         MVI   OCWRC(OCWPTR),X'08'                                 0423
*                OCWEC='41'X;          /* INVALID OPEN TYPE          */
         MVI   OCWEC(OCWPTR),X'41'                                 0424
*               END;                                               0425
*       END;                                                       0426
@RC00420 DS    0H                                                  0427
*C14SVPTR = C14SVPTR-4;                                            0427
@RC00413 DS    0H                                                  0427
@RC00411 DS    0H                                                  0427
@RC00409 DS    0H                                                  0427
@RF00408 LA    @08,624                                             0427
         ALR   @08,OCWPTR                                          0427
         L     @05,C14SVPTR(,@08)                                  0427
         SL    @05,@CF00045                                        0427
         ST    @05,C14SVPTR(,@08)                                  0427
*CR14PTR = C14SAVE;               /*RESTORE R14 FOR RETURN           */
         L     CR14PTR,C14SAVE(,@05)                               0428
*END DOTYPCHK ;                                                    0429
@EL00002 DS    0H                                                  0429
@EF00002 DS    0H                                                  0429
@ER00002 BR    @14                                                 0429
*DOLOGSET: PROC OPTIONS (NOSAVEAREA,NOSAVE);                       0430
DOLOGSET DS    0H                                                  0431
*/********************************************************************/
*/*  ROUTINE NAME: DOLOGSET                                          */
*/*  FUNCTION:                                                       */
*/*      DOLOGSET IS CALLED BY DOTYPCHK TO INITIALIZE FIELDS IN THE  */
*/*      CONN SERV PARM LIST FOR SIMLOGONS.                          */
*/*  OUTPUT:                                                         */
*/*      CSPIDX = CSPISIML                                           */
*/*      CSPLOGI = '1'B                                              */
*/*      CSPQ = RPLQOPT                                              */
*/*      CSPSTAP = RPLRLSOP                                          */
*/*      CSPRSC = '1'B IF NIB LIST                                   */
*/*      OCWGTLST = '1'B IF NIB LIST                                 */
*/*      CSPCOREQ = RPLCNALL                                         */
*/*      CSPDEST = @ APPL DEST                                       */
*/*  ROUTINES CALLED:                                                */
*/*      NONE                                                        */
*/*  MACROS USED:                                                    */
*/*      NONE                                                        */
*/********************************************************************/
*C14SAVE = CR14PTR;               /*SAVE R14 FOR RETURN              */
         LA    @08,624                                             0431
         ALR   @08,OCWPTR                                          0431
         L     @05,C14SVPTR(,@08)                                  0431
         ST    CR14PTR,C14SAVE(,@05)                               0431
*C14SVPTR = C14SVPTR+4;                                            0432
         AL    @05,@CF00045                                        0432
         ST    @05,C14SVPTR(,@08)                                  0432
*CSPIDX=CSPISIML;                      /* SIMLOGON FUNCTION  @D32CKMP*/
         LA    @08,224                                             0433
         ALR   @08,OCWPTR                                          0433
         MVC   CSPIDX(2,@08),@CH00068                              0433
*CSPLOGI=CON;                          /* DESIRED INDICATORS @D32CKMP*/
         OI    CSPLOGI(@08),B'00100000'                            0434
* IF RPLQOPT = CON                   /*QUEUE OPTION?*/             0435
* THEN                                                             0435
         L     @05,OCWRPL(,OCWPTR)                                 0435
         TM    RPLQOPT(@05),B'00010000'                            0435
         BNO   @RF00435                                            0435
*  DO;                                                             0436
*   CSPQ = CON;                            /* TELL CON SER */      0437
         OI    CSPQ(@08),B'01000000'                               0437
*   IF RPLRLSOP = CON                      /*SHOULDER TAP ?*/      0438
*    THEN                                                          0438
         TM    RPLRLSOP(@05),B'00000100'                           0438
         BNO   @RF00438                                            0438
*     CSPSTAP = CON;                       /* TELL CONN SERV */    0439
         OI    CSPSTAP(@08),B'10000000'                            0439
*    ELSE;                                                         0440
@RF00438 DS    0H                                                  0441
*  END;                                                            0441
* ELSE;                                                            0442
@RF00435 DS    0H                                                  0443
*IF NIBLAST=CON                       /* IF IT IS A LIST REQUEST    */
*  THEN                                /* THEN                       */
         TM    NIBLAST+112(OCWPTR),B'10000000'                     0443
         BNO   @RF00443                                            0443
*     DO;                                                          0444
*        CSPRSC=CON;                   /* INDICATE LIST REQUEST      */
         LA    @08,224                                             0445
         ALR   @08,OCWPTR                                          0445
         OI    CSPRSC(@08),B'10000000'                             0445
*        OCWGTLST=CON;                 /* INDICATE LIST REQUEST      */
         OI    OCWGTLST(OCWPTR),B'10000000'                        0446
*        IF RPLCNALL=CON               /* IF CONNECT ALL             */
*         THEN CSPCOREQ=CON;         /* INDICATE COREQUEST         */
         L     @05,OCWRPL(,OCWPTR)                                 0447
         TM    RPLCNALL(@05),B'10000000'                           0447
         BNO   @RF00447                                            0447
         OI    CSPCOREQ(@08),B'01000000'                           0448
*         ELSE;                                                    0449
@RF00447 DS    0H                                                  0450
*     END;                                                         0450
*  ELSE;                               /* OTHERWISE,                 */
@RF00443 DS    0H                                                  0452
*CSPDEST=OCWARDTE;                    /* DESTINATION IS APPLICATION */
         L     @08,OCWARDTE(,OCWPTR)                               0452
         ST    @08,CSPDEST+224(,OCWPTR)                            0452
*C14SVPTR = C14SVPTR-4;                                            0453
         LA    @08,624                                             0453
         ALR   @08,OCWPTR                                          0453
         L     @05,C14SVPTR(,@08)                                  0453
         SL    @05,@CF00045                                        0453
         ST    @05,C14SVPTR(,@08)                                  0453
*CR14PTR = C14SAVE;               /*RESTORE R14 FOR RETURN           */
         L     CR14PTR,C14SAVE(,@05)                               0454
*END DOLOGSET;                                                     0455
@EL00003 DS    0H                                                  0455
@EF00003 DS    0H                                                  0455
@ER00003 BR    @14                                                 0455
*DOACQSET: PROC OPTIONS(NOSAVEAREA,NOSAVE);                        0456
DOACQSET DS    0H                                                  0457
*/********************************************************************/
*/*  ROUTINE NAME: DOACQSET                                          */
*/*  FUNCTION:                                                       */
*/*      THIS ROUTINE INITIALIZES FIELDS IN THE CSP LIST FOR ACQUIRES*/
*/*      IT IS CALLED BY DOTYPCHK                                    */
*/*  OUTPUT:                                                         */
*/*      CSPIDX = CSPIACQ                                            */
*/*      CSPQ = RPLQOPT                                              */
*/*      CSPSTAP = RPLRLSOP                                          */
*/*      CSPRSC = '1'B IF NIB LIST                                   */
*/*      OCWGTLST = '1'B IF NIB LIST                                 */
*/*      CSPCOREQ = RPLCNALL                                         */
*/*  ROUTINES CALLED:                                                */
*/*      NONE                                                        */
*/*  MACROS USED:                                                    */
*/*      NONE                                                        */
*/********************************************************************/
*C14SAVE = CR14PTR;               /*SAVE R14 FOR RETURN              */
         LA    @08,624                                             0457
         ALR   @08,OCWPTR                                          0457
         L     @05,C14SVPTR(,@08)                                  0457
         ST    CR14PTR,C14SAVE(,@05)                               0457
*C14SVPTR = C14SVPTR+4;                                            0458
         AL    @05,@CF00045                                        0458
         ST    @05,C14SVPTR(,@08)                                  0458
*IF RPLCNALL=COFF & RPLCNANY=COFF      /* IF NOT ALL OR ANY          */
* THEN                                                             0459
         L     @08,OCWRPL(,OCWPTR)                                 0459
         TM    RPLCNALL(@08),B'11000000'                           0459
         BNZ   @RF00459                                            0459
*  DO;                                                             0460
*   OCWRC = '08'X;         /*LOGICAL ERROR*/                       0461
         MVI   OCWRC(OCWPTR),X'08'                                 0461
*   OCWEC='42'X;                  /* INVALID ACQUIRE PARAM      */ 0462
         MVI   OCWEC(OCWPTR),X'42'                                 0462
*  END;                                                            0463
*   ELSE                                                           0464
*      DO;                                                         0464
         B     @RC00459                                            0464
@RF00459 DS    0H                                                  0465
*         CSPIDX=CSPIACQ;              /* ACQUIRE FUNC IND   @D32CKMP*/
         LA    @08,224                                             0465
         ALR   @08,OCWPTR                                          0465
         MVC   CSPIDX(2,@08),@CH00068                              0465
*         IF NIBLAST=CON               /* IF LIST REQUEST            */
*            THEN                      /* THEN                       */
         TM    NIBLAST+112(OCWPTR),B'10000000'                     0466
         BNO   @RF00466                                            0466
*               DO;                                                0467
*                  CSPRSC=CON;         /* INDICATE SO                */
         OI    CSPRSC(@08),B'10000000'                             0468
*                  OCWGTLST=CON;       /* INDICATE LIST              */
         OI    OCWGTLST(OCWPTR),B'10000000'                        0469
*                  IF RPLCNALL=CON     /* IF CONNECT ALL             */
*                     THEN CSPCOREQ=CON; /* INDICATE COREQUEST       */
         L     @05,OCWRPL(,OCWPTR)                                 0470
         TM    RPLCNALL(@05),B'10000000'                           0470
         BNO   @RF00470                                            0470
         OI    CSPCOREQ(@08),B'01000000'                           0471
*                     ELSE ;                                       0472
@RF00470 DS    0H                                                  0473
*               END;                                               0473
*            ELSE;                                                 0474
@RF00466 DS    0H                                                  0475
*          CSPQ = COFF;                /* NOQ                @XM08659*/
         NI    CSPQ+224(OCWPTR),B'10111111'                        0475
*      END;                                                        0476
*C14SVPTR = C14SVPTR-4;                                            0477
@RC00459 LA    @08,624                                             0477
         ALR   @08,OCWPTR                                          0477
         L     @05,C14SVPTR(,@08)                                  0477
         SL    @05,@CF00045                                        0477
         ST    @05,C14SVPTR(,@08)                                  0477
*CR14PTR = C14SAVE;               /*RESTORE R14 FOR RETURN           */
         L     CR14PTR,C14SAVE(,@05)                               0478
*END DOACQSET;                                                     0479
@EL00004 DS    0H                                                  0479
@EF00004 DS    0H                                                  0479
@ER00004 BR    @14                                                 0479
*/*      FOLLOWING PROC SETS UP ACCEPT PARAMS FOR CONN SERV          */
*/*                                                                  */
*DOACPSET:                                                         0480
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0480
DOACPSET DS    0H                                                  0481
*/********************************************************************/
*/*  ROUTINE NAME: DOACPSET                                          */
*/*  FUNCTION:                                                       */
*/*      THIS ROUTINE INITIALIZES FIELDS IN THE CSP LIST FOR ACCEPTS */
*/*      IT IS CALLED BY DOTYPCHK                                    */
*/*  OUTPUT:                                                         */
*/*      CSPIDX = CSPIACPT                                           */
*/*      CSPQ = RPLQOPT                                              */
*/*      CSPRSC = RPLNODE                                            */
*/*  ROUTINES CALLED:                                                */
*/*      NONE                                                        */
*/*  MACROS USED:                                                    */
*/*      NONE                                                        */
*/********************************************************************/
*C14SAVE = CR14PTR;               /*SAVE R14 FOR RETURN              */
         LA    @08,624                                             0481
         ALR   @08,OCWPTR                                          0481
         L     @05,C14SVPTR(,@08)                                  0481
         ST    CR14PTR,C14SAVE(,@05)                               0481
*C14SVPTR = C14SVPTR+4;                                            0482
         AL    @05,@CF00045                                        0482
         ST    @05,C14SVPTR(,@08)                                  0482
*   CSPIDX = CSPIACPT;                 /* ACCEPT FUNC IND    @D32CKMP*/
         LA    @08,224                                             0483
         ALR   @08,OCWPTR                                          0483
         MVC   CSPIDX(2,@08),@CH00073                              0483
*   IF RPLNODE = COFF                                              0484
*        THEN                                                      0484
         L     @05,OCWRPL(,OCWPTR)                                 0484
         TM    RPLNODE(@05),B'00000010'                            0484
         BNZ   @RF00484                                            0484
*             CSPRSC = COFF;            /* REQUEST = SPEC             *
         NI    CSPRSC(@08),B'01111111'                             0485
*        ELSE                                                      0486
*             CSPRSC = CON;           /* REQUEST IS FOR ANY         */
         B     @RC00484                                            0486
@RF00484 OI    CSPRSC+224(OCWPTR),B'10000000'                      0486
*   IF RPLQOPT = CON                                               0487
*        THEN                                                      0487
@RC00484 L     @08,OCWRPL(,OCWPTR)                                 0487
         TM    RPLQOPT(@08),B'00010000'                            0487
         BNO   @RF00487                                            0487
*             CSPQ = CON;              /* QUEUE REQUEST              */
         OI    CSPQ+224(OCWPTR),B'01000000'                        0488
*        ELSE                                                      0489
*             CSPQ = COFF;             /* NO QUEUE REQUEST           */
         B     @RC00487                                            0489
@RF00487 NI    CSPQ+224(OCWPTR),B'10111111'                        0489
*C14SVPTR = C14SVPTR-4;                                            0490
@RC00487 LA    @08,624                                             0490
         ALR   @08,OCWPTR                                          0490
         L     @05,C14SVPTR(,@08)                                  0490
         SL    @05,@CF00045                                        0490
         ST    @05,C14SVPTR(,@08)                                  0490
*CR14PTR = C14SAVE;               /*RESTORE R14 FOR RETURN           */
         L     CR14PTR,C14SAVE(,@05)                               0491
*END DOACPSET;                                                     0492
@EL00005 DS    0H                                                  0492
@EF00005 DS    0H                                                  0492
@ER00005 BR    @14                                                 0492
*CODDORDT: PROC OPTIONS(NOSAVE,NOSAVEAREA);                        0493
CODDORDT DS    0H                                                  0494
*/********************************************************************/
*/*  ROUTINE NAME: CODDORDT                                          */
*/*  FUNCTION:                                                       */
*/*      THIS ROUTINE IS CALLED BY MAIN LINE TO CONVERT THE SYMBOLIC*/
*/*      NAME PASSED IN THE NIB OR NIBS INTO AN ADDRESS OBT FROM THE */
*/*      SRT. THIS ROUTINE ALSO ENSURES THAT THE DEST IS OPENABLE BY */
*/*      THE APPLICATION AND THAT THE DEST IS ACTIVE.                */
*/*      IN THE CASE OF OPENDST ACCEPT ANY, THERE IS NO MEANINGFUL   */
*/*      NAME .THE ABOVE FUNCTION IS NOT PERFORMED.                  */
*/*  ROUTINES CALLED:                                                */
*/*      DOSRTLST OBTAIN & SORT RDT PTRS FOR A NIB LIST              */
*/*      DOSRTFND OBTAIN RDT PTR FOR SINGLE NIB                      */
*/*      DOLOGDAT COPY LOGON DATA AND/OR SESSION PARAMETERS          */
*/*  MACROS USED:                                                    */
*/*      TPLOCK OBTAIN VOC AND RDT LOCKS                             */
*/********************************************************************/
*C14SAVE = CR14PTR;               /*SAVE R14 FOR RETURN              */
         LA    @08,624                                             0494
         ALR   @08,OCWPTR                                          0494
         L     @05,C14SVPTR(,@08)                                  0494
         ST    CR14PTR,C14SAVE(,@05)                               0494
*C14SVPTR = C14SVPTR+4;                                            0495
*                                                                  0495
*                                                                  0495
         AL    @05,@CF00045                                        0495
         ST    @05,C14SVPTR(,@08)                                  0495
*/*********************************************************************
*/*          PROCESS                                                  *
*/*********************************************************************
*    OCWSRT = CON;               /* SET SWITCH TO CALL DOSRTFND*/  0496
*    OCWNOCON = COFF;            /* SET SWITCH TO CALL CONN SERV*/ 0497
*                                                                  0497
         OI    OCWSRT(OCWPTR),B'01000000'                          0497
         NI    OCWNOCON(OCWPTR),B'11011111'                        0497
*/*** START -TPLOCK (VOCLOCK)- ***/                                0498
*          DO;                                                     0498
*          RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) RSTD;   0499
*        GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(RPHWORK);
         STM GPR00P,GPR14P,RPHWORK(GPR01P)
*        GPR15P = ATCAP35;              /*ADDRESS OF LOCK ROUTINE*/
         L     @08,OCWACVT(,OCWPTR)                                0501
         L     GPR15P,ATCAP35(,@08)                                0501
*        GPR02P = ADDR(ATCVOCLK);       /*SET PARAM - LOCKWORD PTR*/
         LA    GPR02P,ATCVOCLK(,@08)                               0502
*        GPR04P = GPR01P->RPHCRR;       /*SET PARAM - ISTCRA PTR*/ 0503
         L     GPR04P,RPHCRR(,GPR01P)                              0503
*        GPR00P = CRALMS02;             /*SET PARAM - LOCK LEVEL FLAG*/
         LA    GPR00P,2                                            0504
*        GPR03P = ADDR(GPR04P->CRAL2PTR);                          0505
         LA    GPR03P,CRAL2PTR(,GPR04P)                            0505
*                                       /*SET PARAM - LOCK LEVEL PTR*/
*        DCL FMZL0011 BASED(GPR15P) LABEL VALUERANGE(*);           0506
*        CALL FMZL0011;                                            0507
         BALR  @14,@15                                             0507
*        GENERATE REFS(GPR00P,GPR01P,GPR14P,RPHWORK) SETS(GPR00P,GPR01P
*GPR02P,GPR03P,GPR04P,GPR05P,GPR06P,GPR07P,GPR08P,GPR09P,GPR10P,GPR11P,
*PR12P,GPR13P,GPR14P,GPR15P);                                      0508
         LM GPR00P,GPR15P,RPHWORK(GPR01P)
*          RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) UNRSTD; 0509
*        END;                                                      0510
*/*** END -TPLOCK (VOCLOCK)- ***/         /* LOCK VOC */           0511
*IF CRETCODE = 0         /*LOCK GOTTEN ?*/                         0511
* THEN                                                             0511
         LTR   CRETCODE,CRETCODE                                   0511
         BNZ   @RF00511                                            0511
*  DO;                                                             0512
*   OCWVLOCK = CON;      /*OD HAS OBTAINED VOC LOCK */             0513
*                                                                  0513
         OI    OCWVLOCK(OCWPTR),B'10000000'                        0513
*/*** START -TPLOCK (RDTLOCK)TYPE(XCLSIVE)- ***/                   0514
*     DO;                                                          0514
*     RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) RSTD;        0515
*        GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(RPHWORK);
         STM GPR00P,GPR14P,RPHWORK(GPR01P)
*        GPR15P = ATCAP36;              /*ADDRESS OF LOCK ROUTINE*/
         L     @08,OCWACVT(,OCWPTR)                                0517
         L     GPR15P,ATCAP36(,@08)                                0517
*        GPR02P = ADDR(ATCRDTLK);       /*SET PARAM - LOCKWORD PTR*/
         LA    GPR02P,ATCRDTLK(,@08)                               0518
*        GPR04P = GPR01P->RPHCRR;       /*SET PARAM - ISTCRA PTR*/ 0519
         L     GPR04P,RPHCRR(,GPR01P)                              0519
*        GPR00P = CRALMS03;             /*SET PARAM - LOCK LEVEL FLAG*/
         LA    GPR00P,4                                            0520
*        GPR03P = ADDR(GPR04P->CRAL3PTR);                          0521
         LA    GPR03P,CRAL3PTR(,GPR04P)                            0521
*                                       /*SET PARAM - LOCK LEVEL PTR*/
*        DCL FMZL0016 BASED(GPR15P) LABEL VALUERANGE(*);           0522
*        CALL FMZL0016;                                            0523
         BALR  @14,@15                                             0523
*        GENERATE REFS(GPR00P,GPR01P,GPR14P,RPHWORK) SETS(GPR00P,GPR01P
*GPR02P,GPR03P,GPR04P,GPR05P,GPR06P,GPR07P,GPR08P,GPR09P,GPR10P,GPR11P,
*PR12P,GPR13P,GPR14P,GPR15P);                                      0524
*                                                                  0524
         LM GPR00P,GPR15P,RPHWORK(GPR01P)
*     RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) UNRSTD;      0525
*        END;                                                      0526
*/*** END -TPLOCK (RDTLOCK)TYPE(XCLSIVE)- ***/   /* LOCK RDT FOR CALL T
* CONN*/                                                           0527
*                                        /*SERV */                 0527
*   IF CRETCODE = 0         /*LOCK GOTTEN ?*/                      0527
*    THEN                                                          0527
         LTR   CRETCODE,CRETCODE                                   0527
         BNZ   @RF00527                                            0527
*     DO;                                                          0528
*      OCWRLOCK = CON ;         /* LOCK GOTTEN */                  0529
         OI    OCWRLOCK(OCWPTR),B'01000000'                        0529
*      IF ATCQKHLT = CON×ATCSNHLT=CON   /*HALT IN PROG?     @ZA26339*/
*       THEN                                                       0530
         L     @08,OCWACVT(,OCWPTR)                                0530
         TM    ATCQKHLT(@08),B'00110000'                           0530
         BZ    @RF00530                                            0530
*        DO;                                                       0531
*         OCWRC = '08'X;                /*LOGICAL ERROR */         0532
         MVI   OCWRC(OCWPTR),X'08'                                 0532
*         OCWEC = '5B'X;                  /*QUICK HALT IN PROGRESS*/
         MVI   OCWEC(OCWPTR),X'5B'                                 0533
*         OCWSRT = COFF;   /*STOP PROCESSING*/                     0534
         NI    OCWSRT(OCWPTR),B'10111111'                          0534
*        END;                                                      0535
*       ELSE                                                       0536
*        IF RPLODACP = CON & RPLREQ='17'X    /*IF OPEN TYPE = ACCEPT*/
*          THEN                                                    0536
         B     @RC00530                                            0536
@RF00530 L     @08,OCWRPL(,OCWPTR)                                 0536
         TM    RPLODACP(@08),B'01000000'                           0536
         BNO   @RF00536                                            0536
         CLI   RPLREQ(@08),23                                      0536
         BNE   @RF00536                                            0536
*           IF RPLNODE = CON   /* ACCEPT ANY OPEN? */              0537
*           THEN DO;                                               0537
         TM    RPLNODE(@08),B'00000010'                            0537
         BNO   @RF00537                                            0537
*            OCWSRT = COFF;    /* DO NOT CALL DOSRTFND */          0539
         NI    OCWSRT(OCWPTR),B'10111111'                          0539
*            OCWNIB = RPLARG;                                      0540
         L     @08,RPLARG(,@08)                                    0540
         ST    @08,OCWNIB(,OCWPTR)                                 0540
*            CSLNDEF = RPLARG; /*NIB INTO CSL ENTRY          @DM13703*/
         L     @05,OCWODNAS(,OCWPTR)                               0541
         ST    @08,CSLNDEF(,@05)                                   0541
*           END;                                                   0542
*          ELSE;                                                   0543
@RF00537 DS    0H                                                  0544
*     END;                                                         0544
*    ELSE                                                          0545
*     DO;                                                          0545
         B     @RC00527                                            0545
@RF00527 DS    0H                                                  0546
*      OCWRC = '24'X;    /*SYSTEM ERROR */                         0546
         MVI   OCWRC(OCWPTR),X'24'                                 0546
*      OCWEC = '06'X;    /*RDT LOCK NOT GOTTEN*/                   0547
         MVI   OCWEC(OCWPTR),X'06'                                 0547
*      OCWSRT = COFF;    /*STOP PROCESSING */                      0548
         NI    OCWSRT(OCWPTR),B'10111111'                          0548
*     END;                                                         0549
*  END;                                                            0550
* ELSE                                                             0551
*  DO;                                                             0551
         B     @RC00511                                            0551
@RF00511 DS    0H                                                  0552
*   OCWRC = '24'X;    /*SYSTEM ERROR */                            0552
         MVI   OCWRC(OCWPTR),X'24'                                 0552
*   OCWEC = '05'X;    /* VOC LOCK NOT GOTTEN*/                     0553
         MVI   OCWEC(OCWPTR),X'05'                                 0553
*   OCWSRT = COFF;    /*STOP PROCESSING */                         0554
         NI    OCWSRT(OCWPTR),B'10111111'                          0554
*  END;                                                            0555
* IF  OCWSRT = CON                                                 0556
*  THEN                                                            0556
@RC00511 TM    OCWSRT(OCWPTR),B'01000000'                          0556
         BNO   @RF00556                                            0556
*   DO;                                                            0557
*    IF RPLREQ='16'X × RPLODACQ=CON     /*SIMLOG OR ACQUIRE?*/     0558
*     THEN                                                         0558
         L     @08,OCWRPL(,OCWPTR)                                 0558
         CLI   RPLREQ(@08),22                                      0558
         BE    @RT00558                                            0558
         TM    RPLODACQ(@08),B'10000000'                           0558
         BNO   @RF00558                                            0558
@RT00558 DS    0H                                                  0559
*      IF RAPAACQ=CON          /* ACQ AUTHORIZED*/                 0559
*       THEN;                                                      0559
         L     @08,OCWARDTE(,OCWPTR)                               0559
         TM    RAPAACQ(@08),B'00001000'                            0559
         BO    @RT00559                                            0559
*       ELSE                                                       0561
*        DO;                                                       0561
*         OCWRC='08'X;            /*LOGICAL ERROR*/                0562
         MVI   OCWRC(OCWPTR),X'08'                                 0562
*         OCWEC='49'X;       /*NOT AUTH TO ACQUIRE OR SIMLOGON*/   0563
         MVI   OCWEC(OCWPTR),X'49'                                 0563
*         OCWSRT = COFF;     /*STOP PROCESSING*/                   0564
         NI    OCWSRT(OCWPTR),B'10111111'                          0564
*        END;                                                      0565
*     ELSE;                                                        0566
@RF00558 DS    0H                                                  0567
*   END;                                                           0567
@RC00558 DS    0H                                                  0568
*IF OCWSRT = CON           /*EVERYTHING OK?*/                      0568
* THEN                                                             0568
@RF00556 TM    OCWSRT(OCWPTR),B'01000000'                          0568
         BNO   @RF00568                                            0568
*  DO;                                                             0569
*    IF OCWGTLST = CON        /* MORE THAN ONE NIB? */             0570
*      THEN                                                        0570
         TM    OCWGTLST(OCWPTR),B'10000000'                        0570
         BNO   @RF00570                                            0570
*        DO;                                                       0571
*          CALL DOSRTLST;     /* GET RDT PTRS. */                  0572
         BAL   @14,DOSRTLST                                        0572
*          OCWSRT = COFF;     /* DO NOT CALL DOSRTFND */           0573
         NI    OCWSRT(OCWPTR),B'10111111'                          0573
*        END;                                                      0574
*      ELSE                                                        0575
*       DO;                                                        0575
         B     @RC00570                                            0575
@RF00570 DS    0H                                                  0576
*        OCWDSTNO =1;     /*NO. OF DESTINATIONS*/                  0576
         MVC   OCWDSTNO(2,OCWPTR),@CH00068                         0576
*        CALL DOSRTFND;      /* GET RDT PTR. */                    0577
         BAL   @14,DOSRTFND                                        0577
*        IF OCWSRT=CON                 /* IF STILL OK                */
*          THEN                        /*                    @D32CKMP*/
         TM    OCWSRT(OCWPTR),B'01000000'                          0578
         BNO   @RF00578                                            0578
*          DO;                         /*                    @D32CKMP*/
*            CSLRDEF=OCWDRDTE;         /* XFER RDTE PTR &    @D32CKMP*/
         L     @08,OCWODNAS(,OCWPTR)                               0580
         L     @05,OCWDRDTE(,OCWPTR)                               0580
         ST    @05,CSLRDEF(,@08)                                   0580
*            CSLNDEF=OCWNIB;           /* NIB PTR TO CSL     @D32CKMP*/
         L     @05,OCWNIB(,OCWPTR)                                 0581
         ST    @05,CSLNDEF(,@08)                                   0581
*            CALL DOLOGDAT;            /* COPY LD AND/OR SP  @D32CKMP*/
         BAL   @14,DOLOGDAT                                        0582
*            RFY                                                   0583
*              LGDPTR RSTD;            /*                    @D32CKMP*/
*            IF OCWRC=0 &              /* IF LOGON DATA      @D32CKMP*/
*               LGDPTR^=0              /* AND/OR SESSION             */
*              THEN                    /* PARMS COPIED PTR   @D32CKMP*/
         CLI   OCWRC(OCWPTR),0                                     0584
         BNE   @RF00584                                            0584
         LTR   LGDPTR,LGDPTR                                       0584
         BZ    @RF00584                                            0584
*                CSLDATA=LGDPTR;       /* GOES TO RSCE LIST  @D32CKMP*/
         L     @08,OCWODNAS(,OCWPTR)                               0585
         ST    LGDPTR,CSLDATA(,@08)                                0585
*              ELSE;                   /*                    @D32CKMP*/
@RF00584 DS    0H                                                  0587
*            RFY                                                   0587
*              LGDPTR UNRSTD;          /*                    @D32CKMP*/
*          END;                        /*                    @D32CKMP*/
*          ELSE;                       /*                    @D32CKMP*/
@RF00578 DS    0H                                                  0590
*       END;                                                       0590
*        CSPRSCE=OCWODLST;             /* POINT AT RSCE LIST       0591
*                                         FOR CON SVC CALL   @D32CKMP*/
@RC00570 L     @08,OCWODLST(,OCWPTR)                               0591
         ST    @08,CSPRSCE+224(,OCWPTR)                            0591
* END;                                                             0592
*C14SVPTR = C14SVPTR-4;                                            0593
@RF00568 LA    @08,624                                             0593
         ALR   @08,OCWPTR                                          0593
         L     @05,C14SVPTR(,@08)                                  0593
         SL    @05,@CF00045                                        0593
         ST    @05,C14SVPTR(,@08)                                  0593
*CR14PTR = C14SAVE;               /*RESTORE R14 FOR RETURN           */
         L     CR14PTR,C14SAVE(,@05)                               0594
*         RETURN;                                                  0595
@EL00006 DS    0H                                                  0595
@EF00006 DS    0H                                                  0595
@ER00006 BR    @14                                                 0595
*DOSRTLST: PROC OPTIONS(NOSAVE,NOSAVEAREA);                        0596
DOSRTLST DS    0H                                                  0597
*/********************************************************************/
*/*  ROUTINE NAME: DOSRTLST                                          */
*/*  FUNCTION:                                                       */
*/*      THIS ROUTINE IS CALLED BY CODDORDT TO PROCESS A LIST OF NIBS*/
*/*      DOSRTLST FIRST COUNTS AND VALIDATES THE NIBS IN THE LIST.   */
*/*      STORAGE IS THEN GOTTEN FOR A LIST OF RDT @'S(SEE PROLOUGE   */
*/*      FOR DETAILS OF LIST) USING THE NO. OF NIBS. THE LIST OF NIBS*/
*/*      THEN LOOPED THROUGH,THE NIBSYM IN EACH BEING CONVERTED INTO */
*/*      RDTE @'S. AT THE SAME TIME THE RDTE @ IS SORTED TO ENSURE   */
*/*      THAT THERE ARE NO DUPLICATES .                              */
*/*  OUTPUT:                                                         */
*/*      OCWODLST = @ OF LIST AREA                                   */
*/*      OCWODNAS = @ OF LAST/ONLY ENTRY IN LIST AREA                */
*/*      OCWDSTNO = COUNT OF NIBS IN LIST                            */
*/*      OCWLALEN = NO OF DOUBLE WORDS IN LIST (FOR GETSTOR &RELSTOR)*/
*/*      OCWCOREQ = OCWGTLST & RPLCNALL                              */
*/*      CSPRSCE = @ OF LIST AREA                                    */
*/*  ROUTINES CALLED:                                                */
*/*      DONOSTR - PROCESS BAD RC FROM GETSTOR                       */
*/*      DOVSTLCK - GET LOCAL MEMORY LOCK                            */
*/*      ISTOCCNV - VALIDATE AND COPY NIB                            */
*/*      DOSRTFND - OBTAIN @ OF RDT USING NIBSYM                     */
*/*      DOSORTEM - SORT RDT @ INTO LIST IN ASCENDINE ORDER          */
*/*  MACROS USED:                                                    */
*/*      CRRMAINT                                                    */
*/*      GETSTOR - GET STORAGE FOR LIST AREA                         */
*/********************************************************************/
*C14SAVE = CR14PTR;               /*SAVE R14 FOR RETURN              */
         LA    @08,624                                             0597
         ALR   @08,OCWPTR                                          0597
         L     @05,C14SVPTR(,@08)                                  0597
         ST    CR14PTR,C14SAVE(,@05)                               0597
*C14SVPTR = C14SVPTR+4;                                            0598
         AL    @05,@CF00045                                        0598
         ST    @05,C14SVPTR(,@08)                                  0598
*         OCWODCT1 = 2;            /* START COUNTING # OF NIBS ON LIST*
         MVC   OCWODCT1(2,OCWPTR),@CH00109                         0599
*                                  /*FIRST ONE OK */               0600
*         OCWGOCNT = CON;           /*SWITCH TO CONINUE COUNTING NIBS*/
         OI    OCWGOCNT(OCWPTR),B'00010000'                        0600
*         OCWNIB=OCWNIB+LENGTH(ISTNIB); /*PT TO NXT NIB*/          0601
         LA    @08,64                                              0601
         AL    @08,OCWNIB(,OCWPTR)                                 0601
         ST    @08,OCWNIB(,OCWPTR)                                 0601
*         IF OCWMLOCK=CON          /*LCOAL MEMORY LOCK HELD?*/     0602
*          THEN;                                                   0602
         TM    OCWMLOCK(OCWPTR),B'00000010'                        0602
         BO    @RT00602                                            0602
*          ELSE                                                    0604
*           DO;                                                    0604
*             RFY CPARMRG0 RSTD;                                   0605
*             CPARMRG0=1;           /*SET UP PARM FOR SUB ROUT. CALL*/
         LA    CPARMRG0,1                                          0606
*             RFY CPARMRG0 UNRSTD;                                 0607
*             CALL DOVSTLCK;        /*LOCK OBT?*/                  0608
         BAL   @14,DOVSTLCK                                        0608
*           END;                                                   0609
*          IF OCWRC=0               /*CONTINUE?*/                  0610
*           THEN;                                                  0610
@RT00602 CLI   OCWRC(OCWPTR),0                                     0610
         BE    @RT00610                                            0610
*           ELSE                                                   0612
*            DO;                                                   0612
*             OCWGOCNT=COFF;        /*DO NOT ENTER LOOP*/          0613
*             OCWSRT=COFF;          /*STOP PROCESSING*/            0614
         NI    OCWGOCNT(OCWPTR),B'10101111'                        0614
*            END;                                                  0615
*         DO WHILE (OCWGOCNT = CON);/* THIS LOOP WILL COUNT THE NUMBER*
@RT00610 B     @DE00616                                            0616
@DL00616 DS    0H                                                  0617
*                                   /* OF NIBS IN THE NIB LIST AND    *
*                                   /* VERIFY THAT ALL ELEMENTS IN THE*
*                                   /* LIST ARE NIBS.                 *
*          RFY CPARMRG0 RSTD;                                      0617
*          CPARMRG0=1;              /*MAKE REG POSITIVE */         0618
         LA    CPARMRG0,1                                          0618
*          RFY CPARMRG0 UNRSTD;                                    0619
*          CALL ISTOCCNV;           /*VALIDATE AND COPY USER NIB*/ 0620
*                                                                  0620
         L     @15,@CV03243                                        0620
         BALR  @14,@15                                             0620
*           DO;                                                    0621
*/***  CRRMAINT  PROCNM(ISTOCCOD)COMP(OC)FUNC(RET)  ***/           0622
*           DCL CMZK0021 PTR(31) REG(1);                           0622
*           RFY (CMZK0021) RSTD;                                   0623
*           /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/          0624
*CMZK0021->RPHCRR->CRACRR->OCCCRT = '0'B;                          0624
         L     @08,RPHCRR(,CMZK0021)                               0624
         L     @08,CRACRR(,@08)                                    0624
         XC    OCCCRT+1(2,@08),OCCCRT+1(@08)                       0624
         MVI   OCCCRT(@08),B'00000000'                             0624
*CMZK0021->RPHCRR->CRACRR->COCCOD = '1'B;                          0625
         OI    COCCOD(@08),B'00100000'                             0625
*           END; /*FOOTPRINT*/                                     0626
*          IF OCWRC = 0             /*NIB OK*/                     0627
*           THEN                                                   0627
         CLI   OCWRC(OCWPTR),0                                     0627
         BNE   @RF00627                                            0627
*             IF NIBLAST = COFF     /* IS THIS THE LAST NIB */     0628
*              THEN                                                0628
         TM    NIBLAST+112(OCWPTR),B'10000000'                     0628
         BNZ   @RF00628                                            0628
*               DO;                                                0629
*                OCWDSTNO = OCWODCT1; /* NO. OF NIBS INTO OCW.*/   0630
         LH    @08,OCWODCT1(,OCWPTR)                               0630
         STH   @08,OCWDSTNO(,OCWPTR)                               0630
*                OCWGOCNT = COFF;   /* STOP COUNTING LOOP */       0631
         NI    OCWGOCNT(OCWPTR),B'11101111'                        0631
*               END;                                               0632
*              ELSE                                                0633
*               DO;                                                0633
         B     @RC00628                                            0633
@RF00628 DS    0H                                                  0634
*                OCWODCT1 = OCWODCT1 + 1; /* INCREMENT CTR. */     0634
         LA    @08,1                                               0634
         AH    @08,OCWODCT1(,OCWPTR)                               0634
         STH   @08,OCWODCT1(,OCWPTR)                               0634
*                OCWNIB =OCWNIB+ LENGTH(ISTNIB); /*PT TO NEXT NIB*/
         LA    @08,64                                              0635
         AL    @08,OCWNIB(,OCWPTR)                                 0635
         ST    @08,OCWNIB(,OCWPTR)                                 0635
*               END;                                               0636
*            ELSE                                                  0637
*             DO;                                                  0637
         B     @RC00627                                            0637
@RF00627 DS    0H                                                  0638
*              RPLARG = OCWNIB;   /* PUT PTR OF BAD NIB IN RPL*/   0638
         L     @08,OCWRPL(,OCWPTR)                                 0638
         L     @05,OCWNIB(,OCWPTR)                                 0638
         ST    @05,RPLARG(,@08)                                    0638
*              OCWSRT = COFF;       /* DONOT CONTINUE PROCESS OF LIST*/
*              OCWGOCNT = COFF;     /* STOP LOOP*/                 0640
         NI    OCWSRT(OCWPTR),B'10101111'                          0640
*             END;                                                 0641
*         END;                                                     0642
@RC00627 DS    0H                                                  0642
@DE00616 TM    OCWGOCNT(OCWPTR),B'00010000'                        0642
         BO    @DL00616                                            0642
*          IF OCWMLOCK = CON        /*LOCAL MEMORY LOCK HELD?*/    0643
*           THEN                                                   0643
         TM    OCWMLOCK(OCWPTR),B'00000010'                        0643
         BNO   @RF00643                                            0643
*            DO;                                                   0644
*             RFY CPARMRG0 RSTD;                                   0645
*             CPARMRG0=-1;          /*SET REG NEG*/                0646
         SLR   CPARMRG0,CPARMRG0                                   0646
         BCTR  CPARMRG0,0                                          0646
*             RFY CPARMRG0 UNRSTD;                                 0647
*             CALL DOVSTLCK;  /*RELE LCL MEM. LOCK*/               0648
         BAL   @14,DOVSTLCK                                        0648
*             IF OCWRC = 0      /*CONTINUE?*/                      0649
*              THEN;                                               0649
         CLI   OCWRC(OCWPTR),0                                     0649
         BE    @RT00649                                            0649
*              ELSE                                                0651
*               OCWSRT = COFF;      /*STOP PROC*/                  0651
         NI    OCWSRT(OCWPTR),B'10111111'                          0651
*            END;                                                  0652
*           ELSE;                                                  0653
@RF00643 DS    0H                                                  0654
*         IF OCWSRT = CON           /* SHOULD LIST AREA BE OBTAINED?*/
*          THEN                                                    0654
@RC00643 TM    OCWSRT(OCWPTR),B'01000000'                          0654
         BNO   @RF00654                                            0654
*           DO;                                                    0655
*                                                                  0655
*/*********************************************************************
*/*     GET STORAGE FOR LIST AREA FOR COUNT OF DESTS.                 *
*/*********************************************************************
*                                                                  0656
*            RFY CLSTREG RSTD;     /* RESTRICT THE PARM REG TO BE */
*                                   /* USED BY THE MACRO */        0657
*            OCWLALEN=OCWDSTNO*(LENGTH(ISTCSL)+4);/* LIST SZ @D32CKMP*/
         LH    @08,OCWDSTNO(,OCWPTR)                               0657
         SLA   @08,4                                               0657
         STH   @08,OCWLALEN(,OCWPTR)                               0657
*            /*GETSTOR SAVE(YES)SIZE(OCWLALEN)CLEAR(YES)FETCHP(NO)*/
*             DO;                                                  0658
*/* ATBUILD (ISTPAB,ISTDYPAB,ISTATCVT,ISTRPH)  */                  0659
*/* END OF ATBUILD */                                              0659
*            RFY (GPR00P,GPR01P,GPR02P,GPR03P) RSTD;               0659
*            RFY ISTRPH BASED(GPR01P);                             0660
*            GEN REFS(GPR02P,GPR03P,GPR04P,GPR05P,                 0661
*                     GPR06P,GPR07P,GPR08P,GPR09P,                 0661
*                     GPR10P,GPR11P,GPR12P,GPR13P)                 0661
*                SETS(RPHWORK);                                    0661
*                                                                  0661
         STM   GPR02P,GPR13P,RPHWORK(GPR01P)        SAVE REGISTERS
*            GPR00F = OCWLALEN;                        /*SIZE IN REG0*/
         LH    GPR00F,OCWLALEN(,OCWPTR)                            0662
*            DCL 1 CMZA0022 FIXED(31) STATIC LOCAL,                0663
*                  2 * FIXED(8) INIT(96),            /* OPTION FLAGS */
*                  2 * FIXED(8) INIT(96),             /* STORAGE KEY */
*                  2 * FIXED(8) INIT(241),         /* SUBPOOL NUMBER */
*                  2 * FIXED(8) INIT('00'X);         /* REQUEST TYPE */
*            GPR03F = CMZA0022;                                    0664
*                                                                  0664
         L     GPR03F,CMZA0022                                     0664
*            DO; /* LISATCVT CVTBASE(PAGEABLE,(GPR02P)) */         0665
*              GPR02P = ATCLCPTR; /*SET UP ATCVT POINTER*/         0666
         L     GPR02P,ATCLCPTR                                     0666
*            END; /*LISATCVT*/                                     0667
*            CALL GPR02P -> ATCGTSTR;                 /*CALL ISTORFSR*/
         L     @15,ATCGTSTR(,GPR02P)                               0668
         BALR  @14,@15                                             0668
*            RFY (GPR00P,GPR01P,GPR02P,GPR03P) UNRSTD;             0669
*            END ;                                   /*END OF GETSTOR*/
*            IF CRETCODE = CSUCCESS /* WAS GETSTOR SUCCESSFUL?*/   0671
*             THEN                                                 0671
         LTR   CRETCODE,CRETCODE                                   0671
         BNZ   @RF00671                                            0671
*              DO;                  /*PUT @ OF STORAGE OBT. IN OCW PTR*
*                                   /* PTRS.*/                     0673
*               OCWODLST = RPHSRPRM; /* @ OF LIST AREA INTO OCW*/  0673
         L     @08,RPHSRPRM(,GPR01P)                               0673
         ST    @08,OCWODLST(,OCWPTR)                               0673
*               OCWODNAS = RPHSRPRM; /* @ OF FIRST AVAIL SLOT IN LIST *
         ST    @08,OCWODNAS(,OCWPTR)                               0674
*               OCWNIB = RPLARG;    /* @ OF NIB LIST BACK INTO OCW */
         L     @08,OCWRPL(,OCWPTR)                                 0675
         L     @08,RPLARG(,@08)                                    0675
         ST    @08,OCWNIB(,OCWPTR)                                 0675
*              END;                                                0676
*             ELSE                                                 0677
*              DO;                                                 0677
         B     @RC00671                                            0677
@RF00671 DS    0H                                                  0678
*               CALL DONOSTR; /*HANDLE BAD RET CODE */             0678
         BAL   @14,DONOSTR                                         0678
*               OCWSRT = COFF;      /* STOP PROCESSING */          0679
         NI    OCWSRT(OCWPTR),B'10111111'                          0679
*              END;                                                0680
*               RFY CLSTREG UNRSTD; /* FREE PARM REG */            0681
@RC00671 DS    0H                                                  0682
*            END;                                                  0682
*          ELSE;                                                   0683
*                                                                  0683
@RF00654 DS    0H                                                  0684
*/*********************************************************************
*/*  THIS SECTION FILLS IN THE LIST AREA WITH THE RDTE POINTERS ALONG *
*/*  WITH THEIR CORRESPONDING NIB PTRS.   */                       0684
*/*********************************************************************
*                                                                  0684
*        DO WHILE (OCWSRT = CON);                                  0684
         B     @DE00684                                            0684
@DL00684 DS    0H                                                  0685
*          RFY CPARMRG0 RSTD;                                      0685
*          CPARMRG0=1;             /*SET REG POS*/                 0686
         LA    CPARMRG0,1                                          0686
*          RFY CPARMRG0 UNRSTD;                                    0687
*          IF OCWMLOCK = CON        /*LCL MEMORY LOCK HELD*/       0688
*           THEN;                   /* DO NOT TRY TO OBTAIN  @DA06185*/
         TM    OCWMLOCK(OCWPTR),B'00000010'                        0688
         BO    @RT00688                                            0688
*           ELSE                    /* GET LCL MEM LOCK      @DA06185*/
*            CALL DOVSTLCK;         /*GET LOCK*/                   0690
         BAL   @14,DOVSTLCK                                        0690
*          IF OCWRC = 0             /*CONTINUE?*/                  0691
*           THEN                                                   0691
@RT00688 CLI   OCWRC(OCWPTR),0                                     0691
         BNE   @RF00691                                            0691
*            DO;                                                   0692
*             CALL ISTOCCNV;        /*VALIDATE & COPY NIB*/        0693
*                                                                  0693
         L     @15,@CV03243                                        0693
         BALR  @14,@15                                             0693
*               DO;                                                0694
*/***  CRRMAINT  PROCNM(ISTOCCOD)COMP(OC)FUNC(RET)  ***/           0695
*               DCL CMZK0040 PTR(31) REG(1);                       0695
*               RFY (CMZK0040) RSTD;                               0696
*               /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/      0697
*CMZK0040->RPHCRR->CRACRR->OCCCRT = '0'B;                          0697
         L     @08,RPHCRR(,CMZK0040)                               0697
         L     @08,CRACRR(,@08)                                    0697
         XC    OCCCRT+1(2,@08),OCCCRT+1(@08)                       0697
         MVI   OCCCRT(@08),B'00000000'                             0697
*CMZK0040->RPHCRR->CRACRR->COCCOD = '1'B;                          0698
         OI    COCCOD(@08),B'00100000'                             0698
*               END;                                               0699
*             IF OCWRC = 0    /*NIB OK?*/                          0700
*              THEN                                                0700
         CLI   OCWRC(OCWPTR),0                                     0700
         BNE   @RF00700                                            0700
*               DO;                                                0701
*                RFY CPARMRG0 RSTD;                                0702
*                CPARMRG0 =-1;       /*SET REG NEG*/               0703
         SLR   CPARMRG0,CPARMRG0                                   0703
         BCTR  CPARMRG0,0                                          0703
*                RFY CPARMRG0 UNRSTD;                              0704
*                CALL DOVSTLCK;     /*RELE LCL MEMORY LOCK*/       0705
         BAL   @14,DOVSTLCK                                        0705
*               END;                                               0706
*              ELSE                                                0707
*               DO;                                                0707
         B     @RC00700                                            0707
@RF00700 DS    0H                                                  0708
*                OCWSRT = COFF;     /* STOP PROC*/                 0708
         NI    OCWSRT(OCWPTR),B'10111111'                          0708
*                RPLARG=OCWNIB;   /*BAD NIB IN RPL*/               0709
         L     @08,OCWRPL(,OCWPTR)                                 0709
         L     @05,OCWNIB(,OCWPTR)                                 0709
         ST    @05,RPLARG(,@08)                                    0709
*               END;                                               0710
*            END;                                                  0711
*           ELSE                                                   0712
*            OCWSRT = COFF;         /*STOP PROC*/                  0712
         B     @RC00691                                            0712
@RF00691 NI    OCWSRT(OCWPTR),B'10111111'                          0712
*        IF OCWSRT = COFF          /* CONTINUE?*/                  0713
*         THEN;                                                    0713
@RC00691 TM    OCWSRT(OCWPTR),B'01000000'                          0713
         BZ    @RT00713                                            0713
*         ELSE                                                     0715
*         DO;                                                      0715
*          CALL DOSRTFND;           /* FIND THE RDTE PTR FOR SYMBOL */
         BAL   @14,DOSRTFND                                        0716
*                                   /* NAME */                     0717
*          IF OCWSRT = CON          /* WAS RDTE PTR FOUND */       0717
*           THEN                                                   0717
         TM    OCWSRT(OCWPTR),B'01000000'                          0717
         BNO   @RF00717                                            0717
*            CALL DOSORTEM;         /* PUT RDTE PTR IN LIST AND CHECK*/
         BAL   @14,DOSORTEM                                        0718
*                                   /* FOR DUPLICATE PTRS. */      0719
*           ELSE                                                   0719
*            IF RPLCNALL = COFF     /* WILL USER ACCEPT ANY TERMINAL? *
*             THEN                                                 0719
         B     @RC00717                                            0719
@RF00717 L     @08,OCWRPL(,OCWPTR)                                 0719
         TM    RPLCNALL(@08),B'10000000'                           0719
         BNZ   @RF00719                                            0719
*              DO;                                                 0720
*               OCWBADNO = OCWBADNO + 1; /* WHEN # OF BAD NIBS EQUALS*/
         LA    @08,1                                               0721
         AH    @08,OCWBADNO(,OCWPTR)                               0721
         STH   @08,OCWBADNO(,OCWPTR)                               0721
*                                        /* THE # OF NIBS,STOP THE */
*                                        /* PROCESSING.*/          0722
*               IF OCWDSTNO > OCWBADNO /* ANY GOOD NIBS LEFT? */   0722
*                THEN                                              0722
         CH    @08,OCWDSTNO(,OCWPTR)                               0722
         BNL   @RF00722                                            0722
*                 DO;                                              0723
*                  OCWSRT = CON;     /* RESTART LOOP. */           0724
         OI    OCWSRT(OCWPTR),B'01000000'                          0724
*                  OCWRC = 0;     /* RESET RETURN CODE IN OCW */   0725
         MVI   OCWRC(OCWPTR),X'00'                                 0725
*                  OCWEC = 0;     /* RESET RETURN CODE IN OCW */   0726
         MVI   OCWEC(OCWPTR),X'00'                                 0726
*                 END;                                             0727
*                ELSE;                                             0728
@RF00722 DS    0H                                                  0729
*              END;                                                0729
*             ELSE;                                                0730
@RF00719 DS    0H                                                  0731
*          IF NIBLAST = COFF        /* IS THIS THE LAST NIB ? */   0731
*           THEN                                                   0731
@RC00717 TM    NIBLAST+112(OCWPTR),B'10000000'                     0731
         BNZ   @RF00731                                            0731
*            DO;                                                   0732
*             OCWSRT = COFF;        /* STOP THE LOOP */            0733
         NI    OCWSRT(OCWPTR),B'10111111'                          0733
*             OCWODNAS=OCWODNAS-LENGTH(ISTCSL); /* PT TO           0734
*                                      LAST ENTRY IN LIST    @D32CKMP*/
         L     @08,OCWODNAS(,OCWPTR)                               0734
         SL    @08,@CF00032                                        0734
         ST    @08,OCWODNAS(,OCWPTR)                               0734
*            END;                                                  0735
*           ELSE                                                   0736
*            DO;                                                   0736
         B     @RC00731                                            0736
@RF00731 DS    0H                                                  0737
*             OCWNIB = OCWNIB + LENGTH(ISTNIB); /*PT TO NEXT NIB*/ 0737
         LA    @08,64                                              0737
         AL    @08,OCWNIB(,OCWPTR)                                 0737
         ST    @08,OCWNIB(,OCWPTR)                                 0737
*            END;                                                  0738
*         END;                                                     0739
@RC00731 DS    0H                                                  0740
*        END;                                                      0740
@RT00713 DS    0H                                                  0740
@DE00684 TM    OCWSRT(OCWPTR),B'01000000'                          0740
         BO    @DL00684                                            0740
*      IF OCWGTLST = CON &                                         0741
*         RPLCNALL = CON                                           0741
*       THEN                                                       0741
         TM    OCWGTLST(OCWPTR),B'10000000'                        0741
         BNO   @RF00741                                            0741
         L     @08,OCWRPL(,OCWPTR)                                 0741
         TM    RPLCNALL(@08),B'10000000'                           0741
         BNO   @RF00741                                            0741
*        OCWCOREQ = CON;                                           0742
         OI    OCWCOREQ(OCWPTR),B'00001000'                        0742
*       ELSE;                                                      0743
@RF00741 DS    0H                                                  0744
*C14SVPTR = C14SVPTR-4;                                            0744
         LA    @08,624                                             0744
         ALR   @08,OCWPTR                                          0744
         L     @05,C14SVPTR(,@08)                                  0744
         SL    @05,@CF00045                                        0744
         ST    @05,C14SVPTR(,@08)                                  0744
*CR14PTR = C14SAVE;               /*RESTORE R14 FOR RETURN           */
         L     CR14PTR,C14SAVE(,@05)                               0745
*      RETURN;                                                     0746
@EL00007 DS    0H                                                  0746
@EF00007 DS    0H                                                  0746
@ER00007 BR    @14                                                 0746
*END DOSRTLST;                                                     0747
*DOSORTEM: PROC OPTIONS(NOSAVE,NOSAVEAREA);                        0748
*                                                                  0748
DOSORTEM DS    0H                                                  0749
*/********************************************************************/
*/*       FUNCTION: DETERMINE WHETHER OR NOT THE DESTINATION         */
*/*                 TO BE ADDED TO THE RESOURCE LIST IS A            */
*/*                 DUPLICATE OF ONE ALREADY IN THE LIST. IF         */
*/*                 NOT, OBTAIN AND COPY INTO VTAM STORAGE           */
*/*                 THE LOGON DATA AND COMPLETE SETTING UP           */
*/*                 THE CURRENT RESOURCE LIST ENTRY FOR THE          */
*/*                 NEW DESTINATION.                                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0749
*   C14SAVE=CR14PTR;                   /* SAVE               @D32CKMP*/
         LA    @08,624                                             0749
         ALR   @08,OCWPTR                                          0749
         L     @05,C14SVPTR(,@08)                                  0749
         ST    CR14PTR,C14SAVE(,@05)                               0749
*   C14SVPTR=C14SVPTR+4;               /* RETURN             @D32CKMP*/
         AL    @05,@CF00045                                        0750
         ST    @05,C14SVPTR(,@08)                                  0750
*         /***********************************************************/
*         /* THE FUNCTION OF THIS LOGIC SEGMENT IS TO                */
*         /* DETECT WHETHER OR NOT THE RESOURCE                      */
*         /* CURRENTLY BEING PROCESSES IS A DUPLICATE                */
*         /* OF ONE ALREADY PROCESSED AND THEREFORE                  */
*         /* ALREADY ON THE RESOURCE LIST.                           */
*         /***********************************************************/
*CKDUPRDT: DO;                         /* BGN OF LOGIC SEGME @D32CKMP*/
*                                                                  0751
CKDUPRDT DS    0H                                                  0752
*   IF RPLCNALL=CON                    /* IF USER ACCEPTS            */
*     THEN                             /* ANY TERMINAL       @D32CKMP*/
         L     @08,OCWRPL(,OCWPTR)                                 0752
         TM    RPLCNALL(@08),B'10000000'                           0752
         BNO   @RF00752                                            0752
*     DO;                              /*                    @D32CKMP*/
*       RFY                                                        0754
*         RLEPTR RSTD;                 /*                    @D32CKMP*/
*       RLEPTR=OCWODNAS;               /* GET RSCE LIST NEXT       0755
*                                         AVAIL ENTRY SLOT   @D32CKMP*/
*                                                                  0755
         L     RLEPTR,OCWODNAS(,OCWPTR)                            0755
*/*     DOWHILE(RLEPTR>OCWODLST)  */                               0756
*       DO  WHILE(RLEPTR>OCWODLST);     /* CHECK ALL ENTRIES  @D32CKMP*
         B     @DE00756                                            0756
@DL00756 DS    0H                                                  0757
*         RLEPTR=RLEPTR-LENGTH(ISTCSL);/* GET ENTRY TO CHECK @D32CKMP*/
*                                                                  0757
         SL    RLEPTR,@CF00032                                     0757
*/*       LEAVE ON(OCWDRDTE=RLEPTR->CSLRDTE)ANDDO */               0758
*         IF (OCWDRDTE=RLEPTR->CSLRDTE) THEN                       0758
         CLC   OCWDRDTE(4,OCWPTR),CSLRDTE(RLEPTR)                  0758
         BNE   @RF00758                                            0758
*           DO;/* FOR A  @D32CKMP*/                                0759
*           OCWRC='08'X;               /* DUP SET LOGIC ERR- @D32CKMP*/
         MVI   OCWRC(OCWPTR),X'08'                                 0760
*           OCWEC='5A'X;               /* DUPLICATE DEST AND @D32CKMP*/
*                                                                  0761
         MVI   OCWEC(OCWPTR),X'5A'                                 0761
*             GOTO #DC00041; /* END(LEAVE)  */                     0762
         B     #DC00041                                            0762
*           END;                 /* EXIT CHECK ENTRIES @D32CKMP*/  0763
*                                                                  0763
*       END; /* END(DOWHILE)  */                                   0764
@RF00758 DS    0H                                                  0764
@DE00756 C     RLEPTR,OCWODLST(,OCWPTR)                            0764
         BH    @DL00756                                            0764
*#DC00041:;                 /* ELSE CONTINUE CHEC @D32CKMP*/       0765
#DC00041 DS    0H                                                  0766
*       RFY                                                        0766
*         RLEPTR UNRSTD;               /*                    @D32CKMP*/
*     END;                             /*                    @D32CKMP*/
*                                                                  0767
*         END CKDUPRDT;                /* END OF LOGIC SEGME @D32CKMP*/
@RF00752 DS    0H                                                  0769
*   IF OCWRC=0                         /* IF DEST IS                 */
*     THEN                             /* NOT A DUPLICATE    @D32CKMP*/
         CLI   OCWRC(OCWPTR),0                                     0769
         BNE   @RF00769                                            0769
*     DO;                              /*                    @D32CKMP*/
*       CSLRDTE=OCWDRDTE;              /* XFER RDTE AND NIB  @D32CKMP*/
         L     @08,OCWODNAS(,OCWPTR)                               0771
         L     @05,OCWDRDTE(,OCWPTR)                               0771
         ST    @05,CSLRDTE(,@08)                                   0771
*       CSLNIB=OCWNIB;                 /* PTRS TO RSCE LIST  @D32CKMP*/
         L     @05,OCWNIB(,OCWPTR)                                 0772
         ST    @05,CSLNIB(,@08)                                    0772
*       CALL DOLOGDAT;                 /* COPY LD AND/OR SP  @D32CKMP*/
         BAL   @14,DOLOGDAT                                        0773
*       RFY                                                        0774
*         LGDPTR RSTD;                 /* RESTRICT WORK REG  @D32CKMP*/
*       IF OCWRC=0 &                   /* IF LOGON DATA              */
*          LGDPTR^=0                   /* AND/OR SESSION             */
*         THEN                         /* PARMS COPIED PTR   @D32CKMP*/
         CLI   OCWRC(OCWPTR),0                                     0775
         BNE   @RF00775                                            0775
         LTR   LGDPTR,LGDPTR                                       0775
         BZ    @RF00775                                            0775
*           CSLDATA=LGDPTR;            /* GOES TO RSCE LIST  @D32CKMP*/
         L     @08,OCWODNAS(,OCWPTR)                               0776
         ST    LGDPTR,CSLDATA(,@08)                                0776
*         ELSE                         /* NOT COPIED, SO     @D32CKMP*/
*         DO;                          /*                    @D32CKMP*/
         B     @RC00775                                            0777
@RF00775 DS    0H                                                  0778
*           IF OCWRC^=0                /* IF ERROR OCCURRED          */
*             THEN DO;                 /*                    @DM14160*/
         CLI   OCWRC(OCWPTR),0                                     0778
         BE    @RF00778                                            0778
*               OCWSRT=COFF;           /* STOP DUP CHECKING  @D32CKMP*/
         NI    OCWSRT(OCWPTR),B'10111111'                          0780
*           IF RPLCNALL=COFF           /* IF USER DOES NOT           */
*             THEN                     /* REQUEST ACCEPT ALL @D32CKMP*/
         L     @08,OCWRPL(,OCWPTR)                                 0781
         TM    RPLCNALL(@08),B'10000000'                           0781
         BNZ   @RF00781                                            0781
*             DO;                      /* TERMINALS          @D32CKMP*/
*               OCWBADNO=OCWBADNO+1;   /* BUMP #BAD TRMINALS @D32CKMP*/
         LA    @08,1                                               0783
         AH    @08,OCWBADNO(,OCWPTR)                               0783
         STH   @08,OCWBADNO(,OCWPTR)                               0783
*               IF OCWDSTNO>OCWBADNO   /* IF ANY GOOD NIBS           */
*                 THEN                 /* LEFT TO PROCESS    @D32CKMP*/
         CH    @08,OCWDSTNO(,OCWPTR)                               0784
         BNL   @RF00784                                            0784
*                 DO;                  /*                    @D32CKMP*/
*                   OCWSRT=CON;        /* RESET DUP CHECK    @D32CKMP*/
         OI    OCWSRT(OCWPTR),B'01000000'                          0786
*                   OCWRC=0;           /* AND RESET RETURN   @D32CKMP*/
         MVI   OCWRC(OCWPTR),X'00'                                 0787
*                   OCWEC=0;           /* CODE IN OCW        @D32CKMP*/
         MVI   OCWEC(OCWPTR),X'00'                                 0788
*                   OCWODNAS=OCWODNAS-LENGTH(ISTCSL);              0789
         L     @08,OCWODNAS(,OCWPTR)                               0789
         SL    @08,@CF00032                                        0789
         ST    @08,OCWODNAS(,OCWPTR)                               0789
*                                      /* NULLIFY FOLLOWING BUMP OF  */
*                                      /* FLD TO ENSURE LIST WILL BE */
*                                      /* SHRUNK             @DM14174*/
*                 END;                 /*                    @D32CKMP*/
*             ELSE;                    /* IF NO ERROR        @DM14160*/
@RF00784 DS    0H                                                  0792
*             END;                     /*                    @D32CKMP*/
*             ELSE;                    /*                    @D32CKMP*/
@RF00781 DS    0H                                                  0794
*         END;                         /* END THEN FOR ERROR @DM14160*/
*         ELSE;                        /* IF NO ERROR        @DM14160*/
@RF00778 DS    0H                                                  0796
*         END;                         /*                    @D32CKMP*/
*       RFY                                                        0797
*         LGDPTR UNRSTD;               /* RELEASE WORK REG   @D32CKMP*/
@RC00775 DS    0H                                                  0798
*     END;                             /*                    @D32CKMP*/
*     ELSE;                            /*                    @D32CKMP*/
@RF00769 DS    0H                                                  0800
*   OCWODNAS=OCWODNAS+LENGTH(ISTCSL);  /* BUMP TO NEXT AVAIL         */
         LA    @08,12                                              0800
         AL    @08,OCWODNAS(,OCWPTR)                               0800
         ST    @08,OCWODNAS(,OCWPTR)                               0800
*                                      /* RSCE LIST ENTRY    @D32CKMP*/
*   C14SVPTR=C14SVPTR-4;               /* RESTORE            @D32CKMP*/
         LA    @08,624                                             0801
         ALR   @08,OCWPTR                                          0801
         L     @05,C14SVPTR(,@08)                                  0801
         SL    @05,@CF00045                                        0801
         ST    @05,C14SVPTR(,@08)                                  0801
*   CR14PTR=C14SAVE;                   /* RETURN             @D32CKMP*/
*                                                                  0802
         L     CR14PTR,C14SAVE(,@05)                               0802
*END DOSORTEM;                                                     0803
@EL00008 DS    0H                                                  0803
@EF00008 DS    0H                                                  0803
@ER00008 BR    @14                                                 0803
*DOSRTFND: PROC OPTIONS(NOSAVE,NOSAVEAREA);                        0804
DOSRTFND DS    0H                                                  0805
*/********************************************************************/
*/*  ROUTINE NAME: DOSRTFND                                          */
*/*  FUNCTION:                                                       */
*/*       CALLED BY CODDORDT AND DOSRTLST TO INTERFACE WITH ISTOCCDF */
*/*       INTO TO OBTAIN RDT ADDR FROM SRT                           */
*/*  OUTPUT:                                                         */
*/*       OCWDRDTE = @ OF RDTE                                       */
*/*  ROUTINES CALLED:                                                */
*/*       ISTOCCDF - GET @ OF RDT FROM SRT                           */
*/*       DOSRTRC0 - SEE IF DEST IS OPENABLE & ACTIVE                */
*/*       DONOFIND - PROCESS NON-ZERO R C FROM ISTOCCDF              */
*/*  MACROS USED:                                                    */
*/*       CRRMAINT                                                   */
*/********************************************************************/
*C14SAVE = CR14PTR;               /*SAVE R14 FOR RETURN              */
         LA    @08,624                                             0805
         ALR   @08,OCWPTR                                          0805
         L     @05,C14SVPTR(,@08)                                  0805
         ST    CR14PTR,C14SAVE(,@05)                               0805
*C14SVPTR = C14SVPTR+4;                                            0806
         AL    @05,@CF00045                                        0806
         ST    @05,C14SVPTR(,@08)                                  0806
*               RFY CPARMRG0 RSTD;                                 0807
*                    /*  SET UP PARMS FOR CALL TO SRTDLFD */       0808
*               CPARMRG0 = ADDR(NIBSYM); /* @ NIB SYM INTO TEMP WORD */
*                                                                  0808
         LA    CPARMRG0,NIBSYM+112(,OCWPTR)                        0808
*                     /*SET HI ORDER BIT IN REG ON*/               0809
*               CPARMRG0 = CPARMRG0 × CHIBIT; /*HI BIT ON */       0809
         O     CPARMRG0,CHIBIT                                     0809
*               RFY CPARMRG0 UNRSTD;                               0810
*               RPHPTR = RPHPTR & CHIBTOFF;    /*REQUIRED INTERFACE */
         N     RPHPTR,CHIBTOFF                                     0811
*               RFY CPARMRG2 RSTD;                                 0812
*               CPARMRG2 = 0;       /* REQUIRED */                 0813
         SLR   CPARMRG2,CPARMRG2                                   0813
*               RFY CPARMRG2 UNRSTD;                               0814
*         CALL ISTOCCDF;            /* CALL SRTDLFD TO FIND RDTE PTR */
         L     @08,OCWACVT(,OCWPTR)                                0815
         L     @15,ATCSRTDF(,@08)                                  0815
         BALR  @14,@15                                             0815
*                                   /* FOR DEST              @D32CKMP*/
*  DO;                                                             0816
*/***  CRRMAINT  PROCNM(ISTOCCOD)COMP(OC)FUNC(RET)  ***/           0817
*  DCL CMZK0045 PTR(31) REG(1);                                    0817
*  RFY (CMZK0045) RSTD;                                            0818
*  /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                   0819
*CMZK0045->RPHCRR->CRACRR->OCCCRT = '0'B;                          0819
         L     @08,RPHCRR(,CMZK0045)                               0819
         L     @08,CRACRR(,@08)                                    0819
         XC    OCCCRT+1(2,@08),OCCCRT+1(@08)                       0819
         MVI   OCCCRT(@08),B'00000000'                             0819
*CMZK0045->RPHCRR->CRACRR->COCCOD = '1'B;                          0820
         OI    COCCOD(@08),B'00100000'                             0820
*  END;                                                            0821
*         IF CRETCODE = CSUCCESS    /* WAS RDTE PTR FOUND? */      0822
*          THEN                                                    0822
         LTR   CRETCODE,CRETCODE                                   0822
         BNZ   @RF00822                                            0822
*           DO;                                                    0823
*            RFY CPARMRG0 RSTD;                                    0824
*            OCWDRDTE = CPARMRG0;   /* DRDTE @ INTO OCW */         0825
         ST    CPARMRG0,OCWDRDTE(,OCWPTR)                          0825
*            RFY CPARMRG0 UNRSTD;                                  0826
*            CALL DOSRTRC0;         /*SEE IF DEST IS OPENABLE & ACTIVE*
         BAL   @14,DOSRTRC0                                        0827
*           END;                                                   0828
*          ELSE                                                    0829
*           DO;                                                    0829
         B     @RC00822                                            0829
@RF00822 DS    0H                                                  0830
*            CALL DONOFIND;        /*PROCESS BAD RETRN CODE*/      0830
         BAL   @14,DONOFIND                                        0830
*            OCWSRT = COFF;         /* STOP SEARCHING FOR RDTE'S */
         NI    OCWSRT(OCWPTR),B'10111111'                          0831
*            RPLARG = OCWNIB;        /* @ OF BAD NIB INTO RPL */   0832
         L     @08,OCWRPL(,OCWPTR)                                 0832
         L     @05,OCWNIB(,OCWPTR)                                 0832
         ST    @05,RPLARG(,@08)                                    0832
*           END;                                                   0833
*C14SVPTR = C14SVPTR-4;                                            0834
@RC00822 LA    @08,624                                             0834
         ALR   @08,OCWPTR                                          0834
         L     @05,C14SVPTR(,@08)                                  0834
         SL    @05,@CF00045                                        0834
         ST    @05,C14SVPTR(,@08)                                  0834
*CR14PTR = C14SAVE;               /*RESTORE R14 FOR RETURN           */
         L     CR14PTR,C14SAVE(,@05)                               0835
*         RETURN;                                                  0836
@EL00009 DS    0H                                                  0836
@EF00009 DS    0H                                                  0836
@ER00009 BR    @14                                                 0836
*END DOSRTFND;                                                     0837
*DOSRTRC0: PROC OPTIONS(NOSAVE,NOSAVEAREA);                        0838
DOSRTRC0 DS    0H                                                  0839
*/********************************************************************/
*/*  ROUTINE NAME: DOSRTRC0                                          */
*/*  FUNCTION:                                                       */
*/*       DETERMINE IF DEST IS OPENABLE & ACTIVE.THIS ROUTINE        */
*/*       CHECKS TO ENSURE THAT THE APPLICATION CAN OPEN THIS DEST   */
*/*       IF RPRAOPN ='1'B,ANYONE CAN OPEN IT.IF NOT, ONLY AUTH.     */
*/*       APPL. CAN OPEN IT                                          */
*/*       DOSRTRC0 IS CALLED BY DOSRTFND                             */
*/*  OUTPUT:                                                         */
*/*       IF THE APPL IS VARY OR THE DEST IS A PORT,CLUSTER,LOCAL    */
*/*       DEV.TERM WITH SCHE SUBNODES,OR SNA CLUSTER THEN OCWNOCON   */
*/*       IS SET TO '1'B INDICATING DO NOT CALL CONN SERV.           */
*/*       OCWDRHOB IS ALSO SET TO '1'B.                              */
*/*  ROUTINES CALLED:                                                */
*/*       DODSTOK = DETERMINE IF DEST IS ACTIVE                      */
*/*  MACROS USED:                                                    */
*/*       NONE                                                       */
*/********************************************************************/
*C14SAVE = CR14PTR;               /*SAVE R14 FOR RETURN              */
         LA    @08,624                                             0839
         ALR   @08,OCWPTR                                          0839
         L     @05,C14SVPTR(,@08)                                  0839
         ST    CR14PTR,C14SAVE(,@05)                               0839
*C14SVPTR = C14SVPTR+4;                                            0840
         AL    @05,@CF00045                                        0840
         ST    @05,C14SVPTR(,@08)                                  0840
* IF  RPRAOPN=CON          /* NODE OPENABLE BY ANYONE? */          0841
*    THEN                                                          0841
         L     @08,OCWDRDTE(,OCWPTR)                               0841
         TM    RPRAOPN(@08),B'00100000'                            0841
         BNO   @RF00841                                            0841
*     IF RAPALLF = CON             /*APPLICATION PRIV*/            0842
*      THEN                                                        0842
         L     @08,OCWARDTE(,OCWPTR)                               0842
         TM    RAPALLF(@08),B'10000000'                            0842
         BNO   @RF00842                                            0842
*       IF RPLVTUSE = CON           /*IS VARY DOING OPEN*/         0843
*        THEN                                                      0843
         L     @08,OCWRPL(,OCWPTR)                                 0843
         TM    RPLVTUSE+16(@08),B'01000000'                        0843
         BNO   @RF00843                                            0843
*         DO;                                                      0844
*          OCWNOCON = CON;      /*DO NOT CALL CONN SERV*/          0845
         OI    OCWNOCON(OCWPTR),B'00100000'                        0845
*          ADDR(OCWDRDTE)->CSLRDTEF=CON; /* DO BUILD CONN    @D32CKMP*/
         OI    CSLRDTEF+40(OCWPTR),B'10000000'                     0846
*         END;                                                     0847
*        ELSE;                                                     0848
@RF00843 DS    0H                                                  0849
*      ELSE;                                                       0849
@RF00842 DS    0H                                                  0850
*    ELSE                                                          0850
*     IF (RPRENTRY = RPRENTLN & RLNPORT = CON) × /*IF RDTE TYPE PORT*/
*        RPRENTRY = RPRENTRN ×     /* IF RDTE TYPE 370X */         0850
*        RPRENTRY = RPRENTDA ×     /* IF RDTE TYPE IS DANE   @D32CKXY*/
*        RPRENTRY = RPRENTCL ×     /* IF RDTE TYPE CLUSTER*/       0850
*        RPRENTRY = RPRENTLC ×     /* IF RDTE TYPE LOCAL DEV */    0850
*        RPRENTRY = RPRENTTR ×     /* IDOES TERM HAVE SCHE SUB NODES?*/
*        RPRENTRY = RPRENTCC       /* IF RDTE TYPE SNA CLUSTER*/   0850
*      THEN                                                        0850
         B     @RC00841                                            0850
@RF00841 L     @08,OCWDRDTE(,OCWPTR)                               0850
         CLI   RPRENTRY(@08),X'50'                                 0850
         BNE   @GL00012                                            0850
         TM    RLNPORT(@08),B'00010000'                            0850
         BO    @RT00850                                            0850
@GL00012 L     @08,OCWDRDTE(,OCWPTR)                               0850
         CLI   RPRENTRY(@08),X'01'                                 0850
         BE    @RT00850                                            0850
         CLI   RPRENTRY(@08),X'51'                                 0850
         BE    @RT00850                                            0850
         CLI   RPRENTRY(@08),X'70'                                 0850
         BE    @RT00850                                            0850
         CLI   RPRENTRY(@08),X'45'                                 0850
         BE    @RT00850                                            0850
         CLI   RPRENTRY(@08),X'80'                                 0850
         BE    @RT00850                                            0850
         CLI   RPRENTRY(@08),X'71'                                 0850
         BNE   @RF00850                                            0850
@RT00850 DS    0H                                                  0851
*       IF RAPALLF = CON        /* IS APPL PRIVILEGED ? */         0851
*        THEN                                                      0851
         L     @08,OCWARDTE(,OCWPTR)                               0851
         TM    RAPALLF(@08),B'10000000'                            0851
         BNO   @RF00851                                            0851
*         DO;                                                      0852
*          OCWNOCON = CON;      /*DO NOT CALL CONN SERV*/          0853
         OI    OCWNOCON(OCWPTR),B'00100000'                        0853
*          ADDR(OCWDRDTE)->CSLRDTEF=CON; /* DO BUILD CONN    @D32CKMP*/
         OI    CSLRDTEF+40(OCWPTR),B'10000000'                     0854
*         END;                                                     0855
*        ELSE                                                      0856
*         DO;                                                      0856
         B     @RC00851                                            0856
@RF00851 DS    0H                                                  0857
*          OCWEC ='49'X;    /*UNAUTHERIZED REQUEST*/               0857
         MVI   OCWEC(OCWPTR),X'49'                                 0857
*          OCWRC = '08'X;    /*LOGICAL ERROR*/                     0858
         MVI   OCWRC(OCWPTR),X'08'                                 0858
*          OCWSRT = COFF;   /*STOP PROCESSING*/                    0859
         NI    OCWSRT(OCWPTR),B'10111111'                          0859
*          RPLARG = OCWNIB; /* PUT FAILING NIB INTO RPL */         0860
         L     @08,OCWRPL(,OCWPTR)                                 0860
         L     @05,OCWNIB(,OCWPTR)                                 0860
         ST    @05,RPLARG(,@08)                                    0860
*         END;                                                     0861
*      ELSE                                                        0862
*       DO;                                                        0862
         B     @RC00850                                            0862
@RF00850 DS    0H                                                  0863
*        OCWEC = '48'X;         /*DEST IS UNOPENABLE*/             0863
         MVI   OCWEC(OCWPTR),X'48'                                 0863
*        OCWRC = '08'X;    /*LOGICAL ERROR*/                       0864
         MVI   OCWRC(OCWPTR),X'08'                                 0864
*        OCWSRT = COFF;                                            0865
         NI    OCWSRT(OCWPTR),B'10111111'                          0865
*        RPLARG = OCWNIB; /* PUT FAILING NIB INTO RPL */           0866
         L     @08,OCWRPL(,OCWPTR)                                 0866
         L     @05,OCWNIB(,OCWPTR)                                 0866
         ST    @05,RPLARG(,@08)                                    0866
*     END;                                                         0867
*IF OCWSRT=CON        /*EVERYTHING OK?*/                           0868
*  THEN                                                            0868
@RC00850 DS    0H                                                  0868
@RC00841 TM    OCWSRT(OCWPTR),B'01000000'                          0868
         BNO   @RF00868                                            0868
*   CALL DODSTOK;           /* DETERMINE IF DEST ACTIVE */         0869
         BAL   @14,DODSTOK                                         0869
*C14SVPTR = C14SVPTR-4;                                            0870
@RF00868 LA    @08,624                                             0870
         ALR   @08,OCWPTR                                          0870
         L     @05,C14SVPTR(,@08)                                  0870
         SL    @05,@CF00045                                        0870
         ST    @05,C14SVPTR(,@08)                                  0870
*CR14PTR = C14SAVE;               /*RESTORE R14 FOR RETURN           */
         L     CR14PTR,C14SAVE(,@05)                               0871
*         RETURN;                                                  0872
@EL00010 DS    0H                                                  0872
@EF00010 DS    0H                                                  0872
@ER00010 BR    @14                                                 0872
*END DOSRTRC0;                                                     0873
*DODSTOK: PROC OPTIONS(NOSAVE,NOSAVEAREA);                         0874
DODSTOK  DS    0H                                                  0875
*/********************************************************************/
*/*  ROUTINE NAME: DODSTOK                                           */
*/*  FUNCTION:                                                       */
*/*       CALLED BY DOSRTRC0 TO CHECK THE PATH COUNT,ONLINE,AND VARY */
*/*       PENDING BITS.THIS ENSURES THAT THE DEST IS ACTIVE          */
*/*  ROUTINES CALLED:                                                */
*/*       NONE                                                       */
*/*  MACROS USED:                                                    */
*/*       NONE                                                       */
*/********************************************************************/
*C14SAVE = CR14PTR;               /*SAVE R14 FOR RETURN              */
         LA    @08,624                                             0875
         ALR   @08,OCWPTR                                          0875
         L     @05,C14SVPTR(,@08)                                  0875
         ST    CR14PTR,C14SAVE(,@05)                               0875
*C14SVPTR = C14SVPTR+4;                                            0876
         AL    @05,@CF00045                                        0876
         ST    @05,C14SVPTR(,@08)                                  0876
*IF RAPALLF = CON &               /* APPL PRIVILEGED? */           0877
*   RPLVTUSE = CON                /* VARY CALLER? */               0877
* THEN;                           /* YES, EXIT */                  0877
         L     @08,OCWARDTE(,OCWPTR)                               0877
         TM    RAPALLF(@08),B'10000000'                            0877
         BNO   @RF00877                                            0877
         L     @08,OCWRPL(,OCWPTR)                                 0877
         TM    RPLVTUSE+16(@08),B'01000000'                        0877
         BO    @RT00877                                            0877
* ELSE                                                             0879
*  IF RPRENTRY = RPRENTLN &                                        0879
*     RLNPORT = CON               /*IF RDTE TYPE = PORT*/          0879
*   THEN                                                           0879
@RF00877 L     @08,OCWDRDTE(,OCWPTR)                               0879
         CLI   RPRENTRY(@08),X'50'                                 0879
         BNE   @RF00879                                            0879
         TM    RLNPORT(@08),B'00010000'                            0879
         BNO   @RF00879                                            0879
*         IF RPTVRYPD = CON ×       /* IS RDTE TYPE VARY PENDING ?*/
*            RPTHLVPD = CON                                        0880
*          THEN                                                    0880
         TM    RPTVRYPD(@08),B'01100000'                           0880
         BZ    @RF00880                                            0880
*           DO;                                                    0881
*            OCWEC = '4A'X;       /* RET CODE = DEST VARIED OFFLINE*/
         MVI   OCWEC(OCWPTR),X'4A'                                 0882
*            OCWRC = '08'X;         /*LOGICAL ERROR*/              0883
         MVI   OCWRC(OCWPTR),X'08'                                 0883
*           END;                                                   0884
*          ELSE                                                    0885
*           IF RPTPTHCT = 0            /* IF NO PATHS TO DEST EXIST*/
*            THEN                                                  0885
         B     @RC00880                                            0885
@RF00880 L     @08,OCWDRDTE(,OCWPTR)                               0885
         LH    @08,RPTPTHCT(,@08)                                  0885
         LTR   @08,@08                                             0885
         BNZ   @RF00885                                            0885
*             DO;                                                  0886
*              OCWRC = '08'X;       /*LOGICAL ERROR*/              0887
         MVI   OCWRC(OCWPTR),X'08'                                 0887
*              OCWEC = '4A'X;       /* PATH COUNT ZERO*/           0888
         MVI   OCWEC(OCWPTR),X'4A'                                 0888
*             END;                                                 0889
*            ELSE;                                                 0890
@RF00885 DS    0H                                                  0891
*  ELSE                                                            0891
*    IF RPRENTRY=RPRENTLU & RPRNSNEA->RCCRESET=CON        /*@ZA19893*/
*      THEN;                                              /*@ZA19893*/
         B     @RC00879                                            0891
@RF00879 L     @08,OCWDRDTE(,OCWPTR)                               0891
         CLI   RPRENTRY(@08),X'81'                                 0891
         BNE   @RF00891                                            0891
         L     @08,RPRNSNEA(,@08)                                  0891
         TM    RCCRESET(@08),B'00000100'                           0891
         BO    @RT00891                                            0891
*    ELSE DO;                                             /*@ZA19893*/
@RF00891 DS    0H                                                  0894
*         IF RPRVRYPD = CON         /* IS RDTE TYPE VARY PENDING ?*/
*            × RPRONLIN = COFF      /* IS THIS RDTE INACTIVE */    0894
*            × (RPRENTRY=RPRENTLU   /* OR LU WHOSE...        @ZA24526*/
*               & RPRNSNEA->RCCERPIP=CON) /* ...PU IS IN ERP @ZA24526*/
*          THEN                                                    0894
         L     @08,OCWDRDTE(,OCWPTR)                               0894
         TM    RPRVRYPD(@08),B'00000010'                           0894
         BO    @RT00894                                            0894
         TM    RPRONLIN(@08),B'00001000'                           0894
         BZ    @RT00894                                            0894
         CLI   RPRENTRY(@08),X'81'                                 0894
         BNE   @RF00894                                            0894
         L     @08,RPRNSNEA(,@08)                                  0894
         TM    RCCERPIP(@08),B'00100000'                           0894
         BNO   @RF00894                                            0894
@RT00894 DS    0H                                                  0895
*           DO;                                                    0895
*            OCWEC = '4A'X;       /* RET CODE = DEST VARIED OFFLINE*/
         MVI   OCWEC(OCWPTR),X'4A'                                 0896
*            OCWRC = '08'X;         /*LOGICAL ERROR*/              0897
         MVI   OCWRC(OCWPTR),X'08'                                 0897
*           END;                                                   0898
*          ELSE                                                    0899
*           IF RPRPTHCT = 0            /* IF NO PATHS TO DEST EXIST*/
*            THEN                                                  0899
         B     @RC00894                                            0899
@RF00894 L     @08,OCWDRDTE(,OCWPTR)                               0899
         CLI   RPRPTHCT(@08),0                                     0899
         BNE   @RF00899                                            0899
*             DO;                                                  0900
*              OCWRC = '08'X;       /*LOGICAL ERROR*/              0901
         MVI   OCWRC(OCWPTR),X'08'                                 0901
*              OCWEC = '4A'X;       /* PATH COUNT ZERO*/           0902
         MVI   OCWEC(OCWPTR),X'4A'                                 0902
*             END;                                                 0903
*            ELSE;                                                 0904
@RF00899 DS    0H                                                  0905
*    END;                                                 /*@ZA19893*/
@RC00894 DS    0H                                                  0906
*IF OCWRC^=0                         /*EVERYTHING  OK*/            0906
* THEN                                                             0906
@RT00891 DS    0H                                                  0906
@RC00879 DS    0H                                                  0906
@RT00877 CLI   OCWRC(OCWPTR),0                                     0906
         BE    @RF00906                                            0906
*  OCWSRT = COFF;                   /*STOP PROC*/                  0907
         NI    OCWSRT(OCWPTR),B'10111111'                          0907
* ELSE;                                                            0908
@RF00906 DS    0H                                                  0909
*C14SVPTR = C14SVPTR-4;                                            0909
         LA    @08,624                                             0909
         ALR   @08,OCWPTR                                          0909
         L     @05,C14SVPTR(,@08)                                  0909
         SL    @05,@CF00045                                        0909
         ST    @05,C14SVPTR(,@08)                                  0909
*CR14PTR = C14SAVE;               /*RESTORE R14 FOR RETURN           */
         L     CR14PTR,C14SAVE(,@05)                               0910
*         RETURN;                                                  0911
@EL00011 DS    0H                                                  0911
@EF00011 DS    0H                                                  0911
@ER00011 BR    @14                                                 0911
*END DODSTOK;                                                      0912
*END CODDORDT;                                                     0913
*CODODSTS: PROC OPTIONS(NOSAVEAREA,NOSAVE);                        0914
CODODSTS DS    0H                                                  0915
*/********************************************************************/
*/*  ROUTINE NAME: CODODSTS                                          */
*/*  FUNCTION:                                                       */
*/*       CALLED FROM MAIN LINE. THIS ROUTINE CALLS CONNECTION SERV  */
*/*       TO ESTABLISH AN ACTIVE (FOR ACQ.ACC,PREEMPT) OR INACTIVE   */
*/*       (FOR SIMLOGON) CONNECTION. ON RETURN RETURN, THIS ROUTINE  */
*/*       WILL DETERMINE IF THE REQUEST WAS QUEUED. IF SO,THE VOC    */
*/*       WILL BE OBTAINED AGAIN.                                    */
*/*  ROUTINES CALLED:                                                */
*/*       DOOKDST - CALLED TO HANDLE A SUCCESSFUL RETURN FROM CONN   */
*/*                 SERV.                                            */
*/*       DONODST - CALLED TO HANDLE A NON-ZERO RC FROM CONN SERV    */
*/*  MACROS USED:                                                    */
*/*       CRRMAINT                                                   */
*/********************************************************************/
*C14SAVE = CR14PTR;               /*SAVE R14 FOR RETURN              */
         LA    @08,624                                             0915
         ALR   @08,OCWPTR                                          0915
         L     @05,C14SVPTR(,@08)                                  0915
         ST    CR14PTR,C14SAVE(,@05)                               0915
*C14SVPTR = C14SVPTR+4;                                            0916
         AL    @05,@CF00045                                        0916
         ST    @05,C14SVPTR(,@08)                                  0916
*IF OCWNOCON^=CON                                                  0917
*   THEN                                                           0917
         TM    OCWNOCON(OCWPTR),B'00100000'                        0917
         BO    @RF00917                                            0917
*      DO;                                                         0918
*         RFY                                                      0919
*           RLEPTR RSTD;               /*                    @D32CKMP*/
*         RLEPTR=OCWODNAS+LENGTH(ISTCSL)+     /* GET LAST            */
*                ((OCWDSTNO-(OCWBADNO+1))*4); /* RDTE PTR    @D32CKMP*/
*                                                                  0920
         LA    RLEPTR,12                                           0920
         AL    RLEPTR,OCWODNAS(,OCWPTR)                            0920
         LA    @08,1                                               0920
         AH    @08,OCWBADNO(,OCWPTR)                               0920
         LCR   @08,@08                                             0920
         AH    @08,OCWDSTNO(,OCWPTR)                               0920
         SLA   @08,2                                               0920
         ALR   RLEPTR,@08                                          0920
*/*       DOWHILE(OCWODLST<=OCWODNAS)  */                          0921
*         DO  WHILE(OCWODLST<=OCWODNAS);/* FOR EACH LIST NTRY @D32CKMP*
         B     @DE00921                                            0921
@DL00921 DS    0H                                                  0922
*           RLEPTR->CSLRDTE=CSLRDTE;   /* COPY RDTE TO CONTG @D32CKMP*/
         L     @08,OCWODNAS(,OCWPTR)                               0922
         L     @05,CSLRDTE(,@08)                                   0922
         ST    @05,CSLRDTE(,RLEPTR)                                0922
*           OCWODNAS=OCWODNAS-LENGTH(ISTCSL); /* AREA AND    @D32CKMP*/
         SL    @08,@CF00032                                        0923
         ST    @08,OCWODNAS(,OCWPTR)                               0923
*           RLEPTR=RLEPTR-4;           /* SETUP FOR NEXT NTR @D32CKMP*/
*                                                                  0924
         SL    RLEPTR,@CF00045                                     0924
*         END; /* END(DOWHILE)  */                                 0925
@DE00921 CLC   OCWODLST(4,OCWPTR),OCWODNAS(OCWPTR)                 0925
         BNH   @DL00921                                            0925
*#DC00046:;               /* CONTINUE COPYING   @D32CKMP*/         0926
#DC00046 DS    0H                                                  0927
*         RFY                                                      0927
*           RLEPTR UNRSTD;             /*                    @D32CKMP*/
*         OCWODNAS=OCWODLST;           /* RESET NAS PTR      @D32CKMP*/
         L     @08,OCWODLST(,OCWPTR)                               0928
         ST    @08,OCWODNAS(,OCWPTR)                               0928
*         CSPRSCE = OCWODLST;         /* PTR TO RSCE LIST          0929
*                                        INTO CSP            @D32CKMP*/
         LA    @05,224                                             0929
         ALR   @05,OCWPTR                                          0929
         ST    @08,CSPRSCE(,@05)                                   0929
*         CSPNO = OCWDSTNO-OCWBADNO;  /* NUMB DEST INTO CSP          */
         LH    @08,OCWDSTNO(,OCWPTR)                               0930
         SH    @08,OCWBADNO(,OCWPTR)                               0930
         STH   @08,CSPNO(,@05)                                     0930
*         RPHCSPA=ADDR(OCWCSPL);        /* ADDRESS OF CS PARAM LIST  */
         LA    @08,OCWCSPL(,OCWPTR)                                0931
         ST    @08,RPHCSPA(,GPR01P)                                0931
*         CALL ISTCSCMR;                                   /*@D32CKMP*/
         L     @08,OCWACVT(,OCWPTR)                                0932
         L     @15,ATCCSMR(,@08)                                   0932
         BALR  @14,@15                                             0932
*  DO;                                                             0933
*/***  CRRMAINT  PROCNM(ISTOCCOD)COMP(OC)FUNC(RET)  ***/           0934
*  DCL CMZK0048 PTR(31) REG(1);                                    0934
*  RFY (CMZK0048) RSTD;                                            0935
*  /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                   0936
*CMZK0048->RPHCRR->CRACRR->OCCCRT = '0'B;                          0936
         L     @08,RPHCRR(,CMZK0048)                               0936
         L     @08,CRACRR(,@08)                                    0936
         XC    OCCCRT+1(2,@08),OCCCRT+1(@08)                       0936
         MVI   OCCCRT(@08),B'00000000'                             0936
*CMZK0048->RPHCRR->CRACRR->COCCOD = '1'B;                          0937
         OI    COCCOD(@08),B'00100000'                             0937
*  END;                                                            0938
*         RPHWEA = OCWPTR;    /*RESTORE OCW PTR IN RPH */          0939
         ST    OCWPTR,RPHWEA(,GPR01P)                              0939
*         IF CSPWASQD = CON               /*CONN SERV Q REQ?*/     0940
*          THEN                                                    0940
         TM    CSPWASQD+224(OCWPTR),B'00000100'                    0940
         BNO   @RF00940                                            0940
*           DO;                                                    0941
*            OCWVLOCK = COFF;            /*VOC LOCK NOT HELD*/     0942
*            OCWRLOCK = COFF;            /* RDT LOCK NOT HELD*/    0943
         NI    OCWVLOCK(OCWPTR),B'00111111'                        0943
*           END;                                                   0944
*          ELSE;                                                   0945
@RF00940 DS    0H                                                  0946
*         IF CSPCC=CZERO×CSPCC=CSRC64   /* IF CS RC IS 0×64  @ZA16203*/
*            THEN                                                  0946
         LH    @08,CSPCC+224(,OCWPTR)                              0946
         LTR   @08,@08                                             0946
         BZ    @RT00946                                            0946
         C     @08,@CF00215                                        0946
         BNE   @RF00946                                            0946
@RT00946 DS    0H                                                  0947
*   DO;                                                            0947
*     OCWODCLS=CON;   /* CALL CLSDST IF OPENDST FAILS         DM10700*/
         OI    OCWODCLS(OCWPTR),B'00100000'                        0948
*              CALL DOOKDST;          /* HANDLE DESTINATIONS */    0949
         BAL   @14,DOOKDST                                         0949
*   END;                                                           0950
*            ELSE CALL DONODST;         /* ANALYZE BAD RETURN CODE   */
         B     @RC00946                                            0951
@RF00946 BAL   @14,DONODST                                         0951
*      END;                                                        0952
*   ELSE;                                                          0953
@RF00917 DS    0H                                                  0954
*  IF OCWRC = 0          /* SUCC SO FAR */                         0954
*   THEN                                                           0954
@RC00917 CLI   OCWRC(OCWPTR),0                                     0954
         BNE   @RF00954                                            0954
*    DO;                                                           0955
*     IF OCWVLOCK ^= CON /*VOC LOCK HELD?*/                        0956
*      THEN                                                        0956
         TM    OCWVLOCK(OCWPTR),B'10000000'                        0956
         BO    @RF00956                                            0956
*       DO;                                                        0957
*                                                                  0957
*/*** START -TPLOCK (VOCLOCK)- ***/                                0958
*         DO;                                                      0958
*         RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) RSTD;    0959
*        GENERATE REFS(GPR00P,GPR01P,GPR15P,RPHWORK) SETS(RPHWORK);
         STM GPR00P,GPR14P,RPHWORK(GPR01P)
*        GPR15P = ATCAP35;              /*ADDRESS OF LOCK ROUTINE*/
         L     @08,OCWACVT(,OCWPTR)                                0961
         L     GPR15P,ATCAP35(,@08)                                0961
*        GPR02P = ADDR(ATCVOCLK);       /*SET PARAM - LOCKWORD PTR*/
         LA    GPR02P,ATCVOCLK(,@08)                               0962
*        GPR04P = GPR01P->RPHCRR;       /*SET PARAM - ISTCRA PTR*/ 0963
         L     GPR04P,RPHCRR(,GPR01P)                              0963
*        GPR00P = CRALMS02;             /*SET PARAM - LOCK LEVEL FLAG*/
         LA    GPR00P,2                                            0964
*        GPR03P = ADDR(GPR04P->CRAL2PTR);                          0965
         LA    GPR03P,CRAL2PTR(,GPR04P)                            0965
*                                       /*SET PARAM - LOCK LEVEL PTR*/
*        DCL FMZL0049 BASED(GPR15P) LABEL VALUERANGE(*);           0966
*        CALL FMZL0049;                                            0967
         BALR  @14,@15                                             0967
*        GENERATE REFS(GPR00P,GPR01P,GPR14P,RPHWORK) SETS(GPR00P,GPR01P
*GPR02P,GPR03P,GPR04P,GPR05P,GPR06P,GPR07P,GPR08P,GPR09P,GPR10P,GPR11P,
*PR12P,GPR13P,GPR14P,GPR15P);                                      0968
         LM GPR00P,GPR15P,RPHWORK(GPR01P)
*         RFY (GPR00P,GPR01P,GPR02P,GPR03P,GPR04P,GPR15P) UNRSTD;  0969
*        END;                                                      0970
*/*** END -TPLOCK (VOCLOCK)- ***/         /*GET IT SHARED*/        0971
*       IF CRETCODE^=0   /*LOCK NOT GOTTEN*/                       0971
*        THEN                                                      0971
         LTR   CRETCODE,CRETCODE                                   0971
         BZ    @RF00971                                            0971
*         DO;                                                      0972
*          OCWRC = '24'X;    /*SYSTEM ERROR */                     0973
         MVI   OCWRC(OCWPTR),X'24'                                 0973
*          OCWEC = '05'X;    /* VOC LOCK NOT GOTTEN*/              0974
         MVI   OCWEC(OCWPTR),X'05'                                 0974
*         END;                                                     0975
*        ELSE                                                      0976
*         OCWVLOCK = CON;           /*LOCK GOTTEN*/                0976
         B     @RC00971                                            0976
@RF00971 OI    OCWVLOCK(OCWPTR),B'10000000'                        0976
*       END;                                                       0977
*      ELSE;                                                       0978
@RF00956 DS    0H                                                  0979
*    END;                                                          0979
@RC00956 DS    0H                                                  0980
*C14SVPTR = C14SVPTR-4;                                            0980
@RF00954 LA    @08,624                                             0980
         ALR   @08,OCWPTR                                          0980
         L     @05,C14SVPTR(,@08)                                  0980
         SL    @05,@CF00045                                        0980
         ST    @05,C14SVPTR(,@08)                                  0980
*CR14PTR = C14SAVE;               /*RESTORE R14 FOR RETURN           */
         L     CR14PTR,C14SAVE(,@05)                               0981
*END CODODSTS;                                                     0982
@EL00012 DS    0H                                                  0982
@EF00012 DS    0H                                                  0982
@ER00012 BR    @14                                                 0982
*DOOKDST: PROC OPTIONS(NOSAVEAREA,NOSAVE);                         0983
DOOKDST  DS    0H                                                  0984
*/********************************************************************/
*/*  ROUTINE NAME: DOOKDST                                           */
*/*  FUNCTION:                                                       */
*/*       CALLED BY CODODSTS TO HANDLE SUCC. RET. FROM CONN SERV.    */
*/*       THIS ROUT. INDICATES THAT THE LOGON DATA BUFFER WAS PASSED */
*/*       ON TO CONN SERV(FOR SIMLOGONS).FOR OPENDST ACCEPT ANY,     */
*/*       THE ADDRESS OF THE ACCEPTED TERM IS TAKEN FROM THE CSP LIST*/
*/*       AND PUT INTO THE OCW.THE SYMBOLIC NAME OF THAT TERM IS PUT */
*/*       INTO THE USER'S NIB                                        */
*/*  OUTPUT:                                                         */
*/*       CSLDATA = 0                                                */
*/*       FOR ACCEPT ANY - OCWRDTE = CSPTRDTE                        */
*/*                        OCWODCLS = '1'B                           */
*/*                        NIBSYM = RPRNAME                          */
*/*       OCWDRHOB = '1'B                                            */
*/*  ROUTINES CALLED:                                                */
*/*       ISTOCCNV - VALIDATE NIB                                    */
*/*       DOVSTLOCK - GET LOCAL MEMORY LOCK                          */
*/*  MACROS USED:                                                    */
*/*       CRRMAINT                                                   */
*/********************************************************************/
*C14SAVE = CR14PTR;               /* SAVE R14 FOR RETURN             */
         LA    @08,624                                             0984
         ALR   @08,OCWPTR                                          0984
         L     @05,C14SVPTR(,@08)                                  0984
         ST    CR14PTR,C14SAVE(,@05)                               0984
*C14SVPTR = C14SVPTR+4;                                            0985
         AL    @05,@CF00045                                        0985
         ST    @05,C14SVPTR(,@08)                                  0985
*IF RPLODACP=CON & RPLNODE=CON & RPLREQ='17'X                      0986
*  THEN DO;                                                        0986
         L     @08,OCWRPL(,OCWPTR)                                 0986
         TM    RPLODACP(@08),B'01000000'                           0986
         BNO   @RF00986                                            0986
         TM    RPLNODE(@08),B'00000010'                            0986
         BNO   @RF00986                                            0986
         CLI   RPLREQ(@08),23                                      0986
         BNE   @RF00986                                            0986
*      OCWDRDTE=CSPTRDTE;         /* SET DESTINATION RDTE ADDR       */
         L     @08,CSPTRDTE+224(,OCWPTR)                           0988
         ST    @08,OCWDRDTE(,OCWPTR)                               0988
*      CSLRDEF=CSPTRDTE;          /* RDTE PTR INTO CSL NTRY  @DM13704*/
         L     @05,OCWODNAS(,OCWPTR)                               0989
         ST    @08,CSLRDEF(,@05)                                   0989
*      OCWODCLS=CON;              /* MUST CALL BIT          A1305620 */
         OI    OCWODCLS(OCWPTR),B'00100000'                        0990
*      RFY CPARMRG0 RSTD;                                          0991
*      CPARMRG0=1;                /* SET REG POSITIVE       A1305620 */
         LA    CPARMRG0,1                                          0992
*      RFY CPARMRG0 UNRSTD;                                        0993
*      CALL DOVSTLCK;             /* GET LOCAL MEMORY LOCK  A1305620 */
         BAL   @14,DOVSTLCK                                        0994
*      IF OCWRC=0                 /* IF RETURN CODE = 0     A1305620 */
*        THEN DO;                 /*                        A1305620 */
         CLI   OCWRC(OCWPTR),0                                     0995
         BNE   @RF00995                                            0995
*            CALL ISTOCCNV;       /* VAL & COPY USER NIB    A1305620 */
*                                                                  0997
         L     @15,@CV03243                                        0997
         BALR  @14,@15                                             0997
*            DO;                                                   0998
*/***  CRRMAINT  PROCNM(ISTOCCOD)COMP(OC)FUNC(RET)  ***/           0999
*            DCL CMZK0054 PTR(31) REG(1);                          0999
*            RFY (CMZK0054) RSTD;                                  1000
*            /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/         1001
*CMZK0054->RPHCRR->CRACRR->OCCCRT = '0'B;                          1001
         L     @08,RPHCRR(,CMZK0054)                               1001
         L     @08,CRACRR(,@08)                                    1001
         XC    OCCCRT+1(2,@08),OCCCRT+1(@08)                       1001
         MVI   OCCCRT(@08),B'00000000'                             1001
*CMZK0054->RPHCRR->CRACRR->COCCOD = '1'B;                          1002
         OI    COCCOD(@08),B'00100000'                             1002
*            END;/*A1305620 */                                     1003
*            IF OCWRC=0           /* IF RETURN CODE = 0     A1305620 */
*              THEN DO;           /*                        A1305620 */
         CLI   OCWRC(OCWPTR),0                                     1004
         BNE   @RF01004                                            1004
*                   DO; /*MODESET  EXTKEY(ZERO)*/                  1006
*                     SPKA (0); /*SET PSW KEY*/                    1007
         SLR   @08,@08                                             1007
         SPKA  0(@08)                                              1007
*                   END; /*MODESET  EXTKEY(ZERO)*/  /*                @
*30APGK*/                                                          1008
*                  RPLARG->NIBSYM=RPRNAME; /* NAME OF TERM  A1305620 */
         L     @08,OCWRPL(,OCWPTR)                                 1009
         L     @08,RPLARG(,@08)                                    1009
         L     @05,OCWDRDTE(,OCWPTR)                               1009
         MVC   NIBSYM(8,@08),RPRNAME(@05)                          1009
*                   DO; /*MODESET  EXTKEY(VTAM)*/                  1010
*                     SPKA (96); /*SET PSW KEY*/                   1011
         LA    @05,96                                              1011
         SPKA  0(@05)                                              1011
*                   END; /*MODESET  EXTKEY(VTAM)*/  /*                @
*30APGK*/                                                          1012
*                  OCWNIB=RPLARG; /* ADDR USER NIB          A1305620 */
         ST    @08,OCWNIB(,OCWPTR)                                 1013
*                  END;           /*                        A1305620 */
*              ELSE;              /*                        A1305620 */
@RF01004 DS    0H                                                  1016
*            RFY CPARMRG0 RSTD;                                    1016
*            CPARMRG0=-1;         /* SET REG NEGATIVE       A1305620 */
         SLR   CPARMRG0,CPARMRG0                                   1017
         BCTR  CPARMRG0,0                                          1017
*            RFY CPARMRG0 UNRSTD;                                  1018
*            CALL DOVSTLCK;       /* REL LOCAL MEMORY LOCK  A1305620 */
         BAL   @14,DOVSTLCK                                        1019
*            END;                 /*                        A1305620 */
*        ELSE;                    /*                        A1305620 */
@RF00995 DS    0H                                                  1022
*      END;                                                        1022
*  ELSE;                                                           1023
@RF00986 DS    0H                                                  1024
*IF OCWODLST=ADDR(OCWCSL)         /* IF SINGLE ELEM REQUEST          */
*  THEN                           /*                         @D32CKMP*/
         LA    @08,OCWCSL(,OCWPTR)                                 1024
         C     @08,OCWODLST(,OCWPTR)                               1024
         BNE   @RF01024                                            1024
*    CSLRDTEF=CON;                /* IND DO BUILD CONN       @D32CKMP*/
         L     @08,OCWODNAS(,OCWPTR)                               1025
         OI    CSLRDTEF(@08),B'10000000'                           1025
*  ELSE;                          /* CON SCVS ALREADY IND    @D32CKMP*/
@RF01024 DS    0H                                                  1027
*C14SVPTR = C14SVPTR-4;                                            1027
         LA    @08,624                                             1027
         ALR   @08,OCWPTR                                          1027
         L     @05,C14SVPTR(,@08)                                  1027
         SL    @05,@CF00045                                        1027
         ST    @05,C14SVPTR(,@08)                                  1027
*CR14PTR = C14SAVE;               /* RESTORE R14 FOR RETURN          */
         L     CR14PTR,C14SAVE(,@05)                               1028
*END DOOKDST;                                                      1029
@EL00013 DS    0H                                                  1029
@EF00013 DS    0H                                                  1029
@ER00013 BR    @14                                                 1029
*DONODST: PROC OPTIONS(NOSAVEAREA,NOSAVE);                         1030
DONODST  DS    0H                                                  1031
*/********************************************************************/
*/*  ROUTINE NAME: DONODST                                           */
*/*  FUNCTION:                                                       */
*/*       CALLED BY CODODSTS TO HANDLE BAD RC FROM CONN SERV         */
*/*       OCWRC AND OCWEC WILL BE SET DETERMINED BY THE RC           */
*/*  ROUTINES CALLED:                                                */
*/*       NONE                                                       */
*/*  MACROS USED:                                                    */
*/*       NONE                                                       */
*/********************************************************************/
*C14SAVE=CR14PTR;            /*RESTORE R14 FOR RETURN*/            1031
         LA    @08,624                                             1031
         ALR   @08,OCWPTR                                          1031
         L     @05,C14SVPTR(,@08)                                  1031
         ST    CR14PTR,C14SAVE(,@05)                               1031
*C14SVPTR = C14SVPTR+4;                                            1032
         AL    @05,@CF00045                                        1032
         ST    @05,C14SVPTR(,@08)                                  1032
*CRETCODE = CSPCC;       /* SAVE RETURN CODE */                    1033
         LH    CRETCODE,CSPCC+224(,OCWPTR)                         1033
*IF CRETCODE = CSRC28                                              1034
* THEN                                                             1034
         C     CRETCODE,@CF02353                                   1034
         BNE   @RF01034                                            1034
*  DO;                                                             1035
*   OCWRC = '08'X;                      /*LOGICAL ERROR*/          1036
         MVI   OCWRC(OCWPTR),X'08'                                 1036
*   OCWEC='4B'X;                  /* DESTINATION UNAVAILABLE    */ 1037
         MVI   OCWEC(OCWPTR),X'4B'                                 1037
*  END;                                                            1038
* ELSE                                                             1039
*                                                                  1039
*   IF CRETCODE=CSRC48                                             1039
*    THEN                                                          1039
         B     @RC01034                                            1039
@RF01034 C     CRETCODE,@CF03263                                   1039
         BNE   @RF01039                                            1039
*     DO;                                                          1040
*      OCWEC='4C'X;              /* NO MATCH LOGON FOR ACPT    */  1041
         MVI   OCWEC(OCWPTR),X'4C'                                 1041
*      OCWRC = '08'X;                      /*LOGICAL ERROR*/       1042
         MVI   OCWRC(OCWPTR),X'08'                                 1042
*     END;                                                         1043
*    ELSE                                                          1044
*     IF CRETCODE=CSRC08                                           1044
*      THEN                                                        1044
         B     @RC01039                                            1044
@RF01039 C     CRETCODE,@CF00037                                   1044
         BNE   @RF01044                                            1044
*       DO;                                                        1045
*        OCWEC='49'X;            /* UNAUTHORIZED REQUEST       */  1046
         MVI   OCWEC(OCWPTR),X'49'                                 1046
*        OCWRC = '08'X;                      /*LOGICAL ERROR*/     1047
         MVI   OCWRC(OCWPTR),X'08'                                 1047
*       END;                                                       1048
*        ELSE                                                      1049
*         IF CRETCODE=CSRC56                                       1049
*         THEN                                                     1049
         B     @RC01044                                            1049
@RF01044 C     CRETCODE,@CF00199                                   1049
         BNE   @RF01049                                            1049
*          DO;                                                     1050
*           OCWEC='4D'X;         /* OPEN CANCELLED BY CLOSE    */  1051
         MVI   OCWEC(OCWPTR),X'4D'                                 1051
*           OCWRC = '08'X;                      /*LOGICAL ERROR*/  1052
         MVI   OCWRC(OCWPTR),X'08'                                 1052
*          END;                                                    1053
*         ELSE                                                     1054
*          IF CRETCODE=CSRC24                                      1054
*           THEN                                                   1054
         B     @RC01049                                            1054
@RF01049 C     CRETCODE,@CF00090                                   1054
         BNE   @RF01054                                            1054
*            DO;                                                   1055
*             OCWRC = '08'X;                      /*LOGICAL ERROR*/
         MVI   OCWRC(OCWPTR),X'08'                                 1056
*             OCWEC='4A'X;     /* OPNDST CANC BY VARY  */          1057
         MVI   OCWEC(OCWPTR),X'4A'                                 1057
*            END;                                                  1058
*           ELSE                                                   1059
*            IF CRETCODE=CSRC20  /* TARGET APPLICATION OF    */    1059
*             THEN                                                 1059
         B     @RC01054                                            1059
@RF01054 C     CRETCODE,@CF01888                                   1059
         BNE   @RF01059                                            1059
*              DO;                                                 1060
*               OCWRC = '08'X;                      /*LOGICAL ERROR*/
         MVI   OCWRC(OCWPTR),X'08'                                 1061
*               OCWEC='43'X;      /* SIMLOGON NEVER ACCEPTS   */   1062
         MVI   OCWEC(OCWPTR),X'43'                                 1062
*              END;                                                1063
*             ELSE                                                 1064
*              IF CRETCODE=CSRC12                                  1064
*               THEN                                               1064
         B     @RC01059                                            1064
@RF01059 C     CRETCODE,@CF00032                                   1064
         BNE   @RF01064                                            1064
*                DO;                                               1065
*                 OCWRC = '14'X;              /*TEMPORARY ERROR*/  1066
         MVI   OCWRC(OCWPTR),X'14'                                 1066
*                 OCWEC='01'X;             /* STORAGE UNAVAILABLE    */
         MVI   OCWEC(OCWPTR),X'01'                                 1067
*                END;                                              1068
*               ELSE                                               1069
*                DO;                                               1069
         B     @RC01064                                            1069
@RF01064 DS    0H                                                  1070
*                 OCWRC = '24'X;            /*SYSTEM ERROR*/       1070
         MVI   OCWRC(OCWPTR),X'24'                                 1070
*                 OCWEC='01'X;               /* UNEXPECTED RC    */
         MVI   OCWEC(OCWPTR),X'01'                                 1071
*                END;                                              1072
*C14SVPTR = C14SVPTR-4;                                            1073
@RC01064 DS    0H                                                  1073
@RC01059 DS    0H                                                  1073
@RC01054 DS    0H                                                  1073
@RC01049 DS    0H                                                  1073
@RC01044 DS    0H                                                  1073
@RC01039 DS    0H                                                  1073
@RC01034 LA    @08,624                                             1073
         ALR   @08,OCWPTR                                          1073
         L     @05,C14SVPTR(,@08)                                  1073
         SL    @05,@CF00045                                        1073
         ST    @05,C14SVPTR(,@08)                                  1073
*CR14PTR = C14SAVE;               /*RESTORE R14 FOR RETURN           */
         L     CR14PTR,C14SAVE(,@05)                               1074
*END DONODST;                                                      1075
@EL00014 DS    0H                                                  1075
@EF00014 DS    0H                                                  1075
@ER00014 BR    @14                                                 1075
*DONOSTR: PROC OPTIONS(NOSAVEAREA,NOSAVE);                         1076
DONOSTR  DS    0H                                                  1077
*/********************************************************************/
*/*  ROUTINE NAME: DONOSTR                                           */
*/*  FUNCTION:                                                       */
*/*       CALLED BY DOSRTLST TO HANDLE BAD RC FROM GETSTOR           */
*/*       OCWRC AND OCWEC WILL BE SET DETERMINED BY THE RC           */
*/*  ROUTINES CALLED:                                                */
*/*       NONE                                                       */
*/*  MACROS USED:                                                    */
*/*       NONE                                                       */
*/********************************************************************/
*C14SAVE = CR14PTR;               /*SAVE R14 FOR RETURN              */
         LA    @08,624                                             1077
         ALR   @08,OCWPTR                                          1077
         L     @05,C14SVPTR(,@08)                                  1077
         ST    CR14PTR,C14SAVE(,@05)                               1077
*C14SVPTR = C14SVPTR+4;                                            1078
         LA    @11,4                                               1078
         ALR   @05,@11                                             1078
         ST    @05,C14SVPTR(,@08)                                  1078
*IF CRETCODE = 4                                                   1079
* THEN                                                             1079
         CR    CRETCODE,@11                                        1079
         BNE   @RF01079                                            1079
*  DO;                                                             1080
*   OCWRC = '14'X;                   /*TEMPORARY ERROR*/           1081
         MVI   OCWRC(OCWPTR),X'14'                                 1081
*   OCWEC = '01'X;         /*STORAGE UNAVAIL.*/                    1082
         MVI   OCWEC(OCWPTR),X'01'                                 1082
*  END;                                                            1083
* ELSE                                                             1084
*  DO;                                                             1084
         B     @RC01079                                            1084
@RF01079 DS    0H                                                  1085
*   OCWRC = '24'X;                    /*SYSTEM ERROR */            1085
         MVI   OCWRC(OCWPTR),X'24'                                 1085
*   OCWEC = '01'X;                     /*UNEXPECTED RET CODE*/     1086
         MVI   OCWEC(OCWPTR),X'01'                                 1086
*  END;                                                            1087
*C14SVPTR = C14SVPTR-4;                                            1088
@RC01079 LA    @08,624                                             1088
         ALR   @08,OCWPTR                                          1088
         L     @05,C14SVPTR(,@08)                                  1088
         SL    @05,@CF00045                                        1088
         ST    @05,C14SVPTR(,@08)                                  1088
*CR14PTR = C14SAVE;               /*RESTORE R14 FOR RETURN           */
         L     CR14PTR,C14SAVE(,@05)                               1089
*END DONOSTR;                                                      1090
@EL00015 DS    0H                                                  1090
@EF00015 DS    0H                                                  1090
@ER00015 BR    @14                                                 1090
*DONOFIND: PROC OPTIONS(NOSAVEAREA,NOSAVE);                        1091
DONOFIND DS    0H                                                  1092
*/********************************************************************/
*/*  ROUTINE NAME: DONOFIND                                          */
*/*  FUNCTION:                                                       */
*/*       CALLED BY DOSRTFND TO HANDLE BAD RC FROM ISTOCCDF          */
*/*       OCWRC AND OCWEC WILL BE SET DETERMINED BY THE RC           */
*/*  ROUTINES CALLED:                                                */
*/*       NONE                                                       */
*/*  MACROS USED:                                                    */
*/*       NONE                                                       */
*/********************************************************************/
*C14SAVE = CR14PTR;               /*SAVE R14 FOR RETURN              */
         LA    @08,624                                             1092
         ALR   @08,OCWPTR                                          1092
         L     @05,C14SVPTR(,@08)                                  1092
         ST    CR14PTR,C14SAVE(,@05)                               1092
*C14SVPTR = C14SVPTR+4;                                            1093
         AL    @05,@CF00045                                        1093
         ST    @05,C14SVPTR(,@08)                                  1093
*IF CRETCODE = 8                                                   1094
* THEN                                                             1094
         C     CRETCODE,@CF00037                                   1094
         BNE   @RF01094                                            1094
*  DO;                                                             1095
*   OCWRC = '24'X;                  /*SYSTEM ERROR*/               1096
         MVI   OCWRC(OCWPTR),X'24'                                 1096
*   OCWEC = '02'X;                  /*SRT DIRECTRY NOT FOUND*/     1097
         MVI   OCWEC(OCWPTR),X'02'                                 1097
*  END;                                                            1098
* ELSE                                                             1099
*  IF CRETCODE = 4                                                 1099
*   THEN                                                           1099
         B     @RC01094                                            1099
@RF01094 C     CRETCODE,@CF00045                                   1099
         BNE   @RF01099                                            1099
*    DO;                                                           1100
*     OCWRC = '08'X;                  /*LOGICAL ERROR*/            1101
         MVI   OCWRC(OCWPTR),X'08'                                 1101
*     OCWEC = '47'X;                 /*NAME NOT IN SRT DIRECTORY*/ 1102
         MVI   OCWEC(OCWPTR),X'47'                                 1102
*    END;                                                          1103
*   ELSE                                                           1104
*    DO;                                                           1104
         B     @RC01099                                            1104
@RF01099 DS    0H                                                  1105
*     OCWRC = '24'X;                    /*SYSTEM ERROR */          1105
         MVI   OCWRC(OCWPTR),X'24'                                 1105
*     OCWEC = '01'X;                     /*UNEXPECTED RET CODE*/   1106
         MVI   OCWEC(OCWPTR),X'01'                                 1106
*    END;                                                          1107
*C14SVPTR = C14SVPTR-4;                                            1108
@RC01099 DS    0H                                                  1108
@RC01094 LA    @08,624                                             1108
         ALR   @08,OCWPTR                                          1108
         L     @05,C14SVPTR(,@08)                                  1108
         SL    @05,@CF00045                                        1108
         ST    @05,C14SVPTR(,@08)                                  1108
*CR14PTR = C14SAVE;               /*RESTORE R14 FOR RETURN           */
         L     CR14PTR,C14SAVE(,@05)                               1109
*END DONOFIND;                                                     1110
@EL00016 DS    0H                                                  1110
@EF00016 DS    0H                                                  1110
@ER00016 BR    @14                                                 1110
*DOVSTLCK: PROC OPTIONS(NOSAVEAREA,NOSAVE);                        1111
DOVSTLCK DS    0H                                                  1112
*/********************************************************************/
*/*  ROUTINE NAME: DOVSTLCK                                          */
*/*  FUNCTION:                                                       */
*/*       CALLED BY SEVERAL ROUTINES(SEE CROSS REF) TO OBTAIN OR     */
*/*       RELEASE THE LOCAL MEMORY LOCK.IF R(0) = 0,LOCK WILL BE     */
*/*       RELEASED. OTHERWISE, IT WILL BE OBTAINED                   */
*/*  ROUTINES CALLED:                                                */
*/*       NONE                                                       */
*/*  MACROS USED:                                                    */
*/*       VSETLCK                                                     *
*/********************************************************************/
*C14SAVE = CR14PTR;               /*SAVE R14 FOR RETURN              */
         LA    @08,624                                             1112
         ALR   @08,OCWPTR                                          1112
         L     @05,C14SVPTR(,@08)                                  1112
         ST    CR14PTR,C14SAVE(,@05)                               1112
*C14SVPTR = C14SVPTR+4;                                            1113
         AL    @05,@CF00045                                        1113
         ST    @05,C14SVPTR(,@08)                                  1113
*RFY CPARMRG0 RSTD;                                                1114
*IF CPARMRG0<CSUCCESS               /*RELE LOCK*/                  1115
* THEN                                                             1115
         LTR   CPARMRG0,CPARMRG0                                   1115
         BNM   @RF01115                                            1115
*  DO;                                                             1116
*                                                                  1116
*/*VSETLCK  (CRETCODE,RELEASE,LOCAL,ISTOCCOD,SET)*/                1117
*     DO;                                                          1117
*                                        /*DECLARE AND RESTRICT REGS */
*                                        /*   2,10,11,12,13,14, AND 15
**/                                                                1118
*     RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) RSTD; 1118
*                                        /*SAVE REGS 2 AND 10 THRU 14*/
*        GEN REFS(GPR02F,GPR10F,GPR11F,GPR12F,GPR14F,GPR13P);      1119
*                                                                  1119
         STM   GPR10F,GPR12F,0(GPR13P)
         ST    GPR14F,12(GPR13P)
         ST    GPR02F,16(GPR13P)
*                                        /*INVOKE MODESET TO CHANGE  */
*                                        /*PSW PROTECTION KEY TO 0   */
*        GEN SETS(2);                                              1120
*                                                                  1120
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
*       GPR10P=GPR13P;                   /*PUT SAVE AREA ADDR IN R 10*/
         LR    GPR10P,GPR13P                                       1121
*                                        /*INVOKE OS/VS SETLOCK MACRO*/
*       GEN REFS(GPR13P,PSALITA,FLC) SETS(GPR12F);                 1122
         SETLOCK RELEASE,TYPE=LOCAL,                                   *
               RELATED=ISTOCCOD
*       GPR15P=GPR13P;                   /*PUT RETURN CODE IN R 15 */
         LR    GPR15P,GPR13P                                       1123
*                                        /*INVOKE MODESET MACRO TO   */
*         DO;                            /*RESTORE PSW PROTECTION KEY*/
*        GEN SETS(2);                                              1125
         MODESET KEYADDR=(2),WORKREG=2
*         END;                           /* RESTORE REGISTERS        */
*       GEN REFS(GPR10F,GPR13P) SETS(GPR10F,GPR11F,                1127
*       GPR12F,GPR13F,GPR14F,GPR02F);                              1127
         LR    GPR13F,GPR10F
         LM    GPR10F,GPR12F,0(GPR13P)
         L     GPR14F,12(GPR13P)
         L     GPR02F,16(GPR13P)
*       IF GPR15F=4 THEN GPR15F=0;                                 1128
         C     GPR15F,@CF00045                                     1128
         BNE   @RF01128                                            1128
         SLR   GPR15F,GPR15F                                       1129
*       CRETCODE=GPR15F;                 /*PUT RETURN CODE IN RCREG*/
*                                                                  1130
@RF01128 DS    0H                                                  1131
*     RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) UNRSTD;
*     END;  /*VSETLCK */ /*RELE LOCK*/                             1132
*   IF CRETCODE = 0                 /*LOCK OBT?*/                  1133
*    THEN                                                          1133
         LTR   CRETCODE,CRETCODE                                   1133
         BNZ   @RF01133                                            1133
*     OCWMLOCK = COFF;            /*INDICATE LCL MEMORY LOCK NOT HELD*/
         NI    OCWMLOCK(OCWPTR),B'11111101'                        1134
*    ELSE                                                          1135
*     DO;                                                          1135
         B     @RC01133                                            1135
@RF01133 DS    0H                                                  1136
*      OCWRC = '24'X;               /*SYSTEM ERROR*/               1136
         MVI   OCWRC(OCWPTR),X'24'                                 1136
*      OCWEC = '01'X;               /* UNEXP ERROR*/               1137
         MVI   OCWEC(OCWPTR),X'01'                                 1137
*     END;                                                         1138
*  END;                                                            1139
* ELSE                                                             1140
*  DO;                                                             1140
*                                                                  1140
         B     @RC01115                                            1140
@RF01115 DS    0H                                                  1141
*/*VSETLCK  (CRETCODE,OBTAIN,LOCAL,ISTOCCOD,RESET)*/               1141
*     DO;                                                          1141
*                                        /*DECLARE AND RESTRICT REGS */
*                                        /*   2,10,11,12,13,14, AND 15
**/                                                                1142
*     RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) RSTD; 1142
*                                        /*SAVE REGS 2 AND 10 THRU 14*/
*        GEN REFS(GPR02F,GPR10F,GPR11F,GPR12F,GPR14F,GPR13P);      1143
*                                                                  1143
         STM   GPR10F,GPR12F,0(GPR13P)
         ST    GPR14F,12(GPR13P)
         ST    GPR02F,16(GPR13P)
*                                        /*INVOKE MODESET TO CHANGE  */
*                                        /*PSW PROTECTION KEY TO 0   */
*        GEN SETS(2);                                              1144
*                                                                  1144
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
*       GPR10P=GPR13P;                   /*PUT SAVE AREA ADDR IN R 10*/
         LR    GPR10P,GPR13P                                       1145
*                                        /*INVOKE OS/VS SETLOCK MACRO*/
*       GEN REFS(GPR13P,PSALITA,FLC) SETS(GPR12F);                 1146
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        *
               RELATED=ISTOCCOD
*       GPR15P=GPR13P;                   /*PUT RETURN CODE IN R 15 */
         LR    GPR15P,GPR13P                                       1147
*                                        /*INVOKE MODESET MACRO TO   */
*         DO;                            /*RESTORE PSW PROTECTION KEY*/
*        GEN SETS(2);                                              1149
         MODESET KEYADDR=(2),WORKREG=2
*         END;                           /* RESTORE REGISTERS        */
*       GEN REFS(GPR10F,GPR13P) SETS(GPR10F,GPR11F,                1151
*       GPR12F,GPR13F,GPR14F,GPR02F);                              1151
         LR    GPR13F,GPR10F
         LM    GPR10F,GPR12F,0(GPR13P)
         L     GPR14F,12(GPR13P)
         L     GPR02F,16(GPR13P)
*       IF GPR15F=4 THEN GPR15F=0;                                 1152
         C     GPR15F,@CF00045                                     1152
         BNE   @RF01152                                            1152
         SLR   GPR15F,GPR15F                                       1153
*       CRETCODE=GPR15F;                 /*PUT RETURN CODE IN RCREG*/
*                                                                  1154
@RF01152 DS    0H                                                  1155
*     RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) UNRSTD;
*     END;  /*VSETLCK */ /*GET LOCK*/                              1156
*   IF CRETCODE = 0                 /*LCL MEM LOCK GOTTEN OK?*/    1157
*    THEN                                                          1157
         LTR   CRETCODE,CRETCODE                                   1157
         BNZ   @RF01157                                            1157
*     OCWMLOCK = CON;               /*INDICATE LOCK GOTTEN*/       1158
         OI    OCWMLOCK(OCWPTR),B'00000010'                        1158
*    ELSE                                                          1159
*     DO;                                                          1159
         B     @RC01157                                            1159
@RF01157 DS    0H                                                  1160
*      OCWRC = '24'X;               /*SYSTEM ERROR*/               1160
         MVI   OCWRC(OCWPTR),X'24'                                 1160
*      OCWEC = '01'X;               /* UNEXP ERROR*/               1161
         MVI   OCWEC(OCWPTR),X'01'                                 1161
*     END;                                                         1162
*  END;                                                            1163
@RC01157 DS    0H                                                  1164
*RFY CPARMRG0 UNRSTD;                                              1164
@RC01115 DS    0H                                                  1165
*C14SVPTR = C14SVPTR-4;                                            1165
         LA    @08,624                                             1165
         ALR   @08,OCWPTR                                          1165
         L     @05,C14SVPTR(,@08)                                  1165
         SL    @05,@CF00045                                        1165
         ST    @05,C14SVPTR(,@08)                                  1165
*CR14PTR = C14SAVE;               /*RESTORE R14 FOR RETURN           */
         L     CR14PTR,C14SAVE(,@05)                               1166
*END DOVSTLCK;                                                     1167
@EL00017 DS    0H                                                  1167
@EF00017 DS    0H                                                  1167
@ER00017 BR    @14                                                 1167
*DOLOGDAT: PROC OPTIONS(NOSAVE);                                   1168
DOLOGDAT DS    0H                                                  1169
*/********************************************************************/
*/*  ROUTINE NAME: DOLOGDAT                                          */
*/*  FUNCTION:                                                       */
*/*       CALLED TO INTERFACE WITH THE LOGON DATA HANDLING           */
*/*       ROUTINE (ISTOCCLD) AND FOR A LOGICAL UNIT OR               */
*/*       3270 DEVICE, TO INTERFACE WITH ISTINCSH TO GET             */
*/*       THE SESSION PARAMETERS.                                    */
*/*  ROUTINES CALLED:                                                */
*/*       ISTOCCLD - OBTAIN LOGON DATA AREA AND COPY LOGON           */
*/*                  DATA TO IT, IF REQUIRED                         */
*/*       ISTINCSH - OBTAIN AND COPY SESSION PARAMETERS TO           */
*/*                  LOGON DATA AREA, IF REQUIRED                    */
*/*  MACROS USED:                                                    */
*/*       CRRMAINT                                                   */
*/********************************************************************/
*   C14SAVE=CR14PTR;                   /* SAVE               @D32CKMP*/
         LA    @08,624                                             1169
         ALR   @08,OCWPTR                                          1169
         L     @05,C14SVPTR(,@08)                                  1169
         ST    CR14PTR,C14SAVE(,@05)                               1169
*   C14SVPTR=C14SVPTR+4;               /*   RETURN           @D32CKMP*/
         AL    @05,@CF00045                                        1170
         ST    @05,C14SVPTR(,@08)                                  1170
*   RFY                                                            1171
*     LGDPTR RSTD;                     /* RESTRICT WORK REG  @D32CKMP*/
*   LGDPTR=NULLDATA;                   /* INSURE REG CLEARED @D32CKMP*/
         SLR   @08,@08                                             1172
         LR    LGDPTR,@08                                          1172
*   IF RPLREQ='16'X                    /* IF REQUEST IS FOR          */
*     THEN                             /*  A SIMLOGON        @D32CKMP*/
         L     @05,OCWRPL(,OCWPTR)                                 1173
         CLI   RPLREQ(@05),22                                      1173
         BNE   @RF01173                                            1173
*     DO;                              /*                    @D32CKMP*/
*       IF ((RPLRLEN>0)                  × /* IF LOGON DATA  @DM13732*/
*           (CSLRDTE->RPRENTRY=RPRENTLU) × /* OR LOGICAL             */
*          ((CSLRDTE->RCPRBASC=CON)      & /* UNIT OR                */
*           (CSLRDTE->RCPRRECD=CON)))      /* 3270                   */
*         THEN                         /* A LOGON DATA AREA  @D32CKMP*/
         C     @08,RPLRLEN(,@05)                                   1175
         BL    @RT01175                                            1175
         L     @08,OCWODNAS(,OCWPTR)                               1175
         L     @08,CSLRDTE(,@08)                                   1175
         CLI   RPRENTRY(@08),X'81'                                 1175
         BE    @RT01175                                            1175
         TM    RCPRBASC(@08),B'11000000'                           1175
         BNO   @RF01175                                            1175
@RT01175 DS    0H                                                  1176
*         DO;                          /* IS REQUIRED        @D32CKMP*/
*           RFY                                                    1177
*             LGDLEN RSTD;             /* RESTRICT WORK REGS @D32CKMP*/
*           IF ((CSLRDTE->RPRENTRY=RPRENTLU)× /* IF LOGICAL         */
*              ((CSLRDTE->RCPRBASC=CON)     & /* UNIT OR             */
*               (CSLRDTE->RCPRRECD=CON)))     /* 3270                */
*             THEN                     /*                    @D32CKMP*/
         L     @08,OCWODNAS(,OCWPTR)                               1178
         L     @08,CSLRDTE(,@08)                                   1178
         CLI   RPRENTRY(@08),X'81'                                 1178
         BE    @RT01178                                            1178
         TM    RCPRBASC(@08),B'11000000'                           1178
         BNO   @RF01178                                            1178
@RT01178 DS    0H                                                  1179
*               RPHPTR=RPHPTR×CSESSPON;/* SET HI-ORDER BIT         1179
*                                         OF RPH PTR FOR A         1179
*                                         LOGICAL UNIT OR          1179
*                                         3270 DEVICE        @D32CKMP*/
         O     RPHPTR,@CF01504                                     1179
*             ELSE;                    /* NOT LU OR 3270     @D32CKMP*/
@RF01178 DS    0H                                                  1181
*           LGDLEN=RPLRLEN;            /* GET LEN OF AND PTR @D32CKMP*/
         L     @08,OCWRPL(,OCWPTR)                                 1181
         L     LGDLEN,RPLRLEN(,@08)                                1181
*           LGDPTR=RPLAREA;            /* TO LOGON DATA      @D32CKMP*/
         L     LGDPTR,RPLAREA(,@08)                                1182
*           CALL ISTOCCLD;             /* GET BUFFERS        @D32CKMP*/
*                                                                  1183
         L     @15,@CV03242                                        1183
         BALR  @14,@15                                             1183
*           DO;                                                    1184
*/***  CRRMAINT  PROCNM(ISTOCCOD)COMP(OC)FUNC(RET)  ***/           1185
*           DCL CMZK0065 PTR(31) REG(1);                           1185
*           RFY (CMZK0065) RSTD;                                   1186
*           /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/          1187
*CMZK0065->RPHCRR->CRACRR->OCCCRT = '0'B;                          1187
         L     @08,RPHCRR(,CMZK0065)                               1187
         L     @08,CRACRR(,@08)                                    1187
         XC    OCCCRT+1(2,@08),OCCCRT+1(@08)                       1187
         MVI   OCCCRT(@08),B'00000000'                             1187
*CMZK0065->RPHCRR->CRACRR->COCCOD = '1'B;                          1188
         OI    COCCOD(@08),B'00100000'                             1188
*           END;        /*     TO             @D32CKMP*/           1189
*             IF CRETCODE=CSUCCESS     /* IF LOGON DATA AREA         */
*               THEN                   /* OBTAINED AND       @D32CKMP*/
         LTR   CRETCODE,CRETCODE                                   1190
         BNZ   @RF01190                                            1190
*               DO;                    /*                    @D32CKMP*/
*                 IF ((CSLRDTE->RPRENTRY=RPRENTLU)× /* IF LU         */
*                    ((CSLRDTE->RCPRBASC=CON)     & /* OR A          */
*                     (CSLRDTE->RCPRRECD=CON)))     /* 3270          */
*                   THEN               /* IS REQUIRED FOR A  @D32CKMP*/
         L     @08,OCWODNAS(,OCWPTR)                               1192
         L     @08,CSLRDTE(,@08)                                   1192
         CLI   RPRENTRY(@08),X'81'                                 1192
         BE    @RT01192                                            1192
         TM    RCPRBASC(@08),B'11000000'                           1192
         BNO   @RF01192                                            1192
@RT01192 DS    0H                                                  1193
*                   DO;                /* 3270 OR LU DEVICE  @D32CKMP*/
*                     FNDLU=OCWODNAS->CSLRDTE; /* SET UP     @D32CKMP*/
         LA    @08,784                                             1194
         ALR   @08,OCWPTR                                          1194
         L     @05,OCWODNAS(,OCWPTR)                               1194
         L     @05,CSLRDTE(,@05)                                   1194
         ST    @05,FNDLU(,@08)                                     1194
*                     FNDAREA=ADDR(LGDPTR->LGPSESSP); /* SRC @D32CKMP*/
         LA    @05,LGPSESSP(,LGDPTR)                               1195
         ST    @05,FNDAREA(,@08)                                   1195
*                     FNDMODE=ADDR(NIBLMODE);/*DCR3934.1 LST @D32CKMP*/
         LA    @03,NIBLMODE+112(,OCWPTR)                           1196
         ST    @03,FNDMODE(,@08)                                   1196
*                     CRPHSV=RPHPTR;   /* SAVE RPH PTR OVER  @D32CKMP*/
         LA    @08,624                                             1197
         ALR   @08,OCWPTR                                          1197
         L     @03,C14SVPTR(,@08)                                  1197
         ST    RPHPTR,CRPHSV(,@03)                                 1197
*                     RPHPTR=ADDR(OCWSHPL); /* PRM LST TO R1 @D32CKMP*/
         LA    RPHPTR,OCWSHPL(,OCWPTR)                             1198
*                     RFY BNSVRG3 RSTD;/*                    @DM13720*/
*                     BNSVRG3=BINUSEL; /* SAVE BINUSEL ACROSS CALL TO*/
         SLR   BNSVRG3,BNSVRG3                                     1200
         IC    BNSVRG3,BINUSEL(,@05)                               1200
*                                      /* ISTINCSH           @DM13720*/
*                     C14SVPTR=C14SVPTR+4; /* SEARCH CALL    @D32CKMP*/
         L     @05,C14SVPTR+624(,OCWPTR)                           1201
         AL    @05,@CF00045                                        1201
         ST    @05,C14SVPTR(,@08)                                  1201
*                     RFY                                          1202
*                       C15PTR RSTD;   /*                    @D32CKMP*/
*                     C15PTR=OCWACVT->ATCSRTAB; /* GET SESS        1203
*                                         PARMS RTN ENTRY          1203
*                                         ADDRESS            @D32CKMP*/
         L     @08,OCWACVT(,OCWPTR)                                1203
         L     C15PTR,ATCSRTAB(,@08)                               1203
*                     CALL ISTINCSH;   /* GET SESS PARMS     @D32CKMP*/
         BALR  @14,@15                                             1204
*                     RFY                                          1205
*                       C15PTR UNRSTD; /*                    @D32CKMP*/
*                     C14SVPTR=C14SVPTR-4; /* RESTORE SAVE   @D32CKMP*/
         LA    @08,624                                             1206
         ALR   @08,OCWPTR                                          1206
         LA    @05,4                                               1206
         L     @11,C14SVPTR(,@08)                                  1206
         SLR   @11,@05                                             1206
         ST    @11,C14SVPTR(,@08)                                  1206
*                     RPHPTR=CRPHSV;   /* RPH POINTER        @D32CKMP*/
         L     RPHPTR,CRPHSV(,@11)                                 1207
*                     BINUSEL=BNSVRG3; /* RESTORE BINUSEL    @DM13720*/
         L     @08,FNDAREA+784(,OCWPTR)                            1208
         STC   BNSVRG3,BINUSEL(,@08)                               1208
*                     RFY BNSVRG3 UNRSTD; /*                 @DM13720*/
*                                                                  1209
*                     DO;                                          1210
*/***  CRRMAINT  PROCNM(ISTOCCOD)COMP(OC)FUNC(RET)  ***/           1211
*                     DCL CMZK0066 PTR(31) REG(1);                 1211
*                     RFY (CMZK0066) RSTD;                         1212
*                     /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/
*CMZK0066->RPHCRR->CRACRR->OCCCRT = '0'B;                          1213
         L     @08,RPHCRR(,CMZK0066)                               1213
         L     @08,CRACRR(,@08)                                    1213
         XC    OCCCRT+1(2,@08),OCCCRT+1(@08)                       1213
         MVI   OCCCRT(@08),B'00000000'                             1213
*CMZK0066->RPHCRR->CRACRR->COCCOD = '1'B;                          1214
         OI    COCCOD(@08),B'00100000'                             1214
*                     END;       /*     TO    @D32CKMP*/           1215
*                     IF CRETCODE^=CSUCCESS /* IF FAILED TO          */
*                       THEN                /* GET SESSION   @D32CKMP*/
         LTR   CRETCODE,CRETCODE                                   1216
         BZ    @RF01216                                            1216
*                       DO;                 /* PARAMETERS    @D32CKMP*/
*                         IF CRETCODE=CLGMDERR × /* IF MODE          */
*                            CRETCODE=CLGMDTBL   /* OR TABLE         */
*                           THEN               /* NOT FOUND  @D32CKMP*/
         CR    CRETCODE,@05                                        1218
         BE    @RT01218                                            1218
         C     CRETCODE,@CF00032                                   1218
         BNE   @RF01218                                            1218
@RT01218 DS    0H                                                  1219
*                           DO;                /*            @D32CKMP*/
*                             OCWRC='08'X;     /* SET ERROR  @D32CKMP*/
         MVI   OCWRC(OCWPTR),X'08'                                 1220
*                             OCWEC='2E'X;     /* RETURN CD  @D32CKMP*/
         MVI   OCWEC(OCWPTR),X'2E'                                 1221
*                           END;               /*            @D32CKMP*/
*                           ELSE;              /*            @D32CKMP*/
@RF01218 DS    0H                                                  1224
*                       END;                   /*            @D32CKMP*/
*                       ELSE;                  /*            @D32CKMP*/
@RF01216 DS    0H                                                  1226
*                   END;               /*                    @D32CKMP*/
*                   ELSE;              /*                    @D32CKMP*/
@RF01192 DS    0H                                                  1228
*               END;                   /*                    @D32CKMP*/
*               ELSE                   /*         ERROR - SO @D32CKMP*/
*                 IF CRETCODE=CLDNERR  /* IF BAD USER AREA           */
*                   THEN               /*                    @D32CKMP*/
         B     @RC01190                                            1229
@RF01190 C     CRETCODE,@CF00045                                   1229
         BNE   @RF01229                                            1229
*                   DO;                /*                    @D32CKMP*/
*                     OCWRC='08'X;     /* BAD USER ADDR      @D32CKMP*/
         MVI   OCWRC(OCWPTR),X'08'                                 1231
*                     OCWEC='58'X;     /* LOGICAL ERROR      @D32CKMP*/
         MVI   OCWEC(OCWPTR),X'58'                                 1232
*                   END;               /*                    @D32CKMP*/
*                   ELSE               /* TEMP ERROR - SO    @D32CKMP*/
*                   DO;                /*                    @D32CKMP*/
         B     @RC01229                                            1234
@RF01229 DS    0H                                                  1235
*                     OCWRC='14'X;     /* NO STORAGE AVAIL   @D32CKMP*/
         MVI   OCWRC(OCWPTR),X'14'                                 1235
*                     OCWEC='01'X;     /* TEMP ERROR         @D32CKMP*/
         MVI   OCWEC(OCWPTR),X'01'                                 1236
*                   END;               /*                    @D32CKMP*/
*             RFY                                                  1238
*               (LGDLEN                /*                            */
*               ,LGDPTR                /*                            */
*               ,CRETCODE) UNRSTD;     /*                    @D32CKMP*/
@RC01229 DS    0H                                                  1238
@RC01190 DS    0H                                                  1239
*          END;                        /*                    @D32CKMP*/
*          ELSE;                       /*                    @D32CKMP*/
@RF01175 DS    0H                                                  1241
*     END;                             /*                    @D32CKMP*/
*     ELSE;                            /*                    @D32CKMP*/
*                                                                  1242
@RF01173 DS    0H                                                  1243
*   C14SVPTR=C14SVPTR-4;               /* RESTORE            @D32CKMP*/
         LA    @15,624                                             1243
         ALR   @15,OCWPTR                                          1243
         L     @08,C14SVPTR(,@15)                                  1243
         SL    @08,@CF00045                                        1243
         ST    @08,C14SVPTR(,@15)                                  1243
*   CR14PTR=C14SAVE;                   /*   RETURN           @D32CKMP*/
*                                                                  1244
         L     CR14PTR,C14SAVE(,@08)                               1244
*END DOLOGDAT;                                                     1245
*                                                                  1245
@EL00018 DS    0H                                                  1245
@EF00018 DS    0H                                                  1245
@ER00018 BR    @14                                                 1245
@PB00018 DS    0H                                                  1246
*/* TPEPILOG   */                                                  1246
* GEN (PRINT OFF);                                                 1246
*                                                                  1246
         PRINT OFF
*/* LOGICAL CHANNEL COMMAND WORD                                      *
*/* ADD A DECLARE                                      003 10/18/74   *
*DCL  1  ISTLCCW BDY(WORD) BASED,                                  1247
*        2  LCCWOP    CHAR(1),         /* OPERATION CODE -CONTROL     *
*           3  LCCWSI BIT(1),          /* SESS INIT / START DIALOG FLG*
*           3  LCCWSD BIT(1),          /* SESS DISCON/END DIALOG FLG  *
*           3  LCCWRWOP BIT(6),        /* READ/WRITE OPERATION CODE   *
*              4  * BIT(1),            /* RESERVED                    *
*              4  LCCWSOP BIT(1),      /* SPECIAL OPERATION LIKE   1247
*                                         ERASE OR READ CONT          *
*              4  LCCWCTL BIT(4),      /* CONTROL TYPE                *
*                 5  LCCWMODE BIT(2),  /* MODE TYPE                   *
*                 5  LCCWTYPE BIT(2),  /* OPERATION TYPE              *
*        2  LCCWFLAG  CHAR(1),         /* FLAG BYTE                   *
*           3  LCCWCD BIT(1),          /* CHAIN DATA                  *
*           3  LCCWCC BIT(1),          /* CHAIN COMMAND               *
*           3  LCCWCKPT BIT(1),        /* SUPPRESS 3705 CHECK POINT
*                                         RECORD                      *
*           3  LCCWNTVC BIT(1),        /* DO NOT PERFORM VALCHEK      *
*           3  LCCWIDAT BIT(1),        /* LCCWDATA CONTAINS DATA      *
*           3  LCCWLSI BIT(1),         /* LCCW SYNCH INDICATOR        *
*              4  LCCWPER BIT(1),      /* POST=RESP                   *
*           3  LCCWRFI BIT(1),         /* REQUEST FEEDBACK INDICATOR  *
*           3  LCCWACI BIT(1),         /* ADDITION COMMAND INDICATOR  *
*        2  LCCWCNT FIXED(16),         /* DATA COUNT                  *
*        2  LCCWDATA PTR(31);          /* DATA ADDRESS OR IMMED. DATA *
*/* LOGICAL COMMAND CODES */                                       1248
*DCL  LXDQ     BIT(8) CONSTANT('3B'X), /* RESET DEVICE QUEUE          *
*     LXEC     BIT(8) CONSTANT('4B'X), /* RESET AT END OF COMMAND     *
*     LXO      BIT(8) CONSTANT('5B'X), /* RESET ORDERLY               *
*     LCCWPRGE BIT(8) CONSTANT('6B'X), /* PURGE                       *
*     LWH      BIT(8) CONSTANT('0F'X), /* WRITE HEADER INDI. 1ST BLOCK*
*     LWRVI    BIT(8) CONSTANT('1F'X), /* WRITE RVI                   *
*     LWNA     BIT(8) CONSTANT('2F'X), /* WRITE NEGATIVE ACK          *
*     LWAA     BIT(8) CONSTANT('3F'X), /* WRITE ALTERNATE ACK         *
*     LWPLG    BIT(8) CONSTANT('5F'X), /* WRITE ACK LEADING GRAPHICS  *
*     LWNLG    BIT(8) CONSTANT('6F'X), /* WRITE NACK LEADING GRAPHICS *
*     LSMDE    BIT(8) CONSTANT('4F'X), /* SET MODE                    *
*     LIFBM    BIT(8) CONSTANT('7F'X), /* INDIC 1ST BLOCK OF MESSAGE  *
*     LTEST    BIT(8) CONSTANT('FE'X), /* TEST LCCW                   *
*     LPRMPT   BIT(8) CONSTANT('13'X), /* PREEMPT LCCW                *
*     LRSTR    BIT(8) CONSTANT('43'X), /* RESTORE LCCW                *
*     LEXEC    BIT(8) CONSTANT('FF'X), /* SPECIAL CONTROL OPERATION   *
*     LREAD    BIT(2) CONSTANT('10'B),  /* READ TYPE LCCW             *
*     LWRITE   BIT(2) CONSTANT('01'B),  /* WRITE TYPE LCCW            *
*     LCNTRL   BIT(2) CONSTANT('11'B),  /* CONTROL TYPE LCCW          *
*     LRESET   BIT(4) CONSTANT('1011'B),/* RESET COMMANDS             *
*     LTIC     BIT(8) CONSTANT('08'X),  /* LOGICAL TIC                *
*     LWR      BIT(6) CONSTANT('000001'B),  /* WRITE CONVERSATIONAL   *
*     LWB      BIT(6) CONSTANT('000101'B),  /* WRITE BLOCK            *
*     LWM      BIT(6) CONSTANT('001001'B),  /* WRITE MESSAGE          *
*     LWT      BIT(6) CONSTANT('001101'B),  /* WRITE TRANSMISSION     *
*     LEWM     BIT(6) CONSTANT('011001'B),  /* ERASE/WRITE MESSAGE    *
*     LEWT     BIT(6) CONSTANT('011101'B),  /* ERASE/WRITE TRNSMSSN   *
*     LEAU     BIT(6) CONSTANT('010001'B),  /* ERASE ALL UNPROTECTED  *
*     LRB      BIT(6) CONSTANT('000110'B),  /* READ BLOCK             *
*     LRM      BIT(6) CONSTANT('001010'B),  /* READ MESSAGE           *
*     LRT      BIT(6) CONSTANT('001110'B),  /* READ TRANSMISSION      *
*     LRMOD    BIT(6) CONSTANT('010010'B),  /* READ MODIFIED          *
*     LRBUF    BIT(6) CONSTANT('010110'B),  /* READ BUFFER            *
*     LRCONT   BIT(6) CONSTANT('011010'B),  /* READ CONTINUOUS        *
*     LRPEP    BIT(6) CONSTANT('011110'B),  /* READ PERPETUAL         *
*     LCPYM    BIT(6) CONSTANT('101001'B),  /* COPY MESSAGE           *
*     LCPYT    BIT(6) CONSTANT('101101'B),  /* COPY TRANSMISSION      *
*     LD       BIT(8) CONSTANT('23'X),  /* DISCONNECT                 *
*     LDEC     BIT(8) CONSTANT('33'X),  /* DISCONNECT WITH END OF CALL*
*     LEOC     BIT(8) CONSTANT('53'X),  /* END OF CALL COMMAND        *
*     LXEL     BIT(8) CONSTANT('0B'X),  /* RESET ERROR LOCK           *
*     LXC      BIT(8) CONSTANT('1B'X),  /* RESET CONDITIONAL          *
*     LXI      BIT(8) CONSTANT('2B'X),  /* RESET IMMEDIATE            *
*     LC       BIT(8) CONSTANT('03'X),  /* CONTACT                    *
*     LWPA     BIT(8) CONSTANT('FD'X); /* WRITE POSITIVE ACK          *
*DCL  LMT      BIT(2) CONSTANT('11'B), /* TRANSMISSION MODE           *
*     LMS      BIT(2) CONSTANT('00'B), /* SPECIAL MODE LIKE CONV, EAU *
*     LMB      BIT(2) CONSTANT('01'B), /* BLOCK MODE                  *
*     LMM      BIT(2) CONSTANT('10'B); /* MSG OR CONTINUOUS MODE      *
*/* FOLLOWING EQUATES FOR  - PORT SOLICITOR (DIAL)                    *
*/* PORT SOLICITOR COMMAND CODES                                      *
*DCL PSOL    BIT(8) CONSTANT('FE'X), /* SPECIAL PORT SOLICITOR     1250
*                                       COMMAND                       *
*    STCTL    BIT(8) CONSTANT('01'X), /* START CONTROL                *
*    RESTCTL  BIT(8) CONSTANT('02'X), /* RESET & CONTROL - REDRIVE    *
*    STIPUT   BIT(8) CONSTANT('03'X); /* START INPUT                  *
*/*   FOLLOWING EQUATES FOR SDLC SUPPORT                              *
*DCL  LCCHOLD  BIT(8) CONSTANT('01'X),  /* HOLD                       *
*     LCCRHOLD BIT(8) CONSTANT('02'X),  /* RELEASE HOLD               *
*     LSEND    BIT(8) CONSTANT ('F1'X), /* SEND                       *
*     LCLEAR   BIT(8) CONSTANT ('F2'X), /* CLEAR                      *
*     LCRUD    BIT(8) CONSTANT ('F3'X), /* CLEAR, UNBIND              *
*     LCRUDNFY BIT(8) CONSTANT ('F4'X), /* CLEAR, UNBIND, NOTIFY      *
*     LNFY     BIT(8) CONSTANT ('F5'X), /* NOTIFY                     *
*     LRELCB   BIT(8) CONSTANT ('F6'X), /* RELEASE CB                 *
*     LRESTSR  BIT(8) CONSTANT ('F7'X), /* RESETSR                    *
*     LCLRNFY  BIT(8) CONSTANT('F8'X),  /* CLEAR/NOTIFY               *
*     LCHPUR   BIT(8) CONSTANT('F9'X);  /* PURGE                      *
*DCL  LCCWSIZE FIXED(8) CONSTANT(8);    /* LCCW SIZE                  *
*DCL  LRDS     BIT(8) CONSTANT('FF'X);  /* RECORD DEV STATS COMMAND   *
*DCL  LQUIS    BIT(8) CONSTANT('FE'X);  /* QUIESCE COMMAND            *
*/*              LOGICAL CHANNEL PROGRAM BLOCK                       */
*/*                                                                  */
*/*  REVISIONS                                         007 05/19/75  */
*/*                                                                  */
*DCL  1  ISTLCPB BDY(WORD) BASED(LCPBPTR),                         1255
*        2 LCPTYPE CHAR(1),            /* TYPE CODE                  */
*        2 LCPLNGTH  PTR(8),           /* LENGTH IN BYTES            */
*        2 LCPREQTG CHAR(2),           /* LCPB REQ. TAG FIELD        */
*          3 LCPFLAGS BIT(8),          /* FLAG BYTE                  */
*            4 LCPZRT00 BIT(1),        /* LOGICAL ERROR FLAG         */
*            4 LCPZRT01 BIT(1),        /* CONTROL BLOCK ERROR        */
*            4 LCPZF001 BIT(1),        /* LCP START PROCESS FLAG     */
*              5 LCPZRT02 BIT(1),      /* I/O INITIATION DISABLED    */
*                6 LCPZRTL2 BIT(1),    /* END OF SCHEDULABLE BLOCK   */
*            4 LCPZF002 BIT(1),        /* LCP IN PROCESSING FLAG     */
*              5 LCPZRT03 BIT(1),      /* GO LOOK AT FMCB LINE STATE */
*                                      /* FIELD (REQ. TAG OVERLAY)   */
*                6 LCPZRTL3 BIT(1),    /* WRITE/READ REQUEST         */
*            4 LCPZF003 BIT(1),        /* LCP PROCESSING COMPLETE FLAG*
*              5 LCPZRT04 BIT(1),      /* STPR SET IN BDU FLAG       */
*                                      /* (REQ. TAG OVERLAY)         */
*                6 LCPZRTL4 BIT(1),    /* FEEDBACK REQUESTED         */
*            4 LCPZF004 BIT(1),        /* SINGLE LCCW/LCP FLAG       */
*              5 LCPZRT05 BIT(1),      /* FEEDBACK TO BE ROUTED TO   */
*                                      /* ICNCB FMCB (REQ. TAG       */
*                                      /* OVERLAY)                   */
*                6 LCPZRTL5 BIT(1),    /* DECREMENT SCHED COUNT ON DEQ*
*            4 LCPZRT06 BIT(1),        /* CRITICAL TEXT BLOCK        */
*                                      /* FLAG (REQ. TAG OVERLAY)    */
*              5 LCPZRTL6 BIT(1),      /* WRITE REQUEST              */
*            4 LCPZRT07 BIT(1),        /* BUFFER TRACE ACTIVE        */
*                                      /* FLAG (REQ. TAG OVERLAY)    */
*              5 LCPZRTL7 BIT(1),      /* SCHEDULING FLAG            */
*          3 LCPMNRCD CHAR(1),         /* LCP MINOR REJECTION CODE   */
*            4 LCPZRT08 BIT(1),        /* I/O TRACE ACTIVE FLAG      */
*                                      /* (REQ. TAG OVERLAY)         */
*              5 LCPZRTL8 BIT(1),      /* DEVICE END NOTIFICATION    */
*            4 LCPZRT09 BIT(1),        /* DIALOGUE SCHED DISABLED    */
*              5 LCPZRTL9 BIT(1),      /* CRITICAL TEXT FLAG         */
*            4 LCPZRT0A BIT(1),        /* SIMULATED CONTACT FLAG     */
*            4 LCPZRT0B BIT(1),        /* SIMULATED DISCONNECT FLAG  */
*        2 LCPCHAIN PTR(31),           /* APS CHAIN                  */
*          3 LCPCHAI1 PTR(8),                                      1255
*            4 LCPCHNG BIT(1),         /* GATE BIT                   */
*          3 LCPCHAI2 PTR(24),         /* ADDRESS FIELD              */
*        2 LCPRUCNT PTR(8),            /* NUMBER OF RU FOR THIS LCPB */
*          3 LCPZMIRC CHAR(1),         /* MINOR RETURN CODE          */
*        2 LCPFLAG2 CHAR(1),           /* SECOND FLAG BYTE           */
*          3 LCPPRFLG BIT(1),          /* PACING REQUIRED            */
*          3 LCPASYN  BIT(1),          /* ASYNCHRONOUS LCPB          */
*          3 LCPRSTRT BIT(1),          /* RESTART LCPB               */
*          3 LCPTLBPI BIT(1),          /* TPIOS BLOCK LCCW           */
*            4 LCPZRIMM BIT(1),        /* RESET IMMED REQUIRED ON ERR*/
*          3 LCPFID0  BIT(1),          /* FID0 TH INDICATOR FOR RECORD*
*            4 LCPEXRES BIT(1),        /* EXCEP. RESPONSE SPEC. 3270R*/
*          3 LCPDSTAT BIT(1),          /* DIALOGUE STATE BIT, 3270R  */
*                                      /* 0=REQ. REJECT,1=STATE ERROR*/
*          3 LCPFREE  BIT(1),          /* DEALLOCATE LCPB 3270R      */
*          3 LCPATOP  BIT(1),          /* ATOP LCPB  3270R           */
*        2 LCPSEQ   FIXED(16),         /* OUTBOUND SEQUENCE NUMBER   */
*          3 LCPRRCCT PTR(8),          /* COUNT OF RESPONSES RECEIVED*/
*          3 LCPRRCNT PTR(8),          /* COUNT OF RESPONSES REQUESTED*
*        2 LCPLCCW1 PTR(31),           /* ADDR FIRST LCCW FOR FID1   */
*        2 LCPCID CHAR(4) BDY(WORD),   /* COMMUNICATION ID           */
*          3 LCPSAF BIT(16),           /* SOURCE IDENTIFICATION      */
*          3 LCPDAF BIT(16),           /* DESTINATION IDENTIFICATION */
*        2 LCPNXLCW PTR(31),           /* ADDR NEXT LCCW             */
*        2 LCPFDBA PTR(31),            /* BTU ADDRESS                */
*          3 LCPFDB1 PTR(8),                                       1255
*          3 LCPFDB2 PTR(24),          /* ADDRESS FIELD              */
*        2 LCPTLBAD PTR(31),           /* ADDRESS OF TLB             */
*        2 LCPFOSN  BIT(16),           /* SEQUENCE NUMBER FIRST RU   */
*        2 LCPFSNCH FIXED(16),         /* 1ST SEQ NUMBER IN RU CHAIN */
*        2 LCPSTYPE FIXED(8),          /* LCPB SUB-TYPE X'FF' = RESET,*
*                                      /* X'00' = NON-RESET          */
*        2 LCPFLG1 CHAR(1),            /* FLAGS                      */
*          3 LCPRESET BIT(1),          /* A TPQUE WITH RESET QUEUED  */
*                                      /* THIS ELEMENT               */
*          3 LCPINTER BIT(1),          /* INTERNAL LCPB              */
*          3 LCPDIRPT BIT(1),          /* NOT SEND W/POST=SCHED=0    */
*          3 LCPREDRV BIT(1),          /* LCPB IS FOR REDRIVE        */
*          3 LCPSTLB  BIT(1),          /* TLB NOT TO BE FREED        */
*          3 LCPTRANS BIT(1),          /* DATA INCLUDES CONTROL CHARS*/
*          3 LCPRSV78 BIT(2),          /* RESERVED                   */
*        2 LCPLCCWC BIT(8),            /* COUNT OF LCCWS             */
*        2 LCPRSV77 CHAR(1),           /* RESERVED                   */
*        2 LCPFLCCW PTR(31),           /* ADDR OF FIRST LCCW         */
*          3 LCPUBFSB PTR(31),         /* UNBIND FSB ADDRESS         */
*        2 LCPCLREP PTR(31),           /* PTR TO CLEAR LCPB IN UCB   */
*/*  NOTE:  THE FOLLOWING FIELD - LCPLCCW MUST BE THE LAST FIELD     */
*/*         IN THIS CONTROL BLOCK.  THE CONTROL BLOCK ISTDCLCP HAS   */
*/*         FIELDS IN IT WHICH MUST BE CONTIGUOUS WITH LCPLCCW       */
*        2 LCPLCCW  CHAR(LENGTH(ISTLCCW)) BDY(WORD), /* FIRST LCCW   */
*          3 LCPRSTQH PTR(31),         /* RESET LCPB QUEUE HEADER    */
*          3 LCPPABA  PTR(31),         /* PAB POINTER                */
*            4 LCPRPHA  PTR(31),       /* RPH POINTER                */
*              5 LCPFTYPE BIT(1);      /* FEEDBACK TYPE              */
*/*     CONSTANTS FOR LCPTYPE                                         *
*DCL  LCRPHFT  BIT(1) CONSTANT('1'B);                              1256
*DCL  LCPABFT  BIT(1) CONSTANT('0'B);                              1257
*DCL LCPBFIRM BIT(8) CONSTANT('10'X);  /* LU FAILED, CLSDST, SCHED LOST
*                                         TERM, OPNDST MAY BE TRIED   *
*DCL LCPBTERM BIT(8) CONSTANT('11'X);  /* TERM RECEIVED,CLSDST,    1259
*                                         SCHED LOST TERM             *
*/*                                                                   *
*                                                                  1260
*DCL 1 LCPZTIE BDY(WORD) DEFINED(LCPCID), /* TOLTEP INTERFACE      1260
*                                         ELEMENT OVERLAY            */
*       2  LCPZFMCA PTR(31),           /* ACTIVE FMCB ADDRESS        */
*       2  LCPZSNA PTR(31),            /* SYMBOLIC NAME ADDRESS      */
*       2  LCPZSNAM CHAR(8) BDY(WORD), /* SYMBOLIC NAME              */
*          3  LCPZTRV1 PTR(31),        /* RESERVED FOR RESTORE LCP   */
*          3  LCPZTRV4 PTR(31);        /* RESERVED FOR RESTORE LCP   */
*DCL LCTYPE BIT(8) CONSTANT('04'X);                                1261
*DCL PLCPTYPE BIT(8) CONSTANT('28'X);  /* PURGE LCPB TYPE ID         */
*DCL LCPCLACB BIT(8) CONSTANT('04'X);  /* LCPB FROM CLOSE ACB        */
*DCL LSRSTYPE BIT(8) CONSTANT('FF'X);  /* RESET SUBTYPE              */
*DCL LCPETYPE BIT(8) CONSTANT('40'X);  /* EXTENDED LCPB TYPE ID      */
*/*                                                                  */
*/*  MINOR RETURN CODES                                              */
*/*                                                                  */
*DCL LCMCRSTR BIT(8) CONSTANT('F7'X),  /* MINOR RC FOR RESETSR       */
*    LCPMNEW  BIT(8) CONSTANT('02'X),  /* EARLY WARNING,             */
*                                      /* RECOVERY IN PROGRESS       */
*    LCPMNPF  BIT(8) CONSTANT('03'X),  /* PERM. I/O FAILURE          */
*    LCPMNAS  BIT(8) CONSTANT('04'X),  /* AUTO NETWORK SHUTDOWN      */
*    LCPMNCL  BIT(8) CONSTANT('06'X),  /* CLOSE/CLSDST OCCURED       */
*    LCPMNVD  BIT(8) CONSTANT('07'X),  /* VARY DEACTIVATE            */
*    LCPMNTF  BIT(8) CONSTANT('10'X),  /* TEMP RECORD DEVICE FAILURE */
*    LCPMNSF  BIT(8) CONSTANT('01'X),  /* TEMP BASIC FAILURE /       */
*    LCPMNTS  BIT(8) CONSTANT('11'X),  /* TERMINATE SELF             */
*    LCPMNAP  BIT(8) CONSTANT('0A'X),  /* APPL. ISSUED CLEAR         */
*    LCPMNPR  BIT(8) CONSTANT('0B'X),  /* PREEMPT                    */
*    LCPMNRE  BIT(8) CONSTANT('0C'X);  /* RESTORE                    */
*/* VS1, VS2 TPIOS SAVEAREA FORMAT */                              1267
*DCL  1  ISTZSAVE BDY(WORD) BASED,                                 1267
*        2   ZSAZSVBC PTR(31),         /* SAVEAREA BACK CHAIN        */
*            3   ZSAZSVMS CHAR(1),     /* MODULE TRACE CODE          */
*                4 ZSAZACTV BIT(1),    /* ACTIVE SAVE AREA FLAG      */
*        2   ZSAZSVFC PTR(31),         /* SAVEAREA FORWARD CHAIN     */
*        2   ZSAZSVRR PTR(31),         /* RETURN REGISTER            */
*        2   ZSAZSVVR (6) PTR(31),    /* VARIABLE REGS (7-12) SVEAREA*/
*        2   ZSAZTRAC CHAR(4);        /* EBCDIC NAME OF OWNER        */
*/*                                                                1268
*THE FOLLOWING EQUATES SHOULD READ ''FIXED(8) CONSTANT(LENGTH(X))'',
*WHERE X IS THE NAME OF THE VARIABLE CONTROL BLOCK OR FIELD OF WHICH
*LENGTH IS THE VALUE BEING EQUATED, SHOULD THE PLS COMPILER BE     1268
*BE ABLE TO TAKE IT.                                               1268
*                                                                    */
*DCL ZSAZSVVA FIXED(8) CONSTANT(8);  /* DISPLACEMENT TO VARIABLE REGS*/
*DCL ZSAZSVSZ FIXED(8) CONSTANT(40); /* LENGTH OF ISTZSAVE           */
*/* PREFIX FOR CRR                                                   */
*/*                                                                  */
*/* RELEASE 1 - JUNE 28, 1973                                        */
*/*                                                                  */
*DCL 1 ISTPFCRR BASED BDY(WORD),        /* PREFIX FOR CRR            */
*     2  PFCCRR   CHAR(4),              /* CRR HEADER                */
*        3  PFCCRRID CHAR(1),           /* CRR ID FIELD              */
*           4  CRRID CHAR(1),           /* BASIC CTL LAYER DEFINITION*/
*        3  PFCRSV10 CHAR(1),           /* RESERVED FOR ALIGNMENT    */
*        3  PFCCRRLN CHAR(2),           /* CRR LENGTH                */
*           4  CRRLEN CHAR(2),          /* BASIC CTL LAYER DEF       */
*     2  PFCHDR CHAR(8) BDY(WORD),      /* SAVE AREA FOR OLD CRR FRR */
*        3  PFCCRRO  PTR(31),           /* PTR TO OLD CRR            */
*           4  CRRCHAIN PTR(31),        /* BASIC CTL LAYER DEFINITION
*                                          FOR OLD CRR PTR           */
*        3  PFCFRRO  PTR(31),           /* PTR TO OLD FRR            */
*           4  CRRFRR   PTR(31),        /* BASIC CTL LAYER         1270
*                                          DEFINITION OF OLD FRR PTR */
*     2  PFCFTA BIT(8),                 /* ID OF LAST FUNCTION TRACED*/
*     2  PFCRSV01 CHAR(3);              /* ALIGNMENT                 */
*DCL PFIDPIE BIT(8) CONSTANT('80'X);    /* DOS/VS TPIOS              */
*DCL PFIDORE BIT(8) CONSTANT('81'X);    /* DOS/VS BMS                */
*DCL PFIDAPE BIT(8) CONSTANT('82'X);    /* DOS/VS PSS                */
*DCL PFCIDPSV BIT(8) CONSTANT('38'X); /* COMPONENT ID              1274
*                                          PSS - VS1 AND 2           */
*DCL PFCIDTPV BIT(8) CONSTANT('3C'X); /* COMPONENT ID              1275
*                                          TPIOS VS1 AND 2           */
*DCL PFCIDSME BIT(8) CONSTANT('3D'X); /* COMPONENT ID              1276
*                                          STORAGE MANAGEMENT DOS    */
*DCL PFCIDOC BIT(8) CONSTANT('31'X);    /* COMPONENT ID OPEN/CLOSE   */
*DCL PFCIDPS BIT(8) CONSTANT('32'X);    /* PORT SOLICITOR            */
*DCL PFCIDCS BIT(8) CONSTANT('34'X);    /* CLUSTER SOLICITOR         */
*DCL PFCIDIT BIT(8) CONSTANT('35'X);    /* INIT/TERM                 */
*DCL PFCIDVY BIT(8) CONSTANT('36'X);    /* VARY                      */
*DCL PFCIDNS  BIT(8) CONSTANT('37'X);   /* NET. STAT.SRV.            */
*DCL PFCIDTPE BIT(8) CONSTANT('38'X);   /* COMPONENT ID            1283
*                                          TPIOS - DOS               */
*DCL PFCIDCL BIT(8) CONSTANT('39'X);    /* COMPONENT ID            1284
*                                          CONTROL LAYER             */
*DCL PFCIDPSE BIT(8) CONSTANT('3A'X);   /* COMPONENT ID            1285
*                                          PSS - DOS                 */
*DCL PFCIDSMV BIT(8) CONSTANT('3F'X);   /* COMPONENT ID            1286
*                                          STORAGE MANAGEMENT        */
*DCL PFCIDTIO BIT(8) CONSTANT('40'X);   /* COMPONENT ID TIIO       1287
*                                          PROCESSING (VS2)          */
*DCL PFCIDRS  BIT(8) CONSTANT('41'X);   /* ID FOR REMOTE SOLICITOR   */
*/* CRR FOR COMMAND FACILITIES                                      */
*/*  REVISIONS                                         001 06/02/75 */
*DCL  1  ISTCFCRR BDY(WORD) BASED, /* CRR FOR COMMAND FACILITIES    */
*        2 CFCAUDIT,               /* AUDIT TRAIL FOR CMD FACILITIES*/
*          3 CFCNTRD  CHAR(1),     /* LIST OF MODULES IN COMMAND    */
*                                  /* FACILITIES ENTERED            */
*            4 NCFCS1   BIT(1),    /* IND MODULE ISTCFCS1 ENTERED   */
*            4 NCFCS2   BIT(1),    /* IND MODULE ISTCFCS2 ENTERED   */
*            4 NCFCR1   BIT(1),    /* IND MODULE ISTCFCR1 ENTERED   */
*            4 NCFCRP   BIT(1),    /* IND MODULE ISTCFCRP ENTERED   */
*            4 NCFCR2   BIT(1),    /* IND MODULE ISTCFCR2 ENTERED   */
*            4 NCFRSVD  BIT(3),    /* RESERVED                      */
*          3 CFCCRT   CHAR(1),     /* LIST OF MODULES IN COMMAND    */
*                                  /* FACILITIES RUNNING            */
*            4 CCFCS1   BIT(1),    /* IND MODULE ISTCFCS1 RUNNING   */
*            4 CCFCS2   BIT(1),    /* IND MODULE ISTCFCS2 RUNNING   */
*            4 CCFCR1   BIT(1),    /* IND MODULE ISTCFCR1 RUNNING   */
*            4 CCFCRP   BIT(1),    /* IND MODULE ISTCFCRP RUNNING   */
*            4 CCFCR2   BIT(1),    /* IND MODULE ISTCFCR2 RUNNING   */
*            4 CCFRSVD1 BIT(3);    /* RESERVED                      */
*DCL TIDCFCS1 BIT(8) CONSTANT('00'X); /* THREAD ID FOR ISTCFCS1     */
*DCL TIDCFCR1 BIT(8) CONSTANT('01'X); /* THREAD ID FOR ISTCFCR1     */
*DCL TIDCFCR2 BIT(8) CONSTANT('02'X); /* THREAD ID FOR ISTCFCR2     */
*/* COMPONENT RECOVERY RECORD FOR TPIOS */                         1293
*/*  DELTA                                             006 02/10/75  */
*DCL                                                               1293
*1  ISTZCRR BDY(WORD) BASED,     /* CONTROL WORD                     */
*   2  ZCRCRR CHAR(4),           /* CONTROL WORD                     */
*      3  ZCRID CHAR(1),         /* CONTROL BLOCK ID                 */
*      3  ZCRLEN CHAR(2),        /* LENGTH OF ZCR                    */
*      3  ZCRFLAG CHAR(1),       /* FLAGS                            */
*   2  ZCRCHAIN PTR(31),         /* POINTER TO PREVIOUS ZCR          */
*   2  ZCRFRRA PTR(31),          /* PTR TO FRR                       */
*   2  ZCRFLGS1 CHAR(1),         /* FLGS USED BY REQUEST COMPLETION  */
*      3  ZCREXSW BIT(1),        /* EXIT SWITCH                      */
*      3  ZCRQUESW BIT(1),       /* QUEUE SWITCH                     */
*      3  ZCRDEQSW BIT(1),       /* DEQUEUE SWITCH                   */
*      3  ZCRWAIT BIT(1),        /* WAIT Q ANALYSIS COMPLETE         */
*      3  ZCRNRMEX BIT(1),       /* NORMAL EXIT TO BE TAKEN          */
*      3  ZCRENDLP BIT(1),       /* END OF LOOP SWITCH               */
*      3  ZCRUNSOL BIT(1),       /* UNSOLICITED DATA                 */
*      3  ZCRFEXIT BIT(1),       /* FORCE EXIT SWITCH                */
*   2  ZCRFLGS2 CHAR(1),         /* FLAGS USED WITHIN TPIOS          */
*      3  ZCRLOCAL BIT(1),       /* LOCAL SUPPORT                    */
*      3  ZCRSHEDI BIT(1),       /* IMMEDIATE SCHEDULE               */
*      3  ZCRFMSED BIT(1),       /* FMCB SEARCH ENDED                */
*      3  ZCROB    BIT(1),       /* OUTBOUND PROC IN PROGRESS        */
*      3  ZCRIF0E1 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*      3  ZCRIF0E2 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*      3  ZCRIF0E3 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*   2  ZCRSWFLD CHAR(1),         /* SWITCHES FOR TPIOS OUTBOUND      */
*      3  ZCRENDSH BIT(1),       /* EXIT FROM REMOTE DEV SCHEDULER   */
*         4  ZCRSLCP BIT(1),     /* SCHEDULE LCPB                    */
*      3  ZCREXTYP BIT(1),       /* TPEXIT TYPE                      */
*      3  ZCRENDPR BIT(1),       /* EXIT FROM INNER PROCESS          */
*      3  ZCRNDLCP BIT(1),       /* EXIT FROM LCPB PROCESSING        */
*         4  ZCROB1 BIT(1),      /* REMOTE DEV SCHED 1ST TIME SWITCH */
*      3  ZCRENDX BIT(1),        /* EXIT FROM LCCW/BTU XLATION       */
*      3  ZCRENDXL BIT(1),       /* EXIT FROM LCCW PROC              */
*      3  ZCRENDAN BIT(1),       /* EXIT FROM LCPB ANALYSIS          */
*      3  ZCRRESET BIT(1),                                         1293
*         4  ZCRCNLXL BIT(1),    /* CANCEL FURTHER XLATE             */
*   2  ZCRFLGS3 CHAR(1),         /* FLAGS FOR OUTBOUND PROCESSING    */
*      3  ZCRTIC BIT(1),         /* SELECT NOT TO BE SENT            */
*      3  ZCRTPCON BIT(1),       /* TPIOS CONTACT SENT               */
*      3  ZCRTPDIS BIT(1),       /* TPIOS DISCONNECT TO BE SENT      */
*      3  ZCRDISC  BIT(1),       /* DISCONNECT IN PROCESS            */
*      3  ZCREDRIV BIT(1),       /* DO DERIVE                        */
*      3  ZCRNOFRE BIT(1),       /* NO FREEING OF SIO QUEUE          */
*      3  ZCRWRPTR BIT(1),       /* WRITE TO PRINTER REQUEST         */
*      3  ZCRINLCP BIT(1),       /* ERROR OCCURED DURING OUTBND PROC */
*   2  ZCRGENSW CHAR(1),         /* GENERAL SWITCHES                 */
*      3  ZCRTSW1  BIT(1),       /* TEMP SW FOR STRUCTURED PGM       */
*      3  ZCRTSW2  BIT(1),       /* TEMP SW FOR STRUCTURED PGM       */
*      3  ZCRRT06  BIT(1),       /* CRITICAL TEXT OPTION             */
*      3  ZCRLCSYN BIT(1),       /* LCCW SYNC SPECIFIED              */
*      3  ZCREXRES BIT(1),       /* EXCEPTION RESPONSE SPECIFIED     */
*      3  ZCRCLRBD BIT(1),       /* FLAG INDICATING BIND WAS CLEARED */
*      3  ZCRBRIS  BIT(1),       /* BRACKET REJECTED DUE TO IN BRAC. */
*      3  ZCRF1RES BIT(1),       /* FID1 RESPONSE TO BE GENERATED    */
*   2  ZCRPFLGS CHAR(1),         /* UTILITIES PROC OPTION FLAGS      */
*      3  ZCRQAHED BIT(1),      /* QXFR RTN TO USE INSERT OPT'N ON TPQ*
*      3  *        BIT(7),      /* RESERVED                          */
*   2  ZCRIBPR CHAR(1),          /* INBOUND PROCESSING FLAGS         */
*         3  ZCRNOBUF BIT(1),    /* FSB WITH NO BUFFER               */
*         3  ZCRERR   BIT(1),    /* ERROR INDICATOR                  */
*         3  ZCRRELK  BIT(1),    /* RESET ERROR LOCK FUNCTION REQ.   */
*         3  ZCRLCPFR BIT(1),    /* FLAG IND. DEALLOCATE ATOP LCPB   */
*         3  ZCRLCPFD BIT(1),    /* FLAG IND. LCPB FOUND ON WAITQ    */
*         3  ZCR3270  BIT(1),    /* 3270 DEVICE                      */
*         3  ZCR3270R BIT(1),    /* 3270 DEVICE IN RECORD MODE       */
*         3  *        BIT(1),    /* RESERVED                         */
*   2  ZCRSCPSW CHAR(1),         /* SESSION CONTROL FLAGS            */
*         3  ZCRTPEX BIT(1),     /* TP EXIT                          */
*         3  ZCRTPINV BIT(1),    /* INVOKE TPIOS                     */
*         3  ZCRRJLCP BIT(1),    /* LCPB REJECTED                    */
*         3  ZCRLREQ BIT(1),     /* REQUEST                          */
*         3  ZCRPRCMP BIT(1),    /* PROCESSING COMPLETE              */
*         3  ZCRFSBWE BIT(1),    /* FSB IS WORK ELEMENT              */
*         3  ZCRSKIPT BIT(1),    /* SKIP TRACE FLAG                  */
*         3  *       BIT(1),     /* RESERVED                         */
*   2  ZCRCRLCP PTR(31),         /* CURRENT LCPB PTR                 */
*   2  ZCRPARMS BDY(WORD),       /* PARAMETERS PASSED TO UTILITIES */
*      3  ZCRFBPTR PTR(31),      /* PTR TO FROM BUFFER               */
*         4  ZCRCBPTR PTR(31),   /* PTR TO CURRENT BUFFER            */
*      3  ZCRTBPTR PTR(31),      /* PTR TO TO-OR-TRANSLATE BUFFER    */
*      3  ZCRMLNG FIXED(15),     /* LENGTH TO MOVE                   */
*      3  ZCRDFRDA FIXED(15),    /* OFFSET FROM DATA ADDR IN FROM BUF*/
*         4  ZCRDTODA FIXED(15), /* OFFSET FROM DATA ADDR XLATE BUF  */
*      3  ZCRPCOD1 CHAR(1),      /* CODE BYTE FOR ALLOC/DISALLOC     */
*         4  ZCRPPG BIT(1),      /* GET PAGEABLE BUFF                */
*         4  ZCRPLNG BIT(1),     /* LENGTH OF BUFFER SPECIFIED       */
*         4  ZCRPFSB BIT(1),     /* GET FSB                          */
*         4  ZCRPLSBF BIT(1),    /* GET LSCB AND BUFFER              */
*            5 ZCRPLSBQ BIT(1),  /* PURGE LSCB QUEUE                 */
*         4  ZCRPLSCB BIT(1),    /* GET OR RELEASE LSCB              */
*         4  ZCRPBUF BIT(1),     /* GET OR RELEASE BUFFER            */
*         4  ZCRPCFTX BIT(1),    /* CONFIDENTIAL TEXT                */
*         4  ZCRPRES BIT(1),     /* RESERVED                         */
*      3  ZCRPCOD2 CHAR(1),      /* CODE BYTE FOR MOVE               */
*         4  ZCRPPG2 BIT(1),     /* GET PAGEABLE BUFFER              */
*         4  ZCRPFHDR BIT(1),    /* FROM BUFFER FDB TO BE USED       */
*         4  ZCRPMFGF BIT(1),    /* MOVE STARTS WIHT 1ST BUFF IN BLOCK*
*         4  ZCRPRES2 BIT(5),    /* RESERVED                         */
*      3  ZCRPCHAR CHAR(1),      /* TRANSLATE & TEST SEARCH CHARACTER*/
*      3  ZCRPSW   CHAR(1),      /* SWITCH FIELD                     */
*   2  ZCRCCWA PTR(31),          /* PTR TO CURRENT CCW (CCW 1 OR 2)  */
*   2  ZCRBFPTR PTR(31),         /* SAVE 1ST BUFF PTR IN TO-BUFF CHN
*                                   OR LAST BUFFER IN CHANNEL PGM    */
*   2  ZCRZLB PTR(31),           /* PTR TO CURR BUFF IN CHANNEL PGM  */
*   2  ZCRPVZB PTR(31),          /* PTR TO PREVIOUS BUFF IN CHAN PGM */
*   2  ZCRSVRTN BDY(WORD),       /* REG 14 SAVE AREAS                */
*      3  ZCRSVF1 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF2 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF3 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF4 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF5 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF6 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF7 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF8 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF9 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF10 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF11 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF12 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF13 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF14 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF15 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF16 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF17 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF18 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF19 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF20 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF21 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF22 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF23 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF24 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF25 PTR(31),      /* SAVE REQUIRED REGISTER           */
*   2  ZCRWKARA BDY(WORD),       /* TEMPORARY REG SAVE AREA          */
*      3  ZCRSVWK1 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK2 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK3 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK4 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK5 PTR(31),      /* SAVE REQUIRED REG                */
*   2  ZCRFSBSV PTR(31),         /* FSB CHAIN PTR SAVEAREA           */
*   2  ZCRFBPRC BIT(1),          /* FSB PROCESS SW                   */
*   2  ZCRMOREL BIT(1),          /* MORE ELEMENTS SW                 */
*   2  ZCRSCANQ BIT(1),          /* SCAN QUEUE SW                    */
*   2  ZCRNXTEL BIT(1),          /* NEXT ELEMENT SW                  */
*   2  ZCRXSCHD BIT(1),          /* EXIT SCHEDULE SW                 */
*   2  ZCRLSTFB BIT(1),          /* INBOUND PROC LAST FSB FOR ELEM SW*/
*   2  ZCRTOPQ  BIT(1),          /* QUEUE ELEMENT TO TOP SW          */
*   2  ZCRAWQSW BIT(1),          /* CHECK AWAITQ FOR MORE WORK =1    */
*                                /* CHECK WAITQ =0                   */
*   2  ZCRRCDSV CHAR(1),         /* RETURN CODE SAVEAREA             */
*   2  ZCRPRMTC CHAR(1),         /* PREEMPT COMPLETION PARAMETER BYTE*/
*   2  ZCROPCDE CHAR(1),         /* OP CODE TO BE TRANSFORMED         *
*   2  ZCRR2SV PTR(31),          /* ISTZBFDI REG 2 SAVE EREA         */
*   2  ZCRR13SV PTR(31),         /* ISTSBFDI REG 13 SAVE EREA        */
*   2  ZCRCIDSV BDY(WORD),       /* ISTZBFDI CID SAVE AREA           */
*      3  ZCRSAFSV CHAR(2),      /* ISTZBFDI SAF SAVE AREA           */
*      3  ZCRDAFSV CHAR(2),      /* ISTZBFDI DAF SAVE AREA           */
*   2  ZCRSAVEZ (6) BDY(WORD) CHAR(LENGTH(ISTZSAVE)),              1293
*                                /* SAVE/TRACE AREAS FOR TPIOS MODS  */
*   2  ZCRREMIC PTR(31),        /* POINTER TO REMOTE RN ICNCB        */
*   2  ZCRAUDIT CHAR(36),        /* TPIOS AUDIT TRAIL AREA           */
*      3  ZCRTID CHAR(1),        /* THREAD I.D.                      */
*      3  ZCRTNAME CHAR(4),      /* LAST 4 CHARS OF THREAD NAME      */
*      3  ZCRENTER BIT(248),     /* BIT ARRAY FOR MODULES ENTERED    */
*         4  ZCREAC1A BIT(1),    /* ISTZAC1A ENTERED                 */
*         4  ZCREAC0A BIT(1),    /* ISTZAC0A ENTERED                 */
*         4  ZCREAC0B BIT(1),    /* ISTZAC0B ENTERED                 */
*         4  ZCREAC1B BIT(1),    /* ISTZAC1B ENTERED                 */
*         4  ZCREBCAA BIT(1),    /* ISTZBCAA ENTERED                 */
*         4  ZCREBCAB BIT(1),    /* ISTZBCAB ENTERED                 */
*         4  ZCREBCAE BIT(1),    /* ISTZBCAE ENTERED                 */
*         4  ZCREBCAG BIT(1),    /* ISTZBCAG ENTERED                 */
*         4  ZCREBCAI BIT(1),    /* ISTZBCAI ENTERED                 */
*         4  ZCREBCAM BIT(1),    /* ISTZBCAM ENTERED                 */
*         4  ZCREBCBA BIT(1),    /* ISTZBCBA ENTERED                 */
*         4  ZCREBCBB BIT(1),    /* ISTZBCBB ENTERED                 */
*         4  ZCREBCBI BIT(1),    /* ISTZBCBI ENTERED                 */
*         4  ZCREBCCB BIT(1),    /* ISTZBCCB ENTERED                 */
*         4  ZCREBCDI BIT(1),    /* ISTZBCDI ENTERED                 */
*         4  ZCREBCEB BIT(1),    /* ISTZBCEB ENTERED                 */
*         4  ZCREBCFA BIT(1),    /* ISTZBCFA ENTERED                 */
*         4  ZCREBCFB BIT(1),    /* ISTZBCFB ENTERED                 */
*         4  ZCREBCGA BIT(1),    /* ISTZBCGA ENTERED                 */
*         4  ZCREBCGB BIT(1),    /* ISTZBCGB ENTERED                 */
*         4  ZCREBCHA BIT(1),    /* ISTZBCHA ENTERED                 */
*         4  ZCREBCHB BIT(1),    /* ISTZBCHB ENTERED                 */
*         4  ZCREBCIA BIT(1),    /* ISTZBCIA ENTERED                 */
*         4  ZCREBCIB BIT(1),    /* ISTZBCIB ENTERED                 */
*         4  ZCREBCID BIT(1),    /* ISTZBCID ENTERED                 */
*         4  ZCREBCJA BIT(1),    /* ISTZBCJA ENTERED                 */
*         4  ZCREBCJB BIT(1),    /* ISTZBCJB ENTERED                 */
*         4  ZCREBCKA BIT(1),    /* ISTZBCKA ENTERED                 */
*         4  ZCREBCKB BIT(1),    /* ISTZBCKB ENTERED                 */
*         4  ZCREBCLA BIT(1),    /* ISTZBCLA ENTERED                 */
*         4  ZCREBCLB BIT(1),    /* ISTZBCLB ENTERED                 */
*         4  ZCREBCMB BIT(1),    /* ISTZBCMB ENTERED                 */
*         4  ZCREBCND BIT(1),    /* ISTZBCND ENTERED                 */
*         4  ZCREBCNE BIT(1),    /* ISTZBCNE ENTERED                 */
*         4  ZCREBCOB BIT(1),    /* ISTZBCOB ENTERED                 */
*         4  ZCREBCPB BIT(1),    /* ISTZBCPB ENTERED                 */
*         4  ZCREBCQB BIT(1),    /* ISTZBCQB ENTERED                 */
*         4  ZCREBCRA BIT(1),    /* ISTZBCRA ENTERED                 */
*         4  ZCREBCRB BIT(1),    /* ISTZBCRB ENTERED                 */
*         4  ZCREBCSC BIT(1),    /* ISTZBCSC ENTERED                 */
*         4  ZCREBCXA BIT(1),    /* ISTZBCXA ENTERED                 */
*         4  ZCREBCX0 BIT(1),    /* ISTZBCX0 ENTERED                 */
*         4  ZCREBCY0 BIT(1),    /* ISTZBCY0 ENTERED                 */
*         4  ZCREBCZ0 BIT(1),    /* ISTZBCZ0 ENTERED                 */
*         4  ZCREBC0A BIT(1),    /* ISTZBC0A ENTERED                 */
*         4  ZCREBC0B BIT(1),    /* ISTZBC0B ENTERED                 */
*         4  ZCRECC0A BIT(1),    /* ISTZCC0A ENTERED                 */
*         4  ZCRECC0B BIT(1),    /* ISTZCC0B ENTERED                 */
*         4  ZCRECC1A BIT(1),    /* ISTZCC1A ENTERED                 */
*         4  ZCRECC1B BIT(1),    /* ISTZCC1B ENTERED                 */
*         4  ZCRECC2B BIT(1),    /* ISTZCC2B ENTERED                 */
*         4  ZCREDCA0 BIT(1),    /* ISTZDCA0 ENTERED                 */
*         4  ZCREDCB0 BIT(1),    /* ISTZDCB0 ENTERED                 */
*         4  ZCREDCC0 BIT(1),    /* ISTZDCC0 ENTERED                 */
*         4  ZCREDCD0 BIT(1),    /* ISTZDCD0 ENTERED                 */
*         4  ZCREDCE0 BIT(1),    /* ISTZDCE0 ENTERED                 */
*         4  ZCREDCF0 BIT(1),    /* ISTZDCF0 ENTERED                 */
*         4  ZCREDCH0 BIT(1),    /* ISTZDCH0 ENTERED                 */
*         4  ZCREDCI0 BIT(1),    /* ISTZDCI0 ENTERED                 */
*         4  ZCREDCJ0 BIT(1),    /* ISTZDCJ0 ENTERED                 */
*         4  ZCREDCKA BIT(1),    /* ISTZDCKA ENTERED                 */
*         4  ZCREDCKB BIT(1),    /* ISTZDCKB ENTERED                 */
*         4  ZCREDCL0 BIT(1),    /* ISTZDCL0 ENTERED                 */
*         4  ZCREDCMB BIT(1),    /* ISTZDCMB ENTERED                 */
*         4  ZCREECBA BIT(1),    /* ISTZECBA ENTERED                 */
*         4  ZCREECBB BIT(1),    /* ISTZECBB ENTERED                 */
*         4  ZCREECCA BIT(1),    /* ISTZECCA ENTERED                 */
*         4  ZCREECCB BIT(1),    /* ISTZECCB ENTERED                 */
*         4  ZCREECDA BIT(1),    /* ISTZECDA ENTERED                 */
*         4  ZCREECEA BIT(1),    /* ISTZECEA ENTERED                 */
*         4  ZCREECTA BIT(1),    /* ISTZECTA ENTERED                 */
*         4  ZCREFCEA BIT(1),    /* ISTZFCEA ENTERED                 */
*         4  ZCREFCEB BIT(1),    /* ISTZFCEB ENTERED                 */
*         4  ZCREGCAB BIT(1),    /* ISTZGCAB ENTERED                 */
*         4  ZCREGCBB BIT(1),    /* ISTZGCBB ENTERED                 */
*         4  *        BIT(1),    /* NOT USED                         */
*         4  ZCREGCDB BIT(1),    /* ISTZGCDB ENTERED                 */
*         4  ZCREGCEB BIT(1),    /* ISTZGCEB ENTERED                 */
*         4  ZCREGCLA BIT(1),    /* ISTZGCLA ENTERED                 */
*         4  ZCREGC0A BIT(1),    /* ISTZGC0A ENTERED                 */
*         4  ZCREGC0B BIT(1),    /* ISTZGC0B ENTERED                 */
*         4  ZCREHCAN BIT(1),    /* ISTZHCAN ENTERED                 */
*         4  ZCREICAA BIT(1),    /* ISTZICAA ENTERED                 */
*         4  ZCREICAB BIT(1),    /* ISTZICAB ENTERED                 */
*         4  ZCREICBB BIT(1),    /* ISTZICBB ENTERED                 */
*         4  ZCREICBI BIT(1),    /* ISTZICBI ENTERED                 */
*         4  ZCREICCB BIT(1),    /* ISTZICCB ENTERED                 */
*         4  ZCREICCI BIT(1),    /* ISTZICCI ENTERED                 */
*         4  ZCREICDB BIT(1),    /* ISTZICDB ENTERED                 */
*         4  ZCREICEB BIT(1),    /* ISTZICEB ENTERED                 */
*         4  ZCREICGB BIT(1),    /* ISTZICGB ENTERED                 */
*         4  ZCREICHB BIT(1),    /* ISTZICHB ENTERED                 */
*         4  ZCREICIB BIT(1),    /* ISTZICIB ENTERED                 */
*         4  ZCREICID BIT(1),    /* ISTZICID ENTERED                 */
*         4  ZCREICJB BIT(1),    /* ISTZICJB ENTERED                 */
*         4  ZCREICKB BIT(1),    /* ISTZICKB ENTERED                 */
*         4  ZCREICKE BIT(1),    /* ISTZICKE ENTERED                 */
*         4  ZCREICKG BIT(1),    /* ISTZICKG ENTERED                 */
*         4  ZCREICLB BIT(1),    /* ISTZICLB ENTERED                 */
*         4  ZCREICMB BIT(1),    /* ISTZICMB ENTERED                 */
*         4  ZCREICNA BIT(1),    /* ISTZICNA ENTERED                 */
*         4  ZCREICNB BIT(1),    /* ISTZICNB ENTERED                 */
*         4  ZCREICOA BIT(1),    /* ISTZICOA ENTERED                 */
*         4  ZCREICOB BIT(1),    /* ISTZICOB ENTERED                 */
*         4  ZCREICQA BIT(1),    /* ISTZICQA ENTERED                 */
*         4  ZCREICQB BIT(1),    /* ISTZICQB ENTERED                 */
*         4  ZCREICRB BIT(1),    /* ISTZICRB ENTERED                 */
*         4  ZCREICSB BIT(1),    /* ISTZICSB ENTERED                 */
*         4  ZCREICSC BIT(1),    /* ISTZICSC ENTERED                 */
*         4  ZCREICTB BIT(1),    /* ISTZICTB ENTERED                 */
*         4  ZCREICUB BIT(1),    /* ISTZICUB ENTERED                 */
*         4  ZCREICVB BIT(1),    /* ISTZICVB ENTERED                 */
*         4  ZCREICWB BIT(1),    /* ISTZICWB ENTERED                 */
*         4  ZCREICX0 BIT(1),    /* ISTZICX0 ENTERED                 */
*         4  ZCREIC0B BIT(1),    /* ISTZIC0B ENTERED                 */
*         4  ZCREIC1B BIT(1),    /* ISTZIC1B ENTERED                 */
*         4  ZCREJCAB BIT(1),    /* ISTZJCAB ENTERED                 */
*         4  ZCREJCBB BIT(1),    /* ISTZJCBB ENTERED                 */
*         4  ZCREJCCB BIT(1),    /* ISTZJCCB ENTERED                 */
*         4  ZCREJCDB BIT(1),    /* ISTZJCDB ENTERED                 */
*         4  ZCREJC0B BIT(1),    /* ISTZJC0B ENTERED                 */
*         4  ZCREKCBB BIT(1),    /* ISTZKCBB ENTERED                 */
*         4  ZCREKCBN BIT(1),    /* ISTZKCBN ENTERED                 */
*         4  ZCREKCCN BIT(1),    /* ISTZKCCN ENTERED                 */
*         4  ZCREDCWR BIT(1),    /* ISTZDCWR ENTERED                 */
*         4  ZCREDCWB BIT(1),    /* ISTZDCWB ENTERED                 */
*         4  ZCREDCXR BIT(1),    /* ISTZDCXR ENTERED                 */
*         4  ZCREBCBR BIT(1),    /* ISTZBCBR ENTERED                 */
*         4  ZCREBCDR BIT(1),    /* ISTZBCDR ENTERED                 */
*         4  ZCREBCAR BIT(1),    /* ISTZBCAR ENTERED                 */
*         4  ZCRECCBI BIT(1),    /* ISTZCCBI ENTERED                 */
*         4  ZCRECCAI BIT(1),    /* ISTZCCAI ENTERED                 */
*         4  ZCRECCCI BIT(1),    /* ISTZCCCI ENTERED                 */
*         4  ZCREAC1R BIT(1),    /* ISTZAC1R ENTERED                 */
*         4  ZCREBCSB BIT(1),    /* ISTZBCSB ENTERED                 */
*         4  ZCREDCPR BIT(1),    /* ISTZDCPR ENTERED                 */
*         4  ZCREDCQR BIT(1),    /* ISTZDCQR ENTERED                 */
*         4  ZCREBCAL BIT(1),    /* ISTZBCAL ENTERED                 */
*         4  ZCREBC0L BIT(1),    /* ISTZBC0L ENTERED                 */
*         4  ZCREBCNB BIT(1),    /* ISTZBCNB ENTERED                 */
*         4  ZCREICOE BIT(1),    /* ISTZICOE ENTERED                 */
*         4  ZCREDCNB BIT(1),    /* ISTZDCNB ENTERED                 */
*         4  ZCREKCCB BIT(1),    /* ISTZKCCB ENTERED                 */
*         4  ZCRECFY0 BIT(1),    /* ISTZCFY0 ENTERED                 */
*         4  ZCREDCK0 BIT(1),    /* ISTZDFK0 ENTERED                 */
*         4  ZCREICSG BIT(1),    /* ISTZICSG ENTERED                 */
*         4  ZCREBCIF BIT(1),    /* ISTZBCIF ENTERED                 */
*         4  ZCREDCMF BIT(1),    /* ISTZDCMF ENTERED                 */
*         4  ZCRELCAB BIT(1),    /* ISTZLCAB ENTERED                 */
*         4  ZCREAC2B BIT(1),    /* ISTZAC2B ENTERED                 */
*         4  ZCREIC2B BIT(1),    /* ISTZIC2B ENTERED                 */
*         4  ZCRRSV97 BIT(97),   /* RESERVED                         */
*   2  ZCRCMNRC CHAR(1),                /* PURGE MWOR RETURN CODE    */
*   2  ZCRWORDA CHAR(3),                /* RESERVED FOR LATER USE    */
*   2  ZCRLCPB  CHAR(LENGTH(ISTLCPB)),  /* 3270 S/R LCPB             */
*      3 ZCRRHRU,                       /* SAVEAREA FOR RH AND RU    */
*        4 ZCRRH    CHAR(3),            /* RH                        */
*        4 ZCRRU    CHAR(*);            /* RU                        */
*DCL ZCTYPE BIT(8) CONSTANT('00'X);   /* ZCR TYPE                   */
*DCL ZCLNG FIXED(15) CONSTANT(172);   /* ZCRR LENGTH                */
*DCL ZCRSAVNO BIT(8) CONSTANT('06'X); /* NUMBER OF SAVEAREAS IN ZCRR */
*DCL ZCRLSVNO BIT(8) CONSTANT('04'X); /* NUMBER OF SAVE AREAS IN   1297
*                                         LOCAL SUPPORT              */
*/* *** EQUATES FOR ZCRRCDSV *** */                                1298
*                                                                  1298
*DCL ZCRMRFSB BIT(8) CONSTANT('0C'X);  /* REQUEST COMPLETION MOVE FSB
*                                         TO PROCESS                 */
*DCL ZCRSRCHQ BIT(8) CONSTANT('10'X);  /* REQUEST COMPLETION SEARCH
*                                         REQUEST QUEUE              */
*DCL ZCREXIT  BIT(8) CONSTANT('14'X);  /* REQUEST COMPLETION EXIT    */
*DCL ZCRSFSB  BIT(8) CONSTANT('18'X);  /* REQUEST COMPLETION SINGLE
*                                         FSB                        */
*DCL ZCRDLFSB BIT(8) CONSTANT('1C'X);  /* REQUEST COMPLETION DUAL FSB *
*DCL ZCRNOSCH BIT (8) CONSTANT('20'X); /* REQUEST COMPLETION, EXIT WITH
*                                         SCHED NONE                 */
*DCL ZCRNRSCH BIT (8) CONSTANT('24'X); /* REQUEST COMPLETION, EXIT WITH
*                                         SCHED NORM                 */
*DCL ZCRLGERR FIXED(8) CONSTANT(8);    /* LOGICAL ERROR              */
*DCL ZCPLSCB BIT(8) CONSTANT('08'X);   /* GET A RELEASE LSCB         */
*DCL ZCPBUF  BIT(8) CONSTANT('04'X);   /* GET A RELEASE BUFFER       */
*DCL ZCRTAC0A FIXED(8) CONSTANT(01);   /* LOCAL DEVICE SCHEDULER(OUT)*/
*DCL ZCRTAC0B FIXED(8) CONSTANT(02);   /* REMOTE DEVICE SCHEDLER(OUT)*/
*DCL ZCRTCC1A FIXED(8) CONSTANT(03);   /* LOCAL DIALOG SCHEDLER(IN)  */
*DCL ZCRTCC1B FIXED(8) CONSTANT(04);   /* REMOTE DIALOG SCHEDLER(IN) */
*DCL ZCRTDCE0 FIXED(8) CONSTANT(05);   /* NCP SLOWDOWN RECOVERY      */
*DCL ZCRTDCKA FIXED(8) CONSTANT(06);   /* LOCAL GENERAL FUNCTIONS    */
*DCL ZCRTDCKB FIXED(8) CONSTANT(07);   /* REMOTE GENERAL FUNCTIONS   */
*DCL ZCRTFCEB FIXED(8) CONSTANT(08);   /* REMOTE READ BUFFER ALLOC.  */
*DCL ZCRTGCLA FIXED(8) CONSTANT(09);   /* LCAL CTL & TEST FEEDBACK(IN)*
*DCL ZCRTGC0A FIXED(8) CONSTANT(10);   /* LOCAL REQ. COMPLETION(IN)  */
*DCL ZCRTGC0B FIXED(8) CONSTANT(11);   /* REMOTE REQ. COMPLETION(IN) */
*DCL ZCRTICWB FIXED(8) CONSTANT(12);   /* RESET CLEANUP (PHASE 5)    */
*DCL ZCRTIC0B FIXED(8) CONSTANT(13);   /* REMOTE REQ COMPLTION CTL(IN)*
*DCL ZCRTAC1B FIXED(8) CONSTANT(14);   /* ISTZAC1B THREAD ID         */
*DCL ZCRTIC1B FIXED(8) CONSTANT(15);   /* ISTZIC1B THREAD ID         */
*DCL ZCRTCCBI FIXED(8) CONSTANT(16);   /* ISTZCCBI THREAD ID         */
*DCL ZCRTAC1R FIXED(8) CONSTANT(17);   /* ISTZAC1R THREAD ID         */
*DCL ZCRTAC1A FIXED(8) CONSTANT(18);   /* ISTZAC1A THREAD ID         */
*DCL ZCRTLCAB FIXED(8) CONSTANT(19);   /* ISTZLCAB THREAD ID         */
*/* COMPONENT RECOVERY                                               */
*/*                                                                  */
*DCL 1 ISTASCRR BDY(WORD) BASED,        /* CRR FOR SMS               */
*     2  ASCPFCRR CHAR(LENGTH(ISTPFCRR)),                          1327
*     2  ASCFLAGS CHAR(7),              /* FLAGS                     */
*        3  ASCFLG1 CHAR(2),            /* MODULE TRACE FLAGS        */
*           4  ASCFBA BIT(1),           /* ALLOCATION IN PATH        */
*           4  ASCFBD BIT(1),           /* DE-ALLOCATION IN PATH     */
*           4  ASCFSR BIT(1),           /* FSR IN PATH               */
*           4  ASCPASTR BIT(13),        /* RESERVED PATH FLAGS       */
*        3  ASCFLG2 CHAR(2),            /* MODULE IN CONTROL FLAGS   */
*           4  ASCFBAIC BIT(1),         /* ALLOCATION IN CONTROL     */
*           4  ASCFBDIC BIT(1),         /* DE-ALLOCATION IN CONTROL  */
*           4  ASCFSRIC BIT(1),         /* FSR IN CONTROL            */
*           4  ASCICR BIT(13),          /* RESERVED IN CONTROL FLAGS */
*        3  ASCFLG3 CHAR(3),            /* AUDIT FLAGS               */
*           4  ASCFSRGT BIT(1),         /* FSR DOING GET PROCESSING  */
*           4  ASCFBDAL BIT(1),         /* FBD DOING ALLOCATION      */
*           4  ASCKEYF BIT(1),          /* KEY HAS BEEN ALTERED      */
*           4  ASCLLKF BIT(1),          /* LOCAL LOCK HELD           */
*           4  ASCFBDUD BIT(1),         /* FBD USING USER DATA       */
*           4  ASCAUDIT BIT(19),        /* RESERVED AUDIT BITS       */
*     2  ASCKEY CHAR(1),                /* ORIGINAL KEY              */
*     2  ASCETRYA PTR(31),              /* RETRY ADRS FOR CONTINUE 1327
*                                          OPTION                    */
*     2  ASCUSRGS CHAR(16),             /* SAVE AREA FOR USER REGS 1327
*                                          14 - 1                    */
*        3  ASCUSR14 CHAR(4),           /* REGISTER 14               */
*        3  ASCUSR15 CHAR(4),           /* REGISTER 15               */
*        3  ASCUSR00 CHAR(4),           /* REGISTER 0                */
*        3  ASCUSR01 CHAR(4),           /* REGISTER 1                */
*     2  ASCPSREG CHAR(16);             /* SAVE AREA FOR PSS       1327
*                                          REGS 1 - 4                */
*/*  INITIAL LEVEL                                      001 04/09/75 */
*DCL 1 ISTAPCRR BDY(WORD) BASED,                                   1328
*     2 APCHDRSV CHAR(LENGTH(ISTPFCRR)),  /* HEADER                  */
*     2  APCATFLG CHAR(2),              /* AUDIT TRACE FLAGS         */
*        3  APC51E BIT(1),              /* ISTAPC51 WAS ENTERED      */
*        3  APC52E BIT(1),              /* ISTAPC52  '     '         */
*        3  APC53E BIT(1),              /* ISTAPC53                  */
*        3  APC54E BIT(1),                                         1328
*        3  APC56E BIT(1),                                         1328
*        3  APC57E BIT(1),                                         1328
*        3  APC58E BIT(1),                                         1328
*        3  APC31E BIT(1),                                         1328
*        3 * BIT(8),                    /* RESERVED                  */
*     2  APCRFLG CHAR(2),               /* AUDIT TRACE FLAGS         */
*        3  APC51R BIT(1),              /* ISTAPCR1 IS RUNNING       */
*        3  APC52R BIT(1),              /* ISTAPC52 IS RUNNING       */
*        3  APC53R BIT(1),                                         1328
*        3  APC54R BIT(1),                                         1328
*        3  APC56R BIT(1),                                         1328
*        3  APC57R BIT(1),                                         1328
*        3  APC58R BIT(1),                                         1328
*        3  APC31R BIT(1),                                         1328
*        3  *      BIT(8),              /* RESERVED                  */
*     2  APCPSTA PTR(31),               /* PST@                      */
*     2  APCTCBA PTR(31),               /* TCB@                      */
*     2  APCRTRN PTR(31),               /*@ TO BR14 TO RTN TO SYSTEM */
*     2  APCPABSV PTR(31),              /*SAVED PAB@ TO REDISPATCH   */
*     2  APCQWFO PTR(31),               /* Q@ IN PST WORK AREA ON    */
*     2  APCFRRPM PTR(31),              /* WORKAREA@ RTN'D FROM SETFR*/
*     2  APCSAVE CHAR(72),                                         1328
*        3  APCESTAL CHAR(72),          /* ESTAE PARAMETER LIST AREA */
*     2  APCCOMF CHAR(4) BDY(HWORD),    /* FLAGS USED BY ALL PSS RTN */
*        3  APCCOMF1 CHAR(2),                                      1328
*           4  APCSSTSK BIT(1),         /* IRB TYPE WORK             */
*           4  APCUETSK BIT(1),         /* USER EXIT RUNNING UNDER IRB*
*           4  APCSMCR BIT(1),          /* SMA CRA BEING USED        */
*           4  APCIRB1 BIT(1),          /* IRB1 BEING USED           */
*           4  APCIRB2 BIT(1),          /* IRB2 BEING USED           */
*           4  APCRELR BIT(1),          /*CALL ISTAPC58 TO RLEASE CRA*/
*           4  APCEXIT BIT(1),          /* TELLS ISTAPC58 TO EXIT SYS*/
*           4  APCZLBER BIT(1),         /* ERR WHILE RUNNING ZLFAB PAB*
*           4  * BIT(8),                /* RESERVED                  */
*        3  APCRETCD FIXED(15),         /* RTN CODE FOR R15 FOR SYS  */
*     2  APCSAV1 PTR(31),               /* 1ST SAVE WORD             */
*     2  APCSAV2 PTR(31),               /* 2ND SAVE WORD             */
*     2  APCSWTWD CHAR(4),              /* SWITCH AREA FOR PSS RTN   */
*     2  APC31FLG CHAR(1),              /* ISTAPC31 FLAGS            */
*        3  APCTPXIT BIT(1),            /* TPEXIT IN PROGRESS        */
*        3  APCRESCH BIT(1),            /*PAB TPEXIT OCCURED  RESCHED*/
*        3  APCSORT BIT(1),       /* PAB SORTED TO PROPER PST/MPST   */
*        3  *       BIT(5),       /* RESERVED                        */
*     2  APC52FLG CHAR(1),        /* ISTAPC52 FLAGS                  */
*        3  APCCKRQ BIT(1),       /* CHECK RDY Q FOR WORK            */
*        3  APCSMSR BIT(1),       /* RETURNING SMS RPH               */
*        3  APCQENQ BIT(1),       /* ENQUEUEING PAB'S ON PST Q'S     */
*        3  APCRDQ BIT(1),        /* DEQUEING PAB'S FROM PST RDY Q   */
*        3  APCNWF BIT(1),        /* NO WORK FOUND                   */
*        3  APCWKF   BIT(1),      /* WORK FOUND                      */
*        3    *      BIT(2),      /* RESERVED                        */
*     2  APC53FLG CHAR(1),        /* ISTAPC53 FLAGS                  */
*        3  APCPR153 BIT(1),      /* USED PREALLOCATED CRA           */
*     2  APC54FLG CHAR(1),        /* ISTAPC54 FLAGS                  */
*        3  APCRLST BIT(1),       /* SMS BEING CALLED TO RELEASE UECB*/
*        3  * BIT(7),             /* RESERVED                        */
*     2  APC57FLG CHAR(1),        /* ISTAPC57 FLAGS                  */
*        3  APCRECRA BIT(1),      /* RELEASE CRA BEING DONE          */
*        3  APCNREL BIT(1),       /* DID NOT RELEASE CRA             */
*        3  *   BIT(6),           /* RESERVED                        */
*     2  * CHAR(15);              /* RESERVED                        */
*/*               COMPONENT RECOVERY AREA                            */
*/*  REVISIONS                                         005 04/09/75  */
*DCL 1  ISTCRA BASED BDY(DWORD),        /* COMPONENT RECOVERY AREA   */
*     2  CRABASIC BDY(WORD),            /* CRA WITHOUT PROCESS CRR   */
*      3 CRAHDR CHAR(8) BDY(WORD),      /* CRA HEADER                */
*        4  CRACRR PTR(31),             /* PTR TO ACTIVE CRR         */
*        4  CRAFRR PTR(31),             /* PTR TO ACTIVE FRR         */
*      3 CRALKACT BIT(32),              /* LOCK LEVEL AND          1329
*                                          OWNERSHIP FLAGS           */
*        4  CRALEV32 BIT(1),            /* 1 = LEVEL 32 LOCK HELD    */
*        4  CRALEV31 BIT(1),            /* 1 = LEVEL 31 LOCK HELD    */
*        4  CRALEV30 BIT(1),            /* 1 = LEVEL 30 LOCK HELD    */
*        4  CRALEV29 BIT(1),            /* 1 = LEVEL 29 LOCK HELD    */
*        4  CRALEV28 BIT(1),            /* 1 = LEVEL 28 LOCK HELD    */
*        4  CRALEV27 BIT(1),            /* 1 = LEVEL 27 LOCK HELD    */
*        4  CRALEV26 BIT(1),            /* 1 = LEVEL 26 LOCK HELD    */
*        4  CRALEV25 BIT(1),            /* 1 = LEVEL 25 LOCK HELD    */
*        4  CRALEV24 BIT(1),            /* 1 = LEVEL 24 LOCK HELD    */
*        4  CRALEV23 BIT(1),            /* 1 = LEVEL 23 LOCK HELD    */
*        4  CRALEV22 BIT(1),            /* 1 = LEVEL 22 LOCK HELD    */
*        4  CRALEV21 BIT(1),            /* 1 = LEVEL 21 LOCK HELD    */
*        4  CRALEV20 BIT(1),            /* 1 = LEVEL 20 LOCK HELD    */
*        4  CRALEV19 BIT(1),            /* 1 = LEVEL 19 LOCK HELD    */
*        4  CRALEV18 BIT(1),            /* 1 = LEVEL 18 LOCK HELD    */
*        4  CRALEV17 BIT(1),            /* 1 = LEVEL 17 LOCK HELD    */
*        4  CRALEV16 BIT(1),            /* 1 = LEVEL 16 LOCK HELD    */
*        4  CRALEV15 BIT(1),            /* 1 = LEVEL 15 LOCK HELD    */
*        4  CRALEV14 BIT(1),            /* 1 = LEVEL 14 LOCK HELD    */
*        4  CRALEV13 BIT(1),            /* 1 = LEVEL 13 LOCK HELD    */
*        4  CRALEV12 BIT(1),            /* 1 = LEVEL 12 LOCK HELD    */
*        4  CRALEV11 BIT(1),            /* 1 = LEVEL 11 LOCK HELD    */
*        4  CRALEV10 BIT(1),            /* 1 = LEVEL 10 LOCK HELD    */
*        4  CRALEV09 BIT(1),            /* 1 = LEVEL 9 LOCK HELD     */
*        4  CRALEV08 BIT(1),            /* 1 = LEVEL 8 LOCK HELD     */
*        4  CRALEV07 BIT(1),            /* 1 = LEVEL 7 LOCK HELD     */
*        4  CRALEV06 BIT(1),            /* 1 = LEVEL 6 LOCK HELD     */
*        4  CRALEV05 BIT(1),            /* 1 = LEVEL 5 LOCK HELD     */
*        4  CRALEV04 BIT(1),            /* 1 = LEVEL 4 LOCK HELD     */
*        4  CRALEV03 BIT(1),            /* 1 = LEVEL 3 LOCK HELD     */
*        4  CRALEV02 BIT(1),            /* 1 = LEVEL 2 LOCK HELD     */
*        4  CRALEV01 BIT(1),            /* 1 = LEVEL 1 LOCK HELD     */
*      3 CRAL1PTR PTR(31),              /* PTR TO LEVEL 1 LOCK       */
*      3 CRAL2PTR PTR(31),              /* PTR TO LEVEL 2 LOCK       */
*      3 CRAL3PTR PTR(31),              /* PTR TO LEVEL 3 LOCK       */
*      3 CRAL4PTR PTR(31),              /* PTR TO LEVEL 4 LOCK       */
*      3 CRAL5PTR PTR(31),              /* PTR TO LEVEL 5 LOCK       */
*      3 CRAL6PTR PTR(31),              /* PTR TO LEVEL 6 LOCK       */
*      3 CRAL7PTR PTR(31),              /* PTR TO LEVEL 7 LOCK       */
*      3 CRAL8PTR PTR(31),              /* PTR TO LEVEL 8 LOCK       */
*      3 CRAL9PTR PTR(31),              /* PTR TO LEVEL 9 LOCK       */
*      3 CRALAPTR PTR(31),              /* RESERVED                  */
*/*                                                                  */
*/*   VS1/VS2 EXTENSION                                              */
*/*                                                                  */
*     2  CRARPH CHAR(LENGTH(ISTRPH)),   /* RPH ASSOCIATED WITH     1329
*                                          THIS CRH                  */
*     2  CRAPSS CHAR(LENGTH(ISTAPCRR)), /* PSS CRR                   */
*     2  CRAPROCR CHAR(LENGTH(ISTZCRR)) BDY(DWORD), /* PROCESS CRR   */
*     2  CRASVC CHAR(72) BDY(WORD),     /* SERVICE RTN CRA           */
*        3  CRAASCRR CHAR(LENGTH(ISTASCRR)), /* CRR FOR SMS          */
*        3  CRAHSIZ  PTR(31),           /* HEADER SIZE QUED SMS REQ  */
*        3  CRAMASK  PTR(31),           /* PREFIX MASK QUED SMS REQ  */
*        3  CRABUFA  FIXED(31),         /* BUFF QUE FOR FBQ ALLOCATION*
*           4 CRABFTBA BIT(1),          /* NO BUFFERS ALLOCATED YET   *
*     2  CRARSV01 PTR(31),              /* RESERVED                  */
*     2  CRARSV02 PTR(31),              /* RESERVED                  */
*     2  CRACHAIN PTR(31);              /* CHAIN FIELD USED TO QUEUE
*                                          CRA TO PREALLOCATE QUEUE
*                                          WHEN NOT IN USE           */
*DCL CRALMS32 BIT(32) CONSTANT('80000000'X); /* 32ND LEVEL LOCK MASK */
*DCL CRALMS31 BIT(32) CONSTANT('40000000'X); /* 31ST LEVEL LOCK MASK */
*DCL CRALMS30 BIT(32) CONSTANT('20000000'X); /* 30TH LEVEL LOCK MASK */
*DCL CRALMS29 BIT(32) CONSTANT('10000000'X); /* 29TH LEVEL LOCK MASK */
*DCL CRALMS28 BIT(32) CONSTANT('08000000'X); /* 28TH LEVEL LOCK MASK */
*DCL CRALMS27 BIT(32) CONSTANT('04000000'X); /* 27TH LEVEL LOCK MASK */
*DCL CRALMS26 BIT(32) CONSTANT('02000000'X); /* 26TH LEVEL LOCK MASK */
*DCL CRALMS25 BIT(32) CONSTANT('01000000'X); /* 25TH LEVEL LOCK MASK */
*DCL CRALMS24 BIT(32) CONSTANT('00800000'X); /* 24TH LEVEL LOCK MASK */
*DCL CRALMS23 BIT(32) CONSTANT('00400000'X); /* 23RD LEVEL LOCK MASK */
*DCL CRALMS22 BIT(32) CONSTANT('00200000'X); /* 22ND LEVEL LOCK MASK */
*DCL CRALMS21 BIT(32) CONSTANT('00100000'X); /* 21ST LEVEL LOCK MASK */
*DCL CRALMS20 BIT(32) CONSTANT('00080000'X); /* 20TH LEVEL LOCK MASK */
*DCL CRALMS19 BIT(32) CONSTANT('00040000'X); /* 19TH LEVEL LOCK MASK */
*DCL CRALMS18 BIT(32) CONSTANT('00020000'X); /* 18TH LEVEL LOCK MASK */
*DCL CRALMS17 BIT(32) CONSTANT('00010000'X); /* 17TH LEVEL LOCK MASK */
*DCL CRALMS16 BIT(32) CONSTANT('00008000'X); /* 16TH LEVEL LOCK MASK */
*DCL CRALMS15 BIT(32) CONSTANT('00004000'X); /* 15TH LEVEL LOCK MASK */
*DCL CRALMS14 BIT(32) CONSTANT('00002000'X); /* 14TH LEVEL LOCK MASK */
*DCL CRALMS13 BIT(32) CONSTANT('00001000'X); /* 13TH LEVEL LOCK MASK */
*DCL CRALMS12 BIT(32) CONSTANT('00000800'X); /* 12TH LEVEL LOCK MASK */
*DCL CRALMS11 BIT(32) CONSTANT('00000400'X); /* 11TH LEVEL LOCK MASK */
*DCL CRALMS10 BIT(32) CONSTANT('00000200'X); /* 10TH LEVEL LOCK MASK */
*DCL CRALMS09 BIT(32) CONSTANT('00000100'X); /* 9TH LEVEL LOCK MASK  */
*DCL CRALMS08 BIT(32) CONSTANT('00000080'X); /* 8TH LEVEL LOCK MASK  */
*DCL CRALMS07 BIT(32) CONSTANT('00000040'X); /* 7TH LEVEL LOCK MASK  */
*DCL CRALMS06 BIT(32) CONSTANT('00000020'X); /* 6TH LEVEL LOCK MASK  */
*DCL CRALMS05 BIT(32) CONSTANT('00000010'X); /* 5TH LEVEL LOCK MASK  */
*DCL CRALMS04 BIT(32) CONSTANT('00000008'X); /* 4TH LEVEL LOCK MASK  */
*DCL CRALMS03 BIT(32) CONSTANT('00000004'X); /* 3RD LEVEL LOCK MASK  */
*DCL CRALMS02 BIT(32) CONSTANT('00000002'X); /* 2ND LEVEL LOCK MASK  */
*DCL CRALMS01 BIT(32) CONSTANT('00000001'X); /* 1ST LEVEL LOCK MASK  */
*DCL CRACRA   CHAR(4) CONSTANT('CRA ');      /* CHARACTER C.B. ID    */
* /*  CONNECTION SERVICES COMPONENT RECOVERY RECORD                  */
* /* COMPLETED DCR SOLUTIONS                                         */
* /* 1H0540 APRIL 28, 1973 MB                                        */
*/* ZTR4417 JUNE 20, 73 DNM */                                     1363
* DCL 1 ISTCNSTA BDY(WORD) BASED,       /* CONNECTION SERVICES     1363
*                                          COMPONENT RECOVERY RECORD */
*     2  CNSTPFX CHAR(LENGTH(ISTPFCRR)), /* STANDARD PREFIX        1363
*                                          FOR CRR                   */
*     2  CNSTFLDA CHAR(3),              /* TRACE FIELD A - HISTORY   */
*        3  CNSMRINA BIT(1),            /* MASTER ENTERED            */
*        3  CNSAUTHA BIT(1),            /* ABOUT TO CALL AUTHORI-  1363
*                                          SATION EXIT       ZTR4417 */
*        3  CNSAQINA BIT(1),            /* ACQUIRE ENTERED           */
*        3  CNSXREQA BIT(1),            /* ACQUIRE SATISFIED         */
*        3  CNSQREQA BIT(1),            /* ACQUIRE QUEUED            */
*        3  CNSRLINA BIT(1),            /* RELEASE ENTERED           */
*        3  CNSDORLA BIT(1),            /* DOREL REALLOCATION      1363
*                                          ENTERED                   */
*        3  CNSTRRLA BIT(1),            /* RELEASE OF ACTIVE       1363
*                                          CONNECTION                */
*        3  CNSRQRLA BIT(1),            /* RELEASE QUEUED REQUEST    */
*        3  CNSPSINA BIT(1),            /* PASS ENTERED              */
*        3  CNSACINA BIT(1),            /* ACCEPT ENTERED            */
*        3  CNSLGINA BIT(1),            /* LOGON ENTERED             */
*        3  CNSGBINA BIT(1),            /* PREEMPT ENTERED           */
*        3  CNSCLINA BIT(1),            /* CANCEL ENTERED            */
*        3  CNSCLAQA BIT(1),            /* CANCEL ACQUIRES           */
*        3  CNSTCONA BIT(1),            /* TCONNECT                  */
*        3  CNSACONA BIT(1),            /* ACONNECT                  */
*        3  CNSQUEUA BIT(1),            /* QUEUE                     */
*        3  CNSSEARA BIT(1),            /* SEARCH Q                  */
*        3  CNSGETSA BIT(1),            /* CONNECTION SERVICES     1363
*                                          GETSTORE                  */
*        3  CNSFREEA BIT(1),            /* CONNECTION SERVICES     1363
*                                          FREESTORE                 */
*        3  CNSACCTA BIT(1),            /* ABOUT TO CALL           1363
*                                          ACCOUNTING EXIT           */
*        3  CNSLOG0A BIT(1),            /* LOGON 0                   */
*        3  CNSRSV01 BIT(1),            /* RESERVED                  */
*     2  CNSTFLDB CHAR(3),              /* TRACE FIELD B -         1363
*                                          CURRENT ACTIVITY          */
*        3  CNSMRINB BIT(1),                                       1363
*        3  CNSAUTHB BIT(1),                                       1363
*        3  CNSAQINB BIT(1),                                       1363
*        3  CNSXREQB BIT(1),                                       1363
*        3  CNSQREQB BIT(1),                                       1363
*        3  CNSRLINB BIT(1),                                       1363
*        3  CNSDORLB BIT(1),                                       1363
*        3  CNSTRRLB BIT(1),                                       1363
*        3  CNSRQRLB BIT(1),                                       1363
*        3  CNSPSINB BIT(1),                                       1363
*        3  CNSACINB BIT(1),                                       1363
*        3  CNSLGINB BIT(1),                                       1363
*        3  CNSGBINB BIT(1),                                       1363
*        3  CNSCLINB BIT(1),                                       1363
*        3  CNSCLAQB BIT(1),                                       1363
*        3  CNSTCONB BIT(1),                                       1363
*        3  CNSACONB BIT(1),                                       1363
*        3  CNSQUEUB BIT(1),                                       1363
*        3  CNSSEARB BIT(1),                                       1363
*        3  CNSGETSB BIT(1),                                       1363
*        3  CNSFREEB BIT(1),                                       1363
*        3  CNSACCTB BIT(1),                                       1363
*        3  CNSLOG0B BIT(1),                                       1363
*        3  CNSRSV05 BIT(1);                                       1363
* /*     CRR FOR OPEN/CLOSE                                          */
*/*  REVISIONS                                         002 03/27/75  */
* DCL 1 ISTOCCRR BDY(WORD) BASED,       /* CRR FOR OPEN/CLOSE        */
*     2  OCCCNS   CHAR(LENGTH(ISTCNSTA)), /* RESERVE SPACE FOR     1364
*                                          CONN. SVC'S AUDIT         */
*     2  OCCAUDIT,                      /* AUDIT TRAIL FOR OPEN/CLOSE*/
*        3  OCCNTRD CHAR(3),            /* LIST OF MODULES IN OPEN/
*                                          CLOSE ENTERED             */
*           4  NOCCOC BIT(1),           /* INDICATES MODULE ISTOCCOC
*                                          ENTERED                   */
*           4  NOCCCL BIT(1),           /* INDICATES MODULE ISTOCCCL
*                                          ENTERED                   */
*           4  NOCCCH BIT(1),           /* INDICATES MODULE ISTOCCCH
*                                          ENTERED                   */
*           4  NOCCSL BIT(1),           /* INDICATES MODULE ISTOCCSL
*                                          ENTERED                   */
*           4  NOCCFO BIT(1),           /* INDICATES MODULE ISTOCCFO
*                                          ENTERED                   */
*           4  NOCCFR BIT(1),           /* INDICATES MODULE ISTOCCFR
*                                          ENTERED                   */
*           4  NOCCMD BIT(1),           /* INDICATES MODULE ISTOCCMD
*                                          ENTERED                   */
*           4  NOCCFD BIT(1),           /* INDICATES MODULE ISTOCCFD
*                                          ENTERED                   */
*           4  NOCCRD BIT(1),           /* INDICATES MODULE ISTOCCRD
*                                          ENTERED                   */
*           4  NOCCSD BIT(1),           /* INDICATES MODULE ISTOCCSD
*                                          ENTERED                   */
*           4  NOCCOD BIT(1),           /* INDICATES MODULE ISTOCCOD
*                                          ENTERED                   */
*           4  NOCCOE BIT(1),           /* INDICATES MODULE ISTOCCOE
*                                          ENTERED                   */
*           4  NOCCLD BIT(1),           /* INDICATES MODULE ISTOCCLD
*                                          ENTERED                   */
*           4  NOCCOF BIT(1),           /* INDICATES MODULE ISTOCCOF
*                                          ENTERED                   */
*           4  NOCCFB BIT(1),           /* INDICATES MODULE ISTOCCFB
*                                          ENTERED                   */
*           4  NOCCRT BIT(1),           /* INDICATES MODULE ISTOCCRT
*                                          ENTERED                   */
*           4  NOCCQU BIT(1),           /* INDICATES MODULE ISTOCCQU
*                                          ENTERED                   */
*           4  NOCCRL BIT(1),           /* INDICATES MODULE ISTOCCRL
*                                          ENTERED                   */
*           4  NOCCCC   BIT(1),         /* INDICATES MODULE ISTOCCCC
*                                          ENTERED                   */
*           4  NOCCNV BIT(1),           /* INDICATES MODULE ISTOCCNV
*                                          ENTERED                   */
*           4  NOCCCM BIT(1),           /* ISTOCCCM ENTERED          */
*           4  NOCCCN BIT(1),           /* ISTOCCCN ENTERED          */
*           4  NOCACX   BIT(1),                                    1364
*           4  NOCPOI BIT(1),           /* ISTCFCPO ENTERED OR       */
*                                       /* ISTCFCPC ENTERED          */
*        3  OCCCRT CHAR(3),             /* LIST OF OPEN/CLOSE      1364
*                                          MODULES RUNNING           */
*           4  COCCOC BIT(1),           /* INDICATES MODULE ISTOCCOC
*                                          RUNNING                   */
*           4  COCCCL BIT(1),           /* INDICATES MODULE ISTOCCCL
*                                          RUNNING                   */
*           4  COCCCH BIT(1),           /* INDICATES MODULE ISTOCCCH
*                                          RUNNING                   */
*           4  COCCSL BIT(1),           /* INDICATES MODULE ISTOCCSL
*                                          RUNNING                   */
*           4  COCCFO BIT(1),           /* INDICATES MODULE ISTOCCFO
*                                          RUNNING                   */
*           4  COCCFR BIT(1),           /* INDICATES MODULE ISTOCCFR
*                                          RUNNING                   */
*           4  COCCMD BIT(1),           /* INDICATES MODULE ISTOCCMD
*                                          RUNNING                   */
*           4  COCCFD BIT(1),           /* INDICATES  MODULE ISTOCCFD
*                                          RUNNING                   */
*           4  COCCRD BIT(1),           /* INDICATES MODULE ISTOCCRD
*                                          RUNNING                   */
*           4  COCCSD BIT(1),           /* INDICATES MODULE ISTOCCSD
*                                          RUNNING                   */
*           4  COCCOD BIT(1),           /* INDICATES MODULE ISTOCCOD
*                                          RUNNING                   */
*           4  COCCOE BIT(1),           /* INDICATES MODULE ISTOCCOE
*                                          RUNNING                   */
*           4  COCCLD BIT(1),           /* INDICATES MODULE ISTOCCLD
*                                          RUNNING                   */
*           4  COCCOF BIT(1),           /* INDICATES MODULE ISTOCCOF
*                                          RUNNING                   */
*           4  COCCFB BIT(1),           /* INDICATES MODULE ISTOCCFB
*                                          RUNNING                   */
*           4  COCCRT BIT(1),           /* INDICATES MODULE ISTOCCRT
*                                          RUNNING                   */
*           4  COCCQU BIT(1),           /* INDICATES MODULE ISTOCCQU
*                                          RUNNING                   */
*           4  COCCRL BIT(1),           /* INDICATES MODULE ISTOCCRL
*                                          RUNNING                   */
*           4  COCCCC   BIT(1),         /* INDICATES MOD ISTOCCCC  1364
*                                          RUNNING                   */
*           4  COCCNV BIT(1),           /* INDICATES MODULE ISTOCCNV
*                                          RUNNING                   */
*           4  COCCCM BIT(1),           /* ISTOCCCM RUNNING          */
*           4  COCCCN BIT(1),           /* ISTOCCCN RUNNING          */
*           4  COCACX   BIT(1),                                    1364
*           4  COCPOI BIT(1);           /* ISTCFCPO RUNNING OR       */
*                                       /* ISTCFCPC RUNNING          */
*DCL TIDOCCCC BIT(8) CONSTANT('00'X);   /* THREAD ID FOR           1365
*                                          ISTOCCCC                  */
*DCL TIDOCCCH BIT(8) CONSTANT('01'X);   /* THREAD ID FOR           1366
*                                          ISTOCCCH                  */
*DCL TIDOCCOD BIT(8) CONSTANT('02'X);   /* THREAD ID FOR           1367
*                                          ISTOCCOD                  */
*DCL TIDOCCCL BIT(8) CONSTANT('04'X);   /* THREAD ID FOR           1368
*                                          ISTOCCCL                  */
*DCL TIDOCCOC BIT(8) CONSTANT('08'X);   /* THREAD ID FOR           1369
*                                          ISTOCCOC                  */
*DCL TIDOCCRT BIT(8) CONSTANT('10'X);   /* THREAD ID FOR           1370
*                                          ISTOCCRT                  */
*DCL TIDOCCQU BIT(8) CONSTANT('20'X);   /* THREAD ID FOR           1371
*                                          ISTOCCQU                  */
*DCL TIDOCACX BIT(8) CONSTANT('30'X);   /* THREAD ID FOR           1372
*                                          ISTOCACX                  */
*                                                                  1373
* DECLARE                                                          1373
*   EMCR0 PTR REG(0),                                              1373
*   EMCR1 PTR REG(1),                                              1373
*   EMCR2 PTR REG(2),                                              1373
*   EMCR3 PTR REG(3),                                              1373
*   EMCR4 PTR REG(4),                                              1373
*   EMCR5 PTR REG(5),                                              1373
*   EMCR6 PTR REG(6),                                              1373
*   EMCR7 PTR REG(7),                                              1373
*   EMCR8 PTR REG(8),                                              1373
*   EMCR9 PTR REG(9),                                              1373
*   EMCR10 PTR REG(10),                                            1373
*   EMCR11 PTR REG(11),                                            1373
*   EMCR12 PTR REG(12),                                            1373
*   EMCR13 PTR REG(13),                                            1373
*   EMCR14 PTR REG(14),                                            1373
*   EMCR15 PTR REG(15);                                            1373
* GEN (PRINT ON);                                                  1374
         PRINT ON
*/* END OF TPEPILOG */                                             1375
*/* ATDSPLY   INVOKED. */                                          1375
*/********************************************************************/
*/* THE FOLLOWING ATBUILD INCLUSIONS HAVE BEEN MADE IN THIS          */
*/* COMPILATION:                                                     */
*/*             ISTDEVCH                                             */
*/*             ISTPAB                                               */
*/*             ISTDYPAB                                             */
*/*             ISTLOK                                               */
*/*             ISTRPH                                               */
*/*             ISTATCVT                                             */
*/*             ISTPROCD                                             */
*/*             ISTNIB                                               */
*/*             ISTCSP                                               */
*/*             ISTBIND                                              */
*/*             ISTCSL                                               */
*/*             ISTOCW                                               */
*/*             ISTRDT                                               */
*/*             ISTFNDSP                                             */
*/*             ISTBFHDR                                             */
*/*             ISTLGPFX                                             */
*/*             ISTLCCW                                              */
*/*             ISTLCPB                                              */
*/*             ISTZSAVE                                             */
*/*             ISTPFCRR                                             */
*/*             ISTCFCRR                                             */
*/*             ISTZCRR                                              */
*/*             ISTASCRR                                             */
*/*             ISTAPCRR                                             */
*/*             ISTCRA                                               */
*/*             ISTCNSTA                                             */
*/*             ISTOCCRR                                             */
*/********************************************************************/
*/* END OF ATDSPLY. */                                             1375
*END ISTOCCOD                                                      1375
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IHAPSA  )                                        *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IFGRPL  )                                        *
*/*%INCLUDE SYSLIB  (IFGRPLVT)                                        *
*/*%INCLUDE SYSLIB  (ISTRPLFB)                                        *
*/*%INCLUDE SYSUT5  (CKDUPRDT)                                        *
*;                                                                 1375
@EL00001 DS    0H                                                  1375
@EF00001 DS    0H                                                  1375
@ER00001 BR    @14                                                 1375
@DATA    DS    0H
@CH00068 DC    H'1'
@CH00109 DC    H'2'
@CH00073 DC    H'3'
@DATD    DSECT
         DS    0F
ISTOCCOD CSECT
         DS    0F
@CF00045 DC    F'4'
@CF00037 DC    F'8'
@CF00032 DC    F'12'
@CF01888 DC    F'20'
@CF00090 DC    F'24'
@CF02353 DC    F'28'
@CF03263 DC    F'48'
@CF00199 DC    F'56'
@CF00215 DC    F'64'
@CF01504 DC    XL4'80000000'
@DATD    DSECT
         DS    0D
CVTPTR   DS    A
LCPBPTR  DS    A
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISTOCCOD CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV03240 DC    V(ISTOCCOE)
@CV03241 DC    V(ISTOCCOF)
@CV03242 DC    V(ISTOCCLD)
@CV03243 DC    V(ISTOCCNV)
         DS    0D
CHIBIT   DC    XL4'80000000'
CHIBTOFF DC    XL4'7FFFFFFF'
CMZA0022 DS    FL4
         ORG   CMZA0022
@NM00085 DC    AL1(96)
@NM00086 DC    AL1(96)
@NM00087 DC    AL1(241)
@NM00088 DC    XL1'00'
         ORG   CMZA0022+4
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
GPR00F   EQU   @00
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR02F   EQU   @02
GPR02P   EQU   @02
GPR03F   EQU   @03
GPR03P   EQU   @03
GPR04P   EQU   @04
GPR05P   EQU   @05
GPR06P   EQU   @06
GPR07P   EQU   @07
GPR08P   EQU   @08
GPR09P   EQU   @09
GPR10F   EQU   @10
GPR10P   EQU   @10
GPR11F   EQU   @11
GPR11P   EQU   @11
GPR12F   EQU   @12
GPR12P   EQU   @12
GPR13F   EQU   @13
GPR13P   EQU   @13
GPR14F   EQU   @14
GPR14P   EQU   @14
GPR15F   EQU   @15
GPR15P   EQU   @15
RPHPTR   EQU   @01
OCWPTR   EQU   @04
CPARMRG0 EQU   @00
LGDLEN   EQU   @00
BNSVRG3  EQU   @03
CPARMRG2 EQU   @02
LGDPTR   EQU   @02
RLEPTR   EQU   @02
CLSTREG  EQU   @03
CSAVEPTR EQU   @13
CR14PTR  EQU   @14
CRETCODE EQU   @15
C15PTR   EQU   @15
CMZK0008 EQU   @01
CMZK0010 EQU   @01
CMZK0021 EQU   @01
CMZK0040 EQU   @01
CMZK0045 EQU   @01
CMZK0048 EQU   @01
CMZK0054 EQU   @01
CMZK0065 EQU   @01
CMZK0066 EQU   @01
EMCR0    EQU   @00
EMCR1    EQU   @01
EMCR10   EQU   @10
EMCR11   EQU   @11
EMCR12   EQU   @12
EMCR13   EQU   @13
EMCR14   EQU   @14
EMCR15   EQU   @15
EMCR2    EQU   @02
EMCR3    EQU   @03
EMCR4    EQU   @04
EMCR5    EQU   @05
EMCR6    EQU   @06
EMCR7    EQU   @07
EMCR8    EQU   @08
EMCR9    EQU   @09
GPR01F   EQU   @01
GPR04F   EQU   @04
GPR05F   EQU   @05
GPR06F   EQU   @06
GPR07F   EQU   @07
GPR08F   EQU   @08
GPR09F   EQU   @09
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
ATCLCPTR EQU   1032
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTSHS   EQU   CVTXTNT2+40
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLREQ   EQU   RPLIDWD+2
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLCNALL EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLQOPT  EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLODACQ EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLVTEXT EQU   IFGRPL+76
RPLFDBK2 EQU   RPLVTEXT+12
RPLSSNSI EQU   RPLFDBK2
RPLDSB   EQU   RPLSSNSI
RPLDSB1  EQU   RPLDSB
RPLSSEI  EQU   RPLDSB1
RPLDSB2  EQU   RPLDSB+1
RPLUSNSI EQU   RPLFDBK2+2
RPLOPTC3 EQU   RPLVTEXT+20
RPLOPT9  EQU   RPLOPTC3
RPLOPT10 EQU   RPLOPTC3+1
RPLOPT11 EQU   RPLOPTC3+2
RPLOPT12 EQU   RPLOPTC3+3
RPLOSENS EQU   RPLVTEXT+24
RPLSSNSO EQU   RPLOSENS
RPLSSEO  EQU   RPLSSNSO
RPLOF16  EQU   0
RPLRH3   EQU   RPLOF16
RPLSRTYP EQU   RPLOF16+1
RPLSTYPE EQU   RPLSRTYP
RPLRTYPE EQU   RPLSRTYP
RPLCHN   EQU   RPLOF16+2
RPLVTFL1 EQU   RPLOF16+3
RPLVTUSE EQU   RPLVTFL1
RPLVTFL2 EQU   RPLOF16+4
RPLPOSTV EQU   RPLVTFL2
RPLRESP  EQU   RPLVTFL2
RPLCNTRL EQU   RPLOF16+5
RPLCNTDF EQU   RPLCNTRL
RPLCNTDC EQU   RPLCNTRL+1
RPLCNTSC EQU   RPLCNTRL+2
RPLOF60  EQU   0
RPLOBSQ  EQU   RPLOF60+4
RPLIBSQ  EQU   RPLOF60+5
ISTDEVCH EQU   0
DEVSHCH  EQU   ISTDEVCH
DEVCHAR  EQU   DEVSHCH
DEVTCODE EQU   ISTDEVCH+1
DEVFLAGS EQU   ISTDEVCH+3
DEVFCCTL EQU   DEVFLAGS
DEVCHAR3 EQU   DEVFLAGS
ISTPAB   EQU   0
PABWQCHN EQU   ISTPAB
PABWEQA  EQU   PABWQCHN
PABCHAIN EQU   PABWQCHN+4
PABRPHFG EQU   ISTPAB+12
PABFLAGS EQU   PABRPHFG
PABERLCK EQU   PABFLAGS
PABERRLK EQU   PABERLCK
ISTDYPAB EQU   0
ISTLOK   EQU   0
LOKCHN   EQU   ISTLOK+1
LOKCHNG  EQU   LOKCHN
@NM00054 EQU   LOKCHNG+2
ISTRPH   EQU   0
RPHCNTL  EQU   ISTRPH
RPHFLAGS EQU   RPHCNTL+2
RPHAPTYP EQU   RPHFLAGS
RPHFSTLC EQU   RPHFLAGS
RPHFLGB  EQU   RPHCNTL+3
RPHRPHA  EQU   ISTRPH+4
RPHTSKID EQU   ISTRPH+8
RPHRESMA EQU   ISTRPH+16
RPHWPFLG EQU   RPHRESMA
RPHWEA   EQU   ISTRPH+24
RPHCSPA  EQU   RPHWEA
RPHSRPRM EQU   ISTRPH+28
RPHCRR   EQU   ISTRPH+32
RPHPABQA EQU   ISTRPH+36
RPHWORK  EQU   ISTRPH+40
RPHSAVE1 EQU   RPHWORK
RPHSBITS EQU   RPHSAVE1+1
ISTATCVT EQU   0
ATCCOM   EQU   ISTATCVT
ATCSTAT  EQU   ATCCOM
ATCSTAT1 EQU   ATCSTAT
ATCSNHLT EQU   ATCSTAT1
ATCQKHLT EQU   ATCSTAT1
ATCSTFLG EQU   ATCSTAT+1
ATCPOFLG EQU   ATCSTAT+2
ATCSTAT4 EQU   ATCSTAT+3
ATCIOTRC EQU   ATCCOM+140
ATCTHTRC EQU   ATCIOTRC
ATCGTSTR EQU   ATCCOM+164
ATCSRTDF EQU   ATCCOM+208
ATCCSMR  EQU   ISTATCVT+296
ATCSHRFG EQU   ISTATCVT+316
ATCHPGM  EQU   ISTATCVT+384
ATCAP35  EQU   ISTATCVT+448
ATCAP36  EQU   ISTATCVT+452
ATCVOCLK EQU   ISTATCVT+468
ATCRDTLK EQU   ISTATCVT+472
ATCVLCNT EQU   ISTATCVT+772
ATCRNO   EQU   ISTATCVT+788
ATCSOPD  EQU   ISTATCVT+792
ATCSIPD  EQU   ISTATCVT+800
ATCSECST EQU   ISTATCVT+812
ATCSTAT2 EQU   ISTATCVT+818
ATCSRTAB EQU   ISTATCVT+820
ATCVTBAM EQU   ISTATCVT+908
@NM00065 EQU   ATCVTBAM+3
ATCAOSM  EQU   ISTATCVT+912
ATCGSRBQ EQU   ATCAOSM+4
ATCGSRBG EQU   ATCGSRBQ
ATCICAPP EQU   ATCAOSM+100
ATCLDAPP EQU   ATCAOSM+120
ATCDAPVT EQU   ATCAOSM+140
ATCCRA   EQU   ATCAOSM+280
ATCCRACN EQU   ATCCRA+4
ATCSRB   EQU   ATCAOSM+288
ATCSRBCN EQU   ATCSRB+4
ATCCRPL  EQU   ATCAOSM+296
ATCRPLCN EQU   ATCCRPL+4
ATCSQAFR EQU   ATCAOSM+304
ATCORTBC EQU   ATCSQAFR+4
ATCORSRB EQU   ATCORTBC
@NM00067 EQU   ATCAOSM+332
ATCVTFLG EQU   ATCAOSM+392
ATCZFLAG EQU   ATCAOSM+588
ISTPROCD EQU   0
PROPROC  EQU   ISTPROCD
PROPROC1 EQU   PROPROC
PROPROC2 EQU   PROPROC+1
PROPROC3 EQU   PROPROC+2
PROPROC4 EQU   PROPROC+3
PROPROCS EQU   0
PROSETMS EQU   PROPROCS+1
PROSETM2 EQU   PROSETMS
PROSETM3 EQU   PROSETMS+1
PROSETM4 EQU   PROSETMS+2
ISTNIB   EQU   0
NIBSYM   EQU   ISTNIB+12
NIBFLGS  EQU   ISTNIB+40
NIBFLG1  EQU   NIBFLGS
NIBLAST  EQU   NIBFLG1
NIBLMODE EQU   ISTNIB+48
ISTCSP   EQU   0
CSPIDX   EQU   ISTCSP
CSPOPT   EQU   ISTCSP+2
CSPOPT1  EQU   CSPOPT
CSPRSC   EQU   CSPOPT1
CSPQ     EQU   CSPOPT1
CSPLOGI  EQU   CSPOPT1
CSPOPT2  EQU   CSPOPT+1
CSPSTAP  EQU   CSPOPT2
CSPCOREQ EQU   CSPOPT2
CSPWASQD EQU   CSPOPT2
CSPSRC   EQU   ISTCSP+4
CSPDEST  EQU   ISTCSP+8
CSPRSCE  EQU   ISTCSP+12
CSPCC    EQU   ISTCSP+20
CSPNO    EQU   ISTCSP+22
CSPTRDTE EQU   ISTCSP+28
CSPRSC2B EQU   ISTCSP+32
ISTBIND  EQU   0
BINFMTY  EQU   ISTBIND
BINPRIP  EQU   ISTBIND+3
BINSECP  EQU   ISTBIND+4
BINCMNP  EQU   ISTBIND+5
BINCMNP2 EQU   ISTBIND+6
BINTSU   EQU   ISTBIND+7
BINRPACE EQU   BINTSU+1
BINRUSZ  EQU   BINTSU+2
BINSRUSZ EQU   BINRUSZ
BINPRUSZ EQU   BINRUSZ+1
BINPRSVC EQU   ISTBIND+13
BINLUP   EQU   BINPRSVC
BINPSCHR EQU   BINPRSVC+1
BINUSEL  EQU   ISTBIND+35
ISTCSL   EQU   0
CSLRDEF  EQU   ISTCSL
CSLRDTE  EQU   CSLRDEF
CSLRDTEF EQU   CSLRDTE
CSLNDEF  EQU   ISTCSL+4
CSLNIB   EQU   CSLNDEF
CSLDDEF  EQU   ISTCSL+8
CSLDATA  EQU   CSLDDEF
ISTOCW   EQU   0
OCWRPL   EQU   ISTOCW+12
OCWRPH   EQU   ISTOCW+16
OCWACVT  EQU   ISTOCW+24
OCWCSL   EQU   ISTOCW+28
OCWLRDTE EQU   ISTOCW+40
OCWDRDTE EQU   OCWLRDTE
OCWNIB   EQU   ISTOCW+44
OCWARDTE EQU   ISTOCW+48
OCWODLST EQU   ISTOCW+80
OCWODNAS EQU   ISTOCW+84
OCWODRC  EQU   ISTOCW+92
OCWRC    EQU   OCWODRC
OCWEC    EQU   OCWODRC+1
OCWSVCOD EQU   ISTOCW+94
OCWODCT1 EQU   ISTOCW+104
OCWDSTNO EQU   ISTOCW+108
OCWBADNO EQU   ISTOCW+110
OCWDNIB  EQU   ISTOCW+112
OCWSWTA  EQU   ISTOCW+204
OCWGTLST EQU   OCWSWTA
OCWSRT   EQU   OCWSWTA
OCWNOCON EQU   OCWSWTA
OCWGOCNT EQU   OCWSWTA
OCWSWTB  EQU   ISTOCW+205
OCWCOREQ EQU   OCWSWTB
OCWSWTC  EQU   ISTOCW+206
OCWODCLS EQU   OCWSWTC
OCWSWTD  EQU   ISTOCW+207
OCWCSPL  EQU   ISTOCW+224
OCWSAVE1 EQU   ISTOCW+264
OCWR14SV EQU   ISTOCW+624
OCWOENIB EQU   ISTOCW+716
OCWLALEN EQU   ISTOCW+724
OCWSWTRD EQU   ISTOCW+730
OCWSWTE  EQU   ISTOCW+731
OCWLOCKS EQU   ISTOCW+740
OCWVLOCK EQU   OCWLOCKS
OCWRLOCK EQU   OCWLOCKS
OCWMLOCK EQU   OCWLOCKS
OCWCID   EQU   ISTOCW+744
OCWIOCNT EQU   ISTOCW+760
OCWSHPL  EQU   ISTOCW+784
OCWBIND  EQU   ISTOCW+796
OCWFLG1  EQU   ISTOCW+847
ISTRPRE  EQU   0
RPRNAME  EQU   ISTRPRE
RPRCOMID EQU   ISTRPRE+8
RPRENTRY EQU   ISTRPRE+20
RPRFLAGA EQU   ISTRPRE+21
RPRVRYPD EQU   RPRFLAGA
RPRFLAGB EQU   ISTRPRE+22
RPRAOPN  EQU   RPRFLAGB
RPRONLIN EQU   RPRFLAGB
RPRCAUSE EQU   ISTRPRE+23
RPRNSNEA EQU   ISTRPRE+36
RPRPTHCT EQU   ISTRPRE+60
RPRFLAGD EQU   ISTRPRE+61
RPRFLAGC EQU   ISTRPRE+62
ISTRCPRE EQU   0
RCPPMODE EQU   ISTRCPRE+91
RCPRBASC EQU   RCPPMODE
RCPRRECD EQU   RCPPMODE
RCPLGNIN EQU   ISTRCPRE+92
ISTRDT   EQU   0
RDTPLEN  EQU   ISTRDT+72
RDTPRIOR EQU   RDTPLEN
RDTFLAGB EQU   ISTRDT+91
RDTVYRPH EQU   ISTRDT+108
RDTSTCNT EQU   ISTRDT+112
ISTRAP   EQU   0
RAPFLG   EQU   ISTRAP+108
RAPFLGB  EQU   ISTRAP+109
RAPALLF  EQU   RAPFLGB
RAPAACQ  EQU   RAPFLGB
RAPFLGC  EQU   ISTRAP+110
ISTRLC   EQU   0
RLCADR   EQU   ISTRLC+72
RLCFLAG  EQU   RLCADR
ISTRRN   EQU   0
RRNADR   EQU   ISTRRN+136
RRNFLAG  EQU   RRNADR
RRNUCBAD EQU   RRNADR+1
RRNRDF   EQU   ISTRRN+172
RRNRDFA  EQU   RRNRDF
RRNRDFB  EQU   RRNRDF+1
RRNCMF   EQU   ISTRRN+176
RRNCMFA  EQU   RRNCMF
RRNCMFB  EQU   RRNCMF+1
RRNCMFC  EQU   RRNCMF+2
RRNCMFD  EQU   RRNCMF+3
RRNNMDPD EQU   ISTRRN+192
RRNHPRE  EQU   ISTRRN+216
ISTRGP   EQU   0
RGPFLG   EQU   ISTRGP+72
ISTRLN   EQU   0
RLNADR   EQU   ISTRLN+72
RLNFLAG  EQU   RLNADR
RLNUCBAD EQU   RLNADR+1
RLNSTAT1 EQU   ISTRLN+86
RLNSTAT2 EQU   ISTRLN+87
RLNRDF   EQU   ISTRLN+88
RLNRDFA  EQU   RLNRDF
RLNRACNT EQU   RLNRDFA
RLNPORT  EQU   RLNRDFA
RLNRDFB  EQU   RLNRDF+1
RLNCRFLG EQU   ISTRLN+102
RLNLSCMD EQU   RLNCRFLG
ISTRPT   EQU   0
RPTLNCID EQU   ISTRPT+116
RPTDITT  EQU   ISTRPT+128
RPTFLAG1 EQU   ISTRPT+140
RPTVRYPD EQU   RPTFLAG1
RPTHLVPD EQU   RPTFLAG1
RPTPTHCT EQU   ISTRPT+146
ISTRCL   EQU   0
RCLADR   EQU   ISTRCL+72
RCLFLAG  EQU   RCLADR
ISTRTR   EQU   0
RTRADR   EQU   ISTRTR+124
RTRFLAG  EQU   RTRADR
RTRRDFA  EQU   ISTRTR+136
RTRRAALL EQU   RTRRDFA
RTRRDFB  EQU   ISTRTR+137
RTRRDFC  EQU   ISTRTR+138
RTRRDFD  EQU   ISTRTR+139
RTRRDFE  EQU   ISTRTR+140
RTRRDFF  EQU   ISTRTR+141
RTRCRFLG EQU   ISTRTR+143
RTRLSCMD EQU   RTRCRFLG
RTRBSCID EQU   ISTRTR+188
ISTRIN   EQU   0
RINDFD   EQU   ISTRIN+124
RINREMPO EQU   RINDFD
RINNODEF EQU   RINDFD
RINLDISC EQU   RINDFD
RINNODID EQU   ISTRIN+125
RINRLDAF EQU   ISTRIN+126
RINREMOT EQU   ISTRIN+128
RINVPAB  EQU   ISTRIN+132
RINRPHCN EQU   ISTRIN+136
RINNCSPL EQU   ISTRIN+140
RINCNCNT EQU   ISTRIN+144
ISTRDS   EQU   0
ISTDOT   EQU   0
ISTRCC   EQU   0
RCCFLAG  EQU   ISTRCC+73
RCCERPIP EQU   RCCFLAG
RCCFLAGB EQU   ISTRCC+74
RCCRESET EQU   RCCFLAGB
RCCSTAID EQU   ISTRCC+78
RCCID48  EQU   RCCSTAID+2
RCCCRFLG EQU   ISTRCC+108
ISTRLU   EQU   0
RLUFLAG  EQU   ISTRLU+125
RLUCRFLG EQU   ISTRLU+126
RLUPACE  EQU   ISTRLU+132
RLUNCPPC EQU   ISTRLU+134
RLUUSSTB EQU   ISTRLU+140
RLUMODET EQU   ISTRLU+152
ISTRPX   EQU   0
ISTRLX   EQU   0
RLXFLAGA EQU   ISTRLX+76
ISTRSW   EQU   0
ISTRDA   EQU   0
RDAADR   EQU   ISTRDA+72
RDAFLAG  EQU   RDAADR
RDAUCBAD EQU   RDAADR+1
ISTRLS   EQU   0
ISTDNT   EQU   0
ISTGNT   EQU   0
ISTPAT   EQU   0
PATFLAGA EQU   ISTPAT+7
ISTFNDSP EQU   0
FNDLU    EQU   ISTFNDSP
FNDAREA  EQU   ISTFNDSP+4
FNDMODE  EQU   ISTFNDSP+8
ISTBFHDR EQU   0
ISTLGPFX EQU   0
LGPSESSP EQU   ISTLGPFX+12
C14SVPTR EQU   0
C14SAVE  EQU   0
CRPHSV   EQU   0
ISTINCSH EQU   0
ISTOCCDF EQU   0
ISTCSCMR EQU   0
ISTLCCW  EQU   0
LCCWOP   EQU   ISTLCCW
LCCWRWOP EQU   LCCWOP
LCCWCTL  EQU   LCCWRWOP
LCCWFLAG EQU   ISTLCCW+1
LCCWLSI  EQU   LCCWFLAG
ISTLCPB  EQU   0
LCPREQTG EQU   ISTLCPB+2
LCPFLAGS EQU   LCPREQTG
LCPZF001 EQU   LCPFLAGS
LCPZRT02 EQU   LCPZF001
LCPZF002 EQU   LCPFLAGS
LCPZRT03 EQU   LCPZF002
LCPZF003 EQU   LCPFLAGS
LCPZRT04 EQU   LCPZF003
LCPZF004 EQU   LCPFLAGS
LCPZRT05 EQU   LCPZF004
LCPZRT06 EQU   LCPFLAGS
LCPZRT07 EQU   LCPFLAGS
LCPMNRCD EQU   LCPREQTG+1
LCPZRT08 EQU   LCPMNRCD
LCPZRT09 EQU   LCPMNRCD
LCPCHAIN EQU   ISTLCPB+4
LCPCHAI1 EQU   LCPCHAIN
LCPRUCNT EQU   ISTLCPB+8
LCPFLAG2 EQU   ISTLCPB+9
LCPTLBPI EQU   LCPFLAG2
LCPFID0  EQU   LCPFLAG2
LCPSEQ   EQU   ISTLCPB+10
LCPCID   EQU   ISTLCPB+16
LCPFDBA  EQU   ISTLCPB+24
LCPFLG1  EQU   ISTLCPB+37
LCPFLCCW EQU   ISTLCPB+40
LCPLCCW  EQU   ISTLCPB+48
LCPPABA  EQU   LCPLCCW+4
LCPRPHA  EQU   LCPPABA
ISTZSAVE EQU   0
ZSAZSVBC EQU   ISTZSAVE
ZSAZSVMS EQU   ZSAZSVBC
ISTPFCRR EQU   0
PFCCRR   EQU   ISTPFCRR
PFCCRRID EQU   PFCCRR
PFCCRRLN EQU   PFCCRR+2
PFCHDR   EQU   ISTPFCRR+4
PFCCRRO  EQU   PFCHDR
PFCFRRO  EQU   PFCHDR+4
PFCFTA   EQU   ISTPFCRR+12
ISTCFCRR EQU   0
CFCAUDIT EQU   ISTCFCRR
CFCNTRD  EQU   CFCAUDIT
CFCCRT   EQU   CFCAUDIT+1
ISTZCRR  EQU   0
ZCRCRR   EQU   ISTZCRR
ZCRFLGS1 EQU   ISTZCRR+12
ZCRFLGS2 EQU   ISTZCRR+13
ZCRSWFLD EQU   ISTZCRR+14
ZCRENDSH EQU   ZCRSWFLD
ZCRNDLCP EQU   ZCRSWFLD
ZCRRESET EQU   ZCRSWFLD
ZCRFLGS3 EQU   ISTZCRR+15
ZCRGENSW EQU   ISTZCRR+16
ZCRPFLGS EQU   ISTZCRR+17
ZCRIBPR  EQU   ISTZCRR+18
ZCRSCPSW EQU   ISTZCRR+19
ZCRPARMS EQU   ISTZCRR+24
ZCRFBPTR EQU   ZCRPARMS
ZCRDFRDA EQU   ZCRPARMS+10
ZCRPCOD1 EQU   ZCRPARMS+12
ZCRPLSBF EQU   ZCRPCOD1
ZCRPCOD2 EQU   ZCRPARMS+13
ZCRSVRTN EQU   ISTZCRR+56
ZCRWKARA EQU   ISTZCRR+156
ZCRCIDSV EQU   ISTZCRR+192
ZCRAUDIT EQU   ISTZCRR+440
ZCRENTER EQU   ZCRAUDIT+5
ZCRLCPB  EQU   ISTZCRR+480
ZCRRHRU  EQU   ZCRLCPB
ISTASCRR EQU   0
ASCFLAGS EQU   ISTASCRR+16
ASCFLG1  EQU   ASCFLAGS
ASCFLG2  EQU   ASCFLAGS+2
ASCFLG3  EQU   ASCFLAGS+4
ASCUSRGS EQU   ISTASCRR+28
ISTAPCRR EQU   0
APCATFLG EQU   ISTAPCRR+16
APCRFLG  EQU   ISTAPCRR+18
APCSAVE  EQU   ISTAPCRR+44
APCCOMF  EQU   ISTAPCRR+116
APCCOMF1 EQU   APCCOMF
APC31FLG EQU   ISTAPCRR+132
APC52FLG EQU   ISTAPCRR+133
APC53FLG EQU   ISTAPCRR+134
APC54FLG EQU   ISTAPCRR+135
APC57FLG EQU   ISTAPCRR+136
ISTCRA   EQU   0
CRABASIC EQU   ISTCRA
CRAHDR   EQU   CRABASIC
CRACRR   EQU   CRAHDR
CRAFRR   EQU   CRAHDR+4
CRALKACT EQU   CRABASIC+8
CRAL2PTR EQU   CRABASIC+16
CRAL3PTR EQU   CRABASIC+20
CRAPROCR EQU   ISTCRA+312
CRASVC   EQU   ISTCRA+848
CRABUFA  EQU   CRASVC+68
ISTCNSTA EQU   0
CNSTFLDA EQU   ISTCNSTA+16
CNSTFLDB EQU   ISTCNSTA+19
ISTOCCRR EQU   0
OCCAUDIT EQU   ISTOCCRR+22
OCCNTRD  EQU   OCCAUDIT
NOCCOD   EQU   OCCNTRD+1
OCCCRT   EQU   OCCAUDIT+3
COCCOD   EQU   OCCCRT+1
FMZL0011 EQU   0
FMZL0016 EQU   0
FMZL0049 EQU   0
FNDLOGMD EQU   0
ISTRPL   EQU   0
FLC      EQU   PSA
PSARSVTE EQU   PSARSVT
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
BINLUP1  EQU   BINPSCHR
BINLUS   EQU   BINPSCHR
BINFMF1  EQU   BINLUS
BINRSV09 EQU   BINFMF1
BINDSPF1 EQU   BINLUS+2
BINMEDIA EQU   BINLUS+4
BINLUP2  EQU   BINPSCHR
BINLUP3  EQU   BINPSCHR
LCPZTIE  EQU   LCPCID
LCPZSNAM EQU   LCPZTIE+8
RTRDNCBA EQU   ISTRTR+40
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
LCPZTRV4 EQU   LCPZSNAM+4
LCPZTRV1 EQU   LCPZSNAM
LCPZSNA  EQU   LCPZTIE+4
LCPZFMCA EQU   LCPZTIE
BINRSV26 EQU   BINLUP3
BINRSV15 EQU   BINLUP2+10
BINPRESZ EQU   BINLUP2+9
BINRSV14 EQU   BINLUP2
BINRSV13 EQU   BINMEDIA
BINDISK  EQU   BINMEDIA
BINXCHNG EQU   BINMEDIA
BINCARD  EQU   BINMEDIA
BINDOCMT EQU   BINMEDIA
BINRSV17 EQU   BINDSPF1+1
BINTRNDS EQU   BINDSPF1
BINRSV12 EQU   BINDSPF1
BINVSDS  EQU   BINDSPF1
BINVTDS  EQU   BINDSPF1
BINHFDS  EQU   BINDSPF1
BININTR  EQU   BINDSPF1
BINRSV11 EQU   BINRSV09+1
BINXFPD  EQU   BINRSV09+1
BINCSDS  EQU   BINRSV09+1
BINQDSI  EQU   BINRSV09+1
BINRSV16 EQU   BINRSV09+1
BINARRR  EQU   BINRSV09
BINSIDS  EQU   BINRSV09
BINSAI   EQU   BINRSV09
BINSDSI  EQU   BINRSV09
BINKDDSI EQU   BINRSV09
BINPDIR  EQU   BINFMF1
BINCMPCT EQU   BINFMF1
BINDESTS EQU   BINFMF1
BINSLUS1 EQU   BINLUP1+6
BINPLUS1 EQU   BINLUP1+1
BINDSP1  EQU   BINLUP1
BINFMHS1 EQU   BINLUP1
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTIRM   EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
COCPOI   EQU   OCCCRT+2
COCACX   EQU   OCCCRT+2
COCCCN   EQU   OCCCRT+2
COCCCM   EQU   OCCCRT+2
COCCNV   EQU   OCCCRT+2
COCCCC   EQU   OCCCRT+2
COCCRL   EQU   OCCCRT+2
COCCQU   EQU   OCCCRT+2
COCCRT   EQU   OCCCRT+1
COCCFB   EQU   OCCCRT+1
COCCOF   EQU   OCCCRT+1
COCCLD   EQU   OCCCRT+1
COCCOE   EQU   OCCCRT+1
COCCSD   EQU   OCCCRT+1
COCCRD   EQU   OCCCRT+1
COCCFD   EQU   OCCCRT
COCCMD   EQU   OCCCRT
COCCFR   EQU   OCCCRT
COCCFO   EQU   OCCCRT
COCCSL   EQU   OCCCRT
COCCCH   EQU   OCCCRT
COCCCL   EQU   OCCCRT
COCCOC   EQU   OCCCRT
NOCPOI   EQU   OCCNTRD+2
NOCACX   EQU   OCCNTRD+2
NOCCCN   EQU   OCCNTRD+2
NOCCCM   EQU   OCCNTRD+2
NOCCNV   EQU   OCCNTRD+2
NOCCCC   EQU   OCCNTRD+2
NOCCRL   EQU   OCCNTRD+2
NOCCQU   EQU   OCCNTRD+2
NOCCRT   EQU   OCCNTRD+1
NOCCFB   EQU   OCCNTRD+1
NOCCOF   EQU   OCCNTRD+1
NOCCLD   EQU   OCCNTRD+1
NOCCOE   EQU   OCCNTRD+1
NOCCSD   EQU   OCCNTRD+1
NOCCRD   EQU   OCCNTRD+1
NOCCFD   EQU   OCCNTRD
NOCCMD   EQU   OCCNTRD
NOCCFR   EQU   OCCNTRD
NOCCFO   EQU   OCCNTRD
NOCCSL   EQU   OCCNTRD
NOCCCH   EQU   OCCNTRD
NOCCCL   EQU   OCCNTRD
NOCCOC   EQU   OCCNTRD
OCCCNS   EQU   ISTOCCRR
CNSRSV05 EQU   CNSTFLDB+2
CNSLOG0B EQU   CNSTFLDB+2
CNSACCTB EQU   CNSTFLDB+2
CNSFREEB EQU   CNSTFLDB+2
CNSGETSB EQU   CNSTFLDB+2
CNSSEARB EQU   CNSTFLDB+2
CNSQUEUB EQU   CNSTFLDB+2
CNSACONB EQU   CNSTFLDB+2
CNSTCONB EQU   CNSTFLDB+1
CNSCLAQB EQU   CNSTFLDB+1
CNSCLINB EQU   CNSTFLDB+1
CNSGBINB EQU   CNSTFLDB+1
CNSLGINB EQU   CNSTFLDB+1
CNSACINB EQU   CNSTFLDB+1
CNSPSINB EQU   CNSTFLDB+1
CNSRQRLB EQU   CNSTFLDB+1
CNSTRRLB EQU   CNSTFLDB
CNSDORLB EQU   CNSTFLDB
CNSRLINB EQU   CNSTFLDB
CNSQREQB EQU   CNSTFLDB
CNSXREQB EQU   CNSTFLDB
CNSAQINB EQU   CNSTFLDB
CNSAUTHB EQU   CNSTFLDB
CNSMRINB EQU   CNSTFLDB
CNSRSV01 EQU   CNSTFLDA+2
CNSLOG0A EQU   CNSTFLDA+2
CNSACCTA EQU   CNSTFLDA+2
CNSFREEA EQU   CNSTFLDA+2
CNSGETSA EQU   CNSTFLDA+2
CNSSEARA EQU   CNSTFLDA+2
CNSQUEUA EQU   CNSTFLDA+2
CNSACONA EQU   CNSTFLDA+2
CNSTCONA EQU   CNSTFLDA+1
CNSCLAQA EQU   CNSTFLDA+1
CNSCLINA EQU   CNSTFLDA+1
CNSGBINA EQU   CNSTFLDA+1
CNSLGINA EQU   CNSTFLDA+1
CNSACINA EQU   CNSTFLDA+1
CNSPSINA EQU   CNSTFLDA+1
CNSRQRLA EQU   CNSTFLDA+1
CNSTRRLA EQU   CNSTFLDA
CNSDORLA EQU   CNSTFLDA
CNSRLINA EQU   CNSTFLDA
CNSQREQA EQU   CNSTFLDA
CNSXREQA EQU   CNSTFLDA
CNSAQINA EQU   CNSTFLDA
CNSAUTHA EQU   CNSTFLDA
CNSMRINA EQU   CNSTFLDA
CNSTPFX  EQU   ISTCNSTA
CRACHAIN EQU   ISTCRA+928
CRARSV02 EQU   ISTCRA+924
CRARSV01 EQU   ISTCRA+920
CRABFTBA EQU   CRABUFA
CRAMASK  EQU   CRASVC+64
CRAHSIZ  EQU   CRASVC+60
CRAASCRR EQU   CRASVC
CRAPSS   EQU   ISTCRA+160
CRARPH   EQU   ISTCRA+52
CRALAPTR EQU   CRABASIC+48
CRAL9PTR EQU   CRABASIC+44
CRAL8PTR EQU   CRABASIC+40
CRAL7PTR EQU   CRABASIC+36
CRAL6PTR EQU   CRABASIC+32
CRAL5PTR EQU   CRABASIC+28
CRAL4PTR EQU   CRABASIC+24
CRAL1PTR EQU   CRABASIC+12
CRALEV01 EQU   CRALKACT+3
CRALEV02 EQU   CRALKACT+3
CRALEV03 EQU   CRALKACT+3
CRALEV04 EQU   CRALKACT+3
CRALEV05 EQU   CRALKACT+3
CRALEV06 EQU   CRALKACT+3
CRALEV07 EQU   CRALKACT+3
CRALEV08 EQU   CRALKACT+3
CRALEV09 EQU   CRALKACT+2
CRALEV10 EQU   CRALKACT+2
CRALEV11 EQU   CRALKACT+2
CRALEV12 EQU   CRALKACT+2
CRALEV13 EQU   CRALKACT+2
CRALEV14 EQU   CRALKACT+2
CRALEV15 EQU   CRALKACT+2
CRALEV16 EQU   CRALKACT+2
CRALEV17 EQU   CRALKACT+1
CRALEV18 EQU   CRALKACT+1
CRALEV19 EQU   CRALKACT+1
CRALEV20 EQU   CRALKACT+1
CRALEV21 EQU   CRALKACT+1
CRALEV22 EQU   CRALKACT+1
CRALEV23 EQU   CRALKACT+1
CRALEV24 EQU   CRALKACT+1
CRALEV25 EQU   CRALKACT
CRALEV26 EQU   CRALKACT
CRALEV27 EQU   CRALKACT
CRALEV28 EQU   CRALKACT
CRALEV29 EQU   CRALKACT
CRALEV30 EQU   CRALKACT
CRALEV31 EQU   CRALKACT
CRALEV32 EQU   CRALKACT
@NM00101 EQU   ISTAPCRR+137
@NM00100 EQU   APC57FLG
APCNREL  EQU   APC57FLG
APCRECRA EQU   APC57FLG
@NM00099 EQU   APC54FLG
APCRLST  EQU   APC54FLG
APCPR153 EQU   APC53FLG
@NM00098 EQU   APC52FLG
APCWKF   EQU   APC52FLG
APCNWF   EQU   APC52FLG
APCRDQ   EQU   APC52FLG
APCQENQ  EQU   APC52FLG
APCSMSR  EQU   APC52FLG
APCCKRQ  EQU   APC52FLG
@NM00097 EQU   APC31FLG
APCSORT  EQU   APC31FLG
APCRESCH EQU   APC31FLG
APCTPXIT EQU   APC31FLG
APCSWTWD EQU   ISTAPCRR+128
APCSAV2  EQU   ISTAPCRR+124
APCSAV1  EQU   ISTAPCRR+120
APCRETCD EQU   APCCOMF+2
@NM00096 EQU   APCCOMF1+1
APCZLBER EQU   APCCOMF1
APCEXIT  EQU   APCCOMF1
APCRELR  EQU   APCCOMF1
APCIRB2  EQU   APCCOMF1
APCIRB1  EQU   APCCOMF1
APCSMCR  EQU   APCCOMF1
APCUETSK EQU   APCCOMF1
APCSSTSK EQU   APCCOMF1
APCESTAL EQU   APCSAVE
APCFRRPM EQU   ISTAPCRR+40
APCQWFO  EQU   ISTAPCRR+36
APCPABSV EQU   ISTAPCRR+32
APCRTRN  EQU   ISTAPCRR+28
APCTCBA  EQU   ISTAPCRR+24
APCPSTA  EQU   ISTAPCRR+20
@NM00095 EQU   APCRFLG+1
APC31R   EQU   APCRFLG
APC58R   EQU   APCRFLG
APC57R   EQU   APCRFLG
APC56R   EQU   APCRFLG
APC54R   EQU   APCRFLG
APC53R   EQU   APCRFLG
APC52R   EQU   APCRFLG
APC51R   EQU   APCRFLG
@NM00094 EQU   APCATFLG+1
APC31E   EQU   APCATFLG
APC58E   EQU   APCATFLG
APC57E   EQU   APCATFLG
APC56E   EQU   APCATFLG
APC54E   EQU   APCATFLG
APC53E   EQU   APCATFLG
APC52E   EQU   APCATFLG
APC51E   EQU   APCATFLG
APCHDRSV EQU   ISTAPCRR
ASCPSREG EQU   ISTASCRR+44
ASCUSR01 EQU   ASCUSRGS+12
ASCUSR00 EQU   ASCUSRGS+8
ASCUSR15 EQU   ASCUSRGS+4
ASCUSR14 EQU   ASCUSRGS
ASCETRYA EQU   ISTASCRR+24
ASCKEY   EQU   ISTASCRR+23
ASCAUDIT EQU   ASCFLG3
ASCFBDUD EQU   ASCFLG3
ASCLLKF  EQU   ASCFLG3
ASCKEYF  EQU   ASCFLG3
ASCFBDAL EQU   ASCFLG3
ASCFSRGT EQU   ASCFLG3
ASCICR   EQU   ASCFLG2
ASCFSRIC EQU   ASCFLG2
ASCFBDIC EQU   ASCFLG2
ASCFBAIC EQU   ASCFLG2
ASCPASTR EQU   ASCFLG1
ASCFSR   EQU   ASCFLG1
ASCFBD   EQU   ASCFLG1
ASCFBA   EQU   ASCFLG1
ASCPFCRR EQU   ISTASCRR
ZCRRU    EQU   ZCRRHRU+3
ZCRRH    EQU   ZCRRHRU
ZCRWORDA EQU   ISTZCRR+477
ZCRCMNRC EQU   ISTZCRR+476
ZCRRSV97 EQU   ZCRENTER+18
ZCREIC2B EQU   ZCRENTER+18
ZCREAC2B EQU   ZCRENTER+18
ZCRELCAB EQU   ZCRENTER+18
ZCREDCMF EQU   ZCRENTER+18
ZCREBCIF EQU   ZCRENTER+18
ZCREICSG EQU   ZCRENTER+18
ZCREDCK0 EQU   ZCRENTER+18
ZCRECFY0 EQU   ZCRENTER+17
ZCREKCCB EQU   ZCRENTER+17
ZCREDCNB EQU   ZCRENTER+17
ZCREICOE EQU   ZCRENTER+17
ZCREBCNB EQU   ZCRENTER+17
ZCREBC0L EQU   ZCRENTER+17
ZCREBCAL EQU   ZCRENTER+17
ZCREDCQR EQU   ZCRENTER+17
ZCREDCPR EQU   ZCRENTER+16
ZCREBCSB EQU   ZCRENTER+16
ZCREAC1R EQU   ZCRENTER+16
ZCRECCCI EQU   ZCRENTER+16
ZCRECCAI EQU   ZCRENTER+16
ZCRECCBI EQU   ZCRENTER+16
ZCREBCAR EQU   ZCRENTER+16
ZCREBCDR EQU   ZCRENTER+16
ZCREBCBR EQU   ZCRENTER+15
ZCREDCXR EQU   ZCRENTER+15
ZCREDCWB EQU   ZCRENTER+15
ZCREDCWR EQU   ZCRENTER+15
ZCREKCCN EQU   ZCRENTER+15
ZCREKCBN EQU   ZCRENTER+15
ZCREKCBB EQU   ZCRENTER+15
ZCREJC0B EQU   ZCRENTER+15
ZCREJCDB EQU   ZCRENTER+14
ZCREJCCB EQU   ZCRENTER+14
ZCREJCBB EQU   ZCRENTER+14
ZCREJCAB EQU   ZCRENTER+14
ZCREIC1B EQU   ZCRENTER+14
ZCREIC0B EQU   ZCRENTER+14
ZCREICX0 EQU   ZCRENTER+14
ZCREICWB EQU   ZCRENTER+14
ZCREICVB EQU   ZCRENTER+13
ZCREICUB EQU   ZCRENTER+13
ZCREICTB EQU   ZCRENTER+13
ZCREICSC EQU   ZCRENTER+13
ZCREICSB EQU   ZCRENTER+13
ZCREICRB EQU   ZCRENTER+13
ZCREICQB EQU   ZCRENTER+13
ZCREICQA EQU   ZCRENTER+13
ZCREICOB EQU   ZCRENTER+12
ZCREICOA EQU   ZCRENTER+12
ZCREICNB EQU   ZCRENTER+12
ZCREICNA EQU   ZCRENTER+12
ZCREICMB EQU   ZCRENTER+12
ZCREICLB EQU   ZCRENTER+12
ZCREICKG EQU   ZCRENTER+12
ZCREICKE EQU   ZCRENTER+12
ZCREICKB EQU   ZCRENTER+11
ZCREICJB EQU   ZCRENTER+11
ZCREICID EQU   ZCRENTER+11
ZCREICIB EQU   ZCRENTER+11
ZCREICHB EQU   ZCRENTER+11
ZCREICGB EQU   ZCRENTER+11
ZCREICEB EQU   ZCRENTER+11
ZCREICDB EQU   ZCRENTER+11
ZCREICCI EQU   ZCRENTER+10
ZCREICCB EQU   ZCRENTER+10
ZCREICBI EQU   ZCRENTER+10
ZCREICBB EQU   ZCRENTER+10
ZCREICAB EQU   ZCRENTER+10
ZCREICAA EQU   ZCRENTER+10
ZCREHCAN EQU   ZCRENTER+10
ZCREGC0B EQU   ZCRENTER+10
ZCREGC0A EQU   ZCRENTER+9
ZCREGCLA EQU   ZCRENTER+9
ZCREGCEB EQU   ZCRENTER+9
ZCREGCDB EQU   ZCRENTER+9
@NM00093 EQU   ZCRENTER+9
ZCREGCBB EQU   ZCRENTER+9
ZCREGCAB EQU   ZCRENTER+9
ZCREFCEB EQU   ZCRENTER+9
ZCREFCEA EQU   ZCRENTER+8
ZCREECTA EQU   ZCRENTER+8
ZCREECEA EQU   ZCRENTER+8
ZCREECDA EQU   ZCRENTER+8
ZCREECCB EQU   ZCRENTER+8
ZCREECCA EQU   ZCRENTER+8
ZCREECBB EQU   ZCRENTER+8
ZCREECBA EQU   ZCRENTER+8
ZCREDCMB EQU   ZCRENTER+7
ZCREDCL0 EQU   ZCRENTER+7
ZCREDCKB EQU   ZCRENTER+7
ZCREDCKA EQU   ZCRENTER+7
ZCREDCJ0 EQU   ZCRENTER+7
ZCREDCI0 EQU   ZCRENTER+7
ZCREDCH0 EQU   ZCRENTER+7
ZCREDCF0 EQU   ZCRENTER+7
ZCREDCE0 EQU   ZCRENTER+6
ZCREDCD0 EQU   ZCRENTER+6
ZCREDCC0 EQU   ZCRENTER+6
ZCREDCB0 EQU   ZCRENTER+6
ZCREDCA0 EQU   ZCRENTER+6
ZCRECC2B EQU   ZCRENTER+6
ZCRECC1B EQU   ZCRENTER+6
ZCRECC1A EQU   ZCRENTER+6
ZCRECC0B EQU   ZCRENTER+5
ZCRECC0A EQU   ZCRENTER+5
ZCREBC0B EQU   ZCRENTER+5
ZCREBC0A EQU   ZCRENTER+5
ZCREBCZ0 EQU   ZCRENTER+5
ZCREBCY0 EQU   ZCRENTER+5
ZCREBCX0 EQU   ZCRENTER+5
ZCREBCXA EQU   ZCRENTER+5
ZCREBCSC EQU   ZCRENTER+4
ZCREBCRB EQU   ZCRENTER+4
ZCREBCRA EQU   ZCRENTER+4
ZCREBCQB EQU   ZCRENTER+4
ZCREBCPB EQU   ZCRENTER+4
ZCREBCOB EQU   ZCRENTER+4
ZCREBCNE EQU   ZCRENTER+4
ZCREBCND EQU   ZCRENTER+4
ZCREBCMB EQU   ZCRENTER+3
ZCREBCLB EQU   ZCRENTER+3
ZCREBCLA EQU   ZCRENTER+3
ZCREBCKB EQU   ZCRENTER+3
ZCREBCKA EQU   ZCRENTER+3
ZCREBCJB EQU   ZCRENTER+3
ZCREBCJA EQU   ZCRENTER+3
ZCREBCID EQU   ZCRENTER+3
ZCREBCIB EQU   ZCRENTER+2
ZCREBCIA EQU   ZCRENTER+2
ZCREBCHB EQU   ZCRENTER+2
ZCREBCHA EQU   ZCRENTER+2
ZCREBCGB EQU   ZCRENTER+2
ZCREBCGA EQU   ZCRENTER+2
ZCREBCFB EQU   ZCRENTER+2
ZCREBCFA EQU   ZCRENTER+2
ZCREBCEB EQU   ZCRENTER+1
ZCREBCDI EQU   ZCRENTER+1
ZCREBCCB EQU   ZCRENTER+1
ZCREBCBI EQU   ZCRENTER+1
ZCREBCBB EQU   ZCRENTER+1
ZCREBCBA EQU   ZCRENTER+1
ZCREBCAM EQU   ZCRENTER+1
ZCREBCAI EQU   ZCRENTER+1
ZCREBCAG EQU   ZCRENTER
ZCREBCAE EQU   ZCRENTER
ZCREBCAB EQU   ZCRENTER
ZCREBCAA EQU   ZCRENTER
ZCREAC1B EQU   ZCRENTER
ZCREAC0B EQU   ZCRENTER
ZCREAC0A EQU   ZCRENTER
ZCREAC1A EQU   ZCRENTER
ZCRTNAME EQU   ZCRAUDIT+1
ZCRTID   EQU   ZCRAUDIT
ZCRREMIC EQU   ISTZCRR+436
ZCRSAVEZ EQU   ISTZCRR+196
ZCRDAFSV EQU   ZCRCIDSV+2
ZCRSAFSV EQU   ZCRCIDSV
ZCRR13SV EQU   ISTZCRR+188
ZCRR2SV  EQU   ISTZCRR+184
ZCROPCDE EQU   ISTZCRR+183
ZCRPRMTC EQU   ISTZCRR+182
ZCRRCDSV EQU   ISTZCRR+181
ZCRAWQSW EQU   ISTZCRR+180
ZCRTOPQ  EQU   ISTZCRR+180
ZCRLSTFB EQU   ISTZCRR+180
ZCRXSCHD EQU   ISTZCRR+180
ZCRNXTEL EQU   ISTZCRR+180
ZCRSCANQ EQU   ISTZCRR+180
ZCRMOREL EQU   ISTZCRR+180
ZCRFBPRC EQU   ISTZCRR+180
ZCRFSBSV EQU   ISTZCRR+176
ZCRSVWK5 EQU   ZCRWKARA+16
ZCRSVWK4 EQU   ZCRWKARA+12
ZCRSVWK3 EQU   ZCRWKARA+8
ZCRSVWK2 EQU   ZCRWKARA+4
ZCRSVWK1 EQU   ZCRWKARA
ZCRSVF25 EQU   ZCRSVRTN+96
ZCRSVF24 EQU   ZCRSVRTN+92
ZCRSVF23 EQU   ZCRSVRTN+88
ZCRSVF22 EQU   ZCRSVRTN+84
ZCRSVF21 EQU   ZCRSVRTN+80
ZCRSVF20 EQU   ZCRSVRTN+76
ZCRSVF19 EQU   ZCRSVRTN+72
ZCRSVF18 EQU   ZCRSVRTN+68
ZCRSVF17 EQU   ZCRSVRTN+64
ZCRSVF16 EQU   ZCRSVRTN+60
ZCRSVF15 EQU   ZCRSVRTN+56
ZCRSVF14 EQU   ZCRSVRTN+52
ZCRSVF13 EQU   ZCRSVRTN+48
ZCRSVF12 EQU   ZCRSVRTN+44
ZCRSVF11 EQU   ZCRSVRTN+40
ZCRSVF10 EQU   ZCRSVRTN+36
ZCRSVF9  EQU   ZCRSVRTN+32
ZCRSVF8  EQU   ZCRSVRTN+28
ZCRSVF7  EQU   ZCRSVRTN+24
ZCRSVF6  EQU   ZCRSVRTN+20
ZCRSVF5  EQU   ZCRSVRTN+16
ZCRSVF4  EQU   ZCRSVRTN+12
ZCRSVF3  EQU   ZCRSVRTN+8
ZCRSVF2  EQU   ZCRSVRTN+4
ZCRSVF1  EQU   ZCRSVRTN
ZCRPVZB  EQU   ISTZCRR+52
ZCRZLB   EQU   ISTZCRR+48
ZCRBFPTR EQU   ISTZCRR+44
ZCRCCWA  EQU   ISTZCRR+40
ZCRPSW   EQU   ZCRPARMS+15
ZCRPCHAR EQU   ZCRPARMS+14
ZCRPRES2 EQU   ZCRPCOD2
ZCRPMFGF EQU   ZCRPCOD2
ZCRPFHDR EQU   ZCRPCOD2
ZCRPPG2  EQU   ZCRPCOD2
ZCRPRES  EQU   ZCRPCOD1
ZCRPCFTX EQU   ZCRPCOD1
ZCRPBUF  EQU   ZCRPCOD1
ZCRPLSCB EQU   ZCRPCOD1
ZCRPLSBQ EQU   ZCRPLSBF
ZCRPFSB  EQU   ZCRPCOD1
ZCRPLNG  EQU   ZCRPCOD1
ZCRPPG   EQU   ZCRPCOD1
ZCRDTODA EQU   ZCRDFRDA
ZCRMLNG  EQU   ZCRPARMS+8
ZCRTBPTR EQU   ZCRPARMS+4
ZCRCBPTR EQU   ZCRFBPTR
ZCRCRLCP EQU   ISTZCRR+20
@NM00092 EQU   ZCRSCPSW
ZCRSKIPT EQU   ZCRSCPSW
ZCRFSBWE EQU   ZCRSCPSW
ZCRPRCMP EQU   ZCRSCPSW
ZCRLREQ  EQU   ZCRSCPSW
ZCRRJLCP EQU   ZCRSCPSW
ZCRTPINV EQU   ZCRSCPSW
ZCRTPEX  EQU   ZCRSCPSW
@NM00091 EQU   ZCRIBPR
ZCR3270R EQU   ZCRIBPR
ZCR3270  EQU   ZCRIBPR
ZCRLCPFD EQU   ZCRIBPR
ZCRLCPFR EQU   ZCRIBPR
ZCRRELK  EQU   ZCRIBPR
ZCRERR   EQU   ZCRIBPR
ZCRNOBUF EQU   ZCRIBPR
@NM00090 EQU   ZCRPFLGS
ZCRQAHED EQU   ZCRPFLGS
ZCRF1RES EQU   ZCRGENSW
ZCRBRIS  EQU   ZCRGENSW
ZCRCLRBD EQU   ZCRGENSW
ZCREXRES EQU   ZCRGENSW
ZCRLCSYN EQU   ZCRGENSW
ZCRRT06  EQU   ZCRGENSW
ZCRTSW2  EQU   ZCRGENSW
ZCRTSW1  EQU   ZCRGENSW
ZCRINLCP EQU   ZCRFLGS3
ZCRWRPTR EQU   ZCRFLGS3
ZCRNOFRE EQU   ZCRFLGS3
ZCREDRIV EQU   ZCRFLGS3
ZCRDISC  EQU   ZCRFLGS3
ZCRTPDIS EQU   ZCRFLGS3
ZCRTPCON EQU   ZCRFLGS3
ZCRTIC   EQU   ZCRFLGS3
ZCRCNLXL EQU   ZCRRESET
ZCRENDAN EQU   ZCRSWFLD
ZCRENDXL EQU   ZCRSWFLD
ZCRENDX  EQU   ZCRSWFLD
ZCROB1   EQU   ZCRNDLCP
ZCRENDPR EQU   ZCRSWFLD
ZCREXTYP EQU   ZCRSWFLD
ZCRSLCP  EQU   ZCRENDSH
ZCRIF0E3 EQU   ZCRFLGS2
ZCRIF0E2 EQU   ZCRFLGS2
ZCRIF0E1 EQU   ZCRFLGS2
ZCROB    EQU   ZCRFLGS2
ZCRFMSED EQU   ZCRFLGS2
ZCRSHEDI EQU   ZCRFLGS2
ZCRLOCAL EQU   ZCRFLGS2
ZCRFEXIT EQU   ZCRFLGS1
ZCRUNSOL EQU   ZCRFLGS1
ZCRENDLP EQU   ZCRFLGS1
ZCRNRMEX EQU   ZCRFLGS1
ZCRWAIT  EQU   ZCRFLGS1
ZCRDEQSW EQU   ZCRFLGS1
ZCRQUESW EQU   ZCRFLGS1
ZCREXSW  EQU   ZCRFLGS1
ZCRFRRA  EQU   ISTZCRR+8
ZCRCHAIN EQU   ISTZCRR+4
ZCRFLAG  EQU   ZCRCRR+3
ZCRLEN   EQU   ZCRCRR+1
ZCRID    EQU   ZCRCRR
CCFRSVD1 EQU   CFCCRT
CCFCR2   EQU   CFCCRT
CCFCRP   EQU   CFCCRT
CCFCR1   EQU   CFCCRT
CCFCS2   EQU   CFCCRT
CCFCS1   EQU   CFCCRT
NCFRSVD  EQU   CFCNTRD
NCFCR2   EQU   CFCNTRD
NCFCRP   EQU   CFCNTRD
NCFCR1   EQU   CFCNTRD
NCFCS2   EQU   CFCNTRD
NCFCS1   EQU   CFCNTRD
PFCRSV01 EQU   ISTPFCRR+13
CRRFRR   EQU   PFCFRRO
CRRCHAIN EQU   PFCCRRO
CRRLEN   EQU   PFCCRRLN
PFCRSV10 EQU   PFCCRR+1
CRRID    EQU   PFCCRRID
ZSAZTRAC EQU   ISTZSAVE+36
ZSAZSVVR EQU   ISTZSAVE+12
ZSAZSVRR EQU   ISTZSAVE+8
ZSAZSVFC EQU   ISTZSAVE+4
ZSAZACTV EQU   ZSAZSVMS
LCPFTYPE EQU   LCPRPHA
LCPRSTQH EQU   LCPLCCW
LCPCLREP EQU   ISTLCPB+44
LCPUBFSB EQU   LCPFLCCW
LCPRSV77 EQU   ISTLCPB+39
LCPLCCWC EQU   ISTLCPB+38
LCPRSV78 EQU   LCPFLG1
LCPTRANS EQU   LCPFLG1
LCPSTLB  EQU   LCPFLG1
LCPREDRV EQU   LCPFLG1
LCPDIRPT EQU   LCPFLG1
LCPINTER EQU   LCPFLG1
LCPRESET EQU   LCPFLG1
LCPSTYPE EQU   ISTLCPB+36
LCPFSNCH EQU   ISTLCPB+34
LCPFOSN  EQU   ISTLCPB+32
LCPTLBAD EQU   ISTLCPB+28
LCPFDB2  EQU   LCPFDBA+1
LCPFDB1  EQU   LCPFDBA
LCPNXLCW EQU   ISTLCPB+20
LCPDAF   EQU   LCPCID+2
LCPSAF   EQU   LCPCID
LCPLCCW1 EQU   ISTLCPB+12
LCPRRCNT EQU   LCPSEQ+1
LCPRRCCT EQU   LCPSEQ
LCPATOP  EQU   LCPFLAG2
LCPFREE  EQU   LCPFLAG2
LCPDSTAT EQU   LCPFLAG2
LCPEXRES EQU   LCPFID0
LCPZRIMM EQU   LCPTLBPI
LCPRSTRT EQU   LCPFLAG2
LCPASYN  EQU   LCPFLAG2
LCPPRFLG EQU   LCPFLAG2
LCPZMIRC EQU   LCPRUCNT
LCPCHAI2 EQU   LCPCHAIN+1
LCPCHNG  EQU   LCPCHAI1
LCPZRT0B EQU   LCPMNRCD
LCPZRT0A EQU   LCPMNRCD
LCPZRTL9 EQU   LCPZRT09
LCPZRTL8 EQU   LCPZRT08
LCPZRTL7 EQU   LCPZRT07
LCPZRTL6 EQU   LCPZRT06
LCPZRTL5 EQU   LCPZRT05
LCPZRTL4 EQU   LCPZRT04
LCPZRTL3 EQU   LCPZRT03
LCPZRTL2 EQU   LCPZRT02
LCPZRT01 EQU   LCPFLAGS
LCPZRT00 EQU   LCPFLAGS
LCPLNGTH EQU   ISTLCPB+1
LCPTYPE  EQU   ISTLCPB
LCCWDATA EQU   ISTLCCW+4
LCCWCNT  EQU   ISTLCCW+2
LCCWACI  EQU   LCCWFLAG
LCCWRFI  EQU   LCCWFLAG
LCCWPER  EQU   LCCWLSI
LCCWIDAT EQU   LCCWFLAG
LCCWNTVC EQU   LCCWFLAG
LCCWCKPT EQU   LCCWFLAG
LCCWCC   EQU   LCCWFLAG
LCCWCD   EQU   LCCWFLAG
LCCWTYPE EQU   LCCWCTL
LCCWMODE EQU   LCCWCTL
LCCWSOP  EQU   LCCWRWOP
@NM00089 EQU   LCCWRWOP
LCCWSD   EQU   LCCWOP
LCCWSI   EQU   LCCWOP
LGPLOGNP EQU   ISTLGPFX+48
LGPUSECT EQU   ISTLGPFX+10
LGPDTLEN EQU   ISTLGPFX+8
LGPBFHDR EQU   ISTLGPFX
BFHDATA  EQU   ISTBFHDR+8
BFHUSED  EQU   ISTBFHDR+6
BFHSIZE  EQU   ISTBFHDR+4
BFHNXCHN EQU   ISTBFHDR
PATRSV01 EQU   PATFLAGA
PATUSEFG EQU   PATFLAGA
PATRDCNT EQU   ISTPAT+6
PATGRPID EQU   ISTPAT+5
PATPTHID EQU   ISTPAT+4
PATDINDX EQU   ISTPAT+2
PATGINDX EQU   ISTPAT
GNTGRPNM EQU   ISTGNT
DNTTELNO EQU   ISTDNT+1
DNTCTDIG EQU   ISTDNT
RLSRSV02 EQU   ISTRLS+140
RLSRSV01 EQU   ISTRLS+138
RLSCTELU EQU   ISTRLS+136
RLSPRE   EQU   ISTRLS
RDARSVPT EQU   ISTRDA+84
RDAPUBI  EQU   ISTRDA+83
RDADFCUA EQU   ISTRDA+80
RDACTPCC EQU   ISTRDA+79
RDADACUA EQU   ISTRDA+76
RDALUBA  EQU   RDAUCBAD+1
RDACHQI  EQU   RDAUCBAD
RDARSV01 EQU   RDAFLAG
RDARBISA EQU   RDAFLAG
RDAPRE   EQU   ISTRDA
RSWRSV01 EQU   ISTRSW+152
RSWRSV02 EQU   ISTRSW+150
RSWCTELU EQU   ISTRSW+148
RSWGRUPZ EQU   ISTRSW+146
RSWDIALZ EQU   ISTRSW+144
RSWGRUPT EQU   ISTRSW+140
RSWDIALT EQU   ISTRSW+136
RSWPRE   EQU   ISTRSW
RLXRSV03 EQU   ISTRLX+80
RLXRSV02 EQU   ISTRLX+77
RLXRSV01 EQU   RLXFLAGA
RLXINUSE EQU   RLXFLAGA
RLXNLUX  EQU   ISTRLX+72
RLXPRE   EQU   ISTRLX
RPXRSV01 EQU   ISTRPX+80
RPXRSV02 EQU   ISTRPX+77
RPXMAXLU EQU   ISTRPX+76
RPXFLUX  EQU   ISTRPX+72
RPXPRE   EQU   ISTRPX
RLURSV02 EQU   ISTRLU+172
RLULGMOD EQU   ISTRLU+164
RLUMODEP EQU   RLUMODET+8
RLUMODEN EQU   RLUMODET
RLUUSSPT EQU   RLUUSSTB+8
RLUUSSNM EQU   RLUUSSTB
RLURSV01 EQU   ISTRLU+137
RLULOCAD EQU   ISTRLU+136
RLUNCPPM EQU   RLUNCPPC+1
RLUNCPPN EQU   RLUNCPPC
RLUPACEM EQU   RLUPACE+1
RLUPACEN EQU   RLUPACE
RLUINTA  EQU   ISTRLU+128
RLUSSCFM EQU   ISTRLU+127
RLUCRRSV EQU   RLUCRFLG
RLUACTLU EQU   RLUCRFLG
RLURSV00 EQU   RLUFLAG
RLUNDSES EQU   RLUFLAG
RLUGSTAT EQU   RLUFLAG
RLUBATCH EQU   RLUFLAG
RLURBISA EQU   RLUFLAG
RLUTYPE  EQU   ISTRLU+124
RLUCRPR  EQU   ISTRLU
RCCRVPT2 EQU   ISTRCC+144
RCCXTOSW EQU   ISTRCC+140
RCCSWTOX EQU   ISTRCC+136
RCCRSPT2 EQU   ISTRCC+133
RCCADDR  EQU   ISTRCC+132
RCCPASSL EQU   ISTRCC+131
RCCMXOUT EQU   ISTRCC+130
RCCMXDAT EQU   ISTRCC+128
RCCINDEX EQU   ISTRCC+126
RCCPATHZ EQU   ISTRCC+124
RCCPATHT EQU   ISTRCC+120
RCCDPQ   EQU   ISTRCC+116
RCCTPAB  EQU   ISTRCC+112
RCCRSV02 EQU   ISTRCC+109
RCCCRRSV EQU   RCCCRFLG
RCCCTCFL EQU   RCCCRFLG
RCCACTPU EQU   RCCCRFLG
RCCNCSPL EQU   ISTRCC+104
RCCRPHCN EQU   ISTRCC+100
RCCEPAB  EQU   ISTRCC+96
RCCDPAB  EQU   ISTRCC+92
RCCVPAB  EQU   ISTRCC+88
@NM00084 EQU   ISTRCC+87
RCCSESCT EQU   ISTRCC+86
RCCIDNUM EQU   RCCID48+3
RCCIDBLK EQU   RCCID48+2
RCCIDPA2 EQU   RCCID48+1
RCCIDPUT EQU   RCCID48
RCCIDPA1 EQU   RCCSTAID
RCCCTELU EQU   ISTRCC+76
RCCCNCNT EQU   ISTRCC+75
RCCRTGOH EQU   RCCFLAGB
RCCBRKCN EQU   RCCFLAGB
RCCFINAL EQU   RCCFLAGB
RCCBNNSP EQU   RCCFLAGB
RCCIRETR EQU   RCCFLAGB
RCCDIALP EQU   RCCFLAGB
RCCDSTCT EQU   RCCFLAGB
RCCCTPGD EQU   RCCFLAG
RCCPRGDN EQU   RCCFLAG
RCCOUERP EQU   RCCFLAG
RCCOHIMM EQU   RCCFLAG
RCCLDISC EQU   RCCFLAG
RCCCUDIE EQU   RCCFLAG
RCCRBISA EQU   RCCFLAG
RCCTYPE  EQU   ISTRCC+72
RCCPRE   EQU   ISTRCC
DOTADTRM EQU   ISTDOT
RDSADDOT EQU   ISTRDS+76
RDSCTATR EQU   ISTRDS+74
RDSCTTRM EQU   ISTRDS+72
RDSPRE   EQU   ISTRDS
RINRSV05 EQU   ISTRIN+156
RINRSV04 EQU   ISTRIN+152
RINLOCRN EQU   ISTRIN+148
RINRSV02 EQU   ISTRIN+145
RTRCNCNT EQU   RINCNCNT
RTRNCSPL EQU   RINNCSPL
RTRRPHCN EQU   RINRPHCN
RTRVPAB  EQU   RINVPAB
RTRREMOT EQU   RINREMOT
RTRRLDAF EQU   RINRLDAF
RTRNODID EQU   RINNODID
RINRSV01 EQU   RINDFD
RTRLDISC EQU   RINLDISC
RTRNODEF EQU   RINNODEF
RTRREMPO EQU   RINREMPO
RINCRPRE EQU   ISTRIN
RTRRSV04 EQU   ISTRTR+210
RTRLCTI  EQU   ISTRTR+209
RTRIDCAS EQU   RTRBSCID+1
RTRIDLEN EQU   RTRBSCID
RTRRSVDD EQU   ISTRTR+181
RTRRDFG  EQU   ISTRTR+180
RTRDIAA  EQU   ISTRTR+176
RTRPOLA  EQU   ISTRTR+172
RTRCADDR EQU   ISTRTR+164
RTRCTADR EQU   ISTRTR+162
RTRCTPOL EQU   ISTRTR+160
RTRCTDIA EQU   ISTRTR+158
RTRRSV03 EQU   ISTRTR+156
RTRRVPT1 EQU   ISTRTR+152
RTRBHSN1 EQU   ISTRTR+144
RTRCRSV2 EQU   RTRCRFLG
RTRDTRLM EQU   RTRLSCMD
RTRCRSV1 EQU   RTRCRFLG
RTRTRMAX EQU   ISTRTR+142
RTRRSV24 EQU   RTRRDFF
RTRRFDEK EQU   RTRRDFF
RTRRFANK EQU   RTRRDFF
RTRRFPFK EQU   RTRRDFF
RTRRFPEN EQU   RTRRDFF
RTRRFXCT EQU   RTRRDFF
RTRRESCT EQU   RTRRDFE
RTRRESUP EQU   RTRRDFE
RTRREATT EQU   RTRRDFE
RTRRECHK EQU   RTRRDFE
RTRREACR EQU   RTRRDFE
RTRRSV0A EQU   RTRRDFE
RTRREBRK EQU   RTRRDFE
RTRRSV11 EQU   RTRRDFD
RTRRSV10 EQU   RTRRDFD
RTRRDBHI EQU   RTRRDFD
RTRRDBHD EQU   RTRRDFD
RTRRDBHN EQU   RTRRDFD
RTRRSV23 EQU   RTRRDFC
RTRRCXMS EQU   RTRRDFC
RTRRCMSG EQU   RTRRDFC
RTRRCBLK EQU   RTRRDFC
RTRRCPT3 EQU   RTRRDFC
RTRRCIT2 EQU   RTRRDFC
RTRRCIT1 EQU   RTRRDFC
RTRRSV32 EQU   RTRRDFB
RTRRBEND EQU   RTRRDFB
RTRRBECT EQU   RTRRDFB
RTRRSV02 EQU   RTRRDFA
RTRRACTR EQU   RTRRDFA
RTRRSV60 EQU   RTRRDFA
RTRRACDT EQU   RTRRDFA
RTRRAPT3 EQU   RTRRAALL
RTRRAPT2 EQU   RTRRAALL
RTRRAPT1 EQU   RTRRAALL
RTRRAATN EQU   RTRRDFA
RTRRSV45 EQU   ISTRTR+132
RTRRSV01 EQU   ISTRTR+130
RTRCTECM EQU   ISTRTR+128
RTRADRPT EQU   RTRADR+1
RTRRSV22 EQU   RTRFLAG
RTRVTERM EQU   RTRFLAG
RTRRSV51 EQU   RTRFLAG
RTRRBISA EQU   RTRFLAG
RTRRSV21 EQU   RTRFLAG
RTRCRPR  EQU   ISTRTR
RCLRVPT2 EQU   ISTRCL+92
RCLRVPT1 EQU   ISTRCL+88
RCLGPOLA EQU   ISTRCL+84
RCLCTNGP EQU   ISTRCL+82
RCLRSV01 EQU   ISTRCL+80
RCLCTECM EQU   ISTRCL+78
RCLCTETR EQU   ISTRCL+76
RCLGPADR EQU   RCLADR+1
RCLRSV33 EQU   RCLFLAG
RCLBATCH EQU   RCLFLAG
RCLRBISA EQU   RCLFLAG
RCLRSV22 EQU   RCLFLAG
RCLPRE   EQU   ISTRCL
RPTRSV03 EQU   ISTRPT+156
RPTRSV02 EQU   ISTRPT+152
RPTNSNSV EQU   ISTRPT+148
RPTPEPCT EQU   ISTRPT+144
RPTDAFSV EQU   ISTRPT+142
RPTRSV01 EQU   ISTRPT+141
RPTISTAT EQU   RPTFLAG1
RPTDYNAM EQU   RPTFLAG1
RPTVYIMM EQU   RPTFLAG1
RPTVIODN EQU   RPTFLAG1
RPTONLIN EQU   RPTFLAG1
RPTASLEP EQU   RPTFLAG1
RPTUTERM EQU   ISTRPT+136
RPTATERM EQU   ISTRPT+132
RPTDIVT  EQU   RPTDITT
RPTCTNM  EQU   ISTRPT+120
RPTLNDAF EQU   RPTLNCID+2
RPTLNSAF EQU   RPTLNCID
RPTLN    EQU   ISTRPT
RLNRVPT2 EQU   ISTRLN+112
RLNNCSPL EQU   ISTRLN+108
RLNX2SW  EQU   ISTRLN+104
@NM00083 EQU   ISTRLN+103
RLNCRRSV EQU   RLNCRFLG
RLNSWEP  EQU   RLNCRFLG
RLNSVSKP EQU   RLNLSCMD
RLNSESLM EQU   RLNLSCMD
RLNNPRLM EQU   RLNLSCMD
RLNSWNCP EQU   RLNCRFLG
RLNACTLN EQU   RLNCRFLG
RLNPAUSE EQU   ISTRLN+101
RLNPOLMT EQU   ISTRLN+100
RLNACTSN EQU   ISTRLN+98
RLNRESV1 EQU   ISTRLN+97
RLNACTRM EQU   ISTRLN+96
RLNCTSES EQU   ISTRLN+95
RLNRDSLM EQU   ISTRLN+94
RLNAUTOA EQU   ISTRLN+92
RLNRDFD  EQU   RLNRDF+3
RLNRDFC  EQU   RLNRDF+2
RLNMULTP EQU   RLNRDFB
RLNRATRN EQU   RLNRDFB
RLNRAPOL EQU   RLNRDFB
RLNTTV   EQU   RLNRDFB
RLNRSV0B EQU   RLNRDFB
RLNAUTOD EQU   RLNRDFB
RLNANSWR EQU   RLNRDFB
RLNRBUSE EQU   RLNRDFB
RLNRAPEP EQU   RLNRDFA
RLNRANCP EQU   RLNRDFA
RLNRAEP  EQU   RLNRDFA
RLNIDV   EQU   RLNRDFA
RLNGANSW EQU   RLNRDFA
RLNRACAN EQU   RLNRACNT
RLNRACAT EQU   RLNRACNT
RLNRSV04 EQU   RLNSTAT2
RLNINUSE EQU   RLNSTAT2
RLNOHIN  EQU   RLNSTAT2
RLNRSV03 EQU   RLNSTAT1
RLNVD    EQU   RLNSTAT1
RLNINOPP EQU   RLNSTAT1
RLNINOPL EQU   RLNSTAT1
RLNLRST  EQU   RLNSTAT1
RLNTRAP  EQU   RLNSTAT1
RLNACTCT EQU   ISTRLN+84
RLNCTECM EQU   ISTRLN+82
RLNCTEIN EQU   ISTRLN+80
RLNCTETR EQU   ISTRLN+78
RLNCTECL EQU   ISTRLN+76
RLNCUA   EQU   RLNUCBAD
RLNRSV01 EQU   RLNFLAG
RLNRBISA EQU   RLNFLAG
RLNEAM   EQU   RLNFLAG
RLNPRE   EQU   ISTRLN
RGPRVPT2 EQU   ISTRGP+88
RGPRVPT1 EQU   ISTRGP+84
RGPCTECM EQU   ISTRGP+82
RGPCTEIN EQU   ISTRGP+80
RGPCTETR EQU   ISTRGP+78
RGPCTECL EQU   ISTRGP+76
RGPCTELN EQU   ISTRGP+74
RGPRSV03 EQU   ISTRGP+73
RGPRSV02 EQU   RGPFLG
RGPASDLC EQU   RGPFLG
RGPABSC  EQU   RGPFLG
RGPASS   EQU   RGPFLG
RGPADIL  EQU   RGPFLG
RGPPRE   EQU   ISTRGP
RRNRINNM EQU   ISTRRN+248
@NM00082 EQU   ISTRRN+247
RRNRDCUA EQU   ISTRRN+244
RRNLASTE EQU   ISTRRN+240
RRNNCSPL EQU   ISTRRN+236
RRNRPLPT EQU   ISTRRN+232
RRNMSIZE EQU   ISTRRN+228
RRNNCPNM EQU   ISTRRN+221
RRNCTPCC EQU   ISTRRN+220
RRNHBUFS EQU   ISTRRN+218
RRNHLENT EQU   RRNHPRE+1
RRNHLENH EQU   RRNHPRE
RRNNMNCP EQU   ISTRRN+208
RRNDELAY EQU   ISTRRN+206
RRNRSV04 EQU   ISTRRN+200
RRNRSV88 EQU   RRNNMDPD+7
RRNPUBI  EQU   RRNNMDPD+6
RRNDPLUB EQU   RRNNMDPD
RRNEPADR EQU   ISTRRN+190
RRNCPLUB EQU   ISTRRN+184
RRNFLUX  EQU   ISTRRN+180
RRNRSV05 EQU   RRNCMFD
RRNREMPO EQU   RRNCMFD
RRNCDREC EQU   RRNCMFD
RRNCDDSI EQU   RRNCMFD
RRNCDBCK EQU   RRNCMFD
RRNCDDTL EQU   RRNCMFD
RRNCDSTD EQU   RRNCMFD
RRNCDCSP EQU   RRNCMFD
RRNCCCSL EQU   RRNCMFC
RRNCCSIM EQU   RRNCMFC
RRNCCRCM EQU   RRNCMFC
RRNCCRIM EQU   RRNCMFC
RRNCCCRC EQU   RRNCMFC
RRNCCRST EQU   RRNCMFC
RRNCCRDQ EQU   RRNCMFC
RRNCCRCN EQU   RRNCMFC
RRNCBALT EQU   RRNCMFB
RRNCBMOD EQU   RRNCMFB
RRNCBNPL EQU   RRNCMFB
RRNCBRLS EQU   RRNCMFB
RRNCBRDS EQU   RRNCMFB
RRNCBDLR EQU   RRNCMFB
RRNCBDLH EQU   RRNCMFB
RRNCBDLO EQU   RRNCMFB
RRNCADGO EQU   RRNCMFA
RRNCADTD EQU   RRNCMFA
RRNCACDT EQU   RRNCMFA
RRNCAMBH EQU   RRNCMFA
RRNCAATI EQU   RRNCMFA
RRNCAATG EQU   RRNCMFA
RRNCAATD EQU   RRNCMFA
RRNCAALL EQU   RRNCMFA
RRNRSV55 EQU   RRNRDF+3
RRNPTASL EQU   RRNRDFB+1
RRNRSV01 EQU   RRNRDFB+1
RRNVYDON EQU   RRNRDFB+1
RRNRBBUP EQU   RRNRDFB+1
RRNRSV03 EQU   RRNRDFB
RRNRBCT2 EQU   RRNRDFB
RRNRBCT1 EQU   RRNRDFB
RRNRBSEC EQU   RRNRDFB
RRNRBCCT EQU   RRNRDFB
RRNRBCCL EQU   RRNRDFB
RRNRSV02 EQU   RRNRDFB
RRNRBMDL EQU   RRNRDFB
RRNRAPEP EQU   RRNRDFA
RRNRANCP EQU   RRNRDFA
RRNRBREM EQU   RRNRDFA
RRNRAOLT EQU   RRNRDFA
RRNRASYN EQU   RRNRDFA
RRNRADMP EQU   RRNRDFA
RRNRAIPL EQU   RRNRDFA
RRNRASHT EQU   RRNRDFA
RRNCTENT EQU   ISTRRN+170
RRNCTECM EQU   ISTRRN+168
RRNCTEIN EQU   ISTRRN+166
RRNCTETR EQU   ISTRRN+164
RRNCTECL EQU   ISTRRN+162
RRNCTELI EQU   ISTRRN+160
RRNCTEGP EQU   ISTRRN+158
RRNCTBHS EQU   ISTRRN+156
RRNBHSET EQU   ISTRRN+152
RRNTRENT EQU   ISTRRN+148
RRNRLDIP EQU   ISTRRN+147
RRNRNCUA EQU   ISTRRN+144
RRNGRPA  EQU   ISTRRN+140
RRNLUBA  EQU   RRNUCBAD+1
RRNCHQI  EQU   RRNUCBAD
RRNRSV11 EQU   RRNFLAG
RRNDSTCT EQU   RRNFLAG
RRNERPIP EQU   RRNFLAG
RRNLCDIP EQU   RRNFLAG
RRNLCDIE EQU   RRNFLAG
RRNLCSIP EQU   RRNFLAG
RRNRBISA EQU   RRNFLAG
RRNRSV89 EQU   RRNFLAG
RRNPRE   EQU   ISTRRN
RLCRVPT2 EQU   ISTRLC+80
RLCRVPT1 EQU   ISTRLC+79
RLCLCCUA EQU   ISTRLC+76
RLCUCBAD EQU   RLCADR+1
RLCRSVDE EQU   RLCFLAG
RLCACNT  EQU   RLCFLAG
RLCRSV14 EQU   RLCFLAG
RLCRBISA EQU   RLCFLAG
RLCRSV22 EQU   RLCFLAG
RLCPRE   EQU   ISTRLC
RAPRVPT2 EQU   ISTRAP+116
RAPRVPT1 EQU   ISTRAP+112
RAPBFACT EQU   ISTRAP+111
RAPRSV17 EQU   RAPFLGC
RAPRSV16 EQU   RAPFLGC
RAPRSV15 EQU   RAPFLGC
RAPRSV14 EQU   RAPFLGC
RAPRSV13 EQU   RAPFLGC
RAPRSV12 EQU   RAPFLGC
RAPRSV11 EQU   RAPFLGC
RAPRSV10 EQU   RAPFLGC
RAPANVPC EQU   RAPFLGB
RAPASPO  EQU   RAPFLGB
RAPAPPO  EQU   RAPFLGB
RAPAPRMT EQU   RAPFLGB
RAPAPASS EQU   RAPFLGB
RAPABLCK EQU   RAPFLGB
RAPRSV06 EQU   RAPFLG
RAPRSV05 EQU   RAPFLG
RAPRSV04 EQU   RAPFLG
RAPRSV03 EQU   RAPFLG
RAPATLGN EQU   RAPFLG
RAPASLGI EQU   RAPFLG
RAPAQUI  EQU   RAPFLG
RAPABLGN EQU   RAPFLG
RAPACEQD EQU   ISTRAP+106
RAPTRPRE EQU   ISTRAP+104
RAPACEAP EQU   ISTRAP+100
RAPICEAQ EQU   ISTRAP+96
RAPICEAC EQU   ISTRAP+92
RAPICELG EQU   ISTRAP+88
RAPAPPWD EQU   ISTRAP+80
RAPACDEB EQU   ISTRAP+76
RAPACBA  EQU   ISTRAP+72
RAPPRE   EQU   ISTRAP
RDTVSRPL EQU   ISTRDT+132
RDTCRSPW EQU   ISTRDT+124
RDTCRSDS EQU   ISTRDT+116
@NM00081 EQU   ISTRDT+113
RRNSTCNT EQU   RDTSTCNT
RRNVYRPH EQU   RDTVYRPH
RDTTPAB  EQU   ISTRDT+104
RDTDPAB  EQU   ISTRDT+100
RDTEPAB  EQU   ISTRDT+96
RDTVPAB  EQU   ISTRDT+92
RDTRSV01 EQU   RDTFLAGB
RDTBHSET EQU   RDTFLAGB
RDTCTCFL EQU   RDTFLAGB
RDTCTPGD EQU   RDTFLAGB
RDTPRGDN EQU   RDTFLAGB
RDTOUERP EQU   RDTFLAGB
RDTLGCT  EQU   ISTRDT+90
RDTNODID EQU   ISTRDT+89
RDTMAXID EQU   ISTRDT+88
RDTCTSNT EQU   ISTRDT+86
RDTFLAGS EQU   ISTRDT+84
RDTBACK  EQU   ISTRDT+80
RDTFORW  EQU   ISTRDT+76
RDTLEN   EQU   RDTPLEN+1
RDTPRILS EQU   RDTPRIOR
RDTPRISW EQU   RDTPRIOR
RDTPRIRN EQU   RDTPRIOR
RDTPRILC EQU   RDTPRIOR
RDTPRIAP EQU   RDTPRIOR
@NM00080 EQU   RDTPRIOR
RDTPRE   EQU   ISTRDT
RCPRSV05 EQU   ISTRCPRE+120
RCPRSV04 EQU   ISTRCPRE+116
RCPRSV03 EQU   ISTRCPRE+112
RCPINTA  EQU   RCPLGNIN+16
RCPLGNCT EQU   RCPLGNIN+8
RCPLGNAP EQU   RCPLGNIN
@NM00079 EQU   RCPPMODE
RCPBFLIM EQU   ISTRCPRE+90
RCPBHSI2 EQU   ISTRCPRE+89
RCPBHSI1 EQU   ISTRCPRE+88
RCPACETR EQU   ISTRCPRE+84
RCPICEAQ EQU   ISTRCPRE+80
RCPLNAPA EQU   ISTRCPRE+76
RCPICELN EQU   ISTRCPRE+72
RCPPRE   EQU   ISTRCPRE
RPRCONID EQU   ISTRPRE+63
RPRCLVPD EQU   RPRFLAGC
RPRINIMM EQU   RPRFLAGD
RPRRSV05 EQU   RPRFLAGD
RPRCONP  EQU   RPRFLAGD
RPRACTP  EQU   RPRFLAGD
RPRRSON  EQU   RPRFLAGD
RPRCONCT EQU   RPRFLAGD
RPRLTASN EQU   RPRFLAGD
RPRSWDAF EQU   ISTRPRE+58
RPRSTPCT EQU   ISTRPRE+56
RPRRVPT1 EQU   ISTRPRE+52
RPRDEVCH EQU   ISTRPRE+44
RPRNCBA  EQU   ISTRPRE+40
RPRLGONB EQU   ISTRPRE+32
RPRLGONF EQU   ISTRPRE+28
RPRHDTYP EQU   ISTRPRE+27
RPRTIOCT EQU   ISTRPRE+26
RPRPEPCT EQU   ISTRPRE+24
RPRRSV03 EQU   RPRCAUSE
RPRRSYNC EQU   RPRCAUSE
RPRCRCPT EQU   RPRCAUSE
RPRNOSRT EQU   RPRCAUSE
RPRINTST EQU   RPRFLAGB
RPRVYIMM EQU   RPRFLAGB
RPRHLVPD EQU   RPRFLAGB
RPRVIODN EQU   RPRFLAGB
RPRENTVT EQU   RPRFLAGB
RPRENTVH EQU   RPRFLAGB
RPRLIVE  EQU   RPRFLAGA
RPRENTED EQU   RPRFLAGA
RPRENTIO EQU   RPRFLAGA
RPRENTBF EQU   RPRFLAGA
RPRTIED  EQU   RPRFLAGA
RPRINV   EQU   RPRFLAGA
RPRACT   EQU   RPRFLAGA
RPRPELEN EQU   ISTRPRE+18
RPRELEN  EQU   ISTRPRE+16
RPRRLOCK EQU   ISTRPRE+12
RPRDAF   EQU   RPRCOMID+2
RPRSAF   EQU   RPRCOMID
OCWEND   EQU   ISTOCW+848
@NM00078 EQU   OCWFLG1
OCWEXIT  EQU   OCWFLG1
OCWSENSE EQU   ISTOCW+843
OCWBNDSZ EQU   ISTOCW+841
OCWBINDD EQU   OCWBIND+37
OCWBINDA EQU   OCWBIND+1
OCWBINDC EQU   OCWBIND
OCWSHPLC EQU   OCWSHPL+8
OCWSHPLB EQU   OCWSHPL+4
OCWSHPLA EQU   OCWSHPL
OCWBNDRU EQU   ISTOCW+780
OCWELCP  EQU   ISTOCW+776
OCWRSV12 EQU   ISTOCW+772
OCWRSV11 EQU   ISTOCW+768
OCWODOA  EQU   ISTOCW+764
OCWSCHIO EQU   OCWIOCNT
OCWPROCD EQU   ISTOCW+756
OCWCCRPH EQU   ISTOCW+752
OCWPABCT EQU   ISTOCW+748
OCWDAF   EQU   OCWCID+2
OCWSAF   EQU   OCWCID
OCWNMLLN EQU   ISTOCW+742
OCWRSV0A EQU   ISTOCW+741
OCWRSV82 EQU   OCWLOCKS
OCWALOCK EQU   OCWLOCKS
OCWDLOCK EQU   OCWLOCKS
OCWCLOCK EQU   OCWLOCKS
OCWELOCK EQU   OCWLOCKS
OCWACE   EQU   ISTOCW+736
OCWIOMIN EQU   ISTOCW+735
OCWIOMAJ EQU   ISTOCW+734
OCWBHSID EQU   ISTOCW+733
OCWRSV03 EQU   ISTOCW+732
OCWSWTE7 EQU   OCWSWTE
OCWSWTE6 EQU   OCWSWTE
OCWSWTE5 EQU   OCWSWTE
OCWSWTE4 EQU   OCWSWTE
OCWSWTE3 EQU   OCWSWTE
OCWSWTE2 EQU   OCWSWTE
OCWLCPBC EQU   OCWSWTE
OCWSKEL  EQU   OCWSWTE
OCWSWTR7 EQU   OCWSWTRD
OCWSWTR6 EQU   OCWSWTRD
OCWSWTR5 EQU   OCWSWTRD
OCWDPDVT EQU   OCWSWTRD
OCWEPTLP EQU   OCWSWTRD
OCWCPARE EQU   OCWSWTRD
OCWCLEN  EQU   OCWSWTRD
OCWSRDVT EQU   OCWSWTRD
OCWCLCD2 EQU   ISTOCW+728
OCWCLCD1 EQU   ISTOCW+726
OCWSDVTA EQU   ISTOCW+720
OCWSORTP EQU   ISTOCW+712
OCWMDVT  EQU   ISTOCW+708
OCWSDVT  EQU   ISTOCW+704
OCWPREV  EQU   ISTOCW+700
OCWLCPBA EQU   ISTOCW+696
OCWSAVE5 EQU   ISTOCW+552
OCWSAVE4 EQU   ISTOCW+480
OCWSAVE3 EQU   ISTOCW+408
OCWSAVE2 EQU   ISTOCW+336
OCWRSVD  EQU   ISTOCW+212
OCWVPAB  EQU   ISTOCW+208
OCWSWTD7 EQU   OCWSWTD
OCWSWTD6 EQU   OCWSWTD
OCWSWTD5 EQU   OCWSWTD
OCWSWTD4 EQU   OCWSWTD
OCWPGDON EQU   OCWSWTD
OCWSTCTL EQU   OCWSWTD
OCWNPOST EQU   OCWSWTD
OCWCLDEB EQU   OCWSWTD
OCWVARY  EQU   OCWSWTC
OCWPRMTR EQU   OCWSWTC
OCWPBH   EQU   OCWSWTC
OCWRBH   EQU   OCWSWTC
OCWCKACE EQU   OCWSWTC
OCWSWTC1 EQU   OCWSWTC
OCWSPCLS EQU   OCWSWTC
OCWCSCAL EQU   OCWSWTB
OCWPSREQ EQU   OCWSWTB
OCWOLOCK EQU   OCWSWTB
OCWDOPHY EQU   OCWSWTB
OCWCLOOP EQU   OCWSWTB
OCWRECL  EQU   OCWSWTB
OCWGOFUN EQU   OCWSWTB
OCWNODLT EQU   OCWSWTA
OCWODCL  EQU   OCWSWTA
OCWGODST EQU   OCWSWTA
OCWSORT  EQU   OCWSWTA
OCWSCPAD EQU   ISTOCW+176
OCWODCT2 EQU   ISTOCW+106
OCWRSV02 EQU   ISTOCW+100
OCWRSV01 EQU   ISTOCW+96
OCWSVEC  EQU   OCWSVCOD+1
OCWSVRC  EQU   OCWSVCOD
OCWODFST EQU   ISTOCW+88
OCWLPOST EQU   ISTOCW+76
OCWCPOST EQU   ISTOCW+72
OCWFPOST EQU   ISTOCW+68
OCWACDEB EQU   ISTOCW+64
OCWNCB   EQU   ISTOCW+60
OCWFMCB  EQU   ISTOCW+56
OCWEPTAB EQU   ISTOCW+52
OCWDRHOB EQU   OCWDRDTE
OCWPAB   EQU   ISTOCW+20
OCWCHAIN EQU   ISTOCW+8
OCWPBCHN EQU   ISTOCW+4
OCWTLEN  EQU   ISTOCW+2
OCWSLEN  EQU   ISTOCW+1
OCWID    EQU   ISTOCW
CSLDATAF EQU   CSLDATA
CSLNIBF  EQU   CSLNIB
BINUSE   EQU   ISTBIND+36
BINPRIM  EQU   ISTBIND+27
BINPRIML EQU   ISTBIND+26
BINRSV05 EQU   ISTBIND+25
BINLUTYP EQU   BINLUP
BINRSV27 EQU   BINLUP
BINRSV08 EQU   BINTSU+4
BINPRUSE EQU   BINPRUSZ
BINPRUSM EQU   BINPRUSZ
BINSRUSE EQU   BINSRUSZ
BINSRUSM EQU   BINSRUSZ
BINRPACM EQU   BINRPACE
BINRSV07 EQU   BINRPACE
BINRSV06 EQU   BINTSU
BINCONR  EQU   BINCMNP2
BINRCHN  EQU   BINCMNP2
BINMDIBK EQU   BINCMNP2
BINBKFS  EQU   BINCMNP2
BINRCVR  EQU   BINCMNP2
BINFMTRM EQU   BINCMNP2
BINRSV04 EQU   BINCMNP
BINALT   EQU   BINCMNP
BINBKTR  EQU   BINCMNP
BINBRAK  EQU   BINCMNP
BINFMHD  EQU   BINCMNP
BINRSV03 EQU   BINCMNP
BINSSEB  EQU   BINSECP
BINSCMP  EQU   BINSECP
BINRSV02 EQU   BINSECP
BINSCHNR EQU   BINSECP
BINSMCH  EQU   BINSECP
BINSCHN  EQU   BINSECP
BINPSEB  EQU   BINPRIP
BINPCMP  EQU   BINPRIP
BINRSV01 EQU   BINPRIP
BINPCHNR EQU   BINPRIP
BINPMCH  EQU   BINPRIP
BINPCHN  EQU   BINPRIP
BINTS    EQU   ISTBIND+2
BINFM    EQU   ISTBIND+1
BINTYPE  EQU   BINFMTY
BINFMT   EQU   BINFMTY
CSPUNUSD EQU   CSPRSC2B+4
CSPUECBA EQU   CSPRSC2B
CSPRLRPH EQU   ISTCSP+24
CSPDATA  EQU   ISTCSP+16
@NM00077 EQU   CSPOPT2
CSPRSC2F EQU   CSPOPT2
CSPACQS  EQU   CSPOPT2
CSPACES  EQU   CSPOPT2
CSPNOREL EQU   CSPOPT2
@NM00076 EQU   CSPOPT1
CSPANY   EQU   CSPOPT1
CSPACT   EQU   CSPOPT1
CSPSESS  EQU   CSPOPT1
CSPPND   EQU   CSPOPT1
NIBRESV  EQU   ISTNIB+60
NIBNDAR  EQU   ISTNIB+56
NIBEXLST EQU   ISTNIB+44
NIBLIMIT EQU   ISTNIB+42
@NM00075 EQU   ISTNIB+41
@NM00074 EQU   NIBFLG1
@NM00073 EQU   NIBFLG1
@NM00072 EQU   NIBFLG1
@NM00071 EQU   NIBFLG1
NIBSHLTP EQU   NIBFLG1
NIBSDAPP EQU   NIBFLG1
NIBCON   EQU   NIBFLG1
NIBPROCD EQU   ISTNIB+36
NIBDEVCH EQU   ISTNIB+28
NIBMODE  EQU   ISTNIB+20
NIBUSER  EQU   ISTNIB+8
NIBCID   EQU   ISTNIB+4
NIBLEN   EQU   ISTNIB+3
NIBCONDN EQU   ISTNIB+2
NIBRSV01 EQU   ISTNIB+1
NIBID    EQU   ISTNIB
PROSRDEF EQU   PROSETM4
PRORSV47 EQU   PROSETM4
PROSCON  EQU   PROSETM4
PRORSV46 EQU   PROSETM3
PROSMONT EQU   PROSETM3
PRORSV45 EQU   PROSETM3
PROSNTO  EQU   PROSETM3
PRORSV44 EQU   PROSETM3
PRORSV43 EQU   PROSETM2
PROSNTFL EQU   PROSETM2
PRORSV42 EQU   PROSETM2
PRORSV41 EQU   PROPROCS
PROMODC  EQU   PROPROC4
PROMODT  EQU   PROPROC4
PROMODM  EQU   PROPROC4
PROMODB  EQU   PROPROC4
PRORSV14 EQU   PROPROC4
PRORSV13 EQU   PROPROC4
PRORSV12 EQU   PROPROC4
PROEIB   EQU   PROPROC4
PROMONT3 EQU   PROPROC3
PROMONT2 EQU   PROPROC3
PROMONIT EQU   PROPROC3
PROSUBLK EQU   PROPROC3
PRONTO   EQU   PROPROC3
PROLGIN  EQU   PROPROC3
PROERPI  EQU   PROPROC3
PRORSV07 EQU   PROPROC3
PROCFTX  EQU   PROPROC2
PROEMLC  EQU   PROPROC2
PRONTFL  EQU   PROPROC2
PRORSV05 EQU   PROPROC2
PRORSV04 EQU   PROPROC2
PROLGOT  EQU   PROPROC2
PROERPO  EQU   PROPROC2
PRORSV03 EQU   PROPROC2
PRORPLC  EQU   PROPROC1
PROCS    EQU   PROPROC1
PROCA    EQU   PROPROC1
PRORESPX EQU   PROPROC1
PRODFASY EQU   PROPROC1
PROXPOPT EQU   PROPROC1
PROTRUNC EQU   PROPROC1
PROASYIP EQU   PROPROC1
ATCAOS   EQU   ISTATCVT+1584
ATCPOPAB EQU   ATCAOSM+640
ATCVIOPM EQU   ATCAOSM+636
ATCTPMMI EQU   ATCAOSM+632
ATCTPMPB EQU   ATCAOSM+600
ATCRSV88 EQU   ATCAOSM+596
ATCRPLCT EQU   ATCAOSM+594
ATCCRACT EQU   ATCAOSM+592
ATCSRBCT EQU   ATCAOSM+590
ATCRSV75 EQU   ATCAOSM+589
ATCRSV66 EQU   ATCZFLAG
ATCZF001 EQU   ATCZFLAG
ATCTPCP1 EQU   ATCAOSM+584
ATCTPCP0 EQU   ATCAOSM+580
ATCAICTN EQU   ATCAOSM+576
ATCZR01  EQU   ATCAOSM+572
ATCMPLTA EQU   ATCAOSM+568
ATCASCB  EQU   ATCAOSM+564
ATCAP86  EQU   ATCAOSM+560
ATCAP85  EQU   ATCAOSM+556
ATCAP84  EQU   ATCAOSM+552
ATCAP83  EQU   ATCAOSM+548
ATCAP82  EQU   ATCAOSM+544
ATCAP69  EQU   ATCAOSM+540
ATCAP66  EQU   ATCAOSM+536
ATCAP62  EQU   ATCAOSM+532
ATCAPC59 EQU   ATCAOSM+528
ATCAP56  EQU   ATCAOSM+524
ATCAP55  EQU   ATCAOSM+520
ATCRCFY0 EQU   ATCAOSM+516
ATCAP41  EQU   ATCAOSM+512
ATCAPC25 EQU   ATCAOSM+508
ATCAP23  EQU   ATCAOSM+504
ATCTPSPB EQU   ATCAOSM+472
ATCTRMPB EQU   ATCAOSM+440
ATCAPBE  EQU   ATCAOSM+436
ATCPSTA  EQU   ATCAOSM+432
ATCSMABF EQU   ATCAOSM+428
ATCSMAPR EQU   ATCAOSM+424
ATCTPWQA EQU   ATCAOSM+420
ATCSMAID EQU   ATCAOSM+416
ATCSMARA EQU   ATCAOSM+412
ATCCACXA EQU   ATCAOSM+408
ATCZLAAB EQU   ATCAOSM+404
ATCATA10 EQU   ATCAOSM+400
ATCHLTCB EQU   ATCAOSM+396
@NM00070 EQU   ATCVTFLG
ATCVTACT EQU   ATCVTFLG
ATCRPT40 EQU   ATCAOSM+388
ATCRPT39 EQU   ATCAOSM+384
ATCRPT38 EQU   ATCAOSM+380
ATCRPT37 EQU   ATCAOSM+376
ATCRPT36 EQU   ATCAOSM+372
ATCRPT35 EQU   ATCAOSM+368
ATCRPT34 EQU   ATCAOSM+364
ATCRPT33 EQU   ATCAOSM+360
ATCRPT32 EQU   ATCAOSM+356
ATCRPT31 EQU   ATCAOSM+352
ATCRPT30 EQU   ATCAOSM+348
ATCRPT29 EQU   ATCAOSM+344
ATCRPT28 EQU   ATCAOSM+340
ATCRPT27 EQU   ATCAOSM+336
@NM00069 EQU   ATCAOSM+333
@NM00068 EQU   @NM00067
ATCSNUF  EQU   @NM00067
ATCOPKL  EQU   @NM00067
ATCABEN  EQU   @NM00067
ATCAIWT  EQU   ATCAOSM+328
ATCINFDD EQU   ATCAOSM+324
ATCORFMG EQU   ATCAOSM+320
ATCORFRL EQU   ATCAOSM+316
ATCOROBT EQU   ATCAOSM+312
ATCORQG  EQU   ATCORSRB
ATCORTBF EQU   ATCSQAFR
ATCRPLAC EQU   ATCRPLCN+2
ATCRPLRC EQU   ATCRPLCN
ATCCRPLQ EQU   ATCCRPL
ATCSRBAC EQU   ATCSRBCN+2
ATCSRBRC EQU   ATCSRBCN
ATCSRBQ  EQU   ATCSRB
ATCCRAAC EQU   ATCCRACN+2
ATCCRARC EQU   ATCCRACN
ATCCRAQ  EQU   ATCCRA
ATCRPT12 EQU   ATCAOSM+276
ATCDMAPP EQU   ATCAOSM+272
ATCAP38  EQU   ATCAOSM+268
ATCAP37  EQU   ATCAOSM+264
ATCZDFJ0 EQU   ATCAOSM+260
ATCAP51  EQU   ATCAOSM+256
ATCZPAB2 EQU   ATCAOSM+224
ATCZPAB1 EQU   ATCAOSM+192
ATCZLFVT EQU   ATCAOSM+188
ATCZLPVT EQU   ATCAOSM+184
ATCZDVTX EQU   ATCAOSM+180
ATCZDVTA EQU   ATCAOSM+176
ATCZDVT9 EQU   ATCAOSM+172
ATCZDVT8 EQU   ATCAOSM+168
ATCZDVT7 EQU   ATCAOSM+164
ATCRSV56 EQU   ATCDAPVT+22
ATCDAPDG EQU   ATCDAPVT+20
ATCDXCEA EQU   ATCDAPVT+16
ATCDCEA  EQU   ATCDAPVT+12
ATCDPCIA EQU   ATCDAPVT+8
ATCDSIOA EQU   ATCDAPVT+4
ATCDEOEA EQU   ATCDAPVT
ATCZLAEA EQU   ATCLDAPP+16
ATCZLCEA EQU   ATCLDAPP+12
ATCRSV17 EQU   ATCLDAPP+8
ATCSMFRR EQU   ATCLDAPP+4
ATCCDTID EQU   ATCLDAPP
ATCZAEA  EQU   ATCICAPP+16
ATCZCEA  EQU   ATCICAPP+12
ATCCDTCB EQU   ATCICAPP+8
ATCZSIOA EQU   ATCICAPP+4
ATCCDRPH EQU   ATCICAPP
ATCAP65  EQU   ATCAOSM+96
ATCZDVT6 EQU   ATCAOSM+92
ATCZDVT4 EQU   ATCAOSM+88
ATCZDVT3 EQU   ATCAOSM+84
ATCZDVT1 EQU   ATCAOSM+80
ATCICNCB EQU   ATCAOSM+76
ATCZPSVT EQU   ATCAOSM+72
ATCZFSVT EQU   ATCAOSM+68
ATCAP64  EQU   ATCAOSM+64
ATCAP63  EQU   ATCAOSM+60
ATCAP61  EQU   ATCAOSM+56
ATCAP58  EQU   ATCAOSM+52
ATCAP57  EQU   ATCAOSM+48
ATCAP54  EQU   ATCAOSM+44
ATCAP53  EQU   ATCAOSM+40
ATCAP52  EQU   ATCAOSM+36
ATCAP34  EQU   ATCAOSM+32
ATCAP32  EQU   ATCAOSM+28
ATCAP31  EQU   ATCAOSM+24
ATCAP12  EQU   ATCAOSM+20
ATCAP11  EQU   ATCAOSM+16
ATCCMTCB EQU   ATCAOSM+12
ATCPRPH  EQU   ATCAOSM+8
ATCGSRBF EQU   ATCGSRBG
ATCSRBRT EQU   ATCAOSM
@NM00066 EQU   @NM00065
ATCVTMAB EQU   @NM00065
@NM00064 EQU   ATCVTBAM
ATCVDLOK EQU   ISTATCVT+904
ATCVFPAB EQU   ISTATCVT+872
ATCVDPAB EQU   ISTATCVT+840
ATCIOECB EQU   ISTATCVT+836
ATCINCW3 EQU   ISTATCVT+832
ATCMODTB EQU   ISTATCVT+828
ATCUSSPT EQU   ISTATCVT+824
@NM00063 EQU   ISTATCVT+819
@NM00062 EQU   ATCSTAT2
ATCTRSMS EQU   ATCSTAT2
ATCTRLOK EQU   ATCSTAT2
ATCTRPSS EQU   ATCSTAT2
ATCTRESC EQU   ATCSTAT2
ATCTRAPI EQU   ATCSTAT2
ATCNMCTR EQU   ISTATCVT+816
ATCSEC51 EQU   ATCSECST
ATCSEC40 EQU   ATCSIPD+8
ATCSEC30 EQU   ATCSIPD+4
ATCSEC21 EQU   ATCSIPD
ATCSEC10 EQU   ATCSOPD+4
ATCSEC01 EQU   ATCSOPD
ATCPOIA  EQU   ATCRNO+1
@NM00061 EQU   ATCRNO
ATCPODVT EQU   ISTATCVT+784
ATCS49XL EQU   ISTATCVT+780
ATCS49XI EQU   ISTATCVT+776
ATCLCLCT EQU   ATCVLCNT+2
ATCRNCNT EQU   ATCVLCNT
ATCCFEAD EQU   ISTATCVT+768
ATCPTR00 EQU   ISTATCVT+736
ATCRSV10 EQU   ISTATCVT+704
ATCTACB  EQU   ISTATCVT+700
ATCVTINM EQU   ISTATCVT+696
ATCTCLIM EQU   ISTATCVT+692
ATCTCLOM EQU   ISTATCVT+688
ATCVTIPB EQU   ISTATCVT+656
ATCTCIPB EQU   ISTATCVT+624
ATCTIPAB EQU   ISTATCVT+592
ATCOCCCB EQU   ISTATCVT+588
ATCOCCOB EQU   ISTATCVT+584
ATCCDLAD EQU   ISTATCVT+580
ATCCCLAD EQU   ISTATCVT+576
ATCDLRPB EQU   ISTATCVT+544
ATCPGPAB EQU   ISTATCVT+512
ATCVPAB1 EQU   ISTATCVT+480
ATCRSV97 EQU   ISTATCVT+476
ATCCDFDN EQU   ISTATCVT+464
ATCCDFIN EQU   ISTATCVT+460
ATCDVTLK EQU   ISTATCVT+456
ATCAP33  EQU   ISTATCVT+444
ATCRSV99 EQU   ISTATCVT+440
ATCONFIG EQU   ISTATCVT+432
ATCNODDS EQU   ISTATCVT+428
ATCNODEL EQU   ISTATCVT+420
ATCRSV69 EQU   ISTATCVT+416
ATCAPCR5 EQU   ISTATCVT+412
ATCLDECB EQU   ISTATCVT+408
ATCLDNCS EQU   ISTATCVT+404
ATCCDPTR EQU   ISTATCVT+400
ATCADEL  EQU   ISTATCVT+396
ATCTODVT EQU   ISTATCVT+392
ATCDEBCH EQU   ISTATCVT+388
ATCHBSIZ EQU   ATCHPGM+2
ATCHBFNO EQU   ATCHPGM
ATCCRME  EQU   ISTATCVT+380
ATCRVCHS EQU   ISTATCVT+372
ATCECTLP EQU   ISTATCVT+368
ATCZDVTB EQU   ISTATCVT+364
ATCECPRT EQU   ISTATCVT+360
ATCVTLOD EQU   ISTATCVT+356
ATCTRPAB EQU   ISTATCVT+352
ATCMSGM  EQU   ISTATCVT+348
ATCMSGP  EQU   ISTATCVT+344
ATCEPT   EQU   ISTATCVT+340
ATCDVT   EQU   ISTATCVT+336
ATCTRCPT EQU   ISTATCVT+332
ATCDVLOD EQU   ISTATCVT+328
ATCALERT EQU   ISTATCVT+324
ATCEPA   EQU   ISTATCVT+320
ATCSAF   EQU   ISTATCVT+318
ATCXRANG EQU   ISTATCVT+317
ATCLAST  EQU   ATCSHRFG
ATCSHRTN EQU   ISTATCVT+308
ATCUEP   EQU   ISTATCVT+304
ATCOCRT  EQU   ISTATCVT+300
ATCCSMA  EQU   ATCCSMR
ATCESC02 EQU   ISTATCVT+292
ATCESC01 EQU   ISTATCVT+288
ATCCDFND EQU   ISTATCVT+284
ATCCDDEL EQU   ISTATCVT+280
ATCCDADD EQU   ISTATCVT+276
ATCMNT   EQU   ISTATCVT+272
ATCRSV16 EQU   ISTATCVT+270
ATCMAXID EQU   ISTATCVT+269
ATCMSGSP EQU   ATCCOM+268
ATCCIDM  EQU   ATCCOM+266
ATCACTRM EQU   ATCCOM+264
ATCNERAP EQU   ATCCOM+260
ATCNESAL EQU   ATCCOM+256
ATCRCC65 EQU   ATCCOM+252
ATCRCC26 EQU   ATCCOM+248
ATCRCC63 EQU   ATCCOM+244
ATCRSV11 EQU   ATCCOM+242
ATCVTMID EQU   ATCCOM+240
ATCAPOST EQU   ATCCOM+236
ATCNERFN EQU   ATCCOM+232
ATCNERNE EQU   ATCCOM+228
ATCNERCV EQU   ATCCOM+224
ATCNERST EQU   ATCCOM+220
ATCDCC61 EQU   ATCCOM+216
ATCDCC60 EQU   ATCCOM+212
ATCSRTAD EQU   ATCCOM+204
ATCFIRA  EQU   ATCCOM+200
ATCSMBQ  EQU   ATCCOM+196
ATCSMRC  EQU   ATCCOM+192
ATCSMRS  EQU   ATCCOM+188
ATCSMQU  EQU   ATCCOM+184
ATCSMRQ  EQU   ATCCOM+180
ATCACDA  EQU   ATCCOM+176
ATCSTMA  EQU   ATCCOM+172
ATCFRSTR EQU   ATCCOM+168
ATCREADA EQU   ATCCOM+160
ATCALOAD EQU   ATCCOM+156
ATCBLDLA EQU   ATCCOM+152
ATCFBRPH EQU   ATCCOM+148
ATCBFTRC EQU   ATCCOM+144
ATCTPBUF EQU   ATCTHTRC
ATCREMOV EQU   ATCCOM+136
ATCADD   EQU   ATCCOM+132
ATCBPDA  EQU   ATCCOM+128
ATCDVTPT EQU   ATCCOM+124
ATCFEPT  EQU   ATCCOM+120
ATCFDVT  EQU   ATCCOM+116
ATCCONFT EQU   ATCCOM+112
ATCPTCHA EQU   ATCCOM+108
ATCAUTHA EQU   ATCCOM+104
ATCACCTA EQU   ATCCOM+100
ATCRDTH  EQU   ATCCOM+96
ATCFRSCH EQU   ATCCOM+92
ATCFSB   EQU   ATCCOM+88
ATCHLTMS EQU   ATCCOM+84
ATCECPRM EQU   ATCCOM+80
ATCECNET EQU   ATCCOM+76
ATCECOPC EQU   ATCCOM+72
ATCVPARM EQU   ATCCOM+68
ATCECVRQ EQU   ATCCOM+64
ATCECSES EQU   ATCCOM+60
ATCOCHA  EQU   ATCCOM+56
ATCDSPLQ EQU   ATCCOM+52
ATCECDSP EQU   ATCCOM+48
ATCVARYQ EQU   ATCCOM+44
ATCECVRY EQU   ATCCOM+40
ATCHALTQ EQU   ATCCOM+36
ATCECHLT EQU   ATCCOM+32
ATCMODQ  EQU   ATCCOM+28
ATCECMOD EQU   ATCCOM+24
ATCASCHD EQU   ATCCOM+20
ATCSRT   EQU   ATCCOM+16
ATCRDT   EQU   ATCCOM+12
ATCDCFRR EQU   ATCCOM+8
ATCAPI   EQU   ATCCOM+4
ATCRSV04 EQU   ATCSTAT4
ATCVTTRC EQU   ATCSTAT4
ATCNCSD  EQU   ATCSTAT4
ATCMTST  EQU   ATCSTAT4
ATCTPRT  EQU   ATCSTAT4
ATCPRTAT EQU   ATCSTAT4
@NM00060 EQU   ATCPOFLG
ATCPOUNS EQU   ATCPOFLG
ATCHSDMF EQU   ATCSTFLG
@NM00059 EQU   ATCSTAT1
ATCMDHLT EQU   ATCSTAT1
ATCINHLT EQU   ATCSTAT1
ATCNETSL EQU   ATCSTAT1
ATCACTIV EQU   ATCSTAT1
ATCSTART EQU   ATCSTAT1
RPHNEXPO EQU   ISTRPH+104
RPHSAV16 EQU   RPHWORK+60
RPHSAV15 EQU   RPHWORK+56
RPHSAV14 EQU   RPHWORK+52
RPHSAV13 EQU   RPHWORK+48
RPHSAV12 EQU   RPHWORK+44
RPHSAV11 EQU   RPHWORK+40
RPHSAV10 EQU   RPHWORK+36
RPHSAVE9 EQU   RPHWORK+32
RPHSAVE8 EQU   RPHWORK+28
RPHSAVE7 EQU   RPHWORK+24
RPHSAVE6 EQU   RPHWORK+20
RPHSAVE5 EQU   RPHWORK+16
RPHSAVE4 EQU   RPHWORK+12
RPHSAVE3 EQU   RPHWORK+8
RPHSAVE2 EQU   RPHWORK+4
RPHSHALF EQU   RPHSAVE1+2
RPHSBIT8 EQU   RPHSBITS
RPHSBIT7 EQU   RPHSBITS
RPHSBIT6 EQU   RPHSBITS
RPHSBIT5 EQU   RPHSBITS
RPHSBIT4 EQU   RPHSBITS
RPHSBIT3 EQU   RPHSBITS
RPHSBIT2 EQU   RPHSBITS
RPHSBIT1 EQU   RPHSBITS
RPHSBYTE EQU   RPHSAVE1
RPHPABQP EQU   RPHPABQA+1
RPHPABFG EQU   RPHPABQA
RPHSRP34 EQU   RPHSRPRM+2
RPHSRP12 EQU   RPHSRPRM
RPHWEGT  EQU   RPHCSPA
RPHMAJCB EQU   ISTRPH+21
RPHPABOF EQU   ISTRPH+20
RPHRESUM EQU   RPHRESMA+1
RPHRSV01 EQU   RPHWPFLG
RPHPURGE EQU   RPHWPFLG
RPHPT    EQU   RPHWPFLG
RPHWT    EQU   RPHWPFLG
RPHRSKEY EQU   RPHWPFLG
RPHDVTA  EQU   ISTRPH+12
RPHTIK   EQU   RPHTSKID+3
@NM00058 EQU   RPHTSKID
RPHRPHAP EQU   RPHRPHA+1
@NM00057 EQU   RPHRPHA
RPHGATE  EQU   RPHRPHA
@NM00056 EQU   RPHFLGB
RPHRLCRA EQU   RPHFLGB
RPHNRSAV EQU   RPHFLGB
RPHPGCMP EQU   RPHFLGB
RPHFBAPS EQU   RPHFLGB
RPHBSSP  EQU   RPHFLGB
RPHLOCK  EQU   RPHFLGB
RPHFNFLG EQU   RPHFSTLC
RPHMLTCP EQU   RPHFLAGS
RPHSMCLR EQU   RPHFLAGS
RPHSMTYP EQU   RPHFLAGS
RPHSMQ   EQU   RPHFLAGS
RPHAUTEX EQU   RPHAPTYP
RPHSPGIN EQU   RPHFLAGS
RPHOGIND EQU   RPHFLAGS
RPHLNGTH EQU   RPHCNTL+1
RPHTYPE  EQU   RPHCNTL
LOKXCL   EQU   @NM00054
LOKPRY   EQU   @NM00054
@NM00055 EQU   @NM00054
@NM00053 EQU   LOKCHNG
LOKCT    EQU   ISTLOK
DYPPAB   EQU   ISTDYPAB+16
DYPRSV01 EQU   ISTDYPAB+12
DYPTSKID EQU   ISTDYPAB+8
DYPCHAIN EQU   ISTDYPAB+4
DYPFLGS  EQU   ISTDYPAB+2
DYPLNGTH EQU   ISTDYPAB+1
DYPTYPE  EQU   ISTDYPAB
PABRPHA  EQU   PABRPHFG+1
PABNODQ  EQU   PABFLAGS
PABINHBT EQU   PABFLAGS
PABERLOK EQU   PABERRLK
PABSSN   EQU   PABFLAGS
PABDYNAM EQU   PABFLAGS
PABNORPR EQU   PABFLAGS
PABPRIOR EQU   PABFLAGS
PABAPYP  EQU   PABFLAGS
PABDVTA  EQU   ISTPAB+9
PABOFFST EQU   ISTPAB+8
PABCHNGP EQU   PABCHAIN+1
PABRSV02 EQU   PABCHAIN
PABDELAY EQU   PABCHAIN
PABRUNNG EQU   PABCHAIN
PABRESET EQU   PABCHAIN
PABUNCON EQU   PABCHAIN
PABCDP   EQU   PABCHAIN
PABRESCH EQU   PABCHAIN
PABCHNG  EQU   PABCHAIN
PABWEQP  EQU   PABWEQA+1
PABRSV01 EQU   PABWEQA
PABWEQG  EQU   PABWEQA
DEVRSV03 EQU   ISTDEVCH+5
DEVPHYSA EQU   ISTDEVCH+4
DEVCSLPN EQU   DEVCHAR3
DEVCSTCL EQU   DEVCHAR3
DEVCCHEK EQU   DEVCHAR3
DEVCATTN EQU   DEVCHAR3
DEVCSWL  EQU   DEVFCCTL
DEVCRVB  EQU   DEVFCCTL
DEVCSSL  EQU   DEVFCCTL
DEVCBSC  EQU   DEVFCCTL
DEVMCODE EQU   ISTDEVCH+2
DEVCHAR2 EQU   DEVTCODE
DEVRSV01 EQU   DEVCHAR
DEVCCTL  EQU   DEVCHAR
DEVNNSPT EQU   DEVCHAR
DEVSPS   EQU   DEVCHAR
DEVSUBND EQU   DEVCHAR
DEVCONVR EQU   DEVCHAR
DEVOTPUT EQU   DEVCHAR
DEVINPUT EQU   DEVCHAR
RPLSEQNO EQU   RPLOF60+6
@NM00052 EQU   RPLIBSQ
RPLIINV  EQU   RPLIBSQ
RPLINEG  EQU   RPLIBSQ
RPLIPOS  EQU   RPLIBSQ
RPLIIGN  EQU   RPLIBSQ
RPLIRSET EQU   RPLIBSQ
RPLITST  EQU   RPLIBSQ
RPLISET  EQU   RPLIBSQ
@NM00051 EQU   RPLOBSQ
RPLOINV  EQU   RPLOBSQ
RPLONEG  EQU   RPLOBSQ
RPLOPOS  EQU   RPLOBSQ
RPLOIGN  EQU   RPLOBSQ
RPLORSET EQU   RPLOBSQ
RPLOTST  EQU   RPLOBSQ
RPLOSET  EQU   RPLOBSQ
RPLIBSQV EQU   RPLOF60+2
RPLOBSQV EQU   RPLOF60
@NM00050 EQU   RPLCNTSC
RPLRSHUT EQU   RPLCNTSC
RPLRQR   EQU   RPLCNTSC
RPLSHUTC EQU   RPLCNTSC
RPLSHUTD EQU   RPLCNTSC
RPLSTSN  EQU   RPLCNTSC
RPLCLEAR EQU   RPLCNTSC
RPLSDT   EQU   RPLCNTSC
@NM00049 EQU   RPLCNTDC
RPLSIGNL EQU   RPLCNTDC
RPLLUS   EQU   RPLCNTDC
RPLRTR   EQU   RPLCNTDC
RPLBID   EQU   RPLCNTDC
@NM00048 EQU   RPLCNTDF
RPLQI    EQU   RPLCNTDF
RPLRELQ  EQU   RPLCNTDF
RPLCHASE EQU   RPLCNTDF
RPLQEC   EQU   RPLCNTDF
RPLQC    EQU   RPLCNTDF
RPLCNCEL EQU   RPLCNTDF
RPLDATA  EQU   RPLCNTDF
RPLRRN   EQU   RPLRESP
RPLNFME  EQU   RPLRESP
RPLEX    EQU   RPLRESP
@NM00047 EQU   RPLRESP
@NM00046 EQU   RPLPOSTV
RPLSCHED EQU   RPLPOSTV
@NM00045 EQU   RPLVTFL1
RPLAUTUS EQU   RPLVTFL1
@NM00044 EQU   RPLVTFL1
@NM00043 EQU   RPLCHN
RPLONLY  EQU   RPLCHN
RPLLAST  EQU   RPLCHN
RPLMIDLE EQU   RPLCHN
RPLFIRST EQU   RPLCHN
@NM00042 EQU   RPLRTYPE
RPLDFASY EQU   RPLRTYPE
RPLNFSYN EQU   RPLRTYPE
RPLRRESP EQU   RPLRTYPE
@NM00041 EQU   RPLSTYPE
RPLSRESP EQU   RPLSTYPE
@NM00040 EQU   RPLRH3
RPLCSI   EQU   RPLRH3
RPLCHREQ EQU   RPLRH3
RPLCMD   EQU   RPLRH3
RPLEB    EQU   RPLRH3
RPLBB    EQU   RPLRH3
RPLSIGDA EQU   RPLVTEXT+32
RPLSAV13 EQU   RPLVTEXT+28
RPLUSNSO EQU   RPLOSENS+2
RPLSSMO  EQU   RPLSSNSO+1
@NM00039 EQU   RPLSSEO
RPLRRO   EQU   RPLSSEO
RPLFIO   EQU   RPLSSEO
RPLSTATO EQU   RPLSSEO
RPLCPMO  EQU   RPLSSEO
@NM00038 EQU   RPLSSEO
RPLFMHDR EQU   RPLOPT12
@NM00037 EQU   RPLOPT12
@NM00036 EQU   RPLOPT12
@NM00035 EQU   RPLOPT12
RPLNIBTK EQU   RPLOPT12
RPLTRUNC EQU   RPLOPT12
RPLKEEP  EQU   RPLOPT12
@NM00034 EQU   RPLOPT12
RPLRSVE8 EQU   RPLOPT11
RPLRSVE7 EQU   RPLOPT11
RPLRSVE6 EQU   RPLOPT11
RPLRSVE5 EQU   RPLOPT11
RPLRSVE4 EQU   RPLOPT11
RPLSTOP  EQU   RPLOPT11
RPLSTART EQU   RPLOPT11
RPLQUIES EQU   RPLOPT11
RPLRSVI6 EQU   RPLOPT10
RPLRSVI5 EQU   RPLOPT10
RPLRSVI4 EQU   RPLOPT10
RPLRSVI3 EQU   RPLOPT10
RPLRSVI2 EQU   RPLOPT10
RPLSPARM EQU   RPLOPT10
RPLDSPLY EQU   RPLOPT10
RPLBSCID EQU   RPLOPT10
RPLTOPL  EQU   RPLOPT9
RPLCIDE  EQU   RPLOPT9
RPLRNNM  EQU   RPLOPT9
RPLAPPST EQU   RPLOPT9
RPLCOUNT EQU   RPLOPT9
RPLTERMS EQU   RPLOPT9
RPLDEVCH EQU   RPLOPT9
RPLLOGON EQU   RPLOPT9
RPLUSFLD EQU   RPLVTEXT+16
RPLESR2  EQU   RPLUSNSI+1
RPLESR1  EQU   RPLUSNSI
RPLSSMI  EQU   RPLDSB2
@NM00033 EQU   RPLSSEI
RPLRRI   EQU   RPLSSEI
RPLFII   EQU   RPLSSEI
RPLSTATI EQU   RPLSSEI
RPLCPMI  EQU   RPLSSEI
RPLPATHI EQU   RPLSSEI
RPLARCLN EQU   RPLVTEXT+8
RPLAARLN EQU   RPLVTEXT+4
RPLAAREA EQU   RPLVTEXT
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00032 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00031 EQU   RPLRBAR+3
@NM00030 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00029 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLCHAIN EQU   RPLNXTRP
RPLBOP   EQU   RPLOPT4
@NM00028 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00027 EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLDACB  EQU   RPLCOMN+24
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00026 EQU   CVTFIX+248
@NM00025 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTSHSB  EQU   CVTSHS
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00024 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00023 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00022 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00021 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSARV063 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00020 EQU   FLCFSA
@NM00019 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00018 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00017 EQU   FLCIOA
@NM00016 EQU   FLCMCLA+15
@NM00015 EQU   FLCMCLA+14
@NM00014 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00013 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00012 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00011 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00010 EQU   FLCPER
@NM00009 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00008 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00007 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00006 EQU   FLCPIILC
@NM00005 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00004 EQU   FLCSVILC
@NM00003 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00002 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00001 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00527 EQU   @RC00511
@RT00559 EQU   @RC00558
@RC00628 EQU   @RC00627
@RT00649 EQU   @RC00643
@RC00700 EQU   @RC00691
@RC00851 EQU   @RC00850
@RC00880 EQU   @RC00879
@RC00946 EQU   @RC00917
@RC00971 EQU   @RC00956
@RC01133 EQU   @RC01115
@PB00017 EQU   @PB00018
@RF00536 EQU   @RC00527
@RC00530 EQU   @RC00527
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00006 EQU   @PB00012
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@RC00380 EQU   @PB00002
@ENDDATA EQU   *
         END   ISTOCCOD,(C'PLS2254',0603,78016)
