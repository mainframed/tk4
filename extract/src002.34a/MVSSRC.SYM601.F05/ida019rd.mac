         TITLE 'IDA019RD--AM/0 DD DUMMY PROCESSING                   '
IDA019RD CSECT ,                                                   0001
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
*   RPLERREG='00'X;                 /* SET BO ERROR CODE             */
*                                                                  0068
         MVI   RPLERREG(RRPL),X'00'                                0068
*/*  IF THE REQUEST IS A GET, INDICATE END-OF DATA.                  */
*                                                                  0069
*   IF RWORK0=0                     /* ANY GET (SEQUENTIAL OR        */
*     THEN                          /* DIRECT) CAUSES EOD            */
         LTR   RWORK0,RWORK0                                       0069
         BNZ   @RF00069                                            0069
*     DO;                                                          0070
*       RPLERRCD=RPLEODER;          /* SET END-OF-DATA CODE          */
*                                                                  0071
         MVI   RPLERRCD(RRPL),X'04'                                0071
*       /*************************************************************/
*       /*                                                           */
*       /* IF THE GET IS ASYNCHRONOUS, GIVE ERROR ON THE CHECK.      */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0072
*       IF RPLASY=ON                /* IF ASYNCHRONOUS GET,          */
*         THEN                                                     0072
         TM    RPLASY(RRPL),B'00001000'                            0072
         BNO   @RF00072                                            0072
*         RETURN CODE(ZERO);        /* RETURN WITHOUT ERROR.         */
         SR    @15,@15                                             0073
         L     @14,12(,@13)                                        0073
         LM    @00,@12,20(@13)                                     0073
         BR    @14                                                 0073
*     END;                          /* END OF GET CODE               */
@RF00072 DS    0H                                                  0075
*   ELSE                            /* HERE IF NOT A GET             */
*                                                                  0075
*     /***************************************************************/
*     /*                                                             */
*     /* IF NOT A CHECK FOLLOWING AN ASYNCHRONOUS GET, EXIT WITHOUT  */
*     /* ANY ERROR INDICATED.                                        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0075
*     IF RWORK0^=2×                 /* IF NOT A CHECK OR IF NO       */
*         RPLERRCD^=RPLEODER        /* GET PRECEDING, NO END         */
*       THEN                        /* OF DATA IS INDICATED.         */
         B     @RC00069                                            0075
@RF00069 CL    RWORK0,@CF00125                                     0075
         BNE   @RT00075                                            0075
         CLI   RPLERRCD(RRPL),4                                    0075
         BE    @RF00075                                            0075
@RT00075 DS    0H                                                  0076
*       DO;                                                        0076
*         RPLERRCD='00'X;           /* INDICATE NO ERROR             */
         MVI   RPLERRCD(RRPL),X'00'                                0077
*         RETURN CODE(ZERO);        /* RETURN TO CALLER              */
         SR    @15,@15                                             0078
         L     @14,12(,@13)                                        0078
         LM    @00,@12,20(@13)                                     0078
         BR    @14                                                 0078
*       END;                        /* END OF NORMAL REQUEST         */
*                                                                  0079
*/*  IF SYNCHRONOUS GET OR A CHECK AFTER AN ASYNCHRONOUS GET, TAKE 0080
*    THE EODAD EXIT.  IF NO EODAD IS PRESENT, TAKE THE LERAD EXIT.   */
*                                                                  0080
*   RFY                                                            0080
*    (R13,                                                         0080
*     R15)RSTD;                     /* GET SAVEAREA/LINKAGE REGS     */
@RF00075 DS    0H                                                  0080
@RC00069 DS    0H                                                  0081
*   IF ACBUEL<=ONE×                 /* IF THERE ARE NO EXITS         */
*       EXLLEN<10×                  /* OR EOD NOT HERE               */
*       EXLEODF(2)=OFF              /* OR IF INACTIVE                */
*     THEN                                                         0081
         L     @14,RPLDACB(,RRPL)                                  0081
         L     @14,ACBUEL(,@14)                                    0081
         CH    @14,@CH00052                                        0081
         BNH   @RT00081                                            0081
         LH    @10,EXLLEN(,@14)                                    0081
         CH    @10,@CH00291                                        0081
         BL    @RT00081                                            0081
         TM    EXLEODF(@14),B'01000000'                            0081
         BNZ   @RF00081                                            0081
@RT00081 DS    0H                                                  0082
*     RPLERREG='08'X;               /* THEN SET LOGICAL ERROR        */
         MVI   RPLERREG(RRPL),X'08'                                0082
*   ELSE                                                           0083
*     RPLERREG='00'X;               /* HERE NO LOGICAL ERROR         */
         B     @RC00081                                            0083
@RF00081 MVI   RPLERREG(RRPL),X'00'                                0083
*   IF RPLERREG^='00'X              /* SEE IF ERROR                  */
*     THEN                          /* IF SO, TEST LERAD             */
@RC00081 CLI   RPLERREG(RRPL),0                                    0084
         BE    @RF00084                                            0084
*     DO;                                                          0085
*       IF ACBUEL>ONE&              /* SEE IF EXIT LIST              */
*           EXLLEN>=20&             /* WITH LERAD                    */
*           EXLLERF(2)=ON           /*                               */
*         THEN                      /* THEN CALL IT                  */
         L     @14,RPLDACB(,RRPL)                                  0086
         L     @14,ACBUEL(,@14)                                    0086
         CH    @14,@CH00052                                        0086
         BNH   @RF00086                                            0086
         LH    @10,EXLLEN(,@14)                                    0086
         CH    @10,@CH00197                                        0086
         BL    @RF00086                                            0086
         TM    EXLLERF(@14),B'01000000'                            0086
         BNO   @RF00086                                            0086
*         DO;                                                      0087
*           RPLPLHPT=R13;           /* SAVE REG 13                   */
         ST    R13,RPLPLHPT(,RRPL)                                 0088
*           R15=EXLLERP;            /* POINT TO LERAD                */
         L     R15,EXLLERP(,@14)                                   0089
*           IF EXLLERF(3)=ON        /* SEE IF LINK                   */
*             THEN                  /* YES, COME HERE                */
         TM    EXLLERF(@14),B'00100000'                            0090
         BNO   @RF00090                                            0090
*             DO;                                                  0091
*               GEN(LOAD  EPLOC=(R15));/* LOAD LERAD ROUTINE         */
         LOAD  EPLOC=(R15)
*               R15=RWORK0;         /* GET ADDR INTO R15             */
         LR    R15,RWORK0                                          0093
*             END;                  /* END OF LOAD CODE              */
*           GEN(LM  RPLH,RPARM1,TWENTY8(R13));/* GET USER REGS       */
*                                                                  0095
@RF00090 DS    0H                                                  0095
         LM  RPLH,RPARM1,TWENTY8(R13)
*           /*********************************************************/
*           /*                                                       */
*           /* TAKE LERAD EXIT                                       */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0096
*           DO;                     /* IDACALL(LERAD)****************
*                                      *************************     */
*             RESPECIFY                                            0097
*              (RWORK1,                                            0097
*               RWORK2,                                            0097
*               RWORK3,                                            0097
*               RWORK4,                                            0097
*               RWORK5,                                            0097
*               R10)RSTD;           /*                               */
*             CALL LERAD;           /*                               */
         BALR  @14,@15                                             0098
*             GEN(BALR @11,0);                                     0099
         BALR @11,0
*             GEN(LA @14,*-@PSTART);                               0100
         LA @14,*-@PSTART
*             GEN(SR @11,@14);      /*                               */
         SR @11,@14
*             RESPECIFY                                            0102
*              (RWORK1,                                            0102
*               RWORK2,                                            0102
*               RWORK3,                                            0102
*               RWORK4,                                            0102
*               RWORK5,                                            0102
*               R10)UNRSTD;         /*                               */
*           END;                    /* IDACALL(LERAD)****************
*                                      *************************     */
*           IF EXLLERF(3)=ON        /* IF LERAD ROUTINE WAS          */
*             THEN                  /* LOADED, IT MUST ALSO          */
         L     @14,RPLDACB(,RRPL)                                  0104
         L     @14,ACBUEL(,@14)                                    0104
         TM    EXLLERF(@14),B'00100000'                            0104
         BNO   @RF00104                                            0104
*             DO;                   /* BE DELETED                    */
*               RFY                                                0106
*                 RWORK1 RSTD;      /* GET WORK REGISTER             */
*               RWORK1=R1;          /* SAVE REGISTER 1               */
         LR    RWORK1,R1                                           0107
*               R15=EXLLERP;        /* POINT TO LERAD NAME           */
         L     R15,EXLLERP(,@14)                                   0108
*               GEN(DELETE EPLOC=(R15));/* DELETE LERAD ROUTINE      */
         DELETE EPLOC=(R15)
*               R1=RWORK1;          /* RESTORE REGISTER 1            */
         LR    R1,RWORK1                                           0110
*             END;                  /* END OF DELETE CODE            */
*           R13=RPLPLHPT;           /* RESTORE REG 13                */
@RF00104 L     R13,RPLPLHPT(,RRPL)                                 0112
*         END;                      /* END, LERAD EXIT               */
*     END;                          /* END, LOGICAL ERROR            */
@RF00086 DS    0H                                                  0115
*   ELSE                            /* HERE FOR EOD ENTRY            */
*     DO;                                                          0115
         B     @RC00084                                            0115
@RF00084 DS    0H                                                  0116
*       RPLPLHPT=R13;               /* SAVE REG 13                   */
         ST    R13,RPLPLHPT(,RRPL)                                 0116
*       R15=EXLEODP;                /* POINT TO EODAD ROUTINE        */
         L     @10,RPLDACB(,RRPL)                                  0117
         L     @10,ACBUEL(,@10)                                    0117
         L     R15,EXLEODP(,@10)                                   0117
*       IF EXLEODF(3)=ON            /* SEE IF LINK                   */
*         THEN                      /* IF SO, COME HERE              */
         TM    EXLEODF(@10),B'00100000'                            0118
         BNO   @RF00118                                            0118
*         DO;                                                      0119
*           GEN(LOAD  EPLOC=(R15)); /* LOAD EODAD ROUTINE            */
         LOAD  EPLOC=(R15)
*           R15=RWORK0;             /* GET EODAD ADDR IN R15         */
         LR    R15,RWORK0                                          0121
*         END;                      /* END OF LOAD CODE              */
*       GEN(LM RPLH,RPARM1,TWENTY8(R13));/* GET USER REGS            */
*                                                                  0123
@RF00118 DS    0H                                                  0123
         LM RPLH,RPARM1,TWENTY8(R13)
*       /*************************************************************/
*       /*                                                           */
*       /* TAKE EODAD EXIT                                           */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0124
*       DO;                         /* IDACALL(EODAD)****************
*                                      *************************     */
*         RESPECIFY                                                0125
*          (RWORK1,                                                0125
*           RWORK2,                                                0125
*           RWORK3,                                                0125
*           RWORK4,                                                0125
*           RWORK5,                                                0125
*           R10)RSTD;               /*                               */
*         CALL EODAD;               /*                               */
         BALR  @14,@15                                             0126
*         GEN(BALR @11,0);                                         0127
         BALR @11,0
*         GEN(LA @14,*-@PSTART);                                   0128
         LA @14,*-@PSTART
*         GEN(SR @11,@14);          /*                               */
         SR @11,@14
*         RESPECIFY                                                0130
*          (RWORK1,                                                0130
*           RWORK2,                                                0130
*           RWORK3,                                                0130
*           RWORK4,                                                0130
*           RWORK5,                                                0130
*           R10)UNRSTD;             /*                               */
*       END;                        /* IDACALL(EODAD)****************
*                                      *************************     */
*       IF EXLEODF(3)=ON            /* IF EODAD ROUTINE WAS          */
*         THEN                      /* LOADED, IT MUST ALSO          */
         L     @14,RPLDACB(,RRPL)                                  0132
         L     @14,ACBUEL(,@14)                                    0132
         TM    EXLEODF(@14),B'00100000'                            0132
         BNO   @RF00132                                            0132
*         DO;                       /* BE DELETED                    */
*           RFY                                                    0134
*             RWORK1 RSTD;          /* GET WORK REGISTER             */
*           RWORK1=R1;              /* SAVE REGISTER ONE             */
         LR    RWORK1,R1                                           0135
*           R15=EXLEODP;            /* POINT TO EODAD NAME           */
         L     R15,EXLEODP(,@14)                                   0136
*           GEN(DELETE EPLOC=(R15));/* DELETE EODAD ROUTINE          */
         DELETE EPLOC=(R15)
*           R1=RWORK1;              /* RESTORE REGISTER ONE          */
         LR    R1,RWORK1                                           0138
*         END;                      /* END OF DELETE CODE            */
*       R13=RPLPLHPT;               /* RESTORE REG 13                */
@RF00132 L     R13,RPLPLHPT(,RRPL)                                 0140
*     END;                          /* END OF EODAD EXIT             */
*   RETURN CODE(RPLERREG);          /* EXIT WITH RETURN CODE         */
@RC00084 SR    @15,@15                                             0142
         IC    @15,RPLERREG(,RRPL)                                 0142
         L     @14,12(,@13)                                        0142
         LM    @00,@12,20(@13)                                     0142
         BR    @14                                                 0142
*   GEN(IDAPATCH);                  /* DEFINE A PATCH AREA           */
         IDAPATCH
*   END IDA019RD                    /* END OF DD DUMMY ROUTINE       */
*                                                                  0144
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IFGRPLVT)                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IFGACBVT)                                       */
*/*%INCLUDE SYSLIB  (IFGEXLST)                                       */
*/*%INCLUDE SYSLIB  (IFGEXLVT)                                       */
*                                                                  0144
*       ;                                                          0144
@EL00001 DS    0H                                                  0144
@EF00001 DS    0H                                                  0144
@ER00001 LM    @14,@12,12(@13)                                     0144
         BR    @14                                                 0144
@DATA    DS    0H
@CH00052 DC    H'1'
@CH00291 DC    H'10'
@CH00197 DC    H'20'
@DATD    DSECT
         DS    0F
IDA019RD CSECT
         DS    0F
@CF00125 DC    F'2'
@DATD    DSECT
         DS    0D
IDA019RD CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
HWORD4   DC    H'4'
@DATD    DSECT
TWENTY8  EQU   28                       SAVEAREA OFFSET
@DATD    DSECT
@ENDDATD EQU   *
IDA019RD CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RWORK0   EQU   @00
RRPL     EQU   @01
R1       EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
R10      EQU   @10
RPARM1   EQU   @12
R13      EQU   @13
R15      EQU   @15
R11      EQU   @11
R14      EQU   @14
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLPLHPT EQU   RPLCOMN+4
RPLECB   EQU   RPLCOMN+8
RPLFDBK  EQU   RPLCOMN+13
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLERRCD EQU   RPLCNDCD+1
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLASY   EQU   RPLOPT1
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPL6RBA  EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBIXLST EQU   ACBAMBL
ACBJWA   EQU   ACBIXLST
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBLFB   EQU   ACBCOMN+20
ACBBUFPL EQU   ACBLFB
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBUEL   EQU   ACBEXLST
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBWAPTR EQU   ACBUJFCB
IFGEXLST EQU   0
EXLCOMN  EQU   IFGEXLST
EXLLEN   EQU   EXLCOMN+2
EXLEODF  EQU   EXLCOMN+5
EXLEODP  EQU   EXLCOMN+6
EXLSYNF  EQU   EXLCOMN+10
EXLLERF  EQU   EXLCOMN+15
EXLLERP  EQU   EXLCOMN+16
@NM00016 EQU   EXLCOMN+20
EXLLGNF  EQU   EXLCOMN+25
EXLLGNE  EQU   EXLLGNF
EXLJRNF  EQU   EXLCOMN+30
EXLOPNF  EQU   EXLCOMN+35
IFGEXLEF EQU   0
EXLENTRY EQU   IFGEXLEF
EXLFLAG  EQU   EXLENTRY
EXLENFL  EQU   EXLFLAG
EXLEXITP EQU   EXLENTRY+1
LERAD    EQU   0
EODAD    EQU   0
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
EXLEADDR EQU   EXLEXITP
EXLEXITM EQU   EXLENFL
EXLLVNTM EQU   EXLENFL
EXLGVNTM EQU   EXLENFL
@NM00025 EQU   EXLENFL
EXLLNK   EQU   EXLENFL
EXLACTM  EQU   EXLENFL
EXLSPEC  EQU   EXLENFL
EXLOPNP  EQU   EXLCOMN+36
@NM00024 EQU   EXLOPNF
EXLOPNK  EQU   EXLOPNF
EXLOPNA  EQU   EXLOPNF
EXLOPNS  EQU   EXLOPNF
EXLJRNP  EQU   EXLCOMN+31
@NM00023 EQU   EXLJRNF
EXLJRNK  EQU   EXLJRNF
EXLJRNA  EQU   EXLJRNF
EXLJRNS  EQU   EXLJRNF
EXLLGNP  EQU   EXLCOMN+26
EXLLGNEX EQU   EXLLGNE
EXLLGNLE EQU   EXLLGNE
EXLLGNGE EQU   EXLLGNE
@NM00022 EQU   EXLLGNF
EXLLGNK  EQU   EXLLGNF
EXLLGNA  EQU   EXLLGNF
EXLLGNS  EQU   EXLLGNF
@NM00021 EQU   EXLCOMN+21
@NM00020 EQU   @NM00016
@NM00019 EQU   @NM00016
@NM00018 EQU   @NM00016
@NM00017 EQU   @NM00016
@NM00015 EQU   EXLLERF
EXLLERK  EQU   EXLLERF
EXLLERA  EQU   EXLLERF
EXLLERS  EQU   EXLLERF
EXLSYNP  EQU   EXLCOMN+11
@NM00014 EQU   EXLSYNF
EXLSYNK  EQU   EXLSYNF
EXLSYNA  EQU   EXLSYNF
EXLSYNS  EQU   EXLSYNF
@NM00013 EQU   EXLEODF
EXLEODK  EQU   EXLEODF
EXLEODA  EQU   EXLEODF
EXLEODS  EQU   EXLEODF
@NM00012 EQU   EXLCOMN+4
EXLLEN2  EQU   EXLLEN
EXLSTYP  EQU   EXLCOMN+1
EXLID    EQU   EXLCOMN
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBBLKSZ EQU   ACBCOMN+60
ACBBUFSP EQU   ACBCOMN+56
@NM00011 EQU   ACBWAPTR+1
ACBOPTN  EQU   ACBWAPTR
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00010 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00009 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00008 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBPASSW EQU   ACBCOMN+32
@NM00007 EQU   ACBCOMN+28
@NM00006 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00005 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00004 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
@NM00003 EQU   ACBBUFPL
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+14
@NM00002 EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
ACBCHN   EQU   ACBMACR2
ACBCBRD  EQU   ACBMACR2
ACBCBOPN EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
RPLGVNT  EQU   RPLEXTD1
RPLLVNT  EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPL6RBA+2
RPLS2S2  EQU   RPL6RBA
RPLS1S1  EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLRSV75 EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00001 EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLFDB3  EQU   RPLERRCD
RPLFDB2  EQU   RPLCMPON
RPLSTAT  EQU   RPLCOMN+12
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   IDA019RD,(C'PL/S-II',0402,73199)
