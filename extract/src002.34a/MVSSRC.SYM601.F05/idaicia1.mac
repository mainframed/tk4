         TITLE 'IDAICIA1 - MVM ISAM INTERFACE FORCE CLOSE EXECUTOR     *
                        '
IDAICIA1 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDAICIA1  78.102'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
*   IIRSAVE=R13;                    /* SAVE AREA ADDR SAVED          */
         ST    R13,IIRSAVE(,RCORE)                                 0170
*   RESPECIFY                                                      0171
*     R13 UNRESTRICTED;                                            0171
*   R3=DXUDCBAD;                    /* GET USER DCB ADDR             */
         L     R3,DXUDCBAD(,RCORE)                                 0172
*   DO;                             /* MODESET EXTKEY(DATAMGT)       */
*     SPKA(80);                     /* SET PSW KEY                   */
         LA    @15,80                                              0174
         SPKA  0(@15)                                              0174
*   END;                            /* MODESET EXTKEY(DATAMGT) GET 0175
*                                      INTO DATAMGT KEY              */
*   CALL AUDITVER;                  /* DETERMINES IF AUDIT VALID     */
         BAL   @14,AUDITVER                                        0176
*   DO;                             /* MODESET EXTKEY(ZERO)          */
*     SPKA(0);                      /* SET PSW KEY                   */
         SLR   @15,@15                                             0178
         SPKA  0(@15)                                              0178
*   END;                            /* MODESET EXTKEY(ZERO) KEY ZERO
*                                      FOR DUMP/RECORDING            */
*                                                                  0179
*   /*****************************************************************/
*   /*                                                               */
*   /* IF OPEN MODULE IDA0192I WAS IN CONTROL THEN PERFORM FORCE     */
*   /* CLOSE ON PARTIALLY OPENED DCB. THIS IS DETERMINED BY TESTING A*/
*   /* BIT SETTING IN FIELD DXATEXC1 IN THE OPEN/CLOSE WORK AREA AND */
*   /* IS SET BY MODULE IDA0192A PRIOR TO GIVING CONTROL TO EITHER   */
*   /* IDA0192I OR IDA0200S DURING THE OPEN OR CLOSE PROCESS         */
*   /* RESPECTIVELY.                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0180
*   IF IDARIIOP=ON THEN                                            0180
         TM    IDARIIOP(RCORE),B'00100000'                         0180
         BNO   @RF00180                                            0180
*     CALL DRECOPEN;                /* DUMP AND RECORD AREAS FOR OPEN
*                                      PROCESSING                    */
*                                                                  0181
         BAL   @14,DRECOPEN                                        0181
*   /*****************************************************************/
*   /*                                                               */
*   /* OTHERWISE ERROR OCCURRED DURING THE NORMAL CLOSE OF THE DCB   */
*   /* WHICH IS THEREFORE IN A STATE OF PARTIAL CLOSED STATUS.       */
*   /* IDA0200S WAS IN CONTROL AT TIME THE ERROR WAS DETECTED.       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0182
*   ELSE                                                           0182
*     CALL DRECLOSE;                /* DUMP AND RECORD AREAS FOR   0182
*                                      CLOSE PROCESSING              */
         B     @RC00180                                            0182
@RF00180 BAL   @14,DRECLOSE                                        0182
*   DO;                             /* MODESET KEYADDR(DXUKEY)       */
@RC00180 DS    0H                                                  0184
*     SPKA(DXUKEY);                 /* SET PSW KEY                   */
         SLR   @15,@15                                             0184
         IC    @15,DXUKEY(,RCORE)                                  0184
         SPKA  0(@15)                                              0184
*   END;                            /* MODESET KEYADDR(DXUKEY) RESUME
*                                      USER KEY                      */
*   IF RIICB=ZERO×RWORK1=ZERO THEN  /* IF AUDIT NOT VALID THEN       */
         SLR   @15,@15                                             0186
         CR    RIICB,@15                                           0186
         BE    @RT00186                                            0186
         CR    RWORK1,@15                                          0186
         BE    @RT00186                                            0186
*     GO TO EXIT;                   /* OR CONTINUATION NOT DESIRED 0187
*                                      BYPASS FORCE CLOSE            */
*   CALL DELETRTN;                  /* DELETE ROUTINES LOADED        */
         BAL   @14,DELETRTN                                        0188
*   CALL CLOSEACB;                  /* CLOSE ACB IF STILL OPEN       */
         BAL   @14,CLOSEACB                                        0189
*   CALL DEBUNCHN;                  /* REMOVE DEB FROM DEB CHAIN     */
         BAL   @14,DEBUNCHN                                        0190
*   CALL DCBRESET;                  /* RESET DCB TO PRE-OPEN STATUS  */
         BAL   @14,DCBRESET                                        0191
*   CALL FREERSRC;                  /* FREE CORE OBTAINED            */
         BAL   @14,FREERSRC                                        0192
*EXIT:                                                             0193
*   DO;                             /* MODESET EXTKEY(ZERO)          */
EXIT     DS    0H                                                  0194
*     SPKA(0);                      /* SET PSW KEY                   */
         SLR   @15,@15                                             0194
         SPKA  0(@15)                                              0194
*   END;                            /* MODESET EXTKEY(ZERO) ASSUME 0195
*                                      SYSTEM KEY ZERO               */
*   PCOPYDCB=ISAMDCB;               /* SET DCB COPY TO USER DCB      */
         L     @15,DXPDCBAD(,RCORE)                                0196
         MVC   PCOPYDCB(236,@15),ISAMDCB+16(R3)                    0196
*   RESPECIFY                                                      0197
*     R13 RESTRICTED;                                              0197
*   R13=IIRSAVE;                    /* RETRIEVE SAVE AREA ADDR       */
         L     R13,IIRSAVE(,RCORE)                                 0198
*   RETURN;                         /* RETURN TO COMMON ESTAE        */
@EL00001 DS    0H                                                  0199
@EF00001 DS    0H                                                  0199
@ER00001 LM    @14,@12,12(@13)                                     0199
         BR    @14                                                 0199
*                                                                  0200
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THIS ROUTINE IS TO DETERMINE IF AUDITING HAD   */
*   /* BEEN INITIATED OR TERMINATED.                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0200
*AUDITVER:                                                         0200
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0200
*                                                                  0200
AUDITVER DS    0H                                                  0201
*   /*****************************************************************/
*   /*                                                               */
*   /* IF CLOSE MODULE IDA0200S WAS IN CONTROL THEN IT MUST BE       */
*   /* DETERMINED WHETHER OR NOT THE AUDIT POINTER HAS BEEN          */
*   /* INITIALIZED OR IF THE AUDIT HAS ALREADY ENDED. IF OPEN MODULE */
*   /* IDA0192I WAS IN CONTROL THEN AUDIT HAS NOT STARTED IF AUDIT   */
*   /* POINTER IS ZERO AND THE AUDIT IS THEREFORE NOT VALID ONLY IF  */
*   /* ZERO.                                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0201
*   IF IDARIICL=ON THEN             /* IF CLOSE IN CONTROL THEN DO   */
         TM    IDARIICL(RCORE),B'01000000'                         0201
         BNO   @RF00201                                            0201
*     DO;                                                          0202
*       IF DXATEXC2=AUDEND THEN     /* END OF AUDIT IS INDICATED BY
*                                      X'FFFFFFFF' IN AUDIT PTR      */
         CLC   DXATEXC2(4,RCORE),@CB02545                          0203
         BNE   @RF00203                                            0203
*         IIAUDPTR=ZERO;            /* MARK AUDIT NOT VALID          */
         SLR   @15,@15                                             0204
         ST    @15,IIAUDPTR(,RCORE)                                0204
*       ELSE                        /* AUDIT PTR MAY NOT HAVE BEEN 0205
*                                      ESTABLISHED AT TIME OF ERROR  */
*         IF IIAUDPTR=ZERO THEN     /* IF ZERO AUDIT STARTED BUT     */
         B     @RC00203                                            0205
@RF00203 SLR   @15,@15                                             0205
         C     @15,IIAUDPTR(,RCORE)                                0205
         BNE   @RF00205                                            0205
*           DO;                     /* POINTER NOT ESTABLISHED TO  0206
*                                      IICB                          */
*             IF RDEB^=ZERO THEN    /* IF DEB IS AVAILABLE THEN      */
         CR    RDEB,@15                                            0207
         BE    @RF00207                                            0207
*               IIAUDPTR=DEBWKPT5;  /* GET IICB ADDR FROM DEB        */
         L     @15,DEBEXPT(,RDEB)                                  0208
         L     @15,DEBWKPT5(,@15)                                  0208
         ST    @15,IIAUDPTR(,RCORE)                                0208
*             ELSE                  /* OTHERWISE IICB NOT AVAILABLE  */
*               IIAUDPTR=ZERO;      /* MARK AUDIT INVALID            */
         B     @RC00207                                            0209
@RF00207 SLR   @15,@15                                             0209
         ST    @15,IIAUDPTR(,RCORE)                                0209
*           END;                                                   0210
@RC00207 DS    0H                                                  0211
*     END;                          /* END CLOSE AUDIT VALIDATION    */
@RF00205 DS    0H                                                  0211
@RC00203 DS    0H                                                  0212
*   RIICB=IIAUDPTR;                 /* GET ADDRESS OF IICB WHICH   0212
*                                      CONTAINS THE AUDIT INFORMATION
*                                      AND IF ZERO THEN AUDIT IS   0212
*                                      INVALID                       */
@RF00201 L     RIICB,IIAUDPTR(,RCORE)                              0212
*   END AUDITVER;                                                  0213
@EL00002 DS    0H                                                  0213
@EF00002 DS    0H                                                  0213
@ER00002 BR    @14                                                 0213
*                                                                  0214
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THIS ROUTINE IS TO DETERMINE HOW MUCH DUMPING  */
*   /* AND RECORDING SHOULD BE DONE WHEN AN ERROR HAS OCCURRED DURING*/
*   /* OPEN PROCESSING.                                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0214
*DRECOPEN:                                                         0214
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0214
DRECOPEN DS    0H                                                  0215
*   RESPECIFY                                                      0215
*    (R5,                                                          0215
*     RLKRETSV) RESTRICTED;                                        0215
*   RWORK1=FORCECLS;                /* ASSUME FORCE CLOSE TO CONTINUE*/
         LA    @15,1                                               0216
         LR    RWORK1,@15                                          0216
*   RLKRETSV=R14;                   /* SAVE RETURN ADDR              */
*                                                                  0217
         LR    RLKRETSV,R14                                        0217
*   /*****************************************************************/
*   /*                                                               */
*   /* MACHINE CHECK***RECORD=IGNORE,SDUMP=NO,DUMP=IGNORE,CONTINUE   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0218
*   IF SDWAMCHK=ON THEN             /* IF MACHINE CHECK THEN NO      */
         TM    SDWAMCHK(R7),B'10000000'                            0218
         BO    @RT00218                                            0218
*     RETURN;                       /* RECORDING                     */
*                                                                  0219
*   /*****************************************************************/
*   /*                                                               */
*   /* AUDIT NOT STARTED***RECORD=YES,SDUMP=YES,DUMP=IGNORE, DO NOT  */
*   /* CONTINUE WITH FORCE CLOSE                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0220
*   IF RIICB=ZERO THEN              /* IICB NOT OBTAINED             */
         LTR   RIICB,RIICB                                         0220
         BNZ   @RF00220                                            0220
*     DO;                           /* SET RECOVERY PROCESSING       */
*       R5=OPSDUMP1;                /* PARM FOR SDUMP SUBROUTINE     */
         LR    R5,@15                                              0222
*       CALL SDUMPSUB;              /* PERFORM RECORDING             */
         BAL   @14,SDUMPSUB                                        0223
*     END;                                                         0224
*   ELSE                                                           0225
*                                                                  0225
*     /***************************************************************/
*     /*                                                             */
*     /* USER ERROR***ABEND03B OR ERROR IN DCB EXIT ROUTINE***RECORD=*/
*     /* IGNORE,SDUMP=NO,DUMP=YES,DO NOT CONTINUE WITH FORCE CLOSE   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0225
*     IF(SDWASVCD=ON&               /* IF ABEND ISSUED AND           */
*         SDWACMPC=ABEND3B)×        /* AND ABEND IS 03B, OR          */
*         (SDWANRBE=ON&             /* ERROR IN LOWER LEVEL SVRB AND */
*         AUDDCBEX=ON&              /* DCB EXIT WAS TAKEN BUT        */
*         AUDDCBRT=OFF) THEN        /* DID NOT RETURN BEFORE ERROR   */
         B     @RC00220                                            0225
@RF00220 TM    SDWASVCD(R7),B'00010000'                            0225
         BNO   @GL00002                                            0225
         CLC   SDWACMPC(3,R7),@CB02622                             0225
         BE    @RT00225                                            0225
@GL00002 TM    SDWANRBE(R7),B'01000000'                            0225
         BNO   @RF00225                                            0225
         TM    AUDDCBEX(RIICB),B'00100000'                         0225
         BNO   @RF00225                                            0225
         TM    AUDDCBRT(RIICB),B'00010000'                         0225
         BNZ   @RF00225                                            0225
@RT00225 DS    0H                                                  0226
*       CALL USERDUMP;              /* SET UP USER DUMP              */
         BAL   @14,USERDUMP                                        0226
*     ELSE                                                         0227
*                                                                  0227
*       /*************************************************************/
*       /*                                                           */
*       /* VSAM OPEN IN CONTROL***RECORD=IGNORE,SDUMP=NO,DUMP=       */
*       /* IGNORE, CONTINUE WITH FORCE CLOSE PROCESSING              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0227
*       IF(SDWANRBE=ON&             /* LOWER LEVEL RB IN CONTROL AND */
*           AUDACBOP=ON&            /* OPEN ISSUED ON ACB BUT        */
*           AUDACBRO=OFF) THEN      /* NO RETURN FROM ACB OPEN       */
         B     @RC00225                                            0227
@RF00225 TM    SDWANRBE(R7),B'01000000'                            0227
         BNO   @RF00227                                            0227
         TM    AUDACBOP(RIICB),B'10000000'                         0227
         BNO   @RF00227                                            0227
         TM    AUDACBRO(RIICB),B'01000000'                         0227
         BNZ   @RF00227                                            0227
*         DO;                       /* CONTINUE FORCE CLOSE          */
*           R14=RLKRETSV;           /* RESTORE RETURN ADDR           */
         LR    R14,RLKRETSV                                        0229
*           RETURN;                 /* AND RETURN                    */
@EL00003 DS    0H                                                  0230
@EF00003 DS    0H                                                  0230
@ER00003 BR    @14                                                 0230
*         END;                                                     0231
*       ELSE                                                       0232
*                                                                  0232
*         /***********************************************************/
*         /*                                                         */
*         /* ERROR OCCURED IN IDA0192I***RECORD=YES,DUMP=NO,         */
*         /* SDUMP=YES,CONTINUE WITH FORCE CLOSE PROCESS             */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0232
*         DO;                                                      0232
@RF00227 DS    0H                                                  0233
*           R5=OPSDUMP2;            /* PARM FOR SDUMP SUBROUTINE     */
         LA    R5,2                                                0233
*           CALL SDUMPSUB;          /* PERFORM SDUMP SETUP           */
         BAL   @14,SDUMPSUB                                        0234
*         END;                                                     0235
*   R14=RLKRETSV;                   /* RESTORE RETURN ADDR           */
@RC00225 DS    0H                                                  0236
@RC00220 LR    R14,RLKRETSV                                        0236
*   RESPECIFY                                                      0237
*    (R5,                                                          0237
*     RLKRETSV) UNRESTRICTED;                                      0237
*   END DRECOPEN;                                                  0238
         B     @EL00003                                            0238
*                                                                  0239
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THIS ROUTINE IS TO DETERMINE HOW MUCH DUMPING  */
*   /* AND RECORDING SHOULD BE DONE WHEN AN ERROR HAS OCCURRED DURING*/
*   /* CLOSE PROCESSING.                                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0239
*DRECLOSE:                                                         0239
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0239
DRECLOSE DS    0H                                                  0240
*   RESPECIFY                                                      0240
*    (R5,                                                          0240
*     RLKRETSV) RESTRICTED;                                        0240
*   RWORK1=FORCECLS;                /* ASSUME FORCE CLOSE TO CONTINUE*/
         LA    RWORK1,1                                            0241
*   RLKRETSV=R14;                   /* SAVE RETURN ADDR              */
*                                                                  0242
         LR    RLKRETSV,R14                                        0242
*   /*****************************************************************/
*   /*                                                               */
*   /* MACHINE CHECK***SDUMP=NO,RECORD=IGNORE,DUMP=IGNORE,CONTINUE   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0243
*   IF SDWAMCHK=ON THEN             /* RETURN IF MACHINE CHECK       */
         TM    SDWAMCHK(R7),B'10000000'                            0243
         BO    @RT00243                                            0243
*     RETURN;                       /* PERFORM NO RECORDING          */
*                                                                  0244
*   /*****************************************************************/
*   /*                                                               */
*   /* AUDIT ENDED OR UNAVAILABLE***SDUMP=YES,RECORD=YES,            */
*   /* DUMP=IGNORE, DO NOT CONTINUE WITH FORCE CLOSE                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0245
*   IF RIICB=ZERO THEN              /* IICB UNAVAILABLE              */
         LTR   RIICB,RIICB                                         0245
         BNZ   @RF00245                                            0245
*     DO;                           /* SET RECOVERY PROCESSING       */
*       R5=CLSDUMP1;                /* PARM FOR SDUMP SUBROUTINE     */
         LA    R5,3                                                0247
*       CALL SDUMPSUB;              /* PERFORM SDUMP SETUP           */
         BAL   @14,SDUMPSUB                                        0248
*     END;                                                         0249
*   ELSE                                                           0250
*                                                                  0250
*     /***************************************************************/
*     /*                                                             */
*     /* USER ERROR***ABEND031***REOCRD=IGNORE,SDUMP=NO,DUMP=YES, DO */
*     /* NOT CONTINUE WITH FORCE CLOSE                               */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0250
*     IF SDWASVCD=ON&               /* SVC 13 ISSUED(ABEND)          */
*         SDWACMPC=ABEND031 THEN    /* AND ABEND IS 031 FROM CLOSE   */
         B     @RC00245                                            0250
@RF00245 TM    SDWASVCD(R7),B'00010000'                            0250
         BNO   @RF00250                                            0250
         CLC   SDWACMPC(3,R7),@CB02624                             0250
         BNE   @RF00250                                            0250
*       CALL USERDUMP;              /* SETUP FOR USER DUMP           */
         BAL   @14,USERDUMP                                        0251
*     ELSE                                                         0252
*                                                                  0252
*       /*************************************************************/
*       /*                                                           */
*       /* VSAM CLOSE IN CONTROL***RECORD=IGNORE, SDUMP=NO,          */
*       /* DUMP=IGNORE, CONTINUE WITH FORCE CLOSE PROCESSING         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0252
*       IF(SDWANRBE=ON&             /* LOWER LEVEL RB IN CONTROL AND */
*           AUDACBCL=ON&            /* A CLOSE ISSUED ON ACB AND     */
*           AUDACBRC=OFF) THEN      /* AND CLOSE DID NOT RETURN      */
         B     @RC00250                                            0252
@RF00250 TM    SDWANRBE(R7),B'01000000'                            0252
         BNO   @RF00252                                            0252
         TM    AUDACBCL(RIICB),B'01000000'                         0252
         BNO   @RF00252                                            0252
         TM    AUDACBRC(RIICB),B'00100000'                         0252
         BNZ   @RF00252                                            0252
*         DO;                       /* CONTINUE CLOSE                */
*           R14=RLKRETSV;           /* RESTORE RET ADDR              */
         LR    R14,RLKRETSV                                        0254
*           RETURN;                 /* AND RETURN                    */
@EL00004 DS    0H                                                  0255
@EF00004 DS    0H                                                  0255
@ER00004 BR    @14                                                 0255
*         END;                                                     0256
*       ELSE                                                       0257
*                                                                  0257
*         /***********************************************************/
*         /*                                                         */
*         /* MODULE IDAIIPM1 IN CONTROL***SDUMP=YES, DUMP=IGNORE,    */
*         /* RECORD=YES, CONTINUE WITH FORCE CLOSE PROCESSING        */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0257
*         IF(SDWANRBE=ON&           /* LOWER LEVEL RB IN CONTROL     */
*             AUDBFREX=ON&          /* AND SYNCH TO PM1 ISSUED       */
*             AUDBFRRT=OFF) THEN    /* BUT DID NOT RETURN            */
@RF00252 TM    SDWANRBE(R7),B'01000000'                            0257
         BNO   @RF00257                                            0257
         TM    AUDBFREX(RIICB),B'00010000'                         0257
         BNO   @RF00257                                            0257
         TM    AUDBFRRT(RIICB),B'00001000'                         0257
         BNZ   @RF00257                                            0257
*           DO;                     /* SET RECOVERY PROCESSING       */
*             R5=CLSDUMP2;          /* PARM FOR SDUMP SUBROUTINE     */
         LA    R5,4                                                0259
*             CALL SDUMPSUB;        /* PERFORM SDUMP SETUP           */
         BAL   @14,SDUMPSUB                                        0260
*           END;                                                   0261
*         ELSE                                                     0262
*                                                                  0262
*           /*********************************************************/
*           /*                                                       */
*           /* MODULE IDA0200S IN CONTROL***RECORD=YES, DUMP=IGNORE, */
*           /* SDUMP=YES, CONTINUE WITH FORCE CLOSE                  */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0262
*           DO;                     /* SET RECOVERY PROCESSING       */
         B     @RC00257                                            0262
@RF00257 DS    0H                                                  0263
*             R5=CLSDUMP3;          /* PARM FOR SDUMP SUBROUTINE     */
         LA    R5,5                                                0263
*             CALL SDUMPSUB;        /* SETUP FOR SDUMP               */
         BAL   @14,SDUMPSUB                                        0264
*           END;                                                   0265
*   R14=RLKRETSV;                   /* RESTORE RETURN ADDR           */
@RC00257 DS    0H                                                  0266
@RC00250 DS    0H                                                  0266
@RC00245 LR    R14,RLKRETSV                                        0266
*   RESPECIFY                                                      0267
*    (R5,                                                          0267
*     RLKRETSV) UNRESTRICTED;                                      0267
*   END DRECLOSE;                                                  0268
         B     @EL00004                                            0268
*                                                                  0269
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THIS ROUTINE IS TO ISSUE AN SDUMP SVC IN ORDER */
*   /* TO PROVIDE A DUMP WHEN IT HAS BEEN DETERMINED THAT AN ERROR   */
*   /* HAS OCCURRED IN IBM CODE. INPUT TO THIS ROUTINE IS A VALUE IN */
*   /* REG 5 WHICH LOCATES THE APPRORPRIATE HEADER FOR THE DUMP.     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0269
*SDUMPSUB:                                                         0269
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0269
SDUMPSUB DS    0H                                                  0270
*   RESPECIFY                                                      0270
*    (R5,                                                          0270
*     R8,                                                          0270
*     R9,                                                          0270
*     RLKRETSV) RESTRICTED;                                        0270
*   R8=R14;                         /* SAVE RETURN ADDR              */
         LR    R8,R14                                              0271
*   DO;                             /* GETMAIN (RU)                0272
*                                      LV(LENGTH(SDUMPLST))        0272
*                                      SP(USERPOOL)                  */
*     RESPECIFY                                                    0273
*      (GPR01F,                                                    0273
*       GPR15F,                                                    0273
*       GPR00F) RESTRICTED;                                        0273
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0274
*     GPR15F=2;                     /* RU-TYPE GETMAIN               */
         LA    GPR15F,2                                            0275
*     GPR00F=LENGTH(SDUMPLST);      /* LENGTH REQUESTED              */
         LA    GPR00F,165                                          0276
*     GPR15F=GPR15F×((USERPOOL)*256);/* SP IN BYTE 2                 */
         O     GPR15F,@CF02718                                     0277
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0278
*     RESPECIFY                                                    0279
*      (GPR01F,                                                    0279
*       GPR15F,                                                    0279
*       GPR00F) UNRESTRICTED;                                      0279
*   END;                            /* GETMAIN (RU)                0280
*                                      LV(LENGTH(SDUMPLST))        0280
*                                      SP(USERPOOL) GETMAIN A SDUMP
*                                      PARM LIST                     */
*   RESPECIFY                                                      0281
*     R1 RESTRICTED;                                               0281
*   R3=R1;                          /* BASE FOR LIST                 */
         LR    R3,R1                                               0282
*   RESPECIFY                                                      0283
*     R1 UNRESTRICTED;                                             0283
*   RESPECIFY                                                      0284
*     SDUMPLST BASED(R3);                                          0284
*   SDUMPLST=SDUMPLST&&SDUMPLST;    /* CLEAR LIST                    */
         XC    SDUMPLST(165,R3),SDUMPLST(R3)                       0285
*   SDULGTH=HDRLGTH;                /* LENGTH OF HEADER              */
         MVI   SDULGTH(R3),X'3C'                                   0286
*   SDUMSG=SDUMPHDR(R5);            /* MOVE IN APPROPRIATE HEADER    */
         LR    @15,R5                                              0287
         MH    @15,@CH00150                                        0287
         LA    @01,SDUMPHDR-60(@15)                                0287
         MVC   SDUMSG(60,R3),0(@01)                                0287
*   R5=ADDR(SDUHDR);                /* ADDRESS OF HEADER             */
         LA    R5,SDUHDR(,R3)                                      0288
*   R9=ADDR(SDUCOREL);              /* ADDRESS OF ADDRESS LIST       */
*                                                                  0289
         LA    @15,SDUCOREL(,R3)                                   0289
         LR    R9,@15                                              0289
*   /*****************************************************************/
*   /*                                                               */
*   /* FORMAT LIST OF ADDRESSES                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0290
*   SDUFROM1=ADDR(SDUCOREL);        /* DUMP THE DUMP LIST ITSELF     */
         ST    @15,SDUFROM1(,R3)                                   0290
*   SDUTO1=ADDR(SDUCOREL)+LENGTH(SDUCOREL);/* TO END OF LIST         */
         LA    @15,SDUCOREL(,R3)                                   0291
         AL    @15,@CF02017                                        0291
         ST    @15,SDUTO1(,R3)                                     0291
*   SDUFROM2=DXUDCBAD;              /* DUMP USER DCB                 */
         L     @15,DXUDCBAD(,RCORE)                                0292
         ST    @15,SDUFROM2(,R3)                                   0292
*   SDUTO2=DXUDCBAD+LENGTH(ISAMDCB)+LENGTH(IHADCS11);/* TO END       */
         LA    @01,252                                             0293
         ALR   @15,@01                                             0293
         ST    @15,SDUTO2(,R3)                                     0293
*   SDUFROM3=DXPDCBAD;              /* DUMP COPY DCB                 */
         L     @15,DXPDCBAD(,RCORE)                                0294
         ST    @15,SDUFROM3(,R3)                                   0294
*   SDUTO3=DXPDCBAD+LENGTH(ISAMDCB)+LENGTH(IHADCS11);/* TO END       */
         ALR   @15,@01                                             0295
         ST    @15,SDUTO3(,R3)                                     0295
*   SDUFROM4=ADDR(FORCORE);         /* DUMP OPEN/COSE WORK AREA      */
         ST    RCORE,SDUFROM4(,R3)                                 0296
*   SDUTO4=ADDR(FORCORE)+LENGTH(FORCORE);/* TO END                   */
         LA    @15,612                                             0297
         ALR   @15,RCORE                                           0297
         ST    @15,SDUTO4(,R3)                                     0297
*   SDUFROM5=ADDR(SDWA);            /* DUMP RECOVERY WORK AREA       */
         ST    R7,SDUFROM5(,R3)                                    0298
*   SDUTO5=ADDR(SDWA)+LENGTH(SDWA); /* TO END                        */
*                                                                  0299
         LA    @15,512                                             0299
         ALR   @15,R7                                              0299
         ST    @15,SDUTO5(,R3)                                     0299
*   /*****************************************************************/
*   /*                                                               */
*   /* ASSUME NO OTHER CONTROL BLOCKS TO DUMP AND SET REMAINING      */
*   /* ENTRIES SUCH THAT THE DUMMY ENTRY OF ALL ZEROES(8 BYTES) WILL */
*   /* BE DUMPED IF THE PARTICULAR AREA OR CONTROL BLOCK IS NOT      */
*   /* PRESENT.                                                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0300
*   SDUFROM6=ADDR(SDUFROMA);        /* START DUMMY ENTRY             */
         LA    @15,SDUFROMA(,R3)                                   0300
         ST    @15,SDUFROM6(,R3)                                   0300
*   SDUTO6=SDUFROM6+LENGTH(SDUFROMA)+LENGTH(SDUTOA);/* TO END        */
         LA    @01,8                                               0301
         ALR   @01,@15                                             0301
         ST    @01,SDUTO6(,R3)                                     0301
*   SDUFROM7=SDUFROM6;              /* START DUMMY ENTRY             */
         ST    @15,SDUFROM7(,R3)                                   0302
*   SDUTO7=SDUTO6;                  /* END DUMMY ENTRY               */
         ST    @01,SDUTO7(,R3)                                     0303
*   SDUFROM8=SDUFROM6;              /* START DUMMY ENTRY             */
         ST    @15,SDUFROM8(,R3)                                   0304
*   SDUTO8=SDUTO6;                  /* END DUMMY ENTRY               */
         ST    @01,SDUTO8(,R3)                                     0305
*   SDUFROM9=SDUFROM6;              /* START DUMMY ENTRY             */
         ST    @15,SDUFROM9(,R3)                                   0306
*   SDUTO9=SDUTO6;                  /* END DUMMY ENTRY               */
         ST    @01,SDUTO9(,R3)                                     0307
*   IF RDEB^=ZERO THEN              /* IF DEB PRESENT DUMP IT        */
         LTR   RDEB,RDEB                                           0308
         BZ    @RF00308                                            0308
*     DO;                                                          0309
*       SDUFROM6=RDEB-LENGTH(DEBPREFX);/* DEB PREFIX START           */
         LR    @15,RDEB                                            0310
         SL    @15,@CF00210                                        0310
         ST    @15,SDUFROM6(,R3)                                   0310
*       SDUTO6=SDUFROM6+(DEBLNGTH*DWLGTH);/* TO END                  */
         LR    @01,RDEB                                            0311
         AL    @01,@CF02734                                        0311
         SLR   @00,@00                                             0311
         IC    @00,DEBLNGTH-32(,@01)                               0311
         SLA   @00,3                                               0311
         ALR   @15,@00                                             0311
         ST    @15,SDUTO6(,R3)                                     0311
*     END;                                                         0312
*   IF RIICB^=ZERO THEN             /* IF IICB PRESENT THEN AUDIT IS */
@RF00308 SLR   @15,@15                                             0313
         CR    RIICB,@15                                           0313
         BE    @RF00313                                            0313
*     DO;                           /* VALID AND DUMP CORE OBTAINED  */
*       SDUFROM7=ADDR(IDAIICB);     /* DUMP IICB,ACB,AND EXLST       */
         ST    RIICB,SDUFROM7(,R3)                                 0315
*       SDUTO7=ADDR(IDAIICB)+AUDCLI;/* TO END                        */
         LR    @01,RIICB                                           0316
         L     @00,AUDCLI-1(,RIICB)                                0316
         ICM   @00,8,@CB02735                                      0316
         ALR   @01,@00                                             0316
         ST    @01,SDUTO7(,R3)                                     0316
*       IF AUDCBFRS^=ZERO THEN      /* IF BUFFERS ETC. OBTAINED      */
         L     @01,AUDCBFRS(,RIICB)                                0317
         CR    @01,@15                                             0317
         BE    @RF00317                                            0317
*         DO;                       /* DUMP                          */
*           SDUFROM8=AUDCBFRS;      /* START ADDRESS OF BUFFERS      */
         ST    @01,SDUFROM8(,R3)                                   0319
*           SDUTO8=SDUFROM8+AUDCLB; /* LENGTH TO END                 */
         L     @15,AUDCLB-1(,RIICB)                                0320
         LA    @15,0(,@15)                                         0320
         ALR   @01,@15                                             0320
         ST    @01,SDUTO8(,R3)                                     0320
*         END;                      /* END BUFFER DUMP               */
*       IF AUDCMSGA^=ZERO THEN      /* IF MESSAGE AREA OBTAINED      */
@RF00317 L     @15,AUDCMSGA(,RIICB)                                0322
         LTR   @15,@15                                             0322
         BZ    @RF00322                                            0322
*         DO;                       /* DUMP IT                       */
*           SDUFROM9=AUDCMSGA;      /* START OF MESSAGE AREA         */
         ST    @15,SDUFROM9(,R3)                                   0324
*           SDUTO9=SDUFROM9+AUDCLM; /* TO END                        */
         L     @01,AUDCLM-1(,RIICB)                                0325
         LA    @01,0(,@01)                                         0325
         ALR   @15,@01                                             0325
         ST    @15,SDUTO9(,R3)                                     0325
*         END;                      /* END DUMP MESSAGE AREA         */
*     END;                          /* END IICB PRESENT              */
@RF00322 DS    0H                                                  0328
*   RESPECIFY                                                      0328
*     ENDLIST BASED(ADDR(SDUTO9));                                 0328
@RF00313 DS    0H                                                  0329
*   ENDSW=ON;                       /* SET HIGH ORDER BIT OF LAST    */
         OI    ENDSW+92(R3),B'10000000'                            0329
*   SDUPARML=SDUMPPL;               /* INIT SDUMP PARM LIST  @ZA12204*/
         MVC   SDUPARML(24,R3),SDUMPPL                             0330
*   GEN(SDUMP HDRAD=(R5),LIST=(R9),MF=(E,(R3)));/* ISSUE SDUMP       */
         SDUMP HDRAD=(R5),LIST=(R9),MF=(E,(R3))
*   DO;                             /* SETRP RECORD(YES)WKAREA(R7)   */
*     RESPECIFY                                                    0333
*      (GPR00P,                                                    0333
*       GPR01P,                                                    0333
*       GPR14P,                                                    0333
*       GPR15P) RSTD;                                              0333
*     GPR01P=R7;                                                   0334
         LR    GPR01P,R7                                           0334
*     GPR01P->SDWARCDE=0;           /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0335
*     GPR01P->SDWARCRD='1'B;        /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0336
*     RESPECIFY                                                    0337
*      (GPR00P,                                                    0337
*       GPR01P,                                                    0337
*       GPR14P,                                                    0337
*       GPR15P) UNRSTD;                                            0337
*   END;                            /* INDICATE RECORDING TO BE DONE */
*   DO;                             /* FREEMAIN(RC) LV(LENGTH(SDUMPLS
*                                      T))A(SDUMPLST) SP(USERPOOL)   */
*     RESPECIFY                                                    0340
*      (GPR01F,                                                    0340
*       GPR15F,                                                    0340
*       GPR00F) RESTRICTED;                                        0340
*     GPR01F=0;                     /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0341
*     GPR15F=1;                     /* SET TYPE                      */
         LA    GPR15F,1                                            0342
*     GPR00F=LENGTH(SDUMPLST);      /* LENGTH REQUESTED              */
         LA    GPR00F,165                                          0343
*     GPR01F=ADDR(SDUMPLST);        /* SET REGISTER ONE              */
         LR    GPR01F,R3                                           0344
*     GPR15F=GPR15F+((USERPOOL)*256);/* SUBPOOL VALUE                */
         AL    GPR15F,@CF02718                                     0345
*     SVC(120);                     /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0346
*     RESPECIFY                                                    0347
*      (GPR01F,                                                    0347
*       GPR15F,                                                    0347
*       GPR00F) UNRESTRICTED;                                      0347
*   END;                            /* FREEMAIN(RC) LV(LENGTH(SDUMPLS
*                                      T))A(SDUMPLST) SP(USERPOOL) 0348
*                                      AND FREE SDUMP PARM LIST      */
*   R3=DXUDCBAD;                    /* RESTORE DCB ADDR              */
         L     R3,DXUDCBAD(,RCORE)                                 0349
*   R14=R8;                         /* RESTORE RETURN ADDR           */
         LR    R14,R8                                              0350
*   RESPECIFY                                                      0351
*    (R5,                                                          0351
*     R8,                                                          0351
*     R9,                                                          0351
*     RLKRETSV) UNRESTRICTED;                                      0351
*   END SDUMPSUB;                                                  0352
@EL00005 DS    0H                                                  0352
@EF00005 DS    0H                                                  0352
@ER00005 BR    @14                                                 0352
*                                                                  0353
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THIS ROUTINE IS TO SET UP THE REQUEST FOR A    */
*   /* USER DUMP WHEN IT HAS BEEN DETERMINED THAT A USER ERROR HAS   */
*   /* OCCURRED.                                                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0353
*USERDUMP:                                                         0353
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0353
USERDUMP DS    0H                                                  0354
*   RESPECIFY                                                      0354
*    (R8,                                                          0354
*     RLKRETSV) RESTRICTED;                                        0354
*   R8=R14;                         /* SAVE RETURN ADDRESS           */
         LR    R8,R14                                              0355
*   SDWADSAS=ON;                    /* DUMP USER SAVE AREAS          */
*   SDWADREG=ON;                    /* DUMP REGS                     */
*   SDWADPSW=ON;                    /* DUMP PSW                      */
*   SDWAUSPL=ON;                    /* DUMP USER SUBPOOLS            */
         OI    SDWADSAS(R7),B'10100110'                            0359
*   SDWAFRM1=ADDR(IHADCB);          /* DUMP USER DCB                 */
         ST    R3,SDWAFRM1(,R7)                                    0360
*   SDWATO1=ADDR(IHADCS11)+LENGTH(ISAMDCB);/* TO END                 */
         LA    @15,252                                             0361
         ALR   @15,R3                                              0361
         ST    @15,SDWATO1(,R7)                                    0361
*   SDWAFRM2=ADDR(IDAIICB);         /* DUMP IICB,ACB,EXLST           */
         ST    RIICB,SDWAFRM2(,R7)                                 0362
*   SDWATO2=ADDR(IDAIICB)+AUDCLI;   /* TO END                        */
         LR    @15,RIICB                                           0363
         L     @09,AUDCLI-1(,RIICB)                                0363
         LA    @09,0(,@09)                                         0363
         ALR   @15,@09                                             0363
         ST    @15,SDWATO2(,R7)                                    0363
*   SDWAFRM3=ADDR(IDAAMDSB);        /* DUMP AMDSB                    */
         L     @15,IIACBPTR(,RIICB)                                0364
         L     @15,ACBAMBL(,@15)                                   0364
         L     @15,AMBLDTA(,@15)                                   0364
         L     @15,AMBDSB(,@15)                                    0364
         ST    @15,SDWAFRM3(,R7)                                   0364
*   SDWATO3=ADDR(IDAAMDSB)+LENGTH(IDAAMDSB);/* TO END                */
         AL    @15,@CF01453                                        0365
         ST    @15,SDWATO3(,R7)                                    0365
*   RESPECIFY                                                      0366
*     ENDLIST BASED(ADDR(SDWATO3)); /* END OF DUMP                   */
*   ENDSW=ON;                       /* MARK AS SUCH                  */
         OI    ENDSW+348(R7),B'10000000'                           0367
*   DO;                             /* SETRP DUMP(YES)WKAREA(R7)     */
*     RESPECIFY                                                    0369
*      (GPR00P,                                                    0369
*       GPR01P,                                                    0369
*       GPR14P,                                                    0369
*       GPR15P) RSTD;                                              0369
*     GPR01P=R7;                                                   0370
         LR    GPR01P,R7                                           0370
*     GPR01P->SDWARCDE=0;           /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0371
*     GPR01P->SDWAREQ='1'B;         /* TURN ON DUMP INDICATOR        */
         OI    SDWAREQ(GPR01P),B'10000000'                         0372
*     RESPECIFY                                                    0373
*      (GPR00P,                                                    0373
*       GPR01P,                                                    0373
*       GPR14P,                                                    0373
*       GPR15P) UNRSTD;                                            0373
*   END;                                                           0374
*   RWORK1=ZERO;                    /* DO NOT CONTINUE CLOSING       */
         SLR   RWORK1,RWORK1                                       0375
*   R14=R8;                         /* RESTORE RETURN ADDRESS        */
         LR    R14,R8                                              0376
*   RESPECIFY                                                      0377
*    (R8,                                                          0377
*     RLKRETSV) UNRESTRICTED;                                      0377
*   END USERDUMP;                   /* END PROCEDURE                 */
@EL00006 DS    0H                                                  0378
@EF00006 DS    0H                                                  0378
@ER00006 BR    @14                                                 0378
*                                                                  0379
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THIS ROUTINE IS TO DELETE MODULES WHICH WERE   */
*   /* LOADED BUT HAD NOT BEEN DELETED AT THE TIME THAT AN ERROR     */
*   /* OCCURRED DURING OPEN/CLOSE PROCESSING.                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0379
*DELETRTN:                                                         0379
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0379
DELETRTN DS    0H                                                  0380
*   RESPECIFY                                                      0380
*     RLKRETSV RESTRICTED;                                         0380
*   RLKRETSV=R14;                   /* SAVE RETURN ADDRESS           */
         LR    RLKRETSV,R14                                        0381
*   IF RDEB=ZERO THEN               /* IF DEB NOT PRESENT            */
         LTR   RDEB,RDEB                                           0382
         BZ    @RT00382                                            0382
*     RETURN;                       /* DO NOT TRY TO REMOVE          */
*   IF AUDIISYN=ON THEN             /* IF IDAIISM1 NOT DELETED       */
         TM    AUDIISYN(RIICB),B'00000010'                         0384
         BNO   @RF00384                                            0384
*     GEN(DELETE EP=IDAIISM1);      /* DELETE IT                     */
         DELETE EP=IDAIISM1
*   IF AUDPRMOD=MODPM1SW THEN       /* IF IDAIIPM1 LOADED THEN       */
@RF00384 TM    AUDPRMOD(RIICB),B'00000100'                         0386
         BNO   @RF00386                                            0386
         TM    AUDPRMOD(RIICB),B'00001000'                         0386
         BNZ   @RF00386                                            0386
*     DO;                           /* DELETE IT                     */
*       GEN(DELETE EP=IDAIIPM1);                                   0388
         DELETE EP=IDAIIPM1
*       DCBIIPUT=ZERO;              /* SET PUT VECTOR TO ZERO        */
         SLR   @15,@15                                             0389
         STCM  @15,7,DCBIIPUT+48(R3)                               0389
*     END;                                                         0390
*   IF AUDPRMOD=MODPM2SW THEN       /* IF IDAIIPM2 LOADED THEN       */
@RF00386 TM    AUDPRMOD(RIICB),B'00001000'                         0391
         BNO   @RF00391                                            0391
         TM    AUDPRMOD(RIICB),B'00000100'                         0391
         BNZ   @RF00391                                            0391
*     DO;                           /* DELETE IT                     */
*       GEN(DELETE EP=IDAIIPM2);                                   0393
         DELETE EP=IDAIIPM2
*       DCBIIGET=ZERO;              /* SET PUT VECTOR TO ZERO        */
         SLR   @15,@15                                             0394
         STCM  @15,7,DCBIIGET+48(R3)                               0394
*       DCBSETL=ONE;                /* CLEAR SETL ADDR IN DCB        */
         LA    @15,1                                               0395
         LA    @05,52                                              0395
         ALR   @05,R3                                              0395
         ST    @15,DCBSETL(,@05)                                   0395
*       DCBESETL=ONE;               /* CLEAR ESETL ADDR IN DCB       */
         ST    @15,DCBESETL(,@05)                                  0396
*     END;                                                         0397
*   IF AUDPRMOD=MODPM3SW THEN       /* IF IDAIIPM3 LOADED THEN       */
@RF00391 TM    AUDPRMOD(RIICB),B'00001100'                         0398
         BNO   @RF00398                                            0398
*     DO;                           /* DELETE IT                     */
*       GEN(DELETE EP=IDAIIPM3);                                   0400
         DELETE EP=IDAIIPM3
*       DCBSETL=ONE;                /* CLEAR CHECK RTN ADD IN DCB    */
         LA    @15,1                                               0401
         LA    @05,52                                              0401
         ALR   @05,R3                                              0401
         ST    @15,DCBSETL(,@05)                                   0401
*       DCBLRAN=ONE;                /* CLEAR READ/WRITE RTN ADDR IN
*                                      DCB                           */
         ST    @15,DCBLRAN(,@05)                                   0402
*       DCBLWKN=ONE;                /* CLEAR WRITE KEY NEW ADDR IN 0403
*                                      DCB                           */
         ST    @15,DCBLWKN(,@05)                                   0403
*       IF AUDIIFBF=ON THEN         /* IF SYNAMIC BUFFER MOD LOADED  */
         TM    AUDIIFBF(RIICB),B'10000000'                         0404
         BNO   @RF00404                                            0404
*         DO;                       /* DELETE IT                     */
*           GEN(DELETE EP=IDAIIFBF);                               0406
         DELETE EP=IDAIIFBF
*           DCBFREED=ONE;           /* CLEAR FREEDBUF ADDR IN DCB    */
         MVC   DCBFREED+52(4,R3),@CF00087                          0407
*         END;                                                     0408
*     END;                                                         0409
@RF00404 DS    0H                                                  0410
*   IF AUDURSYN=ON THEN             /* IF USER SYNAD LOADED THEN     */
@RF00398 TM    AUDURSYN(RIICB),B'00000001'                         0410
         BNO   @RF00410                                            0410
*     DO;                           /* DELETE IT                     */
*       RESPECIFY                                                  0412
*         R8 RESTRICTED;                                           0412
*       R8=ADDR(IISAMSYN);          /* ADDR OF NAME OF ROUTINE       */
         LA    R8,IISAMSYN(,RIICB)                                 0413
*       GEN(DELETE EPLOC=(R8));                                    0414
         DELETE EPLOC=(R8)
*       DCBSYNAD=ONE;                                              0415
         MVC   DCBSYNAD+52(4,R3),@CF00087                          0415
*       RESPECIFY                                                  0416
*         R8 UNRESTRICTED;                                         0416
*     END;                                                         0417
*   R14=RLKRETSV;                   /* RESTORE RETURN ADDR           */
@RF00410 LR    R14,RLKRETSV                                        0418
*   RESPECIFY                                                      0419
*     RLKRETSV UNRESTRICTED;                                       0419
*   END DELETRTN;                                                  0420
@EL00007 DS    0H                                                  0420
@EF00007 DS    0H                                                  0420
@ER00007 BR    @14                                                 0420
*                                                                  0421
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THIS ROUTINE IS TO SEARCH FOR THE DEB ON THE   */
*   /* TCB DEB CHAIN AND REMOVE IT IF FOUND                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0421
*DEBUNCHN:                                                         0421
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0421
DEBUNCHN DS    0H                                                  0422
*   RESPECIFY                                                      0422
*    (RLKRETSV,                                                    0422
*     R5,                                                          0422
*     R8) RESTRICTED;               /*                               */
*   RLKRETSV=R14;                   /* SAVE RET ADDRESS              */
         LR    RLKRETSV,R14                                        0423
*   IF RDEB=ZERO THEN               /* IF DEB NOT PRESENT THEN       */
         SLR   @15,@15                                             0424
         CR    RDEB,@15                                            0424
         BE    @RT00424                                            0424
*     RETURN;                       /* RETURN                        */
*                                                                  0425
*   /*****************************************************************/
*   /*                                                               */
*   /* UNCHAIN THE DEB                                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0426
*   DO;                             /* MODESET EXTKEY(ZERO)          */
*     SPKA(0);                      /* SET PSW KEY                   */
         SPKA  0(@15)                                              0427
*   END;                            /* MODESET EXTKEY(ZERO) USE    0428
*                                      SYSTEM KEY FOR DEB UNCHAINING */
*   R5=RDEB;                        /* SAVE CONTENTS                 */
         LR    R5,RDEB                                             0429
*   R8=R12;                         /* SAVE CONTENTS                 */
*                                                                  0430
         LR    R8,R12                                              0430
*   /*****************************************************************/
*   /*                                                               */
*   /* OBTAIN THE LOCAL MEMORY LOCK                                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0431
*LOCK1:                             /* LOCAL LOCK FREED * + 3        */
*   GEN SETS(R11,R12,R13) REFS(PSALITA);                           0431
LOCK1    DS    0H                                                  0431
*                                                         /*         */
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        *
               RELATED=(TCBDEBCH,(IDAICIA1(UNLOCK1)))
*   R12=R8;                         /* RESTORE BASE                  */
         LR    R12,R8                                              0432
*   RDEB=R5;                        /* RESTORE DEB PTR               */
*                                                                  0433
         LR    RDEB,R5                                             0433
*   /*****************************************************************/
*   /*                                                               */
*   /* UNCHAIN THE DUMMY DEB                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0434
*   IF TCBDEB=RDEB THEN             /* UNCHAIN THE II DEB FROM       */
         L     @15,CVTPTR                                          0434
         L     @15,CVTTCBDW(,@15)                                  0434
         L     @15,TCBPTR(,@15)                                    0434
         C     RDEB,TCBDEB(,@15)                                   0434
         BNE   @RF00434                                            0434
*     DO;                           /* THE TCB DEB CHAIN             */
*       R8=RDEB;                    /* FOR COMPARE AND SWAP          */
         LR    R8,RDEB                                             0436
*       RWORK1=DEBDEBB;             /* FOR COMPARE AND SWAP          */
         L     RWORK1,DEBDEBB-1(,RDEB)                             0437
         LA    RWORK1,0(,RWORK1)                                   0437
*       CS(R8,RWORK1,TCBDEB);       /* REMOVE IF DEB IS FIRST ON   0438
*                                      CHAIN                         */
         CS    R8,@06,TCBDEB(@15)                                  0438
*       BC(8,UNLOCK1);              /* FINISHED                      */
         BC    8,UNLOCK1                                           0439
*     END;                          /*                               */
*   RWORK1=TCBDEB;                  /* GET PTR TO FIRST ON CHAIN LOOP
*                                      SEARCHING FOR THE DEB THAT  0441
*                                      POINTS TO THE II DEB          */
@RF00434 L     @15,CVTPTR                                          0441
         L     @15,CVTTCBDW(,@15)                                  0441
         L     @15,TCBPTR(,@15)                                    0441
         L     RWORK1,TCBDEB(,@15)                                 0441
*   DO;                             /* MODESET EXTKEY(DATAMGT)       */
*     SPKA(80);                     /* SET PSW KEY                   */
         LA    @15,80                                              0443
         SPKA  0(@15)                                              0443
*   END;                            /* MODESET EXTKEY(DATAMGT) ASSUME
*                                      DATA MANAGEMENT KEY TO UPDATE
*                                      DEB                           */
*   DO WHILE RWORK1->DEBDEBB^=RDEB; /*                               */
         B     @DE00445                                            0445
@DL00445 DS    0H                                                  0446
*     IF RWORK1->DEBDEBB^=ZERO THEN /* POINT TO NEXT DEB IN CHN      */
         L     @15,DEBDEBB-1(,RWORK1)                              0446
         LA    @15,0(,@15)                                         0446
         LTR   @15,@15                                             0446
         BZ    @RF00446                                            0446
*       RWORK1=RWORK1->DEBDEBB;     /*                               */
         LR    RWORK1,@15                                          0447
*     ELSE                          /* DEB NOT FOUND                 */
*       GO TO UNLOCK1;              /* IF DEB NOT FOUND RELEASE LOCAL
*                                      LOCK                          */
*   END;                            /* UNCHAIN II DEB                */
@DE00445 L     @15,DEBDEBB-1(,RWORK1)                              0449
         LA    @15,0(,@15)                                         0449
         CR    RDEB,@15                                            0449
         BNE   @DL00445                                            0449
*   RWORK1->DEBDEBB=DEBDEBB;        /*                               */
*                                                                  0450
         MVC   DEBDEBB(3,RWORK1),DEBDEBB(RDEB)                     0450
*   /*****************************************************************/
*   /*                                                               */
*   /* FREE LOCAL MEMORY LOCK                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0451
*UNLOCK1:                           /* LOCAL LOCK ACQUIRED * - 3     */
*   DO;                             /* MODESET EXTKEY(ZERO)          */
UNLOCK1  DS    0H                                                  0452
*     SPKA(0);                      /* SET PSW KEY                   */
         SLR   @15,@15                                             0452
         SPKA  0(@15)                                              0452
*   END;                            /* MODESET EXTKEY(ZERO) ASSUME 0453
*                                      SYSTEM KEY FOR RELEASING LOCK */
*   R8=R12;                         /* SAVE CONTENTS                 */
         LR    R8,R12                                              0454
*   R5=RDEB;                        /* SAVE CONTENTS                 */
         LR    R5,RDEB                                             0455
*   GEN SETS(R11,R12,R13) REFS(PSALITA);                           0456
*                                                         /*         */
        SETLOCK RELEASE,TYPE=LOCAL,RELATED=(TCBDEBCH,(IDAICIA1(LOCK1)))
*   R12=R8;                         /* RESET BASE                    */
         LR    R12,R8                                              0457
*   RDEB=R5;                        /* RESET DEB ADDR                */
         LR    RDEB,R5                                             0458
*   DO;                             /* MODESET KEYADDR(DXUKEY)       */
*     SPKA(DXUKEY);                 /* SET PSW KEY                   */
         SLR   @15,@15                                             0460
         IC    @15,DXUKEY(,RCORE)                                  0460
         SPKA  0(@15)                                              0460
*   END;                            /* MODESET KEYADDR(DXUKEY) RESUME
*                                      USER KEY                      */
*   R14=RLKRETSV;                   /* RESTORE RET ADDR              */
         LR    R14,RLKRETSV                                        0462
*   RESPECIFY                                                      0463
*    (R5,                                                          0463
*     R8,                                                          0463
*     RLKRETSV) UNRESTRICTED;                                      0463
*   END DEBUNCHN;                                                  0464
@EL00008 DS    0H                                                  0464
@EF00008 DS    0H                                                  0464
@ER00008 BR    @14                                                 0464
*                                                                  0465
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THIS ROUTINE IS TO PERFORM A CLOSE ON THE ACB  */
*   /* IF IT IS IN THE OPENED CONDITION.                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0465
*CLOSEACB:                                                         0465
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0465
CLOSEACB DS    0H                                                  0466
*   RESPECIFY                                                      0466
*     RLKRETSV RESTRICTED;                                         0466
*   RLKRETSV=R14;                   /* SAVE RETURN ADDR              */
         LR    RLKRETSV,R14                                        0467
*   IF AUDACBRO=ON&                 /* IF RETURN FROM ACB OPEN AND   */
*       AUDACBCL=OFF THEN           /* AND A CLOSE NOT ISSUED        */
         TM    AUDACBRO(RIICB),B'01000000'                         0468
         BNO   @RF00468                                            0468
         TM    AUDACBCL(RIICB),B'01000000'                         0468
         BNZ   @RF00468                                            0468
*     DO;                           /* ISSUE A CLOSE ON ACB          */
*       RWORK1=ADDR(IIACBPTR);      /* CLOSE PARM LIST               */
         LA    RWORK1,IIACBPTR(,RIICB)                             0470
*       RWORK1->ENDSW=ON;           /* LAST ACB IN LIST              */
         OI    ENDSW(RWORK1),B'10000000'                           0471
*       GEN(CLOSE MF=(E,(RWORK1)));                                0472
         CLOSE MF=(E,(RWORK1))
*     END;                                                         0473
*   R14=RLKRETSV;                   /* RESTORE RETURN ADDR           */
@RF00468 LR    R14,RLKRETSV                                        0474
*   RESPECIFY                                                      0475
*     RLKRETSV UNRESTRICTED;                                       0475
*   END CLOSEACB;                                                  0476
@EL00009 DS    0H                                                  0476
@EF00009 DS    0H                                                  0476
@ER00009 BR    @14                                                 0476
*                                                                  0477
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THIS ROUTINE IS TO RESET THE DCB TO ITS        */
*   /* PRE-OPEN STATUS WHEN AN ERROR HAS OCCURRED DURING OPEN/CLOSE  */
*   /* PROCESSING.                                                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0477
*DCBRESET:                                                         0477
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* FOR OPEN                      */
*                                                                  0477
DCBRESET DS    0H                                                  0478
*   /*****************************************************************/
*   /*                                                               */
*   /* THE COPY DCB IS IN THE PRE-OPEN STATUS EXCEPT FOR THE         */
*   /* FOUNDATION SEGMENT                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0478
*   IF IDARIIOP=ON THEN                                            0478
         TM    IDARIIOP(RCORE),B'00100000'                         0478
         BNO   @RF00478                                            0478
*     DO;                           /* RESTORE DCB                   */
*       ISAMDCB=PCOPYDCB;           /* RESTORE ALL EXCEPT DDNAME     */
         L     @15,DXPDCBAD(,RCORE)                                0480
         MVC   ISAMDCB+16(236,R3),PCOPYDCB(@15)                    0480
*       RESPECIFY                                                  0481
*        (RTIOT) RESTRICTED;                                       0481
*       RTIOT=DXTIOTAD;             /* GET ADDR OF TIOT ENTRY        */
         L     RTIOT,DXTIOTAD(,RCORE)                              0482
*       DCBDDNAM=TIOEDDNM;          /* RESTORE DDNAME                */
         MVC   DCBDDNAM+40(8,R3),TIOEDDNM(RTIOT)                   0483
*       RESPECIFY                                                  0484
*        (RTIOT) UNRESTRICTED;                                     0484
*     END;                          /* END OF OPEN RESTORE           */
*   ELSE                                                           0486
*                                                                  0486
*     /***************************************************************/
*     /*                                                             */
*     /* CLOSE PROCESSING THEN RESTORATION OF DCB MUST BE USING THE  */
*     /* MERGE MASK IN THE IICB                                      */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0486
*     DO;                           /* USE MASK IN IICB TO RESTORE   */
         B     @RC00478                                            0486
@RF00478 DS    0H                                                  0487
*       IF MRECFM=ON THEN           /* IF RECFM SET BY OPEN THEN     */
         TM    MRECFM(RIICB),B'00001000'                           0487
         BNO   @RF00487                                            0487
*         DCBRECFM=ZERO;            /* SET DCBRECFM TO ZERO          */
         MVI   DCBRECFM+28(R3),X'00'                               0488
*       IF MOPTCD=ON THEN           /* IF OPTCD SET BY OPEN THEN     */
@RF00487 TM    MOPTCD(RIICB),B'00010000'                           0489
         BNO   @RF00489                                            0489
*         DCBOPTCD=ZERO;            /* SET DCBOPTCD TO ZERO          */
         MVI   DCBOPTCD+52(R3),X'00'                               0490
*       IF MKEYLE=ON THEN           /* IF KEYLE SET BY OPEN THEN     */
@RF00489 TM    MKEYLE(RIICB),B'00000001'                           0491
         BNO   @RF00491                                            0491
*         DCBKEYLE=ZERO;            /* SET DCBKEYLE TO ZERO          */
         MVI   DCBKEYLE+16(R3),X'00'                               0492
*       IF MRKP=ON THEN             /* IF RKP SET BY OPEN THEN       */
@RF00491 TM    MRKP(RIICB),B'10000000'                             0493
         BNO   @RF00493                                            0493
*         DCBRKP=ZERO;              /* SET DCBRKP TO ZERO            */
         SLR   @15,@15                                             0494
         STH   @15,DCBRKP+52(,R3)                                  0494
*       IF MLRECL=ON THEN           /* IF LRECL SET BY OPEN THEN     */
@RF00493 TM    MLRECL(RIICB),B'01000000'                           0495
         BNO   @RF00495                                            0495
*         DCBLRECL=ZERO;            /* SET DCBLRECL TO ZERO          */
         SLR   @15,@15                                             0496
         STH   @15,DCBLRECL+52(,R3)                                0496
*       IF MBLKSI=ON THEN           /* IF BLKSI SET BY OPEN THEN     */
@RF00495 TM    MBLKSI(RIICB),B'00100000'                           0497
         BNO   @RF00497                                            0497
*         DCBBLKSI=ZERO;            /* SET DCBBLKSI TO ZERO          */
         SLR   @15,@15                                             0498
         STH   @15,DCBBLKSI+52(,R3)                                0498
*       IF MBFALN=ON THEN           /* IF BFALN SET BY OPEN THEN     */
@RF00497 TM    MBFALN(RIICB),B'10000000'                           0499
         BNO   @RF00499                                            0499
*         DCBBFA=BZERO;             /* SET DCBBFA TO ZERO            */
         NI    DCBBFA+28(R3),B'11111100'                           0500
*       IF MBUFNO=ON THEN           /* IF BUFNO SET BY OPEN THEN     */
@RF00499 TM    MBUFNO(RIICB),B'00000010'                           0501
         BNO   @RF00501                                            0501
*         DCBBUFNO=ZERO;            /* SET DCBBUFNO TO ZERO          */
         MVI   DCBBUFNO+16(R3),X'00'                               0502
*       IF MBUFL=ON THEN            /* IF BUFL SET BY OPEN THEN      */
@RF00501 TM    MBUFL(RIICB),B'00000100'                            0503
         BNO   @RF00503                                            0503
*         DCBBUFL=ZERO;             /* SET DCBBUFL TO ZERO           */
*                                                                  0504
         SLR   @15,@15                                             0504
         STH   @15,DCBBUFL+16(,R3)                                 0504
*       /*************************************************************/
*       /*                                                           */
*       /* RESTORE THE DCB FOUNDATION SEGMENT TO PRE-OPEN STATUS     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0505
*       RESPECIFY                                                  0505
*         IHADCB BASED(DXPDCBAD);   /* POINTER TO COPY               */
@RF00503 DS    0H                                                  0506
*       RWORK1=ADDR(IHADCS25);      /* POINT TO FOUNDATION SEGMENT OF
*                                      COPY                          */
         LA    @15,40                                              0506
         L     RWORK1,DXPDCBAD(,RCORE)                             0506
         ALR   RWORK1,@15                                          0506
*       RESPECIFY                                                  0507
*         IHADCB BASED(R3);         /* RESUME USER DCB DESCRIPTION   */
*       DCBMACR=RWORK1->DCBMACRF;   /* MACRF FROM COPY DCB           */
         ALR   @15,R3                                              0508
         MVC   DCBMACR(2,@15),DCBMACRF(RWORK1)                     0508
*       DCBIFLG=RWORK1->DCBIFLGS;   /* IFLGS FROM COPY DCB           */
         MVC   DCBIFLG(1,@15),DCBIFLGS(RWORK1)                     0509
*       RESPECIFY                                                  0510
*         RTIOT RESTRICTED;                                        0510
*       RTIOT=DXTIOTAD;             /* LOCATE TIOT DD ENTRY          */
         L     RTIOT,DXTIOTAD(,RCORE)                              0511
*       DCBDDNAM=TIOEDDNM;          /* RESTORE DDNAME IN DCB         */
         MVC   DCBDDNAM(8,@15),TIOEDDNM(RTIOT)                     0512
*       RESPECIFY                                                  0513
*         RTIOT UNRESTRICTED;                                      0513
*       DCBDEVT=ZERO;               /* CLEAR DEVICE TYPE             */
         MVI   DCBDEVT+16(R3),X'00'                                0514
*       DCBNCRHI=ZERO;              /* CLEAR DCBNCRHI                */
         SLR   @10,@10                                             0515
         LA    @05,52                                              0515
         ALR   @05,R3                                              0515
         STH   @10,DCBNCRHI(,@05)                                  0515
*       DCBRORG2=ZERO;              /* CLEAR DCB REORGANIZATION      */
         STH   @10,DCBRORG2(,@05)                                  0516
*       DCBSVCXA=ONE;               /* CLEAR SVC EXIT LIST PTR       */
         LA    @10,1                                               0517
         STCM  @10,7,DCBSVCXA+28(R3)                               0517
*       DCBWKPT1=ONE;               /* CLEAR DCB WORK AREA PTR       */
         ST    @10,DCBWKPT1(,@05)                                  0518
*       DCBWKPT5=ONE;               /* CLEAR DCB WORK AREA PTR       */
         ST    @10,DCBWKPT5(,@05)                                  0519
*       DCBWKPT6=ONE;               /* CLEAR DCB WORK AREA PTR       */
*                                                                  0520
         ST    @10,DCBWKPT6(,@05)                                  0520
*       /*************************************************************/
*       /*                                                           */
*       /* SET DCB OPEN FLAGS                                        */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0521
*       DCBOFLGS=ZERO;              /* CLEAR OFLGS                   */
         MVI   DCBOFLGS(@15),X'00'                                 0521
*       DCBOFOPN=OFF;               /* OPEN BIT OFF - 0              */
*       DCBOFIOF=OFF;               /* BUSY BIT OFF - 0              */
*       DCBOFUEX=ON;                /* LOCK BIT OFF - 1              */
         OI    DCBOFUEX(@15),B'00000010'                           0524
         NI    DCBOFOPN(@15),B'11101110'                           0524
*     END;                          /* END CLOSE RESET               */
*   END DCBRESET;                                                  0526
@EL00010 DS    0H                                                  0526
@EF00010 DS    0H                                                  0526
@ER00010 BR    @14                                                 0526
*                                                                  0527
*   /*****************************************************************/
*   /*                                                               */
*   /* THE PURPOSE OF THIS ROUTINE IS TO FREE UP THE CORE WHICH HAD  */
*   /* BEEN OBTAINED PRIOR TO THE TIME OF ERROR.                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0527
*FREERSRC:                                                         0527
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0527
FREERSRC DS    0H                                                  0528
*   RESPECIFY                                                      0528
*     RLKRETSV RESTRICTED;                                         0528
*   RLKRETSV=R14;                   /* SAVE RETURN ADDR              */
         LR    RLKRETSV,R14                                        0529
*   IF RDEB^=ZERO&                  /* IF DEB IS PRESENT AND         */
*       DEBXTNP^=ZERO&              /* DEB EXTENSION FILLED IN AND   */
*       AUDDEBXF=OFF THEN           /* NO ATTEMPT HAS BEEN MADE TO   */
         SLR   @15,@15                                             0530
         CR    RDEB,@15                                            0530
         BE    @RF00530                                            0530
         LR    @05,RDEB                                            0530
         AL    @05,@CF02738                                        0530
         L     @05,DEBXTNP-28(,@05)                                0530
         CR    @05,@15                                             0530
         BE    @RF00530                                            0530
         TM    AUDDEBXF(RIICB),B'00000100'                         0530
         BNZ   @RF00530                                            0530
*     DO;                           /* FREE EXTENSION - THEN FREE IT */
*       DO;                         /* MODESET EXTKEY(DATAMGT)       */
*         SPKA(80);                 /* SET PSW KEY                   */
         LA    @15,80                                              0533
         SPKA  0(@15)                                              0533
*       END;                        /* MODESET EXTKEY(DATAMGT) FOR 0534
*                                      DEBPOOL                       */
*       DO;                         /* FREEMAIN(RC)                0535
*                                      LV(LENGTH(DEBXTN))A(DEBXTN) 0535
*                                      SP(DEBPOOL)                   */
*         RESPECIFY                                                0536
*          (GPR01F,                                                0536
*           GPR15F,                                                0536
*           GPR00F) RESTRICTED;                                    0536
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0537
*         GPR15F=1;                 /* SET TYPE                      */
         LA    GPR15F,1                                            0538
*         GPR00F=LENGTH(DEBXTN);    /* LENGTH REQUESTED              */
         LA    GPR00F,32                                           0539
*         GPR01F=ADDR(DEBXTN);      /* SET REGISTER ONE              */
         LR    GPR01F,@05                                          0540
*         GPR15F=GPR15F+((DEBPOOL)*256);/* SUBPOOL VALUE             */
         AL    GPR15F,@CF02724                                     0541
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0542
*         RESPECIFY                                                0543
*          (GPR01F,                                                0543
*           GPR15F,                                                0543
*           GPR00F) UNRESTRICTED;                                  0543
*       END;                        /* FREEMAIN(RC)                0544
*                                      LV(LENGTH(DEBXTN))A(DEBXTN) 0544
*                                      SP(DEBPOOL)                   */
*     END;                                                         0545
*   IF RDEB^=ZERO THEN              /* IF DEB THEN FREE IT           */
@RF00530 LTR   RDEB,RDEB                                           0546
         BZ    @RF00546                                            0546
*     DO;                                                          0547
*       DO;                         /* MODESET EXTKEY(DATAMGT)       */
*         SPKA(80);                 /* SET PSW KEY                   */
         LA    @15,80                                              0549
         SPKA  0(@15)                                              0549
*       END;                        /* MODESET EXTKEY(DATAMGT) KEY OF
*                                      DEB                           */
*       DO;                         /* FREEMAIN(RC)                0551
*                                      LV(DEBLNGTH*DWLGTH)A(DEB)   0551
*                                      SP(DEBPOOL)                   */
*         RESPECIFY                                                0552
*          (GPR01F,                                                0552
*           GPR15F,                                                0552
*           GPR00F) RESTRICTED;                                    0552
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0553
*         GPR15F=1;                 /* SET TYPE                      */
         LA    GPR15F,1                                            0554
*         GPR00F=DEBLNGTH*DWLGTH;   /* LENGTH REQUESTED              */
         LR    @05,RDEB                                            0555
         SL    @05,@CF01939                                        0555
         SLR   GPR00F,GPR00F                                       0555
         IC    GPR00F,DEBLNGTH(,@05)                               0555
         SLA   GPR00F,3                                            0555
*         GPR01F=ADDR(DEB);         /* SET REGISTER ONE              */
         LR    GPR01F,@05                                          0556
*         GPR15F=GPR15F+((DEBPOOL)*256);/* SUBPOOL VALUE             */
         AL    GPR15F,@CF02724                                     0557
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0558
*         RESPECIFY                                                0559
*          (GPR01F,                                                0559
*           GPR15F,                                                0559
*           GPR00F) UNRESTRICTED;                                  0559
*       END;                        /* FREEMAIN(RC)                0560
*                                      LV(DEBLNGTH*DWLGTH)A(DEB)   0560
*                                      SP(DEBPOOL) FREE DEB PROPER 0560
*                                                            @ZA11603*/
*     END;                                                         0561
*   DO;                             /* MODESET KEYADDR(DXUKEY)       */
@RF00546 DS    0H                                                  0563
*     SPKA(DXUKEY);                 /* SET PSW KEY                   */
         SLR   @15,@15                                             0563
         IC    @15,DXUKEY(,RCORE)                                  0563
         SPKA  0(@15)                                              0563
*   END;                            /* MODESET KEYADDR(DXUKEY) RESUME
*                                      USER KEY                      */
*   AUDCDEB=ZERO;                   /* INDICATE DEB FREED            */
         SLR   @15,@15                                             0565
         ST    @15,AUDCDEB(,RIICB)                                 0565
*   RWORK1=ADDR(IIGMNTRY)-LENGTH(IIGMNTRY);/* BACK UP TO LAST ENTRY
*                                      IN LIST                       */
         LA    RWORK1,IIAUD(,RIICB)                                0566
         AH    RWORK1,IIGMCNTR(,RIICB)                             0566
         SL    RWORK1,@CF00045                                     0566
*   DO WHILE RWORK1>ADDR(IIGMAUD);  /* LOOP THROUGH LIST AND ISSUE 0567
*                                      FREEMAINS ON CORE             */
         B     @DE00567                                            0567
@DL00567 DS    0H                                                  0568
*     IF RWORK1->IIGMADDR^=ZERO THEN/* FREE CORE IF PRESENT  @ZA31645*/
         L     @15,IIGMADDR(,RWORK1)                               0568
         LTR   @15,@15                                             0568
         BZ    @RF00568                                            0568
*       DO;                         /* FREEMAIN(RC) LV(RWORK1->IIGMLE
*                                      N)A(RWORK1->CORELOC)        0569
*                                      SP(RWORK1->IIGMPOOL)          */
*         RESPECIFY                                                0570
*          (GPR01F,                                                0570
*           GPR15F,                                                0570
*           GPR00F) RESTRICTED;                                    0570
*         GPR01F=0;                 /* REG 1 MUST BE ZERO            */
         SLR   GPR01F,GPR01F                                       0571
*         GPR15F=1;                 /* SET TYPE                      */
         LA    GPR15F,1                                            0572
*         GPR00F=RWORK1->IIGMLEN;   /* LENGTH REQUESTED              */
         L     GPR00F,IIGMLEN-1(,RWORK1)                           0573
         ICM   GPR00F,8,@CB02735                                   0573
*         GPR01F=ADDR(RWORK1->CORELOC);/* SET REGISTER ONE           */
         LR    GPR01F,RWORK1                                       0574
*         GPR15F=GPR15F+((RWORK1->IIGMPOOL)*256);/* SUBPOOL VALUE    */
         SLR   @05,@05                                             0575
         IC    @05,IIGMPOOL(,RWORK1)                               0575
         SLA   @05,8                                               0575
         ALR   GPR15F,@05                                          0575
*         SVC(120);                 /* RC/RU-FORM OF GETMAIN         */
         SVC   120                                                 0576
*         RESPECIFY                                                0577
*          (GPR01F,                                                0577
*           GPR15F,                                                0577
*           GPR00F) UNRESTRICTED;                                  0577
*       END;                        /* FREEMAIN(RC) LV(RWORK1->IIGMLE
*                                      N)A(RWORK1->CORELOC)        0578
*                                      SP(RWORK1->IIGMPOOL)  @ZA31645*/
*     RWORK1=RWORK1-LENGTH(IIGMNTRY);/* MOVE TO NEXT                 */
@RF00568 SL    RWORK1,@CF00045                                     0579
*   END;                                                           0580
@DE00567 LA    @15,IIGMAUD(,RIICB)                                 0580
         CR    RWORK1,@15                                          0580
         BH    @DL00567                                            0580
*   R14=RLKRETSV;                   /* RESTORE RETURN ADDR           */
         LR    R14,RLKRETSV                                        0581
*   RESPECIFY                                                      0582
*     RLKRETSV UNRESTRICTED;                                       0582
*   END FREERSRC;                                                  0583
@EL00011 DS    0H                                                  0583
@EF00011 DS    0H                                                  0583
@ER00011 BR    @14                                                 0583
*   GEN(IDAPATCH);                  /* PATCH AREA                    */
         IDAPATCH
*   END IDAICIA1                                                   0585
*                                                                  0585
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IDAIIREG)                                       */
*/*%INCLUDE SYSLIB  (IDAIICB )                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDARPLE )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*/*%INCLUDE SYSLIB  (IECDSECT)                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IFGEXLST)                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*                                                                  0585
*       ;                                                          0585
         B     @EL00001                                            0585
@DATA    DS    0H
@CH00150 DC    H'60'
@DATD    DSECT
         DS    0F
IDAICIA1 CSECT
         DS    0F
@CF00087 DC    F'1'
@CF00045 DC    F'8'
@CF00210 DC    F'16'
@CF01939 DC    F'36'
@CF02017 DC    F'80'
@CF01453 DC    F'96'
@CF02724 DC    F'58880'
@CF02718 DC    F'64000'
@CF02738 DC    F'-8'
@CF02734 DC    F'-4'
@DATD    DSECT
         DS    0D
DEBDAPTR DS    A
DEBEXPTR DS    A
DEBSBPTR DS    A
SDWAPTR  DS    A
IDAICIA1 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CB02545 DC    X'FFFFFFFF'
@CB02622 DC    X'03B000'
@CB02624 DC    X'031000'
@CB02735 DC    X'00'
SDUMPHDR DC    CL60'ISAM INTRFC,OPEN,IDA0192I,IDAICIA1,**AUDIT NOT STARC
               TED**'
         DC    CL60'ISAM INTRFC,OPEN,IDA0192I,IDAICIA1,**IDA0192I IN COC
               NTROL**'
         DC    CL60'ISAM INTRFC,CLOSE,IDA0200S,IDAICIA1,**AUDIT UNAVAILC
               ABLE**'
         DC    CL60'ISAM INTRFC,CLOSE,IDA0200S,IDAICIA1,**IDAIIPM1 IN CC
               ONTROL**'
         DC    CL60'ISAM INTRFC,CLOSE,IDA0200S,IDAICIA1,**IDA0200S IN CC
               ONTROL**'
IDAICIA1 CSECT
*                                                          /*@ZA12204*/
SDUMPPL  SDUMP MF=L                                            @ZA12204
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDAICIA1 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
GPR00F   EQU   @00
GPR01F   EQU   @01
GPR15F   EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
R1       EQU   @01
RDCB     EQU   @01
RIICB    EQU   @02
R3       EQU   @03
RRPL     EQU   @03
RCORE    EQU   @04
R5       EQU   @05
RWORK1   EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
RTIOT    EQU   @09
RLKRETSV EQU   @10
R11      EQU   @11
RDEB     EQU   @11
DEBPTR   EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
GPR14F   EQU   @14
JFCBPTR  EQU   @09
RACB     EQU   @06
RBUFF    EQU   @05
RDECB    EQU   @01
RFMADDR  EQU   @07
RGMLEN   EQU   @09
RGMSP    EQU   @08
RPARC    EQU   @07
RWORK2   EQU   @07
RWORK3   EQU   @08
R0       EQU   @00
R10      EQU   @10
R15      EQU   @15
R2       EQU   @02
R4       EQU   @04
R6       EQU   @06
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
CVTPTR   EQU   16
IDAIICB  EQU   0
IIACBPTR EQU   IDAIICB+8
IIW1CBF  EQU   IDAIICB+16
IIFLAG1  EQU   IDAIICB+24
IIFLAG2  EQU   IDAIICB+28
MRKP     EQU   IIFLAG2
MLRECL   EQU   IIFLAG2
MBLKSI   EQU   IIFLAG2
MOPTCD   EQU   IIFLAG2
MRECFM   EQU   IIFLAG2
MBUFL    EQU   IIFLAG2
MBUFNO   EQU   IIFLAG2
MKEYLE   EQU   IIFLAG2
IIFLAG3  EQU   IDAIICB+36
MBFALN   EQU   IIFLAG3
IISAMSYN EQU   IDAIICB+52
IIREGSAV EQU   IDAIICB+60
IIAUD    EQU   IDAIICB+132
IIAUDHDR EQU   IIAUD
IIAUDFL1 EQU   IIAUDHDR
AUDACBOP EQU   IIAUDFL1
AUDACBRO EQU   IIAUDFL1
AUDDCBEX EQU   IIAUDFL1
AUDDCBRT EQU   IIAUDFL1
AUDPRMOD EQU   IIAUDFL1
AUDIISYN EQU   IIAUDFL1
AUDURSYN EQU   IIAUDFL1
IIAUDFL2 EQU   IIAUDHDR+1
AUDIIFBF EQU   IIAUDFL2
AUDACBCL EQU   IIAUDFL2
AUDACBRC EQU   IIAUDFL2
AUDBFREX EQU   IIAUDFL2
AUDBFRRT EQU   IIAUDFL2
AUDDEBXF EQU   IIAUDFL2
IIGMCNTR EQU   IIAUDHDR+2
IIGMAUD  EQU   IIAUD+4
AUDCSPLI EQU   IIGMAUD+4
AUDCLI   EQU   AUDCSPLI+1
AUDCDEB  EQU   IIGMAUD+8
AUDCSPLD EQU   IIGMAUD+12
AUDCBFRS EQU   IIGMAUD+16
AUDCSPLB EQU   IIGMAUD+20
AUDCLB   EQU   AUDCSPLB+1
AUDCMSGA EQU   IIGMAUD+24
AUDCSPLM EQU   IIGMAUD+28
AUDCLM   EQU   AUDCSPLM+1
IIGMNTRY EQU   0
IIGMADDR EQU   IIGMNTRY
IIGMSPLG EQU   IIGMNTRY+4
IIGMPOOL EQU   IIGMSPLG
IIGMLEN  EQU   IIGMSPLG+1
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBKEYLE EQU   DCBRELB
DCBREL   EQU   DCBRELB+1
DCBDEVT  EQU   DCBREL
DCBBUFCB EQU   IHADCS11+4
DCBBUFNO EQU   DCBBUFCB
DCBBUFL  EQU   IHADCS11+8
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBSVCXA EQU   DCBSVCXL+1
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBBFA   EQU   DCBBFTEK
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
IHADCS24 EQU   0
DCBDDNAM EQU   IHADCS24
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFIOF EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBIBPCT EQU   DCBIFLG
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
DCBIFPCT EQU   DCBIFLGS
IHADCS27 EQU   0
DCBGET   EQU   IHADCS27
DCBPUT   EQU   DCBGET
DCBGETA  EQU   DCBPUT+1
IHADCS29 EQU   0
DCBOPTCD EQU   IHADCS29
DCBMAC   EQU   IHADCS29+1
DCBSYNAD EQU   IHADCS29+4
DCBRKP   EQU   IHADCS29+8
DCBBLKSI EQU   IHADCS29+10
DCBMSHI  EQU   IHADCS29+20
DCBSETL  EQU   IHADCS29+24
DCBEXCD1 EQU   IHADCS29+28
DCBEXCD2 EQU   IHADCS29+29
DCBEXLTH EQU   DCBEXCD2
DCBLRECL EQU   IHADCS29+30
DCBESETL EQU   IHADCS29+32
DCBLRAN  EQU   IHADCS29+36
DCBLWKN  EQU   IHADCS29+40
DCBFREED EQU   IHADCS29+56
DCBNCRHI EQU   IHADCS29+98
DCBST    EQU   IHADCS29+108
DCBRORG2 EQU   IHADCS29+154
DCBWKPT1 EQU   IHADCS29+176
DCBWKPT5 EQU   IHADCS29+192
DCBWKPT6 EQU   IHADCS29+196
IHADCS55 EQU   0
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IDARPLE  EQU   0
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBDEBB  EQU   DEBDEBAD+1
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBWKPT5 EQU   DEBACS07+12
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBLNGTH EQU   DEBPREFX+12
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCBPTR   EQU   4
TCB      EQU   0
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBDEB   EQU   TCB+8
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
SDWA     EQU   0
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWAREQ  EQU   SDWACMPF
SDWACMPC EQU   SDWAABCC+1
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAMCHK EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWANRBE EQU   SDWAERRD
SDWAIOFS EQU   SDWA+238
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADSAS EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWAFRM1 EQU   SDWADPSL
SDWATO1  EQU   SDWADPSL+4
SDWAFRM2 EQU   SDWADPSL+8
SDWATO2  EQU   SDWADPSL+12
SDWAFRM3 EQU   SDWADPSL+16
SDWATO3  EQU   SDWADPSL+20
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
FORCORE  EQU   0
DXDSCB   EQU   FORCORE
DXDAADDR EQU   FORCORE+312
DXDCB    EQU   FORCORE+320
DXCCW    EQU   FORCORE+368
DXVOLSR  EQU   FORCORE+500
DXVOLSR1 EQU   DXVOLSR
DXVOLSR2 EQU   DXVOLSR+6
DXVOLSR3 EQU   DXVOLSR+12
DXUKEY   EQU   FORCORE+526
DXTIOTAD EQU   FORCORE+556
DXUCBSAV EQU   FORCORE+564
DXUDCBAD EQU   FORCORE+568
DXPDCBAD EQU   FORCORE+572
DXATCOM1 EQU   FORCORE+588
DXATGENS EQU   DXATCOM1
DXATVGIV EQU   DXATGENS
DXATOUTA EQU   DXATCOM1+2
DXATDACC EQU   DXATCOM1+3
DXATCOM2 EQU   FORCORE+592
DXATEOV  EQU   DXATCOM2
DXATOPEN EQU   DXATCOM2+1
DXATALL  EQU   DXATCOM2+2
DXATCOM4 EQU   FORCORE+600
DXATEXC1 EQU   FORCORE+604
DXATEXB1 EQU   DXATEXC1
DXATEXC2 EQU   FORCORE+608
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IFGEXLST EQU   0
EXLCOMN  EQU   IFGEXLST
EXLLEN   EQU   EXLCOMN+2
EXLEODF  EQU   EXLCOMN+5
EXLSYNF  EQU   EXLCOMN+10
EXLLERF  EQU   EXLCOMN+15
EXLSCIPF EQU   EXLCOMN+20
EXLUPADF EQU   EXLSCIPF
EXLSCIPS EQU   EXLUPADF
EXLSCIPA EQU   EXLUPADF
EXLSCIPK EQU   EXLUPADF
EXLSCIPP EQU   EXLCOMN+21
EXLLGNF  EQU   EXLCOMN+25
EXLJRNF  EQU   EXLCOMN+30
EXLOPNF  EQU   EXLCOMN+35
IFGEXLEF EQU   0
EXLENTRY EQU   IFGEXLEF
EXLFLAG  EQU   EXLENTRY
EXLENFL  EQU   EXLFLAG
EXLEXITP EQU   EXLENTRY+1
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
IDAAMB   EQU   0
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDNEST  EQU   IDAAMDSB+4
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
CORELOC  EQU   0
SDUMPLST EQU   0
SDUPARML EQU   SDUMPLST
SDUCOREL EQU   SDUMPLST+24
SDUFROM1 EQU   SDUCOREL
SDUTO1   EQU   SDUCOREL+4
SDUFROM2 EQU   SDUCOREL+8
SDUTO2   EQU   SDUCOREL+12
SDUFROM3 EQU   SDUCOREL+16
SDUTO3   EQU   SDUCOREL+20
SDUFROM4 EQU   SDUCOREL+24
SDUTO4   EQU   SDUCOREL+28
SDUFROM5 EQU   SDUCOREL+32
SDUTO5   EQU   SDUCOREL+36
SDUFROM6 EQU   SDUCOREL+40
SDUTO6   EQU   SDUCOREL+44
SDUFROM7 EQU   SDUCOREL+48
SDUTO7   EQU   SDUCOREL+52
SDUFROM8 EQU   SDUCOREL+56
SDUTO8   EQU   SDUCOREL+60
SDUFROM9 EQU   SDUCOREL+64
SDUTO9   EQU   SDUCOREL+68
SDUFROMA EQU   SDUCOREL+72
SDUTOA   EQU   SDUCOREL+76
SDUHDR   EQU   SDUMPLST+104
SDULGTH  EQU   SDUHDR
SDUMSG   EQU   SDUHDR+1
ENDLIST  EQU   0
ENDSW    EQU   ENDLIST
PCOPYDCB EQU   16
CVTTCBDW EQU   0
TIOTDD   EQU   0
TIOEDDNM EQU   TIOTDD+4
CVTSVDCB EQU   84
IKEBC    EQU   0
IKEBF15  EQU   0
IKEBF31  EQU   0
IKEBP15  EQU   0
IKEBP31  EQU   0
IKEBP8   EQU   0
TIOTPTR  EQU   12
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
PSARSVTE EQU   PSARSVT
IIWAOWA  EQU   DXCCW
@NM00123 EQU   IIWAOWA+16
MAINR0   EQU   IIWAOWA+20
IIRSAVE  EQU   IIWAOWA+28
IDARSTAT EQU   DXATEXC1
RSTATDEF EQU   IDARSTAT
IDARIICL EQU   RSTATDEF
IDARIIOP EQU   RSTATDEF
IIAUDPTR EQU   DXATCOM4+8
DCBII    EQU   DCBGET
DCBIIGET EQU   DCBII+1
DCBIIPUT EQU   DCBIIGET
ISAMDCB  EQU   DCBKEYLE
FLC      EQU   PSA
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00170 EQU   DCBII
@NM00169 EQU   IDARSTAT+3
@NM00168 EQU   IDARSTAT+2
@NM00167 EQU   RSTATDEF
@NM00166 EQU   RSTATDEF
@NM00125 EQU   IIWAOWA+32
@NM00124 EQU   IIWAOWA+24
MAINLEN  EQU   MAINR0+1
MAINPOOL EQU   MAINR0
MAINADDR EQU   @NM00123
@NM00122 EQU   IIWAOWA+12
IIRSAVE3 EQU   IIWAOWA+8
IIRSAVE2 EQU   IIWAOWA+4
IIRSAVE1 EQU   IIWAOWA
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
TIOEFSRT EQU   TIOTDD+17
@NM00172 EQU   TIOTDD+12
@NM00171 EQU   TIOTDD
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00165 EQU   IDAAMDSB+41
@NM00164 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDCINV  EQU   IDAAMDSB+20
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDKEYLN EQU   IDAAMDSB+8
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00163 EQU   AMBCSWD1+1
@NM00162 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBLSR   EQU   AMBAFLG
@NM00161 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00160 EQU   IDAAMB+68
AMBIWA   EQU   IDAAMB+64
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00159 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00158 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00157 EQU   AMBINFL
@NM00156 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00155 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00154 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00153 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00152 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLIX   EQU   IDAAMBL+56
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00151 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00150 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00149 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00148 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00147 EQU   IDAAMBL+31
@NM00146 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00145 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
EXLEADDR EQU   EXLEXITP
@NM00144 EQU   EXLENFL
EXLLNK   EQU   EXLENFL
EXLACTM  EQU   EXLENFL
EXLSPEC  EQU   EXLENFL
EXLOPNP  EQU   EXLCOMN+36
@NM00143 EQU   EXLOPNF
EXLOPNK  EQU   EXLOPNF
EXLOPNA  EQU   EXLOPNF
EXLOPNS  EQU   EXLOPNF
EXLJRNP  EQU   EXLCOMN+31
@NM00142 EQU   EXLJRNF
EXLJRNK  EQU   EXLJRNF
EXLJRNA  EQU   EXLJRNF
EXLJRNS  EQU   EXLJRNF
EXLLGNP  EQU   EXLCOMN+26
@NM00141 EQU   EXLLGNF
EXLLGNK  EQU   EXLLGNF
EXLLGNA  EQU   EXLLGNF
EXLLGNS  EQU   EXLLGNF
EXLUPADP EQU   EXLSCIPP
@NM00140 EQU   EXLUPADF
EXLUPADK EQU   EXLSCIPK
EXLUPADA EQU   EXLSCIPA
EXLUPADS EQU   EXLSCIPS
EXLLERP  EQU   EXLCOMN+16
@NM00139 EQU   EXLLERF
EXLLERK  EQU   EXLLERF
EXLLERA  EQU   EXLLERF
EXLLERS  EQU   EXLLERF
EXLSYNP  EQU   EXLCOMN+11
@NM00138 EQU   EXLSYNF
EXLSYNK  EQU   EXLSYNF
EXLSYNA  EQU   EXLSYNF
EXLSYNS  EQU   EXLSYNF
EXLEODP  EQU   EXLCOMN+6
@NM00137 EQU   EXLEODF
EXLEODK  EQU   EXLEODF
EXLEODA  EQU   EXLEODF
EXLEODS  EQU   EXLEODF
@NM00136 EQU   EXLCOMN+4
EXLLEN2  EQU   EXLLEN
EXLSTYP  EQU   EXLCOMN+1
EXLID    EQU   EXLCOMN
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00135 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00134 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00133 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00132 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00131 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00130 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00129 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00128 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00127 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00126 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
DSECTSIZ EQU   FORCORE+612
DXATEXB2 EQU   DXATEXC2
DXEXHASP EQU   DXATEXB1
DXATCOM3 EQU   FORCORE+596
@NM00121 EQU   DXATCOM2+3
@NM00120 EQU   DXATALL
DXATSWAP EQU   DXATALL
DXATFC   EQU   DXATALL
@NM00119 EQU   DXATOPEN
DXATDFIN EQU   DXATOPEN
DXATDSIN EQU   DXATOPEN
DXATMODM EQU   DXATOPEN
DXATMODE EQU   DXATOPEN
DXATMODS EQU   DXATOPEN
DXATIGN  EQU   DXATOPEN
DXATVCAT EQU   DXATEOV
DXATDADM EQU   DXATEOV
DXATREMT EQU   DXATEOV
DXATDNEW EQU   DXATEOV
DXATDFRE EQU   DXATEOV
DXATDCHN EQU   DXATEOV
DXATNVOL EQU   DXATEOV
DXATCCAT EQU   DXATEOV
DXATRDDB EQU   DXATDACC
DXATEOF  EQU   DXATDACC
@NM00118 EQU   DXATDACC
DXATSMF  EQU   DXATDACC
DXATUPDB EQU   DXATDACC
DXATDRCT EQU   DXATDACC
DXATTRAK EQU   DXATDACC
DXATF1CE EQU   DXATDACC
DXATNSL  EQU   DXATOUTA
DXATTTM2 EQU   DXATOUTA
DXATTTM1 EQU   DXATOUTA
DXATTRL2 EQU   DXATOUTA
DXATTRL1 EQU   DXATOUTA
DXATDATM EQU   DXATOUTA
DXATHDTM EQU   DXATOUTA
DXATVLHD EQU   DXATOUTA
DXATCLOS EQU   DXATCOM1+1
DXATSRET EQU   DXATGENS
DXATVCIG EQU   DXATVGIV
DXATVTMG EQU   DXATVGIV
DXATVSMG EQU   DXATVGIV
DXATJFCB EQU   DXATGENS
DXATDISP EQU   DXATGENS
DXATREFR EQU   DXATGENS
DXATDMCT EQU   DXATGENS
DXMSGADR EQU   FORCORE+584
DXPRPARC EQU   FORCORE+580
DXUDCBML EQU   FORCORE+578
DXUDCBPL EQU   FORCORE+576
DXPACBAD EQU   DXPDCBAD+1
@NM00117 EQU   DXPDCBAD
DXUACBAD EQU   DXUDCBAD+1
@NM00116 EQU   DXUDCBAD
DXUCBSVV EQU   DXUCBSAV+1
@NM00115 EQU   DXUCBSAV
DXUCBADR EQU   FORCORE+560
DXDEBXAD EQU   FORCORE+552
DXDSAB   EQU   FORCORE+548
DXDSABAD EQU   FORCORE+544
DXDSABQD EQU   FORCORE+540
DXJSCBAD EQU   FORCORE+536
DXTCBADR EQU   FORCORE+532
DXASCBAD EQU   FORCORE+528
DXEXTSW  EQU   FORCORE+527
DXWKEYSV EQU   FORCORE+525
DXRESSW  EQU   FORCORE+524
DXUNITOF EQU   FORCORE+522
DXNOUNIT EQU   FORCORE+520
DXVOLSEQ EQU   FORCORE+518
DXVOLMT3 EQU   DXVOLSR3
DXVOLMT2 EQU   DXVOLSR2
DXVOLMT1 EQU   DXVOLSR1
DXWORK4  EQU   FORCORE+496
DXWORK3  EQU   FORCORE+492
DXWORK2  EQU   FORCORE+488
DXWORK1  EQU   FORCORE+484
DXWORK   EQU   FORCORE+480
DXXCTL   EQU   FORCORE+472
@NM00114 EQU   FORCORE+464
DXCCW12  EQU   DXCCW+88
DXCCW11  EQU   DXCCW+80
DXCCW10  EQU   DXCCW+72
DXCCW9   EQU   DXCCW+64
DXCCW8   EQU   DXCCW+56
DXCCW7   EQU   DXCCW+48
DXCCW6   EQU   DXCCW+40
DXCCW5   EQU   DXCCW+32
DXCCW4   EQU   DXCCW+24
DXCCW3   EQU   DXCCW+16
DXCCW2   EQU   DXCCW+8
DXCCW1   EQU   DXCCW
DXDCBDEB EQU   DXDCB+44
@NM00113 EQU   DXDCB+24
DXDEBDCB EQU   DXDCB+20
@NM00112 EQU   DXDCB
DXDEB    EQU   DXDAADDR+4
@NM00111 EQU   DXDAADDR
DXIOB    EQU   FORCORE+280
DXECB    EQU   FORCORE+276
DXJBF    EQU   FORCORE+100
DSCCORE  EQU   FORCORE+96
DXLBL    EQU   DXDSCB
@NM00110 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00109 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00108 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00107 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
@NM00106 EQU   SDWADDAT+3
@NM00105 EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
@NM00104 EQU   SDWADDAT+1
@NM00103 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00102 EQU   SDWADUMP+2
@NM00101 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00100 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
@NM00099 EQU   SDWALKWA+32
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00098 EQU   SDWAACF3
@NM00097 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00096 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00095 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00094 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
SDWARTYA EQU   SDWA+240
@NM00093 EQU   SDWA+239
@NM00092 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00091 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00090 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00089 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00088 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00087 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00086 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00085 EQU   SDWAINC2
@NM00084 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00083 EQU   SDWAILC2
@NM00082 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00081 EQU   SDWANXT2
@NM00080 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00079 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00078 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00077 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00076 EQU   SDWAINC1
@NM00075 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00074 EQU   SDWAILC1
@NM00073 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00072 EQU   SDWANXT1
@NM00071 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00070 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00069 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00068 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00067 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00066 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00065 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
@NM00064 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00063 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAPARM EQU   SDWA
@NM00038 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00037 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBACTIV EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBCCPVI EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBRSV96 EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBRV306 EQU   TCB+240
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00036 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00035 EQU   TCBPMASK
TCBRBP   EQU   TCB
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
DEBXSAMB EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBESMVR EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00034 EQU   DEBACS08+12
@NM00033 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00032 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00031 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBUCBA  EQU   DEBUCBAD+1
DEBDVMOD EQU   DEBUCBAD
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBDCBB  EQU   DEBDCBAD+1
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBNMEXT EQU   DEBUSRPG
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
RPLSAVE2 EQU   IDARPLE+24
RPLSAVE  EQU   IDARPLE+20
@NM00030 EQU   IDARPLE+17
RPLIITSB EQU   IDARPLE+16
RPLRPLPT EQU   IDARPLE+12
RPLIIBFR EQU   IDARPLE+8
RPLDECB  EQU   IDARPLE+4
RPLIICB  EQU   IDARPLE
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00029 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00028 EQU   RPLRBAR+3
@NM00027 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLDACB  EQU   RPLCOMN+24
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
DCBLPDT  EQU   IHADCS55
DCBWKPT4 EQU   IHADCS29+188
DCBWKPT3 EQU   IHADCS29+184
DCBWKPT2 EQU   IHADCS29+180
@NM00026 EQU   IHADCS29+174
DCBRORG1 EQU   IHADCS29+172
DCBLIOV  EQU   IHADCS29+164
DCBNOREC EQU   IHADCS29+162
@NM00025 EQU   IHADCS29+161
DCBLEMI1 EQU   IHADCS29+156
@NM00024 EQU   IHADCS29+153
DCBLECI  EQU   IHADCS29+148
DCBNBOV  EQU   IHADCS29+146
DCBOVDEV EQU   IHADCS29+145
DCBLETI  EQU   IHADCS29+140
DCBLPDA  EQU   IHADCS29+132
DCBFTHI  EQU   IHADCS29+125
DCBNTHI  EQU   IHADCS29+124
DCBFTMI1 EQU   IHADCS29+117
DCBHIIOV EQU   IHADCS29+116
DCBFTCI  EQU   IHADCS29+109
DCBSTLTF EQU   DCBST
DCBSTLBF EQU   DCBST
DCBSTNMC EQU   DCBST
@NM00023 EQU   DCBST
DCBSTNCY EQU   DCBST
DCBSTLOD EQU   DCBST
DCBSTKSQ EQU   DCBST
DCBSTSSM EQU   DCBST
DCBNREC  EQU   IHADCS29+104
DCBRORG3 EQU   IHADCS29+100
DCBTDC   EQU   IHADCS29+96
DCBHIRSH EQU   IHADCS29+95
DCBHIROV EQU   IHADCS29+94
DCBHIRPD EQU   IHADCS29+93
DCBHIRCM EQU   IHADCS29+92
DCBLDT   EQU   IHADCS29+90
DCBHMASK EQU   IHADCS29+89
DCBFIRSH EQU   IHADCS29+86
DCBNLEV  EQU   IHADCS29+85
DCBLEMI3 EQU   IHADCS29+80
DCBFTMI3 EQU   IHADCS29+73
DCBLEMI2 EQU   IHADCS29+68
DCBFTMI2 EQU   IHADCS29+61
DCBHIRTI EQU   IHADCS29+60
DCBRELEX EQU   IHADCS29+52
DCBPUTX  EQU   IHADCS29+48
DCBRELSE EQU   IHADCS29+44
@NM00022 EQU   DCBEXCD2
DCBEXRDE EQU   DCBEXLTH
DCBEXOFL EQU   DCBEXCD2
DCBEXCLD EQU   DCBEXCD2
DCBEXDUP EQU   DCBEXCD2
DCBEXSEQ EQU   DCBEXCD2
DCBEXBLU EQU   DCBEXCD1
DCBEXBLI EQU   DCBEXCD1
DCBEXOER EQU   DCBEXCD1
DCBEXIER EQU   DCBEXCD1
DCBEXINV EQU   DCBEXCD1
DCBEXNSP EQU   DCBEXCD1
DCBEXIDA EQU   DCBEXCD1
DCBEXNKY EQU   DCBEXCD1
DCBMSHIA EQU   DCBMSHI+1
DCBNCP   EQU   DCBMSHI
DCBSMSW  EQU   IHADCS29+18
DCBSMSI  EQU   IHADCS29+16
DCBMSWA  EQU   IHADCS29+12
DCBCYLOF EQU   IHADCS29+3
DCBNTM   EQU   IHADCS29+2
DCBMACRE EQU   DCBMAC
DCBMACAW EQU   DCBMAC
DCBMACUW EQU   DCBMAC
DCBMACUR EQU   DCBMAC
@NM00021 EQU   DCBMAC
DCBOPTR  EQU   DCBOPTCD
DCBOPTL  EQU   DCBOPTCD
@NM00020 EQU   DCBOPTCD
DCBOPTY  EQU   DCBOPTCD
DCBOPTI  EQU   DCBOPTCD
DCBOPTM  EQU   DCBOPTCD
DCBOPTUF EQU   DCBOPTCD
DCBOPTW  EQU   DCBOPTCD
DCBPUTA  EQU   DCBGETA
@NM00019 EQU   DCBPUT
DCBDEBA  EQU   DCBDEBAD+1
@NM00018 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBCH12  EQU   DCBIFPCT
DCBCH9   EQU   DCBIFPCT
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00017 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBICH12 EQU   DCBIBPCT
DCBICH9  EQU   DCBIBPCT
DCBIBEC  EQU   DCBIFLG
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECBR EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBRECL  EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
@NM00016 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00015 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00014 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00013 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
@NM00012 EQU   DCBDSRG1
@NM00011 EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFCA EQU   DCBBUFCB+1
DCBTRBAL EQU   IHADCS01+6
@NM00010 EQU   IHADCS01+5
@NM00009 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00008 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00007 EQU   IHADCB
AUDCSPM  EQU   AUDCSPLM
AUDCSPB  EQU   AUDCSPLB
AUDCLD   EQU   AUDCSPLD+1
AUDCSPD  EQU   AUDCSPLD
AUDCSPI  EQU   AUDCSPLI
AUDCIICB EQU   IIGMAUD
@NM00006 EQU   IIAUDFL2
@NM00005 EQU   IIREGSAV+12
IIREGFC  EQU   IIREGSAV+8
IIREGBC  EQU   IIREGSAV+4
@NM00004 EQU   IIREGSAV
IISVCLST EQU   IDAIICB+48
IITBUFL  EQU   IDAIICB+45
IIBUFNO  EQU   IDAIICB+44
IIMSGPTR EQU   IDAIICB+40
IIMSGL   EQU   IDAIICB+37
@NM00003 EQU   IIFLAG3
IIBUFL   EQU   IDAIICB+34
IIKEYSL  EQU   IDAIICB+32
IIRPLL   EQU   IDAIICB+29
IIACBL   EQU   IDAIICB+25
IIQBFRS  EQU   IIFLAG1
@NM00002 EQU   IIFLAG1
IIFTEST  EQU   IIFLAG1
IIDATA   EQU   IIFLAG1
IIFCLOSE EQU   IIFLAG1
IIFACBCL EQU   IIFLAG1
IIFGET   EQU   IIFLAG1
IIFSCAN  EQU   IIFLAG1
IIKEYPT  EQU   IDAIICB+20
IIMAXLRL EQU   IIW1CBF+2
IISAVLRL EQU   IIW1CBF
IIRPLPTR EQU   IDAIICB+12
IIDCBPTR EQU   IDAIICB+4
IICBLEN  EQU   IDAIICB+2
@NM00001 EQU   IDAIICB+1
IICBID   EQU   IDAIICB
@NM00062 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00061 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00060 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00059 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00058 EQU   FLCFSA
@NM00057 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00056 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00055 EQU   FLCIOA
@NM00054 EQU   FLCMCLA+15
@NM00053 EQU   FLCMCLA+14
@NM00052 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00051 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00050 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00049 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00048 EQU   FLCPER
@NM00047 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00046 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00045 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00044 EQU   FLCPIILC
@NM00043 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00042 EQU   FLCSVILC
@NM00041 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00040 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00039 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00186 EQU   EXIT
@RT00218 EQU   @EL00003
@RT00243 EQU   @EL00004
@RT00382 EQU   @EL00007
@RT00424 EQU   @EL00008
@RF00446 EQU   UNLOCK1
@RC00478 EQU   @EL00010
@ENDDATA EQU   *
         END   IDAICIA1,(C'PLS1105',0701,78102)
