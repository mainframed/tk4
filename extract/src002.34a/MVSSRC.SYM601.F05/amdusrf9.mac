         TITLE 'AMDUSRF9--VSAM IMDPRDMP FORMAT APPENDAGE               *
                        '
AMDUSRF9 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'AMDUSRF9  76.352'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
*   PARMPTR=R1;                     /* SAVE ADDR OF INPUT PARM LIST  */
         LR    PARMPTR,R1                                          0038
*   WAPTR=WKAAD;                    /* INITIALIZE PTR TO PASSED WORK
*                                      AREA                  @ZA06433*/
         L     WAPTR,WKAAD(,PARMPTR)                               0039
*   SACALLER=RD;                    /* SAVE CALLER'S SAVE AREA PTR 0040
*                                                            @ZA06433*/
         ST    RD,SACALLER(,WAPTR)                                 0040
*   RD->SACALLED=ADDR(SAVAREA);     /* SAVE CALLED SAVE AREA PTR   0041
*                                                            @ZA06433*/
         ST    WAPTR,SACALLED(,RD)                                 0041
*   RD=ADDR(SAVAREA);               /* POINT TO SAVE AREA    @ZA06433*/
*                                                                  0042
         LR    RD,WAPTR                                            0042
*   /*****************************************************************/
*   /*                                                               */
*   /* SET INITIAL VALUES                                    @Y021130*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0043
*   CNVRTLNG=0;                     /*                       @Y021130*/
         MVI   CNVRTLNG(WAPTR),X'00'                               0043
*   RETCODE=0;                      /*                       @Y021130*/
         MVI   RETCODE(WAPTR),X'00'                                0044
*   OUTPTR=0;                       /*                       @Y021130*/
*                                                                  0045
         MVI   OUTPTR(WAPTR),X'00'                                 0045
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE TYPE OF RECORD IN INPUT BUFFER AND INITIALIZE       */
*   /* PARAMETERS FOR FORMAT ROUTINE                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0046
*   IF DATAID=PTIOTID THEN          /* TEST FOR TIOT HEADER          */
         L     @10,DATAPTR(,PARMPTR)                               0046
         CLI   DATAID(@10),X'11'                                   0046
         BNE   @RF00046                                            0046
*     CALL JOBFRMT;                 /* FORMAT JOB AND STEP NAME      */
         BAL   @14,JOBFRMT                                         0047
*   ELSE                                                           0048
*     IF DATAID=TIOTID THEN         /* TEST FOR TIOT ENTRY           */
         B     @RC00046                                            0048
@RF00046 L     @10,DATAPTR(,PARMPTR)                               0048
         CLI   DATAID(@10),X'12'                                   0048
         BNE   @RF00048                                            0048
*       DO;                         /* FORMAT TIOT ENTRY             */
*         BLKLNGTH=TIOELNGH;        /* LOAD RECORD LENGTH            */
         IC    @15,TIOELNGH+1(,@10)                                0050
         STC   @15,BLKLNGTH(,WAPTR)                                0050
*         TITLE=TTIOT;              /* LOAD TITLE                    */
         MVC   TITLE(10,WAPTR),@CC00562                            0051
*         CALL FORMAT;              /* FORMAT RECORD                 */
         BAL   @14,FORMAT                                          0052
*       END;                                                       0053
*     ELSE                                                         0054
*       IF DATAID='A0'X THEN        /* TEST FOR ACB                  */
         B     @RC00048                                            0054
@RF00048 L     @10,DATAPTR(,PARMPTR)                               0054
         CLI   DATAID(@10),X'A0'                                   0054
         BNE   @RF00054                                            0054
*         DO;                       /* FORMAT ACB                    */
*           BLKLNGTH=ACBLENG;       /* LOAD LENGTH OF ACB            */
         LH    @10,ACBLENG+1(,@10)                                 0056
         STC   @10,BLKLNGTH(,WAPTR)                                0056
*           TITLE=TACB;             /* LOAD TITLE                    */
         MVC   TITLE(10,WAPTR),@CC00550                            0057
*           CALL FORMAT;            /* FORMAT ACB                    */
         BAL   @14,FORMAT                                          0058
*         END;                                                     0059
*       ELSE                                                       0060
*         IF DATAID=IDXAMBL THEN    /* TEST FOR AMBL                 */
         B     @RC00054                                            0060
@RF00054 L     @10,DATAPTR(,PARMPTR)                               0060
         CLI   DATAID(@10),B'01010000'                             0060
         BNE   @RF00060                                            0060
*           DO;                     /* FORMAT AMBL                   */
*             BLKLNGTH=AMBLLEN;     /* LOAD LENGTH OF AMBL           */
         IC    @15,AMBLLEN+1(,@10)                                 0062
         STC   @15,BLKLNGTH(,WAPTR)                                0062
*             TITLE=TAMBL;          /* LOAD TITLE                    */
         MVC   TITLE(10,WAPTR),@CC00553                            0063
*             CALL FORMAT;          /* FORMAT AMBL                   */
         BAL   @14,FORMAT                                          0064
*           END;                                                   0065
*         ELSE                                                     0066
*           IF DATAID=IDXAMB THEN   /* TEST FOR AMB                  */
         B     @RC00060                                            0066
@RF00060 L     @10,DATAPTR(,PARMPTR)                               0066
         CLI   DATAID(@10),B'01000000'                             0066
         BNE   @RF00066                                            0066
*             DO;                   /* FORMAT AMB                    */
*               BLKLNGTH=AMBLEN;    /* LOAD LENGTH OF AMB            */
         LH    @10,AMBLEN+1(,@10)                                  0068
         STC   @10,BLKLNGTH(,WAPTR)                                0068
*               TITLE=TAMB;         /* LOAD TITLE                    */
         MVC   TITLE(10,WAPTR),@CC00556                            0069
*               CALL FORMAT;        /* FORMAT AMB                    */
         BAL   @14,FORMAT                                          0070
*             END;                                                 0071
*           ELSE                                                   0072
*             IF DATAID=IDXAMDSB THEN/* TEST FOR AMDSB               */
         B     @RC00066                                            0072
@RF00066 L     @10,DATAPTR(,PARMPTR)                               0072
         CLI   DATAID(@10),B'01100000'                             0072
         BNE   @RF00072                                            0072
*               DO;                 /* FORMAT AMDSB                  */
*                 BLKLNGTH=AMDLEN;  /* LOAD LENGTH OF AMDSB          */
         LH    @10,AMDLEN+1(,@10)                                  0074
         STC   @10,BLKLNGTH(,WAPTR)                                0074
*                 TITLE=TAMDSB;     /* LOAD TITLE                    */
         MVC   TITLE(10,WAPTR),@CC00559                            0075
*                 CALL FORMAT;      /* FORMAT AMDSB                  */
         BAL   @14,FORMAT                                          0076
*               END;                                               0077
*             ELSE                                                 0078
*               RETCODE=NOPRTRET;   /* SET RETURN CODE TO NO PRINT OR
*                                      RETURN                        */
         B     @RC00072                                            0078
@RF00072 MVI   RETCODE(WAPTR),X'08'                                0078
*   RD=SACALLER;                    /* POINT TO SAVE AREA OF CALLER
*                                                            @ZA06433*/
@RC00072 DS    0H                                                  0079
@RC00066 DS    0H                                                  0079
@RC00060 DS    0H                                                  0079
@RC00054 DS    0H                                                  0079
@RC00048 DS    0H                                                  0079
@RC00046 L     RD,SACALLER(,WAPTR)                                 0079
*   RETURN CODE(RETCODE);           /* RETURN TO CALLER              */
         SLR   @15,@15                                             0080
         IC    @15,RETCODE(,WAPTR)                                 0080
         L     @14,12(,@13)                                        0080
         LM    @00,@12,20(@13)                                     0080
         BR    @14                                                 0080
*JOBFRMT:                                                          0081
*                                                                  0081
*/*  *****************************************************************/
*/*                                                                  */
*/*   FUNCTION=THIS ROUTINE INITIALIZES THE PARAMETERS NEEDED BY THE */
*/*            RECORD FORMAT ROUTINE AND CALLS IT.                   */
*/*                                                                  */
*/*   INPUT=ADDRESS OF INPUT BUFFER (INPPTR)                         */
*/*                                                                  */
*/*   OUTPUT= FORMATTED RECORD IN OUTPUT BUFFER(OUTBFR)              */
*/*                                                                  */
*/*  *****************************************************************/
*                                                                  0081
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0081
@EL00001 DS    0H                                                  0081
@EF00001 DS    0H                                                  0081
@ER00001 LM    @14,@12,12(@13)                                     0081
         BR    @14                                                 0081
JOBFRMT  DS    0H                                                  0082
*   RSAVEA=RET;                     /* SAVE RETURN ADDRESS           */
         ST    RET,RSAVEA(,WAPTR)                                  0082
*   OUTPTR=10;                                                     0083
         LA    @10,10                                              0083
         STC   @10,OUTPTR(,WAPTR)                                  0083
*   OUTBFR(OUTPTR:OUTPTR+LENGTH(JOBNAME)-1)=JOBNAME;/* JOB NAME TITLE*/
         L     @15,OUTBFPTR(,PARMPTR)                              0084
         ALR   @10,@15                                             0084
         BCTR  @10,0                                               0084
         MVC   OUTBFR(8,@10),@CC00569                              0084
*   OUTPTR=OUTPTR+LENGTH(JOBNAME);  /* INCR TO JOB NAME FIELD        */
         SLR   @10,@10                                             0085
         IC    @10,OUTPTR(,WAPTR)                                  0085
         AL    @10,@CF00036                                        0085
         STC   @10,OUTPTR(,WAPTR)                                  0085
*   OUTBFR(OUTPTR:OUTPTR+LENGTH(TIOCNJOB)-1)=TIOCNJOB;/* MOVE JOB  0086
*                                      NAME INTO OUTPUT BUFFER       */
         ALR   @10,@15                                             0086
         BCTR  @10,0                                               0086
         LA    @14,1                                               0086
         AL    @14,DATAPTR(,PARMPTR)                               0086
         MVC   OUTBFR(8,@10),TIOCNJOB(@14)                         0086
*   OUTPTR=OUTPTR+LENGTH(TIOCNJOB)+4;/* INCR PTR TO NEXT FIELD       */
         SLR   @10,@10                                             0087
         IC    @10,OUTPTR(,WAPTR)                                  0087
         AL    @10,@CF00308                                        0087
         STC   @10,OUTPTR(,WAPTR)                                  0087
*   OUTBFR(OUTPTR:OUTPTR+LENGTH(STEPNAME)-1)=STEPNAME;/* MOVE STEP 0088
*                                      NAME INTO OUTPUT BUFFER       */
         ALR   @10,@15                                             0088
         BCTR  @10,0                                               0088
         MVC   OUTBFR(9,@10),@CC00571                              0088
*   OUTPTR=OUTPTR+LENGTH(STEPNAME); /* INCR PTR TO STEP NAME FIELD   */
         SLR   @10,@10                                             0089
         IC    @10,OUTPTR(,WAPTR)                                  0089
         AL    @10,@CF00172                                        0089
         STC   @10,OUTPTR(,WAPTR)                                  0089
*   OUTBFR(OUTPTR:OUTPTR+LENGTH(TIOCSTEP)-1)=TIOCSTEP;/* MOVE STEP 0090
*                                      NAME INTO OUTPUT BUFFER       */
         ALR   @15,@10                                             0090
         BCTR  @15,0                                               0090
         MVC   OUTBFR(16,@15),TIOCSTEP(@14)                        0090
*   RETCODE=PRTNORET;               /* SET RETURN CODE               */
         MVI   RETCODE(WAPTR),X'04'                                0091
*   RET=RSAVEA;                     /* RESTORE RETURN ADDRESS        */
         L     @10,RSAVEA(,WAPTR)                                  0092
         LR    RET,@10                                             0092
*   END JOBFRMT;                                                   0093
@EL00002 DS    0H                                                  0093
@EF00002 DS    0H                                                  0093
@ER00002 BR    @14                                                 0093
*FORMAT:                                                           0094
*                                                                  0094
*/* ******************************************************************/
*/*                                                                  */
*/*  FUNCTION= 1. IF THIS IS THE FIRST ENTRY FOR AN INPUT BUFFER     */
*/*               MOVE TITLE OF DATA AREA INTO OUTPUT BUFFER.        */
*/*                                                                  */
*/*            2. DETERMINE LENGTH OF AREA WITHIN INPUT BUFFER TO    */
*/*               BE CONVERTED FROM HEXADECIMAL TO EBCDIC.           */
*/*                                                                  */
*/*  INPUTS=LENGTH OF DATA AREA IN INPUT BUFFER(BLKLNGTH)            */
*/*         TITLE OF DATA AREA(TITLE)                                */
*/*                                                                  */
*/*  OUTPUTS= LENGTH OF AREA TO BE CONVERTED TO EBCDIC (CNVRTLNG)    */
*/*           ADDRESS OF AREA TO BE CONVERTED (CNVRTPTR)             */
*/*                                                                  */
*/* ******************************************************************/
*                                                                  0094
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0094
FORMAT   DS    0H                                                  0095
*   RSAVEA=RET;                     /* SAVE RETURN ADDRESS           */
         ST    RET,RSAVEA(,WAPTR)                                  0095
*   IF CTR=0 THEN                   /* IF INITIAL ENTRY THEN MOVE  0096
*                                      BLOCK TITLE INTO OUTPUT BUFFER*/
         CLI   CTR(WAPTR),0                                        0096
         BNE   @RF00096                                            0096
*     OUTBFR(1:LENGTH(TITLE))=TITLE;                               0097
         L     @10,OUTBFPTR(,PARMPTR)                              0097
         MVC   OUTBFR(10,@10),TITLE(WAPTR)                         0097
*   OUTPTR=10;                      /* INCR PTR PAST TITLE           */
@RF00096 MVI   OUTPTR(WAPTR),X'0A'                                 0098
*   CNVRTPTR=ADDR(INPDATA)+(CTR*32);/* CALCULATE ADDR OF AREA TO BE
*                                      FORMATED                      */
         L     CNVRTPTR,DATAPTR(,PARMPTR)                          0099
         LA    CNVRTPTR,INPDATA(,CNVRTPTR)                         0099
         SLR   @10,@10                                             0099
         IC    @10,CTR(,WAPTR)                                     0099
         SLA   @10,5                                               0099
         ALR   CNVRTPTR,@10                                        0099
*   IF BLKLNGTH-(CTR*MAXLNG)>MAXLNG THEN/* IF LENGTH OF AREA TO BE 0100
*                                      GREATER THAN MAXIMUM LENGTH   */
         LCR   @10,@10                                             0100
         SLR   @15,@15                                             0100
         IC    @15,BLKLNGTH(,WAPTR)                                0100
         ALR   @10,@15                                             0100
         C     @10,@CF00406                                        0100
         BNH   @RF00100                                            0100
*     DO;                                                          0101
*       CNVRTLNG=MAXLNG;            /* LOAD LENGTH OF AREA TO BE   0102
*                                      CONVERTED                     */
         MVI   CNVRTLNG(WAPTR),X'20'                               0102
*       CALL HEXCNVRT;              /* CONVERT INPUT AREA TO EBCDIC
*                                      AND MOVE INTO OUTPUT BUFFER   */
         BAL   @14,HEXCNVRT                                        0103
*       RETCODE=PRTRET;             /* SET RETURN CODE TO PRINT    0104
*                                      OUTPUT BUFFER AND RETURN      */
         MVI   RETCODE(WAPTR),X'00'                                0104
*       CTR=CTR+1;                  /* INCR COUNTER TO INDICATE NEXT
*                                      ENTRY                         */
         LA    @10,1                                               0105
         SLR   @15,@15                                             0105
         IC    @15,CTR(,WAPTR)                                     0105
         ALR   @10,@15                                             0105
         STC   @10,CTR(,WAPTR)                                     0105
*     END;                                                         0106
*   ELSE                                                           0107
*     DO;                                                          0107
         B     @RC00100                                            0107
@RF00100 DS    0H                                                  0108
*       CNVRTLNG=BLKLNGTH-(CTR*MAXLNG);/* CALC LENGTH OF AREA TO BE
*                                      CONVERTED                     */
         SLR   @10,@10                                             0108
         IC    @10,CTR(,WAPTR)                                     0108
         SLA   @10,5                                               0108
         LCR   @10,@10                                             0108
         SLR   @15,@15                                             0108
         IC    @15,BLKLNGTH(,WAPTR)                                0108
         ALR   @10,@15                                             0108
         STC   @10,CNVRTLNG(,WAPTR)                                0108
*       CALL HEXCNVRT;              /* CONVERT INPUT AREA TO EBCDIC
*                                      AND MOVE INTO OUTPUT BUFFER   */
         BAL   @14,HEXCNVRT                                        0109
*       RETCODE=PRTNORET;           /* SET RETURN CODE TO PRINT    0110
*                                      OUTPUT BUFFER AND NOT RETURN  */
         MVI   RETCODE(WAPTR),X'04'                                0110
*       CTR=0;                      /* SET COUNTER TO INDICATE     0111
*                                      INITIAL ENTRY                 */
         MVI   CTR(WAPTR),X'00'                                    0111
*     END;                                                         0112
*   RET=RSAVEA;                     /* RESTORE RETURN ADDRESS        */
@RC00100 L     RET,RSAVEA(,WAPTR)                                  0113
*HEXCNVRT:                                                         0114
*                                                                  0114
*/* ******************************************************************/
*/*                                                                  */
*/*  FUNCTION= THIS ROUTINE CONVERTS A SPECIFIED AREA OF MAIN        */
*/*            STORAGE FROM HEXIDECIMAL TO THE PRINTABLE EBCDIC      */
*/*            REPRESENTATION FOR THE HEXIDECIMAL DIGITS.            */
*/*                                                                  */
*/*  INPUTS= LENGTH OF AREA TO BE CONVERTED(CNVRTLNG)                */
*/*          ADDRESS OF AREA TO BE CONVERTED(CNVRTPTR)               */
*/*                                                                  */
*/*  OUTPUTS= EBCDIC REPRESENTION OF AREA CONVERTED IN OUTPUT BUFFER */
*/*                                                                  */
*/* ******************************************************************/
*                                                                  0114
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0114
         B     @PB00004                                            0114
HEXCNVRT DS    0H                                                  0115
*   RFY                                                            0115
*    (CNVREG,                                                      0115
*     WKREG6) RESTRICTED;           /* RESTRICT WORK REGS    @ZA16026*/
*   RSAVEB=RET;                     /* SAVE RETURN ADDRESS           */
         ST    RET,RSAVEB(,WAPTR)                                  0116
*   DO I=1 TO MAXLNG BY 16 WHILE(CNVRTLNG>0);                      0117
         LA    @10,1                                               0117
         STC   @10,I(,WAPTR)                                       0117
@DL00117 CLI   CNVRTLNG(WAPTR),0                                   0117
         BNH   @DC00117                                            0117
*     DO J=1 TO 16 BY 4 WHILE(CNVRTLNG>0);                         0118
         LA    @10,1                                               0118
         STC   @10,J(,WAPTR)                                       0118
@DL00118 CLI   CNVRTLNG(WAPTR),0                                   0118
         BNH   @DC00118                                            0118
*       DO K=1 TO 4 WHILE(CNVRTLNG>0);                             0119
         LA    @10,1                                               0119
         STC   @10,K(,WAPTR)                                       0119
@DL00119 CLI   CNVRTLNG(WAPTR),0                                   0119
         BNH   @DC00119                                            0119
*         WKREG6=I+J+K-2;           /* DETERMINE INDEX       @ZA16026*/
         SLR   WKREG6,WKREG6                                       0120
         IC    WKREG6,I(,WAPTR)                                    0120
         SLR   @10,@10                                             0120
         IC    @10,J(,WAPTR)                                       0120
         ALR   WKREG6,@10                                          0120
         SLR   @10,@10                                             0120
         IC    @10,K(,WAPTR)                                       0120
         ALR   WKREG6,@10                                          0120
         BCTR  WKREG6,0                                            0120
         BCTR  WKREG6,0                                            0120
*         CNVAREA=CNVMASK(WKREG6);  /* MOVE BYTE INTO CNVRT AREA   0121
*                                                            @ZA16026*/
         LR    @10,CNVRTPTR                                        0121
         ALR   @10,WKREG6                                          0121
         BCTR  @10,0                                               0121
         MVC   CNVAREA(1,WAPTR),CNVMASK(@10)                       0121
*         CNVAREA=CNVAREA&'F0'X;    /* ZERO SECOND HALF OF BYTE      */
         NI    CNVAREA(WAPTR),X'F0'                                0122
*         CNVREG=CNVAREA;           /* MOVE BYTE INTO REGISTER       */
         SLR   CNVREG,CNVREG                                       0123
         IC    CNVREG,CNVAREA(,WAPTR)                              0123
*         SRL(CNVREG,4);            /* SHIFT TO LOW ORDER BIT POS  0124
*                                                            @ZA16026*/
         SRL   CNVREG,4                                            0124
*         CNVAREA=CNVREG;           /* STORE BYTE BACK INTO AREA   0125
*                                                            @ZA16026*/
         STC   CNVREG,CNVAREA(,WAPTR)                              0125
*         TR(CNVAREA,CNVTABLE);     /* CONVERT TO EBCDIC             */
         TR    CNVAREA(1,WAPTR),@CC00547                           0126
*         OUTBFR(OUTPTR)=CNVAREA;   /* MOVE CHAR INTO OUTPUT BFR     */
         SLR   @10,@10                                             0127
         IC    @10,OUTPTR(,WAPTR)                                  0127
         L     @07,OUTBFPTR(,PARMPTR)                              0127
         ALR   @10,@07                                             0127
         BCTR  @10,0                                               0127
         MVC   OUTBFR(1,@10),CNVAREA(WAPTR)                        0127
*         OUTPTR=OUTPTR+1;          /* INCR TO NEXT POSITION         */
         LA    @10,1                                               0128
         SLR   @05,@05                                             0128
         IC    @05,OUTPTR(,WAPTR)                                  0128
         ALR   @05,@10                                             0128
         STC   @05,OUTPTR(,WAPTR)                                  0128
*         CNVAREA=CNVMASK(WKREG6);  /* MOVE BYTE BACK INTO CNVRT AREA
*                                                            @ZA16026*/
         LR    @01,CNVRTPTR                                        0129
         ALR   @01,WKREG6                                          0129
         BCTR  @01,0                                               0129
         MVC   CNVAREA(1,WAPTR),CNVMASK(@01)                       0129
*         CNVAREA=CNVAREA&'0F'X;    /* ZERO FIRST HALF OF BYTE       */
         NI    CNVAREA(WAPTR),X'0F'                                0130
*         TR(CNVAREA,CNVTABLE);     /* CONVERT TO EBCDIC             */
         TR    CNVAREA(1,WAPTR),@CC00547                           0131
*         OUTBFR(OUTPTR)=CNVAREA;   /* MOVE CHAR INTO OUTPUT BFR     */
         ALR   @07,@05                                             0132
         BCTR  @07,0                                               0132
         MVC   OUTBFR(1,@07),CNVAREA(WAPTR)                        0132
*         OUTPTR=OUTPTR+1;          /* INCR TO NEXT POSITION         */
         ALR   @05,@10                                             0133
         STC   @05,OUTPTR(,WAPTR)                                  0133
*         CNVRTLNG=CNVRTLNG-1;      /* DECR LENGTH                   */
         SLR   @10,@10                                             0134
         IC    @10,CNVRTLNG(,WAPTR)                                0134
         BCTR  @10,0                                               0134
         STC   @10,CNVRTLNG(,WAPTR)                                0134
*       END;                                                       0135
         LA    @10,1                                               0135
         SLR   @07,@07                                             0135
         IC    @07,K(,WAPTR)                                       0135
         ALR   @10,@07                                             0135
         STC   @10,K(,WAPTR)                                       0135
         C     @10,@CF00096                                        0135
         BNH   @DL00119                                            0135
@DC00119 DS    0H                                                  0136
*       OUTPTR=OUTPTR+1;            /* INSERT A BLANK INTO OUTPUT  0136
*                                      BUFFER                        */
         LA    @10,1                                               0136
         SLR   @07,@07                                             0136
         IC    @07,OUTPTR(,WAPTR)                                  0136
         ALR   @10,@07                                             0136
         STC   @10,OUTPTR(,WAPTR)                                  0136
*     END;                                                         0137
         LA    @10,4                                               0137
         SLR   @07,@07                                             0137
         IC    @07,J(,WAPTR)                                       0137
         ALR   @10,@07                                             0137
         STC   @10,J(,WAPTR)                                       0137
         C     @10,@CF00038                                        0137
         BNH   @DL00118                                            0137
@DC00118 DS    0H                                                  0138
*     OUTPTR=OUTPTR+3;              /* INSERT 3 BLANKS INTO OUTPUT 0138
*                                      BUFFER                        */
         LA    @10,3                                               0138
         SLR   @07,@07                                             0138
         IC    @07,OUTPTR(,WAPTR)                                  0138
         ALR   @10,@07                                             0138
         STC   @10,OUTPTR(,WAPTR)                                  0138
*   END;                                                           0139
         LA    @10,16                                              0139
         SLR   @07,@07                                             0139
         IC    @07,I(,WAPTR)                                       0139
         ALR   @10,@07                                             0139
         STC   @10,I(,WAPTR)                                       0139
         C     @10,@CF00406                                        0139
         BNH   @DL00117                                            0139
@DC00117 DS    0H                                                  0140
*   RET=RSAVEB;                     /* RESTORE RETURN ADDRESS        */
         L     RET,RSAVEB(,WAPTR)                                  0140
*   RFY                                                            0141
*    (CNVREG,                                                      0141
*     WKREG6) UNRESTRICTED;         /* UNRST WORK REGS       @ZA16026*/
*   END HEXCNVRT;                                                  0142
@EL00004 DS    0H                                                  0142
@EF00004 DS    0H                                                  0142
@ER00004 BR    @14                                                 0142
*   END FORMAT;                                                    0143
@EL00003 DS    0H                                                  0143
@EF00003 DS    0H                                                  0143
@ER00003 BR    @14                                                 0143
*   END AMDUSRF9                    /*                       @ZA06433*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                        *
*/*%INCLUDE SYSLIB  (IFGACB  )                                        *
*/*%INCLUDE SYSLIB  (IDAAMBL )                                        *
*/*%INCLUDE SYSLIB  (IDAAMB  )                                        *
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                        *
*/*%INCLUDE SYSLIB  (IDAIDXCB)                                        *
*;                                                                 0144
@DATA    DS    0H
@DATD    DSECT
         DS    0F
AMDUSRF9 CSECT
         DS    0F
@CF00096 DC    F'4'
@CF00036 DC    F'8'
@CF00172 DC    F'9'
@CF00308 DC    F'12'
@CF00038 DC    F'16'
@CF00406 DC    F'32'
@DATD    DSECT
         DS    0D
AMDUSRF9 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC00547 DC    C'0123456789ABCDEF'
@CC00550 DC    C'ACB       '
@CC00553 DC    C'AMBL      '
@CC00556 DC    C'AMB       '
@CC00559 DC    C'AMDSB     '
@CC00562 DC    C'TIOT ENT  '
@CC00571 DC    C'STEPNAME='
@CC00569 DC    C'JOBNAME='
AMDUSRF9 CSECT
         IDAPATCH
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
AMDUSRF9 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
PARMPTR  EQU   @02
WAPTR    EQU   @12
CNVRTPTR EQU   @03
R1       EQU   @01
RET      EQU   @14
WKREG6   EQU   @06
CNVREG   EQU   @04
RD       EQU   @13
TIOT1    EQU   0
TIOCNJOB EQU   TIOT1
TIOCSTEP EQU   TIOT1+8
TIOENTRY EQU   0
TIOELNGH EQU   TIOENTRY
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
POOLSTAR EQU   TIOENTRY+20
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBVVIC  EQU   ACBINFLG
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLSHAR EQU   IDAAMBL+33
AMBLLEN  EQU   IDAAMBL+34
AMBLFLG1 EQU   IDAAMBL+35
AMBLFLG2 EQU   IDAAMBL+36
IDAAMB   EQU   0
AMBLEN   EQU   IDAAMB+2
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEOVPT EQU   IDAAMB+56
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDLEN   EQU   IDAAMDSB+2
AMDNEST  EQU   IDAAMDSB+4
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
INPLIST  EQU   0
INPPTR   EQU   INPLIST
OUTBFPTR EQU   INPLIST+4
EIDPTR   EQU   INPLIST+12
DATAPTR  EQU   INPLIST+16
WKAAD    EQU   INPLIST+24
INPBFR   EQU   0
@NM00037 EQU   0
SAVAREA  EQU   @NM00037
SACALLER EQU   SAVAREA+4
SACALLED EQU   SAVAREA+8
CTR      EQU   @NM00037+72
I        EQU   @NM00037+73
J        EQU   @NM00037+74
K        EQU   @NM00037+75
BLKLNGTH EQU   @NM00037+76
CNVRTLNG EQU   @NM00037+77
RETCODE  EQU   @NM00037+78
OUTPTR   EQU   @NM00037+79
RSAVEA   EQU   @NM00037+80
RSAVEB   EQU   @NM00037+84
CNVAREA  EQU   @NM00037+88
TITLE    EQU   @NM00037+89
INPRCD   EQU   0
DATAID   EQU   INPRCD
INPDATA  EQU   INPRCD+1
CNVMASK  EQU   0
OUTBFR   EQU   0
INPEID   EQU   0
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
TIOUCBP  EQU   TIOEDEVE+1
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
@NM00038 EQU   SAVAREA
INPTIME  EQU   INPBFR+6
INPFID   EQU   INPBFR+5
INPAID   EQU   INPBFR+4
@NM00036 EQU   INPBFR+2
INPLNGTH EQU   INPBFR
AMDPLAD  EQU   INPLIST+28
AMDPRFMT EQU   INPLIST+20
GTFPTR   EQU   INPLIST+8
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00035 EQU   IDAAMDSB+41
@NM00034 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDCINV  EQU   IDAAMDSB+20
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDKEYLN EQU   IDAAMDSB+8
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00033 EQU   AMBCSWD1+1
@NM00032 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBLSR   EQU   AMBAFLG
@NM00031 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00030 EQU   IDAAMB+68
AMBIWA   EQU   IDAAMB+64
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00029 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00028 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00027 EQU   AMBINFL
@NM00026 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00025 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00024 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00023 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00022 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBDSB   EQU   IDAAMB+20
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLIX   EQU   IDAAMBL+56
AMBLDTA  EQU   IDAAMBL+52
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00021 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00020 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00019 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
@NM00018 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00017 EQU   IDAAMBL+31
@NM00016 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00015 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00014 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00013 EQU   ACBINFLG+1
ACBBYPSS EQU   ACBINFLG
ACBSDS   EQU   ACBVVIC
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00012 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00011 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00010 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00009 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00008 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00007 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00006 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00005 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00004 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00003 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00002 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00001 EQU   POOLSTAR
TIOEFSRT EQU   TIOENTRY+17
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOEJFCB EQU   TIOENTRY+12
TIOEDDNM EQU   TIOENTRY+4
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOEWTCT EQU   TIOERLOC
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@PB00004 EQU   @EL00003
@ENDDATA EQU   *
         END   AMDUSRF9,(C'PLS2057',0701,76352)
