         TITLE 'IDAIIPM3--MVM ISAM INTERFACE BISAM                     *
                        '
IDAIIPM3 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00001-@MAINENT)
ENTWRITE DS    0H                                                  0001
         ENTRY ENTWRITE
ENTREAD  DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL2(@EP00209-ENTREAD)
         ENTRY ENTREAD
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         AH    @15,4(,@15)                                         0001
         BR    @15                                                 0001
@EP00001 DS    0H                                                  0002
*                                                                  0186
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
*/*                                                                  */
*/*   FUNCTION = CHECK ROUTINE                                       */
*/*      THIS ROUTINE TAKES THE SYNAD EXIT IF AN ERROR IS INDICATED  */
*/*      IN THE DECB.  IF NO ISAM SYNAD ROUTINE IS SPECIFIED, THEN   */
*/*      ISSUE A SYSTEM 001 ABEND.  IF NO ERROR IS INDICATED, THIS   */
*/*      ROUTINE RETURNS TO THE ISAM PROGRAM.                        */
*/*                                                                  */
*/*   INPUT =                                                        */
*/*      REGISTER 1 = DECB POINTER                                   */
*/*                                                                  */
*/*   OUTPUT =                                                       */
*/*      USER REGISTERS                                              */
*/*                                                                  */
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
*                                                                  0186
*   IF DECEXRNF=ON×                 /* IF ANY ERROR OCCURRED,        */
*       DECEXRLC=ON×DECEXNSP=ON×DECEXINV=ON×DECEXERR=ON×DECEXUBK=ON×
*       DECEXDUP=ON THEN                                           0186
         TM    DECEXRNF(RDECB),B'11111101'                         0186
         BZ    @RF00186                                            0186
*     DO;                           /* PREPARE FOR SYNAD ENTRY       */
*       RFY                                                        0188
*         R0 RSTD;                  /* GET PARM REG                  */
*       R0=RDECB;                   /* SET SYNADAF INPUT             */
         LR    R0,RDECB                                            0189
*       IF DCBSYNAD=ONE THEN        /* IF NO SYNAD IS HERE,          */
         L     @15,DECBDCBA(,RDECB)                                0190
         CLC   DCBSYNAD+52(4,@15),@CF00087                         0190
         BNE   @RF00190                                            0190
*         DO;                       /* ABEND(ABENDCD) DUMP SYSTEM    */
*           RESPECIFY                                              0192
*            (GPR01F) RESTRICTED;                                  0192
*           GPR01F=((ABENDCD)&'00000FFF'X)*4096;/* COMP CODE IN BITS
*                                      8-19                          */
         L     GPR01F,@CF01264                                     0193
*           GPR01F=GPR01F×'80000000'X;/* DUMP/STEP/DUMPOPTS FLAG     */
         O     GPR01F,@CF01265                                     0194
*           SVC(13);                /* ISSUE ABEND SVC               */
         SVC   13                                                  0195
*           RESPECIFY                                              0196
*            (GPR01F) UNRESTRICTED;                                0196
*         END;                      /* ABEND(ABENDCD) DUMP SYSTEM  0197
*                                      X'001' ABEND          @Y021130*/
*       RFY                                                        0198
*        (R14,                                                     0198
*         R15) RSTD;                /* GET LINKAGE REGISTERS         */
@RF00190 DS    0H                                                  0199
*       R14=R14SAVE;                /* SET RETURN ADDRESS            */
         L     R14,R14SAVE(,R13)                                   0199
*       R15=DCBSYNAD;               /* POINT TO SYNAD ROUTINE        */
         L     @12,DECBDCBA(,RDECB)                                0200
         L     R15,DCBSYNAD+52(,@12)                               0200
*       IF IISAMSYN(ONE)^=CZERO THEN/* IF LOADED SYNAD               */
         L     @10,DCBDEBAD+40(,@12)                               0201
         L     @10,DEBEXPT(,@10)                                   0201
         L     @10,DEBWKPT5(,@10)                                  0201
         CLI   IISAMSYN(@10),B'00000000'                           0201
         BE    @RF00201                                            0201
*         R1=ADDR(IHADCB);          /* PASS DCB ADDR IN R1           */
         LR    R1,@12                                              0202
*       GEN(LM    R2,R12,TWENTY8(R13));/* RESTORE USER REGS          */
@RF00201 DS    0H                                                  0203
         LM    R2,R12,TWENTY8(R13)
*       GOTO SYNAD;                 /* TAKE SYNAD EXIT               */
         BR    R15                                                 0204
*       RFY                                                        0205
*         R0 UNRSTD;                /* RELEASE PARM REG              */
*       RFY                                                        0206
*        (R14,                                                     0206
*         R15) UNRSTD;              /* DROP REGISTERS                */
*     END;                          /* END OF ERROR CODE             */
*   RETURN;                         /* EXIT FROM CHECK               */
@EL00001 DS    0H                                                  0208
@EF00001 DS    0H                                                  0208
@ER00001 LM    @14,@12,12(@13)                                     0208
         BR    @14                                                 0208
*                                                                  0209
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
*/*                                                                  */
*/*   FUNCTION = READ/WRITE ROUTINE                                  */
*/*      THIS ROUTINE TRANSLATES A BISAM READ K, READ KU, WRITE K,   */
*/*      WRITE KN, OR WRITE KN (REPLACE) INTO A VSAM GET, PUT, OR    */
*/*      ERASE.                                                      */
*/*                                                                  */
*/*   INPUT =                                                        */
*/*      REGISTER 1 = DECB POINTER                                   */
*/*                   THE DECB CONTAINS THE REQUEST CODE, RECORD     */
*/*                   LENGTH (WRITE KEY REPLACE), DCB ADDRESS,       */
*/*                   AREA ADDRESS, KEY ADDRESS, AND THE READ FOR    */
*/*                   UPDATE FLAG.                                   */
*/*                                                                  */
*/*   OUTPUT =                                                       */
*/*      A VSAM REQUEST IS ISSUED AND A CODE IS SET IN THE DECB.     */
*/*                                                                  */
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
*                                                                  0209
*ENTREAD:                           /* READ ENTRY                    */
*ENTWRITE:                          /* WRITE KN ENTRY                */
*   ENTRY;                                                         0209
@EP00209 DS    0H                                                  0210
*   GEN(LA    RDECB,@00(RDECB));    /* CLEAR HIGH ORDER BYTE         */
         LA    RDECB,@00(RDECB)
*   DECBECB=ZERO;                   /* CLEAR ECB                     */
         SLR   @12,@12                                             0211
         ST    @12,DECBECB(,RDECB)                                 0211
*   DECBEXC1=CZERO;                 /* CLEAR EXCEPTION FLAGS         */
*                                                                  0212
         MVI   DECBEXC1(RDECB),B'00000000'                         0212
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE PREVIOUS REQUEST ISSUED AGAINST THIS DECB WAS A READ   */
*   /* FOR UPDATE, LOOK FOR THE RPL PREVIOUSLY ASSIGNED (AUTOMATIC   */
*   /* FREEDBUF IS IMPLIED). OTHERWISE, ASSIGN A NEW RPL.            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0213
*   IF DECEXRKU=ON THEN             /* IF READ FOR UPDATE THEN       */
         TM    DECEXRKU(RDECB),B'00000001'                         0213
         BNO   @RF00213                                            0213
*     DO;                           /* GO                            */
*       CALL FINDORPL;              /* LOOK FOR OLD RPL.             */
         BAL   @14,FINDORPL                                        0215
*       IF RRPL=ZERO&               /* IF NO RPL WAS FOUND,          */
*           DECBTYP2^=WRITEK THEN   /* IGNORE UPDATE FLAG (IF        */
         LTR   RRPL,RRPL                                           0216
         BNZ   @RF00216                                            0216
         CLI   DECBTYP2(RDECB),B'00001000'                         0216
         BE    @RF00216                                            0216
*         CALL FINDRPL;             /* NOT WRITE K) AND GET A        */
         BAL   @14,FINDRPL                                         0217
*     END;                          /* NEW RPL INSTEAD.              */
*   ELSE                                                           0219
*     CALL FINDRPL;                 /* IF NOT UPDATE, GET NEW        */
         B     @RC00213                                            0219
@RF00213 BAL   @14,FINDRPL                                         0219
*   IF RRPL=ZERO                    /* IF NO RPL IS AVAILABLE        */
*     THEN                                                         0220
@RC00213 LTR   RRPL,RRPL                                           0220
         BNZ   @RF00220                                            0220
*     DO;                           /* SET INVALID REQUEST           */
*       DECEXINV=ON;                /* SET INVALID REQUEST           */
         OI    DECEXINV(RDECB),B'00010000'                         0222
*ERRORX:                                                           0223
*       R1=ADDR(DECBECB);           /* POINT TO ECB                  */
ERRORX   DS    0H                                                  0224
*       GEN(POST  (1));             /* POST ECB COMPLETE             */
         POST  (1)
*       RETURN;                     /* EXIT                          */
         B     @EL00001                                            0225
*     END;                          /* END OF INVALID REQUEST        */
*                                                                  0227
*   /*****************************************************************/
*   /*                                                               */
*   /* SAVE THE BASE AND RETURN REGISTERS IN THE RPL EXTENSION ALL   */
*   /* OTHER USER REGISTERS WILL BE RESTORED PRIOR TO A VSAM REQUEST */
*   /* SO THAT VSAM WILL STORE THE SAME REGISTERS BACK INTO THE USER */
*   /* AREA. THIS ALLOWS THE ISAM INTERFACE TO AVOID OBTAINING A     */
*   /* SAVEAREA FOR EACH RPL.                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0227
*   RPLSAVE=R14SAVE;                /* SAVE USER RETURN POINT        */
@RF00220 LA    @12,76                                              0227
         ALR   @12,RRPL                                            0227
         L     @10,R14SAVE(,R13)                                   0227
         ST    @10,RPLSAVE(,@12)                                   0227
*   RPLSAVE2=R11SAVE;               /* SAVE USER REGISTER 11         */
*                                                                  0228
         L     @10,R11SAVE(,R13)                                   0228
         ST    @10,RPLSAVE2(,@12)                                  0228
*   /*****************************************************************/
*   /*                                                               */
*   /* ALL REQUESTS EXCEPT FOR READ KEY OR WRITE KEY NEW             */
*   /* (NON-REPLACE) REQUIRE A GET FOR UPDATE.                       */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0229
*   IF DECBTYP2=READK×              /* IF A READ KEY                 */
*       (DECBTYP2=WRITEKN&          /* OR A NON-REPLACE              */
*       (DECBLGTH=ZERO×             /* WRITE KN                      */
*       DCBRECL^='01'B)) THEN       /*                               */
         CLI   DECBTYP2(RDECB),B'10000000'                         0229
         BE    @RT00229                                            0229
         CLI   DECBTYP2(RDECB),B'00000100'                         0229
         BNE   @RF00229                                            0229
         LH    @12,DECBLGTH(,RDECB)                                0229
         LTR   @12,@12                                             0229
         BZ    @RT00229                                            0229
         L     @12,DECBDCBA(,RDECB)                                0229
         TM    DCBRECL+28(@12),B'01000000'                         0229
         BNO   @RT00229                                            0229
         TM    DCBRECL+28(@12),B'10000000'                         0229
         BZ    @RF00229                                            0229
@RT00229 DS    0H                                                  0230
*     RPLUPD=OFF;                   /* SET OFF UPDATE                */
         NI    RPLUPD(RRPL),B'11111101'                            0230
*   ELSE                                                           0231
*     RPLUPD=ON;                    /* USE UPDATE OTHERWISE          */
         B     @RC00229                                            0231
@RF00229 OI    RPLUPD(RRPL),B'00000010'                            0231
*   RPLARG=DECBKEY;                 /* POINT RPL TO KEY              */
*                                                                  0232
@RC00229 L     @12,DECBKEY(,RDECB)                                 0232
         ST    @12,RPLARG(,RRPL)                                   0232
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE IF A VSAM GET SHOULD BE ISSUED.                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0233
*   IF^(DECBTYP2=WRITEK&            /* IF STAND-ALONE                */
*       DECEXRKU=ON)&               /* WRITE,                        */
*       ^(DECBTYP2=WRITEKN&         /* READ K, READKU, OR            */
*       (DECBLGTH=ZERO×             /* WKR                           */
*       DCBRECL^='01'B×             /* (NOT WRITE KN)                */
*       DECEXRKU=ON)) THEN          /* STAND-ALONE (REPLACE),        */
         CLI   DECBTYP2(RDECB),B'00001000'                         0233
         BNE   @GL00005                                            0233
         TM    DECEXRKU(RDECB),B'00000001'                         0233
         BO    @RF00233                                            0233
@GL00005 CLI   DECBTYP2(RDECB),B'00000100'                         0233
         BNE   @RT00233                                            0233
         LH    @12,DECBLGTH(,RDECB)                                0233
         LTR   @12,@12                                             0233
         BZ    @RF00233                                            0233
         L     @12,DECBDCBA(,RDECB)                                0233
         TM    DCBRECL+28(@12),B'01000000'                         0233
         BNO   @RF00233                                            0233
         TM    DCBRECL+28(@12),B'10000000'                         0233
         BNZ   @RF00233                                            0233
         TM    DECEXRKU(RDECB),B'00000001'                         0233
         BO    @RF00233                                            0233
@RT00233 DS    0H                                                  0234
*     DO;                           /* RECORD MUST BE READ           */
*       IF DECBARS=ON THEN          /* IF DYNAMIC BUFFERING          */
         TM    DECBARS(RDECB),B'00000001'                          0235
         BNO   @RF00235                                            0235
*         DECBAREA=RPLIIBFR-SIXTEEN;/* POINT TO DYNAMIC BFR SET ADDR
*                                      FOR VSAM GET                  */
         L     @12,RPLIIBFR+76(,RRPL)                              0236
         SL    @12,@CF00168                                        0236
         ST    @12,DECBAREA(,RDECB)                                0236
*       IF DCBRKP=ZERO&             /* THE USER BUFFER CANNOT        */
*           DCBRECBR=OFF×           /* BE USED FOR A GET IF          */
*           (DECBTYP2=WRITEK&       /* RKP=0 & UNBLOCKED (NO         */
*           DECEXRKU=OFF)×          /* ROOM FOR KEY) OR IF           */
*           (DECBTYP2=WRITEKN&      /* EITHER A STAND-ALONE          */
*           DECBLGTH^=ZERO) THEN    /* WRITE OR WRITE KEY RE-        */
@RF00235 L     @12,DECBDCBA(,RDECB)                                0237
         LH    @10,DCBRKP+52(,@12)                                 0237
         LTR   @10,@10                                             0237
         BNZ   @GL00011                                            0237
         TM    DCBRECBR+28(@12),B'00010000'                        0237
         BZ    @RT00237                                            0237
@GL00011 CLI   DECBTYP2(RDECB),B'00001000'                         0237
         BNE   @GL00010                                            0237
         TM    DECEXRKU(RDECB),B'00000001'                         0237
         BZ    @RT00237                                            0237
@GL00010 CLI   DECBTYP2(RDECB),B'00000100'                         0237
         BNE   @RF00237                                            0237
         LH    @12,DECBLGTH(,RDECB)                                0237
         LTR   @12,@12                                             0237
         BZ    @RF00237                                            0237
@RT00237 DS    0H                                                  0238
*         DO;                       /* PLACE (NEW RECORD             */
*           RPLAREA=RPLIIBFR;       /* WOULD BE OVERLAID             */
         L     @12,RPLIIBFR+76(,RRPL)                              0239
         ST    @12,RPLAREA(,RRPL)                                  0239
*         END;                      /* END OF SPECIAL CASE           */
*       ELSE                        /* COME HERE IF USER AREA        */
*         DO;                       /* HAS BUFFER POINTER            */
         B     @RC00237                                            0241
@RF00237 DS    0H                                                  0242
*           IF DCBRECL='01'B THEN   /* IF VLR, INCLUDE RDW IN        */
         L     @12,DECBDCBA(,RDECB)                                0242
         TM    DCBRECL+28(@12),B'01000000'                         0242
         BNO   @RF00242                                            0242
         TM    DCBRECL+28(@12),B'10000000'                         0242
         BNZ   @RF00242                                            0242
*             RPLAREA=DECBAREA+TWENTY;/* RECORD PREFIX.              */
         LA    @12,20                                              0243
         AL    @12,DECBAREA(,RDECB)                                0243
         ST    @12,RPLAREA(,RRPL)                                  0243
*           ELSE                                                   0244
*             RPLAREA=DECBAREA+SIXTEEN;/* FLR--STANDARD ISAM PFX     */
         B     @RC00242                                            0244
@RF00242 LA    @12,16                                              0244
         AL    @12,DECBAREA(,RDECB)                                0244
         ST    @12,RPLAREA(,RRPL)                                  0244
*         END;                      /* END OF READ IN DECBAREA       */
@RC00242 DS    0H                                                  0246
*       IF(DECBTYP2=READK×          /* IF READ K OR          @YM05335*/
*           DECBTYP2=READKU)&       /* READ KU AND           @YM05335*/
*           (DCBRECBR=ON×           /* BLOCKED RCDS OR@YM05335       */
*           DCBRKP>ZERO) THEN       /* RKP > 0 THEN          @YM05335*/
@RC00237 CLI   DECBTYP2(RDECB),B'10000000'                         0246
         BE    @GL00015                                            0246
         CLI   DECBTYP2(RDECB),B'00100000'                         0246
         BNE   @RF00246                                            0246
@GL00015 L     @12,DECBDCBA(,RDECB)                                0246
         TM    DCBRECBR+28(@12),B'00010000'                        0246
         BO    @RT00246                                            0246
         LH    @12,DCBRKP+52(,@12)                                 0246
         LTR   @12,@12                                             0246
         BNP   @RF00246                                            0246
@RT00246 DS    0H                                                  0247
*         RPLKGE=ON;                /* SEARCH KEY EQUAL/HIGH @YM05335*/
         OI    RPLKGE(RRPL),B'00000100'                            0247
*                                                                  0248
*       /*************************************************************/
*       /*                                                           */
*       /* ISSUE VSAM GET (NUP OR UPD).                              */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0248
*       R1=ADDR(IFGRPL);            /* POINT TO RPL                  */
@RF00246 LR    R1,RRPL                                             0248
*       RFY                                                        0249
*        (R2,                                                      0249
*         R3,                                                      0249
*         R4,                                                      0249
*         R5,                                                      0249
*         R6,                                                      0249
*         R7,                                                      0249
*         R8,                                                      0249
*         R9,                                                      0249
*         R10,                                                     0249
*         R12) RSTD;                /* INDICATE REG CHANGE           */
*       GEN(LM    R2,R10,TWENTY8(R13));/* RESTORE USER REGS          */
         LM    R2,R10,TWENTY8(R13)
*       RFY                                                        0251
*         IFGRPL BASED(R1);         /* SET NEW RPL BASE              */
*       R12=R12SAVE;                /* SET TO USER R12 ISSUE VSAM GET*/
         L     R12,R12SAVE(,R13)                                   0252
*       GEN(GET   RPL=(1));         /*                               */
         GET   RPL=(1)
*       RFY                                                        0254
*        (R2,                                                      0254
*         R3,                                                      0254
*         R4,                                                      0254
*         R5,                                                      0254
*         R6,                                                      0254
*         R7,                                                      0254
*         R8,                                                      0254
*         R9,                                                      0254
*         R10,                                                     0254
*         R12) UNRSTD;              /* DROP REGISTERS                */
*       RRPL=R1;                    /* RESET RPL BASE                */
         LR    RRPL,R1                                             0255
*       RFY                                                        0256
*         IFGRPL BASED(RRPL);       /* DEFINE RPL BASE               */
*       RPLKGE=OFF;                 /* TURN OFF HIGH/EQ SEARCH     0257
*                                                            @YM05335*/
         NI    RPLKGE(RRPL),B'11111011'                            0257
*       RDECB=RPLDECB;              /* SET DECB BASE                 */
         L     RDECB,RPLDECB+76(,RRPL)                             0258
*       IF RPLERRCD=RPLNOPLH        /* IF NO PLACEHOLDER,            */
*         THEN                                                     0259
         CLI   RPLERRCD(RRPL),64                                   0259
         BNE   @RF00259                                            0259
*         DECEXINV=ON;              /* SET INVALID REQUEST           */
         OI    DECEXINV(RDECB),B'00010000'                         0260
*                                                                  0261
*       /*************************************************************/
*       /*                                                           */
*       /* FOR A SUCCESSFUL ISAM READ SET THE LOGICAL RECORD POINTER */
*       /* AND, FOR VARIABLE LENGTH RECORDS, SET THE RECORD          */
*       /* DESCRIPTOR WORD. IF A DATA ONLY RETRIEVAL WAS DONE, MOVE  */
*       /* DATA TO THE USER AREA IF NECESSARY.                       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0261
*       IF DECBEXC1=CZERO&          /* IF NO ERRORS AND              */
*           (DECBTYP2=READK×        /* IF A READ WITH OR WITH-       */
*           DECBTYP2=READKU) THEN   /* OUT UPDATE, SET LOGR.         */
@RF00259 CLI   DECBEXC1(RDECB),B'00000000'                         0261
         BNE   @RF00261                                            0261
         CLI   DECBTYP2(RDECB),B'10000000'                         0261
         BE    @RT00261                                            0261
         CLI   DECBTYP2(RDECB),B'00100000'                         0261
         BNE   @RF00261                                            0261
@RT00261 DS    0H                                                  0262
*         DO;                       /* (AND RDW IF VLR.)             */
*           DECEXOFL=ON;            /* SET OVERFLOW ON               */
         OI    DECEXOFL(RDECB),B'00000010'                         0263
*           DECBLOGR=DECBAREA+SIXTEEN;/* SET LOGICAL RECORD PTR      */
         LA    @12,16                                              0264
         AL    @12,DECBAREA(,RDECB)                                0264
         ST    @12,DECBLOGR(,RDECB)                                0264
*           IF DCBRECL='01'B THEN   /* IF VARIABLE LENGTH            */
         L     @10,DECBDCBA(,RDECB)                                0265
         TM    DCBRECL+28(@10),B'01000000'                         0265
         BNO   @RF00265                                            0265
         TM    DCBRECL+28(@10),B'10000000'                         0265
         BNZ   @RF00265                                            0265
*             DO;                   /* AN RDW IS INCLUDED            */
*               RDWLL=RPLRLEN+LENGTH(RDW);/* SET LENGTH IN RDW       */
         LA    @10,4                                               0267
         AL    @10,RPLRLEN(,RRPL)                                  0267
         STH   @10,RDWLL(,@12)                                     0267
*               FILLER=ZERO;        /* SET FIELD TO ZERO             */
         SLR   @10,@10                                             0268
         STH   @10,FILLER(,@12)                                    0268
*             END;                  /* END OF VLR READ CODE          */
*           ELSE                    /* POINT TO LOGICAL REC          */
*             DO;                   /* FOR FIXED LENGTH RECS         */
         B     @RC00265                                            0270
@RF00265 DS    0H                                                  0271
*               IF DCBRKP=ZERO&     /* IF RKP IS ZERO AND UN-        */
*                   DCBRECBR=OFF THEN/* BLOCKED THEN MOVE            */
         L     @12,DECBDCBA(,RDECB)                                0271
         LH    @10,DCBRKP+52(,@12)                                 0271
         LTR   @10,@10                                             0271
         BNZ   @RF00271                                            0271
         TM    DCBRECBR+28(@12),B'00010000'                        0271
         BNZ   @RF00271                                            0271
*                 DO;               /* DATA ONLY TO USER AREA        */
*                   IF DECBARS=ON THEN/* IF DYNAMIC BUFFER, NO       */
         TM    DECBARS(RDECB),B'00000001'                          0273
         BNO   @RF00273                                            0273
*                     DECBLOGR=DECBLOGR+DCBKEYLE;/* MOVE NECESSARY   */
         SLR   @10,@10                                             0274
         IC    @10,DCBKEYLE+16(,@12)                               0274
         AL    @10,DECBLOGR(,RDECB)                                0274
         ST    @10,DECBLOGR(,RDECB)                                0274
*                   ELSE            /* MOVE DATA TO                  */
*                     DO;           /* THE USER AREA                 */
         B     @RC00273                                            0275
@RF00273 DS    0H                                                  0276
*                       RFY                                        0276
*                        (R4,                                      0276
*                         R5,                                      0276
*                         R6,                                      0276
*                         R7) RSTD; /* GET WORK REGISTERS            */
*                       R4=DECBLOGR;/* POINT TO USER AREA            */
         L     R4,DECBLOGR(,RDECB)                                 0277
*                       R6=RPLIIBFR+DCBKEYLE;/* POINT PAST THE KEY   */
         L     @12,DECBDCBA(,RDECB)                                0278
         SLR   R6,R6                                               0278
         IC    R6,DCBKEYLE+16(,@12)                                0278
         AL    R6,RPLIIBFR+76(,RRPL)                               0278
*                       R5=DCBLRECL;/* GET RECORD LENGTH IN          */
         LH    R5,DCBLRECL+52(,@12)                                0279
*                       R7=R5;      /* BOTH ODD REGISTERS            */
         LR    R7,R5                                               0280
*                       GEN(MVCL  R4,R6);/* MOVE RECORD TO USER      */
         MVCL  R4,R6
*                       RFY                                        0282
*                        (R4,                                      0282
*                         R5,                                      0282
*                         R6,                                      0282
*                         R7) UNRSTD;/* DROP WORK REGISTERS          */
*                     END;          /* END OF DATA MOVE              */
*                 END;              /* END OF LOGR RESET             */
@RC00273 DS    0H                                                  0285
*             END;                  /* END OF FLR/LOGR CODE IF     0285
*                                      BLOCKED RECORDS OR            */
@RF00271 DS    0H                                                  0286
*           IF DCBRECBR=ON×DCBRKP>ZERO THEN/* RKP > 0 THEN   @YM05335*/
@RC00265 L     @12,DECBDCBA(,RDECB)                                0286
         TM    DCBRECBR+28(@12),B'00010000'                        0286
         BO    @RT00286                                            0286
         LH    @12,DCBRKP+52(,@12)                                 0286
         LTR   @12,@12                                             0286
         BNP   @RF00286                                            0286
@RT00286 DS    0H                                                  0287
*             DO;                   /* IF RETRIEVED KEY HIGHER       */
*               IF LRECORD(1:DCBKEYLE)>RKEY(1:DCBKEYLE) THEN/*     0288
*                                                            @YM05335*/
         L     @12,DECBDCBA(,RDECB)                                0288
         LH    @10,DCBRKP+52(,@12)                                 0288
         AL    @10,DECBLOGR(,RDECB)                                0288
         L     @15,DECBKEY(,RDECB)                                 0288
         SLR   @14,@14                                             0288
         IC    @14,DCBKEYLE+16(,@12)                               0288
         BCTR  @14,0                                               0288
         EX    @14,@SC01320                                        0288
         BNH   @RF00288                                            0288
*                 DO;               /* THAN KEY IN DECB THEN         */
*                   DECEXRNF=ON;    /* SET NO RECORD FOUND & @YM05335*/
         OI    DECEXRNF(RDECB),B'10000000'                         0290
*                   IF DCBRECL='10'B THEN/* TURN ON OVERFLOW BIT IN
*                                                            @YM05335*/
         TM    DCBRECL+28(@12),B'10000000'                         0291
         BNO   @RF00291                                            0291
         TM    DCBRECL+28(@12),B'01000000'                         0291
         BNZ   @RF00291                                            0291
*                     FLRFLAG=OVERFLOW;/* FLAG BYTE OF       @YM05335*/
         L     @12,DECBAREA(,RDECB)                                0292
         MVI   FLRFLAG+14(@12),B'00010000'                         0292
*                   ELSE                                           0293
*                     VLRFLAG=OVERFLOW;/* OVERFLOW LINK FIELD      0293
*                                                            @YM05335*/
         B     @RC00291                                            0293
@RF00291 L     @12,DECBAREA(,RDECB)                                0293
         MVI   VLRFLAG+10(@12),B'00010000'                         0293
*                 END;              /* END OF NO RECORD FOUND        */
@RC00291 DS    0H                                                  0295
*             END;                  /* END OF HIGH/EQ SEARCH         */
@RF00288 DS    0H                                                  0296
*         END;                      /* END OF READ CODE              */
@RF00286 DS    0H                                                  0297
*     END;                          /* END OF VSAM GET               */
@RF00261 DS    0H                                                  0298
*                                                                  0298
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE IF A VSAM PUT SHOULD BE ISSUED.                     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0298
*   IF(DECBEXC1=CZERO&              /* IF NO ERRORS YET AND          */
*       (DECBTYP2=WRITEK×           /* THIS IS A WRITE OR            */
*       DECBTYP2=WRITEKN))×         /* WRITE KEY NEW OR              */
*       (DECEXRNF=ON&               /* NOR RECORD FOUND AND          */
*       DECBTYP2=WRITEKN) THEN      /* WRITE KEY NEW         @ZA01394*/
@RF00233 CLI   DECBEXC1(RDECB),B'00000000'                         0298
         BNE   @GL00022                                            0298
         CLI   DECBTYP2(RDECB),B'00001000'                         0298
         BE    @RT00298                                            0298
         CLI   DECBTYP2(RDECB),B'00000100'                         0298
         BE    @RT00298                                            0298
@GL00022 TM    DECEXRNF(RDECB),B'10000000'                         0298
         BNO   @RF00298                                            0298
         CLI   DECBTYP2(RDECB),B'00000100'                         0298
         BNE   @RF00298                                            0298
@RT00298 DS    0H                                                  0299
*     DO;                           /* PUT MUST BE ISSUED            */
*       IF(DECEXRNF=ON&             /* NO REC FOUND          @OY11887*/
*           DECBTYP2=WRITEKN) THEN  /* AND WKN               @OY11887*/
         TM    DECEXRNF(RDECB),B'10000000'                         0300
         BNO   @RF00300                                            0300
         CLI   DECBTYP2(RDECB),B'00000100'                         0300
         BNE   @RF00300                                            0300
*         DO;                       /* NOP UPD               @OY11887*/
*           RPLUPD=OFF;             /* TURN OFF UPD          @OY11887*/
         NI    RPLUPD(RRPL),B'11111101'                            0302
*           DECEXRNF=OFF;           /* TURN OFF ERROR        @OY11887*/
         NI    DECEXRNF(RDECB),B'01111111'                         0303
*         END;                      /* END NOP               @OY11887*/
*                                                                  0304
*       /*************************************************************/
*       /*                                                           */
*       /* FOR VLR, SET RECORD LENGTH FROM THE RDW AND SET VSAM AREA */
*       /* POINTER PAST THE RDW.                                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0305
*       IF DCBRECL='01'B THEN       /* IF VLR, RKP MUST BE           */
@RF00300 L     @12,DECBDCBA(,RDECB)                                0305
         TM    DCBRECL+28(@12),B'01000000'                         0305
         BNO   @RF00305                                            0305
         TM    DCBRECL+28(@12),B'10000000'                         0305
         BNZ   @RF00305                                            0305
*         DO;                       /* NON-ZERO                      */
*           RPLRLEN=RDWLL-LENGTH(RDW);/* GET RECORD LENGTH           */
         L     @12,DECBAREA(,RDECB)                                0307
         LH    @10,RDWLL+16(,@12)                                  0307
         SL    @10,@CF00157                                        0307
         ST    @10,RPLRLEN(,RRPL)                                  0307
*           RPLAREA=DECBAREA+TWENTY;/* POINT PAST THE RDW            */
         AL    @12,@CF01154                                        0308
         ST    @12,RPLAREA(,RRPL)                                  0308
*         END;                      /* END OF VLR CODE               */
*                                                                  0309
*       /*************************************************************/
*       /*                                                           */
*       /* FOR FIXED LENGTH RECORDS, CONSTRUCT A VSAM RECORD WITH THE*/
*       /* KEY IN FRONT IF RKP=0 AND RECFM=F. OTHERWISE, SET VSAM    */
*       /* RECORD LENGTH TO DCBLRECL AND SET THE VSAM RECORD POINTER */
*       /* TO THE USER AREA.                                         */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0310
*       ELSE                        /* COME HERE FOR FIXED           */
*         DO;                       /* LENGTH RECORDS                */
         B     @RC00305                                            0310
@RF00305 DS    0H                                                  0311
*           RFY                                                    0311
*            (R4,                                                  0311
*             R5,                                                  0311
*             R6,                                                  0311
*             R7) RSTD;             /* GET REGISTERS                 */
*           IF DCBRKP=ZERO&         /* IF NON-EMBEDDED KEYS,         */
*               DCBRECBR=OFF THEN   /* RECORD MOVED TO II            */
         L     @12,DECBDCBA(,RDECB)                                0312
         LA    @10,52                                              0312
         ALR   @10,@12                                             0312
         LH    @00,DCBRKP(,@10)                                    0312
         LTR   @00,@00                                             0312
         BNZ   @RF00312                                            0312
         TM    DCBRECBR+28(@12),B'00010000'                        0312
         BNZ   @RF00312                                            0312
*             DO;                   /* BUFFER FROM USER AREA         */
*               R5=DCBLRECL;        /* GET RECORD LENGTH             */
         LH    @10,DCBLRECL(,@10)                                  0314
         LR    R5,@10                                              0314
*               RPLRLEN=DCBLRECL+DCBKEYLE;/* INCLUDE KEY IN LENGTH   */
         LA    @15,16                                              0315
         ALR   @12,@15                                             0315
         SLR   @14,@14                                             0315
         IC    @14,DCBKEYLE(,@12)                                  0315
         ALR   @10,@14                                             0315
         ST    @10,RPLRLEN(,RRPL)                                  0315
*               R7=R5;              /* LENGTH IN ODD REGS            */
         LR    R7,R5                                               0316
*               R4=RPLIIBFR+DCBKEYLE;/* SET THE TO ADDRESS           */
         AL    @14,RPLIIBFR+76(,RRPL)                              0317
         LR    R4,@14                                              0317
*               R6=DECBAREA+SIXTEEN;/* SET THE FROM ADDRESS          */
         AL    @15,DECBAREA(,RDECB)                                0318
         LR    R6,@15                                              0318
*               GEN(MVCL  R4,R6);   /* MOVE DATA                     */
         MVCL  R4,R6
*               IF DECBTYP2=WRITEKN /* IF WRITE KEY NEW, PLACE       */
*                 THEN              /* KEY IN FRONT OF RECORD        */
         CLI   DECBTYP2(RDECB),B'00000100'                         0320
         BNE   @RF00320                                            0320
*                 DO;               /* (KEY READ FOR WRITE) MOVE KEY */
*                   VSAMBFR(ONE:DCBKEYLE)=RKEY(ONE:DCBKEYLE);      0322
         L     @12,RPLIIBFR+76(,RRPL)                              0322
         L     @10,DECBDCBA(,RDECB)                                0322
         SLR   @15,@15                                             0322
         IC    @15,DCBKEYLE+16(,@10)                               0322
         BCTR  @15,0                                               0322
         L     @10,DECBKEY(,RDECB)                                 0322
         EX    @15,@SM01323                                        0322
*                   RPLAREA=RPLIIBFR;/* POINT TO II BUFFER           */
         ST    @12,RPLAREA(,RRPL)                                  0323
*                 END;              /* END OF WRITE KEY NEW          */
*             END;                  /* END OF NON-EMBEDDED KEY       */
*           ELSE                    /* HERE IF KEY IS EMBEDDED       */
*             DO;                                                  0326
         B     @RC00312                                            0326
@RF00312 DS    0H                                                  0327
*               RPLRLEN=DCBLRECL;   /* SET RECORD LENGTH             */
         L     @12,DECBDCBA(,RDECB)                                0327
         LH    @12,DCBLRECL+52(,@12)                               0327
         ST    @12,RPLRLEN(,RRPL)                                  0327
*               RPLAREA=DECBAREA+SIXTEEN;/* POINT TO USER AREA       */
         LA    @12,16                                              0328
         AL    @12,DECBAREA(,RDECB)                                0328
         ST    @12,RPLAREA(,RRPL)                                  0328
*             END;                  /* END OF EMBEDDED KEY           */
*           RFY                                                    0330
*            (R4,                                                  0330
*             R5,                                                  0330
*             R6,                                                  0330
*             R7) UNRSTD;           /* DROP REGS                     */
@RC00312 DS    0H                                                  0331
*         END;                      /* END OF FLR CODE               */
*                                                                  0332
*       /*************************************************************/
*       /*                                                           */
*       /* IF THE INSERT OR UPDATE RECORD IS NOT DELETED, ISSUE A    */
*       /* VSAM PUT. OTHERWISE, ISSUE AN ERASE IF AN UPDATE OR DO    */
*       /* NOTHING IF AN INSERT.                                     */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0332
*       IF DCBOPTL=ON&              /* DELETE RECORDS ARE NOT        */
*           DCBOPTI=ON THEN         /* PUT IN VSAM DATA SET          */
@RC00305 L     @12,DECBDCBA(,RDECB)                                0332
         LA    @10,52                                              0332
         ALR   @10,@12                                             0332
         TM    DCBOPTL(@10),B'00010010'                            0332
         BNO   @RF00332                                            0332
*         DO;                       /* IF REQUESTED BY USER.         */
*           RFY                                                    0334
*             R4 RSTD;              /* GET WORK REGISTER             */
*           IF DCBRKP=ZERO THEN     /* POINT TO THE FIRST DATA       */
         LH    @10,DCBRKP(,@10)                                    0335
         LTR   @10,@10                                             0335
         BNZ   @RF00335                                            0335
*             R4=RPLAREA+DCBKEYLE;  /* BYTE--ALLOWING FOR KEY,       */
         SLR   R4,R4                                               0336
         IC    R4,DCBKEYLE+16(,@12)                                0336
         AL    R4,RPLAREA(,RRPL)                                   0336
*           ELSE                                                   0337
*             R4=RPLAREA;           /* IF NECESSARY.                 */
         B     @RC00335                                            0337
@RF00335 L     R4,RPLAREA(,RRPL)                                   0337
*           IF DATABYT1^=DELCODE THEN/* IF RECORD IS NOT DELETE      */
@RC00335 CLI   DATABYT1(R4),B'11111111'                            0338
         BNE   @RT00338                                            0338
*             GO TO VSAMPUT;        /* GO DO A PUT.                  */
*           IF RPLUPD=ON THEN       /* IF AN EXISTING RECORD IS TO BE
*                                      UPDATED WITH                  */
         TM    RPLUPD(RRPL),B'00000010'                            0340
         BNO   @RF00340                                            0340
*             DO;                   /* A DELETED RECORD, ERASE       */
*               R1=ADDR(IFGRPL);    /* POINT TO THE RPL              */
         LR    R1,RRPL                                             0342
*               RFY                                                0343
*                (R2,                                              0343
*                 R3,                                              0343
*                 R4,                                              0343
*                 R5,                                              0343
*                 R6,                                              0343
*                 R7,                                              0343
*                 R8,                                              0343
*                 R9,                                              0343
*                 R10,                                             0343
*                 R12) RSTD;        /* GET REGS                      */
*               GEN(LM    R2,R10,TWENTY8(R13));/* GET USER REGS      */
         LM    R2,R10,TWENTY8(R13)
*               RFY                                                0345
*                 IFGRPL BASED(R1); /* RESET RPL BASE                */
*               R12=R12SAVE;        /* SET TO USER R12 ISSUE VSAM  0346
*                                      ERASE                         */
         L     R12,R12SAVE(,R13)                                   0346
*               GEN(ERASE RPL=(1)); /*                               */
         ERASE RPL=(1)
*               RFY                                                0348
*                (R2,                                              0348
*                 R3,                                              0348
*                 R4,                                              0348
*                 R5,                                              0348
*                 R6,                                              0348
*                 R7,                                              0348
*                 R8,                                              0348
*                 R9,                                              0348
*                 R10,                                             0348
*                 R12) UNRSTD;      /* DROP                          */
*               RRPL=R1;            /* RESET RPL BASE REGISTER       */
         LR    RRPL,R1                                             0349
*               RFY                                                0350
*                 IFGRPL BASED(RRPL);/* REDEFINE RPL BASE            */
*             END;                  /* END OF UPDATE DELETE          */
*         END;                      /* END OF ERASE OPTION RTN       */
*       ELSE                        /* COME HERE TO PUT NUP OR       */
*         DO;                       /* UPD A VSAM RECORD             */
         B     @RC00332                                            0353
@RF00332 DS    0H                                                  0354
*                                                                  0354
*           /*********************************************************/
*           /*                                                       */
*           /* ISSUE VSAM PUT                                        */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0354
*VSAMPUT:                                                          0354
*           R1=ADDR(IFGRPL);        /* POINT TO RPL                  */
VSAMPUT  LR    R1,RRPL                                             0354
*           RFY                                                    0355
*            (R2,                                                  0355
*             R3,                                                  0355
*             R4,                                                  0355
*             R5,                                                  0355
*             R6,                                                  0355
*             R7,                                                  0355
*             R8,                                                  0355
*             R9,                                                  0355
*             R10,                                                 0355
*             R12) RSTD;            /* GET REGS                      */
*           GEN(LM    R2,R10,TWENTY8(R13));/* RESTORE USER REGS      */
         LM    R2,R10,TWENTY8(R13)
*           RFY                                                    0357
*             IFGRPL BASED(R1);     /* SET NEW RPL BASE              */
*           R12=R12SAVE;            /* SET TO USER R12 ISSUE VSAM PUT*/
         L     R12,R12SAVE(,R13)                                   0358
*           GEN(PUT   RPL=(1));     /*                               */
         PUT   RPL=(1)
*           RFY                                                    0360
*            (R2,                                                  0360
*             R3,                                                  0360
*             R4,                                                  0360
*             R5,                                                  0360
*             R6,                                                  0360
*             R7,                                                  0360
*             R8,                                                  0360
*             R9,                                                  0360
*             R10,                                                 0360
*             R12) UNRSTD;          /* DROP REGISTERS                */
*           RRPL=R1;                /* RESET RPL BASE                */
         LR    RRPL,R1                                             0361
*           RFY                                                    0362
*             IFGRPL BASED(RRPL);   /* REDEFINE RPL BASE             */
*         END;                      /* END OF PUT CODE               */
*       RDECB=RPLDECB;              /* SET DECB BASE                 */
@RC00332 L     RDECB,RPLDECB+76(,RRPL)                             0364
*       IF RPLERRCD=RPLNOPLH THEN   /* IF NO PLACEHOLDER,            */
         CLI   RPLERRCD(RRPL),64                                   0365
         BNE   @RF00365                                            0365
*         DECEXINV=ON;              /* SET INVALID REQUEST           */
         OI    DECEXINV(RDECB),B'00010000'                         0366
*                                                                  0367
*       /*************************************************************/
*       /*                                                           */
*       /* IF THE INSERT IS A DUPLICATE, READ THE OLD RECORD FOR     */
*       /* UPDATE TO SEE IF IT WAS DELETED. IF IT WAS DELETED, DO AN */
*       /* UPDATE PUT. OTHERWISE, SET DUPLICATE RECORD ERROR AGAIN.  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0367
*       IF DECEXDUP=ON&             /* IF A DUPLICATE RECORD         */
*           DCBOPTL=ON THEN         /* BUT DELETE OPTION ON          */
@RF00365 TM    DECEXDUP(RDECB),B'00000001'                         0367
         BNO   @RF00367                                            0367
         L     @12,DECBDCBA(,RDECB)                                0367
         TM    DCBOPTL+52(@12),B'00000010'                         0367
         BNO   @RF00367                                            0367
*         DO;                       /* SEE IF RECORD DELETED         */
*                                                                  0368
*           /*********************************************************/
*           /*                                                       */
*           /* DO VSAM GET UPDATE INTO ISAM INTERFACE AREA.          */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0369
*           RPLAREA=RPLIIBFR;       /* POINT TO II BUFFER            */
         L     @12,RPLIIBFR+76(,RRPL)                              0369
         ST    @12,RPLAREA(,RRPL)                                  0369
*           RPLUPD=ON;              /* INDICATE UPDATE               */
         OI    RPLUPD(RRPL),B'00000010'                            0370
*           DECEXDUP=OFF;           /* CLEAR ERROR FLAG              */
         NI    DECEXDUP(RDECB),B'11111110'                         0371
*           R1=ADDR(IFGRPL);        /* POINT TO RPL                  */
         LR    R1,RRPL                                             0372
*           RFY                                                    0373
*            (R2,                                                  0373
*             R3,                                                  0373
*             R4,                                                  0373
*             R5,                                                  0373
*             R6,                                                  0373
*             R7,                                                  0373
*             R8,                                                  0373
*             R9,                                                  0373
*             R10,                                                 0373
*             R12) RSTD;            /* GUARD REGS                    */
*           GEN(LM    R2,R10,TWENTY8(R13));/* RESTORE USER REGS      */
         LM    R2,R10,TWENTY8(R13)
*           RFY                                                    0375
*             IFGRPL BASED(R1);     /* SET NEW RPL BASE              */
*           R12=R12SAVE;            /* SET USER REG 12 ISSUE VSAM GET*/
         L     R12,R12SAVE(,R13)                                   0376
*           GEN(GET   RPL=(1));     /*                               */
         GET   RPL=(1)
*           RFY                                                    0378
*            (R2,                                                  0378
*             R3,                                                  0378
*             R4,                                                  0378
*             R5,                                                  0378
*             R6,                                                  0378
*             R7,                                                  0378
*             R8,                                                  0378
*             R9,                                                  0378
*             R10,                                                 0378
*             R12) UNRSTD;          /*                               */
*           RRPL=R1;                /* RESET RPL BASE                */
         LR    RRPL,R1                                             0379
*           RFY                                                    0380
*             IFGRPL BASED(RRPL);   /* REDEFINE RPL BASE             */
*           RDECB=RPLDECB;          /* RESET DECB BASE               */
         L     RDECB,RPLDECB+76(,RRPL)                             0381
*           IF RPLERRCD=RPLNOPLH THEN/* IF NO PLACEHOLDER,           */
         CLI   RPLERRCD(RRPL),64                                   0382
         BNE   @RF00382                                            0382
*             DECEXINV=ON;          /* SET INVALID REQUEST           */
         OI    DECEXINV(RDECB),B'00010000'                         0383
*           IF DECBEXC1=CZERO THEN  /* IF NO ERROR YET, SEE          */
@RF00382 CLI   DECBEXC1(RDECB),B'00000000'                         0384
         BNE   @RF00384                                            0384
*             DO;                   /* IF RECORD DELETED             */
*               RFY                                                0386
*                (R4,                                              0386
*                 R5,                                              0386
*                 R6,                                              0386
*                 R7) RSTD;         /* GET REGS FOR MVCL             */
*               IF DCBRKP=ZERO THEN /* IF RKP = 0, SKIP ACROSS       */
         L     @12,DECBDCBA(,RDECB)                                0387
         LH    @10,DCBRKP+52(,@12)                                 0387
         LTR   @10,@10                                             0387
         BNZ   @RF00387                                            0387
*                 R4=RPLIIBFR+DCBKEYLE;/* KEY TO 1ST DATA            */
         SLR   R4,R4                                               0388
         IC    R4,DCBKEYLE+16(,@12)                                0388
         AL    R4,RPLIIBFR+76(,RRPL)                               0388
*               ELSE                                               0389
*                 R4=RPLIIBFR;      /* POINT TO FIRST DATA           */
         B     @RC00387                                            0389
@RF00387 L     R4,RPLIIBFR+76(,RRPL)                               0389
*               IF DATABYT1=DELCODE THEN/* IF RECORD DELETED, DO     */
@RC00387 CLI   DATABYT1(R4),B'11111111'                            0390
         BNE   @RF00390                                            0390
*                 DO;               /* PUT UPD TO REPLACE IT         */
*                                                                  0392
*                   /*************************************************/
*                   /*                                               */
*                   /* DO VSAM PUT FOR UPDATE TO REPLACE A DELETED   */
*                   /* RCD.                                          */
*                   /*                                               */
*                   /*************************************************/
*                                                                  0392
*                   IF DCBRKP=ZERO THEN/* IF RKP IS ZERO, KEY AND  0392
*                                      DATA MUST BE PLACED           */
         LA    @12,52                                              0392
         AL    @12,DECBDCBA(,RDECB)                                0392
         LH    @10,DCBRKP(,@12)                                    0392
         LTR   @10,@10                                             0392
         BNZ   @RF00392                                            0392
*                     DO;           /* ADJACENT TO EACH OTHER        */
*                       R5=DCBLRECL;/* GET DATA LENGTH               */
         LH    R5,DCBLRECL(,@12)                                   0394
*                       R7=R5;      /* PUT IN BOTH ODD REGS          */
         LR    R7,R5                                               0395
*                       R6=DECBAREA+SIXTEEN;/* SET FROM ADDRESS      */
         LA    R6,16                                               0396
         AL    R6,DECBAREA(,RDECB)                                 0396
*                       GEN(MVCL  R4,R6);/* MOVE TO IIBFR+KEYLEN     */
         MVCL  R4,R6
*                     END;          /* END OF RKP = 0 CODE           */
*                   ELSE            /* HERE IF RKP NON-ZERO          */
*                     IF DCBRECL='01'B THEN/* IF VLR, ALLOW FOR RDW  */
         B     @RC00392                                            0399
@RF00392 L     @12,DECBDCBA(,RDECB)                                0399
         TM    DCBRECL+28(@12),B'01000000'                         0399
         BNO   @RF00399                                            0399
         TM    DCBRECL+28(@12),B'10000000'                         0399
         BNZ   @RF00399                                            0399
*                       DO;         /* AND RECORD LENGTH             */
*                         RPLAREA=DECBAREA+TWENTY;/* POINT PAST RDW  */
         L     @12,DECBAREA(,RDECB)                                0401
         LA    @10,20                                              0401
         ALR   @10,@12                                             0401
         ST    @10,RPLAREA(,RRPL)                                  0401
*                         RPLRLEN=RDWLL-LENGTH(RDW);/* SET NEW RECORD*/
         LH    @12,RDWLL+16(,@12)                                  0402
         SL    @12,@CF00157                                        0402
         ST    @12,RPLRLEN(,RRPL)                                  0402
*                       END;        /* LENGTH. END OF VLR CODE       */
*                     ELSE                                         0404
*                       RPLAREA=DECBAREA+SIXTEEN;/* FLR--NO RDW      */
         B     @RC00399                                            0404
@RF00399 LA    @12,16                                              0404
         AL    @12,DECBAREA(,RDECB)                                0404
         ST    @12,RPLAREA(,RRPL)                                  0404
*                   R1=RRPL;        /* RESET RPL BASE                */
@RC00399 DS    0H                                                  0405
@RC00392 LR    R1,RRPL                                             0405
*                   RFY                                            0406
*                     IFGRPL BASED(R1);                            0406
*                   RFY                                            0407
*                    (R2,                                          0407
*                     R3,                                          0407
*                     R8,                                          0407
*                     R9,                                          0407
*                     R10,                                         0407
*                     R12) RSTD;    /* GET USER REGS                 */
*                   GEN(LM    R2,R10,TWENTY8(R13));/* RESTORE USER   */
         LM    R2,R10,TWENTY8(R13)
*                   R12=R12SAVE;    /* REGISTERS ISSUE VSAM        0409
*                                      PUT/UPDATE                    */
         L     R12,R12SAVE(,R13)                                   0409
*                   GEN(PUT    RPL=(1));/*                           */
         PUT    RPL=(1)
*                   RFY                                            0411
*                    (R2,                                          0411
*                     R3,                                          0411
*                     R4,                                          0411
*                     R5,                                          0411
*                     R6,                                          0411
*                     R7,                                          0411
*                     R8,                                          0411
*                     R9,                                          0411
*                     R10,                                         0411
*                     R12) UNRSTD;  /*                               */
*                   RRPL=R1;        /* RESET RPL BASE                */
         LR    RRPL,R1                                             0412
*                   RFY                                            0413
*                     IFGRPL BASED(RRPL);/* REDEFINE RPL BASE        */
*                   RDECB=RPLDECB;  /* RESET DECB BASE               */
         L     RDECB,RPLDECB+76(,RRPL)                             0414
*                 END;              /* END OF DELETED REC CODE       */
*               ELSE                                               0416
*                 DECEXDUP=ON;      /* SET DUPLICATE RECORD          */
         B     @RC00390                                            0416
@RF00390 OI    DECEXDUP(RDECB),B'00000001'                         0416
*             END;                  /* END OF NON-ERROR CODE         */
@RC00390 DS    0H                                                  0418
*         END;                      /* END OF DELETE OPTION          */
@RF00384 DS    0H                                                  0419
*     END;                          /* END OF VSAM PUT CALL          */
@RF00367 DS    0H                                                  0420
*                                                                  0420
*   /*****************************************************************/
*   /*                                                               */
*   /* FOR ALL BUT SUCCESSFUL READ FOR UPDATES, RELEASE THE RPL.     */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0420
*   IF DECBTYP2^=READKU×            /* IF NOT A READ FOR             */
*       DECEXRNF=ON×                /* UPDATE, OR IF ANY ERROR       */
*       DECEXRLC=ON×DECEXNSP=ON×DECEXINV=ON×DECEXERR=ON×DECEXUBK=ON×
*       DECEXDUP=ON THEN                                           0420
@RF00298 CLI   DECBTYP2(RDECB),B'00100000'                         0420
         BNE   @RT00420                                            0420
         TM    DECEXRNF(RDECB),B'11111101'                         0420
         BZ    @RF00420                                            0420
@RT00420 DS    0H                                                  0421
*     DO;                           /* FREE THE RPL.                 */
*       R1=ADDR(IFGRPL);            /* POINT TO RPL                  */
         LR    R1,RRPL                                             0422
*       RFY                                                        0423
*        (R2,                                                      0423
*         R3,                                                      0423
*         R4,                                                      0423
*         R5,                                                      0423
*         R6,                                                      0423
*         R7,                                                      0423
*         R8,                                                      0423
*         R9,                                                      0423
*         R10,                                                     0423
*         R12) RSTD;                /* GET REGS                      */
*       GEN(LM    R2,R10,TWENTY8(R13));/* RESTORE USER REGS          */
         LM    R2,R10,TWENTY8(R13)
*       RFY                                                        0425
*         IFGRPL BASED(R1);         /* SET NEW RPL BASE              */
*       R12=R12SAVE;                /* SET TO USER R12 ISSUE VSAM  0426
*                                      ENDREQ TO RELEASE RPL AND ITS
*                                      RESOURCES                     */
         L     R12,R12SAVE(,R13)                                   0426
*       GEN(ENDREQ  RPL=(1));       /*                               */
         ENDREQ  RPL=(1)
*       RFY                                                        0428
*        (R2,                                                      0428
*         R3,                                                      0428
*         R4,                                                      0428
*         R5,                                                      0428
*         R6,                                                      0428
*         R7,                                                      0428
*         R8,                                                      0428
*         R9,                                                      0428
*         R10,                                                     0428
*         R12) UNRSTD;              /* DROP REGISTERS                */
*       RRPL=R1;                    /* RESET RPL BASE                */
         LR    RRPL,R1                                             0429
*       RFY                                                        0430
*         IFGRPL BASED(RRPL);       /* REDEFINE RPL BASE             */
*       RDECB=RPLDECB;              /* SET DECB BASE                 */
         LA    @12,76                                              0431
         ALR   @12,RRPL                                            0431
         L     RDECB,RPLDECB(,@12)                                 0431
*       R01SAVE=RDECB;              /* RESTORE REG 1         @XM01688
*                                      R11 AND R14 MUST BE RESTORED
*                                      PRIOR TO FREE- ING THE RPL  0432
*                                                            @ZA01397*/
         ST    RDECB,R01SAVE(,R13)                                 0432
*       R11SAVE=RPLSAVE2;           /* RESTORE R11           @ZA01397*/
         L     @10,RPLSAVE2(,@12)                                  0433
         ST    @10,R11SAVE(,R13)                                   0433
*       R14SAVE=RPLSAVE;            /* RESTORE USER RETURN REG       */
         L     @10,RPLSAVE(,@12)                                   0434
         ST    @10,R14SAVE(,R13)                                   0434
*       RPLIITSB=CZERO;             /* MAKE RPL AVAILABLE            */
         MVI   RPLIITSB(@12),B'00000000'                           0435
*       DECEXRKU=OFF;               /* SET OFF UPDATE BIT            */
         NI    DECEXRKU(RDECB),B'11111110'                         0436
*     END;                          /* END OF NON-READ KU CODE       */
*   ELSE                            /* SUCCESSFUL READ               */
*     DO;                           /* FOR UPDATE                    */
         B     @RC00420                                            0438
@RF00420 DS    0H                                                  0439
*       DECEXRKU=ON;                /* INDICATE READ KU              */
         OI    DECEXRKU(RDECB),B'00000001'                         0439
*       R01SAVE=RDECB;              /* RESTORE R1            @ZA01395*/
         ST    RDECB,R01SAVE(,R13)                                 0440
*       R14SAVE=RPLSAVE;            /* RESTORE USER RETURN REG       */
         LA    @12,76                                              0441
         ALR   @12,RRPL                                            0441
         L     @10,RPLSAVE(,@12)                                   0441
         ST    @10,R14SAVE(,R13)                                   0441
*       R11SAVE=RPLSAVE2;           /* RESTORE USER R11              */
         L     @12,RPLSAVE2(,@12)                                  0442
         ST    @12,R11SAVE(,R13)                                   0442
*     END;                          /* END OF READ KU                */
*                                                                  0444
*   /*****************************************************************/
*   /*                                                               */
*   /* POST THE BISAM REQUEST COMPLETE.                              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0444
*   IF DECBWAIT=OFF THEN            /* IF NO WAIT, SET REQUEST       */
@RC00420 TM    DECBWAIT(RDECB),B'10000000'                         0444
         BNZ   @RF00444                                            0444
*     DECBPOST=ON;                  /* COMPLETE.                     */
         OI    DECBPOST(RDECB),B'01000000'                         0445
*   IF DECBWAIT=ON THEN             /* IF INTERRUPTED, ISSUE         */
@RF00444 TM    DECBWAIT(RDECB),B'10000000'                         0446
         BNO   @RF00446                                            0446
*     DO;                           /* A POST SVC.                   */
*       DECBPOST=OFF;               /* TURN OFF POST BIT             */
         NI    DECBPOST(RDECB),B'10111111'                         0448
*       RFY                                                        0449
*         RWORK1 RSTD;              /* GET WORK REG                  */
*       RWORK1=R1;                  /* SAVE REGISTER ONE             */
         LR    RWORK1,R1                                           0450
*       R1=ADDR(DECBECB);           /* POINT TO ECB                  */
*       GEN(POST  (1));             /* POST ECB COMPLETE             */
         POST  (1)
*       R1=RWORK1;                  /* RESTORE REGISTER ONE          */
         LR    R1,RWORK1                                           0453
*       RFY                                                        0454
*         RWORK1 UNRSTD;            /* DROP WORK REG                 */
*     END;                          /* END OF POST DECBECB           */
*   RETURN;                         /* END OF READ/WRITE CODE        */
         B     @EL00001                                            0456
*                                                                  0457
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
*/*                                                                  */
*/*   FUNCTION = FINDRPL                                             */
*/*      FIND AN AVAILABLE RPL ON THE II RPL CHAIN POINTED TO BY THE */
*/*      IICB AND THE RPLE.                                          */
*/*                                                                  */
*/*   INPUT =                                                        */
*/*      REGISTER 1 = DECB POINTER                                   */
*/*                                                                  */
*/*   OUTPUT =                                                       */
*/*      RRPL = ZERO IF NO AVAILABLE RPL                             */
*/*      RRPL = AVAILABLE RPL ADDRESS                                */
*/*                                                                  */
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
*                                                                  0457
*FINDRPL:                                                          0457
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/* FIND AN AVAILABLE RPL         */
FINDRPL  DS    0H                                                  0458
*   RFY                                                            0458
*     R14 RSTD;                     /* SAVE RETURN ADDR              */
*   RRPL=IIRPLPTR;                  /* POINT TO FIRST RPL            */
         L     @15,DECBDCBA(,RDECB)                                0459
         L     @15,DCBDEBAD+40(,@15)                               0459
         L     @15,DEBEXPT(,@15)                                   0459
         L     @15,DEBWKPT5(,@15)                                  0459
         L     RRPL,IIRPLPTR(,@15)                                 0459
*   DO WHILE RRPL^=ZERO;            /* SEARCH RPL CHAIN              */
         B     @DE00460                                            0460
@DL00460 DS    0H                                                  0461
*     TS(RPLIITSB);                 /* SEE IF BUSY                   */
         TS    RPLIITSB+76(RRPL)                                   0461
*     BC(8,RPLHERE);                /* BRANCH IF NOT BUSY            */
         BC    8,RPLHERE                                           0462
*     RRPL=RPLRPLPT;                /* GO TO NEXT RPL                */
         L     @15,RPLRPLPT+76(,RRPL)                              0463
         LR    RRPL,@15                                            0463
*   END;                            /* END OF RPL SEARCH             */
@DE00460 LTR   RRPL,RRPL                                           0464
         BNZ   @DL00460                                            0464
*   RETURN;                         /* RETURN (RRPL = 0)             */
@EL00002 DS    0H                                                  0465
@EF00002 DS    0H                                                  0465
@ER00002 BR    @14                                                 0465
*RPLHERE:                                                          0466
*   RPLDECB=RDECB;                  /* POINT RPL TO DECB             */
RPLHERE  ST    RDECB,RPLDECB+76(,RRPL)                             0466
*   RETURN;                         /* RETURN TO CALLER              */
         B     @EL00002                                            0467
*   END FINDRPL;                    /* END OF FINDRPL RTN            */
*                                                                  0469
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
*/*                                                                  */
*/*   FUNCTION = FINDORPL                                            */
*/*      FIND THE RPL THAT WAS USED FOR THE READ FOR UPDATE SO THAT  */
*/*      IT CAN BE USED FOR THE COMPLEMENTARY WRITE FOR UPDATE.      */
*/*                                                                  */
*/*   INPUT =                                                        */
*/*      REGISTER 1 = DECB POINTER                                   */
*/*                                                                  */
*/*   OUTPUT =                                                       */
*/*      RRPL = ZERO IF THE RPL IS NOT FOUND                         */
*/*      RRPL = OLD RPL ADDRESS                                      */
*/*                                                                  */
*/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
*                                                                  0469
*FINDORPL:                                                         0469
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0469
FINDORPL DS    0H                                                  0470
*   RRPL=IIRPLPTR;                  /* POINT TO FIRST RPL            */
         L     @15,DECBDCBA(,RDECB)                                0470
         L     @15,DCBDEBAD+40(,@15)                               0470
         L     @15,DEBEXPT(,@15)                                   0470
         L     @15,DEBWKPT5(,@15)                                  0470
         L     RRPL,IIRPLPTR(,@15)                                 0470
*   DO WHILE RRPL^=ZERO&            /* SEARCH RPL CHAIN UNTIL        */
*         RPLDECB^=RDECB;           /* END OF CHAIN OR UNTIL         */
         B     @DE00471                                            0471
@DL00471 DS    0H                                                  0472
*     RRPL=RPLRPLPT;                /* A MATCH IS FOUND.             */
         L     @15,RPLRPLPT+76(,RRPL)                              0472
         LR    RRPL,@15                                            0472
*   END;                            /* END OF RPL SEARCH             */
@DE00471 LTR   RRPL,RRPL                                           0473
         BZ    @DC00471                                            0473
         C     RDECB,RPLDECB+76(,RRPL)                             0473
         BNE   @DL00471                                            0473
@DC00471 DS    0H                                                  0474
*   END FINDORPL;                   /* END OF FIND OLD RPL           */
@EL00003 DS    0H                                                  0474
@EF00003 DS    0H                                                  0474
@ER00003 BR    @14                                                 0474
*   GEN(IDAPATCH);                  /* DEFINE A PATCH AREA           */
         IDAPATCH
*   END IDAIIPM3                                                   0476
*                                                                  0476
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IDAIIREG)                                       */
*/*%INCLUDE SYSLIB  (IDAIICB )                                       */
*/*%INCLUDE SYSLIB  (IHADCBDF)                                       */
*/*%INCLUDE SYSLIB  (IHADCB  )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDARPLE )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IHADECB )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*                                                                  0476
*       ;                                                          0476
         B     @EL00001                                            0476
@DATA    DS    0H
@SC01320 CLC   LRECORD(0,@10),RKEY(@15)
@SM01323 MVC   VSAMBFR(0,@12),RKEY(@10)
@DATD    DSECT
         DS    0F
IDAIIPM3 CSECT
         DS    0F
@CF00087 DC    F'1'
@CF00157 DC    F'4'
@CF00168 DC    F'16'
@CF01154 DC    F'20'
@CF01264 DC    F'4096'
@CF01265 DC    XL4'80000000'
@DATD    DSECT
         DS    0D
DEBDAPTR DS    A
DEBEXPTR DS    A
DEBSBPTR DS    A
DECBPT   DS    A
IDAIIPM3 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@DATD    DSECT
TWELVE   EQU   12                       OFFSET TO R14 IN USER SAVEAREA
TWENTY4  EQU   24                       OFFSET TO R1 IN USER SAVEAREA
TWENTY8  EQU   28                       OFFSET TO R2 IN USER SAVEAREA
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDAIIPM3 CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
GPR01F   EQU   @01
R0       EQU   @00
R1       EQU   @01
RDCB     EQU   @01
RDECB    EQU   @01
R2       EQU   @02
RIICB    EQU   @02
R3       EQU   @03
RRPL     EQU   @03
R4       EQU   @04
R5       EQU   @05
R6       EQU   @06
RWORK1   EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
R10      EQU   @10
DEBPTR   EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
GPR00F   EQU   @00
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14F   EQU   @14
GPR14P   EQU   @14
GPR15F   EQU   @15
GPR15P   EQU   @15
JFCBPTR  EQU   @09
RACB     EQU   @06
RBUFF    EQU   @05
RCORE    EQU   @04
RDEB     EQU   @11
RFMADDR  EQU   @07
RGMLEN   EQU   @09
RGMSP    EQU   @08
RLKRETSV EQU   @10
RPARC    EQU   @07
RTIOT    EQU   @09
RWORK2   EQU   @07
RWORK3   EQU   @08
R11      EQU   @11
IDAIICB  EQU   0
IIRPLPTR EQU   IDAIICB+12
IIW1CBF  EQU   IDAIICB+16
IIFLAG1  EQU   IDAIICB+24
IIFLAG2  EQU   IDAIICB+28
IIFLAG3  EQU   IDAIICB+36
IISAMSYN EQU   IDAIICB+52
IIREGSAV EQU   IDAIICB+60
IHADCB   EQU   0
IHADCS00 EQU   0
DCBFDAD  EQU   IHADCS00+5
IHADCS01 EQU   0
DCBDVTBL EQU   IHADCS01
IHADCS11 EQU   0
DCBRELB  EQU   IHADCS11
DCBKEYLE EQU   DCBRELB
DCBREL   EQU   DCBRELB+1
DCBBUFCB EQU   IHADCS11+4
DCBDSORG EQU   IHADCS11+10
DCBDSRG1 EQU   DCBDSORG
DCBDSRG2 EQU   DCBDSORG+1
DCBIOBAD EQU   IHADCS11+12
DCBODEB  EQU   DCBIOBAD
DCBLNP   EQU   DCBODEB
DCBQSLM  EQU   DCBLNP
DCBIOBAA EQU   DCBODEB+1
IHADCS50 EQU   0
DCBSVCXL EQU   IHADCS50
DCBEODAD EQU   IHADCS50+4
DCBBFALN EQU   DCBEODAD
DCBHIARC EQU   DCBBFALN
DCBBFTEK EQU   DCBHIARC
DCBBFT   EQU   DCBBFTEK
DCBEXLST EQU   IHADCS50+8
DCBRECFM EQU   DCBEXLST
DCBRECLA EQU   DCBRECFM
DCBRECL  EQU   DCBRECLA
DCBRECBR EQU   DCBRECFM
IHADCS24 EQU   0
DCBOFLGS EQU   IHADCS24+8
DCBOFLWR EQU   DCBOFLGS
DCBIFLG  EQU   IHADCS24+9
DCBIBPCT EQU   DCBIFLG
DCBMACR  EQU   IHADCS24+10
DCBMACR1 EQU   DCBMACR
DCBMRFE  EQU   DCBMACR1
DCBMRGET EQU   DCBMRFE
DCBMRAPG EQU   DCBMACR1
DCBMRRD  EQU   DCBMRAPG
DCBMRCI  EQU   DCBMACR1
DCBMRMVG EQU   DCBMRCI
DCBMRLCG EQU   DCBMACR1
DCBMRABC EQU   DCBMACR1
DCBMRPT1 EQU   DCBMRABC
DCBMRSBG EQU   DCBMRPT1
DCBMRCRL EQU   DCBMACR1
DCBMRCHK EQU   DCBMRCRL
DCBMRRDX EQU   DCBMRCHK
DCBMRDMG EQU   DCBMACR1
DCBMACR2 EQU   DCBMACR+1
DCBMRPUT EQU   DCBMACR2
DCBMRWRT EQU   DCBMACR2
DCBMRMVP EQU   DCBMACR2
DCBMR5WD EQU   DCBMACR2
DCBMRLDM EQU   DCBMR5WD
DCBMRLCP EQU   DCBMRLDM
DCBMR4WD EQU   DCBMACR2
DCBMRPT2 EQU   DCBMR4WD
DCBMRTMD EQU   DCBMRPT2
DCBMR3WD EQU   DCBMACR2
DCBMRCTL EQU   DCBMR3WD
DCBMRSTK EQU   DCBMRCTL
DCBMR1WD EQU   DCBMACR2
DCBMRSWA EQU   DCBMR1WD
DCBMRDMD EQU   DCBMRSWA
IHADCS25 EQU   0
DCBMACRF EQU   IHADCS25+2
DCBMACF1 EQU   DCBMACRF
DCBMFFE  EQU   DCBMACF1
DCBMFGET EQU   DCBMFFE
DCBMFAPG EQU   DCBMACF1
DCBMFRD  EQU   DCBMFAPG
DCBMFCI  EQU   DCBMACF1
DCBMFMVG EQU   DCBMFCI
DCBMFLCG EQU   DCBMACF1
DCBMFABC EQU   DCBMACF1
DCBMFPT1 EQU   DCBMFABC
DCBMFSBG EQU   DCBMFPT1
DCBMFCRL EQU   DCBMACF1
DCBMFCHK EQU   DCBMFCRL
DCBMFDMG EQU   DCBMACF1
DCBMACF2 EQU   DCBMACRF+1
DCBMFPUT EQU   DCBMACF2
DCBMFWRT EQU   DCBMACF2
DCBMFMVP EQU   DCBMACF2
DCBMF5WD EQU   DCBMACF2
DCBMFLDM EQU   DCBMF5WD
DCBMFLCP EQU   DCBMFLDM
DCBMF4WD EQU   DCBMACF2
DCBMFPT2 EQU   DCBMF4WD
DCBMFTMD EQU   DCBMFPT2
DCBMF3WD EQU   DCBMACF2
DCBMFCTL EQU   DCBMF3WD
DCBMFSTK EQU   DCBMFCTL
DCBMF1WD EQU   DCBMACF2
DCBMFSWA EQU   DCBMF1WD
DCBMFDMD EQU   DCBMFSWA
DCBDEBAD EQU   IHADCS25+4
DCBIFLGS EQU   DCBDEBAD
DCBIFPCT EQU   DCBIFLGS
IHADCS27 EQU   0
DCBGET   EQU   IHADCS27
DCBPUT   EQU   DCBGET
DCBGETA  EQU   DCBPUT+1
IHADCS29 EQU   0
DCBOPTCD EQU   IHADCS29
DCBOPTI  EQU   DCBOPTCD
DCBOPTL  EQU   DCBOPTCD
DCBMAC   EQU   IHADCS29+1
DCBSYNAD EQU   IHADCS29+4
DCBRKP   EQU   IHADCS29+8
DCBMSHI  EQU   IHADCS29+20
DCBEXCD1 EQU   IHADCS29+28
DCBEXCD2 EQU   IHADCS29+29
DCBEXLTH EQU   DCBEXCD2
DCBLRECL EQU   IHADCS29+30
DCBST    EQU   IHADCS29+108
IHADCS55 EQU   0
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLKGE   EQU   RPLOPT1
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IDARPLE  EQU   0
RPLDECB  EQU   IDARPLE+4
RPLIIBFR EQU   IDARPLE+8
RPLRPLPT EQU   IDARPLE+12
RPLIITSB EQU   IDARPLE+16
RPLSAVE  EQU   IDARPLE+20
RPLSAVE2 EQU   IDARPLE+24
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBWKPT5 EQU   DEBACS07+12
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBXTN   EQU   0
DEBXFLG1 EQU   DEBXTN+2
DECB     EQU   0
DECBPTR  EQU   DECB+4
DECTYPE  EQU   DECBPTR
DECTYPE1 EQU   DECTYPE
DECTYPE2 EQU   DECTYPE+1
DECNEXT  EQU   DECB+20
DECBS01  EQU   0
DECBECB  EQU   DECBS01
DECBRB   EQU   DECBECB
DECBECBF EQU   DECBRB
DECBWAIT EQU   DECBECBF
DECBPOST EQU   DECBECBF
DECBTYP1 EQU   DECBS01+4
DECBARS  EQU   DECBTYP1
DECBTYP2 EQU   DECBS01+5
DECBLGTH EQU   DECBS01+6
DECBDCBA EQU   DECBS01+8
DECBAREA EQU   DECBS01+12
DECBLOGR EQU   DECBS01+16
DECBKEY  EQU   DECBS01+20
DECBEXC1 EQU   DECBS01+24
DECEXRNF EQU   DECBEXC1
DECEXRLC EQU   DECBEXC1
DECEXNSP EQU   DECBEXC1
DECEXINV EQU   DECBEXC1
DECEXERR EQU   DECBEXC1
DECEXUBK EQU   DECBEXC1
DECEXOFL EQU   DECBEXC1
DECEXDUP EQU   DECBEXC1
DECBEXC2 EQU   DECBS01+25
DECEXRKU EQU   DECBEXC2
DECBS02  EQU   0
@NM00034 EQU   DECBS02
DECCC2   EQU   @NM00034+1
DECCC3   EQU   @NM00034+2
@NM00036 EQU   DECBS02+4
@NM00037 EQU   @NM00036
@NM00038 EQU   @NM00036+1
DECTYPRU EQU   @NM00038
DECNA    EQU   DECBS02+28
DECBS03  EQU   0
DECCPOL  EQU   DECBS03+20
@NM00046 EQU   DECBS03+36
DECBS04  EQU   0
@NM00049 EQU   DECBS04+4
@NM00050 EQU   @NM00049
@NM00053 EQU   DECBS04+8
DECBUFCT EQU   @NM00053
DECONLTT EQU   DECBUFCT
DECENTRY EQU   DECBS04+20
DECFLAGS EQU   DECBS04+24
DECWACK  EQU   DECFLAGS
DECREVRS EQU   DECFLAGS
DECERRST EQU   DECBS04+29
DECPOLPT EQU   DECBS04+36
DATABYT1 EQU   0
RDW      EQU   0
RDWLL    EQU   RDW
FILLER   EQU   RDW+2
RKEY     EQU   0
VSAMBFR  EQU   0
LRECORD  EQU   0
VLRFLAG  EQU   0
FLRFLAG  EQU   0
R12SAVE  EQU   68
SYNAD    EQU   0
R14SAVE  EQU   12
R11SAVE  EQU   64
R01SAVE  EQU   24
IKEBC    EQU   0
IKEBF15  EQU   0
IKEBF31  EQU   0
IKEBP15  EQU   0
IKEBP31  EQU   0
IKEBP8   EQU   0
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
DECBS05  EQU   DECNEXT
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
DECBLFMT EQU   DECBS05+8
DECBLNNM EQU   DECBS05+4
DECBHDRA EQU   DECBS05
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
DECWAREA EQU   DECBS04+44
DECWLNG  EQU   DECBS04+42
DECRSV56 EQU   DECBS04+40
DECPOLPA EQU   DECPOLPT+1
DECNDXPL EQU   DECPOLPT
DECADRPT EQU   DECBS04+32
DECCSWST EQU   DECBS04+30
DECRSV55 EQU   DECERRST
DECRSV54 EQU   DECERRST
DECRSV53 EQU   DECERRST
DECDSABL EQU   DECERRST
DECDIAGN EQU   DECERRST
DECERPER EQU   DECERRST
DECUNDEF EQU   DECERRST
DECSIO3  EQU   DECERRST
DECTPCOD EQU   DECBS04+28
DECRESPN EQU   DECBS04+26
DECRLN   EQU   DECBS04+25
DECSTXNQ EQU   DECFLAGS
DECSSMSG EQU   DECREVRS
DECNEGRP EQU   DECFLAGS
DECNOBUF EQU   DECFLAGS
DECBADID EQU   DECFLAGS
DECALTAC EQU   DECFLAGS
DECDIFAC EQU   DECWACK
DECERRMS EQU   DECWACK
DECENTRA EQU   DECENTRY+1
DECCMCOD EQU   DECENTRY
DECCOUNT EQU   DECBS04+18
DECSENS1 EQU   DECBS04+17
DECSENS0 EQU   DECBS04+16
@NM00054 EQU   DECBS04+12
DECDCBAA EQU   @NM00053+1
DECRSV52 EQU   DECONLTT
DECRSV51 EQU   DECONLTT
DECRSV50 EQU   DECONLTT
DECRSV49 EQU   DECONLTT
DECRSV48 EQU   DECONLTT
DECRSV47 EQU   DECONLTT
DECRCVMS EQU   DECONLTT
DECONLTS EQU   DECONLTT
@NM00052 EQU   DECBS04+6
@NM00051 EQU   @NM00049+1
DECSLNTH EQU   @NM00050
DECSAREA EQU   @NM00050
DECSTRME EQU   @NM00050
DECRSV46 EQU   @NM00050
DECRSV45 EQU   @NM00050
DECRSV44 EQU   @NM00050
DECRSV43 EQU   @NM00050
DECRDAPL EQU   @NM00050
@NM00048 EQU   DECBS04
@NM00047 EQU   @NM00046+1
DECRSV42 EQU   @NM00046
DECADRCH EQU   DECBS03+32
DECRSV41 EQU   DECBS03+28
DECRSV40 EQU   DECBS03+26
DECUCBDX EQU   DECBS03+25
DECRSV39 EQU   DECBS03+24
DECCPOLA EQU   DECCPOL+1
DECNMMSG EQU   DECCPOL
DECRSV38 EQU   DECBS03+16
@NM00045 EQU   DECBS03+12
@NM00044 EQU   DECBS03+8
@NM00043 EQU   DECBS03+6
DECOPCOD EQU   DECBS03+5
DECRSV37 EQU   DECBS03+4
LINEDECB EQU   DECBS03
DECNAA   EQU   DECNA+1
DECRSV36 EQU   DECNA
DECRECPT EQU   DECBS02+24
DECKYADR EQU   DECBS02+20
@NM00042 EQU   DECBS02+16
@NM00041 EQU   DECBS02+12
@NM00040 EQU   DECBS02+8
@NM00039 EQU   DECBS02+6
DECRSV35 EQU   @NM00038
DECWRADD EQU   @NM00038
DECSRKEY EQU   @NM00038
DECOPRD  EQU   @NM00038
DECTYPR  EQU   DECTYPRU
DECTYPU  EQU   DECTYPRU
DECBKLNS EQU   @NM00038
DECKEYS  EQU   @NM00038
DECRELBA EQU   @NM00037
DECRDEX  EQU   @NM00037
DECDYNBF EQU   @NM00037
DECACTAD EQU   @NM00037
DECFDBCK EQU   @NM00037
DECEXSRC EQU   @NM00037
DECOFLOW EQU   @NM00037
DECVERFY EQU   @NM00037
DECRSV34 EQU   @NM00034+3
DECCCKFF EQU   DECCC3
DECCCOPT EQU   DECCC3
DECCCSDK EQU   DECCC3
DECCCWDI EQU   DECCC3
DECCCNBK EQU   DECCC3
DECCCEXS EQU   DECCC3
DECCCWRI EQU   DECCC3
DECRSV33 EQU   DECCC3
DECCCREX EQU   DECCC2
DECCCUER EQU   DECCC2
DECCCEOD EQU   DECCC2
DECCCERR EQU   DECCC2
DECCCINV EQU   DECCC2
DECCCNSP EQU   DECCC2
DECCCRLC EQU   DECCC2
DECCCRNF EQU   DECCC2
@NM00035 EQU   @NM00034
DECEXASR EQU   DECBEXC2
DECRSV32 EQU   DECBEXC2
DECRSV31 EQU   DECBEXC2
DECRSV30 EQU   DECBEXC2
DECRSV29 EQU   DECBEXC2
DECRSV28 EQU   DECBEXC2
DECRSV27 EQU   DECBEXC2
DECRSV26 EQU   DECBTYP2
DECRSV25 EQU   DECBTYP2
DECBWRKN EQU   DECBTYP2
DECBWRK  EQU   DECBTYP2
DECRSV24 EQU   DECBTYP2
DECBRDKU EQU   DECBTYP2
DECRSV23 EQU   DECBTYP2
DECBRDK  EQU   DECBTYP2
DECBLNS  EQU   DECBTYP1
DECRSV22 EQU   DECBTYP1
DECRSV21 EQU   DECBTYP1
DECRSV20 EQU   DECBTYP1
DECRSV19 EQU   DECBTYP1
DECRSV18 EQU   DECBTYP1
DECRSV17 EQU   DECBTYP1
DECBRBA  EQU   DECBRB+1
DECRSV16 EQU   DECBECBF
DECRSV15 EQU   DECBECBF
DECRSV14 EQU   DECBECBF
DECRSV13 EQU   DECBECBF
DECRSV12 EQU   DECBECBF
DECRSV11 EQU   DECBECBF
DECNEXTA EQU   DECNEXT+1
DECRSV10 EQU   DECNEXT
DECIOBPT EQU   DECB+16
DECAREA  EQU   DECB+12
DECDCBAD EQU   DECB+8
DECLNGTH EQU   DECBPTR+2
DECWRSFR EQU   DECTYPE2
DECRSV09 EQU   DECTYPE2
DECWRSZ  EQU   DECTYPE2
DECRSV08 EQU   DECTYPE2
DECWRSD  EQU   DECTYPE2
DECWRSF  EQU   DECTYPE2
DECRDSB  EQU   DECTYPE2
DECRDSF  EQU   DECTYPE2
DECRSV07 EQU   DECTYPE1
DECRSV06 EQU   DECTYPE1
DECRSV05 EQU   DECTYPE1
DECRSV04 EQU   DECTYPE1
DECRSV03 EQU   DECTYPE1
DECRSV02 EQU   DECTYPE1
DECRSV01 EQU   DECTYPE1
DECLNS   EQU   DECTYPE1
DECSDECB EQU   DECB
DEBXSAMB EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBXCDCB EQU   DEBXFLG1
DEBXLNGH EQU   DEBXTN
DEBTBLOF EQU   DEBPREFX+14
DEBAMTYP EQU   DEBPREFX+13
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBESMVR EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00033 EQU   DEBACS08+12
@NM00032 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00031 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00030 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBUCBA  EQU   DEBUCBAD+1
DEBDVMOD EQU   DEBUCBAD
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBDCBB  EQU   DEBDCBAD+1
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBNMEXT EQU   DEBUSRPG
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBDEBB  EQU   DEBDEBAD+1
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
@NM00029 EQU   IDARPLE+17
RPLIICB  EQU   IDARPLE
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00028 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00027 EQU   RPLRBAR+3
@NM00026 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLDACB  EQU   RPLCOMN+24
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
DCBLPDT  EQU   IHADCS55
DCBWKPT6 EQU   IHADCS29+196
DCBWKPT5 EQU   IHADCS29+192
DCBWKPT4 EQU   IHADCS29+188
DCBWKPT3 EQU   IHADCS29+184
DCBWKPT2 EQU   IHADCS29+180
DCBWKPT1 EQU   IHADCS29+176
@NM00025 EQU   IHADCS29+174
DCBRORG1 EQU   IHADCS29+172
DCBLIOV  EQU   IHADCS29+164
DCBNOREC EQU   IHADCS29+162
@NM00024 EQU   IHADCS29+161
DCBLEMI1 EQU   IHADCS29+156
DCBRORG2 EQU   IHADCS29+154
@NM00023 EQU   IHADCS29+153
DCBLECI  EQU   IHADCS29+148
DCBNBOV  EQU   IHADCS29+146
DCBOVDEV EQU   IHADCS29+145
DCBLETI  EQU   IHADCS29+140
DCBLPDA  EQU   IHADCS29+132
DCBFTHI  EQU   IHADCS29+125
DCBNTHI  EQU   IHADCS29+124
DCBFTMI1 EQU   IHADCS29+117
DCBHIIOV EQU   IHADCS29+116
DCBFTCI  EQU   IHADCS29+109
DCBSTLTF EQU   DCBST
DCBSTLBF EQU   DCBST
DCBSTNMC EQU   DCBST
@NM00022 EQU   DCBST
DCBSTNCY EQU   DCBST
DCBSTLOD EQU   DCBST
DCBSTKSQ EQU   DCBST
DCBSTSSM EQU   DCBST
DCBNREC  EQU   IHADCS29+104
DCBRORG3 EQU   IHADCS29+100
DCBNCRHI EQU   IHADCS29+98
DCBTDC   EQU   IHADCS29+96
DCBHIRSH EQU   IHADCS29+95
DCBHIROV EQU   IHADCS29+94
DCBHIRPD EQU   IHADCS29+93
DCBHIRCM EQU   IHADCS29+92
DCBLDT   EQU   IHADCS29+90
DCBHMASK EQU   IHADCS29+89
DCBFIRSH EQU   IHADCS29+86
DCBNLEV  EQU   IHADCS29+85
DCBLEMI3 EQU   IHADCS29+80
DCBFTMI3 EQU   IHADCS29+73
DCBLEMI2 EQU   IHADCS29+68
DCBFTMI2 EQU   IHADCS29+61
DCBHIRTI EQU   IHADCS29+60
DCBFREED EQU   IHADCS29+56
DCBRELEX EQU   IHADCS29+52
DCBPUTX  EQU   IHADCS29+48
DCBRELSE EQU   IHADCS29+44
DCBLWKN  EQU   IHADCS29+40
DCBLRAN  EQU   IHADCS29+36
DCBESETL EQU   IHADCS29+32
@NM00021 EQU   DCBEXCD2
DCBEXRDE EQU   DCBEXLTH
DCBEXOFL EQU   DCBEXCD2
DCBEXCLD EQU   DCBEXCD2
DCBEXDUP EQU   DCBEXCD2
DCBEXSEQ EQU   DCBEXCD2
DCBEXBLU EQU   DCBEXCD1
DCBEXBLI EQU   DCBEXCD1
DCBEXOER EQU   DCBEXCD1
DCBEXIER EQU   DCBEXCD1
DCBEXINV EQU   DCBEXCD1
DCBEXNSP EQU   DCBEXCD1
DCBEXIDA EQU   DCBEXCD1
DCBEXNKY EQU   DCBEXCD1
DCBSETL  EQU   IHADCS29+24
DCBMSHIA EQU   DCBMSHI+1
DCBNCP   EQU   DCBMSHI
DCBSMSW  EQU   IHADCS29+18
DCBSMSI  EQU   IHADCS29+16
DCBMSWA  EQU   IHADCS29+12
DCBBLKSI EQU   IHADCS29+10
DCBCYLOF EQU   IHADCS29+3
DCBNTM   EQU   IHADCS29+2
DCBMACRE EQU   DCBMAC
DCBMACAW EQU   DCBMAC
DCBMACUW EQU   DCBMAC
DCBMACUR EQU   DCBMAC
@NM00020 EQU   DCBMAC
DCBOPTR  EQU   DCBOPTCD
@NM00019 EQU   DCBOPTCD
DCBOPTY  EQU   DCBOPTCD
DCBOPTM  EQU   DCBOPTCD
DCBOPTUF EQU   DCBOPTCD
DCBOPTW  EQU   DCBOPTCD
DCBPUTA  EQU   DCBGETA
@NM00018 EQU   DCBPUT
DCBDEBA  EQU   DCBDEBAD+1
@NM00017 EQU   DCBIFLGS
DCBIFIOE EQU   DCBIFLGS
DCBCH12  EQU   DCBIFPCT
DCBCH9   EQU   DCBIFPCT
DCBIFEC  EQU   DCBIFLGS
DCBMFSTI EQU   DCBMFDMD
DCBMFAWR EQU   DCBMFSTK
DCBMFUIP EQU   DCBMFTMD
DCBMFIDW EQU   DCBMFLCP
DCBMFWRK EQU   DCBMFMVP
DCBMFRDQ EQU   DCBMFWRT
DCBMFGTQ EQU   DCBMFPUT
DCBMFSTL EQU   DCBMACF2
DCBMFCK  EQU   DCBMFDMG
DCBMFRDX EQU   DCBMFCHK
DCBMFDBF EQU   DCBMFSBG
DCBMFRDI EQU   DCBMFLCG
DCBMFRDK EQU   DCBMFMVG
DCBMFWRQ EQU   DCBMFRD
DCBMFPTQ EQU   DCBMFGET
DCBMFECP EQU   DCBMACF1
DCBTIOT  EQU   IHADCS25
DCBMRSTI EQU   DCBMRDMD
DCBMRAWR EQU   DCBMRSTK
DCBMRUIP EQU   DCBMRTMD
DCBMRIDW EQU   DCBMRLCP
DCBMRWRK EQU   DCBMRMVP
DCBMRRDQ EQU   DCBMRWRT
DCBMRGTQ EQU   DCBMRPUT
DCBMRSTL EQU   DCBMACR2
DCBMRCK  EQU   DCBMRDMG
DCBPGFXA EQU   DCBMRRDX
DCBMRDBF EQU   DCBMRSBG
DCBMRRDI EQU   DCBMRLCG
DCBMRRDK EQU   DCBMRMVG
DCBMRWRQ EQU   DCBMRRD
DCBMRPTQ EQU   DCBMRGET
DCBMRECP EQU   DCBMACR1
@NM00016 EQU   DCBIFLG
DCBIBIOE EQU   DCBIFLG
DCBICH12 EQU   DCBIBPCT
DCBICH9  EQU   DCBIBPCT
DCBIBEC  EQU   DCBIFLG
DCBOFIOF EQU   DCBOFLGS
DCBOFUEX EQU   DCBOFLGS
DCBOFTM  EQU   DCBOFLGS
DCBOFPPC EQU   DCBOFLGS
DCBOFOPN EQU   DCBOFLGS
DCBOFEOV EQU   DCBOFLGS
DCBOFLRB EQU   DCBOFLGS
DCBOFIOD EQU   DCBOFLWR
DCBDDNAM EQU   IHADCS24
DCBEXLSA EQU   DCBEXLST+1
DCBRECKL EQU   DCBRECFM
DCBRECCC EQU   DCBRECFM
DCBRECSB EQU   DCBRECFM
DCBRECTO EQU   DCBRECLA
DCBEODA  EQU   DCBEODAD+1
DCBBFA   EQU   DCBBFTEK
DCBH0    EQU   DCBBFTEK
DCBBFTKD EQU   DCBBFTEK
DCBBFTE  EQU   DCBBFT
DCBBFTKR EQU   DCBBFT
DCBBFTS  EQU   DCBBFT
DCBH1    EQU   DCBBFTEK
DCBSVCXA EQU   DCBSVCXL+1
@NM00015 EQU   DCBSVCXL
DCBODEBA EQU   DCBIOBAA
@NM00014 EQU   DCBQSLM
DCBUPDBT EQU   DCBQSLM
DCBUPDCM EQU   DCBQSLM
DCB1DVDS EQU   DCBQSLM
@NM00013 EQU   DCBDSRG2
DCBDSGTR EQU   DCBDSRG2
DCBACBM  EQU   DCBDSRG2
@NM00012 EQU   DCBDSRG2
DCBDSGTQ EQU   DCBDSRG2
DCBDSGTX EQU   DCBDSRG2
DCBDSGGS EQU   DCBDSRG2
DCBDSGU  EQU   DCBDSRG1
DCBDSGPO EQU   DCBDSRG1
@NM00011 EQU   DCBDSRG1
@NM00010 EQU   DCBDSRG1
DCBDSGCX EQU   DCBDSRG1
DCBDSGDA EQU   DCBDSRG1
DCBDSGPS EQU   DCBDSRG1
DCBDSGIS EQU   DCBDSRG1
DCBBUFL  EQU   IHADCS11+8
DCBBUFCA EQU   DCBBUFCB+1
DCBBUFNO EQU   DCBBUFCB
DCBDEVT  EQU   DCBREL
DCBTRBAL EQU   IHADCS01+6
@NM00009 EQU   IHADCS01+5
@NM00008 EQU   IHADCS01+4
DCBDVTBA EQU   DCBDVTBL+1
@NM00007 EQU   DCBDVTBL
DCBKEYCN EQU   IHADCS00+4
DCBRELAD EQU   IHADCS00
@NM00006 EQU   IHADCB
@NM00005 EQU   IIREGSAV+12
IIREGFC  EQU   IIREGSAV+8
IIREGBC  EQU   IIREGSAV+4
@NM00004 EQU   IIREGSAV
IISVCLST EQU   IDAIICB+48
IITBUFL  EQU   IDAIICB+45
IIBUFNO  EQU   IDAIICB+44
IIMSGPTR EQU   IDAIICB+40
IIMSGL   EQU   IDAIICB+37
@NM00003 EQU   IIFLAG3
MBFALN   EQU   IIFLAG3
IIBUFL   EQU   IDAIICB+34
IIKEYSL  EQU   IDAIICB+32
IIRPLL   EQU   IDAIICB+29
MKEYLE   EQU   IIFLAG2
MBUFNO   EQU   IIFLAG2
MBUFL    EQU   IIFLAG2
MRECFM   EQU   IIFLAG2
MOPTCD   EQU   IIFLAG2
MBLKSI   EQU   IIFLAG2
MLRECL   EQU   IIFLAG2
MRKP     EQU   IIFLAG2
IIACBL   EQU   IDAIICB+25
IIQBFRS  EQU   IIFLAG1
@NM00002 EQU   IIFLAG1
IIFTEST  EQU   IIFLAG1
IIDATA   EQU   IIFLAG1
IIFCLOSE EQU   IIFLAG1
IIFACBCL EQU   IIFLAG1
IIFGET   EQU   IIFLAG1
IIFSCAN  EQU   IIFLAG1
IIKEYPT  EQU   IDAIICB+20
IIMAXLRL EQU   IIW1CBF+2
IISAVLRL EQU   IIW1CBF
IIACBPTR EQU   IDAIICB+8
IIDCBPTR EQU   IDAIICB+4
IICBLEN  EQU   IDAIICB+2
@NM00001 EQU   IDAIICB+1
IICBID   EQU   IDAIICB
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00186 EQU   @EL00001
@RF00216 EQU   @RC00213
@RF00320 EQU   @RC00312
@RT00338 EQU   VSAMPUT
@RF00340 EQU   @RC00332
@RF00446 EQU   @EL00001
@ENDDATA EQU   *
         END   IDAIIPM3,(C'PLS2303',0701,77063)
