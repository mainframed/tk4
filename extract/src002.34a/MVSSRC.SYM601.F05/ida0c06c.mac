         TITLE 'IDA0C06C - VS2 VSAM CHECKPOINT, MAIN ROUTINE           *
                        '
IDA0C06C CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA0C06C  78.151'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @03,0                                               0001
@PSTART  LA    @12,4095(,@03)                                      0001
         USING @PSTART,@03                                         0001
         USING @PSTART+4095,@12                                    0001
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
RBPRFXLN EQU 64
RBPRFLNA EQU 32
PRBLEN   EQU 136
SIRBLEN  EQU 200
TIRBLEN  EQU 136
IRBLEN   EQU 128
SVRBLEN  EQU 224
         L     @00,@SIZDATD             LOAD LENGTH OF AUTOMATICS
         GETMAIN RC,LV=(0),SP=0         ISSUE GETMAIN IN SUBPOOL ZERO
         LTR   @15,@15                  TEST RETURN CODE FOR ERROR
         BNZ   GMN00100                 BRANCH IF ERROR ENCOUNTERED
*                                       IF NO ERROR WAS ENCOUNTERED
         LR    @00,@01                  ADDRESS OF GOTTEN AREA IN R0
         LR    @14,@01                  SAVE THE ADDRESS IN REGISTER 14
         L     @01,@SIZDATD             LENGTH OF GOTTEN AREA
         MVCL  @00,@14                  ZERO THE GOTTEN AREA, R15=0
         LR    @15,@14                  ADDRESS OF AREA IN REGISTER 15
         ST    @15,8(,@13)              FORWARD CHAIN THIS SAVE AREA
         L     @01,@SIZDATD             LENGTH OF GOTTEN AREA
         ST    @01,88(,@15)             STORE LENGTH OF AREA
         LR    @14,@03                  LOAD BASE REGISTER OF MODULE
         LA    @01,23                   LOAD NEGATIVE OFFSET BYTE NO.
         SR    @14,@01                  NEGITIVE OFFSET 23 BYTES
         MVC   72(16,@15),0(@14)        GET MODULE NAME AND DATE
         B     GMN00200                 BYPASS SETTING ERROR
GMN00100 SR    @15,@15                  REGISTER 15 = 0 INDICATES ERROR
GMN00200 EQU   *                        R15 CONTAINS ADDRESS OR ZERO
*        REGISTER 15 CONTAINS EITHER THE ADDRESS OF GOTTEN CORE OR
*        ZERO IF THE GETMAIN WAS UNSUCCESSFUL.
*   R11=RETCODE;                    /* SAVE ADDRESS OF MODULE W.A.   */
         LR    R11,RETCODE                                         0237
*   R0=(LENGTH(SP250WA)+SEVEN)&-DWORDLEN;/* LENGTH UNPROTECTED W.A.  */
         LA    R0,152                                              0238
*   IF RETCODE^=ZERO THEN           /* IF MODULE WORK AREA GOTTEN    */
         LTR   RETCODE,RETCODE                                     0239
         BZ    @RF00239                                            0239
*     GEN(GETMAIN RC,LV=(0),SP=250);/* GET CORE FOR UNPROTECTED W.A. */
         GETMAIN RC,LV=(0),SP=250
*   IF RETCODE^=ZERO×R11=ZERO THEN  /* IF NO CORE AVAILABLE          */
@RF00239 SLR   @14,@14                                             0241
         CR    RETCODE,@14                                         0241
         BNE   @RT00241                                            0241
         CR    R11,@14                                             0241
         BNE   @RF00241                                            0241
@RT00241 DS    0H                                                  0242
*     DO;                                                          0242
*       SAREG(1)->CKMSGCD1=ZERO;    /* INIT TO INDICATE ERROR MSG  0243
*                                      IHJ000I TO BE ISSUED  @ZA14803*/
         L     @14,SAREG(,R13)                                     0243
         MVI   CKMSGCD1(@14),X'00'                                 0243
*       SAREG(1)->CKMSGCD2=CKMSG003;/* SET CHECKPOINT MESSAGE CODE   */
         MVI   CKMSGCD2(@14),X'03'                                 0244
*       SAREG(1)->CKRETCD2=CHKERR08;/* SET CHECKPOINT RETURN CODE    */
         MVI   CKRETCD2(@14),X'08'                                 0245
*       RCORE=ZERO;                 /* IND THE WORKARES NOT OBTAINED */
         SLR   RCORE,RCORE                                         0246
*     END;                                                         0247
*   ELSE                            /* NO ERROR                      */
*     DO;                           /* MAINLINE                      */
         B     @RC00241                                            0248
@RF00241 DS    0H                                                  0249
*       R11->SABWRD=R13;            /* CHAIN THE SAVE AREA           */
         ST    R13,SABWRD(,R11)                                    0249
*       R13=R11;                    /* LOAD PTR TO AUTOMATICS        */
         LR    R13,R11                                             0250
*       GEN(USING @DATD,R13);       /* GET BASE FOR AUTOMATICS       */
         USING @DATD,R13
*       MWASP250=R1;                /* SAVE THE POINTER TO THE UWA   */
         ST    R1,MWASP250                                         0252
*       RETCONT=ZERO;               /* INIT ARRAY CONTROL            */
         SLR   @14,@14                                             0253
         ST    @14,RETCONT                                         0253
*       CHKWAPTR=SABWRD->SAREG(1);  /* PTR TO CHECKPOINT WORK AREA   */
         L     @14,SABWRD(,R13)                                    0254
         L     @14,SAREG(,@14)                                     0254
         ST    @14,CHKWAPTR                                        0254
*       SAVBASEB=RBASEB;            /* SAVE SECOND BASE REGISTER     */
         ST    RBASEB,SAVBASEB                                     0255
*       CKMSGCD1=ZERO;              /* INIT TO INDICATE ERROR MSG  0256
*                                      IHJ000I TO BE ISSUED  @ZA14803*/
         MVI   CKMSGCD1(@14),X'00'                                 0256
*       CALL RECOVERY;              /* EST. RECOVERY ENVIRONMENT     */
         BAL   @14,RECOVERY                                        0257
*       ADDR(SP250SA)->SABWRD=ADDR(SAVAREA);/* PT UWA SA TO SAVEAREA */
         L     @14,MWASP250                                        0258
         ST    R13,SABWRD(,@14)                                    0258
*       CKMSGCD2=ZERO;              /* INIT MSG ERROR CODE TO ZERO   */
         L     @14,CHKWAPTR                                        0259
         MVI   CKMSGCD2(@14),X'00'                                 0259
*       RESPECIFY                   /* FREE REGS FOR COMPILER OPT    */
*        (RETCODE,                                                 0260
*         R11,                                                     0260
*         RCORE,                                                   0260
*         R1,                                                      0260
*         R0) UNRESTRICTED;                                        0260
*                                                                  0260
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE MASK FOR SAVING THE HEADER ELEMENTS            */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0261
*       RESPECIFY                                                  0261
*         IDACMB BASED(ADDR(ABSLOC));/* TEMP RESET LOCATION OF CMB   */
*       BLDMASK(1)=ONE;             /* SET FIRST BYTE OF MASK TO ONE */
         MVI   BLDMASK,X'01'                                       0262
*       MVC(BLDMASK(2:16),BLDMASK(1:15));/* PROPAGATE, THEN ZERO THE */
         MVC   BLDMASK+1(15),BLDMASK                               0263
*       BLDMASK((ADDR(CMBFSTPT)-ADDR(CMBPTRS))/4+ONE)=ZERO;/* FX STR */
         SLR   @02,@02                                             0264
         STC   @02,BLDMASK+4                                       0264
*       BLDMASK((ADDR(CMBUFSPT)-ADDR(CMBPTRS))/4+ONE)=ZERO;/* UPG FS */
         STC   @02,BLDMASK+5                                       0265
*       BLDMASK((ADDR(CMBDEBPT)-ADDR(CMBPTRS))/4+ONE)=ZERO;/* DEB BL */
         STC   @02,BLDMASK+8                                       0266
*       BLDMASK((ADDR(CMBFXDPT)-ADDR(CMBPTRS))/4+ONE)=ZERO;/* FIXED
*                                      BLOCK POINTER         @ZA04718*/
*                                                                  0267
         STC   @02,BLDMASK+12                                      0267
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE MASK FOR SETTING THE VCRHFREL FLAG IN VCRHEBSA */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0268
*       BLDMASK((ADDR(CMBEDBPT)-ADDR(CMBPTRS))/4+ONE)=TWO;/* EDB BLK */
         MVI   BLDMASK+9,X'02'                                     0268
*       RESPECIFY                                                  0269
*         IDACMB BASED(AMBLCMB);    /* BASE CMB ON POINTER IN AMBL   */
*                                                                  0270
*       /*************************************************************/
*       /*                                                           */
*       /* BUILD THE CHECKPOINT CONTROL BLOCKS FOR ALL OPEN CLUSTERS */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0270
*       IF JSCBSHR^=ZERO&VATPAMBL^=ZERO THEN/* VSAM DATA SETS OPEN   */
         L     @01,PSATOLD                                         0270
         L     @01,TCBJSCB(,@01)                                   0270
         L     @15,JSCBSHR(,@01)                                   0270
         CR    @15,@02                                             0270
         BE    @RF00270                                            0270
         L     @15,VATPAMBL(,@15)                                  0270
         CR    @15,@02                                             0270
         BE    @RF00270                                            0270
*         DO;                                                      0271
*           PAMBLPTR=VATPAMBL;      /* GET PTR TO FIRST P-AMBL       */
         ST    @15,PAMBLPTR                                        0272
*           CALL SAVEBUF;           /* GET A SAVE AREA FOR BUFFERS   */
         BAL   @14,SAVEBUF                                         0273
*           DO UNTIL PAMBLPTR=0;    /* PROCESS ALL PRIMARY AMBLS     */
@DL00274 DS    0H                                                  0275
*             AMBLPTR=PAMBLPTR;     /* ADDRESSIBILITY FOR AMBL       */
         L     @02,PAMBLPTR                                        0275
         ST    @02,AMBLPTR                                         0275
*             BIBCKPT=ON;           /* CHECKPOINT PROCESSING SPHERE  */
         L     @02,AMBLBIB(,@02)                                   0276
         OI    BIBCKPT(@02),B'00100000'                            0276
*             CALL BLDVCRT;         /* BUILD THE VCRT                */
         BAL   @14,BLDVCRT                                         0277
*             CALL HEBSAVE;         /* SAVE HEBS FOR LOCAL STORAGE   */
         BAL   @14,HEBSAVE                                         0278
*             BIBCKPT=OFF;          /* CHECKPOINT OF SPHERE COMPLETE */
         L     @02,AMBLPTR                                         0279
         L     @02,AMBLBIB(,@02)                                   0279
         NI    BIBCKPT(@02),B'11011111'                            0279
*             PAMBLPTR=PAMBLPTR->AMBLPCHN;/* POINT TO NEXT P-AMBL    */
         L     @02,PAMBLPTR                                        0280
         L     @02,AMBLPCHN(,@02)                                  0280
         ST    @02,PAMBLPTR                                        0280
*           END;                                                   0281
@DE00274 L     @02,PAMBLPTR                                        0281
         LTR   @02,@02                                             0281
         BNZ   @DL00274                                            0281
*         END;                                                     0282
*ERREXIT:                                                          0283
*                                                                  0283
*       /*************************************************************/
*       /*                                                           */
*       /* CLEANUP PROCESSING FOR IDA0C06C                           */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0283
*       RESPECIFY                                                  0283
*         RCORE RESTRICTED;                                        0283
@RF00270 DS    0H                                                  0283
ERREXIT  DS    0H                                                  0284
*       RBASEB=SAVBASEB;            /* MAKE SURE BASE REG 12 IS OK   */
         L     RBASEB,SAVBASEB                                     0284
*       IF PFSAVEIO=ON THEN                                        0285
         TM    PFSAVEIO,B'10000000'                                0285
         BNO   @RF00285                                            0285
*         CALL IORESTOR;                                           0286
         BAL   @14,IORESTOR                                        0286
*       RCORE=ADDR(FORCORE);        /* FORCORE POINTER FOR CLEANUP   */
@RF00285 LA    RCORE,MWAFCORE                                      0287
*       IF CKMSGCD2^=ZERO THEN      /* CHECK FOR ANY ERROR CONDITION */
         L     @05,CHKWAPTR                                        0288
         CLI   CKMSGCD2(@05),0                                     0288
         BE    @RF00288                                            0288
*         CALL IDACI96C;            /* YES, REMOVE VSAM CHECKPT CORE */
         L     @15,@CV04136                                        0289
         BALR  @14,@15                                             0289
*       ELSE                        /* NO ERRORS                     */
*         CKRETCD2=ZERO;            /* SET THE RETURN CODE TO ZERO   */
         B     @RC00288                                            0290
@RF00288 L     @05,CHKWAPTR                                        0290
         MVI   CKRETCD2(@05),X'00'                                 0290
*       IF CKMSGCD2^=CKMSG240 THEN  /* IF ESTAE WAS ESTABLISHED      */
@RC00288 L     @05,CHKWAPTR                                        0291
         CLI   CKMSGCD2(@05),240                                   0291
         BE    @RF00291                                            0291
*         GEN(ESTAE 0);             /* RELEASE RECOVERY ENVIRONMENT  */
         ESTAE 0
*     END;                                                         0293
@RF00291 DS    0H                                                  0294
*   RESPECIFY                                                      0294
*    (R0,                                                          0294
*     R1,                                                          0294
*     R11) RESTRICTED;                                             0294
@RC00241 DS    0H                                                  0295
*   IF RCORE^=ZERO THEN             /* WERE ALL WORK AREAS OBTAINED  */
         LTR   RCORE,RCORE                                         0295
         BZ    @RF00295                                            0295
*     DO;                           /* YES, FREE THE UNPROTECTED WA  */
*       MWASP=USERPOOL;             /* SET USER SUBPOOL              */
         MVI   MWASP,X'FA'                                         0297
*       MWALEN=(LENGTH(SP250WA)+SEVEN)&-DWORDLEN;/* LENGTH OF UWA    */
         MVC   MWALEN(3),@CF01679+1                                0298
*       MWAPTR=ADDR(SP250WA);       /* GET ADDRESS UNPROTECTED W.A.  */
         L     @10,MWASP250                                        0299
         ST    @10,MWAPTR                                          0299
*       LM(R0,R1,MWAFREMN);         /* LOAD THE FREEMAIN REGISTERS   */
         LM    R0,R1,MWAFREMN                                      0300
*       GEN(FREEMAIN R,LV=(0),A=(1));/* FREE UNPROTECTED WORK AREA   */
         FREEMAIN R,LV=(0),A=(1)
*     END;                                                         0302
*   GEN(L R0,@SIZDATD);             /* LOAD R0 WITH SP & SIZE OF MWA */
@RF00295 DS    0H                                                  0303
         L R0,@SIZDATD
*   IF RCORE=ZERO THEN              /* WERE ALL WORK AREAS OBTAINED? */
         LTR   RCORE,RCORE                                         0304
         BNZ   @RF00304                                            0304
*     R1=R11;                       /* NO, FREE MWA IF OBTAINED      */
         LR    R1,R11                                              0305
*   ELSE                            /* WORK AREAS GOTTEN SO          */
*     DO;                           /* PREPARE TO RETURN             */
         B     @RC00304                                            0306
@RF00304 DS    0H                                                  0307
*       R1=R13;                     /* LOAD REG 1 WITH ADDRESS OF MWA*/
         LR    R1,R13                                              0307
*       R13=SABWRD;                 /* POINT R13 AT PREVIOUS SAVE    */
         L     R13,SABWRD(,R13)                                    0308
*     END;                                                         0309
*   IF R1^=ZERO THEN                /* IF THERE IS A MWA TO FREE     */
@RC00304 LTR   R1,R1                                               0310
         BZ    @RF00310                                            0310
*     GEN(FREEMAIN R,LV=(0),A=(1)); /* FREE MODULE WORK AREA         */
         FREEMAIN R,LV=(0),A=(1)
*   LM(RET,R12,SAREGS);             /* RESTORE CALLERS REGS          */
@RF00310 LM    RET,R12,SAREGS(R13)                                 0312
*   GEN(BR RET);                    /* RETURN TO CALLER              */
         BR RET
*   RESPECIFY                                                      0314
*    (R0,                                                          0314
*     R1,                                                          0314
*     RCORE,                                                       0314
*     R11) UNRESTRICTED;                                           0314
*RECOVERY:                                                         0315
*                                                                  0315
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - ESTABLISH THE RECOVERY ENVIRONMENT FOR IDA0C06C.    */
*/*   INPUT    - THE MODULE WORKAREA WITH MWAFCORE DEFINED           */
*/*   OUTPUT   - THE ESTAE IS ISSUE WITH MWAFCORE AS THE PARAMETER   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0315
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0315
RECOVERY DS    0H                                                  0316
*   RESPECIFY                                                      0316
*    (R0,                                                          0316
*     R1,                                                          0316
*     RET,                                                         0316
*     RETCODE) RESTRICTED;                                         0316
*   IDAESPL=ESTAEPRM;               /* COPY SKELETON INTO WORK AREA  */
         LA    @02,MWAFCORE                                        0317
         MVC   IDAESPL(16,@02),ESTAEPRM                            0317
*   R1=ADDR(IDAESPL);               /* PUT PTR TO PARM LIST IN REG 1 */
         LA    R1,IDAESPL(,@02)                                    0318
*   GEN(ESTAE PARAM=MWAFCORE,MF=(E,(1)));/* ISSUE ESTAE MACRO        */
         ESTAE PARAM=MWAFCORE,MF=(E,(1))
*   IF RETCODE^=ZERO THEN           /* CHECK THE RETURN CODE         */
         LTR   RETCODE,RETCODE                                     0320
         BZ    @RF00320                                            0320
*     DO;                           /* IF NOT ZERO                   */
*       CKMSGCD2=CKMSG240;          /* SET THE CHECKPOINT MSG CODE   */
         L     @02,CHKWAPTR                                        0322
         MVI   CKMSGCD2(@02),X'F0'                                 0322
*       CKRETCD2=CHKERR0C;          /* SET CHECKPOINT RETURN CODE    */
         MVI   CKRETCD2(@02),X'0C'                                 0323
*       RETURN TO ERREXIT;          /* AND EXIT THE MODULE           */
         LA    @14,ERREXIT                                         0324
@EL00002 DS    0H                                                  0324
@EF00002 DS    0H                                                  0324
@ER00002 BR    @14                                                 0324
*     END;                                                         0325
*   IDABASER=RBASEA;                /* SAVE BASE REG FOR RECOVERY    */
@RF00320 LA    @02,MWAFCORE                                        0326
         ST    RBASEA,IDABASER(,@02)                               0326
*   IDADATAR=R13;                   /* SAVE DATA REG FOR RECOVERY    */
         ST    R13,IDADATAR(,@02)                                  0327
*   IDARETRY=ADDR(ERREXIT);         /* RETRY ROUTINE IS ERREXIT      */
         LA    @11,ERREXIT                                         0328
         ST    @11,IDARETRY(,@02)                                  0328
*   IDACRWAP=ADDR(CHKWA);           /* SAVE ADDR OF CHKPT WORK AREA  */
         L     @11,CHKWAPTR                                        0329
         ST    @11,IDACRWAP(,@02)                                  0329
*   IDARCKPT=ON;                    /* INDICATE CHECKPOINT           */
         OI    IDARCKPT(@02),B'10000000'                           0330
*   RSTATRTN=IDARC06C;              /* NOTE IDA0C06C IN CONTROL      */
         MVC   RSTATRTN(4,@02),@CC03962                            0331
*   RESPECIFY                                                      0332
*    (R0,                                                          0332
*     R1,                                                          0332
*     RET,                                                         0332
*     RETCODE) UNRESTRICTED;                                       0332
*   END RECOVERY;                                                  0333
         B     @EL00002                                            0333
*BLDVCRT:                                                          0334
*                                                                  0334
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - BUILDS THE VCRT FOR A SPHERE AND CALLS THE          */
*/*              APPROPRIATE ROUTINES TO OBTAIN REPOSITIONING        */
*/*              INFORMATION WHEN REQUESTED.                         */
*/*   INPUT    - POINTER TO THE PRIMARY AMBL IN AMBLPTR              */
*/*   OUTPUT   - VCRT IS BUILT                                       */
*/*              REPOSITIONING INFORMATION IS SAVED                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0334
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0334
BLDVCRT  DS    0H                                                  0335
*   RESPECIFY                                                      0335
*     RET RESTRICTED;                                              0335
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0336
         AL    @15,RETCONT                                         0336
         ST    @15,RETCONT                                         0336
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               0337
         ST    RET,RETSAVE-4(@15)                                  0337
*   RESPECIFY                                                      0338
*     RET UNRESTRICTED;                                            0338
*   VCRCPFLP=ON;                    /* REQUEST FOR CORE PLUS EXCESS  */
         OI    VCRCPFLP,B'10000000'                                0339
*   VCRCLENG=LENGTH(IDAVCRT);       /* SPECIFY MINIMUM LENGTH        */
         MVC   VCRCLENG(4),@CF02254                                0340
*   VCRCPOOL=WKPOOL;                /* SPECIFY SUBPOOL               */
         MVI   VCRCPOOL,X'FC'                                      0341
*   CALL GETCORE;                   /* GET CORE FOR THE VCRT         */
         BAL   @14,GETCORE                                         0342
*   BIBVCRT=VCRCADDR;               /* CONNECT THE VCRT TO THE BIB   */
         L     @02,VCRCADDR                                        0343
         L     @15,AMBLPTR                                         0343
         L     @01,AMBLBIB(,@15)                                   0343
         ST    @02,BIBVCRT(,@01)                                   0343
*   VCRTPTR=VCRCADDR;               /* VCRT ADDRESSIBILITY           */
         ST    @02,VCRTPTR                                         0344
*   VCRCOREH=VCRCHEAD;              /* POINT TO HEAD CORE BLOCK      */
         L     @14,VCRCHEAD                                        0345
         ST    @14,VCRCOREH(,@02)                                  0345
*   VCRID=IDXVCRT;                  /* SET VCRT ID BYTE              */
         MVI   VCRID(@02),B'10000000'                              0346
*   VCRIDNM=VCRNAME;                /* SET VCRT ID NAME              */
         MVC   VCRIDNM(8,@02),@CC03176                             0347
*   VCRCLENG=VCRCLENG-LENGTH(IDAVCRT);/* UPDATE AVAILABLE LENGTH     */
         LA    @14,48                                              0348
         L     @11,VCRCLENG                                        0348
         SLR   @11,@14                                             0348
         ST    @11,VCRCLENG                                        0348
*   VCRCADDR=VCRCADDR+LENGTH(IDAVCRT);/* ADDRESS OF AVAILABLE CORE   */
         ALR   @02,@14                                             0349
         ST    @02,VCRCADDR                                        0349
*   CKRETCD2=CHKERR08;              /* PREPARE FOR ENVIRONMENTAL ERR */
         L     @02,CHKWAPTR                                        0350
         MVI   CKRETCD2(@02),X'08'                                 0350
*   IF AMBLGSR=ON THEN              /* WAS THE GSR OPTION SPECIFIED  */
         TM    AMBLGSR(@15),B'01000000'                            0351
         BNO   @RF00351                                            0351
*     DO;                           /* IF YES                        */
*       CKMSGCD2=CKMSG045;          /* SET THE MESSAGE CODE AND      */
         MVI   CKMSGCD2(@02),X'2D'                                 0353
*       RETURN TO ERREXIT;          /* EXIT THE MODULE               */
         LA    @14,ERREXIT                                         0354
@EL00003 DS    0H                                                  0354
@EF00003 DS    0H                                                  0354
@ER00003 BR    @14                                                 0354
*     END;                                                         0355
*   IF AMBLCBIC=ON THEN             /* CBIC OPTION SPECIFIED @ZA16012*/
@RF00351 L     @02,AMBLPTR                                         0356
         TM    AMBLCBIC(@02),B'10000000'                           0356
         BNO   @RF00356                                            0356
*     DO;                           /* YES                   @ZA16012*/
*       CKMSGCD2=CKMSG047;          /* SET THE MESSAGE CODE  @ZA16012*/
         L     @02,CHKWAPTR                                        0358
         MVI   CKMSGCD2(@02),X'2F'                                 0358
*       RETURN TO ERREXIT;          /* AND EXIT THE MODULE   @ZA16012*/
         LA    @14,ERREXIT                                         0359
         BR    @14                                                 0359
*     END;                          /*                       @ZA16012*/
*   IF AMBLLSR=ON THEN              /* IF AN LSR OPEN        @ZA04230*/
@RF00356 L     @02,AMBLPTR                                         0361
         TM    AMBLLSR(@02),B'00100000'                            0361
         BNO   @RF00361                                            0361
*     VCRLSR=ON;                    /* INDICATE LSR IN VCRT  @ZA04230*/
         L     @02,VCRTPTR                                         0362
         OI    VCRLSR(@02),B'01000000'                             0362
*   CALL BLDOPEN;                   /* BUILD THE OPEN VCRT ENTRIES   */
@RF00361 BAL   @14,BLDOPEN                                         0363
*   AMBLPTR=PAMBLPTR->AMBLACB->ACBAMBL;/* REESTABLISH AMBL POINTER   */
         L     @02,PAMBLPTR                                        0364
         L     @02,AMBLACB(,@02)                                   0364
         L     @02,ACBAMBL(,@02)                                   0364
         ST    @02,AMBLPTR                                         0364
*   AMBPTR=AMBLDTA;                 /* POINT TO CURRENT DATA AMB     */
*                                                                  0365
         L     @15,AMBLDTA(,@02)                                   0365
         ST    @15,AMBPTR                                          0365
*   /*****************************************************************/
*   /*                                                               */
*   /* IF CREATE MODE PROCESSING, CHECK FOR ERRORS AND BUILD VCRT    */
*   /* INDEX ENTRIES FOR KSDS CREATE MODE PROCESSING.                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0366
*   IF AMBCREAT=ON THEN                                            0366
         TM    AMBCREAT(@15),B'10000000'                           0366
         BNO   @RF00366                                            0366
*     IF ACBCRNRE=ON THEN           /* NO REPOSITIONING SPECIFIED    */
         L     @02,AMBLACB(,@02)                                   0367
         TM    ACBCRNRE(@02),B'01000000'                           0367
         BNO   @RF00367                                            0367
*       CKMSGCD2=CKMSG041;          /* YES, SET MESSAGE CODE         */
         L     @02,CHKWAPTR                                        0368
         MVI   CKMSGCD2(@02),X'29'                                 0368
*     ELSE                          /* REPOSITIONING SPECIFIED       */
*       IF AMDRRDS=ON&PLHDRLM=ON THEN/* DIRECT PROCESSING ON AN RRDS */
         B     @RC00367                                            0369
@RF00367 L     @02,AMBPTR                                          0369
         L     @01,AMBDSB(,@02)                                    0369
         TM    AMDRRDS(@01),B'00000010'                            0369
         BNO   @RF00369                                            0369
         L     @02,AMBPH(,@02)                                     0369
         TM    PLHDRLM+16(@02),B'10000000'                         0369
         BNO   @RF00369                                            0369
*         CKMSGCD2=CKMSG044;        /* YES, SET MESSAGE CODE         */
         L     @02,CHKWAPTR                                        0370
         MVI   CKMSGCD2(@02),X'2C'                                 0370
*       ELSE                        /* CONTINUE CHECKING             */
*         IF AMDDST=ON THEN         /* IS THIS A KSDS                */
         B     @RC00369                                            0371
@RF00369 L     @02,AMBPTR                                          0371
         L     @02,AMBDSB(,@02)                                    0371
         TM    AMDDST(@02),B'10000000'                             0371
         BNO   @RF00371                                            0371
*           CALL BLDINDEX;          /* YES, GO BUILD INDEX ENTRIES   */
         BAL   @14,BLDINDEX                                        0372
*         ELSE                                                     0373
*           ;                       /* NOT A CREATE MODE KSDS        */
*                                                                  0373
@RF00371 DS    0H                                                  0374
*   /*****************************************************************/
*   /*                                                               */
*   /* IF NOT CREATE MODE, CHECK FOR A UPT AND BUILD UPGRADE ENTRIES */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0374
*   ELSE                                                           0374
*     IF BIBUPT^=ZERO THEN          /* IF AN UPGRADE TABLE EXISTS    */
         B     @RC00366                                            0374
@RF00366 L     @02,AMBLPTR                                         0374
         L     @01,AMBLBIB(,@02)                                   0374
         L     @15,BIBUPT(,@01)                                    0374
         LTR   @15,@15                                             0374
         BZ    @RF00374                                            0374
*       IF AMDDST=OFF&AMDRRDS=OFF&  /* IF THIS IS AN ESDS AND        */
*           ACBCRNRE=OFF&           /* REPOSITIONING WAS REQUESTED   */
*           VCROUT=ON THEN          /* FOR AN OUTPUT DATA SET THEN   */
         L     @01,AMBPTR                                          0375
         L     @01,AMBDSB(,@01)                                    0375
         TM    AMDDST(@01),B'10000010'                             0375
         BNZ   @RF00375                                            0375
         L     @02,AMBLACB(,@02)                                   0375
         TM    ACBCRNRE(@02),B'01000000'                           0375
         BNZ   @RF00375                                            0375
         L     @02,VCRTPTR                                         0375
         TM    VCROUT(@02),B'00100000'                             0375
         BNO   @RF00375                                            0375
*         CKMSGCD2=CKMSG043;        /* SET THE MESSAGE CODE          */
         L     @02,CHKWAPTR                                        0376
         MVI   CKMSGCD2(@02),X'2B'                                 0376
*       ELSE                        /* IF NOT AN ESDS TO REPOSITION  */
*         CALL BLDUPGRD;            /* BUILD THE UPGRADE ENTRIES     */
*                                                                  0377
         B     @RC00375                                            0377
@RF00375 BAL   @14,BLDUPGRD                                        0377
*   /*****************************************************************/
*   /*                                                               */
*   /* IF NO UPGRADE TABLE THEN CHECK FOR REPOSITIONING FOR AN ESDS  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0378
*     ELSE                                                         0378
*       IF AMDDST=OFF&AMDRRDS=OFF&  /* IF THIS IS AN ESDS AND        */
*           ACBCRNRE=OFF&           /* REPOSITIONING WAS REQUESTED   */
*           VCROUT=ON&              /* FOR AN OUTPUT DATA SET        */
*           AMBLLSR=OFF THEN        /* WITHOUT THE LSR OPTION        */
         B     @RC00374                                            0378
@RF00374 L     @02,AMBPTR                                          0378
         L     @02,AMBDSB(,@02)                                    0378
         TM    AMDDST(@02),B'10000010'                             0378
         BNZ   @RF00378                                            0378
         L     @02,AMBLPTR                                         0378
         L     @01,AMBLACB(,@02)                                   0378
         TM    ACBCRNRE(@01),B'01000000'                           0378
         BNZ   @RF00378                                            0378
         L     @01,VCRTPTR                                         0378
         TM    VCROUT(@01),B'00100000'                             0378
         BNO   @RF00378                                            0378
         TM    AMBLLSR(@02),B'00100000'                            0378
         BNZ   @RF00378                                            0378
*         CALL GETRTN;              /* SAVE THE CI IN RESTART BUFFER */
*                                                                  0379
         BAL   @14,GETRTN                                          0379
*   /*****************************************************************/
*   /*                                                               */
*   /* CHECK TO SEE IF ANY ERRORS WERE ENCOUNTERED AND EXIT          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0380
*   IF CKMSGCD2^=ZERO THEN                                         0380
@RF00378 DS    0H                                                  0380
@RC00374 DS    0H                                                  0380
@RC00366 L     @02,CHKWAPTR                                        0380
         CLI   CKMSGCD2(@02),0                                     0380
         BE    @RF00380                                            0380
*     RETURN TO ERREXIT;            /* GO BACK TO ERREXIT IF ERRORS  */
         LA    @14,ERREXIT                                         0381
         BR    @14                                                 0381
*   RESPECIFY                                                      0382
*     RET RESTRICTED;                                              0382
@RF00380 DS    0H                                                  0383
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @02,RETCONT                                         0383
         LR    @15,@02                                             0383
         SLA   @15,2                                               0383
         L     RET,RETSAVE-4(@15)                                  0383
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @02,0                                               0384
         ST    @02,RETCONT                                         0384
*   RESPECIFY                                                      0385
*     RET UNRESTRICTED;                                            0385
*   END BLDVCRT;                                                   0386
         B     @EL00003                                            0386
*BLDOPEN:                                                          0387
*                                                                  0387
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - BUILDS AN OPEN ENTRY FOR EVERY PRIMARY AMBL IN THE  */
*/*              SPHERE.                                             */
*/*   INPUT    - A POINTER TO THE CURRENT VCRT IN VCRTPTR            */
*/*              A POINTER TO THE PRIMARY AMBL IN AMBLPTR            */
*/*   OUTPUT   - THE VCRT OPEN ENTRIES ARE BUILT                     */
*/*              THE VCROUT BIT IS SET IF ANY AMBL IS OPEN FOR WRITE */
*/*                                                                  */
*/********************************************************************/
*                                                                  0387
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0387
BLDOPEN  DS    0H                                                  0388
*   RESPECIFY                                                      0388
*     RET RESTRICTED;                                              0388
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0389
         L     @07,RETCONT                                         0389
         ALR   @07,@15                                             0389
         ST    @07,RETCONT                                         0389
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @07,2                                               0390
         ST    RET,RETSAVE-4(@07)                                  0390
*   RESPECIFY                                                      0391
*     RET UNRESTRICTED;                                            0391
*   ENTRYCNT=ONE;                   /* INITIALIZE THE ENTRY COUNT    */
         LR    ENTRYCNT,@15                                        0392
*   VCROPN=VCRCADDR;                /* POINT TO THE FIRST OPEN ENTRY */
         L     @07,VCRCADDR                                        0393
         L     @02,VCRTPTR                                         0393
         ST    @07,VCROPN(,@02)                                    0393
*   DO UNTIL AMBLPTR=ZERO;          /* PROCESS ALL AMBLS FOR BASE    */
*                                                                  0394
@DL00394 DS    0H                                                  0395
*     /***************************************************************/
*     /*                                                             */
*     /* IF INSUFFICIENT VCRT OPEN ENTRIES IN THE CURRENT STORAGE    */
*     /* BLOCK, GET AND INITIALIZE A NEW BLOCK WITH THE ENTRIES      */
*     /* ALREADY BUILT.                                              */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0395
*     IF VCRCLENG<TWO*LENGTH(VCRENTRY) THEN/* ROOM FOR TWO ENTRIES?  */
         LA    @07,16                                              0395
         C     @07,VCRCLENG                                        0395
         BNH   @RF00395                                            0395
*       DO;                         /* IF NOT, GET MORE CORE         */
*         VCRCPFLP=ON;              /* GET EVERYTHING IN THE BLOCK   */
         OI    VCRCPFLP,B'10000000'                                0397
*         VCRCLENG=(VCRCADDR-VCROPN)+TWO*LENGTH(VCRENTRY);/* MIN LEN */
         L     @02,VCRCADDR                                        0398
         L     @01,VCRTPTR                                         0398
         SL    @02,VCROPN(,@01)                                    0398
         ALR   @02,@07                                             0398
         ST    @02,VCRCLENG                                        0398
*         VCRCPOOL=WKPOOL;          /* PROTECTED SUBPOOL             */
         MVI   VCRCPOOL,X'FC'                                      0399
*         CALL GETCORE;             /* GO GET THE CORE               */
         BAL   @14,GETCORE                                         0400
*         RESPECIFY                                                0401
*          (R0,                                                    0401
*           R1,                                                    0401
*           RET,                                                   0401
*           R15) RESTRICTED;                                       0401
*         R0=VCRCADDR;              /* GET ADDRESS OF NEW CORE       */
         L     @07,VCRCADDR                                        0402
         LR    R0,@07                                              0402
*         RET=VCROPN;               /* GET PTR TO OPEN ENTRIES       */
         L     @02,VCRTPTR                                         0403
         L     RET,VCROPN(,@02)                                    0403
*         R1=VCROPNCT*LENGTH(VCRENTRY);/* TOTAL LENGTH OF ENTRIES    */
         LH    R1,VCROPNCT(,@02)                                   0404
         SLA   R1,3                                                0404
*         R15=R1;                   /* ALSO IN REGISTER 15 FOR MVCL  */
         LR    R15,R1                                              0405
*         VCRCLENG=VCRCLENG-R1;     /* UPDATE LENGTH OF AVAIL CORE   */
         L     @11,VCRCLENG                                        0406
         SLR   @11,R1                                              0406
         ST    @11,VCRCLENG                                        0406
*         VCROPN=VCRCADDR;          /* POINT TO COPIED OPEN ENTRIES  */
         ST    @07,VCROPN(,@02)                                    0407
*         VCRCADDR=VCRCADDR+R1;     /* UPDATE ADDRESS OF AVAIL CORE  */
         ALR   @07,R1                                              0408
         ST    @07,VCRCADDR                                        0408
*         MVCL(R0,RET);             /* MOVE ENTRIES INTO NEW CORE    */
         MVCL  R0,RET                                              0409
*         RESPECIFY                                                0410
*          (R0,                                                    0410
*           R1,                                                    0410
*           RET,                                                   0410
*           R15) UNRESTRICTED;                                     0410
*       END;                                                       0411
*                                                                  0411
*     /***************************************************************/
*     /*                                                             */
*     /* BUILD ALL VCRT OPEN ENTRIES                                 */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0412
*     IF AMBLPRIM=ON THEN           /* CHECK FOR THE PRIMARY AMBL    */
@RF00395 L     @07,AMBLPTR                                         0412
         TM    AMBLPRIM(@07),B'10000000'                           0412
         BNO   @RF00412                                            0412
*       DO;                         /* IF IT IS, BUILD AN OPEN ENTRY */
*         VCRAMBL(ENTRYCNT)=ADDR(IDAAMBL);/* SAVE ADDRESS OF AMBL    */
         LR    @02,ENTRYCNT                                        0414
         SLA   @02,3                                               0414
         L     @15,VCRTPTR                                         0414
         L     @01,VCROPN(,@15)                                    0414
         AL    @01,@CF04237                                        0414
         ST    @07,VCRAMBL-4(@02,@01)                              0414
*         VCROPNCT=ENTRYCNT;        /* SET THE OPEN ENTRY COUNT      */
         STH   ENTRYCNT,VCROPNCT(,@15)                             0415
*         ENTRYCNT=ENTRYCNT+ONE;    /* INCREMENT THE CURRENT COUNT   */
         AL    ENTRYCNT,@CF00053                                   0416
*         VCRCADDR=VCRCADDR+LENGTH(VCRENTRY);/* NEXT AVAILABLE BYTE  */
         LA    @07,8                                               0417
         L     @02,VCRCADDR                                        0417
         ALR   @02,@07                                             0417
         ST    @02,VCRCADDR                                        0417
*         VCRCLENG=VCRCLENG-LENGTH(VCRENTRY);/* LENGTH OF AVAIL CORE */
         LCR   @07,@07                                             0418
         AL    @07,VCRCLENG                                        0418
         ST    @07,VCRCLENG                                        0418
*       END;                                                       0419
*     IF AMBLXPT^=ZERO&             /* IF THERE IS A PATH AMBL AND   */
*         AMBLXPT->AMBLPRIM=ON THEN /* THE PATH AMBL IS A PRIMARY    */
@RF00412 L     @07,AMBLPTR                                         0420
         L     @07,AMBLXPT(,@07)                                   0420
         LTR   @07,@07                                             0420
         BZ    @RF00420                                            0420
         TM    AMBLPRIM(@07),B'10000000'                           0420
         BNO   @RF00420                                            0420
*       DO;                         /* BUILD AN OPEN ENTRY           */
*         VCRAMBL(ENTRYCNT)=AMBLXPT;/* SAVE PATH AMBL ADDRESS        */
         LR    @02,ENTRYCNT                                        0422
         SLA   @02,3                                               0422
         L     @15,VCRTPTR                                         0422
         L     @01,VCROPN(,@15)                                    0422
         AL    @01,@CF04237                                        0422
         ST    @07,VCRAMBL-4(@02,@01)                              0422
*         VCROPNCT=ENTRYCNT;        /* SET THE OPEN ENTRY COUNT      */
         STH   ENTRYCNT,VCROPNCT(,@15)                             0423
*         ENTRYCNT=ENTRYCNT+ONE;    /* INCREMENT THE CURRENT COUNT   */
         AL    ENTRYCNT,@CF00053                                   0424
*         VCRCADDR=VCRCADDR+LENGTH(VCRENTRY);/* NEXT AVAILABLE BYTE  */
         LA    @07,8                                               0425
         L     @02,VCRCADDR                                        0425
         ALR   @02,@07                                             0425
         ST    @02,VCRCADDR                                        0425
*         VCRCLENG=VCRCLENG-LENGTH(VCRENTRY);/* LNGTH AVAILABLE CORE */
         LCR   @07,@07                                             0426
         AL    @07,VCRCLENG                                        0426
         ST    @07,VCRCLENG                                        0426
*       END;                                                       0427
*     IF AMBLWRIT=ON THEN           /* IF AMBL IS OPEN FOR OUTPUT    */
@RF00420 L     @07,AMBLPTR                                         0428
         TM    AMBLWRIT(@07),B'00100000'                           0428
         BNO   @RF00428                                            0428
*       VCROUT=ON;                  /* THEN SET VCROUT ON            */
         L     @07,VCRTPTR                                         0429
         OI    VCROUT(@07),B'00100000'                             0429
*     AMBLPTR=AMBLSCHN;             /* NEXT AMBL IN SECONDARY CHAIN  */
@RF00428 L     @07,AMBLPTR                                         0430
         L     @07,AMBLSCHN(,@07)                                  0430
         ST    @07,AMBLPTR                                         0430
*   END;                                                           0431
@DE00394 L     @07,AMBLPTR                                         0431
         LTR   @07,@07                                             0431
         BNZ   @DL00394                                            0431
*                                                                  0432
*   /*****************************************************************/
*   /*                                                               */
*   /* SEARCH THE SECONDARY AMBL CHAINS FOR A HIGHER AUTHORIZED AMBL */
*   /* AND, IF ONE IS FOUND, REPLACE THE POINTER IN THE OPEN ENTRY   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0432
*   DO C1=ONE TO VCROPNCT BY ONE;                                  0432
         LA    @02,1                                               0432
         ST    @02,C1                                              0432
         B     @DE00432                                            0432
@DL00432 DS    0H                                                  0433
*     AMBLPTR=VCRAMBL(C1)->AMBLSCHN;/* ADDRESS OF 1ST SECONDARY AMBL */
         SLA   @02,3                                               0433
         L     @01,VCRTPTR                                         0433
         L     @01,VCROPN(,@01)                                    0433
         AL    @01,@CF04237                                        0433
         L     @02,VCRAMBL-4(@02,@01)                              0433
         L     @02,AMBLSCHN(,@02)                                  0433
         ST    @02,AMBLPTR                                         0433
*     DO WHILE AMBLPTR^=ZERO;       /* CHECK ALL SECONDARY AMBLS     */
         B     @DE00434                                            0434
@DL00434 DS    0H                                                  0435
*       IF AMBLPATH=ON THEN         /* IF THIS IS A PATH AMBL        */
         L     @02,AMBLPTR                                         0435
         TM    AMBLPATH(@02),B'10000000'                           0435
         BNO   @RF00435                                            0435
*         IF AMBLXPT->AMBLFLG1>     /* CHECK THE AUTHORIZATION LEVEL */
*             VCRAMBL(C1)->AMBLXPT->AMBLFLG1 THEN/* IN THE BASE AMBL */
         L     @01,AMBLXPT(,@02)                                   0436
         L     @15,C1                                              0436
         SLA   @15,3                                               0436
         L     @14,VCRTPTR                                         0436
         L     @14,VCROPN(,@14)                                    0436
         LA    @11,0(@15,@14)                                      0436
         AL    @11,@CF04237                                        0436
         L     @11,VCRAMBL-4(,@11)                                 0436
         L     @11,AMBLXPT(,@11)                                   0436
         CLC   AMBLFLG1(1,@01),AMBLFLG1(@11)                       0436
         BNH   @RF00436                                            0436
*           VCRAMBL(C1)=AMBLPTR;    /* IF HIGHER AUTH, REPLACE PTR   */
         AL    @14,@CF04237                                        0437
         ST    @02,VCRAMBL-4(@15,@14)                              0437
*         ELSE                      /* NOT PATH, PT TO AMBL DIRECTLY */
*           IF AMBLFLG1>VCRAMBL(C1)->AMBLFLG1 THEN/* IF HIGHER AUTH  */
         B     @RC00436                                            0438
@RF00436 L     @02,AMBLPTR                                         0438
         L     @15,C1                                              0438
         SLA   @15,3                                               0438
         L     @01,VCRTPTR                                         0438
         L     @14,VCROPN(,@01)                                    0438
         LA    @01,0(@15,@14)                                      0438
         AL    @01,@CF04237                                        0438
         L     @01,VCRAMBL-4(,@01)                                 0438
         CLC   AMBLFLG1(1,@02),AMBLFLG1(@01)                       0438
         BNH   @RF00438                                            0438
*             VCRAMBL(C1)=AMBLPTR;  /* REPLACE THE AMBL POINTER      */
         AL    @14,@CF04237                                        0439
         ST    @02,VCRAMBL-4(@15,@14)                              0439
*       AMBLPTR=AMBLSCHN;           /* GET POINTER TO NEXT SEC AMBL  */
@RF00438 DS    0H                                                  0440
@RC00436 DS    0H                                                  0440
@RF00435 L     @02,AMBLPTR                                         0440
         L     @02,AMBLSCHN(,@02)                                  0440
         ST    @02,AMBLPTR                                         0440
*     END;                          /* END SECONDARY AMBL LOOP       */
@DE00434 SLR   @02,@02                                             0441
         C     @02,AMBLPTR                                         0441
         BNE   @DL00434                                            0441
*     AMBLPTR=VCRAMBL(C1);          /* ADDRESS OF HIGHEST AUTH AMBL  */
         L     @15,C1                                              0442
         SLA   @15,3                                               0442
         L     @14,VCRTPTR                                         0442
         L     @01,VCROPN(,@14)                                    0442
         AL    @01,@CF04237                                        0442
         L     @15,VCRAMBL-4(@15,@01)                              0442
         ST    @15,AMBLPTR                                         0442
*     VCRCISIZ=MAX(VCRCISIZ,AMBLDTA->AMBDSB->AMDCINV);/* SET CI SIZE */
         L     @01,AMBLDTA(,@15)                                   0443
         L     @01,AMBDSB(,@01)                                    0443
         L     @00,VCRCISIZ(,@14)                                  0443
         L     @01,AMDCINV(,@01)                                   0443
         CR    @00,@01                                             0443
         BNL   *+6
         LR    @00,@01                                             0443
         ST    @00,VCRCISIZ(,@14)                                  0443
*     IF AMBLIX^=ZERO THEN          /* IF BASE IS A KSDS, SET INDEX  */
         L     @15,AMBLIX(,@15)                                    0444
         CR    @15,@02                                             0444
         BE    @RF00444                                            0444
*       VCRCISIZ=MAX(VCRCISIZ,AMBLIX->AMBDSB->AMDCINV);/* CI SIZE    */
         L     @02,AMBDSB(,@15)                                    0445
         L     @02,AMDCINV(,@02)                                   0445
         CR    @00,@02                                             0445
         BNL   *+6
         LR    @00,@02                                             0445
         ST    @00,VCRCISIZ(,@14)                                  0445
*     IF AMBLPATH=ON×AMBLXPT=ZERO THEN/* IF PATH OR BASE NOT FOR PTH */
@RF00444 L     @02,AMBLPTR                                         0446
         TM    AMBLPATH(@02),B'10000000'                           0446
         BO    @RT00446                                            0446
         L     @02,AMBLXPT(,@02)                                   0446
         LTR   @02,@02                                             0446
         BNZ   @RF00446                                            0446
@RT00446 DS    0H                                                  0447
*       CALL TCLOSE;                /* ISSUE T-CLOSE FOR THIS ENTRY  */
         BAL   @14,TCLOSE                                          0447
*   END;                            /* END VCROPNCT LOOP             */
*                                                                  0448
@RF00446 LA    @02,1                                               0448
         AL    @02,C1                                              0448
         ST    @02,C1                                              0448
@DE00432 L     @01,VCRTPTR                                         0448
         CH    @02,VCROPNCT(,@01)                                  0448
         BNH   @DL00432                                            0448
*   /*****************************************************************/
*   /*                                                               */
*   /* GIVE BACK ANY UNUSED CORE IN THE CURRENT SUBPOOL 252 BLOCK    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0449
*   CUR252C->VCRCPTRA=VCRCADDR;     /* SET FIRST AVAILABLE BYTE FLD  */
         L     @02,CUR252C                                         0449
         L     @15,VCRCADDR                                        0449
         ST    @15,VCRCPTRA(,@02)                                  0449
*   CUR252C->VCRCLENA=VCRCLENG;     /* SET AVAILABLE LENGTH FIELD    */
         L     @15,VCRCLENG                                        0450
         ST    @15,VCRCLENA(,@02)                                  0450
*   RESPECIFY                                                      0451
*     RET RESTRICTED;                                              0451
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @02,RETCONT                                         0452
         LR    @15,@02                                             0452
         SLA   @15,2                                               0452
         L     RET,RETSAVE-4(@15)                                  0452
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @02,0                                               0453
         ST    @02,RETCONT                                         0453
*   RESPECIFY                                                      0454
*     RET UNRESTRICTED;                                            0454
*   END BLDOPEN;                                                   0455
@EL00004 DS    0H                                                  0455
@EF00004 DS    0H                                                  0455
@ER00004 BR    @14                                                 0455
*TCLOSE:                                                           0456
*                                                                  0456
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - ISSUE A CLOSE, TYPE=T, AGAINST THE ACB FOR THE      */
*/*              CURRENT AMBL.  THE ACBERFLG FIELD IS TESTED FOR ANY */
*/*              UNACCEPTABLE ERRORS.                                */
*/*   INPUT    - A POINTER TO THE CURRENT AMBL IN AMBLPTR            */
*/*   OUTPUT   - THE T-CLOSE IS ISSUED                               */
*/*              IF ANY ERRORS, CKMSGCOD AND CKRETCOD ARE SET AND    */
*/*              THE MODULE IS EXITED.                               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0456
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0456
TCLOSE   DS    0H                                                  0457
*   RESPECIFY                                                      0457
*     RET RESTRICTED;                                              0457
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0458
         AL    @15,RETCONT                                         0458
         ST    @15,RETCONT                                         0458
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               0459
         ST    RET,RETSAVE-4(@15)                                  0459
*   RESPECIFY                                                      0460
*     RET UNRESTRICTED;                                            0460
*   MWACLPRM=ADDR(IFGACB);          /* PUT ACB ADDRESS IN PARM LIST  */
         L     @02,AMBLPTR                                         0461
         L     @02,AMBLACB(,@02)                                   0461
         ST    @02,MWACLPRM                                        0461
*   MWALASTE=ON;                    /* LAST ENTRY FLAG FOR T-CLOSE   */
         OI    MWALASTE,B'10000000'                                0462
*   RESPECIFY                                                      0463
*    (R0,                                                          0463
*     R1,                                                          0463
*     R15) RESTRICTED;                                             0463
*   STM(RACB,R13,XRBESA);           /* SAVE REGS IN EXTENDED SAVEAREA*/
         L     @14,PSATOLD                                         0464
         L     @14,TCBRBP(,@14)                                    0464
         STM   RACB,R13,XRBESA(@14)                                0464
*   LM(R0,R12,RBGRSAVE);            /* LOAD USER REGS FOR TCLOSE I/O */
         L     @14,PSATOLD                                         0465
         L     @14,TCBRBP(,@14)                                    0465
         LM    R0,R12,RBGRSAVE(@14)                                0465
*   GEN(CLOSE MF=(E,MWACLPRM),TYPE=T);/* ISSUE A T-CLOSE             */
         CLOSE MF=(E,MWACLPRM),TYPE=T
*   LM(RACB,R13,XRBESA);            /* RESTORE REGISTERS             */
         L     @14,PSATOLD                                         0467
         L     @14,TCBRBP(,@14)                                    0467
         LM    RACB,R13,XRBESA(@14)                                0467
*   RESPECIFY                                                      0468
*    (R0,                                                          0468
*     R1,                                                          0468
*     R15) UNRESTRICTED;                                           0468
*   IF ACBERFLG>OPERR128 THEN       /* IF ANY ERRORS ON THE T-CLOSE  */
         L     @02,AMBLPTR                                         0469
         L     @02,AMBLACB(,@02)                                   0469
         CLI   ACBERFLG(@02),128                                   0469
         BNH   @RF00469                                            0469
*     DO;                                                          0470
*       CKMSGCD2=ACBERFLG/FOUR+ERRBASE;/* SET THE MESSAGE CODE       */
         L     @15,CHKWAPTR                                        0471
         SLR   @14,@14                                             0471
         IC    @14,ACBERFLG(,@02)                                  0471
         SRL   @14,2                                               0471
         AL    @14,@CF01661                                        0471
         STC   @14,CKMSGCD2(,@15)                                  0471
*       IF ACBERFLG=OPERR184 THEN   /* IF I/O ERROR DURING T-CLOSE   */
         CLI   ACBERFLG(@02),184                                   0472
         BNE   @RF00472                                            0472
*         CKRETCD2=CHKERR0C;        /* INDICATE I/O ERROR            */
         MVI   CKRETCD2(@15),X'0C'                                 0473
*       ELSE                        /* OTHERWISE,                    */
*         CKRETCD2=CHKERR08;        /* INDICATE ENVIRONMENTAL ERROR  */
         B     @RC00472                                            0474
@RF00472 L     @02,CHKWAPTR                                        0474
         MVI   CKRETCD2(@02),X'08'                                 0474
*       RETURN TO ERREXIT;          /* GO TO CLEANUP AND EXIT        */
@RC00472 LA    @14,ERREXIT                                         0475
@EL00005 DS    0H                                                  0475
@EF00005 DS    0H                                                  0475
@ER00005 BR    @14                                                 0475
*     END;                                                         0476
*   ACBERFLG=ZERO;                  /* CLEAR THE ERROR FLAG          */
@RF00469 L     @02,AMBLPTR                                         0477
         L     @02,AMBLACB(,@02)                                   0477
         MVI   ACBERFLG(@02),X'00'                                 0477
*   RESPECIFY                                                      0478
*     RET RESTRICTED;                                              0478
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @02,RETCONT                                         0479
         LR    @15,@02                                             0479
         SLA   @15,2                                               0479
         L     RET,RETSAVE-4(@15)                                  0479
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @02,0                                               0480
         ST    @02,RETCONT                                         0480
*   RESPECIFY                                                      0481
*     RET UNRESTRICTED;                                            0481
*   END TCLOSE;                                                    0482
         B     @EL00005                                            0482
*BLDUPGRD:                                                         0483
*                                                                  0483
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - BUILDS AN UPGRADE ENTRY FOR EVERY UPT ENTRY         */
*/*   INPUT    - A POINTER TO THE CURRENT VCRT IN VCRTPTR            */
*/*   OUTPUT   - THE VCRT UPGRADE ENTRIES ARE BUILT                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0483
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0483
BLDUPGRD DS    0H                                                  0484
*   RESPECIFY                                                      0484
*     RET RESTRICTED;                                              0484
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0485
         AL    @15,RETCONT                                         0485
         ST    @15,RETCONT                                         0485
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               0486
         ST    RET,RETSAVE-4(@15)                                  0486
*   RESPECIFY                                                      0487
*     RET UNRESTRICTED;                                            0487
*   VCRCPFEL=ON;                    /* INDICATE REQ FOR EXACT LENGTH */
         OI    VCRCPFEL,B'01000000'                                0488
*   VCRCLENG=UPTNOENT*LENGTH(VCRUPGRD);/* TOTAL LENGTH UPG ENTRIES   */
         L     @02,AMBLPTR                                         0489
         L     @02,AMBLBIB(,@02)                                   0489
         L     @02,BIBUPT(,@02)                                    0489
         SLR   @15,@15                                             0489
         IC    @15,UPTNOENT(,@02)                                  0489
         SLA   @15,3                                               0489
         ST    @15,VCRCLENG                                        0489
*   VCRCPOOL=WKPOOL;                /* SUBPOOL 252                   */
         MVI   VCRCPOOL,X'FC'                                      0490
*   CALL GETCORE;                   /* GET THE CORE                  */
         BAL   @14,GETCORE                                         0491
*   VCRUPG=VCRCADDR;                /* SET POINTER TO FIRST ENTRY    */
         L     @02,VCRTPTR                                         0492
         L     @15,VCRCADDR                                        0492
         ST    @15,VCRUPG(,@02)                                    0492
*   VCRUPGCT=UPTNOENT;              /* SET UPGRADE ENTRY COUNT       */
         L     @01,AMBLPTR                                         0493
         L     @01,AMBLBIB(,@01)                                   0493
         L     @01,BIBUPT(,@01)                                    0493
         SLR   @00,@00                                             0493
         IC    @00,UPTNOENT(,@01)                                  0493
         STH   @00,VCRUPGCT(,@02)                                  0493
*   DO C1=ONE TO VCRUPGCT BY ONE;   /* BUILD THE UPGRADE ENTRIES     */
         LA    @02,1                                               0494
         ST    @02,C1                                              0494
         B     @DE00494                                            0494
@DL00494 DS    0H                                                  0495
*     AMBLPTR=UPTRPL(C1)->RPLDACB->ACBAMBL;/* GET PTR TO UPGRDE AMBL */
         LR    @15,@02                                             0495
         MH    @15,@CH00033                                        0495
         L     @01,AMBLPTR                                         0495
         L     @01,AMBLBIB(,@01)                                   0495
         L     @01,BIBUPT(,@01)                                    0495
         L     @01,UPTRPL-12(@15,@01)                              0495
         L     @01,RPLDACB(,@01)                                   0495
         L     @15,ACBAMBL(,@01)                                   0495
         ST    @15,AMBLPTR                                         0495
*     VCRUAMBL(C1)=AMBLPTR;         /* SAVE POINTER TO AMBL          */
         LR    @14,@02                                             0496
         SLA   @14,3                                               0496
         L     @11,VCRTPTR                                         0496
         L     @01,VCRUPG(,@11)                                    0496
         AL    @01,@CF04237                                        0496
         ST    @15,VCRUAMBL-4(@14,@01)                             0496
*     VCRCISIZ=MAX(VCRCISIZ,        /* SET MAXIMUM CI SIZE FOR VCRT  */
*         AMBLDTA->AMBDSB->AMDCINV, /* WHETHER DATA                  */
*         AMBLIX->AMBDSB->AMDCINV); /* OR INDEX                      */
         L     @01,AMBLDTA(,@15)                                   0497
         L     @01,AMBDSB(,@01)                                    0497
         L     @10,VCRCISIZ(,@11)                                  0497
         L     @14,AMDCINV(,@01)                                   0497
         CR    @10,@14                                             0497
         BNL   *+6
         LR    @10,@14                                             0497
         L     @01,AMBLIX(,@15)                                    0497
         L     @01,AMBDSB(,@01)                                    0497
         L     @15,AMDCINV(,@01)                                   0497
         CR    @10,@15                                             0497
         BNL   *+6
         LR    @10,@15                                             0497
         ST    @10,VCRCISIZ(,@11)                                  0497
*   END;                                                           0498
         AL    @02,@CF00053                                        0498
         ST    @02,C1                                              0498
@DE00494 L     @01,VCRTPTR                                         0498
         CH    @02,VCRUPGCT(,@01)                                  0498
         BNH   @DL00494                                            0498
*   RESPECIFY                                                      0499
*     RET RESTRICTED;                                              0499
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @02,RETCONT                                         0500
         LR    @15,@02                                             0500
         SLA   @15,2                                               0500
         L     RET,RETSAVE-4(@15)                                  0500
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @02,0                                               0501
         ST    @02,RETCONT                                         0501
*   RESPECIFY                                                      0502
*     RET UNRESTRICTED;                                            0502
*   END BLDUPGRD;                                                  0503
@EL00006 DS    0H                                                  0503
@EF00006 DS    0H                                                  0503
@ER00006 BR    @14                                                 0503
*BLDINDEX:                                                         0504
*                                                                  0504
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - BUILDS THE INDEX ENTRIES FOR A CREATE MODE KSDS AND */
*/*              AND CALLS THE INDEX GET ROUTINE FOR REPOSITIONING.  */
*/*   INPUT    - A POINTER TO THE CURRENT VCRT IN VCRTPTR            */
*/*   OUTPUT   - THE VCRT INDEX ENTRIES ARE BUILT                    */
*/*              THE CURRENT CI FOR EACH INDEX LEVEL IS SAVED        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0504
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0504
BLDINDEX DS    0H                                                  0505
*   RESPECIFY                                                      0505
*     RET RESTRICTED;                                              0505
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0506
         AL    @15,RETCONT                                         0506
         ST    @15,RETCONT                                         0506
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               0507
         ST    RET,RETSAVE-4(@15)                                  0507
*   RESPECIFY                                                      0508
*     RET UNRESTRICTED;                                            0508
*   AMBLPTR=VCRAMBL(ONE);           /* POINT TO THE PRIMARY AMBL     */
         L     @07,VCRTPTR                                         0509
         L     @07,VCROPN(,@07)                                    0509
         L     @07,VCRAMBL(,@07)                                   0509
         ST    @07,AMBLPTR                                         0509
*   AMBPTR=AMBLIX;                  /* POINT TO THE INDEX AMB        */
         L     @07,AMBLIX(,@07)                                    0510
         ST    @07,AMBPTR                                          0510
*   ICWAPTR=AMBIWA;                 /* POINT TO THE ICWA             */
         L     ICWAPTR,AMBIWA(,@07)                                0511
*   ENTRYCNT=ZERO;                  /* INITIALIZE NUMBER OF ENTRIES  */
         SLR   ENTRYCNT,ENTRYCNT                                   0512
*   DO WHILE ICWAPTR^=ZERO&ICWAPTR->ICWLN^=ZERO;/* COUNT ALL IN USE  */
         B     @DE00513                                            0513
@DL00513 DS    0H                                                  0514
*     ENTRYCNT=ENTRYCNT+ONE;        /* INCREMENT ENTRY COUNT         */
         AL    ENTRYCNT,@CF00053                                   0514
*     ICWAPTR=ICWAPTR->ICWCHN;      /* POINT TO NEXT ICWA            */
         L     ICWAPTR,ICWCHN(,ICWAPTR)                            0515
*   END;                            /* END OF ICWA COUNT LOOP        */
@DE00513 SLR   @07,@07                                             0516
         CR    ICWAPTR,@07                                         0516
         BE    @DC00513                                            0516
         CH    @07,ICWLN(,ICWAPTR)                                 0516
         BNE   @DL00513                                            0516
@DC00513 DS    0H                                                  0517
*   VCRIDXCT=ENTRYCNT;              /* INITIALIZE INDEX ENTRY COUNT  */
         L     @07,VCRTPTR                                         0517
         STH   ENTRYCNT,VCRIDXCT(,@07)                             0517
*   VCRCPFEL=ON;                    /* GET EXACT LENGTH REQUESTED    */
         OI    VCRCPFEL,B'01000000'                                0518
*   VCRCLENG=LENGTH(VCRINDEX)*ENTRYCNT;/* SET LENGTH THIS REQUEST    */
         LR    @07,ENTRYCNT                                        0519
         SLA   @07,3                                               0519
         ST    @07,VCRCLENG                                        0519
*   CALL GETCORE;                   /* GET THE STORAGE               */
         BAL   @14,GETCORE                                         0520
*   VCRIDX=VCRCADDR;                /* INDEX ENTRIES START ADDRESS   */
         L     @02,VCRCADDR                                        0521
         L     @01,VCRTPTR                                         0521
         ST    @02,VCRIDX(,@01)                                    0521
*   CALL IOSAVE;                    /* SAVE STATUS OF USER BLOCKS    */
         BAL   @14,IOSAVE                                          0522
*   IF VCRIDXCT=ZERO THEN           /* IF THERE ARE NO ACTIVE ICWAS  */
         SLR   @02,@02                                             0523
         L     @15,VCRTPTR                                         0523
         CH    @02,VCRIDXCT(,@15)                                  0523
         BNE   @RF00523                                            0523
*     VCRIDX=ZERO;                  /* ZERO PTR TO INDEX ENTRIES     */
         ST    @02,VCRIDX(,@15)                                    0524
*   ELSE                            /* OTHERWISE, ACTIVE ICWAS SO    */
*     VCRICWA(ONE)=AMBIWA;          /* PUT ADDRESS 1ST ICWA IN ENTRY */
         B     @RC00523                                            0525
@RF00523 L     @02,VCRTPTR                                         0525
         L     @02,VCRIDX(,@02)                                    0525
         L     @01,AMBPTR                                          0525
         L     @15,AMBIWA(,@01)                                    0525
         ST    @15,VCRICWA(,@02)                                   0525
*   DO C1=ONE TO VCRIDXCT BY ONE;   /* PROCESS ALL ACTIVE ICWAS      */
@RC00523 LA    @02,1                                               0526
         ST    @02,C1                                              0526
         B     @DE00526                                            0526
@DL00526 DS    0H                                                  0527
*     IF C1<VCRIDXCT THEN           /* IF THIS NOT LAST INDEX ENTRY  */
         L     @15,VCRTPTR                                         0527
         CH    @02,VCRIDXCT(,@15)                                  0527
         BNL   @RF00527                                            0527
*       VCRICWA(C1+ONE)=ICWCHN;     /* PTR NEXT ICWA IN NEXT ENTRY   */
         SLA   @02,3                                               0528
         L     @15,VCRIDX(,@15)                                    0528
         LA    @01,0(@02,@15)                                      0528
         AL    @01,@CF04232                                        0528
         L     @01,VCRICWA(,@01)                                   0528
         L     @14,ICWCHN(,@01)                                    0528
         ST    @14,VCRICWA(@02,@15)                                0528
*     VCRCLENG=AMDCINV;             /* GET CONTROL INTERVAL LENGTH   */
@RF00527 L     @02,AMBPTR                                          0529
         L     @02,AMBDSB(,@02)                                    0529
         L     @02,AMDCINV(,@02)                                   0529
         ST    @02,VCRCLENG                                        0529
*     VCRCPOOL=USERPOOL;            /* GET FROM SUBPOOL 252 - USERS  */
         MVI   VCRCPOOL,X'FA'                                      0530
*     VCRCPFEL=ON;                  /* GET EXACT LENGTH              */
         OI    VCRCPFEL,B'01000000'                                0531
*     CALL GETCORE;                 /* GET THE INDEX CI BUFFER       */
         BAL   @14,GETCORE                                         0532
*     VCRBUFPT(C1)=VCRCADDR;        /* PUT BUFFER ADDRESS IN ENTRY   */
         L     @02,C1                                              0533
         SLA   @02,3                                               0533
         L     @01,VCRTPTR                                         0533
         L     @01,VCRIDX(,@01)                                    0533
         L     @00,VCRCADDR                                        0533
         AL    @01,@CF04237                                        0533
         ST    @00,VCRBUFPT-4(@02,@01)                             0533
*     RPLAREA=VCRBUFPT(C1);         /* POINT TO BUFFER AREA          */
         L     @02,MWASP250                                        0534
         ST    @00,RPLAREA+72(,@02)                                0534
*     CALL IDXGET;                  /* CALL ROUTINE TO GET INDEX CI  */
         BAL   @14,IDXGET                                          0535
*   END;                                                           0536
         LA    @02,1                                               0536
         AL    @02,C1                                              0536
         ST    @02,C1                                              0536
@DE00526 L     @01,VCRTPTR                                         0536
         CH    @02,VCRIDXCT(,@01)                                  0536
         BNH   @DL00526                                            0536
*   CALL IORESTOR;                  /* RESTORE USER BLOCKS           */
         BAL   @14,IORESTOR                                        0537
*   RESPECIFY                                                      0538
*     RET RESTRICTED;                                              0538
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @02,RETCONT                                         0539
         LR    @15,@02                                             0539
         SLA   @15,2                                               0539
         L     RET,RETSAVE-4(@15)                                  0539
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @02,0                                               0540
         ST    @02,RETCONT                                         0540
*   RESPECIFY                                                      0541
*     RET UNRESTRICTED;                                            0541
*   END BLDINDEX;                                                  0542
@EL00007 DS    0H                                                  0542
@EF00007 DS    0H                                                  0542
@ER00007 BR    @14                                                 0542
*GETRTN:                                                           0543
*                                                                  0543
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - READS THE CURRENT CI INTO A BUFFER OBTAINED         */
*/*              DYNAMICALLY AND POINTED TO BY THE VCRT. THE BUFFER  */
*/*              WILL BE REWRITTEN IF A CHECKPOINT IS REQUESTED.     */
*/*   INPUT    - A POINTER TO THE PRIMARY AMBL IN PAMBLPTR           */
*/*              A POINTER TO THE DATA AMB IN AMBPTR                 */
*/*              A POINTER TO THE CURRENT VCRT IN VCRTPTR            */
*/*   OUTPUT   - CURRENT CI SAVED IN CHECKPOINT/RESTART BUFFER       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0543
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);                             0543
GETRTN   DS    0H                                                  0544
*   RESPECIFY                                                      0544
*     RET RESTRICTED;                                              0544
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0545
         AL    @15,RETCONT                                         0545
         ST    @15,RETCONT                                         0545
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               0546
         ST    RET,RETSAVE-4(@15)                                  0546
*   RESPECIFY                                                      0547
*     RET UNRESTRICTED;                                            0547
*                                                                  0547
*   /*****************************************************************/
*   /*                                                               */
*   /* GET THE BUFFER FOR SAVING THE CONTROL INTERVAL                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0548
*   VCRCPFEL=ON;                    /* EXACT LENGTH REQUEST          */
         OI    VCRCPFEL,B'01000000'                                0548
*   VCRCPOOL=USERPOOL;              /* USERS SUBPOOL 250             */
         MVI   VCRCPOOL,X'FA'                                      0549
*   VCRCLENG=AMDCINV;               /* LENGTH OF CONTROL INTERVAL    */
         L     @02,AMBPTR                                          0550
         L     @02,AMBDSB(,@02)                                    0550
         L     @02,AMDCINV(,@02)                                   0550
         ST    @02,VCRCLENG                                        0550
*   CALL GETCORE;                   /* GET THE CORE                  */
         BAL   @14,GETCORE                                         0551
*   VCRRBUF=VCRCADDR;               /* PUT THE ADDRESS IN THE VCRT   */
         L     @02,VCRCADDR                                        0552
         L     @01,VCRTPTR                                         0552
         ST    @02,VCRRBUF(,@01)                                   0552
*   CALL IOSAVE;                    /* SAVE STATUS OF USER BLOCKS    */
         BAL   @14,IOSAVE                                          0553
*   CINVRBA=ARDHRBA-AMDCINV;        /* RBA OF CONTROL INTERVAL       */
         L     @02,AMBPTR                                          0554
         L     @02,AMBDSB(,@02)                                    0554
         L     @01,AMDPARDB(,@02)                                  0554
         L     @15,ARDHRBA(,@01)                                   0554
         SL    @15,AMDCINV(,@02)                                   0554
         ST    @15,CINVRBA                                         0554
*   RPLARG=ADDR(CINVRBA);           /* RBA ARGUMENT                  */
         L     @02,MWASP250                                        0555
         LA    @15,72                                              0555
         ALR   @15,@02                                             0555
         LA    @14,CINVRBA                                         0555
         ST    @14,RPLARG(,@15)                                    0555
*   RPLAREA=VCRRBUF;                /* PT TO BUFFER AREA             */
*                                                                  0556
         L     @01,VCRTPTR                                         0556
         L     @14,VCRRBUF(,@01)                                   0556
         ST    @14,RPLAREA(,@15)                                   0556
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE REGISTERS FOR GET REQUEST AND SYNCH TO THE RECORD  */
*   /* MANAGEMENT INTERFACE ROUTINE.                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0557
*   RESPECIFY                                                      0557
*    (R0,                                                          0557
*     R1,                                                          0557
*     R15) RESTRICTED;                                             0557
*   R0=RPLGET;                      /* INDICATE GET REQUEST          */
         ST    @15,@TF00001                                        0558
         SLR   R0,R0                                               0558
*   R1=ADDR(IFGRPL);                /* GET POINTER TO RPL            */
         L     R1,@TF00001                                         0559
*   R15=BIBINTRF;                   /* GET PT TO INTERFACE ROUTINE   */
         L     @14,AMBLPTR                                         0560
         L     @14,AMBLBIB(,@14)                                   0560
         L     R15,BIBINTRF(,@14)                                  0560
*   STM(RACB,R13,XRBESA);           /* SAVE REGISTERS IN RB SAVEAREA */
         L     @14,PSATOLD                                         0561
         L     @14,TCBRBP(,@14)                                    0561
         STM   RACB,R13,XRBESA(@14)                                0561
*   R13=ADDR(SP250SA);              /* GET POINTER TO SAVE AREA      */
         LR    R13,@02                                             0562
*   GEN(SYNCH (15));                /* ISSUE SYNCH MACRO             */
         SYNCH (15)
*   LM(RACB,R13,XRBESA);            /* RESTORE CHECKPOINTS REGISTERS */
         L     @14,PSATOLD                                         0564
         L     @14,TCBRBP(,@14)                                    0564
         LM    RACB,R13,XRBESA(@14)                                0564
*   RESPECIFY                                                      0565
*    (R0,                                                          0565
*     R1,                                                          0565
*     R15) UNRESTRICTED;                                           0565
*   CALL IORESTOR;                  /* RESTORE USER BLOCKS           */
         BAL   @14,IORESTOR                                        0566
*   IF RPLRTNCD^=ZERO THEN          /* IF ANY ERRORS                 */
         LA    @02,72                                              0567
         AL    @02,MWASP250                                        0567
         CLI   RPLRTNCD(@02),0                                     0567
         BE    @RF00567                                            0567
*     DO;                           /* THEN                          */
*       CKMSGCD2=CKMSG042;          /* INDICATE REPOSITIONING ERROR  */
         L     @15,CHKWAPTR                                        0569
         MVI   CKMSGCD2(@15),X'2A'                                 0569
*       IF RPLRTNCD=RPLERR0C THEN   /* IF A PHYSICAL ERROR THEN      */
         CLI   RPLRTNCD(@02),12                                    0570
         BNE   @RF00570                                            0570
*         CKRETCD2=CHKERR0C;        /* SET RETURN CODE FOR I/O ERROR */
         MVI   CKRETCD2(@15),X'0C'                                 0571
*       ELSE                        /* OTHERWISE A LOGICAL ERROR     */
*         CKRETCD2=CHKERR08;        /* SET ENVIRONMENTAL RETURN CODE */
         B     @RC00570                                            0572
@RF00570 L     @02,CHKWAPTR                                        0572
         MVI   CKRETCD2(@02),X'08'                                 0572
*     END;                                                         0573
@RC00570 DS    0H                                                  0574
*   RESPECIFY                                                      0574
*     RET RESTRICTED;                                              0574
@RF00567 DS    0H                                                  0575
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @02,RETCONT                                         0575
         LR    @15,@02                                             0575
         SLA   @15,2                                               0575
         L     RET,RETSAVE-4(@15)                                  0575
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @02,0                                               0576
         ST    @02,RETCONT                                         0576
*   RESPECIFY                                                      0577
*     RET UNRESTRICTED;                                            0577
*   END GETRTN;                                                    0578
@EL00008 DS    0H                                                  0578
@EF00008 DS    0H                                                  0578
@ER00008 BR    @14                                                 0578
*IDXGET:                                                           0579
*                                                                  0579
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - READS THE CURRENT CI FOR THE INDEX LEVEL ASSOCIATED */
*/*              WITH THE CURRENT INDEX CREATE WORK AREA (ICWA).     */
*/*   INPUT    - A POINTER TO THE CURRENT VCRT IN VCRTPTR            */
*/*              THE VCRT INDEX ENTRY NUMBER IN C1                   */
*/*   OUTPUT   - CURRENT INDEX CI, FOR ALL INDEX LEVELS, SAVED IN    */
*/*              THE INDEX BUFFER FOR THE VCRT INDEX ENTRY.          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0579
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);                             0579
IDXGET   DS    0H                                                  0580
*   RESPECIFY                                                      0580
*     RET RESTRICTED;                                              0580
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0581
         AL    @15,RETCONT                                         0581
         ST    @15,RETCONT                                         0581
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               0582
         ST    RET,RETSAVE-4(@15)                                  0582
*   RESPECIFY                                                      0583
*     RET UNRESTRICTED;                                            0583
*   RPLARG=ADDR(ICWCRBA);           /* RBA ARGUMENT                  */
*                                                                  0584
         L     @02,MWASP250                                        0584
         LA    @15,72                                              0584
         ALR   @15,@02                                             0584
         L     @14,C1                                              0584
         SLA   @14,3                                               0584
         L     @01,VCRTPTR                                         0584
         L     @01,VCRIDX(,@01)                                    0584
         AL    @01,@CF04232                                        0584
         L     @01,VCRICWA(@14,@01)                                0584
         LA    @14,ICWCRBA(,@01)                                   0584
         ST    @14,RPLARG(,@15)                                    0584
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE REGISTERS FOR GET REQUEST AND SYNCH TO THE RECORD  */
*   /* MANAGEMENT INTERFACE ROUTINE.                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0585
*   RESPECIFY                                                      0585
*    (R0,                                                          0585
*     R1,                                                          0585
*     R15) RESTRICTED;                                             0585
*   R0=RPLGETIX;                    /* INDICATE INDEX GET REQUEST    */
         ST    @15,@TF00001                                        0586
         LA    R0,11                                               0586
*   R1=ADDR(IFGRPL);                /* GET POINTER TO RPL            */
         L     R1,@TF00001                                         0587
*   R15=BIBINTRF;                   /* GET PT TO INTERFACE ROUTINE   */
         L     @14,AMBLPTR                                         0588
         L     @14,AMBLBIB(,@14)                                   0588
         L     R15,BIBINTRF(,@14)                                  0588
*   STM(RACB,R13,XRBESA);           /* SAVE REGISTERS IN RB SAVEAREA */
         L     @14,PSATOLD                                         0589
         L     @14,TCBRBP(,@14)                                    0589
         STM   RACB,R13,XRBESA(@14)                                0589
*   R13=ADDR(SP250SA);              /* GET POINTER TO SAVE AREA      */
         LR    R13,@02                                             0590
*   GEN(SYNCH (15));                /* ISSUE SYNCH MACRO             */
         SYNCH (15)
*   LM(RACB,R13,XRBESA);            /* RESTORE CHECKPOINTS REGISTERS */
         L     @14,PSATOLD                                         0592
         L     @14,TCBRBP(,@14)                                    0592
         LM    RACB,R13,XRBESA(@14)                                0592
*   IF RPLRTNCD^=ZERO THEN          /* IF ANY ERRORS                 */
         LA    @14,72                                              0593
         AL    @14,MWASP250                                        0593
         CLI   RPLRTNCD(@14),0                                     0593
         BE    @RF00593                                            0593
*     DO;                           /* THEN                          */
*       CKMSGCD2=CKMSG042;          /* INDICATE REPOSITIONING ERROR  */
         L     @02,CHKWAPTR                                        0595
         MVI   CKMSGCD2(@02),X'2A'                                 0595
*       IF RPLRTNCD=RPLERR0C THEN   /* IF A PHYSICAL ERROR THEN      */
         CLI   RPLRTNCD(@14),12                                    0596
         BNE   @RF00596                                            0596
*         CKRETCD2=CHKERR0C;        /* SET RETURN CODE FOR I/O ERROR */
         MVI   CKRETCD2(@02),X'0C'                                 0597
*       ELSE                        /* OTHERWISE A LOGICAL ERROR     */
*         CKRETCD2=CHKERR08;        /* SET ENVIRONMENTAL RETURN CODE */
         B     @RC00596                                            0598
@RF00596 L     @14,CHKWAPTR                                        0598
         MVI   CKRETCD2(@14),X'08'                                 0598
*       RETURN TO ERREXIT;          /* GO TO ERROR CLEANUP           */
@RC00596 LA    @14,ERREXIT                                         0599
@EL00009 DS    0H                                                  0599
@EF00009 DS    0H                                                  0599
@ER00009 BR    @14                                                 0599
*     END;                                                         0600
*   RESPECIFY                                                      0601
*     RET RESTRICTED;                                              0601
@RF00593 DS    0H                                                  0602
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @02,RETCONT                                         0602
         LR    @11,@02                                             0602
         SLA   @11,2                                               0602
         L     RET,RETSAVE-4(@11)                                  0602
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @02,0                                               0603
         ST    @02,RETCONT                                         0603
*   RESPECIFY                                                      0604
*    (R0,                                                          0604
*     R1,                                                          0604
*     RET,                                                         0604
*     R15) UNRESTRICTED;                                           0604
*   END IDXGET;                                                    0605
         B     @EL00009                                            0605
*HEBSAVE:                                                          0606
*                                                                  0606
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - SAVES THE CMB HEB CHAINS FOR THE SPHERE WITH THE    */
*/*              EXCEPTION OF THE DEB ENTRIES AND THE FIXED          */
*/*              PROTECTED STRING BLOCKS (UPGRADE AND NON-UPGRADE)   */
*/*   INPUT    - THE CURRENT VCRT IN VCRTPTR                         */
*/*   OUTPUT   - THE HEB ELEMENTS FOR THE SPHERE ARE SAVED           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0606
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0606
HEBSAVE  DS    0H                                                  0607
*   RESPECIFY                                                      0607
*     RET RESTRICTED;                                              0607
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0608
         L     @02,RETCONT                                         0608
         ALR   @02,@15                                             0608
         ST    @02,RETCONT                                         0608
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @02,2                                               0609
         ST    RET,RETSAVE-4(@02)                                  0609
*   RESPECIFY                                                      0610
*     RET UNRESTRICTED;                                            0610
*   VCRCLENG=ZERO;                  /* SET INITIAL LENGTH TO ZERO    */
         SLR   @02,@02                                             0611
         ST    @02,VCRCLENG                                        0611
*   VCRCPOOL=WKPOOL;                /* SET SUBPOOL FOR BLDHEBS       */
         MVI   VCRCPOOL,X'FC'                                      0612
*   VCRUPGSW=OFF;                   /* PROCESSING OPEN ENTRIES       */
         L     @02,VCRTPTR                                         0613
         NI    VCRUPGSW(@02),B'01111111'                           0613
*   DO C1=ONE TO VCROPNCT BY ONE;   /* PROCESS ALL OPEN ENTRIES      */
         ST    @15,C1                                              0614
         B     @DE00614                                            0614
@DL00614 DS    0H                                                  0615
*     AMBLPTR=VCRAMBL(C1);          /* ADDRESSIBILITY FOR AMBL       */
         SLA   @15,3                                               0615
         L     @05,VCRTPTR                                         0615
         L     @05,VCROPN(,@05)                                    0615
         AL    @05,@CF04237                                        0615
         L     @05,VCRAMBL-4(@15,@05)                              0615
         ST    @05,AMBLPTR                                         0615
*     HEBSAPTR=ZERO;                /* CLEAR PTR TO CURRENT HEADER   */
         SLR   HEBSAPTR,HEBSAPTR                                   0616
*     IF AMBLDTA->AMBPUG=OFF THEN   /* IF CLUSTER IS NOT IN UPGRADE  */
*                                                                  0617
         L     @05,AMBLDTA(,@05)                                   0617
         TM    AMBPUG(@05),B'10000000'                             0617
         BNZ   @RF00617                                            0617
*       /*************************************************************/
*       /*                                                           */
*       /* SAVE THE HEADER ELEMENTS CHAINED TO THE CMB               */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0618
*       DO C2=ONE TO LENGTH(CMBPTRS)/FWORDLEN;                     0618
         LA    C2,1                                                0618
@DL00618 DS    0H                                                  0619
*         HEBPTR=HEBPTRS(C2);       /* GET THE PTR TO FIRST ELEMENT  */
         LR    @02,C2                                              0619
         SLA   @02,2                                               0619
         L     @01,AMBLPTR                                         0619
         L     @01,AMBLCMB(,@01)                                   0619
         L     HEBPTR,HEBPTRS-4(@02,@01)                           0619
*         IF VCRLSR=ON THEN         /* IF LSR OPEN AND       @ZA04230*/
         L     @06,VCRTPTR                                         0620
         TM    VCRLSR(@06),B'01000000'                             0620
         BNO   @RF00620                                            0620
*           IF BLDMASK(C2)=TWO&     /* IF ENTRY TO BE SAVED  @ZA04230*/
*               HEBPTR^=ZERO THEN   /* AND THERE ARE HEADER ELEMENTS */
         SLR   @06,@06                                             0621
         IC    @06,BLDMASK-1(C2)                                   0621
         C     @06,@CF00092                                        0621
         BNE   @RF00621                                            0621
         LTR   HEBPTR,HEBPTR                                       0621
         BZ    @RF00621                                            0621
*             CALL BLDHEBS;         /* SAVE THE HEADERS      @ZA04230*/
         BAL   @14,BLDHEBS                                         0622
*           ELSE                                                   0623
*             ;                     /* NOT TO BE SAVED       @ZA04230*/
@RF00621 DS    0H                                                  0624
*         ELSE                      /* NOT AN LSR OPEN       @ZA04230*/
*           IF BLDMASK(C2)^=ZERO&   /* IF THIS ENTRY TO BE SAVED     */
*               HEBPTR^=ZERO THEN   /* AND THERE ARE HEADER ELEMENTS */
         B     @RC00620                                            0624
@RF00620 SLR   @06,@06                                             0624
         SLR   @02,@02                                             0624
         IC    @02,BLDMASK-1(C2)                                   0624
         CR    @06,@02                                             0624
         BE    @RF00624                                            0624
         CR    HEBPTR,@06                                          0624
         BE    @RF00624                                            0624
*             CALL BLDHEBS;         /* SAVE THE HEADER ELEMENTS      */
         BAL   @14,BLDHEBS                                         0625
*       END;                                                       0626
@RF00624 DS    0H                                                  0626
@RC00620 AL    C2,@CF00053                                         0626
         C     C2,@CF02636                                         0626
         BNH   @DL00618                                            0626
*   END;                                                           0627
@RF00617 LA    @15,1                                               0627
         AL    @15,C1                                              0627
         ST    @15,C1                                              0627
@DE00614 L     @02,VCRTPTR                                         0627
         CH    @15,VCROPNCT(,@02)                                  0627
         BNH   @DL00614                                            0627
*   VCRUPGSW=ON;                    /* INDICATE UPGRADE ENTRIES      */
         L     @02,VCRTPTR                                         0628
         OI    VCRUPGSW(@02),B'10000000'                           0628
*   DO C1=ONE TO VCRUPGCT BY ONE;   /* PROCESS ALL UPGRADE ENTRIES   */
         LA    @02,1                                               0629
         ST    @02,C1                                              0629
         B     @DE00629                                            0629
@DL00629 DS    0H                                                  0630
*     AMBLPTR=VCRUAMBL(C1);         /* ADDRESSIBILITY FOR AMBL       */
         SLA   @02,3                                               0630
         L     @05,VCRTPTR                                         0630
         L     @05,VCRUPG(,@05)                                    0630
         AL    @05,@CF04237                                        0630
         L     @05,VCRUAMBL-4(@02,@05)                             0630
         ST    @05,AMBLPTR                                         0630
*     HEBSAPTR=ZERO;                /* CLEAR PTR TO CURRENT HEADER   */
*                                                                  0631
         SLR   HEBSAPTR,HEBSAPTR                                   0631
*     /***************************************************************/
*     /*                                                             */
*     /* SAVE THE HEADER ELEMENTS CHAINED TO THE UPGRADE CMBS        */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0632
*     DO C2=ONE TO LENGTH(CMBPTRS)/FWORDLEN;                       0632
         LA    C2,1                                                0632
@DL00632 DS    0H                                                  0633
*       HEBPTR=HEBPTRS(C2);         /* GET THE PTR TO FIRST ELEMENT  */
         LR    @02,C2                                              0633
         SLA   @02,2                                               0633
         L     @01,AMBLPTR                                         0633
         L     @01,AMBLCMB(,@01)                                   0633
         L     HEBPTR,HEBPTRS-4(@02,@01)                           0633
*       IF VCRLSR=ON THEN           /* IF LSR OPEN AND       @ZA04230*/
         L     @06,VCRTPTR                                         0634
         TM    VCRLSR(@06),B'01000000'                             0634
         BNO   @RF00634                                            0634
*         IF BLDMASK(C2)=TWO&       /* IF ENTRY TO BE SAVED  @ZA04230*/
*             HEBPTR^=ZERO THEN     /* AND THERE ARE HEADER ELEMENTS */
         SLR   @06,@06                                             0635
         IC    @06,BLDMASK-1(C2)                                   0635
         C     @06,@CF00092                                        0635
         BNE   @RF00635                                            0635
         LTR   HEBPTR,HEBPTR                                       0635
         BZ    @RF00635                                            0635
*           CALL BLDHEBS;           /* SAVE THE HEADERS      @ZA04230*/
         BAL   @14,BLDHEBS                                         0636
*         ELSE                                                     0637
*           ;                       /* NOT TO BE SAVED       @ZA04230*/
@RF00635 DS    0H                                                  0638
*       ELSE                        /* NOT AN LSR OPEN       @ZA04230*/
*         IF BLDMASK(C2)^=ZERO&     /* IF ELEMENTS ARE TO BE SAVED   */
*             HEBPTR^=ZERO THEN     /* AND THERE ARE HEADER ELEMENTS */
         B     @RC00634                                            0638
@RF00634 SLR   @06,@06                                             0638
         SLR   @02,@02                                             0638
         IC    @02,BLDMASK-1(C2)                                   0638
         CR    @06,@02                                             0638
         BE    @RF00638                                            0638
         CR    HEBPTR,@06                                          0638
         BE    @RF00638                                            0638
*           CALL BLDHEBS;           /* SAVE THE HEADER ELEMENTS      */
         BAL   @14,BLDHEBS                                         0639
*     END;                                                         0640
@RF00638 DS    0H                                                  0640
@RC00634 AL    C2,@CF00053                                         0640
         C     C2,@CF02636                                         0640
         BNH   @DL00632                                            0640
*   END;                                                           0641
*                                                                  0641
         LA    @02,1                                               0641
         AL    @02,C1                                              0641
         ST    @02,C1                                              0641
@DE00629 L     @01,VCRTPTR                                         0641
         CH    @02,VCRUPGCT(,@01)                                  0641
         BNH   @DL00629                                            0641
*   /*****************************************************************/
*   /*                                                               */
*   /* SAVE THE HEBS FOR THE SPHERE BLOCK                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0642
*   HEBSAPTR=ZERO;                  /* CLEAR POINTER TO CURRENT HDR  */
         SLR   HEBSAPTR,HEBSAPTR                                   0642
*   HEBPTR=BIBSPHPT;                /* POINT TO 1ST HEADER ELEMENT   */
         L     @02,AMBLPTR                                         0643
         L     @02,AMBLBIB(,@02)                                   0643
         L     @02,BIBSPHPT(,@02)                                  0643
         LR    HEBPTR,@02                                          0643
*   C2=ZERO;                        /* SET C2 TO TRIGGER SPHERE SAVE */
         SLR   C2,C2                                               0644
*   IF BIBSPHPT^=ZERO&              /* IF A SPHERE BLOCK DOES EXIST  */
*       VCRLSR=OFF THEN             /* AND NOT AN LSR OPEN   @ZA04230*/
         LTR   @02,@02                                             0645
         BZ    @RF00645                                            0645
         L     @06,VCRTPTR                                         0645
         TM    VCRLSR(@06),B'01000000'                             0645
         BNZ   @RF00645                                            0645
*     CALL BLDHEBS;                 /* SAVE THE HEBS                 */
*                                                                  0646
         BAL   @14,BLDHEBS                                         0646
*   /*****************************************************************/
*   /*                                                               */
*   /* GIVE BACK ANY UNUSED CORE IN THE CURRENT SUBPOOL 252 BLOCK    */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0647
*   CUR252C->VCRCPTRA=VCRCADDR;     /* SET FIRST AVAILABLE BYTE FLD  */
@RF00645 L     @02,CUR252C                                         0647
         L     @15,VCRCADDR                                        0647
         ST    @15,VCRCPTRA(,@02)                                  0647
*   CUR252C->VCRCLENA=VCRCLENG;     /* SET AVAILABLE LENGTH FIELD    */
         L     @15,VCRCLENG                                        0648
         ST    @15,VCRCLENA(,@02)                                  0648
*   RESPECIFY                                                      0649
*     RET RESTRICTED;                                              0649
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @02,RETCONT                                         0650
         LR    @15,@02                                             0650
         SLA   @15,2                                               0650
         L     RET,RETSAVE-4(@15)                                  0650
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @02,0                                               0651
         ST    @02,RETCONT                                         0651
*   RESPECIFY                                                      0652
*     RET UNRESTRICTED;                                            0652
*BLDHEBS:                                                          0653
*                                                                  0653
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - BUILDS THE HEB SAVE AREA HEADER FOR THE CURRENT CMB */
*/*              POINTER AND SAVES THE HEADER ELEMENTS.              */
*/*   INPUT    - THE CURRENT HEB POINTER IN HEBPTR                   */
*/*              THE CURRENT HEADER POINTER OR ZERO IN HEBSAPTR      */
*/*              THE RELATIVE CMB ENTRY NUMBER IN C2                 */
*/*              THE VCRUPGSW SET FOR PROCESSING UPGRADE ENTRIES     */
*/*              THE VCRT ENTRY NUMBER IN C1                         */
*/*   OUTPUT   - THE HEB ELEMENTS FOR THE CMB ENTRY ARE SAVED AND    */
*/*              CHAINED TO EITHER THE PREVIOUS SAVE HEADER OR THE   */
*/*              APPROPRIATE VCRT ENTRY FIELD.                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0653
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0653
         B     @PB00011                                            0653
BLDHEBS  DS    0H                                                  0654
*   RESPECIFY                                                      0654
*     RET RESTRICTED;                                              0654
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0655
         AL    @15,RETCONT                                         0655
         ST    @15,RETCONT                                         0655
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               0656
         ST    RET,RETSAVE-4(@15)                                  0656
*   RESPECIFY                                                      0657
*     RET UNRESTRICTED;                                            0657
*   IF VCRCLENG<LENGTH(VCRHHDR)+LENGTH(HEBHDREL) THEN/* IF NO CORE   */
         LA    @06,32                                              0658
         C     @06,VCRCLENG                                        0658
         BNH   @RF00658                                            0658
*     DO;                           /* THEN                          */
*       VCRCLENG=LENGTH(VCRHHDR)+LENGTH(HEBHDREL);/* SET MIN LENGTH  */
         ST    @06,VCRCLENG                                        0660
*       VCRCPFLP=ON;                /* INDICATE REQUEST TYPE         */
         OI    VCRCPFLP,B'10000000'                                0661
*       CALL GETCORE;               /* GET IT                        */
         BAL   @14,GETCORE                                         0662
*     END;                          /* GOT IT                        */
*                                                                  0663
*   /*****************************************************************/
*   /*                                                               */
*   /* GET AND INITIALIZE THE HEB SAVE AREA HEADER                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0664
*   IF HEBSAPTR=ZERO THEN           /* IF 1ST HEADER FOR VCRT ENTRY  */
@RF00658 SLR   @06,@06                                             0664
         CR    HEBSAPTR,@06                                        0664
         BNE   @RF00664                                            0664
*     IF VCRUPGSW=ON THEN           /* IF UPGRADE SWITCH IS SET      */
         L     @04,VCRTPTR                                         0665
         TM    VCRUPGSW(@04),B'10000000'                           0665
         BNO   @RF00665                                            0665
*       IF C2=ZERO THEN             /* CHECK FOR SPHERE BLOCK        */
         CR    C2,@06                                              0666
         BNE   @RF00666                                            0666
*         VCRSPHPT=VCRCADDR;        /* SAVE HEADER IN VCRT HEADER    */
         L     @06,VCRCADDR                                        0667
         ST    @06,VCRSPHPT(,@04)                                  0667
*       ELSE                        /* ELSE, PROCESSING UPRADE ENTRY */
*         VCRUHEBS(C1)=VCRCADDR;    /* SAVE 1ST HDR IN UPGRADE ENTRY */
         B     @RC00666                                            0668
@RF00666 L     @06,C1                                              0668
         SLA   @06,3                                               0668
         L     @04,VCRTPTR                                         0668
         L     @04,VCRUPG(,@04)                                    0668
         L     @02,VCRCADDR                                        0668
         AL    @04,@CF04232                                        0668
         ST    @02,VCRUHEBS(@06,@04)                               0668
*     ELSE                          /* IF PROCESSING OPEN ENTRY      */
*       VCRHEBS(C1)=VCRCADDR;       /* SAVE FIRST HDR IN OPEN ENTRY  */
         B     @RC00665                                            0669
@RF00665 L     @06,C1                                              0669
         SLA   @06,3                                               0669
         L     @04,VCRTPTR                                         0669
         L     @04,VCROPN(,@04)                                    0669
         L     @02,VCRCADDR                                        0669
         AL    @04,@CF04232                                        0669
         ST    @02,VCRHEBS(@06,@04)                                0669
*   ELSE                            /* IF NOT THE FIRST HEADER       */
*     VCRHNEXT=VCRCADDR;            /* CHAIN TO THE PREVIOUS HEADER  */
         B     @RC00664                                            0670
@RF00664 L     @06,VCRCADDR                                        0670
         ST    @06,VCRHNEXT(,HEBSAPTR)                             0670
*   HEBSAPTR=VCRCADDR;              /* ADDRESSIBILITY FOR THIS HDR   */
@RC00664 L     @06,VCRCADDR                                        0671
         LR    HEBSAPTR,@06                                        0671
*   VCRCADDR=VCRCADDR+LENGTH(VCRHHDR);/* POINT TO NEXT AVAIL BYTE    */
         LA    @02,8                                               0672
         ALR   @06,@02                                             0672
         ST    @06,VCRCADDR                                        0672
*   VCRCLENG=VCRCLENG-LENGTH(VCRHHDR);/* DECREMENT AVAILABLE LENGTH  */
         LCR   @02,@02                                             0673
         AL    @02,VCRCLENG                                        0673
         ST    @02,VCRCLENG                                        0673
*   IF BLDMASK(C2)=TWO THEN         /* IF CORE TO BE FREED AT RESTRT */
         SLR   @06,@06                                             0674
         IC    @06,BLDMASK-1(C2)                                   0674
         C     @06,@CF00092                                        0674
         BNE   @RF00674                                            0674
*     VCRHFREL=ON;                  /* SET RELEASE BIT ON            */
         OI    VCRHFREL(HEBSAPTR),B'01000000'                      0675
*   VCRHCID=C2;                     /* SET THE RELATIVE ENTRY NUMBER */
@RF00674 STC   C2,VCRHCID(,HEBSAPTR)                               0676
*   DO UNTIL HEBPTR=ZERO;           /* SAVE ALL THE HEADER ELEMENTS  */
@DL00677 DS    0H                                                  0678
*     IF VCRCLENG<LENGTH(HEBHDREL) THEN/* IF NOT ENOUGH CORE         */
         L     @06,VCRCLENG                                        0678
         C     @06,@CF00118                                        0678
         BNL   @RF00678                                            0678
*       DO;                         /* THEN                          */
*         VCRCLENG=LENGTH(VCRHHDR)+LENGTH(HEBHDREL);/* SET LENGTH    */
         MVC   VCRCLENG(4),@CF00381                                0680
*         VCRCPFLP=ON;              /* INDICATE REQUEST TYPE         */
         OI    VCRCPFLP,B'10000000'                                0681
*         CALL GETCORE;             /* GET THE CORE                  */
         BAL   @14,GETCORE                                         0682
*         VCRHNEXT=VCRCADDR;        /* CHAIN PREVIOUS HEADER TO NEW  */
         L     @06,VCRCADDR                                        0683
         ST    @06,VCRHNEXT(,HEBSAPTR)                             0683
*         HEBSAPTR=VCRCADDR;        /* ADDRESSIBILITY FOR NEW HEADER */
         LR    HEBSAPTR,@06                                        0684
*         VCRHFCON=ON;              /* PREV HDR A CONTINUATION HDR   */
         OI    VCRHFCON(HEBSAPTR),B'10000000'                      0685
*         VCRCADDR=VCRCADDR+LENGTH(VCRHHDR);/* PT TO NEXT AVAIL BYTE */
         LA    @02,8                                               0686
         ALR   @06,@02                                             0686
         ST    @06,VCRCADDR                                        0686
*         VCRCLENG=VCRCLENG-LENGTH(VCRHHDR);/* DECREMNT AVAIL LENGTH */
         LCR   @02,@02                                             0687
         AL    @02,VCRCLENG                                        0687
         ST    @02,VCRCLENG                                        0687
*         IF BLDMASK(C2)=TWO THEN   /* IF CORE TO BE FREED AT RESTRT */
         SLR   @06,@06                                             0688
         IC    @06,BLDMASK-1(C2)                                   0688
         C     @06,@CF00092                                        0688
         BNE   @RF00688                                            0688
*           VCRHFREL=ON;            /* SET RELEASE BIT ON            */
         OI    VCRHFREL(HEBSAPTR),B'01000000'                      0689
*         VCRHCID=C2;               /* SET THE RELATIVE ENTRY NUMBER */
@RF00688 STC   C2,VCRHCID(,HEBSAPTR)                               0690
*       END;                        /* END GETTING NEW HEADER        */
*     VCRCADDR=VCRCADDR+LENGTH(HEBHDREL);/* POINT TO NEXT AVAIL BYTE */
@RF00678 LA    @06,24                                              0692
         L     @02,VCRCADDR                                        0692
         ALR   @02,@06                                             0692
         ST    @02,VCRCADDR                                        0692
*     VCRCLENG=VCRCLENG-LENGTH(HEBHDREL);/* DECREMENT AVAIL LENGTH   */
         L     @02,VCRCLENG                                        0693
         SLR   @02,@06                                             0693
         ST    @02,VCRCLENG                                        0693
*     VCRHNENT=VCRHNENT+ONE;        /* INCREMENT COUNT OF ELEMENTS   */
         LA    @02,1                                               0694
         AH    @02,VCRHNENT(,HEBSAPTR)                             0694
         STH   @02,VCRHNENT(,HEBSAPTR)                             0694
*     VCRHENT(VCRHNENT)=HEBHDREL;   /* COPY HEB ELEMENT TO SAVE AREA */
         LR    @01,@02                                             0695
         MR    @00,@06                                             0695
         ALR   @01,HEBSAPTR                                        0695
         AL    @01,@CF04239                                        0695
         MVC   VCRHENT-8(24,@01),HEBHDREL(HEBPTR)                  0695
*     HEBPTR=HEBELCHN;              /* POINT TO NEXT HEB ELEMENT     */
         L     HEBPTR,HEBELCHN(,HEBPTR)                            0696
*   END;                            /* END OF SAVING HEB ELEMENT CHN */
@DE00677 LTR   HEBPTR,HEBPTR                                       0697
         BNZ   @DL00677                                            0697
*   RESPECIFY                                                      0698
*     RET RESTRICTED;                                              0698
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @02,RETCONT                                         0699
         LR    @15,@02                                             0699
         SLA   @15,2                                               0699
         L     RET,RETSAVE-4(@15)                                  0699
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @02,0                                               0700
         ST    @02,RETCONT                                         0700
*   RESPECIFY                                                      0701
*     RET UNRESTRICTED;                                            0701
*   END BLDHEBS;                                                   0702
@EL00011 DS    0H                                                  0702
@EF00011 DS    0H                                                  0702
@ER00011 BR    @14                                                 0702
*   END HEBSAVE;                    /*                       @ZA04230*/
@EL00010 DS    0H                                                  0703
@EF00010 DS    0H                                                  0703
@ER00010 BR    @14                                                 0703
*GETCORE:                                                          0704
*                                                                  0704
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - OBTAINS CORE FOR CHECKPOINT/RESTART CONTROL BLOCKS  */
*/*              IN THE FORMAT DESCRIBED BY THE VCRCORE STRUCTURE.   */
*/*              THE REQUESTOR MAY ASK FOR A SPECIFIC AMOUNT OF CORE */
*/*              OR FOR A NON-SPECIFIC AMOUNT WITH THE MINIMUM SIZE  */
*/*              SPECIFIED NOT TO EXCEED 4K LESS THE CORE HEADER.    */
*/*   INPUT    - SUBPOOL IN VCRCPOOL (SUBPOOL 250 OR 252 ONLY)       */
*/*              LENGTH IN VCRCLENG                                  */
*/*              REQUEST TYPE IN VCRCPFLG (SPECIFIC OR NON-SPECIFIC) */
*/*   OUTPUT   - ADDRESS OF CORE IN VCRCADDR                         */
*/*              LENGTH IN VCRCLENG                                  */
*/*              VCRCPFLG IS CLEARED                                 */
*/*              ADDRESS OF CURRENT CORE BLOCK IN CUR250C OR CUR252C */
*/*              ADDRESS OF LAST CORE BLOCK ON CHAIN IN CURCORE      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0704
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0704
GETCORE  DS    0H                                                  0705
*   RESPECIFY                                                      0705
*    (R0,                                                          0705
*     R1,                                                          0705
*     RET,                                                         0705
*     R15) RESTRICTED;                                             0705
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @02,1                                               0706
         AL    @02,RETCONT                                         0706
         ST    @02,RETCONT                                         0706
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @02,2                                               0707
         ST    RET,RETSAVE-4(@02)                                  0707
*   VCRCLENG=(VCRCLENG+SEVEN)&-DWORDLEN;/* LENGTH TO DOUBLEWORD BDY  */
         LA    @02,7                                               0708
         AL    @02,VCRCLENG                                        0708
         N     @02,@CF04232                                        0708
         ST    @02,VCRCLENG                                        0708
*   IF VCRCPOOL=USERPOOL THEN       /* IF REQUEST FOR SUBPOOL 250    */
         CLI   VCRCPOOL,250                                        0709
         BNE   @RF00709                                            0709
*     R1=CUR250C;                   /* POINT TO CURRENT 250 BLOCK    */
         L     R1,CUR250C                                          0710
*   ELSE                            /* ELSE, MUST BE 252 REQUEST     */
*     R1=CUR252C;                   /* POINT TO CURRENT 252 BLOCK    */
*                                                                  0711
         B     @RC00709                                            0711
@RF00709 L     R1,CUR252C                                          0711
*   /*****************************************************************/
*   /*                                                               */
*   /* DETERMINE IF ENOUGH CORE IS AVAILABLE TO PROCESS THE CALLERS  */
*   /* REQUEST. IF NOT, GET AND INITIALIZE A NEW CORE BLOCK.         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0712
*   IF R1=ZERO×VCRCLENA<VCRCLENG THEN/* IF CORE IS NOT AVAILABLE     */
@RC00709 LTR   R1,R1                                               0712
         BZ    @RT00712                                            0712
         L     @02,VCRCLENA(,R1)                                   0712
         C     @02,VCRCLENG                                        0712
         BNL   @RF00712                                            0712
@RT00712 DS    0H                                                  0713
*     DO;                           /* GET A NEW CORE BLOCK          */
*       IF VCRCLENG>PAGE-LENGTH(VCRCHDR) THEN/* IF LNG GT PAGE SIZE  */
         L     @02,VCRCLENG                                        0714
         C     @02,@CF04233                                        0714
         BNH   @RF00714                                            0714
*         CURLEN=VCRCLENG+LENGTH(VCRCHDR);/* GET CORE FOR LNG+HEADER */
         AL    @02,@CF00118                                        0715
         ST    @02,CURLEN                                          0715
*       ELSE                        /* IF LENGTH LESS THAN PAGE SIZE */
*         CURLEN=PAGE;              /* GET CORE FOR PAGE SIZE        */
         B     @RC00714                                            0716
@RF00714 MVC   CURLEN(4),@CF04010                                  0716
*       R0=CURLEN;                  /* LOAD GETMN REG ZERO W/ LENGTH */
@RC00714 L     R0,CURLEN                                           0717
*       RET=VCRCPOOL;               /* LOAD RETURN REG WITH SUBPOOL  */
         SLR   RET,RET                                             0718
         IC    RET,VCRCPOOL                                        0718
*       GEN(GETMAIN RC,LV=(0),SP=(RET));/* ISSUE THE GETMAIN         */
         GETMAIN RC,LV=(0),SP=(RET)
*       IF R15^=ZERO THEN           /* IF THERE WAS A GETMAIN ERROR  */
         LTR   R15,R15                                             0720
         BZ    @RF00720                                            0720
*         DO;                                                      0721
*           CKRETCD2=CHKERR08;      /* SET THE RETURN CODE           */
         L     @02,CHKWAPTR                                        0722
         MVI   CKRETCD2(@02),X'08'                                 0722
*           CKMSGCD2=CKMSG003;      /* SET THE MESSAGE CODE          */
         MVI   CKMSGCD2(@02),X'03'                                 0723
*           RETURN TO ERREXIT;      /* EXIT CHECKPOINT               */
         LA    @14,ERREXIT                                         0724
@EL00012 DS    0H                                                  0724
@EF00012 DS    0H                                                  0724
@ER00012 BR    @14                                                 0724
*         END;                                                     0725
*       IF CURCORE=ZERO THEN        /* IF THIS IS FIRST CORE BLOCK   */
@RF00720 L     @02,CURCORE                                         0726
         LTR   @02,@02                                             0726
         BNZ   @RF00726                                            0726
*         VCRCHEAD=R1;              /* POINT TO IT - HEAD OF CHAIN   */
         ST    R1,VCRCHEAD                                         0727
*       ELSE                        /* IF NOT FIRST,                 */
*         CURCORE->VCRCNEXT=R1;     /* CHAIN TO THE PREVIOUS BLOCK   */
         B     @RC00726                                            0728
@RF00726 L     @02,CURCORE                                         0728
         ST    R1,VCRCNEXT(,@02)                                   0728
*       CURCORE=R1;                 /* MAINTAIN PTR TO CURRENT BLOCK */
@RC00726 ST    R1,CURCORE                                          0729
*       R0=R1;                      /* LOAD R0 AS RECEIVER FOR MVCL  */
         LR    R0,R1                                               0730
*       R1=CURLEN;                  /* LOAD R1 WITH LENGTH OF MOVE   */
         L     R1,CURLEN                                           0731
*       MVCL(R0,RET);               /* R15 IS ZERO, SO PAD WITH ZERO */
         MVCL  R0,RET                                              0732
*       RESPECIFY                                                  0733
*        (R0,                                                      0733
*         RET,                                                     0733
*         R15) UNRESTRICTED;                                       0733
*                                                                  0733
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE THE VCRCORE HEADER                             */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0734
*       R1=CURCORE;                 /* VCRCORE ADDRESSIBILITY        */
         L     R1,CURCORE                                          0734
*       VCRCNM=VCRCNAME;            /* SET VCRCORE NAME IN HEADER    */
         MVC   VCRCNM(8,R1),@CC03178                               0735
*       VCRCSP=VCRCPOOL;            /* SET VCRCORE SUBPOOL IN HEADER */
         IC    @02,VCRCPOOL                                        0736
         STC   @02,VCRCSP(,R1)                                     0736
*       VCRCLEN=CURLEN;             /* SET VCRCORE LENGTH IN HEADER  */
         L     @02,CURLEN                                          0737
         STCM  @02,7,VCRCLEN(R1)                                   0737
*       VCRCPTRA=ADDR(VCRCDATA);    /* SET PTR TO 1ST AVAILABLE BYTE */
         LA    @00,VCRCDATA(,R1)                                   0738
         ST    @00,VCRCPTRA(,R1)                                   0738
*       VCRCLENA=CURLEN-LENGTH(VCRCHDR);/* SET AVAILABLE LENGTH      */
         SL    @02,@CF00118                                        0739
         ST    @02,VCRCLENA(,R1)                                   0739
*       IF VCRCPOOL=USERPOOL THEN   /* IF THE SUBPOOL IS 250         */
         CLI   VCRCPOOL,250                                        0740
         BNE   @RF00740                                            0740
*         CUR250C=ADDR(VCRCORE);    /* UPDATE THE PTR IN CUR250C     */
         ST    R1,CUR250C                                          0741
*       ELSE                        /* IF IT IS SUBPOOL 252          */
*         CUR252C=ADDR(VCRCORE);    /* UPDATE THE PTR IN CUR252C     */
         B     @RC00740                                            0742
@RF00740 ST    R1,CUR252C                                          0742
*     END;                                                         0743
*                                                                  0743
@RC00740 DS    0H                                                  0744
*   /*****************************************************************/
*   /*                                                               */
*   /* CORE IS AVAILABLE, SO PROCESS CALLERS REQUEST                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0744
*   IF VCRCPFLP=ON THEN             /* IF REQUEST IS FOR MAX LENGTH  */
@RF00712 TM    VCRCPFLP,B'10000000'                                0744
         BNO   @RF00744                                            0744
*     DO;                                                          0745
*       VCRCADDR=VCRCPTRA;          /* POINT TO FIRST AVAILABLE BYTE */
         L     @02,VCRCPTRA(,R1)                                   0746
         ST    @02,VCRCADDR                                        0746
*       VCRCPTRA=VCRCPTRA+VCRCLENA; /* UPDATE NEXT BYTE POINTER      */
         L     @15,VCRCLENA(,R1)                                   0747
         ALR   @02,@15                                             0747
         ST    @02,VCRCPTRA(,R1)                                   0747
*       VCRCLENG=VCRCLENA;          /* PASS BACK THE LENGTH AND      */
         ST    @15,VCRCLENG                                        0748
*       VCRCLENA=ZERO;              /* ZERO THE AVAILABLE LENGTH FLD */
         SLR   @02,@02                                             0749
         ST    @02,VCRCLENA(,R1)                                   0749
*     END;                                                         0750
*   ELSE                            /* IF EXACT LENGTH REQUESTED     */
*     DO;                                                          0751
         B     @RC00744                                            0751
@RF00744 DS    0H                                                  0752
*       VCRCADDR=VCRCPTRA;          /* GET THE ADDRESS OF NEXT BYTE  */
         L     @02,VCRCPTRA(,R1)                                   0752
         ST    @02,VCRCADDR                                        0752
*       VCRCPTRA=VCRCPTRA+VCRCLENG; /* UPDATE POINTER TO NEXT BYTE   */
         L     @15,VCRCLENG                                        0753
         ALR   @02,@15                                             0753
         ST    @02,VCRCPTRA(,R1)                                   0753
*       VCRCLENA=VCRCLENA-VCRCLENG; /* DECREASE AVAILABLE LENGTH     */
         LCR   @15,@15                                             0754
         AL    @15,VCRCLENA(,R1)                                   0754
         ST    @15,VCRCLENA(,R1)                                   0754
*     END;                                                         0755
*   VCRCPFLG=ZERO;                  /* CLEAR GETCORE FLAG BYTE       */
@RC00744 MVI   VCRCPFLG,X'00'                                      0756
*   RESPECIFY                                                      0757
*     RET RESTRICTED;                                              0757
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @02,RETCONT                                         0758
         LR    @15,@02                                             0758
         SLA   @15,2                                               0758
         L     RET,RETSAVE-4(@15)                                  0758
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @02,0                                               0759
         ST    @02,RETCONT                                         0759
*   RESPECIFY                                                      0760
*    (R1,                                                          0760
*     RET) UNRESTRICTED;                                           0760
*   END GETCORE;                                                   0761
         B     @EL00012                                            0761
*SAVEBUF:                                                          0762
*                                                                  0762
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - OBTAINS CORE FOR A BUFFER SAVE AREA AFTER           */
*/*              DETERMINING THE LARGEST BUFFER SIZE REQUIRED.       */
*/*   INPUT    - POINTER TO THE FIRST PRIMARY AMBL IN PAMBLPTR       */
*/*   OUTPUT   - ADDRESS OF CORE IN SAVEBUFP                         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0762
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0762
SAVEBUF  DS    0H                                                  0763
*   RESPECIFY                                                      0763
*     RET RESTRICTED;                                              0763
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0764
         AL    @15,RETCONT                                         0764
         ST    @15,RETCONT                                         0764
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               0765
         ST    RET,RETSAVE-4(@15)                                  0765
*   RESPECIFY                                                      0766
*     RET UNRESTRICTED;                                            0766
*   AMBLPTR=PAMBLPTR;               /* ADDRESSIBILITY TO THE AMBL    */
         L     @02,PAMBLPTR                                        0767
         ST    @02,AMBLPTR                                         0767
*   VCRCLENG=ZERO;                  /* INITIALIZE THE LENGTH FIELD   */
         SLR   @02,@02                                             0768
         ST    @02,VCRCLENG                                        0768
*   DO UNTIL AMBLPTR=ZERO;          /* LOOP THROUGH ALL PRIMARIES    */
@DL00769 DS    0H                                                  0770
*     AMBPTR=AMBLDTA;               /* POINT TO THE DATA AMB         */
         L     @02,AMBLPTR                                         0770
         L     @15,AMBLDTA(,@02)                                   0770
         ST    @15,AMBPTR                                          0770
*     IF BIBUPT=ZERO THEN           /* IF UPGRADE PATH IS NOT OPEN   */
         L     @01,AMBLBIB(,@02)                                   0771
         L     @14,BIBUPT(,@01)                                    0771
         LTR   @14,@14                                             0771
         BNZ   @RF00771                                            0771
*       IF AMBCREAT=ON THEN         /* AND THIS IS CREATE MODE       */
         TM    AMBCREAT(@15),B'10000000'                           0772
         BNO   @RF00772                                            0772
*         IF AMDDST=ON THEN         /* FOR A KSDS THEN               */
         L     @01,AMBDSB(,@15)                                    0773
         TM    AMDDST(@01),B'10000000'                             0773
         BNO   @RF00773                                            0773
*           AMBPTR=AMBLIX;          /* POINT TO THE INDEX AMB        */
         L     @02,AMBLIX(,@02)                                    0774
         ST    @02,AMBPTR                                          0774
*         ELSE                      /* IF NOT A KSDS                 */
*           AMBPTR=ZERO;            /* ZERO THE AMB POINTER          */
         B     @RC00773                                            0775
@RF00773 SLR   @02,@02                                             0775
         ST    @02,AMBPTR                                          0775
*       ELSE                        /* IF NOT CREATE MODE            */
*         IF AMDDST=ON THEN         /* AND THIS IS IS A KSDS         */
         B     @RC00772                                            0776
@RF00772 L     @02,AMBPTR                                          0776
         L     @02,AMBDSB(,@02)                                    0776
         TM    AMDDST(@02),B'10000000'                             0776
         BNO   @RF00776                                            0776
*           AMBPTR=ZERO;            /* THEN ZERO THE AMB POINTER     */
         SLR   @02,@02                                             0777
         ST    @02,AMBPTR                                          0777
*         ELSE                                                     0778
*           ;                       /* NOT A KSDS                    */
@RF00776 DS    0H                                                  0779
*     ELSE                          /* IF AN UPGRADE IS OPEN         */
*       AMBPTR=ZERO;                /* THEN ZERO THE AMB POINTER     */
         B     @RC00771                                            0779
@RF00771 SLR   @02,@02                                             0779
         ST    @02,AMBPTR                                          0779
*     IF AMBPTR^=ZERO THEN          /* IF THE AMBPTR IS NOT ZERO     */
@RC00771 L     @02,AMBPTR                                          0780
         LTR   @02,@02                                             0780
         BZ    @RF00780                                            0780
*       VCRCLENG=MAX(VCRCLENG,AMDCINV);/* THEN SET THE LENGTH        */
         L     @02,AMBDSB(,@02)                                    0781
         L     @15,VCRCLENG                                        0781
         L     @02,AMDCINV(,@02)                                   0781
         CR    @15,@02                                             0781
         BNL   *+6
         LR    @15,@02                                             0781
         ST    @15,VCRCLENG                                        0781
*     AMBLPTR=AMBLPCHN;             /* POINT TO NEXT PRIMARY AMBL    */
@RF00780 L     @02,AMBLPTR                                         0782
         L     @02,AMBLPCHN(,@02)                                  0782
         ST    @02,AMBLPTR                                         0782
*   END;                            /* END OF PRIMARY AMBL LOOP      */
@DE00769 SLR   @02,@02                                             0783
         C     @02,AMBLPTR                                         0783
         BNE   @DL00769                                            0783
*   IF VCRCLENG^=ZERO THEN          /* IF A SAVE AREA IS NEEDED      */
         C     @02,VCRCLENG                                        0784
         BE    @RF00784                                            0784
*     DO;                           /* THEN                          */
*       VCRCPFEL=ON;                /* EXACT LENGTH REQUEST          */
         OI    VCRCPFEL,B'01000000'                                0786
*       VCRCPOOL=WKPOOL;            /* WORK SUBPOOL - 252            */
         MVI   VCRCPOOL,X'FC'                                      0787
*       CALL GETCORE;               /* GET THE SAVE AREA             */
         BAL   @14,GETCORE                                         0788
*       SAVEBUFP=VCRCADDR;          /* SAVE THE POINTER TO IT        */
         L     @02,VCRCADDR                                        0789
         ST    @02,SAVEBUFP                                        0789
*     END;                                                         0790
*   RESPECIFY                                                      0791
*     RET RESTRICTED;                                              0791
@RF00784 DS    0H                                                  0792
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @02,RETCONT                                         0792
         LR    @15,@02                                             0792
         SLA   @15,2                                               0792
         L     RET,RETSAVE-4(@15)                                  0792
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @02,0                                               0793
         ST    @02,RETCONT                                         0793
*   RESPECIFY                                                      0794
*     RET UNRESTRICTED;                                            0794
*   END SAVEBUF;                                                   0795
@EL00013 DS    0H                                                  0795
@EF00013 DS    0H                                                  0795
@ER00013 BR    @14                                                 0795
*IOSAVE:                                                           0796
*                                                                  0796
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - SAVES THE STATUS OF THE USERS CONTROL BLOCKS BEFORE */
*/*              ANY I/O IS DONE AND INITIALIZES FOR CI PROCESSING.  */
*/*   INPUT    - POINTER TO THE AMBL IN AMBLPTR                      */
*/*              POINTER TO THE AMB IN AMBPTR                        */
*/*   OUTPUT   - CONTROL BLOCKS ARE SAVED                            */
*/*                                                                  */
*/********************************************************************/
*                                                                  0796
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0796
IOSAVE   DS    0H                                                  0797
*   RESPECIFY                                                      0797
*    (R0,                                                          0797
*     R1,                                                          0797
*     RET,                                                         0797
*     R15) RESTRICTED;                                             0797
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @02,1                                               0798
         AL    @02,RETCONT                                         0798
         ST    @02,RETCONT                                         0798
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @02,2                                               0799
         ST    RET,RETSAVE-4(@02)                                  0799
*   IF ADDR(SAVEBUFR)=ZERO THEN     /* IF NO BUFFER SAVE AREA        */
         L     @02,SAVEBUFP                                        0800
         LTR   @02,@02                                             0800
         BNZ   @RF00800                                            0800
*     DO;                           /* THEN                          */
*       CKMSGCD2=CKMSG042;          /* REPOSITIONING ERROR           */
         L     @02,CHKWAPTR                                        0802
         MVI   CKMSGCD2(@02),X'2A'                                 0802
*       CKRETCD2=CHKERR08;          /* ENVIRONMENTAL ERROR           */
         MVI   CKRETCD2(@02),X'08'                                 0803
*       RETURN TO ERREXIT;          /* EXIT                          */
         LA    @14,ERREXIT                                         0804
@EL00014 DS    0H                                                  0804
@EF00014 DS    0H                                                  0804
@ER00014 BR    @14                                                 0804
*     END;                                                         0805
*                                                                  0805
*   /*****************************************************************/
*   /*                                                               */
*   /* SAVE STATUS OF USERS CONTROL BLOCKS BEFORE USING              */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0806
*   R0=ADDR(SAVEPLH);               /* POINT TO PLH SAVE AREA        */
@RF00800 LA    R0,SAVEPLH                                          0806
*   R1=LENGTH(IDAPLH);              /* GET THE LENGTH OF THE PLH     */
         LA    R1,280                                              0807
*   RET=ADDR(IDAPLH);               /* POINT TO THE PLH              */
         LA    RET,16                                              0808
         L     @02,AMBPTR                                          0808
         AL    RET,AMBPH(,@02)                                     0808
*   R15=R1;                         /* SET THE MOVE FROM LENGTH      */
         LR    R15,R1                                              0809
*   MVCL(R0,RET);                   /* SAVE THE USERS PLH            */
         MVCL  R0,RET                                              0810
*   R0=ADDR(SAVEBUFR);              /* POINT TO THE BUFFER SAVE AREA */
         L     R0,SAVEBUFP                                         0811
*   R1=AMDCINV;                     /* GET THE CI LENGTH             */
         L     @02,AMBPTR                                          0812
         L     @11,AMBDSB(,@02)                                    0812
         L     R1,AMDCINV(,@11)                                    0812
*   RET=BUFCBAD;                    /* POINT TO THE USERS BUFFER     */
         L     @02,AMBBUFC(,@02)                                   0813
         L     @02,BUFDBUFC(,@02)                                  0813
         L     RET,BUFCBAD(,@02)                                   0813
*   R15=R1;                         /* SET THE MOVE FROM LENGTH      */
         LR    R15,R1                                              0814
*   MVCL(R0,RET);                   /* SAVE THE USERS BUFFER         */
         MVCL  R0,RET                                              0815
*   RESPECIFY                                                      0816
*    (R0,                                                          0816
*     R1,                                                          0816
*     RET,                                                         0816
*     R15) UNRESTRICTED;                                           0816
*   SAVEBUFC=IDABUFC;               /* SAVE THE USERS BUFC           */
         L     @02,AMBPTR                                          0817
         L     @01,AMBBUFC(,@02)                                   0817
         L     @15,BUFDBUFC(,@01)                                  0817
         MVC   SAVEBUFC(64),IDABUFC(@15)                           0817
*   SAVEFLG1=AMBLFLG1;              /* SAVE THE AMBL FLAGS           */
         L     @14,AMBLPTR                                         0818
         MVC   SAVEFLG1(1),AMBLFLG1(@14)                           0818
*   SAVFLG1=AMBFLG1;                /* SAVE THE DATA AMB FLAGS       */
         MVC   SAVFLG1(1),AMBFLG1(@02)                             0819
*   SAVEEXEX=AMBEXEX;               /* SAVE EXCEPTION EXIT FIELD     */
         MVC   SAVEEXEX(8),AMBEXEX(@02)                            0820
*   SAVEXLST=ACBEXLST;              /* SAVE THE ACB EXIT LIST FIELD  */
         L     @11,AMBLACB(,@14)                                   0821
         L     @10,ACBEXLST(,@11)                                  0821
         ST    @10,SAVEXLST                                        0821
*   PFSAVEIO=ON;                    /* INDICATE I/O BLOCKS SAVED     */
         OI    PFSAVEIO,B'10000000'                                0822
*                                                                  0823
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE CONTROL BLOCKS FOR A CONTROL INTERVAL REQUEST      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0823
*   ACBEXLST=ZERO;                  /* NO ACB EXIT LIST              */
         SLR   @10,@10                                             0823
         ST    @10,ACBEXLST(,@11)                                  0823
*   AMBEXEX=AMBEXEX&&AMBEXEX;       /* CLEAR EXCEPTION EXIT FIELD    */
         XC    AMBEXEX(8,@02),AMBEXEX(@02)                         0824
*   AMBCREAT=OFF;                   /* SET CREATE BIT OFF IN AMB     */
         NI    AMBCREAT(@02),B'01111111'                           0825
*   AMBLCINV=ON;                    /* SET CINV PROCESSING ON        */
         OI    AMBLCINV(@14),B'01000000'                           0826
*   PLHFLG1=ZERO;                   /* CLEAR PLH FLAG 1              */
         LA    @14,16                                              0827
         AL    @14,AMBPH(,@02)                                     0827
         MVI   PLHFLG1(@14),X'00'                                  0827
*   PLHFLG2=ZERO;                   /* CLEAR PLH FLAG                */
         MVI   PLHFLG2(@14),X'00'                                  0828
*   PLHEFLGS=ZERO;                  /* CLEAR PLH FLAGS FLD           */
         STH   @10,PLHEFLGS(,@14)                                  0829
*   PLH1ST=ON;                      /* SET PLH 1ST                   */
         OI    PLH1ST(@14),B'01000000'                             0830
*   PLHMRPL=ZERO;                   /* CLEAR HEADER RPL ADR          */
         ST    @10,PLHMRPL(,@14)                                   0831
*   PLHCRPL=ZERO;                   /* CLEAR CURR RPL ADR            */
         ST    @10,PLHCRPL(,@14)                                   0832
*   PLHAVL=ZERO;                    /* MAKE ENTRY AVAILABLE          */
         MVI   PLHAVL(@14),X'00'                                   0833
*   PLHCHAIN=ZERO;                  /* DON'T CHAIN TO NEXT PLH       */
         ST    @10,PLHCHAIN(,@14)                                  0834
*   PLHBFRNO=ONE;                   /* ONE BUFFER FOR CHECKPOINT I/O */
         MVI   PLHBFRNO(@14),X'01'                                 0835
*   PLHDBUFC=ADDR(IDABUFC);         /* 1ST PLH PNTS TO DATA BUFC     */
         ST    @15,PLHDBUFC(,@14)                                  0836
*   PLHIBUFC=ADDR(IDABUFC);         /* 1ST PLH PNTS TO INDEX BUFC    */
         ST    @15,PLHIBUFC(,@14)                                  0837
*   PLHNBUFC=PLHDBUFC;              /* 1ST PLH PNTS TO BUFC          */
         ST    @15,PLHNBUFC(,@14)                                  0838
*   BUFCMW=OFF;                     /* TURN OFF MUST-WRITE BIT       */
         NI    BUFCMW(@15),B'01111111'                             0839
*   BUFCPLH=ADDR(IDAPLH);           /* 1ST BUFC PNTS TO PLH          */
         ST    @14,BUFCPLH(,@15)                                   0840
*   BUFCNXT1=ADDR(IDABUFC);         /* THIS IS THE ONLY BUFC         */
         ST    @15,BUFCNXT1(,@15)                                  0841
*   BUFCNXT2=ADDR(IDABUFC);         /* THIS IS THE ONLY LOGICAL BUFC */
         STCM  @15,7,BUFCNXT2(@15)                                 0842
*   BUFCHAIN=ZERO;                  /* THIS IS THE LAST BUFC         */
         ST    @10,BUFCHAIN(,@15)                                  0843
*   IFGRPL=IFGRPL&&IFGRPL;          /* CLEAR RPL                     */
         LA    @10,72                                              0844
         AL    @10,MWASP250                                        0844
         XC    IFGRPL(76,@10),IFGRPL(@10)                          0844
*   RPLDACB=AMBLACB;                /* DATA ACB PTR                  */
         ST    @11,RPLDACB(,@10)                                   0845
*   RPLCNV=ON;                      /* SET CONTROL INTERVAL ON       */
         OI    RPLCNV(@10),B'00100000'                             0846
*   RPLDIR=ON;                      /* SET DIRECT MODE               */
         OI    RPLDIR(@10),B'01000000'                             0847
*   RPLBUFL=AMDCINV;                /* SET RPL BUFFER LENGTH         */
         L     @02,AMBDSB(,@02)                                    0848
         L     @02,AMDCINV(,@02)                                   0848
         ST    @02,RPLBUFL(,@10)                                   0848
*   RESPECIFY                                                      0849
*     RET RESTRICTED;                                              0849
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @02,RETCONT                                         0850
         LR    @15,@02                                             0850
         SLA   @15,2                                               0850
         L     RET,RETSAVE-4(@15)                                  0850
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @02,0                                               0851
         ST    @02,RETCONT                                         0851
*   RESPECIFY                                                      0852
*     RET UNRESTRICTED;                                            0852
*   END IOSAVE;                                                    0853
         B     @EL00014                                            0853
*IORESTOR:                                                         0854
*                                                                  0854
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - RESTORES THE USER CONTROL BLOCKS AFTER ANY I/O      */
*/*   INPUT    - POINTER TO THE AMBL IN AMBLPTR                      */
*/*              POINTER TO THE AMB IN AMBPTR                        */
*/*   OUTPUT   - CONTROL BLOCKS ARE RESTORED                         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0854
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0854
IORESTOR DS    0H                                                  0855
*   RESPECIFY                                                      0855
*    (R0,                                                          0855
*     R1,                                                          0855
*     RET,                                                         0855
*     R15) RESTRICTED;                                             0855
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @02,1                                               0856
         AL    @02,RETCONT                                         0856
         ST    @02,RETCONT                                         0856
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
*                                                                  0857
         SLA   @02,2                                               0857
         ST    RET,RETSAVE-4(@02)                                  0857
*   /*****************************************************************/
*   /*                                                               */
*   /* RESTORE THE USER CONTROL BLOCKS                               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0858
*   R0=ADDR(SAVEPLH);               /* POINT TO PLH SAVE AREA        */
         LA    R0,SAVEPLH                                          0858
*   R1=LENGTH(IDAPLH);              /* GET THE LENGTH OF THE PLH     */
         LA    R1,280                                              0859
*   RET=ADDR(IDAPLH);               /* POINT TO THE PLH              */
         LA    RET,16                                              0860
         L     @02,AMBPTR                                          0860
         AL    RET,AMBPH(,@02)                                     0860
*   R15=R1;                         /* SET THE MOVE TO LENGTH        */
         LR    R15,R1                                              0861
*   MVCL(RET,R0);                   /* RESTORE THE USERS PLH         */
         MVCL  RET,R0                                              0862
*   R0=ADDR(SAVEBUFR);              /* POINT TO THE BUFFER SAVE AREA */
         L     R0,SAVEBUFP                                         0863
*   R1=AMDCINV;                     /* GET THE CI LENGTH             */
         L     @02,AMBPTR                                          0864
         L     @11,AMBDSB(,@02)                                    0864
         L     R1,AMDCINV(,@11)                                    0864
*   RET=BUFCBAD;                    /* POINT TO THE USERS BUFFER     */
         L     @02,AMBBUFC(,@02)                                   0865
         L     @02,BUFDBUFC(,@02)                                  0865
         L     RET,BUFCBAD(,@02)                                   0865
*   R15=R1;                         /* SET THE MOVE TO LENGTH        */
         LR    R15,R1                                              0866
*   MVCL(RET,R0);                   /* RESTORE THE USERS BUFFER      */
         MVCL  RET,R0                                              0867
*   RESPECIFY                                                      0868
*    (R0,                                                          0868
*     R1,                                                          0868
*     RET,                                                         0868
*     R15) UNRESTRICTED;                                           0868
*   IDABUFC=SAVEBUFC;               /* RESTORE THE USERS BUFC        */
         L     @02,AMBPTR                                          0869
         L     @01,AMBBUFC(,@02)                                   0869
         L     @01,BUFDBUFC(,@01)                                  0869
         MVC   IDABUFC(64,@01),SAVEBUFC                            0869
*   AMBLFLG1=SAVEFLG1;              /* RESTORE THE AMBL FLAGS        */
         L     @15,AMBLPTR                                         0870
         MVC   AMBLFLG1(1,@15),SAVEFLG1                            0870
*   AMBFLG1=SAVFLG1;                /* RESTORE THE DATA AMB FLAGS    */
         MVC   AMBFLG1(1,@02),SAVFLG1                              0871
*   AMBEXEX=SAVEEXEX;               /* RESTORE EXCEPTION EXIT FIELD  */
         MVC   AMBEXEX(8,@02),SAVEEXEX                             0872
*   ACBEXLST=SAVEXLST;              /* RESTORE THE ACB EXIT LIST FLD */
         L     @02,AMBLACB(,@15)                                   0873
         L     @15,SAVEXLST                                        0873
         ST    @15,ACBEXLST(,@02)                                  0873
*   PFSAVEIO=OFF;                   /* INDICATE I/O BLOCKS RESTORED  */
         NI    PFSAVEIO,B'01111111'                                0874
*   RESPECIFY                                                      0875
*     RET RESTRICTED;                                              0875
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @02,RETCONT                                         0876
         LR    @15,@02                                             0876
         SLA   @15,2                                               0876
         L     RET,RETSAVE-4(@15)                                  0876
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @02,0                                               0877
         ST    @02,RETCONT                                         0877
*   RESPECIFY                                                      0878
*     RET UNRESTRICTED;                                            0878
*   END IORESTOR;                                                  0879
@EL00015 DS    0H                                                  0879
@EF00015 DS    0H                                                  0879
@ER00015 BR    @14                                                 0879
@PB00015 DS    0H                                                  0879
*   END IDA0C06C                                                   0880
*                                                                  0880
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (LCGPLSSW)                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBXN)                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IDABIB  )                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IEEVCHWA)                                       */
*/*%INCLUDE SYSLIB  (IDACMB  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IDAHEB  )                                       */
*/*%INCLUDE SYSLIB  (IDAICWA )                                       */
*/*%INCLUDE SYSLIB  (IDAIDXCB)                                       */
*/*%INCLUDE SYSLIB  (IEZJSCB )                                       */
*/*%INCLUDE SYSLIB  (IDAERRCD)                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IKJRB   )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IDAUPT  )                                       */
*/*%INCLUDE SYSLIB  (IDAVAT  )                                       */
*/*%INCLUDE SYSLIB  (IDAVCRT )                                       */
*/*%INCLUDE SYSLIB  (IDAFOREC)                                       */
*/*%INCLUDE SYSLIB  (IECDSECT)                                       */
*/*%INCLUDE SYSLIB  (IECDSECS)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBX)                                       */
*/*%INCLUDE SYSLIB  (IDAPDPRM)                                       */
*/*%INCLUDE SYSLIB  (IDARTMAC)                                       */
*/*%INCLUDE SYSLIB  (IDAOCECN)                                       */
*/*%INCLUDE SYSLIB  (IDAGMAIN)                                       */
*                                                                  0880
*       ;                                                          0880
@DATA    DS    0H
@CH00033 DC    H'12'
@DATD    DSECT
         DS    0F
@SA00001 DS    23F
@TF00001 DS    F
IDA0C06C CSECT
         DS    0F
@CF00053 DC    F'1'
@CF00092 DC    F'2'
@CF02636 DC    F'14'
@CF00118 DC    F'24'
@CF00381 DC    F'32'
@CF02254 DC    F'48'
@CF01661 DC    F'100'
@CF01679 DC    F'152'
@CF04233 DC    F'4072'
@CF04010 DC    F'4096'
@CF04239 DC    F'-16'
@CF04232 DC    F'-8'
@CF04237 DC    F'-4'
@DATD    DSECT
         DS    0D
VCRTPTR  DS    A
AMBPTR   DS    A
AMBLPTR  DS    A
CHKWAPTR DS    A
CINVRBA  DS    F
C1       DS    F
MWASP250 DS    A
PAMBLPTR DS    A
SAVBASEB DS    A
SAVEBUFP DS    A
SAVEXLST DS    A
MWACLPRM DS    AL4
         ORG   MWACLPRM
MWACLFLG DS    BL1
         ORG   MWACLFLG
MWALASTE DS    BL1
         ORG   MWACLPRM+4
BLDMASK  DS    CL16
PFLAGS   DS    BL1
         ORG   PFLAGS
PFSAVEIO DS    BL1
         ORG   PFLAGS+1
         DS    CL3
RETREGS  DS    CL36
         ORG   RETREGS
RETCONT  DS    FL4
RETSAVE  DS    8A
         ORG   RETREGS+36
SAVEBUFC DS    CL64
SAVEEXEX DS    CL8
SAVEFLG1 DS    BL1
         DS    CL3
SAVEPLH  DS    CL280
SAVFLG1  DS    BL1
         DS    CL3
COREPTRS DS    CL30
         ORG   COREPTRS
CURCORE  DS    AL4
CURLEN   DS    FL4
CUR252C  DS    AL4
CUR250C  DS    AL4
VCRCLENG DS    FL4
VCRCADDR DS    AL4
VCRCHEAD DS    AL4
VCRCPARM DS    CL2
         ORG   VCRCPARM
VCRCPOOL DS    FL1
VCRCPFLG DS    BL1
         ORG   VCRCPFLG
VCRCPFLP DS    BL1
VCRCPFEL EQU   VCRCPFLG+0
         ORG   COREPTRS+30
         DS    CL2
MWAFREMN DS    CL8
         ORG   MWAFREMN
MWASP    DS    FL1
MWALEN   DS    FL3
MWAPTR   DS    AL4
         ORG   MWAFREMN+8
MWAFCORE DS    CL612
IDA0C06C CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV04136 DC    V(IDACI96C)
         DS    0D
@CC03176 DC    C'IDAVCRT '
@CC03178 DC    C'VCRCORE '
@CC03962 DC    C'C06C'
IDA0C06C CSECT
         EXTRN IDACKRA1                  ESTAE EXIT ROUTINE
ESTAEPRM ESTAE IDACKRA1,RECORD=YES,MF=L  GENERATE SKELETON ESTAE LIST
IDA0C06C CSECT
         DS    0D                   START ON DOUBLE WORD BOUNDARY
PTCHC06C DC    ((*-IDA0C06C)/20)X'00' PATCH AREA
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA0C06C CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
ICWAPTR  EQU   @04
HEBSAPTR EQU   @04
HEBPTR   EQU   @07
ENTRYCNT EQU   @06
C2       EQU   @05
RCORE    EQU   @04
R0       EQU   @00
R1       EQU   @01
RACB     EQU   @02
RBASEA   EQU   @03
RBASEB   EQU   @12
R12      EQU   @12
R13      EQU   @13
R4       EQU   @04
R11      EQU   @11
RET      EQU   @14
RETCODE  EQU   @15
R15      EQU   @15
RDEB     EQU   @11
RTIOT    EQU   @09
RUCB     EQU   @10
R10      EQU   @10
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
R9       EQU   @09
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
ABSLOC   EQU   0
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBERFLG EQU   ACBCOMN+49
ACBINFLG EQU   ACBCOMN+50
ACBINFL1 EQU   ACBINFLG
ACBVVIC  EQU   ACBINFL1
ACBINFL2 EQU   ACBINFLG+1
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMB   EQU   0
AMBBUFC  EQU   IDAAMB+8
AMBPH    EQU   IDAAMB+12
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBCREAT EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBPUG   EQU   AMBFLG2
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBEXEX  EQU   IDAAMB+100
IDAAMBXN EQU   0
AMBXEOV  EQU   IDAAMBXN
AMBXCSWD EQU   IDAAMBXN+16
IDAIOMBX EQU   0
IOMXFLGS EQU   IDAIOMBX+1
IOMXPDET EQU   IDAIOMBX+4
IOMXRECB EQU   IDAIOMBX+20
IOMXECB  EQU   IOMXRECB
IOMXRSLT EQU   IOMXECB
IDAAMBL  EQU   0
AMBLPCHN EQU   IDAAMBL
AMBLSCHN EQU   IDAAMBL+4
AMBLACB  EQU   IDAAMBL+8
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLGSR  EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLXPT  EQU   IDAAMBL+24
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLPATH EQU   AMBLTYPE
AMBLQ2   EQU   IDAAMBL+31
AMBLCBIC EQU   AMBLQ2
AMBLSHAR EQU   IDAAMBL+33
AMBLPRIM EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLFLG1 EQU   IDAAMBL+35
AMBLCINV EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
AMBLBIB  EQU   IDAAMBL+60
AMBLCMB  EQU   IDAAMBL+64
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDDST   EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDNEST  EQU   IDAAMDSB+4
AMDCINV  EQU   IDAAMDSB+20
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDPARDB EQU   IDAAMDSB+36
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDHRBA  EQU   IDAARDB+12
ARDPRF   EQU   IDAARDB+28
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBRSM  EQU   ASCB+52
ASCBRSMF EQU   ASCBRSM
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
IDABIB   EQU   0
BIBHDR   EQU   IDABIB
BIBFLG1  EQU   BIBHDR+1
BIBCKPT  EQU   BIBFLG1
BIBUPT   EQU   IDABIB+8
BIBSPHPT EQU   IDABIB+24
BIBVCRT  EQU   IDABIB+40
BIBRTNS  EQU   IDABIB+60
BIBINTRF EQU   BIBRTNS
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
BUFDBUFC EQU   IDABUFDR+12
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCBAD  EQU   IDABUFC+20
BUFCNXT1 EQU   IDABUFC+24
BUFCINV  EQU   IDABUFC+28
BUFCNXT2 EQU   IDABUFC+37
BUFCHAIN EQU   IDABUFC+48
CHKWA    EQU   0
CKRETCOD EQU   CHKWA+44
CKRETCD2 EQU   CKRETCOD+1
CKMSGCOD EQU   CHKWA+46
CKMSGCD1 EQU   CKMSGCOD
CKMSGCD2 EQU   CKMSGCOD+1
CKDECB1  EQU   CHKWA+52
XCTLNAME EQU   CKDECB1
CKDCBAD1 EQU   CKDECB1+8
CKDECB2  EQU   CHKWA+72
IDACMB   EQU   0
CMBFLGS  EQU   IDACMB+4
CMBPTRS  EQU   IDACMB+8
CMBFSTPT EQU   CMBPTRS+16
CMBUFSPT EQU   CMBPTRS+20
CMBDEBPT EQU   CMBPTRS+32
CMBEDBPT EQU   CMBPTRS+36
CMBFXDPT EQU   CMBPTRS+48
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
HEBHDREL EQU   0
HEBFREMN EQU   HEBHDREL
HEBFLAGS EQU   HEBHDREL+8
HEBELCHN EQU   HEBHDREL+12
@NM00050 EQU   HEBHDREL+20
IDAHEB   EQU   0
IDAICWA  EQU   0
ICWFLG1  EQU   IDAICWA+1
ICWCHN   EQU   IDAICWA+4
ICWCRBA  EQU   IDAICWA+12
ICWLN    EQU   IDAICWA+40
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBSHR  EQU   JSCBSEC1+8
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBEND1 EQU   IEZJSCB+260
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHAVL   EQU   IDAPLH
PLHFLG1  EQU   IDAPLH+2
PLHFLG2  EQU   IDAPLH+3
PLHEFLGS EQU   IDAPLH+4
PLH1ST   EQU   PLHEFLGS
PLHFLG3  EQU   IDAPLH+6
PLHAFLGS EQU   IDAPLH+7
PLHDRLM  EQU   PLHAFLGS
PLHBFRNO EQU   IDAPLH+15
PLHMRPL  EQU   IDAPLH+16
PLHCRPL  EQU   IDAPLH+20
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHDBUFC EQU   IDAPLH+52
PLHNBUFC EQU   IDAPLH+56
PLHDIOB  EQU   IDAPLH+76
PLHCHAIN EQU   IDAPLH+112
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHIBUFC EQU   IDAPLH+188
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHKEYPT EQU   IDAPLH+248
PLHEND   EQU   IDAPLH+280
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
XRBPSW   EQU   RBOPSW
RBOPSWB2 EQU   XRBPSW+1
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
RBPREFIX EQU   0
RBRSV019 EQU   RBPREFIX+14
RBRSV028 EQU   RBPREFIX+15
RBRSV041 EQU   RBPREFIX+27
RBRSV054 EQU   RBPREFIX+39
RBRTOPSW EQU   RBPREFIX+40
RBRTPSW2 EQU   RBRTOPSW+8
RBRTICIL EQU   RBRTPSW2
RBFLAGS1 EQU   RBPREFIX+56
RBINTCDA EQU   RBPREFIX+61
RBSECT   EQU   0
RBPPSAV  EQU   RBSECT
@NM00100 EQU   RBSECT+10
@NM00101 EQU   @NM00100
RBTRSVRB EQU   @NM00101
@NM00103 EQU   @NM00100+1
RBETXR   EQU   @NM00103
RBEP     EQU   RBSECT+12
RBPGMQ   EQU   RBSECT+24
@NM00110 EQU   RBSECT+28
@NM00111 EQU   @NM00110
IRBEND   EQU   RBSECT+96
@NM00114 EQU   RBSECT+96
RBRSV138 EQU   @NM00114+7
RBSCBB   EQU   RBSECT+144
RBSPARM  EQU   RBSCBB+8
RBSFLGS1 EQU   RBSPARM
RBSIOPRC EQU   RBSFLGS1
RBSOWNR  EQU   RBSCBB+12
RBSFLGS2 EQU   RBSOWNR
RBSDATA  EQU   RBSCBB+16
RBSFLG3  EQU   RBSDATA
RBRSV150 EQU   RBSECT+167
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLDIR   EQU   RPLOPT1
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLBUFL  EQU   RPLCOMN+52
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBRBP   EQU   TCB
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBSTAWA EQU   TCB+252
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
IDAUPT   EQU   0
UPTHDR   EQU   IDAUPT
UPTFLG0  EQU   UPTHDR+1
UPTNOENT EQU   IDAUPT+13
UPTSA    EQU   IDAUPT+16
UPTAXENT EQU   IDAUPT+88
UPTRPL   EQU   UPTAXENT
UPTFLG1  EQU   UPTAXENT+4
IDAVAT   EQU   0
VATHDR   EQU   IDAVAT
VATVSRT  EQU   IDAVAT+8
VATPAMBL EQU   IDAVAT+16
VATVC    EQU   IDAVAT+20
IDAVCRT  EQU   0
VCRID    EQU   IDAVCRT
VCRFLAG1 EQU   IDAVCRT+1
VCRUPGSW EQU   VCRFLAG1
VCRLSR   EQU   VCRFLAG1
VCROUT   EQU   VCRFLAG1
VCRIDNM  EQU   IDAVCRT+4
VCRCOREH EQU   IDAVCRT+12
VCROPNCT EQU   IDAVCRT+16
VCRUPGCT EQU   IDAVCRT+18
VCRIDXCT EQU   IDAVCRT+20
VCRCISIZ EQU   IDAVCRT+24
VCRSPHPT EQU   IDAVCRT+28
VCRRBUF  EQU   IDAVCRT+32
VCROPN   EQU   IDAVCRT+36
VCRUPG   EQU   IDAVCRT+40
VCRIDX   EQU   IDAVCRT+44
VCRENTRY EQU   0
VCRHEBS  EQU   VCRENTRY
VCRAMBL  EQU   VCRENTRY+4
VCRUPGRD EQU   0
VCRUHEBS EQU   VCRUPGRD
VCRUAMBL EQU   VCRUPGRD+4
VCRINDEX EQU   0
VCRICWA  EQU   VCRINDEX
VCRBUFPT EQU   VCRINDEX+4
VCRCORE  EQU   0
VCRCHDR  EQU   VCRCORE
VCRCNM   EQU   VCRCHDR
VCRCNEXT EQU   VCRCHDR+8
VCRCDESC EQU   VCRCHDR+12
VCRCSP   EQU   VCRCDESC
VCRCLEN  EQU   VCRCDESC+1
VCRCPTRA EQU   VCRCHDR+16
VCRCLENA EQU   VCRCHDR+20
VCRCDATA EQU   VCRCORE+24
VCRHEBSA EQU   0
VCRHHDR  EQU   VCRHEBSA
VCRHNENT EQU   VCRHHDR
VCRHFLG  EQU   VCRHHDR+2
VCRHFCON EQU   VCRHFLG
VCRHFREL EQU   VCRHFLG
VCRHCID  EQU   VCRHHDR+3
VCRHNEXT EQU   VCRHHDR+4
VCRHENT  EQU   VCRHEBSA+8
VCRHEFMN EQU   VCRHENT
FORCORE  EQU   0
DXDSCB   EQU   FORCORE
DXJBF    EQU   FORCORE+100
DXIOB    EQU   FORCORE+280
DXDAADDR EQU   FORCORE+312
DXDCB    EQU   FORCORE+320
DXCCW    EQU   FORCORE+368
DXCCW5   EQU   DXCCW+32
DXCCW8   EQU   DXCCW+56
DXCCW12  EQU   DXCCW+88
DXXCTL   EQU   FORCORE+472
DXVOLSR  EQU   FORCORE+500
DXVOLSR1 EQU   DXVOLSR
DXVOLSR2 EQU   DXVOLSR+6
DXVOLSR3 EQU   DXVOLSR+12
DXRESSW  EQU   FORCORE+524
DXUCBSAV EQU   FORCORE+564
DXUDCBAD EQU   FORCORE+568
DXPDCBAD EQU   FORCORE+572
DXATCOM1 EQU   FORCORE+588
DXATGENS EQU   DXATCOM1
DXATVGIV EQU   DXATGENS
DXATOUTA EQU   DXATCOM1+2
DXATDACC EQU   DXATCOM1+3
DXATCOM2 EQU   FORCORE+592
DXATEOV  EQU   DXATCOM2
DXATOPEN EQU   DXATCOM2+1
DXATALL  EQU   DXATCOM2+2
DXATEXC1 EQU   FORCORE+604
DXATEXB1 EQU   DXATEXC1
DXATEXC2 EQU   FORCORE+608
DSECTSIZ EQU   FORCORE+612
IECPREFX EQU   0
IECEXTPR EQU   IECPREFX+32
IECWTGTB EQU   IECEXTPR+72
IECUPRML EQU   IECEXTPR+80
IECRESWA EQU   IECEXTPR+84
RWARESWA EQU   0
RWAPREFX EQU   RWARESWA
USERPRML EQU   0
IECRRPL  EQU   0
RRPLIST  EQU   IECRRPL
RRFUNCTN EQU   RRPLIST
RRFLAGS1 EQU   RRPLIST+1
RRFLAGS2 EQU   RRPLIST+2
RRFLAGS3 EQU   RRPLIST+3
RRXRETRY EQU   RRPLIST+12
DSMADTRL EQU   0
DSMADTW1 EQU   DSMADTRL
DSMADTB1 EQU   DSMADTW1
DSMADTB2 EQU   DSMADTW1+1
WTGTABLE EQU   0
WTGWTOPR EQU   WTGTABLE
WTG      EQU   0
WTGAREA  EQU   WTG
WTGMODNM EQU   WTGAREA
WTGPREFX EQU   WTGAREA+16
WTGPATHS EQU   WTG+30
WTGENTRY EQU   0
WTGIDTTR EQU   WTGENTRY
APPNMTBL EQU   0
APPENTRY EQU   APPNMTBL+4
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
JFCBX    EQU   0
IDAPDPRM EQU   0
PDPMSGFL EQU   IDAPDPRM+34
IDAVGTT  EQU   0
VGTTTYPE EQU   IDAVGTT+4
SAVEBUFR EQU   0
SAVAREA  EQU   0
SABWRD   EQU   SAVAREA+4
SAREGS   EQU   SAVAREA+12
SACODE   EQU   SAREGS+4
SAREG    EQU   SAREGS+12
SP250WA  EQU   0
SP250SA  EQU   SP250WA
SP250RPL EQU   SP250WA+72
ICWKEY2  EQU   0
ICWKEY3  EQU   0
PLHKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBFBYT EQU   JSCBSEC3+10
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCSCT   EQU   JSCBSEC3+68
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
PSARSVTE EQU   PSARSVT
RBSECS03 EQU   RBEP
RBCDE    EQU   RBSECS03
RBCDFLGS EQU   RBCDE
RBSECS05 EQU   RBPGMQ
RBSQE    EQU   RBSECS05
RBSECS06 EQU   RBPGMQ
RBIQE    EQU   RBSECS06
RBSECS07 EQU   RBPGMQ
RBIQE2   EQU   RBSECS07
RBSECS08 EQU   IRBEND
RBSECS09 EQU   IRBEND
DXXWTG   EQU   DSECTSIZ
DXXAREA  EQU   DSECTSIZ+4
DXXMODNM EQU   DXXAREA
DXXLNG   EQU   DXXAREA+29
DXXENTRY EQU   DXXAREA+32
DXXIDTTR EQU   DXXENTRY
DXREGSAV EQU   DXCCW8
DXREG1   EQU   DXREGSAV+28
DXIDENT  EQU   DXCCW12
DXRETMOD EQU   DXIDENT+2
@NM00158 EQU   DXXCTL
DXSAVMOD EQU   @NM00158+2
@NM00159 EQU   DXRESSW
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
JFCBSPNM EQU   JFCBS001+45
JFCBFLG3 EQU   JFCBSPNM
PDWLIST  EQU   FORCORE
PDWWORK  EQU   DXDCB
IDAESPL  EQU   DXATCOM1
IDARRPL  EQU   DXATCOM1
IDARRFLG EQU   IDARRPL+1
IDARSTAT EQU   DXATEXC1
RSTAT    EQU   IDARSTAT
RSTATCRO EQU   RSTAT+1
IDARCKPT EQU   RSTATCRO
RSTATOP2 EQU   RSTAT+2
IDARRTN  EQU   DXATEXC2
RSTATRTN EQU   IDARRTN
IDAESTAE EQU   DXATCOM1
IDABASER EQU   IDAESTAE
IDADATAR EQU   IDAESTAE+4
IDARETRY EQU   IDAESTAE+8
IDACRWAP EQU   IDAESTAE+12
HEBPTRS  EQU   CMBPTRS
AMBPTRS  EQU   AMBLDTA
BUFCRSC1 EQU   BUFCAVL
DXBTAMX  EQU   DXREG1
DXDSNAME EQU   DXCCW5
FLC      EQU   PSA
IDARTSA  EQU   DXJBF
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00176 EQU   RSTAT+3
@NM00175 EQU   RSTATOP2
RSTATCSA EQU   RSTATOP2
IDARCURS EQU   RSTATCRO
IDARCRCU EQU   RSTATCRO
IDARRSTR EQU   RSTATCRO
RSTATOPT EQU   RSTAT
@NM00174 EQU   IDARRPL+2
@NM00173 EQU   IDARRFLG
RRPLVSAM EQU   IDARRFLG
@NM00172 EQU   IDARRFLG
@NM00171 EQU   IDARRPL
PDWORKSP EQU   PDWWORK+88
PDWERRCD EQU   PDWWORK+84
PDWMSGPT EQU   PDWWORK+80
PDWSAVED EQU   PDWWORK+76
PDWSAVEC EQU   PDWWORK+72
PDWSAVEB EQU   PDWWORK+68
PDWSAVEA EQU   PDWWORK+64
PDWSAVE  EQU   PDWWORK
WTPROUT  EQU   PDWLIST+75
WTPMSG   EQU   PDWLIST+4
WTPFLGS  EQU   PDWLIST+2
WTPLNGTH EQU   PDWLIST
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBRV08 EQU   JFCBSPNM+1
JFCBRV07 EQU   JFCBFLG3
JFCBRV06 EQU   JFCBFLG3
JFCBRV05 EQU   JFCBFLG3
JFCBRV04 EQU   JFCBFLG3
JFCBRV03 EQU   JFCBFLG3
JFCBRV02 EQU   JFCBFLG3
JFCBEXP  EQU   JFCBFLG3
JFCDQDSP EQU   JFCBFLG3
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCBADSP EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBMSGP EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXAD EQU   JFCBS001+31
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00163 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNVOL EQU   JFCUCSEG+9
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00162 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCORGIS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00161 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
DXRESIND EQU   @NM00159
DXSAVOFF EQU   @NM00158+7
DXSAVADR EQU   DXSAVMOD+2
DXSAVID  EQU   DXSAVMOD
DXABCODE EQU   @NM00158
DXRETCOD EQU   DXIDENT+7
DXRETTTR EQU   DXRETMOD+2
DXRETID  EQU   DXRETMOD
DXCALLID EQU   DXIDENT
DXREG0   EQU   DXREGSAV+24
DXREGE   EQU   DXREGSAV+20
DXREGD   EQU   DXREGSAV+16
DXREGC   EQU   DXREGSAV+12
DXREGB   EQU   DXREGSAV+8
DXREGA   EQU   DXREGSAV+4
DXREG9   EQU   DXREGSAV
DXXEND   EQU   DXXAREA+48
DXXLAST  EQU   DXXAREA+40
DXXCORE  EQU   DXXENTRY+5
DXETTR   EQU   DXXIDTTR+2
DXEID    EQU   DXXIDTTR
DXXPATHS EQU   DXXAREA+30
DXOPCLSW EQU   DXXLNG
DXXTXTLN EQU   DXXAREA+27
DXXMODSZ EQU   DXXAREA+24
DXXATTRB EQU   DXXAREA+22
@NM00143 EQU   DXXAREA+20
DXXPREFX EQU   DXXAREA+16
@NM00142 EQU   DXXAREA+12
DXXMODEP EQU   DXXAREA+8
DXXMODID EQU   DXXMODNM+6
@NM00141 EQU   DXXMODNM
DXXWTOPR EQU   DXXWTG
RBRSV161 EQU   RBSECS09+64
RBSIRBWA EQU   RBSECS09
RBIQEWRK EQU   RBSECS08+4
RBNEXAV  EQU   RBSECS08
RBIQEA   EQU   RBIQE2
RBIQE1   EQU   RBIQE+1
RBUSE    EQU   RBIQE
RBSQEA   EQU   RBSQE+1
@NM00115 EQU   RBSQE
RBCDE1   EQU   RBCDE+1
RBCDLOAD EQU   RBCDFLGS
RBCDXCTL EQU   RBCDFLGS
RBCDSYNC EQU   RBCDFLGS
RBCDNODE EQU   RBCDFLGS
RBCDSAVE EQU   RBCDFLGS
RBCDATCH EQU   RBCDFLGS
RBRSV009 EQU   RBCDFLGS
RBNOCELL EQU   RBCDFLGS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00064 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCBASWA EQU   JSCBSEC3+96
JSCBUFPT EQU   JSCBSEC3+92
JSCBACT  EQU   JSCBSEC3+88
JSCBSWSP EQU   JSCBSEC3+87
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCDSABQ EQU   JSCBSEC3+60
JSCBSSIB EQU   JSCBSEC3+56
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00057 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00056 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCBRV08 EQU   JSCBSEC3+11
JSCBRV07 EQU   JSCBFBYT
JSCBRV06 EQU   JSCBFBYT
JSCBRV05 EQU   JSCBFBYT
JSCBRV04 EQU   JSCBFBYT
JSCBRV03 EQU   JSCBFBYT
JSCBRV02 EQU   JSCBFBYT
JSCBADSP EQU   JSCBFBYT
JSCBRV01 EQU   JSCBFBYT
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
SAREG0   EQU   SAREGS+8
@NM00178 EQU   SACODE+3
PPSFC    EQU   SACODE+2
PPFUNC   EQU   SACODE+1
PPCODE   EQU   SACODE
SARTRN   EQU   SAREGS
SAFWRD   EQU   SAVAREA+8
@NM00177 EQU   SAVAREA
VGTTCORE EQU   IDAVGTT+32
@NM00170 EQU   IDAVGTT+28
VGTTPSB  EQU   IDAVGTT+24
VGTTVUSE EQU   IDAVGTT+20
VGTTBIB  EQU   IDAVGTT+16
VGTTNEXT EQU   IDAVGTT+12
VGTTSIZE EQU   IDAVGTT+8
VGTTSP   EQU   IDAVGTT+7
VGTTGSRK EQU   IDAVGTT+6
@NM00169 EQU   IDAVGTT+5
@NM00168 EQU   VGTTTYPE
VGTTCBIC EQU   VGTTTYPE
VGTTOPEN EQU   VGTTTYPE
VGTTCTLG EQU   VGTTTYPE
VGTTLSR  EQU   VGTTTYPE
VGTTGSR  EQU   VGTTTYPE
VGTTSDS  EQU   VGTTTYPE
VGTTID   EQU   IDAVGTT
PDPSFI   EQU   IDAPDPRM+36
@NM00167 EQU   IDAPDPRM+35
PDPNOMSG EQU   PDPMSGFL
PDPNOTRC EQU   PDPMSGFL
PDPSPACE EQU   PDPMSGFL
PDPNOTFC EQU   PDPMSGFL
PDPDSTYP EQU   IDAPDPRM+33
PDPKEY   EQU   IDAPDPRM+32
PDPCTACB EQU   IDAPDPRM+28
PDPDSN   EQU   IDAPDPRM+24
PDPCLSNM EQU   IDAPDPRM+20
PDPVLSER EQU   IDAPDPRM+16
PDPTIOT  EQU   IDAPDPRM+12
PDPUCB   EQU   IDAPDPRM+8
PDPACB   EQU   IDAPDPRM+4
PDPSFC   EQU   IDAPDPRM+3
PDPFUNC  EQU   IDAPDPRM+2
PDPCODE  EQU   IDAPDPRM+1
PDPCALL  EQU   IDAPDPRM
JFCBXNXT EQU   JFCBX+172
@NM00166 EQU   JFCBX+144
JFCBXDEV EQU   JFCBX+140
JFCBXNAM EQU   JFCBX+96
@NM00165 EQU   JFCBX+94
JFCBXVOL EQU   JFCBX+4
@NM00164 EQU   JFCBX+3
JFCBXTTR EQU   JFCBX
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00160 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCAMSTR EQU   JFCBFRID+2
JFCAMCRO EQU   JFCBFRID
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
APPNAMID EQU   APPNMTBL+24
APPOFFST EQU   APPENTRY+2
APPCOUNT EQU   APPENTRY
APPSIZE  EQU   APPNMTBL+2
APPBAL   EQU   APPNMTBL
WTGCORE  EQU   WTGENTRY+5
WTGETTR  EQU   WTGIDTTR+2
WTGEID   EQU   WTGIDTTR
WTGOPD   EQU   WTGPATHS+1
WTGRECHK EQU   WTGPATHS+1
WTGTSENQ EQU   WTGPATHS+1
@NM00157 EQU   WTGPATHS+1
WTGTRACE EQU   WTGPATHS+1
@NM00156 EQU   WTGPATHS
WTGJFCBW EQU   WTGPATHS
WTGSMF   EQU   WTGPATHS
WTGTCOS  EQU   WTGPATHS
WTGNSL   EQU   WTGPATHS
WTGPRLSE EQU   WTGPATHS
WTGLNG   EQU   WTG+29
WTGTXTLN EQU   WTGAREA+27
WTGMODSZ EQU   WTGAREA+24
WTGATTRB EQU   WTGAREA+22
@NM00155 EQU   WTGAREA+20
@NM00154 EQU   WTGAREA+12
WTGMODEP EQU   WTGAREA+8
WTGMODID EQU   WTGMODNM+6
@NM00153 EQU   WTGMODNM
DSMADTW6 EQU   DSMADTRL+20
DSMADTW5 EQU   DSMADTRL+16
DSMADTW4 EQU   DSMADTRL+12
DSMADTW3 EQU   DSMADTRL+8
DSMADTW2 EQU   DSMADTRL+4
DSMADTB4 EQU   DSMADTW1+3
DSMADTB3 EQU   DSMADTW1+2
@NM00152 EQU   DSMADTB2
DSMDSNE  EQU   DSMADTB2
DSMTIOTE EQU   DSMADTB2
DSMSMCE  EQU   DSMADTB2
DSMVTOCR EQU   DSMADTB2
DSMASWAP EQU   DSMADTB1
DSMUCBAL EQU   DSMADTB1
DSMRPSAP EQU   DSMADTB1
DSMLOCK  EQU   DSMADTB1
@NM00151 EQU   DSMADTB1
DSMVIO   EQU   DSMADTB1
DSMISAM  EQU   DSMADTB1
RRFWORK  EQU   RRPLIST+20
RRMLRTRY EQU   RRPLIST+16
RRUCBPTR EQU   RRXRETRY
RR1RETRY EQU   RRPLIST+8
RR1WRKAR EQU   RRPLIST+4
@NM00150 EQU   RRFLAGS3
RRFTERM  EQU   RRFLAGS3
RRFFCEXC EQU   RRFLAGS3
RRFFINFC EQU   RRFLAGS3
RRFNRTCA EQU   RRFLAGS3
@NM00149 EQU   RRFLAGS3
RRFENQUL EQU   RRFLAGS2
RRFPRDET EQU   RRFLAGS2
@NM00148 EQU   RRFLAGS2
RRFQMNGR EQU   RRFLAGS2
RRFENQPW EQU   RRFLAGS2
@NM00147 EQU   RRFLAGS2
RRFFIN1  EQU   RRFLAGS2
RRFTRACE EQU   RRFLAGS1
RRFSMF   EQU   RRFLAGS1
RRFNSL   EQU   RRFLAGS1
RRFAMSTR EQU   RRFLAGS1
RRFAMEXR EQU   RRFLAGS1
RRFAMEXG EQU   RRFLAGS1
RRFUSREX EQU   RRFLAGS1
@NM00146 EQU   RRFLAGS1
RRFRJFCB EQU   RRFUNCTN
RRFDADSM EQU   RRFUNCTN
DXDCBLST EQU   USERPRML
RWALIST  EQU   RWARESWA+12
RWAPARM  EQU   RWAPREFX+8
RWATRBUF EQU   RWAPREFX+4
RWATRACE EQU   RWAPREFX
IECQMNGR EQU   IECEXTPR+92
IECMSGQA EQU   IECEXTPR+88
IECDCBNO EQU   IECUPRML
IECRRPRM EQU   IECEXTPR+76
IECREGSV EQU   IECEXTPR
IECCORP2 EQU   IECPREFX+28
IECCORP1 EQU   IECPREFX+24
IECCORPS EQU   IECPREFX+20
IECCORSP EQU   IECPREFX+19
@NM00145 EQU   IECPREFX+17
IECCORKY EQU   IECPREFX+16
IECCORAD EQU   IECPREFX+12
IECCORLN EQU   IECPREFX+8
@NM00144 EQU   IECPREFX+4
IECCORID EQU   IECPREFX
DXATEXB2 EQU   DXATEXC2
DXEXHASP EQU   DXATEXB1
DXATCOM4 EQU   FORCORE+600
DXATCOM3 EQU   FORCORE+596
@NM00140 EQU   DXATCOM2+3
@NM00139 EQU   DXATALL
DXATSWAP EQU   DXATALL
DXATFC   EQU   DXATALL
@NM00138 EQU   DXATOPEN
DXATDFIN EQU   DXATOPEN
DXATDSIN EQU   DXATOPEN
DXATMODM EQU   DXATOPEN
DXATMODE EQU   DXATOPEN
DXATMODS EQU   DXATOPEN
DXATIGN  EQU   DXATOPEN
DXATVCAT EQU   DXATEOV
DXATDADM EQU   DXATEOV
DXATREMT EQU   DXATEOV
DXATDNEW EQU   DXATEOV
DXATDFRE EQU   DXATEOV
DXATDCHN EQU   DXATEOV
DXATNVOL EQU   DXATEOV
DXATCCAT EQU   DXATEOV
DXATRDDB EQU   DXATDACC
DXATEOF  EQU   DXATDACC
@NM00137 EQU   DXATDACC
DXATSMF  EQU   DXATDACC
DXATUPDB EQU   DXATDACC
DXATDRCT EQU   DXATDACC
DXATTRAK EQU   DXATDACC
DXATF1CE EQU   DXATDACC
DXATNSL  EQU   DXATOUTA
DXATTTM2 EQU   DXATOUTA
DXATTTM1 EQU   DXATOUTA
DXATTRL2 EQU   DXATOUTA
DXATTRL1 EQU   DXATOUTA
DXATDATM EQU   DXATOUTA
DXATHDTM EQU   DXATOUTA
DXATVLHD EQU   DXATOUTA
DXATCLOS EQU   DXATCOM1+1
DXATSRET EQU   DXATGENS
DXATVCIG EQU   DXATVGIV
DXATVTMG EQU   DXATVGIV
DXATVSMG EQU   DXATVGIV
DXATJFCB EQU   DXATGENS
DXATDISP EQU   DXATGENS
DXATREFR EQU   DXATGENS
DXATDMCT EQU   DXATGENS
DXMSGADR EQU   FORCORE+584
DXPRPARC EQU   FORCORE+580
DXUDCBML EQU   FORCORE+578
DXUDCBPL EQU   FORCORE+576
DXPACBAD EQU   DXPDCBAD+1
@NM00136 EQU   DXPDCBAD
DXUACBAD EQU   DXUDCBAD+1
@NM00135 EQU   DXUDCBAD
DXUCBSVV EQU   DXUCBSAV+1
@NM00134 EQU   DXUCBSAV
DXUCBADR EQU   FORCORE+560
DXTIOTAD EQU   FORCORE+556
DXDEBXAD EQU   FORCORE+552
DXDSAB   EQU   FORCORE+548
DXDSABAD EQU   FORCORE+544
DXDSABQD EQU   FORCORE+540
DXJSCBAD EQU   FORCORE+536
DXTCBADR EQU   FORCORE+532
DXASCBAD EQU   FORCORE+528
DXEXTSW  EQU   FORCORE+527
DXUKEY   EQU   FORCORE+526
DXWKEYSV EQU   FORCORE+525
DXUNITOF EQU   FORCORE+522
DXNOUNIT EQU   FORCORE+520
DXVOLSEQ EQU   FORCORE+518
DXVOLMT3 EQU   DXVOLSR3
DXVOLMT2 EQU   DXVOLSR2
DXVOLMT1 EQU   DXVOLSR1
DXWORK4  EQU   FORCORE+496
DXWORK3  EQU   FORCORE+492
DXWORK2  EQU   FORCORE+488
DXWORK1  EQU   FORCORE+484
DXWORK   EQU   FORCORE+480
@NM00133 EQU   FORCORE+464
DXCCW11  EQU   DXCCW+80
DXCCW10  EQU   DXCCW+72
DXCCW9   EQU   DXCCW+64
DXCCW7   EQU   DXCCW+48
DXCCW6   EQU   DXCCW+40
DXCCW4   EQU   DXCCW+24
DXCCW3   EQU   DXCCW+16
DXCCW2   EQU   DXCCW+8
DXCCW1   EQU   DXCCW
DXDCBDEB EQU   DXDCB+44
@NM00132 EQU   DXDCB+24
DXDEBDCB EQU   DXDCB+20
@NM00131 EQU   DXDCB
DXDEB    EQU   DXDAADDR+4
@NM00130 EQU   DXDAADDR
DXECB    EQU   FORCORE+276
DSCCORE  EQU   FORCORE+96
DXLBL    EQU   DXDSCB
VCRHESPT EQU   VCRHEFMN+4
VCRHELN  EQU   VCRHEFMN+1
VCRHESP  EQU   VCRHEFMN
@NM00129 EQU   IDAVCRT+22
@NM00128 EQU   VCRFLAG1
VATAMBL  EQU   IDAVAT+28
VATNAE   EQU   IDAVAT+24
@NM00127 EQU   IDAVAT+22
VATENO   EQU   VATVC+1
VATVRT   EQU   VATVC
VATVPTR  EQU   VATVSRT+4
VATVUSE  EQU   VATVSRT
VATNEXT  EQU   IDAVAT+4
VATLEN   EQU   VATHDR+2
@NM00126 EQU   VATHDR+1
VATID    EQU   VATHDR
UPTBG    EQU   UPTAXENT+10
UPTLNCDE EQU   UPTAXENT+9
UPTPASS  EQU   UPTAXENT+8
UPTRKP   EQU   UPTAXENT+6
UPTF1PUD EQU   UPTFLG1+1
UPTF1PNU EQU   UPTFLG1+1
UPTF1ERA EQU   UPTFLG1+1
UPTF1PHY EQU   UPTFLG1+1
UPTF1LOG EQU   UPTFLG1+1
UPTF1BKO EQU   UPTFLG1+1
UPTF1UPG EQU   UPTFLG1
UPTF1RTY EQU   UPTFLG1
UPTF1KEY EQU   UPTFLG1
UPTF1NRF EQU   UPTFLG1
UPTF1NOP EQU   UPTFLG1
UPTF1NUK EQU   UPTFLG1
UPTF1ATV EQU   UPTFLG1
UPTF1LST EQU   UPTFLG1
UPTF1LOP EQU   UPTRPL
UPTR15   EQU   UPTSA+16
UPTR14   EQU   UPTSA+12
UPTSARES EQU   UPTSA+11
@NM00125 EQU   UPTSA+10
UPTBERCD EQU   UPTSA+9
UPTBEREG EQU   UPTSA+8
UPTLSA   EQU   UPTSA+4
UPTBRPL  EQU   UPTSA
UPTLLEN  EQU   IDAUPT+14
UPTRSC   EQU   IDAUPT+12
UPTOLD   EQU   IDAUPT+8
UPTNEW   EQU   IDAUPT+4
UPTLEN   EQU   UPTHDR+2
UPTPWS   EQU   UPTFLG0
UPTID    EQU   UPTHDR
@NM00124 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00123 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBRV308 EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAFX EQU   TCBSTAWA
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00122 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBTIO   EQU   TCB+12
TCBDEB   EQU   TCB+8
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00121 EQU   TCBPMASK
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00120 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00119 EQU   RPLRBAR+3
@NM00118 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00117 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
@NM00116 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
SVRBEND  EQU   RBSECT+192
RBFEPARM EQU   RBSECT+168
SIRBEND  EQU   RBSECT+168
RBRSV158 EQU   RBRSV150
RBRSV157 EQU   RBRSV150
RBRSV156 EQU   RBRSV150
RBRSV155 EQU   RBRSV150
RBRSV154 EQU   RBRSV150
RBRSV153 EQU   RBRSV150
RBRSV152 EQU   RBRSV150
RBRSV151 EQU   RBRSV150
RBRSV149 EQU   RBSECT+166
RBRSV148 EQU   RBSECT+164
RBRSV169 EQU   RBSDATA+3
RBSID    EQU   RBSDATA+2
RBSPKEY  EQU   RBSDATA+1
RBRSV168 EQU   RBSFLG3
RBSTERMO EQU   RBSFLG3
RBSBRNTR EQU   RBSFLG3
RBSPRNTR EQU   RBSFLG3
RBSCNCEL EQU   RBSFLG3
RBSRECRD EQU   RBSFLG3
RBSTERMI EQU   RBSFLG3
RBRSV167 EQU   RBSFLG3
RBSOWNRA EQU   RBSOWNR+1
RBSSUPER EQU   RBSFLGS2
RBSKEY0  EQU   RBSFLGS2
RBRSV166 EQU   RBSFLGS2
RBRSV165 EQU   RBSFLGS2
RBSINUSE EQU   RBSFLGS2
RBRSV164 EQU   RBSFLGS2
RBSXCTL2 EQU   RBSFLGS2
RBRSV163 EQU   RBSFLGS2
RBSPARMA EQU   RBSPARM+1
RBSHALT  EQU   RBSIOPRC
RBSNOIOP EQU   RBSIOPRC
RBSASYNC EQU   RBSFLGS1
RBRSV162 EQU   RBSFLGS1
RBSESTAE EQU   RBSFLGS1
RBSDUMMY EQU   RBSFLGS1
RBSSTAR  EQU   RBSFLGS1
RBSSTAI  EQU   RBSFLGS1
RBSEXIT  EQU   RBSCBB+4
RBSCHAIN EQU   RBSCBB
TIRBEND  EQU   @NM00114+8
PRBEND   EQU   @NM00114+8
RBRSV146 EQU   RBRSV138
RBRSV145 EQU   RBRSV138
RBRSV144 EQU   RBRSV138
RBRSV143 EQU   RBRSV138
RBRSV142 EQU   RBRSV138
RBRSV141 EQU   RBRSV138
RBRSV140 EQU   RBRSV138
RBRSV139 EQU   RBRSV138
RBRSV137 EQU   @NM00114+6
RBRSV136 EQU   @NM00114+4
RBRSV135 EQU   @NM00114
@NM00113 EQU   RBSECT+32
@NM00112 EQU   @NM00110+1
RBSCF    EQU   @NM00111
RBPGMQ1  EQU   RBPGMQ+1
@NM00109 EQU   RBPGMQ
@NM00108 EQU   RBSECT+16
@NM00107 EQU   @NM00103
@NM00106 EQU   @NM00103
RBIQETP  EQU   @NM00103
RBUSIQE  EQU   RBETXR
RBATTN   EQU   @NM00103
@NM00105 EQU   @NM00103
@NM00104 EQU   @NM00103
RBPMSVRB EQU   @NM00101
RBATNXIT EQU   @NM00101
@NM00102 EQU   @NM00101
RBWAITP  EQU   @NM00101
RBFNSVRB EQU   RBTRSVRB
RBFTP    EQU   @NM00101
RBSIZE   EQU   RBSECT+8
RBABOPSW EQU   RBSECT+4
RBPPSAV1 EQU   RBPPSAV+1
@NM00099 EQU   RBPPSAV
RBPRFXND EQU   RBPREFIX+64
RBINTCOD EQU   RBINTCDA+1
RBINLNTH EQU   RBINTCDA
RBWCSA   EQU   RBPREFIX+60
RBRSV004 EQU   RBPREFIX+57
RBSSSYN  EQU   RBFLAGS1
RBSCB    EQU   RBFLAGS1
RBLONGWT EQU   RBFLAGS1
RBASIR   EQU   RBFLAGS1
RBRSV159 EQU   RBFLAGS1
RBABEND  EQU   RBFLAGS1
RBXWAIT  EQU   RBFLAGS1
RBSLOCK  EQU   RBFLAGS1
RBRTRAN  EQU   RBRTPSW2+4
RBRTINCD EQU   RBRTICIL+2
RBRTILC  EQU   RBRTICIL+1
RBRSV160 EQU   RBRTICIL
RBRTPSW1 EQU   RBRTOPSW
RBRSV062 EQU   RBRSV054
RBRSV061 EQU   RBRSV054
RBRSV060 EQU   RBRSV054
RBRSV059 EQU   RBRSV054
RBRSV058 EQU   RBRSV054
RBRSV057 EQU   RBRSV054
RBRSV056 EQU   RBRSV054
RBRSV055 EQU   RBRSV054
RBRSV053 EQU   RBPREFIX+38
RBRSV052 EQU   RBPREFIX+36
RBRSV051 EQU   RBPREFIX+32
RBPRFXST EQU   RBPREFIX+32
RBRSV050 EQU   RBPREFIX+28
RBRSV049 EQU   RBRSV041
RBRSV048 EQU   RBRSV041
RBRSV047 EQU   RBRSV041
RBRSV046 EQU   RBRSV041
RBRSV045 EQU   RBRSV041
RBRSV044 EQU   RBRSV041
RBRSV043 EQU   RBRSV041
RBRSV042 EQU   RBRSV041
RBRSV040 EQU   RBPREFIX+26
RBRSV039 EQU   RBPREFIX+24
RBRSV038 EQU   RBPREFIX+20
RBRSV037 EQU   RBPREFIX+16
RBRSV036 EQU   RBRSV028
RBRSV035 EQU   RBRSV028
RBRSV034 EQU   RBRSV028
RBRSV033 EQU   RBRSV028
RBRSV032 EQU   RBRSV028
RBRSV031 EQU   RBRSV028
RBRSV030 EQU   RBRSV028
RBRSV029 EQU   RBRSV028
RBRSV027 EQU   RBRSV019
RBRSV026 EQU   RBRSV019
RBRSV025 EQU   RBRSV019
RBRSV024 EQU   RBRSV019
RBRSV023 EQU   RBRSV019
RBRSV022 EQU   RBRSV019
RBRSV021 EQU   RBRSV019
RBRSV020 EQU   RBRSV019
RBRSV018 EQU   RBPREFIX+13
RBRSV017 EQU   RBPREFIX+12
RBSRV016 EQU   RBPREFIX+11
RBRSV015 EQU   RBPREFIX+10
RBRSV014 EQU   RBPREFIX+8
RBRSV013 EQU   RBPREFIX+4
RBRSV012 EQU   RBPREFIX
RBEXSAVE EQU   XRBESA
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00098 EQU   RBBASIC+24
RBOPSWPS EQU   RBOPSWB2
@NM00097 EQU   RBOPSWB2
@NM00096 EQU   XRBPSW
@NM00095 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00094 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00093 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00092 EQU   XSTAB1
@NM00091 EQU   RBBASIC+8
@NM00090 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00089 EQU   RBPRFX
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00063 EQU   IDAPLH+265
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00062 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHRBUFC EQU   IDAPLH+192
PLHNRBA  EQU   IDAPLH+184
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00061 EQU   IDAPLH+172
@NM00060 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHAMB   EQU   IDAPLH+108
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHRDFP  EQU   IDAPLH+68
PLHFSP   EQU   IDAPLH+64
PLHRECP  EQU   IDAPLH+60
PLHLRECL EQU   IDAPLH+48
PLHARDB  EQU   IDAPLH+44
@NM00059 EQU   IDAPLH+43
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00058 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
PLHSR    EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHASKBF EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
JSCBCSCB EQU   JSCBSEC1+68
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00055 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00054 EQU   IEZJSCB
ICWKEY1  EQU   IDAICWA+60
ICWCERP  EQU   IDAICWA+59
ICWCEL   EQU   IDAICWA+58
ICWCEF   EQU   IDAICWA+57
ICWCER   EQU   IDAICWA+56
ICWPTL   EQU   IDAICWA+55
ICWREQ   EQU   IDAICWA+54
ICWCRSEG EQU   IDAICWA+52
ICWNOSEG EQU   IDAICWA+50
ICWNEST  EQU   IDAICWA+48
ICWKEY3L EQU   IDAICWA+46
ICWKEY2L EQU   IDAICWA+44
ICWKEY1L EQU   IDAICWA+42
ICWARDBP EQU   IDAICWA+36
ICWTPTR  EQU   IDAICWA+32
ICWTBASE EQU   IDAICWA+28
ICWADD   EQU   IDAICWA+24
ICWSCNT  EQU   IDAICWA+22
ICWPSEO  EQU   IDAICWA+20
ICWPRBA  EQU   IDAICWA+16
ICWBUFC  EQU   IDAICWA+8
ICWLEN   EQU   IDAICWA+2
ICWENDRQ EQU   ICWFLG1
ICWSPLIT EQU   ICWFLG1
ICWKRDS  EQU   ICWFLG1
ICWVNE   EQU   ICWFLG1
ICWVSE   EQU   ICWFLG1
ICWRBAOK EQU   ICWFLG1
ICWWAGM  EQU   ICWFLG1
ICWWNF   EQU   ICWFLG1
ICWID    EQU   IDAICWA
HEBHDELS EQU   IDAHEB+12
HEBCNT   EQU   IDAHEB+10
@NM00053 EQU   IDAHEB+8
HEBNHEB  EQU   IDAHEB+4
HEBLEN   EQU   IDAHEB+2
@NM00052 EQU   IDAHEB+1
HEBID    EQU   IDAHEB
@NM00051 EQU   @NM00050+1
HEBGSRK  EQU   @NM00050
HEBNBYTE EQU   HEBHDREL+16
HEBAVSP  EQU   HEBHDREL+9
HEBRTFLG EQU   HEBFLAGS
HEBIOSUP EQU   HEBFLAGS
HEBGSRKT EQU   HEBFLAGS
HEBKEY5  EQU   HEBFLAGS
HEBJSTCB EQU   HEBFLAGS
HEBBLKPT EQU   HEBFREMN+4
HEBLN    EQU   HEBFREMN+1
HEBSP    EQU   HEBFREMN
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00049 EQU   CVTFIX+248
@NM00048 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00047 EQU   CMBPTRS+52
CMBPUSPT EQU   CMBPTRS+44
CMBPSTPT EQU   CMBPTRS+40
CMBUBFPT EQU   CMBPTRS+28
CMBBFRPT EQU   CMBPTRS+24
CMBUSPTR EQU   CMBPTRS+12
CMBSTPTR EQU   CMBPTRS+8
CMBPRPTR EQU   CMBPTRS+4
CMBUSRPT EQU   CMBPTRS
CMBCNT   EQU   IDACMB+6
CMBNST   EQU   IDACMB+5
CMBOUT   EQU   CMBFLGS
CMBLEN   EQU   IDACMB+2
@NM00046 EQU   IDACMB+1
CMBID    EQU   IDACMB
CKJCT    EQU   CHKWA+256
CKREGSAV EQU   CHKWA+184
CKERAS09 EQU   CHKWA+180
CKERAS08 EQU   CHKWA+176
CKERAS07 EQU   CHKWA+172
CKERAS06 EQU   CHKWA+168
CKERAS05 EQU   CHKWA+164
CKERAS04 EQU   CHKWA+160
CKERAS03 EQU   CHKWA+156
CKERAS02 EQU   CHKWA+152
CKERAS01 EQU   CHKWA+148
CKERAS00 EQU   CHKWA+144
CKJCTMB  EQU   CHKWA+136
CKTTR    EQU   CHKWA+132
CKCHEKID EQU   CHKWA+121
CKVOLSER EQU   CHKWA+115
CKDDNAME EQU   CHKWA+107
CKUNIT   EQU   CHKWA+104
CKPARMAD EQU   CHKWA+100
CKSYNAD  EQU   CHKWA+96
CKINT    EQU   CHKWA+92
CKIOBPT2 EQU   CKDECB2+16
CKAREA2  EQU   CKDECB2+12
CKDCBAD2 EQU   CKDECB2+8
CKLNGTH2 EQU   CKDECB2+6
CKTYPE2  EQU   CKDECB2+4
CKECB2   EQU   CKDECB2
CKIOBPT1 EQU   CKDECB1+16
CKAREA1  EQU   CKDECB1+12
CKDCBAD  EQU   CKDCBAD1
CKLNGTH1 EQU   XCTLNAME+6
CKTYPE1  EQU   XCTLNAME+4
CKECB1   EQU   XCTLNAME
CKSSCR   EQU   CHKWA+48
CKRETCD1 EQU   CKRETCOD
CKDCBSI  EQU   CHKWA+42
CKFLAG2  EQU   CHKWA+41
CKFLAG1  EQU   CHKWA+40
CKTIOLN  EQU   CHKWA+36
CKPPEL   EQU   CHKWA+32
CKPPML   EQU   CHKWA+28
CKPPE    EQU   CHKWA+24
CKPPM    EQU   CHKWA+20
CKTCBAD  EQU   CHKWA+16
CKBUFL   EQU   CHKWA+12
CKWACL   EQU   CHKWA+8
CKBFOFST EQU   CHKWA+4
CKWAOFST EQU   CHKWA
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFXORBA EQU   IDABUFC+44
BUFXIRBA EQU   IDABUFC+40
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCCPA  EQU   IDABUFC+16
BUFCORBA EQU   IDABUFC+12
BUFCDDDD EQU   IDABUFC+8
BUFCAMB  EQU   BUFCPLH
@NM00045 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00044 EQU   IDABUFDR+16
@NM00043 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
BIBVSRTP EQU   IDABIB+104
BIBASCB  EQU   IDABIB+100
BIBDDNM  EQU   IDABIB+92
BIBSTPNM EQU   IDABIB+84
BIBJOBNM EQU   IDABIB+76
BIBSIOAP EQU   BIBRTNS+12
BIBASYRT EQU   BIBRTNS+8
BIBCEAPP EQU   BIBRTNS+4
BIBVGTT  EQU   IDABIB+56
BIBPSAB  EQU   IDABIB+52
BIBCSL   EQU   IDABIB+48
BIBWSHD  EQU   IDABIB+44
BIBHEBFQ EQU   IDABIB+36
BIBHEBPT EQU   IDABIB+32
BIBPRSPH EQU   IDABIB+28
BIBPAMBL EQU   IDABIB+20
BIBDACB  EQU   IDABIB+16
BIBVMT   EQU   IDABIB+12
@NM00042 EQU   IDABIB+5
BIBFLG2  EQU   IDABIB+4
BIBLEN   EQU   BIBHDR+2
@NM00041 EQU   BIBFLG1
BIBREST  EQU   BIBFLG1
BIBVIRT  EQU   BIBFLG1
BIBID    EQU   BIBHDR
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBVGTT EQU   ASCB+184
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSMA EQU   ASCBRSM+1
ASCBRV54 EQU   ASCBRSMF
ASCBRV53 EQU   ASCBRSMF
ASCBRV52 EQU   ASCBRSMF
ASCBRV51 EQU   ASCBRSMF
ASCBVEQR EQU   ASCBRSMF
ASCBN2LP EQU   ASCBRSMF
ASCB1LPU EQU   ASCBRSMF
ASCB2LPU EQU   ASCBRSMF
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
ARDKEYS  EQU   IDAARDB+29
@NM00040 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDERBA  EQU   IDAARDB+16
ARDHKRBA EQU   IDAARDB+8
ARDNPTR  EQU   IDAARDB+4
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDEOD   EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00039 EQU   IDAAMDSB+41
@NM00038 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDKEYLN EQU   IDAAMDSB+8
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00037 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00036 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00035 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLSDS  EQU   AMBLVVIC
AMBLUPD  EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00034 EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00033 EQU   AMBLQ2
@NM00032 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00031 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
IOMXRBPT EQU   IOMXECB+1
IOMXIOCC EQU   IOMXRSLT
IOMXPOST EQU   IOMXRSLT
IOMXWAIT EQU   IOMXECB
IOMXR14  EQU   IDAIOMBX+16
IOMXRPL  EQU   IOMXPDET+8
IOMXR13S EQU   IOMXPDET+4
@NM00030 EQU   IOMXPDET+2
IOMXBFLG EQU   IOMXPDET
@NM00029 EQU   IDAIOMBX+2
@NM00028 EQU   IOMXFLGS
IOMXSCAN EQU   IOMXFLGS
IOMXEOVW EQU   IOMXFLGS
IOMXUSE  EQU   IOMXFLGS
IOMXLOCK EQU   IDAIOMBX
AMBXBM2S EQU   IDAAMBXN+20
AMBXRDCT EQU   AMBXCSWD+2
@NM00027 EQU   AMBXCSWD
AMBXECB  EQU   IDAAMBXN+12
AMBXASCB EQU   IDAAMBXN+8
@NM00026 EQU   AMBXEOV+7
AMBXEVRC EQU   AMBXEOV+6
AMBXEOVR EQU   AMBXEOV+5
AMBXRSC  EQU   AMBXEOV+4
AMBXEVPT EQU   AMBXEOV
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00025 EQU   AMBCSWD1+1
@NM00024 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBLSR   EQU   AMBAFLG
@NM00023 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00022 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00021 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00020 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBSDS   EQU   AMBINFL
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00019 EQU   AMBINFL
@NM00018 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00017 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00016 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00015 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
@NM00014 EQU   AMBFLG0
AMBSWSP  EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00013 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00012 EQU   ACBINFL2
ACBCBIC  EQU   ACBINFL2
@NM00011 EQU   ACBINFL2
ACBBYPSS EQU   ACBINFL1
ACBSDS   EQU   ACBVVIC
ACBUCRA  EQU   ACBINFL1
ACBSCRA  EQU   ACBINFL1
ACBCAT   EQU   ACBINFL1
ACBIJRQE EQU   ACBINFL1
ACBJEPS  EQU   ACBINFL1
@NM00010 EQU   ACBINFL1
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00009 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00008 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00007 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00006 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00005 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00004 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00003 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00002 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00001 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
@NM00088 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00087 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00086 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00085 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00084 EQU   FLCFSA
@NM00083 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00082 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00081 EQU   FLCIOA
@NM00080 EQU   FLCMCLA+15
@NM00079 EQU   FLCMCLA+14
@NM00078 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00077 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00076 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00075 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00074 EQU   FLCPER
@NM00073 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00072 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00071 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00070 EQU   FLCPIILC
@NM00069 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00068 EQU   FLCSVILC
@NM00067 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00066 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00065 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00369 EQU   @RC00366
@RC00367 EQU   @RC00366
@RC00375 EQU   @RC00374
@RC00665 EQU   @RC00664
@PB00011 EQU   @EL00010
@RC00772 EQU   @RC00771
@PB00014 EQU   @PB00015
@RC00666 EQU   @RC00665
@RC00773 EQU   @RC00772
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00010 EQU   @PB00012
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IDA0C06C,(C'PLS1645',0701,78151)
