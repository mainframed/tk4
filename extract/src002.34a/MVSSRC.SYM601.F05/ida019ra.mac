         TITLE 'IDA019RA - VSAM DIRECT RECORD LOCATE                   *
                        '
IDA019RA CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA019RA  78.172'                                 0001
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
         IDASVR14
*   PLHRDEXC=OFF;                   /* CLEAR EXCLUSIVE CONTROL     0158
*                                                            @X04SVES*/
         NI    PLHRDEXC(RPLH),B'11110111'                          0158
*   PLHRAE=OFF;                     /* SEARCH EQUAL HISTORY OFF    0159
*                                                            @ZA14811*/
         NI    PLHRAE(RPLH),B'11111101'                            0159
*   IF RPLREQ=RPLPOINT×RPLUPD=ON×   /* POINT, UPDATE         @X04SVES*/
*       RPLNSP=ON THEN              /* OR NSP                @X04SVES*/
         CLI   RPLREQ(RRPL),3                                      0160
         BE    @RT00160                                            0160
         TM    RPLUPD(RRPL),B'00000011'                            0160
         BZ    @RF00160                                            0160
@RT00160 DS    0H                                                  0161
*     PLHASKBF=ON;                  /* YES, SET ASKBF        @X04SVES*/
         OI    PLHASKBF(RPLH),B'00100000'                          0161
*   IF RPLKEY=ON THEN               /* IS THIS A KEYED REQUEST       */
@RF00160 TM    RPLKEY(RRPL),B'10000000'                            0162
         BNO   @RF00162                                            0162
*     DO;                           /* YES                           */
*       RWORK1=RPARM1;              /* POINT TO SEARCH ARG           */
         LR    RWORK1,RPARM1                                       0164
*       RESPECIFY                                                  0165
*         RPARM1 UNRSTD;            /* RELEASE REGISTER              */
*       RWORK3=ADDR(PLHKEY);        /* POINT TO PLHKEY               */
         L     RWORK3,PLHKEYPT(,RPLH)                              0166
*       PLHISPLP=ADDR(PLHIXSPL);    /* SET PTR. TO WORK AREA         */
         LA    @12,PLHIXSPL(,RPLH)                                 0167
         ST    @12,PLHISPLP(,RPLH)                                 0167
*       RAMB=AMBLIX;                /* POINT TO INDEX AMB            */
         L     @12,RPLDACB(,RRPL)                                  0168
         L     @12,ACBAMBL(,@12)                                   0168
         L     RAMB,AMBLIX(,@12)                                   0168
*       IF RPLREQ^=RPLPUT&          /* DIFFERENT FROM PUT REQ.       */
*           RWORK1^=RWORK3 THEN     /* AND ARG NOT IN PLHKEY         */
         CLI   RPLREQ(RRPL),1                                      0169
         BE    @RF00169                                            0169
         CR    RWORK1,RWORK3                                       0169
         BE    @RF00169                                            0169
*         DO;                       /* YES, ITS NOT PUT              */
*           IF RPLLRD=ON THEN       /* IS LAST RECORD IN DATA SET  0171
*                                      SPECIFIED             @X04SVES*/
         TM    RPLLRD(RRPL),B'00001000'                            0171
         BNO   @RF00171                                            0171
*             DO;                   /* YES                   @X04SVES*/
*               IF RPLBWD=OFF THEN  /* IS FORWARD MODE SET   @X04SVES*/
         TM    RPLBWD(RRPL),B'00010000'                            0173
         BNZ   @RF00173                                            0173
*                 DO;               /* YES                   @X04SVES*/
*                   RPLERREG='08'X; /* SET LOGICAL ERROR     @X04SVES*/
         MVI   RPLERREG(RRPL),X'08'                                0175
*                   RPLERRCD=RPLINVP;/* SET ILLEGAL OPTIONS  @X04SVES*/
         MVI   RPLERRCD(RRPL),X'68'                                0176
*                   CALL EXIT;      /* EXIT TO CALLER        @X04SVMR*/
         BAL   @14,EXIT                                            0177
*                 END;              /*                       @X04SVES*/
*               RWORK2=AMDKEYLN;    /* SET ARGUMENT TO FULL KEY    0179
*                                                            @X04SVES*/
@RF00173 L     @12,AMBDSB(,RAMB)                                   0179
         LH    RWORK2,AMDKEYLN(,@12)                               0179
*               DO RWORK1=ONE TO RWORK2;/* LOOP SETS EACH BYTE OF PLH
*                                                            @X04SVES*/
         LA    RWORK1,1                                            0180
         B     @DE00180                                            0180
@DL00180 DS    0H                                                  0181
*                 PLHKEY(RWORK1)=ONEF;/* SET BYTE TO FF      @X04SVES*/
         L     @12,PLHKEYPT(,RPLH)                                 0181
         ALR   @12,RWORK1                                          0181
         BCTR  @12,0                                               0181
         MVI   PLHKEY(@12),X'FF'                                   0181
*               END;                /*                       @X04SVES*/
         AL    RWORK1,@CF00053                                     0182
@DE00180 CLR   RWORK1,RWORK2                                       0182
         BNH   @DL00180                                            0182
*               RWORK1=ADDR(PLHKEY);/* SHOW ARGUMENT IS NOW IN PLH 0183
*                                                            @X04SVES*/
         L     RWORK1,PLHKEYPT(,RPLH)                              0183
*             END;                  /*                       @X04SVES*/
*           ELSE                    /*                       @X04SVES*/
*             DO;                   /*                       @X04SVES*/
         B     @RC00171                                            0185
@RF00171 DS    0H                                                  0186
*               IF RPLGEN=ON&RPLBWD=OFF THEN/* GENERIC REQUEST     0186
*                                                            @X04SVES*/
         TM    RPLGEN(RRPL),B'00000010'                            0186
         BNO   @RF00186                                            0186
         TM    RPLBWD(RRPL),B'00010000'                            0186
         BNZ   @RF00186                                            0186
*                 DO;               /* YES                           */
*                   RWORK2=RPLKEYL; /* USE RPL KEY LEMGTH            */
         LH    RWORK2,RPLKEYL(,RRPL)                               0188
*                 END;              /*                               */
*               ELSE                /* OTHERWISE                     */
*                 DO;               /* USE KEY LENGTH                */
         B     @RC00186                                            0190
@RF00186 DS    0H                                                  0191
*                   RWORK2=AMDKEYLN;/* FROM AMDSB                    */
         L     @12,AMBDSB(,RAMB)                                   0191
         LH    RWORK2,AMDKEYLN(,@12)                               0191
*                 END;              /*                               */
*             END;                  /*                       @X04SVES*/
*         END;                      /*                               */
*       ELSE                        /* IN CASE OF A PUT              */
*         DO;                       /* REQUEST, KEY ADDRESS          */
         B     @RC00169                                            0195
@RF00169 DS    0H                                                  0196
*           RWORK2=AMDKEYLN;        /* WITH LENGTH FROM AMD          */
         L     @12,AMBDSB(,RAMB)                                   0196
         LH    RWORK2,AMDKEYLN(,@12)                               0196
*         END;                      /*                               */
*       IF RPLSKP=ON&RPLBWD=ON THEN /* SKP SEQ AND BACKWARD MODE   0198
*                                                            @X04SVES*/
@RC00169 TM    RPLSKP(RRPL),B'00010000'                            0198
         BNO   @RF00198                                            0198
         TM    RPLBWD(RRPL),B'00010000'                            0198
         BNO   @RF00198                                            0198
*         DO;                       /* YES                   @X04SVES*/
*           RPLERREG='08'X;         /* SET LOGICAL ERROR     @X04SVES*/
         MVI   RPLERREG(RRPL),X'08'                                0200
*           RPLERRCD=RPLINVP;       /* SET ILLEGAL OPTIONS   @X04SVES*/
         MVI   RPLERRCD(RRPL),X'68'                                0201
*           CALL EXIT;              /* EXIT TO CALLER        @X04SVMR*/
         BAL   @14,EXIT                                            0202
*         END;                      /*                       @X04SVES*/
*       IF RPLSKP=ON&               /* SKIP SEQUENTIAL REQUEST       */
*           RPLREQ^=RPLPOINT&       /* AND NOT POINT                 */
*           PLHINVAL=OFF&           /* AND POSITION EXISTS           */
*           PLHBWD^=ON&             /* AND LAST DIRECTION WASNT    0204
*                                      BACKWARD              @X04SVES*/
*           PLH1ST=OFF THEN         /* AND NOT FIRST TIME            */
@RF00198 TM    RPLSKP(RRPL),B'00010000'                            0204
         BNO   @RF00204                                            0204
         CLI   RPLREQ(RRPL),3                                      0204
         BE    @RF00204                                            0204
         TM    PLHINVAL(RPLH),B'00000010'                          0204
         BNZ   @RF00204                                            0204
         TM    PLHBWD(RPLH),B'00010000'                            0204
         BO    @RF00204                                            0204
         TM    PLH1ST(RPLH),B'01000000'                            0204
         BNZ   @RF00204                                            0204
*         DO;                       /* YES                           */
*           IF RWORK1->KEY(1:RWORK2)/* IS KEY LESS THAN OR           */
*               ^>PLHKEY(1:RWORK2) THEN/* EQUAL TO KEY IN PLH        */
         L     @12,PLHKEYPT(,RPLH)                                 0206
         LR    @10,RWORK2                                          0206
         BCTR  @10,0                                               0206
         EX    @10,@SC01026                                        0206
         BH    @RF00206                                            0206
*             DO;                   /* YES                           */
*               IF(RWORK1->KEY(1:RWORK2)/* IS KEY SMALLER, OR IF     */
*                   <PLHKEY(1:RWORK2))×/* EQUAL IS THIS GET          */
*                   (RPLREQ=RPLGET& /* WITHOUT POINT                 */
*                   PLHRCODE^=RPLPOINT) THEN/* ON PREVIOUS REQUEST   */
         EX    @10,@SC01026                                        0208
         BL    @RT00208                                            0208
         CLI   RPLREQ(RRPL),0                                      0208
         BNE   @RF00208                                            0208
         CLI   PLHRCODE(RPLH),3                                    0208
         BE    @RF00208                                            0208
@RT00208 DS    0H                                                  0209
*                 DO;               /* YES                           */
*                   RPLERREG='08'X; /* SET LOGICAL ERROR             */
         MVI   RPLERREG(RRPL),X'08'                                0210
*                   RPLERRCD=RPLSEQCK;/* SET SEQUENCE ERROR          */
         MVI   RPLERRCD(RRPL),X'0C'                                0211
*                   CALL EXIT;      /* EXIT TO CALLER        @X04SVMR*/
         BAL   @14,EXIT                                            0212
*                 END;              /*                               */
*             END;                  /*                               */
@RF00208 DS    0H                                                  0215
*         END;                      /*                               */
@RF00206 DS    0H                                                  0216
*       IF RWORK1^=RWORK3 THEN      /* IS ARG IN PLHKEY              */
@RF00204 CR    RWORK1,RWORK3                                       0216
         BE    @RF00216                                            0216
*         DO;                       /* NO.                           */
*           IF RPLGEN=ON&RPLBWD=OFF THEN/* IS THIS GENERIC REQUEST 0218
*                                                            @X04SVES*/
         TM    RPLGEN(RRPL),B'00000010'                            0218
         BNO   @RF00218                                            0218
         TM    RPLBWD(RRPL),B'00010000'                            0218
         BNZ   @RF00218                                            0218
*             DO;                   /* YES                           */
*               IF AMDKEYLN>RPLKEYL /* IS THE GENERIC KEY LESS       */
*                 THEN              /* THAN THE AMD KEY LENGTH       */
         L     @12,AMBDSB(,RAMB)                                   0220
         LH    @12,AMDKEYLN(,@12)                                  0220
         LH    @10,RPLKEYL(,RRPL)                                  0220
         CR    @12,@10                                             0220
         BNH   @RF00220                                            0220
*                 DO;               /* YES                           */
*                   PLHKEY(RPLKEYL+1:AMDKEYLN)=/* ZERO OUT THE BYTES
*                                      IN                            */
*                       PLHKEY(RPLKEYL+1:AMDKEYLN)&&/* THE         0222
*                                      PLACEHOLDER KEY NOT           */
*                       PLHKEY(RPLKEYL+1:AMDKEYLN);/* INCLUDED BY  0222
*                                      GENERIC LENGTH SPECIFICATION  */
         L     @09,PLHKEYPT(,RPLH)                                 0222
         ALR   @09,@10                                             0222
         SLR   @12,@10                                             0222
         BCTR  @12,0                                               0222
         EX    @12,@SX01028                                        0222
*                 END;              /*                               */
*             END;                  /*                               */
@RF00220 DS    0H                                                  0225
*           PLHKEY(1:RWORK2)=RWORK1->/* MOVE THE KEY INTO            */
*               KEY(1:RWORK2);      /* THE PLACEHOLDER               */
@RF00218 L     @12,PLHKEYPT(,RPLH)                                 0225
         LR    @10,RWORK2                                          0225
         BCTR  @10,0                                               0225
         EX    @10,@SM01030                                        0225
*           RWORK1=ADDR(PLHKEY);    /*                               */
         LR    RWORK1,@12                                          0226
*         END;                      /* END OF ARG NOT IN PLH         */
*       RESPECIFY                                                  0228
*         IDAPLHDR BASED(AMBPH);    /*                       @ZA11110*/
@RF00216 DS    0H                                                  0229
*       IF AMBPUG=ON&               /* AIX W/ UPG            @ZA11110*/
*           (PLHINVAL=OFF&          /* NO POSITION           @ZA11110*/
*           PLH1ST=OFF) THEN        /* NOT FIRST             @ZA11110*/
         TM    AMBPUG(RAMB),B'10000000'                            0229
         BNO   @RF00229                                            0229
         TM    PLHINVAL(RPLH),B'01000010'                          0229
         BNZ   @RF00229                                            0229
*         DO;                       /*                       @ZA11110*/
*           IXSARG=RWORK1;          /* SAVE ARG              @ZA11110*/
         L     @12,PLHISPLP(,RPLH)                                 0231
         ST    RWORK1,IXSARG(,@12)                                 0231
*           RBUFC=0;                /* SUB ALL               @ZA11110*/
         SLR   RBUFC,RBUFC                                         0232
*I01:                                                              0233
*           DO;                     /* IDACALL(IDASBF)               */
I01      DS    0H                                                  0234
*             CALL IDASBF;          /* EXIT TO IDASBF                */
         L     @15,@CV00929                                        0234
         BALR  @14,@15                                             0234
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I01;                /* SUB BUFFERS           @ZA11110*/
*           IF RPLERREG^=0 THEN     /* ANY ERROR             @ZA11110*/
         CLI   RPLERREG(RRPL),0                                    0240
         BE    @RF00240                                            0240
*             CALL EXIT;            /* EXIT                  @ZA11110*/
         BAL   @14,EXIT                                            0241
*           RWORK1=IXSARG;          /* RESTORE ARG           @ZA11110*/
@RF00240 L     @12,PLHISPLP(,RPLH)                                 0242
         L     RWORK1,IXSARG(,@12)                                 0242
*         END;                      /*                       @ZA11110*/
*       IF RPLSKP=OFF×              /* NOT SKIP SEQUENTIAL           */
*           RPLREQ=RPLPOINT×        /* OR IF POINT                   */
*           PLHINVAL=ON×            /* OR POSITION NOT SET           */
*           PLHKEYMD=OFF×           /* OR NOT KEYED          @XA05682*/
*           PLH1ST=ON×              /* OR 1ST REQUEST        @ZA11110*/
*           PLHRSTRT=ON             /* OR BAD PUT POSITION   @ZA11110*/
*         THEN                      /*                               */
@RF00229 TM    RPLSKP(RRPL),B'00010000'                            0244
         BZ    @RT00244                                            0244
         CLI   RPLREQ(RRPL),3                                      0244
         BE    @RT00244                                            0244
         TM    PLHINVAL(RPLH),B'00000010'                          0244
         BO    @RT00244                                            0244
         TM    PLHKEYMD(RPLH),B'00100000'                          0244
         BZ    @RT00244                                            0244
         TM    PLH1ST(RPLH),B'01000000'                            0244
         BO    @RT00244                                            0244
         TM    PLHRSTRT(RPLH),B'10000000'                          0244
         BNO   @RF00244                                            0244
@RT00244 DS    0H                                                  0245
*         DO;                       /* NO                            */
*           RAMB=AMBLIX;            /* GET INDEX AMB         @ZA27964*/
         L     @12,RPLDACB(,RRPL)                                  0246
         L     @12,ACBAMBL(,@12)                                   0246
         L     RAMB,AMBLIX(,@12)                                   0246
*           RWORK4=AMDNIL;          /* SET INITIAL LEVEL OF          */
         L     @12,AMBDSB(,RAMB)                                   0247
         LH    RWORK4,AMDNIL(,@12)                                 0247
*           IXSILN=RWORK4;          /* SEARCH TO TOP OF INDEX        */
         L     @10,PLHISPLP(,RPLH)                                 0248
         STC   RWORK4,IXSILN(,@10)                                 0248
*           IXSSTRBA=AMDHLRBA;      /* SET RBA INTO WORKAREA         */
         L     @12,AMDHLRBA(,@12)                                  0249
         ST    @12,IXSSTRBA(,@10)                                  0249
*           PLHRSTRT=OFF;           /* CLEAR BAD PUT FLAG    @ZA11110*/
         NI    PLHRSTRT(RPLH),B'01111111'                          0250
*         END;                      /*                               */
*       ELSE                        /*                               */
*         DO;                       /* SKIP SEQUENTIAL, SET          */
         B     @RC00244                                            0252
@RF00244 DS    0H                                                  0253
*           IXSILN=ONE;             /* INITIAL LEVEL AT ONE          */
         L     @12,PLHISPLP(,RPLH)                                 0253
         MVI   IXSILN(@12),X'01'                                   0253
*           IXSSTRBA=PLHSSRBA;      /* SET RBA FROM PLH              */
         L     @10,PLHSSRBA(,RPLH)                                 0254
         ST    @10,IXSSTRBA(,@12)                                  0254
*         END;                      /*                               */
*DRLA:                                                             0256
*       IXSTLN=ONE;                 /* SET TERMINAL LVL TO 1         */
@RC00244 DS    0H                                                  0256
DRLA     L     @12,PLHISPLP(,RPLH)                                 0256
         MVI   IXSTLN(@12),X'01'                                   0256
*       IXSARG=RWORK1;              /* SET ARG. ADDRESS              */
         ST    RWORK1,IXSARG(,@12)                                 0257
*       RAMB=AMBLDTA;               /* POINT TO DATA AMB             */
         L     @12,RPLDACB(,RRPL)                                  0258
         L     @12,ACBAMBL(,@12)                                   0258
         L     RAMB,AMBLDTA(,@12)                                  0258
*       RESPECIFY                                                  0259
*         RPARM1 RESTRICTED;        /* OBTAIN RPARM1                 */
*       RPARM1=PLHDIOB;             /* POINT TO DATA IOB             */
*                                                                  0260
         L     RPARM1,PLHDIOB(,RPLH)                               0260
*       /*************************************************************/
*       /*                                                           */
*       /* WAIT ON PREVIOUS I/O BEFORE INDEX SEARCH IF NSR   @ZA07549*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0261
*       IF AMBGSR=OFF&              /* NOT GSR OR            @ZA07549*/
*           AMBLSR=OFF THEN         /* LSR THEN DO WAIT      @ZA07549*/
         TM    AMBGSR(RAMB),B'01100000'                            0261
         BNZ   @RF00261                                            0261
*I02:                                                              0262
*         DO;                       /* IDACALL(IDAWAIT)              */
I02      DS    0H                                                  0263
*           CALL IDAWAIT;           /* EXIT TO IDAWAIT               */
         L     @15,@CV00930                                        0263
         BALR  @14,@15                                             0263
*           GEN(BALR @11,0);        /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*           GEN(USING *,@11);       /* ESTABLISH ADDRESSING          */
         USING *,@11
*           GEN(L     @11,=A(@PSTART));/* RELOAD BASE                */
         L     @11,=A(@PSTART)
*           GEN(USING @PSTART,@11); /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*         END I02;                                                 0268
*       RESPECIFY                                                  0269
*         RPARM1 UNRSTD;            /* RELEASE RPARM1                */
@RF00261 DS    0H                                                  0270
*       RAMB=AMBLIX;                /* POINT AMB REGISTER TO INDEX   */
         L     @12,RPLDACB(,RRPL)                                  0270
         L     @12,ACBAMBL(,@12)                                   0270
         L     RAMB,AMBLIX(,@12)                                   0270
*I03:                                                              0271
*       DO;                         /* IDACALL(IDA019RB)             */
I03      DS    0H                                                  0272
*         CALL IDA019RB;            /* EXIT TO IDA019RB              */
         L     @15,@CV00932                                        0272
         BALR  @14,@15                                             0272
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I03;                    /* CALL INDEX SEARCH             */
*       RESPECIFY                                                  0278
*        (RWORK1,                                                  0278
*         RWORK2,                                                  0278
*         RWORK3,                                                  0278
*         RWORK4) RSTD;                                            0278
*       IF RPLERREG^=ZERO THEN      /* ANY I/O ERRORS IN RB          */
         CLI   RPLERREG(RRPL),0                                    0279
         BE    @RF00279                                            0279
*         CALL EXIT;                /* EXIT TO CALLER        @X04SVMR*/
         BAL   @14,EXIT                                            0280
*       RAMB=AMBLDTA;               /* POINT AMB REGISTER BACK TO  0281
*                                      DATA                          */
@RF00279 L     @12,RPLDACB(,RRPL)                                  0281
         L     @12,ACBAMBL(,@12)                                   0281
         L     RAMB,AMBLDTA(,@12)                                  0281
*       RWORK4=IXSHEP+LENGTH(IBFLPF)+/* POINT TO THE POINTER         */
*           LENGTH(IBFLPL);         /* FIELD OF THE ENTRY            */
         L     @12,PLHISPLP(,RPLH)                                 0282
         LA    RWORK4,2                                            0282
         AL    RWORK4,IXSHEP(,@12)                                 0282
*       RWORK2=RBUFC->IXHPTLS;      /* PICK UP MASK BYTE FROM        */
         SLR   RWORK2,RWORK2                                       0283
         IC    RWORK2,IXHPTLS(,RBUFC)                              0283
*       RWORK1=ZERO;                /* INDEX HEADER                  */
         SLR   RWORK1,RWORK1                                       0284
*       GEN;                                                       0285
*                                          /*                        */
         EX    RWORK2,INSERT               /* PICK UP INDEX ENTRY    */
*       RWORK2=RWORK1*AMDCINV+RBUFC->IXHBRBA;/* CONVERT              */
         L     @12,AMBDSB(,RAMB)                                   0286
         LR    @15,RWORK1                                          0286
         M     @14,AMDCINV(,@12)                                   0286
         AL    @15,IXHBRBA(,RBUFC)                                 0286
         LR    RWORK2,@15                                          0286
*       RPLDDDD=RWORK2;             /* ENTRY FROM THE INDEX INTO A 0287
*                                      TRUE RBA                      */
         ST    RWORK2,RPLDDDD(,RRPL)                               0287
*       IF(IXSNOSR^=ZERO&           /* SPANNED RECORD        @X04SVES*/
*           RPLREQ=RPLGET)×         /* GET OR                @X04SVES*/
*           (RPLREQ=RPLPOINT&       /* POINT                 @X04SVES*/
*           RPLSEQ=ON) THEN         /* SEQUENTIAL?           @X04SVMR*/
         L     @12,PLHISPLP(,RPLH)                                 0288
         CLI   IXSNOSR(@12),0                                      0288
         BE    @GL00018                                            0288
         CLI   RPLREQ(RRPL),0                                      0288
         BE    @RT00288                                            0288
@GL00018 CLI   RPLREQ(RRPL),3                                      0288
         BNE   @RF00288                                            0288
         TM    RPLSEQ(RRPL),B'00100000'                            0288
         BNO   @RF00288                                            0288
@RT00288 DS    0H                                                  0289
*         DO;                       /* YES                   @X04SVES*/
*           PLHASKBF=ON;            /* ASK FOR BUFFERS       @X04SVES*/
         OI    PLHASKBF(RPLH),B'00100000'                          0290
*           RESPECIFY                                              0291
*             RPARM1 RSTD;          /*                       @X04SVES*/
*           IF(IXSNOSR^=ZERO&       /* SPANNED RECORD        @X04SVMR*/
*               RPLREQ=RPLGET) THEN /* GET.                  @X04SVMR*/
         L     @10,PLHISPLP(,RPLH)                                 0292
         CLI   IXSNOSR(@10),0                                      0292
         BE    @RF00292                                            0292
         CLI   RPLREQ(RRPL),0                                      0292
         BNE   @RF00292                                            0292
*             RPARM1=IXSNOSR+ONE;   /* GET NO. BUFFERS       @X04SVES*/
         LA    RPARM1,1                                            0293
         SLR   @09,@09                                             0293
         IC    @09,IXSNOSR(,@10)                                   0293
         ALR   RPARM1,@09                                          0293
*           ELSE                    /* POINT-SEQ             @X04SVMR*/
*             RPARM1=ZERO;          /* ASK FOR MAX.          @X04SVMR*/
         B     @RC00292                                            0294
@RF00292 SLR   RPARM1,RPARM1                                       0294
*I04:                                                              0295
*           DO;                     /* IDACALL(IDAABF)               */
@RC00292 DS    0H                                                  0295
I04      DS    0H                                                  0296
*             CALL IDAABF;          /* EXIT TO IDAABF                */
         L     @15,@CV00924                                        0296
         BALR  @14,@15                                             0296
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I04;                /* GO ADD BUFFERS        @X04SVES*/
*           RESPECIFY                                              0302
*             RPARM1 UNRSTD;        /*                       @X04SVES*/
*           IF RPLREQ=RPLPOINT×     /* POINT REQUEST         @X04SVES*/
*               RPLUPD=ON×          /* OR UPDATE             @X04SVES*/
*               RPLNSP=ON THEN      /* OR NOTE POS.          @X04SVES*/
         CLI   RPLREQ(RRPL),3                                      0303
         BE    @RT00303                                            0303
         TM    RPLUPD(RRPL),B'00000011'                            0303
         BZ    @RF00303                                            0303
@RT00303 DS    0H                                                  0304
*             PLHASKBF=ON;          /* SET ASK ON            @X04SVES*/
         OI    PLHASKBF(RPLH),B'00100000'                          0304
*           PLHRAHD=ON;             /* SET READ AHEAD        @X04SVES*/
@RF00303 OI    PLHRAHD(RPLH),B'01000000'                           0305
*           RWORK2=RPLDDDD;         /* RESET REG             @X04SVES*/
         L     RWORK2,RPLDDDD(,RRPL)                               0306
*         END;                      /*                       @X04SVES*/
*     END;                          /*                               */
*   ELSE                            /* REQUEST BY RBA, NOT KEY       */
*     DO;                           /*                               */
         B     @RC00162                                            0309
@RF00162 DS    0H                                                  0310
*       RESPECIFY                                                  0310
*        (RWORK3,                                                  0310
*         RWORK4) UNRSTD;           /*                               */
*       RFY                                                        0311
*         RPARM1 RSTD;              /* USE RPARM1                    */
*       IF RPLREQ^=RPLPUT THEN      /* IF REQUEST IS NOT PUT         */
         CLI   RPLREQ(RRPL),1                                      0312
         BE    @RF00312                                            0312
*         DO;                       /* CHECK FOR LAST RECORD       0313
*                                      POSITIONING           @X04SVES*/
*           IF RPLLRD=ON THEN       /* IS IT REQUESTED@X04SVES       */
         TM    RPLLRD(RRPL),B'00001000'                            0314
         BNO   @RF00314                                            0314
*             DO;                   /* YES                   @X04SVES*/
*               IF RPLBWD=OFF THEN  /* IF FORWARD            @X04SVES*/
         TM    RPLBWD(RRPL),B'00010000'                            0316
         BNZ   @RF00316                                            0316
*                 DO;               /* ERROR CASE            @X04SVES*/
*                   RPLERREG='08'X; /* SET LOG ERROR         @X04SVES*/
         MVI   RPLERREG(RRPL),X'08'                                0318
*                   RPLERRCD=RPLINVP;/* SET BAD PARM         @X04SVES*/
         MVI   RPLERRCD(RRPL),X'68'                                0319
*                   CALL EXIT;      /* EXIT TO CALLER        @X04SVMR*/
         BAL   @14,EXIT                                            0320
*                 END;              /*                       @X04SVES*/
*               RWORK1=AMDPARDB;    /* POINT TO FIRST ARDB   @X04SVES*/
@RF00316 L     @10,AMBDSB(,RAMB)                                   0322
         L     RWORK1,AMDPARDB(,@10)                               0322
*               DO WHILE RWORK1->ARDEOD=OFF;/* LOOP TO LOCATE THE  0323
*                                      ARDB HOLDING END OF DATA    0323
*                                                            @X04SVES*/
         B     @DE00323                                            0323
@DL00323 DS    0H                                                  0324
*                 RWORK1=RWORK1->ARDNPTR;/* MOVE TO THE NEXT ARDB  0324
*                                                            @X04SVES*/
         L     RWORK1,ARDNPTR(,RWORK1)                             0324
*               END;                /*                       @X04SVES*/
@DE00323 TM    ARDEOD(RWORK1),B'00001000'                          0325
         BZ    @DL00323                                            0325
*               RPLDDDD=RWORK1->ARDHRBA-/* SET RBA TO LAST CI      0326
*                                                            @X04SVES*/
*                   AMDCINV;        /*                       @X04SVES*/
         L     @10,AMBDSB(,RAMB)                                   0326
         L     @07,ARDHRBA(,RWORK1)                                0326
         SL    @07,AMDCINV(,@10)                                   0326
         ST    @07,RPLDDDD(,RRPL)                                  0326
*             END;                  /*                       @X04SVES*/
*           ELSE                    /* NO END OF D.S.        @X04SVES*/
*             RPLDDDD=RBA;          /* ACCEPT USER RBA@X04SVES       */
         B     @RC00314                                            0328
@RF00314 L     @10,RBA(,RPARM1)                                    0328
         ST    @10,RPLDDDD(,RRPL)                                  0328
*         END;                      /*                       @X04SVES*/
@RC00314 DS    0H                                                  0330
*       IF RPLREQ=RPLPOINT&         /* IS IT POINT           @X04SVMR*/
*           RPLSEQ=ON THEN          /* SEQ? IF SO,           @X04SVMR*/
@RF00312 CLI   RPLREQ(RRPL),3                                      0330
         BNE   @RF00330                                            0330
         TM    RPLSEQ(RRPL),B'00100000'                            0330
         BNO   @RF00330                                            0330
*         DO;                       /* GET MORE BFRS.        @X04SVMR*/
*           RPARM1=ZERO;            /* MAXIMUM REQ           @X04SVMR*/
         SLR   RPARM1,RPARM1                                       0332
*I05:                                                              0333
*           DO;                     /* IDACALL(IDAABF)               */
I05      DS    0H                                                  0334
*             CALL IDAABF;          /* EXIT TO IDAABF                */
         L     @15,@CV00924                                        0334
         BALR  @14,@15                                             0334
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I05;                /* ADD BUFFERS           @X04SVMR*/
*         END;                      /* END POINT SEQ         @X04SVMR*/
*       RFY                                                        0341
*         RPARM1 UNRSTD;            /* RELEASE RPARM1                */
@RF00330 DS    0H                                                  0342
*       RWORK2=RPLDDDD-RPLDDDD//AMDCINV;/* CALCULATE RBA OF THE    0342
*                                      CONTROL INTERVAL WHICH      0342
*                                      CONTAINS THE RECORD           */
         L     @12,RPLDDDD(,RRPL)                                  0342
         L     @10,AMBDSB(,RAMB)                                   0342
         LR    @07,@12                                             0342
         SLR   RWORK2,RWORK2                                       0342
         D     RWORK2,AMDCINV(,@10)                                0342
         SLR   @12,RWORK2                                          0342
         LR    RWORK2,@12                                          0342
*       RWORK1=AMDPARDB;            /* POINT TO 1ST ARDB             */
         L     RWORK1,AMDPARDB(,@10)                               0343
*       DO;                         /* CHECK RBA FOR RANGE           */
*DRLC0:                                                            0345
*         IF RWORK1->ARDERBA^=ZERO THEN/* IS SPACE ALLOCATED         */
DRLC0    L     @12,ARDERBA(,RWORK1)                                0345
         LTR   @12,@12                                             0345
         BZ    @RF00345                                            0345
*           DO;                     /* YES, PROCEED                  */
*             IF RWORK2^<RWORK1->ARDHRBA THEN/* RBA >×= HI USED RBA  */
         CL    RWORK2,ARDHRBA(,RWORK1)                             0347
         BL    @RF00347                                            0347
*               DO;                 /* YES                           */
*                 IF(RWORK2<RWORK1->ARDERBA)×/* RBA < HI ALLOC RBA OR*/
*                     ((RWORK2^<RWORK1->ARDERBA)&/* RBA > HIGHEST RBA*/
*                     (RWORK1->ARDEOD=ON)) THEN/* IN THE DATA SET    */
         CLR   RWORK2,@12                                          0349
         BL    @RT00349                                            0349
         CLR   RWORK2,@12                                          0349
         BL    @RF00349                                            0349
         TM    ARDEOD(RWORK1),B'00001000'                          0349
         BNO   @RF00349                                            0349
@RT00349 DS    0H                                                  0350
*                   DO;             /* YES                           */
*                     RPLERREG='08'X;/* SET LOGICAL ERROR            */
         MVI   RPLERREG(RRPL),X'08'                                0351
*                     RPLERRCD=RPLINRBA;/* SET INVALID RBA           */
         MVI   RPLERRCD(RRPL),X'20'                                0352
*                     CALL EXIT;    /* EXIT TO CALLER        @X04SVMR*/
         BAL   @14,EXIT                                            0353
*                   END;            /*                               */
*               END;                /*                               */
@RF00349 DS    0H                                                  0356
*           END;                    /*                               */
@RF00347 DS    0H                                                  0357
*         DO;                       /*                               */
@RF00345 DS    0H                                                  0358
*           IF RWORK1->ARDNPTR=ZERO THEN/* ANOTHER ARDB FOLLOW       */
         L     @12,ARDNPTR(,RWORK1)                                0358
         LTR   @12,@12                                             0358
         BZ    @RT00358                                            0358
*             GO TO DRLC;           /* NO, FINISHED HERE             */
*           DO;                     /*                               */
*             RWORK1=RWORK1->ARDNPTR;/* ADDRESS NEXT ARDB            */
         LR    RWORK1,@12                                          0361
*             GO TO DRLC0;          /* BACK TO TEST NEXT ARDB        */
         B     DRLC0                                               0362
*           END;                    /*                               */
*         END;                      /*                               */
*       END;                        /*                               */
*     END;                          /*                               */
*   RESPECIFY                                                      0367
*    (RWORK1) UNRSTD;               /*                               */
@RC00162 DS    0H                                                  0368
*   RESPECIFY                                                      0368
*    (RPARM1) RSTD;                 /*                               */
*DRLC:                                                             0369
*   IF RPLREQ=RPLPUT×RPLUPD=ON      /* IS THIS A PUT OR GET FOR    0369
*                                      UPDATE REQUEST                */
*     THEN                          /*                               */
DRLC     CLI   RPLREQ(RRPL),1                                      0369
         BE    @RT00369                                            0369
         TM    RPLUPD(RRPL),B'00000010'                            0369
         BNO   @RF00369                                            0369
@RT00369 DS    0H                                                  0370
*     DO;                           /* YES, SET PLH IN               */
*       PLHRDEXC=ON;                /* EXCLUSIVE USE MODE FLAG       */
         OI    PLHRDEXC(RPLH),B'00001000'                          0371
*     END;                          /*                               */
*   ELSE                            /*                               */
*     PLHRDEXC=OFF;                 /* ASSURE NO EXCLUSIVE USE       */
         B     @RC00369                                            0373
@RF00369 NI    PLHRDEXC(RPLH),B'11110111'                          0373
*   RPARM1=RPLDDDD-RPLDDDD//AMDCINV;/* SET RPARM1 TO RBA             */
@RC00369 L     @10,RPLDDDD(,RRPL)                                  0374
         L     @07,AMBDSB(,RAMB)                                   0374
         LR    @09,@10                                             0374
         SLR   @08,@08                                             0374
         D     @08,AMDCINV(,@07)                                   0374
         SLR   @10,@08                                             0374
         LR    RPARM1,@10                                          0374
*I06:                                                              0375
*   DO;                             /* IDACALL(IDAGRB)               */
I06      DS    0H                                                  0376
*     CALL IDAGRB;                  /* EXIT TO IDAGRB                */
         L     @15,@CV00928                                        0376
         BALR  @14,@15                                             0376
*     GEN(BALR @11,0);              /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*     GEN(USING *,@11);             /* ESTABLISH ADDRESSING          */
         USING *,@11
*     GEN(L     @11,=A(@PSTART));   /* RELOAD BASE                   */
         L     @11,=A(@PSTART)
*     GEN(USING @PSTART,@11);       /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*   END I06;                        /* CALL ON BUFFER MGR TO         */
*   RESPECIFY                                                      0382
*    (RWORK2) RSTD;                 /* READ THE RECORD               */
*   PLHRAHD=OFF;                    /* RESET FLAG            @OZ04910*/
         NI    PLHRAHD(RPLH),B'10111111'                           0383
*   IF RPLERREG^='00'X              /* WAS THERE AN ERROR            */
*     THEN                          /*                               */
         CLI   RPLERREG(RRPL),0                                    0384
         BE    @RF00384                                            0384
*     DO;                           /* YES, DROP PLH         @ZA07544*/
*       PLHINVAL=ON;                /* MARK INVALID          @ZA07544*/
         OI    PLHINVAL(RPLH),B'00000010'                          0386
*       CALL EXIT;                  /* EXIT TO CALLER        @X04SVMR*/
         BAL   @14,EXIT                                            0387
*     END;                          /* END ERROR CODE        @ZA07544*/
*   RESPECIFY                                                      0389
*    (RPARM1) UNRSTD;                                              0389
@RF00384 DS    0H                                                  0390
*DLRB:                                                             0390
*   PLHRECP=BUFCBAD;                /* INITIALIZE RECORD PTR.        */
DLRB     L     @12,PLHDBUFC(,RPLH)                                 0390
         L     @10,BUFCBAD(,@12)                                   0390
         ST    @10,PLHRECP(,RPLH)                                  0390
*   PLHRDFP=BUFCBAD+AMDCINV-        /* INITIALIZE RDF PTR. TO        */
*       LENGTH(IDACIDF);            /* BEGINNING OF CIDF             */
*                                                                  0391
         L     @07,AMBDSB(,RAMB)                                   0391
         AL    @10,AMDCINV(,@07)                                   0391
         SL    @10,@CF00067                                        0391
         ST    @10,PLHRDFP(,RPLH)                                  0391
*   /*****************************************************************/
*   /*                                                               */
*   /* VALIDATE THE CIDF                                     @ZA31009*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0392
*   IF PLHRDFP->IDACIDF=ZERO THEN   /* IF CIDF IS ZERO THEN  @ZA31009*/
         ICM   @07,15,IDACIDF(@10)                                 0392
         BNZ   @RF00392                                            0392
*     DO;                           /* TREAT AS IF AN I/0 ERROR    0393
*                                                            @ZA31009*/
*       PLHINVAL=ON;                /* LOSE POSITION         @ZA31009*/
         OI    PLHINVAL(RPLH),B'00000010'                          0394
*       RPLERREG='08';              /* SET LOGICAL ERROR     @ZA31009*/
         L     @10,@CF00986                                        0395
         STC   @10,RPLERREG(,RRPL)                                 0395
*       RPLERRCD=RPLINCNV;          /* SET INVALID CI        @ZA31009*/
         MVI   RPLERRCD(RRPL),X'9C'                                0396
*       RPLDDDD=BUFCDDDD;           /* PASS BACK CI IN ERROR @ZA31009*/
         L     @12,BUFCDDDD(,@12)                                  0397
         ST    @12,RPLDDDD(,RRPL)                                  0397
*       CALL EXIT;                  /* EXIT MODULE           @ZA31009*/
         BAL   @14,EXIT                                            0398
*     END;                          /* END OF ZERO CIDF CODE @ZA31009*/
*   IF PLHRDFP->CIDFBUSY=ON THEN    /* IF CI SPLIT WAS INTERRUPTED 0400
*                                                            @ZA31009*/
@RF00392 L     @12,PLHRDFP(,RPLH)                                  0400
         TM    CIDFBUSY(@12),B'10000000'                           0400
         BNO   @RF00400                                            0400
*     DO;                           /* TRY TO CORRECT PROBLEM      0401
*                                                            @ZA31009*/
*I07:                                                              0402
*       DO;                         /* IDACALL(IDA019S6)             */
I07      DS    0H                                                  0403
*         CALL IDA019S6;            /* EXIT TO IDA019S6              */
         L     @15,@CV00931                                        0403
         BALR  @14,@15                                             0403
*         GEN(BALR @11,0);          /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*         GEN(USING *,@11);         /* ESTABLISH ADDRESSING          */
         USING *,@11
*         GEN(L     @11,=A(@PSTART));/* RELOAD BASE                  */
         L     @11,=A(@PSTART)
*         GEN(USING @PSTART,@11);   /* ESTABLISH ADDRESSING          */
         USING @PSTART,@11
*       END I07;                    /* CI REBUILD            @ZA31009*/
*       IF RPLERREG^=ZERO THEN      /* IF UNCORRECTABLE      @ZA31009*/
         CLI   RPLERREG(RRPL),0                                    0409
         BE    @RF00409                                            0409
*         DO;                       /* DONT CONTINUE         @ZA31009*/
*           PLHINVAL=ON;            /* LOSE POSITION         @ZA31009*/
         OI    PLHINVAL(RPLH),B'00000010'                          0411
*           CALL EXIT;              /* EXIT MODULE           @ZA31009*/
         BAL   @14,EXIT                                            0412
*         END;                      /* END OF CORRECTABLE CI CODE  0413
*                                                            @ZA31009*/
*       PLHRECP=BUFCBAD;            /* RESTORE RECORD POINTER      0414
*                                                            @ZA31009*/
@RF00409 L     @12,PLHDBUFC(,RPLH)                                 0414
         L     @12,BUFCBAD(,@12)                                   0414
         ST    @12,PLHRECP(,RPLH)                                  0414
*       PLHRDFP=BUFCBAD+AMDCINV-    /* RESTORE RDF POINTER   @ZA31009*/
*           LENGTH(IDACIDF);        /* TO START OF CIDF      @ZA31009*/
         L     @10,AMBDSB(,RAMB)                                   0415
         AL    @12,AMDCINV(,@10)                                   0415
         SL    @12,@CF00067                                        0415
         ST    @12,PLHRDFP(,RPLH)                                  0415
*     END;                          /* END OF CIDF BUSY CODE @ZA31009*/
*   PLHFSP=BUFCBAD+PLHRDFP->CIDFOSET;/* INIT FREE SPACE PTR          */
@RF00400 L     @12,PLHDBUFC(,RPLH)                                 0417
         L     @10,PLHRDFP(,RPLH)                                  0417
         LH    @07,CIDFOSET(,@10)                                  0417
         AL    @07,BUFCBAD(,@12)                                   0417
         ST    @07,PLHFSP(,RPLH)                                   0417
*   PLHRDFC=ONE;                    /* FORCE ROUTINE TO MOVE BACK TO
*                                      FIRST RDF ON FIRST PASS     0418
*                                      THROUGH                       */
         MVC   PLHRDFC(2,RPLH),@CH00053                            0418
*   PLHLRECL=ZERO;                  /* INITIALIZE TO ZERO            */
         SLR   @05,@05                                             0419
         ST    @05,PLHLRECL(,RPLH)                                 0419
*   IF RPLKEY=OFF THEN              /* IS THIS A KEYED REQUEST       */
         TM    RPLKEY(RRPL),B'10000000'                            0420
         BNZ   @RF00420                                            0420
*     DO;                           /*                               */
*       PLHKEYMD=OFF;               /* NOT IN KEYED MODE     @ZA14831*/
         NI    PLHKEYMD(RPLH),B'11011111'                          0422
*       IF RPLLRD=ON THEN           /* IS THIS SEARCH FOR LAST     0423
*                                                            @X04SVES*/
         TM    RPLLRD(RRPL),B'00001000'                            0423
         BNO   @RF00423                                            0423
*         DO;                       /* YES                   @X04SVES*/
*           RESPECIFY                                              0425
*             RPARM1 RSTD;          /*                       @X04SVES*/
*           RPARM1=PLHFSP+PLHRDFP-> /* SET POINTER           @X04SVES*/
*               CIDFLL;             /* TO RDF OF LAST RECORD IN THE
*                                      CI                    @X04SVES*/
         LH    RPARM1,CIDFLL(,@10)                                 0426
         ALR   RPARM1,@07                                          0426
*           IF PLHRECP=PLHFSP THEN  /* IS CI EMPTY           @X04SVES*/
         C     @07,PLHRECP(,RPLH)                                  0427
         BNE   @RF00427                                            0427
*             DO;                   /* YES                   @X04SVES*/
*               PLHRAHD=ON;         /* SET RD. AHD.          @X04SVES*/
         OI    PLHRAHD(RPLH),B'01000000'                           0429
*               RBUFC=PLHDBUFC;     /* SET RBUFC             @X04SVES*/
         L     @10,PLHDBUFC(,RPLH)                                 0430
         LR    RBUFC,@10                                           0430
*I08:                                                              0431
*               DO;                 /* IDACALL(IDAFREEB)             */
I08      DS    0H                                                  0432
*                 CALL IDAFREEB;    /* EXIT TO IDAFREEB              */
         L     @15,@CV00926                                        0432
         BALR  @14,@15                                             0432
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I08;            /* FREE BUFFER           @X04SVLP*/
*I09:                                                              0438
*               DO;                 /* IDACALL(IDAGNXT)              */
I09      DS    0H                                                  0439
*                 CALL IDAGNXT;     /* EXIT TO IDAGNXT               */
         L     @15,@CV00927                                        0439
         BALR  @14,@15                                             0439
*                 GEN(BALR @11,0);  /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                 GEN(USING *,@11); /* ESTABLISH ADDRESSING          */
         USING *,@11
*                 GEN(L     @11,=A(@PSTART));/* RELOAD BASE          */
         L     @11,=A(@PSTART)
*                 GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING     */
         USING @PSTART,@11
*               END I09;            /* GET THE NEXT RECORD IN      0444
*                                      BACKWARDS SEQUENCE    @X04SVES*/
*               IF RPLERREG^=ZERO THEN/* ANY ERRORS          @X04SVES*/
         CLI   RPLERREG(RRPL),0                                    0445
         BE    @RF00445                                            0445
*                 DO;               /* YES                   @X04SVES*/
*                   RPLDDDD=RPARM1; /* PASS BACK RBA         @ZA07544*/
         ST    RPARM1,RPLDDDD(,RRPL)                               0447
*                   PLHRAHD=OFF;    /* CANCEL RD AHD         @X04SVES*/
         NI    PLHRAHD(RPLH),B'10111111'                           0448
*                   PLHINVAL=ON;    /* PLH INVALID           @X04SVES*/
         OI    PLHINVAL(RPLH),B'00000010'                          0449
*                   CALL EXIT;      /* EXIT TO CALLER        @X04SVMR*/
         BAL   @14,EXIT                                            0450
*                 END;              /*                       @X04SVES*/
*               GO TO DLRB;         /* GO PROCESS THE RECORD @X04SVES*/
         B     DLRB                                                0452
*             END;                  /*                       @X04SVES*/
*           PLHRAHD=OFF;            /* CI IS NOT EMPTY@X04SVES       */
@RF00427 NI    PLHRAHD(RPLH),B'10111111'                           0454
*           RESPECIFY                                              0455
*            (RPARM1) RSTD;         /*                       @X04SVES*/
*           RPARM1=PLHFSP+PLHRDFP-> /* SET POINTER           @X04SVES*/
*               CIDFLL;             /* TO RDF OF LAST RECORD IN THE
*                                      CI                    @X04SVES*/
         L     @10,PLHRDFP(,RPLH)                                  0456
         LH    RPARM1,CIDFLL(,@10)                                 0456
         AL    RPARM1,PLHFSP(,RPLH)                                0456
*           IF RPARM1->RDFREPL=ON THEN/* IS THIS A COUNT RDF @X04SVES*/
         TM    RDFREPL(RPARM1),B'00001000'                         0457
         BNO   @RF00457                                            0457
*             RPARM1=RPARM1+LENGTH(IDARDF);/* YES MOVE TO NEXT RDF 0458
*                                                            @X04SVES*/
         AL    RPARM1,@CF00159                                     0458
*           RPLDDDD=BUFCDDDD+(PLHRDFP->/* SET RBA TO         @X04SVES*/
*               CIDFOSET)-(RPARM1-> /* RBA OF LAST           @X04SVES*/
*               RDFLL);             /* RECORD IN CI          @X04SVES*/
@RF00457 L     @10,PLHDBUFC(,RPLH)                                 0459
         L     @07,PLHRDFP(,RPLH)                                  0459
         LH    @07,CIDFOSET(,@07)                                  0459
         AL    @07,BUFCDDDD(,@10)                                  0459
         SLR   @10,@10                                             0459
         ICM   @10,3,RDFLL(RPARM1)                                 0459
         SLR   @07,@10                                             0459
         ST    @07,RPLDDDD(,RRPL)                                  0459
*         END;                      /*                       @X04SVES*/
*       IF RPLREQ=RPLPOINT&         /* IF POINT              @ZA11110*/
*           RPLBWD=ON&              /* IF BACKWARD MODE      @ZA11110*/
*           (BUFCBAD+AMDCINV-LENGTH(IDACIDF)-LENGTH(IDARDF))->RDF1ST=ON
*         THEN                      /* IF 1ST OR IMMED       @ZA11110*/
@RF00423 CLI   RPLREQ(RRPL),3                                      0461
         BNE   @RF00461                                            0461
         TM    RPLBWD(RRPL),B'00010000'                            0461
         BNO   @RF00461                                            0461
         L     @10,PLHDBUFC(,RPLH)                                 0461
         L     @07,AMBDSB(,RAMB)                                   0461
         L     @10,BUFCBAD(,@10)                                   0461
         AL    @10,AMDCINV(,@07)                                   0461
         AL    @10,@CF01036                                        0461
         TM    RDF1ST(@10),B'00010000'                             0461
         BNO   @RF00461                                            0461
*         DO;                       /* SEGMENT               @ZA11110*/
*           RPLBWD=OFF;             /* READ FORWARD          @ZA11110*/
         NI    RPLBWD(RRPL),B'11101111'                            0463
*           PLHRAHD=ON;             /* START READ AHEAD      @ZA11110*/
         OI    PLHRAHD(RPLH),B'01000000'                           0464
*           PLHNRBA=RPLDDDD;        /* SET FOR READ AHEAD    @ZA11110*/
         L     @10,RPLDDDD(,RRPL)                                  0465
         ST    @10,PLHNRBA(,RPLH)                                  0465
*           DO WHILE(BUFCBAD+AMDCINV-LENGTH(IDACIDF)-LENGTH(IDARDF))->
*                 RDF1ST=ON;        /* GET LAST SEG          @ZA11110*/
         B     @DE00466                                            0466
@DL00466 DS    0H                                                  0467
*             RBUFC=PLHDBUFC;       /* LOAD BUFFER ADDRESS   @ZA11110*/
         L     RBUFC,PLHDBUFC(,RPLH)                               0467
*I10:                                                              0468
*             DO;                   /* IDACALL(IDAFREEB)             */
I10      DS    0H                                                  0469
*               CALL IDAFREEB;      /* EXIT TO IDAFREEB              */
         L     @15,@CV00926                                        0469
         BALR  @14,@15                                             0469
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I10;              /* FREE BUFFER           @ZA11110*/
*I11:                                                              0475
*             DO;                   /* IDACALL(IDAGNXT)              */
I11      DS    0H                                                  0476
*               CALL IDAGNXT;       /* EXIT TO IDAGNXT               */
         L     @15,@CV00927                                        0476
         BALR  @14,@15                                             0476
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I11;              /* GET NEXT CI           @ZA11110*/
*             IF RPLERREG^='00'X THEN/* ANY ERROR?           @ZA11110*/
         CLI   RPLERREG(RRPL),0                                    0482
         BE    @RF00482                                            0482
*               DO;                 /*                       @ZA11110*/
*                 PLHINVAL=ON;      /* MARK INVALID          @ZA11110*/
         OI    PLHINVAL(RPLH),B'00000010'                          0484
*                 PLHRAHD=OFF;      /* RESET READ AHEAD      @ZA11110*/
         NI    PLHRAHD(RPLH),B'10111111'                           0485
*                 RPLBWD=ON;        /* RESET BACKWARD        @ZA11110*/
         OI    RPLBWD(RRPL),B'00010000'                            0486
*                 CALL EXIT;        /* EXIT MODULE           @ZA11110*/
         BAL   @14,EXIT                                            0487
*               END;                /*                       @ZA11110*/
*           END;                    /*                       @ZA11110*/
@RF00482 DS    0H                                                  0489
@DE00466 L     @10,PLHDBUFC(,RPLH)                                 0489
         L     @07,BUFCBAD(,@10)                                   0489
         L     @05,AMBDSB(,RAMB)                                   0489
         LR    @15,@07                                             0489
         AL    @15,AMDCINV(,@05)                                   0489
         LR    @05,@15                                             0489
         AL    @05,@CF01036                                        0489
         TM    RDF1ST(@05),B'00010000'                             0489
         BO    @DL00466                                            0489
*           RPLDDDD=BUFCDDDD;       /* RESET RBA             @ZA11110*/
         L     @10,BUFCDDDD(,@10)                                  0490
         ST    @10,RPLDDDD(,RRPL)                                  0490
*           PLHNRBA=RPLDDDD;        /* SET NEXT RBA          @ZA11110*/
         ST    @10,PLHNRBA(,RPLH)                                  0491
*           PLHRAHD=OFF;            /* RESET READ AHEAD      @ZA11110*/
         NI    PLHRAHD(RPLH),B'10111111'                           0492
*           RPLBWD=ON;              /* RESET BACKWARD        @ZA11110*/
         OI    RPLBWD(RRPL),B'00010000'                            0493
*           PLHRECP=BUFCBAD;        /* INIT RECORD PTR       @ZA11110*/
         ST    @07,PLHRECP(,RPLH)                                  0494
*           PLHRDFP=BUFCBAD+AMDCINV-/* INIT RDF PTR TO       @ZA11110*/
*               LENGTH(IDACIDF);    /* BEGINNING OF CIDF     @ZA11110*/
         SL    @15,@CF00067                                        0495
         ST    @15,PLHRDFP(,RPLH)                                  0495
*           PLHFSP=BUFCBAD+PLHRDFP->CIDFOSET;/* INIT         @ZA11110*/
         AH    @07,CIDFOSET(,@15)                                  0496
         ST    @07,PLHFSP(,RPLH)                                   0496
*           PLHRDFC=ONE;            /* INIT                  @ZA11110*/
         MVC   PLHRDFC(2,RPLH),@CH00053                            0497
*           PLHLRECL=ZERO;          /* ZERO RECORD LENGTH    @ZA11110*/
         SLR   @10,@10                                             0498
         ST    @10,PLHLRECL(,RPLH)                                 0498
*           PLHFRCNT=PLHBFRNO-1;    /* RESET FREE COUNT      @ZA11110*/
         SLR   @10,@10                                             0499
         IC    @10,PLHBFRNO(,RPLH)                                 0499
         BCTR  @10,0                                               0499
         STC   @10,PLHFRCNT(,RPLH)                                 0499
*         END;                      /*                       @ZA11110*/
*       RESPECIFY                                                  0501
*        (RPARM1) UNRSTD;           /*                       @ZA11110*/
@RF00461 DS    0H                                                  0502
*       DO WHILE PLHRECP<PLHFSP;    /* NO, ITS ADDRESSED             */
         B     @DE00502                                            0502
@DL00502 DS    0H                                                  0503
*         PLHRDFC=PLHRDFC-ONE;      /* REDUCE REPL. CTR BY 1         */
         LH    @12,PLHRDFC(,RPLH)                                  0503
         BCTR  @12,0                                               0503
         STH   @12,PLHRDFC(,RPLH)                                  0503
*         IF PLHRDFC=ZERO THEN      /* ARE THERE OTHER RECDS         */
         LTR   @12,@12                                             0504
         BNZ   @RF00504                                            0504
*           DO;                     /* OF SAME LENGTH--NO            */
*             RWORK2=PLHRDFP-LENGTH(IDARDF);/* MOVE PTR TO NEXT RDF  */
         LA    @12,3                                               0506
         L     RWORK2,PLHRDFP(,RPLH)                               0506
         SLR   RWORK2,@12                                          0506
*             PLHLRECL=RWORK2->RDFLL;/* PICK UP RECORD SIZE          */
         SLR   @10,@10                                             0507
         ICM   @10,3,RDFLL(RWORK2)                                 0507
         ST    @10,PLHLRECL(,RPLH)                                 0507
*             IF RWORK2->RDFCTNU=ON THEN/* IS THIS A REPLICATED      */
         TM    RDFCTNU(RWORK2),B'01000000'                         0508
         BNO   @RF00508                                            0508
*               DO;                 /* RECORD--YES                   */
*                 RWORK2=RWORK2-LENGTH(IDARDF);/* MOVE TO NEXT RDF   */
         SLR   RWORK2,@12                                          0510
*                 PLHRDFC=RWORK2->RDFLL;/* AND EXTRACT COUNT         */
         SLR   @12,@12                                             0511
         ICM   @12,3,RDFLL(RWORK2)                                 0511
         STH   @12,PLHRDFC(,RPLH)                                  0511
*                 PLHSAVE6=PLHRDFC; /* SAVE BEGINNING RDF COUNT    0512
*                                                            @X04SVES*/
         ST    @12,PLHSAVE6(,RPLH)                                 0512
*               END;                /*                               */
*             ELSE                  /*                               */
*               DO;                 /* NOT A REPLICATED RECORD       */
         B     @RC00508                                            0514
@RF00508 DS    0H                                                  0515
*                 PLHRDFC=ONE;      /* SO SET COUNT TO 1             */
         LA    @12,1                                               0515
         STH   @12,PLHRDFC(,RPLH)                                  0515
*                 PLHSAVE6=ONE;     /* SAVE COUNT            @X04SVES*/
         ST    @12,PLHSAVE6(,RPLH)                                 0516
*               END;                /*                               */
*             PLHRDFP=RWORK2;       /* SAVE RDF PTR IN PLH           */
@RC00508 ST    RWORK2,PLHRDFP(,RPLH)                               0518
*           END;                    /*                               */
*         DO;                       /*                               */
@RF00504 DS    0H                                                  0521
*           IF BUFCDDDD+(PLHRECP-BUFCBAD)/* DOES THE REQUESTED RBA   */
*               =RPLDDDD THEN       /* MATCH THIS RECORD RBA         */
         L     @12,PLHDBUFC(,RPLH)                                 0521
         L     @10,PLHRECP(,RPLH)                                  0521
         SL    @10,BUFCBAD(,@12)                                   0521
         AL    @10,BUFCDDDD(,@12)                                  0521
         CL    @10,RPLDDDD(,RRPL)                                  0521
         BNE   @RF00521                                            0521
*             DO;                   /* YES                           */
*               IF RPLBWD=ON THEN   /* WAS REQUEST FOR BACKWARD    0523
*                                      DIRECTION             @X04SVES*/
         TM    RPLBWD(RRPL),B'00010000'                            0523
         BNO   @RF00523                                            0523
*                 DO;               /*                       @X04SVES*/
*                   PLHBWD=ON;      /* YES REMEMBER IT       @X04SVES*/
         OI    PLHBWD(RPLH),B'00010000'                            0525
*                   PLHRDFC=PLHSAVE6-PLHRDFC+ONE;/* RESET COUNT FOR
*                                      BACKWARDS             @X04SVES*/
         L     @12,PLHSAVE6(,RPLH)                                 0526
         SH    @12,PLHRDFC(,RPLH)                                  0526
         AL    @12,@CF00053                                        0526
         STH   @12,PLHRDFC(,RPLH)                                  0526
*                 END;              /*                       @X04SVES*/
*               ELSE                /* NO, SHOW DIRECTION AS @X04SVES*/
*                 PLHBWD=OFF;       /* FORWARD               @X04SVES*/
         B     @RC00523                                            0528
@RF00523 NI    PLHBWD(RPLH),B'11101111'                            0528
*               PLHEFLGS=ZERO;      /* CLEAR PLH ERROR FLAGS         */
@RC00523 SLR   @12,@12                                             0529
         STH   @12,PLHEFLGS(,RPLH)                                 0529
*               CALL EXIT;          /* EXIT TO CALLER        @X04SVMR*/
         BAL   @14,EXIT                                            0530
*             END;                  /*                               */
*         END;                      /*                               */
@RF00521 DS    0H                                                  0533
*         PLHRECP=PLHRECP+PLHLRECL; /* POINT TO NEXT RECORD          */
         L     @12,PLHRECP(,RPLH)                                  0533
         AL    @12,PLHLRECL(,RPLH)                                 0533
         ST    @12,PLHRECP(,RPLH)                                  0533
*       END;                        /*                               */
@DE00502 CLC   PLHRECP(4,RPLH),PLHFSP(RPLH)                        0534
         BL    @DL00502                                            0534
*       DO;                         /* SINCE THE USER ASKED FOR AN 0535
*                                      RBA WHICH DOES NOT CORRESPOND
*                                      WITH A RECORD IN THIS DATA SET*/
*         RPLERREG='08'X;           /* SET ERROR INFORMATION         */
         MVI   RPLERREG(RRPL),X'08'                                0536
*         RPLERRCD=RPLINRBA;        /* IN RPL                        */
         MVI   RPLERRCD(RRPL),X'20'                                0537
*         GO TO DRL8;               /* SUBTRACT EXCESS BUFFS         */
         B     DRL8                                                0538
*       END;                        /*                               */
*     END;                          /*                               */
*   ELSE                            /*                               */
*     DO;                           /* KEYED REQUEST                 */
@RF00420 DS    0H                                                  0542
*       PLHKEYMD=ON;                /* IN KEYED MODE         @ZA14831*/
         OI    PLHKEYMD(RPLH),B'00100000'                          0542
*       RESPECIFY                                                  0543
*        (RWORK1,                                                  0543
*         RWORK2,                                                  0543
*         RWORK5) RSTD;             /*                               */
*       IF RPLGEN=ON&RPLBWD=OFF     /* IS REQUEST GENERIC    @X04SVES*/
*           &RPLREQ^=RPLPUT         /* AND NOT PUT           @XM09961*/
*         THEN                                                     0544
         TM    RPLGEN(RRPL),B'00000010'                            0544
         BNO   @RF00544                                            0544
         TM    RPLBWD(RRPL),B'00010000'                            0544
         BNZ   @RF00544                                            0544
         CLI   RPLREQ(RRPL),1                                      0544
         BE    @RF00544                                            0544
*         RWORK5=RPLKEYL;           /* YES--USE RPL KEY SIZE         */
         LH    RWORK5,RPLKEYL(,RRPL)                               0545
*       ELSE                        /* NO--USE THE FULL KEY          */
*         RWORK5=AMDKEYLN;          /* LENGTH FROM AMD               */
         B     @RC00544                                            0546
@RF00544 L     @12,AMBDSB(,RAMB)                                   0546
         LH    RWORK5,AMDKEYLN(,@12)                               0546
*       DO WHILE PLHRECP<PLHFSP;    /* SET SEARCH LIMIT              */
@RC00544 B     @DE00547                                            0547
@DL00547 DS    0H                                                  0548
*         PLHRDFC=PLHRDFC-ONE;      /* REDUCE REPL. CTR BY 1         */
         LH    @12,PLHRDFC(,RPLH)                                  0548
         BCTR  @12,0                                               0548
         STH   @12,PLHRDFC(,RPLH)                                  0548
*         IF PLHRDFC=ZERO THEN      /* ARE THERE OTHER RECDS         */
         LTR   @12,@12                                             0549
         BNZ   @RF00549                                            0549
*           DO;                     /* OF SAME LENGTH-NO             */
*             RWORK2=PLHRDFP-LENGTH(IDARDF);/* MOVE TO NEXT RDF      */
         LA    @12,3                                               0551
         L     RWORK2,PLHRDFP(,RPLH)                               0551
         SLR   RWORK2,@12                                          0551
*             PLHLRECL=RWORK2->RDFLL;/* PICK UP RECORD SIZE          */
         SLR   @10,@10                                             0552
         ICM   @10,3,RDFLL(RWORK2)                                 0552
         ST    @10,PLHLRECL(,RPLH)                                 0552
*             IF RWORK2->RDFCTNU=ON THEN/* IS THIS A REPLICATED      */
         TM    RDFCTNU(RWORK2),B'01000000'                         0553
         BNO   @RF00553                                            0553
*               DO;                 /* RECORD--YES                   */
*                 RWORK2=RWORK2-LENGTH(IDARDF);/* MOVE TO NEXT RDF   */
         SLR   RWORK2,@12                                          0555
*                 PLHRDFC=RWORK2->RDFLL;/* AND EXTRACT COUNT         */
         SLR   @12,@12                                             0556
         ICM   @12,3,RDFLL(RWORK2)                                 0556
         STH   @12,PLHRDFC(,RPLH)                                  0556
*                 PLHSAVE6=PLHRDFC; /* SAVE BEGINNING RDF COUNT    0557
*                                                            @X04SVES*/
         ST    @12,PLHSAVE6(,RPLH)                                 0557
*               END;                /*                               */
*             ELSE                  /* IF NOT A REPLICATE RDF        */
*               DO;                 /* THEN SET THE RECORD           */
         B     @RC00553                                            0559
@RF00553 DS    0H                                                  0560
*                 PLHRDFC=ONE;      /* COUNT TO ONE.                 */
         LA    @12,1                                               0560
         STH   @12,PLHRDFC(,RPLH)                                  0560
*                 PLHSAVE6=ONE;     /* SAVE COUNT            @X04SVES*/
         ST    @12,PLHSAVE6(,RPLH)                                 0561
*               END;                /*                               */
*             PLHRDFP=RWORK2;       /* SET RDF PTR. IN PLH           */
@RC00553 ST    RWORK2,PLHRDFP(,RPLH)                               0563
*           END;                    /*                               */
*         DO;                       /*                               */
@RF00549 DS    0H                                                  0566
*           RWORK1=PLHRECP+AMDRKP;  /* POINT TO START OF KEY         */
         L     @12,AMBDSB(,RAMB)                                   0566
         LH    RWORK1,AMDRKP(,@12)                                 0566
         AL    RWORK1,PLHRECP(,RPLH)                               0566
*           IF RWORK1->AMDATA(1:RWORK5)/* IS RECORDED KEY EQUAL      */
*               ^<PLHKEY(1:RWORK5) THEN/* OR GREATER THAN THE        */
         L     @12,PLHKEYPT(,RPLH)                                 0567
         LR    @10,RWORK5                                          0567
         BCTR  @10,0                                               0567
         EX    @10,@SC01038                                        0567
         BL    @RF00567                                            0567
*             DO;                   /* REQUESTED KEY--YES            */
*               IF RWORK1->AMDATA(1:RWORK5)/* ARE THE KEYS EQUAL     */
*                   =PLHKEY(1:RWORK5) THEN/*                         */
         EX    @10,@SC01038                                        0569
         BNE   @RF00569                                            0569
*                 DO;               /* YES                           */
*                   PLHRAE=ON;      /* SAVE EQUAL FOR RA     @ZA14811*/
         OI    PLHRAE(RPLH),B'00000010'                            0571
*                   PLHEFLGS=ZERO;  /* ZERO ERROR FLG        @X04SVMR*/
         SLR   @12,@12                                             0572
         STH   @12,PLHEFLGS(,RPLH)                                 0572
*                   IF RPLREQ=RPLPUT THEN/* IS THIS A PUT REQUEST    */
         CLI   RPLREQ(RRPL),1                                      0573
         BNE   @RF00573                                            0573
*                     DO;           /* YES                           */
*                       RPLERREG='08'X;/* SET LOGICAL ERROR          */
         MVI   RPLERREG(RRPL),X'08'                                0575
*                       RPLERRCD=RPLDUP;/* SET DUPLICATE RECORD      */
         MVI   RPLERRCD(RRPL),X'08'                                0576
*                       PLHNOADV=ON;/* SET NO ADVANCE        @X04SVMR*/
         OI    PLHNOADV(RPLH),B'00001000'                          0577
*                       IF RPLDIR=ON THEN/* DIRECT REQUEST           */
         TM    RPLDIR(RRPL),B'01000000'                            0578
         BO    @RT00578                                            0578
*                         GO TO DRL8;/* SUBTRACT EXCESS BUFFS        */
*                     END;          /*                               */
*                   IF RPLBWD=ON THEN/* WAS REQUEST FOR BACKWARD   0581
*                                      DIRECTION             @X04SVES*/
@RF00573 TM    RPLBWD(RRPL),B'00010000'                            0581
         BNO   @RF00581                                            0581
*                     DO;           /*                       @X04SVES*/
*                       PLHBWD=ON;  /* YES, REMEMBER IT      @X04SVES*/
         OI    PLHBWD(RPLH),B'00010000'                            0583
*                       PLHRDFC=PLHSAVE6-PLHRDFC+ONE;/* RESET COUNT
*                                      FOR BACKWARDS         @X04SVES*/
         L     @12,PLHSAVE6(,RPLH)                                 0584
         SH    @12,PLHRDFC(,RPLH)                                  0584
         AL    @12,@CF00053                                        0584
         STH   @12,PLHRDFC(,RPLH)                                  0584
*                     END;          /*                       @X04SVES*/
*                   ELSE            /* NO, SHOW DIRECTION AS @X04SVES*/
*                     PLHBWD=OFF;   /* FORWARD               @X04SVES*/
         B     @RC00581                                            0586
@RF00581 NI    PLHBWD(RPLH),B'11101111'                            0586
*                   CALL EXIT;      /* EXIT TO CALLER        @X04SVMR*/
@RC00581 BAL   @14,EXIT                                            0587
*                 END;              /*                               */
*               IF RPLREQ=RPLPUT THEN/* IS THIS A PUT REQUEST        */
@RF00569 CLI   RPLREQ(RRPL),1                                      0589
         BE    @RT00589                                            0589
*                 GO TO DRL6;       /* INSERT POINT FOUND            */
*               IF(RPLKGE=OFF&RPLBWD=OFF)×/* REQUEST KGE             */
*                   (RPLBWD=ON&PLHRABWD=OFF) THEN/*          @X04SVES*/
         TM    RPLKGE(RRPL),B'00000100'                            0591
         BNZ   @GL00031                                            0591
         TM    RPLBWD(RRPL),B'00010000'                            0591
         BZ    @RT00591                                            0591
@GL00031 TM    RPLBWD(RRPL),B'00010000'                            0591
         BNO   @RF00591                                            0591
         TM    PLHRABWD(RPLH),B'00000100'                          0591
         BNZ   @RF00591                                            0591
@RT00591 DS    0H                                                  0592
*                 DO;               /* NO-                           */
*                   IF PLHIBUFC->BUFCRRD=ON THEN/* DID A CONTR. INTV.*/
         L     @12,PLHIBUFC(,RPLH)                                 0593
         TM    BUFCRRD(@12),B'00100000'                            0593
         BNO   @RF00593                                            0593
*                     DO;           /* SPLIT INDEX           @ZA09993*/
*                       RAMB=AMBLIX;/* GET INDEX AMB         @ZA18995*/
         L     @12,RPLDACB(,RRPL)                                  0595
         L     @12,ACBAMBL(,@12)                                   0595
         L     RAMB,AMBLIX(,@12)                                   0595
*                       IXSSTRBA=AMDHLRBA;/* SET RBA HIGH    @ZA09993
*                                      LEVEL INDEX           @ZA09993*/
         L     @12,PLHISPLP(,RPLH)                                 0596
         L     @10,AMBDSB(,RAMB)                                   0596
         L     @08,AMDHLRBA(,@10)                                  0596
         ST    @08,IXSSTRBA(,@12)                                  0596
*                       RWORK1=AMDNIL;/* START SEARCH FROM   @ZA09993*/
         LH    RWORK1,AMDNIL(,@10)                                 0597
*                       IXSILN=RWORK1;/* TOP OF INDEX        @ZA09993*/
         STC   RWORK1,IXSILN(,@12)                                 0598
*                       RWORK1=ADDR(PLHKEY);/* ADDR KEY      @ZA09993*/
         L     RWORK1,PLHKEYPT(,RPLH)                              0599
*                       GO TO DRLA; /* GO SEARCH INDEX       @ZA09993*/
         B     DRLA                                                0600
*                     END;          /* END CI SPLIT          @ZA09993*/
*                   ELSE                                           0602
*                     GO TO NOREC;  /* NO, SEARCH WAS        @OX10428
*                                      UNSUCCESSFUL          @OX10428*/
*                 END;              /*                               */
*DRL6:                                                             0604
*               DO;                 /* SPECIFIES GTE OR PUT          */
@RF00591 DS    0H                                                  0604
DRL6     DS    0H                                                  0605
*                 IF RPLBWD=ON THEN /* WAS REQUEST FOR BACKWARD    0605
*                                      DIRECTION             @X04SVES*/
         TM    RPLBWD(RRPL),B'00010000'                            0605
         BNO   @RF00605                                            0605
*                   DO;             /*                       @X04SVES*/
*                     PLHBWD=ON;    /* YES, REMEMBER IT      @X04SVES*/
         OI    PLHBWD(RPLH),B'00010000'                            0607
*                     PLHRDFC=PLHSAVE6-PLHRDFC+ONE;/* RESET COUNT FOR
*                                      BACKWARDS             @X04SVES*/
         L     @12,PLHSAVE6(,RPLH)                                 0608
         SH    @12,PLHRDFC(,RPLH)                                  0608
         AL    @12,@CF00053                                        0608
         STH   @12,PLHRDFC(,RPLH)                                  0608
*                   END;            /*                       @X04SVES*/
*                 ELSE              /* NO, SHOW DIRECTION AS @X04SVES*/
*                   PLHBWD=OFF;     /* FORWARD               @X04SVES*/
         B     @RC00605                                            0610
@RF00605 NI    PLHBWD(RPLH),B'11101111'                            0610
*                 PLHEFLGS=PLHEFLGS&CLEARERR;/* CLEAR        @ZA11110
*                                      ERROR EXCEPT PLHRSTRT @ZA11110*/
@RC00605 NC    PLHEFLGS(2,RPLH),@CB00951                           0611
*                 CALL EXIT;        /* EXIT TO CALLER        @X04SVMR*/
         BAL   @14,EXIT                                            0612
*               END;                /*                               */
*             END;                  /*                               */
*         END;                      /*                               */
@RF00567 DS    0H                                                  0616
*         PLHRECP=PLHRECP+PLHLRECL; /* MOVE TO NEXT RECORD           */
         L     @12,PLHRECP(,RPLH)                                  0616
         AL    @12,PLHLRECL(,RPLH)                                 0616
         ST    @12,PLHRECP(,RPLH)                                  0616
*       END;                        /*                               */
@DE00547 CLC   PLHRECP(4,RPLH),PLHFSP(RPLH)                        0617
         BL    @DL00547                                            0617
*     END;                          /*                               */
*                                   /* THE CONTROL INTERVAL HAS BEEN
*                                      SEARCHED AND NO RECORD KEY  0619
*                                      GREATER THAN OR EQUAL TO THE
*                                      PLH KEY HAS BEEN FOUND        */
*   RESPECIFY                                                      0619
*    (RWORK3) RSTD;                 /*                               */
*   RESPECIFY                                                      0620
*    (RWORK2,                                                      0620
*     RWORK5) UNRSTD;               /*                               */
*   IF PLHIBUFC->BUFCRRD=ON THEN    /* HAS A CISPLIT         @OX10428*/
         L     @12,PLHIBUFC(,RPLH)                                 0621
         TM    BUFCRRD(@12),B'00100000'                            0621
         BNO   @RF00621                                            0621
*     DO;                           /* ON INDEX OCCUR        @OX10428*/
*       RWORK3=PLHISPLP;            /* SET ADDRESSABILITY            */
         L     @12,PLHISPLP(,RPLH)                                 0623
         LR    RWORK3,@12                                          0623
*       RAMB=AMBLIX;                /* GET INDEX AMB         @ZA18995*/
         L     @10,RPLDACB(,RRPL)                                  0624
         L     @10,ACBAMBL(,@10)                                   0624
         L     RAMB,AMBLIX(,@10)                                   0624
*       IXSSTRBA=AMDHLRBA;          /* SET RBA OF HIGH LEVEL INDEX IN
*                                      WORK AREA                     */
         L     @10,AMBDSB(,RAMB)                                   0625
         L     @06,AMDHLRBA(,@10)                                  0625
         ST    @06,IXSSTRBA(,@12)                                  0625
*       RWORK1=AMDNIL;              /* SET INITIAL LEVEL OF          */
         LH    RWORK1,AMDNIL(,@10)                                 0626
*       IXSILN=RWORK1;              /* SEARCH TO TOP OF INDEX        */
         STC   RWORK1,IXSILN(,@12)                                 0627
*       RWORK1=ADDR(PLHKEY);        /* GET ADDRESS OF ARGUMENT       */
         L     RWORK1,PLHKEYPT(,RPLH)                              0628
*       GO TO DRLA;                 /* GO SEARCH INDEX AGAIN         */
         B     DRLA                                                0629
*     END;                          /* END CI SPLIT          @OX10428*/
*   ELSE                            /* FOR INDEX             @OX10428*/
*     DO;                           /*                               */
@RF00621 DS    0H                                                  0632
*       RESPECIFY                                                  0632
*        (RWORK1,                                                  0632
*         RWORK3) UNRSTD;           /*                       @X04SVES*/
*       IF PLHRABWD=ON THEN         /* CALL FROM RV          @X04SVES*/
         TM    PLHRABWD(RPLH),B'00000100'                          0633
         BNO   @RF00633                                            0633
*         CALL EXIT;                /* EXIT TO CALLER        @X04SVMR*/
         BAL   @14,EXIT                                            0634
*       IF RPLLRD=ON THEN           /* IS REQUEST FOR LAST RECORD  0635
*                                                            @X04SVES*/
@RF00633 TM    RPLLRD(RRPL),B'00001000'                            0635
         BNO   @RF00635                                            0635
*         DO;                       /* YES (LRD = ON)        @OX10428*/
*           DO WHILE PLHRECP=BUFCBAD;/* INSURE THAT THE CI CONTAINS
*                                      AT LEAST ONE RECORD   @X04SVES*/
         B     @DE00637                                            0637
@DL00637 DS    0H                                                  0638
*             PLHRAHD=ON;           /* SET READ AHEAD        @X04SVES*/
         OI    PLHRAHD(RPLH),B'01000000'                           0638
*             RBUFC=PLHDBUFC;       /* SET RBUFC             @X04SVES*/
         L     RBUFC,PLHDBUFC(,RPLH)                               0639
*I12:                                                              0640
*             DO;                   /* IDACALL(IDAFREEB)             */
I12      DS    0H                                                  0641
*               CALL IDAFREEB;      /* EXIT TO IDAFREEB              */
         L     @15,@CV00926                                        0641
         BALR  @14,@15                                             0641
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I12;              /* FREE BUFFER           @X04SVLP*/
*I13:                                                              0647
*             DO;                   /* IDACALL(IDAGNXT)              */
I13      DS    0H                                                  0648
*               CALL IDAGNXT;       /* EXIT TO IDAGNXT               */
         L     @15,@CV00927                                        0648
         BALR  @14,@15                                             0648
*               GEN(BALR @11,0);    /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*               GEN(USING *,@11);   /* ESTABLISH ADDRESSING          */
         USING *,@11
*               GEN(L     @11,=A(@PSTART));/* RELOAD BASE            */
         L     @11,=A(@PSTART)
*               GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING       */
         USING @PSTART,@11
*             END I13;              /* READ RECORD           @X04SVES*/
*             RFY                                                  0654
*               RPARM1 RSTD;        /*                       @ZA07544*/
*             IF RPLERREG^=ZERO THEN/* ERROR                 @X04SVES*/
         CLI   RPLERREG(RRPL),0                                    0655
         BE    @RF00655                                            0655
*               DO;                 /* YES                   @X04SVES*/
*                 IF RPLERREG='08'X&/* WAS END OF DATA@X04SVES       */
*                     RPLERRCD=RPLEODER THEN/* DETECTED      @X04SVES*/
         CLI   RPLERREG(RRPL),8                                    0657
         BNE   @RF00657                                            0657
         CLI   RPLERRCD(RRPL),4                                    0657
         BNE   @RF00657                                            0657
*                   RPLERRCD=RPLNOREC;/* YES, CHANGE CODE TO NO    0658
*                                      RECORD FOUND          @X04SVES*/
         MVI   RPLERRCD(RRPL),X'10'                                0658
*                 RPLDDDD=RPARM1;   /* PASS BACK RBA         @ZA07544*/
@RF00657 ST    RPARM1,RPLDDDD(,RRPL)                               0659
*                 RFY                                              0660
*                   RPARM1 UNRSTD;  /*                       @ZA07544*/
*                 PLHRAHD=OFF;      /* CANCEL RD AHD         @X04SVES*/
         NI    PLHRAHD(RPLH),B'10111111'                           0661
*                 PLHINVAL=ON;      /* PLH INVALID           @X04SVES*/
         OI    PLHINVAL(RPLH),B'00000010'                          0662
*                 CALL EXIT;        /* EXIT TO CALLER        @X04SVMR*/
         BAL   @14,EXIT                                            0663
*               END;                /*                       @X04SVES*/
*             PLHRAHD=OFF;          /* CANCEL RD. AHD.       @X04SVES*/
@RF00655 NI    PLHRAHD(RPLH),B'10111111'                           0665
*             PLHRDFP=BUFCBAD+AMDCINV/* POINT TO CIDF        @X04SVES*/
*                 -LENGTH(IDACIDF); /*                       @X04SVES*/
*                                                                  0666
         L     @12,PLHDBUFC(,RPLH)                                 0666
         L     @10,AMBDSB(,RAMB)                                   0666
         L     @12,BUFCBAD(,@12)                                   0666
         AL    @12,AMDCINV(,@10)                                   0666
         SL    @12,@CF00067                                        0666
         ST    @12,PLHRDFP(,RPLH)                                  0666
*             /*******************************************************/
*             /*                                                     */
*             /* VALIDATE THE CIDF                           @ZA31009*/
*             /*                                                     */
*             /*******************************************************/
*                                                                  0667
*             IF PLHRDFP->CIDFBUSY=ON THEN/* IF CI SPLIT WAS       0667
*                                      INTERRUPTED           @ZA31009*/
         TM    CIDFBUSY(@12),B'10000000'                           0667
         BNO   @RF00667                                            0667
*               DO;                 /* TRY TO CORRECT THE PROBLEM  0668
*                                                            @ZA31009*/
*I14:                                                              0669
*                 DO;               /* IDACALL(IDA019S6)             */
I14      DS    0H                                                  0670
*                   CALL IDA019S6;  /* EXIT TO IDA019S6              */
         L     @15,@CV00931                                        0670
         BALR  @14,@15                                             0670
*                   GEN(BALR @11,0);/* LOAD ADDR OF REENTRY          */
         BALR @11,0
*                   GEN(USING *,@11);/* ESTABLISH ADDRESSING         */
         USING *,@11
*                   GEN(L     @11,=A(@PSTART));/* RELOAD BASE        */
         L     @11,=A(@PSTART)
*                   GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING   */
         USING @PSTART,@11
*                 END I14;          /* CI REBUILD            @ZA31009*/
*                 IF RPLERREG^=ZERO THEN/* IF UNCORRECTABLE  @ZA31009*/
         CLI   RPLERREG(RRPL),0                                    0676
         BE    @RF00676                                            0676
*                   DO;             /* DONT CONTINUE         @ZA31009*/
*                     PLHINVAL=ON;  /* LOSE POSITION         @ZA31009*/
         OI    PLHINVAL(RPLH),B'00000010'                          0678
*                     CALL EXIT;    /* EXIT MODULE           @ZA31009*/
         BAL   @14,EXIT                                            0679
*                   END;            /* END OF UNCORRECTABLE CI CODE
*                                                            @ZA31009*/
*                 PLHRDFP=BUFCBAD+AMDCINV-/* POINT TO CIDF   @ZA31009*/
*                     LENGTH(IDACIDF);/*                     @ZA31009*/
@RF00676 L     @12,PLHDBUFC(,RPLH)                                 0681
         L     @10,AMBDSB(,RAMB)                                   0681
         L     @12,BUFCBAD(,@12)                                   0681
         AL    @12,AMDCINV(,@10)                                   0681
         SL    @12,@CF00067                                        0681
         ST    @12,PLHRDFP(,RPLH)                                  0681
*               END;                /* END CIDF BUSY         @ZA31009*/
*             IF PLHRDFP->CIDFOSET=ZERO THEN/* IF CI CONTAINS NO   0683
*                                      RECORDS THEN          @X04SVES*/
@RF00667 SLR   @12,@12                                             0683
         L     @10,PLHRDFP(,RPLH)                                  0683
         CH    @12,CIDFOSET(,@10)                                  0683
         BNE   @RF00683                                            0683
*               DO;                 /* THE CI COULD BE INCORRECT   0684
*                                                            @ZA31009*/
*                 IF PLHRDFP->IDACIDF=ZERO THEN/* IF CIDF IS ZERO  0685
*                                      THEN                  @ZA31009*/
         ICM   @05,15,IDACIDF(@10)                                 0685
         CLR   @12,@05                                             0685
         BNE   @RF00685                                            0685
*                   DO;             /* TREAT AS IF AN I/0 ERROR    0686
*                                                            @ZA31009*/
*                     PLHINVAL=ON;  /* LOSE POSITION         @ZA31009*/
         OI    PLHINVAL(RPLH),B'00000010'                          0687
*                     RPLERREG='08';/* SET LOGICAL ERROR     @ZA31009*/
         L     @12,@CF00986                                        0688
         STC   @12,RPLERREG(,RRPL)                                 0688
*                     RPLERRCD=RPLINCNV;/* SET INVALID CI    @ZA31009*/
         MVI   RPLERRCD(RRPL),X'9C'                                0689
*                     RPLDDDD=BUFCDDDD;/* PASS BACK CI IN ERROR    0690
*                                                            @ZA31009*/
         L     @12,PLHDBUFC(,RPLH)                                 0690
         L     @12,BUFCDDDD(,@12)                                  0690
         ST    @12,RPLDDDD(,RRPL)                                  0690
*                     CALL EXIT;    /* EXIT MODULE           @ZA31009*/
         BAL   @14,EXIT                                            0691
*                   END;            /* END OF ZERO CIDF CODE @ZA31009*/
*                 PLHRECP=BUFCBAD;  /* POINT TO BEGINNING OF BUFFER
*                                                            @X04SVES*/
@RF00685 L     @12,PLHDBUFC(,RPLH)                                 0693
         L     @12,BUFCBAD(,@12)                                   0693
         ST    @12,PLHRECP(,RPLH)                                  0693
*               END;                /* END OF FREE SPACE OFFSET    0694
*                                                            @ZA31009*/
*             ELSE                  /*                       @X04SVES*/
*               PLHRECP=BUFCBAD+ONE;/* OTHERWISE ASSURE A FALL OUT OF
*                                      THE LOOP@X04SVES              */
         B     @RC00683                                            0695
@RF00683 L     @12,PLHDBUFC(,RPLH)                                 0695
         LA    @10,1                                               0695
         AL    @10,BUFCBAD(,@12)                                   0695
         ST    @10,PLHRECP(,RPLH)                                  0695
*           END;                    /*                       @X04SVES*/
@RC00683 DS    0H                                                  0696
@DE00637 L     @12,PLHDBUFC(,RPLH)                                 0696
         L     @12,BUFCBAD(,@12)                                   0696
         C     @12,PLHRECP(,RPLH)                                  0696
         BE    @DL00637                                            0696
*           PLHRDFP=BUFCBAD+AMDCINV-/* POINT TO              @X04SVES*/
*               LENGTH(IDACIDF);    /* CIDF                  @X04SVES*/
         L     @10,AMBDSB(,RAMB)                                   0697
         LR    @05,@12                                             0697
         AL    @05,AMDCINV(,@10)                                   0697
         SL    @05,@CF00067                                        0697
         ST    @05,PLHRDFP(,RPLH)                                  0697
*           PLHFSP=BUFCBAD+PLHRDFP->/* SET FREE SPACE        @X04SVES*/
*               CIDFOSET;           /* POINTER IN PLH        @X04SVES*/
         AH    @12,CIDFOSET(,@05)                                  0698
         ST    @12,PLHFSP(,RPLH)                                   0698
*           PLHRDFP=PLHFSP+PLHRDFP->/* SET RDF               @X04SVES*/
*               CIDFLL;             /* POINTER IN PLH        @X04SVES*/
         AH    @12,CIDFLL(,@05)                                    0699
         ST    @12,PLHRDFP(,RPLH)                                  0699
*           IF PLHRDFP->RDFREPL=ON THEN/* COUNT RDF          @X04SVES*/
         TM    RDFREPL(@12),B'00001000'                            0700
         BNO   @RF00700                                            0700
*             DO;                   /* YES                   @X04SVES*/
*               RESPECIFY                                          0702
*                (RPARM1) RSTD;     /*                       @X04SVES*/
*               PLHRDFC=PLHRDFP->RDFLL;/* SET RECORD COUNT IN PLH  0703
*                                      FROM RDF              @X04SVES*/
         L     @10,PLHRDFP(,RPLH)                                  0703
         MVC   PLHRDFC(2,RPLH),RDFLL(@10)                          0703
*               RPARM1=PLHRDFP+     /* POINT TO RDF          @X04SVES*/
*                   LENGTH(IDARDF); /* CONTAINING LL         @X04SVES*/
         AL    @10,@CF00159                                        0704
         LR    RPARM1,@10                                          0704
*               PLHLRECL=RPARM1->RDFLL;/* SET LL IN PLH      @X04SVES*/
         SLR   @10,@10                                             0705
         ICM   @10,3,RDFLL(RPARM1)                                 0705
         ST    @10,PLHLRECL(,RPLH)                                 0705
*               RESPECIFY                                          0706
*                (RPARM1) UNRSTD;   /*                       @X04SVES*/
*             END;                  /*                       @X04SVES*/
*           ELSE                    /* NOT COUNT RDF         @X04SVES*/
*             DO;                   /*                       @X04SVES*/
         B     @RC00700                                            0708
@RF00700 DS    0H                                                  0709
*               PLHRDFC=ONE;        /* SET COUNT TO 1        @X04SVES*/
         MVC   PLHRDFC(2,RPLH),@CH00053                            0709
*               PLHLRECL=PLHRDFP->RDFLL;/* SET LL IN PLH     @X04SVES*/
         L     @12,PLHRDFP(,RPLH)                                  0710
         SLR   @10,@10                                             0710
         ICM   @10,3,RDFLL(@12)                                    0710
         ST    @10,PLHLRECL(,RPLH)                                 0710
*             END;                  /*                       @X04SVES*/
*           PLHRECP=PLHFSP-PLHLRECL;/* SET RECORD POINTER IN PLH   0712
*                                                            @X04SVES*/
@RC00700 L     @12,PLHFSP(,RPLH)                                   0712
         SL    @12,PLHLRECL(,RPLH)                                 0712
         ST    @12,PLHRECP(,RPLH)                                  0712
*           PLHBWD=ON;              /* REMEMBER DIRECTION REQUESTED
*                                                            @X04SVES*/
         OI    PLHBWD(RPLH),B'00010000'                            0713
*           PLHEFLGS=ZERO;          /* CLR ERROR FLGS        @X04SVES*/
         SLR   @10,@10                                             0714
         STH   @10,PLHEFLGS(,RPLH)                                 0714
*           RFY                                                    0715
*            (RWORK2,                                              0715
*             RWORK3,                                              0715
*             RWORK4,                                              0715
*             RWORK5) RSTD;         /*                       @X04SVES*/
*           RWORK2=ADDR(PLHKEY);    /* SET 'TO' ADD          @X04SVES*/
         L     RWORK2,PLHKEYPT(,RPLH)                              0716
*           RWORK3=AMDKEYLN;        /* SET MOVE LENGTH@X04SVES       */
         L     @10,AMBDSB(,RAMB)                                   0717
         LH    RWORK3,AMDKEYLN(,@10)                               0717
*           RWORK4=PLHRECP+AMDRKP;  /* SET 'FROM' ADD        @X04SVES*/
         AH    @12,AMDRKP(,@10)                                    0718
         LR    RWORK4,@12                                          0718
*           RWORK5=RWORK3;          /* LENGTH                @X04SVES*/
         LR    RWORK5,RWORK3                                       0719
*           GEN(MVCL  RWORK2,RWORK4);/* SAVE KEY IN PLH@X04SVES      */
         MVCL  RWORK2,RWORK4
*           RFY                                                    0721
*            (RWORK2,                                              0721
*             RWORK3,                                              0721
*             RWORK4,                                              0721
*             RWORK5) UNRSTD;       /*                       @X04SVES*/
*           CALL EXIT;              /* EXIT TO CALLER        @X04SVMR*/
         BAL   @14,EXIT                                            0722
*         END;                      /* END LRD = ON          @OX10428*/
*       IF(RPLREQ=RPLGET&           /* IF A GET WITH         @OX10428*/
*           (RPLGEN=ON×             /* GEN KEY OR            @OX10428*/
*           RPLKGE=ON)&             /* KGE AND               @OX10428*/
*           RPLBWD=OFF)×            /* NOT BWD               @OX10428*/
*           (RPLREQ=RPLPOINT&       /* IF A POINT REQ        @OX10428*/
*           (RPLGEN=ON×             /* WITH GEN OR           @OX10428*/
*           RPLKGE=ON)&             /* KGE AND               @OX10428*/
*           RPLBWD=OFF)             /* NOT BWD               @OX10428*/
*         THEN                      /* YES DO                @OX10428*/
@RF00635 CLI   RPLREQ(RRPL),0                                      0724
         BNE   @GL00035                                            0724
         TM    RPLGEN(RRPL),B'00000110'                            0724
         BZ    @GL00035                                            0724
         TM    RPLBWD(RRPL),B'00010000'                            0724
         BZ    @RT00724                                            0724
@GL00035 CLI   RPLREQ(RRPL),3                                      0724
         BNE   @RF00724                                            0724
         TM    RPLGEN(RRPL),B'00000110'                            0724
         BZ    @RF00724                                            0724
         TM    RPLBWD(RRPL),B'00010000'                            0724
         BNZ   @RF00724                                            0724
@RT00724 DS    0H                                                  0725
*READMORE:                                                         0725
*         DO;                       /* SRCH FORWARD          @ZA07544*/
READMORE DS    0H                                                  0726
*           RBUFC=PLHDBUFC;         /* TO NXT RECD           @OX10428*/
         L     RBUFC,PLHDBUFC(,RPLH)                               0726
*           PLHRAHD=ON;             /* DO READ AHEAD         @ZA11054*/
         OI    PLHRAHD(RPLH),B'01000000'                           0727
*I15:                                                              0728
*           DO;                     /* IDACALL(IDAFREEB)             */
I15      DS    0H                                                  0729
*             CALL IDAFREEB;        /* EXIT TO IDAFREEB              */
         L     @15,@CV00926                                        0729
         BALR  @14,@15                                             0729
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I15;                /* FREE BUFFER           @OX10428*/
*I16:                                                              0735
*           DO;                     /* IDACALL(IDAGNXT)              */
I16      DS    0H                                                  0736
*             CALL IDAGNXT;         /* EXIT TO IDAGNXT               */
         L     @15,@CV00927                                        0736
         BALR  @14,@15                                             0736
*             GEN(BALR @11,0);      /* LOAD ADDR OF REENTRY          */
         BALR @11,0
*             GEN(USING *,@11);     /* ESTABLISH ADDRESSING          */
         USING *,@11
*             GEN(L     @11,=A(@PSTART));/* RELOAD BASE              */
         L     @11,=A(@PSTART)
*             GEN(USING @PSTART,@11);/* ESTABLISH ADDRESSING         */
         USING @PSTART,@11
*           END I16;                /* GET RBA NEXT          @ZA09985*/
*           RFY                                                    0742
*             RPARM1 RSTD;          /*                       @ZA07544*/
*           PLHRAHD=OFF;            /* END READ AHEAD        @ZA11054*/
         NI    PLHRAHD(RPLH),B'10111111'                           0743
*           IF RPLERREG^=0 THEN     /* IF ANY ERROR          @ZA09985*/
         CLI   RPLERREG(RRPL),0                                    0744
         BE    @RF00744                                            0744
*             DO;                   /* ACTION REQD           @ZA07544*/
*               IF RPLERREG='08'X&  /* DID GETNEXT           @ZA07544*/
*                   RPLERRCD=RPLEODER THEN/* HIT EOD         @ZA07544*/
         CLI   RPLERREG(RRPL),8                                    0746
         BNE   @RF00746                                            0746
         CLI   RPLERRCD(RRPL),4                                    0746
         BNE   @RF00746                                            0746
*                 DO;               /* YES THEN              @ZA11054*/
*                   IF RPLKGE=ON&   /* IF KGE AND            @OX10428*/
*                       (RPLREQ=RPLPOINT×/* POINT OR         @OX10428*/
*                       (RPLREQ=RPLGET&/* GET AND            @ZA11054*/
*                       RPLSKP=ON)) THEN/* SKP               @ZA11054*/
         TM    RPLKGE(RRPL),B'00000100'                            0748
         BNO   @RF00748                                            0748
         CLI   RPLREQ(RRPL),3                                      0748
         BE    @RT00748                                            0748
         CLI   RPLREQ(RRPL),0                                      0748
         BNE   @RF00748                                            0748
         TM    RPLSKP(RRPL),B'00010000'                            0748
         BO    @RT00748                                            0748
*                     GO TO DRL6;   /* EXT W/O SBUF          @OX10428*/
*                   ELSE            /* NONE ABOVE            @ZA11054*/
*                     DO;           /* SET NRF               @ZA11054*/
@RF00748 DS    0H                                                  0751
*NOREC:                                                            0751
*                       RPLERREG='08'X;/* SET LOGIC IND      @OX10428*/
NOREC    MVI   RPLERREG(RRPL),X'08'                                0751
*                       RPLERRCD=RPLNOREC;/* SHOW NRF        @OX10428*/
         MVI   RPLERRCD(RRPL),X'10'                                0752
*DRL8:                                                             0753
*                       RBUFC=ZERO; /* IND SUB ALL           @OX10428*/
DRL8     SLR   RBUFC,RBUFC                                         0753
*I17:                                                              0754
*                       DO;         /* IDACALL(IDASBF)               */
I17      DS    0H                                                  0755
*                         CALL IDASBF;/* EXIT TO IDASBF              */
         L     @15,@CV00929                                        0755
         BALR  @14,@15                                             0755
*                         GEN(BALR @11,0);/* LOAD ADDR OF REENTRY    */
         BALR @11,0
*                         GEN(USING *,@11);/* ESTABLISH ADDRESSING   */
         USING *,@11
*                         GEN(L     @11,=A(@PSTART));/* RELOAD BASE  */
         L     @11,=A(@PSTART)
*                         GEN(USING @PSTART,@11);/* ESTABLISH      0759
*                                      ADDRESSING                    */
         USING @PSTART,@11
*                       END I17;    /* SUB BUFFERS           @OX10428*/
*                       PLHINVAL=ON;/* SET PLHINVAL          @OX10428*/
         OI    PLHINVAL(RPLH),B'00000010'                          0761
*                       CALL EXIT;  /* EXIT TO CALLER        @OX10428*/
         BAL   @14,EXIT                                            0762
*                       RESPECIFY                                  0763
*                        (R15) UNRSTD;/* FREE REG 15         @OX10428*/
*                     END;          /* END NRF               @OX10428*/
*                 END;              /* NO ERRORS             @OX10428*/
*               RPLDDDD=RPARM1;     /* PASS BACK RBA         @ZA07544*/
@RF00746 ST    RPARM1,RPLDDDD(,RRPL)                               0766
*               GO TO DRL8;         /* YES, RETURN           @OX10428*/
         B     DRL8                                                0767
*               RFY                                                0768
*                 RPARM1 UNRSTD;    /*                       @ZA07544*/
*             END;                  /* END ERROR CODE        @ZA07544*/
*           IF RPLREQ=RPLPOINT THEN /* IF POINT              @OX10428*/
@RF00744 CLI   RPLREQ(RRPL),3                                      0770
         BNE   @RF00770                                            0770
*             PLHRSTRT=ON;          /* INV PUTPOS FLG        @OX10428*/
         OI    PLHRSTRT(RPLH),B'10000000'                          0771
*           RFY                                                    0772
*             RWORK2 RSTD;          /*                       @ZA07544*/
@RF00770 DS    0H                                                  0773
*           RWORK2=BUFCBAD+AMDCINV- /* POINT TO RDF          @ZA07544*/
*               LENGTH(IDACIDF)-LENGTH(IDARDF);/* OF FIRST RECORD  0773
*                                                            @ZA10875*/
         L     @12,PLHDBUFC(,RPLH)                                 0773
         L     @10,AMBDSB(,RAMB)                                   0773
         L     RWORK2,BUFCBAD(,@12)                                0773
         AL    RWORK2,AMDCINV(,@10)                                0773
         SL    RWORK2,@CF00199                                     0773
*           IF RWORK2->RDFNOT1=ON THEN/* NON 1ST SPANNED     @ZA07544*/
         TM    RDFNOT1(RWORK2),B'00100000'                         0774
         BO    @RT00774                                            0774
*             GO TO READMORE;       /* RECD SEG? YES,BYPASS IT     0775
*                                                            @ZA07544*/
*           GO TO DLRB;             /* GO SEARCH BUF         @OX10428*/
         B     DLRB                                                0776
*           RFY                                                    0777
*             RWORK2 UNRSTD;        /*                       @ZA07544*/
*         END;                      /* END SRCH FOR          @OX10428*/
*       IF RPLREQ=RPLPUT THEN       /* PUT REQ ACCEPT        @OX10428*/
@RF00724 CLI   RPLREQ(RRPL),1                                      0779
         BE    @RT00779                                            0779
*         GO TO DRL6;               /* POSITION              @OX10428*/
*       ELSE                                                       0781
*         GO TO NOREC;              /* OTHERWISE NRF         @OX10428*/
         B     NOREC                                               0781
*     END;                          /* END NO CISPLIT        @OX10428*/
*                                                                  0783
*/*    EXIT SUBROUTINE                                               */
*/*  FUNCTION - RESTORE REGISTER 14 FROM THE PLH AND RETURN          */
*/*  INPUT - REGISTER 2 (RPLH) POINTS TO A PLACEHOLDER               */
*/*  OUTPUT - REGISTER 14 IS LOADED WITH THE RETURN ADDRESS. #X04SVMR*/
*                                                                  0783
*EXIT:                                                             0783
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       #X04SVMR*/
EXIT     DS    0H                                                  0784
*   GEN(IDARST14);                  /* RESTORE REG 14        #X04SVMR*/
         IDARST14
*   END EXIT;                       /* RETURN TO CALLER      @X04SVMR*/
@EL00002 DS    0H                                                  0785
@EF00002 DS    0H                                                  0785
@ER00002 BR    @14                                                 0785
*   GEN;                                                           0786
*                                          /*                        */
         DS    0F                          /* ASSURE WORD BOUNDRY    */
MASK03   DC    X'00000003'                 /* MASK SAVES 2 LOW BYTES */
INSERT   ICM   RWORK1,@00,@00(RWORK4)      /* MOVES POINTER FROM INDX*/
*   GEN(IDAPATCH);                  /* PROVIDE PATCH SPACE           */
         IDAPATCH
*   END IDA019RA                                                   0788
*                                                                  0788
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IDAREGS )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDAIXSPL)                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDACIDF )                                       */
*/*%INCLUDE SYSLIB  (IDAIRD  )                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDARMRCD)                                       */
*/*%INCLUDE SYSLIB  (IDARDF  )                                       */
*                                                                  0788
*       ;                                                          0788
@EL00001 DS    0H                                                  0788
@EF00001 DS    0H                                                  0788
@ER00001 BR    @14                                                 0788
@DATA    DS    0H
@SC01026 CLC   KEY(0,RWORK1),PLHKEY(@12)
@SX01028 XC    PLHKEY(0,@09),PLHKEY(@09)
@SM01030 MVC   PLHKEY(0,@12),KEY(RWORK1)
@SC01038 CLC   AMDATA(0,RWORK1),PLHKEY(@12)
@DATD    DSECT
         DS    0F
IDA019RA CSECT
         DS    0F
@CF00053 DC    F'1'
@CH00053 EQU   @CF00053+2
@CF00159 DC    F'3'
@CF00067 DC    F'4'
@CF00199 DC    F'7'
@CF01036 DC    F'-7'
@CF00986 DC    XL2'0'
         DC    C'08'
@DATD    DSECT
         DS    0D
IDA019RA CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV00924 DC    V(IDAABF)
@CV00926 DC    V(IDAFREEB)
@CV00927 DC    V(IDAGNXT)
@CV00928 DC    V(IDAGRB)
@CV00929 DC    V(IDASBF)
@CV00930 DC    V(IDAWAIT)
@CV00931 DC    V(IDA019S6)
@CV00932 DC    V(IDA019RB)
@CV00925 DC    V(IDAFRBA)
         DS    0D
HWORD4   DC    H'4'
@CB00951 DC    X'0080'
@DATD    DSECT
*                                                          /*@X04SVLC*/
RDFCTNUA EQU   X'40'                    COMPLEX RDF INDICATOR
RDFCTNUX EQU   X'FF'-RDFCTNUA           RESET COMPLEX MASK
RDFREPLA EQU   X'08'                    COUNT RDF INDICATOR
RDFREPLX EQU   X'FF'-RDFREPLA           RESET COUNT MASK
RDFEMPTI EQU   X'04'                    EMPTY RECORD       /*@X04SVLC*/
RDFLEN   EQU   3                        LENGTH OF RDF
RDFLLOFF EQU   1                        OFFSET WITHIN RDF TO LL
RDFSGLR  EQU   X'00'                   MASK FOR SINGLE RECORD RDF
RDFGRP   EQU   RDFCTNUA                 MASK FOR LL RDF OF A GROUP RDF
RDFCNT   EQU   RDFREPLA                 MASK FOR COUNT RDF
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019RA CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RRPL     EQU   @01
RPLH     EQU   @02
RAMB     EQU   @03
RBUFC    EQU   @04
RWORK1   EQU   @05
RWORK2   EQU   @06
RWORK3   EQU   @07
RWORK4   EQU   @08
RWORK5   EQU   @09
RPARM1   EQU   @12
R15      EQU   @15
RWORK0   EQU   @00
R1       EQU   @01
R10      EQU   @10
R11      EQU   @11
R13      EQU   @13
R14      EQU   @14
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLREQ   EQU   RPLIDWD+2
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLERREG EQU   RPLRTNCD
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLKEYL  EQU   RPLKEYLE
RPLDACB  EQU   RPLCOMN+24
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLDIR   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLGEN   EQU   RPLOPT1
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLKEY   EQU   RPLOPT2
RPLADR   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLNSP   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLNXTRP EQU   RPLCOMN+44
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLDDDD  EQU   RPLRBAR+4
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHASKBF EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHFLG2  EQU   IDAPLH+3
PLHKEYMD EQU   PLHFLG2
PLHEFLGS EQU   IDAPLH+4
PLH1ST   EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHRSTRT EQU   PLHEFLGS+1
PLHFLG3  EQU   IDAPLH+6
PLHRAHD  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHAFLGS EQU   IDAPLH+7
PLHRABWD EQU   PLHAFLGS
PLHRAE   EQU   PLHAFLGS
PLHFRCNT EQU   IDAPLH+14
PLHBFRNO EQU   IDAPLH+15
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHRCODE EQU   IDAPLH+41
PLHLRECL EQU   IDAPLH+48
PLHDBUFC EQU   IDAPLH+52
PLHRECP  EQU   IDAPLH+60
PLHFSP   EQU   IDAPLH+64
PLHRDFP  EQU   IDAPLH+68
PLHRDFC  EQU   IDAPLH+72
PLHDIOB  EQU   IDAPLH+76
PLHSAVE6 EQU   IDAPLH+104
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHNRBA  EQU   IDAPLH+184
PLHIBUFC EQU   IDAPLH+188
PLHISPLP EQU   IDAPLH+196
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHKEYPT EQU   IDAPLH+248
PLHEND   EQU   IDAPLH+280
PLHKEY   EQU   0
IDAIXSPL EQU   0
IXSSTRBA EQU   IDAIXSPL
IXSARG   EQU   IDAIXSPL+8
IXSTLN   EQU   IDAIXSPL+12
IXSILN   EQU   IDAIXSPL+13
IXSNOSR  EQU   IDAIXSPL+16
IXSBFLG  EQU   IDAIXSPL+17
IXSHEP   EQU   IDAIXSPL+20
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCIOFL EQU   IDABUFC+2
BUFCRRD  EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCDDDD EQU   IDABUFC+8
BUFCBAD  EQU   IDABUFC+20
BUFCINV  EQU   IDABUFC+28
IDACIDF  EQU   0
CIDFOSET EQU   IDACIDF
CIDFLL   EQU   IDACIDF+2
CIDFBUSY EQU   CIDFLL
IDAIXH   EQU   0
IXHPTLS  EQU   IDAIXH+3
IXHBRBA  EQU   IDAIXH+4
IDAIBFLP EQU   0
IBFLPF   EQU   IDAIBFLP
IBFLPL   EQU   IDAIBFLP+1
IBFLP3   EQU   IDAIBFLP+2
IBFLP2   EQU   IBFLP3
IDASELL  EQU   0
IDAIXK   EQU   0
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDEOD   EQU   ARDTYPE
ARDNPTR  EQU   IDAARDB+4
ARDHRBA  EQU   IDAARDB+12
ARDERBA  EQU   IDAARDB+16
ARDPRF   EQU   IDAARDB+28
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDNEST  EQU   IDAAMDSB+4
AMDRKP   EQU   IDAAMDSB+6
AMDKEYLN EQU   IDAAMDSB+8
AMDCINV  EQU   IDAAMDSB+20
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDPARDB EQU   IDAAMDSB+36
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
AMDNIL   EQU   AMDSTAT+8
IDAAMBL  EQU   0
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLQ    EQU   AMBLIDF+7
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLSHAR EQU   IDAAMBL+33
AMBLFLG1 EQU   IDAAMBL+35
AMBLFLG2 EQU   IDAAMBL+36
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMB   EQU   0
AMBPH    EQU   IDAAMB+12
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBPUG   EQU   AMBFLG2
AMBEOVPT EQU   IDAAMB+56
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBLSR   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
RBA      EQU   0
IDARDF   EQU   0
RDFRBYTE EQU   IDARDF
RDFCTNU  EQU   RDFRBYTE
RDFSEG   EQU   RDFRBYTE
RDFNOT1  EQU   RDFSEG
RDF1ST   EQU   RDFSEG
RDFREPL  EQU   RDFRBYTE
RDFLL    EQU   IDARDF+1
IDADATA  EQU   0
AMDATA   EQU   IDADATA
IDAKEY   EQU   0
KEY      EQU   IDAKEY
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00011 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
RDFEMPTY EQU   RDFRBYTE
RDFTYPE  EQU   RDFRBYTE
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBSZCP  EQU   IDAAMB+114
AMBSZFW  EQU   IDAAMB+112
AMBSZWR  EQU   IDAAMB+110
AMBSZRD  EQU   IDAAMB+108
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBCPA   EQU   IDAAMB+92
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00048 EQU   AMBCSWD1+1
@NM00047 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
@NM00046 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00045 EQU   IDAAMB+68
AMBIWA   EQU   IDAAMB+64
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBEDB   EQU   IDAAMB+52
AMBRPT   EQU   IDAAMB+50
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00044 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00043 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00042 EQU   AMBINFL
@NM00041 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00040 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00039 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00038 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00037 EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00036 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00035 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00034 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00033 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00032 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00031 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00030 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00029 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00028 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00027 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
AMBLCMB  EQU   IDAAMBL+64
AMBLBIB  EQU   IDAAMBL+60
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00026 EQU   IDAAMBL+40
AMBLNUM  EQU   IDAAMBL+38
AMBLNST  EQU   IDAAMBL+37
@NM00025 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00024 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLUPD  EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLFULL EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00023 EQU   AMBLSHAR
AMBLWRIT EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00022 EQU   IDAAMBL+31
@NM00021 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLBASE EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLXPT  EQU   IDAAMBL+24
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLLSR  EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
AMBLCACB EQU   AMBLIDF
@NM00020 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBLACB  EQU   IDAAMBL+8
AMBLSCHN EQU   IDAAMBL+4
AMBLPCHN EQU   IDAAMBL
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDSTSP  EQU   AMDSTAT
@NM00019 EQU   IDAAMDSB+41
@NM00018 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
ARDKEYS  EQU   IDAARDB+29
@NM00017 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDVOLSR EQU   IDAARDB+20
ARDHKRBA EQU   IDAARDB+8
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDHLI   EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
IXKEY    EQU   IDAIXK
IXSELL   EQU   IDASELL
IBFLP1   EQU   IBFLP2
IXHSEO   EQU   IDAIXH+22
IXHLEO   EQU   IDAIXH+20
IXHFSO   EQU   IDAIXH+18
IXHFLGS  EQU   IDAIXH+17
IXHLV    EQU   IDAIXH+16
IXHXX    EQU   IDAIXH+12
IXHHP    EQU   IDAIXH+8
IXHFLPLN EQU   IDAIXH+2
IXHLL    EQU   IDAIXH
@NM00016 EQU   CIDFLL
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCHAIN EQU   IDABUFC+48
BUFXORBA EQU   IDABUFC+44
BUFXIRBA EQU   IDABUFC+40
BUFCNXT2 EQU   IDABUFC+37
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCCPA  EQU   IDABUFC+16
BUFCORBA EQU   IDABUFC+12
BUFCAMB  EQU   BUFCPLH
@NM00015 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCMW   EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00014 EQU   IDABUFDR+16
BUFDBUFC EQU   IDABUFDR+12
@NM00013 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
IXSLEP   EQU   IDAIXSPL+28
IXSSEP   EQU   IDAIXSPL+24
IXSPEC   EQU   IDAIXSPL+19
IXSEKON  EQU   IDAIXSPL+18
@NM00012 EQU   IXSBFLG
IXSLELV  EQU   IXSBFLG
IXSSSRH  EQU   IXSBFLG
IXSKLEN  EQU   IDAIXSPL+14
IXSBUFC  EQU   IDAIXSPL+4
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00010 EQU   IDAPLH+265
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00009 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHRBUFC EQU   IDAPLH+192
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00008 EQU   IDAPLH+172
@NM00007 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHAMB   EQU   IDAPLH+108
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHNBUFC EQU   IDAPLH+56
PLHARDB  EQU   IDAPLH+44
@NM00006 EQU   IDAPLH+43
PLHEOVR  EQU   IDAPLH+42
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00005 EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
@NM00004 EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00003 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
@NM00002 EQU   RPLRBAR+3
@NM00001 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLRSV77 EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
RPLSSNIN EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
RPLOPT4  EQU   RPLOPTCD+3
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLWAITX EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLECBIN EQU   RPLECBSW
RPLASY   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLAREA  EQU   RPLCOMN+32
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00171 EQU   @RC00169
@RC00186 EQU   @RC00169
@RF00288 EQU   @RC00162
@RT00358 EQU   DRLC
@RF00445 EQU   DLRB
@RT00578 EQU   DRL8
@RT00589 EQU   DRL6
@RF00593 EQU   NOREC
@RT00748 EQU   DRL6
@RT00774 EQU   READMORE
@RT00779 EQU   DRL6
@RF00779 EQU   NOREC
@ENDDATA EQU   *
         END   IDA019RA,(C'PLS1934',0701,78172)
