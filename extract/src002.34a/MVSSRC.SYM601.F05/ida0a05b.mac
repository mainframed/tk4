         TITLE 'IDA0A05B - VS2 VSAM RESTART                            *
                        '
IDA0A05B CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA0A05B  78.174'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @03,0                                               0001
@PSTART  LA    @12,4095(,@03)                                      0001
         USING @PSTART,@03                                         0001
         USING @PSTART+4095,@12                                    0001
JSCBDISP EQU 188
JSCBAOS1 EQU  72
JSCBAOS2 EQU 192
RBPRFXLN EQU 64
RBPRFLNA EQU 32
PRBLEN   EQU 136
SIRBLEN  EQU 200
TIRBLEN  EQU 136
IRBLEN   EQU 128
SVRBLEN  EQU 224
         L     @00,@SIZDATD             LOAD LENGTH OF AUTOMATICS
         GETMAIN RC,LV=(0),SP=0         ISSUE GETMAIN IN SUBPOOL ZERO
         LTR   @15,@15                  TEST RETURN CODE FOR ERROR
         BNZ   GMN00100                 BRANCH IF ERROR ENCOUNTERED
*                                       IF NO ERROR WAS ENCOUNTERED
         LR    @00,@01                  ADDRESS OF GOTTEN AREA IN R0
         LR    @14,@01                  SAVE THE ADDRESS IN REGISTER 14
         L     @01,@SIZDATD             LENGTH OF GOTTEN AREA
         MVCL  @00,@14                  ZERO THE GOTTEN AREA, R15=0
         LR    @15,@14                  ADDRESS OF AREA IN REGISTER 15
         ST    @15,8(,@13)              FORWARD CHAIN THIS SAVE AREA
         L     @01,@SIZDATD             LENGTH OF GOTTEN AREA
         ST    @01,88(,@15)             STORE LENGTH OF AREA
         LR    @14,@03                  LOAD BASE REGISTER OF MODULE
         LA    @01,23                   LOAD NEGATIVE OFFSET BYTE NO.
         SR    @14,@01                  NEGITIVE OFFSET 23 BYTES
         MVC   72(16,@15),0(@14)        GET MODULE NAME AND DATE
         B     GMN00200                 BYPASS SETTING ERROR
GMN00100 SR    @15,@15                  REGISTER 15 = 0 INDICATES ERROR
GMN00200 EQU   *                        R15 CONTAINS ADDRESS OR ZERO
*        REGISTER 15 CONTAINS EITHER THE ADDRESS OF GOTTEN CORE OR
*        ZERO IF THE GETMAIN WAS UNSUCCESSFUL.
*   R11=RETCODE;                    /* SAVE ADDRESS OF MODULE W.A.   */
         LR    R11,RETCODE                                         0284
*   R0=(LENGTH(SP250WA)+SEVEN)&-DWORDLEN;/* LENGTH UNPROTECTED W.A.  */
         LA    R0,152                                              0285
*   GEN(GETMAIN RC,LV=(0),SP=250);  /* GET CORE FOR UNPROTECTED W.A. */
         GETMAIN RC,LV=(0),SP=250
*   IF RETCODE^=ZERO×R11=ZERO THEN  /* IF NO CORE AVAILABLE          */
         SLR   @14,@14                                             0287
         CR    RETCODE,@14                                         0287
         BNE   @RT00287                                            0287
         CR    R11,@14                                             0287
         BNE   @RF00287                                            0287
@RT00287 DS    0H                                                  0288
*     SAREG(1)->RSRETCD2=RSERR195;  /* SET RESTART RETURN CODE       */
         L     @14,SAREG(,R13)                                     0288
         MVI   RSRETCD2(@14),X'C3'                                 0288
*                                                                  0289
*   /*****************************************************************/
*   /*                                                               */
*   /* NO ERRORS WERE DETECTED OBTAINING THE MODULE WORK AREAS, SO   */
*   /* CONTINUE WITH MODULE INITIALIZATION                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0289
*   ELSE                            /* NO ERROR                      */
*     DO;                           /* MAINLINE                      */
         B     @RC00287                                            0289
@RF00287 DS    0H                                                  0290
*       R11->SABWRD=R13;            /* CHAIN THE SAVE AREA           */
         ST    R13,SABWRD(,R11)                                    0290
*       R13=R11;                    /* LOAD PTR TO AUTOMATICS        */
         LR    R13,R11                                             0291
*       GEN(USING @DATD,R13);       /* GET BASE FOR AUTOMATICS       */
         USING @DATD,R13
*       MWASP250=R1;                /* SAVE THE POINTER TO THE UWA   */
         ST    R1,MWASP250                                         0293
*       RSTWAPTR=SABWRD->SAREG(1);  /* POINTER TO RESTART WORK AREA  */
         L     @14,SABWRD(,R13)                                    0294
         L     @14,SAREG(,@14)                                     0294
         ST    @14,RSTWAPTR                                        0294
*       RETCONT=ZERO;               /* INIT ARRAY CONTROL            */
         SLR   @14,@14                                             0295
         ST    @14,RETCONT                                         0295
*       SAVBASEB=RBASEB;            /* SAVE SECOND BASE REGISTER     */
         ST    RBASEB,SAVBASEB                                     0296
*       CALL RECOVERY;              /* EST. RECOVERY ENVIRONMENT     */
         BAL   @14,RECOVERY                                        0297
*       TBLPTR=ADDR(ARDBTAB(1));    /* ADDRESSIBILITY FOR ARDBTBL    */
         LA    @14,ARDBTAB                                         0298
         ST    @14,TBLPTR                                          0298
*       ADDR(SP250SA)->SABWRD=ADDR(SAVAREA);/* PT UWA SA TO SAVEAREA */
         L     @14,MWASP250                                        0299
         ST    R13,SABWRD(,@14)                                    0299
*       RESPECIFY                                                  0300
*        (RETCODE,                                                 0300
*         R11,                                                     0300
*         R1,                                                      0300
*         R0) UNRESTRICTED;                                        0300
*                                                                  0300
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE OPEN INTERFACE CONTROL BLOCKS                  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0301
*       RESPECIFY                                                  0301
*         DEBXTN BASED(ADDR(MWADBXTN));/* PT TO MODEL DEB EXTENSION  */
*       RCORE=ADDR(MWAOPWRK);       /* POINT TO VSAM OPEN WORK AREA  */
         LA    RCORE,MWAOPWRK                                      0302
*       OPWCOMWA=ADDR(FORCORE);     /* ADDRESS OF COMMON WORK AREA   */
         LA    @05,MWAFCORE                                        0303
         ST    @05,OPWCOMWA(,RCORE)                                0303
*       RSTATRTN=IDARA05B;          /* NOTE IDA0A05B IN CONTROL      */
         MVC   RSTATRTN(4,@05),@CC05018                            0304
*       DXDEBXAD=ADDR(MWADBXTN);    /* POINT TO MODEL DEB EXTENSION  */
         LA    @15,MWADBXTN                                        0305
         ST    @15,DXDEBXAD(,@05)                                  0305
*       DEBXLNGH=LENGTH(DEBXTN);    /* SET LENGTH FIELD IN EXTENSION */
         MVC   DEBXLNGH(2,@15),@CH00348                            0306
*       OPWSUBPL=WKPOOL;            /* SET SUBPOOL IN ACB WORK       */
         MVI   OPWSUBPL(RCORE),X'FC'                               0307
*       OPWLENTH=LENGTH(MWAOPWRK);  /* SET LENGTH IN ACB WORK        */
         MVC   OPWLENTH(3,RCORE),@CF05421+1                        0308
*       OPWID='IDAOPWRK';           /* SET EBCDIC ID IN OPW          */
         MVC   OPWID(8,RCORE),@CC05327                             0309
*       OPWCTCB=ADDR(TCB);          /* INIT PTR TO CURRENT TCB       */
         L     @05,PSATOLD                                         0310
         ST    @05,OPWCTCB(,RCORE)                                 0310
*       OPWJSTCB=TCBJSTCB;          /* PTR TO JOB STEP TCB           */
         L     @05,TCBJSTCB(,@05)                                  0311
         ST    @05,OPWJSTCB(,RCORE)                                0311
*       OPWERMAP=MWAERMAP;          /* INITIALIZE ERROR MAP          */
         MVC   OPWERMAP(256,RCORE),MWAERMAP                        0312
*       MWASFIPT=ADDR(OPWSFI);      /* INITIALIZE PTR TO SFI         */
         LA    @05,OPWSFI(,RCORE)                                  0313
         STCM  @05,7,MWASFIPT                                      0313
*       MWAQNAME='SYSVSAM ';        /* INITIALIZE QNAME      @ZA04523*/
         MVC   MWAQNAME(8),@CC05328                                0314
*       DO LC0=TWO TO ONE BY-ONE;   /* INIT BOTH ENQ ENTRIES @ZA04523*/
         LA    LC0,2                                               0315
@DL00315 DS    0H                                                  0316
*         MWARNIND(LC0)='B';        /* SET BUSY IN RNAME     @ZA04523*/
         LR    @15,LC0                                             0316
         SLA   @15,3                                               0316
         LA    @14,MWARNIND-8(@15)                                 0316
         MVI   0(@14),C'B'                                         0316
*         ENQSYS(LC0)=ON;           /* INDICATE SYSTEM ENQ.  @ZA04523*/
         LR    @14,LC0                                             0317
         MH    @14,@CH00033                                        0317
         LA    @01,ENQSYS-12(@14)                                  0317
         OI    0(@01),B'01000000'                                  0317
*         ENQRLEN(LC0)=LENGTH(MWARNAME);/* SET RNAME LENGTH  @ZA04523*/
         LA    @11,8                                               0318
         STC   @11,ENQRLEN-12(@14)                                 0318
*         ENQQNADR(LC0)=ADDR(MWAQNAME);/* SET QNAME ADDRESS  @ZA04523*/
         LA    @11,MWAQNAME                                        0319
         ST    @11,ENQQNADR-12(@14)                                0319
*         ENQRNADR(LC0)=ADDR(MWARNAME(LC0));/* SET RNAME ADR @ZA04523*/
         LA    @15,MWARNAME-8(@15)                                 0320
         ST    @15,ENQRNADR-12(@14)                                0320
*       END;                        /* END INITIALIZATION    @ZA04523*/
         BCTR  LC0,0                                               0321
         LTR   LC0,LC0                                             0321
         BP    @DL00315                                            0321
*       ENQEND(TWO)=ON;             /* SET LAST ENTRY IND.   @ZA04523*/
         OI    ENQEND+12,B'10000000'                               0322
*                                                                  0323
*       /*************************************************************/
*       /*                                                           */
*       /* BUILD THE GLOBAL CONTROL BLOCK FOR SHARED RESOURCE POOLS  */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0323
*       CALL BLDVSRP;               /* BUILD SHARED RESOURCE POOL    */
*                                                                  0323
         BAL   @14,BLDVSRP                                         0323
*       /*************************************************************/
*       /*                                                           */
*       /* REBUILD THE CONTROL BLOCK STRUCTURE FOR ALL OPEN CLUSTERS */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0324
*       PAMBLPTR=VATPAMBL;          /* GET PTR TO FIRST P-AMBL       */
         L     @05,PSATOLD                                         0324
         L     @05,TCBJSCB(,@05)                                   0324
         L     @05,JSCBSHR(,@05)                                   0324
         L     @05,VATPAMBL(,@05)                                  0324
         ST    @05,PAMBLPTR                                        0324
*       DO WHILE PAMBLPTR^=0;       /* PROCESS PRIMARY AMBLS @ZA03934*/
         B     @DE00325                                            0325
@DL00325 DS    0H                                                  0326
*         AMBLPTR=PAMBLPTR;         /* ADDRESSIBILITY FOR AMBL       */
         L     @05,PAMBLPTR                                        0326
         ST    @05,AMBLPTR                                         0326
*         OPWBIB=AMBLBIB;           /* PT TO THE BIB FOR THE SPHERE  */
         L     @15,AMBLBIB(,@05)                                   0327
         ST    @15,OPWBIB(,RCORE)                                  0327
*         BIBREST=ON;               /* RESTART IS PROCESSING         */
         OI    BIBREST(@15),B'01000000'                            0328
*         BIBCSL=ZERO;              /* ZERO BIB CSL POINTER          */
         SLR   @14,@14                                             0329
         ST    @14,BIBCSL(,@15)                                    0329
*         OPWRSTRT=ON;              /* INDICATE RESTART IN PROGRESS  */
         OI    OPWRSTRT(RCORE),B'00001000'                         0330
*         OPWBCON=ZERO;             /* NOT CONNECTING TO BASE        */
         ST    @14,OPWBCON(,RCORE)                                 0331
*         VCRTPTR=BIBVCRT;          /* SAVE THE ADDRESS OF VCRT      */
         L     @15,BIBVCRT(,@15)                                   0332
         ST    @15,VCRTPTR                                         0332
*         IF AMBLXPT^=ZERO THEN     /* DOES A PATH AMBL EXIST        */
         L     @05,AMBLXPT(,@05)                                   0333
         CR    @05,@14                                             0333
         BE    @RF00333                                            0333
*           AMBLPTR=AMBLXPT;        /* YES, POINT TO PATH INSTEAD    */
         ST    @05,AMBLPTR                                         0334
*         RACB=AMBLACB;             /* ADDRESSIBILITY FOR ACB        */
@RF00333 L     @01,AMBLPTR                                         0335
         L     RACB,AMBLACB(,@01)                                  0335
*         OPWUACB=ADDR(IFGACB);     /* SAVE PTR TO USER ACB          */
         ST    RACB,OPWUACB(,RCORE)                                0336
*         OPWTIOT=TCBTIO+ACBTIOT;   /* POINT TO TIOT ENTRY           */
         LH    @15,ACBTIOT(,RACB)                                  0337
         L     @14,PSATOLD                                         0337
         AL    @15,TCBTIO(,@14)                                    0337
         ST    @15,OPWTIOT(,RCORE)                                 0337
*         JFCBPTR=TIOEJFCB;         /* GET ADDRESS OF JFCB           */
         SLR   JFCBPTR,JFCBPTR                                     0338
         ICM   JFCBPTR,7,TIOEJFCB(@15)                             0338
*         DXJBF=JFCB;               /* GET JFCB FROM LSQA            */
         LA    @15,MWAFCORE                                        0339
         MVC   DXJBF(176,@15),JFCB(JFCBPTR)                        0339
*         MWAPRMID=OP1;             /* SET REQUEST TYPE              */
         MVI   MWAPRMID,X'04'                                      0340
*         RESPECIFY                                                0341
*           R1 RESTRICTED;                                         0341
*         R1=ADDR(MWAPRM2C);        /* GET ADDRESS OF PARAMETER LIST */
         LA    R1,MWAPRM2C                                         0342
*         RSTATRTN=IDAR192C;        /* NOTE CONTROL PASSING TO 192C  */
         MVC   RSTATRTN(4,@15),@CC04986                            0343
*         CALL IDA0192C;            /* GET ASSOCIATIONS              */
         L     @15,@CV05280                                        0344
         BALR  @14,@15                                             0344
*         RESPECIFY                                                0345
*           R1 UNRESTRICTED;                                       0345
*         RESPECIFY                                                0346
*           RETCODE RESTRICTED;                                    0346
*         RSTATRTN=IDARA05B;        /* NOTE A05B BACK IN CONTROL     */
         LA    @14,MWAFCORE                                        0347
         MVC   RSTATRTN(4,@14),@CC05018                            0347
*         MWARETCD=RETCODE;         /* SAVE RETURN CODE FOR ANALYSIS */
         ST    RETCODE,MWARETCD                                    0348
*         IF RETCODE^=ZERO THEN     /* CHECK RETURN CODE FOR ERRORS  */
         LTR   RETCODE,RETCODE                                     0349
         BZ    @RF00349                                            0349
*           DO;                     /* ANY ERRORS THEN               */
*             RSRETCD2=RSERR190;    /* SET RETURN CODE               */
         L     @14,RSTWAPTR                                        0351
         MVI   RSRETCD2(@14),X'BE'                                 0351
*             CALL ERREXIT;         /* TAKE ERROR EXIT FROM MODULE   */
         BAL   @14,ERREXIT                                         0352
*           END;                                                   0353
*         RESPECIFY                                                0354
*           RETCODE UNRESTRICTED;                                  0354
@RF00349 DS    0H                                                  0355
*         IF VCRLSR=ON THEN         /* IF AN LSR OPEN        @ZA04230*/
         L     @05,VCRTPTR                                         0355
         TM    VCRLSR(@05),B'01000000'                             0355
         BNO   @RF00355                                            0355
*           CALL FREEHEBS;          /* RELEASE UNNEEDED HEBS @ZA04230*/
         BAL   @14,FREEHEBS                                        0356
*         ELSE                      /* NOT LSR OPEN          @ZA04230*/
*           DO;                     /* DO NON-LSR PROCESSING @ZA04230*/
         B     @RC00355                                            0357
@RF00355 DS    0H                                                  0358
*             CALL BLDVGTT;         /* BUILD THE VGTT FOR THE SPHERE */
         BAL   @14,BLDVGTT                                         0358
*             CALL BLDPSBLK;        /* BUILD PROTECTED SPHERE BLOCK  */
         BAL   @14,BLDPSBLK                                        0359
*           END;                    /* END NON-LSR           @ZA04230*/
*         IDAPDPRM=IDAPDPRM&&IDAPDPRM;/* CLEAR PROB DET PARM LIST    */
@RC00355 LA    @05,MWAFCORE                                        0361
         LA    @15,280                                             0361
         ALR   @15,@05                                             0361
         XC    IDAPDPRM(40,@15),IDAPDPRM(@15)                      0361
*         PDPCALL=PDPOPEN;          /* CALLER IS OPEN                */
         MVI   PDPCALL(@15),X'00'                                  0362
*         PDPACB=RACB;              /* POINT TO USER ACB             */
         ST    RACB,PDPACB(,@15)                                   0363
*         PDPTIOT=OPWTIOT;          /* GET ADDRESS OF TIOT ENTRY     */
         L     @14,OPWTIOT(,RCORE)                                 0364
         ST    @14,PDPTIOT(,@15)                                   0364
*         PDPCLSNM=ADDR(JFCBDSNM);  /* GET ADDRESS OF CLUSTER NAME   */
         AL    @05,@CF02132                                        0365
         ST    @05,PDPCLSNM(,@15)                                  0365
*         PDPDSTYP=PDPDDNM;         /* SET DATA SET TYPE TO DDNAME   */
         MVI   PDPDSTYP(@15),X'01'                                 0366
*         PDPCTACB=OPWCACB;         /* SET ADDRESS OF CATALOG ACB    */
         L     @05,OPWCACB(,RCORE)                                 0367
         ST    @05,PDPCTACB(,@15)                                  0367
*         DO WHILE BIBVMT^=ZERO;    /* ELIMINATE THE VMTS            */
         B     @DE00368                                            0368
@DL00368 DS    0H                                                  0369
*           MWASP=VMTPOOL;          /* SET THE VMT SUBPOOL           */
         MVI   MWASP,X'FC'                                         0369
*           MWALEN=VMTLEN;          /* SET THE VMT LENGTH            */
         L     @05,OPWBIB(,RCORE)                                  0370
         L     @15,BIBVMT(,@05)                                    0370
         LH    @14,VMTLEN(,@15)                                    0370
         STCM  @14,7,MWALEN                                        0370
*           MWAPTR=BIBVMT;          /* SET THE ADDRESS OF THIS VMT   */
         ST    @15,MWAPTR                                          0371
*           BIBVMT=VMTNXT;          /* POINT TO THE NEXT VMT         */
         L     @15,VMTNXT(,@15)                                    0372
         ST    @15,BIBVMT(,@05)                                    0372
*           RESPECIFY                                              0373
*            (R0,                                                  0373
*             R1) RESTRICTED;                                      0373
*           LM(R0,R1,MWAFREMN);     /* LOAD THE FREEMAIN REGISTERS   */
         LM    R0,R1,MWAFREMN                                      0374
*           GEN(FREEMAIN R,LV=(0),A=(1));/* FREE THE VMT             */
         FREEMAIN R,LV=(0),A=(1)
*           RESPECIFY                                              0376
*            (R0,                                                  0376
*             R1) UNRESTRICTED;                                    0376
*         END;                      /* END OF DELETE VMTS            */
@DE00368 L     @05,OPWBIB(,RCORE)                                  0377
         L     @05,BIBVMT(,@05)                                    0377
         LTR   @05,@05                                             0377
         BNZ   @DL00368                                            0377
*         CALL BLDVMT;              /* BUILD VMTS AND MOUNT VOLUMES  */
         BAL   @14,BLDVMT                                          0378
*         CALL BLDOPEN;             /* BUILD THE OPEN STRUCTURE      */
         BAL   @14,BLDOPEN                                         0379
*         BIBREST=OFF;              /* RESTART FINISHED PROCESSING   */
         L     @05,OPWBIB(,RCORE)                                  0380
         NI    BIBREST(@05),B'10111111'                            0380
*         PAMBLPTR=PAMBLPTR->AMBLPCHN;/* POINT TO THE NEXT P-AMBL    */
         L     @05,PAMBLPTR                                        0381
         L     @05,AMBLPCHN(,@05)                                  0381
         ST    @05,PAMBLPTR                                        0381
*       END;                                                       0382
@DE00325 L     @05,PAMBLPTR                                        0382
         LTR   @05,@05                                             0382
         BNZ   @DL00325                                            0382
*                                                                  0383
*       /*************************************************************/
*       /*                                                           */
*       /* CLEANUP PROCESSING FOR IDA0A05B                           */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0383
*       RCORE=ADDR(FORCORE);        /* POINT TO FORCORE FOR IDACI96C */
         LA    RCORE,MWAFCORE                                      0383
*       CALL IDACI96C;              /* REMOVE C/R CONTROL BLOCKS     */
         L     @15,@CV05284                                        0384
         BALR  @14,@15                                             0384
*       CALL DELVSRP;               /* REMOVE RESTART RESOURCE POOL  */
         BAL   @14,DELVSRP                                         0385
*       CALL FIXDEBS;               /* RESET DEBS FOR VSAM ACBS      */
         BAL   @14,FIXDEBS                                         0386
*       RESPECIFY                                                  0387
*        (R0,                                                      0387
*         R1) RESTRICTED;                                          0387
*       MWASP=USERPOOL;             /* GET USER SUBPOOL              */
         MVI   MWASP,X'FA'                                         0388
*       MWALEN=(LENGTH(SP250WA)+SEVEN)&-DWORDLEN;/* LENGTH OF UWA    */
         MVC   MWALEN(3),@CF02149+1                                0389
*       MWAPTR=ADDR(SP250WA);       /* GET ADDRESS UNPROTECTED W.A.  */
         L     @05,MWASP250                                        0390
         ST    @05,MWAPTR                                          0390
*       LM(R0,R1,MWAFREMN);         /* LOAD THE FREEMAIN REGISTERS   */
         LM    R0,R1,MWAFREMN                                      0391
*       GEN(FREEMAIN R,LV=(0),A=(1));/* FREE UNPROTECTED WORK AREA   */
         FREEMAIN R,LV=(0),A=(1)
*       GEN(L R0,@SIZDATD);         /* LOAD R0 WITH SP & SIZE OF MWA */
         L R0,@SIZDATD
*       R1=R13;                     /* LOAD REG 1 WITH ADDRESS OF MWA*/
         LR    R1,R13                                              0394
*       R13=SABWRD;                 /* POINT R13 AT PREVIOUS SAVE    */
         L     R13,SABWRD(,R13)                                    0395
*       GEN(FREEMAIN R,LV=(0),A=(1));/* FREE MODULE WORK AREA        */
         FREEMAIN R,LV=(0),A=(1)
*       GEN(ESTAE 0);               /* RELEASE RECOVERY ENVIRONMENT  */
         ESTAE 0
*     END;                                                         0398
*   LM(RET,R12,SAREGS);             /* RESTORE CALLERS REGS          */
@RC00287 LM    RET,R12,SAREGS(R13)                                 0399
*   GEN(BR RET);                    /* RETURN TO CALLER              */
         BR RET
*   RESPECIFY                                                      0401
*    (R0,                                                          0401
*     R1) UNRESTRICTED;                                            0401
*ERREXIT:                                                          0402
*                                                                  0402
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - ISSUES A WRITE-TO-OPERATOR TO IDENTIFY THE DD       */
*/*              ON WHICH THE ERROR OCCURRED AND EXITS THE MODULE.   */
*/*   INPUT    - A POINTER TO THE TIOT ENTRY IN OPWTIOT              */
*/*   OUTPUT   - MESSAGE IHJ009I IS ISSUED FOR ALL ERRORS EXCEPT 195 */
*/*              (NOT ENOUGH STORAGE), 199 (BLDVRP FAILED), AND      */
*/*              240 (UNABLE TO ESTABLISH ESTAE EXIT).               */
*/*              THE MODULE IS EXITED                                */
*/*                                                                  */
*/********************************************************************/
*                                                                  0402
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0402
ERREXIT  DS    0H                                                  0403
*   RESPECIFY                                                      0403
*     RET RESTRICTED;                                              0403
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0404
         AL    @15,RETCONT                                         0404
         ST    @15,RETCONT                                         0404
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               0405
         ST    RET,RETSAVE-4(@15)                                  0405
*   RESPECIFY                                                      0406
*     RET UNRESTRICTED;                                            0406
*   RBASEB=SAVBASEB;                /* MAKE SURE BASE REG 12 IS OK   */
         L     RBASEB,SAVBASEB                                     0407
*   IF RSRETCD2^=RSERR195&          /* IF WE AREN'T SHORT OF STORAGE */
*       RSRETCD2^=RSERR199&         /* AND NOT A BLDVRP ERROR        */
*       RSRETCD2<RSERR240 THEN      /* AND NOT A RECOVERY ERROR      */
         L     @05,RSTWAPTR                                        0408
         CLI   RSRETCD2(@05),195                                   0408
         BE    @RF00408                                            0408
         CLI   RSRETCD2(@05),199                                   0408
         BE    @RF00408                                            0408
         CLI   RSRETCD2(@05),240                                   0408
         BNL   @RF00408                                            0408
*     DO;                           /* THEN                          */
*       MSGAREA=MESSAGE;            /* MOVE IN MESSAGE SKELETON      */
         MVC   MSGAREA(33),MESSAGE                                 0410
*       MSGDDNM=TIOEDDNM;           /* MOVE IN DDNAME                */
         L     @05,OPWTIOT(,RCORE)                                 0411
         MVC   MSGDDNM(8),TIOEDDNM(@05)                            0411
*       RESPECIFY                                                  0412
*         R1 RESTRICTED;                                           0412
*       R1=ADDR(MSGAREA);           /* POINT TO MSG FOR WTO MACRO    */
         LA    R1,MSGAREA                                          0413
*       GEN(WTO MF=(E,(1)));        /* TELL WHICH DD HAD THE ERROR   */
         WTO MF=(E,(1))
*       RESPECIFY                                                  0415
*         R1 UNRESTRICTED;                                         0415
*     END;                                                         0416
*   IF RSRETCD2^=RSERR240 THEN      /* IF ESTAE WAS ESTABLISHED      */
@RF00408 L     @05,RSTWAPTR                                        0417
         CLI   RSRETCD2(@05),240                                   0417
         BE    @RF00417                                            0417
*     GEN(ESTAE 0);                 /* RELEASE RECOVERY ENVIRONMENT  */
         ESTAE 0
*   R13=SABWRD;                     /* POINT TO PREVIOUS SAVE AREA   */
@RF00417 L     R13,SABWRD(,R13)                                    0419
*   LM(RET,R12,SAREGS);             /* RELOAD REGISTERS              */
         LM    RET,R12,SAREGS(R13)                                 0420
*   GEN(BR RET);                    /* EXIT THE MODULE               */
         BR RET
*   END ERREXIT;                                                   0422
@EL00002 DS    0H                                                  0422
@EF00002 DS    0H                                                  0422
@ER00002 BR    @14                                                 0422
*RECOVERY:                                                         0423
*                                                                  0423
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - ESTABLISH THE RECOVERY ENVIRONMENT FOR IDA0A05B.    */
*/*   INPUT    - THE MODULE WORKAREA WITH MWAFCORE DEFINED           */
*/*   OUTPUT   - THE ESTAE IS ISSUE WITH MWAFCORE AS THE PARAMETER   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0423
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0423
RECOVERY DS    0H                                                  0424
*   RESPECIFY                                                      0424
*    (R0,                                                          0424
*     R1,                                                          0424
*     RET,                                                         0424
*     RETCODE) RESTRICTED;                                         0424
*   IDAESPL=ESTAEPRM;               /* COPY SKELETON INTO WORK AREA  */
         LA    @05,MWAFCORE                                        0425
         MVC   IDAESPL(16,@05),ESTAEPRM                            0425
*   R1=ADDR(IDAESPL);               /* PUT PTR TO PARM LIST IN REG 1 */
         LA    R1,IDAESPL(,@05)                                    0426
*   GEN(ESTAE PARAM=MWAFCORE,MF=(E,(1)));/* ISSUE ESTAE MACRO        */
         ESTAE PARAM=MWAFCORE,MF=(E,(1))
*   IF RETCODE^=ZERO THEN           /* CHECK THE RETURN CODE         */
         LTR   RETCODE,RETCODE                                     0428
         BZ    @RF00428                                            0428
*     DO;                           /* IF NOT ZERO                   */
*       RSRETCD2=RSERR240;          /* SET THE RESTART RETURN CODE   */
         L     @05,RSTWAPTR                                        0430
         MVI   RSRETCD2(@05),X'F0'                                 0430
*       CALL ERREXIT;               /* AND EXIT THE MODULE           */
         BAL   @14,ERREXIT                                         0431
*     END;                                                         0432
*   IDABASER=RBASEA;                /* SAVE BASE REG FOR RECOVERY    */
@RF00428 LA    @05,MWAFCORE                                        0433
         ST    RBASEA,IDABASER(,@05)                               0433
*   IDADATAR=R13;                   /* SAVE DATA REG FOR RECOVERY    */
         ST    R13,IDADATAR(,@05)                                  0434
*   IDARETRY=ADDR(ERREXIT);         /* RETRY ROUTINE IS ERREXIT      */
         LA    @11,ERREXIT                                         0435
         ST    @11,IDARETRY(,@05)                                  0435
*   IDACRWAP=ADDR(RSTWA);           /* SAVE ADDR OF RESTART WORKAREA */
         L     @11,RSTWAPTR                                        0436
         ST    @11,IDACRWAP(,@05)                                  0436
*   IDARRSTR=ON;                    /* RESTART IN PROGRESS           */
         OI    IDARRSTR(@05),B'01000000'                           0437
*   RSTATRTN=IDARA05B;              /* INDICATE IDA0A05B IN CONTROL  */
         MVC   RSTATRTN(4,@05),@CC05018                            0438
*   RESPECIFY                                                      0439
*    (R0,                                                          0439
*     R1,                                                          0439
*     RET,                                                         0439
*     RETCODE) UNRESTRICTED;                                       0439
*   END RECOVERY;                                                  0440
@EL00003 DS    0H                                                  0440
@EF00003 DS    0H                                                  0440
@ER00003 BR    @14                                                 0440
*BLDVSRP:                                                          0441
*                                                                  0441
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - DETERMINES IF A VSRT FOR LSR EXISTS AND INTERFACES  */
*/*              WITH IDA0192Y TO BUILD THE GLOBAL CONTROL BLOCKS    */
*/*              THAT WERE LOST AT STEP TERMINATION.  THE VATVSRT    */
*/*              FIELD IS SAVED AND A SHARED RESOURCE POOL IS BUILT  */
*/*              FOR RESTART PROCESSING.                             */
*/*   INPUT    - POINTER TO THE VSRT IN VATVPTR                      */
*/*   OUTPUT   - GLOBAL STORAGE IS BUILT FOR LOCAL SHARED RESOURCES  */
*/*              A SHARED RESOURCE POOL IS BUILT FOR RESTART         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0441
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0441
BLDVSRP  DS    0H                                                  0442
*   RESPECIFY                                                      0442
*     RET RESTRICTED;                                              0442
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0443
         AL    @15,RETCONT                                         0443
         ST    @15,RETCONT                                         0443
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               0444
         ST    RET,RETSAVE-4(@15)                                  0444
*   RESPECIFY                                                      0445
*     RET UNRESTRICTED;                                            0445
*   RCORE=ADDR(FORCORE);            /* RCORE PTS TO FORCORE FOR 192Y */
         LA    RCORE,MWAFCORE                                      0446
*   RACB=ADDR(IDABLPRM);            /* POINT REG 2 AT THE PARM LIST  */
         LA    @05,MWABLPRM                                        0447
         LR    RACB,@05                                            0447
*   IF VATVPTR^=ZERO THEN           /* DOES A VSRT EXIST FOR LSR     */
         L     @01,PSATOLD                                         0448
         L     @01,TCBJSCB(,@01)                                   0448
         L     @01,JSCBSHR(,@01)                                   0448
         L     @15,VATVPTR(,@01)                                   0448
         LTR   @15,@15                                             0448
         BZ    @RF00448                                            0448
*     DO;                                                          0449
*                                                                  0449
*       /*************************************************************/
*       /*                                                           */
*       /* INITIALIZE THE PARAMETER LIST AND CALL IDA0192Y           */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0450
*       BLPACBID=BLPACBCD;          /* SET THE ID BYTE               */
         MVI   BLPACBID(@05),X'A0'                                 0450
*       BLPACBST=BLPSTCD;           /* SET THE SUBTYPE FIELD         */
         MVI   BLPACBST(@05),X'11'                                 0451
*       BLPFDBDC=ON;                /* INDICATE SHARED RESOURCE REQ  */
*       BLPFBLD=ON;                 /* INDICATE BUILD REQUEST        */
*       BLPFLSR=ON;                 /* INDICATE LSR                  */
         OI    BLPFDBDC(@05),B'11010000'                           0454
*       BLPFRSTR=ON;                /* THIS IS A RESTART REQUEST     */
         OI    BLPFRSTR(@05),B'00000001'                           0455
*       BLPDSORG=BLPDSOCD;          /* SET THE DSORG FIELD FOR VSAM  */
         MVI   BLPDSORG(@05),X'08'                                 0456
*       BLPOFLGS=BLPOFLCD;          /* SET THE OFLAGS FIELD          */
         MVI   BLPOFLGS(@05),X'02'                                 0457
*       CALL IDA0192Y;              /* CALL THE BLDVRP ROUTINE       */
         L     @15,@CV05283                                        0458
         BALR  @14,@15                                             0458
*       RESPECIFY                                                  0459
*         RETCODE RESTRICTED;       /* SAVE THE RETURN CODE          */
*       RSTATRTN=IDARA05B;          /* NOTE IDA0A05B IN CONTROL      */
         LA    @14,MWAFCORE                                        0460
         MVC   RSTATRTN(4,@14),@CC05018                            0460
*       MWARETCD=RETCODE;           /* SAVE RETURN CODE FOR ANALYSIS */
         ST    RETCODE,MWARETCD                                    0461
*       IF RETCODE^=ZERO THEN       /* IF ANY ERRORS IN BLDVRP       */
         LTR   RETCODE,RETCODE                                     0462
         BZ    @RF00462                                            0462
*         DO;                                                      0463
*           RSRETCD2=RSERR199;      /* SET ERROR CODE IN RSTWA       */
         L     @14,RSTWAPTR                                        0464
         MVI   RSRETCD2(@14),X'C7'                                 0464
*           CALL ERREXIT;           /* EXIT THE MODULE               */
         BAL   @14,ERREXIT                                         0465
*         END;                                                     0466
*     END;                          /* END RESTORING RESOURCE POOL   */
@RF00462 DS    0H                                                  0468
*                                                                  0468
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE A BLDVRP REQUEST FOR THE RESTART SHARED RESOURCE POOL   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0468
*   MWAVSRT=VATVSRT;                /* SAVE THE VATVSRT FIELD        */
@RF00448 L     @14,PSATOLD                                         0468
         L     @14,TCBJSCB(,@14)                                   0468
         L     @14,JSCBSHR(,@14)                                   0468
         MVC   MWAVSRT(8),VATVSRT(@14)                             0468
*   VATVSRT=VATVSRT&&VATVSRT;       /* CLEAR VATVSRT FIELD           */
         XC    VATVSRT(8,@14),VATVSRT(@14)                         0469
*   IDABLPRM=IDABLPRM&&IDABLPRM;    /* CLEAR THE PARAMETER LIST      */
         LA    @14,MWABLPRM                                        0470
         XC    IDABLPRM(52,@14),IDABLPRM(@14)                      0470
*   BLPACBID=BLPACBCD;              /* SET THE ID BYTE               */
         MVI   BLPACBID(@14),X'A0'                                 0471
*   BLPACBST=BLPSTCD;               /* SET THE SUBTYPE FIELD         */
         MVI   BLPACBST(@14),X'11'                                 0472
*   BLPFDBDC=ON;                    /* A DBDC REQUEST                */
*   BLPFBLD=ON;                     /* A BUILD REQUEST               */
*   BLPFLSR=ON;                     /* FOR LOCAL SHARED RESOURCES    */
         OI    BLPFDBDC(@14),B'11010000'                           0475
*   BLPDSORG=BLPDSOCD;              /* SET THE DSORG FIELD FOR VSAM  */
         MVI   BLPDSORG(@14),X'08'                                 0476
*   BLPOFLGS=BLPOFLCD;              /* SET THE OFLAGS FIELD          */
         MVI   BLPOFLGS(@14),X'02'                                 0477
*   BLPBUFLP=ADDR(MWABUFLP);        /* POINT TO THE BUFFER LIST      */
         LA    @05,MWABUFLP                                        0478
         ST    @05,BLPBUFLP(,@14)                                  0478
*   BLPBUFL(1)=BLPBUFL(1)&&BLPBUFL(1);/* CLEAR BUFFER LIST   @ZA33504*/
         XC    BLPBUFL(8,@05),BLPBUFL(@05)                         0479
*   IF MWAVPTR^=ZERO THEN           /* IF AN LSR POOL EXISTS         */
         L     @05,MWAVPTR                                         0480
         LTR   @05,@05                                             0480
         BZ    @RF00480                                            0480
*     BLPKEYLN=MWAVPTR->VSRTKL;     /* SET THE KEY LENGTH            */
         IC    @11,VSRTKL(,@05)                                    0481
         STC   @11,BLPKEYLN(,@14)                                  0481
*   BLPSTRNO=ONE;                   /* GET ONE STRING                */
@RF00480 LA    @14,MWABLPRM                                        0482
         MVI   BLPSTRNO(@14),X'01'                                 0482
*   BLPBFLST(1)=ON;                 /* SET THE LAST ENTRY INDICATOR  */
         L     @14,BLPBUFLP(,@14)                                  0483
         OI    BLPBFLST(@14),B'10000000'                           0483
*   BLPBFLCT(1)=THREE;              /* SET THE BUFFER COUNT TO THREE */
         MVC   BLPBFLCT(2,@14),@CH00032                            0484
*   AMBLPTR=VATPAMBL;               /* POINT TO FIRST PRIMARY AMBL   */
         L     @05,PSATOLD                                         0485
         L     @05,TCBJSCB(,@05)                                   0485
         L     @05,JSCBSHR(,@05)                                   0485
         L     @05,VATPAMBL(,@05)                                  0485
         ST    @05,AMBLPTR                                         0485
*   BLPBUFSZ(1)=PAGE;               /* INITIZLIZE SIZE       @ZA08304*/
         MVC   BLPBUFSZ(4,@14),@CF05067                            0486
*   DO WHILE AMBLPTR^=ZERO;         /* SEARCH ALL VCRTS      @ZA08304*/
*                                                                  0487
         B     @DE00487                                            0487
@DL00487 DS    0H                                                  0488
*     /***************************************************************/
*     /*                                                             */
*     /* GET LARGEST CI SIZE FROM THE VRCTS AND USE AS BUFFER SIZE   */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0488
*     BLPBUFSZ(1)=MAX(BLPBUFSZ(1),AMBLBIB->BIBVCRT->VCRCISIZ);     0488
         LA    @14,MWABLPRM                                        0488
         L     @14,BLPBUFLP(,@14)                                  0488
         L     @05,AMBLPTR                                         0488
         L     @01,AMBLBIB(,@05)                                   0488
         L     @01,BIBVCRT(,@01)                                   0488
         L     @00,BLPBUFSZ(,@14)                                  0488
         L     @01,VCRCISIZ(,@01)                                  0488
         CR    @00,@01                                             0488
         BNL   *+6
         LR    @00,@01                                             0488
         ST    @00,BLPBUFSZ(,@14)                                  0488
*     AMBLPTR=AMBLPCHN;             /* POINT TO NEXT PRIMARY AMBL    */
         L     @14,AMBLPCHN(,@05)                                  0489
         ST    @14,AMBLPTR                                         0489
*   END;                                                           0490
@DE00487 L     @14,AMBLPTR                                         0490
         LTR   @14,@14                                             0490
         BNZ   @DL00487                                            0490
*   BLPBUFSZ(1)=(BLPBUFSZ(1)+PAGE-ONE)&-PAGE;/* ROUNDUP TO PAGE SIZE */
         LA    @14,MWABLPRM                                        0491
         L     @14,BLPBUFLP(,@14)                                  0491
         L     @05,BLPBUFSZ(,@14)                                  0491
         SL    @05,@CF05424                                        0491
         N     @05,@CF05425                                        0491
         ST    @05,BLPBUFSZ(,@14)                                  0491
*   CALL IDA0192Y;                  /* BLD RESTART SHARED RESOURCES  */
         L     @15,@CV05283                                        0492
         BALR  @14,@15                                             0492
*   RESPECIFY                                                      0493
*     RETCODE RESTRICTED;           /* SAVE THE RETURN CODE          */
*   RSTATRTN=IDARA05B;              /* NOTE IDA0A05B IN CONTROL      */
         LA    @14,MWAFCORE                                        0494
         MVC   RSTATRTN(4,@14),@CC05018                            0494
*   MWARETCD=RETCODE;               /* SAVE RETURN CODE FOR ANALYSIS */
         ST    RETCODE,MWARETCD                                    0495
*   IF RETCODE^=ZERO THEN           /* IF ANY ERRORS IN BLDVRP       */
         LTR   RETCODE,RETCODE                                     0496
         BZ    @RF00496                                            0496
*     DO;                                                          0497
*       RSRETCD2=RSERR199;          /* SET ERROR CODE IN RSTWA       */
         L     @14,RSTWAPTR                                        0498
         MVI   RSRETCD2(@14),X'C7'                                 0498
*       CALL ERREXIT;               /* EXIT THE MODULE               */
         BAL   @14,ERREXIT                                         0499
*     END;                                                         0500
*   RCORE=ADDR(MWAOPWRK);           /* POINT RCORE AT OPWRK          */
@RF00496 LA    RCORE,MWAOPWRK                                      0501
*   RESPECIFY                                                      0502
*     RET RESTRICTED;                                              0502
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @05,RETCONT                                         0503
         LR    @11,@05                                             0503
         SLA   @11,2                                               0503
         L     RET,RETSAVE-4(@11)                                  0503
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               0504
         ST    @05,RETCONT                                         0504
*   RESPECIFY                                                      0505
*    (R1,                                                          0505
*     RET,                                                         0505
*     RETCODE) UNRESTRICTED;                                       0505
*   END BLDVSRP;                                                   0506
@EL00004 DS    0H                                                  0506
@EF00004 DS    0H                                                  0506
@ER00004 BR    @14                                                 0506
*FREEHEBS:                          /*                       @ZA04230*/
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - RELEASES THE HEADER ELEMENTS FOR THE DEBS AND EDBS  */
*/*              IF THE SPHERE WAS OPENED WITH THE LSR OPTION.       */
*/*   INPUT    - THE VCRT IN VCRTPTR                                 */
*/*   OUTPUT   - HEADER ELEMENTS ARE CLEARED AND PUT ON THE FREE Q.  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0507
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0507
FREEHEBS DS    0H                                                  0508
*   RESPECIFY                                                      0508
*     RET RESTRICTED;                                              0508
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0509
         L     @05,RETCONT                                         0509
         ALR   @05,@15                                             0509
         ST    @05,RETCONT                                         0509
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @05,2                                               0510
         ST    RET,RETSAVE-4(@05)                                  0510
*   RESPECIFY                                                      0511
*     RET UNRESTRICTED;                                            0511
*                                                                  0511
*   /*****************************************************************/
*   /*                                                               */
*   /* RELEASE HEADER ELEMENTS FOR ALL UPGRADE ENTRIES               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0512
*   DO LC1=1 TO VCRUPGCT BY 1;      /* PROCESS ALL UPGRADE ENTRIES   */
         ST    @15,LC1                                             0512
         B     @DE00512                                            0512
@DL00512 DS    0H                                                  0513
*     AMBLPTR=VCRUAMBL(LC1);        /* ADDRESSIBILITY FOR AMBL       */
         SLA   @15,3                                               0513
         L     @05,VCRTPTR                                         0513
         L     @05,VCRUPG(,@05)                                    0513
         AL    @05,@CF05432                                        0513
         L     @05,VCRUAMBL-4(@15,@05)                             0513
         ST    @05,AMBLPTR                                         0513
*     DO WHILE CMBDEBPT^=ZERO;      /* PROCESS DEB HEADER ELEMENTS   */
         B     @DE00514                                            0514
@DL00514 DS    0H                                                  0515
*       HDRELPTR=CMBDEBPT;          /* POINT TO DEB HEADER ELEMENT   */
         L     @01,AMBLPTR                                         0515
         L     @15,AMBLCMB(,@01)                                   0515
         L     HDRELPTR,CMBDEBPT(,@15)                             0515
*       CMBDEBPT=HEBELCHN;          /* UPDATE POINTER IN CMB         */
         L     @14,HEBELCHN(,HDRELPTR)                             0516
         ST    @14,CMBDEBPT(,@15)                                  0516
*       HEBHDREL=HEBHDREL&&HEBHDREL;/* CLEAR THE HEADER ELEMENT      */
         XC    HEBHDREL(24,HDRELPTR),HEBHDREL(HDRELPTR)            0517
*       HEBELCHN=BIBHEBFQ;          /* CHAIN TO FREE QUEUE ELEMENT   */
         L     @15,OPWBIB(,RCORE)                                  0518
         L     @14,BIBHEBFQ(,@15)                                  0518
         ST    @14,HEBELCHN(,HDRELPTR)                             0518
*       BIBHEBFQ=ADDR(HEBHDREL);    /* PUT AT TOP OF FREE QUEUE      */
         ST    HDRELPTR,BIBHEBFQ(,@15)                             0519
*     END;                          /* END DEB HEADER PROCESSING     */
@DE00514 L     @05,AMBLPTR                                         0520
         L     @05,AMBLCMB(,@05)                                   0520
         L     @05,CMBDEBPT(,@05)                                  0520
         LTR   @05,@05                                             0520
         BNZ   @DL00514                                            0520
*     DO WHILE CMBEDBPT^=ZERO;      /* PROCESS EDB HEADER ELEMENTS   */
         B     @DE00521                                            0521
@DL00521 DS    0H                                                  0522
*       HDRELPTR=CMBEDBPT;          /* POINT TO EDB HEADER ELEMENT   */
         L     @01,AMBLPTR                                         0522
         L     @15,AMBLCMB(,@01)                                   0522
         L     HDRELPTR,CMBEDBPT(,@15)                             0522
*       CMBEDBPT=HEBELCHN;          /* UPDATE POINTER IN CMB         */
         L     @14,HEBELCHN(,HDRELPTR)                             0523
         ST    @14,CMBEDBPT(,@15)                                  0523
*       HEBHDREL=HEBHDREL&&HEBHDREL;/* CLEAR THE HEADER ELEMENT      */
         XC    HEBHDREL(24,HDRELPTR),HEBHDREL(HDRELPTR)            0524
*       HEBELCHN=BIBHEBFQ;          /* CHAIN TO FREE QUEUE ELEMENT   */
         L     @15,OPWBIB(,RCORE)                                  0525
         L     @14,BIBHEBFQ(,@15)                                  0525
         ST    @14,HEBELCHN(,HDRELPTR)                             0525
*       BIBHEBFQ=ADDR(HEBHDREL);    /* PUT AT TOP OF FREE QUEUE      */
         ST    HDRELPTR,BIBHEBFQ(,@15)                             0526
*     END;                          /* END EDB HEADER PROCESSING     */
@DE00521 L     @05,AMBLPTR                                         0527
         L     @05,AMBLCMB(,@05)                                   0527
         L     @05,CMBEDBPT(,@05)                                  0527
         LTR   @05,@05                                             0527
         BNZ   @DL00521                                            0527
*   END;                                                           0528
         LA    @15,1                                               0528
         AL    @15,LC1                                             0528
         ST    @15,LC1                                             0528
@DE00512 L     @05,VCRTPTR                                         0528
         CH    @15,VCRUPGCT(,@05)                                  0528
         BNH   @DL00512                                            0528
*                                                                  0529
*   /*****************************************************************/
*   /*                                                               */
*   /* RELEASE HEADER ELEMENTS FOR ALL OPEN ENTRIES                  */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0529
*   DO LC1=ONE TO VCROPNCT BY ONE;  /* PROCESS ALL OPEN ENTRIES      */
         LA    @05,1                                               0529
         ST    @05,LC1                                             0529
         B     @DE00529                                            0529
@DL00529 DS    0H                                                  0530
*     AMBLPTR=VCRAMBL(LC1);         /* ADDRESSIBILITY FOR AMBL       */
         SLA   @05,3                                               0530
         L     @01,VCRTPTR                                         0530
         L     @01,VCROPN(,@01)                                    0530
         AL    @01,@CF05432                                        0530
         L     @05,VCRAMBL-4(@05,@01)                              0530
         ST    @05,AMBLPTR                                         0530
*     DO WHILE CMBDEBPT^=ZERO;      /* PROCESS DEB HEADER ELEMENTS   */
         B     @DE00531                                            0531
@DL00531 DS    0H                                                  0532
*       HDRELPTR=CMBDEBPT;          /* POINT TO DEB HEADER ELEMENT   */
         L     @01,AMBLPTR                                         0532
         L     @15,AMBLCMB(,@01)                                   0532
         L     HDRELPTR,CMBDEBPT(,@15)                             0532
*       CMBDEBPT=HEBELCHN;          /* UPDATE POINTER IN CMB         */
         L     @14,HEBELCHN(,HDRELPTR)                             0533
         ST    @14,CMBDEBPT(,@15)                                  0533
*       HEBHDREL=HEBHDREL&&HEBHDREL;/* CLEAR THE HEADER ELEMENT      */
         XC    HEBHDREL(24,HDRELPTR),HEBHDREL(HDRELPTR)            0534
*       HEBELCHN=BIBHEBFQ;          /* CHAIN TO FREE QUEUE ELEMENT   */
         L     @15,OPWBIB(,RCORE)                                  0535
         L     @14,BIBHEBFQ(,@15)                                  0535
         ST    @14,HEBELCHN(,HDRELPTR)                             0535
*       BIBHEBFQ=ADDR(HEBHDREL);    /* PUT AT TOP OF FREE QUEUE      */
         ST    HDRELPTR,BIBHEBFQ(,@15)                             0536
*     END;                          /* END DEB HEADER PROCESSING     */
@DE00531 L     @05,AMBLPTR                                         0537
         L     @05,AMBLCMB(,@05)                                   0537
         L     @05,CMBDEBPT(,@05)                                  0537
         LTR   @05,@05                                             0537
         BNZ   @DL00531                                            0537
*     DO WHILE CMBEDBPT^=ZERO;      /* PROCESS EDB HEADER ELEMENTS   */
         B     @DE00538                                            0538
@DL00538 DS    0H                                                  0539
*       HDRELPTR=CMBEDBPT;          /* POINT TO EDB HEADER ELEMENT   */
         L     @01,AMBLPTR                                         0539
         L     @15,AMBLCMB(,@01)                                   0539
         L     HDRELPTR,CMBEDBPT(,@15)                             0539
*       CMBEDBPT=HEBELCHN;          /* UPDATE POINTER IN CMB         */
         L     @14,HEBELCHN(,HDRELPTR)                             0540
         ST    @14,CMBEDBPT(,@15)                                  0540
*       HEBHDREL=HEBHDREL&&HEBHDREL;/* CLEAR THE HEADER ELEMENT      */
         XC    HEBHDREL(24,HDRELPTR),HEBHDREL(HDRELPTR)            0541
*       HEBELCHN=BIBHEBFQ;          /* CHAIN TO FREE QUEUE ELEMENT   */
         L     @15,OPWBIB(,RCORE)                                  0542
         L     @14,BIBHEBFQ(,@15)                                  0542
         ST    @14,HEBELCHN(,HDRELPTR)                             0542
*       BIBHEBFQ=ADDR(HEBHDREL);    /* PUT AT TOP OF FREE QUEUE      */
         ST    HDRELPTR,BIBHEBFQ(,@15)                             0543
*     END;                          /* END EDB HEADER PROCESSING     */
@DE00538 L     @05,AMBLPTR                                         0544
         L     @05,AMBLCMB(,@05)                                   0544
         L     @05,CMBEDBPT(,@05)                                  0544
         LTR   @05,@05                                             0544
         BNZ   @DL00538                                            0544
*   END;                                                           0545
         LA    @05,1                                               0545
         AL    @05,LC1                                             0545
         ST    @05,LC1                                             0545
@DE00529 L     @01,VCRTPTR                                         0545
         CH    @05,VCROPNCT(,@01)                                  0545
         BNH   @DL00529                                            0545
*   RESPECIFY                                                      0546
*     RET RESTRICTED;                                              0546
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @05,RETCONT                                         0547
         LR    @15,@05                                             0547
         SLA   @15,2                                               0547
         L     RET,RETSAVE-4(@15)                                  0547
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               0548
         ST    @05,RETCONT                                         0548
*   RESPECIFY                                                      0549
*     RET UNRESTRICTED;                                            0549
*   END FREEHEBS;                   /*                       @ZA04230*/
@EL00005 DS    0H                                                  0550
@EF00005 DS    0H                                                  0550
@ER00005 BR    @14                                                 0550
*BLDVGTT:                                                          0551
*                                                                  0551
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - BUILDS THE VGTT FOR THE SPHERE AND CONNECTS IT TO   */
*/*              THE BIB, AND TO THE ASCB FOR THE MEMORY             */
*/*   INPUT    - THE PRIMARY AMBL IN PAMBLPTR                        */
*/*   OUTPUT   - THE VGTT INITIALIZED FOR THE SPHERE                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0551
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0551
BLDVGTT  DS    0H                                                  0552
*   RESPECIFY                                                      0552
*     RET RESTRICTED;                                              0552
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0553
         AL    @15,RETCONT                                         0553
         ST    @15,RETCONT                                         0553
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               0554
         ST    RET,RETSAVE-4(@15)                                  0554
*   RESPECIFY                                                      0555
*     RET UNRESTRICTED;                                            0555
*   OPWVMSP=PRTSPPL;                /* GET VGTT FROM SUBPOOL 241     */
         MVI   OPWVMSP(RCORE),X'F1'                                0556
*   OPWVMLNG=(LENGTH(IDAVGTT)+DWORDLEN-1)&-DWORDLEN;/* LNGTH OF VGTT */
         MVC   OPWVMLNG(3,RCORE),@CF00348+1                        0557
*   OPWVMTYP=DIRCTREQ;              /* INDICATE A DIRECT REQUEST     */
         MVI   OPWVMTYP(RCORE),X'85'                               0558
*   OPWVMFLG=ZERO;                  /* CLEAR THE FLAG BYTE           */
         MVI   OPWVMFLG(RCORE),X'00'                               0559
*   OPWVMNSL=ON;                    /* DO NOT BUILD A CSL ENTRY      */
         OI    OPWVMNSL(RCORE),B'00001000'                         0560
*   CALL IDA0192M;                  /* CALL THE VIRTUAL STORAGE MGR  */
         L     @15,@CV05282                                        0561
         BALR  @14,@15                                             0561
*   RSTATRTN=IDARA05B;              /* NOTE IDA0A05B BACK IN CONTROL */
         LA    @05,MWAFCORE                                        0562
         MVC   RSTATRTN(4,@05),@CC05018                            0562
*   IF OPWVMADR=ZERO THEN           /* SEE IF STORAGE WAS OBTAINED   */
         L     @05,OPWVMADR(,RCORE)                                0563
         LTR   @05,@05                                             0563
         BNZ   @RF00563                                            0563
*     DO;                           /* IF NOT,                       */
*       RSRETCD2=RSERR195;          /* INDICATE NO CORE AVAILABLE    */
         L     @05,RSTWAPTR                                        0565
         MVI   RSRETCD2(@05),X'C3'                                 0565
*       CALL ERREXIT;               /* AND RETURN TO VS RESTART      */
         BAL   @14,ERREXIT                                         0566
*     END;                                                         0567
*   VGTTID=VGTTNAME;                /* INITIALIZE ID                 */
@RF00563 L     @05,OPWVMADR(,RCORE)                                0568
         MVC   VGTTID(4,@05),@CC04941                              0568
*   VGTTOPEN=ON;                    /* INDICATE SPHERE VGTT          */
         OI    VGTTOPEN(@05),B'00001000'                           0569
*   VGTTSP=OPWVMSP;                 /* INITIALIZE SUBPOOL IN VGTT    */
         IC    @15,OPWVMSP(,RCORE)                                 0570
         STC   @15,VGTTSP(,@05)                                    0570
*   VGTTSIZE=OPWVMLNG;              /* INITIALIZE LENGTH IN VGTT     */
         L     @15,OPWVMLNG-1(,RCORE)                              0571
         LA    @15,0(,@15)                                         0571
         ST    @15,VGTTSIZE(,@05)                                  0571
*   DO UNTIL CSWORD1=VGTTNEXT;      /* EQUAL IF CS SUCCESSFUL        */
@DL00572 DS    0H                                                  0573
*     VGTTNEXT=ASCBVGTT;            /* GET ADDRESS OF TOP VGTT       */
         L     @07,OPWVMADR(,RCORE)                                0573
         L     @15,PSAAOLD                                         0573
         L     @14,ASCBVGTT(,@15)                                  0573
         ST    @14,VGTTNEXT(,@07)                                  0573
*     CSWORD1=VGTTNEXT;             /* INITIALIZE COMPARE OPERAND    */
         LR    CSWORD1,@14                                         0574
*     CSWORD2=ADDR(IDAVGTT);        /* INITIALIZE REPLACE OPERAND    */
         LR    CSWORD2,@07                                         0575
*     CS(CSWORD1,CSWORD2,ASCBVGTT); /* COMPARE AND SWAP              */
         CS    CSWORD1,@06,ASCBVGTT(@15)                           0576
*   END;                            /* DO AGAIN IF NOT SUCCESSFUL    */
@DE00572 L     @15,OPWVMADR(,RCORE)                                0577
         C     CSWORD1,VGTTNEXT(,@15)                              0577
         BNE   @DL00572                                            0577
*   VGTTBIB=ADDR(IDABIB);           /* VGTT POINTS TO THE BIB        */
         L     @05,OPWBIB(,RCORE)                                  0578
         ST    @05,VGTTBIB(,@15)                                   0578
*   BIBVGTT=ADDR(IDAVGTT);          /* BIB POINTS BACK TO THE VGTT   */
         ST    @15,BIBVGTT(,@05)                                   0579
*   RESPECIFY                                                      0580
*     RET RESTRICTED;                                              0580
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @05,RETCONT                                         0581
         LR    @15,@05                                             0581
         SLA   @15,2                                               0581
         L     RET,RETSAVE-4(@15)                                  0581
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               0582
         ST    @05,RETCONT                                         0582
*   RESPECIFY                                                      0583
*     RET UNRESTRICTED;                                            0583
*   END BLDVGTT;                                                   0584
@EL00006 DS    0H                                                  0584
@EF00006 DS    0H                                                  0584
@ER00006 BR    @14                                                 0584
*BLDPSBLK:                                                         0585
*                                                                  0585
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - REBUILDS THE CMB HEB CHAINS FOR THE SPHERE WITH THE */
*/*              EXCEPTION OF THE EDB AND DEB ENTRIES, AND THE FIXED */
*/*              PROTECTED STRING BLOCKS (UPGRADE AND NON-UPGRADE)   */
*/*   INPUT    - THE CURRENT VCRT IN VCRTPTR                         */
*/*   OUTPUT   - THE HEB ELEMENTS FOR THE SPHERE INITIALIZED         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0585
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0585
BLDPSBLK DS    0H                                                  0586
*   RESPECIFY                                                      0586
*     RET RESTRICTED;                                              0586
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0587
         AL    @15,RETCONT                                         0587
         ST    @15,RETCONT                                         0587
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               0588
         ST    RET,RETSAVE-4(@15)                                  0588
*   RESPECIFY                                                      0589
*     RET UNRESTRICTED;                                            0589
*   BIBHEBPT=ZERO;                  /* ZERO BIB HEB POINTER  @ZA04523*/
         SLR   @07,@07                                             0590
         L     @05,OPWBIB(,RCORE)                                  0590
         ST    @07,BIBHEBPT(,@05)                                  0590
*   BIBPRSPH=ZERO;                  /* ZERO BIB PSB POINTER  @ZA04523*/
         ST    @07,BIBPRSPH(,@05)                                  0591
*   ELEMNUM=HEBNEL+ONE;             /* FORCE BLDHEB TO OBTAIN A HEB  */
*                                                                  0592
         LA    ELEMNUM,17                                          0592
*   /*****************************************************************/
*   /*                                                               */
*   /* REBUILD SPHERE BLOCK HEADER ELEMENTS                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0593
*   LC1=ZERO;                       /* ZERO C1 TO TRIGGER SHPERE BLD */
         ST    @07,LC1                                             0593
*   BIBSPHPT=ZERO;                  /* CLEAR OLD HEB POINTER IN BIB  */
         ST    @07,BIBSPHPT(,@05)                                  0594
*   HEBSAPTR=VCRSPHPT;              /* ADDRESSIBILITY FOR HEB SAVE   */
         L     @05,VCRTPTR                                         0595
         L     @05,VCRSPHPT(,@05)                                  0595
         ST    @05,HEBSAPTR                                        0595
*   IF VCRSPHPT^=ZERO THEN          /* IF THERE IS A SPHERE BLOCK    */
         CR    @05,@07                                             0596
         BE    @RF00596                                            0596
*     CALL BLDHEBS;                 /* THEN REBUILD HEADER ELEMENTS  */
*                                                                  0597
         BAL   @14,BLDHEBS                                         0597
*   /*****************************************************************/
*   /*                                                               */
*   /* REBUILD HEADER ELEMENTS FOR ALL UPGRADE ENTRIES               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0598
*   DO LC1=1 TO VCRUPGCT BY 1;      /* PROCESS ALL UPGRADE ENTRIES   */
@RF00596 LA    @07,1                                               0598
         ST    @07,LC1                                             0598
         B     @DE00598                                            0598
@DL00598 DS    0H                                                  0599
*     HEBSAPTR=VCRUHEBS(LC1);       /* ADDRESSIBILITY FOR HEB SAVE   */
         SLA   @07,3                                               0599
         L     @05,VCRTPTR                                         0599
         L     @05,VCRUPG(,@05)                                    0599
         LA    @01,0(@07,@05)                                      0599
         AL    @01,@CF05420                                        0599
         L     @15,VCRUHEBS(,@01)                                  0599
         ST    @15,HEBSAPTR                                        0599
*     AMBLPTR=VCRUAMBL(LC1);        /* ADDRESSIBILITY FOR AMBL       */
         AL    @05,@CF05432                                        0600
         L     @07,VCRUAMBL-4(@07,@05)                             0600
         ST    @07,AMBLPTR                                         0600
*     CMBPTRS=CMBPTRS&&CMBPTRS;     /* ZERO POINTERS TO HDR ELEMENTS */
         L     @07,AMBLCMB(,@07)                                   0601
         XC    CMBPTRS(56,@07),CMBPTRS(@07)                        0601
*     DO UNTIL HEBSAPTR=ZERO;       /* PROCESS ALL HEB SAVE HEADERS  */
@DL00602 DS    0H                                                  0603
*       IF VCRHFREL=OFF THEN        /* SEE IF CORE IS TO BE FREED    */
         L     @07,HEBSAPTR                                        0603
         TM    VCRHFREL(@07),B'01000000'                           0603
         BNZ   @RF00603                                            0603
*         CALL BLDHEBS;             /* NO, CHAIN THE HEADERS         */
         BAL   @14,BLDHEBS                                         0604
*       HEBSAPTR=VCRHNEXT;          /* POINT TO NEXT HEB SAVE HEADER */
@RF00603 L     @07,HEBSAPTR                                        0605
         L     @07,VCRHNEXT(,@07)                                  0605
         ST    @07,HEBSAPTR                                        0605
*     END;                                                         0606
@DE00602 L     @07,HEBSAPTR                                        0606
         LTR   @07,@07                                             0606
         BNZ   @DL00602                                            0606
*   END;                                                           0607
         LA    @07,1                                               0607
         AL    @07,LC1                                             0607
         ST    @07,LC1                                             0607
@DE00598 L     @05,VCRTPTR                                         0607
         CH    @07,VCRUPGCT(,@05)                                  0607
         BNH   @DL00598                                            0607
*                                                                  0608
*   /*****************************************************************/
*   /*                                                               */
*   /* REBUILD HEADER ELEMENTS FOR OPEN ENTRIES WHICH DO NOT SHARE   */
*   /* THE UPGRADE CONTROL BLOCK STRUCTURE                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0608
*   DO LC1=ONE TO VCROPNCT BY ONE;  /* PROCESS ALL OPEN ENTRIES      */
         LA    @07,1                                               0608
         ST    @07,LC1                                             0608
         B     @DE00608                                            0608
@DL00608 DS    0H                                                  0609
*     HEBSAPTR=VCRHEBS(LC1);        /* ADDRESSIBILITY FOR HEB SAVE   */
         SLA   @07,3                                               0609
         L     @05,VCRTPTR                                         0609
         L     @05,VCROPN(,@05)                                    0609
         LA    @01,0(@07,@05)                                      0609
         AL    @01,@CF05420                                        0609
         L     @15,VCRHEBS(,@01)                                   0609
         ST    @15,HEBSAPTR                                        0609
*     AMBLPTR=VCRAMBL(LC1);         /* ADDRESSIBILITY FOR AMBL       */
         AL    @05,@CF05432                                        0610
         L     @07,VCRAMBL-4(@07,@05)                              0610
         ST    @07,AMBLPTR                                         0610
*     IF AMBLDTA->AMBPUG=OFF THEN   /* IF AMB IS NOT IN UPGRADE      */
         L     @05,AMBLDTA(,@07)                                   0611
         TM    AMBPUG(@05),B'10000000'                             0611
         BNZ   @RF00611                                            0611
*       CMBPTRS=CMBPTRS&&CMBPTRS;   /* ZERO THE HEADER ELEMENT PTRS  */
         L     @07,AMBLCMB(,@07)                                   0612
         XC    CMBPTRS(56,@07),CMBPTRS(@07)                        0612
*     DO UNTIL HEBSAPTR=ZERO;       /* PROCESS ALL HEB SAVE HEADERS  */
@RF00611 DS    0H                                                  0613
@DL00613 DS    0H                                                  0614
*       IF VCRHFREL=OFF THEN        /* SEE IF CORE IS TO BE FREED    */
         L     @07,HEBSAPTR                                        0614
         TM    VCRHFREL(@07),B'01000000'                           0614
         BNZ   @RF00614                                            0614
*         CALL BLDHEBS;             /* NO, CHAIN THE HEADERS         */
         BAL   @14,BLDHEBS                                         0615
*       HEBSAPTR=VCRHNEXT;          /* POINT TO NEXT HEB SAVE HEADER */
@RF00614 L     @07,HEBSAPTR                                        0616
         L     @07,VCRHNEXT(,@07)                                  0616
         ST    @07,HEBSAPTR                                        0616
*     END;                                                         0617
@DE00613 L     @07,HEBSAPTR                                        0617
         LTR   @07,@07                                             0617
         BNZ   @DL00613                                            0617
*   END;                                                           0618
         LA    @07,1                                               0618
         AL    @07,LC1                                             0618
         ST    @07,LC1                                             0618
@DE00608 L     @05,VCRTPTR                                         0618
         CH    @07,VCROPNCT(,@05)                                  0618
         BNH   @DL00608                                            0618
*   IF ELEMNUM>HEBNEL THEN          /* ANY FREE HEADER ELEMENTS?     */
         CL    ELEMNUM,@CF00050                                    0619
         BNH   @RF00619                                            0619
*     BIBHEBFQ=ZERO;                /* NO, INDICATE IN BIB           */
         L     @05,OPWBIB(,RCORE)                                  0620
         SLR   @15,@15                                             0620
         ST    @15,BIBHEBFQ(,@05)                                  0620
*   ELSE                            /* YES,                          */
*     DO;                           /* PUT ON BIB FREE QUEUE         */
         B     @RC00619                                            0621
@RF00619 DS    0H                                                  0622
*       HDRELPTR=ADDR(HEBHDELS(ELEMNUM));/* PT TO HDR ELEM   @ZA04230*/
         LR    @07,ELEMNUM                                         0622
         MH    @07,@CH00118                                        0622
         L     HDRELPTR,HEBPTR                                     0622
         AL    HDRELPTR,@CF05442                                   0622
         LA    HDRELPTR,HEBHDELS-12(@07,HDRELPTR)                  0622
*       BIBHEBFQ=ADDR(HEBHDREL);    /* ADDRESS OF 1ST IN BIB         */
         L     @07,OPWBIB(,RCORE)                                  0623
         ST    HDRELPTR,BIBHEBFQ(,@07)                             0623
*       DO ELEMNUM=ELEMNUM TO HEBCNT BY 1;/* CHAIN THE REST          */
         B     @DE00624                                            0624
@DL00624 DS    0H                                                  0625
*         HEBELCHN=HDRELPTR+LENGTH(HEBHDREL);/* CHAIN TO NXT @ZA04230*/
         LA    @07,24                                              0625
         LR    @15,HDRELPTR                                        0625
         ALR   @15,@07                                             0625
         ST    @15,HEBELCHN(,HDRELPTR)                             0625
*         HDRELPTR=HDRELPTR+LENGTH(HEBHDREL);/* PT TO NEXT   @ZA04230*/
         ALR   HDRELPTR,@07                                        0626
*       END;                                                       0627
         AL    ELEMNUM,@CF00053                                    0627
@DE00624 L     @07,HEBPTR                                          0627
         LH    @07,HEBCNT(,@07)                                    0627
         CLR   ELEMNUM,@07                                         0627
         BNH   @DL00624                                            0627
*       HDRELPTR=HDRELPTR-LENGTH(HEBHDREL);/* POINT TO LAST  @ZA04230*/
         SL    HDRELPTR,@CF00118                                   0628
*       HEBELCHN=ZERO;              /* ZERO CHAIN PTR IN LAST ONE    */
         SLR   @15,@15                                             0629
         ST    @15,HEBELCHN(,HDRELPTR)                             0629
*     END;                                                         0630
*   RESPECIFY                                                      0631
*     RET RESTRICTED;                                              0631
@RC00619 DS    0H                                                  0632
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @05,RETCONT                                         0632
         LR    @15,@05                                             0632
         SLA   @15,2                                               0632
         L     RET,RETSAVE-4(@15)                                  0632
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               0633
         ST    @05,RETCONT                                         0633
*   RESPECIFY                                                      0634
*     RET UNRESTRICTED;                                            0634
*   END BLDPSBLK;                                                  0635
@EL00007 DS    0H                                                  0635
@EF00007 DS    0H                                                  0635
@ER00007 BR    @14                                                 0635
*BLDHEBS:                                                          0636
*                                                                  0636
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - REBUILDS THE CMB HEB CHAIN FOR THE CURRENT HEB SAVE */
*/*              HEADER AND CHAINS IT TO THE PROPER CMB ENTRY        */
*/*   INPUT    - THE CURRENT SAVE HEADER IN HEBSAPTR                 */
*/*   OUTPUT   - THE HEB ELEMENTS FOR THE CMB ENTRY ARE RESTORED AND */
*/*              CHAINED TO THE PROPER CMB ENTRY                     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0636
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0636
BLDHEBS  DS    0H                                                  0637
*   RESPECIFY                                                      0637
*     RET RESTRICTED;                                              0637
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0638
         L     @07,RETCONT                                         0638
         ALR   @07,@15                                             0638
         ST    @07,RETCONT                                         0638
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @07,2                                               0639
         ST    RET,RETSAVE-4(@07)                                  0639
*   RESPECIFY                                                      0640
*     RET UNRESTRICTED;                                            0640
*   DO LC2=ONE TO VCRHNENT BY ONE;  /* PROCESS ALL HEADER ELEMENTS   */
*                                                                  0641
         ST    @15,LC2                                             0641
         B     @DE00641                                            0641
@DL00641 DS    0H                                                  0642
*     /***************************************************************/
*     /*                                                             */
*     /* OBTAIN A NEW HEB IF THERE ARE NO FREE HEADER ELEMENTS       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0642
*     IF ELEMNUM>HEBNEL THEN        /* IS A HEADER ELEMENT AVAILABLE */
         CL    ELEMNUM,@CF00050                                    0642
         BNH   @RF00642                                            0642
*       DO;                         /* NO, OBTAIN AND INITIALIZE ONE */
*         OPWVMLNG=LENGTH(IDAHEB);  /* SET REQUEST LENGTH            */
         MVC   OPWVMLNG(3,RCORE),@CF05426+1                        0644
*         OPWVMTYP=PRSPHBLK;        /* PROTECTED SPHERE BLOCK REQ    */
         MVI   OPWVMTYP(RCORE),X'81'                               0645
*         OPWVMFLG=ZERO;            /* CLEAR THE FLAG BYTE           */
         MVI   OPWVMFLG(RCORE),X'00'                               0646
*         OPWVMNSL=ON;              /* NO CSL WANTED                 */
         OI    OPWVMNSL(RCORE),B'00001000'                         0647
*         CALL IDA0192M;            /* CALL STORAGE MANAGER          */
         L     @15,@CV05282                                        0648
         BALR  @14,@15                                             0648
*         RSTATRTN=IDARA05B;        /* NOTE A05B BACK IN CONTROL     */
         LA    @05,MWAFCORE                                        0649
         MVC   RSTATRTN(4,@05),@CC05018                            0649
*         IF OPWVMADR=ZERO THEN     /* SEE IF STORAGE WAS OBTAINED   */
         L     @05,OPWVMADR(,RCORE)                                0650
         LTR   @05,@05                                             0650
         BNZ   @RF00650                                            0650
*           DO;                     /* IF NOT,                       */
*             RSRETCD2=RSERR195;    /* INDICATE NO CORE AVAILABLE    */
         L     @05,RSTWAPTR                                        0652
         MVI   RSRETCD2(@05),X'C3'                                 0652
*             CALL ERREXIT;         /* AND RETURN TO VS RESTART      */
         BAL   @14,ERREXIT                                         0653
*           END;                                                   0654
*         HEBPTR=OPWVMADR;          /* UPDATE CURRENT HEB PTR        */
@RF00650 L     @07,OPWVMADR(,RCORE)                                0655
         ST    @07,HEBPTR                                          0655
*         HEBID=IDXHEB;             /* INITIALIZE HEB HEADER ID      */
         MVI   HEBID(@07),B'00010011'                              0656
*         HEBLEN=LENGTH(IDAHEB);    /* SET LENGTH IN HEADER          */
         MVC   HEBLEN(2,@07),@CH05426                              0657
*         HEBNHEB=BIBHEBPT;         /* POINT TO FIRST HEB ON CHAIN   */
         L     @05,OPWBIB(,RCORE)                                  0658
         L     @15,BIBHEBPT(,@05)                                  0658
         ST    @15,HEBNHEB(,@07)                                   0658
*         BIBHEBPT=OPWVMADR;        /* CHAIN THIS HEB OFF THE BIB    */
         ST    @07,BIBHEBPT(,@05)                                  0659
*         HEBCNT=HEBNEL;            /* SET NUMBER OF ELEMENTS IN HEB */
         MVC   HEBCNT(2,@07),@CH00050                              0660
*         ELEMNUM=ONE;              /* RESET ELEMENT NUMBER TO FIRST */
         LA    ELEMNUM,1                                           0661
*       END;                                                       0662
*                                                                  0663
*     /***************************************************************/
*     /*                                                             */
*     /* RESTORE THE HEADER ELEMENTS SAVED DURING CHECKPOINT         */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0663
*     HDRELPTR=ADDR(HEBHDELS(ELEMNUM));/* PT TO HEADER ELEM  @ZA04230*/
@RF00642 LA    @07,24                                              0663
         LR    @01,ELEMNUM                                         0663
         MR    @00,@07                                             0663
         L     HDRELPTR,HEBPTR                                     0663
         AL    HDRELPTR,@CF05442                                   0663
         LA    HDRELPTR,HEBHDELS-12(@01,HDRELPTR)                  0663
*     HEBHDREL=VCRHENT(LC2);        /* RESTORE SAVED HEADER ELEMENT  */
         LR    @01,@07                                             0664
         M     @00,LC2                                             0664
         L     @07,HEBSAPTR                                        0664
         ALR   @07,@01                                             0664
         AL    @07,@CF05443                                        0664
         MVC   HEBHDREL(24,HDRELPTR),VCRHENT-8(@07)                0664
*     IF LC1=ZERO THEN              /* IF SPHERE BLOCK BUILD         */
         L     @07,LC1                                             0665
         LTR   @07,@07                                             0665
         BNZ   @RF00665                                            0665
*       DO;                         /* CHAIN HEADER ELEMENT OFF BIB  */
*         HEBELCHN=BIBSPHPT;        /* CHAIN TO PREVIOUS HEADER ELEM */
         L     @07,OPWBIB(,RCORE)                                  0667
         L     @15,BIBSPHPT(,@07)                                  0667
         ST    @15,HEBELCHN(,HDRELPTR)                             0667
*         BIBSPHPT=ADDR(HEBHDREL);  /* POINT TO NEW HEADER ELEMENT   */
         ST    HDRELPTR,BIBSPHPT(,@07)                             0668
*       END;                        /* END SPHERE BLOCK PROCESSING   */
*     ELSE                          /* ELSE,                         */
*       DO;                         /* CMB HEADER ELEMENT PROCESSING */
         B     @RC00665                                            0670
@RF00665 DS    0H                                                  0671
*         HEBELCHN=HEBPTRS(VCRHCID);/* GET PTR TO PREVIOUS HDR ELEM  */
         L     @07,HEBSAPTR                                        0671
         SLR   @15,@15                                             0671
         IC    @15,VCRHCID(,@07)                                   0671
         SLA   @15,2                                               0671
         L     @07,AMBLPTR                                         0671
         L     @07,AMBLCMB(,@07)                                   0671
         L     @14,HEBPTRS-4(@15,@07)                              0671
         ST    @14,HEBELCHN(,HDRELPTR)                             0671
*         HEBPTRS(VCRHCID)=ADDR(HEBHDREL);/* REPLACE IN CMB POINTERS */
         ST    HDRELPTR,HEBPTRS-4(@15,@07)                         0672
*       END;                                                       0673
*     ELEMNUM=ELEMNUM+ONE;          /* UPDATE HEADER ELEMENT NUMBER  */
@RC00665 LA    ELEMNUM,1(,ELEMNUM)                                 0674
*   END;                                                           0675
         LA    @15,1                                               0675
         AL    @15,LC2                                             0675
         ST    @15,LC2                                             0675
@DE00641 L     @07,HEBSAPTR                                        0675
         CH    @15,VCRHNENT(,@07)                                  0675
         BNH   @DL00641                                            0675
*   RESPECIFY                                                      0676
*     RET RESTRICTED;                                              0676
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @07,RETCONT                                         0677
         LR    @05,@07                                             0677
         SLA   @05,2                                               0677
         L     RET,RETSAVE-4(@05)                                  0677
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @07,0                                               0678
         ST    @07,RETCONT                                         0678
*   RESPECIFY                                                      0679
*     RET UNRESTRICTED;                                            0679
*   END BLDHEBS;                                                   0680
@EL00008 DS    0H                                                  0680
@EF00008 DS    0H                                                  0680
@ER00008 BR    @14                                                 0680
*BLDUPGRD:                                                         0681
*                                                                  0681
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - VALIDITY CHECK THE IMMEDIATE UPGRADE SET AND        */
*/*              REBUILD THE ARDBS, DEBS, EDBS, AND GLOBAL BLOCKS    */
*/*              FOR THE IMMEDIATE UPGRADE AMBLS. THIS ROUTINE IS    */
*/*              ENTERED ONCE FOR EACH VCRT.                         */
*/*   INPUT    - A POINTER TO THE CURRENT VCRT IN VCRTPTR            */
*/*   OUTPUT   - A COMPLETE IMMEDIATE UPGRADE STRUCTURE              */
*/*                                                                  */
*/********************************************************************/
*                                                                  0681
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0681
BLDUPGRD DS    0H                                                  0682
*   RESPECIFY                                                      0682
*     RET RESTRICTED;                                              0682
*   OPWBASE=OFF;                    /* TURN OFF OPEN BASE INDICATOR  */
         L     @15,OPWCURPT(,RCORE)                                0683
         NI    OPWBASE(@15),B'01111111'                            0683
*   IF VCRUPGCT=ZERO THEN           /* SEE IF UPGRADE SET AT CHECKPT */
         L     @15,VCRTPTR                                         0684
         LH    @05,VCRUPGCT(,@15)                                  0684
         LTR   @05,@05                                             0684
         BNZ   @RF00684                                            0684
*     IF OPWNOUPG=ZERO THEN         /* NO, SEE IF THERE IS ONE NOW   */
         CLI   OPWNOUPG(RCORE),0                                   0685
         BE    @RT00685                                            0685
*       RETURN;                     /* NO, RETURN TO MAINLINE        */
*     ELSE                          /* THERE IS AN UPGRADE SET       */
*       IF VCRAMBL(ONE)->AMBLWRIT=ON THEN/* IF OPEN FOR OUTPUT       */
         L     @15,VCROPN(,@15)                                    0687
         L     @15,VCRAMBL(,@15)                                   0687
         TM    AMBLWRIT(@15),B'00100000'                           0687
         BNO   @RF00687                                            0687
*         DO;                                                      0688
*           RSRETCD2=RSERR194;      /* SET ERROR CODE AND            */
         L     @15,RSTWAPTR                                        0689
         MVI   RSRETCD2(@15),X'C2'                                 0689
*           CALL ERREXIT;           /* EXIT THE MODULE               */
         BAL   @14,ERREXIT                                         0690
*         END;                                                     0691
*       ELSE                        /* OTHERWISE,                    */
*         RETURN;                   /* RETURN TO MAINLINE            */
*   IF VCRUPGCT^=OPWNOUPG THEN      /* NUMBER OF UGRADE CHANGED      */
@RF00684 L     @15,VCRTPTR                                         0693
         LH    @15,VCRUPGCT(,@15)                                  0693
         SLR   @05,@05                                             0693
         IC    @05,OPWNOUPG(,RCORE)                                0693
         CR    @15,@05                                             0693
         BE    @RF00693                                            0693
*     DO;                           /* YES                           */
*       RSRETCD2=RSERR194;          /* SET ERROR CODE AND            */
         L     @15,RSTWAPTR                                        0695
         MVI   RSRETCD2(@15),X'C2'                                 0695
*       CALL ERREXIT;               /* EXIT THE MODULE               */
         BAL   @14,ERREXIT                                         0696
*     END;                                                         0697
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
@RF00693 LA    @15,1                                               0698
         L     @05,RETCONT                                         0698
         ALR   @05,@15                                             0698
         ST    @05,RETCONT                                         0698
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @05,2                                               0699
         ST    RET,RETSAVE-4(@05)                                  0699
*   RESPECIFY                                                      0700
*     RET UNRESTRICTED;                                            0700
*   VCRUPGSW=ON;                    /* SET UPGRADE IN PROCESS SWITCH */
         L     @05,VCRTPTR                                         0701
         OI    VCRUPGSW(@05),B'10000000'                           0701
*   OPWCSTRN=ONE;                   /* ONE STRING FOR UPGRADE        */
         MVI   OPWCSTRN(RCORE),X'01'                               0702
*   DO LC3=ONE TO VCRUPGCT BY ONE;  /* PROCESS VCRT UPGRADE ENTRIES  */
         ST    @15,LC3                                             0703
         B     @DE00703                                            0703
@DL00703 DS    0H                                                  0704
*     AMBLPTR=VCRUAMBL(LC3);        /* POINT TO CURRENT AMBL         */
         LR    @05,@15                                             0704
         SLA   @05,3                                               0704
         L     @01,VCRTPTR                                         0704
         L     @01,VCRUPG(,@01)                                    0704
         AL    @01,@CF05432                                        0704
         L     @14,VCRUAMBL-4(@05,@01)                             0704
         ST    @14,AMBLPTR                                         0704
*     RACB=AMBLACB;                 /* ADDRESSIBILITY FOR ACB        */
         L     @11,AMBLACB(,@14)                                   0705
         LR    RACB,@11                                            0705
*     OPWUACB=AMBLACB;              /* POINT TO ACB TO POST ACBERFLG */
         ST    @11,OPWUACB(,RCORE)                                 0706
*     AMBLCACB=OPWCACB;             /* UPDATE THE CATALOG ACB PTR    */
         L     @11,OPWCACB(,RCORE)                                 0707
         ST    @11,AMBLCACB(,@14)                                  0707
*     OPWXAMBL=AMBLPTR;             /* SET CURRENT AMBL PTR IN OPW   */
         ST    @14,OPWXAMBL(,RCORE)                                0708
*     OPWCURPT=ADDR(OPWUPAIX(LC3)); /* SET CURRENT CLUSTER           */
         LA    @05,OPWUPAIX-8(@05,RCORE)                           0709
         ST    @05,OPWCURPT(,RCORE)                                0709
*     IF UPTF1NOP(LC3)=OFF THEN     /* SEE IF UPT ENTRY WAS OPENED   */
         MH    @15,@CH00033                                        0710
         L     @05,OPWUPT(,RCORE)                                  0710
         ALR   @05,@15                                             0710
         TM    UPTF1NOP-12(@05),B'00010000'                        0710
         BNZ   @RF00710                                            0710
*       DO;                         /* YES, THEN PROCESS             */
*         DO LC4=ONE TO AMBLNUM BY ONE;/* UPDATE THE AMBS            */
         LA    @05,1                                               0712
         ST    @05,LC4                                             0712
         B     @DE00712                                            0712
@DL00712 DS    0H                                                  0713
*           AMBPTR=AMBPTRS(LC4);    /* POINT TO THE CURRENT AMB      */
         LR    @15,@05                                             0713
         SLA   @15,2                                               0713
         L     @01,AMBLPTR                                         0713
         L     @15,AMBPTRS-4(@15,@01)                              0713
         ST    @15,AMBPTR                                          0713
*           MWASTAT(LC4)=AMDSTAT;   /* SAVE THE AMDSB STAT FIELDS    */
         LR    @14,@05                                             0714
         MH    @14,@CH02711                                        0714
         LA    @01,MWASTAT-48(@14)                                 0714
         L     @14,AMBDSB(,@15)                                    0714
         MVC   0(48,@01),AMDSTAT(@14)                              0714
*           AMBCACB=OPWCACB;        /* UPDATE THE CATALOG ACB PTR    */
         L     @14,OPWCACB(,RCORE)                                 0715
         ST    @14,AMBCACB(,@15)                                   0715
*           AMBCDSN=OPWCACB;        /* THE SAME FOR CATALOG DSN      */
         STCM  @14,7,AMBCDSN(@15)                                  0716
*           IF LC4=ONE THEN         /* IF FIRST PASS THEN    @ZA04523*/
         C     @05,@CF00053                                        0717
         BNE   @RF00717                                            0717
*             IF AMBDDSN^=OPWCDTCI THEN/* COMPARE DATA CI NUMBER     */
         L     @05,OPWCURPT(,RCORE)                                0718
         CLC   AMBDDSN(3,@15),OPWCDTCI(@05)                        0718
         BE    @RF00718                                            0718
*               DO;                 /* IF NOT EQUAL                  */
*                 RSRETCD2=RSERR194;/* INDICATE UPGRADE ALTERED AND  */
         L     @05,RSTWAPTR                                        0720
         MVI   RSRETCD2(@05),X'C2'                                 0720
*                 CALL ERREXIT;     /* EXIT THE MODULE               */
         BAL   @14,ERREXIT                                         0721
*               END;                                               0722
*             ELSE                                                 0723
*               ;                   /* CI NUMBER IS THE SAME         */
@RF00718 DS    0H                                                  0724
*           ELSE                    /* IF NOT FIRST PASS THEN        */
*             IF AMBDDSN^=OPWCIXCI THEN/* COMPARE INDEX CI NUMBER    */
         B     @RC00717                                            0724
@RF00717 L     @05,OPWCURPT(,RCORE)                                0724
         L     @01,AMBPTR                                          0724
         CLC   AMBDDSN(3,@01),OPWCIXCI(@05)                        0724
         BE    @RF00724                                            0724
*               DO;                 /* IF NOT EQUAL                  */
*                 RSRETCD2=RSERR194;/* INDICATE UPGRADE ALTERED AND  */
         L     @05,RSTWAPTR                                        0726
         MVI   RSRETCD2(@05),X'C2'                                 0726
*                 CALL ERREXIT;     /* EXIT THE MODULE               */
         BAL   @14,ERREXIT                                         0727
*               END;                                               0728
*           MWARNCIN(LC4)=AMBDDSN;  /* CI NUMBER IN RNAME    @ZA04523*/
@RF00724 DS    0H                                                  0729
@RC00717 L     @05,LC4                                             0729
         LR    @15,@05                                             0729
         SLA   @15,3                                               0729
         LA    @14,MWARNCIN-8(@15)                                 0729
         L     @15,AMBPTR                                          0729
         MVC   0(3,@14),AMBDDSN(@15)                               0729
*         END;                                                     0730
         AL    @05,@CF00053                                        0730
         ST    @05,LC4                                             0730
@DE00712 L     @01,AMBLPTR                                         0730
         CH    @05,AMBLNUM(,@01)                                   0730
         BNH   @DL00712                                            0730
*         RESPECIFY                                                0731
*           R1 RESTRICTED;          /*                       @ZA04523*/
*         R1=ADDR(MWENQPRM);        /* PT TO ENQ PARM LIST   @ZA04523*/
         LA    R1,MWENQPRM                                         0732
*         GEN(ENQ  (,,,,),MF=(E,(1)));/* ENQUEUE ON CLUSTER  @ZA04523*/
         ENQ  (,,,,),MF=(E,(1))
*         RESPECIFY                                                0734
*           R1 UNRESTRICTED;        /*                       @ZA04523*/
*         OPWUPGR=ON;               /* INDICATE OPEN UPGRADE AIX     */
         L     @05,OPWCURPT(,RCORE)                                0735
         OI    OPWUPGR(@05),B'00100000'                            0735
*         OPWDCI=OPWCDTCI;          /* GET DATA COMPONENT CI NUMBER  */
         MVC   OPWDCI(3,RCORE),OPWCDTCI(@05)                       0736
*         OPWQ=AMBLQ;               /* GET THE QUALIFIER             */
         L     @05,AMBLPTR                                         0737
         MVC   OPWQ(1,RCORE),AMBLQ(@05)                            0737
*         AMBLIDF=OPWIDF;           /* SET CLUSTER ID IN THE AMBL    */
         MVC   AMBLIDF(8,@05),OPWIDF(RCORE)                        0738
*         CALL IDA0192B;            /* REBUILD UPGRADE CLUSTER BLKS  */
         L     @15,@CV05279                                        0739
         BALR  @14,@15                                             0739
*         RESPECIFY                                                0740
*           RETCODE RESTRICTED;                                    0740
*         RSTATRTN=IDARA05B;        /* NOTE IDA0A05B IN CONTROL      */
         LA    @14,MWAFCORE                                        0741
         MVC   RSTATRTN(4,@14),@CC05018                            0741
*         IF RETCODE^=ZERO&ACBERFLG>OPERR116 THEN/* IF ERROR IN OPEN */
         LTR   RETCODE,RETCODE                                     0742
         BZ    @RF00742                                            0742
         CLI   ACBERFLG(RACB),116                                  0742
         BNH   @RF00742                                            0742
*           DO;                     /* SET ERROR CODE                */
*             IF ACBERFLG>OPERR192 THEN/* IF GREATER THAN 192        */
         CLI   ACBERFLG(RACB),192                                  0744
         BNH   @RF00744                                            0744
*               RSRETCD2=ERRBASE+   /* ADD TO ERROR BASE FOR VSAM    */
*                   (ACBERFLG-OPERR192)/FOUR;/* THE TRANSLATED VALUE */
         SLR   @00,@00                                             0745
         IC    @00,ACBERFLG(,RACB)                                 0745
         SL    @00,@CF02163                                        0745
         SRDA  @00,32                                              0745
         D     @00,@CF00095                                        0745
         AL    @01,@CF02132                                        0745
         L     @14,RSTWAPTR                                        0745
         STC   @01,RSRETCD2(,@14)                                  0745
*             ELSE                  /* IF ERROR IN RANGE             */
*               RSRETCD2=ACBERFLG;  /* SET RESTART RETURN CODE       */
         B     @RC00744                                            0746
@RF00744 L     @14,RSTWAPTR                                        0746
         MVC   RSRETCD2(1,@14),ACBERFLG(RACB)                      0746
*             CALL ERREXIT;         /* ISSUE MESSAGE AND EXIT        */
@RC00744 BAL   @14,ERREXIT                                         0747
*           END;                                                   0748
*         RESPECIFY                                                0749
*           RETCODE UNRESTRICTED;                                  0749
@RF00742 DS    0H                                                  0750
*         CALL MODTEST;             /* TEST FOR MODIFICATION         */
         BAL   @14,MODTEST                                         0750
*         CALL VERIFY;              /* ISSUE A VERIFY FOR UPGRADE    */
         BAL   @14,VERIFY                                          0751
*         RESPECIFY                                                0752
*           R1 RESTRICTED;          /*                       @ZA04523*/
*         R1=ADDR(MWENQPRM);        /* PT TO ENQ PARM LIST   @ZA04523*/
         LA    R1,MWENQPRM                                         0753
*         GEN(DEQ  (,,,,),MF=(E,(1)));/* DEQUEUE CLUSTER     @ZA04523*/
         DEQ  (,,,,),MF=(E,(1))
*         RESPECIFY                                                0755
*           R1 UNRESTRICTED;        /*                       @ZA04523*/
*       END;                                                       0756
*   END;                                                           0757
@RF00710 LA    @15,1                                               0757
         AL    @15,LC3                                             0757
         ST    @15,LC3                                             0757
@DE00703 L     @05,VCRTPTR                                         0757
         CH    @15,VCRUPGCT(,@05)                                  0757
         BNH   @DL00703                                            0757
*   VCRUPGSW=OFF;                   /* RESET UPGRADE SWITCH          */
         L     @05,VCRTPTR                                         0758
         NI    VCRUPGSW(@05),B'01111111'                           0758
*   RESPECIFY                                                      0759
*     RET RESTRICTED;                                              0759
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @05,RETCONT                                         0760
         LR    @15,@05                                             0760
         SLA   @15,2                                               0760
         L     RET,RETSAVE-4(@15)                                  0760
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               0761
         ST    @05,RETCONT                                         0761
*   RESPECIFY                                                      0762
*     RET UNRESTRICTED;                                            0762
*   END BLDUPGRD;                                                  0763
@EL00009 DS    0H                                                  0763
@EF00009 DS    0H                                                  0763
@ER00009 BR    @14                                                 0763
*BLDOPEN:                                                          0764
*                                                                  0764
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - UPDATE THE CONTROL BLOCK STRUCTURE FOR VCRT OPEN    */
*/*              ENTRIES IF THEY ARE NOT IN THE IMMEDIATE UPGRADE    */
*/*              SET.  PERFORM REPOSITIONING FOR KSDS CREATE MODE    */
*/*              OR ESDS OUTPUT WITH REPOSITIONING SPECIFIED.        */
*/*   INPUT    - A POINTER TO THE CURRENT VCRT IN VCRTPTR            */
*/*   OUTPUT   - A COMPLETED CONTROL BLOCK STRUCTURE FOR THE VCRT    */
*/*              OPEN ENTRIES.                                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0764
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0764
BLDOPEN  DS    0H                                                  0765
*   RESPECIFY                                                      0765
*     RET RESTRICTED;                                              0765
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0766
         L     @05,RETCONT                                         0766
         ALR   @05,@15                                             0766
         ST    @05,RETCONT                                         0766
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @05,2                                               0767
         ST    RET,RETSAVE-4(@05)                                  0767
*   RESPECIFY                                                      0768
*     RET UNRESTRICTED;                                            0768
*   DO LC5=ONE TO VCROPNCT BY ONE;  /* PROCESS ALL OPEN ENTRIES      */
         ST    @15,LC5                                             0769
         B     @DE00769                                            0769
@DL00769 DS    0H                                                  0770
*     AMBLPTR=VCRAMBL(LC5);         /* POINT TO OPEN ENTRY AMBL      */
         SLA   @15,3                                               0770
         L     @05,VCRTPTR                                         0770
         L     @05,VCROPN(,@05)                                    0770
         AL    @05,@CF05432                                        0770
         L     @05,VCRAMBL-4(@15,@05)                              0770
         ST    @05,AMBLPTR                                         0770
*     RACB=AMBLACB;                 /* ADDRESSIBILITY FOR ACB        */
         L     @15,AMBLACB(,@05)                                   0771
         LR    RACB,@15                                            0771
*     OPWUACB=AMBLACB;              /* POINT TO ACB TO POST ACBERFLG */
         ST    @15,OPWUACB(,RCORE)                                 0772
*     OPWCSTRN=CMBNST;              /* NUMBER OF STRINGS FOR CLUSTER */
*                                                                  0773
         L     @01,AMBLCMB(,@05)                                   0773
         IC    @00,CMBNST(,@01)                                    0773
         STC   @00,OPWCSTRN(,RCORE)                                0773
*     /***************************************************************/
*     /*                                                             */
*     /* IF THE AMBL IS NOT A BASE AMBL, AND THEREFORE A PATH AMBL,  */
*     /* SET UP THE OPEN CONTROL BLOCKS FOR OPENING AN AIX PATH      */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0774
*     IF AMBLBASE=OFF THEN          /* IF IS THIS A PATH ENTRY       */
         TM    AMBLBASE(@05),B'00010000'                           0774
         BNZ   @RF00774                                            0774
*       DO;                         /* GET PATH CI INFORMATION       */
*         OPWTIOT=TCBTIO+ACBTIOT;   /* POINT TO TIOT ENTRY           */
         LH    @15,ACBTIOT(,RACB)                                  0776
         L     @14,PSATOLD                                         0776
         AL    @15,TCBTIO(,@14)                                    0776
         ST    @15,OPWTIOT(,RCORE)                                 0776
*         JFCBPTR=TIOEJFCB;         /* GET ADDRESS OF JFCB           */
         SLR   JFCBPTR,JFCBPTR                                     0777
         ICM   JFCBPTR,7,TIOEJFCB(@15)                             0777
*         DXJBF=JFCB;               /* GET JFCB FROM LSQA            */
         LA    @15,MWAFCORE                                        0778
         MVC   DXJBF(176,@15),JFCB(JFCBPTR)                        0778
*         MWAPRMID=OP1;             /* REQUEST ASSOCIATIONS          */
         MVI   MWAPRMID,X'04'                                      0779
*         RESPECIFY                                                0780
*          (R1,                                                    0780
*           RETCODE) RESTRICTED;                                   0780
*         R1=ADDR(MWAPRM2C);        /* GET ADDRESS OF PARAMETER LIST */
         LA    R1,MWAPRM2C                                         0781
*         RSTATRTN=IDAR192C;        /* NOTE CONTROL PASSING TO 192C  */
         LA    @14,MWAFCORE                                        0782
         MVC   RSTATRTN(4,@14),@CC04986                            0782
*         CALL IDA0192C;            /* GET ASSOCIATIONS              */
         L     @15,@CV05280                                        0783
         BALR  @14,@15                                             0783
*         RESPECIFY                                                0784
*           R1 UNRESTRICTED;                                       0784
*         RSTATRTN=IDARA05B;        /* NOTE RETURN TO A05B           */
         LA    @14,MWAFCORE                                        0785
         MVC   RSTATRTN(4,@14),@CC05018                            0785
*         MWARETCD=RETCODE;         /* SAVE RETURN CODE FOR ANALYSIS */
         ST    RETCODE,MWARETCD                                    0786
*         IF RETCODE^=ZERO THEN     /* IF BAD RETURN CODE            */
         LTR   RETCODE,RETCODE                                     0787
         BZ    @RF00787                                            0787
*           DO;                                                    0788
*             RSRETCD2=RSERR190;    /* UNABLE TO OBTAIN CLUSTER INFO */
         L     @14,RSTWAPTR                                        0789
         MVI   RSRETCD2(@14),X'BE'                                 0789
*             CALL ERREXIT;         /* ISSUE MESSAGE AND EXIT        */
         BAL   @14,ERREXIT                                         0790
*           END;                                                   0791
*         RESPECIFY                                                0792
*           RETCODE UNRESTRICTED;                                  0792
@RF00787 DS    0H                                                  0793
*         OPWDCI=OPWCDTCI;          /* GET DATA COMPONENT CI NUMBER  */
         L     @05,OPWCURPT(,RCORE)                                0793
         MVC   OPWDCI(3,RCORE),OPWCDTCI(@05)                       0793
*         OPWQ=AMBLQ;               /* GET THE QUALIFIER             */
         L     @05,AMBLPTR                                         0794
         MVC   OPWQ(1,RCORE),AMBLQ(@05)                            0794
*         OPWCURPT=ADDR(OPWPTAIX);  /* POINT TO PATH CLUSTER         */
         LA    @15,OPWPTAIX(,RCORE)                                0795
         ST    @15,OPWCURPT(,RCORE)                                0795
*         OPWPATH=ON;               /* INDICATE OPENING PATH         */
         OI    OPWPATH(@15),B'01000000'                            0796
*         IF AMBLDTA->AMBPUG=ON THEN/* IF PATH IN UPGRADE            */
         L     @01,AMBLDTA(,@05)                                   0797
         TM    AMBPUG(@01),B'10000000'                             0797
         BNO   @RF00797                                            0797
*           DO;                     /* SET UP FOR PARTIAL BUILD      */
*             OPWPRTBL=ON;          /* INDICATE PARTIAL BUILD        */
         OI    OPWPRTBL(@15),B'00001000'                           0799
*             OPWCAMBL=AMBLPTR;     /* SET AMBL CONNECTING TO        */
         ST    @05,OPWCAMBL(,RCORE)                                0800
*           END;                                                   0801
*         ELSE                      /* NOT PART OF UPGRADE SO        */
*           OPWCAMBL=ZERO;          /* CLEAR AMBL CONNECTING TO      */
         B     @RC00797                                            0802
@RF00797 SLR   @05,@05                                             0802
         ST    @05,OPWCAMBL(,RCORE)                                0802
*       END;                                                       0803
*                                                                  0803
*     /***************************************************************/
*     /*                                                             */
*     /* IF THE AMBL IS THE BASE AMBL, IT IS THE FIRST ENTRY OF THE  */
*     /* OPEN ENTRIES. A CALL TO BLDUPGRD WILL BE MADE ON THIS PASS. */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0804
*     ELSE                          /* AMBL IS FOR THE BASE CLUSTER  */
*       DO;                                                        0804
         B     @RC00774                                            0804
@RF00774 DS    0H                                                  0805
*         OPWCURPT=ADDR(OPWBSECL);  /* POINT TO BASE CLUSTER         */
         LA    @05,OPWBSECL(,RCORE)                                0805
         ST    @05,OPWCURPT(,RCORE)                                0805
*         OPWBASE=ON;               /* INDICATE OPENING BASE         */
         OI    OPWBASE(@05),B'10000000'                            0806
*         OPWBAMBL=AMBLPTR;         /* POINT TO THE BASE AMBL        */
         L     @15,AMBLPTR                                         0807
         ST    @15,OPWBAMBL(,RCORE)                                0807
*         OPWDCI=OPWCDTCI;          /* GET DATA COMPONENT CI NUMBER  */
         MVC   OPWDCI(3,RCORE),OPWCDTCI(@05)                       0808
*         OPWQ=AMBLQ;               /* GET THE QUALIFIER             */
         MVC   OPWQ(1,RCORE),AMBLQ(@15)                            0809
*         OPWCAMBL=ZERO;            /* MAKE SURE WE DON'T CONNECT    */
         SLR   @05,@05                                             0810
         ST    @05,OPWCAMBL(,RCORE)                                0810
*         IF BIBDACB^=ZERO THEN     /* IF A DUMMY ACB EXISTS THEN    */
         L     @01,OPWBIB(,RCORE)                                  0811
         L     @15,BIBDACB(,@01)                                   0811
         CR    @15,@05                                             0811
         BE    @RF00811                                            0811
*           BIBDACB->ACBAMBL->AMBLIDF=OPWIDF;/* SET THE AMBL ID FIELD*/
         L     @05,ACBAMBL(,@15)                                   0812
         MVC   AMBLIDF(8,@05),OPWIDF(RCORE)                        0812
*         IF AMBLNUM=ONE THEN       /* IF NO INDEX           @ZA04523*/
@RF00811 L     @05,AMBLPTR                                         0813
         CLC   AMBLNUM(2,@05),@CH00053                             0813
         BNE   @RF00813                                            0813
*           ENQEND(1)=ON;           /* ENQ ON DATA ONLY      @ZA04523*/
         OI    ENQEND,B'10000000'                                  0814
*         MWARNACB(1)=OPWCACB;      /* SET CACB IN 1ST RNAME @ZA04523*/
@RF00813 L     @05,OPWCACB(,RCORE)                                 0815
         STCM  @05,15,MWARNACB                                     0815
*         MWARNACB(2)=OPWCACB;      /* SET CACB IN 2ND RNAME @ZA04523*/
         STCM  @05,15,MWARNACB+8                                   0816
*       END;                                                       0817
*     OPWXAMBL=AMBLPTR;             /* UPDATE CURRENT AMBL POINTER   */
@RC00774 L     @05,AMBLPTR                                         0818
         ST    @05,OPWXAMBL(,RCORE)                                0818
*     AMBLPTR=AMBLDTA->AMBPAMBL;    /* POINT TO PRIMARY CLUSTER AMBL */
         L     @05,AMBLDTA(,@05)                                   0819
         L     @05,AMBPAMBL(,@05)                                  0819
         ST    @05,AMBLPTR                                         0819
*     AMBLIDF=OPWIDF;               /* SET CLUSTER ID IN THE AMBL    */
         MVC   AMBLIDF(8,@05),OPWIDF(RCORE)                        0820
*     DO WHILE AMBLSCHN^=ZERO;      /* PROCESS ALL SECONDARY AMBLS   */
         B     @DE00821                                            0821
@DL00821 DS    0H                                                  0822
*       AMBLSCHN->AMBLIDF=OPWIDF;   /* UPDATE THE CLUSTER ID         */
         L     @05,AMBLPTR                                         0822
         L     @05,AMBLSCHN(,@05)                                  0822
         MVC   AMBLIDF(8,@05),OPWIDF(RCORE)                        0822
*       AMBLPTR=AMBLSCHN;           /* POINT TO THE NEXT SECONDARY   */
         ST    @05,AMBLPTR                                         0823
*     END;                                                         0824
@DE00821 L     @05,AMBLPTR                                         0824
         L     @05,AMBLSCHN(,@05)                                  0824
         LTR   @05,@05                                             0824
         BNZ   @DL00821                                            0824
*                                                                  0825
*     /***************************************************************/
*     /*                                                             */
*     /* FOR EACH DATA ARDB SAVE THE HIGH USED RBA AND THE VOLUME    */
*     /* SERIAL IN ARDBTBL; SAVE THE VOLUME SERIAL AND HIGH USED RBA */
*     /* FOR THE HIGH LEVEL INDEX IN ELEMENT 256. THIS INFORMATION   */
*     /* WILL BE USED BY THE REPOSITN ROUTINE.                       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0825
*     AMBLPTR=VCRAMBL(LC5);         /* POINT TO OPEN ENTRY AMBL      */
         L     @05,LC5                                             0825
         SLA   @05,3                                               0825
         L     @01,VCRTPTR                                         0825
         L     @01,VCROPN(,@01)                                    0825
         AL    @01,@CF05432                                        0825
         L     @05,VCRAMBL-4(@05,@01)                              0825
         ST    @05,AMBLPTR                                         0825
*     DO LC6=ONE TO AMBLNUM BY ONE; /* UPDATE THE AMBS               */
         LA    LC6,1                                               0826
         B     @DE00826                                            0826
@DL00826 DS    0H                                                  0827
*       AMBPTR=AMBPTRS(LC6);        /* ADDRESSIBILITY TO AMB         */
         LR    @15,LC6                                             0827
         SLA   @15,2                                               0827
         L     @01,AMBLPTR                                         0827
         L     @15,AMBPTRS-4(@15,@01)                              0827
         ST    @15,AMBPTR                                          0827
*       MWASTAT(LC6)=AMDSTAT;       /* SAVE THE AMDSB STAT FIELDS    */
         LR    @14,LC6                                             0828
         MH    @14,@CH02711                                        0828
         LA    @01,MWASTAT-48(@14)                                 0828
         L     @14,AMBDSB(,@15)                                    0828
         MVC   0(48,@01),AMDSTAT(@14)                              0828
*       AMBCACB=OPWCACB;            /* UPDATE POINTER TO CATALOG ACB */
         L     @11,OPWCACB(,RCORE)                                 0829
         ST    @11,AMBCACB(,@15)                                   0829
*       AMBCDSN=OPWCACB;            /* UPDATE POINTER TO CATALOG ACB */
         STCM  @11,7,AMBCDSN(@15)                                  0830
*       IF LC6=ONE THEN             /* IF DATA AMB                   */
         LA    @11,1                                               0831
         CR    LC6,@11                                             0831
         BNE   @RF00831                                            0831
*         DO;                                                      0832
*           AMBDDSN=OPWCDTCI;       /* UPDATE DATA CI NUMBER         */
         L     @01,OPWCURPT(,RCORE)                                0833
         MVC   AMBDDSN(3,@15),OPWCDTCI(@01)                        0833
*           ENTRYPTR=ADDR(ARDBTBL(1));/* INIT PT TO ARDBTBL ENTRY    */
         L     @01,TBLPTR                                          0834
         ST    @01,ENTRYPTR                                        0834
*           ARDBPTR=AMDPARDB;       /* INIT POINTER TO FIRST ARDB    */
         L     @10,AMDPARDB(,@14)                                  0835
         ST    @10,ARDBPTR                                         0835
*           IF LC5=ONE THEN         /* IF THE FIRST OPEN ENTRY       */
         C     @11,LC5                                             0836
         BNE   @RF00836                                            0836
*             DO UNTIL ARDBPTR=ZERO;/* SAVE INFO FROM ALL ARDBS      */
@DL00837 DS    0H                                                  0838
*               MWAHURBA=ARDHRBA;   /* SAVE HIGH USED RBA            */
         L     @15,ENTRYPTR                                        0838
         L     @14,ARDBPTR                                         0838
         L     @11,ARDHRBA(,@14)                                   0838
         ST    @11,MWAHURBA(,@15)                                  0838
*               MWAVOLSR=ARDVOLSR;  /* SAVE VOLUME SERIAL            */
         MVC   MWAVOLSR(6,@15),ARDVOLSR(@14)                       0839
*               ENTRYPTR=ENTRYPTR+LENGTH(TBLENTRY);/* PT TO NEXT   0840
*                                      ENTRY                         */
         AL    @15,@CF00033                                        0840
         ST    @15,ENTRYPTR                                        0840
*               ARDBPTR=ARDNPTR;    /* POINT TO NEXT ARDB            */
         L     @15,ARDNPTR(,@14)                                   0841
         ST    @15,ARDBPTR                                         0841
*             END;                                                 0842
@DE00837 L     @15,ARDBPTR                                         0842
         LTR   @15,@15                                             0842
         BNZ   @DL00837                                            0842
*         END;                                                     0843
*       ELSE                        /* AMB IS FOR INDEX              */
*         DO;                                                      0844
         B     @RC00831                                            0844
@RF00831 DS    0H                                                  0845
*           AMBDDSN=OPWCIXCI;       /* UPDATE INDEX CI NUMBER        */
         L     @15,AMBPTR                                          0845
         L     @01,OPWCURPT(,RCORE)                                0845
         MVC   AMBDDSN(3,@15),OPWCIXCI(@01)                        0845
*           ENTRYPTR=ADDR(ARDBTBL(256));/* INIT PTR TO IDX TBL ENTRY */
         L     @01,TBLPTR                                          0846
         LA    @14,ARDBTBL+3060(,@01)                              0846
         ST    @14,ENTRYPTR                                        0846
*           ARDBPTR=AMDPARDB;       /* POINT TO FIRST INDEX ARDB     */
         L     @01,AMBDSB(,@15)                                    0847
         L     @15,AMDPARDB(,@01)                                  0847
         ST    @15,ARDBPTR                                         0847
*           IF LC5=ONE THEN         /* IF THE FIRST OPEN ENTRY       */
         CLC   LC5(4),@CF00053                                     0848
         BNE   @RF00848                                            0848
*             DO UNTIL ARDBPTR=ZERO;/* SCAN ALL ARDBS FOR HI LEVEL   */
@DL00849 DS    0H                                                  0850
*               IF ARDHLI=ON THEN   /* IS ARDB FOR HI LEVEL INDEX    */
         L     @15,ARDBPTR                                         0850
         TM    ARDHLI(@15),B'01000000'                             0850
         BNO   @RF00850                                            0850
*                 DO;               /* YES, SAVE INFORMATION         */
*                   MWAHURBA=ARDHRBA;/* SAVE HIGH USED RBA           */
         L     @14,ENTRYPTR                                        0852
         L     @11,ARDHRBA(,@15)                                   0852
         ST    @11,MWAHURBA(,@14)                                  0852
*                   MWAVOLSR=ARDVOLSR;/* SAVE VOLUME SERIAL          */
         MVC   MWAVOLSR(6,@14),ARDVOLSR(@15)                       0853
*                   ARDBPTR=ZERO;   /* SET ARDB POINTER TO ZERO      */
         SLR   @15,@15                                             0854
         ST    @15,ARDBPTR                                         0854
*                 END;                                             0855
*               ELSE                /* NOT FOR HI LEVEL INDEX        */
*                 ARDBPTR=ARDNPTR;  /* POINT TO NEXT ARDB            */
         B     @RC00850                                            0856
@RF00850 L     @01,ARDBPTR                                         0856
         L     @15,ARDNPTR(,@01)                                   0856
         ST    @15,ARDBPTR                                         0856
*             END;                                                 0857
@RC00850 DS    0H                                                  0857
@DE00849 L     @15,ARDBPTR                                         0857
         LTR   @15,@15                                             0857
         BNZ   @DL00849                                            0857
*         END;                                                     0858
@RF00848 DS    0H                                                  0859
*       MWARNCIN(LC6)=AMBDDSN;      /* CI NUMBER IN RNAME    @ZA04523*/
@RC00831 LR    @15,LC6                                             0859
         SLA   @15,3                                               0859
         LA    @14,MWARNCIN-8(@15)                                 0859
         L     @15,AMBPTR                                          0859
         MVC   0(3,@14),AMBDDSN(@15)                               0859
*     END;                                                         0860
         AL    LC6,@CF00053                                        0860
@DE00826 L     @01,AMBLPTR                                         0860
         CH    LC6,AMBLNUM(,@01)                                   0860
         BNH   @DL00826                                            0860
*                                                                  0861
*     /***************************************************************/
*     /*                                                             */
*     /* INTERFACE WITH OPEN MODULES TO REBUILD CONTROL BLOCKS LOST  */
*     /* DURING THE RESTART                                          */
*     /*                                                             */
*     /***************************************************************/
*                                                                  0861
*     RESPECIFY                                                    0861
*       R1 RESTRICTED;              /*                       @ZA04523*/
*     R1=ADDR(MWENQPRM);            /* PT TO ENQ PARM LIST   @ZA04523*/
         LA    R1,MWENQPRM                                         0862
*     GEN(ENQ  (,,,,),MF=(E,(1)));  /* ENQUEUE ON CLUSTER    @ZA04523*/
         ENQ  (,,,,),MF=(E,(1))
*     RESPECIFY                                                    0864
*       R1 UNRESTRICTED;            /*                       @ZA04523*/
*     CALL IDA0192B;                /* REBUILD CLUSTER BLOCKS        */
         L     @15,@CV05279                                        0865
         BALR  @14,@15                                             0865
*     RESPECIFY                                                    0866
*       RETCODE RESTRICTED;                                        0866
*     RSTATRTN=IDARA05B;            /* NOTE IDA0A05B IN CONTROL      */
         LA    @14,MWAFCORE                                        0867
         MVC   RSTATRTN(4,@14),@CC05018                            0867
*     MWARETCD=RETCODE;             /* SAVE RETURN CODE FOR ANALYSIS */
         ST    RETCODE,MWARETCD                                    0868
*     IF RETCODE^=ZERO&ACBERFLG>OPERR116 THEN/* IF ERROR IN OPEN     */
         LTR   RETCODE,RETCODE                                     0869
         BZ    @RF00869                                            0869
         CLI   ACBERFLG(RACB),116                                  0869
         BNH   @RF00869                                            0869
*       DO;                         /* TRANSLATE ACBERFLG AND        */
*         RSRETCD2=ERRBASE+ACBERFLG/FOUR;/* SET RESTART RETURN CODE  */
         SLR   @14,@14                                             0871
         IC    @14,ACBERFLG(,RACB)                                 0871
         SRL   @14,2                                               0871
         AL    @14,@CF02132                                        0871
         L     @05,RSTWAPTR                                        0871
         STC   @14,RSRETCD2(,@05)                                  0871
*         CALL ERREXIT;             /* ISSUE MESSAGE AND EXIT        */
         BAL   @14,ERREXIT                                         0872
*       END;                                                       0873
*     RESPECIFY                                                    0874
*       RETCODE UNRESTRICTED;                                      0874
@RF00869 DS    0H                                                  0875
*     IF AMBLDTA->AMBCREAT=ON&      /* IF IN CREATE MODE AT CHECKPT  */
*         AMBLDTA->AMBDSB->AMDLM=ON THEN/* BUT NOT AT RESTART        */
         L     @05,AMBLPTR                                         0875
         L     @05,AMBLDTA(,@05)                                   0875
         TM    AMBCREAT(@05),B'10000000'                           0875
         BNO   @RF00875                                            0875
         L     @05,AMBDSB(,@05)                                    0875
         TM    AMDLM(@05),B'00001000'                              0875
         BNO   @RF00875                                            0875
*       DO;                         /* SET ERROR CODE AND ISSUE MSG  */
*         RSRETCD2=RSERR193;        /* INDICATE TYPE OF ERROR        */
         L     @05,RSTWAPTR                                        0877
         MVI   RSRETCD2(@05),X'C1'                                 0877
*         CALL ERREXIT;             /* ISSUE MESSAGE AND EXIT        */
         BAL   @14,ERREXIT                                         0878
*       END;                                                       0879
*     CALL MODTEST;                 /* TEST FOR MODIFICATION         */
@RF00875 BAL   @14,MODTEST                                         0880
*     CALL REPOSITN;                /* GO TO REPOSITION ROUTINE      */
         BAL   @14,REPOSITN                                        0881
*     IF OPWBASE=ON THEN            /* IF THE BASE IS BEING OPENED   */
         L     @05,OPWCURPT(,RCORE)                                0882
         TM    OPWBASE(@05),B'10000000'                            0882
         BNO   @RF00882                                            0882
*       DO;                         /*                       @ZA04523*/
*         ENQEND(1)=OFF;            /* END OFF IN 1ST ENTRY  @ZA04523*/
         NI    ENQEND,B'01111111'                                  0884
*         CALL BLDUPGRD;            /* BUILD THE UPGRADE STRUCTURE   */
         BAL   @14,BLDUPGRD                                        0885
*       END;                        /*                       @ZA04523*/
*   END;                                                           0887
@RF00882 LA    @15,1                                               0887
         AL    @15,LC5                                             0887
         ST    @15,LC5                                             0887
@DE00769 L     @05,VCRTPTR                                         0887
         CH    @15,VCROPNCT(,@05)                                  0887
         BNH   @DL00769                                            0887
*   CALL FREECORE;                  /* FREE RESIDUAL CORE            */
         BAL   @14,FREECORE                                        0888
*   RESPECIFY                                                      0889
*     RET RESTRICTED;                                              0889
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @05,RETCONT                                         0890
         LR    @15,@05                                             0890
         SLA   @15,2                                               0890
         L     RET,RETSAVE-4(@15)                                  0890
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               0891
         ST    @05,RETCONT                                         0891
*   RESPECIFY                                                      0892
*     RET UNRESTRICTED;                                            0892
*   END BLDOPEN;                                                   0893
@EL00010 DS    0H                                                  0893
@EF00010 DS    0H                                                  0893
@ER00010 BR    @14                                                 0893
*MODTEST:                                                          0894
*                                                                  0894
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - DETERMINES IF TEST FOR MODIFICATION WAS REQUESTED   */
*/*              AND, IF IT WAS, COMPARES AMDSB STATISTICS WITH      */
*/*              THOSE IN THE CATALOG FOR CLUSTERS OPEN FOR OUTPUT.  */
*/*   INPUT    - A POINTER TO THE CURRENT AMBL IN AMBLPTR            */
*/*   OUTPUT   - IF TEST REQUIRED AND A MISMATCH IS FOUND, VSAM      */
*/*              RESTART IS EXITED WITH A RETURN CODE OF 196.        */
*/*                                                                  */
*/********************************************************************/
*                                                                  0894
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0894
MODTEST  DS    0H                                                  0895
*   RESPECIFY                                                      0895
*     RET RESTRICTED;                                              0895
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0896
         AL    @15,RETCONT                                         0896
         ST    @15,RETCONT                                         0896
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
*                                                                  0897
         SLA   @15,2                                               0897
         ST    RET,RETSAVE-4(@15)                                  0897
*   /*****************************************************************/
*   /*                                                               */
*   /* IF THE ACBCRNCK OPTION BIT IS OFF IN EITHER THE ACB OR THE    */
*   /* DUMMY ACB AND THE CLUSTER IS OPEN FOR OUTPUT, PERFORM THE     */
*   /* MODIFICATION TEST.                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0898
*   IF((BIBDACB^=ZERO&ACBCRNCK=OFF)×ACBCRNCK=OFF)&AMBLWRIT=ON THEN 0898
         L     @15,OPWBIB(,RCORE)                                  0898
         L     @15,BIBDACB(,@15)                                   0898
         LTR   @15,@15                                             0898
         BZ    @GL00008                                            0898
         TM    ACBCRNCK(RACB),B'10000000'                          0898
         BZ    @GL00007                                            0898
@GL00008 TM    ACBCRNCK(RACB),B'10000000'                          0898
         BNZ   @RF00898                                            0898
@GL00007 L     @15,AMBLPTR                                         0898
         TM    AMBLWRIT(@15),B'00100000'                           0898
         BNO   @RF00898                                            0898
*     IF NRC=OFF&NCK=OFF THEN       /* CHECK RESTART TIME OPTIONS    */
         LA    @15,MWAFCORE                                        0899
         TM    NRC+100(@15),B'01010000'                            0899
         BNZ   @RF00899                                            0899
*       DO LC7=ONE TO AMBLNUM BY ONE;/* CHECK ALL AMDSBS             */
         LA    @15,1                                               0900
         ST    @15,LC7                                             0900
         B     @DE00900                                            0900
@DL00900 DS    0H                                                  0901
*         AMBPTR=AMBPTRS(LC7);      /* POINT AT CURRENT AMB          */
*                                                                  0901
         LR    @11,@15                                             0901
         SLA   @11,2                                               0901
         L     @01,AMBLPTR                                         0901
         L     @11,AMBPTRS-4(@11,@01)                              0901
         ST    @11,AMBPTR                                          0901
*         /***********************************************************/
*         /*                                                         */
*         /* ESTABLISH ADDRESSIBILITY FOR SAVED AMDSTAT FIELDS       */
*         /*                                                         */
*         /***********************************************************/
*                                                                  0902
*         AMDSBPTR=ADDR(MWASTAT(LC7))-LENGTH(IDAAMDSB)+LENGTH(AMDSTAT);
         MH    @15,@CH02711                                        0902
         LA    AMDSBPTR,MWASTAT-48(@15)                            0902
         AL    AMDSBPTR,@CF05428                                   0902
*         IF AMDNLR^=AMDSBPTR->AMDNLR×/* COMPARE LOGICAL RECORD CNT  */
*             AMDIREC^=AMDSBPTR->AMDIREC×/* AND INSERTED RECORD CNT  */
*             AMDDELR^=AMDSBPTR->AMDDELR×/* AND DELETED RECORD COUNT */
*             AMDUPR^=AMDSBPTR->AMDUPR THEN/* AND UPDATED RECORD CNT */
         L     @15,AMBDSB(,@11)                                    0903
         CLC   AMDNLR(4,@15),AMDNLR(AMDSBPTR)                      0903
         BNE   @RT00903                                            0903
         CLC   AMDIREC(4,@15),AMDIREC(AMDSBPTR)                    0903
         BNE   @RT00903                                            0903
         CLC   AMDDELR(4,@15),AMDDELR(AMDSBPTR)                    0903
         BNE   @RT00903                                            0903
         CLC   AMDUPR(4,@15),AMDUPR(AMDSBPTR)                      0903
         BE    @RF00903                                            0903
@RT00903 DS    0H                                                  0904
*           DO;                     /* IF ANY COUNT HAS CHANGED      */
*             RSRETCD2=RSERR196;    /* SET RETURN CODE TO 196        */
         L     @15,RSTWAPTR                                        0905
         MVI   RSRETCD2(@15),X'C4'                                 0905
*             CALL ERREXIT;         /* ISSUE MESSAGE AND EXIT        */
         BAL   @14,ERREXIT                                         0906
*           END;                                                   0907
*       END;                                                       0908
@RF00903 LA    @15,1                                               0908
         AL    @15,LC7                                             0908
         ST    @15,LC7                                             0908
@DE00900 L     @05,AMBLPTR                                         0908
         CH    @15,AMBLNUM(,@05)                                   0908
         BNH   @DL00900                                            0908
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
@RF00899 DS    0H                                                  0909
@RF00898 L     @05,RETCONT                                         0909
         LR    @15,@05                                             0909
         SLA   @15,2                                               0909
         L     RET,RETSAVE-4(@15)                                  0909
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               0910
         ST    @05,RETCONT                                         0910
*   RESPECIFY                                                      0911
*     RET UNRESTRICTED;                                            0911
*   END MODTEST;                                                   0912
@EL00011 DS    0H                                                  0912
@EF00011 DS    0H                                                  0912
@ER00011 BR    @14                                                 0912
*REPOSITN:                                                         0913
*                                                                  0913
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - DETERMINES IF REPOSITIONING WAS REQUESTED AND, IF   */
*/*              IT WAS, DETERMINES IF THE REQUEST IS VALID.  IF THE */
*/*              REQUEST IS VALID, REPOSITIONING IS PERFORMED.  IF   */
*/*              THE CLUSTER IS A KSDS IN CREATE MODE, REPOSITIONING */
*/*              IS PERFORMED.  IF REPOSITIONING WAS NOT REQUESTED,  */
*/*              A VERIFY IS ISSUED.                                 */
*/*   INPUT    - A POINTER TO THE CURRENT AMBL IN AMBLPTR            */
*/*              A POINTER TO THE CURRENT VCRT IN VCRTPTR            */
*/*   OUTPUT   - IF REPOSITIONING IS REQUIRED, THE HIGH USED RBA IS  */
*/*              RESET ITS THE VALUE AT CHECKPOINT TIME.             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0913
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0913
REPOSITN DS    0H                                                  0914
*   RESPECIFY                                                      0914
*     RET RESTRICTED;                                              0914
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0915
         AL    @15,RETCONT                                         0915
         ST    @15,RETCONT                                         0915
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               0916
         ST    RET,RETSAVE-4(@15)                                  0916
*   RESPECIFY                                                      0917
*     RET UNRESTRICTED;                                            0917
*   AMBPTR=AMBLDTA;                 /* POINT TO DATA AMB FOR DS TYPE */
         L     @05,AMBLPTR                                         0918
         L     @05,AMBLDTA(,@05)                                   0918
         ST    @05,AMBPTR                                          0918
*   ARDBPTR=AMDPARDB;               /* POINT TO FIRST ARDB           */
         L     @01,AMBDSB(,@05)                                    0919
         L     @15,AMDPARDB(,@01)                                  0919
         ST    @15,ARDBPTR                                         0919
*   IF AMBCREAT=ON&ARDHRBA^=ZERO×   /* IF CREATE MODE AND NOT NULL   */
*       ACBCRNRE=OFF&               /* OR REPOSITIONING REQUESTED    */
*       AMDDST=OFF&                 /* AND IF NOT A KSDS             */
*       AMDRRDS=OFF&                /* AND NOT AN RRDS, SO AN ESDS,  */
*       AMBLWRIT=ON&                /* AND OPEN FOR OUTPUT           */
*       ARDHRBA^=ZERO&              /* AND OBJECT IS NOT EMPTY AND   */
*       BIBUPT=ZERO THEN            /* IMMEDIATE UPGRADE NOT OPEN    */
         TM    AMBCREAT(@05),B'10000000'                           0920
         BNO   @GL00013                                            0920
         L     @05,ARDHRBA(,@15)                                   0920
         LTR   @05,@05                                             0920
         BNZ   @RT00920                                            0920
@GL00013 TM    ACBCRNRE(RACB),B'01000000'                          0920
         BNZ   @RF00920                                            0920
         L     @05,AMBPTR                                          0920
         L     @05,AMBDSB(,@05)                                    0920
         TM    AMDDST(@05),B'10000010'                             0920
         BNZ   @RF00920                                            0920
         L     @05,AMBLPTR                                         0920
         TM    AMBLWRIT(@05),B'00100000'                           0920
         BNO   @RF00920                                            0920
         SLR   @05,@05                                             0920
         L     @01,ARDBPTR                                         0920
         CL    @05,ARDHRBA(,@01)                                   0920
         BE    @RF00920                                            0920
         L     @01,OPWBIB(,RCORE)                                  0920
         C     @05,BIBUPT(,@01)                                    0920
         BNE   @RF00920                                            0920
@RT00920 DS    0H                                                  0921
*     DO;                                                          0921
*                                                                  0921
*       /*************************************************************/
*       /*                                                           */
*       /* IT HAS BEEN DETERMINED THAT REPOSITIONING IS REQUIRED, SO */
*       /* CHECK THE ARDBS TO SEE IF THE CLUSTER HAS EXTENDED TO     */
*       /* ANOTHER VOLUME AND PERFORM REPOSITIONING FUNCTIONS.       */
*       /*                                                           */
*       /*************************************************************/
*                                                                  0922
*       DO LC8=ONE TO AMBLNUM BY ONE;/* PROCESS THE AMBS             */
         LA    @05,1                                               0922
         ST    @05,LC8                                             0922
         B     @DE00922                                            0922
@DL00922 DS    0H                                                  0923
*         AMBPTR=AMBPTRS(LC8);      /* ADDRESSIBILITY TO AMB         */
         LR    @15,@05                                             0923
         SLA   @15,2                                               0923
         L     @01,AMBLPTR                                         0923
         L     @15,AMBPTRS-4(@15,@01)                              0923
         ST    @15,AMBPTR                                          0923
*         IF LC8=ONE THEN           /* IF DATA AMB                   */
         C     @05,@CF00053                                        0924
         BNE   @RF00924                                            0924
*           DO;                                                    0925
*             ENTRYPTR=ADDR(ARDBTBL(1));/* INIT PT TO ARDBTBL ENTRY  */
         L     @05,TBLPTR                                          0926
         ST    @05,ENTRYPTR                                        0926
*             ARDBPTR=AMDPARDB;     /* INIT POINTER TO FIRST ARDB    */
         L     @05,AMBDSB(,@15)                                    0927
         L     @05,AMDPARDB(,@05)                                  0927
         ST    @05,ARDBPTR                                         0927
*             DO UNTIL ARDBPTR=ZERO;/* COMPARE ALL ARDBS             */
@DL00928 DS    0H                                                  0929
*               IF ARDVOLSR^=MWAVOLSR THEN/* COMPARE VOLUME SERIAL   */
         L     @05,ARDBPTR                                         0929
         L     @01,ENTRYPTR                                        0929
         CLC   ARDVOLSR(6,@05),MWAVOLSR(@01)                       0929
         BE    @RF00929                                            0929
*                 DO;               /* IF NOT EQUAL,                 */
*                   RSRETCD2=RSERR198;/* SET THE RESTART RETURN CODE */
         L     @05,RSTWAPTR                                        0931
         MVI   RSRETCD2(@05),X'C6'                                 0931
*                   CALL ERREXIT;   /* ISSUE MESSAGE AND EXIT        */
         BAL   @14,ERREXIT                                         0932
*                 END;              /* OTHERWISE, NO ERROR, SO       */
*               ARDHRBA=MWAHURBA;   /* RESTORE HIGH USED RBA AND     */
@RF00929 L     @05,ARDBPTR                                         0934
         L     @15,ENTRYPTR                                        0934
         L     @14,MWAHURBA(,@15)                                  0934
         ST    @14,ARDHRBA(,@05)                                   0934
*               ENTRYPTR=ENTRYPTR+LENGTH(TBLENTRY);/* PT TO NEXT ENT */
         AL    @15,@CF00033                                        0935
         ST    @15,ENTRYPTR                                        0935
*               ARDBPTR=ARDNPTR;    /* POINT TO NEXT ARDB            */
         L     @05,ARDNPTR(,@05)                                   0936
         ST    @05,ARDBPTR                                         0936
*             END;                                                 0937
@DE00928 L     @05,ARDBPTR                                         0937
         LTR   @05,@05                                             0937
         BNZ   @DL00928                                            0937
*           END;                                                   0938
*         ELSE                      /* AMB IS FOR INDEX              */
*           DO;                                                    0939
         B     @RC00924                                            0939
@RF00924 DS    0H                                                  0940
*             ENTRYPTR=ADDR(ARDBTBL(256));/* INIT PTR TO IDX TBL ENT */
         L     @05,TBLPTR                                          0940
         LA    @05,ARDBTBL+3060(,@05)                              0940
         ST    @05,ENTRYPTR                                        0940
*             ARDBPTR=AMDPARDB;     /* POINT TO FIRST INDEX ARDB     */
         L     @05,AMBPTR                                          0941
         L     @05,AMBDSB(,@05)                                    0941
         L     @05,AMDPARDB(,@05)                                  0941
         ST    @05,ARDBPTR                                         0941
*             DO UNTIL ARDBPTR=ZERO;/* SCAN ALL ARDBS FOR HI LEVEL   */
@DL00942 DS    0H                                                  0943
*               IF ARDHLI=ON THEN   /* IS ARDB FOR HI LEVEL INDEX    */
         L     @05,ARDBPTR                                         0943
         TM    ARDHLI(@05),B'01000000'                             0943
         BNO   @RF00943                                            0943
*                 IF ARDVOLSR^=MWAVOLSR THEN/* COMPARE VOLUME SERIAL */
         L     @01,ENTRYPTR                                        0944
         CLC   ARDVOLSR(6,@05),MWAVOLSR(@01)                       0944
         BE    @RF00944                                            0944
*                   DO;             /* IF VOLUME SERIAL HAS CHANGED  */
*                     RSRETCD2=RSERR198;/* IND A NEW VOLUME IN ARDB  */
         L     @05,RSTWAPTR                                        0946
         MVI   RSRETCD2(@05),X'C6'                                 0946
*                     CALL ERREXIT; /* ISSUE MESSAGE AND EXIT        */
         BAL   @14,ERREXIT                                         0947
*                   END;                                           0948
*                 ELSE              /* OTHERWISE,                    */
*                   DO;                                            0949
         B     @RC00944                                            0949
@RF00944 DS    0H                                                  0950
*                     ARDHRBA=MWAHURBA;/* RESTORE HIGH USED RBA      */
         L     @05,ENTRYPTR                                        0950
         L     @05,MWAHURBA(,@05)                                  0950
         L     @01,ARDBPTR                                         0950
         ST    @05,ARDHRBA(,@01)                                   0950
*                     ARDBPTR=ZERO; /* SET ARDB POINTER TO ZERO      */
         SLR   @05,@05                                             0951
         ST    @05,ARDBPTR                                         0951
*                   END;                                           0952
*               ELSE                /* NOT FOR HI LEVEL INDEX        */
*                 ARDBPTR=ARDNPTR;  /* POINT TO NEXT ARDB            */
         B     @RC00943                                            0953
@RF00943 L     @05,ARDBPTR                                         0953
         L     @05,ARDNPTR(,@05)                                   0953
         ST    @05,ARDBPTR                                         0953
*             END;                                                 0954
@RC00943 DS    0H                                                  0954
@DE00942 L     @05,ARDBPTR                                         0954
         LTR   @05,@05                                             0954
         BNZ   @DL00942                                            0954
*           END;                                                   0955
*       END;                                                       0956
@RC00924 LA    @05,1                                               0956
         AL    @05,LC8                                             0956
         ST    @05,LC8                                             0956
@DE00922 L     @01,AMBLPTR                                         0956
         CH    @05,AMBLNUM(,@01)                                   0956
         BNH   @DL00922                                            0956
*       CALL IOSAVE;                /* SAVE USER CONTROL BLOCKS      */
         BAL   @14,IOSAVE                                          0957
*       IF AMBSPEED=OFF THEN        /* SPEED OPTION NOT REQUESTED    */
         L     @05,AMBPTR                                          0958
         TM    AMBSPEED(@05),B'00001000'                           0958
         BNZ   @RF00958                                            0958
*         CALL PREFRMAT;            /* PREFORMAT THE CLUSTER         */
         BAL   @14,PREFRMAT                                        0959
*       IF AMDDST=ON THEN           /* IF THE CLUSTER IS A KSDS      */
@RF00958 L     @05,AMBPTR                                          0960
         L     @05,AMBDSB(,@05)                                    0960
         TM    AMDDST(@05),B'10000000'                             0960
         BNO   @RF00960                                            0960
*         CALL IDXPUT;              /* CALL THE INDEX PUT ROUTINE    */
         BAL   @14,IDXPUT                                          0961
*       ELSE                        /* ELSE, IT IS A KSDS, SO        */
*         IF VCRRBUF^=ZERO THEN     /* IF CI WAS SAVED AT CHECKPOINT */
         B     @RC00960                                            0962
@RF00960 L     @05,VCRTPTR                                         0962
         L     @05,VCRRBUF(,@05)                                   0962
         LTR   @05,@05                                             0962
         BZ    @RF00962                                            0962
*           CALL PUTRTN;            /* CALL THE CI PUT ROUTINE       */
         BAL   @14,PUTRTN                                          0963
*       CALL IORESTOR;              /* RESTORE USER CONTROL BLOCKS   */
@RF00962 DS    0H                                                  0964
@RC00960 BAL   @14,IORESTOR                                        0964
*       MWACLPRM=ADDR(IFGACB);      /* POINT TO ACB FOR REPOSITION   */
         ST    RACB,MWACLPRM                                       0965
*       MWALASTE=ON;                /* LAST ENTRY IN PARAMETER LIST  */
         OI    MWALASTE,B'10000000'                                0966
*       RESPECIFY                                                  0967
*         R1 RESTRICTED;                                           0967
*       R1=ADDR(MWENQPRM);          /* PT TO ENQ PARM LIST   @ZA04523*/
         LA    R1,MWENQPRM                                         0968
*       GEN(DEQ  (,,,,),MF=(E,(1)));/* DEQUEUE CLUSTER       @ZA04523*/
         DEQ  (,,,,),MF=(E,(1))
*       STM(RACB,R12,XRBESA);       /* SAVE RESTARTS REGISTERS       */
         L     @05,PSATOLD                                         0970
         L     @05,TCBRBP(,@05)                                    0970
         STM   RACB,R12,XRBESA(@05)                                0970
*       LM(R0,R12,RBGRSAVE);        /* LOAD USERS REGS FOR ANY EXITS */
         L     @05,PSATOLD                                         0971
         L     @05,TCBRBP(,@05)                                    0971
         LM    R0,R12,RBGRSAVE(@05)                                0971
*       GEN(CLOSE MF=(E,MWACLPRM),TYPE=T);/* T-CLOSE TO UPDATE CTLG  */
         CLOSE MF=(E,MWACLPRM),TYPE=T
*       LM(RACB,R12,XRBESA);        /* RESTORE RESTARTS REGISTERS    */
         L     @05,PSATOLD                                         0973
         L     @05,TCBRBP(,@05)                                    0973
         LM    RACB,R12,XRBESA(@05)                                0973
*       RESPECIFY                                                  0974
*         R1 UNRESTRICTED;                                         0974
*       IF ACBERFLG>OPERR128 THEN   /* IF ANY ERRORS ON THE T-CLOSE  */
         CLI   ACBERFLG(RACB),128                                  0975
         BNH   @RF00975                                            0975
*         DO;                       /* THEN                          */
*           RSRETCD2=ACBERFLG/FOUR+ERRBASE;/* SET THE ERROR CODE AND */
         SLR   @05,@05                                             0977
         IC    @05,ACBERFLG(,RACB)                                 0977
         SRL   @05,2                                               0977
         AL    @05,@CF02132                                        0977
         L     @01,RSTWAPTR                                        0977
         STC   @05,RSRETCD2(,@01)                                  0977
*           CALL ERREXIT;           /* ISSUE THE MESSAGE AND EXIT    */
         BAL   @14,ERREXIT                                         0978
*         END;                                                     0979
*     END;                          /* END OF REPOSITIONING CODE     */
*                                                                  0981
*   /*****************************************************************/
*   /*                                                               */
*   /* WE HAVE DETERMINED THAT REPOSITIONING IS NOT REQUIRED, SO THE */
*   /* VERIFY ROUTINE WILL BE CALLED IF OPENED FOR OUTPUT AND THE    */
*   /* CLUSTER HAS NOT ALREADY BEEN PROCESSED AS PART OF THE UPGRADE */
*   /* SET.                                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0981
*   ELSE                                                           0981
*     DO;                           /* VERIFY AND DEQUEUE    @ZA04523*/
         B     @RC00920                                            0981
@RF00920 DS    0H                                                  0982
*       IF AMBPUG=OFF&              /* IF AMB NOT IN UPGRADE         */
*           AMBLWRIT=ON THEN        /* AND OPEN FOR OUTPUT           */
         L     @05,AMBPTR                                          0982
         TM    AMBPUG(@05),B'10000000'                             0982
         BNZ   @RF00982                                            0982
         L     @05,AMBLPTR                                         0982
         TM    AMBLWRIT(@05),B'00100000'                           0982
         BNO   @RF00982                                            0982
*         CALL VERIFY;              /* ISSUE A VERIFY ON THE CLUSTER */
         BAL   @14,VERIFY                                          0983
*       RESPECIFY                                                  0984
*         R1 RESTRICTED;            /*                       @ZA04523*/
@RF00982 DS    0H                                                  0985
*       R1=ADDR(MWENQPRM);          /* PT TO ENQ PARM LIST   @ZA04523*/
         LA    R1,MWENQPRM                                         0985
*       GEN(DEQ  (,,,,),MF=(E,(1)));/* DEQUEUE CLUSTER       @ZA04523*/
         DEQ  (,,,,),MF=(E,(1))
*     END;                          /* END NO REPOSITION PROCESSING  */
*   RESPECIFY                                                      0988
*     RET RESTRICTED;                                              0988
@RC00920 DS    0H                                                  0989
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @05,RETCONT                                         0989
         LR    @15,@05                                             0989
         SLA   @15,2                                               0989
         L     RET,RETSAVE-4(@15)                                  0989
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               0990
         ST    @05,RETCONT                                         0990
*   RESPECIFY                                                      0991
*    (R1,                                                          0991
*     RET) UNRESTRICTED;                                           0991
*   END REPOSITN;                                                  0992
@EL00012 DS    0H                                                  0992
@EF00012 DS    0H                                                  0992
@ER00012 BR    @14                                                 0992
*PREFRMAT:                                                         0993
*                                                                  0993
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - PREFORMATS ALL CONTROL INTERVALS IN THE CONTROL     */
*/*              AREA ASSOCIATED WITH THE CHECKPOINTED HIGH USED RBA */
*/*              PLUS THE FIRST CI IN THE NEXT CA BY INVOKING THE    */
*/*              PREFORMAT FUNCTION OF RECORD MANAGEMENT.            */
*/*   INPUT    - A POINTER TO THE CURRENT AMBL IN AMBLPTR            */
*/*   OUTPUT   - THE CONTROL AREA IS PREFORMATTED                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0993
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0993
PREFRMAT DS    0H                                                  0994
*   RESPECIFY                                                      0994
*     RET RESTRICTED;                                              0994
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               0995
         AL    @15,RETCONT                                         0995
         ST    @15,RETCONT                                         0995
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               0996
         ST    RET,RETSAVE-4(@15)                                  0996
*   RESPECIFY                                                      0997
*     RET UNRESTRICTED;                                            0997
*   AMBPTR=ADDR(MWAAMBD);           /* POINT TO DATA AMB             */
         LA    @05,MWAAMBD                                         0998
         ST    @05,AMBPTR                                          0998
*   IFGRPL=IFGRPL&&IFGRPL;          /* CLEAR THE RPL                 */
         LA    @15,72                                              0999
         AL    @15,MWASP250                                        0999
         XC    IFGRPL(76,@15),IFGRPL(@15)                          0999
*   RPLDACB=ADDR(IFGACB);           /* SET THE ADDRESS OF THE ACB    */
         ST    RACB,RPLDACB(,@15)                                  1000
*   IF AMDDST=ON×AMDRRDS=ON THEN    /* IF A KSDS OR RRDS,    @ZA03934*/
         L     @01,AMBDSB(,@05)                                    1001
         TM    AMDDST(@01),B'10000010'                             1001
         BZ    @RF01001                                            1001
*     RPLDDDD=BUFCORBA;             /* PREFORMAT FROM BUFC OUTPUT RBA
*                                                            @ZA03934*/
         L     @05,AMBPH(,@05)                                     1002
         L     @05,PLHDBUFC+16(,@05)                               1002
         L     @05,BUFCORBA(,@05)                                  1002
         ST    @05,RPLDDDD(,@15)                                   1002
*   ELSE                            /* OTHERWISE,                    */
*     RPLDDDD=(AMDPARDB->ARDHRBA)-AMDCINV;/* PREFORMAT FROM HIGH USED
*                                      RBA MINUS LENGTH OF ONE CI    */
         B     @RC01001                                            1003
@RF01001 L     @05,AMBPTR                                          1003
         L     @05,AMBDSB(,@05)                                    1003
         L     @01,AMDPARDB(,@05)                                  1003
         L     @15,ARDHRBA(,@01)                                   1003
         SL    @15,AMDCINV(,@05)                                   1003
         L     @05,MWASP250                                        1003
         ST    @15,RPLDDDD+72(,@05)                                1003
*   RESPECIFY                                                      1004
*    (R0,                                                          1004
*     R1,                                                          1004
*     R15) RESTRICTED;                                             1004
@RC01001 DS    0H                                                  1005
*   R0=RPLPFMTD;                    /* INDICATE PREFORMAT REQUEST    */
         LA    R0,8                                                1005
*   R1=ADDR(IFGRPL);                /* POINT TO RPL FOR R/M          */
         L     @14,MWASP250                                        1006
         LA    R1,72                                               1006
         ALR   R1,@14                                              1006
*   R15=BIBINTRF;                   /* POINT TO INTERFACE ROUTINE    */
         L     @05,OPWBIB(,RCORE)                                  1007
         L     R15,BIBINTRF(,@05)                                  1007
*   STM(RACB,R13,XRBESA);           /* SAVE REGISTERS IN RB SAVEAREA */
         L     @05,PSATOLD                                         1008
         L     @05,TCBRBP(,@05)                                    1008
         STM   RACB,R13,XRBESA(@05)                                1008
*   R13=ADDR(SP250SA);              /* PT TO USER SUBPOOL SAVE AREA  */
         LR    R13,@14                                             1009
*   GEN(SYNCH (15));                /* GO TO R/M IN USERS KEY        */
         SYNCH (15)
*   LM(RACB,R13,XRBESA);            /* RESTORE RESTARTS REGISTERS    */
         L     @14,PSATOLD                                         1011
         L     @14,TCBRBP(,@14)                                    1011
         LM    RACB,R13,XRBESA(@14)                                1011
*   RESPECIFY                                                      1012
*    (R0,                                                          1012
*     R1,                                                          1012
*     R15) UNRESTRICTED;                                           1012
*   IF RPLRTNCD^=ZERO THEN          /* IF ANY ERRORS ON PREFORMAT    */
         L     @05,MWASP250                                        1013
         CLI   RPLRTNCD+72(@05),0                                  1013
         BE    @RF01013                                            1013
*     DO;                                                          1014
*       RSRETCD2=RSERR181;          /* INDICATE PREFORMAT ERROR      */
         L     @05,RSTWAPTR                                        1015
         MVI   RSRETCD2(@05),X'B5'                                 1015
*       CALL ERREXIT;               /* ISSUE MESSAGE AND EXIT        */
         BAL   @14,ERREXIT                                         1016
*     END;                                                         1017
*   RESPECIFY                                                      1018
*     RET RESTRICTED;                                              1018
@RF01013 DS    0H                                                  1019
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @05,RETCONT                                         1019
         LR    @15,@05                                             1019
         SLA   @15,2                                               1019
         L     RET,RETSAVE-4(@15)                                  1019
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               1020
         ST    @05,RETCONT                                         1020
*   RESPECIFY                                                      1021
*     RET UNRESTRICTED;                                            1021
*   END PREFRMAT;                                                  1022
@EL00013 DS    0H                                                  1022
@EF00013 DS    0H                                                  1022
@ER00013 BR    @14                                                 1022
*IDXPUT:                                                           1023
*                                                                  1023
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - ISSUES A GETIX FOLLOWED BY A PUTIX TO UPDATE THE    */
*/*              INDEX CI ASSOCIATED WITH THE RBA IN EACH ICWA USING */
*/*              THE INDEX CI SAVED AT THE CHECKPOINT.               */
*/*   INPUT    - A POINTER TO THE CURRENT AMBL IN AMBLPTR            */
*/*              A POINTER TO THE CURRENT VCRT IN VCRTPTR            */
*/*   OUTPUT   - THE INDEX IS RESET TO ITS CHECKPOINT STATUS         */
*/*                                                                  */
*/********************************************************************/
*                                                                  1023
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1023
IDXPUT   DS    0H                                                  1024
*   RESPECIFY                                                      1024
*     RET RESTRICTED;                                              1024
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               1025
         L     @05,RETCONT                                         1025
         ALR   @05,@15                                             1025
         ST    @05,RETCONT                                         1025
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @05,2                                               1026
         ST    RET,RETSAVE-4(@05)                                  1026
*   RESPECIFY                                                      1027
*     RET UNRESTRICTED;                                            1027
*                                                                  1027
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE THE RPL                                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1028
*   AMBPTR=ADDR(MWAAMBI);           /* POINT TO INDEX AMB            */
         LA    @05,MWAAMBI                                         1028
         ST    @05,AMBPTR                                          1028
*   IFGRPL=IFGRPL&&IFGRPL;          /* CLEAR THE RPL                 */
         LA    @14,72                                              1029
         AL    @14,MWASP250                                        1029
         XC    IFGRPL(76,@14),IFGRPL(@14)                          1029
*   RPLDIR=ON;                      /* INDICATE DIRECT PROCESSING    */
         OI    RPLDIR(@14),B'01000000'                             1030
*   RPLCNV=ON;                      /* CONTROL INTERVAL ACCESS       */
*   RPLUPD=ON;                      /* UPDATE                        */
         OI    RPLCNV(@14),B'00100010'                             1032
*   RPLDACB=ADDR(IFGACB);           /* SET ADDRESS OF ACB            */
         ST    RACB,RPLDACB(,@14)                                  1033
*   RPLRLEN=AMDCINV;                /* SET LENGTH OF RECORD          */
         L     @05,AMBDSB(,@05)                                    1034
         L     @05,AMDCINV(,@05)                                   1034
         ST    @05,RPLRLEN(,@14)                                   1034
*                                                                  1035
*   /*****************************************************************/
*   /*                                                               */
*   /* RESET THE INDEX CONTROL INTERVALS                             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1035
*   DO LC9=ONE TO VCRIDXCT BY ONE;  /* PROCESS ALL INDEX ENTRIES     */
         ST    @15,LC9                                             1035
         B     @DE01035                                            1035
@DL01035 DS    0H                                                  1036
*     RPLARG=ADDR(ICWCRBA);         /* POINT TO THE RBA TO UPDATE    */
         L     @05,MWASP250                                        1036
         LA    @14,72                                              1036
         ALR   @14,@05                                             1036
         SLA   @15,3                                               1036
         L     @01,VCRTPTR                                         1036
         L     @01,VCRIDX(,@01)                                    1036
         AL    @01,@CF05420                                        1036
         L     @01,VCRICWA(@15,@01)                                1036
         LA    @15,ICWCRBA(,@01)                                   1036
         ST    @15,RPLARG(,@14)                                    1036
*     RPLLOC=ON;                    /* LOCATE MODE FOR THE GETIX     */
         OI    RPLLOC(@14),B'10000000'                             1037
*     RPLAREA=ADDR(RPLAREA);        /* WILL CONTAIN POINTER TO BUFFER*/
         LA    @15,RPLAREA(,@14)                                   1038
         ST    @15,RPLAREA(,@14)                                   1038
*     RESPECIFY                                                    1039
*      (R0,                                                        1039
*       R1,                                                        1039
*       R15) RESTRICTED;                                           1039
*     R0=RPLGETIX;                  /* INDICATE GETIX REQUEST        */
         LA    R0,11                                               1040
*     R1=ADDR(IFGRPL);              /* POINT REGISTER 1 AT RPL       */
         LR    R1,@14                                              1041
*     R15=BIBINTRF;                 /* POINT REG 15 AT INTERFACE RTN */
         L     @14,OPWBIB(,RCORE)                                  1042
         L     R15,BIBINTRF(,@14)                                  1042
*     STM(RACB,R13,XRBESA);         /* SAVE REGISTERS IN RB SAVEAREA */
         L     @14,PSATOLD                                         1043
         L     @14,TCBRBP(,@14)                                    1043
         STM   RACB,R13,XRBESA(@14)                                1043
*     R13=ADDR(SP250SA);            /* POINT REG 13 AT USER SP S.A.  */
         LR    R13,@05                                             1044
*     GEN(SYNCH (15));              /* SYNCH TO INTERFACE ROUTINE    */
         SYNCH (15)
*     LM(RACB,R13,XRBESA);          /* RESTORE RESTARTS REGISTERS    */
         L     @14,PSATOLD                                         1046
         L     @14,TCBRBP(,@14)                                    1046
         LM    RACB,R13,XRBESA(@14)                                1046
*     IF RPLRTNCD^=ZERO THEN        /* IF ANY ERRORS ON GETIX        */
         L     @14,MWASP250                                        1047
         CLI   RPLRTNCD+72(@14),0                                  1047
         BE    @RF01047                                            1047
*       DO;                                                        1048
*         RSRETCD2=RSERR184;        /* INDICATE INDEX PUT ERROR      */
         L     @14,RSTWAPTR                                        1049
         MVI   RSRETCD2(@14),X'B8'                                 1049
*         CALL ERREXIT;             /* ISSUE MESSAGE AND EXIT        */
         BAL   @14,ERREXIT                                         1050
*       END;                                                       1051
*     RPLLOC=OFF;                   /* MOVE MODE FOR THE PUTIX       */
@RF01047 L     @14,MWASP250                                        1052
         LA    @05,72                                              1052
         ALR   @05,@14                                             1052
         NI    RPLLOC(@05),B'01111111'                             1052
*     RPLAREA=VCRBUFPT(LC9);        /* POINT TO SAVED INDEX BUFFER   */
         L     @11,LC9                                             1053
         SLA   @11,3                                               1053
         L     @10,VCRTPTR                                         1053
         L     @10,VCRIDX(,@10)                                    1053
         AL    @10,@CF05432                                        1053
         L     @11,VCRBUFPT-4(@11,@10)                             1053
         ST    @11,RPLAREA(,@05)                                   1053
*     R0=RPLPUTIX;                  /* INDICATE PUTIX REQUEST        */
         LA    R0,12                                               1054
*     R1=ADDR(IFGRPL);              /* POINT REGISTER 1 AT RPL       */
         LR    R1,@05                                              1055
*     R15=BIBINTRF;                 /* POINT REG 15 AT INTERFACE RTN */
         L     @05,OPWBIB(,RCORE)                                  1056
         L     R15,BIBINTRF(,@05)                                  1056
*     STM(RACB,R13,XRBESA);         /* SAVE REGISTERS IN RB SAVEAREA */
         L     @05,PSATOLD                                         1057
         L     @05,TCBRBP(,@05)                                    1057
         STM   RACB,R13,XRBESA(@05)                                1057
*     R13=ADDR(SP250SA);            /* POINT REG 13 AT USER SP S.A.  */
         LR    R13,@14                                             1058
*     GEN(SYNCH (15));              /* SYNCH TO INTERFACE ROUTINE    */
         SYNCH (15)
*     LM(RACB,R13,XRBESA);          /* RESTORE RESTARTS REGISTERS    */
         L     @14,PSATOLD                                         1060
         L     @14,TCBRBP(,@14)                                    1060
         LM    RACB,R13,XRBESA(@14)                                1060
*     RESPECIFY                                                    1061
*      (R0,                                                        1061
*       R1,                                                        1061
*       R15) UNRESTRICTED;                                         1061
*     IF RPLRTNCD^=ZERO THEN        /* IF ANY ERRORS ON PUTIX        */
         L     @05,MWASP250                                        1062
         CLI   RPLRTNCD+72(@05),0                                  1062
         BE    @RF01062                                            1062
*       DO;                                                        1063
*         RSRETCD2=RSERR184;        /* INDICATE INDEX PUT ERROR      */
         L     @05,RSTWAPTR                                        1064
         MVI   RSRETCD2(@05),X'B8'                                 1064
*         CALL ERREXIT;             /* ISSUE MESSAGE AND EXIT        */
         BAL   @14,ERREXIT                                         1065
*       END;                                                       1066
*   END;                                                           1067
@RF01062 LA    @15,1                                               1067
         AL    @15,LC9                                             1067
         ST    @15,LC9                                             1067
@DE01035 L     @05,VCRTPTR                                         1067
         CH    @15,VCRIDXCT(,@05)                                  1067
         BNH   @DL01035                                            1067
*   RESPECIFY                                                      1068
*     RET RESTRICTED;                                              1068
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @05,RETCONT                                         1069
         LR    @15,@05                                             1069
         SLA   @15,2                                               1069
         L     RET,RETSAVE-4(@15)                                  1069
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               1070
         ST    @05,RETCONT                                         1070
*   RESPECIFY                                                      1071
*     RET UNRESTRICTED;                                            1071
*   END IDXPUT;                                                    1072
@EL00014 DS    0H                                                  1072
@EF00014 DS    0H                                                  1072
@ER00014 BR    @14                                                 1072
*PUTRTN:                                                           1073
*                                                                  1073
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - ISSUES A PUT TO UPDATE THE CONTROL INTERVAL FOR AN  */
*/*              ESDS WHEN REPOSITIONING IS REQUESTED AND AN UPGRADE */
*/*              IS NOT OPEN AGAINST THE BASE CLUSTER.               */
*/*   INPUT    - A POINTER TO THE CURRENT AMBL IN AMBLPTR            */
*/*   OUTPUT   - THE ESDS IS RESET TO ITS CHECKPOINT STATUS          */
*/*                                                                  */
*/********************************************************************/
*                                                                  1073
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1073
PUTRTN   DS    0H                                                  1074
*   RESPECIFY                                                      1074
*     RET RESTRICTED;                                              1074
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               1075
         L     @05,RETCONT                                         1075
         ALR   @05,@15                                             1075
         ST    @05,RETCONT                                         1075
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @05,2                                               1076
         ST    RET,RETSAVE-4(@05)                                  1076
*   RESPECIFY                                                      1077
*     RET UNRESTRICTED;                                            1077
*   AMBPTR=ADDR(MWAAMBD);           /* GET THE POINTER TO DATA AMB   */
         LA    @05,MWAAMBD                                         1078
         ST    @05,AMBPTR                                          1078
*   ARDBPTR=AMDPARDB;               /* POINT TO ARDB FOR ESDS/RRDS   */
         L     @05,AMBDSB(,@05)                                    1079
         L     @14,AMDPARDB(,@05)                                  1079
         ST    @14,ARDBPTR                                         1079
*   ARDHRBA=ARDHRBA-AMDCINV;        /* GET RBA OF CONTROL INTERVAL   */
         L     @05,AMDCINV(,@05)                                   1080
         L     @11,ARDHRBA(,@14)                                   1080
         SLR   @11,@05                                             1080
         ST    @11,ARDHRBA(,@14)                                   1080
*   IFGRPL=IFGRPL&&IFGRPL;          /* CLEAR THE RPL                 */
         L     @14,MWASP250                                        1081
         LA    @11,72                                              1081
         ALR   @11,@14                                             1081
         XC    IFGRPL(76,@11),IFGRPL(@11)                          1081
*   RPLDIR=ON;                      /* INDICATE DIRECT PROCESSING    */
         OI    RPLDIR(@11),B'01000000'                             1082
*   RPLCNV=ON;                      /* CONTROL INTERVAL ACCESS       */
         OI    RPLCNV(@11),B'00100000'                             1083
*   RPLDACB=ADDR(IFGACB);           /* SET ADDRESS OF ACB            */
         ST    RACB,RPLDACB(,@11)                                  1084
*   RPLRLEN=AMDCINV;                /* SET LENGTH OF RECORD          */
         ST    @05,RPLRLEN(,@11)                                   1085
*   RPLAREA=VCRRBUF;                /* POINT TO CHECKPOINTED CI      */
         L     @05,VCRTPTR                                         1086
         L     @05,VCRRBUF(,@05)                                   1086
         ST    @05,RPLAREA(,@11)                                   1086
*   RESPECIFY                                                      1087
*    (R0,                                                          1087
*     R1,                                                          1087
*     R15) RESTRICTED;                                             1087
*   R0=RPLPUT;                      /* INDICATE PUT REQUEST          */
         LA    @05,1                                               1088
         LR    R0,@05                                              1088
*   R1=ADDR(IFGRPL);                /* POINT REGISTER 1 AT RPL       */
         LR    R1,@11                                              1089
*   R15=BIBINTRF;                   /* POINT REG 15 AT INTERFACE RTN */
         L     @05,OPWBIB(,RCORE)                                  1090
         L     R15,BIBINTRF(,@05)                                  1090
*   STM(RACB,R13,XRBESA);           /* SAVE REGISTERS IN RB SAVEAREA */
         L     @05,PSATOLD                                         1091
         L     @05,TCBRBP(,@05)                                    1091
         STM   RACB,R13,XRBESA(@05)                                1091
*   R13=ADDR(SP250SA);              /* POINT REG 13 AT USER SP S.A.  */
         LR    R13,@14                                             1092
*   GEN(SYNCH (15));                /* SYNCH TO INTERFACE ROUTINE    */
         SYNCH (15)
*   LM(RACB,R13,XRBESA);            /* RESTORE RESTARTS REGISTERS    */
         L     @14,PSATOLD                                         1094
         L     @14,TCBRBP(,@14)                                    1094
         LM    RACB,R13,XRBESA(@14)                                1094
*   RESPECIFY                                                      1095
*    (R0,                                                          1095
*     R1,                                                          1095
*     R15) UNRESTRICTED;                                           1095
*   IF RPLRTNCD^=ZERO THEN          /* IF ANY ERRORS ON PUT          */
         L     @05,MWASP250                                        1096
         CLI   RPLRTNCD+72(@05),0                                  1096
         BE    @RF01096                                            1096
*     DO;                                                          1097
*       RSRETCD2=RSERR183;          /* INDICATE PUT ERROR            */
         L     @05,RSTWAPTR                                        1098
         MVI   RSRETCD2(@05),X'B7'                                 1098
*       CALL ERREXIT;               /* ISSUE MESSAGE AND EXIT        */
         BAL   @14,ERREXIT                                         1099
*     END;                                                         1100
*   RESPECIFY                                                      1101
*     RET RESTRICTED;                                              1101
@RF01096 DS    0H                                                  1102
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @05,RETCONT                                         1102
         LR    @15,@05                                             1102
         SLA   @15,2                                               1102
         L     RET,RETSAVE-4(@15)                                  1102
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               1103
         ST    @05,RETCONT                                         1103
*   RESPECIFY                                                      1104
*     RET UNRESTRICTED;                                            1104
*   END PUTRTN;                                                    1105
@EL00015 DS    0H                                                  1105
@EF00015 DS    0H                                                  1105
@ER00015 BR    @14                                                 1105
*VERIFY:                                                           1106
*                                                                  1106
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - ISSUES A VERIFY REQUEST TO RECORD MANAGEMENT TO     */
*/*              TO SET THE HIGH USED RBA.                           */
*/*   INPUT    - A POINTER TO THE CURRENT AMBL IN AMBLPTR            */
*/*   OUTPUT   - THE ARDBS ARE SET TO THEIR HIGH USED RBA            */
*/*                                                                  */
*/********************************************************************/
*                                                                  1106
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1106
VERIFY   DS    0H                                                  1107
*   RESPECIFY                                                      1107
*     RET RESTRICTED;                                              1107
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               1108
         AL    @15,RETCONT                                         1108
         ST    @15,RETCONT                                         1108
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               1109
         ST    RET,RETSAVE-4(@15)                                  1109
*   RESPECIFY                                                      1110
*     RET UNRESTRICTED;                                            1110
*   CALL IOSAVE;                    /* SAVE CONTROL BLOCK STATUS     */
         BAL   @14,IOSAVE                                          1111
*   IFGRPL=IFGRPL&&IFGRPL;          /* CLEAR THE RPL                 */
         L     @05,MWASP250                                        1112
         LA    @15,72                                              1112
         ALR   @15,@05                                             1112
         XC    IFGRPL(76,@15),IFGRPL(@15)                          1112
*   RPLCNV=ON;                      /* CONTROL INTERVAL ACCESS       */
         OI    RPLCNV(@15),B'00100000'                             1113
*   RPLSEQ=ON;                      /* SEQUENTIAL PROCESSING         */
         OI    RPLSEQ(@15),B'00100000'                             1114
*   RPLDACB=ADDR(IFGACB);           /* SET ADDRESS OF ACB            */
         ST    RACB,RPLDACB(,@15)                                  1115
*   RESPECIFY                                                      1116
*    (R0,                                                          1116
*     R1,                                                          1116
*     R15) RESTRICTED;                                             1116
*   R0=RPLVERIF;                    /* INDICATE VERIFY REQUEST       */
         ST    @15,@TF00001                                        1117
         LA    R0,6                                                1117
*   R1=ADDR(IFGRPL);                /* POINT REGISTER 1 AT RPL       */
         L     R1,@TF00001                                         1118
*   R15=BIBINTRF;                   /* POINT REG 15 AT INTERFACE RTN */
         L     @14,OPWBIB(,RCORE)                                  1119
         L     R15,BIBINTRF(,@14)                                  1119
*   STM(RACB,R13,XRBESA);           /* SAVE REGISTERS IN RB SAVEAREA */
         L     @14,PSATOLD                                         1120
         L     @14,TCBRBP(,@14)                                    1120
         STM   RACB,R13,XRBESA(@14)                                1120
*   R13=ADDR(SP250SA);              /* POINT REG 13 AT USER SP S.A.  */
         LR    R13,@05                                             1121
*   GEN(SYNCH (15));                /* SYNCH TO INTERFACE ROUTINE    */
         SYNCH (15)
*   LM(RACB,R13,XRBESA);            /* RESTORE RESTARTS REGISTERS    */
         L     @14,PSATOLD                                         1123
         L     @14,TCBRBP(,@14)                                    1123
         LM    RACB,R13,XRBESA(@14)                                1123
*   RESPECIFY                                                      1124
*    (R0,                                                          1124
*     R1,                                                          1124
*     R15) UNRESTRICTED;                                           1124
*   IF RPLRTNCD^=ZERO THEN          /* IF ANY ERRORS ON VERIFY       */
         L     @05,MWASP250                                        1125
         CLI   RPLRTNCD+72(@05),0                                  1125
         BE    @RF01125                                            1125
*     DO;                                                          1126
*       RSRETCD2=RSERR182;          /* INDICATE VERIFY ERROR         */
         L     @05,RSTWAPTR                                        1127
         MVI   RSRETCD2(@05),X'B6'                                 1127
*       CALL ERREXIT;               /* ISSUE MESSAGE AND EXIT        */
         BAL   @14,ERREXIT                                         1128
*     END;                                                         1129
*   CALL IORESTOR;                  /* RESTORE CONTROL BLOCK STATUS  */
@RF01125 BAL   @14,IORESTOR                                        1130
*   RESPECIFY                                                      1131
*     RET RESTRICTED;                                              1131
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @05,RETCONT                                         1132
         LR    @15,@05                                             1132
         SLA   @15,2                                               1132
         L     RET,RETSAVE-4(@15)                                  1132
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               1133
         ST    @05,RETCONT                                         1133
*   RESPECIFY                                                      1134
*    (R0,                                                          1134
*     R1,                                                          1134
*     RET,                                                         1134
*     R15) UNRESTRICTED;                                           1134
*   END VERIFY;                                                    1135
@EL00016 DS    0H                                                  1135
@EF00016 DS    0H                                                  1135
@ER00016 BR    @14                                                 1135
*IOSAVE:                                                           1136
*                                                                  1136
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - SAVES INFORMATION FROM THE USER CONTROL BLOCKS. THE */
*/*              AMBS ARE SAVED IN ENTIRETY AND THEN MODIFIED TO     */
*/*              OPERATE WITH THE RESOURCE POOL CREATED FOR RESTART. */
*/*   INPUT    - A POINTER TO THE CURRENT AMBL IN AMBLPTR            */
*/*   OUTPUT   - A RESTART STRUCTURE FOR THE CLUSTER FOR ISSUING R/M */
*/*              REQUESTS AGAINST THE RESTART RESOURCE POOL.         */
*/*                                                                  */
*/********************************************************************/
*                                                                  1136
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1136
IOSAVE   DS    0H                                                  1137
*   RESPECIFY                                                      1137
*     RET RESTRICTED;                                              1137
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               1138
         L     @05,RETCONT                                         1138
         ALR   @05,@15                                             1138
         ST    @05,RETCONT                                         1138
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @05,2                                               1139
         ST    RET,RETSAVE-4(@05)                                  1139
*   RESPECIFY                                                      1140
*     RET UNRESTRICTED;                                            1140
*                                                                  1140
*   /*****************************************************************/
*   /*                                                               */
*   /* SAVE FIELDS FROM CONTROL BLOCKS SUBJECT TO CHANGE             */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1141
*   MWAACBEX=ACBEXLST;              /* SAVE THE ACB EXIT LIST FIELD  */
         L     @05,ACBEXLST(,RACB)                                 1141
         ST    @05,MWAACBEX                                        1141
*   ACBEXLST=ZERO;                  /* CLEAR THE ACB EXLST FIELD     */
         SLR   @05,@05                                             1142
         ST    @05,ACBEXLST(,RACB)                                 1142
*   MWAAMBLQ=ACBAMBL->AMBLQ;        /* SAVE THE AMBL QUALIFIER       */
         L     @05,ACBAMBL(,RACB)                                  1143
         MVC   MWAAMBLQ(1),AMBLQ(@05)                              1143
*   ACBAMBL->AMBLLSR=ON;            /* SET THE AMBL LSR FLAG         */
         OI    AMBLLSR(@05),B'00100000'                            1144
*   MWAFLG1=ACBAMBL->AMBLFLG1;      /* SAVE THE FLAGS FROM THE AMBL  */
         MVC   MWAFLG1(1),AMBLFLG1(@05)                            1145
*   ACBAMBL->AMBLFLG1=ZERO;         /* RESET THE FLAGS AND           */
         MVI   AMBLFLG1(@05),X'00'                                 1146
*   ACBAMBL->AMBLFULL=ON;           /* INDICATE FULL ACCESS OK       */
*   ACBAMBL->AMBLCINV=ON;           /* INDICATE CINV ACCESS OK       */
         OI    AMBLFULL(@05),B'11000000'                           1148
*   DO LC10=ONE TO AMBLNUM BY ONE;  /* SETUP ALL AMBS FOR LSR        */
*                                                                  1149
         LR    LC10,@15                                            1149
         B     @DE01149                                            1149
@DL01149 DS    0H                                                  1150
*     /***************************************************************/
*     /*                                                             */
*     /* SAVE THE ENTIRE AMB AND PREPARE IT FOR LSR PROCESSING       */
*     /*                                                             */
*     /***************************************************************/
*                                                                  1150
*     AMBPTR=AMBPTRS(LC10);         /* POINT TO CURRENT AMB          */
         LR    @06,LC10                                            1150
         SLA   @06,2                                               1150
         L     @05,AMBLPTR                                         1150
         L     @06,AMBPTRS-4(@06,@05)                              1150
         ST    @06,AMBPTR                                          1150
*     IF LC10=ONE THEN              /* IF THIS IS THE FIRST PASS     */
         C     LC10,@CF00053                                       1151
         BNE   @RF01151                                            1151
*       DO;                         /*                       @ZA27908*/
*         MWAAMBD=IDAAMB;           /* THEN SAVE THE DATA AMB        */
         MVC   MWAAMBD(124),IDAAMB(@06)                            1153
*         MWADIBUF=DIWBUFC;         /* SAVE INSERT BUFC PTR  @ZA27908*/
         L     @06,AMBIWA(,@06)                                    1154
         L     @05,DIWBUFC(,@06)                                   1154
         ST    @05,MWADIBUF                                        1154
*         DIWBUFC=ZERO;             /* ZERO INSERT BUFC PTR  @ZA27908*/
         SLR   @05,@05                                             1155
         ST    @05,DIWBUFC(,@06)                                   1155
*       END;                        /*                       @ZA27908*/
*     ELSE                          /* OTHERWISE,                    */
*       MWAAMBI=IDAAMB;             /* SAVE THE INDEX AMB            */
         B     @RC01151                                            1157
@RF01151 L     @06,AMBPTR                                          1157
         MVC   MWAAMBI(124),IDAAMB(@06)                            1157
*     AMBCREAT=OFF;                 /* SET CREATE MODE BIT OFF       */
@RC01151 L     @06,AMBPTR                                          1158
         NI    AMBCREAT(@06),B'01111111'                           1158
*     AMBEXEX=AMBEXEX&&AMBEXEX;     /* CLEAR AMB EXCEPTION EXIT NAME */
         XC    AMBEXEX(8,@06),AMBEXEX(@06)                         1159
*     AMBAFLG=ZERO;                 /* CLEAR THE ADDITIONAL FLAGS    */
         MVI   AMBAFLG(@06),X'00'                                  1160
*     AMBLSR=ON;                    /* SET THE AMB LSR FLAG          */
         OI    AMBLSR(@06),B'01000000'                             1161
*     AMBUBF=OFF;                   /* SET NO USER BUFFERING @ZA30503*/
         NI    AMBUBF(@06),B'11111011'                             1162
*     AMBBUFC=VSRTBUFH;             /* POINT AMB TO BUFFER HEADER    */
         L     @05,PSATOLD                                         1163
         L     @05,TCBJSCB(,@05)                                   1163
         L     @05,JSCBSHR(,@05)                                   1163
         L     @05,VATVPTR(,@05)                                   1163
         L     @15,VSRTBUFH(,@05)                                  1163
         ST    @15,AMBBUFC(,@06)                                   1163
*     AMBPH=VSRTPLHH;               /* POINT AMB TO PLH POOL         */
         L     @15,VSRTPLHH(,@05)                                  1164
         ST    @15,AMBPH(,@06)                                     1164
*     AMBCPA=VSRTCPAH;              /* POINT AMB TO CPA HEADER       */
         L     @15,VSRTCPAH(,@05)                                  1165
         ST    @15,AMBCPA(,@06)                                    1165
*     AMBWSHD=VSRTWAH;              /* POINT AMB TO WS HEADER        */
         L     @05,VSRTWAH(,@05)                                   1166
         ST    @05,AMBWSHD(,@06)                                   1166
*                                                                  1167
*     /***************************************************************/
*     /*                                                             */
*     /* THE FOLLOWING SECTION OF CODE IS A COPY OF SIMILAR CODE IN  */
*     /* THE CHNBLKS SUBROUTINE OF IDA0192Z WHICH IS USED TO SET UP  */
*     /* THE AMB FOR LSR PROCESSING                                  */
*     /*                                                             */
*     /***************************************************************/
*                                                                  1167
*     RESPECIFY                                                    1167
*       R9 RESTRICTED;              /*                       @ZA27961*/
*     IF AMBTYPE=AMBINDEX&          /* IF INDEX AMB AND      @ZA27961*/
*         AMDDST=ON THEN            /* SEQ SET W/DATA        @ZA27961*/
         TM    AMBTYPE(@06),B'01000000'                            1168
         BNO   @RF01168                                            1168
         L     @08,AMBDSB(,@06)                                    1168
         TM    AMDDST(@08),B'10000000'                             1168
         BNO   @RF01168                                            1168
*       DO;                         /* CHAN PROG SPACE RQRD  @ZA27961*/
*         R9=MIN((EDBLPMBC+LPMBLEN)->LPMBLKSZ,LPMBLKSZ);/*   @ZA27961*/
         L     @15,AMBPTR                                          1170
         L     @01,AMBEDB(,@15)                                    1170
         L     @15,EDBLPMBC(,@01)                                  1170
         LH    @14,LPMBLEN(,@15)                                   1170
         ALR   @14,@15                                             1170
         L     @11,LPMBLKSZ(,@14)                                  1170
         L     @10,LPMBLKSZ(,@15)                                  1170
         LR    R9,@10                                              1170
         CR    R9,@11                                              1170
         BNH   *+6
         LR    R9,@11                                              1170
*         R9=AMDCINV/R9;            /* ESTABLISH BLKS PER CI @ZA27961*/
         L     @00,AMDCINV(,@08)                                   1171
         SRDA  @00,32                                              1171
         DR    @00,R9                                              1171
         LR    R9,@01                                              1171
*         MAXBLKS=MAX((EDBLPMBC+LPMBLEN)->LPMBLKTR,LPMBLKTR,R9);/* 1172
*                                      MAX NUMBER OF BLOCKS  @ZA27961*/
         LH    MAXBLKS,LPMBLKTR(,@14)                              1172
         LH    @08,LPMBLKTR(,@15)                                  1172
         CR    MAXBLKS,@08                                         1172
         BNL   *+6
         LR    MAXBLKS,@08                                         1172
         CR    MAXBLKS,R9                                          1172
         BNL   *+6
         LR    MAXBLKS,R9                                          1172
*         WRK1=MAX((EDBLPMBC+LPMBLEN)->LPMBLKSZ,LPMBLKSZ);/* MAXIMUM
*                                      BLOCKSIZE             @ZA27961*/
         CR    @11,@10                                             1173
         BNL   *+6
         LR    @11,@10                                             1173
         LR    WRK1,@11                                            1173
*       END;                        /* END SS W/DATA         @ZA27961*/
*     ELSE                          /* OTHERWISE,                    */
*       DO;                         /* FOR NOT IMBEDDED INDX @ZA27961*/
         B     @RC01168                                            1175
@RF01168 DS    0H                                                  1176
*         R9=AMDCINV/LPMBLKSZ;      /* BLOCKS PER CI         @ZA27961*/
         L     @15,AMBPTR                                          1176
         L     @01,AMBDSB(,@15)                                    1176
         L     @15,AMBEDB(,@15)                                    1176
         L     @15,EDBLPMBC(,@15)                                  1176
         L     @14,LPMBLKSZ(,@15)                                  1176
         L     @00,AMDCINV(,@01)                                   1176
         SRDA  @00,32                                              1176
         DR    @00,@14                                             1176
         LR    R9,@01                                              1176
*         MAXBLKS=MAX(LPMBLKTR,R9); /* GET MAX NUMBER BLOCKS @ZA27961*/
         LH    MAXBLKS,LPMBLKTR(,@15)                              1177
         CR    MAXBLKS,R9                                          1177
         BNL   *+6
         LR    MAXBLKS,R9                                          1177
*         WRK1=LPMBLKSZ;            /* GET BLOCKSIZE         @ZA27961*/
         LR    WRK1,@14                                            1178
*       END;                        /* END NON IMBED         @ZA27961*/
*     WRK1=(WRK1+IOPAGESZ-1)&-IOPAGESZ;/* ROUND UP TO 2K     @ZA27961*/
@RC01168 LR    @08,WRK1                                            1180
         SL    @08,@CF05429                                        1180
         N     @08,@CF05430                                        1180
         LR    WRK1,@08                                            1180
*     WRK1=(WRK1/IOPAGESZ+1)*K4;    /* VPL/IDAL SIZE / BLOCK @ZA27961*/
         LR    @00,WRK1                                            1181
         SRDA  @00,32                                              1181
         D     @00,@CF05131                                        1181
         AL    @01,@CF00053                                        1181
         SLA   @01,2                                               1181
         LR    WRK1,@01                                            1181
*     WRK1=(WRK1*R9);               /* VPL/IDAL TOTAL SIZE   @ZA27961*/
         LR    @01,R9                                              1182
         MR    @00,WRK1                                            1182
         LR    WRK1,@01                                            1182
*     AMBSZCP=LENGTH(IDACPA)+       /* LENGTH BASE SECTION   @ZA27961*/
*         (TWO*WRK1)+               /* ADD IDAL PLUS VPL     @ZA27961*/
*         ((R9*K5+K4-1)&-K4)+       /* ADD SEARCH ID ARGUMENT FOR  1183
*                                      WORST CASE FORMAT WRITE     1183
*                                                            @ZA27961*/
*         (MAXBLKS*K8);             /* ADD COUNT FIELDS FOR FORMAT 1183
*                                      WRITE CHANNEL PROGRAM @ZA27961*/
         L     @08,AMBPTR                                          1183
         LR    @15,WRK1                                            1183
         ALR   @15,@15                                             1183
         AL    @15,@CF02130                                        1183
         LA    @14,5                                               1183
         LR    @01,R9                                              1183
         MR    @00,@14                                             1183
         SL    @01,@CF05431                                        1183
         N     @01,@CF05432                                        1183
         ALR   @15,@01                                             1183
         LR    @11,MAXBLKS                                         1183
         SLA   @11,3                                               1183
         ALR   @15,@11                                             1183
         STH   @15,AMBSZCP(,@08)                                   1183
*     AMBSZRD=(MAXBLKS+K5)*K8;      /* SET LENGTH OF RD CCWS @ZA27961*/
         ALR   @14,MAXBLKS                                         1184
         SLA   @14,3                                               1184
         STH   @14,AMBSZRD(,@08)                                   1184
*     AMBSZWR=(K3*R9+K3)*K8;        /* LENGTH OF WRT CHAN PGM      1185
*                                                            @ZA27961*/
         LA    @05,3                                               1185
         LR    @01,R9                                              1185
         MR    @00,@05                                             1185
         ALR   @01,@05                                             1185
         SLA   @01,3                                               1185
         STH   @01,AMBSZWR(,@08)                                   1185
*     AMBSZFW=(TWO*(MAXBLKS+R9)+K3)*K8;/* WORST CASE FMT WRT @ZA27961*/
         LR    @15,MAXBLKS                                         1186
         ALR   @15,R9                                              1186
         ALR   @15,@15                                             1186
         ALR   @15,@05                                             1186
         SLA   @15,3                                               1186
         STH   @15,AMBSZFW(,@08)                                   1186
*   END;                            /* END DO LOOP           @ZA27961*/
         AL    LC10,@CF00053                                       1187
@DE01149 L     @06,AMBLPTR                                         1187
         CH    LC10,AMBLNUM(,@06)                                  1187
         BNH   @DL01149                                            1187
*   RESPECIFY                                                      1188
*     R9 UNRESTRICTED;              /*                       @ZA27961*/
*   RESPECIFY                                                      1189
*     RET RESTRICTED;                                              1189
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @05,RETCONT                                         1190
         LR    @15,@05                                             1190
         SLA   @15,2                                               1190
         L     RET,RETSAVE-4(@15)                                  1190
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               1191
         ST    @05,RETCONT                                         1191
*   RESPECIFY                                                      1192
*     RET UNRESTRICTED;                                            1192
*   END IOSAVE;                                                    1193
@EL00017 DS    0H                                                  1193
@EF00017 DS    0H                                                  1193
@ER00017 BR    @14                                                 1193
*IORESTOR:                                                         1194
*                                                                  1194
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - RESTORES THE INFORMATION IN THE USER CONTROL BLOCKS */
*/*   INPUT    - A POINTER TO THE CURRENT AMBL IN AMBLPTR            */
*/*   OUTPUT   - THE AMBS, AMBL, AND ACB ARE RESTORED                */
*/*                                                                  */
*/********************************************************************/
*                                                                  1194
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1194
IORESTOR DS    0H                                                  1195
*   RESPECIFY                                                      1195
*     RET RESTRICTED;                                              1195
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               1196
         L     @05,RETCONT                                         1196
         ALR   @05,@15                                             1196
         ST    @05,RETCONT                                         1196
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @05,2                                               1197
         ST    RET,RETSAVE-4(@05)                                  1197
*   RESPECIFY                                                      1198
*     RET UNRESTRICTED;                                            1198
*   ACBEXLST=MWAACBEX;              /* RESTORE ACB EXIT LIST FIELD   */
         L     @05,MWAACBEX                                        1199
         ST    @05,ACBEXLST(,RACB)                                 1199
*   ACBAMBL->AMBLQ=MWAAMBLQ;        /* RESTORE THE AMBL QUALIFIER    */
         L     @05,ACBAMBL(,RACB)                                  1200
         MVC   AMBLQ(1,@05),MWAAMBLQ                               1200
*   ACBAMBL->AMBLFLG1=MWAFLG1;      /* RESTORE THE AMBL FLAGS        */
         MVC   AMBLFLG1(1,@05),MWAFLG1                             1201
*   DO LC11=ONE TO AMBLNUM BY ONE;  /* RESTORE ALL AMBS              */
         LR    LC11,@15                                            1202
         B     @DE01202                                            1202
@DL01202 DS    0H                                                  1203
*     IF LC11=ONE THEN              /* IF THIS IS THE FIRST PASS     */
         C     LC11,@CF00053                                       1203
         BNE   @RF01203                                            1203
*       DO;                         /* PREPARE SAVED DATA AMB & RST. */
*         ADDR(MWAAMBD)->AMBDEBPT=AMBLDTA->AMBDEBPT;/* SAVE DEB PTR  */
         LA    @15,MWAAMBD                                         1205
         L     @01,AMBLPTR                                         1205
         L     @14,AMBLDTA(,@01)                                   1205
         L     @11,AMBDEBPT(,@14)                                  1205
         ST    @11,AMBDEBPT(,@15)                                  1205
*         ADDR(MWAAMBD)->AMBEDB=AMBLDTA->AMBEDB;/* SAVE EDB POINTER  */
         L     @11,AMBEDB(,@14)                                    1206
         ST    @11,AMBEDB(,@15)                                    1206
*         AMBLDTA->IDAAMB=MWAAMBD;  /* THEN RESTORE THE DATA AMB     */
         MVC   IDAAMB(124,@14),MWAAMBD                             1207
*         ADDR(MWAAMBD)->AMBIWA->DIWBUFC=MWADIBUF;/* RESTORE INSERT
*                                      WORK AREA BUFC PTR    @ZA27908*/
         L     @01,AMBIWA(,@15)                                    1208
         L     @00,MWADIBUF                                        1208
         ST    @00,DIWBUFC(,@01)                                   1208
*       END;                        /* END RESTORE OF DATA AMB       */
*     ELSE                          /* OTHERWISE,                    */
*       DO;                         /* PREPARE SAVED INDEX AMB & RST */
         B     @RC01203                                            1210
@RF01203 DS    0H                                                  1211
*         ADDR(MWAAMBI)->AMBDEBPT=AMBLIX->AMBDEBPT;/* SAVE DEB PTR   */
         LA    @15,MWAAMBI                                         1211
         L     @01,AMBLPTR                                         1211
         L     @14,AMBLIX(,@01)                                    1211
         L     @11,AMBDEBPT(,@14)                                  1211
         ST    @11,AMBDEBPT(,@15)                                  1211
*         ADDR(MWAAMBI)->AMBEDB=AMBLIX->AMBEDB;/* SAVE EDB POINTER   */
         L     @11,AMBEDB(,@14)                                    1212
         ST    @11,AMBEDB(,@15)                                    1212
*         AMBLIX->IDAAMB=MWAAMBI;   /* RESTORE THE INDEX AMB         */
         MVC   IDAAMB(124,@14),MWAAMBI                             1213
*       END;                        /* END RESTORE OF INDEX AMB      */
*   END;                            /* END RESTORE OF AMBS           */
@RC01203 AL    LC11,@CF00053                                       1215
@DE01202 L     @01,AMBLPTR                                         1215
         CH    LC11,AMBLNUM(,@01)                                  1215
         BNH   @DL01202                                            1215
*   RESPECIFY                                                      1216
*     RET RESTRICTED;                                              1216
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @05,RETCONT                                         1217
         LR    @15,@05                                             1217
         SLA   @15,2                                               1217
         L     RET,RETSAVE-4(@15)                                  1217
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               1218
         ST    @05,RETCONT                                         1218
*   RESPECIFY                                                      1219
*     RET UNRESTRICTED;                                            1219
*   END IORESTOR;                                                  1220
@EL00018 DS    0H                                                  1220
@EF00018 DS    0H                                                  1220
@ER00018 BR    @14                                                 1220
*FREECORE:                                                         1221
*                                                                  1221
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - FREE THE CORE OBTAINED WHILE PROCESSING IN THE OPEN */
*/*              MODULES.                                            */
*/*   INPUT    - A POINTER TO THE CURRENT VCRT IN VCRTPTR            */
*/*   OUTPUT   - ALL RESIDUAL CORE IS FREED                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  1221
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1221
FREECORE DS    0H                                                  1222
*   RESPECIFY                                                      1222
*    (R0,                                                          1222
*     R1,                                                          1222
*     RET,                                                         1222
*     R15) RESTRICTED;                                             1222
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @05,1                                               1223
         L     @11,RETCONT                                         1223
         ALR   @11,@05                                             1223
         ST    @11,RETCONT                                         1223
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @11,2                                               1224
         ST    RET,RETSAVE-4(@11)                                  1224
*   RESPECIFY                                                      1225
*     RET UNRESTRICTED;                                            1225
*   DO LC12=ONE TO VCROPNCT BY ONE; /* PROCESS ALL OPEN ENTRIES      */
         LA    @14,1                                               1226
         LR    LC12,@14                                            1226
         B     @DE01226                                            1226
@DL01226 DS    0H                                                  1227
*     HEBSAPTR=VCRHEBS(LC12);       /* GET POINTER TO HEB SAVE AREA  */
         LR    @14,LC12                                            1227
         SLA   @14,3                                               1227
         L     @11,VCRTPTR                                         1227
         L     @11,VCROPN(,@11)                                    1227
         AL    @11,@CF05420                                        1227
         L     @14,VCRHEBS(@14,@11)                                1227
         ST    @14,HEBSAPTR                                        1227
*     DO WHILE HEBSAPTR^=ZERO;      /* CHECK ALL HEB SAVE HEADERS    */
         B     @DE01228                                            1228
@DL01228 DS    0H                                                  1229
*       IF VCRHFREL=ON THEN         /* IS THE CORE TO BE FREED       */
         L     @14,HEBSAPTR                                        1229
         TM    VCRHFREL(@14),B'01000000'                           1229
         BNO   @RF01229                                            1229
*         DO LC13=ONE TO VCRHNENT BY ONE;/* PROCESS EACH ELEMENT     */
         LA    LC13,1                                              1230
         B     @DE01230                                            1230
@DL01230 DS    0H                                                  1231
*           LM(R0,R1,VCRHEFMN(LC13));/* LOAD FREEMAIN REGISTERS      */
         LR    @14,LC13                                            1231
         MH    @14,@CH00118                                        1231
         L     @07,HEBSAPTR                                        1231
         ALR   @07,@14                                             1231
         AL    @07,@CF05443                                        1231
         LM    R0,R1,VCRHEFMN-8(@07)                               1231
*           GEN(FREEMAIN R,LV=(0),A=(1));/* FREE THE STORAGE         */
         FREEMAIN R,LV=(0),A=(1)
*         END;                      /* END OF FREEMAIN LOOP          */
         AL    LC13,@CF00053                                       1233
@DE01230 L     @14,HEBSAPTR                                        1233
         CH    LC13,VCRHNENT(,@14)                                 1233
         BNH   @DL01230                                            1233
*       HEBSAPTR=VCRHNEXT;          /* POINT TO NEXT HEB SAVE HEADER */
@RF01229 L     @14,HEBSAPTR                                        1234
         L     @14,VCRHNEXT(,@14)                                  1234
         ST    @14,HEBSAPTR                                        1234
*     END;                          /* END OF HEB SAVE AREA CHAIN    */
@DE01228 L     @14,HEBSAPTR                                        1235
         LTR   @14,@14                                             1235
         BNZ   @DL01228                                            1235
*   END;                            /* END OF OPEN ENTRIES           */
         AL    LC12,@CF00053                                       1236
@DE01226 L     @14,VCRTPTR                                         1236
         CH    LC12,VCROPNCT(,@14)                                 1236
         BNH   @DL01226                                            1236
*   DO LC14=ONE TO VCRUPGCT BY ONE; /* PROCESS ALL UPGRADE ENTRIES   */
         LA    LC14,1                                              1237
         B     @DE01237                                            1237
@DL01237 DS    0H                                                  1238
*     HEBSAPTR=VCRUHEBS(LC14);      /* GET POINTER TO HEB SAVE AREA  */
         LR    @14,LC14                                            1238
         SLA   @14,3                                               1238
         L     @11,VCRTPTR                                         1238
         L     @11,VCRUPG(,@11)                                    1238
         AL    @11,@CF05420                                        1238
         L     @14,VCRUHEBS(@14,@11)                               1238
         ST    @14,HEBSAPTR                                        1238
*     DO WHILE HEBSAPTR^=ZERO;      /* CHECK ALL HEB SAVE HEADERS    */
         B     @DE01239                                            1239
@DL01239 DS    0H                                                  1240
*       IF VCRHFREL=ON THEN         /* IS THE CORE TO BE FREED       */
         L     @14,HEBSAPTR                                        1240
         TM    VCRHFREL(@14),B'01000000'                           1240
         BNO   @RF01240                                            1240
*         DO LC15=ONE TO VCRHNENT BY ONE;/* PROCESS EACH ELEMENT     */
         LA    LC15,1                                              1241
         B     @DE01241                                            1241
@DL01241 DS    0H                                                  1242
*           LM(R0,R1,VCRHEFMN(LC15));/* LOAD FREEMAIN REGISTERS      */
         LR    @14,LC15                                            1242
         MH    @14,@CH00118                                        1242
         L     @07,HEBSAPTR                                        1242
         ALR   @07,@14                                             1242
         AL    @07,@CF05443                                        1242
         LM    R0,R1,VCRHEFMN-8(@07)                               1242
*           GEN(FREEMAIN R,LV=(0),A=(1));/* FREE THE STORAGE         */
         FREEMAIN R,LV=(0),A=(1)
*         END;                      /* END OF FREEMAIN LOOP          */
         AL    LC15,@CF00053                                       1244
@DE01241 L     @14,HEBSAPTR                                        1244
         CH    LC15,VCRHNENT(,@14)                                 1244
         BNH   @DL01241                                            1244
*       HEBSAPTR=VCRHNEXT;          /* POINT TO NEXT HEB SAVE HEADER */
@RF01240 L     @14,HEBSAPTR                                        1245
         L     @14,VCRHNEXT(,@14)                                  1245
         ST    @14,HEBSAPTR                                        1245
*     END;                          /* END OF HEB SAVE AREA CHAIN    */
@DE01239 L     @14,HEBSAPTR                                        1246
         LTR   @14,@14                                             1246
         BNZ   @DL01239                                            1246
*   END;                            /* END OF UPGRADE ENTRIES        */
         AL    LC14,@CF00053                                       1247
@DE01237 L     @14,VCRTPTR                                         1247
         CH    LC14,VCRUPGCT(,@14)                                 1247
         BNH   @DL01237                                            1247
*   OPWVSMPL=OPWVSMPL&&OPWVSMPL;    /* CLEAR VSM PARAMETER LIST      */
         XC    OPWVSMPL(16,RCORE),OPWVSMPL(RCORE)                  1248
*   OPWVMTYP=FREESPH;               /* FREE EXCESS SPACE IN SPHERE   */
         MVI   OPWVMTYP(RCORE),X'83'                               1249
*   CALL IDA0192M;                  /* CALL VIRTUAL STORAGE MANAGER  */
         L     @15,@CV05282                                        1250
         BALR  @14,@15                                             1250
*   OPWCSL=BIBCSL;                  /* TRANSFER CSL POINTER TO OPW   */
         L     @14,OPWBIB(,RCORE)                                  1251
         L     @05,BIBCSL(,@14)                                    1251
         ST    @05,OPWCSL(,RCORE)                                  1251
*   BIBCSL=ZERO;                    /* CLEAR CSL POINTER IN BIB      */
         SLR   @05,@05                                             1252
         ST    @05,BIBCSL(,@14)                                    1252
*   DO LC16=ONE TO LENGTH(OPWSAVE)/FWORDLEN;/* FREE ALL SAVE LISTS   */
         LA    LC16,1                                              1253
@DL01253 DS    0H                                                  1254
*     DO WHILE SLPTR(LC16)^=ZERO;   /* FREE ALL SAVE LISTS IN CHAIN  */
         B     @DE01254                                            1254
@DL01254 DS    0H                                                  1255
*       R0=SLR0;                    /* LOAD REG 0 WITH SP AND LENGTH */
         LR    @14,LC16                                            1255
         SLA   @14,2                                               1255
         L     @11,SLPTR-4(@14,RCORE)                              1255
         L     R0,SLR0(,@11)                                       1255
*       R1=SLPTR(LC16);             /* LOAD REG 1 WITH ADDRESS       */
         LR    R1,@11                                              1256
*       SLPTR(LC16)=SLNXPTR;        /* GET POINTER TO NEXT LIST      */
         L     @11,SLNXPTR(,@11)                                   1257
         ST    @11,SLPTR-4(@14,RCORE)                              1257
*       GEN(FREEMAIN R,LV=(0),A=(1));/* FREE THE SAVE LIST CORE      */
         FREEMAIN R,LV=(0),A=(1)
*     END;                          /* END LOOP THROUGH CHAIN        */
@DE01254 LR    @14,LC16                                            1259
         SLA   @14,2                                               1259
         L     @14,SLPTR-4(@14,RCORE)                              1259
         LTR   @14,@14                                             1259
         BNZ   @DL01254                                            1259
*   END;                            /* END LOOP THRU OPW POINTERS    */
         AL    LC16,@CF00053                                       1260
         C     LC16,@CF00145                                       1260
         BNH   @DL01253                                            1260
*   RESPECIFY                                                      1261
*     RET RESTRICTED;                                              1261
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @05,RETCONT                                         1262
         LR    @11,@05                                             1262
         SLA   @11,2                                               1262
         L     RET,RETSAVE-4(@11)                                  1262
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               1263
         ST    @05,RETCONT                                         1263
*   RESPECIFY                                                      1264
*    (R0,                                                          1264
*     R1,                                                          1264
*     RET,                                                         1264
*     R15) UNRESTRICTED;                                           1264
*   END FREECORE;                                                  1265
@EL00019 DS    0H                                                  1265
@EF00019 DS    0H                                                  1265
@ER00019 BR    @14                                                 1265
*DELVSRP:                                                          1266
*                                                                  1266
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - INTERFACES WITH IDA0192Y TO DELETE THE RESTART      */
*/*              RESOURCE POOL, RESTORES THE ORIGINAL VATVSRT        */
*/*              FIELD AND SETS THE NUMBER OF USED ENTRIES IN THE    */
*/*              CPA TO ZERO FOR LSR. RECORD MANAGEMENT WILL GET     */
*/*              CPA'S DYNAMICALLY FOR LSR PROCESSING.               */
*/*   INPUT    - POINTER TO THE RESTART VSRT IN VATVPTR              */
*/*              VATVSRT FIELD SAVED IN MWAVSRT                      */
*/*   OUTPUT   - RESTART LOCAL SHARED RESOURCES ARE DELETED          */
*/*                                                                  */
*/********************************************************************/
*                                                                  1266
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1266
DELVSRP  DS    0H                                                  1267
*   RESPECIFY                                                      1267
*     RET RESTRICTED;                                              1267
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               1268
         AL    @15,RETCONT                                         1268
         ST    @15,RETCONT                                         1268
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               1269
         ST    RET,RETSAVE-4(@15)                                  1269
*   RESPECIFY                                                      1270
*     RET UNRESTRICTED;                                            1270
*   RACB=ADDR(IDABLPRM);            /* POINT REG 2 AT THE PARM LIST  */
*                                                                  1271
         LA    @05,MWABLPRM                                        1271
         LR    RACB,@05                                            1271
*   /*****************************************************************/
*   /*                                                               */
*   /* INITIALIZE THE PARAMETER LIST AND CALL IDA0192Y               */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  1272
*   IDABLPRM=IDABLPRM&&IDABLPRM;    /* CLEAR THE PARAMETER LIST      */
         XC    IDABLPRM(52,@05),IDABLPRM(@05)                      1272
*   BLPACBID=BLPACBCD;              /* SET THE ID BYTE               */
         MVI   BLPACBID(@05),X'A0'                                 1273
*   BLPACBST=BLPSTCD;               /* SET THE SUBTYPE FIELD         */
         MVI   BLPACBST(@05),X'11'                                 1274
*   BLPFDBDC=ON;                    /* A DBDC REQUEST                */
*   BLPFDEL=ON;                     /* A DELETE REQUEST              */
*   BLPFLSR=ON;                     /* FOR LOCAL SHARED RESOURCES    */
         OI    BLPFDBDC(@05),B'10110000'                           1277
*   BLPDSORG=BLPDSOCD;              /* SET THE DSORG FIELD FOR VSAM  */
         MVI   BLPDSORG(@05),X'08'                                 1278
*   BLPOFLGS=BLPOFLCD;              /* SET THE OFLAGS FIELD          */
         MVI   BLPOFLGS(@05),X'02'                                 1279
*   CALL IDA0192Y;                  /* CALL THE BLDVRP ROUTINE       */
         L     @15,@CV05283                                        1280
         BALR  @14,@15                                             1280
*   RESPECIFY                                                      1281
*     RETCODE RESTRICTED;           /* SAVE THE RETURN CODE          */
*   RSTATRTN=IDARA05B;              /* NOTE IDA0A05B IN CONTROL      */
         LA    @14,MWAFCORE                                        1282
         MVC   RSTATRTN(4,@14),@CC05018                            1282
*   MWARETCD=RETCODE;               /* SAVE RETURN CODE FOR ANALYSIS */
         ST    RETCODE,MWARETCD                                    1283
*   RESPECIFY                                                      1284
*     RETCODE UNRESTRICTED;                                        1284
*   VATVSRT=MWAVSRT;                /* RESTORE THE VATVSRT FIELD     */
         L     @05,PSATOLD                                         1285
         L     @05,TCBJSCB(,@05)                                   1285
         L     @05,JSCBSHR(,@05)                                   1285
         MVC   VATVSRT(8,@05),MWAVSRT                              1285
*   RESPECIFY                                                      1286
*     IDAWSHD BASED(CPAHPTR);       /* BASE WSHD ON CPAHPTR  @ZA20487*/
*   IF VATVPTR^=ZERO THEN           /* IF A VSRT EXISTS FOR  @ZA20487
*                                      LSR THEN              @ZA20487*/
         L     @05,VATVPTR(,@05)                                   1287
         LTR   @05,@05                                             1287
         BZ    @RF01287                                            1287
*     DO;                           /*                       @ZA20487*/
         ST    @05,@TF00001                                        1288
*       CPAHPTR=VSRTCPAH;           /* GET FIRST CPA HEADER  @ZA20487*/
         L     @01,@TF00001                                        1289
         L     CPAHPTR,VSRTCPAH(,@01)                              1289
*       DO WHILE CPAHPTR^=ZERO;     /* LOOP THROUGH ALL CPAS @ZA20487*/
         B     @DE01290                                            1290
@DL01290 DS    0H                                                  1291
*         DO LC1=ONE TO DIM(WSHDSLT);/* LOOP THROUGH ELEMENTS      1291
*                                                            @ZA27961*/
         LA    @15,1                                               1291
         ST    @15,LC1                                             1291
@DL01291 DS    0H                                                  1292
*           WSHDSLT(LC1)=WSHDSLT(LC1)&&WSHDSLT(LC1);/* ZERO ELEMENT
*                                      IN WSHD               @ZA27961*/
         LR    @14,@15                                             1292
         SLA   @14,4                                               1292
         ALR   @14,CPAHPTR                                         1292
         XC    WSHDSLT-16(16,@14),WSHDSLT-16(@14)                  1292
*         END;                      /*                       @ZA27961*/
         AL    @15,@CF00053                                        1293
         ST    @15,LC1                                             1293
         C     @15,@CF00095                                        1293
         BNH   @DL01291                                            1293
*         WSHDNUS=ZERO;             /* SET ELEMENT CT TO 0   @ZA20487*/
         SLR   @15,@15                                             1294
         STH   @15,WSHDNUS(,CPAHPTR)                               1294
*         CPAHPTR=WSHDNEXT;         /* GET NEXT CPAH         @ZA20487*/
         L     @15,WSHDNEXT-1(,CPAHPTR)                            1295
         LA    @15,0(,@15)                                         1295
         LR    CPAHPTR,@15                                         1295
*       END;                        /*                       @ZA20487*/
@DE01290 LTR   CPAHPTR,CPAHPTR                                     1296
         BNZ   @DL01290                                            1296
*     END;                          /*                       @ZA20487*/
*   RESPECIFY                                                      1298
*     RET RESTRICTED;                                              1298
@RF01287 DS    0H                                                  1299
*   RET=RETSAVE(RETCONT);           /* GET RETURN ADDRESS            */
         L     @05,RETCONT                                         1299
         LR    @15,@05                                             1299
         SLA   @15,2                                               1299
         L     RET,RETSAVE-4(@15)                                  1299
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               1300
         ST    @05,RETCONT                                         1300
*   RESPECIFY                                                      1301
*     RET UNRESTRICTED;                                            1301
*   END DELVSRP;                                                   1302
@EL00020 DS    0H                                                  1302
@EF00020 DS    0H                                                  1302
@ER00020 BR    @14                                                 1302
*FIXDEBS:                                                          1303
*                                                                  1303
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - RESET THE DEBS FOR THE VSAM ACBS BY SETTING THE BIT */
*/*              (DEBXCDCB) IN THE DEB EXTENSION OFF AFTER ORDERING  */
*/*              THE DEB TO THE FRONT OF THE DEB CHAIN.              */
*/*   INPUT    - POINTER TO THE DEB CHAIN IN TCBDEB                  */
*/*   OUTPUT   - DEBS FOR VSAM ACBS ARE MOVED TO THE FRONT OF THE    */
*/*              DEB CHAIN AND THE DEBXCDCB BIT IS TURNED OFF.       */
*/*                                                                  */
*/********************************************************************/
*                                                                  1303
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1303
FIXDEBS  DS    0H                                                  1304
*   RESPECIFY                                                      1304
*    (RDEB,                                                        1304
*     RET) RESTRICTED;                                             1304
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               1305
         AL    @15,RETCONT                                         1305
         ST    @15,RETCONT                                         1305
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               1306
         ST    RET,RETSAVE-4(@15)                                  1306
*   RESPECIFY                                                      1307
*     RET UNRESTRICTED;                                            1307
*   RESPECIFY                                                      1308
*     DEBXTN BASED(DEBXTNP);        /* POINT TO REAL DEB EXTENSION   */
*   RDEB=TCBDEB;                    /* GET ADDRESS OF FIRST DEB      */
         L     @01,PSATOLD                                         1309
         L     RDEB,TCBDEB(,@01)                                   1309
*   PRIORDEB=ZERO;                  /* SET PREVIOUS DEB PTR TO ZERO  */
         SLR   PRIORDEB,PRIORDEB                                   1310
*   DO UNTIL RDEB=ZERO;             /* SCAN ALL DEBS                 */
@DL01311 DS    0H                                                  1312
*     IF DEBAMTYP=VSAMDEB&          /* IF THE DEB IS A VSAM DEB AND  */
*         DEBDCBAD->AMBID^=IDXAMB&  /* IF IT IS NOT AN AMB AND       */
*         PRIORDEB^=ZERO THEN       /* IF IT IS NOT AT HEAD OF CHAIN */
         LR    @10,RDEB                                            1312
         SL    @10,@CF02693                                        1312
         CLI   DEBAMTYP(@10),X'01'                                 1312
         BNE   @RF01312                                            1312
         L     @01,DEBDCBAD(,RDEB)                                 1312
         CLI   AMBID(@01),B'01000000'                              1312
         BE    @RF01312                                            1312
         LTR   PRIORDEB,PRIORDEB                                   1312
         BZ    @RF01312                                            1312
*       DO;                         /* PROCESS A DEB FOR AN ACB      */
*         PRIORDEB->DEBDEBB=DEBDEBB;/* POINT PREVIOUS DEB AT NEXT    */
         L     @15,DEBDEBB-1(,RDEB)                                1314
         LA    @15,0(,@15)                                         1314
         STCM  @15,7,DEBDEBB(PRIORDEB)                             1314
*         DEBDEBB=TCBDEB;           /* POINT THIS DEB AT HEAD DEB    */
         L     @14,PSATOLD                                         1315
         MVC   DEBDEBB(3,RDEB),TCBDEB+1(@14)                       1315
*         TCBDEB=RDEB;              /* POINT TCB AT THIS DEB         */
         ST    RDEB,TCBDEB(,@14)                                   1316
*         DEBXCDCB=OFF;             /* TURN OFF DEB NO PROCESS BIT   */
         L     @10,DEBXTNP(,@10)                                   1317
         NI    DEBXCDCB(@10),B'01111111'                           1317
*         RDEB=PRIORDEB->DEBDEBB;   /* POINT TO NEXT DEB IN CHAIN    */
         LR    RDEB,@15                                            1318
*       END;                                                       1319
*     ELSE                          /* NOT A VSAM ACB                */
*       DO;                                                        1320
         B     @RC01312                                            1320
@RF01312 DS    0H                                                  1321
*         PRIORDEB=RDEB;            /* SAVE DEB POINTER FOR CHAINING */
         LR    PRIORDEB,RDEB                                       1321
*         RDEB=DEBDEBB;             /* POINT TO THE NEXT DEB         */
         L     @10,DEBDEBB-1(,RDEB)                                1322
         LA    @10,0(,@10)                                         1322
         LR    RDEB,@10                                            1322
*       END;                                                       1323
*   END;                                                           1324
@RC01312 DS    0H                                                  1324
@DE01311 LTR   RDEB,RDEB                                           1324
         BNZ   @DL01311                                            1324
*   RESPECIFY                                                      1325
*     RET RESTRICTED;                                              1325
*   RET=RETSAVE(RETCONT);           /* LOAD RETURN ADDRESS           */
         L     @10,RETCONT                                         1326
         LR    @05,@10                                             1326
         SLA   @05,2                                               1326
         L     RET,RETSAVE-4(@05)                                  1326
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @10,0                                               1327
         ST    @10,RETCONT                                         1327
*   RESPECIFY                                                      1328
*    (RDEB,                                                        1328
*     RET) UNRESTRICTED;                                           1328
*   END FIXDEBS;                                                   1329
@EL00021 DS    0H                                                  1329
@EF00021 DS    0H                                                  1329
@ER00021 BR    @14                                                 1329
*BLDVMT:                                                           1330
*                                                                  1330
*/********************************************************************/
*/*                                                                  */
*/*   FUNCTION - LOCATES THE DSAB FOR THE CURRENT ACB AND CALLS      */
*/*              IDA0192F FOR THE VOLUME MOUNT FUNCTION.             */
*/*   INPUT    - POINTER TO THE OPW IN RCORE.                        */
*/*              POINTER TO THE TIOT ENTRY IN OPWTIOT.               */
*/*   OUTPUT   - VMTS ARE BUILT AND VOLUMES ARE MOUNTED.             */
*/*              THE POINTER TO THE DSAB IS PLACED IN DXDSABPT.      */
*/*                                                                  */
*/********************************************************************/
*                                                                  1330
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1330
BLDVMT   DS    0H                                                  1331
*   RESPECIFY                                                      1331
*     RET RESTRICTED;                                              1331
*   RETCONT=RETCONT+ONE;            /* BUMP CONTROL BY ONE           */
         LA    @15,1                                               1332
         AL    @15,RETCONT                                         1332
         ST    @15,RETCONT                                         1332
*   RETSAVE(RETCONT)=RET;           /* SAVE RETURN ADDRESS           */
         SLA   @15,2                                               1333
         ST    RET,RETSAVE-4(@15)                                  1333
*   RESPECIFY                                                      1334
*     RET UNRESTRICTED;                                            1334
*   OPWBCON=ZERO;                   /* RESET CONNECT TO BASE         */
         SLR   @05,@05                                             1335
         ST    @05,OPWBCON(,RCORE)                                 1335
*   AMBLPTR=PAMBLPTR;               /* POINT TO PRIMARY AMBL         */
         L     @05,PAMBLPTR                                        1336
         ST    @05,AMBLPTR                                         1336
*   DO UNTIL AMBLSCHN=ZERO;         /* MOUNT VOLUMES FOR ALL ACBS    */
@DL01337 DS    0H                                                  1338
*     DSABPTR=QDBFELMP;             /* GET PTR TO FIRST DSAB         */
         L     @05,PSATOLD                                         1338
         L     @05,TCBJSCB(,@05)                                   1338
         L     @05,JSCDSABQ(,@05)                                  1338
         L     @05,QDBFELMP(,@05)                                  1338
         ST    @05,DSABPTR                                         1338
*     DO WHILE OPWTIOT^=DSABTIOT;   /* GET CORRECT DSAB              */
         B     @DE01339                                            1339
@DL01339 DS    0H                                                  1340
*       IF DSABPTR=ZERO THEN        /* CHECK FOR END OF CHN          */
         L     @05,DSABPTR                                         1340
         LTR   @05,@05                                             1340
         BNZ   @RF01340                                            1340
*         DO;                       /* IF NO DSAB FOR ACB,           */
*           RSRETCD2=RSERR191;      /* SET ERROR CODE AND            */
         L     @05,RSTWAPTR                                        1342
         MVI   RSRETCD2(@05),X'BF'                                 1342
*           CALL ERREXIT;           /* EXIT MODULE                   */
         BAL   @14,ERREXIT                                         1343
*         END;                                                     1344
*       DSABPTR=DSABFCHN;           /* POINT TO NEXT DSAB            */
@RF01340 L     @05,DSABPTR                                         1345
         L     @05,DSABFCHN(,@05)                                  1345
         ST    @05,DSABPTR                                         1345
*     END;                                                         1346
@DE01339 L     @05,DSABPTR                                         1346
         CLC   OPWTIOT(4,RCORE),DSABTIOT(@05)                      1346
         BNE   @DL01339                                            1346
*     DXDSABAD=DSABPTR;             /* INIT DSAB POINTER IN FORCORE  */
         LA    @15,MWAFCORE                                        1347
         ST    @05,DXDSABAD(,@15)                                  1347
*     RESPECIFY                                                    1348
*       RETCODE RESTRICTED;                                        1348
*     CALL IDA0192F;                /* BUILD VMT AND MOUNT VOLUMES   */
         L     @15,@CV05281                                        1349
         BALR  @14,@15                                             1349
*     RSTATRTN=IDARA05B;            /* NOTE A05B BACK IN CONTROL     */
         LA    @14,MWAFCORE                                        1350
         MVC   RSTATRTN(4,@14),@CC05018                            1350
*     MWARETCD=RETCODE;             /* SAVE RETURN CODE FOR ANALYSIS */
         ST    RETCODE,MWARETCD                                    1351
*     IF RETCODE^=ZERO THEN         /* CHECK RETURN CODE FOR ERRORS  */
         LTR   RETCODE,RETCODE                                     1352
         BZ    @RF01352                                            1352
*       DO;                         /* ANY ERRORS THEN               */
*         RSRETCD2=RSERR191;        /* SET RETURN CODE               */
         L     @14,RSTWAPTR                                        1354
         MVI   RSRETCD2(@14),X'BF'                                 1354
*         CALL ERREXIT;             /* TAKE ERROR EXIT FROM MODULE   */
         BAL   @14,ERREXIT                                         1355
*       END;                                                       1356
*     RESPECIFY                                                    1357
*       RETCODE UNRESTRICTED;                                      1357
@RF01352 DS    0H                                                  1358
*     IF AMBLSCHN^=ZERO THEN        /* ANY MORE SECONDARY AMBLS      */
         SLR   @05,@05                                             1358
         L     @01,AMBLPTR                                         1358
         L     @15,AMBLSCHN(,@01)                                  1358
         CR    @15,@05                                             1358
         BE    @RF01358                                            1358
*       DO;                         /* YES                           */
*         AMBLPTR=AMBLSCHN;         /* POINT TO THE NEXT SECONDARY   */
         ST    @15,AMBLPTR                                         1360
*         IF AMBLXPT=ZERO THEN      /* BASE OPENED DIRECTLY          */
         C     @05,AMBLXPT(,@15)                                   1361
         BNE   @RF01361                                            1361
*           RACB=AMBLACB;           /* YES, GET ACB ADDRESS          */
         L     RACB,AMBLACB(,@15)                                  1362
*         ELSE                      /* NO,                           */
*           RACB=AMBLXPT->AMBLACB;  /* ACB ADDRESS FROM PATH AMBL    */
         B     @RC01361                                            1363
@RF01361 L     @05,AMBLPTR                                         1363
         L     @05,AMBLXPT(,@05)                                   1363
         L     RACB,AMBLACB(,@05)                                  1363
*         OPWUACB=ADDR(IFGACB);     /* PUT ACB ADDRESS IN OPW        */
@RC01361 ST    RACB,OPWUACB(,RCORE)                                1364
*         OPWTIOT=TCBTIO+ACBTIOT;   /* GET ADDRESS OF TIOT ENTRY     */
         LH    @15,ACBTIOT(,RACB)                                  1365
         L     @14,PSATOLD                                         1365
         AL    @15,TCBTIO(,@14)                                    1365
         ST    @15,OPWTIOT(,RCORE)                                 1365
*         JFCBPTR=TIOEJFCB;         /* GET ADDRESS OF JFCB           */
         SLR   JFCBPTR,JFCBPTR                                     1366
         ICM   JFCBPTR,7,TIOEJFCB(@15)                             1366
*         DXJBF=JFCB;               /* GET JFCB FROM LSQA            */
         LA    @15,MWAFCORE                                        1367
         MVC   DXJBF(176,@15),JFCB(JFCBPTR)                        1367
*       END;                                                       1368
*     OPWBCON=PAMBLPTR;             /* INDICATE CONNECT TO BASE      */
@RF01358 L     @05,PAMBLPTR                                        1369
         ST    @05,OPWBCON(,RCORE)                                 1369
*   END;                                                           1370
@DE01337 L     @05,AMBLPTR                                         1370
         L     @05,AMBLSCHN(,@05)                                  1370
         LTR   @05,@05                                             1370
         BNZ   @DL01337                                            1370
*   RESPECIFY                                                      1371
*     RET RESTRICTED;                                              1371
*   RET=RETSAVE(RETCONT);           /* LOAD RETURN ADDRESS           */
         L     @05,RETCONT                                         1372
         LR    @15,@05                                             1372
         SLA   @15,2                                               1372
         L     RET,RETSAVE-4(@15)                                  1372
*   RETCONT=RETCONT-ONE;            /* DECREMENT CONTROL BY ONE      */
         BCTR  @05,0                                               1373
         ST    @05,RETCONT                                         1373
*   RESPECIFY                                                      1374
*     RET UNRESTRICTED;                                            1374
*   END BLDVMT;                                                    1375
@EL00022 DS    0H                                                  1375
@EF00022 DS    0H                                                  1375
@ER00022 BR    @14                                                 1375
@PB00022 DS    0H                                                  1375
*   END IDA0A05B                                                   1376
*                                                                  1376
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (LCGPLSSW)                                       */
*/*%INCLUDE SYSLIB  (IFGACB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMBL )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDAARDB )                                       */
*/*%INCLUDE SYSLIB  (IHAASCB )                                       */
*/*%INCLUDE SYSLIB  (IDABIB  )                                       */
*/*%INCLUDE SYSLIB  (IDABLPRM)                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDACMB  )                                       */
*/*%INCLUDE SYSLIB  (IDACPA  )                                       */
*/*%INCLUDE SYSLIB  (IDAWSHD )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IEZDEB  )                                       */
*/*%INCLUDE SYSLIB  (IHADSAB )                                       */
*/*%INCLUDE SYSLIB  (IDAEDB  )                                       */
*/*%INCLUDE SYSLIB  (IDAHEB  )                                       */
*/*%INCLUDE SYSLIB  (IDAICWA )                                       */
*/*%INCLUDE SYSLIB  (IDADIWA )                                       */
*/*%INCLUDE SYSLIB  (IDAIDXCB)                                       */
*/*%INCLUDE SYSLIB  (IEZJSCB )                                       */
*/*%INCLUDE SYSLIB  (IDALPMB )                                       */
*/*%INCLUDE SYSLIB  (IDAERRCD)                                       */
*/*%INCLUDE SYSLIB  (IDAERMAP)                                       */
*/*%INCLUDE SYSLIB  (IDAOPWRK)                                       */
*/*%INCLUDE SYSLIB  (IDAPDFCD)                                       */
*/*%INCLUDE SYSLIB  (IDAPLH  )                                       */
*/*%INCLUDE SYSLIB  (IDAPPCDE)                                       */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (IHAQDB  )                                       */
*/*%INCLUDE SYSLIB  (IHARB   )                                       */
*/*%INCLUDE SYSLIB  (IKJRB   )                                       */
*/*%INCLUDE SYSLIB  (IFGRPL  )                                       */
*/*%INCLUDE SYSLIB  (IEEVRSWA)                                       */
*/*%INCLUDE SYSLIB  (IKJTCB  )                                       */
*/*%INCLUDE SYSLIB  (IEFTIOT1)                                       */
*/*%INCLUDE SYSLIB  (IDAUPT  )                                       */
*/*%INCLUDE SYSLIB  (IDAVAT  )                                       */
*/*%INCLUDE SYSLIB  (IDAVCRT )                                       */
*/*%INCLUDE SYSLIB  (IDAVMT  )                                       */
*/*%INCLUDE SYSLIB  (IDAVSRT )                                       */
*/*%INCLUDE SYSLIB  (IDAFOREC)                                       */
*/*%INCLUDE SYSLIB  (IECDSECT)                                       */
*/*%INCLUDE SYSLIB  (IECDSECS)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBN)                                       */
*/*%INCLUDE SYSLIB  (IEFJFCBX)                                       */
*/*%INCLUDE SYSLIB  (IDAPDPRM)                                       */
*/*%INCLUDE SYSLIB  (IDARTMAC)                                       */
*/*%INCLUDE SYSLIB  (IDAOCECN)                                       */
*/*%INCLUDE SYSLIB  (IDAGMAIN)                                       */
*                                                                  1376
*       ;                                                          1376
@DATA    DS    0H
@CH00032 DC    H'3'
@CH02711 DC    H'48'
@DATD    DSECT
         DS    0F
@SA00001 DS    23F
@TF00001 DS    F
IDA0A05B CSECT
         DS    0F
@CF00053 DC    F'1'
@CH00053 EQU   @CF00053+2
@CF00095 DC    F'4'
@CF00145 DC    F'5'
@CF00033 DC    F'12'
@CH00033 EQU   @CF00033+2
@CF00050 DC    F'16'
@CH00050 EQU   @CF00050+2
@CF00118 DC    F'24'
@CH00118 EQU   @CF00118+2
@CF00348 DC    F'32'
@CH00348 EQU   @CF00348+2
@CF02693 DC    F'36'
@CF02130 DC    F'96'
@CF02132 DC    F'100'
@CF02149 DC    F'152'
@CF02163 DC    F'192'
@CF05426 DC    F'396'
@CH05426 EQU   @CF05426+2
@CF05421 DC    F'1588'
@CF05131 DC    F'2048'
@CF05067 DC    F'4096'
@CF05425 DC    F'-4096'
@CF05424 DC    F'-4095'
@CF05430 DC    F'-2048'
@CF05429 DC    F'-2047'
@CF05428 DC    F'-48'
@CF05443 DC    F'-16'
@CF05442 DC    F'-12'
@CF05420 DC    F'-8'
@CF05432 DC    F'-4'
@CF05431 DC    F'-3'
@DATD    DSECT
         DS    0D
DSABPTR  DS    A
VCRTPTR  DS    A
AMBLPTR  DS    A
AMBPTR   DS    A
ARDBPTR  DS    A
ENTRYPTR DS    A
HEBPTR   DS    A
HEBSAPTR DS    A
LC1      DS    F
LC2      DS    F
LC3      DS    F
LC4      DS    F
LC5      DS    F
LC7      DS    F
LC8      DS    F
LC9      DS    F
MWASP250 DS    A
PAMBLPTR DS    A
RETCONT  DS    F
RSTWAPTR DS    A
SAVBASEB DS    A
TBLPTR   DS    A
MWACLPRM DS    AL4
         ORG   MWACLPRM
MWACLFLG DS    BL1
         ORG   MWACLFLG
MWALASTE DS    BL1
         ORG   MWACLPRM+4
MWAIOSAV DS    CL260
         ORG   MWAIOSAV
MWAACBEX DS    AL4
MWAAMBLQ DS    BL1
MWAFLG1  DS    BL1
@NM00231 DS    CL2
MWAAMBD  DS    CL124
MWAAMBI  DS    CL124
MWADIBUF DS    AL4
         ORG   MWAIOSAV+260
MWAFREMN DS    CL8
         ORG   MWAFREMN
MWASP    DS    FL1
MWALEN   DS    FL3
MWAPTR   DS    AL4
         ORG   MWAFREMN+8
MSGAREA  DS    CL33
         ORG   MSGAREA
MSGLEN   DS    FL2
MSGFLAGS DS    BL2
MSGTEXT  DS    CL25
         ORG   MSGTEXT
MSGTXT1  DS    CL17
MSGDDNM  DS    CL8
         ORG   MSGAREA+29
MSGROUTE DS    BL4
         ORG   MSGAREA+33
         DS    CL3
MWAVSRT  DS    CL8
         ORG   MWAVSRT
MWAVUSE  DS    FL4
MWAVPTR  DS    AL4
         ORG   MWAVSRT+8
MWAVRPPA DS    CL64
         ORG   MWAVRPPA
MWARETCD DS    FL4
MWABLPRM DS    CL52
MWABUFLP DS    CL8
         ORG   MWAVRPPA+64
MWAPRM2C DS    CL4
         ORG   MWAPRM2C
MWAPRMID DS    CL1
MWASFIPT DS    AL3
         ORG   MWAPRM2C+4
MWAFCORE DS    CL612
MWADBXTN DS    CL32
         DS    CL4
MWAOPWRK DS    CL1588
MWENQPRM DS    CL48
         ORG   MWENQPRM
MWENQENT DS    CL12
         ORG   MWENQENT+0
ENQOPT1  DS    BL1
         ORG   ENQOPT1+0
ENQEND   DS    BL1
ENQNEW   EQU   ENQOPT1+0
@NM00232 EQU   ENQOPT1+0
         ORG   MWENQENT+1
ENQRLEN  DS    FL1
ENQOPT2  DS    BL1
         ORG   ENQOPT2+0
@NM00233 DS    BL1
ENQSYS   EQU   ENQOPT2+0
@NM00234 EQU   ENQOPT2+0
         ORG   MWENQENT+3
ENQRETC  DS    FL1
ENQQNADR DS    AL4
ENQRNADR DS    AL4
         ORG   MWENQPRM+24
MWAQNAME DS    CL8
MWARNAME DS    CL8
         ORG   MWARNAME+0
MWARNCIN DS    CL3
MWARNACB DS    CL4
MWARNIND DS    CL1
         ORG   MWENQPRM+48
RETSAVE  DS    8A
MWASTAT  DS    2CL48
ARDBTAB  DS    256CL12
IDA0A05B CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@CV05279 DC    V(IDA0192B)
@CV05280 DC    V(IDA0192C)
@CV05281 DC    V(IDA0192F)
@CV05282 DC    V(IDA0192M)
@CV05283 DC    V(IDA0192Y)
@CV05284 DC    V(IDACI96C)
         DS    0D
@CC05327 DC    C'IDAOPWRK'
@CC05328 DC    C'SYSVSAM '
@CC04941 DC    C'VGTT'
@CC04986 DC    C'192C'
@CC05018 DC    C'A05B'
IDAERMAP DC    3AL1(0)
         DC    AL1(132)
         DC    15AL1(0)
         DC    AL1(136)
         DC    AL1(0)
         DC    AL1(184)
         DC    5AL1(0)
         DC    AL1(180)
         DC    3AL1(0)
         DC    AL1(148)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(144)
         DC    AL1(148)
         DC    AL1(196)
         DC    AL1(100)
         DC    AL1(152)
         DC    AL1(160)
         DC    2AL1(0)
         DC    AL1(160)
         DC    AL1(96)
         DC    AL1(192)
         DC    AL1(160)
         DC    AL1(160)
         DC    AL1(224)
         DC    AL1(176)
         DC    AL1(0)
         DC    AL1(168)
         DC    AL1(0)
         DC    AL1(160)
         DC    AL1(0)
         DC    AL1(116)
         DC    AL1(0)
         DC    AL1(108)
         DC    AL1(104)
         DC    AL1(240)
         DC    7AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(188)
         DC    AL1(0)
         DC    AL1(188)
         DC    AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(232)
         DC    3AL1(0)
         DC    AL1(160)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(0)
         DC    AL1(236)
         DC    AL1(236)
         DC    AL1(0)
         DC    5AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(164)
         DC    3AL1(0)
         DC    AL1(220)
         DC    3AL1(0)
         DC    AL1(228)
         DC    3AL1(0)
         DC    AL1(184)
         DC    3AL1(0)
         DC    AL1(208)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(204)
         DC    3AL1(0)
         DC    AL1(212)
         DC    3AL1(0)
         DC    AL1(216)
         DC    7AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(244)
         DC    3AL1(0)
         DC    AL1(200)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(0)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(160)
         DC    3AL1(0)
         DC    AL1(204)
         DC    AL1(160)
         DC    AL1(160)
         DC    58AL1(0)
IDA0A05B CSECT
         EXTRN IDACKRA1                  ESTAE EXIT ROUTINE
ESTAEPRM ESTAE IDACKRA1,RECORD=YES,MF=L  GENERATE SKELETON ESTAE LIST
IDA0A05B CSECT
MESSAGE  WTO   'IHJ009I ERROR ON         ',MF=L,ROUTCDE=(2,11),DESC=6
IDA0A05B CSECT
         DS    0D                   START ON DOUBLE WORD BOUNDARY
PTCHA05B DC    ((*-IDA0A05B)/20)X'00' PATCH AREA
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA0A05B CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
WRK1     EQU   @05
CPAHPTR  EQU   @05
PRIORDEB EQU   @05
MAXBLKS  EQU   @06
LC16     EQU   @05
LC15     EQU   @06
LC14     EQU   @05
LC13     EQU   @06
LC12     EQU   @05
LC11     EQU   @05
LC10     EQU   @07
LC6      EQU   @05
LC0      EQU   @05
JFCBPTR  EQU   @05
HDRELPTR EQU   @05
ELEMNUM  EQU   @06
CSWORD2  EQU   @06
CSWORD1  EQU   @05
AMDSBPTR EQU   @05
RDEB     EQU   @11
RCORE    EQU   @04
R0       EQU   @00
R1       EQU   @01
RACB     EQU   @02
RBASEA   EQU   @03
RBASEB   EQU   @12
R12      EQU   @12
R13      EQU   @13
R4       EQU   @04
R9       EQU   @09
R11      EQU   @11
RET      EQU   @14
RETCODE  EQU   @15
R15      EQU   @15
RTIOT    EQU   @09
RUCB     EQU   @10
R10      EQU   @10
R5       EQU   @05
R6       EQU   @06
R7       EQU   @07
R8       EQU   @08
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
FLCCVT   EQU   FLCICCW2
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBCRNCK EQU   ACBCROPS
ACBCRNRE EQU   ACBCROPS
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBTIOT  EQU   ACBDDNM
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBERFLG EQU   ACBCOMN+49
ACBINFLG EQU   ACBCOMN+50
ACBINFL1 EQU   ACBINFLG
ACBVVIC  EQU   ACBINFL1
ACBINFL2 EQU   ACBINFLG+1
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
IDAAMB   EQU   0
AMBID    EQU   IDAAMB
AMBBUFC  EQU   IDAAMB+8
AMBPH    EQU   IDAAMB+12
AMBCACB  EQU   IDAAMB+16
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBCREAT EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBCDSN  EQU   IDAAMB+32
AMBDDSN  EQU   IDAAMB+35
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBPUG   EQU   AMBFLG2
AMBEDB   EQU   IDAAMB+52
AMBEOVPT EQU   IDAAMB+56
AMBIWA   EQU   IDAAMB+64
AMBPAMBL EQU   IDAAMB+76
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBLSR   EQU   AMBAFLG
AMBCPA   EQU   IDAAMB+92
AMBWSHD  EQU   IDAAMB+96
AMBEXEX  EQU   IDAAMB+100
AMBSZRD  EQU   IDAAMB+108
AMBSZWR  EQU   IDAAMB+110
AMBSZFW  EQU   IDAAMB+112
AMBSZCP  EQU   IDAAMB+114
IDAAMBL  EQU   0
AMBLPCHN EQU   IDAAMBL
AMBLSCHN EQU   IDAAMBL+4
AMBLACB  EQU   IDAAMBL+8
AMBLEOV  EQU   IDAAMBL+12
AMBLEFLG EQU   AMBLEOV
AMBLDDNM EQU   IDAAMBL+16
AMBLIDF  EQU   AMBLDDNM
AMBLCACB EQU   AMBLIDF
AMBLQ    EQU   AMBLIDF+7
AMBLLSR  EQU   AMBLQ
AMBLXPT  EQU   IDAAMBL+24
AMBLVC   EQU   IDAAMBL+28
AMBLTYPE EQU   IDAAMBL+30
AMBLBASE EQU   AMBLTYPE
AMBLQ2   EQU   IDAAMBL+31
AMBLSHAR EQU   IDAAMBL+33
AMBLWRIT EQU   AMBLSHAR
AMBLFLG1 EQU   IDAAMBL+35
AMBLFULL EQU   AMBLFLG1
AMBLCINV EQU   AMBLFLG1
AMBLVVIC EQU   AMBLFLG1
AMBLFLG2 EQU   IDAAMBL+36
AMBLNUM  EQU   IDAAMBL+38
AMBLDTA  EQU   IDAAMBL+52
AMBLIX   EQU   IDAAMBL+56
AMBLBIB  EQU   IDAAMBL+60
AMBLCMB  EQU   IDAAMBL+64
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDDST   EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDNEST  EQU   IDAAMDSB+4
AMDCINV  EQU   IDAAMDSB+20
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDPARDB EQU   IDAAMDSB+36
AMDATTR3 EQU   IDAAMDSB+40
AMDLM    EQU   AMDATTR3
AMDSTAT  EQU   IDAAMDSB+48
AMDNLR   EQU   AMDSTAT+12
AMDDELR  EQU   AMDSTAT+16
AMDIREC  EQU   AMDSTAT+20
AMDUPR   EQU   AMDSTAT+24
IDAARDB  EQU   0
ARDTYPE  EQU   IDAARDB+1
ARDHLI   EQU   ARDTYPE
ARDNPTR  EQU   IDAARDB+4
ARDHRBA  EQU   IDAARDB+12
ARDVOLSR EQU   IDAARDB+20
ARDPRF   EQU   IDAARDB+28
ASCB     EQU   0
ASCBSUPC EQU   ASCB+16
ASCBRSM  EQU   ASCB+52
ASCBRSMF EQU   ASCBRSM
ASCBFW1  EQU   ASCB+100
ASCBRCTF EQU   ASCBFW1+2
ASCBFLG1 EQU   ASCBFW1+3
ASCBDSP1 EQU   ASCB+114
ASCBFLG2 EQU   ASCB+115
ASCBLKGP EQU   ASCB+128
ASCBSRQ  EQU   ASCB+180
ASCBSRQ1 EQU   ASCBSRQ
ASCBSRQ2 EQU   ASCBSRQ+1
ASCBSRQ3 EQU   ASCBSRQ+2
ASCBSRQ4 EQU   ASCBSRQ+3
ASCBVGTT EQU   ASCB+184
IDABIB   EQU   0
BIBHDR   EQU   IDABIB
BIBFLG1  EQU   BIBHDR+1
BIBREST  EQU   BIBFLG1
BIBUPT   EQU   IDABIB+8
BIBVMT   EQU   IDABIB+12
BIBDACB  EQU   IDABIB+16
BIBSPHPT EQU   IDABIB+24
BIBPRSPH EQU   IDABIB+28
BIBHEBPT EQU   IDABIB+32
BIBHEBFQ EQU   IDABIB+36
BIBVCRT  EQU   IDABIB+40
BIBCSL   EQU   IDABIB+48
BIBVGTT  EQU   IDABIB+56
BIBRTNS  EQU   IDABIB+60
BIBINTRF EQU   BIBRTNS
IDABLPRM EQU   0
BLPACBID EQU   IDABLPRM
BLPACBST EQU   IDABLPRM+1
BLPBUFLP EQU   IDABLPRM+4
BLPUACB  EQU   BLPBUFLP
BLPKEYLN EQU   IDABLPRM+8
BLPSTRNO EQU   IDABLPRM+9
BLPFLAGS EQU   IDABLPRM+10
BLPFLAG1 EQU   BLPFLAGS
BLPFDBDC EQU   BLPFLAG1
BLPFBLD  EQU   BLPFLAG1
BLPFDEL  EQU   BLPFLAG1
BLPFLSR  EQU   BLPFLAG1
BLPFLAG2 EQU   BLPFLAGS+1
BLPFRSTR EQU   BLPFLAG2
BLPCORE  EQU   IDABLPRM+16
BLPGFLG  EQU   BLPCORE
BLPIOACB EQU   IDABLPRM+24
BLPDSORG EQU   BLPIOACB+3
BLPOFLGS EQU   IDABLPRM+48
BLPBUFL  EQU   0
BLPBUFSZ EQU   BLPBUFL
BLPBRLFG EQU   BLPBUFL+4
BLPBFLST EQU   BLPBRLFG
BLPBFLCT EQU   BLPBUFL+6
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCIOFL EQU   IDABUFC+2
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCORBA EQU   IDABUFC+12
BUFCINV  EQU   IDABUFC+28
IDACMB   EQU   0
CMBFLGS  EQU   IDACMB+4
CMBNST   EQU   IDACMB+5
CMBPTRS  EQU   IDACMB+8
CMBDEBPT EQU   CMBPTRS+32
CMBEDBPT EQU   CMBPTRS+36
IDACPA   EQU   0
CPAWPHAD EQU   IDACPA+36
CPAWSEEK EQU   CPAWPHAD+1
CPARPHAD EQU   IDACPA+52
CPARSEEK EQU   CPARPHAD+1
CPASTAT1 EQU   IDACPA+83
CPAFLAGS EQU   IDACPA+84
CPAFLAG1 EQU   CPAFLAGS
CPAFLAG2 EQU   CPAFLAGS+1
CPACCW   EQU   0
IDAWSHD  EQU   0
WSHDACHN EQU   IDAWSHD+4
WSHDNEXT EQU   WSHDACHN+1
WSHDNUS  EQU   IDAWSHD+18
WSHDSLT  EQU   IDAWSHD+28
WSHDSAD  EQU   WSHDSLT
@NM00054 EQU   WSHDSAD
WSHDSGMW EQU   WSHDSLT+4
WSHDSFM  EQU   WSHDSGMW
WSHDSFLG EQU   WSHDSGMW+10
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
DEBBASIC EQU   0
DEBTCBAD EQU   DEBBASIC
DEBDEBAD EQU   DEBBASIC+4
DEBDEBB  EQU   DEBDEBAD+1
DEBIRBAD EQU   DEBBASIC+8
DEBOFLGS EQU   DEBIRBAD
DEBOPATB EQU   DEBBASIC+12
DEBFLGS1 EQU   DEBBASIC+14
DEBUSRPG EQU   DEBBASIC+16
DEBRRQ   EQU   DEBBASIC+20
DEBECBAD EQU   DEBRRQ
DEBDCBAD EQU   DEBBASIC+24
DEBPROTG EQU   DEBDCBAD
DEBAPPAD EQU   DEBBASIC+28
DEBBASND EQU   DEBBASIC+32
DEBDASD  EQU   0
DEBUCBAD EQU   DEBDASD
DEBACSMD EQU   0
DEBVOLSQ EQU   DEBACSMD
DEBVOLBT EQU   DEBVOLSQ
DEBDSNM  EQU   DEBACSMD+4
DEBUTSAA EQU   DEBDSNM
DEBACS01 EQU   0
DEBDSNAM EQU   DEBACS01
DEBACS02 EQU   0
DEBDBLK  EQU   DEBACS02
DEBACS03 EQU   0
DEBACS04 EQU   0
DEBTBFRA EQU   DEBACS04
DEBTCCWA EQU   DEBACS04+4
DEBACS05 EQU   0
DEBFUCBA EQU   DEBACS05
DEBLUCBA EQU   DEBACS05+4
DEBACS06 EQU   0
DEBACS07 EQU   0
DEBACS08 EQU   0
DEBSUBNM EQU   0
DEB      EQU   0
DEBAVT   EQU   DEB
DEBEOEA  EQU   DEBAVT
DEBEOEAB EQU   DEBEOEA
DEBSIOA  EQU   DEBAVT+4
DEBSIOAB EQU   DEBSIOA
DEBPCIA  EQU   DEBAVT+8
DEBPCIAB EQU   DEBPCIA
DEBCEA   EQU   DEBAVT+12
DEBCEAB  EQU   DEBCEA
DEBXCEA  EQU   DEBAVT+16
DEBXCEAB EQU   DEBXCEA
DEBPREFX EQU   DEB+20
DEBXTNP  EQU   DEBPREFX+8
DEBAMTYP EQU   DEBPREFX+13
DEBXTN   EQU   0
DEBXLNGH EQU   DEBXTN
DEBXFLG1 EQU   DEBXTN+2
DEBXCDCB EQU   DEBXFLG1
DSAB     EQU   0
DSABFCHN EQU   DSAB+4
DSABTIOT EQU   DSAB+16
DSABGIDP EQU   DSAB+24
DSABANMP EQU   DSAB+28
DSABORG  EQU   DSAB+32
DSABORG1 EQU   DSABORG
DSABORG2 EQU   DSABORG+1
DSABFLG1 EQU   DSAB+34
DSABFLG2 EQU   DSAB+35
DSABFLG3 EQU   DSAB+36
DSABFLG4 EQU   DSAB+37
DSABANMI EQU   0
DSABGIDL EQU   0
IDAEDBHD EQU   0
EDBLPMBC EQU   IDAEDBHD+4
IDAEDB   EQU   0
EDBFLG1  EQU   IDAEDB+2
HEBHDREL EQU   0
HEBFREMN EQU   HEBHDREL
HEBFLAGS EQU   HEBHDREL+8
HEBELCHN EQU   HEBHDREL+12
@NM00069 EQU   HEBHDREL+20
IDAHEB   EQU   0
HEBID    EQU   IDAHEB
HEBLEN   EQU   IDAHEB+2
HEBNHEB  EQU   IDAHEB+4
HEBCNT   EQU   IDAHEB+10
HEBHDELS EQU   IDAHEB+12
IDAICWA  EQU   0
ICWFLG1  EQU   IDAICWA+1
ICWCRBA  EQU   IDAICWA+12
IDADIWA  EQU   0
DIWFLG1  EQU   IDADIWA+4
DIWFLG2  EQU   IDADIWA+5
DIWBUFC  EQU   IDADIWA+20
DIWSAVE  EQU   IDADIWA+28
IEZJSCB  EQU   0
JSCBSEC1 EQU   IEZJSCB+188
JSCHPCE  EQU   JSCBSEC1+4
JSCBSHR  EQU   JSCBSEC1+8
JSCBDCB  EQU   JSCBSEC1+36
JSCBOPTS EQU   JSCBSEC1+48
JSCBSWT1 EQU   JSCBSEC1+55
JSCBWTP  EQU   JSCBSEC1+64
JSCBWTFG EQU   JSCBWTP
JSCBEND1 EQU   IEZJSCB+260
IDALPMB  EQU   0
LPMBFLGS EQU   IDALPMB+1
LPMBLEN  EQU   IDALPMB+2
LPMBLKSZ EQU   IDALPMB+12
LPMBLKTR EQU   IDALPMB+20
IDAOPWRK EQU   0
OPWSUBPL EQU   IDAOPWRK
OPWLENTH EQU   IDAOPWRK+1
OPWID    EQU   IDAOPWRK+4
OPWFLGS1 EQU   IDAOPWRK+12
OPWVVIC  EQU   OPWFLGS1
OPWFLGS2 EQU   IDAOPWRK+13
OPWFLGS3 EQU   IDAOPWRK+14
OPWRSTRT EQU   OPWFLGS3
OPWFLGS4 EQU   IDAOPWRK+15
OPWBIB   EQU   IDAOPWRK+16
OPWCOMWA EQU   IDAOPWRK+20
OPWIDF   EQU   IDAOPWRK+24
OPWCACB  EQU   OPWIDF
OPWDCI   EQU   OPWIDF+4
OPWQ     EQU   OPWIDF+7
OPWVSMPL EQU   IDAOPWRK+32
OPWVMSP  EQU   OPWVSMPL+4
OPWVMLNG EQU   OPWVSMPL+5
OPWVMADR EQU   OPWVSMPL+8
OPWVMTYP EQU   OPWVSMPL+12
OPWVMFLG EQU   OPWVSMPL+13
OPWVMNSL EQU   OPWVMFLG
OPWVSMWA EQU   IDAOPWRK+48
OPWVGSPL EQU   OPWVSMWA+40
OPWVLSAV EQU   OPWVSMWA+80
OPWVFMPL EQU   OPWVSMWA+88
OPWSAVE  EQU   IDAOPWRK+144
OPWCSL   EQU   OPWSAVE
OPWCURPT EQU   IDAOPWRK+164
OPWXAMBL EQU   IDAOPWRK+168
OPWCAMBL EQU   IDAOPWRK+172
OPWBCON  EQU   IDAOPWRK+176
OPWBAMBL EQU   IDAOPWRK+184
OPWQ2    EQU   IDAOPWRK+198
OPWCATTR EQU   IDAOPWRK+199
OPWUPT   EQU   IDAOPWRK+200
OPWUACB  EQU   IDAOPWRK+204
OPWCTCB  EQU   IDAOPWRK+220
OPWJSTCB EQU   IDAOPWRK+224
OPWTIOT  EQU   IDAOPWRK+228
OPWCSTRN EQU   IDAOPWRK+240
OPWSFI   EQU   IDAOPWRK+296
OPWERMAP EQU   IDAOPWRK+308
OPWBSECL EQU   IDAOPWRK+568
OPWPTAIX EQU   IDAOPWRK+576
OPWNOUPG EQU   IDAOPWRK+584
OPWUPAIX EQU   IDAOPWRK+588
OPWCURCL EQU   0
OPWCFLG1 EQU   OPWCURCL
OPWBASE  EQU   OPWCFLG1
OPWPATH  EQU   OPWCFLG1
OPWUPGR  EQU   OPWCFLG1
OPWPRTBL EQU   OPWCFLG1
OPWCDTCI EQU   OPWCURCL+1
OPWFLG2  EQU   OPWCURCL+4
OPWCIXCI EQU   OPWCURCL+5
IDAPLHDR EQU   0
IDAPLH   EQU   0
PLHFLG1  EQU   IDAPLH+2
PLHFLG2  EQU   IDAPLH+3
PLHEFLGS EQU   IDAPLH+4
PLHFLG3  EQU   IDAPLH+6
PLHAFLGS EQU   IDAPLH+7
PLHCRBA  EQU   IDAPLH+28
PLHJORBA EQU   PLHCRBA
PLHJCODE EQU   IDAPLH+40
PLHDBUFC EQU   IDAPLH+52
PLHDIOB  EQU   IDAPLH+76
PLHRETO  EQU   IDAPLH+116
PLHRET1  EQU   IDAPLH+120
PLHEOVPT EQU   IDAPLH+180
PLHIXSPL EQU   IDAPLH+200
PLHSSRBA EQU   PLHIXSPL
PLHWAX   EQU   IDAPLH+232
PLHKEYPT EQU   IDAPLH+248
PLHEND   EQU   IDAPLH+280
QDB      EQU   0
QDBFELMP EQU   QDB+12
RBPRFX   EQU   0
RBBASIC  EQU   0
RBEXRTNM EQU   RBBASIC
RBTMFLD  EQU   RBEXRTNM
RBSTAB   EQU   RBBASIC+10
XSTAB    EQU   RBSTAB
RBSTAB1  EQU   XSTAB
XSTAB1   EQU   RBSTAB1
RBFTCKPT EQU   XSTAB1
RBSTAB2  EQU   XSTAB+1
XSTAB2   EQU   RBSTAB2
RBTCBNXT EQU   XSTAB2
RBFACTV  EQU   XSTAB2
RBFDYN   EQU   XSTAB2
RBECBWT  EQU   XSTAB2
RBOPSW   EQU   RBBASIC+16
XRBPSW   EQU   RBOPSW
RBOPSWB2 EQU   XRBPSW+1
RBLINK   EQU   RBBASIC+28
XRBLNK   EQU   RBLINK
RBWCF    EQU   XRBLNK
RBLINKB  EQU   XRBLNK+1
RBGRSAVE EQU   RBBASIC+32
XRBREG   EQU   RBGRSAVE
RBGRS0   EQU   XRBREG
RBGRS1   EQU   XRBREG+4
RBGRS2   EQU   XRBREG+8
RBGRS3   EQU   XRBREG+12
RBGRS4   EQU   XRBREG+16
RBGRS5   EQU   XRBREG+20
RBGRS6   EQU   XRBREG+24
RBGRS7   EQU   XRBREG+28
RBGRS8   EQU   XRBREG+32
RBGRS9   EQU   XRBREG+36
RBGRS10  EQU   XRBREG+40
RBGRS11  EQU   XRBREG+44
RBGRS12  EQU   XRBREG+48
RBGRS13  EQU   XRBREG+52
RBGRS14  EQU   XRBREG+56
RBGRS15  EQU   XRBREG+60
XRBESA   EQU   RBBASIC+96
RBPREFIX EQU   0
RBRSV019 EQU   RBPREFIX+14
RBRSV028 EQU   RBPREFIX+15
RBRSV041 EQU   RBPREFIX+27
RBRSV054 EQU   RBPREFIX+39
RBRTOPSW EQU   RBPREFIX+40
RBRTPSW2 EQU   RBRTOPSW+8
RBRTICIL EQU   RBRTPSW2
RBFLAGS1 EQU   RBPREFIX+56
RBINTCDA EQU   RBPREFIX+61
RBSECT   EQU   0
RBPPSAV  EQU   RBSECT
@NM00146 EQU   RBSECT+10
@NM00147 EQU   @NM00146
RBTRSVRB EQU   @NM00147
@NM00149 EQU   @NM00146+1
RBETXR   EQU   @NM00149
RBEP     EQU   RBSECT+12
RBPGMQ   EQU   RBSECT+24
@NM00156 EQU   RBSECT+28
@NM00157 EQU   @NM00156
IRBEND   EQU   RBSECT+96
@NM00160 EQU   RBSECT+96
RBRSV138 EQU   @NM00160+7
RBSCBB   EQU   RBSECT+144
RBSPARM  EQU   RBSCBB+8
RBSFLGS1 EQU   RBSPARM
RBSIOPRC EQU   RBSFLGS1
RBSOWNR  EQU   RBSCBB+12
RBSFLGS2 EQU   RBSOWNR
RBSDATA  EQU   RBSCBB+16
RBSFLG3  EQU   RBSDATA
RBRSV150 EQU   RBSECT+167
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLLOC   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLRLEN  EQU   RPLCOMN+48
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLDDDD  EQU   RPLRBAR+4
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RSTWA    EQU   0
RSDCBL   EQU   RSTWA+24
RSRETCOD EQU   RSTWA+72
RSRETCD2 EQU   RSRETCOD+1
XCTLNAM1 EQU   RSTWA+180
RSECB1   EQU   XCTLNAM1
RSDCB    EQU   RSTWA+188
TCBFIX   EQU   0
TCBFRS   EQU   TCBFIX
TCB      EQU   0
TCBRBP   EQU   TCB
TCBPIE   EQU   TCB+4
TCBPMASK EQU   TCBPIE
TCBDEB   EQU   TCB+8
TCBTIO   EQU   TCB+12
TCBCMP   EQU   TCB+16
TCBCMPF  EQU   TCBCMP
TCBCPP   EQU   TCBCMPF
TCBSTCC  EQU   TCBCMPF
TCBCDBL  EQU   TCBCMPF
TCBCWTO  EQU   TCBCMPF
TCBCIND  EQU   TCBCMPF
TCBCMSG  EQU   TCBCMPF
TCBTRN   EQU   TCB+20
TCBABF   EQU   TCBTRN
TCBMSS   EQU   TCB+24
TCBPKF   EQU   TCB+28
TCBFLGS  EQU   TCB+29
TCBFLGS1 EQU   TCBFLGS
TCBFLGS2 EQU   TCBFLGS+1
TCBFLGS3 EQU   TCBFLGS+2
TCBFLGS4 EQU   TCBFLGS+3
TCBFLGS5 EQU   TCBFLGS+4
TCBABWF  EQU   TCBFLGS5
TCBJPQ   EQU   TCB+44
TCBPURGE EQU   TCBJPQ
TCBGRS   EQU   TCB+48
TCBFSA   EQU   TCB+112
TCBTME   EQU   TCB+120
TCBJSTCB EQU   TCB+124
TCBTSFLG EQU   TCB+148
TCBTSTSK EQU   TCBTSFLG
TCBSTAB  EQU   TCB+160
TCBNSTAE EQU   TCBSTAB
TCBTCT   EQU   TCB+164
TCBTCTGF EQU   TCBTCT
TCBSCNDY EQU   TCB+172
TCBNDSP  EQU   TCBSCNDY
TCBNDSP1 EQU   TCBNDSP+1
TCBNDSP2 EQU   TCBNDSP+2
TCBNDSP3 EQU   TCBNDSP+3
TCBJSCB  EQU   TCB+180
TCBRECDE EQU   TCBJSCB
TCBEXT1  EQU   TCB+196
TCBBITS  EQU   TCB+200
TCBNDSP4 EQU   TCBBITS
TCBNDSP5 EQU   TCBBITS+1
TCBFLGS6 EQU   TCBBITS+2
TCBFLGS7 EQU   TCBBITS+3
TCBDAR   EQU   TCB+204
TCBDARC  EQU   TCBDAR
TCBEXT2  EQU   TCB+208
TCBXSCT  EQU   TCB+240
TCBXSCT1 EQU   TCBXSCT
TCBFOE   EQU   TCB+244
TCBESTAE EQU   TCB+264
TCBESTRM EQU   TCBESTAE+1
TCBFBYT1 EQU   TCB+276
TCBFBYT2 EQU   TCB+277
TCBRV124 EQU   TCB+278
TCBRV133 EQU   TCB+279
TCBXTNT2 EQU   0
TCBGTF   EQU   TCBXTNT2
TCBTFLG  EQU   TCBGTF
TCBRV146 EQU   TCBXTNT2+28
TCBRV155 EQU   TCBXTNT2+29
TCBRV164 EQU   TCBXTNT2+30
TCBRV173 EQU   TCBXTNT2+31
TIOT1    EQU   0
TIOENTRY EQU   0
TIOESTTA EQU   TIOENTRY+1
TIOERLOC EQU   TIOENTRY+2
TIOELINK EQU   TIOERLOC+1
TIOESYOT EQU   TIOELINK
TIOEDDNM EQU   TIOENTRY+4
TIOEJFCB EQU   TIOENTRY+12
TIOESTTC EQU   TIOENTRY+15
TIOESTTB EQU   TIOENTRY+16
POOLSTAR EQU   TIOENTRY+20
IDAUPT   EQU   0
UPTHDR   EQU   IDAUPT
UPTFLG0  EQU   UPTHDR+1
UPTSA    EQU   IDAUPT+16
UPTAXENT EQU   IDAUPT+88
UPTRPL   EQU   UPTAXENT
UPTFLG1  EQU   UPTAXENT+4
UPTF1NOP EQU   UPTFLG1
IDAVAT   EQU   0
VATHDR   EQU   IDAVAT
VATVSRT  EQU   IDAVAT+8
VATVPTR  EQU   VATVSRT+4
VATPAMBL EQU   IDAVAT+16
VATVC    EQU   IDAVAT+20
IDAVCRT  EQU   0
VCRFLAG1 EQU   IDAVCRT+1
VCRUPGSW EQU   VCRFLAG1
VCRLSR   EQU   VCRFLAG1
VCROPNCT EQU   IDAVCRT+16
VCRUPGCT EQU   IDAVCRT+18
VCRIDXCT EQU   IDAVCRT+20
VCRCISIZ EQU   IDAVCRT+24
VCRSPHPT EQU   IDAVCRT+28
VCRRBUF  EQU   IDAVCRT+32
VCROPN   EQU   IDAVCRT+36
VCRUPG   EQU   IDAVCRT+40
VCRIDX   EQU   IDAVCRT+44
VCRENTRY EQU   0
VCRHEBS  EQU   VCRENTRY
VCRAMBL  EQU   VCRENTRY+4
VCRUPGRD EQU   0
VCRUHEBS EQU   VCRUPGRD
VCRUAMBL EQU   VCRUPGRD+4
VCRINDEX EQU   0
VCRICWA  EQU   VCRINDEX
VCRBUFPT EQU   VCRINDEX+4
VCRCORE  EQU   0
VCRCHDR  EQU   VCRCORE
VCRCDESC EQU   VCRCHDR+12
VCRHEBSA EQU   0
VCRHHDR  EQU   VCRHEBSA
VCRHNENT EQU   VCRHHDR
VCRHFLG  EQU   VCRHHDR+2
VCRHFREL EQU   VCRHFLG
VCRHCID  EQU   VCRHHDR+3
VCRHNEXT EQU   VCRHHDR+4
VCRHENT  EQU   VCRHEBSA+8
VCRHEFMN EQU   VCRHENT
IDAVMT   EQU   0
VMTHDR   EQU   IDAVMT
VMTLEN   EQU   VMTHDR+2
VMTNXT   EQU   IDAVMT+4
VMTDEV   EQU   IDAVMT+13
VMTVOL   EQU   IDAVMT+16
VMTVFLG1 EQU   VMTVOL+4
IDAVSRT  EQU   0
VSRTFLGS EQU   IDAVSRT+12
VSRTKL   EQU   IDAVSRT+14
VSRTPLHH EQU   IDAVSRT+16
VSRTBUFH EQU   IDAVSRT+20
VSRTCPAH EQU   IDAVSRT+24
VSRTWAH  EQU   IDAVSRT+28
VSRTCSL  EQU   IDAVSRT+44
VSRTCSLF EQU   VSRTCSL
VSRTCSBF EQU   VSRTCSLF
VSRTCSPF EQU   VSRTCSLF
FORCORE  EQU   0
DXDSCB   EQU   FORCORE
DXJBF    EQU   FORCORE+100
DXIOB    EQU   FORCORE+280
DXDAADDR EQU   FORCORE+312
DXDCB    EQU   FORCORE+320
DXCCW    EQU   FORCORE+368
DXCCW5   EQU   DXCCW+32
DXCCW8   EQU   DXCCW+56
DXCCW12  EQU   DXCCW+88
DXXCTL   EQU   FORCORE+472
DXVOLSR  EQU   FORCORE+500
DXVOLSR1 EQU   DXVOLSR
DXVOLSR2 EQU   DXVOLSR+6
DXVOLSR3 EQU   DXVOLSR+12
DXRESSW  EQU   FORCORE+524
DXDSABAD EQU   FORCORE+544
DXDEBXAD EQU   FORCORE+552
DXUCBSAV EQU   FORCORE+564
DXUDCBAD EQU   FORCORE+568
DXPDCBAD EQU   FORCORE+572
DXATCOM1 EQU   FORCORE+588
DXATGENS EQU   DXATCOM1
DXATVGIV EQU   DXATGENS
DXATOUTA EQU   DXATCOM1+2
DXATDACC EQU   DXATCOM1+3
DXATCOM2 EQU   FORCORE+592
DXATEOV  EQU   DXATCOM2
DXATOPEN EQU   DXATCOM2+1
DXATALL  EQU   DXATCOM2+2
DXATEXC1 EQU   FORCORE+604
DXATEXB1 EQU   DXATEXC1
DXATEXC2 EQU   FORCORE+608
DSECTSIZ EQU   FORCORE+612
IECPREFX EQU   0
IECEXTPR EQU   IECPREFX+32
IECWTGTB EQU   IECEXTPR+72
IECUPRML EQU   IECEXTPR+80
IECRESWA EQU   IECEXTPR+84
RWARESWA EQU   0
RWAPREFX EQU   RWARESWA
USERPRML EQU   0
IECRRPL  EQU   0
RRPLIST  EQU   IECRRPL
RRFUNCTN EQU   RRPLIST
RRFLAGS1 EQU   RRPLIST+1
RRFLAGS2 EQU   RRPLIST+2
RRFLAGS3 EQU   RRPLIST+3
RRXRETRY EQU   RRPLIST+12
DSMADTRL EQU   0
DSMADTW1 EQU   DSMADTRL
DSMADTB1 EQU   DSMADTW1
DSMADTB2 EQU   DSMADTW1+1
WTGTABLE EQU   0
WTGWTOPR EQU   WTGTABLE
WTG      EQU   0
WTGAREA  EQU   WTG
WTGMODNM EQU   WTGAREA
WTGPREFX EQU   WTGAREA+16
WTGPATHS EQU   WTG+30
WTGENTRY EQU   0
WTGIDTTR EQU   WTGENTRY
APPNMTBL EQU   0
APPENTRY EQU   APPNMTBL+4
INFMJFCB EQU   0
JFCBDSNM EQU   INFMJFCB
JFCBELNM EQU   INFMJFCB+44
JFCBTSDM EQU   INFMJFCB+52
JFCFCBID EQU   INFMJFCB+56
JFCBFRID EQU   JFCFCBID
JFCAMCRO EQU   JFCBFRID
JFCBLTYP EQU   INFMJFCB+66
JFCBOTTR EQU   INFMJFCB+67
JFCBUFOF EQU   JFCBOTTR
JFCBFLSQ EQU   JFCBOTTR+1
JFCFUNC  EQU   JFCBFLSQ
JFCBMASK EQU   INFMJFCB+72
JFCBFLG1 EQU   JFCBMASK+5
JFCOPEN  EQU   JFCBFLG1
JFCBFLG2 EQU   JFCBMASK+6
JFCDEFER EQU   JFCBFLG2
JFCBIND1 EQU   INFMJFCB+86
JFCBIND2 EQU   INFMJFCB+87
JFCAMPTR EQU   INFMJFCB+88
JFCBUFRQ EQU   JFCAMPTR
JFCBUFNO EQU   JFCBUFRQ
JFCBGNCP EQU   JFCAMPTR+1
JFCBHIAR EQU   JFCBGNCP
JFCBFALN EQU   JFCBHIAR
JFCBFTEK EQU   JFCBFALN
JFCBBFTA EQU   JFCBFTEK
JFCEROPT EQU   INFMJFCB+92
JFCTRTCH EQU   INFMJFCB+93
JFCBX    EQU   0
IDAPDPRM EQU   0
PDPCALL  EQU   IDAPDPRM
PDPACB   EQU   IDAPDPRM+4
PDPTIOT  EQU   IDAPDPRM+12
PDPCLSNM EQU   IDAPDPRM+20
PDPCTACB EQU   IDAPDPRM+28
PDPDSTYP EQU   IDAPDPRM+33
PDPMSGFL EQU   IDAPDPRM+34
IDAVGTT  EQU   0
VGTTID   EQU   IDAVGTT
VGTTTYPE EQU   IDAVGTT+4
VGTTOPEN EQU   VGTTTYPE
VGTTSP   EQU   IDAVGTT+7
VGTTSIZE EQU   IDAVGTT+8
VGTTNEXT EQU   IDAVGTT+12
VGTTBIB  EQU   IDAVGTT+16
TBLENTRY EQU   0
MWAHURBA EQU   TBLENTRY
MWAVOLSR EQU   TBLENTRY+4
ARDBTBL  EQU   0
SAVELIST EQU   0
SLR0     EQU   SAVELIST
SLNXPTR  EQU   SAVELIST+12
SWABLOCK EQU   0
JFCB     EQU   SWABLOCK+16
SAVAREA  EQU   0
SABWRD   EQU   SAVAREA+4
SAREGS   EQU   SAVAREA+12
SACODE   EQU   SAREGS+4
SAREG    EQU   SAREGS+12
SP250WA  EQU   0
SP250SA  EQU   SP250WA
SP250RPL EQU   SP250WA+72
ICWKEY2  EQU   0
ICWKEY3  EQU   0
PLHKEY   EQU   0
PLHPDL   EQU   0
PLHPDLE  EQU   0
PLHRRN   EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
DEBBAS02 EQU   DEBBASND
DEBDDS1  EQU   DEBBAS02
DEBSUCBA EQU   DEBDDS1
DEBDEVED EQU   DEBDDS1+4
DEBRDCB  EQU   DEBDDS1+4
DEBPDCB  EQU   DEBDDS1+8
DEBWDCB  EQU   DEBDDS1+12
DEBACS09 EQU   DEBDEVED
DEBASC09 EQU   DEBACS09
DEBEAMFG EQU   DEBASC09+3
DEBDSID  EQU   DEBASC09+4
DEBEOD   EQU   DEBASC09+12
DEBBOE   EQU   DEBEOD
DEBEODRV EQU   DEBBOE
DEBEODTT EQU   DEBBOE+1
DEBEOD0  EQU   DEBBOE+2
DEBEODSS EQU   DEBBOE+3
DEBBAS01 EQU   DEBBASND
DEBISAM  EQU   DEBBAS01
DEBFIEAD EQU   DEBISAM
DEBFPEAD EQU   DEBISAM+4
DEBFOEAD EQU   DEBISAM+8
DEBEXPT  EQU   DEBISAM+12
DEBRPSID EQU   DEBEXPT
JSCBSEC2 EQU   JSCBEND1
JSCBSEC3 EQU   JSCBEND1
JSCBJCT  EQU   JSCBSEC3
JSCBJCTA EQU   JSCBJCT+1
JSCBASID EQU   JSCBSEC3+8
JSCBFBYT EQU   JSCBSEC3+10
JSCBJNL  EQU   JSCBSEC3+28
JSCBJJSB EQU   JSCBJNL
JSCBSUB  EQU   JSCBSEC3+40
JSCDSABQ EQU   JSCBSEC3+60
JSCSCT   EQU   JSCBSEC3+68
JSCRSV45 EQU   JSCBSEC3+112
JSCRSV46 EQU   JSCRSV45
JSCRSV47 EQU   JSCRSV45+2
PLHEXTEN EQU   PLHEND
PLHBMWRK EQU   PLHEXTEN+5
PSARSVTE EQU   PSARSVT
RBSECS03 EQU   RBEP
RBCDE    EQU   RBSECS03
RBCDFLGS EQU   RBCDE
RBSECS05 EQU   RBPGMQ
RBSQE    EQU   RBSECS05
RBSECS06 EQU   RBPGMQ
RBIQE    EQU   RBSECS06
RBSECS07 EQU   RBPGMQ
RBIQE2   EQU   RBSECS07
RBSECS08 EQU   IRBEND
RBSECS09 EQU   IRBEND
TIOEDEVE EQU   TIOESTTB
TIOSTTB  EQU   TIOEDEVE
DXXWTG   EQU   DSECTSIZ
DXXAREA  EQU   DSECTSIZ+4
DXXMODNM EQU   DXXAREA
DXXLNG   EQU   DXXAREA+29
DXXENTRY EQU   DXXAREA+32
DXXIDTTR EQU   DXXENTRY
DXREGSAV EQU   DXCCW8
DXREG1   EQU   DXREGSAV+28
DXIDENT  EQU   DXCCW12
DXRETMOD EQU   DXIDENT+2
@NM00212 EQU   DXXCTL
DXSAVMOD EQU   @NM00212+2
@NM00213 EQU   DXRESSW
JFCKEYLE EQU   JFCTRTCH
JFCCODE  EQU   JFCKEYLE
JFCSTACK EQU   JFCTRTCH
JFCMODE  EQU   JFCSTACK
JFCSPPRT EQU   JFCTRTCH
JFCBABFS EQU   JFCSPPRT+2
JFCLIMCT EQU   JFCBABFS
JFCDSORG EQU   JFCSPPRT+5
JFCDSRG1 EQU   JFCDSORG
JFCDSRG2 EQU   JFCDSORG+1
JFCRECFM EQU   JFCSPPRT+7
JFCRCFM  EQU   JFCRECFM
JFCOPTCD EQU   JFCSPPRT+8
JFCWVCSP EQU   JFCOPTCD
JFCWVCIS EQU   JFCWVCSP
JFCWVCBD EQU   JFCWVCIS
JFCALLOW EQU   JFCOPTCD
JFCRSV17 EQU   JFCALLOW
JFCOVER  EQU   JFCRSV17
JFCPCIBT EQU   JFCOPTCD
JFCMAST  EQU   JFCPCIBT
JFCEXT   EQU   JFCMAST
JFCBCKPT EQU   JFCOPTCD
JFCIND   EQU   JFCBCKPT
JFCRSV18 EQU   JFCOPTCD
JFCCYL   EQU   JFCRSV18
JFCACT   EQU   JFCCYL
JFCREDUC EQU   JFCOPTCD
JFCRSV19 EQU   JFCREDUC
JFCRSV20 EQU   JFCRSV19
JFCRSV21 EQU   JFCOPTCD
JFCDEL   EQU   JFCRSV21
JFCOPTJ  EQU   JFCOPTCD
JFCREORG EQU   JFCOPTJ
JFCBLKSI EQU   JFCSPPRT+9
JFCBUFSI EQU   JFCBLKSI
JFCAMSYN EQU   JFCSPPRT+11
JFCNCP   EQU   JFCAMSYN+2
JFCNTM   EQU   JFCAMSYN+3
JFCBFSEQ EQU   JFCNTM
JFCPCI   EQU   JFCBFSEQ
JFCRESRV EQU   JFCAMSYN+4
JFCUCSEG EQU   JFCRESRV
JFCUCSOP EQU   JFCUCSEG+4
JFCOUTLI EQU   JFCUCSEG+5
JFCTHRSH EQU   JFCOUTLI
JFCCPRI  EQU   JFCTHRSH
JFCBVOLS EQU   JFCUCSEG+10
JFCBS001 EQU   JFCBVOLS
JFCBPQTY EQU   JFCBS001+34
JFCBCTRI EQU   JFCBS001+37
JFCBSQTY EQU   JFCBS001+38
JFCFLGS1 EQU   JFCBS001+41
JFCBSPNM EQU   JFCBS001+45
JFCBFLG3 EQU   JFCBSPNM
PDWLIST  EQU   FORCORE
PDWWORK  EQU   DXDCB
IDAESPL  EQU   DXATCOM1
IDARRPL  EQU   DXATCOM1
IDARRFLG EQU   IDARRPL+1
IDARSTAT EQU   DXATEXC1
RSTAT    EQU   IDARSTAT
RSTATCRO EQU   RSTAT+1
IDARRSTR EQU   RSTATCRO
RSTATOP2 EQU   RSTAT+2
IDARRTN  EQU   DXATEXC2
RSTATRTN EQU   IDARRTN
HEBPTRS  EQU   CMBPTRS
AMBPTRS  EQU   AMBLDTA
SLPTR    EQU   OPWSAVE
MWAERMAP EQU   IDAERMAP
MWACROPT EQU   JFCAMCRO
NCK      EQU   MWACROPT
NRC      EQU   MWACROPT
IDAESTAE EQU   DXATCOM1
IDABASER EQU   IDAESTAE
IDADATAR EQU   IDAESTAE+4
IDARETRY EQU   IDAESTAE+8
IDACRWAP EQU   IDAESTAE+12
BUFCRSC1 EQU   BUFCAVL
DXBTAMX  EQU   DXREG1
DXDSNAME EQU   DXCCW5
FLC      EQU   PSA
IDARTSA  EQU   DXJBF
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
NRE      EQU   MWACROPT
RCK      EQU   MWACROPT
@NM00230 EQU   RSTAT+3
@NM00229 EQU   RSTATOP2
RSTATCSA EQU   RSTATOP2
IDARCURS EQU   RSTATCRO
IDARCRCU EQU   RSTATCRO
IDARCKPT EQU   RSTATCRO
RSTATOPT EQU   RSTAT
@NM00228 EQU   IDARRPL+2
@NM00227 EQU   IDARRFLG
RRPLVSAM EQU   IDARRFLG
@NM00226 EQU   IDARRFLG
@NM00225 EQU   IDARRPL
PDWORKSP EQU   PDWWORK+88
PDWERRCD EQU   PDWWORK+84
PDWMSGPT EQU   PDWWORK+80
PDWSAVED EQU   PDWWORK+76
PDWSAVEC EQU   PDWWORK+72
PDWSAVEB EQU   PDWWORK+68
PDWSAVEA EQU   PDWWORK+64
PDWSAVE  EQU   PDWWORK
WTPROUT  EQU   PDWLIST+75
WTPMSG   EQU   PDWLIST+4
WTPFLGS  EQU   PDWLIST+2
WTPLNGTH EQU   PDWLIST
JFCBEND  EQU   JFCBS001+58
JFCBSPTN EQU   JFCBS001+57
JFCBVLCT EQU   JFCBS001+56
JFCBDRLH EQU   JFCBS001+53
JFCBSBNM EQU   JFCBS001+50
JFCBABST EQU   JFCBS001+48
JFCBRV08 EQU   JFCBSPNM+1
JFCBRV07 EQU   JFCBFLG3
JFCBRV06 EQU   JFCBFLG3
JFCBRV05 EQU   JFCBFLG3
JFCBRV04 EQU   JFCBFLG3
JFCBRV03 EQU   JFCBFLG3
JFCBRV02 EQU   JFCBFLG3
JFCBEXP  EQU   JFCBFLG3
JFCDQDSP EQU   JFCBFLG3
JFCBDQTY EQU   JFCBS001+42
JFCBUAFF EQU   JFCFLGS1
JFCRSV45 EQU   JFCFLGS1
JFCVRDS  EQU   JFCFLGS1
JFCBCEOV EQU   JFCFLGS1
JFCRSV42 EQU   JFCFLGS1
JFCBADSP EQU   JFCFLGS1
JFCTOPEN EQU   JFCFLGS1
JFCBDLET EQU   JFCFLGS1
JFCRQID  EQU   JFCBSQTY
JFCROUND EQU   JFCBCTRI
JFCALX   EQU   JFCBCTRI
JFCMIXG  EQU   JFCBCTRI
JFCONTIG EQU   JFCBCTRI
JFCRSV29 EQU   JFCBCTRI
JFCBMSGP EQU   JFCBCTRI
JFCBSPAC EQU   JFCBCTRI
JFCRUNIT EQU   JFCBPQTY
JFCBEXAD EQU   JFCBS001+31
JFCBEXTL EQU   JFCBS001+30
JFCMSVGP EQU   JFCBS001+22
@NM00217 EQU   JFCBS001
JFCAVOLS EQU   JFCBVOLS
JFCBNVOL EQU   JFCUCSEG+9
JFCBNTCS EQU   JFCUCSEG+8
JFCSOWA  EQU   JFCOUTLI+1
JFCSEND  EQU   JFCCPRI
JFCEQUAL EQU   JFCCPRI
JFCRECV  EQU   JFCCPRI
JFCRSV34 EQU   JFCCPRI
JFCRSV33 EQU   JFCCPRI
JFCRSV55 EQU   JFCCPRI
JFCRSV54 EQU   JFCCPRI
JFCRSV53 EQU   JFCCPRI
JFCRSV27 EQU   JFCUCSOP
JFCRSV26 EQU   JFCUCSOP
JFCFCBVR EQU   JFCUCSOP
JFCFCBAL EQU   JFCUCSOP
JFCVER   EQU   JFCUCSOP
JFCRSV25 EQU   JFCUCSOP
JFCFOLD  EQU   JFCUCSOP
JFCBEXTP EQU   JFCUCSOP
JFCUCSID EQU   JFCUCSEG
JFCINTVL EQU   JFCSPPRT+19
JFCDBUFN EQU   JFCRESRV+3
JFCCYLOF EQU   JFCRESRV+2
JFCRKP   EQU   JFCRESRV
JFCPCIR2 EQU   JFCPCI
JFCPCIR1 EQU   JFCPCI
JFCPCIN2 EQU   JFCPCI
JFCPCIN1 EQU   JFCPCI
JFCPCIA2 EQU   JFCPCI
JFCPCIA1 EQU   JFCPCI
JFCPCIX2 EQU   JFCPCI
JFCPCIX1 EQU   JFCPCI
JFCBUFMX EQU   JFCNCP
JFCLRECL EQU   JFCAMSYN
JFCBAXBF EQU   JFCBUFSI
JFCREL   EQU   JFCREORG
JFCRSV22 EQU   JFCDEL
JFCSRCHD EQU   JFCRSV20
JFCOPTQ  EQU   JFCACT
JFCFEED  EQU   JFCIND
JFCCBWU  EQU   JFCEXT
JFCWUMSG EQU   JFCOVER
JFCSDNAM EQU   JFCWVCBD
@NM00216 EQU   JFCRECFM
JFCCHAR  EQU   JFCRECFM
JFCRFS   EQU   JFCRECFM
JFCRFB   EQU   JFCRECFM
JFCRFO   EQU   JFCRCFM
JFCFMREC EQU   JFCRCFM
JFCRSV16 EQU   JFCDSRG2
JFCRSV15 EQU   JFCDSRG2
JFCORGTR EQU   JFCDSRG2
JFCORGAM EQU   JFCDSRG2
JFCRSV13 EQU   JFCDSRG2
JFCORGTQ EQU   JFCDSRG2
JFCORGTX EQU   JFCDSRG2
JFCORGGS EQU   JFCDSRG2
JFCORGU  EQU   JFCDSRG1
JFCORGPO EQU   JFCDSRG1
JFCORGMQ EQU   JFCDSRG1
JFCORGCQ EQU   JFCDSRG1
JFCORGCX EQU   JFCDSRG1
JFCORGDA EQU   JFCDSRG1
JFCORGPS EQU   JFCDSRG1
JFCORGIS EQU   JFCDSRG1
JFCTRKBL EQU   JFCLIMCT+1
@NM00215 EQU   JFCLIMCT
JFCDEN   EQU   JFCSPPRT+1
JFCPRTSP EQU   JFCSPPRT
JFCONE   EQU   JFCMODE
JFCTWO   EQU   JFCMODE
JFCRSV07 EQU   JFCMODE
JFCRSV06 EQU   JFCMODE
JFCMODER EQU   JFCMODE
JFCMODEO EQU   JFCMODE
JFCEBCD  EQU   JFCMODE
JFCBIN   EQU   JFCMODE
JFCRSV32 EQU   JFCCODE
JFCTTY   EQU   JFCCODE
JFCASCII EQU   JFCCODE
JFCNCR   EQU   JFCCODE
JFCBUR   EQU   JFCCODE
JFCFRI   EQU   JFCCODE
JFCBCD   EQU   JFCCODE
JFCNOCON EQU   JFCCODE
DXRESIND EQU   @NM00213
DXSAVOFF EQU   @NM00212+7
DXSAVADR EQU   DXSAVMOD+2
DXSAVID  EQU   DXSAVMOD
DXABCODE EQU   @NM00212
DXRETCOD EQU   DXIDENT+7
DXRETTTR EQU   DXRETMOD+2
DXRETID  EQU   DXRETMOD
DXCALLID EQU   DXIDENT
DXREG0   EQU   DXREGSAV+24
DXREGE   EQU   DXREGSAV+20
DXREGD   EQU   DXREGSAV+16
DXREGC   EQU   DXREGSAV+12
DXREGB   EQU   DXREGSAV+8
DXREGA   EQU   DXREGSAV+4
DXREG9   EQU   DXREGSAV
DXXEND   EQU   DXXAREA+48
DXXLAST  EQU   DXXAREA+40
DXXCORE  EQU   DXXENTRY+5
DXETTR   EQU   DXXIDTTR+2
DXEID    EQU   DXXIDTTR
DXXPATHS EQU   DXXAREA+30
DXOPCLSW EQU   DXXLNG
DXXTXTLN EQU   DXXAREA+27
DXXMODSZ EQU   DXXAREA+24
DXXATTRB EQU   DXXAREA+22
@NM00197 EQU   DXXAREA+20
DXXPREFX EQU   DXXAREA+16
@NM00196 EQU   DXXAREA+12
DXXMODEP EQU   DXXAREA+8
DXXMODID EQU   DXXMODNM+6
@NM00195 EQU   DXXMODNM
DXXWTOPR EQU   DXXWTG
TIOUCBP  EQU   TIOEDEVE+1
TIOVERF  EQU   TIOSTTB
TIOUNLD  EQU   TIOSTTB
TIOMNTD  EQU   TIOSTTB
TIOSETU  EQU   TIOSTTB
TIOVLSR  EQU   TIOSTTB
TIOPVIO  EQU   TIOSTTB
TIOREQD  EQU   TIOSTTB
TIOUSED  EQU   TIOSTTB
RBRSV161 EQU   RBSECS09+64
RBSIRBWA EQU   RBSECS09
RBIQEWRK EQU   RBSECS08+4
RBNEXAV  EQU   RBSECS08
RBIQEA   EQU   RBIQE2
RBIQE1   EQU   RBIQE+1
RBUSE    EQU   RBIQE
RBSQEA   EQU   RBSQE+1
@NM00161 EQU   RBSQE
RBCDE1   EQU   RBCDE+1
RBCDLOAD EQU   RBCDFLGS
RBCDXCTL EQU   RBCDFLGS
RBCDSYNC EQU   RBCDFLGS
RBCDNODE EQU   RBCDFLGS
RBCDSAVE EQU   RBCDFLGS
RBCDATCH EQU   RBCDFLGS
RBRSV009 EQU   RBCDFLGS
RBNOCELL EQU   RBCDFLGS
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
PLHBMSV5 EQU   PLHEXTEN+24
PLHBMSV4 EQU   PLHEXTEN+20
PLHBMSV3 EQU   PLHEXTEN+16
PLHBMSV2 EQU   PLHEXTEN+12
PLHBMSV1 EQU   PLHEXTEN+8
PLHRDCNT EQU   PLHEXTEN+6
PLHBMSOV EQU   PLHBMWRK
PLHBEUC  EQU   PLHBMWRK
PLHBMRDF EQU   PLHBMWRK
@NM00110 EQU   PLHEXTEN+4
PLHRESR1 EQU   PLHEXTEN
JSCBEND3 EQU   JSCBSEC3+120
JSCRSV52 EQU   JSCBSEC3+116
JSCRSV51 EQU   JSCRSV47+1
JSCRSV50 EQU   JSCRSV47
JSCRSV49 EQU   JSCRSV46+1
JSCRSV48 EQU   JSCRSV46
JSCRSV44 EQU   JSCBSEC3+108
JSCRSV43 EQU   JSCBSEC3+104
JSCRSV42 EQU   JSCBSEC3+100
JSCBASWA EQU   JSCBSEC3+96
JSCBUFPT EQU   JSCBSEC3+92
JSCBACT  EQU   JSCBSEC3+88
JSCBSWSP EQU   JSCBSEC3+87
JSCRSV33 EQU   JSCBSEC3+86
JSCDDNUM EQU   JSCBSEC3+84
JSCRSV53 EQU   JSCBSEC3+82
JSCDDNNO EQU   JSCBSEC3+80
JSCBVATA EQU   JSCBSEC3+76
JSCTMCOR EQU   JSCBSEC3+72
JSCSCTP  EQU   JSCSCT+1
JSCRSV55 EQU   JSCSCT
JSCRSV54 EQU   JSCBSEC3+64
JSCBSSIB EQU   JSCBSEC3+56
JSCBFRBA EQU   JSCBSEC3+48
JSCRSV28 EQU   JSCBSEC3+46
JSCBSONO EQU   JSCBSEC3+44
JSCBSUBA EQU   JSCBSUB+1
JSCRSV31 EQU   JSCBSUB
JSCBSMLR EQU   JSCBSEC3+36
JSCBJNLR EQU   JSCBSEC3+32
JSCBJNLA EQU   JSCBJNL+1
JSCBJSBT EQU   JSCBJJSB
JSCBJSBX EQU   JSCBJJSB
JSCBJSBA EQU   JSCBJJSB
JSCBJSBI EQU   JSCBJJSB
@NM00087 EQU   JSCBJJSB
JSCBJNLE EQU   JSCBJJSB
JSCBJNLF EQU   JSCBJJSB
JSCBJNLN EQU   JSCBJJSB
@NM00086 EQU   JSCBSEC3+24
JSCBJRBA EQU   JSCBSEC3+16
JSCBIECB EQU   JSCBSEC3+12
JSCBRV08 EQU   JSCBSEC3+11
JSCBRV07 EQU   JSCBFBYT
JSCBRV06 EQU   JSCBFBYT
JSCBRV05 EQU   JSCBFBYT
JSCBRV04 EQU   JSCBFBYT
JSCBRV03 EQU   JSCBFBYT
JSCBRV02 EQU   JSCBFBYT
JSCBADSP EQU   JSCBFBYT
JSCBRV01 EQU   JSCBFBYT
JSCBTJID EQU   JSCBASID
JSCBPSCB EQU   JSCBSEC3+4
JSCJCTP  EQU   JSCBJCTA
JSCRSV24 EQU   JSCBJCT
JSCBEND2 EQU   JSCBSEC2
DEBEXPTA EQU   DEBEXPT+1
DEBRSV12 EQU   DEBRPSID
DEBRSV11 EQU   DEBRPSID
DEBRSV10 EQU   DEBRPSID
DEBRSV09 EQU   DEBRPSID
DEBRPSAP EQU   DEBRPSID
DEBRPSO  EQU   DEBRPSID
DEBRPSI  EQU   DEBRPSID
DEBRPSP  EQU   DEBRPSID
DEBFOEB  EQU   DEBFOEAD+1
DEBNOEE  EQU   DEBFOEAD
DEBFPEB  EQU   DEBFPEAD+1
DEBNPEE  EQU   DEBFPEAD
DEBFIEB  EQU   DEBFIEAD+1
DEBNIEE  EQU   DEBFIEAD
DEBBOESS EQU   DEBEODSS
DEBBOE0  EQU   DEBEOD0
DEBBOETT EQU   DEBEODTT
DEBBOERV EQU   DEBEODRV
DEBRV008 EQU   DEBDSID+7
DEBWTPTI EQU   DEBDSID+6
DEBEXDTE EQU   DEBDSID
DEBRV007 EQU   DEBEAMFG
DEBRV006 EQU   DEBEAMFG
DEBRV005 EQU   DEBEAMFG
DEBRV004 EQU   DEBEAMFG
DEBSECVL EQU   DEBEAMFG
DEBVAMSG EQU   DEBEAMFG
DEBDSOPN EQU   DEBEAMFG
DEBMULTI EQU   DEBEAMFG
DEBVSEQU EQU   DEBASC09+2
DEBDSSQL EQU   DEBASC09+1
DEBVOLAC EQU   DEBASC09
DEBWDCBA EQU   DEBWDCB+1
DEBRSV08 EQU   DEBWDCB
DEBPDCBA EQU   DEBPDCB+1
DEBRSV07 EQU   DEBPDCB
DEBRDCBA EQU   DEBRDCB+1
DEBRSV06 EQU   DEBRDCB
DEBSUCBB EQU   DEBSUCBA+1
DEBSDVM  EQU   DEBSUCBA
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
SAREG0   EQU   SAREGS+8
@NM00236 EQU   SACODE+3
PPSFC    EQU   SACODE+2
PPFUNC   EQU   SACODE+1
PPCODE   EQU   SACODE
SARTRN   EQU   SAREGS
SAFWRD   EQU   SAVAREA+8
@NM00235 EQU   SAVAREA
PREFIX   EQU   SWABLOCK
SLDATA   EQU   SAVELIST+16
SLID     EQU   SAVELIST+4
SLLENTH  EQU   SLR0+1
SLSUBPL  EQU   SLR0
VGTTCORE EQU   IDAVGTT+32
@NM00224 EQU   IDAVGTT+28
VGTTPSB  EQU   IDAVGTT+24
VGTTVUSE EQU   IDAVGTT+20
VGTTGSRK EQU   IDAVGTT+6
@NM00223 EQU   IDAVGTT+5
@NM00222 EQU   VGTTTYPE
VGTTCBIC EQU   VGTTTYPE
VGTTCTLG EQU   VGTTTYPE
VGTTLSR  EQU   VGTTTYPE
VGTTGSR  EQU   VGTTTYPE
VGTTSDS  EQU   VGTTTYPE
PDPSFI   EQU   IDAPDPRM+36
@NM00221 EQU   IDAPDPRM+35
PDPNOMSG EQU   PDPMSGFL
PDPNOTRC EQU   PDPMSGFL
PDPSPACE EQU   PDPMSGFL
PDPNOTFC EQU   PDPMSGFL
PDPKEY   EQU   IDAPDPRM+32
PDPDSN   EQU   IDAPDPRM+24
PDPVLSER EQU   IDAPDPRM+16
PDPUCB   EQU   IDAPDPRM+8
PDPSFC   EQU   IDAPDPRM+3
PDPFUNC  EQU   IDAPDPRM+2
PDPCODE  EQU   IDAPDPRM+1
JFCBXNXT EQU   JFCBX+172
@NM00220 EQU   JFCBX+144
JFCBXDEV EQU   JFCBX+140
JFCBXNAM EQU   JFCBX+96
@NM00219 EQU   JFCBX+94
JFCBXVOL EQU   JFCBX+4
@NM00218 EQU   JFCBX+3
JFCBXTTR EQU   JFCBX
JFCRSV05 EQU   JFCEROPT
JFCRSV04 EQU   JFCEROPT
JFCRSV03 EQU   JFCEROPT
JFCRSV02 EQU   JFCEROPT
JFCTOPT  EQU   JFCEROPT
JFCABN   EQU   JFCEROPT
JFCSKP   EQU   JFCEROPT
JFCACC   EQU   JFCEROPT
JFCBUFL  EQU   JFCAMPTR+2
JFCFWORD EQU   JFCBFTEK
JFCDWORD EQU   JFCBFTEK
JFCHIER1 EQU   JFCBFTEK
JFCDYN   EQU   JFCBFTEK
JFCEXC   EQU   JFCBFTEK
JFCBBFTR EQU   JFCBBFTA
JFCSIM   EQU   JFCBBFTA
JFCHIER  EQU   JFCBFTEK
JFCBFOUT EQU   JFCBUFNO
JFCBUFIN EQU   JFCBUFNO
JFCTEMP  EQU   JFCBIND2
JFCREQ   EQU   JFCBIND2
JFCENT   EQU   JFCBIND2
JFCSHARE EQU   JFCBIND2
JFCSECUR EQU   JFCBIND2
JFCDISP  EQU   JFCBIND2
JFCPDS   EQU   JFCBIND1
JFCGDG   EQU   JFCBIND1
JFCADDED EQU   JFCBIND1
JFCLOC   EQU   JFCBIND1
JFCRLSE  EQU   JFCBIND1
JFCBXPDT EQU   INFMJFCB+83
JFCBCRDT EQU   INFMJFCB+80
JFCBOPS2 EQU   JFCBMASK+7
JFCRCTLG EQU   JFCBFLG2
JFCBBUFF EQU   JFCBFLG2
JFCTRACE EQU   JFCBFLG2
JFCSDRPS EQU   JFCBFLG2
JFCMODNW EQU   JFCBFLG2
JFCNRPS  EQU   JFCDEFER
JFCOUTOP EQU   JFCBFLG2
JFCINOP  EQU   JFCBFLG2
JFCBPWBP EQU   JFCOPEN
@NM00214 EQU   JFCOPEN
JFCDUAL  EQU   JFCBFLG1
JFCSLDES EQU   JFCBFLG1
JFCSLCRE EQU   JFCBFLG1
JFCSTAND EQU   JFCBFLG1
JFCBOPS1 EQU   JFCBMASK
JFCBVLSQ EQU   INFMJFCB+70
JFCRSV31 EQU   JFCFUNC
JFCFNCBT EQU   JFCFUNC
JFCFNCBX EQU   JFCFUNC
JFCFNCBD EQU   JFCFUNC
JFCFNCBW EQU   JFCFUNC
JFCFNCBP EQU   JFCFUNC
JFCFNCBR EQU   JFCFUNC
JFCFNCBI EQU   JFCFUNC
JFCBFOFL EQU   JFCBUFOF
JFCNL    EQU   JFCBLTYP
JFCSL    EQU   JFCBLTYP
JFCNSL   EQU   JFCBLTYP
JFCSUL   EQU   JFCBLTYP
JFCBLP   EQU   JFCBLTYP
JFCBLTM  EQU   JFCBLTYP
JFCBAL   EQU   JFCBLTYP
JFCRSV38 EQU   JFCBLTYP
JFCVINDX EQU   INFMJFCB+64
JFCNLREC EQU   INFMJFCB+62
JFCBADBF EQU   INFMJFCB+60
JFCAMSTR EQU   JFCBFRID+2
JFCBDSCB EQU   INFMJFCB+53
JFCPAT   EQU   JFCBTSDM
JFCNDCB  EQU   JFCBTSDM
JFCNDSCB EQU   JFCBTSDM
JFCNWRIT EQU   JFCBTSDM
JFCTTR   EQU   JFCBTSDM
JFCSDS   EQU   JFCBTSDM
JFCVSL   EQU   JFCBTSDM
JFCCAT   EQU   JFCBTSDM
JFCIPLTX EQU   JFCBELNM
JFCBQNAM EQU   JFCBDSNM
APPNAMID EQU   APPNMTBL+24
APPOFFST EQU   APPENTRY+2
APPCOUNT EQU   APPENTRY
APPSIZE  EQU   APPNMTBL+2
APPBAL   EQU   APPNMTBL
WTGCORE  EQU   WTGENTRY+5
WTGETTR  EQU   WTGIDTTR+2
WTGEID   EQU   WTGIDTTR
WTGOPD   EQU   WTGPATHS+1
WTGRECHK EQU   WTGPATHS+1
WTGTSENQ EQU   WTGPATHS+1
@NM00211 EQU   WTGPATHS+1
WTGTRACE EQU   WTGPATHS+1
@NM00210 EQU   WTGPATHS
WTGJFCBW EQU   WTGPATHS
WTGSMF   EQU   WTGPATHS
WTGTCOS  EQU   WTGPATHS
WTGNSL   EQU   WTGPATHS
WTGPRLSE EQU   WTGPATHS
WTGLNG   EQU   WTG+29
WTGTXTLN EQU   WTGAREA+27
WTGMODSZ EQU   WTGAREA+24
WTGATTRB EQU   WTGAREA+22
@NM00209 EQU   WTGAREA+20
@NM00208 EQU   WTGAREA+12
WTGMODEP EQU   WTGAREA+8
WTGMODID EQU   WTGMODNM+6
@NM00207 EQU   WTGMODNM
DSMADTW6 EQU   DSMADTRL+20
DSMADTW5 EQU   DSMADTRL+16
DSMADTW4 EQU   DSMADTRL+12
DSMADTW3 EQU   DSMADTRL+8
DSMADTW2 EQU   DSMADTRL+4
DSMADTB4 EQU   DSMADTW1+3
DSMADTB3 EQU   DSMADTW1+2
@NM00206 EQU   DSMADTB2
DSMDSNE  EQU   DSMADTB2
DSMTIOTE EQU   DSMADTB2
DSMSMCE  EQU   DSMADTB2
DSMVTOCR EQU   DSMADTB2
DSMASWAP EQU   DSMADTB1
DSMUCBAL EQU   DSMADTB1
DSMRPSAP EQU   DSMADTB1
DSMLOCK  EQU   DSMADTB1
@NM00205 EQU   DSMADTB1
DSMVIO   EQU   DSMADTB1
DSMISAM  EQU   DSMADTB1
RRFWORK  EQU   RRPLIST+20
RRMLRTRY EQU   RRPLIST+16
RRUCBPTR EQU   RRXRETRY
RR1RETRY EQU   RRPLIST+8
RR1WRKAR EQU   RRPLIST+4
@NM00204 EQU   RRFLAGS3
RRFTERM  EQU   RRFLAGS3
RRFFCEXC EQU   RRFLAGS3
RRFFINFC EQU   RRFLAGS3
RRFNRTCA EQU   RRFLAGS3
@NM00203 EQU   RRFLAGS3
RRFENQUL EQU   RRFLAGS2
RRFPRDET EQU   RRFLAGS2
@NM00202 EQU   RRFLAGS2
RRFQMNGR EQU   RRFLAGS2
RRFENQPW EQU   RRFLAGS2
@NM00201 EQU   RRFLAGS2
RRFFIN1  EQU   RRFLAGS2
RRFTRACE EQU   RRFLAGS1
RRFSMF   EQU   RRFLAGS1
RRFNSL   EQU   RRFLAGS1
RRFAMSTR EQU   RRFLAGS1
RRFAMEXR EQU   RRFLAGS1
RRFAMEXG EQU   RRFLAGS1
RRFUSREX EQU   RRFLAGS1
@NM00200 EQU   RRFLAGS1
RRFRJFCB EQU   RRFUNCTN
RRFDADSM EQU   RRFUNCTN
DXDCBLST EQU   USERPRML
RWALIST  EQU   RWARESWA+12
RWAPARM  EQU   RWAPREFX+8
RWATRBUF EQU   RWAPREFX+4
RWATRACE EQU   RWAPREFX
IECQMNGR EQU   IECEXTPR+92
IECMSGQA EQU   IECEXTPR+88
IECDCBNO EQU   IECUPRML
IECRRPRM EQU   IECEXTPR+76
IECREGSV EQU   IECEXTPR
IECCORP2 EQU   IECPREFX+28
IECCORP1 EQU   IECPREFX+24
IECCORPS EQU   IECPREFX+20
IECCORSP EQU   IECPREFX+19
@NM00199 EQU   IECPREFX+17
IECCORKY EQU   IECPREFX+16
IECCORAD EQU   IECPREFX+12
IECCORLN EQU   IECPREFX+8
@NM00198 EQU   IECPREFX+4
IECCORID EQU   IECPREFX
DXATEXB2 EQU   DXATEXC2
DXEXHASP EQU   DXATEXB1
DXATCOM4 EQU   FORCORE+600
DXATCOM3 EQU   FORCORE+596
@NM00194 EQU   DXATCOM2+3
@NM00193 EQU   DXATALL
DXATSWAP EQU   DXATALL
DXATFC   EQU   DXATALL
@NM00192 EQU   DXATOPEN
DXATDFIN EQU   DXATOPEN
DXATDSIN EQU   DXATOPEN
DXATMODM EQU   DXATOPEN
DXATMODE EQU   DXATOPEN
DXATMODS EQU   DXATOPEN
DXATIGN  EQU   DXATOPEN
DXATVCAT EQU   DXATEOV
DXATDADM EQU   DXATEOV
DXATREMT EQU   DXATEOV
DXATDNEW EQU   DXATEOV
DXATDFRE EQU   DXATEOV
DXATDCHN EQU   DXATEOV
DXATNVOL EQU   DXATEOV
DXATCCAT EQU   DXATEOV
DXATRDDB EQU   DXATDACC
DXATEOF  EQU   DXATDACC
@NM00191 EQU   DXATDACC
DXATSMF  EQU   DXATDACC
DXATUPDB EQU   DXATDACC
DXATDRCT EQU   DXATDACC
DXATTRAK EQU   DXATDACC
DXATF1CE EQU   DXATDACC
DXATNSL  EQU   DXATOUTA
DXATTTM2 EQU   DXATOUTA
DXATTTM1 EQU   DXATOUTA
DXATTRL2 EQU   DXATOUTA
DXATTRL1 EQU   DXATOUTA
DXATDATM EQU   DXATOUTA
DXATHDTM EQU   DXATOUTA
DXATVLHD EQU   DXATOUTA
DXATCLOS EQU   DXATCOM1+1
DXATSRET EQU   DXATGENS
DXATVCIG EQU   DXATVGIV
DXATVTMG EQU   DXATVGIV
DXATVSMG EQU   DXATVGIV
DXATJFCB EQU   DXATGENS
DXATDISP EQU   DXATGENS
DXATREFR EQU   DXATGENS
DXATDMCT EQU   DXATGENS
DXMSGADR EQU   FORCORE+584
DXPRPARC EQU   FORCORE+580
DXUDCBML EQU   FORCORE+578
DXUDCBPL EQU   FORCORE+576
DXPACBAD EQU   DXPDCBAD+1
@NM00190 EQU   DXPDCBAD
DXUACBAD EQU   DXUDCBAD+1
@NM00189 EQU   DXUDCBAD
DXUCBSVV EQU   DXUCBSAV+1
@NM00188 EQU   DXUCBSAV
DXUCBADR EQU   FORCORE+560
DXTIOTAD EQU   FORCORE+556
DXDSAB   EQU   FORCORE+548
DXDSABQD EQU   FORCORE+540
DXJSCBAD EQU   FORCORE+536
DXTCBADR EQU   FORCORE+532
DXASCBAD EQU   FORCORE+528
DXEXTSW  EQU   FORCORE+527
DXUKEY   EQU   FORCORE+526
DXWKEYSV EQU   FORCORE+525
DXUNITOF EQU   FORCORE+522
DXNOUNIT EQU   FORCORE+520
DXVOLSEQ EQU   FORCORE+518
DXVOLMT3 EQU   DXVOLSR3
DXVOLMT2 EQU   DXVOLSR2
DXVOLMT1 EQU   DXVOLSR1
DXWORK4  EQU   FORCORE+496
DXWORK3  EQU   FORCORE+492
DXWORK2  EQU   FORCORE+488
DXWORK1  EQU   FORCORE+484
DXWORK   EQU   FORCORE+480
@NM00187 EQU   FORCORE+464
DXCCW11  EQU   DXCCW+80
DXCCW10  EQU   DXCCW+72
DXCCW9   EQU   DXCCW+64
DXCCW7   EQU   DXCCW+48
DXCCW6   EQU   DXCCW+40
DXCCW4   EQU   DXCCW+24
DXCCW3   EQU   DXCCW+16
DXCCW2   EQU   DXCCW+8
DXCCW1   EQU   DXCCW
DXDCBDEB EQU   DXDCB+44
@NM00186 EQU   DXDCB+24
DXDEBDCB EQU   DXDCB+20
@NM00185 EQU   DXDCB
DXDEB    EQU   DXDAADDR+4
@NM00184 EQU   DXDAADDR
DXECB    EQU   FORCORE+276
DSCCORE  EQU   FORCORE+96
DXLBL    EQU   DXDSCB
VSRTCSLN EQU   VSRTCSL+5
VSRTCSSP EQU   VSRTCSL+4
VSRTCSAD EQU   VSRTCSL+1
VSRTCSBH EQU   VSRTCSLF
VSRTCSIO EQU   VSRTCSLF
VSRTCSPL EQU   VSRTCSLF
VSRTCSWS EQU   VSRTCSLF
VSRTCSVG EQU   VSRTCSPF
VSRTCSGT EQU   VSRTCSBF
VSRTCSVS EQU   VSRTCSLF
VSRTCSFX EQU   VSRTCSLF
VSRTNEXT EQU   IDAVSRT+40
VSRTASCB EQU   IDAVSRT+36
VSRTVIOT EQU   IDAVSRT+32
VSRTSTRN EQU   IDAVSRT+15
@NM00183 EQU   VSRTFLGS
VSRTBFRF EQU   VSRTFLGS
VSRTIOBF EQU   VSRTFLGS
VSRTLSRF EQU   VSRTFLGS
VSRTGSRF EQU   VSRTFLGS
VSRTEOV  EQU   IDAVSRT+8
VSRTID   EQU   IDAVSRT+4
VSRTLEN  EQU   IDAVSRT+2
VSRTKEY  EQU   IDAVSRT+1
VSRTBKID EQU   IDAVSRT
VMTUCB   EQU   VMTVOL+12
VMTVLSER EQU   VMTVOL+6
@NM00182 EQU   VMTVOL+5
@NM00181 EQU   VMTVFLG1
VMTOPEN  EQU   VMTVFLG1
VMTUSECT EQU   VMTVOL
VMTDVTYP EQU   VMTDEV+1
VMTDVOPT EQU   VMTDEV
@NM00180 EQU   IDAVMT+10
VMTNOVOL EQU   IDAVMT+8
@NM00179 EQU   VMTHDR+1
VMTID    EQU   VMTHDR
VCRHESPT EQU   VCRHEFMN+4
VCRHELN  EQU   VCRHEFMN+1
VCRHESP  EQU   VCRHEFMN
VCRHFCON EQU   VCRHFLG
VCRCDATA EQU   VCRCORE+24
VCRCLENA EQU   VCRCHDR+20
VCRCPTRA EQU   VCRCHDR+16
VCRCLEN  EQU   VCRCDESC+1
VCRCSP   EQU   VCRCDESC
VCRCNEXT EQU   VCRCHDR+8
VCRCNM   EQU   VCRCHDR
@NM00178 EQU   IDAVCRT+22
VCRCOREH EQU   IDAVCRT+12
VCRIDNM  EQU   IDAVCRT+4
@NM00177 EQU   VCRFLAG1
VCROUT   EQU   VCRFLAG1
VCRID    EQU   IDAVCRT
VATAMBL  EQU   IDAVAT+28
VATNAE   EQU   IDAVAT+24
@NM00176 EQU   IDAVAT+22
VATENO   EQU   VATVC+1
VATVRT   EQU   VATVC
VATVUSE  EQU   VATVSRT
VATNEXT  EQU   IDAVAT+4
VATLEN   EQU   VATHDR+2
@NM00175 EQU   VATHDR+1
VATID    EQU   VATHDR
UPTBG    EQU   UPTAXENT+10
UPTLNCDE EQU   UPTAXENT+9
UPTPASS  EQU   UPTAXENT+8
UPTRKP   EQU   UPTAXENT+6
UPTF1PUD EQU   UPTFLG1+1
UPTF1PNU EQU   UPTFLG1+1
UPTF1ERA EQU   UPTFLG1+1
UPTF1PHY EQU   UPTFLG1+1
UPTF1LOG EQU   UPTFLG1+1
UPTF1BKO EQU   UPTFLG1+1
UPTF1UPG EQU   UPTFLG1
UPTF1RTY EQU   UPTFLG1
UPTF1KEY EQU   UPTFLG1
UPTF1NRF EQU   UPTFLG1
UPTF1NUK EQU   UPTFLG1
UPTF1ATV EQU   UPTFLG1
UPTF1LST EQU   UPTFLG1
UPTF1LOP EQU   UPTRPL
UPTR15   EQU   UPTSA+16
UPTR14   EQU   UPTSA+12
UPTSARES EQU   UPTSA+11
@NM00174 EQU   UPTSA+10
UPTBERCD EQU   UPTSA+9
UPTBEREG EQU   UPTSA+8
UPTLSA   EQU   UPTSA+4
UPTBRPL  EQU   UPTSA
UPTLLEN  EQU   IDAUPT+14
UPTNOENT EQU   IDAUPT+13
UPTRSC   EQU   IDAUPT+12
UPTOLD   EQU   IDAUPT+8
UPTNEW   EQU   IDAUPT+4
UPTLEN   EQU   UPTHDR+2
UPTPWS   EQU   UPTFLG0
UPTID    EQU   UPTHDR
TIOTFEND EQU   POOLSTAR+16
TIOPSLOT EQU   POOLSTAR+13
TIOPSTTB EQU   POOLSTAR+12
TIOPPOOL EQU   POOLSTAR+4
TIOPNSRT EQU   POOLSTAR+3
@NM00173 EQU   POOLSTAR+2
TIOPNSLT EQU   POOLSTAR+1
@NM00172 EQU   POOLSTAR
TIOEFSRT EQU   TIOENTRY+17
TIOSVERF EQU   TIOESTTB
TIOSUNLD EQU   TIOESTTB
TIOSMNTD EQU   TIOESTTB
TIOSSETU EQU   TIOESTTB
TIOSVLSR EQU   TIOESTTB
TIOSPVIO EQU   TIOESTTB
TIOSREQD EQU   TIOESTTB
TIOSUSED EQU   TIOESTTB
TIOSBALS EQU   TIOESTTC
TIOSBALP EQU   TIOESTTC
TIOSVOLS EQU   TIOESTTC
TIOSVOLP EQU   TIOESTTC
TIOSAFFS EQU   TIOESTTC
TIOSAFFP EQU   TIOESTTC
TIOSDEFR EQU   TIOESTTC
TIOSDKCR EQU   TIOESTTC
TIOTREM  EQU   TIOELINK
TIOESSDS EQU   TIOESYOT
TIOESYIN EQU   TIOELINK
TIOEQNAM EQU   TIOELINK
TIOEDYNM EQU   TIOELINK
TIOTTERM EQU   TIOELINK
TIOTRV01 EQU   TIOELINK
TIOSYOUT EQU   TIOELINK
TIOEWTCT EQU   TIOERLOC
TIOSDSP2 EQU   TIOESTTA
TIOSDSP1 EQU   TIOESTTA
TIOSLABL EQU   TIOESTTA
TIOSDADS EQU   TIOESTTA
TIOSJBLB EQU   TIOESTTA
TIOSPLTS EQU   TIOESTTA
TIOSPLTP EQU   TIOESTTA
TIOSLTYP EQU   TIOESTTA
TIOELNGH EQU   TIOENTRY
TIOCSTEP EQU   TIOT1+8
TIOCNJOB EQU   TIOT1
@NM00171 EQU   TCBXTNT2+32
TCBRV181 EQU   TCBRV173
TCBRV180 EQU   TCBRV173
TCBRV179 EQU   TCBRV173
TCBRV178 EQU   TCBRV173
TCBRV177 EQU   TCBRV173
TCBRV176 EQU   TCBRV173
TCBRV175 EQU   TCBRV173
TCBRV174 EQU   TCBRV173
TCBRV172 EQU   TCBRV164
TCBRV171 EQU   TCBRV164
TCBRV170 EQU   TCBRV164
TCBRV169 EQU   TCBRV164
TCBRV168 EQU   TCBRV164
TCBRV167 EQU   TCBRV164
TCBRV166 EQU   TCBRV164
TCBRV165 EQU   TCBRV164
TCBRV163 EQU   TCBRV155
TCBRV162 EQU   TCBRV155
TCBRV161 EQU   TCBRV155
TCBRV160 EQU   TCBRV155
TCBRV159 EQU   TCBRV155
TCBRV158 EQU   TCBRV155
TCBRV157 EQU   TCBRV155
TCBRV156 EQU   TCBRV155
TCBRV154 EQU   TCBRV146
TCBRV153 EQU   TCBRV146
TCBRV152 EQU   TCBRV146
TCBRV151 EQU   TCBRV146
TCBRV150 EQU   TCBRV146
TCBRV149 EQU   TCBRV146
TCBRV148 EQU   TCBRV146
TCBRV147 EQU   TCBRV146
TCBRV145 EQU   TCBXTNT2+26
TCBRV144 EQU   TCBXTNT2+24
TCBCAUF  EQU   TCBXTNT2+20
TCBRV142 EQU   TCBXTNT2+16
TCBRSV49 EQU   TCBXTNT2+12
TCBEVENT EQU   TCBXTNT2+8
TCBRCMP  EQU   TCBXTNT2+5
TCBRSVAB EQU   TCBXTNT2+4
TCBGTFA  EQU   TCBGTF+1
TCBRSV47 EQU   TCBTFLG
TCBRSV46 EQU   TCBTFLG
TCBRSV45 EQU   TCBTFLG
TCBRSV44 EQU   TCBTFLG
TCBRSV43 EQU   TCBTFLG
TCBDSPIT EQU   TCBTFLG
TCBERRTN EQU   TCBTFLG
TCBASYNC EQU   TCBTFLG
@NM00170 EQU   TCB+296
TCBSVCA2 EQU   TCB+292
TCBSWASA EQU   TCB+288
TCBDBTB  EQU   TCB+284
TCBRPT   EQU   TCB+280
TCBRV141 EQU   TCBRV133
TCBRV140 EQU   TCBRV133
TCBRV139 EQU   TCBRV133
TCBRV138 EQU   TCBRV133
TCBRV137 EQU   TCBRV133
TCBRV136 EQU   TCBRV133
TCBRV135 EQU   TCBRV133
TCBRV134 EQU   TCBRV133
TCBRV132 EQU   TCBRV124
TCBRV131 EQU   TCBRV124
TCBRV130 EQU   TCBRV124
TCBRV129 EQU   TCBRV124
TCBRV128 EQU   TCBRV124
TCBRV127 EQU   TCBRV124
TCBRV126 EQU   TCBRV124
TCBRV125 EQU   TCBRV124
TCBRV123 EQU   TCBFBYT2
TCBRV122 EQU   TCBFBYT2
TCBECBNV EQU   TCBFBYT2
TCBSSSYN EQU   TCBFBYT2
TCBFPRAP EQU   TCBFBYT2
TCBFDW   EQU   TCBFBYT2
TCBFMW   EQU   TCBFBYT2
TCBCNCB  EQU   TCBFBYT2
TCBLLH   EQU   TCBFBYT1
TCBRV113 EQU   TCBFBYT1
TCBEOT   EQU   TCBFBYT1
TCBRTM2  EQU   TCBFBYT1
TCBPGNLY EQU   TCBFBYT1
TCBNDIOS EQU   TCBFBYT1
TCBRV327 EQU   TCBFBYT1
TCBEOTFM EQU   TCBFBYT1
TCBAFFN  EQU   TCB+274
TCBRV326 EQU   TCB+272
TCBUKYSP EQU   TCB+268
TCBMODE  EQU   TCBESTAE+3
TCBERTYP EQU   TCBESTAE+2
TCBRV314 EQU   TCBESTRM
TCBRV313 EQU   TCBESTRM
TCBRV312 EQU   TCBESTRM
TCBRV311 EQU   TCBESTRM
TCBRV310 EQU   TCBESTRM
TCBRV309 EQU   TCBESTRM
TCBSTAFX EQU   TCBESTRM
TCBETERM EQU   TCBESTRM
TCBSCBKY EQU   TCBESTAE
TCBRTM12 EQU   TCB+260
TCBTCBID EQU   TCB+256
TCBSTAWA EQU   TCB+252
TCBSWA   EQU   TCB+248
TCBFOEA  EQU   TCBFOE+1
TCBRSV42 EQU   TCBFOE
TCBCCPVI EQU   TCBXSCT+2
TCBRV325 EQU   TCBXSCT+1
TCBRV324 EQU   TCBXSCT1
TCBRV323 EQU   TCBXSCT1
TCBRV322 EQU   TCBXSCT1
TCBRV321 EQU   TCBXSCT1
TCBRV320 EQU   TCBXSCT1
TCBRV319 EQU   TCBXSCT1
TCBS3A   EQU   TCBXSCT1
TCBACTIV EQU   TCBXSCT1
TCBRSV41 EQU   TCB+239
TCBTID   EQU   TCB+238
TCBRSVAA EQU   TCB+237
TCBABCUR EQU   TCB+236
TCBTMSAV EQU   TCB+232
TCBIOTIM EQU   TCB+228
TCBRTWA  EQU   TCB+224
TCBBACK  EQU   TCB+220
TCBTIRB  EQU   TCB+216
TCBAECB  EQU   TCB+212
TCBEXT2A EQU   TCBEXT2+1
TCBRSV39 EQU   TCBEXT2
TCBSTMCT EQU   TCB+207
TCBSYSCT EQU   TCB+206
TCBRSV37 EQU   TCB+205
TCBEXSVC EQU   TCBDAR
TCBDARMS EQU   TCBDAR
TCBDARWT EQU   TCBDAR
TCBDARO  EQU   TCBDAR
TCBDARMC EQU   TCBDARC
TCBDARD  EQU   TCBDAR
TCBDARS  EQU   TCBDAR
TCBDARP  EQU   TCBDAR
TCBGTOFM EQU   TCBFLGS7
TCBADMP  EQU   TCBFLGS7
TCBRSTSK EQU   TCBFLGS7
TCBSVCS  EQU   TCBFLGS7
TCBSTACK EQU   TCBFLGS7
TCBRSV34 EQU   TCBFLGS7
TCBRSV33 EQU   TCBFLGS7
TCBGPECB EQU   TCBFLGS7
TCBNTJS  EQU   TCBFLGS6
TCBAPG   EQU   TCBFLGS6
TCBMIGR  EQU   TCBFLGS6
TCBRV303 EQU   TCBFLGS6
TCBSPVLK EQU   TCBFLGS6
TCBCPU   EQU   TCBFLGS6
TCBPIE17 EQU   TCBFLGS6
TCBRV    EQU   TCBFLGS6
TCBRSV79 EQU   TCBNDSP5
TCBRSV78 EQU   TCBNDSP5
TCBRSV77 EQU   TCBNDSP5
TCBRSV76 EQU   TCBNDSP5
TCBRSV75 EQU   TCBNDSP5
TCBRSV74 EQU   TCBNDSP5
TCBRSV95 EQU   TCBNDSP5
TCBRSV94 EQU   TCBNDSP5
TCBRSV93 EQU   TCBNDSP4
TCBRSV92 EQU   TCBNDSP4
TCBRSV91 EQU   TCBNDSP4
TCBRSV90 EQU   TCBNDSP4
TCBRSV89 EQU   TCBNDSP4
TCBRSV88 EQU   TCBNDSP4
TCBRSV87 EQU   TCBNDSP4
TCBRSV86 EQU   TCBNDSP4
TCBEXT1A EQU   TCBEXT1+1
TCBRSV32 EQU   TCBEXT1
TCBEXCPD EQU   TCB+192
TCBIOBRC EQU   TCB+188
TCBDDWTC EQU   TCB+186
TCBDDEXC EQU   TCB+184
TCBJSCBB EQU   TCBJSCB+1
@NM00169 EQU   TCBRECDE
TCBREC   EQU   TCBRECDE
TCBMDIDS EQU   TCB+176
TCBNDINT EQU   TCBNDSP3
TCBRSV27 EQU   TCBNDSP3
TCBRSV26 EQU   TCBNDSP3
TCBRSV25 EQU   TCBNDSP3
TCBRSV24 EQU   TCBNDSP3
TCBSRBND EQU   TCBNDSP3
TCBRV302 EQU   TCBNDSP3
TCBLJSND EQU   TCBNDSP3
TCBABE   EQU   TCBNDSP2
TCBDSS   EQU   TCBNDSP2
TCBOWAIT EQU   TCBNDSP2
TCBIWAIT EQU   TCBNDSP2
TCBNDTS  EQU   TCBNDSP2
TCBNDSVC EQU   TCBNDSP2
TCBSTPP  EQU   TCBNDSP2
TCBABD   EQU   TCBNDSP2
TCBRSV22 EQU   TCBNDSP1
TCBPIEND EQU   TCBNDSP1
TCBTPSP  EQU   TCBNDSP1
TCBDDRND EQU   TCBNDSP1
TCBRSPND EQU   TCBNDSP1
TCBRSTND EQU   TCBNDSP1
TCBDARPN EQU   TCBNDSP1
TCBDARTN EQU   TCBNDSP1
TCBNDSP0 EQU   TCBNDSP
TCBUSER  EQU   TCB+168
TCBTCTB  EQU   TCBTCT+1
TCBRSV9C EQU   TCBTCTGF
TCBRSV9B EQU   TCBTCTGF
TCBRSV9A EQU   TCBTCTGF
TCBRSV99 EQU   TCBTCTGF
TCBRSV98 EQU   TCBTCTGF
TCBRSV97 EQU   TCBTCTGF
TCBRSV20 EQU   TCBTCTGF
TCBSMFGF EQU   TCBTCTGF
TCBSTABB EQU   TCBSTAB+1
TCBSTCUR EQU   TCBNSTAE
TCBRV301 EQU   TCBNSTAE
TCBSYNCH EQU   TCBNSTAE
TCBHALT  EQU   TCBNSTAE
TCBPPSUP EQU   TCBNSTAE
TCB33E   EQU   TCBNSTAE
TCBQUIES EQU   TCBNSTAE
TCBSTABE EQU   TCBNSTAE
TCBAQE   EQU   TCB+156
TCBPQE   EQU   TCB+152
TCBTSDP  EQU   TCB+151
TCBTSLP  EQU   TCB+150
TCBSTPCT EQU   TCB+149
TCBCPUBN EQU   TCBTSFLG
TCBDYDSP EQU   TCBTSFLG
TCBRSV18 EQU   TCBTSFLG
TCBRSV17 EQU   TCBTSFLG
TCBTIOTG EQU   TCBTSFLG
TCBATT   EQU   TCBTSFLG
TCBSTPPR EQU   TCBTSFLG
TCBRV300 EQU   TCBTSTSK
TCBECB   EQU   TCB+144
TCBIQE   EQU   TCB+140
TCBLTC   EQU   TCB+136
TCBOTC   EQU   TCB+132
TCBNTC   EQU   TCB+128
TCBJSTCA EQU   TCBJSTCB+1
TCBRSV16 EQU   TCBJSTCB
TCBTQET  EQU   TCBTME
TCBTCB   EQU   TCB+116
TCBFSAB  EQU   TCBFSA+1
TCBQEL   EQU   TCBFSA
TCBGRS15 EQU   TCBGRS+60
TCBGRS14 EQU   TCBGRS+56
TCBGRS13 EQU   TCBGRS+52
TCBGRS12 EQU   TCBGRS+48
TCBGRS11 EQU   TCBGRS+44
TCBGRS10 EQU   TCBGRS+40
TCBGRS9  EQU   TCBGRS+36
TCBGRS8  EQU   TCBGRS+32
TCBGRS7  EQU   TCBGRS+28
TCBGRS6  EQU   TCBGRS+24
TCBGRS5  EQU   TCBGRS+20
TCBGRS4  EQU   TCBGRS+16
TCBGRS3  EQU   TCBGRS+12
TCBGRS2  EQU   TCBGRS+8
TCBGRS1  EQU   TCBGRS+4
TCBGRS0  EQU   TCBGRS
TCBJPQB  EQU   TCBJPQ+1
TCBRSV15 EQU   TCBPURGE
TCBRSV14 EQU   TCBPURGE
TCBRSV13 EQU   TCBPURGE
TCBRSV12 EQU   TCBPURGE
TCBRSV11 EQU   TCBPURGE
TCBRSV10 EQU   TCBPURGE
TCBRSV09 EQU   TCBPURGE
TCBJPQF  EQU   TCBPURGE
TCBJLB   EQU   TCB+40
TCBLLS   EQU   TCB+36
TCBDSP   EQU   TCB+35
TCBLMP   EQU   TCB+34
TCBPNDSP EQU   TCBFLGS5
TCBFCD1  EQU   TCBFLGS5
TCBSTP   EQU   TCBFLGS5
TCBSYS   EQU   TCBFLGS5
TCBANDSP EQU   TCBFLGS5
TCBPAGE  EQU   TCBFLGS5
TCBUXNDF EQU   TCBABWF
TCBFC    EQU   TCBFLGS5
TCBONDSP EQU   TCBFLGS4
TCBMPCND EQU   TCBFLGS4
TCBMPCVQ EQU   TCBFLGS4
TCBUXNDV EQU   TCBFLGS4
TCBHNDSP EQU   TCBFLGS4
TCBRQENA EQU   TCBFLGS4
TCBSER   EQU   TCBFLGS4
TCBNDUMP EQU   TCBFLGS4
TCBDWSTA EQU   TCBFLGS3
TCBRSV08 EQU   TCBFLGS3
TCBRSV07 EQU   TCBFLGS3
TCBRSV06 EQU   TCBFLGS3
TCBABGM  EQU   TCBFLGS3
TCBABTRM EQU   TCBFLGS3
TCBADINP EQU   TCBFLGS3
TCBFSM   EQU   TCBFLGS3
TCBFTS   EQU   TCBFLGS2
TCBFETXR EQU   TCBFLGS2
TCBFDSOP EQU   TCBFLGS2
TCBFJMC  EQU   TCBFLGS2
TCBFSMC  EQU   TCBFLGS2
TCBFABOP EQU   TCBFLGS2
TCBFSTI  EQU   TCBFLGS2
TCBFOINP EQU   TCBFLGS2
TCBFX    EQU   TCBFLGS1
TCBFS    EQU   TCBFLGS1
TCBFT    EQU   TCBFLGS1
TCBPDUMP EQU   TCBFLGS1
TCBNONPR EQU   TCBFLGS1
TCBFERA  EQU   TCBFLGS1
TCBFE    EQU   TCBFLGS1
TCBFA    EQU   TCBFLGS1
TCBZERO  EQU   TCBPKF
TCBFLAG  EQU   TCBPKF
TCBMSSB  EQU   TCBMSS+1
TCBRSV03 EQU   TCBMSS
TCBTRNB  EQU   TCBTRN+1
TCBRSV02 EQU   TCBABF
TCBOLTEP EQU   TCBABF
TCBTCP   EQU   TCBABF
TCBTCPP  EQU   TCBABF
TCBRSV01 EQU   TCBABF
TCBGRPH  EQU   TCBABF
TCBNOCHK EQU   TCBABF
TCBMOD91 EQU   TCBABF
TCBCMPC  EQU   TCBCMP+1
TCBRV318 EQU   TCBCMSG
TCBRV317 EQU   TCBCIND
TCBRV316 EQU   TCBCWTO
TCBCASID EQU   TCBCDBL
TCBNOCC  EQU   TCBSTCC
TCBDMPO  EQU   TCBCPP
TCBCSTEP EQU   TCBCMPF
TCBCREQ  EQU   TCBCMPF
TCBPIEA  EQU   TCBPIE+1
TCBPM    EQU   TCBPMASK
@NM00168 EQU   TCBPMASK
TCBFRS6  EQU   TCBFRS+24
TCBFRS4  EQU   TCBFRS+16
TCBFRS2  EQU   TCBFRS+8
TCBFRS0  EQU   TCBFRS
RSTIOT   EQU   RSTWA+440
RSTIOTL  EQU   RSTWA+432
RSREGSAV EQU   RSTWA+360
RSERAS09 EQU   RSTWA+356
RSERAS08 EQU   RSTWA+352
RSERAS07 EQU   RSTWA+348
RSERAS06 EQU   RSTWA+344
RSERAS05 EQU   RSTWA+340
RSERAS04 EQU   RSTWA+336
RSERAS03 EQU   RSTWA+332
RSERAS02 EQU   RSTWA+328
RSERAS01 EQU   RSTWA+324
RSERAS00 EQU   RSTWA+320
RSIOBCP  EQU   RSTWA+200
RSIOBPT1 EQU   RSTWA+196
RSAREA1  EQU   RSTWA+192
RSDCBAD1 EQU   RSDCB
RSLNGTH1 EQU   XCTLNAM1+6
RSTYPE1  EQU   XCTLNAM1+4
RSDECB1  EQU   RSECB1
RSBDCB   EQU   RSTWA+92
RSSSCR   EQU   RSTWA+88
RSPIE    EQU   RSTWA+84
RSNSTAE  EQU   RSTWA+80
RSSVRB   EQU   RSTWA+76
@NM00167 EQU   RSTWA+74
RSRETCD1 EQU   RSRETCOD
RSDCBSI  EQU   RSTWA+70
RSFLAG2  EQU   RSTWA+69
RSFLAG1  EQU   RSTWA+68
RSSVRBN  EQU   RSTWA+64
RSCIRTTR EQU   RSTWA+60
RSTIOTAD EQU   RSTWA+56
RSTIOTO  EQU   RSTWA+52
RSPPEL   EQU   RSTWA+48
RSPPML   EQU   RSTWA+44
RSPPE    EQU   RSTWA+40
RSPPM    EQU   RSTWA+36
RSTCBAD  EQU   RSTWA+32
RSINT    EQU   RSTWA+28
RSDCBFLG EQU   RSDCBL
RSBUFL   EQU   RSTWA+20
RSWACL   EQU   RSTWA+16
RSCKDCB  EQU   RSTWA+12
RSBFOFST EQU   RSTWA+8
RSMWOFST EQU   RSTWA+4
RSWAOFST EQU   RSTWA
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00166 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
@NM00165 EQU   RPLRBAR+3
@NM00164 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00163 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLBUFL  EQU   RPLCOMN+52
RPLCHAIN EQU   RPLNXTRP
@NM00162 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLWAITX EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
SVRBEND  EQU   RBSECT+192
RBFEPARM EQU   RBSECT+168
SIRBEND  EQU   RBSECT+168
RBRSV158 EQU   RBRSV150
RBRSV157 EQU   RBRSV150
RBRSV156 EQU   RBRSV150
RBRSV155 EQU   RBRSV150
RBRSV154 EQU   RBRSV150
RBRSV153 EQU   RBRSV150
RBRSV152 EQU   RBRSV150
RBRSV151 EQU   RBRSV150
RBRSV149 EQU   RBSECT+166
RBRSV148 EQU   RBSECT+164
RBRSV169 EQU   RBSDATA+3
RBSID    EQU   RBSDATA+2
RBSPKEY  EQU   RBSDATA+1
RBRSV168 EQU   RBSFLG3
RBSTERMO EQU   RBSFLG3
RBSBRNTR EQU   RBSFLG3
RBSPRNTR EQU   RBSFLG3
RBSCNCEL EQU   RBSFLG3
RBSRECRD EQU   RBSFLG3
RBSTERMI EQU   RBSFLG3
RBRSV167 EQU   RBSFLG3
RBSOWNRA EQU   RBSOWNR+1
RBSSUPER EQU   RBSFLGS2
RBSKEY0  EQU   RBSFLGS2
RBRSV166 EQU   RBSFLGS2
RBRSV165 EQU   RBSFLGS2
RBSINUSE EQU   RBSFLGS2
RBRSV164 EQU   RBSFLGS2
RBSXCTL2 EQU   RBSFLGS2
RBRSV163 EQU   RBSFLGS2
RBSPARMA EQU   RBSPARM+1
RBSHALT  EQU   RBSIOPRC
RBSNOIOP EQU   RBSIOPRC
RBSASYNC EQU   RBSFLGS1
RBRSV162 EQU   RBSFLGS1
RBSESTAE EQU   RBSFLGS1
RBSDUMMY EQU   RBSFLGS1
RBSSTAR  EQU   RBSFLGS1
RBSSTAI  EQU   RBSFLGS1
RBSEXIT  EQU   RBSCBB+4
RBSCHAIN EQU   RBSCBB
TIRBEND  EQU   @NM00160+8
PRBEND   EQU   @NM00160+8
RBRSV146 EQU   RBRSV138
RBRSV145 EQU   RBRSV138
RBRSV144 EQU   RBRSV138
RBRSV143 EQU   RBRSV138
RBRSV142 EQU   RBRSV138
RBRSV141 EQU   RBRSV138
RBRSV140 EQU   RBRSV138
RBRSV139 EQU   RBRSV138
RBRSV137 EQU   @NM00160+6
RBRSV136 EQU   @NM00160+4
RBRSV135 EQU   @NM00160
@NM00159 EQU   RBSECT+32
@NM00158 EQU   @NM00156+1
RBSCF    EQU   @NM00157
RBPGMQ1  EQU   RBPGMQ+1
@NM00155 EQU   RBPGMQ
@NM00154 EQU   RBSECT+16
@NM00153 EQU   @NM00149
@NM00152 EQU   @NM00149
RBIQETP  EQU   @NM00149
RBUSIQE  EQU   RBETXR
RBATTN   EQU   @NM00149
@NM00151 EQU   @NM00149
@NM00150 EQU   @NM00149
RBPMSVRB EQU   @NM00147
RBATNXIT EQU   @NM00147
@NM00148 EQU   @NM00147
RBWAITP  EQU   @NM00147
RBFNSVRB EQU   RBTRSVRB
RBFTP    EQU   @NM00147
RBSIZE   EQU   RBSECT+8
RBABOPSW EQU   RBSECT+4
RBPPSAV1 EQU   RBPPSAV+1
@NM00145 EQU   RBPPSAV
RBPRFXND EQU   RBPREFIX+64
RBINTCOD EQU   RBINTCDA+1
RBINLNTH EQU   RBINTCDA
RBWCSA   EQU   RBPREFIX+60
RBRSV004 EQU   RBPREFIX+57
RBSSSYN  EQU   RBFLAGS1
RBSCB    EQU   RBFLAGS1
RBLONGWT EQU   RBFLAGS1
RBASIR   EQU   RBFLAGS1
RBRSV159 EQU   RBFLAGS1
RBABEND  EQU   RBFLAGS1
RBXWAIT  EQU   RBFLAGS1
RBSLOCK  EQU   RBFLAGS1
RBRTRAN  EQU   RBRTPSW2+4
RBRTINCD EQU   RBRTICIL+2
RBRTILC  EQU   RBRTICIL+1
RBRSV160 EQU   RBRTICIL
RBRTPSW1 EQU   RBRTOPSW
RBRSV062 EQU   RBRSV054
RBRSV061 EQU   RBRSV054
RBRSV060 EQU   RBRSV054
RBRSV059 EQU   RBRSV054
RBRSV058 EQU   RBRSV054
RBRSV057 EQU   RBRSV054
RBRSV056 EQU   RBRSV054
RBRSV055 EQU   RBRSV054
RBRSV053 EQU   RBPREFIX+38
RBRSV052 EQU   RBPREFIX+36
RBRSV051 EQU   RBPREFIX+32
RBPRFXST EQU   RBPREFIX+32
RBRSV050 EQU   RBPREFIX+28
RBRSV049 EQU   RBRSV041
RBRSV048 EQU   RBRSV041
RBRSV047 EQU   RBRSV041
RBRSV046 EQU   RBRSV041
RBRSV045 EQU   RBRSV041
RBRSV044 EQU   RBRSV041
RBRSV043 EQU   RBRSV041
RBRSV042 EQU   RBRSV041
RBRSV040 EQU   RBPREFIX+26
RBRSV039 EQU   RBPREFIX+24
RBRSV038 EQU   RBPREFIX+20
RBRSV037 EQU   RBPREFIX+16
RBRSV036 EQU   RBRSV028
RBRSV035 EQU   RBRSV028
RBRSV034 EQU   RBRSV028
RBRSV033 EQU   RBRSV028
RBRSV032 EQU   RBRSV028
RBRSV031 EQU   RBRSV028
RBRSV030 EQU   RBRSV028
RBRSV029 EQU   RBRSV028
RBRSV027 EQU   RBRSV019
RBRSV026 EQU   RBRSV019
RBRSV025 EQU   RBRSV019
RBRSV024 EQU   RBRSV019
RBRSV023 EQU   RBRSV019
RBRSV022 EQU   RBRSV019
RBRSV021 EQU   RBRSV019
RBRSV020 EQU   RBRSV019
RBRSV018 EQU   RBPREFIX+13
RBRSV017 EQU   RBPREFIX+12
RBSRV016 EQU   RBPREFIX+11
RBRSV015 EQU   RBPREFIX+10
RBRSV014 EQU   RBPREFIX+8
RBRSV013 EQU   RBPREFIX+4
RBRSV012 EQU   RBPREFIX
RBEXSAVE EQU   XRBESA
XRBREG15 EQU   RBGRS15
XRBREG14 EQU   RBGRS14
XRBREG13 EQU   RBGRS13
XRBREG12 EQU   RBGRS12
XRBREG11 EQU   RBGRS11
XRBREG10 EQU   RBGRS10
XRBREG9  EQU   RBGRS9
XRBREG8  EQU   RBGRS8
XRBREG7  EQU   RBGRS7
XRBREG6  EQU   RBGRS6
XRBREG5  EQU   RBGRS5
XRBREG4  EQU   RBGRS4
XRBREG3  EQU   RBGRS3
XRBREG2  EQU   RBGRS2
XRBREG1  EQU   RBGRS1
XRBREG0  EQU   RBGRS0
XRBLNKA  EQU   RBLINKB
XRBWT    EQU   RBWCF
@NM00144 EQU   RBBASIC+24
RBOPSWPS EQU   RBOPSWB2
@NM00143 EQU   RBOPSWB2
@NM00142 EQU   XRBPSW
@NM00141 EQU   RBBASIC+12
XRBWAIT  EQU   RBECBWT
XRBFRRB  EQU   RBFDYN
@NM00140 EQU   XSTAB2
XRBACTV  EQU   RBFACTV
XRBTCBP  EQU   RBTCBNXT
@NM00139 EQU   XSTAB1
XRBCKPT  EQU   RBFTCKPT
@NM00138 EQU   XSTAB1
@NM00137 EQU   RBBASIC+8
@NM00136 EQU   RBEXRTNM+1
RBTMIND3 EQU   RBTMFLD
RBTMIND2 EQU   RBTMFLD
RBTMCMP  EQU   RBTMFLD
RBWLIM   EQU   RBTMFLD
RBRSV005 EQU   RBTMFLD
RBTMTOD  EQU   RBTMFLD
RBTMQUE  EQU   RBTMFLD
@NM00135 EQU   RBPRFX
QDBRV002 EQU   QDB+28
QDBPRDS  EQU   QDB+26
QDBPRSZ  EQU   QDB+24
QDBBPTDS EQU   QDB+22
QDBFPTDS EQU   QDB+20
QDBLELMP EQU   QDB+16
QDBNELMS EQU   QDB+8
QDBRV001 EQU   QDB+6
QDBATTR  EQU   QDB+4
QDBQDB   EQU   QDB
PLHERRET EQU   IDAPLH+276
PLHASCB  EQU   IDAPLH+272
PLHECB   EQU   IDAPLH+268
@NM00109 EQU   IDAPLH+265
PLHDRMSK EQU   IDAPLH+264
PLHR13   EQU   IDAPLH+260
PLHPARM1 EQU   IDAPLH+256
PLHDRRSC EQU   IDAPLH+252
PLHSLRBA EQU   IDAPLH+244
PLHSRCSG EQU   IDAPLH+242
PLHNOSEG EQU   IDAPLH+240
PLHLLOR  EQU   IDAPLH+236
PLHXPLH  EQU   PLHWAX
@NM00108 EQU   PLHIXSPL+8
PLHIXBFC EQU   PLHIXSPL+4
PLHHIREC EQU   PLHSSRBA
PLHISPLP EQU   IDAPLH+196
PLHRBUFC EQU   IDAPLH+192
PLHIBUFC EQU   IDAPLH+188
PLHNRBA  EQU   IDAPLH+184
PLHDDDD  EQU   PLHEOVPT
PLHAR14  EQU   IDAPLH+176
@NM00107 EQU   IDAPLH+172
@NM00106 EQU   IDAPLH+168
PLHASAVE EQU   IDAPLH+164
PLHRETOS EQU   IDAPLH+118
PLHCHAIN EQU   IDAPLH+112
PLHAMB   EQU   IDAPLH+108
PLHSAVE6 EQU   IDAPLH+104
PLHSAVE5 EQU   IDAPLH+100
PLHSAVE4 EQU   IDAPLH+96
PLHSAVE3 EQU   IDAPLH+92
PLHSAVE2 EQU   IDAPLH+88
PLHSAVE1 EQU   IDAPLH+84
PLHARET  EQU   IDAPLH+80
PLHIIOB  EQU   PLHDIOB
PLHSRSID EQU   IDAPLH+74
PLHRDFC  EQU   IDAPLH+72
PLHRDFP  EQU   IDAPLH+68
PLHFSP   EQU   IDAPLH+64
PLHRECP  EQU   IDAPLH+60
PLHNBUFC EQU   IDAPLH+56
PLHLRECL EQU   IDAPLH+48
PLHARDB  EQU   IDAPLH+44
@NM00105 EQU   IDAPLH+43
PLHEOVR  EQU   IDAPLH+42
PLHRCODE EQU   IDAPLH+41
PLHUCODE EQU   PLHJCODE
PLHJNRBA EQU   IDAPLH+36
PLHJRNLL EQU   IDAPLH+32
PLHUPECB EQU   PLHJORBA
PLHDSIDA EQU   IDAPLH+24
PLHCRPL  EQU   IDAPLH+20
PLHMRPL  EQU   IDAPLH+16
PLHBFRNO EQU   IDAPLH+15
PLHFRCNT EQU   IDAPLH+14
PLHRMIN  EQU   IDAPLH+13
PLHDSTYP EQU   IDAPLH+12
PLHACB   EQU   IDAPLH+8
PLHRAE   EQU   PLHAFLGS
PLHRABWD EQU   PLHAFLGS
PLHIOSID EQU   PLHAFLGS
PLHDBDC  EQU   PLHAFLGS
PLHVAMB  EQU   PLHAFLGS
PLHIOSRQ EQU   PLHAFLGS
PLHDRLM  EQU   PLHAFLGS
PLHEOVDF EQU   PLHFLG3
PLHRVRS  EQU   PLHFLG3
PLHBWD   EQU   PLHFLG3
PLHSLVLD EQU   PLHFLG3
PLHRAHD  EQU   PLHFLG3
PLHSRBSG EQU   PLHFLG3
@NM00104 EQU   PLHEFLGS+1
PLHRSTRT EQU   PLHEFLGS+1
PLHDSCAN EQU   PLHEFLGS
PLHINVAL EQU   PLHEFLGS
PLHEODX  EQU   PLHEFLGS
PLHNOADV EQU   PLHEFLGS
PLHSRINV EQU   PLHEFLGS
PLHSKPER EQU   PLHEFLGS
PLH1ST   EQU   PLHEFLGS
PLHNOSPC EQU   PLHEFLGS
PLHIWAIT EQU   PLHFLG2
PLHSVADV EQU   PLHFLG2
PLHCIINS EQU   PLHFLG2
PLHKRE   EQU   PLHFLG2
PLHADDTE EQU   PLHFLG2
PLHKEYMD EQU   PLHFLG2
PLHSQINS EQU   PLHFLG2
PLHUPD   EQU   PLHFLG2
PLHSR    EQU   PLHFLG1
PLHDRPND EQU   PLHFLG1
PLHASYRQ EQU   PLHFLG1
PLHRDEXC EQU   PLHFLG1
PLHSSR   EQU   PLHFLG1
PLHASKBF EQU   PLHFLG1
PLHENDRQ EQU   PLHFLG1
PLHEOVW  EQU   PLHFLG1
PLHATV   EQU   IDAPLH+1
PLHAVL   EQU   IDAPLH
PLHIOSDQ EQU   IDAPLHDR+12
PLHDRCUR EQU   IDAPLHDR+10
PLHDRMAX EQU   IDAPLHDR+8
PLHDRREQ EQU   IDAPLHDR+4
PLHELTH  EQU   IDAPLHDR+2
PLHCNT   EQU   IDAPLHDR+1
PLHID    EQU   IDAPLHDR
OPWIOPEN EQU   OPWFLG2
OPWERR2B EQU   OPWFLG2
OPWEMPUP EQU   OPWFLG2
OPWMODWK EQU   OPWFLG2
OPWDOPEN EQU   OPWFLG2
OPWSVWRK EQU   OPWCFLG1
OPWUIXCI EQU   OPWUPAIX+5
@NM00103 EQU   OPWUPAIX+4
OPWUDTCI EQU   OPWUPAIX+1
@NM00102 EQU   OPWUPAIX
OPW2YPLH EQU   IDAOPWRK+585
OPWPIXCI EQU   OPWPTAIX+5
@NM00101 EQU   OPWPTAIX+4
OPWPDTCI EQU   OPWPTAIX+1
@NM00100 EQU   OPWPTAIX
OPWBIXCI EQU   OPWBSECL+5
@NM00099 EQU   OPWBSECL+4
OPWBDTCI EQU   OPWBSECL+1
@NM00098 EQU   OPWBSECL
OPWSAVEA EQU   IDAOPWRK+564
OPWDACB  EQU   IDAOPWRK+244
@NM00097 EQU   IDAOPWRK+243
OPWBSTRN EQU   IDAOPWRK+242
OPWSTRNO EQU   IDAOPWRK+241
OPWBUFNI EQU   IDAOPWRK+236
OPWBUFND EQU   IDAOPWRK+232
OPWIXWRK EQU   IDAOPWRK+216
OPWDTWRK EQU   IDAOPWRK+212
OPWWRKPT EQU   IDAOPWRK+208
OPWPSDS  EQU   OPWCATTR
OPWSWSP  EQU   OPWCATTR
@NM00096 EQU   OPWCATTR
@NM00095 EQU   OPWQ2
OPWCBIC  EQU   OPWQ2
OPWCRA   EQU   IDAOPWRK+192
OPWPAMBL EQU   IDAOPWRK+188
OPWPCON  EQU   IDAOPWRK+180
OPWSSL   EQU   OPWSAVE+16
OPWDSL   EQU   OPWSAVE+12
OPWPSL   EQU   OPWSAVE+8
OPWESL   EQU   OPWSAVE+4
OPWVFMPT EQU   OPWVFMPL+4
OPWVFMLN EQU   OPWVFMPL+1
OPWVFMSP EQU   OPWVFMPL
OPWVRG13 EQU   OPWVLSAV+4
OPWVRG12 EQU   OPWVLSAV
OPWVANCS EQU   OPWVSMWA+76
OPWVREQL EQU   OPWVGSPL+9
OPWVGFLG EQU   OPWVGSPL+8
OPWVGSPT EQU   OPWVGSPL+4
OPWVGETL EQU   OPWVGSPL+1
OPWVGSSP EQU   OPWVGSPL
OPWVSAVE EQU   OPWVSMWA+24
OPWVR13  EQU   OPWVSMWA+20
OPWVHDRE EQU   OPWVSMWA+16
OPWVCSLE EQU   OPWVSMWA+12
OPWVCSLP EQU   OPWVSMWA+8
OPWVTBLP EQU   OPWVSMWA+4
OPWVANCP EQU   OPWVSMWA
@NM00094 EQU   OPWVSMPL+14
OPWVMTCB EQU   OPWVMFLG
OPWVMSRB EQU   OPWVMFLG
OPWVMDXK EQU   OPWVMFLG
OPWVMKE5 EQU   OPWVMFLG
OPWVMPGB EQU   OPWVMFLG
OPWVMANC EQU   OPWVSMPL
OPWDFR   EQU   OPWQ
OPWESDS  EQU   OPWQ
OPWKSDS  EQU   OPWQ
OPWUBF   EQU   OPWQ
OPWFSTP  EQU   OPWQ
OPWLSR   EQU   OPWQ
OPWGSR   EQU   OPWQ
OPWDDC   EQU   OPWQ
@NM00093 EQU   OPWFLGS4
OPWUPD   EQU   OPWFLGS4
OPWCINV  EQU   OPWFLGS4
OPWFULL  EQU   OPWFLGS4
@NM00092 EQU   OPWFLGS3
OPWNOWRK EQU   OPWFLGS3
OPWUPGOP EQU   OPWFLGS3
OPWPUPGR EQU   OPWFLGS3
OPWDAVAT EQU   OPWFLGS3
@NM00091 EQU   OPWFLGS2
OPWDUMMY EQU   OPWFLGS2
OPWAIXDT EQU   OPWFLGS2
OPWIXDT  EQU   OPWFLGS2
OPWUCRA  EQU   OPWFLGS2
@NM00090 EQU   OPWFLGS1
OPWSDS   EQU   OPWVVIC
OPWSCRA  EQU   OPWFLGS1
OPWCAT   EQU   OPWFLGS1
LPMBSST  EQU   IDALPMB+28
LPMBEXT  EQU   IDALPMB+24
@NM00089 EQU   IDALPMB+22
LPMTPC   EQU   IDALPMB+18
LPMTRKAU EQU   IDALPMB+16
LPMBPTRK EQU   IDALPMB+8
LPMAUSZ  EQU   IDALPMB+4
@NM00088 EQU   LPMBFLGS
LPMBSSTH EQU   LPMBFLGS
LPMBTOFL EQU   LPMBFLGS
LPMSS    EQU   LPMBFLGS
LPMREPL  EQU   LPMBFLGS
LPMBRPS  EQU   LPMBFLGS
LPMBID   EQU   IDALPMB
JSCBCSCB EQU   JSCBSEC1+68
JSCBPMG  EQU   JSCBWTP+2
JSCBWTSP EQU   JSCBWTP+1
JSCRSV23 EQU   JSCBWTFG
JSCRSV22 EQU   JSCBWTFG
JSCRSV21 EQU   JSCBWTFG
JSCRSV20 EQU   JSCBWTFG
JSCRSV19 EQU   JSCBWTFG
JSCRSV18 EQU   JSCBWTFG
JSCBRET  EQU   JSCBWTFG
JSCBIOFG EQU   JSCBWTFG
@NM00085 EQU   JSCBSEC1+60
JSCBQMPI EQU   JSCBSEC1+56
JSCBPMSG EQU   JSCBSWT1
JSCRSV16 EQU   JSCBSWT1
JSCRSV15 EQU   JSCBSWT1
JSCRSV14 EQU   JSCBSWT1
JSCRSV13 EQU   JSCBSWT1
JSCRSV12 EQU   JSCBSWT1
JSCRSV11 EQU   JSCBSWT1
JSCBPASS EQU   JSCBSWT1
JSCBTTTR EQU   JSCBSEC1+52
JSCRSV10 EQU   JSCBSEC1+49
JSCBAUTH EQU   JSCBOPTS
JSCSIOTS EQU   JSCBOPTS
JSCRSV08 EQU   JSCBOPTS
JSCRSV07 EQU   JSCBOPTS
JSCRSV06 EQU   JSCBOPTS
JSCBLONG EQU   JSCBOPTS
JSCRSV05 EQU   JSCBOPTS
JSCRSV04 EQU   JSCBOPTS
JSCBSECB EQU   JSCBSEC1+44
JSCRSV03 EQU   JSCBSEC1+41
JSCBSTEP EQU   JSCBSEC1+40
JSCBDCBA EQU   JSCBDCB+1
JSCRSV02 EQU   JSCBDCB
JSCBID   EQU   JSCBSEC1+32
JSCBDBTB EQU   JSCBSEC1+28
JSCBIJSC EQU   JSCBSEC1+24
JSCBTCBP EQU   JSCBSEC1+20
JSCBPCC  EQU   JSCBSEC1+16
JSCBTCP  EQU   JSCBSEC1+12
JSCHPCEA EQU   JSCHPCE+1
JSCRSV32 EQU   JSCHPCE
JSCRSV01 EQU   JSCBSEC1
@NM00084 EQU   IEZJSCB
@NM00083 EQU   IDADIWA+92
@NM00082 EQU   IDADIWA+88
@NM00081 EQU   IDADIWA+84
@NM00080 EQU   IDADIWA+80
@NM00079 EQU   IDADIWA+76
@NM00078 EQU   IDADIWA+72
@NM00077 EQU   IDADIWA+68
@NM00076 EQU   IDADIWA+64
@NM00075 EQU   IDADIWA+60
@NM00074 EQU   IDADIWA+56
DIWINRBA EQU   IDADIWA+52
DIWRKCT  EQU   IDADIWA+48
DIWSAVE5 EQU   DIWSAVE+16
DIWSAVE4 EQU   DIWSAVE+12
DIWSAVE3 EQU   DIWSAVE+8
DIWSAVE2 EQU   DIWSAVE+4
DIWSAVE1 EQU   DIWSAVE
DIWSPLTP EQU   IDADIWA+24
DIWPLH   EQU   IDADIWA+16
DIWHRBA  EQU   IDADIWA+12
DIWLRBA  EQU   IDADIWA+8
@NM00073 EQU   IDADIWA+6
DIWFSPF  EQU   DIWFLG2
DIW1ST   EQU   DIWFLG1
DIWNOT1  EQU   DIWFLG1
DIWSHIFT EQU   DIWFLG1
DIWGSPC  EQU   DIWFLG1
DIWEOKR  EQU   DIWFLG1
DIWPFERR EQU   DIWFLG1
DIWCISPL EQU   DIWFLG1
DIWCAS   EQU   DIWFLG1
DIWLEN   EQU   IDADIWA+2
DIWATV   EQU   IDADIWA+1
DIWID    EQU   IDADIWA
ICWKEY1  EQU   IDAICWA+60
ICWCERP  EQU   IDAICWA+59
ICWCEL   EQU   IDAICWA+58
ICWCEF   EQU   IDAICWA+57
ICWCER   EQU   IDAICWA+56
ICWPTL   EQU   IDAICWA+55
ICWREQ   EQU   IDAICWA+54
ICWCRSEG EQU   IDAICWA+52
ICWNOSEG EQU   IDAICWA+50
ICWNEST  EQU   IDAICWA+48
ICWKEY3L EQU   IDAICWA+46
ICWKEY2L EQU   IDAICWA+44
ICWKEY1L EQU   IDAICWA+42
ICWLN    EQU   IDAICWA+40
ICWARDBP EQU   IDAICWA+36
ICWTPTR  EQU   IDAICWA+32
ICWTBASE EQU   IDAICWA+28
ICWADD   EQU   IDAICWA+24
ICWSCNT  EQU   IDAICWA+22
ICWPSEO  EQU   IDAICWA+20
ICWPRBA  EQU   IDAICWA+16
ICWBUFC  EQU   IDAICWA+8
ICWCHN   EQU   IDAICWA+4
ICWLEN   EQU   IDAICWA+2
ICWENDRQ EQU   ICWFLG1
ICWSPLIT EQU   ICWFLG1
ICWKRDS  EQU   ICWFLG1
ICWVNE   EQU   ICWFLG1
ICWVSE   EQU   ICWFLG1
ICWRBAOK EQU   ICWFLG1
ICWWAGM  EQU   ICWFLG1
ICWWNF   EQU   ICWFLG1
ICWID    EQU   IDAICWA
@NM00072 EQU   IDAHEB+8
@NM00071 EQU   IDAHEB+1
@NM00070 EQU   @NM00069+1
HEBGSRK  EQU   @NM00069
HEBNBYTE EQU   HEBHDREL+16
HEBAVSP  EQU   HEBHDREL+9
HEBRTFLG EQU   HEBFLAGS
HEBIOSUP EQU   HEBFLAGS
HEBGSRKT EQU   HEBFLAGS
HEBKEY5  EQU   HEBFLAGS
HEBJSTCB EQU   HEBFLAGS
HEBBLKPT EQU   HEBFREMN+4
HEBLN    EQU   HEBFREMN+1
HEBSP    EQU   HEBFREMN
EDBTKBAL EQU   IDAEDB+20
EDBHIRBA EQU   IDAEDB+16
EDBLORBA EQU   IDAEDB+12
EDBSTTRK EQU   IDAEDB+8
EDBLPMBA EQU   IDAEDB+4
EDBM     EQU   IDAEDB+3
@NM00068 EQU   EDBFLG1
EDBPSDS  EQU   EDBFLG1
EDBTOFLW EQU   EDBFLG1
EDBLKR   EQU   EDBFLG1
@NM00067 EQU   IDAEDB
EDBLEN   EQU   IDAEDBHD+2
EDBNO    EQU   IDAEDBHD+1
EDBID    EQU   IDAEDBHD
DSABGRID EQU   DSABGIDL+4
DSABLLEN EQU   DSABGIDL
DSABANAM EQU   DSABANMI+1
DSABANML EQU   DSABANMI
DSABRS04 EQU   DSAB+68
DSABSIOT EQU   DSAB+64
DSABRS03 EQU   DSAB+62
DSABDCBM EQU   DSAB+56
DSABSSCM EQU   DSAB+52
DSABSSNM EQU   DSAB+48
DSABPTTR EQU   DSAB+44
DSABTCBP EQU   DSAB+40
DSABRS02 EQU   DSAB+38
@NM00066 EQU   DSABFLG4
DSABCKSI EQU   DSABFLG4
DSABCKVL EQU   DSABFLG4
DSABCKDS EQU   DSABFLG4
@NM00065 EQU   DSABFLG3
DSABJSCT EQU   DSABFLG3
DSABCATL EQU   DSABFLG3
DSABVMSC EQU   DSABFLG3
DSABVAM  EQU   DSABFLG3
DSABPASS EQU   DSABFLG3
DSABDEFR EQU   DSABFLG3
@NM00064 EQU   DSABFLG2
DSABUNAL EQU   DSABFLG2
DSABIRM  EQU   DSABFLG2
DSABOPEN EQU   DSABFLG2
DSABNUSE EQU   DSABFLG1
DSABCATM EQU   DSABFLG1
DSABPCAT EQU   DSABFLG1
DSABDCAT EQU   DSABFLG1
DSABCONV EQU   DSABFLG1
DSABDCNV EQU   DSABFLG1
DSABPALC EQU   DSABFLG1
DSABDALC EQU   DSABFLG1
@NM00063 EQU   DSABORG2
DSABTR   EQU   DSABORG2
DSABAM   EQU   DSABORG2
@NM00062 EQU   DSABORG2
DSABTQ   EQU   DSABORG2
DSABTX   EQU   DSABORG2
DSABGS   EQU   DSABORG2
DSABU    EQU   DSABORG1
DSABPO   EQU   DSABORG1
DSABMQ   EQU   DSABORG1
DSABCQ   EQU   DSABORG1
DSABCX   EQU   DSABORG1
DSABDA   EQU   DSABORG1
DSABPS   EQU   DSABORG1
DSABIS   EQU   DSABORG1
DSABSSVA EQU   DSAB+21
DSABRS01 EQU   DSAB+20
DSABOPCT EQU   DSAB+14
DSABLNTH EQU   DSAB+12
DSABBCHN EQU   DSAB+8
DSABID   EQU   DSAB
DEBXSAMB EQU   DEBXTN+28
DEBXOPNJ EQU   DEBXTN+24
DEBXXARG EQU   DEBXTN+20
DEBXMCF2 EQU   DEBXTN+19
DEBXMCF1 EQU   DEBXTN+18
DEBXDSO2 EQU   DEBXTN+17
DEBXDSO1 EQU   DEBXTN+16
DEBXDBPR EQU   DEBXTN+12
DEBXDCBM EQU   DEBXTN+8
DEBXDSAB EQU   DEBXTN+4
DEBXRV48 EQU   DEBXTN+3
DEBXRV47 EQU   DEBXFLG1
DEBXRV46 EQU   DEBXFLG1
DEBXRV45 EQU   DEBXFLG1
DEBXRV44 EQU   DEBXFLG1
DEBXRV43 EQU   DEBXFLG1
DEBXDSSI EQU   DEBXFLG1
DEBXTSKC EQU   DEBXFLG1
DEBTBLOF EQU   DEBPREFX+14
DEBLNGTH EQU   DEBPREFX+12
DEBDCBMK EQU   DEBXTNP
DEBDSCBA EQU   DEBPREFX+1
DEBWKARA EQU   DEBPREFX
DEBXCEAD EQU   DEBXCEA+1
DEBXCENP EQU   DEBXCEAB
DEBRSV35 EQU   DEBXCEAB
DEBRSV34 EQU   DEBXCEAB
DEBRSV33 EQU   DEBXCEAB
DEBRSV32 EQU   DEBXCEAB
DEBCEAD  EQU   DEBCEA+1
DEBCENP  EQU   DEBCEAB
DEBRSV31 EQU   DEBCEAB
DEBRSV30 EQU   DEBCEAB
DEBRSV29 EQU   DEBCEAB
DEBRSV28 EQU   DEBCEAB
DEBPCIAD EQU   DEBPCIA+1
DEBPCINP EQU   DEBPCIAB
DEBRSV27 EQU   DEBPCIAB
DEBRSV26 EQU   DEBPCIAB
DEBRSV25 EQU   DEBPCIAB
DEBRSV24 EQU   DEBPCIAB
DEBSIOAD EQU   DEBSIOA+1
DEBSIONP EQU   DEBSIOAB
DEBFIX   EQU   DEBSIOAB
DEBIOVR  EQU   DEBSIOAB
DEBSIOX  EQU   DEBSIOAB
DEBPGFX  EQU   DEBSIOAB
DEBEOEAD EQU   DEBEOEA+1
DEBEOENP EQU   DEBEOEAB
DEBRSV22 EQU   DEBEOEAB
DEBRSV21 EQU   DEBEOEAB
DEBRSV20 EQU   DEBEOEAB
DEBESMVR EQU   DEBEOEAB
DEBSUBID EQU   DEBSUBNM
DEBSIOA2 EQU   DEBACS08+24
DEBRPSIO EQU   DEBACS08+20
DEBFREED EQU   DEBACS08+16
@NM00061 EQU   DEBACS08+12
@NM00060 EQU   DEBACS08+8
DEBDISAD EQU   DEBACS08+4
@NM00059 EQU   DEBACS08
DEBRPSST EQU   DEBACS07+64
DEBARECK EQU   DEBACS07+60
DEBAREWT EQU   DEBACS07+56
DEBACHK  EQU   DEBACS07+52
DEBAWRIT EQU   DEBACS07+48
DEBASETL EQU   DEBACS07+44
DEBAREAD EQU   DEBACS07+40
DEBCRECK EQU   DEBACS07+36
DEBCREWT EQU   DEBACS07+32
DEBCCHK  EQU   DEBACS07+28
DEBCWRIT EQU   DEBACS07+24
DEBCSETL EQU   DEBACS07+20
DEBCREAD EQU   DEBACS07+16
DEBWKPT5 EQU   DEBACS07+12
DEBWKPT4 EQU   DEBACS07+8
DEBGET   EQU   DEBACS07+4
@NM00058 EQU   DEBACS07
DEBPUT   EQU   DEBACS06+4
DEBDCBFA EQU   DEBACS06
DEBLUCBB EQU   DEBLUCBA+1
DEBRSV18 EQU   DEBLUCBA
DEBFUCBB EQU   DEBFUCBA+1
DEBRSV17 EQU   DEBFUCBA
DEBTCCWB EQU   DEBTCCWA+1
DEBRSV16 EQU   DEBTCCWA
DEBTBFRB EQU   DEBTBFRA+1
DEBRSV15 EQU   DEBTBFRA
DEBDBPEF EQU   DEBACS03+8
DEBDBPP  EQU   DEBACS03+4
DEBDTPP  EQU   DEBACS03
DEBDBPE  EQU   DEBDBLK+1
DEBDBPT  EQU   DEBDBLK
DEBEXTNM EQU   DEBDSNAM
DEBLRECL EQU   DEBACSMD+14
DEBBLKSI EQU   DEBACSMD+12
DEBRSV14 EQU   DEBDSNM+4
DEBUTSAB EQU   DEBUTSAA+1
DEBRSV13 EQU   DEBUTSAA
DEBVOLNM EQU   DEBACSMD+2
DEBVLSEQ EQU   DEBVOLSQ+1
DEBRSV42 EQU   DEBVOLBT
DEBRSV41 EQU   DEBVOLBT
DEBRSV40 EQU   DEBVOLBT
DEBRSV39 EQU   DEBVOLBT
DEBRSV38 EQU   DEBVOLBT
DEBRSV37 EQU   DEBVOLBT
DEBRSV36 EQU   DEBVOLBT
DEBEXFUL EQU   DEBVOLBT
DEBNMTRK EQU   DEBDASD+14
DEBENDHH EQU   DEBDASD+12
DEBENDCC EQU   DEBDASD+10
DEBSTRHH EQU   DEBDASD+8
DEBSTRCC EQU   DEBDASD+6
DEBBINUM EQU   DEBDASD+4
DEBUCBA  EQU   DEBUCBAD+1
DEBDVMOD EQU   DEBUCBAD
DEBAPPB  EQU   DEBAPPAD+1
DEBEXSCL EQU   DEBAPPAD
DEBDCBB  EQU   DEBDCBAD+1
DEBDEBID EQU   DEBPROTG
DEBECBB  EQU   DEBECBAD+1
DEBPRIOR EQU   DEBECBAD
DEBUSRPB EQU   DEBUSRPG+1
DEBNMEXT EQU   DEBUSRPG
DEBRSV05 EQU   DEBBASIC+15
DEBXTNIN EQU   DEBFLGS1
DEBAPFIN EQU   DEBFLGS1
DEBF1CEV EQU   DEBFLGS1
DEBCINDI EQU   DEBFLGS1
DEBRSV02 EQU   DEBFLGS1
DEBRSIOA EQU   DEBFLGS1
DEBEOFDF EQU   DEBFLGS1
DEBPWCKD EQU   DEBFLGS1
DEBQSCNT EQU   DEBBASIC+13
DEBACCS  EQU   DEBOPATB
DEBPOSIT EQU   DEBOPATB
DEBZERO  EQU   DEBOPATB
DEBABEND EQU   DEBOPATB
DEBIRBB  EQU   DEBIRBAD+1
DEBRERR  EQU   DEBOFLGS
DEBLABEL EQU   DEBOFLGS
DEBSPLIT EQU   DEBOFLGS
DEBDCB   EQU   DEBOFLGS
DEBRLSE  EQU   DEBOFLGS
DEBEOF   EQU   DEBOFLGS
DEBDISP  EQU   DEBOFLGS
DEBAMLNG EQU   DEBDEBAD
DEBTCBB  EQU   DEBTCBAD+1
DEBNMSUB EQU   DEBTCBAD
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00057 EQU   CVTFIX+248
@NM00056 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
WSHDSBM  EQU   WSHDSGMW+11
WSHDSFNO EQU   WSHDSFLG
WSHDSBV  EQU   WSHDSGMW+8
WSHDSONX EQU   WSHDSGMW+4
WSHDSFLN EQU   WSHDSFM+1
WSHDSFSP EQU   WSHDSFM
WSHDGSR  EQU   @NM00054
@NM00055 EQU   @NM00054
WSHDOCHN EQU   IDAWSHD+24
WSHDGMRA EQU   IDAWSHD+20
WSHDGMWA EQU   IDAWSHD+8
WSHDGMTB EQU   WSHDACHN
WSHDLEN  EQU   IDAWSHD+2
WSHDPOOL EQU   IDAWSHD+1
WSHDID   EQU   IDAWSHD
CPACCWTC EQU   CPACCW+24
CPACCWSI EQU   CPACCW+16
CPACCWSS EQU   CPACCW+8
CPACCWSK EQU   CPACCW
CPACPCHN EQU   IDACPA+92
CPANXT1  EQU   IDACPA+88
CPAWSECT EQU   IDACPA+87
CPARSECT EQU   IDACPA+86
CPATKOFL EQU   CPAFLAG2
CPAPFENT EQU   CPAFLAG2
CPAXLRA  EQU   CPAFLAG2
CPARREPL EQU   CPAFLAG2
CPAWREPL EQU   CPAFLAG2
@NM00053 EQU   CPAFLAG1
CPACHNED EQU   CPAFLAG1
CPARRPS  EQU   CPAFLAG1
CPAWRPS  EQU   CPAFLAG1
CPARV    EQU   CPAFLAG1
CPAWCV   EQU   CPAFLAG1
CPAWV    EQU   CPAFLAG1
CPAVPLV  EQU   CPASTAT1
CPASSECT EQU   IDACPA+82
CPABCINV EQU   IDACPA+80
CPABLKSZ EQU   IDACPA+76
CPAWORK2 EQU   IDACPA+72
CPAWORK1 EQU   IDACPA+68
CPAVPL   EQU   IDACPA+64
CPAIDAL  EQU   IDACPA+60
@NM00052 EQU   CPARPHAD+7
CPARSID  EQU   CPARSEEK+2
CPARBB   EQU   CPARSEEK
@NM00051 EQU   CPARPHAD
CPAFWCNT EQU   IDACPA+48
CPAWSID  EQU   IDACPA+44
CPAWPHR  EQU   CPAWPHAD+7
CPAWCHR  EQU   CPAWSEEK+2
CPAWBB   EQU   CPAWSEEK
@NM00050 EQU   CPAWPHAD
CPARCPE  EQU   IDACPA+32
CPARCPS  EQU   IDACPA+28
CPARREAL EQU   IDACPA+24
CPAWCKE  EQU   IDACPA+20
CPAWCKS  EQU   IDACPA+16
CPAWCPE  EQU   IDACPA+12
CPAWCPS  EQU   IDACPA+8
CPAWREAL EQU   IDACPA+4
CPALEN   EQU   IDACPA+2
@NM00049 EQU   IDACPA+1
CPAID    EQU   IDACPA
@NM00048 EQU   CMBPTRS+52
CMBFXDPT EQU   CMBPTRS+48
CMBPUSPT EQU   CMBPTRS+44
CMBPSTPT EQU   CMBPTRS+40
CMBUBFPT EQU   CMBPTRS+28
CMBBFRPT EQU   CMBPTRS+24
CMBUFSPT EQU   CMBPTRS+20
CMBFSTPT EQU   CMBPTRS+16
CMBUSPTR EQU   CMBPTRS+12
CMBSTPTR EQU   CMBPTRS+8
CMBPRPTR EQU   CMBPTRS+4
CMBUSRPT EQU   CMBPTRS
CMBCNT   EQU   IDACMB+6
CMBOUT   EQU   CMBFLGS
CMBLEN   EQU   IDACMB+2
@NM00047 EQU   IDACMB+1
CMBID    EQU   IDACMB
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCHAIN EQU   IDABUFC+48
BUFXORBA EQU   IDABUFC+44
BUFXIRBA EQU   IDABUFC+40
BUFCNXT2 EQU   IDABUFC+37
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCBAD  EQU   IDABUFC+20
BUFCCPA  EQU   IDABUFC+16
BUFCDDDD EQU   IDABUFC+8
BUFCAMB  EQU   BUFCPLH
@NM00046 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCMW   EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00045 EQU   IDABUFDR+16
BUFDBUFC EQU   IDABUFDR+12
@NM00044 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
@NM00043 EQU   BLPBUFL+5
@NM00042 EQU   BLPBRLFG
BLPERFLG EQU   IDABLPRM+51
@NM00041 EQU   IDABLPRM+49
@NM00040 EQU   IDABLPRM+28
@NM00039 EQU   BLPIOACB
BLPGAD   EQU   BLPCORE+5
BLPGSP   EQU   BLPCORE+4
BLPGSZ   EQU   BLPCORE+1
BLPGPG   EQU   BLPGFLG
BLPGREQ  EQU   BLPGFLG
BLPOACB  EQU   IDABLPRM+13
BLPOCODE EQU   IDABLPRM+12
BLPFIOSR EQU   BLPFLAG2
BLPFINDX EQU   BLPFLAG2
BLPFDATA EQU   BLPFLAG2
BLPFPRIM EQU   BLPFLAG2
BLPFPATH EQU   BLPFLAG2
BLPFUPGR EQU   BLPFLAG2
BLPFPART EQU   BLPFLAG2
BLPFSTAD EQU   BLPFLAG1
BLPFBFRF EQU   BLPFLAG1
BLPFIOBF EQU   BLPFLAG1
BLPFGSR  EQU   BLPFLAG1
BLPIOPLH EQU   BLPUACB
@NM00038 EQU   IDABLPRM+2
BIBVSRTP EQU   IDABIB+104
BIBASCB  EQU   IDABIB+100
BIBDDNM  EQU   IDABIB+92
BIBSTPNM EQU   IDABIB+84
BIBJOBNM EQU   IDABIB+76
BIBSIOAP EQU   BIBRTNS+12
BIBASYRT EQU   BIBRTNS+8
BIBCEAPP EQU   BIBRTNS+4
BIBPSAB  EQU   IDABIB+52
BIBWSHD  EQU   IDABIB+44
BIBPAMBL EQU   IDABIB+20
@NM00037 EQU   IDABIB+5
BIBFLG2  EQU   IDABIB+4
BIBLEN   EQU   BIBHDR+2
@NM00036 EQU   BIBFLG1
BIBCKPT  EQU   BIBFLG1
BIBVIRT  EQU   BIBFLG1
BIBID    EQU   BIBHDR
ASCBEND  EQU   ASCB+208
ASCBSRBT EQU   ASCB+200
ASCBSWTL EQU   ASCB+196
ASCBRS14 EQU   ASCB+195
ASCBSMCT EQU   ASCB+194
ASCBRS12 EQU   ASCB+192
ASCBPCTT EQU   ASCB+188
ASCBRV43 EQU   ASCBSRQ4
ASCBRV42 EQU   ASCBSRQ4
ASCBRV41 EQU   ASCBSRQ4
ASCBRV40 EQU   ASCBSRQ4
ASCBRV39 EQU   ASCBSRQ4
ASCBRV38 EQU   ASCBSRQ4
ASCBRV37 EQU   ASCBSRQ4
ASCBRV36 EQU   ASCBSRQ4
ASCBRV35 EQU   ASCBSRQ3
ASCBRV34 EQU   ASCBSRQ3
ASCBRV33 EQU   ASCBSRQ3
ASCBRV32 EQU   ASCBSRQ3
ASCBRV31 EQU   ASCBSRQ3
ASCBRV30 EQU   ASCBSRQ3
ASCBRV29 EQU   ASCBSRQ3
ASCBRV28 EQU   ASCBSRQ3
ASCBRV27 EQU   ASCBSRQ2
ASCBRV26 EQU   ASCBSRQ2
ASCBRV25 EQU   ASCBSRQ2
ASCBRV24 EQU   ASCBSRQ2
ASCBRV23 EQU   ASCBSRQ2
ASCBRV22 EQU   ASCBSRQ2
ASCBRV21 EQU   ASCBSRQ2
ASCBRV20 EQU   ASCBSRQ2
ASCBRV19 EQU   ASCBSRQ1
ASCBRV18 EQU   ASCBSRQ1
ASCBRV17 EQU   ASCBSRQ1
ASCBRV16 EQU   ASCBSRQ1
ASCBRV15 EQU   ASCBSRQ1
ASCBRV14 EQU   ASCBSRQ1
ASCBRV13 EQU   ASCBSRQ1
ASCBSTA  EQU   ASCBSRQ1
ASCBJBNS EQU   ASCB+176
ASCBJBNI EQU   ASCB+172
ASCBMCC  EQU   ASCB+168
ASCBRTWA EQU   ASCB+164
ASCBIQEA EQU   ASCB+160
ASCBXMPQ EQU   ASCB+156
ASCBRS01 EQU   ASCB+154
ASCBFMCT EQU   ASCB+152
ASCBOUXB EQU   ASCB+148
ASCBOUCB EQU   ASCB+144
ASCBMECB EQU   ASCB+140
ASCBQECB EQU   ASCB+136
ASCBLSQH EQU   ASCBLKGP+4
ASCBLOCK EQU   ASCBLKGP
ASCBTCBS EQU   ASCB+124
ASCBNVSC EQU   ASCB+122
ASCBVSC  EQU   ASCB+120
ASCBSRBS EQU   ASCB+118
ASCBSSRB EQU   ASCB+116
ASCBRV06 EQU   ASCBFLG2
ASCBRV05 EQU   ASCBFLG2
ASCBRV04 EQU   ASCBFLG2
ASCBSNQS EQU   ASCBFLG2
ASCBS2S  EQU   ASCBFLG2
ASCBCEXT EQU   ASCBFLG2
ASCBPXMT EQU   ASCBFLG2
ASCBXMPT EQU   ASCBFLG2
ASCBRF07 EQU   ASCBDSP1
ASCBRF06 EQU   ASCBDSP1
ASCBRF05 EQU   ASCBDSP1
ASCBRF04 EQU   ASCBDSP1
ASCBRF03 EQU   ASCBDSP1
ASCBRF02 EQU   ASCBDSP1
ASCBFAIL EQU   ASCBDSP1
ASCBNOQ  EQU   ASCBDSP1
ASCBSWCT EQU   ASCB+112
ASCBASXB EQU   ASCB+108
ASCBTMCH EQU   ASCB+104
ASCBNSWP EQU   ASCBFLG1
ASCBTYP1 EQU   ASCBFLG1
ASCBSTND EQU   ASCBFLG1
ASCBABNT EQU   ASCBFLG1
ASCBTERM EQU   ASCBFLG1
ASCBS3S  EQU   ASCBFLG1
ASCBCMSH EQU   ASCBFLG1
ASCBTOFF EQU   ASCBFLG1
ASCBRF01 EQU   ASCBRCTF
ASCBTMLW EQU   ASCBRCTF
ASCBOUT  EQU   ASCBRCTF
ASCBWAIT EQU   ASCBRCTF
ASCBRV08 EQU   ASCBRCTF
ASCBFQU  EQU   ASCBRCTF
ASCBFRS  EQU   ASCBRCTF
ASCBTMNO EQU   ASCBRCTF
ASCBAFFN EQU   ASCBFW1
ASCBDUMP EQU   ASCB+96
ASCBRV44 EQU   ASCB+92
ASCBUBET EQU   ASCB+88
ASCBECB  EQU   ASCB+84
ASCBJSTL EQU   ASCB+80
ASCBEWST EQU   ASCB+72
ASCBEJST EQU   ASCB+64
ASCBTSB  EQU   ASCB+60
ASCBCSCB EQU   ASCB+56
ASCBRSMA EQU   ASCBRSM+1
ASCBRV54 EQU   ASCBRSMF
ASCBRV53 EQU   ASCBRSMF
ASCBRV52 EQU   ASCBRSMF
ASCBRV51 EQU   ASCBRSMF
ASCBVEQR EQU   ASCBRSMF
ASCBN2LP EQU   ASCBRSMF
ASCB1LPU EQU   ASCBRSMF
ASCB2LPU EQU   ASCBRSMF
ASCBLDA  EQU   ASCB+48
ASCBSTOR EQU   ASCB+44
ASCBDP   EQU   ASCB+43
ASCBRV07 EQU   ASCB+42
ASCBIOSM EQU   ASCB+40
ASCBSEQN EQU   ASCB+38
ASCBASID EQU   ASCB+36
ASCBCPUS EQU   ASCB+32
ASCBSPL  EQU   ASCB+28
ASCBIOSP EQU   ASCB+24
ASCBSYNC EQU   ASCBSUPC+4
ASCBSVRB EQU   ASCBSUPC
ASCBCMSF EQU   ASCB+12
ASCBBWDP EQU   ASCB+8
ASCBFWDP EQU   ASCB+4
ASCBASCB EQU   ASCB
ASCBEGIN EQU   ASCB
ARDKEYS  EQU   IDAARDB+29
@NM00035 EQU   ARDPRF
ARDPRFMT EQU   ARDPRF
ARDPRSS  EQU   ARDPRF
ARDRELNO EQU   IDAARDB+26
ARDERBA  EQU   IDAARDB+16
ARDHKRBA EQU   IDAARDB+8
ARDLEN   EQU   IDAARDB+2
ARDUSED  EQU   ARDTYPE
ARDEOD   EQU   ARDTYPE
ARDUOVFL EQU   ARDTYPE
ARDSS    EQU   ARDTYPE
ARDKR    EQU   ARDTYPE
ARDID    EQU   IDAARDB
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00034 EQU   IDAAMDSB+41
@NM00033 EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDKEYLN EQU   IDAAMDSB+8
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMBLMIDS EQU   IDAAMBL+42
AMBLNIDS EQU   IDAAMBL+41
@NM00032 EQU   IDAAMBL+40
AMBLNST  EQU   IDAAMBL+37
@NM00031 EQU   AMBLFLG2
AMBLSTAG EQU   AMBLFLG2
@NM00030 EQU   AMBLFLG2
AMBLDUMY EQU   AMBLFLG1
AMBLCAT  EQU   AMBLFLG1
AMBLUCRA EQU   AMBLFLG1
AMBLSCRA EQU   AMBLFLG1
AMBLSDS  EQU   AMBLVVIC
AMBLUPD  EQU   AMBLFLG1
AMBLLEN  EQU   IDAAMBL+34
@NM00029 EQU   AMBLSHAR
AMBLCATO EQU   AMBLSHAR
AMBLPRIM EQU   AMBLSHAR
AMBLID   EQU   IDAAMBL+32
@NM00028 EQU   AMBLQ2
AMBLCBIC EQU   AMBLQ2
@NM00027 EQU   AMBLTYPE
AMBLFIX  EQU   AMBLTYPE
AMBLAIX  EQU   AMBLTYPE
AMBLUPGR EQU   AMBLTYPE
AMBLPATH EQU   AMBLTYPE
AMBLENO  EQU   AMBLVC+1
AMBLVRT  EQU   AMBLVC
AMBLDFR  EQU   AMBLQ
AMBLESDS EQU   AMBLQ
AMBLKSDS EQU   AMBLQ
AMBLUBF  EQU   AMBLQ
AMBLFSTP EQU   AMBLQ
AMBLGSR  EQU   AMBLQ
AMBLDDC  EQU   AMBLQ
AMBLDCI  EQU   AMBLIDF+4
@NM00026 EQU   AMBLEOV+2
AMBLCOMP EQU   AMBLEOV+1
AMBLESET EQU   AMBLEFLG
AMBLWAIT EQU   AMBLEFLG
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00025 EQU   AMBCSWD1+1
@NM00024 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
@NM00023 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPIXP  EQU   IDAAMB+72
@NM00022 EQU   IDAAMB+68
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBRPT   EQU   IDAAMB+50
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00021 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00020 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBSDS   EQU   AMBINFL
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00019 EQU   AMBINFL
@NM00018 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00017 EQU   IDAAMB+38
AMBIOMB  EQU   AMBIOBAD
@NM00016 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00015 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
@NM00014 EQU   AMBFLG0
AMBSWSP  EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00013 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00012 EQU   ACBINFL2
ACBCBIC  EQU   ACBINFL2
@NM00011 EQU   ACBINFL2
ACBBYPSS EQU   ACBINFL1
ACBSDS   EQU   ACBVVIC
ACBUCRA  EQU   ACBINFL1
ACBSCRA  EQU   ACBINFL1
ACBCAT   EQU   ACBINFL1
ACBIJRQE EQU   ACBINFL1
ACBJEPS  EQU   ACBINFL1
@NM00010 EQU   ACBINFL1
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00009 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00008 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00007 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00006 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBASA   EQU   ACBCCTYP
@NM00005 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00004 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00003 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00002 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00001 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
@NM00134 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00133 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSALITA  EQU   PSA+764
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00132 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00131 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00130 EQU   FLCFSA
@NM00129 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00128 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00127 EQU   FLCIOA
@NM00126 EQU   FLCMCLA+15
@NM00125 EQU   FLCMCLA+14
@NM00124 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00123 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00122 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00121 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00120 EQU   FLCPER
@NM00119 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00118 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00117 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00116 EQU   FLCPIILC
@NM00115 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00114 EQU   FLCSVILC
@NM00113 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00112 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00111 EQU   FLCICCW2+4
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RT00685 EQU   @EL00009
@RF00687 EQU   @EL00009
@RC00797 EQU   @RC00774
@RF00836 EQU   @RC00831
@RC00944 EQU   @RC00943
@RF00975 EQU   @RC00920
@PB00021 EQU   @PB00022
@PB00020 EQU   @PB00021
@PB00019 EQU   @PB00020
@PB00018 EQU   @PB00019
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IDA0A05B,(C'PLS2053',0701,78174)
