OA TITLE '''IEDQOA''-LINKOR FROM INTRO'
IEDQOA   CSECT
*A-000000-999999                                               @G36XRNP
*CHANGE ACTIVITY= AS FOLLOWS:
*A021000,539000                                                  S21903
*C479000,508000,869200,869600-870800,871200,872600,873000,873400 S21903
*C873600,873550,874300-874400,875000-875200,876200-876400,877300 S21903
*C878000                                                         S21903
*D028000,485000,828600                                           S21903
*A808600                                                         A48270
*C508000                                                         A48270
*D810200-810400                                                  A48270
*A014000,077000,273000,351000,371000,385000,451000,497000,654000 CLUP21
*C806800,818000                                                  S22026
*A293100-293600,372000,391000-394000,415000-416000,431000-432000 S22026
*A444000-446000,453000-454000,471000-473000,824072-824359        S22026
*A775820-775940                                                  S22026
*C508000,777000                                                  S22026
*D761000-761400                                                  S22026
*A863209-863389,873500-873550,874300,877300,879660-879720        S22026
*A304000-309000,412000,498000,689600,710402-710570,866900,873700 S22027
*A875500,878100,879060                                           S22027
*C508000                                                         S22027
*C042000,175000-203000,301000-308000,343000-350000,399000        CLUP21
*C413000-441000,455000,469000,483000-490000,504000,602000-616000 CLUP21
*C630000-651000                                                  CLUP21
*D231000-252000,280000-287000,392000,588000,658000-952000        CLUP21
*C581000,770800,790400-790600,800400,830800,837400,866200,866000 S22025
*A812800,813400                                                 SA51787
*A394000,648800,860800,862400                                    X01004
*C663600-664200,664800,665400-667800,670200,678000-710400,
*C853200,866800                                                  X01004
*D650400-651000,661000-661800,864400
*A648870                                                         Y01004
*A648830,866880                                                  X02004
*C648860-648870,670200,678800,709000-710600                      X02004
*A824319                                                        SA54926
*C508000                                                         S22024
*D746800                                                         S22024
*A747000,783800,876600                                           S22024
*C678639,678645-678747                                           Y05330
*D866850                                                         Y05330
*A835800                                                        SA64692
*D839400-844000                                                 SA64692
*A581000,649400,664290,665600,666950,853200,866960,878400,879060,X03039
*A879400                                                         X03039
*C042000,670200,678800-679000,780600                             X03039
*D678606-678774,725804-725988,873800,876640-876710               X03039
*C679005,679015,879460                                         @XA07498
*C678832,678850,679080                                         @X50X9NI
*A683900                                                       @X50X9NI
*A663000                                                       @YA07705
*A664112,664120                                                @ZA02084
*A648940,878100                                                @ZA02084
*A826600,856000,878100,868800                                  @YA10680
*C868900                                                       @AS09138
*A775860,886900                                                @OY12967
*A360000,414000,422000,434000,442000,448000,452000             @Y17XANG
*A454000,473000,648940,678870,678965,679010,806800,879060,     @Y17XANG
*A8668815,880000,783000,808720,811800                          @Y17XANG
*C649440,649520,664292,664296,665610,665630,666960,666980      @Y17XANG
*C678810,678831,678845,678855,678905,678925,679000,770800      @Y17XANG
*C697400,866815,866980                                         @Y17XANG
*D582000-588000,648943,648947,666970                           @Y17XANG
*D678875-678895,678970-678975,679015-679065,866960             @Y17XANG
*D867200-869600                                                @Y17XANG
*C726600-726800                                                @OY14517
*       TCAM LEVEL 10.0 MVS CHANGES                            @G36XRNP
*A664260,745600,826678,866845,869522,663656,648814             @G36XRNP
*C683918,866820,648814                                         @G36XRNP
*D648828-648884,648898-648905,826684-826756,866994             @G36XRNP
*D863218-863389                                                @G36XRNP
*C477000                                                       @OY18827
*                                                              @G36XRNP
*A161100,166800                                                @OY19124
*C184200-196800,744600-748500                                  @OY19405
*A183300,198900,765300                                         @OY19405
*A418500                                                       @OZ29219
*D540600-541500                                                @OY20289
*C544800-545100                                                @OY20289
*****************************************************************S21903
*                                                                     *
*MODULE-NAME= IEDQOA   (TCAM,INITIALIZATION)                   @G36XRNP
*                                                                S21903
*DESCRIPTIVE-NAME= GETMAIN, SORT, AND ATTACH ROUTINE             S21903
*                                                                S21903
*COPYRIGHT= 'NONE'                                               S21903
*                                                                     *
*STATUS -- CHANGE LEVEL 10.0                                   @G36XRNP
*                                                                     *
*FUNCTION -- THIS MODULE IS TO HANDLE ALL NON-RESIDENT ROUTINES       *
*   WHICH DO THE INITIAL PROCESSING AT INTRO EXECUTION TIME.  A       *
*   MESSAGE IS TYPED WHICH CONTAINS AN ERROR CODE NUMBER WHICH IS     *
*   THE SAME AS THE RETURN CODE PASSED FROM INTRO TO USER'S           *
*   NEXT INSTRUCTION. THE FUNCTIONS OF THIS ROUTINE INCLUDE:     CLUP21
*                                                                CLUP21
*        1 - LINKING TO THE INTRO CONSOLE COMMUNICATIONS ROUTINE CLUP21
*            (IEDQOB) TO OBTAIN NEW VALUES FOR THOSE INTRO       CLUP21
*            VALUES SPECIFIED OR OMITTED AT ASSEMBLY TIME.       CLUP21
*                                                                CLUP21
*        2 - SCRAMBLING THE 8-CHARACTER PASSWORD IF ONE HAS BEEN CLUP21
*            SPECIFIED.                                          CLUP21
*                                                                CLUP21
*        3 - OBTAIN MAIN STORAGE FOR LINE BUFFERS, A CORE QUEUE  CLUP21
*            DATA SET IF NECESSARY, CHANNEL PROGRAM BLOCKS,      S22027
*            TRACE TABLES REQUESTED BY THE USER, AND COMMBUF     S22027
*            STCB'S, DATA AREAS,AND MASTER QCB, IF REQUESTED.    S22027
*                                                                CLUP21
*        4 - SORTING THE TERMNAME TABLE INTO ALPHABATICAL        CLUP21
*            SEQUENCE. THE TERMNAME TABLE OFFSETS FOR DISTRI-    CLUP21
*            BUTION LISTS, CASCADE LISTS, LINE ENTRIES, AND      CLUP21
*            INVITATION LISTS, AS WELL AS ALTERNATE DESTINATION  CLUP21
*            OFFSETS ARE RE-CALCULATED. ALL ALTERNATE DESTIN-    CLUP21
*            ATIONS ARE TESTED FOR ACCEPT CAPABILITIES. CERTAIN  CLUP21
*            FIELDS IN THE TERMNAME TABLE NECESSARY FOR THE      CLUP21
*            BINARY SEARCH ROUTINE ARE INITIALIZED, AND CHECKS   CLUP21
*            ARE MADE FOR THE PRESENCE OF A PRIMARY OPERATOR     CLUP21
*            CONTROL TERMINAL. IF A DEAD LETTER QUEUE IS DEFINED,CLUP21
*            THE NUMBER WITHIN THE TERMNAME TABLE OF THE DLQ     CLUP21
*            ENTRY IS DETERMINED AND SAVED IN THE AVT.           CLUP21
*                                                                CLUP21
*        5 - UNCONDITIONAL ATTACHMENT OF THE OPERATOR CONTROL    CLUP21
*            MODULE AND CONDITIONAL ATTACHMENT OF THE ON-LINE    CLUP21
*            TEST MODULE AND COMMON WRITE MODULE. EXTRACT AND    CLUP21
*            QEDIT MACRO EXPANSIONS SET UP THE COMMUNICATIONS    CLUP21
*            PARAMETER LIST INTERFACE BETWEEN TCAM AND THE       CLUP21
*            OPERATING SYSTEM. IF A SYSTEM DELAY INTERVAL IS     CLUP21
*            SPECIFIED THE SYSTEM DELAY ROUTINE IS LOADED. IF A  CLUP21
*            PRIMARY OPERATOR CONTROL TERMINAL IS DEFINED THE    CLUP21
*            OPERATOR AWARENESS MESSAGE ROUTER ROUTINE IS LOADED.CLUP21
*                                                              @Y17XANG
*        6 - ESTABLISHMENT OF GROUP-LINE TERMINAL TABLE        @Y17XANG
*            HIERARCHIES. THIS CONSISTS OF:                    @Y17XANG
*                                                              @Y17XANG
*                - CHAINING THE GROUP LGB TO ITS FIRST LINE    @Y17XANG
*                  VIA THE LGB SUBSTRUCT POINTER;              @Y17XANG
*                                                              @Y17XANG
*                - SUBSEQUENT LINE TO NEXT LINE VIA COHORT     @Y17XANG
*                  POINTER;                                    @Y17XANG
*                                                              @Y17XANG
*                - LAST LINE'S COHORT POINTER BACK TO THE LGB. @Y17XANG
*                                                              @Y17XANG
*            THIS IS DONE FOR EACH 3705 LINE GROUP.  3705 LINE @Y17XANG
*            GROUPS TRANSCEND 3705 SUBAREAS.                   @Y17XANG
*
*                                                                     *
*ENTRY POINT -- THERE IS ONE ENTRY POINT, LINKED TO BY INTRO          *
*        'IEDQOA' -- LINKOR                                           *
*   CALLING SEQUENCE -                                                *
*        LA    R1,AVT         PASS ADDR OF AVT IN R1                  *
*        LINK  EP=IEDQOA      IEDQOA RESIDES ON LINKLIB               *
*                                                                     *
*INPUT -- R1 HAS ADDR OF AVT.                                         *
*   R13 HAS ADDR OF 18 WORD SAVEAREA.                                 *
*   R15 HAS ADDR OF ENTRY POINT.                                      *
*   R14 HAS ADDR OF RETURN ADDRESS.                                   *
*                                                                     *
*OUTPUT -- SCRAMBLED PASSWORD, LINE BUFFERS, A CORE QUEUE DATA   CLUP21
*   SET, CHANNEL PROGRAM BLOCKS, NECESSARY TRACE TABLES, SORTED  CLUP21
*   TERMNAME TABLE WITH ADJUSTED OFFSETS, REQUESTED SUBTASKS     CLUP21
*   ATTACHED, AND REQUIRED ROUTINES LOADED.                      CLUP21
*                                                                     *
*EXTERNAL ROUTINES -- ALL ARE ACTIVATED WITH 'LINK'.                  *
*        'IEDQOB' -- WTOR INTERPRETER                                 *
*                                                                     *
*EXITS-NORMAL -- NO ERROR FOUND BY ANY SUBROUTINE.  R15 IS ZERO.      *
*                                                                     *
*EXITS-ERROR -- THE ERROR CODE IS RETURNED TO THE CALLER IN      CLUP21
*   REGISTER 15 AND THE MESSAGE 'IED065I INITIALIZATION ERROR    CLUP21
*   XXXX' IS DISPLAYED. ERROR CODES ARE:                         CLUP21
*                                                                CLUP21
*       04 - TCAM ALREADY ACTIVE.                                CLUP21
*                                                                CLUP21
*       08 - GETMAIN FAILURE.                                    CLUP21
*                                                                CLUP21
*       12 - GETMAIN FAILURE.                                    CLUP21
*                                                                CLUP21
*       16 - TERMINAL DEFINITION ERROR. THE DIAGNOSTIC 'IEDQ065I CLUP21
*            XXXXXXXX ILLEGAL DESTINATION' WILL BE DISPLAYED.    CLUP21
*            THE XXXXXXXX FIELD IS THE TERMINAL NAME.            CLUP21
*                                                                CLUP21
*       20 - ERROR IN DEFINITION OF THE PRIMARY OPERATOR CONTROL CLUP21
*            TERMINAL. E. G., THE DESIGNATED TERMINAL COULD NOT  CLUP21
*            BE FOUND IN THE TERMNAME TABLE, OR IT DID NOT HAVE  CLUP21
*            SEND AND ACCEPT CAPABILITIES, OR IT WAS NOT DEFINED CLUP21
*            AS BEING A POSSIBLE SECONDARY OPERATOR CONTROL      CLUP21
*            TERMINAL, ETC.                                      CLUP21
*                                                                S22026
*       24 - ERROR IN SORTING THE DEVICE ID TABLE.  THE TNT      S22026
*            OFFSET IN THE DEVICE ID TABLE NOT FOUND IN THE      S22026
*            OFFSET TABLE, OR THE DEVICE DEPENDENT FIELD         S22026
*            POINTING TO THE DEVICE ID TABLE FOR A CONCENTRATOR  S22026
*            TERMINAL ENTRY DID NOT INDICATE A CONCENTRATOR.     S22026
*                                                                     *
*       28 - AUTHORIZATION ERROR. SOMEONE HAS ATTEMPTED TO     @G36XRNP
*            START AND UNAUTHORIZED MCP. E.G. THE MCP WAS NOT  @G36XRNP
*            RUNNING UNDER PROTECT KEY 6                       @G36XRNP
*                                                              @G36XRNP
*TABLES/WORKAREA -- AVT                     TNT                @G36XRNP
*                   TERMINAL ENTRY          LCB                @G36XRNP
*                   QCB                     DEVICE ID TABLE    @G36XRNP
*                   CPB                     ACB                @G36XRNP
*                   DCB                     CVT                @G36XRNP
*                   COMMON BUFFER MASTER QCB                   @G36XRNP
*                                                                     *
*ATTRIBUTES -- SERIALLY REUSABLE, NON-RESIDENT, ENABLED,              *
*              PROBLEM PROGRAM MODE.                                  *
*                                                                     *
*NOTES -- THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL  CLUP21
*   REPRESENTATION OF THE EXTERNAL CHARACTER SET EQUIVALENT TO   CLUP21
*   THE ONE USED AT ASSEMBLY TIME. THE CODING HAS BEEN ARRANGED  CLUP21
*   SO THAT REDEFINITION OF 'CHARACTER' CONSTANTS AND REASSEMBLY CLUP21
*   WILL RESULT IN A CORRECT MODULE FOR THE NEW DEFINITIONS.     CLUP21
         EJECT
* REGISTER EQUATES AND DEFINITIONS                               CLUP21
RTRM     EQU   15                       POINTER TO NEXT TNT ENTRY
RLGB     EQU   15                       RLGB OF CURRENT GROUP  @Y17XANG
R15      EQU   15                       ENTRY POINT ADDRESS
RDCB     EQU   14                       DCB DSECT BASE REGISTER
R14      EQU   14                       RETURN ADDRESS
RTNTCTR  EQU   14                       TNT ENTRY COUNTER        S22026
RTNT     EQU   13                       TERMNAME TABLE DSECT BASE
R13      EQU   13                       SAVEAREA
RBASE    EQU   12                       PROGRAM BASE
RQCB     EQU   11                       QCB DSECT BASE REGISTER
RCTR1    EQU   11                       LOOP COUNTER             S22026
RLENDE   EQU   11                       LENGTH OF DVC TBL ENTRY  S22026
R11      EQU   11                                                X01004
R10      EQU   10                                                X01004
RCPB     EQU   10                       CPB DSECT BASE
RAVT     EQU   9                        AVT DSECT BASE
RFIRST   EQU   8                        ADDRESS OF FIRST TNT ENTRY
RCMB     EQU   8                        CMB DSECT BASE REGISTER  S22027
R8       EQU   8                        WORK REGISTER
RGETM    EQU   8                        SORT WORK AREA BASE.   @Y17XANG
RTNTOFF  EQU   8                        ADDR OF TNT OFFSET       S22026
RLINK    EQU   7                        SUBRTN LINKAGE REGISTER  S22026
RGETAREA EQU   7                        OFFSET TABLE
R7       EQU   7                        WORK REGISTER
RNLINE   EQU   7                        ADDR OF CURRENT LINE   @Y17XANG
*                                       TTE TO GO INTO THE     @Y17XANG
*                                       HIERARCHY.             @Y17XANG
ROTNEXT  EQU   6                        POINTER TO NEXT OFFSET ENTRY
R6       EQU   6                        WORK REGISTER
RWORK    EQU   6                        WORK REGISTER            S22026
RCTR2    EQU   6                        LOOP COUNTER             S22026
R5       EQU   5                        WORK REGISTER
ROTNOW   EQU   5                        POINTER TO THIS OFFSET ENTRY
RTBL     EQU   5                        CURRENT SORT TABLE     @Y17XANG
*                                       ENTRY - FORWARD SORT.  @Y17XANG
RLEN     EQU   4                        LENGTH OF A TERMNAME ENTRY
R4       EQU   4                        WORK REGISTER
RCURR    EQU   4                        CURRENT SORT TABLE     @Y17XANG
*                                       ADDRESS.               @Y17XANG
RLENTN   EQU   4                        LENGTH OF TERMINAL NAME  S22026
RIDCNT   EQU   3                        DVC ID TABLE COUNT       S22026
R3       EQU   3                        SAVES ERROR CODE
RTNT2    EQU   3                        ADDRESS CURRENT TNT    @Y17XANG
*                                       LINE SEARCH            @Y17XANG
REOT     EQU   3                        LAST SORT TABLE ENTRY  @Y17XANG
R2       EQU   2                        WORK REGISTER
R1ST     EQU   2                        1ST LINE ENTRY IN SORT @Y17XANG
*                                       TABLE.                 @Y17XANG
RFLD     EQU   2                        ADDR OF DVC DEP FIELD    S22026
RIDPTR   EQU   2                        DVC ID TABLE POINTER     S22026
RTNT1    EQU   2                        ADDRESS CURRENT TNT    @Y17XANG
*                                       IN LGB SEARCH.         @Y17XANG
RPRESENT EQU   1                        POINTER TO PRESENT OFFSET NTRY
R1       EQU   1                        ADDR OF AVT,PASSED TO SUBROUT
R0       EQU   0                        WORK REGISTER
RFLGS    EQU   0                        DVC DEPENDNT FIELD FLAGS S22026
RSVADR   EQU   0                        SAVE-ADDRESS REGISTER    S22026
*                                       TABLE                  @Y17XANG
ADDR     EQU   7                        MASK TO ICM ADDRESS L'3@Y17XANG
         USING *,R15                    TEMPORARY ADDRESSIBILITY S21903
         USING IEDQAVTD,RAVT            AVT DSECT
         USING IEDQTNTD,RTNT            TERMNAME TABLE DSECT
         USING IHADCB,RDCB              DCB DSECT
         USING IEDQCPB,RCPB             CPB DSECT
         USING IEDCMB,RCMB              CMB DSECT BASE REGISTER  S22027
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS SECTION OF CODE SAVE THE CALLER'S REGISTERS, CHAINS
*        SAVEAREAS, AND LINKS TO IEDQOB TO GET INTRO PARAMETERS
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
IEDQOA   IEDHJN  START                                           S21903
         SAVE  (14,12)                  SAVE CALLER'S REGISTERS  S21903
         LA    R2,2*AVTSVSIZ(R1)        GET ADDR OF AVTSAVE3
         ST    R13,4(R2)                CHAIN
         ST    R2,8(R13)                  SAVEAREAS
         LR    R13,R2                   SET AVT BASE
         LR    RBASE,R15                SET PROGRAM BASE
         DROP  R15
         USING IEDQOA,RBASE             CSECT ADRRESSABILITY     S21903
         USING IEDQTRM,RTRM             TRM ADDRESSIBILITY       S21903
         LR    RAVT,R1                  SAVE AVT ADDR
*
         LINK  MF=(E,(1)),SF=(E,LINKOB) CALL WTOR INTERPRETER
*
         LTR   R15,R15                  TEST RETURN CODE
         BNZ   ERROR                    BRANCH IF ERROR          S22025
         CLC   AVTPASWD,NOPASS          WAS PASSWRD SPECIFIED
         BE    SKIP                     NO, SKIP SCRAMBLING
         LA    R1,AVTPASWD              PASS ADDR OF 8 CHAR WORD
         LA    R2,WORK(R13)             WORDS 6 AND 7 OF SAVE AREA
*                                         ARE WORKAREA
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS SECTION OF CODE SCRAMBLES THE SPECIFIED PASSWORD
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         MVC   2(1,R2),1(R1)
         MVC   5(1,R2),0(R1)            RANDOM
         MVC   3(2,R2),6(R1)            CHARACTER
         MVC   0(2,R2),2(R1)            ARRANGEMENT
         MVC   6(2,R2),4(R1)
*
         LA    R3,NUM                   TRAILING DECISION COUNT FOR
*                                         EIGHT ITERATIONS
LOOPIT   EQU   *
         NI    0(R2),NR                 TURN OFF BIT 1
         XI    0(R2),XR                 FLIP BITS 4 THROUGH 7
         LA    R2,1(R2)                 GET NEXT CHARACTER
         BCT   R3,LOOPIT                REITERATE UNTIL DONE
         MVC   AVTPASWD(8),WORK(R13)    SAVE SCRAMBLED RESULTS
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS SECTION OF CODE STORES THE TCB ADDRESS IN THE AVT
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
SKIP     EQU   *
         L     R1,CVTPTR                ADDRESS OF THE CVT       X02004
         L     R1,0(,R1)                ADDRESS OF THE TCB POINTER
         L     R1,4(,R1)                ADDRESS OF THE TCB
         ST    R1,AVTTCB                STORE TCB ADDRESS IN AVT
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS SECTION OF CODE BUILDS ALL LINE BUFFERS
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         SR    R5,R5                    CLEAR LENGTH OF I/O TRACEX01004
         L     R3,PAGESIZE              SIZE OF MVS PAGE       @G36XRNP
         OI    AVTPKF,AVTFTCHF          SET FETCH PROTECT ACTIVE Y01004
         USING IEDQQCB,RQCB             QCB DSECT BASE REGISTER  X02004
         SR    R7,R7                    CLEAR I/O TRACE LENGTH   X01004
         CLC   AVTRACE,AVTFZERO         USER REQUESTED TRACE AREAX01004
         BE    BLDLBUF                  NO, BRANCH               X01004
         LA    R7,IOTRCSIZ              SIZE OF 1 TRACE ENTRY    X01004
         L     R5,AVTRACE               # TRACE ENTRIES        @Y17XANG
         LA    R5,THREE(R5)             MAKE MODULO 4          @Y17XANG
         SRL   R5,TWO                                          @Y17XANG
         SLL   R5,TWO                                          @Y17XANG
         ST    R5,AVTRACE               SAVE ENTRIES MOD 4     @Y17XANG
         M     R6,AVTRACE               MULTIPLY SIZE OF ENTRY @Y17XANG
*                                       NUMBER OF ENTRIES        X01004
         LA    R5,THRTTWO(R7)           ADD CONTROL INFORMATION  X01004
BLDLBUF  EQU   *                                                 X01004
         LR    R6,R3                    COPY PAGE SIZE           X01004
         SR    R3,R3                    CLEAR A COUNT REGISTER
         LH    R1,AVTKEYLE              SIZE OF 1 UNIT RECORD
         LA    R1,AVTUMALN(,R1)         ADD PREFIX SIZE
         TM    AVTSAVTF,AVTVTMCP        3705 IN SYSTEM?        @Y17XANG
         BZ    NOLCCWS                  BR NO                    X03039
         LA    R1,LCCWSZ(,R1)           ADD SIZE OF NEG BUFFER @Y17XANG
*                                       PREFIX.                @Y17XANG
NOLCCWS  EQU   *                                                 X03039
         LA    R1,ROUND(,R1)            ROUND UP THE UNIT SIZE TO
         SRL   R1,THREE                 THE NEXT DOUBLE WORD
         SLL   R1,THREE                 BOUNDARY
         LR    R8,R1                    SAVE BUFFER SIZE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        TEST FOR CORE QUEUE PARAMETERS
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         TM    AVTBIT1,AVTAQTAN         ARE CORE CONSTANTS IN AVT
         BZ    AVTGET                   NO, FORGET CORE CONSTANTS
         CLC   AVTTOTNC,AVTFZERO        HAS THE USER REQUESTED A
*                                         CORE DATA SET
         BE    AVTGET                   NO, FORGET CORE QUEUE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        CALCULATE THE MAXIMUM AND MINIMUM THRESHOLD VALUES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         LA    R2,PERCENT               LOAD THE PERCENTAGE FACTOR
         SR    R0,R0                    CLEAR  MULTIPLICATION REG.
         L     R1,AVTCMIN               LOAD THE MINIMUM THRESHOLD
*                                         VALUE
         M     R0,AVTTOTNC              MULTIPLY BY THE NUMBER OF
*                                         CORE RECORDS
         DR    R0,R2                    DIVIDE THE MINIMUM NUMBER
*                                         OF CORE RECORDS BY 100
         LTR   R0,R0                    IS THERE A REMAINDER
         BE    SKIP1                    NO, SKIP THE NEXT
*                                         INSTRUCTION
         LA    R1,ONE(R1)               INCREMENT THE MINIMUM COUNT
*
SKIP1    EQU   *
         ST    R1,AVTCMIN               STORE THE MINIMUM VALUE
         SR    R0,R0                    CLEAR ANY REMAINDER
         L     R1,AVTCMAX               LOAD THE MAXIMUM THRESHOLD
*                                         VALUE
         M     R0,AVTTOTNC              MULTIPLY BY THE NUMBER OF
*                                         CORE RECORDS
         DR    R0,R2                    DIVIDE THE MAXIMUM NUMBER
*                                         OF CORE RECORDS BY 100
         LTR   R0,R0                    IS THERE A REMAINDER
         BZ    SKIP2                    NO, SKIP THE NEXT
*                                         INSTRUCTION
         LA    R1,ONE(,R1)              INCREMENT THE MAXIMUM COUNT
*
SKIP2    EQU   *
         ST    R1,AVTCMAX               STORE THE MAXIMUM THRESHOLD
*                                         VALUE
         L     R3,AVTTOTNC              LOAD THE NUMBER OF CORE
*                                         BUFFERS REQUESTED
         EJECT
AVTGET   EQU   *
         AH    R3,AVTNOLBF              ADD TO THIS THE NUMBER OF
*                                         LINE BUFFER UNITS
         N     R3,AVTCLRHI              CLEAR HI ORDER 2 BYTES @YA07705
         STH   R3,AVTAVFCT              STORE IN THE AVAILABLE
*                                         BUFFER FIELD OF THE AVT
         SR    R1,R1                    CLEAR LENGTH ACCUMULATOR X01004
MOREPAGE AR    R1,R6                    BUMP CORE NEEDED BY PAGE X01004
         CR    R5,R1                    I/O TRACE FIT            X01004
         BH    MOREPAGE                 NO, BUMP CORE NEEDED     X01004
         LR    R10,R1                   COPY CORE REQUIRED       X01004
         SR    R10,R5                   FIND EXTRA CORE AVAILABLEX01004
         LR    R5,R10                   SAVE EXTRA CORE FOR      X01004
*                                         I/O TRACE              X01004
PADCHECK EQU   *                                               @G36XRNP
         CH    R10,H8                   ENOUGH CORE LEFT IN    @G36XRNP
*                                       PAGE FOR PADDING FOR   @G36XRNP
*                                       FOR ERRORMSG BFR ACTING@G36XRNP
*                                       AS QCB                 @G36XRNP
         BH    PADOK                    YES, BRANCH            @G36XRNP
         LR    R10,R6                   NEED NEW PAGE          @G36XRNP
         AR    R1,R6                    INCREMENT TOTAL PAGES  @G36XRNP
PADOK    EQU   *                                               @G36XRNP
         SH    R10,H8                   ALLOW FOR PADDING      @G36XRNP
MOREBUF  CR    R8,R10                   CORE LEFT IN PAGE FOR    X01004
*                                         THIS BUFFER            X01004
         BNH   BUFFIT                   YES, BRANCH              X01004
         LR    R10,R6                   NEED NEW PAGE            X01004
         AR    R1,R6                    BUMP TOTAL PAGES         X01004
         B     MOREBUF                  CHECK NEXT BUFFER        X01004
BUFFIT   EQU   *                                                 X01004
         SR    R10,R8                   DECREMENT AVAILABLE CORE X01004
         BCT   R3,MOREBUF               CHECK NEXT BUFFER        X01004
         SR    R4,R4                    CLEAR SIZE OF CPB        X01004
         TM    AVTBIT1,AVTDISKN         DISK QUEVEING SUPPORTED  X01004
         BZ    GETPBNDY                 NO, BRANCH               X01004
         LA    R4,CPBSIZE-IEDQCPB       SIZE OF REGULAR CPB      X01004
         AR    R4,R8                    CPB + SIZE OF BUFFER     X01004
         LH    R11,AVTCPBNO             GET NUMBER OF CPB'S      X01004
         N     R11,AVTCLRHI             FORCE POSITIVE           X01004
MORECPB  EQU   *                                                 X01004
         CR    R4,R10                   WILL CPB FIT IN THIS PAGEX01004
         BNH   CPBFIT                   YES, BRANCH              X01004
         LR    R10,R6                   NEED NEW PAGE            X01004
         AR    R1,R6                    BUMP TOTAL PAGES         X01004
         B     MORECPB                  CONTINUE LOOP            X01004
CPBFIT   EQU   *                                                 X01004
         SR    R10,R4                   DECREMENT AVAILABLE CORE X01004
         BCT   R11,MORECPB              CHECK NEXT BUFFER        X01004
GETPBNDY EQU   *                                                 X01004
         LA    R0,FREEPTR               AREA TO HOLD CORE        X01004
         BAL   R14,AVTPAR1              GETMAIN FOR PAGE         X01004
         L     R0,AVTGETMN              GET LENGTH OF GOTTEN COREX01004
         L     R1,FREEPTR               ADDRESS OF GOTTEN CORE   X01004
         LR    R15,R0                   COPY LENGTH              X01004
         LR    R14,R1                   COPY GOTTEN CORE ADDRESS X01004
         STM   R14,R15,FBUFSAV          SAVE ADDRESS OF CORE ON  X01004
*                                        PAGE BOUNDARY AND       X01004
*                                        ITS LENGTH              X01004
CLEARCOR MVI   0(R14),AVTEZERO          CLEAR CORE               X01004
         LA    R14,ONE(R14)             INCREMENT ADDRESS        X01004
         BCT   R15,CLEARCOR             DECREMENT COUNT & BRANCH X01004
         ST    R14,FREEPTR+FOUR         SAVE ENDING ADDRESS      X01004
         ST    R6,0(R1)                 SET LENGTH               X01004
         LTR   R7,R7                    I/O TRACE TO BE USED     X01004
         BZ    BLDLBUF1                 NO, BRANCH               X01004
         LA    R11,SIXTEEN              ADD 16 BYTES FOR CONTROL X01004
         AR    R1,R11                   BUMP PAST CONTROL INFO.  X01004
         ST    R1,AVTRACE               SAVE ADDRESS OF TRACE    X01004
         LA    R10,SIXTEEN(R7,R1)       ADDRESS OF END OF TRACE  X01004
         ST    R10,FREEPTR              UPDATE AVAILABLE CORE PTRX01004
         ST    R5,0(R10)                SET NEW LENGTH           X01004
         LA    R0,0(R11,R1)             ADDRESS OF FIRST ENTRY   X01004
         SR    R10,R11                  COMPUTE ADDRESS OF LAST  X01004
*                                         ENTRY IN TRACE TABLE   X01004
         ST    R10,EIGHT(R1)            SAVE ADDR. OF LAST ENTRY X01004
         AR    R0,R11                   ALLOW FOR PREFIX       @ZA02084
         ST    R0,0(R1)                 ADDRESS OF CURRENT ENTRY X01004
         SR    R0,R11                   ADJUST FOR PREFIX      @ZA02084
         ST    R0,FOUR(R1)              ADDRESS OF FIRST ENTRY   X01004
         SRL   R7,ONE                   OFFSET TO MIDDLE ENTRY   X01004
         AR    R0,R7                    ADDRESS OF MIDDLE ENTRY  X01004
         ST    R0,TWELVE(R1)            SAVE MIDDLE ENTRY ADDRESSX01004
         TM    FIFTEEN(R1),BOUND8       IS MIDDLE ON 8-BYTE      X01004
*                                         BOUNDARY               X01004
         BZ    TURNON                   NO, BRANCH               X01004
         SR    R10,R11                  GET NEW LAST ENTRY       X02004
         ST    R10,EIGHT(R1)            SET NEW LAST ENTRY       X02004
         LA    R11,EIGHT                ADJUST BY EIGHT BYTES    X01004
         SR    R0,R11                   GET NEW MIDDLE ENTRY     X01004
         ST    R0,TWELVE(R1)            STORE NEW MIDDLE ENTRY   X01004
TURNON   EQU   *                                                 X01004
         OI    TWELVE(R1),IOTRCFLG      SET HIGH ORDER BITS OF   X01004
*                                        I/O TRACE FLAGS         X01004
BLDLBUF1 EQU   *                                                 X01004
         LH    R1,H8                    SIZE OF PADDING FOR    @G36XRNP
*                                       ERRORMSG BUFFER ACTING @G36XRNP
*                                       AS QCB                 @G36XRNP
         BAL   R14,GETFIXD              GET PADDING            @G36XRNP
         LH    R10,AVTAVFCT             TOTAL NUMBER OF BUFFERS  X01004
         LR    R1,R8                    LENGTH TO ASSIGN         X01004
         BAL   R14,GETFIXD              GET FIRST BUFFER         X01004
         TM    AVTSAVTF,AVTVTMCP        3705 IN SYSTEM         @Y17XANG
         BZ    NOLCCW                   BR NO                    X03039
         LA    R1,LCCWSZ(,R1)           ADD SIZE OF NEG BUFFER @Y17XANG
*                                       PREFIX.                @Y17XANG
NOLCCW   EQU   *                                                 X03039
         ST    R1,AVTCOREC              SAVE ADDRESS OF BUFFER   X01004
         MVC   EIGHT(EIGHT,R1),FBUFSAV  COPY ADDRESS OF BUFFERS  X01004
*                                        AND LENGTH FOR OPEN     X01004
*                                        TO FIX                  X01004
         MVC   AVTBFREB+1(3),AVTCOREC+1 MOVE THE BUFFER ADDRESS TO
*                                         AVAILABLE BUFFER QCB
         BCT   R10,CORCOPY              REDUCE COUNT BY ONE      X01004
         STCM  R1,7,AVTSELCH            SAVE ADDRESS LAST UNIT @OY19124
         B     BLDCPB                   BRANCH IF ONLY ONE BUFFERX01004
*
CORCOPY  EQU   *
         LR    R2,R1                    SAVE BUFFER ADDRESS FOR  X01004
*                                         CHAINING OF BUFFERS    X01004
         LR    R1,R8                    GET LENGTH OF BUFFER     X01004
*                                                                X01004
         BAL   R14,GETFIXD              GET NEXT BUFFER          X01004
         TM    AVTSAVTF,AVTVTMCP        3705 IN SYSTEM?        @Y17XANG
         BZ    NOBUMP                   BR NO                    X03039
         LA    R1,LCCWSZ(,R1)           BUMP PAST NEG BUF PREF @Y17XANG
NOBUMP   EQU   *                                                 X03039
         ST    R1,FOUR(R2)              CHAIN BUFFER TO          X01004
*                                         PREVIOUS BUFFER        X01004
         BCT   R10,CORCOPY              REDUCED COUNT AND        X01004
*                                         GET NEXT BUFFER.       X01004
*                                         ON LAST BUFFER         X01004
*                                         FALL THROUGH TO GET    X01004
*                                         CHANNEL PROGRAM BLOCKS X01004
         STCM  R1,7,AVTSELCH            SAVE ADDRESS LAST UNIT @OY19124
         EJECT
***********************************************************************
*                                                                     *
*        THIS SECTION OF CODE GETS CORE FOR AND                       *
*        INITIALIZES A CPB FREEPOOL.                                  *
*                                                                     *
***********************************************************************
BLDCPB   EQU   *                                                 X01004
         TM    AVTBIT1,AVTDISKN         DISK QUEVEING SUPPORTED  X01004
         BZ    RTEND                    NO, BRANCH               X02004
         LH    R5,AVTCPBNO              GET NUMBER OF CPB'S      X01004
         N     R5,AVTCLRHI              FORCE POSITIVE           X01004
         LR    R1,R4                    SIZE OF CPB              X01004
         BAL   R14,GETFIXD              GET FIRST BUFFER         X01004
         ST    R1,AVTFCPB               SAVE FIRST CPB ADDRESS   X01004
         STCM  R1,AD,AVTCPBPT+ONE       SAVE IN SECOND ADDRESS   X01004
         DROP  RCPB                                              X01004
         USING IEDQCPB,R1                                        X01004
CPBLOAD  EQU   *                                                 X01004
         LA    R7,CPBSIZE               GET ADDR. OF UNIT        X01004
         TM    AVTSAVTF,AVTVTMCP        3705 IN SYSTEM?        @Y17XANG
         BZ    DONTBUMP                 BR NO                  @Y17XANG
         LA    R7,LCCWSZ(,R7)           ADD SIZE OF NEG BUFFER @Y17XANG
*                                       PREFIX.                @Y17XANG
DONTBUMP EQU   *                                                 X03039
         ST    R7,CPBXREAF               INTO CPB                X01004
         MVI   CPBXOUNT+ONE,AVTDATLN    SET DATA LENGTH          X01004
         LR    R2,R1                    SAVE ADDRESS OF PREVIOUS X01004
         LR    R1,R4                    LENGTH OF CPB            X01004
         BCT   R5,CHAIN                 DO NEXT CPB, IF ANY      X01004
         B     RTEND                    END OF CPB FREEPOOL      X02004
CHAIN    EQU   *                                                 X01004
         BAL   R14,GETFIXD              GET CPB BUFFER           X01004
         ST    R1,CPBNEXTF-IEDQCPB(R2)  CHAIN CPB'S TOGETHER     X01004
         B     CPBLOAD                  DO NEXT CPB              X01004
         DROP  R1                                                X01004
         USING IEDQCPB,RCPB                                      X01004
RTEND    EQU   *                                                 X02004
         L     R1,FREEPTR               ADDRESS OF UNUSED CORE   X02004
         LTR   R1,R1                    IS CORE GOTTEN           X02004
         BZ    TESTDISP                 NO, BRANCH               X02004
         L     R0,0(R1)                 LENGTH OF UNUSED CORE    X02004
         LTR   R0,R0                    ALL USED                 X02004
         BZ    TESTDISP                 YES, BRANCH              X02004
         FREEMAIN R,LV=(0),A=(1)                                 X02004
         EJECT
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS SECTION OF CODE GETMAINS MAIN STORAGE FOR
*        A DISPATCHER TRACE AREA
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
TESTDISP EQU   *
         ST    R6,SAVER6                SAVE REG FOR USE LATER @OY19405
         NC    AVTDISTR(4),AVTDISTR     HAS A TRACE TABLE BEEN
*                                         REQUESTED
         BZ    TESTBUFT                 BR NO                  @OY19405
         L     R6,DISPTR                GET RTN ADDRESS        @OY19405
         BR    R6                       GO TO RTN.             @OY19405
DISPTR   DC    A(DISPATR)                                      @OY19405
SAVER6   DC    F'0'                     REG 6 SAVE             @OY19405
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *@OY19405
*                                                              @OY19405
*        THIS SECTION OF CODE GETS CORE FOR A BUFFER TRACE     @OY19405
*                                                              @OY19405
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *@OY19405
*                                                              @OY19405
TESTBUFT EQU   *                                               @OY19405
         NC    AVTBUENT(2),AVTBUENT     TRACE REQUESTED?       @OY19405
         BZ    TPIOTRAC                 BR NO                  @OY19405
         L     R6,BUFRTN                GET RTN ADD.           @OY19405
         BR    R6                       GO TO RTN TO AVOID     @OY19405
*                                       ADDRESSABILTY PROB.    @OY19405
BUFRTN   DC    A(BUFFRTN)                                      @OY19405
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *X03039
*                                                                X03039
*        THIS SECTION OF CODE GETS CORE FOR A PIU TRACE TABLE  @Y17XANG
*                                                                X03039
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *X03039
*                                                                X03039
TPIOTRAC EQU   *                                                 X03039
         L     R6,SAVER6                RESTORE REG 6          @OY19405
         TM    AVTSAVTF,AVTVTMCP        IS THERE A 3705?       @Y17XANG
         BZ    BRACKET                  NO, NO TBL REQUIRED    @X50X9NI
         USING IEDNSVTD,R4                                       X03039
         L     R4,AVTSAVTP              ADDRESS OF SECONDARY AVT X03039
         NC    SAVTPIUT,SAVTPIUT        PIU TRACE REQUESTED?   @Y17XANG
         BZ    BRACKET                  BR NO                  @X50X9NI
         L     R1,SAVTPIUT              NUMBER OF TABLE ENTRIES@Y17XANG
         LA    R1,ONE(R1)               ROUND UP TO AN EVEN ...  X03039
         SRL   R1,ONE                   ... NUMBER IF ODD        X03039
         SLL   R1,ONE                                            X03039
         LR    R3,R1                    SAVE # ENTRIES         @Y17XANG
         LA    R5,ENTRYSZ               ENTRY SIZE             @Y17XANG
         MR    R0,R5                    LENGTH OF ENTRIES IN R1@Y17XANG
         LA    R1,2*HDRSZ+CNTRLSZ(R1)   TABLE SIZE = LENGTH OF @Y17XANG
*                                       ENTRIES + CONTROL AREA.@Y17XANG
*                                       + 2 HALF TABLE HEADERS.@Y17XANG
         LR    R5,R1                    SAVE TABLE SIZE        @Y17XANG
         LA    R0,SAVTPIUT              ADDR TO RECEIVE TABLE  @Y17XANG
*                                       ADDRESS FROM GETMAIN.  @Y17XANG
         BAL   R14,AVTPAR               LINK TO GETMAIN          X03039
         LR    R1,R5                    RESTORE TABLE SIZE       X03039
         USING TTRCCTLD,R2                                       X03039
         L     R2,SAVTPIUT              ADDRESS OF TRACE TABLE @Y17XANG
         LA    R5,CNTRLSZ(R2)           FIRST ENTRY ADDRESS      X03039
         ST    R5,TTRCFRST              STORE IN CONTROL AREA    X03039
         LA    R5,HDRSZ(R5)             CURRENT ENTRY ADDRESS    X03039
         ST    R5,TTRCCURR              STORE IN CONTROL AREA    X03039
         LA    R5,0(R1,R2)              ADDRESS ON END OF TABLE  X03039
         SH    R5,HEIGHT                ADDRESS OF LAST ENTRY    X03039
         ST    R5,TTRCLAST              STORE IN CONTROL AREA    X03039
         LR    R1,R3                    NUMBER OF ENTRIES        X03039
         MH    R1,HEIGHT                #ENTRIES * ENTRY SIZE  @Y17XANG
         SRL   R1,1                     DIVIDED BY 2           @Y17XANG
         LA    R1,HDRSZ(R1)             + HALF TBL HDR SIZE =  @Y17XANG
*                                       HALF TBL SIZE          @Y17XANG
         ST    R1,TTRCLNTH              STORE IN CONTROL AREA    X03039
         SR    R5,R1                    ADDRESS OF MIDDLE ENTRY  X03039
*                                       (LAST ENTRY IN 1ST HALF) X03039
         ST    R5,TTRCMIDL              STORE IN CONTROL AREA    X03039
         LOAD  EP=IEDNTR                LOAD PIU TRACE ROUTINE @Y17XANG
         ST    R0,TTRCRTNA-ONE          STORE TRACE ROUTINE    @XA07498
*                                       ... ADDR IN CONTROL AREA X03039
         L     R5,TTRCFRST              1ST ENTRY ADDRESS      @Y17XANG
         XC    0(HDRSZ,R5),0(R5)        CLEAR 1ST HALF HEADER  @Y17XANG
         MVC   0(L'TTRCID,R5),TTRCID    MOVE ID TO 1ST HALF HDR@Y17XANG
         L     R5,TTRCMIDL              2ND HALF TBL ADDR      @Y17XANG
         XC    ENTRYSZ(HDRSZ,R5),ENTRYSZ(R5) 2ND HALF HEADER   @Y17XANG
         MVC   ENTRYSZ(L'TTRCID,R5),TTRCID   MOVE ID TO 2ND    @Y17XANG
*                                            HALF HEADER.      @Y17XANG
         SPACE
* CLEAR FIRST HALF TABLE.                                      @Y17XANG
         SPACE
         SRL   R3,1                     #ENTRIES/2=HALF SIZE.  @Y17XANG
         LR    R1,R3                    LOOP COUNT             @Y17XANG
         L     R5,TTRCFRST              1ST HALF ADDRESS       @Y17XANG
         LA    R5,HDRSZ(R5)             BYPASS HEADER.         @Y17XANG
TBL1HLF  EQU   *                                               @Y17XANG
         XC    0(ENTRYSZ,R5),0(R5)      CLEAR ENTRY.           @Y17XANG
         LA    R5,ENTRYSZ(R5)           NEXT ENTRY             @Y17XANG
         BCT   R1,TBL1HLF               LOOP TILL CLEAR        @Y17XANG
         SPACE
* CLEAR 2ND HALF TABLE.                                        @Y17XANG
         SPACE
         LR    R1,R3                    LOOP COUNT             @Y17XANG
         L     R5,TTRCMIDL              2ND HALF ADDR-ENTRY    @Y17XANG
         LA    R5,ENTRYSZ+HDRSZ(R5)     1ST ENTRY ADDR         @Y17XANG
TBL2HLF  EQU   *                                               @Y17XANG
         XC    0(ENTRYSZ,R5),0(R5)      CLEAR ENTRY            @Y17XANG
         LA    R5,ENTRYSZ(R5)           NEXT ENTRY             @Y17XANG
         BCT   R1,TBL2HLF               LOOP TILL CLEAR        @PI02854
         SPACE
* SET TRACE ACTIVE.                                            @Y17XANG
         SPACE
         MVI   TTRCFLGS,TTRCTSYS        SET FLAG TO TRACE ALL  @Y17XANG
         DROP  R2                                                X03039
         SPACE 2
         B     BRACKET                  CHECK FOR BRACKET      @X50X9NI
         EJECT
*****************************************************************X01004
*        THIS ROUTINE ALLOCATES FOR PAGES TO BE USE FOR THE LINE*X01004
*        BUFFER POOL, MESSAGE QUEVE POOL, AND CPB POOL. THE CORE*X01004
*        GOTTEN WILL BE FIXED AT OPEN. THE CORE IS ALLOCATED AT *X01004
*        A BUFFER UNIT AT A TIME TO INSURE THAT NO BUFFERS WILL *X01004
*        CROSS PAGE BOUNDARIES.                                 *X01004
*****************************************************************X01004
*                                                               *X01004
*        INPUT:                                                 *X01004
*              REGISTER ONE CONTAINS THE NUMBER OF FIXED BYTES  *X01004
*                REQUESTED                                      *X01004
*              REGISTER 14 CONTAINS THE RETURN ADDRESS OF THE   *X01004
*                CALLER                                         *X01004
*                                                               *X01004
*        REGISTERS    0,11,3,& 15 ARE DESTROYED BEFORE RETURN   *X01004
*                                                               *X01004
GETFIXD  EQU   *                                                 X01004
         LR    R3,R1                    SAVE LENGTH REQUESTED    X01004
         L     R11,FREEPTR              GET ADDRESS OF CURRENT   X01004
*                                         UNUSED BLOCK           X01004
         LR    R1,R11                   ANY UNUSED CORE ALLOCATEDX01004
         L     R0,0(R1)                 GET LENGTH OF UNUSED     X01004
RECK     EQU   *                        UNUSED AREA LARGE ENOUGH X01004
         CR    R3,R0                      TO FILL REQUEST        X01004
         BH    FREEPAGE                 NO GET ANOTHER BLOCK     X01004
         AR    R11,R3                   BUMP TO FREE CORE        X01004
         SR    R0,R3                    GET NEW LENGTH           X01004
         LTR   R0,R0                    END OF PAGE              X01004
         BNZ   SETFRPTR                 NO, UPDATE STARTING PTR. X01004
         CLM   R11,AD,FREEPTR+FIVE      END OF GOTTEN CORE       X01004
         BE    RTRNCORE                 YES, SKIP UPDATE         X01004
SETFRPTR EQU   *                                                 X01004
         ST    R0,0(R11)                SET NEW LENGTH           X01004
         ST    R11,FREEPTR              UPDATE POINTER TO        X01004
*                                        AVAILABLE UNUSED CORE   X01004
RTRNCORE EQU   *                                                 X01004
         XC    0(FOUR,R1),0(R1)         RESET LENGTH BYTE IN AREAX01004
*                                         TO BE RETURNED         X01004
         BR    R14                      RETURN TO INVOKER        X01004
FREEPAGE EQU   *                                                 X01004
         LTR   R0,R0                    NEED TO FREEMAIN         X01004
         BZ    NOFREE                   N/, BRANCH               X01004
         AR    R11,R0                   BUMP TO FREE AREA        X01004
         FREEMAIN R,LV=(0),A=(1)        FREE UNUSABLE CORE       X01004
NOFREE   EQU   *                                                 X01004
         LR    R0,R6                    SET FREE LENGTH TO PAGE  X01004
*                                        SIZE                    X01004
         LR    R1,R11                   SET NEW START ADDRESS    X01004
         B     RECK                     ALLOCATE CORE            X01004
         EJECT
BRACKET  EQU   *                        BRACKET PROCESSING     @X50X9NI
         TM    AVTSAVTF,AVTVTMCP        USING NCP SUPPORT      @G36XRNP
         BZ    COMMBUF                  NO,DONT LOAD BRACKT MGR@X50X9NI
         USING IEDNSVTD,R4                                     @X50X9NI
         L     R4,AVTSAVTP              ADDR SECONDARY AVT     @X50X9NI
         NC    SAVTBSM,SAVTBSM          WAS BRACKET=YES SPEC'D @X50X9NI
         BZ    COMMBUF                  NO,DONT LOAD BRKT MGR  @X50X9NI
         SPACE 1                                               @X50X9NI
         LOAD  EP=IEDBSM                LOAD BRACKET MANAGER   @YM06007
         SPACE 1                                               @X50X9NI
         ST    R0,SAVTBSM               STORE ADDR IN SEC. AVT @X50X9NI
         B     COMMBUF                  GO PROCESS COMMBUF     @X50X9NI
         SPACE 1                                               @X50X9NI
         DROP  R4                                              @X50X9NI
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * * X02004
*                                                                X02004
*        THIS SECTION OF CODE GETMAINS AN AREA OF MAIN STORAGE   X02004
*        FOR THE COMMON BUFFER MASTER QCB, STCBS, AND DATA AREAS.X02004
*        IT ALSO INITIALIZES FIELDS IN THE MASTER QCB            X02004
*                                                                X02004
* * * * * * * * * * * * * * * * * * * * * * * * *  * * * * * * * X02004
*                                                                X02004
COMMBUF  EQU   *                                                 X02004
         XC    FREEPTR,FREEPTR          CLEAR POINTER TO AVAIL.  X02004
*                                       CORE FOR COMMBUF GETMAINSX02004
         TM    AVTSCOPT,AVTCMBUF        IS COMMON BUFFER         X02004
*                                         TRANSMISSION TO BE USEDX02004
         BZ    CROSSREF                 BRANCH IF NOT            X02004
         SR    R10,R10                  CLEAR REGISTERS          X02004
         SR    R4,R4                      FOR                    X02004
         SR    R1,R1                      SAVING VALUES          X02004
         LH    R4,AVTCBQCB              GET NUMBER OF STCB'S     X02004
         LH    R10,AVTCBQCB+2           GET NUMBER OF DATA AREAS X02004
         LH    R1,AVTCMBSS+2            GET DATA AREA SIZE       X02004
         LR    R2,R1                    SAVE DATA AREA SIZE      X02004
         LA    R1,TWELVE(R0)            ADD 12 FOR PREFIX        X02004
         LR    R11,R4                   SAVE NUMBER OF STCB'S    X02004
         LR    R5,R10                   SAVE NO. DATA AREAS      X02004
         MR    R0,R10                   MULTIPLY DATA AREA SIZE  X02004
*                                         BY NO. DATA AREAS      X02004
         LA    R8,EIGHT                 GET SIZE OF AN STCB      X02004
         MR    R10,R8                   MULTIPLY BY NO. STCB'S   X02004
         AR    R1,R11                   ADD STCB'S TO DATA AREA  X02004
         LA    R1,MQCBSIZE(R1)          ADD SIZE OF MASTER QCB   X02004
         LR    R3,R1                    SAVE SIZE OF GETMAIN AREAX02004
         LA    R0,AVTCBQCB              LOAD THE ADDRESS OF THE  X02004
*                                         AREA TO HOLD THE ADDR  X02004
*                                         OF THE MASTER QCB      X02004
         BAL   R14,AVTPAR               BRANCH TO GETMAIN ROUTINEX02004
         L     R14,AVTCBQCB             GET ADDRESS OF MASTER QCBX02004
         LR    RCMB,R14                 GET ADDRESS OF MASTER QCBX02004
CMBCLEAR EQU   *                                                 X02004
         MVI   0(R14),AVTEZERO          CLEAR ONE BYTE           X02004
         LA    R14,ONE(R14)             INCREMENT THE COMMON     X02004
*                                         BUFFER AREA ADDRESS    X02004
         BCT   R3,CMBCLEAR              DECREMENT THE COUNT      X02004
         MVI   8(RCMB),VTO              MOVE IN OFFSET           X02004
         STH   R4,CMBASTCB              STORE AVAILABLE STCB'S   X02004
         STH   R5,CMBDAREA              STORE NO. OF DATA AREAS  X02004
         STH   R2,CMBSIZE               STORE DATA AREA SIZE     X02004
         LR    R7,R4                    GET NO. AVAIABLE STCB'S  X02004
         LA    R4,MQCBSIZE(RCMB)        POINT TO FIRST STCB      X02004
         BCTR  R7,R0                    SUBTRACT 1 FROM NO. STCB X02004
         ST    R4,CMBFLAG1              STORE ADDR OF FIRST STCB X02004
         LA    R3,8(R4)                 GET ADDR OF NEXT STCB    X02004
         ST    R3,CMBPRI                STORE ADDR OF NEXT STCB  X02004
         MVI   4(RCMB),PRIORITY         MOVE IN PRIORITY         X02004
STCBINIT EQU   *                                                 X02004
         LR    R3,R4                    GET ADDR OF FIRST STCB   X02004
         LA    R4,8(R4)                 POINT TO NEXT STCB       X02004
         ST    R4,4(R3)                 STORE ADDR IN LINK FIELD X02004
         BCT   R7,STCBINIT              SUBTRACT 1 FROM NO. STCB X02004
         LA    R4,8(R4)                 POINT TO FIRST DATA AREA X02004
*                                         PREFIX                 X02004
         ST    R4,CMBFIRST-1            STORE ADDRESS OF FIRST   X02004
*                                         DATA AREA PREFIX       X02004
         ST    R4,CMBNEXT-1             STORE ADDR OF NEXT       X02004
*                                         DATA AREA PREFIX       X02004
         SR    R3,R3                    CLEAR INDEX              X02004
         SR    R0,R0                    CLEAR FOR DIVIDE         X02004
         LA    R1,EIGHT(R2)             COPY DATA AREA SIZE PLUS X02004
*                                       CONTRL INFO              X02004
         DR    R0,R6                    DIVIDE BUFFER SIZE BY    X02004
*                                       PAGE SIZE.               X02004
         SLL   R1,THREE                 MULTIPLY BY EIGHT FOR    X02004
*                                       INDIRECT ADDRESS ENTRY   X02004
*                                       FOR EACH PAGE THE        X02004
*                                       COMMBUF SPANS            X02004
         LA    R1,EIGHT(R1,R2)          TOTAL LENGTH NEEDED FOR  X02004
*                                       EACH BUFFER              X02004
         LA    R1,ROUND(R1)             ROUND UP TO DOUBLE WORD  X02004
         SRL   R1,THREE                 BOUNDARY                 X02004
         SLL   R1,THREE                                          X02004
         LR    R7,R1                    SAVE BUFFER LENGTH       X02004
COM0     EQU   *                        LOOP TO GET BUFFERS      X02004
         LA    R11,FREEPTR              ADDR. OF AVAIL. CORE     X02004
         NC    0(FOUR,R11),0(R11)       CHAIN EMPTY              X02004
         BZ    COM2                     YES, ISSUE GETMAIN       X02004
COM1     EQU   *                        LOOP THRU GOTTEN CORE    X02004
         LR    R10,R11                  SAVE OLD CHAIN POINTER   X02004
         L     R11,0(R11)               GET NEW POINTER          X02004
         CLM   R7,AD,FIVE(R11)          REQUEST SATISFIED        X02004
         BNH   COM8                     YES, BRANCH              X02004
         CLC   0(FOUR,R11),AVTFZERO     END OF CHAIN             X02004
         BNE   COM1                     NO, BUMP TO NEXT AVAIL.  X02004
COM2     EQU   *                        GET MORE CORE            X02004
         LA    R0,0(R11)                ADDR. FOR GETMAIN        X02004
         SR    R1,R1                    CLEAR FOR LENGTH INSERT  X02004
COM3     EQU   *                                                 X02004
         AR    R1,R6                    ADD PAGE TO LENGTH       X02004
         CR    R1,R7                    LENGTH LARGER THAN REQ.  X02004
         BL    COM3                     NO, ADD ANOTHER PAGE     X02004
         BAL   R14,AVTPAR1              GETMAIN FOR BUFFER       X02004
         LM    R15,R0,AVTGETMN          LENGTH AND ADDRESS FROM  X02004
*                                       GETMAIN.                 X02004
         LR    R1,R15                   COPY LENGTH              X02004
         L     R14,0(R11)               ADDRESS OF GOTTEN CORE   X02004
         LR    R10,R11                  UPDATE OLD CHAIN POINTER X02004
         LR    R11,R14                  SET NEW CHAIN POINTER    X02004
COM4     EQU   *                        LOPP TO CLEAR BUFFER     X02004
         MVI   0(R14),AVTEZERO          CLEAR ONE BYTE           X02004
         LA    R14,ONE(R14)             BUMP TO NEXT BYTE        X02004
         BCT   R15,COM4                 CLEAR NEXT BYTE          X02004
COM5     EQU   *                        UPDATE FREE CORE IN THIS X02004
*                                       BLOCK OF UNUSED CORE     X02004
         SR    R1,R7                    FIND CORE TO REMAIN FREE X02004
         BZ    COM6                     REQUEST EQUAL AVAIL.     X02004
         LA    R15,0(R7,R11)            BUMP TO AVAIL. CORE      X02004
         ST    R1,FOUR(R15)             UPDATE AVAIL. IN BLOCK   X02004
COM6     EQU   *                                                 X02004
         ST    R15,0(R10)               REMOVE BLOCK FROM CHAIN  X02004
*                                       IF REQUEST EQUAL AVAIL.  X02004
*                                       OR UPDATE CHAIN IF NOT   X02004
         LR    R10,R7                   COPY LENGTH REQUESTED    X02004
         LR    R15,R2                   COPY BUFFER LENGTH       X02004
         LA    R15,ROUND(R15)           ROUND UP TO DOUBLE WORD  X02004
         SRL   R15,THREE                BOUNDARY                 X02004
         SLL   R15,THREE                                         X02004
         SR    R10,R15                  OFFSET TO BUFFER         X02004
         LA    R10,0(R10,R11)           ADDRESS OF BUFFER        X02004
         ST    R10,0(R4)                STORE BUFFER ADDRESS IN  X02004
*                                       PREFIX                   X02004
         STC   R3,0(R4)                 STORE INDEX IN PREFIX    X02004
         LR    R15,R2                   COPY BUFFER LENGTH       X02004
         SH    R15,HSIX                 SUBTRACT LENGTH OF HEADERX02004
         STH   R15,0(R10)               STORE LENGTH IN BUFFER   X02004
         LA    R0,SIX(R10)              GET START OF DATA AREA   X02004
         SH    R10,H8                   INDIRECT ADDR. POINTER @Y17XANG
         ST    R7,FOUR(R10)             SAVE TOTAL LENGTH FOR    X02004
*                                       PAGE FIX IN OPEN         X02004
         ST    R11,0(R10)               ASSUME INDIRECT ADDR.    X02004
         OI    0(R10),CCWIDA            SET INDIRECT ADDR. FLAG  X02004
COM7     EQU   *                                                 X02004
         LR    R14,R0                   COPY DATA AREA ADDRESS   X02004
         LR    R1,R6                    COPY PAGE SIZE           X02004
         BCTR  R1,R0                    SUBTRACT ONE FROM PAGE   X02004
         NR    R1,R14                   MASK TO GET DATA AREA    X02004
*                                       OFFSET IN PAGE           X02004
         XR    R0,R1                    GET START OF PAGE        X02004
         AR    R1,R15                   OFFSET INTO PAGE PLUS    X02004
*                                       LENGTH IN BUFFER         X02004
         SR    R1,R6                    SUBTRACT PAGE SIZE       X02004
         ST    R14,0(R11)               SET INDIRECT ADDRESS PTR X02004
*                                       IF NO IDA IS NEEDED R11  X02004
*                                       WILL EQUAL R10 AND THE   X02004
*                                       IDA FLAG WILL BE TURNED  X02004
*                                       OFF BY THIS STORE        X02004
         BNP   COM9                     NO IDA                   X02004
         LR    R15,R1                   SET NEW LENGTH           X02004
         AR    R0,R6                    BUMP DATA ADDRESS TO     X02004
*                                       NEXT PAGE.               X02004
         LA    R11,FOUR(R11)            BUMP IDA LIST POINTER    X02004
         B     COM7                     BUILD NEXT IDA           X02004
COM8     EQU   *                        NEW GETMAIN NOT NEEDED   X02004
         L     R1,FOUR(R11)             GET LENGTH AVAIL. IN PAGEX02004
         B     COM5                     REMOVE CORE FROM AVAIL.  X02004
COM9     EQU   *                        BUMP TO NEXT BUFFER      X02004
         LA    R3,ONE(R3)               BUMP INDEX               X02004
         LA    R4,TWELVE(R4)            BUMP TO NEXT PREFIX      X02004
         BCT   R5,COM0                  GET NEXT BUFFER          X02004
*              ALL BUFFERS GOTTEN                                X02004
         BCTR  R3,R0                    ADJUST INDEX BYTE        X02004
         SH    R4,HSIX                  ADJUST PREFIX POINTER    X02004
         SH    R4,HSIX                                           X02004
         ST    R4,CMBLAST-ONE           STORE ADDR. OF LAST      X02004
         STC   R3,CMBLINDX              STORE INDEX BYTE         X02004
         SPACE 5
         LA    R2,FREEPTR               ADDR. UNUSED CORE        X02004
COMEND   EQU   *                                                 X02004
         ICM   R1,ALL,0(R2)             CORE TO FREE             X02004
         BZ    CROSSREF                 NO, BRANCH               X02004
         LR    R2,R1                    UPDATE UNUSED CORE PTR   X02004
         ICM   R0,ALL,FOUR(R1)          LENGTH TO FREE           X02004
         BZ    COMEND                   EMPTY, SKIP FREEMAIN     X02004
         FREEMAIN R,LV=(0),A=(1)        FREE UNUSED CORE         X02004
         B     COMEND                   FREE NEXT BLOCK          X02004
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS SECTION OF CODE GETMAINS AN AREA OF MAIN STORAGE
*        FOR A USER REQUESTED CROSS REFERENCE TABLE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
CROSSREF EQU   *
         L     R1,AVTCRSRF              GET NO. CROSSRF ENTRIES
         LTR   R4,R1                    ANY ENTRIES REQUESTED
         BZ    NEXT                       NO, EXIT
         SLL   R1,FOUR                  MULTIPLY THE NUMBER OF
*                                         ENTRIES BY 16
         LA    R1,8(,R1)                ADD 8 ADDITIONAL BYTES TO
*                                         THE CROSS REFERENCE TABLE
         LA    R0,AVTCRSRF              LOAD THE ADDRESS OF THE
*                                         AREA TO HOLD THE ADDRESS
*                                         OF THE TABLE
         BAL   R14,AVTPAR               BRANCH TO GETMAIN ROUTINE
*
         L     R3,AVTCRSRF              LOAD THE ADDRESS OF THE TABLE
         LA    R1,EIGHT(R3)             SET THE ADDRESS POINTER TO
*                                         THE FIRST ENTRY
         ST    R1,0(R3)                 SET THE FIRST AVAILABLE
*                                         ENTRY ADDRESS
REFCLEAR EQU   *
         LA    R7,ENTRYSIZ(R1)          LOAD THE ADDRESS OF THE
*                                         NEXT AVAILABLE ENTRY
         XC    0(ENTRYSIZ,R1),0(R1)     CLEAR AN ENTRY IN THE TABLE
         ST    R7,0(R1)                 STORE THE ENTRY CHAINING
*                                         ADDRESS
         LA    R1,ENTRYSIZ(R1)          SET THE ADDRESS POINTER TO
*                                         THE NEXT ENTRY
         BCT   R4,REFCLEAR              DECREMENT THE COUNT AND
*                                         BRANCH
         LA    R4,ENTRYSIZ              LOAD THE SIZE OF AN ENTRY
         SR    R1,R4                    SET THE ADDRESS OF THE LAST
*                                         ENTRY IN THE TABLE
         ST    R1,4(,R3)                STORE THE ADDRESS OF THE
*                                         LAST ENTRY
NEXT     EQU   *
         L     RTNT,AVTRNMPT            LOAD THE ADDRESS OF THE
*                                         TERMNAME TABLE
         SR    RLEN,RLEN                CLEAR THE LENGTH REGISTER
         IC    RLEN,TNTENLEN            INSERT THE LENGTH OF EACH
*                                         TERMNAME ENTRY
         BCTR  RLEN,0                   SUBTRACT ONE TO EXECUTE
*                                         THE COMPARISON
         L     R1,TNTENLEN              LOAD ADDRESS OF LAST ENTRY
*                                         IN TERMNAME TABLE
         LA    R1,ONE(R1)               CLEAR HIGH ORDER BYTE OF
*                                         ADDRESS OF LAST ENTRY
         LA    RFIRST,TNTFIRST          ADDRESS OF FIRST ENTRY IN
*                                         TERMNAME TABLE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS NEXT SECTION OF CODE WILL CALCULATE THE TOTAL
*        NUMBER OF ENTRIES IN THE TERMNAME TABLE                 S22024
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         SR    R1,RFIRST                SUBTRACT THE ADDRESS OF THE
*                                         FIRST ENTRY FROM THE
*                                         ADDRESS OF THE LAST ENTRY
         SR    R0,R0                    CLEAR DIVIDE REGISTER
         LA    R3,4(RLEN)               LENGTH OF ENTRY NAME AND ADDR
         DR    R0,R3                    DIVIDE THE LENGTH OF TABLE
*                                         BY THE LENGTH OF AN ENTRY
         LA    R1,ONE(R1)               ADD ONE TO THE RESULT TO
*                                         GET THE ACTUAL NUMBER
*                                         OF ENTRIES
         STH   R1,TNTLEN                STORE THE TOTAL NUMBER OF
*                                         TERMNAME ENTRIES
*                                         IN THE TERMNAME TABLE
         LA    R3,ONE                   LOAD A COMPARISON VALUE
         CR    R3,R1                    TEST FOR JUST ONE ENTRY IN
*                                         THE TERMNAME TABLE
         BNE   NOTONE                   BRANCH IF MORE THAN    @YM08559
*                                       ONE ENTRY              @YM08559
         LA    R6,ONE(RLEN,RFIRST)      BUMP TO ADDRESS PORTION@OY14517
*                                       OF ENTRY               @OY14517
         NI    TWO(R6),RESTLOW          RESET LOW ORDER BIT    @OY14517
         B     PRIMOPT                  BRANCH TO SET UP       @OY14517
*                                       TERMNAME TABLE         @OY14517
NOTONE   EQU   *                                               @OY14517
         SLL   R1,ONE                   MULTIPLY ENTRIES BY 2 TO
*                                         GET SIZE OF OFFSET TABLE
         ST    R1,AVTSAVE4+12           SAVE LENGTH FOR FREEMAIN
         LA    R0,AVTSAVE4+16           LOAD RECEIVING ADDRESS
*                                         RECEIVE THE ADDRESS OF
*                                         THE GETMAINED AREA
         BAL   R14,AVTPAR               SET UP PARAMETER LIST
*
         L     RGETAREA,AVTSAVE4+16     LOAD THE ADDRESS OF THE
*                                         OFFSET TABLE
         LA    R2,ONE                   FIRST OFFSET VALUE
         LH    R1,TNTLEN                NUMBER TERMNAME TABLE ENTRIES
*                                         TERMNAME ENTRIES
OFFSTORE EQU   *
         STH   R2,0(RGETAREA)           STORE FIRST/NEXT VALUE IN
*                                         THE OFFSET TABLE
         BCT   R1,UPDATE                REDUCE NUMBER OF ENTRIES
*                                         BY ONE
         EJECT
FIRSTENT EQU   *
         LR    RPRESENT,RFIRST          ADDRESS OF THE FIRST ENTRY
*                                         IN THE TERMNAME TABLE
         LA    RTRM,4(RLEN,RFIRST)      ADDRESS OF THE SECOND ENTRY
*                                         IN THE TERMNAME TABLE
         L     ROTNOW,AVTSAVE4+16       LOAD ADDRESS OF OFFSET TABLE
         LA    ROTNEXT,2(ROTNOW)        LOAD THE ADDRESS OF THE
*                                         SECOND ENTRY IN OFFSET TBL
         MVI   AVTGETMN,NOSWAP          CLEAR THE SWAP INDICATOR
         LA    R3,3(RLEN)               GET THE LENGTH OF THE
*                                         ENTRY NAME AND ADDRESS
*                                         MINUS 1
EXECT    EX    RLEN,COMPENT             EXECUTE A COMPARISON OF THE
*                                         TWO TERMNAME ENTRIES
         BNH   COMTAB                   THE TWO ENTRIES ARE IN
*                                         ALPHABETICAL ORDER
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        SWAPPING ROUTINE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         EX    R3,EX1                   SWAP THE TWO
         EX    R3,EX2                     ENTRIES IN THE
         EX    R3,EX1                     TERMNAME TABLE
*
         XC    0(TWO,ROTNOW),0(ROTNEXT) SWAP THE TWO
         XC    0(TWO,ROTNEXT),0(ROTNOW)   ENTRIES IN THE
         XC    0(TWO,ROTNOW),0(ROTNEXT)   OFFSET TABLE
*
         MVI   AVTGETMN,SWAP            SET SWAP INDICATOR
*
COMTAB   EQU   *
         L     R1,TNTENLEN              LAST ENTRY IN TERMNAME TABLE
         LA    R1,0(R1)                 CLEAR HIGH ORDER BYTE
         CR    RTRM,R1                  CHECK FOR END OF THE
*                                         TERMNAME TABLE
         BNL   CHKSWAP                  IF END OF TABLE, GO TO
*                                         CHECK SWAP INDICATOR
         LR    RPRESENT,RTRM            UPDATE POINTER TO TERMNAME
*                                         ENTRY N
         LA    RTRM,4(RLEN,RTRM)        UPDATE POINTER TO TERMNAME
*                                         ENTRY N+1
         LR    ROTNOW,ROTNEXT           UPDATE PRESENT OFFSET POINTER
         LA    ROTNEXT,TWO(ROTNEXT)     UPDATE NEXT OFFSET POINTER
         B     EXECT                    COMPARE NEXT 2 ENTRIES
*
UPDATE   EQU   *
         LA    RGETAREA,2(RGETAREA)     BUMP POINTER TO THE
*                                         OFFSET TABLE BY TWO
         LA    R2,ONE(R2)               BUMP INDEX BY ONE
         B     OFFSTORE                 STORE OFFSET IN OFFSET TABLE
*
CHKSWAP  TM    AVTGETMN,SWAP            TEST SWAP INDICATOR
         BO    FIRSTENT                 GO THRU TABLE ONCE MORE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS SECTION OF CODE STORES NEW VALUES INTO THE ALTERNATE
*        TERMINAL OFFSET FIELD IN THE TERMINAL TABLE AND TESTS THE
*        STATUS OF EACH TERMINAL LISTED AS AN ALTERNATE DESTINATION
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         LH    R6,TNTLEN                NUMBER TERMNAME TABLE ENTRIES
         MVI   AVTGETMN,NOSWAP          ZERO HIGH ORDER BYTE
*
ALTSET   EQU   *
         LA    R1,MSGC                  ADDRESS OF THE ERROR MESSAGE
         EX    RLEN,ERRSET              USE AN EXECUTE TO MOVE THE
*                                         TERMINAL NAME TO THE
*                                         ERROR MESSAGE
         LA    RFIRST,1(RLEN,RFIRST)    BUMP THE POINTER TO THE
*                                         ADDRESS PORTION OF THE
*                                         ENTRY
         TM    TWO(RFIRST),LOWBIT       LOW ORDER BIT IN ADDR  @G36XRNP
         BZ    PROCNOR                  NO, PROCESS NORMALLY   @G36XRNP
         NI    TWO(RFIRST),RESTLOW      RESET LOW ORDER BIT    @G36XRNP
         B     FOUNDMAT                 BRANCH FOR NEXT ENTRY  @G36XRNP
PROCNOR  EQU   *                                               @G36XRNP
         MVC   AVTGETMN+1(3),0(RFIRST)  MOVE TERMINAL TABLE
*                                         ADDRESS OF ENTRY INTO
*                                         A SCRATCH WORD
         L     RTRM,AVTGETMN            LOAD ADDRESS OF TERM. ENTRY
         TM    TRMSTATE,SINGLINE        TEST ENTRY TYPE
         BO    LOADAD                   LOG ENTRY
         BNZ   CHKCORD                  BRANCH ON NO             S22024
         TM    TRMOUTSQ,LGB             IS THIS AN LGB           S22024
         BO    FOUNDMAT                 BRANCH ON YES - IGNORE   S22024
         B     TESTLIST                 SINGLE OR LINE ENTRY     S22024
CHKCORD  EQU   *                                                 S22024
         TM    TRMSTATE,CORDLIST        IS THIS ENTRY EITHER A
*                                         CASCADE OR A DISTRIBUTION
*                                         LIST ENTRY
         BO    CASDISTL                 GO TO UPDATE ANY CASCADE OR
*                                       DISTRIBUTION LIST ENTRIES
ALTDTEST EQU   *
         CLC   TRMALTD(2),AVTFZERO      HAS AN ALTERNATE DESTINATION
*                                         BEEN SPECIFIED
         BE    FOUNDMAT                 NO, BRANCH
*
LOADAD   EQU   *
         L     R1,AVTSAVE4+16           LOAD THE BEGINNING ADDRESS
*                                         OF THE OFFSET TABLE
         LR    R0,R1                    COPY THE BEGINNING ADDRESS
*
CLCOFF   EQU    *
         CLC   TRMALTD(2),0(R1)         COMPARE THE ALTERNATE
*                                         DESTINATION OFFSET TO THE
*                                         FIRST/NEXT ENTRY IN THE
*                                         OFFSET TABLE
         BNE   ENDTAB                   CHECK FOR END OF THE
*                                         OFFSET TABLE
         SR    R1,R0                    PICK UP THE OFFSET FROM
*                                         START OF OFFSET TABLE
         LA    R1,TWO(R1)               ADD 2 TO THE DIFFERENCE
         SRL   R1,ONE                   DIVIDE BY TWO TO GET NEW
*                                         INDEX FOR ALTERNATE
         STH   R1,TRMALTD               STORE THE NEW ALTERNATE
*                                         DESTINATION OFFSET IN THE
*                                         TERMINAL ENTRY
         TM    AVTGETMN,ILISTNOW        ARE WE CURRENTLY SORTING AN
*                                         INVITATION LIST
         BO    ALCONT                   YES, BRANCH
         TM    AVTGETMN,CDLSTNOW        ARE WE CURRENTLY SORTING A
*                                         CASCADE OR A DISTRIBUTION
*                                         LIST
         BO    CASDIST2                 YES, BRANCH
         TM    TRMSTATE,LOGTYPE         IS THIS A LOG ENTRY
         BO    SETLOG                   YES, BRANCH
         LA    RTRM,TNTFIRST            SET THE ADDRESS OF THE FIRST
*                                         ENTRY IN THE TERMNAME
*                                         TABLE
         BCTR  R1,0                     SUBTRACT 1 FROM OFFSET VALUE
         LTR   R1,R1                    IS ALTERNATE DESTINATION
*                                       THE FIRST ENTRY IN TABLE
         BZ    ENTRY1                   YES, BRANCH
*
LOOP     EQU   *
         LA    RTRM,4(RLEN,RTRM)        GO THROUGH TERMNAME TABLE
         BCT   R1,LOOP                  GO TO NEXT ENTRY
*
ENTRY1   EQU   *
         LA    RTRM,1(RLEN,RTRM)        BUMP THE POINTER TO THE
*                                         ADDRESS PORTION OF THE
*                                         ENTRY
         MVC   AVTGETMN+1(3),0(RTRM)    MOVE TERMINAL TABLE
*                                         ADDRESS OF ENTRY INTO A
*                                         SCRATCH WORD
         L     RTRM,AVTGETMN            LOAD THE ADDRESS OF THE
*                                         TERMINAL ENTRY
         TM    TRMSTATE,TRMACPTN        IS THIS TERMINAL ABLE TO
*                                         ACCEPT
         BNO   TERMERR                  UNABLE TO ACCEPT
*
FOUNDMAT EQU   *
         LA    RFIRST,3(RFIRST)         BUMP TERMINAL I.D. POINTER
*                                         TO NEXT ENTRY
         BCT   R6,ALTSET                REDUCE ENTRY COUNT AND GO
*                                         TO NEXT ID ENTRY
*
         TM    AVTGETMN,ALTDSTER        HAVE WE DETECTED ANY ERRORS
*                                         WHILE RESETTING THE
*                                         ALTERNATE DESTINATIONS
         BO    TERMERR1                 YES, BRANCH
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS ROUTINE SETS UP CERTAIN FIELDS IN THE FIRST OF THE
*        TERMNAME TABLE NECESSARY FOR THE BINARY SEARCH ROUTINE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
PRIMOPT  EQU   *
         SR    R6,R6                    CLEAR POWER COUNTER
         LH    R1,TNTLEN                LOAD THE TOTAL NUMBER OF
*                                         ENTRIES IN THE TABLE
         LR    R2,R1                    COPY THE ENTRY COUNT
*
TNTLOOP  EQU   *
         SRL   R1,ONE                   DIVIDE ENTRIES BY 2
         LA    R6,ONE(R6)               INCREMENT THE POWER OF 2
*                                         COUNTER BY 1
         LTR   R1,R1                    TEST FOR ZERO
         BNZ   TNTLOOP                  DIVIDE IS NOT FINISHED
         LA    R1,ONE                   PRIME OPTIMUM ENTRY COUNTER
*
TNTLOOP2 EQU   *
         SLL   R1,ONE                   MULTIPLY ENTRIES BY 2
         BCT   R6,TNTLOOP2              REDUCE POWER COUNTER BY ONE
         LR    R6,R1                    COPY OPTIMUM+1 NUMBER
         SRL   R1,ONE                   DIVIDE OPTIMUM+1 NUMBER BY
*                                         TWO
         BCTR  R1,0                     SUBTRACT 1 FROM THE RESULT
         SRL   R6,SHIFT2                DIVIDE OPTIMUM BY 4
         STH   R6,TNTSRCHX              STORE SEARCH EXTENT FACTOR
         SR    R15,R15                  CLEAR ENTRY LENGTH REGISTER
         IC    R15,TNTENLEN             SAVE ENTRY LENGTH
         LA    RFIRST,TNTFIRST          ADDRESS OF THE FIRST ENTRY
*                                         IN THE TERMNAME TABLE
         LTR   R6,R6                    TEST FOR 1 ENTRY
         BNZ   TERMAD                   THERE IS MORE THAN 1 ENTRY
*
TERMSTOR EQU   *
         ST    RFIRST,TNTENLEN          STORE IN THE TERMNAME TABLE
         STC   R15,TNTENLEN             RESTORE ENTRY LENGTH
         B     SORTLINE                 GO ESTABLISH GROUP LINE@Y17XANG
*                                       HIERARCHY.             @Y17XANG
TERMAD   EQU   *
         LA    RFIRST,4(RLEN,RFIRST)    BUMP THE ADDRESS
         BCT   R1,TERMAD                BUMP THE POINTER AGAIN
         B     TERMSTOR                 STORE THE ADDRESS OF THE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS SECTION OF CODE RESETS THE TERMNAME OFFSETS
*        FOR ALL ENTRIES IN EITHER A CASCADE OR A DISTRIBUTION
*        LIST
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
CASDISTL EQU   *
         BCTR  RTRM,0                   DECREMENT BEGINNING ADDRESS OF
         BCTR  RTRM,0                     LIST BY TWO
         LH    R3,SIX(RTRM)             LOAD THE NUMBER OF ENTRIES
         OI    AVTGETMN,CDLSTNOW        SET A FLAG TO INDICATE THAT
*                                         WE ARE CURRENTLY SORTING
*                                         A CASCADE OR DISTRIBUTION
*                                         LIST
         B     LOADAD                   SET OFFSET TABLE ADDRESSES
*
CASDIST2 EQU   *
         LR    R2,R15                   SAVE REG.                S22026
         L     R15,AVTRNMPT             ADDR OF TNT CODE         S22026
         BALR  R14,R15                  GET TRM ENTRY ADDRESS    S22026
         N     R1,LOWOFF                TURN OFF LOW ORDER BIT @OY12967
         L     R14,TRMDESTQ-IEDQTRM-1(R1) GET QCB ADDR           S22026
         LR    R15,R2                   RESTORE REG.             S22026
         TM    QCBDSFLG-IEDQQCB(R14),QCBDRQQ CONC                S22026
         BO    TERMERR                  YES,ERROR, BRANCH        S22026
         LA    RTRM,2(RTRM)             BUMP THE POINTER TO THE
*                                         NEXT LIST ENTRY
         BCT   R3,LOADAD                SET OFFSET TABLE ADDRESSES
         NI    AVTGETMN,CDLSTOFF        TURN OFF THE CASCADE SORT
*                                         IN PROGRESS FLAG
         B     FOUNDMAT                 GO TO NXT TABLE ENTRY    S22026
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS SECTION OF CODE STORES THE NEW TERMNAME OFFSET
*        FOR ALL LOG ENTRIES IN THE LCB OF THE ENTRIES
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
SETLOG   EQU   *
         XC    TRMALTD(TWO),TRMALTD     CLEAR THE DUMMY ALTERNATE
*                                         DESTINATION FIELD IN THE
*                                         LOG TERMINAL ENTRY
         L     RQCB,TRMSTATE            LOAD THE ADDRESS OF THE
*                                         DESTINATION QCB FOR THIS
*                                         ENTRY
         L     R3,QCBRELLN              LOAD THE ADDRESS OF THE LOG
*                                         LCB
         STH   R1,LCBTTCIN-IEDQLCB(,R3) STORE THE NEW TERMNAME   X03039
*                                         OFFSET IN THE LOG LCB
         B     FOUNDMAT                 CHECK THE NEXT ENTRY IN THE
*                                         TERMNAME TABLE
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS ROUTINE SETS UP CERTAIN FIELDS NECESSARY FOR
*        SORTING ALL INVITATION LISTS ASSOCIATED WITH A DCB
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
TESTLIST EQU   *
         TM    TRMSTATE,TRMPREF         EP RESOURCE?           @PI02861
         BZ    NOTSSCP                  BRANCH YES             @PI02861
         LA    R2,TRMPRFSZ              TRM PREFIX SIZE        @PI02861
         LR    R3,RTRM                  TRM ADDR               @PI02861
         SR    R3,R2                    TRM PREFIX ADDRESS     @PI02861
         USING IEDNTRM,R3                                      @PI02861
         CLI   TRMTYPE,TRMSSCP          SSCP'S TRM?            @PI02861
         BE    ALTDTEST                 BRANCH YES TO BYPASS   @PI02861
         CLI   TRMTYPE,TRMLNCP          NCP TRM?               @PI02861
         BE    ALTDTEST                 BRANCH YES TO BYPASS   @PI02861
         DROP  R3                                              @PI02861
NOTSSCP  EQU   *                                               @PI02861
         L     RQCB,TRMSTATE            LOAD THE ADDRESS OF THE
*                                         DESTINATION QCB FOR THIS
*                                         ENTRY
         L     RDCB,QCBRELLN            POINT TO THE DCB
         TM    DCBDSORG,LGB             IS THIS AN LGB           S22024
         BNO   SORTED                   BRANCH ON NO             S22024
         TM    TRMSTATE,LINE            IS THIS A LINE ENTRY     S22024
         BNO   RNTERM                   NO, MUST BE A TERMINAL   X03039
         IC    RCPB,LGBLNCT(RDCB)       GET NUMBER OF LINES      S22024
         LA    RCPB,1(RCPB)             UPDATE COUNT             S22024
         STC   RCPB,LGBLNCT(RDCB)       STORE NEW COUNT          S22024
         B     ALTDTEST                 CHECK ALTERNATE DEST     S22024
RNTERM   EQU   *                                                 X03039
         NC    LGBBUFSI-IEDNLGB(2,RDCB),LGBBUFSI-IEDNLGB(RDCB) @OZ29219
*                                       IS BUFSIZE ZERO        @OZ29219
         BNZ   BUFOK                    IF ZERO LEAVE AS IS    @OZ29219
         MVC   LGBBUFSI-IEDNLGB(2,RDCB),AVTKEYLE  REP 0 BUFSIZE@OZ29219
BUFOK    EQU   *                                               @OZ29219
         CLI   DCBILCT,AVTEZERO         NO LISTS SPECIFIED       X03039
         BE    ALTDTEST                 NONE, BRANCH             X03039
SORTED   EQU   *                                                 S22024
         TM    DCBEIOBX,ILISORTD        HAVE WE SORTED ALL THE
*                                         INVITATION LISTS
*                                         ASSOCIATED WITH THIS DCB
         BO    ALTDTEST                 YES, BRANCH
         SR    RCPB,RCPB                CLEAR A REGISTER FOR THE
*                                         COUNT OF INVITATION LISTS
         IC    RCPB,DCBILCT             GET THE NUMBER OF INVITATION
*                                         LIST ADDRESSES IN THIS DCB
         SR    R2,R2                    CLEAR AN INDEX REGISTER
*
ILSTLOAD EQU   *
         L     RTRM,DCBINVLI(R2)        LOAD THE ADDRESS OF THE
*                                         FIRST/NEXT INVITATION
*                                         LIST
         TM    THREE(RTRM),INVLSRTD     HAVE WE PREVIOUSLY SORTED
*                                         THIS INVITATION LIST
         BO    RESET                    YES, BRANCH
         SR    R3,R3                    CLEAR AN ENTRY COUNTER
         IC    R3,0(RTRM)               LOAD THE NUMBER OF ENTRIES
*                                         IN THE INVITATION LIST
         LTR   R3,R3                    IS THIS A DUMMY INVITATION
*                                         LIST
         BZ    RESET                    YES, BRANCH
         LA    R1,TEN                   LOAD A DISPLACEMENT OF 10
         SR    RTRM,R1                  SET THE STARTING ADDRESS
*                                         OF THE LIST TO MINUS 8
         OI    AVTGETMN,ILISTNOW        SET A FLAG TO INDICATE AN
*                                         INVITATION LIST IS BEING
*                                         SORTED
         B     LOADAD                   LOAD OFFSET ADDRESSES
*
ALCONT   EQU   *
         BCTR  RTRM,0                   DECREMENT ADDRESS PTR    S22025
         BCTR  RTRM,0                   DECREMENT POINTER AGAIN  S22025
         BCT   R3,LOADAD                TEST THE NEXT INVITATION
*                                         LIST ENTRY
         L     R3,DCBINVLI(R2)          LOAD THE ADDRESS OF THE
*                                         CURRENT INVITATION LIST
         OI    THREE(R3),INVLSRTD       INDICATE THAT THIS
*                                         INVITATION LIST HAS BEEN
*                                         SORTED
RESET    EQU   *
         LA    R2,FOUR(R2)              INCREMENT THE ADDRESS INDEX
*                                         BY 4
         BCT   RCPB,ILSTLOAD            DECREMENT THE COUNT OF
*                                         INVITATION LISTS TO BE
*                                         SORTED
         NI    AVTGETMN,ILISTOFF        TURN OFF THE LIST BEING
*                                         SORTED FLAG
         OI    DCBEIOBX,ILISORTD        SET THE FLAG TO INDICATE
*                                         THAT ALL INVITATION LISTS
*                                         FOR THIS DCB HAVE BEEN SORTED
         MVC   AVTGETMN+1(3),0(RFIRST)  MOVE THE ADDRESS OF THE
*                                         TERMINAL ENTRY INTO A
*                                         SCRATCH WORD
         L     RTRM,AVTGETMN            LOAD THE TERMINAL ADDRESS
         B     ALTDTEST                 TEST FOR AN ALTERNATE
*                                         DESTINATION
ENDTAB   EQU   *
         CR    R1,RGETAREA              TEST FOR END OF OFFSET TBL
         BNL   TERMERR                  TERMINAL ERROR DETECTED
*
         LA    R1,TWO(R1)               BUMP POINTER TO NEXT ENTRY
*                                         IN OFFSET TABLE
         B     CLCOFF                   TEST NEXT ENTRY IN OFFSET
*                                         TABLE
         EJECT
TERMERR  EQU   *
         OI    AVTGETMN,ALTDSTER        SET THE ERROR INDICATOR IN
*                                         THE AVT
MSG      WTO   'IED007I 0        ILLEGAL DESTINATION',                 C
               ROUTCDE=11,DESC=4
*
         TM    AVTGETMN,ILISTNOW        ARE WE CURRENTLY SORTING
*                                         AN INVITATION LIST
         BO    RESET                    YES, BRANCH
         TM    AVTGETMN,CDLSTNOW        ARE WE CURRENTLY SORTING A
*                                         CASCADE OR A DISTRIBUTION
*                                         LIST
         BZ    FOUNDMAT                 NO, BRANCH
         NI    AVTGETMN,CDLSTOFF        YES, TURN OFF THE SORT IN
*                                         PROGRESS FLAG
         B     FOUNDMAT                 GO TO NEXT TABLE ENTRY   S22025
         EJECT
COMPSUBR EQU   *
         EX    RLEN,COMPENT             EXECUTE A COMPARISON TO
*                                         FIND A MATCH FOR THE
*                                         OPERATOR CONTROL TERMINAL
         BNE   NEXTERM                  UPDATE ENTRY POINTER
         LR    R0,RTRM                  COPY POINTER TO ENTRY IN
*                                         THE TERMNAME TABLE
         SR    R0,RTNT                  GET OFFSET FROM START OF
*                                         TERMNAME TABLE
         BR    R2                       RETURN
*
NEXTERM  EQU   *
         LA    RTRM,4(RLEN,RTRM)        UPDATE POINTER TO NEXT
*                                         ENTRY IN TERMNAME TABLE
         BCT   R3,COMPSUBR              TEST THE NEXT TERMINAL
         LA    R3,AVTDOUBX              LOAD THE ADDRESS OF THE
*                                         PRIMARY OPERATOR CONTROL
*                                         TERMINAL NAME
         CR    R3,R1                    ARE WE TESTING FOR A POC
*                                         TERMINAL
         BE    POCERR                   YES, BRANCH BECAUSE WE HAVE
*                                         NOT FOUND THAT TERMINAL
*                                         DEFINED AS THE PRIMARY
*                                         OPERATOR CONTROL TERMINAL
DLQMSG   EQU   *
         SR    R3,R3                    CLEAR A REGISTER TO ZEROES
         STH   R3,AVTDLQX               SET THE DEAD LETTER QUEUE
*                                         OFFSET TO ZERO
         WTO   'IED078I DLQ TERM ERROR',MF=I,ROUTCDE=11,DESC=4
*
         B     IDSORT                   CHECK FOR CONCENTRATORS  S22026
         EJECT                                                 @Y17XANG
***********************************************************************
*                                                              @Y17XANG
* BUILD THE GROUP-LINE TTE HIERARCHY.                          @Y17XANG
*                                                              @Y17XANG
***************************************************************@Y17XANG
SORTLINE EQU   *                                               @Y17XANG
         SPACE
* IF THIS IS AN EP ONLY SYSTEM BYPASS ESTABLISHING THE LINE    @Y17XANG
* GROUP HIERARCHY AND INITIATING THE QCBTTCIN FIELDS.          @Y17XANG
         SPACE
         TM    AVTSAVTF,AVTVTMCP        EP ONLY?               @Y17XANG
         BZ    AVTTEST                  BRANCH YES             @Y17XANG
         L     R15,SORTAD               ADDR BUILD ROUTINE.    @Y17XANG
         BALR  R14,R15                  GO BUILD HIERARCHY.    @Y17XANG
         EJECT                                                 @Y17XANG
***************************************************************@Y17XANG
*                                                              @Y17XANG
* INITIATE QCB TNT INDEX FIELD FOR 3705 CLUSTERS, TERMINALS,   @Y17XANG
* LU'S AND CTERM TTE'S.                                        @Y17XANG
*                                                              @Y17XANG
***************************************************************@Y17XANG
         SPACE
         L     R15,TTCINAD              ADDR OF TTCIN ADJ ROUT @Y17XANG
         BALR  R14,R15                  INITIATE QCB TNT INDEXS@Y17XANG
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS ROUTINE CHECKS FOR THE PRESENCE OF A PRIMARY OPERATOR
*        CONTROL TERMINAL BEING SPECIFIED IN THE AVT
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
AVTTEST  EQU   *
         LH    R3,TNTLEN                NUMBER TERMNAME TABLE ENTRIES
*                                         IN THE TERMNAME TABLE
         SLR   RLEN,RLEN                                       @Y17XANG
         IC    RLEN,TNTENLEN            TNT NAME LENGTH        @Y17XANG
         BCTR  RLEN,0                   MINUS 1 FOR EXECUTE    @Y17XANG
         CLI   AVTDOUBX,AVTEZERO        TEST FOR A PRIMARY OPERATOR
*                                         CONTROL TERMINAL
         BE    BEGINDLQ                 NO POC TERMINAL, BRANCH
         CLC   AVTDOUBX(EIGHT),SYSCON   HAS SYSCON BEEN SPECIFIED
*                                         AS THE PRIMARY OPERATOR
*                                         CONTROL TERMINAL
         BE    BEGINDLQ                 YES, BRANCH
         LA    R1,AVTDOUBX              LOAD THE ADDRESS OF PRIMARY
*                                       OPERATOR CONTROL TERMINAL
         LA    RTRM,TNTFIRST            LOAD ADDRESS OF FIRST ENTRY
*                                         IN TERMNAME TABLE
         BAL   R2,COMPSUBR              BRANCH TO THE COMPARISON
*                                         SUBROUTINE
         STH   R0,AVTOPCON              STORE OFFSET IN AVT
         AR    R0,RTNT                  ADD TNT BASE TO OFFSET @Y17XANG
         LA    R1,TNTFIRST              GET ADDR OF 1ST ENTRY  @YM06156
*                                       IN THE TNT             @YM06156
         SR    R0,R1                    DISP TO PRIMARY OPCON  @YM06156
*                                       FROM FIRST TNT ENTRY.  @Y17XANG
         LR    R1,R0                    RIGHT MOST DIVIDEND    @Y17XANG
*                                       REGISTER.              @Y17XANG
         LA    R2,4(RLEN)               TNT ENTRY LENGTH       @Y17XANG
         SR    R0,R0                    CLEAR HI ORDER OF      @Y17XANG
*                                       DIVIDEND REGISTER.     @Y17XANG
         DR    R0,R2                    TNT INDEX OF PRIMARY   @Y17XANG
*                                       OP CONSOLE.            @Y17XANG
         LA    R1,1(,R1)                BUMP RELATIVE OFFSET   @YM06156
*                                       TO GET TNT OFFSET      @YM06156
         STH   R1,AVTOPCIN              SAVE IN AVT.           @Y17XANG
         LA    RTRM,ONE(RLEN,RTRM)      POINTER TO THE
*                                         ADDRESS PORTION OF ENTRY
         MVC   AVTGETMN+1(3),0(RTRM)    MOVE TERMINAL TBL ADDRESS
*                                         ADDRESS TO SCRATCH AREA
         L     R2,AVTGETMN              LOAD TERMINAL ADDRESS
         L     R3,0(R2)                 LOAD QCB ADDRESS        SA51787
         CLI   0(R3),QCBFQCB            PUT PROCESS ENTRY       SA51787
         BE    PUTOK                    BRANCH IF YES           SA51787
         TM    TRMSTATE-IEDQTRM(R2),TRMACPTN  CAN TERM ACCEPT  @OY18827
*                                         AND ACCEPT CAPABILITIES
         BNO   POCERR                   GO TO ERROR CODE ROUTINE
PUTOK    EQU   *                                                SA51787
         TM    0(R2),SECOPCTL           HAS THIS TERMINAL BEEN
*                                         DEFINED AS A SECONDARY
*                                         OPERATOR CONTROL TERMINAL
         BZ    POCERR                   NO, THEN THERE IS AN ERROR
         TM    TRMDSORG-IEDQTRM(R2),TRMLGB IS ENTRY A 3705       S22024
*                                       LINE GROUP BLOCK         S22024
         BO    POCERR                   YES, ERROR               S22024
         LH    R3,TNTLEN                NUMBER TERMNAME TABLE ENTRIES
*                                         NUMBER OF TERMINAL ENTRIES
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS SECTION OF CODE TESTS FOR THE PRESENCE OF AN
*        ENTRY IN THE TERMNAME TABLE WHICH HAS BEEN
*        DEFINED AS THE DEAD LETTER QUEUE TERMINAL
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
BEGINDLQ EQU   *
         LA    R1,AVTDLQ                LOAD THE ADDRESS OF THE
*                                         DEAD LETTER QUEUE
*                                         TERMINAL NAME
         NC    0(8,R1),0(R1)            HAS THE USER DEFINED A
*                                         TERMINAL AS A DEAD LETTER
*                                         QUEUE
         BZ    IDSORT                   NO, BRANCH               S22026
         LA    RTRM,TNTFIRST            LOAD THE ADDRESS OF THE
*                                         FIRST ENTRY IN THE TNT
         BAL   R2,COMPSUBR              BRANCH TO THE COMPARISON
*                                         SUBROUTINE
         LA    R1,TNTOFF                LOAD THE ADDRESS OF THE
*                                         FIRST ENTRY IN THE TNT
         SR    R0,R1                    SUBTRACT THE ADDRESS OF
*                                         THE FIRST ENTRY FROM THE
*                                         DLQ OFFSET
         LR    R1,R0                    COPY THE TERMINAL OFFSET
         SR    R0,R0                    CLEAR THIS REGISTER FOR
*                                         THE DIVISION
         LA    R3,4(RLEN)               LENGTH OF ENTRY NAME AND ADDR
         DR    R0,R3                    DIVIDE THE TERMINAL OFFSET
*                                         BY THE LENGTH OF A
*                                         TERMNAME TABLE ENTRY
         LA    R1,ONE(R1)               INCREMENT THE TERMINAL OFFSET
         STH   R1,AVTDLQX               STORE THE TERMINAL NUMBER
*                                         OF THE DEAD LETTER QUEUE
*                                         IN THE AVT
         AR    RTRM,RLEN                ACCESS THE ADDRESS OF THE
*                                         TERMINAL ENTRY
         MVC   AVTGETMN+1(3),1(RTRM)    MOVE THE TERMINAL ADDRESS
*                                         OF THE DEAD LETTER QUEUE
*                                         ENTRY TO A SCATCH WORD
         L     RTRM,AVTGETMN            LOAD THIS ADDRESS INTO
*                                         REGISTER
         L     RQCB,0(RTRM)             LOAD THE ADDRESS OF THE QCB
*                                         FOR THIS TERMINAL
         TM    QCBDSFLG,TSOTERM         IS THIS A TSO TERMINAL
         BZ    DLQMSG                   YES, BRANCH
         EJECT
***********************************************************************
*                                                                     *
*        THIS SECTION OF CODE SORTS THE DEVICE I.D. TABLE FOR EACH    *
*        CONCENTRATOR IN THE SYSTEM                                   *
*                                                                     *
***********************************************************************
IDSORT   EQU   *                                                 S22026
         TM    AVTSCOPT,AVTCONC+AVTCONCO ANY CONCS IN SYSTEM     S22026
         BZ    ENDIDSRT                 NO, BRANCH               S22026
*                                                                S22026
         MVI   AVTGETMN,HEXZERO         ZERO ERROR SWITCH        S22026
         LH    RTNTCTR,TNTLEN           NO. OF ENTRIES IN TNT    S22026
         N     RTNTCTR,AVTCLRHI         CLEAR HIGH-ORDER BYTE    S22026
         LA    RPRESENT,TNTFIRST        ADDR OF TERMINAL NAME    S22026
         SR    RLENTN,RLENTN                                     S22026
         IC    RLENTN,TNTENLEN          LENGTH OF TERMINAL NAME  S22026
         BCTR  RLENTN,0                 DECREMENT LENGTH         S22026
NEXTTRMN EQU   *                                                 S22026
         LA    RTRM,ONE(RLENTN,RPRESENT)                         S22026
         MVC   AVTGETMN+1(3),0(RTRM)    ADDR OF TRM ENTRY        S22026
         L     RTRM,AVTGETMN            GET ADDR OF TRM ENTRY    S22026
         TM    TRMSTATE,ENTRYTYP        SINGLE ENTRY             S22026
         BNZ   NEXTTRM                  NO, BRANCH               S22026
         TM    TRMDSORG,TRMLGB          LGB                      S22024
         BO    NEXTTRM                  YES BRANCH               S22024
         TM    TRMDEVFL+1,CONC          CONC OR ATTACHED TRM     S22026
         BO    SORTIDT                  YES, BRANCH              S22026
*                                                                S22026
NEXTTRM  EQU   *                                                 S22026
         LA    RPRESENT,FOUR(RLENTN,RPRESENT) NXT TRM ENTRY ADDR S22026
         BCT   RTNTCTR,NEXTTRMN         GO THRU ENTIRE TNT       S22026
*                                                                S22026
         B     ENDIDSRT                 ALL ID TBLS SORTED       S22026
*                                                                S22026
SORTIDT  EQU   *                                                 S22026
         L     RQCB,TRMDESTQ-1          ADDR OF DEST QCB         S22026
         TM    QCBDSFLG,QCBDRQQ         DATA READY QUEUE         S22026
         BO    LOCIDTBL                 YES, BRANCH              S22026
*                                                                S22026
         AH    RQCB,QCBEXTO             CALC EXTENSION ADDR      S22026
         USING IEDQQCBE,RQCB                                     S22026
         L     RTRM,QCBECONC-1          ADDR OF CONC TRM ENTRY   S22026
         DROP  RQCB                                              S22026
         USING IEDQQCB,RQCB                                      S22026
LOCIDTBL EQU   *                                                 S22026
         SR    RWORK,RWORK                                       S22026
         LA    RFLD,TRMOPNO             DVC FLD IF NO OPT FLD    S22026
         TM    TRMSTATE,TRMOPTFN        OPTION FIELDS USED       S22026
         BZ    NOOPT                    NO, FIND DEV DEP FIELD   S22026
*                                                                S22026
         IC    RWORK,TRMOPNO            NO. OF OPTION ENTRIES    S22026
         LA    RFLD,THREE(RWORK,RFLD)   BYPASS OPTION FIELDS     S22026
NOOPT    EQU   *                                                 S22026
         LH    RFLGS,TRMDEVFL           DEVICE DEPENDENT FIELDS  S22026
         SLL   RFLGS,FIFTEEN            SHIFT FLAGS TO HI ORDER  S22026
         LA    RCTR1,EIGHT              DESIRED FIELD            S22026
LOOPFLD  EQU   *                                                 S22026
         SLL   RFLGS,ONE                SHIFT TO TEST PRESENCE   S22026
         LTR   RFLGS,RFLGS              THIS FIELD PRESENT       S22026
         BNM   BCTIT                    NO, DONT BUMP POINTER    S22026
*                                                                S22026
         IC    RWORK,0(RFLD)            GET LENGTH OF THIS FIELD S22026
         LA    RFLD,ONE(RWORK,RFLD)     BUMP PTR PAST FIELD      S22026
BCTIT    EQU   *                                                 S22026
         BCT   RCTR1,LOOPFLD            LOOP TIL FIELD LOCATED   S22026
*                                                                S22026
         MVC   AVTGETMN+4(4),ONE(RFLD)  PTR TO DEVICE ID TABLE   S22026
         L     RIDPTR,AVTGETMN+4        ADDRESS OF DVC ID TABLE  S22026
         USING IEDQDVCT,RIDPTR                                   S22026
         LTR   RIDPTR,RIDPTR            CONCENTRATOR             S22026
         BM    ACONC                    YES, BRANCH              S22026
*                                                                S22026
         L     R8,IDERRAD               GET ADDR ERR MSG RTN   @G36XRNP
         BALR  RLINK,R8                 WRITE ERR MSG          @G36XRNP
*                                                                S22026
         B     NEXTTRM                  CHK NEXT TRM             S22026
*                                                                S22026
ACONC    EQU   *                                                 S22026
         TM    DVCSTAT,DVCSORTD         IS TABLE ALREADY SORTED  S22026
         BO    NEXTTRM                  YES, BRANCH              S22026
*                                                                S22026
         LR    RSVADR,RIDPTR            SAVE DVC ID TABLE ADDR   S22026
         SR    RIDCNT,RIDCNT            ZERO ACCUMULATOR         S22026
         SR    RLENDE,RLENDE            ZERO ACCUMULATOR         S22026
         IC    RLENDE,DVCENLTH          LENGTH OF DVC ID ENTRY   S22026
         LA    RIDPTR,DVCECW-DVCNO(RIDPTR) POINT TO ENTRY        S22026
NEXTID   EQU   *                                                 S22026
         LA    RIDCNT,ONE(RIDCNT)       COUNT ENTRY              S22026
         L     ROTNOW,AVTSAVE4+16       ADDR OF OFFSET TABLE     S22026
         LH    RCTR2,TNTLEN             ENTRIES IN OFFSET TABLE  S22026
         N     RCTR2,AVTCLRHI           CLEAR HIGH-ORDER BYTE    S22026
         SR    RTNTOFF,RTNTOFF                                   S22026
         IC    RTNTOFF,DVCIDLTH         LENGTH OF THIS DVC ID    S22026
         LA    RTNTOFF,ONE(RTNTOFF,RIDPTR) ADDR OF TNT OFFSET    S22026
COMPOFF  EQU   *                                                 S22026
         CLC   0(2,ROTNOW),0(RTNTOFF)   COMPARE THE OFFSETS      S22026
         BNE   TRYNEXT                  NO, BRANCH               S22026
*                                                                S22026
         S     ROTNOW,AVTSAVE4+16       CALC NEW OFFSET          S22026
         LA    ROTNOW,TWO(ROTNOW)       ADD TWO TO THE DIFF      S22026
         SRL   ROTNOW,ONE               CALC NEW INDEX           S22026
         STH   ROTNOW,AVTGETMN+2        SAVE NEW OFFSET          S22026
         MVC   0(2,RTNTOFF),AVTGETMN+2  RESET DVC ID TBL OFFSET  S22026
ENDLIST  EQU   *                                                 S22026
         LA    RIDPTR,0(RLENDE,RIDPTR)  ADDR NEXT ENTRY IN TABLE S22026
         CLI   DVCIDLTH,DVCEND          END OF LIST              S22026
         BNE   NEXTID                   UPDATE NEXT ID OFFSET    S22026
*                                                                S22026
         LR    RIDPTR,RSVADR            DVC ID TABLE ADDR        S22026
         OI    DVCSTAT,DVCSORTD         INDICATE TBL SORTED      S22026
         STC   RIDCNT,DVCNO             SAVE COUNT OF ENTRIES    S22026
         B     NEXTTRM                  CHECK NEXT TERMINAL      S22026
*                                                                S22026
TRYNEXT  EQU   *                                                 S22026
         LA    ROTNOW,2(ROTNOW)         INDEX TO NEXT OFFSET     S22026
         BCT   RCTR2,COMPOFF            END OF OFFSET TABLE      S22026
*                                                                S22026
         L     R8,IDERRAD               GET ADDR ERR MSG RTN   @G36XRNP
         BALR  RLINK,R8                 WRITE ERR MSG          @G36XRNP
*                                                                S22026
         B     ENDLIST                  CHK FOR END OF LIST      S22026
*                                                                S22026
ENDIDSRT EQU   *                                                 S22026
         LM    R0,R1,AVTSAVE4+12        LENGTH/AREA TO FREE      S22026
         LTR   R1,R1                    WAS GETMAIN USED        SA54926
         BZ    CODEFIX                  IF NOT BRANCH           SA54926
         FREEMAIN  R,LV=(0),A=(1)       FREE THE OFFSET TABLE    S22026
         LA    R15,RETCDE               SET RETURN CODE          S22026
         TM    AVTGETMN,ALTDSTER        ANY ERRORS               S22026
         BO    ERROR                    YES, BRANCH              S22026
*
CODEFIX  EQU   *
         LR    R1,RAVT                  AVT IS PARAMETER LIST
         L     R3,AVTCLOSB+8            LOAD THE ADDRESS OF THE
*                                         CLOSEDOWN/COMPLETION RTNE
         LA    R3,SIX(R3)               GET THE ADDRESS OF THE
*                                         FIRST INSTRUCTION
         EJECT
         L     R6,AVTTSOPT              ADDRESS OF TIME SHARING QCB
         L     R6,TSISTAE-IEDQTSI(,R6)  ADDRESS OF TSO STAE ROUTINE
         LA    R6,4(,R6)                INCREMENT TO ENTRY POINT
*                                          FOR STAI EXITS
***************************************************************@YA10680
*                                                             *@YA10680
*   THIS SECTION OF CODE IS TO CHECK TO SEE IF THERE IS       *@YA10680
*   REALLY A VIRTUAL MACHINE WHEN THE USER SPECIFIED VM=YES   *@YA10680
*   ON THE INTRO MACRO                                        *@YA10680
*                                                             *@YA10680
***************************************************************@YA10680
         L     R4,AVTSAVTP              SECONDARY AVT          @YA10680
* CHECK CPU ID                                                 @YA10680
         MODESET MODE=SUP               SWITCH TO SUPERVISOR   @G36XRNP
*                                       MODE                   @G36XRNP
         MODESET EXTKEY=SUPR            SWITCH TO KEY ZERO     @G36XRNP
         STIDP AVTDOUBL                 STORE CPU ID           @G36XRNP
         MODESET EXTKEY=TCAM            SWITCH TO TCAM KEY (6) @G36XRNP
         MODESET MODE=PROB              SWITCH BACK TO PROBLEM @G36XRNP
*                                       PROGEAM MODE           @G36XRNP
         LR    R1,RAVT                  RESTORE AVT ADDRESS    @G36XRNP
         CLI   AVTDOUBL,VMFLG           THIS A VIRTUAL MACHINE @G36XRNP
         BE    VMYES                    YES, CHECK SAVT FLAG   @OY20289
         TM    SAVTDIAF-IEDNSVTD(R4),VIRTFLG  IS VIRT SPEC     @OY20289
         BNO   VMOK                     FLAG OK FOR NO VM      @OY20289
         B     VMERR                    FLAG INDICATES VM, BUT @OY20289
*                                       THERE IS NO VM -ERROR  @OY20289
VMYES    EQU   *                                               @OY20289
         TM    SAVTDIAF-IEDNSVTD(R4),VIRTFLG   IS VIRTIAL SPEC @OY20289
         BNO   VMERR                    FLAG INDICATES NO VM   @OY20289
*                                       BUT IT IS VM  -ERROR   @OY20289
VMOK     EQU   *                                               @YA10680
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS SECTION OF CODE ATTACHES THE COMMON WRITE
*        ROUTINE, OPERATOR CONTROL, AND THE ON-LINE TEST
*        FUNCTION
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         CLI   AVTOLTST,AVTEZERO        IS THE ON-LINE TEST MODULE
*                                         TO BE ATTACHED
         BE    CWRATTCH                 NO, BRANCH
         LA    R2,AVTOLECA              LOAD THE ADDRESS OF THE
*                                         ON-LINE TEST ECB
         TM    AVTBIT1,AVTTSON          IS TIME SHARING ACTIVE
         BO    ATCHOLTS                 BRANCH ON YES
*
         ATTACH ECB=(2),ETXR=(3),MF=(E,(1)),SF=(E,OLLIST)
*
         B     ENDOLATC                 GO GET ON-LINE TEST'S    S22025
*                                       TCB ADDRESS
*
ATCHOLTS EQU   *
*
         ATTACH ECB=(2),ETXR=(3),STAI=((6)),MF=(E,(1)),SF=(E,OLLIST)
*
ENDOLATC EQU   *
         ST    R1,AVTOLTCB              TCB ADDRESS OF ATTACHED
*                                         TASK - ON-LINE TEST
         LR    R1,RAVT                  RESTORE THE AVT ADDRESS
*
CWRATTCH EQU   *
         TM    AVTCWFL1,AVTCOMWN        IS THE COMMON WRITE ROUTINE
*                                         TO BE ATTACHED
         BNO   ATTACHOC                 NO, BRANCH
         LA    R2,AVTCWECA              LOAD THE  ADDRESS OF THE
*                                         COMMON WRITE ECB
         NI    AVTCWECA,AVTEZERO        TURN OFF THE WAITING BIT IN
*                                         THE ECB
         ATTACH EP=IEDQFW,ECB=(2),ETXR=(3),DPMOD=-1,MF=(E,(1))
*
         ST    R1,AVTCWTCB              STORE THE TCB ADDRESS OF THE
*                                         ATTACHED TASK
*
ATTACHOC EQU   *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS SECTION OF CODE ISSUES THE EXTRACT AND QEDIT
*        MACROS TO SET UP THE COMMUNICATIONS PARAMETER LIST
*        INTERFACE BETWEEN TCAM AND THE OPERATING SYSTEM
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         LA    R4,AVTCOMPT              LOAD THE ADDRESS OF THE
*                                         AVT ADDRESS FIELD
         LA    R1,AVTSAVE4+12           ADDRESS OF PARM LIST
*
         EXTRACT (R4),'S',FIELDS=COMM,MF=(E,(1)) ESTABLISH PARM LIST
*
         L     R1,AVTCOMPT              LOAD THE ADDRESS OF THE
*                                         COMMUNICATIONS PARAMETER
*                                         LIST
         LA    R0,FOUR(R1)              LOAD THE ADDRESS OF THE
*                                         WORD TO HOLD THE CIB
*                                         CHAIN ADDRESS
         SR    R1,R1                    CLEAR A COUNT REGISTER
         IC    R1,AVTCIB                LOAD THE NUMBER OF BUFFERS
*                                         REQUESTED
         QEDIT CIBCTR=(1),ORIGIN=(0)    GET THE BUFFERS
         LA    R2,AVTOPECA              LOAD THE ADDRESS OF THE
*                                         OPERATOR CONTROL ECB
         LR    R1,RAVT                  RESTORE AVT ADDRESS     SA64692
         TM    AVTBIT1,AVTTSON          IS TIME SHARING ACTIVE
         BO    ATCHOCTS                 BRANCH ON YES
*
         ATTACH ECB=(2),ETXR=(3),MF=(E,(1)),SF=(E,OCLIST)
*
         B     ENDOCATC                 GO GET OP CONTROL'S TCB  S22025
*                                       ADDRESS
*
ATCHOCTS EQU   *
*
         ATTACH ECB=(2),ETXR=(3),STAI=((6)),MF=(E,(1)),SF=(E,OCLIST)
*
ENDOCATC EQU   *
         ST    R1,AVTOCTCB              TCB ADDRESS OF ATTACHED
*                                         TASK - OPERATOR CONTROL
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS SECTION OF CODE LOADS THE SYSTEM DELAY ROUTINE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         LH    R1,AVTINTLV              LOAD THE LENGTH OF THE
*                                         SYSTEM DELAY INTERVAL
         LTR   R1,R1                    IS THE DELAY ZERO
         BZ    TSTOPCON                 NO, BRANCH
*
         LOAD  EPLOC=SYSDELAY
*
         ST    R0,AVTHI                 STORE THE ENTRY POINT
*                                         ADDRESS IN THE AVT
         LR    R1,R0                    COPY THE ENTRY POINT ADDRESS
         A     R0,EIGHT(,R1)            LOAD THE ADDRESS OF THE
*                                         STCB FIELD
         ST    R0,EIGHT(,R1)            STORE THIS ADDRESS IN THE
*                                         STCB ADDRESS POINTER
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS SECTION OF CODE LOADS THE OPERATOR AWARENESS
*        MESSAGE ROUTER ROUTINE
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
TSTOPCON EQU   *
         LH    R1,AVTOPCON              LOAD THE TERMNAME TABLE
*                                         OFFSET TO THE PRIMARY
*                                         OPERATOR CONTROL TERMINAL
         LTR   R1,R1                    IS THIS OFFSET ZERO
         BZ    RETURN                   YES, BRANCH
*
         LOAD  EPLOC=OPAMSGRT           LOAD THE AWARENESS ROUTINE
*
         ST    R0,AVTNX                 STORE THE ENTRY POINT
*                                         ADDRESS IN THE AVT
RETURN   EQU   *
         SR    R15,R15                  CLEAR RETURN CODE
*
EXIT     EQU   *
         STC   R15,AVTOPETR             SAVE INTRO RETURN CODE
*                                         FOR OPEN TO CHECK
         LTR   R15,R15                  IS THE RETURN CODE ZERO? X03039
         BNZ   EXIT1                    ERROR BYPASS IECIAA      X03039
         LR    R1,RAVT                  SET PARMREG TO AVT       X03039
         LINK  EP=IEDIAA                LINK TO COMMON OPEN      X03039
EXIT1    EQU   *                                                 X03039
         SR    R15,R15                  CLEAR RETURN CODE REG    X03039
         IC    R15,AVTOPETR             RESTORE INTRO RETURN CODEX03039
         LA    R13,2*AVTSVSIZ(RAVT)     MY SAVEAREA ADDRESS
         L     R13,4(R13)               RESTORE CALLER'S REGISTERS
*
         RETURN  (14,12),T,RC=(15)      RETURNTO INTRO
         EJECT
GETERR   EQU   *
         LA    R15,AVTECD8              SET THE RETURN CODE
         B     ERROR                    EXIT THIS ROUTINE
*
TERMERR1 EQU   *
         LA    R15,SIXTEEN              AN ERROR IN DEFINING THE
*                                         TERMINAL
         B     ERROR                    EXIT THIS ROUTINE
*
VMERR    EQU   *                                               @YA10680
         LA    R15,VMCODE               AN ERROR IN SPECIFYING @YA10680
*                                        MACHINE TYPE          @YA10680
         B     ERROR                    EXIT THIS ROUTINE      @YA10680
*                                                              @YA10680
POCERR   EQU   *
         LA    R15,TWENTY               AN ERROR IN DEFINING THE
*                                         PRIMARY OPERATOR CONTROL
*                                         TERMINAL
ERROR    EQU   *
         LR    R3,R15                   SAVE ERROR CODE
         CVD   R15,AVTDOUBL
         UNPK  MSGX(4),AVTDOUBL         PUT ERROR ID IN MESSAGE
         MVZ   MSGX+3(1),MSGX           GET PROPER ZONE
*
MSG065   WTO   'IED065I INITIALIZATION ERROR     ',                    C
               ROUTCDE=(2,11),DESC=4
*
         LR    R15,R3                   RESTORE ERROR CODE
         B     EXIT                     AND RETURN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        THIS ROUTINE SETS UP A PARAMETER LIST IN THE AVT.
*        THIS LIST WILL BE REFERENCED BY ALL GETMAIN
*        MACROS ISSUED IN IEDQOA
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
AVTPAR1  EQU   *                                                 X01004
         OI    AVTGETMN+EIGHT,PAGE      ENTRY FOR PAGE BOUNDARY  X01004
AVTPAR   EQU   *
         ST    R1,AVTGETMN              LENGTH
         ST    R0,AVTGETMN+4            RECEIVING ADDRESS
         MVI   AVTGETMN+9,AVTEZERO      SET THE SUBPOOL ID FOR
*                                         PROBLEM PROGRAM MODE
         LA    R1,AVTGETMN              SVC 4 PARAMETER LIST
*
         GETMAIN ,MF=(E,(1))
         NI    AVTGETMN+EIGHT,X'FF'-PAGE TURN OFF BOUNDARY FLAG  X01004
*
         LTR   R15,R15                  GETMAIN SUCCESSFUL
         BNE   GETERR                   NO, BRANCH
         BR    R14                      RETURN IF GOOD
         EJECT
ERRSET   MVC   0(0,RPRESENT),0(RFIRST)  TERMNAME TO ERRORMSG
COMPENT  CLC   0(0,RPRESENT),0(RTRM)    COMPARE TERMNAME ENTRIES
EX1      XC    0(0,RPRESENT),0(RTRM)    SWAP THE TWO
EX2      XC    0(0,RTRM),0(RPRESENT)    TERMNAME ENTRIES
*
OLLIST   ATTACH EP=IEDQWA,DPMOD=-1,SF=L
*
OCLIST   ATTACH EP=IEDQCA,DPMOD=-1,SF=L
*
LINKOB   LINK  EP=IEDQOB,SF=L
*
NOPASS   DC    CL8' '                   TO CHECK FOR NO PASSWORD
SYSDELAY DC    CL8'IEDQHI  '            SYSTEM DELAY ROUTINE     S22025
OPAMSGRT DC    CL8'IEDQNX  '            OPERATOR AWARENESS ROUTINE
SYSCON   DC    C'SYSCON  '              ENTRY SPECIFYING SYSTEM  S22025
*                                       CONSOLE AS PRIMARY OP    S22025
*                                       CONTROL TERMINAL         S22025
FREEPTR  DC    2F'0'                    ADDRESS OF FREE CORE     X01004
FBUFSAV  DC    2F'0'                    SAVE ADDRESS AND SIZE OF X01004
*                                         GETMAIN FOR I/O BUFFERSX01004
HEIGHT   DC    H'32'                    LENGTH OF A PIU TRACE  @Y17XANG
*                                       TABLE ENTRY            @Y17XANG
H8       DC    H'8'                     HALFWORD CONSTANT      @Y17XANG
PAGESIZE DC    F'4096'                  MVS PAGE SIZE          @G36XRNP
PAGE     EQU   X'10'                                             X01004
FIVE     EQU   5                                                 X01004
AD       EQU   7                                                 X01004
CCWIDA   EQU   4                        INDIRECT ADDRESSING FLAG X02004
ALL      EQU   15                       ICM MASK                 X02004
LOWBIT   EQU   X'01'                    MASK FOR LOW ORDER BIT @G36XRNP
RESTLOW  EQU   X'FE'                    MASK FOR LOW ORDER BIT @OY17ANZ
HSIX     DC    H'6'                     HALF WORD OF SIX         S22027
         DS    0F                       LOWOFF MASK MUST       @OY12967
*                                        FOLLOW THSI STMT      @OY12967
LOWOFF   DC    X'FFFFFFFE'              MASK FOR LOW ORDER BIT @OY12967
TERMTEMP DC    F'0'                     FULLWORD FOR TNT ADDRESSES22024
TTRCID   DC    C'PIUT'                  ID FOR PIU TRACE TABLE @Y17XANG
IDERRAD  DC    A(IDERRMSG)                                     @G36XRNP
SORTAD   DC    A(SORTHIER)                                     @Y17XANG
TTCINAD  DC    A(SETTTCIN)                                     @Y17XANG
         DROP  RQCB                                            @Y17XANG
         EJECT                                                 @Y17XANG
***************************************************************@Y17XANG
*                                                              @Y17XANG
* THIS SECTION CREATES THE GROUP-LINE TTE HIERARCHY            @Y17XANG
*                                                              @Y17XANG
***************************************************************@Y17XANG
SORTHIER DS    0H                                              @Y17XANG
         SPACE
* SET UP TNT SCAN FOR LGB.                                     @Y17XANG
         SPACE
         USING SORTHIER,R15                                    @Y17XANG
         ST    RBASE,SORTL12            SAVE MAINLINE BASE     @Y17XANG
         LR    RBASE,R15                SET SORT BASE          @Y17XANG
         DROP  R15                                             @Y17XANG
         USING SORTHIER,RBASE                                  @Y17XANG
         ST    R14,SORTL14              SAVE RETURN REG        @Y17XANG
         L     RTNT,AVTRNMPT            TNT BASE               @Y17XANG
         USING IEDQTNTD,RTNT                                   @Y17XANG
         SR    RLEN,RLEN                                       @Y17XANG
         IC    RLEN,TNTENLEN            LNTH TNT NAME          @Y17XANG
         LA    RLEN,L'TNTTRMAD(RLEN)    LNTH TNT ENTRY         @Y17XANG
         LA    RTNT1,TNTFIRST-L'TNTTRMAD 1ST TNT - ADDR LENTH  @Y17XANG
         LA    RCTR1,1                  START TNT INDEX = 1    @Y17XANG
         LA    R1,L'GETFIRST            SORT TABLE ENTRY LEN   @Y17XANG
         MH    R1,TNTLEN                TIMES # TNT ENTRIES    @Y17XANG
*                                       (MAX POSSIBLE LINES)   @Y17XANG
         LA    R1,GETFIRST-GETSAVE(R1)   ADD IN SAVE AREA.     @Y17XANG
         ST    R1,AVTSAVE4+20           SAVE SORT TABLE LEN    @Y17XANG
         LA    R0,AVTSAVE4+24           LOCATION TO RECV       @Y17XANG
*                                       GETMAIN ADDR           @Y17XANG
         L     R15,PARAD                GETMAIN ROUTINE ADDR   @Y17XANG
         LR    RCTR2,RBASE              SAVE BASE              @Y17XANG
         L     RBASE,SORTL12            MAINLINE BASE          @Y17XANG
         BALR  R14,R15                  GETMAIN SORT AREA      @Y17XANG
         LR    RBASE,RCTR2              RESET BASE             @Y17XANG
         L     RGETM,AVTSAVE4+24        SORT AREA BASE         @Y17XANG
         USING GETSAVE,RGETM                                   @Y17XANG
         SPACE
* FETCH TTE OF NEXT TNT ENTRY.                                 @Y17XANG
         SPACE
FETCHTTE EQU   *                                               @Y17XANG
         LA    RTNT1,0(RLEN,RTNT1)      NEXT TNT ENTRY         @Y17XANG
         USING TNTTRMAD,RTNT1                                  @Y17XANG
         SR    RLGB,RLGB
         ICM   RLGB,ADDR,TNTTRMAD       TTE ADDRESS            @Y17XANG
         SPACE
* IF THIS IS AN LGB THEN DO                                    @Y17XANG
         SPACE
         USING IEDQTRM,RLGB                                    @Y17XANG
         CLI   TRMDSORG,TRMLGB          LGB?                   @Y17XANG
         BNE   NXTLGB                   BRANCH NO              @Y17XANG
         SPACE
* SET UP TNT LINE ENTRY SEARCH.                                @Y17XANG
         SPACE
         LA    RLGB,IEDQTRM-TRMCOHTG-(LGBBUFOU-LGBSUBST)(RLGB) @Y17XANG
*                                       ADJUST LGB ADDR SO     @Y17XANG
*                                       THAT LGBSUBST WILL BE  @Y17XANG
*                                       SAME RELATIVE DISPLACE-@Y17XANG
*                                       MENT FROM TTE PREFIX   @Y17XANG
*                                       AS TRMCOHTG.           @Y17XANG
         ST    RLGB,GETLGB              SAVE ADJUSTED LGB ADDR @Y17XANG
         DROP  RLGB                                            @Y17XANG
         LA    RTNT2,TNTFIRST-L'TNTTRMAD 1ST TNT - ADDR LEN    @Y17XANG
         LA    RCTR2,1                  START TNT INDEX AT 1   @Y17XANG
         LA    RTBL,GETFIRST            1ST SORT TABLE ENTRY   @Y17XANG
         USING GETFIRST,RTBL                                   @Y17XANG
         SPACE
* FETCH TTE OF NEXT TNT ENTRY(LINE SEARCH).                    @Y17XANG
         SPACE
FETCHLN  EQU   *                                               @Y17XANG
         LA    RTNT2,0(RLEN,RTNT2)      NEXT TNT ENTRY         @Y17XANG
         ICM   RNLINE,ADDR,TNTTRMAD-IEDTNTA(RTNT2) TTE ADDR    @Y17XANG
         USING IEDQTRM,RNLINE                                  @Y17XANG
         SPACE
* IF THIS IS A LINE ENTRY THEN DO                              @Y17XANG
         SPACE
         TM    TRMSTATE,TRMLINE         LINE?                  @Y17XANG
         BZ    NXTLINE                  BRANCH NO TO FETCH NEXT@Y17XANG
*                                       LINE                   @Y17XANG
         SPACE
* IF THIS IS THE SAME LINE GROUP AS LGB                        @Y17XANG
         SPACE
         USING IEDQQCB,R15                                     @Y17XANG
         L     R15,TRMDESTQ-1           QCB ADDRESS            @Y17XANG
         L     R14,QCBLGBAD-1           QCB LGB PTR            @Y17XANG
         LA    R14,LGBPRFSZ+IEDQTRM-TRMCOHTG-(LGBBUFOU-LGBSUBST)(R14)
*                                       ADJUST LGB ADDRESS:    @Y17XANG
*                                       LGB ADDRESS FROM QCB   @Y17XANG
*                                       IS LGBBUFOU - DCB      @Y17XANG
*                                       PREFIX.  THEREFORE     @Y17XANG
*                                       MUST BE PLUS THIS DISP @Y17XANG
*                                       PLUS SAME ADJUSTMENT   @Y17XANG
*                                       AS WHEN LGB STORED.    @Y17XANG
         C     R14,GETLGB               SAME GROUP(LGB)?       @Y17XANG
         BNE   NXTLINE                  BRANCH NO              @Y17XANG
         SPACE
* THEN MAKE LINE ENTRY IN SORT TABLE.                          @Y17XANG
         SPACE
         ST    RNLINE,GETTTE            TTE PTR FOR LINE       @Y17XANG
         STH   RCTR2,GETTTCIN           TNT INDEX OF LINE      @Y17XANG
         MVI   GETRLN,0                 CLEAR HI BYTE TBL RLN  @Y17XANG
         MVC   GETRLN+1(L'QCBRELLN),QCBRELLN REL LINE          @Y17XANG
         LA    RTBL,L'GETFIRST(RTBL)    NEXT SORT TABLE ENTRY  @Y17XANG
         SPACE
* STEP TNT INDEX BY 1.                                         @Y17XANG
         SPACE
NXTLINE  EQU   *                                               @Y17XANG
         LA    RCTR2,1(RCTR2)           NEXT TNT INDEX         @Y17XANG
         DROP  R15                                             @Y17XANG
         SPACE
* IF TNT NOT EXHAUSTED GO GET NEXT ENTRY.                      @Y17XANG
         SPACE
         CH    RCTR2,TNTLEN             LAST TNT PROCESSED?    @Y17XANG
         BNH   FETCHLN                  BRANCH NO              @Y17XANG
         SPACE
* IF GROUP HAS LINES THEN SORT LINES BY LINE NUMBER AND LINK   @Y17XANG
* INTO GROUP-LINE HIERARCHY.                                   @Y17XANG
         SPACE
         DROP  RTBL                                            @Y17XANG
         LA    R14,GETFIRST             1ST SORT TABLE ENTRY   @Y17XANG
         CR    R14,RTBL                 ANY LINES(TBL ENTRIES)?@Y17XANG
         BE    ELSEWTO                  BRANCH NO TO ELSE      @PI02869
         BAL   R14,SORTL                SORT LINES             @Y17XANG
         B     NXTLGB                   BYPASS ELSE            @Y17XANG
         SPACE
* ELSE SEND MESSAGE TO OPERATOR : IED526 - GROUP HAS NO LINES. @Y17XANG
         SPACE
ELSEWTO  EQU   *                                               @Y17XANG
         MVI   GRPNAME,C' '
         MVC   GRPNAME+1(8),GRPNAME BLANK GROUP NAME           @Y17XANG
         SR    R14,R14                                         @Y17XANG
         IC    R14,TNTENLEN             TNT NAME LEN           @Y17XANG
         LR    R15,RTNT1                                       @Y17XANG
         SR    R15,R14                  GROUP NAME ADDR        @Y17XANG
         BCTR  R14,0                    GROUP NAME LEN FOR MVC @Y17XANG
         EX    R14,MOVNAME              PUT NAME INTO WTO      @Y17XANG
         WTO   MF=(E,IED526I)           SEND OP CONSOLE MSG    @Y17XANG
         SPACE
* INCREMENT LGB SEARCH INDEX AND RESET SORT TABLE.             @Y17XANG
         SPACE
NXTLGB   EQU   *                                               @Y17XANG
         LA    RCTR1,1(RCTR1)           TNT INDEX + 1          @Y17XANG
         LA    RTBL,GETFIRST            FIRST SORT ENTRY       @Y17XANG
         SPACE
* IF TNT HAS NOT BEEN COMPLETELY PROCESSED FOR LGBS THEN       @Y17XANG
* GO GET ANOTHER LGB.                                          @Y17XANG
         SPACE
         CH    RCTR1,TNTLEN             TNT COMPLETE           @Y17XANG
         BNH   FETCHTTE                 BRANCH NO FOR MORE LGBS@Y17XANG
         SPACE
* FREE SORT TABLE.                                             @Y17XANG
         SPACE
         LM    R0,R1,AVTSAVE4+20        TABLE LEN + ADDR       @Y17XANG
         FREEMAIN R,LV=(0),A=(1)                               @Y17XANG
         SPACE
* RETURN TO MAINLINE.                                          @Y17XANG
         SPACE
         L     R14,SORTL14              RESTORE RETURN REG     @Y17XANG
         L     RBASE,SORTL12            RESTORE BASE REG       @Y17XANG
         BR    R14                      RETURN                 @Y17XANG
MOVNAME  MVC   GRPNAME(0),0(R15)        MOVE GROUP NAME TO WTO.@Y17XANG
         EJECT                                                 @Y17XANG
***************************************************************@Y17XANG
*                                                              @Y17XANG
* RLN SORT AND HIERARCHY BUILD ROUTINE.                        @Y17XANG
*                                                              @Y17XANG
***************************************************************@Y17XANG
SORTL    DS    0H                                              @Y17XANG
         SPACE
* SET UP SORT.                                                 @Y17XANG
         SPACE
         STM   RTNT1,RLEN,GETSAVE       SAVE REGS.             @Y17XANG
         LR    R0,R14                   SAVE RETURN            @Y17XANG
         LR    REOT,RTBL                                       @Y17XANG
         S     REOT,GETLEN              ADDRESS LAST TABLE     @Y17XANG
*                                       ENTRY.                 @Y17XANG
         LA    R1ST,GETFIRST            1ST TABLE ENTRY        @Y17XANG
         LR    RCURR,R1ST               CURRENT TABLE ENTRY    @Y17XANG
         SPACE
* IF SORT COMPLETE GO LINK HIERARCHY.                          @Y17XANG
         SPACE
SORTLOOP EQU   *                                               @Y17XANG
         CR    RCURR,REOT               END OF TABLE?          @Y17XANG
         BNL   HIERLINK                 BRANCH YES WE'RE THRU  @Y17XANG
         SPACE
* IF CURRENT TABLE ENTRY ^ LE NEXT.....                        @Y17XANG
         SPACE
         USING GETTTE,RCURR                                    @Y17XANG
         CLC   GETRLN,GETRLN+L'GETFIRST CURRENT LE NEXT RLN?   @Y17XANG
         BNH   ADTBL                    BRANCH YES             @Y17XANG
         SPACE
* THEN SORT TABLE IN OPPOSITE DIRECTION.                       @Y17XANG
         SPACE
         BAL   R14,RSORT                REVERSE SORT           @Y17XANG
         SPACE
* ADVANCE TO NEXT TABLE ENTRY.                                 @Y17XANG
         SPACE
ADTBL    EQU   *                                               @Y17XANG
         LA    RCURR,L'GETFIRST(RCURR)       NEXT ENTRY        @Y17XANG
         B     SORTLOOP                                        @Y17XANG
         SPACE
* SET UP TO LINK HIERARCHY.                                    @Y17XANG
         SPACE
HIERLINK EQU   *                                               @Y17XANG
         LA    RCURR,GETLGB             LGB ENTRY ADDRESS      @Y17XANG
*                     * * NOTE * *                             @Y17XANG
* LGB ADDRESS WAS ADJUSTED EARLIER SO THAT DISPLACEMENT OF     @Y17XANG
* LGBSUBST FIELD IS SAME RELATIVE DISPLACEMENT AS TRMCOHTG     @Y17XANG
* FROM PREFIX.  THEREFORE, LGB LINKED TO FIRST LINE SINCE LGB  @Y17XANG
* ENTRY IN TABLE IMMEDIATELY PRECEEDS FIRST LINE ENTRY.        @Y17XANG
         SPACE
* LINK CURRENT LINE TO NEXT.                                   @Y17XANG
         SPACE
NXTLINK  EQU   *                                               @Y17XANG
         LA    R14,TRMPRFSZ             PREFIX SIZE            @Y17XANG
         L     RTRM,GETTTE              TTE ADDRESS CURRENT ENT@Y17XANG
         SR    RTRM,R14                 PREFIX ADDRESS         @Y17XANG
         USING IEDNTRM,RTRM             PREFIX BASE            @Y17XANG
         LH    R14,GETTTCIN+L'GETFIRST       TTCIN NEXT ENTRY  @Y17XANG
         STH   R14,TRMCOHTG             LINK CURRENT TO NEXT   @Y17XANG
         SPACE
* ADVANCE IN TABLE.                                            @Y17XANG
         SPACE
         LA    RCURR,L'GETFIRST(RCURR)       NEXT ENTRY        @Y17XANG
         SPACE
* IF NOT END OF TABLE GO BACK AND LINK NEXT ENTRY.             @Y17XANG
         SPACE
         CR    REOT,RCURR               END OF TABLE?          @Y17XANG
         BNE   NXTLINK                  BRANCH NO              @Y17XANG
         SPACE
* LINK LAST LINE TO LGB.                                       @Y17XANG
         SPACE
         LA    R14,TRMPRFSZ             PREFIX SIZE            @Y17XANG
         L     RTRM,GETTTE              LAST LINE TTE ADDR     @Y17XANG
         SR    RTRM,R14                 PREFIX ADDR            @Y17XANG
         STH   RCTR1,TRMCOHTG           LINK TO LGB            @Y17XANG
         SPACE
* RESTORE REGS                                                 @Y17XANG
         SPACE
         LM    RTNT1,RLEN,GETSAVE                              @Y17XANG
         SPACE
* RETURN TO LOOK FOR NEXT LGB                                  @Y17XANG
         SPACE
         LR    R14,R0                   RETURN ADDR            @Y17XANG
         BR    R14                      RETURN                 @Y17XANG
         DROP  RTRM                                            @Y17XANG
         DROP  RTNT                                            @Y17XANG
         EJECT                                                 @Y17XANG
***************************************************************@Y17XANG
*                                                              @Y17XANG
* REVERSE DIRECTION SORT ROUTINE.                              @Y17XANG
*                                                              @Y17XANG
***************************************************************@Y17XANG
         SPACE
RSORT    EQU   *                                               @Y17XANG
* SWAP CURRENT ENTRY WITH NEXT.                                @Y17XANG
         SPACE
         XC    GETFIRST,GETFIRST+L'GETFIRST                    @Y17XANG
         XC    GETFIRST+L'GETFIRST,GETFIRST                    @Y17XANG
         XC    GETFIRST,GETFIRST+L'GETFIRST                    @Y17XANG
         SPACE
* SAVE NEXT ENTRY ADDRESS FOR FORWARD SORT RESUMPTION.         @Y17XANG
         SPACE
         ST    RCURR,GETSVCUR           SAVE                   @YM04690
         SPACE
* RETREAT TO PREVIOUS ENTRY.                                   @Y17XANG
         SPACE
         S     RCURR,GETLEN             PREVIOUS+PRESENT - ENT-@Y17XANG
*                                       RY LENGTH.             @Y17XANG
         SPACE
* IF FIRST OF TABLE GO TO SUBROUTINE EXIT.                     @Y17XANG
         SPACE
FRSTCHK  EQU   *                                               @Y17XANG
         CR    RCURR,R1ST               PRESENT LE 1ST ENTRY   @Y17XANG
*                                       ADDRESS?               @Y17XANG
         BNH   RSORTX                   BRANCH YES TO EXIT     @Y17XANG
         SPACE
* CURRENT ENTRY GT NEXT IN TABLE(FORWARD)?                     @Y17XANG
         SPACE
         CLC   GETRLN,GETRLN+L'GETFIRST IS IT?                 @Y17XANG
         BNH   BRKLOOP                  BRANCH NO TO ELSE      @Y17XANG
         SPACE
* THEN SWAP ENTRIES.                                           @Y17XANG
         SPACE
         XC    GETFIRST,GETFIRST+L'GETFIRST                    @Y17XANG
         XC    GETFIRST+L'GETFIRST,GETFIRST                    @Y17XANG
         XC    GETFIRST,GETFIRST+L'GETFIRST                    @Y17XANG
         B     RETREAT                  BRANCH AROUND ELSE     @Y17XANG
         SPACE
* ELSE SET CURRENT ENTRY POINTER TO 1ST OF TABLE TO BREAK LOOP.@Y17XANG
         SPACE
BRKLOOP  EQU   *                                               @Y17XANG
         LR    RCURR,R1ST                                      @Y17XANG
         SPACE
* RETREAT TO PREVIOUS ENTRY.                                   @Y17XANG
         SPACE
RETREAT  EQU   *                                               @Y17XANG
         S     RCURR,GETLEN             PREVIOUS ENTRY ADDR    @Y17XANG
         B     FRSTCHK                  GO BACK TO LOOP TOP    @Y17XANG
         SPACE
* RESET CURRENT LOCATION TO SAVED RESUME ADDRESS FOR FORWARD   @Y17XANG
* SORT.                                                        @Y17XANG
         SPACE
RSORTX   EQU   *                                               @Y17XANG
         L     RCURR,GETSVCUR                                  @Y17XANG
         SPACE
* RETURN TO FORWARD SORT.                                      @Y17XANG
         SPACE
         BR    R14                                             @Y17XANG
GETLEN   DC    A(L'GETFIRST)            LENGTH OF SORT TABLE   @Y17XANG
IED526I  WTO   'IED526I LINE GROUP XXXXXXXX HAS NO LINES',     @Y17XANG*
               ROUTCDE=(2,11),DESC=6,MF=L                      @Y17XANG
GRPNAME  EQU   IED526I+23                                      @Y17XANG
SORTL12  DS    F                        MAINLINE BASE SAVE     @Y17XANG
SORTL14  DS    F                        MAINLINE RETURN REG    @Y17XANG
PARAD    DC    A(AVTPAR1)               ADDR GETMAIN ROUTINE   @Y17XANG
         DROP  RGETM                                           @Y17XANG
         DROP  RCURR                                           @Y17XANG
         DROP  RBASE                                           @Y17XANG
         DROP  RTNT1                                           @Y17XANG
         DROP  RNLINE                                          @Y17XANG
         EJECT                                                 @Y17XANG
***************************************************************@Y17XANG
* THIS ROUTINE INITIATES THE QCB TNT INDEX FIELD FOR 3705      @Y17XANG
* CLUSTERS, TERMINALS, LU'S AND CTERM TTE'S.                   @Y17XANG
*                                                              @Y17XANG
***************************************************************@Y17XANG
         SPACE
SETTTCIN DS    0H                                              @Y17XANG
         USING SETTTCIN,R15                                    @Y17XANG
         USING IEDQTNTD,RTNT                                   @Y17XANG
         ST    RBASE,TTCIN12            SAVE MAINLINE BASE     @Y17XANG
         LR    RBASE,R15                SET BASE               @Y17XANG
         DROP  R15                                             @Y17XANG
         USING SETTTCIN,RBASE                                  @Y17XANG
         SPACE
* SET TNT ENTRY, TNT ENTRY LENGTH AND TNT INDEX REGS.          @Y17XANG
         SPACE
         SR    RFIRST,RFIRST                                   @Y17XANG
         IC    RFIRST,TNTENLEN          TNT NAME LENGTH        @Y17XANG
         LR    RLEN,RFIRST              SAVE IT                @Y17XANG
         LA    RFIRST,TNTFIRST(RFIRST)  ADDRESS OF ADDRESS     @Y17XANG
*                                       PORTION OF FIRST TNT   @Y17XANG
*                                       ENTRY.                 @Y17XANG
         LA    RLEN,L'TNTTRMAD(RLEN)    LENGTH TNT ENTRY       @Y17XANG
         LA    RTNT1,1                  FIRST TNT INDEX        @Y17XANG
         SPACE
* IF THIS IS NOT A 3705 RESOURCE.                              @Y17XANG
         SPACE
CKTYPE   EQU   *                                               @Y17XANG
         USING TNTTRMAD,RFIRST                                 @Y17XANG
         ICM   RTRM,ADDR,TNTTRMAD       TTE ADDRESS            @Y17XANG
         USING IEDQTRM,RTRM                                    @Y17XANG
         TM    TRMSTATE,TRMPREF         3705 RESOURCE?         @Y17XANG
         BZ    NXTQCB                   BRANCH NO              @Y17XANG
         SPACE
* THEN IF THIS IS A PRE-SNA TERMINAL, CLUSTER, LU, OR CTERM    @Y17XANG
         SPACE
         LA    RWORK,TRMPRFSZ           PREFIX SIZE            @Y17XANG
         SR    RTRM,RWORK               PREFIX ADDRESS         @Y17XANG
         USING IEDNTRM,RTRM                                    @Y17XANG
         CLI   TRMTYPE,TRMPSNA          PRE-SNA TERMINAL?      @Y17XANG
         BE    FTCHQCB                  BRANCH YES             @Y17XANG
         CLI   TRMTYPE,TRMLUNT          LU?                    @Y17XANG
         BE    FTCHQCB                  BRANCH YES             @Y17XANG
         CLI   TRMTYPE,TRMCLUST         CLUSTER?               @Y17XANG
         BNE   NXTQCB                   BRANCH NO              @Y17XANG
         SPACE
* FETCH QCB.                                                   @Y17XANG
         SPACE
FTCHQCB  EQU   *                                               @Y17XANG
         ICM   RQCB,ADDR,TRMDESTQ       QCB ADDRESS            @Y17XANG
         SPACE
* SET QCBTTCIN.                                                @Y17XANG
         SPACE
         LA    RWORK,QCBPRFSZ           QCB PREFIX SIZE        @Y17XANG
         SR    RQCB,RWORK               QCB PREFIX ADDRESS     @Y17XANG
         USING IEDNQCB,RQCB                                    @Y17XANG
         STH   RTNT1,QCBTTCIN           SET TTCIN              @Y17XANG
         DROP  RQCB                                            @Y17XANG
         SPACE
* ADVANCE IN TNT.                                              @Y17XANG
         SPACE
NXTQCB   EQU   *                                               @Y17XANG
         LA    RFIRST,0(RLEN,RFIRST)    NEXT TNT ENTRY ADDR    @Y17XANG
         LA    RTNT1,1(RTNT1)           NEXT ENTRY INDEX       @Y17XANG
         SPACE
* IF NOT END OF TNT PROCESS NEXT ENTRY.                        @Y17XANG
         SPACE
         CH    RTNT1,TNTLEN             END OF TNT?            @Y17XANG
         BNH   CKTYPE                   BRANCH NO              @Y17XANG
         SPACE
* RETURN TO MAINLINE ROUTINE.                                  @Y17XANG
         SPACE
         L     RBASE,TTCIN12            MAINLINE BASE          @Y17XANG
         BR    R14                                             @Y17XANG
TTCIN12  DC    A(0)                     MAINLINE BASE SAVE     @Y17XANG
         DROP  RTNT                                            @Y17XANG
         DROP  RFIRST                                          @Y17XANG
         DROP  RTRM                                            @Y17XANG
*
         EJECT
IDERRMSG EQU   *                                               @G36XRNP
         USING IDERRMSG,R8                                     @G36XRNP
         EX    RLENTN,MVCID             INIT ERROR MSG         @G36XRNP
         OI    AVTGETMN,ALTDSTER        INDICATE ERROR         @G36XRNP
         LR    RWORK,RPRESENT           SAVE TNT POINTER       @G36XRNP
         LA    RPRESENT,DIDMSG          MSG ADDR               @G36XRNP
         SVC   35                                              @G36XRNP
         LR    RPRESENT,RWORK           RESTORE TNT POINTER    @G36XRNP
         BR    RLINK                    RETURN                 @G36XRNP
MVCID    MVC   DIDMSGC(0),0(RPRESENT)   MVE TRM NAME TO ERR MSG@G36XRNP
         CNOP  0,4                                             @G36XRNP
DIDMSG   DC    AL2(IDMEND-*)            MSG LENGTH             @G36XRNP
         DC    X'1000'                  MSG FLAGS              @G36XRNP
         DC    C'IED138I '              MSG NUMBER             @G36XRNP
         DC    C'ERROR SORTING DEVICE ID TABLE ' MSG TEXT      @G36XRNP
DIDMSGC  DC    CL9' '                   TERMINAL NAME          @G36XRNP
IDMEND   EQU   *                        MSG END                @G36XRNP
         DC    X'1000'                  DECSRIPTOR CODES       @G36XRNP
         DC    X'0020'                  ROUTING CODES          @G36XRNP
         CNOP  0,4                                             @G36XRNP
         DROP  R8                                              @G36XRNP
         USING IEDQOA,RBASE                                    @OY19405
         USING DISPATR,R6                                      @OY19405
DISPATR  L     R1,AVTDISTR              LOAD THE NUMBER  TRACE @OY19405
*                                         ENTRIES REQUESTED    @OY19405
         LA    R1,ONE(,R1)              INCREMENT THE COUNT 1  @OY19405
         SLL   R1,FOUR                  MULTIPLY THE NUMBER    @OY19405
*                                       ENTRIES BY THE ENTRY SZ@OY19405
         LR    R3,R1                    COPY THE TRACE SIZE    @OY19405
         LA    R0,AVTDISTR              LOAD THE ADDRESS OF THE@OY19405
*                                         RECEIVING AREA       @OY19405
         BAL   R14,AVTPAR               LINK TO THE GETMAIN    @OY19405
*                                              ROUTINE         @OY19405
         L     R2,AVTDISTR              LOAD THE ADDRESS OF THE@OY19405
*                                         TRACE AREA           @OY19405
         LR    R1,R3                    COPY THE SIZE          @OY19405
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *@OY19405
*                                                              @OY19405
*        CLEAR THE TRACE AREA                                  @OY19405
*                                                              @OY19405
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *@OY19405
*                                                              @OY19405
TRACLEAR EQU   *                                               @OY19405
         MVI   0(R2),AVTEZERO           CLEAR ONE BYTE         @OY19405
         LA    R2,ONE(,R2)              INCREMENT TRACE AREA   @OY19405
*                                         ADDRESS              @OY19405
         BCT   R1,TRACLEAR              DECREMENT THE COUNT    @OY19405
*                                         AND BRANCH           @OY19405
         L     R1,AVTDISTR              LOAD THE BEGINNING ADDR@OY19405
*                                         OF THE TRACE AREA    @OY19405
         LR    R4,R1                    COPY THE CONTROL WORD  @OY19405
*                                         ADDRESS              @OY19405
         LA    R1,16(,R1)               GET THE ADDRESS OF THE @OY19405
*                                         TRACE AREA ITSELF    @OY19405
         ST    R1,0(,R4)                STORE THE BEGIN ADDR   @OY19405
         ST    R1,4(,R4)                STORE IT ONCE MORE     @OY19405
         LA    R0,ENTRYSIZ              GET THE SIZE OF A TRACE@OY19405
*                                         ENTRY                @OY19405
         SR    R2,R0                    CALCULATE THE ADDRESS  @OY19405
*                                         OF THE LAST ENTRY    @OY19405
         ST    R2,8(,R4)                STORE THE ADDRESS IN   @OY19405
*                                         THE CONTROL LIST     @OY19405
         ST    R3,12(,R4)               STORE THE SIZE OF AREA @OY19405
*                                         IN THE CONTROL LIST  @OY19405
         B     TESTBUFT                   DO NEXT TEST         @OY19405
         DROP  R6                                              @OY19405
         EJECT                                                 @OY19405
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *@OY19405
         EJECT
***************************************************************@OY19405
*        GET STORAGE FOR BUFFER TRACE.  THIS RTN IS BRANCHED   @OY19405
*        TOO, INSTEAD OF BEING INLINE, TO AVOID SETTING UP A   @OY19405
*        SECOND BASE REGISTER FOR THE MODULE.                  @OY19405
***************************************************************@OY19405
*                                                              @OY19405
BUFFRTN  EQU   *                                               @OY19405
         USING BUFFRTN,R6                                      @OY19405
         LH    R1,AVTBUENT              NO. OF TABLE ENTRIES   @OY19405
         LA    R1,ONE(R1)               ROUND UP TO AN EVEN ...@OY19405
         SRL   R1,ONE                   ... NUMBER IF ODD      @OY19405
         SLL   R1,ONE                                          @OY19405
         LR    R3,R1                    SAVE # ENTRIES         @OY19405
         LA    R5,BUFFTRSZ              FIXED TRACE ENTRY SIZE @OY19405
         AH    R5,AVTKEYLE              ADD KEY LEN            @OY19405
         LA    R5,X'1F'(R5)             ALIGN EACH ENTRY       @OY19405
         SRL   R5,5                     TO NEXT SIZE DIV BY    @OY19405
         SLL   R5,5                     HEX 20                 @OY19405
         MR    R0,R5                    LENGTH OF ENTRIES IN R1@OY19405
         LA    R1,2*HDRSZ+BUFFCTBL(R1)  TABLE SIZE = LENGTH OF @OY19405
*                                       ENTRIES + CONTROL AREA.@OY19405
*                                       + 2 HALF TABLE HEADERS.@OY19405
         LR    R5,R1                    SAVE TABLE SIZE        @OY19405
         LA    R0,AVTBUFTR              ADDR TO RECEIVE TABLE  @OY19405
*                                       ADDRESS FROM GETMAIN.  @OY19405
         BAL   R14,AVTPAR               LINK TO GETMAIN        @OY19405
         LR    R1,R5                    RESTORE TABLE SIZE     @OY19405
         USING IEDTRBUF,R2                                     @OY19405
         L     R2,AVTBUFTR              ADDRESS OF TRACE TABLE @OY19405
         LA    R5,CUR1                  FIRST TABLE ADDRESS    @OY19405
         ST    R5,CUR                   STORE IN CONTROL AREA  @OY19405
         LA    R5,BUFFCTBL(R2)          ADD. OF 1ST TABLE      @OY19405
         ST    R5,TABLE1                STORE IN CONTROL AREA  @OY19405
         LA    R1,0(R1,R2)              ADDRESS END OF TABLE   @OY19405
         ST    R1,CUR2+EIGHT            STORE AS LAST OF 2ND   @OY19405
         LR    R1,R3                    NUMBER OF ENTRIES      @OY19405
         LA    R3,BUFFTRSZ              GET THE SIZE           @OY19405
         AH    R3,AVTKEYLE              OF EACH TRACE ENTRY    @OY19405
         LA    R3,X'1F'(R3)             ALIGN                  @OY19405
         SRL   R3,5                          ENTRY             @OY19405
         SLL   R3,5                                SIZE        @OY19405
         MR    R2,R1                    ENTRIES * ENTRY SIZE   @OY19405
         SRL   R3,1                     DIVIDED BY TWO         @OY19405
         LA    R3,HDRSZ(R3)             PLUS HEADER SIZE       @OY19405
         LA    R1,HDRSZ(R5)             ADD IN HEADER SIZE     @OY19405
         L     R2,AVTBUFTR              RESTORE TABLE ADDRESS  @OY19405
         ST    R1,CUR1                  ADD. OF TABLE1 1ST ENT.@OY19405
         ST    R1,CUR1+FOUR             ADD. OF CURRENT ENTRY  @OY19405
         AR    R5,R3                    TABLE SIZE + 1ST TBL   @OY19405
         ST    R5,TABLE2                STORE TABLE2 ADDRESS   @OY19405
         ST    R5,CUR1+EIGHT            AND LAST ENTRY TABLE1  @OY19405
         LA    R5,HDRSZ(R5)             ADD HEADER SIZE        @OY19405
         ST    R5,CUR2                  FIRST ENTRY TABLE2     @OY19405
         ST    R5,CUR2+FOUR             CURRENT ENTRY TABLE2   @OY19405
         MVC   COUNT(4),AVTFZERO        CLEAR COUNT FIELD      @OY19405
         L     R3,TABLE1                GET START OF TABLE1    @OY19405
         L     R5,CUR2+EIGHT            GET END OF TABLE2      @OY19405
         SPACE
* CLEAR TRACE TABLE                                            @OY19405
         SPACE
TBLCLR   XC    0(HDRSZ,R3),0(R3)        CLEAR 16 BYTES         @OY19405
         LA    R3,HDRSZ(R3)             BUMP ADDRESS           @OY19405
         CR    R3,R5                    END OF TRACE TABLE     @OY19405
         BL    TBLCLR                   NO, LOOP               @OY19405
         SPACE
         L     R3,TABLE1                GET TABLE1 START       @OY19405
         LA    R3,12(R3)                GET ADD. OF BUFFER ID  @OY19405
         MVI   0(R3),C'1'               MOVE IN BUFFER ID      @OY19405
         L     R3,TABLE2                GET TABLE2 START       @OY19405
         LA    R3,12(R3)                GET ADD. OF BUFFER ID  @OY19405
         MVI   0(R3),C'2'               MOVE IN BUFFER ID      @OY19405
         B     TPIOTRAC                 RETURN TO MAIN LINE    @OY19405
         DROP  R6                                              @OY19405
         DROP  R2                                              @OY19405
         EJECT
ONE      EQU   1                        ONE                    @OY19405
TWO      EQU   2                        TWO                      S21903
SHIFT2   EQU   2                        SHIFT 2                  S21903
THREE    EQU   3                        THREE                    S21903
FOUR     EQU   4                        FOUR                     S21903
SIX      EQU   6                        SIX                      S21903
ROUND    EQU   7                        SEVEN                    S21903
NUM      EQU   8                        CHARACTERS/PASSWORD
EIGHT    EQU   8                        EIGHT                    S21903
TEN      EQU   10                       TEN                      S21903
TWELVE   EQU   12                       TWELVE                   S21903
FIFTEEN  EQU   15                       FIFTEEN                  S21903
SIXTEEN  EQU   16                       SIXTEEN                  S21903
THRTTWO  EQU   32                       CONSTANT OF THIRTY TWO   X01004
ENTRYSIZ EQU   16                       SIZE OF TRACE ENTRY      S21903
WORK     EQU   20                       SAVEAREA OFFSET TO WORKAREA
TWENTY   EQU   20                       TWENTY                   S21903
SENDACPT EQU   24                       SEND AND ACCEPT BITS
RETCDE   EQU   24                       RET CDE FOR ID SORT      S22026
ENTRYTYP EQU   X'E0'                    SINGLE ENTRY             S21903
IOTRCSIZ EQU   16                       SIZE OF I/O TRACE ENTRY  S21903
MQCBSIZE EQU   32                       MASTER QCB SIZE          S22027
PERCENT  EQU   100                      PERCENTAGE FACTOR
NOSWAP   EQU   X'00'                    TO RESET SWAP INDICATOR
HEXZERO  EQU   X'00'                    HEXADECIMAL ZERO         S21903
SECOPCTL EQU   X'01'                    SECONDARY OP CNTRL       S21903
BOUND8   EQU   X'08'                    EIGHT BYTE BOUNDARY.
XR       EQU   X'0F'                    BIT FLIPPER (4-7)
BOUND32  EQU   X'1F'                    32 BYTE BOUNDARY         S21903
ALTDSTER EQU   X'20'                    HEX 20                   S22024
VTO      EQU   X'26'                    COMMON BUFFER VTO        S22027
INVLSRTD EQU   X'40'                    HEX 40                   S22024
CDLSTNOW EQU   X'40'                    HEX 40                   S22024
CORDLIST EQU   X'40'                    HEX 40                   S22024
SINGLINE EQU   X'60'                    SINGLE OR LINE ENTRY     S21903
LOGTYPE  EQU   X'60'                    LOG ENTRY                S21903
TSOTERM  EQU   X'70'                    TO TEST FOR TSO TERMINAL
LGB      EQU   X'80'                    HEX 80                   S22024
LINE     EQU   X'80'                    HEX 80                   S22024
LGBLNCT  EQU   24                       TWENTY4                  S22024
SWAP     EQU   X'80'                    TO INDICATE SORT IN PROGRESS
ILISTNOW EQU   X'80'                    HEX 80                   S22024
ILISORTD EQU   X'80'                    HEX 80                   S22024
CONC     EQU   X'80'                    CONC OR ATTACHED TERM    S21903
ILISTOFF EQU   X'7F'                    HEX 7F                   S22024
NR       EQU   X'BF'                    NON-BLANK MASK
CDLSTOFF EQU   X'BF'                    HEX BF                   S22024
IOTRCFLG EQU   X'C0'                    I/O TRACE FLAG           S21903
PRIORITY EQU   X'90'                    COMMBUF PRIORITY         S22027
VIRTFLG  EQU   X'80'                    VIRTUAL MACHINE        @YA10680
LOGREC   EQU   X'74'                    OFFSET TO LOGREC DCB   @YA10680
CCHPTR   EQU   X'0C'                    OFFSET TO CCH CAT      @YA10680
VMFLG    EQU   X'FF'                    VIRTUAL CPU            @YA10680
VMCODE   EQU   X'20'                    VM ERROR RETURN CODE   @YA10680
MSGX     EQU   MSG065+37                *****                    S22024
MSGC     EQU   MSG+16                   *****                    S22024
LCCWSZ   EQU   8                        SIZE OF VTAM LCCW        X03039
IEDTRBUF DSECT                                                 @OY19405
CUR      DS    AL4                 TABLE BEING USED            @OY19405
TABLE1   DS    AL4                                             @OY19405
TABLE2   DS    AL4                                             @OY19405
CUR1     DS    AL4                 CURRENT ENTRY TABLE ONE     @OY19405
         DS    AL4                 FIRST ENTRY POINTER         @OY19405
         DS    AL4                 LAST ENTRY POINTER          @OY19405
CUR2     DS    AL4                 POINTERS FOR TABLE TWO      @OY19405
         DS    AL4                 FIRST                       @OY19405
         DS    AL4                 LAST                        @OY19405
COUNT    DS    AL4                 COUNT OF TABLES USED        @OY19405
IEDTREND DS    0H
BUFFTRSZ EQU   X'18'               BUFFER TRACE ENTRY SIZE     @OY19405
BUFFCTBL EQU   IEDTREND-IEDTRBUF   SIZE OF CONTROL TABLE       @OY19405
         EJECT
         TAVTD
         TCPBD 3330
         IEDCMB                                                  S22027
GETD     DSECT                                                 @Y17XANG
GETSAVE  DS    3A                       REGISTER SAVE          @Y17XANG
GETSVCUR DS    A                        CURRENT SORT POSITION  @Y17XANG
GETLGB   DS    2A                       LGB ADDRESS SAVE       @Y17XANG
*                                       MUST BE 2 WORDS AND    @Y17XANG
*                                       ALWAYS PRECEED 1ST     @Y17XANG
*                                       LINE ENTRY.            @Y17XANG
GETFIRST DS    0CL8                     SORT TABLE ENTRY       @Y17XANG
GETTTE   DS    A                                               @Y17XANG
GETTTCIN DS    H                                               @Y17XANG
GETRLN   DS    H                                               @Y17XANG
         EJECT
         TLCBD                                                   X03039
         SPACE 2
         TTRMD
         TTNTD                          TERMNAME TABLE MACRO
         EJECT
TTRCCTLD DSECT                          TPIO TRACE CONTROL AREA  X03039
TTRCCURR DS    F                        CURRENT ENTRY ADDRESS    X03039
TTRCFRST DS    F                        FIRST ENTRY ADDRESS      X03039
TTRCLAST DS    F                        LAST ENTRY ADDRESS       X03039
TTRCFLGS DS    XL1                      FLAGS                  @XA07498
TTRCTSYS EQU   X'10'                    TRACE TOTAL SYSTEM BIT @XA07498
TTRCRTNA DS    AL3                      TPIO TRACE RTN ADDRESS @XA07498
TTRCMIDL DS    F                        MIDDLE ENTRY ADDRESS     X03039
TTRCLNTH DS    F                        LENGTH OF EACH HALF-TABLEX03039
TTRCEND  DS    0H                       END OF CONTROL AREA      X03039
*                                                                X03039
CNTRLSZ  EQU   TTRCEND-TTRCCTLD         SIZE OF CONTROL AREA     X03039
HDRSZ    EQU   16                       SIZE OF HALF-TABLE HEADERX03039
ENTRYSZ  EQU   32                       SIZE OF PIU TRACE ENTRY@Y17XANG
         EJECT
         TQCBD                          QCB DSECT
         TQCBED                                                  S22026
         TDVCIDTD                                                S22026
         DCBD  DSORG=TX
         TLGBD                                                 @Y17XANG
         TTSID
         EJECT
CVTDSECT CVT   DSECT=YES
         END
