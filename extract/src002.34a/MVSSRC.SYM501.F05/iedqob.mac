WTOR     TITLE '''IEDQOB''-WTOR INTERPRETER'
IEDQOB   CSECT
*A000000-999999                                                @G36XRNP
         SPACE 3                                                 S21903
*  CHANGE ACTIVITY AS FOLLOWS
******************** MICROFICHE FLAGS *********************** SUPT CODE
*A001620,002500-003000,135285,628400,638600-639000,640400       SA51078
*A654500-654900,657600-659400                                   SA51078
*D657600-659200                                                 SA51078
*A117600                                                         S21101
*C133600                                                         S21101
*A135200                                                         S21101
*C136000                                                         S21101
*D140000                                                         S21101
*C162800-165600                                                  S21101
*D167200                                                         S21101
*C172400-173200                                                  S21101
*A176000                                                         S21101
*C179200-182400,187200,279200-283200                             S21101
*D285600-326400                                                  S21101
*C394400,396800-400800,575200-578400,704800-708800               S21101
*A736000,948000,951200                                           S21101
*D955200                                                         S21101
*A959200                                                         S21101
*D960000-967840,969600                                           S21101
*A135583,432830-433490                                           S22024
*C194400,202400-338400,362400,369000-369400                      S22024
*C959220-959350,959490-959706                                    S22024
*C532000,535200-536000,9516000                                   S22024
*A 950400                                                       SA63008
*C 459200                                                       SA63008
*C959454,959535,919715                                           X03039
*D369000,432830,433070,959445,959530,959710                      X03039
*C532000,535200-536000,951600                                    S05331
*A361200,A403280-403840,A624020-624660,D959427-959454,           Y05331
*A959427-959459,A959526-959527,C959530-959531,C959700-959703     Y05331
*C612000                                                       @SA70222
*A185600,187600                                                @SA70307
*A369200,432800,959451,959530                                    X03039
*A135583,369300,433070,959535,959711                           @X50X9NI
*A135586,624520                                                @ZA07074
*C959526-959527                                                @ZA07074
*A403360                                                       @OZ06187
*A056000,064000,132800,366400,369350,385600,432830,432980      @Y17XANG
*A659400,959535,959537,959715,972000                           @Y17XANG
*C005000,059200,064000,365600-366400,948800                    @Y17XANG
*D433040-433071,959720                                         @Y17XANG
*D431500-431700,443400-443800                                  @Y17XANA
*C532000,535200-536000,951600                                  @Y17XANU
         SPACE 3                                                 S21903
*          TCAM LEVEL 10.0 MVS CHANGES                         @G36XRNP
*A036000,056720,119600,135290,135440,135588,160000,369390      @G36XRNP
*A638800,642400,645600,649600,652800,654700,654800,659596      @G36XRNP
*A736080,959466,959541,959727                                  @G36XRNP
*A628400,638800,642400,645600,649600,652800,654700654900       @OS77945
*A640400                                                       @OS77945
*A557660,557740,952000                                         @OZ17630
***********************************************************************
*                                                                     *
*  TITLE: IEDQOB - WTOR INTERPETER                                    *
*                                                                     *
*  MODULE NAME = IEDQOB (TCAM,INITIALIZATION)                  @G36XRNP
*                                                                     *
*  DESCRIPTIVE NAME = WTOR INTERPETER                                 *
*                                                                     *
*  COPYRIGHT = 'NONE'                                                 *
*                                                                     *
*STATUS -- CHANGE LEVEL 10.0                                   @G36XRNP
*                                                                     *
*FUNCTION -- THIS ROUTINE ACCEPTS FROM THE OPERATOR NEW VALUES TO     *
*   REPLACE THOSE VALUES SPECIFIED AT ASSEMBLY TIME ON CERTAIN        *
*   KEYWORDS ON INTRO MACRO.  THIS PERMITS SYSTEM REDEFINITION        *
*   WITHOUT REASSEMBLY.                                               *
*                                                                     *
*ENTRY POINTS -- CALLED ONLY FROM 'IEDQOA'                            *
*        'IEDQOB' - INTERPRET OPERATOR RESPONSES                      *
*   CALLING SEQUENCE IS                                               *
*        LINK  EP=IEDQOB                                       @G36XRNP
*                                                                     *
*INPUT -- REGISTERS AT INPUT MUST BE SET AS FOLLOWS -                 *
*   REG 1 - ADDRESS OF AVT                                            *
*   REG 13- ADDRESS OF CALLER'S SAVEAREA                              *
*   REG 14- RETURN ADDRESS                                            *
*   REG 15- ENTRY POINT ADDRESS                                       *
*   ADDITIONAL DATA IS RECEIVED FROM THE OPERATOR AS RESPONSES        *
*   TO REQUESTS MADE BY WTOR.                                         *
*                                                                     *
*OUTPUT -- CERTAIN FIELDS OF THE AVT HAVE BEEN MODIFIED ACCORDING     *
*   TO OPERATOR'S REPLY.  ALL REGISTERS ARE RETURNED INTACT.          *
*                                                                     *
*EXTERNAL ROUTINES -- SUPERVISOR IS CALLED TO PROVIDE 'WTOR' AND      *
*   'WAIT' FUNCTIONS.                                                 *
*                                                                     *
*EXITS-NORMAL -- RETURN IS MADE TO IEDQOA.  USER HAS SPECIFIED        *
*   ONE OF THESE INTRO OPERANDS IN RESPONSE TO WTOR REQUESTS.  @G36XRNP
*                                                              @G36XRNP
*     CPB - NUMBER OF CHANNEL PROGRAM BLOCKS  - REQUIRED IF    @G36XRNP
*           DISK=YES IS SPECIFIED                              @G36XRNP
*     EITHER ON INTRO OPERANDS OF IN RESPONSES TO WTOR REQUESTS -     *
*     LNUNITS - NUMBER OF LINE BUFFERS                                *
*     KEYLEN - LENGTH OF KEY PORTION OF DATA RECORD                   *
*     START - WARM OR COLD                                            *
*     OTHER FIELDS OF AVT MAY HAVE BEEN ALTERED ALSO. (OPTIONAL)      *
*     RETURN CODE IN REGISTER 15 IS ZERO.                             *
*                                                                     *
*EXITS-ERROR -- RETURN CODE IN REGISTER 15 IS 4.  THE TCAM WORD IN    *
*   THE CVT IS NON-ZERO, INDICATING ANOTHER TCAM IS ACTIVE.           *
*               RETURN CODE IN REGISTER 15 IS 28.  THE TCB     @G36XRNP
*               INDICATES THAT THE TCAM MCP IS UNAUTHORIZED    @G36XRNP
*                                                                     *
*TABLES-WORK AREAS -- CERTAIN FIELDS IN AVT MAY HAVE BEEN MODIFIED.   *
*        INTRO KEYWORD    RESPONSES KEYWORD  AVT FIELD  FIELD LENGTH  *
*        STARTUP          S                 AVTBIT3    4 BITS         *
*        LNUNITS          B                 AVTNOLBF   2 BYTES        *
*        MSUNITS          M                 AVTTOTNC   4 BYTES        *
*        KEYLEN           K                 AVTKEYLE   2 BYTES        *
*        UNITSZ           K                 AVTKEYLE   2 BYTES        *
*        RESTART          N                 AVTCKRST   1 BYTE         *
*        CPINTVL          V                 AVTCKELV   2 BYTES        *
*        CONTROL          L                 AVTCTLCH   8 CHARS        *
*        PRIMARY          P                 AVTDOUBX   8 CHARS        *
*        INTVAL           I                 AVTINTLV   2 BYTES        *
*        PASSWRD          W                 AVTPASWD   8 CHAR         *
*        CKREQS           R                 AVTNCKPR   1 BYTE         *
*        CPB              D                 AVTCPBNO   2 BYTES        *
*        CPRCDS           E                 AVTCPRCD   1 BYTE         *
*        CROSSRF          F                 AVTCRSRF   4 BYTES        *
*        COMWRTE          G                 AVTCWFL1   1 BIT          *
*        TOPMSG           H                 AVTBIT2    1 BIT          *
*        TRACE            T                 AVTRACE    4 BYTES        *
*        DTRACE           A                 AVTDISTR   4 BYTES        *
*        CIB              C                 AVTCIB     2 BYTES        *
*        MSMIN            Y                 AVTCMIN    4 BYTES        *
*        MSMAX            X                 AVTCMAX    4 BYTES        *
*        DLQ              Q                 AVTDLQX    8 BYTES        *
*        OLTEST           O                 AVTOLTST   1 BYTE         *
*        BRACKET          BR                SAVTBSM    4 BYTES @Y17XANG
*        OPMASK           OP                AVTOPMSK   4 BYTES @Y17XANG
*        PLCBNO           PL                AVTPLCBN   2 BYTES @Y17XANG
*        SUBAREA          SA                SAVTSUBV   1 BYTE  @Y17XANG
*        MAXSUBA          MA                SAVTSUBA   1 BYTE  @Y17XANG
*        BTRACE           BT                SAVTPIUT   4 BYTES @Y17XANG
*        TTRACE           TT                SAVTPIUT   4 BYTES @Y17XANG
*        SIBCNT           SB                SAVTSIBC   2 BYTES @Y17XANG
*        VM               Z                 SAVTDIAF   1 BYTE  @Y17XANG
*        APWAS            WA                AVTEW      2 BYTES @G36XRNP
*        AUTHA            AU                AVTEW+2    1 BIT   @G36XRNP
*   OTHER INTRO KEYWORDS CANNOT BE MODIFIED BY OPERATOR.              *
*                                                                     *
*   IF INTRO IS ASSEMBLED WITH KEYLEN, CPB (OR DISK=NO), STARTUP,     *
*   LNUNITS AND SUBAREA(OR FEATURES=NO3705 OR NOVTAM)          @Y17XANG
*   SPECIFIED, THE OPERATOR IS NOT GIVEN                       @Y17XANG
*   THE OPPORTUNITY TO MODIFY ANY INTRO VALUES AT EXECUTION TIME      *
*   SINCE THIS ROUTINE WILL SKIP ISSUEING THE 'WTOR'.  TO BE ABLE     *
**  TO MAKE EXECUTION TIME MODIFICATIONS, AT LEAST ONE OF THESE       *
*   FOUR MUST BE OMITTED FROM THE INTRO ASSEMBLY.                     *
*                                                                     *
*   FOLLOWING MACROS ARE USED TO GENERATE DSECTS - TAVTD,CVT,  @Y17XANG
*   TMSKD,TTCBD. THE FOLLOWING SYSTEM MACROS ARE USED - WTO,   @Y17XANG
*   WTOR, WAIT, DOM, RETURN, SAVE.                             @Y17XANG
*                                                                     *
*ATTRIBUTES -- TRANSIENT, NON-REUSABLE, NON-REFRESHABLE, ENABLED,     *
*   PROBLEM PROGRAM MODE                                              *
*                                                                     *
*NOTES -- THE OPERATION OF THIS SUBROUTINE DEPENDS UPON AN INTERNAL   *
*   REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT  *
*   TO THE ONE USED AT ASSEMBLY TIME.  THE CODING HAS BEEN ARRANGED   *
*   SO THAT REDIFINITION OF 'CHARACTER' CONSTANTS, BY REASSEMBLY,     *
*   WILL RESULT IN A CORRECT MODULE FOR THE NEW DEFINITIONS.          *
*                                                                     *
*   MESSAGES TO OPERATOR -                                            *
*  'IED001I TCAM JOB JJJJJJJJSSSSSSSSPPPPPPPP ADDRESS OF AVT AAAAAAAA'*
*        'JJJJJJJJ' - JOB NAME                                        *
*        'SSSSSSSS' - STEP NAME                                       *
*        'PPPPPPPP' - PROC STEP NAME.                                 *
*        'AAAAAAAA' - ADDRESS OF AVT                           @G36XRNP
*   'IED002A SPECIFY TCAM PARAMETERS'                                 *
*        SYSTEM WAITS FOR USER RESPONSE.  REPLY MUST BE LIMITED       *
*        TO 41 CHARACTERS.  RESPONSE IS BY KEYWORDS,SEPARATED BY      *
*        COMMAS.  SEVERAL KEYWORDS MAY BE CODED IN ONE RESPONSE,      *
*        SUBJECT TO THE 55 CHARACTER LIMIT.  THE RESPONSE FIELD       *
*        IS INTERPRETED LEFT TO RIGHT.  AN ERROR IN ONE KEYWORD       *
*        PREVENTS INTERPRETATION OF OTHER KEYWORD FURTHER TO THE      *
*        RIGHT IN THAT SAME RESPONSE.  A KEYWORD MAY BE RECORDED      *
*        TO MODIFY A VALUE PREVIOUSLY CODED AS A RESPONSE.  THIS      *
*        ROUTINE WILL CONTINUE TO REPEAT THE ABOVE REQUEST FOR        *
*        INPUT UNTIL THE USER INDICATES THAT HE HAS NOTHING ELSE      *
*        TO SAY.  THIS IS INDICATED BY CODING 'U' AS LAST KEYWORD.    *
*        USER MAY CODE EITHER THE SINGLE LETTER KEYWORD OR THE FULL   *
*        KEYWORD AS IT APPEARS IN INTRO.                              *
*        KEYWORDS MAY BE EITHER UPPER OR LOWER CASE.                  *
*   'IED003A INVALID KEYWORD XXXXXX'                                  *
*        'XXXX' - FIRST 4 CHARACTERS OF UNDEFINED KEYWORD.  ALL       *
*        KEYWORDS TO THE RIGHT OF THIS ARE IGNORED.  KEYWORDS TO      *
*        THE LEFT OF ERROR HAVE BEEN INTERPRETED.                     *
*   'IED004A REQUIRED PARAMETER MISSING. SPECIFY XX'                  *
*        THE USER CODED 'U' INDICATING HE WAS THRU.  THIS STATEMENT   *
*        REMINDS HIM OF A REQUIRED PARAMETER HE HAS YET TO CODE.      *
*        'XX' IS THE KEYWORD NEEDED.  USER SHOULD REPLY WITH THE      *
*        INDICATED KEYWORD (OR ANY KEYWORDS) JUST AS IF HE HAD        *
*        NEVER SAID 'U' YET.  HE MUST AGAIN INDICATE HE IS THRU       *
*        RESPONDING BY CODING 'U'.  THE REQUIRED KEYWORDS WHICH       *
*        MAY BE CALLED FOR HERE ARE 'STARTUP ='(COLD OR        @Y17XANG
*        WARMSTART), 'LNUNITS='(NUMBER OF LINE BUFFERS),       @Y17XANG
*        'KEYLEN='(SIZE OF A BUFFER), 'CPB='(NUMBER OF CPBS,   @Y17XANG
*        REQUIRED ONLY IF DISK IS BEING USED BY SPECIFYING     @Y17XANG
*        DISK=YES ON INTRO), 'SUBAREA='(REQUIRED ONLY IF       @Y17XANG
*        FEATURES=MIXED3705 OR ONLY3705 IS SPECIFIED ON INTRO) @Y17XANG
*        OR 'VM='.                                             @Y17XANG
*   'IED005A MSUNITS(M) SPECIFICATION NOT PERMITTED.  CONTINUE        *
*        RESPONSE'                                                    *
*        USER HAS CODED THE 'M=' KEYWORD TO SET THE NUMBER OF CORE    *
*        QUEUE RECORDS, BUT CORE QUEUEING WAS NOT SPECIFIED AT INTRO  *
*        ASSEMBLY TIME.  THE 'M=' RESPONSE IS LEGAL ONLY IF CORE      *
*        QUEUEING (INTRO MSUNITS=YES OR INTEGER) WAS SPECIFIED AT     *
*        ASSEMBLY TIME.                                               *
*   'IED006A INVALID OPERAND ON KEYWORD.  RESPECIFY XX'               *
*        'XX -- KEYWORD CONTAINING ILLEGAL VALUE.  ALL KEYWORDS       *
*        IN THIS RESPONSE AFTER THE ILLEGAL ONE ARE IGNORED.  ALL     *
*        KEYWORDS UP TO THIS KEYWORD HAVE BEEN INTERPRETED.           *
*   'IED014I TCAM ALREADY IN SYSTEM'                                  *
*        THE TCAM WORD IN THE CVT WAS FOUND TO BE NON-ZERO, INDICAT-  *
*        ING THAT ANOTHER PARTITION(REGION) HAS AN ACTIVE TCAM.       *
*        SINCE TWO TCAMS CANNOT COEXIST, THIS ROUTINE RETURNS         *
*        IMMEDIATELY TO IEDQOA WITH AN ERROR CODE OF 4.               *
*   THIS ROUTINE IS ON SYS1.LINKLIB AND IS LINKED TO BY IEDQOA, THE   *
*   TCAM NON-RESIDENT START UP ROUTINE WHICH WAS ITSELF LINKED TO     *
*   BY 'INTRO'                                                        *
*                                                                     *
*                                                                     *
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *S21101
         EJECT                                                 @Y17XANG
*
R15      EQU   15                       ENTRY ADDRESS, TEMP BASE
*                                       RETURN CODE -
*                                         0 - NORMAL
*                                         4 - TCAM ALREADY IN SYSTEM
*                                        28 - MCP UNAUTHORIZED @G36XRNP
R14      EQU   14                       RETURN ADDRESS TO IEDQOA
*                                       RETURN ADDRESS FROM INTERNAL
*                                         SUBROUTINES, 'HALFNO' AND
*                                         'CHAR8'
R13      EQU   13                       CALLERS SAVEAREA ADDRESS
RAVT     EQU   13                       AVT DSECT BASE (AVTSAVE4)
RBASE    EQU   12                       PROGRAM BASE
RESERVD  EQU   11                       KEYWORD TABLE SEARCH LOOP
*                                         STOPPING POINT
RBUMP    EQU   10                       INCREMENTOR (VALUE 2) IN
*                                         KEYWORD TABLE SEARCH LOOP
RINDEX   EQU   9                        INDEX TO LIST OF KEYWORDS
RTEMP    EQU   8                        TEMPORARY STORAGE, WORK REG
RCNT     EQU   7                        NUMBER OF BYTES IN OPERAND
RANS     EQU   6                        BINARY EQUIVALENT OF DECODED
*                                         INTEGER OPERANDS, SET BY
*                                         'NUMCONV' ROUTINE
REND     EQU   5                        ADDRESS OF FIRST CHARACTER
*                                         BEYOND OPERAND, SET BY
*                                         'SCAN' ROUTINE
RESUL    EQU   4                        ADDRESS OF AVT FIELD TO BE
*                                         MODIFIED
RX       EQU   3                        RETURN ADDRESS FROM INTERNAL
*                                         SUBROUTINES, 'SCAN' AND
*                                         'NUMCONV'
RSTART   EQU   2                        SCAN POINTER TO RESPONSE TEXT
*                                         ADDRESS OF START OF KEYWORD
*                                         OR START OF OPERAND
R1       EQU   1                        AS INPUT, AVT ADDRESS
*                                         TEMPORARY USE - HAS CVT
*                                         ADDRESS, TCAM WORD IN CVT,
*                                         PARAMETER PASSER TO 'WTO',
*                                         ADDR OF TAG 'BACK'
R0       EQU   0                        UNUSED
*
REOT     EQU   R15                      END OF MASK TABLE REG  @Y17XANG
RDLIM    EQU   R14                      CURRENT SCAN DELIM FOR @Y17XANG
*                                       OPMASK ROUTINE         @Y17XANG
         USING *,R15                    TEMPORARY BASE           S21101
         USING IEDQAVTD,RAVT
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *S21101
*                                                                S21101
*                       EQUATES                                  S21101
*                                                                S21101
Y        EQU   C'Y'                     STARTUP=Y                S21101
I        EQU   C'I'                     STARTUP=I                S21101
W        EQU   C'W'                     STARTUP=W                S21101
C        EQU   C'C'                     STARTUP=C                S21101
E        EQU   C'E'                     STARTUP=E               SA51078
N        EQU   C'N'                     N=NO                   @G36XRNP
AUTHBIT  EQU   X'80'                    AUTHORIZATION = YES    @G36XRNP
NOAUTRQD EQU   X'FF'-AUTHBIT            AUTHORIZATION = NO     @G36XRNP
AUTHKEY6 EQU   X'60'                    AUTHORIZED KEY 6       @G36XRNP
*                                                                S21101
COMMA    EQU   C','                     FIELD SEPARATOR IN REPLY S21101
XF0      EQU   X'F0'                    CLEARS LOW 4 BITS IN BYTES21101
*                                       TESTS FOR CHAR AS X'F-'  S21101
REPLYBIT EQU   X'01'                    BIT IN 'FLAG'            S21101
*                                         '1'-WTOR HAS BEEN ISSUES21101
*                                         '0'-NO WTOR YET        S21101
TABSIZ   EQU   2                        LENGTH OF EACH ENTRY IN  S21101
*                                         'OPTABLE'              S21101
EQUAL    EQU   8                        CONDITIONAL BRANCH MASK  S21101
D0       EQU   0                       CONSTANT EQUATE FOR ZERO  S21903
AL       EQU   8                        NO. CHARS IN AVT ADDRESS S21101
T2       EQU   2                        TIMES 2                  S21903
T3       EQU   3                        TIMES 3                  S21903
ZERO     EQU   0                        ZERO                     S21903
XFF      EQU   X'FF'                    HEX FF                   S21903
W2       EQU   4                        OFFSET TO SECOND WORD    S21101
W3       EQU   8                        OFFSET TO THIRD WORD     S21101
IDS      EQU   8                        LENGTH OF JOBNAME,       S21101
*                                         PROCNAME, AND          S21101
*                                         PROCSTEPNAME           S21101
TWO      EQU   2                        OFFSET                 @G36XRNP
AVTECD28 EQU   28                       ERROR CODE FOR IEDQOA  @G36XRNP
TIOTJOB  EQU   0                        OFFSET INTO TIOT OF      S21101
*                                         JOBNAME                S21101
TIOTPROC EQU   8                        OFFSET INTO TIOT OF      S21101
*                                         PROCNAME               S21101
TIOTSTEP EQU   16                       OFFSET INTO TIOT OF      S21101
*                                         STEPNAME               S21101
LREPLY   EQU   55                       REPLY LENGTH             S21101
KEY4     EQU   4                        KEYWORD LENGTH OF 4      S21101
KEY6     EQU   6                        KEYWORD LENGTH OF 6      S21101
KEY7     EQU   7                        KEYWORD LENGTH OF 7      S21101
KEY8     EQU   8                        KEYWORD LENGTH OF 8      S21101
LKEYWORD EQU   8                        LENGTH OF KEYWORD ID MAXIS21101
L8       EQU   8                        LENGTH OF DOUBLEWORD     S21101
INC      EQU   1                        INCREMENTOR TO NEXT BYTE S21101
E3       EQU   3                        TABLE ENTRY LENGTH       S22024
ONE      EQU   1                        CONSTANT               @X50X9NI
ENDTAB2  EQU   X'FF'                    END OF TABLE INDICATOR   S22024
X7F      EQU   X'7F'                    MASK TO CLEAR X'80' BIT@ZA07074
*                                                                S21101
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *S21101
         EJECT                                                 @Y17XANG
*                                                                S21101
         SAVE  (14,12)                  SAVE REGS FOR IEDQOA     S21101
*                                                                S21101
         USING IEDQOB,RBASE             PROGRAM BASE             S21903
         LR    RBASE,R15                SET UP BASE REGISTER     S21903
         DROP  R15                      FORGET TEMPORARY BASE    S21903
IEDQOB   IEDHJN TAG,HJN                MODULE NAME AND HJN       S21903
         LA    RTEMP,T3*AVTSVSIZ(R1)    POINT TO AVTSAVE4        S21903
         ST    R13,W2(,RTEMP)           EXCHANGE SAVEAREA ADDRESSES
         ST    RTEMP,W3(,R13)
         LR    R13,RTEMP
*
         UNPK  ADAVT(AL+INC),AVTBASE(L'AVTBASE+INC) GET AVT ADDRESS
         TR    ADAVT(AL),TRTABLE          TO MESSAGE
         TM    AVTBIT1,AVTDISKN         ARE DISK CONSTANTS IN AVT
         BO    DISK                       YES, ACCEPT DISK CHANGES
*                                         NO, DISK CONSTANTS BAD
         MVC   DISKC(TABSIZ),AVTHFF     FORBID DISK OPERANDS
         MVC   XCPB(TABSIZ),AVTHFF      FORBID DISK OPERANDS
DISK     EQU   *
         TM    AVTBIT1,AVTAQTAN         ARE CORE CONSTANTS IN AVT
         BO    CORE                       YES, ACCEPT CORE CHANGES
*                                         NO, CORE CONSTANTS BAD
         MVC   COREM(TABSIZ),AVTHFF     FORBID CORE CONSTANTS
         MVC   XMSUNITS(TABSIZ),AVTHFF  FORBID CORE CONSTANTS
         MVC   COREY(TABSIZ),AVTHFF     FORBID CORE CONSTANTS
         MVC   XMSMIN(TABSIZ),AVTHFF    FORBID CORE CONSTANTS
         MVC   COREX(TABSIZ),AVTHFF     FORBID CORE CONSTANTS
         MVC   XMSMAX(TABSIZ),AVTHFF    FORBID CORE CONSTANTS
CORE     EQU   *
         LA    RBUMP,TABSIZ             PRESET INCREMENTOR TO TABLE SIZ
         L     RTEMP,CVTPTR             GET ADDR OF CVT
         USING CVTD,RTEMP
         L     RTEMP,CVTTCBP            GET ADDR OF TCB POINTERS
         L     RTEMP,W2(,RTEMP)         GET TCB ADDRESS
         USING IEDQTCB,RTEMP
         CLI   TCBPKF,AUTHKEY6          IS MCP AUTHORIZED      @G36XRNP
         BNE   AUTHMSG                  NO, ISSUE ERROR MSG    @G36XRNP
         L     RTEMP,TCBTIO             GET ADDR OF TIOT
         MVC   JOBID(IDS),TIOTJOB(RTEMP) FROM TIOT GET JOBNAME,
         MVC   JOBID+(IDS+(T2*INC))(IDS),TIOTPROC(RTEMP)         S21903*
                                        PROCNAME, AND            S21903
         MVC   JOBID+(T2*(IDS+(T2*INC)))(IDS),TIOTSTEP(RTEMP)    S21903*
                                        STEPNAME                 S21903
         MVI   ADAVT+AL,AVTEPER
         L     R1,CVTPTR                GET ADDR OF CVT
         L     R1,AVTCVTPT(,R1)         GET CONTENTS OF TCAM
*                                         WORD IN CVT
         LTR   R1,R1                    IS TCAM ALREADY IN SYSTEM
         BZ    EOF                        NO, CONTINUE
*                                         YES, FUSS AND QUIT
         WTO   MF=(E,IED014I)          TCAM IN SYSTEM MSG        S21101
*
         LA    R15,AVTECD4              SET BAD RETURN CODE
         B     EXIT                    BRANCH TO EXIT ROUTINE    S21903
*
MSG001   WTO   MF=(E,IED001I)           JOBNAME, AVT ADDR MSG    S21101
*                                                                S21101
REQUEST  EQU   *
         OI    FLAG,REPLYBIT            INDICATE A REQUEST FOR
*                                         REPLIES HAS BEEN MADE
         LA    R1,IED002A               SPECIFY TCAM PARAMETERS MS21101
WTOR     EQU   *
         XC    REPLY(LREPLY),REPLY      CLEAR RESPONSE AREA
         XC    ECB,ECB                  CLEAR ECB
         WTOR  MF=(E,(1))
         LR    RINDEX,R1               @SAVE MSG ID NUMBER     @SA70307
*
         LA    RSTART,REPLY             PRESET SCAN POINTER      S21101
*                                                                S21101
         WAIT  ECB=ECB                  WAIT FOR OPERATOR        S21101
         DOM   MSG=(9)                  DELETE OPERATOR MSG    @SA70307
*
         TR    REPLY(LREPLY),CHTABLE    CHANGE LOWER TO UPPER CASE
*
* RSTART HAS ADDR OF KEYWORD
*
KEYWORD  EQU   *
         SR    RINDEX,RINDEX            CLEAR INDEX TO OPTABLE
         LA    RBUMP+1,ENDTAB-OPTABLE-TABSIZ SET STOP VALUE
         LA    RBUMP,TABSIZ             SET TABLE SIZE           S22024
         STH   RBUMP,KEYL               SET KEYWORD LENGTH       S22024
*
OPLOOP   EQU   *
         LA    RTEMP,OPTABLE(RINDEX)    GET ADDR OF OP CODE ENTRY
         CLC   0(TABSIZ,RTEMP),0(RSTART) CHECK RESPONSE FOR KEYWORD
         BE    BTABLE                   FOUND MATCHING KEYWORD
*
         BXLE  RINDEX,RBUMP,OPLOOP      GO CHECK NEXT KEYWORD,IF ANY
*                                       KEYWORD NOT IN TABLE
         SR    RBUMP,RBUMP              CLEAR REGISTER           S22024
         SR    RINDEX,RINDEX            CLEAR REGISTER           S22024
         LA    RTEMP,OPTABLE2           KEYWORD TABLE ADDRESS    S22024
OPLOOP2  EQU   *                                                 S22024
         IC    RBUMP,0(RTEMP)           LENGTH OF KEYWORD - 1    S22024
         EX    RBUMP,CLC                IS KEYWORD FOUND         S22024
         BE    FOUND                    BRANCH ON YES            S22024
         LA    RTEMP,E3(RBUMP,RTEMP)    BUMP TO NEXT IN TABLE    S22024
         CLI   0(RTEMP),ENDTAB2         IS THIS END OF TABLE     S22024
         BNE   OPLOOP2                  BRANCH ON NO             S22024
         MVC   MSGKEY(KEY4),0(RSTART)   GET UNIDENTIFIED KEYWORD S22024
         LA    R1,IED003A               INVALID KEYWORD MESSAGE  S22024
         B     WTOR                     GO WRITE MESSAGE         S22024
*                                                                S22024
CLC      CLC   0(0,RSTART),2(RTEMP)     COMPARE FOR KEYWORD      S22024
FOUND    EQU   *                                                 S22024
         LA    RBUMP,1(RBUMP)           ADJUST COUNT             S22024
         STH   RBUMP,KEYL               SET KEYWORD LENGTH       S22024
         IC    RINDEX,1(RTEMP)          PICK UP INDEX            S22024
*                                                                S22024
BTABLE   EQU   *
         LA    R1,BACK                  SET RETURN ADDRESS
         AH    RSTART,KEYL              BUMP PAST KEYWORD TO OPERAND
         AR    RINDEX,RINDEX            DOUBLE INDEX
*                                                                S21903
* THE FOLLOWING BRANCH TABLE IS USED TO PROCESS EACH OF THE      S21903
* 'INTRO' OPERANDS THAT CAN BE ENTERED FROM THE SYSTEM CONSOLE.  S21903
* THE LABEL TO WHICH THE BRANCH IS TAKEN SPECIFIES THE OPERAND   S21903
* WHICH IS TO BE EXAMINED.                                       S21903
*                                                                S21903
         B     *+W2(RINDEX)             ENTER BRANCH TABLE
         B     LINEBUF                  GO PROCESS LINEBUF       S21903
         B     CIB                      GO PROCESS CIB           S21903
         B     CPB                      GO PROCESS CPB           S21903
         B     INTVAL                   GO PROCESS INTVAL        S21903
         B     KEYLEN                   GO PROCESS KEYLEN        S21903
         B     CONTROL                  GO PROCESS CONTROL       S21903
         B     COREBUF                  GO PROCESS COREBUF       S21903
         B     RESTART                  GO PROCESS RESTART       S21903
         B     PRIMARY                  GO PROCESS PRIMARY       S21903
         B     CKREQS                   GO PROCESS CKREQS        S21903
         B     STARTUP                  GO PROCESS STARTUP       S21903
         B     TRACE                    GO PROCESS TRACE         S21903
         B     DTRACE                   GO PROCESS DTRACE        S21903
         B     CPINTVL                  GO PROCESS CPINTVL       S21903
         B     PASSWRD                  GO PROCESS PASSWRD       S21903
         B     DLQ                      GO PROCESS DLQ           S21903
         B     CPRCDS                   GO PROCESS CPRCDS        S21903
         B     CROSSRF                  GO PROCESS CROSSRF       S21903
         B     COMWRTE                  GO PROCESS COMWRTE       S21903
         B     TOPMSG                   GO PROCESS TOPMSG        S21903
         B     OLTEST                   GO PROCESS OLTEST        S21903
         B     COREMAX                  GO PROCESS COREMAX       S21903
         B     COREMIN                  GO PROCESS COREMIN       S21903
         B     VIRTUAL                  GO PROCESS VM            Y05331
         B     REQUEST                  GO PROCESS REQUEST       S21903
         B     EOF                      GO TO EOF                S22024
*
* WHEN THIS MODULE IS FIRST ENTERED, CONTROL IS PASSED TO 'EOF' TO
* SEE IF THE USER WISHES TO SUPPRESS THE 'WTOR' BY SPECIFYING AT
* INTRO ASSEMBLY TIME ALL FIVE REQUIRED OPERANDS -- KEYLEN,    @Y17XANG
* LNUNITS, STARTUP, CPB(OR DISK=NO), AND SUBAREA(OR FEATURE=   @Y17XANG
* NO3705) AND VM(OR VM=NOPROMPT).                              @Y17XANG
*
* WHEN THE USER REPLIES 'U', 'EOF' ALSO GETS CONTROL.
*
         B     PLCBNO                   GO PROCESS PLCBNO        S22024
         B     TTRACE                   PROCESS TTRACE           X03039
*                                       BTRACE AND TTRACE ARE  @Y17XANG
*                                       SYNONYMOUS, ROUTINE    @Y17XANG
*                                       LABELED TTRACE SERVES  @Y17XANG
*                                       BOTH.                  @Y17XANG
         B     BRACKET                  PROCESS BRACKET        @X50X9NI
         B     MAXSUBA                  PROCESS MAX SUBAREA    @Y17XANG
         B     OPMASK                   PROCESS AN OPERATOR    @Y17XANG
*                                       MASK ENTRY             @Y17XANG
         B     SUBAREA                  PROCESS SUBAREA ENTRY  @Y17XANG
         B     SIBCOUNT                 PROCESS SIB COUNT      @Y17XANG
         B     APWAS                    PROCESS APPLICATION    @G36XRNP
*                                       WORK AREA SIZE         @G36XRNP
         B     AUTHA                    PROCESS AUTHORIZATION  @G36XRNP
*                                                                S22024
EOF      EQU   *
         MVI   MISSKEY,AVTEBLNK         CLEAR MSG AREA
         MVC   MISSKEY+INC(LKEYWORD-INC),MISSKEY TO SPACES
         TM    AVTBIT1,AVTDISKN         ARE DISK CONSTANTS IN AVT
         BZ    CONTINUE                   NO, FORGET CPBS
*                                         YES, CPBS MUST BE SPECIFIED
         MVC   MISSKEY(L'XCPB),XCPB     PUT 'CPB=' INTO MSG
         LH    RTEMP,AVTCPBNO           GET NUMBER OF CPBS
         LTR   RTEMP,RTEMP              WERE ANY CPBS SPECIFIED
         BZ    MISSING                    NO, CPBS ARE MISSING
*                                         YES, CPB= SPECIFIED
CONTINUE EQU   *
         MVC   MISSKEY(L'XKEYLEN),XKEYLEN PUT 'KEYLEN=' INTO MSG
         LH    RTEMP,AVTKEYLE          GET UNIT SIZE FROM AVT    S21903
         LTR   RTEMP,RTEMP              WAS KEYLEN SPECIFIED
         BZ    MISSING                    NO, KEYLEN MISSING
*                                         YES, KEYLEN= SPECIFIED
         MVC   MISSKEY(L'XLNUNITS),XLNUNITS PUT 'LNUNITS=' INTO MSG
         LH    RTEMP,AVTNOLBF          GET NUMBER OF BUFFER      S21903
*                                        UNITS AVAILABLE FOR     S21903
*                                        BUILDING BUFFERS FROM   S21903
*                                        THE AVT                 S21903
         LTR   RTEMP,RTEMP              WAS LNUNITS SPECIFIED
         BZ    MISSING                    NO, LNUNITS MISSING
*                                         YES, LNUNITS SPECIFIED
         TM    AVTSAVTF,AVTVTMCP        IS THERE AN SAVT?      @Y17XANG
         BZ    TSTSTART                 BRANCH IF NOT          @Y17XANG
         L     R14,AVTSAVTP             SAVT BASE              @Y17XANG
         USING IEDNSVTD,R14                                    @Y17XANG
         MVC   MISSKEY(L'XSUBAREA),XSUBAREA PLACE SUBAREA=     @Y17XANG
*                                       INTO WTO MSG.          @Y17XANG
         CLI   SAVTSUBV,0               SUBAREA SPECIFIED?     @Y17XANG
         BE    MISSING                  BRANCH NO TO GET       @Y17XANG
*                                       SUBAREA.               @Y17XANG
         CLC   SAVTSUBV,SAVTSUBA        SUBAREA EXCEED MAX?    @Y17XANG
         BNH   TSTSTART                 BRANCH IF NOT.         @Y17XANG
         LA    R1,IED527A               MSG IED527A ADDRESS    @Y17XANG
         B     WTOR                     GO ISSUE DIAGNOSTIC    @Y17XANG
         DROP  R14                                             @Y17XANG
TSTSTART EQU   *                                               @Y17XANG
         MVC   MISSKEY(L'XSTARTUP),XSTARTUP PUT 'STARTUP=' INTO MSG
         TM    AVTBIT3,AVTSTAN          IS STARTUP SPECIFIED
         BNZ   GETMAIN                    YES, REQ'D PARMS ALL HERE
*                                         NO, STARTUP= MISSING
MISSING  EQU   *
         TM    FLAG,REPLYBIT            WAS A MISSING KEYWORD FOUND
*                                         BECAUSE USER REPLIED 'U'
*                                         OR BECAUSE THIS IS THE
*                                         FIRST TIME IN FROM INTRO
         BZ    MSG001                     FIRST TIME,SHOW AVT ADDS21101
*                                       USER REPLIED 'U', SPECIFY
*                                         MISSING KEYWORD
         LA    R1,IED004A               REQUIRED PARM MISSING MSGS21101
         B     WTOR                    GO ISSUE MISSING KEYWORD  S21903
*                                        MESSAGE                 S21903
*
GETMAIN  EQU   *
         L     R15,AVTSAVTP             SECONDARY AVT POINTER    Y05331
         USING IEDNSVTD,R15                                      Y05331
         MVI   MISSKEY,AVTEBLNK         CLEAR MESSAGE AREA     @OZ06187
         MVC   MISSKEY+INC(LKEYWORD-INC),MISSKEY  TO BLANKS    @OZ06187
         MVC   MISSKEY(L'XVM),XVM                                Y05331
         TM    SAVTDIAF,SAVTPRMT        PROMPT REQUIRED ?        Y05331
         BZ    GOODEXIT                 NO,BRANCH                Y05331
         B     MISSING                  YES,VM MISSING           Y05331
         DROP  R15                                               Y05331
GOODEXIT EQU   *                                                 Y05331
         SR    R15,R15                  SET GOOD RETURN CODE
EXIT     EQU   *
         L     R13,W2(,R13)             GET CALLERS SAVEAREA ADDR
         RETURN (14,12),T,RC=(15)       EXIT
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
CROSSRF  EQU   *
         BAL   R14,HALFNO               CONVERT CHAR TO BINARY
*
         ST    RANS,AVTCRSRF            STORE VALUE IN AVT
         BR    R1                       GO TO 'BACK'
*
LINEBUF  EQU   *
         BAL   R14,HALFNO               CONVERT CHAR TO BINARY
*
         LTR   RANS,RANS                WAS ZERO SPECIFIED
         BZ    NOTNUM                     YES,ILLEGAL,MUST HAVE BUFFERS
*                                         NO, NOW GOT BUFFERS
         STH   RANS,AVTNOLBF            STORE VALUE IN AVT
         BR    R1                       GO TO 'BACK'
*
CIB      EQU   *
         BAL   R14,HALFNO               CONVERT CHAR TO BINARY
*
         CH    RANS,L255                IS 255 LIMIT EXCEEDED
         BH    NOTNUM                     YES, TOO BIG
*                                         NO, SMALL ENOUGH
         STC   RANS,AVTCIB              STORE VALUE IN AVT
         BR    R1                       GO TO 'BACK'
*
TRACE    EQU   *
         BAL   R14,HALFNO               CONVERT CHAR TO BINARY
*
         ST    RANS,AVTRACE             STORE VALUE IN AVT
         LTR   RANS,RANS                NEW TRACE VALUE ZERO   @Y17XANA
         BNZR  R1                       NO , GO TO 'BACK'      @Y17XANA
         MVI   AVTIOTR,AVTEZERO         YES,RESET AVTIOTR TO 0 @Y17XANA
         BR    R1                       GO TO 'BACK'
*
TTRACE   EQU   *                                                 X03039
         TM    AVTSAVTF,AVTVTMCP        IS THERE AN SAVT?      @Y17XANG
         BZ    NOT3705                  BRANCH IF NOT, TRACE   @Y17XANG
*                                       NOR BTRACE ACCEPTABLE. @Y17XANG
         BAL   R14,HALFNO               CONVERT CHAR TO BINARY   X03039
*
         L     R14,AVTSAVTP             SECONDARY AVTPOINTER     X03039
         ST    RANS,SAVTPIUT-IEDNSVTD(R14)   SAVE # TBL ENTRIES@Y17XANG
*                                            IN SAVT           @Y17XANG
         BR    R1                                              @Y17XANG
*                                                              @Y17XANG
BRACKET  EQU   *                        PROCESS BRACKET        @Y17XANG
         TM    AVTSAVTF,AVTVTMCP        IS THERE AN SAVT?      @Y17XANG
         BZ    NOT3705                  BRANCH IF NOT          @Y17XANG
         L     R14,AVTSAVTP             SECONDARY AVT ADDR     @X50X9NI
         BAL   RX,SCAN                  BRANCH TO FIND LAST    @X50X9NI
*                                       CHAR OF OPERAND        @X50X9NI
         CLC   YESCOM,0(RSTART)         BRACKET=YES 'YES,'     @X50X9NI
         BE    BRKTYES                  YES-BRANCH             @X50X9NI
         CLC   YES0(L'YESCOM),0(RSTART) BRACKET=YES 'YES0'     @X50X9NI
         BE    BRKTYES                  YES-BRANCH             @X50X9NI
*                                                              @X50X9NI
         CLC   NOCOM,0(RSTART)          BRACKET=NO 'NO,'       @X50X9NI
         BE    BRKTNO                   YES-BRANCH             @X50X9NI
         CLC   NO0(L'NOCOM),0(RSTART)   BRACKET=NO 'NO0'       @X50X9NI
         BNE   NOTNUM                   BR NO-INVALID          @X50X9NI
*                                                              @X50X9NI
BRKTNO   EQU   *                                               @X50X9NI
         SR    R0,R0                    INIT TO ZERO           @X50X9NI
         ST    R0,SAVTBSM-IEDNSVTD(R14) INDICATE BRACKET MGR.  @X50X9NI
*                                       NOT TO BE LOADED       @X50X9NI
         BR    R1                       GO TO 'BACK'           @X50X9NI
BRKTYES  EQU   *                                               @X50X9NI
         LA    R0,ONE                   PUT A '1' IN REG       @X50X9NI
         ST    R0,SAVTBSM-IEDNSVTD(R14) INDICATE BRACKET MGR.  @X50X9NI
*                                       IS TO BE LOADED        @X50X9NI
         BR    R1                       GO TO  'BACK'          @X50X9NI
PLCBNO   EQU   *                                                 S22024
         TM    AVTSAVTF,AVTVTMCP        IS NCP DEFINED?        @G36XRNP
         BZ    NOT3705                  BRANCH ON NO             S22024
         BAL   R14,HALFNO               CONVERT CHAR TO BINARY   S22024
*                                                                S22024
         STH   RANS,AVTPLCBN            STORE VALUE IN AVT       S22024
         BR    R1                       GO TO 'BACK'             S22024
*                                                                S22024
NOT3705  EQU   *                                                 S22024
         SH    RSTART,KEYL              BACK UP TO KEYWORD       S22024
         MVC   MSGKEY(KEY4),0(RSTART)   MOVE INVALID KEYWORD     S22024
         LA    R1,IED003A               INVALID KEYWORD MESSAGE  S22024
         B     WTOR                     GO WRITE MESSAGE         S22024
*                                                                S22024
RESTART  EQU   *
         BAL   R14,HALFNO               CONVERT CHAR TO BINARY
*
         CH    RANS,L255                IS VALUE LESS THAN 255
         BH    NOTNUM                     NO, TOO BIG
*                                         YES, OK
         STC   RANS,AVTCKRST            STORE VALUE IN AVT
         BR    R1                       GO TO 'BACK'
*
DTRACE   EQU   *
         BAL   R14,HALFNO               CONVERT CHAR TO BINARY
*
         ST    RANS,AVTDISTR            STORE VALUE IN AVT
         LTR   RANS,RANS                NEW DTRACE VALUE ZERO  @Y17XANA
         BNZR  R1                       NO , GO TO 'BACK'      @Y17XANA
         MVI   AVTSUBT,AVTEZERO         YES,RESET AVTSUBT TO 0 @Y17XANA
         BR    R1                       GO TO 'BACK'
*
CPB      EQU   *
         BAL   R14,HALFNO               CONVERT CHAR TO BINARY
*
         STH   RANS,AVTCPBNO            STORE VALUE IN AVT
         BR    R1                       GO TO 'BACK'
*
INTVAL   EQU   *
         BAL   R14,HALFNO               CONVERT CHAR TO BINARY
*
         STH   RANS,AVTINTLV            STORE VALUE IN AVT
         BR    R1                       GO TO 'BACK'
*
CPINTVL  EQU   *
         BAL   R14,HALFNO              GO CONVERT TO BINARY AND  S21903
*                                        PUT VALUE INTO RANS     S21903
*
         CH    RANS,H30                 CPINTVL MUST BE AT LEAST 30
         BL    NOTNUM                     IF TOO LITTLE, ERROR
         C     RANS,MAXCPVL             CPINTVL CAN BE AT       SA63008
*                                       MOST 43199              SA63008
         BH    NOTNUM                     IF TOO BIG, ERROR     SA63008
         STH   RANS,AVTCKELV           STORE VALUE IN AVT        S21903
         BR    R1                       GO TO 'BACK',DO NEXT KEYWORD
*
*
KEYLEN   EQU   *
         BAL   R14,HALFNO              GO CONVERT TO BINARY AND  S21903
*                                        PUT VALUE INTO RANS     S21903
*
         LA    RTEMP,AVTMINKY           GET MINIMUM KEYLEN
         TM    AVTSAVTP,AVTVTMCP        3705 ENVIRONMENT       @YM06968
         BNO   KEYLEN1                  BR NO, MIN IS 36       @YM06968
         LA    RTEMP,AVTMIN05           MIN FOR 3705 IS 44     @YM06968
KEYLEN1  EQU   *                                               @YM06968
         CR    RANS,RTEMP               IS KEYLEN BIG ENOUGH
         BL    NOTNUM                     NO, ERROR
*                                         YES, OK
         CH    RANS,L255                IS KEYLEN TOO BIG
         BH    NOTNUM                     YES, ERROR
*                                         NO, OK
         STH   RANS,AVTKEYLE
         BR    R1                       GO TO 'BACK',DO NEXT KEYWORD
*
*
CONTROL  EQU   *
         LA    RESUL,AVTCTLCH           PASS AREA TO RECEIVE RESULT
         BAL   R14,CHAR8                GET OPERAND
*                                       IF CONTROL IS RETURNED FROM
*                                         CHAR8, 'ERASE' WAS REQUESTED
         MVC   AVTCTLCH,CTLCHDEF        NO CONTROL SPECIFIED
         BR    R1                       GO TO 'BACK'
*
PRIMARY  EQU   *
         LA    RESUL,AVTDOUBX           PASS AREA TO RECEIVE RESULT
         BAL   R14,CHAR8                GET OPERAND
*                                       IF CONTROL IS RETURNED FROM
*                                         CHAR8, 'ERASE' WAS REQUESTED
         MVC   AVTDOUBX,DOUBXDEF        SET PRIMARY TO 'SYSCON'
         BR    R1                       GO TO 'BACK'
*
PASSWRD  EQU   *
         LA    RESUL,AVTPASWD           PASS AREA TO RECEIVE RESULT
         BAL   R14,CHAR8                GET OPERAND
*                                       IF CONTROL IS RETURNED FROM
*                                         CHAR8, 'ERASE' WAS REQUESTED
         MVC   AVTPASWD,PASWDDEF        NO PASSWORD NEEDED
         BR    R1                       GO TO 'BACK'
*
DLQ      EQU   *
         LA    RESUL,AVTDLQ             PASS AREA TO RECEIVE RESULT
         BAL   R14,CHAR8                GET OPERAND
*                                       IF CONTROL IS RETURNED FROM
*                                         CHAR8, 'ERASE' WAS REQUESTED
         MVC   AVTDLQ,DLQDEF            NO DEAD LETTER QUEUE
         BR    R1                       GO TO 'BACK'
*
*
* RESUL HAS ADDR OF 8 CHARACTER AREA TO RECEIVE RESULT.
* RSTART POINT TO FIRST OF OPERAND.
*
CHAR8    EQU   *
         BAL   RX,SCAN                 BRANCH TO FIND LAST       S21903
*                                        CHARACTER OF OPERAND    S21903
*
         BCTR  RTEMP,ZERO               ADJUST LENGTH FOR EX INSTS21903
         CH    RTEMP,AVTHA7             8 IS MAXIMUM LENGTH
         BH    NOTNUM                   ILLEGAL OPERAND
*
         MVI   0(RESUL),AVTEBLNK        SET ENTIRE RESULT 8 CHAR
         MVC   INC(L8-INC,RESUL),0(RESUL) AREA TO BLANKS
         EX    RTEMP,MVC                PUT OPERAND TO ANSWER AREA
         CLC   0(L'ERASE,RESUL),ERASE   DOES OPERATOR WISH TO ERASE
*                                         THIS KEYWORD
         BCR   EQUAL,R14                  YES, GO INSERT DEFAULT
         BR    R1                       GO TO 'BACK',DO NEXT KEYWORD
*
MVC      MVC   0(0,RESUL),0(RSTART)     EXECUTED INSTRUCTION, SETS
*                                         OPERAND INTO RESULT AREA
*
CPRCDS   EQU   *
         BAL   R14,HALFNO               CONVERT CHAR TO BINARY
*
         CH    RANS,L75                 IS VALUE OVER 75
         BH    NOTNUM                     YES, TOO BIG
*                                         NO, SMALL ENOUGH
         CH    RANS,AVTHA2              2 IS MINIMUM VALUE
         BL    NOTNUM                     TOO SMALL
*                                         LARGE ENOUGH
         STC   RANS,AVTCPRCD            STORE VALUE IN AVT
         BR    R1                       GO TO 'BACK'
*
OLTEST   EQU   *
         BAL   R14,HALFNO               CONVERT CHAR TO BINARY
*
         CH    RANS,L255                IS VALUE OVER 255
         BH    NOTNUM                     YES, TOO BIG
*                                         NO, SMALL ENOUGH
         CH    RANS,L56                 IS VALUE LESS THAN 56? @Y17XAUU
         BNL   OLTGOOD                    NO, OK
*                                         YES, QUESTIONABLE
         LTR   RANS,RANS                IS VALUE ZERO
         BNZ   NOTNUM                   NO, RANGE 1-55 INVALID @Y17XANU
*                                       YES, ZERO OR 56-255 OK @Y17XANU
OLTGOOD EQU    *
         STC   RANS,AVTOLTST            STORE VALUE IN AVT
         BR    R1                       GO TO 'BACK'
*
COREMAX  EQU   *
         BAL   R14,HALFNO               GET NUMBER INTO RANS
*
         CH    RANS,H100                NO. CANNOT BE OVER 100
         BH    NOTNUM                     ERROR, TOO BIG
*                                         OK SO FAR, CONTINUE
         C     RANS,AVTCMIN             NO.MUST BE GREATER THAN MIN
         BNH   NOTNUM                     ERROR, TOO SMALL
*                                         OK, CONTINUE
         ST    RANS,AVTCMAX             STORE VALUE IN AVT
         BR    R1                       GO TO 'BACK'
*
COREMIN  EQU   *
         BAL   R14,HALFNO               GET NUMBER INTO RANS
*
         CH    RANS,H100                NO, MUST BE LESS THAN 100
         BNL   NOTNUM                     ERROR, TOO BIG
*                                         OK SO FAR, CONTINUE
         C     RANS,AVTCMAX             NO. MUST BE LESS THAN MAX
         BNL   NOTNUM                     ERROR, TOO BIG
*                                         OK, CONTINUE
         ST    RANS,AVTCMIN             STORE VALUE IN AVT
         BR    R1                       GO TO 'BACK'
*
CKREQS   EQU   *
         BAL   R14,HALFNO               CONVERT CHAR TO BINARY
*
         CH    RANS,L255                IS LIMIT EXCEEDED
         BH    NOTNUM                     YES, ILLEGAL OPERAND
*                                         NO, OK OPERAND
         STC   RANS,AVTNCKPR           STORE VALUE IN AVT        S21903
BACK     EQU   *
         LA    RSTART,INC(,REND)        BUMP TO NEXT KEYWORD
         B     KEYWORD                 GO EXAMINE NEXT KEYWORD   S21903
*
COREBUF  EQU   *
*
* MSUNITS(M) CAN BE SPECIFIED ONLY IF A NON-ZERO VALUE WAS SPECIFIED
* FOR MSUNITS ON INTRO MACRO ASSEMBLY.  MSUNITS=YES IS ASSEMBLED
* IDENTICALLY TO MSUNITS=1, THUS SETTING A NON-ZERO VALUE.
*
         NC    AVTTOTNC,AVTTOTNC        IS CORE BUFFERING REQUESTED
         BNZ   GOODCORE                   YES, GO SET NEW VALUE
*                                         NO, NOT PERMITTED
         LA    R1,IED005A               MSUNITS NOT PERMITTED MSGS21101
         B     WTOR                     GO FUSS AND WAIT FOR REPLY
*
GOODCORE EQU   *
         BAL   R14,HALFNO               CONVERT CHAR TO BINARY
*
         LTR   RANS,RANS                IS VALUE ZERO
         BZ    NOTNUM                     YES, NOT PERMITTED
*                                         NO, NON-ZERO VALUE OK
         ST    RANS,AVTTOTNC           STORE VALUE IN AVT        S21903
         BR    R1                       GO TO 'BACK',DO NEXT KEYWORD
*
COMWRTE  EQU   *
         BAL   RX,SCAN                 BRANCH TO FIND LAST       S21903
*                                        CHARACTER OF OPERAND    S21903
*
         CLC   YESCOM,0(RSTART)         IS OPERAND 'YES'
         BE    COMWRYES                GO SET BIT IN AVT TO      S21903
*                                        INDICATE COMWRTE        S21903
*                                        SPECIFIED               S21903
*
         CLC   YES0(L'YESCOM),D0(RSTART) IS OPERAND 'YES'?       S21903
         BE    COMWRYES                BRANCH IF YES             S21903
*
         CLC   NOCOM,0(RSTART)          IS OPERAND 'NO'
         BE    COMWRNO                 YES, GO SET BIT INDICATINGS21903
*                                        NO COMWRTE SPECIFIED    S21903
*
         CLC   NO0(L'NOCOM),D0(RSTART) IS OPERAND 'NO'?          S21903
         BNE   NOTNUM                   INVALID OPERAND COMWRTE
*
COMWRNO  EQU   *
         NI    AVTCWFL1,AVTEFF-AVTCOMWN COMWRTE=NO SPECIFIED
         BR    R1                       GO TO 'BACK'
*
COMWRYES EQU   *
         OI    AVTCWFL1,AVTCOMWN        COMWRTE=YES SPECIFIED
         BR    R1                       GO TO 'BACK'
*
TOPMSG   EQU   *
         BAL   RX,SCAN                 BRANCH TO FIND LAST       S21903
*                                        CHARACTER OF OPERAND    S21903
*
         CLC   YESCOM,0(RSTART)         IS OPERAND 'YES'
         BE    TOPYES                  GO SET BIT IN AVT         S21903
*                                        INDICATING TOPMSG       S21903
*                                        SPECIFIED               S21903
*
         CLC   YES0(L'YESCOM),D0(RSTART) IS OPERAND 'YES'?       S21903
         BE    TOPYES                   YES, GO SET BIT        @SA70222
*
         CLC   NOCOM,0(RSTART)          IS OPERAND 'NO'
         BE    TOPNO                   YES, GO SET BIT IN AVT    S21903
*                                        INDICATING NO TOPMSG    S21903
*                                        SPECIFIED               S21903
*
         CLC   NO0(L'NOCOM),D0(RSTART) IS OPERAND 'NO'?          S21903
         BNE   NOTNUM                  NO, INVALID OPERAND TOPMSGS21903
*
TOPNO    EQU   *
         OI    AVTBIT2,AVTTOPOL         TOPMSG=NO SPECIFIED
         BR    R1                       GO TO 'BACK'
*
TOPYES   EQU   *
         NI    AVTBIT2,XFF-AVTTOPOL     TOPMSG=YES, SPECIFIED    S21903
         BR    R1                       GO TO 'BACK'
*
VIRTUAL  EQU   *                                                 Y05331
         BAL   RX,SCAN                  BRANCH TO FIND LAST CHAR Y05331
*                                       OF OPERAND.              Y05331
*                                                                Y05331
         CLC   YESCOM,0(RSTART)         IS OPERAND 'YES' ?       Y05331
         BE    VIRTYES                  YES, GO SET BIT IN       Y05331
*                                       SECONDARY AVT INDICATING Y05331
*                                       VIRTUAL SPECIFIED        Y05331
         CLC   YES0(L'YESCOM),D0(RSTART) IS OPERAND 'YES' ?      Y05331
         BE    VIRTYES                  YES,GO SET BIT           Y05331
*                                                                Y05331
         CLC   NOCOM,0(RSTART)          IS OPERAND 'NO' ?        Y05331
         BC    8,VIRTNO                 YES,BRANCH               Y05331
         SPACE
         CLC   NO0(L'NOCOM),D0(RSTART)  IS OPERAND 'NO' ?        Y05331
         BC    8,VIRTNO                 YES,BRANCH               Y05331
         B     NOTNUM                   INVALID OPERAND,VIRTUAL  Y05331
         SPACE
VIRTYES  EQU   *                                                 Y05331
         L     RSTART,AVTSAVTP          POINTER TO SECONDARY AVT Y05331
         USING IEDNSVTD,RSTART                                   Y05331
         OI    SAVTDIAF,SAVTVIRT        TURN ON VIRTUAL          Y05331
*                                       ENVIRONMENT INDICATOR    Y05331
         B     ENDVIRT                  BRANCH                   Y05331
VIRTNO   EQU   *                                                 Y05331
         L     RSTART,AVTSAVTP          SECONDARY AVT POINTER    Y05331
         NI    SAVTDIAF,X7F             TURN OFF VM=YES BIT    @ZA07074
ENDVIRT  EQU   *                                                 Y05331
         NI    SAVTDIAF,XBF             TURN OFF VM PROMPT       Y05331
*                                       INDICATOR IF ON          Y05331
         BR    R1                       RETURN                   Y05331
XBF      EQU   X'BF'                                             Y05331
         DROP  RSTART                                            Y05331
         SPACE
STARTUP  EQU   *
         BAL   RX,SCAN                 BRANCH TO FIND LAST       S21903
*                                        CHARACTER OF OPERAND    S21903
*
         LR    RTEMP,RSTART
         NI    AVTBIT3,XF0              FORGET PREVIOUS S=REPLIES
         NI    AVTBIT2,AVTEFF-AVTEXTSC  RESET PREV S= REPLIES   SA51078
         NI    AVTCKELF,AVTEFF-AVTNQBCK RESET PREVIOUS REPLY   @OS77945
STA      EQU   *
         CLI   0(RSTART),C              IS COLDSTART REQUESTED
         BE    GOTC                       YES, COLDSTART
*                                         NO, GUESS AGAIN
         CLI   0(RSTART),W              IS WARMSTART REQUESTED
         BE    GOTW                       YES, WARMSTART
*                                         NO, GUESS AGAIN
         CLI   0(RSTART),I              IS INVITATION LIST REQUESTED
         BE    GOTI                       YES, INVITATION LIST REQ
*                                         NO, GUESS AGAIN
         CLI   0(RSTART),Y              IS NO CONTINUATION REQUESTED
         BE    GOTY                       YES, NO CONTINUATION
*                                         NO, OPERATOR BLEW IT
         CLI   0(RSTART),E              IS EXTENDED RESTART REQ SA51078
         BE    GOTE                     BRANCH IF YES           SA51078
         CLI   D0(RSTART),N             NO QBACK SCAN REQUESTED@G36XRNP
         BE    GOTN                     BRANCH IF YES          @G36XRNP
STRTERR  EQU   *                                                SA51078
         LR    RSTART,RTEMP             SET TO START OF OPERAND
         NI    AVTBIT3,XF0              ERROR,FORGET ALL S= REPLIES
         NI    AVTBIT2,AVTEFF-AVTEXTSC  RESET PREV S= REPLIES   SA51078
         NI    AVTCKELF,AVTEFF-AVTNQBCK RESET PREVIOUS REPLY   @OS77945
         B     NOTNUM                   FUSS AT INVALID OPERAND
*
GOTC     EQU   *
         TM    AVTBIT3,AVTSTAN          ALREADY SPECIFIED      @G36XRNP
         BO    STRTERR                  YES, TRY AGAIN         @G36XRNP
         OI    AVTBIT3,AVTSTAN+AVTSTACN  COLDSTART
         B     ENDSTA                  GO GET NEXT CHARACTER     S21903
*
GOTW     EQU   *
         TM    AVTBIT3,AVTSTAN          ALREADY SPECIFIED      @G36XRNP
         BO    STRTERR                  YES, TRY AGAIN         @G36XRNP
         OI    AVTBIT3,AVTSTAN          STARTUP
         NI    AVTBIT3,AVTSTAWN         WARMSTART
         B     ENDSTA                  GO GET NEXT CHARACTER     S21903
*
GOTI     EQU   *
         TM    AVTBIT3,AVTSTAIN         ALREADY SPECIFIED      @G36XRNP
         BO    STRTERR                  YES, TRY AGAIN         @G36XRNP
         OI    AVTBIT3,AVTSTAIN         INVITATION LIST
         B     ENDSTA                  GO GET NEXT CHARACTER     S21903
*
GOTY     EQU   *
         TM    AVTBIT3,AVTSTAYN         ALREADY SPECIFIED      @G36XRNP
         BO    STRTERR                  YES TRY AGAIN          @G36XRNP
         TM    AVTBIT2,AVTEXTSC         EXTENDED SCAN          @G36XRNP
         BO    STRTERR                  YES, PARMS CONFLICT    @G36XRNP
         TM    AVTCKELF,AVTNQBCK        NO QBACK SCAN          @G36XRNP
         BO    STRTERR                  YES, PARMS CONFLICT    @G36XRNP
         OI    AVTBIT3,AVTSTAYN         NO CONTINUATION
*
         B     ENDSTA                   CHECK FOR KEYWORD END   SA51078
*                                                               SA51078
GOTE     EQU   *                                                SA51078
         TM    AVTBIT2,AVTEXTSC         ALREADY SPECIFIED      @G36XRNP
         BO    STRTERR                  YES TRY AGAIN          @G36XRNP
         TM    AVTBIT3,AVTSTAYN         NO SCAN                @G36XRNP
         BO    STRTERR                  YES, PARMS CONFLICT    @G36XRNP
         TM    AVTCKELF,AVTNQBCK        NO QBACK SCAN          @G36XRNP
         BO    STRTERR                  YES, PARMS CONFLICT    @G36XRNP
         OI    AVTBIT2,AVTEXTSC         SET EXTENDED RESTART    SA51078
*                                                               SA51078
         B     ENDSTA                   GO GET NEXT CHARACTER  @G36XRNP
GOTN     EQU   *                                               @G36XRNP
         TM    AVTCKELF,AVTNQBCK        ALREADY SPECIFIED      @G36XRNP
         BO    STRTERR                  YES,TRY AGAIN          @G36XRNP
         TM    AVTBIT2,AVTEXTSC         EXTENDED SCAN          @G36XRNP
         BO    STRTERR                  YES, PARMS CONFLICT    @G36XRNP
         TM    AVTBIT3,AVTSTAYN         NO SCAN                @G36XRNP
         BO    STRTERR                  YES, PARMS CONFLICT    @G36XRNP
         OI    AVTCKELF,AVTNQBCK        SET NO QBACK SCAN      @G36XRNP
ENDSTA   EQU   *
         LA    RSTART,INC(,RSTART)      BUMP TO NEXT CHARACTER
         CR    RSTART,REND              WAS THAT THE LAST CHARACTER
         BNE   STA                      BRANCH IF NO            SA51078
         TM    AVTBIT3,AVTSTAN          WAS C OR W SPECIFIED    SA51078
         BZ    STRTERR                  BRANCH IF NO            SA51078
         BR    R1                       RETURN                  SA51078
         EJECT
* IF THERE IS NO SAVT THEN SUBAREA IS INVALID. GO TO SEND      @Y17XANG
* ERROR MSG AND REISSUE WTOR.                                  @Y17XANG
         SPACE
SUBAREA EQU    *                                               @Y17XANG
         TM    AVTSAVTF,AVTVTMCP        IS THERE AN SAVT?      @Y17XANG
         BZ    NOT3705                  BRANCH                 @Y17XANG
         SPACE
* CONVERT KEYBOARD OPERAND TO BINARY                           @Y17XANG
         SPACE
         BAL   R14,HALFNO               CONVERT CHAR TO BINARY.@Y17XANG
         SPACE
* IF THE SUBAREA ADDRESS EXCEEDS A SINGLE BYTE THEN GO PRINT   @Y17XANG
* INVALID OPERAND MESSAGE.                                     @Y17XANG
         SPACE
         LA    R14,255                  MAX ADDRESS IN BYTE    @Y17XANG
         CR    RANS,R14                 DOES IT EXCEED BYTE?   @Y17XANG
         BH    NOTNUM                   BRANCH IF SO.          @Y17XANG
         SPACE
* PLACE HOST SUBAREA INTO SAVT. RETURN TO CHECK OPERANDS.      @Y17XANG
         SPACE
         L     R14,AVTSAVTP             SAVT BASE              @Y17XANG
         USING IEDNSVTD,R14                                    @Y17XANG
         STC   RANS,SAVTSUBV            SAVE SUBAREA           @Y17XANG
         BR    R1                       GO TO'BACK'            @Y17XANG
MAXCLI   CLI   SAVTSUBA,0               COMPARE MAXSUB TO SUB  @Y17XANG
         DROP  R14
         EJECT
* IF THERE IS NO SAVT MAXSUBA IS INVALID - GO TO PRINT         @Y17XANG
* INVALID KEYWORD MESSAGE.                                     @Y17XANG
         SPACE
MAXSUBA  EQU   *                                               @Y17XANG
         TM    AVTSAVTF,AVTVTMCP        IS SAVT PRESENT?       @Y17XANG
         BZ    NOT3705                  BRANCH NO              @Y17XANG
         SPACE
* CONVERT MAX SUBAREA TO BINARY.                               @Y17XANG
         SPACE
         BAL   R14,HALFNO               CONVERT MAX TO BINARY  @Y17XANG
         SPACE
* IF MAX SUBAREA NOT GE 2 AND LE 255 GO PRINT INVALID OPERAND  @Y17XANG
* DIAGNOSTIC.                                                  @Y17XANG
         SPACE
         LA    R15,MINMAXA              MINIMUM MAX SUBAREA    @Y17XANG
         CR    RANS,R15                 MAX LT 2?              @Y17XANG
         BL    NOTNUM                   BRANCH YES TO DIAG     @Y17XANG
         LA    R15,MAXMAXA              MAXIMUM MAX SUBAREA    @Y17XANG
         CR    RANS,R15                 MAX GT 255?            @Y17XANG
         BH    NOTNUM                   BRANCH YES TO DIAG.    @Y17XANG
         SPACE
* SAVE MAX SUBAREA IN SAVT -SAVTSUBA- AND RETURN TO 'BACK'     @Y17XANG
         SPACE
         USING IEDNSVTD,R14                                    @Y17XANG
         L     R14,AVTSAVTP             SAVT ADDRESS           @Y17XANG
         STC   RANS,SAVTSUBA            SAVE MAX               @Y17XANG
         DROP  R14                                             @Y17XANG
         SPACE
         BR    R1                                              @Y17XANG
MINMAXA  EQU   2                        MIN MAX SUBAREA ADDR   @Y17XANG
MAXMAXA  EQU   255                      MAX MAX SUBAREA ADDR   @Y17XANG
         EJECT                                                 @Y17XANG
* IF NO SAVT SIBCOUNT IS INVALID KEY - GO PRINT INVALID KEY    @Y17XANG
* MESSAGE AND REISSUE WTOR.                                    @Y17XANG
         SPACE
SIBCOUNT EQU   *                                               @Y17XANG
         TM    AVTSAVTF,AVTVTMCP        IS THERE AN SAVT?      @Y17XANG
         BZ    NOT3705                  BRANCH NO TO DIAG.     @Y17XANG
         SPACE
* CONVERT SIBCOUNT TO BINARY.                                  @Y17XANG
         SPACE
         BAL   R14,HALFNO               CONVERT                @Y17XANG
         SPACE
* IF SIBCOUNT=0 GO PRINT INVALID OPERAND AND REISSUE WTOR.     @Y17XANG
         SPACE
         LTR   RANS,RANS                SIBCOUNT=0?            @Y17XANG
         BZ    NOTNUM                   BRANCH YES             @Y17XANG
         SPACE
* IF SNA AND SIBCOUNT < 4 ISSUE INVALID OPERAND AND REISSUE    @Y17XANG
* WTOR.                                                        @Y17XANG
         SPACE
         TM    AVTSAVTF,AVTSNA          SNA?                   @Y17XANG
         BZ    NOSNA                    BRANCH NO              @Y17XANG
         LA    R15,MINSIB               MINIMUM #SIBS WITH SNA @Y17XANG
         CR    RANS,R15                 SIB COUNT LT MIN?      @Y17XANG
         BL    NOTNUM                   BRANCH YES.            @Y17XANG
NOSNA    EQU   *                                               @Y17XANG
         SPACE
* SAVE SIB COUNT IN SAVT. RETURN TO 'BACK'.                    @Y17XANG
         SPACE
         L     R14,AVTSAVTP             SAVT BASE              @Y17XANG
         USING IEDNSVTD,R14                                    @Y17XANG
         STH   RANS,SAVTSIBC            SAVE SIB COUNT.        @Y17XANG
         BR    R1                       GO TO'BACK'            @Y17XANG
         DROP  R14                                             @Y17XANG
MINSIB   EQU   4                        MIN SNA SIB COUNT -    @Y17XANG
*                                           .NCP
*                                           .PU-SSCP
*                                           .LU-SSCP
*                                           .LU-LU
         EJECT
***************************************************************@G36XRNP
*                                                              @G36XRNP
*        APPLICATION PROGRAM WORKAREA SIZE PROCESSING          @G36XRNP
*                                                              @G36XRNP
***************************************************************@G36XRNP
APWAS    EQU   *                                               @G36XRNP
         BAL   R14,HALFNO               CONVERT APWAS OPERAND  @G36XRNP
         CH    RANS,H4024              IS THIS A 4024 BYTE AREA@G36XRNP
         BE    APWASOK                  YES, BRANCH            @G36XRNP
         BH    LARGEAIB                 BRANCH IF AIB OVER 4K  @G36XRNP
         CH    RANS,H1976              IS THIS A 1976 BYTE AREA@G36XRNP
         BE    APWASOK                  YES, BRANCH            @G36XRNP
         CH    RANS,H952               IS THIS A 952 BYTE AREA @G36XRNP
         BE    APWASOK                  YES, BRANCH            @G36XRNP
         CH    RANS,H440               IS THIS A 440 BYTE AREA @G36XRNP
         BE    APWASOK                  YES, BRANCH            @G36XRNP
         CH    RANS,H184               IS THIS A I84 BYTE QREA @G36XRNP
         BNE   NOTNUM                   NO, BRANCH             @G36XRNP
         B     APWASOK                  YES,BRANCH             @G36XRNP
LARGEAIB EQU   *                                               @G36XRNP
         CH    RANS,MAXAIB              AIB IN RANGE ALLOWED   @G36XRNP
         BH    NOTNUM                   NO, BRANCH             @G36XRNP
APWASOK  EQU   *                                               @G36XRNP
         STH   RANS,AVTEW               SAVE SIZE IN THE AVT   @G36XRNP
         BR    R1                       TEST NEXT KEYWORD      @G36XRNP
         EJECT
***************************************************************@G36XRNP
*                                                              @G36XRNP
*         AUTHORIZATION OPERAND PROCESSING                     @G36XRNP
*                                                              @G36XRNP
***************************************************************@G36XRNP
AUTHA    EQU   *                                               @G36XRNP
         BAL   RX,SCAN                  SCAN FOR VALID OPTION  @G36XRNP
         CLC   YESCOM,D0(RSTART)        IS OPERAND='YES'       @G36XRNP
         BE    AUTHAYES                 YES, GO SET BIT IN AVT @G36XRNP
*                                      INDICATING AUTHORIZATION@G36XRNP
*                                       SPECIFIED              @G36XRNP
         CLC   YES0(L'YESCOM),D0(RSTART) IS OPERAND='YES'      @G36XRNP
         BE    AUTHAYES                 YES, GO SET BIT IN AVT @G36XRNP
*                                      INDICATING AUTHORIZATION@G36XRNP
*                                       SPECIFIED              @G36XRNP
         CLC   NOCOM,D0(RSTART)         IS OPERAND ='NO'       @G36XRNP
         BE    AUTHANO                  YES, GO TURN OFF BIT IN@G36XRNP
*                                       AVT INDICATING         @G36XRNP
*                                       AUTHORIZATION SPECIFIED@G36XRNP
         CLC   NO0(L'NOCOM),D0(RSTART)  IS OPERAND='NO'        @G36XRNP
         BNE   NOTNUM                   NO, INVALID OPERAND    @G36XRNP
AUTHANO  EQU   *                                               @G36XRNP
         NI    AVTEW+TWO,NOAUTRQD       TURN THE AUTHORIZATION @G36XRNP
*                                       REQUIRED BIT OFF       @G36XRNP
         BR    R1                       CHECK NEXT OPERAND     @G36XRNP
AUTHAYES EQU   *                                               @G36XRNP
         OI    AVTEW+TWO,AUTHBIT        TURN ON AUTHORIZATION  @G36XRNP
*                                       REQUIRED BIT           @G36XRNP
         BR    R1                       CHECK NEXT OPERAND     @G36XRNP
         EJECT
* SET UP OPERAND CONVERSION.                                   @Y17XANG
         SPACE
OPMASK   EQU   *                                               @Y17XANG
         LA    REND,1(RSTART)           ADDRESS 1ST CHAR AFTER @Y17XANG
*                                      '('.                    @Y17XANG
         L     RANS,AVTOPMSK            MASK TABLE BASE        @Y17XANG
         LA    REOT,L'MSKMASK           MASK LENGTH            @Y17XANG
         MH    REOT,MSKNUM-IEDMSK(RANS) * # MASKS = LENGTH OF  @Y17XANG
*                                       MASKS.                 @Y17XANG
         LA    REOT,MSKMASK-IEDMSK-L'MSKMASK(REOT,RANS)        @Y17XANG
*                                       ADDRESS OF LAST MASK   @Y17XANG
         LR    RDLIM,RSTART             ADDRESS OF '('         @Y17XANG
         LA    RANS,MSKMASK-IEDMSK(RANS)    ADDRESS 1ST MASK.  @Y17XANG
         USING MSKMASK,RANS                                    @Y17XANG
         SPACE
* FIRST CHAR A '('? IF NOT GO PRINT INVALID OPERAND DIAG AND   @Y17XANG
* REISSUE WTOR.                                                @Y17XANG
         SPACE
         CLI   0(RSTART),C'('           '(' ?                  @Y17XANG
         BNE   NOTNUM                   BRANCH NO TO DIAG      @Y17XANG
         MVI   0(RDLIM),C','            INSURE 1ST SYNTAX CHK  @Y17XANG
         SPACE
* SET UP SCAN INCREMENT TO ADVANCE 1 CHAR IN CASE ',' INDICATES@Y17XANG
* MASK TO DEFAULT.                                             @Y17XANG
         SPACE
MSKLOOP  EQU   *                                               @Y17XANG
         LA    RX,1                     SCAN POINTER INCREMENT @Y17XANG
         SPACE
* IF NO MORE MASKS BRANCH TO ADVANCE TO NEXT SYNTAX DELIMITER  @Y17XANG
* AND EXIT.                                                    @Y17XANG
         SPACE
         CLI   0(REND),C')'             ANY MORE MASKS?        @Y17XANG
         BE    NXTMSK                   BRANCH NO              @Y17XANG
         SPACE
* IF LAST DELIMITER NOT A COMMA GO PRINT OPERAND ERROR MESSAGE @Y17XANG
* AND REQUEST ANOTHER OPERATOR INPUT.                          @Y17XANG
         SPACE
         CLI   0(RDLIM),C','            COMMA?                 @Y17XANG
         BNE   NOTNUM                                          @Y17XANG
         SPACE
* IF NEXT CHAR A ',' INDICATING DEFAULT GO ADVANCE TO NEXT     @Y17XANG
* MASK.                                                        @Y17XANG
         SPACE
         CLI   0(REND),C','             ',' ?                  @Y17XANG
         BE    NXTMSK                   BRANCH YES TO ADVANCE. @Y17XANG
         SPACE
* TRANSLATE NEXT 4 CHARS.  INVALID CHARS WILL TRANSLATE TO     @Y17XANG
* X'00'.  VALID HEX CHAR, N, WILL TRANSLATE TO X'FN'.          @Y17XANG
         SPACE
         TR    0(4,REND),TRANMSK        TRANSLATE              @Y17XANG
         SPACE
* IF ANY INVALID CHARS GO ISSUE INVALID OPERAND MSG AND WTOR.  @Y17XANG
         SPACE
         MVC   AVTDOUBL(L'MSKMASK*2),0(REND) COPY TRANS CHARS  @Y17XANG
         NC    AVTDOUBL(L'MSKMASK*2),CLRNUM CLEAR NUMERICS     @Y17XANG
         XC    AVTDOUBL(L'MSKMASK*2),CLRNUM ANY INVALID CHARS? @Y17XANG
*                                      (RESULT OF XC WILL BE   @Y17XANG
*                                       ZERO IF NOT SINCE ALL  @Y17XANG
*                                       VALID HEX NO'S WERE    @Y17XANG
*                                       X'F0' AFTER THE NC)    @Y17XANG
         BNZ   NOTNUM                   BRANCH ANY INVALID     @Y17XANG
         SPACE
* PLACE HEX CHARS INTO CURRENT MASK TABLE ENTRY.               @Y17XANG
         SPACE
         PACK  AVTDOUBL(L'MSKMASK+1),0(L'MSKMASK*2,REND)       @Y17XANG
*                                       REMOVE ZONES FROM HEX  @Y17XANG
*                                       DIGITS.                @Y17XANG
         MVO   AVTDOUBL(L'MSKMASK+2),AVTDOUBL(L'MSKMASK+1)     @Y17XANG
*                                       SHIFT HEX DIGITS LEFT  @Y17XANG
*                                       4 BITS TO ALIGN IN     @Y17XANG
*                                       2 BYTES                @Y17XANG
         MVC   0(L'MSKMASK,RANS),AVTDOUBL+1 PLACE MASK IN TBL  @Y17XANG
         SPACE
* SET SCAN INCREMENT TO ADVANCE TO NEXT MASK (5 CHARS FWD).    @Y17XANG
         SPACE
         LA    RX,L'MSKMASK*2+1         INCREMENT TO NEXT MASK @Y17XANG
         SPACE
* ADVANCE TO NEXT MASK GROUP IN TABLE AND KEYBOARD INPUT.      @Y17XANG
         SPACE
NXTMSK   EQU   *                                               @Y17XANG
         LA    RDLIM,0(RX,RDLIM)        NEXT INPUT MASK ADDRESS@Y17XANG
*                                       MINUS ONE=DELIMITER    @Y17XANG
*                                       ADDRESS(RDLIM=REND-1)  @Y17XANG
         LA    REND,0(RX,REND)          INPUT MASK ADDRESS     @Y17XANG
         LA    RANS,MSKLEN(RANS)        NEXT MASK TABLE ENTRY  @Y17XANG
         SPACE
* IF THERE ARE MORE INPUT MASKS AND MASK TABLE NOT EXCEEDED    @Y17XANG
* GO TRANSLATE THE NEXT INPUT AND PLACE INTO TABLE.            @Y17XANG
         SPACE
         CLI   0(RDLIM),C')'            IF DELIMITER IS ')'    @Y17XANG
*                                       THERE ARE NO MORE      @Y17XANG
*                                       INPUT MASKS.           @Y17XANG
         BE    NOMOPARM                 BRANCH IF ')'          @Y17XANG
         CR    RANS,REOT                END OF MASK TABLE?     @Y17XANG
         BNH   MSKLOOP                  BRANCH NO TO PROCESS   @Y17XANG
*                                       NEXT INPUT MASK        @Y17XANG
         SPACE
* MORE INPUT PARMS BUT END OF TABLE NOT REACHED GO PRINT       @Y17XANG
* OPERAND ERROR MESSAGE AND REISSUE DIAGNOSTIC.                @Y17XANG
         SPACE
         B     NOTNUM                   BRANCH FOR DIAG        @Y17XANG
         SPACE
* RETURN TO PROCESS NEXT KEYWORD.                              @Y17XANG
         SPACE
NOMOPARM EQU   *                                               @Y17XANG
         BR    R1                       GO TO'BACK             @Y17XANG
         EJECT                                                 @Y17XANG
*
* RSTART POINTS TO FIRST OF OPERAND.
* RESULT IS IN RANS.
*
HALFNO   EQU   *
         BAL   RX,SCAN                 BRANCH TO FIND LAST       S21903
*                                        CHARACTER OF OPERAND    SI1903
*
         BAL   RX,NUMCONV              GO PERFORM VALIDITY CHECK S21903
*                                        FOR PROPER NUMERICAL    S21903
*                                        CHARACTERS              S21903
*
         C     RANS,K64                 IS RESULT GT 64 K
         BH    NOTNUM                     YES, ILLEGAL OPERAND
*                                         NO,RESULT IS OK
         BR    R14                      RETURN TO CALLER
*
* NUMERICAL CONVERT ROUTINE -
* GIVEN A NUMERICAL OPERAND FIELD, DO VALIDITY CHECKING FOR PROPER
* NUMERICAL CHARACTERS.  IF OK, CONVERT NUMBER TO BINARY.
*
*        INPUT - RSTART HAS ADDRESS OF FIRST CHARACTER OF OPERAND,
*              REND HAS ADDRESS OF NEXT CHARACTER BEYOND OPERAND.
*        OUTPUT - RANS HAS POSITIVE BINARY RESULT.  IF NOT PROPER
*              NUMERICAL CHARACTERS, CONTROL IS GIVEN TO INVALID
*              OPERAND ROUTINE AT 'NOTNUM'.
*
NUMCONV  EQU   *
         LR    RCNT,RTEMP               GET SIZE OF OPERAND
         CH    RCNT,AVTHA7              IS OPERAND OVER 7 CHARS
         BH    NOTNUM                     YES, TOO BIG
*                                         NO, SO FAR SO GOOD
         LR    RINDEX,RSTART            GET ADDR OF FIRST CHARACTER
*
CONVLOOP EQU   *
         TM    0(RINDEX),XF0            IS CHARACTER NUMERICAL
         BNO   NOTNUM                     NO, ILLEGAL OPERAND
*                                         YES, OK CHARACTER
         LA    RINDEX,INC(,RINDEX)      BUMP TO NEXT CHARACTER
         BCT   RCNT,CONVLOOP            CHECK NEXT CHAR, IF ANY
*
         LR    RCNT,REND
         SR    RCNT,RSTART              GET SIZE OF OPERAND AGAIN
         BCTR  RCNT,0                   ADJUST FOR EX INSTR.
         EX    RCNT,PACK               GO PACK THE NUMBER        S21903
         MVN   AVTDOUBL+L'AVTDOUBL-INC(INC),P GET PROPER PLUS SIGN
         CVB   RANS,AVTDOUBL            GET BINARY RESULT
         BR    RX                       RETURN TO MAIN ROUTINE
*
PACK     PACK  AVTDOUBL,0(0,RSTART)     EXECUTED INSTRUCTION
MVCKEY   MVC   MSGOP(0),0(RSTART)       MOVES KEYWORD TO MSG
*
NOTNUM   EQU   *
         MVI   MSGOP,AVTEBLNK           CLEAR MESSAGE
         MVC   MSGOP+INC(LKEYWORD-INC),MSGOP AREA TO BLANKS
         SH    RSTART,KEYL              BACK UP TO KEYWORD
         LH    RTEMP,KEYL
         BCTR  RTEMP,D0                DECREMENT COUNT BY 1      S21903
         EX    RTEMP,MVCKEY             GET KEYWORD TO MSG
         LA    R1,IED006A               INVALID OPERAND MSG      S21101
         B     WTOR                    GO ISSUE INVALID OPERAND  S21903
*                                        MESSAGE                 S21903
*
* SCAN ROUTINE -
* GIVEN A STARTING ADDRESS OF AN OPERAND, LOOK FOR THE LAST CHARACTER
* OF THE OPERAND BY SCANNING FOR EITHER A COMMA OR FOR X'00' AS
* ENDING THE OPERAND.
*
*        INPUT - RSTART HAS THE ADDRESS OF THE FIRST CHARACTER OF
*              THE OPERAND.
*        OUTPUT - REND HAS THE ADDRESS OF THE FIRST CHARACTER BEYOND
*              THE OPERAND.  RSTART IS UNCHANGED.
*              RTEMP HAS SIZE OF OPERAND.
*
SCAN     EQU   *
         LR    REND,RSTART              INITIALIZE ENDING REG
SCANLOOP EQU   *
         CLI   0(REND),COMMA            IS NEXT CHAR A COMMA
         BE    ENDSCAN                    YES, CHECK LENGTH
*                                         NO, KEEP LOOKING
         CLI   0(REND),AVTEZERO         IS THAT END OF REPLY
         BNE   BUMP                       NO, KEEP LOOKING
*                                         YES, RETURN TO CALLER
ENDSCAN  EQU   *
         LR    RTEMP,REND
         SR    RTEMP,RSTART             GET SIZE OF OPERAND
*                                       SIZE MUST BE AT LEAST ONE
         BZ    NOTNUM                   IF NOT, ERROR
*                                       IF SO, OK
         BR    RX                       RETURN TO CALLER
*
BUMP     EQU   *
         LA    REND,INC(,REND)          BUMP ENDING REG TO NEXT CHAR
         B     SCANLOOP                 TRY AGAIN
         EJECT
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *S21101
*                                                                S21101
*                       WRITE - TO - OPERATORS                   S21101
*                                                                S21101
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
AUTHMSG  EQU   *                                               @G36XRNP
         WTO   MF=(E,IED155I)           WRITE ERROR MSG        @G36XRNP
         LA    R15,AVTECD28             SET ERROR CODE         @G36XRNP
         B     EXIT                     RETURN TO IEDQOA       @G36XRNP
IED155I  WTO   'IED155I TCAM START REJECTED - TCAM MCP IS UNAUTHORIZED'*
               ,ROUTCDE=(2,11),DESC=6,MF=L                     @G36XRNP
IED001I  WTO   'IED001I TCAM JOB JOBNAMEX, PROCNAME, STEPNAME ADDRESS OF
               F AVT          ',ROUTCDE=(2,11),DESC=6,MF=L       S21101
JOBID    EQU   IED001I+21               JOBID                    S22024
ADAVT    EQU   IED001I+65               ADAVT                    S22024
         ENTRY IED001I                                           S21101
*                                                                S21101
IED014I  WTO   'IED014I TCAM ALREADY IN SYSTEM',                 S21101*
               ROUTCDE=(2,11),DESC=6,MF=L                        S21101
         ENTRY IED014I                                           S21101
*                                                                S21101
IED002A  WTOR  'IED002A SPECIFY TCAM PARAMETERS',                S21101*
               REPLY,L'REPLY,ECB,ROUTCDE=1,DESC=2,MF=L         @Y17XANG
         ENTRY IED002A                                           S21101
*                                                                S21101
IED003A  WTOR  'IED003A INVALID KEYWORD     ',                   S21101*
               REPLY,L'REPLY,ECB,ROUTCDE=1,DESC=2,MF=L         @Y17XANG
MSGKEY   EQU   IED003A+36               MSGKEY                   S22024
         ENTRY IED003A                                           S21101
*                                                                S21101
IED004A  WTOR  'IED004A REQUIRED PARAMETER MISSING. SPECIFY         ', *
               REPLY,L'REPLY,ECB,ROUTCDE=1,DESC=2,MF=L         @Y17XANG
MISSKEY  EQU   IED004A+56               MISSKEY                  S22024
         ENTRY IED004A                                           S21101
*                                                                S21101
IED005A  WTOR  'IED005A MSUNITS(M) SPECIFICATION NOT PERMITTED.  CONTIN*
               UE RESPONSE',REPLY,L'REPLY,ECB,ROUTCDE=1,       @Y17XANG*
               DESC=2,MF=L
         ENTRY IED005A                                           S21101
*                                                                S21101
IED006A  WTOR  'IED006A INVALID OPERAND ON KEYWORD.  RESPECIFY         *
               ',REPLY,L'REPLY,ECB,ROUTCDE=1,DESC=2,MF=L       @Y17XANG
MSGOP    EQU   IED006A+59               MSSOP                    S22024
         ENTRY IED006A                                           S21101
IED527A  WTOR  'IED527A HOST SUBAREA EXCEEDS MAXIMUM. SPECIFY NEW SUBAR*
               EA OR MAXSUBA',REPLY,L'REPLY,ECB,ROUTCDE=1,     @YM06974*
               DESC=2,MF=L                                     @YM06974
         ENTRY IED527A                                         @Y17XANG
*                                                                S21101
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *S21101
*                                                                S21101
CHTABLE  DS    0F
         DC    X'00'                    00
         DC    C'.'                     01
         DC    C'.'                     02
         DC    C'.'                     03
         DC    C'.'                     04
         DC    C'.'                     05
         DC    C'.'                     06
         DC    C'.'                     07
         DC    C'.'                     08
         DC    C'.'                     09
         DC    C'.'                     0A
         DC    C'.'                     0B
         DC    C'.'                     0C
         DC    C'.'                     0D
         DC    C'.'                     0E
         DC    C'.'                     0F
         DC    C'.'                     10
         DC    C'.'                     11
         DC    C'.'                     12
         DC    C'.'                     13
         DC    C'.'                     14
         DC    C'.'                     15
         DC    C'.'                     16
         DC    C'.'                     17
         DC    C'.'                     18
         DC    C'.'                     19
         DC    C'.'                     1A
         DC    C'.'                     1B
         DC    C'.'                     1C
         DC    C'.'                     1D
         DC    C'.'                     1E
         DC    C'.'                     1F
         DC    C'.'                     20
         DC    C'.'                     21
         DC    C'.'                     22
         DC    C'.'                     23
         DC    C'.'                     24
         DC    C'.'                     25
         DC    C'.'                     26
         DC    C'.'                     27
         DC    C'.'                     28
         DC    C'.'                     29
         DC    C'.'                     2A
         DC    C'.'                     2B
         DC    C'.'                     2C
         DC    C'.'                     2D
         DC    C'.'                     2E
         DC    C'.'                     2F
         DC    C'.'                     30
         DC    C'.'                     31
         DC    C'.'                     32
         DC    C'.'                     33
         DC    C'.'                     34
         DC    C'.'                     35
         DC    C'.'                     36
         DC    C'.'                     37
         DC    C'.'                     38
         DC    C'.'                     39
         DC    C'.'                     3A
         DC    C'.'                     3B
         DC    C'.'                     3C
         DC    C'.'                     3D
         DC    C'.'                     3E
         DC    C'.'                     3F
* START OF SECOND QUARTER OF TABLE
         DC    C' '                     40
         DC    C'.'                     41
         DC    C'.'                     42
         DC    C'.'                     43
         DC    C'.'                     44
         DC    C'.'                     45
         DC    C'.'                     46
         DC    C'.'                     47
         DC    C'.'                     48
         DC    C'.'                     49
         DC    C'.'                     4A
         DC    X'4B'                    4B
         DC    X'4C'                    4C
         DC    X'4D'                    4D
         DC    X'4E'                    4E
         DC    C','                     4F CHANGE 'BAR' TO 'COMMA'
         DC    X'50'                    50
         DC    C'.'                     51
         DC    C'.'                     52
         DC    C'.'                     53
         DC    C'.'                     54
         DC    C'.'                     55
         DC    C'.'                     56
         DC    C'.'                     57
         DC    C'.'                     58
         DC    C'.'                     59
         DC    C'.'                     5A
         DC    C'$'                     5B
         DC    C'*'                     5C
         DC    C')'                     5D
         DC    C';'                     5E
         DC    C'^'                     5F
         DC    C'-'                     60
         DC    C'/'                     61
         DC    C'.'                     62
         DC    C'.'                     63
         DC    C'.'                     64
         DC    C'.'                     65
         DC    C'.'                     66
         DC    C'.'                     67
         DC    C'.'                     68
         DC    C'.'                     69
         DC    C'.'                     6A
         DC    C','                     6B
         DC    X'6C'                    6C
         DC    X'6D'                    6D
         DC    C'>'                     6E
         DC    C'?'                     6F
         DC    C'.'                     70
         DC    C'.'                     71
         DC    C'.'                     72
         DC    C'.'                     73
         DC    C'.'                     74
         DC    C'.'                     75
         DC    C'.'                     76
         DC    C'.'                     77
         DC    C'.'                     78
         DC    C'.'                     79
         DC    C':'                     7A
         DC    C'#'                     7B
         DC    X'7C'                    7C
         DC    C''''                    7D
         DC    C'='                     7E
         DC    C'"'                     7F
* START OF THIRD QUARTER OF TABLE
         DC    C'.'                     80
         DC    C'A'                     81
         DC    C'B'                     82
         DC    C'C'                     83
         DC    C'D'                     84
         DC    C'E'                     85
         DC    C'F'                     86
         DC    C'G'                     87
         DC    C'H'                     88
         DC    C'I'                     89
         DC    C'.'                     8A
         DC    C'.'                     8B
         DC    C'.'                     8C
         DC    C'.'                     8D
         DC    C'.'                     8E
         DC    C'.'                     8F
         DC    C'.'                     90
         DC    C'J'                     91
         DC    C'K'                     92
         DC    C'L'                     93
         DC    C'M'                     94
         DC    C'N'                     95
         DC    C'O'                     96
         DC    C'P'                     97
         DC    C'Q'                     98
         DC    C'R'                     99
         DC    C'.'                     9A
         DC    C'.'                     9B
         DC    C'.'                     9C
         DC    C'.'                     9D
         DC    C'.'                     9E
         DC    C'.'                     9F
         DC    C'.'                     A0
         DC    C'.'                     A1
         DC    C'S'                     A2
         DC    C'T'                     A3
         DC    C'U'                     A4
         DC    C'V'                     A5
         DC    C'W'                     A6
         DC    C'X'                     A7
         DC    C'Y'                     A8
         DC    C'Z'                     A9
         DC    C'.'                     AA
         DC    C'.'                     AB
         DC    C'.'                     AC
         DC    C'.'                     AD
         DC    C'.'                     AE
         DC    C'.'                     AF
         DC    C'.'                     B0
         DC    C'.'                     B1
         DC    C'.'                     B2
         DC    C'.'                     B3
         DC    C'.'                     B4
         DC    C'.'                     B5
         DC    C'.'                     B6
         DC    C'.'                     B7
         DC    C'.'                     B8
         DC    C'.'                     B9
         DC    C'.'                     BA
         DC    C'.'                     BB
         DC    C'.'                     BC
         DC    C'.'                     BD
         DC    C'.'                     BE
         DC    C'.'                     BF
* START OF LAST QUARTER OF TABLE
         DC    C'.'                     C0
         DC    C'A'                     C1
         DC    C'B'                     C2
         DC    C'C'                     C3
         DC    C'D'                     C4
         DC    C'E'                     C5
         DC    C'F'                     C6
         DC    C'G'                     C7
         DC    C'H'                     C8
         DC    C'I'                     C9
         DC    C'.'                     CA
         DC    C'.'                     CB
         DC    C'.'                     CC
         DC    C'.'                     CD
         DC    C'.'                     CE
         DC    C'.'                     CF
         DC    C'.'                     D0
         DC    C'J'                     D1
         DC    C'K'                     D2
         DC    C'L'                     D3
         DC    C'M'                     D4
         DC    C'N'                     D5
         DC    C'O'                     D6
         DC    C'P'                     D7
         DC    C'Q'                     D8
         DC    C'R'                     D9
         DC    C'.'                     DA
         DC    C'.'                     DB
         DC    C'.'                     DC
         DC    C'.'                     DD
         DC    C'.'                     DE
         DC    C'.'                     DF
         DC    C'.'                     E0
         DC    C'.'                     E1
         DC    C'S'                     E2
         DC    C'T'                     E3
         DC    C'U'                     E4
         DC    C'V'                     E5
         DC    C'W'                     E6
         DC    C'X'                     E7
         DC    C'Y'                     E8
         DC    C'Z'                     E9
         DC    C'.'                     EA
         DC    C'.'                     EB
         DC    C'.'                     EC
         DC    C'.'                     ED
         DC    C'.'                     EE
         DC    C'.'                     EF
         DC    C'0'                     F0
         DC    C'1'                     F1
         DC    C'2'                     F2
         DC    C'3'                     F3
         DC    C'4'                     F4
         DC    C'5'                     F5
         DC    C'6'                     F6
         DC    C'7'                     F7
         DC    C'8'                     F8
         DC    C'9'                     F9
         DC    C'.'                     FA
         DC    C'.'                     FB
         DC    C'.'                     FC
         DC    C'.'                     FD
         DC    C'.'                     FE
         DC    C'.'                     FF
         ORG   *-239                   RESET LOCATION COUNTER    S21903
TRTABLE  DS    239C                    TRANSLATE                 S21903
         DC    C' 0123456789ABCDEF'      TABLE                   S21903
         SPACE 1
*        MISCELLANEOUS CONSTANTS.
         SPACE 1
FLAG     DC    X'00'                   FLAG BYTE                 S21903
L255     DC    H'255'                  CONSTANT VALUE            S21903
KEYL     DC    H'0'                     LENGTH OF KEYWORD
L75      DC    H'75'                    MAX CPRCDS
K64      DC    F'65535'                DECIMAL EQUIVALENT OF 64K S21903
ECB      DC    F'0'                     ECB FOR WTOR'S WAIT      S21101
REPLY    DC    XL55'00'                 RESPONSE AREA          @Y17XANG
H100     DC    H'100'                   MAX VALUE OF 'MSMAX'
H30      DC    H'30'                   CONSTANT VALUE            S21903
MAXCPVL  DC    F'43199'                 MAXIMUM CPINTVL         SA63008
ERASE    DC    C'0 '                    SPECIFIED TO ERASE 8 CHARS
L56      DC    H'56'                    DEFAULT FOR OLTEST     @Y17XANU
TRACEMIN DC    H'20'                    MIN TRACE VALUE        @G36XRNP
MAXAIB   DC    H'32695'                 MAX AIB SIZE           @G36XRNP
H4024    DC    H'4024'                  4024 BYTE AIB SIZE     @G36XRNP
H1976    DC    H'1976'                  1976 BYTE AIB SIZE     @G36XRNP
H952     DC    H'952'                   952 BYTE AIB SIZE      @G36XRNP
H440     DC    H'440'                   440 BYTE AIB SIZE      @G36XRNP
H184     DC    H'184'                   184 BYTE AIB SIZE      @G36XRNP
DLQDEF   DC    2F'0'                    DEAD LETTER Q DEFAULT VALUE
PASWDDEF DC    CL8' '                   PASSWORD DEFAULT
CTLCHDEF DC    8X'FF'                   CONTROL DEFAULT
DOUBXDEF EQU   DLQDEF                   PRIMARY DEFAULT
YESCOM   DC    C'YES,'                  COMWRTE OPERAND COMPARAND
YES0     DC    C'YES',X'00'             COMWRTE OPERAND COMPARAND
NOCOM    DC    C'NO,'                   COMWRTE OPERAND COMPARAND
NO0      DC    C'NO',X'00'              COMWRTE OPERAND COMPARAND
P        DC    PL1'0'                  PACKED DECIMAL VALUE FOR  S21903
*                                        ZERO                    S21903
OPTABLE  EQU   *                                                 S21101
         DC    C'B='                    LNUNITS   00             S22024
         DC    C'C='                    CIB       02             S22024
DISKC    DC    C'D='                    CPB       04             S22024
         DC    C'I='                    INTVAL    06             S22024
         DC    C'K='                    KEYLEN    08             S22024
         DC    C'L='                    CONTROL   10             S22024
COREM    DC    C'M='                    MSUNITS   12             S22024
         DC    C'N='                    RESTART   14             S22024
         DC    C'P='                    PRIMARY   16             S22024
         DC    C'R='                    CKREQS    18             S22024
         DC    C'S='                    STARTUP   20             S22024
         DC    C'T='                    TRACE     22             S22024
         DC    C'A='                    DTRACE    24             S22024
         DC    C'V='                    CPINTVL   26             S22024
         DC    C'W='                    PASSWRD   28             S22024
         DC    C'Q='                    DLQ       30             S22024
         DC    C'E='                    CPRCDS    32             S22024
         DC    C'F='                    CROSSRF   34             S22024
         DC    C'G='                    COMWRTE   36             S22024
         DC    C'H='                    TOPMSG    38             S22024
         DC    C'O='                    OLTEST    40             S22024
COREX    DC    C'X='                    MSMAX     42             S22024
COREY    DC    C'Y='                    MSMIN     44             S22024
         DC    C'Z='                    VIRTUAL   46             Y05331
         DC    X'0000'                  END OF TXT48
         DC    C'U',X'00'               EOF       50
*                                       PLCBNO    52             X03039
*                                       TTRACE    54
*                                       BTRACE    54           @Y17XANG
*                                       BRACKET   56           @Y17XANG
*                                       MAXSUBA   58           @Y17XANG
*                                       OPMASK    60           @Y17XANG
*                                       SUBAREA   62           @Y17XANG
*                                       SIBCNT    64           @Y17XANG
*                                       APWAS     66           @G36XRNP
*                                       AUTHA     68           @G36XRNP
ENDTAB   EQU   *                                                 S21101
*                                                                S21101
OPTABLE2 EQU   *                                                 S22024
*                                                                S22024
*   TABLE ENTRY FORMAT -                                         S22024
*      BYTE 1:  KEYWORD LENGTH - 1                               S22024
*      BYTE 2:  (INDEX INTO BRANCH TABLE) / 2                    S22024
*      BYTE 3:  KEYWORD IN EBCDIC (VARIABLE LENGTH)              S22024
*                                                                S22024
*   TWO CHARACTER ABREVIATIONS                                   S22024
         DC    AL1(2),AL1(46)                                  @ZA07074
XVM      DC    CL3'VM='                                        @ZA07074
         DC    AL1(2),AL1(52),CL3'PL=' .PLCBNO                   X03039
         DC    AL1(2),AL1(54),CL3'TT='  TTRACE                   X03039
XBT      DC    AL1(2),AL1(54),CL3'BT='  BTRACE                 @Y17XANG
         DC    AL1(2),AL1(56),CL3'BR='  BRACKET                @Y17XANG
XMA      DC    AL1(2),AL1(58),CL3'MA='  MAXSUBA                @Y17XANG
XOP      DC    AL1(2),AL1(60),CL3'OP='  OPMASK                 @Y17XANG
XSA      DC    AL1(2),AL1(62),CL3'SA='  SUBAREA                @Y17XANG
XSB      DC    AL1(2),AL1(64),CL3'SB='  SIBCOUNT               @Y17XANG
XWA      DC    AL1(2),AL1(66),CL3'WA='  APWAS                  @G36XRNP
XAU      DC    AL1(2),AL1(68),CL3'AU='  AUTHA                  @G36XRNP
*   FULL LENGTH KEYWORDS                                       @Y17XANG
         DC    AL1(7),AL1(00)           LNUNITS                  S22024
XLNUNITS DC    CL8'LNUNITS='            LNUNITS                  S22024
         DC    AL1(3),AL1(02),CL4'CIB=' CIB                      S22024
         DC    AL1(3),AL1(04)           CPB                      S22024
XCPB     DC    CL4'CPB='                CPB                      S22024
         DC    AL1(6),AL1(06),CL7'INTVAL=' INTVAL                S22024
         DC    AL1(6),AL1(08),CL7'UNITSZ=' UNITSZ                S22024
         DC    AL1(6),AL1(08)           KEYLEN                   S22024
XKEYLEN  DC    CL7'KEYLEN='             KEYLEN                   S22024
         DC    AL1(7),AL1(10),CL8'CONTROL=' CONTROL              S22024
         DC    AL1(7),AL1(12)           MSUNITS                  S22024
XMSUNITS DC    CL8'MSUNITS='            MSUNITS                  S22024
         DC    AL1(7),AL1(14),CL8'RESTART=' RESTART              S22024
         DC    AL1(7),AL1(16),CL8'PRIMARY=' PRIMARY              S22024
         DC    AL1(6),AL1(18),CL7'CKREQS=' CKREQS                S22024
         DC    AL1(7),AL1(20)           STARTUP                  S22024
XSTARTUP DC    CL8'STARTUP='            STARTUP                  S22024
         DC    AL1(5),AL1(22),CL6'TRACE=' TRACE                  S22024
         DC    AL1(6),AL1(24),CL7'DTRACE=' DTRACE                S22024
         DC    AL1(7),AL1(26),CL8'CPINTVL=' CPINTVL              S22024
         DC    AL1(7),AL1(28),CL8'PASSWRD=' PASSWRD              S22024
         DC    AL1(3),AL1(30),CL4'DLQ=' DLQ                      S22024
         DC    AL1(6),AL1(32),CL7'CPRCDS=' CPRCDS                S22024
         DC    AL1(7),AL1(34),CL8'CROSSRF=' CROSSRF              S22024
         DC    AL1(7),AL1(36),CL8'COMWRTE=' COMWRTE              S22024
         DC    AL1(6),AL1(38),CL7'TOPMSG=' TOPMSG                S22024
         DC    AL1(6),AL1(40),CL7'OLTEST=' OLTEST                S22024
         DC    AL1(5),AL1(42)           MSMAX                    S22024
XMSMAX   DC    CL6'MSMAX='              MSMAX                    S22024
         DC    AL1(5),AL1(44)           MSMIN                    S22024
XMSMIN   DC    CL6'MSMIN='              MSMIN                    S22024
*                         46            VIRTUAL                @Y17XANG
*                         48            END OF TEXT
*                         50            EOF
         DC    AL1(6),AL1(52),CL7'PLCBNO=' PLCBNO                X03039
         DC    AL1(6),AL1(54),CL7'TTRACE='  TTRACE               X03039
XBTRACE  DC    AL1(6),AL1(54),CL7'BTRACE='  BTRACE             @Y17XANG
         DC    AL1(7),AL1(56),CL8'BRACKET='  BRACKET           @X50X9NI
XMAXSUBA DC    AL1(7),AL1(58),CL8'MAXSUBA='  MAXSUBA           @Y17XANG
XOPMASK  DC    AL1(6),AL1(60),CL7'OPMASK='   OPMASK            @Y17XANG
         DC    AL1(7),AL1(62)                                  @Y17XANG
XSUBAREA DC    CL8'SUBAREA='                 SUBAREA           @Y17XANG
XSIBCOUN DC    AL1(6),AL1(64),CL7'SIBCNT='   SIBCOUNT          @Y17XANG
XAPWAS   DC    AL1(5),AL1(66),CL6'APWAS='    APWAS             @G36XRNP
XAUTHA   DC    AL1(5),AL1(68),CL6'AUTHA='    AUTHA             @G36XRNP
         DC    XL1'FF'                  END OF TABLE INDICATOR @Y17XANG
*                                                                S21101
CLRNUM   DC    X'F0F0F0F0'              MASK TO TEST OPMASK    @Y17XANG
*                                       VALIDITY               @Y17XANG
TRANMSK  DC    XL193'00',X'FAFBFCFDFEFF',XL41'00' TRANS TABLE  @Y17XANG
         DC    X'F0F1F2F3F4F5F6F7F8F9',XL6'00'    TRANS TABLE  @Y17XANG
         EJECT                                                 @Y17XANG
         TAVTD 4
CVTD     DSECT
         CVT
         TTCBD
         TMSKD                                                 @Y17XANG
         END
