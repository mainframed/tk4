         TITLE 'IDA019SB - DYNAMIC BUILD IDACPA                        *
                        '
IDA019SB CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IDA019SB  78.180'                                 0001
         DROP  @15
@PROLOG  BALR  @11,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@11                                         0001
*                                                          /*@Y30SDLC*/
LSRCPAPL  EQU 254                   SUBPOOL FOR LSR          @ZA27961
GSRCPAPL  EQU 245                   SUBPOOL FOR GSR          @ZA27961
*   IOMSAVE5=R14;                   /* SAVE RETURN REGISTER  @Y30SDLC*/
         ST    R14,IOMSAVE5(,RIOMB)                                0134
*   RESPECIFY                                                      0135
*     R14 UNRESTRICTED;             /*                       @Y30SDLC*/
*                                                                  0135
*   /*****************************************************************/
*   /*                                                               */
*   /* ESTABLISH EXISTENCE OF AN FRR                         @Y30SDLC*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0136
*   RESPECIFY                                                      0136
*    (RW1,                                                         0136
*     RW2,                                                         0136
*     RW3) RSTD;                    /*                       @Y30SDLC*/
*   RW1=ADDR(IDA121F7);             /*                       @Y30SDLC*/
         LA    RW1,IDA121F7                                        0137
*   GEN SETS(RW1,RW2,RW3,FRRSCURR,FRRSFRRA,FRRSPARM) REFS(PSACSTK, 0138
*       PSALSFCC,FRRS,FRRSENTR,FRRSLAST,FRRSELEN)                  0138
*       (SETFRR  A,FRRAD=(RW1),WRKREGS=(RW2,RW3),PARMAD=(RW1));/*  0138
*                                                            @Y30SDLC*/
         SETFRR  A,FRRAD=(RW1),WRKREGS=(RW2,RW3),PARMAD=(RW1)
*   IOMBADR=RIOMB;                  /* IOMB ADDR IN PARM FLD @Y30SDLC*/
         ST    RIOMB,IOMBADR(,RW1)                                 0139
*   BASER11=BASE11;                 /* BASE REG FOR FRR      @Y30SDLC*/
         ST    BASE11,BASER11(,RW1)                                0140
*   RESPECIFY                                                      0141
*     RW4 RESTRICTED;               /*                       @ZA26357*/
*   IF AMBGSR=ON THEN               /* IS GLOBAL SHR         @ZA26357*/
         L     @12,IOMAMB(,RIOMB)                                  0142
         TM    AMBGSR(@12),B'00100000'                             0142
         BNO   @RF00142                                            0142
*     RW4=VSRTCPAH;                 /* WSHD FROM VSRT        @ZA26357*/
         SLR   @12,@12                                             0143
         IC    @12,IOMCKEY(,RIOMB)                                 0143
         SRL   @12,4                                               0143
         SLA   @12,3                                               0143
         L     @06,CVTPTR                                          0143
         L     @06,CVTCBSP(,@06)                                   0143
         L     @12,CBSVPTR(@12,@06)                                0143
         L     RW4,VSRTCPAH(,@12)                                  0143
*   ELSE                            /* IF LOCAL SHR          @ZA26357*/
*     RW4=AMBCPA;                   /* LOAD IDAWSHD BASE     @ZA26357*/
         B     @RC00142                                            0144
@RF00142 L     @12,IOMAMB(,RIOMB)                                  0144
         L     RW4,AMBCPA(,@12)                                    0144
*   IOMSAVE7=RW4;                   /* SAVE ADDR 1ST WSHD    @ZA26357*/
@RC00142 ST    RW4,IOMSAVE7(,RIOMB)                                0145
*   RESPECIFY                                                      0146
*     IDACPA BASED(IOMCPA);         /*                       @ZA26357*/
*   IF BUFCCPA^=0&                  /* IF CPA STILL EXISTS   @ZA26357*/
*       IOMCPA=BUFCCPA THEN         /* IF CPA ADDR VALID     @ZA26357*/
         L     @12,BUFCCPA(,RBUFC)                                 0147
         LTR   @12,@12                                             0147
         BZ    @RF00147                                            0147
         L     @06,IOMCPA(,RIOMB)                                  0147
         CR    @06,@12                                             0147
         BNE   @RF00147                                            0147
*     DO;                           /*                       @ZA26357*/
*       RESPECIFY                                                  0149
*         RFLD BASED(ADDR(IDACPA)+CPALEN);/*                 @ZA26357*/
*       RESPECIFY                                                  0150
*         IDAWSHD BASED(RMAPA);     /*                       @ZA26357*/
*       RESPECIFY                                                  0151
*        (RW3,                                                     0151
*         R6,                                                      0151
*         RW1) RESTRICTED;          /*                       @ZA26357*/
*       RW4=RMASK;                  /* LOAD FREE MASK        @ZA26357*/
         L     @12,IOMCPA(,RIOMB)                                  0152
         LH    @04,CPALEN(,@12)                                    0152
         ALR   @04,@12                                             0152
         SLR   RW4,RW4                                             0152
         IC    RW4,RMASK(,@04)                                     0152
*FREECORE:                          /*                       @ZA26357*/
*       RW1=ADDR(WSHDSBV)->I031P;   /* LOAD RESOURCE WORD    @ZA26357*/
FREECORE L     @12,IOMCPA(,RIOMB)                                  0153
         LH    @04,CPALEN(,@12)                                    0153
         ALR   @04,@12                                             0153
         LA    @12,40                                              0153
         L     @04,RMAPA-1(,@04)                                   0153
         LA    @04,0(,@04)                                         0153
         ALR   @12,@04                                             0153
         L     RW1,I031P(,@12)                                     0153
*       R6=RW1;                     /* COPY WORD             @ZA26357*/
         LR    R6,RW1                                              0154
*       R6=R6&RW4;                  /* SET BITS OFF          @ZA26357*/
         NR    R6,RW4                                              0155
*       R6=R6&SFNOOFF;              /* SET WSHDSFNO OFF      @ZA26357*/
         N     R6,SFNOOFF                                          0156
*       CS(RW1,RW3,ADDR(WSHDSBV)->I031P);/* NEW WORD         @ZA26357*/
         CS    RW1,@09,I031P(@12)                                  0157
*       BC(7,FREECORE);             /* LOOP UNTIL DONE       @ZA26357*/
         BC    7,FREECORE                                          0158
*       IOMCPA=0;                   /* IN CASE GETWS FAILS   @ZA26357*/
         SLR   @12,@12                                             0159
         ST    @12,IOMCPA(,RIOMB)                                  0159
*       RESPECIFY                                                  0160
*        (RW3,                                                     0160
*         R6,                                                      0160
*         RW1) UNRESTRICTED;        /*                       @ZA26357*/
*     END;                          /*                       @ZA26357*/
*   RESPECIFY                                                      0162
*     RW4 UNRESTRICTED;             /*                       @ZA26357*/
@RF00147 DS    0H                                                  0163
*   RESPECIFY                                                      0163
*    (RW1,                                                         0163
*     RW2,                                                         0163
*     RW3) UNRESTRICTED;            /*                       @Y30SDLC*/
*   IF BUFCMW=ON×BUFCRRD=ON THEN    /* IF ANY FUNCTION       @Y30SDLC*/
         TM    BUFCMW(RBUFC),B'10100000'                           0164
         BZ    @RF00164                                            0164
*     DO;                           /*                       @Y30SDLC*/
*       RESPECIFY                                                  0166
*        (RW4,                                                     0166
*         RW2) RESTRICTED;                                         0166
*       RW2=ADDR(IDAEDBHD);         /* PT TO EDB HDR         @Y30SDLC*/
         L     @12,IOMAMB(,RIOMB)                                  0167
         L     @12,AMBEDB(,@12)                                    0167
         LR    RW2,@12                                             0167
*       RW4=EDBNO;                  /* LOAD NBR OF EDB       @Y30SDLC*/
         SLR   RW4,RW4                                             0168
         IC    RW4,EDBNO(,@12)                                     0168
*       RW2=RW2+LENGTH(IDAEDBHD);   /* PT TO EDB PROPER      @Y30SDLC*/
         LA    @12,8                                               0169
         ALR   RW2,@12                                             0169
*       RESPECIFY                                                  0170
*         IDAEDB BASED(RW2);        /*                       @Y30SDLC*/
*       RESPECIFY                                                  0171
*         R15 RESTRICTED;           /*                       @Y30SDLC*/
*       R15=ERRNOEDB;               /* LOAD RET CODE-NO EDB  @Y30SDLC*/
         LR    R15,@12                                             0172
*       DO RW4=RW4 TO 1 BY-1;       /* LOOP THRU EDBS        @Y30SDLC*/
         B     @DE00173                                            0173
@DL00173 DS    0H                                                  0174
*         IF(BUFCRRD=ON&            /* IF READ REQ           @Y30SDLC*/
*             BUFCDDDD=>EDBLORBA&   /* AND RBA GE LOW RBA    @Y30SDLC*/
*             BUFCDDDD<=EDBHIRBA)×  /* AND RBA LE HI RBA     @Y30SDLC*/
*             (BUFCMW=ON&           /* IF WRITE REQ          @Y30SDLC*/
*             BUFCORBA=>EDBLORBA&   /* AND RBA GE LOW RBA    @Y30SDLC*/
*             BUFCORBA<=EDBHIRBA) THEN/* AND RBA LE HI RBA   @Y30SDLC*/
         TM    BUFCRRD(RBUFC),B'00100000'                          0174
         BNO   @GL00002                                            0174
         L     @14,BUFCDDDD(,RBUFC)                                0174
         CL    @14,EDBLORBA(,RW2)                                  0174
         BL    @GL00002                                            0174
         CL    @14,EDBHIRBA(,RW2)                                  0174
         BNH   @RT00174                                            0174
@GL00002 TM    BUFCMW(RBUFC),B'10000000'                           0174
         BNO   @RF00174                                            0174
         L     @14,BUFCORBA(,RBUFC)                                0174
         CL    @14,EDBLORBA(,RW2)                                  0174
         BL    @RF00174                                            0174
         CL    @14,EDBHIRBA(,RW2)                                  0174
         BH    @RF00174                                            0174
@RT00174 DS    0H                                                  0175
*           DO;                     /*                       @Y30SDLC*/
*             RW4=1;                /* SET RW4 TO EXIT LOOP  @Y30SDLC*/
         LA    RW4,1                                               0176
*             RW2=EDBLPMBA;         /* PT TO LPMB FOR EDB    @Y30SDLC*/
         L     RW2,EDBLPMBA(,RW2)                                  0177
*             R15=0;                /* SET RET CODE          @Y30SDLC*/
         SLR   R15,R15                                             0178
*           END;                    /*                       @Y30SDLC*/
*         ELSE                      /* IF RBAS NOT IN EDB RANGE      */
*           RW2=RW2+LENGTH(IDAEDB); /* PT TO NEXT EDB        @Y30SDLC*/
         B     @RC00174                                            0180
@RF00174 AL    RW2,@CF00112                                        0180
*       END;                        /*                       @Y30SDLC*/
@RC00174 BCTR  RW4,0                                               0181
@DE00173 LTR   RW4,RW4                                             0181
         BP    @DL00173                                            0181
*       IF R15^=0 THEN              /* IF EDB WAS NOT FOUND  @Y30SDLC*/
         LTR   R15,R15                                             0182
         BZ    @RF00182                                            0182
*         RETURN CODE(R15) TO CALLER;/* EXIT                 @ZA26357*/
         L     @14,IOMSAVE5(,RIOMB)                                0183
@EL00001 DS    0H                                                  0183
@EF00001 DS    0H                                                  0183
@ER00001 BR    @14                                                 0183
*       RESPECIFY                                                  0184
*         R15 UNRESTRICTED;         /*                       @ZA26357*/
@RF00182 DS    0H                                                  0185
*       RESPECIFY                                                  0185
*         IDALPMB BASED(RW2);                                      0185
*       RW4=AMBSZCP;                /* LOAD HEADER SIZE              */
         L     @12,IOMAMB(,RIOMB)                                  0186
         LH    RW4,AMBSZCP(,@12)                                   0186
*       IF BUFCRRD=ON THEN          /* IF READ SEGMENT NEEDED        */
         TM    BUFCRRD(RBUFC),B'00100000'                          0187
         BNO   @RF00187                                            0187
*         RW4=RW4+AMBSZRD;          /* ADD SIZE FOR READ CCWS        */
         AH    RW4,AMBSZRD(,@12)                                   0188
*       IF BUFCMW=ON THEN           /* IF WRITE SEGMENT NEEDED       */
@RF00187 TM    BUFCMW(RBUFC),B'10000000'                           0189
         BNO   @RF00189                                            0189
*         DO;                                                      0190
*           IF BUFCWC=ON THEN       /* IF WRITE CHECK NEEDED         */
         TM    BUFCWC(RBUFC),B'00001000'                           0191
         BNO   @RF00191                                            0191
*             RW4=RW4+AMBSZRD;      /* ADD SIZE FOR WRITE CHECK CCWS */
         L     @12,IOMAMB(,RIOMB)                                  0192
         AH    RW4,AMBSZRD(,@12)                                   0192
*           IF BUFCFMT=ON×          /* IF FORMAT WRITE CCWS NEEDED   */
*               LPMREPL=ON THEN     /* IF REPLICATION REQUESTED      */
@RF00191 TM    BUFCFMT(RBUFC),B'01000000'                          0193
         BO    @RT00193                                            0193
         TM    LPMREPL(RW2),B'01000000'                            0193
         BNO   @RF00193                                            0193
@RT00193 DS    0H                                                  0194
*             RW4=RW4+AMBSZFW;      /* ADD SIZE FOR FORMAT WRITE     */
         L     @12,IOMAMB(,RIOMB)                                  0194
         AH    RW4,AMBSZFW(,@12)                                   0194
*           ELSE                    /* MUST BE UPDATE WRITE          */
*             RW4=RW4+AMBSZWR;      /* ADD SIZE FOR WRITE CCWS       */
         B     @RC00193                                            0195
@RF00193 L     @12,IOMAMB(,RIOMB)                                  0195
         AH    RW4,AMBSZWR(,@12)                                   0195
*         END;                                                     0196
@RC00193 DS    0H                                                  0197
*       RESPECIFY                                                  0197
*         R4 RESTRICTED;                                           0197
@RF00189 DS    0H                                                  0198
*       IOMSAVE8=RW2;               /* SAVE LPMB ADR         @Y30SDLC*/
         ST    RW2,IOMSAVE8(,RIOMB)                                0198
*       RESPECIFY                                                  0199
*         R15 RESTRICTED;                                          0199
*       CALL GETWS;                 /* GET WORK SPACE FOR CPA        */
         BAL   @14,GETWS                                           0200
*       IF R15^=0 THEN              /* IF ANY ERROR                  */
         LTR   R15,R15                                             0201
         BZ    @RF00201                                            0201
*         RETURN CODE(4) TO CALLER; /* EXIT WITH ERROR       @ZA26357*/
         L     @14,IOMSAVE5(,RIOMB)                                0202
         LA    @15,4                                               0202
         BR    @14                                                 0202
*       RESPECIFY                                                  0203
*         R15 UNRESTRICTED;                                        0203
@RF00201 DS    0H                                                  0204
*       RESPECIFY                                                  0204
*         IDACPA BASED(R1);         /*                       @ZA26357*/
*       IOMCPA=ADDR(IDACPA);        /* PROTECTED PTR TO CPA  @ZA26357*/
         ST    R1,IOMCPA(,RIOMB)                                   0205
*       RW2=IOMSAVE8;               /* RESTORE LPMB ADDRESS  @Y30SDLC*/
         L     RW2,IOMSAVE8(,RIOMB)                                0206
*       RESPECIFY                                                  0207
*         R4 UNRESTRICTED;                                         0207
*       RW4=SLEN;                   /* PICK UP CPA LENGTH            */
         LH    RW4,SLEN(,RIOMB)                                    0208
*       RESPECIFY                                                  0209
*         CORE BASED(R1);                                          0209
*       IF RW4<=MAXMOVE THEN        /* IF CPA TOO BIG FOR XC         */
         C     RW4,@CF02124                                        0210
         BH    @RF00210                                            0210
*         CORE(1:RW4)=CORE(1:RW4)&&CORE(1:RW4);/* ZERO CPA           */
         LR    @12,RW4                                             0211
         BCTR  @12,0                                               0211
         EX    @12,@SX02236                                        0211
*       ELSE                        /* IF CPA > 256 BYTES            */
*         DO;                                                      0212
         B     @RC00210                                            0212
@RF00210 DS    0H                                                  0213
*           RESPECIFY                                              0213
*            (RW3,                                                 0213
*             R6,                                                  0213
*             RW1) RESTRICTED;      /*                       @ZA26357*/
*           R6=ADDR(IDACPA);        /* LOAD CPA ADDR TO ZERO CORE    */
         LR    R6,R1                                               0214
*           RW1=RW4;                /* LOAD LENGTH TO ZERO CORE      */
         LR    RW1,RW4                                             0215
*           RW3=0;                  /* SET PAD/LENGTH REG            */
         SLR   RW3,RW3                                             0216
*           MVCL(R6,RW2);           /* ZERO CPA                      */
         MVCL  R6,RW2                                              0217
*           RESPECIFY                                              0218
*            (RW3,                                                 0218
*             R6,                                                  0218
*             RW1) UNRESTRICTED;    /*                       @ZA26357*/
*         END;                                                     0219
*       CPALEN=RW4;                 /* RESTORE LENGTH                */
@RC00210 STH   RW4,CPALEN(,R1)                                     0220
*       CPAID=IDXCPA;               /* SET ID                        */
         MVI   CPAID(R1),X'71'                                     0221
*       CPABLKSZ=LPMBLKSZ;          /* COPY BLKSIZE FROM LPMB        */
         L     @12,LPMBLKSZ(,RW2)                                  0222
         ST    @12,CPABLKSZ(,R1)                                   0222
*       RESPECIFY                                                  0223
*         RW3 RESTRICTED;           /*                       @ZA26357*/
*       RW3=ADDR(IDACPA)+LENGTH(IDACPA);/* LOAD ADDR OF END OF CPA   */
         LA    RW3,96                                              0224
         ALR   RW3,R1                                              0224
*       IF BUFCMW=ON THEN           /* IF REQUEST TO WRITE           */
         TM    BUFCMW(RBUFC),B'10000000'                           0225
         BNO   @RF00225                                            0225
*         DO;                                                      0226
*           IF BUFCWC=ON THEN       /* IF WRITE CHECK SPEC           */
         TM    BUFCWC(RBUFC),B'00001000'                           0227
         BNO   @RF00227                                            0227
*             DO;                                                  0228
*               CPAWCKS=RW3;        /* WRITE CHECK CCWS FIRST        */
         ST    RW3,CPAWCKS(,R1)                                    0229
*               CPAWCKE=RW3+AMBSZRD-LENGTH(CCW);/* POINT TO LAST WC
*                                      CCW                           */
         LA    @12,8                                               0230
         L     @04,IOMAMB(,RIOMB)                                  0230
         LR    @02,RW3                                             0230
         AH    @02,AMBSZRD(,@04)                                   0230
         SLR   @02,@12                                             0230
         ST    @02,CPAWCKE(,R1)                                    0230
*               CPAWCPS=CPAWCKE+LENGTH(CCW);/* WRITE CCWS NEXT       */
         ALR   @02,@12                                             0231
         ST    @02,CPAWCPS(,R1)                                    0231
*             END;                                                 0232
*           ELSE                    /* IF WRITE CHECK NOT SPEC       */
*             CPAWCPS=RW3;          /* WRITE CCWS FIRST              */
         B     @RC00227                                            0233
@RF00227 ST    RW3,CPAWCPS(,R1)                                    0233
*           IF BUFCFMT=ON×LPMREPL=ON THEN/* IF FORMAT WRITE  @ZA27961*/
@RC00227 TM    BUFCFMT(RBUFC),B'01000000'                          0234
         BO    @RT00234                                            0234
         TM    LPMREPL(RW2),B'01000000'                            0234
         BNO   @RF00234                                            0234
@RT00234 DS    0H                                                  0235
*             CPAWCPE=CPAWCPS+AMBSZFW-LENGTH(CCW);/* POINT TO LAST 0235
*                                      WRITE FORMAT CCW      @ZA27961*/
         L     @12,IOMAMB(,RIOMB)                                  0235
         LH    @12,AMBSZFW(,@12)                                   0235
         AL    @12,CPAWCPS(,R1)                                    0235
         SL    @12,@CF00061                                        0235
         ST    @12,CPAWCPE(,R1)                                    0235
*           ELSE                    /* NOT FORMAT WRITE      @ZA27961*/
*             CPAWCPE=CPAWCPS+AMBSZWR-LENGTH(CCW);/* POINT TO LAST 0236
*                                      WRITE CCW             @ZA27961*/
         B     @RC00234                                            0236
@RF00234 L     @12,IOMAMB(,RIOMB)                                  0236
         LH    @12,AMBSZWR(,@12)                                   0236
         AL    @12,CPAWCPS(,R1)                                    0236
         SL    @12,@CF00061                                        0236
         ST    @12,CPAWCPE(,R1)                                    0236
*           CPAWREAL=CPAWCPS;       /* SET VIRTUAL ADDR OF WRITE CP  */
@RC00234 L     @12,CPAWCPS(,R1)                                    0237
         ST    @12,CPAWREAL(,R1)                                   0237
*           RW3=CPAWCPE+LENGTH(CCW);/* POINT TO NEXT CCW             */
         LA    RW3,8                                               0238
         AL    RW3,CPAWCPE(,R1)                                    0238
*         END;                                                     0239
*       IF BUFCRRD=ON THEN          /* IF REQUEST TO READ            */
@RF00225 TM    BUFCRRD(RBUFC),B'00100000'                          0240
         BNO   @RF00240                                            0240
*         DO;                                                      0241
*           CPARCPS=RW3;            /* POINT TO FIRST READ CCW       */
         ST    RW3,CPARCPS(,R1)                                    0242
*           CPARREAL=CPARCPS;       /* SET VIRTUAL ADDR OF READ CP   */
         L     @12,CPARCPS(,R1)                                    0243
         ST    @12,CPARREAL(,R1)                                   0243
*           CPARCPE=CPARCPS+AMBSZRD-LENGTH(CCW);/* PT TO LAST READ 0244
*                                      CCW                           */
         LA    @04,8                                               0244
         L     @02,IOMAMB(,RIOMB)                                  0244
         AH    @12,AMBSZRD(,@02)                                   0244
         SLR   @12,@04                                             0244
         ST    @12,CPARCPE(,R1)                                    0244
*           RW3=CPARCPE+LENGTH(CCW);/* POINT AFTER LAST CCW          */
         ALR   @12,@04                                             0245
         LR    RW3,@12                                             0245
*         END;                                                     0246
*       CPAIDAL=RW3;                /* SET ADDR OF REAL PAGE LIST    */
@RF00240 ST    RW3,CPAIDAL(,R1)                                    0247
*       RW3=(CPABLKSZ+PAGE-1)&-PAGE;/* ROUND UP              @ZA27961*/
         L     RW3,CPABLKSZ(,R1)                                   0248
         SL    RW3,@CF02227                                        0248
         N     RW3,@CF02228                                        0248
*       RW3=(RW3/PAGE+1)*FOUR;      /* SIZE OF IDAL/VPL SET  @ZA27961*/
         LR    @12,RW3                                             0249
         SRL   @12,11                                              0249
         AL    @12,@CF00054                                        0249
         SLA   @12,2                                               0249
         LR    RW3,@12                                             0249
*       IF BUFCMW=ON&               /* IF MUST WRITE AND,    @ZA27961*/
*           ((BUFCFMT=ON&BUFCPFCP=ON)×/* PREFORMAT COMPLETE OR     0250
*                                                            @ZA27961*/
*           LPMREPL=ON) THEN        /* REPLICATION REQUESTED @ZA27961*/
         TM    BUFCMW(RBUFC),B'10000000'                           0250
         BNO   @RF00250                                            0250
         TM    BUFCFMT(RBUFC),B'01000010'                          0250
         BO    @RT00250                                            0250
         TM    LPMREPL(RW2),B'01000000'                            0250
         BNO   @RF00250                                            0250
@RT00250 DS    0H                                                  0251
*         CPABCINV=LPMBLKTR;        /* SET NO. OF CP SEGMENTS      0251
*                                                            @ZA27961*/
         LH    @12,LPMBLKTR(,RW2)                                  0251
         STH   @12,CPABCINV(,R1)                                   0251
*       ELSE                        /* OTHERWISE             @ZA27961*/
*         DO;                       /* SET BCINV & VPL SIZE  @ZA27961*/
         B     @RC00250                                            0252
@RF00250 DS    0H                                                  0253
*           CPABCINV=AMDCINV/LPMBLKSZ;/* NUMBER CH PGM SEGMENTS    0253
*                                                            @ZA27961*/
         L     @12,IOMAMB(,RIOMB)                                  0253
         L     @12,AMBDSB(,@12)                                    0253
         L     @06,AMDCINV(,@12)                                   0253
         SRDA  @06,32                                              0253
         D     @06,LPMBLKSZ(,RW2)                                  0253
         STH   @07,CPABCINV(,R1)                                   0253
*           RW3=RW3*CPABCINV;       /* SET IDAL AND VPL SIZE @ZA27961*/
         MR    @06,RW3                                             0254
         LR    RW3,@07                                             0254
*         END;                      /* END                   @ZA27961*/
*       CPAVPL=CPAIDAL+RW3;         /* SET ADDR OF VIRTUAL PAGE LIST */
@RC00250 LR    @12,RW3                                             0256
         AL    @12,CPAIDAL(,R1)                                    0256
         ST    @12,CPAVPL(,R1)                                     0256
*       IF BUFCMW=ON&               /* IF MUST WRITE                 */
*           (BUFCFMT=ON×            /* IF PREFORMAT                  */
*           LPMREPL=ON) THEN        /* IF REPLICATION REQUESTED      */
         TM    BUFCMW(RBUFC),B'10000000'                           0257
         BNO   @RF00257                                            0257
         TM    BUFCFMT(RBUFC),B'01000000'                          0257
         BO    @RT00257                                            0257
         TM    LPMREPL(RW2),B'01000000'                            0257
         BNO   @RF00257                                            0257
@RT00257 DS    0H                                                  0258
*         DO;                                                      0258
*           CPAFWCNT=CPAVPL+RW3;    /* FORMAT WRITE CNT AREA FOLLOWS
*                                      VPL                           */
         LR    @12,RW3                                             0259
         AL    @12,CPAVPL(,R1)                                     0259
         ST    @12,CPAFWCNT(,R1)                                   0259
*           CPAWSID=CPAFWCNT+CPABCINV*DWORDLEN;/* SEARCH IDS FOLLOW
*                                      FWCNT                         */
         LH    @04,CPABCINV(,R1)                                   0260
         SLA   @04,3                                               0260
         ALR   @12,@04                                             0260
         ST    @12,CPAWSID(,R1)                                    0260
*         END;                                                     0261
*       ELSE                        /* OTHERWISE                     */
*         CPAWSID=CPAVPL+RW3;       /* SET ADDR OF SEARCH ID TABLE   */
         B     @RC00257                                            0262
@RF00257 LR    @12,RW3                                             0262
         AL    @12,CPAVPL(,R1)                                     0262
         ST    @12,CPAWSID(,R1)                                    0262
         EJECT
*       RESPECIFY                                                  0263
*        (R6,                                                      0263
*         RW1,                                                     0263
*         R4) RESTRICTED;                                          0263
@RC00257 DS    0H                                                  0264
*       IF BUFCMW=ON THEN           /* IF WRITE REQUEST              */
         TM    BUFCMW(RBUFC),B'10000000'                           0264
         BNO   @RF00264                                            0264
*         DO;                                                      0265
*           IF BUFCFMT=OFF&         /* IF PREFORMAT NOT REQUESTED    */
*               LPMREPL=OFF THEN    /* IF REPLICATION NOT REQUESTED  */
         TM    BUFCFMT(RBUFC),B'01000000'                          0266
         BNZ   @RF00266                                            0266
         TM    LPMREPL(RW2),B'01000000'                            0266
         BNZ   @RF00266                                            0266
*             DO;                                                  0267
*                                                                  0267
*               /*****************************************************/
*               /*                                                   */
*               /* BUILD UPDATE WRITE CHANNEL PROGRAM SEGMENT        */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0268
*               RW3=CPAWCPS;        /* POINT TO FIRST CCW            */
         L     RW3,CPAWCPS(,R1)                                    0268
*               RESPECIFY                                          0269
*                 CCW BASED(RW3);   /* SET UP SEEK HEAD CCW          */
*               R4=ADDR(CPAWSEEK);  /* SET POINTER TO SEEK ARG       */
         LA    R4,CPAWSEEK(,R1)                                    0270
*               CALL BLDSEEKH;      /* BUILD SEEKH CCW               */
         BAL   @14,BLDSEEKH                                        0271
*               CCWAREA=ADDR(CPAWSECT);/* POINT TO WRITE SECTOR      */
         LA    @12,CPAWSECT(,R1)                                   0272
         ST    @12,CCWAREA(,RW3)                                   0272
*               CALL BLDSS;         /* BUILD REST OF SET SECTOR      */
         BAL   @14,BLDSS                                           0273
*               RW1=CPAWSID;        /* POINT TO SEARCH ID ARGS       */
         L     RW1,CPAWSID(,R1)                                    0274
*               RESPECIFY                                          0275
*                 SEARCHID BASED(RW1);                             0275
*               R4=CPAIDAL;         /* POINT TO REAL PAGE LIST       */
         L     R4,CPAIDAL(,R1)                                     0276
*               RFY                                                0277
*                 R15 RSTD;         /*                       @ZA27961*/
*               R15=(CPABLKSZ+PAGE-1)&-PAGE;/* ROUND UP      @ZA27961*/
         L     R15,CPABLKSZ(,R1)                                   0278
         SL    R15,@CF02227                                        0278
         N     R15,@CF02228                                        0278
*               R15=(R15/PAGE+1)*FOUR;/* SIZE OF IDAL SET    @ZA27961*/
         LR    @14,R15                                             0279
         SRL   @14,11                                              0279
         AL    @14,@CF00054                                        0279
         SLA   @14,2                                               0279
         LR    R15,@14                                             0279
*               DO R6=CPABCINV TO 1 BY-1;/* BUILD 3 CCW/BLKSIZE OR 2K*/
         LH    R6,CPABCINV(,R1)                                    0280
         B     @DE00280                                            0280
@DL00280 DS    0H                                                  0281
*                 CCWAREA=ADDR(SEARCHID);/* AREA IS IN SEARCH ID ARG
*                                      TABLE                         */
         ST    RW1,CCWAREA(,RW3)                                   0281
*                 IF R6=CPABCINV THEN/* IF FIRST SET OF 3 CCWS       */
         CH    R6,CPABCINV(,R1)                                    0282
         BNE   @RF00282                                            0282
*                   CCWCODE=CCSIDEQ;/* NO MT ON                      */
         MVI   CCWCODE(RW3),X'31'                                  0283
*                 ELSE              /* IF NOT FIRST                  */
*                   CCWCODE=CCMTSIDE;/* MT ON                        */
         B     @RC00282                                            0284
@RF00282 MVI   CCWCODE(RW3),X'B1'                                  0284
*                 RW1=RW1+LENGTH(SEARCHID);/* PT TO NEXT SEARCH ID 0285
*                                      ARG                           */
@RC00282 LA    @14,5                                               0285
         ALR   RW1,@14                                             0285
*                 CCWCC=ON;         /* SET COMMAND CHAINING BIT      */
         OI    CCWCC(RW3),B'01000000'                              0286
*                 CCWLEN=LENGTH(SEARCHID);/* SET SEARCH LENGTH       */
         STH   @14,CCWLEN(,RW3)                                    0287
*                 CALL BLDTIC;      /* BUILD TIC                     */
         BAL   @14,BLDTIC                                          0288
*                 CCWAREA=R4;       /* AREA IN IDAL                  */
         ST    R4,CCWAREA(,RW3)                                    0289
*                 CCWCODE=CCWD;     /* SET COMMAND CODE              */
         MVI   CCWCODE(RW3),X'05'                                  0290
*                 CCWCC=ON;         /* SET COMMAND CHAINING BIT ON   */
*                 CCWIDAL=ON;       /* SET IDAL BIT ON               */
         OI    CCWCC(RW3),B'01000100'                              0292
*                 CCWLEN=CPABLKSZ;  /* SET LENGTH                    */
         L     @14,CPABLKSZ(,R1)                                   0293
         STH   @14,CCWLEN(,RW3)                                    0293
*                 R4=R4+R15;        /* NEXT IDAL SET         @ZA27961*/
         ALR   R4,R15                                              0294
*                 RW3=RW3+LENGTH(CCW);/* POINT TO NEXT CCW           */
         AL    RW3,@CF00061                                        0295
*               END;                /* BUILD NOP                     */
         BCTR  R6,0                                                0296
@DE00280 LTR   R6,R6                                               0296
         BP    @DL00280                                            0296
*               RFY                                                0297
*                 R15 UNRSTD;       /*                       @ZA27961*/
*               CPAWCPE=ADDR(CCW);  /* RESET POINTER TO LAST CCW     */
         ST    RW3,CPAWCPE(,R1)                                    0298
*               CALL BLDNOP;        /* BUILD NOP                     */
         BAL   @14,BLDNOP                                          0299
*             END;                                                 0300
         EJECT
*           ELSE                    /* OTHERWISE, PREFORMAT IS REQ   */
*             DO;                                                  0301
*                                                                  0301
         B     @RC00266                                            0301
@RF00266 DS    0H                                                  0302
*               /*****************************************************/
*               /*                                                   */
*               /* BUILD FORMAT WRITE CHANNEL PROGRAM SEGMENT        */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0302
*               RW3=CPAWCPS;        /* POINT TO FIRST CCW            */
         L     RW3,CPAWCPS(,R1)                                    0302
*               RESPECIFY                                          0303
*                 CCW BASED(RW3);   /* SET UP SEEK HEAD CCW          */
*               R4=ADDR(CPAWSEEK);  /* POINT TO SEEK ARG             */
         LA    R4,CPAWSEEK(,R1)                                    0304
*               CALL BLDSEEKH;      /* BUILD SEEK HEAD               */
         BAL   @14,BLDSEEKH                                        0305
*               CCWAREA=ADDR(CPAWSECT);/* POINT TO WRITE SECTOR      */
         LA    @12,CPAWSECT(,R1)                                   0306
         ST    @12,CCWAREA(,RW3)                                   0306
*               CALL BLDSS;         /* BUILD REST OF SET SECTOR      */
         BAL   @14,BLDSS                                           0307
*               CCWAREA=CPAWSID;    /* ADDRESS OF SEARCH ID          */
         L     @12,CPAWSID(,R1)                                    0308
         ST    @12,CCWAREA(,RW3)                                   0308
*               CCWCODE=CCSIDEQ;    /* BUILD SEARCH ID EQU CCW       */
         MVI   CCWCODE(RW3),X'31'                                  0309
*               CCWCC=ON;           /* COMMAND CHAINING              */
         OI    CCWCC(RW3),B'01000000'                              0310
*               CCWLEN=LENGTH(CCHHR);/* LENGTH OF SEARCH ID          */
         MVC   CCWLEN(2,RW3),@CH00093                              0311
*               CALL BLDTIC;        /* BUILD TIC                     */
         BAL   @14,BLDTIC                                          0312
*               RW1=CPAFWCNT;       /* POINT TO FW COUNT AREA        */
         L     RW1,CPAFWCNT(,R1)                                   0313
*               IF BUFCPFCP=ON×     /* IF PREFORMAT COMPLETE         */
*                   LPMREPL=ON THEN /* IF REPLICATION REQUESTED      */
         TM    BUFCPFCP(RBUFC),B'00000010'                         0314
         BO    @RT00314                                            0314
         TM    LPMREPL(RW2),B'01000000'                            0314
         BNO   @RF00314                                            0314
@RT00314 DS    0H                                                  0315
*                 R6=CPABCINV;      /* THEN MANY CCW SETS            */
         LH    R6,CPABCINV(,R1)                                    0315
*               ELSE                /* OTHERWISE                     */
*                 R6=1;             /* IF NOT PREF COMP 1 SET CCWS   */
         B     @RC00314                                            0316
@RF00314 LA    R6,1                                                0316
*               DO R6=R6 TO 1 BY-1; /* COMPLETE CCWS                 */
@RC00314 B     @DE00317                                            0317
@DL00317 DS    0H                                                  0318
*                 CCWAREA=RW1;      /* POINT TO FW COUNT AREA        */
         ST    RW1,CCWAREA(,RW3)                                   0318
*                 CCWCODE=CCWCKD;   /* BUILD WCKD CCW                */
         MVI   CCWCODE(RW3),X'1D'                                  0319
*                 RW1=RW1+DWORDLEN; /* POINT TO NEXT FW COUNT AREA   */
         LA    @12,8                                               0320
         ALR   RW1,@12                                             0320
*                 CCWDC=ON;         /* DATA CHAINING                 */
         OI    CCWDC(RW3),B'10000000'                              0321
*                 CCWLEN=LENGTH(CCHHRKDD);/* LENGTH OF DATA          */
         STH   @12,CCWLEN(,RW3)                                    0322
*                 RW3=RW3+LENGTH(CCW);/* POINT TO NEXT CCW           */
         ALR   RW3,@12                                             0323
*                 CCWAREA=CPAIDAL;  /* ADDR OF REAL PAGE LIST        */
         L     @02,CPAIDAL(,R1)                                    0324
         ST    @02,CCWAREA(,RW3)                                   0324
*                 CCWCODE=CCWCKD;   /* BUILD 2ND WCKD CCW            */
         MVI   CCWCODE(RW3),X'1D'                                  0325
*                 CCWCC=ON;         /* COMMAND CHAINING              */
*                 CCWIDAL=ON;       /* INDIRECT ADDRESSING           */
         OI    CCWCC(RW3),B'01000100'                              0327
*                 CCWLEN=CPABLKSZ;  /* DATA LENGTH EQUAL PHYSICAL  0328
*                                      BLOCK SIZE                    */
         L     @02,CPABLKSZ(,R1)                                   0328
         STH   @02,CCWLEN(,RW3)                                    0328
*                 RW3=RW3+LENGTH(CCW);/* POINT TO NEXT CCW           */
         ALR   RW3,@12                                             0329
*               END;                                               0330
         BCTR  R6,0                                                0330
@DE00317 LTR   R6,R6                                               0330
         BP    @DL00317                                            0330
*               CPAWCPE=ADDR(CCW);  /* RESET POINTER TO LAST CCW     */
         ST    RW3,CPAWCPE(,R1)                                    0331
*               CALL BLDNOP;        /* BUILD NOP                     */
         BAL   @14,BLDNOP                                          0332
*             END;                                                 0333
         EJECT
*           IF BUFCWC=ON THEN       /* IF BUFC SPECIFIED WRITE CHECK */
@RC00266 TM    BUFCWC(RBUFC),B'00001000'                           0334
         BNO   @RF00334                                            0334
*             DO;                                                  0335
*                                                                  0335
*               /*****************************************************/
*               /*                                                   */
*               /* BUILD WRITE CHECK CHANNEL PROGRAM SEGMENT         */
*               /*                                                   */
*               /*****************************************************/
*                                                                  0336
*               RW3=CPAWCKS;        /* POINT TO FIRST CCW AREA       */
         L     RW3,CPAWCKS(,R1)                                    0336
*               R4=ADDR(CPAWSEEK);  /* SET POINTER TO SEEK ARG       */
         LA    R4,CPAWSEEK(,R1)                                    0337
*               CALL BLDSEEKH;      /* BUILD SEEK HEAD               */
         BAL   @14,BLDSEEKH                                        0338
*               CCWAREA=ADDR(CPAWSECT);/* POINT TO WRITE SECTOR      */
         LA    @12,CPAWSECT(,R1)                                   0339
         ST    @12,CCWAREA(,RW3)                                   0339
*               CALL BLDSS;         /* BUILD REST OF SET SECTOR      */
         BAL   @14,BLDSS                                           0340
*               IF BUFCFMT=ON×      /* IF PREFORMAT                  */
*                   LPMREPL=ON THEN /* IF REPLICATION REQUESTED      */
         TM    BUFCFMT(RBUFC),B'01000000'                          0341
         BO    @RT00341                                            0341
         TM    LPMREPL(RW2),B'01000000'                            0341
         BNO   @RF00341                                            0341
@RT00341 DS    0H                                                  0342
*                 CCWAREA=CPAFWCNT; /* LOAD ADDR OF FORMAT WRITE   0342
*                                      COUNT FIELD                   */
         L     @12,CPAFWCNT(,R1)                                   0342
         ST    @12,CCWAREA(,RW3)                                   0342
*               ELSE                /* IF NOT PREFORMAT              */
*                 CCWAREA=CPAWSID;  /* INIT AREA                     */
         B     @RC00341                                            0343
@RF00341 L     @12,CPAWSID(,R1)                                    0343
         ST    @12,CCWAREA(,RW3)                                   0343
*               CCWCODE=CCSIDEQ;    /* COMMAND CODE IS SRCH ID EQ    */
@RC00341 MVI   CCWCODE(RW3),X'31'                                  0344
*               CCWCC=ON;           /* COMMAND CHAINING              */
         OI    CCWCC(RW3),B'01000000'                              0345
*               CCWLEN=LENGTH(SEARCHID);/* SET CCW LENGTH            */
         MVC   CCWLEN(2,RW3),@CH00093                              0346
*               CALL BLDTIC;        /* BUILD TIC                     */
         BAL   @14,BLDTIC                                          0347
*               R4=CPAIDAL;         /* POINT TO IDAL AREA            */
         L     R4,CPAIDAL(,R1)                                     0348
*               DO R6=CPABCINV TO 1 BY-1;/* CREATE RL CCWS           */
         LH    R6,CPABCINV(,R1)                                    0349
         B     @DE00349                                            0349
@DL00349 DS    0H                                                  0350
*                 CCWAREA=R4;       /* AREA IS IN IDAL               */
         ST    R4,CCWAREA(,RW3)                                    0350
*                 IF R6=CPABCINV THEN/* IF THIS IS FIRST CCW         */
         CH    R6,CPABCINV(,R1)                                    0351
         BNE   @RF00351                                            0351
*                   CCWCODE=CCRD;   /* NO MT FOR FIRST CCW RD        */
         MVI   CCWCODE(RW3),X'06'                                  0352
*                 ELSE              /* IF NOT THE FIRST CCW          */
*                   CCWCODE=CCMTRD; /* CCW CODE IS MT READ           */
         B     @RC00351                                            0353
@RF00351 MVI   CCWCODE(RW3),X'86'                                  0353
*                 CCWCC=ON;         /* COMMAND CHAINING              */
@RC00351 DS    0H                                                  0355
*                 CCWST=ON;         /* SUPPRESS DATA TRANSFER        */
         OI    CCWCC(RW3),B'01010000'                              0355
*                 CCWLEN=CPABLKSZ;  /* SET LENGTH AS BLOCKSIZE       */
         L     @12,CPABLKSZ(,R1)                                   0356
         STH   @12,CCWLEN(,RW3)                                    0356
*                 RW3=RW3+LENGTH(CCW);/* POINT TO NEXT CCW           */
         AL    RW3,@CF00061                                        0357
*               END;                /* SET UP NOP                    */
         BCTR  R6,0                                                0358
@DE00349 LTR   R6,R6                                               0358
         BP    @DL00349                                            0358
*               CPAWCKE=ADDR(CCW);  /* RESET POINTER TO LAST CCW     */
         ST    RW3,CPAWCKE(,R1)                                    0359
*               CALL BLDNOP;        /* BUILD NOP                     */
         BAL   @14,BLDNOP                                          0360
*             END;                                                 0361
*         END;                      /* END OF MW CODE                */
@RF00334 DS    0H                                                  0363
         EJECT
*       IF BUFCRRD=ON THEN          /* IF READ CHANNEL PROGRAM NEEDED*/
@RF00264 TM    BUFCRRD(RBUFC),B'00100000'                          0363
         BNO   @RF00363                                            0363
*         DO;                                                      0364
*                                                                  0364
*           /*********************************************************/
*           /*                                                       */
*           /* BUILD READ CHANNEL PROGRAM SEGMENT                    */
*           /*                                                       */
*           /*********************************************************/
*                                                                  0365
*           RW3=CPARCPS;            /* POINT TO FIRST CCW            */
         L     RW3,CPARCPS(,R1)                                    0365
*           R4=ADDR(CPARSEEK);      /* POINT TO SEEK ARG             */
         LA    R4,CPARSEEK(,R1)                                    0366
*           CALL BLDSEEKH;          /* BUILD SEEK HEAD               */
         BAL   @14,BLDSEEKH                                        0367
*           CCWAREA=ADDR(CPARSECT); /* POINT TO READ SECTOR          */
         LA    @12,CPARSECT(,R1)                                   0368
         ST    @12,CCWAREA(,RW3)                                   0368
*           CALL BLDSS;             /* BUILD REST OF SET SECTOR      */
         BAL   @14,BLDSS                                           0369
*           CCWAREA=ADDR(CPARSID);  /* POINT BACK TO HEADER          */
         LA    @12,CPARSID(,R1)                                    0370
         ST    @12,CCWAREA(,RW3)                                   0370
*           CCWCODE=CCSIDEQ;        /* SET COMMAND CODE              */
         MVI   CCWCODE(RW3),X'31'                                  0371
*           CCWCC=ON;               /* COMMAND CHAINING BIT          */
*           CCWSLI=ON;              /* SUPRESS INCORRECT LENGTH      */
         OI    CCWCC(RW3),B'01100000'                              0373
*           CCWLEN=LENGTH(CPARSID); /* SET SEARCH ID ARG LENGTH      */
         MVC   CCWLEN(2,RW3),@CH00093                              0374
*           CALL BLDTIC;            /* BUILD TIC                     */
         BAL   @14,BLDTIC                                          0375
*           R4=CPAIDAL;             /* POINT TO FIRST OF IDAL        */
         L     R4,CPAIDAL(,R1)                                     0376
*           RFY                                                    0377
*             R15 RSTD;             /*                       @ZA27961*/
*           R15=(CPABLKSZ+PAGE-1)&-PAGE;/* ROUND UP          @ZA27961*/
         L     R15,CPABLKSZ(,R1)                                   0378
         SL    R15,@CF02227                                        0378
         N     R15,@CF02228                                        0378
*           R15=(R15/PAGE+1)*FOUR;  /* SIZE OF IDAL SET      @ZA27961*/
         LR    @14,R15                                             0379
         SRL   @14,11                                              0379
         AL    @14,@CF00054                                        0379
         SLA   @14,2                                               0379
         LR    R15,@14                                             0379
*           DO R6=CPABCINV TO 1 BY-1;/* 1 RD CCW/BLK/CINV            */
         LH    R6,CPABCINV(,R1)                                    0380
         B     @DE00380                                            0380
@DL00380 DS    0H                                                  0381
*             CCWAREA=R4;           /* CCW AREA IN IDAL              */
         ST    R4,CCWAREA(,RW3)                                    0381
*             IF R6=CPABCINV THEN   /* IF FIRST CCW                  */
         CH    R6,CPABCINV(,R1)                                    0382
         BNE   @RF00382                                            0382
*               CCWCODE=CCRD;       /* NO MT FOR FIRST READ DATA     */
         MVI   CCWCODE(RW3),X'06'                                  0383
*             ELSE                  /* IF NOT FIRST CCW              */
*               CCWCODE=CCMTRD;     /* MT ON                         */
         B     @RC00382                                            0384
@RF00382 MVI   CCWCODE(RW3),X'86'                                  0384
*             CCWCC=ON;             /* CC ON AS USUAL                */
@RC00382 DS    0H                                                  0386
*             CCWIDAL=ON;           /* SET IDAL BIT ON               */
         OI    CCWCC(RW3),B'01000100'                              0386
*             CCWLEN=CPABLKSZ;      /* SET CCW LENGTH                */
         L     @14,CPABLKSZ(,R1)                                   0387
         STH   @14,CCWLEN(,RW3)                                    0387
*             R4=R4+R15;            /* NEXT IDAL SET         @ZA27961*/
         ALR   R4,R15                                              0388
*             RW3=RW3+LENGTH(CCW);  /* POINT TO NEXT CCW             */
         AL    RW3,@CF00061                                        0389
*           END;                    /* BUILD LAST NOP CCW            */
         BCTR  R6,0                                                0390
@DE00380 LTR   R6,R6                                               0390
         BP    @DL00380                                            0390
*           RFY                                                    0391
*             R15 UNRSTD;           /*                       @ZA27961*/
*           CPARCPE=ADDR(CCW);      /* RESET POINTER TO LAST CCW     */
         ST    RW3,CPARCPE(,R1)                                    0392
*           CALL BLDNOP;            /* BUILD NOP                     */
         BAL   @14,BLDNOP                                          0393
*         END;                                                     0394
*     END;                                                         0395
@RF00363 DS    0H                                                  0396
*   GEN SETS(RW2,RW3,FRRSCURR,FRRSELEN) REFS(PSACSTK,FRRS,FRRSEMP) 0396
*       (SETFRR  D,WRKREGS=(RW2,RW3));/*                     @Y30SDLC*/
@RF00164 DS    0H                                                  0396
         SETFRR  D,WRKREGS=(RW2,RW3)
*   RETURN CODE(0) TO CALLER;       /* EXIT WITH NO ERROR    @ZA26357*/
         L     @14,IOMSAVE5(,RIOMB)                                0397
         SLR   @15,@15                                             0397
         BR    @14                                                 0397
         EJECT
*BLDSEEKH:                                                         0398
*                                                                  0398
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD SEEK HEAD CCW                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0398
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0398
BLDSEEKH DS    0H                                                  0399
*   RESPECIFY                                                      0399
*     R14 RESTRICTED;                                              0399
*   CCWAREA=R4;                     /* SET SEEK ADDRESS              */
         ST    R4,CCWAREA(,RW3)                                    0400
*   CCWCODE=CCSEEKH;                /* SET COMMAND CODE              */
         MVI   CCWCODE(RW3),X'1B'                                  0401
*   CCWCC=ON;                       /* SET COMMAND CHAINING ON       */
         OI    CCWCC(RW3),B'01000000'                              0402
*   CCWLEN=LENGTH(CPAWSEEK);        /* SET LENGTH OF SEEK ARG        */
         MVC   CCWLEN(2,RW3),@CH00108                              0403
*   RW3=RW3+LENGTH(CCW);            /* POINT TO NEXT CCW             */
         AL    RW3,@CF00061                                        0404
*   RESPECIFY                                                      0405
*     R14 UNRESTRICTED;                                            0405
*   END BLDSEEKH;                                                  0406
@EL00002 DS    0H                                                  0406
@EF00002 DS    0H                                                  0406
@ER00002 BR    @14                                                 0406
*BLDSS:                                                            0407
*                                                                  0407
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD SET SECTOR CCW                                          */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0407
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0407
BLDSS    DS    0H                                                  0408
*   RESPECIFY                                                      0408
*     R14 RESTRICTED;                                              0408
*   CCWCODE=CCSS;                   /* SET COMMAND CODE              */
         MVI   CCWCODE(RW3),X'23'                                  0409
*   CCWSLI=ON;                      /* SUPPRESS LENGTH               */
*   CCWCC=ON;                       /* SET COMMAND CHAINING          */
         OI    CCWSLI(RW3),B'01100000'                             0411
*   CCWLEN=1;                       /* SET DUMMY LENGTH              */
         MVC   CCWLEN(2,RW3),@CH00054                              0412
*   RW3=RW3+LENGTH(CCW);            /* POINT TO NEXT CCW             */
         AL    RW3,@CF00061                                        0413
*   RESPECIFY                                                      0414
*     R14 UNRESTRICTED;                                            0414
*   END BLDSS;                                                     0415
@EL00003 DS    0H                                                  0415
@EF00003 DS    0H                                                  0415
@ER00003 BR    @14                                                 0415
*BLDNOP:                                                           0416
*                                                                  0416
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD NO OPERATION CCW                                        */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0416
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0416
BLDNOP   DS    0H                                                  0417
*   RESPECIFY                                                      0417
*     R14 RESTRICTED;                                              0417
*   CCWCODE=CCNOP;                  /* SET COMMAND CODE FOR NOP      */
         MVI   CCWCODE(RW3),X'03'                                  0418
*   CCWSLI=ON;                      /* SUPPRESS LENGTH ERROR         */
         OI    CCWSLI(RW3),B'00100000'                             0419
*   CCWLEN=2;                       /* SET LENGTH AS DUMMY           */
         MVC   CCWLEN(2,RW3),@CH00131                              0420
*   RESPECIFY                                                      0421
*     R14 UNRESTRICTED;                                            0421
*   END BLDNOP;                                                    0422
@EL00004 DS    0H                                                  0422
@EF00004 DS    0H                                                  0422
@ER00004 BR    @14                                                 0422
*BLDTIC:                                                           0423
*                                                                  0423
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD TRANSFER IN CHANNEL CCW                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0423
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0423
BLDTIC   DS    0H                                                  0424
*   RESPECIFY                                                      0424
*    (R14,                                                         0424
*     R15) RESTRICTED;              /* R15 = IDAL INCREMENT  @ZA27961*/
*   RW3=RW3+LENGTH(CCW);            /* POINT TO NEXT CCW             */
         LA    @12,8                                               0425
         ALR   RW3,@12                                             0425
*   CCWAREA=ADDR(CCW)-LENGTH(CCW);  /* SET TIC TO BRANCH BACK        */
         LR    @02,RW3                                             0426
         SLR   @02,@12                                             0426
         ST    @02,CCWAREA(,RW3)                                   0426
*   CCWCODE=CCTIC;                  /* SET COMMAND CODE              */
         MVI   CCWCODE(RW3),X'08'                                  0427
*   RW3=RW3+LENGTH(CCW);            /* POINT TO NEXT CCW             */
         ALR   RW3,@12                                             0428
*   RESPECIFY                                                      0429
*    (R14,                                                         0429
*     R15) UNRESTRICTED;            /* RELEASE REGISTERS     @ZA27961*/
*   END BLDTIC;                                                    0430
@EL00005 DS    0H                                                  0430
@EF00005 DS    0H                                                  0430
@ER00005 BR    @14                                                 0430
         EJECT
*GETWS:                                                            0431
*                                                                  0431
*   /*****************************************************************/
*   /*                                                               */
*   /* GET WORKING STORAGE FOR IDACPA                                */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0431
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0431
GETWS    DS    0H                                                  0432
*   RESPECIFY                                                      0432
*     R14 RESTRICTED;               /*                       @Y30SDLC*/
*   IOMSAVE6=R14;                   /* SAVE RETURN REGISTER          */
         ST    R14,IOMSAVE6(,RIOMB)                                0433
*   RESPECIFY                                                      0434
*     R14 UNRESTRICTED;             /*                       @Y30SDLC*/
*   SLEN=RW4;                       /* SAVE ORIGINAL LENGTH          */
         STH   RW4,SLEN(,RIOMB)                                    0435
*   RW4=RW4+LENGTH(RFLD);           /* ALLOW FOUR EXTRA BYTES        */
         AL    RW4,@CF00068                                        0436
*   RW4=RW4+SGL-1;                  /* ROUND UP TO NUMBER            */
         SL    RW4,@CF02229                                        0437
*   RW4=RW4/SGL;                    /* OF SGL-BYTE SEGMENTS          */
         SRL   RW4,8                                               0438
*   SMASK=STMASK(RW4);              /* SET STARTING MASK             */
         LA    @12,STMASK-1(RW4)                                   0439
         MVC   SMASK(1,RIOMB),0(@12)                               0439
*   SCNT=9-RW4;                     /* SET STARTING COUNT            */
         LA    @12,9                                               0440
         SLR   @12,RW4                                             0440
         STC   @12,SCNT(,RIOMB)                                    0440
*   RESPECIFY                                                      0441
*     IDAWSHD BASED(RW4);                                          0441
*LOOP1:                                                            0442
*   RW4=IOMSAVE7;                   /* LOAD FIRST WSHD ADDR  @ZA26357*/
LOOP1    L     RW4,IOMSAVE7(,RIOMB)                                0442
*   DO UNTIL RW4=0;                 /* LOOP THRU ALL WSHD LOOKING FOR
*                                      SLOT WITH ENOUGH CORE         */
@DL00443 DS    0H                                                  0444
*     RW2=WSHDNEXT;                 /* LOAD PTR TO NEXT WSHD         */
         L     RW2,WSHDNEXT-1(,RW4)                                0444
         LA    RW2,0(,RW2)                                         0444
*LOOP2:                                                            0445
*     DO RW3=WSHDNUS TO 1 BY-1;     /* LOOP THRU SLOTS               */
LOOP2    LH    RW3,WSHDNUS(,RW4)                                   0445
         B     @DE00445                                            0445
@DL00445 DS    0H                                                  0446
*       IF WSHDSFNO(1)=OFF THEN     /* IF SOME CORE REMAINS  @ZA27961*/
         TM    WSHDSFNO(RW4),B'10000000'                           0446
         BNZ   @RF00446                                            0446
*         DO;                                                      0447
*           R6=SMASK;               /* LOAD STARTING MASK            */
         SLR   R6,R6                                               0448
         IC    R6,SMASK(,RIOMB)                                    0448
*LOOP3:                                                            0449
*           DO RW1=SCNT TO 1 BY-1;  /* LOOP WITH SHIFT COUNT         */
LOOP3    SLR   RW1,RW1                                             0449
         IC    RW1,SCNT(,RIOMB)                                    0449
         B     @DE00449                                            0449
@DL00449 DS    0H                                                  0450
*             RESPECIFY                                            0450
*               R14 RESTRICTED;     /*                       @ZA04714*/
*             GEN SETS(RW3,R15);                                   0451
         L     R14,WSHDSBV(RW4)        LOAD 1ST WORD       /*@ZA04714*/
         EX    R6,TEST                 TEST UNDER MASK W / R6
         BNZ   ENDLOOP3                BR IF BITS NOT ALL ZEROES
         LR    R15,R6                  COPY SUCESSFUL MASK
         OR    R15,R14                 OR BITS TO GET CORE /*@ZA04714*/
         CS    R14,R15,WSHDSBV(RW4) TRY TO SET BITS ON     /*@ZA04714*/
         BE    ENDUP                   BR IF SUCCESSFUL
ENDLOOP3 SRL   R6,1                    SHIFT MASK FOR NEXT PASS
*             RESPECIFY                                            0452
*               R14 UNRESTRICTED;   /*                       @ZA04714*/
*           END LOOP3;                                             0453
         BCTR  RW1,0                                               0453
@DE00449 LTR   RW1,RW1                                             0453
         BP    @DL00449                                            0453
*         END;                                                     0454
*       RW4=RW4+LENGTH(WSHDSLT);    /* MOVE BASE FOR NEXT SLOT       */
@RF00446 AL    RW4,@CF00056                                        0455
*     END LOOP2;                                                   0456
         BCTR  RW3,0                                               0456
@DE00445 LTR   RW3,RW3                                             0456
         BP    @DL00445                                            0456
*     RW4=RW2;                      /* POINT TO NEXT WSHD            */
         LR    RW4,RW2                                             0457
*   END;                                                           0458
@DE00443 LTR   RW4,RW4                                             0458
         BNZ   @DL00443                                            0458
         EJECT
*LOOP4:                                                            0459
*   RW4=IOMSAVE7;                   /* LOAD PTR 1ST WSHD     @Y30SDLC*/
LOOP4    L     RW4,IOMSAVE7(,RIOMB)                                0459
*   DO UNTIL RW4=0;                 /* LOOP THRU WSHD CHAIN          */
@DL00460 DS    0H                                                  0461
*     IF WSHDNUS<DIM(WSHDSLT) THEN  /* IF ANY SLOTS UNUSED           */
         LH    @12,WSHDNUS(,RW4)                                   0461
         C     @12,@CF00068                                        0461
         BNL   @RF00461                                            0461
*       DO;                                                        0462
*         RW2=RW4+WSHDNUS*LENGTH(WSHDSLT);/* PT TO 1ST UNUSED SLOT   */
         LR    RW2,@12                                             0463
         SLA   RW2,4                                               0463
         ALR   RW2,RW4                                             0463
*         DO RW3=WSHDNUS+1 TO DIM(WSHDSLT);/* LOOK FOR UNUSED SLT    */
         AL    @12,@CF00054                                        0464
         LR    RW3,@12                                             0464
         B     @DE00464                                            0464
@DL00464 DS    0H                                                  0465
*           TS(RW2->WSHDSFLG(1));   /* TEST FOR UNUSED SLOT  @ZA27961*/
         TS    WSHDSFLG(RW2)                                       0465
*           BC(8,OUTLOOP4);         /* BRANCH IF OK TO USE           */
         BC    8,OUTLOOP4                                          0466
*           RW2=RW2+LENGTH(WSHDSLT);/* PT TO NEXT SLOT               */
         AL    RW2,@CF00056                                        0467
*         END;                                                     0468
         AL    RW3,@CF00054                                        0468
@DE00464 C     RW3,@CF00068                                        0468
         BNH   @DL00464                                            0468
*       END;                                                       0469
*     RW4=WSHDNEXT;                 /* POINT TO NEXT WSHD            */
@RF00461 L     @12,WSHDNEXT-1(,RW4)                                0470
         LA    @12,0(,@12)                                         0470
         LR    RW4,@12                                             0470
*   END;                                                           0471
@DE00460 LTR   RW4,RW4                                             0471
         BNZ   @DL00460                                            0471
         EJECT
*ENDLOOP4:                                                         0472
*                                                                  0472
*   /*****************************************************************/
*   /*                                                               */
*   /* BUILD A NEW IDAWSHD                                           */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0472
*   RW4=IOMSAVE7;                   /* LOAD ADR FOR 1ST WSHD @Y30SDLC*/
ENDLOOP4 L     RW4,IOMSAVE7(,RIOMB)                                0472
*   R6=WSHDPOOL;                    /* LOAD SUBPOOL FOR GETMAIN      */
         SLR   R6,R6                                               0473
         IC    R6,WSHDPOOL(,RW4)                                   0473
*   RW3=LENGTH(IDAWSHD);            /* LOAD LENGTH FOR GETMAIN       */
         LA    RW3,92                                              0474
*   RESPECIFY                                                      0475
*     R15 RESTRICTED;                                              0475
*   RW1=PSAAOLD;                    /* REG 7 HAS ASCB ADR    @Y30SDLC*/
         L     RW1,PSAAOLD                                         0476
*   R4=PSATOLD;                     /* REG 4 HAS TCB ADR     @Y30SDLC*/
         L     R4,PSATOLD                                          0477
*   RW2=RIOMB;                      /* SAVE PTR TO IOMB      @Y30SDLC*/
         LR    RW2,RIOMB                                           0478
*   IF AMBLSR=ON THEN               /* IF NEED LOCAL CORE    @Y30SDLC*/
         L     @14,IOMAMB(,RIOMB)                                  0479
         TM    AMBLSR(@14),B'01000000'                             0479
         BNO   @RF00479                                            0479
*     GEN REFS(CVTCRMN);                                           0480
*                                                          /*@Y30SDLC*/
        GETMAIN RC,LV=(RW3),SP=(R6),BRANCH=YES
*   ELSE                            /* IF NEED GLOBAL CORE   @Y30SDLC*/
*     DO;                           /*                       @Y30SDLC*/
*                                                                  0481
         B     @RC00479                                            0481
@RF00479 DS    0H                                                  0482
*       /*************************************************************/
*       /*                                                           */
*       /* SETLOCK DESTROYS R11-R14, SAVE OFF R11-R13 IN IOMB        */
*       /*                                                   @Y30DSMD*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0482
*       IOMSAVE9=BASE11;            /* SAVE ELEVEN IN SAVE9. @Y30DSMD*/
         ST    BASE11,IOMSAVE9(,RIOMB)                             0482
*       RESPECIFY                                                  0483
*         R12 RESTRICTED;           /* INFORM COMPILER       @ZA27961*/
*       IOMSAVEB=R13;               /* R13 IS IN SAVE11.     @Y30DSMD*/
         ST    R13,IOMSAVEB(,RIOMB)                                0484
*       GEN REFS(PSALITA,FLC);                                     0485
*                                                                  0485
*                                                          /*@Y30SDLC*/
      SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,                          *
               RELATED=(SALLOC,IDA019SB(GETWS))
*       /*************************************************************/
*       /*                                                           */
*       /* RESTORE R11-R13 BY USING THE COPIES IN THE IOMB.  @Y30DSMD*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0486
*       BASE11=IOMSAVE9;            /* RESTORE REG 11.       @Y30DSMD*/
         L     BASE11,IOMSAVE9(,RIOMB)                             0486
*       IOMSLOC=ON;                 /* NEED TO FREE SALLOC   @Y30SDLC*/
         OI    IOMSLOC(RIOMB),B'00000100'                          0487
*       GEN REFS(WSAGGMFM,CVTGLMN);                                0488
*                                                                  0488
*                                                          /*@Y30SDLC*/
          GETMAIN RC,LV=(RW3),SP=(R6),BRANCH=(YES,GLOBAL)
*       /*************************************************************/
*       /*                                                           */
*       /* SETLOCK DESTROYS R11-R14, SAVE OFF R11-R13 IN IOMB        */
*       /*                                                   @ZA29035*/
*       /* RELEASE SALLOC LOCK                               @ZA29035*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0489
*       GEN REFS(PSALITA,FLC);                                     0489
*                                                                  0489
*                                                          /*@ZA29035*/
      SETLOCK RELEASE,TYPE=SALLOC,RELATED=(SALLOC,IDA019SB(GETWS))
*       /*************************************************************/
*       /*                                                           */
*       /* RESTORE R11-R13 BY USING THE COPIES IN THE IOMB.  @ZA29035*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0490
*       RIOMB=RW2;                  /* RESTORE IOMB BASE     @ZA29035*/
         LR    RIOMB,RW2                                           0490
*       BASE11=IOMSAVE9;            /* RESTORE REG 11.       @ZA29035*/
         L     BASE11,IOMSAVE9(,RIOMB)                             0491
*       RESPECIFY                                                  0492
*         R12 UNRSTD;               /* FREE R12 AS WORK REG  @ZA27961*/
*       R13=IOMSAVEB;               /* LAST REGISTER 13.     @ZA29035*/
         L     R13,IOMSAVEB(,RIOMB)                                0493
*       IOMSLOC=OFF;                /* SALLOC HAS BEEN RELEASED    0494
*                                                            @ZA29035*/
         NI    IOMSLOC(RIOMB),B'11111011'                          0494
*     END;                          /*                       @Y30SDLC*/
*   IF R15^=0 THEN                  /* IF ANY ERROR                  */
@RC00479 LTR   R15,R15                                             0496
         BZ    @RF00496                                            0496
*     DO;                                                          0497
*       RESPECIFY                                                  0498
*         R14 RESTRICTED;           /* PROTECT RETURN REG    @ZA27961*/
*       R14=IOMSAVE6;               /* RESTORE RETURN ADDR   @Y30SDLC*/
         L     R14,IOMSAVE6(,RIOMB)                                0499
*       RETURN CODE(4);             /* RETURN TO CALLER WITH ERROR   */
         LA    @15,4                                               0500
@EL00006 DS    0H                                                  0500
@EF00006 DS    0H                                                  0500
@ER00006 BR    @14                                                 0500
*       RESPECIFY                                                  0501
*         R14 UNRESTRICTED;         /* RELEASE REGISTER      @ZA27961*/
*     END;                                                         0502
*   RESPECIFY                                                      0503
*     R15 UNRESTRICTED;                                            0503
@RF00496 DS    0H                                                  0504
*   RIOMB=RW2;                      /* RESTORE IOMB PTR      @Y30SDLC*/
         LR    RIOMB,RW2                                           0504
*   GEN(LA RW2,0(R1));              /* LOAD GETMAIN RESULT   @ZA29035*/
         LA RW2,0(R1)
*   RW2->IDAWSHD=RW2->IDAWSHD&&RW2->IDAWSHD;/* ZERO WSHD             */
         XC    IDAWSHD(92,RW2),IDAWSHD(RW2)                        0506
*   RW2->WSHDID='44'X;              /* SET CONTROL BLOCK ID          */
         MVI   WSHDID(RW2),X'44'                                   0507
*   RW2->WSHDLEN=LENGTH(IDAWSHD);   /* SET LENGTH OF CONTROL BLOCK   */
         MVC   WSHDLEN(2,RW2),@CH02230                             0508
*   RW2->WSHDPOOL=R6;               /* SET SUBPOOL OF CONTROL BLOCK  */
         STC   R6,WSHDPOOL(,RW2)                                   0509
*   RW2->WSHDSFLG(1)='FF'X;         /* RESERVE FIRST SLOT    @ZA27961*/
         MVI   WSHDSFLG(RW2),X'FF'                                 0510
*   RW4=IOMSAVE7;                   /* LOAD PTR 1ST WSHD     @Y30SDLC*/
         L     RW4,IOMSAVE7(,RIOMB)                                0511
*LOOP5:                                                            0512
*   DO WHILE WSHDNEXT^=0;           /* FIND LAST WSHD                */
LOOP5    B     @DE00512                                            0512
@DL00512 DS    0H                                                  0513
*     RW4=WSHDNEXT;                 /* LOAD PTR TO NEXT WSHD         */
         L     @12,WSHDNEXT-1(,RW4)                                0513
         LA    @12,0(,@12)                                         0513
         LR    RW4,@12                                             0513
*   END;                                                           0514
@DE00512 L     @12,WSHDNEXT-1(,RW4)                                0514
         LA    @12,0(,@12)                                         0514
         LTR   @12,@12                                             0514
         BNZ   @DL00512                                            0514
*   RW3=WSHDGMTB;                   /* LOAD TS BYTE          @ZA29035*/
         SLR   RW3,RW3                                             0515
         IC    RW3,WSHDGMTB(,RW4)                                  0515
*   SLL(RW3,24);                    /* MOVE TS BYTE HIGH     @ZA29035*/
         SLL   RW3,24                                              0516
*   R1=RW2×RW3;                     /* INCLUDE TS BYTE       @ZA29035*/
         LR    R1,RW2                                              0517
         OR    R1,RW3                                              0517
*   CS(RW3,R1,WSHDACHN);            /* ADD WSHD TO CHAIN     @ZA29035*/
         CS    RW3,@01,WSHDACHN(RW4)                               0518
*   BC(4,LOOP5);                    /* IF IF CS FAIL                 */
         BC    4,LOOP5                                             0519
*   RW4=RW2;                        /* POINT TO NEW WSHD             */
         LR    RW4,RW2                                             0520
*OUTLOOP4:                                                         0521
*                                                                  0521
*   /*****************************************************************/
*   /*                                                               */
*   /* BUMP THE USED SLOT COUNT (WSHDNUS)                            */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0521
*   GEN;                                                           0521
OUTLOOP4 DS    0H                                                  0521
         LA  RW3,WSHDNUS-2(RW4) PT TO WORD BEFORE WSHDNUS
LOOP6    L     R6,0(RW3)                LOAD WORD CONTAINING WSHDNUS
         LR    RW1,R6                  COPY WORD
         LA  RW1,1(RW1)                BUMP WSHDNUS
         CS  R6,RW1,0(RW3) SWAP IN RESULT
         BNE   LOOP6                   BR IF NOT SUCCESSFUL
         EJECT
*                                                                  0522
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE GETMAIN FOR NEW SLOT CORE BLOCK                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0522
*   RW3=PAGE;                       /* LOAD LEN FOR GETMAIN  @Y30SDLC*/
         LA    RW3,2048                                            0522
*   RESPECIFY                                                      0523
*     R15 RESTRICTED;                                              0523
*   RW1=PSAAOLD;                    /* REG 7 HAS ASCB ADR    @Y30SDLC*/
         L     RW1,PSAAOLD                                         0524
*   R4=PSATOLD;                     /* REG 4 HAS TCB ADR     @Y30SDLC*/
         L     R4,PSATOLD                                          0525
*   R6=RIOMB;                       /* SAVE PTR TO IOMB      @Y30SDLC*/
         LR    R6,RIOMB                                            0526
*   IF AMBLSR=ON THEN               /* IF NEED LOCAL CORE    @Y30SDLC*/
         L     @14,IOMAMB(,RIOMB)                                  0527
         TM    AMBLSR(@14),B'01000000'                             0527
         BNO   @RF00527                                            0527
*     DO;                           /*                       @Y30SSLC*/
*       GEN REFS(CVTCRMN);                                         0529
*                                                          /*@Y30SSLC*/
        GETMAIN RC,LV=(RW3),SP=LSRCPAPL,BRANCH=YES,BNDRY=PAGE /*
*                                                            @ZA27961*/
*       RIOMB=R6;                   /* RESTORE IOMB PTR      @Y30SSLC*/
         LR    RIOMB,R6                                            0530
*     END;                          /*                       @Y30SSLC*/
*   ELSE                            /* IF NEED GLOBAL CORE   @Y30SDLC*/
*     DO;                           /*                       @Y30SDLC*/
*                                                                  0532
         B     @RC00527                                            0532
@RF00527 DS    0H                                                  0533
*       /*************************************************************/
*       /*                                                           */
*       /* SETLOCK DESTROYS R11-R14, SAVE OFF R11-R13 IN IOMB        */
*       /*                                                   @Y30DSMD*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0533
*       IOMSAVE9=BASE11;            /* SAVE ELEVEN IN SAVE9  @Y30SSLC*/
         ST    BASE11,IOMSAVE9(,RIOMB)                             0533
*       RESPECIFY                                                  0534
*         R12 RESTRICTED;           /* PROTECT R12           @ZA27961*/
*       IOMSAVEB=R13;               /* R13 IS IN SAVE11      @Y30SSLC*/
*                                                                  0535
         ST    R13,IOMSAVEB(,RIOMB)                                0535
*       /*************************************************************/
*       /*                                                           */
*       /* GET SALLOC LOCK                                   #Y30DSMD*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0536
*       GEN REFS(PSALITA,FLC);                                     0536
*                                                                  0536
*                                                          /*#Y30SDLC*/
      SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,                          *
               RELATED=(SALLOC,IDA019SB(GETWS))
*       /*************************************************************/
*       /*                                                           */
*       /* RESTORE R11-R13 BY USING THE COPIES IN THE IOMB.  #Y30DSMD*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0537
*       BASE11=IOMSAVE9;            /* RESTORE REG 11        @Y30SSLC*/
         L     BASE11,IOMSAVE9(,RIOMB)                             0537
*       IOMSLOC=ON;                 /* NEED TO FREE SALLOC   @ZA29035*/
         OI    IOMSLOC(RIOMB),B'00000100'                          0538
*       GEN REFS(WSAGGMFM,CVTGLMN);                                0539
*                                                          /*#Y30SDLC*/
     GETMAIN RC,LV=(RW3),SP=GSRCPAPL,BRANCH=(YES,GLOBAL),BNDRY=PAGE
*                                                          /*@ZA27961*/
*       RIOMB=R6;                   /* RESTORE IOMB PTR      @Y30SSLC*/
*                                                                  0540
         LR    RIOMB,R6                                            0540
*       /*************************************************************/
*       /*                                                           */
*       /* SETLOCK DESTROYS R11-R14, SAVE OFF R11-R13 IN IOMB        */
*       /*                                                   #Y30DSMD*/
*       /* RELEASE SALLOC LOCK                               #Y30SDLC*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0541
*       GEN REFS(PSALITA,FLC);                                     0541
*                                                                  0541
*                                                          /*#Y30SDLC*/
      SETLOCK RELEASE,TYPE=SALLOC,RELATED=(SALLOC,IDA019SB(GETWS))
*       /*************************************************************/
*       /*                                                           */
*       /* RESTORE R11-R13 BY USING THE COPIES IN THE IOMB.  #Y30DSMD*/
*       /*                                                           */
*       /*************************************************************/
*                                                                  0542
*       BASE11=IOMSAVE9;            /* RESTORE REG 11.       @Y30SSLC*/
         L     BASE11,IOMSAVE9(,RIOMB)                             0542
*       RESPECIFY                                                  0543
*         R12 UNRSTD;               /* FREE R12 AS WORK REG  @ZA27961*/
*       R13=IOMSAVEB;               /* LAST REGISTER 13.     @Y30SSLC*/
         L     R13,IOMSAVEB(,RIOMB)                                0544
*       IOMSLOC=OFF;                /* SALLOC HAS BEEN RELEASED    0545
*                                                            #Y30SDLC*/
         NI    IOMSLOC(RIOMB),B'11111011'                          0545
*     END;                          /*                       #Y30SDLC*/
*   RW2->WSHDSAD(1)=R1;             /* SAVE GETMAIN RESULT   @ZA27961*/
@RC00527 ST    R1,WSHDSAD(,RW2)                                    0547
*   IF R15^=0 THEN                  /* IF ANY ERROR                  */
         LTR   R15,R15                                             0548
         BZ    @RF00548                                            0548
*     DO;                                                          0549
*       RESPECIFY                                                  0550
*         R14 RESTRICTED;           /* PROTECT RETURN REG    @ZA27961*/
*       R14=IOMSAVE6;               /* RESTORE RETURN ADDR   @Y30SDLC*/
         L     R14,IOMSAVE6(,RIOMB)                                0551
*       RETURN CODE(4);             /* RETURN TO CALLER WITH ERROR   */
         LA    @15,4                                               0552
         BR    @14                                                 0552
*       RESPECIFY                                                  0553
*         R14 UNRESTRICTED;         /* RELEASE REGISTER      @ZA27961*/
*     END;                                                         0554
*   RESPECIFY                                                      0555
*     R15 UNRESTRICTED;                                            0555
@RF00548 DS    0H                                                  0556
*   RW4=RW2;                        /* LOAD BASE FOR IDAWSHD         */
         LR    RW4,RW2                                             0556
*   WSHDSFLN(1)=PAGE;               /* SET LEN OF SLOT FIELD @ZA27961*/
         MVC   WSHDSFLN(3,RW4),@CF02094+1                          0557
*   IF AMBLSR=ON THEN               /* IF LOCAL RESOURCES    @ZA27961*/
         L     @12,IOMAMB(,RIOMB)                                  0558
         TM    AMBLSR(@12),B'01000000'                             0558
         BNO   @RF00558                                            0558
*     WSHDSFSP(1)=LSRCPAPL;         /* SET LSR SUBPOOL       @ZA27961*/
         MVI   WSHDSFSP(RW4),X'FE'                                 0559
*   ELSE                            /* GLOBAL RESOURCES      @ZA27961*/
*     WSHDSFSP(1)=GSRCPAPL;         /* SET GSR SUBPOOL       @ZA27961*/
         B     @RC00558                                            0560
@RF00558 MVI   WSHDSFSP(RW4),X'F5'                                 0560
*   WSHDSBV(1)=SGL;                 /* SET SLOT BIT VALUE    @ZA27961*/
@RC00558 MVC   WSHDSBV(2,RW4),@CH00996                             0561
*   WSHDSBM(1)=SMASK;               /* SET BIT MASK          @ZA27961*/
         MVC   WSHDSBM(1,RW4),SMASK(RIOMB)                         0562
*   R6=SMASK;                       /* LOAD STARTING BIT MASK        */
         SLR   R6,R6                                               0563
         IC    R6,SMASK(,RIOMB)                                    0563
*   WSHDSFLG(1)=0;                  /* SLOT IS AVAILABLE     @ZA27961*/
         MVI   WSHDSFLG(RW4),X'00'                                 0564
*ENDUP:                                                            0565
*   IF WSHDSBM(1)='FF'X THEN        /* IF ALL CORE IS USED   @ZA27961*/
ENDUP    CLI   WSHDSBM(RW4),X'FF'                                  0565
         BNE   @RF00565                                            0565
*     WSHDSFNO(1)=ON;               /* INDICATE NO MORE CORE @ZA27961*/
         OI    WSHDSFNO(RW4),B'10000000'                           0566
*   RW1=SMASK;                      /* LOAD MASK THAT WAS STARTED  0567
*                                      WITH                          */
@RF00565 SLR   RW1,RW1                                             0567
         IC    RW1,SMASK(,RIOMB)                                   0567
*   RW2=R6;                         /* COPY SUCCESSFUL MASK          */
         LR    RW2,R6                                              0568
*   DO RW3=0 BY 1 WHILE R6^=RW1;    /* LOOP UNTIL MASKS MATCH        */
         SLR   RW3,RW3                                             0569
         B     @DE00569                                            0569
@DL00569 DS    0H                                                  0570
*     SRL(RW1,1);                   /* SHIFT MASK IF NO MATCH        */
         SRL   RW1,1                                               0570
*   END;                                                           0571
         AL    RW3,@CF00054                                        0571
@DE00569 CR    R6,RW1                                              0571
         BNE   @DL00569                                            0571
*   R1=WSHDSAD(1)+(RW3*SGL);        /* LOAD ADDR OF CORE     @ZA27961*/
         LR    R1,RW3                                              0572
         SLA   R1,8                                                0572
         AL    R1,WSHDSAD(,RW4)                                    0572
*   RESPECIFY                                                      0573
*     RFLD BASED(R1+SLEN);                                         0573
*   RMASK=RW2&&'FF'X;               /* SET MASK TO FREE CORE         */
         LR    @12,R1                                              0574
         AH    @12,SLEN(,RIOMB)                                    0574
         LA    @02,255                                             0574
         XR    @02,RW2                                             0574
         STC   @02,RMASK(,@12)                                     0574
*   RMAPA=ADDR(IDAWSHD);            /* SAVE SLOT BASE                */
         STCM  RW4,7,RMAPA(@12)                                    0575
*   RESPECIFY                                                      0576
*     R14 RESTRICTED;               /*                       @Y30SDLC*/
*   R14=IOMSAVE6;                   /* RESTORE RETURN REGISTER       */
         L     R14,IOMSAVE6(,RIOMB)                                0577
*   RETURN CODE(0);                 /* RETURN TO USER WITH NO ERROR  */
         SLR   @15,@15                                             0578
         BR    @14                                                 0578
*   RESPECIFY                                                      0579
*     R14 UNRESTRICTED;             /*                       @Y30SDLC*/
*   END GETWS;                                                     0580
*TEST:                                                             0581
*   GEN(TM WSHDSBM(RW4),0);         /* MODEL FOR EX                  */
*                                                                  0581
TEST     TM WSHDSBM(RW4),0
*   /*****************************************************************/
*   /*                                                               */
*   /* IDA121F7 - FRR FOR IDA019SB                           @Y30SDLC*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0582
*IDA121F7:                                                         0582
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);/*                       @Y30SDLC*/
*                                                                  0582
         B     @PB00007                                            0582
IDA121F7 DS    0H                                                  0583
*   /*****************************************************************/
*   /*                                                               */
*   /* AN ID FIELD IS REQUIRED FOR RECORDING REQUESTED IN THE SETRP  */
*   /* MACRO                                                 @Y30SDLC*/
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0583
*   DCL                                                            0583
*     IDFIELD CHAR(24) STATIC LOCAL INIT('IDA019SBIDA019SBIDA121F7');
*                                   /*                       @Y30SDLC*/
*   RESPECIFY                                                      0584
*    (R0,                                                          0584
*     SDWAPTR,                                                     0584
*     R6,                                                          0584
*     RW1,                                                         0584
*     R13,                                                         0584
*     R14,                                                         0584
*     R15) RSTD;                    /*                       @Y30SDLC*/
*   R13=R0;                         /* PTR TO 200-BYTE WORK AREA     */
         LR    R13,R0                                              0585
*   RW1=SDWAPARM;                   /* PTR PARM FLD FR SDWA  @Y30SDLC*/
         L     RW1,SDWAPARM(,SDWAPTR)                              0586
*   BASE11=BASER11;                 /* LOAD BASE REG         @Y30SDLC*/
         L     BASE11,BASER11(,RW1)                                0587
*   SDWADDR=SDWAPTR;                /* PTR TO SDWA FR REG 1  @Y30SDLC*/
         ST    SDWAPTR,SDWADDR(,RW1)                               0588
*   RETADDR=R14;                    /* SAVE RETURN ADDRESS   @Y30SDLC*/
         ST    R14,RETADDR(,RW1)                                   0589
*   RIOMB=IOMBADR;                  /* IOMB PTR FR PARM FLD  @Y30SDLC*/
         L     RIOMB,IOMBADR(,RW1)                                 0590
*   R6=ADDR(MOVELIST)-ADDR(DUMPLIST)-1;/* LEN IN R6          @Y30SDLC*/
*                                                                  0591
         LA    R6,MOVELIST                                         0591
         LA    @12,DUMPLIST                                        0591
         SLR   R6,@12                                              0591
         BCTR  R6,0                                                0591
*   /*****************************************************************/
*   /*                                                               */
*   /* MOVE SDUMP LIST AND EXECUTE IT.                       @Y30SDLC*/
*   /* REG 13 IS POINTED TO A SAVE AREA AT THE START OF THE 200-BYTE */
*   /* WORK AREA AS REQUIRED FOR A BRANCH ENTRY IN THE SDUMP MACRO.  */
*   /* RCPA (R4) POINTS TO THE END OF THE SAVE AREA WHERE SDUMP LIST */
*   /* FORM IS MOVED TO BE EXECUTED. RBUFC (R5) CONTAINS THE ADDRESS */
*   /* SPACE ID. REGISTERS 14 AND 15 ARE USED FOR BRANCH. REGISTER 1 */
*   /* IS ALSO USED.                                                 */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0592
*   R4=R13+SALEN;                   /* PTR TO AREA FOR SDUMP @Y30SDLC*/
         LA    R4,72                                               0592
         ALR   R4,R13                                              0592
*   RBUFC=IOSASID;                  /* ADDR SPACE TO BE DUMPED IN R4
*                                                            @Y30SDLC*/
         L     @12,IOMIOSB(,RIOMB)                                 0593
         LH    RBUFC,IOSASID(,@12)                                 0593
         N     RBUFC,@CF02242                                      0593
*   GEN REFS(MOVELIST,R6,CVTSDMP,CVTMAP);                          0594
*                                                                  0594
*                                                          /*@Y30SDLC*/
           EX      R6,MOVELIST      MOVE SDUMP LIST TO WORK AREA
           SDUMP   BRANCH=YES,ASID=(5),MF=(E,(4))  EXECUTE SDUMP
*   /*****************************************************************/
*   /*                                                               */
*   /* ISSUE SETRP MACRO TO RELEASE THE LOCAL LOCK                   */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0595
*   SDWAPTR=SDWADDR;                /* SETRP REQ SDWA PTR    @Y30SDLC*/
         L     SDWAPTR,SDWADDR(,RW1)                               0595
*   IF IOMSLOC=ON THEN              /* IF SALLOC LOCK HELD   @Y30SDLC*/
         TM    IOMSLOC(RIOMB),B'00000100'                          0596
         BNO   @RF00596                                            0596
*     DO;                           /*                       @Y30SDLC*/
*       DO;                         /* SETRP FRELOCK(SALLOC)         */
*         RESPECIFY                                                0599
*          (GPR00P,                                                0599
*           GPR01P,                                                0599
*           GPR14P,                                                0599
*           GPR15P) RSTD;                                          0599
*         GPR01P->SDWARCDE=0;       /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0600
*         GPR01P->SDWAACF3=GPR01P->SDWAACF3×'00000100'B;/* INITIALIZE
*                                      LOCK FLAGS                    */
         OI    SDWAACF3(GPR01P),B'00000100'                        0601
*         RESPECIFY                                                0602
*          (GPR00P,                                                0602
*           GPR01P,                                                0602
*           GPR14P,                                                0602
*           GPR15P) UNRSTD;                                        0602
*       END;                        /*                       @Y30SDLC*/
*       IOMSLOC=OFF;                /* RESET BIT             @Y30SDLC*/
         NI    IOMSLOC(RIOMB),B'11111011'                          0604
*     END;                          /*                       @Y30SDLC*/
*   DO;                             /* SETRP RECORD(YES)RECPARM(IDFIE
*                                      LD)RC(0)FRELOCK(LOCAL)        */
@RF00596 DS    0H                                                  0607
*     RESPECIFY                                                    0607
*      (GPR00P,                                                    0607
*       GPR01P,                                                    0607
*       GPR14P,                                                    0607
*       GPR15P) RSTD;                                              0607
*     GPR01P->SDWARCDE=0;           /* SAVE RC VALUE                 */
         MVI   SDWARCDE(GPR01P),X'00'                              0608
*     GPR01P->SDWARCRD='1'B;        /* TURN ON RECORD INDICATOR      */
         OI    SDWARCRD(GPR01P),B'10000000'                        0609
*     GPR15P=ADDR(IDFIELD);         /* ACCESS RECORD PARAMETER LIST  */
         LA    GPR15P,IDFIELD                                      0610
*     GPR01P->SDWARECP=GPR15P->I256C(1:24);/* COPY RECORD PARAMETERS */
         MVC   SDWARECP(24,GPR01P),I256C(GPR15P)                   0611
*     GPR01P->SDWAACF4=GPR01P->SDWAACF4×'00000001'B;/* INITIALIZE  0612
*                                      LOCK FLAGS                    */
         OI    SDWAACF4(GPR01P),B'00000001'                        0612
*     RESPECIFY                                                    0613
*      (GPR00P,                                                    0613
*       GPR01P,                                                    0613
*       GPR14P,                                                    0613
*       GPR15P) UNRSTD;                                            0613
*   END;                            /*                       @Y30SDLC*/
*   R14=RETADDR;                    /* RESTORE RETURN ADDR   @Y30SDLC*/
         L     R14,RETADDR(,RW1)                                   0615
*   END IDA121F7;                   /*                       @Y30SDLC*/
@EL00007 DS    0H                                                  0616
@EF00007 DS    0H                                                  0616
@ER00007 BR    @14                                                 0616
@PB00007 DS    0H                                                  0617
*   DECLARE                         /* GENERAL PURPOSE REGISTERS     */
*     GPR00P PTR(31) REG(0),                                       0617
*     GPR01P PTR(31) REG(1),                                       0617
*     GPR14P PTR(31) REG(14),                                      0617
*     GPR15P PTR(31) REG(15);                                      0617
*   DECLARE                         /* COMMON VARIABLES              */
*     I256C CHAR(256) BASED,                                       0618
*     I031F FIXED(31) BASED,                                       0618
*     I031P PTR(31) BASED,                                         0618
*     I015F FIXED(15) BASED,                                       0618
*     I015P PTR(15) BASED,                                         0618
*     I008P PTR(8) BASED,                                          0618
*     I001C CHAR(1) BASED;          /* DECLARES FOR PLS MACROS       */
*   GEN(IDAPATCH);                  /*                       @Y30SDLC*/
         IDAPATCH
*   END IDA019SB                                                   0620
*                                                                  0620
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (IHAPSA  )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (IHAWSAVT)                                       */
*/*%INCLUDE SYSLIB  (AMCBS   )                                       */
*/*%INCLUDE SYSLIB  (IDAVSRT )                                       */
*/*%INCLUDE SYSLIB  (IDAAMB  )                                       */
*/*%INCLUDE SYSLIB  (IDAAMDSB)                                       */
*/*%INCLUDE SYSLIB  (IDABUFC )                                       */
*/*%INCLUDE SYSLIB  (IDAEDB  )                                       */
*/*%INCLUDE SYSLIB  (IDACPA  )                                       */
*/*%INCLUDE SYSLIB  (IDALPMB )                                       */
*/*%INCLUDE SYSLIB  (IDAWSHD )                                       */
*/*%INCLUDE SYSLIB  (IDAIOMB )                                       */
*/*%INCLUDE SYSLIB  (IECDIOSB)                                       */
*/*%INCLUDE SYSLIB  (IHAFRRS )                                       */
*/*%INCLUDE SYSLIB  (IHASDWA )                                       */
*                                                                  0620
*       ;                                                          0620
         B     @EL00001                                            0620
@DATA    DS    0H
@CH00131 DC    H'2'
@CH00093 DC    H'5'
@CH00108 DC    H'6'
@CH02230 DC    H'92'
@CH00996 DC    H'256'
@SX02236 XC    CORE(0,R1),CORE(R1)
@DATD    DSECT
         DS    0F
IDA019SB CSECT
         DS    0F
@CF00054 DC    F'1'
@CH00054 EQU   @CF00054+2
@CF00068 DC    F'4'
@CF00061 DC    F'8'
@CF00056 DC    F'16'
@CF00112 DC    F'24'
@CF02124 DC    F'255'
@CF02094 DC    F'2048'
@CF02228 DC    F'-2048'
@CF02227 DC    F'-2047'
@CF02229 DC    F'-255'
@CF02242 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
IDA019SB CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
SFNOOFF  DC    XL4'FFFF7FFF'
STMASK   DC    X'80C0E0F0F8FCFEFF'
IDFIELD  DC    CL24'IDA019SBIDA019SBIDA121F7'
IDA019SB CSECT
*                                                          /*@Y30SDLC*/
DUMPLIST SDUMP HDR='IDA019SB:IDA121F7 - ABEND FROM BUILD IDACPA',MF=L, X
               SDATA=(SQA,PSA,NUC,RGN,TRT,CSA)
MOVELIST MVC   0(0,4),DUMPLIST
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
IDA019SB CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
R0       EQU   @00
R1       EQU   @01
SDWAPTR  EQU   @01
RIOMB    EQU   @03
R4       EQU   @04
RBUFC    EQU   @05
R6       EQU   @06
RW1      EQU   @07
RW2      EQU   @08
RW3      EQU   @09
RW4      EQU   @10
BASE11   EQU   @11
R12      EQU   @12
R13      EQU   @13
R14      EQU   @14
R15      EQU   @15
GPR00P   EQU   @00
GPR01P   EQU   @01
GPR14P   EQU   @14
GPR15P   EQU   @15
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSATOLD  EQU   PSA+540
PSAAOLD  EQU   PSA+548
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
PSALSFCC EQU   PSA+1012
CVTPTR   EQU   16
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIOQET EQU   CVTMAP+120
CVTIERLC EQU   CVTMAP+144
CVTHEAD  EQU   CVTMAP+160
CVTSV76C EQU   CVTHEAD
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTCBSP  EQU   CVTMAP+256
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
WSAG     EQU   0
WSAGGMFM EQU   WSAG+4
AMCBS    EQU   0
CBSCMP   EQU   AMCBS+16
CBSVSRT  EQU   AMCBS+32
CBSVPTR  EQU   CBSVSRT+4
IDAVSRT  EQU   0
VSRTFLGS EQU   IDAVSRT+12
VSRTCPAH EQU   IDAVSRT+24
VSRTCSL  EQU   IDAVSRT+44
VSRTCSLF EQU   VSRTCSL
VSRTCSBF EQU   VSRTCSLF
VSRTCSPF EQU   VSRTCSLF
IDAAMB   EQU   0
AMBDSB   EQU   IDAAMB+20
AMBEOVR  EQU   IDAAMB+24
AMBFLG0  EQU   AMBEOVR
AMBFLG1  EQU   IDAAMB+25
AMBDSORG EQU   IDAAMB+26
AMBIOBAD EQU   IDAAMB+28
AMBINFL  EQU   IDAAMB+42
AMBDEBPT EQU   IDAAMB+44
AMBOFLGS EQU   IDAAMB+48
AMBFLG2  EQU   IDAAMB+49
AMBEDB   EQU   IDAAMB+52
AMBEOVPT EQU   IDAAMB+56
AMBCSWD1 EQU   IDAAMB+84
AMBAFLG  EQU   AMBCSWD1
AMBLSR   EQU   AMBAFLG
AMBGSR   EQU   AMBAFLG
AMBCPA   EQU   IDAAMB+92
AMBSZRD  EQU   IDAAMB+108
AMBSZWR  EQU   IDAAMB+110
AMBSZFW  EQU   IDAAMB+112
AMBSZCP  EQU   IDAAMB+114
IDAAMDSB EQU   0
AMDATTR  EQU   IDAAMDSB+1
AMDNEST  EQU   IDAAMDSB+4
AMDCINV  EQU   IDAAMDSB+20
AMDHLRBA EQU   IDAAMDSB+28
AMDSSRBA EQU   IDAAMDSB+32
AMDATTR3 EQU   IDAAMDSB+40
AMDSTAT  EQU   IDAAMDSB+48
IDABUFDR EQU   0
BUFDRCIX EQU   IDABUFDR+9
BUFDRFLG EQU   IDABUFDR+11
IDABUFC  EQU   0
BUFCAVL  EQU   IDABUFC
BUFCFLG1 EQU   IDABUFC+1
BUFCIOFL EQU   IDABUFC+2
BUFCMW   EQU   BUFCIOFL
BUFCFMT  EQU   BUFCIOFL
BUFCRRD  EQU   BUFCIOFL
BUFCWC   EQU   BUFCIOFL
BUFCPFCP EQU   BUFCIOFL
BUFCFLG2 EQU   IDABUFC+3
BUFCPLH  EQU   IDABUFC+4
BUFCDDDD EQU   IDABUFC+8
BUFCORBA EQU   IDABUFC+12
BUFCCPA  EQU   IDABUFC+16
BUFCINV  EQU   IDABUFC+28
IDAEDBHD EQU   0
EDBNO    EQU   IDAEDBHD+1
IDAEDB   EQU   0
EDBFLG1  EQU   IDAEDB+2
EDBLPMBA EQU   IDAEDB+4
EDBLORBA EQU   IDAEDB+12
EDBHIRBA EQU   IDAEDB+16
IDACPA   EQU   0
CPAID    EQU   IDACPA
CPALEN   EQU   IDACPA+2
CPAWREAL EQU   IDACPA+4
CPAWCPS  EQU   IDACPA+8
CPAWCPE  EQU   IDACPA+12
CPAWCKS  EQU   IDACPA+16
CPAWCKE  EQU   IDACPA+20
CPARREAL EQU   IDACPA+24
CPARCPS  EQU   IDACPA+28
CPARCPE  EQU   IDACPA+32
CPAWPHAD EQU   IDACPA+36
CPAWSEEK EQU   CPAWPHAD+1
CPAWSID  EQU   IDACPA+44
CPAFWCNT EQU   IDACPA+48
CPARPHAD EQU   IDACPA+52
CPARSEEK EQU   CPARPHAD+1
CPARSID  EQU   CPARSEEK+2
CPAIDAL  EQU   IDACPA+60
CPAVPL   EQU   IDACPA+64
CPABLKSZ EQU   IDACPA+76
CPABCINV EQU   IDACPA+80
CPASTAT1 EQU   IDACPA+83
CPAFLAGS EQU   IDACPA+84
CPAFLAG1 EQU   CPAFLAGS
CPAFLAG2 EQU   CPAFLAGS+1
CPARSECT EQU   IDACPA+86
CPAWSECT EQU   IDACPA+87
CPACCW   EQU   0
IDALPMB  EQU   0
LPMBFLGS EQU   IDALPMB+1
LPMREPL  EQU   LPMBFLGS
LPMBLKSZ EQU   IDALPMB+12
LPMBLKTR EQU   IDALPMB+20
IDAWSHD  EQU   0
WSHDID   EQU   IDAWSHD
WSHDPOOL EQU   IDAWSHD+1
WSHDLEN  EQU   IDAWSHD+2
WSHDACHN EQU   IDAWSHD+4
WSHDGMTB EQU   WSHDACHN
WSHDNEXT EQU   WSHDACHN+1
WSHDNUS  EQU   IDAWSHD+18
WSHDSLT  EQU   IDAWSHD+28
WSHDSAD  EQU   WSHDSLT
@NM00054 EQU   WSHDSAD
WSHDSGMW EQU   WSHDSLT+4
WSHDSFM  EQU   WSHDSGMW
WSHDSFSP EQU   WSHDSFM
WSHDSFLN EQU   WSHDSFM+1
WSHDSBV  EQU   WSHDSGMW+8
WSHDSFLG EQU   WSHDSGMW+10
WSHDSFNO EQU   WSHDSFLG
WSHDSBM  EQU   WSHDSGMW+11
IDAIOMB  EQU   0
IOMCPA   EQU   IDAIOMB+8
IOMAMB   EQU   IDAIOMB+16
IOMIOSB  EQU   IDAIOMB+36
IOMFLAGS EQU   IDAIOMB+40
IOMFL    EQU   IOMFLAGS
IOMAPEND EQU   IOMFL
IOMSTIND EQU   IOMFLAGS+2
IOMSLOC  EQU   IOMSTIND
IOMCKEY  EQU   IDAIOMB+43
IOMSAVER EQU   IDAIOMB+52
IOMSAVE4 EQU   IOMSAVER+16
IOMSAVE5 EQU   IOMSAVER+20
IOMSAVE6 EQU   IOMSAVER+24
IOMSAVE7 EQU   IOMSAVER+28
IOMSAVE8 EQU   IOMSAVER+32
IOMSAVE9 EQU   IOMSAVER+36
IOMSAVEB EQU   IOMSAVER+44
IOSB     EQU   0
IOSFLA   EQU   IOSB
IOSACHN  EQU   IOSFLA
IOSFLB   EQU   IOSB+1
IOSFLC   EQU   IOSB+2
IOSDVALT EQU   IOSFLC
IOSASID  EQU   IOSB+6
IOSPKEY  EQU   IOSB+12
IOSOPT   EQU   IOSB+14
IOSOPT2  EQU   IOSB+15
@NM00060 EQU   IOSB+20
IOSCSW   EQU   @NM00060+1
IOSTATUS EQU   IOSCSW+3
IOSIPIB  EQU   IOSB+44
IOSPATH  EQU   IOSB+86
IOSCHN   EQU   IOSPATH
IOSCKEY  EQU   IOSB+89
IOSEEKA  EQU   IOSB+100
IOSCCHH  EQU   IOSEEKA+3
IOSSKHH  EQU   IOSCCHH+2
FRRS     EQU   0
FRRSHEAD EQU   FRRS
FRRSEMP  EQU   FRRSHEAD
FRRSLAST EQU   FRRSHEAD+4
FRRSELEN EQU   FRRSHEAD+8
FRRSCURR EQU   FRRSHEAD+12
FRRSENTR EQU   0
FRRSFRRA EQU   FRRSENTR
FRRSFLGS EQU   FRRSENTR+4
FRRSFLG1 EQU   FRRSFLGS
FRRSPARM EQU   FRRSENTR+8
SDWA     EQU   0
SDWAPARM EQU   SDWA
SDWAFIOB EQU   SDWA+4
SDWAABCC EQU   SDWAFIOB
SDWACMPF EQU   SDWAABCC
SDWACTL1 EQU   SDWA+8
SDWACMKA EQU   SDWACTL1
SDWAMWPA EQU   SDWACTL1+1
SDWAPMKA EQU   SDWACTL1+4
SDWACTL2 EQU   SDWA+16
SDWACMKP EQU   SDWACTL2
SDWAMWPP EQU   SDWACTL2+1
SDWAPMKP EQU   SDWACTL2+4
SDWAGRSV EQU   SDWA+24
SDWANAME EQU   SDWA+88
SDWAEC1  EQU   SDWA+104
SDWAEMK1 EQU   SDWAEC1
SDWAMWP1 EQU   SDWAEC1+1
SDWAINT1 EQU   SDWAEC1+2
SDWANXT1 EQU   SDWAEC1+4
SDWAAEC1 EQU   SDWA+112
SDWAILC1 EQU   SDWAAEC1+1
SDWAINC1 EQU   SDWAAEC1+2
SDWAICD1 EQU   SDWAINC1+1
SDWAEC2  EQU   SDWA+120
SDWAEMK2 EQU   SDWAEC2
SDWAMWP2 EQU   SDWAEC2+1
SDWAINT2 EQU   SDWAEC2+2
SDWANXT2 EQU   SDWAEC2+4
SDWAAEC2 EQU   SDWA+128
SDWAILC2 EQU   SDWAAEC2+1
SDWAINC2 EQU   SDWAAEC2+2
SDWAICD2 EQU   SDWAINC2+1
SDWASRSV EQU   SDWA+136
SDWAIDNT EQU   SDWA+200
SDWAMCH  EQU   SDWA+204
SDWASTCK EQU   SDWAMCH
SDWAMCHI EQU   SDWAMCH+8
SDWAMCHS EQU   SDWAMCHI
SDWAMCHD EQU   SDWAMCHI+1
SDWARSR1 EQU   SDWAMCH+12
SDWARSR2 EQU   SDWAMCH+13
SDWAFLGS EQU   SDWA+232
SDWAERRA EQU   SDWAFLGS
SDWAERRB EQU   SDWAFLGS+1
SDWAERRC EQU   SDWAFLGS+2
SDWAERRD EQU   SDWAFLGS+3
SDWAIOFS EQU   SDWA+238
SDWACPUA EQU   SDWA+248
SDWAPARQ EQU   SDWA+252
SDWARCDE EQU   SDWAPARQ
SDWAACF2 EQU   SDWAPARQ+1
SDWARCRD EQU   SDWAACF2
SDWAACF3 EQU   SDWAPARQ+2
SDWAACF4 EQU   SDWAPARQ+3
SDWALKWA EQU   SDWA+256
SDWALKWS EQU   SDWALKWA
SDWARECP EQU   SDWA+292
SDWASNPA EQU   SDWA+320
SDWADUMP EQU   SDWASNPA
SDWADPFS EQU   SDWADUMP+1
SDWADDAT EQU   SDWASNPA+4
SDWASDAT EQU   SDWADDAT
SDWAPDAT EQU   SDWADDAT+2
SDWADPSA EQU   SDWA+328
SDWADPSL EQU   SDWADPSA
SDWARA   EQU   SDWA+400
SDWADPVA EQU   SDWARA+2
CCW      EQU   0
CCWAREA  EQU   CCW
CCWCODE  EQU   CCWAREA
CCWFLGS  EQU   CCW+4
CCWDC    EQU   CCWFLGS
CCWCC    EQU   CCWFLGS
CCWSLI   EQU   CCWFLGS
CCWST    EQU   CCWFLGS
CCWIDAL  EQU   CCWFLGS
CCWLEN   EQU   CCW+6
SEARCHID EQU   0
RFLD     EQU   0
RMASK    EQU   RFLD
RMAPA    EQU   RFLD+1
CORE     EQU   0
@NM00118 EQU   0
IOMBADR  EQU   @NM00118
BASER11  EQU   @NM00118+4
SDWADDR  EQU   @NM00118+8
RETADDR  EQU   @NM00118+12
CALLER   EQU   0
FWF      EQU   0
CCHHRKDD EQU   FWF
CCHHR    EQU   CCHHRKDD
I031P    EQU   0
I256C    EQU   0
I001C    EQU   0
I008P    EQU   0
I015F    EQU   0
I015P    EQU   0
I031F    EQU   0
VPLENT   EQU   0
FLC      EQU   PSA
PSARSVTE EQU   PSARSVT
PSACSTK  EQU   PSARSVTE
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTCRMN  EQU   CVTS01+156
CVTSDMP  EQU   CVTS01+232
CVTGLMN  EQU   CVTS01+332
CVTSPSA  EQU   CVTS01+336
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
IOSATTSC EQU   IOSIPIB
IOSWTOWA EQU   IOSIPIB
IOSPCISC EQU   IOSIPIB
@NM00117 EQU   IOMSAVE4
SMASK    EQU   @NM00117
SCNT     EQU   @NM00117+1
SLEN     EQU   @NM00117+2
BUFCRSC1 EQU   BUFCAVL
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
IOSPCIWA EQU   IOSPCISC+44
IOSPCIRS EQU   IOSPCISC+8
@NM00065 EQU   IOSPCISC+4
@NM00064 EQU   IOSPCISC
IOSWRNDR EQU   IOSWTOWA+4
IOSWTOPT EQU   IOSWTOWA+3
IOSWTOCP EQU   IOSWTOWA+2
IOSWTOCH EQU   IOSWTOWA
IOSATTWA EQU   IOSATTSC+40
@NM00063 EQU   IOSATTSC+24
IOSATTSN EQU   IOSATTSC
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTIHASU EQU   CVTS01+696
CVTSUSP  EQU   CVTS01+692
CVTT6SVC EQU   CVTS01+688
CVTCDAL  EQU   CVTS01+684
CVTTCTL  EQU   CVTS01+680
CVTRSUME EQU   CVTS01+676
CVTJTERM EQU   CVTS01+672
CVTASMRM EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTRV609 EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRAC   EQU   CVTS01+644
CVTHSM   EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
@NM00116 EQU   CCW+5
CCWPCI   EQU   CCWFLGS
@NM00115 EQU   SDWA+512
SDWAVRA  EQU   SDWARA+4
SDWAURAL EQU   SDWARA+3
@NM00114 EQU   SDWADPVA
SDWAEBC  EQU   SDWADPVA
SDWAHEX  EQU   SDWADPVA
SDWAVRAL EQU   SDWARA
@NM00113 EQU   SDWA+396
SDWACOMP EQU   SDWA+392
SDWARCPL EQU   SDWA+364
@NM00112 EQU   SDWADPSA+32
SDWATO4  EQU   SDWADPSL+28
SDWAFRM4 EQU   SDWADPSL+24
SDWATO3  EQU   SDWADPSL+20
SDWAFRM3 EQU   SDWADPSL+16
SDWATO2  EQU   SDWADPSL+12
SDWAFRM2 EQU   SDWADPSL+8
SDWATO1  EQU   SDWADPSL+4
SDWAFRM1 EQU   SDWADPSL
@NM00111 EQU   SDWADDAT+3
@NM00110 EQU   SDWAPDAT
SDWAUSPL EQU   SDWAPDAT
SDWADPSW EQU   SDWAPDAT
SDWATJPA EQU   SDWAPDAT
SDWATLPA EQU   SDWAPDAT
SDWADREG EQU   SDWAPDAT
SDWADSAH EQU   SDWAPDAT
SDWADSAS EQU   SDWAPDAT
@NM00109 EQU   SDWADDAT+1
@NM00108 EQU   SDWASDAT
SDWAQQS  EQU   SDWASDAT
SDWACBS  EQU   SDWASDAT
SDWAGTF  EQU   SDWASDAT
SDWASWA  EQU   SDWASDAT
SDWALSQA EQU   SDWASDAT
SDWASQA  EQU   SDWASDAT
SDWANUC  EQU   SDWASDAT
@NM00107 EQU   SDWADUMP+2
@NM00106 EQU   SDWADPFS
SDWASLST EQU   SDWADPFS
@NM00105 EQU   SDWADPFS
SDWADLST EQU   SDWADPFS
SDWADPT  EQU   SDWADPFS
SDWADPID EQU   SDWADUMP
SDWADPLA EQU   SDWA+316
SDWAREXN EQU   SDWARECP+16
SDWACSCT EQU   SDWARECP+8
SDWAMODN EQU   SDWARECP
@NM00104 EQU   SDWA+290
SDWAASID EQU   SDWA+288
SDWATALW EQU   SDWALKWS+28
SDWATDLW EQU   SDWALKWS+24
SDWATNLW EQU   SDWALKWS+20
SDWAAPLW EQU   SDWALKWS+16
SDWAIPLW EQU   SDWALKWS+12
SDWAILLW EQU   SDWALKWS+8
SDWAIULW EQU   SDWALKWS+4
SDWAICLW EQU   SDWALKWS
SDWAFLLK EQU   SDWAACF4
SDWACMS  EQU   SDWAACF4
SDWAOPTM EQU   SDWAACF4
SDWATADB EQU   SDWAACF4
SDWATDNB EQU   SDWAACF4
SDWATNCB EQU   SDWAACF4
SDWAILCH EQU   SDWAACF4
SDWAIUCB EQU   SDWAACF4
SDWAICAT EQU   SDWAACF3
SDWAIPRG EQU   SDWAACF3
SDWASALL EQU   SDWAACF3
SDWAASMP EQU   SDWAACF3
SDWADISP EQU   SDWAACF3
@NM00103 EQU   SDWAACF3
@NM00102 EQU   SDWAACF2
SDWAFREE EQU   SDWAACF2
SDWAUPRG EQU   SDWAACF2
@NM00101 EQU   SDWAACF2
SDWASPIN EQU   SDWAACF2
@NM00100 EQU   SDWAACF2
SDWALCPU EQU   SDWACPUA+2
@NM00099 EQU   SDWACPUA
SDWARECA EQU   SDWA+244
SDWARTYA EQU   SDWA+240
@NM00098 EQU   SDWA+239
@NM00097 EQU   SDWAIOFS
SDWANIOP EQU   SDWAIOFS
SDWANOIO EQU   SDWAIOFS
SDWAIOHT EQU   SDWAIOFS
SDWAIOQR EQU   SDWAIOFS
SDWAFMID EQU   SDWA+236
@NM00096 EQU   SDWAERRD
SDWAMCIV EQU   SDWAERRD
SDWARPIV EQU   SDWAERRD
SDWAMABD EQU   SDWAERRD
SDWACTS  EQU   SDWAERRD
SDWASTAE EQU   SDWAERRD
SDWANRBE EQU   SDWAERRD
SDWACLUP EQU   SDWAERRD
@NM00095 EQU   SDWAERRC
SDWAEAS  EQU   SDWAERRC
SDWAPERC EQU   SDWAERRC
SDWAIRB  EQU   SDWAERRC
SDWASTAI EQU   SDWAERRC
SDWASTAF EQU   SDWAERRC
SDWASRBM EQU   SDWAERRB
SDWALDIS EQU   SDWAERRB
SDWAENRB EQU   SDWAERRB
SDWATYP1 EQU   SDWAERRB
@NM00094 EQU   SDWAERRB
SDWAPGIO EQU   SDWAERRA
SDWATEXC EQU   SDWAERRA
SDWASVCE EQU   SDWAERRA
SDWAABTM EQU   SDWAERRA
SDWASVCD EQU   SDWAERRA
SDWARKEY EQU   SDWAERRA
SDWAPCHK EQU   SDWAERRA
SDWAMCHK EQU   SDWAERRA
SDWATIME EQU   SDWAMCH+20
SDWARFSA EQU   SDWAMCH+16
@NM00093 EQU   SDWAMCH+14
SDWAVEQR EQU   SDWARSR2
SDWAPGFX EQU   SDWARSR2
SDWAFLSQ EQU   SDWARSR2
SDWAFSQA EQU   SDWARSR2
SDWANUCL EQU   SDWARSR2
SDWASPER EQU   SDWARSR2
SDWAINTC EQU   SDWARSR2
SDWAOFLN EQU   SDWARSR2
SDWACHNG EQU   SDWARSR1
SDWAMSER EQU   SDWARSR1
@NM00092 EQU   SDWARSR1
SDWACPID EQU   SDWAMCH+10
SDWATERR EQU   SDWAMCHD
SDWAFPRX EQU   SDWAMCHD
SDWAINSF EQU   SDWAMCHD
SDWAACR  EQU   SDWAMCHD
SDWASCK  EQU   SDWAMCHD
SDWAPSWU EQU   SDWAMCHD
SDWAREGU EQU   SDWAMCHD
SDWASKYF EQU   SDWAMCHD
@NM00091 EQU   SDWAMCHS
SDWARSRF EQU   SDWAMCHS
SDWARSRC EQU   SDWAMCHS
SDWAINVP EQU   SDWAMCHS
SDWATSVL EQU   SDWAMCHS
SDWARCDF EQU   SDWAMCHS
SDWASRVL EQU   SDWAMCHS
SDWASCKE EQU   SDWASTCK+4
SDWASCKB EQU   SDWASTCK
SDWALNTH EQU   SDWAIDNT+1
SDWASPID EQU   SDWAIDNT
SDWASR15 EQU   SDWASRSV+60
SDWASR14 EQU   SDWASRSV+56
SDWASR13 EQU   SDWASRSV+52
SDWASR12 EQU   SDWASRSV+48
SDWASR11 EQU   SDWASRSV+44
SDWASR10 EQU   SDWASRSV+40
SDWASR09 EQU   SDWASRSV+36
SDWASR08 EQU   SDWASRSV+32
SDWASR07 EQU   SDWASRSV+28
SDWASR06 EQU   SDWASRSV+24
SDWASR05 EQU   SDWASRSV+20
SDWASR04 EQU   SDWASRSV+16
SDWASR03 EQU   SDWASRSV+12
SDWASR02 EQU   SDWASRSV+8
SDWASR01 EQU   SDWASRSV+4
SDWASR00 EQU   SDWASRSV
SDWATRN2 EQU   SDWAAEC2+4
SDWAIPC2 EQU   SDWAICD2
SDWAIMC2 EQU   SDWAICD2
SDWAIPR2 EQU   SDWAICD2
@NM00090 EQU   SDWAINC2
@NM00089 EQU   SDWAILC2
SDWAIL2  EQU   SDWAILC2
@NM00088 EQU   SDWAILC2
@NM00087 EQU   SDWAAEC2
SDWAADD2 EQU   SDWANXT2+1
@NM00086 EQU   SDWANXT2
@NM00085 EQU   SDWAEC2+3
SDWASGN2 EQU   SDWAINT2
SDWAEXP2 EQU   SDWAINT2
SDWADEC2 EQU   SDWAINT2
SDWAFPO2 EQU   SDWAINT2
SDWACC2  EQU   SDWAINT2
@NM00084 EQU   SDWAINT2
SDWAPGM2 EQU   SDWAMWP2
SDWAWAT2 EQU   SDWAMWP2
SDWAMCK2 EQU   SDWAMWP2
SDWAECT2 EQU   SDWAMWP2
SDWAKEY2 EQU   SDWAMWP2
SDWAEXT2 EQU   SDWAEMK2
SDWAIO2  EQU   SDWAEMK2
SDWATRM2 EQU   SDWAEMK2
@NM00083 EQU   SDWAEMK2
SDWAPER2 EQU   SDWAEMK2
@NM00082 EQU   SDWAEMK2
SDWATRAN EQU   SDWAAEC1+4
SDWAIPC1 EQU   SDWAICD1
SDWAIMC1 EQU   SDWAICD1
SDWAIPR1 EQU   SDWAICD1
@NM00081 EQU   SDWAINC1
@NM00080 EQU   SDWAILC1
SDWAIL1  EQU   SDWAILC1
@NM00079 EQU   SDWAILC1
@NM00078 EQU   SDWAAEC1
SDWAADD1 EQU   SDWANXT1+1
@NM00077 EQU   SDWANXT1
@NM00076 EQU   SDWAEC1+3
SDWASGN1 EQU   SDWAINT1
SDWAEXP1 EQU   SDWAINT1
SDWADEC1 EQU   SDWAINT1
SDWAFPO1 EQU   SDWAINT1
SDWACC1  EQU   SDWAINT1
@NM00075 EQU   SDWAINT1
SDWAPGM1 EQU   SDWAMWP1
SDWAWAT1 EQU   SDWAMWP1
SDWAMCK1 EQU   SDWAMWP1
SDWAECT1 EQU   SDWAMWP1
SDWAKEY1 EQU   SDWAMWP1
SDWAEXT1 EQU   SDWAEMK1
SDWAIO1  EQU   SDWAEMK1
SDWATRM1 EQU   SDWAEMK1
@NM00074 EQU   SDWAEMK1
SDWAPER1 EQU   SDWAEMK1
@NM00073 EQU   SDWAEMK1
SDWAIOBR EQU   SDWA+100
SDWAEPA  EQU   SDWA+96
@NM00072 EQU   SDWANAME+4
SDWARBAD EQU   SDWANAME
SDWAGR15 EQU   SDWAGRSV+60
SDWAGR14 EQU   SDWAGRSV+56
SDWAGR13 EQU   SDWAGRSV+52
SDWAGR12 EQU   SDWAGRSV+48
SDWAGR11 EQU   SDWAGRSV+44
SDWAGR10 EQU   SDWAGRSV+40
SDWAGR09 EQU   SDWAGRSV+36
SDWAGR08 EQU   SDWAGRSV+32
SDWAGR07 EQU   SDWAGRSV+28
SDWAGR06 EQU   SDWAGRSV+24
SDWAGR05 EQU   SDWAGRSV+20
SDWAGR04 EQU   SDWAGRSV+16
SDWAGR03 EQU   SDWAGRSV+12
SDWAGR02 EQU   SDWAGRSV+8
SDWAGR01 EQU   SDWAGRSV+4
SDWAGR00 EQU   SDWAGRSV
SDWANXTP EQU   SDWACTL2+5
SDWASGP  EQU   SDWAPMKP
SDWAEUP  EQU   SDWAPMKP
SDWADOP  EQU   SDWAPMKP
SDWAFPP  EQU   SDWAPMKP
SDWACCP  EQU   SDWAPMKP
SDWAILP  EQU   SDWAPMKP
SDWAINTP EQU   SDWACTL2+2
SDWASPVP EQU   SDWAMWPP
SDWAWATP EQU   SDWAMWPP
SDWAMCKP EQU   SDWAMWPP
@NM00071 EQU   SDWAMWPP
SDWAKEYP EQU   SDWAMWPP
SDWAEXTP EQU   SDWACMKP
SDWAIOP  EQU   SDWACMKP
SDWANXTA EQU   SDWACTL1+5
SDWASGA  EQU   SDWAPMKA
SDWAEUA  EQU   SDWAPMKA
SDWADOA  EQU   SDWAPMKA
SDWAFPA  EQU   SDWAPMKA
SDWACCA  EQU   SDWAPMKA
SDWAILA  EQU   SDWAPMKA
SDWAINTA EQU   SDWACTL1+2
SDWASPVA EQU   SDWAMWPA
SDWAWATA EQU   SDWAMWPA
SDWAMCKA EQU   SDWAMWPA
@NM00070 EQU   SDWAMWPA
SDWAKEYA EQU   SDWAMWPA
SDWAEXTA EQU   SDWACMKA
SDWAIOA  EQU   SDWACMKA
SDWACMPC EQU   SDWAABCC+1
@NM00069 EQU   SDWACMPF
SDWASTCC EQU   SDWACMPF
@NM00068 EQU   SDWACMPF
SDWASTEP EQU   SDWACMPF
SDWAREQ  EQU   SDWACMPF
@NM00067 EQU   FRRSFLGS+1
@NM00066 EQU   FRRSFLG1
FRRSNEST EQU   FRRSFLG1
FRRSRCUR EQU   FRRSFLG1
FRRSENTS EQU   FRRS+84
FRRSRTMW EQU   FRRS+16
IOSEND   EQU   IOSB+108
IOSSKR   EQU   IOSEEKA+7
IOSSKH2  EQU   IOSSKHH+1
IOSSKH1  EQU   IOSSKHH
IOSSKCC  EQU   IOSCCHH
IOSSKBB  EQU   IOSEEKA+1
IOSSKM   EQU   IOSEEKA
IOSEEK   EQU   IOSB+92
IOSMDM   EQU   IOSB+91
IOSMDB   EQU   IOSB+90
IOSCKEY7 EQU   IOSCKEY
IOSCKEY6 EQU   IOSCKEY
IOSCKEY5 EQU   IOSCKEY
IOSCKEY4 EQU   IOSCKEY
@NM00062 EQU   IOSCKEY
IOSFMSK  EQU   IOSB+88
IOSCUDEV EQU   IOSPATH+1
@NM00061 EQU   IOSCHN
IOSPATH3 EQU   IOSCHN
IOSPATH2 EQU   IOSCHN
IOSEXP   EQU   IOSCHN
IOSGDP   EQU   IOSCHN
IOSAFF   EQU   IOSB+85
IOSRSS1B EQU   IOSB+84
IOSDSID  EQU   IOSB+80
IOSVST   EQU   IOSB+76
IOSRST   EQU   IOSB+72
IOSDIE   EQU   IOSB+68
IOSABN   EQU   IOSB+64
IOSNRM   EQU   IOSB+60
IOSPCI   EQU   IOSB+56
IOSERP   EQU   IOSB+52
IOSPCHN  EQU   IOSB+48
IOSSNS   EQU   IOSB+42
IOSAPMSK EQU   IOSB+40
IOSRES4A EQU   IOSB+36
IOSUSE   EQU   IOSB+32
IOSSRB   EQU   IOSB+28
IOSCSWRC EQU   IOSCSW+5
IOSTSB   EQU   IOSTATUS+1
IOSTSA   EQU   IOSTATUS
IOSCSWCA EQU   IOSCSW
IOSCC    EQU   @NM00060
IOSUCB   EQU   IOSB+16
IOSOPT2X EQU   IOSOPT2
IOSIGP   EQU   IOSOPT2
IOSHTP   EQU   IOSOPT2
IOSRELSE EQU   IOSOPT
IOSAPR   EQU   IOSOPT
IOSTSLL  EQU   IOSOPT
IOSNERP  EQU   IOSOPT
IOSPSLL  EQU   IOSOPT
IOSQISCE EQU   IOSOPT
IOSDEP   EQU   IOSOPT
IOSBYP   EQU   IOSOPT
IOSCOD   EQU   IOSB+13
IOSPKY7  EQU   IOSPKEY
IOSPGDPX EQU   IOSPKEY
IOSIDR   EQU   IOSPKEY
IOSLCL   EQU   IOSPKEY
@NM00059 EQU   IOSPKEY
IOSPGAD  EQU   IOSB+8
IOSPRLVL EQU   IOSB+5
IOSDVRID EQU   IOSB+4
IOSPROC  EQU   IOSB+3
IOSFLC7  EQU   IOSFLC
IOSCTCNR EQU   IOSFLC
IOSRWAIT EQU   IOSFLC
IOSTP    EQU   IOSFLC
IOSCC3WE EQU   IOSFLC
IOSVERIF EQU   IOSDVALT
IOSDVMNT EQU   IOSFLC
IOSLOG   EQU   IOSFLB
IOSBDCST EQU   IOSFLB
IOSMSG   EQU   IOSFLB
IOSFLB4  EQU   IOSFLB
IOSFLB3  EQU   IOSFLB
IOSNOTRS EQU   IOSFLB
IOSSDR   EQU   IOSFLB
IOSDIESE EQU   IOSFLB
IOSIOSB  EQU   IOSFLA
IOSDOM   EQU   IOSFLA
IOSEX    EQU   IOSFLA
IOSSMDB  EQU   IOSFLA
IOSSMDA  EQU   IOSFLA
IOSERR   EQU   IOSFLA
IOSCCHN  EQU   IOSACHN
IOSDCHN  EQU   IOSACHN
IOMSTCB  EQU   IDAIOMB+128
IOMSRBP  EQU   IDAIOMB+124
IOMUFLD  EQU   IDAIOMB+120
IOMNXT1  EQU   IDAIOMB+116
IOMSAVEF EQU   IOMSAVER+60
IOMSAVEE EQU   IOMSAVER+56
IOMSAVED EQU   IOMSAVER+52
IOMSAVEC EQU   IOMSAVER+48
IOMSAVEA EQU   IOMSAVER+40
IOMSAVE3 EQU   IOMSAVER+12
IOMSAVE2 EQU   IOMSAVER+8
IOMSAVE1 EQU   IOMSAVER+4
IOMSAVE0 EQU   IOMSAVER
IOMNSEG  EQU   IDAIOMB+50
IOMNBUF  EQU   IDAIOMB+48
IOMNMOD  EQU   IDAIOMB+46
IOMLOCK  EQU   IDAIOMB+45
IOMPFERR EQU   IDAIOMB+44
IOMSR    EQU   IOMSTIND
IOMSRBM  EQU   IOMSTIND
IOMLLOCK EQU   IOMSTIND
IOMEOVXC EQU   IOMSTIND
IOMEOVTS EQU   IOMSTIND
IOMEOVW  EQU   IOMSTIND
IOMAMUSE EQU   IOMSTIND
@NM00058 EQU   IOMFL+1
IOMIRBSW EQU   IOMFL+1
IOMEEXIT EQU   IOMFL+1
@NM00057 EQU   IOMFL+1
IOMCPRB  EQU   IOMFL+1
IOMDDR   EQU   IOMFL+1
IOMCSW   EQU   IOMFL
IOMPGFIX EQU   IOMFL
IOMADERR EQU   IOMFL
IOMCBERR EQU   IOMFL
@NM00056 EQU   IOMFL
IOMPURGE EQU   IOMFL
IOMAE    EQU   IOMAPEND
IOMNE    EQU   IOMAPEND
IOMPGAD  EQU   IDAIOMB+32
IOMVSL   EQU   IDAIOMB+28
IOMECBPT EQU   IDAIOMB+24
IOMIQE   EQU   IDAIOMB+20
IOMPLH   EQU   IDAIOMB+12
IOMBUFC  EQU   IDAIOMB+4
IOMBID   EQU   IDAIOMB
WSHDSONX EQU   WSHDSGMW+4
WSHDGSR  EQU   @NM00054
@NM00055 EQU   @NM00054
WSHDOCHN EQU   IDAWSHD+24
WSHDGMRA EQU   IDAWSHD+20
WSHDGMWA EQU   IDAWSHD+8
LPMBSST  EQU   IDALPMB+28
LPMBEXT  EQU   IDALPMB+24
@NM00053 EQU   IDALPMB+22
LPMTPC   EQU   IDALPMB+18
LPMTRKAU EQU   IDALPMB+16
LPMBPTRK EQU   IDALPMB+8
LPMAUSZ  EQU   IDALPMB+4
LPMBLEN  EQU   IDALPMB+2
@NM00052 EQU   LPMBFLGS
LPMBSSTH EQU   LPMBFLGS
LPMBTOFL EQU   LPMBFLGS
LPMSS    EQU   LPMBFLGS
LPMBRPS  EQU   LPMBFLGS
LPMBID   EQU   IDALPMB
CPACCWTC EQU   CPACCW+24
CPACCWSI EQU   CPACCW+16
CPACCWSS EQU   CPACCW+8
CPACCWSK EQU   CPACCW
CPACPCHN EQU   IDACPA+92
CPANXT1  EQU   IDACPA+88
CPATKOFL EQU   CPAFLAG2
CPAPFENT EQU   CPAFLAG2
CPAXLRA  EQU   CPAFLAG2
CPARREPL EQU   CPAFLAG2
CPAWREPL EQU   CPAFLAG2
@NM00051 EQU   CPAFLAG1
CPACHNED EQU   CPAFLAG1
CPARRPS  EQU   CPAFLAG1
CPAWRPS  EQU   CPAFLAG1
CPARV    EQU   CPAFLAG1
CPAWCV   EQU   CPAFLAG1
CPAWV    EQU   CPAFLAG1
CPAVPLV  EQU   CPASTAT1
CPASSECT EQU   IDACPA+82
CPAWORK2 EQU   IDACPA+72
CPAWORK1 EQU   IDACPA+68
@NM00050 EQU   CPARPHAD+7
CPARBB   EQU   CPARSEEK
@NM00049 EQU   CPARPHAD
CPAWPHR  EQU   CPAWPHAD+7
CPAWCHR  EQU   CPAWSEEK+2
CPAWBB   EQU   CPAWSEEK
@NM00048 EQU   CPAWPHAD
@NM00047 EQU   IDACPA+1
EDBTKBAL EQU   IDAEDB+20
EDBSTTRK EQU   IDAEDB+8
EDBM     EQU   IDAEDB+3
@NM00046 EQU   EDBFLG1
EDBPSDS  EQU   EDBFLG1
EDBTOFLW EQU   EDBFLG1
EDBLKR   EQU   EDBFLG1
@NM00045 EQU   IDAEDB
EDBLPMBC EQU   IDAEDBHD+4
EDBLEN   EQU   IDAEDBHD+2
EDBID    EQU   IDAEDBHD
BUFCEND  EQU   IDABUFC+64
BUFCUCDN EQU   IDABUFC+60
BUFCUCUP EQU   IDABUFC+56
BUFCMDBT EQU   IDABUFC+52
BUFCHAIN EQU   IDABUFC+48
BUFXORBA EQU   IDABUFC+44
BUFXIRBA EQU   IDABUFC+40
BUFCNXT2 EQU   IDABUFC+37
BUFCIDXL EQU   IDABUFC+36
BUFCDSPC EQU   IDABUFC+32
BUFCWLEN EQU   BUFCINV
BUFCNXT1 EQU   IDABUFC+24
BUFCBAD  EQU   IDABUFC+20
BUFCAMB  EQU   BUFCPLH
@NM00044 EQU   BUFCFLG2
BUFCEOD  EQU   BUFCFLG2
BUFCBSYW EQU   BUFCFLG2
BUFCBSYR EQU   BUFCFLG2
BUFCNLAS EQU   BUFCFLG2
BUFCXDDR EQU   BUFCFLG2
BUFCFIX  EQU   BUFCIOFL
BUFCXEDB EQU   BUFCIOFL
BUFCREAL EQU   BUFCIOFL
BUFCEPT  EQU   BUFCFLG1
BUFCEXC  EQU   BUFCFLG1
BUFCVAL  EQU   BUFCFLG1
BUFCER2  EQU   BUFCFLG1
BUFCER1  EQU   BUFCFLG1
BUFCINS  EQU   BUFCFLG1
BUFCSEG  EQU   BUFCFLG1
BUFCUPG  EQU   BUFCFLG1
BUFCUCNT EQU   BUFCAVL
@NM00043 EQU   IDABUFDR+16
BUFDBUFC EQU   IDABUFDR+12
@NM00042 EQU   BUFDRFLG
BUFDRAVL EQU   BUFDRFLG
BUFDRREL EQU   BUFDRFLG
BUFDRTSB EQU   IDABUFDR+10
BUFDRMAX EQU   BUFDRCIX
BUFDRPFN EQU   IDABUFDR+8
BUFDRPFB EQU   IDABUFDR+4
BUFDRLEN EQU   IDABUFDR+2
BUFDRNO  EQU   IDABUFDR+1
BUFDRID  EQU   IDABUFDR
AMDEXCP  EQU   AMDSTAT+44
AMDNCAS  EQU   AMDSTAT+40
AMDNCIS  EQU   AMDSTAT+36
AMDASPA  EQU   AMDSTAT+32
AMDRETR  EQU   AMDSTAT+28
AMDUPR   EQU   AMDSTAT+24
AMDIREC  EQU   AMDSTAT+20
AMDDELR  EQU   AMDSTAT+16
AMDNLR   EQU   AMDSTAT+12
AMDNEXT  EQU   AMDSTAT+10
AMDNIL   EQU   AMDSTAT+8
AMDSTSP  EQU   AMDSTAT
@NM00041 EQU   IDAAMDSB+41
@NM00040 EQU   AMDATTR3
AMDLM    EQU   AMDATTR3
AMDWAIT  EQU   AMDATTR3
AMDBIND  EQU   AMDATTR3
AMDFAULT EQU   AMDATTR3
AMDUNQ   EQU   AMDATTR3
AMDPARDB EQU   IDAAMDSB+36
AMDMAXRR EQU   AMDSSRBA
AMDNSLOT EQU   AMDHLRBA
AMDLRECL EQU   IDAAMDSB+24
AMDFSCI  EQU   IDAAMDSB+16
AMDFSCA  EQU   IDAAMDSB+14
AMDCIPCA EQU   IDAAMDSB+12
AMDPCTCI EQU   IDAAMDSB+11
AMDPCTCA EQU   IDAAMDSB+10
AMDKEYLN EQU   IDAAMDSB+8
AMDRKP   EQU   IDAAMDSB+6
AMDAXRKP EQU   AMDNEST
AMDLEN   EQU   IDAAMDSB+2
AMDSPAN  EQU   AMDATTR
AMDRRDS  EQU   AMDATTR
AMDRANGE EQU   AMDATTR
AMDORDER EQU   AMDATTR
AMDREPL  EQU   AMDATTR
AMDSDT   EQU   AMDATTR
AMDWCK   EQU   AMDATTR
AMDDST   EQU   AMDATTR
AMDSBID  EQU   IDAAMDSB
AMBTRACE EQU   IDAAMB+120
AMBVIOT  EQU   IDAAMB+116
AMBEXEX  EQU   IDAAMB+100
AMBWSHD  EQU   IDAAMB+96
AMBBM2SH EQU   IDAAMB+88
AMBRDCNT EQU   AMBCSWD1+2
@NM00039 EQU   AMBCSWD1+1
@NM00038 EQU   AMBAFLG
AMBCFX   EQU   AMBAFLG
AMBSIS   EQU   AMBAFLG
AMBDFR   EQU   AMBAFLG
AMBICI   EQU   AMBAFLG
@NM00037 EQU   AMBAFLG
AMBUPLH  EQU   IDAAMB+80
AMBPAMBL EQU   IDAAMB+76
AMBPIXP  EQU   IDAAMB+72
@NM00036 EQU   IDAAMB+68
AMBIWA   EQU   IDAAMB+64
AMBWKA   EQU   IDAAMB+60
AMBAMBXN EQU   AMBEOVPT
AMBRPT   EQU   IDAAMB+50
AMBPUG   EQU   AMBFLG2
AMBBUSY  EQU   AMBOFLGS
AMBEXFG  EQU   AMBOFLGS
@NM00035 EQU   AMBOFLGS
AMBOPEN  EQU   AMBOFLGS
@NM00034 EQU   AMBOFLGS
AMBDEBAD EQU   AMBDEBPT+1
AMBIFLGS EQU   AMBDEBPT
AMBAMETH EQU   IDAAMB+43
AMBSDS   EQU   AMBINFL
AMBUPX   EQU   AMBINFL
AMBUCRA  EQU   AMBINFL
AMBSCRA  EQU   AMBINFL
AMBCAT   EQU   AMBINFL
@NM00033 EQU   AMBINFL
@NM00032 EQU   AMBINFL
AMBTIOT  EQU   IDAAMB+40
@NM00031 EQU   IDAAMB+38
AMBDDSN  EQU   IDAAMB+35
AMBCDSN  EQU   IDAAMB+32
AMBIOMB  EQU   AMBIOBAD
@NM00030 EQU   AMBDSORG+1
AMBDORGA EQU   AMBDSORG+1
@NM00029 EQU   AMBDSORG
AMBINBUF EQU   AMBFLG1
AMBJRN   EQU   AMBFLG1
AMBUBF   EQU   AMBFLG1
AMBSPEED EQU   AMBFLG1
AMBPCAT  EQU   AMBFLG1
AMBMCAT  EQU   AMBFLG1
AMBTYPE  EQU   AMBFLG1
AMBCREAT EQU   AMBFLG1
@NM00028 EQU   AMBFLG0
AMBSWSP  EQU   AMBFLG0
AMBPSDS  EQU   AMBFLG0
AMBCACB  EQU   IDAAMB+16
AMBPH    EQU   IDAAMB+12
AMBBUFC  EQU   IDAAMB+8
AMBLINK  EQU   IDAAMB+4
AMBLEN   EQU   IDAAMB+2
AMBRSC   EQU   IDAAMB+1
AMBID    EQU   IDAAMB
VSRTCSLN EQU   VSRTCSL+5
VSRTCSSP EQU   VSRTCSL+4
VSRTCSAD EQU   VSRTCSL+1
VSRTCSBH EQU   VSRTCSLF
VSRTCSIO EQU   VSRTCSLF
VSRTCSPL EQU   VSRTCSLF
VSRTCSWS EQU   VSRTCSLF
VSRTCSVG EQU   VSRTCSPF
VSRTCSGT EQU   VSRTCSBF
VSRTCSVS EQU   VSRTCSLF
VSRTCSFX EQU   VSRTCSLF
VSRTNEXT EQU   IDAVSRT+40
VSRTASCB EQU   IDAVSRT+36
VSRTVIOT EQU   IDAVSRT+32
VSRTWAH  EQU   IDAVSRT+28
VSRTBUFH EQU   IDAVSRT+20
VSRTPLHH EQU   IDAVSRT+16
VSRTSTRN EQU   IDAVSRT+15
VSRTKL   EQU   IDAVSRT+14
@NM00027 EQU   VSRTFLGS
VSRTBFRF EQU   VSRTFLGS
VSRTIOBF EQU   VSRTFLGS
VSRTLSRF EQU   VSRTFLGS
VSRTGSRF EQU   VSRTFLGS
VSRTEOV  EQU   IDAVSRT+8
VSRTID   EQU   IDAVSRT+4
VSRTLEN  EQU   IDAVSRT+2
VSRTKEY  EQU   IDAVSRT+1
VSRTBKID EQU   IDAVSRT
CBSVUSE  EQU   CBSVSRT
CBSCRTCB EQU   AMCBS+28
CBSCRACA EQU   AMCBS+24
CBSCAXCN EQU   AMCBS+20
CBSMCUCB EQU   CBSCMP
CBSCBP   EQU   AMCBS+12
CBSACB   EQU   AMCBS+8
CBSMCSTA EQU   AMCBS+4
CBSSIZ   EQU   AMCBS+2
CBSID    EQU   AMCBS
WSAGSCHE EQU   WSAG+40
WSAGREST EQU   WSAG+36
WSAGNQDQ EQU   WSAG+32
WSAGMEMT EQU   WSAG+28
WSAGOPTM EQU   WSAG+24
WSAGSTAT EQU   WSAG+20
WSAGEMS0 EQU   WSAG+16
WSAGSSRS EQU   WSAG+12
WSAGRSM  EQU   WSAG+8
WSAGPGIO EQU   WSAG
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00026 EQU   CVTFIX+248
@NM00025 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTCCVT  EQU   CVTXTNT2+40
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTLDEV  EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTSV76Q EQU   CVTSV76C
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTSV76M EQU   CVTIOQET
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00024 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00023 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00022 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00021 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSAULCMS EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSAESTA  EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSATYPE6 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAANEW  EQU   PSA+544
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00020 EQU   FLCFSA
@NM00019 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00018 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00017 EQU   FLCIOA
@NM00016 EQU   FLCMCLA+15
@NM00015 EQU   FLCMCLA+14
@NM00014 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00013 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00012 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00011 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00010 EQU   FLCPER
@NM00009 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00008 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00007 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00006 EQU   FLCPIILC
@NM00005 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00004 EQU   FLCSVILC
@NM00003 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00002 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00001 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@ENDDATA EQU   *
         END   IDA019SB,(C'PLS0106',0701,78180)
