         TITLE '     IKTCAS40 - CONSOLE COMMUNICATION DRIVER           *
                        '
IKTCAS40 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'IKTCAS40  77.238'                                 0001
         DROP  @15
@PROLOG  STM   @14,@12,12(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         ST    @13,@SA00001+4                                      0001
         LA    @14,@SA00001                                        0001
         ST    @14,8(,@13)                                         0001
         LR    @13,@14                                             0001
         EJECT
*  /******************************************************************/
*  /*                                                                */
*  /*  THIS PROGRAM IS ORGANIZED AS FOLLOWS:                         */
*  /*                                                                */
*  /*      A - HOUSEKEEPING                                          */
*  /*                                                                */
*  /*      B - MAINLINE, WHICH CONSISTS OF THE FOLLOWING:            */
*  /*          1)  WAIT ON A LIST OF ECB'S                           */
*  /*          2)  PROCESS AN OPERATOR COMMAND (IF ENTERED)          */
*  /*          3)  PROCESS THE SYNCHRONOUS QUEUE                     */
*  /*          4)  PROCESS MY STOP QUEUE (VIA IKTCAS41)              */
*  /*          5)  PROCESS MY MODIFY QUEUE (VIA IKTCAS42)            */
*  /*          6)  IF A STOP SUB-TASK COMMAND HAS NOT BEEN           */
*  /*              GENERATED, GO BACK AND WAIT ON THE ECB'S          */
*  /*                                                                */
*  /*      C - CLEANUP AND RETURN                                    */
*  /*                                                                */
*  /******************************************************************/
*  TWAPTR = R1;                            /*PICK UP WORK AREA PTR   */
         LR    TWAPTR,R1                                           0039
*  RESPECIFY (R1) UNRESTRICTED;            /*FREE UP R1              */
*  GOSW = '1'B;                            /*INITIALIZE GO SWITCH    */
         OI    GOSW,B'10000000'                                    0041
*  TWACSKIP = 'N';                         /*INITIALIZE SKIP SWITCH  */
         MVI   TWACSKIP(TWAPTR),C'N'                               0042
*  ECBADDR1 = CHECBP;                      /*SET UP                  */
         L     @10,CSCBPTR(,TWAPTR)                                0043
         L     @15,CHECBP(,@10)                                    0043
         ST    @15,ECBADDR1                                        0043
*  ECBADDR2 = ADDR(TWACECB);               /* ECB                    */
         LA    @15,TWACECB(,TWAPTR)                                0044
         ST    @15,ECBADDR2                                        0044
*  ECBEND = '80'X;                         /*  WAIT LIST             */
         MVI   ECBEND,X'80'                                        0045
*  TWACEIFC(1) = 1;                        /*SET UP ESTAE            */
         MVI   TWACEIFC(TWAPTR),X'01'                              0046
*  TWACERA(1) = 0;                         /* FOOTPRINTS             */
         SLR   @15,@15                                             0047
         STCM  @15,7,TWACERA(TWAPTR)                               0047
*  TWACERRS(1) = 0;                        /*  LIST                  */
         ST    @15,TWACERRS(,TWAPTR)                               0048
*  RFY R2 RSTD;                                                    0049
*  R2=ADDR(CHCIBP) ;                       /* LOAD CIB PTR           */
         LA    R2,CHCIBP(,@10)                                     0050
*  GEN ;                                                           0051
  QEDIT  ORIGIN=(R2),CIBCTR=3
*  RFY R2 UNRSTD ;                                                 0052
*  DO WHILE (GOSW = '1'B);                 /*MAINLINE CODE           */
         B     @DE00053                                            0053
@DL00053 DS    0H                                                  0054
*      CALL CHKECBS;                       /*CHK FOR OPERATOR CMND   */
         BAL   @14,CHKECBS                                         0054
*      CALL CHKSYNCQ;                      /*PROCESS SYNC Q          */
         BAL   @14,CHKSYNCQ                                        0055
*      CALL IKTCAS41;                      /*PROCESS STOP Q          */
         L     @15,@CV00059                                        0056
         BALR  @14,@15                                             0056
*      CALL IKTCAS42;                      /*PROCESS MODIFY Q        */
         L     @15,@CV00060                                        0057
         BALR  @14,@15                                             0057
*      TWACSKIP = 'N';                     /*TURN OFF SKIP SWITCH    */
         MVI   TWACSKIP(TWAPTR),C'N'                               0058
*      IF GOSW='1'B                        /* IF CONT SW IS ON       */
*         THEN DO ;                        /* YES,CONTINUE           */
         TM    GOSW,B'10000000'                                    0059
         BNO   @RF00059                                            0059
*              GEN SETS(ECBLIST) ;                                 0061
         WAIT  ECBLIST=ECBLIST    WAIT ON ECB LIST FOR WORK
*              END ;                                               0062
*  END;                                    /*GO BACK TO SLEEP        */
@RF00059 DS    0H                                                  0063
@DE00053 TM    GOSW,B'10000000'                                    0063
         BO    @DL00053                                            0063
*  TWACEIFC(1) = 0;                        /*CLEAR ESTAE FOOTPRINTS  */
         MVI   TWACEIFC(TWAPTR),X'00'                              0064
*  RETURN CODE(0);                         /*FINISHED                */
         SLR   @15,@15                                             0065
         L     @13,4(,@13)                                         0065
         L     @14,12(,@13)                                        0065
         LM    @00,@12,20(@13)                                     0065
         BR    @14                                                 0065
         EJECT
*CHKECBS: PROC OPTIONS (SAVE (14));                                0066
@EL00001 L     @13,4(,@13)                                         0066
@EF00001 DS    0H                                                  0066
@ER00001 LM    @14,@12,12(@13)                                     0066
         BR    @14                                                 0066
CHKECBS  ST    @14,@SA00002                                        0066
*  /******************************************************************/
*  /*                                                                */
*  /*  THIS SUBROUTINE HANDLES THE COMMAND(S) ENTERED BY THE         */
*  /*  OPERATOR (IF ANY).  THE MAIN PROCESSING IS AS FOLLOWS:        */
*  /*                                                                */
*  /*  -   ZERO OUT TWACECB (ECB USED BY OTHER TASKS TO POST ME)     */
*  /*  -   IF OPERATOR COMMAND ECB NOT POSTED, EXIT                  */
*  /*  -   ZERO OUT OPERATOR COMMAND ECB                             */
*  /*  -   IF CIB Q IS EMPTY, EXIT                                   */
*  /*  -   USING THE FIRST CIB IN THE Q, BUILD THE PROPER TYPE OF    */
*  /*      W.E.                                                      */
*  /*  -   PUT THE W.E. ON THE PROPER ASYNCHRONOUS Q                 */
*  /*  -   DEQUEUE THE CIB USING THE QEDIT MACRO                     */
*  /*  -   GO BACK UP AND SEE IF THE CIB Q IS NOW EMPTY              */
*  /*                                                                */
*  /******************************************************************/
*  TWACECB = TWACECB && TWACECB;           /*CLEAR MY WAIT ECB       */
         XC    TWACECB(4,TWAPTR),TWACECB(TWAPTR)                   0067
*      GEN (MODESET KEY=ZERO,MODE=SUP)                             0068
*          REFS(R0,R1,R14,R15);                                    0068
         MODESET KEY=ZERO,MODE=SUP
*      OPRTRECB = OPRTRECB && OPRTRECB;    /*CLEAR OPERATOR ECB      */
         L     @10,CSCBPTR(,TWAPTR)                                0069
         L     @10,CHECBP(,@10)                                    0069
         XC    OPRTRECB(4,@10),OPRTRECB(@10)                       0069
*      GEN (MODESET KEY=NZERO,MODE=PROB)                           0070
*          REFS(R0,R1,R14,R15);                                    0070
         MODESET KEY=NZERO,MODE=PROB
*      DO WHILE (CIBPTR ^= 0);             /*PROCESS CIB Q           */
         B     @DE00071                                            0071
@DL00071 DS    0H                                                  0072
*          IF CIBVERB = '40'X THEN         /*IS THIS A STOP CIB      */
         L     @10,CSCBPTR(,TWAPTR)                                0072
         L     @10,CIBPTR(,@10)                                    0072
         CLI   CIBVERB(@10),X'40'                                  0072
         BNE   @RF00072                                            0072
*              CALL BLDSTPWE;              /*YES - BUILD STOP W.E.   */
         BAL   @14,BLDSTPWE                                        0073
*          ELSE                            /*NO - TRY ANOTHER CODE   */
*              IF CIBVERB = '44'X THEN     /*IS THIS A MODIFY CIB    */
         B     @RC00072                                            0074
@RF00072 L     @10,CSCBPTR(,TWAPTR)                                0074
         L     @10,CIBPTR(,@10)                                    0074
         CLI   CIBVERB(@10),X'44'                                  0074
         BNE   @RF00074                                            0074
*                  CALL BLDMODWE;          /*YES - BUILD MODIFY W.E. */
         BAL   @14,BLDMODWE                                        0075
*          RESPECIFY (R2,R3) RESTRICTED;   /*FREEZE FOR QEDIT MACRO  */
@RF00074 DS    0H                                                  0076
@RC00072 DS    0H                                                  0077
*          R2 = ADDR(CHCIBP);              /*ADDR OF CIB PTR         */
         L     @10,CSCBPTR(,TWAPTR)                                0077
         LA    R2,CHCIBP(,@10)                                     0077
*          R3 = CHCIBP;                    /*ADDR OF CIB TO BE FREED */
         L     R3,CHCIBP(,@10)                                     0078
*          GEN (QEDIT ORIGIN=(R2),BLOCK=(R3)) /*FREE CIB             */
*              REFS (R0,R1,R2,R3,R14,R15);                         0079
         QEDIT ORIGIN=(R2),BLOCK=(R3)
*          RESPECIFY (R2,R3) UNRESTRICTED;                         0080
*      END;                                                        0081
@DE00071 L     @10,CSCBPTR(,TWAPTR)                                0081
         L     @10,CIBPTR(,@10)                                    0081
         LTR   @10,@10                                             0081
         BNZ   @DL00071                                            0081
*END CHKECBS;                                                      0082
@EL00002 DS    0H                                                  0082
@EF00002 DS    0H                                                  0082
@ER00002 L     @14,@SA00002                                        0082
         BR    @14                                                 0082
         EJECT
*BLDSTPWE: PROC OPTIONS (SAVE (14));                               0083
BLDSTPWE ST    @14,@SA00003                                        0083
*  /******************************************************************/
*  /*                                                                */
*  /*  THIS SUBROUTINE WILL GET THE SPACE FOR A STOP W.E., BUILD     */
*  /*  IT, AND THEN Q IT ON THE STOP Q                               */
*  /*                                                                */
*  /******************************************************************/
*  LENGTH = 16;                            /*LENGTH OF W.E.          */
         LA    LENGTH,16                                           0084
*  SUBPL = 4;                              /*SUBPOOL NUMBER          */
         LA    SUBPL,4                                             0085
*  CALL GETSPACE;                          /*GET SPACE               */
         BAL   @14,GETSPACE                                        0086
*  WECODE1T = TCCONSLE;                    /*MY TASK                 */
         L     @10,WEPTR                                           0087
         MVI   WECODE1T(@10),X'04'                                 0087
*  WECODE2T = TCCONSLE;                    /* CODE                   */
         MVI   WECODE2T(@10),X'04'                                 0088
*  WECODE1F = FCCSTOP;                     /*STOP FUNCTION           */
         MVI   WECODE1F(@10),X'11'                                 0089
*  WECODE2F = FCCSTOP;                     /* CODE                   */
         MVI   WECODE2F(@10),X'11'                                 0090
*  WERC = 0;                               /*ZERO OUT                */
         SLR   @05,@05                                             0091
         STH   @05,WERC(,@10)                                      0091
*  WELEN = LENGTH;                         /*LENGTH OF W.E.          */
         STH   LENGTH,WELEN(,@10)                                  0092
*LOOP1:                                    /*COMPARE AND SWAP LOOP   */
*  TEMPPTR = TWACSTPQ;                     /*CURRENT POINTER         */
LOOP1    L     TEMPPTR,TWACSTPQ(,TWAPTR)                           0093
*  WENEXT = TEMPPTR;                       /*SET UP CHAIN FIELD      */
         L     @10,WEPTR                                           0094
         ST    TEMPPTR,WENEXT(,@10)                                0094
*  CS(TEMPPTR,ADDRESS,TWACSTPQ);           /*TRY TO ADD ANOTHER W.E. */
         L     @10,ADDRESS                                         0095
         CS    TEMPPTR,@10,TWACSTPQ(TWAPTR)                        0095
*  BC(7,LOOP1);                            /*DIDN'T WORK - TRY AGAIN */
         BC    7,LOOP1                                             0096
*END BLDSTPWE;                                                     0097
@EL00003 DS    0H                                                  0097
@EF00003 DS    0H                                                  0097
@ER00003 L     @14,@SA00003                                        0097
         BR    @14                                                 0097
         EJECT
*BLDMODWE: PROC OPTIONS (SAVE (14));                               0098
BLDMODWE ST    @14,@SA00004                                        0098
*  /******************************************************************/
*  /*                                                                */
*  /*  THIS SUBROUTINE WILL GET THE SPACE FOR A MODIFY W.E., BUILD   */
*  /*  IT, AND THEN Q IT ON THE MODIFY Q                             */
*  /*                                                                */
*  /******************************************************************/
*                                          /*CALCULATE THE SIZE OF   */
*                                          /*THE W.E. BY ADDING 12   */
*                                          /*(FOR THE SIZE OF THE    */
*                                          /*FIXED PART), CIBDATLN+4 */
*                                          /*(FOR THE SIZE OF THE    */
*                                          /*VARIABLE PART) AND      */
*                                          /*ROUNDING UP TO THE      */
*                                          /*NEXT DOUBLEWORD         */
*  LENGTH = ((12+CIBDATLN+4)+7)/8*8;                               0099
         L     @10,CSCBPTR(,TWAPTR)                                0099
         L     @10,CIBPTR(,@10)                                    0099
         LA    @00,23                                              0099
         AH    @00,CIBDATLN(,@10)                                  0099
         SRDA  @00,32                                              0099
         D     @00,@CF00065                                        0099
         SLA   @01,3                                               0099
         LR    LENGTH,@01                                          0099
*  SUBPL = 4;                              /*SUBPOOL NUMBER          */
         LA    SUBPL,4                                             0100
*  CALL GETSPACE;                          /*GET SPACE               */
         BAL   @14,GETSPACE                                        0101
*  WECODE1T = TCCONSLE;                    /*MY TASK                 */
         L     @10,WEPTR                                           0102
         MVI   WECODE1T(@10),X'04'                                 0102
*  WECODE2T = TCCONSLE;                    /* CODE                   */
         MVI   WECODE2T(@10),X'04'                                 0103
*  WECODE1F = FCCMODFY;                    /*MODIFY FUNCTION         */
         MVI   WECODE1F(@10),X'21'                                 0104
*  WECODE2F = FCCMODFY;                    /* CODE                   */
         MVI   WECODE2F(@10),X'21'                                 0105
*  WERC = 0;                               /*ZERO OUT                */
         SLR   @05,@05                                             0106
         STH   @05,WERC(,@10)                                      0106
*  WELEN = LENGTH;                         /*LENGTH OF W.E.          */
         STH   LENGTH,WELEN(,@10)                                  0107
*  WEDATA(1:CIBDATLN+4) = BLANKS;          /*SPACE OUT               */
         L     @01,CSCBPTR(,TWAPTR)                                0108
         L     @04,CIBPTR(,@01)                                    0108
         LH    @15,CIBDATLN(,@04)                                  0108
         LA    @14,3                                               0108
         ALR   @14,@15                                             0108
         EX    @14,@SM00398                                        0108
*  IF CIBDATLN > 0 THEN                    /*IF PARMS ENTERED THEN   */
         CR    @15,@05                                             0109
         BNH   @RF00109                                            0109
*     MVC(WEDATA(1:CIBDATLN),CIBDATA);     /*SAVE PARAMETERS FROM    */
         L     @01,CSCBPTR(,TWAPTR)                                0110
         L     @01,CIBPTR(,@01)                                    0110
         LH    @05,CIBDATLN(,@01)                                  0110
         BCTR  @05,0                                               0110
         EX    @05,@SM00400                                        0110
*                                          /*MODIFY COMMAND          */
*LOOP2:                                    /*COMPARE AND SWAP LOOP   */
*  TEMPPTR = TWACMODQ;                     /*CURRENT POINTER         */
@RF00109 DS    0H                                                  0111
LOOP2    L     TEMPPTR,TWACMODQ(,TWAPTR)                           0111
*  WENEXT = TEMPPTR;                       /*SET UP CHAIN FIELD      */
         L     @10,WEPTR                                           0112
         ST    TEMPPTR,WENEXT(,@10)                                0112
*  CS(TEMPPTR,ADDRESS,TWACMODQ);           /*TRY TO ADD ANOTHER W.E. */
         L     @10,ADDRESS                                         0113
         CS    TEMPPTR,@10,TWACMODQ(TWAPTR)                        0113
*  BC(7,LOOP2);                            /*DIDN'T WORK - TRY AGAIN */
         BC    7,LOOP2                                             0114
*END BLDMODWE;                                                     0115
@EL00004 DS    0H                                                  0115
@EF00004 DS    0H                                                  0115
@ER00004 L     @14,@SA00004                                        0115
         BR    @14                                                 0115
         EJECT
*CHKSYNCQ: PROC OPTIONS (SAVE (14));                               0116
CHKSYNCQ ST    @14,@SA00005                                        0116
*  /******************************************************************/
*  /*                                                                */
*  /*  THIS SUBROUTINE PROCESSES THE W.E.'S FOUND ON THE             */
*  /*  SYNCHRONOUS QUEUE.  THE MAIN PROCESSING IS AS FOLLOWS:        */
*  /*                                                                */
*  /*  -   IF THE Q IS EMPTY, EXIT                                   */
*  /*  -   IF THE FIRST W.E. IS NOT FOR ME, POST THE OWNER, EXIT,    */
*  /*      AND GO BACK TO SLEEP                                      */
*  /*  -   PROCESS THE W.E., AND DEQUEUE IT                          */
*  /*  -   IF THE Q IS NOW EMPTY, POST ALL OF THE OTHER SUB-TASKS    */
*  /*      AND EXIT                                                  */
*  /*  -   IF THE TOP W.E. IS FOR ME, GO BACK UP TO THE PROCESS W.E. */
*  /*      LINE AND LOOP BACK THRU                                   */
*  /************************** ***************O********************* */
*  RESPECIFY (WESTD) BASED (TWASYNQH);     /*SET UP NEW BASE FOR W.E */
*  IF TWASYNQH ^= 0 THEN                   /*IS SYNC Q NON-EMPTY     */
         L     @10,TWASYNQH(,TWAPTR)                               0118
         LTR   @10,@10                                             0118
         BZ    @RF00118                                            0118
*      DO;                                 /*YES-PROCESS AND DEQUEUE */
*                                          /*W.E.'S WHILE Q NOT EMPTY*/
*                                          /*AND TOP W.E. IS MINE    */
*          DO WHILE (TWASYNQH ^= 0 & WECODE1T = TCCONSLE);         0120
         B     @DE00120                                            0120
@DL00120 DS    0H                                                  0121
*              ADDRESS = TWASYNQH;         /*SAVE FOR PRCSSYNE       */
         L     @10,TWASYNQH(,TWAPTR)                               0121
         ST    @10,ADDRESS                                         0121
*              TEMPPTR = WENEXT;           /*PT TO NEXT W.E. ON CHAIN*/
         L     TEMPPTR,WENEXT(,@10)                                0122
*              CS(TWASYNQH,TEMPPTR,TWASYNQH);  /*DEQUEUE TOP W.E.    */
         L     @10,TWASYNQH(,TWAPTR)                               0123
         CS    @10,@02,TWASYNQH(TWAPTR)                            0123
         BZ    @BC00123                                            0123
         ST    @10,TWASYNQH(,TWAPTR)                               0123
@BC00123 DS    0H                                                  0124
*              CALL PRCSSYNE;              /*PROCESS JUST DEQUED W.E.*/
         BAL   @14,PRCSSYNE                                        0124
*          END;                            /*LOOP BACK THRU          */
@DE00120 L     @10,TWASYNQH(,TWAPTR)                               0125
         LTR   @10,@10                                             0125
         BZ    @DC00120                                            0125
         CLI   WECODE1T(@10),X'04'                                 0125
         BE    @DL00120                                            0125
@DC00120 DS    0H                                                  0126
*          IF TWASYNQH = 0 THEN            /*IS Q EMPTY              */
         L     @10,TWASYNQH(,TWAPTR)                               0126
         LTR   @10,@10                                             0126
         BNZ   @RF00126                                            0126
*              DO;                         /*YES - POST EVERYBODY    */
*              RESPECIFY (R1) RESTRICTED;  /*FREEZE FOR POSTS        */
*              R1 = ADDR(TWAMECB);         /*ADDR OF ECB TO POST     */
         LA    R1,TWAMECB(,TWAPTR)                                 0129
*              GEN (POST  (1))             /*POST MAIN TASK          */
*                  REFS (R0,R1,R14,R15);                           0130
         POST  (1)
*              R1 = ADDR(TWAVECB);         /*ADDR OF ECB TO POST     */
         LA    R1,TWAVECB(,TWAPTR)                                 0131
*              GEN (POST  (1))             /*POST VTAM SUB-TASK      */
*                  REFS (R0,R1,R14,R15);                           0132
         POST  (1)
*              R1 = ADDR(TWAUECB);         /*ADDR OF ECB TO POST     */
         LA    R1,TWAUECB(,TWAPTR)                                 0133
*              GEN (POST  (1))             /*POST USER SUB-TASK      */
*                  REFS (R0,R1,R14,R15);                           0134
         POST  (1)
*              RESPECIFY (R1) UNRESTRICTED; /*FREE UP R1             */
*              END;                                                0136
*          ELSE                                                    0137
*              DO;                         /*NO                      */
         B     @RC00126                                            0137
@RF00126 DS    0H                                                  0138
*              CALL POSTIT;                /*POST PROPER TASK        */
         BAL   @14,POSTIT                                          0138
*              TWACSKIP = 'Y';             /* AND GO BACK TO SLEEP   */
         MVI   TWACSKIP(TWAPTR),C'Y'                               0139
*              END;                                                0140
*      END;                                                        0141
*  RESPECIFY (WESTD);                      /*REVERT TO OLD BASE      */
*END CHKSYNCQ;                                                     0143
@EL00005 DS    0H                                                  0143
@EF00005 DS    0H                                                  0143
@ER00005 L     @14,@SA00005                                        0143
         BR    @14                                                 0143
         EJECT
*POSTIT: PROC OPTIONS (SAVE (14));                                 0144
POSTIT   ST    @14,@SA00006                                        0144
*  /******************************************************************/
*  /*                                                                */
*  /*  THIS SUBROUTINE WILL POST THE TASK WHOSE W.E. IS ON TOP OF    */
*  /*  THE SYNC Q.                                                   */
*  /*                                                                */
*  /******************************************************************/
*  RESPECIFY (WESTD) BASED (TWASYNQH);     /*SET UP NEW BASE FOR W.E.*/
*  RESPECIFY (R1) RESTRICTED;              /*FREEZE FOR POSTS        */
*  IF WECODE1T = TCMAIN THEN               /*W.E. FOR MAIN TASK      */
         L     @10,TWASYNQH(,TWAPTR)                               0147
         CLI   WECODE1T(@10),X'01'                                 0147
         BNE   @RF00147                                            0147
*      DO;                                 /*YES                     */
*      R1 = ADDR(TWAMECB);                 /*ADDR OF ECB TO POST     */
         LA    R1,TWAMECB(,TWAPTR)                                 0149
*      GEN (POST  (1))                     /*POST HIM                */
*          REFS (R0,R1,R14,R15);                                   0150
         POST  (1)
*      END;                                                        0151
*  ELSE                                    /*NO                      */
*      IF WECODE1T = TCVTAM THEN           /*W.E. FOR VTAM SUB-TASK  */
         B     @RC00147                                            0152
@RF00147 L     @10,TWASYNQH(,TWAPTR)                               0152
         CLI   WECODE1T(@10),X'02'                                 0152
         BNE   @RF00152                                            0152
*          DO;                             /*YES                     */
*          R1 = ADDR(TWAVECB);             /*ADDR OF ECB TO POST     */
         LA    R1,TWAVECB(,TWAPTR)                                 0154
*          GEN (POST  (1))                 /*POST HIM                */
*              REFS (R0,R1,R14,R15);                               0155
         POST  (1)
*          END;                                                    0156
*      ELSE                                /*NO - FOR USER SUB-TASK  */
*          DO;                                                     0157
         B     @RC00152                                            0157
@RF00152 DS    0H                                                  0158
*          R1 = ADDR(TWAUECB);             /*ADDR OF ECB TO POST     */
         LA    R1,TWAUECB(,TWAPTR)                                 0158
*          GEN (POST  (1))                 /*POST HIM                */
*              REFS (R0,R1,R14,R15);                               0159
         POST  (1)
*          END;                                                    0160
*  RESPECIFY (WESTD);                      /*REVERT TO OLD BASE      */
*  RESPECIFY (R1) UNRESTRICTED;            /*FREE UP                 */
*END POSTIT;                                                       0163
@EL00006 DS    0H                                                  0163
@EF00006 DS    0H                                                  0163
@ER00006 L     @14,@SA00006                                        0163
         BR    @14                                                 0163
         EJECT
*PRCSSYNE: PROC OPTIONS (SAVE (14));                               0164
PRCSSYNE ST    @14,@SA00007                                        0164
*  /******************************************************************/
*  /*                                                                */
*  /*  THE PURPOSE OF THIS SUBROUTINE IS TO PROCESS A W.E. FROM THE  */
*  /*  SYNC Q.  THE MAIN PROCESSING IS AS FOLLOWS:                   */
*  /*                                                                */
*  /*  -   IF THE W.E. IS A NORMAL RETURN W.E., FREE UP THE SPACE    */
*  /*      STARTING WITH THE ADDRESS OF THE W.E., USING THE LENGTH   */
*  /*      FOUND IN 'WELEN', AND IN SUBPOOL 4.  IN ADDITION, IF THIS */
*  /*      W.E. WAS PLACED HERE BY STOP PROCESSING, TURN 'GOSW' OFF  */
*  /*      AND TURN ON 'TWACSKIP'.                                   */
*  /*  -   IF THE W.E. IS AN END OF TASK W.E., TURN OFF 'GOSW' AND   */
*  /*      TURN ON 'TWACSKIP'.                                       */
*  /*  -   IF THE W.E. IS AN ABNORMAL RETURN MODIFY W.E., ISSUE AN   */
*  /*      APPROPRIATE ERROR MESSAGE                                 */
*  /*  -   EXIT                                                      */
*  /*                                                                */
*  /******************************************************************/
*  IF WECODE1F = FCRETURN THEN             /*NORMAL RETURN W.E.      */
         L     @10,WEPTR                                           0165
         CLI   WECODE1F(@10),X'FF'                                 0165
         BNE   @RF00165                                            0165
*      DO;                                 /*YES                     */
*      IF WECODE2F = FCCSTOP THEN          /*SET UP BY STOP COMMAND  */
         CLI   WECODE2F(@10),X'11'                                 0167
         BNE   @RF00167                                            0167
*          DO;                             /*YES                     */
*          TWACSKIP = 'Y';                 /*TURN ON SKIP SW         */
         MVI   TWACSKIP(TWAPTR),C'Y'                               0169
*          GOSW = '0'B;                    /*TURN OFF LOOP SW        */
         NI    GOSW,B'01111111'                                    0170
*          END;                                                    0171
*      LENGTH = WELEN;                     /*LENGTH OF FREE SPACE    */
@RF00167 L     @10,WEPTR                                           0172
         LH    LENGTH,WELEN(,@10)                                  0172
*      SUBPL = 4;                          /*SUBPOOL NUMBER          */
         LA    SUBPL,4                                             0173
*      CALL FRESPACE;                      /*FREE THE SPACE          */
         BAL   @14,FRESPACE                                        0174
*      RETURN;                             /*EXIT                    */
@EL00007 DS    0H                                                  0175
@EF00007 DS    0H                                                  0175
@ER00007 L     @14,@SA00007                                        0175
         BR    @14                                                 0175
*      END;                                                        0176
*  IF WECODE1F = FCCEOT THEN               /*END OF TASK W.E.        */
@RF00165 L     @10,WEPTR                                           0177
         CLI   WECODE1F(@10),X'03'                                 0177
         BNE   @RF00177                                            0177
*      DO;                                 /*YES                     */
*      TWACSKIP = 'Y';                     /*TURN ON SKIP SW         */
         MVI   TWACSKIP(TWAPTR),C'Y'                               0179
*      GOSW = '0'B;                        /*TURN OFF LOOP SW        */
         NI    GOSW,B'01111111'                                    0180
*      END;                                                        0181
*  ELSE                                    /*NO                      */
*      IF WECODE1F = FCCMODFY THEN         /*ABNRML RETURN MODFY W.E.*/
         B     @RC00177                                            0182
@RF00177 L     @10,WEPTR                                           0182
         CLI   WECODE1F(@10),X'21'                                 0182
         BNE   @RF00182                                            0182
*          DO;                             /*YES                     */
*          IF WECODE2T = TCVTAM THEN       /*REJECTED BY VTAM INTER  */
         CLI   WECODE2T(@10),X'02'                                 0184
         BNE   @RF00184                                            0184
*              DO;                         /*YES                     */
*              RESPECIFY (R1) RESTRICTED;                          0186
*              R1 = 11;                    /*MESSAGE NUMBER          */
         LA    R1,11                                               0187
*              CALL MSGBLK;                /*ADDR OF LIST FORM OF MSG*/
         L     @15,TWAMSG(,TWAPTR)                                 0188
         BALR  @14,@15                                             0188
*              MVC(IKT011I(1:MSGLNGTH),MSGDATA); /*MOVE LIST FORM    */
         L     @10,MSGLNGTH(,R1)                                   0189
         BCTR  @10,0                                               0189
         EX    @10,@SM00403                                        0189
*              R1 = ADDR(IKT011I);         /*ADDR OF LIST FORM       */
         LA    R1,IKT011I                                          0190
*              IF WECODE2F = FCVQUSCE THEN /*MOVE                    */
         L     @10,WEPTR                                           0191
         CLI   WECODE2F(@10),X'13'                                 0191
         BNE   @RF00191                                            0191
*                  IKT011IA = 'QUIESCE';   /* IN                     */
         MVC   IKT011IA(7),@CC00388                                0192
*              ELSE                        /*  PROPER                */
*                  IKT011IA = 'START  ';   /*   IDENTIFIER           */
         B     @RC00191                                            0193
@RF00191 MVC   IKT011IA(7),@CC00389                                0193
*              GEN (WTO   MF=(E,(1)))      /*ISSUE WTO               */
*                  REFS (R0,R1,R14,R15);                           0194
@RC00191 DS    0H                                                  0194
         WTO   MF=(E,(1))
*              RESPECIFY (R1) UNRESTRICTED;                        0195
*              END;                                                0196
*          END;                                                    0197
*END PRCSSYNE;                                                     0198
         B     @EL00007                                            0198
         EJECT
*FRESPACE: PROC OPTIONS (SAVE (14));                               0199
FRESPACE ST    @14,@SA00008                                        0199
*  /******************************************************************/
*  /*                                                                */
*  /*  THIS SUBROUTINE DOES A FREEMAIN FOR THE NUMBER OF BYTES       */
*  /*  SPECIFIED IN 'LENGTH', USING THE ADDRESS FOUND IN 'ADDRESS'   */
*  /*  AS A STARTING ADDRESS, AND USING THE VALUE FOUND IN 'SUBPL'   */
*  /*  AS THE SUBPOOL NUMBER                                         */
*  /*                                                                */
*  /******************************************************************/
*  RESPECIFY (R2,R3) RESTRICTED;                                   0200
*  R2 = LENGTH;                                                    0201
         LR    R2,LENGTH                                           0201
*  R3 = SUBPL;                                                     0202
         LR    R3,SUBPL                                            0202
*  GEN (FREEMAIN EU,LV=(R2),A=ADDRESS,SP=(R3))                     0203
*      REFS (ADDRESS,R0,R1,R2,R3,R14,R15);                         0203
         FREEMAIN EU,LV=(R2),A=ADDRESS,SP=(R3)
*  RESPECIFY (R2,R3) UNRESTRICTED;                                 0204
*END FRESPACE;                                                     0205
@EL00008 DS    0H                                                  0205
@EF00008 DS    0H                                                  0205
@ER00008 L     @14,@SA00008                                        0205
         BR    @14                                                 0205
         EJECT
*GETSPACE: PROC OPTIONS (SAVE (14));                               0206
GETSPACE ST    @14,@SA00009                                        0206
*  /******************************************************************/
*  /*                                                                */
*  /*  THIS SUBROUTINE DOES A GETMAIN FOR THE NUMBER OF BYTES        */
*  /*  SPECIFIED IN 'LENGTH' (SHOULD BE A DOUBLEWORD MULTIPLE),      */
*  /*  FROM THE SUBPOOL SPECIFIED IN 'SUBPL', AND THEN PLACES THE    */
*  /*  STARTING ADDRESS OF THE GETMAIN'ED AREA IN 'ADDRESS'.         */
*  /*                                                                */
*  /******************************************************************/
*  RESPECIFY (R2,R3) RESTRICTED;                                   0207
*  R2 = LENGTH;                                                    0208
         LR    R2,LENGTH                                           0208
*  R3 = SUBPL;                                                     0209
         LR    R3,SUBPL                                            0209
*  GEN (GETMAIN EU,LV=(R2),A=ADDRESS,SP=(R3))                      0210
*      REFS (ADDRESS,R0,R1,R2,R3,R14,R15);                         0210
         GETMAIN EU,LV=(R2),A=ADDRESS,SP=(R3)
*  RESPECIFY (R2,R3) UNRESTRICTED;                                 0211
*END GETSPACE;                                                     0212
@EL00009 DS    0H                                                  0212
@EF00009 DS    0H                                                  0212
@ER00009 L     @14,@SA00009                                        0212
         BR    @14                                                 0212
         EJECT
*END IKTCAS40                                                      0213
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IEECHAIN)                                        *
*/*%INCLUDE SYSLIB  (IEZCIB  )                                        *
*/*%INCLUDE SYSLIB  (IKTCASWA)                                        *
*;                                                                 0213
@DATA    DS    0H
@SM00398 MVC   WEDATA(0,@10),BLANKS
@SM00400 MVC   WEDATA(0,@10),CIBDATA(@04)
@SM00403 MVC   IKT011I(0),MSGDATA(R1)
         DS    0F
@SA00001 DS    18F
@SA00002 DS    1F
@SA00005 DS    1F
@SA00003 DS    1F
@SA00004 DS    1F
@SA00009 DS    1F
@SA00007 DS    1F
@SA00006 DS    1F
@SA00008 DS    1F
         DS    0F
@CF00065 DC    F'8'
@CV00059 DC    V(IKTCAS41)
@CV00060 DC    V(IKTCAS42)
         DS    0D
ADDRESS  DS    A
@CC00388 DC    C'QUIESCE'
@CC00389 DC    C'START  '
BLANKS   DC    CL48' '
         DS    CL2
ECBLIST  DS    CL8
         ORG   ECBLIST
ECBADDR1 DS    FL4
ECBADDR2 DS    FL4
         ORG   ECBADDR2
ECBEND   DS    FL1
@NM00001 DS    FL3
         ORG   ECBLIST+8
SWITCHES DS    CL1
         ORG   SWITCHES
GOSW     DS    BL1
@NM00002 EQU   SWITCHES+0
         ORG   SWITCHES+1
         DS    CL3
IKT011I  DS    CL96
         ORG   IKT011I
@NM00004 DS    CL28
IKT011IA DS    CL7
@NM00005 DS    CL61
         ORG   IKT011I+96
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
TEMPPTR  EQU   @02
SUBPL    EQU   @05
LENGTH   EQU   @04
R0       EQU   @00
R1       EQU   @01
R2       EQU   @02
R3       EQU   @03
TWAPTR   EQU   @11
R14      EQU   @14
R15      EQU   @15
OPRTRECB EQU   0
MSGBLK   EQU   0
@NM00003 EQU   0
MSGLNGTH EQU   @NM00003
MSGDATA  EQU   @NM00003+4
WESTD    EQU   0
WECODE1T EQU   WESTD
WECODE1F EQU   WESTD+1
WECODE2T EQU   WESTD+2
WECODE2F EQU   WESTD+3
WENEXT   EQU   WESTD+4
WERC     EQU   WESTD+8
WELEN    EQU   WESTD+10
WEDATA   EQU   WESTD+12
CHAIN    EQU   0
CHFLG    EQU   CHAIN+4
CHSTS    EQU   CHFLG+2
CHACT    EQU   CHFLG+3
CHKEY    EQU   CHAIN+8
CHPARM   EQU   CHKEY
CHPKE    EQU   CHAIN+28
CHTJID   EQU   CHAIN+30
CHPROCSN EQU   CHAIN+32
CHACT1   EQU   CHPROCSN+3
CHASM    EQU   CHAIN+40
CHECBP   EQU   CHASM
CHCIBP   EQU   CHASM+4
CHRGNSZ  EQU   CHASM+8
CHSTEP   EQU   CHASM+24
CHSWT    EQU   CHSTEP
CHSHORT  EQU   CHASM+32
CIBNAME  EQU   0
CIBVERB  EQU   CIBNAME+4
CIBASID  EQU   CIBNAME+10
CIBDATLN EQU   CIBNAME+14
CIBDATA  EQU   CIBNAME+16
TWAR     EQU   0
TWASYNQH EQU   TWAR+4
TWACSCB  EQU   TWAR+16
TWAMSG   EQU   TWAR+48
TWAMECB  EQU   TWAR+64
TWAMFL   EQU   TWAR+80
TWAVFL   EQU   TWAR+81
TWAUFL   EQU   TWAR+82
TWACFL   EQU   TWAR+83
TWAM     EQU   TWAR+84
TWAME    EQU   TWAM+68
TWAMEI   EQU   TWAME
TWAV     EQU   TWAR+184
TWAVE    EQU   TWAV+68
TWAVEI   EQU   TWAVE
TWAVI    EQU   TWAR+284
TWAVECB  EQU   TWAVI
TWAU     EQU   TWAR+300
TWAUE    EQU   TWAU+68
TWAUEI   EQU   TWAUE
TWAUI    EQU   TWAR+400
TWAUECB  EQU   TWAUI
TWAC     EQU   TWAR+408
TWACE    EQU   TWAC+68
TWACEI   EQU   TWACE
TWACEIFC EQU   TWACEI
TWACERA  EQU   TWACEI+1
TWACERRS EQU   TWACE+4
TWACI    EQU   TWAR+508
TWACECB  EQU   TWACI
TWACSTPQ EQU   TWACI+4
TWACMODQ EQU   TWACI+8
TWACSKIP EQU   TWACI+12
CIBPTR   EQU   CHCIBP
CSCBPTR  EQU   TWACSCB
WEPTR    EQU   ADDRESS
CHAINS01 EQU   CHASM
CHTYPE   EQU   CHAINS01+124
CHTRSTAT EQU   CHAINS01+125
CHCSYSO  EQU   CHAINS01+134
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CHLAST   EQU   CHAINS01+136
CHSPA    EQU   CHAINS01+135
CHUSERID EQU   CHCSYSO
CHJB     EQU   CHCSYSO
CHDUMP   EQU   CHCSYSO
CHQUE    EQU   CHCSYSO
CHHOLD   EQU   CHCSYSO
CHOUT    EQU   CHCSYSO
CHINN    EQU   CHCSYSO
CHALL    EQU   CHCSYSO
CHINC    EQU   CHAINS01+132
CHPEND   EQU   CHAINS01+128
CHARID   EQU   CHAINS01+127
CHCNID   EQU   CHAINS01+126
@NM00009 EQU   CHTRSTAT
CHTSL    EQU   CHTRSTAT
CHTS     EQU   CHTRSTAT
CHINITL  EQU   CHTRSTAT
CHINIT   EQU   CHTRSTAT
CHJOBSL  EQU   CHTRSTAT
CHJOBS   EQU   CHTRSTAT
CHDEF    EQU   CHTYPE
CHHIAR   EQU   CHTYPE
CHARSV29 EQU   CHTYPE
CHARSV28 EQU   CHTYPE
CHARSV27 EQU   CHTYPE
CHARSV26 EQU   CHTYPE
CHARSV25 EQU   CHTYPE
CHDSTAT  EQU   CHTYPE
CHBUF    EQU   CHAINS01
TWAEND   EQU   TWAR+536
TWAWORKE EQU   TWAR+524
@NM00016 EQU   TWACI+13
TWACRTFC EQU   TWAC+60
TWACABFC EQU   TWAC+56
TWACTWA  EQU   TWAC+52
TWACEWA  EQU   TWAC+4
TWACID   EQU   TWAC
TWAUACQH EQU   TWAUI+4
TWAUERRS EQU   TWAUE+4
TWAUERA  EQU   TWAUEI+1
TWAUEIFC EQU   TWAUEI
TWAURTFC EQU   TWAU+60
TWAUABFC EQU   TWAU+56
TWAUTWA  EQU   TWAU+52
TWAUEWA  EQU   TWAU+4
TWAUID   EQU   TWAU
TWAVACQH EQU   TWAVI+12
TWAVTHQH EQU   TWAVI+8
TWAVTEQH EQU   TWAVI+4
TWAVERRS EQU   TWAVE+4
TWAVERA  EQU   TWAVEI+1
TWAVEIFC EQU   TWAVEI
TWAVRTFC EQU   TWAV+60
TWAVABFC EQU   TWAV+56
TWAVTWA  EQU   TWAV+52
TWAVEWA  EQU   TWAV+4
TWAVID   EQU   TWAV
TWAMERRS EQU   TWAME+4
TWAMERA  EQU   TWAMEI+1
TWAMEIFC EQU   TWAMEI
TWAMRTFC EQU   TWAM+60
TWAMABFC EQU   TWAM+56
TWAMTWA  EQU   TWAM+52
TWAMEWA  EQU   TWAM+4
TWAMID   EQU   TWAM
@NM00015 EQU   TWACFL
TWACFL4  EQU   TWACFL
TWACFL2  EQU   TWACFL
TWACFL1  EQU   TWACFL
@NM00014 EQU   TWAUFL
TWAUFL4  EQU   TWAUFL
TWAUFL3  EQU   TWAUFL
TWAUFL2  EQU   TWAUFL
TWAUFL1  EQU   TWAUFL
@NM00013 EQU   TWAVFL
TWAVFL6  EQU   TWAVFL
TWAVFL5  EQU   TWAVFL
TWAVFL4  EQU   TWAVFL
TWAVFL3  EQU   TWAVFL
TWAVFL2  EQU   TWAVFL
TWAVFL1  EQU   TWAVFL
@NM00012 EQU   TWAMFL
TWAMFL1  EQU   TWAMFL
TWACCOMP EQU   TWAR+76
TWAUCOMP EQU   TWAR+72
TWAVCOMP EQU   TWAR+68
TWACTCB  EQU   TWAR+60
TWAUTCB  EQU   TWAR+56
TWAVTCB  EQU   TWAR+52
TWADEQAS EQU   TWAR+44
TWAEESR  EQU   TWAR+40
TWAPPSR  EQU   TWAR+36
TWATCSR  EQU   TWAR+32
TWATTSR  EQU   TWAR+28
TWAINIT  EQU   TWAR+24
TWATCAST EQU   TWAR+20
TWAASCB  EQU   TWAR+12
TWAPASQH EQU   TWAR+8
TWARSON  EQU   TWAR+2
TWACOMP  EQU   TWAR
@NM00011 EQU   CIBNAME+13
CIBCONID EQU   CIBNAME+12
CIBTJID  EQU   CIBASID
@NM00010 EQU   CIBNAME+6
CIBLEN   EQU   CIBNAME+5
CIBNEXT  EQU   CIBNAME
CHARSV16 EQU   CHSHORT+100
CHARSV15 EQU   CHSHORT+96
CHJSCBVS EQU   CHSHORT+92
CHUSCVS  EQU   CHSHORT+88
@NM00008 EQU   CHSHORT+84
@NM00007 EQU   CHSHORT+80
CHSQA    EQU   CHSHORT+44
CHQPA    EQU   CHSHORT+8
CHJCL    EQU   CHSHORT+4
CHSPC    EQU   CHSHORT
CHSPB    EQU   CHSTEP+4
CHTCB    EQU   CHSTEP+1
CHARSV23 EQU   CHSWT
CHARSV22 EQU   CHSWT
CHARSV21 EQU   CHSWT
CHAC     EQU   CHSWT
CHPSF    EQU   CHSWT
CHPSD    EQU   CHSWT
CHJCT    EQU   CHSWT
CHARSV20 EQU   CHSWT
CHCECB   EQU   CHASM+20
CHECB    EQU   CHASM+16
CHRGNAD  EQU   CHASM+12
CHARSV18 EQU   CHRGNSZ+1
CHRPRTY  EQU   CHRGNSZ
@NM00006 EQU   CHCIBP
CHEND    EQU   CHCIBP
CHDER    EQU   CHPROCSN+4
CHARSV10 EQU   CHACT1
CHARSV09 EQU   CHACT1
CHARSV08 EQU   CHACT1
CHARSV07 EQU   CHACT1
CHARSV06 EQU   CHACT1
CHARSV05 EQU   CHACT1
CHARSV04 EQU   CHACT1
CHRDWTR  EQU   CHACT1
CHARSV30 EQU   CHPROCSN+2
CHQID    EQU   CHPROCSN
CHASID   EQU   CHTJID
CHUCMP   EQU   CHAIN+29
CHTRKID  EQU   CHPKE
CHCIBCTR EQU   CHAIN+27
CHUNIT   EQU   CHAIN+24
CHCLS    EQU   CHAIN+16
CHPCOI   EQU   CHPARM
CHIFY    EQU   CHACT
CHAIFX   EQU   CHACT
CHCLD    EQU   CHACT
CHCL     EQU   CHACT
CHDSI    EQU   CHACT
CHDISC   EQU   CHACT
CHTERM   EQU   CHACT
CHSWAP   EQU   CHACT
CHABTERM EQU   CHSTS
CHFC     EQU   CHSTS
CHDL     EQU   CHSTS
CHAD     EQU   CHSTS
CHQSPC   EQU   CHSTS
CHSOUT   EQU   CHSTS
CHSYS    EQU   CHSTS
CHAP     EQU   CHSTS
CHSZE    EQU   CHFLG+1
CHVCD    EQU   CHFLG
CHPTR    EQU   CHAIN
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RF00118 EQU   @EL00005
@RC00126 EQU   @EL00005
@RC00152 EQU   @EL00006
@RC00147 EQU   @EL00006
@RF00182 EQU   @EL00007
@RC00177 EQU   @EL00007
@RF00184 EQU   @EL00007
@ENDDATA EQU   *
         END   IKTCAS40,(C'PLS0445',0701,77238)
