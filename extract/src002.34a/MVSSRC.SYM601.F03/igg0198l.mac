         TITLE 'IGG0198L  -  SAM-SI OPEN EXECUTOR                      *
                        '
IGG0198L CSECT ,                                                   0001
@PROLOG  BALR  @12,0                                               0001
@PSTART  DS    0H                                                  0001
         USING @PSTART,@12                                         0001
         EJECT
         EJECT
PROCESS  MODESET EXTKEY=DATAMGT
*        RDCB = PARCDCB;                /* SET BASE FOR DCB         */
         SLR   RDCB,RDCB                                           0042
         ICM   RDCB,7,PARCDCB(RPARC)                               0042
*        RDCB = RDCB + 0;               /* CLEAR HIGH ORDER BYTE    */
*        RCICB = DCBCICB;               /* SET BASE FOR CICB        */
         L     RCICB,DCBCICB(,RDCB)                                0044
*        RCORE = WTGCWA;                /* SET BASE ADDR 4 IECDSECT */
*                                                                  0045
         SLR   RCORE,RCORE                                         0045
         ICM   RCORE,7,WTGCWA(RWTGC)                               0045
*        /***********************************************************/
*        GEN   (EJECT);                 /* SKIP TO A NEW PAGE       */
         EJECT
*        /***********************************************************/
*        /*                                                         */
*        /* HAVE LOAD PUT NECESSARY MODULES IN USER'S REGION        */
*        /*                                                         */
*        /***********************************************************/
*                                                                  0047
*LOADCIPM:                                                         0047
*                                                                  0047
*        IF DCBCIND2(8) = '0'B THEN     /* DOES DCB INDICATE QSAM   */
LOADCIPM TM    DCBCIND2(RDCB),B'00000001'                          0047
         BNZ   @RF00047                                            0047
*          DO;                          /* NO - LOAD BSAM MODULES   */
*                                                                  0048
*        /***********************************************************/
*        /* LOAD BSAM PROCESSING MODULE                             */
*        /***********************************************************/
*                                                                  0049
*               R1 = CVTLINK;           /* LINKLIB'S DCB PTR ZA02501*/
         L     @04,CVTPTR                                          0049
         L     R1,CVTLINK(,@04)                                    0049
*               WTGMDNAM = 'IGG019DK';  /* NAME OF MODULE TO LOAD   */
         MVC   WTGMDNAM(8,RWTG),@CC00381                           0050
*               GEN (LOAD  EPLOC=(RWTG),DCB=(R1));        /* ZA02501*/
         LOAD  EPLOC=(RWTG),DCB=(R1)
*               WTGMDNAM = 'IGG0198L';  /* RESTORE MODULE NAME      */
         MVC   WTGMDNAM(8,RWTG),@CC00382                           0052
*               RMOD = R0;              /* SET BASE FOR ENTRY PT    */
         LR    RMOD,R0                                             0053
*                                       /* TABLE AT BEGINNING OF    */
*                                       /* MODULE...R0 POINTS TO    */
*                                       /* MODULE JUST LOADED       */
*                                                                  0054
*               ATFBSAM = '1'B;         /* SET BSAM MOD LOADED Y02144*/
*                                                                  0054
         OI    ATFBSAM(RCORE),B'00000100'                          0054
*        /* SET CNTRL ENTRY ADDRESS                                 */
*                                                                  0055
*                                       /* IS CNTRL WANTED          */
*               IF DCBMACRF(7) = '1'B × DCBMACRF(15) = '1'B        0055
*                 THEN                  /* YES                      */
         TM    DCBMACRF(RDCB),B'00000010'                          0055
         BO    @RT00055                                            0055
         TM    DCBMACRF+1(RDCB),B'00000010'                        0055
         BNO   @RF00055                                            0055
@RT00055 DS    0H                                                  0056
*                   DCBCNTRL = EPCNTRL; /* ENTRY PT TO CONTROL RTN  */
         MVC   DCBCNTRL(3,RDCB),EPCNTRL+1(RMOD)                    0056
*                 ELSE;                 /* CONTROL NOT SPECIFIED    */
*                                                                  0057
@RF00055 DS    0H                                                  0058
*        /* SET READ ENTRY ADDRESS                                  */
*                                                                  0058
*                                       /* OPENED FOR IN OR INOUT   */
*               IF PARCOPOP = '0000'B × PARCOPOP = '0011'B THEN    0058
         TM    PARCOPOP(RPARC),B'00001111'                         0058
         BZ    @RT00058                                            0058
         TM    PARCOPOP(RPARC),B'00000011'                         0058
         BNO   @RF00058                                            0058
         TM    PARCOPOP(RPARC),B'00001100'                         0058
         BNZ   @RF00058                                            0058
@RT00058 DS    0H                                                  0059
*                   DO;                 /* YES, DO THE FOLLOWING    */
*                     DCBREAD = EPREAD; /* ENTRY FOR CI READ        */
*                                                                  0060
         MVC   DCBREAD(3,RDCB),EPREAD+1(RMOD)                      0060
*        /* LOAD CHECK MODULE IF CONCATENATION NOT IN PROGRESS      */
*                                                                  0061
*                    IF DCBOFLGS(3) = '0'B/*                       0061
*                                          CONCATENATION INDICATOR  */
*                      THEN             /* NOT CONCATENATED         */
         TM    DCBOFLGS(RDCB),B'00100000'                          0061
         BNZ   @RF00061                                            0061
*                        DO;            /* YES, DO THE FOLLOWING    */
*                                                                  0062
*                        /* SET NAME AND DCB ADDR OF MODULE TO LOAD */
*                        R1=CVTLINK;    /* LINKLIB DCB ADDR  ZA02501*/
         L     @04,CVTPTR                                          0063
         L     R1,CVTLINK(,@04)                                    0063
*                        WTGMDNAM = 'IGG019BB';                    0064
         MVC   WTGMDNAM(8,RWTG),@CC00387                           0064
*                        GEN (LOAD EPLOC=(RWTG),DCB=(R1)); /*ZA02501*/
*                                                                  0065
         LOAD EPLOC=(RWTG),DCB=(R1)
*                        /* RESTORE MODULE NAME                     */
*                        WTGMDNAM = 'IGG0198L';                    0066
*                                                                  0066
         MVC   WTGMDNAM(8,RWTG),@CC00382                           0066
*                        /* ENTRY FOR BSAM CHECK                    */
*                        DCBCHECK = R0;                            0067
         STCM  R0,7,DCBCHECK(RDCB)                                 0067
*                        ATFCHECK = '1'B;/*                        0068
*                                          CHECK MOD IS LOADED Y02144*/
         OI    ATFCHECK(RCORE),B'00000001'                         0068
*                        END;           /* END OF NOT CONCAT GROUP  */
*                      ELSE;            /* CONCAT IS INDICATED      */
@RF00061 DS    0H                                                  0071
*                   END;                /* END OF IN×INOUT GROUP    */
*                 ELSE                  /* NOT INPUT OR INOUT       */
*                   DO;                 /* OPENED FOR OUT×OUTIN     */
*                                                                  0072
         B     @RC00058                                            0072
@RF00058 DS    0H                                                  0073
*        /* SET WRITE ENTRY ADDRESS                                 */
*                                                                  0073
*               DCBWRITE = EPWRITE;     /* SET WRITE ENTRY ADDR     */
*                                                                  0073
         MVC   DCBWRITE(3,RDCB),EPWRITE+1(RMOD)                    0073
*        /* SET CHECK (OUTPUT) ENTRY ADDRESS                        */
*                                                                  0074
*               DCBCHECK = EPCHECK;     /* SET CHECK ENTRY ADDR     */
         MVC   DCBCHECK(3,RDCB),EPCHECK+1(RMOD)                    0074
*               END;                    /* END OF OUT×OUTIN GROUP   */
*                                                                  0075
*                                                                  0075
*              END;                         /* END OF BSAM GROUP     */
*                                                                  0076
*            ELSE DO;                       /* NOT BSAM DCB          */
         B     @RC00047                                            0077
@RF00047 DS    0H                                                  0078
*        GEN (EJECT);                                              0078
         EJECT
*                                                                  0079
*        /***********************************************************/
*        /* LOAD QSAM PROCESSING MODULE                             */
*        /***********************************************************/
*                                                                  0079
*QSAMMOD:                                                          0079
*                R1 = CVTLINK;          /* LINKLIB DCB ADDR  ZA02501*/
QSAMMOD  L     @04,CVTPTR                                          0079
         L     R1,CVTLINK(,@04)                                    0079
*                WTGMDNAM = 'IGG019DJ'; /* NAME OF MOD TO LOAD      */
         MVC   WTGMDNAM(8,RWTG),@CC00390                           0080
*                GEN (LOAD  EPLOC=(RWTG),DCB=(R1));       /* ZA02501*/
         LOAD  EPLOC=(RWTG),DCB=(R1)
*                WTGMDNAM = 'IGG0198L'; /* RESTORE MODULE NAME      */
*                                                                  0082
         MVC   WTGMDNAM(8,RWTG),@CC00382                           0082
*                RMOD = R0;             /* SET BASE FOR ENTRY PT    */
         LR    RMOD,R0                                             0083
*                                       /* TABLE AT BEGINNING OF    */
*                                       /* MODULE...R0 POINTS TO    */
*                                       /* MODULE JUST LOADED       */
*                ATFQSAM = '1'B;        /* SET QSAM MOD LOADED Y02144*/
*                                                                  0084
         OI    ATFQSAM(RCORE),B'00001000'                          0084
*        /* SET CNTRL ENTRY ADDRESS IF REQUESTED IN DCB.             */
*                                                                  0085
*        IF DCBMACRF(7) = '1'B × DCBMACRF(15) = '1'B THEN   /* XM3766*/
         TM    DCBMACRF(RDCB),B'00000010'                          0085
         BO    @RT00085                                            0085
         TM    DCBMACRF+1(RDCB),B'00000010'                        0085
         BNO   @RF00085                                            0085
@RT00085 DS    0H                                                  0086
*          DCBCNTRL = EPQCNTRL;         /* SET CNTRL ADDRESS   XM3766*/
*                                                                  0086
         MVC   DCBCNTRL(3,RDCB),EPQCNTRL+1(RMOD)                   0086
*        /* SET GET ENTRY ADDRESS                                   */
*                                                                  0087
*                                       /* OPENED FOR INPUT         */
*               IF PARCOPOP = '0000'B THEN                         0087
@RF00085 TM    PARCOPOP(RPARC),B'00001111'                         0087
         BNZ   @RF00087                                            0087
*                 DO;                   /* YES - PROCESS INPUT DCB  */
*                     DCBGET = EPGET;       /* ENTRY FOR CI GET      */
*                                                                  0089
         MVC   DCBGET(3,RDCB),EPGET+1(RMOD)                        0089
*                     /***********************************************/
*                     /*                                             */
*                     /* TEST FOR CONCATENATION IN PROGRESS. IF YES, */
*                     /* DO NOT LOAD QSAM SYNCHRONIZING MODULE, AS   */
*                     /* IT WAS LOADED FOR PREVIOUS DATA SET.        */
*                     /*                                             */
*                     /***********************************************/
*                                                                  0090
*                     IF DCBOFLGS(3) = '0'B/*                      0090
*                                          CONCATENATION IND. ?     */
*                       THEN            /* NOT CONCATENATION        */
         TM    DCBOFLGS(RDCB),B'00100000'                          0090
         BNZ   @RF00090                                            0090
*                            DO;                                   0091
*                                                                  0091
*                         /******************************************/
*                         /* LOAD QSAM SYNCHRONIZING MODULE         */
*                         /******************************************/
*                                                                  0092
*                         /* SET NAME AND DCB ADDR OF MODULE TO LOAD*/
*                         R1 = CVTLINK;                   /* ZA02501*/
         L     @04,CVTPTR                                          0092
         L     R1,CVTLINK(,@04)                                    0092
*                         WTGMDNAM = 'IGG019AQ';                   0093
         MVC   WTGMDNAM(8,RWTG),@CC00391                           0093
*                         GEN (LOAD EPLOC=(RWTG),DCB=(R1)); /*ZA02501*/
*                                                                  0094
         LOAD EPLOC=(RWTG),DCB=(R1)
*                         /* RESET MODULE NAME IN WTG TABLE          */
*                         WTGMDNAM = 'IGG0198L';                   0095
*                                                                  0095
         MVC   WTGMDNAM(8,RWTG),@CC00382                           0095
*                         /* ENTRY FOR QSAM SYNCHRONIZING MODULE     */
*                         DCBGERR = R0;                            0096
         STCM  R0,7,DCBGERR(RDCB)                                  0096
*                         ATFSYNC = '1'B;/*                        0097
*                                          SET SYNC MOD LOADED Y02144*/
         OI    ATFSYNC(RCORE),B'00000010'                          0097
*                            END;           /* END OF NOT CONCAT GRP */
*                       ELSE;           /* CONCAT IS INDICATED      */
@RF00090 DS    0H                                                  0100
*                            END;       /* END OF INPUT GROUP       */
*                   ELSE                /* NOT INPUT                */
*                                                                  0101
*        /* SET PUT ENTRY ADDRESS                                   */
*                                                                  0101
*               DCBPUT = EPPUT;         /* SET PUT RTN ADDR         */
         B     @RC00087                                            0101
@RF00087 MVC   DCBPUT(3,RDCB),EPPUT+1(RMOD)                        0101
*                 END;                  /* END OF ^BSAM DCB GROUP   */
@RC00087 DS    0H                                                  0103
*        /***********************************************************/
*        GEN   (EJECT);                 /* SKIP TO A NEW PAGE       */
@RC00047 DS    0H                                                  0103
         EJECT
*        /***********************************************************/
*        /*                                                         */
*        /* PERFORM HOUSEKEEPING FUNCTIONS ON SAM DCB               */
*        /*                                                         */
*        /***********************************************************/
*                                                                  0104
*                                                                  0104
*        /* SET CI BIT ON                                           */
*        DCBCIND1(5)   = '1'B;                                     0104
*                                                                  0104
         OI    DCBCIND1(RDCB),B'00001000'                          0104
*        /***********************************************************/
*        /*         USER KEY REQUIRED TO REFRESH USER'S DCB         */
*        /***********************************************************/
*                                                                  0105
*        RDCBSAVE = RDCB;           /* SAVE CONTENTS OF REG 2 Y02082*/
         LR    RDCBSAVE,RDCB                                       0105
*        RUKEY = DXUKEY;            /*  USER KEY IN REG 2     Y02082*/
         SLR   RUKEY,RUKEY                                         0106
         IC    RUKEY,DXUKEY(,RCORE)                                0106
*        GEN (MODESET KEYADDR=(2)); /*DCB REFRSH REQ USER KEY Y02082*/
         MODESET KEYADDR=(2)
*        RDCB = RDCBSAVE;           /* RESTORE DCB PTR        Y02082*/
         LR    RDCB,RDCBSAVE                                       0108
*        DXUDCBAD -> IFGSDCB(21:88) = IFGSDCB(21:88); /* REFRESH REAL
*                                   FROM PROTECTED COPY DCB ZA00623*/
*                                                                  0109
         L     @04,DXUDCBAD(,RCORE)                                0109
         MVC   IFGSDCB+20(68,@04),IFGSDCB+20(RDCB)                 0109
*        /***********************************************************/
*        /*            REESTABLISH DATA MANAGEMENT KEY              */
*        /***********************************************************/
*                                                                  0110
*        GEN (MODESET EXTKEY=DATAMGT); /* RESET TO DTAMGT KEY Y02082*/
*                                                                  0110
         MODESET EXTKEY=DATAMGT
*ZROCHAIN:                                                         0111
*        XCTLREG = ADDR (IBMCLOSE);        /* ENTRY IN XCTL TABLE   */
*                                                                  0111
ZROCHAIN LA    XCTLREG,IBMCLOSE                                    0111
*        /* ZERO OUT ID OF ENTRY IN WTG TABLE                       */
*        WTGCID = XCTLID;                                          0112
*                                                                  0112
         MVC   WTGCID(2,RWTGC),XCTLID(XCTLREG)                     0112
*        /* ZERO OUT TTR OF ENTRY IN WTG TABLE                      */
*        WTGCTTR = XCTLTTR;                                        0113
*                                                                  0113
         MVC   WTGCTTR(3,RWTGC),XCTLTTR(XCTLREG)                   0113
*        /* RESET BASE FOR CICB                                     */
*        RCICB = DCBCICB;                                          0114
*                                                                  0114
         L     RCICB,DCBCICB(,RDCB)                                0114
*NEXTNTRY:                                                         0115
*        /* EXAMINE THE REMAINING ENTRIES IN THE WTG TABLE AND OPEN */
*        /* PARAMETER LIST TO DETERMINE IF THIS MODULE IS NEEDED.   */
*                                                                  0115
*        RWTGC = RWTGC + 8;             /* NEXT ENTRY IN WTG TABLE  */
NEXTNTRY LA    RWTGC,8(,RWTGC)                                     0115
*        RPARC = RPARC + 4;             /* NEXT ENTRY IN PARM LIST  */
*                                                                  0116
         LA    RPARC,4(,RPARC)                                     0116
*        /* IS THIS MODULE NEEDED                                   */
*                                                                  0117
*        IF WTGCID = '8L'                                          0117
*          THEN                         /* YES                      */
         CLC   WTGCID(2,RWTGC),@CC00398                            0117
         BE    @RT00117                                            0117
*            GO TO PROCESS;             /* GO PROCESS THE DCB       */
*          ELSE                                                    0119
*                                                                  0119
*          /* IS THIS THE END OF THE WTG TABLE                      */
*                                                                  0119
*            IF WTGCID = '0S'                                      0119
*              THEN                     /* YES                      */
         CLC   WTGCID(2,RWTGC),@CC00399                            0119
         BE    @RT00119                                            0119
*                GO TO TRANSFER;        /* GO TO TRANSFER CONTROL   */
*                                                                  0120
*              ELSE                     /* NO                       */
*                GO TO NEXTNTRY;        /* GO CHECK ENTRY ID        */
         B     NEXTNTRY                                            0121
*        /***********************************************************/
*        GEN   (EJECT);                 /* SKIP TO A NEW PAGE       */
         EJECT
*TRANSFER:                                                         0123
*        /* RESET POINTERS IN THE WTG TABLE AND PARM LIST TO THE    */
*        /* FIRST ENTRIES, AND PREPARE TO TRANSFER CONTROL TO THE   */
*        /* NEXT LOAD.                                              */
*                                                                  0123
*        /* FIRST ENTRY IN THE WTG TABLE                            */
*        RWTGC = RWTG + 32;                                        0123
*                                                                  0123
TRANSFER LA    RWTGC,32(,RWTG)                                     0123
*        /* FIRST ENTRY IN PARM LIST                                */
*        RPARC = RPAR;                                             0124
*                                                                  0124
         LR    RPARC,RPAR                                          0124
*CHECKID:                                                          0125
*        /* CHECK THE ENTRIES IN THE WTG TABLE FOR A NON-ZERO ID    */
*                                                                  0125
*        /* IS ID OF CURRENT ENTRY IN WTG TABLE ZERO ?              */
*                                                                  0125
*        IF WTGCID(1) = '00'X                                      0125
*          THEN                         /* YES                      */
CHECKID  CLI   WTGCID(RWTGC),X'00'                                 0125
         BNE   @RF00125                                            0125
*            DO;                        /* STEP TO NEXT ENTRY       */
*              RWTGC = RWTGC + 8;       /* NEXT WTG-TBL ENTRY       */
         LA    RWTGC,8(,RWTGC)                                     0127
*              RPARC = RPARC + 4;       /* NEXT PARM-LIST ENTRY     */
         LA    RPARC,4(,RPARC)                                     0128
*              GO TO CHECKID;           /* GO CHECK NEXT ENTRY      */
         B     CHECKID                                             0129
*            END;                                                  0130
*                                                                  0130
*          ELSE                         /* ID IS NOT ZERO           */
*            DO;                                                   0131
@RF00125 DS    0H                                                  0132
*              WTGID = WTGCID;          /* MOVE ID TO BASIC SECTION */
         MVC   WTGID(2,RWTG),WTGCID(RWTGC)                         0132
*              WTGTTR = WTGCTTR;        /* MOVE TTR                 */
         MVC   WTGTTR(3,RWTG),WTGCTTR(RWTGC)                       0133
*            END;                                                  0134
*                                                                  0134
*        R15 = ADDR (DXCCW1);           /* PARM LIST ADDR      Y02082*/
         LA    R15,DXCCW1(,RCORE)                                  0135
*        GEN (XCTL  EPLOC=(RWTG),SF=(E,(15)),DCB=0); /* LOAD   Y02082*/
*                                                                  0136
*                                                                  0136
         XCTL  EPLOC=(RWTG),SF=(E,(15)),DCB=0
*        END IGG0198L                   /* END OF MODULE            */
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IECDSECT)                                        *
*/*%INCLUDE SYSLIB  (IFGSDCB )                                        *
*/*%INCLUDE SYSLIB  (IFGJCICB)                                        *
*;                                                                 0137
@EL00001 DS    0H                                                  0137
@EF00001 DS    0H                                                  0137
@ER00001 BR    @14                                                 0137
@DATA    DS    0H
@DATD    DSECT
         DS    0F
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IGG0198L CSECT
         DS    0F
@DATD    DSECT
         DS    0D
IGG0198L CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
         DS    0D
@CC00381 DC    C'IGG019DK'
@CC00382 DC    C'IGG0198L'
@CC00387 DC    C'IGG019BB'
@CC00390 DC    C'IGG019DJ'
@CC00391 DC    C'IGG019AQ'
@CC00398 DC    C'8L'
@CC00399 DC    C'0S'
@DATD    DSECT
IGG0198L CSECT
         ORG   IGG0198L+736             START OF XCTL        @ZA02890
XCTLTABL EQU   *
IBMCLOSE DC    X'0000'                  INDICATE NO NEXT LOAD
         DC    X'00000000'              INDICATE NO NEXT LOAD
         DC    X'0000'                  END OF TABLE
         DC    XL4'0'                   PAD TO LEAVE 4 BYTES
         DC    C'019'                   SVC CODE
         DC    X'7E'                    DISPLACEMENT TO TABLE
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IGG0198L CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
@0       EQU   00
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
R0       EQU   @00
R1       EQU   @01
RDCB     EQU   @02
RUKEY    EQU   @02
RCORE    EQU   @03
RTIOT    EQU   @04
RMOD     EQU   @04
RPAR     EQU   @05
RWTG     EQU   @06
RPARC    EQU   @07
RWTGC    EQU   @08
RCICB    EQU   @09
XCTLREG  EQU   @09
RDCBSAVE EQU   @09
R15      EQU   @15
CVTPTR   EQU   16
WTG      EQU   0
WTGMDNAM EQU   WTG
WTGID    EQU   WTGMDNAM+6
WTGTTR   EQU   WTG+14
WTGC     EQU   0
WTGCID   EQU   WTGC
WTGCTTR  EQU   WTGC+2
WTGCWA   EQU   WTGC+5
PARCNTRY EQU   0
PARCOPT  EQU   PARCNTRY
PARCOPOP EQU   PARCOPT
PARCDCB  EQU   PARCNTRY+1
XCTLNTRY EQU   0
XCTLID   EQU   XCTLNTRY
XCTLTTR  EQU   XCTLNTRY+2
CVTTCBDW EQU   0
CVTLINK  EQU   8
TCBPTR   EQU   4
FORCORE  EQU   0
DXDSCB   EQU   FORCORE
DXDAADDR EQU   FORCORE+312
DXDCB    EQU   FORCORE+320
DXCCW    EQU   FORCORE+368
DXCCW1   EQU   DXCCW
DXVOLSR  EQU   FORCORE+500
DXVOLSR1 EQU   DXVOLSR
DXVOLSR2 EQU   DXVOLSR+6
DXVOLSR3 EQU   DXVOLSR+12
DXUKEY   EQU   FORCORE+526
DXUCBSAV EQU   FORCORE+564
DXUDCBAD EQU   FORCORE+568
DXPDCBAD EQU   FORCORE+572
DXATCOM1 EQU   FORCORE+588
DXATGENS EQU   DXATCOM1
DXATVGIV EQU   DXATGENS
DXATOUTA EQU   DXATCOM1+2
DXATDACC EQU   DXATCOM1+3
DXATCOM2 EQU   FORCORE+592
DXATEOV  EQU   DXATCOM2
DXATOPEN EQU   DXATCOM2+1
DXATALL  EQU   DXATCOM2+2
DXATEXC1 EQU   FORCORE+604
DXATEXB1 EQU   DXATEXC1
DXATEXC2 EQU   FORCORE+608
IFGSDCB  EQU   0
DCBBUFCB EQU   IFGSDCB+20
DCBIOBAD EQU   IFGSDCB+28
@NM00017 EQU   IFGSDCB+32
DCBHIARC EQU   @NM00017
DCBBFTEK EQU   DCBHIARC
DCBDDNAM EQU   IFGSDCB+40
DCBMACRF EQU   DCBDDNAM+2
DCBOFLGS EQU   IFGSDCB+48
DCBREAD  EQU   IFGSDCB+49
DCBWRITE EQU   DCBREAD
DCBGET   EQU   DCBWRITE
DCBPUT   EQU   DCBGET
DCBCHECK EQU   IFGSDCB+53
DCBGERR  EQU   DCBCHECK
DCBCIND1 EQU   IFGSDCB+60
DCBCIND2 EQU   IFGSDCB+61
DCBIOBA  EQU   IFGSDCB+68
DCBCICB  EQU   DCBIOBA
DCBEOBAD EQU   IFGSDCB+72
DCBLCCW  EQU   DCBEOBAD
DCBEOBR  EQU   DCBLCCW
@NM00018 EQU   IFGSDCB+76
DCBEOBW  EQU   @NM00018
DCBRECAD EQU   DCBEOBW
DCBDIRCT EQU   IFGSDCB+80
@NM00019 EQU   IFGSDCB+84
DCBCNTRL EQU   @NM00019+1
DCBNOTE  EQU   DCBCNTRL
IFGJCICB EQU   0
CIDUMIOB EQU   IFGJCICB
CIREGSAV EQU   IFGJCICB+116
CIFLAGS  EQU   IFGJCICB+188
CIFLAG2  EQU   CIFLAGS+1
CIFLAG3  EQU   CIFLAGS+2
CIIOCNT  EQU   IFGJCICB+308
CISVCLST EQU   IFGJCICB+336
CISYNADA EQU   CISVCLST
CIBLDL   EQU   CISVCLST+4
CIBSP    EQU   CISVCLST+8
CIFEOV   EQU   CISVCLST+12
CISTOW   EQU   CISVCLST+16
BTABLE   EQU   0
EPREAD   EQU   BTABLE
EPWRITE  EQU   BTABLE+4
EPCHECK  EQU   BTABLE+8
EPCNTRL  EQU   BTABLE+12
QTABLE   EQU   0
EPGET    EQU   QTABLE
EPPUT    EQU   QTABLE+4
EPQCNTRL EQU   QTABLE+8
TIOEDDNM EQU   0
TIOTPTR  EQU   12
ATFLAGS  EQU   DXATEXC1
ATFOPEN  EQU   ATFLAGS
ATFQSAM  EQU   ATFOPEN
ATFBSAM  EQU   ATFOPEN
ATFSYNC  EQU   ATFOPEN
ATFCHECK EQU   ATFOPEN
ATFCLOSE EQU   ATFLAGS+1
DCBDEVTY EQU   IFGSDCB+17
*                                      START UNREFERENCED COMPONENTS
@NM00028 EQU   ATFCLOSE
ATFCICBF EQU   ATFCLOSE
ATFMDMSK EQU   ATFCLOSE
@NM00027 EQU   ATFOPEN
ATFABEND EQU   ATFOPEN
ATFCICBG EQU   ATFOPEN
EPPOINT  EQU   BTABLE+20
EPNOTE   EQU   BTABLE+16
CISTOWRC EQU   CISTOW
CIFEOVRC EQU   CIFEOV
CIBSPRC  EQU   CIBSP
CIBLDLRC EQU   CIBLDL
CISYNRC  EQU   CISYNADA
CIWK2    EQU   IFGJCICB+332
CIWK1    EQU   IFGJCICB+328
CISAMWA  EQU   IFGJCICB+324
CIRECPTR EQU   IFGJCICB+320
CIRAREA  EQU   IFGJCICB+316
CIBLKPTR EQU   IFGJCICB+312
CISEGLEN EQU   CIIOCNT
CILWAREA EQU   IFGJCICB+304
CIFDBCK  EQU   IFGJCICB+284
CIRPLEXT EQU   IFGJCICB+268
CIRPL    EQU   IFGJCICB+192
CIFLAG4  EQU   CIFLAGS+3
@NM00026 EQU   CIFLAG3
CIFPOINT EQU   CIFLAG3
CIFERROR EQU   CIFLAG3
CIFVSEOB EQU   CIFLAG3
CIFVSRI  EQU   CIFLAG3
CIFRAGM  EQU   CIFLAG3
CIFCLOSE EQU   CIFLAG3
CIFFSTP  EQU   CIFLAG3
@NM00025 EQU   CIFLAG2
CIFMDEVT EQU   CIFLAG2
CIFMDSOR EQU   CIFLAG2
CIFLAG1  EQU   CIFLAGS
CIREGS   EQU   CIREGSAV+12
CIREGFC  EQU   CIREGSAV+8
CIREGBC  EQU   CIREGSAV+4
@NM00024 EQU   CIREGSAV
CISYNNAM EQU   IFGJCICB+108
CIACBED  EQU   IFGJCICB+88
CIACBD   EQU   IFGJCICB+32
CIDCBPTR EQU   CIDUMIOB+28
@NM00023 EQU   CIDUMIOB+24
CIRESID  EQU   CIDUMIOB+20
@NM00022 EQU   CIDUMIOB+16
CIECBPTR EQU   CIDUMIOB+12
CIIOB    EQU   CIDUMIOB+8
@NM00021 EQU   CIDUMIOB+5
CIECBCD  EQU   CIDUMIOB+4
CINXTIOB EQU   CIDUMIOB
DCBEOB   EQU   IFGSDCB+92
DCBPRECL EQU   IFGSDCB+90
@NM00020 EQU   IFGSDCB+88
DCBPOINT EQU   DCBNOTE
DCBEROPT EQU   @NM00019
DCBLRECL EQU   IFGSDCB+82
DCBQSWS  EQU   DCBDIRCT
DCBCCCW  EQU   DCBRECAD
DCBNCP   EQU   DCBEOBR
DCBOFFSW EQU   IFGSDCB+67
DCBOFFSR EQU   IFGSDCB+66
DCBWCPL  EQU   IFGSDCB+65
DCBWCPO  EQU   IFGSDCB+64
DCBBLKSI EQU   IFGSDCB+62
DCBSYNAD EQU   IFGSDCB+57
DCBIOBL  EQU   IFGSDCB+56
DCBPERR  EQU   DCBGERR
DCBOPTCD EQU   IFGSDCB+52
DCBMACR  EQU   DCBPUT+1
DCBIFLG  EQU   DCBPUT
DCBDEBAD EQU   DCBDDNAM+5
DCBIFLGS EQU   DCBDDNAM+4
DCBTIOT  EQU   DCBDDNAM
DCBEXLST EQU   IFGSDCB+37
DCBRECFM EQU   IFGSDCB+36
DCBEODAD EQU   IFGSDCB+33
DCBBFALN EQU   DCBBFTEK
DCBSVCXL EQU   DCBIOBAD
DCBDSORG EQU   IFGSDCB+26
DCBBUFL  EQU   IFGSDCB+24
DCBBUFNO EQU   DCBBUFCB
@NM00016 EQU   IFGSDCB+16
@NM00015 EQU   IFGSDCB
DSECTSIZ EQU   FORCORE+612
DXATEXB2 EQU   DXATEXC2
DXEXHASP EQU   DXATEXB1
DXATCOM4 EQU   FORCORE+600
DXATCOM3 EQU   FORCORE+596
@NM00014 EQU   DXATCOM2+3
@NM00013 EQU   DXATALL
DXATSWAP EQU   DXATALL
DXATFC   EQU   DXATALL
@NM00012 EQU   DXATOPEN
DXATDFIN EQU   DXATOPEN
DXATDSIN EQU   DXATOPEN
DXATMODM EQU   DXATOPEN
DXATMODE EQU   DXATOPEN
DXATMODS EQU   DXATOPEN
DXATIGN  EQU   DXATOPEN
DXATVCAT EQU   DXATEOV
DXATDADM EQU   DXATEOV
DXATREMT EQU   DXATEOV
DXATDNEW EQU   DXATEOV
DXATDFRE EQU   DXATEOV
DXATDCHN EQU   DXATEOV
DXATNVOL EQU   DXATEOV
DXATCCAT EQU   DXATEOV
DXATRDDB EQU   DXATDACC
DXATEOF  EQU   DXATDACC
@NM00011 EQU   DXATDACC
DXATSMF  EQU   DXATDACC
DXATUPDB EQU   DXATDACC
DXATDRCT EQU   DXATDACC
DXATTRAK EQU   DXATDACC
DXATF1CE EQU   DXATDACC
DXATNSL  EQU   DXATOUTA
DXATTTM2 EQU   DXATOUTA
DXATTTM1 EQU   DXATOUTA
DXATTRL2 EQU   DXATOUTA
DXATTRL1 EQU   DXATOUTA
DXATDATM EQU   DXATOUTA
DXATHDTM EQU   DXATOUTA
DXATVLHD EQU   DXATOUTA
DXATCLOS EQU   DXATCOM1+1
DXATSRET EQU   DXATGENS
DXATVCIG EQU   DXATVGIV
DXATVTMG EQU   DXATVGIV
DXATVSMG EQU   DXATVGIV
DXATJFCB EQU   DXATGENS
DXATDISP EQU   DXATGENS
DXATREFR EQU   DXATGENS
DXATDMCT EQU   DXATGENS
DXMSGADR EQU   FORCORE+584
DXPRPARC EQU   FORCORE+580
DXUDCBML EQU   FORCORE+578
DXUDCBPL EQU   FORCORE+576
DXPACBAD EQU   DXPDCBAD+1
@NM00010 EQU   DXPDCBAD
DXUACBAD EQU   DXUDCBAD+1
@NM00009 EQU   DXUDCBAD
DXUCBSVV EQU   DXUCBSAV+1
@NM00008 EQU   DXUCBSAV
DXUCBADR EQU   FORCORE+560
DXTIOTAD EQU   FORCORE+556
DXDEBXAD EQU   FORCORE+552
DXDSAB   EQU   FORCORE+548
DXDSABAD EQU   FORCORE+544
DXDSABQD EQU   FORCORE+540
DXJSCBAD EQU   FORCORE+536
DXTCBADR EQU   FORCORE+532
DXASCBAD EQU   FORCORE+528
DXEXTSW  EQU   FORCORE+527
DXWKEYSV EQU   FORCORE+525
DXRESSW  EQU   FORCORE+524
DXUNITOF EQU   FORCORE+522
DXNOUNIT EQU   FORCORE+520
DXVOLSEQ EQU   FORCORE+518
DXVOLMT3 EQU   DXVOLSR3
DXVOLMT2 EQU   DXVOLSR2
DXVOLMT1 EQU   DXVOLSR1
DXWORK4  EQU   FORCORE+496
DXWORK3  EQU   FORCORE+492
DXWORK2  EQU   FORCORE+488
DXWORK1  EQU   FORCORE+484
DXWORK   EQU   FORCORE+480
DXXCTL   EQU   FORCORE+472
@NM00007 EQU   FORCORE+464
DXCCW12  EQU   DXCCW+88
DXCCW11  EQU   DXCCW+80
DXCCW10  EQU   DXCCW+72
DXCCW9   EQU   DXCCW+64
DXCCW8   EQU   DXCCW+56
DXCCW7   EQU   DXCCW+48
DXCCW6   EQU   DXCCW+40
DXCCW5   EQU   DXCCW+32
DXCCW4   EQU   DXCCW+24
DXCCW3   EQU   DXCCW+16
DXCCW2   EQU   DXCCW+8
DXDCBDEB EQU   DXDCB+44
@NM00006 EQU   DXDCB+24
DXDEBDCB EQU   DXDCB+20
@NM00005 EQU   DXDCB
DXDEB    EQU   DXDAADDR+4
@NM00004 EQU   DXDAADDR
DXIOB    EQU   FORCORE+280
DXECB    EQU   FORCORE+276
DXJBF    EQU   FORCORE+100
DSCCORE  EQU   FORCORE+96
DXLBL    EQU   DXDSCB
@NM00003 EQU   PARCOPT
@NM00002 EQU   WTG+8
@NM00001 EQU   WTGMDNAM
*                                      END UNREFERENCED COMPONENTS
@RC00058 EQU   @RC00047
@RT00117 EQU   PROCESS
@RT00119 EQU   TRANSFER
@RF00119 EQU   NEXTNTRY
@EL01    EQU   @EL00001
@ENDDATA EQU   *
         END   IGG0198L,(C'PLS1819',0701,76329)
