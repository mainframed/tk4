         TITLE 'IGG0199F --- SAM-SI OPEN EXECUTOR                      *
                        '
         EJECT
IGG0199F CSECT ,                                                   0002
@PROLOG  BALR  @11,0                                               0002
@PSTART  DS    0H                                                  0002
         USING @PSTART,@11                                         0002
         EJECT
         EJECT
         EJECT
         EJECT
         EJECT
         EJECT
         EJECT
*                                                                  0048
         MODESET EXTKEY=DATAMGT
*        RPARC = RPAR;                  /* START AT TOP OF LIST     */
         LR    RPARC,RPAR                                          0049
*        WTGTBLEN = 0;                  /* INIT DCB COUNT    @YA02120*/
*                                                                  0050
         MVI   WTGTBLEN(RWTG),X'00'                                0050
*        /* NOTE: FOR VS2-2, THE WTGTBLEN FIELD IS NO LONGER SET     */
*        /* BY COMMON OPEN TO CONTAIN THE LENGTH (IN DOUBLEWORDS)    */
*        /* OF THE WTG TABLE. THE SAM-SI EXECUTORS NOW USE THIS      */
*        /* FIELD TO SAVE THE COUNT OF SPOOL DCBS IN THE CURRENT     */
*        /* OPEN LIST.                                               */
*                                                                  0051
*SCANLOOP:                                                         0051
*        DO RWTGC = ADDR(WTG1ENT) BY LENGTH(WTGC);                 0051
SCANLOOP LA    RWTGC,WTG1ENT(,RWTG)                                0051
@DL00051 DS    0H                                                  0052
*                                       /* IS THIS MODULE           */
*        IF WTGCID = '9F'               /*   NEEDED FOR DCB         */
*          THEN                         /* YES                      */
         CLC   WTGCID(2,RWTGC),@CC00379                            0052
         BNE   @RF00052                                            0052
*            DO;                                                   0053
*              WTGTBLEN = WTGTBLEN + 1; /* INCREMENT DCB CNT @YA02120*/
         LA    @12,1                                               0054
         SLR   @10,@10                                             0054
         IC    @10,WTGTBLEN(,RWTG)                                 0054
         ALR   @12,@10                                             0054
         STC   @12,WTGTBLEN(,RWTG)                                 0054
*              R13 = ADDR(DXCCW(1));    /* USE CCW1-CCW9 AS SAVEAREA*/
         L     R13,WTGCWA-1(,RWTGC)                                0055
         LA    R13,0(,R13)                                         0055
         LA    R13,DXCCW(,R13)                                     0055
*              CALL PROCESS;            /* PROCESS THE CURRENT DCB  */
         BAL   @14,PROCESS                                         0056
*              WTGCID = XCTLID;         /* INDICATE NEXT LOAD FOR IT*/
         MVC   WTGCID(2,RWTGC),XCTLID                              0057
*              WTGCTTR = XCTLTTR;                                  0058
         MVC   WTGCTTR(3,RWTGC),XCTLTTR                            0058
*            END;                                                  0059
*                                                                  0059
*        IF WTGID = '9F'                /* NO NEXT MOD SELECTED YET */
*          & WTGCID(1) ^= '00'X         /* CURRENT DCB NEEDS MORE   */
*          THEN                         /* YES                      */
@RF00052 CLC   WTGID(2,RWTG),@CC00379                              0060
         BNE   @RF00060                                            0060
         CLI   WTGCID(RWTGC),X'00'                                 0060
         BE    @RF00060                                            0060
*            DO;                        /* SO SELECT IT             */
*              WTGID = WTGCID;                                     0062
         MVC   WTGID(2,RWTG),WTGCID(RWTGC)                         0062
*              WTGTTR = RPARC - RPAR;   /* SAVE OFFSET TEMPORARILY  */
         LR    @12,RPARC                                           0063
         SLR   @12,RPAR                                            0063
         STCM  @12,7,WTGTTR(RWTG)                                  0063
*            END;                                                  0064
*                                                                  0064
*        IF WTGCID = '0S'               /* ALL DCBS SCANNED         */
*          THEN                         /* YES                      */
@RF00060 CLC   WTGCID(2,RWTGC),@CC00381                            0065
         BNE   @RF00065                                            0065
*            DO;                                                   0066
*              RPARC = RPAR + WTGTTR;   /* USE SAVED OFFSET TO RESET
*                                          RPARC FOR NEXT MODULE    */
         SLR   @12,@12                                             0067
         ICM   @12,7,WTGTTR(RWTG)                                  0067
         LR    RPARC,RPAR                                          0067
         ALR   RPARC,@12                                           0067
*              RWTGC = ADDR(WTG1ENT)    /* ALSO RESET RWTGC         */
*                      + 2*WTGTTR;      /*(EACH ENTRY TWICE AS LONG)*/
*                                                                  0068
         LA    RWTGC,WTG1ENT(,RWTG)                                0068
         ALR   @12,@12                                             0068
         ALR   RWTGC,@12                                           0068
*              WTGTTR = WTGCTTR;        /* NOW SAVE REAL TTR THERE  */
         MVC   WTGTTR(3,RWTG),WTGCTTR(RWTGC)                       0069
*              R15 = ADDR(DXCCW(1));    /* GO TO NEXT MODULE        */
         L     R15,WTGCWA-1(,RWTGC)                                0070
         LA    R15,0(,R15)                                         0070
         LA    R15,DXCCW(,R15)                                     0070
*              GEN (XCTL  EPLOC=(RWTG),SF=(E,(15)),DCB=0);/*@YA02082*/
         XCTL  EPLOC=(RWTG),SF=(E,(15)),DCB=0
*            END;                       /* END OF ALL DCBS SCANNED  */
*                                                                  0072
*        RPARC = RPARC + LENGTH(PARCNTRY);                         0073
*                                                                  0073
@RF00065 LA    RPARC,4(,RPARC)                                     0073
*        END SCANLOOP;                  /* CONTINUE SCAN W/NEXT DCB */
         LA    RWTGC,8(,RWTGC)                                     0074
         B     @DL00051                                            0074
*/*******************************************************************/
*        GEN   (EJECT);                 /* SKIP TO A NEW PAGE       */
         EJECT
*/*******************************************************************/
*PROCESS:                                                          0076
*  PROCEDURE                                                       0076
*    OPTIONS(NOSAVEAREA);                                          0076
*                                                                  0076
*                                                                  0076
@EL00001 DS    0H                                                  0076
@EF00001 DS    0H                                                  0076
@ER00001 BR    @14                                                 0076
PROCESS  STM   @14,@12,12(@13)                                     0076
*        /* RESTRICT THE FOLLOWING REGS FROM USAGE BY THE COMPILER  */
*        RESTRICT(RDCB,RTEMPS,RPARC,R1,RWTGC,RACB,RCICB);/* @YA02120*/
*                                                                  0077
*       /* THE FOLLOWING INSTRUCTION SHOULD BE CHANGED TO           */
*       /*    RDCB = PARCDCB                                        */
*       /* WHEN CONCATENATION SUPPORT NO LONGER REQUIRES            */
*       /* THE FIRST WORD OF THE EXTENDED SAVE AREA AS A            */
*       /* PARAMETER LIST.  THE CODE HERE WORKS ONLY BECAUSE        */
*       /* THE DCB IS IN REG 2, THE PARM LIST FOR CONCATENATION     */
*       /* IS ONLY ONE WORD LONG, AND THE STORE MULTIPLE AT THE     */
*       /* USER EXIT BEGINS WITH REG 2.                             */
*                                                                  0078
*       GEN (L    RDCB,PARCNTRY(RPARC));/* MAKE DCB ADDRESSIBLE     */
         L    RDCB,PARCNTRY(RPARC)
*       RESPECIFY IFGSDCB BASED(RDCB);                             0079
*                                                                  0079
*       /***********************************************************/
*        /* ISSUE A GETMAIN TO OBTAIN CORE FOR THE CI CONTROL BLOCK */
*        /***********************************************************/
*                                                                  0080
*        RCICB = LENGTH(IFGJCICB);                                 0080
         LA    RCICB,356                                           0080
* /**********************************************************@ZA29473*/
* /********** TEST FOR INPUT AND DCBRECFM EQUAL FIXED BLOCKED@ZA29473*/
* /********** AND DCBNCP NOT EQUAL TO ONE.  IF THESE ARE MET @ZA29473*/
* /********** GETMAIN FOR THE PSEUDO IOB.                    @ZA29473*/
* /**********************************************************@ZA29473*/
*                                                      /*    @ZA29473*/
*        IF PARCOPT(5:8)='0000'B × PARCOPT(5:8)='0011'B THEN DO;/* 0081
*                                                            @ZA29473*/
         TM    PARCOPT(RPARC),B'00001111'                          0081
         BZ    @RT00081                                            0081
         TM    PARCOPT(RPARC),B'00000011'                          0081
         BNO   @RF00081                                            0081
         TM    PARCOPT(RPARC),B'00001100'                          0081
         BNZ   @RF00081                                            0081
@RT00081 DS    0H                                                  0082
*           IF DCBRECFM(1) ^= '1'B & DCBRECFM(4)^='1'B /*    @ZA29473*/
*           × DCBCIND2(8) ='1'B                        /*    @ZA29473*/
*             × DCBNCP^>1 THEN GO TO GETMAIN;          /*    @ZA29473*/
         TM    DCBRECFM(RDCB),B'10010000'                          0083
         BZ    @RT00083                                            0083
         TM    DCBCIND2(RDCB),B'00000001'                          0083
         BO    @RT00083                                            0083
         CLI   DCBNCP(RDCB),1                                      0083
         BNH   @RT00083                                            0083
*                ELSE DO;                              /*    @ZA29473*/
*                 RCICB = RCICB + (DCBNCP * 32);       /*    @ZA29473*/
         SLR   @10,@10                                             0086
         IC    @10,DCBNCP(,RDCB)                                   0086
         SLA   @10,5                                               0086
         ALR   RCICB,@10                                           0086
*                         END;                         /*    @ZA29473*/
*        END;                                          /*    @ZA29473*/
*   GETMAIN:                                           /*    @ZA29473*/
*        GEN (GETMAIN R,LV=(RCICB),SP=250);                        0089
*                                                                  0089
@RF00081 DS    0H                                                  0089
GETMAIN  GETMAIN R,LV=(RCICB),SP=250
*        RCICB = R1;                    /* SET BASE FOR CICB        */
         LR    RCICB,R1                                            0090
*        DCBCICB = RCICB;               /* CHAIN CICB TO DCB @ZA07733*/
         ST    RCICB,DCBCICB(,RDCB)                                0091
*        RESPECIFY IFGJCICB BASED(RCICB);                          0092
*                                                                  0092
*        ATFCICBG = '1'B;               /* DENOTE CICB GOTTEN@YA02144*/
*                                                                  0093
         L     @10,WTGCWA-1(,RWTGC)                                0093
         LA    @10,0(,@10)                                         0093
         OI    ATFCICBG(@10),B'10000000'                           0093
*        /************************************************************/
*        /* ASSUME STORAGE KEY OF THE USER IN ORDER TO INITIALIZE    */
*        /* ACB AND CICB FIELDS IN USER STORAGE.                     */
*        /************************************************************/
*                                                                  0094
*        RTEMPS = RDCB;                 /* SAVE DCB-COPY PTR @YA02082*/
         LR    RTEMPS,RDCB                                         0094
*        RUKEY = DXUKEY;                /* OBTAIN USERS KEY  @YA02082*/
         SLR   RUKEY,RUKEY                                         0095
         IC    RUKEY,DXUKEY(,@10)                                  0095
*        GEN (MODESET KEYADDR=(2));     /* CHANGE STORAGE KEY@YA02082*/
         MODESET KEYADDR=(2)
*        RDCB = RTEMPS;                 /* RESTORE DCB PTR   @YA02082*/
*                                                                  0097
         LR    RDCB,RTEMPS                                         0097
*        /* CLEAR CORE OBTAINED                                     */
*        IFGJCICB(1:256) = IFGJCICB(1:256) && IFGJCICB(1:256);/*   0098
*                                          CLEAR FIRST PART         */
         XC    IFGJCICB(256,RCICB),IFGJCICB(RCICB)                 0098
*        IFGJCICB(257:LENGTH(IFGJCICB)) =  IFGJCICB;               0099
         MVC   IFGJCICB+256(100,RCICB),IFGJCICB(RCICB)             0099
* /**********************************************************@ZA29473*/
* /* TEST FOR INPUT AND DCBRECFM EQUAL FIX BLOCKED AND       @ZA29473*/
* /* DCBNCP NOT EQUAL TO ONE - IF YES - BUILD PSEUDO IOBS    @ZA29473*/
* /**********************************************************@ZA29473*/
*                                                        /*  @ZA29473*/
*        IF(PARCOPT(5:8)='0000'B × PARCOPT(5:8)='0011'B)  &/*      0100
*                                                            @ZA29473*/
*           DCBRECFM(1) = '1'B & DCBRECFM(4) = '1'B      /*  @ZA29473*/
*        & DCBNCP  > 1 & DCBCIND2(8) ^= '1'B THEN DO;    /*  @ZA29473*/
         TM    PARCOPT(RPARC),B'00001111'                          0100
         BZ    @GL00007                                            0100
         TM    PARCOPT(RPARC),B'00000011'                          0100
         BNO   @RF00100                                            0100
         TM    PARCOPT(RPARC),B'00001100'                          0100
         BNZ   @RF00100                                            0100
@GL00007 TM    DCBRECFM(RDCB),B'10010000'                          0100
         BNO   @RF00100                                            0100
         CLI   DCBNCP(RDCB),1                                      0100
         BNH   @RF00100                                            0100
         TM    DCBCIND2(RDCB),B'00000001'                          0100
         BO    @RF00100                                            0100
*             CIRESID = ADDR(IFGJCICB)+LENGTH(IFGJCICB); /*  @ZA29473*/
         LA    @10,356                                             0102
         ALR   @10,RCICB                                           0102
         ST    @10,CIRESID(,RCICB)                                 0102
*        RACB = CIRESID;                                 /*  @ZA29473*/
         LR    RACB,@10                                            0103
*        RFY DUMMYIO  BASED (RACB);                      /*  @ZA29473*/
*        CIWK2 = 1;                                      /*  @ZA29473*/
         MVC   CIWK2(4,RCICB),@CF00093                             0105
*        DO WHILE CIWK2  ^= DCBNCP;                      /*  @ZA29473*/
         B     @DE00106                                            0106
@DL00106 DS    0H                                                  0107
*        DUMMYIO  = DUMMYIO && DUMMYIO;                  /*  @ZA29473*/
         XC    DUMMYIO(32,RACB),DUMMYIO(RACB)                      0107
*        CIWK2 = CIWK2 + 1;                              /*  @ZA29473*/
         LA    @10,1                                               0108
         AL    @10,CIWK2(,RCICB)                                   0108
         ST    @10,CIWK2(,RCICB)                                   0108
*        DUMMYPTR = ADDR(DUMMYPTR) +32;                  /*  @ZA29473*/
         LA    @10,32                                              0109
         LR    @06,RACB                                            0109
         ALR   @06,@10                                             0109
         ST    @06,DUMMYPTR(,RACB)                                 0109
*        DUMMYECB = '40'X;                               /*  @ZA29473*/
         MVI   DUMMYECB(RACB),X'40'                                0110
*        DUMMYEPT = ADDR(DUMMYECB);                      /*  @ZA29473*/
         LA    @06,DUMMYECB(,RACB)                                 0111
         ST    @06,DUMMYEPT(,RACB)                                 0111
*        DUMMYDCB = RDCB;                                /*  @ZA29473*/
         ST    RDCB,DUMMYDCB(,RACB)                                0112
*        RACB = RACB + 32;                               /*  @ZA29473*/
         ALR   RACB,@10                                            0113
*        END;                                            /*  @ZA29473*/
@DE00106 L     @10,CIWK2(,RCICB)                                   0114
         SLR   @06,@06                                             0114
         IC    @06,DCBNCP(,RDCB)                                   0114
         CR    @10,@06                                             0114
         BNE   @DL00106                                            0114
*        DUMMYIO = DUMMYIO && DUMMYIO;                   /*  @ZA29473*/
         XC    DUMMYIO(32,RACB),DUMMYIO(RACB)                      0115
*        DUMMYPTR = CIRESID;                             /*  @ZA29473*/
         L     @10,CIRESID(,RCICB)                                 0116
         ST    @10,DUMMYPTR(,RACB)                                 0116
*        DUMMYECB = '40'X;                               /*  @ZA29473*/
         MVI   DUMMYECB(RACB),X'40'                                0117
*        DUMMYEPT = ADDR(DUMMYECB);                      /*  @ZA29473*/
         LA    @10,DUMMYECB(,RACB)                                 0118
         ST    @10,DUMMYEPT(,RACB)                                 0118
*        DUMMYDCB = RDCB;                                /*  @ZA29473*/
         ST    RDCB,DUMMYDCB(,RACB)                                0119
*                  END;                                  /*  @ZA29473*/
*        ELSE;                                           /*  @ZA29473*/
@RF00100 DS    0H                                                  0122
*        RTEMPS = ADDR(CIWK1);          /* ADDRESSIBILITY FOR       */
         LA    RTEMPS,CIWK1(,RCICB)                                0122
*        GEN(USING @DATD,RTEMPS);       /* COMPILER GENERATED TEMPS */
         USING @DATD,RTEMPS
*        /***********************************************************/
*        /*                                                         */
*        /* INITIALIZE DATA ACB                                     */
*        /*                                                         */
*        /***********************************************************/
*                                                                  0124
*        RACB = ADDR(CIACBD);           /* GET ACB-D BASE POINTER   */
         LA    RACB,CIACBD(,RCICB)                                 0124
*        RESPECIFY IFGACB BASED(RACB);                             0125
*        CIWK2 = RACB;                  /* SAVE ACB BASE            */
*                                                                  0126
         ST    RACB,CIWK2(,RCICB)                                  0126
*        ACBLENG = LENGTH(IFGACB);      /* SET ACB LENGTH   @YA02082*/
*                                                                  0127
         MVC   ACBLENG(2,RACB),@CH00221                            0127
*        ACBEXFG = '1'B;                /* SET LOCK BIT 'OFF' - OPEN*/
*                                                                  0128
         OI    ACBEXFG(RACB),B'00000010'                           0128
*        /***********************************************************/
*        /* LOCATE DDNAME IN TIOT                                   */
*        /***********************************************************/
*                                                                  0129
*        IF DCBOFLGS(3) = '1'B          /* CONCAT IN PROCESS        */
*          THEN                         /* YES                      */
         TM    DCBOFLGS(RDCB),B'00100000'                          0129
         BNO   @RF00129                                            0129
*            DO;                                                   0130
*              ACBTIOT = DCBTIOT;       /* TIOT OFFSET              */
         LH    @10,DCBTIOT(,RDCB)                                  0131
         STH   @10,ACBTIOT(,RACB)                                  0131
*              ACBOFLGS(3) = '1'B;      /* SET CONCAT FLAG          */
         OI    ACBOFLGS(RACB),B'00100000'                          0132
*            END;                       /* END OF CONCATENATION     */
*          ELSE                         /* NO CONCATENATION         */
*            DO;                                                   0134
         B     @RC00129                                            0134
@RF00129 DS    0H                                                  0135
*              RTIOT = TIOTPTR + DCBTIOT + 4;                      0135
         L     @10,CVTPTR                                          0135
         L     @10,CVTTCBDW(,@10)                                  0135
         L     @10,TCBPTR(,@10)                                    0135
         LH    RTIOT,DCBTIOT(,RDCB)                                0135
         AL    RTIOT,TIOTPTR(,@10)                                 0135
         LA    RTIOT,4(,RTIOT)                                     0135
*              RESPECIFY TIOEDDNM BASED(RTIOT);                    0136
*              ACBDDNM = TIOEDDNM;      /* GET DDNAME FROM TIOT     */
         MVC   ACBDDNM(8,RACB),TIOEDDNM(RTIOT)                     0137
*              RESPECIFY TIOEDDNM BASED(NOBASE);                   0138
*            END;                       /* END OF NO CONCATENATION  */
*/*******************************************************************/
*        GEN   (EJECT);                 /* SKIP TO A NEW PAGE       */
@RC00129 DS    0H                                                  0140
         EJECT
*                                                                  0141
*        /***********************************************************/
*        /* ID FOR ACB                                              */
*        /***********************************************************/
*        ACBID = 'A0'X;                                            0141
*                                                                  0141
         MVI   ACBID(RACB),X'A0'                                   0141
*        /***********************************************************/
*        /* INDICATE  JES DATA SET ORGANIZATION                     */
*        /***********************************************************/
*        ACBDORGA = '1'B;                                          0142
*                                                                  0142
         OI    ACBDORGA(RACB),B'00001000'                          0142
*        /***********************************************************/
*        /* STORE NULL POINTER TO EXIT LIST INTO ACB                */
*        /***********************************************************/
*        ACBUEL = 0;                                               0143
*                                                                  0143
         SLR   @10,@10                                             0143
         ST    @10,ACBUEL(,RACB)                                   0143
*        /***********************************************************/
*        /* INDICATE PHYSICAL PROCESSING                            */
*        /***********************************************************/
*        ACBMACRF(2) = '1'B;                                       0144
*                                                                  0144
*        /***********************************************************/
*        /* INDICATE SEQUENTIAL PROCESSING                          */
*        /***********************************************************/
*        ACBMACRF(4) = '1'B;                                       0145
*                                                                  0145
         OI    ACBMACRF(RACB),B'01010000'                          0145
*        /***********************************************************/
*        /* DETERMINE IF OPENED FOR INPUT OR OUTPUT                 */
*        /***********************************************************/
*        IF PARCOPT(5:8)='0000'B × PARCOPT(5:8)='0011'B/*          0146
*                                          TEST IF INPUT            */
*          THEN                         /* YES                      */
         TM    PARCOPT(RPARC),B'00001111'                          0146
         BZ    @RT00146                                            0146
         TM    PARCOPT(RPARC),B'00000011'                          0146
         BNO   @RF00146                                            0146
         TM    PARCOPT(RPARC),B'00001100'                          0146
         BNZ   @RF00146                                            0146
@RT00146 DS    0H                                                  0147
*            ACBMACRF(6) = '1'B;        /* SET ACBMACRF FOR GET     */
         OI    ACBMACRF(RACB),B'00000100'                          0147
*          ELSE                         /* NO                       */
*            ACBMACRF(7) = '1'B;        /* SET ACBMACRF FOR PUT     */
         B     @RC00146                                            0148
@RF00146 OI    ACBMACRF(RACB),B'00000010'                          0148
*/*******************************************************************/
*        GEN   (EJECT);                 /* SKIP TO A NEW PAGE       */
@RC00146 DS    0H                                                  0149
         EJECT
*        /***********************************************************/
*        /*                                                         */
*        /*    INITIALIZE CICB FIELDS                               */
*        /*                                                         */
*        /***********************************************************/
*                                                                  0150
*        CISYNNAM = 'IGG019AH';         /* SYNAD EXEC NAME  @YA02082*/
         MVC   CISYNNAM(8,RCICB),@CC00400                          0150
*        CIDCBPTR = DXUDCBAD;           /* SET REAL DCB ADDR@YA02082*/
         L     @10,WTGCWA-1(,RWTGC)                                0151
         L     @10,DXUDCBAD(,@10)                                  0151
         ST    @10,CIDCBPTR(,RCICB)                                0151
*        /*                                IN CICB          @YA02082*/
*        /* THE FOLLOWING STATEMENTS INITIALIZE CICB FIELDS WHICH  0152
*          MAY BE ITERPRETED AS AN IOB BY USER PROGRAMS, SINCE THE 0152
*          CICB IS POINTED TO BY 'DCBIOBA'.  TO PROVIDE COMPATIBILITY
*          FOR PARALLEL GET AND CERTAIN RPG APPLICATIONS, A POSTED 0152
*          ECB AND ECB POINTER ARE PROVIDED AT THE APPROPRIATE IOB 0152
*          OFFSETS, AND THE DUMMY IOB IS CHAINED TO ITSELF (IE LAST).*/
*                                                                  0152
*        CINXTIOB = ADDR(CIDUMIOB);     /* CHAIN PTR IN DUMMY@YA02123*/
         ST    RCICB,CINXTIOB(,RCICB)                              0152
*        CIECBCD = '40'X;               /* MAKE ECB 'POSTED' @YA02123*/
         MVI   CIECBCD(RCICB),X'40'                                0153
*        CIECBPTR = ADDR(CIECBCD);      /* SET ECB POINTER   @YA02123*/
*                                                                  0154
         LA    @10,CIECBCD(,RCICB)                                 0154
         ST    @10,CIECBPTR(,RCICB)                                0154
*        /* SAVE THE ORIGINAL DCB DEVICE TYPE CODE IN CICB           */
*        CIFLAG2 = CIFLAG2 × (DCBDEVT & '01100000'B);/*            0155
*                                                            @YA02082*/
*                                                                  0155
         LA    @10,96                                              0155
         SLR   @06,@06                                             0155
         IC    @06,DCBDEVT(,RDCB)                                  0155
         NR    @10,@06                                             0155
         SLR   @06,@06                                             0155
         IC    @06,CIFLAG2(,RCICB)                                 0155
         OR    @10,@06                                             0155
         STC   @10,CIFLAG2(,RCICB)                                 0155
*        IF DCBDSORG = '0000'X THEN     /* DSORG NOT SUPPLIED@YA02082*/
         CLC   DCBDSORG(2,RDCB),@CB00402                           0156
         BNE   @RF00156                                            0156
*          CIFMDSOR = '1'B;             /* THEN DEFAULT IS   @YA02082
*                                          TO BE PROVIDED    @YA02082*/
*                                                                  0157
         OI    CIFMDSOR(RCICB),B'10000000'                         0157
*        /* SET RETURN CODES IN THE SVC EXIT LIST. THESE CODES ARE   */
*        /* PASSED TO THE USER BY SAM SVCS WHEN THEY ARE ENTERED     */
*        /* FOR PROCESSING A SYSIN/SYSOUT DCB.                       */
*                                                                  0158
*        CIBSPRC  = '04'X;              /* BSP RETURN CODE   @YA02082*/
@RF00156 MVI   CIBSPRC(RCICB),X'04'                                0158
*        CISYNRC  = '08'X;              /* SYNADAF RET CODE @YA02082*/
         MVI   CISYNRC(RCICB),X'08'                                0159
*        /***********************************************************/
*        /*                                                         */
*        /*    INITIALIZE DCB FIELDS                                */
*        /*                                                         */
*        /***********************************************************/
*                                                                  0160
*        /***********************************************************/
*        /* REESTABLISH DATA MANAGEMENT KEY FOR PROCESSING ON       */
*        /* THE COPIED DCB AND FOR RETURN TO MAIN ROUTINE.          */
*        /***********************************************************/
*                                                                  0160
*        GEN (MODESET EXTKEY=DATAMGT);  /* SET DATA MGT KEY @YA02082*/
*                                                                  0160
         MODESET EXTKEY=DATAMGT
*        DCBSVCXL = ADDR (CISVCLST);    /* SVC LIST PTR DCB @YA02082*/
*                                                                  0161
         LA    @10,CISVCLST(,RCICB)                                0161
         ST    @10,DCBSVCXL(,RDCB)                                 0161
*        IF DCBDSORG = '0000'X THEN     /* SET DATA SET ORGANIZATION*/
         CLC   DCBDSORG(2,RDCB),@CB00402                           0162
         BNE   @RF00162                                            0162
*              DCBDSORG = '40'X;        /*  AS PHYSICAL SEQUENTIAL  */
*                                                                  0163
         MVI   DCBDSORG+1(RDCB),X'00'                              0163
         MVI   DCBDSORG(RDCB),X'40'                                0163
*        DCBDEVT = '02'X;               /* SET DEVICE TYPE = JES    */
*                                                                  0164
@RF00162 MVI   DCBDEVT(RDCB),X'02'                                 0164
*        IF DCBMACRF(2)   = '1'B × DCBMACRF(10)  = '1'B THEN/*     0165
*                                          IF DCB FOR QSAM, @YA02082*/
         TM    DCBMACRF(RDCB),B'01000000'                          0165
         BO    @RT00165                                            0165
         TM    DCBMACRF+1(RDCB),B'01000000'                        0165
         BNO   @RF00165                                            0165
@RT00165 DS    0H                                                  0166
*          DO;                          /* YES              @YA02082*/
*            DCBCIND2(8) = '1'B;        /* TURN ON QSAM BIT @YA02082*/
         OI    DCBCIND2(RDCB),B'00000001'                          0167
*             IF DCBBUFNO = 0 THEN      /* ZERO BUFFERS?    @ZA08001*/
         CLI   DCBBUFNO(RDCB),0                                    0168
         BNE   @RF00168                                            0168
*             DCBBUFNO = 5;             /* DEFAULT BUFNO=5  @ZA08001*/
         MVI   DCBBUFNO(RDCB),X'05'                                0169
*             ELSE;                     /* BUFNO NOT ZERO   @ZA08001*/
@RF00168 DS    0H                                                  0171
*          END;                         /* END DO GROUP     @XA03128*/
*        ELSE;                          /* NOT QSAM         @XA03128*/
*                                                                  0172
@RF00165 DS    0H                                                  0173
*        /* SET DEFAULT VALUES IN DCB FOR SYSIN                     */
*                                                                  0173
*        IF PARCOPT(5:8)='0000'B × PARCOPT(5:8)='0011'B/*          0173
*                                          IS DCB FOR SYSIN         */
*           THEN DO;                    /* YES                      */
*                                                                  0173
         TM    PARCOPT(RPARC),B'00001111'                          0173
         BZ    @RT00173                                            0173
         TM    PARCOPT(RPARC),B'00000011'                          0173
         BNO   @RF00173                                            0173
         TM    PARCOPT(RPARC),B'00001100'                          0173
         BNZ   @RF00173                                            0173
@RT00173 DS    0H                                                  0174
*             IF DCBBLKSI = 0           /* BLOCKSIZE SPECIFIED ?    */
*               THEN                    /* NOT SPECIFIED            */
         LH    @10,DCBBLKSI(,RDCB)                                 0175
         N     @10,@CF00422                                        0175
         LTR   @10,@10                                             0175
         BNZ   @RF00175                                            0175
*                 DCBBLKSI = 80;        /* SYSIN DEFAULT            */
*                                                                  0176
         MVC   DCBBLKSI(2,RDCB),@CH00406                           0176
*             IF DCBLRECL = 0           /* LRECL SPECIFIED ?        */
*               THEN                    /* NOT SPECIFIED            */
@RF00175 LH    @10,DCBLRECL(,RDCB)                                 0177
         N     @10,@CF00422                                        0177
         LTR   @10,@10                                             0177
         BNZ   @RF00177                                            0177
*                 DCBLRECL = 80;        /* SYSIN DEFAULT            */
*                                                                  0178
         MVC   DCBLRECL(2,RDCB),@CH00406                           0178
*             IF DCBRECFM(1:3) = '000'B/*                          0179
*                                          RECFM SPECIFIED ?        */
*               THEN                    /* NOT SPECIFIED            */
@RF00177 TM    DCBRECFM(RDCB),B'11100000'                          0179
         BNZ   @RF00179                                            0179
*                 DCBRECFM(1:2) = '10'B;/* SYSIN DEFAULT            */
*                                                                  0180
         NI    DCBRECFM(RDCB),B'10111111'                          0180
         OI    DCBRECFM(RDCB),B'10000000'                          0180
*                END;                   /* END OF SYSIN DO GROUP    */
*        ELSE                           /* DCB IS FOR SYSOUT   Y02082*/
*                                                                  0182
*        /* SET DEFAULT VALUES IN DCB FOR SYSOUT.                    */
*          DO;                                                     0182
         B     @RC00173                                            0182
@RF00173 DS    0H                                                  0183
*            IF DCBRECFM(1:3) = '000'B THEN/*                      0183
*                                          IF RECFM NOT SUPPLD Y02082*/
         TM    DCBRECFM(RDCB),B'11100000'                          0183
         BNZ   @RF00183                                            0183
*              DCBRECFM(1:2) = '11'B;   /* DEFAULT TO U        Y02082*/
*                                                                  0184
         OI    DCBRECFM(RDCB),B'11000000'                          0184
*            IF DCBCIND2(8) = '0'B/*                               0185
*                                          IF BSAM             Y02082*/
*               & DCBRECFM(1:2) = '10'B /*  FIXED              Y02082*/
*               & DCBRECFM(4)   = '1'B  /*   BLOCKED           Y02082*/
*               & DCBLRECL = 0 THEN     /* AND NO LRECL SUPPLD Y02082*/
@RF00183 TM    DCBCIND2(RDCB),B'00000001'                          0185
         BNZ   @RF00185                                            0185
         TM    DCBRECFM(RDCB),B'10000000'                          0185
         BNO   @RF00185                                            0185
         TM    DCBRECFM(RDCB),B'01000000'                          0185
         BNZ   @RF00185                                            0185
         TM    DCBRECFM(RDCB),B'00010000'                          0185
         BNO   @RF00185                                            0185
         LH    @10,DCBLRECL(,RDCB)                                 0185
         N     @10,@CF00422                                        0185
         LTR   @10,@10                                             0185
         BNZ   @RF00185                                            0185
*              DCBLRECL = DCBBLKSI;     /* DEFAULT FROM BLKSIZ Y02082*/
*                                                                  0186
         LH    @10,DCBBLKSI(,RDCB)                                 0186
         N     @10,@CF00422                                        0186
         STH   @10,DCBLRECL(,RDCB)                                 0186
*            IF DCBRECFM(1:2) = '01'B  ×/* FOR VARIABLE LENGTH Y02082*/
*               DCBRECFM(4)   = '1'B    /*  OR BLOCKED FORMAT  Y02082*/
*                                THEN;  /* DO NOTHING          Y02082*/
@RF00185 TM    DCBRECFM(RDCB),B'01000000'                          0187
         BNO   @GL00015                                            0187
         TM    DCBRECFM(RDCB),B'10000000'                          0187
         BZ    @RT00187                                            0187
@GL00015 TM    DCBRECFM(RDCB),B'00010000'                          0187
         BO    @RT00187                                            0187
*            ELSE                       /* FOR U OR F FORMATS  Y02082*/
*              IF DCBLRECL = 0 THEN     /* AND LRECL=0         Y02082*/
         LH    @10,DCBLRECL(,RDCB)                                 0189
         N     @10,@CF00422                                        0189
         LTR   @10,@10                                             0189
         BNZ   @RF00189                                            0189
*                DCBLRECL = DCBBLKSI;   /* DEFAULT FROM BLKSIZ Y02082*/
         LH    @10,DCBBLKSI(,RDCB)                                 0190
         N     @10,@CF00422                                        0190
         STH   @10,DCBLRECL(,RDCB)                                 0190
*          END;                         /* END OF SYSOUT GROUP Y02082*/
*        END PROCESS;                                              0192
@EL00002 DS    0H                                                  0192
@EF00002 DS    0H                                                  0192
@ER00002 LM    @14,@12,12(@13)                                     0192
         BR    @14                                                 0192
*/*******************************************************************/
*                                                                  0193
*        END IGG0199F                   /* END OF OPEN MODULE */   0193
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (IFGSDCB )                                        *
*/*%INCLUDE SYSLIB  (IFGJCICB)                                        *
*/*%INCLUDE SYSLIB  (IFGACB  )                                        *
*;                                                                 0193
@DATA    DS    0H
@CH00221 DC    H'76'
@CH00406 DC    H'80'
@DATD    DSECT
         DS    0F
@ZTEMPS  DS    C
@ZTEMPND EQU   *
@ZLEN    EQU   @ZTEMPND-@ZTEMPS
@TEMPS   EQU   @ZTEMPS
@L       EQU   @ZLEN
IGG0199F CSECT
         DS    0F
@CF00093 DC    F'1'
@CF00422 DC    XL4'0000FFFF'
@DATD    DSECT
         DS    0D
IGG0199F CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
@SIZ001  EQU   @SIZDATD
         DS    0D
@CC00400 DC    C'IGG019AH'
@CC00379 DC    C'9F'
@CC00381 DC    C'0S'
@CB00402 DC    X'0000'
         DS    CL2
LOADLIST DS    CL14
         ORG   LOADLIST
@NM00010 DS    CL6
         ORG   @NM00010
XCTLID   DC    CL2'9G'
XCTLTTR  DC    AL3(0)
XCTLLEN  DC    AL1(0)
         ORG   LOADLIST+6
@NM00011 DS    CL6
         ORG   @NM00011
EXITID   DC    CL2'AH'
EXITTTR  DC    AL3(0)
EXITLEN  DC    AL1(0)
         ORG   LOADLIST+12
@NM00012 DC    AL2(0)
         ORG   LOADLIST+14
@DATD    DSECT
IGG0199F CSECT                          CSECT NAME
PATCH    EQU   *
         DS    CL(IGG0199F+1020-PATCH)  AMOUNT OF UNUSED SPACE
PATCH#   EQU   *-PATCH                  LENGTH OF UNUSED SPACE
         ORG   PATCH                    ORGIN OF PATCH AREA
         DC    (PATCH#)C' '             BLANK OUT PATCH AREA
         DC    C'019'                   SVC CODE
         DC    AL1((LOADLIST-IGG0199F)/8) DISPLACEMENT TO TABLE
@DATD    DSECT
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
@DATEND  EQU   *
IGG0199F CSECT
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
@0       EQU   00
@1       EQU   01
@2       EQU   02
@3       EQU   03
@4       EQU   04
@5       EQU   05
@6       EQU   06
@7       EQU   07
@8       EQU   08
@9       EQU   09
@A       EQU   10
@B       EQU   11
@C       EQU   12
@D       EQU   13
@E       EQU   14
@F       EQU   15
R1       EQU   @01
RTIOT    EQU   @01
RDCB     EQU   @02
RUKEY    EQU   @02
RTEMPS   EQU   @03
RPAR     EQU   @05
RWTG     EQU   @06
RPARC    EQU   @07
RWTGC    EQU   @08
RACB     EQU   @09
RCICB    EQU   @12
R13      EQU   @13
R15      EQU   @15
ROPEN    EQU   @04
ROPENC   EQU   @09
R0       EQU   @00
CVTPTR   EQU   16
WTG      EQU   0
WTGMDNAM EQU   WTG
WTGID    EQU   WTGMDNAM+6
WTGTTR   EQU   WTG+14
WTGTBLEN EQU   WTG+29
WTG1ENT  EQU   WTG+32
WTGC     EQU   0
WTGCID   EQU   WTGC
WTGCTTR  EQU   WTGC+2
WTGCWA   EQU   WTGC+5
PARCNTRY EQU   0
PARCOPT  EQU   PARCNTRY
OPENNTRY EQU   0
IECDSECT EQU   0
DXCCW    EQU   IECDSECT+368
DXUKEY   EQU   IECDSECT+526
DXUDCBAD EQU   IECDSECT+568
DXATEXC1 EQU   IECDSECT+604
NOBASE   EQU   0
IFGSDCB  EQU   0
DCBBUFCB EQU   IFGSDCB+20
DCBBUFNO EQU   DCBBUFCB
DCBDSORG EQU   IFGSDCB+26
DCBIOBAD EQU   IFGSDCB+28
DCBSVCXL EQU   DCBIOBAD
@NM00015 EQU   IFGSDCB+32
DCBHIARC EQU   @NM00015
DCBBFTEK EQU   DCBHIARC
DCBRECFM EQU   IFGSDCB+36
DCBDDNAM EQU   IFGSDCB+40
DCBTIOT  EQU   DCBDDNAM
DCBMACRF EQU   DCBDDNAM+2
DCBOFLGS EQU   IFGSDCB+48
DCBREAD  EQU   IFGSDCB+49
DCBWRITE EQU   DCBREAD
DCBGET   EQU   DCBWRITE
DCBPUT   EQU   DCBGET
DCBCHECK EQU   IFGSDCB+53
DCBGERR  EQU   DCBCHECK
DCBCIND2 EQU   IFGSDCB+61
DCBBLKSI EQU   IFGSDCB+62
DCBIOBA  EQU   IFGSDCB+68
DCBCICB  EQU   DCBIOBA
DCBEOBAD EQU   IFGSDCB+72
DCBLCCW  EQU   DCBEOBAD
DCBEOBR  EQU   DCBLCCW
DCBNCP   EQU   DCBEOBR
@NM00016 EQU   IFGSDCB+76
DCBEOBW  EQU   @NM00016
DCBRECAD EQU   DCBEOBW
DCBDIRCT EQU   IFGSDCB+80
DCBLRECL EQU   IFGSDCB+82
@NM00017 EQU   IFGSDCB+84
DCBCNTRL EQU   @NM00017+1
DCBNOTE  EQU   DCBCNTRL
IFGJCICB EQU   0
CIDUMIOB EQU   IFGJCICB
CINXTIOB EQU   CIDUMIOB
CIECBCD  EQU   CIDUMIOB+4
CIECBPTR EQU   CIDUMIOB+12
CIRESID  EQU   CIDUMIOB+20
CIDCBPTR EQU   CIDUMIOB+28
CIACBD   EQU   IFGJCICB+32
CISYNNAM EQU   IFGJCICB+108
CIREGSAV EQU   IFGJCICB+116
CIFLAGS  EQU   IFGJCICB+188
CIFLAG2  EQU   CIFLAGS+1
CIFMDSOR EQU   CIFLAG2
CIFLAG3  EQU   CIFLAGS+2
CIIOCNT  EQU   IFGJCICB+308
CIWK1    EQU   IFGJCICB+328
CIWK2    EQU   IFGJCICB+332
CISVCLST EQU   IFGJCICB+336
CISYNADA EQU   CISVCLST
CISYNRC  EQU   CISYNADA
CIBLDL   EQU   CISVCLST+4
CIBSP    EQU   CISVCLST+8
CIBSPRC  EQU   CIBSP
CIFEOV   EQU   CISVCLST+12
CISTOW   EQU   CISVCLST+16
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBID    EQU   ACBCOMN
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBDORGA EQU   ACBDSORG+1
ACBEXLST EQU   ACBCOMN+36
ACBUEL   EQU   ACBEXLST
ACBDDNM  EQU   ACBCOMN+40
ACBTIOT  EQU   ACBDDNM
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
CVTTCBDW EQU   0
TCBPTR   EQU   4
TIOTPTR  EQU   12
TIOEDDNM EQU   0
DUMMYIO  EQU   0
DUMMYPTR EQU   DUMMYIO
DUMMYECB EQU   DUMMYIO+4
DUMMYEPT EQU   DUMMYIO+12
DUMMYDCB EQU   DUMMYIO+28
SVCDCBPT EQU   84
DCBDEVT  EQU   IFGSDCB+17
ATFLAGS  EQU   DXATEXC1
ATFOPEN  EQU   ATFLAGS
ATFCICBG EQU   ATFOPEN
ATFCLOSE EQU   ATFLAGS+1
*                                      START UNREFERENCED COMPONENTS
@NM00036 EQU   ATFCLOSE
ATFCICBF EQU   ATFCLOSE
ATFMDMSK EQU   ATFCLOSE
ATFCHECK EQU   ATFOPEN
ATFSYNC  EQU   ATFOPEN
ATFBSAM  EQU   ATFOPEN
ATFQSAM  EQU   ATFOPEN
@NM00035 EQU   ATFOPEN
ATFABEND EQU   ATFOPEN
@NM00039 EQU   DUMMYIO+24
DUMMYCNT EQU   DUMMYIO+20
@NM00038 EQU   DUMMYIO+16
DUMMYIOB EQU   DUMMYIO+8
@NM00037 EQU   DUMMYIO+5
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00034 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
ACBVVIC  EQU   ACBINFLG
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00033 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00032 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00031 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00030 EQU   ACBDSORG+1
@NM00029 EQU   ACBDSORG
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00028 EQU   ACBCCTYP
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00027 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00026 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00025 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
CISTOWRC EQU   CISTOW
CIFEOVRC EQU   CIFEOV
CIBLDLRC EQU   CIBLDL
CISAMWA  EQU   IFGJCICB+324
CIRECPTR EQU   IFGJCICB+320
CIRAREA  EQU   IFGJCICB+316
CIBLKPTR EQU   IFGJCICB+312
CISEGLEN EQU   CIIOCNT
CILWAREA EQU   IFGJCICB+304
CIFDBCK  EQU   IFGJCICB+284
CIRPLEXT EQU   IFGJCICB+268
CIRPL    EQU   IFGJCICB+192
CIFLAG4  EQU   CIFLAGS+3
@NM00024 EQU   CIFLAG3
CIFPOINT EQU   CIFLAG3
CIFERROR EQU   CIFLAG3
CIFVSEOB EQU   CIFLAG3
CIFVSRI  EQU   CIFLAG3
CIFRAGM  EQU   CIFLAG3
CIFCLOSE EQU   CIFLAG3
CIFFSTP  EQU   CIFLAG3
@NM00023 EQU   CIFLAG2
CIFMDEVT EQU   CIFLAG2
CIFLAG1  EQU   CIFLAGS
CIREGS   EQU   CIREGSAV+12
CIREGFC  EQU   CIREGSAV+8
CIREGBC  EQU   CIREGSAV+4
@NM00022 EQU   CIREGSAV
CIACBED  EQU   IFGJCICB+88
@NM00021 EQU   CIDUMIOB+24
@NM00020 EQU   CIDUMIOB+16
CIIOB    EQU   CIDUMIOB+8
@NM00019 EQU   CIDUMIOB+5
DCBEOB   EQU   IFGSDCB+92
DCBPRECL EQU   IFGSDCB+90
@NM00018 EQU   IFGSDCB+88
DCBPOINT EQU   DCBNOTE
DCBEROPT EQU   @NM00017
DCBQSWS  EQU   DCBDIRCT
DCBCCCW  EQU   DCBRECAD
DCBOFFSW EQU   IFGSDCB+67
DCBOFFSR EQU   IFGSDCB+66
DCBWCPL  EQU   IFGSDCB+65
DCBWCPO  EQU   IFGSDCB+64
DCBCIND1 EQU   IFGSDCB+60
DCBSYNAD EQU   IFGSDCB+57
DCBIOBL  EQU   IFGSDCB+56
DCBPERR  EQU   DCBGERR
DCBOPTCD EQU   IFGSDCB+52
DCBMACR  EQU   DCBPUT+1
DCBIFLG  EQU   DCBPUT
DCBDEBAD EQU   DCBDDNAM+5
DCBIFLGS EQU   DCBDDNAM+4
DCBEXLST EQU   IFGSDCB+37
DCBEODAD EQU   IFGSDCB+33
DCBBFALN EQU   DCBBFTEK
DCBBUFL  EQU   IFGSDCB+24
@NM00014 EQU   IFGSDCB+16
@NM00013 EQU   IFGSDCB
DXATEXC2 EQU   IECDSECT+608
@NM00009 EQU   IECDSECT+572
@NM00008 EQU   IECDSECT+527
@NM00007 EQU   IECDSECT+458
DXCALLID EQU   IECDSECT+456
@NM00006 EQU   IECDSECT+440
@NM00005 EQU   IECDSECT+276
IECJFCB  EQU   IECDSECT+100
@NM00004 EQU   IECDSECT
OPENACB  EQU   OPENNTRY+1
OPENOPT  EQU   OPENNTRY
PARCDCB  EQU   PARCNTRY+1
WTGPATH  EQU   WTG+30
WTGFLEN  EQU   WTG+27
WTGTLEN  EQU   WTG+24
@NM00003 EQU   WTG+17
@NM00002 EQU   WTG+8
@NM00001 EQU   WTGMDNAM
*                                      END UNREFERENCED COMPONENTS
@RT00083 EQU   GETMAIN
@RC00173 EQU   @EL00002
@RF00189 EQU   @EL00002
@RT00187 EQU   @EL00002
@PB00002 EQU   @EL00001
@RF00179 EQU   @RC00173
@EL01    EQU   @EL00001
@ENDDATA EQU   *
         END   IGG0199F,(C'PLS0931',0701,78076)
