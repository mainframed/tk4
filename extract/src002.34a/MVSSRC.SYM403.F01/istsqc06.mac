         TITLE 'INQUIRE DISPLAY-ISTSQC06                               *
                        '
ISTSQC06 CSECT ,                                                   0001
@MAINENT DS    0H                                                  0001
         USING *,@15                                               0001
         B     @PROLOG                                             0001
         DC    AL1(16)                                             0001
         DC    C'ISTSQC06  77.334'                                 0001
         DROP  @15
@PROLOG  ST    @14,12(,@13)                                        0001
         STM   @01,@12,24(@13)                                     0001
         BALR  @12,0                                               0001
@PSTART  LA    @09,4095(,@12)                                      0001
         USING @PSTART,@12                                         0001
         USING @PSTART+4095,@09                                    0001
*   C06R1=C06R1;                                                   0469
*                                                                  0469
*/********************************************************************/
*/* ROUTINE NAME: ISTSQC06 - INQUIRE: TYPE = DISPLAY STATUS          */
*/*                                                                  */
*/* FUNCTION: PERFORMS HOUSEKEEPING. TESTS TO SEE IF REQUEST IS FOR  */
*/*           OPERATOR CONTROL, IF NEEDED SIZE CALCULATION IS THE    */
*/*           ONLY REQUIREMENT, OR IF MOVEMENT OF THE RDTE AND       */
*/*           RELATED DATA IS ALSO NECESSARY. RELEASES LOCAL MEMORY  */
*/*           LOCKS (IF REQUIRED) AFTER SUBROUTINE CALLS.            */
*/*                                                                  */
*/* INPUT:  C06R1   (R1) - POINTER TO RPL HEADER (ISTRPH)            */
*/*         C06R13 (R13) - POINTER TO O/C SAVE AREA                  */
*/*                                                                  */
*/* OUTPUT: C06R0   (R0) - SIZE OF NEEDED × USED AREA (FOR RDTE AND  */
*/*                        RELATED DATA)                             */
*/*         C06R15 (R15) - RETURN CODE (0=SUCCESSFUL, 4=UNSUCCESSFUL,*/
*/*                        X'2B' = CALCULATION OF SIZE ONLY)         */
*/*                                                                  */
*/* ROUTINES CALLED: C06VALA  - TO VALIDATE USER-SUPPLIED AREA AND   */
*/*                              SET LOCAL MEMORY LOCKS              */
*/*                  C06DISPA - TO BE ROUTED TO PROPER SUBROUTINE    */
*/*                             TO PROCESS TYPE OF RDTE INQUIRY      */
*/*                                                                  */
*/* MACROS USED: CRRMAINT - TO ESTABLISH COMPONENT RECOVERY RECORD   */
*/*              VSETLCK  - TO RELEASE LOCAL MEMORY LOCK             */
*/********************************************************************/
*                                                                  0470
*   RFY                                                            0470
*    (PTRRPH,                                                      0470
*     SAREG,                                                       0470
*     C06R0,                                                       0470
*     C06R13)RSTD;                                         /*@D32CKTQ*/
*   PTRRPH=C06R1;                   /* SAVE POINTER TO RPH   @D32CKTQ*/
*                                                                  0471
         LR    PTRRPH,C06R1                                        0471
*    DO;                                                           0472
*/***  CRRMAINT  PROCNM(ISTSQC06)FUNC(SUB)COMP(NS)  ***/           0473
*    DCL CMZK0010 PTR(31) REG(1);                                  0473
*    RFY (CMZK0010) RSTD;                                          0474
*                                                                  0474
*/* ATBUILD (ISTRPH,ISTCRA,ISTPFCRR,ISTNSCRR)  */                  0475
*/* LOGICAL CHANNEL COMMAND WORD                                      *
*/* ADD A DECLARE                                      003 10/18/74   *
*DCL  1  ISTLCCW BDY(WORD) BASED,                                  0475
*        2  LCCWOP    CHAR(1),         /* OPERATION CODE -CONTROL     *
*           3  LCCWSI BIT(1),          /* SESS INIT / START DIALOG FLG*
*           3  LCCWSD BIT(1),          /* SESS DISCON/END DIALOG FLG  *
*           3  LCCWRWOP BIT(6),        /* READ/WRITE OPERATION CODE   *
*              4  * BIT(1),            /* RESERVED                    *
*              4  LCCWSOP BIT(1),      /* SPECIAL OPERATION LIKE   0475
*                                         ERASE OR READ CONT          *
*              4  LCCWCTL BIT(4),      /* CONTROL TYPE                *
*                 5  LCCWMODE BIT(2),  /* MODE TYPE                   *
*                 5  LCCWTYPE BIT(2),  /* OPERATION TYPE              *
*        2  LCCWFLAG  CHAR(1),         /* FLAG BYTE                   *
*           3  LCCWCD BIT(1),          /* CHAIN DATA                  *
*           3  LCCWCC BIT(1),          /* CHAIN COMMAND               *
*           3  LCCWCKPT BIT(1),        /* SUPPRESS 3705 CHECK POINT
*                                         RECORD                      *
*           3  LCCWNTVC BIT(1),        /* DO NOT PERFORM VALCHEK      *
*           3  LCCWIDAT BIT(1),        /* LCCWDATA CONTAINS DATA      *
*           3  LCCWLSI BIT(1),         /* LCCW SYNCH INDICATOR        *
*              4  LCCWPER BIT(1),      /* POST=RESP                   *
*           3  LCCWRFI BIT(1),         /* REQUEST FEEDBACK INDICATOR  *
*           3  LCCWACI BIT(1),         /* ADDITION COMMAND INDICATOR  *
*        2  LCCWCNT FIXED(16),         /* DATA COUNT                  *
*        2  LCCWDATA PTR(31);          /* DATA ADDRESS OR IMMED. DATA *
*/* LOGICAL COMMAND CODES */                                       0476
*DCL  LXDQ     BIT(8) CONSTANT('3B'X), /* RESET DEVICE QUEUE          *
*     LXEC     BIT(8) CONSTANT('4B'X), /* RESET AT END OF COMMAND     *
*     LXO      BIT(8) CONSTANT('5B'X), /* RESET ORDERLY               *
*     LCCWPRGE BIT(8) CONSTANT('6B'X), /* PURGE                       *
*     LWH      BIT(8) CONSTANT('0F'X), /* WRITE HEADER INDI. 1ST BLOCK*
*     LWRVI    BIT(8) CONSTANT('1F'X), /* WRITE RVI                   *
*     LWNA     BIT(8) CONSTANT('2F'X), /* WRITE NEGATIVE ACK          *
*     LWAA     BIT(8) CONSTANT('3F'X), /* WRITE ALTERNATE ACK         *
*     LWPLG    BIT(8) CONSTANT('5F'X), /* WRITE ACK LEADING GRAPHICS  *
*     LWNLG    BIT(8) CONSTANT('6F'X), /* WRITE NACK LEADING GRAPHICS *
*     LSMDE    BIT(8) CONSTANT('4F'X), /* SET MODE                    *
*     LIFBM    BIT(8) CONSTANT('7F'X), /* INDIC 1ST BLOCK OF MESSAGE  *
*     LTEST    BIT(8) CONSTANT('FE'X), /* TEST LCCW                   *
*     LPRMPT   BIT(8) CONSTANT('13'X), /* PREEMPT LCCW                *
*     LRSTR    BIT(8) CONSTANT('43'X), /* RESTORE LCCW                *
*     LEXEC    BIT(8) CONSTANT('FF'X), /* SPECIAL CONTROL OPERATION   *
*     LREAD    BIT(2) CONSTANT('10'B),  /* READ TYPE LCCW             *
*     LWRITE   BIT(2) CONSTANT('01'B),  /* WRITE TYPE LCCW            *
*     LCNTRL   BIT(2) CONSTANT('11'B),  /* CONTROL TYPE LCCW          *
*     LRESET   BIT(4) CONSTANT('1011'B),/* RESET COMMANDS             *
*     LTIC     BIT(8) CONSTANT('08'X),  /* LOGICAL TIC                *
*     LWR      BIT(6) CONSTANT('000001'B),  /* WRITE CONVERSATIONAL   *
*     LWB      BIT(6) CONSTANT('000101'B),  /* WRITE BLOCK            *
*     LWM      BIT(6) CONSTANT('001001'B),  /* WRITE MESSAGE          *
*     LWT      BIT(6) CONSTANT('001101'B),  /* WRITE TRANSMISSION     *
*     LEWM     BIT(6) CONSTANT('011001'B),  /* ERASE/WRITE MESSAGE    *
*     LEWT     BIT(6) CONSTANT('011101'B),  /* ERASE/WRITE TRNSMSSN   *
*     LEAU     BIT(6) CONSTANT('010001'B),  /* ERASE ALL UNPROTECTED  *
*     LRB      BIT(6) CONSTANT('000110'B),  /* READ BLOCK             *
*     LRM      BIT(6) CONSTANT('001010'B),  /* READ MESSAGE           *
*     LRT      BIT(6) CONSTANT('001110'B),  /* READ TRANSMISSION      *
*     LRMOD    BIT(6) CONSTANT('010010'B),  /* READ MODIFIED          *
*     LRBUF    BIT(6) CONSTANT('010110'B),  /* READ BUFFER            *
*     LRCONT   BIT(6) CONSTANT('011010'B),  /* READ CONTINUOUS        *
*     LRPEP    BIT(6) CONSTANT('011110'B),  /* READ PERPETUAL         *
*     LCPYM    BIT(6) CONSTANT('101001'B),  /* COPY MESSAGE           *
*     LCPYT    BIT(6) CONSTANT('101101'B),  /* COPY TRANSMISSION      *
*     LD       BIT(8) CONSTANT('23'X),  /* DISCONNECT                 *
*     LDEC     BIT(8) CONSTANT('33'X),  /* DISCONNECT WITH END OF CALL*
*     LEOC     BIT(8) CONSTANT('53'X),  /* END OF CALL COMMAND        *
*     LXEL     BIT(8) CONSTANT('0B'X),  /* RESET ERROR LOCK           *
*     LXC      BIT(8) CONSTANT('1B'X),  /* RESET CONDITIONAL          *
*     LXI      BIT(8) CONSTANT('2B'X),  /* RESET IMMEDIATE            *
*     LC       BIT(8) CONSTANT('03'X),  /* CONTACT                    *
*     LWPA     BIT(8) CONSTANT('FD'X); /* WRITE POSITIVE ACK          *
*DCL  LMT      BIT(2) CONSTANT('11'B), /* TRANSMISSION MODE           *
*     LMS      BIT(2) CONSTANT('00'B), /* SPECIAL MODE LIKE CONV, EAU *
*     LMB      BIT(2) CONSTANT('01'B), /* BLOCK MODE                  *
*     LMM      BIT(2) CONSTANT('10'B); /* MSG OR CONTINUOUS MODE      *
*/* FOLLOWING EQUATES FOR  - PORT SOLICITOR (DIAL)                    *
*/* PORT SOLICITOR COMMAND CODES                                      *
*DCL PSOL    BIT(8) CONSTANT('FE'X), /* SPECIAL PORT SOLICITOR     0478
*                                       COMMAND                       *
*    STCTL    BIT(8) CONSTANT('01'X), /* START CONTROL                *
*    RESTCTL  BIT(8) CONSTANT('02'X), /* RESET & CONTROL - REDRIVE    *
*    STIPUT   BIT(8) CONSTANT('03'X); /* START INPUT                  *
*/*   FOLLOWING EQUATES FOR SDLC SUPPORT                              *
*DCL  LCCHOLD  BIT(8) CONSTANT('01'X),  /* HOLD                       *
*     LCCRHOLD BIT(8) CONSTANT('02'X),  /* RELEASE HOLD               *
*     LSEND    BIT(8) CONSTANT ('F1'X), /* SEND                       *
*     LCLEAR   BIT(8) CONSTANT ('F2'X), /* CLEAR                      *
*     LCRUD    BIT(8) CONSTANT ('F3'X), /* CLEAR, UNBIND              *
*     LCRUDNFY BIT(8) CONSTANT ('F4'X), /* CLEAR, UNBIND, NOTIFY      *
*     LNFY     BIT(8) CONSTANT ('F5'X), /* NOTIFY                     *
*     LRELCB   BIT(8) CONSTANT ('F6'X), /* RELEASE CB                 *
*     LRESTSR  BIT(8) CONSTANT ('F7'X), /* RESETSR                    *
*     LCLRNFY  BIT(8) CONSTANT('F8'X),  /* CLEAR/NOTIFY               *
*     LCHPUR   BIT(8) CONSTANT('F9'X);  /* PURGE                      *
*DCL  LCCWSIZE FIXED(8) CONSTANT(8);    /* LCCW SIZE                  *
*DCL  LRDS     BIT(8) CONSTANT('FF'X);  /* RECORD DEV STATS COMMAND   *
*DCL  LQUIS    BIT(8) CONSTANT('FE'X);  /* QUIESCE COMMAND            *
*/*              LOGICAL CHANNEL PROGRAM BLOCK                       */
*/*                                                                  */
*/*  REVISIONS                                         007 05/19/75  */
*/*                                                                  */
*DCL  1  ISTLCPB BDY(WORD) BASED(LCPBPTR),                         0483
*        2 LCPTYPE CHAR(1),            /* TYPE CODE                  */
*        2 LCPLNGTH  PTR(8),           /* LENGTH IN BYTES            */
*        2 LCPREQTG CHAR(2),           /* LCPB REQ. TAG FIELD        */
*          3 LCPFLAGS BIT(8),          /* FLAG BYTE                  */
*            4 LCPZRT00 BIT(1),        /* LOGICAL ERROR FLAG         */
*            4 LCPZRT01 BIT(1),        /* CONTROL BLOCK ERROR        */
*            4 LCPZF001 BIT(1),        /* LCP START PROCESS FLAG     */
*              5 LCPZRT02 BIT(1),      /* I/O INITIATION DISABLED    */
*                6 LCPZRTL2 BIT(1),    /* END OF SCHEDULABLE BLOCK   */
*            4 LCPZF002 BIT(1),        /* LCP IN PROCESSING FLAG     */
*              5 LCPZRT03 BIT(1),      /* GO LOOK AT FMCB LINE STATE */
*                                      /* FIELD (REQ. TAG OVERLAY)   */
*                6 LCPZRTL3 BIT(1),    /* WRITE/READ REQUEST         */
*            4 LCPZF003 BIT(1),        /* LCP PROCESSING COMPLETE FLAG*
*              5 LCPZRT04 BIT(1),      /* STPR SET IN BDU FLAG       */
*                                      /* (REQ. TAG OVERLAY)         */
*                6 LCPZRTL4 BIT(1),    /* FEEDBACK REQUESTED         */
*            4 LCPZF004 BIT(1),        /* SINGLE LCCW/LCP FLAG       */
*              5 LCPZRT05 BIT(1),      /* FEEDBACK TO BE ROUTED TO   */
*                                      /* ICNCB FMCB (REQ. TAG       */
*                                      /* OVERLAY)                   */
*                6 LCPZRTL5 BIT(1),    /* DECREMENT SCHED COUNT ON DEQ*
*            4 LCPZRT06 BIT(1),        /* CRITICAL TEXT BLOCK        */
*                                      /* FLAG (REQ. TAG OVERLAY)    */
*              5 LCPZRTL6 BIT(1),      /* WRITE REQUEST              */
*            4 LCPZRT07 BIT(1),        /* BUFFER TRACE ACTIVE        */
*                                      /* FLAG (REQ. TAG OVERLAY)    */
*              5 LCPZRTL7 BIT(1),      /* SCHEDULING FLAG            */
*          3 LCPMNRCD CHAR(1),         /* LCP MINOR REJECTION CODE   */
*            4 LCPZRT08 BIT(1),        /* I/O TRACE ACTIVE FLAG      */
*                                      /* (REQ. TAG OVERLAY)         */
*              5 LCPZRTL8 BIT(1),      /* DEVICE END NOTIFICATION    */
*            4 LCPZRT09 BIT(1),        /* DIALOGUE SCHED DISABLED    */
*              5 LCPZRTL9 BIT(1),      /* CRITICAL TEXT FLAG         */
*            4 LCPZRT0A BIT(1),        /* SIMULATED CONTACT FLAG     */
*            4 LCPZRT0B BIT(1),        /* SIMULATED DISCONNECT FLAG  */
*        2 LCPCHAIN PTR(31),           /* APS CHAIN                  */
*          3 LCPCHAI1 PTR(8),                                      0483
*            4 LCPCHNG BIT(1),         /* GATE BIT                   */
*          3 LCPCHAI2 PTR(24),         /* ADDRESS FIELD              */
*        2 LCPRUCNT PTR(8),            /* NUMBER OF RU FOR THIS LCPB */
*          3 LCPZMIRC CHAR(1),         /* MINOR RETURN CODE          */
*        2 LCPFLAG2 CHAR(1),           /* SECOND FLAG BYTE           */
*          3 LCPPRFLG BIT(1),          /* PACING REQUIRED            */
*          3 LCPASYN  BIT(1),          /* ASYNCHRONOUS LCPB          */
*          3 LCPRSTRT BIT(1),          /* RESTART LCPB               */
*          3 LCPTLBPI BIT(1),          /* TPIOS BLOCK LCCW           */
*            4 LCPZRIMM BIT(1),        /* RESET IMMED REQUIRED ON ERR*/
*          3 LCPFID0  BIT(1),          /* FID0 TH INDICATOR FOR RECORD*
*            4 LCPEXRES BIT(1),        /* EXCEP. RESPONSE SPEC. 3270R*/
*          3 LCPDSTAT BIT(1),          /* DIALOGUE STATE BIT, 3270R  */
*                                      /* 0=REQ. REJECT,1=STATE ERROR*/
*          3 LCPFREE  BIT(1),          /* DEALLOCATE LCPB 3270R      */
*          3 LCPATOP  BIT(1),          /* ATOP LCPB  3270R           */
*        2 LCPSEQ   FIXED(16),         /* OUTBOUND SEQUENCE NUMBER   */
*          3 LCPRRCCT PTR(8),          /* COUNT OF RESPONSES RECEIVED*/
*          3 LCPRRCNT PTR(8),          /* COUNT OF RESPONSES REQUESTED*
*        2 LCPLCCW1 PTR(31),           /* ADDR FIRST LCCW FOR FID1   */
*        2 LCPCID CHAR(4) BDY(WORD),   /* COMMUNICATION ID           */
*          3 LCPSAF BIT(16),           /* SOURCE IDENTIFICATION      */
*          3 LCPDAF BIT(16),           /* DESTINATION IDENTIFICATION */
*        2 LCPNXLCW PTR(31),           /* ADDR NEXT LCCW             */
*        2 LCPFDBA PTR(31),            /* BTU ADDRESS                */
*          3 LCPFDB1 PTR(8),                                       0483
*          3 LCPFDB2 PTR(24),          /* ADDRESS FIELD              */
*        2 LCPTLBAD PTR(31),           /* ADDRESS OF TLB             */
*        2 LCPFOSN  BIT(16),           /* SEQUENCE NUMBER FIRST RU   */
*        2 LCPFSNCH FIXED(16),         /* 1ST SEQ NUMBER IN RU CHAIN */
*        2 LCPSTYPE FIXED(8),          /* LCPB SUB-TYPE X'FF' = RESET,*
*                                      /* X'00' = NON-RESET          */
*        2 LCPFLG1 CHAR(1),            /* FLAGS                      */
*          3 LCPRESET BIT(1),          /* A TPQUE WITH RESET QUEUED  */
*                                      /* THIS ELEMENT               */
*          3 LCPINTER BIT(1),          /* INTERNAL LCPB              */
*          3 LCPDIRPT BIT(1),          /* NOT SEND W/POST=SCHED=0    */
*          3 LCPREDRV BIT(1),          /* LCPB IS FOR REDRIVE        */
*          3 LCPSTLB  BIT(1),          /* TLB NOT TO BE FREED        */
*          3 LCPTRANS BIT(1),          /* DATA INCLUDES CONTROL CHARS*/
*          3 LCPRSV78 BIT(2),          /* RESERVED                   */
*        2 LCPLCCWC BIT(8),            /* COUNT OF LCCWS             */
*        2 LCPRSV77 CHAR(1),           /* RESERVED                   */
*        2 LCPFLCCW PTR(31),           /* ADDR OF FIRST LCCW         */
*          3 LCPUBFSB PTR(31),         /* UNBIND FSB ADDRESS         */
*        2 LCPCLREP PTR(31),           /* PTR TO CLEAR LCPB IN UCB   */
*/*  NOTE:  THE FOLLOWING FIELD - LCPLCCW MUST BE THE LAST FIELD     */
*/*         IN THIS CONTROL BLOCK.  THE CONTROL BLOCK ISTDCLCP HAS   */
*/*         FIELDS IN IT WHICH MUST BE CONTIGUOUS WITH LCPLCCW       */
*        2 LCPLCCW  CHAR(LENGTH(ISTLCCW)) BDY(WORD), /* FIRST LCCW   */
*          3 LCPRSTQH PTR(31),         /* RESET LCPB QUEUE HEADER    */
*          3 LCPPABA  PTR(31),         /* PAB POINTER                */
*            4 LCPRPHA  PTR(31),       /* RPH POINTER                */
*              5 LCPFTYPE BIT(1);      /* FEEDBACK TYPE              */
*/*     CONSTANTS FOR LCPTYPE                                         *
*DCL  LCRPHFT  BIT(1) CONSTANT('1'B);                              0484
*DCL  LCPABFT  BIT(1) CONSTANT('0'B);                              0485
*DCL LCPBFIRM BIT(8) CONSTANT('10'X);  /* LU FAILED, CLSDST, SCHED LOST
*                                         TERM, OPNDST MAY BE TRIED   *
*DCL LCPBTERM BIT(8) CONSTANT('11'X);  /* TERM RECEIVED,CLSDST,    0487
*                                         SCHED LOST TERM             *
*/*                                                                   *
*                                                                  0488
*DCL 1 LCPZTIE BDY(WORD) DEFINED(LCPCID), /* TOLTEP INTERFACE      0488
*                                         ELEMENT OVERLAY            */
*       2  LCPZFMCA PTR(31),           /* ACTIVE FMCB ADDRESS        */
*       2  LCPZSNA PTR(31),            /* SYMBOLIC NAME ADDRESS      */
*       2  LCPZSNAM CHAR(8) BDY(WORD), /* SYMBOLIC NAME              */
*          3  LCPZTRV1 PTR(31),        /* RESERVED FOR RESTORE LCP   */
*          3  LCPZTRV4 PTR(31);        /* RESERVED FOR RESTORE LCP   */
*DCL LCTYPE BIT(8) CONSTANT('04'X);                                0489
*DCL PLCPTYPE BIT(8) CONSTANT('28'X);  /* PURGE LCPB TYPE ID         */
*DCL LCPCLACB BIT(8) CONSTANT('04'X);  /* LCPB FROM CLOSE ACB        */
*DCL LSRSTYPE BIT(8) CONSTANT('FF'X);  /* RESET SUBTYPE              */
*DCL LCPETYPE BIT(8) CONSTANT('40'X);  /* EXTENDED LCPB TYPE ID      */
*/*                                                                  */
*/*  MINOR RETURN CODES                                              */
*/*                                                                  */
*DCL LCMCRSTR BIT(8) CONSTANT('F7'X),  /* MINOR RC FOR RESETSR       */
*    LCPMNEW  BIT(8) CONSTANT('02'X),  /* EARLY WARNING,             */
*                                      /* RECOVERY IN PROGRESS       */
*    LCPMNPF  BIT(8) CONSTANT('03'X),  /* PERM. I/O FAILURE          */
*    LCPMNAS  BIT(8) CONSTANT('04'X),  /* AUTO NETWORK SHUTDOWN      */
*    LCPMNCL  BIT(8) CONSTANT('06'X),  /* CLOSE/CLSDST OCCURED       */
*    LCPMNVD  BIT(8) CONSTANT('07'X),  /* VARY DEACTIVATE            */
*    LCPMNTF  BIT(8) CONSTANT('10'X),  /* TEMP RECORD DEVICE FAILURE */
*    LCPMNSF  BIT(8) CONSTANT('01'X),  /* TEMP BASIC FAILURE /       */
*    LCPMNTS  BIT(8) CONSTANT('11'X),  /* TERMINATE SELF             */
*    LCPMNAP  BIT(8) CONSTANT('0A'X),  /* APPL. ISSUED CLEAR         */
*    LCPMNPR  BIT(8) CONSTANT('0B'X),  /* PREEMPT                    */
*    LCPMNRE  BIT(8) CONSTANT('0C'X);  /* RESTORE                    */
*/* VS1, VS2 TPIOS SAVEAREA FORMAT */                              0495
*DCL  1  ISTZSAVE BDY(WORD) BASED,                                 0495
*        2   ZSAZSVBC PTR(31),         /* SAVEAREA BACK CHAIN        */
*            3   ZSAZSVMS CHAR(1),     /* MODULE TRACE CODE          */
*                4 ZSAZACTV BIT(1),    /* ACTIVE SAVE AREA FLAG      */
*        2   ZSAZSVFC PTR(31),         /* SAVEAREA FORWARD CHAIN     */
*        2   ZSAZSVRR PTR(31),         /* RETURN REGISTER            */
*        2   ZSAZSVVR (6) PTR(31),    /* VARIABLE REGS (7-12) SVEAREA*/
*        2   ZSAZTRAC CHAR(4);        /* EBCDIC NAME OF OWNER        */
*/*                                                                0496
*THE FOLLOWING EQUATES SHOULD READ ''FIXED(8) CONSTANT(LENGTH(X))'',
*WHERE X IS THE NAME OF THE VARIABLE CONTROL BLOCK OR FIELD OF WHICH
*LENGTH IS THE VALUE BEING EQUATED, SHOULD THE PLS COMPILER BE     0496
*BE ABLE TO TAKE IT.                                               0496
*                                                                    */
*DCL ZSAZSVVA FIXED(8) CONSTANT(8);  /* DISPLACEMENT TO VARIABLE REGS*/
*DCL ZSAZSVSZ FIXED(8) CONSTANT(40); /* LENGTH OF ISTZSAVE           */
*/* PREFIX FOR CRR                                                   */
*/*                                                                  */
*/* RELEASE 1 - JUNE 28, 1973                                        */
*/*                                                                  */
*DCL 1 ISTPFCRR BASED BDY(WORD),        /* PREFIX FOR CRR            */
*     2  PFCCRR   CHAR(4),              /* CRR HEADER                */
*        3  PFCCRRID CHAR(1),           /* CRR ID FIELD              */
*           4  CRRID CHAR(1),           /* BASIC CTL LAYER DEFINITION*/
*        3  PFCRSV10 CHAR(1),           /* RESERVED FOR ALIGNMENT    */
*        3  PFCCRRLN CHAR(2),           /* CRR LENGTH                */
*           4  CRRLEN CHAR(2),          /* BASIC CTL LAYER DEF       */
*     2  PFCHDR CHAR(8) BDY(WORD),      /* SAVE AREA FOR OLD CRR FRR */
*        3  PFCCRRO  PTR(31),           /* PTR TO OLD CRR            */
*           4  CRRCHAIN PTR(31),        /* BASIC CTL LAYER DEFINITION
*                                          FOR OLD CRR PTR           */
*        3  PFCFRRO  PTR(31),           /* PTR TO OLD FRR            */
*           4  CRRFRR   PTR(31),        /* BASIC CTL LAYER         0498
*                                          DEFINITION OF OLD FRR PTR */
*     2  PFCFTA BIT(8),                 /* ID OF LAST FUNCTION TRACED*/
*     2  PFCRSV01 CHAR(3);              /* ALIGNMENT                 */
*DCL PFIDPIE BIT(8) CONSTANT('80'X);    /* DOS/VS TPIOS              */
*DCL PFIDORE BIT(8) CONSTANT('81'X);    /* DOS/VS BMS                */
*DCL PFIDAPE BIT(8) CONSTANT('82'X);    /* DOS/VS PSS                */
*DCL PFCIDPSV BIT(8) CONSTANT('38'X); /* COMPONENT ID              0502
*                                          PSS - VS1 AND 2           */
*DCL PFCIDTPV BIT(8) CONSTANT('3C'X); /* COMPONENT ID              0503
*                                          TPIOS VS1 AND 2           */
*DCL PFCIDSME BIT(8) CONSTANT('3D'X); /* COMPONENT ID              0504
*                                          STORAGE MANAGEMENT DOS    */
*DCL PFCIDOC BIT(8) CONSTANT('31'X);    /* COMPONENT ID OPEN/CLOSE   */
*DCL PFCIDPS BIT(8) CONSTANT('32'X);    /* PORT SOLICITOR            */
*DCL PFCIDCS BIT(8) CONSTANT('34'X);    /* CLUSTER SOLICITOR         */
*DCL PFCIDIT BIT(8) CONSTANT('35'X);    /* INIT/TERM                 */
*DCL PFCIDVY BIT(8) CONSTANT('36'X);    /* VARY                      */
*DCL PFCIDNS  BIT(8) CONSTANT('37'X);   /* NET. STAT.SRV.            */
*DCL PFCIDTPE BIT(8) CONSTANT('38'X);   /* COMPONENT ID            0511
*                                          TPIOS - DOS               */
*DCL PFCIDCL BIT(8) CONSTANT('39'X);    /* COMPONENT ID            0512
*                                          CONTROL LAYER             */
*DCL PFCIDPSE BIT(8) CONSTANT('3A'X);   /* COMPONENT ID            0513
*                                          PSS - DOS                 */
*DCL PFCIDSMV BIT(8) CONSTANT('3F'X);   /* COMPONENT ID            0514
*                                          STORAGE MANAGEMENT        */
*DCL PFCIDTIO BIT(8) CONSTANT('40'X);   /* COMPONENT ID TIIO       0515
*                                          PROCESSING (VS2)          */
*DCL PFCIDRS  BIT(8) CONSTANT('41'X);   /* ID FOR REMOTE SOLICITOR   */
*/* CRR FOR COMMAND FACILITIES                                      */
*/*  REVISIONS                                         001 06/02/75 */
*DCL  1  ISTCFCRR BDY(WORD) BASED, /* CRR FOR COMMAND FACILITIES    */
*        2 CFCAUDIT,               /* AUDIT TRAIL FOR CMD FACILITIES*/
*          3 CFCNTRD  CHAR(1),     /* LIST OF MODULES IN COMMAND    */
*                                  /* FACILITIES ENTERED            */
*            4 NCFCS1   BIT(1),    /* IND MODULE ISTCFCS1 ENTERED   */
*            4 NCFCS2   BIT(1),    /* IND MODULE ISTCFCS2 ENTERED   */
*            4 NCFCR1   BIT(1),    /* IND MODULE ISTCFCR1 ENTERED   */
*            4 NCFCRP   BIT(1),    /* IND MODULE ISTCFCRP ENTERED   */
*            4 NCFCR2   BIT(1),    /* IND MODULE ISTCFCR2 ENTERED   */
*            4 NCFRSVD  BIT(3),    /* RESERVED                      */
*          3 CFCCRT   CHAR(1),     /* LIST OF MODULES IN COMMAND    */
*                                  /* FACILITIES RUNNING            */
*            4 CCFCS1   BIT(1),    /* IND MODULE ISTCFCS1 RUNNING   */
*            4 CCFCS2   BIT(1),    /* IND MODULE ISTCFCS2 RUNNING   */
*            4 CCFCR1   BIT(1),    /* IND MODULE ISTCFCR1 RUNNING   */
*            4 CCFCRP   BIT(1),    /* IND MODULE ISTCFCRP RUNNING   */
*            4 CCFCR2   BIT(1),    /* IND MODULE ISTCFCR2 RUNNING   */
*            4 CCFRSVD1 BIT(3);    /* RESERVED                      */
*DCL TIDCFCS1 BIT(8) CONSTANT('00'X); /* THREAD ID FOR ISTCFCS1     */
*DCL TIDCFCR1 BIT(8) CONSTANT('01'X); /* THREAD ID FOR ISTCFCR1     */
*DCL TIDCFCR2 BIT(8) CONSTANT('02'X); /* THREAD ID FOR ISTCFCR2     */
*/* COMPONENT RECOVERY RECORD FOR TPIOS */                         0521
*/*  DELTA                                             006 02/10/75  */
*DCL                                                               0521
*1  ISTZCRR BDY(WORD) BASED,     /* CONTROL WORD                     */
*   2  ZCRCRR CHAR(4),           /* CONTROL WORD                     */
*      3  ZCRID CHAR(1),         /* CONTROL BLOCK ID                 */
*      3  ZCRLEN CHAR(2),        /* LENGTH OF ZCR                    */
*      3  ZCRFLAG CHAR(1),       /* FLAGS                            */
*   2  ZCRCHAIN PTR(31),         /* POINTER TO PREVIOUS ZCR          */
*   2  ZCRFRRA PTR(31),          /* PTR TO FRR                       */
*   2  ZCRFLGS1 CHAR(1),         /* FLGS USED BY REQUEST COMPLETION  */
*      3  ZCREXSW BIT(1),        /* EXIT SWITCH                      */
*      3  ZCRQUESW BIT(1),       /* QUEUE SWITCH                     */
*      3  ZCRDEQSW BIT(1),       /* DEQUEUE SWITCH                   */
*      3  ZCRWAIT BIT(1),        /* WAIT Q ANALYSIS COMPLETE         */
*      3  ZCRNRMEX BIT(1),       /* NORMAL EXIT TO BE TAKEN          */
*      3  ZCRENDLP BIT(1),       /* END OF LOOP SWITCH               */
*      3  ZCRUNSOL BIT(1),       /* UNSOLICITED DATA                 */
*      3  ZCRFEXIT BIT(1),       /* FORCE EXIT SWITCH                */
*   2  ZCRFLGS2 CHAR(1),         /* FLAGS USED WITHIN TPIOS          */
*      3  ZCRLOCAL BIT(1),       /* LOCAL SUPPORT                    */
*      3  ZCRSHEDI BIT(1),       /* IMMEDIATE SCHEDULE               */
*      3  ZCRFMSED BIT(1),       /* FMCB SEARCH ENDED                */
*      3  ZCROB    BIT(1),       /* OUTBOUND PROC IN PROGRESS        */
*      3  ZCRIF0E1 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*      3  ZCRIF0E2 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*      3  ZCRIF0E3 BIT(1),       /* SWITCH FOR STRUCTURED PGM USED BY
*                                   INBOUND PROCESSING               */
*   2  ZCRSWFLD CHAR(1),         /* SWITCHES FOR TPIOS OUTBOUND      */
*      3  ZCRENDSH BIT(1),       /* EXIT FROM REMOTE DEV SCHEDULER   */
*         4  ZCRSLCP BIT(1),     /* SCHEDULE LCPB                    */
*      3  ZCREXTYP BIT(1),       /* TPEXIT TYPE                      */
*      3  ZCRENDPR BIT(1),       /* EXIT FROM INNER PROCESS          */
*      3  ZCRNDLCP BIT(1),       /* EXIT FROM LCPB PROCESSING        */
*         4  ZCROB1 BIT(1),      /* REMOTE DEV SCHED 1ST TIME SWITCH */
*      3  ZCRENDX BIT(1),        /* EXIT FROM LCCW/BTU XLATION       */
*      3  ZCRENDXL BIT(1),       /* EXIT FROM LCCW PROC              */
*      3  ZCRENDAN BIT(1),       /* EXIT FROM LCPB ANALYSIS          */
*      3  ZCRRESET BIT(1),                                         0521
*         4  ZCRCNLXL BIT(1),    /* CANCEL FURTHER XLATE             */
*   2  ZCRFLGS3 CHAR(1),         /* FLAGS FOR OUTBOUND PROCESSING    */
*      3  ZCRTIC BIT(1),         /* SELECT NOT TO BE SENT            */
*      3  ZCRTPCON BIT(1),       /* TPIOS CONTACT SENT               */
*      3  ZCRTPDIS BIT(1),       /* TPIOS DISCONNECT TO BE SENT      */
*      3  ZCRDISC  BIT(1),       /* DISCONNECT IN PROCESS            */
*      3  ZCREDRIV BIT(1),       /* DO DERIVE                        */
*      3  ZCRNOFRE BIT(1),       /* NO FREEING OF SIO QUEUE          */
*      3  ZCRWRPTR BIT(1),       /* WRITE TO PRINTER REQUEST         */
*      3  ZCRINLCP BIT(1),       /* ERROR OCCURED DURING OUTBND PROC */
*   2  ZCRGENSW CHAR(1),         /* GENERAL SWITCHES                 */
*      3  ZCRTSW1  BIT(1),       /* TEMP SW FOR STRUCTURED PGM       */
*      3  ZCRTSW2  BIT(1),       /* TEMP SW FOR STRUCTURED PGM       */
*      3  ZCRRT06  BIT(1),       /* CRITICAL TEXT OPTION             */
*      3  ZCRLCSYN BIT(1),       /* LCCW SYNC SPECIFIED              */
*      3  ZCREXRES BIT(1),       /* EXCEPTION RESPONSE SPECIFIED     */
*      3  ZCRCLRBD BIT(1),       /* FLAG INDICATING BIND WAS CLEARED */
*      3  ZCRBRIS  BIT(1),       /* BRACKET REJECTED DUE TO IN BRAC. */
*      3  ZCRF1RES BIT(1),       /* FID1 RESPONSE TO BE GENERATED    */
*   2  ZCRPFLGS CHAR(1),         /* UTILITIES PROC OPTION FLAGS      */
*      3  ZCRQAHED BIT(1),      /* QXFR RTN TO USE INSERT OPT'N ON TPQ*
*      3  *        BIT(7),      /* RESERVED                          */
*   2  ZCRIBPR CHAR(1),          /* INBOUND PROCESSING FLAGS         */
*         3  ZCRNOBUF BIT(1),    /* FSB WITH NO BUFFER               */
*         3  ZCRERR   BIT(1),    /* ERROR INDICATOR                  */
*         3  ZCRRELK  BIT(1),    /* RESET ERROR LOCK FUNCTION REQ.   */
*         3  ZCRLCPFR BIT(1),    /* FLAG IND. DEALLOCATE ATOP LCPB   */
*         3  ZCRLCPFD BIT(1),    /* FLAG IND. LCPB FOUND ON WAITQ    */
*         3  ZCR3270  BIT(1),    /* 3270 DEVICE                      */
*         3  ZCR3270R BIT(1),    /* 3270 DEVICE IN RECORD MODE       */
*         3  *        BIT(1),    /* RESERVED                         */
*   2  ZCRSCPSW CHAR(1),         /* SESSION CONTROL FLAGS            */
*         3  ZCRTPEX BIT(1),     /* TP EXIT                          */
*         3  ZCRTPINV BIT(1),    /* INVOKE TPIOS                     */
*         3  ZCRRJLCP BIT(1),    /* LCPB REJECTED                    */
*         3  ZCRLREQ BIT(1),     /* REQUEST                          */
*         3  ZCRPRCMP BIT(1),    /* PROCESSING COMPLETE              */
*         3  ZCRFSBWE BIT(1),    /* FSB IS WORK ELEMENT              */
*         3  ZCRSKIPT BIT(1),    /* SKIP TRACE FLAG                  */
*         3  *       BIT(1),     /* RESERVED                         */
*   2  ZCRCRLCP PTR(31),         /* CURRENT LCPB PTR                 */
*   2  ZCRPARMS BDY(WORD),       /* PARAMETERS PASSED TO UTILITIES */
*      3  ZCRFBPTR PTR(31),      /* PTR TO FROM BUFFER               */
*         4  ZCRCBPTR PTR(31),   /* PTR TO CURRENT BUFFER            */
*      3  ZCRTBPTR PTR(31),      /* PTR TO TO-OR-TRANSLATE BUFFER    */
*      3  ZCRMLNG FIXED(15),     /* LENGTH TO MOVE                   */
*      3  ZCRDFRDA FIXED(15),    /* OFFSET FROM DATA ADDR IN FROM BUF*/
*         4  ZCRDTODA FIXED(15), /* OFFSET FROM DATA ADDR XLATE BUF  */
*      3  ZCRPCOD1 CHAR(1),      /* CODE BYTE FOR ALLOC/DISALLOC     */
*         4  ZCRPPG BIT(1),      /* GET PAGEABLE BUFF                */
*         4  ZCRPLNG BIT(1),     /* LENGTH OF BUFFER SPECIFIED       */
*         4  ZCRPFSB BIT(1),     /* GET FSB                          */
*         4  ZCRPLSBF BIT(1),    /* GET LSCB AND BUFFER              */
*            5 ZCRPLSBQ BIT(1),  /* PURGE LSCB QUEUE                 */
*         4  ZCRPLSCB BIT(1),    /* GET OR RELEASE LSCB              */
*         4  ZCRPBUF BIT(1),     /* GET OR RELEASE BUFFER            */
*         4  ZCRPCFTX BIT(1),    /* CONFIDENTIAL TEXT                */
*         4  ZCRPRES BIT(1),     /* RESERVED                         */
*      3  ZCRPCOD2 CHAR(1),      /* CODE BYTE FOR MOVE               */
*         4  ZCRPPG2 BIT(1),     /* GET PAGEABLE BUFFER              */
*         4  ZCRPFHDR BIT(1),    /* FROM BUFFER FDB TO BE USED       */
*         4  ZCRPMFGF BIT(1),    /* MOVE STARTS WIHT 1ST BUFF IN BLOCK*
*         4  ZCRPRES2 BIT(5),    /* RESERVED                         */
*      3  ZCRPCHAR CHAR(1),      /* TRANSLATE & TEST SEARCH CHARACTER*/
*      3  ZCRPSW   CHAR(1),      /* SWITCH FIELD                     */
*   2  ZCRCCWA PTR(31),          /* PTR TO CURRENT CCW (CCW 1 OR 2)  */
*   2  ZCRBFPTR PTR(31),         /* SAVE 1ST BUFF PTR IN TO-BUFF CHN
*                                   OR LAST BUFFER IN CHANNEL PGM    */
*   2  ZCRZLB PTR(31),           /* PTR TO CURR BUFF IN CHANNEL PGM  */
*   2  ZCRPVZB PTR(31),          /* PTR TO PREVIOUS BUFF IN CHAN PGM */
*   2  ZCRSVRTN BDY(WORD),       /* REG 14 SAVE AREAS                */
*      3  ZCRSVF1 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF2 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF3 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF4 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF5 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF6 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF7 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF8 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF9 PTR(31),       /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF10 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF11 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF12 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF13 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF14 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF15 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF16 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF17 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF18 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF19 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF20 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF21 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF22 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF23 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF24 PTR(31),      /* SAVE REQUIRED REGISTER           */
*      3  ZCRSVF25 PTR(31),      /* SAVE REQUIRED REGISTER           */
*   2  ZCRWKARA BDY(WORD),       /* TEMPORARY REG SAVE AREA          */
*      3  ZCRSVWK1 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK2 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK3 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK4 PTR(31),      /* SAVE REQUIRED REG                */
*      3  ZCRSVWK5 PTR(31),      /* SAVE REQUIRED REG                */
*   2  ZCRFSBSV PTR(31),         /* FSB CHAIN PTR SAVEAREA           */
*   2  ZCRFBPRC BIT(1),          /* FSB PROCESS SW                   */
*   2  ZCRMOREL BIT(1),          /* MORE ELEMENTS SW                 */
*   2  ZCRSCANQ BIT(1),          /* SCAN QUEUE SW                    */
*   2  ZCRNXTEL BIT(1),          /* NEXT ELEMENT SW                  */
*   2  ZCRXSCHD BIT(1),          /* EXIT SCHEDULE SW                 */
*   2  ZCRLSTFB BIT(1),          /* INBOUND PROC LAST FSB FOR ELEM SW*/
*   2  ZCRTOPQ  BIT(1),          /* QUEUE ELEMENT TO TOP SW          */
*   2  ZCRAWQSW BIT(1),          /* CHECK AWAITQ FOR MORE WORK =1    */
*                                /* CHECK WAITQ =0                   */
*   2  ZCRRCDSV CHAR(1),         /* RETURN CODE SAVEAREA             */
*   2  ZCRPRMTC CHAR(1),         /* PREEMPT COMPLETION PARAMETER BYTE*/
*   2  ZCROPCDE CHAR(1),         /* OP CODE TO BE TRANSFORMED         *
*   2  ZCRR2SV PTR(31),          /* ISTZBFDI REG 2 SAVE EREA         */
*   2  ZCRR13SV PTR(31),         /* ISTSBFDI REG 13 SAVE EREA        */
*   2  ZCRCIDSV BDY(WORD),       /* ISTZBFDI CID SAVE AREA           */
*      3  ZCRSAFSV CHAR(2),      /* ISTZBFDI SAF SAVE AREA           */
*      3  ZCRDAFSV CHAR(2),      /* ISTZBFDI DAF SAVE AREA           */
*   2  ZCRSAVEZ (6) BDY(WORD) CHAR(LENGTH(ISTZSAVE)),              0521
*                                /* SAVE/TRACE AREAS FOR TPIOS MODS  */
*   2  ZCRREMIC PTR(31),        /* POINTER TO REMOTE RN ICNCB        */
*   2  ZCRAUDIT CHAR(36),        /* TPIOS AUDIT TRAIL AREA           */
*      3  ZCRTID CHAR(1),        /* THREAD I.D.                      */
*      3  ZCRTNAME CHAR(4),      /* LAST 4 CHARS OF THREAD NAME      */
*      3  ZCRENTER BIT(248),     /* BIT ARRAY FOR MODULES ENTERED    */
*         4  ZCREAC1A BIT(1),    /* ISTZAC1A ENTERED                 */
*         4  ZCREAC0A BIT(1),    /* ISTZAC0A ENTERED                 */
*         4  ZCREAC0B BIT(1),    /* ISTZAC0B ENTERED                 */
*         4  ZCREAC1B BIT(1),    /* ISTZAC1B ENTERED                 */
*         4  ZCREBCAA BIT(1),    /* ISTZBCAA ENTERED                 */
*         4  ZCREBCAB BIT(1),    /* ISTZBCAB ENTERED                 */
*         4  ZCREBCAE BIT(1),    /* ISTZBCAE ENTERED                 */
*         4  ZCREBCAG BIT(1),    /* ISTZBCAG ENTERED                 */
*         4  ZCREBCAI BIT(1),    /* ISTZBCAI ENTERED                 */
*         4  ZCREBCAM BIT(1),    /* ISTZBCAM ENTERED                 */
*         4  ZCREBCBA BIT(1),    /* ISTZBCBA ENTERED                 */
*         4  ZCREBCBB BIT(1),    /* ISTZBCBB ENTERED                 */
*         4  ZCREBCBI BIT(1),    /* ISTZBCBI ENTERED                 */
*         4  ZCREBCCB BIT(1),    /* ISTZBCCB ENTERED                 */
*         4  ZCREBCDI BIT(1),    /* ISTZBCDI ENTERED                 */
*         4  ZCREBCEB BIT(1),    /* ISTZBCEB ENTERED                 */
*         4  ZCREBCFA BIT(1),    /* ISTZBCFA ENTERED                 */
*         4  ZCREBCFB BIT(1),    /* ISTZBCFB ENTERED                 */
*         4  ZCREBCGA BIT(1),    /* ISTZBCGA ENTERED                 */
*         4  ZCREBCGB BIT(1),    /* ISTZBCGB ENTERED                 */
*         4  ZCREBCHA BIT(1),    /* ISTZBCHA ENTERED                 */
*         4  ZCREBCHB BIT(1),    /* ISTZBCHB ENTERED                 */
*         4  ZCREBCIA BIT(1),    /* ISTZBCIA ENTERED                 */
*         4  ZCREBCIB BIT(1),    /* ISTZBCIB ENTERED                 */
*         4  ZCREBCID BIT(1),    /* ISTZBCID ENTERED                 */
*         4  ZCREBCJA BIT(1),    /* ISTZBCJA ENTERED                 */
*         4  ZCREBCJB BIT(1),    /* ISTZBCJB ENTERED                 */
*         4  ZCREBCKA BIT(1),    /* ISTZBCKA ENTERED                 */
*         4  ZCREBCKB BIT(1),    /* ISTZBCKB ENTERED                 */
*         4  ZCREBCLA BIT(1),    /* ISTZBCLA ENTERED                 */
*         4  ZCREBCLB BIT(1),    /* ISTZBCLB ENTERED                 */
*         4  ZCREBCMB BIT(1),    /* ISTZBCMB ENTERED                 */
*         4  ZCREBCND BIT(1),    /* ISTZBCND ENTERED                 */
*         4  ZCREBCNE BIT(1),    /* ISTZBCNE ENTERED                 */
*         4  ZCREBCOB BIT(1),    /* ISTZBCOB ENTERED                 */
*         4  ZCREBCPB BIT(1),    /* ISTZBCPB ENTERED                 */
*         4  ZCREBCQB BIT(1),    /* ISTZBCQB ENTERED                 */
*         4  ZCREBCRA BIT(1),    /* ISTZBCRA ENTERED                 */
*         4  ZCREBCRB BIT(1),    /* ISTZBCRB ENTERED                 */
*         4  ZCREBCSC BIT(1),    /* ISTZBCSC ENTERED                 */
*         4  ZCREBCXA BIT(1),    /* ISTZBCXA ENTERED                 */
*         4  ZCREBCX0 BIT(1),    /* ISTZBCX0 ENTERED                 */
*         4  ZCREBCY0 BIT(1),    /* ISTZBCY0 ENTERED                 */
*         4  ZCREBCZ0 BIT(1),    /* ISTZBCZ0 ENTERED                 */
*         4  ZCREBC0A BIT(1),    /* ISTZBC0A ENTERED                 */
*         4  ZCREBC0B BIT(1),    /* ISTZBC0B ENTERED                 */
*         4  ZCRECC0A BIT(1),    /* ISTZCC0A ENTERED                 */
*         4  ZCRECC0B BIT(1),    /* ISTZCC0B ENTERED                 */
*         4  ZCRECC1A BIT(1),    /* ISTZCC1A ENTERED                 */
*         4  ZCRECC1B BIT(1),    /* ISTZCC1B ENTERED                 */
*         4  ZCRECC2B BIT(1),    /* ISTZCC2B ENTERED                 */
*         4  ZCREDCA0 BIT(1),    /* ISTZDCA0 ENTERED                 */
*         4  ZCREDCB0 BIT(1),    /* ISTZDCB0 ENTERED                 */
*         4  ZCREDCC0 BIT(1),    /* ISTZDCC0 ENTERED                 */
*         4  ZCREDCD0 BIT(1),    /* ISTZDCD0 ENTERED                 */
*         4  ZCREDCE0 BIT(1),    /* ISTZDCE0 ENTERED                 */
*         4  ZCREDCF0 BIT(1),    /* ISTZDCF0 ENTERED                 */
*         4  ZCREDCH0 BIT(1),    /* ISTZDCH0 ENTERED                 */
*         4  ZCREDCI0 BIT(1),    /* ISTZDCI0 ENTERED                 */
*         4  ZCREDCJ0 BIT(1),    /* ISTZDCJ0 ENTERED                 */
*         4  ZCREDCKA BIT(1),    /* ISTZDCKA ENTERED                 */
*         4  ZCREDCKB BIT(1),    /* ISTZDCKB ENTERED                 */
*         4  ZCREDCL0 BIT(1),    /* ISTZDCL0 ENTERED                 */
*         4  ZCREDCMB BIT(1),    /* ISTZDCMB ENTERED                 */
*         4  ZCREECBA BIT(1),    /* ISTZECBA ENTERED                 */
*         4  ZCREECBB BIT(1),    /* ISTZECBB ENTERED                 */
*         4  ZCREECCA BIT(1),    /* ISTZECCA ENTERED                 */
*         4  ZCREECCB BIT(1),    /* ISTZECCB ENTERED                 */
*         4  ZCREECDA BIT(1),    /* ISTZECDA ENTERED                 */
*         4  ZCREECEA BIT(1),    /* ISTZECEA ENTERED                 */
*         4  ZCREECTA BIT(1),    /* ISTZECTA ENTERED                 */
*         4  ZCREFCEA BIT(1),    /* ISTZFCEA ENTERED                 */
*         4  ZCREFCEB BIT(1),    /* ISTZFCEB ENTERED                 */
*         4  ZCREGCAB BIT(1),    /* ISTZGCAB ENTERED                 */
*         4  ZCREGCBB BIT(1),    /* ISTZGCBB ENTERED                 */
*         4  *        BIT(1),    /* NOT USED                         */
*         4  ZCREGCDB BIT(1),    /* ISTZGCDB ENTERED                 */
*         4  ZCREGCEB BIT(1),    /* ISTZGCEB ENTERED                 */
*         4  ZCREGCLA BIT(1),    /* ISTZGCLA ENTERED                 */
*         4  ZCREGC0A BIT(1),    /* ISTZGC0A ENTERED                 */
*         4  ZCREGC0B BIT(1),    /* ISTZGC0B ENTERED                 */
*         4  ZCREHCAN BIT(1),    /* ISTZHCAN ENTERED                 */
*         4  ZCREICAA BIT(1),    /* ISTZICAA ENTERED                 */
*         4  ZCREICAB BIT(1),    /* ISTZICAB ENTERED                 */
*         4  ZCREICBB BIT(1),    /* ISTZICBB ENTERED                 */
*         4  ZCREICBI BIT(1),    /* ISTZICBI ENTERED                 */
*         4  ZCREICCB BIT(1),    /* ISTZICCB ENTERED                 */
*         4  ZCREICCI BIT(1),    /* ISTZICCI ENTERED                 */
*         4  ZCREICDB BIT(1),    /* ISTZICDB ENTERED                 */
*         4  ZCREICEB BIT(1),    /* ISTZICEB ENTERED                 */
*         4  ZCREICGB BIT(1),    /* ISTZICGB ENTERED                 */
*         4  ZCREICHB BIT(1),    /* ISTZICHB ENTERED                 */
*         4  ZCREICIB BIT(1),    /* ISTZICIB ENTERED                 */
*         4  ZCREICID BIT(1),    /* ISTZICID ENTERED                 */
*         4  ZCREICJB BIT(1),    /* ISTZICJB ENTERED                 */
*         4  ZCREICKB BIT(1),    /* ISTZICKB ENTERED                 */
*         4  ZCREICKE BIT(1),    /* ISTZICKE ENTERED                 */
*         4  ZCREICKG BIT(1),    /* ISTZICKG ENTERED                 */
*         4  ZCREICLB BIT(1),    /* ISTZICLB ENTERED                 */
*         4  ZCREICMB BIT(1),    /* ISTZICMB ENTERED                 */
*         4  ZCREICNA BIT(1),    /* ISTZICNA ENTERED                 */
*         4  ZCREICNB BIT(1),    /* ISTZICNB ENTERED                 */
*         4  ZCREICOA BIT(1),    /* ISTZICOA ENTERED                 */
*         4  ZCREICOB BIT(1),    /* ISTZICOB ENTERED                 */
*         4  ZCREICQA BIT(1),    /* ISTZICQA ENTERED                 */
*         4  ZCREICQB BIT(1),    /* ISTZICQB ENTERED                 */
*         4  ZCREICRB BIT(1),    /* ISTZICRB ENTERED                 */
*         4  ZCREICSB BIT(1),    /* ISTZICSB ENTERED                 */
*         4  ZCREICSC BIT(1),    /* ISTZICSC ENTERED                 */
*         4  ZCREICTB BIT(1),    /* ISTZICTB ENTERED                 */
*         4  ZCREICUB BIT(1),    /* ISTZICUB ENTERED                 */
*         4  ZCREICVB BIT(1),    /* ISTZICVB ENTERED                 */
*         4  ZCREICWB BIT(1),    /* ISTZICWB ENTERED                 */
*         4  ZCREICX0 BIT(1),    /* ISTZICX0 ENTERED                 */
*         4  ZCREIC0B BIT(1),    /* ISTZIC0B ENTERED                 */
*         4  ZCREIC1B BIT(1),    /* ISTZIC1B ENTERED                 */
*         4  ZCREJCAB BIT(1),    /* ISTZJCAB ENTERED                 */
*         4  ZCREJCBB BIT(1),    /* ISTZJCBB ENTERED                 */
*         4  ZCREJCCB BIT(1),    /* ISTZJCCB ENTERED                 */
*         4  ZCREJCDB BIT(1),    /* ISTZJCDB ENTERED                 */
*         4  ZCREJC0B BIT(1),    /* ISTZJC0B ENTERED                 */
*         4  ZCREKCBB BIT(1),    /* ISTZKCBB ENTERED                 */
*         4  ZCREKCBN BIT(1),    /* ISTZKCBN ENTERED                 */
*         4  ZCREKCCN BIT(1),    /* ISTZKCCN ENTERED                 */
*         4  ZCREDCWR BIT(1),    /* ISTZDCWR ENTERED                 */
*         4  ZCREDCWB BIT(1),    /* ISTZDCWB ENTERED                 */
*         4  ZCREDCXR BIT(1),    /* ISTZDCXR ENTERED                 */
*         4  ZCREBCBR BIT(1),    /* ISTZBCBR ENTERED                 */
*         4  ZCREBCDR BIT(1),    /* ISTZBCDR ENTERED                 */
*         4  ZCREBCAR BIT(1),    /* ISTZBCAR ENTERED                 */
*         4  ZCRECCBI BIT(1),    /* ISTZCCBI ENTERED                 */
*         4  ZCRECCAI BIT(1),    /* ISTZCCAI ENTERED                 */
*         4  ZCRECCCI BIT(1),    /* ISTZCCCI ENTERED                 */
*         4  ZCREAC1R BIT(1),    /* ISTZAC1R ENTERED                 */
*         4  ZCREBCSB BIT(1),    /* ISTZBCSB ENTERED                 */
*         4  ZCREDCPR BIT(1),    /* ISTZDCPR ENTERED                 */
*         4  ZCREDCQR BIT(1),    /* ISTZDCQR ENTERED                 */
*         4  ZCREBCAL BIT(1),    /* ISTZBCAL ENTERED                 */
*         4  ZCREBC0L BIT(1),    /* ISTZBC0L ENTERED                 */
*         4  ZCREBCNB BIT(1),    /* ISTZBCNB ENTERED                 */
*         4  ZCREICOE BIT(1),    /* ISTZICOE ENTERED                 */
*         4  ZCREDCNB BIT(1),    /* ISTZDCNB ENTERED                 */
*         4  ZCREKCCB BIT(1),    /* ISTZKCCB ENTERED                 */
*         4  ZCRECFY0 BIT(1),    /* ISTZCFY0 ENTERED                 */
*         4  ZCREDCK0 BIT(1),    /* ISTZDFK0 ENTERED                 */
*         4  ZCREICSG BIT(1),    /* ISTZICSG ENTERED                 */
*         4  ZCREBCIF BIT(1),    /* ISTZBCIF ENTERED                 */
*         4  ZCREDCMF BIT(1),    /* ISTZDCMF ENTERED                 */
*         4  ZCRELCAB BIT(1),    /* ISTZLCAB ENTERED                 */
*         4  ZCREAC2B BIT(1),    /* ISTZAC2B ENTERED                 */
*         4  ZCREIC2B BIT(1),    /* ISTZIC2B ENTERED                 */
*         4  ZCRRSV97 BIT(97),   /* RESERVED                         */
*   2  ZCRCMNRC CHAR(1),                /* PURGE MWOR RETURN CODE    */
*   2  ZCRWORDA CHAR(3),                /* RESERVED FOR LATER USE    */
*   2  ZCRLCPB  CHAR(LENGTH(ISTLCPB)),  /* 3270 S/R LCPB             */
*      3 ZCRRHRU,                       /* SAVEAREA FOR RH AND RU    */
*        4 ZCRRH    CHAR(3),            /* RH                        */
*        4 ZCRRU    CHAR(*);            /* RU                        */
*DCL ZCTYPE BIT(8) CONSTANT('00'X);   /* ZCR TYPE                   */
*DCL ZCLNG FIXED(15) CONSTANT(172);   /* ZCRR LENGTH                */
*DCL ZCRSAVNO BIT(8) CONSTANT('06'X); /* NUMBER OF SAVEAREAS IN ZCRR */
*DCL ZCRLSVNO BIT(8) CONSTANT('04'X); /* NUMBER OF SAVE AREAS IN   0525
*                                         LOCAL SUPPORT              */
*/* *** EQUATES FOR ZCRRCDSV *** */                                0526
*                                                                  0526
*DCL ZCRMRFSB BIT(8) CONSTANT('0C'X);  /* REQUEST COMPLETION MOVE FSB
*                                         TO PROCESS                 */
*DCL ZCRSRCHQ BIT(8) CONSTANT('10'X);  /* REQUEST COMPLETION SEARCH
*                                         REQUEST QUEUE              */
*DCL ZCREXIT  BIT(8) CONSTANT('14'X);  /* REQUEST COMPLETION EXIT    */
*DCL ZCRSFSB  BIT(8) CONSTANT('18'X);  /* REQUEST COMPLETION SINGLE
*                                         FSB                        */
*DCL ZCRDLFSB BIT(8) CONSTANT('1C'X);  /* REQUEST COMPLETION DUAL FSB *
*DCL ZCRNOSCH BIT (8) CONSTANT('20'X); /* REQUEST COMPLETION, EXIT WITH
*                                         SCHED NONE                 */
*DCL ZCRNRSCH BIT (8) CONSTANT('24'X); /* REQUEST COMPLETION, EXIT WITH
*                                         SCHED NORM                 */
*DCL ZCRLGERR FIXED(8) CONSTANT(8);    /* LOGICAL ERROR              */
*DCL ZCPLSCB BIT(8) CONSTANT('08'X);   /* GET A RELEASE LSCB         */
*DCL ZCPBUF  BIT(8) CONSTANT('04'X);   /* GET A RELEASE BUFFER       */
*DCL ZCRTAC0A FIXED(8) CONSTANT(01);   /* LOCAL DEVICE SCHEDULER(OUT)*/
*DCL ZCRTAC0B FIXED(8) CONSTANT(02);   /* REMOTE DEVICE SCHEDLER(OUT)*/
*DCL ZCRTCC1A FIXED(8) CONSTANT(03);   /* LOCAL DIALOG SCHEDLER(IN)  */
*DCL ZCRTCC1B FIXED(8) CONSTANT(04);   /* REMOTE DIALOG SCHEDLER(IN) */
*DCL ZCRTDCE0 FIXED(8) CONSTANT(05);   /* NCP SLOWDOWN RECOVERY      */
*DCL ZCRTDCKA FIXED(8) CONSTANT(06);   /* LOCAL GENERAL FUNCTIONS    */
*DCL ZCRTDCKB FIXED(8) CONSTANT(07);   /* REMOTE GENERAL FUNCTIONS   */
*DCL ZCRTFCEB FIXED(8) CONSTANT(08);   /* REMOTE READ BUFFER ALLOC.  */
*DCL ZCRTGCLA FIXED(8) CONSTANT(09);   /* LCAL CTL & TEST FEEDBACK(IN)*
*DCL ZCRTGC0A FIXED(8) CONSTANT(10);   /* LOCAL REQ. COMPLETION(IN)  */
*DCL ZCRTGC0B FIXED(8) CONSTANT(11);   /* REMOTE REQ. COMPLETION(IN) */
*DCL ZCRTICWB FIXED(8) CONSTANT(12);   /* RESET CLEANUP (PHASE 5)    */
*DCL ZCRTIC0B FIXED(8) CONSTANT(13);   /* REMOTE REQ COMPLTION CTL(IN)*
*DCL ZCRTAC1B FIXED(8) CONSTANT(14);   /* ISTZAC1B THREAD ID         */
*DCL ZCRTIC1B FIXED(8) CONSTANT(15);   /* ISTZIC1B THREAD ID         */
*DCL ZCRTCCBI FIXED(8) CONSTANT(16);   /* ISTZCCBI THREAD ID         */
*DCL ZCRTAC1R FIXED(8) CONSTANT(17);   /* ISTZAC1R THREAD ID         */
*DCL ZCRTAC1A FIXED(8) CONSTANT(18);   /* ISTZAC1A THREAD ID         */
*DCL ZCRTLCAB FIXED(8) CONSTANT(19);   /* ISTZLCAB THREAD ID         */
*/* COMPONENT RECOVERY                                               */
*/*                                                                  */
*DCL 1 ISTASCRR BDY(WORD) BASED,        /* CRR FOR SMS               */
*     2  ASCPFCRR CHAR(LENGTH(ISTPFCRR)),                          0555
*     2  ASCFLAGS CHAR(7),              /* FLAGS                     */
*        3  ASCFLG1 CHAR(2),            /* MODULE TRACE FLAGS        */
*           4  ASCFBA BIT(1),           /* ALLOCATION IN PATH        */
*           4  ASCFBD BIT(1),           /* DE-ALLOCATION IN PATH     */
*           4  ASCFSR BIT(1),           /* FSR IN PATH               */
*           4  ASCPASTR BIT(13),        /* RESERVED PATH FLAGS       */
*        3  ASCFLG2 CHAR(2),            /* MODULE IN CONTROL FLAGS   */
*           4  ASCFBAIC BIT(1),         /* ALLOCATION IN CONTROL     */
*           4  ASCFBDIC BIT(1),         /* DE-ALLOCATION IN CONTROL  */
*           4  ASCFSRIC BIT(1),         /* FSR IN CONTROL            */
*           4  ASCICR BIT(13),          /* RESERVED IN CONTROL FLAGS */
*        3  ASCFLG3 CHAR(3),            /* AUDIT FLAGS               */
*           4  ASCFSRGT BIT(1),         /* FSR DOING GET PROCESSING  */
*           4  ASCFBDAL BIT(1),         /* FBD DOING ALLOCATION      */
*           4  ASCKEYF BIT(1),          /* KEY HAS BEEN ALTERED      */
*           4  ASCLLKF BIT(1),          /* LOCAL LOCK HELD           */
*           4  ASCFBDUD BIT(1),         /* FBD USING USER DATA       */
*           4  ASCAUDIT BIT(19),        /* RESERVED AUDIT BITS       */
*     2  ASCKEY CHAR(1),                /* ORIGINAL KEY              */
*     2  ASCETRYA PTR(31),              /* RETRY ADRS FOR CONTINUE 0555
*                                          OPTION                    */
*     2  ASCUSRGS CHAR(16),             /* SAVE AREA FOR USER REGS 0555
*                                          14 - 1                    */
*        3  ASCUSR14 CHAR(4),           /* REGISTER 14               */
*        3  ASCUSR15 CHAR(4),           /* REGISTER 15               */
*        3  ASCUSR00 CHAR(4),           /* REGISTER 0                */
*        3  ASCUSR01 CHAR(4),           /* REGISTER 1                */
*     2  ASCPSREG CHAR(16);             /* SAVE AREA FOR PSS       0555
*                                          REGS 1 - 4                */
*/*  INITIAL LEVEL                                      001 04/09/75 */
*DCL 1 ISTAPCRR BDY(WORD) BASED,                                   0556
*     2 APCHDRSV CHAR(LENGTH(ISTPFCRR)),  /* HEADER                  */
*     2  APCATFLG CHAR(2),              /* AUDIT TRACE FLAGS         */
*        3  APC51E BIT(1),              /* ISTAPC51 WAS ENTERED      */
*        3  APC52E BIT(1),              /* ISTAPC52  '     '         */
*        3  APC53E BIT(1),              /* ISTAPC53                  */
*        3  APC54E BIT(1),                                         0556
*        3  APC56E BIT(1),                                         0556
*        3  APC57E BIT(1),                                         0556
*        3  APC58E BIT(1),                                         0556
*        3  APC31E BIT(1),                                         0556
*        3 * BIT(8),                    /* RESERVED                  */
*     2  APCRFLG CHAR(2),               /* AUDIT TRACE FLAGS         */
*        3  APC51R BIT(1),              /* ISTAPCR1 IS RUNNING       */
*        3  APC52R BIT(1),              /* ISTAPC52 IS RUNNING       */
*        3  APC53R BIT(1),                                         0556
*        3  APC54R BIT(1),                                         0556
*        3  APC56R BIT(1),                                         0556
*        3  APC57R BIT(1),                                         0556
*        3  APC58R BIT(1),                                         0556
*        3  APC31R BIT(1),                                         0556
*        3  *      BIT(8),              /* RESERVED                  */
*     2  APCPSTA PTR(31),               /* PST@                      */
*     2  APCTCBA PTR(31),               /* TCB@                      */
*     2  APCRTRN PTR(31),               /*@ TO BR14 TO RTN TO SYSTEM */
*     2  APCPABSV PTR(31),              /*SAVED PAB@ TO REDISPATCH   */
*     2  APCQWFO PTR(31),               /* Q@ IN PST WORK AREA ON    */
*     2  APCFRRPM PTR(31),              /* WORKAREA@ RTN'D FROM SETFR*/
*     2  APCSAVE CHAR(72),                                         0556
*        3  APCESTAL CHAR(72),          /* ESTAE PARAMETER LIST AREA */
*     2  APCCOMF CHAR(4) BDY(HWORD),    /* FLAGS USED BY ALL PSS RTN */
*        3  APCCOMF1 CHAR(2),                                      0556
*           4  APCSSTSK BIT(1),         /* IRB TYPE WORK             */
*           4  APCUETSK BIT(1),         /* USER EXIT RUNNING UNDER IRB*
*           4  APCSMCR BIT(1),          /* SMA CRA BEING USED        */
*           4  APCIRB1 BIT(1),          /* IRB1 BEING USED           */
*           4  APCIRB2 BIT(1),          /* IRB2 BEING USED           */
*           4  APCRELR BIT(1),          /*CALL ISTAPC58 TO RLEASE CRA*/
*           4  APCEXIT BIT(1),          /* TELLS ISTAPC58 TO EXIT SYS*/
*           4  APCZLBER BIT(1),         /* ERR WHILE RUNNING ZLFAB PAB*
*           4  * BIT(8),                /* RESERVED                  */
*        3  APCRETCD FIXED(15),         /* RTN CODE FOR R15 FOR SYS  */
*     2  APCSAV1 PTR(31),               /* 1ST SAVE WORD             */
*     2  APCSAV2 PTR(31),               /* 2ND SAVE WORD             */
*     2  APCSWTWD CHAR(4),              /* SWITCH AREA FOR PSS RTN   */
*     2  APC31FLG CHAR(1),              /* ISTAPC31 FLAGS            */
*        3  APCTPXIT BIT(1),            /* TPEXIT IN PROGRESS        */
*        3  APCRESCH BIT(1),            /*PAB TPEXIT OCCURED  RESCHED*/
*        3  APCSORT BIT(1),       /* PAB SORTED TO PROPER PST/MPST   */
*        3  *       BIT(5),       /* RESERVED                        */
*     2  APC52FLG CHAR(1),        /* ISTAPC52 FLAGS                  */
*        3  APCCKRQ BIT(1),       /* CHECK RDY Q FOR WORK            */
*        3  APCSMSR BIT(1),       /* RETURNING SMS RPH               */
*        3  APCQENQ BIT(1),       /* ENQUEUEING PAB'S ON PST Q'S     */
*        3  APCRDQ BIT(1),        /* DEQUEING PAB'S FROM PST RDY Q   */
*        3  APCNWF BIT(1),        /* NO WORK FOUND                   */
*        3  APCWKF   BIT(1),      /* WORK FOUND                      */
*        3    *      BIT(2),      /* RESERVED                        */
*     2  APC53FLG CHAR(1),        /* ISTAPC53 FLAGS                  */
*        3  APCPR153 BIT(1),      /* USED PREALLOCATED CRA           */
*     2  APC54FLG CHAR(1),        /* ISTAPC54 FLAGS                  */
*        3  APCRLST BIT(1),       /* SMS BEING CALLED TO RELEASE UECB*/
*        3  * BIT(7),             /* RESERVED                        */
*     2  APC57FLG CHAR(1),        /* ISTAPC57 FLAGS                  */
*        3  APCRECRA BIT(1),      /* RELEASE CRA BEING DONE          */
*        3  APCNREL BIT(1),       /* DID NOT RELEASE CRA             */
*        3  *   BIT(6),           /* RESERVED                        */
*     2  * CHAR(15);              /* RESERVED                        */
*/*               COMPONENT RECOVERY AREA                            */
*/*  REVISIONS                                         005 04/09/75  */
*DCL 1  ISTCRA BASED BDY(DWORD),        /* COMPONENT RECOVERY AREA   */
*     2  CRABASIC BDY(WORD),            /* CRA WITHOUT PROCESS CRR   */
*      3 CRAHDR CHAR(8) BDY(WORD),      /* CRA HEADER                */
*        4  CRACRR PTR(31),             /* PTR TO ACTIVE CRR         */
*        4  CRAFRR PTR(31),             /* PTR TO ACTIVE FRR         */
*      3 CRALKACT BIT(32),              /* LOCK LEVEL AND          0557
*                                          OWNERSHIP FLAGS           */
*        4  CRALEV32 BIT(1),            /* 1 = LEVEL 32 LOCK HELD    */
*        4  CRALEV31 BIT(1),            /* 1 = LEVEL 31 LOCK HELD    */
*        4  CRALEV30 BIT(1),            /* 1 = LEVEL 30 LOCK HELD    */
*        4  CRALEV29 BIT(1),            /* 1 = LEVEL 29 LOCK HELD    */
*        4  CRALEV28 BIT(1),            /* 1 = LEVEL 28 LOCK HELD    */
*        4  CRALEV27 BIT(1),            /* 1 = LEVEL 27 LOCK HELD    */
*        4  CRALEV26 BIT(1),            /* 1 = LEVEL 26 LOCK HELD    */
*        4  CRALEV25 BIT(1),            /* 1 = LEVEL 25 LOCK HELD    */
*        4  CRALEV24 BIT(1),            /* 1 = LEVEL 24 LOCK HELD    */
*        4  CRALEV23 BIT(1),            /* 1 = LEVEL 23 LOCK HELD    */
*        4  CRALEV22 BIT(1),            /* 1 = LEVEL 22 LOCK HELD    */
*        4  CRALEV21 BIT(1),            /* 1 = LEVEL 21 LOCK HELD    */
*        4  CRALEV20 BIT(1),            /* 1 = LEVEL 20 LOCK HELD    */
*        4  CRALEV19 BIT(1),            /* 1 = LEVEL 19 LOCK HELD    */
*        4  CRALEV18 BIT(1),            /* 1 = LEVEL 18 LOCK HELD    */
*        4  CRALEV17 BIT(1),            /* 1 = LEVEL 17 LOCK HELD    */
*        4  CRALEV16 BIT(1),            /* 1 = LEVEL 16 LOCK HELD    */
*        4  CRALEV15 BIT(1),            /* 1 = LEVEL 15 LOCK HELD    */
*        4  CRALEV14 BIT(1),            /* 1 = LEVEL 14 LOCK HELD    */
*        4  CRALEV13 BIT(1),            /* 1 = LEVEL 13 LOCK HELD    */
*        4  CRALEV12 BIT(1),            /* 1 = LEVEL 12 LOCK HELD    */
*        4  CRALEV11 BIT(1),            /* 1 = LEVEL 11 LOCK HELD    */
*        4  CRALEV10 BIT(1),            /* 1 = LEVEL 10 LOCK HELD    */
*        4  CRALEV09 BIT(1),            /* 1 = LEVEL 9 LOCK HELD     */
*        4  CRALEV08 BIT(1),            /* 1 = LEVEL 8 LOCK HELD     */
*        4  CRALEV07 BIT(1),            /* 1 = LEVEL 7 LOCK HELD     */
*        4  CRALEV06 BIT(1),            /* 1 = LEVEL 6 LOCK HELD     */
*        4  CRALEV05 BIT(1),            /* 1 = LEVEL 5 LOCK HELD     */
*        4  CRALEV04 BIT(1),            /* 1 = LEVEL 4 LOCK HELD     */
*        4  CRALEV03 BIT(1),            /* 1 = LEVEL 3 LOCK HELD     */
*        4  CRALEV02 BIT(1),            /* 1 = LEVEL 2 LOCK HELD     */
*        4  CRALEV01 BIT(1),            /* 1 = LEVEL 1 LOCK HELD     */
*      3 CRAL1PTR PTR(31),              /* PTR TO LEVEL 1 LOCK       */
*      3 CRAL2PTR PTR(31),              /* PTR TO LEVEL 2 LOCK       */
*      3 CRAL3PTR PTR(31),              /* PTR TO LEVEL 3 LOCK       */
*      3 CRAL4PTR PTR(31),              /* PTR TO LEVEL 4 LOCK       */
*      3 CRAL5PTR PTR(31),              /* PTR TO LEVEL 5 LOCK       */
*      3 CRAL6PTR PTR(31),              /* PTR TO LEVEL 6 LOCK       */
*      3 CRAL7PTR PTR(31),              /* PTR TO LEVEL 7 LOCK       */
*      3 CRAL8PTR PTR(31),              /* PTR TO LEVEL 8 LOCK       */
*      3 CRAL9PTR PTR(31),              /* PTR TO LEVEL 9 LOCK       */
*      3 CRALAPTR PTR(31),              /* RESERVED                  */
*/*                                                                  */
*/*   VS1/VS2 EXTENSION                                              */
*/*                                                                  */
*     2  CRARPH CHAR(LENGTH(ISTRPH)),   /* RPH ASSOCIATED WITH     0557
*                                          THIS CRH                  */
*     2  CRAPSS CHAR(LENGTH(ISTAPCRR)), /* PSS CRR                   */
*     2  CRAPROCR CHAR(LENGTH(ISTZCRR)) BDY(DWORD), /* PROCESS CRR   */
*     2  CRASVC CHAR(72) BDY(WORD),     /* SERVICE RTN CRA           */
*        3  CRAASCRR CHAR(LENGTH(ISTASCRR)), /* CRR FOR SMS          */
*        3  CRAHSIZ  PTR(31),           /* HEADER SIZE QUED SMS REQ  */
*        3  CRAMASK  PTR(31),           /* PREFIX MASK QUED SMS REQ  */
*        3  CRABUFA  FIXED(31),         /* BUFF QUE FOR FBQ ALLOCATION*
*           4 CRABFTBA BIT(1),          /* NO BUFFERS ALLOCATED YET   *
*     2  CRARSV01 PTR(31),              /* RESERVED                  */
*     2  CRARSV02 PTR(31),              /* RESERVED                  */
*     2  CRACHAIN PTR(31);              /* CHAIN FIELD USED TO QUEUE
*                                          CRA TO PREALLOCATE QUEUE
*                                          WHEN NOT IN USE           */
*DCL CRALMS32 BIT(32) CONSTANT('80000000'X); /* 32ND LEVEL LOCK MASK */
*DCL CRALMS31 BIT(32) CONSTANT('40000000'X); /* 31ST LEVEL LOCK MASK */
*DCL CRALMS30 BIT(32) CONSTANT('20000000'X); /* 30TH LEVEL LOCK MASK */
*DCL CRALMS29 BIT(32) CONSTANT('10000000'X); /* 29TH LEVEL LOCK MASK */
*DCL CRALMS28 BIT(32) CONSTANT('08000000'X); /* 28TH LEVEL LOCK MASK */
*DCL CRALMS27 BIT(32) CONSTANT('04000000'X); /* 27TH LEVEL LOCK MASK */
*DCL CRALMS26 BIT(32) CONSTANT('02000000'X); /* 26TH LEVEL LOCK MASK */
*DCL CRALMS25 BIT(32) CONSTANT('01000000'X); /* 25TH LEVEL LOCK MASK */
*DCL CRALMS24 BIT(32) CONSTANT('00800000'X); /* 24TH LEVEL LOCK MASK */
*DCL CRALMS23 BIT(32) CONSTANT('00400000'X); /* 23RD LEVEL LOCK MASK */
*DCL CRALMS22 BIT(32) CONSTANT('00200000'X); /* 22ND LEVEL LOCK MASK */
*DCL CRALMS21 BIT(32) CONSTANT('00100000'X); /* 21ST LEVEL LOCK MASK */
*DCL CRALMS20 BIT(32) CONSTANT('00080000'X); /* 20TH LEVEL LOCK MASK */
*DCL CRALMS19 BIT(32) CONSTANT('00040000'X); /* 19TH LEVEL LOCK MASK */
*DCL CRALMS18 BIT(32) CONSTANT('00020000'X); /* 18TH LEVEL LOCK MASK */
*DCL CRALMS17 BIT(32) CONSTANT('00010000'X); /* 17TH LEVEL LOCK MASK */
*DCL CRALMS16 BIT(32) CONSTANT('00008000'X); /* 16TH LEVEL LOCK MASK */
*DCL CRALMS15 BIT(32) CONSTANT('00004000'X); /* 15TH LEVEL LOCK MASK */
*DCL CRALMS14 BIT(32) CONSTANT('00002000'X); /* 14TH LEVEL LOCK MASK */
*DCL CRALMS13 BIT(32) CONSTANT('00001000'X); /* 13TH LEVEL LOCK MASK */
*DCL CRALMS12 BIT(32) CONSTANT('00000800'X); /* 12TH LEVEL LOCK MASK */
*DCL CRALMS11 BIT(32) CONSTANT('00000400'X); /* 11TH LEVEL LOCK MASK */
*DCL CRALMS10 BIT(32) CONSTANT('00000200'X); /* 10TH LEVEL LOCK MASK */
*DCL CRALMS09 BIT(32) CONSTANT('00000100'X); /* 9TH LEVEL LOCK MASK  */
*DCL CRALMS08 BIT(32) CONSTANT('00000080'X); /* 8TH LEVEL LOCK MASK  */
*DCL CRALMS07 BIT(32) CONSTANT('00000040'X); /* 7TH LEVEL LOCK MASK  */
*DCL CRALMS06 BIT(32) CONSTANT('00000020'X); /* 6TH LEVEL LOCK MASK  */
*DCL CRALMS05 BIT(32) CONSTANT('00000010'X); /* 5TH LEVEL LOCK MASK  */
*DCL CRALMS04 BIT(32) CONSTANT('00000008'X); /* 4TH LEVEL LOCK MASK  */
*DCL CRALMS03 BIT(32) CONSTANT('00000004'X); /* 3RD LEVEL LOCK MASK  */
*DCL CRALMS02 BIT(32) CONSTANT('00000002'X); /* 2ND LEVEL LOCK MASK  */
*DCL CRALMS01 BIT(32) CONSTANT('00000001'X); /* 1ST LEVEL LOCK MASK  */
*DCL CRACRA   CHAR(4) CONSTANT('CRA ');      /* CHARACTER C.B. ID    */
* /*   CRR FOR NETWORK STATUS SERVICES                               */
*/*  INITIAL LEVEL                                     001 10/18/74  */
* /*                                                                 */
* DCL 1 ISTNSCRR BDY(WORD) BASED,/* CRR FOR NETWORK                0591
*                                          STATUS SERVICES           */
*     2  NSCPRFX  CHAR(LENGTH(ISTPFCRR)), /* AUDIT TRAIL FOR       0591
*                                          NETWORK STATUS SERVICES   */
*     2  NSCAUDIT,                        /* MODULE INDICATORS       */
*        3  NSCNTRD CHAR(2),            /* LIST OF MODULES ENTERED FOR
*                                          NSS                       */
*           4  NSTC00 BIT(1),           /* INDICATES MODULE ISTSTC00
*                                          ENTERED                   */
*           4  NSQC00 BIT(1),           /* INDICATES MODULE ISTSQC00
*                                          ENTERED                   */
*           4  NSQC01 BIT(1),           /* INDICATES MODULE ISTSQC01
*                                          ENTERED                   */
*           4  NSQC02 BIT(1),           /* INDICATES MODULE ISTSQC02
*                                          ENTERED                   */
*           4  NSQC03 BIT(1),           /* INDICATES MODULE ISTSQC03
*                                          ENTERED                   */
*           4  NSQC04 BIT(1),           /* INDICATES MODULE ISTSQC04
*                                          ENTERED                   */
*           4  NSQC05 BIT(1),           /* INDICATES MODULE ISTSQC05
*                                          ENTERED                   */
*           4  NSQC06 BIT(1),           /* INDICATES MODULE ISTSQC06
*                                          ENTERED                   */
*           4  NSQC07 BIT(1),           /* INDICATES MODULE ISTSQC07
*                                          ENTERED                   */
*           4  NSQC09 BIT(1),           /* INDICATES MODULE ISTSQC09
*                                          ENTERED                   */
*           4  NSQC08 BIT(1),           /* INDICATES MODULE ISTSQC08
*                                          ENTERED                   */
*           4  NSQC0A BIT(1),           /* INDICATES MODULE ISTSQC0A
*                                          ENTERED                   */
*           4  NSQC0B BIT(1),           /* INDICATES MODULE ISTSQC0B
*                                          ENTERED                   */
*           4  NNSRSVRD BIT(3),         /* RESERVED                  */
*        3  NSCCRT CHAR(2),             /* LIST OF MODULES CURRENTLY
*                                          RUNNING                   */
*           4  CSTC00 BIT(1),           /* INDICATES MODULE ISTSTC00
*                                          RUNNING                   */
*           4  CSQC00 BIT(1),           /* INDICATES MODULE ISTSQC00
*                                          RUNNING                   */
*           4  CSQC01 BIT(1),           /* INDICATES MODULE ISTSQC01
*                                          RUNNING                   */
*           4  CSQC02 BIT(1),           /* INDICATES MODULE ISTSQC02
*                                          RUNNING                   */
*           4  CSQC03 BIT(1),           /* INDICATES MODULE ISTSQC03
*                                          RUNNING                   */
*           4  CSQC04 BIT(1),           /* INDICATES MODULE ISTSQC04
*                                          RUNNING                   */
*           4  CSQC05 BIT(1),           /* INDICATES MODULE ISTSQC05
*                                          RUNNING                   */
*           4  CSQC06 BIT(1),           /* INDICATES MODULE ISTSQC06
*                                          RUNNING                   */
*           4  CSQC07 BIT(1),           /* INDICATES MODULE ISTSQC07
*                                          RUNNING                   */
*           4  CSQC09 BIT(1),           /* INDICATES MODULE ISTSQC09
*                                          RUNNING                   */
*           4  CSQC08 BIT(1),           /* INDICATES MODULE ISTSQC08
*                                          RUNNING                   */
*           4  CSQC0A BIT(1),           /* INDICATES MODULE ISTSQC0A
*                                          RUNNING                   */
*           4  CSQC0B BIT(1),           /* INDICATES MODULE ISTSQC0B
*                                          RUNNING                   */
*           4  CNSRSVRD BIT(3);         /* RESERVED                  */
*DCL TIDSTC00 BIT(8) CONSTANT('00'X);   /* THREAD ID FOR           0592
*                                          ISTSTC00                  */
*DCL TIDSQC00 BIT(8) CONSTANT('01'X);   /* THREAD ID FOR           0593
*                                          ISTSQC00                  */
*/* END OF ATBUILD */                                              0594
*    /*** SET ENTERED BIT FOR THIS PROCEDURE ***/                  0594
*CMZK0010->RPHCRR->CRACRR->NSQC06 = '1'B;                          0594
         L     @08,RPHCRR(,CMZK0010)                               0594
         L     @08,CRACRR(,@08)                                    0594
         OI    NSQC06(@08),B'00000001'                             0594
*    /*** CLEAR AND SET CURRENT PROCEDURE BIT ***/                 0595
*CMZK0010->RPHCRR->CRACRR->NSCCRT = '0'B;                          0595
         MVI   NSCCRT+1(@08),X'00'                                 0595
         MVI   NSCCRT(@08),B'00000000'                             0595
*CMZK0010->RPHCRR->CRACRR->CSQC06 = '1'B;                          0596
         OI    CSQC06(@08),B'00000001'                             0596
*    END;                                                          0597
*                                                                  0597
*   /*****************************************************************/
*   /*                                                               */
*   /* ESTABLISH REMAINING LINKAGE REQUIREMENTS                      */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0598
*   SAREG=C06R13+SAVELEN;           /* EST. ADDR OF MY SAVEAREA      */
         LA    SAREG,72                                            0598
         ALR   SAREG,C06R13                                        0598
*   SAVBACK=C06R13;                 /* EST. BACK POINTER OF MINE     */
         ST    C06R13,SAVBACK(,SAREG)                              0599
*   C06R13->SAVFORW=SAREG;          /* EST. FOWARD POINTER OF THEIRS */
         ST    SAREG,SAVFORW(,C06R13)                              0600
*   C06R13=SAREG;                   /* HAVE R13 POINT TO MINE        */
*                                                                  0601
         LR    C06R13,SAREG                                        0601
*   /*****************************************************************/
*   /*          ACB FOR OPERATOR CONTROL                             */
*   /*****************************************************************/
*                                                                  0602
*   RFY                                                            0602
*    (ACBPTR,                                                      0602
*     C06CALC,                                                     0602
*     RC,                                                          0602
*     C06R15)RSTD;                                                 0602
*   RFY                                                            0603
*     SAREG UNRSTD;                                                0603
*   ACBPTR=RPLDACB;                 /* EST. REQUEST ACB ADDRESS      */
         L     @14,RPHWEA(,PTRRPH)                                 0604
         L     @06,OCWRPL(,@14)                                    0604
         L     ACBPTR,RPLDACB(,@06)                                0604
*   IF ACBPTR=                      /* GET OPERATOR ACB ADDRESS      */
*       OCWACVT->ATCCONFT->CONACB   /* AND SEE IF THEY ARE EQUAL     */
*     THEN                                                         0605
         L     @14,OCWACVT(,@14)                                   0605
         L     @14,ATCCONFT(,@14)                                  0605
         C     ACBPTR,CONACB(,@14)                                 0605
         BNE   @RF00605                                            0605
*     DO;                           /*  REQUEST ACB = OPERATOR ACB   */
*                                                                  0606
*     /***************************************************************/
*     /* USER AREA PROVIDED FOR RDTE AND RELATED DATA                */
*     /***************************************************************/
*                                                                  0607
*       IF RPLBUFL^=ZERO            /* IF USER AREA SPECIFIED        */
*         THEN                                                     0607
         SLR   @14,@14                                             0607
         C     @14,RPLBUFL(,@06)                                   0607
         BE    @RF00607                                            0607
*         DO;                                                      0608
*           C06CALC=OFFREG;         /* MORE THAN AREA CALCULATION  0609
*                                    NEEDED--SET SWITCH OFF AND RC=0 */
         LR    C06CALC,@14                                         0609
*           CALL C06VALA;           /* VALIDATE USER-SUPPLIED AREA   */
*                                                                  0610
         BAL   @14,C06VALA                                         0610
*       /*************************************************************/
*       /* SUCCESSFUL VALIDITY CHECK OF USER-SUPPLIED AREA           */
*       /* (INCLUDING SETTING OF LOCAL MEMORY LOCK)                  */
*       /*************************************************************/
*                                                                  0611
*           IF RC=ZERO              /* IF USER-SUPPLIED AREA VALID   */
*             THEN                                                 0611
         LTR   RC,RC                                               0611
         BNZ   @RF00611                                            0611
*             DO;                                                  0612
*               CALL C06DISPA;      /* CALL DISPATCH SUBROUTINE      */
         BAL   @14,C06DISPA                                        0613
*               IF RC^=ZEROB        /* LOCAL MEMORY LOCK WAS SET     */
*                 THEN              /*  BEFORE VALIDITY CHECK FAILED */
         CH    RC,@CH01120                                         0614
         BE    @RF00614                                            0614
*                 DO;                                      /*@XM08755*/
*                   C06R13=C06R13+TWELVE; /* BUMP PTR        @XM08755*/
         AH    C06R13,@CH00032                                     0616
*/*VSETLCK  (C06R15,RELEASE,LOCAL,(LOCAL,ISTSQC06(C06OBT1)))*/     0617
*C06REL1:         DO;                                              0617
C06REL1  DS    0H                                                  0618
*                                        /*DECLARE AND RESTRICT REGS */
*                                        /*   2,10,11,12,13,14, AND 15
**/                                                                0618
*                 RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P
* RSTD;                                                            0618
*                                        /*SAVE REGS 2 AND 10 THRU 14*/
*        GEN REFS(GPR02F,GPR10F,GPR11F,GPR12F,GPR14F,GPR13P);      0619
*                                                                  0619
         STM   GPR10F,GPR12F,0(GPR13P)
         ST    GPR14F,12(GPR13P)
         ST    GPR02F,16(GPR13P)
*                                        /*INVOKE MODESET TO CHANGE  */
*                                        /*PSW PROTECTION KEY TO 0   */
*        GEN SETS(2);                                              0620
*                                                                  0620
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
*                   GPR10P=GPR13P;       /*PUT SAVE AREA ADDR IN R 10*/
         LR    GPR10P,GPR13P                                       0621
*                                        /*INVOKE OS/VS SETLOCK MACRO*/
*                   GEN REFS(GPR13P,PSALITA,FLC) SETS(GPR12F);     0622
         SETLOCK RELEASE,TYPE=LOCAL,                                   *
               RELATED=(LOCAL,ISTSQC06(C06OBT1))
*                   GPR15P=GPR13P;       /*PUT RETURN CODE IN R 15 */
         LR    GPR15P,GPR13P                                       0623
*                                        /*INVOKE MODESET MACRO TO   */
*                     DO;                /*RESTORE PSW PROTECTION KEY*/
*        GEN SETS(2);                                              0625
         MODESET KEYADDR=(2),WORKREG=2
*                     END;               /* RESTORE REGISTERS        */
*                   GEN REFS(GPR10F,GPR13P) SETS(GPR10F,GPR11F,    0627
*                   GPR12F,GPR13F,GPR14F,GPR02F);                  0627
         LR    GPR13F,GPR10F
         LM    GPR10F,GPR12F,0(GPR13P)
         L     GPR14F,12(GPR13P)
         L     GPR02F,16(GPR13P)
*                   IF GPR15F=4 THEN GPR15F=0;                     0628
         CH    GPR15F,@CH00055                                     0628
         BNE   @RF00628                                            0628
         SLR   GPR15F,GPR15F                                       0629
*                   C06R15=GPR15F;       /*PUT RETURN CODE IN RCREG*/
*                                                                  0630
@RF00628 DS    0H                                                  0631
*                 RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P
* UNRSTD;         END;  /*C06REL1:VSETLCK */                       0631
*                   C06R13=C06R13-TWELVE; /* UNBUMP          @XM08755*/
         SH    C06R13,@CH00032                                     0633
*                   END;                                   /*@XM08755*/
*               ELSE                /* LOCAL MEMORY LOCK WAS NOT SET */
*                 ;                 /* NO NEED TO RELEASE IT         */
@RF00614 DS    0H                                                  0636
*               C06R0=NEEDSIZE;     /* PUT SIZE OF NEEDED× USED AREA
*                                      IN RETURN PARM REG            */
         L     @14,RPHWEA(,PTRRPH)                                 0636
         L     C06R0,NEEDSIZE+552(,@14)                            0636
*             END;                  /* END VALID USER-SUPPLIED AREA  */
*                                                                  0637
*          /**********************************************************/
*          /* UNSUCCESSFUL VALIDITY CHECK OF USER-SUPPLIED AREA      */
*          /**********************************************************/
*                                                                  0638
*           ELSE                    /* USER-SUPPLIED AREA NOT VALID  */
*             IF RC=HEX17           /* LOCAL MEMORY LOCK WAS SET     */
*              THEN                 /*  BEFORE VALIDITY CHECK FAILED */
         B     @RC00611                                            0638
@RF00611 CH    RC,@CH04859                                         0638
         BNE   @RF00638                                            0638
*              DO;                                         /*@XM08755*/
*                C06R13=C06R13+TWELVE;  /* BUMP PTR          @XM08755*/
         AH    C06R13,@CH00032                                     0640
*/*VSETLCK  (C06R15,RELEASE,LOCAL,(LOCAL,ISTSQC06(C06OBT1)))*/     0641
*C06REL2:       DO;                                                0641
C06REL2  DS    0H                                                  0642
*                                        /*DECLARE AND RESTRICT REGS */
*                                        /*   2,10,11,12,13,14, AND 15
**/                                                                0642
*               RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P)
*STD;                                                              0642
*                                        /*SAVE REGS 2 AND 10 THRU 14*/
*        GEN REFS(GPR02F,GPR10F,GPR11F,GPR12F,GPR14F,GPR13P);      0643
*                                                                  0643
         STM   GPR10F,GPR12F,0(GPR13P)
         ST    GPR14F,12(GPR13P)
         ST    GPR02F,16(GPR13P)
*                                        /*INVOKE MODESET TO CHANGE  */
*                                        /*PSW PROTECTION KEY TO 0   */
*        GEN SETS(2);                                              0644
*                                                                  0644
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
*                 GPR10P=GPR13P;         /*PUT SAVE AREA ADDR IN R 10*/
         LR    GPR10P,GPR13P                                       0645
*                                        /*INVOKE OS/VS SETLOCK MACRO*/
*                 GEN REFS(GPR13P,PSALITA,FLC) SETS(GPR12F);       0646
         SETLOCK RELEASE,TYPE=LOCAL,                                   *
               RELATED=(LOCAL,ISTSQC06(C06OBT1))
*                 GPR15P=GPR13P;         /*PUT RETURN CODE IN R 15 */
         LR    GPR15P,GPR13P                                       0647
*                                        /*INVOKE MODESET MACRO TO   */
*                   DO;                  /*RESTORE PSW PROTECTION KEY*/
*        GEN SETS(2);                                              0649
         MODESET KEYADDR=(2),WORKREG=2
*                   END;                 /* RESTORE REGISTERS        */
*                 GEN REFS(GPR10F,GPR13P) SETS(GPR10F,GPR11F,      0651
*                 GPR12F,GPR13F,GPR14F,GPR02F);                    0651
         LR    GPR13F,GPR10F
         LM    GPR10F,GPR12F,0(GPR13P)
         L     GPR14F,12(GPR13P)
         L     GPR02F,16(GPR13P)
*                 IF GPR15F=4 THEN GPR15F=0;                       0652
         CH    GPR15F,@CH00055                                     0652
         BNE   @RF00652                                            0652
         SLR   GPR15F,GPR15F                                       0653
*                 C06R15=GPR15F;         /*PUT RETURN CODE IN RCREG*/
*                                                                  0654
@RF00652 DS    0H                                                  0655
*               RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P)
*NRSTD;         END;  /*C06REL2:VSETLCK */                         0655
*                C06R13=C06R13-TWELVE;  /* UNBUMP PTR        @MX08755*/
         SH    C06R13,@CH00032                                     0657
*                END;                                      /*@XM08755*/
*               ELSE                /* LOCAL MEMORY LOCK WAS NOT SET */
*                 ;                 /* NO NEED TO RELEASE IT         */
@RF00638 DS    0H                                                  0660
*         END;                      /* END USER AREA SPECIFIED       */
*                                                                  0660
*       /*************************************************************/
*       /* USER AREA NOT PROVIDED FOR RDTE AND RELATED DATA          */
*       /*************************************************************/
*                                                                  0661
*       ELSE                                                       0661
*         DO;                       /* USER AREA NOT SPECIFIED       */
         B     @RC00607                                            0661
@RF00607 DS    0H                                                  0662
*           C06CALC=ON2B;           /*  REQUIRED AREA CALCULATION ONLY
*                                          REQUIRED - SET SWITCH ON
*                                          AND RC = X'2B'            */
         LA    C06CALC,43                                          0662
*           CALL C06DISPA;          /* CALL DISPATCH SUBROUTINE      */
         BAL   @14,C06DISPA                                        0663
*           C06R0=NEEDSIZE;         /* PUT SIZE OF NEEDED× USED AREA
*                                      IN RETURN PARM REG            */
         L     @14,RPHWEA(,PTRRPH)                                 0664
         L     C06R0,NEEDSIZE+552(,@14)                            0664
*         END;                      /* END USER AREA NOT SPECIFIED   */
*     END;                          /* END REQUEST ACB=OPERATOR ACB  */
*                                                                  0666
*   /*****************************************************************/
*   /* ACB NOT FOR OPERATOR CONTROL                                  */
*   /*****************************************************************/
*                                                                  0667
*   ELSE                                                           0667
*     RC=FOUR;                      /* SET RETURN CODE = 4           */
*                                                                  0667
         B     @RC00605                                            0667
@RF00605 LA    RC,4                                                0667
*   /*****************************************************************/
*   /*      RETURN TO ISTSQC00                                       */
*   /*****************************************************************/
*                                                                  0668
*   C06R15=RC;                      /* LOAD RETURN CODE              */
@RC00605 LR    C06R15,RC                                           0668
*   C06R13=C06R13->SAVBACK;         /* POINT TO CALLERS SAVE AREA    */
         L     C06R13,SAVBACK(,C06R13)                             0669
*   RFY                                                            0670
*    (ACBPTR,                                                      0670
*     C06R0) UNRSTD;                                               0670
*   RETURN;                         /* END OF MAIN LINE              */
@EL00001 DS    0H                                                  0671
@EF00001 DS    0H                                                  0671
@ER00001 L     @14,12(,@13)                                        0671
         LM    @01,@12,24(@13)                                     0671
         BR    @14                                                 0671
*                                                                  0672
*/********************************************************************/
*/* ROUTINE NAME: C06DISPA - DISPATCHER                              */
*/*                                                                  */
*/* FUNCTION: CALLED BY MAIN-LINE TO DISPATCH APPROPRIATE SUB-       */
*/*           ROUTINE (SEE 'ROUTINES CALLED', BELOW) DEPENDENT       */
*/*           UPON RDT ENTRY TYPE.                                   */
*/*                                                                  */
*/* INPUT:  PTRRPH   (R6) - POINTER TO RPH                   @D32CKTQ*/
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (MAIN LINE)  */
*/*                                                                  */
*/* OUTPUT: RC       (R8) - RETURN CODE (SET FOR ERROR ONLY)         */
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (MAIN LINE)  */
*/*                                                                  */
*/* ROUTINES CALLED: CLCSTAT1 - TO GET LOCAL DEVICE STATUS           */
*/*                  CTRMSTA1 - TO GET REMOTE TERMINAL, LOGICAL      */
*/*                             UNIT, OR COMPONENT STATUS            */
*/*                  CLNSTAT1 - TO GET LINE STATUS                   */
*/*                  CRNSTAT1 - TO GET COMMUNICATION CONTROLLER      */
*/*                             (3705) STATUS                        */
*/*                  CAPSTAT1 - TO GET APPLICATION STATUS            */
*/*                  CCCSTAT1 - TO GET CLUSTER CONTROLLER OR         */
*/*                             COMPONENT CLUSTER STATUS             */
*/*                  CPASTAT1 - TO PATH INFO FOR PHYS UNIT   @D32CKTQ*/
*/*                                                                  */
*/* MACROS USED: NONE                                                */
*/********************************************************************/
*                                                                  0672
*C06DISPA:                                                         0672
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);                             0672
C06DISPA DS    0H                                                  0673
*   RFY                                                            0673
*    (RDTPTR,                                                      0673
*     C06R14)RSTD;                                                 0673
*   RETDISPA=C06R14;                /* SAVE RETURN ADDRESS           */
         L     @06,RPHWEA(,PTRRPH)                                 0674
         ST    C06R14,RETDISPA+552(,@06)                           0674
*   RFY                                                            0675
*     C06R14 UNRSTD;                                               0675
*   RDTPTR=OCWDRDTE;                /* ESTABLISH BASE FOR RDT ENTRY  */
*                                                                  0676
         L     RDTPTR,OCWDRDTE(,@06)                               0676
*   /*****************************************************************/
*   /* IS REQUEST FOR DISPLAY PATHS?                         @D32CKTQ*/
*   /*****************************************************************/
*                                                                  0677
*IF RPLVTUSE=ON                     /* CFCDP SETS FOR PATHS  @D32CKTQ*/
* THEN                              /* CAN ONLY DISPLAY      @D32CKTQ*/
         L     @14,OCWRPL(,@06)                                    0677
         TM    RPLVTUSE+16(@14),B'01000000'                        0677
         BNO   @RF00677                                            0677
*  IF RPRENTRY=RPRENTCC             /* PATHS FOR PU          @D32CKTQ*/
*     &RPRHDTYP=RPRENTSW            /* IN SWITCHED SUBAREA   @D32CKTQ*/
*   THEN                                                           0678
         CLI   RPRENTRY(RDTPTR),X'71'                              0678
         BNE   @RF00678                                            0678
         CLI   RPRHDTYP(RDTPTR),X'04'                              0678
         BNE   @RF00678                                            0678
*     CALL CPASTAT1;                /* PROCESSING SUBROUTINE @D32CKTQ*/
         BAL   @14,CPASTAT1                                        0679
*   ELSE                                                           0680
*     RC=FOUR;                      /* INVALID NODE TYPE     @D32CKTQ*/
*                                                                  0680
         B     @RC00678                                            0680
@RF00678 LA    RC,4                                                0680
*   /*****************************************************************/
*   /* RDTE THAT OF A LOCAL TERMINAL?                                */
*   /*****************************************************************/
*   ELSE                                                           0681
*   IF RPRENTRY=RPRENTTR&           /* IF ENTRY IS A TERMINAL AND    */
*       RPRNSNEA->RPRENTRY          /* NEXT SCHEDULABLE NODE ENTRY   */
*       =RPRENTLC                   /* IS A LOCAL TERMINAL           */
*     THEN                                                         0681
         B     @RC00677                                            0681
@RF00677 CLI   RPRENTRY(RDTPTR),X'80'                              0681
         BNE   @RF00681                                            0681
         L     @14,RPRNSNEA(,RDTPTR)                               0681
         CLI   RPRENTRY(@14),X'45'                                 0681
         BNE   @RF00681                                            0681
*     CALL CLCSTAT1;                /* GO TO LOCAL STATUS ROUTINE    */
*                                                                  0682
         BAL   @14,CLCSTAT1                                        0682
*   /*****************************************************************/
*   /* RDTE THAT OF A REMOTE TERMINAL, LOGICAL UNIT, COMPONENT, OR   */
*   /*            UTERM?                                     @D31CKTQ*/
*   /*****************************************************************/
*   ELSE                                                           0683
*     IF RPRENTRY=RPRENTTR×         /* IF ENTRY IS A TERMINAL OR     */
*        RPRENTRY=RPRENTUT×         /* ENTRY IS A UTERM OR   @D31CKTQ*/
*                RPRENTRY=RPRENTLU×    /* ENTRY IS A LOGICAL UNIT OR */
*                   RPRENTRY=RPRENTCM  /* ENTRY IS A COMPONENT       */
*       THEN                                                       0683
         B     @RC00681                                            0683
@RF00681 CLI   RPRENTRY(RDTPTR),X'80'                              0683
         BE    @RT00683                                            0683
         CLI   RPRENTRY(RDTPTR),X'75'                              0683
         BE    @RT00683                                            0683
         CLI   RPRENTRY(RDTPTR),X'81'                              0683
         BE    @RT00683                                            0683
         CLI   RPRENTRY(RDTPTR),X'90'                              0683
         BNE   @RF00683                                            0683
@RT00683 DS    0H                                                  0684
*       CALL CTRMSTA1;              /* GO TO TERMINAL ROUTINE        */
*                                                                  0684
         BAL   @14,CTRMSTA1                                        0684
*     /***************************************************************/
*     /* RDTE THAT OF A LINE?                                        */
*     /***************************************************************/
*     ELSE                                                         0685
*       IF RPRENTRY=RPRENTLN        /* IF ENTRY IS A LINE            */
*         THEN                                                     0685
         B     @RC00683                                            0685
@RF00683 CLI   RPRENTRY(RDTPTR),X'50'                              0685
         BNE   @RF00685                                            0685
*         CALL CLNSTAT1;            /* GO TO LINE ROUTINE            */
*                                                                  0686
         BAL   @14,CLNSTAT1                                        0686
*       /*************************************************************/
*       /* RDTE THAT OF A COMMUNICATION CONTROLLER?                  */
*       /*************************************************************/
*       ELSE                                                       0687
*         IF RPRENTRY=RPRENTRN      /* IF ENTRY IS THE 370X          */
*           THEN                                                   0687
         B     @RC00685                                            0687
@RF00685 CLI   RPRENTRY(RDTPTR),X'01'                              0687
         BNE   @RF00687                                            0687
*           CALL CRNSTAT1;          /* GO TO COMMUN. CONT. ROUTINE   */
*                                                                  0688
         BAL   @14,CRNSTAT1                                        0688
*         /***********************************************************/
*         /* RDTE THAT OF AN APPLICATION?                            */
*         /***********************************************************/
*         ELSE                                                     0689
*           IF RPRENTRY=RPRENTAP    /* IF ENTRY IS AN APPLICATION    */
*             THEN                                                 0689
         B     @RC00687                                            0689
@RF00687 CLI   RPRENTRY(RDTPTR),X'55'                              0689
         BNE   @RF00689                                            0689
*             CALL CAPSTAT1;        /* GO TO APPLICATION ROUTINE     */
*                                                                  0690
         BAL   @14,CAPSTAT1                                        0690
*         /***********************************************************/
*         /* RDTE THAT OF A CLUSTER CONTROLLER OR COMPONENT CLUSTER? */
*         /***********************************************************/
*          ELSE                                                    0691
*            IF RPRENTRY=RPRENTCL×   /* IF ENTRY IS A CLUSTER OR     */
*                RPRENTRY=RPRENTCC   /* ENTRY IS A CLUSTER CONTROL   */
*              THEN CALL CCCSTAT1;   /* GO TO CLUSTER ROUTINE        */
*                                                                  0691
         B     @RC00689                                            0691
@RF00689 CLI   RPRENTRY(RDTPTR),X'70'                              0691
         BE    @RT00691                                            0691
         CLI   RPRENTRY(RDTPTR),X'71'                              0691
         BNE   @RF00691                                            0691
@RT00691 DS    0H                                                  0692
         BAL   @14,CCCSTAT1                                        0692
*           /*********************************************************/
*           /* OTHERWISE, RDTE TYPE IS NOT SUPPORTED FOR DISPLAY     */
*           /*********************************************************/
*           ELSE                                                   0693
*             RC=FOUR;              /* SET INVALID RDTE RETURN CODE  */
         B     @RC00691                                            0693
@RF00691 LA    RC,4                                                0693
*   RFY                                                            0694
*     C06R14 RSTD;                                                 0694
@RC00691 DS    0H                                                  0694
@RC00689 DS    0H                                                  0694
@RC00687 DS    0H                                                  0694
@RC00685 DS    0H                                                  0694
@RC00683 DS    0H                                                  0694
@RC00681 DS    0H                                                  0694
@RC00677 DS    0H                                                  0695
*   C06R14=RETDISPA;                /* RESTORE RETURN ADDRESS        */
         L     @06,RPHWEA(,PTRRPH)                                 0695
         L     C06R14,RETDISPA+552(,@06)                           0695
*   END C06DISPA;                                                  0696
@EL00002 DS    0H                                                  0696
@EF00002 DS    0H                                                  0696
@ER00002 BR    @14                                                 0696
*                                                                  0697
*/********************************************************************/
*/* ROUTINE NAME: CTRMSTA1 - TERMINAL/LOGICAL UNIT/COMPONENT STATUS  */
*/*                                                                  */
*/* FUNCTION: CALLED BY C06DISPA TO OBTAIN DATA FOR REMOTE TERMINAL, */
*/*           COMPONENT, UTERM, OR LOGICAL UNIT DISPLAY      @D31CKTQ*/
*/*           INQUIRIES. FINDS                                       */
*/*           REQUIRED SIZE OF BUFFER TO CONTAIN RDTE, TESTS TO SEE  */
*/*           THAT USER-SUPPLIED BUFFER IS LARGE ENOUGH, AND--IF IT  */
*/*           IS--MOVES RDTE INTO IT.  CALLS CSETSTLU TO     @X50BHTQ*/
*/*           DETERMINE OUTSTANDING I/O.                     @X50BHTQ*/
*/*           CALLS CTLNSRCH TO LOCATE LINE                  @X50BHTQ*/
*/*           NAME AND CTRMSTA2 (IN LINE) TO CHECK FOR AN APPLICA-   */
*/*           TION HAVING THIS TERMINAL OR LOGICAL UNIT CONNECTED    */
*/*           TO IT.  CTRMSTA2 MOVES THE APPLICATION NAME TO THE     */
*/*           AREA. IF THE TERMINAL OR LOGICAL UNIT IS NOT CONNECTED */
*/*           TO AN APPLICATION, THE FIELD IS FILLED WITH BLANKS.    */
*/*                                                                  */
*/* INPUT:  RDTPTR   (R4) - POINTER TO TERMINAL, COMPONENT, UTERM, OR*/
*/*                         LOGICAL UNIT RDTE                        */
*/*         REGDATA  (R5) - POINTER TO RETURN REG SAVE AREA          */
*/*         RPLPTR   (R7) - POINTER TO USER AREA CONTAINING BUFFER   */
*/*         RC       (R8) - RETURN CODE                              */
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (C06DISPA)   */
*/*                                                                  */
*/* OUTPUT: RC       (R8) - RETURN CODE (TO X'2B' IF USER SUPPLIED   */
*/*                         BUFFER AREA IS INADEQUATE, X'0B' @X50BHTQ*/
*/*                         IF CALL TO CSETSTLU RESULTS      @X50BHTQ*/
*/*                         IN VSETLCK FAILURE)              @X50BHTQ*/
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (C06DISPA)   */
*/*         NEEDSIZE      - SIZE OF BUFFER AREA REQUIRED     @D32CKTQ*/
*/*         IF RC=0, RDTE AND APPLICATION NAME (OR BLANKS) MOVED     */
*/*                  TO USER-SUPPLIED BUFFER, TERMLCL (FLAG) SET OFF */
*/*                                                                  */
*/* ROUTINES CALLED: CTLNSRCH - TO LOCATE LINE AND/OR GROUP NAME     */
*/*                                                                  */
*/* MACROS USED: NONE                                                */
*/********************************************************************/
*                                                                  0697
*CTRMSTA1:                                                         0697
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);                             0697
CTRMSTA1 DS    0H                                                  0698
*   RETTRA1=C06R14;                 /* SAVE RETURN ADDRESS           */
         LA    @06,552                                             0698
         AL    @06,RPHWEA(,PTRRPH)                                 0698
         ST    C06R14,RETTRA1(,@06)                                0698
*   RFY                                                            0699
*     C06R14 UNRSTD;                                               0699
*   NEEDSIZE=LENGTH(ISTTERM);       /* EST. SIZE REQUIRED FOR STATUS */
         MVC   NEEDSIZE(4,@06),@CF06013                            0700
*   IF C06CALC=ON2B                 /* CALCULATION-ONLY REQUIRED     */
*     THEN                          /* BYPASS MOVEMENT OF RDTE AND   */
         CH    C06CALC,@CH04855                                    0701
         BE    @RT00701                                            0701
*      ;                            /*    RELATED DATA TO USER AREA  */
*   ELSE                                                           0703
*     IF RPLBUFL<NEEDSIZE           /* SPECIFIED SIZE IS TOO SMALL   */
*       THEN                        /* SET CALCULATION-ONLY SWITCH   */
         L     @14,RPHWEA(,PTRRPH)                                 0703
         L     @06,OCWRPL(,@14)                                    0703
         L     @06,RPLBUFL(,@06)                                   0703
         C     @06,NEEDSIZE+552(,@14)                              0703
         BNL   @RF00703                                            0703
*       RC=TWENTYB;                 /*   ON AND RETURN CODE = X'2B'  */
         LA    RC,43                                               0704
*     ELSE                                                         0705
*       DO;                                                        0705
*                                                                  0705
         B     @RC00703                                            0705
@RF00703 DS    0H                                                  0706
*         /***********************************************************/
*         /*    MOVE RDTE AND RELATED DATA TO USER-SUPPLIED AREA     */
*         /***********************************************************/
*    /*   TERMRDT=ISTRTR;              MOVE IN TERMINAL RDTE @ZA25608*/
*         IF RPRENTRY=RPRENTLU      /* A LU ?                @ZA25608*/
*         THEN TERMRDT=ISTRLU;      /* MOVE IN LU RDTE       @ZA25608*/
         CLI   RPRENTRY(RDTPTR),X'81'                              0706
         BNE   @RF00706                                            0706
         L     @14,RPHWEA(,PTRRPH)                                 0707
         L     @14,OCWRPL(,@14)                                    0707
         L     @14,RPLAREA(,@14)                                   0707
         MVI   TERMRDT+176(@14),C' '                               0707
         MVC   TERMRDT+177(35,@14),TERMRDT+176(@14)                0707
         MVC   TERMRDT(176,@14),ISTRLU(RDTPTR)                     0707
*         ELSE TERMRDT=ISTRTR;      /* MOVE IN TERM RDTE     @ZA25608*/
         B     @RC00706                                            0708
@RF00706 L     @14,RPHWEA(,PTRRPH)                                 0708
         L     @14,OCWRPL(,@14)                                    0708
         L     @14,RPLAREA(,@14)                                   0708
         MVC   TERMRDT(212,@14),ISTRTR(RDTPTR)                     0708
*         TERMLCL=OFF;              /* INDICATE REMOTE TERMINAL      */
@RC00706 L     @14,RPHWEA(,PTRRPH)                                 0709
         L     @14,OCWRPL(,@14)                                    0709
         L     @14,RPLAREA(,@14)                                   0709
         NI    TERMLCL(@14),B'01111111'                            0709
*         IF RPRONLIN=ON            /* ACTIVE                @X50BHTQ*/
*           &RPRENTRY=RPRENTLU      /* LOGICAL UNIT          @X50BHTQ*/
*           THEN                    /* PROVIDE INDICATION OF @X50BHTQ*/
         TM    RPRONLIN(RDTPTR),B'00001000'                        0710
         BNO   @RF00710                                            0710
         CLI   RPRENTRY(RDTPTR),X'81'                              0710
         BNE   @RF00710                                            0710
*           DO;                     /* CLEAR, UNBIND, OR BIND@X50BHTQ*/
*             RFY C06R15 RSTD;      /* CSETSTLU RETURN       @X50BHTQ*/
*             CALL CSETSTLU;        /* CALL SUBROUTINE TO    @X50BHTQ*/
         BAL   @14,CSETSTLU                                        0713
*             IF RC=ZERO            /* EXAMINE FMCB          @X50BHTQ*/
*               THEN                /* NO VSETLCK FAILURE    @X50BHTQ*/
         LTR   RC,RC                                               0714
         BNZ   @RF00714                                            0714
*               DO;                                        /*@X50BHTQ*/
*                 IF C06R15=FOUR    /* BIND IN PROGRESS      @X50BHTQ*/
*                   THEN TERMBIP=ON;  /* TELL ISTCFCDP       @X50BHTQ*/
         CH    C06R15,@CH00055                                     0716
         BNE   @RF00716                                            0716
         L     @14,RPHWEA(,PTRRPH)                                 0717
         L     @14,OCWRPL(,@14)                                    0717
         L     @14,RPLAREA(,@14)                                   0717
         OI    TERMBIP(@14),B'00000010'                            0717
*                   ELSE                                   /*@X50BHTQ*/
*                    IF C06R15=8 /* CLEAR OR UNBIND          @X50BHTQ*/
*                       THEN TERMCUIP=ON; /* IN PROGRESS     @X50BHTQ*/
         B     @RC00716                                            0718
@RF00716 CH    C06R15,@CH00061                                     0718
         BNE   @RF00718                                            0718
         L     @14,RPHWEA(,PTRRPH)                                 0719
         L     @14,OCWRPL(,@14)                                    0719
         L     @14,RPLAREA(,@14)                                   0719
         OI    TERMCUIP(@14),B'00000001'                           0719
*                       ELSE;                              /*@X50BHTQ*/
@RF00718 DS    0H                                                  0721
*                 END;              /* END RC=ZERO GROUP     @X50BHTQ*/
*               ELSE;                                      /*@X50BHTQ*/
@RF00714 DS    0H                                                  0723
*             END;                  /* END ACTIVE LU GROUP   @X50BHTQ*/
*           ELSE;                                          /*@X50BHTQ*/
@RF00710 DS    0H                                                  0725
*         IF RC=ZERO                /* CONTINUE IF NO        @X50BHTQ*/
*           THEN                    /* VSETLCK FAILURE       @X50BHTQ*/
@RC00710 LTR   RC,RC                                               0725
         BNZ   @RF00725                                            0725
*           DO;                                            /*@X50BHTQ*/
*           /* WANT TO MAKE EXECUTION OF THIS CODE           @XA10138*/
*           /* INDEPENDENT OF ACTIVE STATUS.                 @XA10138*/
*             IF RPRENTRY=RPRENTLU& /* IF LOGICAL UNIT       @XA10138*/
*                 RPRACTP=ON        /*  WITH ACTIVATE I.P.   @XA10138*/
*               THEN TERSUBST=TERACTLU;/* TELL ISTCFCDP      @XA10138*/
         CLI   RPRENTRY(RDTPTR),X'81'                              0727
         BNE   @RF00727                                            0727
         TM    RPRACTP(RDTPTR),B'00010000'                         0727
         BNO   @RF00727                                            0727
         L     @14,RPHWEA(,PTRRPH)                                 0728
         L     @14,OCWRPL(,@14)                                    0728
         L     @14,RPLAREA(,@14)                                   0728
         OI    TERSUBST(@14),B'00000011'                           0728
*               ELSE;               /* OTHERWISE LEAVE ALONE @XA10138*/
*                                                                  0729
@RF00727 DS    0H                                                  0730
*         /***********************************************************/
*         /* CHECK FOR LINE AND GROUP NAMES                          */
*         /***********************************************************/
*             CALL CTLNSRCH;                                       0730
*                                                                  0730
         BAL   @14,CTLNSRCH                                        0730
*/********************************************************************/
*/*                                                                  */
*/*                     *****  CTRMSTA2  *****                       */
*/*   CHECK FOR APPLICATION TO WHICH THIS TERMINAL, LOGICAL UNIT,    */
*/*                    OR COMPONENT IS CONNECTED                     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0731
*             IF RCPACETR^=ADDR(RCPACETR)                          0731
*               THEN                /* THIS TERMINAL IS CONNECTED    */
         L     @14,RCPACETR(,RDTPTR)                               0731
         LA    @06,RCPACETR(,RDTPTR)                               0731
         CR    @14,@06                                             0731
         BE    @RF00731                                            0731
*               DO;                 /*    TO AN APPLICATION          */
*                 RFY                                              0733
*                   ACEPTR RSTD;                                   0733
*                 ACEPTR=RCPACETR;  /* ESTABLISH BASE FOR ACE        */
         LR    ACEPTR,@14                                          0734
*                 TERMAN=ACESUBJ->RPRNAME;/* MOVE NAME TO USER AREA  */
         L     @14,RPHWEA(,PTRRPH)                                 0735
         L     @14,OCWRPL(,@14)                                    0735
         L     @14,RPLAREA(,@14)                                   0735
         L     @11,ACESUBJ(,ACEPTR)                                0735
         MVC   TERMAN(8,@14),RPRNAME(@11)                          0735
*               END;                                               0736
*             ELSE                  /* THIS TERMINAL ISN'T CONNECTED */
*               TERMAN='        ';  /*   SO BLANK FIELD IN USER AREA */
         B     @RC00731                                            0737
@RF00731 L     @14,RPHWEA(,PTRRPH)                                 0737
         L     @14,OCWRPL(,@14)                                    0737
         L     @14,RPLAREA(,@14)                                   0737
         MVC   TERMAN(8,@14),@CC04841                              0737
*             END;                  /* END RC=0 GROUP        @X50BHTQ*/
*           ELSE;                                          /*@X50BHTQ*/
@RF00725 DS    0H                                                  0740
*       END;                                                       0740
@RC00725 DS    0H                                                  0741
*   RFY                                                            0741
*     C06R14 RSTD;                                                 0741
@RC00703 DS    0H                                                  0741
@RT00701 DS    0H                                                  0742
*   C06R14=RETTRA1;                 /* RESTORE RETURN ADDRESS       */
         L     @11,RPHWEA(,PTRRPH)                                 0742
         L     C06R14,RETTRA1+552(,@11)                            0742
*   RFY                                                            0743
*     ACEPTR UNRSTD;                                               0743
*   END CTRMSTA1;                                                  0744
@EL00003 DS    0H                                                  0744
@EF00003 DS    0H                                                  0744
@ER00003 BR    @14                                                 0744
*                                                                  0745
*/********************************************************************/
*/* ROUTINE: CTLNSRCH - LINE SEARCH FOR TERMINAL, LOGICAL UNIT,      */
*/*                     OR COMPONENT                                 */
*/*                                                                  */
*/* FUNCTION: CALLED BY CTRMSTA1 TO LOCATE EITHER SUBAREA    @D32CKTQ*/
*/*           HEADER NAME OR LINE AND/OR GROUP NAME (OR      @D32CKTQ*/
*/*           DIALSET NAME) AND MOVE IT/THEM TO USER-        @D32CKTQ*/
*/*           SUPPLIED BUFFER.  IF THERE IS NO LINE OR GROUP @D32CKTQ*/
*/*           NAME, THE CORRESPONDING FIELD IS FILLED WITH   @D32CKTQ*/
*/*           BLANKS.                                        @D32CKTQ*/
*/*                                                          @D32CKTQ*/
*/* INPUT:  RDTPTR   (R4) - POINTER TO TERM, COMPONENT, OR LU RDTE   */
*/*         C06R14  (R14) - NSI ADDR IN CALLING SUBROUTINE(CTRMSTA1) */
*/*                                                          @D32CKTQ*/
*/* OUTPUT: LINE NAME AND GROUP NAME, OR BLANKS FOR EITHER OR BOTH,  */
*/*         MOVED TO USER AREA                                       */
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (CTRMSTA1)   */
*/*                                                                  */
*/* ROUTINES CALLED: NONE                                            */
*/*                                                                  */
*/* MACROS USED: NONE                                                */
*/********************************************************************/
*                                                                  0745
*CTLNSRCH: PROC OPTIONS(NOSAVEAREA,DONTSAVE);              /*@D32CKTQ*/
CTLNSRCH DS    0H                                                  0746
*/********************************************************************/
*/* BLANK OUT FIELDS                                         @D32CKTQ*/
*/********************************************************************/
*  TERMLN=C06BLANK;                 /* LINE NAME             @D32CKTQ*/
         L     @06,RPHWEA(,PTRRPH)                                 0746
         L     @06,OCWRPL(,@06)                                    0746
         L     @06,RPLAREA(,@06)                                   0746
         MVC   TERMLN(8,@06),@CC04841                              0746
*  TERMGN=C06BLANK;                 /* GROUP NAME            @D32CKTQ*/
         MVC   TERMGN(8,@06),@CC04841                              0747
*  TERM370X=C06BLANK;               /* RN NAME               @D32CKTQ*/
         MVC   TERM370X(8,@06),@CC04841                            0748
*  TERMPU=C06BLANK;                 /* PHYS UNIT NAME        @D32CKTQ*/
         MVC   TERMPU(8,@06),@CC04841                              0749
*  TERMSUBA=C06BLANK;               /* SUBAREA HEADER NAME   @D32CKTQ*/
         MVC   TERMSUBA(8,@06),@CC04841                            0750
*  TERMAN=C06BLANK;                 /* APPLICATION NAME      @D32CKTQ*/
         MVC   TERMAN(8,@06),@CC04841                              0751
*  TERMCUA=C06BLANK;                /* CUA (IN LCL SUBAREA)  @D32CKTQ*/
*                                                                  0752
         MVC   TERMCUA(3,@06),@CC04841                             0752
*  RDTPTR=RPRNSNEA;                 /* PREVIOUS ENTRY        @D32CKTQ*/
         L     RDTPTR,RPRNSNEA(,RDTPTR)                            0753
*  IF RPRENTRY=RPRENTCC             /* IS IT A PHYS UNIT?    @D32CKTQ*/
*    THEN                                                          0754
         CLI   RPRENTRY(RDTPTR),X'71'                              0754
         BNE   @RF00754                                            0754
*    DO;                                                   /*@D32CKTQ*/
*/********************************************************************/
*/* PROCESSING FOR CASE IN WHICH RPRNSNEA POINTS TO PHYS UNIT RDTE   */
*/********************************************************************/
*      IF RPRHDTYP=RPRENTSW         /* PU IN SWITCHED S/A?   @D32CKTQ*/
*        THEN                       /* YES -                 @D32CKTQ*/
         CLI   RPRHDTYP(RDTPTR),X'04'                              0756
         BNE   @RF00756                                            0756
*        DO;                                               /*@D32CKTQ*/
*          TERMLCLA=ON;             /* SET FLAG FOR SW S/A   @D32CKTQ*/
         OI    TERMLCLA(@06),B'00001000'                           0758
*          DO WHILE RPRENTRY^=RPRENTSW; /* LOOK FOR HEADER   @D32CKTQ*/
         B     @DE00759                                            0759
@DL00759 DS    0H                                                  0760
*            RDTPTR=RDTPTR-RPRPELEN;/* SAVE FOR NAME MOVE    @D32CKTQ*/
         SH    RDTPTR,RPRPELEN(,RDTPTR)                            0760
*            END;                                          /*@D32CKTQ*/
@DE00759 CLI   RPRENTRY(RDTPTR),X'04'                              0761
         BNE   @DL00759                                            0761
*          TERMSUBA=RPRNAME;        /* SUBAREA NAME          @D32CKTQ*/
         L     @06,RPHWEA(,PTRRPH)                                 0762
         L     @06,OCWRPL(,@06)                                    0762
         L     @06,RPLAREA(,@06)                                   0762
         MVC   TERMSUBA(8,@06),RPRNAME(RDTPTR)                     0762
*          END;                     /* END OF SW S/A PROCESS @D32CKTQ*/
*        ELSE                       /* WAS NOT IN SW S/A-    @D32CKTQ*/
*        DO;                        /* CHECK FOR LOCAL S/A   @D32CKTQ*/
         B     @RC00756                                            0764
@RF00756 DS    0H                                                  0765
*          IF RPRHDTYP=RPRENTLS     /* IS PU IN LCL SUBAREA? @D32CKTQ*/
*            THEN                   /* YES-                  @D32CKTQ*/
         CLI   RPRHDTYP(RDTPTR),X'05'                              0765
         BNE   @RF00765                                            0765
*            DO;                    /* COLLECT LCL S/A INFO  @D32CKTQ*/
*              RDTPTR=RPRNSNEA;     /* MOST IS IN DA RDTE    @D32CKTQ*/
         L     RDTPTR,RPRNSNEA(,RDTPTR)                            0767
*              TERMCUA=RDADACUA;    /* CUA                   @D32CKTQ*/
         L     @06,RPHWEA(,PTRRPH)                                 0768
         L     @06,OCWRPL(,@06)                                    0768
         L     @06,RPLAREA(,@06)                                   0768
         MVC   TERMCUA(3,@06),RDADACUA(RDTPTR)                     0768
*              RDTPTR=RPRNSNEA;     /* FOR LCL S/A NAME      @D32CKTQ*/
         L     RDTPTR,RPRNSNEA(,RDTPTR)                            0769
*              TERMSUBA=RPRNAME;    /* SUBAREA NAME          @D32CKTQ*/
         MVC   TERMSUBA(8,@06),RPRNAME(RDTPTR)                     0770
*              END;                                        /*@D32CKTQ*/
*            ELSE;                                         /*@D32CKTQ*/
@RF00765 DS    0H                                                  0773
*          END;                                            /*@D32CKTQ*/
*      RDTPTR=OCWDRDTE->RPRNSNEA;   /* RE-RETRIEVE PU PTR    @D32CKTQ*/
@RC00756 L     @06,RPHWEA(,PTRRPH)                                 0774
         L     @11,OCWDRDTE(,@06)                                  0774
         L     RDTPTR,RPRNSNEA(,@11)                               0774
*      TERMPU=RPRNAME;              /* PU NAME               @D32CKTQ*/
         L     @06,OCWRPL(,@06)                                    0775
         L     @06,RPLAREA(,@06)                                   0775
         MVC   TERMPU(8,@06),RPRNAME(RDTPTR)                       0775
*      RDTPTR=RPRNSNEA;             /* NEXT SCHEDULABLE NODE @D32CKTQ*/
         L     RDTPTR,RPRNSNEA(,RDTPTR)                            0776
*      END;                         /* END NSNEA=PU PROCESS  @D32CKTQ*/
*    ELSE;                                                 /*@D32CKTQ*/
@RF00754 DS    0H                                                  0779
*  DO WHILE RPRENTRY^=RPRENTSW      /* CHECK OUT RPRNSNEA    @D32CKTQ*/
*          &RPRENTRY^=RPRENTLS      /* LOCAL SUBAREA?        @D32CKTQ*/
*          &RPRENTRY^=RPRENTGP      /* GROUP?                @D32CKTQ*/
*          &RPRENTRY^=RPRENTLN      /* LINE?                 @D32CKTQ*/
*          &RPRENTRY^=RPRENTDS;     /* OR DIALSET?           @D32CKTQ*/
         B     @DE00779                                            0779
@DL00779 DS    0H                                                  0780
*    RDTPTR=RPRNSNEA;               /* KEEP LOOKING          @D32CKTQ*/
         L     RDTPTR,RPRNSNEA(,RDTPTR)                            0780
*    END;                                                  /*@D32CKTQ*/
@DE00779 CLI   RPRENTRY(RDTPTR),X'04'                              0781
         BE    @DC00779                                            0781
         CLI   RPRENTRY(RDTPTR),X'05'                              0781
         BE    @DC00779                                            0781
         CLI   RPRENTRY(RDTPTR),X'30'                              0781
         BE    @DC00779                                            0781
         CLI   RPRENTRY(RDTPTR),X'50'                              0781
         BE    @DC00779                                            0781
         CLI   RPRENTRY(RDTPTR),X'20'                              0781
         BNE   @DL00779                                            0781
@DC00779 DS    0H                                                  0782
*/********************************************************************/
*/* LINE ENTRY FOUND                                         @D32CKTQ*/
*/********************************************************************/
*  IF RPRENTRY=RPRENTLN             /* CHECK FOR LINE ENTRY  @D32CKTQ*/
*    THEN                           /* FOUND ONE             @D32CKTQ*/
         CLI   RPRENTRY(RDTPTR),X'50'                              0782
         BNE   @RF00782                                            0782
*    DO;                            /* PROVIDE INFO ABOUT IT @D32CKTQ*/
*      TERMLN=RPRNAME;              /* LINE NAME             @D32CKTQ*/
         L     @06,RPHWEA(,PTRRPH)                                 0784
         L     @06,OCWRPL(,@06)                                    0784
         L     @06,RPLAREA(,@06)                                   0784
         MVC   TERMLN(8,@06),RPRNAME(RDTPTR)                       0784
*      IF RLNRAPOL=ON               /* POLLED?               @D32CKTQ*/
*        THEN                       /* YES-                  @D32CKTQ*/
         TM    RLNRAPOL(RDTPTR),B'00000100'                        0785
         BNO   @RF00785                                            0785
*          TERMPOLL=ON;             /* SET FLAG              @D32CKTQ*/
         OI    TERMPOLL(@06),B'01000000'                           0786
*        ELSE;                      /* OTHERWISE DONT        @D32CKTQ*/
@RF00785 DS    0H                                                  0788
*      RDTPTR=RPRNSNEA;             /* UPDATE POINTER        @D32CKTQ*/
         L     RDTPTR,RPRNSNEA(,RDTPTR)                            0788
*      END;                                                /*@D32CKTQ*/
*    ELSE;                          /* IF NOT LINE, NO NSNEA @D32CKTQ*/
@RF00782 DS    0H                                                  0791
*/********************************************************************/
*/* PROCESS THE TERMINAL'S HIGHER NODES                      @D32CKTQ*/
*/********************************************************************/
*                                                                  0791
*/* DOINF  */                                                      0791
*                                                                  0791
*   DO  UNTIL(1=2);                                                 /*@
*32CKTQ*/                                                          0791
@DL00791 DS    0H                                                  0792
*    IF RPRENTRY=RPRENTGP           /* GROUP?                @D32CKTQ*/
*      ×RPRENTRY=RPRENTDS           /* LCDO (DIALSET)?       @D32CKTQ*/
*      THEN                                                        0792
         CLI   RPRENTRY(RDTPTR),X'30'                              0792
         BE    @RT00792                                            0792
         CLI   RPRENTRY(RDTPTR),X'20'                              0792
         BNE   @RF00792                                            0792
@RT00792 DS    0H                                                  0793
*      DO;                                                 /*@D32CKTQ*/
*        TERMGN=RPRNAME;            /* GET ITS NAME          @D32CKTQ*/
         L     @06,RPHWEA(,PTRRPH)                                 0794
         L     @06,OCWRPL(,@06)                                    0794
         L     @06,RPLAREA(,@06)                                   0794
         MVC   TERMGN(8,@06),RPRNAME(RDTPTR)                       0794
*        IF RPRENTRY=RPRENTDS       /* IF DIALSET            @D32CKTQ*/
*            ×RGPADIL=ON            /* OR DIAL GROUP         @D32CKTQ*/
*          THEN                                                    0795
         CLI   RPRENTRY(RDTPTR),X'20'                              0795
         BE    @RT00795                                            0795
         TM    RGPADIL(RDTPTR),B'10000000'                         0795
         BNO   @RF00795                                            0795
@RT00795 DS    0H                                                  0796
*            TERMSW=ON;             /* INDICATE SWITCHED     @D32CKTQ*/
         L     @06,RPHWEA(,PTRRPH)                                 0796
         L     @06,OCWRPL(,@06)                                    0796
         L     @06,RPLAREA(,@06)                                   0796
         OI    TERMSW(@06),B'00100000'                             0796
*          ELSE;                                           /*@D32CKTQ*/
@RF00795 DS    0H                                                  0798
*        IF RPRENTRY=RPRENTGP                                      0798
*            &RGPASDLC=ON           /* SDLC GROUP?           @D32CKTQ*/
*          THEN                                                    0798
         CLI   RPRENTRY(RDTPTR),X'30'                              0798
         BNE   @RF00798                                            0798
         TM    RGPASDLC(RDTPTR),B'00010000'                        0798
         BNO   @RF00798                                            0798
*            TERMSDLC=ON;           /* SET SDLC FLAG         @D32CKTQ*/
         L     @06,RPHWEA(,PTRRPH)                                 0799
         L     @06,OCWRPL(,@06)                                    0799
         L     @06,RPLAREA(,@06)                                   0799
         OI    TERMSDLC(@06),B'00010000'                           0799
*          ELSE;                                           /*@D32CKTQ*/
@RF00798 DS    0H                                                  0801
*        RDTPTR=RPRNSNEA;           /* KEEP CHECKING HIGHER  @D32CKTQ*/
         L     RDTPTR,RPRNSNEA(,RDTPTR)                            0801
*        END;                       /* END OF GROUP LOOP     @D32CKTQ*/
*      ELSE;                                               /*@D32CKTQ*/
@RF00792 DS    0H                                                  0804
*    IF RPRENTRY=RPRENTRN THEN      /* IS ENTRY A 370X?              */
         CLI   RPRENTRY(RDTPTR),X'01'                              0804
         BNE   @RF00804                                            0804
*      TERM370X=RPRNAME;            /* 370X NAME FOR CFCDP   @D32CKTQ*/
         L     @06,RPHWEA(,PTRRPH)                                 0805
         L     @06,OCWRPL(,@06)                                    0805
         L     @06,RPLAREA(,@06)                                   0805
         MVC   TERM370X(8,@06),RPRNAME(RDTPTR)                     0805
*    ELSE;                                                         0806
@RF00804 DS    0H                                                  0807
*/* SUBAREA HEADER OR RN IS AS HIGH AS YOU CAN GO            @D32CKTQ*/
*                                                                  0807
*/*     LEAVE ON(RPRENTRY=RPRENTSW×RPRENTRY=RPRENTRN×RPRENTRY=RPRENTLS)
**/                                                                0807
*       IF (RPRENTRY=RPRENTSW×RPRENTRY=RPRENTRN×RPRENTRY=RPRENTLS) THEN
         CLI   RPRENTRY(RDTPTR),X'04'                              0807
         BE    @RT00807                                            0807
         CLI   RPRENTRY(RDTPTR),X'01'                              0807
         BE    @RT00807                                            0807
         CLI   RPRENTRY(RDTPTR),X'05'                              0807
         BE    @RT00807                                            0807
*         GOTO #DC00019;                                /*@D32CKTQ*/
*      RDTPTR=RPRNSNEA;             /* LOOK HIGHER           @D32CKTQ*/
*                                                                  0809
         L     RDTPTR,RPRNSNEA(,RDTPTR)                            0809
*     END; /* END(DOINF)  */                                       0810
@DE00791 B     @DL00791                                            0810
*#DC00019:;                                          /*@D32CKTQ*/  0811
#DC00019 DS    0H                                                  0812
*RDTPTR=OCWDRDTE;                   /* RESTORE TERM RDTE PTR @D32CKTQ*/
         L     @06,RPHWEA(,PTRRPH)                                 0812
         L     RDTPTR,OCWDRDTE(,@06)                               0812
*END CTLNSRCH;                                             /*@D32CKTQ*/
@EL00004 DS    0H                                                  0813
@EF00004 DS    0H                                                  0813
@ER00004 BR    @14                                                 0813
*                                                                  0814
*/********************************************************************/
*/* ROUTINE NAME: CLNSTAT1 - LINE STATUS                             */
*/*                                                                  */
*/* FUNCTION: CALLED BY C06DISPA TO DETERMINE INFORMATION FOR LINE-  */
*/*           TYPE DISPLAY INQUIRIES.  CALCULATES MAXIMUM REQUIRED  */
*/*           SIZE OF USER AREA TO CONTAIN RDTE AND RELATED DATA,    */
*/*           TESTS TO SEE THAT USER SUPPLIED AREA IS LARGE ENOUGH,  */
*/*           AND--IF IT IS--MOVES RDTE TO IT.  CALLS CLGPSRCH TO    */
*/*           LOCATE RN NAME AND TO                          @D32CKTQ*/
*/*           LOCATE GROUP NAME AND CLNSTAT3  TO LOCATE      @X50BHTQ*/
*/*           TERMINAL NAME IF LINE IS SWITCHED OR CLNSTAT5 TO       */
*/*           LOCATE TERMINAL NAMES IF LINE IS LEASED.  CLNSTAT3     */
*/*           MOVES TERMINAL NAME INTO USER AREA IF TERMINAL IS      */
*/*           DIALED IN, BLANKS IF ONE IS NOT DIALED IN.             */
*/*                                                                  */
*/* INPUT:  RDTPTR   (R4) - POINTER TO LINE RDTE                     */
*/*         RC       (R8) - RETURN CODE                              */
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (C06DISPA)   */
*/*                                                                  */
*/* OUTPUT: RC       (R8) - RETURN CODE (TO X'2B' IF USER SUPPLIED   */
*/*                         BUFFER AREA IS INADEQUATE, TO    @X50BHTQ*/
*/*                         X'0B' IF VSETLCK FAILS).         @X50BHTQ*/
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (C06DISPA)   */
*/*         NEEDSIZE      - SIZE OF BUFFER AREA REQUIRED     @D32CKTQ*/
*/*         IF RC=0, RDTE AND  TERMINAL NAME                 @X50BHTQ*/
*/*                  (OR BLANKS) MOVED TO USER-SUPPLIED BUFFER,      */
*/*                  ALONG WITH TERMINAL STATUS FLAGS        @X50BHTQ*/
*/*                                                                  */
*/* ROUTINES CALLED: CLGPSRCH - TO LOCATE GROUP NAME OF WHICH LINE   */
*/*                             IS A PART                            */
*/*                  CLNSTAT5 - TO LOCATE TERMINAL NAMES ON LEASED   */
*/*                             LINE                                 */
*/*                                                                  */
*/* MACROS USED: NONE                                                */
*/********************************************************************/
*                                                                  0814
*CLNSTAT1:                                                         0814
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);                             0814
CLNSTAT1 DS    0H                                                  0815
*   RFY                                                            0815
*      (LINEPTR,                                                   0815
*     COUNT)RSTD;                                          /*@D32CKTQ*/
*   RETLNA1=C06R14;                 /* SAVE RETURN ADDRESS           */
         LA    @10,552                                             0816
         AL    @10,RPHWEA(,PTRRPH)                                 0816
         ST    C06R14,RETLNA1(,@10)                                0816
*   RFY                                                            0817
*     C06R14 UNRSTD;                                               0817
*   NEEDSIZE=LENGTH(ISTLINE);       /* ESTIMATE SIZE FOR STATUS      */
         MVC   NEEDSIZE(4,@10),@CF06014                            0818
*   /*****************************************************************/
*   /* NOTE THAT FOR SWITCHED SDLC LINES IT IS NECESSARY TO  @DM14008*/
*   /* OBTAIN THE COUNT OF SUBNODES BY COUNTING PUX AND LUX  @DM14008*/
*   /* ENTRIES                                               @DM14008*/
*   /*****************************************************************/
*IF RLNRATRN=ON&                    /* SDLC LINK             @DM14008*/
*   DEVCSWL=ON                      /* SWITCHED              @DM14008*/
*  THEN DO;                                                /*@DM14008*/
         TM    RLNRATRN(RDTPTR),B'00000010'                        0819
         BNO   @RF00819                                            0819
         TM    DEVCSWL+44(RDTPTR),B'00010000'                      0819
         BNO   @RF00819                                            0819
*    COUNT=1;                       /* 1 FOR PHYS UNIT       @DM14008*/
         LA    COUNT,1                                             0821
*    RDTPTR=RDTPTR+RPRELEN;         /* AFTER LINE IS PUX     @DM14008*/
         AH    RDTPTR,RPRELEN(,RDTPTR)                             0822
*    RDTPTR=RPXFLUX;                /* POINT TO 1ST LUX      @DM14008*/
         L     RDTPTR,RPXFLUX(,RDTPTR)                             0823
*    DO WHILE RDTPTR^=ZERO;         /* EXHAUST LUX CHAIN     @DM14008*/
         B     @DE00824                                            0824
@DL00824 DS    0H                                                  0825
*      COUNT=COUNT+1;               /* BUMP COUNT            @DM14008*/
         AH    COUNT,@CH00063                                      0825
*      RDTPTR=RLXNLUX;              /*POINT TO NEXT IN CHAIN @DM14008*/
         L     RDTPTR,RLXNLUX(,RDTPTR)                             0826
*      END;                         /* END DO-WHILE GROUP    @DM14008*/
@DE00824 LTR   RDTPTR,RDTPTR                                       0827
         BNZ   @DL00824                                            0827
*    RDTPTR=OCWDRDTE;               /* GET LINE RDTE BACK    @DM14008*/
         L     @14,RPHWEA(,PTRRPH)                                 0828
         L     RDTPTR,OCWDRDTE(,@14)                               0828
*    END;                           /* END SW SDLC LINK      @DM14008*/
*ELSE                               /* NOT SW SDLC LINK:     @DM14008*/
*COUNT = RLNCTETR+                  /* COUNT OF TERMINALS PLUS       */
*        RLNCTECL+                  /* COUNT OF CLUSTER CONTROLLERS  */
*        RLNCTECM+                  /* PLUS COUNT OF COMPONENTS PLUS */
*         (2*RLNCTEIN);             /* TWICE THE COUNT OF INTERMEDIATE
*                                                           NODES    */
         B     @RC00819                                            0830
@RF00819 LH    COUNT,RLNCTETR(,RDTPTR)                             0830
         AH    COUNT,RLNCTECL(,RDTPTR)                             0830
         AH    COUNT,RLNCTECM(,RDTPTR)                             0830
         LH    @14,RLNCTEIN(,RDTPTR)                               0830
         ALR   @14,@14                                             0830
         ALR   COUNT,@14                                           0830
*IF COUNT > 1                       /* SIZE OF DSECT (ISTLINE) MUST  */
*      THEN NEEDSIZE =              /*     BE INCREMENTED            */
@RC00819 CH    COUNT,@CH00063                                      0831
         BNH   @RF00831                                            0831
*          NEEDSIZE+(9*(COUNT-1));  /* TOTAL SIZE ESTIMATE           */
         LA    @14,552                                             0832
         AL    @14,RPHWEA(,PTRRPH)                                 0832
         LR    @10,COUNT                                           0832
         BCTR  @10,0                                               0832
         MH    @10,@CH00033                                        0832
         AL    @10,NEEDSIZE(,@14)                                  0832
         ST    @10,NEEDSIZE(,@14)                                  0832
*   ELSE                            /* DSECT SIZE IS SUFFICIENT      */
*     ;                                                            0833
@RF00831 DS    0H                                                  0834
*   IF C06CALC=ON2B                 /* CALCULATION-ONLY REQUIRED     */
*     THEN                          /* BYPASS MOVEMENT OF RDTE AND   */
         CH    C06CALC,@CH04855                                    0834
         BE    @RT00834                                            0834
*      ;                            /*    RELATED DATA TO USER AREA  */
*   ELSE                                                           0836
*     IF RPLBUFL<NEEDSIZE           /* SPECIFIED SIZE IS TOO SMALL   */
*       THEN                        /* SET CALCULATION-ONLY SWITCH   */
         L     @14,RPHWEA(,PTRRPH)                                 0836
         L     @10,OCWRPL(,@14)                                    0836
         L     @10,RPLBUFL(,@10)                                   0836
         C     @10,NEEDSIZE+552(,@14)                              0836
         BNL   @RF00836                                            0836
*       RC=TWENTYB;                 /*   ON AND RETURN CODE = X'2B'  */
         LA    RC,43                                               0837
*      ELSE                                                        0838
*         DO;                                                      0838
*                                                                  0838
         B     @RC00836                                            0838
@RF00836 DS    0H                                                  0839
*         /***********************************************************/
*         /*    MOVE RDTE AND RELATED DATA TO USER-SUPPLIED AREA     */
*         /***********************************************************/
*                                                                  0839
*           LINEPTR=RPLAREA;        /* ESTABLISH BASE FOR USER AREA  */
         L     @14,RPHWEA(,PTRRPH)                                 0839
         L     @14,OCWRPL(,@14)                                    0839
         L     LINEPTR,RPLAREA(,@14)                               0839
*           IF RLNPORT=ON           /* LINE ENTRY IS FOR A PORT      */
*             THEN                  /* MOVE PORT RDTE TO USER-       */
         TM    RLNPORT(RDTPTR),B'00010000'                         0840
         BNO   @RF00840                                            0840
*             LINERDT=ISTRPT;       /*   SPECIFIED AREA      @D32CKTQ*/
         MVC   LINERDT(160,LINEPTR),ISTRPT(RDTPTR)                 0841
*           ELSE                    /* ENTRY IS FOR A LEASED LINE    */
*             LINERDT=ISTRLN;       /* MOVE LEASED LINE RDTE         */
*                                                                  0842
         B     @RC00840                                            0842
@RF00840 MVI   LINERDT+116(LINEPTR),C' '                           0842
         MVC   LINERDT+117(43,LINEPTR),LINERDT+116(LINEPTR)        0842
         MVC   LINERDT(116,LINEPTR),ISTRLN(RDTPTR)                 0842
*         /***********************************************************/
*         /*   CHECK PRESENCE OF POSSIBLE GROUP OR DIALSET   @DM09571*/
*         /***********************************************************/
*                                                                  0843
*           CALL CLGPSRCH;          /* CALL SUBROUTINE               */
@RC00840 BAL   @14,CLGPSRCH                                        0843
*           NEEDSIZE=LENGTH(ISTLINE);/* RESET NEEDED SIZE            */
         L     @14,RPHWEA(,PTRRPH)                                 0844
         MVC   NEEDSIZE+552(4,@14),@CF06014                        0844
*           IF DEVCSWL^=ON          /* IF NOT SWITCHED       @DM13677*/
*             THEN                                                 0845
         TM    DEVCSWL+44(RDTPTR),B'00010000'                      0845
         BO    @RF00845                                            0845
*             CALL CLNSTAT5;        /* CALL SUBRTN FOR LEASED LINES  */
         BAL   @14,CLNSTAT5                                        0846
*           ELSE                                                   0847
*             CALL CLNSTAT3;        /* LOCATE SUBNODE NAMES  @DM14008*/
         B     @RC00845                                            0847
@RF00845 BAL   @14,CLNSTAT3                                        0847
*         END;                                                     0848
@RC00845 DS    0H                                                  0849
*   RFY                                                            0849
*     C06R14 RSTD;                                                 0849
@RC00836 DS    0H                                                  0849
@RT00834 DS    0H                                                  0850
*   C06R14=RETLNA1;                 /* RESTORE RETURN ADDRESS        */
         L     @10,RPHWEA(,PTRRPH)                                 0850
         L     C06R14,RETLNA1+552(,@10)                            0850
*   END CLNSTAT1;                                                  0851
@EL00005 DS    0H                                                  0851
@EF00005 DS    0H                                                  0851
@ER00005 BR    @14                                                 0851
*                                                                  0852
*/********************************************************************/
*/* ROUTINE NAME: CLGPSRCH - LOCATE GROUP NAME                       */
*/*                                                                  */
*/* FUNCTION: CALLED BY CLNSTAT1 TO LOCATE NAME OF GROUP (OR DIALSET)*/
*/*           TO WHICH LINE BELONGS (IF ANY) AND MOVE IT TO          */
*/*           USER-SUPPLIED BUFFER. IF THERE IS NO GROUP NAME, THE   */
*/*           CORRESPONDING FIELD IS FILLED WITH BLANKS.             */
*/*           ALSO PUTS 370X NAME IN USER BUFFER.            @D32CKTQ*/
*/*                                                                  */
*/* INPUT:  LINEPTR  (R1) - POINTER TO USER-SUPPLIED BUFFER          */
*/*         RDTPTR   (R4) - POINTER TO LINE RDT              @D32CKTQ*/
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (CLNSTAT1)   */
*/*                                                                  */
*/* OUTPUT: GROUP NAME OR BLANKS MOVED INTO USER BUFFER              */
*/*         RDTPTR   (R4) - POINTER TO LINE RDT                      */
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (CLNSTAT1)   */
*/*                                                                  */
*/* ROUTINES CALLED: NONE                                            */
*/*                                                                  */
*/* MACROS USED: NONE                                                */
*/********************************************************************/
*                                                                  0852
*CLGPSRCH:                                                         0852
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);                             0852
*                                                                  0852
CLGPSRCH DS    0H                                                  0853
*   /*****************************************************************/
*   /*                                                               */
*   /* SEARCH FOR GROUP, DIALSET OR COMMUNICATIONS CONTROLLER (370X) */
*   /* RDTE.                                                         */
*   /*                                                               */
*   /*****************************************************************/
*                                                                  0853
*   DO WHILE RPRENTRY^=RPRENTGP     /* STOP ON GROUP RDTE OR         */
*           &RPRENTRY^=RPRENTDS     /* LCDO RDTE OR          @DM09571*/
*           &RPRENTRY^=RPRENTRN;    /* 370X RDTE                     */
         B     @DE00853                                            0853
@DL00853 DS    0H                                                  0854
*     RDTPTR=RPRNSNEA;              /* BACK-UP ONE ENTRY             */
         L     RDTPTR,RPRNSNEA(,RDTPTR)                            0854
*   END;                                                           0855
@DE00853 CLI   RPRENTRY(RDTPTR),X'30'                              0855
         BE    @DC00853                                            0855
         CLI   RPRENTRY(RDTPTR),X'20'                              0855
         BE    @DC00853                                            0855
         CLI   RPRENTRY(RDTPTR),X'01'                              0855
         BNE   @DL00853                                            0855
@DC00853 DS    0H                                                  0856
*   IF RPRENTRY=RPRENTGP            /* IF LINE IS PART OF A GROUP    */
*     ×RPRENTRY=RPRENTDS            /* OR LCDO               @DM09571*/
*       THEN DO;                    /* THEN MOVE GROUP NAME TO USER  */
         CLI   RPRENTRY(RDTPTR),X'30'                              0856
         BE    @RT00856                                            0856
         CLI   RPRENTRY(RDTPTR),X'20'                              0856
         BNE   @RF00856                                            0856
@RT00856 DS    0H                                                  0857
*              LINEGN=RPRNAME;      /*    PROVIDED AREA              */
         MVC   LINEGN(8,LINEPTR),RPRNAME(RDTPTR)                   0858
*              DO WHILE RPRENTRY^=RPRENTRN; /* SEEK RN RDTE  @D32CKTQ*/
         B     @DE00859                                            0859
@DL00859 DS    0H                                                  0860
*                RDTPTR=RPRNSNEA;   /* LOOK UP NSNEA CHAIN   @D32CKTQ*/
         L     RDTPTR,RPRNSNEA(,RDTPTR)                            0860
*                END;                                      /*@D32CKTQ*/
@DE00859 CLI   RPRENTRY(RDTPTR),X'01'                              0861
         BNE   @DL00859                                            0861
*              LINE370X=RPRNAME;    /* MOVE IN RN NAME       @D32CKTQ*/
         MVC   LINE370X(8,LINEPTR),RPRNAME(RDTPTR)                 0862
*           END;                                                   0863
*    ELSE DO;                       /* IF NOT, MOVE BLANKS TO GROUP  */
         B     @RC00856                                            0864
@RF00856 DS    0H                                                  0865
*           LINEGN='        ';      /*   NAME FIELD IN USER AREA     */
         MVC   LINEGN(8,LINEPTR),@CC04841                          0865
*           LINE370X=RPRNAME;       /* WE FOUND RN W/O GROUP @D32CKTQ*/
         MVC   LINE370X(8,LINEPTR),RPRNAME(RDTPTR)                 0866
*        END;                                                      0867
*   RDTPTR=OCWDRDTE;                /* RESTORE POINTER TO LINE RDTE  */
@RC00856 L     @10,RPHWEA(,PTRRPH)                                 0868
         L     RDTPTR,OCWDRDTE(,@10)                               0868
*   END CLGPSRCH;                   /* END GROUP SEARCH              */
@EL00006 DS    0H                                                  0869
@EF00006 DS    0H                                                  0869
@ER00006 BR    @14                                                 0869
*/********************************************************************/
*/* ROUTINE NAME: CLNSTAT3 - LOCATE SUBNODE NAME             @DM14008*/
*/*                          (SWITCHED LINE)                 @DM14008*/
*/*                                                          @DM14008*/
*/* FUNCTION: CALLED BY CLNSTAT1 TO LOCATE NAME OF DIALED-IN @DM14008*/
*/*          TERMINAL (IF LINE IS A PORT) OR PHYSICAL UNIT   @DM14008*/
*/*          WITH ITS SUBORDINATE LOGICAL UNITS (IF LINE IS  @DM14008*/
*/*          A SWITCHED SDLC LINK).  FOR EACH LU PROVIDES AN @DM14008*/
*/*          INDICATION IF A CLEAR, UNBIND, OR BIND IS IN    @DM14008*/
*/*          PROGRESS.                                       @DM14008*/
*/*                                                          @DM14008*/
*/* INPUT:  LINEPTR  (R1) - POINTER TO THE USER BUFFER       @DM14008*/
*/*         RDTPTR   (R4) - POINTER TO THE RDT               @DM14008*/
*/*         NEEDSIZE      - SIZE OF LINE RDT                 @DM14008*/
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE      @DM14008*/
*/*                                                          @DM14008*/
*/* OUTPUT:  TERMINAL, PHYS UNIT, LOGICAL UNIT NAME(S) MOVED @DM14008*/
*/*          TO USER BUFFER ALONG WITH SETTING OF NODE TYPE  @DM14008*/
*/*          FLAG, STATUS FLAG, AND INDICATION IF BIND,      @DM14008*/
*/*          UNBIND, OR CLEAR IS IN PROGRESS AGAINST AN LU.  @DM14008*/
*/*          RDTPTR    (R4) - POINTER TO LINE RDTE           @DM14008*/
*/*          NEEDSIZE       - SIZE OF LINE RDTE PLUS DATA    @DM14008*/
*/*                           ADDED HERE                     @DM14008*/
*/*          RC        (R8) - X'0B' IF VSETLCK FAILED IN     @DM14008*/
*/*                           CSETSTLU                       @DM14008*/
*/*          C06R14   (R14) - NSI ADDR                       @DM14008*/
*/*                                                          @DM14008*/
*/* ROUTINES CALLED:  CSETSTLU - EXAMINE FMCB FOR BIND,      @DM14008*/
*/*                              UNBIND, OR CLEAR IN PROGRESS@DM14008*/
*/*                                                          @DM14008*/
*/* MACROS USED:  VSETLCK - TO RELEASE LOCAL MEMORY LOCK     @DM14008*/
*/*                         BEFORE ISSUING CIDCTL            @DM14008*/
*/*               CIDCTL  - TO OBTAIN PTR TO PU RDTE         @DM14008*/
*/********************************************************************/
*                                                                  0870
*CLNSTAT3: PROC OPTIONS(NOSAVEAREA,DONTSAVE);              /*@DM14008*/
CLNSTAT3 DS    0H                                                  0871
*RETAPA3=C06R14;                    /* SAVE NSI ADDR         @DM14008*/
         L     @10,RPHWEA(,PTRRPH)                                 0871
         ST    C06R14,RETAPA3+552(,@10)                            0871
*RFY C06R14 UNRSTD;                                        /*@DM14008*/
*LINETN='        ';                 /* INIT WITH BLANKS      @DM14008*/
         MVC   LINETN(8,LINEPTR),@CC04841                          0873
*LINESW=ON;                         /* LINE IS SWITCHED      @DM14008*/
         OI    LINESW(LINEPTR),B'00001000'                         0874
*IF RLNRATRN=ON                     /* IF SDLC               @DM14008*/
*  THEN DO;                                                /*@DM14008*/
         TM    RLNRATRN(RDTPTR),B'00000010'                        0875
         BNO   @RF00875                                            0875
*    IF RLNINUSE=OFF                /* SEE IF ITS IN USE     @DM14008*/
*    THEN;                          /* NOTHING TO GET IF NOT @DM14008*/
         TM    RLNINUSE(RDTPTR),B'01000000'                        0877
         BZ    @RT00877                                            0877
*    ELSE                           /* OTHERWISE LOOK AT     @DM14008*/
*    DO;                            /* SWITCHED SUBAREA      @DM14008*/
*/* LOCKING REQUIREMENT:                                     @DM14008*/
*      C06R13=C06R13+TWELVE;        /* BUMP SAVEAREA PTR     @DM14008*/
         AH    C06R13,@CH00032                                     0880
*      C06REL6:                                                    0881
*/*VSETLCK  (C06R15,RELEASE,LOCAL,(LOCAL,ISTSQC06(C06OBT)))*/      0881
* DO;                                                              0881
C06REL6  DS    0H                                                  0882
*                                        /*DECLARE AND RESTRICT REGS */
*                                        /*   2,10,11,12,13,14, AND 15
**/                                                                0882
* RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) RSTD;     0882
*                                        /*SAVE REGS 2 AND 10 THRU 14*/
*        GEN REFS(GPR02F,GPR10F,GPR11F,GPR12F,GPR14F,GPR13P);      0883
*                                                                  0883
         STM   GPR10F,GPR12F,0(GPR13P)
         ST    GPR14F,12(GPR13P)
         ST    GPR02F,16(GPR13P)
*                                        /*INVOKE MODESET TO CHANGE  */
*                                        /*PSW PROTECTION KEY TO 0   */
*        GEN SETS(2);                                              0884
*                                                                  0884
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
*   GPR10P=GPR13P;                       /*PUT SAVE AREA ADDR IN R 10*/
         LR    GPR10P,GPR13P                                       0885
*                                        /*INVOKE OS/VS SETLOCK MACRO*/
*   GEN REFS(GPR13P,PSALITA,FLC) SETS(GPR12F);                     0886
         SETLOCK RELEASE,TYPE=LOCAL,                                   *
               RELATED=(LOCAL,ISTSQC06(C06OBT))
*   GPR15P=GPR13P;                       /*PUT RETURN CODE IN R 15 */
         LR    GPR15P,GPR13P                                       0887
*                                        /*INVOKE MODESET MACRO TO   */
*     DO;                                /*RESTORE PSW PROTECTION KEY*/
*        GEN SETS(2);                                              0889
         MODESET KEYADDR=(2),WORKREG=2
*     END;                               /* RESTORE REGISTERS        */
*   GEN REFS(GPR10F,GPR13P) SETS(GPR10F,GPR11F,                    0891
*   GPR12F,GPR13F,GPR14F,GPR02F);                                  0891
         LR    GPR13F,GPR10F
         LM    GPR10F,GPR12F,0(GPR13P)
         L     GPR14F,12(GPR13P)
         L     GPR02F,16(GPR13P)
*   IF GPR15F=4 THEN GPR15F=0;                                     0892
         CH    GPR15F,@CH00055                                     0892
         BNE   @RF00892                                            0892
         SLR   GPR15F,GPR15F                                       0893
*   C06R15=GPR15F;                       /*PUT RETURN CODE IN RCREG*/
*                                                                  0894
@RF00892 DS    0H                                                  0895
* RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) UNRSTD;   0895
* END;  /*VSETLCK */  /*@DM14008*/                                 0896
*      C06R13=C06R13-TWELVE;        /* UNBUMP                @DM14008*/
         SH    C06R13,@CH00032                                     0897
*      RFY (C06R2,C06R1) RSTD;                             /*@DM14008*/
*      RDTPTR=RDTPTR+RPRELEN;       /* POINT TO PUX RDTE     @DM14008*/
         AH    RDTPTR,RPRELEN(,RDTPTR)                             0899
*      C06R2=ZERO×RPRSWDAF;         /* DAF FROM PUX RDTE     @DM14008*/
         SLR   C06R2,C06R2                                         0900
         ICM   C06R2,3,RPRSWDAF(RDTPTR)                            0900
*      RETSAV1=LINEPTR;             /* SAVE REG1 ACROSS MACRO@DM14008*/
         L     @14,RPHWEA(,PTRRPH)                                 0901
         ST    LINEPTR,RETSAV1+552(,@14)                           0901
*      C06R1=PTRRPH;                /* NEED RPH PTR          @DM14008*/
*                                                                  0902
         LR    C06R1,PTRRPH                                        0902
*      DO; /* CIDCTL(FIND)  */                                     0903
*                                                                  0903
*      RFY (EMCR2,EMCR3) RSTD;                                     0904
*        GEN SETS(RPHWORK)                                         0905
*        (STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH);      0905
         STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH
*        EMCR3 = '00'X; /*CLEAR EXTRA BITS*/                       0906
         SLR   EMCR3,EMCR3                                         0906
*        EMCR3 = '01'X; /*INDICATE SHARED LOCK*/                   0907
         LA    EMCR3,1                                             0907
*        CALL ATCLCPTR->ATCCDFND->ISTSDCCF; /*PROCESS REQUEST*/    0908
*                                                                  0908
         L     @10,ATCLCPTR                                        0908
         L     @15,ATCCDFND(,@10)                                  0908
         BALR  @14,@15                                             0908
*      RFY (EMCR2,EMCR3) UNRSTD;                                   0909
*      END; /*CIDCTL*/                                      /*@DM14008*
*      LINEPTR=RETSAV1;             /* RESTORE AFTER MACRO   @DM14008*/
         L     @14,RPHWEA(,PTRRPH)                                 0911
         L     LINEPTR,RETSAV1+552(,@14)                           0911
*      RFY C06R0 RSTD;                                     /*@DM14008*/
*      C06R2=C06R0;           /* REG2 IS SAFE ACROSS C06VALA @DM14008*/
         LR    C06R2,C06R0                                         0913
*      RFY (C06R0,C06R1) UNRSTD;                           /*@DM14008*/
*      IF C06R15^=ZERO              /* CHECK CIDCTL R.C.     @DM14008*/
*        THEN C06R2=C06R2×C06HIBIT; /* SAVE RESULT FOR LATER @DM14008*/
         LTR   C06R15,C06R15                                       0915
         BZ    @RF00915                                            0915
         O     C06R2,@CF03382                                      0916
*        ELSE C06R2=C06R2&C06BTOFF; /* SUCCESS               @DM14008*/
         B     @RC00915                                            0917
@RF00915 N     C06R2,@CF03380                                      0917
*      RETSAV1=LINEPTR;             /* SAVE REG1 ACROSS VALA @DM14008*/
@RC00915 L     @14,RPHWEA(,PTRRPH)                                 0918
         ST    LINEPTR,RETSAV1+552(,@14)                           0918
*      CALL C06VALA;                /*GET LCL MEMRY LOCK BACK@DM14008*/
         BAL   @14,C06VALA                                         0919
*      LINEPTR=RETSAV1;             /* RESTORE REG1          @DM14008*/
         L     @14,RPHWEA(,PTRRPH)                                 0920
         L     LINEPTR,RETSAV1+552(,@14)                           0920
*      IF (C06R2&C06HIBIT)^=ZERO    /* CIDCTL UNSUCCESSFUL   @DM14008*/
*        THEN;                      /* DO NOTHING IF CIDCTL  @DM14008*/
         LR    @14,C06R2                                           0921
         N     @14,@CF03382                                        0921
         LTR   @14,@14                                             0921
         BNZ   @RT00921                                            0921
*                                   /* BAD                   @DM14008*/
*        ELSE                       /* OTHERWISE GET INFO    @DM14008*/
*        DO;                        /* ABOUT NODES IN SUBAREA@DM14008*/
*          IF RC=ZERO               /* VSETLCK REOBTAINED OK @DM14008*/
*            THEN DO;               /* CONTINUE PROCESSING   @DM14008*/
         LTR   RC,RC                                               0924
         BNZ   @RF00924                                            0924
*              RDTPTR=C06R2->NCBRDTE;/* PU RDTE POINTER      @DM14008*/
         L     RDTPTR,NCBRDTE(,C06R2)                              0926
*              COUNT=RCCCTELU;      /*COUNT OF LU'S UNDER PU @DM14008*/
         LH    COUNT,RCCCTELU(,RDTPTR)                             0927
*              NEEDSIZE=NEEDSIZE+9*COUNT; /* ADJUSTMENT      @DM14008*/
         LA    @14,552                                             0928
         AL    @14,RPHWEA(,PTRRPH)                                 0928
         LR    @10,COUNT                                           0928
         MH    @10,@CH00033                                        0928
         AL    @10,NEEDSIZE(,@14)                                  0928
         ST    @10,NEEDSIZE(,@14)                                  0928
*              LINETN=RPRNAME;      /* PU NAME FOR ISTCFCDP  @DM14008*/
         MVC   LINETN(8,LINEPTR),RPRNAME(RDTPTR)                   0929
*              LINECL=ON;           /* CLUSTER FLAG FOR CFCDP */   0930
         OI    LINECL(LINEPTR),B'00100000'                         0930
*              IF RPRONLIN=ON       /* ACTIVE?               @DM14008*/
*                THEN LINETATC=ON;  /* TELL ISTCFCDP         @DM14008*/
         TM    RPRONLIN(RDTPTR),B'00001000'                        0931
         BNO   @RF00931                                            0931
         OI    LINETATC(LINEPTR),B'10000000'                       0932
*                ELSE;              /* NO,LEAVE FLAG OFF     @DM14008*/
@RF00931 DS    0H                                                  0934
*              IF RPRACTP=ON        /* IF ACTIVATE IN PROG   @XA10138*/
*                THEN LINBIP=ON;    /*  SET THE FIRST BIT    @XA10138*/
         TM    RPRACTP(RDTPTR),B'00010000'                         0934
         BNO   @RF00934                                            0934
         OI    LINBIP(LINEPTR),B'00000010'                         0935
*                ELSE;                                     /*@XA10138*/
@RF00934 DS    0H                                                  0937
*              IF RPRCONP=ON        /* IF CONTACT IN PROG    @XA10138*/
*                THEN LINCUIP=ON;   /*  SET SECOND BIT       @XA10138*/
         TM    RPRCONP(RDTPTR),B'00001000'                         0937
         BNO   @RF00937                                            0937
         OI    LINCUIP(LINEPTR),B'00000001'                        0938
*                ELSE;                                     /*@XA10138*/
@RF00937 DS    0H                                                  0940
*              END;                 /* END GOOD C06VALA LEG  @DM14008*/
*            ELSE;                  /* DO NOTHING IF C06VALA @DM14008*/
@RF00924 DS    0H                                                  0942
*                                   /* BAD                   @DM14008*/
*          C06R2=OCWDRDTE+(OCWDRDTE->RPRELEN);/*PUX PTR AGAIN@DM14008*/
         L     @14,RPHWEA(,PTRRPH)                                 0942
         L     @10,OCWDRDTE(,@14)                                  0942
         LH    C06R2,RPRELEN(,@10)                                 0942
         ALR   C06R2,@10                                           0942
*          C06R2=ZERO×(C06R2->RPRSWDAF); /* PICK UP CID      @DM14008*/
         SLR   @10,@10                                             0943
         ICM   @10,3,RPRSWDAF(C06R2)                               0943
         LR    C06R2,@10                                           0943
*          RETSAV1=LINEPTR;         /* SAVE ACROSS MACRO     @DM14008*/
         ST    LINEPTR,RETSAV1+552(,@14)                           0944
*          C06R1=PTRRPH;            /* RPH PTR FOR MACRO     @DM14008*/
*                                                                  0945
         LR    C06R1,PTRRPH                                        0945
*          DO; /* CIDCTL(FINISH)  */                               0946
*                                                                  0946
*          RFY (EMCR2,EMCR3) RSTD;                                 0947
*            GEN SETS(RPHWORK)                                     0948
*        (STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH);      0948
         STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH
*            EMCR3 = '00'X; /*CLEAR EXTRA BITS*/                   0949
         SLR   EMCR3,EMCR3                                         0949
*            CALL ATCLCPTR->ATCCDFIN->ISTSDCCR; /*PROCESS REQUEST*/
*                                                                  0950
         L     @10,ATCLCPTR                                        0950
         L     @15,ATCCDFIN(,@10)                                  0950
         BALR  @14,@15                                             0950
*          RFY (EMCR2,EMCR3) UNRSTD;                               0951
*          END; /*CIDCTL*/                                 /*@DM14008*/
*          LINEPTR=RETSAV1;         /* RESTORE REG1          @DM14008*/
         L     @14,RPHWEA(,PTRRPH)                                 0953
         L     LINEPTR,RETSAV1+552(,@14)                           0953
*          DO WHILE RC=ZERO&  /* MAKE SURE NO VSETLCK FAILED @DM14008*/
*              COUNT>ZERO;          /* LOOP THRU LU'S FOR PU @DM14008*/
         B     @DE00954                                            0954
@DL00954 DS    0H                                                  0955
*            RDTPTR=RDTPTR+RPRELEN;/* POINT TO NEXT RDTE     @DM14008*/
         AH    RDTPTR,RPRELEN(,RDTPTR)                             0955
*            COUNT=COUNT-1;         /* DECREMENT COUNT       @DM14008*/
         BCTR  COUNT,0                                             0956
*            LINEPTR=LINEPTR+       /*INCREMENT USER AREA PTR@DM14008*/
*                    LENGTH(LINETN)+/* BY NAME LENGTH        @DM14008*/
*                    LENGTH(LINETATC); /* PLUS FLAGS LENGTH  @DM14008*/
         AH    LINEPTR,@CH00033                                    0957
*            LINETN=RPRNAME;        /* LOGICAL UNIT NAME     @DM14008*/
         MVC   LINETN(8,LINEPTR),RPRNAME(RDTPTR)                   0958
*            LINETR=ON;             /* TERMINAL-TYPE NODE    @DM14008*/
         OI    LINETR(LINEPTR),B'00010000'                         0959
*            IF RPRONLIN=ON         /* IF ACTIVE             @DM14008*/
*              THEN DO;                                    /*@DM14008*/
         TM    RPRONLIN(RDTPTR),B'00001000'                        0960
         BNO   @RF00960                                            0960
*                LINETATC=ON;       /* TELL ISTCFCDP         @DM14008*/
         OI    LINETATC(LINEPTR),B'10000000'                       0962
*                CALL CSETSTLU;     /* CHECK FMCB            @DM14008*/
         BAL   @14,CSETSTLU                                        0963
*                IF RC^=ZERO        /* VSETLCK OKAY?         @DM14008*/
*                  THEN;            /* NO, CEASE PROCESSING  @DM14008*/
         LTR   RC,RC                                               0964
         BNZ   @RT00964                                            0964
*                  ELSE DO;         /* YES, CHECK RESULTS    @DM14008*/
*                    IF C06R15=FOUR /* BIND IN PROGRESS?     @DM14008*/
*                      THEN LINBIP=ON;      /*YES,TELL CFCDP @DM14008*/
         CH    C06R15,@CH00055                                     0967
         BNE   @RF00967                                            0967
         OI    LINBIP(LINEPTR),B'00000010'                         0968
*                      ELSE;                               /*@DM14008*/
@RF00967 DS    0H                                                  0970
*                    IF C06R15=8    /* CLEAR,UNBIND I.P?     @DM14008*/
*                      THEN LINCUIP=ON;     /* TELL ISTCFCDP @DM14008*/
         CH    C06R15,@CH00061                                     0970
         BNE   @RF00970                                            0970
         OI    LINCUIP(LINEPTR),B'00000001'                        0971
*                      ELSE;                               /*@DM14008*/
@RF00970 DS    0H                                                  0973
*                    END;           /* END GOOD CSETSTLU LEG @DM14008*/
*                END;               /* END ACT LU LEG        @DM14008*/
*              ELSE;                /* FLAGS OFF IF INACT    @DM14008*/
@RF00960 DS    0H                                                  0976
*            /* CHECK ACTIVATE WHETHER ACTIVE OR NOT:        @XA10138*/
*            IF RPRACTP=ON          /* SSCP MAINTAINS BIT    @XA10138*/
*              THEN LINSUBST=LINACTLU; /* SET BOTH BITS      @XA10138*/
@RC00960 TM    RPRACTP(RDTPTR),B'00010000'                         0976
         BNO   @RF00976                                            0976
         OI    LINSUBST(LINEPTR),B'00000011'                       0977
*              ELSE;                                       /*@XA10138*/
@RF00976 DS    0H                                                  0979
*            END;                   /* END DO GROUP          @DM14008*/
@DE00954 SLR   @14,@14                                             0979
         CR    RC,@14                                              0979
         BNE   @DC00954                                            0979
         CR    COUNT,@14                                           0979
         BH    @DL00954                                            0979
@DC00954 DS    0H                                                  0980
*          END;                     /* END GOOD CIDCTL LEG   @DM14008*/
*        END;                       /* END RLNINUSE LEG      @DM14008*/
*      END;                         /* END SW SDLC LEG       @DM14008*/
*  ELSE DO;                         /* NON-SDLC(PORT) LEG    @DM14008*/
         B     @RC00875                                            0983
@RF00875 DS    0H                                                  0984
*    IF RLNPORT=ON&                 /* CHECK PORT FLAG       @DM14008*/
*        RPTATERM^=ZERO             /* SOMEBODY IS CONNECTED @DM14008*/
*      THEN DO;                                            /*@DM14008*/
         TM    RLNPORT(RDTPTR),B'00010000'                         0984
         BNO   @RF00984                                            0984
         L     @14,RPTATERM(,RDTPTR)                               0984
         LTR   @14,@14                                             0984
         BZ    @RF00984                                            0984
*        LINETN=RPTATERM->RPRNAME;  /* GET HIS NAME          @DM14008*/
         MVC   LINETN(8,LINEPTR),RPRNAME(@14)                      0986
*        LINETATC=ON;               /* HE'S ACTIVE           @DM14008*/
         OI    LINETATC(LINEPTR),B'10000000'                       0987
*        END;                       /* END CONNECTED LEG     @DM14008*/
*      ELSE;                        /* NOBODY THERE TO LIST  @DM14008*/
@RF00984 DS    0H                                                  0990
*    END;                           /* END NON-SDLC LEG      @DM14008*/
*RFY C06R14 RSTD;                                          /*@DM14008*/
@RC00875 DS    0H                                                  0992
*C06R14=RETAPA3;                    /* RESTORE RETURN REG    @DM14008*/
         L     @10,RPHWEA(,PTRRPH)                                 0992
         L     C06R14,RETAPA3+552(,@10)                            0992
*END CLNSTAT3;                                             /*@DM14008*/
@EL00007 DS    0H                                                  0993
@EF00007 DS    0H                                                  0993
@ER00007 BR    @14                                                 0993
*                                                                  0994
*/********************************************************************/
*/* ROUTINE NAME: CLNSTAT5 - LOCATE TERMINAL OR LOGICAL UNIT NAMES   */
*/*                          (LEASED LINE)                           */
*/*                                                                  */
*/* FUNCTION: CALLED BY CLNSTAT1 TO LOCATE AND MOVE TERMINAL,        */
*/*           COMPONENT, CLUSTER CONTROLLER, COMPONENT CLUSTER,      */
*/*           INTERMEDIATE NODE (WHICH POINTS TO A REMOTE 370X), OR  */
*/*           LOGICAL UNIT NAMES TO THE USER-SUPPLIED BUFFER.  A     */
*/*           COUNT OF THE NUMBER OF TERMINALS AND/OR LOGICAL UNITS  */
*/*           CONNECTED TO THE LINE IS MAINTAINED AND THE SIZE       */
*/*           RETURNED TO THE USER ADJUSTED ACCORDINGLY.  THE ACTIVE */
*/*           BIT IS SET ON OR OFF TO DENOTE THE STATUS OF EACH      */
*/*           TERMINAL OR LOGICAL UNIT.  FOR AN INTERMEDIATE NODE,   */
*/*           THE ACTIVE FLAG IS SET, AND THE SYMBOLIC NAME OF THE   */
*/*           REMOTE 370X IS RETURNED.                               */
*/*           ADDITIONALLY, FOR LOGICAL UNITS THERE ARE      @X50BHTQ*/
*/*           FLAGS SET IF CLEAR, UNBIND, BIND, OR ACTIVATE  @X50BHTQ*/
*/*           IS IN PROGRESS.  FOR PHYSICAL UNITS FLAGS ARE  @XA10138*/
*/*           SET TO INDICATE ACTIVATE OR CONTACT IN         @XA10138*/
*/*           PROGRESS.                                      @X50BHTQ*/
*/*                                                                  */
*/* INPUT:  LINEPTR  (R1) - POINTER TO THE USER SPECIFIED BUFFER     */
*/*         RDTPTR   (R4) - POINTER TO THE RDT                       */
*/*         NEEDSIZE      - SIZE OF LINE RDT                 @D32CKTQ*/
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (CLNSTAT1)   */
*/*                                                                  */
*/* OUTPUT: TERMINAL, LOGICAL UNIT, COMPONENT, COMPONENT CLUSTER,    */
*/*         CLUSTER CONTROLLER, AND/OR INTERMEDIATE NODES NAME(S)    */
*/*         MOVED TO USER BUFFER, ACTIVE BIT SET ON, FOR INTER-      */
*/*         MEDIATE NODES, INTERMEDIATE NETWORK NODE FLAG SET ON     */
*/*         AND SYMBOLIC NAME OF COMMUNICATIONS CONTROLLER (370X)    */
*/*         MOVED TO USER BUFFER.                                    */
*/*         ALSO, FOR EACH LOGICAL UNIT, AN INDICATION IF    @X50BHTQ*/
*/*         THERE IS A BIND, UNBIND, OR CLEAR IN PROGRESS.   @X50BHTQ*/
*/*         RDTPTR   (R4) - POINTER TO LINE RDT                      */
*/*         RC       (R8) - X'0B' IF CSETSTLU VSETLCK FAILED @X50BHTQ*/
*/*         NEEDSIZE      - SIZE OF LINE RDT + DATA ADDED HERE       */
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (CLNSTAT1)   */
*/*                                                                  */
*/* ROUTINES CALLED: CSETSTLU - EXAMINE FMCB FOR EACH LU     @X50BHTQ*/
*/*                             TO SEE IF BIND, UNBIND, OR   @X50BHTQ*/
*/*                             CLEAR IS IN PROGRESS         @X50BHTQ*/
*/*                                                                  */
*/* MACROS USED: NONE                                                */
*/********************************************************************/
*                                                                  0994
*CLNSTAT5:                                                         0994
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);                             0994
CLNSTAT5 DS    0H                                                  0995
*   RFY C06LOOP RSTD;                                      /*@DM14008*/
*   RETAPA1=C06R14;                 /* SAVE RETURN REGISTER  @X50BHTQ*/
         L     @10,RPHWEA(,PTRRPH)                                 0996
         ST    C06R14,RETAPA1+552(,@10)                            0996
*   RFY C06R14 UNRSTD;                                     /*@X50BHTQ*/
*   COUNT=0;                        /* INITIALIZE ENTRY COUNTER      */
         SLR   COUNT,COUNT                                         0998
*   C06LOOP=ONREG;                  /* INITIALIZE LOOP CONTROL       */
         LA    C06LOOP,1                                           0999
*   DO WHILE C06LOOP=ONREG;         /*   AND BEGIN SEARCH LOOP       */
         B     @DE01000                                            1000
@DL01000 DS    0H                                                  1001
*     RDTPTR=RDTPTR+RPRELEN;        /* UPDATE TO NXT RN ENTRY        */
         AH    RDTPTR,RPRELEN(,RDTPTR)                             1001
*     IF                                                           1002
*      (RPRENTRY = RPRENTTR &       /* IF RDTE IS FOR A TERMINAL AND */
*         RTRCTECM=0)×              /*   THERE ARE NO COMPONENTS, OR */
*       RPRENTRY = RPRENTLU ×       /* IT IS FOR A LOGICAL UNIT, OR  */
*       RPRENTRY = RPRENTCM ×       /* FOR A COMPONENT, OR           */
*       RPRENTRY = RPRENTCL ×       /* FOR A COMPONENT CLUSTER, OR   */
*       RPRENTRY = RPRENTCC ×       /* FOR A CLUSTER CONTROLLER, OR  */
*       RPRENTRY = RPRENTIN         /* FOR AN INTERMEDIATE NODE      */
*     THEN DO;                                                     1002
         CLI   RPRENTRY(RDTPTR),X'80'                              1002
         BNE   @GL00028                                            1002
         ICM   @14,3,RTRCTECM(RDTPTR)                              1002
         BZ    @RT01002                                            1002
@GL00028 CLI   RPRENTRY(RDTPTR),X'81'                              1002
         BE    @RT01002                                            1002
         CLI   RPRENTRY(RDTPTR),X'90'                              1002
         BE    @RT01002                                            1002
         CLI   RPRENTRY(RDTPTR),X'70'                              1002
         BE    @RT01002                                            1002
         CLI   RPRENTRY(RDTPTR),X'71'                              1002
         BE    @RT01002                                            1002
         CLI   RPRENTRY(RDTPTR),X'82'                              1002
         BNE   @RF01002                                            1002
@RT01002 DS    0H                                                  1003
*            COUNT=COUNT+1;         /* INCREMENT ENTRY COUNTER TO  1004
*                                      CALCULATE NEEDED SIZE AND     */
         LA    @14,1                                               1004
         ALR   COUNT,@14                                           1004
*            LINETN=RPRNAME;        /* MOVE SYMBOLIC NAME TO USERAREA*/
         MVC   LINETN(8,LINEPTR),RPRNAME(RDTPTR)                   1005
*            IF RPRENTRY=RPRENTIN   /* RDTE IS FOR AN INTERMEDIATE   */
*              THEN DO;             /*   NODE                        */
         CLI   RPRENTRY(RDTPTR),X'82'                              1006
         BNE   @RF01006                                            1006
*                LINEINTN=ON;       /* SET INTERMEDIATE NODE FLAG    */
         OI    LINEINTN(LINEPTR),B'00000100'                       1008
*                COUNT=COUNT+1;     /* INCREMENT ENTRY COUNTER     1009
*                                      CALCULATE NEEDED SIZE         */
         ALR   COUNT,@14                                           1009
*                IF RINREMOT^=0     /* INTERMEDIATE NODE IS ACTIVE   */
*                  THEN DO;                                        1010
         L     @14,RINREMOT(,RDTPTR)                               1010
         LTR   @14,@14                                             1010
         BZ    @RF01010                                            1010
*                     LINETATC=ON;  /* SET ACTIVE FLAG ON            */
         OI    LINETATC(LINEPTR),B'10000000'                       1012
*                     IF RINREMOT->RPRACTP=ON /* ACTIVATE,   @XA10138*/
*                       THEN LINBIP=ON; /* RRN HAS THE FLAG  @XA10138*/
         TM    RPRACTP(@14),B'00010000'                            1013
         BNO   @RF01013                                            1013
         OI    LINBIP(LINEPTR),B'00000010'                         1014
*                       ELSE;        /*                      @XA10138*/
@RF01013 DS    0H                                                  1016
*                     IF RPRCONP=ON  /* CONTACT BIT IS IN THE@XA10138*/
*                       THEN LINCUIP=ON;         /* RIN RDTE @XA10138*/
         TM    RPRCONP(RDTPTR),B'00001000'                         1016
         BNO   @RF01016                                            1016
         OI    LINCUIP(LINEPTR),B'00000001'                        1017
*                       ELSE;                              /*@XA10138*/
@RF01016 DS    0H                                                  1019
*                     LINEPTR=LINEPTR+ /* UPDATE AREA POINTER BY     */
*                             LENGTH(LINETN)+ /* ENTRY LENGTH        */
*                             LENGTH(LINETATC);                    1019
         AH    LINEPTR,@CH00033                                    1019
*                     LINETN=       /* MOVE COMMUNICATION CONTROLLER */
*                       RINREMOT-> RPRNAME; /* SYMBOLIC NAME         */
         L     @14,RINREMOT(,RDTPTR)                               1020
         MVC   LINETN(8,LINEPTR),RPRNAME(@14)                      1020
*                   END;                                           1021
*                ELSE DO;                                          1022
         B     @RC01010                                            1022
@RF01010 DS    0H                                                  1023
*                     LINEPTR=LINEPTR+ /* UPDATE AREA POINTER BY     */
*                             LENGTH(LINETN)+   /* ENTRY LENGTH      */
*                             LENGTH(LINETATC);                    1023
         AH    LINEPTR,@CH00033                                    1023
*                     LINETN='        '; /* MOVE BLANKS INTO NAME  1024
*                                           FIELD IN USER AREA      */
         MVC   LINETN(8,LINEPTR),@CC04841                          1024
*                 END;                                             1025
*           END;                                                   1026
*       ELSE DO;                    /* NOT AN INTERMEDIATE NODE      */
         B     @RC01006                                            1027
@RF01006 DS    0H                                                  1028
*          IF RPRONLIN=ON           /* IF THIS DEVICE IS ACTIVE      */
*             THEN LINETATC=ON;     /*     SET ACTIVE FLAG ON        */
         TM    RPRONLIN(RDTPTR),B'00001000'                        1028
         BNO   @RF01028                                            1028
         OI    LINETATC(LINEPTR),B'10000000'                       1029
*          ELSE;                    /* DEVICE IS INACTIVE            */
@RF01028 DS    0H                                                  1031
*          IF RPRENTRY = RPRENTCC×  /* IF RDTE IS FOR A COMPONENT    */
*             RPRENTRY = RPRENTCL   /* CLUSTER OR CLUSTER CONTROLLER */
*          THEN LINECL = ON;        /* SET CLUSTER NAME FLAG         */
         CLI   RPRENTRY(RDTPTR),X'71'                              1031
         BE    @RT01031                                            1031
         CLI   RPRENTRY(RDTPTR),X'70'                              1031
         BNE   @RF01031                                            1031
@RT01031 DS    0H                                                  1032
         OI    LINECL(LINEPTR),B'00100000'                         1032
*          ELSE LINETR = ON;        /* SET TERMINAL NAME FLAG        */
         B     @RC01031                                            1033
@RF01031 OI    LINETR(LINEPTR),B'00010000'                         1033
*          IF RPRONLIN=ON&          /* IF NODE IS ACTIVE     @X50BHTQ*/
*              RPRENTRY=RPRENTLU    /* LOGICAL UNIT          @X50BHTQ*/
*            THEN                   /* CHECK FOR CLEAR, BIND @X50BHTQ*/
@RC01031 TM    RPRONLIN(RDTPTR),B'00001000'                        1034
         BNO   @RF01034                                            1034
         CLI   RPRENTRY(RDTPTR),X'81'                              1034
         BNE   @RF01034                                            1034
*            DO;                    /* OR UNBIND IN PROGRESS @X50BHTQ*/
*              CALL CSETSTLU;       /*CALL SUBR TO CHECK FMCB@X50BHTQ*/
         BAL   @14,CSETSTLU                                        1036
*              IF RC=ZERO           /* CHECK FOR VSETLCK FAIL@X50BHTQ*/
*                THEN               /* (VS2 WORRY ONLY)      @X50BHTQ*/
         LTR   RC,RC                                               1037
         BNZ   @RF01037                                            1037
*                DO;                                       /*@X50BHTQ*/
*                  IF C06R15=FOUR   /* BIND IN PROGRESS      @X50BHTQ*/
*                    THEN LINBIP=ON;/* TELL ISTCFCDP         @XA10138*/
         CH    C06R15,@CH00055                                     1039
         BNE   @RF01039                                            1039
         OI    LINBIP(LINEPTR),B'00000010'                         1040
*                    ELSE;                                 /*@X50BHTQ*/
@RF01039 DS    0H                                                  1042
*                  IF C06R15=8      /* CLEAR OR UNBIND I.P.  @X50BHTQ*/
*                    THEN LINCUIP=ON; /* TELL ISTCFCDP       @XA10138*/
         CH    C06R15,@CH00061                                     1042
         BNE   @RF01042                                            1042
         OI    LINCUIP(LINEPTR),B'00000001'                        1043
*                    ELSE;                                 /*@X50BHTQ*/
@RF01042 DS    0H                                                  1045
*                  END;             /* END RC=0 LEG          @X50BHTQ*/
*                ELSE;                                     /*@X50BHTQ*/
@RF01037 DS    0H                                                  1047
*              END;                 /* END ACTIVE LU LEG     @X50BHTQ*/
*            ELSE;                                         /*@X50BHTQ*/
@RF01034 DS    0H                                                  1049
*          IF RPRENTRY=RPRENTLU     /* FOR LOGICAL UNIT      @XA10138*/
*            THEN                   /* CHECK ACTIVATE        @XA10138*/
         CLI   RPRENTRY(RDTPTR),X'81'                              1049
         BNE   @RF01049                                            1049
*              IF RPRACTP=ON        /* SSCP KEEPS RDTE FLAG  @XA10138*/
*                THEN LINSUBST=LINACTLU; /* SET TWO BITS     @XA10138*/
         TM    RPRACTP(RDTPTR),B'00010000'                         1050
         BNO   @RF01050                                            1050
         OI    LINSUBST(LINEPTR),B'00000011'                       1051
*                ELSE;                                     /*@XA10138*/
@RF01050 DS    0H                                                  1053
*            ELSE                   /* FOR PHYS UNIT         @XA10138*/
*              IF RPRENTRY=RPRENTCC                        /*@XA10138*/
*                THEN               /* CHECK ACTIVATE        @XA10138*/
         B     @RC01049                                            1053
@RF01049 CLI   RPRENTRY(RDTPTR),X'71'                              1053
         BNE   @RF01053                                            1053
*                  IF RPRACTP=ON                           /*@XA10138*/
*                    THEN LINBIP=ON;/* BIT FOR CFCDP         @XA10138*/
         TM    RPRACTP(RDTPTR),B'00010000'                         1054
         BNO   @RF01054                                            1054
         OI    LINBIP(LINEPTR),B'00000010'                         1055
*                    ELSE           /* NO, CHECK FOR CONTACT @XA10138*/
*                      IF RPRCONP=ON                       /*@XA10138*/
*                        THEN LINCUIP=ON; /* FOR CFCDP       @XA10138*/
         B     @RC01054                                            1056
@RF01054 TM    RPRCONP(RDTPTR),B'00001000'                         1056
         BNO   @RF01056                                            1056
         OI    LINCUIP(LINEPTR),B'00000001'                        1057
*                        ELSE;                                     1058
@RF01056 DS    0H                                                  1059
*                ELSE;              /* NOT PU: NO-OP         @XA10138*/
@RF01053 DS    0H                                                  1060
*        END;                                                      1060
@RC01053 DS    0H                                                  1060
@RC01049 DS    0H                                                  1061
*      LINEPTR=LINEPTR+             /* UPDATE AREA POINTER BY        */
*          LENGTH(LINETN)+LENGTH(LINETATC);   /* ENTRY LENGTH        */
@RC01006 AH    LINEPTR,@CH00033                                    1061
*     END;                                                         1062
*     IF RPRENTRY<=RPRENTLN×        /* RPRENTRY INDICATES NEW LINE OR*/
*         RPRENTED=ON               /* THIS IS LAST RDTE IN SEGMENT  */
*       THEN                                                       1063
@RF01002 CLI   RPRENTRY(RDTPTR),X'50'                              1063
         BNH   @RT01063                                            1063
         TM    RPRENTED(RDTPTR),B'00000100'                        1063
         BNO   @RF01063                                            1063
@RT01063 DS    0H                                                  1064
*       C06LOOP=OFFREG;             /* RESET LOOP CONTROL TO EXIT    */
         SLR   C06LOOP,C06LOOP                                     1064
*   END;                            /* END DO-WHILE LOOP             */
@RF01063 DS    0H                                                  1065
@DE01000 LA    @14,1                                               1065
         CR    C06LOOP,@14                                         1065
         BE    @DL01000                                            1065
*   IF COUNT>1                      /* NAME AND FLAG DATA EXTENDS    */
*     THEN                          /*   PAST END OF ISTLINE DSECT   */
         CR    COUNT,@14                                           1066
         BNH   @RF01066                                            1066
*     NEEDSIZE=NEEDSIZE+            /*   AND NEEDED SIZE MUST BE     */
*         (9*(COUNT-1));            /*   INCREMENTED ACCORDINGLY     */
         LA    @14,552                                             1067
         AL    @14,RPHWEA(,PTRRPH)                                 1067
         LR    @10,COUNT                                           1067
         BCTR  @10,0                                               1067
         MH    @10,@CH00033                                        1067
         AL    @10,NEEDSIZE(,@14)                                  1067
         ST    @10,NEEDSIZE(,@14)                                  1067
*   ELSE                            /* DSECT NEED NOT BE INCREMENTED */
*     ;                                                            1068
@RF01066 DS    0H                                                  1069
*   RDTPTR=OCWDRDTE;                /* RESTORE POINTER TO LINE RDTE  */
         L     @14,RPHWEA(,PTRRPH)                                 1069
         L     RDTPTR,OCWDRDTE(,@14)                               1069
*   RFY                                                            1070
*    (C06LOOP,                                                     1070
*     COUNT,                                                       1070
*     LINEPTR)UNRSTD;                                              1070
*   RFY C06R14 RSTD;                                       /*@X50BHTQ*/
*   C06R14=RETAPA1;                 /* RESTORE NSI PTR       @X50BHTQ*/
         L     @06,RPHWEA(,PTRRPH)                                 1072
         L     C06R14,RETAPA1+552(,@06)                            1072
*   END CLNSTAT5;                                                  1073
@EL00008 DS    0H                                                  1073
@EF00008 DS    0H                                                  1073
@ER00008 BR    @14                                                 1073
*                                                                  1074
*/********************************************************************/
*/* ROUTINE NAME: CRNSTAT1 - 3705 (COMMUNICATIONS CONTROLLER) STATUS */
*/*                                                                  */
*/* FUNCTION: CALLED BY C06DISPA TO COLLECT INFORMATION FOR 3705     */
*/*           TYPE DISPLAY INQUIRIES.  FINDS REQUIRED SIZE OF BUFFER */
*/*           TO CONTAIN RDTE, TESTS TO SEE THAT USER-SUPPLIED AREA  */
*/*           IS LARGE ENOUGH TO CONTAIN IT, AND--IF IT IS--MOVES    */
*/*           THE RDTE INTO IT.  CALLS CRNSTAT2 (IN LINE) TO GET SIO */
*/*           AND TEMPORARY ERROR COUNTS.  CRNSTAT2 USES THE DAF     */
*/*           FROM THE RDTE TO DETERMINE THESE VALUES.  IF IT CANNOT */
*/*           SUCCESSFULLY GET THE NCB ADDRESS, CRNSTAT2 MOVES A     */
*/*           ZERO INTO THE SIO AND ERROR COUNT FIELDS.              */
*/*           ADDITIONALLY, CRNSTAT2 ALSO PROVIDES THE NAMES @D32CKTQ*/
*/*           OF THE LOCAL 370X AND CONNECTING LINE IN THE   @D32CKTQ*/
*/*           CASE OF REMOTE 370X.                           @D32CKTQ*/
*/*                                                                  */
*/* INPUT:  RDTPTR   (R4) - POINTER TO 3705 RDT                      */
*/*         REGDATA  (R5) - POINTER TO RETURN REG SAVE AREA          */
*/*         PTRRPH   (R6) - POINTER TO RPL HEADER (ISTRPH)           */
*/*         RPLPTR   (R7) - POINTER TO USER AREA CONTAINING BUFFER   */
*/*         RC       (R8) - RETURN CODE                              */
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (C06DISPA)   */
*/*                                                                  */
*/* OUTPUT: RC       (R8) - RETURN CODE (SET TO X'2C' IF CIDCTL      */
*/*                        (FIND) FAILS)                             */
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (C06DISPA)   */
*/*         NEEDSIZE      - SIZE OF BUFFER AREA REQUIRED     @D32CKTQ*/
*/*         IF RC=0, RDTE, SIO COUNT, AND TEMPORARY ERROR COUNT      */
*/*                  MOVED TO USER-SUPPLIED BUFFER                   */
*/*                                                                  */
*/* ROUTINES CALLED: C06VALA (FROM CRNSTAT2) - TO VALIDITY CHECK     */
*/*                          USER AREA AND SET LOCAL MEMORY LOCK     */
*/*                                                                  */
*/* MACROS USED: VSETLCK (IN CRNSTAT2) - TO RELEASE LOCAL MEMORY     */
*/*                      PRIOR TO LOCATING NCB VIA DAF               */
*/*              CIDCTL  (IN CRNSTAT2) - TO OBTAIN AND RELEASE       */
*/*                      LOCK AND LOCATE NCB VIA DAF                 */
*/********************************************************************/
*                                                                  1074
*CRNSTAT1:                                                         1074
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);                             1074
CRNSTAT1 DS    0H                                                  1075
*   RETAPA3=C06R14;                 /* SAVE RETURN ADDRESS           */
         LA    @06,552                                             1075
         AL    @06,RPHWEA(,PTRRPH)                                 1075
         ST    C06R14,RETAPA3(,@06)                                1075
*   RFY                                                            1076
*     C06R14 UNRSTD;                                               1076
*   NEEDSIZE=LENGTH(ISTRNX);        /* ESTIMATE SIZE OF AREA NEEDED  */
         LA    @14,285                                             1077
         ST    @14,NEEDSIZE(,@06)                                  1077
*   NEEDSIZE=NEEDSIZE+LENGTH(RNXDLN)*(RRNCTELI-1);         /*@D32CKTQ*/
         LH    @05,RRNCTELI(,RDTPTR)                               1078
         BCTR  @05,0                                               1078
         MH    @05,@CH00033                                        1078
         ALR   @14,@05                                             1078
         ST    @14,NEEDSIZE(,@06)                                  1078
*                                   /* NEED A SPACE FOR EACH LINE    */
*   IF C06CALC=ON2B                 /* CALCULATION-ONLY REQUIRED     */
*     THEN                          /* BYPASS MOVEMENT OF RDTE AND   */
         CH    C06CALC,@CH04855                                    1079
         BE    @RT01079                                            1079
*      ;                            /*    RELATED DATA TO USER AREA  */
*   ELSE                                                           1081
*     IF RPLBUFL<NEEDSIZE           /* SPECIFIED SIZE IS TOO SMALL   */
*       THEN                        /* SET CALCULATION-ONLY SWITCH   */
         L     @14,RPHWEA(,PTRRPH)                                 1081
         L     @06,OCWRPL(,@14)                                    1081
         L     @06,RPLBUFL(,@06)                                   1081
         C     @06,NEEDSIZE+552(,@14)                              1081
         BNL   @RF01081                                            1081
*       RC=TWENTYB;                 /*   ON AND RETURN CODE = X'2B'  */
         LA    RC,43                                               1082
*     ELSE                                                         1083
*       DO;                                                        1083
*                                                                  1083
         B     @RC01081                                            1083
@RF01081 DS    0H                                                  1084
*         /***********************************************************/
*         /*    MOVE RDTE AND RELATED DATA TO USER-SUPPLIED AREA     */
*         /***********************************************************/
*       RNXRDT=ISTRRN;              /* MOVE 370X RDTE TO USER AREA   */
         L     @14,RPHWEA(,PTRRPH)                                 1084
         L     @14,OCWRPL(,@14)                                    1084
         L     @14,RPLAREA(,@14)                                   1084
         MVC   RNXRDT(256,@14),ISTRRN(RDTPTR)                      1084
*       RNX370X=C06BLANK;           /* INITIAL VALUE         @D32CKTQ*/
         MVC   RNX370X(8,@14),@CC04841                             1085
*       RNXLINE=C06BLANK;           /* INITIAL VALUE         @D32CKTQ*/
*                                                                  1086
         MVC   RNXLINE(8,@14),@CC04841                             1086
*/********************************************************************/
*/*                                                                  */
*/*                     *****  CRNSTAT2  *****                       */
*/*         MOVE SIO AND TEMPORARY ERROR COUNTS FROM ICNCB.          */
*/*         PROVIDE INFORMATION ABOUT REMOTE 370X.           @D32CKTQ*/
*/*                                                                  */
*/********************************************************************/
*CRNSTAT2:                                                         1087
*           C06R13=C06R13+TWELVE;  /* ADJUST SAVEAREA PTR    @XM08755*/
CRNSTAT2 AH    C06R13,@CH00032                                     1087
*/*VSETLCK  (C06R15,RELEASE,LOCAL,(LOCAL,ISTSQC06(C06OBT1)))*/     1088
*C06REL3:   DO;                                                    1088
C06REL3  DS    0H                                                  1089
*                                        /*DECLARE AND RESTRICT REGS */
*                                        /*   2,10,11,12,13,14, AND 15
**/                                                                1089
*           RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) RSTD
*                                                                  1089
*                                        /*SAVE REGS 2 AND 10 THRU 14*/
*        GEN REFS(GPR02F,GPR10F,GPR11F,GPR12F,GPR14F,GPR13P);      1090
*                                                                  1090
         STM   GPR10F,GPR12F,0(GPR13P)
         ST    GPR14F,12(GPR13P)
         ST    GPR02F,16(GPR13P)
*                                        /*INVOKE MODESET TO CHANGE  */
*                                        /*PSW PROTECTION KEY TO 0   */
*        GEN SETS(2);                                              1091
*                                                                  1091
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
*             GPR10P=GPR13P;             /*PUT SAVE AREA ADDR IN R 10*/
         LR    GPR10P,GPR13P                                       1092
*                                        /*INVOKE OS/VS SETLOCK MACRO*/
*             GEN REFS(GPR13P,PSALITA,FLC) SETS(GPR12F);           1093
         SETLOCK RELEASE,TYPE=LOCAL,                                   *
               RELATED=(LOCAL,ISTSQC06(C06OBT1))
*             GPR15P=GPR13P;             /*PUT RETURN CODE IN R 15 */
         LR    GPR15P,GPR13P                                       1094
*                                        /*INVOKE MODESET MACRO TO   */
*               DO;                      /*RESTORE PSW PROTECTION KEY*/
*        GEN SETS(2);                                              1096
         MODESET KEYADDR=(2),WORKREG=2
*               END;                     /* RESTORE REGISTERS        */
*             GEN REFS(GPR10F,GPR13P) SETS(GPR10F,GPR11F,          1098
*             GPR12F,GPR13F,GPR14F,GPR02F);                        1098
         LR    GPR13F,GPR10F
         LM    GPR10F,GPR12F,0(GPR13P)
         L     GPR14F,12(GPR13P)
         L     GPR02F,16(GPR13P)
*             IF GPR15F=4 THEN GPR15F=0;                           1099
         CH    GPR15F,@CH00055                                     1099
         BNE   @RF01099                                            1099
         SLR   GPR15F,GPR15F                                       1100
*             C06R15=GPR15F;             /*PUT RETURN CODE IN RCREG*/
*                                                                  1101
@RF01099 DS    0H                                                  1102
*           RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) UNRS
*D;         END;  /*C06REL3:VSETLCK */                             1102
*           C06R13=C06R13-TWELVE;  /* RESET SAVEAREA PTR     @XM08755*/
         SH    C06R13,@CH00032                                     1104
*           RFY                                                    1105
*             C06R2 RSTD;                                          1105
*           C06R2=RPRCOMID;         /* MOVE CID INTO PARM REG        */
         L     C06R2,RPRCOMID(,RDTPTR)                             1106
*            C06R1=PTRRPH;        /* RESTORE RPH PTR TO REG 1 @DM8393*/
*                                                                  1107
         LR    C06R1,PTRRPH                                        1107
*            DO; /* CIDCTL(FIND) LOCK(SHARED) */                   1108
*                                                                  1108
*            RFY (EMCR2,EMCR3) RSTD;                               1109
*              GEN SETS(RPHWORK)                                   1110
*        (STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH);      1110
         STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH
*              EMCR3 = '00'X; /*CLEAR EXTRA BITS*/                 1111
         SLR   EMCR3,EMCR3                                         1111
*              EMCR3 = '01'X; /*INDICATE SHARED LOCK*/             1112
         LA    EMCR3,1                                             1112
*              CALL ATCLCPTR->ATCCDFND->ISTSDCCF; /*PROCESS REQUEST*/
*                                                                  1113
         L     @06,ATCLCPTR                                        1113
         L     @15,ATCCDFND(,@06)                                  1113
         BALR  @14,@15                                             1113
*            RFY (EMCR2,EMCR3) UNRSTD;                             1114
*            END; /*CIDCTL*/                                       1115
*           IF C06R15^=ZERO         /* RETURN CODE NO GOOD    @DM8970*/
*             THEN                                                 1116
         LTR   C06R15,C06R15                                       1116
         BZ    @RF01116                                            1116
*             DO;                                                  1117
*                                                                  1117
*            /********************************************************/
*            /*  CIDCTL FIND FOR NCB POINTER FAILED.                 */
*            /*  REVALIDATE USER AREA AND SET ERROR CODES            */
*            /********************************************************/
*               CALL C06VALA;                                      1118
         BAL   @14,C06VALA                                         1118
*               IF RC=ZERO          /* USER AREA STILL VALID @D32CKTQ*/
*                 THEN                                             1119
         SLR   @14,@14                                             1119
         CR    RC,@14                                              1119
         BNE   @RF01119                                            1119
*                 DO;                                              1120
*                   RNXIOC =ZERO;   /* I/O COUNT = 0         @ZA08947*/
         L     @06,RPHWEA(,PTRRPH)                                 1121
         L     @06,OCWRPL(,@06)                                    1121
         L     @06,RPLAREA(,@06)                                   1121
         STH   @14,RNXIOC(,@06)                                    1121
*                   RNXERCT=ZERO;   /* TEMP ERROR = 0                */
         MVI   RNXERCT(@06),X'00'                                  1122
*                   RC=TWENTYC;     /* SET DATA NOT AVAILABLE CODE   */
         LA    RC,44                                               1123
*                 END;                                             1124
*             END;                  /* END OF BAD CIDCTL FIND        */
*           ELSE                                                   1126
*             DO;                   /* GOOD CIDCTL FIND              */
*                                                                  1126
         B     @RC01116                                            1126
@RF01116 DS    0H                                                  1127
*            /********************************************************/
*            /*  NCB POINTER SUCCESSFULLY OBTAINED.                  */
*            /*  REVALIDATE USER AREA AND SET ERROR CODES            */
*            /********************************************************/
*               RFY                                                1127
*                 C06R0 RSTD;                                      1127
*               C06R2=C06R0;        /* SAVE ICNCB POINTER    @DM7253*/
         LR    C06R2,C06R0                                         1128
*               RFY                                                1129
*                 C06R0 UNRSTD;                                    1129
*               CALL C06VALA;       /* VALIDITY CHECK USER AREA      */
         BAL   @14,C06VALA                                         1130
*               IF RC=ZERO          /* RETURN CODE OK        @D32CKTQ*/
*                 THEN                                             1131
         LTR   RC,RC                                               1131
         BNZ   @RF01131                                            1131
*                 DO;               /* YES CONTINUE PROCESSING       */
*                   IF RRNRBREM=ON  /* REMOTE 370X?          @D32CKTQ*/
*                    THEN           /* IF SO, WE WANT LOCAL  @D32CKTQ*/
         TM    RRNRBREM(RDTPTR),B'00000100'                        1133
         BNO   @RF01133                                            1133
*                    DO;            /* RN NAME AND LINE NAME @D32CKTQ*/
*                      RNX370X=RRNTRENT->RINLOCRN->RPRNAME;/*@D32CKTQ*/
         L     @14,RPHWEA(,PTRRPH)                                 1135
         L     @14,OCWRPL(,@14)                                    1135
         L     @14,RPLAREA(,@14)                                   1135
         L     @06,RRNTRENT(,RDTPTR)                               1135
         L     @05,RINLOCRN(,@06)                                  1135
         MVC   RNX370X(8,@14),RPRNAME(@05)                         1135
*                      RNXLINE=RRNTRENT->RPRNSNEA->RPRNAME;/*@D32CKTQ*/
         L     @05,RPRNSNEA(,@06)                                  1136
         MVC   RNXLINE(8,@14),RPRNAME(@05)                         1136
*                      IF RRNTRENT->RPRCONP=ON /* RIN HAS    @XA10138*/
*                        THEN ADDR(RNXRDT)->RPRCONP=ON;    /*@XA10138*/
         TM    RPRCONP(@06),B'00001000'                            1137
         BNO   @RF01137                                            1137
         OI    RPRCONP(@14),B'00001000'                            1138
*                                   /* CONTACT BIT-MOVE IT   @XA10138*/
*                        ELSE;      /*  TO COPIED RRN        @XA10138*/
@RF01137 DS    0H                                                  1140
*                      END;                                /*@D32CKTQ*/
*                    ELSE;                                 /*@D32CKTQ*/
@RF01133 DS    0H                                                  1142
*                   RNXIOC =C06R2-> /* MOVE SIO CNTS TO USER @ZA08947*/
*                            ICNZH001;  /*  SPECIFIED AREA    @DM7253*/
         L     @14,RPHWEA(,PTRRPH)                                 1142
         L     @14,OCWRPL(,@14)                                    1142
         L     @14,RPLAREA(,@14)                                   1142
         MVC   RNXIOC(2,@14),ICNZH001(C06R2)                       1142
*                   RNXERCT=C06R2-> /* MOVE TEMP ERROR COUNTS TO     */
*                            ICNZX001;  /*   USER AREA        @DM7253*/
         MVC   RNXERCT(1,@14),ICNZX001(C06R2)                      1143
*                 END;              /* END OK VALCHECK               */
*                                                                  1144
*            /********************************************************/
*            /*  UNLOCK DAF                                          */
*            /********************************************************/
*               C06R2=RPRCOMID;     /* MOVE CID INTO PARM REGISTER   */
@RF01131 L     C06R2,RPRCOMID(,RDTPTR)                             1145
*               C06R1=PTRRPH;    /* RESTORE RPH PTR TO REG 1  @DM8393*/
*                                                                  1146
         LR    C06R1,PTRRPH                                        1146
*               DO; /* CIDCTL(FINISH)  */                          1147
*                                                                  1147
*               RFY (EMCR2,EMCR3) RSTD;                            1148
*                 GEN SETS(RPHWORK)                                1149
*        (STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH);      1149
         STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH
*                 EMCR3 = '00'X; /*CLEAR EXTRA BITS*/              1150
         SLR   EMCR3,EMCR3                                         1150
*                 CALL ATCLCPTR->ATCCDFIN->ISTSDCCR; /*PROCESS REQUEST*
*                                                                  1151
         L     @06,ATCLCPTR                                        1151
         L     @15,ATCCDFIN(,@06)                                  1151
         BALR  @14,@15                                             1151
*               RFY (EMCR2,EMCR3) UNRSTD;                          1152
*               END; /*CIDCTL*/                                    1153
*               RFY                                                1154
*                 C06R2 UNRSTD;                                    1154
*/********************************************************************/
*/*                         CRNSTAT3                         @D32CKTQ*/
*/*  PROVIDE LINE NAMES                                      @D32CKTQ*/
*/********************************************************************/
*CRNSTAT3:                                                 /*@D32CKTQ*/
*               RFY ISTRNX BASED(RNXPTR); /* CHANGE ADDRESSABILITY 1155
*                                                            @D32CKTQ*/
CRNSTAT3 DS    0H                                                  1156
*               RNXPTR=RPLAREA;     /* INITIALIZE W/ORIG VALUE     1156
*                                                            @D32CKTQ*/
         L     @14,RPHWEA(,PTRRPH)                                 1156
         L     @14,OCWRPL(,@14)                                    1156
         L     RNXPTR,RPLAREA(,@14)                                1156
*               DO WHILE RPRENTED^=ON; /* LOOK THRU SEGMENT  @D32CKTQ*/
         B     @DE01157                                            1157
@DL01157 DS    0H                                                  1158
*                 RDTPTR=RDTPTR+RPRELEN; /* NEXT ENTRY       @D32CKTQ*/
         AH    RDTPTR,RPRELEN(,RDTPTR)                             1158
*                 IF RPRENTRY=RPRENTLN /* IS IT A LINE?      @D32CKTQ*/
*                   THEN            /* WE RECORD IT IF SO    @D32CKTQ*/
         CLI   RPRENTRY(RDTPTR),X'50'                              1159
         BNE   @RF01159                                            1159
*                   DO;                                    /*@D32CKTQ*/
*                     RNXDLNNM=RPRNAME; /* COPY THE NAME     @D32CKTQ*/
         MVC   RNXDLNNM(8,RNXPTR),RPRNAME(RDTPTR)                  1161
*                     IF RPRONLIN=ON /* ACTIVE?              @D32CKTQ*/
*                       THEN                               /*@D32CKTQ*/
         TM    RPRONLIN(RDTPTR),B'00001000'                        1162
         BNO   @RF01162                                            1162
*                         RNXDLNA=ON; /* MARK ACTIVE         @D32CKTQ*/
         OI    RNXDLNA(RNXPTR),B'10000000'                         1163
*                       ELSE;       /* NULL ELSE             @D32CKTQ*/
@RF01162 DS    0H                                                  1165
*                     RNXPTR=RNXPTR+LENGTH(RNXDLN); /* BUMP  @D32CKTQ*/
         AH    RNXPTR,@CH00033                                     1165
*                     END;          /* END OF LINE GROUP     @D32CKTQ*/
*                   ELSE;           /* DO NOTHING IF NOT LINE@D32CKTQ*/
@RF01159 DS    0H                                                  1168
*                 END;              /* END OF DO GROUP       @D32CKTQ*/
@DE01157 TM    RPRENTED(RDTPTR),B'00000100'                        1168
         BNO   @DL01157                                            1168
*             END;                  /* END GOOD CIDCTL FIND          */
*         END;                      /* END ENOUGH USER AREA          */
@RC01116 DS    0H                                                  1171
*   RFY                                                            1171
*     C06R14 RSTD;                                                 1171
@RC01081 DS    0H                                                  1171
@RT01079 DS    0H                                                  1172
*   C06R14=RETAPA3;                 /* RESTORE RETURN ADDRESS        */
         L     @06,RPHWEA(,PTRRPH)                                 1172
         L     C06R14,RETAPA3+552(,@06)                            1172
*   END CRNSTAT1;                                                  1173
@EL00009 DS    0H                                                  1173
@EF00009 DS    0H                                                  1173
@ER00009 BR    @14                                                 1173
*                                                                  1174
*/********************************************************************/
*/* ROUTINE NAME: CAPSTAT1 - APPLICATION STATUS                      */
*/*                                                                  */
*/* FUNCTION: CALLED BY C06DISPA TO OBTAIN INFORMATION FOR APPLICA-  */
*/*           TION-TYPE DISPLAY INQUIRIES.  DETERMINES SIZE OF       */
*/*           BUFFER REQUIRED TO CONTAIN RDTE AND TESTS TO SEE IF    */
*/*           USER-SUPPLIED AREA IS ADEQUATE.  IF IT IS, THE RDTE IS */
*/*           MOVED TO THE USER BUFFER AND CAPSTAT2 IS CALLED TO     */
*/*           OBTAIN THE ICES AND ACES ASSOCIATED WITH THE           */
*/*           APPLICATION.                                           */
*/*                                                                  */
*/* INPUT:  RDTPTR   (R4) - POINTER TO APPLICATION RDT       @D32CKTQ*/
*/*         RPLPTR   (R7) - POINTER TO USER AREA CONTAINING BUFFER   */
*/*         RC       (R8) - RETURN CODE                              */
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (C06DISPA)   */
*/*                                                                  */
*/* OUTPUT: RC       (R8) - RETURN CODE (TO X'2B' IF USER SUPPLIED   */
*/*                         BUFFER AREA IS INADEQUATE, X'0B' @X50BHTQ*/
*/*                         IF CSETSTLU VSETLCK FAILS        @X50BHTQ*/
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (C06DISPA)   */
*/*         NEEDSIZE      - SIZE OF BUFFER AREA REQUIRED     @D32CKTQ*/
*/*         IF RC=0, RDTE MOVED TO USER-SUPPLIED BUFFER              */
*/*                                                                  */
*/* ROUTINES CALLED: CAPSTAT2 - TO GET ACTIVE CONNECTION ELEMENTS    */
*/*                             (ACES) AND INACTIVE CONNECTION       */
*/*                             ELEMENTS (ICES)                      */
*/*                                                                  */
*/* MACROS USED: NONE                                                */
*/********************************************************************/
*                                                                  1174
*CAPSTAT1:                                                         1174
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);                             1174
CAPSTAT1 DS    0H                                                  1175
*   RFY                                                            1175
*    (APPLPTR,                                                     1175
*     AREALEFT)RSTD;                                               1175
*   RETAPA1=C06R14;                 /* SAVE RETURN ADDRESS           */
         L     @10,RPHWEA(,PTRRPH)                                 1176
         ST    C06R14,RETAPA1+552(,@10)                            1176
*   RFY                                                            1177
*     C06R14 UNRSTD;                                               1177
*   IF C06CALC=ON2B                 /* CALCULATION-ONLY REQUIRED     */
*     THEN                          /* BYPASS MOVEMENT OF RDTE AND   */
         CH    C06CALC,@CH04855                                    1178
         BE    @RT01178                                            1178
*      ;                            /*    RELATED DATA TO USER AREA  */
*   ELSE                                                           1180
*     DO;                           /* NO                            */
*       APPLPTR=RPLAREA;            /* ESTABLISH BASE FOR USER AREA  */
         L     @14,RPHWEA(,PTRRPH)                                 1181
         L     @14,OCWRPL(,@14)                                    1181
         L     APPLPTR,RPLAREA(,@14)                               1181
*       AREALEFT=RPLBUFL;           /* START WITH GIVEN SIZE AND     */
         L     AREALEFT,RPLBUFL(,@14)                              1182
*       AREALEFT=AREALEFT-LENGTH(ISTRAP);/* SUBTRACT LENGTH OF RDTE  */
         SH    AREALEFT,@CH06016                                   1183
*       IF AREALEFT>=ZERO THEN      /* IF SIZE OF USER AREA ADEQUATE */
         LTR   AREALEFT,AREALEFT                                   1184
         BM    @RF01184                                            1184
*         APPLRDT=ISTRAP;           /* MOVE APPLICATION RDTE TO AREA */
         MVC   APPLRDT(120,APPLPTR),ISTRAP(RDTPTR)                 1185
*       ELSE                        /* SET CALCULATION-ONLY SWITCH   */
*           RC=TWENTYB;             /*   ON AND RETURN CODE = X'2B'  */
         B     @RC01184                                            1186
@RF01184 LA    RC,43                                               1186
*     END;                                                         1187
@RC01184 DS    0H                                                  1188
*   NEEDSIZE=LENGTH(ISTRAP);        /* USED AREA IS RDTE LENGTH      */
@RT01178 L     @14,RPHWEA(,PTRRPH)                                 1188
         MVC   NEEDSIZE+552(4,@14),@CF06016                        1188
*   CALL CAPSTAT2;                  /* CALL SUBROUTINE TO FINISH     */
         BAL   @14,CAPSTAT2                                        1189
*   RFY                                                            1190
*     C06R14 RSTD;                                                 1190
*   C06R14=RETAPA1;                 /* RESTORE RETURN ADDRESS        */
         L     @10,RPHWEA(,PTRRPH)                                 1191
         L     C06R14,RETAPA1+552(,@10)                            1191
*   END CAPSTAT1;                                                  1192
@EL00010 DS    0H                                                  1192
@EF00010 DS    0H                                                  1192
@ER00010 BR    @14                                                 1192
*                                                                  1193
*/********************************************************************/
*/* ROUTINE NAME: CAPSTAT2 - GET ACES AND ICES                       */
*/*                                                                  */
*/* FUNCTION: CALLED BY CAPSTAT1 TO FIND TERMINALS THAT HAVE ASKED   */
*/*           FOR THIS APPLICATION OR THAT HAVE BEEN REQUESTED OR    */
*/*           ACQUIRED BY IT. AS EACH ACE OR ICE IS FOUND, CAPSTAT3  */
*/*           IS CALLED TO MOVE THE TERMINAL NAME TO THE USER AREA.  */
*/*                                                                  */
*/* INPUT:  RDTPTR   (R4) - POINTER TO THE APPLICATION RDT           */
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (CAPSTAT1)   */
*/*                                                                  */
*/* OUTPUT: RDTPTR   (R4) - POINTER TO APPLICATION RDT               */
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (CLNSTAT1)   */
*/*                                                                  */
*/* ROUTINES CALLED: CAPSTAT3 - TO GET TERMINAL NAME ASSOCIATED      */
*/*                             EACH ICE AND ACE                     */
*/*                                                                  */
*/* MACROS CALLED: NONE                                              */
*/********************************************************************/
*                                                                  1193
*CAPSTAT2:                                                         1193
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);                             1193
CAPSTAT2 DS    0H                                                  1194
*   RFY                                                            1194
*    (ICEPTR,                                                      1194
*     C06ICEF)RSTD;                                                1194
*   RETAPA2=C06R14;                 /* SAVE RETURN ADDRESS           */
         L     @06,RPHWEA(,PTRRPH)                                 1195
         ST    C06R14,RETAPA2+552(,@06)                            1195
*   RFY                                                            1196
*     C06R14 UNRSTD;                                               1196
*                                                                  1196
*   /*****************************************************************/
*   /*                                                               */
*   /* SEARCH IS FOR ICES, I.E., TERMINALS THAT HAVE REQUESTED THIS  */
*   /* APPLICATION                                                   */
*   /*                                                               */
*   /*****************************************************************/
*   C06ICEF=ONREG;                  /* INDICATE SEARCH IS FOR ICES   */
         LA    C06ICEF,1                                           1197
*   ICEPTR=RAPICELG;                /* ESTABLISH ICE BASE FROM RDTE  */
         L     ICEPTR,RAPICELG(,RDTPTR)                            1198
*   DO WHILE ICEPTR^=               /* SEARCH WHILE AN ICE EXISTS -  */
*         ADDR(RAPICELG)&           /* NOT EQ TO ADDR OF FIRST ICE   */
*         (RC=ZERO×RC=TWENTYB);     /* MAKE SURE VSETLCK OK  @X50BHTQ*/
         B     @DE01199                                            1199
@DL01199 DS    0H                                                  1200
*     RDTPTR=ICEOBJ;                /* GET TERM RDTE ADDR FROM ICE   */
         L     RDTPTR,ICEOBJ(,ICEPTR)                              1200
*     CALL CAPSTAT3;                /* CALL SUBRTN TO GET TERM  NAME */
         BAL   @14,CAPSTAT3                                        1201
*     RDTPTR=OCWDRDTE;              /* RESTOR APPL RDTE BASE @D32CKTQ*/
         L     @14,RPHWEA(,PTRRPH)                                 1202
         L     RDTPTR,OCWDRDTE(,@14)                               1202
*     ICEPTR=ICESUBJQ;              /* UPDATE TO NEXT ICE FOR TERM   */
         L     ICEPTR,ICESUBJQ(,ICEPTR)                            1203
*   END;                                                           1204
@DE01199 LA    @14,RAPICELG(,RDTPTR)                               1204
         CR    ICEPTR,@14                                          1204
         BE    @DC01199                                            1204
         LTR   RC,RC                                               1204
         BZ    @DL01199                                            1204
         CH    RC,@CH04855                                         1204
         BE    @DL01199                                            1204
@DC01199 DS    0H                                                  1205
*   C06ICEF=OFFREG;                 /* INDICATE ICE SEARCH COMPLETE  */
         SLR   C06ICEF,C06ICEF                                     1205
*   RFY                                                            1206
*     ICEPTR UNRSTD;                                               1206
*                                                                  1206
*   /*****************************************************************/
*   /*                                                               */
*   /* SEARCH FOR ACES I.E. TERMINALS THAT HAVE BEEN REQUESTED OR    */
*   /* ACQUIRED BY THIS APPLICATION                                  */
*   /*                                                               */
*   /*****************************************************************/
*   RFY                                                            1207
*     ACEPTR RSTD;                                                 1207
*   ACEPTR=OCWDRDTE->RAPACEAP;      /* ESTABLISH ACE BASE FROM RDTE  */
         L     @14,RPHWEA(,PTRRPH)                                 1208
         L     @14,OCWDRDTE(,@14)                                  1208
         L     ACEPTR,RAPACEAP(,@14)                               1208
*   DO WHILE ACEPTR^=               /* SEARCH WHILE ACES EXIST -     */
*         ADDR(OCWDRDTE->RAPACEAP)& /* NOT EQ TO ADDR OF FIRST ACE   */
*         (RC=ZERO×RC=TWENTYB);     /* MAKE SURE VSETLCK OK  @X50BHTQ*/
         B     @DE01209                                            1209
@DL01209 DS    0H                                                  1210
*     RDTPTR=ACEOBJ;                /* GET TERM RDTE ADDR FROM ACE   */
         L     RDTPTR,ACEOBJ(,ACEPTR)                              1210
*     CALL CAPSTAT3;                /* CALL SUBRTN. TO GET TERM NAME */
         BAL   @14,CAPSTAT3                                        1211
*     ACEPTR=ACESUBJQ;              /* GET NEXT ACE IN QUEUE         */
         L     ACEPTR,ACESUBJQ(,ACEPTR)                            1212
*   END;                                                           1213
@DE01209 L     @14,RPHWEA(,PTRRPH)                                 1213
         L     @14,OCWDRDTE(,@14)                                  1213
         LA    @14,RAPACEAP(,@14)                                  1213
         CR    ACEPTR,@14                                          1213
         BE    @DC01209                                            1213
         LTR   RC,RC                                               1213
         BZ    @DL01209                                            1213
         CH    RC,@CH04855                                         1213
         BE    @DL01209                                            1213
@DC01209 DS    0H                                                  1214
*   RDTPTR=OCWDRDTE;                /* RESTORE POINTER TO APPL RDTE  */
         L     @14,RPHWEA(,PTRRPH)                                 1214
         L     RDTPTR,OCWDRDTE(,@14)                               1214
*   RFY                                                            1215
*     C06R14 RSTD;                                                 1215
*   C06R14=RETAPA2;                 /* RESTORE RETURN ADDRESS        */
         L     @06,RPHWEA(,PTRRPH)                                 1216
         L     C06R14,RETAPA2+552(,@06)                            1216
*   END CAPSTAT2;                                                  1217
@EL00011 DS    0H                                                  1217
@EF00011 DS    0H                                                  1217
@ER00011 BR    @14                                                 1217
*                                                                  1218
*/********************************************************************/
*/* ROUTINE NAME: CAPSTAT3 - MOVE TERMINAL NAME                      */
*/*                                                                  */
*/* FUNCTION: CALLED BY CAPSTAT2 TO MOVE THE TERMINAL NAME ASSOCI-   */
*/*           ATED WITH EACH ICE AND ACE TO THE USER-SPECIFIED AREA. */
*/*           THE FLAG ASSOCIATED WITH EACH NAME IS SET OFF (LOGON   */
*/*           PENDING) FOR EACH ICE AND ON (ACTIVE CONNECTION) FOR   */
*/*           EACH ACE.  THE NEEDED SIZE IS INCREMENTED BY THE       */
*/*           LENGTH OF THE NAME AND FLAG FIELD WITH EACH CALL.      */
*/*           ADDITIONALLY, FOR EACH TERMINAL WHICH IS AN    @X50BHTQ*/
*/*           ACTIVE LOGICAL UNIT,                           @X50BHTQ*/
*/*           AN INDICATION IS PROVIDED IF BIND, UNBIND,     @X50BHTQ*/
*/*           OR CLEAR IS IN PROGRESS.                       @X50BHTQ*/
*/*                                                                  */
*/* INPUT:  APPLPTR  (R1) - POINTER TO THE USER SPECIFIED BUFFER     */
*/*         C06ICEF  (R2) - ICE FLAG (1=ICE, 0=ACE)                  */
*/*         RDTPTR   (R4) - POINTER TO TERMINAL RDTE                 */
*/*         RC       (R8) - RETURN CODE REGISTER                     */
*/*         NEEDSIZE      - SIZE OF BUFFER FILLED TO THIS POINT      */
*/*         AREALEFT (R11)- AREA REMAINING IN USER BUFFER            */
*/*         C06R14   (R14)- NSI ADDR IN CALLING ROUTINE (CLNSTAT1)   */
*/*         ICEPTR   (R10)- POINTER TO THE INACTIVE CONNECTION       */
*/*                         ELEMENT (ICE)                            */
*/*         ACEPTR   (R10)- POINTER TO THE ACTIVE CONNECTION         */
*/*                         ELEMENT (ACE)                            */
*/*                                                                  */
*/* OUTPUT: TERMINAL NAME MOVED TO USER BUFFER, ACTIVE BIT SET       */
*/*         ON (FOR ACE) OR OFF (FOR ICE)                            */
*/*         ADDITIONALLY, FOR EACH TERMINAL WHICH IS AN LU   @X50BHTQ*/
*/*         ACTIVELY CONNECTED, AN INDICATION IS PROVIDED    @X50BHTQ*/
*/*         IF BIND, UNBIND, OR CLEAR IS IN PROGRESS.        @X50BHTQ*/
*/*         APPLPTR  (R1) - POINTER TO THE USER SPECIFIED BUFFER     */
*/*                         INCREMENTED BY LENGTH OF ADDED DATA      */
*/*         RDTPTR   (R4) - POINTER TO TERMINAL RDT                  */
*/*         RC       (R8) - RETURN CODE (TO X'2B' IF USER SUPPLIED   */
*/*                         BUFFER AREA IS INADEQUATE)               */
*/*         NEEDSIZE      - SIZE OF APPLICATION RDT+DATA ADDED HERE  */
*/*         AREALEFT (R11)- SIZE OF USER AREA REMAINING UNFILLED     */
*/*         C06R14   (R14)- NSI ADDR IN CALLING ROUTINE (CLNSTAT1)   */
*/*                                                                  */
*/* ROUTINES CALLED: NONE                                            */
*/*                                                                  */
*/* MACROS USED: NONE                                                */
*/********************************************************************/
*                                                                  1218
*CAPSTAT3:                                                         1218
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);                             1218
CAPSTAT3 DS    0H                                                  1219
*   RETAPA3=C06R14;                 /* SAVE RETURN ADDRESS   @X50BHTQ*/
         L     @06,RPHWEA(,PTRRPH)                                 1219
         ST    C06R14,RETAPA3+552(,@06)                            1219
*   RFY C06R14 UNRSTD;                                     /*@X50BHTQ*/
*   IF C06CALC=ON2B                 /* CALCULATION-ONLY REQUIRED     */
*     THEN                          /* BYPASS MOVEMENT OF RDTE AND   */
         CH    C06CALC,@CH04855                                    1221
         BE    @RT01221                                            1221
*      ;                            /*    RELATED DATA TO USER AREA  */
*   ELSE                                                           1223
*     DO;                                                          1223
*       AREALEFT=AREALEFT-          /* SUBTRACT NAME & FLAG LENGTH   */
*           (LENGTH(APPLTN)         /*     FROM AREA REMAINING IN    */
*            +LENGTH(APPLTCON));    /*     USER-SUPPLIED BUFFFER     */
         SH    AREALEFT,@CH00033                                   1224
*       IF AREALEFT>=ZERO           /* ENOUGH AREA REMAINS           */
*         THEN                                                     1225
         LTR   AREALEFT,AREALEFT                                   1225
         BM    @RF01225                                            1225
*         DO;                                                      1226
*                                                                  1226
*         /***********************************************************/
*         /*    MOVE TERMINAL NAME AND RELATED DATA TO USER AREA     */
*         /***********************************************************/
*           APPLTN=RPRNAME;         /* MOVE TERMINAL NAME TO AREA    */
         MVC   APPLTN(8,APPLPTR),RPRNAME(RDTPTR)                   1227
*           IF C06ICEF=ONREG        /* IF THIS IS AN ICE             */
*             THEN                                                 1228
         CH    C06ICEF,@CH00063                                    1228
         BNE   @RF01228                                            1228
*             APPLTCON=OFF;         /*  SET LOGON PENDING FLAG       */
         NI    APPLTCON(APPLPTR),B'01111111'                       1229
*           ELSE DO;                 /* IT IS AN ACE         @X50BHTQ*/
         B     @RC01228                                            1230
@RF01228 DS    0H                                                  1231
*             APPLTCON=ON;          /* SET CONNECTED FLAG            */
         OI    APPLTCON(APPLPTR),B'10000000'                       1231
*             IF RPRONLIN=ON        /* FOR ACTIVE            @X50BHTQ*/
*               &RPRENTRY=RPRENTLU  /* LOGICAL UNITS, CHECK  @X50BHTQ*/
*             THEN                  /* FMCB FOR CLEAR,       @X50BHTQ*/
         TM    RPRONLIN(RDTPTR),B'00001000'                        1232
         BNO   @RF01232                                            1232
         CLI   RPRENTRY(RDTPTR),X'81'                              1232
         BNE   @RF01232                                            1232
*             DO;                   /* UNBIND, BIND I.P.     @X50BHTQ*/
*               CALL CSETSTLU;      /* CALL SUBR TO DO IT    @X50BHTQ*/
         BAL   @14,CSETSTLU                                        1234
*               IF RC=ZERO          /* NO VSETLCK FAILURE    @X50BHTQ*/
*                 THEN DO;                                 /*@X50BHTQ*/
         LTR   RC,RC                                               1235
         BNZ   @RF01235                                            1235
*                   IF C06R15=FOUR  /* BIND IN PROGRESS      @X50BHTQ*/
*                     THEN APPBIP=ON;      /* TELL ISTCFCDP  @X50BHTQ*/
         CH    C06R15,@CH00055                                     1237
         BNE   @RF01237                                            1237
         OI    APPBIP(APPLPTR),B'00000010'                         1238
*                     ELSE;                                /*@X50BHTQ*/
@RF01237 DS    0H                                                  1240
*                   IF C06R15=8     /* CLEAR OR UNBIND I.P.  @X50BHTQ*/
*                     THEN APPCUIP=ON;     /* TELL ISTCFCDP  @X50BHTQ*/
         CH    C06R15,@CH00061                                     1240
         BNE   @RF01240                                            1240
         OI    APPCUIP(APPLPTR),B'00000001'                        1241
*                     ELSE;                                /*@X50BHTQ*/
@RF01240 DS    0H                                                  1243
*                   END;            /* END RC=0 LEG          @X50BHTQ*/
*                 ELSE;                                    /*@X50BHTQ*/
@RF01235 DS    0H                                                  1245
*               END;                /* END ACTIVE LU LEG     @X50BHTQ*/
*             ELSE;                                        /*@X50BHTQ*/
@RF01232 DS    0H                                                  1247
*             END;                  /* END ACT CONNECT LEG   @X50BHTQ*/
*           APPLPTR=APPLPTR+        /* UPDATE USER AREA POINTER      */
*               LENGTH(APPLTN)+LENGTH(APPLTCON);                   1248
@RC01228 AH    APPLPTR,@CH00033                                    1248
*         END;                                                     1249
*       ELSE                        /* AREA IS LESS THAN ZERO        */
*           RC=TWENTYB;            /* SET CALCULATION-ONLY SWITCH  1250
*                                      ON AND RETURN CODE = X'2B'    */
         B     @RC01225                                            1250
@RF01225 LA    RC,43                                               1250
*     END;                                                         1251
@RC01225 DS    0H                                                  1252
*   NEEDSIZE=NEEDSIZE+LENGTH(APPLTN)/* CALCULATE USED SIZE           */
*       +LENGTH(APPLTCON);                                         1252
@RT01221 LA    @14,552                                             1252
         AL    @14,RPHWEA(,PTRRPH)                                 1252
         LA    @06,9                                               1252
         AL    @06,NEEDSIZE(,@14)                                  1252
         ST    @06,NEEDSIZE(,@14)                                  1252
*   RFY                                                            1253
*    (APPLPTR,                                                     1253
*     ACEPTR,                                                      1253
*     C06ICEF,                                                     1253
*     AREALEFT)UNRSTD;                                             1253
*   RFY C06R14 RSTD;                                       /*@X50BHTQ*/
*   C06R14=RETAPA3;                 /* RESTORE RETURN REG    @X50BHTQ*/
         LA    @06,552                                             1255
         AL    @06,RPHWEA(,PTRRPH)                                 1255
         L     C06R14,RETAPA3(,@06)                                1255
*   END CAPSTAT3;                                                  1256
@EL00012 DS    0H                                                  1256
@EF00012 DS    0H                                                  1256
@ER00012 BR    @14                                                 1256
*                                                                  1257
*/********************************************************************/
*/* ROUTINE NAME: CLCSTAT1 - LOCAL DEVICE STATUS                     */
*/*                                                                  */
*/* FUNCTION: CALLED BY C06DISPA TO OBTAIN INFORMATION FOR LOCAL     */
*/*           DEVICE TYPE DISPLAY INQUIRIES.  FINDS REQUIRED SIZE    */
*/*           OF BUFFER TO CONTAIN RDTE, TESTS TO SEE IF USER        */
*/*           SPECIFIED AREA IS LARGE ENOUGH, AND--IF IT IS--MOVES   */
*/*           THE RDT INTO IT.  CALLS CLCSTST2 (IN LINE) TO FIND     */
*/*           APPLICATIONS CONNECTED TO THE DEVICE.  CLCSTAT2 MOVES  */
*/*           THE APPLICATION NAME INTO THE USER AREA ALONG WITH     */
*/*           SIO AND TEMPORARY ERROR COUNTS.  CLCSTAT2 USES THE DAF */
*/*           FROM THE RDTE TO DETERMINE THESE VALUES.  IF IT CANNOT */
*/*           SUCCESSFULLY GET THE NCB ADDRESS, CLCSTAT2 MOVES A     */
*/*           ZERO INTO THE SIO AND ERROR COUNT FIELDS.              */
*/*                                                                  */
*/* INPUT:  RDTPTR   (R4) - POINTER TO TERMINAL RDT ENTRY            */
*/*         PTRRPH   (R6) - POINTER TO RPL HEADER (ISTRPH)           */
*/*         RC       (R8) - RETURN CODE                              */
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (C06DISPA)   */
*/*                                                                  */
*/* OUTPUT: RC       (R8) - RETURN CODE (TO X'2B' IF USER SUPPLIED   */
*/*                         BUFFER AREA IS INADEQUATE)               */
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (C06DISPA)   */
*/*         NEEDSIZE      - SIZE OF BUFFER AREA REQUIRED     @D32CKTQ*/
*/*         IF RC=0, RDTE, SIO COUNT, AND TEMPORARY ERROR COUNT      */
*/*                  MOVED TO USER-SUPPLIED BUFFER                   */
*/*                                                                  */
*/* ROUTINES CALLED: C06VALA (FROM CLCSTAT2) - TO VALIDITY CHECK     */
*/*                          USER AREA AND SET LOCAL MEMORY LOCK     */
*/*                                                                  */
*/* MACROS USED: VSETLCK (IN CLCSTAT2) - TO RELEASE LOCAL MEMORY     */
*/*                      PRIOR TO LOCATING NCB VIA DAF               */
*/*              CIDCTL  (IN CLCSTAT2) - TO OBTAIN AND RELEASE       */
*/*                      LOCK AND LOCATE NCB VIA DAF                 */
*/********************************************************************/
*                                                                  1257
*CLCSTAT1:                                                         1257
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);                             1257
CLCSTAT1 DS    0H                                                  1258
*   RETAPA4=C06R14;                 /* SAVE RETURN ADDRESS           */
         LA    @06,552                                             1258
         AL    @06,RPHWEA(,PTRRPH)                                 1258
         ST    C06R14,RETAPA4(,@06)                                1258
*   RFY                                                            1259
*     C06R14 UNRSTD;                                               1259
*   NEEDSIZE=LENGTH(ISTLCL);        /* ESTABLISH SIZE OF AREA NEEDED */
         MVC   NEEDSIZE(4,@06),@CF06017                            1260
*   IF C06CALC=ON2B                 /* CALCULATION-ONLY REQUIRED     */
*     THEN                          /* BYPASS MOVEMENT OF RDTE AND   */
         CH    C06CALC,@CH04855                                    1261
         BE    @RT01261                                            1261
*      ;                            /*    RELATED DATA TO USER AREA  */
*   ELSE                                                           1263
*     IF RPLBUFL<NEEDSIZE           /* SPECIFIED SIZE IS TOO SMALL   */
*       THEN                        /* SET CALCULATION-ONLY SWITCH   */
         L     @14,RPHWEA(,PTRRPH)                                 1263
         L     @06,OCWRPL(,@14)                                    1263
         L     @06,RPLBUFL(,@06)                                   1263
         C     @06,NEEDSIZE+552(,@14)                              1263
         BNL   @RF01263                                            1263
*       RC=TWENTYB;                 /*   ON AND RETURN CODE = X'2B'  */
         LA    RC,43                                               1264
*     ELSE                                                         1265
*       DO;                                                        1265
*                                                                  1265
         B     @RC01263                                            1265
@RF01263 DS    0H                                                  1266
*         /***********************************************************/
*         /*    MOVE RDTE AND RELATED DATA TO USER-SUPPLIED AREA     */
*         /***********************************************************/
*           LCLRDT=ISTRTR;          /* MOVE LOCAL RDTE TO USER AREA  */
         L     @14,RPHWEA(,PTRRPH)                                 1266
         L     @14,OCWRPL(,@14)                                    1266
         L     @14,RPLAREA(,@14)                                   1266
         MVC   LCLRDT(212,@14),ISTRTR(RDTPTR)                      1266
*           LCLCUA=RPRNSNEA->RLCLCCUA; /*  GET CUA FROM RDTE @XM9300K*/
         L     @06,RPRNSNEA(,RDTPTR)                               1267
         MVC   LCLCUA(3,@14),RLCLCCUA(@06)                         1267
*           LCLLCL=ON;              /* SET LOCAL TERMINAL FLAG       */
*                                                                  1268
         OI    LCLLCL(@14),B'10000000'                             1268
*/********************************************************************/
*/*                                                                  */
*/*                     ***** CLCSTAT2 *****                         */
*/*            GET APPLICATIONS CONNECTED TO THIS DEVICE             */
*/*                                                                  */
*/********************************************************************/
*                                                                  1269
*           IF RCPACETR^=           /* IF TERMINAL IS CONNECTED TO   */
*               ADDR(RCPACETR)THEN  /*    AN APPLICATION             */
         L     @06,RCPACETR(,RDTPTR)                               1269
         LA    @05,RCPACETR(,RDTPTR)                               1269
         CR    @06,@05                                             1269
         BE    @RF01269                                            1269
*             DO;                                                  1270
*               RFY ACEPTR RSTD;                           /*@XM06350*/
*               ACEPTR=RCPACETR;    /* ESTABLISH POINTER TO ACE      */
         LR    ACEPTR,@06                                          1272
*               LCLAN=ACESUBJ->RPRNAME;/* MOVE APPL NAME INTO AREA 1273
*                                      FOUND BY RDT PTR. IN ACE      */
         L     @11,ACESUBJ(,ACEPTR)                                1273
         MVC   LCLAN(8,@14),RPRNAME(@11)                           1273
*               RFY ACEPTR UNRSTD;                         /*@XM06350*/
*             END;                                                 1275
*           ELSE                                                   1276
*             LCLAN='        ';     /* MOVE BLANKS TO APPL. NAME     */
         B     @RC01269                                            1276
@RF01269 L     @14,RPHWEA(,PTRRPH)                                 1276
         L     @14,OCWRPL(,@14)                                    1276
         L     @14,RPLAREA(,@14)                                   1276
         MVC   LCLAN(8,@14),@CC04841                               1276
*           C06R13=C06R13+TWELVE;   /* ADJUST SAVEAREA PTR   @XM08755*/
@RC01269 AH    C06R13,@CH00032                                     1277
*/*VSETLCK  (C06R15,RELEASE,LOCAL,(LOCAL,ISTSQC06(C06OBT1)))*/     1278
*C06REL4:   DO;                                                    1278
C06REL4  DS    0H                                                  1279
*                                        /*DECLARE AND RESTRICT REGS */
*                                        /*   2,10,11,12,13,14, AND 15
**/                                                                1279
*           RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) RSTD
*                                                                  1279
*                                        /*SAVE REGS 2 AND 10 THRU 14*/
*        GEN REFS(GPR02F,GPR10F,GPR11F,GPR12F,GPR14F,GPR13P);      1280
*                                                                  1280
         STM   GPR10F,GPR12F,0(GPR13P)
         ST    GPR14F,12(GPR13P)
         ST    GPR02F,16(GPR13P)
*                                        /*INVOKE MODESET TO CHANGE  */
*                                        /*PSW PROTECTION KEY TO 0   */
*        GEN SETS(2);                                              1281
*                                                                  1281
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
*             GPR10P=GPR13P;             /*PUT SAVE AREA ADDR IN R 10*/
         LR    GPR10P,GPR13P                                       1282
*                                        /*INVOKE OS/VS SETLOCK MACRO*/
*             GEN REFS(GPR13P,PSALITA,FLC) SETS(GPR12F);           1283
         SETLOCK RELEASE,TYPE=LOCAL,                                   *
               RELATED=(LOCAL,ISTSQC06(C06OBT1))
*             GPR15P=GPR13P;             /*PUT RETURN CODE IN R 15 */
         LR    GPR15P,GPR13P                                       1284
*                                        /*INVOKE MODESET MACRO TO   */
*               DO;                      /*RESTORE PSW PROTECTION KEY*/
*        GEN SETS(2);                                              1286
         MODESET KEYADDR=(2),WORKREG=2
*               END;                     /* RESTORE REGISTERS        */
*             GEN REFS(GPR10F,GPR13P) SETS(GPR10F,GPR11F,          1288
*             GPR12F,GPR13F,GPR14F,GPR02F);                        1288
         LR    GPR13F,GPR10F
         LM    GPR10F,GPR12F,0(GPR13P)
         L     GPR14F,12(GPR13P)
         L     GPR02F,16(GPR13P)
*             IF GPR15F=4 THEN GPR15F=0;                           1289
         CH    GPR15F,@CH00055                                     1289
         BNE   @RF01289                                            1289
         SLR   GPR15F,GPR15F                                       1290
*             C06R15=GPR15F;             /*PUT RETURN CODE IN RCREG*/
*                                                                  1291
@RF01289 DS    0H                                                  1292
*           RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) UNRS
*D;         END;  /*C06REL4:VSETLCK */                             1292
*           C06R13=C06R13-TWELVE;   /* RESET SAVEAREA PTR    @XM08755*/
         SH    C06R13,@CH00032                                     1294
*           RFY                                                    1295
*             C06R2 RSTD;           /* GET DAF LOCK                  */
*           C06R2=RPRNSNEA->RPRCOMID;/* MOVE CID INTO REGISTER       */
         L     @14,RPRNSNEA(,RDTPTR)                               1296
         L     C06R2,RPRCOMID(,@14)                                1296
*           C06R1=PTRRPH;           /* RESTORE RPH PTR TO R1  @DM8393*/
*                                                                  1297
         LR    C06R1,PTRRPH                                        1297
*            DO; /* CIDCTL(FIND)  */                               1298
*                                                                  1298
*            RFY (EMCR2,EMCR3) RSTD;                               1299
*              GEN SETS(RPHWORK)                                   1300
*        (STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH);      1300
         STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH
*              EMCR3 = '00'X; /*CLEAR EXTRA BITS*/                 1301
         SLR   EMCR3,EMCR3                                         1301
*              EMCR3 = '01'X; /*INDICATE SHARED LOCK*/             1302
         LA    EMCR3,1                                             1302
*              CALL ATCLCPTR->ATCCDFND->ISTSDCCF; /*PROCESS REQUEST*/
*                                                                  1303
         L     @06,ATCLCPTR                                        1303
         L     @15,ATCCDFND(,@06)                                  1303
         BALR  @14,@15                                             1303
*            RFY (EMCR2,EMCR3) UNRSTD;                             1304
*            END; /*CIDCTL*/                                       1305
*           IF C06R15=ZERO         /* GOOD CID FIND           @DM8970*/
*             THEN                                                 1306
         LTR   C06R15,C06R15                                       1306
         BNZ   @RF01306                                            1306
*             DO;                                                  1307
*            /********************************************************/
*            /*  NCB POINTER SUCCESSFULLY OBTAINED.                  */
*            /*  REVALIDATE USER AREA AND SET ERROR CODES            */
*            /********************************************************/
*               RFY                                                1308
*                 C06R0 RSTD;                                      1308
*               C06R2=C06R0;        /* SAVE LDNCB POINTER            */
         LR    C06R2,C06R0                                         1309
*               RFY                                                1310
*                 C06R0 UNRSTD;                                    1310
*               CALL C06VALA;       /* VALIDATE USER AREA            */
         BAL   @14,C06VALA                                         1311
*               IF RC=ZERO          /* GOOD VALCHECK         @D32CKTQ*/
*                 THEN                                             1312
         LTR   RC,RC                                               1312
         BNZ   @RF01312                                            1312
*                 DO;                                              1313
*                   LCLIOC =C06R2->LDNZH002;/* MOVE SIO CNTS @ZA08947*/
         L     @14,RPHWEA(,PTRRPH)                                 1314
         L     @14,OCWRPL(,@14)                                    1314
         L     @14,RPLAREA(,@14)                                   1314
         MVC   LCLIOC(2,@14),LDNZH002(C06R2)                       1314
*                   LCLERCT=C06R2->LDNZX001;/* AND TEMP ERROR COUNTS
*                                      TO LDNCB                      */
         MVC   LCLERCT(1,@14),LDNZX001(C06R2)                      1315
*                 END;              /* END OF GOOD VALCK             */
*               ELSE                                               1317
*                 ;                 /* VALCHECK FAILED               */
*                                                                  1317
@RF01312 DS    0H                                                  1318
*            /********************************************************/
*            /*  UNLOCK DAF                                          */
*            /********************************************************/
*               C06R2=RPRNSNEA->RPRCOMID;  /* MOVE CID INTO PARM REG */
         L     @14,RPRNSNEA(,RDTPTR)                               1318
         L     C06R2,RPRCOMID(,@14)                                1318
*               C06R1=PTRRPH;       /* RESTORE RPH PTR TO R1  @DM8393*/
*                                                                  1319
         LR    C06R1,PTRRPH                                        1319
*                DO; /* CIDCTL(FINISH)  */                         1320
*                                                                  1320
*                RFY (EMCR2,EMCR3) RSTD;                           1321
*                  GEN SETS(RPHWORK)                               1322
*        (STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH);      1322
         STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH
*                  EMCR3 = '00'X; /*CLEAR EXTRA BITS*/             1323
         SLR   EMCR3,EMCR3                                         1323
*                  CALL ATCLCPTR->ATCCDFIN->ISTSDCCR; /*PROCESS REQUEST
*/                                                                 1324
         L     @06,ATCLCPTR                                        1324
         L     @15,ATCCDFIN(,@06)                                  1324
         BALR  @14,@15                                             1324
*                RFY (EMCR2,EMCR3) UNRSTD;                         1325
*                END; /*CIDCTL*/                                   1326
*             END;                  /* END OF GOOD CIDCTL FIND       */
*           ELSE                                                   1328
*             DO;                   /* CIDCTL FIND FAILED            */
*                                                                  1328
         B     @RC01306                                            1328
@RF01306 DS    0H                                                  1329
*            /********************************************************/
*            /*  CIDCTL FIND FOR NCB POINTER FAILED.                 */
*            /*  REVALIDATE USER AREA AND SET ERROR CODES            */
*            /********************************************************/
*               CALL C06VALA;                                      1329
         BAL   @14,C06VALA                                         1329
*               IF RC=ZERO THEN                                    1330
         SLR   @14,@14                                             1330
         CR    RC,@14                                              1330
         BNE   @RF01330                                            1330
*                 DO;                                              1331
*                   LCLIOC =ZERO;   /*                       @ZA08947*/
         L     @06,RPHWEA(,PTRRPH)                                 1332
         L     @06,OCWRPL(,@06)                                    1332
         L     @06,RPLAREA(,@06)                                   1332
         STH   @14,LCLIOC(,@06)                                    1332
*                   LCLERCT=ZERO;                                  1333
         MVI   LCLERCT(@06),X'00'                                  1333
*                 END;                                             1334
*               ELSE                                               1335
*                 ;                 /* VALCHEK FAILED                */
@RF01330 DS    0H                                                  1336
*             END;                  /* END CIDCTL FAIL               */
*         END;                      /* END ENOUGH AREA               */
@RC01306 DS    0H                                                  1338
*   RFY                                                            1338
*     C06R14 RSTD;                                                 1338
@RC01263 DS    0H                                                  1338
@RT01261 DS    0H                                                  1339
*   C06R14=RETAPA4;                 /* RESTORE RETURN ADDRESS        */
         L     @06,RPHWEA(,PTRRPH)                                 1339
         L     C06R14,RETAPA4+552(,@06)                            1339
*   END CLCSTAT1;                                                  1340
@EL00013 DS    0H                                                  1340
@EF00013 DS    0H                                                  1340
@ER00013 BR    @14                                                 1340
*                                                                  1341
*/********************************************************************/
*/* ROUTINE NAME: C06VALA - VALIDATE USER AREA                       */
*/*                                                                  */
*/* FUNCTION: CALLED BY MAIN-LINE, CRNSTAT2, AND CLCSTAT2 TO SET     */
*/*         LOCAL MEMORY LOCK AND VALIDITY CHECK USER-SUPPLIED AREA. */
*/*                                                                  */
*/* INPUT:  PTRRPH  (R6) - POINTER TO RPL HEADER (ISTRPH)    @D32CKTQ*/
*/*         C06R14 (R14) - NSI ADDRESS IN CALLING ROUTINE            */
*/*                                                                  */
*/* OUTPUT: RC       (R8) - RETURN CODE (IF ERROR DETECTED)          */
*/*         C06R14  (R14) - NSI ADDRESS IN CALLING ROUTINE           */
*/*                                                                  */
*/* ROUTINES CALLED: NONE                                            */
*/*                                                                  */
*/* MACROS USED: VSETLCK - TO SET LOCAL MEMORY LOCK                  */
*/*              VALCHEK - TO VALIDITY CHECK USER SPECIFIED AREA     */
*/********************************************************************/
*                                                                  1341
*C06VALA:                                                          1341
*   PROC OPTIONS(NOSAVEAREA,DONTSAVE);                             1341
C06VALA  DS    0H                                                  1342
*   RFY                             /* CCCSTAT1 DOESNT       @D32CKTQ*/
*     C06R2  RSTD;                  /*PROTECT ACROSS C06VALA @D32CKTQ*/
*   RETAPA5=C06R14;                 /* SAVE RETURN ADDRESS           */
         L     @06,RPHWEA(,PTRRPH)                                 1343
         ST    C06R14,RETAPA5+552(,@06)                            1343
*   RFY                                                            1344
*     C06R14 UNRSTD;                                               1344
*   C06R13=C06R13+TWELVE;           /* ADJUST SAVEAREA PTR   @XM08755*/
         AH    C06R13,@CH00032                                     1345
*C06OBT1:                                                          1346
*                                                                  1346
*/*VSETLCK  (C06R15,OBTAIN,LOCAL,(LOCAL,ISTSQC06(C06REL1)))*/      1346
*    DO;                                                           1346
C06OBT1  DS    0H                                                  1347
*                                        /*DECLARE AND RESTRICT REGS */
*                                        /*   2,10,11,12,13,14, AND 15
**/                                                                1347
*    RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) RSTD;  1347
*                                        /*SAVE REGS 2 AND 10 THRU 14*/
*        GEN REFS(GPR02F,GPR10F,GPR11F,GPR12F,GPR14F,GPR13P);      1348
*                                                                  1348
         STM   GPR10F,GPR12F,0(GPR13P)
         ST    GPR14F,12(GPR13P)
         ST    GPR02F,16(GPR13P)
*                                        /*INVOKE MODESET TO CHANGE  */
*                                        /*PSW PROTECTION KEY TO 0   */
*        GEN SETS(2);                                              1349
*                                                                  1349
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
*      GPR10P=GPR13P;                    /*PUT SAVE AREA ADDR IN R 10*/
         LR    GPR10P,GPR13P                                       1350
*                                        /*INVOKE OS/VS SETLOCK MACRO*/
*      GEN REFS(GPR13P,PSALITA,FLC) SETS(GPR12F);                  1351
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        *
               RELATED=(LOCAL,ISTSQC06(C06REL1))
*      GPR15P=GPR13P;                    /*PUT RETURN CODE IN R 15 */
         LR    GPR15P,GPR13P                                       1352
*                                        /*INVOKE MODESET MACRO TO   */
*        DO;                             /*RESTORE PSW PROTECTION KEY*/
*        GEN SETS(2);                                              1354
         MODESET KEYADDR=(2),WORKREG=2
*        END;                            /* RESTORE REGISTERS        */
*      GEN REFS(GPR10F,GPR13P) SETS(GPR10F,GPR11F,                 1356
*      GPR12F,GPR13F,GPR14F,GPR02F);                               1356
         LR    GPR13F,GPR10F
         LM    GPR10F,GPR12F,0(GPR13P)
         L     GPR14F,12(GPR13P)
         L     GPR02F,16(GPR13P)
*      IF GPR15F=4 THEN GPR15F=0;                                  1357
         CH    GPR15F,@CH00055                                     1357
         BNE   @RF01357                                            1357
         SLR   GPR15F,GPR15F                                       1358
*      C06R15=GPR15F;                    /*PUT RETURN CODE IN RCREG*/
*                                                                  1359
@RF01357 DS    0H                                                  1360
*    RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) UNRSTD;
*    END;  /*VSETLCK */                                            1361
*   C06R13=C06R13-TWELVE;           /* RESET SAVEAREA PTR    @XM08755*/
         SH    C06R13,@CH00032                                     1362
*   IF C06R15^=ZERO THEN                                           1363
         LTR   C06R15,C06R15                                       1363
         BZ    @RF01363                                            1363
*     RC='0B'X;                     /* LOCK COULD NOT BE OBTAINED    */
         LA    RC,11                                               1364
*   ELSE                                                           1365
*     DO;                                                          1365
         B     @RC01363                                            1365
@RF01363 DS    0H                                                  1366
*       C06R13=C06R13+TWELVE;       /* PROVIDE SAVE AREA (6 WORD ) 1366
*                                      FOR VALCHK                    */
         AH    C06R13,@CH00032                                     1366
*            C06R1=PTRRPH;     /* RESTORE RPH PTR TO REG 1  */     1367
         LR    C06R1,PTRRPH                                        1367
*/*VALCHEK  (C06R15,(C06R13),(RPLAREA),UA,RPLBUFL)  RANGE*/        1368
*        DO;                                                       1368
*                                                                  1368
*        RFY (GPR01P,GPR02P,GPR04P,GPR06P,GPR13P,GPR14P,GPR15P) RSTD;
*                                        /*DECLARE AND RESTRICT REGS*/
*                                        /*  1, 2, 4, 6, 13,14, AND 15
*/         C06R15=0;                    /*SET RETURN CODE TO NO ERROR*/
         SLR   C06R15,C06R15                                       1370
*                                        /*INVOKE XREGSET MACRO TO */
*                                        /*VERIFY SAVEAREA OPERAND */
*                                        /*AND PUT IT IN REG 13    */
*                                                                  1371
*/*XREGSET  PID('SAVEAREA')PPARM((C06R13))RREG(13,GPR13P)*/        1371
*        DO;                                                       1371
*          GPR13P=C06R13;                /*SET RREG SYMBOL TO VALUE*/
*                                        /*OF PPARM OPERAND        */
*        END;  /* XREGSET */                                       1373
*          DCL 1 SAV0058 CHAR(20) BASED(GPR13P),                   1374
*                                        /*ESTABLISH SAVE AREA MAP   */
*                2 SAV10058 CHAR(4),     /*TO SAVE REGS 1,2,4,6, AND 14
*/               2 SAV20058 CHAR(4),                               1374
*                2 SAV40058 CHAR(4),                               1374
*                2 SAV60058 CHAR(4),                               1374
*                2 SAVE0058 CHAR(4);                               1374
*          SAV10058=GPR01F;              /* SAVE REGS ONE,     */  1375
         ST    GPR01F,SAV10058(,GPR13P)                            1375
*          SAV20058=GPR02F;              /*           TWO,     */  1376
         ST    GPR02F,SAV20058(,GPR13P)                            1376
*          SAV40058=GPR04F;              /*          FOUR,     */  1377
         ST    GPR04F,SAV40058(,GPR13P)                            1377
*          SAV60058=GPR06F;              /*          SIX,      */  1378
         ST    GPR06F,SAV60058(,GPR13P)                            1378
*          SAVE0058=GPR14F;              /*     AND FOURTEEN   */  1379
         ST    GPR14F,SAVE0058(,GPR13P)                            1379
*          GPR04P=GPR01P->RPHTSKID;      /*PUT ADDR OF PROCESS SCHED-*/
         L     GPR04P,RPHTSKID(,GPR01P)                            1380
*                                        /*ULING TABLE IN REG 4      */
*                                                                  1381
*/* ATBUILD (ISTPST)  */                                           1381
*/* ***** PROCESS SCHEDULING TABLE FOR VS/2       ****** */        1381
*/*  INITIAL LEVEL                                      001 04/09/75 */
*DCL  1  ISTPST BDY(DWORD) BASED,                                  1381
*        2  PSTTYPE  CHAR(1),          /* CONTROL BLOCK TYPE         */
*        2  PSTLNGTH PTR(8),           /* LENGTH IN BYTES            */
*        2  *        CHAR(2),          /* RESERVED                   */
*        2  PSTCHAIN PTR(31),          /* ADDRESS OF NEXT PST        */
*        2  PSTRQFGA CHAR(8) BDY(DWORD),  /* READY QUEUE AND FLAGS   */
*           3  PSTRQUE PTR(31),        /* READY QUEUE                */
*              4  PSTRQFLG BIT(1),     /* READY QUEUE GATE           */
*              4  PSTRSV01 BIT(1),     /* REVERVED                   */
*              4  PSTRSV02 BIT(1),     /* REVERVED                   */
*              4  PSTRSV03 BIT(1),     /* REVERVED                   */
*              4  PSTRSV04 BIT(1),     /* REVERVED                   */
*              4  PSTRSV05 BIT(1),     /* REVERVED                   */
*              4  PSTRSV06 BIT(1),     /* REVERVED                   */
*              4  PSTRSV07 BIT(1),     /* REVERVED                   */
*              4  PSTRQUEA PTR(24),    /* READY QUEUE                */
*           3  PSTFLGA PTR(32),        /* FLAG FIELD                 */
*              4  PSTSSRN BIT(1),      /* IRB RUNNING SYSTEM SERVICE
*                                         TYPE REQUESTS              */
*              4  PSTUERN BIT(1),      /* IRB RUNNING USER EXIT TYPE
*                                         REQUESTS                   */
*              4  PSTIRBU1 BIT(1),     /* IRB # 1 IN USE             */
*              4  PSTIRBU2 BIT(1),     /* IRB # 2 IN USE             */
*              4  PSTSMQR BIT(1),      /* SMS RPH QUEUED FOR STORAGE */
*              4  PSTSMCU BIT(1),      /* SMS CRA IN USE             */
*              4  PSTAUTH BIT(1),      /* THE TASK THIS PST IS OBTAINED
*                                         FOR IS AUTHORIZED          */
*              4  PSTABINP BIT(1),     /* ABEND IN PROGRESS ON THIS
*                                         TASK                       */
*                 5 PSTABEND BIT(1),   /* TASK ABEND IN PROGRESS     */
*              4  PSTDMPC BIT(1),      /* DUMP HAS BEEN REQUESTED    */
*              4  PSTRSV08 BIT(23),    /* RESERVED                   */
*        2  PSTTCBA PTR(31),           /* TCB POINTER                */
*        2  PSTMPSTP PTR(31),          /* MPST POINTER - PST 6TH WORD*/
*        2  PSTACBCT FIXED(31),        /* COUNT OF OPEN ACB'S USING
*                                         THIS PST                   */
*        2  PSTPSSQ PTR(31),           /* POSTED SYSTEM SERVICE QUEUE*/
*        2  PSTNSSQ PTR(31),           /* NORMAL SYSTEM SERVICE QUEUE*/
*        2  PSTUEQ  PTR(31),           /* USER EXIT QUEUE            */
*        2  PSTIQE11 PTR(31),          /* INACTIVE IQE FOR FIRST IRB */
*        2  PSTIQE12 PTR(31),          /* ACTIVE IQE FOR FIRST IRB   */
*        2  PSTIQE21 PTR(31),          /* INACTIVE IQE FOR 2ND IRB   */
*        2  PSTIQE22 PTR(31),          /* ACTIVE IQE FOR 2ND IRB     */
*        2  PSTCRR1 PTR(31),           /* PREALLOCATED CRA           */
*        2  PSTCRRS PTR(31),           /* SMS CRA                    */
*        2  PSTSMDYP CHAR(LENGTH(ISTDYPAB)) BDY(DWORD), /* SMS PAB   */
*        2  PSTSAVE CHAR(32),          /* SAVE AREA                  */
*        2  PSTDEBP  PTR(31),          /* POINTER TO DEB CHAIN       */
*                                      /* WHEN TASK ABENDS           */
*        2  PSTDMPS  FIXED(31),        /* DUMMY MPST                 */
*           3 PSTDGATE BIT(1),         /* DUMMY MPST GATE BIT        */
*           3 *        BIT(7),         /* NOT TO BE USED             */
*           3 PSTDRDYQ PTR(24);        /* DUMMY MPST READY QUEUE     */
*DCL  PSTSSRN0 BIT(32) CONSTANT('7FFFFFFF'X); /* TURN PSTSSRN OFF    */
*DCL  PSTSSRN1 BIT(32) CONSTANT('80000000'X); /* TURN PSTSSRN ON     */
*DCL  PSTUERN0 BIT(32) CONSTANT('BFFFFFFF'X); /* TURN PSTUERN OFF    */
*DCL  PSTUERN1 BIT(32) CONSTANT('40000000'X); /* TURN PSTUERN ON     */
*DCL  PSTGATE0 BIT(32) CONSTANT('7FFFFFFF'X); /* TURN PST READY QUEUE
*                                                GATE OFF            */
*DCL  PSTGATE1 BIT(32) CONSTANT('80000000'X); /* TURN PST READY QUEUE
*                                                GATE ON             */
*DCL  PSTIRB10 BIT(32) CONSTANT('DFFFFFFF'X); /* TURN PSTIRBU1 OFF   */
*DCL  PSTIRB11 BIT(32) CONSTANT('20000000'X); /* TURN PSTIRBU1 ON    */
*DCL  PSTIRB20 BIT(32) CONSTANT('EFFFFFFF'X); /* TURN PSTIRBU2 OFF   */
*DCL  PSTIRB21 BIT(32) CONSTANT('10000000'X); /* TURN PSTIRBU2 ON    */
*DCL  PSTSMQR0 BIT(32) CONSTANT('F7FFFFFF'X); /* TURN PSTSMQR OFF    */
*DCL  PSTSMQR1 BIT(32) CONSTANT('08000000'X); /* TURN PSTSMQR ON     */
*DCL  PSTSMCU0 BIT(32) CONSTANT('FBFFFFFF'X); /* TURN PSTSMCU OFF    */
*DCL  PSTSMCU1 BIT(32) CONSTANT('04000000'X); /* TURN PSTSMCU ON     */
*DCL  PSTABIP1 BIT(32) CONSTANT('01000000'X); /* TURN PSTABINP ON    */
*DCL  PSTABIP0 BIT(32) CONSTANT('FEFFFFFF'X); /* TURN OFF PSTABINP   */
*DCL  PSTYPE   BIT(8) CONSTANT('61'X);        /* TYPE CODE FOR PST   */
*/* END OF ATBUILD */                    /*INCLUDE PROCESS SCHEDULING *
*                                        /*   TABLE (ISTPST)         */
*          GPR15P=GPR04P->PSTTCBA;       /*PUT TASK CONTROL BLOCK    */
         L     GPR15P,PSTTCBA(,GPR04P)                             1399
*                                        /*ADDRESS IN REGISTER 15    */
*          GPR04F=SAV40058;              /*RESTORE REG 4*/         1400
         L     @03,SAV40058(,GPR13P)                               1400
         LR    GPR04F,@03                                          1400
*                                        /*INVOKE XREGSET MACRO TO */
*                                        /*VERIFY USER AREA OPERAND*/
*                                        /*AND PUT ADDR IN REG 1   */
*                                                                  1401
*/*XREGSET  PID('USER AREA')PPARM((RPLAREA))RREG(,GPR01P)*/        1401
*        DO;                                                       1401
*          GPR01P=RPLAREA;               /*SET RREG SYMBOL TO VALUE*/
         L     @05,RPHWEA(,PTRRPH)                                 1402
         L     @05,OCWRPL(,@05)                                    1402
         L     GPR01P,RPLAREA(,@05)                                1402
*                                        /*OF PPARM OPERAND        */
*        END;  /* XREGSET */                                       1403
*                                        /*INVOKE XREGSET MACRO TO */
*                                        /*VERIFY LENGTH OPERAND   */
*                                        /*AND PUT VALUE IN REG 14 */
*                                                                  1404
*/*XREGSET  PID('LENGTH')PPARM(RPLBUFL)RREG(,GPR14F)OUTPUT(PARM)*/ 1404
*        DO;                                                       1404
*          GPR14F=RPLBUFL;               /*SET RREG SYMBOL TO VALUE*/
         L     GPR14F,RPLBUFL(,@05)                                1405
*                                        /*OF PPARM OPERAND        */
*        END;  /* XREGSET */                                       1406
*        GEN SETS(2);                                              1407
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
*          GPR06P=GPR02P;                                          1408
         LR    GPR06P,GPR02P                                       1408
*          GPR04P=GPR15P;                /*RESTORE TCB ADDR*/      1409
         LR    GPR04P,GPR15P                                       1409
*          GPR02F=GPR01F+GPR14F-1;       /*PUT END ADDRESS IN REG 2  */
         LR    GPR02F,GPR01F                                       1410
         ALR   GPR02F,GPR14F                                       1410
         BCTR  GPR02F,0                                            1410
*          DCL CZMP0058 PTR(31) LOCATION(16);                      1411
*                                        /*ESTABLISH POINTER TO CVT  */
*          CALL CZMP0058->CVT0VL00;      /*INVOKE TASK SUPERVISOR    */
         L     @05,CZMP0058                                        1412
         L     @15,CVT0VL00(,@05)                                  1412
         BALR  @14,@15                                             1412
*                                        /*VALIDITY CHECKING ROUTINE */
*                                        /*UPON RETURN, CHECK PSW    */
*                                        /*CONDITION CODE SET BY THE */
*                                        /*VALIDITY CHECKING ROUTINE */
*          BC (8,OKAY0058);              /*IF ADDR VALID, DON'T ALTER*/
         BC    8,OKAY0058                                          1413
*                                        /*RETURN CODE VALUE FROM 0  */
*          C06R15=4;                     /*SET RETURN CODE TO ERROR  */
         LA    C06R15,4                                            1414
*          GO TO VC30058;                                          1415
         B     VC30058                                             1415
*OKAY0058: C06R15=0;                     /*PUT RETURN CODE IN RCREG  */
OKAY0058 SLR   C06R15,C06R15                                       1416
*VC30058:  GPR02P=GPR06P;                                          1417
VC30058  LR    GPR02P,GPR06P                                       1417
*        GEN SETS(2);                                              1418
         MODESET KEYADDR=(2),WORKREG=2
*          GPR01F=SAV10058;              /*RESTORE REGS ONE,         */
         L     GPR01F,SAV10058(,GPR13P)                            1419
*          GPR02F=SAV20058;              /*            TWO,         */
         L     GPR02F,SAV20058(,GPR13P)                            1420
*          GPR04F=SAV40058;              /*           FOUR,         */
         L     GPR04F,SAV40058(,GPR13P)                            1421
*          GPR06F=SAV60058;              /*           SIX,          */
         L     GPR06F,SAV60058(,GPR13P)                            1422
*          GPR14F=SAVE0058;              /*    AND FOURTEEN         */
*                                                                  1423
         L     GPR14F,SAVE0058(,GPR13P)                            1423
*        RFY (GPR01P,GPR02P,GPR04P,GPR06P,GPR13P,GPR14P,GPR15P) UNRSTD;
*                                        /*UNRESTRICT REGISTERS    */
*        END;  /* VALCHEK */                                       1425
*                                   /* VALIDATE AREA         @D32CKTQ*/
*       IF C06R15^=ZERO THEN                                       1426
         LTR   C06R15,C06R15                                       1426
         BZ    @RF01426                                            1426
*         RC=HEX17;                                                1427
         LA    RC,23                                               1427
*       C06R13=C06R13-TWELVE;       /* RESTORE R13 TO ORIG.          */
@RF01426 SH    C06R13,@CH00032                                     1428
*     END;                          /* END OF GOOD VSETLCK           */
*   RFY                                                            1430
*     C06R14 RSTD;                                                 1430
@RC01363 DS    0H                                                  1431
*   C06R14=RETAPA5;                 /* RESTORE RETURN ADDRESS        */
         L     @06,RPHWEA(,PTRRPH)                                 1431
         L     C06R14,RETAPA5+552(,@06)                            1431
*   END C06VALA;                    /* END OF VALCHECK ROUTINE       */
@EL00014 DS    0H                                                  1432
@EF00014 DS    0H                                                  1432
@ER00014 BR    @14                                                 1432
*/********************************************************************/
*/* ROUTINE NAME: CCCSTAT1 - CLUSTER/CLUSTER CONTROLLER/PU STATUS    */
*/*                                                                  */
*/* FUNCTION: CALLED BY C06DISPA TO OBTAIN INFORMATION FOR CLUSTER,  */
*/*           CLUSTER CONTROLLER,OR PHYSICAL UNIT DISPLAY    @D32CKTQ*/
*/*           INQUIRIES.  FINDS THE REQUIRED BUFFER SIZE,    @D32CKTQ*/
*/*           AND TESTS TO SEE IF THE USER-PROVIDED AREA     @D32CKTQ*/
*/*           IS BIG ENOUGH.  MOVES RDTE INTO THE BUFFER IF  @D32CKTQ*/
*/*           SO.  MOVES SUBAREA, LINE, GROUP, AND RN NAMES  @D32CKTQ*/
*/*           AND TERMINAL, COMPONENT, OR LOGICAL UNIT NAMES @D32CKTQ*/
*/*           (AND SETS THE ACTIVE FLAG IF APPROPRIATE) INTO @D32CKTQ*/
*/*           THE USER-SUPPLIED AREA.  ALSO PROVIDES I/O AND @D32CKTQ*/
*/*           ERROR COUNTS IN THE CASE OF PHYS UNIT IN LOCAL @D32CKTQ*/
*/*           SUBAREA.                                       @D32CKTQ*/
*/*           ADDITIONALLY, FOR EACH ACTIVE LOGICAL UNIT     @X50BHTQ*/
*/*           AN INDICATION IS PROVIDED IF THERE IS A BIND,  @X50BHTQ*/
*/*           UNBIND, OR CLEAR IN PROGRESS.                  @X50BHTQ*/
*/*                                                                  */
*/* INPUT:  RDTPTR   (R4) - POINTER TO CLUSTER/CLUSTER CONTROLLER RDT*/
*/*         PTRRPH   (R6) - RPH BASE                         @D32CKTQ*/
*/*         RC       (R8) - RETURN CODE                              */
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (C06DISPA)   */
*/*                                                                  */
*/* OUTPUT: RC       (R8) - RETURN CODE (TO X'2B' IF USER SUPPLIED   */
*/*                         BUFFER AREA IS INADEQUATE, TO    @X50BHTQ*/
*/*                         X'0B' IF VSETLCK FAILS)          @X50BHTQ*/
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (C06DISPA)   */
*/*         NEEDSIZE      - SIZE OF BUFFER AREA REQUIRED     @D32CKTQ*/
*/*         IF RC=0, RDTE AND LINE, GROUP, AND TERMINAL, COMPONENT,  */
*/*                         AND/OR LOGICAL UNIT NAMES MOVED          */
*/*                         TO USER-SUPPLIED BUFFER                  */
*/*                                                                  */
*/* ROUTINES CALLED: C06VALA                                 @D32CKTQ*/
*/*                  CSETSTLU                                @X50BHTQ*/
*/*                                                                  */
*/* MACROS USED: CIDCTL                                      @D32CKTQ*/
*/********************************************************************/
*                                                                  1433
*CCCSTAT1: PROC OPTIONS(NOSAVEAREA,DONTSAVE);                      1433
CCCSTAT1 DS    0H                                                  1434
*RETTRA1=C06R14;                    /* SAVE RETURN ADDRESS           */
         L     @06,RPHWEA(,PTRRPH)                                 1434
         ST    C06R14,RETTRA1+552(,@06)                            1434
*RFY C06R14 UNRSTD;                                                1435
*RFY COUNT RSTD;                                           /*@D32CKTQ*/
*IF RPRENTRY = RPRENTCC THEN        /* ENTRY IS PHYS UNIT    @D32CKTQ*/
         CLI   RPRENTRY(RDTPTR),X'71'                              1437
         BNE   @RF01437                                            1437
*     COUNT = RCCCTELU;             /* GET COUNT OF LOGICAL UNITS    */
         LH    COUNT,RCCCTELU(,RDTPTR)                             1438
*ELSE                               /* ENTRY IS COMPONENT CLUSTER    */
*     COUNT = RCLCTETR + RCLCTECM;  /* GET COUNT OF TERMINALS AND  1439
*                                          COMPONENTS                */
         B     @RC01437                                            1439
@RF01437 LH    COUNT,RCLCTETR(,RDTPTR)                             1439
         AH    COUNT,RCLCTECM(,RDTPTR)                             1439
*NEEDSIZE = LENGTH(ISTCLSTR) +      /* DETERMINE BUFFER SIZE         */
*  ((LENGTH(CLSTRLUS))*(COUNT-1));  /* NEEDED TO HOLD DATA   @D32CKTQ*/
@RC01437 L     @14,RPHWEA(,PTRRPH)                                 1440
         LR    @10,COUNT                                           1440
         BCTR  @10,0                                               1440
         MH    @10,@CH00033                                        1440
         AH    @10,@CH06018                                        1440
         ST    @10,NEEDSIZE+552(,@14)                              1440
*IF C06CALC=ON2B                    /* CALCULATION-ONLY REQUIRED     */
*     THEN                          /* BYPASS MOVEMENT OF RDTE AND   */
         CH    C06CALC,@CH04855                                    1441
         BE    @RT01441                                            1441
*      ;                            /*    RELATED DATA TO USER AREA  */
*ELSE                                                              1443
*     IF RPLBUFL<NEEDSIZE           /* SPECIFIED SIZE IS TOO SMALL   */
*       THEN                        /* SET CALCULATION-ONLY SWITCH   */
         L     @14,RPHWEA(,PTRRPH)                                 1443
         L     @10,OCWRPL(,@14)                                    1443
         L     @10,RPLBUFL(,@10)                                   1443
         C     @10,NEEDSIZE+552(,@14)                              1443
         BNL   @RF01443                                            1443
*       RC=TWENTYB;                 /*   ON AND RETURN CODE = X'2B'  */
         LA    RC,43                                               1444
*     ELSE                                                         1445
*       DO;                                                        1445
*                                                                  1445
         B     @RC01443                                            1445
@RF01443 DS    0H                                                  1446
*         /***********************************************************/
*         /*    MOVE RDTE AND RELATED DATA TO USER-SUPPLIED AREA     */
*         /***********************************************************/
*         IF RPRENTRY = RPRENTCC THEN  /* PHYSICAL UNIT?     @D32CKTQ*/
         CLI   RPRENTRY(RDTPTR),X'71'                              1446
         BNE   @RF01446                                            1446
*            CLSTRRDT = ISTRCC;     /* MOVE RDTE TO USER AREA        */
         L     @14,RPHWEA(,PTRRPH)                                 1447
         L     @14,OCWRPL(,@14)                                    1447
         L     @14,RPLAREA(,@14)                                   1447
         MVC   CLSTRRDT(148,@14),ISTRCC(RDTPTR)                    1447
*          ELSE                     /* RDTE IS FOR CLUSTER           */
*            CLSTRRDT = ISTRCL;    /* MOVE RDTE TO USER AREA         */
*                                                                  1448
         B     @RC01446                                            1448
@RF01446 L     @14,RPHWEA(,PTRRPH)                                 1448
         L     @14,OCWRPL(,@14)                                    1448
         L     @14,RPLAREA(,@14)                                   1448
         MVI   CLSTRRDT+96(@14),C' '                               1448
         MVC   CLSTRRDT+97(51,@14),CLSTRRDT+96(@14)                1448
         MVC   CLSTRRDT(96,@14),ISTRCL(RDTPTR)                     1448
*       /*************************************************************/
*       /* BLANK OUT FIELDS                                  @D32CKTQ*/
*       /*************************************************************/
*      CLSTRGN=C06BLANK;            /* GROUP NAME            @D32CKTQ*/
@RC01446 L     @14,RPHWEA(,PTRRPH)                                 1449
         L     @14,OCWRPL(,@14)                                    1449
         L     @14,RPLAREA(,@14)                                   1449
         MVC   CLSTRGN(8,@14),@CC04841                             1449
*      CLSTRLN=C06BLANK;            /* LINE NAME             @D32CKTQ*/
         MVC   CLSTRLN(8,@14),@CC04841                             1450
*      CLSTRCUA=C06BLANK;           /* CUA FIELD             @D32CKTQ*/
         MVC   CLSTRCUA(3,@14),@CC04841                            1451
*      CLSTR37X=C06BLANK;           /* RN NAME               @D32CKTQ*/
         MVC   CLSTR37X(8,@14),@CC04841                            1452
*      CLSTRSUB=C06BLANK;           /* SUBAREA HEADER NAME   @D32CKTQ*/
*                                                                  1453
         MVC   CLSTRSUB(8,@14),@CC04841                            1453
*       /*************************************************************/
*       /* PROCESSING FOR PHYSICAL UNIT IN A LOCAL SUBAREA   @D32CKTQ*/
*       /*************************************************************/
*                                                                  1454
*      IF RPRENTRY=RPRENTCC         /* PHYSICAL UNIT         @D32CKTQ*/
*          &RPRHDTYP=RPRENTLS       /* IN LOCAL SUBAREA      @D32CKTQ*/
*        THEN                                                      1454
         CLI   RPRENTRY(RDTPTR),X'71'                              1454
         BNE   @RF01454                                            1454
         CLI   RPRHDTYP(RDTPTR),X'05'                              1454
         BNE   @RF01454                                            1454
*        DO;                                               /*@D32CKTQ*/
*          CLSTRTYP=ON;             /*INDICATE PU IN LCL S/A @D32CKTQ*/
         OI    CLSTRTYP(@14),B'01000000'                           1456
*          RDTPTR=RPRNSNEA;         /* DONT NEED PU RDTE FOR A WHILE */
         L     RDTPTR,RPRNSNEA(,RDTPTR)                            1457
*          CLSTRCUA=RDADACUA;       /* CUA IS IN DA RDTE     @D32CKTQ*/
         MVC   CLSTRCUA(3,@14),RDADACUA(RDTPTR)                    1458
*          CLSTRSUB=RPRNSNEA->RPRNAME; /* USE OF PTR NOTATION ALLOWS */
         L     @10,RPRNSNEA(,RDTPTR)                               1459
         MVC   CLSTRSUB(8,@14),RPRNAME(@10)                        1459
*                                   /*PRESERVATION OF DA PTR @D32CKTQ*/
*          /* LOCKING HIERARCHY REQUIREMENTS REQUIRE RELEASE @D32CKTQ*/
*          /* OF LOCAL MEMORY LOCK BEFORE DOING CIDCTL:      @D32CKTQ*/
*          C06R13=C06R13+TWELVE;                                   1460
         AH    C06R13,@CH00032                                     1460
*C06REL5:                                                          1461
*                                                                  1461
*/*VSETLCK  (C06R15,RELEASE,LOCAL,(LOCAL,ISTSQC06(C06OBT1)))*/     1461
*           DO;                                                    1461
C06REL5  DS    0H                                                  1462
*                                        /*DECLARE AND RESTRICT REGS */
*                                        /*   2,10,11,12,13,14, AND 15
**/                                                                1462
*           RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) RSTD
*                                                                  1462
*                                        /*SAVE REGS 2 AND 10 THRU 14*/
*        GEN REFS(GPR02F,GPR10F,GPR11F,GPR12F,GPR14F,GPR13P);      1463
*                                                                  1463
         STM   GPR10F,GPR12F,0(GPR13P)
         ST    GPR14F,12(GPR13P)
         ST    GPR02F,16(GPR13P)
*                                        /*INVOKE MODESET TO CHANGE  */
*                                        /*PSW PROTECTION KEY TO 0   */
*        GEN SETS(2);                                              1464
*                                                                  1464
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
*             GPR10P=GPR13P;             /*PUT SAVE AREA ADDR IN R 10*/
         LR    GPR10P,GPR13P                                       1465
*                                        /*INVOKE OS/VS SETLOCK MACRO*/
*             GEN REFS(GPR13P,PSALITA,FLC) SETS(GPR12F);           1466
         SETLOCK RELEASE,TYPE=LOCAL,                                   *
               RELATED=(LOCAL,ISTSQC06(C06OBT1))
*             GPR15P=GPR13P;             /*PUT RETURN CODE IN R 15 */
         LR    GPR15P,GPR13P                                       1467
*                                        /*INVOKE MODESET MACRO TO   */
*               DO;                      /*RESTORE PSW PROTECTION KEY*/
*        GEN SETS(2);                                              1469
         MODESET KEYADDR=(2),WORKREG=2
*               END;                     /* RESTORE REGISTERS        */
*             GEN REFS(GPR10F,GPR13P) SETS(GPR10F,GPR11F,          1471
*             GPR12F,GPR13F,GPR14F,GPR02F);                        1471
         LR    GPR13F,GPR10F
         LM    GPR10F,GPR12F,0(GPR13P)
         L     GPR14F,12(GPR13P)
         L     GPR02F,16(GPR13P)
*             IF GPR15F=4 THEN GPR15F=0;                           1472
         CH    GPR15F,@CH00055                                     1472
         BNE   @RF01472                                            1472
         SLR   GPR15F,GPR15F                                       1473
*             C06R15=GPR15F;             /*PUT RETURN CODE IN RCREG*/
*                                                                  1474
@RF01472 DS    0H                                                  1475
*           RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) UNRS
*D;         END;  /*VSETLCK */                                     1475
*          C06R13=C06R13-TWELVE;                                   1477
         SH    C06R13,@CH00032                                     1477
*          C06R2=RPRCOMID;          /* DA DAF                #D32CKTQ*/
         L     C06R2,RPRCOMID(,RDTPTR)                             1478
*          /* NOTE R2 WAS RSTD AT BEGINNING OF C06VALA       #D32CKTQ*/
*          RFY C06R1 RSTD;                                 /*#D32CKTQ*/
*          C06R1=PTRRPH;            /* MACROS LIKE R1->RPH   #D32CKTQ*/
*                                                                  1480
         LR    C06R1,PTRRPH                                        1480
*           DO; /* CIDCTL(FIND)  */                                1481
*                                                                  1481
*           RFY (EMCR2,EMCR3) RSTD;                                1482
*             GEN SETS(RPHWORK)                                    1483
*        (STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH);      1483
         STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH
*             EMCR3 = '00'X; /*CLEAR EXTRA BITS*/                  1484
         SLR   EMCR3,EMCR3                                         1484
*             EMCR3 = '01'X; /*INDICATE SHARED LOCK*/              1485
         LA    EMCR3,1                                             1485
*             CALL ATCLCPTR->ATCCDFND->ISTSDCCF; /*PROCESS REQUEST*/
*                                                                  1486
         L     @10,ATCLCPTR                                        1486
         L     @15,ATCCDFND(,@10)                                  1486
         BALR  @14,@15                                             1486
*           RFY (EMCR2,EMCR3) UNRSTD;                              1487
*           END; /*CIDCTL*/                                  /*#D32CKTQ
*/                                                                 1488
*          RFY C06R0 RSTD;          /* HAS NCB PTR           #D32CKTQ*/
*          C06R2=C06R0;             /* SAVE THE NCB PTR      #D32CKTQ*/
         LR    C06R2,C06R0                                         1490
*          IF C06R15=ZERO           /* CHECK RETURN CODE     #D32CKTQ*/
*            THEN                                                  1491
         LTR   C06R15,C06R15                                       1491
         BNZ   @RF01491                                            1491
*              C06R2=C06R2&C06BTOFF;/* SAVE SUCCESS INDICATOR        */
         N     C06R2,@CF03380                                      1492
*            ELSE                                                  1493
*              C06R2=C06R2×C06HIBIT;/* INDICATE FAILURE      #D32CKTQ*/
         B     @RC01491                                            1493
@RF01491 O     C06R2,@CF03382                                      1493
*          RFY C06R0 UNRSTD;        /* WE HAVE SAVED CONTENT #D32CKTQ*/
@RC01491 DS    0H                                                  1495
*          CALL C06VALA;            /* CALLED FOR VSETLCK    #D32CKTQ*/
         BAL   @14,C06VALA                                         1495
*          IF RC=ZERO               /* SUCCESSFUL CALL?      #D32CKTQ*/
*            THEN;                  /* YES, NO-OP            #D32CKTQ*/
         LTR   RC,RC                                               1496
         BZ    @RT01496                                            1496
*            ELSE                   /* PROCESS IS NOW DOOMED #D32CKTQ*/
*              COUNT=ZERO;          /* SO USE COUNT AS FLAG  #D32CKTQ*/
         SLR   COUNT,COUNT                                         1498
*          IF (C06R2&C06HIBIT)=ZERO /* WAS CIDCTL SUCCESS?   #D32CKTQ*/
*            THEN                   /* WE NEED TO CIDCTL     #D32CKTQ*/
@RT01496 SLR   @14,@14                                             1499
         LR    @10,C06R2                                           1499
         N     @10,@CF03382                                        1499
         CLR   @10,@14                                             1499
         BNE   @RF01499                                            1499
*            DO;                    /* FINISH TO RELEASE LCK #D32CKTQ*/
*              IF RC=ZERO           /* DID C06VALA WORK?     #D32CKTQ*/
*                THEN               /* YES -                 #D32CKTQ*/
         CR    RC,@14                                              1501
         BNE   @RF01501                                            1501
*                DO;                /* PROVIDE INFO:         #D32CKTQ*/
*                  CLSTRIC =C06R2->ICNZH001; /* SIO COUNTS   @ZA08947*/
         L     @14,RPHWEA(,PTRRPH)                                 1503
         L     @14,OCWRPL(,@14)                                    1503
         L     @14,RPLAREA(,@14)                                   1503
         MVC   CLSTRIC(2,@14),ICNZH001(C06R2)                      1503
*                  CLSTRERR=C06R2->ICNZX001; /* TEMP ERRORS  #D32CKTQ*/
         MVC   CLSTRERR(1,@14),ICNZX001(C06R2)                     1504
*                  END;                                    /*#D32CKTQ*/
*                ELSE;              /* OTHERWISE SKIP INFO   #D32CKTQ*/
@RF01501 DS    0H                                                  1507
*              C06R2=RPRCOMID;      /* NEED CID IN REG 2     #D32CKTQ*/
         L     C06R2,RPRCOMID(,RDTPTR)                             1507
*              C06R1=PTRRPH;        /* MAKE SURE R1->RPH     #D32CKTQ*/
*                                                                  1508
         LR    C06R1,PTRRPH                                        1508
*               DO; /* CIDCTL(FINISH)  */                          1509
*                                                                  1509
*               RFY (EMCR2,EMCR3) RSTD;                            1510
*                 GEN SETS(RPHWORK)                                1511
*        (STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH);      1511
         STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH
*                 EMCR3 = '00'X; /*CLEAR EXTRA BITS*/              1512
         SLR   EMCR3,EMCR3                                         1512
*                 CALL ATCLCPTR->ATCCDFIN->ISTSDCCR; /*PROCESS REQUEST*
*                                                                  1513
         L     @10,ATCLCPTR                                        1513
         L     @15,ATCCDFIN(,@10)                                  1513
         BALR  @14,@15                                             1513
*               RFY (EMCR2,EMCR3) UNRSTD;                          1514
*               END; /*CIDCTL*/                            /*#D32CKTQ*/
*              END;                 /* WEVE RELEASED LOCK    #D32CKTQ*/
*            ELSE;                  /* NO EXTRA ACTION TAKEN #D32CKTQ*/
@RF01499 DS    0H                                                  1518
*          RFY C06R2 UNRSTD;        /* FREE IT UP            #D32CKTQ*/
*          END;                     /* END OF LOCAL S/A      #D32CKTQ*/
*       /*************************************************************/
*       /* PROCESS PHYSICAL UNIT IN SWITCHED SUBAREA         #D32CKTQ*/
*       /*************************************************************/
*                                                                  1520
*        ELSE                       /* NOT PU IN LCL S/A     #D32CKTQ*/
*        DO;                                               /*#D32CKTQ*/
         B     @RC01454                                            1520
@RF01454 DS    0H                                                  1521
*          IF RPRENTRY=RPRENTCC     /* PU                    #D32CKTQ*/
*              &RPRHDTYP=RPRENTSW   /* HDR TYPE IS SW S/A    #D32CKTQ*/
*            THEN                                                  1521
         CLI   RPRENTRY(RDTPTR),X'71'                              1521
         BNE   @RF01521                                            1521
         CLI   RPRHDTYP(RDTPTR),X'04'                              1521
         BNE   @RF01521                                            1521
*            DO;                    /* LOOK FOR SW S/A ENTRY #D32CKTQ*/
*              DO WHILE RPRENTRY^=RPRENTSW;                /*#D32CKTQ*/
         B     @DE01523                                            1523
@DL01523 DS    0H                                                  1524
*                RDTPTR=RDTPTR-RPRPELEN;/* KEEP BACKING UP   #D32CKTQ*/
         SH    RDTPTR,RPRPELEN(,RDTPTR)                            1524
*                END;               /* NSNEA VALID IF CONNTD #D32CKTQ*/
@DE01523 CLI   RPRENTRY(RDTPTR),X'04'                              1525
         BNE   @DL01523                                            1525
*              CLSTRSUB=RPRNAME;    /* SUBAREA NAME          #D32CKTQ*/
         L     @14,RPHWEA(,PTRRPH)                                 1526
         L     @10,OCWRPL(,@14)                                    1526
         L     @10,RPLAREA(,@10)                                   1526
         MVC   CLSTRSUB(8,@10),RPRNAME(RDTPTR)                     1526
*              RDTPTR=OCWDRDTE;     /* RESTORE PU RDTE PTR   #D32CKTQ*/
         L     RDTPTR,OCWDRDTE(,@14)                               1527
*              END;                 /* END OF SW S/A PROCESS #D32CKTQ*/
*            ELSE;                                         /*#D32CKTQ*/
*                                                                  1529
@RF01521 DS    0H                                                  1530
*          /**********************************************************/
*          /* FILL IN LINE, GROUP, 370X NAMES AS APPROPRIATE #D32CKTQ*/
*          /**********************************************************/
*                                                                  1530
*          DO WHILE RPRENTRY^=RPRENTSW /* IF WE EXERCISE THIS OPTION */
*                                   /* IT MEANS THE PU IS NOT CONNEC-*/
*                                   /* TED AT ALL AND THAT THERE WILL*/
*                                   /* BE NO LINE, GROUP, OR 370X.   */
*              &RPRENTRY^=RPRENTGP  /* GROUP?                #D32CKTQ*/
*              &RPRENTRY^=RPRENTLN  /* LINE?                 #D32CKTQ*/
*              &RPRENTRY^=RPRENTRN; /* 370X?                 #D32CKTQ*/
         B     @DE01530                                            1530
@DL01530 DS    0H                                                  1531
*            RDTPTR=RPRNSNEA;       /* KEEP LOOKING          #D32CKTQ*/
         L     RDTPTR,RPRNSNEA(,RDTPTR)                            1531
*            END;                                          /*#D32CKTQ*/
@DE01530 CLI   RPRENTRY(RDTPTR),X'04'                              1532
         BE    @DC01530                                            1532
         CLI   RPRENTRY(RDTPTR),X'30'                              1532
         BE    @DC01530                                            1532
         CLI   RPRENTRY(RDTPTR),X'50'                              1532
         BE    @DC01530                                            1532
         CLI   RPRENTRY(RDTPTR),X'01'                              1532
         BNE   @DL01530                                            1532
@DC01530 DS    0H                                                  1533
*          IF RPRENTRY=RPRENTLN     /* IF WE ESCAPED ON A LINE,....  */
*            THEN                                                  1533
         CLI   RPRENTRY(RDTPTR),X'50'                              1533
         BNE   @RF01533                                            1533
*            DO;                                           /*#D32CKTQ*/
*              CLSTRLN=RPRNAME;     /* PROVIDE USER ITS NAME #D32CKTQ*/
         L     @14,RPHWEA(,PTRRPH)                                 1535
         L     @14,OCWRPL(,@14)                                    1535
         L     @14,RPLAREA(,@14)                                   1535
         MVC   CLSTRLN(8,@14),RPRNAME(RDTPTR)                      1535
*              RDTPTR=RPRNSNEA;     /* GET NEXT NODES RDTE   #D32CKTQ*/
         L     RDTPTR,RPRNSNEA(,RDTPTR)                            1536
*              END;                                        /*#D32CKTQ*/
*            ELSE;                                         /*#D32CKTQ*/
@RF01533 DS    0H                                                  1539
*          IF RPRENTRY=RPRENTGP     /* GROUP?                #D32CKTQ*/
*            THEN                                                  1539
         CLI   RPRENTRY(RDTPTR),X'30'                              1539
         BNE   @RF01539                                            1539
*            DO;                                           /*#D32CKTQ*/
*              CLSTRGN=RPRNAME;     /* MOVE IN ITS NAME      #D32CKTQ*/
         L     @14,RPHWEA(,PTRRPH)                                 1541
         L     @14,OCWRPL(,@14)                                    1541
         L     @14,RPLAREA(,@14)                                   1541
         MVC   CLSTRGN(8,@14),RPRNAME(RDTPTR)                      1541
*              RDTPTR=RPRNSNEA;     /* POINT TO NEXT RDTE    #D32CKTQ*/
         L     RDTPTR,RPRNSNEA(,RDTPTR)                            1542
*              END;                                        /*#D32CKTQ*/
*            ELSE;                                         /*#D32CKTQ*/
@RF01539 DS    0H                                                  1545
*          IF RPRENTRY=RPRENTRN     /* 370X?                 #D32CKTQ*/
*            THEN                   /* WONT BE SKIPPED UNLESS PU IS  */
         CLI   RPRENTRY(RDTPTR),X'01'                              1545
         BNE   @RF01545                                            1545
*              CLSTR37X=RPRNAME;    /* IN SW S/A AND DISCONNECTED.   */
         L     @14,RPHWEA(,PTRRPH)                                 1546
         L     @14,OCWRPL(,@14)                                    1546
         L     @14,RPLAREA(,@14)                                   1546
         MVC   CLSTR37X(8,@14),RPRNAME(RDTPTR)                     1546
*            ELSE;                                         /*#D32CKTQ*/
@RF01545 DS    0H                                                  1548
*          END;                     /* END OF NON-LCL S/A PROCESSING */
*                                                                  1548
*      RFY ISTCLSTR BASED(CLSTPTR);  /* CAN USE REG1 NOW -   #D32CKTQ*/
@RC01454 DS    0H                                                  1550
*      CLSTPTR=RPLAREA;             /* DONE TO ALLOW UPDATING OF PTR */
         L     @14,RPHWEA(,PTRRPH)                                 1550
         L     @10,OCWRPL(,@14)                                    1550
         L     CLSTPTR,RPLAREA(,@10)                               1550
*      RDTPTR=OCWDRDTE;             /* RETRIEVE PU RDTE PTR  #D32CKTQ*/
         L     RDTPTR,OCWDRDTE(,@14)                               1551
*       /*************************************************************/
*       /*   RETRIEVE DATA FOR UNITS                                 */
*       /*************************************************************/
*        DO WHILE COUNT > 0;                                       1552
         B     @DE01552                                            1552
@DL01552 DS    0H                                                  1553
*          RDTPTR=RDTPTR+RPRELEN;     /* UPDATE TO NEXT RDT ENTRY    */
         AH    RDTPTR,RPRELEN(,RDTPTR)                             1553
*          IF RPRENTRY = RPRENTTR &   /* IF RDTE IS A TERMINAL AND   */
*                RTRCTECM ^= 0        /* THERE ARE COMPONENT ENTRIES */
*            THEN;                    /* THIS IS A DUMMY RDTE        */
         CLI   RPRENTRY(RDTPTR),X'80'                              1554
         BNE   @RF01554                                            1554
         ICM   @14,3,RTRCTECM(RDTPTR)                              1554
         BNZ   @RT01554                                            1554
*          ELSE DO;                                                1556
@RF01554 DS    0H                                                  1557
*             CLSTRLU=RPRNAME;        /* MOVE SYMBOLIC NAME          */
         MVC   CLSTRLU(8,CLSTPTR),RPRNAME(RDTPTR)                  1557
*             IF RPRONLIN = ON        /* IF UNIT IS ACTIVE           */
*                 THEN DO;                                 /*@X50BHTQ*/
         TM    RPRONLIN(RDTPTR),B'00001000'                        1558
         BNO   @RF01558                                            1558
*                   CLSTRLUA=ON;      /*    SET ACTIVE BIT ON AND    */
         OI    CLSTRLUA(CLSTPTR),B'10000000'                       1560
*                   IF RPRENTRY=RPRENTLU /* CHECK FOR LU     @X50BHTQ*/
*                     THEN            /* CHECK FOR CLEAR,    @X50BHTQ*/
         CLI   RPRENTRY(RDTPTR),X'81'                              1561
         BNE   @RF01561                                            1561
*                     DO;             /* UNBIND OR BIND I.P. @X50BHTQ*/
*                       CALL CSETSTLU; /* CALL SUBR TO LOOK  @X50BHTQ*/
         BAL   @14,CSETSTLU                                        1563
*                       IF RC^=ZERO   /* NO VSETLCK FAILURE? @X50BHTQ*/
*                         THEN;       /* (ONLY A VS2 WORRY)  @X50BHTQ*/
         LTR   RC,RC                                               1564
         BNZ   @RT01564                                            1564
*                         ELSE DO;                         /*@X50BHTQ*/
*                           IF C06R15=FOUR /* BIND I.P.      @X50BHTQ*/
*                           THEN CLSTRBIP=ON;   /*TELL CFCDP @X50BHTQ*/
         CH    C06R15,@CH00055                                     1567
         BNE   @RF01567                                            1567
         OI    CLSTRBIP(CLSTPTR),B'00000010'                       1568
*                           ELSE;                          /*@X50BHTQ*/
@RF01567 DS    0H                                                  1570
*                           IF C06R15=8 /* CLEAR OR UNBIND   @X50BHTQ*/
*                           THEN CLSTCUIP=ON;  /* TELL CFCDP @X50BHTQ*/
         CH    C06R15,@CH00061                                     1570
         BNE   @RF01570                                            1570
         OI    CLSTCUIP(CLSTPTR),B'00000001'                       1571
*                           END;      /* END VSETLCK OK LEG  @X50BHTQ*/
*                       END;          /* END LU LEG          @X50BHTQ*/
*                     ELSE;                                /*@X50BHTQ*/
@RF01561 DS    0H                                                  1575
*                   END;              /* END ACTIVE LEG      @X50BHTQ*/
*                 ELSE;               /* NO-OP IF INACT      @X50BHTQ*/
@RF01558 DS    0H                                                  1577
*             IF RPRACTP=ON&RPRENTRY=RPRENTLU/*ACTIVATE I.P. @XA10138*/
*                 THEN CLSSUBST=CLSACTLU; /* SET BITS        @XA10138*/
@RC01558 TM    RPRACTP(RDTPTR),B'00010000'                         1577
         BNO   @RF01577                                            1577
         CLI   RPRENTRY(RDTPTR),X'81'                              1577
         BNE   @RF01577                                            1577
         OI    CLSSUBST(CLSTPTR),B'00000011'                       1578
*                 ELSE ;              /* OTHERWISE NO-OP     @XA10138*/
@RF01577 DS    0H                                                  1580
*             CLSTPTR = CLSTPTR +     /*   INCREMENT AREA POINTER BY */
*                LENGTH(CLSTRLU)+LENGTH(CLSTRLUA); /* ENTRY LENGTH   */
         AH    CLSTPTR,@CH00033                                    1580
*           END;                                                   1581
*    COUNT = COUNT - 1;               /* DECREMENT ENTRY COUNTER     */
@RT01554 BCTR  COUNT,0                                             1582
*    END;                                                          1583
@DE01552 LTR   COUNT,COUNT                                         1583
         BP    @DL01552                                            1583
*    END;                                                          1584
*RFY C06R1 UNRSTD;                                         /*@D32CKTQ*/
@RC01443 DS    0H                                                  1585
@RT01441 DS    0H                                                  1586
*RFY C06R14 RSTD;                                                  1586
*C06R14 = RETTRA1;                    /* RESTORE RETURN ADDRESS      */
         L     @10,RPHWEA(,PTRRPH)                                 1587
         L     C06R14,RETTRA1+552(,@10)                            1587
*END CCCSTAT1;                                                     1588
@EL00015 DS    0H                                                  1588
@EF00015 DS    0H                                                  1588
@ER00015 BR    @14                                                 1588
*/********************************************************************/
*/* ROUTINE NAME:  CPASTAT1 - PATH INFORMATION               @D32CKTQ*/
*/*                                                          @D32CKTQ*/
*/* FUNCTION:  CALLED BY C06DISPA TO OBTAIN PATH INFORMATION @D32CKTQ*/
*/*            FOR A PHYSICAL UNIT.  FOR EACH PATH, THE PATH @D32CKTQ*/
*/*            TABLE, GROUP NAME, AND TELEPHONE NUMBER (WITH @D32CKTQ*/
*/*            NUMBER'S LENGTH) ARE COPIED INTO ISTDPATH.    @D32CKTQ*/
*/*            ADDITIONALLY, THE AUTODIAL/MANUAL SWITCHES ARE        */
*/*            SET IF THE INFORMATION ABOUT THE LINE IS      @D32CKTQ*/
*/*            AVAILABLE.                                    @D32CKTQ*/
*/*                                                          @D32CKTQ*/
*/* INPUT: RDTPTR  (R4) - POINTER TO PHYS UNIT RDTE          @D32CKTQ*/
*/*        PTRRPH  (R6) - SAVED RPH POINTER                  @D32CKTQ*/
*/*        C06CALC (R8) - CALCULATE INDICATOR                @D32CKTQ*/
*/*        C06R14 (R14) - NSI ADDR IN CALLING SUBR(C06DISPA) @D32CKTQ*/
*/*                                                          @D32CKTQ*/
*/* OUTPUT: RC       (R8) - RETURN CODE (TO X'2B' IF USER SUPPLIED   */
*/*                         BUFFER AREA IS INADEQUATE)       @D32CKTQ*/
*/*         C06R14  (R14) - NSI ADDR IN CALLING ROUTINE (C06DISPA)   */
*/*         NEEDSIZE      - SIZE OF BUFFER AREA REQUIRED     @D32CKTQ*/
*/*                                                          @D32CKTQ*/
*/* ROUTINES CALLED: ISTOCCDF (SRTDELFD) - TO FIND GROUP RDTE        */
*/*                                                          @D32CKTQ*/
*/* MACROS USED: NONE                                        @D32CKTQ*/
*/********************************************************************/
*                                                                  1589
*CPASTAT1: PROC OPTIONS(NOSAVEAREA,DONTSAVE);              /*@D32CKTQ*/
CPASTAT1 DS    0H                                                  1590
*RETTRA1=C06R14;                    /* SAVE RETURN REG       @D32CKTQ*/
         LA    @10,552                                             1590
         AL    @10,RPHWEA(,PTRRPH)                                 1590
         ST    C06R14,RETTRA1(,@10)                                1590
*RFY C06R14 UNRSTD;                 /* FREE FOR USE BY CMPLR @D32CKTQ*/
*RFY  (NDX,                                                        1592
*      PATPTR) RSTD;                                       /*@D32CKTQ*/
*NEEDSIZE=LENGTH(DPAARRAY)*RCCPATHZ;/* ONE COPY PER PATH     @D32CKTQ*/
*                                                                  1593
         LA    @14,552                                             1593
         AL    @14,RPHWEA(,PTRRPH)                                 1593
         LH    @06,RCCPATHZ(,RDTPTR)                               1593
         MH    @06,@CH06019                                        1593
         ST    @06,NEEDSIZE(,@14)                                  1593
*IF C06CALC=ON2B                    /* CALCULATE ONLY?       @D32CKTQ*/
*  THEN                                                            1594
         CH    C06CALC,@CH04855                                    1594
         BNE   @RF01594                                            1594
*  DO;                                                     /*@D32CKTQ*/
*    IF NEEDSIZE=ZERO               /* IF THERE ARE NO PATHS,        */
*      THEN                         /* THEN                  @D32CKTQ*/
         SLR   @14,@14                                             1596
         CR    @06,@14                                             1596
         BNE   @RF01596                                            1596
*        RC=ZERO;                   /* DONT BOTHER TO CALL C06 AGAIN */
         LR    RC,@14                                              1597
*      ELSE;                                               /*@D32CKTQ*/
@RF01596 DS    0H                                                  1599
*    END;                                                  /*@D32CKTQ*/
*  ELSE                             /* OTHERWISE MOVE THE INFO       */
*    DO;                                                   /*@D32CKTQ*/
         B     @RC01594                                            1600
@RF01594 DS    0H                                                  1601
*      IF RPLBUFL<NEEDSIZE          /* IF AREA INSUFFICIENT  @D32CKTQ*/
*        THEN                                                      1601
         L     @14,RPHWEA(,PTRRPH)                                 1601
         L     @06,OCWRPL(,@14)                                    1601
         L     @06,RPLBUFL(,@06)                                   1601
         C     @06,NEEDSIZE+552(,@14)                              1601
         BNL   @RF01601                                            1601
*          RC=TWENTYB;              /* SET RETURN CODE       @D32CKTQ*/
         LA    RC,43                                               1602
*        ELSE                       /* OTHERWISE CONTINUE    @D32CKTQ*/
*          DO;                                             /*@D32CKTQ*/
         B     @RC01601                                            1603
@RF01601 DS    0H                                                  1604
*            COUNT=RCCPATHZ;        /* NUMBER OF PATHS       @D32CKTQ*/
         LH    COUNT,RCCPATHZ(,RDTPTR)                             1604
*            PATPTR=RCCPATHT;       /* POINT TO GROUP'S PATH TABLE   */
         L     PATPTR,RCCPATHT(,RDTPTR)                            1605
*            DO WHILE RPRENTRY^=RPRENTSW;/* SEEK HEADER RDTE @D32CKTQ*/
         B     @DE01606                                            1606
@DL01606 DS    0H                                                  1607
*              RDTPTR=RDTPTR-RPRPELEN; /* KEEP BACKING UP    @D32CKTQ*/
         SH    RDTPTR,RPRPELEN(,RDTPTR)                            1607
*              END;                 /* UNTIL YOU FIND IT     @D32CKTQ*/
@DE01606 CLI   RPRENTRY(RDTPTR),X'04'                              1608
         BNE   @DL01606                                            1608
*              RFY (C06R0,C06R1) RSTD; /* FOR USE BY SRTDELFD@D32CKTQ*/
*            DO WHILE COUNT>ZERO;   /* FOR EACH TABLE ENTRY: @D32CKTQ*/
         B     @DE01610                                            1610
@DL01610 DS    0H                                                  1611
*              NDX=(OCWDRDTE->RCCPATHZ)-COUNT+1; /* USED 3 TIMES     */
         L     @14,RPHWEA(,PTRRPH)                                 1611
         L     @06,OCWDRDTE(,@14)                                  1611
         LH    NDX,RCCPATHZ(,@06)                                  1611
         SLR   NDX,COUNT                                           1611
         AH    NDX,@CH00063                                        1611
*              DPAMAP(NDX)=ISTPAT;  /* MOVE IN AN ENTRY      @D32CKTQ*/
         LR    @06,NDX                                             1612
         MH    @06,@CH06019                                        1612
         L     @05,OCWRPL(,@14)                                    1612
         L     @05,RPLAREA(,@05)                                   1612
         ALR   @06,@05                                             1612
         AL    @06,@CF06031                                        1612
         MVC   DPAMAP-8(8,@06),ISTPAT(PATPTR)                      1612
*              /******************************************************/
*              /* MOVE GROUP NAME, LENGTH OF TELEPHONE       @D32CKTQ*/
*              /* NUMBER, AND THE TELEPHONE NUMBER ITSELF    @D32CKTQ*/
*              /* FOR EACH PATH INTO THE CALLER'S BUFFER.    @D32CKTQ*/
*              /* ASSUMPTION:PATGINDX,PATDINDX INCREMENT BY 1        */
*              /******************************************************/
*              DPAGRPNM(NDX)=                                      1613
*                (RSWGRUPT+PATGINDX*LENGTH(ISTGNT))->GNTGRPNM;     1613
         LR    @06,NDX                                             1613
         MH    @06,@CH06019                                        1613
         ALR   @06,@05                                             1613
         AL    @06,@CF06032                                        1613
         LH    @03,PATGINDX(,PATPTR)                               1613
         SLA   @03,3                                               1613
         AL    @03,RSWGRUPT(,RDTPTR)                               1613
         MVC   DPAGRPNM(8,@06),GNTGRPNM(@03)                       1613
*              DPACTDIG(NDX)=                                      1614
*                (RSWDIALT+PATDINDX*LENGTH(ISTDNT))->DNTCTDIG;     1614
         LR    @06,NDX                                             1614
         MH    @06,@CH06019                                        1614
         LH    @03,PATDINDX(,PATPTR)                               1614
         MH    @03,@CH01817                                        1614
         AL    @03,RSWDIALT(,RDTPTR)                               1614
         SLR   @14,@14                                             1614
         IC    @14,DNTCTDIG(,@03)                                  1614
         LA    @06,0(@06,@05)                                      1614
         AL    @06,@CF06033                                        1614
         STC   @14,DPACTDIG-16(,@06)                               1614
*              DPATELNO(NDX)=                                      1615
*                (RSWDIALT+PATDINDX*LENGTH(ISTDNT))->DNTTELNO;     1615
         LR    @14,NDX                                             1615
         MH    @14,@CH06019                                        1615
         ALR   @14,@05                                             1615
         AL    @14,@CF06034                                        1615
         MVC   DPATELNO-17(32,@14),DNTTELNO(@03)                   1615
*              C06R0=ADDR(DPAGRPNM(NDX)); /* GROUP NAME      @D32CKTQ*/
         LR    @14,NDX                                             1616
         MH    @14,@CH06019                                        1616
         AL    @05,@CF06032                                        1616
         LA    C06R0,DPAGRPNM(@14,@05)                             1616
*              C06R0=C06R0×C06HIBIT;   /* HI ORDER BIT ON    @D32CKTQ*/
         O     C06R0,@CF03382                                      1617
*              C06R1=ZERO&C06BTOFF; /* HI ORDER BIT OFF      @D32CKTQ*/
         SLR   C06R1,C06R1                                         1618
*              C06R2=C06R2&C06BTOFF;/* HI ORDER BIT OFF, BUT CARE    */
         N     C06R2,@CF03380                                      1619
*              /* MUST BE TAKEN TO PRESERVE VALUE OF NDX.    @D32CKTQ*/
*              CALL OCWACVT->ATCSRTDF->ISTOCCDF; /* FIND GROUP RDTE  */
*                                                                  1620
         L     @06,RPHWEA(,PTRRPH)                                 1620
         L     @06,OCWACVT(,@06)                                   1620
         L     @15,ATCSRTDF(,@06)                                  1620
         BALR  @14,@15                                             1620
*              /******************************************************/
*              /* PROVIDE AUTODIAL/MANUAL INDICATOR          @D32CKTQ*/
*              /******************************************************/
*                                                                  1621
*              IF C06R15=ZERO       /* CHECK SRTDF RETURN CODE       */
*                THEN               /* GOOD RC MEANS WE HAVE @D32CKTQ*/
         LTR   C06R15,C06R15                                       1621
         BNZ   @RF01621                                            1621
*                DO;                /* PTR TO GROUP RDTE     @D32CKTQ*/
*                  C06R0=(C06R0->RPRELEN)+C06R0; /* SEE IF NEXT RDTE */
         LR    @14,C06R0                                           1623
         AH    C06R0,RPRELEN(,@14)                                 1623
*                  IF C06R0->RPRENTRY=RPRENTLN /* IS A LINE  @D32CKTQ*/
*                    THEN           /* YES, CHECK FOR        @D32CKTQ*/
         LR    @14,C06R0                                           1624
         CLI   RPRENTRY(@14),X'50'                                 1624
         BNE   @RF01624                                            1624
*                      IF C06R0->RLNAUTOD=ON /* AUTODIAL     @D32CKTQ*/
*                        THEN                                      1625
         LR    @14,C06R0                                           1625
         TM    RLNAUTOD(@14),B'00100000'                           1625
         BNO   @RF01625                                            1625
*                          DPAAUTOD(NDX)=ON;               /*@D32CKTQ*/
         LR    @14,NDX                                             1626
         MH    @14,@CH06019                                        1626
         L     @06,RPHWEA(,PTRRPH)                                 1626
         L     @06,OCWRPL(,@06)                                    1626
         L     @06,RPLAREA(,@06)                                   1626
         ALR   @06,@14                                             1626
         AL    @06,@CF06035                                        1626
         OI    DPAAUTOD-49(@06),B'01000000'                        1626
*                        ELSE                              /*@D32CKTQ*/
*                          DPAMAN(NDX)=ON; /* OR MANUAL      @D32CKTQ*/
         B     @RC01625                                            1627
@RF01625 LR    @14,NDX                                             1627
         MH    @14,@CH06019                                        1627
         L     @06,RPHWEA(,PTRRPH)                                 1627
         L     @06,OCWRPL(,@06)                                    1627
         L     @06,RPLAREA(,@06)                                   1627
         ALR   @06,@14                                             1627
         AL    @06,@CF06035                                        1627
         OI    DPAMAN-49(@06),B'10000000'                          1627
*                    ELSE;          /* NOT A LINE            @D32CKTQ*/
@RF01624 DS    0H                                                  1629
*                  END;             /* END OF GOOD SRTDF GROUP       */
*                ELSE;              /* FAILED TO FIND RDTE   @D32CKTQ*/
@RF01621 DS    0H                                                  1631
*              PATPTR=PATPTR+LENGTH(ISTPAT); /* NEXT PATH TABLE ENTRY*/
@RC01621 AH    PATPTR,@CH00061                                     1631
*              COUNT=COUNT-1;       /* DECREMENT PATH COUNTER        */
         BCTR  COUNT,0                                             1632
*              END;                 /* END OF DO GROUP       @D32CKTQ*/
@DE01610 LTR   COUNT,COUNT                                         1633
         BP    @DL01610                                            1633
*            END;                   /* END OF SUFFICIENT AREA GROUP  */
*      END;                         /* END OF NON-CALC GROUP @D32CKTQ*/
@RC01601 DS    0H                                                  1636
*  RFY C06R14 RSTD;                                        /*@D32CKTQ*/
@RC01594 DS    0H                                                  1637
*  C06R14=RETTRA1;                  /* RESTORE NSI ADDR      @D32CKTQ*/
         L     @06,RPHWEA(,PTRRPH)                                 1637
         L     C06R14,RETTRA1+552(,@06)                            1637
*  END CPASTAT1;                                           /*@D32CKTQ*/
@EL00016 DS    0H                                                  1638
@EF00016 DS    0H                                                  1638
@ER00016 BR    @14                                                 1638
*/********************************************************************/
*/* ROUTINE NAME: CSETSTLU - DETERMINE OUSTANDING I/O        @X50BHTQ*/
*/*                                                          @X50BHTQ*/
*/* FUNCTION: CALLED TO EXAMINE ANY FMCB FOR THE SPECIFIED   @X50BHTQ*/
*/*           LOGICAL UNIT AND DETERMINE IF THERE IS A       @X50BHTQ*/
*/*           BIND, CLEAR, OR UNBIND IN PROGRESS.            @X50BHTQ*/
*/*                                                          @X50BHTQ*/
*/* INPUT:  RDTPTR   (R4) - POINTER TO LU RDTE               @X50BHTQ*/
*/*         C06R14  (R14) - POINTER TO NSI                   @X50BHTQ*/
*/*                                                          @X50BHTQ*/
*/* OUTPUT:  RC       (R8) - 0-SUCCESSFUL VSETLCK            @X50BHTQ*/
*/*                         X'0B'-VSETLCK FAILURE            @X50BHTQ*/
*/*                         X'17'-VALCHEK FAILURE-SHOULD NOT OCCUR   */
*/*          C06R15  (R15) - 0-FMCB FOUND, NEITHER BIND NOR  @X50BHTQ*/
*/*                            CLEAR OR UNBIND IN PROGRESS   @X50BHTQ*/
*/*                          4-BIND IN PROGRESS              @X50BHTQ*/
*/*                          8-CLEAR OR UNBIND IN PROGRESS   @X50BHTQ*/
*/*                         12-NO FMCB'S ON LUNCB            @X50BHTQ*/
*/*                         16-NON-ZERO RC; CATASTROPHIC     @X50BHTQ*/
*/* ROUTINES CALLED: C06VALA - TO REOBTAIN LOCAL MEMORY LOCK @X50BHTQ*/
*/*                            (VS2 ONLY) SURRENDERRED IN    @X50BHTQ*/
*/*                            ORDER TO ISSUE CIDCTL(FIND).  @X50BHTQ*/
*/*                                                          @X50BHTQ*/
*/* MACROS USED:  VSETLCK - TO RELEASE LOCAL MEMORY LOCK     @X50BHTQ*/
*/*                         (VS2 ONLY) BEFORE ISSUING CIDCTL-@X50BHTQ*/
*/*                         THIS IS A LOCKING HIERARCHY      @X50BHTQ*/
*/*                         REQUIREMENT.                     @X50BHTQ*/
*/*               CIDCTL - TO OBTAIN POINTER TO LUNCB        @X50BHTQ*/
*/********************************************************************/
*                                                                  1639
*CSETSTLU: PROC OPTIONS(NOSAVEAREA,DONTSAVE);              /*@X50BHTQ*/
CSETSTLU DS    0H                                                  1640
*RETSTLU=C06R14;                    /* SAVE RETURN REG       @X50BHTQ*/
         LA    @06,552                                             1640
         AL    @06,RPHWEA(,PTRRPH)                                 1640
         ST    C06R14,RETSTLU(,@06)                                1640
*RFY C06R14 UNRSTD;                                        /*@X50BHTQ*/
*STM(C06R0,C06R2,RETSAV02);         /* OTHERWISE DESTROYED   @X50BHTQ*/
         STM   C06R0,C06R2,RETSAV02(@06)                           1642
*/* LOCKING HIERARCHY REQUIREMENTS CALL FOR RELEASE OF       @X50BHTQ*/
*/* LOCAL MEMORY LOCK BEFORE ISSUING CIDCTL:                 @X50BHTQ*/
*C06R13=C06R13+TWELVE;              /* BUMP SAVEAREA PTR     @X50BHTQ*/
         AH    C06R13,@CH00032                                     1643
*C06REL7:                                                          1644
*/*VSETLCK  (C06R15,RELEASE,LOCAL,(LOCAL,ISTSQC06(C06OBT1)))*/     1644
* DO;                                                              1644
C06REL7  DS    0H                                                  1645
*                                        /*DECLARE AND RESTRICT REGS */
*                                        /*   2,10,11,12,13,14, AND 15
**/                                                                1645
* RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) RSTD;     1645
*                                        /*SAVE REGS 2 AND 10 THRU 14*/
*        GEN REFS(GPR02F,GPR10F,GPR11F,GPR12F,GPR14F,GPR13P);      1646
*                                                                  1646
         STM   GPR10F,GPR12F,0(GPR13P)
         ST    GPR14F,12(GPR13P)
         ST    GPR02F,16(GPR13P)
*                                        /*INVOKE MODESET TO CHANGE  */
*                                        /*PSW PROTECTION KEY TO 0   */
*        GEN SETS(2);                                              1647
*                                                                  1647
         MODESET EXTKEY=ZERO,SAVEKEY=(2),WORKREG=2
*   GPR10P=GPR13P;                       /*PUT SAVE AREA ADDR IN R 10*/
         LR    GPR10P,GPR13P                                       1648
*                                        /*INVOKE OS/VS SETLOCK MACRO*/
*   GEN REFS(GPR13P,PSALITA,FLC) SETS(GPR12F);                     1649
         SETLOCK RELEASE,TYPE=LOCAL,                                   *
               RELATED=(LOCAL,ISTSQC06(C06OBT1))
*   GPR15P=GPR13P;                       /*PUT RETURN CODE IN R 15 */
         LR    GPR15P,GPR13P                                       1650
*                                        /*INVOKE MODESET MACRO TO   */
*     DO;                                /*RESTORE PSW PROTECTION KEY*/
*        GEN SETS(2);                                              1652
         MODESET KEYADDR=(2),WORKREG=2
*     END;                               /* RESTORE REGISTERS        */
*   GEN REFS(GPR10F,GPR13P) SETS(GPR10F,GPR11F,                    1654
*   GPR12F,GPR13F,GPR14F,GPR02F);                                  1654
         LR    GPR13F,GPR10F
         LM    GPR10F,GPR12F,0(GPR13P)
         L     GPR14F,12(GPR13P)
         L     GPR02F,16(GPR13P)
*   IF GPR15F=4 THEN GPR15F=0;                                     1655
         CH    GPR15F,@CH00055                                     1655
         BNE   @RF01655                                            1655
         SLR   GPR15F,GPR15F                                       1656
*   C06R15=GPR15F;                       /*PUT RETURN CODE IN RCREG*/
*                                                                  1657
@RF01655 DS    0H                                                  1658
* RFY (GPR02P,GPR10P,GPR11P,GPR12P,GPR13P,GPR14P,GPR15P) UNRSTD;   1658
* END;  /*VSETLCK */ /*@X50BHTQ*/                                  1659
*C06R13=C06R13-TWELVE;              /* UNBUMP                @X50BHTQ*/
         SH    C06R13,@CH00032                                     1660
*RFY (C06R0,C06R1,C06R2) RSTD;                             /*@X50BHTQ*/
*C06R2=ZERO×RPRDAF;                 /* ZERO SAF,LU DAF       @X50BHTQ*/
         SLR   C06R2,C06R2                                         1662
         ICM   C06R2,3,RPRDAF(RDTPTR)                              1662
*C06R1=PTRRPH;                      /* MACROS WANT R1->RPH   @X50BHTQ*/
*                                                                  1663
         LR    C06R1,PTRRPH                                        1663
* DO; /* CIDCTL(FIND)  */                                          1664
*                                                                  1664
* RFY (EMCR2,EMCR3) RSTD;                                          1665
*   GEN SETS(RPHWORK)                                              1666
*        (STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH);      1666
         STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH
*   EMCR3 = '00'X; /*CLEAR EXTRA BITS*/                            1667
         SLR   EMCR3,EMCR3                                         1667
*   EMCR3 = '01'X; /*INDICATE SHARED LOCK*/                        1668
         LA    EMCR3,1                                             1668
*   CALL ATCLCPTR->ATCCDFND->ISTSDCCF; /*PROCESS REQUEST*/         1669
*                                                                  1669
         L     @06,ATCLCPTR                                        1669
         L     @15,ATCCDFND(,@06)                                  1669
         BALR  @14,@15                                             1669
* RFY (EMCR2,EMCR3) UNRSTD;                                        1670
* END; /*CIDCTL*/                                            /*@X50BHTQ
*/                                                                 1671
*C06R2=C06R0;             /* R2 PROTECTED ACROSS C06VALA     @X50BHTQ*/
         LR    C06R2,C06R0                                         1672
*RFY (C06R0,C06R1) UNRSTD;                                 /*@X50BHTQ*/
*IF C06R15^=ZERO                    /* CHECK CIDCTL RET CODE @X50BHTQ*/
*  THEN                             /* CIDCTL FAILURE        @X50BHTQ*/
         LTR   C06R15,C06R15                                       1674
         BZ    @RF01674                                            1674
*  DO;                                                     /*@X50BHTQ*/
*    CALL C06VALA;                  /* NEED LOCAL MEMORY LCK @X50BHTQ*/
         BAL   @14,C06VALA                                         1676
*    IF RC=ZERO                     /* GOT IT?               @X50BHTQ*/
*      THEN C06R15=TWELVE;          /* YES                   @X50BHTQ*/
         LTR   RC,RC                                               1677
         BNZ   @RF01677                                            1677
         LA    C06R15,12                                           1678
*      ELSE C06R15=16;              /* NO                    @X50BHTQ*/
         B     @RC01677                                            1679
@RF01677 LA    C06R15,16                                           1679
*    END;                                                  /*@X50BHTQ*/
*  ELSE                             /* GOOD CIDCTL           @X50BHTQ*/
*  DO;                                                     /*@X50BHTQ*/
         B     @RC01674                                            1681
@RF01674 DS    0H                                                  1682
*    CALL C06VALA;                  /* GET LOCAL MEMORY LOCK @X50BHTQ*/
         BAL   @14,C06VALA                                         1682
*    IF RC^=ZERO                    /* DID NOT GET IT BACK   @X50BHTQ*/
*      THEN C06R15=16;              /* DISASTER              @X50BHTQ*/
         LTR   RC,RC                                               1683
         BZ    @RF01683                                            1683
         LA    C06R15,16                                           1684
*      ELSE                         /* OTHERWISE CONTINUE    @X50BHTQ*/
*      DO;                                                 /*@X50BHTQ*/
         B     @RC01683                                            1685
@RF01683 DS    0H                                                  1686
*        IF C06R2->NCBFMCBA=ZERO    /* IS THERE AN FMCB?     @X50BHTQ*/
*          THEN C06R15=TWELVE;      /* NO                    @X50BHTQ*/
         ICM   @14,15,NCBFMCBA(C06R2)                              1686
         BNZ   @RF01686                                            1686
         LA    C06R15,12                                           1687
*          ELSE                     /* YES-CHECK IT OUT      @X50BHTQ*/
*          DO;                                             /*@X50BHTQ*/
         B     @RC01686                                            1688
@RF01686 DS    0H                                                  1689
*            C06R2=C06R2->NCBFMCBA; /* POINT TO FMCB         @X50BHTQ*/
         L     C06R2,NCBFMCBA(,C06R2)                              1689
*            IF C06R2->FMCBIP=ON    /* BIND IN PROGRESS      @X50BHTQ*/
*              THEN C06R15=FOUR;      /* INFORM CALLER       @X50BHTQ*/
         TM    FMCBIP(C06R2),B'00001000'                           1690
         BNO   @RF01690                                            1690
         LA    C06R15,4                                            1691
*              ELSE                 /* CONTINUE CHECKING     @X50BHTQ*/
*                IF C06R2->FMCCIPI=ON× /* CLEAR OR           @X50BHTQ*/
*                   C06R2->FMCUIPI=ON /* UNBIND              @X50BHTQ*/
*                  THEN C06R15=8;   /* SET RETURN CODE       @X50BHTQ*/
         B     @RC01690                                            1692
@RF01690 TM    FMCCIPI(C06R2),B'01100000'                          1692
         BZ    @RF01692                                            1692
         LA    C06R15,8                                            1693
*                  ELSE DO;          /* NO RELEVANT ACTIVITY @X50BHTQ*/
         B     @RC01692                                            1694
@RF01692 DS    0H                                                  1695
*                    C06R2=C06R2->FMCFMCBA;/*IN 1ST FMCB-DO 2@X50BHTQ*/
         L     C06R2,FMCFMCBA(,C06R2)                              1695
*                    IF C06R2=ZERO   /* IS THERE A SECOND?   @X50BHTQ*/
*                      THEN C06R15=ZERO; /* NO ACTIVITY      @X50BHTQ*/
         SLR   @14,@14                                             1696
         CR    C06R2,@14                                           1696
         BNE   @RF01696                                            1696
         LR    C06R15,@14                                          1697
*                      ELSE          /* CHECK THE SECOND     @X50BHTQ*/
*                        IF C06R2->FMCBIP=ON /* BIND I.P.    @X50BHTQ*/
*                          THEN C06R15=FOUR; /* TELL CALLER  @X50BHTQ*/
         B     @RC01696                                            1698
@RF01696 TM    FMCBIP(C06R2),B'00001000'                           1698
         BNO   @RF01698                                            1698
         LA    C06R15,4                                            1699
*                          ELSE IF C06R2->FMCCIPI=ON× /*CLEAR@X50BHTQ*/
*                                  C06R2->FMCUIPI=ON /*UNBIND@X50BHTQ*/
*                                THEN C06R15=8;            /*@X50BHTQ*/
         B     @RC01698                                            1700
@RF01698 TM    FMCCIPI(C06R2),B'01100000'                          1700
         BZ    @RF01700                                            1700
         LA    C06R15,8                                            1701
*                                ELSE C06R15=ZERO;         /*@X50BHTQ*/
         B     @RC01700                                            1702
@RF01700 SLR   C06R15,C06R15                                       1702
*                                /* NO REPORTABLE ACTIVITY   @X50BHTQ*/
*                    END;                                  /*@X50BHTQ*/
@RC01700 DS    0H                                                  1703
@RC01698 DS    0H                                                  1703
@RC01696 DS    0H                                                  1704
*            END;                   /* END FMCB PRESENT LEG  @X50BHTQ*/
@RC01692 DS    0H                                                  1704
@RC01690 DS    0H                                                  1705
*        END;                       /* END RC=0 LEG          @X50BHTQ*/
@RC01686 DS    0H                                                  1706
*    C06R2=RPRCOMID;                /* CID IN REG2           @X50BHTQ*/
@RC01683 L     C06R2,RPRCOMID(,RDTPTR)                             1706
*    RFY C06R1 RSTD;                                       /*@X50BHTQ*/
*    C06R1=PTRRPH;                  /*POINT TO RPH FOR MACRO @X50BHTQ*/
         LR    C06R1,PTRRPH                                        1708
*    C06R0=C06R15;                  /* CIDCTL KILLS REG15    @X50BHTQ*/
*                                                                  1709
         LR    C06R0,C06R15                                        1709
*    DO; /* CIDCTL(FINISH)  */                                     1710
*                                                                  1710
*    RFY (EMCR2,EMCR3) RSTD;                                       1711
*      GEN SETS(RPHWORK)                                           1712
*        (STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH);      1712
         STM EMCR0,EMCR15,RPHWORK(RPHPTR) SAVE REGS IN RPH
*      EMCR3 = '00'X; /*CLEAR EXTRA BITS*/                         1713
         SLR   EMCR3,EMCR3                                         1713
*      CALL ATCLCPTR->ATCCDFIN->ISTSDCCR; /*PROCESS REQUEST*/      1714
*                                                                  1714
         L     @06,ATCLCPTR                                        1714
         L     @15,ATCCDFIN(,@06)                                  1714
         BALR  @14,@15                                             1714
*    RFY (EMCR2,EMCR3) UNRSTD;                                     1715
*    END; /*CIDCTL*/                                       /*@X50BHTQ*/
*    C06R15=C06R0;                  /* RESTORE               @X50BHTQ*/
         LR    C06R15,C06R0                                        1717
*    RFY (C06R1,C06R2) UNRSTD;                             /*@X50BHTQ*/
*    END;                           /* END SUCCESSFUL CIDCTL @X50BHTQ*/
*LM(C06R0,C06R2,RETSAV02);          /* RESTORE 0,1,2         @X50BHTQ*/
@RC01674 L     @14,RPHWEA(,PTRRPH)                                 1720
         LM    C06R0,C06R2,RETSAV02+552(@14)                       1720
*RFY C06R14 RSTD;                                          /*@X50BHTQ*/
*C06R14=RETSTLU;                    /* RESTORE RETURN REG    @X50BHTQ*/
         L     @06,RPHWEA(,PTRRPH)                                 1722
         L     C06R14,RETSTLU+552(,@06)                            1722
*END CSETSTLU;                                             /*@X50BHTQ*/
*                                                                  1723
@EL00017 DS    0H                                                  1723
@EF00017 DS    0H                                                  1723
@ER00017 BR    @14                                                 1723
*/* TPEPILOG   */                                                  1724
* GEN (PRINT OFF);                                                 1724
*                                                                  1724
*                                                                  1724
         PRINT OFF
* DECLARE                                                          1725
*   EMCR0 PTR REG(0),                                              1725
*   EMCR1 PTR REG(1),                                              1725
*   EMCR2 PTR REG(2),                                              1725
*   EMCR3 PTR REG(3),                                              1725
*   EMCR4 PTR REG(4),                                              1725
*   EMCR5 PTR REG(5),                                              1725
*   EMCR6 PTR REG(6),                                              1725
*   EMCR7 PTR REG(7),                                              1725
*   EMCR8 PTR REG(8),                                              1725
*   EMCR9 PTR REG(9),                                              1725
*   EMCR10 PTR REG(10),                                            1725
*   EMCR11 PTR REG(11),                                            1725
*   EMCR12 PTR REG(12),                                            1725
*   EMCR13 PTR REG(13),                                            1725
*   EMCR14 PTR REG(14),                                            1725
*   EMCR15 PTR REG(15);                                            1725
*                                                                  1725
* DECLARE                                                          1726
*   ISTSDCCA ENTRY BASED(ATCCDADD) VALRG(*), /*CIDCTL ADD ROUTINE*/
*   ISTSDCCD ENTRY BASED(ATCCDDEL) VALRG(*), /*CIDCTL DELETE ROUTINE*/
*   ISTSDCCF ENTRY BASED(ATCCDFND) VALRG(*), /*CIDCTL FIND ROUTINE*/
*   ISTSDCCN ENTRY BASED(ATCCDFDN) VALRG(*), /*CIDCTL FIND NCB ROUTINE*
*   ISTSDCCR ENTRY BASED(ATCCDFIN) VALRG(*); /*CIDCTL FINISH ROUTINE*/
*   DCL CMZCIDM FIXED(15) DEFINED(ATCCIDM); /*CIDMASK ALIAS*/      1727
* GEN (PRINT ON);                                                  1728
         PRINT ON
*/* END OF TPEPILOG */                                                /
*@X50BHTQ*/                                                        1729
*/* ATDSPLY   INVOKED. */                                          1729
*/********************************************************************/
*/* THE FOLLOWING ATBUILD INCLUSIONS HAVE BEEN MADE IN THIS          */
*/* COMPILATION:                                                     */
*/*             ISTPROCD                                             */
*/*             ISTDEVCH                                             */
*/*             ISTBIND                                              */
*/*             ISTCSL                                               */
*/*             ISTNIB                                               */
*/*             ISTCSP                                               */
*/*             ISTOCW                                               */
*/*             ISTLOK                                               */
*/*             ISTRDT                                               */
*/*             ISTRPH                                               */
*/*             ISTPAB                                               */
*/*             ISTNCB                                               */
*/*             ISTICNCB                                             */
*/*             ISTLDNCB                                             */
*/*             ISTLUNCB                                             */
*/*             ISTFMCB                                              */
*/*             ISTRNX                                               */
*/*             ISTCLSTR                                             */
*/*             ISTICE                                               */
*/*             ISTACE                                               */
*/*             ISTLDPRM                                             */
*/*             ISTCONFT                                             */
*/*             ISTDYPAB                                             */
*/*             ISTATCVT                                             */
*/*             ISTLINE                                              */
*/*             ISTAPPL                                              */
*/*             ISTTERM                                              */
*/*             ISTLCL                                               */
*/*             ISTDPATH                                             */
*/*             ISTLCCW                                              */
*/*             ISTLCPB                                              */
*/*             ISTZSAVE                                             */
*/*             ISTPFCRR                                             */
*/*             ISTCFCRR                                             */
*/*             ISTZCRR                                              */
*/*             ISTASCRR                                             */
*/*             ISTAPCRR                                             */
*/*             ISTCRA                                               */
*/*             ISTNSCRR                                             */
*/*             ISTPST                                               */
*/********************************************************************/
*/* END OF ATDSPLY. */                                             1729
**@X50BHTQ*/                                                       1729
*END ISTSQC06                         /* END MAIN ROUTINE    @X50BHTQ*/
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.      *
*/*%INCLUDE SYSLIB  (CVT     )                                        *
*/*%INCLUDE SYSLIB  (IFGACB  )                                        *
*/*%INCLUDE SYSLIB  (IFGACBVT)                                        *
*/*%INCLUDE SYSLIB  (IFGRPL  )                                        *
*/*%INCLUDE SYSLIB  (IFGRPLVT)                                        *
*/*%INCLUDE SYSLIB  (ISTRPLFB)                                        *
*/*%INCLUDE SYSLIB  (IHASRB  )                                        *
*/*%INCLUDE SYSLIB  (IHAPSA  )                                        *
*/*%INCLUDE SYSLIB  (IECDIOSB)                                        *
*/*%INCLUDE SYSLIB  (IEZIOB  )                                        *
*;                                                                 1729
         B     @EL00001                                            1729
@DATA    DS    0H
@CH00063 DC    H'1'
@CH00055 DC    H'4'
@CH00061 DC    H'8'
@CH00033 DC    H'9'
@CH01120 DC    H'11'
@CH00032 DC    H'12'
@CH04859 DC    H'23'
@CH01817 DC    H'33'
@CH04855 DC    H'43'
@CH06019 DC    H'50'
@CH06018 DC    H'195'
@DATD    DSECT
         DS    0F
ISTSQC06 CSECT
         DS    0F
@CF06016 DC    F'120'
@CH06016 EQU   @CF06016+2
@CF06014 DC    F'185'
@CF06017 DC    F'228'
@CF06013 DC    F'265'
@CF06032 DC    F'-50'
@CF06031 DC    F'-42'
@CF06033 DC    F'-34'
@CF06034 DC    F'-33'
@CF06035 DC    F'-1'
@CF03380 DC    XL4'7FFFFFFF'
@CF03382 DC    XL4'80000000'
@DATD    DSECT
         DS    0D
CVTPTR   DS    A
SRBPTR   DS    A
IOSBPTR  DS    A
IOBPRPTR DS    A
IOBSTPTR DS    A
LDNCBPTR DS    A
FMCBPTR  DS    A
LCPBPTR  DS    A
         ORG   *+1-(*-@DATD)/(*-@DATD) INSURE DSECT DATA
@ENDDATD EQU   *
ISTSQC06 CSECT
         DS    0F
@SIZDATD DC    AL1(0)
         DC    AL3(@ENDDATD-@DATD)
         DS    0D
@CC04841 DC    C'        '
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
RPHPTR   EQU   @01
LDPRMPTR EQU   @01
C06R0    EQU   @00
C06R1    EQU   @01
C06R2    EQU   @02
C06R13   EQU   @13
C06R14   EQU   @14
C06R15   EQU   @15
ACBPTR   EQU   @01
SAREG    EQU   @01
LINEPTR  EQU   @01
APPLPTR  EQU   @01
CLSTPTR  EQU   @01
RNXPTR   EQU   @01
NDX      EQU   @02
C06LOOP  EQU   @02
C06ICEF  EQU   @02
RDTPTR   EQU   @04
PTRRPH   EQU   @07
RC       EQU   @08
C06CALC  EQU   @08
PATPTR   EQU   @10
ICEPTR   EQU   @10
ACEPTR   EQU   @10
COUNT    EQU   @11
AREALEFT EQU   @11
GPR01F   EQU   @01
GPR01P   EQU   @01
GPR02F   EQU   @02
GPR02P   EQU   @02
GPR04F   EQU   @04
GPR04P   EQU   @04
GPR06F   EQU   @06
GPR06P   EQU   @06
GPR10F   EQU   @10
GPR10P   EQU   @10
GPR11F   EQU   @11
GPR11P   EQU   @11
GPR12F   EQU   @12
GPR12P   EQU   @12
GPR13F   EQU   @13
GPR13P   EQU   @13
GPR14F   EQU   @14
GPR14P   EQU   @14
GPR15F   EQU   @15
GPR15P   EQU   @15
CMZK0010 EQU   @01
EMCR2    EQU   @02
EMCR3    EQU   @03
C06R4    EQU   @04
EMCR0    EQU   @00
EMCR1    EQU   @01
EMCR10   EQU   @10
EMCR11   EQU   @11
EMCR12   EQU   @12
EMCR13   EQU   @13
EMCR14   EQU   @14
EMCR15   EQU   @15
EMCR4    EQU   @04
EMCR5    EQU   @05
EMCR6    EQU   @06
EMCR7    EQU   @07
EMCR8    EQU   @08
EMCR9    EQU   @09
GPR00F   EQU   @00
GPR00P   EQU   @00
GPR03F   EQU   @03
GPR03P   EQU   @03
GPR05F   EQU   @05
GPR05P   EQU   @05
GPR07F   EQU   @07
GPR07P   EQU   @07
GPR08F   EQU   @08
GPR08P   EQU   @08
GPR09F   EQU   @09
GPR09P   EQU   @09
SAVRDT   EQU   @00
PSA      EQU   0
FLCRNPSW EQU   PSA
FLCROPSW EQU   PSA+8
FLCICCW2 EQU   PSA+16
PSAEEPSW EQU   PSA+132
PSAESPSW EQU   PSA+136
FLCSVILC EQU   PSAESPSW+1
PSAEPPSW EQU   PSA+140
FLCPIILC EQU   PSAEPPSW+1
FLCPICOD EQU   PSAEPPSW+2
PSAPICOD EQU   FLCPICOD+1
FLCTEA   EQU   PSAEPPSW+4
FLCPER   EQU   PSA+152
FLCMCLA  EQU   PSA+168
FLCIOEL  EQU   FLCMCLA+4
FLCIOA   EQU   FLCMCLA+16
FLCFSA   EQU   FLCMCLA+80
PSASUPER EQU   PSA+552
PSASUP1  EQU   PSASUPER
PSASUP2  EQU   PSASUPER+1
PSASUP3  EQU   PSASUPER+2
PSASUP4  EQU   PSASUPER+3
PSACLHT  EQU   PSA+640
PSALKSA  EQU   PSA+696
PSAHLHI  EQU   PSA+760
PSALITA  EQU   PSA+764
PSADSSFL EQU   PSA+836
PSADSSF1 EQU   PSADSSFL
PSADSSF3 EQU   PSADSSFL+2
PSADSSF4 EQU   PSADSSFL+3
PSARSVT  EQU   PSA+896
ATCLCPTR EQU   1032
CZMP0058 EQU   16
CVTMAP   EQU   0
CVT0VL00 EQU   CVTMAP+24
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTSHS   EQU   CVTXTNT2+40
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IFGACB   EQU   0
ACBCOMN  EQU   IFGACB
ACBLENG  EQU   ACBCOMN+2
ACBLENG2 EQU   ACBLENG
ACBAMBL  EQU   ACBCOMN+4
ACBJWA   EQU   ACBAMBL
ACBMACRF EQU   ACBCOMN+12
ACBMACR1 EQU   ACBMACRF
ACBADR   EQU   ACBMACR1
ACBCNV   EQU   ACBMACR1
ACBMACR2 EQU   ACBMACRF+1
ACBBUFPL EQU   ACBCOMN+20
ACBMACR3 EQU   ACBBUFPL
ACBRECFM EQU   ACBCOMN+24
ACBCCTYP EQU   ACBCOMN+25
ACBOPT   EQU   ACBCOMN+26
ACBDSORG EQU   ACBOPT
ACBCROPS EQU   ACBDSORG
ACBDVIND EQU   ACBDSORG
ACBEXLST EQU   ACBCOMN+36
ACBDDNM  EQU   ACBCOMN+40
ACBAMETH EQU   ACBDDNM+3
ACBOFLGS EQU   ACBCOMN+48
ACBEXFG  EQU   ACBOFLGS
ACBIOSFG EQU   ACBOFLGS
ACBINFLG EQU   ACBCOMN+50
ACBVVIC  EQU   ACBINFLG
ACBUJFCB EQU   ACBCOMN+52
ACBBLKSZ EQU   ACBCOMN+60
ACBVTEXT EQU   IFGACB+76
IFGRPL   EQU   0
RPLCOMN  EQU   IFGRPL
RPLIDWD  EQU   RPLCOMN
RPLLEN   EQU   RPLIDWD+3
RPLECB   EQU   RPLCOMN+8
RPLFDBWD EQU   RPLCOMN+12
RPLFDBK  EQU   RPLFDBWD+1
RPLRTNCD EQU   RPLFDBK
RPLCNDCD EQU   RPLFDBK+1
RPLCMPON EQU   RPLCNDCD
RPLFDB2  EQU   RPLCMPON
RPLERRCD EQU   RPLCNDCD+1
RPLFDB3  EQU   RPLERRCD
RPLKEYLE EQU   RPLCOMN+16
RPLDACB  EQU   RPLCOMN+24
RPLAREA  EQU   RPLCOMN+32
RPLARG   EQU   RPLCOMN+36
RPLOPTCD EQU   RPLCOMN+40
RPLOPT1  EQU   RPLOPTCD
RPLECBSW EQU   RPLOPT1
RPLOPT2  EQU   RPLOPTCD+1
RPLADR   EQU   RPLOPT2
RPLOPT3  EQU   RPLOPTCD+2
RPLOPT4  EQU   RPLOPTCD+3
RPLNXTRP EQU   RPLCOMN+44
RPLBUFL  EQU   RPLCOMN+52
RPLOPTC2 EQU   RPLCOMN+56
RPLOPT5  EQU   RPLOPTC2
RPLWRTYP EQU   RPLOPT5
RPLOPT6  EQU   RPLOPTC2+1
RPLUNTYP EQU   RPLOPT6
RPLOPT7  EQU   RPLOPTC2+2
RPLCNOPT EQU   RPLOPT7
RPLOPT8  EQU   RPLOPTC2+3
RPLRBAR  EQU   RPLCOMN+60
RPLAIXID EQU   RPLRBAR+2
RPLEXTDS EQU   RPLCOMN+68
RPLEXTD1 EQU   RPLEXTDS
RPLVTEXT EQU   IFGRPL+76
RPLFDBK2 EQU   RPLVTEXT+12
RPLSSNSI EQU   RPLFDBK2
RPLDSB   EQU   RPLSSNSI
RPLDSB1  EQU   RPLDSB
RPLSSEI  EQU   RPLDSB1
RPLDSB2  EQU   RPLDSB+1
RPLUSNSI EQU   RPLFDBK2+2
RPLOPTC3 EQU   RPLVTEXT+20
RPLOPT9  EQU   RPLOPTC3
RPLOPT10 EQU   RPLOPTC3+1
RPLOPT11 EQU   RPLOPTC3+2
RPLOPT12 EQU   RPLOPTC3+3
RPLOSENS EQU   RPLVTEXT+24
RPLSSNSO EQU   RPLOSENS
RPLSSEO  EQU   RPLSSNSO
RPLOF16  EQU   0
RPLRH3   EQU   RPLOF16
RPLSRTYP EQU   RPLOF16+1
RPLSTYPE EQU   RPLSRTYP
RPLRTYPE EQU   RPLSRTYP
RPLCHN   EQU   RPLOF16+2
RPLVTFL1 EQU   RPLOF16+3
RPLVTUSE EQU   RPLVTFL1
RPLVTFL2 EQU   RPLOF16+4
RPLPOSTV EQU   RPLVTFL2
RPLRESP  EQU   RPLVTFL2
RPLCNTRL EQU   RPLOF16+5
RPLCNTDF EQU   RPLCNTRL
RPLCNTDC EQU   RPLCNTRL+1
RPLCNTSC EQU   RPLCNTRL+2
RPLOF60  EQU   0
RPLOBSQ  EQU   RPLOF60+4
RPLIBSQ  EQU   RPLOF60+5
SRBSECT  EQU   0
SRBFLC   EQU   SRBSECT+12
IOSB     EQU   0
IOSFLA   EQU   IOSB
IOSACHN  EQU   IOSFLA
IOSFLB   EQU   IOSB+1
IOSFLC   EQU   IOSB+2
IOSDVALT EQU   IOSFLC
IOSPKEY  EQU   IOSB+12
IOSOPT   EQU   IOSB+14
IOSOPT2  EQU   IOSB+15
@NM00070 EQU   IOSB+20
IOSCSW   EQU   @NM00070+1
IOSTATUS EQU   IOSCSW+3
IOSIPIB  EQU   IOSB+44
IOSPATH  EQU   IOSB+86
IOSCHN   EQU   IOSPATH
IOSCKEY  EQU   IOSB+89
IOSEEKA  EQU   IOSB+100
IOSCCHH  EQU   IOSEEKA+3
IOSSKHH  EQU   IOSCCHH+2
IOBPREFX EQU   0
IOBCFLG1 EQU   IOBPREFX
IOBSTDRD EQU   0
IOBFLAG1 EQU   IOBSTDRD
IOBCYCCK EQU   IOBFLAG1
IOBRSTRT EQU   IOBFLAG1
IOBFLAG2 EQU   IOBSTDRD+1
IOBPURGE EQU   IOBFLAG2
IOBRDHA0 EQU   IOBFLAG2
IOBSENS0 EQU   IOBSTDRD+2
IOBS0B7  EQU   IOBSENS0
IOBSENS1 EQU   IOBSTDRD+3
IOBECBPT EQU   IOBSTDRD+4
IOBFLAG3 EQU   IOBSTDRD+8
IOBFL3   EQU   IOBFLAG3
IOBCNC   EQU   IOBFL3
IOBICL   EQU   IOBFL3
IOBCSW   EQU   IOBSTDRD+9
IOBIOCSW EQU   IOBCSW
IOBSTBYT EQU   IOBIOCSW+3
IOBUSTAT EQU   IOBSTBYT
IOBCSTAT EQU   IOBSTBYT+1
IOBSTART EQU   IOBSTDRD+16
IOBDCBPT EQU   IOBSTDRD+20
IOBFLAG4 EQU   IOBDCBPT
IOBRESTR EQU   IOBSTDRD+24
IOBINCAM EQU   IOBSTDRD+28
IOBBTAMF EQU   IOBINCAM
ISTPROCD EQU   0
PROPROC  EQU   ISTPROCD
PROPROC1 EQU   PROPROC
PROPROC2 EQU   PROPROC+1
PROPROC3 EQU   PROPROC+2
PROPROC4 EQU   PROPROC+3
PROPROCS EQU   0
PROSETMS EQU   PROPROCS+1
PROSETM2 EQU   PROSETMS
PROSETM3 EQU   PROSETMS+1
PROSETM4 EQU   PROSETMS+2
ISTDEVCH EQU   0
DEVSHCH  EQU   ISTDEVCH
DEVCHAR  EQU   DEVSHCH
DEVTCODE EQU   ISTDEVCH+1
DEVFLAGS EQU   ISTDEVCH+3
DEVFCCTL EQU   DEVFLAGS
DEVCSWL  EQU   DEVFCCTL
DEVCHAR3 EQU   DEVFLAGS
ISTBIND  EQU   0
BINFMTY  EQU   ISTBIND
BINPRIP  EQU   ISTBIND+3
BINSECP  EQU   ISTBIND+4
BINCMNP  EQU   ISTBIND+5
BINCMNP2 EQU   ISTBIND+6
BINTSU   EQU   ISTBIND+7
BINRPACE EQU   BINTSU+1
BINRUSZ  EQU   BINTSU+2
BINSRUSZ EQU   BINRUSZ
BINPRUSZ EQU   BINRUSZ+1
BINPRSVC EQU   ISTBIND+13
BINLUP   EQU   BINPRSVC
BINPSCHR EQU   BINPRSVC+1
ISTCSL   EQU   0
CSLRDEF  EQU   ISTCSL
CSLRDTE  EQU   CSLRDEF
CSLNDEF  EQU   ISTCSL+4
CSLNIB   EQU   CSLNDEF
CSLDDEF  EQU   ISTCSL+8
CSLDATA  EQU   CSLDDEF
ISTNIB   EQU   0
NIBFLGS  EQU   ISTNIB+40
NIBFLG1  EQU   NIBFLGS
ISTCSP   EQU   0
CSPOPT   EQU   ISTCSP+2
CSPOPT1  EQU   CSPOPT
CSPOPT2  EQU   CSPOPT+1
CSPRSC2B EQU   ISTCSP+32
ISTOCW   EQU   0
OCWRPL   EQU   ISTOCW+12
OCWACVT  EQU   ISTOCW+24
OCWLRDTE EQU   ISTOCW+40
OCWDRDTE EQU   OCWLRDTE
OCWODRC  EQU   ISTOCW+92
OCWSVCOD EQU   ISTOCW+94
OCWSWTA  EQU   ISTOCW+204
OCWSWTB  EQU   ISTOCW+205
OCWSWTC  EQU   ISTOCW+206
OCWSWTD  EQU   ISTOCW+207
OCWSAVE5 EQU   ISTOCW+552
OCWSWTRD EQU   ISTOCW+730
OCWSWTE  EQU   ISTOCW+731
OCWLOCKS EQU   ISTOCW+740
OCWCID   EQU   ISTOCW+744
OCWIOCNT EQU   ISTOCW+760
OCWSHPL  EQU   ISTOCW+784
OCWBIND  EQU   ISTOCW+796
OCWFLG1  EQU   ISTOCW+847
ISTLOK   EQU   0
LOKCHN   EQU   ISTLOK+1
LOKCHNG  EQU   LOKCHN
@NM00085 EQU   LOKCHNG+2
ISTRPRE  EQU   0
RPRNAME  EQU   ISTRPRE
RPRCOMID EQU   ISTRPRE+8
RPRDAF   EQU   RPRCOMID+2
RPRELEN  EQU   ISTRPRE+16
RPRPELEN EQU   ISTRPRE+18
RPRENTRY EQU   ISTRPRE+20
RPRFLAGA EQU   ISTRPRE+21
RPRENTED EQU   RPRFLAGA
RPRFLAGB EQU   ISTRPRE+22
RPRONLIN EQU   RPRFLAGB
RPRCAUSE EQU   ISTRPRE+23
RPRHDTYP EQU   ISTRPRE+27
RPRNSNEA EQU   ISTRPRE+36
RPRDEVCH EQU   ISTRPRE+44
RPRSWDAF EQU   ISTRPRE+58
RPRFLAGD EQU   ISTRPRE+61
RPRACTP  EQU   RPRFLAGD
RPRCONP  EQU   RPRFLAGD
RPRFLAGC EQU   ISTRPRE+62
ISTRCPRE EQU   0
RCPACETR EQU   ISTRCPRE+84
RCPPMODE EQU   ISTRCPRE+91
RCPLGNIN EQU   ISTRCPRE+92
ISTRDT   EQU   0
RDTPLEN  EQU   ISTRDT+72
RDTPRIOR EQU   RDTPLEN
RDTFLAGB EQU   ISTRDT+91
RDTVYRPH EQU   ISTRDT+108
RDTSTCNT EQU   ISTRDT+112
ISTRAP   EQU   0
RAPICELG EQU   ISTRAP+88
RAPACEAP EQU   ISTRAP+100
RAPFLG   EQU   ISTRAP+108
RAPFLGB  EQU   ISTRAP+109
RAPFLGC  EQU   ISTRAP+110
ISTRLC   EQU   0
RLCADR   EQU   ISTRLC+72
RLCFLAG  EQU   RLCADR
RLCLCCUA EQU   ISTRLC+76
ISTRRN   EQU   0
RRNADR   EQU   ISTRRN+136
RRNFLAG  EQU   RRNADR
RRNUCBAD EQU   RRNADR+1
RRNTRENT EQU   ISTRRN+148
RRNCTELI EQU   ISTRRN+160
RRNRDF   EQU   ISTRRN+172
RRNRDFA  EQU   RRNRDF
RRNRBREM EQU   RRNRDFA
RRNRDFB  EQU   RRNRDF+1
RRNCMF   EQU   ISTRRN+176
RRNCMFA  EQU   RRNCMF
RRNCMFB  EQU   RRNCMF+1
RRNCMFC  EQU   RRNCMF+2
RRNCMFD  EQU   RRNCMF+3
RRNNMDPD EQU   ISTRRN+192
RRNHPRE  EQU   ISTRRN+216
ISTRGP   EQU   0
RGPFLG   EQU   ISTRGP+72
RGPADIL  EQU   RGPFLG
RGPASDLC EQU   RGPFLG
ISTRLN   EQU   0
RLNADR   EQU   ISTRLN+72
RLNFLAG  EQU   RLNADR
RLNUCBAD EQU   RLNADR+1
RLNCTECL EQU   ISTRLN+76
RLNCTETR EQU   ISTRLN+78
RLNCTEIN EQU   ISTRLN+80
RLNCTECM EQU   ISTRLN+82
RLNSTAT1 EQU   ISTRLN+86
RLNSTAT2 EQU   ISTRLN+87
RLNINUSE EQU   RLNSTAT2
RLNRDF   EQU   ISTRLN+88
RLNRDFA  EQU   RLNRDF
RLNRACNT EQU   RLNRDFA
RLNPORT  EQU   RLNRDFA
RLNRDFB  EQU   RLNRDF+1
RLNAUTOD EQU   RLNRDFB
RLNRAPOL EQU   RLNRDFB
RLNRATRN EQU   RLNRDFB
RLNCRFLG EQU   ISTRLN+102
RLNLSCMD EQU   RLNCRFLG
ISTRPT   EQU   0
RPTLNCID EQU   ISTRPT+116
RPTDITT  EQU   ISTRPT+128
RPTATERM EQU   ISTRPT+132
RPTFLAG1 EQU   ISTRPT+140
ISTRCL   EQU   0
RCLADR   EQU   ISTRCL+72
RCLFLAG  EQU   RCLADR
RCLCTETR EQU   ISTRCL+76
RCLCTECM EQU   ISTRCL+78
ISTRTR   EQU   0
RTRADR   EQU   ISTRTR+124
RTRFLAG  EQU   RTRADR
RTRCTECM EQU   ISTRTR+128
RTRRDFA  EQU   ISTRTR+136
RTRRAALL EQU   RTRRDFA
RTRRDFB  EQU   ISTRTR+137
RTRRDFC  EQU   ISTRTR+138
RTRRDFD  EQU   ISTRTR+139
RTRRDFE  EQU   ISTRTR+140
RTRRDFF  EQU   ISTRTR+141
RTRCRFLG EQU   ISTRTR+143
RTRLSCMD EQU   RTRCRFLG
RTRBSCID EQU   ISTRTR+188
ISTRIN   EQU   0
RINDFD   EQU   ISTRIN+124
RINREMPO EQU   RINDFD
RINNODEF EQU   RINDFD
RINLDISC EQU   RINDFD
RINNODID EQU   ISTRIN+125
RINRLDAF EQU   ISTRIN+126
RINREMOT EQU   ISTRIN+128
RINVPAB  EQU   ISTRIN+132
RINRPHCN EQU   ISTRIN+136
RINNCSPL EQU   ISTRIN+140
RINCNCNT EQU   ISTRIN+144
RINLOCRN EQU   ISTRIN+148
ISTRDS   EQU   0
ISTDOT   EQU   0
ISTRCC   EQU   0
RCCFLAG  EQU   ISTRCC+73
RCCFLAGB EQU   ISTRCC+74
RCCCTELU EQU   ISTRCC+76
RCCSTAID EQU   ISTRCC+78
RCCID48  EQU   RCCSTAID+2
RCCCRFLG EQU   ISTRCC+108
RCCPATHT EQU   ISTRCC+120
RCCPATHZ EQU   ISTRCC+124
ISTRLU   EQU   0
RLUFLAG  EQU   ISTRLU+125
RLUCRFLG EQU   ISTRLU+126
RLUPACE  EQU   ISTRLU+132
RLUNCPPC EQU   ISTRLU+134
RLUUSSTB EQU   ISTRLU+140
RLUMODET EQU   ISTRLU+152
ISTRPX   EQU   0
RPXFLUX  EQU   ISTRPX+72
ISTRLX   EQU   0
RLXNLUX  EQU   ISTRLX+72
RLXFLAGA EQU   ISTRLX+76
ISTRSW   EQU   0
RSWDIALT EQU   ISTRSW+136
RSWGRUPT EQU   ISTRSW+140
ISTRDA   EQU   0
RDAADR   EQU   ISTRDA+72
RDAFLAG  EQU   RDAADR
RDAUCBAD EQU   RDAADR+1
RDADACUA EQU   ISTRDA+76
ISTRLS   EQU   0
ISTDNT   EQU   0
DNTCTDIG EQU   ISTDNT
DNTTELNO EQU   ISTDNT+1
ISTGNT   EQU   0
GNTGRPNM EQU   ISTGNT
ISTPAT   EQU   0
PATGINDX EQU   ISTPAT
PATDINDX EQU   ISTPAT+2
PATFLAGA EQU   ISTPAT+7
ISTRPH   EQU   0
RPHCNTL  EQU   ISTRPH
RPHFLAGS EQU   RPHCNTL+2
RPHAPTYP EQU   RPHFLAGS
RPHFSTLC EQU   RPHFLAGS
RPHFLGB  EQU   RPHCNTL+3
RPHRPHA  EQU   ISTRPH+4
RPHTSKID EQU   ISTRPH+8
RPHRESMA EQU   ISTRPH+16
RPHWPFLG EQU   RPHRESMA
RPHWEA   EQU   ISTRPH+24
RPHCSPA  EQU   RPHWEA
RPHSRPRM EQU   ISTRPH+28
RPHCRR   EQU   ISTRPH+32
RPHPABQA EQU   ISTRPH+36
RPHWORK  EQU   ISTRPH+40
RPHSAVE1 EQU   RPHWORK
RPHSBITS EQU   RPHSAVE1+1
ISTPAB   EQU   0
PABWQCHN EQU   ISTPAB
PABWEQA  EQU   PABWQCHN
PABCHAIN EQU   PABWQCHN+4
PABRPHFG EQU   ISTPAB+12
PABFLAGS EQU   PABRPHFG
PABERLCK EQU   PABFLAGS
PABERRLK EQU   PABERLCK
ISTNCB   EQU   0
NCBRDTE  EQU   ISTNCB+4
NCBFMCBA EQU   ISTNCB+16
NCBFLAGS EQU   ISTNCB+24
NCBFRAS  EQU   NCBFLAGS+1
NCBFTRIO EQU   NCBFRAS
NCBFLAG1 EQU   NCBFLAGS+2
ISTICNCB EQU   0
@NM00097 EQU   ISTICNCB+53
ICNCKFLD EQU   ISTICNCB+96
ICNFLAG  EQU   ISTICNCB+100
ICNZF006 EQU   ICNFLAG
ICNFFLAG EQU   ISTICNCB+101
ICNZSWS  EQU   ISTICNCB+102
ICNFLAG2 EQU   ISTICNCB+236
ICNZD001 EQU   ISTICNCB+288
ICNWSCCW EQU   ICNZD001
ICNZD002 EQU   ISTICNCB+296
ICNZD003 EQU   ISTICNCB+320
ICNRSCCW EQU   ICNZD003
ICNZD004 EQU   ISTICNCB+328
ICNZS1VR EQU   ISTICNCB+348
ICNSRV02 EQU   ICNZS1VR
ICNDIEWA EQU   ICNSRV02
ICNZH001 EQU   ISTICNCB+472
ICNZX001 EQU   ISTICNCB+474
ICNDCDEB EQU   ISTICNCB+480
ICNDIDEB EQU   ICNDCDEB+12
ICNZFLAG EQU   ISTICNCB+508
ICNZH002 EQU   ISTICNCB+509
ICNZS002 EQU   ICNZH002
ICNZS003 EQU   ICNZH002
ICNZS004 EQU   ICNZH002
ICNZS006 EQU   ICNZH002
ICNZS007 EQU   ICNZH002
ICNZS008 EQU   ICNZH002
ICNZS009 EQU   ICNZH002+1
ICNZS00A EQU   ICNZH002+1
ICNZCONS EQU   ISTICNCB+680
ISTLDNCB EQU   0
LDNCFLAG EQU   ISTLDNCB+54
LDNZH002 EQU   ISTLDNCB+88
LDNZX001 EQU   ISTLDNCB+90
LDNFLAGS EQU   ISTLDNCB+107
LDNFLAG2 EQU   ISTLDNCB+110
LDNZIOLK EQU   ISTLDNCB+184
LDNZERPF EQU   ISTLDNCB+185
LDNZCPAN EQU   LDNZERPF
LDNZEPIN EQU   LDNZERPF
LDNZLPC  EQU   ISTLDNCB+186
LDNDCDEB EQU   ISTLDNCB+304
LDNZSAV3 EQU   ISTLDNCB+376
LDNZSAV4 EQU   LDNZSAV3+8
LDNZH003 EQU   ISTLDNCB+577
ISTLUNCB EQU   0
LUNZOS   EQU   ISTLUNCB+48
ISTFMCB  EQU   0
FMCFMCBA EQU   ISTFMCB+20
FMCSTAT  EQU   ISTFMCB+28
FMCSTAT1 EQU   ISTFMCB+29
FMCCMDFL EQU   ISTFMCB+31
FMCCMPS1 EQU   ISTFMCB+36
FMCSIPA  EQU   ISTFMCB+148
FMCNXOSQ EQU   ISTFMCB+152
FMCNXCFM EQU   FMCNXOSQ
FMCNXOSC EQU   FMCNXOSQ+2
FMCSSTAT EQU   ISTFMCB+159
FMCCIPI  EQU   FMCSSTAT
FMCUIPI  EQU   FMCSSTAT
FMCBIP   EQU   FMCSSTAT
FMCPACE  EQU   ISTFMCB+160
FMCPACEN EQU   FMCPACE
FMCPACEM EQU   FMCPACE+1
FMCPACPC EQU   FMCPACE+2
FMCCVAL  EQU   FMCPACE+3
FMCOBCE  EQU   FMCCVAL
FMCCLEXT EQU   ISTFMCB+164
FMCRPLA  EQU   FMCCLEXT
FMCFBA   EQU   FMCCLEXT+4
FMCCMPS2 EQU   FMCCLEXT+16
FMCFLGA  EQU   FMCCMPS2
FMCFLGCL EQU   FMCCMPS2+1
FMCPSCMD EQU   FMCCMPS2+2
FMCPSTAT EQU   FMCCMPS2+3
FMCSTAT2 EQU   ISTFMCB+186
FMCMODEB EQU   ISTFMCB+189
FMCCLSEQ EQU   ISTFMCB+190
FMCRRESP EQU   ISTFMCB+195
FMCSSEGQ EQU   ISTFMCB+200
FMCFBAS  EQU   ISTFMCB+216
FMCZV002 EQU   FMCFBAS
FMCSNCTL EQU   ISTFMCB+224
FMCSCFLG EQU   FMCSNCTL
FMCVS1   EQU   ISTFMCB+232
FMCZFLAG EQU   FMCVS1
FMCZF006 EQU   FMCZFLAG
FMCLBXM  EQU   FMCVS1+12
FMCSHEAQ EQU   FMCLBXM
FMCLCPBQ EQU   FMCVS1+16
FMCLCPAQ EQU   FMCVS1+20
FMCSEQ1  EQU   FMCVS1+34
FMCZFLG2 EQU   FMCVS1+35
FMCCVFLG EQU   FMCVS1+44
FMCFLAG  EQU   0
FMCFLGB  EQU   FMCFLAG
ISTRNX   EQU   0
RNXRDT   EQU   ISTRNX
RNXIOCT  EQU   ISTRNX+256
RNXERCT  EQU   ISTRNX+258
RNX370X  EQU   ISTRNX+260
RNXLINE  EQU   ISTRNX+268
RNXDLN   EQU   ISTRNX+276
RNXDLNNM EQU   RNXDLN
RNXDLNST EQU   RNXDLN+8
RNXDLNA  EQU   RNXDLNST
ISTCLSTR EQU   0
CLSTRRDT EQU   ISTCLSTR
CLSTRGN  EQU   ISTCLSTR+148
CLSTRLN  EQU   ISTCLSTR+156
CLSTRCUA EQU   ISTCLSTR+164
CLSTR37X EQU   ISTCLSTR+167
CLSTRSUB EQU   ISTCLSTR+175
CLSTRERR EQU   ISTCLSTR+183
CLSTRIOC EQU   ISTCLSTR+184
CLSTRLUS EQU   ISTCLSTR+186
CLSTRLU  EQU   CLSTRLUS
CLSTRFLG EQU   CLSTRLUS+8
CLSTRLUA EQU   CLSTRFLG
CLSTRTYP EQU   CLSTRFLG
CLSSUBST EQU   CLSTRFLG
CLSTRBIP EQU   CLSSUBST
CLSTCUIP EQU   CLSSUBST
ISTICE   EQU   0
ICEOBJ   EQU   ISTICE+4
ICESUBJQ EQU   ISTICE+8
ICEFLAGS EQU   ISTICE+28
ISTACE   EQU   0
ACESUBJ  EQU   ISTACE
ACEOBJ   EQU   ISTACE+4
ACESUBJQ EQU   ISTACE+8
ACEFLAGS EQU   ISTACE+20
ISTLDPRM EQU   0
LDPFG    EQU   ISTLDPRM+20
LDPFB2   EQU   ISTLDPRM+21
ISTCONFT EQU   0
CONACB   EQU   ISTCONFT+40
CONHALT  EQU   ISTCONFT+106
CONFLAGS EQU   ISTCONFT+110
CONDSFLG EQU   CONFLAGS
CONOPTFL EQU   CONFLAGS+1
CONSTAT  EQU   CONFLAGS+2
CONBUFF  EQU   CONFLAGS+3
CONFLG01 EQU   ISTCONFT+416
CONSCPID EQU   ISTCONFT+1356
CONSTAID EQU   CONSCPID+3
ISTDYPAB EQU   0
ISTATCVT EQU   0
ATCCOM   EQU   ISTATCVT
ATCSTAT  EQU   ATCCOM
ATCSTAT1 EQU   ATCSTAT
ATCSTFLG EQU   ATCSTAT+1
ATCPOFLG EQU   ATCSTAT+2
ATCSTAT4 EQU   ATCSTAT+3
ATCCONFT EQU   ATCCOM+112
ATCIOTRC EQU   ATCCOM+140
ATCTHTRC EQU   ATCIOTRC
ATCSRTDF EQU   ATCCOM+208
ATCCIDM  EQU   ATCCOM+266
ATCCDADD EQU   ISTATCVT+276
ATCCDDEL EQU   ISTATCVT+280
ATCCDFND EQU   ISTATCVT+284
ATCCSMR  EQU   ISTATCVT+296
ATCSHRFG EQU   ISTATCVT+316
ATCHPGM  EQU   ISTATCVT+384
ATCCDFIN EQU   ISTATCVT+460
ATCCDFDN EQU   ISTATCVT+464
ATCVLCNT EQU   ISTATCVT+772
ATCRNO   EQU   ISTATCVT+788
ATCSOPD  EQU   ISTATCVT+792
ATCSIPD  EQU   ISTATCVT+800
ATCSECST EQU   ISTATCVT+812
ATCSTAT2 EQU   ISTATCVT+818
ATCVTBAM EQU   ISTATCVT+908
@NM00133 EQU   ATCVTBAM+3
ATCAOSM  EQU   ISTATCVT+912
ATCGSRBQ EQU   ATCAOSM+4
ATCGSRBG EQU   ATCGSRBQ
ATCICAPP EQU   ATCAOSM+100
ATCLDAPP EQU   ATCAOSM+120
ATCDAPVT EQU   ATCAOSM+140
ATCCRA   EQU   ATCAOSM+280
ATCCRACN EQU   ATCCRA+4
ATCSRB   EQU   ATCAOSM+288
ATCSRBCN EQU   ATCSRB+4
ATCCRPL  EQU   ATCAOSM+296
ATCRPLCN EQU   ATCCRPL+4
ATCSQAFR EQU   ATCAOSM+304
ATCORTBC EQU   ATCSQAFR+4
ATCORSRB EQU   ATCORTBC
@NM00135 EQU   ATCAOSM+332
ATCVTFLG EQU   ATCAOSM+392
ATCZFLAG EQU   ATCAOSM+588
ISTLINE  EQU   0
LINERDT  EQU   ISTLINE
LINEGN   EQU   ISTLINE+160
LINE370X EQU   ISTLINE+168
LINETS   EQU   ISTLINE+176
LINETN   EQU   LINETS
LINETFL  EQU   LINETS+8
LINETATC EQU   LINETFL
LINECL   EQU   LINETFL
LINETR   EQU   LINETFL
LINESW   EQU   LINETFL
LINEINTN EQU   LINETFL
LINSUBST EQU   LINETFL
LINBIP   EQU   LINSUBST
LINCUIP  EQU   LINSUBST
ISTAPPL  EQU   0
APPLRDT  EQU   ISTAPPL
APPLTS   EQU   ISTAPPL+120
APPLTN   EQU   APPLTS
APPLFL   EQU   APPLTS+8
APPLTCON EQU   APPLFL
APPSUBST EQU   APPLFL
APPBIP   EQU   APPSUBST
APPCUIP  EQU   APPSUBST
ISTTERM  EQU   0
TERMRDT  EQU   ISTTERM
TERMFL   EQU   ISTTERM+212
TERMLCL  EQU   TERMFL
TERMPOLL EQU   TERMFL
TERMSW   EQU   TERMFL
TERMSDLC EQU   TERMFL
TERMLCLA EQU   TERMFL
TERSUBST EQU   TERMFL
TERMBIP  EQU   TERSUBST
TERMCUIP EQU   TERSUBST
TERMLN   EQU   ISTTERM+214
TERMGN   EQU   ISTTERM+222
TERM370X EQU   ISTTERM+230
TERMPU   EQU   ISTTERM+238
TERMSUBA EQU   ISTTERM+246
TERMCUA  EQU   ISTTERM+254
TERMAN   EQU   ISTTERM+257
ISTLCL   EQU   0
LCLRDT   EQU   ISTLCL
LCLFL    EQU   ISTLCL+212
LCLLCL   EQU   LCLFL
LCLAN    EQU   ISTLCL+214
LCLIOCT  EQU   ISTLCL+222
LCLERCT  EQU   ISTLCL+224
LCLCUA   EQU   ISTLCL+225
ISTDPATH EQU   0
DPAARRAY EQU   ISTDPATH
DPAGRPNM EQU   DPAARRAY
DPAMAP   EQU   DPAARRAY+8
DPACTDIG EQU   DPAARRAY+16
DPATELNO EQU   DPAARRAY+17
DPAFLAGS EQU   DPAARRAY+49
DPAMAN   EQU   DPAFLAGS
DPAAUTOD EQU   DPAFLAGS
ISTOCCDF EQU   0
C06DATA  EQU   0
RETDISPA EQU   C06DATA
RETTRA1  EQU   C06DATA+4
RETLNA1  EQU   C06DATA+8
RETAPA1  EQU   C06DATA+12
RETAPA2  EQU   C06DATA+16
RETAPA3  EQU   C06DATA+20
RETAPA4  EQU   C06DATA+24
RETAPA5  EQU   C06DATA+28
RETSTLU  EQU   C06DATA+32
RETSAV02 EQU   C06DATA+36
RETSAV1  EQU   RETSAV02+4
NEEDSIZE EQU   C06DATA+48
C06SAVE  EQU   0
SAVBACK  EQU   C06SAVE+4
SAVFORW  EQU   C06SAVE+8
ISTLCCW  EQU   0
LCCWOP   EQU   ISTLCCW
LCCWRWOP EQU   LCCWOP
LCCWCTL  EQU   LCCWRWOP
LCCWFLAG EQU   ISTLCCW+1
LCCWLSI  EQU   LCCWFLAG
ISTLCPB  EQU   0
LCPREQTG EQU   ISTLCPB+2
LCPFLAGS EQU   LCPREQTG
LCPZF001 EQU   LCPFLAGS
LCPZRT02 EQU   LCPZF001
LCPZF002 EQU   LCPFLAGS
LCPZRT03 EQU   LCPZF002
LCPZF003 EQU   LCPFLAGS
LCPZRT04 EQU   LCPZF003
LCPZF004 EQU   LCPFLAGS
LCPZRT05 EQU   LCPZF004
LCPZRT06 EQU   LCPFLAGS
LCPZRT07 EQU   LCPFLAGS
LCPMNRCD EQU   LCPREQTG+1
LCPZRT08 EQU   LCPMNRCD
LCPZRT09 EQU   LCPMNRCD
LCPCHAIN EQU   ISTLCPB+4
LCPCHAI1 EQU   LCPCHAIN
LCPRUCNT EQU   ISTLCPB+8
LCPFLAG2 EQU   ISTLCPB+9
LCPTLBPI EQU   LCPFLAG2
LCPFID0  EQU   LCPFLAG2
LCPSEQ   EQU   ISTLCPB+10
LCPCID   EQU   ISTLCPB+16
LCPFDBA  EQU   ISTLCPB+24
LCPFLG1  EQU   ISTLCPB+37
LCPFLCCW EQU   ISTLCPB+40
LCPLCCW  EQU   ISTLCPB+48
LCPPABA  EQU   LCPLCCW+4
LCPRPHA  EQU   LCPPABA
ISTZSAVE EQU   0
ZSAZSVBC EQU   ISTZSAVE
ZSAZSVMS EQU   ZSAZSVBC
ISTPFCRR EQU   0
PFCCRR   EQU   ISTPFCRR
PFCCRRID EQU   PFCCRR
PFCCRRLN EQU   PFCCRR+2
PFCHDR   EQU   ISTPFCRR+4
PFCCRRO  EQU   PFCHDR
PFCFRRO  EQU   PFCHDR+4
ISTCFCRR EQU   0
CFCAUDIT EQU   ISTCFCRR
CFCNTRD  EQU   CFCAUDIT
CFCCRT   EQU   CFCAUDIT+1
ISTZCRR  EQU   0
ZCRCRR   EQU   ISTZCRR
ZCRFLGS1 EQU   ISTZCRR+12
ZCRFLGS2 EQU   ISTZCRR+13
ZCRSWFLD EQU   ISTZCRR+14
ZCRENDSH EQU   ZCRSWFLD
ZCRNDLCP EQU   ZCRSWFLD
ZCRRESET EQU   ZCRSWFLD
ZCRFLGS3 EQU   ISTZCRR+15
ZCRGENSW EQU   ISTZCRR+16
ZCRPFLGS EQU   ISTZCRR+17
ZCRIBPR  EQU   ISTZCRR+18
ZCRSCPSW EQU   ISTZCRR+19
ZCRPARMS EQU   ISTZCRR+24
ZCRFBPTR EQU   ZCRPARMS
ZCRDFRDA EQU   ZCRPARMS+10
ZCRPCOD1 EQU   ZCRPARMS+12
ZCRPLSBF EQU   ZCRPCOD1
ZCRPCOD2 EQU   ZCRPARMS+13
ZCRSVRTN EQU   ISTZCRR+56
ZCRWKARA EQU   ISTZCRR+156
ZCRCIDSV EQU   ISTZCRR+192
ZCRAUDIT EQU   ISTZCRR+440
ZCRENTER EQU   ZCRAUDIT+5
ZCRLCPB  EQU   ISTZCRR+480
ZCRRHRU  EQU   ZCRLCPB
ISTASCRR EQU   0
ASCFLAGS EQU   ISTASCRR+16
ASCFLG1  EQU   ASCFLAGS
ASCFLG2  EQU   ASCFLAGS+2
ASCFLG3  EQU   ASCFLAGS+4
ASCUSRGS EQU   ISTASCRR+28
ISTAPCRR EQU   0
APCATFLG EQU   ISTAPCRR+16
APCRFLG  EQU   ISTAPCRR+18
APCSAVE  EQU   ISTAPCRR+44
APCCOMF  EQU   ISTAPCRR+116
APCCOMF1 EQU   APCCOMF
APC31FLG EQU   ISTAPCRR+132
APC52FLG EQU   ISTAPCRR+133
APC53FLG EQU   ISTAPCRR+134
APC54FLG EQU   ISTAPCRR+135
APC57FLG EQU   ISTAPCRR+136
ISTCRA   EQU   0
CRABASIC EQU   ISTCRA
CRAHDR   EQU   CRABASIC
CRACRR   EQU   CRAHDR
CRALKACT EQU   CRABASIC+8
CRASVC   EQU   ISTCRA+848
CRABUFA  EQU   CRASVC+68
ISTNSCRR EQU   0
NSCAUDIT EQU   ISTNSCRR+16
NSCNTRD  EQU   NSCAUDIT
NSQC06   EQU   NSCNTRD
NSCCRT   EQU   NSCAUDIT+2
CSQC06   EQU   NSCCRT
ISTSDCCF EQU   0
ISTSDCCR EQU   0
SAV0058  EQU   0
SAV10058 EQU   SAV0058
SAV20058 EQU   SAV0058+4
SAV40058 EQU   SAV0058+8
SAV60058 EQU   SAV0058+12
SAVE0058 EQU   SAV0058+16
ISTPST   EQU   0
PSTRQFGA EQU   ISTPST+8
PSTRQUE  EQU   PSTRQFGA
PSTFLGA  EQU   PSTRQFGA+4
PSTABINP EQU   PSTFLGA
PSTTCBA  EQU   ISTPST+16
PSTDMPS  EQU   ISTPST+132
ISTACB   EQU   0
ISTRPL   EQU   0
ISTSDCCA EQU   0
ISTSDCCD EQU   0
ISTSDCCN EQU   0
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
FLC      EQU   PSA
PSARSVTE EQU   PSARSVT
IOSATTSC EQU   IOSIPIB
IOSWTOWA EQU   IOSIPIB
IOSPCISC EQU   IOSIPIB
IOBORG01 EQU   IOBPREFX+8
IOBNIOBA EQU   IOBORG01
IOBNFLG1 EQU   IOBNIOBA
IOBPRTOV EQU   IOBNFLG1
IOBORG02 EQU   IOBPREFX+8
IOBDQADA EQU   IOBORG02
IOBDEQIN EQU   IOBDQADA
IOBORG03 EQU   IOBPREFX+12
IOBORG04 EQU   IOBINCAM
IOBORG12 EQU   IOBINCAM
IOBFL4   EQU   IOBORG12
IOBEXTEN EQU   IOBSTDRD+32
IOBSEEK  EQU   IOBEXTEN
IOBBB    EQU   IOBSEEK+1
IOBCC    EQU   IOBSEEK+3
IOBHH    EQU   IOBSEEK+5
IOBORG05 EQU   IOBEXTEN
IOBORG06 EQU   IOBEXTEN
IOBNXTPT EQU   IOBORG06+4
IOBSTATA EQU   IOBNXTPT
IOBORG07 EQU   IOBEXTEN+8
W1IEXTEN EQU   IOBORG07
IOBORG08 EQU   IOBEXTEN+8
IOBINDCT EQU   IOBORG08+4
IOBUNSQR EQU   IOBORG08+5
IOBFCHAD EQU   IOBORG08+8
IOBORG09 EQU   IOBEXTEN+8
IOBDPLAD EQU   IOBORG09+4
IOBDTYPE EQU   IOBORG09+8
IOBDTYP2 EQU   IOBORG09+9
IOBDSTAT EQU   IOBORG09+10
IOBSTAT1 EQU   IOBDSTAT
IOBORG10 EQU   IOBEXTEN+8
IOBSEEK2 EQU   IOBORG10
IOBORG11 EQU   IOBEXTEN
IOBERCT  EQU   IOBORG11
IOBUCBXV EQU   IOBERCT
IOBNAME  EQU   IOBORG11+4
IOBORG13 EQU   IOBEXTEN
IOBSKADR EQU   IOBORG13
BINLUP1  EQU   BINPSCHR
BINLUS   EQU   BINPSCHR
BINFMF1  EQU   BINLUS
BINRSV09 EQU   BINFMF1
BINDSPF1 EQU   BINLUS+2
BINMEDIA EQU   BINLUS+4
BINLUP2  EQU   BINPSCHR
BINLUP3  EQU   BINPSCHR
LCLIOC   EQU   LCLIOCT
RNXIOC   EQU   RNXIOCT
CLSTRIC  EQU   CLSTRIOC
LCPZTIE  EQU   LCPCID
LCPZSNAM EQU   LCPZTIE+8
CMZCIDM  EQU   ATCCIDM
RTRDNCBA EQU   ISTRTR+40
SRB      EQU   SRBSECT
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
LCPZTRV4 EQU   LCPZSNAM+4
LCPZTRV1 EQU   LCPZSNAM
LCPZSNA  EQU   LCPZTIE+4
LCPZFMCA EQU   LCPZTIE
BINRSV26 EQU   BINLUP3
BINRSV15 EQU   BINLUP2+10
BINPRESZ EQU   BINLUP2+9
BINRSV14 EQU   BINLUP2
BINRSV13 EQU   BINMEDIA
BINDISK  EQU   BINMEDIA
BINXCHNG EQU   BINMEDIA
BINCARD  EQU   BINMEDIA
BINDOCMT EQU   BINMEDIA
BINRSV17 EQU   BINDSPF1+1
BINTRNDS EQU   BINDSPF1
BINRSV12 EQU   BINDSPF1
BINVSDS  EQU   BINDSPF1
BINVTDS  EQU   BINDSPF1
BINHFDS  EQU   BINDSPF1
BININTR  EQU   BINDSPF1
BINRSV11 EQU   BINRSV09+1
BINXFPD  EQU   BINRSV09+1
BINCSDS  EQU   BINRSV09+1
BINQDSI  EQU   BINRSV09+1
BINRSV16 EQU   BINRSV09+1
BINARRR  EQU   BINRSV09
BINSIDS  EQU   BINRSV09
BINSAI   EQU   BINRSV09
BINSDSI  EQU   BINRSV09
BINKDDSI EQU   BINRSV09
BINPDIR  EQU   BINFMF1
BINCMPCT EQU   BINFMF1
BINDESTS EQU   BINFMF1
BINSLUS1 EQU   BINLUP1+6
BINPLUS1 EQU   BINLUP1+1
BINDSP1  EQU   BINLUP1
BINFMHS1 EQU   BINLUP1
IOBSKSS  EQU   IOBSKADR+3
IOBSK0   EQU   IOBSKADR+2
IOBSKTT  EQU   IOBSKADR+1
IOBSKRV  EQU   IOBSKADR
IOBCSWSV EQU   IOBORG11+17
IOBSENSV EQU   IOBORG11+16
IOBRCD   EQU   IOBORG11+12
IOBMDREC EQU   IOBORG11+8
IOBNAMEA EQU   IOBNAME+1
IOBNAMSZ EQU   IOBNAME
IOBERCTA EQU   IOBERCT+1
IOBRTYPE EQU   IOBUCBXV
IOBRDCHP EQU   IOBORG10+20
IOBNEXTA EQU   IOBORG10+16
IOBREADA EQU   IOBORG10+12
IOBBUFC  EQU   IOBORG10+8
IOBSK2R  EQU   IOBSEEK2+7
IOBSK2HH EQU   IOBSEEK2+5
IOBSK2CC EQU   IOBSEEK2+3
IOBSK2BB EQU   IOBSEEK2+1
IOBSK2M  EQU   IOBSEEK2
IOBCHNPR EQU   IOBORG09+40
IOBDNCRF EQU   IOBORG09+32
IOBRSV35 EQU   IOBORG09+24
IOBDQPTR EQU   IOBORG09+20
IOBRSV34 EQU   IOBORG09+18
IOBDBYTN EQU   IOBORG09+16
IOBDCPND EQU   IOBORG09+12
IOBSTAT2 EQU   IOBDSTAT+1
IOBSIORT EQU   IOBSTAT1
IOBADDVU EQU   IOBSTAT1
IOBBUFF  EQU   IOBSTAT1
IOBENQUE EQU   IOBSTAT1
IOBPASS2 EQU   IOBSTAT1
IOBSYNCH EQU   IOBSTAT1
IOBNEWVL EQU   IOBSTAT1
IOBABNRM EQU   IOBSTAT1
IOBRELEX EQU   IOBDTYP2
IOBADDTY EQU   IOBDTYP2
IOBTYPE  EQU   IOBDTYP2
IOBRQUST EQU   IOBDTYP2
IOBSUFFX EQU   IOBDTYP2
IOBSBLKL EQU   IOBDTYP2
IOBSKEY  EQU   IOBDTYP2
IOBRELBL EQU   IOBDTYPE
IOBRDEXC EQU   IOBDTYPE
IOBDYNBF EQU   IOBDTYPE
IOBACTAD EQU   IOBDTYPE
IOBFDBCK EQU   IOBDTYPE
IOBEXTSC EQU   IOBDTYPE
IOBOVFLO EQU   IOBDTYPE
IOBVERFY EQU   IOBDTYPE
IOBDPLB  EQU   IOBDPLAD+1
IOBDAYLI EQU   IOBDPLAD
IOBDIOBS EQU   IOBORG09+2
IOBDBYTR EQU   IOBORG09
IOBBCHAD EQU   IOBORG08+12
IOBFCHNB EQU   IOBFCHAD+1
IOBCOUNT EQU   IOBFCHAD
IOBASYN  EQU   IOBORG08+7
IOBAPP   EQU   IOBORG08+6
IOBRSV32 EQU   IOBUNSQR
IOBRSV31 EQU   IOBUNSQR
IOBRSV30 EQU   IOBUNSQR
IOBKNRWR EQU   IOBUNSQR
IOBKNWR  EQU   IOBUNSQR
IOBNTAV2 EQU   IOBUNSQR
IOBNTAV1 EQU   IOBUNSQR
IOBCPBSY EQU   IOBUNSQR
IOBCHNNL EQU   IOBINDCT
IOBRSV29 EQU   IOBINDCT
IOBRSV28 EQU   IOBINDCT
IOBRSV27 EQU   IOBINDCT
IOBKEYAD EQU   IOBINDCT
IOBOVPTR EQU   IOBINDCT
IOBUNSCH EQU   IOBINDCT
IOBDEQCP EQU   IOBINDCT
IOBCCWAD EQU   IOBORG08
W1OEXTEN EQU   W1IEXTEN
IOBCCW   EQU   IOBORG06+8
IOBNXTPB EQU   IOBNXTPT+1
IOBRSV26 EQU   IOBSTATA
IOBRSV25 EQU   IOBSTATA
IOBRSV24 EQU   IOBSTATA
IOBRSV23 EQU   IOBSTATA
IOBRSV22 EQU   IOBSTATA
IOBRSV21 EQU   IOBSTATA
IOBRSV20 EQU   IOBSTATA
IOBAVLFL EQU   IOBSTATA
IOBRSV37 EQU   IOBORG06+1
IOBUCBXG EQU   IOBORG06
IOBCPA   EQU   IOBORG05+32
IOBERINF EQU   IOBORG05+16
IOBERCCW EQU   IOBORG05+8
IOBSNDPT EQU   IOBORG05+7
IOBRCVPT EQU   IOBORG05+6
IOBWORK  EQU   IOBORG05+1
IOBUCBX  EQU   IOBORG05
IOBR     EQU   IOBSEEK+7
IOBHH2   EQU   IOBHH+1
IOBHH1   EQU   IOBHH
IOBCC2   EQU   IOBCC+1
IOBCC1   EQU   IOBCC
IOBBB2   EQU   IOBBB+1
IOBBB1   EQU   IOBBB
IOBM     EQU   IOBSEEK
IOBRSV46 EQU   IOBFL4
IOBRSV47 EQU   IOBFL4
IOBENT   EQU   IOBFL4
IOBEQP   EQU   IOBFL4
IOBBUS   EQU   IOBFL4
IOBDCK   EQU   IOBFL4
IOBREJ   EQU   IOBFL4
IOBOVR   EQU   IOBFL4
IOBCRILC EQU   IOBORG04+1
IOBCRDCC EQU   IOBORG04
IOBGQECB EQU   IOBORG03
IOBSWAP  EQU   IOBORG02+4
IOBDQADB EQU   IOBDQADA+1
IOBRSV13 EQU   IOBDEQIN
IOBRSV12 EQU   IOBDEQIN
IOBRSV11 EQU   IOBDEQIN
IOBRSV10 EQU   IOBDEQIN
IOBRSV09 EQU   IOBDEQIN
IOBRSV08 EQU   IOBDEQIN
IOBRSV07 EQU   IOBDEQIN
IOBDEQ   EQU   IOBDEQIN
IOBNECB  EQU   IOBORG01+4
IOBNIOBB EQU   IOBNIOBA+1
IOBFIRST EQU   IOBNFLG1
IOBUPERR EQU   IOBNFLG1
IOBSPAN  EQU   IOBNFLG1
IOBBKSPC EQU   IOBNFLG1
IOBUPDAT EQU   IOBNFLG1
IOBREAD  EQU   IOBNFLG1
IOBWRITE EQU   IOBNFLG1
IOBSEGMT EQU   IOBPRTOV
IOSPCIWA EQU   IOSPCISC+44
IOSPCIRS EQU   IOSPCISC+8
@NM00075 EQU   IOSPCISC+4
@NM00074 EQU   IOSPCISC
IOSWRNDR EQU   IOSWTOWA+4
IOSWTOPT EQU   IOSWTOWA+3
IOSWTOCP EQU   IOSWTOWA+2
IOSWTOCH EQU   IOSWTOWA
IOSATTWA EQU   IOSATTSC+40
@NM00073 EQU   IOSATTSC+24
IOSATTSN EQU   IOSATTSC
PSARSAV  EQU   PSARSVTE+60
PSARSTK  EQU   PSARSVTE+56
PSAESAV3 EQU   PSARSVTE+52
PSAESTK3 EQU   PSARSVTE+48
PSAESAV2 EQU   PSARSVTE+44
PSAESTK2 EQU   PSARSVTE+40
PSAESAV1 EQU   PSARSVTE+36
PSAESTK1 EQU   PSARSVTE+32
PSAPSAV  EQU   PSARSVTE+28
PSAPSTK  EQU   PSARSVTE+24
PSAMSAV  EQU   PSARSVTE+20
PSAMSTK  EQU   PSARSVTE+16
PSASSAV  EQU   PSARSVTE+12
PSASSTK  EQU   PSARSVTE+8
PSANSTK  EQU   PSARSVTE+4
PSACSTK  EQU   PSARSVTE
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTIRM   EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
PSTDRDYQ EQU   PSTDMPS+1
@NM00153 EQU   PSTDMPS
PSTDGATE EQU   PSTDMPS
PSTDEBP  EQU   ISTPST+128
PSTSAVE  EQU   ISTPST+96
PSTSMDYP EQU   ISTPST+64
PSTCRRS  EQU   ISTPST+60
PSTCRR1  EQU   ISTPST+56
PSTIQE22 EQU   ISTPST+52
PSTIQE21 EQU   ISTPST+48
PSTIQE12 EQU   ISTPST+44
PSTIQE11 EQU   ISTPST+40
PSTUEQ   EQU   ISTPST+36
PSTNSSQ  EQU   ISTPST+32
PSTPSSQ  EQU   ISTPST+28
PSTACBCT EQU   ISTPST+24
PSTMPSTP EQU   ISTPST+20
PSTRSV08 EQU   PSTFLGA+1
PSTDMPC  EQU   PSTFLGA+1
PSTABEND EQU   PSTABINP
PSTAUTH  EQU   PSTFLGA
PSTSMCU  EQU   PSTFLGA
PSTSMQR  EQU   PSTFLGA
PSTIRBU2 EQU   PSTFLGA
PSTIRBU1 EQU   PSTFLGA
PSTUERN  EQU   PSTFLGA
PSTSSRN  EQU   PSTFLGA
PSTRQUEA EQU   PSTRQUE+1
PSTRSV07 EQU   PSTRQUE
PSTRSV06 EQU   PSTRQUE
PSTRSV05 EQU   PSTRQUE
PSTRSV04 EQU   PSTRQUE
PSTRSV03 EQU   PSTRQUE
PSTRSV02 EQU   PSTRQUE
PSTRSV01 EQU   PSTRQUE
PSTRQFLG EQU   PSTRQUE
PSTCHAIN EQU   ISTPST+4
@NM00152 EQU   ISTPST+2
PSTLNGTH EQU   ISTPST+1
PSTTYPE  EQU   ISTPST
CNSRSVRD EQU   NSCCRT+1
CSQC0B   EQU   NSCCRT+1
CSQC0A   EQU   NSCCRT+1
CSQC08   EQU   NSCCRT+1
CSQC09   EQU   NSCCRT+1
CSQC07   EQU   NSCCRT+1
CSQC05   EQU   NSCCRT
CSQC04   EQU   NSCCRT
CSQC03   EQU   NSCCRT
CSQC02   EQU   NSCCRT
CSQC01   EQU   NSCCRT
CSQC00   EQU   NSCCRT
CSTC00   EQU   NSCCRT
NNSRSVRD EQU   NSCNTRD+1
NSQC0B   EQU   NSCNTRD+1
NSQC0A   EQU   NSCNTRD+1
NSQC08   EQU   NSCNTRD+1
NSQC09   EQU   NSCNTRD+1
NSQC07   EQU   NSCNTRD+1
NSQC05   EQU   NSCNTRD
NSQC04   EQU   NSCNTRD
NSQC03   EQU   NSCNTRD
NSQC02   EQU   NSCNTRD
NSQC01   EQU   NSCNTRD
NSQC00   EQU   NSCNTRD
NSTC00   EQU   NSCNTRD
NSCPRFX  EQU   ISTNSCRR
CRACHAIN EQU   ISTCRA+928
CRARSV02 EQU   ISTCRA+924
CRARSV01 EQU   ISTCRA+920
CRABFTBA EQU   CRABUFA
CRAMASK  EQU   CRASVC+64
CRAHSIZ  EQU   CRASVC+60
CRAASCRR EQU   CRASVC
CRAPROCR EQU   ISTCRA+312
CRAPSS   EQU   ISTCRA+160
CRARPH   EQU   ISTCRA+52
CRALAPTR EQU   CRABASIC+48
CRAL9PTR EQU   CRABASIC+44
CRAL8PTR EQU   CRABASIC+40
CRAL7PTR EQU   CRABASIC+36
CRAL6PTR EQU   CRABASIC+32
CRAL5PTR EQU   CRABASIC+28
CRAL4PTR EQU   CRABASIC+24
CRAL3PTR EQU   CRABASIC+20
CRAL2PTR EQU   CRABASIC+16
CRAL1PTR EQU   CRABASIC+12
CRALEV01 EQU   CRALKACT+3
CRALEV02 EQU   CRALKACT+3
CRALEV03 EQU   CRALKACT+3
CRALEV04 EQU   CRALKACT+3
CRALEV05 EQU   CRALKACT+3
CRALEV06 EQU   CRALKACT+3
CRALEV07 EQU   CRALKACT+3
CRALEV08 EQU   CRALKACT+3
CRALEV09 EQU   CRALKACT+2
CRALEV10 EQU   CRALKACT+2
CRALEV11 EQU   CRALKACT+2
CRALEV12 EQU   CRALKACT+2
CRALEV13 EQU   CRALKACT+2
CRALEV14 EQU   CRALKACT+2
CRALEV15 EQU   CRALKACT+2
CRALEV16 EQU   CRALKACT+2
CRALEV17 EQU   CRALKACT+1
CRALEV18 EQU   CRALKACT+1
CRALEV19 EQU   CRALKACT+1
CRALEV20 EQU   CRALKACT+1
CRALEV21 EQU   CRALKACT+1
CRALEV22 EQU   CRALKACT+1
CRALEV23 EQU   CRALKACT+1
CRALEV24 EQU   CRALKACT+1
CRALEV25 EQU   CRALKACT
CRALEV26 EQU   CRALKACT
CRALEV27 EQU   CRALKACT
CRALEV28 EQU   CRALKACT
CRALEV29 EQU   CRALKACT
CRALEV30 EQU   CRALKACT
CRALEV31 EQU   CRALKACT
CRALEV32 EQU   CRALKACT
CRAFRR   EQU   CRAHDR+4
@NM00151 EQU   ISTAPCRR+137
@NM00150 EQU   APC57FLG
APCNREL  EQU   APC57FLG
APCRECRA EQU   APC57FLG
@NM00149 EQU   APC54FLG
APCRLST  EQU   APC54FLG
APCPR153 EQU   APC53FLG
@NM00148 EQU   APC52FLG
APCWKF   EQU   APC52FLG
APCNWF   EQU   APC52FLG
APCRDQ   EQU   APC52FLG
APCQENQ  EQU   APC52FLG
APCSMSR  EQU   APC52FLG
APCCKRQ  EQU   APC52FLG
@NM00147 EQU   APC31FLG
APCSORT  EQU   APC31FLG
APCRESCH EQU   APC31FLG
APCTPXIT EQU   APC31FLG
APCSWTWD EQU   ISTAPCRR+128
APCSAV2  EQU   ISTAPCRR+124
APCSAV1  EQU   ISTAPCRR+120
APCRETCD EQU   APCCOMF+2
@NM00146 EQU   APCCOMF1+1
APCZLBER EQU   APCCOMF1
APCEXIT  EQU   APCCOMF1
APCRELR  EQU   APCCOMF1
APCIRB2  EQU   APCCOMF1
APCIRB1  EQU   APCCOMF1
APCSMCR  EQU   APCCOMF1
APCUETSK EQU   APCCOMF1
APCSSTSK EQU   APCCOMF1
APCESTAL EQU   APCSAVE
APCFRRPM EQU   ISTAPCRR+40
APCQWFO  EQU   ISTAPCRR+36
APCPABSV EQU   ISTAPCRR+32
APCRTRN  EQU   ISTAPCRR+28
APCTCBA  EQU   ISTAPCRR+24
APCPSTA  EQU   ISTAPCRR+20
@NM00145 EQU   APCRFLG+1
APC31R   EQU   APCRFLG
APC58R   EQU   APCRFLG
APC57R   EQU   APCRFLG
APC56R   EQU   APCRFLG
APC54R   EQU   APCRFLG
APC53R   EQU   APCRFLG
APC52R   EQU   APCRFLG
APC51R   EQU   APCRFLG
@NM00144 EQU   APCATFLG+1
APC31E   EQU   APCATFLG
APC58E   EQU   APCATFLG
APC57E   EQU   APCATFLG
APC56E   EQU   APCATFLG
APC54E   EQU   APCATFLG
APC53E   EQU   APCATFLG
APC52E   EQU   APCATFLG
APC51E   EQU   APCATFLG
APCHDRSV EQU   ISTAPCRR
ASCPSREG EQU   ISTASCRR+44
ASCUSR01 EQU   ASCUSRGS+12
ASCUSR00 EQU   ASCUSRGS+8
ASCUSR15 EQU   ASCUSRGS+4
ASCUSR14 EQU   ASCUSRGS
ASCETRYA EQU   ISTASCRR+24
ASCKEY   EQU   ISTASCRR+23
ASCAUDIT EQU   ASCFLG3
ASCFBDUD EQU   ASCFLG3
ASCLLKF  EQU   ASCFLG3
ASCKEYF  EQU   ASCFLG3
ASCFBDAL EQU   ASCFLG3
ASCFSRGT EQU   ASCFLG3
ASCICR   EQU   ASCFLG2
ASCFSRIC EQU   ASCFLG2
ASCFBDIC EQU   ASCFLG2
ASCFBAIC EQU   ASCFLG2
ASCPASTR EQU   ASCFLG1
ASCFSR   EQU   ASCFLG1
ASCFBD   EQU   ASCFLG1
ASCFBA   EQU   ASCFLG1
ASCPFCRR EQU   ISTASCRR
ZCRRU    EQU   ZCRRHRU+3
ZCRRH    EQU   ZCRRHRU
ZCRWORDA EQU   ISTZCRR+477
ZCRCMNRC EQU   ISTZCRR+476
ZCRRSV97 EQU   ZCRENTER+18
ZCREIC2B EQU   ZCRENTER+18
ZCREAC2B EQU   ZCRENTER+18
ZCRELCAB EQU   ZCRENTER+18
ZCREDCMF EQU   ZCRENTER+18
ZCREBCIF EQU   ZCRENTER+18
ZCREICSG EQU   ZCRENTER+18
ZCREDCK0 EQU   ZCRENTER+18
ZCRECFY0 EQU   ZCRENTER+17
ZCREKCCB EQU   ZCRENTER+17
ZCREDCNB EQU   ZCRENTER+17
ZCREICOE EQU   ZCRENTER+17
ZCREBCNB EQU   ZCRENTER+17
ZCREBC0L EQU   ZCRENTER+17
ZCREBCAL EQU   ZCRENTER+17
ZCREDCQR EQU   ZCRENTER+17
ZCREDCPR EQU   ZCRENTER+16
ZCREBCSB EQU   ZCRENTER+16
ZCREAC1R EQU   ZCRENTER+16
ZCRECCCI EQU   ZCRENTER+16
ZCRECCAI EQU   ZCRENTER+16
ZCRECCBI EQU   ZCRENTER+16
ZCREBCAR EQU   ZCRENTER+16
ZCREBCDR EQU   ZCRENTER+16
ZCREBCBR EQU   ZCRENTER+15
ZCREDCXR EQU   ZCRENTER+15
ZCREDCWB EQU   ZCRENTER+15
ZCREDCWR EQU   ZCRENTER+15
ZCREKCCN EQU   ZCRENTER+15
ZCREKCBN EQU   ZCRENTER+15
ZCREKCBB EQU   ZCRENTER+15
ZCREJC0B EQU   ZCRENTER+15
ZCREJCDB EQU   ZCRENTER+14
ZCREJCCB EQU   ZCRENTER+14
ZCREJCBB EQU   ZCRENTER+14
ZCREJCAB EQU   ZCRENTER+14
ZCREIC1B EQU   ZCRENTER+14
ZCREIC0B EQU   ZCRENTER+14
ZCREICX0 EQU   ZCRENTER+14
ZCREICWB EQU   ZCRENTER+14
ZCREICVB EQU   ZCRENTER+13
ZCREICUB EQU   ZCRENTER+13
ZCREICTB EQU   ZCRENTER+13
ZCREICSC EQU   ZCRENTER+13
ZCREICSB EQU   ZCRENTER+13
ZCREICRB EQU   ZCRENTER+13
ZCREICQB EQU   ZCRENTER+13
ZCREICQA EQU   ZCRENTER+13
ZCREICOB EQU   ZCRENTER+12
ZCREICOA EQU   ZCRENTER+12
ZCREICNB EQU   ZCRENTER+12
ZCREICNA EQU   ZCRENTER+12
ZCREICMB EQU   ZCRENTER+12
ZCREICLB EQU   ZCRENTER+12
ZCREICKG EQU   ZCRENTER+12
ZCREICKE EQU   ZCRENTER+12
ZCREICKB EQU   ZCRENTER+11
ZCREICJB EQU   ZCRENTER+11
ZCREICID EQU   ZCRENTER+11
ZCREICIB EQU   ZCRENTER+11
ZCREICHB EQU   ZCRENTER+11
ZCREICGB EQU   ZCRENTER+11
ZCREICEB EQU   ZCRENTER+11
ZCREICDB EQU   ZCRENTER+11
ZCREICCI EQU   ZCRENTER+10
ZCREICCB EQU   ZCRENTER+10
ZCREICBI EQU   ZCRENTER+10
ZCREICBB EQU   ZCRENTER+10
ZCREICAB EQU   ZCRENTER+10
ZCREICAA EQU   ZCRENTER+10
ZCREHCAN EQU   ZCRENTER+10
ZCREGC0B EQU   ZCRENTER+10
ZCREGC0A EQU   ZCRENTER+9
ZCREGCLA EQU   ZCRENTER+9
ZCREGCEB EQU   ZCRENTER+9
ZCREGCDB EQU   ZCRENTER+9
@NM00143 EQU   ZCRENTER+9
ZCREGCBB EQU   ZCRENTER+9
ZCREGCAB EQU   ZCRENTER+9
ZCREFCEB EQU   ZCRENTER+9
ZCREFCEA EQU   ZCRENTER+8
ZCREECTA EQU   ZCRENTER+8
ZCREECEA EQU   ZCRENTER+8
ZCREECDA EQU   ZCRENTER+8
ZCREECCB EQU   ZCRENTER+8
ZCREECCA EQU   ZCRENTER+8
ZCREECBB EQU   ZCRENTER+8
ZCREECBA EQU   ZCRENTER+8
ZCREDCMB EQU   ZCRENTER+7
ZCREDCL0 EQU   ZCRENTER+7
ZCREDCKB EQU   ZCRENTER+7
ZCREDCKA EQU   ZCRENTER+7
ZCREDCJ0 EQU   ZCRENTER+7
ZCREDCI0 EQU   ZCRENTER+7
ZCREDCH0 EQU   ZCRENTER+7
ZCREDCF0 EQU   ZCRENTER+7
ZCREDCE0 EQU   ZCRENTER+6
ZCREDCD0 EQU   ZCRENTER+6
ZCREDCC0 EQU   ZCRENTER+6
ZCREDCB0 EQU   ZCRENTER+6
ZCREDCA0 EQU   ZCRENTER+6
ZCRECC2B EQU   ZCRENTER+6
ZCRECC1B EQU   ZCRENTER+6
ZCRECC1A EQU   ZCRENTER+6
ZCRECC0B EQU   ZCRENTER+5
ZCRECC0A EQU   ZCRENTER+5
ZCREBC0B EQU   ZCRENTER+5
ZCREBC0A EQU   ZCRENTER+5
ZCREBCZ0 EQU   ZCRENTER+5
ZCREBCY0 EQU   ZCRENTER+5
ZCREBCX0 EQU   ZCRENTER+5
ZCREBCXA EQU   ZCRENTER+5
ZCREBCSC EQU   ZCRENTER+4
ZCREBCRB EQU   ZCRENTER+4
ZCREBCRA EQU   ZCRENTER+4
ZCREBCQB EQU   ZCRENTER+4
ZCREBCPB EQU   ZCRENTER+4
ZCREBCOB EQU   ZCRENTER+4
ZCREBCNE EQU   ZCRENTER+4
ZCREBCND EQU   ZCRENTER+4
ZCREBCMB EQU   ZCRENTER+3
ZCREBCLB EQU   ZCRENTER+3
ZCREBCLA EQU   ZCRENTER+3
ZCREBCKB EQU   ZCRENTER+3
ZCREBCKA EQU   ZCRENTER+3
ZCREBCJB EQU   ZCRENTER+3
ZCREBCJA EQU   ZCRENTER+3
ZCREBCID EQU   ZCRENTER+3
ZCREBCIB EQU   ZCRENTER+2
ZCREBCIA EQU   ZCRENTER+2
ZCREBCHB EQU   ZCRENTER+2
ZCREBCHA EQU   ZCRENTER+2
ZCREBCGB EQU   ZCRENTER+2
ZCREBCGA EQU   ZCRENTER+2
ZCREBCFB EQU   ZCRENTER+2
ZCREBCFA EQU   ZCRENTER+2
ZCREBCEB EQU   ZCRENTER+1
ZCREBCDI EQU   ZCRENTER+1
ZCREBCCB EQU   ZCRENTER+1
ZCREBCBI EQU   ZCRENTER+1
ZCREBCBB EQU   ZCRENTER+1
ZCREBCBA EQU   ZCRENTER+1
ZCREBCAM EQU   ZCRENTER+1
ZCREBCAI EQU   ZCRENTER+1
ZCREBCAG EQU   ZCRENTER
ZCREBCAE EQU   ZCRENTER
ZCREBCAB EQU   ZCRENTER
ZCREBCAA EQU   ZCRENTER
ZCREAC1B EQU   ZCRENTER
ZCREAC0B EQU   ZCRENTER
ZCREAC0A EQU   ZCRENTER
ZCREAC1A EQU   ZCRENTER
ZCRTNAME EQU   ZCRAUDIT+1
ZCRTID   EQU   ZCRAUDIT
ZCRREMIC EQU   ISTZCRR+436
ZCRSAVEZ EQU   ISTZCRR+196
ZCRDAFSV EQU   ZCRCIDSV+2
ZCRSAFSV EQU   ZCRCIDSV
ZCRR13SV EQU   ISTZCRR+188
ZCRR2SV  EQU   ISTZCRR+184
ZCROPCDE EQU   ISTZCRR+183
ZCRPRMTC EQU   ISTZCRR+182
ZCRRCDSV EQU   ISTZCRR+181
ZCRAWQSW EQU   ISTZCRR+180
ZCRTOPQ  EQU   ISTZCRR+180
ZCRLSTFB EQU   ISTZCRR+180
ZCRXSCHD EQU   ISTZCRR+180
ZCRNXTEL EQU   ISTZCRR+180
ZCRSCANQ EQU   ISTZCRR+180
ZCRMOREL EQU   ISTZCRR+180
ZCRFBPRC EQU   ISTZCRR+180
ZCRFSBSV EQU   ISTZCRR+176
ZCRSVWK5 EQU   ZCRWKARA+16
ZCRSVWK4 EQU   ZCRWKARA+12
ZCRSVWK3 EQU   ZCRWKARA+8
ZCRSVWK2 EQU   ZCRWKARA+4
ZCRSVWK1 EQU   ZCRWKARA
ZCRSVF25 EQU   ZCRSVRTN+96
ZCRSVF24 EQU   ZCRSVRTN+92
ZCRSVF23 EQU   ZCRSVRTN+88
ZCRSVF22 EQU   ZCRSVRTN+84
ZCRSVF21 EQU   ZCRSVRTN+80
ZCRSVF20 EQU   ZCRSVRTN+76
ZCRSVF19 EQU   ZCRSVRTN+72
ZCRSVF18 EQU   ZCRSVRTN+68
ZCRSVF17 EQU   ZCRSVRTN+64
ZCRSVF16 EQU   ZCRSVRTN+60
ZCRSVF15 EQU   ZCRSVRTN+56
ZCRSVF14 EQU   ZCRSVRTN+52
ZCRSVF13 EQU   ZCRSVRTN+48
ZCRSVF12 EQU   ZCRSVRTN+44
ZCRSVF11 EQU   ZCRSVRTN+40
ZCRSVF10 EQU   ZCRSVRTN+36
ZCRSVF9  EQU   ZCRSVRTN+32
ZCRSVF8  EQU   ZCRSVRTN+28
ZCRSVF7  EQU   ZCRSVRTN+24
ZCRSVF6  EQU   ZCRSVRTN+20
ZCRSVF5  EQU   ZCRSVRTN+16
ZCRSVF4  EQU   ZCRSVRTN+12
ZCRSVF3  EQU   ZCRSVRTN+8
ZCRSVF2  EQU   ZCRSVRTN+4
ZCRSVF1  EQU   ZCRSVRTN
ZCRPVZB  EQU   ISTZCRR+52
ZCRZLB   EQU   ISTZCRR+48
ZCRBFPTR EQU   ISTZCRR+44
ZCRCCWA  EQU   ISTZCRR+40
ZCRPSW   EQU   ZCRPARMS+15
ZCRPCHAR EQU   ZCRPARMS+14
ZCRPRES2 EQU   ZCRPCOD2
ZCRPMFGF EQU   ZCRPCOD2
ZCRPFHDR EQU   ZCRPCOD2
ZCRPPG2  EQU   ZCRPCOD2
ZCRPRES  EQU   ZCRPCOD1
ZCRPCFTX EQU   ZCRPCOD1
ZCRPBUF  EQU   ZCRPCOD1
ZCRPLSCB EQU   ZCRPCOD1
ZCRPLSBQ EQU   ZCRPLSBF
ZCRPFSB  EQU   ZCRPCOD1
ZCRPLNG  EQU   ZCRPCOD1
ZCRPPG   EQU   ZCRPCOD1
ZCRDTODA EQU   ZCRDFRDA
ZCRMLNG  EQU   ZCRPARMS+8
ZCRTBPTR EQU   ZCRPARMS+4
ZCRCBPTR EQU   ZCRFBPTR
ZCRCRLCP EQU   ISTZCRR+20
@NM00142 EQU   ZCRSCPSW
ZCRSKIPT EQU   ZCRSCPSW
ZCRFSBWE EQU   ZCRSCPSW
ZCRPRCMP EQU   ZCRSCPSW
ZCRLREQ  EQU   ZCRSCPSW
ZCRRJLCP EQU   ZCRSCPSW
ZCRTPINV EQU   ZCRSCPSW
ZCRTPEX  EQU   ZCRSCPSW
@NM00141 EQU   ZCRIBPR
ZCR3270R EQU   ZCRIBPR
ZCR3270  EQU   ZCRIBPR
ZCRLCPFD EQU   ZCRIBPR
ZCRLCPFR EQU   ZCRIBPR
ZCRRELK  EQU   ZCRIBPR
ZCRERR   EQU   ZCRIBPR
ZCRNOBUF EQU   ZCRIBPR
@NM00140 EQU   ZCRPFLGS
ZCRQAHED EQU   ZCRPFLGS
ZCRF1RES EQU   ZCRGENSW
ZCRBRIS  EQU   ZCRGENSW
ZCRCLRBD EQU   ZCRGENSW
ZCREXRES EQU   ZCRGENSW
ZCRLCSYN EQU   ZCRGENSW
ZCRRT06  EQU   ZCRGENSW
ZCRTSW2  EQU   ZCRGENSW
ZCRTSW1  EQU   ZCRGENSW
ZCRINLCP EQU   ZCRFLGS3
ZCRWRPTR EQU   ZCRFLGS3
ZCRNOFRE EQU   ZCRFLGS3
ZCREDRIV EQU   ZCRFLGS3
ZCRDISC  EQU   ZCRFLGS3
ZCRTPDIS EQU   ZCRFLGS3
ZCRTPCON EQU   ZCRFLGS3
ZCRTIC   EQU   ZCRFLGS3
ZCRCNLXL EQU   ZCRRESET
ZCRENDAN EQU   ZCRSWFLD
ZCRENDXL EQU   ZCRSWFLD
ZCRENDX  EQU   ZCRSWFLD
ZCROB1   EQU   ZCRNDLCP
ZCRENDPR EQU   ZCRSWFLD
ZCREXTYP EQU   ZCRSWFLD
ZCRSLCP  EQU   ZCRENDSH
ZCRIF0E3 EQU   ZCRFLGS2
ZCRIF0E2 EQU   ZCRFLGS2
ZCRIF0E1 EQU   ZCRFLGS2
ZCROB    EQU   ZCRFLGS2
ZCRFMSED EQU   ZCRFLGS2
ZCRSHEDI EQU   ZCRFLGS2
ZCRLOCAL EQU   ZCRFLGS2
ZCRFEXIT EQU   ZCRFLGS1
ZCRUNSOL EQU   ZCRFLGS1
ZCRENDLP EQU   ZCRFLGS1
ZCRNRMEX EQU   ZCRFLGS1
ZCRWAIT  EQU   ZCRFLGS1
ZCRDEQSW EQU   ZCRFLGS1
ZCRQUESW EQU   ZCRFLGS1
ZCREXSW  EQU   ZCRFLGS1
ZCRFRRA  EQU   ISTZCRR+8
ZCRCHAIN EQU   ISTZCRR+4
ZCRFLAG  EQU   ZCRCRR+3
ZCRLEN   EQU   ZCRCRR+1
ZCRID    EQU   ZCRCRR
CCFRSVD1 EQU   CFCCRT
CCFCR2   EQU   CFCCRT
CCFCRP   EQU   CFCCRT
CCFCR1   EQU   CFCCRT
CCFCS2   EQU   CFCCRT
CCFCS1   EQU   CFCCRT
NCFRSVD  EQU   CFCNTRD
NCFCR2   EQU   CFCNTRD
NCFCRP   EQU   CFCNTRD
NCFCR1   EQU   CFCNTRD
NCFCS2   EQU   CFCNTRD
NCFCS1   EQU   CFCNTRD
PFCRSV01 EQU   ISTPFCRR+13
PFCFTA   EQU   ISTPFCRR+12
CRRFRR   EQU   PFCFRRO
CRRCHAIN EQU   PFCCRRO
CRRLEN   EQU   PFCCRRLN
PFCRSV10 EQU   PFCCRR+1
CRRID    EQU   PFCCRRID
ZSAZTRAC EQU   ISTZSAVE+36
ZSAZSVVR EQU   ISTZSAVE+12
ZSAZSVRR EQU   ISTZSAVE+8
ZSAZSVFC EQU   ISTZSAVE+4
ZSAZACTV EQU   ZSAZSVMS
LCPFTYPE EQU   LCPRPHA
LCPRSTQH EQU   LCPLCCW
LCPCLREP EQU   ISTLCPB+44
LCPUBFSB EQU   LCPFLCCW
LCPRSV77 EQU   ISTLCPB+39
LCPLCCWC EQU   ISTLCPB+38
LCPRSV78 EQU   LCPFLG1
LCPTRANS EQU   LCPFLG1
LCPSTLB  EQU   LCPFLG1
LCPREDRV EQU   LCPFLG1
LCPDIRPT EQU   LCPFLG1
LCPINTER EQU   LCPFLG1
LCPRESET EQU   LCPFLG1
LCPSTYPE EQU   ISTLCPB+36
LCPFSNCH EQU   ISTLCPB+34
LCPFOSN  EQU   ISTLCPB+32
LCPTLBAD EQU   ISTLCPB+28
LCPFDB2  EQU   LCPFDBA+1
LCPFDB1  EQU   LCPFDBA
LCPNXLCW EQU   ISTLCPB+20
LCPDAF   EQU   LCPCID+2
LCPSAF   EQU   LCPCID
LCPLCCW1 EQU   ISTLCPB+12
LCPRRCNT EQU   LCPSEQ+1
LCPRRCCT EQU   LCPSEQ
LCPATOP  EQU   LCPFLAG2
LCPFREE  EQU   LCPFLAG2
LCPDSTAT EQU   LCPFLAG2
LCPEXRES EQU   LCPFID0
LCPZRIMM EQU   LCPTLBPI
LCPRSTRT EQU   LCPFLAG2
LCPASYN  EQU   LCPFLAG2
LCPPRFLG EQU   LCPFLAG2
LCPZMIRC EQU   LCPRUCNT
LCPCHAI2 EQU   LCPCHAIN+1
LCPCHNG  EQU   LCPCHAI1
LCPZRT0B EQU   LCPMNRCD
LCPZRT0A EQU   LCPMNRCD
LCPZRTL9 EQU   LCPZRT09
LCPZRTL8 EQU   LCPZRT08
LCPZRTL7 EQU   LCPZRT07
LCPZRTL6 EQU   LCPZRT06
LCPZRTL5 EQU   LCPZRT05
LCPZRTL4 EQU   LCPZRT04
LCPZRTL3 EQU   LCPZRT03
LCPZRTL2 EQU   LCPZRT02
LCPZRT01 EQU   LCPFLAGS
LCPZRT00 EQU   LCPFLAGS
LCPLNGTH EQU   ISTLCPB+1
LCPTYPE  EQU   ISTLCPB
LCCWDATA EQU   ISTLCCW+4
LCCWCNT  EQU   ISTLCCW+2
LCCWACI  EQU   LCCWFLAG
LCCWRFI  EQU   LCCWFLAG
LCCWPER  EQU   LCCWLSI
LCCWIDAT EQU   LCCWFLAG
LCCWNTVC EQU   LCCWFLAG
LCCWCKPT EQU   LCCWFLAG
LCCWCC   EQU   LCCWFLAG
LCCWCD   EQU   LCCWFLAG
LCCWTYPE EQU   LCCWCTL
LCCWMODE EQU   LCCWCTL
LCCWSOP  EQU   LCCWRWOP
@NM00139 EQU   LCCWRWOP
LCCWSD   EQU   LCCWOP
LCCWSI   EQU   LCCWOP
SAVE1    EQU   C06SAVE
RETSAV2  EQU   RETSAV02+8
RETSAV0  EQU   RETSAV02
DPARSV01 EQU   DPAFLAGS
LCLRSV09 EQU   ISTLCL+213
LCLRSV08 EQU   LCLFL
LCLRSV07 EQU   LCLFL
LCLRSV06 EQU   LCLFL
LCLRSV05 EQU   LCLFL
LCLRSV04 EQU   LCLFL
LCLRSV03 EQU   LCLFL
LCLRSV02 EQU   LCLFL
TERMRSV8 EQU   ISTTERM+213
TERMRSV5 EQU   TERMFL
APPRSV01 EQU   APPLFL
LINERN   EQU   LINETFL
ATCAOS   EQU   ISTATCVT+1584
ATCPOPAB EQU   ATCAOSM+640
ATCVIOPM EQU   ATCAOSM+636
ATCTPMMI EQU   ATCAOSM+632
ATCTPMPB EQU   ATCAOSM+600
ATCRSV88 EQU   ATCAOSM+596
ATCRPLCT EQU   ATCAOSM+594
ATCCRACT EQU   ATCAOSM+592
ATCSRBCT EQU   ATCAOSM+590
ATCRSV75 EQU   ATCAOSM+589
ATCRSV66 EQU   ATCZFLAG
ATCZF001 EQU   ATCZFLAG
ATCTPCP1 EQU   ATCAOSM+584
ATCTPCP0 EQU   ATCAOSM+580
ATCAICTN EQU   ATCAOSM+576
ATCZR01  EQU   ATCAOSM+572
ATCMPLTA EQU   ATCAOSM+568
ATCASCB  EQU   ATCAOSM+564
ATCAP86  EQU   ATCAOSM+560
ATCAP85  EQU   ATCAOSM+556
ATCAP84  EQU   ATCAOSM+552
ATCAP83  EQU   ATCAOSM+548
ATCAP82  EQU   ATCAOSM+544
ATCAP69  EQU   ATCAOSM+540
ATCAP66  EQU   ATCAOSM+536
ATCAP62  EQU   ATCAOSM+532
ATCAPC59 EQU   ATCAOSM+528
ATCAP56  EQU   ATCAOSM+524
ATCAP55  EQU   ATCAOSM+520
ATCRCFY0 EQU   ATCAOSM+516
ATCAP41  EQU   ATCAOSM+512
ATCAPC25 EQU   ATCAOSM+508
ATCAP23  EQU   ATCAOSM+504
ATCTPSPB EQU   ATCAOSM+472
ATCTRMPB EQU   ATCAOSM+440
ATCAPBE  EQU   ATCAOSM+436
ATCPSTA  EQU   ATCAOSM+432
ATCSMABF EQU   ATCAOSM+428
ATCSMAPR EQU   ATCAOSM+424
ATCTPWQA EQU   ATCAOSM+420
ATCSMAID EQU   ATCAOSM+416
ATCSMARA EQU   ATCAOSM+412
ATCCACXA EQU   ATCAOSM+408
ATCZLAAB EQU   ATCAOSM+404
ATCATA10 EQU   ATCAOSM+400
ATCHLTCB EQU   ATCAOSM+396
@NM00138 EQU   ATCVTFLG
ATCVTACT EQU   ATCVTFLG
ATCRPT40 EQU   ATCAOSM+388
ATCRPT39 EQU   ATCAOSM+384
ATCRPT38 EQU   ATCAOSM+380
ATCRPT37 EQU   ATCAOSM+376
ATCRPT36 EQU   ATCAOSM+372
ATCRPT35 EQU   ATCAOSM+368
ATCRPT34 EQU   ATCAOSM+364
ATCRPT33 EQU   ATCAOSM+360
ATCRPT32 EQU   ATCAOSM+356
ATCRPT31 EQU   ATCAOSM+352
ATCRPT30 EQU   ATCAOSM+348
ATCRPT29 EQU   ATCAOSM+344
ATCRPT28 EQU   ATCAOSM+340
ATCRPT27 EQU   ATCAOSM+336
@NM00137 EQU   ATCAOSM+333
@NM00136 EQU   @NM00135
ATCSNUF  EQU   @NM00135
ATCOPKL  EQU   @NM00135
ATCABEN  EQU   @NM00135
ATCAIWT  EQU   ATCAOSM+328
ATCINFDD EQU   ATCAOSM+324
ATCORFMG EQU   ATCAOSM+320
ATCORFRL EQU   ATCAOSM+316
ATCOROBT EQU   ATCAOSM+312
ATCORQG  EQU   ATCORSRB
ATCORTBF EQU   ATCSQAFR
ATCRPLAC EQU   ATCRPLCN+2
ATCRPLRC EQU   ATCRPLCN
ATCCRPLQ EQU   ATCCRPL
ATCSRBAC EQU   ATCSRBCN+2
ATCSRBRC EQU   ATCSRBCN
ATCSRBQ  EQU   ATCSRB
ATCCRAAC EQU   ATCCRACN+2
ATCCRARC EQU   ATCCRACN
ATCCRAQ  EQU   ATCCRA
ATCRPT12 EQU   ATCAOSM+276
ATCDMAPP EQU   ATCAOSM+272
ATCAP38  EQU   ATCAOSM+268
ATCAP37  EQU   ATCAOSM+264
ATCZDFJ0 EQU   ATCAOSM+260
ATCAP51  EQU   ATCAOSM+256
ATCZPAB2 EQU   ATCAOSM+224
ATCZPAB1 EQU   ATCAOSM+192
ATCZLFVT EQU   ATCAOSM+188
ATCZLPVT EQU   ATCAOSM+184
ATCZDVTX EQU   ATCAOSM+180
ATCZDVTA EQU   ATCAOSM+176
ATCZDVT9 EQU   ATCAOSM+172
ATCZDVT8 EQU   ATCAOSM+168
ATCZDVT7 EQU   ATCAOSM+164
ATCRSV56 EQU   ATCDAPVT+22
ATCDAPDG EQU   ATCDAPVT+20
ATCDXCEA EQU   ATCDAPVT+16
ATCDCEA  EQU   ATCDAPVT+12
ATCDPCIA EQU   ATCDAPVT+8
ATCDSIOA EQU   ATCDAPVT+4
ATCDEOEA EQU   ATCDAPVT
ATCZLAEA EQU   ATCLDAPP+16
ATCZLCEA EQU   ATCLDAPP+12
ATCRSV17 EQU   ATCLDAPP+8
ATCSMFRR EQU   ATCLDAPP+4
ATCCDTID EQU   ATCLDAPP
ATCZAEA  EQU   ATCICAPP+16
ATCZCEA  EQU   ATCICAPP+12
ATCCDTCB EQU   ATCICAPP+8
ATCZSIOA EQU   ATCICAPP+4
ATCCDRPH EQU   ATCICAPP
ATCAP65  EQU   ATCAOSM+96
ATCZDVT6 EQU   ATCAOSM+92
ATCZDVT4 EQU   ATCAOSM+88
ATCZDVT3 EQU   ATCAOSM+84
ATCZDVT1 EQU   ATCAOSM+80
ATCICNCB EQU   ATCAOSM+76
ATCZPSVT EQU   ATCAOSM+72
ATCZFSVT EQU   ATCAOSM+68
ATCAP64  EQU   ATCAOSM+64
ATCAP63  EQU   ATCAOSM+60
ATCAP61  EQU   ATCAOSM+56
ATCAP58  EQU   ATCAOSM+52
ATCAP57  EQU   ATCAOSM+48
ATCAP54  EQU   ATCAOSM+44
ATCAP53  EQU   ATCAOSM+40
ATCAP52  EQU   ATCAOSM+36
ATCAP34  EQU   ATCAOSM+32
ATCAP32  EQU   ATCAOSM+28
ATCAP31  EQU   ATCAOSM+24
ATCAP12  EQU   ATCAOSM+20
ATCAP11  EQU   ATCAOSM+16
ATCCMTCB EQU   ATCAOSM+12
ATCPRPH  EQU   ATCAOSM+8
ATCGSRBF EQU   ATCGSRBG
ATCSRBRT EQU   ATCAOSM
@NM00134 EQU   @NM00133
ATCVTMAB EQU   @NM00133
@NM00132 EQU   ATCVTBAM
ATCVDLOK EQU   ISTATCVT+904
ATCVFPAB EQU   ISTATCVT+872
ATCVDPAB EQU   ISTATCVT+840
ATCIOECB EQU   ISTATCVT+836
ATCINCW3 EQU   ISTATCVT+832
ATCMODTB EQU   ISTATCVT+828
ATCUSSPT EQU   ISTATCVT+824
ATCSRTAB EQU   ISTATCVT+820
@NM00131 EQU   ISTATCVT+819
@NM00130 EQU   ATCSTAT2
ATCTRSMS EQU   ATCSTAT2
ATCTRLOK EQU   ATCSTAT2
ATCTRPSS EQU   ATCSTAT2
ATCTRESC EQU   ATCSTAT2
ATCTRAPI EQU   ATCSTAT2
ATCNMCTR EQU   ISTATCVT+816
ATCSEC51 EQU   ATCSECST
ATCSEC40 EQU   ATCSIPD+8
ATCSEC30 EQU   ATCSIPD+4
ATCSEC21 EQU   ATCSIPD
ATCSEC10 EQU   ATCSOPD+4
ATCSEC01 EQU   ATCSOPD
ATCPOIA  EQU   ATCRNO+1
@NM00129 EQU   ATCRNO
ATCPODVT EQU   ISTATCVT+784
ATCS49XL EQU   ISTATCVT+780
ATCS49XI EQU   ISTATCVT+776
ATCLCLCT EQU   ATCVLCNT+2
ATCRNCNT EQU   ATCVLCNT
ATCCFEAD EQU   ISTATCVT+768
ATCPTR00 EQU   ISTATCVT+736
ATCRSV10 EQU   ISTATCVT+704
ATCTACB  EQU   ISTATCVT+700
ATCVTINM EQU   ISTATCVT+696
ATCTCLIM EQU   ISTATCVT+692
ATCTCLOM EQU   ISTATCVT+688
ATCVTIPB EQU   ISTATCVT+656
ATCTCIPB EQU   ISTATCVT+624
ATCTIPAB EQU   ISTATCVT+592
ATCOCCCB EQU   ISTATCVT+588
ATCOCCOB EQU   ISTATCVT+584
ATCCDLAD EQU   ISTATCVT+580
ATCCCLAD EQU   ISTATCVT+576
ATCDLRPB EQU   ISTATCVT+544
ATCPGPAB EQU   ISTATCVT+512
ATCVPAB1 EQU   ISTATCVT+480
ATCRSV97 EQU   ISTATCVT+476
ATCRDTLK EQU   ISTATCVT+472
ATCVOCLK EQU   ISTATCVT+468
ATCDVTLK EQU   ISTATCVT+456
ATCAP36  EQU   ISTATCVT+452
ATCAP35  EQU   ISTATCVT+448
ATCAP33  EQU   ISTATCVT+444
ATCRSV99 EQU   ISTATCVT+440
ATCONFIG EQU   ISTATCVT+432
ATCNODDS EQU   ISTATCVT+428
ATCNODEL EQU   ISTATCVT+420
ATCRSV69 EQU   ISTATCVT+416
ATCAPCR5 EQU   ISTATCVT+412
ATCLDECB EQU   ISTATCVT+408
ATCLDNCS EQU   ISTATCVT+404
ATCCDPTR EQU   ISTATCVT+400
ATCADEL  EQU   ISTATCVT+396
ATCTODVT EQU   ISTATCVT+392
ATCDEBCH EQU   ISTATCVT+388
ATCHBSIZ EQU   ATCHPGM+2
ATCHBFNO EQU   ATCHPGM
ATCCRME  EQU   ISTATCVT+380
ATCRVCHS EQU   ISTATCVT+372
ATCECTLP EQU   ISTATCVT+368
ATCZDVTB EQU   ISTATCVT+364
ATCECPRT EQU   ISTATCVT+360
ATCVTLOD EQU   ISTATCVT+356
ATCTRPAB EQU   ISTATCVT+352
ATCMSGM  EQU   ISTATCVT+348
ATCMSGP  EQU   ISTATCVT+344
ATCEPT   EQU   ISTATCVT+340
ATCDVT   EQU   ISTATCVT+336
ATCTRCPT EQU   ISTATCVT+332
ATCDVLOD EQU   ISTATCVT+328
ATCALERT EQU   ISTATCVT+324
ATCEPA   EQU   ISTATCVT+320
ATCSAF   EQU   ISTATCVT+318
ATCXRANG EQU   ISTATCVT+317
ATCLAST  EQU   ATCSHRFG
ATCSHRTN EQU   ISTATCVT+308
ATCUEP   EQU   ISTATCVT+304
ATCOCRT  EQU   ISTATCVT+300
ATCCSMA  EQU   ATCCSMR
ATCESC02 EQU   ISTATCVT+292
ATCESC01 EQU   ISTATCVT+288
ATCMNT   EQU   ISTATCVT+272
ATCRSV16 EQU   ISTATCVT+270
ATCMAXID EQU   ISTATCVT+269
ATCMSGSP EQU   ATCCOM+268
ATCACTRM EQU   ATCCOM+264
ATCNERAP EQU   ATCCOM+260
ATCNESAL EQU   ATCCOM+256
ATCRCC65 EQU   ATCCOM+252
ATCRCC26 EQU   ATCCOM+248
ATCRCC63 EQU   ATCCOM+244
ATCRSV11 EQU   ATCCOM+242
ATCVTMID EQU   ATCCOM+240
ATCAPOST EQU   ATCCOM+236
ATCNERFN EQU   ATCCOM+232
ATCNERNE EQU   ATCCOM+228
ATCNERCV EQU   ATCCOM+224
ATCNERST EQU   ATCCOM+220
ATCDCC61 EQU   ATCCOM+216
ATCDCC60 EQU   ATCCOM+212
ATCSRTAD EQU   ATCCOM+204
ATCFIRA  EQU   ATCCOM+200
ATCSMBQ  EQU   ATCCOM+196
ATCSMRC  EQU   ATCCOM+192
ATCSMRS  EQU   ATCCOM+188
ATCSMQU  EQU   ATCCOM+184
ATCSMRQ  EQU   ATCCOM+180
ATCACDA  EQU   ATCCOM+176
ATCSTMA  EQU   ATCCOM+172
ATCFRSTR EQU   ATCCOM+168
ATCGTSTR EQU   ATCCOM+164
ATCREADA EQU   ATCCOM+160
ATCALOAD EQU   ATCCOM+156
ATCBLDLA EQU   ATCCOM+152
ATCFBRPH EQU   ATCCOM+148
ATCBFTRC EQU   ATCCOM+144
ATCTPBUF EQU   ATCTHTRC
ATCREMOV EQU   ATCCOM+136
ATCADD   EQU   ATCCOM+132
ATCBPDA  EQU   ATCCOM+128
ATCDVTPT EQU   ATCCOM+124
ATCFEPT  EQU   ATCCOM+120
ATCFDVT  EQU   ATCCOM+116
ATCPTCHA EQU   ATCCOM+108
ATCAUTHA EQU   ATCCOM+104
ATCACCTA EQU   ATCCOM+100
ATCRDTH  EQU   ATCCOM+96
ATCFRSCH EQU   ATCCOM+92
ATCFSB   EQU   ATCCOM+88
ATCHLTMS EQU   ATCCOM+84
ATCECPRM EQU   ATCCOM+80
ATCECNET EQU   ATCCOM+76
ATCECOPC EQU   ATCCOM+72
ATCVPARM EQU   ATCCOM+68
ATCECVRQ EQU   ATCCOM+64
ATCECSES EQU   ATCCOM+60
ATCOCHA  EQU   ATCCOM+56
ATCDSPLQ EQU   ATCCOM+52
ATCECDSP EQU   ATCCOM+48
ATCVARYQ EQU   ATCCOM+44
ATCECVRY EQU   ATCCOM+40
ATCHALTQ EQU   ATCCOM+36
ATCECHLT EQU   ATCCOM+32
ATCMODQ  EQU   ATCCOM+28
ATCECMOD EQU   ATCCOM+24
ATCASCHD EQU   ATCCOM+20
ATCSRT   EQU   ATCCOM+16
ATCRDT   EQU   ATCCOM+12
ATCDCFRR EQU   ATCCOM+8
ATCAPI   EQU   ATCCOM+4
ATCRSV04 EQU   ATCSTAT4
ATCVTTRC EQU   ATCSTAT4
ATCNCSD  EQU   ATCSTAT4
ATCMTST  EQU   ATCSTAT4
ATCTPRT  EQU   ATCSTAT4
ATCPRTAT EQU   ATCSTAT4
@NM00128 EQU   ATCPOFLG
ATCPOUNS EQU   ATCPOFLG
ATCHSDMF EQU   ATCSTFLG
@NM00127 EQU   ATCSTAT1
ATCMDHLT EQU   ATCSTAT1
ATCINHLT EQU   ATCSTAT1
ATCNETSL EQU   ATCSTAT1
ATCQKHLT EQU   ATCSTAT1
ATCSNHLT EQU   ATCSTAT1
ATCACTIV EQU   ATCSTAT1
ATCSTART EQU   ATCSTAT1
DYPPAB   EQU   ISTDYPAB+16
DYPRSV01 EQU   ISTDYPAB+12
DYPTSKID EQU   ISTDYPAB+8
DYPCHAIN EQU   ISTDYPAB+4
DYPFLGS  EQU   ISTDYPAB+2
DYPLNGTH EQU   ISTDYPAB+1
DYPTYPE  EQU   ISTDYPAB
CONUESBF EQU   ISTCONFT+1362
CONSTVAR EQU   CONSTAID+1
CONSTFIL EQU   CONSTAID
CONBLKNO EQU   CONSCPID+2
CONFILL  EQU   CONSCPID+1
CONFCNL  EQU   CONSCPID
CONF01SV EQU   ISTCONFT+1352
CONSDMLC EQU   ISTCONFT+1348
CONSDECB EQU   ISTCONFT+1344
CONUNITS EQU   ISTCONFT+1342
CONRVPT1 EQU   ISTCONFT+1341
CONGLBBH EQU   ISTCONFT+1340
CONRSV24 EQU   ISTCONFT+1312
CONFTTAT EQU   ISTCONFT+1284
CONFXXAT EQU   ISTCONFT+1256
CONFLDAT EQU   ISTCONFT+1228
CONFTRAT EQU   ISTCONFT+1200
CONFNSAT EQU   ISTCONFT+1172
CONCSCB  EQU   ISTCONFT+1168
CONRSV50 EQU   ISTCONFT+1166
CONLIST  EQU   ISTCONFT+1164
CONSTAFP EQU   ISTCONFT+1160
CONECDET EQU   ISTCONFT+1156
CONRECON EQU   ISTCONFT+1036
CONNTSOL EQU   ISTCONFT+916
CONTRACE EQU   ISTCONFT+796
CONTOLTP EQU   ISTCONFT+676
CONVVTAM EQU   ISTCONFT+556
CONVTHDR EQU   ISTCONFT+420
CONRSV01 EQU   ISTCONFT+417
CONNSNEC EQU   CONFLG01
CONFTPSA EQU   CONFLG01
CONFTTA  EQU   CONFLG01
CONFTNSA EQU   CONFLG01
CONFTNAC EQU   CONFLG01
CONFTEXS EQU   CONFLG01
CONFTTMR EQU   CONFLG01
CONFTSTM EQU   CONFLG01
CONCRPLD EQU   ISTCONFT+404
CONPPDBF EQU   ISTCONFT+392
CONNPDBF EQU   ISTCONFT+380
CONAPDBF EQU   ISTCONFT+368
CONWPDBF EQU   ISTCONFT+356
CONIODBF EQU   ISTCONFT+344
CONUEDBF EQU   ISTCONFT+332
CONVPDBF EQU   ISTCONFT+320
CONVFDBF EQU   ISTCONFT+308
CONLPDBF EQU   ISTCONFT+296
CONLFDBF EQU   ISTCONFT+284
CONSPDBF EQU   ISTCONFT+272
CONSFDBF EQU   ISTCONFT+260
CONCRPLS EQU   ISTCONFT+248
CONPPSBF EQU   ISTCONFT+236
CONNPSBF EQU   ISTCONFT+224
CONAPSBF EQU   ISTCONFT+212
CONWPSBF EQU   ISTCONFT+200
CONIOSBF EQU   ISTCONFT+188
CONVPSBF EQU   ISTCONFT+176
CONVFSBF EQU   ISTCONFT+164
CONLPSBF EQU   ISTCONFT+152
CONLFSBF EQU   ISTCONFT+140
CONSPSBF EQU   ISTCONFT+128
CONSFSBF EQU   ISTCONFT+116
CONRSV17 EQU   ISTCONFT+115
CONCRPL  EQU   CONBUFF+1
CONPPEX  EQU   CONBUFF+1
CONNPEX  EQU   CONBUFF+1
CONAPEX  EQU   CONBUFF+1
CONWPEX  EQU   CONBUFF+1
CONIOEX  EQU   CONBUFF
CONUECB  EQU   CONBUFF
CONVPEX  EQU   CONBUFF
CONVFEX  EQU   CONBUFF
CONLPEX  EQU   CONBUFF
CONLFEX  EQU   CONBUFF
CONSPEX  EQU   CONBUFF
CONSFEX  EQU   CONBUFF
CONACTV  EQU   CONSTAT
CONVRYIN EQU   CONSTAT
CONLODED EQU   CONSTAT
CONDSOPN EQU   CONSTAT
CONSTOR  EQU   CONSTAT
@NM00126 EQU   CONSTAT
@NM00125 EQU   CONSTAT
@NM00124 EQU   CONSTAT
CONIOTR  EQU   CONOPTFL
CONMODTR EQU   CONOPTFL
CONBTUTR EQU   CONOPTFL
CONBUFTR EQU   CONOPTFL
@NM00123 EQU   CONOPTFL
@NM00122 EQU   CONOPTFL
@NM00121 EQU   CONOPTFL
CONWRMST EQU   CONOPTFL
CONSYLST EQU   CONDSFLG
CONSYLIB EQU   CONDSFLG
CONSYOBJ EQU   CONDSFLG
@NM00120 EQU   CONDSFLG
@NM00119 EQU   CONDSFLG
@NM00118 EQU   CONDSFLG
CONMODFY EQU   ISTCONFT+109
CONDISPL EQU   ISTCONFT+108
CONVARY  EQU   ISTCONFT+107
CONHLTS  EQU   CONHALT
CONHLTQ  EQU   CONHALT
CONLAST  EQU   ISTCONFT+105
CONRES2  EQU   ISTCONFT+104
CONCID   EQU   ISTCONFT+102
CONBUFSZ EQU   ISTCONFT+100
CONRSV02 EQU   ISTCONFT+96
CONDCBBA EQU   ISTCONFT+92
CONDCBLA EQU   ISTCONFT+88
CONDCBOA EQU   ISTCONFT+84
CONLDPRM EQU   ISTCONFT+80
CONRDBUF EQU   ISTCONFT+76
CONSTCIB EQU   ISTCONFT+72
CONENDLA EQU   ISTCONFT+68
CONVARLA EQU   ISTCONFT+64
CONMODLA EQU   ISTCONFT+60
CONHLTLA EQU   ISTCONFT+56
CONNCSLA EQU   ISTCONFT+52
CONDISLA EQU   ISTCONFT+48
CONCIBAD EQU   ISTCONFT+44
CONFBPNM EQU   ISTCONFT+32
CONDMNM  EQU   ISTCONFT+24
CONAPSNM EQU   ISTCONFT+16
CONAPINM EQU   ISTCONFT+8
CONCONFG EQU   ISTCONFT
LDPTCEP  EQU   ISTLDPRM+24
LDPRSV02 EQU   ISTLDPRM+22
LDPRSV01 EQU   LDPFB2
LDPACTIF EQU   LDPFB2
LDPATACH EQU   LDPFB2
LDPFLAST EQU   LDPFB2
LDPRSV03 EQU   LDPFG
LDPPB    EQU   LDPFG
LDPFX    EQU   LDPFG
LDPDCBA  EQU   ISTLDPRM+16
LDPPDS   EQU   ISTLDPRM+8
LDPMBR   EQU   ISTLDPRM
@NM00117 EQU   ACEFLAGS
ACETAKER EQU   ACEFLAGS
ACEPREMR EQU   ACEFLAGS
ACETAKEN EQU   ACEFLAGS
ACEPREMD EQU   ACEFLAGS
ACERPHA  EQU   ISTACE+16
ACEOBJQ  EQU   ISTACE+12
ICERSC2B EQU   ISTICE+36
ICEUECBX EQU   ISTICE+32
@NM00116 EQU   ISTICE+29
@NM00115 EQU   ICEFLAGS
ICESTAPR EQU   ICEFLAGS
ICERSC2F EQU   ICEFLAGS
ICELGON  EQU   ICEFLAGS
ICEICX   EQU   ICEFLAGS
ICESPEC  EQU   ICEFLAGS
ICERPHA  EQU   ISTICE+24
ICEDATA  EQU   ISTICE+20
ICESIDE  EQU   ISTICE+16
ICEOBJQ  EQU   ISTICE+12
ICESUBJ  EQU   ISTICE
CLSTRSV1 EQU   CLSTRFLG
@NM00114 EQU   RNXDLNST
RNXRSV01 EQU   ISTRNX+259
FMCFLRSV EQU   FMCFLGB
FMCFLGA8 EQU   FMCFLGB
FMCCLRPH EQU   FMCVS1+45
FMCRSV0X EQU   FMCCVFLG
FMCVYRPH EQU   FMCCVFLG
FMCZV004 EQU   FMCVS1+40
FMCLOCK2 EQU   FMCVS1+36
@NM00113 EQU   FMCZFLG2
FMCZF027 EQU   FMCZFLG2
FMCZF026 EQU   FMCZFLG2
FMCSEQ1B EQU   FMCSEQ1
FMCSEQ1T EQU   FMCSEQ1
FMCZX006 EQU   FMCVS1+33
FMCZX005 EQU   FMCVS1+32
FMCZX004 EQU   FMCVS1+31
FMCZX003 EQU   FMCVS1+30
FMCZX002 EQU   FMCVS1+29
FMCZX001 EQU   FMCVS1+28
FMCZV001 EQU   FMCVS1+24
FMCAWATQ EQU   FMCLCPAQ+1
@NM00112 EQU   FMCLCPAQ
FMCLCPB2 EQU   FMCLCPBQ+1
FMCLCPB1 EQU   FMCLCPBQ
FMCASCDQ EQU   FMCSHEAQ+1
@NM00111 EQU   FMCSHEAQ
FMCSHEDQ EQU   FMCVS1+8
FMCZFCSQ EQU   FMCVS1+6
FMCZH001 EQU   FMCVS1+4
FMCZF025 EQU   FMCZFLAG+3
FMCZF024 EQU   FMCZFLAG+3
FMCZF023 EQU   FMCZFLAG+3
FMCZF022 EQU   FMCZFLAG+3
FMCZF021 EQU   FMCZFLAG+3
FMCZF020 EQU   FMCZFLAG+3
FMCZF019 EQU   FMCZFLAG+3
FMCZF018 EQU   FMCZFLAG+3
FMCZF017 EQU   FMCZFLAG+2
FMCZF016 EQU   FMCZFLAG+2
FMCZF015 EQU   FMCZFLAG+2
FMCZF014 EQU   FMCZFLAG+2
FMCZF013 EQU   FMCZFLAG+2
FMCZF012 EQU   FMCZFLAG+2
FMCZF011 EQU   FMCZFLAG+2
FMCZF010 EQU   FMCZFLAG+2
FMCZF00F EQU   FMCZFLAG+1
FMCZF00E EQU   FMCZFLAG+1
FMCZF00D EQU   FMCZFLAG+1
FMCZF00C EQU   FMCZFLAG+1
FMCZF00B EQU   FMCZFLAG+1
FMCRSV10 EQU   FMCZFLAG+1
FMCZF009 EQU   FMCZFLAG+1
FMCZFD06 EQU   FMCZF006+1
FMCZFC06 EQU   FMCZF006
FMCZFB06 EQU   FMCZF006
FMCZFA06 EQU   FMCZF006
FMCZF005 EQU   FMCZFLAG
FMCZF004 EQU   FMCZFLAG
FMCZF003 EQU   FMCZFLAG
FMCZF002 EQU   FMCZFLAG
FMCZF001 EQU   FMCZFLAG
FMCFRESA EQU   ISTFMCB+228
FMCSCSQN EQU   FMCSNCTL+2
FMCSCCTL EQU   FMCSNCTL+1
FMCSTCTL EQU   FMCSCFLG
FMCSCCLO EQU   FMCSCFLG
FMCAPRO  EQU   FMCSCFLG
FMCLURO  EQU   FMCSCFLG
FMCOBSAC EQU   FMCSCFLG
FMCIBSAC EQU   FMCSCFLG
FMCFBRE  EQU   ISTFMCB+220
FMCFBXM  EQU   FMCZV002
FMCASEGQ EQU   ISTFMCB+212
FMCRDTPT EQU   ISTFMCB+208
FMCLOCK  EQU   ISTFMCB+204
FMCSEGD  EQU   FMCSSEGQ
FMCRSPLM EQU   ISTFMCB+198
FMCPSTRS EQU   ISTFMCB+196
@NM00110 EQU   FMCRRESP
FMCTSLHA EQU   FMCRRESP
FMCFRRN  EQU   FMCRRESP
FMCFME   EQU   FMCRRESP
FMCFEX   EQU   FMCRRESP
FMCFPE   EQU   FMCRRESP
FMCCTLB  EQU   ISTFMCB+194
FMCBSQNO EQU   FMCCLSEQ+2
FMCTSQNO EQU   FMCCLSEQ
FMCOBPRG EQU   FMCMODEB
FMCIBPRG EQU   FMCMODEB
FMCRESOT EQU   FMCMODEB
FMCRSTSR EQU   FMCMODEB
FMCLUQ   EQU   FMCMODEB
FMCAPQ   EQU   FMCMODEB
FMCCLEAR EQU   FMCMODEB
FMCHOLD  EQU   FMCMODEB
FMCIPSEQ EQU   ISTFMCB+188
FMCLUSTR EQU   ISTFMCB+187
FMCRSV87 EQU   FMCSTAT2
FMCSEQI  EQU   FMCSTAT2
FMCCPIP  EQU   FMCSTAT2
FMCALIPR EQU   FMCSTAT2
FMCIAIO  EQU   FMCSTAT2
FMCZF00A EQU   FMCSTAT2
FMCVPIP  EQU   FMCSTAT2
FMCBHSET EQU   ISTFMCB+185
FMCPRMRC EQU   FMCCLEXT+20
FMCRSV89 EQU   FMCPSTAT
FMCPCLSD EQU   FMCPSTAT
FMCDDOCD EQU   FMCPSTAT
FMCIDVFD EQU   FMCPSTAT
FMCELKST EQU   FMCPSTAT
FMCRSV88 EQU   FMCPSCMD
FMCRDBLK EQU   FMCPSCMD
FMCDSEOC EQU   FMCPSCMD
FMCPURGE EQU   FMCPSCMD
FMCRESTI EQU   FMCPSCMD
FMCCNTCT EQU   FMCPSCMD
FMCINVT  EQU   FMCPSCMD
FMCFLGB7 EQU   FMCFLGCL
FMCFLGB6 EQU   FMCFLGCL
FMCFLGB5 EQU   FMCFLGCL
FMCFLGB4 EQU   FMCFLGCL
FMCFLGB3 EQU   FMCFLGCL
FMCFLGB2 EQU   FMCFLGCL
FMCFLGB1 EQU   FMCFLGCL
FMCFLGB0 EQU   FMCFLGCL
FMCFLGA7 EQU   FMCFLGA
FMCFLGA6 EQU   FMCFLGA
FMCFLGA5 EQU   FMCFLGA
FMCFLGA4 EQU   FMCFLGA
FMCFLGA3 EQU   FMCFLGA
FMCFLGA2 EQU   FMCFLGA
FMCFLGA1 EQU   FMCFLGA
FMCFLGA0 EQU   FMCFLGA
FMCDCLOK EQU   FMCCLEXT+12
FMCRAFM  EQU   FMCCLEXT+8
FMCFBPTR EQU   FMCFBA+1
FMCFBRSV EQU   FMCFBA
FMCRPLPT EQU   FMCRPLA+1
FMCRPLRS EQU   FMCRPLA
FMCPRCLS EQU   FMCCVAL
FMCIBCE  EQU   FMCCVAL
FMCONLY  EQU   FMCOBCE
FMCLAST  EQU   FMCOBCE
FMCMIDLE EQU   FMCOBCE
FMCFIRST EQU   FMCOBCE
FMCCPCNT EQU   FMCPACPC
FMCMPCNT EQU   FMCPACEM
FMCNPCNT EQU   FMCPACEN
FMCCONF  EQU   FMCSSTAT
FMCPURCH EQU   FMCSSTAT
FMCNSALU EQU   FMCSSTAT
FMCSDTR  EQU   FMCSSTAT
FMCSNBI  EQU   FMCSSTAT
FMCRVD01 EQU   ISTFMCB+158
FMCISSN  EQU   ISTFMCB+156
FMCOASN  EQU   FMCNXOSC
FMCOSSN  EQU   FMCNXCFM
FMCSIP   EQU   FMCSIPA
FMCEXLST EQU   ISTFMCB+144
FMCPAB5  EQU   ISTFMCB+128
FMCPAB4  EQU   ISTFMCB+112
FMCPAB3  EQU   ISTFMCB+96
FMCPAB2  EQU   ISTFMCB+80
FMCPAB1  EQU   ISTFMCB+64
FMCFASYA EQU   ISTFMCB+60
FMCMODE  EQU   ISTFMCB+52
FMCPROCD EQU   ISTFMCB+48
FMCVWT   EQU   ISTFMCB+44
FMCRPLH  EQU   ISTFMCB+40
FMCBUFNB EQU   FMCCMPS1+2
FMCBUFLM EQU   FMCCMPS1
FMCDEBA  EQU   ISTFMCB+32
@NM00109 EQU   FMCCMDFL
FMCSNA   EQU   FMCCMDFL
FMCVSNA  EQU   FMCCMDFL
FMCCMDR  EQU   FMCCMDFL
@NM00108 EQU   ISTFMCB+30
@NM00107 EQU   FMCSTAT1
FMCLTCLS EQU   FMCSTAT1
FMCHPURG EQU   FMCSTAT1
FMCVSP2  EQU   FMCSTAT1
FMCVSP1  EQU   FMCSTAT
FMCLTEAS EQU   FMCSTAT
FMCZF007 EQU   FMCSTAT
FMCDEDSC EQU   FMCSTAT
FMCDEVOF EQU   FMCSTAT
FMCDAPT  EQU   FMCSTAT
FMCPRMTE EQU   FMCSTAT
FMCPRMTR EQU   FMCSTAT
FMCUSFLD EQU   ISTFMCB+24
FMCDNCBA EQU   ISTFMCB+16
FMCDVTA  EQU   ISTFMCB+12
FMCTSKID EQU   ISTFMCB+8
FMCNXTCB EQU   ISTFMCB+4
FMCSAF   EQU   ISTFMCB+2
FMCLNGTH EQU   ISTFMCB+1
FMCTYPE  EQU   ISTFMCB
LUNZC001 EQU   LUNZOS+8
LUNLOCK  EQU   LUNZOS
LUNCB    EQU   ISTLUNCB
LDNZS00F EQU   LDNZH003+1
LDNZS00E EQU   LDNZH003+1
LDNZS00D EQU   LDNZH003+1
LDNZS00C EQU   LDNZH003+1
LDNZS00B EQU   LDNZH003+1
LDNZS007 EQU   LDNZH003
LDNZS006 EQU   LDNZH003
LDNZS005 EQU   LDNZH003
LDNZS004 EQU   LDNZH003
LDNZS003 EQU   LDNZH003
LDNZS002 EQU   LDNZH003
LDNZS001 EQU   LDNZH003
LDNZS000 EQU   LDNZH003
LDNZX006 EQU   ISTLDNCB+576
LDNZC001 EQU   ISTLDNCB+569
LDNZX005 EQU   ISTLDNCB+568
LDNZV006 EQU   ISTLDNCB+564
LDNSRB   EQU   ISTLDNCB+520
LDNIOSB  EQU   ISTLDNCB+412
@NM00106 EQU   LDNZSAV3+28
LDNRSV06 EQU   LDNZSAV4+16
LDNZSAV6 EQU   LDNZSAV4+12
LDNZSAV5 EQU   LDNZSAV4
LDNZSAVE EQU   LDNZSAV3
LDNZSAV2 EQU   ISTLDNCB+368
LDNZSAV1 EQU   ISTLDNCB+352
LDNZ3RR  EQU   ISTLDNCB+348
LDNZ2RR  EQU   ISTLDNCB+344
LDNZ1RR  EQU   ISTLDNCB+340
LDNRSV0B EQU   ISTLDNCB+336
LDNRSV0A EQU   ISTLDNCB+332
LDNRSV09 EQU   ISTLDNCB+328
LDNRSV08 EQU   ISTLDNCB+324
LDNRSV07 EQU   ISTLDNCB+320
LDNDEAD  EQU   LDNDCDEB+12
LDNUCBAD EQU   LDNDCDEB+8
LDNAPPAD EQU   LDNDCDEB+5
LDNEXSCL EQU   LDNDCDEB+4
LDNDCBAD EQU   LDNDCDEB+1
LDNDEBID EQU   LDNDCDEB
LDNZRIND EQU   ISTLDNCB+300
LDNRPH   EQU   ISTLDNCB+192
LDNZTCP  EQU   ISTLDNCB+188
LDNZCHNC EQU   ISTLDNCB+187
LDNZLPC7 EQU   LDNZLPC
LDNZLPC6 EQU   LDNZLPC
LDNZLPC5 EQU   LDNZLPC
LDNZLPC4 EQU   LDNZLPC
LDNZLPC3 EQU   LDNZLPC
LDNZLPC2 EQU   LDNZLPC
LDNZLPC1 EQU   LDNZLPC
LDNZLPC0 EQU   LDNZLPC
LDNRSV05 EQU   LDNZERPF
LDNZCTOV EQU   LDNZEPIN
LDNZF001 EQU   LDNZEPIN
LDNZFRDW EQU   LDNZCPAN
LDNZFRD  EQU   LDNZCPAN
LDNZNARD EQU   LDNZCPAN
LDNRSV04 EQU   LDNZIOLK
LDNZATBF EQU   LDNZIOLK
LDNZERLK EQU   LDNZIOLK
LDNZDSIC EQU   LDNZIOLK
LDNZPAB1 EQU   ISTLDNCB+168
LDNZV005 EQU   ISTLDNCB+160
LDNZS1VR EQU   ISTLDNCB+136
LDNZS1RR EQU   ISTLDNCB+132
LDNZS1FC EQU   ISTLDNCB+128
LDNZS1BC EQU   ISTLDNCB+124
LDNZLOCK EQU   ISTLDNCB+120
LDNZFBUF EQU   ISTLDNCB+116
LDNZLAST EQU   ISTLDNCB+112
LDNRSV02 EQU   LDNFLAG2
LDNZFF04 EQU   LDNFLAG2
LDNZFF69 EQU   LDNFLAGS+2
LDNTPBIO EQU   LDNFLAGS+2
LDNZFF03 EQU   LDNFLAGS+2
LDNZFF02 EQU   LDNFLAGS+2
LDNZFF01 EQU   LDNFLAGS+2
LDNZFF00 EQU   LDNFLAGS+2
LDNCLOSD EQU   LDNFLAGS+2
LDNZENTR EQU   LDNFLAGS+2
LDNZICCW EQU   LDNFLAGS+1
LDNZREC  EQU   LDNFLAGS+1
LDNZCTXT EQU   LDNFLAGS+1
LDNZATLK EQU   LDNFLAGS+1
LDNZCHNE EQU   LDNFLAGS+1
LDNZATTP EQU   LDNFLAGS+1
LDNZIOBY EQU   LDNFLAGS+1
LDNZF00A EQU   LDNFLAGS+1
LDNZF009 EQU   LDNFLAGS
LDNZF008 EQU   LDNFLAGS
LDNZF007 EQU   LDNFLAGS
LDNZF006 EQU   LDNFLAGS
LDNZF005 EQU   LDNFLAGS
LDNZF004 EQU   LDNFLAGS
LDNZF003 EQU   LDNFLAGS
LDNZF002 EQU   LDNFLAGS
LDNZHDCC EQU   ISTLDNCB+106
LDNZARM  EQU   ISTLDNCB+104
LDNZRM   EQU   ISTLDNCB+102
LDNZRB   EQU   ISTLDNCB+100
LDNCPQ   EQU   ISTLDNCB+96
LDNSIOQ  EQU   ISTLDNCB+92
LDNZX002 EQU   ISTLDNCB+91
LDNZV001 EQU   ISTLDNCB+84
LDNZACSW EQU   ISTLDNCB+76
LDNZC002 EQU   ISTLDNCB+68
LDNCSWSV EQU   ISTLDNCB+60
LDNCHFLD EQU   ISTLDNCB+56
LDNRESRV EQU   ISTLDNCB+55
@NM00105 EQU   LDNCFLAG
LDNRMF   EQU   LDNCFLAG
LDNIBI   EQU   LDNCFLAG
LDNTSAF  EQU   ISTLDNCB+52
LDNCUUA  EQU   ISTLDNCB+48
LDNCB    EQU   ISTLDNCB
ICNZCON6 EQU   ICNZCONS+10
ICNZCON5 EQU   ICNZCONS+8
ICNZCON4 EQU   ICNZCONS+6
ICNZCON3 EQU   ICNZCONS+4
ICNZCON2 EQU   ICNZCONS+2
ICNZCON1 EQU   ICNZCONS
ICNZATSA EQU   ISTICNCB+676
ICNZX012 EQU   ISTICNCB+675
ICNZX011 EQU   ISTICNCB+674
ICNZX010 EQU   ISTICNCB+672
ICNSRB   EQU   ISTICNCB+628
ICNIOSB  EQU   ISTICNCB+520
ICNZC001 EQU   ISTICNCB+512
ICNZX013 EQU   ISTICNCB+511
ICNZS010 EQU   ICNZH002+1
ICNZS00F EQU   ICNZH002+1
ICNZS00E EQU   ICNZH002+1
ICNZS00D EQU   ICNZH002+1
ICNZS00C EQU   ICNZH002+1
ICNZS00B EQU   ICNZH002+1
ICNZS01A EQU   ICNZS00A
ICNZS019 EQU   ICNZS009
ICNZS018 EQU   ICNZS008
ICNZS017 EQU   ICNZS007
ICNZS016 EQU   ICNZS006
ICNZS005 EQU   ICNZH002
ICNZS014 EQU   ICNZS004
ICNZS013 EQU   ICNZS003
ICNZS012 EQU   ICNZS002
ICNZS001 EQU   ICNZH002
ICNZF028 EQU   ICNZFLAG
ICNZF027 EQU   ICNZFLAG
ICNZF026 EQU   ICNZFLAG
ICNZF025 EQU   ICNZFLAG
ICNZF024 EQU   ICNZFLAG
ICNZF023 EQU   ICNZFLAG
ICNZF022 EQU   ICNZFLAG
ICNZF021 EQU   ICNZFLAG
ICNWORD5 EQU   ISTICNCB+504
ICNMSIZE EQU   ISTICNCB+500
ICNLCVTA EQU   ISTICNCB+496
ICNDEBAD EQU   ICNDIDEB+1
ICNDCBIF EQU   ICNDIDEB
ICNUCBAD EQU   ICNDCDEB+8
ICNAPPAD EQU   ICNDCDEB+5
ICNEXSCL EQU   ICNDCDEB+4
ICNDCBAD EQU   ICNDCDEB+1
ICNDEBID EQU   ICNDCDEB
@NM00104 EQU   ISTICNCB+477
ICNERCNT EQU   ISTICNCB+476
ICNZX002 EQU   ISTICNCB+475
ICNZSW3R EQU   ISTICNCB+468
ICNZSW2R EQU   ISTICNCB+464
ICNZSW1R EQU   ISTICNCB+460
ICNZS4VR EQU   ISTICNCB+436
ICNZS4RR EQU   ISTICNCB+432
ICNZS4FC EQU   ISTICNCB+428
ICNZS4BC EQU   ISTICNCB+424
ICNZS3VR EQU   ISTICNCB+400
ICNZS3RR EQU   ISTICNCB+396
ICNZS3FC EQU   ISTICNCB+392
ICNZS3BC EQU   ISTICNCB+388
ICNZS1RC EQU   ICNZS1VR+36
ICNDIEW3 EQU   ICNDIEWA+8
ICNDIEW2 EQU   ICNDIEWA+4
ICNDIEW1 EQU   ICNDIEWA
ICNZS1RR EQU   ISTICNCB+344
ICNZS1FC EQU   ISTICNCB+340
ICNZS1BC EQU   ISTICNCB+336
ICNRSTIC EQU   ICNZD004
ICNRDCOD EQU   ICNRSCCW
ICNZD006 EQU   ISTICNCB+312
ICNZD005 EQU   ISTICNCB+304
ICNWSTIC EQU   ICNZD002
ICNWRCOD EQU   ICNWSCCW
ICNZV008 EQU   ISTICNCB+284
ICNZV007 EQU   ISTICNCB+280
ICNZV006 EQU   ISTICNCB+276
ICNZV005 EQU   ISTICNCB+272
ICNZV004 EQU   ISTICNCB+268
ICNLSTIT EQU   ISTICNCB+264
ICNLSTIF EQU   ISTICNCB+260
ICNZV002 EQU   ISTICNCB+256
ICNZV001 EQU   ISTICNCB+252
ICNZV00A EQU   ISTICNCB+249
ICNBUFF  EQU   ISTICNCB+248
ICNCPQ   EQU   ISTICNCB+244
ICNNICNA EQU   ISTICNCB+240
@NM00103 EQU   ICNFLAG2+2
ICNZF019 EQU   ICNFLAG2+2
ICNZF018 EQU   ICNFLAG2+2
ICNZF017 EQU   ICNFLAG2+2
ICNZF016 EQU   ICNFLAG2+2
ICNZF015 EQU   ICNFLAG2+2
ICNMSG   EQU   ICNFLAG2+1
ICNCLOSE EQU   ICNFLAG2+1
ICNZF014 EQU   ICNFLAG2+1
ICNZF013 EQU   ICNFLAG2+1
ICNZF012 EQU   ICNFLAG2+1
ICNZF011 EQU   ICNFLAG2+1
ICNZF00D EQU   ICNFLAG2+1
ICNZF00B EQU   ICNFLAG2+1
ICNZF00A EQU   ICNFLAG2
ICNZF008 EQU   ICNFLAG2
ICNZF007 EQU   ICNFLAG2
ICNZF005 EQU   ICNFLAG2
ICNZF004 EQU   ICNFLAG2
ICNZF003 EQU   ICNFLAG2
ICNZF002 EQU   ICNFLAG2
ICNZF001 EQU   ICNFLAG2
ICNLOCK  EQU   ISTICNCB+232
ICNLICNA EQU   ISTICNCB+228
ICNRPH   EQU   ISTICNCB+120
ICNZV003 EQU   ISTICNCB+116
ICNLAST  EQU   ISTICNCB+112
ICNLSTBT EQU   ISTICNCB+108
ICNSIOQ  EQU   ISTICNCB+104
ICNFLAG1 EQU   ISTICNCB+103
ICNZSW08 EQU   ICNZSWS
ICNZSW07 EQU   ICNZSWS
ICNZSW06 EQU   ICNZSWS
ICNZSW05 EQU   ICNZSWS
ICNZSW04 EQU   ICNZSWS
ICNZSW03 EQU   ICNZSWS
ICNZSW02 EQU   ICNZSWS
ICNZSW01 EQU   ICNZSWS
ICNZFF69 EQU   ICNFFLAG
@NM00102 EQU   ICNFFLAG
ICNZFF05 EQU   ICNFFLAG
ICNZFF04 EQU   ICNFFLAG
ICNZFF03 EQU   ICNFFLAG
ICNZFF02 EQU   ICNFFLAG
ICNZFF01 EQU   ICNFFLAG
ICNZFF00 EQU   ICNFFLAG
@NM00101 EQU   ICNFLAG
ICNZCRIT EQU   ICNFLAG
ICNSTART EQU   ICNFLAG
ICNSLOW  EQU   ICNFLAG
ICNZF010 EQU   ICNFLAG
ICNZF00F EQU   ICNFLAG
ICNZF00E EQU   ICNFLAG
ICNCONF  EQU   ICNZF006
ICNCKPAB EQU   ICNCKFLD+1
ICNRSV07 EQU   ICNCKFLD
ICNCKBIT EQU   ICNCKFLD
ICNZPAB4 EQU   ISTICNCB+80
ICNZPAB1 EQU   ISTICNCB+64
ICNRSV01 EQU   ISTICNCB+60
@NM00100 EQU   ISTICNCB+56
@NM00099 EQU   ISTICNCB+54
@NM00098 EQU   @NM00097
ICNRRY   EQU   @NM00097
ICNLCLUS EQU   @NM00097
ICNROLN  EQU   @NM00097
ICNRNRY  EQU   @NM00097
ICNLNKMD EQU   ISTICNCB+52
ICNCUUA  EQU   ISTICNCB+48
ICNCB    EQU   ISTICNCB
NCBRSV01 EQU   ISTNCB+46
NCBSWDAF EQU   ISTNCB+44
NCBDEVCH EQU   ISTNCB+36
NCBFMCBP EQU   ISTNCB+32
NCBLTRC  EQU   ISTNCB+30
NCBRVPT1 EQU   ISTNCB+28
NCBNMLLN EQU   NCBFLAGS+3
@NM00096 EQU   NCBFLAG1
NCBFORCE EQU   NCBFLAG1
NCBTTF   EQU   NCBFLAG1
NCBRSYNC EQU   NCBFLAG1
NCBRSTRT EQU   NCBFLAG1
NCBCONF  EQU   NCBFLAG1
NCBSNAI  EQU   NCBFLAG1
NCBFLTIO EQU   NCBFTRIO
NCBCSTAT EQU   NCBFLAGS
NCBNCSL  EQU   ISTNCB+22
NCBNCBA  EQU   ISTNCB+20
NCBNSNA  EQU   ISTNCB+12
NCBTSKID EQU   ISTNCB+8
NCBDAF   EQU   ISTNCB+2
NCBLNGTH EQU   ISTNCB+1
NCBTYPE  EQU   ISTNCB
PABRPHA  EQU   PABRPHFG+1
PABNODQ  EQU   PABFLAGS
PABINHBT EQU   PABFLAGS
PABERLOK EQU   PABERRLK
PABSSN   EQU   PABFLAGS
PABDYNAM EQU   PABFLAGS
PABNORPR EQU   PABFLAGS
PABPRIOR EQU   PABFLAGS
PABAPYP  EQU   PABFLAGS
PABDVTA  EQU   ISTPAB+9
PABOFFST EQU   ISTPAB+8
PABCHNGP EQU   PABCHAIN+1
PABRSV02 EQU   PABCHAIN
PABDELAY EQU   PABCHAIN
PABRUNNG EQU   PABCHAIN
PABRESET EQU   PABCHAIN
PABUNCON EQU   PABCHAIN
PABCDP   EQU   PABCHAIN
PABRESCH EQU   PABCHAIN
PABCHNG  EQU   PABCHAIN
PABWEQP  EQU   PABWEQA+1
PABRSV01 EQU   PABWEQA
PABWEQG  EQU   PABWEQA
RPHNEXPO EQU   ISTRPH+104
RPHSAV16 EQU   RPHWORK+60
RPHSAV15 EQU   RPHWORK+56
RPHSAV14 EQU   RPHWORK+52
RPHSAV13 EQU   RPHWORK+48
RPHSAV12 EQU   RPHWORK+44
RPHSAV11 EQU   RPHWORK+40
RPHSAV10 EQU   RPHWORK+36
RPHSAVE9 EQU   RPHWORK+32
RPHSAVE8 EQU   RPHWORK+28
RPHSAVE7 EQU   RPHWORK+24
RPHSAVE6 EQU   RPHWORK+20
RPHSAVE5 EQU   RPHWORK+16
RPHSAVE4 EQU   RPHWORK+12
RPHSAVE3 EQU   RPHWORK+8
RPHSAVE2 EQU   RPHWORK+4
RPHSHALF EQU   RPHSAVE1+2
RPHSBIT8 EQU   RPHSBITS
RPHSBIT7 EQU   RPHSBITS
RPHSBIT6 EQU   RPHSBITS
RPHSBIT5 EQU   RPHSBITS
RPHSBIT4 EQU   RPHSBITS
RPHSBIT3 EQU   RPHSBITS
RPHSBIT2 EQU   RPHSBITS
RPHSBIT1 EQU   RPHSBITS
RPHSBYTE EQU   RPHSAVE1
RPHPABQP EQU   RPHPABQA+1
RPHPABFG EQU   RPHPABQA
RPHSRP34 EQU   RPHSRPRM+2
RPHSRP12 EQU   RPHSRPRM
RPHWEGT  EQU   RPHCSPA
RPHMAJCB EQU   ISTRPH+21
RPHPABOF EQU   ISTRPH+20
RPHRESUM EQU   RPHRESMA+1
RPHRSV01 EQU   RPHWPFLG
RPHPURGE EQU   RPHWPFLG
RPHPT    EQU   RPHWPFLG
RPHWT    EQU   RPHWPFLG
RPHRSKEY EQU   RPHWPFLG
RPHDVTA  EQU   ISTRPH+12
RPHTIK   EQU   RPHTSKID+3
@NM00095 EQU   RPHTSKID
RPHRPHAP EQU   RPHRPHA+1
@NM00094 EQU   RPHRPHA
RPHGATE  EQU   RPHRPHA
@NM00093 EQU   RPHFLGB
RPHRLCRA EQU   RPHFLGB
RPHNRSAV EQU   RPHFLGB
RPHPGCMP EQU   RPHFLGB
RPHFBAPS EQU   RPHFLGB
RPHBSSP  EQU   RPHFLGB
RPHLOCK  EQU   RPHFLGB
RPHFNFLG EQU   RPHFSTLC
RPHMLTCP EQU   RPHFLAGS
RPHSMCLR EQU   RPHFLAGS
RPHSMTYP EQU   RPHFLAGS
RPHSMQ   EQU   RPHFLAGS
RPHAUTEX EQU   RPHAPTYP
RPHSPGIN EQU   RPHFLAGS
RPHOGIND EQU   RPHFLAGS
RPHLNGTH EQU   RPHCNTL+1
RPHTYPE  EQU   RPHCNTL
PATRSV01 EQU   PATFLAGA
PATUSEFG EQU   PATFLAGA
PATRDCNT EQU   ISTPAT+6
PATGRPID EQU   ISTPAT+5
PATPTHID EQU   ISTPAT+4
RLSRSV02 EQU   ISTRLS+140
RLSRSV01 EQU   ISTRLS+138
RLSCTELU EQU   ISTRLS+136
RLSPRE   EQU   ISTRLS
RDARSVPT EQU   ISTRDA+84
RDAPUBI  EQU   ISTRDA+83
RDADFCUA EQU   ISTRDA+80
RDACTPCC EQU   ISTRDA+79
RDALUBA  EQU   RDAUCBAD+1
RDACHQI  EQU   RDAUCBAD
RDARSV01 EQU   RDAFLAG
RDARBISA EQU   RDAFLAG
RDAPRE   EQU   ISTRDA
RSWRSV01 EQU   ISTRSW+152
RSWRSV02 EQU   ISTRSW+150
RSWCTELU EQU   ISTRSW+148
RSWGRUPZ EQU   ISTRSW+146
RSWDIALZ EQU   ISTRSW+144
RSWPRE   EQU   ISTRSW
RLXRSV03 EQU   ISTRLX+80
RLXRSV02 EQU   ISTRLX+77
RLXRSV01 EQU   RLXFLAGA
RLXINUSE EQU   RLXFLAGA
RLXPRE   EQU   ISTRLX
RPXRSV01 EQU   ISTRPX+80
RPXRSV02 EQU   ISTRPX+77
RPXMAXLU EQU   ISTRPX+76
RPXPRE   EQU   ISTRPX
RLURSV02 EQU   ISTRLU+172
RLULGMOD EQU   ISTRLU+164
RLUMODEP EQU   RLUMODET+8
RLUMODEN EQU   RLUMODET
RLUUSSPT EQU   RLUUSSTB+8
RLUUSSNM EQU   RLUUSSTB
RLURSV01 EQU   ISTRLU+137
RLULOCAD EQU   ISTRLU+136
RLUNCPPM EQU   RLUNCPPC+1
RLUNCPPN EQU   RLUNCPPC
RLUPACEM EQU   RLUPACE+1
RLUPACEN EQU   RLUPACE
RLUINTA  EQU   ISTRLU+128
RLUSSCFM EQU   ISTRLU+127
RLUCRRSV EQU   RLUCRFLG
RLUACTLU EQU   RLUCRFLG
RLURSV00 EQU   RLUFLAG
RLUNDSES EQU   RLUFLAG
RLUGSTAT EQU   RLUFLAG
RLUBATCH EQU   RLUFLAG
RLURBISA EQU   RLUFLAG
RLUTYPE  EQU   ISTRLU+124
RLUCRPR  EQU   ISTRLU
RCCRVPT2 EQU   ISTRCC+144
RCCXTOSW EQU   ISTRCC+140
RCCSWTOX EQU   ISTRCC+136
RCCRSPT2 EQU   ISTRCC+133
RCCADDR  EQU   ISTRCC+132
RCCPASSL EQU   ISTRCC+131
RCCMXOUT EQU   ISTRCC+130
RCCMXDAT EQU   ISTRCC+128
RCCINDEX EQU   ISTRCC+126
RCCDPQ   EQU   ISTRCC+116
RCCTPAB  EQU   ISTRCC+112
RCCRSV02 EQU   ISTRCC+109
RCCCRRSV EQU   RCCCRFLG
RCCCTCFL EQU   RCCCRFLG
RCCACTPU EQU   RCCCRFLG
RCCNCSPL EQU   ISTRCC+104
RCCRPHCN EQU   ISTRCC+100
RCCEPAB  EQU   ISTRCC+96
RCCDPAB  EQU   ISTRCC+92
RCCVPAB  EQU   ISTRCC+88
@NM00092 EQU   ISTRCC+87
RCCSESCT EQU   ISTRCC+86
RCCIDNUM EQU   RCCID48+3
RCCIDBLK EQU   RCCID48+2
RCCIDPA2 EQU   RCCID48+1
RCCIDPUT EQU   RCCID48
RCCIDPA1 EQU   RCCSTAID
RCCCNCNT EQU   ISTRCC+75
RCCRTGOH EQU   RCCFLAGB
RCCBRKCN EQU   RCCFLAGB
RCCRESET EQU   RCCFLAGB
RCCFINAL EQU   RCCFLAGB
RCCBNNSP EQU   RCCFLAGB
RCCIRETR EQU   RCCFLAGB
RCCDIALP EQU   RCCFLAGB
RCCDSTCT EQU   RCCFLAGB
RCCCTPGD EQU   RCCFLAG
RCCPRGDN EQU   RCCFLAG
RCCOUERP EQU   RCCFLAG
RCCOHIMM EQU   RCCFLAG
RCCLDISC EQU   RCCFLAG
RCCERPIP EQU   RCCFLAG
RCCCUDIE EQU   RCCFLAG
RCCRBISA EQU   RCCFLAG
RCCTYPE  EQU   ISTRCC+72
RCCPRE   EQU   ISTRCC
DOTADTRM EQU   ISTDOT
RDSADDOT EQU   ISTRDS+76
RDSCTATR EQU   ISTRDS+74
RDSCTTRM EQU   ISTRDS+72
RDSPRE   EQU   ISTRDS
RINRSV05 EQU   ISTRIN+156
RINRSV04 EQU   ISTRIN+152
RINRSV02 EQU   ISTRIN+145
RTRCNCNT EQU   RINCNCNT
RTRNCSPL EQU   RINNCSPL
RTRRPHCN EQU   RINRPHCN
RTRVPAB  EQU   RINVPAB
RTRREMOT EQU   RINREMOT
RTRRLDAF EQU   RINRLDAF
RTRNODID EQU   RINNODID
RINRSV01 EQU   RINDFD
RTRLDISC EQU   RINLDISC
RTRNODEF EQU   RINNODEF
RTRREMPO EQU   RINREMPO
RINCRPRE EQU   ISTRIN
RTRRSV04 EQU   ISTRTR+210
RTRLCTI  EQU   ISTRTR+209
RTRIDCAS EQU   RTRBSCID+1
RTRIDLEN EQU   RTRBSCID
RTRRSVDD EQU   ISTRTR+181
RTRRDFG  EQU   ISTRTR+180
RTRDIAA  EQU   ISTRTR+176
RTRPOLA  EQU   ISTRTR+172
RTRCADDR EQU   ISTRTR+164
RTRCTADR EQU   ISTRTR+162
RTRCTPOL EQU   ISTRTR+160
RTRCTDIA EQU   ISTRTR+158
RTRRSV03 EQU   ISTRTR+156
RTRRVPT1 EQU   ISTRTR+152
RTRBHSN1 EQU   ISTRTR+144
RTRCRSV2 EQU   RTRCRFLG
RTRDTRLM EQU   RTRLSCMD
RTRCRSV1 EQU   RTRCRFLG
RTRTRMAX EQU   ISTRTR+142
RTRRSV24 EQU   RTRRDFF
RTRRFDEK EQU   RTRRDFF
RTRRFANK EQU   RTRRDFF
RTRRFPFK EQU   RTRRDFF
RTRRFPEN EQU   RTRRDFF
RTRRFXCT EQU   RTRRDFF
RTRRESCT EQU   RTRRDFE
RTRRESUP EQU   RTRRDFE
RTRREATT EQU   RTRRDFE
RTRRECHK EQU   RTRRDFE
RTRREACR EQU   RTRRDFE
RTRRSV0A EQU   RTRRDFE
RTRREBRK EQU   RTRRDFE
RTRRSV11 EQU   RTRRDFD
RTRRSV10 EQU   RTRRDFD
RTRRDBHI EQU   RTRRDFD
RTRRDBHD EQU   RTRRDFD
RTRRDBHN EQU   RTRRDFD
RTRRSV23 EQU   RTRRDFC
RTRRCXMS EQU   RTRRDFC
RTRRCMSG EQU   RTRRDFC
RTRRCBLK EQU   RTRRDFC
RTRRCPT3 EQU   RTRRDFC
RTRRCIT2 EQU   RTRRDFC
RTRRCIT1 EQU   RTRRDFC
RTRRSV32 EQU   RTRRDFB
RTRRBEND EQU   RTRRDFB
RTRRBECT EQU   RTRRDFB
RTRRSV02 EQU   RTRRDFA
RTRRACTR EQU   RTRRDFA
RTRRSV60 EQU   RTRRDFA
RTRRACDT EQU   RTRRDFA
RTRRAPT3 EQU   RTRRAALL
RTRRAPT2 EQU   RTRRAALL
RTRRAPT1 EQU   RTRRAALL
RTRRAATN EQU   RTRRDFA
RTRRSV45 EQU   ISTRTR+132
RTRRSV01 EQU   ISTRTR+130
RTRADRPT EQU   RTRADR+1
RTRRSV22 EQU   RTRFLAG
RTRVTERM EQU   RTRFLAG
RTRRSV51 EQU   RTRFLAG
RTRRBISA EQU   RTRFLAG
RTRRSV21 EQU   RTRFLAG
RTRCRPR  EQU   ISTRTR
RCLRVPT2 EQU   ISTRCL+92
RCLRVPT1 EQU   ISTRCL+88
RCLGPOLA EQU   ISTRCL+84
RCLCTNGP EQU   ISTRCL+82
RCLRSV01 EQU   ISTRCL+80
RCLGPADR EQU   RCLADR+1
RCLRSV33 EQU   RCLFLAG
RCLBATCH EQU   RCLFLAG
RCLRBISA EQU   RCLFLAG
RCLRSV22 EQU   RCLFLAG
RCLPRE   EQU   ISTRCL
RPTRSV03 EQU   ISTRPT+156
RPTRSV02 EQU   ISTRPT+152
RPTNSNSV EQU   ISTRPT+148
RPTPTHCT EQU   ISTRPT+146
RPTPEPCT EQU   ISTRPT+144
RPTDAFSV EQU   ISTRPT+142
RPTRSV01 EQU   ISTRPT+141
RPTISTAT EQU   RPTFLAG1
RPTDYNAM EQU   RPTFLAG1
RPTVYIMM EQU   RPTFLAG1
RPTVIODN EQU   RPTFLAG1
RPTONLIN EQU   RPTFLAG1
RPTHLVPD EQU   RPTFLAG1
RPTVRYPD EQU   RPTFLAG1
RPTASLEP EQU   RPTFLAG1
RPTUTERM EQU   ISTRPT+136
RPTDIVT  EQU   RPTDITT
RPTCTNM  EQU   ISTRPT+120
RPTLNDAF EQU   RPTLNCID+2
RPTLNSAF EQU   RPTLNCID
RPTLN    EQU   ISTRPT
RLNRVPT2 EQU   ISTRLN+112
RLNNCSPL EQU   ISTRLN+108
RLNX2SW  EQU   ISTRLN+104
@NM00091 EQU   ISTRLN+103
RLNCRRSV EQU   RLNCRFLG
RLNSWEP  EQU   RLNCRFLG
RLNSVSKP EQU   RLNLSCMD
RLNSESLM EQU   RLNLSCMD
RLNNPRLM EQU   RLNLSCMD
RLNSWNCP EQU   RLNCRFLG
RLNACTLN EQU   RLNCRFLG
RLNPAUSE EQU   ISTRLN+101
RLNPOLMT EQU   ISTRLN+100
RLNACTSN EQU   ISTRLN+98
RLNRESV1 EQU   ISTRLN+97
RLNACTRM EQU   ISTRLN+96
RLNCTSES EQU   ISTRLN+95
RLNRDSLM EQU   ISTRLN+94
RLNAUTOA EQU   ISTRLN+92
RLNRDFD  EQU   RLNRDF+3
RLNRDFC  EQU   RLNRDF+2
RLNMULTP EQU   RLNRDFB
RLNTTV   EQU   RLNRDFB
RLNRSV0B EQU   RLNRDFB
RLNANSWR EQU   RLNRDFB
RLNRBUSE EQU   RLNRDFB
RLNRAPEP EQU   RLNRDFA
RLNRANCP EQU   RLNRDFA
RLNRAEP  EQU   RLNRDFA
RLNIDV   EQU   RLNRDFA
RLNGANSW EQU   RLNRDFA
RLNRACAN EQU   RLNRACNT
RLNRACAT EQU   RLNRACNT
RLNRSV04 EQU   RLNSTAT2
RLNOHIN  EQU   RLNSTAT2
RLNRSV03 EQU   RLNSTAT1
RLNVD    EQU   RLNSTAT1
RLNINOPP EQU   RLNSTAT1
RLNINOPL EQU   RLNSTAT1
RLNLRST  EQU   RLNSTAT1
RLNTRAP  EQU   RLNSTAT1
RLNACTCT EQU   ISTRLN+84
RLNCUA   EQU   RLNUCBAD
RLNRSV01 EQU   RLNFLAG
RLNRBISA EQU   RLNFLAG
RLNEAM   EQU   RLNFLAG
RLNPRE   EQU   ISTRLN
RGPRVPT2 EQU   ISTRGP+88
RGPRVPT1 EQU   ISTRGP+84
RGPCTECM EQU   ISTRGP+82
RGPCTEIN EQU   ISTRGP+80
RGPCTETR EQU   ISTRGP+78
RGPCTECL EQU   ISTRGP+76
RGPCTELN EQU   ISTRGP+74
RGPRSV03 EQU   ISTRGP+73
RGPRSV02 EQU   RGPFLG
RGPABSC  EQU   RGPFLG
RGPASS   EQU   RGPFLG
RGPPRE   EQU   ISTRGP
RRNRINNM EQU   ISTRRN+248
@NM00090 EQU   ISTRRN+247
RRNRDCUA EQU   ISTRRN+244
RRNLASTE EQU   ISTRRN+240
RRNNCSPL EQU   ISTRRN+236
RRNRPLPT EQU   ISTRRN+232
RRNMSIZE EQU   ISTRRN+228
RRNNCPNM EQU   ISTRRN+221
RRNCTPCC EQU   ISTRRN+220
RRNHBUFS EQU   ISTRRN+218
RRNHLENT EQU   RRNHPRE+1
RRNHLENH EQU   RRNHPRE
RRNNMNCP EQU   ISTRRN+208
RRNDELAY EQU   ISTRRN+206
RRNRSV04 EQU   ISTRRN+200
RRNRSV88 EQU   RRNNMDPD+7
RRNPUBI  EQU   RRNNMDPD+6
RRNDPLUB EQU   RRNNMDPD
RRNEPADR EQU   ISTRRN+190
RRNCPLUB EQU   ISTRRN+184
RRNFLUX  EQU   ISTRRN+180
RRNRSV05 EQU   RRNCMFD
RRNREMPO EQU   RRNCMFD
RRNCDREC EQU   RRNCMFD
RRNCDDSI EQU   RRNCMFD
RRNCDBCK EQU   RRNCMFD
RRNCDDTL EQU   RRNCMFD
RRNCDSTD EQU   RRNCMFD
RRNCDCSP EQU   RRNCMFD
RRNCCCSL EQU   RRNCMFC
RRNCCSIM EQU   RRNCMFC
RRNCCRCM EQU   RRNCMFC
RRNCCRIM EQU   RRNCMFC
RRNCCCRC EQU   RRNCMFC
RRNCCRST EQU   RRNCMFC
RRNCCRDQ EQU   RRNCMFC
RRNCCRCN EQU   RRNCMFC
RRNCBALT EQU   RRNCMFB
RRNCBMOD EQU   RRNCMFB
RRNCBNPL EQU   RRNCMFB
RRNCBRLS EQU   RRNCMFB
RRNCBRDS EQU   RRNCMFB
RRNCBDLR EQU   RRNCMFB
RRNCBDLH EQU   RRNCMFB
RRNCBDLO EQU   RRNCMFB
RRNCADGO EQU   RRNCMFA
RRNCADTD EQU   RRNCMFA
RRNCACDT EQU   RRNCMFA
RRNCAMBH EQU   RRNCMFA
RRNCAATI EQU   RRNCMFA
RRNCAATG EQU   RRNCMFA
RRNCAATD EQU   RRNCMFA
RRNCAALL EQU   RRNCMFA
RRNRSV55 EQU   RRNRDF+3
RRNPTASL EQU   RRNRDFB+1
RRNRSV01 EQU   RRNRDFB+1
RRNVYDON EQU   RRNRDFB+1
RRNRBBUP EQU   RRNRDFB+1
RRNRSV03 EQU   RRNRDFB
RRNRBCT2 EQU   RRNRDFB
RRNRBCT1 EQU   RRNRDFB
RRNRBSEC EQU   RRNRDFB
RRNRBCCT EQU   RRNRDFB
RRNRBCCL EQU   RRNRDFB
RRNRSV02 EQU   RRNRDFB
RRNRBMDL EQU   RRNRDFB
RRNRAPEP EQU   RRNRDFA
RRNRANCP EQU   RRNRDFA
RRNRAOLT EQU   RRNRDFA
RRNRASYN EQU   RRNRDFA
RRNRADMP EQU   RRNRDFA
RRNRAIPL EQU   RRNRDFA
RRNRASHT EQU   RRNRDFA
RRNCTENT EQU   ISTRRN+170
RRNCTECM EQU   ISTRRN+168
RRNCTEIN EQU   ISTRRN+166
RRNCTETR EQU   ISTRRN+164
RRNCTECL EQU   ISTRRN+162
RRNCTEGP EQU   ISTRRN+158
RRNCTBHS EQU   ISTRRN+156
RRNBHSET EQU   ISTRRN+152
RRNRLDIP EQU   ISTRRN+147
RRNRNCUA EQU   ISTRRN+144
RRNGRPA  EQU   ISTRRN+140
RRNLUBA  EQU   RRNUCBAD+1
RRNCHQI  EQU   RRNUCBAD
RRNRSV11 EQU   RRNFLAG
RRNDSTCT EQU   RRNFLAG
RRNERPIP EQU   RRNFLAG
RRNLCDIP EQU   RRNFLAG
RRNLCDIE EQU   RRNFLAG
RRNLCSIP EQU   RRNFLAG
RRNRBISA EQU   RRNFLAG
RRNRSV89 EQU   RRNFLAG
RRNPRE   EQU   ISTRRN
RLCRVPT2 EQU   ISTRLC+80
RLCRVPT1 EQU   ISTRLC+79
RLCUCBAD EQU   RLCADR+1
RLCRSVDE EQU   RLCFLAG
RLCACNT  EQU   RLCFLAG
RLCRSV14 EQU   RLCFLAG
RLCRBISA EQU   RLCFLAG
RLCRSV22 EQU   RLCFLAG
RLCPRE   EQU   ISTRLC
RAPRVPT2 EQU   ISTRAP+116
RAPRVPT1 EQU   ISTRAP+112
RAPBFACT EQU   ISTRAP+111
RAPRSV17 EQU   RAPFLGC
RAPRSV16 EQU   RAPFLGC
RAPRSV15 EQU   RAPFLGC
RAPRSV14 EQU   RAPFLGC
RAPRSV13 EQU   RAPFLGC
RAPRSV12 EQU   RAPFLGC
RAPRSV11 EQU   RAPFLGC
RAPRSV10 EQU   RAPFLGC
RAPANVPC EQU   RAPFLGB
RAPASPO  EQU   RAPFLGB
RAPAPPO  EQU   RAPFLGB
RAPAACQ  EQU   RAPFLGB
RAPAPRMT EQU   RAPFLGB
RAPAPASS EQU   RAPFLGB
RAPABLCK EQU   RAPFLGB
RAPALLF  EQU   RAPFLGB
RAPRSV06 EQU   RAPFLG
RAPRSV05 EQU   RAPFLG
RAPRSV04 EQU   RAPFLG
RAPRSV03 EQU   RAPFLG
RAPATLGN EQU   RAPFLG
RAPASLGI EQU   RAPFLG
RAPAQUI  EQU   RAPFLG
RAPABLGN EQU   RAPFLG
RAPACEQD EQU   ISTRAP+106
RAPTRPRE EQU   ISTRAP+104
RAPICEAQ EQU   ISTRAP+96
RAPICEAC EQU   ISTRAP+92
RAPAPPWD EQU   ISTRAP+80
RAPACDEB EQU   ISTRAP+76
RAPACBA  EQU   ISTRAP+72
RAPPRE   EQU   ISTRAP
RDTVSRPL EQU   ISTRDT+132
RDTCRSPW EQU   ISTRDT+124
RDTCRSDS EQU   ISTRDT+116
@NM00089 EQU   ISTRDT+113
RRNSTCNT EQU   RDTSTCNT
RRNVYRPH EQU   RDTVYRPH
RDTTPAB  EQU   ISTRDT+104
RDTDPAB  EQU   ISTRDT+100
RDTEPAB  EQU   ISTRDT+96
RDTVPAB  EQU   ISTRDT+92
RDTRSV01 EQU   RDTFLAGB
RDTBHSET EQU   RDTFLAGB
RDTCTCFL EQU   RDTFLAGB
RDTCTPGD EQU   RDTFLAGB
RDTPRGDN EQU   RDTFLAGB
RDTOUERP EQU   RDTFLAGB
RDTLGCT  EQU   ISTRDT+90
RDTNODID EQU   ISTRDT+89
RDTMAXID EQU   ISTRDT+88
RDTCTSNT EQU   ISTRDT+86
RDTFLAGS EQU   ISTRDT+84
RDTBACK  EQU   ISTRDT+80
RDTFORW  EQU   ISTRDT+76
RDTLEN   EQU   RDTPLEN+1
RDTPRILS EQU   RDTPRIOR
RDTPRISW EQU   RDTPRIOR
RDTPRIRN EQU   RDTPRIOR
RDTPRILC EQU   RDTPRIOR
RDTPRIAP EQU   RDTPRIOR
@NM00088 EQU   RDTPRIOR
RDTPRE   EQU   ISTRDT
RCPRSV05 EQU   ISTRCPRE+120
RCPRSV04 EQU   ISTRCPRE+116
RCPRSV03 EQU   ISTRCPRE+112
RCPINTA  EQU   RCPLGNIN+16
RCPLGNCT EQU   RCPLGNIN+8
RCPLGNAP EQU   RCPLGNIN
@NM00087 EQU   RCPPMODE
RCPRRECD EQU   RCPPMODE
RCPRBASC EQU   RCPPMODE
RCPBFLIM EQU   ISTRCPRE+90
RCPBHSI2 EQU   ISTRCPRE+89
RCPBHSI1 EQU   ISTRCPRE+88
RCPICEAQ EQU   ISTRCPRE+80
RCPLNAPA EQU   ISTRCPRE+76
RCPICELN EQU   ISTRCPRE+72
RCPPRE   EQU   ISTRCPRE
RPRCONID EQU   ISTRPRE+63
RPRCLVPD EQU   RPRFLAGC
RPRINIMM EQU   RPRFLAGD
RPRRSV05 EQU   RPRFLAGD
RPRRSON  EQU   RPRFLAGD
RPRCONCT EQU   RPRFLAGD
RPRLTASN EQU   RPRFLAGD
RPRPTHCT EQU   ISTRPRE+60
RPRSTPCT EQU   ISTRPRE+56
RPRRVPT1 EQU   ISTRPRE+52
RPRNCBA  EQU   ISTRPRE+40
RPRLGONB EQU   ISTRPRE+32
RPRLGONF EQU   ISTRPRE+28
RPRTIOCT EQU   ISTRPRE+26
RPRPEPCT EQU   ISTRPRE+24
RPRRSV03 EQU   RPRCAUSE
RPRRSYNC EQU   RPRCAUSE
RPRCRCPT EQU   RPRCAUSE
RPRNOSRT EQU   RPRCAUSE
RPRINTST EQU   RPRFLAGB
RPRVYIMM EQU   RPRFLAGB
RPRHLVPD EQU   RPRFLAGB
RPRVIODN EQU   RPRFLAGB
RPRAOPN  EQU   RPRFLAGB
RPRENTVT EQU   RPRFLAGB
RPRENTVH EQU   RPRFLAGB
RPRLIVE  EQU   RPRFLAGA
RPRVRYPD EQU   RPRFLAGA
RPRENTIO EQU   RPRFLAGA
RPRENTBF EQU   RPRFLAGA
RPRTIED  EQU   RPRFLAGA
RPRINV   EQU   RPRFLAGA
RPRACT   EQU   RPRFLAGA
RPRRLOCK EQU   ISTRPRE+12
RPRSAF   EQU   RPRCOMID
LOKXCL   EQU   @NM00085
LOKPRY   EQU   @NM00085
@NM00086 EQU   @NM00085
@NM00084 EQU   LOKCHNG
LOKCT    EQU   ISTLOK
OCWEND   EQU   ISTOCW+848
@NM00083 EQU   OCWFLG1
OCWEXIT  EQU   OCWFLG1
OCWSENSE EQU   ISTOCW+843
OCWBNDSZ EQU   ISTOCW+841
OCWBINDD EQU   OCWBIND+37
OCWBINDA EQU   OCWBIND+1
OCWBINDC EQU   OCWBIND
OCWSHPLC EQU   OCWSHPL+8
OCWSHPLB EQU   OCWSHPL+4
OCWSHPLA EQU   OCWSHPL
OCWBNDRU EQU   ISTOCW+780
OCWELCP  EQU   ISTOCW+776
OCWRSV12 EQU   ISTOCW+772
OCWRSV11 EQU   ISTOCW+768
OCWODOA  EQU   ISTOCW+764
OCWSCHIO EQU   OCWIOCNT
OCWPROCD EQU   ISTOCW+756
OCWCCRPH EQU   ISTOCW+752
OCWPABCT EQU   ISTOCW+748
OCWDAF   EQU   OCWCID+2
OCWSAF   EQU   OCWCID
OCWNMLLN EQU   ISTOCW+742
OCWRSV0A EQU   ISTOCW+741
OCWRSV82 EQU   OCWLOCKS
OCWMLOCK EQU   OCWLOCKS
OCWALOCK EQU   OCWLOCKS
OCWDLOCK EQU   OCWLOCKS
OCWCLOCK EQU   OCWLOCKS
OCWELOCK EQU   OCWLOCKS
OCWRLOCK EQU   OCWLOCKS
OCWVLOCK EQU   OCWLOCKS
OCWACE   EQU   ISTOCW+736
OCWIOMIN EQU   ISTOCW+735
OCWIOMAJ EQU   ISTOCW+734
OCWBHSID EQU   ISTOCW+733
OCWRSV03 EQU   ISTOCW+732
OCWSWTE7 EQU   OCWSWTE
OCWSWTE6 EQU   OCWSWTE
OCWSWTE5 EQU   OCWSWTE
OCWSWTE4 EQU   OCWSWTE
OCWSWTE3 EQU   OCWSWTE
OCWSWTE2 EQU   OCWSWTE
OCWLCPBC EQU   OCWSWTE
OCWSKEL  EQU   OCWSWTE
OCWSWTR7 EQU   OCWSWTRD
OCWSWTR6 EQU   OCWSWTRD
OCWSWTR5 EQU   OCWSWTRD
OCWDPDVT EQU   OCWSWTRD
OCWEPTLP EQU   OCWSWTRD
OCWCPARE EQU   OCWSWTRD
OCWCLEN  EQU   OCWSWTRD
OCWSRDVT EQU   OCWSWTRD
OCWCLCD2 EQU   ISTOCW+728
OCWCLCD1 EQU   ISTOCW+726
OCWLALEN EQU   ISTOCW+724
OCWSDVTA EQU   ISTOCW+720
OCWOENIB EQU   ISTOCW+716
OCWSORTP EQU   ISTOCW+712
OCWMDVT  EQU   ISTOCW+708
OCWSDVT  EQU   ISTOCW+704
OCWPREV  EQU   ISTOCW+700
OCWLCPBA EQU   ISTOCW+696
OCWR14SV EQU   ISTOCW+624
OCWSAVE4 EQU   ISTOCW+480
OCWSAVE3 EQU   ISTOCW+408
OCWSAVE2 EQU   ISTOCW+336
OCWSAVE1 EQU   ISTOCW+264
OCWCSPL  EQU   ISTOCW+224
OCWRSVD  EQU   ISTOCW+212
OCWVPAB  EQU   ISTOCW+208
OCWSWTD7 EQU   OCWSWTD
OCWSWTD6 EQU   OCWSWTD
OCWSWTD5 EQU   OCWSWTD
OCWSWTD4 EQU   OCWSWTD
OCWPGDON EQU   OCWSWTD
OCWSTCTL EQU   OCWSWTD
OCWNPOST EQU   OCWSWTD
OCWCLDEB EQU   OCWSWTD
OCWVARY  EQU   OCWSWTC
OCWPRMTR EQU   OCWSWTC
OCWPBH   EQU   OCWSWTC
OCWRBH   EQU   OCWSWTC
OCWCKACE EQU   OCWSWTC
OCWODCLS EQU   OCWSWTC
OCWSWTC1 EQU   OCWSWTC
OCWSPCLS EQU   OCWSWTC
OCWCSCAL EQU   OCWSWTB
OCWPSREQ EQU   OCWSWTB
OCWOLOCK EQU   OCWSWTB
OCWCOREQ EQU   OCWSWTB
OCWDOPHY EQU   OCWSWTB
OCWCLOOP EQU   OCWSWTB
OCWRECL  EQU   OCWSWTB
OCWGOFUN EQU   OCWSWTB
OCWNODLT EQU   OCWSWTA
OCWODCL  EQU   OCWSWTA
OCWGODST EQU   OCWSWTA
OCWSORT  EQU   OCWSWTA
OCWGOCNT EQU   OCWSWTA
OCWNOCON EQU   OCWSWTA
OCWSRT   EQU   OCWSWTA
OCWGTLST EQU   OCWSWTA
OCWSCPAD EQU   ISTOCW+176
OCWDNIB  EQU   ISTOCW+112
OCWBADNO EQU   ISTOCW+110
OCWDSTNO EQU   ISTOCW+108
OCWODCT2 EQU   ISTOCW+106
OCWODCT1 EQU   ISTOCW+104
OCWRSV02 EQU   ISTOCW+100
OCWRSV01 EQU   ISTOCW+96
OCWSVEC  EQU   OCWSVCOD+1
OCWSVRC  EQU   OCWSVCOD
OCWEC    EQU   OCWODRC+1
OCWRC    EQU   OCWODRC
OCWODFST EQU   ISTOCW+88
OCWODNAS EQU   ISTOCW+84
OCWODLST EQU   ISTOCW+80
OCWLPOST EQU   ISTOCW+76
OCWCPOST EQU   ISTOCW+72
OCWFPOST EQU   ISTOCW+68
OCWACDEB EQU   ISTOCW+64
OCWNCB   EQU   ISTOCW+60
OCWFMCB  EQU   ISTOCW+56
OCWEPTAB EQU   ISTOCW+52
OCWARDTE EQU   ISTOCW+48
OCWNIB   EQU   ISTOCW+44
OCWDRHOB EQU   OCWDRDTE
OCWCSL   EQU   ISTOCW+28
OCWPAB   EQU   ISTOCW+20
OCWRPH   EQU   ISTOCW+16
OCWCHAIN EQU   ISTOCW+8
OCWPBCHN EQU   ISTOCW+4
OCWTLEN  EQU   ISTOCW+2
OCWSLEN  EQU   ISTOCW+1
OCWID    EQU   ISTOCW
CSPUNUSD EQU   CSPRSC2B+4
CSPUECBA EQU   CSPRSC2B
CSPTRDTE EQU   ISTCSP+28
CSPRLRPH EQU   ISTCSP+24
CSPNO    EQU   ISTCSP+22
CSPCC    EQU   ISTCSP+20
CSPDATA  EQU   ISTCSP+16
CSPRSCE  EQU   ISTCSP+12
CSPDEST  EQU   ISTCSP+8
CSPSRC   EQU   ISTCSP+4
@NM00082 EQU   CSPOPT2
CSPRSC2F EQU   CSPOPT2
CSPWASQD EQU   CSPOPT2
CSPACQS  EQU   CSPOPT2
CSPACES  EQU   CSPOPT2
CSPNOREL EQU   CSPOPT2
CSPCOREQ EQU   CSPOPT2
CSPSTAP  EQU   CSPOPT2
@NM00081 EQU   CSPOPT1
CSPANY   EQU   CSPOPT1
CSPACT   EQU   CSPOPT1
CSPSESS  EQU   CSPOPT1
CSPPND   EQU   CSPOPT1
CSPLOGI  EQU   CSPOPT1
CSPQ     EQU   CSPOPT1
CSPRSC   EQU   CSPOPT1
CSPIDX   EQU   ISTCSP
NIBRESV  EQU   ISTNIB+60
NIBNDAR  EQU   ISTNIB+56
NIBLMODE EQU   ISTNIB+48
NIBEXLST EQU   ISTNIB+44
NIBLIMIT EQU   ISTNIB+42
@NM00080 EQU   ISTNIB+41
@NM00079 EQU   NIBFLG1
@NM00078 EQU   NIBFLG1
@NM00077 EQU   NIBFLG1
@NM00076 EQU   NIBFLG1
NIBSHLTP EQU   NIBFLG1
NIBSDAPP EQU   NIBFLG1
NIBCON   EQU   NIBFLG1
NIBLAST  EQU   NIBFLG1
NIBPROCD EQU   ISTNIB+36
NIBDEVCH EQU   ISTNIB+28
NIBMODE  EQU   ISTNIB+20
NIBSYM   EQU   ISTNIB+12
NIBUSER  EQU   ISTNIB+8
NIBCID   EQU   ISTNIB+4
NIBLEN   EQU   ISTNIB+3
NIBCONDN EQU   ISTNIB+2
NIBRSV01 EQU   ISTNIB+1
NIBID    EQU   ISTNIB
CSLDATAF EQU   CSLDATA
CSLNIBF  EQU   CSLNIB
CSLRDTEF EQU   CSLRDTE
BINUSE   EQU   ISTBIND+36
BINUSEL  EQU   ISTBIND+35
BINPRIM  EQU   ISTBIND+27
BINPRIML EQU   ISTBIND+26
BINRSV05 EQU   ISTBIND+25
BINLUTYP EQU   BINLUP
BINRSV27 EQU   BINLUP
BINRSV08 EQU   BINTSU+4
BINPRUSE EQU   BINPRUSZ
BINPRUSM EQU   BINPRUSZ
BINSRUSE EQU   BINSRUSZ
BINSRUSM EQU   BINSRUSZ
BINRPACM EQU   BINRPACE
BINRSV07 EQU   BINRPACE
BINRSV06 EQU   BINTSU
BINCONR  EQU   BINCMNP2
BINRCHN  EQU   BINCMNP2
BINMDIBK EQU   BINCMNP2
BINBKFS  EQU   BINCMNP2
BINRCVR  EQU   BINCMNP2
BINFMTRM EQU   BINCMNP2
BINRSV04 EQU   BINCMNP
BINALT   EQU   BINCMNP
BINBKTR  EQU   BINCMNP
BINBRAK  EQU   BINCMNP
BINFMHD  EQU   BINCMNP
BINRSV03 EQU   BINCMNP
BINSSEB  EQU   BINSECP
BINSCMP  EQU   BINSECP
BINRSV02 EQU   BINSECP
BINSCHNR EQU   BINSECP
BINSMCH  EQU   BINSECP
BINSCHN  EQU   BINSECP
BINPSEB  EQU   BINPRIP
BINPCMP  EQU   BINPRIP
BINRSV01 EQU   BINPRIP
BINPCHNR EQU   BINPRIP
BINPMCH  EQU   BINPRIP
BINPCHN  EQU   BINPRIP
BINTS    EQU   ISTBIND+2
BINFM    EQU   ISTBIND+1
BINTYPE  EQU   BINFMTY
BINFMT   EQU   BINFMTY
DEVRSV03 EQU   ISTDEVCH+5
DEVPHYSA EQU   ISTDEVCH+4
DEVCSLPN EQU   DEVCHAR3
DEVCSTCL EQU   DEVCHAR3
DEVCCHEK EQU   DEVCHAR3
DEVCATTN EQU   DEVCHAR3
DEVCRVB  EQU   DEVFCCTL
DEVCSSL  EQU   DEVFCCTL
DEVCBSC  EQU   DEVFCCTL
DEVMCODE EQU   ISTDEVCH+2
DEVCHAR2 EQU   DEVTCODE
DEVRSV01 EQU   DEVCHAR
DEVCCTL  EQU   DEVCHAR
DEVNNSPT EQU   DEVCHAR
DEVSPS   EQU   DEVCHAR
DEVSUBND EQU   DEVCHAR
DEVCONVR EQU   DEVCHAR
DEVOTPUT EQU   DEVCHAR
DEVINPUT EQU   DEVCHAR
PROSRDEF EQU   PROSETM4
PRORSV47 EQU   PROSETM4
PROSCON  EQU   PROSETM4
PRORSV46 EQU   PROSETM3
PROSMONT EQU   PROSETM3
PRORSV45 EQU   PROSETM3
PROSNTO  EQU   PROSETM3
PRORSV44 EQU   PROSETM3
PRORSV43 EQU   PROSETM2
PROSNTFL EQU   PROSETM2
PRORSV42 EQU   PROSETM2
PRORSV41 EQU   PROPROCS
PROMODC  EQU   PROPROC4
PROMODT  EQU   PROPROC4
PROMODM  EQU   PROPROC4
PROMODB  EQU   PROPROC4
PRORSV14 EQU   PROPROC4
PRORSV13 EQU   PROPROC4
PRORSV12 EQU   PROPROC4
PROEIB   EQU   PROPROC4
PROMONT3 EQU   PROPROC3
PROMONT2 EQU   PROPROC3
PROMONIT EQU   PROPROC3
PROSUBLK EQU   PROPROC3
PRONTO   EQU   PROPROC3
PROLGIN  EQU   PROPROC3
PROERPI  EQU   PROPROC3
PRORSV07 EQU   PROPROC3
PROCFTX  EQU   PROPROC2
PROEMLC  EQU   PROPROC2
PRONTFL  EQU   PROPROC2
PRORSV05 EQU   PROPROC2
PRORSV04 EQU   PROPROC2
PROLGOT  EQU   PROPROC2
PROERPO  EQU   PROPROC2
PRORSV03 EQU   PROPROC2
PRORPLC  EQU   PROPROC1
PROCS    EQU   PROPROC1
PROCA    EQU   PROPROC1
PRORESPX EQU   PROPROC1
PRODFASY EQU   PROPROC1
PROXPOPT EQU   PROPROC1
PROTRUNC EQU   PROPROC1
PROASYIP EQU   PROPROC1
IOBERRCT EQU   IOBSTDRD+30
IOBRSV19 EQU   IOBINCAM+1
IOBOLTST EQU   IOBBTAMF
IOBRFTMG EQU   IOBBTAMF
IOBRSV17 EQU   IOBBTAMF
IOBRSV16 EQU   IOBBTAMF
IOBRSV15 EQU   IOBBTAMF
IOBRSV14 EQU   IOBBTAMF
IOBINUSE EQU   IOBBTAMF
IOBPRMER EQU   IOBBTAMF
IOBRSTRB EQU   IOBRESTR+1
IOBREPOS EQU   IOBRESTR
IOBDCBPB EQU   IOBDCBPT+1
IOBRSV44 EQU   IOBFLAG4
IOBJES3I EQU   IOBFLAG4
IOBRSV42 EQU   IOBFLAG4
IOBRSV41 EQU   IOBFLAG4
IOBRSV40 EQU   IOBFLAG4
IOBPMERR EQU   IOBFLAG4
IOBCC3WE EQU   IOBFLAG4
IOBGDPOL EQU   IOBFLAG4
IOBSTRTB EQU   IOBSTART+1
IOBSIOCC EQU   IOBSTART
IOBCSB7  EQU   IOBCSTAT
IOBCSB6  EQU   IOBCSTAT
IOBCSB5  EQU   IOBCSTAT
IOBCSB4  EQU   IOBCSTAT
IOBCSB3  EQU   IOBCSTAT
IOBCSB2  EQU   IOBCSTAT
IOBCSB1  EQU   IOBCSTAT
IOBCSB0  EQU   IOBCSTAT
IOBUSB7  EQU   IOBUSTAT
IOBUSB6  EQU   IOBUSTAT
IOBUSB5  EQU   IOBUSTAT
IOBUSB4  EQU   IOBUSTAT
IOBUSB3  EQU   IOBUSTAT
IOBUSB2  EQU   IOBUSTAT
IOBUSB1  EQU   IOBUSTAT
IOBUSB0  EQU   IOBUSTAT
IOBCMDA  EQU   IOBIOCSW
IOBLOG   EQU   IOBFL3
IOBJAM   EQU   IOBICL
IOBMSG   EQU   IOBFL3
IOBSDR   EQU   IOBCNC
IOBACU   EQU   IOBFL3
IOBCDC   EQU   IOBFL3
IOBICC   EQU   IOBFL3
IOBCCC   EQU   IOBFL3
IOBECBPB EQU   IOBECBPT+1
IOBECBCC EQU   IOBECBPT
IOBS1B7  EQU   IOBSENS1
IOBS1B6  EQU   IOBSENS1
IOBS1B5  EQU   IOBSENS1
IOBS1B4  EQU   IOBSENS1
IOBS1B3  EQU   IOBSENS1
IOBS1B2  EQU   IOBSENS1
IOBS1B1  EQU   IOBSENS1
IOBS1B0  EQU   IOBSENS1
IOBSNSC9 EQU   IOBS0B7
IOBS0B6  EQU   IOBSENS0
IOBS0B5  EQU   IOBSENS0
IOBS0B4  EQU   IOBSENS0
IOBS0B3  EQU   IOBSENS0
IOBS0B2  EQU   IOBSENS0
IOBS0B1  EQU   IOBSENS0
IOBS0B0  EQU   IOBSENS0
IOBPNCH  EQU   IOBFLAG2
IOBSTATO EQU   IOBFLAG2
IOBSKUPD EQU   IOBFLAG2
IOBALTTR EQU   IOBFLAG2
IOBRRT2  EQU   IOBRDHA0
IOBRRT3  EQU   IOBPURGE
IOBSENSE EQU   IOBFLAG2
IOBHALT  EQU   IOBFLAG2
IOBSPSVC EQU   IOBRSTRT
IOBUNREL EQU   IOBFLAG1
IOBIOERR EQU   IOBFLAG1
IOBFCREX EQU   IOBCYCCK
IOBRPSTN EQU   IOBFLAG1
IOBERRTN EQU   IOBFLAG1
IOBCMDCH EQU   IOBFLAG1
IOBDATCH EQU   IOBFLAG1
IOBCNOPA EQU   IOBPREFX+12
IOBCICB  EQU   IOBPREFX+8
IOBCECB  EQU   IOBPREFX+4
IOBCONOP EQU   IOBPREFX+3
IOBCINOP EQU   IOBPREFX+2
IOBRSV05 EQU   IOBPREFX+1
IOBPCI   EQU   IOBCFLG1
IOBRSTCH EQU   IOBCFLG1
IOBABAPP EQU   IOBCFLG1
IOBPTST  EQU   IOBCFLG1
IOBRSV04 EQU   IOBCFLG1
IOBRSV03 EQU   IOBCFLG1
IOBRSV02 EQU   IOBCFLG1
IOBRSV01 EQU   IOBCFLG1
IOSEND   EQU   IOSB+108
IOSSKR   EQU   IOSEEKA+7
IOSSKH2  EQU   IOSSKHH+1
IOSSKH1  EQU   IOSSKHH
IOSSKCC  EQU   IOSCCHH
IOSSKBB  EQU   IOSEEKA+1
IOSSKM   EQU   IOSEEKA
IOSEEK   EQU   IOSB+92
IOSMDM   EQU   IOSB+91
IOSMDB   EQU   IOSB+90
IOSCKEY7 EQU   IOSCKEY
IOSCKEY6 EQU   IOSCKEY
IOSCKEY5 EQU   IOSCKEY
IOSCKEY4 EQU   IOSCKEY
@NM00072 EQU   IOSCKEY
IOSFMSK  EQU   IOSB+88
IOSCUDEV EQU   IOSPATH+1
@NM00071 EQU   IOSCHN
IOSPATH3 EQU   IOSCHN
IOSPATH2 EQU   IOSCHN
IOSEXP   EQU   IOSCHN
IOSGDP   EQU   IOSCHN
IOSAFF   EQU   IOSB+85
IOSRSS1B EQU   IOSB+84
IOSDSID  EQU   IOSB+80
IOSVST   EQU   IOSB+76
IOSRST   EQU   IOSB+72
IOSDIE   EQU   IOSB+68
IOSABN   EQU   IOSB+64
IOSNRM   EQU   IOSB+60
IOSPCI   EQU   IOSB+56
IOSERP   EQU   IOSB+52
IOSPCHN  EQU   IOSB+48
IOSSNS   EQU   IOSB+42
IOSAPMSK EQU   IOSB+40
IOSRES4A EQU   IOSB+36
IOSUSE   EQU   IOSB+32
IOSSRB   EQU   IOSB+28
IOSCSWRC EQU   IOSCSW+5
IOSTSB   EQU   IOSTATUS+1
IOSTSA   EQU   IOSTATUS
IOSCSWCA EQU   IOSCSW
IOSCC    EQU   @NM00070
IOSUCB   EQU   IOSB+16
IOSOPT2X EQU   IOSOPT2
IOSHTP   EQU   IOSOPT2
IOSRELSE EQU   IOSOPT
IOSAPR   EQU   IOSOPT
IOSTSLL  EQU   IOSOPT
IOSNERP  EQU   IOSOPT
IOSPSLL  EQU   IOSOPT
IOSQISCE EQU   IOSOPT
IOSDEP   EQU   IOSOPT
IOSBYP   EQU   IOSOPT
IOSCOD   EQU   IOSB+13
IOSPKY7  EQU   IOSPKEY
IOSPGDPX EQU   IOSPKEY
IOSIDR   EQU   IOSPKEY
IOSLCL   EQU   IOSPKEY
@NM00069 EQU   IOSPKEY
IOSPGAD  EQU   IOSB+8
IOSASID  EQU   IOSB+6
IOSPRLVL EQU   IOSB+5
IOSDVRID EQU   IOSB+4
IOSPROC  EQU   IOSB+3
IOSFLC7  EQU   IOSFLC
IOSFLC6  EQU   IOSFLC
IOSRWAIT EQU   IOSFLC
IOSTP    EQU   IOSFLC
IOSCC3WE EQU   IOSFLC
IOSVERIF EQU   IOSDVALT
IOSDVMNT EQU   IOSFLC
IOSLOG   EQU   IOSFLB
IOSBDCST EQU   IOSFLB
IOSMSG   EQU   IOSFLB
IOSFLB4  EQU   IOSFLB
IOSFLB3  EQU   IOSFLB
IOSFLB2  EQU   IOSFLB
IOSSDR   EQU   IOSFLB
IOSDIESE EQU   IOSFLB
IOSIOSB  EQU   IOSFLA
IOSDOM   EQU   IOSFLA
IOSEX    EQU   IOSFLA
IOSSMDB  EQU   IOSFLA
IOSSMDA  EQU   IOSFLA
IOSERR   EQU   IOSFLA
IOSCCHN  EQU   IOSACHN
IOSDCHN  EQU   IOSACHN
@NM00044 EQU   SRBSECT+40
@NM00043 EQU   SRBSECT+38
SRBPRIOR EQU   SRBSECT+37
SRBPKF   EQU   SRBSECT+36
SRBSAVE  EQU   SRBSECT+32
SRBPARM  EQU   SRBSECT+28
SRBRMTR  EQU   SRBSECT+24
SRBEP    EQU   SRBSECT+20
SRBPTCB  EQU   SRBFLC+4
SRBPASID EQU   SRBFLC+2
SRBCPAFF EQU   SRBFLC
SRBASCB  EQU   SRBSECT+8
SRBFLNK  EQU   SRBSECT+4
SRBID    EQU   SRBSECT
RPLSEQNO EQU   RPLOF60+6
@NM00042 EQU   RPLIBSQ
RPLIINV  EQU   RPLIBSQ
RPLINEG  EQU   RPLIBSQ
RPLIPOS  EQU   RPLIBSQ
RPLIIGN  EQU   RPLIBSQ
RPLIRSET EQU   RPLIBSQ
RPLITST  EQU   RPLIBSQ
RPLISET  EQU   RPLIBSQ
@NM00041 EQU   RPLOBSQ
RPLOINV  EQU   RPLOBSQ
RPLONEG  EQU   RPLOBSQ
RPLOPOS  EQU   RPLOBSQ
RPLOIGN  EQU   RPLOBSQ
RPLORSET EQU   RPLOBSQ
RPLOTST  EQU   RPLOBSQ
RPLOSET  EQU   RPLOBSQ
RPLIBSQV EQU   RPLOF60+2
RPLOBSQV EQU   RPLOF60
@NM00040 EQU   RPLCNTSC
RPLRSHUT EQU   RPLCNTSC
RPLRQR   EQU   RPLCNTSC
RPLSHUTC EQU   RPLCNTSC
RPLSHUTD EQU   RPLCNTSC
RPLSTSN  EQU   RPLCNTSC
RPLCLEAR EQU   RPLCNTSC
RPLSDT   EQU   RPLCNTSC
@NM00039 EQU   RPLCNTDC
RPLSIGNL EQU   RPLCNTDC
RPLLUS   EQU   RPLCNTDC
RPLRTR   EQU   RPLCNTDC
RPLBID   EQU   RPLCNTDC
@NM00038 EQU   RPLCNTDF
RPLQI    EQU   RPLCNTDF
RPLRELQ  EQU   RPLCNTDF
RPLCHASE EQU   RPLCNTDF
RPLQEC   EQU   RPLCNTDF
RPLQC    EQU   RPLCNTDF
RPLCNCEL EQU   RPLCNTDF
RPLDATA  EQU   RPLCNTDF
RPLRRN   EQU   RPLRESP
RPLNFME  EQU   RPLRESP
RPLEX    EQU   RPLRESP
@NM00037 EQU   RPLRESP
@NM00036 EQU   RPLPOSTV
RPLSCHED EQU   RPLPOSTV
@NM00035 EQU   RPLVTFL1
RPLAUTUS EQU   RPLVTFL1
@NM00034 EQU   RPLVTFL1
@NM00033 EQU   RPLCHN
RPLONLY  EQU   RPLCHN
RPLLAST  EQU   RPLCHN
RPLMIDLE EQU   RPLCHN
RPLFIRST EQU   RPLCHN
@NM00032 EQU   RPLRTYPE
RPLDFASY EQU   RPLRTYPE
RPLNFSYN EQU   RPLRTYPE
RPLRRESP EQU   RPLRTYPE
@NM00031 EQU   RPLSTYPE
RPLSRESP EQU   RPLSTYPE
@NM00030 EQU   RPLRH3
RPLCSI   EQU   RPLRH3
RPLCHREQ EQU   RPLRH3
RPLCMD   EQU   RPLRH3
RPLEB    EQU   RPLRH3
RPLBB    EQU   RPLRH3
RPLSIGDA EQU   RPLVTEXT+32
RPLSAV13 EQU   RPLVTEXT+28
RPLUSNSO EQU   RPLOSENS+2
RPLSSMO  EQU   RPLSSNSO+1
@NM00029 EQU   RPLSSEO
RPLRRO   EQU   RPLSSEO
RPLFIO   EQU   RPLSSEO
RPLSTATO EQU   RPLSSEO
RPLCPMO  EQU   RPLSSEO
@NM00028 EQU   RPLSSEO
RPLFMHDR EQU   RPLOPT12
@NM00027 EQU   RPLOPT12
@NM00026 EQU   RPLOPT12
@NM00025 EQU   RPLOPT12
RPLNIBTK EQU   RPLOPT12
RPLTRUNC EQU   RPLOPT12
RPLKEEP  EQU   RPLOPT12
@NM00024 EQU   RPLOPT12
RPLRSVE8 EQU   RPLOPT11
RPLRSVE7 EQU   RPLOPT11
RPLRSVE6 EQU   RPLOPT11
RPLRSVE5 EQU   RPLOPT11
RPLRSVE4 EQU   RPLOPT11
RPLSTOP  EQU   RPLOPT11
RPLSTART EQU   RPLOPT11
RPLQUIES EQU   RPLOPT11
RPLRSVI6 EQU   RPLOPT10
RPLRSVI5 EQU   RPLOPT10
RPLRSVI4 EQU   RPLOPT10
RPLRSVI3 EQU   RPLOPT10
RPLRSVI2 EQU   RPLOPT10
RPLSPARM EQU   RPLOPT10
RPLDSPLY EQU   RPLOPT10
RPLBSCID EQU   RPLOPT10
RPLTOPL  EQU   RPLOPT9
RPLCIDE  EQU   RPLOPT9
RPLRNNM  EQU   RPLOPT9
RPLAPPST EQU   RPLOPT9
RPLCOUNT EQU   RPLOPT9
RPLTERMS EQU   RPLOPT9
RPLDEVCH EQU   RPLOPT9
RPLLOGON EQU   RPLOPT9
RPLUSFLD EQU   RPLVTEXT+16
RPLESR2  EQU   RPLUSNSI+1
RPLESR1  EQU   RPLUSNSI
RPLSSMI  EQU   RPLDSB2
@NM00023 EQU   RPLSSEI
RPLRRI   EQU   RPLSSEI
RPLFII   EQU   RPLSSEI
RPLSTATI EQU   RPLSSEI
RPLCPMI  EQU   RPLSSEI
RPLPATHI EQU   RPLSSEI
RPLARCLN EQU   RPLVTEXT+8
RPLAARLN EQU   RPLVTEXT+4
RPLAAREA EQU   RPLVTEXT
RPLERMSA EQU   RPLCOMN+72
RPLEMLEN EQU   RPLCOMN+70
RPLACTIV EQU   RPLCOMN+69
RPLBRANC EQU   RPLEXTD1
RPLNIB   EQU   RPLEXTD1
@NM00022 EQU   RPLEXTD1
RPLEXIT  EQU   RPLEXTD1
RPLNEXIT EQU   RPLEXTD1
RPLEXSCH EQU   RPLEXTD1
RPLDDDD  EQU   RPLRBAR+4
@NM00021 EQU   RPLRBAR+3
@NM00020 EQU   RPLAIXID
RPLAXPKP EQU   RPLAIXID
RPLAIXPC EQU   RPLRBAR
RPLRSV88 EQU   RPLOPT8
RPLUNCON EQU   RPLOPT8
RPLACTV  EQU   RPLOPT8
RPLSESS  EQU   RPLOPT8
RPLPEND  EQU   RPLOPT8
RPLODPRM EQU   RPLOPT8
RPLODACP EQU   RPLOPT8
RPLODACQ EQU   RPLOPT8
RPLRSV78 EQU   RPLOPT7
RPLTCRNO EQU   RPLOPT7
RPLRLSOP EQU   RPLOPT7
RPLTPOST EQU   RPLOPT7
RPLQOPT  EQU   RPLOPT7
RPLCNIMM EQU   RPLCNOPT
RPLCNANY EQU   RPLCNOPT
RPLCNALL EQU   RPLCNOPT
RPLRSV68 EQU   RPLOPT6
RPLRSV67 EQU   RPLOPT6
RPLLOCK  EQU   RPLOPT6
RPLNCOND EQU   RPLOPT6
RPLCOND  EQU   RPLOPT6
RPLEOT   EQU   RPLUNTYP
RPLEOM   EQU   RPLUNTYP
RPLEOB   EQU   RPLUNTYP
RPLWROPT EQU   RPLOPT5
RPLNODE  EQU   RPLOPT5
RPLERACE EQU   RPLWRTYP
RPLEAU   EQU   RPLWRTYP
RPLNERAS EQU   RPLWRTYP
RPLPSOPT EQU   RPLOPT5
@NM00019 EQU   RPLOPT5
RPLDLGIN EQU   RPLOPT5
RPLRLEN  EQU   RPLCOMN+48
RPLCHAIN EQU   RPLNXTRP
RPLBOP   EQU   RPLOPT4
@NM00018 EQU   RPLOPT4
RPLMKFRM EQU   RPLOPT4
RPLENDTR EQU   RPLOPT4
RPLALIGN EQU   RPLOPT3
RPLFMT   EQU   RPLOPT3
RPLFLD   EQU   RPLOPT3
RPLVFY   EQU   RPLOPT3
RPLBLK   EQU   RPLOPT3
RPLSFORM EQU   RPLOPT3
RPLEODS  EQU   RPLOPT3
RPLNSP   EQU   RPLOPT2
RPLUPD   EQU   RPLOPT2
@NM00017 EQU   RPLOPT2
RPLLRD   EQU   RPLOPT2
RPLBWD   EQU   RPLOPT2
RPLCNV   EQU   RPLOPT2
RPLADD   EQU   RPLADR
RPLKEY   EQU   RPLOPT2
RPLECBIN EQU   RPLECBSW
RPLGEN   EQU   RPLOPT1
RPLKGE   EQU   RPLOPT1
RPLASY   EQU   RPLOPT1
RPLSKP   EQU   RPLOPT1
RPLSEQ   EQU   RPLOPT1
RPLDIR   EQU   RPLOPT1
RPLLOC   EQU   RPLOPT1
RPLDAF   EQU   RPLARG+2
RPLSAF   EQU   RPLARG
RPLTCBPT EQU   RPLCOMN+28
RPLCCHAR EQU   RPLCOMN+20
RPLSTRID EQU   RPLCOMN+18
RPLKEYL  EQU   RPLKEYLE
RPLRDSOH EQU   RPLFDB3
RPLRLG   EQU   RPLFDB3
RPLLGFRC EQU   RPLFDB3
RPLREOT  EQU   RPLFDB3
RPLREOM  EQU   RPLFDB3
RPLREOB  EQU   RPLFDB3
RPLSV32  EQU   RPLFDB3
RPLUINPT EQU   RPLFDB3
RPLSTSAV EQU   RPLFDB2
RPLCUERR EQU   RPLFDB2
RPLDLGFL EQU   RPLFDB2
RPLIOERR EQU   RPLFDB2
RPLDVUNS EQU   RPLFDB2
RPLATND  EQU   RPLFDB2
RPLRVID  EQU   RPLFDB2
RPLERLK  EQU   RPLFDB2
RPLERREG EQU   RPLRTNCD
RPLSTAT  EQU   RPLFDBWD
RPLPOST  EQU   RPLECB
RPLWAIT  EQU   RPLECB
RPLPLHPT EQU   RPLCOMN+4
RPLLEN2  EQU   RPLLEN
RPLREQ   EQU   RPLIDWD+2
RPLSTYP  EQU   RPLIDWD+1
RPLID    EQU   RPLIDWD
@NM00016 EQU   ACBVTEXT+8
@NM00015 EQU   ACBVTEXT+6
ACBRTN   EQU   ACBVTEXT
ACBAPID  EQU   ACBCOMN+72
ACBCBMWA EQU   ACBCOMN+68
ACBUAPTR EQU   ACBCOMN+64
ACBLRECL EQU   ACBCOMN+62
ACBMSGLN EQU   ACBBLKSZ
ACBBUFSP EQU   ACBCOMN+56
@NM00014 EQU   ACBUJFCB+1
ACBOPTN  EQU   ACBUJFCB
@NM00013 EQU   ACBINFLG+1
ACBBYPSS EQU   ACBINFLG
ACBSDS   EQU   ACBVVIC
ACBUCRA  EQU   ACBINFLG
ACBSCRA  EQU   ACBINFLG
ACBCAT   EQU   ACBINFLG
ACBIJRQE EQU   ACBINFLG
ACBJEPS  EQU   ACBINFLG
@NM00012 EQU   ACBINFLG
ACBERFLG EQU   ACBCOMN+49
ACBBUSY  EQU   ACBIOSFG
ACBLOCK  EQU   ACBEXFG
@NM00011 EQU   ACBOFLGS
ACBDSERR EQU   ACBOFLGS
ACBOPEN  EQU   ACBOFLGS
ACBEOV   EQU   ACBOFLGS
@NM00010 EQU   ACBOFLGS
ACBDEB   EQU   ACBDDNM+5
ACBERFL  EQU   ACBDDNM+4
ACBAM    EQU   ACBAMETH
ACBINFL  EQU   ACBDDNM+2
ACBTIOT  EQU   ACBDDNM
ACBUEL   EQU   ACBEXLST
ACBPASSW EQU   ACBCOMN+32
ACBMSGAR EQU   ACBCOMN+28
@NM00009 EQU   ACBDSORG+1
ACBDORGA EQU   ACBDSORG+1
@NM00008 EQU   ACBDSORG
ACBOPTJ  EQU   ACBDVIND
ACBCRNRE EQU   ACBCROPS
ACBCRNCK EQU   ACBCROPS
ACBASA   EQU   ACBCCTYP
@NM00007 EQU   ACBCCTYP
ACBTRCID EQU   ACBCCTYP
@NM00006 EQU   ACBRECFM
ACBRECAF EQU   ACBRECFM
ACBJBUF  EQU   ACBBUFPL+2
ACBMACR4 EQU   ACBBUFPL+1
@NM00005 EQU   ACBMACR3
ACBNCFX  EQU   ACBMACR3
ACBSIS   EQU   ACBMACR3
ACBDFR   EQU   ACBMACR3
ACBICI   EQU   ACBMACR3
ACBGSR   EQU   ACBMACR3
ACBLSR   EQU   ACBMACR3
@NM00004 EQU   ACBMACR3
ACBBUFNI EQU   ACBCOMN+18
ACBBUFND EQU   ACBCOMN+16
ACBSTRNO EQU   ACBCOMN+15
ACBBSTNO EQU   ACBCOMN+14
ACBAIX   EQU   ACBMACR2
ACBDSN   EQU   ACBMACR2
ACBRST   EQU   ACBMACR2
ACBLOGON EQU   ACBMACR2
ACBSKP   EQU   ACBMACR2
@NM00003 EQU   ACBMACR2
ACBUBF   EQU   ACBMACR1
ACBOUT   EQU   ACBMACR1
ACBIN    EQU   ACBMACR1
ACBDIR   EQU   ACBMACR1
ACBSEQ   EQU   ACBMACR1
ACBBLK   EQU   ACBCNV
ACBADD   EQU   ACBADR
ACBKEY   EQU   ACBMACR1
ACBINRTN EQU   ACBCOMN+8
ACBIBCT  EQU   ACBJWA
ACBLEN2  EQU   ACBLENG2
ACBSTYP  EQU   ACBCOMN+1
ACBID    EQU   ACBCOMN
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00002 EQU   CVTFIX+248
@NM00001 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTSHSB  EQU   CVTSHS
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
@NM00068 EQU   PSA+3668
PSASTAK  EQU   PSA+3072
@NM00067 EQU   PSA+1048
PSAUSEND EQU   PSA+1048
PSARV062 EQU   PSA+1044
PSACDAL  EQU   PSA+1040
PSAWTCOD EQU   PSA+1036
PSAATCVT EQU   PSA+1032
PSAPCPSW EQU   PSA+1024
PSAPIR2  EQU   PSA+1020
PSARV059 EQU   PSA+1018
PSASVC13 EQU   PSA+1016
PSALSFCC EQU   PSA+1012
PSASFACC EQU   PSA+1008
PSASTOP  EQU   PSA+992
PSASTART EQU   PSA+976
PSARSPSW EQU   PSA+968
PSASRPSW EQU   PSA+960
PSARV045 EQU   PSA+892
PSARV044 EQU   PSA+888
PSARV043 EQU   PSA+884
PSARV042 EQU   PSA+880
PSARV041 EQU   PSA+876
PSARV040 EQU   PSA+872
PSARV025 EQU   PSA+868
PSADSSED EQU   PSA+868
PSADSSPR EQU   PSA+864
PSADSSFW EQU   PSA+860
PSADSS14 EQU   PSA+856
PSADSSPP EQU   PSA+848
PSADSSRP EQU   PSA+840
PSADSS05 EQU   PSADSSF4
PSADSS10 EQU   PSADSSF4
PSADSSVE EQU   PSADSSF4
PSADSSDE EQU   PSADSSF4
PSADSSC0 EQU   PSADSSF4
PSADSSIE EQU   PSADSSF4
PSADSS12 EQU   PSADSSF4
PSADSSRC EQU   PSADSSF4
PSARV057 EQU   PSADSSF3
PSARV056 EQU   PSADSSF3
PSARV055 EQU   PSADSSF3
PSADSSMC EQU   PSADSSF3
PSADSSRW EQU   PSADSSF3
PSADSSNM EQU   PSADSSF3
PSADSSES EQU   PSADSSF3
PSADSSGP EQU   PSADSSF3
PSADSSF2 EQU   PSADSSFL+1
PSADSSPI EQU   PSADSSF1
PSADSSOI EQU   PSADSSF1
PSADSSSP EQU   PSADSSF1
PSADSSTP EQU   PSADSSF1
PSADSSDW EQU   PSADSSF1
PSADSSDD EQU   PSADSSF1
PSADSSDM EQU   PSADSSF1
PSADSSMV EQU   PSADSSF1
PSADSSTS EQU   PSA+816
PSADSSWK EQU   PSA+812
PSADSSR3 EQU   PSA+808
PSADSSR2 EQU   PSA+804
PSADSSRS EQU   PSA+800
PSASTOR  EQU   PSA+796
PSACPUSA EQU   PSA+794
PSAVSTAP EQU   PSA+792
PSAWKVAP EQU   PSA+788
PSAWKRAP EQU   PSA+784
PSAMCHIC EQU   PSA+783
PSARV061 EQU   PSA+782
PSASYMSK EQU   PSA+781
PSAMCHFL EQU   PSA+780
PSACR0   EQU   PSA+776
PSAPSWSV EQU   PSA+768
PSACLHS  EQU   PSAHLHI
PSALKR15 EQU   PSALKSA+60
PSALKR14 EQU   PSALKSA+56
PSALKR13 EQU   PSALKSA+52
PSALKR12 EQU   PSALKSA+48
PSALKR11 EQU   PSALKSA+44
PSALKR10 EQU   PSALKSA+40
PSALKR9  EQU   PSALKSA+36
PSALKR8  EQU   PSALKSA+32
PSALKR7  EQU   PSALKSA+28
PSALKR6  EQU   PSALKSA+24
PSALKR5  EQU   PSALKSA+20
PSALKR4  EQU   PSALKSA+16
PSALKR3  EQU   PSALKSA+12
PSALKR2  EQU   PSALKSA+8
PSALKR1  EQU   PSALKSA+4
PSALKR0  EQU   PSALKSA
PSARV023 EQU   PSACLHT+52
PSALOCAL EQU   PSACLHT+48
PSACMSL  EQU   PSACLHT+44
PSAOPTL  EQU   PSACLHT+40
PSATPACL EQU   PSACLHT+36
PSATPDNL EQU   PSACLHT+32
PSATPNCL EQU   PSACLHT+28
PSAIOSLL EQU   PSACLHT+24
PSAIOSUL EQU   PSACLHT+20
PSAIOSCL EQU   PSACLHT+16
PSAIOSSL EQU   PSACLHT+12
PSASALCL EQU   PSACLHT+8
PSAASML  EQU   PSACLHT+4
PSADISPL EQU   PSACLHT
PSASRSA  EQU   PSA+636
PSARV050 EQU   PSA+634
PSADSSGO EQU   PSA+633
PSARECUR EQU   PSA+632
PSAHLHIS EQU   PSA+628
PSAIPCSA EQU   PSA+624
@NM00066 EQU   PSA+621
PSAIPCDM EQU   PSA+620
PSAIPCD  EQU   PSA+616
@NM00065 EQU   PSA+613
PSAIPCRM EQU   PSA+612
PSAIPCR  EQU   PSA+608
PSAMCHEX EQU   PSA+600
PSAMPSW  EQU   PSA+592
PSAEXPS2 EQU   PSA+584
PSAEXPS1 EQU   PSA+576
PSAPIREG EQU   PSA+572
PSARSREG EQU   PSA+568
PSAGPREG EQU   PSA+556
PSARV022 EQU   PSASUP4
PSARV021 EQU   PSASUP4
PSARV020 EQU   PSASUP4
PSARV019 EQU   PSASUP4
PSARV018 EQU   PSASUP4
PSARV017 EQU   PSASUP4
PSARV016 EQU   PSASUP4
PSARV015 EQU   PSASUP4
PSARV014 EQU   PSASUP3
PSARV013 EQU   PSASUP3
PSARV012 EQU   PSASUP3
PSARV011 EQU   PSASUP3
PSASPR   EQU   PSASUP3
PSAPSREG EQU   PSASUP3
PSAPI2   EQU   PSASUP3
PSAIOSUP EQU   PSASUP3
PSALCR   EQU   PSASUP2
PSARTM   EQU   PSASUP2
PSAACR   EQU   PSASUP2
PSAIPCE2 EQU   PSASUP2
PSAIPCES EQU   PSASUP2
PSAIPCEC EQU   PSASUP2
PSAGTF   EQU   PSASUP2
PSAIPCRI EQU   PSASUP2
PSARV063 EQU   PSASUP1
PSATCTL  EQU   PSASUP1
PSADISP  EQU   PSASUP1
PSALOCK  EQU   PSASUP1
PSAPI    EQU   PSASUP1
PSAEXT   EQU   PSASUP1
PSASVC   EQU   PSASUP1
PSAIO    EQU   PSASUP1
PSAAOLD  EQU   PSA+548
PSAANEW  EQU   PSA+544
PSATOLD  EQU   PSA+540
PSATNEW  EQU   PSA+536
PSALCCAR EQU   PSA+532
PSALCCAV EQU   PSA+528
PSAPCCAR EQU   PSA+524
PSAPCCAV EQU   PSA+520
PSACPULA EQU   PSA+518
PSACPUPA EQU   PSA+516
PSAPSA   EQU   PSA+512
FLCHDEND EQU   PSA+512
FLCCRSAV EQU   FLCMCLA+280
FLCGRSAV EQU   FLCMCLA+216
FLCFPSAV EQU   FLCMCLA+184
FLCFLA   EQU   FLCMCLA+88
FLCRGNCD EQU   FLCMCLA+84
FLCFSAA  EQU   FLCFSA+1
@NM00064 EQU   FLCFSA
@NM00063 EQU   FLCMCLA+72
FLCMCIC  EQU   FLCMCLA+64
@NM00062 EQU   FLCMCLA+20
FLCIOAA  EQU   FLCIOA+1
@NM00061 EQU   FLCIOA
@NM00060 EQU   FLCMCLA+15
@NM00059 EQU   FLCMCLA+14
@NM00058 EQU   FLCMCLA+12
FLCLCL   EQU   FLCMCLA+8
FLCIOELA EQU   FLCIOEL+1
@NM00057 EQU   FLCIOEL
FLCCHNID EQU   FLCMCLA
@NM00056 EQU   PSA+160
FLCMTRCD EQU   PSA+157
@NM00055 EQU   PSA+156
FLCPERA  EQU   FLCPER+1
@NM00054 EQU   FLCPER
@NM00053 EQU   PSA+151
FLCPERCD EQU   PSA+150
FLCMCNUM EQU   PSA+149
@NM00052 EQU   PSA+148
FLCTEAA  EQU   FLCTEA+1
@NM00051 EQU   FLCTEA
PSAPIPC  EQU   PSAPICOD
PSAPIMC  EQU   PSAPICOD
PSAPIPER EQU   PSAPICOD
PSARV049 EQU   FLCPICOD
FLCPILCB EQU   FLCPIILC
@NM00050 EQU   FLCPIILC
@NM00049 EQU   PSAEPPSW
FLCSVCN  EQU   PSAESPSW+2
FLCSILCB EQU   FLCSVILC
@NM00048 EQU   FLCSVILC
@NM00047 EQU   PSAESPSW
FLCEICOD EQU   PSAEEPSW+2
PSASPAD  EQU   PSAEEPSW
@NM00046 EQU   PSA+128
FLCINPSW EQU   PSA+120
FLCMNPSW EQU   PSA+112
FLCPNPSW EQU   PSA+104
FLCSNPSW EQU   PSA+96
FLCENPSW EQU   PSA+88
FLCTRACE EQU   PSA+84
FLCTIMER EQU   PSA+80
FLCCVT2  EQU   PSA+76
FLCCAW   EQU   PSA+72
FLCCSW   EQU   PSA+64
FLCIOPSW EQU   PSA+56
FLCMOPSW EQU   PSA+48
FLCPOPSW EQU   PSA+40
FLCSOPSW EQU   PSA+32
FLCEOPSW EQU   PSA+24
@NM00045 EQU   FLCICCW2+4
FLCCVT   EQU   FLCICCW2
FLCICCW1 EQU   FLCROPSW
FLCIPPSW EQU   FLCRNPSW
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00607 EQU   @RC00605
@RC00678 EQU   @RC00677
@RC00714 EQU   @RC00710
@RC00731 EQU   @RC00725
@RT00807 EQU   #DC00019
@RT00964 EQU   @RC00960
@RT00877 EQU   @RC00875
@RT00921 EQU   @RC00875
@RC01010 EQU   @RC01006
@RC01054 EQU   @RC01053
@RF01119 EQU   @RC01116
@RC01561 EQU   @RC01558
@RC01624 EQU   @RC01621
@RC01677 EQU   @RC01674
@RC00611 EQU   @RC00607
@RC00716 EQU   @RC00714
@RT01564 EQU   @RC01561
@RF01570 EQU   @RC01561
@RC01625 EQU   @RC01624
@ENDDATA EQU   *
         END   ISTSQC06,(C'PLS1244',0603,77334)
