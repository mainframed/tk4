         TITLE 'IGC0R05B  DATA SET PROCESSOR - DA DATA SET POSITIONING *
                      REPOSITION I/O  RESTART-SVC 52  OS/360'
IGC0R05B CSECT
*          RELEASE 18 DELETIONS
*0000239000-241000,263000-264000,340000,345000,348000,406000-     M3251
*0000407000,521000,544000-546000,565000                           M3251
*          RELEASE 19 DELETIONS
*2555050000,188000-189000,606000-607000,609000-612000,682000,    A25984
*2555686000-687000,746000                                        A25984
*          RELEASE 20 DELETIONS
*3523050000,187600                                               A30552
*3523218000,243000,250700-252000,877200-877400                   A29797
*          RELEASE 21 DELETIONS
*0790165000,187300-187900,447000,468000,487000-490000,508000-    M0187
*0790509000,515000,516000,520000,521000-521500,526000,557000-    M0187
*0790558000,568000-569000,680000-682000,686000,712000-713000,    M0187
*0790736000-737000,747000-749000,750000                          M0187
*          RELEASE 22 DELETIONS
*          RELEASE 23 DELETIONS
*          RELEASE 24 DELETIONS
*          RELEASE 25 DELETIONS
*          RELEASE 26 DELETIONS
*       VS2 030 ADDS/DELETES/CHANGES
*213100-213200,256500-256600,276600,287600-288944,679500-682500 ZA02895
*308425-308438,688500,711500-712999,738500-738988,833500-833800 ZA02895
*28843610                                                      @ZA08861
* APAR OZ31491 HAS BEEN FLAGGED AS @ZSUT222                    @ZSUT222
*C151260,151280,507000,513000                                  @ZSUT222
*A515100-515300,747200                                         @ZSUT222
* STATUS CHANGE LEVEL 004
*
*TITLE-        DA DATA SET POSITIONING
*
*STATUS-       INITIAL CODE
*
*FUNCTION-     CONTROL IS PASSED FROM IGC0S05B,IGC0U05B,IGC0P05B
*              OR FROM THE PARTIAL RELEASE FUNCTION OF CLOSE.
*              THIS MODULE EXAMINES THE DEB'S AND DSCB'S OF DA
*              SEQUENTIAL OR PARTITIONED DATA SETS TO DETERMINE IF
*              THE DATA SET HAS BEEN ALTERED SINCE THE CHECKPOINT
*              OCCURRED.
*
*              IF AN ENTRY IN THE TABLE INDICATES THAT A PS OR PO DATA
*              SET IS RESIDENT ON A DA DEVICE A 464 BYTE WORKAREA JUST
*              LIKE CLOSE'S IS FORMATTED IN THE RESTART WORKAREA.  THIS
*              CONTAINS THE CONTROL BLOCKS REQUIRED TO READ THE FORMAT
*              1 AND, IF NECESSARY, THE FORMAT 3 DSCB'S.
*
*              AFTER THIS THE FORMAT 1 DSCB, AND IF MORE THAN 3 EXTENTS
*              THE FORMAT 3 DSCB, IS READ.  NEXT THE DEB AND DSCB SPACE
*              ALLOCATION PARAMETERS ARE COMPARED.  IF THE DEB IS
*              GREATER THAN THE DSCB  (INDICATING A CLOSE WITH PARTIAL
*              RLSE) THE DEB IS COMPRESSED.  IF THE DSCB IS GREATER
*              THAN THE DEB A PARTIAL RELEASE IS EFFECTED VIA THE
*              PARTIAL RELEASE MODULES OF CLOSE.  BOTH OF THE FOREGOING
*              APPLY ONLY TO OUTPUT DATA SETS, FOR INPUT DATA SETS AN
*              ERROR CODE IS SET IF A DISCREPANCY IS ENCOUNTERED AND
*              CONTROL IS PASSED TO IGC0V05B. AT END-OF-TABLE, IF NO
*              ERROR IS ENCOUNTERED CONTROL IS PASSED TO IGC0T05B OR
*              IGC0W05B.
*
*ENTRY POINTS - THIS MODULE IS ENTERED FROM:IGC0S05B,IGC0U05B,IGC0P05B
*                                           AND OPEN PARTIAL RELEASE
*
*INPUT-        REGISTER  1    ADDR OF REPI/O'S WORKAREA
*              REGISTER  8    ADDR OF FIRST TABLE ENTRY
*              REGISTER  1    PARTIAL RELEASE ERROR RETURN CODE
*
*OUTPUT-       SAME AS REGISTER 1 AND 8 ABOVE
*
*EXTERNAL REFERENCES -                                                *
*   SVC 25  -  IGC0002E  -  BSAM TRACK BALANCE ROUTINE.               *
*      USED FOR D.A. CHECKPOINT DATA SET TO RESTORE DCBTRBAL,         *
*      AND TO ERASE THE REMAINDER OF THE TRACK.                       *
*                                                                     *
*EXITS-        TO PARTIAL RELEASE (IGG020P1)
*              NORMAL TO IGC0T05B OR, IF ISAM OR BDAM, TO IGC0W05B
*              ERROR  TO IGC0V05B WITH ONE OF THE FOLLOWING ERROR
*              SET IN THE RESTART WORKAREA:
*              72 - I/O ERROR READING DSCB
*              76 - XTENTS OR LAST TTR'S UNEQUAL: DEB VS DSCB
*
*TABLES/WORKAREAS-
*
***********************************************************************
*                                                                     *
*    THE FOLLOWING IS A DESCRIPTION OF THE 48 BYTE TABLE ENTRY THAT   *
*    IS USED IN THE RESTART PORTION OF CHECKPOINT/RESTART.  EACH      *
*    ENTRY IN THE TABLE (ONE FOR EACH OPEN DATA SET AT CHECKPOINT)    *
*    IS 48 BYTES LONG.                                                *
*                                                                     *
***********************************************************************
*
*        ------------------- 4 BYTES -----------------
*
*      0 +++++++++++++++++++++++++++++++++++++++++++++
*        +DATA SET  +           DCB                  +
*        + O-GN.    +         ADDRESS                +
*        +++++++++++++++++++++++++++++++++++++++++++++ 4
*        +FLAG BYTE +    WORKAREA SEGMENT            +
*        + NO. 1    +         ADDRESS                +
*      8 +++++++++++++++++++++++++++++++++++++++++++++
*        +NUMBER    +         JFCB TTR               +
*        + OF VOLS  +         ADDRESS                +
*        +++++++++++++++++++++++++++++++++++++++++++++ 12
*
*     12 +++++++++++++++++++++++
*        +TAPE LABL + FILE SEQ +        DEVICE = TAPE
*        +INFO BYTE + NUMBER   +
*        +++++++++++++++++++++++
*
*     12 +++++++++++++++++++++++
*        +    OLD   TIOT       +        DA AND UNIT RECORD
*        +      OFFSET         +
*        +++++++++++++++++++++++
*
*                              +++++++++++++++++++++++
*                              +FLAG BYTE +FLAG BYTE +
*                              +  NO. 2   +  NO. 3   +
*     16 +++++++++++++++++++++++++++++++++++++++++++++
*        +FLAG BYTE +FLAG BYTE +                     +
*        + NO. 4    + NO. 5    +   VOLUME ID NO. 1   +
*        +++++++++++++++++++++++                     + 20
*        +                                           +
*        +                                           +
*     24 +++++++++++++++++++++++++++++++++++++++++++++
*        +                                           +
*        +   VOLUME ID NO. 2                         +
*        +                     +++++++++++++++++++++++ 28
*        +                     +                     +
*        +                     +   VOLUME ID NO. 3   +
*     32 +++++++++++++++++++++++                     +
*        +                                           +
*        +                                           +
*        +++++++++++++++++++++++++++++++++++++++++++++ 36
*        +                                           +
*        +   VOLUME ID NO. 4                         +
*     40 +                     +++++++++++++++++++++++
*        +                     +                     +
*        +                     +                     +
*        +++++++++++++++++++++++   VOLUME ID NO. 5   + 44
*        +                                           +
*        +                                           +
*        +++++++++++++++++++++++++++++++++++++++++++++ 48
*
*
*ATTRIBUTES-   RE-ENTRANT
*              RE-USABLE
*              ENABLED
*              PRIVILEGED
*
***********************************************************************
*
*    REGISTER CONVENTION TO BE USED THRU-OUT REPI/O PHASE
*
***********************************************************************
*
WRKR1    EQU   0                        WDRK/PARAMETER REGISTER
WRKR2    EQU   1                        WDRK/PARAMETER REGISTER
DCBR     EQU   2                        CURRENT DCB REGISTER
BASER    EQU   3                        BASE REGISTER
DEBR     EQU   4                        CURRENT DEB REGISTER
UCBR     EQU   5                        CURRENT UCB REGISTER
TIOTR    EQU   6                        NEW TIOT REGISTER
TCBR     EQU   7                        TCB REGISTER
TABLR    EQU   8                        BEGINNING TO DCB TABLE REG
CTABLR   EQU   9                        CURRENT ENTRY IN DCB TABLE
BUFR     EQU   10                       USER BUFFER AREA
DSCNTR   EQU   11                       WORK REGISTER
WRKR3    EQU   12                       WORK REGISTER
WRKR4    EQU   13                       WORK REGISTER
WRKR5    EQU   14                       WORK/PARAMETER REGISTER
WRKR6    EQU   15                       WORK/PARAMETER REGISTER
*
***********************************************************************
*
*    OFFSETS TO BE USED IN REPI/O PHASE
*
***********************************************************************
*
IS       EQU   X'80'                    INDEXED SEQUENCIAL
PS       EQU   X'40'                    PHYSICAL SEQUENCIAL
DA       EQU   X'20'                    DIRECT ACCESS
PO       EQU   X'02'                    PARTITIONED ORGANIZATION
NULL     EQU   X'80'                    NULLFILE OR SYSCHECK
INOROUT  EQU   X'40'                    SYSIN OR SYSOUT DATA SET
TPDEV    EQU   X'10'                    TAPE DEVICE
UNITREC  EQU   X'04'                    UNIT RECORD EQUIPMENT
ERRINNSL EQU   X'80'                    ERROR IN NSL ROUTINE
NSLMTSW  EQU   X'40'                    NSL MOUNT SWITCH
BYPASS   EQU   X'10'                    BYPASS LABEL PROCESSING
NSL      EQU   X'04'                    NON-STANDARD LABEL
SL       EQU   X'02'                    STANDARD LABEL
NL       EQU   X'01'                    NO LABEL
GTR5VOL  EQU   X'80'                    GREATER THAN 5 VOLUMES
DAFLAG   EQU   X'80'                    DA DATA SET FLAG
NONDAFLG EQU   X'40'                    NON-DA DATA SET FLAG
NSLFLAG  EQU   X'10'                    NSL ROUTINE FLAG
TYPERST  EQU   X'80'                    IMMEDIATE RESTART
TABENT   EQU   48                       TABLE ENTRY LENGTH
WRITE    EQU   X'01'                    WRITE ON TAPE
READ     EQU   X'02'                    READ FOR TAPE
NOPOP    EQU   X'03'                    NOP
SENSE    EQU   X'04'                    SENSE
REWIND   EQU   X'07'                    REWIND
READBACK EQU   X'0C'                    READBACK
UNLOAD   EQU   X'0F'                    REWIND AND UNLOAD
WTM      EQU   X'1F'                    WRITE TAPE MARK
BSFOP    EQU   X'2F'                    BACKWARD SPACE FILE
FSFOP    EQU   X'3F'                    FORWARD SPACE FILE
SEARCH   EQU   X'31'                    SEARCH
SRCHCNT  EQU   X'05'                    COUNT FOR SEARCH ID
TIC      EQU   X'08'                    TIC
READDA   EQU   X'06'                    READ FOR DA
LENJFCB  EQU   X'B0'                    LENGTH OF JFCB
LBLLEN   EQU   X'50'                    LENGTH OF LABEL
PERMERR  EQU   X'7F'                    PERMANENT ERROR
ERR072   EQU   72                       ERROR READING IN DSCB  @ZSUT222
ERR076   EQU   76                       XTENTS OR LAST TTR'S   @ZSUT222
*                                       UNEQUAL DEB VS DSCB
ISORDA   EQU   IS+DA                    IS OR DA
IOERROR  EQU   X'20'                    PERMANENT I/O ERROR
FILETYPE EQU   X'00'                    FILE TYPE BYTE
THREE    EQU   X'03'                    TEST IF DSCB EXTN IS TO BE READ
READKND  EQU   X'0E'                    READ KEY AND DATA
LENGTH   EQU   X'8C'                    LENGTH OF KEY AND DATA
OUTP     EQU   X'0F'                    OUTPUT (DEBOPATB)
EXCHPGM  EQU   X'80'                    EXCP
DADEVDPT EQU   X'0C'                    DA DEVICE DEPENDENT SECTION
WRITEDA  EQU   X'05'                    WRITE FOR DA
SEVEN    EQU   X'07'                    TEST FOR GETTING UPPER LIMIT
LENDSCB  EQU   X'60'                    LENGTH OF DSCB
DEBID    EQU   X'0F'                    DEB IDENTIFICATION
MAXEXT   EQU   X'CA'                    MAXIMUM NO. OF EXTENT
UNREL    EQU   X'02'                    UNRELATED FLAG
TKBAL    EQU   25                       TRACK BALANCE SVC ROUTINE
CIND2PCI EQU   X'04'                    DCBCIND2 PCI CHAIN SCHED A29797
DEBPRFLN EQU   16                       LENGTH OF DEB PREFIX     Y02049
FLG2VAM  EQU   X'20'               VAM INDICATOR IN TABFLG2      Y02049
DEBEXTLN EQU   16                  LENGTH OF DEB EXTENT          Y02049
ULEXTNT  EQU   X'40'               INDICATES USER LABEL EXTENT   Y02049
NOEXTNT  EQU   X'00'               INDICATES NO EXTENT INFO      Y02049
ONE      EQU   1                   CONSTANT OF ONE               Y02049
EXTNTYP  EQU   0                   OFFSET TO EXTENT TYPE IN DSCB Y02049
D0       EQU   0                        CONSTANT ZERO            Y02076
D1       EQU   1                        CONSTANT ONE             Y02076
D3       EQU   3                        CONSTANT THREE           Y02076
D4       EQU   4                        CONSTANT FOUR            Y02076
D5       EQU   5                        CONSTANT FIVE            Y02049
D7       EQU   7                        CONSTANT SEVEN           YM7312
D8       EQU   8                        CONSTANT EIGHT           Y02076
D16      EQU   16                       CONSTANT SIXTEEN         Y02076
D20      EQU   20                       CONSTANT TWENTY          Y02076
D64      EQU   64                       CONSTANT SIXTY FOUR      Y02076
DF       EQU   X'FF'                    CONSTANT FOX FOX         Y02076
*
*
***********************************************************************
*
         BALR  BASER,0                  ESTABLISH ADDRESSIBILITY
         USING *,BASER                                           YM7874
         B     BEGIN                    BR AROUND EYECATCHER     YM7874
         CNOP  0,8                      ALIGN TO A DBLWD BNDRY   YM7874
         DC    CL8'IGC0R05B'            MODULE NAME            @ZSUT222
         DC    CL8'&SYSDATE'            LAST DATE SHIPPED      @ZSUT222
         DC    CL8'@ZSUT222'            LAST CODE SHIPPED      @ZSUT222
BEGIN    EQU   *                                                 YM7874
*
         USING RSTWA,BUFR
         USING IHADCB,DCBR
         USING TABL,CTABLR
         USING FORECORE,UCBR
         USING TCB,TCBR
         USING DEBBASIC,DEBR                                     Y02049
         USING CVT,WRKR2
*
*
         TM    TABFLG2-TABL(TABLR),TABSW   TEST FOR RETURN FROM PAR REL
         BO    REPDCB54                 YES - BRANCH
***********************************************************************
*   ESTABLISH ADDRESS OF FIRST BYTE BEYOND LAST 48 BYTE OPEN DATA     *
*   SET ENTRY.  THIS WILL BE THE BEGINNING OF THE FORECORE WORK AREA  *
*   FOR 'PARTIAL RELEASE'.                                            *
***********************************************************************
         LR    CTABLR,TABLR             INITIALIZE TO BEGINNING  Y02076
REPDCB0A EQU   *                        INSTR MUST FOLLOW        Y02076
         TM    TABFLG1,TABLAST          IS THIS LAST ENTRY       Y02076
         BO    REPDCB0B                 BRANCH IF END            Y02076
         LA    CTABLR,TABENT(CTABLR)    INCREMENT TO NEXT ENTRY  Y02076
         B     REPDCB0A                 BRANCH TO CONT COUNTING  Y02076
REPDCB0B EQU   *                        INSTR MUST FOLLOW        Y02076
         LA    CTABLR,TABENT(CTABLR)    1ST BYTE AFTER LAST      Y02076
*
*        LOAD ADDRESS OF FORECORE WORK AREA FOR PARTIAL RELEASE  YM7312
*        AND INSURE THAT IT IS ON A DOUBLE WORD BOUNDARY.        YM7312
*
         LA    UCBR,D7            LOAD 7 INTO REG                YM7312
         AR    UCBR,CTABLR        ADD PRELIM. FORECORE PTR       YM7312
         SRL   UCBR,D3            DROP EXTRA BITS IN ADDR.       YM7312
         SLL   UCBR,D3            FORECORE ADDR. NOW ON DOUBLE   YM7312
*                                 WORD BOUNDARY                  YM7312
         LR    CTABLR,TABLR             INITIALIZE CTABLR
         B     REPDCB02                 BRANCH TO TEST FOR TYPE OF D.S.
*
*********************************************************************
*
******** TEST FOR PS, PO, OR EXCP DATA SET
*
*********************************************************************
*
REPDCB01 EQU   *
*
         LA    CTABLR,TABENT(CTABLR)    POINT TO NEXT TABL ENTRY
*
REPDCB02 EQU   *
*
         TM    TABDSORG,DA+IS           BDAM OR ISAM DATA SET    M0187
         BZ    REPDCB03                 BRANCH IF NOT            A25984
REPDCB05 EQU   *                                                 A30552
*
*        NOTE THAT THE ISAM/BDAM PROCESSING MODULE MUST BE       Y02049
*        CALLED, AND ALLOW CHECKING ON BDAM DATA SETS TO BE DONE Y02049
*
         MVI   RSRETCOD+1,X'FF'         SET ISAM FLAG            A25984
         TM    TABDSORG,IS              IS THIS AN ISAM D.S.     Y02049
         BO    REPDCB04                 GET NEXT DCB             Y02049
REPDCB03 EQU   *                                                 A25984
         TM    TABFLG2,TABPOCAT         TEST FOR PO CONCATENATION
         BO    REPDCB04                 YES - BRANCH
         TM    TABFLG1,TABDA            TEST FOR A DA DEVICE
         BNO   REPDCB04                 BRANCH IF NOT            Y02049
         TM    TABFLG2,TABVIODS         IS THIS A VAM DATA SET?  YM7550
         BO    REPDCBA4                 BRANCH IF YES           ZA00128
         TM    TABFLG1,TABSYS           IS THIS SAM-SI           YM7550
         BNO   REPDCB10                 BRANCH IF NOT            Y02049
*
REPDCB04 EQU   *
*
         TM    TABFLG1,TABLAST          TEST FOR LAST ENTRY
         BO    ENDUP                    YES - BRANCH
*
         B     REPDCB01                 GO TEST TABL ENTRY
REPDCBA4 CLC   1(3,CTABLR),RSCKDCB+1    IS IT RESTART DATA SET  ZA00128
         BNE   REPDCB04                 BRANCH IF NOT           ZA00128
         L     DCBR,TABDCBAD-1          GET DCB ADDR            ZA00128
         MVC   DCBFDAD,RSBDCB+DCBFDAD-IHADCB  UPDATE DCBFDAD    ZA00128
         B     REPDCB04                 BR TO GET NEXT ENTRY    ZA00128
*
REPDCB10 EQU   *
*
*********************************************************************
*                                                                     *
******** DEVICE = DA, ORGN = PS, PO, OR EXCP                          *
*                                                                     *
******** THIS SECTION OF CODE BUILDS THE WORKAREA FOR READING         *
*        IN THE DSCB FOR DATA SETS WHICH MIGHT REQUIRE A PARTIAL      *
*        RELEASE                                                      *
*                                                                     *
*********************************************************************
*
         XC    UCBAD,UCBAD              ZERO-UCB FILE-MULT VOL  ZA02895
         NI    TABFLG5,X'FD'            CLEAR MULTI-VOL BIT     ZA02895
         SR    WRKR2,WRKR2              CLEAR WRKR2              Y02076
         LA    WRKR1,DSECTSIZ           GET SIZE OF FORECORE     Y02076
         SRL   WRKR1,2                  DIVIDE BY 4              Y02076
         LR    WRKR3,UCBR               BEGIN ADR OF FORECORE    Y02076
REPDCB12 EQU   *                        INSTR MUST FOLLOW        Y02076
         ST    WRKR2,D0(WRKR3)          CLEAR 4 BYTES            Y02076
         LA    WRKR3,D4(WRKR3)          INCR TO NEXT 4 BYTES     Y02076
         BCT   WRKR1,REPDCB12           BR BACK UNTIL ALL CLEAR  Y02076
         BAL   WRKR5,BLDCCWS            BRANCH TO BUILD CCW LIST SBRTN
*
         LA    WRKR5,REPDCB22           SET UP FOR BYPASS        A29797
*
REPDCB20 EQU   *
*
*********************************************************************
*
******** READ THE DSCB
*
*********************************************************************
*
         EXCP  DXIOB
*
*********************************************************************
*
******** WAIT FOR COMPLETION OF READ
*
*********************************************************************
*
         WAIT  ,ECB=DXECB
*
         TM    DXECB,IOERROR            TEST FOR PERM I/O ERROR
         BZ    REPDCB68                 BRANCH IF ERROR           M3251
*
         BR    WRKR5                    BRANCH BACK TO CALLER    A29797
*
*********************************************************************
*
******** THE DSCB HAS BEEN SUCCESSFULLY READ
*
*********************************************************************
*
******** ******     ***** *****  ********  ************     ***********
*                   -UPDATE PP CHECKPOINT DCB-                        *
*                                                                     *
* AT RESTART THE FULL DISK ADDR AND TRK BALANCE IN THE PP DCB MUST BE *
* UPDATED.THE FULL DISK ADDR FROM THE CHKPT DCB IN THE RESTART WKAREA *
* AND THE TRK BALANCE FROM THE DSCB.                                  *
******** ******     ***** *****  ********  ************     ***********
*
REPDCB22 EQU   *                                                 A29797
         MVC   DXCCW4(44),DXDSCB        SAVE KEY OF F1          YA00279
         MVC   DXDSCB,DXDSCB+44         REPOS DATA PORTION      YA00279
         CLI   DSCFMTID,X'F1'           IS IT FORMAT1 DSCB       Y02049
         BNE   REPDCB68                 BR IF NOT,ERR072         Y02049
         CLC   1(3,CTABLR),RSCKDCB+1    IS THIS THE CHKPT DCB
         BNE   REPDCB24                 BRANCH IF NO             A29797
*
         MVC   DCBFDAD,RSBDCB+DCBFDAD-IHADCB UPDATE PP DISK ADDR A29797
*
*              SET UP ECB TO BE POSTED BY SVC 25'S EXCP.
*              THE IOB, LAST USED DURING CHECKPOINT, POINTS TO THE OLD
*              CHECKPOINT DECB, WHICH IS NOT THE DECB FOR RESTART.
*
         L     WRKR6,DCBIOBA            ADDR NORMAL IOB PREFIX   A29797
*
         TM    DCBCIND2,CIND2PCI        TEST IF CHAINED SCHEDULE A29797
         BZ    REPDCB23                 BRANCH IF NO             A29797
*
         L     WRKR6,DCBIOBAD           ADDR CH SCHD IOB PREFIX  A29797
         LA    WRKR6,8(WRKR6)           ADJUST TO NORMAL IOB PFX A29797
*
REPDCB23 EQU   *                                                 A29797
         LA    WRKR1,RSECB1             ADDR OF ECB TO BE POSTED A29797
         ST    WRKR1,IOBECBPT-IOBFLAG1+8(WRKR6)  PUT ADDR IN IOB A29797
*
         LA    WRKR2,0(DCBR)            LOAD PP DCB ADDR FOR SVC A29797
         SVC   TKBAL                    ISSUE TRACK BALANCE SVC  A29797
*
REPDCB24 EQU   *
*
         CLI   DSCFILTY,FILETYPE        IS FILE TYPE BYTE EQ ZEROS
         BE    REPDCB2A                 YES - BRANCH
         TM    TABDSORG,DA              IS IT BDAM              ZA02895
         BO    REPDCB2A                 YES-DON'T UPDATE DSORG  ZA02895
*
         MVC   TABDSORG(1),DSCFILTY     OVERLAY TABL DS ORGN BYTE
*
REPDCB2A EQU   *
*
         L     DEBR,DCBDEBAD            POINT TO DEB
         IC    DSCNTR,DSCNOEXT          GET NUMBER OF DSCB EXTS   M3251
         CLI   DSCEXTYP,X'40'           USER LABELS PRESENT       M3251
         BNE   REPDCB2B                 NO, BRANCH                M3251
         LA    DSCNTR,1(0,DSCNTR)       ALLOW FOR USER LABEL EXT  M3251
REPDCB2B CLI   DSCNEXT+4,X'00'          IS A DSCB EXTN PRESENT    M3251
         BE    REPDCB25                 NO, BRANCH                M3251
*
         LA    WRKR6,DXJBF              POINT TO THE JFCB READ AREA
         ST    WRKR6,DXCCW3             STORE IN CCW 3
         MVI   DXCCW3,READKND           SET CCW TO READ KEY AND DATA
         MVI   DXCCW3+7,LENGTH          SET AMOUNT TO BE READ = 140
         MVC   DXDAADDR+3(5),DSCNEXT    MOVE CCHHR OF F3 DSCB TO IOB
*
         BAL   WRKR5,REPDCB20           BRANCH (WITH LINK) TO READ F3
*
         CLI   DS3FMTID,X'F3'      IS THIS A FORMAT 3 DSCB?      Y02049
         BNE   REPDCB68            BRANCH IF NOT, ERROR 72       Y02049
         EJECT
REPDCB25 EQU   *
*
*        THIS ROUTINE WILL COMPARE THE EXTENTS IN THE DEB TO     Y02049
*        THOSE IN THE DSCB(S) FOR THIS DATA SET.  IF THE         Y02049
*        EXTENTS ARE ALL EQUAL, THE NEXT DATA SET IS CHECKED.    Y02049
*
*        IF THE DEB EXTENTS ENCOMPASS A GREATER NUMBER OF        Y02049
*        TRACKS IN THE SAME DISK SPACE, THE DEB IS COMPRESSED.   Y02049
*
*        IF THE DSCB HAS A GREATER NUMBER OF TRACKS IN THE       Y02049
*        SAME DISK SPACE, PARTIAL RELEASE IS CALLED TO RELEASE   Y02049
*        THE SPACE ACQUIRED AFTER CHECKPOINT.                    Y02049
*
*        IF THE EXTENTS ARE NOT IN THE SAME DISK SPACE, AN       Y02049
*        ERROR CONDITION IS RAISED.                              Y02049
*
*****************
*
*        ADJUST POINTERS FOR FIRST EXTENT COMPARISON             Y02049
*
         STC   DSCNTR,EXTNO             SAVE NO. OF DSCB EXTENTS  M3251
         LA    WRKR2,DEBBASND      GET FIRST DEB EXTENT          Y02049
         USING DEBDASD,WRKR2                                     Y02049
         MVC   UCBAD+1(3),DEBUCBAD+1  SAVE UCB ADDR             ZA02895
         LA    WRKR3,DSCEXTYP      GET FIRST DSCB EXTENT         Y02049
         USING DSCEXTYP,WRKR3                                    Y02049
         LA    WRKR6,DSCEXTLN(,WRKR3) GET NEXT DSCB EXTNT PTR    Y02049
         CLI   DSCEXTYP,ULEXTNT    IS THIS A USER LABEL EXTNT?   Y02049
         BNE   REPDCB30            NO, BYPASS INCRIMENTING       Y02049
         LR    WRKR3,WRKR6         INCREMENT TO FIRST USER EXTNT Y02049
         LA    WRKR6,DSCEXTLN(,WRKR6) GET NEXT DSCB EXTNT PTR    Y02049
*
REPDCB30 EQU   *                   INSTR MUST FOLLOW             Y02049
*
*        CHECK THE CASE WHERE THE DEB, DSCB, OR BOTH MIGHT       Y02049
*        HAVE ZERO EXTENTS.                                      Y02049
*
         SR    DSCNTR,DSCNTR       ZERO OUT REGISTER             Y02049
         IC    DSCNTR,DEBNMEXT     GET NO. OF EXTENTS IN DEB     Y02049
         CLI   DSCNOEXT,X'00'      ARE THERE ANY DSCB EXTNTS?    Y02049
         BNE   REPDCB31            YES, CHECK DEB                Y02049
         LTR   DSCNTR,DSCNTR       ARE THERE ANY DEB EXTENTS?    Y02049
         BZ    REPDCB04            NO, GET NEXT TABL ENTRY       Y02049
         B     REPDCB40            NO, COMPRESS DEB              Y02049
*
REPDCB31 EQU   *                   INSTR MUST FOLLOW             Y02049
*
         LTR   DSCNTR,DSCNTR       ARE THERE ANY DEB EXTENTS?    Y02049
         BZ    REPDCB50            NO, DO PARTIAL RELEASE        Y02049
         B     REPDCB32                 GO COMPARE EXTNTS       ZA02895
*
*
*  PREPARE TO READ IN THE F1 DSCB OF THE NEXT VOLUME            ZA02895
*  VIA THE VTOC TTR CONTAINED IN THE UCB                        ZA02895
*
         DROP  WRKR3                                            ZA02895
REPDC32A OI    TABFLG5,X'02'            SET MULTI VOL FLAG      ZA02895
         L     WRKR3,UCBAD              GET UCB ADDR            ZA02895
         USING UCBOB,WRKR3                                      ZA02895
         L     WRKR1,UCBVTOC            GET TTR OF VTOC         ZA02895
         SRL   WRKR1,8                  RIGHT JUSTIFY TTR0      ZA02895
         BCTR  WRKR1,0                  DECR BY 1 FOR SEEK      ZA02895
         SLL   WRKR1,8                  LEFT JUSTIFY TTR0       ZA02895
         XC    VTOCCHHR(8),VTOCCHHR     CLEAR FIELD FOR CCHHR   ZA02895
         STM   WRKR2,WRKR6,DXDSCB+DSECTSIZ    SAVE REGS         ZA02895
         LA    TIOTR,DXDSCB+DSECTSIZ    SAV REG ACROSS CALL     ZA02895
         ST    TIOTR,REG6SAV            SAVE REG 6              ZA02895
         LA    WRKR2,DXDEB              PT TO WORK AREA DEB     ZA02895
         L     WRKR6,CVTPTR             GET CVT ADDR            ZA02895
         LA    DCBR,VTOCCHHR            LOCATION OF RESULTS     ZA02895
         L     WRKR6,CVTPCNVT-CVTMAP(WRKR6) CNVRT RTN ADR       ZA02895
         BALR  WRKR5,WRKR6              CONVERT TO CCHHR        ZA02895
         LM    WRKR2,WRKR6,0(TIOTR)     RESTORE REGS            ZA02895
         BAL   WRKR5,BLDCCWS            SET CCWS FOR READ       ZA02895
         L     TIOTR,REG6SAV            RESTORE REG 6           ZA02895
         LM    WRKR2,WRKR6,0(TIOTR)     RESTORE REGS            ZA02895
         LR    TIOTR,WRKR2              SAVE R1 ACROSS CALL     ZA02895
         MVC   DXDAADDR+3(5),VTOCCHHR+3 SET VTOC CCHHR         @ZA08861
         BAL   WRKR5,REPDCB20           GO READ F1 DSCB         ZA02895
         LR    WRKR2,TIOTR              RESTORE R1              ZA02895
*
*   CHECK FOR F3 DSCB - IF ONE EXISTS, READ IT IN               ZA02895
*   THEN SET UP PTRS TO PT TO FIRST EXTENT IN F1 DSCB           ZA02895
*
         CLI   DSCFMTID,X'F1'           IS IT FORMAT 1          ZA02895
         BNE   REPDCB68                 BR IF NOT,ERR072        ZA02895
         SR    WRKR1,WRKR1              CLEAR REG0              ZA02895
         IC    WRKR1,DSCNOEXT           GET NO. DSCB EXTS       ZA02895
         CLI   DSCNEXT+4,X'00'          IS THER A DSCB EXTNTION ZA02895
         BE    REPDC32C                 NO-BRANCH               ZA02895
         XC    DXCCW1(24),DXCCW1        CLEAR CCWS              ZA02895
         LA    WRKR6,DXDAADDR+3         PT TO CCHHR             ZA02895
         ST    WRKR6,DXCCW1             STORE IN SRCH CCW       ZA02895
         LA    WRKR6,DXCCW1             PT TO SEARCH CCW        ZA02895
         ST    WRKR6,DXCCW2             STORE IN TIC CCW        ZA02895
         LA    WRKR6,DXJBF              PT TO JFCB READ IN AREA ZA02895
         ST    WRKR6,DXCCW3             ST IN READ DATA CCW     ZA02895
         OC    DXCCW1(24),CCWLIST       OR IN CCWS              ZA02895
         MVI   DXCCW3,READKND           SET CCW-(READ-KEY-DATA) ZA02895
         MVI   DXCCW3+7,LENGTH          SET LENGTH = 140        ZA02895
         MVC   DXDAADDR+3(5),DSCNEXT    MOVE IN CCHHR           ZA02895
         LR    TIOTR,WRKR2              SAVE REG 1              ZA02895
         BAL   WRKR5,REPDCB20           READ IN F3 DSCB         ZA02895
         LR    WRKR2,TIOTR              RESTORE REG 1           ZA02895
         CLI   DS3FMTID,X'F3'           IS IT FORMAT 3          ZA02895
         BNE   REPDCB68                 BR IF NOT,ERR072        ZA02895
REPDC32C LA    WRKR3,DSCEXTYP           POINT TO 1ST DSCB EXT   ZA02895
         LA    WRKR6,DSCEXTLN(,WRKR3)   GET NEXT DSCB EXT PTR   ZA02895
*
*     COMPARE THE LOW AND HIGH CCHH IN THE DSCB AND DEB         ZA02895
*
REPDCB32 EQU   *                        COMPARE DEB-DSCB EXTS   ZA02895
         USING DSCEXTYP,WRKR3                                   ZA02895
*        COMPARE THE LOW AND HIGH CCHH IN THE DSCB AND DEB       Y02049
*
         CLI   DSCEXTYP,NOEXTNT    IS THIS A VALID DSCB EXTENT?  Y02049
         BE    REPDCB40            NO, COMPRESS DEB              Y02049
         CLC   DEBSTRCC(D4),DSCLOWLM COMPARE LOW CCHH IN DEB     Y02049
*                                  TO DSCB                       Y02049
         BNE   REPDCB70            ERROR IF NOT EQUAL            Y02049
         CLC   DEBENDCC(D4),DSCUPPLM COMPARE HI CCHH IN DEB      Y02049
*                                  TO DSCB                       Y02049
         BE    REPDCB34            EQUAL, GO CHECK MORE EXTNTS   Y02049
         BH    REPDCB33            DEB IS HI, CHECK IF LAST      Y02049
*                                  DSCB EXTENT                   Y02049
*
*        THE DEB VALUE IS LOWER THAN THE DSCB                    Y02049
*
         LA    WRKR4,ONE           LOAD VALUE OF 1 IN WRK REG    Y02049
         CR    DSCNTR,WRKR4        IS THIS THE LAST DEB EXTNT?   Y02049
         BE    REPDCB50            YES, DO PARTIAL RELEASE       Y02049
         B     REPDCB70            NO, ERROR                     Y02049
*
REPDCB33 EQU   *                   INSTR MUST FOLLOW             Y02049
*
*        THE DEB VALUE IS HIGHER THAN THE DSCB                   Y02049
*
         LTR   WRKR6,WRKR6         NEXT DSCB EXTNT VALID?        Y02049
         BZ    REPDCB60            NO, COMPRESS DEB              Y02049
         CLI   EXTNTYP(WRKR6),NOEXTNT   IS THERE ANOTHER VALID   Y02049
*                                  DSCB EXTENT?                  Y02049
         BE    REPDCB60            NO, COMPRESS DEB              Y02049
         B     REPDCB70            YES, ERROR                    Y02049
*
REPDCB34 EQU   *                   INSTR MUST FOLLOW             Y02049
*
*        THE DEB AND DSCB VALUES ARE EQUAL                       Y02049
*
         BCT   DSCNTR,REPDCB35     BRANCH IF NOT LAST DEB EXTENT Y02049
         LTR   WRKR6,WRKR6         NEXT DSCB EXTNT PTR VALID?    Y02049
         BZ    REPDCB04            NO, GET NEXT TABL ENTRY       Y02049
         CLI   EXTNTYP(WRKR6),NOEXTNT   IS THERE ANOTHER VALID   Y02049
*                                  DSCB EXTENT?                  Y02049
         BNE   REPDCB50            YES, DO PARTIAL RELEASE       Y02049
         B     REPDCB04            NO, GET NEXT TABL ENTRY       Y02049
*
REPDCB35 EQU   *                   INSTR MUST FOLLOW             Y02049
*
*        THERE ARE MORE DEB EXTENTS, PREPARE TO COMPARE          Y02049
*        THE NEXT EXTENT                                         Y02049
*
         LA    WRKR2,DEBEXTLN(,WRKR2) POINT TO NEXT DEB EXTNT    Y02049
         LTR   WRKR6,WRKR6         MORE DSCB EXTENTS ?           Y02049
         BZ    REPDCB40            NO MORE DSCB EXTNTS, COMPRESS Y02049
         LR    WRKR3,WRKR6         GET NEXT DSCB EXTNT PTR       Y02049
         LA    WRKR6,DSCEXTLN(,WRKR6) INCREMENT 'NEXT EXTENT'    Y02049
*                                  POINTER                       Y02049
*
*        SEE IF THE 'NEXT EXTENT' IS IN THE FORMAT 1 DSCB        Y02049
*
         LA    WRKR4,DSCEXT2-DXDSCB(,UCBR)                       Y02049
*                                  GET ADDR OF LAST FMT 1 EXT.   Y02049
         CR    WRKR3,WRKR4         COMPARE FOR END OF FMT 1      Y02049
         BL    REPDCB32            LOW, CHECK NEXT EXTENT        Y02049
         OC    DSCEXTLN(D5,WRKR4),DSCEXTLN(WRKR4)                Y02049
*                                  IS THERE A FORMAT 3 DSCB?     Y02049
         BNZ   REPDCB36            YES, GO GET ADDRESS           Y02049
         SR    WRKR6,WRKR6         ZERO 'NEXT EXTENT' POINTER    Y02049
         B     REPDCB32            GO CHECK NEXT EXTENT          Y02049
*
REPDCB36 EQU   *                   INSTR MUST FOLLOW             Y02049
*
*        SEE IF THE 'NEXT EXTENT' IS IN THE FORMAT 3 DSCB        Y02049
*        KEY PORTION                                             Y02049
*
         CR    WRKR3,WRKR4         IS THIS LAST FMT 1 EXTENT?    Y02049
         BNE   REPDCB37            NO, CHECK IF LAST F3 KEY EXT  Y02049
         LA    WRKR6,F3KFIRST(,UCBR)  GET FIRST EXT IN F3 KEY    Y02049
         B     REPDCB32            GO CHECK NEXT EXTENT          Y02049
*
REPDCB37 EQU   *                  INSTR MUST FOLLOW              Y02049
*
*        SEE IF THE 'NEXT EXTENT' IS IN THE FORMAT 3 DSCB        Y02049
*        DATA PORTION                                            Y02049
*
*
         LA    WRKR4,F3KLAST(,UCBR)  GET LAST EXT IN F3 KEY      Y02049
         CR    WRKR3,WRKR4         COMPARE FOR END OF F3 KEY     Y02049
         BL    REPDCB32            LOW, CHECK NEXT EXTENT        Y02049
         BH    REPDCB38            HIGH, CHECK IF LAST F3 DATA   Y02049
*                                  EXTENT                        Y02049
         LA    WRKR6,F3DFIRST(,UCBR)  GET FIRST EXT IN F3 DATA   Y02049
         B     REPDCB32            GO CHECK NEXT EXTENT          Y02049
*
REPDCB38 EQU   *                   INSTR MUST FOLLOW             Y02049
*
         LA    WRKR4,F3DLAST(,UCBR)  GET LAST EXT IN F3 DATA     Y02049
         CR    WRKR3,WRKR4         COMPARE FOR END OF F3 DATA    Y02049
         BL    REPDCB32            LOW, CHECK NEXT EXTENT        Y02049
         SR    WRKR6,WRKR6         ZERO 'NEXT EXTENT' POINTER    Y02049
         B     REPDCB32            GO CHECK NEXT EXTENT          Y02049
REPDCB40 EQU   *                   INSTR MUST FOLLOW             Y02049
         CLC   UCBAD+1(3),DEBUCBAD+1  HAS UCB CHANGED           ZA02895
         BE    REPDCB41                 BR IF NO CHANGE         ZA02895
         MVC   UCBAD+1(3),DEBUCBAD+1    SAVE NEW UCB ADDR       ZA02895
         B     REPDC32A                 GO READ F1/F3 DSCB      ZA02895
         DROP  WRKR2,WRKR3                                      ZA02895
REPDCB41 TM    TABDSORG,DA         IS THIS A BDAM DATA SET ?     Y02049
         BO    REPDCB04            YES, DO NOT COMPRESS BDAM     Y02049
*                                  DEBS.                         Y02049
         BAL   WRKR5,REPDCB76      BRANCH TO UPDATE DEB SUBRTN   Y02049
*
*********************************************************************
*
******** NOW COMPRESS AND UPDATE THE DEB
*
*********************************************************************
*
         SR    WRKR4,WRKR4              CLEAR WRKR4
         SR    WRKR6,WRKR6              CLEAR WRKR6
         IC    WRKR4,DSCNOEXT           INSERT DSCB NO. OF EXTENTS
         IC    WRKR6,DEBNMEXT           INSERT DEB NO. OF EXTENTS
         STC   WRKR4,DEBNMEXT           UPDATE NO. EXTS. IN DEB
*
         SLL   WRKR4,4                  GET DSCNOEXT IN BYTES
         SLL   WRKR6,4                  GET DEBNMEXT IN BYTES
*
*********************************************************************
*                                                                     *
******** GET LENGTH OF THE ACCESS METHOD PORTION OF THE DEB SO THAT IT*
*        CAN OVERLAY THE EXTENTS TO BE DELETED, THUS COMPRESSING THE  *
*        DEB                                                          *
*                                                                     *
******** WRKR3 NOW CONTAINS LENGTH TO BE MOVED                        *
*                                                                     *
*********************************************************************
*
         LA    WRKR2,DEBSUCBA           GET ADDR OF START OF     Y02049
*                                       DEVICE DEPENDANT SECTION Y02049
         LA    WRKR6,0(WRKR2,WRKR6)     POINT WRKR6 TO START OF AM SEC
         LA    WRKR2,0(WRKR4,WRKR2)     POINT TO NEW AM START ADDR
         SR    WRKR3,WRKR3              CLEAR WRKR3
         IC    WRKR3,DEBAMLNG           INSERT ACC METHOD SEC LENGTH
         SR    WRKR4,WRKR4              CLEAR REGISTER          ZA00609
         IC    WRKR4,DEBNMSUB           GET NO. OF SUBR.        ZA00609
         SLL   WRKR4,1                  MULT. BY 2 FOR BYTES    ZA00609
         AR    WRKR3,WRKR4              SPACE FOR SUBR IDS      ZA00609
         EX    WRKR3,CLOSEUP            EXECUTE THE MOVE
*
*********************************************************************
*
******** END OF DEB COMPEESSION AND RE-FORMATTING
*
*********************************************************************
*
         B     REPDCB04                 BRANCH TO PROCESS NEXT ENTRY
*
*********************************************************************
*                                                                     *
******** THE FOLLOWING ROUTINE IS ENTERED IF THE NO. OF EXTENTS IN    *
*        THE DSCB IS GREATER THAN THE NO. OF EXTENTS IN THE DEB.      *
*        THIS MEANS THAT ADDITIONAL DA SPACE WAS DYNAMICALLY ALLOCATED*
*        AFTER THE CHECKPOINT OCCURRED AND HENCE A PARTIAL RELEASE    *
*        OF THIS ADDITIONAL SPACE IS NECESSARY.                       *
*                                                                     *
*********************************************************************
*
REPDCB50 EQU   *                   INSTR MUST FOLLOW             Y02049
*
         TM    TABDSORG,DA         IS THIS A BDAM DATA SET ?     Y02049
         BO    REPDCB04            YES, DO NOT CALL PARTIAL      Y02049
*                                  RELEASE FOR BDAM DATA SETS    Y02049
*
         TM    DEBOPATB,OUTP       IS DATA SET OPEN FOR INPUT
         BZ    REPDCB70            YES - BR OUT
*
         LR    WRKR3,DEBR          GET DEB ADDR FOR CALC         Y02049
         LA    WRKR6,DEBPRFLN      GET LENGTH OF DEB PREFIX      Y02049
         SR    WRKR3,WRKR6         POINT TO DEB PREFIX           Y02049
         USING DEBPREFX,WRKR3                                    Y02049
         L     WRKR3,DEBXTNP       POINT TO DEB EXTENSION        Y02049
         USING DEBXTN,WRKR3                                      Y02049
         TM    DEBXMCF1,DCBMRECP   IS THIS EXCP?                 Y02049
         BZ    REPDCB52                 NO - BRANCH
*
         TM    DEBXMCF2,DCBMR5WD+DCBMR4WD                        Y02049
*                                  TEST FOR DA DEV DEPENDANT SEC Y02049
         BZ    REPDCB70                 BRANCH IF NOT PRESENT
         DROP  WRKR3                                             Y02049
*
REPDCB52 EQU   *
*
*********************************************************************
*                                                                     *
******** CONVERT RTN INTERFACE (CCHHR TO TTR) FOLLOWS                 *
*                                                                     *
*********************************************************************
*
         STM   WRKR2,WRKR6,DXDSCB+DSECTSIZ     SAVE REGS         Y02076
         L     WRKR2,CVTPTR             INITIALIZE CVT REGISTER   M3251
         USING CVT,WRKR2                                         Y02049
         L     WRKR6,CVTPRLTV           POINT TO CONVERT RTN
         L     WRKR2,DCBDEBAD           POINT TO DEB
         LA    DCBR,DCBFDAD             POINT TO FULL DISK ADDR
         BALR  WRKR5,WRKR6              BR AND LINK TO CONVERT RTN
*
         LM    WRKR2,WRKR6,DXDSCB+DSECTSIZ      RESTORE REGS     Y02076
         ST    WRKR1,DXDAADDR           STORE TTR IN WORKAREA
*
*********************************************************************
*                                                                     *
******** MODIFY LAST TRACK USED FIELD IN DSCB                         *
*                                                                     *
*********************************************************************
*
         MVC   DSCLSTAR(3),DXDAADDR     MOVE IN TTR
         MVC   DSCLSTAR+3(2),DCBTRBAL   MOVE IN REMAINING BYTES-LASTTRK
         MVC   DXDSCB+DSECTSIZ(8),DCBFDAD    SAVE FULL DISK ADDR Y02076
*
         SR    WRKR3,WRKR3              CLEAR WRKR3
         IC    WRKR3,DEBNMEXT           INSERT NO. OF EXTENTS
         BCTR  WRKR3,0                  DECREMENT COUNT BY 1
         STC   WRKR3,DCBFDAD            STORE NO. XTNTS-1 IN 'M'
         SLL   WRKR3,4                  MULT BY 16
         LA    TCBR,DEBBASND            ADR DASD SEC             Y02049
         LA    TCBR,DEBBASND            GET ADDR OF DASD SECTION Y02049
         USING DEBDASD,TCBR                                      Y02049
         USING DEBDASD,TCBR                                      Y02049
         LA    WRKR6,DEBENDCC(WRKR3)    POINT TO ENDING CCHH IN LST EXT
         MVC   DCBFDAD+3(4),0(WRKR6)    MOVE IN CORRECT CCHH
         DROP  TCBR                                              Y02049
*
*********************************************************************
*                                                                     *
******** THE NEXT 2 INSTRUCTIONS SET ON THE HIGH ORDER BIT IN DEBR SO *
*        THAT THE PARTIAL RELEASE MODULES WILL RETURN CONTROL         *
*        BACK TO THIS MODULE AND NOT RETURN TO CLOSE.  DEBR IS THEN   *
*        POINTED AT THE CLOSE-TYPE WORKAREA EXPECTED BY PARTIAL REL.  *
*                                                                     *
*********************************************************************
*
         LA    DEBR,1                   TURN ON LOW ORDER BIT
         SLL   DEBR,31                  SHIFT TO HIGH ORDER POSITION
         OR    DEBR,UCBR                POINT DEBR AT CLOSE WORKAREA
         MVC   JFCBDSNM,DXCCW4          PART. REL. EXPECTS KEY  YA00279
*                                       PORTION OF F1 AT THIS   YA00279
*                                       POSIT. IN W.A.          YA00279
         OI    TABFLG2-TABL(TABLR),TABSW   SET ON PAR RLSE SWITCH
         L     TCBR,RSTCBAD             LOAD TCB ADDRESS
         USING TCB,TCBR                                          Y02049
         L     WRKR2,TCBTIO             LOAD TIOT ADDRESS
         LH    TIOTR,DCBTIOT            LOAD TIOT OFFSET
         LR    TCBR,BUFR                SAVE CONTENTS OF BUFR
         L     BUFR,16(WRKR2,TIOTR)     LOAD SUB UCB ADDRESS
         B     XCTL                     BRANCH TO XCTL RTN
*
REPDCB54 EQU   *
*
*********************************************************************
*                                                                     *
******** UPON RE-ENTRY OF THIS MOD FROM THE PARTIAL RELEASE ROUTINE   *
*        CONTROL IS PASSED TO THIS ROUTINE FOR POST-PARTIAL RELEASE   *
*        PROCESSING.                                                  *
*                                                                     *
*********************************************************************
*
         LR    BUFR,TCBR                RESTORE BUFR
         NI    TABFLG2-TABL(TABLR),X'FF'-TABSW RESET PAR REL SW
         MVC   DCBFDAD(D8),DXDSCB+DSECTSIZ  RESTORE FULL DSK ADR Y02076
         LTR   WRKR2,WRKR2              IS THERE AN ERROR RETURN CODE
         BNZ   REPDCB68                 BR IF ERR PRESENT       YA00279
         B     REPDCB04                 GO GET NEXT ENTRY       YA00279
REPDCB60 EQU   *
*
         TM    TABDSORG,DA         IS THIS A BDAM DATA SET ?     Y02049
         BO    REPDCB04            YES, DO NOT UPDATE BDAM DEBS  Y02049
*
         BAL   WRKR5,REPDCB76           BRANCH TO DEB UPDATE SUBRTN
*
         B     REPDCB04                 GET NEXT TABL ENTRY
*
REPDCB68 EQU   *
*
***********************************************************************
*                                                                     *
******** THIS ROUTINE IS ENTERED FOR ANY I/O ERROR FOR DSCB (FORMAT   *
*        1 OR FORMAT 3 ).                                             *
*                                                                     *
***********************************************************************
*
         MVI   RSRETCOD+1,ERR072        SET ERROR RETURN CODE  @ZSUT222
         B     SETV05B                  SET UP TO XCTL TO V05B   M0187
*
REPDCB70 EQU   *
*
         MVI   RSRETCOD+1,ERR076        SET ERR CODE - XTENTS  @ZSUT222
*                                       OR LAST TTR'S UNEQUAL
*                                       DEB VS DSCB
SETV05B  EQU   *                                                 M0187
         MVC   RSREGSAV(8),MODID        SAVE NAME OF MODULE    @ZSUT222
*                                       THAT DETECTED ERROR    @ZSUT222
         STM   0,15,RSREGSAV+8          SAVE CURRENT REGISTERS @ZSUT222
         LA    WRKR3,C'V'               SET XCTL TO V05B         M0187
         B     PREXCTL                  GO SET FOR XCTL          M0187
*
ENDUP    EQU   *
*
         LA    WRKR3,C'T'               SET UP TO XCTL TO T05B   M0187
         CLI   RSRETCOD+1,X'FF'         SHOULD ISAM BE ENTERED   A25984
         BNE   PREXCTL                  GO SET IGC XCTL          M0187
         LA    WRKR3,C'W'               SET XCTL TO W05B         M0187
*
PREXCTL  EQU   *                                                 M0187
         LA    TIOTR,DXDSCB+464         SET WORK AREA FOR XCTL   M0187
         MVC   0(8,TIOTR),IGC           MOVE IGC MODULE FOR XCTL M0187
FOUR     EQU   *+2                                               M0187
         STC   WRKR3,4(TIOTR)           ADJUST TO T, W, OR V05B  M0187
         B     NOWXCTL                  GO XCTL                  M0187
*
XCTL     EQU   *
*
         LA    TIOTR,DXDSCB+DSECTSIZ+8  SETUP WORKAREA FOR XCTL  YM6533
         MVC   0(8,TIOTR),IGG           SET XCTL TO IGG MODULE   M0187
*
NOWXCTL  EQU   *                                                 M0187
EIGHT    EQU   *+2                                               M0187
         LA    WRKR6,8(TIOTR)           INITIALIZE WRKR6 (REG 15)
*
*********************************************************************
         LR    WRKR2,BUFR               POINT REG 1 TO THE RESTART W/A
*********************************************************************
*
         XCTL  EPLOC=(TIOTR),SF=(E,(15))
*
*********************************************************************
*
******** THIS IS THE START OF THE DEB COMPRESSION AND MODIFICATION
*        SUBROUTINE
*
*********************************************************************
*
REPDCB76 EQU   *
*
*********************************************************************
*                                                                     *
*        AT ENTRY TO THIS ROUTINE, REGISTER CONTENTS ARE:        Y02049
*          WRKR2 = POINTER TO THE LAST DEB EXTENT (DEBDASD)      Y02049
*          WRKR3 = POINTER TO THE LAST DSCB EXTENT (DSCEXTYP)    Y02049
*                                                                     *
*********************************************************************
*
         SR    WRKR4,WRKR4              CLEAR WRKR4
         IC    WRKR4,DEBNMEXT           INSERT NO OF EXTENTS INTO WRKR4
         BCTR  WRKR4,0                  DECREMENT COUNT BY 1
         STC   WRKR4,DXDSCB+DSECTSIZ    STORE M IN WORKAREA      Y02076
         LA    WRKR4,DEBENDCC-DEBDASD(,WRKR2)                    Y02049
*                                  GET PTR TO DEB ENDING CCHH    Y02049
         LA    WRKR3,DSCUPPLM-DSCEXTYP(,WRKR3)                   Y02049
*                                  GET PTR TO DSCB ENDING CCHH   Y02049
*
***********************************************************************
*                                                                     *
******** THE NEXT ROUTINE CONVERTS BOTH MBBCCHHR'S TO TTR'S AND       *
*        COMPARES TO SEE IF DEBENDCC IS GREATER THAN DSCB ENDING CCHH *
*        IF IT IS AND DS IS OPEN FOR INPUT AN ERROR CONDITION EXISTS  *
*                                                                     *
***********************************************************************
*
         STM   WRKR1,WRKR6,DXDSCB+DSECTSIZ+D16 SAVE ALL REGS     Y02076
*
         L     WRKR2,CVTPTR             GET CVT ADDRESS
         L     WRKR6,CVTPRLTV           GET CONVERT (MBB TO TTR) RTN AD
         LR    WRKR2,DEBR               POINT WRKR2 TO DEB
         LA    DCBR,DXDSCB+DSECTSIZ     POINT TO DEB MBBCCHHR    Y02076
*
         MVC   DXDSCB+DSECTSIZ+D3(D4),D0(WRKR4) MOVE CCHH TO WA  Y02076
         LR    DEBR,WRKR6               SAVE CONVERT RTN ADDR
         BALR  WRKR5,WRKR6              GO TO CONVERT RTN
*
         LR    TCBR,WRKR1               SAVE DEB XTN TTR
         L     WRKR3,DXDSCB+DSECTSIZ+D64     REINITIALIZE WRKR3  Y02076
         MVC   DXDSCB+DSECTSIZ+D3(D4),D0(WRKR3) DSCB 'CCHH' TO WAY02076
*
         LR    WRKR6,DEBR               RESTORE CONVERT RTN ADDR
         BALR  WRKR5,WRKR6              GO TO CONVERT RTN
*
         SRL   TCBR,16                  GET  NUMBER OF TRKS  DSCB
         SRL   WRKR1,16                 GET  NUMBER OF TRKS  DEB
         SR    TCBR,WRKR1               SUB DSCB TTR FROM DEB TTR
*
         LR    WRKR1,TCBR               PUT DIFF IN WRKR1 (REG 0)
         LM    WRKR2,WRKR6,DXDSCB+DSECTSIZ+D20   ALL BUT REG 0   Y02076
*
         BZ    CONTINUE                 BR IF EQ TO CONTINUE
*
         TM    DEBOPATB,OUTP            TEST FOR OPEN FOR INPUT
         BZ    REPDCB70                 YES - BR TO ERROR RTN
*
CONTINUE EQU   *
*
*********************************************************************
*
******** DIFFERENCE IN TTRS BETWEEN DSCB AND DCB IN WRKR1 (R0)
******** DEB  ENDCCHH IS POINTED TO BY WRKR4 (RD)
******** DSCB ENDCCHH IS POINTED TO BY WRKR3 (RC)
*
*********************************************************************
*
         MVC   0(4,WRKR4),0(WRKR3)      UPDATE ENDING CCHH IN LAST DEB
*                                       EXTENT FIELD
         LH    WRKR6,4(WRKR4)           OLD NO. TRKS IN EXT
         SR    WRKR6,WRKR1              COMPUTE NEW AMT OF TRKS IN EXT
         STH   WRKR6,4(WRKR4)           SAVE BACK IN DEB EXT FLD
*
         BR    WRKR5                    EXIT FROM SBRTN TO REPDCB60 OR
*                                       REPDCB40 BAL+4           Y02049
*
*********************************************************************
*
******** END OF UPDATE DEB SUBROUTINE
*
***********************************************************************
*
BLDCCWS  EQU   *
*
***********************************************************************
*                                                                     *
***** THIS SUBRTN GETS THE DISK ADDR OF THE DSCB AND PUTS IT INTO THE *
*     WORKAREA AND THEN FINISHES CONSTRUCTING THE CCW LIST            *
*                                                                     *
******** WORKAREA IS CLEAR, SO BUILD CONTROL BLOCKS FOR READING DSCB'S*
*                                                                     *
***********************************************************************
*
         MVI   DXDEBNTR,X'7F'           SET MAX NO. TRKS         M0187
         MVI   DXDEBNTR+D1,DF                                   Y02076
*
         LA    WRKR1,DXDCB              GET ADDR OF RESTART DCB
         ST    WRKR1,DXDEBDCB           STORE IT IN DEB
         MVI   DXDEBID,DEBID            STORE ID FOR DEB
         TM    TABFLG5,X'02'            IS IT A MULTIVOL NTRY   ZA02895
         BZ    BLDCCWS1                 BRANCH IF NO            ZA02895
         ST    WRKR3,DXDEBUCB           UCB INTO WA DEB         ZA02895
         MVC   DXDEBBIN(2),DEBBINUM-DEBUCBAD(WRKR2) BIN# TO DEB ZA02895
         B     BLDCCWS2                 BRANCH TO CONTINUE      ZA02895
BLDCCWS1 L     DCBR,TABDCBAD-1          GET USER'S DCB ADDR     ZA02895
         L     DEBR,DCBDEBAD            POINT TO USER'S DEB
         USING DEBBASIC,DEBR                                     Y02049
         L     WRKR3,DEBSUCBA      LOAD USER'S UCB ADDRESS       Y02049
         ST    WRKR3,DXDEBUCB      STORE USER'S UCB ADDRESS      M0187
         LA    TCBR,DEBBASND       GET ADR OF DASD SECTION       Y02049
         USING DEBDASD,TCBR                                      Y02049
         MVC   DXDEBBIN(2),DEBBINUM     BIN NUMBER TO DEB
         DROP  TCBR                                              Y02049
*
BLDCCWS2 EQU   *                        CONTINUE                ZA02895
         LA    WRKR2,DXDEB              GET DEB ADDR
         ST    WRKR2,DXDCBDEB           STORE IN DCB
*
* TO READ VOLUME LABEL AND CONVERT VTOC ADDRESS TO TTR, DEB EXTENTS
* MUST BE SET TO COVER ENTIRE VOLUME.  LOW CCHH IS ZERO, AND HIGH
* CC+1 IS OBTAINED FROM SYSTEM DEVICE CHARACTERISTICS TABLE.
*
         USING SRT,WRKR3                                         M0187
         L     WRKR2,CVTPTR        LOAD CVT POINTER              M0187
         L     WRKR1,CVTXAPG            ADR- APP VECT TBLE       Y02076
         ST    WRKR1,DXDEBAPP           STORE IN DEB             Y02076
         L     WRKR2,CVTZDTAB      LOAD DEVTAB POINTER           M0187
         DROP  WRKR2                                             M0187
         IC    WRKR6,UCBTBYT4      GET DEVICE TYPE BYTE          M0187
         LA    WRKR1,X'0F'         GENERATE MASK                 M0187
         NR    WRKR6,WRKR1         USE LOW ORDER BITS FOR INDEX  M0187
         IC    WRKR6,0(WRKR6,WRKR2) PICK UP NEXT INDEX           M0187
         AR    WRKR2,WRKR6         POINT TO DEVTAB ENTRY         M0187
         XC    DXDEBSCC(8),DXDEBSCC CLEAR DEB EXTENTS            M0187
         MVC   DXDEBECC,0(WRKR2)   SET HIGH CYL ADDRESS          M0187
         MVI   DXDEBUSR,NMEXTS1         SET NO. OF EXTENTS       Y02076
         MVI   DXDEBAPP,EXSCLS1         SET DEB EXTENT SCALE     Y02076
         MVI   DXDEBMOD,DVMODS1         SET FILE MASK            Y02076
*
*
*********************************************************************
*                                                                     *
******** COMPLETE IOB                                                 *
*                                                                     *
*********************************************************************
*
         MVI   IOBFLAG1,UNREL           MAKE I/O UNRELATED
         LA    WRKR2,DXDCB              GET DCB ADDR
         ST    WRKR2,IOBWGHT            STORE IN IOB
         LA    WRKR2,DXECB              GET ECB ADDR
         ST    WRKR2,IOBECBPT           STORE IN IOB
         LA    WRKR2,DXCCW              GET CCW STRING ADDR
         ST    WRKR2,IOBSIOCC           STORE IN IOB
*
*********************************************************************
*                                                                     *
******** GET THE DSCB ADDR AND PUT IT INTO THE CCW STRING             *
*                                                                     *
*********************************************************************
*
         TM    TABFLG5,X'02'            IS IT MULTI-VOL D/S     ZA02895
         BZ    BLDCCWS5                 BRANCH IF YES           ZA02895
         XC    DXCCW1(48),DXCCW1        CLEAR CCWS              ZA02895
         LA    WRKR6,VTOCCHHR+3         SEARCH ADDR             ZA02895
         ST    WRKR6,DXCCW1             SET IN SEARCH CCW       ZA02895
         LA    WRKR6,DXCCW1             GET TIC TO ADR          ZA02895
         ST    WRKR6,DXCCW2             STORE IN TIC CCW        ZA02895
         LA    WRKR6,DXCCW3             LOAD READ CNT CCW ADR   ZA02895
         ST    WRKR6,DXCCW5             ST IN TIC-AFTER SRCHKEY ZA02895
         L     WRKR6,TABJFCB-1          GET JFCB PTR            ZA02895
         LA    WRKR6,0(WRKR6)           CLEAR HI ORDER BYTE     ZA02895
         LA    WRKR6,16(WRKR6)          LOAD @ OF KEY(DSN)      ZA02895
         ST    WRKR6,DXCCW4             STO IN SRCHKEY CCW      ZA02895
         LA    WRKR6,DXDSCB             GET DSCB BUFFER ADR     ZA02895
         ST    WRKR6,DXCCW6             ST IN READ CNT CCW      ZA02895
         LA    WRKR6,RSRDCNT            BUF @ FOR READ COUNT    ZA02895
         ST    WRKR6,DXCCW3             ST IN CCW3              ZA02895
         OC    DXCCW1(48),DSCBCP        OR IN CHAN PROG         ZA02895
         BR    WRKR5                    BR BACK TO CALLER       ZA02895
BLDCCWS5 SH    DEBR,SIXTEEN   POINT TO BBCCHHR, FRONT OF DEB    ZA02895
         MVC   DXDAADDR+1(7),1(DEBR)    MOVE DA ADDR TO WORKAREA
*
         XC    DXCCW(24),DXCCW          CLEAR THE CHAN PROG AREA
         LA    WRKR6,DXDAADDR+3         POINT TO CCHHR
         ST    WRKR6,DXCCW1             STORE IN SEARCH INSTRUCTION
         LA    WRKR6,DXCCW1             POINT TO SEARCH INSTRUCTION
         ST    WRKR6,DXCCW2             STORE IT IN TIC INSTRUCTION
         LA    WRKR6,DXDSCB             POINT TO TO-ADDR OF DSCB
         ST    WRKR6,DXCCW3             STORE IT IN READ DATA INSTR.
         OC    DXCCW(24),CCWLIST        OR IN CHANNEL PROGRAM
         BR    WRKR5                    BRANCH OUT OF SBRTN VIA WRKR5
*
CLOSEUP  MVC   0(0,WRKR2),0(WRKR6)      MOVE UP THE ACC METH SEC
*                                                                     *
*********************************************************************
*                                                                     *
*     CHANNEL PROGRAM USED BY REPI/O
*                                                                     *
*********************************************************************
*                                                                     *
         DS    0H                                                M0187
CCWLIST  DS    0CL24
         DC    X'3100000040000005'      SEARCH.
         DC    X'08000000'                                       M0187
SIXTEEN  DC    H'16'                                             M0187
TEN      DC    H'10'                                             M0187
         DC    X'0E0000000000008C'      READ                   YA00279
*   THE FOLLOWING CHANNEL PROGRAM IS USED TO SEARCH FOR         ZA02895
*   THE VOLUME VTOC, THEN SEARCH THE VTOC TO READ IN A F1 DSCB  ZA02895
*   GIVEN THE DATA SET NAME OF THE DATA SET AS A KEY            ZA02895
*                                                                     *
DSCBCP   DS    0CL48                    DSCB READ CHAN PROG     ZA02895
         DC    X'3100000040000005'      SEARCH ID =             ZA02895
         DC    X'0800000020000001'      TIC                     ZA02895
         DC    X'9200000060000008'      READ COUNT              ZA02895
         DC    X'A90000004000002C'      SEARCH = KEY            ZA02895
         DC    X'0800000020000001'      TIC                     ZA02895
         DC    X'8600000000000060'      READ DSCB               ZA02895
*                                                                     *
*********************************************************************
*                                                                     *
*     CONSTANTS USED IN REPI/O
*                                                                     *
*********************************************************************
*                                                                     *
IGC      DC    CL8'IGC0V05B'            RESTART XCTL MODULE      M0187
IGG      DC    CL8'IGG020P1'            PARTIAL RELEASE MODULE   M0187
MODID    DC    CL8'IGC0R05B'            MODULE ID              @ZSUT222
NMEXTS1  EQU   X'01'                    NO. OF EXTENTS           Y02076
EXSCLS1  EQU   X'04'                    DEB EXTENT SCALE         Y02076
DVMODS1  EQU   X'C0'                    FILE MASK                Y02076
PATCH    DC    XL((*-IGC0R05B)/20)'00'  20 PERCENT PATCH AREA   ZA00128
         EJECT
FORECORE DSECT
         IECDSECT
         EJECT
CVT      DSECT
         CVT
         EJECT
*
*
*   TASK CONTROL BLOCK
*
*
         CNOP  0,4
TCB      DSECT
TCBRBP   DS    F                       POINTER TO EXECUTING RB
TCBPIE   DS    F                       POINTER TO PROG. INTERRUPT EL.
TCBDEB   DS    F                       POINTER TO DEB QUEUE
TCBTIO   DS    F                       POINTER TO TIOT
TCBCMP   DS    F                       TASK COMPLETION CODE
TCBTRN   DS    F                       TESTRAN FIELD
TCBMSS   DS    F                       DATA BLOCK QUEUE ELEMENT POINTER
TCBPRTK  DS    CL1                     PROTECTION TAG
TCBFLGS  DS    FL5                     FLAG BYTES
TCBLMP   DS    CL1                     LIMIT PRIORITY
TCBDSP   DS    CL1                     DISPATCHING PRIORITY
TCBLLS   DS    F                       POINTER TO LOAD LIST
TCBJLB   DS    F                       POINTER TO JOBLIB DCB
TCBJSE   DS    F                       LIST OF INACTIVE PROGRAMS ADDR.
TCBGRS   DS    CL64                    GENERAL REGISTER SAVE AREA
TCBIDF   DS    CL1                     TCB IDENTIFIER FIELD
TCBFSA   DS    CL3                     POINTER TO 1ST PROB.PROG.SAVEAR
TCBTCB   DS    F                       NEXT TCB ON READY QUEUE POINTER
TCBTME   DS    F                       POINTER TO TIMER ELEMENT
         EJECT
         DCBD  DSORG=PS
         EJECT
*   DATA EXTENT BLOCK
         IEZDEB                                                  Y02049
         EJECT
TIOT     DSECT
         IEFTIOT1
         EJECT
SRT      DSECT
         IEFUCBOB
         EJECT
         IEEVRSWA  VER=3                OAS2 VERSION OF WA
UCBAD    EQU   RSERAS00                UCB FIELD FOR MULTI-VOLS ZA02895
VTOCCHHR EQU   RSERAS01                 01,02 -2 WDS FOR CCHHR  ZA02895
RSRDCNT  EQU   RSERAS03                 03,04 -2 WDS FOR COUNT  ZA02895
REG6SAV  EQU   RSERAS05                 SAVE AREA FOR REG6      ZA02895
         EJECT
         IHJDSTAB                                               Y02076
EXTNO    EQU   TABFLG5                                            M3251
DS3FMTID EQU   DXJBF+44            FORMAT 3 ID BYTE              Y02049
DSCEXTLN EQU   DSCEXT2-DSCEXT1     LENGTH OF EXTENT IN DSCB      Y02049
F3KLAST  EQU   DXJBF-FORECORE+DSCBEX4-DXDSCB3K                   Y02049
*                                  FORMAT 3 KEY LAST EXTNT       Y02049
F3KFIRST EQU   DXJBF-FORECORE+DSCBEXTY-DXDSCB3K                  Y02049
*                                  FORMAT 3 KEY FIRST EXTNT      Y02049
F3DFIRST EQU   F3KLAST+DSCEXTLN+DSCBEX5-DSCBFMID                 Y02049
*                                  FORMAT 3 DATA FIRST EXTNT     Y02049
F3DLAST  EQU   F3KLAST+DSCEXTLN+DSCBEXD-DSCBFMID                 Y02049
*                                  FORMAT 3 DATA LAST EXTNT      Y02049
         END
