*
         COPY  LCGASMSW
*
         TITLE 'IGC0D06C (IHJACP25) PRESERVE2 (DSDR)'
*
*
*   VS2 030 ADDS/DELETES/CHANGES
* C241000                                                      @ZA04367
* A315800,315818-315890                                        @ZA09126
*
* A115594-115958,290080-290400,496200-497600,602100-603400     @ZA07204
* A119912                                                      @ZA07204
* C118560,119075,119083,119655-119695,241000,395000-395600     @ZA07204
* C463992,464799,                                              @ZA07204
* D119467,119471,119475,119476,119486,119487,119490,119498     @ZA07204
* D119698,119718,119865-119866,509000,509500                   @ZA07204
*
* A464900-464909                                               @ZA09977
* C464919                                                      @ZA09977
* C240500,A725740                                              @ZA20785
* C689000                                                      @ZA30810
*
IGC0D06C CSECT
***********************************************************************
*
*FUNCTION/OPERATION   THE MAIN PURPOSE OF THIS ROUTINE IS TO WRITE OUT
*                   DDNT AND DSDR RECORDS TO THE CHECKPOINT DATA SET.
*                   IF DDNT RECORDS EXIST IN THE SCHEDULER WORK AREA
*                   (SWA) THESE ARE READ IN AND WRITTEN OUT TO THE
*                   CHECKPOINT DATA SET.  NEW CANDIDATES (UNALLOCATED
*                   DATA SETS THAT WERE JCL SPECIFIED AT START OF STEP)
*                   ARE ADDED TO THE LAST NON-FULL DDNT RECORD READ IN
*                   OR TO NEWLY CONSTUCTED DDNTS.  FOR EACH DATA SET
*                   REPRESENTED BY A DATA SET ASSOCIATION BLOCK (DSAB)
*                   ON THE USER'S DSAB CHAIN, IGC0D06C WILL CONSTRUCT
*                   DATA SET DESCRIPTION RECORDS (DSDRS).FOR EACH DSAB,
*                   PRESERVE WILL CONSTRUCT AND WRITE OUT A TYPE 1
*                   DSDR. A TYPE 1 DSDR CONTAINS THE DATA SET'S JFCB,
*                   ITS DDNAME, THE UCBTYP FIELD FROM ITS UCB, PLUS
*                   SELECTED FIELDS FROM THE ASSOCIATED SIOT.  IF
*                   THERE IS A JFCB EXTENSION BLOCK (JFCBX) ASSOCIATED
*                   WITH THE DATA SET, PRESERVE WILL WRITE OUT A TYPE 2
*                   DSDR. A TYPE 2 DSDR CONTAINS JUST THE JFCBX. WHEN
*                   ALL THE JFCBS AND JFCBXS HAVE BEEN PROCESSED,
*                   PRESERVE WILL READ IN THE GDG NAME TABLE (IF
*                   THERE IS ONE) AND WILL CONSTRUCT AND WRITE OUT A
*                   TYPE 3 DSDR.A TYPE 3 DSDR CONTAINS JUST THE GDG
*                   NAME TABLE. WHEN ALL THE DDNTS AND DSDRS HAVE BEEN
*                   WRITTEN OUT, PRESERVE WILL XCTL TO CHKMAIN.
*                     TO READ RECORDS FROM SWA PRESERVE USES THE
*                   QMNGRIO MACRO.
*                     THE JFCBVLSQ FIELD OF THE JFCB IN DSDR WILL BE
*                   ADJUSTED AS FOLLOWS FOR DATA SETS OPENED FOR
*                   BSAM OR QSAM PROCESSING
*                            READ BACKWARD - JFCBVLSQ=DEBVLSQ
*                            READ FORWARD - JFCBVLSQ=DEBVLSQ-1+JFCBVLSQ
*
*                   FOR DYNAMICALLY ALLOCATED DATA SETS THE SIOTS WILL
*                   BE WRITTEN OUT AFTER THE JFCBX IF THERE IS ONE
*                   WITH A CODE OF 000C FOR DSDR PROCESSING
*ENTRY POINTS: IGC0D06C
*
*INPUT:  ADDRESS OF CHKPT WORK AREA IN REGISTER 1.
*
*OUTPUT:  ADDRESS OF CHKPT WORK AREA IS IN REGISTER 1.
*         DDNT AND DSDR RECORDS WRITTEN TO THE CHECKPOINT DATA SET.
*
*EXITS-NORMAL: THIS ROUTINE WILL XCTL TO CHKMAIN (IGC0F06C)
*
*EXITS-ERRORS:  IF A PERMANENT I/O ERROR OCCURED, THIS ROUTINE WILL PUT
*              THE ADDRESS OF THE CHKPT WORK AREA IN REGISTER 1 AND
*              XCTL TO IORESUME (IGC0N06C).
*              THE RETURN CODE IN CHKWA IS SET TO X'OC' AND ONE OF THE
*              FOLLOWING MESSAGE CODES WILL BE PLACED IN CHKWA:
*              1.) X'0317'  I/O ERROR WHILE CREATING CHKPT DATA SET
*              2.) X'031B'  INVALID E0V
*              3.) X'0316'  ERROR READING CONTROL BLOCKS FROM SWA
*
*TABLES/WORK AREAS:  CHKWA DSECT,JCT,JFCB,JFCBX,TCB,UCB,SIOT,DSENQ
*                  TABLE, GDG NAME TABLE, DSAB, JSCB, QDB, SCT, TIOT,
*                  CVT, DEB, DCB
*
*ATTRIBUTES:  REENTRANT,SUPERVISOR STATE,TYPE 4 SVC ROUTINE.
*
*RESTRICTIONS ON USE OF ROUTINE:  MAY ONLY BE USED IN OS/VS2/2
*
*NOTES:  NONE
***********************************************************************
         EJECT
         USING CHKWA,RC            ADDRSSS W.A.
         BALR  RB,0                SET UP MODULE ADDRESSABILITY.
         USING *,RB
         B     BEGIN               BRANCH AROUND EYE CATCHER
         CNOP  0,8                 ALIGN TO A DOUBLE WORD BOUNDARY
         DC    C'IGC0D06C'         CSECT NAME
         DC    C'@ZA30810'         LAST CHANGE                 @ZA20785
         DC    C'&SYSDATE'         DATE OF LAST CHANGE         @ZA20785
BEGIN    EQU   *
         LR    RC,R1               SET UP CHKPT W.A. ADDRESSABILITY.
***********************************************************************
*                                                                     *
*        INITIALIZE CONTROL BLOCKS FOR WRITING DSDR'S                 *
*                                                                     *
***********************************************************************
*                                                                     *
         USING IHADCB,R2      ADDRESS CHKPT DCB
         LA    RD,CKREGSAV         INITIALIZE SAVE AREA REG.
         L     R2,CKDCBAD          GET DCB ADDR
         LA    R9,PRESYNAD         MODIFY DCBSYNAD SO THAT
         ST    R9,PREAD            PRESERVE SYNAD ROUTINE WILL
         MVC   DCBSYND(LNADDR),PREAD3   GET CONTROL IF I/O ERROR OCCURS
         XC    CKERAS01(TYPL),CKERAS01  CLEAR SIOT READ IN ADR   Y02076
**********************************************************************
*                                                                    *
*  GET SPACE FOR QMNGRIO PARAMETER LIST AND WORK AREA (24+256) BYTES  *
*                                                                Y02076
**********************************************************************
         ICM   R0,ADDRBYTS,QMNGWALN     WA+PARM LST LNGH INR0    Y02076
         ICM   R0,HIORDER,SP253         SUBPOOL NO. IN R0        Y02076
         ST    R0,CKERAS00              SAVE FOR FREEMAIN        Y02076
         GETMAIN  R,LV=(0)              GET SPACE FOR PARM LST   Y02076
         ST    R1,CKQMPARM              SAVE PARM LIST ADDR INWA Y02076
         SR    R4,R4                    SWITCH- DDNTS IN SWA     Y02076
**************GET SPACE FOR READING IN SIOTS ******************@OZ07204
         SR    R0,R0                    ZERO REG 0             @OZ07204
         LA    R0,JFCL                  SET LENGTH TO 176      @OZ07204
         ICM   R0,HIORDER,SP253         SET SUBPOOL            @OZ07204
         ST    R0,CKERAS01              SAVE FOR FREEMAIN      @OZ07204
         GETMAIN R,LV=(0)              ISSUE GETMAIN           @OZ07204
         ST    R1,SIOTRDIN             SAVE ADDRESS OF AREA    @OZ07204
***********************************************************************
*                                                                Y02076
*     INITIALIZE FOR WRITING THE DDNT RECORDS                    Y02076
*                                                                Y02076
***********************************************************************
         USING TCB,R6                   ADDRESS TCB.
         L     R6,CKTCBAD               GET ADDR OF TCB.
         L     R6,TCBJSCB               GET ADDR OF JSCB         Y02076
         DROP  R6                                                Y02076
         USING IEZJSCB,R6                                        Y02076
         SR    R0,R0                    CLEAR SCT READ           YM5777
         ST    R0,CKERAS04              SWITCH                   YM5777
         ICM   R0,M14,JSCSCTP           GET SVA OF SCT           YM5777
         B     SCTREAD                  GO READ SCT              YM5777
         USING INSMSCT,R5               ADDRESS SCT              Y02076
SCTTEST  MVC   CKERAS05,SCTFSIOT        SAVE SIOT CHAIN ANCHOR   YM7093
         ICM   R0,M14,SCTDDNT+K1        GET SVA ADDR OF DDNTS  @OZ06714
         DROP  R5                       SCT ADDRESSABILITY       Y02076
         LTR   R0,R0                    TEST IF ANY DDNTS IN SWA Y02076
         BNZ   DDNTREAD                 BR IF DDNTS ARE IN SWA   Y02076
DDNTNEWT EQU   *                        DO DDNT CANDIDATES EXIST Y02076
         TM    JSCBOPTS,JSCSIOTS        ARE NEW DDNTS TO BE ADDEDYM7093
         BO    DDNTNEW                  BRANCH IF YES            Y02076
         B     DSDRPROC                 IF NO - GO TO DSDR PROC  Y02076
***********************************************************************
*   PREPARE TO READ DDNTS FROM SWA VIA QMNGRIO                   Y02076
***********************************************************************
DDNTREAD EQU   *                        SET UP FOR READING DDNTS Y02076
         LA    R4,DDNTSWAS              SET SWITCH- DDNTS IN SWA Y02076
SCTREAD  IC    R0,PREZERO               0 INTO LO BYTE SVA ADDR  YM5777
         USING QMIOP,R1                                          Y02076
         L     R1,CKQMPARM              GET ADDR OF QMNGRIO PL   Y02076
         XC    QMITCBAD(LPL),QMITCBAD   CLEAR QMNGRIO PARM LIST  Y02076
         ST    R0,QMIDSKAD              ST SVA ADDR IN PARM LIST Y02076
         LA    R0,LPL                   GET OFFSET TO WORK AREA  Y02076
         AR    R0,R1                    CALC ADDR OF WORK AREA   Y02076
         ST    R0,QMIWRKAD              ST WRK AREA ADDR IN PL   Y02076
         LA    R0,INFMJFCB              READ IN AREA FOR DDNTS   Y02076
         ST    R0,QMIRECAD              READ IN ADDR TO PARM LST Y02076
         L     R0,CKTCBAD               GET ADDR OF TCB          Y02076
         ST    R0,QMITCBAD              STORE IN QMNGRIO P.LIST  Y02076
         LA    R0,LNDDNT                GET LENGTH OF DDNTS      Y02076
         STH   R0,QMIRECL               STORE IN PARM LIST       Y02076
         MVI   QMIFLAGS,QMIOREAD        SET READ FLAG            Y02076
         QMNGRIO                        READ IN DDNT FROM SWA    Y02076
         LTR   RF,RF                    TEST FOR ERRORS          Y02076
         BNZ   PREQERRX                 IF ERRORS BR TO SET CODE Y02076
         L     R0,CKERAS04              GET SCT READ SWITCH      YM5777
         LTR   R0,R0                    IS IT ZERO               YM5777
         BNZ   DDNTS                    NO-MUST BE DDNT          YM5777
         ST    RC,CKERAS04              SET SCT READ SWITCH      YM5777
         LA    R5,INFMJFCB              GET ADDR OF SCT          YM5777
         B     SCTTEST                  GO SEE IF DDNTS IN SWA   YM5777
         USING DDNTREC,R9                                        Y02076
DDNTS    LA    R9,INFMJFCB              PT TO DDNT JUST READ IN  YM5777
         SR    R0,R0                    ZERO REG 0             @ZA07204
         ICM   R0,M14,DDNTLINK+K1       GET ADDR OF NEXT DDNT  @ZA07204
         DROP  R9                                                Y02076
         LR    R3,R0                    SAVE SVA ADDR            Y02076
         LTR   R0,R0                    ANY MORE DDNTS IN SWA    Y02076
         BZ    DDNTNEWT                 NO MORE DDNTS IN SWA     Y02076
         LH    R9,CODDNT                SET DDNT CODE IN R9      Y02076
         BAL   RA,PREOBH                TO OUTPUT BUFFER HANDLER Y02076
         LR    R0,R3                    RESTORE SVA ADDR         Y02076
         B     DDNTREAD                 BR IF YES FOR NXT DDNT   Y02076
DDNTNEW  EQU   *                        PREP FOR NEW DDNT ENTRY  Y02076
***********************************************************************
*        SEARCH THRU SIOT CHAIN TO GET DDNT ENTRIES              Y02076
***********************************************************************
         DROP  R6                                                Y02076
         L     R6,CKERAS05              GET SIOT CHAIN ANCHOR    YM7093
***********************************************************************
*        INITIALIZE FOR QMNGRIO PARAMETER LIST (PL)              Y02076
***********************************************************************
         USING QMIOP,R1                                          Y02076
         L     R1,CKQMPARM              GET PARM LIST ADDR       Y02076
         XC    QMITCBAD(LPL),QMITCBAD   CLEAR QMNGRIO PARM LIST  Y02076
         LA    R0,LPL                   GET OFFSET TO WORK AREA  Y02076
         AR    R0,R1                    CALC ADDR OF WORK AREA   Y02076
         ST    R0,QMIWRKAD              STORE WRK AREA ADR IN PL Y02076
         L     R0,SIOTRDIN              GET READ IN ADDR         Y02076
         ST    R0,QMIRECAD              ST READ IN ADDR IN PL    Y02076
         L     R0,CKTCBAD               GET ADDR OF TCB          Y02076
         ST    R0,QMITCBAD              STORE IN QMNGRIO P.LIST  Y02076
         LA    R0,LNDDNT                GET LENGTH OF DDNTS      Y02076
         STH   R0,QMIRECL               STORE LENGTH IN P.LIST   Y02076
         MVI   QMIFLAGS,QMIOREAD        SET 'READ' FLAG          Y02076
         USING DDNTREC,R5                                        Y02076
         LA    R5,INFMJFCB              POINT TO LAST DDNT     @ZA07204
         LTR   R4,R4                    TEST-DDNTS READ FR SWA   Y02076
         BZ    DDNTNWA                  BRANCH IF NO             Y02076
DDNTNWAA EQU   *                        CHECK IF DDNT IS FULL    Y02076
         CLI   DDNTUSCT+K1,DDNTFULL     IS DDNT FULL             Y02076
         BL    DDNTNWD                  BRANCH IF NOT FULL       Y02076
         LH    R9,CODDNT                CODE FOR DDNT RECORDS    Y02076
         BAL   RA,PREOBH                GO TO BUFFER HANDLER     Y02076
***********************************************************************
*        CLEAR DDNT SPACE AND INITIALIZE HEADER                  Y02076
***********************************************************************
DDNTNWA  XC    INFMJFCB(JFCL),INFMJFCB  ZERO 176 BYTES FOR DDNT  Y02076
         LA    R3,K1                    GET 1 FOR ENTRY OFFSET   Y02076
         STH   R3,DDNTUSCT              1ST OFSET-DDNT ENTRIES   Y02076
         STH   R3,DDNTIDNT              SET DDNT CODE          @ZA07204
DDNTNWD  LR    R0,R6                    GET SVA ADDR OF SIOT     Y02076
DDNTNWB  EQU   *                        PROCESS SIOTS            Y02076
         IC    R0,PREZERO               SET LO ORDER BYTE 0      Y02076
         ST    R0,QMIDSKAD              ST SVA ADDR IN PL        Y02076
         QMNGRIO                        READ IN SIOT             Y02076
         LTR   RF,RF                    TEST FOR ERRORS          Y02076
         BNZ   PREQERRX                 IF ERROR BR TO SET CODE  Y02076
         USING INDMSIOT,R6                                       Y02076
         L     R6,SIOTRDIN              PT TO BEGIN OF SIOT      Y02076
         TM    SIOTBYT1,SIOTDDNT        IS IT A DDNT CANDIDATE   Y02076
         BZ    DDNTNWC                  BRANCH IF NOT            Y02076
         LH    R3,DDNTUSCT              GET DDNT 'NXT AVAIL SLOT Y02076
         SLL   R3,3                     MULTIPLY BY 8            Y02076
         LA    R9,DDNTREC               GET BEGIN ADDR OF DDNT   Y02076
         AR    R3,R9                    ADDR OF DDNAME IN DDNT   Y02076
         MVC   K0(K8,R3),SCTDDNAM       MOVE DDNAME INTO DDNT    Y02076
         LH    R3,DDNTUSCT              GET DDNT'NXT AVAIL SLOT' Y02076
         LA    R3,K1(R3)                INCREASE SLOT COUNT      Y02076
         STH   R3,DDNTUSCT              ST NEW 'NXT AVAIL SLOT'  Y02076
DDNTNWC  EQU   *                        TEST - END OF SIOT CHAIN Y02076
         L     R6,SCTPSIOT              GET ADDR OF NEXT SIOT    Y02076
         LTR   R6,R6                    IS THIS LAST SIOT        Y02076
         BZ    DDNTNWE                  BRANCH IF YES            Y02076
         B     DDNTNWAA                 GO TEST FOR FULL DDNT    Y02076
***********************************************************************
*        END OF SIOT CHAIN                                       Y02076
***********************************************************************
DDNTNWE  LH    R3,DDNTUSCT              TEST IF ANY DDNT ENTRIES Y02076
         LA    R4,DDNTSWAS              SET R4 FOR DDNTS ENTERED Y02076
         BCTR  R3,K0                    REDUCE ENTRY SLOT BY 1   Y02076
         LTR   R3,R3                    IS IT 0                  Y02076
         BZ    DSDRPRCA                 BRANCH IF NO ENTRIES     Y02076
DSDRPROC EQU   *                        BEGIN DSDR PROCESSING    Y02076
         LTR   R4,R4                    WERE ANY DDNTS IN SWA    Y02076
         BZ    DSDRPRCA                 BRANCH IF NO             Y02076
         LH    R9,CODDNT                LOAD DDNT CODE           Y02076
         BAL   RA,PREOBH                FLUSH OUT LAST DDNT      Y02076
***********************************************************************
*        BEGIN PROCESSING OF DSDR RECORDS                        Y02076
***********************************************************************
DSDRPRCA EQU   *                        INITIALIZE FOR SEQUENCE  Y02076
         DROP  R6                       THRU DSAB CHAIN          Y02076
         USING TCB,R6                                            Y02076
         L     R6,CKTCBAD               GET PTR TO TCB           Y02076
         L     R6,TCBJSCB               GET PTR TO JSCB          Y02076
         USING IEZJSCB,R6                                        Y02076
         L     R6,JSCDSABQ              GET POINTER TO QDB       Y02076
         DROP  R6                                                Y02076
         USING QDB,R6                                            Y02076
         L     R6,QDBFELMP              GET POINTER TO 1ST DSAB  Y02076
         DROP  R6                                                Y02076
         USING DSAB,R6                                           Y02076
PREAG2   L     R5,DSABTIOT              GET CORRESP DD ENTRY     Y02076
         USING TIOELNGH,R5                                       Y02076
*                                                                     *
***********************************************************************
*        GET JFCB TTR FROM TIOT ENTRY - READ IN JFCB                  *
*        FOR SUBALLOCATE REQUEST A SIOT IS READ FROM JOB QUEUE, JFCB  *
*        TTR EXTRACTED FROM SIOT AND THEN JFCB READ INTO CORE         *
*                                                                     *
***********************************************************************
*                                                                     *
PREAG3   L     R0,TIOEJFCB              GET JFCB TTR.
         IC    R0,PREZERO               FILL IN CONCATENATION NO.
***********************************************************************
*  INITIALIZE QMNGRIO PARAM LIST FOR READING JFCB FROM SWA       Y02076
*            THEN READ IN JFCB                                   Y02076
***********************************************************************
         USING QMIOP,R1                                          Y02076
         L     R1,CKQMPARM              GET ADDR OF QMNGRIO PL   Y02076
         XC    QMITCBAD(LPL),QMITCBAD   CLEAR QMNGRIO PARM LIST  Y02076
         ST    R0,QMIDSKAD              ST JFCB SVA IN PARM LST  Y02076
         LA    R0,LPL                   GET OFFSET TO WORK AREA  Y02076
         AR    R0,R1                    CALC ADDR OF WORK AREA   Y02076
         ST    R0,QMIWRKAD              ST WA ADDR IN PARM LST   Y02076
         LA    R0,INFMJFCB              'READ IN' ADDR OF JFCB   Y02076
         ST    R0,QMIRECAD              STORE ADDR IN PARM LST   Y02076
         L     R0,CKTCBAD               GET ADDR OF TCB          Y02076
         ST    R0,QMITCBAD              STORE IN QMNGRIO P.LIST  Y02076
         LA    R0,LNJFCB                GET LENGTH OF JFCB       Y02076
         STH   R0,QMIRECL               STORE IN QMNGRIO P.LIST  Y02076
         MVI   QMIFLAGS,QMIOREAD        SET READ FLAG            Y02076
         QMNGRIO                        READ JFCB FROM SWA       Y02076
         LTR   RF,RF                    TEST FOR ERRORS          Y02076
         BNZ   PREQERRX                 IF ERROR BR TO SET CODE  Y02076
         DROP  R2
         L     R9,CKTCBAD               GET TCB ADDRESS
         USING TCB,R9
         L     RF,TCBTIO                GET TIOT ADDRESS
         L     R9,TCBDEB                GET DEB QUEUE ADDRESS
         USING DEBBASIC,R9
*                                                                     *
***********************************************************************
*                                                                     *
*        SEARCH THROUGH DEB CHAIN TO FIND ASSOCIATEDDCB WITH JFCB JUST*
*        READ         IN ORDER TO GET UCB ADDR FOR THE D.S.           *
*                                                                     *
***********************************************************************
*                                                                     *
PRENXTDB EQU   *
         LTR   R9,R9               IS THERE ANOTHER DEB
         BZ    PREBK               BRANCH IF NO
         L     RA,DEBDCBAD         GET ADDRESS OF DCB ASSOCIATED WITH
*                                  THIS DEB
         USING IHADCB,RA
         LH    R0,DCBTIOT          GET INCREMENT TO TIOT DD ENTRY
         AR    R0,RF               GET ADDRESS OF TIOT DD ENTRY BY
*                                  ADDING DCB INCREMENT TO TIOT
*                                  ADDRESS
         CR    R0,R5               IS THIS DEB ASSOCIATED WITH   Y02076
*                                  TIOT ENTRY CURRENTLY BEING PROCESSED
         BE    PREDCB              BRANCH IF YES
         L     R9,DEBDEBAD         GET POINTER TO NEXT DEB
         LA    R9,K0(R9)           CLEAR HIGH ORDER BYTE-DEB PTR Y02076
         B     PRENXTDB            BRANCH TO TEST NEXT DEB
*                                                                     *
***********************************************************************
*                                                                     *
*        IF DATA SET OPENED FOR QSAM OR BSAM SPECIAL PROCESSING ON    *
*        VOLUME SEQUENCE NO. FOLLOWS                                  *
*                                                                     *
***********************************************************************
PREDCB   EQU   *
         LR    RF,R9               GET DEB ADDRESS               YM7371
         LA    R7,DEBPRFLN         GET LENGTH OF PREFIX          YM7371
         SR    RF,R7               POINT TO DEB PREFIX           YM7371
         L     R7,DEBXTNP-DEBPREFX(,RF) PTR TO DEB EXTENSION     YM7371
         TM    DEBXDSO1-DEBXTN(R7),DCBDSGPS CHK IF SAM           YM7371
         BZ    PREBK               BRANCH IF NO
         LA    R7,INFMJFCB              ADR JFCB READ-IN AREA    YM7022
         USING INFMJFCB,R7                                       YM7022
         CLI   DEBAMTYP-DEBPREFX(RF),ISAMDEB CHK IF ISAM         YM7371
         BNE   PREDCB03                 BR NOT ISAM             ZA00138
         LA    RF,K16(,RF)              BUMP PAST FUNKY ISAM EXT YM7371
PREDCB02 EQU   *                        GET UCB                  YM7371
         XC    PREVLHLD,PREVLHLD   CLEAR VOLSEQ HOLD AREA       Z30JSSR
         L     RF,DEBBASND-DEBPREFX(,RF) GET TO FIRST EXT UCB    YM7371
         LA    RF,K0(,RF)               CLEAR HI-ORDER BYTE      YM7371
         LTR   RF,RF                    CHK IF DUMMY             YM7371
         BZ    PREBK                    BR IF DUMMY              YM7371
         USING UCBSECT,RF
         TM    UCBTBYT3,NOTTAPDA        IS THIS TAPE OR DA       YM7371
         BNZ   PREBK                    BR IF NOT TAPE OR DA     YM7371
         CLI   UCBTBYT3,PRETAPE         CH IF TAPE               YM7371
         BNE   PREDA                    BR IF D.A.               YM7371
         MVC   JFCBFSEQ(1),SRTEFSCT+1  SAV PHYS FILE SEQ NO.    OX01653
         DROP  RF                                                YM7371
         CLC   DEBDCBB(LNADDR),CKDCB1    IS THIS CHKPT D.S. DEB
         BNE   PRETAVOL            BRANCH IF NOT
*    DETERMINE THE SEQUENCE NO. OF THE VOLUME WITH THE          YA00142
*    REQUIRED CHECKPOINT RECORDS AND SAVE IT IN FIELD           YA00142
*    'JCTVOLSQ' FOR IEFDSDRP                                    YA00142
         MVC   JCTVOLSQ,VLSQ(R9)        SET REAL VOL SEQ         YM7371
         MVC   PREVLHLD,VLSQ+1(R9) MOVE VOLSEQ TO HOLD AREA     Z30JSSR
         B     PREBK                    GO PREPARE TO WRITE BFR  YM7371
PREDCB03 TM    DEBEXSCL-DEBPREFX(RF),X'FF'  USEABLE UCB         ZA00138
         BZ    PREBK                    BRANCH IF NO            ZA00138
         B     PREDCB02                 GO PROCESS UCB          ZA00138
PRETAVOL EQU   *
         LA    RA,DEBDEBAD              INCR FOR VOLUME SEQ NO.  YM7371
         B     PREVOLSQ
PREDA    EQU   *
         SR    RA,RA                    CLEAR REGISTER A
         IC    RA,DEBNMEXT              GET NUMBER OF EXTENTS
         SLL   RA,EQUX16                MULTIPLY BY 16
         AR    RA,R9                    INCR FOR VOLUME SEQ NUMBER
PREVOLSQ EQU   *
         LH    RF,JFCBVLSQ              GET VOL SEQ SPEC ON JCL  YM7371
         LTR   RF,RF                    CHK IF SPECIFIED         YM7371
         BNZ   PRE00020                 BR IF VOLSQ SPECIFIED    YM7371
         LA    RF,K1                    SET VOLSQ TO FIRST VOL   YM7371
PRE00020 EQU   *                        CHK FOR DEFERED MOUNT    YM7371
         MVC   PREVLHLD,INCVLSQN+DEBVSQ(RA) SAVE VOLSEQ NUM     Z30JSSR
         CLM   RF,M1,INCVLSQN+1(RA)     CHK IF NOT FIRST VOL   @ZA20785
         BE    PREBK                    BR IF FIRST VOL         ZA04637
         OI    JFCBMASK+K6,DEFMOUNT     SET BIT TO CAUSE DSDR TO  M2192
*                                       MARK SIOT FOR DATA SET FOR
*                                       DEFERRED MOUNT AT RESTART
         USING IHADCB,R2
         DROP  R9,RA,R7                                          YM7371
PREBK    EQU   *
         XR    R9,R9               LOAD RECORD CODE.
         MVC   PREAD(LNADDR),JFCBEXAD   GET JFCBX SVA ADDR       Y02076
         BAL   RA,PREOBH           GO TO OUTPUT BUFFER HANDLER.
         L     R0,PREAD
         IC    R0,PREZERO          SET CONCATENATION NUMBER TO ZERO.
         LTR   R0,R0               IS THERE A JFCBX
         BNZ   PREJFCBX            GO TO READ IN JFCBX.
PRENXTI  EQU   *
         TM    DSABFLG1,DSABDALC   IS IT DYNAMICALLY ALLOCATED @OZ07204
         BZ    PRESSON             NO SO GO ON                 @OZ07204
         LH    R9,COSIOT           LOAD SIOT CODE              @OZ07204
         BAL   RA,PREOBH           LINK TO OUTPUT BUFFER       @OZ07204
PRESSON  EQU   *                                               @OZ07204
         L     R6,DSABFCHN              GET NEXT DSAB ON CHAIN   Y02076
         LTR   R6,R6                    IS THIS LAST DSAB        Y02076
         BNZ   PREAG2                   BRANCH TO PROCESS NEXT   Y02076
         L     R0,JCTGDGNT         GET SVA OF GDG NAME TABLE     Y02076
PRENXGDG EQU   *
         IC    R0,PREZERO               CLEAR LO BYTE SVA ADDR   Y02076
         LTR   R0,R0               IS THERE A GDG.
         BZ    PRESKP3             NO-SKIP GDG PROCESSING
***********************************************************************
*    SET UP FOR READING GDG NAME TABLE VIA QMNGRIO               Y02076
***********************************************************************
         USING QMIOP,R1                                          Y02076
         L     R1,CKQMPARM              GET ADDR QMNGRIO PRM LST Y02076
         XC    QMITCBAD(LPL),QMITCBAD   CLEAR QMNGRIO PARMLIST @ZA09126
         ST    R0,QMIDSKAD              ST SVA ADDR OF GDG NAMTB Y02076
         LA    R0,LPL                   GET OFFSET TO WORKAREA @ZA09126
         AR    R0,R1                    CALC ADDR OF WORK AREA @ZA09126
         ST    R0,QMIWRKAD              ST WA ADDR IN PARMLIST @ZA09126
         LA    R0,INFMJFCB              GET READIN AREA ADDR   @ZA09126
         ST    R0,QMIRECAD              ST READIN ADR IN PLIST @ZA09126
         L     R0,CKTCBAD               GET ADDR OF TCB        @ZA09126
         ST    R0,QMITCBAD              ST TCB ADDR IN PLIST   @ZA09126
         LA    R0,LNJFCB                GET A LENGTH VALUE     @ZA09126
         STH   R0,QMIRECL               ST LENGTH IN PLIST     @ZA09126
         MVI   QMIFLAGS,QMIOREAD        SET 'READ' FLAG          Y02076
         QMNGRIO                        READ IN GDG NAME TABLE   Y02076
         LTR   RF,RF                    TEST FOR ERRORS          Y02076
         BNZ   PREQERRX                 IF ERROR BR TO SET CODE  Y02076
         LA    R9,COGDG                 LOAD GDG NAME TBL CODE
         BAL   RA,PREOBH           GO TO OUTPUT BUFFER HANDLER.
         USING GDGNT,R1                                          Y02076
         LA    R1,INFMJFCB              ADDR OF LAST GDGNT READ  Y02076
         L     R0,GNTNEXTP         GET SVA OF NEXT GDG TABLE
         IC    R0,PREZERO          FILL IN CONCATENATION NUMBER.
         B     PRENXGDG            GO TO PROCESS NEXT GDG TABLE.
PRESKP3  EQU   *
PREXIT   EQU   *
         LA    R9,DSDREND          LOAD END-OF-DSDRS CODE.
         BAL   RA,PREOBH           GO TO WRITE OUT LAST DSDR.
         MVC   PRESV(LNMODNAM),PREXMN   MOVE CHKMAIN MOD NAME TO XCTLST
PREOUT   EQU   *
         L     R0,CKERAS00              LOAD GETMAIN PARM REG    Y02076
         L     R1,CKQMPARM              GET ADDR QMNGR PARM LIST Y02076
         FREEMAIN  R,LV=(R0),A=(R1)     FREE UP THE PARM LST     Y02076
         L     R0,CKERAS01              LOAD GETMAIN PARM REG    Y02076
         LTR   R0,R0                    WERE SIOTS READ IN       Y02076
         BZ    PREOUTB                  BR OVER FREEMAIN IF NO   Y02076
         L     R1,SIOTRDIN              ADR OF SIOT READ-IN AREA Y02076
         FREEMAIN  R,LV=(R0),A=(R1)     FREE UP SIOT AREA        Y02076
PREOUTB  LR    R1,RC               PUT ADDR OF W.A. IN PARM REG.
         LR    R6,RC                    STORE WA ADDR IN R6      Y02076
         LA    RF,PRESV            SET UP PARAMETER LIST FOR XCTL.
         ST    RF,PRELSTAD
         LA    RF,PRELSTAD
         XCTL  SF=(E,(15))         TRANSFER CONTROL TO NEXT MODULE.
PREOBH   EQU   *
         STM   R2,RC,PRESAVE
         L     R2,PRENXB           LOAD ADDR OF NEXT BYTE IN BUFFER
         L     R8,PRENOB           LOAD NUMBER OF BYTES LEFT IN BUFFER.
         STH   R9,0(R2)            MOVE CODE TO BUFFER.
         CH    R9,CODDNT                TEST FOR A DDNT RECORD   Y02076
         BE    DDNT                     GO MOVE DDNT TO BUFFER @OZ07204
         CH    R9,COSIOT           SIOT PROCESSING ?           @OZ07204
         BE    SIOTWR              YUP GO WRITE SIOT           @OZ07204
         B     *+4(R9)             BRANCH TABLE ON RECORD CODE
         B     PREOJF              GO TO MOVE JFCB AND UCB INFO TO BUF.
         B     PREJFX              GO TO WRITE OUT JFCBX.
         B     PREJFX              GO TO WRITE OUT GDG BIAS COUNT TABLE
         B     PREJFX              GO TO WRITE OUT DSENQ TABLE.
PRECOM3  EQU   *
         LA    R1,CKDECB1          GET DECB ADDR.
         WRITE (R1),SF,,,,,,MF=E   WRITE OUT A DSDR.
         LA    R1,CKDECB1
         CHECK (R1)
         TM    CKFLAG1,CKTAPE      CHKPT DATA SET ON TAPE
         BO    PRETAEOV            BRANCH IF YES
         L     RF,CKDCBAD          GET DCB ADDRESS FOR CHKPT DATA SET
         DROP  R2
         USING IHADCB,RF
         L     RF,DCBDEBAD         GET DEB ADDRESS
         USING DEBBASIC,RF
         USING IHADCB,R2
         CLC   CKTSTEOV(ONE),DEBNMEXT    HAS THE NUMBER OF EXTENTS
*                                        CHANGED
         BNE   PREOVER             BRANCH IF YES-EOV ON D.A. ERROR
         B     PREIOCHK            CHECK FOR I/O ERROR
PRETAEOV EQU   *
         L     RF,CKTSTEOV         GET POINTER TO EOV INFO
         CLC   ZERO(LNWORD,RF),CKEOVCMR      DID END OF VOLUME OCCUR
         BNE   PREOV               YES
PREIOCHK EQU   *
         TM    CKRETCD1,CKIOERR    WAS THERE AN I/O ERROR
         BO    PREQERRW             YES-GO TO I/O ERROR EXIT ROUTINE.
         STH   R9,CODE(R2)         MOVE RECORD CODE TO BUFFER
         BR    RA                  RETURN
PREOJF   EQU   *
         CH    R8,PREUPR           IS THERE ROOM FOR ANOTHER RECORD
         BH    PREMVJ              YES-DO NOT WRITE BUFFER YET
         BAL   RA,PREWR            NO-GO TO WRITE OUT BUFFER
PREMVJ   EQU   *
         MVC   CDL(JFCL,R2),INFMJFCB  MOVE JFCB TO BUFFER
         MVC   VLSQP(VLSQL,R2),PREVLHLD MOVE VOLSEQ TO BUF      Z30JSSR
         L     RF,TIOTUCB          GET ADDR OF UCB
         LA    RF,ZERO(RF)         CLEAR HIGH ORDER BYTE
         LTR   RF,RF               IS THIS A DUMMY DATA SET
         BNZ   PRENODMY            BRANCH IF NOT
         XC    UCBP(TYPL,R2),UCBP(R2)      ZERO DEVTYP BYTES IN DSDR
         B     PREUPDAT            GO TO UPDATE BUFFER POINTERS
PRENODMY EQU   *
         USING UCBSECT,RF
         MVC   UCBP(TYPL,R2),UCBTYP MOVE UCB INFO INTO DSDR.
PREUPDAT EQU   *
***********************************************************************
*  INITIALIZE FOR READING IN SIOT FROM SWA THEN READ IT IN       Y02076
***********************************************************************
         L     R0,DSABRS01              GET SVA PTR FROM DSAB    Y02076
         SLL   R0,HIORDER               SHFT SWA ADDR LEFT 8BITS Y02076
         USING QMIOP,R1                                          Y02076
         L     R1,CKQMPARM              GET ADDR OF QMNGRIO PL   Y02076
         XC    QMITCBAD(LPL),QMITCBAD   CLEAR QMNGRIO PARM LIST  Y02076
         ST    R0,QMIDSKAD              ST SVA SIOT ADDR IN PL   Y02076
         LA    R0,LPL                   GET OFFSET TO WORK AREA  Y02076
         AR    R0,R1                    CALC ADDR OF WORK AREA   Y02076
         ST    R0,QMIWRKAD              ST WA ADDR IN P.L.       Y02076
         L     R0,SIOTRDIN              ADDR OF SIOT 'READ IN' @OZ07204
         ST    R0,QMIRECAD              ST READ IN ADDR IN P.L.  Y02076
         L     R0,CKTCBAD               GET ADDR OF TCB          Y02076
         ST    R0,QMITCBAD              STORE TCB ADR IN P.LIST  Y02076
         LA    R0,LNJFCB                GET LENGTH OF SIOTS      Y02076
         STH   R0,QMIRECL               STORE IN QMNGRIO P.LIST  Y02076
         MVI   QMIFLAGS,QMIOREAD        SET FLAGS FOR READ       Y02076
         QMNGRIO                        READ SIOT FROM SWA       Y02076
         LTR   RF,RF                    TEST FOR ERRORS          Y02076
         BNZ   PREQERRX                 IF ERROR BR TO SET CODE  Y02076
***********************************************************************
*  PROCESS SIOT FIELDS FOR DSDR ENTRIES                          Y02076
***********************************************************************
         USING INDMSIOT,R5                                       Y02076
         L     R5,SIOTRDIN              LOAD BASE REG FOR SIOT @OZ07204
         NI    CKFLAG2,TURNOFS          TURN OFF SIOT 'WRITE'    Y02076
         TM    SIOTBYT1,SIODUNAL        D/S DYNAMIC UNALLOC    @ZA09977
         BO    PREUPA                   BR IF YES              @ZA09977
         TM    SCTSBYT3,SCTALCHK        SIOT ALLOCATED         @ZA09977
         BO    PREUPC                   BR IF YES              @ZA09977
         OI    SCTSBYT3,SCTALCHK        SET SIOT ALLOC'D BIT   @ZA09977
         B     PREUPB                                          @ZA09977
PREUPA   TM    SCTSBYT3,SCTALCHK        WAS SIOT ALLOCATED     @ZA09977
         BZ    PREUPC                   BR IF NO               @ZA09977
         NI    SCTSBYT3,255-SCTALCHK    TURN OFF SIOT ALLOC'D  @ZA09977
PREUPB   OI    CKFLAG2,UPDSIOT          TURN ON SIOT 'WRITE'   @ZA09977
PREUPC   LH    R3,DSABOPCT              GET D/S OPEN AT CHKPT  @ZA09977
         LTR   R3,R3                    WAS IT OPEN AT CHKPT     Y02076
         BNZ   PREUP1                   BRANCH IF OPEN           Y02076
         TM    SIOTBYT1,SIOTOCKP        IS OPEN IND=0 IN SIOT    Y02076
         BZ    PREUP2                   BRANCH IS YES            Y02076
         NI    SIOTBYT1,TURNOFO         TURN OFF OPEN BIT        Y02076
         OI    CKFLAG2,UPDSIOT          SET FLAG TO WRITE SIOT   Y02076
         B     PREUP2                                            Y02076
PREUP1   OI    SIOTBYT1,SIOTOCKP        SET D/S OPEN AT CHKPT    Y02076
         OI    CKFLAG2,UPDSIOT          SET FLAG TO WRITE SIOT   Y02076
PREUP2   MVC   DDNMP(DDL,R2),SCTDDNAM   MVE DDNAME FROM SIOT     Y02076
         MVC   SIOTFP(K1,R2),SCTSDISP   MVE SCTSDISP TO DSDR     Y02076
         LA    R2,K1(R2)                INCREASE PTR BY 1        Y02076
         MVC   SIOTFP(K1,R2),SCTSBYT3   MVR SCTSBYT3 TO DSDR     Y02076
         LA    R2,K1(R2)                INCREASE BUFR PTR BY 1   Y02076
         MVC   SIOTFP(K1,R2),SIOTALTD   MVE SIOTALTD FIELD       Y02076
         LA    R2,K1(R2)                INCREASE BUFR PTR BY 1   Y02076
         XC    SIOTFP(K1,R2),SIOTFP(R2) CLEAR FLAG BYTE          Y02076
         TM    SIOTBYT1,SIOTOCKP        DATA SET OPEN AT CHKPT   Y02076
         BZ    PREUP3                   BRANCH IF NOT            Y02076
         OI    SIOTFP(R2),DSDROCKP      SET DSDRFLAG W DSOPEN    Y02076
PREUP3   TM    DSABFLG1,DSABDALC        TEST DYNAMIC ALLO        Y02076
         BZ    PREUP4                   BRANCH IF NOT            Y02076
         OI    SIOTFP(R2),DSDRDALC      SET DSDRFLAG             Y02076
PREUP4   TM    DSABFLG1,DSABCATM        TEST DYNAMIC CONCAT.     Y02076
         BZ    PREUP5                   BRANCH IF NOT            Y02076
         L     RF,DSABTIOT              POINT TO TIOT ENTRY      YM7323
         USING TIOENTRY,RF              ADDRESS DD ENTRY IN TIOT YM7323
         CLI   TIOEDDNM,BLANK           IS THIS DDNAME BLANK?    YM7323
         BNE   PREUP5                   BRANCH IF NOT BLANK      YM7323
         DROP  RF                                                YM7323
         OI    SIOTFP(R2),DSDRCCAT      SET DYN CONCAT FLG       Y02076
PREUP5   LA    R2,K1(R2)                INCREASE BUFR PTR BY 1   Y02076
         TM    CKFLAG2,UPDSIOT          WAS SIOT UPDATED         Y02076
         BZ    PREUP6                   BRANCH IF NO             Y02076
         MVI   QMIFLAGS,QMIOWRTE        SET FUNCTION TO WRITE    Y02076
         QMNGRIO                        WRITE SIOT TO SWA        Y02076
         LTR   RF,RF                    TEST FOR ERRORS          Y02076
         BNZ   PREQERRX                 IF ERROR BR TO SET CODE  Y02076
PREUP6   EQU   *                        INIT. FOR NEXT WRITE     Y02076
         LA    R2,PREUPJ(R2)       UPDATE BUFFER POINTER.
         SH    R8,=H'195'          UPD.NO. OF BYTES LEFT IN BUF.Z30JSSR
PRECOM2  ST    R2,PRENXB           SAVE BUFFER POINTER.
         ST    R8,PRENOB           SAVE NUMBER OF BYTES LEFT IN BUF.
PRERET   EQU   *
         LM    R2,RC,PRESAVE
         BR    RA                  RETURN TO CALLER.
PREWR    EQU   *
         LA    RF,BLKEND           MOVE END OF BLOCK CODE TO BUFFER.
         STH   RF,CODE(R2)         PUT END OF BLOCK CODE IN BUFFER
         LR    R2,RC               COMPUTE
         A     R2,CKBFOFST         BUFFER ADDRESS
         ST    R2,PRENXB           UPDATE POINTER TO NEXT AVAIL. BYTE.
         MVC   PRENOB(LNWORD),DSDRLN    UPDATE NO. OF BYTES LEFT IN BUF
         L     R8,PRENOB           GET NO. OF BYTES LEFT IN BUFFER.
         B     PRECOM3             GO TO WRITE OUT DSDR
DDNT     EQU   *                                               @OZ07204
         CH    R8,PREUPX           IS THERE ROOM FOR A RECORD  @OZ07204
         BH    DDNT1               YES DONT WRITE BUFFER YET   @OZ07204
         BAL   RA,PREWR             NO OUTPUT BUFFER FIRST     @OZ07204
DDNT1    EQU   *                                               @OZ07204
         MVC   K0(JFCL,R2),INFMJFCB  MOVE INTO BUFFER          @OZ07204
         LA    RA,JFCL             SET UP DDNT LENGTH          @OZ07204
         B     PREDDNT                                         @OZ07204
PREJFX   EQU   *
         CH    R8,PREUPX           IS THERE ROOM FOR ANOTHER RECORD
         BH    PREMVJX             YES-DO NOT WRITE OUT BUFFER YET.
         BAL   RA,PREWR            NO-GO TO WRITE OUT BUFFER.
PREMVJX  EQU   *
         MVC   CDL(JFCL,R2),INFMJFCB  MOVE JFCBX TO BUFFER
         LA    RA,JFCL             ANTICIPATE DDNT LENGTH        YM7578
         LA    RA,K2(,RA)          BUMP BY 2 FOR JFCBX           YM7578
PREDDNT  EQU   *                   DDNT ENTRY                    YM7578
         AR    R2,RA               UPDATE BUFFER POINTER         YM7578
         SR    R8,RA               UPDATE AVAIL BYTE COUNT       YM7578
         B     PRECOM2             GO TO SAVE BUFFER POINTERS AND RET
PREOV    EQU   *
         TM    CKFLAG2,CKEOV  Q. HAS EOV OCCURRED BEFORE
         BO    PREOVER        YES
         OI    CKFLAG2,CKEOV  TURN ON EOV INDICATOR
         MVC   PRESV(LNMODNAM),PREXMN   SET UP XCTL PARM LIST
         MVI   PREWD2,CHAR2        IGC0206C
         B     PREOUT              GO TO EXECUTE XCTL
PREOVER  EQU   *
         MVI   CKRETCD1,CKPGMERR   INDICATE PROGRAMMER ERROR
         LA    RA,CKERIO7          GET EOV ERROR CODE
         STH   RA,CKMSGCOD         STORE IN WORK AREA
         B     PREQMFG             GO TO TRANSFER CONTROL TO IGC0N06C
PRESYNAD EQU   *
         MVI   CKRETCD1,CKIOERR    MOVE ERROR CODE INTO W.A.
         BR    RE
PREQERRW EQU   *
         LA    RA,CKERIO3          I/O ERROR WRITING CHKPT DATA SET
         STH   RA,CKMSGCOD         STORE ERROR CODE IN WORK AREA
         B     PREQERR             GO TO GET RETURN CODE
PREQERRX EQU   *
         LA    RA,CKERIO4          I/O ERROR READING/WRITING SWA
         STH   RA,CKMSGCOD         STORE IN WORK AREA
PREQERR  EQU   *
         MVI   CKRETCD1,CKIOERR    MOVE RETURN CODE TO WA
PREQMFG  EQU   *
         MVC   PRESV(LNMODNAM),PREIORE  MOVE IORESUME'S NAME TO XCTLST
         B     PREOUT             GO TO TRANSFER CONTROL
PREJFCBX EQU   *
***********************************************************************
*  SET UP FOR READING JFCB EXTENTION VIA QMNGRIO                 Y02076
***********************************************************************
         USING QMIOP,R1                                          Y02076
         L     R1,CKQMPARM              GET ADDR QMNGRIO PARM LSTY02076
         XC    QMITCBAD(LPL),QMITCBAD   CLEAR GMNGRIO PARM LIST  Y02076
         ST    R0,QMIDSKAD              SVA ADDR OF JFCBX IN P^  Y02076
         LA    R0,LPL                   GET OFFSET TO WORK AREA  Y02076
         AR    R0,R1                    CALC ADDR OF WORK AREA   Y02076
         ST    R0,QMIWRKAD              ST WRK AREA ADDR IN P.L. Y02076
         LA    R0,INFMJFCB              ADDR OF JFCBX READ IN    Y02076
         ST    R0,QMIRECAD              ST READ IN ADDR IN P.L.  Y02076
         L     R0,CKTCBAD               GET ADDR OF TCB          Y02076
         ST    R0,QMITCBAD              STORE TCB ADDR IN P.LIST Y02076
         LA    R0,LNJFCB                GET LENGTH OF JFCBX      Y02076
         STH   R0,QMIRECL               STORE IN PARM LIST       Y02076
         MVI   QMIFLAGS,QMIOREAD        SET FLAG FOR 'READ'      Y02076
         QMNGRIO                        READ IN JFCB EXTENTION   Y02076
         LTR   RF,RF                    TEST FOR ERRORS          Y02076
         BNZ   PREQERRX                 IF ERROR BR TO SET CODE  Y02076
         LA    R9,COJFCBX          LOAD RECORD CODE.
         BAL   RA,PREOBH           WRITE RCD TO CHKPT D.S.
         L     R0,INFMJFCB         GET TTR OF NEXT JFCBX
         IC    R0,PREZERO          FILL IN CONCATENATION NUMBER.
         LTR   R0,R0               IS THERE ANOTHER JFCBX.
         BNZ   PREJFCBX            YES-GO TO READ IN NEXT JFCBX.
         B     PRENXTI             NO-GO TO EXAMINE NEXT JFCB.
SIOTWR   EQU   *                                               @OZ07204
         CH    R8,PRESIOT          IS THERE ROOM FOR SIOT      @OZ07204
         BH    SIOTMOVE            YES GO MOVE IT IN           @OZ07204
         BAL   RA,PREWR            NO PUT OUT BUFFER FIRST     @OZ07204
SIOTMOVE EQU   *                                               @OZ07204
         L     RA,SIOTRDIN         LOAD ADDRESS OF SIOT        @OZ07204
         MVC   CDL(JFCL,R2),0(RA)      MOVE IT INTO BUFFER     @OZ07204
         LA    RA,SIOTLG           SIOT LENGHT PLUS CODE BYTES @OZ07204
         AR    R2,RA               SET UP BUFFER POINTER       @OZ07204
         SR    R8,RA               UPDATE BYTE COUNT           @OZ07204
         B     PRECOM2             SAVE POINTERS AND RETURN    @OZ07204
COSIOT   DC    X'000C'             SIOT CODE DSDR              @OZ07204
PRESIOT  DC    H'180'                                          @OZ07204
SIOTLG   EQU   178                                             @OZ07204
CKERIO3  EQU   X'0317'             WRITE UNSUCCESSFUL
CKERIO4  EQU   X'0316'             SWA READ/WRITE UNSUCCESSFUL
CKERIO7  EQU   X'031B'             INVALID EOV
DSDRL    EQU   400  LENGTH OF CHR AND DSDRS
SP253    DC    AL1(253)                 SUBPOOL 253
PREUPZ   EQU   178
DSDRLN   DC    F'400'    LENGTH OF A DSDR
*                                                                     *
*        LENGTHS OF RECORDS USED TO UPDATE BUFFER POINTER             *
*                                                                     *
PREUPX   DC    H'180'
PREUPJ   EQU   191                                              Z30JSSR
PREUPR   DC    H'197'                                           Z30JSSR
PREZERO  DC    X'00'
*
*        MODULE NAMES USED IN XCTL PARM LIST
*
PREXMN   DC    C'IGC0F06C'
PREIORE  DC    C'IGC0N06C'
QMNGWALN DC    AL3(280)                256 BYTE QMNGRIO WA+24(PL)Y02076
DDNTFULL EQU   22                       FULL COUNT OF DD ENTRIES Y02076
DDNTSWAS EQU   99                       SWITCH FOR DDNTS IN SWA  Y02076
COJFCBX  EQU   4    CODE FOR JFCBX
COGDG    EQU   8    CODE FOR GDG BIAS COUNT TABLE
CODSENQ  EQU   12   CODE FOR DSENQ TABLE
CODDNT   DC    H'1'                     CODE FOR DDNT TABLE      Y02076
DSDREND  EQU   X'10'     CODE TO LAST DSDR.
BLKEND   EQU   X'14'     CODE TO INDICATE END OF A DSDR.
BLKL     EQU   2    LENGTH OF DCBBLKSI FIELD
SUBALOC  EQU   130       TIOESTTC FIELD-INDICATES SUBALLOCATE REQUESTED
INPUT    EQU   X'0F'
SUREAD   EQU   X'7F'     RETURN CODE FOR SUCCESSFUL I/O COMPLETION.
JFCL     EQU   176       LENGTH OF JFCB TO BE WRITTEN OUT.
CDL      EQU   2    LENGTH OF CODE FIELD IN DSDR.
DDL      EQU   8         LENGTH OF TIOEDDNM FIELD
UCBTL    EQU   4                        DSDR UCBTYP FIELD LENGTH Y02076
SIOTL    EQU   4                   LENGTH OF SIOT               Z30JSSR
VLSQL    EQU   1                   LENGTH OF VOLUME SEQUENCE    Z30JSSR
UCBP     EQU   CDL+JFCL+DDL   OFFSET TO UCB INFO IN A DSDR.
SIOTFP   EQU   CDL+JFCL+DDL+UCBTL       OFFSET TO SIOT INFO-DSDR Y02076
VLSQP    EQU   CDL+JFCL+DDL+UCBTL+SIOTL OFFSET TO VOLSEQ        Z30JSSR
QSAMBSAM EQU   X'40'
NOTTAPDA EQU   X'5F'
PRETAPE  EQU   X'80'
RDBACK   EQU   X'0E'
DDNMP    EQU   CDL+JFCL  OFFSET TO DDNAME FIELD IN A DSDR.
TYPL     EQU   4         LENGTH OF UCBTYP FIELD
CKMSG2   EQU   64    INDICATES WTO MSG-INVALID-ERROR WHILE CREATING
*                   CHKPT D.S.
CKCHR    EQU   128  INDICATES CHR WRITTEN
DEBVLSQ  EQU   0         USED TO REFERENCE VOLUME SEQUENCE NO. IN DEB
VLSQ     EQU   36        OFFSET OF VOLSEQ NO IN DEB
DEBVSQ   EQU   1
CODE     EQU   0         OFFSET INTO BUFFER FOR RECORD CODE
NOTPRGD  EQU   X'FF'
IOBECBAD EQU   4
INDSEQ   EQU   X'80'
PURGEOPT EQU   X'C0'
LNJFCB   EQU   176                      LNGTH OF JFCB/X          Y02076
LNDDNT   EQU   176                      LNGTH OF DDNT            Y02076
LPL      EQU   24                       LNGTH OF PARM LIST       Y02076
UPDSIOT  EQU   X'10'                    SIOT UPDATED CODE        Y02076
TURNOFO  EQU   X'7F'                    TURN OFF OPEN BIT        Y02076
TURNOFS  EQU   X'EF'                    TURN OFF SIOT WRTE BIT   Y02076
K0       EQU   0                        CONSTANT 0               Y02076
K1       EQU   1                        CONSTANT 1               Y02076
K2       EQU   2                        CONSTANT 2               Y02076
K6       EQU   6                                                  M2192
K8       EQU   8                        CONSTANT 8               Y02076
K16      EQU   16                       VALUE 16                 YM7371
DEBPRFLN EQU   16                       LN OF DEB PREFIX         Y02049
ISAMDEB  EQU   X'80'                    DEB AMTYP FOR ISAM       YM7371
*                                                                     *
*        MAINTENANCE SPACE                                            *
*                                                                     *
PATCH    DC    XL((*-IGC0D06C)/20)'00'   FIVE PERCENT MAINTENANCE SPACE
*                                                                     *
DDNTREC  DSECT                          DDNT RECORD FORMAT       Y02076
DDNTIDNT DS    H                        DDNT ID = 0001           Y02076
DDNTUSCT DS    H                        NEXT AVAIL SLOT IN TBL   Y02076
DDNTLINK DS    F                        SVA OF NEXT DDNT         Y02076
DDNTDDNM DS    2F                       FIRST DDNAME             Y02076
         IEFQMIOP
         IEFJESCT
         IEFASIOT
         IEZJSCB                                                 Y02076
         IHAQDB                                                  Y02076
         IHADSAB                                                 Y02076
         IEFZB429                                                Y02076
         IEFASCTB                                                Y02076
         IEEVCHWA   VER=3
PURGDEB  EQU   CKREGSAV
PURGWD2  EQU   PURGDEB+4
PURGLST  EQU   PURGWD2+4
CKTSTEOV EQU   CKUNIT
CKEOVCMR EQU   CKUNIT+4
*                                                                     *
*        PRESERVE'S WORK AREA                                         *
*                                                                     *
PRESV    DS    F         XCTL PARAMETER LIST -
PREWD2   DS    F              FIRST 2 WORDS CONTAIN MODULE NAME
PRELSTAD DS    F              POINTER TO MODULE NAME
PRENXB   DS    F                   NEXT BYTE IN BUFFER.
PRENOB   DS    F                   NUMBER OF BYTES LEFT IN BUFFER.
PREAD    DS    CL1       SAVE AREA USED FOR ADDRESSES          @ZA30810
PREAD3   DS    CL3
PREADEOV DS    0F   SAVE AREA FOR INFO FOR EOV TEST             Z30JSSR
PREVLHLD DS    CL1                 VOLUME SEQUENCE HOLD AREA    Z30JSSR
         DS    CL3                                              Z30JSSR
PRNEOV   DS    F
PRESAVE  DS    12F  REGISTER SAVE AREA.
PRELNGTH EQU   *    END OF PRESERVE'S W.A.
         IEFJFCBN
*                                                                     *
*        WORK AREA USED BY QUEUE MANAGER                              *
*                                                                     *
QJOB     DSECT
SCALADCB DS    13F
SCADEB   DS    12F
SCATALLY DS    F
SCASTRKS DS    H    TT OF FIRST TRACT IN Q.
SCALTRKS DS    H    TT OF LAST TRACK IN Q.
SCARECPT DS    CL1  NUMBER OF RECORDS PER PHYSICAL TRACK.
*                                                                     *
*        MAPPING OF ECB                                               *
*                                                                     *
ECBSECT  DSECT
CMPCODE  DS    CL1            I/O COMPLETION CODE
RBADDR   DS    CL3            ADDR OF RB WAITING ON I/O
UCBSECT  DSECT
         IEFUCBOB
TIOTSECT DSECT
         IEFTIOT1
CVTSECT  DSECT
         CVT
         IKJTCB
         IEZDEB
         DCBD  DSORG=(BS,PO),DEVD=(DA,TA)
UCBINNO  EQU   SRTEJBNR       BIN NO IN SUB-UCB
CKRETCD1 EQU   CKRETCOD+1     RETURN CODE FIELD IN CHKWA
GDGTAB   EQU   INFMJFCB+4     TTR OF NEXT GDG TABLE
DCBSYND  EQU   DCBSYNAD+1          ADDRESSING SYNAD ADDRESS IN DCB
TIOTUCB  EQU   TIOEFSRT-1     UCB ADDRESS IN TIOT ENTRY
CKDCB1   EQU   CKDCBAD+1      CHKPT DCB ADDR IN CHKWA
JFCBVSQ1 EQU   JFCBVLSQ+1     VOLSEQ NO. IN JFCB
MAINUCB  EQU   X'FF'          FLAG FOR MAIN UCB
LNADDR   EQU   3              LENGTH OF ADDRESS
ZERO     EQU   X'00'
LNVLSQNO EQU   2              LENGTH OF VOLUME SEQUENCE NO IN DEB
EQUX16   EQU   4              SHIFT NUMBER IN REG LEFT 4=MULTIPLY BY 16
INCVLSQN EQU   32             INCREMENT TO DEB VOLSQ NO FROM DEBLINK
ONE      EQU   1
FIRSTVOL EQU   X'01'          FOR 1ST VOL, DEBVLSQ NO. = 1
DEFMOUNT EQU   X'20'          DEFERRED MOUNT BIT IN JFCB CAUSES DSDR TO
*                             MARK SIOT FOR REPIO TO MOUNT CORRECT VOL
LNWORD   EQU   4              LENGTH OF WORD
LNMODNAM EQU   8              LENGTH OF MODULE NAME IN XCTL PARMLST
LMAINUCB EQU   56             LENGTH OF MAIN UCB
ADDRBYTS EQU   7              ICM MASK FOR LOW ORDER THREE BYTES
M14      EQU   14             ICM MASK FOR HI-ORDER THREE BYTES  YM5777
M1       EQU   1              ICM MASK FOR LOW-ORDER BYTE      @ZA20785
CHAR2    EQU   C'2'           CHAR TO ALTER MOD NAME TO IGC0206C
JFCBMSK6 EQU   JFCBMASK+6
CKQMPARM EQU   CKERAS02                 ADR OF SPACE FOR QMNGRIO Y02076
SIOTAREA EQU   INFMJFCB                 SIOT READ IN OVER JFCB   Y02076
HIORDER  EQU   8                        HI ORDER BYTE ADDRESS    Y02076
DSDROCKP EQU   X'20'                    OPEN AT CHECKPOINT       Y02076
DSDRDALC EQU   X'80'                    DYNAMIC ALLOCATION       Y02076
DSDRCCAT EQU   X'40'                    DYNAMIC CONCATENATION    Y02076
SIOTRDIN EQU   CKERAS03                 ADDR OF SIOT READ INAREA Y02076
BLANK    EQU   X'40'                    BLANK CHARACTER          YM7323
 END
