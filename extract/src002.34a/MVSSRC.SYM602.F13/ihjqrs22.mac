RM22     TITLE 'IHJQRS22 AOS/2 REPMAIN 3 ROUTINE - IGC0705B'
*
*0000                                                            YM3022
* VS2/REL3 CHANGES AND DELETIONS
*014582,014593-014595                                            ZM0484
*DEL 014741,014791-014816                                        ZM0484
*014552-014659,015061,019158                                   @ZA03659
*C013361,A013362-013363,A018707                                @ZA17960
* APAR OZ31480 HAS BEEN FLAGGED AS @ZSUT222                    @ZSUT222
*C015723,017850,017928,019881,020699,020702                    @ZSUT222
*A017788-017798,018656                                         @ZSUT222
* VS2/REL4 CHANGES AND DELETIONS
*
*                                                              @Z40RSRB
*A460337-463237,A464637,A874837                                @ZA28860
*C336500,A337000-338000                                        @ZA31057
*A010289-010291                                                @ZA32921
* STATUS - CHANGE LEVEL 001
*
* FUNCTION- THIS ROUTINE RESTORES PERTINENT INFORMATION IN THE TCB,
*    RESTORES DEB'S, DEB EXTENSIONS, AND IRB'S AND MOVES THE     Y02076
*    CHECKPOINT TIME TIOT INTO THE RESTART WORKAREA.             Y02076
*    IT UPDATES THE RESTART DSAB'S WITH SELECTED FIELDS SAVED    Y02076
*    AT CHECKPOINT TIME. FINALLY, AN SSCR OR THE ECR (END OF     Y02076
*    CHECKPOINT RECORD) IS READ INTO THE SUR/SSCR BUFFER.        Y02076
*
* ENTRY POINTS
*          IGC0705B
*
* INPUT-
*    GPR12-CONTAINS ADDRESS OF RSTWA
*    RSTWA-CONTAINS THE ADDR OF NEXT DATA BLOCK AND NUMBER OF BYTES
*          LEFT IN BUFFER
*
* OUTPUT-
*    GPR12-CONTAINS ADDRESS OF RSTWA
*
* EXTERNAL REFERENCES
*    NONE
*
* EXITS, NORMAL-
*    XCTL TO IGC0805B
*
* EXITS, ERROR-
*    I/O ERROR- XCTL TO IGC0905B WITH RETURN CODE:
*          32  - INDICATING A MISSING DD ERROR
*          37  - INDICATING AN I/O ERROR
*          43  - WRONG LENGTH ERROR ON CHECKPOINT DATA SET
*
* TABLES/WORK AREAS
*
*    DCB-DCBSYNAD
*    .   DCBDEBAD
*
*    DEB-DEBTCBB                                                 Y02076
*    .   DEBDEBB                                                 Y02076
*    .   DEBIRBB                                                 Y02076
*    .   DEBAPPAD
*    .   DEBDCBAD                                                Y02076
*    .   DEBEXSCL                                                Y02076
*    .   DEBLNGTH                                                Y02076
*    .   DEBPROTG
*    .   DEBPREFX                                                Y02076
*    .   DEBXTNP                                                 Y02076
*                                                                Y02076
*    DEBX-DEBXLNGH                                               Y02076
*    .    DEBXDBPR                                               Y02076
*
*    TCB-TCBUSER
*    .   TCBJSCB                                                 Y02076
*    .   TCBFSA
*    .   TCBPKF                                                  Y02076
*    .   TCBRBP                                                  Y02076
*
*    RB-RBOPSW
*    .  RBIQE
*    .  RBNEXAV
*    .  RBGRSAVE
*    .  RBSIZE                                                   Y02076
*    .  RBSTAB2                                                  Y02076
*
*    JSCB-JSCDSABQ                                               Y02076
*                                                                Y02076
*    QDB-QDBFELMP                                                Y02076
*                                                                Y02076
*    DSAB-DSABDCBM                                               Y02076
*    .    DSABFCHN                                               Y02076
*    .    DSABFLG1                                               Y02076
*    .    DSABFLG2                                               Y02076
*    .    DSABFLG4                                               Y02076
*    .    DSABOPCT                                               Y02076
*    .    DSABORG                                                Y02076
*    .    DSABTCBP                                               Y02076
*    .    DSABTIOT                                               Y02076
*                                                                Y02076
*    TIOT-TIOEDDNM                                               Y02076
*
* ATTRIBUTES
*    KEY 0,SUPERVISOR STATE, ENABLED
*
* CHARACTER CODE DEPENDENCY
*
* NOTES
*    WRITTEN TO A 4K DESIGN POINT,TYPE-LOAD,SYSTEM LINK PACK AREA
*
*
         EJECT
IGC0705B CSECT
         BALR  RB,N0               ADDRESSABILITY FOR MODULE
         USING *,RB                BASE REGISTER 11
         USING RSTWA,RC            BASE FOR RESTART W.A.
         B     RPMNST              BRANCH AROUND DC
         DC    H'0'                PAD TWO BYTES TO ZERO
         DC    CL8'IGC0705B'       MODULE NAME                 @ZSUT222
         DC    CL8'&SYSDATE'       LAST DATE SHIPPED           @ZSUT222
         DC    CL8'@ZA32921'       LAST CODE SHIPPED           @ZSUT222
         DC    CL8'@SU80800'       SELECTABLE UNIT ID          @ZSUT222
RPMNST   L     R9,RSMWOFST         OFFSET TO REPMAIN'S W.A.      Y02076
         AR    R9,RC               TO ESTABLISH BASE FOR W.A.
         USING RPMWA1,R9           BASE FOR RPMWA
         LA    R2,RSBDCB           RESTART'S DCB
         USING IHADCB,R2           DCB
         LA    R7,RPM127           ADDRESS OF REPMAIN SYNAD ROUTINE
         STCM  R7,N7,DCBSYNAD+N1   STORE ADDR IN DCBSYNAD
         USING TCB,R5              TCB
         L     R5,RSTCBAD          GET TCB ADDRESS
         MVI   RSSWIT1,N0          SET SWITCHES TO ZERO
         MVC   RPMN40,RPMN40A      SET DEFAULT XCTL NAME
         XC    RPLNT(N4),RPLNT     CLEAR LENGTH FIELD
         MVI   RPLNT+N3,N4         INITIALIZE BLOCK LENGTH TO 4
         DROP  R2                  DCB
*
*        RESTORE TCB AND SVRB INFORMATION
*
R12A1    L     R3,RSBFSTAD         LOAD ADDR OF DATA
         MVC   TCBUSER,N1(R3)      MOVE ADDR OF OLD USER TO TCB
         BAL   RE,R13A1            GO TO INPUT BUFFER HANDLER
         L     R4,TCBEXT2          GET TCBEXTN PTR IN REG 4    @ZA32921
         MVC   20(4,R4),N1(R3)     MOVE IN CICS AUTH FIELD     @ZA32921
         BAL   RE,R13A1            GO TO INPUT BUFFER HANDLER  @ZA32921
         MVC   TCBFSA+N1(N3),N2(R3) MOVE OLD FSA TO TCB
         BAL   RE,R13A1            TO INPUT BUFFER HANDLER
         MVC   RSCKDCB,N1(R3)      MOVE IN CHECKPOINT DCB ADR.
         BAL   RE,R13A1            TO INPUT BUFFER HANDLER
         L     R4,RSCKDCB          GET CHPT DCB ADR.
         USING IHADCB,R4           DCB
         MVC   DCBSYNA(N3),N2(R3)  MOVE USER SYNAD ADR INTO
*                                  CHKPT DCB
         BAL   RE,R13A1            TO INPUT BUFFER HANDLER
         MVC   RSDCBSI(N2),N1(R3)  MOVE USER BLOCKSIZE
         MVI   RPLNT+N3,N2         LENGTH OF FIELD
         BAL   RE,R13A1            LINK TO BUFFER HANDLER
         L     R7,TCBRBP           GET ADDR OF RESTART SVRB      Y02076
         USING RBSECT,R7           RB
         MVC   RBGRSAVE(N64),N1(R3) MOVE GPR'S INTO SVRBA6C      Y02076
         MVI   RPLNT+N3,N64        LENGTH OF GPR'S
         BAL   RE,R13A1            TO INPUT BUFFER HANDLER
         DROP  R4,R7               DCB,RB
         EJECT
*
*        ROUTINE TO RESTORE DEB CHAIN
*
R12F1    SR    R4,R4               INITALIZE PTR TO NEXT DEB
         TM    N0(R3),X80          IS THIS A DEB
         BZ    R12H3               BRANCH IF NOT
R12J1    EQU   *                   TEST FOR DUMMY DEB
         SR    R0,R0               ZERO OUT REG FOR DEB LENGTH   YM3022
         CLI   N0(R3),N130         IS THIS A DUMMY DEB
         BE    R12J15              IF YES, BRANCH                YM5720
         CLI   N0(R3),X83          IS THIS A SUBSYSTEM DEB       YM5720
         BNE   R12J2               IF NOT, BRANCH                YM5720
         IC    R0,DEBLNGTH+N1-DEBXTNP(R3) GET LENGTH OF DEB IN   YM5720
*                                  DOUBLE WORDS                  YM5720
         B     R12J3               GET CORE FOR DEB              YM5720
R12J15   EQU   *                   DUMMY DEB                     YM5720
         IC    R0,DEBLNGTH+N1-DEBPREFX(R3) GET LENGTH OF DUMMY DEB
*                                  IN DOUBLE WORDS
         B     R12J3               GET CORE FOR DEB
R12J2    EQU   *                   GET LENGTH FOR ISAM/NON-ISAM DEB
         IC    R0,DEBLNGTH+N1-DEB(R3) GET LENGTH OF DEB IN
*                                  DOUBLE WORDS
R12J3    SLL   R0,N3               GET LENGTH IN BYTES
         ICM   R0,N8,RM230         INSERT SUBPOOL NUMBER         Y02076
         LR    R2,R0               SAVE LENGTH
         LA    R2,N0(R2)                CLEAR HI ORDER BYTE      Y02076
         MODESET EXTKEY=DATAMGT    SET KEY FOR GETMAIN           Y02076
         GETMAIN    R,LV=(0)
         MODESET EXTKEY=ZERO       RESTORE KEY 0                 Y02076
         ST    R1,CKSAVAR          STORE ADDR IN W.A.
         ST    R1,RSCORE           SAVE ADDR OF GOTTEN CORE
         CLI   N0(R3),N130         IS THIS A DUMMY DEB
         BNE   R12J35              BRANCH IF NO                  YM5720
         LA    R6,DEBBASIC-DEBPREFX(R1) DUMMY BASIC SECTION POINTER
         B     R12A4               GO MOVE IN DEB
R12J35   EQU   *                   TEST FOR SUBSYSTEM DEB        YM5720
         CLI   N0(R3),X83          IS THIS A SUBSYSTEM DEB       YM5720
         BNE   R12J4               IF NOT, BRANCH                YM5720
         LA    R6,DEBBASIC-DEBXTNP(R1) SUBSYSTEM BASIC SECTION   YM5720
*                                  ADDRESS (PREFIX=8 BYTES)      YM5720
         B     R12A4               GO MOVE IN DEB                YM5720
R12J4    LA    R6,DEBBASIC-DEB(R1) PTR TO DEB BASIC SECTION
         USING DEBBASIC,R6         DEB
         CLI   N0(R3),N129         IS DEB FOR ISAM DATA SET
         BNE   R12A4               NO-BRANCH
         LA    R7,DEBAPPAD+N1-DEB(R3) GET ADR OF WORD BEFORE ISAM PTRS
         LA    R8,N4               THERE ARE 4 OF THEM
R12A3    LA    R7,N4(R7)           GET ADR. OF NEXT PTR.
         LR    R3,R6               GET BASIC SECTION ADR.
         MVC   RP40XCTL(N2),N2(R7) HALFWORD TO APPROPRIATE BDY
         AH    R3,RP40XCTL         RELOCATE POINTER
         CR    R3,R6               Q. IS PTR ZERO
         BE    R12A5               YES, DO NEXT POINTER
         STCM  R3,N7,N1(R7)        SET EXTENT POINTER
R12A5    BCT   R8,R12A3            ALL POINTERS DONE
R12A4    LA    R3,N0(R0,R2)        GET LENGTH OF DEB
         ST    R3,RPLNT            STORE IN W.A.
         MVI   RSSWIT1,N1          POTENTIAL BIG BLOCK
         BAL   RE,R13A1            GET NEXT DATA
         CLI   DEBEXSCL,N0         IS THIS A SUBSYS TYPE DEB   @ZA17960
         BE    R12A2               YES BRANCH                  @ZA17960
         CLC   DEBDEVED(2),ABLEV   IS THIS A DUMMY SAM DEB     @ZA17960
         BNE   AROUND              NO BRANCH AROUND            @ZA31057
         TM    DEBEXSCL,X'02'      DUMMY DEB ???               @ZA31057
         BO    R12A2               YES                         @ZA31057
AROUND   EQU   *                                               @ZA31057
         TM    DEBPROTG,X80        EIGHT OR GREATER              YM7339
         BZ    R12A45              NO                            YM7339
         MVZ   DEBPROTG,TCBPKF     UPDATE DEB PROTECT KEY
R12A45   EQU   *                   INSTR MUST FOLLOW             YM7339
         OC    DEBAPPB(N3),DEBAPPB APPENDAGE PTR = 0
         BNZ   R12A2               BRANCH IF NOT
         MVC   DEBAPPB(N3),CKSAVAR+N1 UPDATE DEB APPEN PTR
R12A2    STCM  R4,N7,DEBDEBB       CHAIN DEBS
         MVC   DEBTCBB(N3),RSTCBAD+N1 STORE IN TCB ADR.
         STCM  R6,N7,RPMDEB+N1     DEB CHAIN INTO W.A.
         L     R7,DEBDCBAD         GET DCB ADDRESS
         USING IHADCB,R7           DCB
         STCM  R6,N7,DCBDEBA       DEB ADR TO DCB
         LR    R4,R6               SAVE BACK CHAIN
         DROP  R7                  DCB
*
*        ROUTINE TO RESTORE IRB'S AND IQE'S
*
         CLI   N0(R3),N18          Q.  IS NEXT BLOCK AN IRB
         BNE   R12F3               NO-BRANCH
         LH    R0,RBSIZE+N1+RBPRFLNA-RBSECT(R3) SIZE IN DOUBLE WORDS
         SLL   R0,N3               SIZE IN BYTES
         ICM   R0,N8,RM253         SUBPOOL 253
         LR    R6,R0               SAVE LENGTH
         LA    R6,N0(R6)                CLEAR HI ORDER BYTE      Y02076
         GETMAIN  R,LV=(0)
         ST    R1,RSCORE           SAVE IRB ADDRESS
         LR    R7,R1               ADDR OF GOTTEN CORE
         A     R7,KRBPRFLN         GET ADDR OF RB BASIC SECTION
         USING RBSECT,R7           RB
         STCM  R7,N7,DEBIRBB-DEBBASIC(R4) MOVE IT TO DEB
         LA    R3,N0(R6)           LENGTH OF IRB
         ST    R3,RPLNT            STORE IN W.A.
         MVI   RSSWIT1,N1          POTENTIAL BIG BLOCK
         BAL   RE,R13A1            TO INPUT BUFFER HANDLER
         TM    RBOPSW+N1,XF0       ZERO PROTECT KEY
         BZ    R12F2               YES DO NOT RESET KEY
         MVZ   RBOPSW+N1(N1),TCBPKF RESTORE PROTECT KEY
R12F2    EQU   *                   IQE PROCESSING
         TM    RBSTAB2,RBIQETP     ANY  IQE'S
         BC    NOTHI,R12F3         NO BRANCH TO CHECK DEB
         L     RD,RBNEXAV          POINTER TO NEXT AVAIL. RB
         AR    RD,R7               ADD IRB ADDRESS
         ST    RD,RBNEXAV          RESTORE TO RB FIELD
         L     RD,RBIQE            PTR. TO LIST ORIGIN OF IQE'S
         AR    RD,R7               ADD IRB ADR.
         ST    RD,RBIQE            RESTORE TO RBIQE FIELD
R12F3    EQU   *                   TEST FOR DEB
         TM    N0(R3),X80          IS THIS A DEB
         BO    R12J1               IF YES, GO PROCESS DEB        Y02076
         CLI   N0(R3),X20          IS THIS A DEB EXTENSION       Y02076
         BE    R12F4                    GO PROCESS DEB XTN     @ZA03659
         CLI   N0(R3),X21               A RESTORE LST(PIRL)?   @ZA03659
         BE    PIRL                YES PROCESS PIRL            @ZA28860
         CLI   N0(R3),X'22'        IS THIS THE FIRST EPCB ?    @ZA28860
         BE    EPCB1               YES BRANCH                  @ZA28860
         CLI   N0(R3),X'23'        IS THIS AN EPCB ???         @ZA28860
         BNE   R12H3               NO BRANCH FOR FLT PT REGS   @ZA28860
* WE WILL RESTORE THE EPCBS THAT WERE CHECKPOINTED             @ZA28860
* IN IHJQCP32 HERE.                                            @ZA28860
EPCBN    EQU   *                                               @ZA28860
         L     R0,EPCBCODE         SET UP SP230 AND BC LENGTH  @ZA28860
         LR    R2,R0               SAVE IN REG 2               @ZA28860
         LA    R2,0(0,R2)          CLEAR OUT SUBPOOL IN REG 2  @ZA28860
         GETMAIN R,LV=(0)          GETMAIN SPACE IN SP230      @ZA28860
         ST    R1,RSCORE           SAVE ADDRESS WE GETMAINED   @ZA28860
         ST    R2,RPLNT            SAVE LENGTH FOR MOVE        @ZA28860
         STCM  R1,N7,1(R6)         CHAIN EPCB INTO PIRL/EPCB   @ZA28860
         LR    R6,R1               SAVE ADDRESS                @ZA28860
         MVI   RSSWIT1,N1          SET BIG BLOCK SWITCH        @ZA28860
         BAL   RE,R13A1            GO TO BUFFER HANDLER        @ZA28860
         B     R12F3               CHECK NEXT RECORD           @ZA28860
EPCB1    EQU   *                                               @ZA28860
         LA    R6,24(0,R6)   POINT TO EPCB ADDRESS. REG 6 WAS  @ZA28860
*                            SET UP WHEN PROCESSING PIRL BELOW @ZA28860
         B     EPCBN               PROCESS EPCB                @ZA28860
PIRL     EQU   *                                               @ZA28860
*
*    ROUTINE TO REESTABLISH RESTORE I/O LIST (PIRL) - LENGTH
*    OF PIRL WAS SAVED IN DEBUSRPG FIELD AT CHECKPOINT TIME    @ZA03659
*
         DROP  R6                                              @ZA03659
         USING DEBBASIC,R4                                     @ZA03659
         SR    R0,R0                    CLEAR REG 0            @ZA03659
         ICM   R0,N3,DEBUSRPG+N2        GET PIRL LNGTH         @ZA03659
         LR    R2,R0                    SAVE LENGTH            @ZA03659
         ICM   R0,N8,RM254              SET SUBPOOL 254 ID     @ZA03659
         GETMAIN R,LV=(0)               GET BLOCK FOR PIRL     @ZA03659
         ST    R1,RSCORE                SAVE LAST CORE GOTTEN  @ZA03659
         STCM  R1,N7,DEBUSRPG+N1        PIRL ADR IN DEBUSRPG   @ZA03659
         LR    R6,R1                    SET PIRL ADDRESS IN R6 @ZA28860
         ST    R2,RPLNT                 LNGTH TO REPMAIN WA    @ZA03659
         MVI   RSSWIT1,N1               SET BIG BLOCK SWITCH   @ZA03659
         BAL   RE,R13A1                 TO BUFFER HANDLER      @ZA03659
         DROP  R4,R7               DEB, RB                     @ZA03659
         B     R12F3                    SEE IF NEXT BLK IS DEB @ZA03659
*                                                                Y02076
*        ROUTINE TO RESTORE DEB EXTENSIONS                       Y02076
*                                                                Y02076
R12F4    SR    R0,R0               CLEAR WORK REG                Y02076
         ICM   R0,N3,DEBXLNGH-DEBXTN+N1(R3) GET LENGTH OF EXT.   Y02076
         LR    R2,R0                    SAVE LENGTH              ZM0484
         ICM   R0,N8,RM230         INSERT SUBPOOL NUMBER         Y02076
         MODESET EXTKEY=DATAMGT    SET KEY FOR GETMAIN           Y02076
         GETMAIN R,LV=(0)                                        Y02076
         MODESET EXTKEY=ZERO       RESTORE KEY 0                 Y02076
         ST    R1,RSCORE           SAVE ADDR OF GOTTEN CORE      Y02076
         ST    R2,RPLNT                 LNGTH INTO RPMAIN WA     ZM0484
         MVI   RSSWIT1,N1               SET BIG BLOCK SWITCH     ZM0484
         BAL   RE,R13A1                 TO BUFFER HANDLER        ZM0484
         LA    R6,DEBBASIC-DEBPREFX POINT TO                     Y02076
         LNR   R6,R6               DEB                           Y02076
         AR    R6,R4               PREFIX                        Y02076
         USING DEBPREFX,R6         ADDR DEB PREFIX               Y02076
         L     R1,RSCORE                GET DEB EXT ADDR         ZM0484
         ST    R1,DEBXTNP          UPDATE DEB DEB EXT ADDR       Y02076
         USING DEBXTN,R1           ADDR DEB EXTENSION            Y02076
         ST    R4,DEBXDBPR         UPDATE DEB EXT DEB ADDR       Y02076
         NI    DEBXFLG1,X'FF'-DEBXDSSI RESET SECURITY BIT      @Z40RSRB
         DROP  R1,R6               DEB EXT AND DEB PREFIX        Y02076
         B     R12F3                    SEE IF NXT BLK IS DEB  @ZA03659
         EJECT
*
*        ROUTINE TO RESTORE FLOATING POINT REGISTERS
*
R12H3    MVC   RSREGSAV(N32),N1(R3) SAVE FLT PT REGS
         LD    R0,RSREGSAV         RESTORE
         LD    R2,RSREGSAV+N8      FLOATING
         LD    R4,RSREGSAV+N16     POINT
         LD    R6,RSREGSAV+N24     REGISTERS
         LA    R3,N32              LENGTH OF FLT PT REGS
         ST    R3,RPLNT            STORE IN W.A.
         BAL   RE,R13A1            TO INPUT BUFFER HANDLER
*
*     ROUTINE TO READ IN THE TIOT TO THE SAVE AREA
*
         MVC   RPLNT,RSTIOTO       LENGTH OF TIOT
         LA    R1,RSTIOT           ADDRESS OF SAVE AREA
         ST    R1,RSTIOTAD         SAVE PTR TO OLD TIOT
         MVI   RSSWIT1,N1          POTENTIAL BIG BLOCK           Y02076
         BAL   RE,R13A1            MOVE IN BLOCK
         EJECT
*                                                                Y02076
*        ROUTINE TO RESTORE CERTAIN DSAB INFORMATION AND UPDATE  Y02076
*        THE DEB DSAB ADDRESS                                    Y02076
*                                                                Y02076
R12H4    L     RF,TCBJSCB          GET JSCB ADDR                 Y02076
         USING IEZJSCB,RF          ADDR JSCB                     Y02076
         L     RF,JSCDSABQ         GET QDB ADDR                  Y02076
         USING QDB,RF              ADDR QDB                      Y02076
         L     RF,QDBFELMP         GET 1ST DSAB ADDR             Y02076
         L     R3,RSBFSTAD         GET RECORD ADDR               Y02076
         DROP  RF                  DROP QDB                      Y02076
R12J00   LR    R2,RF               GET 1ST DSAB ADDR             Y02076
         USING DSAB,R2             ADDR DSAB                     Y02076
         USING XDSAB,R3            ADDR DSAB INFO                Y02076
R12J10   L     R4,DSABTIOT         GET DD ENTRY ADDR             Y02076
         USING TIOENTRY,R4         ADDR DD ENTRY                 Y02076
         CLC   XDSADDNM,TIOEDDNM   DD NAMES MATCH                Y02076
         BE    R12J30              IF EQUAL, BR                  Y02076
         ICM   R2,M15,DSABFCHN     FETCH/TEST NEXT DSAB @        Y02076
         BNZ   R12J10              IF ANOTHER DSAB, BR           Y02076
***********************************************************************
*    IF DATA SET IS AN IMPLIED VSAM CATALOG (X'24') - THE GENERATED
*    DDNAME IS NOT NECESSARILY THE SAME BETWEEN CHECKPOINT AND
*    RESTART - FOR THESE DATA SETS DO NOT GENERATE ERROR CODE (034)
*    AND DO NOT UPDATE THE DSAB                                 ZA00103
***********************************************************************
         TM    XID,X24             IS IT PRIVATE CATL D.S.      ZA00103
         BO    R12J40              BRANCH IF YES                ZA00103
R12J20   MVI   RSRETCOD+N1,ERR032  SET MISSING DD ERROR CODE   @ZSUT222
         B     RPMERR              ERROR EXIT                    Y02076
R12J30   MVC   DSABOPCT,XDSAOPCT   RESTORE OPEN COUNT            Y02076
         MVC   DSABORG,XDSABORG    RESTORE DSORG                 Y02076
         MVC   DSABFLG1(L'DSABFLG1+L'DSABFLG2),XDSAFLG1 RESTORE  Y02076
*                                  FLAGS 1 AND 2                 Y02076
         OC    DSABFLG4,XDSAFLG4   RESTORE CKDS AND CKSI OF      Y02076
*                                  FLAG 4                        Y02076
         MVC   DSABDCBM,XDSADCBM   RESTORE DCB MODIFICATION MSK  Y02076
         TM    XDSAFLGS,XDSATCBP   WAS TCB @ IN CHKPT DSAB       Y02076
         BZ    R12J40              BR IF NOT                     Y02076
         MVC   DSABTCBP,RSTCBAD    RESTORE TCB ADDR              Y02076
R12J40   TM    XID,X44             WAS THIS THE LAST DSAB       ZA00103
         BO    R12J50              IF YES, BR                   ZA00103
         LA    R4,XDSABSIZ         GET LENGTH OF DSAB INFO       Y02076
         ST    R4,RPLNT            AND STORE IN WORKAREA         Y02076
         BAL   RE,R13A1            TO INPUT BUFFER HANDLER       Y02076
         L     R3,RSBFSTAD         GET RECORD ADDR               Y02076
         TM    XDSAFLGS,XDSACCAT   CONCATENATED DSAB ENTRY       Y02076
         BZ    R12J00              IF NO, GO INIT DSAB SCAN      Y02076
         ICM   R2,M15,DSABFCHN     FETCH/TEST NEXT DSAB ADDR     Y02076
         BZ    R12J20              NO MORE DSAB'S IS AN ERROR    Y02076
         L     R4,DSABTIOT         FETCH DD ENTRY ADDR           Y02076
         CLI   TIOEDDNM,BLANK      IS DD NAME BLANK              Y02076
         BNE   R12J20              IF NOT, IT'S AN ERROR         Y02076
         B     R12J30              GO RESTORE DSAB               Y02076
*                                                                Y02076
*        ROUTINE TO READ POSSIBLE SSCR OR EOD RECORD             Y02076
*                                                                Y02076
R12J50   MVC   RSLNGTH1,SSCRBUFL   ANTICIPATE 4K RECORD          Y02076
         STM   R1,RF,CKSAVAR+N4    SAVE REGS                     Y02076
         LA    RD,RSREGSAV         PTR TO SAVEAREA IN REG13      YM5312
         BAL   R7,R13D2            READ SSCR OR EOD RCD          Y02076
         LM    R1,RF,CKSAVAR+N4    RESTORE REGS                  Y02076
RSOUT    LR    R1,RC               LOAD REG 1 WITH ADDR OF RSTWA
         LA    RF,RPMN40           GET ADDR OF NEXT LOAD
         ST    RF,RP40XCTL         STORE IN RPWA1
         LA    RF,RP40XCTL         GET ADDR OF RPMWA FIELD
         XCTL  SF=(E,(15))         XCTL TO NEXT LOAD
         EJECT
*
*        INPUT BUFFER HANDLER ROUTINE
*
R13A1    DS    0H                  BUFFER HANDLER ROUTINE
         STM   R1,RF,CKSAVAR+N4    SAVE REGS
         LA    RD,RSREGSAV         SAVE AREA ADDRESS
         L     R3,RPLNT            LENGTH OF BLOCK
         L     R4,RSBFLWA          REMAINING BYTES
         L     RA,RSBFSTAD         NEXT ADDRESS IN BUFFER
         LA    RA,N1(RA)           ALLOW FOR CODE BYTE
         BCTR  R4,R0               ALLOW FOR CODE BYTE
         TM    RSSWIT1,N1          IS THIS A BIG BLOCK
         BZ    R13A2               NO-BRANCH
         NI    RSSWIT1,XFE         YES- TURN OFF SWITCH
R13B1    CR    R3,R4               ARE BYTES LEFT IN BLOCK G.T.
*                                  BYTES LEFT IN BUFFER
         BNH   R13F1               NO   USE BLOCK LENGTH
         LR    R2,R4               YES  USE BYTES LEFT IN BUFFER
         BAL   R5,R13E1            MOVE IN SUR
         L     R1,RSW001           RESTORE PTR TO NEXT BYTE IN GOTTEN
*                                  CORE
         B     R13B1               LOOP WITH LEFT OVER BYTES
R13F1    LR    R2,R3               USE BLOCK LENGTH AS CTR
         BAL   R5,R13E1                 MOVE IN SUR              Y02076
         B     R13A3X                   GO UPDATE PTRS           Y02076
         EJECT
*
*        MOVE IN SUR ROUTINE
*
R13E1    DS    0H                  SUR PROCESSING
         STM   R4,R7,RSERAS00      SAVE MOVE-LONG REGS           YM7357
         LR    R4,R1               GET TO-ADDRESS                YM7357
         LR    R6,RA               GET FROM-ADDRESS              YM7357
         LR    R5,R2               GET TO-LENGTH                 YM7357
         LR    R7,R2               GET FROM-LENGTH               YM7357
         MVCL  R4,R6               DATA TO CORE                  YM7357
         LM    R4,R7,RSERAS00      RESTORE MOVE-LONG REGS        YM7357
         AR    RA,R2               INCREMENT BUFFER PTR
         AR    R1,R2               INCREMENT AREA POINTER
         ST    R1,RSW001           SAVE PTR TO NEXT BYTE IN GOTTEN
         SR    R4,R2               GET BYTES LEFT IN BUFFER
         SR    R3,R2               GET BYTES LEFT IN BLOCK
         BZ    R13A4               NO MORE BYTES IN BUFFER
         LTR   R4,R4               ANY MORE BYTES IN BUFFER
         BCR   NE,R5               YES, RETURN
         BAL   R7,R13D2            READ NEW DATA
         BR    R5                  RETURN
R13A4    TM    RSSWIT1,N2          IS THE THE LAST BLOCK
         BO    R13C1               YES- NO MORE RECORDS
         B     R13A3               NO- READ NEXT DATA
R13A2    SR    R4,R3               COMPUTE NEW REMAINDER
         BZ    R13D1               NO MORE BYTES LEFT IN BUFFER
         AR    RA,R3               GET PTR TO NEXT DATA
R13A3    CLI   N0(RA),N0           MORE USEABLE DATA IN BUF
         BE    R13D1               NO
         LTR   R4,R4               ANY MORE BYTES IN BUFFER
         BZ    R13D1               NO
R13A3X   LR    R3,RA               NEW DATA ADDR TO R3
         ST    R3,RSBFSTAD         ADDRESS OF NEW DATA
         ST    R4,RSBFLWA          RESTORE REMAINDER
R13C1    LM    R1,RF,CKSAVAR+N4    RESTORE REGS
         L     R3,RSBFSTAD         ADDRESS OF DATA
         BR    RE                  RETURN
R13D1    BAL   R7,R13D2            TO I/O ROUTINE
         B     R13C1               RETURN
         EJECT
*
*        ROUTINE TO HANDLE I/O
*
R13D2    DS    0H                  I/O HANDLER
         LR    RA,RC               BASE ADDRESS
         A     RA,RSBFOFST         ADD OFFSET TO BUFFER
         READ  RSDECB1,SF,,(RA),,MF=E
         CHECK RSDECB1
         CLI   RSRETCOD+N1,ZERO    I/O ERRORS                   YA00153
         BNE   RPMERR              YES                          YA00153
         ST    RA,RSBFSTAD         1ST BYTE OF BUFFER
         LA    R4,SURL             GET BUFFER LENGTH
         ST    R4,RSBFLWA          INITIALIZE LENGTH OF BUFFER
         BR    R7                  RETURN
RPMERR   EQU   *                   PLACE ERROR
         MVI   RPMN40+N4,CHAR9     FOR I/O ERROR XCTL.
         MVC   RSREGSAV(8),MODID   SAVE NAME OF MODULE THAT    @ZSUT222
*                                  HAS DETECTED THE ERROR.     @ZSUT222
         STM   0,15,RSREGSAV+8     SAVE CURRENT REGISTERS.     @ZSUT222
         B     RSOUT               XCTL INTERFACE
*
*        SYNAD ROUTINE
*
RPM127   DS    0H                  SYNAD ROUTINE
         MVI   RSRETCOD+N1,ERR037  ERROR CODE                  @ZSUT222
         L     R1,RSIOBPT1              GET IOB ADDR            YA00153
         TM    N13(R1),WLR              IS THIS WRONG LEN ERR   YA00153
         BCR   ZEROES,RE                NO - RETURN             YA00153
*
*        IF WRONG LENGTH INDICATION WAS ENCOUNTERED ON READ OF   YM7056
*        SSCR, IGNORE IT.  THE SPIE SSCR MAY BE PRESENT.         YM7056
*
         CLC   RSLNGTH1,SSCRBUFL        IS THIS 4K BUFR LEN      YM7056
         BNE   RPM129                   NO, VALID WLR IND.       YM7056
         MVI   RSRETCOD+N1,N0           ZERO OUT ERROR CODE      YM7056
         BR    RE                       RETURN                   YM7056
RPM129   EQU   *
         MVI   RSRETCOD+N1,ERR043       SET WRONG LEN IND      @ZSUT222
         RETURN
*
         EJECT
RSMOVE   MVC   N0(N1,R1),N0(RA)    MOVE IN BLOCK
*
*        GENERAL CONSTANTS
*
RPMN40A  DC    CL8'IGC0805B'       CSECT NAME FOR XCTL
MODID    DC    CL8'IGC0705B'       MODULE ID                   @ZSUT222
KRBPRFLN DC    A(RBPRFLNA)         LENGTH OF RBPREFIX
ABLEV    DC    CL2'AV'             DUMMY DEB MODULE PREFIX     @ZA17960
SSCRBUFL DC    H'4096'             MAX LENGTH OF SSCR RECORD     Y02076
RM230    DC    AL1(230)            SUBPOOL 230                   Y02076
RM253    DC    AL1(253)            SUBPOOL 253
RM254    DC    AL1(254)            SUBPOOL 254
         DS    0F
EPCBCODE DC    XL4'E60000BC'       SUBPOOL 230 BC LENGTH EPCB  @ZA28860
         SPACE 2
PATCH    EQU   *                   END OF MODULE
RP3LN    EQU   PATCH-IGC0705B      LENGTH OF CSECT
RP3PALN  EQU   RP3LN/10            LENGTH OF PATCH AREA
RP3PATCH DS    XL(RP3PALN)         10 PERCENT ALLOWANCE FOR PATCH AREA
         SPACE
*
*        EQUATES FOR REGISTER BRANCHES
*
NE       EQU   7                   CONDITION CODE 7
NOTHI    EQU   12                  CONDITION CODE 12
         SPACE
*        EQUATES FOR BIT TESTING
*
X01      EQU   X'01'               TEST MASK                     Y02076
X20      EQU   X'20'               CODE FOR DEB EXTENSION        Y02076
X21      EQU   X'21'               RESTORE LIST(PIRL) CODE     @ZA03659
X44      EQU   X'44'               LAST DSAB RCD CODE            Y02076
XFE      EQU   X'FE'               X'FE'
X80      EQU   X'80'               CODE FOR DEB
X83      EQU   X'83'               CODE FOR SUBSYSTEM DEB        YM5720
XF0      EQU   X'F0'               MASK FOR PROTECT KEY
         SPACE
*        EQUATES FOR GENERAL DISPLACEMENTS
*
N0       EQU   0                   0
N1       EQU   1                   1
N2       EQU   2                   2
N3       EQU   3                   3
N4       EQU   4                   4
N7       EQU   7                   7
N8       EQU   8                   8
N12      EQU   12                  12
N13      EQU   13                       CONSTANT 13             YA00153
N16      EQU   16                  16
N18      EQU   18                  CODE FOR IRB
N20      EQU   20                  20
N24      EQU   24                  24
X24      EQU   X'24'               IMPLIED PRIV. CATL DSAB CODE ZA00103
N28      EQU   28                  28
N32      EQU   32                  LENGTH OF F.P.REGISTERS
N64      EQU   64                  LENGTH OF GPR
N128     EQU   128                 CODE FOR NON-ISAM DEB
N129     EQU   129                 CODE FOR ISAM DEB
N130     EQU   130                 CODE FOR DUMMY DEB
ZERO     EQU   0                        0 FOR TESTING RET CODE  YA00153
ZEROES   EQU   8                        CONDITION FOR BCR       YA00153
WLR      EQU   X'40'                    WRONG LENGTH RECORD     YA00153
*                                       INDICATION IN IOB       YA00153
ERR043   EQU   43                       ERROR CODE FOR WRONG   @ZSUT222
*                                       LENGTH RECORD WHILE     YA00153
*                                       READING CHKPT D/S       YA00153
*
*        GENERAL REGISTER EQUATES
*
R0       EQU   0                   REGISTER 0
R1       EQU   1                   REGISTER 1
R2       EQU   2                   REG 2
R3       EQU   3                   REG 3
R4       EQU   4                   REG 4
R5       EQU   5                   REG 5
R6       EQU   6                   REG 6
R7       EQU   7                   REG 7
R8       EQU   8                   REG 8
R9       EQU   9                   REG 9
RA       EQU   10                  REG 10
RB       EQU   11                  REG 11
RC       EQU   12                  REG 12
RD       EQU   13                  REG 13
RE       EQU   14                  REG 14
RF       EQU   15                  REG 15
         SPACE
RPMWA1   DSECT
*
*        DSECT FOR REPMAIN WORK AREA
*
RPMERAS1 DS    F                   TEMP SAVE AREA                Y02076
RMNEOV   DS    F                   TO TEST IF EOV OCCURRED
RSBFSTAD DS    F                   ADDRESS OF DATA
RSBFLWA  DS    F                   NUMBER OF BYTES REMAINING IN BUFFER
RPMMSS1  DS    F                   ADDR OF NEW L-SHAPED PROG MSS CHAIN
RPMMSS2  DS    F                   ADDRESS OF NEW INIT MSS CHAIN
RPMMSS3  DS    F                   ADDRESS OF NEW P/P MSS CHAIN
RPMRB    DS    F                   ADDRESS OF RESTORED RB CHAIN
RPMLLE   DS    F                   ADDRESS OF RESTORED LLE CHAIN
RPMCDE   DS    F                   ADDRESS OF RESTORED CDE CHAIN
RPMDEB   DS    F                   ADDRESS OF RESTORED DEB CHAIN
RPMFOE   DS    F                   ADDRESS OF RESTORED FOE CHAIN
RSCORE   DS    F                   ADDR OF CORE AQUIRED BY LAST GETMAIN
RSW001   DS    F                   POINTER TO NEXT BYTE AVAILABLE CORE
RSW002   DS    F                   POINTER TO REPMAIN SYNAD ROUTINE
RPLNT    DS    F                   LENGTH OF THE BLOCK
RMADEOV  DS    F                   SAVE AREA FOR INFORMAION NEEDED
         DS    0D                  ALIGNMENT
CKSAVAR  DS    16F                 GENERAL SAVE AREA
RPMN40   DS    D                   MODULE NAME FOR XCTL
RP40XCTL DC    F'0'                POINTER TO XCTL PARAMETER LIST
RSSWIT1  DS    X'00'               BIG BLOCK INDICATOR
*
*        GENERAL EQUATES
*
CHAR9    EQU   C'9'                CHAR FOR XCTL TO REPMAIN 5
SURL     EQU   400                 BUFFER LENGTH                 YM7049
ERR037   EQU   37                  I/O ERROR CODE              @ZSUT222
ERR032   EQU   32                  MISSING DD ERROR CODE       @ZSUT222
BLANK    EQU   C' '                BLANK CONSTANT                Y02076
M7       EQU   7                   INSERT CHAR MASK              Y02076
M15      EQU   15                  INSERT CHAR MASK              Y02076
         EJECT
*                                                                Y02076
*        DSECT FOR DSAB SUR RECORD                               Y02076
*                                                                Y02076
XDSAB    DSECT                     DSAB BLK DSECT                Y02076
XID      DS    CL1                 SUR ID                        Y02076
XDSAOPCT DS    CL2                 DCB OPEN COUNT                Y02076
XDSABORG DS    CL2                 DATA SET ORG                  Y02076
XDSAFLG1 DS    CL1                 DSAB FLAG 1                   Y02076
XDSAFLG2 DS    CL1                 DSAB FLAG 2                   Y02076
XDSAFLG4 DS    CL1                 DSAB FLAG 4                   Y02076
XDSADCBM DS    CL6                 DCB MODIFICATION MASK         Y02076
XDSADDNM DS    CL8                 DD NAME                       Y02076
XDSAFLGS DS    CL1                 DSAB PROCESS FLAGS            Y02076
XDSACCAT EQU   X'80'               DSAB IS CONCATENATED          Y02076
XDSATCBP EQU   X'40'               DSAB HAS TCB ADDR             Y02076
XDSABSIZ EQU   *-XDSAOPCT          DSAB BLK SIZE                 Y02076
         TITLE 'IHJQRS22 - REPMAIN  WORK AREA'
         IEEVRSWA  VER=3    USE AOS2  VERSION OF WA
         TITLE 'IHJQRS22 - DATA CONTROL BLOCK'
*  DATA CONTROL BLOCK
         IHADCB DSORG=(PO,PS),DEVD=(DA,TA)
         TITLE 'IHJQRS22 - TASK CONTROL BLOCK'
*  TASK CONTROL BLOCK
         IKJTCB
         TITLE 'IHJQRS22 - REQUEST BLOCK - S.V.R.B.,I.R.B.'
*  REQUEST BLOCK - S.V.R.B.,I.R.B.
         IKJRB
         TITLE 'IHJQRS22 - DATA EVENT BLOCK'
*  DATA EVENT BLOCK
         IEZDEB
         TITLE 'IHJQRS22 - JSCB'
         IEZJSCB                                               , Y02076
         TITLE 'IHJQRS22 - QDB'
         IHAQDB                                                , Y02076
         TITLE 'IHJQRS22 - DSAB'
         IHADSAB                                               , Y02076
         TITLE 'IHJQRS22 - TIOT'
         IEFTIOT1                                              , Y02076
         EJECT
         END
