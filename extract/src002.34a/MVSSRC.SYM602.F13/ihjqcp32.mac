         TITLE 'IHJQCP32 CHECKMAIN 3 ROUTINE - IGC0H06C'
*
* STATUS
*
* FUNCTION
*
*    CHECKMAIN 3 CREATES A RECORD (SUR) OF CERTAIN USER RELATED
*    AND DATA MANAGEMENT CONTROL BLOCKS AND OUTPUTS THIS
*    RECORD TO THE CHECKPOINT DATA SET. FOLLOWING ARE THE        Y02076
*    RECORDS, LENGTHS, AND ASSOCIATED SUR CODES IN THE ORDER     Y02076
*    THEY ARE BUILT AND WRITTEN TO THE CHECKPOINT DATA SET BY    Y02076
*    THIS MODULE:                                                Y02076
*                                                                Y02076
*    RECORD TYPE             LENGTH      SUR CODE                Y02076
*                                                                Y02076
*    TCBUSER FIELD              4         X'0F'                  Y02076
*    TCBCAUF FIELD              4         X'0F'                @ZA32921
*    TCBFSA FIELD               4         X'0F'                  Y02076
*    CHECKPOINT DCB ADDR        4         X'0F'                  Y02076
*    CHECKPOINT DCB SYNAD       4         X'0F'                  Y02076
*    CHECKPOINT DCB BLKSIZE     2         X'0F'                  Y02076
*    REGISTERS (G.P.)          64         X'10'                  Y02076
*    DEB (NON-ISAM)          VARIABLE     X'80'                  Y02076
*    DEB (ISAM)              VARIABLE     X'81'                  Y02076
*    DEB (DUMMY)             VARIABLE     X'82'                  Y02076
*    IRB                     VARIABLE     X'12'                  Y02076
*    DEB EXTENSION           VARIABLE     X'20'                  Y02076
*    REGISTERS (FLOATING)      32         X'13'                  Y02076
*    TIOT                    VARIABLE     X'14'                  Y02076
*    DSAB RECORD (NON-LAST)    22         X'04'                  Y02076
*    DSAB RECORD (LAST)        22         X'44'                  Y02076
*    SPIE SSCR               VARIABLE    X'0102'                 Y02076
*
* ENTRY POINTS
*
*    IGC0H06C -ENTERED FROM THE CHECKMAIN 2 ROUTINE
*
* INPUT
*    GPR12- ADDRESS OF CHECKPOINT WORK AREA
*
* OUTPUT
*    GPR1-CONTAINS ADDRESS OF CHKWA
*
* EXTERNAL REFERENCES
*    NONE
*
* EXITS, NORMAL
*    TO I/O RESUME TO INDICATE NORMAL COMPLETION OF
*    THE CHECKMAIN FUNCTIONS
*
* EXITS, ERROR
*    TO RESUME I/O ROUTINE (IGC0N06C) VIA XCTL TO
*    PROVIDE ITS NORMAL FUNCTIONS AND TO PASS AN ERROR
*    CODE TO THE CHECKPOINT EXIT ROUTINE INDICATING THAT
*    AN I/O ERROR HAS OCCURRED.
*    UPON EXIT THE PARAMETERS ARE AS FOLLOWS-
*    GPR 1 - ADDRESS OF CHKWA
*    CHKWA - AN ERROR CODE OF X'0C' IS PASSED IN THE
*             LAST BYTE OF THE CKRETCOD FIELD.
*
*    2) TO RESUME I/O ROUTINE (IGC0N06C) VIA XCTL TO
*    PROVIDE ITS NORMAL FUNCTIONS AND TO PASS AN ERROR
*    CODE TO THE CHECKPOINT EXIT ROUTINE THAT AN
*    UNRECOVERABLE EOV CONDITION (TWO RETRIES HAVE
*    OCCURRED ON TAPE, OR THE DATA SET IS ON A DIRECT
*    ACCESS DEVICE) HAS OCCURRED.
*    UPON EXIT THE PARAMETERS ARE THE SAME AS FOR CASE 1
*    EXCEPT THAT THE LAST BYTE OF THE CKRETCOD FIELD
*    CONTAINS AN X'08'.
*
*    3) TO CHECKPOINT HOUSEKEEPING ROUTINE (IGC0206C) TO
*    ATTEMPT REPROCESSING ON A NEW TAPE WHEN AN EOV
*    HAS OCCURRED FOR THE FIRST TIME ON TAPE
*
* TABLES/WORK AREAS
*    CHKWA
*
*    DCB   DCBDEBAD
*    .     DCBSYNAD
*    .     DCBMACRF
*    .     DCBDSORG                                              Y02076
*
*    DEB   DEBDCBAD                                              Y02076
*    .     DEBNNEXT
*    .     DEBAPPG
*    .     DEBAPPAD                                              Y02076
*    .     DEBDEBAD                                              Y02076
*    .     DEBXSCL                                               Y02076
*    .     DEBFIEAD                                              Y02076
*    .     DEBFLGS1                                              Y02076
*    .     DEBIRBAD                                              Y02076
*    .     DEBLNGTH                                              Y02076
*    .     DEBXTNP                                               Y02076
*
*    DEBX  DEBXLNGH                                              Y02076
*
*    RB    RBIQE
*    .     RBNEXAV
*    .     RBREGSAVE                                             Y02076
*    .     RBSIZE                                                Y02076
*    .     RBSTAB2                                               Y02076
*
*    TCB   TCBUSER
*    .     TCBTIO
*    .     TCBDEB
*    .     TCBFSA
*    .     TCBOTC
*    .     TCBRBP
*    .     TCBJSCB                                               Y02076
*                                                                Y02076
*    JSCB  JSCDSABQ                                              Y02076
*                                                                Y02076
*    QDB   QDBFELMP                                              Y02076
*                                                                Y02076
*    DSAB  DSABDCBM                                              Y02076
*    .     DSABFCHN                                              Y02076
*    .     DSABFLG1                                              Y02076
*    .     DSABFLG2                                              Y02076
*    .     DSABFLG4                                              Y02076
*    .     DSABOPCT                                              Y02076
*    .     DSABORG                                               Y02076
*    .     DSABTCBP                                              Y02076
*    .     DSABTIOT                                              Y02076
*                                                                Y02076
*    TIOT  TIOEDDNM                                              Y02076
*
* ATTRIBUTES
*    KEY 0, SUPERVISOR STATE, ENABLED.
*
* CHARACTER CODE DEPENDENCY
*    NONE
*
* NOTES
*    APPLICABILITY-VS2-2
*    MODULE CHARACTERISTICS-WRITTEN TO A 4K DESIGN POINT
*    TYPE- LOAD, RESIDENCE- SYSTEM LINK PACK AREA
*
* VS2/3 CHANGES/DELETIONS
*013044                                                         ZA03159
*008883-009137,009535,009692-009710,013044-013055              @ZA03659
*007856-007860                                                 @ZA03659
*C814002,820402                                                @ZA06111
*A00817013,00817023,01355503                                   @ZA06140
*A888604-888607                                                @ZA06667
*A00882503-00882504                                            @ZA08283
*C008827                                                       @ZA10272
*C00912803                                                     @ZA12190
*A00882704-00882705                                            @ZA11565
*C007980-007996,A007997-007998,A013003                         @ZA17960
*A008840-008845                                                @ZA27047
*A009713-009733,013006                                         @ZA28860
*A007260-007280                                                @ZA32921
*
         EJECT
IGC0H06C CSECT
*                                                                YM2776
         BALR  RB,E0               ESTABLISH BASE REGISTER
         USING *,RB                BASE REGISTER 11
         USING CHKWA,RC            BASE FOR CHECKPOINT WORK AREA
         USING TCB,R4              BASE FOR TCB
         USING IHADCB,R2           DCB
         CNOP  4,8                 ALIGN EYE-CATCHER TO DOUBLE WORD
         B     C10A1               BRANCH AROUND CSECT NAME CONSTANT
         DC    CL8'IGC0H06C'       CSECT NAME
         DC    CL8'@ZA32921'       LAST CODE SHIP
         DC    CL8'&SYSDATE'       LAST DATE SHIP
C10A1    L     R2,CKDCBAD          CHKPT. DCB ADDRESS
         LA    R7,C13B5            ADDRESS OF SYNAD ROUTINE
         STCM  R7,E7,DCBSYNAD+E1   STORE ADDRESS IN DCB
         MVC   CKMN40(E8),CKMN40A  SET XCTL DEFAULT EXIT TO IGC0N06C
         MVI   CKLNT+E3,E4         INIT CKLNT TO 4
         L     R4,CKTCBAD          GET JOB STEP TCB
         DROP  R2                  DCB
         SPACE 2
*
*        SAVE TCB FIELDS AND PREVIOUS CHECKPOINT DATA
*        THE USER BLKSIZE WILL BE WRITTEN IN THE SUR
*
*        THIS ROUTINE WILL CHECKPOINT VARIOUS TCB FIELDS
*        NECESSARY FOR RESTART.
         SPACE 2
         LA    R3,TCBUSER          ADDRESS OF TCBUSER FIELD
         MVI   CKCODE,E15          CODE=X'0F'
         BAL   RD,C13A1            LINK TO BUFFER HANDLER RTN
         L     R3,TCBEXT2          GET THE ADDRESS OF TCB XTN  @ZA32921
         LA    R3,20(R3)           POINT TO CICS AUTH AREA     @ZA32921
         BAL   RD,C13A1            PUT IT OUT                  @ZA32921
         LA    R3,TCBFSA           ADDR OF FIRST PP SAVE AREA
         BAL   RD,C13A1            LINK TO BUFFER H.R.
         LA    R3,CKDCBAD          CHECKPOINT DCB ADDRS
         BAL   RD,C13A1            LINK TO BUFFER H.R.
         LA    R3,CKSYNAD          GET USER'S CHKPT SYNAD ADDRESS
         BAL   RD,C13A1            LINK TO BUFFER HDLR RTN
         LA    R3,CKDCBSI          GET ADDR OR USER'S BLKSIZE
         MVI   CKLNT+E3,E2         LENGTH OF FIELD
         BAL   RD,C13A1            LINK TO BUFFER HDLR RTN
         L     R3,TCBRBP           GET ADDR OF CHKPT SVRB
         LA    R3,RBGRSAVE-RBSECT(R3) G.P. REGISTERS
         MVI   CKCODE,E16          CODE=X'10'
         MVI   CKLNT+E3,E64        LENGTH OF USER'S GPR'S
         BAL   RD,C13A1            LINK TO BUFFER HDLR RTN
         EJECT
*        CHECKPOINTING THE P/P DEB'S AND IRB'S - THIS ROUTINE WILL
*        CHECKPOINT ALL NORMAL,DUMMY, AND ISAM DEB'S ASSOCIATED WITH
*        THE P/P TCB AS WELL AS ANY IRG'S ASSOCIATED WITH THE DEB'S.
*        SUR CODES ASSIGNED ARE ISAM DEB (X'81'), DUMMY DEB (X'82'),
*        NON-ISAM DEB (X'80'), IRB (X'12').
         SPACE 3
*
*        START OF DEB PROCESSING
*
         L     R8,TCBDEB           GET DEB ADDRESS FORM TCB
         USING DEBBASIC,R8         DEB
C12F1    LR    R3,R8               SAVE ADDRESS OF DEBBASIC
         S     R3,KDEBAVTL         GET ADDRESS OF DEB APPENDAGE TABLE
         SR    RF,RF               CLEAR WORKREG
         IC    RF,DEBLNGTH-DEB(R3) GET LENGTH OF DEB IN DBLE WORDS
         SLL   RF,E3               GET LENGTH IN BYTES
         LR    R0,RF               GET DEB LENGTH                YM7807
         ICM   R0,M8,SP253         INSERT SUBPOOL NUMBER         YM7807
         ST    R0,CKERAS04         SAVE R0 FOR FREEMAIN          YM7807
         GETMAIN R,LV=(0)          GET CORE FOR DEB WORK SPACE   YM7807
         LH    RF,CKERAS04+E2      RESTORE DEB LENGTH            YM7837
         ST    R1,CKERAS05         SAVE R1 FOR FREEMAIN          YM7807
         LA    R7,DEBAVTLN(R1)          CALC DEBBASIC WA ADR   @ZA03659
         ST    R7,CKERAS07              SAVE FOR PURGE/RESTORE @ZA03659
         ST    R3,CKERAS06         SAVE DEB ADDRESS              YM7807
         LR    R7,R8               GET DEB ADDR FOR CALC         YM5720
         LA    R9,DEBPRFLN         GET LENGTH OF PREFIX          YM5720
         SR    R7,R9               POINT TO DEB PREFIX           YM5720
         USING DEBPREFX,R7         ADDRESS DEB PREFIX            YM5720
         L     R9,DEBXTNP          GET DEB EXTENSION ADDR        YM5720
         USING DEBXTN,R9           ADDRESS DEB EXTENSION         YM5720
         CLC   DEBDEVED(2),ABLEV   IS THIS A SAM DUMMY DEB     @ZA17960
         BE    DUMMY               BRANCH AHEAD IF YES         @ZA17960
         CLI   DEBEXSCL,X'00'      POSSIBLE SUBSYSTEM DEB      @ZA17960
         BNE   C12F2               BRANCH IF NOT               @ZA17960
DUMMY    EQU   *                                               @ZA17960
         LA    R3,DEBPREFX-DEB(R3) POINT TO BEGINNING OF DUMMY DEB
         MVI   CKCODE,E130         CODE= X'82' FOR DUMMY DEB
         L     R7,DEBXDSAB         FETCH DSAB ADDRESS            YM5720
         USING DSAB,R7             ADDRESS DSAB                  YM5720
         L     R7,DSABTIOT         FETCH TIOT ENTRY ADDRESS      YM5720
         USING TIOENTRY,R7         ADDRESS TIOT ENTRY            YM5720
         TM    TIOELINK,TIOESSDS   SUBSYSTEM DATA SET            YM5720
         DROP  R7                  TIOT ENTRY ADDRESSABILITY     YM5720
         BZ    C12F41              IF NOT, BRANCH              @ZA06111
         LA    R3,E8(,R3)          ADJUST SUBSYSTEM DEB PREFIX   YM5720
*                                  ADDRESS (PREFIX=8 BYTES)      YM5720
         MVI   CKCODE,EX83         CODE X'83' = SUBSYSTEM DEB    YM5720
         LA    R7,DEBPRLSS(R1)     LOAD SUBSYSTEM PREFIX       @ZA06140
         ST    R7,CKERAS07         SAVE FOR PURGE RESTORE      @ZA06140
         B     C12F41              BR TO PUT DEB IN BUFFER     @ZA06111
C12F2    EQU   *                                                 Y02049
         TM    DEBXDSO1,DCBDSGIS   IS THIS AN ISAM DATA SET      Y02049
         BZ    C12F4               NO - BRANCH
         TM    DEBXMCF1,DCBMRECP   IS THIS VALID ISAM DCB        Y02049
         BNZ   C12F4               NO, IT IS AN EXCP DCB. BR.
         DROP  R9                                                Y02049
         LA    R7,DEBAPPAD         GET PTR TO ISAM EXTENT PTRS
         LA    R9,CMSYSA+E2        GET PTR TO TEMP SAVE AREA
         LA    R6,E4               LOOP COUNT=4
C12F3    LA    R7,E4(R7)           POINT TO NEXT (FIRST) ONE
         LA    R9,E2(R9)           BUMP TEMP SAVE AREA PTR
         L     R2,E0(R7)           GET FIRST PTR
         LA    R2,E0(R2)           ZERO HI BYTE
         LTR   R2,R2               PTR IS ZERO
         BZ    C12F7               YES BRANCH
         SR    R2,R8               GET RELATIVE TRACK OFFSET
C12F7    STH   R2,E0(R9)           SAVE RELATIVE OFFSET IN CHKWA
         BCT   R6,C12F3            DECREMENT COUNT
         MVI   CKCODE,E129         CODE=X'81' FOR ISAM DEB
         B     C12F41              CONTINUE PROCESSING           YM7807
C12F4    MVI   CKCODE,E128         CODE=X'80' FOR NON ISAM DEB
*
*        SINCE THE TIOT IS A SERIALLY REUSABLE RESOURCE, THE     YM7807
*        ORDER OF THE UCB ENTRIES FOR ANY DD ENTRY CANNOT BE     YM7807
*        EXPECTED TO REFLECT THE STATUS OF ANY PARTICULAR DCB    YM7807
*        OR DEB.  THEREFORE, WHEN THE DEB'S ARE WRITTEN TO THE   YM7807
*        CHECKPOINT DATA SET, THE UCB ADDRESSES WILL BE REPLACED YM7807
*        BY VOLUME SERIAL NUMBERS IN THE FOLLOWING MANNER:       YM7807
*
*      0 +++++++++++                                             YM7807
*        + VOL SER +      VOL SER NO.= VOLUME SERIAL NUMBER      YM7807
*      4 +++++++++++                                             YM7807
*        + NO.+ CC +      CCHH = EXTENT INFORMATION IN DEB       YM7807
*      8 +++++++++++                                             YM7807
*        + *H + CC +      * = SAVE AREA FOR OVERLAYED FILE MASK  YM7807
*     12 +++++++++++                                             YM7807
*        + HH + TT +      TT = NUMBER OF TRACKS IN EXTENT        YM7807
*     16 +++++++++++                                             YM7807
*
*        THE RESTART MOUNT VERIFICATION PROCESSOR (IGC0M05B)     YM7807
*        WILL RESTORE THE DEB EXTENTS AT RESTART TIME.           YM7807
*
C12F41   EQU   *                                                 YM7807
         STM   R4,R7,CKERAS00      SAVE MOVE-LONG REGS           YM7807
         L     R4,CKERAS05         LOAD TO-ADDRESS               YM7807
         LR    R6,R3               LOAD FROM-ADDRESS             YM7807
         LR    R5,RF               LOAD TO-LENGTH                YM7807
         LR    R7,RF               LOAD FROM-LENGTH              YM7807
         MVCL  R4,R6               MOVE DEB TO GOTTEN AREA       YM7807
         L     R3,CKERAS05         GET NEW DEB POINTER           YM7807
         LM    R4,R7,CKERAS00      RESTORE MOVE-LONG REGS        YM7807
         CLI   CKCODE,E130         IS THIS A DUMMY DEB         @ZA08283
         BE    C12F5               YES BYPASS NEXT TESTS       @ZA10272
         CLI   CKCODE,EX83         IS THIS A SUBSYSTEM DEB     @ZA11565
         BE    C12F5               YES BYPASS NEXT TESTS       @ZA11565
         CLC   DEBAPPB-DEB(E3,R3),CKERAS06+E1  DOES APP VECTOR   YM7807
*                                  TABL PTR POINT TO DEBAVT?     YM7807
         BNE   C12F42              NO, GET VOL SER NUMBER        YM7807
         XC    DEBAPPB-DEB(E3,R3),DEBAPPB-DEB(R3) ZERO OUT AVT   YM7807
*                                  POINTER IN DEB                YM7807
C12F42   EQU   *                                                 YM7807
         CLI   DEBEXSCL-DEB(R3),E4 IS THIS A DA DEB?             YM7807
         BNE   C12F5               NO, BYPASS DA PROCESSING      YM7807
         CLI   DEBAMTYP-DEB(R3),E1 IS THIS A VSAM DEB?           YM7837
         BE    C12F5               YES, BYPASS PROCESSING        YM7837
         CLI   CKCODE,E129         IS THIS AN ISAM DEB?        @ZA27047
         BNE   NOTISAM             NO,BYPASS NEXT TEST         @ZA27047
         TM    DEBFLGS1-DEB(R3),DEBCINDI IS THIS AN ISAM (CI)  @ZA27047
*                                  COMPATABILITY INTERFACE DEB @ZA27047
         BO    C12F5               YES, BYPASS DA PROCESSING   @ZA27047
NOTISAM  EQU   *                                               @ZA27047
         STM   R4,R6,CKERAS00      SAVE REGISTERS                YM7807
         SR    R4,R4               CLEAR COUNT REGISTER          YM7807
         IC    R4,DEBNMEXT-DEB(R3) INSERT NO. OF EXTENTS         YM7807
         LA    R5,DEBBASND-DEB(R3) POINT TO DASD SECTION OF DEB  YM7807
         USING DEBDASD,R5          DA EXTENT SECTION OF DEB      YM7807
         USING UCBOB,R6            UCB ADDRESSABILITY            YM7807
         CLI   CKCODE,E129         IS THIS AN ISAM DEB?          YM7807
         BE    C12F44              YES, BYPASS FIRST(PHONY) XTNT YM7807
C12F43   EQU   *                                                 YM7807
         L     R6,DEBUCBAD         POINT TO UCB                  YM7807
         STCM  R6,M8,DEBSTRHH      DEBDVMOD TO FIRST BYTE OF     YM7807
*                                  STARTING HH (TEMP. HOLD AREA) YM7807
         MVC   DEBUCBAD(E6),UCBVOLI MOVE VOL SER TO DEB EXTENT   YM7807
C12F44   EQU   *                                                 YM7807
         LA    R5,E16(,R5)         POINT TO NEXT EXTENT          YM7807
         BCT   R4,C12F43           BRANCH IF MORE EXTENTS        YM7807
         LM    R4,R6,CKERAS00      RESTORE REGISTERS             YM7807
         DROP  R5,R6                                             YM7807
*
*    IF A PURGE LIST (PIRL) IS TO BE SAVED - ADDR OF PIRL (DEBUSRPG)
*    IS SAVED IN CKERAS09 FOR USE WHEN STORING PIRL (X'21') IN
*    SUR BUFFER.  THEN THE LENGTH OF THE PIRL IS STORED IN THE
*    DEBUSRPG FIELD (BEFORE DEB GOES TO SUR BUFFER) SO THAT IT
*    IS AVAILABLE AT RESTART TIME.                             @ZA03659
*
C12F5    ST    RF,CKLNT            PLACE DEB LENGTH IN CKLNT
         XC    CKERAS08(E8),CKERAS08 ZERO ERAS08,09 FOR PIRO   @ZA03659
         CLI   CKCODE,E130         IS THIS A DUMMY DEB         @ZA06667
         BE    C12F5A              YES NO PIRL ACTIVITY        @ZA06667
         CLI   CKCODE,EX83         IS THIS A SUBSYSTEM DEB     @ZA06667
         BE    C12F5A              YUP BYPASS PIRL ACTIVITY    @ZA06667
         DROP  R8                                              @ZA03659
         L     RD,CKERAS07              GET DEB WORK AREA ADR  @ZA03659
         USING DEBBASIC,RD                                     @ZA03659
         CLC   DEBUSRPG+E1(E3),PURG00   WAS I/O PURGED         @ZA03659
         BE    C12F5A                   BR IF NO               @ZA03659
         CLC   DEBUSRPG+E1(E3),PURGFF   IS I/O TO BE RESTORED  @ZA03659
         BE    C12F5A                   BR IF NO               @ZA03659
         MVC   CKERAS09+E1(E3),DEBUSRPG+E1 SAVE PIRL LIST ADR  @ZA03659
         L     RF,CVTPTR                ADR CVT-GET IOCOM ADR  @ZA03659
         USING CVTMAP,RF                  FOR GETTING PIRL LNG @ZA03659
         L     RF,CVTIXAVL              PTR TO IOS COM AREA    @ZA03659
         LH    RF,X00(RF)               GET NO. I/O DRIVERS    @ZA03659
         SLL   RF,E3                    MULT BY 8              @ZA03659
         LA    RF,X'10'(RF)             ADD 16 FOR HEADER      @ZA12190
         STH   RF,DEBUSRPG+E2           SAVE LNGTH FOR RESTART @ZA03659
         STH   RF,CKERAS08              ALSO IN CKERAS08       @ZA03659
         DROP  RD                                              @ZA03659
         USING DEBBASIC,R8                                     @ZA03659
C12F5A   EQU   *                        GO PUT DEB IN SUR BUFR @ZA03659
         BAL   RD,C13A1            LINK TO BUFFER HDLR RTN
         LM    R0,R1,CKERAS04      LOAD FREEMAIN REGISTERS       YM7807
         FREEMAIN R,LV=(0),A=(1)   FREE DEB WORK AREA            YM7807
         CLI   CKCODE,E130         IS IT DUMMY DEB               Y02076
         BE    C12F10              YES-BYPASS IRB PROC.          Y02076
         CLI   CKCODE,EX83         SUBSYSTEM DEB                 YM5720
         BE    C12F10              YES-BYPASS IRB PROC           YM5720
         LR    R6,R8               ADR OF DEB BASIC              YM7573
         LA    R9,DEBPRFLN         GET LENGTH OF PREFIX          YM7573
         SR    R6,R9               POINT TO DEB PREFIX           YM7573
         USING DEBPREFX,R6         ADDRESS DEB PREFIX            YM7573
         CLI   DEBAMTYP,TCAMAP     TCAM WITH KEY 6 IRB           YM7573
         BE    C12F10              YES, NO IRB SAVE REQ          YM7573
         DROP  R6                                                YM7573
         L     R7,DEBIRBAD         DEB'S IRB ADDRESS
*
*        START OF IRB PROCESSING
*
         LA    R7,E0(R7)           CLEAR HI BYTE
         LTR   R7,R7               IRB ADDRESS=0
         BZ    C12F10              NO - BRANCH
         USING RBSECT,R7           RB
         LR    R3,R7               SET R3=IRB ADDRESS
         SR    R6,R6               CLEAR WORK REG
         LH    R6,RBSIZE           LOAD SIZE OF RB
         SLL   R6,E3               GET LENGTH IN BYTES
         S     R3,KRBPRFXL         ADDRESS OF IRB PREFIX
         MVI   CKCODE,E18          CODE=X'12'
         ST    R6,CKLNT            PLACE IRB LENGTH IN CKLNT
         BAL   RD,C13A1            LINK TO BUFFER HDLR RTN
*                                                                Y02076
*        ROUTINE TO SAVE DEB EXTENSIONS                          Y02076
*                                                                Y02076
C12F10   TM    DEBFLGS1,DEBXTNIN   DEB EXTENSION PRESENT         Y02076
         BZ    C12F12A             IF NOT, BR                  @ZA03659
         LA    R3,DEBBASIC-DEBPREFX GET ADDR                     Y02076
         LNR   R3,R3               OF                            Y02076
         AR    R3,R8               DEB PREFIX                    Y02076
         USING DEBPREFX,R3         ADDR DEB PREFIX               Y02076
         L     R3,DEBXTNP          GET DEB EXTENSION ADDR        Y02076
         USING DEBXTN,R3           ADDR DEB EXTENSION            Y02076
         LH    R7,DEBXLNGH         GET LENGTH OF DEB EXT         Y02076
         ST    R7,CKLNT            STORE IN WORKAREA             Y02076
         MVI   CKCODE,X20          SET DEB EXTENSION CODE        Y02076
         BAL   RD,C13A1            LINK TO BUFFER HANDLER        Y02076
         DROP  R3                  DROP DEB EXTENSION            Y02076
*
*    IF PIRL (RESTORE I/O LIST) IS TO BE CHECKPOINTED - ADDRESS
*    OF PIRL WOULD HAVE BEEN SAVED (FROM DEBUSRPG) IN CKERAS09
*    BEFORE DEB WAS CHECKPOINTED                               @ZA03659
*
C12F12A  EQU   *                        PROCESS PIRL           @ZA03659
         L     R3,CKERAS09              GET @ PIRL IF ONE      @ZA03659
         LTR   R3,R3                    DOES ONE EXIST         @ZA03659
         BZ    C12F12                   BR IF NOT              @ZA03659
         MVI   CKCODE,X21               SET PIRL ID CODE       @ZA03659
         LH    RF,CKERAS08              GET LNGTH OF PIRL      @ZA03659
         ST    RF,CKLNT                 LNGTH FOR BUFF HNDLER  @ZA03659
         BAL   RD,C13A1                 LINK TO BUFR HNDLR     @ZA03659
EPCB     EQU   *                                               @ZA28860
* WE WILL CHECKPOINT EPCBS OFF OF THE PIRL HERE.               @ZA28860
* THE FIRST EPCB WILL HAVE A CODE OF X'22' AND                 @ZA28860
* ALL SUBSEQUENT EPCBS WILL HAVE CODE X'23'                    @ZA28860
*                                                              @ZA28860
         L     R3,24(R3)           GET THE FIRST EPCB          @ZA28860
         LA    R3,0(R3)            CLEAR THE HIGH ORDER BYTE   @ZA28860
         LTR   R3,R3               ARE THERE ANY EPCBS ???     @ZA28860
         BZ    C12F12              NO BRANCH                   @ZA28860
         MVI   CKCODE,X'22'        SET CODE FOR FIRST EPCB     @ZA28860
EPCBN    EQU   *                                               @ZA28860
         L     R7,0(R3)            GET NEXT EPCB LINK POINTER  @ZA28860
         LH    RF,EPCBLEN          SET EPCP LENGTH             @ZA28860
         ST    RF,CKLNT            SAVE THE LENGTH             @ZA28860
         BAL   RD,C13A1            WRITE OUT EPCB              @ZA28860
         LA    R3,0(R7)            SET UP NEXT EPCB            @ZA28860
         LTR   R3,R3               ANY MORE EPCBS ?????        @ZA28860
         BZ    C12F12              NO BRANCH                   @ZA28860
         MVI   CKCODE,X'23'        SET UP CODE FOR EPCB + N    @ZA28860
         B     EPCBN               BRANCH TO PROCESS           @ZA28860
*                                                              @ZA28860
C12F12   L     R8,DEBDEBAD         GET NEXT DEB
         LA    R8,E0(R8)           CLEAR HI BYTE
         LTR   R8,R8               IS THERE ANOTHER DEB
         BP    C12F1               YES LOOP TO PROCESS IT
         DROP  R7,R8               RB,DEB
*
*        ROUTINE TO SAVE FLOATING POINT REGISTERS
*
C12K1    STD   R0,FLTPTSAV         STORE
         STD   R2,FLTPTSAV+E8      FLOATING
         STD   R4,FLTPTSAV+E16     POINT
         STD   R6,FLTPTSAV+E24     REGISTERS
         LA    R3,FLTPTSAV         GET ADDR OF FLT. PT. REGS
         MVI   CKCODE,E19          CODE=X'13'
         MVI   CKLNT+E3,E32        LENGTH
         BAL   RD,C13A1            LINK TO BUFFER HANDLER
*
*        SAVE THE TIOT                                           Y02076
*
         L     R3,TCBTIO           GET ADDR OF TIOT FROM TCBTIO
         MVI   CKCODE,E20          CODE=X'14'
         MVC   CKLNT(E4),CKTIOLN   LENGTH OF TIOT
         BAL   RD,C13A1            LINK TO BUFFER HANDLER
*                                                                Y02076
*        SAVE SELECTIVE DSAB INFORMATION                         Y02076
*                                                                Y02076
C12L1    LA    R3,SURL(,RC)        ADDR CORE TO BUILD            Y02076
         A     R3,CKBFOFST         DSAB RECORDS                  Y02076
         L     R8,TCBJSCB          GET JSCB ADDR                 Y02076
         USING IEZJSCB,R8          ADDR JSCB                     Y02076
         L     R8,JSCDSABQ         GET ADDR OF DSAB QDB          Y02076
         USING QDB,R8              ADDR QDB                      Y02076
         L     R8,QDBFELMP         GET ADDR OF 1ST DSAB          Y02076
         USING DSAB,R8             ADDR DSAB                     Y02076
         USING XDSAB,R3            ADDR DSAB INFO                Y02076
C12L2    MVC   XDSAOPCT,DSABOPCT   SAVE OPEN COUNT               Y02076
         MVC   XDSABORG,DSABORG    SAVE DSORG                    Y02076
         MVC   XDSAFLG1(L'DSABFLG1+L'DSABFLG2),DSABFLG1 SAVE     Y02076
*                                  FLAGS 1 AND 2                 Y02076
         MVC   XDSAFLG4,DSABFLG4   SAVE ONLY CKDS AND CKSI OF    Y02076
         NI    XDSAFLG4,DSABCKDS+DSABCKSI FLAG 4                 Y02076
         MVC   XDSADCBM,DSABDCBM   SAVE DCB MODIFICATION MASK    Y02076
         MVI   XDSAFLGS,X00        INIT DSAB PROCESS FLAGS       Y02076
         OC    DSABTCBP,DSABTCBP   IS TCB ADDR PRESENT           Y02076
         BZ    C12L4               IF NOT, BR                    Y02076
         OI    XDSAFLGS,XDSATCBP   SET TCB ADDR INDICATOR        Y02076
C12L4    L     R2,DSABTIOT         GET DD ENTRY ADDR             Y02076
         USING TIOENTRY,R2         ADDR DD ENTRY                 Y02076
         CLI   TIOEDDNM,BLANK      BLANK DD NAME                 Y02076
         BE    C12L6               IF BLANK, BR                  Y02076
         MVC   XDSADDNM,TIOEDDNM   SAVE DD NAME                  Y02076
         B     C12L8               SKIP BLANK DD PROCESSING      Y02076
         DROP  R2                  DROP TIOT ENTRY               Y02076
C12L6    OI    XDSAFLGS,XDSACCAT   SET CONCATENATION INDICATOR   Y02076
C12L8    MVI   CKCODE,X04          SET DSAB BLK ID               Y02076
***********************************************************************
*    IF DATA SET IS AN IMPLIED VSAM PRIVATE CATALOG - DDNAME CANNOT
*    BE GUARANTEED TO BE THE SAME BETWEEN CHECKPOINT AND RESTART -
*    THEREFORE SET CODE X'24' FOR THOSE TYPES OF DATA SETS      ZA00103
***********************************************************************
         TM    DSABFLG3,DSABCATL   IS IT A CATL DATA SET        ZA00103
         BZ    C12L9               BRANCH IF NOT                ZA00103
         CLC   XDSADDNM(E4),PRIVCATL  IS DDNAME GENERATED       ZA00103
         BNE   C12L9               BRANCH IF NOT                ZA00103
         OI    CKCODE,X24          SET X'24' DSAB BLK CODE      ZA00103
C12L9    ICM   R8,E15,DSABFCHN     FETCH/TEST NEXT DSAB ADDR    ZA00103
         BNZ   C12L10              BR IF NOT LAST                Y02076
         OI    CKCODE,X44          SET LAST BSAB BLK INDICATOR  ZA00103
C12L10   LA    R2,XDSABSIZ         SET DSAB BLK SIZE             Y02076
         ST    R2,CKLNT            FOR BUFFER HANDLER            Y02076
         BAL   RD,C13A1            CALL BUFFER HANDLER           Y02076
         LTR   R8,R8               TEST NEXT DSAB ADDR           Y02076
         BNZ   C12L2               IF ANOTHER, GO PROCESS        Y02076
         DROP  R3,R8               XDSAB AND DSAB                Y02076
*                                                                Y02076
*        FLUSH SUR BUFFER BEFORE SAVING SPIE DATA                Y02076
*                                                                Y02076
C12M1    CLC   CMBUF(E4),CKBFSTAD  ANY DATA LEFT IN BUFFER       Y02076
         BE    C12D2               NO- BRANCH                    YM6584
         L     RA,CKBFSTAD         LOAD NEXT BYTE IN BUFFER      Y02076
         LA    RD,CKREGSAV         GET ADDR OF REG SAVE AREA     Y02076
         BAL   R7,C13B2A           WRITE OUT REMAINING DATA      Y02076
*                                                                Y02076
*        INTERFACE WITH SUPERVISOR FOR SPIE DATA                 Y02076
*                                                                Y02076
C12D2    EQU   *                   FLUSH BYPASS ENTRY            YM6584
         L     RF,CVTPTR           GET CVT ADDR                  Y02076
         USING CVTMAP,RF           CVT                           Y02076
         L     RF,CVTCSPIE         ADDR OF SPIE CHKPT RTN        Y02076
         DROP  RF                  CVT                           Y02076
         LR    R1,RC               GET ADDR OF                   Y02076
         A     R1,CKBFOFST         4K SUR AREA FOR SPIE          Y02076
         USING SSCR,R1             SSCR                          Y02076
         MVC   SSCRID(N4),CKSSCRID INIT SSCR HDR                 Y02076
         XC    SSCRFCHN(SSCRDCBA-SSCRFCHN),SSCRFCHN              Y02076
         OI    SSCRFLG1,SSCRCKRS   SET CHKPT INDICATOR           Y02076
         LA    RD,CKREGSAV         SAVE AREA ADDRESS             Y02076
         BALR  RE,RF               GO TO SPIE CHKPT RTN          Y02076
         SR    R2,R2               CLEAR REG                     Y02076
         ICM   R2,M3,SSCRDATL      GET & TEST DATA LENGTH        Y02076
         BZ    C12D4               IF NO DATA, EXIT              Y02076
         AH    R2,SSCRHDRL         GET TOTAL RECORD LENGTH       Y02076
         STH   R2,CKLNGTH1         STORE LENGTH IN DECB          Y02076
         BAL   R7,C13B2A           WRITE OUT SSCR                Y02076
*
*        XCTL  FOR ALL EXITS
*
C12D4    LR    R1,RC               LOAD R1 WITH CHKPT W.A. ADDRESS
         LA    RF,CKMN40           LOAD ADDR OF NEXT LOAD
         ST    RF,CK40XCTL         ST IN WORKAREA
         LA    RF,CK40XCTL         ADDR OF WORKAREA FIELD
         XCTL  SF=(E,(15))         XCTL TO NEXT LOAD
         EJECT
*
*        ROUTINE TO HANDLE OUTPUT BUFFER
*
* THIS ROUTINE WILL MOVE DATA FROM AN ADDRESSED AREA TO THE NEXT
* AVAILABLE BLOCK IN THE SUR BUFFER. IF THERE IS NO ROOM IN THE
* BUFFER,THE BUFFER WILL BE WRITTEN OUT, AND THE BLOCK MOVED TO
* THE NOW FREE BUFFER.
*
* REGISTER INPUT-
*
*        R3    ADDRESS OF BLOCK TO BE MOVED
*        RD    RETURN ADDRESS
*
C13A1    STM   R2,RD,CKOBHSAV      SAVE REGISTERS IN CHKWA
         LA    RD,CKREGSAV         GET ADDR OF SAVE AREA FOR
*                                  WRITE/CHECK IN GPR 13
         LR    R8,R3               SAVE ADDRESS OF BLOCK
         L     RA,CKBFSTAD         NEXT BYTE IN BUFFER TO BE FILLED
         L     R3,CKLNT            GET LENGTH OF BLOCK
         L     R4,CKBFLWA          GET REMAINING BYTES IN BUFFER
         LA    R3,E1(R3)           ALLOW FOR CODE BYTE
         CR    R3,R4               ENOUGH BYTES LEFT FOR BLOCK
         BL    C13C2               YES-BRANCH
         C     RA,CMBUF            IS BUFFER PTR ALREADY AT START
         BE    C13C2               YES - BRAN
         BAL   R7,C13B2            NO,WRITE OUT BUFFER.
C13C2    MVC   E0(E1,RA),CKCODE    MOVE IN CODE BYTE
         LA    RA,E1(RA)           INCREMENT BUFFER POINTER
         BCTR  R3,E0               DECREMENT BUFFER LENGTH
         BCTR  R4,E0               DECREMENT AMT BYTES LEFT IN BUFFER
C13C3    LTR   R3,R3               ANY MORE BYTES IN BLOCK
         BZ    C13E3               NO - BRANCH
         CR    R3,R4               Q. ARE THERE MORE BYTES LEFT IN
*                                  THE BLOCK THAN IN THE BUFFER
         BNH   C13F1               A. NO USE BLOCK AS COUNTER
         LR    R2,R4               A. YES USE BUFFER AS COUNTER
         B     C13E1               MOVE SUR INTO BUFFER
C13F1    LR    R2,R3               USE BLOCK LENGTH AS COUNTER
*
*        MOVE BLOCK INTO BUFFER
*        SPECIAL HANDLING FOR DEB'S AND IRB'S
*        LINK TO C13B2A TO WRITE OUT BUFFER
*        BRANCH TO C13C3 TO PROCESS REST OF BLOCK
*
         USING DEBBASIC,R7         DEB
         USING RBSECT,R8           RB
C13E1    STM   R4,R7,CKERAS00      SAVE MOVE-LONG REGS           YM7357
         LR    R4,RA               GET TO-ADDRESS                YM7357
         LR    R6,R8               GET FROM-ADDRESS              YM7357
         LR    R5,R2               GET TO-LENGTH                 YM7357
         LR    R7,R2               GET FROM-LENGTH               YM7357
         MVCL  R4,R6               DATA TO SUR                   YM7357
         LM    R4,R7,CKERAS00      RESTORE MOVE-LONG REGS        YM7357
C13E2    TM    CKCODE,EX80         IS THIS A DEB
         BZ    C13E4               NO CHECK FOR IRB
         CLI   CKCODE,E130         IS THIS A DUMMY DEB
         BE    C13E5               BRANCH IF YES
         CLI   CKCODE,EX83         IS THIS A SUBSYSTEM DEB       YM5720
         BE    C13E5               BRANCH IF YES                 YM5720
CKDEBAD1 CLI   CKCODE,E129         ISAM DEB
         MVI   CKCODE,EX7F         INSURE ONLY ONCE THRU
         BNE   C13E5               BRANCH IF NO
         LA    RE,DEBFIEAD-DEB(RA) ADDR OF ISAM PTRS
         MVC   E2(E2,RE),CMSYSA+E4  MOVE
         MVC   E6(E2,RE),CMSYSA+E6  POSITIONAL
         MVC   E10(E2,RE),CMSYSA+E8 POINTERS
         MVC   E14(E2,RE),CMSYSA+E10 TO DEB
         B     C13E5               CONTINUE BUFFER HDLR
C13E4    CLI   CKCODE,EX12         IS THIS AN IRB
         BNE   C13E5               NO CONTINUE BUFFER HANDLING
         MVI   CKCODE,EX7F         INSURE ONLY ONCE THROUGH
         L     R8,CKOBHSAV+E20     ADDR OF IRB BASIC SECTION
         TM    RBSTAB2,EX0C        ANY IQE'S
         BC    E12,C13E5           NO-SKIP NEXT CODE
         L     RE,RBNEXAV          COMPUTE OFFSET TO NEXT AVAILABLE IQE
         SR    RE,R8               GET OFFSET
         STCM  RE,E15,RBNEXAV+RBPRFLNA-RBSECT(RA) PUT OFFSET IN IRB
*                                  IN BUFFER
         L     RE,RBIQE            COMPUTE OFFSET
         SR    RE,R8               TO LIST ORIGIN OF IQE'S
         STCM  RE,E7,RBIQE1+RBPRFLNA-RBSECT(RA) STORE IN IRB
C13E5    AR    RA,R2               INCREMENT BUFFER PTR          YM7357
         SR    R3,R2               GET REMAINING BYTES IN BLOCK
         SR    R4,R2               GET REMAINING BYTES IN BUFFER
         AR    R8,R2               INCREMENT ADDRS OF BLOCK
         LTR   R4,R4               ANY MORE BYTES IN BUFFER
         BH    C13C3               YES- CHECK BLOCK LENGTH
         BAL   R7,C13B2A           NO - WRITE OUT BUFFER
         B     C13C3               PUT REMAINDER OF BLOCK THROUGH LOOP
C13E3    LA    R3,E4               RESET LENGTH TO FOUR
         ST    R3,CKLNT            STORE IN W.A.
         ST    R4,CKBFLWA          REINITIALIZE BYTES LEFT IN BUFFER
         ST    RA,CKBFSTAD         RE-INITIALIZE STARTING ADR OF BUFFER
         LM    R2,RD,CKOBHSAV      RESTORE REGS
         BR    RD                  RETURN
         EJECT
*
*        ROUTINE TO WRITE OUT BUFFER
*
C13B2    LTR   R4,R4               ARE BYTES LEFT IN BUFFER=0
         BZ    C13B2A              YES-BRANCH
         MVI   E0(RA),E0           SET END OF USABLE DATA BYTE
C13B2A   L     RA,CMBUF            INIT START OF BUFFER
         TM    CKFLAG1,CKVEQR      IS THIS TASK V=R?             YM2776
CKVEQR   EQU   8                   V=R FLAG IN W.A.             YA00258
         BNO   CKNOVEQR            NO, GO ON                     YM2776
         LRA   RA,0(,RA)           GET REAL ADDRESS OF BUFFER    YM2776
CKNOVEQR WRITE CKDECB1,SF,,(RA),MF=E WRITE SUR
         CHECK CKDECB1             CHECK SUR
         TM    CKFLAG1,CKTAPE      CHKPT DATA SET ON TAPE
         BZ    CMEOVDA             BRANCH IF NO
         L     RF,CKTSTEOV         LOAD ADDR OF DEB VOL COUNT
         CLC   E0(E4,RF),CKEOVCMR  DID EOV OCCUR
         BNE   CMEOV               BRANCH IF YES
CMTIOTST CLI   CKRETCOD+E1,CKIOERR I/O ERROR
         BE    C12D4               BRANCH TO XCTL RTN
         L     RA,CMBUF            INIT START OF BUFFER          YM2776
         ST    RA,CKBFSTAD         RE-INIT BUFFER PTR
         LA    R4,SURL             GET LENGTH OF SUR
         ST    R4,CKBFLWA          RE-INIT REMAINING BYTES IN BUFFER
         BR    R7                  RETURN TO BUFFER HANDLER
*                                  OR XCTL INTERFACE
         EJECT
*
*        END OF VOLUME TESTING
*
CMEOV    TM    CKFLAG2,CKEOV       2ND EOV FOR THIS REQUEST
         BO    CMEOVER             YES- PREPARE TO GO TO EXIT RTN
         OI    CKFLAG2,CKEOV       TURN ON EOV INDICATOR
         MVI   CKMN40+E4,C2        SET MOD NAME TO IGC0206C
         B     C12D4               XCTL INTERFACE
         USING IHADCB,RF           DCB
CMEOVDA  L     RF,CKDCBAD          GET ADR. OF CHKPT DCB
         L     RF,DCBDEBAD         GET ADR. OF CHKPT DEB
         DROP  RF                  DCB
         USING DEBBASIC,RF         DEB
         CLC   DEBNMEXT(E1),CKTSTEOV DID EOV OCCUR ON DA DEVICE
         BE    CMTIOTST            NO- CONTINUE PROCESSING
         DROP  RF                  DEB
CMEOVER  LA    RF,CKERIO7          INDICATE EOV ERROR
         STH   RF,CKMSGCOD         PUT IN W.A.
         MVI   CKRETCOD+E1,E8      PUT IN RETURN CODE ERROR
         B     C12D4               XCTL INTERFACE
*
*        CHECKMAIN SYNAD ROUTINE
*
C13B5    MVI   CKRETCOD+E1,CKIOERR  I/O ERROR
         LA    R7,CKIOEROR         I/O ERROR CODE
         STH   R7,CKMSGCOD         STORE IN WORK AREA
         BR    RE                  RETURN
         EJECT
*
*        GENERAL CONSTANTS
*
         DS    0F
PRIVCATL DC    CL4'SYS0'           GENERATED DDNAME-1ST 4 CHAR. ZA00103
ABLEV    DC    CL2'AV'             DUMMY DEB MODULE            @ZA17960
EPCBLEN  DC    XL2'00BC'           LENGTH OF AN EPCB           @ZA28860
         DS    0F
CKMN40A  DC    CL8'IGC0N06C'       ADDR OF NEXT LOAD
KRBPRFXL DC    AL4(RBPRFLNA)       ADDR OF IRB LENGTH
KDEBAVTL DC    AL4(DEBAVTLN)       ADDR OF DEB LENGTH
CKSSCRID DC    X'01',X'02',AL2(SSCRDATA-SSCRID) SSCR HDR         Y02076
SP253    DC    AL1(253)                 SUBPOOL 253 CONSTANT    ZA03159
PURG00   DC    XL3'000000'              PURGE/RESTORE TESTS    @ZA03659
PURGFF   DC    XL3'FFFFFF'              PURGE/RESTORE TESTS    @ZA03659
PATCH    EQU   *                   PATCH START
CM3LN    EQU   PATCH-IGC0H06C      LENGTH OF CSECT
CM3PALN  EQU   CM3LN/10            GET LENGTH OF PATCH AREA
CM3PATCH DC    XL(CM3PALN)'00'     10 PERCENT ALLOWANCE FOR PATCH AREA
*
*        GENERAL  EQUATES
*
E0       EQU   0                   DISPLACEMENT
E1       EQU   1                   1
E2       EQU   2                   2
E3       EQU   3                   3
E4       EQU   4                   4
N4       EQU   4                   4 CONSTANT                    Y02076
X04      EQU   X'04'               NONLAST DSAB RCD CODE         Y02076
E5       EQU   5                   DISPLACEMENT FOR W.A. SAVE AREA
E6       EQU   6                   6
E7       EQU   7                   7
E8       EQU   8                   8
M8       EQU   8                   MASK FOR HIGH ORDER BYTE      YM7807
E9       EQU   9                   9
E10      EQU   10                  10
E12      EQU   12                  BRANCH CONDITION CODE
E14      EQU   14                  DISPLACEMENT
E15      EQU   15                  CODE FOR USE FIELD
E16      EQU   16                  CODE FOR USER'S GPR'S
E18      EQU   18                  CODE FOR IRB
E19      EQU   19                  CODE FOR FLOATING PT REG
E20      EQU   20                  CODE FOR TIOT
E21      EQU   21                  CODE FOR PIE
E24      EQU   24                  FIELD DISPLACEMENT
X24      EQU   X'24'               IMPLIED PRIV. CATL DSAB CODE ZA00103
E32      EQU   32                  LENGTH OF FLOATING POINT REGS
X20      EQU   X'20'               DEB EXTENSION CODE            Y02076
X21      EQU   X'21'               RESTORE LIST(PIRL) CODE     @ZA03659
E64      EQU   64                  LENGTH OF G.P. REG
X44      EQU   X'44'               LAST DSAB RCD CODE            Y02076
X00      EQU   X'00'               0 CONSTANT                    Y02076
E128     EQU   128                 CODE FOR NON- ISAM DEB
E129     EQU   129                 CODE FOR ISAM DEB
E130     EQU   130                 CODE FOR DUMMY DEB
EX0C     EQU   X'0C'               MASK FOR IQE
EX12     EQU   X'12'               CODE FOR IRB
EX80     EQU   X'80'               CODE FOR NON-ISAM DEB
EX83     EQU   X'83'               CODE FOR SUBSYSTEM DEB        YM5720
EXFF     EQU   X'FF'               BIT RESET MASK
EX7F     EQU   X'7F'               CODE RESET MASK
C2       EQU   C'2'                CONSTANT OF 2
BLANK    EQU   C' '                BLANK CONSTANT                Y02076
M3       EQU   3                   REG MASK FOR BYTES 2 & 3      Y02076
TCAMAP   EQU   X'84'               TCAM DEB WITH KEY 6 IRB       YM7573
DEBPRLSS EQU   X'08'               DEB PURGE RESTORE SUBSYSTEM @ZA06140
*        EQUATES FOR LENGTHS AND CODES
*
SURL     EQU   400                 LENGTH OF SUR                 YM7049
DEBPRFLN EQU   16                  LENGTH OF DEB PREFIX          Y02049
CKERIO7  EQU   X'031B'             ERROR MSG CODE FOR EOV
CKIOEROR EQU   X'0317'             ERROR MSG CODE FOR I/O ERROR
         EJECT
         IEEVCHWA VER=3            AOS2 VERSION OF WA
CKTSTEOV EQU   CKUNIT              EOV TEST 1
CKEOVCMR EQU   CKUNIT+4            EOV TEST 2
CMADEOV  DS    F                   SAVE AREA FOR INFO NEEDED
CMNEOV   DS    F                   TO TEST IF EOV OCCURRED
CKBFLWA  DS    F                   REMAINING BYTES IN BUFFER
CKBFSTAD DS    F                   NEXT BYTE IN BUFFER TO BE FILLED
CMBUF    DS    F                   BUFFER
CKMN40   DS    2F                  SAVE AREA
CK40XCTL DS    F'0'                SAVE AREA FOR XCTL
CKOBHSAV DS    12F                 SAVE AREA
CME2     DS    CL1                 BIG BLOCK SWITCH
CKCODE   DS    CL1                 SUR CODE
CKLNT    DS    F                   SUR LENGTH
CMSYSA   DS    F                   SWITCHES
FLTPTSAV DS    4D                  FLOATING POINT SAVE AREA
         EJECT
*                                                                Y02076
*        DSECT FOR DSAB SUR RECORD                               Y02076
*                                                                Y02076
XDSAB    DSECT                     DSAB BLK DSECT                Y02076
XDSAOPCT DS    CL2                 DCB OPEN COUNT                Y02076
XDSABORG DS    CL2                 DATA SET ORG                  Y02076
XDSAFLG1 DS    CL1                 DSAB FLAG 1                   Y02076
XDSAFLG2 DS    CL1                 DSAB FLAG 2                   Y02076
XDSAFLG4 DS    CL1                 DSAB FLAG 4                   Y02076
XDSADCBM DS    CL6                 DCB MODIFICATION MASK         Y02076
XDSADDNM DS    CL8                 DD NAME                       Y02076
XDSAFLGS DS    CL1                 DSAB PROCESS FLAGS            Y02076
XDSACCAT EQU   X'80'               DSAB IS CONCATENATED          Y02076
XDSATCBP EQU   X'40'               DSAB HAS TCB ADDR             Y02076
XDSABSIZ EQU   *-XDSAB             DSAB BLK SIZE                 Y02076
         TITLE 'IHJQCP32 - JSCB'
         IEZJSCB                                               , Y02076
         TITLE 'IHJQCP32 - QDB'
         IHAQDB                                                , Y02076
         TITLE 'IHJQCP32 - DSAB'
         IHADSAB                                               , Y02076
         TITLE 'IHJQCP32 - TIOT'
         IEFTIOT1                                              , Y02076
         TITLE 'IHJQCP32 - CVT'                                  Y02076
         CVT   DSECT=YES,PREFIX=YES,LIST=YES                     Y02076
         TITLE 'IHJQCP32 - SPIE CHKPT BLOCK'                     Y02076
* SPIE CHKPT BLOCK                                               Y02076
         IHJSSCR                                               , Y02076
         TITLE 'IHJQCP32 - TASK CONTROL BLOCK'
* TASK CONTROL BLOCK
         IKJTCB
         TITLE 'IHJQCP32 - REQUEST BLOCK - S.V.R.B., I.R.B.'
* REQUEST BLOCK - S.V.R.B.,I.R.B.'
         IKJRB
         TITLE 'IHJQCP32 - DATA EVENT BLOCK'
* DATA EVENT BLOCK
         IEZDEB
DEBAVTLN EQU   DEBBASIC-DEBAVT     AVT LENGTH
         TITLE 'IHJQCP32 - DATA CONTROL BLOCK'
* DATA CONTROL BLOCK
         IHADCB DSORG=(PO,PS),DEVD=(DA,TA)
         TITLE 'IHJQCP32 - UNIT CONTROL BLOCK'
* UNIT CONTROL BLOCK
         IEFUCBOB
         END
