         TITLE ' IHJQCP31  MVT CHECKMAIN  IGC0G06C  '
         COPY  LCGASMSW
         AIF   ('&LIB' EQ 'LIB1').LIB1BA1  TEST FOR LIB1(OS)
CP31     TITLE 'IHJQCP31 AOS/2 CHECKMAIN 2 ROUTINE - IGC0G06C'
*
*        RELEASE 3.0 DELETIONS/CHANGES
*A019171                                                        ZA05247
*0000                                                           ZA03227
*        RELEASE 3.7 CHANGES
*A021949-021950,A022507,A022644-022659                         @ZA14558
*A022652,A022661,D022655,D022656,D022657                       @ZA19627
*A265800                                                       @ZA27110
* STATUS
*
*    CHANGE LEVEL = 0
*
* FUNCTION
*
*    MODULE NAME - IHJQCP31
*
*    THIS MODULE CREATES RECORDS  (SUR) OF CERTAIN VIRTUAL STORAGE
*    MANAGEMENT, CONTENTS SUPERVISION, TASK MANAGEMENT, AND PAGING
*    SUPERVISOR CONTROL BLOCKS AND OUTPUTS THESE RECORDS TO THE
*    CHECKPOINT DATA SET. THESE CONTROL BLOCKS, ALONG WITH
*    PERTINENT INFORMATION NECESSARY FOR THEIR RECREATION ARE
*    CONTAINED IN MULTIPLE 400 BYTE SUR RECORDS.                 YM7049
*
* ENTRY POINTS
*
*    CHECKMAIN 2 (IGC0G06C) IS ENTERED FROM CHECKMAIN 1          Y02076
*    (IGC0F06C) TO CHECKPOINT THE SUPERVISOR CONTROL BLOCKS      Y02076
*
* INPUT
*
*    GPR 12 CONTAINS THE ADDRESS OF THE CHECKPOINT WORK AREA
*    (CHKWA).
*
* OUTPUT
*    SAME AS THE ENTRY PARAMETERS FOR NORMAL EXIT
*
*    FOR ERROR EXIT GPR 1 CONTAINS ADDRESS OF CHKWA AND AN ERROR
*    CODE  IS PASSED IN THE LAST BYTE OF THE CKRETCOD FIELD.
*
* EXTERNAL REFERENCES
*
*    NONE
*
* EXITS,NORMAL
*
*    TO CHECKMAIN 3 AT ENTRY IGC0H06C VIA XCTL TO
*    CHECKPOINT USER INFORMATION AS SUR'S.
*    UPON EXIT THE PARAMETERS ARE AS FOLLOWS.
*    GPR12 CONTAINS ADDRESS OF CHKWA.
*    DECB USED FOR WRITING SURS.
*    ADDRESS OF NEXT BYTE AVAILABLE IN OUTPUT BUFFER
*    AND NUMBER OF BYTES LEFT IN BUFFER IN CHECKPOINT
*    WORK AREA. (CKBFSTAD, CKBFLWA).
*
* EXITS, ERROR
*
*    -1) TO RESUME I/O ROUTINE AT ENTRY IGC0N06C VIA XCTL
*    TO PROVIDE ITS NORMAL FUNCTIONS AND TO PASS AN
*    ERROR CODE TO THE CHECKPOINT EXIT ROUTINE
*    INDICATING THAT AN I/O ERROR HAS OCCURRED.
*    UPON EXIT THE PARAMETERS ARE AS FOLLOWS-
*    GPR 1 - ADDRESS OF CHKWA
*    CHKWA - AN ERROR CODE OF X'0C' IS PASSED IN THE
*    .       LAST BYTE OF THE CKRETCOD FIELD.
*
*    2) TO RESUME I/O ROUTINE (IGC0N06C) VIA XCTL TO
*    PERFORM ITS NORMAL FUNCTIONS AND TO PASS AN
*    ERROR CODE TO THE CHECKPOINT EXIT ROUTINE THAT
*    AN END OF VOLUME CONDITION (TWO RETRIES HAVE BEEN
*    ATTEMPTED ON TAPE, OR THE PRIMARY DEB EXTENT
*    HAS BEEN EXHAUSTED FOR DASD) HAS OCCURRED.
*    UPON EXIT THE PARAMETERS ARE THE SAME AS FOR
*    CASE 1 EXCEPT THAT THE LAST BYTE OF CKRETCOD
*    IS AN X'08'.
*
*    3) TO CHECKPOINT HOUSEKEEPING ROUTINE (IGC0206C) TO
*    ATTEMPT REPROCESSING ON A NEW TAPE WHEN AN EOV
*    HAS OCCURRED FOR THE FIRST TIME ON TAPE.
*    UPON EXIT THE PARAMETERS ARE AS FOLLOWS-
*    GPR 1 - ADDRESS OF CHKWA
*    CHKWA - FIRST TAPE EOV FLAG IS SET.
*
* TABLES/WORK AREAS
*
*    DEB   DEBNMEXT
*
*    CVT   CVTABEND                                              Y02076
*    .     CVTLINK                                               Y02076
*
*    SCVT  SCVTSVCT
*
*    TCB   TCBMSS
*    .     TCBLLS
*    .     TCBJPQ
*    .     TCBNSTAE
*    .     TCBFOEA                                               Y02076
*    .     TCBOTC                                                Y02076
*    .     TCBRBP                                                Y02076
*    .     TCBSTABB                                              Y02076
*
*    RB    RBSIZE
*    .     RBSTAB1                                               Y02076
*    .     RBSTAB2
*    .     RBINTCOD                                              Y02076
*    .     RBEP                                                  Y02076
*    .     RBCDE1                                                Y02076
*    .     RBLINK
*
*    CDE   CDATTR                                                Y02076
*    .     CDATTR2                                               Y02076
*    .     CDCHAIN
*    .     CDRRBP                                                Y02076
*    .     CDENTPT
*    .     CDNAME
*    .     CDXLMJP
*
*    XL    EXLLNTH
*
*    LLE   LLECDPT                                               Y02076
*    .     LLECHN                                                Y02076
*
*    DCB   DCBDEBAD
*    .     DCBSYNA                                               Y02076
*
*    SCB   SCBCHAIN
*    .     SCBOWNRA
*
*    SPQE  SPQEAD                                                Y02076
*    .     SPDQEPTR                                              Y02076
*    .     SPQEFLGS                                              Y02076
*
*    DQE   DQFQEPTR
*    .     DQEPTR
*
*    FQE   FQEPTR
*
*    FOE   FOEFLINK
*    .     FOEVINDX                                              Y02076
*
* ATTRIBUTES
*
*    KEY 0, SUPERVISOR STATE, ENABLED
*
*  CHARACTER CODE DEPENDENCIES
*
*    NONE
*
*  NOTES
*
*    APPLICABILITY
*
*    AOS/2
*
*    MODULE CHARACTERISTICS
*
*    TYPE - LOAD MODULE
*    RESIDENCE - SYSTEM LINK PACK AREA
*
*    DEPENDENCIES
*
*    -SIZE OF CONTROL BLOCKS TO BE CHECKPOINTED
*    -A CDE EXISTS FOR THE JOB PACK AREA OF THE REGION
*
*    INTERFACES
*
*    -WRITE/CHECK MACRO
*    -STANDARD DSECTS USED TO REFERENCE CONTROL BLOCKS
*
*
*    OPERATION
*
*    THE CHECKMAIN2 ROUTINE RECEIVES CONTROL AFTER ALL ALLOCATED
*    REGION BLOCKS HAVE BEEN CHECKPOINTED. UPON ENTRY,
*    INITIALIZATION PROCESSING IS INVOKED. THIS INITIALIZATION
*    CONSISTS OF THE FOLLOWING.
*
*    .     - PLACING ADDRESS OF SYNAD ROUTINE IN DCB
*    .     - SETTING THE NORMAL XCTL EXIT MODULE NAME TO
*    .       IGC0H06C (CHECKMAIN 3).
*    .     - SETTING THE BUFFER CONTROL PARAMETERS FOR THE SUR
*    .       BUFFER CONTAINED IN THE CHECKPOINT WORK AREA.
*
*    PROCESSING THEN CONTINUES AS DESCRIBED UNDER THE HEADING
*    'CHECKPOINTING THE VIRTUAL STORAGE CONTROL BLOCKS'.
*
*    'CHECKPOINTING THE VIRTUAL STORAGE CONTROL BLOCKS'
*
*    THE VSM CONTROL BLOCKS CHECKPOINTED BY THIS ROUTINE ARE
*    THE SPQE, DQE, AND FQE CONTROL BLOCK CHAINS FOR THE STC,
*    INITIATOR, AND PROBLEM PROGRAM TASKS. THE SPQE, DQE, AND    Y02076
*    FQE ARE EACH 16 BYTES LONG. THE CHECKCODE VALUES ASSIGNED   Y02076
*    TO THESE BLOCKS ARE                                         Y02076
*    .         - SPQE - X'06'
*    .         - DQE  - X'07'
*    .         - FQE  - X'02'
*    THE ORDER OF PROCESSING IS TO CHECKPOINT THE CHAIN AS FOLLOWS
*    .         SPQE1, DQE1, FQE1,FQE1,DQE1,FQE1,FQE1,SPQE2,DQE2,
*    .         FQE2, ETC.
*
*
*    CHECKPOINTING THE JOB PACK AREA CDE QUEUE
*
*    THE CDE'S AND THEIR ASSOCIATED EXTENT LISTS ARE CHECKPOINTED.
*    THE ORDER OF PROCESSING IS TO CHECKPOINT THE CHAIN AS FOLLOWS
*    .         MAJCDE1, EXTENT LIST1, MINOR CDE1, MAJOR CDE2,
*    .         EXTENT LIST2, ETC.
*    CDE'S WHICH HAVE BEEN CREATED OR USED FOR THE LINK OR XCTL
*    FUNCTIONS WILL CONTAIN A POINTER TO THE RB WHICH USED THE
*    FUNCTION. THE RB FOR THE CDE WILL BE CHECKPOINTED AT A LATER
*    TIME. SINCE THE RB IS CREATED IN LSQA, THE RB ADDRESS IN THE
*    CDE WILL HAVE TO BE RELOCATED A 'RESTART TIME'. TO DO THIS,
*    CHECKPOINT MUST NOTE THE POSITION OF THE REQUESTING RB ON THE
*    P/P TCB RB QUEUE AND PASS IT TO THE RESTART FUNCTION WITH THE
*    CDE. THE CHECKCODES ASSIGNED TO THE BLOCKS ARE
*    .         - CDE - X'09'
*    .         - EXTENT LIST - X'17'
*    WHEN ALL CDE'S AND EXTENT LISTS HAVE BEEN WRITTEN TO THE
*    CHECK POINT DATA SET PROCESSING CONTINUES WITH CHECKPOINTING
*    THE P/P LOAD LIST ELEMENT QUEUE.
*
*
*    'CHECKPOINTING THE P/P LOAD LIST ELEMENT QUEUE'
*
*    THE LOAD LIST ELEMENT (LLE) QUEUE IS CREATED WHENEVER A LOAD
*    MACRO INSTRUCTION IS ISSUED BY OR FOR THE JOB STEP TASK. THE
*    LLE CONTAINS A POINTER TO A CDE, AND ANOTHER FIELD INDICATING
*    THE NUMBER OF TIMES LOAD HAS BEEN ISSUED FOR THE MODULE. IF
*    THE MODULE HAD TO BE FETCHED INTO THE USER REGION, THE CDE
*    WILL BE ON THE 'JOB PACK AREA CDE QUEUE'. IF THE MODULE
*    RESIDES IN THE SYSTEM LINK PACK AREA, THE CDE WILL BE ON THE
*    'ACTIVE LPA CDE QUEUE'.
*
*    FOR THOSE LLE'S WHOSE CDE IS ON THE ACTIVE LPAQ, IT IS
*    NECESSARY TO CHECKPOINT NOT ONLY THE LLE, BUT ALSO THE
*    MODULE NAME AND ENTRY POINT ADDRESS. THIS ADDITIONAL
*    INFORMATION IS UED TO RECREATE THE LPA CDE QUEUE AT RESTART
*    TIME AND TO VERIFY THAT THE MODULE OCCUPIES THE SAME VIRTUAL
*    ADDRESS SPACE AS IT DID AT CHECKPOINT TIME.
*
*    FOR LLE'S WHOSE CDE'S ARE ON THE JPQ, IT IS NECESSARY TO NOTE
*    THE POSITION OF THE CDE ON THE JPQ AS THE CDE'S WILL BE
*    RELOCATED DURING RESTART.
*
*    THE CHECKCODES USED FOR THE LLE'S ARE
*    .         - LLE WHOSE CDE IS ON JPQ - X'0A'
*    .         - LLE WHOSE CDE IS ON THE ACTIVE LPAQ - X'0E'
*
*
*    'CHECKPOINTING THE P/P TASK REQUEST BLOCK (RB) QUEUE'
*
*    AT CHECKPOINT TIME THE P/P RB QUEUE CAN ONLY CONTAIN PRB'S
*    AND SVRB'S. THE SVRB ALWAYS DESCRIBES AN SVC WHICH IS
*    RESIDENT IN EITHER THE MODIFIED LINK PACK AREA, FIXED LINK
*    PACK AREA, PAGED LINK PACK AREA, OR THE RESIDENT NUCLEUS.
*    INTERRUPT SUPERVISION CREATES THE SVRB FOR ALL TYPE 2,3, AND
*    THE INITIAL LOAD OF ALL TYPE 4 SVC'S. CONTENTS SUPERVISION
*    CREATES THE SVRB FOR ALL SUBSEQUENT LOADS OF TYPE 4 SVC'S.
*    THE SVC TABLE RESIDENT IN THE NUCLEUS CONTAINS THE ENTRY
*    POINT ADDRESSES FOR ALL TYPE 2, 3, AND 4 SVC'S, WHILE ANY
*    SUBSEQUENT LOADS OF A TYPE 4 SVC MUST BE FOUND THROUGH A
*    CDE ON THE ACTIVE LPA CDE QUEUE, WHEN THE MODULE HAS BEEN
*    FIX'ED OR MODIFIED, OR THROUGH THE LINK PACK DIRECTORY FOR
*    PAGED LPA MODULES. IN THIS CASE, THE SVRB WILL CONTAIN THE
*    ADDRESS OF THE CDE OR LPDE FOR THE REQUESTED MODULE.
*
*    PRB'S ARE CREATED FOR THE USER WHENEVER A LINK, SYNCH, OR
*    XCTL MACRO INSTRUCTION IS EXECUTED BY THE PROBLEM PROGRAM.
*    THE PRB IS CREATED BY CONTENTS SUPERVISION, AND, IN THE
*    CASE OF LINK OR XCTL, A CDE IS USED TO RELATE THE RB TO THE
*    REQUESTED MODULE. THE CDE MAY BE ON THE JPQ AND, IF SO, ITS
*    POSITION MUST BE NOTED FOR RESTART, OR, THE CDE MAY BE FOR
*    A MODULE RESIDENT IN THE LPA IN WHICH CASE THE MODULE NAME
*    AND ENTRY POINT ADDRESS MUST BE SAVED FOR RESTART. NOTE THAT
*    ANY TIME A LINK, LOAD OR XCTL IS ISSUED BY THE P/P FOR A
*    MODULE IN THE LPA, A CDE IS CREATED AND PLACED ON THE ACTIVE
*    LPA CDE QUEUE (UNLESS ONE ALREADY EXISTS IN WHICH CASE THE
*    CDE IS USED AGAIN), AND WHENEVER A DELETE OR EXIT SVC IS
*    ISSUED, THE CDE IS REMOVED FROM THE LPAQ IF THERE IS NO MORE
*    USE FOR IT.
*
*    THE CHECKCODES USED FOR THE RB QUEUE ARE
*    .         - SVRB FOR TYPE 2, 3, AND 1ST LOAD OF 4 - X'1F'
*    .         - SVRB FOR SUBSEQUENT LOADS OF TYPE 4 - X'1E'
*    .         - EOV SVRB - X'1D'                                Y02076
*    .         - SYNCH'ED PRB - X'05'
*    .         - PRB WITH CDE IN JPQ - X'0B'
*    .         - PRB WITH CDE ON LPAQ - X'0C'
*
*
*    'CHECKPOINTING THE STAE CONTROL BLOCKS'
*
*    STAE CONTROL BLOCKS (SCB'S) ARE CREATED TO ALLOW THE
*    PROGRAMMER TO RECOVER FROM AN ABEND CAUSED BY A ROUTINE
*    INVOKED BY LINK OR SYNCH. THESE CONTROL BLOCKS POINT TO
*    THE PROGRAM (RB) TO RECEIVE CONTROL SHOULD AN ABEND OCCUR.
*    SINCE THE RB'S WILL BE RELOCATED AT RESTART, THE POSITION
*    OF THE STAE RB ON THE P/P RB QUEUE HAS TO BE PASSED TO
*    RESTART. ALSO, THE TCB CONTAINS FLAGS WHICH MUST BE
*    RESTORED AT RESTART TIME. THE CHECKCODES ASSIGNED ARE
*    .         - TCBNSTAE FLAGS - X'0D'
*    .         - SCB - X'11'
*
*    'CHECKPOINTING THE P/P FOE CONTROL BLOCKS'
*
*    A FIX OWNERSHIP ELEMENT (FOE) IS CREATED FOR EACH PAGE
*    FIXED BY A TASK THROUGH THE PGFIX SVC FUNCTION. THIS CHAIN
*    IS ADDRESS ORDERED FROM LOW ADDRESS TO HIGH AND IS ANCHORED
*    BY THE TCBFOE FIELD OF THE JOB STEP TCB. EACH FOE HAS A
*    COUNT RELATING THE NUMBER OF TIMES THE PAGE HAS BEEN FIXED.
*    ONLY THOSE FOE'S DESCRIBING SPACE WITHIN THE USER'S         Y02076
*    PRIVATE REGION AND NOT IN LSQA WILL BE SAVED IN THE         Y02076
*    CHECKPOINT DATA SET.                                        Y02076
*
*    - FOE CHECKCODE = X'08'
*
         EJECT
IGC0G06C CSECT
*                                                                YM2776
         BALR  RB,N0               ESTABLISH BASE FOR CODE
         USING *,RB                CODE
         USING CHKWA,RC            BASE FOR CHKPT WORK AREA
         L     R2,CKDCBAD          GET @ CHECKPOINT DCB
         USING IHADCB,R2           DCB
         LA    R7,SYNAD            GET @ OF SYNAD ROUTINE
         STCM  R7,M7,DCBSYNA       PUT @ IN DCB
         DROP  R2                  DCB
         L     R5,CKTCBAD          GET @ OF TCB
         USING TCB,R5              TCB
         MVC   CKMN40(N8),CKMN3NM  SET DEFAULT XCTL MODULE NAME TO CM3.
         LA    R4,SURL             GET LENGTH OF A SUR BUFFER
         STH   R4,CKLNGTH1         INITIALIZE DECB FOR RECORD LENGTH
         ST    R4,CKBFLWA          INIT. NO. BYTES LEFT IN BUFFER
         L     R8,CKBFOFST         CALCULATE
         AR    R8,RC               START ADDR OF SUR BUFFER
         ST    R8,CKBFSTAD         INIT. PTR TO NEXT AVAIL. BYTE
         ST    R8,CMBUF            SAVE BUFFER ADDRESS FOR LATER
         TM    CKFLAG1,CKVEQR      IS THIS TASK V=R?             YM2776
CKVEQR   EQU   8                   V=R FLAG IN W.A.             YA00258
         BNO   CKNOVEQR            NO, GO ON                     YM2776
         LRA   R8,0(,R8)           GET REAL ADDRESS OF BUFFER    YM2776
CKNOVEQR DS    0H                                                YM2776
         ST    R8,CKAREA1          INIT. DECB FOR WRITE AREA ADDRESS
         SR    R3,R3               ZERO OUT REG FOR LATER
         XC    CKAPPLNT,CKAPPLNT   SET APPENDAGE LENGTH = 0
         SPACE 3
*
*        START OF CHECKPOINTING THE VIRTUAL STORAGE CONTROL BLOCKS.
*
         SPACE
         L     R5,TCBOTC           GET ADDR OF INITIATOR TCB
         LA    R6,N2               SET LOOP COUNTER TO 2
C7A4     L     R5,TCBOTC           GET ORIGINATING TCB
         SPACE 3
*        START OF SPQE PROCESSING FOR THIS TASK
         SPACE
C7B3     ICM   R3,M7,TCBMSSB       GET ADDR OF FIRST SPQE
         USING SPQESECT,R3         SPQE
C7H6     LTR   RA,R3               SEE IF ANYMORE SPQE'S AND SAVE @
         BZ    C7B7                NO MORE, DO NEXT TCB
         MVI   CKCODE,SPQECODE     SET CHECK CODE
         LA    RF,SPQESIZE         SET LENGTH OF BLOCK           Y02076
         ST    RF,CKLNT            *
         BAL   RD,WRITESUR         CHECKPOINT THE SPQE
         TM    SPQEFLGS,SPSHARE    IS SPQE OWNED
         BO    C7H4                NO - SHARED SO NO DQE'S.
C7F3     L     R3,SPDQEPTR         YES- GET DQE POINTER          Y02076
         LA    RF,DQFQLEN
         ST    RF,CKLNT            PLACE DQE/FQE LENGTH FOR WRITESUR
         DROP  R3                  SPQE
         USING DQESECT,R3          DQE
CKDQE    LTR   R9,R3               SEE IF ANYMORE DQE'S AND SAVE @
         BZ    C7H4                NO, GO GET NEXT SPQE
         MVI   CKCODE,DQECODE      SET THE CHECKCODE
         BAL   RD,WRITESUR         CHECKPOINT THE DQE
         SPACE 3
*              FQE PROCESSING
         SPACE
         ICM   R3,M7,DQFQEPTR+N1   GET ADDRESS OF FQE
         DROP  R3                  DQE
         USING FQESECT,R3          FQE
         MVI   CKCODE,FQECODE      SET SUR CODE FOR FQE
CKFQE    LTR   R3,R3               ANYMORE FQE'S
         BZ    NXTDQE              NO, DO NEXT DQE
         BAL   RD,WRITESUR         YES, CHECKPOINT THE FQE
         ICM   R3,M7,FQEPTR+N1     GET @ NEXT FQE
         B     CKFQE               DO NEXT FQE, IF ANY
         SPACE 3
NXTDQE   LR    R3,R9               RESTORE DQE POINTER
         DROP  R3                  FQE
         USING DQESECT,R3          DQE
         ICM   R3,M7,DQEPTR+N1     GET @ OF NEXT DQE
         B     CKDQE               GO PROCESS NEXT DQE
         SPACE 3
C7H4     LR    R3,RA               RESTORE SPQE POINTER
         DROP  R3                  DQE
         USING SPQESECT,R3         SPQE
         L     R3,SPQEAD           GET @ OF NEXT SPQE            Y02076
         B     C7H6                GO PROCESS NEXT SPQE
         DROP  R3                  SPQE
         SPACE 3
C7B7     L     R5,CKTCBAD          GET P/P TCB @
         BCTR  R6,R0               DECREMENT LOOP COUNT BY 1.
         LTR   R6,R6               DETERMINE WHICH TASK IS NEXT
         BZ    C7B3                DO P/P TASK NEXT
         BP    C7A4                DO INIT TASK NEXT
         EJECT
*
*        START OF CHECKPOINTING THE JPA CDE QUEUE.
*
         SPACE 3
         ICM   R3,M7,TCBJPQB       GET @ OF FIRST JPA CDE.
C9E2     LTR   R9,R3               ANY MORE CDE'S, AND SAVE ADDR
         BZ    C7H8A               NO, GO DO THE LLE'S.
         MVI   CKCODE,CDECODE      SET SUR CODE FOR A CDE
         LA    RF,CDELEN           MOVE IN LENGTH
         ST    RF,CKLNT            *
         USING CDENTRY,R3          CDE
         L     RA,CDRRBP           GET @ OF RB ASSOC. WITH CDE   Y02076
*                                  NOTE-- BYTE 0 GPR 10 =0 FROM SPQE
*                                         PROCESSING
         BAL   RD,SRCHRBQ          CHECKPOINT THE CDE
         TM    CDATTR,CDMIN        IS IT A MINOR CDE
         BO    C9K4                YES, BYPASS EXTENT LIST PROC.
         SPACE
*        START OF EXTENT LIST PROCESSING
         SPACE
         OC    CDXLMJP+1(3),CDXLMJP+1  IS EXTENT ADDR ZERO      ZA03227
         BZ    C9K4                BYPASS EXTENT LIST PROCESS   ZA03227
         TM    CDATTR2,CDXLE       IS EXTENT BLOCK BUILT        ZA03227
         BNO   C9K4                BYPASS EXTENT LIST PROCESS   ZA03227
         L     R3,CDXLMJP          @ OF EXTENT LIST FROM CDE     Y02076
         DROP  R3                  CDE
         MVI   CKCODE,XLCODE       MOVE IN CHECKCODE FOR EXT. LIST
         USING XTLST,R3            EXTENT LIST
         MVC   CKLNT(N4),XTLLNTH   CHECK THE LENGTH
         DROP  R3                  EXTENT LIST
         BAL   RD,WRITESUR         CHECKPOINT THE EXTENT LIST
C9K4     LR    R3,R9               RESTORE CDE POINTER
         USING CDENTRY,R3          CDE
         L     R3,CDCHAIN          GET ADDR NEXT CDE             Y02076
         B     C9E2                PROCESS NEXT CDE
         DROP  R3                  CDE
         EJECT
*
*        START OF CHECKPOINTING THE P/P LLE QUEUE
*
C7H8A    L     R3,TCBLLS           GET ADDR OF FIRST LLE         Y02076
         LA    RF,LLELEN           MOVE IN LENGTH OF LLE
         ST    RF,CKLNT            *
C7H8     LTR   R3,R3               IS THERE AN LLE
         BZ    C7H7A               NO- GO CHECKPOINT THE RB'S
         USING LLE,R3              LLE
         L     RA,LLECDPT          GET @ OF CDE ASSOC. WITH LLE  Y02076
         USING CDENTRY,RA          CDE
         TM    CDATTR,CDNIP        IS CDE FOR LPA MODULE
         BO    C7H81               YES, CHECKPOINT NAME AND ENTRY PT.
         MVI   CKCODE,LLEJCODE     NO, CHECKPOINT CDE POSITION
         BAL   RD,SRCHJPQ          CHECKPOINT THE LLE
C7H82    L     R3,LLECHN           GET ADDR OF NEXT LLE          Y02076
         B     C7H8                PROCESS NEXT LLE
         SPACE 3
C7H81    MVI   CKCODE,LLELCODE     LLE WITH CDE ON LPAQ (SET CODE)
         MVI   CKAPPLEN,LLEAPLEN   SET SUR APPEDAGE LENGTH FOR LLE
         BAL   RD,WRITESUR         CHECKPOINT THE LLE
         B     C7H82               GO GET NEXT LLE
         DROP  R3,RA               LLE,CDE
         EJECT
*
*        START OF CHECKPOINTING THE P/P TASK RB QUEUE
*
C7H7A    ICM   R3,M7,TCBRBP+N1     GET @ OF CHECKPOINT SVRB
         SH    R3,CMPFXLN          BACK UP TO START OF PREFIX
         USING RBPRFXST,R3         RB
         SPACE 3
CKSVRB   TM    RBSTAB2,RBTCBNXT    IS THIS THE LAST RB
         BO    C11H5               YES, GO DO THE STAE BLOCKS
         ICM   R3,M7,RBLINKB       GET @ NEXT RB
         SH    R3,CMPFXLN          BACK UP TO START OF PREFIX
         LH    RF,RBSIZE           GET SIZE OF RB IN DBL WDS
         SLL   RF,N3               MULT. BY 8 TO COMPUTE NO OF BYTES
         ST    RF,CKLNT            SET LENGTH FOR WRITE SUR
         ICM   RA,M7,RBCDE1        GET @ OF CDE/LPDE FOR RB
         TM    RBSTAB1,RBFTSVRB    IS RB AN SVRB
         BO    C7H71               YES, GO HANDLE SVRB
*
*        PRB PROCESSING
*
         MVI   CKCODE,PRBSCODE     SET CODE FOR SYNCHED PRB
         LTR   RA,RA               IS RBCDE FIELD=0.
         BZ    C7H72               YES - CHECKPOINT SYNCHED PRB
         MVI   CKCODE,PRBLCODE     SET CODE FOR PRB W/CDE ON LPAQ
         USING CDENTRY,RA          CDE
         TM    CDATTR,CDNIP        IS CDE ON LPAQ (LOADED BY NIP)
         BO    C7H73               YES, GO CHECKPOINT NAME AND EP. TOO
         MVI   CKCODE,PRBJCODE     SET CODE FOR PRB W/CDE ON JPQ
         BAL   RD,SRCHJPQ          CHECKPOINT RB WITH CDE POSITION
         B     CKSVRB              GO SEE IF THIS WAS LAST RB
         SPACE 3
*        SVRB PROCESSING
         SPACE
C7H71    L     RD,RBLINK           GET RB @                      Y02076
         DROP  R3                  RB                            Y02076
         SH    RD,CMPFXLN          BACK UP TO PREFIX             Y02076
         USING RBPRFXST,RD         ADDRESS RB                    Y02076
         CLI   RBINTCOD+N1,EOVSVC  Q - EOV SVRB                  Y02076
         DROP  RD                  RB                            Y02076
         BNE   C7H71A              BR NO                         Y02076
         MVI   CKCODE,SVRBEOVC     SET SUR CODE AND              Y02076
         MVI   CKAPPLEN,N0         APP. LNGTH TO ZERO            Y02076
         B     C7H72               COMPLETE EOV SVRB ENTRY       Y02076
C7H71A   MVI   CKCODE,SVRB234C     TYPE 2,3,4 SVRB APP. LEN.     Y02076
         MVI   CKAPPLEN,SVRB234A   SET APPENDAGE LENGTH         ZA05247
         LTR   RA,RA               IS CDE ADDRESS=0
         BZ    C7H72               YES- IT IS A TYPE 2,3,4 SVRB
         MVI   CKCODE,SVRB4NCD     NO - IT IS THE NTH LOAD OF TYPE4 SVC
C7H73    MVI   CKAPPLEN,RBLPALEN   SET APP. LENGTH FOR 4N OR LPA PRB
C7H72    BAL   RD,WRITESUR         CHECKPOINT THE RB
         B     CKSVRB              GO SEE IF THIS WAS LAST RB
         DROP  RA                  CDE                           Y02076
         EJECT
*
*        START OF CHECKPOINTING THE STAE CONTROL BLOCKS
*
         SPACE 3
C11H5    LA    R3,TCBNSTAE         GET @ OF STAE FLAGS
         MVI   CKCODE,NSTAECOD     SET CHECKCODE FOR TCBNSTAE FIELD
         LA    RF,NSTAELEN         SET LENGTH OF TCBNSTAE FIELD
         ST    RF,CKLNT            FOR WRITESUR
         BAL   RD,WRITESUR         CHECKPOINT TCBNSTAE
         ICM   R3,M7,TCBSTABB      GET @ OF FIRST SCB
         MVI   CKCODE,SCBCODE      SET CHECKCODE FOR SCB
         LA    RF,SCBLEN           SET LENGTH OF SCB
         ST    RF,CKLNT            FOR WRITESUR
         USING SCB,R3              SCB
CKSCB0   LTR   R3,R3               ANY SCB'S
         BZ    CKFOE1              GO PROCESS FOE'S IF ANY
         ICM   RA,M7,SCBOWNRA      GET @ OF RB FROM SCB
         BAL   RD,SRCHRBQ          CHECKPOINT SCB WITH RB POSITION
         ICM   R3,M7,SCBCHAIN+N1   GET @ OF NEXT SCB
         B     CKSCB0              GO PROCESS NEXT SCB
         DROP  R3                  SCB
         EJECT
*        CHECKPOINTING THE P/P FOE CONTROL BLOCKS
*
         SPACE 3
CKFOE1   MVI   CKCODE,FOECODE      PUT X'08' IN SUR CODE (CODE FOR FOE)
         LA    RF,FOELEN           SET LENGTH FOR A FOE
         ST    RF,CKLNT            FOR WRITESUR
         ICM   R3,M7,TCBFOEA       GET @ OF  FIRST FOE
CKFOE    BZ    C11H7               NO FOE'S LEFT, SO XCTL TO CHECKMAIN3
         SR    RF,RF               CLEAR HI AND LO BYTES         Y02076
         USING FOE,R3              FOE                           Y02076
         ICM   RF,M6,FOEVINDX      LOAD 2ND & 3RD BYTES WITH     Y02076
*                                  VIRTUAL INDEX.  THIS WILL     Y02076
*                                  GENERATE A VIRTUAL ADDRESS.   Y02076
         C     RF,CKPPM            IS ADDR BELOW USER REGION     Y02076
         BL    CKFOE2              BR YES, DON'T SAVE FOE        Y02076
         C     RF,CKPPE            IS ADDR ABOVE USER REGION     Y02076
         BNL   CKFOE2              BR YES, DON'T SAVE FOE        Y02076
         BAL   RD,WRITESUR         SAVE (CHKPT) FOE              Y02076
CKFOE2   DS    0H                                                Y02076
         ICM   R3,M7,FOEFLINK      GET ADDR OF NEXT FOE          Y02076
         B     CKFOE               SEE IF ALL DONE
         DROP  R3                  FOE
         EJECT
*
*        XCTL PROCESSING TO NEXT LOAD
*
C11H7    LA    RF,CKMN40           GET @ OF NAME OF NEXT MODULE
         LR    R1,RC               RESTORE @ OF CHKWA TO GPR 1
         ST    RF,CK40XCTL         PUT IT IN PARAM LIST
         LA    RF,CK40XCTL         GET @ OF PARAM LIST
         XCTL  SF=(E,(15))         XCTL TO NEXT LOAD
         EJECT
*
*        ROUTINE TO DETERMINE POSITION OF A CDE ON TCBJPQ
*
*        INPUT - @ OF CDE TO BE FOUND IN GPR 10.
*
*              - RETURN @ IN GPR 13. ROUTINE BRANCHES TO WRITESUR.
*
         SPACE 3
SRCHJPQ  DS    0H                  LABEL
C13A2    L     R8,TCBJPQ           GET @ OF FIRST CDE ON JPQ
         LA    R6,N1               SET POSITION INDEX TO 1.
         LA    R8,N0(R8)           CLEAR HI BYTE FOR COMPARES
C13A3    CR    R8,RA               CDE=CDE OF BLOCK
         BE    WRITESUR            YES, CDE FOUND GO CHECKPOINT BLOCK
         USING CDENTRY,R8          CDE
         L     R8,CDCHAIN          GET ADDRESS OF NEXT CDE       Y02076
         LA    R6,N1(R6)           INCREMENT INDEX BY 1
         B     C13A3               SEE IF THIS IS THE ONE
         DROP  R8                  CDE
         EJECT
*
*        ROUTINE TO DETERMINE POSITION OF AN RB ON P/P TCB RB CHAIN
*
*        INPUT - @ OF RB TO BE FOUND IN GPR 10.
*
*              - RETURN @ IN GPR 13. ROUTINE BRANCHES TO WRITESUR.
*
*
         SPACE 3
SRCHRBQ  SR    R6,R6               INIT. POSITION INDEX = 0.
         LTR   RA,RA               IS RB @ = 0
         BZ    WRITESUR            YES, NO RB SO LEAVE
         L     R8,TCBRBP           GET FIRST RB @ FROM TCB
         LA    R8,N0(R8)           CLEAR HI BYTE FOR COMPARES.
SRCHRB2  LA    R6,N1(R6)           INCR. POSITION INDEX BY 1.
         CR    R8,RA               RB=RB OF BLOCK
         BE    WRITESUR            YES, RB FOUND GO CHECKPOINT BLOCK
         USING RBSECT,R8           RB
         TM    RBSTAB2,RBTCBNXT    IS THIS LAST RB
         BO    SRCHRBQ1            YES, RB NOT FOUND
         ICM   R8,M7,RBLINKB       GET @ OF NEXT RB
         B     SRCHRB2             GO SEE IF THIS IS THE ONE
SRCHRBQ1 SR    R6,R6               RB NOT FOUND SO RESET INDEX TO 0.
*        FALL THROUGH TO WRITESUR
         DROP  R8                  RB
         EJECT
*
*        ROUTINE TO FORMAT THE SUR BUFFER
*
*        INPUT-SIZE OF CONTROL BLOCK IN CKLNT
*             -@ OF CONTROL BLOCK TO CHECKPOINT IN GPR 3
*             -APPENDAGE LENGTH FOR SUR IN CKAPPLNT (2 BYTES)
*             -CHECKCODE FOR CONTROL BLOCK IN CKCODE
*             -@ OF NEXT BYTE OF BUFFER IN CKBFSTAD
*             -@ OF START OF SUR BUFFER IN CMBUF
*             -NUMBER OF BYTES LEFT IN BUFFER IN CKBFLWA
*             -@ OF CDE/LPDE IF NECESSARY IN GPR 10
*             -POSITION OF CDE/RB ON QUEUE IF NECESSARY IN GPR 6.
*             -RETURN ADDRESS IN GPR 13.
*
*
*        OUTPUT-CKAPPLNT SET TO 0 (2 BYTES)
*              -CKBFSTAD UPDATED TO @ OF NEXT AVAIL. BYTE
*              -CKBFLWA UPDATED TO NO OF BYTES LEFT IN BUFFER
*
*
         SPACE 3
WRITESUR DS    0H                  BUFFER HANDLER ROUTINE
C13A1    STM   R2,RD,CKOBHSAV      SAVE REGS
         LH    R4,CKAPPLNT         GET APPENDAGE LENGTH IF ANY
         A     R4,CKLNT            INCREMENT BY BLOCK LENGTH
         LA    R4,N1(R4)           ADD 1 FOR CHECKCODE
*        R4 NOW CONTAINS # OF BYTES  NEEDED TO CHECKPOINT THIS BLOCK
         C     R4,CKBFLWA          IS THERE ENOUGH ROOM IN BUFFER
         BNH   C13C1               YES, GO MOVE THE BLOCK
         CLC   CMBUF+N1(N3),CKBFSTAD+N1 IS SUR BUFFER EMPTY
         BE    C13C1               YES, MOVE AS MUCH AS POSSIBLE
         L     R7,CKBFLWA          GET LENGTH AVAIL.
         LTR   R7,R7               IS SUR BUFFER FULL
         BZ    C13A22              YES, BYPASS SETTING NEXT BYTE TO 0
         L     R8,CKBFSTAD         GET @ OF NEXT AVAIL. BYTE
         MVI   N0(R8),N0           SET NEXT BYTE OF BUFFER TO 0 TO
*                                  INDICATE END OF DATA
C13A22   BAL   R7,WRITERTN         WRITE OUT CURRENT SUR BUFFER
C13C1    L     R8,CKBFSTAD         GET @ NEXT AVAIL. BYTE
         MVC   N0(N1,R8),CKCODE    MOVE IN CHECKCODE FOR BLOCK
         BCTR  R4,R0               DECR. BLKLEN BY LENGTH OF CHECKCODE
         LA    R8,N1(R8)           UPDATE @ OF NEXT AVAIL. BYTE
         ST    R8,CKBFSTAD         *
         L     RF,CKBFLWA          UPDATE REMAINING BYTE COUNT
         BCTR  RF,R0               *
         ST    RF,CKBFLWA          *
C13C2    C     R4,CKBFLWA          BLKLEN > # BYTES LEFT
         BH    C13C3               YES, GO MOVE AS MUCH AS POSSIBLE
         LR    RF,R4               COMPUTE LENGTH TO BE MOVED
         SH    RF,CKAPPLNT         REMOVE APPENDAGE SIZE IF ANY
         C     RF,HUNDRED          MOVING MORE THAN FF BYTES ? @ZA14558
         BNL   CMVCL               YES BRANCH TO MVCL          @ZA14558
         BCTR  RF,R0               ADJUST FOR EXECUTE OF MOVE
         EX    RF,MOVEBLK          MOVE THE BLOCK TO SUR BUFFER
         CLI   CKCODE,XLCODE       IS IT AN EXTENT LIST
         BE    C13D1               YES, GO UPDATE BUFFER POINTERS
         L     RD,CKLNT            GET LENGTH OF BLOCK
         A     RD,CKBFSTAD         COMPUTE @ OF APPENDAGE AREA IN BUF
         CLI   CKCODE,PRBLCODE     IS IT PRB W/CDE ON LPAQ
         BE    APNDEP              YES, GO PUT IN MODULE NAME AND EP
         CLI   CKCODE,LLELCODE     IS IT LLE W/CDE ON LPAQ
         BE    APNDEP              YES, GO PUT IN MODULE NAME AND EP
         CLI   CKCODE,PRBJCODE     IS IT PRB W/CDE ON JPQ
         BE    CKPRB               YES, GO PUT CDE POSITION IN RBCDE
         CLI   CKCODE,LLEJCODE     IS IT LLE W/CDE ON JPQ
         BE    CKLLE               YES, GO PUT CDE POSITION IN LLCDPTR
         CLI   CKCODE,SCBCODE      IS IT A STAE CONTROL BLOCK
         BE    CKSCB               YES, GO PUT RB POSITION IN SCBOWNRA
         CLI   CKCODE,SVRBEOVC     IS IT AN EOV SVRB             Y02076
         BE    C13D1               BR YES                        Y02076
         CLI   CKCODE,SVRB234C     IS IT T2,3,4 SVRB
         BE    CKT234              YES, GO APPEND EP AND SVC NO.
         CLI   CKCODE,SVRB4NCD     IS IT N'TH LOAD OF T4 SVC.
         BE    APNDEP              YES, GO PUT IN MODULE NAME AND EP
         CLI   CKCODE,CDECODE      IS IT A CDE
         BNE   C13D1               NO, JUST UPDATE BUFFER POINTERS
         USING CDENTRY,R8          CDE
         ST    R6,CDRRBP           RB POS. INDEX IN CDE IN BUF   Y02076
         TM    CDATTR2,CDOLY       Q - OVERLAY PROGRAM           Y02076
         BZ    C13D1               BR NO                         Y02076
         L     R2,CDXLMJP          GET EXTENT LIST ADDR          Y02076
         USING XTLST,R2            XTLST                         Y02076
         L     R2,XTLMSBAA         GET SEGTAB ADDR               Y02076
         DROP  R2                  XTLST                         Y02076
         L     RF,CVTPTR           GET CVT ADDR                  Y02076
         USING CVTMAP,RF           CVT                           Y02076
         CLC   N1(N3,R2),CVTLINK+N1 LINKLIB DCB                  Y02076
         BNE   C13D1               BR NO                         Y02076
         OI    CDRRBP,LINKLIB      SET LINKLIB INDICATOR         Y02076
         DROP  RF                  CVT                           Y02076
C13D1    L     R8,CKBFSTAD         GET @ OF NEXT AVAIL. BYTE OF BUFFER
         AR    R8,R4               UPDATE NEW START @ FOR NEXT BLOCK
         ST    R8,CKBFSTAD         * SAVE IT FOR NEXT CALL
         L     RF,CKBFLWA          GET OLD BYTES REMAINING
         SR    RF,R4               COMPUTE NEW BYTES REMAINING
         ST    RF,CKBFLWA          SAVE IT FOR NEXT CALL
C13D2    XC    CKAPPLNT,CKAPPLNT   CLEAR APPENDAGE LENGTH CELL
         LM    R2,RD,CKOBHSAV      RESTORE REGS
         BR    RD                  RETURN TO CALLER
         SPACE 3
*        BLOCK IS TOO LONG FOR THE BUFFER SO IT MUST BE SEGMENTED
         SPACE 3
C13C3    L     RF,CKBFLWA          GET LENGTH AVAIL. IN BUFFER
         C     RF,HUNDRED          LENGTH GREATER THAN FF HEX  @ZA14558
         BNL   CMVCL               YES BRANCH                  @ZA14558
         BCTR  RF,R0               ADJUST FOR EXECUTE OF MOVE
         EX    RF,MOVEBLK          FILL THE BUFFER
         A     R3,CKBFLWA          UPDATE BLOCK POINTER
         S     R4,CKBFLWA          UPDATE BLOCK LENGTH
         BAL   R7,WRITERTN         WRITE OUT FILLED BUFFER
         L     R8,CKBFSTAD         RESTORE BUFFER POINTER
         LTR   R4,R4               ANY MORE TO BE MOVED
         BP    C13C2               YES, GO MOVE IT
         B     C13D2               NO, GO RESET APP. LEN AND RETURN
* USE MVCL AS LENGTH IS TOO LONG FOR MVC INSTRUCTION           @ZA14558
CMVCL    EQU   *                                               @ZA14558
         L     R8,CKBFSTAD         GET STARTING ADDRESS OF SUR @ZA14558
         LR    RE,R8               GET SUR ADDRESS INTO REG E  @ZA14558
         LR    R6,R3               GET FIELD ADDRESS IN REG 6  @ZA14558
         LR    R7,RF               PUT LENGTH INTO REG      7  @ZA14558
         MVCL  RE,R6               MOVE BIG BLOCK              @ZA14558
         L     RF,CKBFLWA          RELOAD REG F                @ZA14558
         CR    R4,RF               COMPARE REG 4 WITH F        @ZA19627
         BL    AHEAD               BRANCH IF 4 IS LESS         @ZA19627
         SR    R4,RF               DECREMENT LENGTH IN REG  4  @ZA14558
         AR    R3,RF               POINT R3 TO NEW FIELD ADDR  @ZA14558
         BAL   R7,WRITERTN         WRITE SUR BUFFER OUT        @ZA14558
         L     R8,CKBFSTAD         RELOAD SUR STARTING ADDRESS @ZA27110
         LTR   R4,R4               ALL DATA PUT OUT ???        @ZA14558
         BP    C13C2               NOT YET GO FINISH           @ZA14558
         B     C13D2               YES END OF PROCESSING       @ZA14558
AHEAD    EQU   *                                               @ZA19627
         AR    R8,R4               POINT TO NEXT SUR RECORD    @ZA19627
         ST    R8,CKBFSTAD         SET UP ADDRESS OF NEXT SUR  @ZA19627
         SR    RF,R4               DECREMENT BYTE COUNT LEFT   @ZA19627
         ST    RF,CKBFLWA          SAVE COUNT IN WORK AREA     @ZA19627
         B     C13D2               BRANCH TO PROCESS NEXT SUR  @ZA19627
*                                                              @ZA14558
         SPACE 3
*        THE BLOCK IS A PRB WITH CDE ON JPA QUEUE
         SPACE
         USING RBPRFXST,R8         RB
CKPRB    STCM  R6,M7,RBCDE1        PUT CDE INDEX INTO RB IN BUFFER
         B     C13D1               GO UPDATE BUFFER POINTERS
         DROP  R8                  RB
         SPACE 3
*        THE BLOCK IS AN LLE WITH CDE ON JPA QUEUE
         SPACE
         USING LLE,R8              LLE
CKLLE    ST    R6,LLECDPT          CDE INDEX IN LLE IN BUFFER    Y02076
         B     C13D1               GO UPDATE BUFFER POINTERS
         DROP  R8                  LLE
         SPACE 3
*        THE BLOCK IS AN SCB
         SPACE
         USING SCB,R8              SCB
CKSCB    STCM  R6,M7,SCBOWNRA      PLACE RB INDEX INTO SCB IN BUFFER
         B     C13D1               GO UPDATE BUFFER POINTERS
         DROP  R8                  SCB
         SPACE 3
*        THE BLOCK IS AN SVRB FOR A TYPE 2, 3, OR 1ST LOAD OF A
*              TYPE 4 SVC.
         SPACE
         USING RBPRFXST,R3         RB
CKT234   L     RF,RBLINK           GET @ OF PREV. RB.
         DROP  R3                  RB
         SH    RF,CMPFXLN          BACKUP TO PREFIX
         USING RBPRFXST,RF         RB (PREVIOUS)
         LH    R0,RBINTCOD         GET SVC NO. FOR THIS SVRB
         STC   R0,N4(RD)           PUT SVC NO. INTO SUR APPENDAGE AREA
         DROP  RF                  RB (PREVIOUS)
         L     RE,CVTPTR           GET @ OF CVT
         USING CVT,RE              CVT
         L     RE,CVTABEND         GET @ OF SECONDARY CVT
         DROP  RE                  CVT
         USING SCVTSECT,RE         SCVT
         L     RE,SCVTSVCT         GET @ OF SVC TABLE (IBMORG)
         DROP  RE                  SCVT
CKT234EP SLL   R0,N3               MAKE SVC NO. AN INDEX FACTOR  Y02076
         AR    RE,R0               GET @ OF SVC TABLE ENTRY
         MVC   N0(N4,RD),N0(RE)    MOVE ENTRY POINT @ TO SUR APPENDAGE
         B     C13D1               GO UPDATE BUFFER POINTERS
         SPACE 3
*        THE BLOCK IS A SUBSEQUENT LOAD OF A TYPE 4 SVC, A PRB
*        WITH THE CDE ON THE LPAQ, OR AN LLE WITH THE CDE ON THE LPAQ
         SPACE
         USING CDENTRY,RA          CDE
APNDEP   MVC   N0(N8,RD),CDNAME    MOVE MODULE NAME TO SUR APPENDAGE
         MVC   N8(N4,RD),CDENTPT   MOVE IN ENTRY POINT ADDRESS
         DROP  RA                  CDE
         B     C13D1               GO UPDATE THE POINTERS
*
*        THE FOLLOWING INSTRUCTION IS THE SUBJECT OF EXECUTE
*        INSTRUCTIONS TO MOVE A CONTROL BLOCK INTO THE SUR BUFFER.
*
         SPACE
MOVEBLK  MVC   N0(N0,R8),N0(R3)    MOVES BLOCK TO SUR BUFFER
         EJECT
*
*        ROUTINE TO OUTPUT THE SUR RECORD
*
*        INPUT - RETURN ADDRESS IN GPR 7.
*
*        OUTPUT - SUR BUFFER WRITTEN TO CHECKPOINT DATA SET
*               - SUR BUFFER POINTERS REINITIALIZED.
*
*
         SPACE 3
WRITERTN L     R5,CKDCBAD          GET DCB @ FOR CHECKPOINT DATA SET
         LA    RD,CKREGSAV         GET @ OF STD SAVE AREA FOR BSAM
         WRITE CKDECB1,SF,(5),,MF=E     WRITE OUT THE SUR BUFFER
         CHECK CKDECB1             COMPLETE THE WRITE
         TM    CKFLAG1,CKTAPE      IS DATA SET ON TAPE
         BZ    CMEOVDA             NO THEN CHECK FOR EOV ON DASD
         L     RF,CKTSTEOV         GET @ VOL SEQ NO IN UCB
         CLC   N0(N4,RF),CKEOVCMR  DID EOV OCCUR (IS SEQ NO CHANGED)
         BNE   CMEOV               YES, EOV IS INDICATED
CMTIOTST CLI   CKRETIO,CKIOERR     WAS THERE AN I/O ERROR
         BE    CKEROUT             YES, GO XCTL TO I/O RESUME
C13B1    L     RF,CMBUF            RE-INITIALIZE THE CURRENT BUFFER
         ST    RF,CKBFSTAD         POINTER TO START OF SUR BUFFER
         LA    RF,SURL             RE-INITIALIZE THE NUMBER OF BYTES
         ST    RF,CKBFLWA          AVAILABLE TO LENGTH OF SUR
         BR    R7                  RETURN TO CALLER
         SPACE 3
         USING IHADCB,RF           DCB
CMEOVDA  L     RF,CKDCBAD          GET @ OF CHKPT DCB
         L     RF,DCBDEBAD         GET @ OF DEB
         DROP  RF                  DCB
         USING DEBBASIC,RF         DEB
         CLC   DEBNMEXT(N1),CKTSTEOV    IS IT EOV ON DASD
         DROP  RF                  DEB
         BE    CMTIOTST            NO, CHECK FOR I/O ERROR
CMEOVER  MVI   CKRETIO,N8          SET RETURN CODE TO 8
         LA    RF,CKERIO7          INDICATE EOV MESSAGE CODE
         STH   RF,CKMSGCOD         PUT IT IN WORK AREA
CKEROUT  MVI   CKXCTL,CHARN        SET TO XCTL TO IGC0N06C
         B     C11H7               GO XCTL
         SPACE
CMEOV    TM    CKFLAG2,CKEOV       IS IT 2ND EOV FOR THIS REQUEST
         BO    CMEOVER             YES, GO TERMINATE CHECKPOINT
         OI    CKFLAG2,CKEOV       1ST EOV SO TRY AGAIN
         MVI   CKXCTL,CHAR2        SET TO XCTL TO IGC0206C
         B     C11H7               GO XCTL
         SPACE 3
*
*        CHECKMAIN 2 SYNAD ROUTINE
*
         SPACE
SYNAD    LA    R0,X317             GET MESSAGE CODE FOR I/O ERROR
         STH   R0,CKMSGCOD         PUT IT IN CHKWA.
         MVI   CKRETIO,CKIOERR     SET I/O ERROR FLAG
         BR    RE                  RETURN TO CALLER
         DROP  R5,RB,RC            TCB,CODE,CHKWA
         EJECT
*
*              CONSTANTS AND EQUATES
*
         SPACE 3
         DS    0F
HUNDRED  DC    X'00000100'         HEX VALUE OF 100 DEC 256    @ZA14558
ONE8FOX  DC    X'0000018F'         HEX VALUE OF FULL SUR       @ZA14558
CKMN3NM  DC    C'IGC0H06C'         NAME OF CHECKMAIN 3.
         DS    0H                  ALIGNMENT
CMPFXLN  DC    AL2(RBPRFLNA)       LENGTH OF THE RB PREFIX
CKMH4    DC    H'4'                USED TO GET @ OF SVCTABLE-4, HI IBM
*                                  SVC NUMBER, LO USER SVC NUMBER.
         SPACE 3
EOM      EQU   *                   END OF MODULE
MODLEN   EQU   EOM-IGC0G06C        LENGTH OF MODULE
AREALEN  EQU   MODLEN/10           LENGTH OF PATCH AREA
PAREA    DS    CL(AREALEN)         PATCH AREA FOR MAINT. OF 10%
         SPACE 3
N0       EQU   0                   0
N1       EQU   1                   1
N2       EQU   2                   2
N3       EQU   3                   3
N4       EQU   4                   4
N8       EQU   8                   8
LINKLIB  EQU   B'10000000'         LINKLIB IND FOR CDE           Y02076
         SPACE
M3       EQU   3                   MASK FOR BYTES 2 AND 3 OF REG
M6       EQU   6                   REG MASK FOR BYTES 1 & 2      Y02076
M7       EQU   7                   MASK FOR BYTES 1-3 OF REG
NOTEQ    EQU   7                   MASK TO BRANCH ON UNEQUAL COMPARE
         SPACE
CHARN    EQU   C'N'                EBCDIC N
CHAR2    EQU   C'2'                ECBDIC 2
X317     EQU   X'317'              ERROR MSG NUMBER FOR I/O ERROR
CKERIO7  EQU   X'31B'              INDICATES EOV ERROR
         SPACE
SURL     EQU   400                 LENGTH OF A SUR RECORD        YM7049
         SPACE
SPQECODE EQU   6                   CHECKCODE FOR SPQE
SPQESIZE EQU   16                  LENGTH OF AN SPQE             Y02076
DQECODE  EQU   7                   CHECKCODE FOR DQE
FQECODE  EQU   2                   CHECKCODE FOR FQE
DQFQLEN  EQU   16                  LENGTH OF A DQE OR FQE
CDECODE  EQU   9                   CHECKCODE FOR CDE
CDELEN   EQU   32                  LENGTH OF CDE                 Y02076
XLCODE   EQU   X'17'               CHECKCODE FOR EXTENT LIST
LLEJCODE EQU   X'0A'               CHECKCODE FOR LLE W/CDE ON JPQ
LLELCODE EQU   X'0E'               CHECKCODE FOR LLE W/CDE ON LPAQ
LLELEN   EQU   12                  LENGTH OF AN LLE              Y02076
LLEAPLEN EQU   12                  LENGTH OF SUR APPENDAGE FOR LLE
PRBSCODE EQU   5                   CHECKCODE FOR SYNCHED PRB
PRBLCODE EQU   X'0C'               CHECKCODE FOR PRB W/CDE ON LPAQ
PRBJCODE EQU   X'0B'               CHECKCODE FOR PRB W/CDE ON JPQ
SVRB234C EQU   X'1F'               CHECKCODE FOR TYPE 2, 3, 4 SVRB
SVRB4NCD EQU   X'1E'               CHECKCODE FOR TYPE 4N SVRB
SVRB234A EQU   5                   SUR APP. LEN. FOR TYPE 2,3,4 SVRB
RBLPALEN EQU   12                  SUR APP. LEN. FOR 4N SVRB, LPAQ PRB
NSTAECOD EQU   X'0D'               CHECKCODE FOR TCBNSTAE FIELD
NSTAELEN EQU   4                   LENGTH OF TCBNSTAE FIELD OF TCB
SCBCODE  EQU   X'11'               CHECKCODE FOR SCB
FOECODE  EQU   X'08'               CHECKCODE FOR FOE
EOVSVC   EQU   55                  SVC 55 (EOV)                  Y02076
SVRBEOVC EQU   X'1D'               EOV SVRB CODE FOR SUR         Y02076
         EJECT
         IEEVCHWA VER=3            AOS2 VERSION OF WA
         EJECT
*        CHECKMAIN WORK AREA PORTION OF CHECKPOINT WORK AREA
         SPACE
CKRETIO  EQU   CKRETCOD+1          BYTE FOR ERROR RETURN CODE
CKTSTEOV EQU   CKUNIT              @ OF VOL SEQ NO IN UCB (TAPE)
*                                  CURRENT EXTENT NO. (DASD)
CKEOVCMR EQU   CKUNIT+4            VOL SEQ NO OF CURRENT VOL. (TAPE)
CMADEOV  DS    F                   SAVE AREA FOR INFO NEEDED
CMNEOV   DS    F                   TO TEST IF EOV OCCURRED
CKBFLWA  DS    F                   REMAINING BYTES IN BUFFER
CKBFSTAD DS    F                   NEXT BYTE IN BUFFER TO BE FILLED
CMBUF    DS    F                   BUFFER ADDRESS
CKMN40   DS    2F                  SAVE AREA FOR XCTL ADDRESS
CK40XCTL DS    F                   SAVE AREA FOR XCTL
CKOBHSAV DS    12F                 SAVE AREA FOR SUBROUTINES
CME2     DS    CL1                 BIG BLOCK SWITCH
CKCODE   DS    CL1                 SUR CODE FOR THIS BLOCK
CKLNT    DS    F                   SUR LENGTH FOR THIS BLOCK
CMSYSA   DS    F                   SYSTEM WORK CELL
CKXCTL   EQU   CKMN40+4            ALLOWS FOR CHANGE OF XCTL ADDRESS
SWITCH   DS    F                   SWITCH WORD
CKAPPLNT DS    H                   APPENDAGE LENGTH FOR THIS BLOCK
CKAPPLEN EQU   CKAPPLNT+N1         OFFSET TO SECOND BYTE
         EJECT
         CVT   DSECT=YES,PREFIX=NO
         EJECT
         IHASCVT
         EJECT
         IKJTCB
         EJECT
         IKJRB
         EJECT
         IHASCB
         EJECT
         IHACDE
         EJECT
         IHAXTLST
         EJECT
         IHALLE
         EJECT
         IHASPQE
         EJECT
         IHADQE
         EJECT
         IHAFQE
         EJECT
         IHAFOE
         EJECT
         IHADCB DSORG=(PO,PS),DEVD=(DA,TA)
         EJECT
         IEZDEB
.LIB1BA1 ANOP
         AIF   ('&LIB' EQ 'LIB2').LIB2BA1  TEST FOR LIB2(AOS)
*
*                                                                     *
* STATUS - CHANGE LEVEL 001                                           *
*                                                                     *
*                                                                     *
* FUNCTION...                                                         *
*   WRITES SUPERVISOR RECORDS ON CHKPT DATA SET. THESE CONTAIN THE    *
*   MAIN STORAGE SUPERVISOR'S CONTROL BLOCKS, AND SOME OF THE CONTENTS*
*   SUPERVISOR'S CONTROL BLOCKS,INCLUDING RB'S AND LLE'S.             *
*                                                                     *
*                                                                     *
* ENTRY...                                                            *
*   IGC0G06C                                                          *
*                                                                     *
*                                                                     *
* INPUT...                                                            *
*   N/A                                                               *
*                                                                     *
*                                                                     *
* OUTPUT...                                                           *
*   CHKPT DATA SET SUPERVISOR RECORDS                                 *
*                                                                     *
*                                                                     *
* EXITS                                                               *
*   NORMAL- XCTL TO IGC0H06C (NEXT LOAD OF RESTART)                   *
*   ERROR                                                             *
*   (1)UNRECOVERABLE EOV ON CKPT DATA SET- XCTL TO IGC0N06C WITH      *
*      RETURN CODE OF 8                                               *
*   (2)RECOVERABLE EOV ON CKPT DATA SET- XCTL TO IGC0206C             *
*   (3)I/O ERROR- XCTL TO IGC0N06C WITH RETURN CODE OF 12             *
*                                                                     *
*                                                                     *
         EJECT
*
*       THIS LOAD OF CHKMAIN WRITES OUT THE FOLLOWING
*       CONTROL BLOCKS.
*
*                                            CODE      LENGTH
*                                            IN HEX    IN BYTES
*
*        DQE   DESCRIPTOR QUEUE ELEMENT        7          16
*        LLE   LOAD LIST ELEMENT
*              LLE WITH CDE IN JPA             A           8
*              LLE WITH CDE IN LPA             E           8
*        PQE   PARITION QUEUE ELEMENT          4          32
*              PQE WITH FBQE                   3          32
*        PRB   PROGRAM REQUEST BLOCK
*              PRB WITH CDE IN JPA             B          32
*              PRB WITH CDE IN LPA             C          32
*              PRB WITH NO CDE (SYNCH)         5          32
*        SCB   STAE CONTROL BLOCK             11          16     A37977
*        SPQE  SUB-POOL QUEUE ELEMENT          6           8
*        STAE  TCB STAE                        D           4     A37977
*        SVRB  SUPERVISOR REQUEST BLOCK
*              RESIDENT SVRB                  1F         FROM
*              TRANSIENT SVRB                 1E       RBSIZE BYTE
*        USER  USER FIELD IN TCB               F           4
*
*        ORDER IN WHICH CONTROL BLOCKS ARE WRITTEN OUT           A37977
*        (READ ACROSS)                                           A37977
*                                                                A37977
*        PQE     SPQE         DQE    RB     LLE    TCBNSTAE      A37977
*        SCB     TCBUSER      CDE    TCBFIELDS     G.P. REGS     A37977
*        DEB     IRB          F.P. REGS            TIOT          A37977
         SPACE 2
IGC0G06C CSECT
*3050004000,010000,088400,096000-097000,116000,132000,168000,182000,
*    192000,198000,214000,224000-231000,234000,248000,257000,
*    266000-268000,270000,278000,294000,308000,310000,319000-338200,
*    346000,349500,352800-354000,359000,366000-368000,374000,382000,
*    386000,388000,392000,408000-432000,434000,456000-460000,462000,
*    472000,482000-496000,508000,514000-526000,532000-575000,
*    614000-615000,630000-632000,680000,686300,904000-910000
*470500                                                           M3721
*089200,390370-390800,390920-391840                              A37977
*0417604000,622000-636000,652000-656000                          A38515
         EJECT
C7A1     BALR  RB,N0          ESTABLISH BASE
         USING *,RB
         USING CHKWA,RC
         USING IHADCB,R2
         USING TCBSECT,R5
         L     R2,CKDCBAD     CHKPT. DCB ADDRESS
         LA    R7,C13B5       ADDRESS OF SYNAD ROUTINE
         ST    R7,CMSYSA      STORE ADDRESS IN W.A.
         MVC   SYNADCB(N3),CMSYS1       AND CHKPT DCB
         L     R5,CKTCBAD     TCB ADDRESS
         DROP  R2
         MVC   CKMN40(N8),CKMN32A       SET UP XCTL PARM LIST
         LA    R4,SURL        BUFFER LENGTH.
         STH   R4,CKLNGTH1    INITIALIZE DECB1
         ST    R4,CKBFLWA     INIT.NO. OF REMAINING
*                             BYTES IN BUFFER
         L     R8,CKBFOFST    BUFFER ADDRESS
         AR    R8,RC
         ST    R8,CKBFSTAD    INIT. STARTING ADDRESS OF BUFFER
         ST    R8,CMBUF       SAVE BUFFER ADDRES
*
*        ROUTINE TO PROCESS PQE'S
*
         L     R3,TCBPQE      DUMMY PQE
         L     R3,PQENXT(R3)  GET FIRST PQE
C7B1A    EQU   *
         C     R3,N0(R3)      ANY FBQES
         BNE   C7B1B               BRANCH IF YES
         MVI   CKCODE,N4      PQE WITH NO FBQE PTR CODE
         B     C7B1C          NO  FBQES
C7B1B    EQU   *
         MVI   CKCODE,N3      PQE WITH FBQE PTRS CODE
C7B1C    EQU   *
         MVI   CKLNT,N32      PQE=LENGTH 32
         BAL   RD,C13A1       GO TO WRITE SUP RECORDS ROUTINE
         L     R3,PQENXT(R3)       GET NEXT PQE
         LTR   R3,R3          Q. LAST PQE
         BNE   C7B1A          PROCESS NEXT FBQE
         EJECT
*
*        ROUTINE TO PROCESS SPQE'S AND DQE'S FOR
*              (1)  L-SHAPED PROGRAM
*              (2)  INITIATOR
*              (3)  PROBLEM PROGRAM
*
*
         L     R5,TCBOTC      INITIATOR'S TCB
         LA    R6,N2          SET COUNT TO 2
C7A4     EQU   *
         L     R5,TCBOTC      GET ORIGINATING TCB
C7B3     EQU   *
         L     R3,TCBMSS      GET SPQE POINTER
C7D3     EQU   *
         LA    R3,N0(R3)
         LTR   RA,R3          Q.  LAST SPQE      ALSO SAVE R3
         BZ    C7H6           GO TO   PP TCB
         MVI   CKCODE,N6      SPQE CODE = 6
         MVI   CKLNT,N8       LENGTH=8
         BAL   RD,C13A1       WRITE SUP RECORDS ROUTINE
         TM    N0(R3),X80     Q. OWNED SPQE
         BO    C7H4           NO- SKIP CODE TO SAVE DQES.
C7F3     EQU   *
         L     R3,SPQEDQE(R3) YES  GET DQE POINTER
         LA    R3,N0(R3)
         LTR   R3,R3          Q.  ANY DQE'S
         BZ    C7H4           NO
         MVI   CKCODE,N7      DQE = CODE 7
         MVI   CKLNT,N16      LENGTH =16
         BAL   RD,C13A1       TO OUTPUT BUFFER HANDLER
         B     C7F3           SAVE DQES
C7H4     EQU   *
         L     R3,N0(RA)      RESTORE R3
         B     C7D3           PROCESS NEXT SPQE
C7H6     EQU   *
         L     R5,CKTCBAD     GET PP TCB
         BCTR  R6,N0          DECREMENT COUNT
         LTR   R6,R6          Q. HAVE INITIATOR SPQE'S BEEN SAVED
         BH    C7A4           A. NO -GO TO SAVE THEM
         BE    C7B3           A. YES SAVE P/P SPQE'S
         EJECT
*
*
*        ROUTINE TO SAVE PRB'S
*
*
C10A1    EQU   *
         L     R3,N0(R5)      CHKPT SVRB
         USING RBSECT,R3
         L     R3,NEXTRB      GET FIRST PRB
         LA    R2,C10H4       RETURN ADDR
C10A2    EQU   *
         TM    RBSTAB,TRANS   Q.  SVRB FOR TRANS SVC
         BO    C10J1          YES
         TM    RBSTAB,RBFTP   Q.  SVRB FOR TYPE 2 SVC
         BO    C10K1          YES
         LH    RF,PRBCDE      CODE FOR PRB WITH CDE IN JPA
         LA    RD,N1(RF)      CODE FOR PRB WITH CDE IN LPA
         L     R4,RBEP        GET THE CDE FOR THIS PRB
         LA    R4,N0(R0,R4)   CLEAR HI ORDER BYTE
         LTR   R4,R4          IS THERE A CDE FOR THIS PRB
         BP    C10D1          YES
         MVI   CKCODE,N5      CODE FOR SYNCHED PRB IS 5
         B     C10K2          TO SVRB ROUTINE
C10D1    EQU   *
         L     R7,TCBJPQ      FIRST CDE OFF TCB
         USING CDESECT,R7
         LA    R6,N1          FIRST CDE INDICATOR
         LA    R7,N0(R7)      CLEAR HI BYTE
C10F1    EQU   *
         CR    R7,R4          Q.  CDE OFF TCB = CDE OFF PRB
         BE    C10F2          CDE IN JOB PACK AREA
         L     R7,CDATTR1          NEXT CDE OFF TCB
         LA    R7,N0(R7)
         LTR   R7,R7          Q.  LAST CDE
         BZ    C10H1          YES
         LA    R6,N1(R6)      INCREMENT THE COUNTER
         B     C10F1          PROCESS NEXT CDE
         EJECT
*
*        SPECIAL HANDLING FOR SVRB'S
*
C10J1    EQU   *
         L     R6,CVTPTR      GET ADR. OF CVT
         USING CVTSECT,R6
         L     R6,CVTABEND    GET ADR. OF 2NDARY CVT
         USING SCVTSECT,R6
         L     R6,SCVTTACT    GET ADR. OF TRANS. CONTROL TABLE
         DROP  R6
         AH    R6,RBTABNO     ADR OF TACT ENTRY FOR SVRB
         L     R6,N0(R6)      ADR OF BEGINNING OF XSNT AREA
         LA    R6,N0(R6)      CLEAR HI BYTE
         L     R4,OLDPSW5     INSTR CTR FROM PSW IN SVRB
         SR    R4,R6          GET RELATIVE OFFSET
*                             INTO TRANSIENT AREA
         ST    R4,CMSYSA      SAVE RELATIVE OFFSET
         MVI   CKCODE,N30     CODE FOR XSNT SVRB IS 30
         B     C10K2          TO GET SIZE AND SET UP BUFFER
C10K1    EQU   *
         MVI   CKCODE,N31     RESIDENT SVC
C10K2    EQU   *
         IC    R4,RBSIZE
         SLL   R4,N3          GET LENGTH OF SVRB,
         STC   R4,CKLNT       INCLUDING EXTENDED SAVE AREA
         BAL   RD,C13A1       WRITE OUT SUR
         BR    R2             RETURN TO CALLER
*
*
*        INTERFACE WITH OUTPUT BUFFER ROUTINE SET UP FOR
*        PRB OR LLE WITH CDE IN LINK PACK AREA
*
*        REGISTER INPUT
*
*        R2    RETURN ADDRESS
*        R3    ADDRESS OF BLOCK TO BE WRITTEN
*        R6    NUMBER OF BLOCK
*        RD    LENGTH AND CODE FOR BLOCK ADDRESSED IN R3
*
*        ON RETURN RD WILL NOT CONTAIN ORIGINAL INPUT
*
C10H1    EQU   *
         LA    RD,LPACDE(RD)  INCREMENT LENGTH BY 12 BYTES TO
*                             ACCOMMODATE MODULE NAMES
*                             AND ENTRY POINTS
         STH   RD,CKLNT       PRB OR LLE WITH CDE IN LPA
         BAL   RD,C13A1       WRITE OUT SUR
         BR    R2             RETURN
         EJECT
*
*
*        INTERFACE WITH OUTPUT BUFFER ROUTINE SET UP FOR
*        PRB OR LLE WITH CDE IN JOB PACK AREA
*        TCB STAE AND USER FIELDS AND SCB'S
*
*        REGISTER INPUT
*
*        R2    RETURN ADDRESS
*        R3    ADDRESS OF BLOCK TO BE WRITTEN
*        R6    NUMBER OF BLOCK
*        RF    LENGTH AND CODE FOR BLOCK ADDRESSED IN R3
*
*        ON RETURN RD WILL NOT CONTAIN ORIGINAL INPUT
*
C10F2    EQU   *
         STH   RF,CKLNT       STORE CODE AND LENGTH.
         BAL   RD,C13A1       WRITE OUT SUR
         BR    R2             RETURN TO CALLER
*
*        UPDATES PRB POINTER
*
C10H4    EQU   *
         L     R3,NEXTRB      GET NEXT PRB ON CHAIN
         LA    R3,N0(R3)      CLEAR HIGH BYTE
         CR    R3,R5          Q.  LAST PRB
         BNE   C10A2          A.  NO   LOOP TO PROCESS
*
*
*        ROUTINE TO SAVE LLE'S
*
*
         L     R3,TCBLLS      FIRST LLE OFF TCB
C11H4    EQU   *
         LTR   R3,R3          Q.  ARE THERE ANY LLE'S
         BNH   C11H5               DO STAE AND USER FIELD
         L     R4,LLECOUNT(R3)     FIRST CDE OFF LLE
         LA    R4,N0(R0,R4)
         LA    RF,LLECOD     CODE= 10 FOR LLE
         LA    RD,LLECDE     CODE= 14 FOR LLE WITH CDE IN LPA
         BAL   R2,C10D1            FIND THE CDE
         L     R3,LLECHAIN(R3)     GET THE NEXT LLE
         B     C11H4               PROCESS IT
         EJECT
*
*        ROUTINE TO SAVE TCB STAE AND USER FIELDS AND SCB'S
*
C11H5    EQU   *
         LA    R8,C10F2       QUEUE POSITIONAL RTN ADRS FOR PRB
         LA    R3,TCBNSTAE    GET ADR OF STAE FIELD
         LA    RF,STAECODE    GET CODE FOR STAE
         BALR  R2,R8          WRITE OUT STAE FIELD
         L     R3,TCBNSTAE    GET ADR OF FIRST SCB               A37977
C11J1    EQU   *                                                 A37977
         LA    R3,N0(R3)      CLEAR FLAG BYTE                    A37977
         LTR   R3,R3          IF NO SCB'S                        A37977
         BZ    C11H7          PROCESS USER FIELD                 A37977
         LA    R6,N1          INITIALIZE POSITIONAL POINTER      A37977
         CLC   N1(N3,R5),SCBRB(R3)  Q.  IS IT THE FIRST RB       A37977
         BE    C11J4                A.  YES PUT IT IN BUFFER     A37977
         L     R7,N0(R5)            A.  NO GET ADDR.OF NEXT RB   A37977
*                                                                A37977
         USING RBSECT,R7                                         A37977
*                                                                A37977
C11J2    EQU   *
         TM    STAB2,LASTRB        Q.  IS THIS THE LAST RB       A37977
         BO    C11J3               A.  YES PUT SCB IN BUFFER     A37977
         LA    R6,N1(R6)           INCREMENT POSITONAL PTR       A37977
         CLC   RBLINK(N3),SCBRB(R3)   Q.  IS IT THIS RB          A37977
         BE    C11J4               A.  YES PUT SCB IN BUFFER     A37977
         L     R7,NEXTRB           A.  NO GET NEXT RB            A37977
         B     C11J2               AND PROCESS IT                A37977
C11J3    EQU   *                                                 A37977
         SR    R6,R6               SHOW RB NOT ON ACTIVE QUEUE   A37977
C11J4    EQU   *                                                 A37977
         MVI   CKLNT,SCBSIZE       SET UP LENGTH AND CODE        A37977
         MVI   CKCODE,SCBCODE      FOR BUFFER ROUTINE            A37977
         BAL   RD,C13A1            LINK TO BUFFER HANDLER        A37977
         L     R3,N0(R3)           GET NEXT SCB                  A37977
         B     C11J1               AND PROCESS IT                A37977
C11H7    EQU   *
         LA    R3,TCBUSER          GET ADRS OF USER FIELD
         LA    RF,USERCODE         GET CODE FOR USER FIELD
         BALR  R2,R8               AND WRITE IT OUT
*
*        XCTL  INTERFACE
*
C11H6    EQU   *
         LR    R1,RC          PUT W.A. ADDR IN PARM REG
         LA    RF,CKMN40           SET UP XCTL PARM LIST
         ST    RF,CK40XCTL
         LA    RF,CK40XCTL
         XCTL  SF=(E,(15))   XCTL TO NEXT LOAD
         EJECT
*
*
*        ROUTINE TO HANDLE OUTPUT BUFFER
*
*
*        REGISTER INPUT TO THIS ROUTINE
*
*        R3    ADR OF BLOCK TO BE WRITTEN
*        R6    NUMBER OF BLOCK FOR PRB'S AND LLE'S
*        RD    RETURN ADR
*                                                                A37977
*        POSITIONAL POINTERS ARE MOVED FROM THE REGISTER         A37977
*        SAVE AREA (CKOBHSAV) TO THE POINTER FIELD               A37977
*        FIELD IN THE CONTROL BLOCK IN THE BUFFER                A37977
*
*
*        REGISTERS R2 THRU RD ARE SAVED ON ENTRY AND RESTORED
*              BEFORE RETURNING
*
*
*
*
C13A1    EQU   *
         STM   R2,RD,CKOBHSAV  SAVE GPRS.
         SR    R4,R4          CLEAR REGISTER 4
         LA    RD,CKREGSAV
         IC    R4,CKLNT       PLACE LENGTH INTO REG 4
         L     R6,CKBFLWA     REMAINING BYTES IN BUFFER
         LA    R4,N1(R4)      ALLOW FOR CODE BYTE
         L     RA,CKBFSTAD    NEXT BYTE IN BUFFER TO BE FILLED
         CR    R4,R6        Q. ARE THERE ENOUGH BYTES LEFT FOR SUR
         BL    C13C1          YES MOVE SUR TO BUFFER              M3721
         BAL   R7,C13B2       NO THEN WRITE OUT BUFFER
         ST    R8,CKBFSTAD    INITIALIZE TO START OF BUFFER
         LR    RA,R8
         LA    R6,SURL        LENGTH OF BUFFER
         ST    R6,CKBFLWA     SAVE BUFFER LENGTH
C13C1    EQU   *
         MVC   N0(N1,RA),CKCODE
         SH    R4,CMTWO
         EX    R4,CKMVTOBF    EXECUTE MVC INSTRUCTION
         LA    R7,N1          CODE FOR CDE IN LPA
         CLI   CKCODE,CODEC   Q. PRB WITH CDE IN LPA
         BE    CKPRBC         YES BRANCH TO PROCESS
         CLI   CKCODE,CODEE   Q. LLE WITH CDE IN LPA
         BE    CKLLEC         YES BRANCH TO PROCESS
         SR    R7,R7          NO CDE IN LPA
         CLI   CKCODE,CODEB   Q  PRB WITH CDE IN JPA
         BE    CKPRB          YES BRANCH TO PROCESS
         CLI   CKCODE,CODEA   Q. LLE WITH CDE IN JPA
         BE    CKLLE          YES BRANCH TO PROCESS
         CLI   CKCODE,SCBCODE     Q.  STAE CONTROL BLOCK         A37977
         BE    CKSCB              A.  YES SET UP RB PTR          A37977
         CLI   CKCODE,CODE1E  Q TRANSIENT SVRB
         BNE   C13D1          NO ADDITIONAL PROCESSING
*                             IS NOT NECESSARY
         MVC   N22(N3,RA),CMSYS1   SET RELATIVE ENTRY
*                                  OFFSET IN XSNT AREA
C13D1    AH    R4,CMTWO       ADJUST NEW ADDRESS
         AR    RA,R4          ADJUST NEW START ADDRESS FOR NEXT MOVE
         ST    RA,CKBFSTAD    STORE ADDRESS
         SR    R6,R4          ADJUST NEW REMAINING BYTE AMOUNT
         ST    R6,CKBFLWA     STORE IN WORK AREA
         LM    R2,RD,CKOBHSAV  RESTORE GPRS.
         BR    RD             RETURN TO CALLER
CKMVTOBF MVC   N1(N1,RA),N0(R3)
*
CKPRBC   EQU   *
         L     RE,N12(R3)          GET CDE
         MVC   N33(N12,RA),N8(RE)  ADD NAME AND ENTRY POINT
CKPRB    EQU   *
         STC   R7,N15(RA)          CDE INDICATOR
         MVC   N16(N1,RA),CHSAV6   POSITIONAL POINTER
         B     C13D1               ADJUST POINTERS AND RETURN
CKLLEC   EQU   *
         L     RE,N4(R3)           GET CDE
         MVC   N9(N12,RA),N8(RE)   ADD NAME AND ENTRY POINT
CKLLE    EQU   *
         STC   R7,N7(RA)           CDE INDICATOR
         MVC   N8(N1,RA),CHSAV6    POSITIONAL POINTER
         B     C13D1               ADJUST POINTERS AND RETURN
CKSCB    EQU   *
         MVC   N16(N1,RA),CHSAV6    POSITIONAL POINTER           A37977
         B     C13D1               ADJUST POINTERS AND RETURN    A37977
         EJECT
*
*
*        ROUTINE TO WRITE OUT SUPERVISOR RECORDS
*
*
*        REGISTER INPUT TO THIS ROUTINE
*
*        RA    POINTS TO FIRST UNUSED BYTE IN OUTPUT BUFFER
*        R7    RETURN ADDRESS FOR NORMAL COMPLETION
*
*
*        REGISTER OUTPUT FROM THIS ROUTINE
*
*        R8    POINTS TO START OF FREE BUFFER AREA
*
C13B2    MVI   N0(RA),N0      SET END OF SUR BYTE
         L     R8,CKBFOFST         INIT. START OF BUFFER
         AR    R8,RC
         L     R5,CKDCBAD     DCB ADDRESS
*
         WRITE CKDECB1,SF,(5),(8),MF=E
*
         CHECK CKDECB1
*
         TM    CKFLAG1,CKTAPE   Q. CHKPT DATA SET ON TAPE
         BZ    CMEOVDA            NO THEN CHECK FOR EOV ON DA
         L     RF,CKTSTEOV
         CLC   N0(N4,RF),CKEOVCMR       DID EOV OCCUR
         BE    CMTIOTST            NO - GO CHECK FOR I/O ERRS    A38515
         MVI   CKRETCOD+N1,X'14'   YES - SET EOV ERR CODE - 14   A38515
         LA    RF,CKTPEOV     SET UP FOR TAPE ERROR              A38515
         B     CMEOVER             GO TO EXIT ROUTINE            A38515
CMTIOTST EQU   *
         CLI   CKRET1,CKIOERR      Q.  I/O ERROR
         BCR   NOTEQ,R7                 A.  NO  RETURN
CKEROUT  EQU   *
         MVI   CKXCTL,CHARN        TO GIVE CONTROL TO I/O
*                                       RESUME
         B     C11H6                    XCTL INTERFACE
CMEOVDA  EQU   *
         USING IHADCB,RF
         L     RF,CKDCBAD    GET ADR. OF CHKPT DCB
         L     RF,DCBDEBAD   GET ADR. OF CHKPT DEB
         DROP  RF
         CLC   DEBNMEXT(N1,RF),CKTSTEOV    Q. EOV  ON DA DEVICE
         BE    CMTIOTST                NO -  CONTINUE PROCESSING
         MVI   CKRET1,CKPGMERR     SET RETURN CODE TO 8          A38515
         LA    RF,CKERIO7     INDICATE DISK ERROR                A38515
CMEOVER  EQU   *                                                 A38515
         STH   RF,CKMSGCOD
         B     CKEROUT                  XCTL  FOR IORESUME
*
*
*        CHECKMAIN SYNAD ROUTINE
*
C13B5    EQU   *
         LA    R0,X317
         STH   R0,CKMSGCOD
         MVI   CKRETCOD+N1,CKIOERR      I/O ERROR
         BR    RE                       RETURN TO CALLER
         EJECT
*
*        GENERAL CONSTANTS
*
CKMN32A  DC    CL8'IGC0H06C'            XCTL NAME
CMTWO    DC    H'2'                     FOR CHANGING
PRBCDE   DC    X'200B'        PRB WITH CDE IN JPA
*
*        GENERAL EQUATES
*
USERCODE EQU   X'040F'             TCB USER CODE
STAECODE EQU   X'040D'             TCBSTAE CODE
LLECOD   EQU   X'080A'             LOAD LIST ENTRY
LLECDE   EQU   X'080E'             LLE WITH CDE IN LPA
CKERIO7  EQU   X'031B'             INDICATES EOV ERROR
CKTPEOV  EQU   X'031C'        TAPE EOV ERROR                     A38515
LPACDE   EQU   X'0C00'             TO INCREMENT BLOCK LENGTH
X317     EQU   X'317'              SYNAD CONSTANT
SCBSIZE  EQU   16                  SCB SIZE                      A37977
SCBRB    EQU   13                  RB PTR. IN SCB                A37977
X80      EQU   X'80'               MASK FOR OWNED SPQE
CHARN    EQU   C'N'                FOR XCTL ON UNRECOVERABLE ERROR
CHAR2    EQU   C'2'                FOR EOV XCTL
LASTRB   EQU   X'80'               INDICATES LAST RB ON CHAIN
EQ       EQU   8                   MASK FOR BRANCH ON EQUAL
NOTEQ    EQU   7                   MASK FOR BRANCH ON NOT EQUAL
DEBNMEXT EQU   16                  NUMBER EXTENTS FOR DEB
SURL     EQU   200                 LENGTH OF SUR
SCBCODE  EQU   X'11'               STAE CONTROL BLOCK            A37977
CODEA    EQU   X'0A'               LLE WITH CDE IN JPA
CODEB    EQU   X'0B'               PRB WITH CDE IN JPA
CODEC    EQU   X'0C'               PRB WITH CDE IN LPA
CODEE    EQU   X'0E'               LLE WITH CDE IN LPA
CODE1E   EQU   X'1E'               TRANSIENT SVRB
          EJECT
*
CKTSTEOV EQU CKUNIT
CKEOVCMR EQU CKUNIT+4
CMADEOV  DS    F    SAVE AREA FOR INFORMATION NEEDED
CMNEOV   DS    F    TO TEST IF EOV OCCURRED
CKBFLWA  DS    F              REMAINING BYTES IN THE BUFFER
CKBFSTAD DS    F              NEXT BYTE IN BUFFER TO BE FILLED
CMBUF    DS    F              BUFFER ADDRESS
CKMN40   DS    2F           CHECKMAIN
CK40XCTL DC    F'0'    XCTL  PARM
SWITCH   EQU   CK40XCTL     SWITCH
CKOBHSAV DS    12F      SAVE AREA
CKLNT    DS    CL1            SUR LENGTH
CKCODE   DS    CL1            SUR CODE
CMSYSA   DS    F     SYSTEM
CMSYS1   EQU   CMSYSA+1
CHSAV6   EQU   CKOBHSAV+19         POSITIONAL POINTER FOR
*                                  LLE AND PRB INPUT IN REG 6
CKXCTL   EQU   CKMN40+4            ALLOWS FOR CHANGE OF XCTLEE
CKRET1   EQU   CKRETCOD+1
         EJECT
         IHBABCTL
         EJECT
*
*        FURTHER DEFINITIONS FOR RB DSECT
*
NEXTRB   EQU   RBLINK-1       FULL WORD BOUNDARY FOR LINK FIELD
OLDPSW5  EQU   RBOPSW+4       SECOND WORD OF PSW IN RB
STAB2    EQU   RBSTAB+1            SECOND RB STAB BYTE
TRANS    EQU   X'D0'               MASK FOR TRANSIENT SVC
*
*     OFFSETS FOR PQE
*
FWDPTR   EQU   0
BCKPTR   EQU   4
PQENXT   EQU   8
PQEPREV  EQU   12
PQETCB   EQU   16
PQESTAD  EQU   20
PQERGSZ  EQU   24
         EJECT
        DCBD    DSORG=(PO,PS),DEVD=(DA,TA)
SYNADCB  EQU   DCBSYNAD+1
         EJECT
         SPACE
*
*    EQUATES USED FOR DISPLACEMENTS
*
N0       EQU   0
N1       EQU   1
N2       EQU   2
N3       EQU   3
N4       EQU   4
N5       EQU   5
N6       EQU   6
N7       EQU   7
N8       EQU   8
N9       EQU   9
N12      EQU   12
N15      EQU   15
N16      EQU   16
N22      EQU   22
N30      EQU   30
N31      EQU   31
N32      EQU   32
N33      EQU   33
.LIB2BA1 ANOP
         END
