         TITLE 'IHJQRS24 - AOS/2 REPMAINS - IGC0905B'
*
* STATUS -
*
* FUNCTION-
*    THIS ROUTINE PERFORMS CLEANUP PROCESSING SUCH AS RESETTING
*    KEYS ON PAGES WITHIN THE REGION,FREEING STORAGE FOR CONTROL
*    BLOCKS WHICH ARE NO LONGER NEEDED, AND IF ERROR PROCESSING
*    IS INDICATED, REINITIALIZING THE REGION TO ALLOW FOR PROPER
*    TERMINATION OF THE RESTART REQUEST.
*    THIS MODULE DETECTS THE FOLLOWING ERRORS AND SETS A
*    MESSAGE CODE TO INDICATE THE TYPE OF ERROR AS FOLLOWS:
*        ERROR CODE     ERROR TYPE
*    1).    202         SET LOCK ERROR
*    2).    217         FINDPAGE ERROR
*
* ENTRY POINTS
*          IGC0905B
*
* INPUT-
*    GPR12-CONTAINS ADDRESS OF THE RESTART WORK AREA
*    ERROR CODE IN RSTWA
*
* OUTPUT-
*    GPR1-CONTAINS THE ADDRESS OF RSTWA
*
* EXTERNAL REFERENCES
*         FINDPAGE
*         SPIE C/R ROUTINE                                       Y02076
*
* EXITS, NORMAL-
*    XCTL TO JFCB PROCESSOR (IGC0G05B) TO REBUILD OPEN DATA SET TABLES
*
* EXITS, ERROR-
*    XCTL TO IGC0V05B TO CONCLUDE ERROR PROCESSING.
*
* TABLES/WORK AREAS
*
*    RSTWA
*
*    RPMWA
*
*    TCB-TCBFLGS6                                                Y02076
*    .   TCBMSS
*    .   TCBOTC
*    .   TCBPKF
*
*    RB-RBSIZE
*    .  RBLINK
*
*    SPQE-SPQEFLGS
*    .    SPDQEPTR
*    .    SPQEAD
*    .    SPQEID
*
*    DQE-DQFQEPTR
*    .   DQEPTR
*    .   DQEBLKAD                                                Y02076
*    .   DQELNTH                                                 Y02076
*
*    FQE-FQEPTR
*
*    CVT-CVTPVTP
*    .   CVTCSPIE                                                Y02076
*
*    PVT-PVTPFP2                                                 Y02076
*
*    XPTE-XPTPROT
*
*    CDE-CDCHAIN                                                 Y02076
*    .   CDXLMJP                                                 Y02076
*
*    LLE-LLECHN                                                  Y02076
*
*    SCB-SCBCHAIN
*
*    XTLST-XTLLNTH                                               Y02076
*                                                                Y02076
*    FOE-FOEFLNKF                                                Y02076
*                                                                Y02076
*    SSCR-SSCRID                                                 Y02076
*    .    SSCRFLG1                                               Y02076
*                                                                Y02076
*    PSA-PSALITA                                                 Y02076
*                                                                Y02076
*    SDWA-SDWARCDE                                               Y02076
*    .    SDWARTYA                                               Y02076
*
* ATTRIBUTES
*    ENABLED,KEY 0 SUPERVISOR STATE
*
* CHARACTER CODE DEPENDENCY
*    NONE
*
* NOTES
*    APPLICABILITY-AOS/2
*    SIZE- 4K DESIGN POINT
*    TYPE-LOAD
*    RESIDENCE- SYSTEM LINK PACK AREA
*
* VS2-REL 3 - CHANGES/DELETIONS:
* 011168,014248,014281-014645                                   ZA01488
*
*APAR OZ31482 HAS BEEN FLAGGED AS @ZSUT222                     @ZSUT222
*C008160,008179,009489,009497,011107,011119,011152,011165      @ZSUT222
*C011560,011760,014270,015544,015562,016194,016203             @ZSUT222
*A008189-008209,009507-009527,011110-011116,011166-011168      @ZSUT222
*A015490,015502,015526-015538,015745                           @ZSUT222
*D011088,011092,011235                                         @ZA33625
*C011127,A011130-011139                                        @ZA33625
         EJECT
IGC0905B CSECT
         BALR  RB,N0               ESTABLISH ADDRESSABILITY
         USING *,RB                BASE REG=11
         USING RSTWA,RC            BASE FOR RESTART W.A.
         USING RPMWA1,RA           BASE FOR REPMAIN W.A.
         USING TCB,R5              TCB
         B     RM5BEGIN            BRANCH AROUND EYE CATCHER   @Z30ESHP
         DC    H'0'                PAD 2 BYTES OF ZERO
         DC    CL8'IGC0905B'       MODULE NAME                 @ZSUT222
         DC    CL8'&SYSDATE'       LAST DATE SHIPPED           @ZSUT222
         DC    CL8'@ZA33625'       LAST CODE SHIPPED           @ZSUT222
         DC    CL8'@SU80700'       SELECTABLE UNIT ID          @ZSUT222
RM5BEGIN XC    LOCLOCK,LOCLOCK     CLEAR LOC LOCK SWITCH       @Z30ESHP
RM5START L     RA,RSMWOFST         OFFSET TO REPMAIN W.A.
         AR    RA,RC               TO ESTABLISH BASE FOR WA
         L     R5,RSTCBAD          ADDR OF TCB
         MVI   SWITCH,N0           CLEAR SWITCH
         LH    R1,RSRETCOD         GET ERROR INDICATOR
         LTR   R1,R1               PREVIOUS ERROR
         BZ    R8A1                NO-BRANCH
         MVI   SWITCH,N1           SET FIRST PASS ERROR SWITCH
*
* FREE SUBPOOLS FOR STC,INITIATOR,AND P/P
*
R8B0     L     RF,LOCLOCK          IS LOCAL LOCK HELD          @Z30ESHP
         LTR   RF,RF               IS IT SET                   @Z30ESHP
         BNZ   R8B0B               BR IF YES                   @Z30ESHP
         LA    RF,CKSAVAR          GET REG SAVE ADDR           @ZSUT222
         STM   R0,RF,N0(RF)        SAVE REGS                   @Z30ESHP
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                @Z30ESHP,
               RELATED=(REL,IGC0905B(XCTLA))                   @Z30ESHP
         LTR   RD,RD               LOCK SUCCESSFUL             @Z30ESHP
         LM    R0,RF,N0(RF)        RESTORE REGS                @Z30ESHP
         BZ    R8B0A               BR IF LOCK OK               @Z30ESHP
         MVI   RSRETCOD+N1,ERR202  SET LOCK ERROR              @ZSUT222
         MVC   RSREGSAV(8),MODID   SAVE NAME OF MODULE THAT    @ZSUT222
*                                  HAS DETECTED THE ERROR.     @ZSUT222
         STM   0,15,RSREGSAV+8     SAVE CURRENT REGISTERS.     @ZSUT222
         B     PREXCTL             BR TO ERROR EXIT            @Z30ESHP
R8B0A    ST    RF,LOCLOCK          SET LOCAL LOCK SWITCH       @Z30ESHP
         L     RF,CVTADDR(N0,N0)   GET CVT ADR                 @Z30ESHP
         USING CVTMAP,RF                                       @Z30ESHP
         L     R7,CVTTCBP          GET PTR TO NEXT TCB         @Z30ESHP
         LA    R7,CURASOFS(R7)     ADR CURR ASCB ADR           @Z30ESHP
         L     R7,N0(R7)           CURR ASCB ADR               @Z30ESHP
         ST    R7,USERASCB         SAVE FOR FREEMAIN           @Z30ESHP
R8B0B    L     R5,RSTCBAD          GET ADDR OF P/P TCB         @Z30ESHP
         LA    R6,N2               SET CONTROL COUNT=2
         L     R3,RPMMSS1          GET FIRST SPQE TO BE FREED
R8B1     LTR   R3,R3               ANY SPQE'S TO BE FREED        Y02076
         BZ    R8G1                NO-BRANCH
         USING SPQESECT,R3         SPQE
         TM    SPQEFLGS,SPQEOWN    IS SUBPOOL OWNED
         BO    R8C1                YES- BRANCH
         SR    R4,R4               SET INHIBIT DQE FREE SWITCH
         B     R8C2                FREE SPQE
R8C1     L     R4,SPDQEPTR         GET ADDR OF FIRST DQE
R8C2     MVC   CKSAVAR(N4),SPQEAD  SAVE ADDR OF NEXT SPQE
         LA    R8,SPQESIZE         LENGTH OF SPQE                Y02076
         BAL   R2,FREEMA           FREE SPQE                   @Z30ESHP
R8D1     LTR   R4,R4               ANY DQE'S                     Y02076
         BZ    R8E1                NO-DO NEXT SPQE
         USING DQESECT,R4          DQE
         L     R9,DQFQEPTR         GET THE FIRST FQE
R8D2     MVC   CKSAVAR+N4(N4),DQEPTR SAVE ADDR OF NEXT DQE
         LA    R8,N16              SET FREEMAIN LENGTH=LEN OF DQE/FQE
         LR    R3,R4               ADDR OF AREA TO BE FREED
         BAL   R2,FREEMA           FREE DQE                    @Z30ESHP
         LR    R7,R9               GET FQE ADDRESS
         USING FQESECT,R7          FQE
R8D3     LA    R7,N0(R7)           CLEAR HIGH BYTE OF FQE
         LTR   R7,R7               ANY FQE'S
         BZ    R8D4                NO-BRANCH
         MVC   CKSAVAR+N8(N4),FQEPTR SAVE ADDR OF NEXT FQE
         LR    R3,R7               ADDR OF AREA TO BE FREED
         BAL   R2,FREEMA           FREE FQE                    @Z30ESHP
         L     R7,CKSAVAR+N8       GET ADDR OF NEXT FQE
         B     R8D3                PROCESS NEXT FQE
R8D4     L     R4,CKSAVAR+N4       GET ADDR OF NEXT DQE
         B     R8D1                PROCESS DQE
R8E1     L     R3,CKSAVAR          GET ADDR OF NEXT SPQE
         B     R8B1                LOOP PROCESS SPQE
         DROP  R7                  FQE
*
*        RESTORE STORAGE PROTECT KEYS
*
*
R8A1     L     R3,TCBMSS           GET FIRST P/P SPQE
         LA    RF,CKSAVAR          GET SAVEAREA ADDR           @ZSUT222
         STM   R0,RF,N0(RF)        SAVE REGS                     Y02076
R8A1A    SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                  Y02076,
               RELATED=(LOCAL,IGC0905B(R8B1A))                   Y02076
         LTR   RD,RD               SETLOCK ERROR                 Y02076
         LM    R0,RF,N0(RF)        RESTORE REGS                  Y02076
         BZ    R8A1B               IF NO ERROR, BR               Y02076
         MVI   RSRETCOD+N1,ERR202  STORE SETLOCK ERROR CODE    @ZSUT222
         MVC   RSREGSAV(8),MODID   SAVE NAME OF MODULE THAT    @ZSUT222
*                                  HAS DETECTED THE ERROR.     @ZSUT222
         STM   0,15,RSREGSAV+8     SAVE CURRENT REGISTERS.     @ZSUT222
         B     RM5START            START OVER AGAIN              Y02076
R8A1B    SR    R2,R2               CLEAR REG
R8A2     LTR   R3,R3               ANY SPQE'S                    Y02076
         BZ    R8B                 NO-BRANCH
         SPACE 1
         SR    R6,R6               CLEAR SUBPOOL0 SWITCH
         CLI   SPQEID,N0           SPQE FOR SP0
         BNE   R8A3                NO-CHECK FOR SP252
         LR    R9,R3               SAVE ADDR OF SPQE
         L     R3,SPDQEPTR         GET ADDR OF OWNER SPQE
         BAL   R6,R8A4             SET R6 TO INDICATE SUBPOOL ZERO
*                                  AND GO TO PROCESS DQE
R8A3     CLI   SPQEFLGS,SPSHARE    SPQE SHARED
         BO    R8A7                YES-PROCESS NEXT SPQE
R8A4     L     R4,SPDQEPTR         GET FIRST DQE
R8A5     LTR   R4,R4               ANY DQE'S                     Y02076
         BZ    R8A6C               NO-BRANCH
         L     R7,DQEBLKAD         GET BLOCK ADDR
         L     R8,DQELNTH          GET LENGTH OF DQE
         LA    R8,N0(R7,R8)        GET END ADDR OF BLOCK
         IC    R2,TCBPKF           GET PROTECT KEY
         O     R2,F8               SET FETCH PROTECT ON
         CLI   SPQEID,N252         SUBPOOL 252
         BNE   R8A6                NO-BRANCH
         N     R2,F7               SET FETCH PROTECT OFF         YA2091
R8A6     LR    R1,R7               SAVE ADDR OF PAGE FOR FINDAGE/SSK
         TM    TCBFLGS6,TCBRV      IS THIS A V=R TASK
         BO    R8A6A               YES-BRANCH
         L     RF,CVTPTR           LOCATE THE CVT
         USING CVT,RF              CVT
         L     RF,CVTPVTP          GET ADDR OF THE PVT
         DROP  RF                  CVT
         USING PVT,RF              PVT
         L     RF,PVTPFP           LOAD ADDR OF FINDPAGE         Y02076
         DROP  RF                  PVT
         BALR  RE,RF               BRANCH TO FINDPAGE
         LTR   RF,RF               NORMAL RETURN                 Y02076
         BZ    R8A6D               BR YES                        Y02076
         MVI   RSRETCOD+N1,ERR217  SET ERROR CODE--'217'       @ZSUT222
         MVC   RSREGSAV(8),MODID   SAVE NAME OF MODULE THAT    @ZSUT222
*                                  HAS DETECTED THE ERROR.     @ZSUT222
         STM   0,15,RSREGSAV+8     SAVE CURRENT REGISTERS.     @ZSUT222
         B     R8B                 GO RELEASE LOCAL LOCK       @ZSUT222
R8A6D    EQU   *                                               @ZA33625
         USING XPTE,R1             XPTE                        @ZA33625
         STC   R2,XPTPROT          PUT KEY IN XPTE             @ZA33625
         DROP  R1                  XPTE                        @ZA33625
         LRA   R1,N0(R7)           PAGE IN CORE                @ZA33625
         BNZ   R8A6B               NO-BRANCH
R8A6A    LA    RD,N6               LOAD REG WITH CHANGE & REFERENCE
*                                  BIT MASK
         OR    R2,RD               SET KEY TO TURN ON REFERENCE
*                                  AND CHANGE BITS
         LA    RF,CKSAVAR          GET SAVEAREA ADDR           @ZSUT222
         STM   R0,RF,N0(RF)        SAVE REGS                     Y02076
R8A6A1   SETLOCK OBTAIN,TYPE=SALLOC,MODE=UNCOND,                 Y02076,
               RELATED=(SALLOC,IGC0905B(R8A6A2))                 Y02076
         LTR   RD,RD               SETLOCK ERROR                 Y02076
         LM    R0,RF,N0(RF)        RESTORE REGS                  Y02076
         BZ    R8A6A1B             IF NO ERROR, BR               Y02076
         MVI   RSRETCOD+N1,ERR202  STORE SETLOCK ERROR CODE    @ZSUT222
         MVC   RSREGSAV(8),MODID   SAVE NAME OF MODULE THAT    @ZSUT222
*                                  HAS DETECTED THE ERROR.     @ZSUT222
         STM   0,15,RSREGSAV+8     SAVE CURRENT REGISTERS.     @ZSUT222
         B     R8B1A               GO RELEASE LOCAL LOCK         Y02076
R8A6A1B  LRA   R1,N0(R7)           PAGE IN CORE                 ZA00601
         BNZ   R8A6A2                   BR IF NOT               ZA01488
         SSK   R2,R1               SET KEY ON EACH HALF KEY     ZA00601
         LA    R1,N2048(R1)        GET NEXT HALF PAGE
         SSK   R2,R1               SET KEY
         STM   R0,RF,N0(RF)        SAVE REGS                     Y02076
R8A6A2   SETLOCK RELEASE,TYPE=SALLOC,                            Y02076,
               RELATED=(SALLOC,IGC0905B(R8A6A1))                 Y02076
         LM    R0,RF,N0(RF)        RESTORE REGS                  Y02076
         LA    RD,OFF-N6           SET MASK FOR ANDING
         NR    R2,RD               RESET REG2 TO ORIGINAL KEY
R8A6B    AH    R7,H4096            GET ADDR OF NEXT PAGE
         CR    R7,R8               ANY MORE PAGES LEFT
         BL    R8A6                YES-BRANCH
         L     R4,DQEPTR           GET NEXT DQE
         B     R8A5                LOOP-PROCESS DQE
R8A7     L     R3,SPQEAD           GET NEXT SPQE
         B     R8A2                BRANC
R8A6C    LTR   R6,R6               SP0 SWITCH SET
         BZ    R8A7                NO-BRANCH
         LR    R3,R9               RESTORE P/P SP0 SPQE
         B     R8A7                GET NEXT SPQE-BRANCH
R8B      EQU   *                   ISSUE SETLOCK                 Y02076
         LA    RF,CKSAVAR          GET SAVEAREA ADDR           @ZSUT222
         STM   R0,RF,N0(RF)        SAVE REGS                     Y02076
R8B1A    SETLOCK RELEASE,TYPE=LOCAL,                             Y02076,
               RELATED=(LOCAL,IGC0905B(R8A1A))                   Y02076
         LM    R0,RF,N0(RF)        RESTORE REGS                  Y02076
         CLI   RSRETCOD+N1,N0      ANY ERRORS ENCOUNTERED        Y02076
         BNE   RM5START            IF YES, START OVER AGAIN      Y02076
         B     R8B0                BRANCH
*
*
*
R8G1     BCTR  R6,N0               DECREMENT CONTROL COUNT
         LTR   R6,R6               WERE INITIATORS SPQE'S SAVED
         BH    R8F1                BRANCH-FREE INIT SPQE'S
         BE    R8F2                BRANCH-FREE P/P SPQE'S
         B     R8F2A               BRANCH
R8F2     L     R3,RPMMSS3          GET ADDR OF P/P SPQE
         B     R8B1                BRANCH-FREE SPQE
R8F1     L     R3,RPMMSS2          GET ADDR OF INITIATOR SPQE
         B     R8B1                BRANCH FREE SPQE
R8F2A    L     RF,LOCLOCK          IS LOCAL LOCK HELD          @Z30ESHP
         LTR   RF,RF               IS IT ZERO                  @Z30ESHP
         BZ    RMFCD               BR IF NOT HELD              @Z30ESHP
         LA    RF,CKSAVAR          GET ADR OF REG SAV AREA     @ZSUT222
         STM   R0,RF,N0(RF)        SAVE REGS                   @Z30ESHP
         SETLOCK RELEASE,TYPE=LOCAL,                           @Z30ESHP,
               RELATED=(SET,IGC0905B(R8B0))                    @Z30ESHP
         LM    R0,RF,N0(RF)        RESTORE REGS                @Z30ESHP
         XC    LOCLOCK,LOCLOCK     CLEAR LOCK SWITCH           @Z30ESHP
         DROP  R3,R4               SPQE,DQE
*
*
*
RMFCD    L     R3,RPMCDE           GET ADDR OF CDE
         USING CDENTRY,R3          CDE
RMFCD1   LA    R3,N0(R3)           CLEAR HIGH BYTE
         LTR   R3,R3               ANY CDE'S TO BE FREED
         BZ    RMFRLLE             NO-BRANCH
         LA    R8,CDELEN           GET LENGTH OF CDE             Y02076
         L     R7,CDCHAIN          SAVE ADDR OF NEXT CDE
         TM    CDATTR,CDMIN        IS THIS A MINOR CDE
         BO    RMFCD2              YES-NO EXTENT LIST,BRANCH
         L     R4,CDXLMJP          SAVE ADDR OF EXTENT LIST
         BAL   R2,FREEM            FREE CDE
         LR    R3,R4               GET ADDR OF EXTENT LIST
         L     R8,XTLLNTH-XTLST(R3) GET LENGTH OF EXTENT LIST
RMFCD2   BAL   R2,FREEM            FREE EXTENT LIST
         LR    R3,R7               RESTORE CDE PTR
         B     RMFCD1              LOOP TO FREE NEXT CDE
         DROP  R3                  CDE
*
*        ROUTINE TO FREE LLE'S
*
RMFRLLE  L     R3,RPMLLE           GET ADDR OF FIRST LLE
         USING LLE,R3              LLE
RMREP    LTR   R3,R3               ANY LLE'S TO BE FREED         Y02076
         BZ    RPMFRRB             NO-BRANCH TO FREE RB
         LA    R8,N8               GET LENGTH OF LLE
         L     R7,LLECHN           SAVE ADDR OF NEXT LLE
         BAL   R2,FREEM            FREE LLE
         LR    R3,R7               GET ADDR OF NEXT LLE
         B     RMREP               LOOP-PROCESS LLE
         DROP  R3                  LLE
*
*        ROUTINE TO FREE RB'S
*
RPMFRRB  L     R3,RPMRB            GET FIRST RB TO BE FREED
         USING RBSECT,R3           RB
         LA    R3,N0(R3)           CLEAR HIGH BYTE
         LTR   R3,R3               ANY RB'S TO BE FREED
         BZ    RMFRFOE             NO-BRANCH TO FREE FOE'S       Y02076
RMRBFREE LH    R8,RBSIZE           GET LENGTH OF RB
         SLL   R8,N3               CONVERT TO BYTES
         L     R4,RBLINK           SAVE ADDR OF NEXT RB
         S     R3,KRBPREFX         GET ADDR OF PREFIX
         BAL   R2,FREEM            FREE RB
         LA    R3,N0(R4)           GET NEXT RB
         CR    R3,R5               ANY MORE RB'S
         BNE   RMRBFREE            YES-FREE RB
*                                                                Y02076
*        ROUTINE TO FREE FOE'S                                   Y02076
*                                                                Y02076
RMFRFOE  L     R3,RPMFOE           GET ADDR OF FIRST FOE
         USING FOE,R3              FOE
RMFOEF   LA    R3,N0(R3)           CLEAR HIGH BYTE
         LTR   R3,R3               FOE POINTER=0
         BZ    RMFOEL              YES-BRANCH
         LA    R8,FOELEN           GET LENGTH OF FOE
         L     R7,FOEFLNKF         SAVE ADDR OF NEXT FOE
         BAL   R2,FREEM            FREE THE FOE
         LR    R3,R7               GET ADDR OF NEXT FOE
         B     RMFOEF              PROCESS NEXT FOE
RMFOEL   XC    RPMFOE(N4),RPMFOE   SET FOE HEADER IN RPMW=0
         B     R9A0                BRANCH
         DROP  R3                  FOE
*
*        SUBROUTINE TO FREE CORE FROM SUBPOOL 255
*
*        REGISTER INPUT
*              R2  RETURN ADDRESS
*              R3  ADDRESS OF CORE TO BE FREED
*              R8  LENGTH OF CORE TO BE FREED
*
*
*
*  ENTRY PT FOR FREEMAIN OF 16 BYTE CELLS FOR VSM BLOCKS       @Z30ESHP
*
FREEMA   L     R0,SP255            SUBPOOL ID                  @Z30ESHP
         L     R7,USERASCB         GET USER ASCB ADR           @Z30ESHP
         FREEMAIN P,A=(R3),BRANCH=YES                          @Z30ESHP
         B     FREEMB              BR TO CONTINUE              @Z30ESHP
FREEM    DS    0H                  RTN TO FREE BLOCKS
         LR    R1,R3               GET ADDR OF BLOCK TO BE FREED
         L     R0,SP255            INDICATE SP=255
         OR    R0,R8               GET LENGTH OF BLOCK TO BE FREED
         FREEMAIN R,LV=(0),A=(1)   FREE BLOCK
FREEMB   LA    R3,N0(R3)           CLEAR HIGH BYTE             @Z30ESHP
         C     R3,RSCORE           WAS THIS THE LAST BLOCK RESTORED
         BCR   NOTEQ,R2            NO-RETURN TO CALLER
R9A0     CLI   SWITCH,N1           ERROR SWITCH ON
         BE    PREXCTL                  IF ERRS-BR TO EXIT      ZA01488
         LR    R1,RC               GET ADDRESS OF                Y02076
         A     R1,RSBFOFST         SSCR BUFFER                   Y02076
         USING SSCR,R1             SSCR                          Y02076
         LA    R2,SPIEID           ESTABLISH SPIE CODE           Y02076
         CH    R2,SSCRID           SPIE SSCR                     Y02076
         BNE   XCTLA               BR NO                         Y02076
         NI    SSCRFLG1,OFF-SSCRCKRS SET CK/RS FLG TO RS         Y02076
         DROP  R1                  SSCR                          Y02076
         L     RF,CVTPTR           GET CVT ADDRESS               Y02076
         USING CVTMAP,RF           CVT                           Y02076
         L     RF,CVTCSPIE         GET @ OF SPIE RS RTN          Y02076
         DROP  RF                  CVT                           Y02076
         LA    RD,CKSAVAR          GET REG SAVE AREA @         @ZSUT222
         BALR  RE,RF               CALL SPIE RESTART RTN         Y02076
         MVC   RSPIE(N4),TCBPIE    SAVE PIE ANCHOR               Y02076
         XC    TCBPIE(N4),TCBPIE   PREVENT USER SPIE FROM        Y02076
*                                  GETTING CONTROL               Y02076
         B     XCTLA               GO XCTL                       Y02076
*
PREXCTL  EQU   *                   ERROR EXIT ENTRY              YM7843
         MVC   RPMN40,RPMN40A      SETUP MODULE NAME FOR XCTL  @ZSUT222
         MVI   RPMN40+N4,CHARV     SET XCTL TO IGC0V05B
         B     ERRXCTL                                         @ZSUT222
*
*        XCTL  INTERFACE FOR ALL EXITS
*
XCTLA    EQU   *                                               @ZSUT222
         MVC   RPMN40,RPMN40A      SETUP MODULE NAME FOR XCTL  @ZSUT222
ERRXCTL  EQU   *                                               @ZSUT222
         L     RF,LOCLOCK          GET LOCK SWITCH             @ZSUT222
         LTR   RF,RF               IS LOCL LOCK HELD           @Z30ESHP
         BZ    XCTLAA              BR IF NO                    @Z30ESHP
         LA    RF,CKSAVAR          GET REGSAVE ADR             @ZSUT222
         STM   R0,RF,N0(RF)        SAVE REGS                   @Z30ESHP
         SETLOCK RELEASE,TYPE=LOCAL,                           @Z30ESHP,
               RELATED=(SET,IGC0905B(R8B0))                    @Z30ESHP
         LM    R0,RF,N0(RF)        RESTORE REGS                @Z30ESHP
         XC    LOCLOCK,LOCLOCK     CLEAR LOCK SWITCH           @Z30ESHP
XCTLAA   LA    RF,RPMN40           LOAD ADDR OF XCTL NAME      @Z30ESHP
         ST    RF,RP40XCTL         STORE IN WORK AREA
         LA    RF,RP40XCTL         GET ADDR. OF WORK AREA FIELD
         LR    R1,RC               LOAD ADDR OF RESTART W.A.
         XCTL  SF=(E,(15))         XCTL TO NEXT LOAD
         EJECT
*
*        DEFINED  CONSTANTS
*
RPMN40A  DC    CL8'IGC0G05B'       NAME OF NEXT REPMAIN LOAD
MODID    DC    CL8'IGC0905B'       MODULE ID                   @ZSUT222
         DS    0F                  ALIGNMENT
SP250    DC    X'FA001000'         GETMAIN CONSTANT FOR 4K FROM SP250
SP255    DC    X'FF000000'         GET CORE FROM LSQA
KRBPREFX DC    AL4(RBPRFLNA)       LENGTH OF RB PREFIX
F7       DC    F'7'                MASK FOR PROTECT OFF          YA2091
F8       DC    F'8'                MASK FOR FETCH PROTECT ON
RETCOD12 DC    H'12'               RTM NO-RTCA-ENTRY CODE        Y02076
H4096    DC    H'4096'             PAGE UPDATE
PATCH    EQU   *                   END OF MODULE
RM5LEN   EQU   PATCH-IGC0905B      LENGTH OF MODULE
RM5PALEN EQU   RM5LEN/10           LENGTH OF PATCH AREA
RM5PATCH DS    XL(RM5PALEN)        10 PERCENT ALLOWANCE FOR PATCH AREA
         SPACE 2
*
*        GENERAL EQUATES
*
N0       EQU   0                   0
N1       EQU   1                   1
N2       EQU   2                   2
N3       EQU   3                   3
N4       EQU   4                   4
N6       EQU   6                   6
N8       EQU   8                   8
N16      EQU   16                  LENGTH OF DQE/FQE
N24      EQU   24                  LENGTH OF CDE
N252     EQU   252                 SUBPOOL 252
N2048    EQU   2048                LENGTH OF HALF PAGE
SPIEID   EQU   X'102'              SPIE SSCR ID                  Y02076
NOTEQ    EQU   7                   CONDITION CODE
OFF      EQU   X'FF'               ONE BYTE OF ALL FOXES
CHARV    EQU   C'V'                CHARACTER FOR ERROR XCTL
SPQESIZE EQU   16                  LENGTH OF SPQE                Y02076
CDELEN   EQU   32                  CDE LENGTH                    Y02076
ERR217   EQU   217                 FIND PAGE ERROR CODE        @ZSUT222
ERR202   EQU   202                 SETLOCK ERROR CODE          @ZSUT222
CVTADDR  EQU   X'10'               CVT ADDR                    @Z30ESHP
CURASOFS EQU   X'0C'               OFFSET FOR CURR ASCB        @Z30ESHP
*
*        REGISTER EQUATES
*
R0       EQU   0                   REG 0
R1       EQU   1                   REG 1
R2       EQU   2                   REG 2
R3       EQU   3                   REG 3
R4       EQU   4                   REG 4
R5       EQU   5                   REG 5
R6       EQU   6                   REG 6
R7       EQU   7                   REG 7
R8       EQU   8                   REG 8
R9       EQU   9                   REG 9
RA       EQU   10                  REG 10
RB       EQU   11                  REG 11
RC       EQU   12                  REG 12
RD       EQU   13                  REG 13
RE       EQU   14                  REG 14
RF       EQU   15                  REG 15
         EJECT
*
*        DSECT FOR REPMAIN WORK AREA
*
RPMWA1   DSECT
         SPACE 1
RPMERAS1 DS    F                   TEMP SAVE AREA                Y02076
RMNEOV   DS    F                   TO TEST IF EOV OCCURRED
RSBFSTAD DS    F                   ADDRESS OF DATA
RSBFLWA  DS    F                   NUMBER OF BYTES REMAINING IN BUFFER
RPMMSS1  DS    F                   ADDR OF NEW L-SHAPED PROG MSS CHAIN
RPMMSS2  DS    F                   ADDRESS OF NEW INIT MSS CHAIN
RPMMSS3  DS    F                   ADDRESS OF NEW P/P MSS CHAIN
RPMRB    DS    F                   ADDRESS OF RESTORED RB CHAIN
RPMLLE   DS    F                   ADDRESS OF RESTORE LLE CHAIN
RPMCDE   DS    F                   ADDRESS OF RESTORE CDE CHAIN
RPMDEB   DS    F                   ADDRESS OF RESTORED DEB CHAIN
RPMFOE   DS    F                   ADDRESS OF RESTORED FOE CHAIN
RSCORE   DS    F                   ADDR OF CORE ACQUIRED BY LAST GETMN.
RSW001   DS    F                   POINTER TO NEXT BYTE AVAILABLE CORE
RSW002   DS    F                   POINTER TO REPMAIN SYNAD ROUTINE
RPLNT    DS    F                   LENGTH OF BLOCK
RMADEOV  DS    F                   SAVE AREA FOR INFORMATION NEEDED
         DS    0D                  ALIGNMENT
CKSAVAR  DS    16F                 GENERAL SAVE AREA
RPMN40   DS    D                   MODULE NAME FOR XCTL
RP40XCTL DC    F'0'                POINTER TO XCTL PARAMETER LIST
RSSWIT1  DS    X'00'               BIG BLOCK INDICATOR
SWITCH   EQU   RSW001              ERROR SWITCH
         TITLE 'IHJQRS24 - RESTART WORK AREA'
* RESTART WORK AREA
         IEEVRSWA
LOCLOCK  EQU   RSERAS00            LOCK SWITCH                 @Z30ESHP
USERASCB EQU   RSERAS01            USER ASCB ADDR              @Z30ESHP
         IHAGDA                                                @Z30ESHP
         IHALDA                                                @Z30ESHP
         IHAWSAVT                                              @Z30ESHP
         TITLE 'IHJQRS24 - CONTROL VECTOR TABLE'
* CONTROL VECTOR TABLE
         CVT   DSECT=YES,PREFIX=NO
         TITLE 'IHJQRS24 - PAGE VECTOR TABLE'
* PAGE VECTOR TABLE
         IHAPVT
         TITLE 'IHJQRS24 - TASK CONTROL BLOCK'
* TASK CONTROL BLOCK
         IKJTCB
         TITLE 'IHJQRS24 - SUBSYSTEM CHECKPOINT RECORD'          Y02076
* SUBSYSTEM CHECKPOINT RECORD                                    Y02076
         IHJSSCR                                               , Y02076
         TITLE 'IHJQRS24 - REQUEST BLOCK'
* REQUEST BLOCK - S.V.R.B.,I.R.B.,P.R.B.
         IKJRB
         TITLE 'IHJQRS24 - SUBPOOL QUEUE ELEMENT'
* SUBPOOL QUEUE ELEMENT
         IHASPQE
         TITLE 'IHJQRS24 - PREFERENTIAL STORAGE AREA'            Y02076
* PREFERENTIAL STORAGE AREA                                      Y02076
         IHAPSA
         TITLE 'IHJQRS24 - DESCRIPTOR QUEUE ELEMENT'
* DESCRIPTOR QUEUE ELEMENT
         IHADQE
         TITLE 'IHJQRS24 - FREE QUEUE ELEMENT'
* FREE QUEUE ELEMENT
         IHAFQE
         TITLE 'IHJQRS24 - CONTENTS DIRECTORY ENTRY'
* CONTENTS DIRECTORY ENTRY
         IHACDE
         TITLE 'IHJQRS24 - EXTENT LIST'
* EXTENT LIST
         IHAXTLST
         TITLE 'IHJQRS24 - LOAD LIST ELEMENT'
* LOAD LIST ELEMENT
         IHALLE
         TITLE 'IHJQRS24 - FIX OWNERSHIP ELEMENT'
* FIX OWNERSHIP ELEMENT
         IHAFOE
         TITLE 'IHJQRS24 - EXTERNAL PAGE TABLE'
* EXTERNAL PAGE TABLE
         IHAXPTE
         END
