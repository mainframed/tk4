RS20     TITLE 'IHJQRS20 AOS/2 REPMAIN 1 ROUTINE - IGC0505B'
*
*   VS2/REL3 CHANGES/DELETIONS
*31775,33318-33338,35199-35260,37451-37463,37534-37538         @ZM33369
*A030698-030751,030852-030997,031035-031055                     ZA02207
* APAR OZ31478 HAS BEEN FLAGGED AS @ZSUT222                    @ZSUT222
*C037379,037408,037419,037526,037538,039248,039312,039363,     @ZSUT222
*C039808                                                       @ZSUT222
*A036964-036979,037626                                         @ZSUT222
*
* NAME - REPMAIN 1 - IHJQRS20 -IGC0505B
*
* STATUS
*
*         CHANGE LEVEL=0
*
* FUNCTION
*
*         THIS MODULE OF THE RESTART FACILITY RECREATES THE USER REGION
*         AS IT EXISTED AT CHECKPOINT TIME, AND REESTABLISHES THE
*         VIRTUAL STORAGE MANAGEMENT CONTROL BLOCKS TO REFLECT THE
*         STATUS OF THE REGION.
*
* ENTRY POINTS
*
*         REPMAIN 1 IS ENTERED FROM RESTART HOUSEKEEPING (IGC0205B)
*         TO RECREATE THE USER REGION.
*
* INPUT
*
*         GPR 1 - CONTAINS THE ADDRESS OF THE RESTART WORK AREA
*
* OUTPUT                                                         Y02076
*                                                                Y02076
*         GPR 1 - CONTAINS THE ADDRESS OF THE RESTART WORK AREA  Y02076
*                                                                Y02076
* EXTERNAL REFERENCES                                            Y02076
*                                                                Y02076
*         NONE                                                   Y02076
*                                                                Y02076
* EXITS, NORMAL
*
*               - TO REPMAIN 2 (IGC0605B) TO RESTORE CONTENTS
*                 SUPERVISION AND TASK MANAGEMENT CONTROL BLOCKS.
*                 UPON EXIT THE PARAMETERS ARE AS FOLLOWS-
*                 GPR 12 - CONTAINS ADDRESS OF RSTWA.
*                 DECB USED FOR READING THE RESTART DATA SET IS
*                 INITIALIZED TO READ THE SUR'S.
*                 THE ADDRESS OF THE NEXT SUR IN THE BUFFER, AND
*                 THE NUMBER OF BYTES LEFT IN THE BUFFER ARE PASSED
*                 IN THE RSTWA.
*
* EXITS, ERROR
*
*              -  TO REPMAIN 5 (IGC0905B) TO FREE ANY CONTROL BLOCKS
*                 USED BY RESTART AND TO RE-INITIALIZE THE REGION
*                 FOR TERMINATION. REPMAIN 5 IS GIVEN CONTROL IN THE
*                 EVENT OF AN I/O ERROR.
*                 UPON EXIT THE PARAMETERS ARE AS FOLLOWS-
*              (1)ERROR CODE OF 035 TO INDICATE AN I/O ERROR.  @ZSUT222
*              (2)ERROR CODE OF 041 TO INDICATE WRONG LENGTH   @ZSUT222
*                 RECORD DETECTED READING THE CHECKPOINT D/S.  @ZSUT222
*              (3)ERROR CODE OF 202 TO INDICATE A SETLOCK      @ZSUT222
*                 ERROR.                                       @ZSUT222
*
* TABLES/WORK AREAS
*
*         RSTWA
*
*         RPMWA1
*
*         DCB   DCBSYNAD                                         Y02076
*
*         TCB   TCBPKF                                           Y02076
*               TCBPQE
*
*         PQE   PQEREGN
*               PQEFPQE
*
*         SPQE  SPQEPTR
*               SPDQEPTR
*               SPQEFLGS
*               SPQEID
*               SPQEAD                                           Y02076
*               SPQEKEY                                          Y02076
*
*         DQE   DQFQEPTR
*               DQEPTR
*
*         FQE   FQEPTR
*
* ATTRIBUTES
*
*         KEY 0, SUPERVISOR STATE, ENABLED
*
*         APPLICABILITY
*
*               AOS/2
*
*         MODULE CHARACTERISTICS
*
*              TYPE - LOAD MODULE
*
*              RESIDENCE - SYSTEM LINK PACK AREA
*
*         DEPENDENCIES
*
*              SIZE AND FORMATS OF CONTROL BLOCKS FORMATTED
*
*              REGION MUST BE COMPLETLY ALLOCATED TO SUBPOOL 0.
*
*         INTERFACES
*
*              READ/CHECK MACROS
*
*              FREEMAIN/GETMAIN
*
* NOTES
*
*         OPERATION
*
*         THIS ROUTINE RE-INSTATES THE USER REGION CHECKPOINTED BY
*         CHECKMAIN 1. IT ALSO RECREATES THE VIRTUAL STORAGE MANAGEMENT
*         CONTROL BLOCKS CHECKPOINTED BY CHECKMAIN 2. UPON ENTRY, THE
*         THE FOLLOWING INITIALIZATION PROCESSING TAKES PLACE.
*
*              GPR 12 IS SET AS BASE FOR THE RESTART WORK AREA (RSTWA),
*              AND THE ADDRESS OF THE REPMAIN WORK AREA (RPMWA1) IS
*              OBTAINED.
*
*              THE REPMAIN SYNAD ROUTINE ADDRESS IS PLACED IN THE
*              RESTART DCB.
*
*              THE DEFAULT XCTL EXIT ROUTINE NAME IS SET TO REPMAIN 2
*              (IGC0605B).
*
*              THE ADDRESS OF THE RESTART PQE IS OBTAINED FROM THE
*              P/P TCB ADDRESSED BY THE RSTWA.
*
*              THE REGION BOUNDS (START/END) ARE OBTAINED FROM THE
*              RSTWA AND THE CURRENT POSITION POINTER WITHIN THE
*              REGION IS SET EQUAL TO THE BEGINNING OF THE REGION.
*
*              A 2K BLOCK OF THE RESTART WORK AREA IS USED       Y02076
*              FOR THE ASR BUFFER.                               Y02076
*
*         PROCESSING THEN CONTINUES AS DESCRIBED UNDER THE HEADING
*         'RESTORING THE USER REGION STORAGE'.
*
*         RESTORING THE USER REGION STORAGE
*
*         1.   THE ASR RECORD IS READ INTO THE ASR BUFFER
*
*         2.   THE FIRST/NEXT ASRE IS OBTAINED FROM THE ASR, AND A
*              TEST IS PERFORMED TO DETERMINE IF THE CURRENT REGION
*              POINTER IS EQUAL TO THE ASRE START POINTER. IF SO,
*              PROCESSING CONTINUES WITH STEP 3. IF NOT, THEN THE
*              AREA FROM THE CURRENT REGION POINTER TO THE ASRE START
*              POINTER IS FREE REGION STORAGE, AND A FREEMAIN FOR
*              SP250 IS ISSUED. THIS FREEMAIN CREATES AN FBQE FOR
*              THE FREE STORAGE, AS WELL AS PERFORMING ALL NECESSARY
*              INTERFACES WITH THE PAGING SUPERVISOR. PROCESSING THEN
*              CONTINUES WITH STEP 3.
*
*         3.   THE CURRENT REGION POINTER IS UPDATED TO POINT TO THE
*              END OF THE STORAGE BLOCK DESCRIBED BY THE ASRE. THE
*              STORAGE DESCRIBED BY THE ASRE IS THEN READ DIRECTLY
*              TO ITS VIRTUAL STORAGE LOCATION BY SUCCESSIVE READS
*              FROM THE RESTART DATA SET. AFTER THE LAST READ HAS
*              BEEN PERFORMED, A TEST IS MADE TO DETERMINE IF THE
*              ASR HAS ANY MORE ASRE'S. IF SO, PROCESSING CONTINUES
*              WITH STEP 2. IF NOT, A TEST IS MADE TO DETERMINE IF
*              THIS IS THE LAST ASR. IF NOT, PROCESSING CONTINUES
*              WITH STEP 1, OTHERWISE, IF THE CURRENT REGION POINTER
*              IS NOT EQUAL TO THE REGION ENDING ADDRESS, A FREEMAIN
*              IS ISSUED FOR THE REMAINDER OF THE REGION.        Y02076
*              PROCESSING THEN CONTINUES AS DESCRIBED UNDER THE  Y02076
*              HEADING 'RESTORING THE VSM CONTROL BLOCK QUEUES'. Y02076
*
*         RESTORING THE VSM CONTROL BLOCK QUEUES
*
*         THIS ROUTINE WILL RESTORE THE VSM CONTROL BLOCKS (SPQE, DQE,
*         FQE) FOR SYSTEM TASK CONTROL (STC), INITIATOR, AND PROBLEM
*         PROGRAM TASKS. IT INITIALIZES THE I/O CONTROL BLOCKS FOR
*         READING SUR RECORDS, AND CAUSES THE FIRST SUR TO BE READ IN.
*         PROCESSING THEN CONTINUES WITH STEP 1.
*
*         1.   THE STC TCB ADDRESS IS OBTAINED, AND A COUNTER IS SET
*              TO 2 TO INDICATE THAT THE INIT AND P/P HAVE NOT BEEN
*              PROCESSED. PROCESSING THEN CONTINUES WITH STEP 2.
*
*         2.   THE BLOCK LENGTH USED BY THE BUFFER HANDLER AND
*              GETMAIN ROUTINES IS SET TO THE LENGTH OF AN SPQE,
*              AND A CALL IS MADE TO THE RSGET ROUTINE WHICH WILL
*              GET STORAGE FOR THE SPQE, AND MOVE THE SPQE TO THE
*              CORE OBTAINED. UPON RETURN, THE STORAGE PROTECT   Y02076
*              KEY OF THE SPQE IS TESTED AND IF GREATER THAN 8,  Y02076
*              IT IS UPDATED TO THE KEY OF THE PP TCB (TCBPKF).  Y02076
*              THEN, A SWITCH IS SET TO                          Y02076
*              INDICATE THAT THIS IS THE LAST SPQE IF THE LAST SPQE
*              FLAG IS SET IN THE SPQE. THEN, THE SPID IS CHECKED
*              FOR SUBPOOL 0. IF NOT, PROCESSING CONTINUES WITH STEP
*              3. IF SO, SPECIAL PROCESSING IS ENTERED TO HANDLE THE
*              SHARED SP 0. IF THE TASK CURRENTLY BEING RESTORED IS
*              THE STC, THE ADDRESS OF THE SPQE IS SAVED, AND
*              PROCESSING CONTINUES WITH STEP 3. IF NOT, THE ADDRESS
*              OF THE STC SP0 SPQE IS PLACED IN THE SPQEDQE FIELD
*              TO CONNECT THE SPQE TO THE OWNER OF THE SUBPOOL, AND
*              PROCESSING CONTINUES WITH STEP 3.
*
*         3.   THE SPQE IS PLACED ON THE CHAIN OF RESTORED SPQE'S
*              FOR THE TASK IN THE RPMWA. THE ADDRESS OF THE NEXT
*              DATA BLOCK IS OBTAINED. THE BLOCK LENGTH IS SET TO
*              THE SIZE OF AN FQE/DQE (16 BYTES) AND A TEST IS
*              PERFORMED TO DETERMINE IF THIS IS A DQE. IF NOT,
*              PROCESSING CONTINUES AS DESCRIBED BY STEP 6.
*
*         4.   IF THIS IS A DQE, A CALL IS MADE TO RSGET TO GET AND
*              MOVE THE BLOCK TO A DQE IN LSQA. UPON RETURN, THE
*              DQE IS CHAINED TO THE SPQE AND PROCESSING CONTINUES
*              WITH STEP 5.
*
*         5.   THE ADDRESS OF THE NEXT DATA BLOCK IS OBTAINED, AND
*              A TEST IS MADE TO DETERMINE IF IT IS AN FQE. IF NOT,
*              PROCESSING CONTINUES WITH STEP 4. OTHERWISE, THE
*              RSGET ROUTINE IS CALLED, AND THE FQE IS PLACED ON
*              THE DQE. PROCESSING THEN CONTINUES WITH STEP 5.
*
*         6.   IF THE LAST SPQE SWITCH IS NOT ON, PROCESSING
*              CONTINUES WITH STEP 2. IF ON, THE SWITCH IS TURNED
*              OFF, AND THE COUNTER, SET TO 2 AT INITIALIZATION
*              TIME, IS DECREMENTED BY 1. DEPENDING ON THE COUNTER
*              VALUES, THE FOLLOWING PROCESSING TAKES PLACE.
*
*                   COUNTER = 1    THE INITIATOR SPQE CHAIN MUST
*                                  BE PROCESSED AND PROCESSING
*                                  CONTINUES WITH STEP 2.
*
*                   COUNTER = 0    THE P/P SPQE CHAIN MUST BE
*                                  PROCESSED AND PROCESSING
*                                  CONTINUES WITH STEP 2.
*
*                   COUNTER = NEG. ALL SPQE CHAINS HAVE BEEN
*                                  PROCESSED, GPR 1 IS SET TO
*                                  POINT TO THE RSTWA AND EXIT IS
*                                  MADE VIA XCTL TO REPMAIN 2.
         EJECT
IGC0505B CSECT
         BALR  RB,R0               EST. ADDRESSABILITY
         USING *,RB                ADDRESS CODE
         B     BEGIN               GO AROUND ID
         DC    H'0'                ALIGN TO DOUBLE WORD BDY
         DC    CL8'IGC0505B'       MODULE NAME                 @ZSUT222
         DC    CL8'&SYSDATE'       LAST DATE SHIPPED           @ZSUT222
         DC    CL8'@ZSUT222'       LAST CODE SHIPPED           @ZSUT222
BEGIN    LR    RC,R1               GET ADDR OF RESTART WORK AREA
         USING RSTWA,RC            ADDRESS WORKAREA
         LR    RA,RC               COMPUTE ADDR OF
         A     RA,RSMWOFST         REPMAIN WORK AREA
         USING RPMWA1,RA           ADDRESS REPMAIN WORKAREA
         LA    RD,RSREGSAV         GET SAVE AREA ADDR FOR ACCESS METH.
         XC    LOCLOCK,LOCLOCK     CLEAR LOCAL LOCK SWITCH     @Z30ESHP
*                                                                YM6541
*        FREEMAIN TO RELEASE ANY RESIDUAL SUBPOOL 252            YM6541
*        ALLOCATIONS - NAMELY THE CHECKPOINT D/S IOB             YM6541
*                                                                YM6541
         FREEMAIN R,SP=252                                       YM6541
*                                                                YM7523
*        GET 2K CORE USED BY OPEN IN 005B                        YM7523
*                                                                YM7523
         LA    R0,TWOKBLK               2K                       YM7523
         ICM   R0,M8,RMSP250            SP250                    YM7523
         GETMAIN R,LV=(R0)                                       YM7523
         LA    R2,RSBDCB           GET ADDRESS OF RESTART DCB
         USING IHADCB,R2           ADDRESS DCB
         LA    RF,SYNAD            GET ADDRESS OF RM1 SYNAD ROUTINE
         STCM  RF,M7,DCBSYNAD+N1   PUT SYNAD ADDRESS IN DCB.
         XC    RPMWA1(RPMWAEND-RPMWA1),RPMWA1   CLEAR THE WORK AREA
         LA    RF,N2048            SET UP RECORD LENGTH FOR CIR'S
         STH   RF,RSLNGTH1         PUT IT IN DECB 1
         MVC   RPMXLIST(N8),RM2NAME SET DEFAULT XCTL NAME        Y02076
         SPACE 3
*        START OF ASRE PROCESSING
         SPACE 3
RM2E100  L     R4,RSTCBAD          GET ADDRESS OF P/P TCB
         USING TCB,R4              ADDRESS TCB
         L     R4,TCBPQE           GET ADDR OF DPQE
         DROP  R4                  TCB
         USING PQESECT,R4          ADDRESS PQE
         L     R4,PQEFPQE          GET ADDR OF PQE
         L     RF,PQEREGN          GET START ADDR OF REGION
         ST    RF,RPMCESA          SET CURRENT START = REGION START
         A     RF,RSPPE            CALCULATE END OF REGION       Y02076
         ST    RF,RPMRGEND         SAVE IT FOR LATER COMPARES
         DROP  R4                  FREE R4 FOR OTHER USE
         LR    R6,RC               GET ADDRESS OF                Y02076
         A     R6,RSBFOFST         SUR/SSCR BUFFER               Y02076
         USING ASRHDR,R6           ADDRESS ASR
RM2E110  LR    R9,R6               SET UP TO READ INTO ASR BUFFER
         BAL   R8,READRTN          READ AN ASR RECORD
         SR    R4,R4               SET ASRE COUNTER = 0
         SR    R5,R5               SET ASRE INDEX = 0
RM2E120  CH    R4,ASRCOUNT         HAVE ALL ASRE'S BEEN PROCESSED
         BNL   RM2E150             YES, GO SEE IF ANY MORE ASR'S.
         LA    R4,N1(R4)           UP COUNT BY 1.
         LA    R5,N8(R5)           UP INDEX BY 8 TO POINT TO NEXT ASRE
         L     R9,ASRHDR(R5)       GET ELEMENT START FROM ASRE
         C     R9,RPMCESA          IS ELEM. START = CURRENT START
         BE    RM2E130             YES, GO SET CURR START EQ ELEM. END
         L     R1,RPMCESA          GET START OF AREA TO FREEMAIN
         LR    R0,R9               CALCULATE LENGTH TO FREE
         S     R0,RPMCESA          IE. ENTRY START - CURRENT START
         ICM   R0,M8,RMSP250       SET UP SUBPOOL NUMBER
         FREEMAIN R,LV=(0),A=(1)   CREATE APPROPRIATE FBQE.
RM2E130  L     RF,ASRHDR+N4(R5)    SET THE CURRENT START ADDRESS
         ST    RF,RPMCESA          = THE ELEMENT END ADDRESS
         SPACE
*        NOTE THAT THE READ BUFFER ADDRESS (R9) IS = ELEMENT START
         SPACE
RM2E140  BAL   R8,READRTN          READ CIR INTO REGION
         LA    R9,N2048(R9)        BUMP READ ADDRESS BY CIR REC. SIZE
         C     R9,RPMCESA          HAS READ ADDRESS REACHED ELEM. END
         BL    RM2E140             NO, CONTINUE TO READ.
         B     RM2E120             YES, GO PROCESS NEXT ASRE, IF ANY.
         SPACE 3
*        ALL ENTRIES OF AN ASR RECORD HAVE BEEN PROCESSED.
*        DETERMINE IF ANY MORE ASR RECORDS REMAIN.  IF NOT,
*        THE REGION HAS BEEN RESTORED.
         SPACE 3
RM2E150  TM    ASRFLG1,ASRLAST     IS THIS LAST ASR RECORD
         BZ    RM2E110             NO, GO READ NEXT ASR
         STM   RE,RC,RSREGSAV+12   SAVE REGISTERS               ZA02207
         L     R4,RSTCBAD          GET TCB ADDR                 ZA02207
         USING TCB,R4                                           ZA02207
         L     R4,TCBMSS           GET SUBPOOL PTR              ZA02207
         DROP  R4                                               ZA02207
         USING SPQESECT,R4         MAP SPQE                     ZA02207
         L     R3,RPMRGEND         GET REGION END               ZA02207
         S     R3,RPMCESA          GET SIZE TO FREE             ZA02207
RM2E152  EQU   *                                                ZA02207
         CLC   RPMCESA(N4),RPMRGEND IS CURR. START = REG. END
         BNL   RM2E161             YES, END OF REGION WAS ALLOCATED
RM2E153  EQU   *                                                ZA02207
         TM    SPQEFLGS,SPSHARE    SHARED SPQE?                 ZA02207
         BNO   RM2E154             NO, BRANCH                   ZA02207
         L     R4,SPDQEPTR         PTR TO OWNED SPQE            ZA02207
RM2E154  EQU   *                                                ZA02207
         CLI   SPQEID,SP0          IS SUBPOOL ZERO?             ZA02207
         BE    RM2E156             YES, BRANCH                  ZA02207
         L     R4,SPQEAD           GET NEXT SPQE                ZA02207
         B     RM2E153             GO CHECK FOR SP00            ZA02207
RM2E156  EQU   *                                                ZA02207
         L     R5,SPDQEPTR         GET DQE PTR                  ZA02207
         USING DQESECT,R5          MAP DQE                      ZA02207
RM2E157  EQU   *                                                ZA02207
         CLC   DQEBLKAD+1(3),RPMCESA+1  STARTING ADDR TO FREE?  ZA02207
         BE    RM2E158             YES, BRANCH                  ZA02207
         L     R5,DQEPTR           GET NEXT DQE PTR             ZA02207
         B     RM2E157             YES, BRANCH                  ZA02207
RM2E158  EQU   *                                                ZA02207
         L     R7,DQELNTH          GET LENGTH OF DQE            ZA02207
         LR    R0,R7               LENGTH TO FREE               ZA02207
         CR    R7,R3               FREE WHAT IS NEEDED          ZA02207
         BNH   RM2E159             YES, BRANCH                  ZA02207
         LR    R0,R3               LENGTH TO FREE               ZA02207
         LR    R7,R3               LENGTH TO ADD RPMCESA        ZA02207
RM2E159  EQU   *                                                ZA02207
         L     R1,DQEBLKAD         ADRESS TO FREE               ZA02207
         ICM   R0,M8,RMSP250       SET UP SUBPOOL NUMBER
         FREEMAIN R,LV=(0),A=(1)   FREE THE END OF THE REGION
         SR    R3,R7              DECREMENT LENGTH TO FREE      ZA02207
         BZ    RM2E161             ZERO TO FREE                 ZA02207
         A     R7,RPMCESA          ADD TO ADDR TO FREE NEXT     ZA02207
         ST    R7,RPMCESA          SAVE ADDR TO FREE NEXT       ZA02207
         B     RM2E152             NEXT DQE TO FREE             ZA02207
RM2E161  LM    RE,RC,RSREGSAV+12   RESTORE REGS                 ZA02207
         DROP  R4,R5                                            ZA02207
         SPACE 3
*        THIS IS THE END OF CIR PROCESSING. THE REGION HAS BEEN
*        RESTORED.
         DROP  R6                  BASE FOR ASR HEADER
         EJECT
*        THE FOLLOWING PROCESSING RESTORES THE VSM CONTROL BLOCKS
         SPACE 3
         L     R6,RSBFOFST         GET OFFSET TO SUR BUFFER      Y02076
         AR    R6,RC               CALCULATE ADDRESS OF SUR BUFFER
         ST    R6,RSAREA1          SET ADDR OF SUR BUFFER INTO DECB1
         LA    RF,SURL             SET READ LENGTH = TO
         STH   RF,RSLNGTH1         SUR BUFFER LEN
         ST    R6,RSBFSTAD         INIT  BUFFER PTR TO START OF BUFFER
         SR    R3,R3               SET BLOCK LENGTH TO 0 FOR RPM500
         ST    R3,RSBFLWA          SET NO. OF BYTES LEFT IN BUF=0.
*                                  TO FORCE A READ ON FIRST CALL.
         BAL   RE,RPM500           READ IN FIRST SUR
         SPACE 3
*        START OF VSM CONTROL BLOCK PROCESSING
         SPACE 3
RPM600A  L     RF,CVTADDR(N0,N0)   GET CVT ADDR                @Z30ESHP
         USING CVTMAP,RF                                       @Z30ESHP
         L     R7,CVTTCBP          GET PTR TO NEXT TCB         @Z30ESHP
         LA    R7,CURASOFS(R7)     GET ADR OF CURR ASCB ADR    @Z30ESHP
         L     R7,N0(R7)           GET ADR OF CURR ASCB        @Z30ESHP
         ST    R7,USERASCB         SAVE FOR USE IN FREEMAIN    @Z30ESHP
         BAL   R7,LOCKGET          OBTAIN LOCAL LOCK           @ZM33369
         LA    R6,N2               SET COUNTER TO 2 TO SIGNIFY STC
*                                  SPQE/DQE/FQE'S BEING RESTORED
         NI    SWITCH,ON-LSPQE     RESET LAST SPQE SWITCH
         LA    R8,RPMMSS1          INIT. SPQE ANCHOR ADDRESS TO STC
*                                  CHAIN.
RPM600   MVI   RMBLKSIZ+N3,SPQESIZE SET UP TO GM AN SPQE
         BAL   RD,RSGETA           GET CORE FOR AN SPQE        @Z30ESHP
         USING SPQESECT,R1         ADDRESS SPQE
         CLI   SPQEKEY,KEY8        LOOK AT SPQE KEY              Y02076
         BL    RPM605              BR IF LESS THAN 8             Y02076
*                                  KEY IS NOT SUBJECT TO CHANGE  Y02076
         L     RF,RSTCBAD          GET TCB ADDRESS               Y02076
         USING TCB,RF              TCB                           Y02076
         MVC   SPQEKEY,TCBPKF      UPDATE PROTECT KEY            Y02076
         DROP  RF                  TCB                           Y02076
RPM605   TM    SPQEFLGS,LASTSPQE   IS IT LAST SPQE FOR TASK      Y02076
         BZ    RPM610              NO, CONTINUE
         OI    SWITCH,LSPQE        YES, SET FLAG TO GO TO NEXT TASK
RPM610   CLI   SPQEID,SP0          IS SPQE FOR SP 0.
         BNE   RPM620              NO, CONTINUE
CKSP0LS  LA    RF,N1               CHECK TO SEE IF PROCESSING IS YM5714
         CR    R6,RF                 FOR THE INIT TCB            YM5714
         BNL   SAVLSPQ             YES, GO SAVE THE ADDRESS      YM5714
RPM6H4   MVC   SPDQEPTR,RSSTCSP0   POINT THIS SPQE TO INIT SPQE  YM5714
         DROP  R1                  SPQE
         USING SPQESECT,R8         ADDRESS SPQE
RPM620   ST    R1,SPQEAD           CHAIN TO ANCHOR OR PREV SPQE  Y02076
         LR    R8,R1               UPDATE SPQE CHAIN REG
         LR    R4,R1               INIT. DQE CHAIN ANCHOR
         LA    R3,SPQESIZE         SPECIFY LENGTH OF PREVIOUS BLOCK
         BAL   RE,RPM500           GET NEXT INPUT BLOCK
         MVI   RMBLKSIZ+N3,DQFQSIZE SET UP FOR SIZE OF DQE OR FQE
RPM6J3   CLI   N0(R3),DQECODE      IS IT A DQE
         BE    PROCDQE             YES, GO PROCESS DQE'S
RPM6A5   TM    SWITCH,LSPQE        WAS THIS LAST SPQE FOR THE TASK
         BZ    RPM600              NO, PROCESS THIS NEXT SPQE
RPM6E42  NI    SWITCH,ON-LSPQE     YES, TURN OFF THE SWITCH
         BCTR  R6,R0               DECREMENT COUNTER BY 1.
         LTR   R6,R6               SEE WHICH TASK IS NEXT
         BP    RPM6E70             INITIATOR NEXT
         BM    RPM504A             ALL DONE GO XCTL TO NEXT LOAD
         LA    R8,RPMMSS3          P/P NEXT, UPDATE CHAIN ANCHOR ADDR.
         B     RPM600              GO PROCESS P/P VSM BLOCKS
         SPACE
RPM6E70  LA    R8,RPMMSS2          UPDATE CHAIN ANCHOR ADDR
         B     RPM600              GO PROCESS INITIATOR VSM BLOCKS
         SPACE
RPM504A  LR    R1,RC               SET RSTWA ADDR TO GPR1
         L     RF,LOCLOCK          CHECK IF LOCK HELD          @Z30ESHP
         LTR   RF,RF               IS IT HELD                  @Z30ESHP
         BZ    RPM504B             BR IF NO                    @Z30ESHP
         BAL   R7,LOCKREL          RELEASE LOCAL LOCK          @ZM33369
         XC    LOCLOCK,LOCLOCK     CLEAR LOCAL LOCK SWITCH     @ZM33369
RPM504B  LA    RF,RPMXLIST         GET ADDR OF MODULE NAME     @Z30ESHP
         ST    RF,RPMN40AD         SAVE THE ADDRESS
         LA    RF,RPMN40AD         GET THE ADDRESS OF THE ADDRESS
         XCTL  SF=(E,(15))         PASS CONTROL TO NEXT MODULE
         SPACE 3
SAVLSPQ  ST    R1,RSSTCSP0         SAVE ADDR OF SUBPOOL 0 SPQE   YM5714
         B     RPM620              GO QUEUE THE SPQE.
         DROP  R8                  SPQE
         SPACE 3
*                    DQE/FQE PROCESSING
         SPACE 3
         USING DQESECT,R4          R4 POINTS TO DQE OR SPQE. CHAIN FLD
*                                  WILL BE AT +4 REGARDLESS.
PROCDQE  BAL   RD,RSGETA           GET CORE AND MOVE DQE       @Z30ESHP
         STCM  R1,M7,DQEPTR+N1     PUT DQE ON CHAIN OFF SPQE
         LR    R4,R1               UPDATE DQE CHAIN PTR
         LR    R9,R1               INIT. FQE CHAIN ANCHOR REG.
         USING FQESECT,R9          R9 POINTS TO DQE OR FQE. CHAIN FLD.
*                                  WILL BE AT +0 REGARDLESS.
RPMGE4   LA    R3,DQFQSIZE         SPECIFY LENGTH OF PREV. BLOCK
         BAL   RE,RPM500           GET NEXT INPUT BLOCK
         CLI   N0(R3),FQECODE      IS IT AN FQE
         BNE   RPM6J3              NO, GO BACK AND SEE IF IT'S A DQE
         BAL   RD,RSGETA           YES, GET CORE AND MOVE FQE  @Z30ESHP
         STCM  R1,M7,FQEPTR+N1     CHAIN FQE ON FQE CHAIN OFF DQE
         LR    R9,R1               UPDATE THE FQE CHAIN PTR
         B     RPMGE4              GO GET NEXT BLOCK.
         DROP  R9,R4               FQE AND DQE
         EJECT
*        SUR BUFFER HANDLING ROUTINE.
*
*              ASSUMES R3 CONTAINS LENGTH OF PREVIOUS BLOCK.
*              RETURNS WITH ADDRESS OF CODE BYTE OF NEXT BLOCK IN R3
*              RETURNS ON RE.
*
*              SAVES AND RESTORES GPR'S 4 THRU E.
*              RESTORES GPR1 FROM RSCORE TO PRESERVE ADDR OF LAST BLOCK
*              GETMAINED.
         SPACE
RPM500   DS    0H                  SUR BUFFER DEBLOCKING ROUTINE
         STM   R4,RE,RMSAVAR       SAVE REGS IN REPMAIN SAVE AREA
         LA    RD,RSREGSAV         GET ADDRESS OF S/A FOR READ/CHECK
         L     R4,RSBFLWA          GET NO. OF BYTES LEFT IN SUR BUF
         LA    R3,N1(R3)           ADD 1 TO BLOCK LEN. FOR CTL CHAR.
         SR    R4,R3               COMPUTE NO. OF BYTES LEFT IN BUF.
         BNP   RPM505              BR. IF NO BYTES LEFT IN BUFFER
         A     R3,RSBFSTAD         COMPUTE NEXT BLOCK ADDRESS
         CLI   N0(R3),N0           IS THIS AN IDENTIFIER BYTE
         BE    RPM505              NO, GO READ THE NEXT RECORD
RPM506   ST    R3,RSBFSTAD         SAVE ADDRESS OF NEW DATA
         ST    R4,RSBFLWA          SAVE NO. OF BYTES LEFT IN BUFFER
         L     R1,RSCORE           RESTORE PTR TO LAST CORE OBTAINED
         LM    R4,RE,RMSAVAR       RESTORE REGS.
         BR    RE                  RETURN TO CALLER
         SPACE 3
RPM505   L     R9,RSAREA1          GET ADDRESS OF SUR BUFFER FROM DECB
         L     R8,LOCLOCK          GET LOCAL LOCK SWITCH       @ZM33369
         LTR   R8,R8               IS LOC LOCK HELD            @ZM33369
         BZ    RPM505A             BRANCH IF NO                @ZM33369
         BAL   R7,LOCKREL          GO RELEASE LOC LOCK         @ZM33369
RPM505A  BAL   R8,READRTN          GO READ A RECORD            @ZM33369
         L     R8,LOCLOCK          DO WE NEED LOCK             @ZM33369
         LTR   R8,R8               FOR GETMAIN(P)              @ZM33369
         BZ    RPM505B             BRANCH IF NO                @ZM33369
         BAL   R7,LOCKGET          GO GET LOCK                 @ZM33369
RPM505B  LR    R3,R9               SET BLOCK ADDR = START OF BUFFER
         LA    R4,SURL             INITIALIZE BUFFER LENGTH
         B     RPM506              CLEAN UP AND RETURN
         EJECT
*        RSGET SUBROUTINE
*              INPUT= SIZE OF BLOCK AND ADDRESS OF DATA TO BE MOVED
*              OUTPUT= @ OF CORE OBTAINED AND DATA MOVED
*
*        RMSAVAR - CONTAINS LENGTH OF BLOCK TO BE GM'D AND MOVED.
*        R3 -  ADDRESS OF BLOCK TO BE MOVED - 1.
*        RD -  RETURN REG
         SPACE
RSGET    L     R0,RMBLKSIZ         GET LENGTH TO BE GM'D
         ICM   R0,M8,RMSP255       SPECIFY SUBPOOL 255
         GETMAIN R,LV=(0)          GET THE CORE FROM 255
RSGETB   ST    R1,RSCORE           SAVE ADDRESS OF GM'D CORE   @Z30ESHP
         L     RF,RMBLKSIZ         GET THE LENGTH OF THE BLOCK
         BCTR  RF,R0               ADJUST FOR EXECUTE OF MOVE
         EX    RF,RM1MOVE          MOVE THE BLOCK
         BR    RD                  RETURN TO CALLER
RM1MOVE  MVC   N0(N1,R1),N1(R3)    BLOCK MOVER
*
*   ENTRY PT FOR GETMAIN OF 16 BYTE CELLS FOR VSM BLOCKS       @Z30ESHP
*
RSGETA   IC    R0,RMSP255          SUBPOOL 255 IN BYTE 0       @Z30ESHP
         L     R7,USERASCB         GET USER'S ASCB ADR         @Z30ESHP
         GETMAIN P,SP=(R0),BRANCH=YES   GET 16 BYTE CELL       @Z30ESHP
         B     RSGETB              GO TO SAVE ADR              @Z30ESHP
         EJECT
         SPACE 3
*        READRTN - REPMAIN 1 I/O ROUTINE
*
*              RETURNS ON GPR 8.
*              ASSUMES ADDRESS OF AREA TO BE READ INTO IS IN GPR 9.
         SPACE 3
READRTN  DS    0H                                                Y02076
         READ  RSDECB1,SF,,(R9),,MF=E READ CIR/SUR               Y02076
         SPACE 3
*        CKREAD1 SUBROUTINE - USED TO CHECK DECB1 AND TEST FOR ERROR.
         SPACE 3
CKREAD1  CHECK RSDECB1             CHECK IT
         CLI   RSRETCOD+N1,ZERO    WAS THERE AN ERROR           YA00153
         BNE   READER              YES, GO XCTL TO IGC0905B     YA00153
         BR    R8                  RETURN
         SPACE 3
*        AN I/O ERROR HAS BEEN ENCOUNTERED
         SPACE 3
READER   MVI   RPMXLIST+N4,CHAR9   MAKE XCTL GO TO REPMAIN 5.
         MVC   RSREGSAV(8),MODID   SAVE NAME OF MODULE THAT    @ZSUT222
*                                  HAS DETECTED THE ERROR      @ZSUT222
         STM   0,15,RSREGSAV+8     SAVE CURRENT REGISTERS      @ZSUT222
         B     RPM504A             GO XCTL.
         SPACE 3
*        REPMAIN 1 SYNAD ROUTINE
         SPACE 3
SYNAD    MVI   RSRETCOD+N1,ERR035       SET I/O ERROR CODE     @ZSUT222
         L     R1,RSIOBPT1              GET ADDR OF IOB         YA00153
         TM    N13(R1),WLR              IS THIS WRONG LEN ERR   YA00153
         BCR   ZEROES,RE                NO - RETURN             YA00153
         MVI   RSRETCOD+N1,ERR041       SET WRONG LEN IND      @ZSUT222
         RETURN
*
*    ROUTINE FOR GETTING LOCAL LOCK FOR GETMAIN/FREEMAIN (P)   @ZM33369
*
LOCKGET  LA    RF,RSREGSAV         GET ADDR REG SAV AREA       @ZM33369
         STM   RB,RE,N0(RF)        SAV REGS 11-14              @Z30ESHP
         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                @Z30ESHP,
               RELATED=(LOCREL,(IGC0505B,LOCKREL))             @Z30ESHP
         LTR   RD,RD               SETLOCK SUCCESSFUL          @Z30ESHP
         LM    RB,RE,N0(RF)        RESTORE REGS                @Z30ESHP
         BZ    RPM600C             BR IF YES                   @Z30ESHP
         MVI   RSRETCOD+N1,ERR202  SET ERROR CODE 202          @ZSUT222
         B     READER              BR TO ERROR EXIT            @Z30ESHP
RPM600C  ST    RF,LOCLOCK          SET LOC LOCK SWITCH         @Z30ESHP
         BR    R7                  RETURN TO CALLER            @ZM33369
*
*  ROUTINE TO RELEASE LOCAL LOCK BEFORE ENTERING READ ROUTINE  @ZM33369
*
LOCKREL  LA    RF,RMSAVAR+44       GET REG SAV AREA ADDR       @ZSUT222
         STM   RB,RE,N0(RF)        SAVE REGS 11-14             @Z30ESHP
         SETLOCK RELEASE,TYPE=LOCAL,                           @Z30ESHP,
               RELATED=(LOCSET,(IGC0505B,LOCKGET))             @ZM33369
         LM    RB,RE,N0(RF)        RESTORE REGS                @Z30ESHP
         BR    R7                  RETURN TO CALLER            @ZM33369
         EJECT
*        CONSTANTS
         SPACE 3
RM2NAME  DC    C'IGC0605B'         NAME OF REPMAIN2
MODID    DC    CL8'IGC0505B'       MODULE ID                   @ZSUT222
RMSP250  DC    AL1(250)            SP NO. TO FREE PIECES OF REGION
RMSP255  DC    AL1(255)            SUBPOOL 255
         SPACE 3
*        PATCH AREA FOR MAINTENANCE OF 10%
         SPACE 3
PATCH    EQU   *                   END OF MODULE
RM1LEN   EQU   PATCH-IGC0505B      LENGTH OF MODULE
PATCHLEN EQU   RM1LEN/10           LENGTH OF PATCH AREA REQUIRED
RM1PATCH DS    CL(PATCHLEN)        PATCH AREA FOR MAINTENANCE
         SPACE 3
*        REGISTER EQUATES
         SPACE 3
R0       EQU   0                   REGISTER 0
R1       EQU   1                   REGISTER 1
R2       EQU   2                   REGISTER 2
R3       EQU   3                   REGISTER 3
R4       EQU   4                   REGISTER 4
R5       EQU   5                   REGISTER 5
R6       EQU   6                   REGISTER 6
R7       EQU   7                   REGISTER 7
R8       EQU   8                   REGISTER 8
R9       EQU   9                   REGISTER 9
RA       EQU   10                  REGISTER 10
RB       EQU   11                  REGISTER 11
RC       EQU   12                  REGISTER 12
RD       EQU   13                  REGISTER 13
RE       EQU   14                  REGISTER 14
RF       EQU   15                  REGISTER 15
         SPACE 3
*        GENERAL EQUATES
         SPACE 3
N0       EQU   0                   0
N1       EQU   1                   1
N2       EQU   2                   2
N3       EQU   3                   3
N4       EQU   4                   4
N6       EQU   6                   CONSTANT OF 6                 Y02076
N8       EQU   8                   8
N13      EQU   13                       CONSTANT 13             YA00153
N16      EQU   16                  16 - SIZE OF DQE/FQE
N2048    EQU   2048                2048 - SIZE OF CIR AND ASR RECORDS
M7       EQU   7                   MASK FOR STORING 3 LO BYTES OF REG
M8       EQU   8                   MASK FOR ICM TO BYTE 0 OF REG.
TWOKBLK  EQU   2048                2K CORE                       YM7523
SPQESIZE EQU   16                  SIZE OF AN SPQE               Y02076
DQFQSIZE EQU   16                  SIZE OF DQE OR FQE
FQECODE  EQU   X'02'               SUR CODE FOR FQE
SPQECODE EQU   X'06'               SUR CODE FOR SPQE
DQECODE  EQU   7                   SUR CODE FOR DQE
ON       EQU   255                 ALL ONES.
SURL     EQU   400                 LENGTH OF THE SUR BUFFER      YM7049
CHAR9    EQU   C'9'                EBCDIC 9
ERR035   EQU   35                  I/O ERROR CODE              @ZSUT222
SP0      EQU   0                   SUBPOOL 0.
KEY8     EQU   8                   CONSTANT FOR KEY 8            Y02076
ZERO     EQU   0                        0 FOR TESTING RET CODE  YA00153
ZEROES   EQU   8                        COND FOR BCR            YA00153
WLR      EQU   X'40'                    WRONG LNGTH RECORD      YA00153
*                                       INDICATION IN IOB       YA00153
ERR041   EQU   41                       ERROR CODE FOR WRONG   @ZSUT222
*                                       LENGTH RECORD WHILE     YA00153
*                                       READING CHKPT DATA SET  YA00153
CVTADDR  EQU   X'10'               CVT ADDR                    @Z30ESHP
CURASOFS EQU   X'0C'               OFFSET FOR CURRENT ASCB     @Z30ESHP
ERR202 EQU     202                 SETLOCK ERROR CODE          @ZSUT222
         EJECT
*              DESCRIPTION OF REPMAIN WORK AREA
         SPACE 3
RPMWA1   DSECT                     REPMAIN WORK AREA DSECT
RPMERAS1 DS    F                   TEMP SAVE AREA                Y02076
RMNEOV   DS    A                   RESERVED
RSBFSTAD DS    A                   BUFFER POINTERS
RSBFLWA  DS    A                   *
RPMMSS1  DS    A                   ADDRESS OF NEW STC MSS CHAIN
RPMMSS2  DS    A                   ADDRESS OF NEW INIT MSS CHAIN
RPMMSS3  DS    A                   ADDRESS OF NEW P/P MSS CHAIN
RPMRB    DS    A                   ADDRESS OF RESTORED RB CHAIN
RPMLLE   DS    A                   ADDRESS OF RESTORED LLE CHAIN
RPMCDE   DS    A                   ADDRESS OF RESTORED CDE CHAIN
RPMDEB   DS    A                   ADDRESS OF RESTORED DEB CHAIN
RPMFOE   DS    A                   ADDRESS OF RESTORED FOE CHAIN
RSCORE   DS    A                   ADDRESS OF CORE ACQUIRED BY LAST GM
RSW001   DS    F                   *
RSW002   DS    F                   *
RPMSQE   DS    A                   ADDRESS OF DEQUEUED SPQE CHAIN
SWITCH   DS    F                   I/O SWITCH WORD
LSPQE    EQU   4                   LAST SPQE FOR THIS TASK FLAG
RPMN40AD DS    A                   SET TO ADDRESS OF RPMXLIST
RPMXLIST DS    2F                  NAME OF NEXT MODULE TO GET CONTROL
RPMCESA  DS    F                   CURRENT ENTRY START ADDRESS
RPMRGEND DS    F                   ADDRESS OF END OF REGION
RMSAVAR  DS    15F                 REG SAVE FOR RPM500 RTN     @ZSUT222
RMBLKSIZ DS    F                   SIZE OF BLOCK TO BE GETMAINED.
RSSTCSP0 DS    F                   ADDR OF STC SPQE FOR SP 0.
RPMWAEND EQU   *                   END OF REPMAIN WORK AREA
         EJECT
*              DSECT USED FOR ASR HEADER
         SPACE 3
ASRHDR   DSECT
ASRCOUNT DS    H                   NUMBER OF ENTRIES IN ASR RECORD
ASRFLG1  DS    X                   ASR FLAG BYTE
ASRLAST  EQU   X'80'               LAST ASR RECORD
ASRRESV  DS    5X                  RESERVED
         EJECT
         IEEVRSWA
USERASCB EQU   RSERAS00            USER ASCB ADDR              @Z30ESHP
LOCLOCK  EQU   RSERAS01            LOCAL LOCK HELD SWITCH      @Z30ESHP
         EJECT
         IHAPSA                                                @Z30ESHP
         CVT                                                   @Z30ESHP
         IHAGDA                                                @Z30ESHP
         IHALDA                                                @Z30ESHP
         IHAWSAVT                                              @Z30ESHP
         IKJTCB
         EJECT
         IHAPQE
         SPACE 5
         IHASPQE
         SPACE 5
         IHADQE
         SPACE 5
         IHAFQE
         EJECT
         IHADCB DSORG=(BS,PO),DEVD=(DA,TA)
         END
