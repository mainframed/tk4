         TITLE 'IHJQCP30  MVT CHECKMAIN  IGC0F06C'
         COPY  LCGASMSW
         AIF   ('&LIB' EQ 'LIB1').LIB1BA1  TEST FOR LIB1(OS)
CP30     TITLE 'IHJQCP30 AOS/2 CHECKMAIN 1 ROUTINE - IGC0F06C'
*
* NAME - CHECKMAIN 1 - IHJQCP30 - IGC0F06C
*
* STATUS
*
*    CHANGE LEVEL=0
*
* FUNCTION
*
*         CHECKMAIN 1 CREATES A RECORD (ASR) OF THE EXTENTS OF THE
*         ALLOCATED REGION STORAGE PAGES ON THE CHECKPOINT DATA SET
*         AND COPIES THE ALLOCATED (VALID) PAGES DESCRIBED BY THE ASR
*         AS CORE IMAGE RECORDS (CIR) ONTO THE CHECKPOINT DATA SET.
*         THIS ASR/CIR SEQUENCE IS REPEATED UNTIL ALL VALID REGION
*         STORAGE PAGES HAVE BEEN CHECKPOINTED.
*
* ENTRY POINTS
*
*         CHECKMAIN 1 IS ENTERED VIA XCTL FROM THE PREVIOUS CHECKPOINT
*         LOAD MODULE AT ENTRY POINT IGC0F06C.
*
* INPUT
*
*         GPR1- ADDRESS OF CHECKPOINT WORK AREA
*
* OUTPUT
*
*         GPR1- ADDRESS OF CHECKPOINT WORK AREA
*
*         CHECKPOINT DATA SET- ASR'S AND CIR'S DESCRIBING ALL USER
*         ALLOCATED SPACE WITHIN HIS REGION
*
* EXTERNAL REFERENCES
*
*         NONE
*
* EXITS, NORMAL
*
*               - TO CHECKMAIN 2 AT ENTRY IGC0G06C VIA XCTL TO
*                 CHECKPOINT THE SUPERVISOR CONTROL BLOCKS AS SUR'S.
*                 UPON EXIT THE PARAMETERS ARE AS FOLLOWS-
*                 GPR 12 - ADDRESS OF CHKWA
*                 GPR13 - ADDRESS OF STANDARD SAVE AREA
*
* EXITS, ERROR
*
*               1) TO RESUME I/O ROUTINE (IGC0N06C) VIA XCTL TO
*                  PROVIDE ITS NORMAL FUNCTIONS AND TO PASS AN ERROR
*                  CODE TO THE CHECKPOINT EXIT ROUTINE INDICATING THAT
*                  AN I/O ERROR HAS OCCURRED.
*                  UPON EXIT THE PARAMETERS ARE AS FOLLOWS-
*                  GPR 1 - ADDRESS OF CHKWA
*                  CHKWA - AN ERROR CODE OF X'0C' IS PASSED IN THE
*                          LAST BYTE OF THE CKRETCOD FIELD.
*
*              2)  TO RESUME I/O ROUTINE (IGC0N06C) VIA XCTL TO
*                  PROVIDE ITS NORMAL FUNCTIONS AND TO PASS AN ERROR
*                  CODE TO THE CHECKPOINT EXIT ROUTINE THAT AN
*                  UNRECOVERABLE EOV CONDITION (TWO RETRIES HAVE
*                  OCCURRED ON TAPE, OR THE DATA SET IS ON A DIRECT
*                  ACCESS DEVICE)HAS OCCURRED.
*                  UPON EXIT THE PARAMETERS ARE THE SAME AS FOR CASE 1
*                  EXCEPT THAT THE LAST BYTE OF THE CKRETCOD FIELD
*                  CONTAINS AN X'08'.
*
*              3)  TO CHECKPOINT HOUSEKEEPING ROUTINE (IGC0206C) TO
*                  ATTEMPT REPROCESSING ON A NEW TAPE WHEN AN EOV
*                  HAS OCCURRED FOR THE FIRST TIME ON TAPE.
*
* TABLES/WORK AREAS
*
*         DCB  DCBSYNAD
*              DCBNCP
*              DCBDEBAD
*
*         DEB  DEBNMEXT
*
*         DECB RECORD LENGTH FIELD
*
*         TCB  TCBPQE
*
*         DPQE PQEFPQE
*
*         PQE  PQEREGN
*              PQEFBQE
*              PQESIZE
*
*         FBQE FWDPTR
*              SIZE
*              FBQAREA
*
* ATTRIBUTES
*
*         KEY 0, SUPERVISOR STATE, ENABLED, TYPE 4 SVC.
*
*         APPLICABILITY
*
*              AOS/2
*
*         MODULE CHARACTERISTICS
*
*              TYPE - LOAD MODULE
*
*              RESIDENCE - SYSTEM LINK PACK AREA
*
*         DEPENDENCIES
*
*         - THE CHECKPOINT DATA SET MUST BE POSITIONED TO ACCEPT THE
*           FIRST ASR RECORD.
*         - THE CHKWA MUST BE OBTAINED FROM LSQA (SP253) AND PROPERLY
*           INITIALIZED BY THE CHECKPOINT HOUSEKEEPING ROUTINE.
*         - THE CHECKPOINT PRESERVE ROUTINE MUST GIVE CONTROL TO
*           CHECKMAIN 1 WITH KEY 0, SUPERVISOR STATE, AND INTERRUPS
*           ENABLED.
*
* NOTES
*
*         OPERATION
*
*
*         INITIALIZATION PROCESSING
*
*         THE MODULE RECEIVES CONTROL FROM THE SCHEDULAR PORTION OF
*         CHECKPOINT VIA XCTL. UPON RECEIVING CONTROL THE MODULE
*         ESTABLISHES ADDRESSABILITY FOR THE CODE AND FOR CHECKPOINT
*         WORK AREA (CHKWA) PASSED IN GPR 1. GPR 12 IS USED AS THE BASE
*         FOR THE WORK AREA. INITIALIZATION IS PERFORMED FOR THE I/O
*         OPERATIONS USED TO WRITE OUT THE REGION. THIS CONSISTS OF
*         SETTING GPR 13 TO THE ADDRESS OF AN 18 WORD REGISTER SAVE
*         AREA (CKREGSAV) CONTAINED IN THE CHKWA. THIS SAVE AREA IS
*         USED BY THE BSAM/BPAM WRITE AND CHECK ROUTINES. THE ADDRESS
*         OF THE CHECKMAIN 1 SYNAD ROUTINE (CM2E320) IS PLACED IN THE
*         DCBSYNAD FIELD OF THE DCB. THE TWO DECB'S CONTAINED IN THE
*         CHKWA ARE INITIALIZED TO A BUFFER LENGTH OF 2048 (2K) BYTES.
*         THEN IF THE NUMBER OF CHANNEL PROGRAMS AS SPECIFIED IN THE
*         DCBNCP FIELD OF THE CHECKPOINT DCB IS 1, A SWITCH IS SET IN
*         THE CHKWA TO INDICATE THAT SINGLE BUFFERING IS TO BE USED.
*         INITIALIZATION IS THEN PERFORMED FOR THE MAPPING OF THE USER
*         REGION.
*
*         THE ADDRESS OF THE USER TCB IS OBTAINED FROM THE CHKTCBAD
*         FIELD OF THE CHKWA. THE STARTING ADDRESS OF THE REGION IS
*         OBTAINED VIA THE PQE AND IS SET AS THE FIRST ELEMENT START
*         ADDRESS. THE 2K ASR BUFFER IS ESTABLISHED IN THE 4K SUR/SSCR
*         BUFFER AND THE ASR HEADER IS INTIALIZED TO 0.
*
*         MAPPING THE EXTENTS OF ALLOCATED USER STORAGE
*
*         1)   THE ADDRESS OF THE FIRST/NEXT FBQE IS OBTAINED FROM
*              THE PREVIOUS FBQE/PQE FORWARD POINTER FIELD. A TEST
*              TO DETERMINE IF AN FBQE EXISTS IS PERFORMED, AND IF
*              NOT, PROCESSING CONTINUES WITH STEP 3. IF THERE IS
*              AN FBQE, THE FREE AREA STARTING ADDRESS IS COMPARED
*              TO THE CURRENT ELEMENT STARTING ADDRESS. IF THEY ARE
*              EQUAL,PROCESSING CONTINUES WITH STEP 2. IF THEY ARE
*              NOT EQUAL, THE CURRENT ELEMENT ENDING ADDRESS IS SET
*              EQUAL TO THE FREE AREA STARTING ADDRESS, AND A CALL
*              IS MADE TO THE 'SETASRE' ROUTINE. UPON RETURN FROM
*              SETASRE PROCESSING CONTINUES WITH STEP 2.
*
*         2)   A TEST IS PERFORMED TO DETERMINE IF THE REST OF THE
*              REGION IS FREE. THE ADDRESS OF THE END OF THE REGION
*              IS COMPARED TO THE ADDRESS OF THE END OF THE FREE AREA
*              DESCRIBED BY THE FBQE. IF THEY ARE EQUAL, PROCESSING
*              CONTINUES WITH STEP 4. IF THE REST OF THE REGION IS
*              NOT FREE, THE CURRENT ELEMENT START ADDRESS IS SET
*              EQUAL TO THE END OF THE FREE AREA DESCRIBED BY THE
*              FBQE, AND PROCESSING CONTINUES WITH STEP 1.
*
*         3)   WHEN THERE ARE NO MORE FBQE'S, IT IS ASSUMED THAT THE
*              REST OF THE REGION IS ALLOCATED. THEREFORE, THE CURRENT
*              ELEMENT ENDING ADDRESS IS SET EQUAL TO THE REGION
*              ENDING ADDRESS, AND A CALL IS MADE TO THE SETASRE
*              ROUTINE. UPON RETURN FROM SETASRE, PROCESSING CONTINUES
*              WITH STEP 4.
*
*         4)   WHEN THERE ARE NO FBQE'S THE LAST ASR FLAG IS SET IN
*              THE ASR HEADER, AND PROCESSING CONTINUES AS DESCRIBED
*              UNDER 'WRITING THE ASR AND CIR'S.
*
*         FORMATTING THE ASR - SETASRE
*
*         1)   UPON ENTRY, A TEST IS PERFORMED TO DETERMINE IF THE
*              ASR BUFFER IS FULL (IE. IF THE ASRE COUNT IN THE ASR
*              HEADER IS EQUAL TO 255). IF SO, PROCESSING CONTINUES
*              WITH STEP 1 UNDER THE HEADING 'WRITING THE ASR AND
*              CIR'S. IF THE ASR BUFFER IS NOT FULL, PROCESSING
*              CONTINUES WITH STEP 2.
*
*         2)   THE EXTENTS OF THE ALLOCATED AREA ARE PLACED INTO THE
*              NEXT ASRE SLOT IN THE ASR BUFFER. THIS SLOT IS DEFINED
*              AS  (ASR BUFFER STARTING ADDRESS+(8*(ASRE COUNT+1))).
*              THE ASRE COUNT IS UPDATED BY 1, AND RETURN IS MADE TO
*              THE CALLER.
*
*         WRITING THE ASR AND CIR'S.
*
*         1)   UPON ENTRY, A CALL IS MADE TO THE WRITERTN SUBROUTINE
*              TO OUTPUT THE COMPLETED ASR. UPON RETURN, THE ASRE
*              COUNT IS CHECKED FOR A 0 VALUE. IF 0, IT IS ASSUMED
*              THAT THIS IS THE LAST ASR, AND PROCESSING CONTINUES
*              WITH STEP 2. IF THE ASRE COUNT IS NOT 0, THE COUNT IS
*              USED AS A LOOP COUNT. EACH ASRE IS RETRIEVED FROM THE
*              ASR RECORD (ASRE LENGTH = 8 BYTES). THE STORAGE
*              DESCRIBED BY THE ELEMENT IS WRITTEN IN 2K BLOCKS BY
*              SUCCESSIVE CALLS TO THE WRITERTN SUBROUTINE. AFTER THE
*              THE LAST ASRE HAS BEEN PROCESSED, THE LAST ASR FLAG
*              IS TESTED. IF ON, PROCESSING CONTINUES WITH STEP 2.
*              IF NOT ON, THE ASR HEADER IS RE-INITIALIZED TO 0, AND
*              PROCESSING CONTINUES WITH STEP 2 UNDER THE HEADING
*              'FORMATTING THE ASRE'.
*
*         2)   IF THE LAST WRITE HAS NOT BEEN CHECKED, A CALL IS MADE
*              TO THE CHECK SUBROUTINE AND THE CHECK FOR EOV SUBRTN.
*              UPON RETURN, OR IF THE LAST WRITE HAD BEEN CHECKED, AN
*              XCTL IS PERFORMED TO THE NEXT LOAD OF CHECKMAIN.
*
*
*         REGISTER USAGE WITHIN MODULE
*
*         0    PARAMETER REGISTER, WORK REGISTER
*         1    PARAMETER REGISTER, WORK REGISTER
*         2    BASE FOR DCB, RETURN REGISTER FOR WRITERTN
*         3    BASE FOR PQE AND FBQE
*         4    BASE FOR TCB, AND ASR BUFFER POINTER
*         5    RETURN REG FOR CKEOVOL, CKWRITE1
*         6    RETURN REG FOR SETASRE
*         7    ASRE INDEX REG
*         8    ELEMENT COUNT REG
*         9    (UNUSED)
*         A    BUFFER ADDRESS TO WRITE FROM (PARAM FOR SETASRE)
*         B    BASE FOR CODE
*         C    BASE FOR CHKWA
*         D    ADDRESS OF SAVE AREA FOR ACCESS METHOD USE
*         E    RETURN FOR CMSYNAD, IMPLICITLY USED BY ACCESS METHODS
*         F    WORK REGISTER, ACCUMULATOR, TEMPORARY STORAGE
         EJECT
IGC0F06C CSECT
*                                                                YM2776
         BALR  RB,R0               ESTABLISH BASE
         USING *,RB
         B     BEGIN               BRANCH AROUND CSECT NAME
         DC    H'0'                PAD TO DOUBLEWORD BOUNDARY
         DC    C'IGC0F06C'         CSECT NAME
BEGIN    LR    RC,R1               BASE FOR CHECKPOINT WORK AREA
         USING CHKWA,RC
         LA    RD,CKREGSAV         GET ADDRESS OF SAVE AREA FOR I/O
         L     R2,CKDCBAD          GET CHKPT. DCB ADDRESS
         USING IHADCB,R2
         LA    RF,CM2E320          GET ADDRESS OF SYNAD RTN
         STCM  RF,M7,DCBSYNAD+N1   STORE ADDRESS IN DCB (3 BYTES)
         XC    CMWA(CMWAEND-CMWA),CMWA  CLEAR THE WORK AREA, SWITCHES
         LA    RF,N2048            INITIALIZE BUFFER SIZE IN DECB'S
         STH   RF,CKLNGTH1         DECB1 TO 2K
         STH   RF,CKLNGTH2         DECB2 TO 2K
         CLI   DCBNCP,N1           IS 1 CHANNEL PROGRAM SPECIFIED
         BH    CM2E050             NO- USE 2 CHANNEL PROGRAMS
         OI    SWITCH,CMSINGLE     INDICATE 1 CHANNEL PROGRAM
CM2E050  MVC   CKMXLIST(N8),CMN40NM MOVE IN DEFAULT NAME OF NEXT MODULE
         L     R4,CKTCBAD          GET ADDRESS OF USER'S TCB
         USING TCB,R4
         L     R3,TCBPQE           GET POINTER TO DPQE-8
         USING PQESECT,R3
         DROP  R4                  STOP USING R4 AS TCB POINTER
         L     R3,PQEFPQE          GET ADDRESS OF REGION PQE
         L     RF,PQEREGN          GET START ADDRESS OF REGION
         LA    RF,Z(RF)            CLEAR HIGH ORDER BYTE TO 0.
         ST    RF,CMCESA           SET-ELEMENT START ADDR = REG. START
         MVC   CMRGEND,CKPPE       SET CMRGEND EQUAL TO CKPPE    Y02076
         DROP  R3                  STOP USING R3 AS PQE BASE
         USING FBQESECT,R3         START USING IT AS AN FBQE POINTER
         STCM  R3,M7,CMPQEAD+N1    SAVE THE PQE ADDRESS FOR COMPARES
         LR    R1,RC               GET ADDR OF                   Y02076
         A     R1,CKBFOFST         SUR/SSCR BUFFER               Y02076
         STCM  R1,M7,CMASRAD+N1    SAVE THE ASR BUFFER ADDRESS
         XC    Z(N8,R1),Z(R1)      ZERO OUT THE ASR HEADER AND FLAGS
         SPACE 3
*        START OF REGION MAPPING
         SPACE 2
CM2E100  CLC   CMPQEAD+N1(N3),FWDPTR+N1 IS THERE AN FBQE
         BE    CM2E130             NO, FWD PTR POINTS TO PQE
         L     R3,FWDPTR           GET ADDR OF NEXT FBQE FROM PREV.
         CLC   FBQAREA+N1(N3),CMCESA+N1 DOES ELEM. START = FREE START
         BE    CM2E120             YES, GO TEST FOR END OF REGION
         MVC   CMCEEA+N1(N3),FBQAREA+N1 SET ELEMENT END=FREE AREA START
         BAL   R6,SETASRE          BUILD AN ASRE
CM2E120  L     RF,SIZE             GET SIZE OF FREE AREA
         A     RF,FBQAREA          CALCULATE END OF FREE AREA
         C     RF,CMRGEND          IS FREE AREA END = REGION END
         BNL   CM2E140             YES, GO WRITE OUT CURRENT ASR
         ST    RF,CMCESA           SET CURR. ELEM. START= FREE AREA END
         B     CM2E100             GO SEARCH FOR NEXT FREE AREA
         SPACE
*        THE REST OF THE REGION IS ALLOCATED
         SPACE
CM2E130  MVC   CMCEEA(N4),CMRGEND  SET ELEM.END = REGION END
         BAL   R6,SETASRE          BUILD THE LAST ASRE
CM2E140  L     R4,CMASRAD          GET ADDRESS OF ASR BUFFER
         USING ASRHDR,R4
         OI    ASRFLG1,ASRLAST     SET LAST ASR FLAG IN ASR HEADER
CM2E150  DS    0H                  LABEL
         LR    RA,R4               SET TO WRITE FROM ASR BUFFER
         TM    CKFLAG1,CKVEQR      IS THIS TASK V=R?             YM2776
CKVEQR   EQU   8                        V=R BIT IN W. A.        YA00258
         BNO   CKNOVEQR            NO, GO ON                     YM2776
         LRA   RA,0(,RA)           LOAD REAL ADDRESS OF ASR      YM2776
CKNOVEQR DS    0H                                                YM2776
         BAL   R2,WRITERTN         WRITE OUT THE ASR BUFFER
         SPACE 3
* WRITE OUT THE ALLOCATED STORAGE DESCRIBED BY THIS ASR RECORD
         SPACE
         LH    R8,ASRCOUNT         GET ELEMENT COUNT FROM ASR BUFFER
         LTR   R8,R8               IS COUNT 0
         BZ    CM2E190             YES, GO PREPARE TO EXIT
         SR    R7,R7               CLEAR ASRE INDEX
CM2E170  LA    R7,N8(R0,R7)        SET ASRE INDEX = ASRE INDEX + 8
         L     RA,N0(R7,R4)        SET CIR BUFFER START=ELEMENT START
CM2E180  BAL   R2,WRITERTN         WRITE THE CIR
         LA    RA,N2048(R0,RA)     UP CIR BUFFER START BY 2K
         C     RA,N4(R4,R7)        HAS ALLOCATED AREA WRITTEN
         BL    CM2E180             NO, WRITE MORE
         BCT   R8,CM2E170          BRANCH IF MORE ASRE'S LEFT
         TM    ASRFLG1,ASRLAST     IS THIS LAST ASR
         ST    R8,ASRHDR           RESET ASR HEADER TO 0 (GPR8 IS 0)
         BZ    CM2E220             NOT LAST ASR SO RETURN TO SETASRE
CM2E190  DS    0H                  LABEL
         TM    SWITCH,CMWRITE1     HAS LAST WRITE BEEN CHECKED
         BZ    CM2E200             YES, GO FREE THE BUFFER AND LEAVE
         BAL   R5,CKWRITE1         NO, CHECK THE WRITE
         BAL   R5,CKEOVOL          CHECK FOR END OF VOLUME
         SPACE 3
CM2E200  DS    0H                  LABEL
         LR    R1,RC               PUT CHKWA ADDRESS BACK IN GPR1.
         LA    RF,CKMXLIST         GET ADDRESS OF MODULE NAME
         ST    RF,CKMN40AD         PUT IT IN THE WORK AREA
         LA    RF,CKMN40AD         GET ADDR OF ADDR
         XCTL  SF=(E,(15))         XCTL TO NEXT LOAD
         SPACE 3
*        SETASRE ROUTINE - BUILDS AN ASR ENTRY AND WRITES OUT THE
*              ASR RECORD AND ITS DESCRIBED STORAGE IF THE ASR IS FULL
         SPACE
SETASRE  DS    0H
CM2E210  L     R4,CMASRAD          GET ADDRESS OF ASR HEADER
         USING ASRHDR,R4
         CLI   ASRCOUNT+N1,N255    IS ASR BUFFER FULL
         BNL   CM2E150             YES, GO WRITE THE ASR AND CIR'S
CM2E220  DS    0H                  LABEL
         LH    RF,ASRCOUNT         GET THE NUMBER OF ASRE'S IN BUFFER
         LA    RF,N1(R0,RF)        ADD 1
         STH   RF,ASRCOUNT         UPDATE THE COUNT IN THE ASR HEADER
         SLL   RF,N3               MULTIPLY BY 8 TO GET INDEX VALUE
         AR    RF,R4               GENERATE POINTER TO ASRE
         MVC   Z(N8,RF),CMCESA     MOVE IN AREA START AND END ADDRESSES
         BR    R6                  RETURN TO CALLER
         EJECT
*
*        WRITE RTN - CHECKMAIN 1 WRITE ROUTINE
*
WRITERTN DS    0H
CM2E240  TM    SWITCH,CMWRITE1     WAS LAST WRITE ON DECB 1
         BZ    CM2E260             NO, GO USE DECB 1
         TM    SWITCH,CMSINGLE     WAS SINGLE BUFFERING REQUESTED
         BO    CM2E250             YES, GO CHECK THE WRITE
         WRITE CKDECB2,SF,,(RA),,MF=E  WRITE AN ASR/CIR WITH DECB 2.
         BAL   R5,CKWRITE1         GO CHECK DECB1
         CHECK CKDECB2             NOW CHECK DECB2
         CLI   CKRETIO,CKIOERR     WAS THERE AN I/O ERROR
         BE    CM2E280             YES, GO STOP THE CHECKPOINT
         NI    SWITCH,ON-CMWRITE1  NO, TURN OFF THE DECB 1 SWITCH
         BAL   R5,CKEOVOL          GO CHECK FOR END OF VOLUME.
         BR    R2                  RETURN TO CALLER
         SPACE 2
CM2E250  BAL   R5,CKWRITE1         DECB 1
         BAL   R5,CKEOVOL          CHECK FOR EOV
CM2E260  DS    0H
         WRITE CKDECB1,SF,,(RA),,MF=E WRITE ASR/CIR WITH DECB1
         OI    SWITCH,CMWRITE1     SET SWITCH FOR DECB1.
         BR    R2                  RETURN TO CALLER
         SPACE
CM2E280  MVI   CKMXLIST+N4,CHARN   CAUSE XCTL TO IGC0N06C
         B     CM2E200             GO FREE THE BUFFER AND RETURN.
         SPACE 3
*        CKWRITE1 ROUTINE
         SPACE 1
*              THIS ROUTINE PERFORMS THE CHECK FOR DECB 1.
CKWRITE1 EQU   *                   CHECK RTN FOR DECB
CK2E270  CHECK CKDECB1
         CLI   CKRETIO,CKIOERR     Q. I/O ERROR
         BCR   NOTEQ,R5            A. NO. RETURN TO CALLER
         B     CM2E280             A. YES. GO XCTL TO IGC0N06C   Y02076
         SPACE 3
*        SYNAD ROUTINE FOR CHECKMAIN1
         SPACE 1
*              THIS ROUTINE SETS THE ERROR CODE AND MSG NUMBER IN THE
*              CHECKPOINT WORK AREA.  THE CHECK ROUTINES WILL TEST
*              THE FLAG AND TERMINATE PROCESSING.
CMSYNAD  EQU   *                   SYNAD RTN
CM2E320  MVI   CKRETIO,CKIOERR     SET FLAG OF 12 FOR I/O ERROR
         LA    R0,NX317            SET MESSAGE NUMBER/ERROR CODE
         STH   R0,CKMSGCOD         INTO WORK AREA
         RETURN
*        CKEOVOL - THIS SUBROUTINE DETERMINES IF AN END OF VOLUME
*                  CONDITION IS PENDING.
CKEOVOL  EQU   *                   END OF VOLUME ROUTINE
CM2E290  TM    CKFLAG1,CKTAPE      Q. IS CHECKPOINT DATA SET ON TAPE
         BZ    CM2E300             NO. IT IS A DIRECT ACCESS DEVICE
         L     RF,CKTSTEOV         GET ADDR OF VOL. SEQUENCE NUMBER
         CLC   Z(N4,RF),CKEOVCMR   Q. DID EOV OCCUR (HAS IT CHANGED)
         BCR   EQ,R5               A. NO RETURN TO CALLER
         TM    CKFLAG2,CKEOV       EOV ON PREVIOUS TAPE
         BO    CM2E310             YES, GO CANCEL THE CHECKPOINT
         OI    CKFLAG2,CKEOV       TURN ON THE EOV INDICATOR
         MVI   CKMXLIST+N4,CHAR2   SET REG TO CAUSE XCTL TO IGC0206C
         B     CM2E200             GO FREE THE ASR BUFFER AND TRY AGAIN
*        EOV ON DASD
         SPACE
CM2E300  L     RF,CKDCBAD          GET DCB ADDRESS
         USING IHADCB,RF
         L     RF,DCBDEBAD         GET DEB ADDRESS
         DROP  RF
         USING DEBBASIC,RF
         CLC   DEBNMEXT(N1),CKTSTEOV    EOV ON DASD
         BCR   EQ,R5                    NO, RETURN TO CALLER
         DROP  RF
         SPACE
*        AN EOV ON DASD OR SECOND EOV ON TAPE HAS OCCURRED
         SPACE
CM2E310  MVI   CKRETIO,CKEOVCOD    SET UP RETURN CODE OF 8.
         MVI   CKMXLIST+N4,CHARN   SET TO GO TO IGC0N06C
         LA    RF,CKERIO7          SET UP EOV ERROR
         STH   RF,CKMSGCOD              MESSAGE CODE
         B     CM2E200             GO FREE ASR BUFFER AND EXIT
         EJECT
*              CONSTANTS FOR CHECKMAIN 1.
         SPACE 3
CMN40NM  DC    C'IGC0G06C'         NAME OF CHECKMAIN2 (IHJVCP40)
         SPACE 3
*              MASK EQUATES
         SPACE 3
M7       EQU   7                   MASK FOR ICM/STCM INSTRUCTIONS.
NOTEQ    EQU   7                   MASK TO BRANCH ON NOT EQUAL COMPARE
EQ       EQU   8                   MASK TO BRANCH ON EQUAL COMPARE
ON       EQU   255                 MASK FOR BIT RESET
         SPACE 3
*              GENERAL EQUATES
         SPACE 3
Z        EQU   0                   ZERO
N0       EQU   0                   NUMBER 0
N1       EQU   1                   NUMBER 1
N3       EQU   3                   NUMBER 3
N4       EQU   4                   NUMBER 4
N7       EQU   7                   NUMBER 7
N8       EQU   8                   NUMBER 8
N2048    EQU   2048                2K BLOCK SIZE
N255     EQU   255                 MAX. NO. OF ASRE'S IN AN ASR RECORD
         SPACE 3
*              ERROR MESSAGE CODES/RETURN CODES
         SPACE 3
CKEOVCOD EQU   8                   RETURN CODE FOR END OF VOLUME
NX317    EQU   X'317'              ERROR CODE FOR I/O ERROR
CKERIO7  EQU   X'31B'              MESSAGE CODE FOR END OF VOLUME
CHAR2    EQU   C'2'                EBCDIC 2
CHARN    EQU   C'N'                EBCDIC N
         SPACE 3
*              PATCH AREA FOR MAINTENANCE
         SPACE 3
PATCH    EQU   *                   END OF MODULE
CM1LEN   EQU   PATCH-IGC0F06C      LENGTH OF CSECT
PATCHLEN EQU   CM1LEN/10           LENGTH OF PATCH AREA
CMIPATCH DS    CL(PATCHLEN)        PATCH AREA OF 10 PERCENT.
         EJECT
*              DSECT  USED FOR ASR HEADER
         SPACE 3
ASRHDR   DSECT
ASRCOUNT DS    H                   NUMBER OF ENTRIES IN ASR RECORD
ASRFLG1  DS    X                   ASR FLAG BYTE
ASRLAST  EQU   X'80'               LAST ASR RECORD
ASRRESV  DS    5X                  RESERVED
         EJECT
         IEEVCHWA  VER=3           USE VERSION 3 OF WA
CMWA     DS    0D                  START OF CHECKMAIN WORK AREA
CKRETIO  EQU   CKRETCOD+1          CELL FOR RETURN CODE
CKTSTEOV EQU   CKUNIT              EOV TEST 1
CKEOVCMR EQU   CKUNIT+4            EOV TEST 2
* THE ORDER OF THE NEXT TWO FIELDS MUST BE CMCESA, CMCEEA
CMCESA   DS    F                   CURRENT ELEMENT START ADDRESS
CMCEEA   DS    F                   CURRENT ELEMENT ENDING ADDRESS
SWITCH   DS    F                   SWITCH WORD
CMWRITE1 EQU   2                   INDICATES WRITE1 WAS LAST WRITE
CMSINGLE EQU   1                   INDICATES SINGLE BUFFERING
CKMN40AD DS    F                   SET TO ADDRESS OF CKMXLIST FOR XCTL
CKMXLIST DS    2F                  NAME OF NEXT MODULE TO GET CONTROL
CMRGEND  DS    F                   REGION END ADDRESS
CMASRAD  DS    F                   ADDRESS OF START OF ASR BUFFER
CMPQEAD  DS    F                   ADDRESS OF THE PQE FOR REGION
CMWAEND  EQU   *                   END OF CHECKMAIN WORK AREA
         EJECT
         IKJTCB
         EJECT
         IHAPQE
         EJECT
         IHAFBQE
         EJECT
         IHADCB DSORG=(BS,PO),DEVD=(DA,TA)
         EJECT
         IEZDEB
.LIB1BA1 ANOP
         AIF   ('&LIB' EQ 'LIB2').LIB2BA1  TEST FOR LIB2(AOS)
*
*0000501000-516000,540000-543000,549000                          A38515
*   STATUS ... CHANGE LEVEL 001
*
*   FUNCTION ...
*
*        WRITES CORE IMAGE RECORDS (CIR'S) OF THE REGION              *
*        ON CHKPT DATA SET, AND TRANSFERS CONTROL TO THE NEXT LOAD OF
*        CHECKPOINT.
*
*   ENTRY ...
*
*        CHKMAIN IS ENTERED VIA A TRANSFER CONTROL FROM THE PREVIOUS
*        CHECKPOINT LOAD AT ENTRY POINT IGC0F06C
*
*   INPUT ...
*
*   ..   DATA SET UP BY PREVIOUS LOADS OF CHECKPOINT AND MADE AVAILABLE
*        TO CHKMAIN IN THE CHKPT WORK AREA (W.A.).
*   ..   THE ADDRESS OF THE CHKPT W.A. IS PASSED IN GENERAL REGISTER 1
*        BY THE PREVIOUS LOAD OF CHECKPOINT.
*   ..   THE FOLLOWING DATA, RESIDING IN THE CHKPT W.A. IS USED BY THE
*        CHKMAIN ROUTINE.
*              CKWAOFST - OFFSET TO BEGINNING OF CHKMAIN AND CHKPT W.A.
*              CKBFOFST - OFFSET TO BEGINNING OF CHKPT'S BUFFER
*              CKDCBAD  - POINTER TO CHKPT DATA SET DCB
*              CKWACL   - LENGTH OF CHKPT W.A.
*              CKBUFL   - LENGTH OF CHKPT BUFFER
*              CKTCBAD  - POINTER TO PP TCB
*              CKPPM    - POINTER TO FIRST BYTE IN PP AREA
*              CKPPE    - POINTER TO LAST BYTE IN PP AREA
*              CKDECB1  - POINTER TO DECB FOR WRITE 1
*              CKDECB2  - POINTER TO DECB FOR WRITE 2
*
*   OUTPUT ...
*
*   ..   OUTPUT CONSISTS OF CORE IMAGE RECORDS OF CHKPT DATA SET      *
*
*   EXITS ...
*
*   NORMAL- XCTL TO IGC0G06C (NEXT LOAD OF RESTART)                   *
*   ERROR                                                             *
*   (1)UNRECOVERABLE EOV ON CKPT DATA SET- XCTL TO IGC0N06C WITH      *
*      RETURN CODE OF 8                                               *
*   (2)RECOVERABLE EOV ON CKPT DATA SET- XCTL TO IGC0206C             *
*   (3)I/O ERROR- XCTL TO IGC0N06C WITH RETURN CODE OF 12             *
*                                                                     *
*                                                                     *
*
*   WORK AREAS ...
*
*   ..   CHKMAIN USES THE FOLLOWING WORK AREAS WHICH ARE BUILT BY THE
*        FIRST LOAD OF CHECKPOINT.
*
*              CHKWA - CHKPT W.A. BUILT BY CHKPT CONTAINING DATA TO BE
*                      UTILIZED BY SUBSEQUENT LOADS OF CHECKPOINT.
*              CMWA  - WORK AREA ALLOCATED BY CHKPT FOR USE BY THE
*                      CHKDCB AND CHKMAIN ROUTINES.
*
         EJECT
*
*
*       THIS ROUTINE WRITES OUT THE PROBLEM PROGRAM STORAGE.
*
*
IGC0F06C CSECT
*2841010000-020000,298000,384000,444000-447000,471000,513000,
*    552000-558000,585000,627000,657000-663000,672000,786000,801000,
*    825000,837000-846000
         BALR  RB,R0          ESTABLISH BASE
         USING *,RB
         USING CHKWA,RC       ADDRESS CHKPT W.A.
         USING IHADCB,R2      ADDRESS CHKPT DCB.
         LR    RC,R1          GET ADDR OF CHKPT W.A.
         LA    RD,CKREGSAV    GET ADDR OF REG S.A.
         L     R2,CKDCBAD     GET CHKPT DCB ADDR
         LA    RF,CM2A2       GET ADDR OF CHKMAIN SYNAD ROUTINE
         ST    RF,CMSYSA
         MVC   DCBSYNAD+N1(N3),CMSYSA+N1     PUT ADR. OF CM2A2
*                                            IN SYNAD FIELD
         MVI   SWITCH,X0      INITIALIZE SWITCHES
         CLI   DCBNCP,X1      Q.  IS SINGLE BUFFERING INDICATED
         BH    CM2E1          NO-MULTIPLE BUFFERING SPECIFIED.
         OI    SWITCH,CMS1    SET CMS1 ON- SINGLE BUFFERING
CM2E1    EQU   *
         L     RA,CKPPE       CALCULATE LOW AND HIGH BOUNDS OF
         LTR   RA,RA               Q. W.A. IN H0                   I283
         BNE   CM2E2               A. YES  SKIP H1 W.A. CODE       I283
         L     RA,CKPPEL           A. NO  W.A. IS IN H1            I283
CM2E2    EQU   *                                                   I283
         LR    R9,RC          AREA ABOVE W.A.
         A     R9,CKWACL
         BAL   R8,CMINTW      GO TO WRITE OUT CORE ABOVE W.A.
         LA    RA,CHKWA       GET LOW AND HIGH BOUNDS OF
         BCTR  RA,R0          DECREMENT COUNT
         L     R9,CKPPM       AREA ABOVE W.A.
         LTR   R9,R9               Q. W.A. IN H0                   I283
         BNE   CM2E3               A. YES  SKIP H1 W.A. CODE       I283
         L     R9,CKPPML           A. W.A. IS IN H1               M2811
CM2E3    EQU   *                                                   I283
         BAL   R8,CMINTW      GO TO WRITE OUT CORE BELOW W.A.
         L     RA,CKPPEL      GET HIGH BOUNDARY OF HIERARCHY ONE.
         LTR   RA,RA          Q. DOES THIS REGION HAVE A HIERARCHY
         BZ    CMSKP          NO
         L     R9,CKPPE            SET UP TEST FOR H0 SEGMENT      I283
         LTR   R9,R9               Q. IS THERE AN H0 SEGMENT       I283
         BE    CMSKP               A. NO  H1 ALREADY WRITTEN       I283
         L     R9,CKPPML      GET LOW BOUNDARY OF HIERARCHY ONE.
         BAL   R8,CMINTW      GO TO WRITE OUT HIERARCHY ONE CORE.
CMSKP    EQU   *
         TM    SWITCH,CMS2    Q. HAS LAST WRITE BEEN CHECKED
         BZ    CMSKP2         YES-SKIP CODE TO CHECK.LAST WRITE
         BAL   R5,CMCHK1      GO TO CHECK LAST WRITE
         BAL   R5,CMEOV       GO TO SEE IF EOV OCCURRED
CMSKP2   EQU   *
         MVC   CKMXLIST(N8),CKMN40      XCTL PARAMETER
CMXCTL   EQU   *
         LR    R1,RC          LOAD PARM REG WITH ADDR OF W.A.
         LA    RF,CKMXLIST
         ST    RF,CKMN40AD
         LA    RF,CKMN40AD
         XCTL  SF=(E,(15))   XCTL TO NEXT LOAD
*
*        REPMAIN SYNAD ROUTINE
*
CM2A2    EQU   *
         MVI   CKRETIO,CKIOERR     ERROR CODE INTO WORK AREA
         LA    R0,NX317
         STH   R0,CKMSGCOD
         RETURN
*
*        END OF VOLUME
*
CMEOV    EQU   *
         TM    CKFLAG1,CKTAPE   Q. CHKPT DATA SET ON TAPE
         BZ    CMEOVDA        DIRECT ACCESS EOV
         L     RF,CKTSTEOV
         CLC   N0(N4,RF),CKEOVCMR       Q.   DID  EOV OCCUR
         BE    N0(R5)                   A.   NO  CONTINUE PROCESS
         MVI   CKRETCOD+N1,X'14'   YES - SET EOV ERR CODE - 14   A38515
         LA    RF,CKTPEOV     INDICATE TAPE EOV ERROR            A38515
         B     CMEOVER             GO TO EXIT ROUTINE            A38515
CMEOVDA  EQU   *
         USING IHADCB,RF
         L     RF,CKDCBAD    GET ADR. OF CHKPT DCB
         L     RF,DCBDEBAD   GET ADR. OF CHKPT DEB
         DROP  RF
         CLC   DEBNMEXT(N1,RF),CKTSTEOV      Q.  EOV ON DA DEVICE
         BE    N0(R5)                        NO CONTINUE PROCESS
         MVI   CKRETCOD+N1,CKPGMERR SET RETURN CODE TO 8         A38515
         LA    RF,CKERIO7     INDICATE DISK EOV ERROR            A38515
CMEOVER  EQU   *                                                 A38515
         STH   RF,CKMSGCOD
         B     CMIORE                   XCTL INTERFACE
         EJECT
*
*        DOUBLE BUFFERING
*
CMSMBUF  EQU   *
         TM    SWITCH,CMS1    Q. SINGLE BUFFERING
         BO    CMSBUF         YES
         STH   R6,CKLNGTH2    PUT LENGTH OF CIR IN DECB.
         WRITE CKDECB2,SF,,(RA),,MF=E   WRITE A CIR.
         BAL   R5,CMCHK1      GO TO CHECK WRITE 1.
         CHECK CKDECB2
         CLI   CKRETIO,CKIOERR     Q.  I/O ERROR
         BE    CMIORE                   XCTL INTERFACE
         XI    SWITCH,CMS2    TURN OFF SWITCH INDICATING THAT
*                             LAST WRITE USED DECB1.
         BAL   R5,CMEOV       GO TO SEE IF EOV OCCURRED.
         BR    R3                  RETURN TO CALLER
*
*        SINGLE BUFFERING
*
CMSBUF   EQU   *
         BAL   R5,CMCHK1      GO TO CHECK WRITE 1.
         BAL   R5,CMEOV       GO TO SEE IF EOV OCCURRED.
         B     CMCOMW         GO TO WRITE OUT A CIR.
CMWRTO   EQU   *
         TM    SWITCH,CMS2 Q. DID LAST WRITE USE DECB1
         BO    CMSMBUF        YES
CMCOMW   EQU   *
         BAL   R5,CMWRT1           DO WRITE 1
         OI    SWITCH,CMS2    TURN ON INDICATION THAT LAST WRITE
*                             USED DECB1.
         BR    R3                  RETURN TO CALLER
CMWRT1   EQU   *
         STH   R6,CKLNGTH1    PUT LENGTH OF CIR IN DECB1.
         WRITE CKDECB1,SF,,(RA),,MF=E   WRITE A CIR.
         BR    R5                  RETURN TO CALLER
CMCHK1   EQU   *
         CHECK CKDECB1
         CLI   CKRETIO,CKIOERR     Q.  I/O ERROR
         BCR   NOTEQ,R5            A.  NO  RETURN TO CALLER
CMIORE   EQU   *
         MVC   CKMXLIST(N8),CKMN40      SET UP XCTL PARM. LIST
         MVI   CKMXLIST+N4,CHARN        FOR I/O RESUME
         B     CMXCTL              XCTL INTERFACE
*
*        WRITE INTERFACE
*
CMLSWT   EQU   *
         CH    R7,NOISE    Q. WOULD CIR BE MISTAKEN FOR NOISE
         BL    CMNOISE     YES
         LR    R6,R7          GET LENGTH OF CIR.
CMCOM    EQU   *
         LR    RA,R9          GET ADDR OF BEGINNING OF CIR.
         BAL   R3,CMWRTO      GO TO WRITE LAST CIR FOR THIS AREA.
         B     N0(R8)         RETURN TO CALLER
CMNOISE  EQU   *
         LH    R6,NOISE       INSURE CIR IS AT LEAST MINIMUM LENGTH.
         B     CMCOM          GO TO WRITE CIR
CMINTW   EQU   *
         LA    RA,N1(R0,RA)       INCREMENT HIGH BOUND PTR.
         LR    R7,RA          CALCULATE LENGTH OF AREA
         SR    R7,R9          TO BE WRITTEN OUT.
         L     R6,CKBUFL      GET BLKSIZE
CMWAGN   EQU   *
         LTR   R7,R7          Q. ANY MORE TO BE WRITTEN OUT.
         BZ    N0(R8)         NO RETURN
         CR    R7,R6          Q. LENGTH TO BE WRITTEN LESS THAN BLKSIZE
         BNH   CMLSWT         YES- WRITE OUT SHORT BLOCK
         SR    RA,R6          GET ADDR OF BEGINNING OF CIR.
         SR    R7,R6          COMPUTE LENGTH OF AREA THAT WILL BE LEFT.
         BAL   R3,CMWRTO      GO TO WRITE A CIR.
         B     CMWAGN         PROCESS NEXT CIR
         EJECT
*
*        DEFINED CONSTANTS
*
NOISE    DC    H'18'     MINIMUM LENGTH FOR CHKPT RECORD.
CKMN40   DC    CL8'IGC0G06C'  NAME OF NEXT LOAD OF RESTART
         SPACE 4
         IEEVCHWA                  OS VERSION OF WA
CKTSTEOV EQU CKUNIT
CKEOVCMR EQU CKUNIT+4
CMADEOV  DS    F    SAVE AREA FOR INFORMATION NEEDED
CMNEOV   DS    F    TO TEST IF EOV OCCURRED.
SWITCH   DS    F     SWITCH
CMS1     EQU   1    INDICATES SINGLE BUFFERING.
CMS2     EQU   2    INDICATES WRITE 1 WAS LAST WRITE.
CKMXLIST DS    2F   NAME OF NEXT MODULE TO RECEIVE CONTROL.
CKMN40AD DS    F       CHECKMAIN
CMSYSA   DS    F     SYSTEM
         IHBABCTL
         DCBD  DSORG=(BS,PO),DEVD=(DA,TA)
         EJECT
*
*        GENERAL EQUATES
*
CKRETIO  EQU   CKRETCOD+1
CHARN    EQU   C'N'
CHAR2    EQU   C'2'
NOTEQ    EQU   7
SURL     EQU   200  LENGTH OF SUR BUFFER.
X0       EQU   X'0'
X1       EQU   X'01'
NX317    EQU   X'317'
CKERIO7  EQU   X'031B'
CKTPEOV  EQU   X'031C'        TAPE EOV ERROR                     A38515
DEBNMEXT EQU   16     NUMBER OF EXTENTS FOR THIS DEB
*
*        EQUATES FOR GENERAL DISPLACEMENTS
*
N0       EQU   0
N1       EQU   1
N3       EQU   3
N4       EQU   4
N8       EQU   8
.LIB2BA1 ANOP
         END
