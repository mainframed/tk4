         TITLE 'IGC0G05B  JFCB PROCESSOR - TABLE BUILD MODULE          *
                      REPOSITION I/O  RESTART-SVC 52  OS/360'
IGC0G05B CSECT
*          RELEASE 18 DELETIONS
*          RELEASE 19 DELETIONS
*0512390600,524700,540000,558000,564300-565200,586800,633600-    A26097
*0512635400,639000-639900,643100,649800,655200,657900-658800,    A26097
*0512662400,665100                                               A26097
*0512175500,242100                                               A28676
*          RELEASE 20 DELETIONS
*0931285240,307200-307500                                        A33998
*0931252900,256500                                               S20038
*0931514200,514500                                               A33084
*0931526500,623700,633700                                        A33983
*0931019800-035100,045900,047700,051300,147700-147760,147800-    M3408
*0931148060,148100-148420,148460,151200-152100,152300-152800,    M3408
*0931153100-153350,153400,153600,284790,285210,344700,353700,    M3408
*0931362700-630900,633700,636300-638100,643700,644100,656100,    M3408
*0931657000,659700-666400                                        M3408
*0931252000-253800                                               A38124
*          RELEASE 21 DELETIONS
*          RELEASE 22 DELETIONS
*          RELEASE 23 DELETIONS
*          RELEASE 24 DELETIONS
*          RELEASE 25 DELETIONS
*          RELEASE 26 DELETIONS
*      MVS RELEASE 3.7 CHANGES ADDITIONS DELETIONS
*A186242-186252,A311577-311635                                 @ZA12948
*C230400,C321900,A321900                                       @ZA24633
* APAR OZ31483 HAS BEEN FLAGGED AS @ZSUT222                    @ZSUT222
*C148440,153888,302400,309920                                  @ZSUT222
*A634200-635200,655800                                         @ZSUT222
*STATUS CHANGE LEVEL 003
*
*TITLE -       TABLE BUILD MODULE
*
*STATUS -      INITIAL CODE
*
*FUNCTION -    THIS MODULE COUNTS THE DATA SETS ASSOCIATED WITH THE
*              TASK TO BE RESTARTED AND CONSTRUCTS A TABLE ENTRY FOR
*              FOR EVERY ONE EXCEPT THE VSAM DATA SETS. THE TIOT
*              OFFSETS ARE UPDATED. THE DSAB POINTERS TO THE DEB AND
*              VICE VERSA ARE UPDATED. TCAM DATA SETS ARE FLAGGED.
*              THE RESTART DATA SET IS FLAGGED. THE SSOB,DEB AND SSIB
*              POINTERS ARE UPDATED. ALL CHECKPOINT DATA SETS ARE
*              CHECKED TO MAKE SURE THEY ARE SECURE. THE PORTION
*              OF THE WORK AREA NOT USED FOR 48 BYTE ENTRIES IS USED
*              FOR I/O BUFFERS AND IS SPLIT INTO AS MANY 304 BYTE
*              BUFFERS AS POSSIBLE.
*
*              THIS MODULE WAS SPLIT FOR RELEASE 20.  THE REMAINDER
*              OF THE TABLE BUILD ROUTINE IS NOW MODULE IGC0G95B.
*
*ENTRYPOINT -  IGC0G05B  CSECT
*
*INPUT -       REGISTER 1 - POINTER TO THE RESTART WORKAREA (RSTWA)
*                           SEE DSECT AT END OF MODULE
*
*OUTPUT -      REGISTER 8 - POINTER TO BEGINNING OF DATA SET INFO TABLE
*
*              REGISTER 1 - POINTER TO BEGINNING OF RSTWA WORKAREA
*                           (SEE DSECT AT END OF TABLE)
*
*ENTERNAL RTN- NONE
*
*EXITS -       NORMAL TO IGC0G95B VIA XCTL
*
*              ON ERROR CONDITION TO IGC0V05B VIA XCTL
*                   RET CODE =  33 - DD CARD MISSING IN TIOT   @ZSUT222
*                   RET CODE =  99 - DSAB MISSING              @ZSUT222
*
*
*TABLES/WORKAREAS
*
***********************************************************************
*                                                                     *
*    THE FOLLOWING IS A DESCRIPTION OF THE 48 BYTE TABLE ENTRY THAT   *
*    IS USED IN THE RESTART PORTION OF CHECKPOINT/RESTART.  EACH      *
*    ENTRY IN THE TABLE (ONE FOR EACH OPEN DATA SET AT CHECKPOINT)    *
*    IS 48 BYTES LONG.                                                *
*                                                                     *
***********************************************************************
*
*        ------------------- 4 BYTES -----------------
*
*      0 +++++++++++++++++++++++++++++++++++++++++++++
*        +DATA SET  +           DCB                  +
*        + ORGN.    +         ADDRESS                +
*        +++++++++++++++++++++++++++++++++++++++++++++ 4
*        +FLAG BYTE +    WORKAREA SEGMENT            +
*        + NO. 1    +         ADDRESS                +
*      8 +++++++++++++++++++++++++++++++++++++++++++++
*        +NUMBER    +         JFCB TTR               +
*        + OF VOLS  +         ADDRESS                +
*        +++++++++++++++++++++++++++++++++++++++++++++ 12
*
*     12 +++++++++++++++++++++++
*        +TAPE LABL + FILE SEQ +        DEVICE = TAPE
*        +INFO BYTE + NUMBER   +
*        +++++++++++++++++++++++
*
*     12 +++++++++++++++++++++++
*        +    OLD   TIOT       +        DA AND UNIT RECORD
*        +      OFFSET         +
*        +++++++++++++++++++++++
*
*                              +++++++++++++++++++++++
*                              +FLAG BYTE +FLAG BYTE +
*                              +  NO. 2   +  NO. 3   +
*     16 +++++++++++++++++++++++++++++++++++++++++++++
*        +FLAG BYTE +FLAG BYTE +                     +
*        + NO. 4    + NO. 5    +   VOLUME ID NO. 1   +
*        +++++++++++++++++++++++                     + 20
*        +                                           +
*        +                                           +
*     24 +++++++++++++++++++++++++++++++++++++++++++++
*        +                                           +
*        +   VOLUME ID NO. 2                         +
*        +                     +++++++++++++++++++++++ 28
*        +                     +                     +
*        +                     +   VOLUME ID NO. 3   +
*     32 +++++++++++++++++++++++                     +
*        +                                           +
*        +                                           +
*        +++++++++++++++++++++++++++++++++++++++++++++ 36
*        +                                           +
*        +   VOLUME ID NO. 4                         +
*     40 +                     +++++++++++++++++++++++
*        +                     +                     +
*        +                     +                     +
*        +++++++++++++++++++++++   VOLUME ID NO. 5   + 44
*        +                                           +
*        +                                           +
*        +++++++++++++++++++++++++++++++++++++++++++++ 48
*
*
*           A  DCBTABLE,
*
*           B  BUFFER AREA,
*
*           C  SEE DSECTS AT END OF LISTING.
*
*ATTRIBUTES
*
*          A RE-ENTRANT
*          B RE-USABLE
*          C ENABLED
*          D PRIVIALEGED
*
*********************************************************************
*
*    REGISTER CONVENTION TO BE USED THRU-OUT REPI/O PHASE
*
***********************************************************************
*
WRKR1    EQU   0                        WDRK/PARAMETER REGISTER
WRKR2    EQU   1                        WDRK/PARAMETER REGISTER
DCBR     EQU   2                        CURRENT DCB REGISTER
BASER    EQU   3                        BASE REGISTER
DEBR     EQU   4                        CURRENT DEB REGISTER
UCBR     EQU   5                        CURRENT UCB REGISTER
TIOTR    EQU   6                        NEW TIOT REGISTER
TCBR     EQU   7                        TCB REGISTER
TABLR    EQU   8                        BEGINNING TO DCB TABLE REG
CTABLR   EQU   9                        CURRENT ENTRY IN DCB TABLE
BUFR     EQU   10                       USER BUFFER AREA
DSCNTR   EQU   11                       WORK REGISTER
WRKR3    EQU   12                       WORK/DEB PREFIX REGISTER Y02076
WRKR4    EQU   13                       WORK/CURRNT DSAB REGISTERY02076
WRKR5    EQU   14                       WORK/PARAMETER REGISTER
WRKR6    EQU   15                       WORK/PARAMETER REGISTER
*
***********************************************************************
*
*    OFFSETS TO BE USED IN REPI/O PHASE
*
***********************************************************************
*
IS       EQU   X'80'                    INDEXED SEQUENCIAL
PS       EQU   X'40'                    PHYSICAL SEQUENCIAL
DA       EQU   X'20'                    DIRECT ACCESS
PO       EQU   X'02'                    PARTITIONED ORGANIZATION
VS       EQU   X'01'                    VIRTUAL SEQUENTIAL       Y02076
TABENT   EQU   48                       TABLE ENTRY LENGTH
ERR033   EQU   33                       MISSING DD CARD        @ZSUT222
BUFSEG   EQU   304
TIOTBASE EQU   24
BLANK    EQU   C' '                     BLANK CHARACTER
NODDENT  EQU   X'00'                    NO DD ENTRY
DEBID    EQU   X'0F'                    DEB IDENTIFICATION
TCAMID1  EQU   X'C0'                    UNIQUE TCAM DEB CODE     M3408
TCAMID2  EQU   X'CF'                    UNIQUE TCAM DEB CODE     M3408
RSTCAM   EQU   X'04'                    MASTER TCAM FLAG         M3408
ERR099   EQU   99                       NO DSAB FOUND ERROR    @ZSUT222
SUBSYSDS EQU   X'80'                    SUBSYSTEM INDICATOR      Y02076
D0       EQU   0                   ZERO                          Y02076
D1       EQU   1                   ONE                           Y02076
D2       EQU   2                   TWO                           Y02076
D3       EQU   3                   THREE                         Y02076
D4       EQU   4                   FOUR                          Y02076
D5       EQU   5                   FIVE                          Y02076
D6       EQU   6                   SIX                           Y02076
D7       EQU   7                   SEVEN                         Y02076
D8       EQU   8                   EIGHT                         Y02076
D9       EQU   9                   NINE                          Y02076
D16      EQU   16                  SIXTEEN                       YM5360
*
***********************************************************************
*
         BALR  BASER,0                  ESTABLISH ADDRESSABILITY
         USING *,BASER                  ESTABLISH BASE REGISTER
         B     BEGIN               BRANCH AROUND EYE CATCHER     Y01909
         CNOP  0,8                 ALIGN TO A DBL WORD BOUNDARY  Y01909
         DC    CL8'IGC0G05B'       MODULE NAME                 @ZSUT222
         DC    CL8'&SYSDATE'       LAST DATE SHIPPED           @ZSUT222
         DC    CL8'@ZSUT222'       LAST CODE SHIPPED           @ZSUT222
BEGIN    EQU   *                                                 Y01909
*
         USING IHADCB,DCBR
         USING UCBOB,UCBR
         USING TIOENTRY,WRKR5
         USING DEBBASIC,DEBR                                     Y02076
         USING TCB,TCBR
         USING TABL,CTABLR
         USING RSTWA,BUFR
*
         LR    BUFR,WRKR2               GET WORK AREA (RESTART) ADDR
*
         L     WRKR2,RSWAOFST           OFFSET TO REPI/O AREA
         LA    TABLR,0(WRKR2,BUFR)      POINT TO REPI/O AREA
*
         SR    DSCNTR,DSCNTR            INITIALIZE REGISTER
         L     TCBR,RSTCBAD             GET USER TCB
*
         L     DEBR,RSINT               GET 1ST DEB ADDR         A28676
         LA    DEBR,D0(DEBR)            ADR ONLY                 Y02076
         MVC   RSPPM(8),NORMALXT        SET UP XCTL LIST         A26097
*
***********************************************************************
*
*    THE FOLLOWING SECTION OF CODE WILL COMPUTE NO. OF DATA SETS IN USE
*
***********************************************************************
*
REPDCB00 EQU   *
*
         LA    DSCNTR,1(DSCNTR)         INCREMENT DEB COUNT BY ONE
         USING DEBPREFX,WRKR3                                    Y02076
         LR    WRKR3,DEBR               LOAD BASE REGISTER       Y02076
         SH    WRKR3,DEBPROFF           OFFSET BACK TO DEB PREF  Y02076
         CLI   DEBAMTYP,VS              VSAM DATA SET            Y02076
         BNE   REPDCBX0                 NO  NEXT DEB             Y02076
         BCTR  DSCNTR,D0                DONT COUNT VSAM DATA SET Y02076
REPDCBX0 EQU   *                        INSTR MUST FOLLOW        Y02076
         CLI   DEBAMTYP,IS              IS IT AN ISAM DEB      @ZA12948
         BNE   REPDCBY0                 NO - NEXT DEB          @ZA12948
         TM    DEBFLGS1,DEBCINDI        COMPT INTF PROCESSING  @ZA12948
         BNO   REPDCBY0                 NO - NEXT DEB          @ZA12948
         BCTR  DSCNTR,D0                DONT COUNT ISAM CI DEB @ZA12948
REPDCBY0 EQU   *                                               @ZA12948
         L     DEBR,DEBDEBAD            LINK TO NEXT POSSIBLE DED
         LA    DEBR,0(DEBR)             CLEAR HIGH ORDER BYTE
         LTR   DEBR,DEBR                WAS THERE ANOTHER DEB IN CHAIN
         BNZ   REPDCB00                 YES BRANCH TO COUNT DEB
         DROP  WRKR3                                             Y02076
*
***********************************************************************
*
*    ALL DEBS HAVE BEEN COUNTED, AT THIS POINT COMPUTE AMOUNT OF SPACE
*    REQUIRED FOR THE DCB TABLE. EACH DCB ENTRY IS 48 BYTES LONG....
*
***********************************************************************
*
         SR    WRKR3,WRKR3              ZERO OUT WRKR3
         LA    WRKR4,TABENT             SIZE OF TABLE ENTRY
         MR    WRKR3,DSCNTR             CALCULATE TABLSIZE IN WRKR6
*
         L     WRKR2,RSDCBFLG           GET LEN. OF ENTIRE WORK AREA
         SH    WRKR2,SSCRLNGT           SUBTR SSCR LENGTH        Y02076
         ST    WRKR2,RSDCBFLG           SAVE FOR CLEARING        Y02076
         SR    WRKR2,WRKR4              BUFFER LEN. MINUS TABLE SIZE
         LA    UCBR,0(WRKR4,TABLR)      ADDRESS OF BUFFER AREA
*
*   THE BUFFER MUST BE ON A DOUBLE WORD BOUNDARY
*
         LA    UCBR,4(UCBR)             ADD FOUR TO ADDRESS
         SRL   UCBR,3                   CLEAR RIGHTMOST 3 BITS
         SLL   UCBR,3                   RESTORE DOUBLE WORD BOUNDARY
         L     WRKR4,RSDCBFLG           SETUP PARM TO CLEAR CORE -SIZE
         LR    WRKR3,TABLR              SETUP PARM TO CLEAR CORE -ADDR
*
         BCTR  WRKR4,0                  REDUCE AMOUNT TO CLEAR BY ONE
         LA    WRKR5,255                LOAD MAX TO CLEAR PER ONE SHOT
*
COMPARE  CR    WRKR4,WRKR5              IS AMOUNT TO CLEAR GREATER 255
         BC    12,ONECLEAR              BR IF NOT GREATER TO 'ONECLEAR'
*
*   THE FOLLOWING IS PERFORMED EACH TIME AMOUNT LEFT TO BE CLEARED (IN
*   WRKR6 ) IS GREATER THAN 256 BYTES
*
         EX    WRKR5,CLEAR              CLEAR 256 BYTES VIA 'CLEAR'
         SR    WRKR4,WRKR5              SUB. 255 FROM AMOUNT TO BE CLRD
         BCTR  WRKR4,0                  SUB. ONE MORE BYTE
         LA    WRKR3,256(WRKR3)         BUMP ADDR COUNTER BY 256
         B     COMPARE                  CYCLE THRU ONCE MORE
*
CLEAR    XC    0(1,WRKR3),0(WRKR3)      THE ACTUAL CLEAR INSTRUCTION
*
ONECLEAR EX    WRKR4,CLEAR              CLEARS LESS THAN 256 BYTES
*
         L     WRKR6,RSTIOTAD           GET TASKS OLD TIOT
         LR    CTABLR,TABLR             INIT. CURR. ENTRY REG.
*
         ST    WRKR2,RSSSCR             SAVE LENGTH IN BUF SEG @ZA24633
*
***********************************************************************
*
*    THIS IS THE TIOT THAT WAS IN USE AT CHKPT TIME AND IS PASSED BY
*    RESTART ROUTINES TO REPI/O. IT IS REQUIRED TO FIND THE DDNAMES
*    ASSOCIATED WITH THE OPENED DATA SETS AT RESTART TIME...........
*
***********************************************************************
*
         L     TIOTR,TCBTIO             GET CURRENT TIOT FROM TCB
         LA    TIOTR,D0(TIOTR)          ADR ONLY                 Y02076
         L     DEBR,RSINT               GET 1ST DEB ADDR         A28676
         LA    DEBR,D0(DEBR)            ADR ONLY                 Y02076
*
***********************************************************************
*
*        PLACE THE ADDRESS OF THE DCB IN THE DCB TABLE           YM7053
*        IN PREPARATION FOR THE JFCB READ                        YM7053
*
***********************************************************************
*
REPDCB01 EQU   *                                                 YM7053
         LR    WRKR5,TIOTR              SAVE TIOT ADDRESS        YM7053
         MVC   TABDCBAD(3),DEBDCBAD+1   MOVE THIS DEB'S DCB ADDR A38124
*                                       TO TABLE ENTRY
         ST    DEBR,TABVLID4            SAVE CURRENT DEB POINTER YM7053
*
REPDCBB1 EQU   *                        INSTR MUST FOLLOW        Y02076
         CLI   DEBNMSUB,TCAMID1         Q - TCAM DEB (1ST        M3408
*                                       CHANCE)                  M3408
         BE    REPDCB20                 YES, SET TCAM FLAGS      M3408
         CLI   DEBNMSUB,TCAMID2         Q - TCAM DEB (2ND        M3408
*                                       CHANCE)                  M3408
         BNE   REPDCB40                 NO, BYPASS SETTING FLAGS M3408
REPDCB20 EQU   *                                                 M3408
         OI    RSFLAG2,RSTCAM           SET MASTER TCAM          M3408
*                                       INDICATOR                M3408
         OI    TABFLG1,TABTCAM          SET TCAM TABLE ENTRY     M3408
*                                       FLAG                     M3408
REPDCB40 EQU   *                                                 M3408
         SR    WRKR2,WRKR2              INITIALIZE REGISTER
*
***********************************************************************
*
*    THE TIOT OFFSETS WILL BE CORRECTED TO POINT TO THE NEW TIOT IN
*    THE NEXT SECTION OF CODE. IF A DDNAME CANNOT BE FOUND IN TIOT
*    THE REPI/O WILL RETURN TO RESTART WITH ERROR CODE.
*
***********************************************************************
*
REPDCB02 EQU   *
*
         LA    WRKR3,TIOTBASE           OFFSET FOR FIRST DDNAME
         LA    WRKR5,0(WRKR3,WRKR5)     BYPASS BASIC SECTION OF TIOT
*
         L     DCBR,TABDCBAD-1          GET DCB TO PROCESS
         LH    WRKR4,DCBTIOT            GET OFFSET FOR DDNAME IN TIOT
         AR    WRKR4,WRKR6              POINT TO DDNAME IN OLD TIOT
         TM    TIOELINK-TIOENTRY(WRKR4),TIOESSDS WAS DS A        YM7399
*                                       SUBSYSTEM DS AT CHKPT    YM7399
*                                       TIME                     YM7399
         BZ    REPDCX15                 IF NOT, BRANCH           YM7399
         OI    TABFLG2,TABOSSDS         SET OLD-SUBSYSTEM FLAG   YM7399
REPDCX15 EQU   *                        NON-SUBSYSTEM ENTRY      YM7399
*
*
* IF A CONCATNATED DATA SET IS BEING PROCESSED THE POINTER IN
* THE OLD TIOT MUST POINT TO THE NON-BLANK DDNAME AND THE
* DISPLACEMENT SAVED. AFTER THE SEARCH IS SATISFIED THE
* DISPLACEMENT WILL BE ADDED TO THE NEW TIOT DISPLACEMENT.
*
         LA    DEBR,D1                  ONE TO DEBR, REQUIRED IF YM7053
*                                       DDNAME NON BLANK         YM7053
         CLI   D4(WRKR4),BLANK          IS THIS DDNAME BLANK?    YM7053
         BNE   REPDCB03                 NO, CONTINUE PROCESSING  YM7053
         LA    WRKR6,TIOTBASE(WRKR6)    POINT TO 1ST DDNAME IN OLD TIOT
*
REPDCBX1 EQU   *
*
         ST    WRKR6,20(CTABLR)         SAVE NON-BLANK DD ADDR   M3408
         SR    DEBR,DEBR                INIT DD ENTRY COUNTER    A33998
*
REPDCBX2 EQU   *
*
         LA    DEBR,1(,DEBR)            BUMP DD ENTRY COUNTER    A33998
         CR    WRKR6,WRKR4              ARE POINTERS EQUAL
         BE    REPDCBX4                 BRANCH IF EQUAL
         IC    WRKR2,0(WRKR6)           INSERT LENGTH
         AR    WRKR6,WRKR2              INCREMENT TO NEXT POINTER
         CLI   4(WRKR6),BLANK           BLANK DDNAME
         BE    REPDCBX2                 BRANCH IF YES
         B     REPDCBX1                 CHECK NEXT ENTRY
*
REPDCBX4 EQU   *
*
         L     WRKR4,20(CTABLR)         GET NON-BLANK DD ADDR    M3408
*
REPDCB03 EQU   *
*
         CLC   4(8,WRKR4),TIOEDDNM      LOOK FOR DDNAME IN NEW TIOT
         BE    REPDCB04                 IF FOUND BRANCH
*
         IC    WRKR2,TIOELNGH           GET CURRENT ENTRY LNGH IN TIOT
         AR    WRKR5,WRKR2              INCREMENT TO NEXT DDNAME
         AR    WRKR3,WRKR2              INCREMENT OFFSET BEING GENRTED
*
         CLI   TIOELNGH,NODDENT         DOES ANOTHER DD ENTRY EXIST
         BNE   REPDCB03                 YES BRANCH TO LOOK AT NAME
*
***********************************************************************
*
*    DDNAME MISSING FROM NEW TIOT - CANNOT RESTART PROPERLY
*
***********************************************************************
*
         MVI   RSRETCOD+1,ERR033        MISSING DD CARD ERROR  @ZSUT222
         B     REPDCBER                 BRANCH TO ERROR EXIT
*
REPDCB04 EQU   *
*
         MVC   TABTPLBL(2),DCBTIOT      SAVE OLD OFFSET IN TABTPLBL
         B     REPDC04B                                          A33998
REPDC04A EQU   *                                                 A33998
         IC    WRKR2,TIOELNGH           GET THIS ENTRY'S LNGTH   A33998
         AR    WRKR5,WRKR2              POINT TO NEXT ENTRY      A33998
         AR    WRKR3,WRKR2              UPDATE ENTRY OFFSET      A33998
REPDC04B EQU   *                                                 A33998
         BCT   DEBR,REPDC04A            LOOP BACK TO PROCESS     A33998
*                                       CONCAT. ENTRIES          A33998
         STH   WRKR3,DCBTIOT            SAVE NEW OFFSET IN DCB
         MVC   TABJFCB(3),TIOEJFCB      SAVE JFCB(S) TTR IN TABLE
**********************************************************************
*                                                                    *
*              RESOLVE ALL DSAB POINTER ADDRESSES IN ALL DEB         *
*              EXTENTIONS AND THE SSOB'S FOR SUBSYSTEM DATA SETS     *
*              DUE TO RELOCATION AT RESTART TIME.   THE SUBSYSTEM    *
*              INDICATOR IN THE 48 BYTE OPEN DATA SET ENTRIES WILL   *
*              BE SET FOR ALL SYSIN/SYSOUT DATA SETS.                *
*                                                                    *
**********************************************************************
         AR    WRKR3,TIOTR              CALC ABS DD ENTRY OFFSET Y02076
         L     WRKR4,TCBJSCB            ADDRESSABILITY FOR JSCB  Y02076
         USING IEZJSCB,WRKR4                                     Y02076
         L     WRKR4,JSCDSABQ           ADDRESSABILITY FOR QDB   Y02076
         USING QDB,WRKR4                                         Y02076
         L     WRKR4,QDBFELMP           ADDRESSABILITY FOR DSAB  Y02076
         USING DSAB,WRKR4                                        Y02076
REPDC04C EQU   *                        INSTR MUST FOLLOW        Y02076
         CLM   WRKR3,D7,DSABTIOT+D1     CORRECT DSAB             Y02076
         BE    REPDC04E                 YES  DO DEB WORK         Y02076
         CLC   DSABFCHN+D1(D3),DSABCHNE END OF DSAB CHAIN        Y02076
         BE    REPDC04D                 YES ERROR DSAB NOT FOUND Y02076
         L     WRKR4,DSABFCHN           STEP TO NEXT DSAB ADDRESSY02076
         B     REPDC04C                 TEST NEXT DSAB           Y02076
REPDC04D EQU   *                        INSTR MUST FOLLOW        Y02076
         MVI   RSRETCOD+D1,ERR099       NO DSAB FOUND ERROR    @ZSUT222
         B     REPDCBER                 BRANCH TO ERROR EXIT     Y02076
REPDC04E EQU   *                        INSTR MUST FOLLOW        Y02076
         L     WRKR5,TABVLID4           ADDRESSABILITY FOR DEB   YM7053
         LA    WRKR5,D0(WRKR5)          ADR ONLY                 Y02076
         SH    WRKR5,DEBPROFF           OFFSET BACK TO DEB PREFIXY02076
         USING DEBPREFX,WRKR5                                    Y02076
         L     WRKR5,DEBXTNP            ADDRESSABILITY FOR DEB EXY02076
         USING DEBXTN,WRKR5                                      Y02076
         STCM  WRKR4,D7,DEBXDSAB+D1     STORE CORRECT DSAB ADR   Y02076
         LR    WRKR5,WRKR4              SAVE DSAB ADR            Y02076
         LH    WRKR4,DCBTIOT            ADDRESSABILITY FOR TIOT DY02076
         AR    WRKR4,TIOTR              ADR IN TIOT              Y02076
         USING TIOENTRY,WRKR4                                    Y02076
         TM    TIOELINK,TIOESSDS        IS IT A SUBSYS DATA SET  YM7399
         BZ    REPDCBC1                 TEST FOR CHKPT DATA SET  Y02076
         OI    TABFLG1,TABSYS           IND SUB SYS DATA SET     Y02076
**********************************************************************
*                                                                    *
*              UPDATE SUBSYSTEM SSOB/SSIB                            *
*                                                                    *
**********************************************************************
         L     DEBR,TABVLID4            SET UP DEB ADDRESSABILITYYM7053
         LA    DEBR,D0(DEBR)            ADR ONLY                 Y02076
         L     WRKR6,DEBECBAD           GET ADR OF DCB SINCE     YM5313
         USING IHADCB,WRKR6               DEBDCBAD PTS TO ACB    YM5313
         STCM  DEBR,D7,DCBDEBAD+D1      DEB ADR INTO DCB         YM5313
         L     DCBR,TABDCBAD-D1         GET ACB ADDRESS          YM7337
         MVC   DCBTIOT,DCBTIOT-IHADCB(DCBR) UPDATE TIOT OFFSET   YM7337
         DROP  WRKR6                                             YM5313
         SR    WRKR4,WRKR4                                       Y02076
         LA    WRKR4,DEBBASND           GET END BASIC SECT       Y02076
         LA    WRKR4,D4(WRKR4)          ADR START OF SSIB        Y02076
         ST    WRKR4,RSERAS00           SAVE SSIB ADR            Y02076
         USING SSIB,WRKR4                                        Y02076
         AH    WRKR4,SSIBLEN            POINT TO SSOB            Y02076
         DROP  WRKR4                                             Y02076
         USING SSOB,WRKR4                                        Y02076
         LH    WRKR6,SSOBLEN            SSOB LENGTH=FUN SEC SSOB Y02076
         AR    WRKR6,WRKR4              BEGINNING ADDRESS        Y02076
         STCM  WRKR6,D7,SSOBINDV+D1                              Y02076
         L     WRKR6,RSERAS00           GET ADR OF SSIB          Y02076
         STCM  WRKR6,D7,SSOBSSIB+D1     SSIB STORE IT IN SSOBSSIBY02076
         USING DSAB,WRKR5                                        Y02076
         USING SSIB,WRKR6                                        Y02076
         MVC   SSIBSSNM(D4),DSABSSNM    SUB SYSTEM NAME TO SSIB  Y02076
         L     WRKR4,SSOBINDV                                    Y02076
         USING SSDABGN,WRKR4                                     Y02076
         STCM  DEBR,D7,SSDADEBP+D1      ADDRESS OF DEB TO SSOB   Y02076
         MVC   SSDASSCM(D4),DSABSSCM    SDB PTR INTO SSOB EXT.   YM5360
         DROP  WRKR5                                             YM5360
         L     WRKR5,TABJFCB-D1         GET JFCB ADDRESS         YM5360
         LA    WRKR5,D16(,WRKR5)        POSITION OVER SWA PREFIX YM5360
         ST    WRKR5,SSDAJFCB           STORE IN SSOB EXT.       YM5360
***********************************************************************
*              FOR ALL SECURE CHECKPOINT DATA SET'S AT RESTART TIME   *
*              UPDATE THE REAL USER'S DCB WITH THE NEW DEB ADDRESS    *
*              AND TIOT OFFSET.  IF THE RESTART DATA SET IS FOUND     *
*              INDICATE SUCH IN ITS 48 BYTE ENTRY.                    *
***********************************************************************
REPDCBC1 EQU   *                        INSTR MUST FOLLOW        Y02076
         L     DCBR,TABDCBAD-D1         CURRENT DCB ADR          Y02076
         L     DEBR,TABVLID4            CURRENT DEB ADR          YM7053
         LA    DEBR,D0(DEBR)            ADR ONLY                 Y02076
         LR    WRKR4,DEBR                                        Y02076
         SH    WRKR4,DEBPROFF           ADR DEB PREFIX           Y02076
         USING DEBPREFX,WRKR4                                    Y02076
         L     WRKR4,DEBXTNP            DEB EXTENTION ADR        Y02076
         USING DEBXTN,WRKR4                                      Y02076
         L     WRKR4,DEBXDSAB           DSAB ADDRESS TO BASE REG Y02076
         USING DSAB,WRKR4                                        Y02076
         TM    DSABFLG4,DSABCKDS        CHECK POINT DATA SET     Y02076
         BNO   REPDC04F                 NO  NEXT DCB             Y02076
         CLC   TABDCBAD(D3),RSCKDCB+D1        RS CK PT DATA SET  Y02076
         BNE   REPDCB4X                 NO TEST SECURITY FLAG    Y02076
         OI    TABFLG2,TABRSDS          INDICATE RESTART DATA ST Y02076
REPDCB4X EQU   *                        INSTR MUST FOLLOW        Y02076
         TM    DSABFLG4,DSABCKSI        SEC INTERFACE IN EFFECT  Y02076
         BNO   REPDC04F                 IF NOT, BRANCH           YM7337
         DROP  DCBR                                              YM5313
         USING IHADCB,WRKR2                                      Y02076
         L     WRKR2,TABDCBAD-D1        PROTECTED DCB ADR        Y02076
         AH    WRKR2,USCKPDSA           USERS REAL DCB ADR       Y02076
         L     WRKR2,D0(WRKR2)          DCB ADR                  Y02076
         STCM  DEBR,D7,DCBDEBAD+D1      STORE CURRENT DEB ADR    YM5313
         MVC   DCBTIOT,DCBTIOT-IHADCB(DCBR) UPDATE TIOT OFFSET   YM7337
         SR    WRKR2,WRKR2                                       Y02076
REPDC04F EQU   *                        NEXT DCB                 YM7337
         L     WRKR6,RSTIOTAD           GET TASKS OLD TIOT
         USING DEBPREFX,WRKR3                                    Y02076
         LR    WRKR3,DEBR               LOAD BASE REGISTER       Y02076
         SH    WRKR3,DEBPROFF           OFFSET BACK TO DEB PREFIXY02076
         CLI   DEBAMTYP,VS              VSAM DATA SET            Y02076
         BNE   REPDCBA1                 NEXT DEB & TABL ENT      YM7053
         XC    TABDSORG(TABENT),TABDSORG  ZERO OUT VSAM ENTRY    YM7053
         B     REPDCB4A                 GO GET NEXT DEB          YM7053
REPDCBA1 EQU   *                        INSTR MUST FOLLOW        Y02076
         CLI   DEBAMTYP,IS              IS IT ISAM             @ZA12948
         BNE   REPDCBA5                 NO -NEXT ENTRY         @ZA12948
         TM    DEBFLGS1,DEBCINDI        ISAM CI PROCESSING     @ZA12948
         BNO   REPDCBA5                 NO - NEXT ENTRY        @ZA12948
         XC    TABDSORG(TABENT),TABDSORG XERO ISAM CI ENTRY    @ZA12948
         B     REPDCB4A                 PROCESS NEXT DEB       @ZA12948
REPDCBA5 EQU   *                                               @ZA12948
         LA    CTABLR,TABENT(CTABLR)    INCREMENT TO NXT NTRY    Y02076
REPDCB4A L     DEBR,DEBDEBAD            GET NEXT POSSIBLE DEB ADDR
         LA    DEBR,D0(DEBR)            ADR ONLY                 Y02076
         LTR   DEBR,DEBR                IS IT END OF DEB CHAIN   Y02076
         BNZ   REPDCB01                 BRANCH IF NO             YM7053
         DROP  WRKR2,WRKR4,WRKR6                                 Y02076
*
***********************************************************************
*
*    ALL OPENED DATA SETS HAVE BEEN LOCATED WITHIN NEW TIOT
*
*    THE NEXT SECTION OF CODE WILL ESTABLISH THE WORK AREA WITHIN THE
*    USERS BUFFER THAT WILL BE USED TO PROCESS JFCB(S)
*
*    REGISTERS STILL IN USE AT THIS TIME ARE -
*    TCBR,BUFR,TIOTR,TABLR,DSCNTR,AND BASER. ALL OTHERS MAY BE RESET
*
***********************************************************************
*
         SR    WRKR5,WRKR5              INITIALIZE REGISTER
*
         L     WRKR6,RSSSCR             GET LENGTH OF BUFFER   @ZA24633
         ST    WRKR5,RSSSCR             ZERO SSCR FIELD        @ZA24633
         LA    WRKR3,BUFSEG             SIZE OF A BUFFER SEGMENT
         LR    CTABLR,TABLR             INIT. CURR. ENTRY REG.
*
         DR    WRKR5,WRKR3              COMPUTE NO. SEGMENTS IN BUFFER
*
***********************************************************************
*
*    AT THIS POINT WRKR6 HAS NUMBER OF BUFFER SEGMENTS AVAILABLE TO
*    OVERLAP I/O WITH, WRKR5 HAS REMAINDER OF BUFFER THAT CANT BE USED
*
***********************************************************************
*
         LR    WRKR1,DSCNTR             TOTAL NO. DATA SETS TO PROCESS
         LR    WRKR2,WRKR6              NO. SEGMENTS AVAILABLE TO USE
*
REPDCB05 EQU   *
*
         LR    WRKR4,UCBR               INITIALIZE BEGINNING OF BUFFER
*
REPDCB06 EQU   *
*
         ST    WRKR4,0(,WRKR4)          DUMP AND MOVE SEGMENT    M3408
         MVC   TABSEGAD(3),1(WRKR4)     ADDR TO PRESERVE TABFLG1 M3408
         LA    CTABLR,TABENT(CTABLR)    INCREMENT TO NEXT ENTRY
*
         BCT   WRKR1,REPDCB07           PROCESS ALL DATA SETS
*
*    THIS RTN WILL FLAG THE LAST TABL ENTRY WITH A X'08' IN TABFLG1   *
*
         LA    WRKR2,TABENT
         SR    CTABLR,WRKR2
         OI    TABFLG1,TABLAST          FLAG LAST ENTRY
         LR    WRKR3,WRKR6              LOAD NO. OF SEGMENTS     M34083
*                                       INTO WRKR                M3408
         B     REPDCBEX                 FINISH PROCESSING        M3408
*
REPDCB07 EQU   *
*
         LA    WRKR4,0(WRKR4,WRKR3)     INCREMENT TO NEXT SEGMENT
         BCT   WRKR2,REPDCB06           BUFFER SEGMENT AVAILABLE BRANCH
*
         LR    WRKR2,WRKR6              INITIALIZES NO. BUFFER SEGMENTS
         B     REPDCB05                 CONTINUE TO SET UP TABLE
*
REPDCBER EQU   *
*
         MVC   RSPPM+4(2),ERREXIT       SET RESTART EXIT LOAD ID M3408
         MVC   RSREGSAV(8),MODID        SAVE NAME OF MOD. THAT @ZSUT222
*                                       DETECTED THE ERROR     @ZSUT222
         STM   0,15,RSREGSAV+8          SAVE CURRENT REGISTERS @ZSUT222
*
REPDCBEX EQU   *
*
         LA    WRKR6,RSPPM+8            SET UP FOR XCTL          A26097
         LR    WRKR2,BUFR               POINT REG 1 TO THE RESTART W/A
*
***********************************************************************
*
         XCTL  EPLOC=RSPPM,SF=(E,(15))                           A26097
*
*********************************************************************
*
*     CONSTANTS USED IN REPI/O
*
NORMALXT DC    C'IGC0G95B'              TABLE COMPLETION LOAD ID M3408
MODID    DC    CL8'IGC0G05B'            MODULE ID              @ZSUT222
ERREXIT  DC    C'V0'                    RESTART EXIT LOAD ID     M3408
SSCRLNGT DC    H'4096'                  SSCR BUFR LNGTH          Y02076
DEBPROFF DC    H'16'                    OFFSET FOR DEB PREFIX    Y02076
USCKPDSA DC    H'-4'                    OFFSET FOR USER CKP D SETY02076
DSABCHNE DC    X'000000'                DSAB END OF CHAIN MASK   Y02076
*                                                                     *
*        MAINTENANCE SPACE                                       Y01909
*                                                                     *
PATCH    DC    XL((*-IGC0G05B)/20)'00'   FIVE PERCENT SPACE      Y01909
*                                                                     *
         EJECT
         IEZJSCB
         EJECT
         IEEVRSWA VER=3                 USE AOS2 VERSION OF WA
         EJECT
RSDSECT  DSECT
*
*    DATA EXTENT BLOCK
*
RSDEB    DS    0CL48
RSDEBTCB DC    X'00000000'              TCB ADDRESS
RSDEBDEB DC    X'00000000'              DEB ADDRESS
*
*    DATA CONTROL BLOCK
*
RSDEBOFL DS    0CL1
RSDEBIRB DC    X'00000000'              IRB ADDRESS
RSDEBSYS DC    X'00000000'              1ST IOB ADDR IN SYS.PURGE CHAIN
RSDEBUSR DC    X'00000000'              1ST IOB ADDR IN USER PRGE CHAIN
RSDEBECB DC    X'00000000'              PARM.LIST ADDR TO PURGE ECB
RSDEBID  DS    0CL1
RSDEBDCB DC    AL4(RSDCBREP)            DCB ADDR
RSDEBAPP DS    CL4                      I/O APPENDAGE VECTOR TABLE
RSDEBMOD DS    0CL1
RSDEBUCB DS    F                        UCB ADDRESS
RSDEBBIN DS    H                        BIN NUMBER
RSDEBSCC DS    H                        CYLINDER START ADDRESS
RSDEBSHH DS    H                        TRACK START ADDRESS
RSDEBECC DS    H                        CYLINDER END ADDRESS
RSDEBEHH DS    H                        TRACK END ADDRESS
RSDEBNTR DS    H                        NO. OF TRACKS IN THIS EXTENT
*
*    EVENT CONTROL BLOCK
*
RSECBAD  DS    CL4                      ECB ADDRESS
RSDCBDEB DC    AL4(RSDEB)               DEB ADDRESS
*
RSDCBREP EQU   RSDEB+8                  POINT TO RELATIVE BEGINNING DCB
*
*    INPUT OUTPUT BLOCK
*
RSIOB    DS    0CL40
RSIOBFG1 DC    X'00'                    I/O FLAGS BYTE 1
RSIOBFG2 DC    X'00'                    I/O FLAGS BYTE 2
RSIOBSN1 DS    CL1                      FIRST SENSE BYTE
RSIOBSN2 DS    CL1                      SECOND SENSE BYTE
RSIOBECB DC    AL4(RSECBAD)             ECB ADDRESS
RSIOBCSW DS    D                        LAST CSW
RSIOBCPA DS    AL4(RSCCW1)              CHANNEL PROGRAM ADDRESS
RSIOBDCB DS    AL4(RSDCBREP)            DCB ADDRESS
RSIOBRCP DS    CL4                      RESTART ADDRESS FOR IOS
RSIOBINC DS    H                        INCREMENT BLOCK COUNT
RSIOBECT DS    H                        NO. OF ERROR ENTRIES
RSIOBDAD DS    D                        SEEK ADDRESS FOR DA
*
*    CHANNEL PROGRAM
*
RSCCWLST DS    0CL24
RSCCW1   DS    D                        CCW1
RSCCW2   DS    D                        CCW2
RSCCW3   DS    D                        CCW3
*
*    BUFFER SEGMENT FOR EXTERNAL BLOCKS
*
RSBUFSEG DS    0CL176
RSJFCB   EQU   RSBUFSEG
*
***********************************************************************
*
*                  JFCB
*
***********************************************************************
*
JFCBDSNM DS    CL44                         DATA SET NAME
JFCBELNM DS    CL8                          ELEMENT NAME OR VERSION
JFCBTSDM DS    CL1                          TASK SCHEDULER - DATA
*                                            MANAGEMENT INTERFACE BYTE
JFCBSYSC DS    CL13                         SYSTEM CODE
JFCBLTYP DS    CL1                          LABEL TYPE AND USER'S-LABEL
*                                            INDICATOR
         DS    CL1                          NOT USED
JFCBFLSQ DS    CL2                          FILE SEQUENCE NUMBER
JFCBVLSQ DS    CL2                          VOLUME SEQUENCE NUMBER
JFCBMASK DS    CL8                          DATA MANAGEMENT MASK
JFCBCRDT DS    CL3                          DATA SET CREATION DATE
JFCBXPDT DS    CL3                          DATA SET EXPIRATION DATE
JFCBIND1 DS    CL1                          INDICATOR BYTE 1
JFCBRLSE EQU   64                            BITS 0 AND 1 - EXTERNAL
*                                            STORAGE RELEASE INDICATOR
JFCBLOCT EQU   16                            BITS 2 AND 3 - DATA SET
*                                            HAS BEEN LOCATED
JFCBNEWV EQU   4                             BITS 4 AND 5 - NEW VOLUME
*                                            ADDED TO DATA SET
JFCBPMEM EQU   1                             BITS 6 AND 7 - DATA SET IS
*                                            A MEMBER OF A PODS OR GDG
JFCBIND2 DS    CL1                          INDICATOR BYTE 2
JFCBSTAT EQU   64                            BITS 0 AND 1 - DATA SET
*                                            STATUS (NEW, OLD, OR MOD)
JFCBSCTY EQU   16                            BITS 2 AND 3 - DATA SET
*                                            SECURITY INDICATOR
JFCBUFNO DS    0AL1
JFCBUFRQ DS    AL1                      BUFFER REQUESTED
JFCBFTEK DS    0BL1
JFCBFALN DS    BL1                      BUFFER ALIGNMENT
JFCBUFL  DS    AL2                      BUFFER LENGTH
JFCEROPT DS    BL1                      ERROR ROUTINE
JFCTRTCH DS    0BL1
JFCKEYLE DS    0AL1
JFCMODE  DS    0BL1
JFCCODE  DS    0BL1
JFCSTACK DS    0BL1
JFCPRTSP DS    BL1                      PRINTER SPACING
JFCDEN   DS    BL1                      TAPE DENSITY
JFCLIMCT DS    AL3                      NO. OF TRKS.TO BE SEARCHED
JFCDSORG DS    BL2                      DATA SET ORGANIZATION
JFCRECFM DS    BL1                      RECORD FORMAT
JFCOPTCD DS    BL1                      OPTION CODES
JFCBLKSI DS    AL2                      BLOCK SIZE
JFCLRECL DS    AL2                      LOGICAL RECORD LENGTH
JFCNCP   DS    AL1                      NO. OF CHANNEL PROGRAM
JFCNTM   DS    AL1                      NO. OF TRKS. FOR MASTER INDEX
JFCRKP   DS    AL2                      RELATIVE POSITION OF KEY
JFCCYLOF DS    AL1                      NO. OF TRKS FOR OVERFLOW
JFCDBUFN DS    AL1                      RESERVED
JFCINTVL DS    AL1                      INTENTIONAL INTERVAL
JFCCPRI  DS    BL1                      PRIORITY
JFCSOWA  DS    AL2                      SIZE OF WORKAREA
JFCBNTCS DS    CL1                          NUMBER OF OVERFLOW TRACKS
JFCBNVOL DS    CL1                          NUMBER OF VOLUME SERIAL
*                                            NUMBERS
JFCBVOLS DS    CL30                         VOLUME SERIAL NUMBERS (THE
*                                            FIRST FIVE)
JFCBEXTL DS    CL1                          LENGTH OF BLOCK OF EXTRA
*                                            VOLUME SERIAL NUMBERS
*                                            (BEYOND FIVE)
JFCBEXAD DS    CL3                          TRACK ADDRESS OF BLOCK OF
*                                            EXTRA VOL SERIAL NUMBERS
JFCBPQTY DS    CL3                          PRIMARY QUANTITY OF D.A.
*                                            STORAGE REQUIRED
JFCBCTRI DS    CL1                          INDICATES WHETHER CYLINDERS
*                                            TRACKS, OR RECORDS ARE
*                                            SPECIFIED IN JFCBPQTY AND
*                                            JFCBSQTY
JFCBSQTY DS    CL3                          SECONDARY QUANTITY OF D.A.
*                                            STORAGE REQUIRED
JFCBIND3 DS    CL1                          INDICATOR BYTE 3
JFCBCNTG EQU   64                            BITS 0 AND 1 - CONTIGUOUS
*                                            STORAGE INDICATOR
JFCBMXIG EQU   16                            BITS 2 AND 3 - MAXIMUM
*                                            AVAILABLE EXTENT INDICATOR
JFCBALXI EQU   4                             BITS 4 AND 5 - ALL EXTENTS
*                                            INDICATOR
JFCBRNDC EQU   1                             BITS 6 AND 7 - ROUND
*                                            CYLINDER INDICATOR
JFCBDQTY DS    CL3                          QUANTITY OF D.A. STORAGE
*                                            REQUIRED FOR A DIRECTORY
JFCBSPNM DS    CL3                          CORE ADDRESS OF THE JFCB
*                                            WITH WHICH CYLINDERS ARE
*                                            SPLIT
JFCBABST DS    CL2                          RELATIVE ADDRESS OF FIRST
*                                            TRACK TO BE ALLOCATED
JFCBSBNM DS    CL3                          CORE ADDRESS OF THE JFCB
*                                            FROM WHICH SPACE IS TO BE
*                                            SUBALLOCATED
JFCBDRLH DS    CL3                          AVERAGE DATA RECORD LENGTH
JFCBVLCT DS    CL1                          VOLUME COUNT
JFCBSPTN DS    CL1                          NUMBER OF TRACKS PER
*                                            CYLINDER TO BE USED BY
*                                            THIS DATA SET WHEN SPLIT
*                                            CYLINDER IS INDICATED
JFCBLGTH EQU   176                          LENGTH OF JFCB
JFCBEND  EQU   *
*
         ORG   RSBUFSEG+176             ORG BACK TO BUFFER SEGMENT
RSSTATUS DS    0CL8
RSSTAT1  DS    CL1                      STATUS BYTE 1
RSSTAT2  DS    CL1                      STATUS BYTE 2
RSSTAT3  DS    CL1                      STATUS BYTE 3
RSSTAT4  DS    CL1                      STATUS BYTE 4
         DS    F                        RESERVED FOR FUTURE USE
         EJECT
CVT      DSECT
         CVT
         EJECT
         IHAQDB                                                  Y02076
         EJECT
*
*
*   TASK CONTROL BLOCK
*
*
         IKJTCB                                                  Y02076
         EJECT
         DCBD  DSORG=PS
         EJECT
         IEZDEB                                                  Y02076
         EJECT
         IHADSAB                                                 Y02076
         EJECT
         IEFJSSOB (DA),CONTIG=YES                                Y02076
         EJECT
         IEFJSSIB                                                Y02076
         EJECT
         IHJDSTAB                                                Y02076
         EJECT
TIOT     DSECT
         IEFTIOT1
         EJECT
SRT      DSECT
         IEFUCBOB
*
*
*
         END
