         TITLE 'IGC0H05B - DUMMY DATA SET PROCESSOR'
IGC0H05B CSECT
***********************************************************************
*
*
*          RELEASE 22 DELETIONS/CHANGES
*          RELEASE 21 DELETIONS/CHANGES
*          RELEASE 20 DELETIONS/CHANGES
*0930                                                            A38814
*0930                                                            20201
*
*                                                                A28676
*          RELEASE 3.7 CHANGES ADDITIONS DELETIONS
*C224000,A225100-225200                                        @ZA17960
* APAR OZ31485 HAS BEEN FLAGGED AS @ZSUT222                    @ZSUT222
*C188000,188300,308000,308010,308040                           @ZSUT222
*A308116-308124,440200                                         @ZSUT222
*
*TITLE         IGC0H05B----DUMMY DATA SET PROCESSOR
*
*STATUS CHANGE LEVEL 002
*
*FUNCTION/OPERATION- IGC0H05B RECEIVES CONTROL FROM IGC0I05B WHEN
*              AN ENTRY IN THE REPIO TABLE CORRESPONDS TO A DUMMY
*              DATA SET.
*
*              IGC0H05B EXAMINES EACH ENTRY IN THE REPIO TABLE.
*              IF AN ENTRY CORRESPONDS TO A NON-DUMMY DATA SET
*              OR TO A DATA SET THAT WAS DUMMY AT RESTART IT IS
*              IGNORED.
*
*              IF AN ENTRY CORRESPONDS TO A DUMMY DATA SET THAT
*              WAS NOT DUMMY AT RESTART TIME, THE DATA SET
*              ORGANIZATION AT CHECKPOINT TIME IS CHECKED.  IF
*              THE DATA SET WAS NOT EITHER A BSAM OR QSAM DATA
*              SET, THE ACCESS METHODS LOADED BY OPEN ARE DELETED,
*              THE DEB IS UNCHAINED AND FREED AND AN ERROR CODE OF
*              79 IS PLACED IN THE RESTART WORK AREA.
*              THIS SAME ERROR PROCEDURE IS FOLLOWED IF THE CHECKPOINT
*              AT WHICH RESTART IS OCCURRING WAS TAKEN IN AN
*              END OF VOLUME EXIT FOR A DATA SET THAT HAS BEEN
*              MADE DUMMY
*
*              IF A QSAM OR BSAM DATA SET HAS BEEN MADE DUMMY
*              IGC0H05B DOES THE FOLLOWING:
*               1. DELETES ACCESS METHODS LOADED BY OPEN
*                  (EXCEPT FOR SUBSYSTEM DATA SETS).
*
*               2. UNCHAINS AND FREES THE DEB
*
*               3. FREES IOBS CREATED BY OPEN (SEE NOTES)
*                  (EXCEPT FOR SUBSYSTEM DATA SETS).
*               4. GETMAIN FOR A DUMMY DEB, STORES ITS ADDRESS IN
*                  THE DCB AND ADDS THE DEB TO THE DEB CHAIN
*                  (SEE NOTES)
*
*               5. LOADS DUMMY ACCESS METHOD IGG019AV AND SETS
*                  APPROPRIATE POINTERS TO IT IN THE DCB (SEE NOTES)
*
*ENTRY POINTS  IGC0H05B VIA XCTL FROM IGC0I05B
*
*INPUT-        REGISTER 1   ADDRESS OF RESTART WORK AREA (TSTWA DSECT)
*              REGISTER 8   ADDRESS OF THE FIRST TABLE ENTRY
*
*OUTPUT-       SAME AS REGISTER 1 AND 8 ABOVE
*
*EXITS-NORMAL- IGC0K05B IF A NON-DA DATA SET IS PRESENT
*              IGC0M05B IF ALL DATA SETS ARE DA RESIDENT
*
*      ERROR-  IGC0V05B
*                 079 - IF A DATA SET THAT WAS NOT A QSAM OR BSAM
*                       DATA SET HAS BEEN MADE DUMMY OR IF THE
*                       CHECKPOINT AT WHICH RESTART IS OCCURRING
*                       WAS TAKEN IN AN END OF VOLUME EXIT FOR A
*                       DATA SET THAT HAS BEEN MADE DUMMY.
*                 080 - IF AN ISAM/VSAM CI DATA SET HAS BEEN
*                       MADE DUMMY AT RESTART TIME.
*
*SVCS USED: GETMAIN,FREEMAIN,DELETE,LOAD,XCTL
*
*CONTROL BLOCKS REFERENCED- DCB,DEB,TCB,TIOT,CVT
*
*TABLES/WORK AREAS
***********************************************************************
*                                                                     *
*    THE FOLLOWING IS A DESCRIPTION OF THE 48 BYTE TABLE ENTRY THAT   *
*    IS USED IN THE RESTART PORTION OF CHECKPOINT/RESTART.  EACH      *
*    ENTRY IN THE TABLE (ONE FOR EACH OPEN DATA SET AT CHECKPOINT)    *
*    IS 48 BYTES LONG.                                                *
*                                                                     *
***********************************************************************
*
*        ------------------- 4 BYTES -----------------
*
*      0 +++++++++++++++++++++++++++++++++++++++++++++
*        +DATA SET  +           DCB                  +
*        + ORGN.    +         ADDRESS                +
*        +++++++++++++++++++++++++++++++++++++++++++++ 4
*        +FLAG BYTE +    WORKAREA SEGMENT            +
*        + NO. 1    +         ADDRESS                +
*      8 +++++++++++++++++++++++++++++++++++++++++++++
*        +NUMBER    +         JFCB TTR               +
*        + OF VOLS  +         ADDRESS                +
*        +++++++++++++++++++++++++++++++++++++++++++++ 12
*
*     12 +++++++++++++++++++++++
*        +TAPE LABL + FILE SEQ +        DEVICE = TAPE
*        +INFO BYTE + NUMBER   +
*        +++++++++++++++++++++++
*
*     12 +++++++++++++++++++++++
*        +    OLD   TIOT       +        DA AND UNIT RECORD
*        +      OFFSET         +
*        +++++++++++++++++++++++
*
*                              +++++++++++++++++++++++
*                              +FLAG BYTE +FLAG BYTE +
*                              +  NO. 2   +  NO. 3   +
*     16 +++++++++++++++++++++++++++++++++++++++++++++
*        +FLAG BYTE +FLAG BYTE +                     +
*        + NO. 4    + NO. 5    +   VOLUME ID NO. 1   +
*        +++++++++++++++++++++++                     + 20
*        +                                           +
*        +                                           +
*     24 +++++++++++++++++++++++++++++++++++++++++++++
*        +                                           +
*        +   VOLUME ID NO. 2                         +
*        +                     +++++++++++++++++++++++ 28
*        +                     +                     +
*        +                     +   VOLUME ID NO. 3   +
*     32 +++++++++++++++++++++++                     +
*        +                                           +
*        +                                           +
*        +++++++++++++++++++++++++++++++++++++++++++++ 36
*        +                                           +
*        +   VOLUME ID NO. 4                         +
*     40 +                     +++++++++++++++++++++++
*        +                     +                     +
*        +                     +                     +
*        +++++++++++++++++++++++   VOLUME ID NO. 5   + 44
*        +                                           +
*        +                                           +
*        +++++++++++++++++++++++++++++++++++++++++++++ 48
*
*
*           A  DCBTABLE,
*
*           B  BUFFER AREA,
*
*           C  SEE DSECTS AT END OF LISTING.
*
*ATTRIBUTES
*
*          A RE-ENTRANT
*          B RE-USABLE
*          C ENABLED
*          D PRIVILEGED
*
*NOTES         THE CODE THAT FREES THE IOBS IS TAKEN FROM CLOSE
*              MODULE IGG0201B
*
*              THE CODE THAT CREATES THE DUMMY DEB AND SETS POINTERS
*              TO IGG019AV IS TAKEN FROM OPEN MODULE IGG0191C
*
*********************************************************************
         EJECT
***********************************************************************
*
*    REGISTER CONVENTION TO BE USED THRU-OUT REPI/O PHASE
*
***********************************************************************
*
WRKR1    EQU   0                        WDRK/PARAMETER REGISTER
WRKR2    EQU   1                        WDRK/PARAMETER REGISTER
DCBR     EQU   2                        CURRENT DCB REGISTER
BASER    EQU   3                        BASE REGISTER
DEBR     EQU   4                        CURRENT DEB REGISTER
UCBR     EQU   5                        CURRENT UCB REGISTER
TIOTR    EQU   6                        NEW TIOT REGISTER
TCBR     EQU   7                        TCB REGISTER
TABLR    EQU   8                        BEGINNING TO DCB TABLE REG
CTABLR   EQU   9                        CURRENT ENTRY IN DCB TABLE
BUFR     EQU   10                       USER BUFFER AREA
DSCNTR   EQU   11                       WORK REGISTER
WRKR3    EQU   12                       WORK REGISTER
WRKR4    EQU   13                       WORK REGISTER
WRKR5    EQU   14                       WORK/PARAMETER REGISTER
WRKR6    EQU   15                       WORK/PARAMETER REGISTER
         EJECT
***********************************************************************
*
*    OFFSETS TO BE USED IN REPI/O PHASE
*
***********************************************************************
*
IS       EQU   X'80'                    INDEXED SEQUENCIAL
PS       EQU   X'40'                    PHYSICAL SEQUENCIAL
DA       EQU   X'20'                    DIRECT ACCESS
PO       EQU   X'02'                    PARTITIONED ORGANIZATION
INOROUT  EQU   X'40'                    SYSIN OR SYSOUT DATA SET
DADEV    EQU   X'20'                    DA DEVICE
TPDEV    EQU   X'10'                    TAPE DEVICE
UNITREC  EQU   X'04'                    UNIT RECORD EQUIPMENT
ERRINNSL EQU   X'80'                    ERROR IN NSL ROUTINE
NSLMTSW  EQU   X'40'                    NSL MOUNT SWITCH
NSLCOMU  EQU   X'20'                    NSL COMMUNICATION BIT
BYPASS   EQU   X'10'                    BYPASS LABEL PROCESSING
NSL      EQU   X'04'                    NON-STANDARD LABEL
SL       EQU   X'02'                    STANDARD LABEL
NL       EQU   X'01'                    NO LABEL
GTR5VOL  EQU   X'80'                    GREATER THAN 5 VOLUMES
POCONCAT EQU   X'40'                    P.O. CONCATENATED
DAFLAG   EQU   X'80'                    DA DATA SET FLAG
NONDAFLG EQU   X'40'                    NON-DA DATA SET FLAG
NSLFLAG  EQU   X'10'                    NSL ROUTINE FLAG
TYPERST  EQU   X'80'                    IMMEDIATE RESTART
TABENT   EQU   48                       TABLE ENTRY LENGTH
WRITE    EQU   X'01'                    WRITE ON TAPE
READ     EQU   X'02'                    READ FOR TAPE
NOPOP    EQU   X'03'                    NOP
SENSE    EQU   X'04'                    SENSE
REWIND   EQU   X'07'                    REWIND
READBACK EQU   X'0C'                    READBACK
UNLOAD   EQU   X'0F'                    REWIND AND UNLOAD
WTM      EQU   X'1F'                    WRITE TAPE MARK
BSFOP    EQU   X'2F'                    BACKWARD SPACE FILE
FSFOP    EQU   X'3F'                    FORWARD SPACE FILE
SEARCH   EQU   X'31'                    SEARCH
SRCHCNT  EQU   X'05'                    COUNT FOR SEARCH ID
TIC      EQU   X'08'                    TIC
READDA   EQU   X'06'                    READ FOR DA
LENJFCB  EQU   X'B0'                    LENGTH OF JFCB
LBLLEN   EQU   X'50'                    LENGTH OF LABEL
PERMERR  EQU   X'7F'                    PERMANENT ERROR
ERR24    EQU   24                       I/O ERROR IN READING IN JFCB
BUFSEG   EQU   304
TIOTBASE EQU   24
TTROFFST EQU   12
BUSY     EQU   X'80'
ISORDA   EQU   IS+DA                    IS OR DA
IOERROR  EQU   X'20'                    PERMANENT I/O ERROR
NODIOERR EQU   X'3F'
TIMES16  EQU   4
DADEVICE EQU   4
BASICLN  EQU   32
ISAM     EQU   X'80'
QSAMBSAM EQU   X'40'
EXCP     EQU   X'80'
BUFAD    EQU   0                   BCB 1ST BUFFER ADDR OFFSET    A38814
BUFLG    EQU   4                   BCB FLAG OFFSET               A38814
SPANFLAG EQU   X'80'               SPAN RECORD FLAG              A38814
K1       EQU   1
K2       EQU   2
K3       EQU   3
K4       EQU   4
K5       EQU   5
K6       EQU   6
K7       EQU   7                   CONSTANT OF 7                 YM7303
K8       EQU   8
K9       EQU   9                   CONSTANT OF 9                 YM7303
K10      EQU   10
K12      EQU   12
K13      EQU   13                  CONSTANT OF 13                YM7303
K16      EQU   16
K20      EQU   20
K21      EQU   21                  CONSTANT OF 21                YM7303
K24      EQU   24                  CONSTANT OF 24                YM7828
K25      EQU   25                  CONSTANT OF 25                YM7828
K28      EQU   28
K30      EQU   30
K32      EQU   32
K36      EQU   36
K46      EQU   46
K48      EQU   48
K60      EQU   60
K61      EQU   61
K70      EQU   70
QSAMB    EQU   1
FIRSTIOB EQU   1
PCIB     EQU   X'04'
DUMYDBLN EQU   56                  CONSTANT FOR DUMMY DEB SIZE   YM7341
READB    EQU   X'20'
WRITEB   EQU   X'20'
QOUT     EQU   X'40'
LOCATEB  EQU   8
ERR079   EQU   79                       DUMMY D/S ERROR        @ZSUT222
ERR080   EQU   80                       ISAM/VSAM CI ERROR     @ZSUT222
TIMES2   EQU   1
TIMES4   EQU   2
TIMES8   EQU   3
BDAMDS   EQU   X'20'
EOVEXIT  EQU   X'02'
*
*                                       RECORD READY CONSTANTS
*
CPSTART EQU 48                          OFFSET OF BEGIN OF CP    20201
ONECCW   EQU   8                        LENGTH OF ONE CCW        20201
TWOCCWS  EQU   16                       LENGTH OF TWO CCW'S      20201
SETSECTR EQU   X'23'                    COMMAND CODE FOR SET     20201
*                                       SECTOR                   20201
NOTUPDTE EQU   X'0B'                    MASK FOR NON UPDATE      20201
UPDMASK  EQU X'04'                      MASK FOR UPDATE          20201
NINE     EQU   9                        CONSTANT OF 9            20201
THREE    EQU   3                        CONSTANT OF 3            20201
PCISTART EQU   56                       BEGIN OF PCI CP          20201
*
*
***********************************************************************
         EJECT
         BALR  BASER,0             ESTABLISH ADDRESSABILITY
         USING *,BASER             ESTABLISH BASE REGISTER
         B     BEGIN               BRANCH AROUND EYE CATCHER     Y01909
         CNOP  0,8                 ALIGN TO A DBL WORD BOUNDARY  Y01909
         DC    CL8'IGC0H05B'       MODULE NAME                 @ZSUT222
         DC    CL8'&SYSDATE'       LAST DATE SHIPPED           @ZSUT222
         DC    CL8'@ZSUT222'       LAST CODE SHIPPED           @ZSUT222
BEGIN    EQU   *                                                 Y01909
*
         USING IHADCB,DCBR
         USING UCBOB,UCBR
         USING RSDSECT,WRKR4
         USING TIOENTRY,WRKR5
         USING DEBBASIC,DEBR
         USING TCB,TCBR
         USING TABL,CTABLR
         USING RSTWA,BUFR
*
         LR    CTABLR,TABLR        POINT TO START OF TABLE
         XC    RSRETCOD,RSRETCOD   CLEAR ERROR INDICATORS
REPDCB10 EQU   *
         TM    TABFLG1,TABNULL     IS THIS A DUMMY DATA SET      Y02076
         BO    REPDCB25            BRANCH IF YES
REPDCB20 EQU   *
         TM    TABFLG1,TABLAST     LAST ENTRY                    Y02076
         BO    REPDCB80            BRANCH IF YES
         LA    CTABLR,TABENT(CTABLR)   NEXT ENTRY
         B     REPDCB10            GO PROCESS IT
REPDCB25 EQU   *
         L     DCBR,TABDCBAD-1     LOAD DCB ADDRESS
         L     DEBR,DCBDEBAD       LOAD DEB ADDRESS
         SPACE 4
****
*        CHECK TO SEE IF THE DATA SET WAS DUMMY AT CHKPT TIME.
*        IF IT WAS, GET NEXT TABLE ENTRY.
****
         SPACE 2
         TM    TABFLG2,TABOSSDS    WAS DS SUBSYS AT CHKPT TIME   YM7399
         BZ    REPDCB28            IF NOT, BRANCH                YM7399
         L     WRKR2,DEBECBAD      GET USER'S DCB ADDRESS        YM7399
         MVC   DCBTIOT-IHADCB(2,WRKR2),DCBTIOT UPDATE USER'S DCB YM7399
         MVC   DCBDEBAD+1-IHADCB(3,WRKR2),DCBDEBAD+1 TIOT OFFSET YM7399
*                                  AND DEB ADDR FROM SUBSYS ACB  YM7399
         LR    DCBR,WRKR2          UPDATE THE WORKING DCB ADDR   YM7399
         B     REPDCB40            GO PROCESS SUBSYSTEM DUMMY    YM7828
REPDCB28 EQU   *                   NON-SUBSYSTEM ENTRY           YM7399
         CLC   DEBDEVED(2),LOADNAME+6  WAS OLD DS DUMMY ?      @ZA17960
         BE    REPDCB20            BRANCH IF YES
         CLI   DEBEXSCL,0          DUMMY DATASET ?             @ZA17960
         BE    REPDCB20            BRANCH IF YES               @ZA17960
         TM    TABFLG2,TABCIDS     IS IT ISAM/VSAM(CI)           Y02076
         BO    REPDCB49            TO ERROR IF YES               Y02076
         LA    WRKR2,DEBBASIC-DEBPREFX NEG OFFSET TO DEB PREFIX  YM7828
         LNR   WRKR2,WRKR2         SET IT NEG FOR ADD            YM7828
         AR    WRKR2,DEBR          GET DEB PREFIX ADDR           YM7828
         USING DEBPREFX,WRKR2      ADDRESS DEB PREFIX            YM7828
         L     WRKR2,DEBXTNP       GET DEB EXTENSION ADDR        YM7828
         USING DEBXTN,WRKR2        ADDRESS DEB EXTENSION         YM7828
         L     WRKR2,DEBXDSAB      GET DSAB ADDRESS              YM7828
         USING DSAB,WRKR2          ADDRESS DSAB                  YM7828
         MVC   RSERAS01(K1),DSABFLG4 SAVE CHKPT DS FLAGS         YM7828
         NI    DSABFLG4,X'FF'-DSABCKDS-DSABCKSI RESET CHKPT FLGS YM7828
         DROP  WRKR2               DSAB                          YM7828
         CLI   DEBNMSUB,0          ANY SUBROUTINES LOADED
         BE    REPDCB39            BRANCH IF NO
         SPACE 4
****
*        THE NEXT SECTION OF CODE LOCATES THE SUBROUTINE NAME
*        SECTION OF THE DEB.
****
         LA    WRKR2,BASICLN       LENGTH OF BASIC SECTION
         CLI   DEBEXSCL,DADEVICE   DIRECT ACCESS DEVICE
         BNE   REPDCB32            BRANCH IF NO
         OI    TABFLG1,TABDA       SET TEMPORARY DA SW           YM7550
         SR    WRKR1,WRKR1         CLEAR WRKR1
         IC    WRKR1,DEBNMEXT      GET NUMBER OF EXTENTS
         SLL   WRKR1,TIMES16       MULTIPLY BY 16 TO GET NUMBER
*                                  OF BYTES
         AR    WRKR2,WRKR1         POINT TO ACCESS METHOD SECTION
         B     REPDCB34            SKIP TAPE-UNIT RECORD CODE
REPDCB32 EQU   *
         LA    WRKR2,K4(WRKR2)     POINT TO ACCESS METHOD SECTION
*                                  (TAPE-UNIT RECORD DEVICE
*                                  DEPENDANT SECTION IF FOUR
*                                  BYTES IN LENGTH)
REPDCB34 EQU   *
         SR    WRKR1,WRKR1         CLEAR WRKR1
         IC    WRKR1,DEBAMLNG      GET LENGTH OF ACCESS METHOD
*                                  SECTION OF DEB
         TM    TABDSORG,DCBDSGDA   BDAM DATA SET                 Y02049
         BZ    REPDCB36            BRANCH IF NO
         SLL   WRKR1,TIMES4        MULTIPLY BY 4 TO GET LENGTH IN BYTES
REPDCB36 EQU   *
         AR    WRKR2,WRKR1         GET OFFSET TO BEGINNING
*                                  OF ACCESS METHOD NAMES
         SPACE 4
****
*        THIS SECTION OF CODE DELETES SUBROUTINES LOADED BY OPEN
****
         SPACE 2
         LA    DEBR,0(DEBR)        CLEAR HIGH ORDER BYTE OF DEBR
         LA    WRKR3,0(WRKR2,DEBR) POINT TO BEGINNING OF ACCESS
*                                  METHOD SECTION
         SR    WRKR5,WRKR5         CLEAR WRKR5
         IC    WRKR5,DEBNMSUB      GET NUMBER OF SUBROUTINES
         SLL   WRKR5,TIMES2        MULTIPLY BY TWO
         AR    WRKR5,WRKR2         GET OFFSET TO END OF DEB
         LA    DSCNTR,0(DEBR,WRKR5) POINT TO END OF DEB
         LR    UCBR,BUFR           SAVE RSWA ADDR
         LA    BUFR,K2             CONSTANT 2
         SR    DSCNTR,BUFR         POINT TO LAST SUBROUTINE NAME
         MVC   TABVLID1(K6),LOADNAME   MOVE IGG019 TO W.A.
REPDCB38 EQU   *
         MVC   TABVLID2(K2),0(WRKR3)   SET LAST TWO BYTES OF
*                                  SUBROUTINE NAME FROM DEB
         DELETE    EPLOC=TABVLID1  DELETE SUBROUTINE
         BXLE  WRKR3,BUFR,REPDCB38 DELETE REST OF MODULES
         LR    BUFR,UCBR           RESTORE RSWA ADDR
REPDCB39 EQU   *
         TM    RSERAS01,DSABCKDS+DSABCKSI CHKPT S/I EXIST        YM7828
         BNO   REPDCB40            IF NOT, SKIP S/I DELETION     YM7828
         MVC   TABVLID1(K6),LOADNAME SETUP TO DELETE S/I ERROR   YM7828
         MVC   TABVLID2(K2),IGG019SI ROUTINE (IGG019SI)          YM7828
         DELETE EPLOC=TABVLID1     DELETE IT                     YM7828
*                                                                YM7828
*        FREEMAIN THE CHECKPOINT PROTECTED DCB                   YM7828
*                                                                YM7828
         LA    DCBR,0(,DCBR)       CLEAR BYTE 0 OF DCB ADDR      YM7828
         LA    WRKR2,K28           GET NEG OFFSET TO START OF    YM7828
         LNR   WRKR2,WRKR2         PROTECTED DCB PREFIX          YM7828
         AR    WRKR2,DCBR          GET ADDR OF DCB PREFIX        YM7828
         ICM   DCBR,B'0111',K25(WRKR2) GET USER'S DCB ADDR       YM7828
         STCM  DCBR,B'0111',TABDCBAD UPDATE TABLE ENTRY          YM7828
         SR    WRKR1,WRKR1         CLEAR FREEMAIN PARM REG       YM7828
         ICM   WRKR1,B'0001',K24(WRKR2) GET FREEMAIN LENGTH      YM7828
         ICM   WRKR1,B'1000',SP252 GET SUBPOOL 252 ID            YM7828
         FREEMAIN R,LV=(0),A=(1)   FREE IT                       YM7828
         EJECT
****
*        THE FOLLOWING SECTION OF CODE UNCHAINS AND DELETES
*        THE DEB
****
         SPACE 2
REPDCB40 EQU   *
         L     TCBR,RSTCBAD        LOAD TCB ADDRESS
         LA    DEBR,0(DEBR)        CLEAR HIGH BYTE OF DEBR
         L     WRKR2,RSINT         LOAD ADDR OF 1ST DEB
         LA    WRKR2,0(WRKR2)      CLEAR HIGH ORDER BYTE
         CR    WRKR2,DEBR          IS THIS THE FIRST DEB
         BNE   REPDCB42            BRANCH IF NO
         MVC   RSINT+1(K3),DEBDEBAD+1   DELETE DEB FROM CHAIN
         B     REPDCB46            GO FREE DEB CORE
REPDCB42 EQU   *
         CLC   K5(K3,WRKR2),DCBDEBAD+1 DOES THIS DEB POINT TO DEB
*                                      THAT IS TO BE FREED
         BE    REPDCB44            BRANCH IF YES
         L     WRKR2,K4(WRKR2)     GET ADDRESS OF NEXT DEB
         B     REPDCB42            GO CHECK NEXT DEB
REPDCB44 EQU   *
         MVC   K5(K3,WRKR2),DEBDEBAD+1 UNCHAIN DEB BY RESETTING
*                                  DEB POINTER IN PREVIOUS DEB
REPDCB46 EQU   *                   INSTR MUST FOLLOW             Y02076
         LR    WRKR5,DEBR          GET DEB ADDR                  Y02076
         LA    WRKR6,DEBPRFLN      GET PREFIX LENGTH             Y02076
         SR    WRKR5,WRKR6         CALC ADDR OF DEB PREFIX       Y02076
         USING DEBPREFX,WRKR5                                    Y02076
         MVC   RSERAS00(1),DEBPROTG SAVE KEY AND ID              YM7879
         MVC   RSERAS00+1(1),DEBOPATB SAVE OPEN ATTRIBUTES       YM7879
         L     WRKR6,DEBXTNP       GET DEB EXTENTION PTR         Y02076
         ST    WRKR6,TABVLID5+K2   SAVE FOR LATER RESTORE        Y02076
         DROP  WRKR5                                             Y02076
         SR    WRKR6,WRKR6         CLEAR REG                     20201
         TM    DEBOPATB,UPDMASK    UPDATE BIT ON                 20201
         BNO   REPDC603            BRANCH IF NO                  20201
         TM    DEBOPATB,NOTUPDTE   ANY BITS OTHER THAN           20201
*                                  UPDATE                        20201
         BNZ   REPDC603            BRANCH IF YES                 20201
         LA    WRKR6,K1            SET THE INDICATOR REG         YM7341
REPDC603 EQU   *                   INSTR MUST FOLLOW             20201
         LA    WRKR2,K36           LENGTH OF DEB PREFIX
         SR    DEBR,WRKR2          POINT TO BEGINNING OF DEB
         SR    WRKR1,WRKR1         CLEAR R0
         IC    WRKR1,K32(DEBR)     GET LENGTH OF DEB IN DOUBLE
*                                  WORDS
         SLL   WRKR1,TIMES8        MULTIPLY BY EIGHT TO GET
*                                  LENGTH IN BYTES
         O     WRKR1,SP230         SET SUBPOOL                   YM6586
         LR    WRKR2,DEBR          SET R1 WITH ADDR OF DEB
         TM    TABFLG2,TABOSSDS    IS THIS A SUBSYSTEM D/S       YM7399
         BZ    REPDC613            IF NOT, BRANCH                YM5720
         LA    WRKR2,K28(,WRKR2)   ADJUST TO SUBSYSTEM DEB       YM5720
*                                  PREFIX ADDR (PREFIX=8 BYTES)  YM5720
REPDC613 EQU   *                   FREEMAIN THE DEB              YM5720
         MODESET EXTKEY=DATAMGT    ASSUME DEB KEY                YM6586
         FREEMAIN  R,LV=(0),A=(1)  FREE THE DEB
         MODESET EXTKEY=ZERO       RESUME SUPERVISOR KEY         YM6586
         SPACE 4
****
*        SEE IF DATA SET MADE DUMMY WAS A QSAM OR BSAM DATA SET
*        AT CHECKPOINT TIME.  IF IT WAS NOT  PUT ERROR CODE 79 IN
*        WORK AREA AND GO GET NEXT TABLE ENTRY.
****
         SPACE 2
         TM    TABFLG2,TABOSSDS    IS THIS SUBSYS MADE DUMMY     YM7528
         BO    REPDCB48            IF YES, DSORG IS GOOD         YM7528
         L     WRKR5,TABVLID5+K2   GET DEB EXTENSION POINTER     Y02049
         USING DEBXTN,WRKR5                                      Y02049
         TM    DEBXMCF1,DCBMRECP   IS THIS AN EXCP DATA SET?     Y02049
         BO    REPDCB47            BRANCH IF YES
         TM    DEBXDSO1,DCBDSGPS   QSAM OR BSAM DATA SET         Y02049
         DROP  WRKR5                                             Y02049
         BO    REPDCB48            BRANCH IF YES
REPDCB47 EQU   *
         MVI   RSRETCOD+1,ERR079   SET DUMMY DATA SET ERROR    @ZSUT222
         B     REPDCBER            SAVE THE CURR. ENVIRONMENT  @ZSUT222
         SPACE 4
REPDCB49 EQU   *                   INSTR MUST FOLLOW             Y02076
         MVI   RSRETCOD+K1,ERR080  SET ISAM/VSAM(CI) ERROR     @ZSUT222
REPDCBER MVC   RSREGSAV(8),MODID   SAVE NAME OF MODULE THAT    @ZSUT222
*                                  HAS DETECTED THE ERROR.     @ZSUT222
         STM   0,15,RSREGSAV+8     SAVE CURRENT REGISTERS      @ZSUT222
         B     REPDCB20            GO GET NEXT ENTRY             Y02076
****
*        CHECK TO SEE IF THE CHECKPOINT AT WHICH RESTART IS OCCURRING
*        WAS TAKEN IN AND OF VOLUME EXIT FOR THE DATA SET THAT HAS BEEN
*        MADE DUMMY.  IF IT WAS, AN ERROR CONDITION EXISTS.
****
         SPACE 2
REPDCB48 EQU   *
         TM    DCBOFLGS,EOVEXIT    CHKPT TAKEN IN EOV FOR THIS DATA SET
         BZ    REPDCB47            BRANCH IF YES---ERROR
         SPACE 4
****
*        CHECK TO SEE IF AN ERROR HAS BEEN PREVIOUSLY DETECTED.
*        IF ONE HAS BEEN DETECTED, SKIP FURTHER PROCESSING OF THIS
*        ENTRY.
****
         SPACE 2
         OC    RSRETCOD,RSRETCOD   ANY PREVIOUS ERRORS
         BNZ   REPDCB20            BRANCH IF YES
         EJECT
****
*        THIS SECTION OF CODE FREES IOBS CREATED BY OPEN
****
         SPACE 2
REPDCB50 EQU   *
         TM    TABFLG2,TABOSSDS    TEST IF SUBSYSTEM D/S         YM7399
         BO    REPDCB64            YES-BYPASS FREEING IOBS       Y02076
         XR    WRKR5,WRKR5         CLEAR WRKR5
         XR    WRKR1,WRKR1         CLEAR WRKR1
         XR    WRKR2,WRKR2         CLEAR WRKR2
         IC    WRKR1,DCBIOBL       GET LENGTH OF IOB IN DOUBLE WORDS
         SLL   WRKR1,TIMES8        LENGTH IN BYTES
         IC    WRKR2,DCBNCP        NUMBER OF BSAM CPS
         TM    DCBCIND2,QSAMB      QSAM DATA SET
         BZ    REPDCB52            BRANCH IF NO
         IC    WRKR2,DCBBUFNO      GET NUMBER OF QSAM CPS
REPDCB52 EQU   *
         TM    DCBCIND2,PCIB       CHAINED SCHEDULING
         BO    REPDCB58            BRANCH IF YES
         L     WRKR3,DCBIOBA       LOAD IOB ADDRESS
REPDCB54 EQU   *
         TM    0(WRKR3),FIRSTIOB   IS THIS THE FIRST IOB
         BO    REPDCB60            BRANCH IF YES
         L     WRKR3,0(WRKR3)      GET NEXT IOB
         B     REPDCB54            CONTINUE SEARCH FOR FIRST IOB
REPDCB58 EQU   *
         L     WRKR3,DCBIOBAD      GET MAIN IOB ADDR
         LA    WRKR3,0(WRKR3)      CLEAR HIGH BYTE
         LA    WRKR5,K48           CNST OF 48 FOR MAIN IOB
         TM    TABFLG1,TABDA       USING DA DEVICE               Y02049
         BZ    REPDCB60            BRANCH IF NO
         LA    WRKR5,K32(WRKR5)    ADD 32 FOR D.A.
         CLI   PCISTART(WRKR3),SETSECTR IS IT RPS                20201
         BNE   REPDCB60            BRANCH IF NO                  20201
         LA    WRKR5,TWOCCWS(WRKR5) ADD ON LENGTH OF TWO         20201
*                                  CCWS                          20201
REPDCB60 EQU   *
         LTR   WRKR2,WRKR2         WERE NUM OF CP'S SPECIFIED
         BH    REPDCB62            BRANCH IF YES
         LA    WRKR2,K1            NO,PROVIDE ONE
         TM    TABFLG1,TABDA       IS DIRECT ACCESS USED         Y02049
         BNO   REPDCB62            BRANCH IF NO                  20201
         CLI   CPSTART(WRKR3),SETSECTR  IS IT RPS                20201
         BNE   REPDCB62            BRANCH IF NO                  20201
         LTR   WRKR6,WRKR6         UPDATE USED                   20201
         BZ    REPDC604            BRANCH NO                     20201
         LA    WRKR6,NINE(WRKR2)   THESE 3 INSTRUCTIONS ARE      20201
         SRL   WRKR6,THREE         NUM OF CHPS + 2               20201
         SLL   WRKR6,THREE         ROUNDED UP TO NEAREST DW      20201
         B     REPDC605            BRANCH                        20201
REPDC604 EQU   *                                                 20201
         LA    WRKR6,ONECCW        EIGHT FOR ONE CCW             20201
REPDC605 EQU   *                                                 20201
         AR    WRKR5,WRKR6         INCREMENT TO ADD SECTOR       20201
*                                  BYTES TO FREEMAIN SIZE
REPDCB62 EQU   *
         MR    WRKR1,WRKR1         NO. OF CP'S * IOB SIZE
         LA    WRKR2,0(WRKR2,WRKR5)    ADD PCI CONSTANTS IF ANY
         LR    WRKR1,WRKR2         LENGTH OF REG 0
         O     WRKR1,SP0           SET SUBPOOL EQUAL TO 0        YM6586
         LR    WRKR2,WRKR3         ADDR TO REG1
         MODESET KEYADDR=RSERAS00,WORKREG=15 ASSUME IOB/CP KEY   YM6586
         FREEMAIN  R,LV=(0),A=(1)
         MODESET EXTKEY=ZERO       RESUME SUPERVISOR KEY         YM6586
         EJECT
****
*        THIS SECTION OF CODE CREATES A DUMMY DEB,
*        LOADS DUMMY MODULE IGG019AV,
*        AND SETS POINTERS TO IT IN THE DCB.
****
         SPACE 2
****                  GET CORE FOR DUMMY DEB
         SPACE 1
REPDCB64 EQU   *
         NI    TABFLG1,X'FF'-TABDA RESET POSSIBLE TEMP DA SW     YM7550
         LA    WRKR1,DUMYDBLN      GET LENGTH OF DUMMY DEB
         O     WRKR1,SP230         SET SUBPOOL                   YM6586
         MODESET EXTKEY=DATAMGT    ASSUME DEB KEY                YM6586
         GETMAIN   R,LV=(0)        GET CORE FOR DUMMY DEB
         MODESET EXTKEY=ZERO       RESUME SUPERVISOR KEY         YM6586
         ST    WRKR2,TABVLID2      STORE ADDR OF GOTTEN CORE
         SPACE 1
****                  FORMAT DUMMY DEB AND STORE ADDR IN DCB
         SPACE 1
         XC    0(DUMYDBLN,WRKR2),0(WRKR2)  CLEAR DUMMY DEB
         USING DEBPREFX,WRKR2                                    Y02076
         MVC   DEBXTNP,TABVLID5+K2 ADR ORIG EXT IN DUMMYDEB      Y02076
         L     WRKR5,DEBXTNP       DEB EXT ADR IN WRKR5          Y02076
         DROP  WRKR2                                             Y02076
         LA    DEBR,K16(WRKR2)     POINT TO ACTUAL DEB
         ST    DEBR,TABVLID2       TEMP SAVE
         MVC   DCBDEBAD+1(K3),TABVLID2+1   MOVE DEB ADDR TO DCB
         LA    DCBR,0(DCBR)        CLEAR HIGH ORDER BYTE OF DCBR
         ST    DCBR,DEBDCBAD       STORE DCB ADDR IN DEB
         MVI   K12(WRKR2),K7       SET DOUBLE WORD CNT IN DEB    YM7341
         MVI   DEBNMSUB,X'01'      SET ACC METH CNT TO 1         YM7879
         MVC   DEBPROTG,RSERAS00   PROT KEY & ID FROM OLD DEB    YM7879
         MVC   DEBOPATB,RSERAS00+1 OPEN ATTRIBUTES FROM OLD DEB  YM7879
         MVC   X'24'(2,DEBR),LOADNAME+6 19AV'S ID TO END OF DEB  YM7879
         USING DEBXTN,WRKR5                                      Y02076
         ST    DEBR,DEBXDBPR       ST DUMMY DEB ADR IN EXT       Y02076
         DROP  WRKR5                                             Y02076
         SPACE 1
****                  ADD DUMMY DEB TO THE DEB CHAIN
         SPACE 1
         L     TCBR,RSTCBAD        LOAD TCB ADDRESS
         MVC   DEBDEBB(3),RSINT+1  CHAIN NEW DEB                 YM7879
         ST    DEBR,RSINT          TO DEB CHAIN
         STCM  TCBR,B'0111',DEBTCBB TCB ADDRESS TO DEB           YM7879
         SPACE
****                  INSURE VALID FIRST-BUFFER-PTR FOR QSAM     A38814
         SPACE
         TM    DCBCIND2,QSAMB      QSAM DATA SET                 A38814
         BZ    REPDC647            BRANCH IF NOT                 A38814
         L     WRKR2,DCBBUFCB      FETCH BUFFER CNTRL BLK PTR    A38814
         LA    WRKR2,0(,WRKR2)     CLEAR HI BYTE                 A38814
         LTR   WRKR2,WRKR2         BUFFER CNTRL BLK PRESENT      A38814
         BZ    REPDC647            BRANCH IF NOT                 A38814
         LA    WRKR3,8(,WRKR2)     GET PTR TO 1ST BUFFER         A38814
         TM    BUFLG(WRKR2),SPANFLAG USING SPAN RECORDS          A38814
         BZ    REPDC643            BRANCH IF NOT                 A38814
         LA    WRKR3,4(,WRKR3)     BUMP 1ST BUFFER PTR BY 4      A38814
REPDC643 EQU   *                                                 A38814
         ST    WRKR3,BUFAD(,WRKR2) 1ST BUFFER PTR TO BCB         A38814
REPDC647 EQU   *                                                 A38814
         SPACE 1
****                  LOAD IGG019AV
         SPACE 1
         MVC   TABVLID1(8),LOADNAME    MODULE NAME OF DUMMY MODULE
         USING CVTMAP,WRKR2                                      Y02076
         L     WRKR2,CVTPTR        LOAD ADDRESS OF CVT
         L     WRKR2,CVTSVDCB      LOAD ADDRESS OF SVCLIB DCB
         DROP  WRKR2                                             Y02076
         LOAD  EPLOC=TABVLID1,DCB=(1)  LOAD IGG019AV
         LR    WRKR3,WRKR1         SAVE ADDR OF MODULE
         EJECT
****
*        THE FOLLOWING CODE SETS THE APPROPRIATE POINTERS IN THE
*        DCB TO DUMMY ACCESS METHOD IGG019AV
****
         SPACE 2
REPDCB65 EQU   *
         MVC   DCBCNTRL+1(K3),K1(WRKR3) SET ADDR OF CNTRL/NOTE/  YM7303
*                                  POINT
         MVC   DCBREAD+1(K3),K1(WRKR3) SET ADDR OF READ/WRITE    YM7303
*                                  /GET/PUT
         MVC   DCBCHECK+1(K3),K13(WRKR3) SET ADDR OF CHECK       YM7303
         MVC   DCBIOBA(K4),K16(WRKR3) MOVE DUMMY IOB ADDR TO DCB YM7303
         TM    DCBMACF1,DCBMRRD    IS THIS BSAM INPUT            YM7528
         BO    REPDCB70            BRANCH IF YES
         TM    DCBMACF2,DCBMRWRT   IS THIS BSAM OUTPUT           YM7528
         BO    REPDCB70            BRANCH IF YES
         TM    DCBMACF2,DCBMRPUT   QSAM OUTPUT                   YM7528
         BZ    REPDCB66            BRANCH IF NO
         TM    DCBMACF2,DCBMRLCP   PUT--LOCATE                   YM7528
         BZ    REPDCB20            BRANCH IF NO--GET NEXT TABLE ENTRY
         MVC   DCBPUT+1(K3),K5(WRKR3) SET ADDR OF DUMMY PUT      YM7303
         B     REPDCB20            GO PROCESS NEXT ENTRY
REPDCB66 EQU   *
         MVC   DCBGET+1(K3),K9(WRKR3) SET ADDR OF DUMMY GET      YM7303
         B     REPDCB20            GO PROCESS NEXT ENTRY
REPDCB70 EQU   *
         MVC   DCBREAD+1(K3),K21(WRKR3) SET READ ADDR IN DCB     YM7303
         B     REPDCB20            GO PROCESS NEXT ENTRY
         EJECT
****
*        THIS SECTION OF CODE XCTLS TO THE NEXT LOAD OF RESTART IF
*        NO ERROR HAS BEEN DETECTED.  THE NEXT LOAD IS DETERMINED
*        BY AN INDICATOR SET IN THE RESTART WORK AREA. THIS INDICATOR
*        IS SET BY IGC0I05B.  IF ALL DATA SETS ARE ON DIRECT ACCESS
*        DEVICES, XCTL IS TO IGC0M05B.  IF ALL DATA SETS ARE NOT ON
*        DIRECT ACCESS DEVICES, XCTL IS TO IGC0K05B.
*
*        IF AN ERROR HAS BEEN ENCOUNTERED IN THIS MODULE, XCTL IS TO
*        IGC0V05B.
*****
         SPACE 2
REPDCB80 EQU   *
         L     WRKR4,K4(TABLR)     INITIALIZE TO FIRST W.A.
         OC    RSRETCOD,RSRETCOD   ANY ERRORS DETECTED
         BZ    REPDCB81            BRANCH IF NO
         MVC   RSJFCB(8),ERORLOAD  SET UP TO XCTL TO IGC0V05B
         B     REPDCB82            GO XCTL
REPDCB81 EQU   *
         MVC   RSJFCB(8),TAPELOAD  MOVE IN TAPE LOAD ID
         TM    RSDCBFLG,NONDAFLG   IS NON DA FLAG ON
         BO    REPDCB82            BRANCH IF YES
         MVC   RSJFCB(8),DALOAD    MOVE IN DA LOAD ID
REPDCB82 EQU   *
         LA    WRKR6,RSJFCB+8      SET UP FOR XCTL
         LR    WRKR2,BUFR          POINT REG 1 TO RESTART WORK AREA
         XCTL  EPLOC=RSJFCB,SF=(E,(15))
         EJECT
*
*     CONSTANTS USED IN REPI/O
*
SIX      DC    H'6'                     OFFSET FOR VOL SEQ NO
ERORLOAD DC    CL8'IGC0V05B'            RESTART EXIT MODULE
TAPELOAD DC    CL8'IGC0K05B'            NON-DA MOUNT/VERIFICATION LOAD
DALOAD   DC    CL8'IGC0M05B'            DA MOUNT/VERIFICATION LOAD
LOADNAME DC    CL8'IGG019AV'
MODID    DC    CL8'IGC0H05B'            MODULE IDENT.          @ZSUT222
IGG019SI DC    CL2'SI'                  LAST 2 CHAR OF S/I MOD   YM7828
         DS    0F
SP0      DC    AL1(0)                                            YM6586
         DC    AL3(0)
SP230    DC    AL1(230)                                          YM6586
         DC    AL3(0)
SP252    DC    AL1(252)                 SUBPOOL 252 ID           YM7828
DEBPRFLN EQU   16                       LENGTH OF DEB PREFIX     Y02076
*                                                                     *
*        MAINTENANCE SPACE                                       Y01909
*                                                                     *
PATCH    EQU   (*-IGC0H05B)/10          LENGTH OF PATCH AREA     Y01909
         DC    XL(PATCH)'00'            TEN PERCENT PATCH AREA   Y01909
*                                                                     *
         EJECT
         IEEVRSWA VER=3                 USE OS/VS2 VERSION OF WA
         EJECT
RSDSECT  DSECT
*
*    DATA EXTENT BLOCK
*
RSDEB    DS    0CL48
RSDEBTCB DC    X'00000000'              TCB ADDRESS
RSDEBDEB DC    X'00000000'              DEB ADDRESS
*
*    DATA CONTROL BLOCK
*
RSDEBOFL DS    0CL1
RSDEBIRB DC    X'00000000'              IRB ADDRESS
RSDEBSYS DC    X'00000000'              1ST IOB ADDR IN SYS.PURGE CHAIN
RSDEBUSR DC    X'00000000'              1ST IOB ADDR IN USER PRGE CHAIN
RSDEBECB DC    X'00000000'              PARM.LIST ADDR TO PURGE ECB
RSDEBID  DS    0CL1
RSDEBDCB DC    AL4(RSDCBREP)            DCB ADDR
RSDEBAPP DS    CL4                      I/O APPENDAGE VECTOR TABLE
RSDEBMOD DS    0CL1
RSDEBUCB DS    F                        UCB ADDRESS
RSDEBBIN DS    H                        BIN NUMBER
RSDEBSCC DS    H                        CYLINDER START ADDRESS
RSDEBSHH DS    H                        TRACK START ADDRESS
RSDEBECC DS    H                        CYLINDER END ADDRESS
RSDEBEHH DS    H                        TRACK END ADDRESS
RSDEBNTR DS    H                        NO. OF TRACKS IN THIS EXTENT
*
*    EVENT CONTROL BLOCK
*
RSECBAD  DS    CL4                      ECB ADDRESS
RSDCBDEB DC    AL4(RSDEB)               DEB ADDRESS
*
RSDCBREP EQU   RSDEB+8                  POINT TO RELATIVE BEGINNING DCB
*
*    INPUT OUTPUT BLOCK
*
RSIOB    DS    0CL40
RSIOBFG1 DC    X'00'                    I/O FLAGS BYTE 1
RSIOBFG2 DC    X'00'                    I/O FLAGS BYTE 2
RSIOBSN1 DS    CL1                      FIRST SENSE BYTE
RSIOBSN2 DS    CL1                      SECOND SENSE BYTE
RSIOBECB DC    AL4(RSECBAD)             ECB ADDRESS
RSIOBCSW DS    D                        LAST CSW
RSIOBCPA DS    AL4(RSCCW1)              CHANNEL PROGRAM ADDRESS
RSIOBDCB DS    AL4(RSDCBREP)            DCB ADDRESS
RSIOBRCP DS    CL4                      RESTART ADDRESS FOR IOS
RSIOBINC DS    H                        INCREMENT BLOCK COUNT
RSIOBECT DS    H                        NO. OF ERROR ENTRIES
RSIOBDAD DS    D                        SEEK ADDRESS FOR DA
*
*    CHANNEL PROGRAM
*
RSCCWLST DS    0CL24
RSCCW1   DS    D                        CCW1
RSCCW2   DS    D                        CCW2
RSCCW3   DS    D                        CCW3
*
*    BUFFER SEGMENT FOR EXTERNAL BLOCKS
*
RSBUFSEG DS    0CL176
RSJFCB   EQU   RSBUFSEG
*
***********************************************************************
*
*                  JFCB
*
***********************************************************************
*
JFCBDSNM DS    CL44                         DATA SET NAME
JFCBELNM DS    CL8                          ELEMENT NAME OR VERSION
JFCBTSDM DS    CL1                          TASK SCHEDULER - DATA
*                                            MANAGEMENT INTERFACE BYTE
JFCBSYSC DS    CL13                         SYSTEM CODE
JFCBLTYP DS    CL1                          LABEL TYPE AND USER'S-LABEL
*                                            INDICATOR
         DS    CL1                          NOT USED
JFCBFLSQ DS    CL2                          FILE SEQUENCE NUMBER
JFCBVLSQ DS    CL2                          VOLUME SEQUENCE NUMBER
JFCBMASK DS    CL8                          DATA MANAGEMENT MASK
JFCBCRDT DS    CL3                          DATA SET CREATION DATE
JFCBXPDT DS    CL3                          DATA SET EXPIRATION DATE
JFCBIND1 DS    CL1                          INDICATOR BYTE 1
JFCBRLSE EQU   64                            BITS 0 AND 1 - EXTERNAL
*                                            STORAGE RELEASE INDICATOR
JFCBLOCT EQU   16                            BITS 2 AND 3 - DATA SET
*                                            HAS BEEN LOCATED
JFCBNEWV EQU   4                             BITS 4 AND 5 - NEW VOLUME
*                                            ADDED TO DATA SET
JFCBPMEM EQU   1                             BITS 6 AND 7 - DATA SET IS
*                                            A MEMBER OF A PODS OR GDG
JFCBIND2 DS    CL1                          INDICATOR BYTE 2
JFCBSTAT EQU   64                            BITS 0 AND 1 - DATA SET
*                                            STATUS (NEW, OLD, OR MOD)
JFCBSCTY EQU   16                            BITS 2 AND 3 - DATA SET
*                                            SECURITY INDICATOR
JFCBUFNO DS    0AL1
JFCBUFRQ DS    AL1                      BUFFER REQUESTED
JFCBFTEK DS    0BL1
JFCBFALN DS    BL1                      BUFFER ALIGNMENT
JFCBUFL  DS    AL2                      BUFFER LENGTH
JFCEROPT DS    BL1                      ERROR ROUTINE
JFCTRTCH DS    0BL1
JFCKEYLE DS    0AL1
JFCMODE  DS    0BL1
JFCCODE  DS    0BL1
JFCSTACK DS    0BL1
JFCPRTSP DS    BL1                      PRINTER SPACING
JFCDEN   DS    BL1                      TAPE DENSITY
JFCLIMCT DS    AL3                      NO. OF TRKS.TO BE SEARCHED
JFCDSORG DS    BL2                      DATA SET ORGANIZATION
JFCRECFM DS    BL1                      RECORD FORMAT
JFCOPTCD DS    BL1                      OPTION CODES
JFCBLKSI DS    AL2                      BLOCK SIZE
JFCLRECL DS    AL2                      LOGICAL RECORD LENGTH
JFCNCP   DS    AL1                      NO. OF CHANNEL PROGRAM
JFCNTM   DS    AL1                      NO. OF TRKS. FOR MASTER INDEX
JFCRKP   DS    AL2                      RELATIVE POSITION OF KEY
JFCCYLOF DS    AL1                      NO. OF TRKS FOR OVERFLOW
JFCDBUFN DS    AL1                      RESERVED
JFCINTVL DS    AL1                      INTENTIONAL INTERVAL
JFCCPRI  DS    BL1                      PRIORITY
JFCSOWA  DS    AL2                      SIZE OF WORKAREA
JFCBNTCS DS    CL1                          NUMBER OF OVERFLOW TRACKS
JFCBNVOL DS    CL1                          NUMBER OF VOLUME SERIAL
*                                            NUMBERS
*                                            NUMBERS
JFCBVOLS DS    CL30                         VOLUME SERIAL NUMBERS (THE
*                                            FIRST FIVE)
JFCBEXTL DS    CL1                          LENGTH OF BLOCK OF EXTRA
*                                            VOLUME SERIAL NUMBERS
*                                            (BEYOND FIVE)
JFCBEXAD DS    CL3                          TRACK ADDRESS OF BLOCK OF
*                                            EXTRA VOL SERIAL NUMBERS
JFCBPQTY DS    CL3                          PRIMARY QUANTITY OF D.A.
*                                            STORAGE REQUIRED
JFCBCTRI DS    CL1                          INDICATES WHETHER CYLINDERS
*                                            TRACKS, OR RECORDS ARE
*                                            SPECIFIED IN JFCBPQTY AND
*                                            JFCBSQTY
JFCBSQTY DS    CL3                          SECONDARY QUANTITY OF D.A.
*                                            STORAGE REQUIRED
JFCBIND3 DS    CL1                          INDICATOR BYTE 3
JFCBCNTG EQU   64                            BITS 0 AND 1 - CONTIGUOUS
*                                            STORAGE INDICATOR
JFCBMXIG EQU   16                            BITS 2 AND 3 - MAXIMUM
*                                            AVAILABLE EXTENT INDICATOR
JFCBALXI EQU   4                             BITS 4 AND 5 - ALL EXTENTS
*                                            INDICATOR
JFCBRNDC EQU   1                             BITS 6 AND 7 - ROUND
*                                            CYLINDER INDICATOR
JFCBDQTY DS    CL3                          QUANTITY OF D.A. STORAGE
*                                            REQUIRED FOR A DIRECTORY
JFCBSPNM DS    CL3                          CORE ADDRESS OF THE JFCB
*                                            WITH WHICH CYLINDERS ARE
*                                            SPLIT
JFCBABST DS    CL2                          RELATIVE ADDRESS OF FIRST
*                                            TRACK TO BE ALLOCATED
JFCBSBNM DS    CL3                          CORE ADDRESS OF THE JFCB
*                                            FROM WHICH SPACE IS TO BE
*                                            SUBALLOCATED
JFCBDRLH DS    CL3                          AVERAGE DATA RECORD LENGTH
JFCBVLCT DS    CL1                          VOLUME COUNT
JFCBSPTN DS    CL1                          NUMBER OF TRACKS PER
*                                            CYLINDER TO BE USED BY
*                                            THIS DATA SET WHEN SPLIT
*                                            CYLINDER IS INDICATED
JFCBLGTH EQU   176                          LENGTH OF JFCB
JFCBEND  EQU   *
*
         ORG   RSBUFSEG+176             ORG BACK TO BUFFER SEGMENT
RSSTATUS DS    0CL8
RSSTAT1  DS    CL1                      STATUS BYTE 1
RSSTAT2  DS    CL1                      STATUS BYTE 2
RSSTAT3  DS    CL1                      STATUS BYTE 3
RSSTAT4  DS    CL1                      STATUS BYTE 4
         DS    F                        RESERVED FOR FUTURE USE
         EJECT
         CVT   DSECT=YES,PREFIX=YES,LIST=YES                     Y02076
         EJECT
*
*
*   TASK CONTROL BLOCK
*
*
         CNOP  0,4
TCB      DSECT
TCBRBP   DS    F                       POINTER TO EXECUTING RB
TCBPIE   DS    F                       POINTER TO PROG. INTERRUPT EL.
TCBDEB   DS    F                       POINTER TO DEB QUEUE
TCBTIO   DS    F                       POINTER TO TIOT
TCBCMP   DS    F                       TASK COMPLETION CODE
TCBTRN   DS    F                       TESTRAN FIELD
TCBMSS   DS    F                       DATA BLOCK QUEUE ELEMENT POINTER
TCBPRTK  DS    CL1                     PROTECTION TAG
TCBFLGS  DS    FL5                     FLAG BYTES
TCBLMP   DS    CL1                     LIMIT PRIORITY
TCBDSP   DS    CL1                     DISPATCHING PRIORITY
TCBLLS   DS    F                       POINTER TO LOAD LIST
TCBJLB   DS    F                       POINTER TO JOBLIB DCB
TCBJSE   DS    F                       LIST OF INACTIVE PROGRAMS ADDR.
TCBGRS   DS    CL64                    GENERAL REGISTER SAVE AREA
TCBIDF   DS    CL1                     TCB IDENTIFIER FIELD
TCBFSA   DS    CL3                     POINTER TO 1ST PROB.PROG.SAVEAR
TCBTCB   DS    F                       NEXT TCB ON READY QUEUE POINTER
TCBTME   DS    F                       POINTER TO TIMER ELEMENT
         EJECT
         DCBD  DSORG=PS
         EJECT
*
*
*   DATA EXTENT BLOCK
*
         IEZDEB                                                  Y02076
         EJECT
         IHJDSTAB                                                Y02076
         EJECT
TIOT     DSECT
         IEFTIOT1
         EJECT
SRT      DSECT
         IEFUCBOB
         IHADSAB
*
*
*
         END
