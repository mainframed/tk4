RS21     TITLE 'IHJQRS21 AOS/2 REPMAIN 2 ROUTINE - IGC0605B'
*
* STATUS
*
*    CHANGE LEVEL = 0
*
* FUNCTION
*
*    MODULE NAME - IHJQRS21
*
*    THIS MODULE OF THE RESTART FACILITY RECREATES THE CONTENTS
*    SUPERVISION AND TASK MANAGEMENT CONTROL BLOCKS AS THEY
*    EXISTED AT CHECKPOINT TIME. EXTENSIVE USE IS MADE OF SYSTEM
*    FUNCTIONS (LOAD, DELETE AND SPECIALIZED QUEUE SEARCH
*    ALGORITHMS) TO RECREATE THE LOAD LIST, JOB PACK AREA, REQUEST
*    BLOCK AN SUPERVISOR CONTROL BLOCK QUEUES
*
* ENTRY POINTS
*
*    REPMAIN 2 IS ENTERED FROM REPMAIN 1 (IGC0505B) TO PERFORM
*    THE ABOVE FUNCTION
*
* INPUT
*
*    GPR 12 - CONTAINS THE ADDRESS OF THE RSTWA.
*    THE DECB USED FOR READING THE RESTART DATA SET IS INITIALIZED
*    TO READ THE SUR'S.
*    THE ADDRESS OF THE NEXT DATA BLOCK, AND THE NUMBER OF BYTES
*    LEFT IN THE BUFFER ARE IN THE RSTWA.
*
* OUTPUT
*
*    SAME AS THE ENTRY PARAMETERS FOR NORMAL EXIT.
*
*    FOR ERROR EXIT AN ERROR CODE OF:                            Y02076
*           036 - TO INDICATE AN I/O ERROR ON CHECKPOINT D/S   @ZSUT222
*           042 - TO INDICATE WLR READ FROM CHECKPOINT D/S.    @ZSUT222
*           052 - TO INDICATE THAT A MODULE WHICH WAS BEING    @ZSUT222
*                 USED AT CHECKPOINT TIME IS NO LONGER AVAIL.  @ZSUT222
*           053 - TO INDICATE THAT A MODULE WHICH WAS BEING    @ZSUT222
*                 USED AT CHECKPOINT TIME IS LOCATED AT A      @ZSUT222
*                 DIFFERENT ADDRESS IN THE LPA OR NUCLEUS      @ZSUT222
*           201 - TO INDICATE A PAGE FIX (PGFIX) ERROR         @ZSUT222
*           202 - TO INDICATE A SETLOCK ERROR                  @ZSUT222
*
* EXTERNAL REFERENCES
*
*         IEAVVMSR - TO SEARCH LINK PACK AREA DIRECTORY.
*         IEAQCDSR - TO SEARCH THE ACTIVE LPA QUEUE.
*
* EXITS,NORMAL
*
*    TO REPMAIN 3 (IGC0705B) TO RESTORE USER AND DATA MANAGEMENT
*    RELATED CONTROL BLOCKS.
*
* EXITS,ERROR
*
*    TO REPMAIN 5 (IGC0905B) TO FREE ANY CONTROL BLOCKS USED BY
*    RESTART AND TO REINITIALIZE THE REGION FOR TERMINATION.
*
* TABLES/WORK AREAS
*
*    RSTWA
*
*    RPMWA1
*
*    DCB       DCBSYNAD
*
*    CDE       CDATTR                                            Y02076
*    CDE       CDCHAIN
*    CDE       CDUSE                                             Y02076
*    CDE       CDXLMJP
*    CDE       CDENTPT                                           Y02076
*
*    LLE       LLECHN                                            Y02076
*    LLE       LLECDPT                                           Y02076
*
*    RB        RBSIZE
*    RB        RBSTAB1                                           Y02076
*    RB        RBSTAB2                                           Y02076
*    RB        RBCDFLGS                                          Y02076
*    RB        RBCDE1                                            Y02076
*    RB        RBOPSW
*    RB        RBLINK
*
*    CVT       CVTABEND
*    CVT       CVTLPDSR                                          Y02076
*    CVT       CVTQCDSR                                          Y02076
*    CVT       CVTQLPAQ                                          Y02076
*
*    SCVT      SCVTSVCT
*
*    SVC TABLE                                                   Y02076
*
*    SCB       SCBCHAIN
*    SCB       SCBOWBRA
*    SCB       SCBCODE                                           Y02076
*
*    FOE       FOEFLINK
*    FOE       FOEFXCT                                           Y02076
*    FOE       FOEVINDX
*
*    TCB       TCBPKF                                            Y02076
*                                                                Y02076
*    XTLST     XTLLNTH                                           Y02076
*                                                                Y02076
*    PSA       PSALITA                                           Y02076
*
* ATTRIBUTES
*
*    KEY 0, SUPERVISOR STATE, ENABLED
*
* CHARACTER CODE DEPENDENCY
*
*    NONE
*
* NOTES
*
*    THIS MODULE OF RESTART RECREATES THE JOB PACK AREA CDE
*    QUEUE, THE P/P LLE QUEUE, THE TASK RB QUEUE, AND THE
*    TASK SCB QUEUE. UPON ENTRY THE FOLLOWING INITIALIZATION
*    PROCESSING OCCURS.
*
*    - THE @ OF RPMWA1 IS OBTAINED FROM RSTWA
*    - THE REPMAIN 2 SYNAD ROUTINE ADDRESS IS PLACED IN THE DCB
*    - THE DEFAULT EXIT MODULE NAME IS SET TO REPMAIN 3 (IGC0705B)
*    - THE @ OF THE NEXT DATA BLOCK IS OBTAINED FROM RPMWA1.
*
*
*    'RESTORING THE JOB PACK AREA CDE QUEUE (JPQ)'
*
*    THIS ROUTINE RESTORES THE MAJOR/MINOR JOB PACK AREA CDE
*    QUEUE AS WELL AS THE EXTENT LIST FOR EACH MODULE LOADED INTO
*    THE USER REGION. THE RESTORED QUEUE IS ANCHORED IN THE
*    REPMAIN WORK AREA IN THE EXACT ORDER AS AT CHECKPOINT TIME.
*
*
*    'RESTARTING THE P/P LLE CHAIN'
*
*    THIS ROUTINE RECREATES THE P/P LLE CHAIN AS IT EXISTED AT
*    CHECKPOINT TIME. THE RESTORED CHAIN IS ANCHORED TO THE
*    RPMWA1 LLE QUEUE HEADER. TWO TYPES OF LLE ARE PROCESSED,
*    THE FIRST TYPE, AN 'LLE WITH A CDE IN THE JPQ' HAS A
*    POSITION INDEX, CREATED AT CHECKPOINT TIME, TO THE CORRECT
*    CDE ON THE JPQ. THIS INDEX IS IN THE LLCDPTR FIELD OF THE
*    LLE. THE SECOND TYPE OF LLE, 'LLE WITH A CDE ON THE ACTIVE
*    LPAQ', CONTAINS AN APPENDAGE WITH THE ENTRY POINT NAME AND
*    ADDRESS OF THE 'LOADED' PROGRAM. IN EACH CASE, IT IS NECESSARY
*    TO FIND THE CDE FOR THE LLE AND RECONSTRUCT THE LLE CHAIN.
*
*
*    'RESTARTING THE P/P RB QUEUE'
*
*    THIS ROUTINE RECREATES THE RB QUEUE AS IT EXISTED AT
*    CHECKPOINT TIME. THE RESTORED CHAIN IS ANCHORED TO THE RPMWA1
*    RB QUEUE HEADER. SEVERAL RB TYPES ARE POSSIBLE, AND EACH
*    REQUIRES SPECIAL PROCESSING. FOR THOSE RB'S REPRESENTING
*    PROGRAMS IN THE SYSTEM NUCLEUS OR LINK PACK AREA, THE LOCATION
*    OF THE ROUTINE AT RESTART TIME MUST BE THE SAME AS AT
*    CHECKPOINT TIME. IF THIS IS NOT THE CASE, RESTART CANNOT
*    CONTINUE, AND ERROR PROCEDURES MUST BE INVOKED. FOR THOSE RB'S
*    REPRESENTING PROGRAMS IN THE JPQ, THE POINTER TO THE CDE MUST
*    BE RE-SET IN THE RB.
*
*
*    'RESTORING THE P/P STAE CONTROL BLOCKS'
*
*    THIS ROUTINE RESTORES THE TCBNSTAE FLAGS AND THE SCB CHAIN
*    AS IT EXISTED AT CHECKPOINT TIME. THE RESTORED CHAIN IS
*    ANCHORED TO THE RPMWA1 SCB QUEUE HEADER. IT SHOULD BE NOTED
*    THAT CHECKPOINT OUTPUTS ALL SCB'S WHILE RESTART RECREATES
*    ONLY STAE SCB'S. THUS AN SCB FOR A STAI REQUEST IS NOT
*    RESTARTED.
*
*
*    'RESTORING THE P/P FOE CONTROL BLOCKS'
*
*    THIS ROUTINE RESTORES THE FOE CHAIN CHECKPOINTED BY
*    CHECKMAIN 2.  IT INVOKES THE PGFIX SERVICE ROUTINE TO
*    REINSTATE THE FOE CHAIN IN THE P/P TCB.  THE RESTORED
*    FOE CHAIN ANCHORED IN THE REPMAIN WORK AREA IS SAVED
*    FOR LATER PROCESSING BY REPMAIN 4 TO ADJUST THE FIX
*    COUNTS ON THE P/P TCBFOE QUEUE.
*
* VS2-REL 3 - CHANGES/DELETIONS:
* 041498,046900                                                @ZA01488
* 043585-043611                                                @ZA02857
* 039620                                                       @Z30ESHP
* 036722                                                       @ZA03177
* A04054800-04055800                                           @ZA11616
*A044262-044278,A044310,A044354-044446,A046010                 @ZA14558
*C037065                                                       @ZA18323
*A044370,A044390,C044374                                       @ZA19627
* APAR OZ31479 HAS BEEN FLAGGED AS @ZSUT222                    @ZSUT222
*C035610,035850,036394,036730,041558,041708,043673,043828      @ZSUT222
*C045551,045591,045695,046948,046964-046972,046976,046980      @ZSUT222
*C047034                                                       @ZSUT222
*A036740-036772,046032,046952-046960                           @ZSUT222
     EJECT
IGC0605B CSECT
         BALR  RB,R0               ADDRESSABILITY FOR CODE
         USING *,RB                CODE
         USING RSTWA,RC            RESTART WORK AREA
         B     RPMNST              GO AROUND ID
         DC    H'0'                ALIGNMENT
         DC    CL8'IGC0605B'       MODULE NAME                 @ZSUT222
         DC    CL8'&SYSDATE'       LAST DATE SHIPPED           @ZSUT222
         DC    CL8'@ZSUT222'       LAST CODE SHIPPED           @ZSUT222
RPMNST   L     R9,RSMWOFST         OFFSET TO REPMAIN'S WORK AREA
         AR    R9,RC               ESTABLISH BASE FOR REPMAIN'S W. A.
         USING RPMWA1,R9           REPMAIN WORK AREA
         LA    R2,RSBDCB           @ OF RESTART DCB
         USING IHADCB,R2           DCB
         LA    R7,RPM127           GET @ OF REPMAIN 2 SYNAD ROUTINE
         STCM  R7,M7,DCBSYNA       PUT IT IN RESTART DCB
         MVC   RPMN40(N8),RM3NAME  SET DEFAULT EXIT TO IGC0705B
         DROP  R2                  DCB
         XC    RSAPPLNT,RSAPPLNT   CLEAR SUR APPENDAGE LENGTH CELL
         MVI   RSSWIT1,N0          CLEAR THE SWITCH BYTE
         L     R7,RSBFSTAD         GET @ OF NEXT DATA BLOCK IN SURBUF
         CLI   N0(R7),CDECODE      IS NEW BLOCK A CDE
         BNE   R11C1               NO-PROCESS LLE CHAIN
         LA    R4,RPMCDE           GET @ OF JPQ ANCHOR IN RPMWA1
R10A2    LA    R3,CDELEN           GET LENGTH OF A CDE
         ST    R3,RPLNT            SET LENGTH FOR RSGET AND BUFFER RTN
         BAL   RD,RSGET            GET LSQA SPACE AND MOVE THE CDE
         USING CDENTRY,R4          CDE PREV.
         ST    R1,CDCHAIN          CHAIN CDE TO PREVIOUS CDE     Y02076
         BAL   RE,R13A1            READ NEXT DATA
         DROP  R4                  CDE PREV.
         USING CDENTRY,R1          CDE CURRENT
         TM    CDATTR,CDMIN        IS THIS CDE A MINOR
         BO    R10F2               YES, GO SEE IF LAST CDE WAS ALSO
         DROP  R1                  CDE CURRENT
         LR    R4,R1               NO, MAJOR SO NEW BLOCK CAN BE XL
         L     R7,RSBFSTAD         GET @ OF NEW BLOCK SUR CODE
         CLI   N0(R7),XLCODE       IS NEW BLOCK AN EXTENT LIST
         BNE   R10C2               NO. GO SEE IF CDE'S DONE
         OI    RSSWIT1,BIGBLOCK    SET BIG BLOCK SWITCH
         LA    RF,N1(R7)           GET BASE OF XL IN SUR BUFFER
         USING XTLST,RF            EXTENT LIST
         ICM   R0,MF,XTLLNTH       GET LENGTH OF THE EXTENT LIST
         ST    R0,RPLNT            SET UP LENGTH OF BLOCK FOR RSGET,
*                                  BUFFER HANDLER FOR MOVE
         DROP  RF                  EXTENT LIST
         BAL   RD,RSGET            GM THE XL BUT DON'T MOVE IT
         USING CDENTRY,R4          CDE PREVIOUS
         ST    R1,CDXLMJP          PUT @ OF XL IN CDE            Y02076
         BAL   RE,R13A1            GO MOVE XL AND READ NEXT DATA
         SPACE 3
R10C2    L     R6,CDCHAIN          GET @ NEXT CDE FROM PREV.
         LTR   R6,R6               IS IT LAST CDE
         BZ    R11C1               YES, GO DO LLE'S
         B     R10A2               NO, GO DO NEXT CDE
         SPACE 3
R10F2    TM    CDATTR,CDMIN        WAS PREV. CDE A MINOR
         BZ    R10F3               NO, GO PUT @ OF MAJ IN MINOR
         L     R4,CDXLMJP          YES, GET @ OF MAJ FROM MINOR
         DROP  R4                  CDE PREVIOUS
         USING CDENTRY,R1          CDE CURRENT
R10F3    ST    R4,CDXLMJP          PUT @ OF MAJ CDE INTO MINOR   Y02076
         LR    R4,R1               MAKE CURRENT PREVIOUS
         B     R10C2               TEST FOR LAST CDE
         DROP  R1                  CDE CURRENT
         EJECT
*
*        RESTARTING THE P/P LLE CHAIN
*
         SPACE 3
R11C1    LA    RA,RPMLLE           GET @ OF REPMAIN LLE ANCHOR
R11D1    L     R7,RSBFSTAD         GET @ OF CHECKCODE FOR BLOCK
         CLI   N0(R7),LLEJCODE     IS THIS AN LLE W/CDE ON JPQ
         BE    R11D11              YES, GO RESTART IT
         CLI   N0(R7),LLELCODE     IS THIS AN LLE W/CDE ON LPAQ
         BNE   R11RB               NO, GO DO RB CHAIN
R11D11   LA    R0,LLELEN           GET LENGTH OF LLE
         ST    R0,RPLNT            SET SIZE TO GET AND MOVE
         BAL   RD,RSGET            GET AND MOVE THE LLE
         USING LLE,RA              LLE
         ST    R1,LLECHN           PUT LLE ON RPMWA LLE CHAIN    Y02076
         LR    RA,R1               UPDATE CHAIN POINTER
         CLI   N0(R7),LLELCODE     IS IT AN LLE W/CDE ON LPAQ
         BNE   R11D1B              NO, GO FIND CDE ON JPQ
         BAL   RE,RPMCDLDR         GO, CREATE CDE ON LPAQ
R11D1A   ST    R1,LLECDPT          PUT @ OF CDE IN LLE           Y02076
         BAL   RE,R13A1            GET NEXT DATA BLOCK
         B     R11D1               GO PROCESS NEXT BLOCK
         SPACE 3
R11D1B   SR    R0,R0               GET CDE POSITION INDEX FROM LLE
         L     R0,LLECDPT          FOR SEARCH ROUTINE            Y02076
         BAL   RE,RPMJPQS          GO FIND CDE ON JPQ
         B     R11D1A              GO PUT CDE ADDRESS IN LLE
         DROP  RA                  LLE
         EJECT
*
*        RESTARTING THE P/P RB QUEUE
*
         SPACE 3
R11RB    LA    RA,RPMRB            GET @ OF RB ANCHOR CELL IN RPMWA1
         S     RA,RMRBLINK         ADJUST CHAIN TO POINT TO RBPRFXST
R10G3    L     R7,RSBFSTAD         GET @ OF SUR BLOCK
         LA    R1,N1(R7)           BUMP PAST CHECKCODE
         USING RBPRFXST,R1         RB IN SUR BUFFER
         SR    R0,R0               CLEAR REG
         ICM   R0,M3,RBSIZE        GET RBSIZE IN DOUBLE WORDS
         SLL   R0,N3               MULTIPLY BY 8 TO GET LEN IN BYTES
         ST    R0,RPLNT            SET BLOCK LENGTH=LENGTH OF RB
         BAL   RD,RSGET            GETMAIN AND MOVE THE RB
         DROP  R1                  RB IN SUR BUFFER
         USING RBPRFXST,RA         RB ANCHOR PTR
         LA    R0,RBPRFLNA(R1)     ADJUST ADDRESS BEYOND PREFIX
         STCM  R0,M7,RBLINKB       PUT RB ON REPMAIN RB QUEUE IN W/A
         LR    RA,R1               UPDATE CHAIN ANCHOR
         L     R5,RSTCBAD          GET ADDR OF RESTART TCB
         STCM  R5,M7,RBLINKB       PUT IT IN RB
         TM    RBSTAB1,RBFTSVRB    IS IT AN SVRB
         BO    R10G3A              YES, GO HANDLE SVRB'S
         USING TCB,R5              TCB
         MVZ   RBOPSW+N1(N1),TCBPKF MOVE PROTECT KEY TO PSW
         DROP  R5                  TCB
         CLI   N0(R7),PRBSCODE     IS IT A SYNCHED PRB
         BE    R10G3K              YES, GO GET NEXT BLOCK
         CLI   N0(R7),PRBLCODE     IS IT PRB W/CDE ON LPAQ
         BNE   R10G3F              NO, PRB W/CDE ON JPQ
         BAL   RE,RPMCDLDR         GO CREATE CDE ON LPAQ
R10G3G   STCM  R1,M7,RBCDE1        PUT @ OF CDE IN RB
R10G3K   BAL   RE,R13A1            GET @ OF NEXT DATA BLOCK
         TM    RBSTAB2,RBTCBNXT    WAS IT THE LAST RB
         BO    R11A3               YES, GO DO STAE CONTROL BLOCKS
         B     R10G3               GO PROCESS THE NEXT RB
R10G3F   SR    R0,R0               GET CDE POSITION INDEX ON JPQ
         ICM   R0,M7,RBCDE1        FOR SEARCH ROUTINE
         BAL   RE,RPMJPQS          GO FIND CDE ON JPQ
         B     R10G3G              GO PUT @ OF CDE IN RB
         SPACE 3
R10G3A   LA    R6,N1(R7)           GET PAST SURCODE
         XC    RBCDE1,RBCDE1       CLEAR POSSIBLE CDE ADDR       YM7054
         OI    RBCDFLGS,RBNOCELL   PREVENT SUBSEQUENT FREECELL   Y02076
         A     R6,RPLNT            GET ADDRESS OF SUR APPENDAGE
         CLI   N0(R7),SVRB234C     IS IT A TYPE 2,3,4 SVRB
         BE    R10G3B              YES, GO FIND EP FROM SVC TABLE
*        THEN SVRB MUST BE FOR TYPE 4 NTH LOAD (N>=2)
         CLI   N0(R7),SVRBEOVC     SVRB FOR EOV                  Y02076
         BNE   R10G3A1             BR NO                         Y02076
         SR    RF,RF               SET APP LENGTH                Y02076
         MVC   RSERAS00(8),EOVRETNM SETUP EOV-EXIT RETURN NAME   YM7050
         LA    R6,RSERAS00         POINT REG 6 TO IT             YM7050
         B     R10G3A1A            GO FIND CDE WITH EP           YM7050
R10G3A1  LA    RF,RBLPALEN         SET APPENDAGE LENGTH FOR AN   Y02076
R10G3A1A ST    RF,RSAPPLNT         RB W/CDE ON LPAQ.
         LA    RF,RSREGSAV         GET SAVEAREA ADDR             Y02076
         STM   R0,RF,N0(RF)        SAVE REGS                     Y02076
R10G3A2  SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        ,
               RELATED=(LOCAL,IGC0605B(R10G3A5))                 Y02076
         LTR   RD,RD               SETLOCK SUCCESSFUL            Y02076
         LM    R0,RF,N0(RF)        RESTORE REGS                  Y02076
         BNZ   RPMSLERR            IF NOT, BR                    Y02076
R10G3A3  SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,                          ,
               RELATED=(CMS,IGC0605B(R10G3A4))                   Y02076
         LTR   RD,RD               SETLOCK SUCCESSFUL            Y02076
         LM    R0,RF,N0(RF)        RESTORE REGS                  Y02076
         BZ    R10G3A3B            IF YES, BR                    Y02076
         MVI   RSRETCOD+N1,ERR202  STORE SETLOCK ERROR CODE    @ZSUT222
         B     R10G3A5             GO RELEASE LOCAL LOCK         Y02076
R10G3A3B BAL   RE,CDSEARCH         FIND THE CDE ON THE LPAQ      Y02076
         LTR   R2,R2               CDE FOUND                     Y02076
         BZ    R10G3A3C            IF NOT, BR                    Y02076
         USING CDENTRY,R2          ADDRESS CDE                   Y02076
         L     R1,CDENTPT          GET EPA BEFORE CDE MOVES      Y02076
         DROP  R2                  CDE                           Y02076
R10G3A3C LA    RF,RSREGSAV         GET SAVEAREA ADDR             Y02076
         STM   R0,RF,N0(RF)        SAVE REGS                     Y02076
R10G3A4  SETLOCK RELEASE,TYPE=CMS,                                     ,
               RELATED=(CMS,IGC0605B(R10G3A3))                   Y02076
R10G3A5  SETLOCK RELEASE,TYPE=LOCAL,                                   ,
               RELATED=(LOCAL,IGC0605B(R10G3A2))                 Y02076
         LM    R0,RF,N0(RF)        RESTORE REGS                  Y02076
         CLI   RSRETCOD+N1,ERR202  SETLOCK ERROR               @ZSUT222
         BE    RPMERR              IF YES, BR                    Y02076
         CLI   N0(R7),SVRBEOVC     SVRB FOR EOV                  YM7050
         BNE   R10G3A5A            IF NOT, SKIP EOV PROCESSING   YM7050
         LTR   R2,R2               WAS CDE FOUND                 YM7050
         BZ    R10G3A6             IF NOT, LOOK ON LPAQ          YM7050
         LR    R0,R1               EPA TO REG 0                  YM7050
         B     R10G3A8A            GO UPDATE EOV PSW             YM7050
R10G3A5A LTR   R2,R2               CDE FOUND                     YM7050
         BNZ   R10G3C              YES, GO SEE IF SVRB IS RESIDENT
         TM    RBSTAB1,RBTRSVRB    IS IT A TRANSIENT SVRB
         BZ    R11A5               NO, RESIDENT SO CANNOT RESTART
R10G3A6  ICM   R0,MF,N0(R6)        GET LEFT HALF OF NAME         YM7050
         ICM   R1,MF,N4(R6)        GET RIGHT HALF OF NAME        Y02076
         LA    RF,RSREGSAV         ADDRESS REG SAVEAREA          Y02076
         STM   R0,RF,N0(RF)        SAVE REGS                     Y02076
R10G3A7  SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        ,
               RELATED=(LOCAL,IGC0605B(R10G3A8))                 Y02076
         LTR   RD,RD               SETLOCK ERROR                 Y02076
         LM    R0,RF,N0(RF)        RESTORE REGS                  Y02076
         BNZ   RPMSLERR            IF SETLOCK ERROR, BR          Y02076
         STM   R6,R9,CKSAVAR6      SAVE REGS ACROSS IEAVVMSR     Y02076
         DROP  R9                  RPMWA1 PERM
         LR    R2,R9               SET UP TEMPORARY BASE FOR RPMWA1
         USING RPMWA1,R2           RPMWA1 TEMP
         L     R3,CVTPTR           GET @ OF CVT
         USING CVT,R3              CVT
         L     RE,CVTLPDSR         GET @ OF IEAVVMSR
         BALR  RE,RE               SEARCH FOR LPDE
         B     R11CEPA             FOUND, GO RESTORE AND COMPARE EP'S
         MVI   RSRETCOD+N1,ERR052  NOT FOUND, SET LPAQ ERR CODE@ZSUT222
         B     R10G3A7B            GO RELEASE LOCAL LOCK         Y02076
R11CEPA  LM    R6,R9,CKSAVAR6      RESTORE REGS                  Y02076
         LR    R1,R0               GET BASE FOR CDE
         USING CDENTRY,R1          CDE
         L     R0,CDENTPT          GET EPA BEFORE CDE MOVES      Y02076
R10G3A7B LA    RF,RSREGSAV         ADDRESS REG SAVEAREA          Y02076
         STM   R0,RF,N0(RF)        SAVE REGS ACROSS SETLOCK      Y02076
R10G3A8  SETLOCK RELEASE,TYPE=LOCAL,                                   ,
               RELATED=(LOCAL,IGC0605B(R10G3A7))                 Y02076
         LM    R0,RF,N0(RF)        RESTORE REGS                  Y02076
         CLI   RSRETCOD+N1,N0      ERROR ENCOUNTERED             Y02076
         BNE   RPMERR              IF ERROR, GO XCTL TO 905B     Y02076
         CLI   N0(R7),SVRBEOVC     SVRB FOR EOV                  Y02076
         BNE   R10G3A9             IF NOT, BR                    Y02076
R10G3A8A STCM  R0,M7,RBOPSW+N5     UPDATE EOV RETURN ADDRESS     YM7050
         B     R10G3K              GO GET NEXT RB                Y02076
R10G3A9  CLM   R0,M7,N9(R6)        RESTART EPA MATCH CHECKPOINT ZA03177
         BE    R10G3G              IF YES, GO UPDATE RB LPDE @   Y02076
         DROP  R2,R3               RPMWA1 TEMP, CVT
         USING RPMWA1,R9           RPMWA1 PERM
R11A5    MVI   RSRETCOD+N1,ERR053  SET LPAQ ERROR CODE IN RSTWA@ZSUT222
RPMERR   MVI   RPMN40+N4,CHAR9     SET TO XCTL TO IGC0905B
         MVC   RSREGSAV(8),MODID   SAVE NAME OF MODULE THAT    @ZSUT222
*                                  HAS DETECTED THE ERROR.     @ZSUT222
         STM   0,15,RSREGSAV+8     SAVE CURRENT REGS           @ZSUT222
         B     R11A4               GO XCTL
         SPACE 3
*
*        CDE FOUND ON ACTIVE LPAQ
*
R10G3C   TM    RBSTAB1,RBTRSVRB    IS IT A TRANSIENT SVRB
         BO    R11A5               NO - ERROR ON LPAQ - SET CODE,XCTL
         USING CDENTRY,R2          CDE
         CLM   R1,M7,N9(R6)        RESTART EPA MATCH CHECKPOINT ZA18323
         BNE   R11A5               NO - ERROR - SET CODE AND XCTL
         DROP  R2                  CDE
         LR    R1,R2               YES, MOVE ADDR FOR STORE
         B     R10G3G              GO STORE CDE @ IN RB.
         SPACE 3
*        SVRB IS FOR TYPE 2, 3, OR 1ST LOAD OF TYPE 4 SVC.
         SPACE 3
R10G3B   SR    R0,R0               CLEAR INDEX REG
         IC    R0,N4(R6)           GET  SVC NUMBER FROM SUR APPENDAGE
         L     RE,CVTPTR           GET @ OF CVT
         USING CVT,RE              CVT
         L     RE,CVTABEND         GET @ OF SECONDARY CVT
         DROP  RE                  CVT
         USING SCVTSECT,RE         SCVT
         L     RE,SCVTSVCT         GET @ OF SVC TABLE (IBMORG)
         DROP  RE                  SCVT
RMT234EP SLL   R0,N3               MAKE SVC NO. AN INDEX         Y02076
         AR    RE,R0               GET @ OF SVC TABLE ENTRY
         LA    R0,SVRB234A         GET APPENDAGE LENGTH FOR T234 SVRB
         ST    R0,RSAPPLNT         PUT IT IN RPMWA1 FOR BUFFER HANDLER
         CLC   N1(N3,RE),N1(R6)    ENTRY POINT @ OK.
         BE    R10G3K              YES, GO GET NEXT BLOCK
         B     R11A5               NO, GO SET LPAQ ERROR AND XCTL
         EJECT
*
*        STAE CONTROL BLOCK PROCESSING
*
         SPACE 3
R11A3    L     R7,RSBFSTAD         GET @ OF SUR ENTRY
         MVC   RSNSTAE(N4),N1(R7)  MOVE STAE INFO TO WORKAREA
         LA    R4,RSNSTAE          GET @ OF SCB ANCHOR IN RPMWA1
         XC    N1(N3,R4),N1(R4)    SET LAST SCBCHAIN FIELD TO 0.
         LA    R3,NSTAELEN         SET BLOCK LENGTH TO
         ST    R3,RPLNT            LENGTH OF STAE FIELD
R11A3A   BAL   RE,R13A1            GET @ OF NEXT DATA BLOCK
         CLI   N0(R7),SCBCODE      IS THIS AN SCB
         BNE   RPMFOE1             NO, GO PROCESS FOE'S
         LA    R3,SCBLEN           LENGTH OF AN SCB
         ST    R3,RPLNT            SET LENGTH TO GETMAIN
         LA    RF,N1(R7)           GET @ OF SCB IN SUR BUFFER
         USING SCB,RF              SCB IN BUFFER
         ICM   RE,M7,SCBOWNRA      IS RB POSITION INDEX 0 (STAI SCB)
         BZ    R11A3A              YES, STAI SCB SO DO NOT RESTART
         DROP  RF                  SCB IN BUFFER
         LR    R0,R3               INIT R0 FOR GETMAIN           Y02076
         ICM   R0,M8,RMSP255       IN SUBPOOL 255              @Z30ESHP
         BAL   RD,RSGETA           GETCORE AND MOVE SCB IN       Y02076
         USING SCB,R4              SCB IN LSQA
         STCM  R1,M7,SCBCHAIN+N1   CHAIN SCB TO PREVIOUS SCB
         LR    R4,R1               ADVANCE CHAIN POINTER
         XC    SCBCHAIN+N1(N3),SCBCHAIN+N1 SET FWD CHAIN @ = 0
         B     R11A3A              GO GET NEXT DATA BLOCK
         DROP  R4                  SCB IN LSQA
         EJECT
*
*        FOE CONTROL BLOCK PROCESSING
*
         SPACE 3
RPMFOE1  SR    R3,R3               SET TOTAL FIX CTR=0           Y02076
         SR    RA,RA               SET FOE CTR=0                 Y02076
         LA    R4,RPMFOE           GET ADDR OF FOE ANCHOR        Y02076
RPMFOE2  CLI   N0(R7),FOECODE      IS THIS AN FOE                Y02076
         BNE   RPMFOE3             BR NO, GO FIX PAGES           Y02076
         LA    RD,FOELEN           GET LENGTH OF FOE             Y02076
         ST    RD,RPLNT            SET LENGTH FOR GETMAIN        Y02076
         BAL   RD,RSGET            GET/MOVE FOE                  Y02076
         LA    RA,N1(,RA)          INCR FOE CTR BY 1             Y02076
         USING FOE,R4              FOE                           Y02076
         STCM  R1,M7,FOEFLINK      CHAIN FOE TO CHAIN            Y02076
         LR    R4,R1               UPDATE CHAIN PTR              Y02076
         AH    R3,FOEFXCT          INCR TOTAL FIX CTR            Y02076
         BAL   RE,R13A1            GET NEXT DATA BLOCK           Y02076
         B     RPMFOE2             GO SEE IF IT IS AN FOE        Y02076
RPMFOE3  LTR   RA,RA               ANY FOE'S                     Y02076
         BZ    R11A4               BR NO, GO XCTL                Y02076
         SR    R1,R1               ZERO REG 1                  @ZA11616
         STCM  R1,M7,FOEFLINK      ZERO LAST LINK POINTER      @ZA11616
         LR    R1,R3               CALCULATE LENGTH OF GETMAIN   Y02076
         SLL   R1,N3               FOR FIXLIST (VSL)             Y02076
         LA    R0,N4(,R1)          AND ECB 8*FIXES+4             Y02076
         ICM   R0,M8,RMSP254       SETUP TO GET FROM SP254       Y02076
         ST    R0,RSW001           SAVE LENGTH FOR FREEMAIN      Y02076
         GETMAIN R,LV=(0)          GET ECB AND VSL               Y02076
         ST    R1,RSW002           SAVE ADDR OF ECB AND VSL      Y02076
         LA    R8,N4(,R1)          GET ADDR OF VSL               Y02076
         LA    R4,RPMFOE           GET ADDR OF FOE ANCHOR        Y02076
         SR    RD,RD               CLEAR WORK REG                Y02076
RPMFOE4  ICM   R4,M7,FOEFLINK      GET ADDR OF 1ST/NEXT FOE      Y02076
         ICM   RD,M6,FOEVINDX      GET START ADDR TO FIX         Y02076
         LR    RE,RD               COMPUTE END                   Y02076
         AH    RE,RMH4096          ADDR+1                        Y02076
         LH    R3,FOEFXCT          GET FOE FIX COUNT             Y02076
RPMFOE4A STM   RD,RE,N0(R8)        STORE START AND END ADDR      Y02076
*                                  FOR THIS ENTRY                Y02076
         LA    R8,N8(,R8)          POINT TO NEXT VSL ENTRY       Y02076
         BCT   R3,RPMFOE4A         CONTINUE UNTIL FIX CTR=0      Y02076
         BCT   RA,RPMFOE4          CONTINUE UNTIL FOE CTR=0      Y02076
         SH    R8,RMH4             POINT TO PREVIOUS ENTRY       Y02076
         OI    N0(R8),X80          SET LAST VSL ENTRY FLAG       Y02076
         L     R8,RSW002           GET ECB ADDRESS               Y02076
         LA    R1,N4(,R8)          GET START ADDR OF FIX LIST    Y02076
         XC    N0(N4,R8),N0(R8)    CLEAR ECB                     Y02076
         DROP  R4                  FOE                           Y02076
         PGFIX L,LA=(R1),ECB=(R8),LONG=N,RELEASE=N               Y02076
         LTR   RF,RF               DID FIX GO OK                 Y02076
         BZ    RPMFOE7             BR YES, GO FREE ECB & VSL     Y02076
         CLM   RF,M1,RMRC8         IS PGFIX STILL ACTIVE         Y02076
         BNE   RPMFOE6             BR NO--ERROR                  Y02076
         WAIT  ECB=(R8)            NOT YET DONE, SO WAIT         Y02076
         CLI   N0(R8),PC40         WAS PGFIX SUCCESSFUL        @ZA01488
         BE    RPMFOE7             BR YES                        Y02076
RPMFOE6  MVI   RSRETCOD+N1,ERR201  SET '201' ERROR CODE        @ZSUT222
RPMFOE7  L     R0,RSW001           GET LENGTH OF ECB+VSL         Y02076
         ICM   R0,M8,RMSP254       SET SP TO 254                 Y02076
         L     R1,RSW002           GET ADDR OF ECB & VSL         Y02076
         FREEMAIN R,LV=(0),A=(1)   FREE ECB & VSL                Y02076
         CLI   RSRETCOD+N1,ERR201  WAS THERE AN ERROR          @ZSUT222
         BE    RPMERR              BR YES                        Y02076
******* FALL THROUGH TO R11A4 TO XCTL TO REPMAIN 3 *****
         EJECT
*
*              XCTL PROCESSING
*
         SPACE 3
R11A4    LA    RF,RPMN40           GET @ OF NAME TO XCTL TO
         ST    RF,RP40XCTL         SAVE IT FOR XCTL
         LR    R1,RC               SET @ OF RSTWA TO GPR1
         LA    RF,RP40XCTL         GET @ OF @
         XCTL  SF=(E,(15))         XCTL TO NEXT LOAD
         EJECT
*
*        RPMJPQS - ROUTINE TO LOCATE A CDE ON THE RESTARTED P/P JPQ
*
*        INPUT - POSITION INDEX OF CDE ON THE JPQ IN GPR 0
*                RETURN ADDRESS IN GPR 14.
*
*        OUTPUT- @ OF CDE IN GPR 1
*
         SPACE 3
RPMJPQS  L     R1,RPMCDE           GET @ OF FIRST CDE ON JPQ
         LA    RF,N1               SET SEARCH COUNT=1
RPMJPQS1 CR    R0,RF               SEARCH COUNT=POSITION INDEX
         BCR   EQ,RE               EQUAL, RETURN
         USING CDENTRY,R1          CDE
         L     R1,CDCHAIN          GET @ NEXT CDE
         LA    RF,N1(RF)           INCREMENT SEARCH COUNT BY 1
         B     RPMJPQS1            SEE IF THIS IS THE ONE
         DROP  R1                  CDE
         EJECT
*
*        THIS SUBROUTINE ISSUES A GETMAIN FOR A CONTROL BLOCK
*        AND MOVES THE BLOCK TO THE ACQUIRED CORE FROM THE
*        SUR BUFFER.
*
*        INPUT - @ OF BLOCK TO BE MOVED MINUS 1 IN GPR 7.
*              - LENGTH TO BE MOVED IN RPLNT
*              - BIG BLOCK SWITCH. IF ONE BYPASS MOVE
*                                  IF ZERO MOVE BLOCK
*              - RETURN @ IN GPR 13
*
*        OUTPUT - @ OF ACQUIRED STORAGE IN GPR 1 AND RSCORE.
*               - BLOCK MOVED IF REQUIRED
*
*        NOTE - IF ENTERED AT RSGETA THE SUBPOOL # AND LENGTH MUST
*               BE SET INTO GPR 0 BY CALLER.
*
         SPACE 3
RSGET    L     R0,RPLNT            GET THE LENGTH OF THE BLOCK
         ICM   R0,M8,RMSP255       GET FROM SUBPOOL 255
RSGETA   GETMAIN R,LV=(0)          GET THE CORE
         ST    R1,RSCORE           SAVE PTR TO ACQUIRED CORE
         TM    RSSWIT1,N1          IS IT A BIG BLOCK (IE. XL)
         BCR   ONES,RD             YES, RETURN WITHOUT MOVING BLOCK
         L     RF,RPLNT            GET LENGTH TO MOVE
         BCTR  RF,R0               ADJUST FOR EXECUTE
         EX    RF,RSGETMOV         MOVE THE BLOCK
         BR    RD                  RETURN TO CALLER
         SPACE
RSGETMOV MVC   N0(N0,R1),N1(R7)    EXECUTED MOVE TO MOVE BLOCK
         EJECT
*
*        RPMCDLDR - ROUTINE TO LOCATE A CDE ON THE ACTIVE LPAQ
*
*        INPUT - @ OF CHECKCODE FOR BLOCK IN SUR BUFFER IN GPR 7.
*              - LENGTH OF BLOCK IN RPLNT
*              - ENTRY POINT NAME AND @ IN SUR APPENDAGE
*              - RETURN ADDRESS IN GPR 14.
*        OUTPUT- CDE BUILT ON LPAQ
*              - @ OF CDE IN GPR1
*
RPMCDLDR ST    RE,CKSAVARE         SAVE RETURN REG
         LA    R6,N1(R7)           GET @ OF START OF BLOCK IN SUR BUF
         A     R6,RPLNT            CALCULATE START OF SUR APPENDAGE
         LA    R0,LLEAPLEN         SET APPENDAGE LENGTH FOR
         ST    R0,RSAPPLNT         BUFFER HANDLER
         L     RF,CVTPTR           GET CVT ADDRESS             @ZA02857
         USING CVT,RF              AVOID SEARCH IN JOB/STPLIB  @ZA02857
         L     R1,CVTLINK          GET LINK LIB DCB ADDR       @ZA02857
         DROP  RF                                              @ZA02857
         LOAD  EPLOC=(R6),DCB=(R1)  LOAD MODULE TO SET UP CDE  @ZA02857
         LR    RD,R0               SAVE EP @
         CLM   RD,M7,N9(R6)        ENTRY POINT @ OK
         BNE   RPMCDLD1            NO, GO DELETE THE MODULE
         LA    RF,RSREGSAV         GET SAVEAREA ADDR             Y02076
         STM   R0,RF,N0(RF)        SAVE REGS                     Y02076
RPMCD1   SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,                        ,
               RELATED=(LOCAL,IGC0605B(RPMCD4))                  Y02076
         LTR   RD,RD               SETLOCK ERROR                 Y02076
         LM    R0,RF,N0(RF)        RESTORE REGS                  Y02076
         BNZ   RPMSLERR            IF YES, BR                    Y02076
RPMCD2   SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,                          ,
               RELATED=(CMS,IGC0605B(RPMCD3))                    Y02076
         LTR   RD,RD               SETLOCK ERROR                 Y02076
         LM    R0,RF,N0(RF)        RESTORE REGS                  Y02076
         BZ    RPMCD2B             IF NOT, BR                    Y02076
         MVI   RSRETCOD+N1,ERR202  STORE SETLOCK ERROR CODE    @ZSUT222
         B     RPMCD4              GO RELEASE LOCAL LOCK         Y02076
RPMCD2B  BAL   RE,CDSEARCH         GO FIND CDE ON LPAQ           Y02076
         USING CDENTRY,R2          CDE                           Y02076
         ST    R2,RMCDSAV          SAVE CDE ADDR                 Y02076
         TM    CDATTR,CDMIN        MINOR CDE                     Y02076
         BZ    RPMCDLD2            BR NO                         Y02076
         L     R2,CDXLMJP          BUMP COUNT IN MAJOR CDE       Y02076
RPMCDLD2 LH    RF,CDUSE            GET CDE USE COUNT             Y02076
         LA    RF,N1(,RF)          INCR BY ONE                   Y02076
         STH   RF,CDUSE            PUT IT BACK                   Y02076
         LA    RF,RSREGSAV         GET SAVEAREA ADDR             Y02076
         STM   R0,RF,N0(RF)        SAVE REGS                     Y02076
RPMCD3   SETLOCK RELEASE,TYPE=CMS,RELATED=(CMS,IGC0605B(RPMCD2)) Y02076
RPMCD4   SETLOCK RELEASE,TYPE=LOCAL,                                   ,
               RELATED=(LOCAL,IGC0605B(RPMCD1))                  Y02076
         LM    R0,RF,N0(RF)        RESTORE REGS                  Y02076
RPMCDLD1 DELETE EPLOC=(R6)         RELEASE THE LLE
         CLI   RSRETCOD+N1,ERR202  SETLOCK ERROR               @ZSUT222
         BE    RPMERR              IF YES, BR                    Y02076
         CLM   RD,M7,N9(R6)        ENTRY POINT @ OK
         BNE   R11A5               NO, LPAQ ERROR SO STOP RESTART
         L     R1,RMCDSAV          SET CDE @ FOR RETURN
         L     RE,CKSAVARE         RESTORE RETURN REG.
         BR    RE                  RETURN TO CALLER
         DROP  R2                  CDE ON LPAQ
         EJECT
*
*        INPUT BUFFER HANDLER ROUTINE
*
*        INPUT - @ OF CURRENT BLOCK IN RSBFSTAD
*              - LENGTH OF CURRENT BLOCK IN RPLNT
*              - LENGTH OF APPENDAGE FOR CURRENT BLOCK, IF ANY
*              - @ OF ACQUIRED STORAGE IN GPR 1 (FOR BIG BLOCKS)
*              - FLAG SET IF MOVE REQUESTED (FOR BIG BLOCKS)
*              - NUMBER OF BYTES LEFT IN BUFFER IN RSBFLWA
*
*        OUTPUT- @ OF NEXT BLOCK IN RSBFSTAD AND IN GPR 7
*              - NUMBER OF BYTES LEFT IN BUFFER IN RSBFLWA
*              - APPENDAGE LENGTH SET TO ZERO
*
         SPACE 3
R13A1    DS    0H                  BUFFER HANDLER ROUTINE
         STM   R1,RF,CKSAVAR+N4    SAVE REGS
         LA    RD,RSREGSAV         SAVE AREA ADDRESS
         L     R3,RPLNT            LENGTH OF BLOCK
         L     R4,RSBFLWA          REMAINING BYTES
         L     RA,RSBFSTAD         NEXT ADDRESS IN BUFFER
         LA    RA,N1(RA)           ALLOW FOR CODE BYTE
         BCTR  R4,R0               ALLOW FOR CODE BYTE
         TM    RSSWIT1,BIGBLOCK    IS THIS A BIG BLOCK
         BZ    R13A2               NO-BRANCH
         NI    RSSWIT1,ON-BIGBLOCK YES- TURN OFF SWITCH
R13B1    EQU   *                                               @ZA14558
         C     R3,HUNDRED          ARE BYTES GREATER THAN FF ? @ZA14558
         BNL   CMVCL               YES BRANCH                  @ZA14558
         CR    R3,R4               ARE BYTES LEFT IN BLOCK GT  @ZA14558
*                                  BYTES LEFT IN BUFFER
         BNH   R13F1               NO   USE BLOCK LENGTH
         LR    R2,R4               YES  USE BYTES LEFT IN BUFFER
         BAL   R5,R13E1            MOVE IN SUR
BACK     EQU   *                                               @ZA14558
         L     R1,RSW001           RESTORE PTR TO NEXT BYTE IN GOTTEN
*                                  CORE
         B     R13B1               LOOP WITH LEFT OVER BYTES
R13F1    LR    R2,R3               USE BLOCK LENGTH AS CTR
         B     R13E1               MOVE IN SUR
* FOR BLOCKS GREATER THAN FF IN LENGHT WE WILL USE A MVCL      @ZA14558
CMVCL    EQU   *                                               @ZA14558
         CR    R3,R4               LENGTH > BUFFER REMAINDER ? @ZA14558
         BH    CMVCL1              YES BRANCH AND USE BFR SIZE @ZA14558
         LR    R2,R3               USE BLOCK LENGTH            @ZA14558
         LR    R6,R1               SET UP REG 6 TO FIELD       @ZA19627
         LR    R7,R2               SET REG 7 TO LENGTH         @ZA19627
         B     AHEAD               BRANCH AROUND               @ZA19627
CMVCL1   EQU   *                                               @ZA14558
         LR    R2,R4               SET LENGTH IN REG 2         @ZA14558
         LR    R6,R1               POINT R6 TO FIELD           @ZA14558
         LR    R7,R4               SET LENGTH IN REG 7         @ZA14558
AHEAD    EQU   *                                               @ZA19627
         LR    R8,RA               POINT R8 TO SUR             @ZA14558
         LR    R9,R2               SET LENGTH IN REG 9         @ZA14558
         MVCL  R6,R8               MOVEIT                      @ZA14558
         L     R9,RSMWOFST         SET REG 9                   @ZA14558
         AR    R9,RC               RESTORE REG 9               @ZA14558
         AR    RA,R2               INCREMENT BUFFER ADDRESS    @ZA14558
         AR    R1,R2               INCREMENT FIELD ADDRESS     @ZA14558
         ST    R1,RSW001           SAVE POINTER TO FIELD       @ZA14558
         SR    R4,R2               GET BYTES LEFT IN BUFFER    @ZA14558
         SR    R3,R2               GET BYTES LEFT IN BLOCK     @ZA14558
         BZ    R13A3               NONE LEFT BRANCH            @ZA14558
         LTR   R4,R4               TEST BUFFER BYTES LEFT      @ZA14558
         BNZ   BACK                NOT ZERO BRANCH             @ZA14558
         BAL   R7,R13D2            ZERO READ SUR               @ZA14558
         B     BACK                TEST NEXT FIELD             @ZA14558
         EJECT
*
*        MOVE IN SUR ROUTINE
*
R13E1    DS    0H                  SUR PROCESSING
         BCTR  R2,R0               DECREMENT COUNT
         EX    R2,RSMOVE           EXECUTE MOVE
         LA    R2,N1(R2)           INCREMENT COUNT
         AR    RA,R2               INCREMENT BUFFER PTR
         AR    R1,R2               INCREMENT AREA POINTER
         ST    R1,RSW001           SAVE PTR TO NEXT BYTE IN GOTTEN
         SR    R4,R2               GET BYTES LEFT IN BUFFER
         SR    R3,R2               GET BYTES LEFT IN BLOCK
         BZ    R13A3               NO MORE BYTES IN BLOCK
         LTR   R4,R4               ANY MORE BYTES IN BUFFER
         BCR   NE,R5               YES, RETURN
         BAL   R7,R13D2            READ NEW DATA
         BR    R5                  RETURN
         SPACE 2
R13A2    SR    R4,R3               COMPUTE NEW REMAINDER
         S     R4,RSAPPLNT         ALLOW FOR APPENDAGE, IF ANY
         BZ    R13D1               NO MORE BYTES LEFT IN BUFFER
         AR    RA,R3               GET PTR TO NEXT DATA
         A     RA,RSAPPLNT         ALLOW FOR APPENDAGE, IF ANY
R13A3    CLI   N0(RA),N0           MORE USEABLE DATA IN BUF
         BE    R13D1               NO
         LTR   R4,R4               ANY MORE BYTES IN BUFFER
         BZ    R13D1               NO
         ST    RA,RSBFSTAD         ADDRESS OF NEW DATA
         ST    R4,RSBFLWA          RESTORE REMAINDER
R13C1    XC    RSAPPLNT(N4),RSAPPLNT ZERO THE APPENDAGE LENGTH
         ST    RA,CKSAVAR7         SET UP @ OF NEW BLOCK FOR RETURN
         LM    R1,RF,CKSAVAR+N4    RESTORE REGS
         BR    RE                  RETURN
R13D1    BAL   R7,R13D2            TO I/O ROUTINE
         B     R13C1               RETURN
         EJECT
*
*        ROUTINE TO HANDLE I/O
*
*        INPUT - RETURN ADDRESS IN GPR 7
*
*        OUTPUT- NEW RECORD READ AND BUFFER POINTERS ADJUSTED
*
         SPACE 3
R13D2    DS    0H                  I/O HANDLER
         LR    RA,RC               BASE ADDRESS
         A     RA,RSBFOFST         ADD OFFSET TO BUFFER
         READ  RSDECB1,SF,,(RA),,MF=E
         CHECK RSDECB1
         CLI   RSRETCOD+N1,ZERO    I/O ERRORS                   YA00153
         BNE   RPMERR              YES                          YA00153
         ST    RA,RSBFSTAD         1ST BYTE OF BUFFER
         LA    R4,SURL             GET BUFFER LENGTH
         ST    R4,RSBFLWA          INITIALIZE LENGTH OF BUFFER
         BR    R7                  RETURN
         SPACE 3
*
*        SYNAD ROUTINE
*
         SPACE 3
RPM127   DS    0H                  SYNAD ROUTINE
         MVI   RSRETCOD+N1,ERR036       I/O ERROR CODE         @ZSUT222
         L     R1,RSIOBPT1              GET ADDR OF IOB         YA00153
         TM    N13(R1),WLR              IS THIS WRONG LEN ERR   YA00153
         BCR   ZEROES,RE                NO - RETURN             YA00153
         MVI   RSRETCOD+N1,ERR042       SET WLR ERROR CODE     @ZSUT222
         RETURN
*
         EJECT
*                                                                Y02076
*        SETLOCK ERROR SET ROUTINE                               Y02076
*                                                                Y02076
         SPACE 2
RPMSLERR MVI   RSRETCOD+N1,ERR202  STORE SETLOCK ERROR CODE    @ZSUT222
         B     RPMERR              GO XCTL TO ERROR LOAD         Y02076
         SPACE 3
RSMOVE   MVC   N0(N1,R1),N0(RA)    MOVE IN BLOCK
         EJECT
*
*        CDSEARCH ROUTINE INTERFACES WITH SYSTEM IEAQCDSR
*                 ROUTINE TO FIND A CDE ON THE LPA CDE QUEUE.
*
*        INPUT - GPR 6 CONTAINS @ OF NAME TO BE FOUND
*                GPR 14 RETURN ADDRESS
*
*        OUTPUT- GPR2= @ OF CDE IF FOUND
*                    = 0 IF NOT FOUND
*
*
         SPACE
CDSEARCH STM   R3,RF,RSREGSAV      SAVE REGS IN RESTART WORK AREA
         L     R4,RSTCBAD          GET @ OF TCB FOR IEAQCDSR
         L     RE,CVTPTR           GET @ OF CVT
         USING CVT,RE              CVT
         L     R8,CVTQLPAQ         GET @ OF ACTIVE LPA CDE QUEUE
         LR    R9,R6               SET UP @ OF SEARCH NAME FOR RTN
         L     RE,CVTQCDSR         GET @ OF CDE QUEUE SEARCH ROUTINE
         DROP  RE                  CVT
         BALR  RE,RE               SEARCH LPAQ VIA IEAQCDSR
         NOPR  R0                  FALL THROUGH
         NOPR  R0                  FALL THROUGH
         LR    R2,RB               MOVE CDE @ TO OUTPUT REG
*                                  NOTE-- RB HAS @ IF FOUND OR 0
*                                          IF NOT FOUND.
         LM    R3,RF,RSREGSAV      RESTORE REGS
         BR    RE                  RETURN TO CALLER
         EJECT
*
*        CONSTANTS
         DS    0F
HUNDRED  DC    X'00000100'         DEC 256  HEX 100            @ZA14558
RMRBLINK DC    A(RBLINK-RBPRFXST)  OFFSET TO RBCHAIN FIELD IN RB
RM3NAME  DC    C'IGC0705B'         NAME OF REPMAIN 3
MODID    DC    CL8'IGC0605B'       MODULE ID                   @ZSUT222
EOVRETNM DC    C'IFG0551N'         EOV EXIT RTN RET NAME         Y02076
RMH4     DC    H'4'                4 - USED TO COMPUTE @ OF IEASVCNO
RMH4096  DC    H'4096'             PAGE SIZE FOR BUILDING FIX LIST
RMSP253  DC    AL1(253)            SUBPOOL 253 FOR SCB           Y02076
RMSP254  DC    AL1(254)            SUBPOOL 254 FOR FIX PARAMETER LIST
RMSP255  DC    AL1(255)            SUBPOOL 255
RMRC8    DC    AL1(8)              RETURN CODE OF 8              Y02076
         SPACE 3
*        PATCH AREA FOR MAINTENANCE OF 10%
         SPACE 3
PATCH    EQU   *                   PATCH AREA
RM2LEN   EQU   PATCH-IGC0605B      LENGTH OF MODULE
PATCHLEN EQU   RM2LEN/10           LENGTH OF PATCH AREA REQUIRED
RM2PATCH DS    CL(PATCHLEN)        PATCH AREA FOR MAINTENANCE
         EJECT
*
*        GENERAL REGISTER EQUATES
*
         SPACE 3
R0       EQU   0                   0
R1       EQU   1                   1
R2       EQU   2                   2
R3       EQU   3                   3
R4       EQU   4                   4
R5       EQU   5                   5
R6       EQU   6                   6
R7       EQU   7                   7
R8       EQU   8                   8
R9       EQU   9                   9
RA       EQU   10                  10
RB       EQU   11                  11
RC       EQU   12                  12
RD       EQU   13                  13
RE       EQU   14                  14
RF       EQU   15                  15
         SPACE 3
*
*        GENERAL EQUATES
*
         SPACE 3
N0       EQU   0                   0
N1       EQU   1                   1
N2       EQU   2                   2
N3       EQU   3                   3
N4       EQU   4                   4
N5       EQU   5                   5
N8       EQU   8                   8
N9       EQU   9                   9
N13      EQU   13                       CONSTANT 13             YA00153
X80      EQU   X'80'               MASK TO SET HIGH ORDER BIT OF BYTE
CDECODE  EQU   9                   CHECKCODE FOR CDE
CDELEN   EQU   32                  LENGTH FOR CDE                Y02076
XLCODE   EQU   X'17'               CHECKCODE FOR EXTENT LIST
LLEJCODE EQU   X'0A'               CHECKCODE FOR LLE W/CDE ON JPQ
LLELCODE EQU   X'0E'               CHECKCODE FOR LLE W/CDE ON LPAQ
LLELEN   EQU   12                  LENGTH OF AN LLE              Y02076
LLEAPLEN EQU   12                  LENGTH OF SUR APPENDAGE FOR LLE
PRBSCODE EQU   5                   CHECKCODE FOR SYNCHED PRB
PRBLCODE EQU   X'0C'               CHECKCODE FOR PRB W/CDE ON LPAQ
PRBJCODE EQU   X'0B'               CHECKCODE FOR PRB W/CDE ON JPQ
SVRB234C EQU   X'1F'               CHECKCODE FOR TYPE 2, 3, 4 SVRB
SVRB4NCD EQU   X'1E'               CHECKCODE FOR TYPE 4N SVRB
SVRBEOVC EQU   X'1D'               EOV SVRB CODE IN SUR          Y02076
SVRB234A EQU   5                   SUR APP. LEN. FOR TYPE 2,3,4, SVRB
RBLPALEN EQU   12                  SUR APP. LEN. FOR 4N SVRB, LPAQ PRB
NSTAECOD EQU   X'0D'               CHECKCODE FOR TCBNSTAE FIELD
NSTAELEN EQU   4                   LENGTH OF TCBNSTAE FIELD OF TCB
SCBCODE  EQU   X'11'               CHECKCODE FOR SCB
FOECODE  EQU   X'08'               CHECKCODE FOR FOE
CC0      EQU   8                   MASK FOR CONDITION CODE 0
EQ       EQU   8                   MASK FOR EQUAL COMPARE (CC=0)
NE       EQU   7                   MASK FOR UNEQUAL COMPARE (CC=1,2,3)
ONES     EQU   1                   MASK TO BRANCH ON ONES (CC=3)
M1       EQU   1                   MASK FOR BYTE 3 OF REG
M3       EQU   3                   MASK FOR BYTES 2&3 OF REG
M6       EQU   6                   MASK FOR BYTES 1&2 OF REG
M7       EQU   7                   MASK FOR ICM/STCM TO GET 3 LO BYTES
M8       EQU   8                   MASK FOR ICM TO BYTE 0 OF REG.
MF       EQU   15                  MASK FOR ICM FOR WHOLE REG
PC0      EQU   0                   MASK TO TEST FOR POST CODE OF 0
PC4      EQU   4                   MASK TO TEST FOR POST CODE OF 4
PC40     EQU   X'40'                   ECB CODE-SUCCESS PGFIX  @ZA01488
ON       EQU   255                 ALL ONES
SURL     EQU   400                 LENGTH OF SUR BUFFER          YM7049
CHAR9    EQU   C'9'                EBCDIC 9
ERR036   EQU   36                  ERROR CODE FOR I/O ERROR    @ZSUT222
ERR052   EQU   52                  ERROR CODE IF LPA OR NUCLEUS@ZSUT222
*                                  MODULE HAS BEEN REMOVED     @ZSUT222
*                                  SINCE CHECKPOINT WAS TAKEN. @ZSUT222
ERR053   EQU   53                  ERROR CODE IF LPA OR NUCLEUS@ZSUT222
*                                  MODULE HAS BEEN MOVED SINCE @ZSUT222
*                                  CHECKPOINT WAS TAKEN.       @ZSUT222
ERR201   EQU   201                      PGFIX ERROR CODE       @ZSUT222
ERR202   EQU   202                      SETLOCK ERROR CODE     @ZSUT222
ZERO     EQU   0                        0 FOR TESTING RET CODE  YA00153
ZEROES   EQU   8                        CONDITION FOR BCR       YA00153
WLR      EQU   X'40'                    WRONG LENGTH RECORD     YA00153
*                                       INDICATION IN IOB       YA00153
ERR042   EQU   42                       ERROR CODE FOR WRONG   @ZSUT222
*                                       LENGTH RECORD WHILE     YA00153
*                                       READING CHKPT D/S       YA00153
         EJECT
*
*              DESCRIPTION OF REPMAIN WORK AREA
*
         SPACE 3
RPMWA1   DSECT
RPMERAS1 DS    F                   TEMP SAVE AREA                Y02076
RMNEOV   DS    A                   RESERVED
RSBFSTAD DS    A                   BUFFER POINTERS
RSBFLWA  DS    A                   *
RPMMSS1  DS    A                   ADDRESS OF NEW STC MSS CHAIN
RPMMSS2  DS    A                   ADDRESS OF NEW INIT MSS CHAIN
RPMMSS3  DS    A                   ADDRESS OF NEW P/P MSS CHAIN
RPMRB    DS    A                   ADDRESS OF RESTORED RB CHAIN
RPMLLE   DS    A                   ADDRESS OF RESTORED LLE CHAIN
RPMCDE   DS    A                   ADDRESS OF RESTORED CDE CHAIN
RPMDEB   DS    A                   ADDRESS OF RESTORED DEB CHAIN
RPMFOE   DS    A                   ADDRESS OF RESTORED FOE CHAIN
RSCORE   DS    A                   ADDRESS OF CORE ACQUIRED BY LAST GM
RSW001   DS    F                   *
RSW002   DS    F                   *
RPLNT    DS    A                   LENGTH OF THE BLOCK
RMADEOV  DS    F                   SAVE AREA FOR INFORMATION NEEDED
         DS    0D                  ALIGNMENT
CKSAVAR  DS    16F                 SAVE AREA
CKSAVAR6 EQU   CKSAVAR+24          SAVE CELL FOR GPR'S 6-9       Y02076
CKSAVAR7 EQU   CKSAVAR+28          SAVE CELL FOR REG 7           Y02076
CKSAVARE EQU   CKSAVAR+56          SAVE CELL FOR GPR 14.
RPMN40   DS    D                   MODULE NAME FOR XCTL
RP40XCTL DS    F                   POINTER TO XCTL PARAMETER LIST
RSSWIT1  DS    X                   SWITCH
BIGBLOCK EQU   1                   BIG BLOCK SWITCH
RSAPPLNT DS    F                   LENGTH OF SUR APPENDAGE
RMCDSAV  DS    F                   SAVE CELL FOR LPA CDE SEARCH
         EJECT
         IEEVRSWA
         EJECT
         CVT   DSECT=YES
         EJECT
         IHASCVT
         EJECT
         IKJTCB
         EJECT
         IKJRB
         EJECT
         IHASCB
         EJECT
         IHACDE
         EJECT
         IHAPSA
         EJECT
         IHAXTLST
         EJECT
         IHALLE
         EJECT
         IHAFOE
         EJECT
         IHADCB DSORG=(PO,PS),DEVD=(DA,TA)
         END
