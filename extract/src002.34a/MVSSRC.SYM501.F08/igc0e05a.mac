         TITLE 'IGC0E05A  TCAM ABEND FORMAT             INTRO COMMENTS'
***********************************************************************
*                                                                     *
* MODULE NAME = IGC0E05A (TCAM, COMPONENT ABEND, MVS SYSTEM)          *
*                                                                     *
* DESCRIPTIVE NAME = TCAM ABEND FORMAT ROUTINE                        *
*                                                                     *
* COPYRIGHT = NONE                                                    *
*                                                                     *
* STATUS = VERSION 10.0                                               *
*                                                                     *
* FUNCTION = TO DUMP IN HEX OFFSET FORMAT THE BASIC TCAM CONTROL      *
*            BLOCKS AND DISPLAY ADDRESSES AND DATA FOR EACH TERMINAL  *
*            AND MH TABLE ENTRY.                                      *
*                                                                     *
*            TO OPTIONALLY DUMP IN HEX OFFSET FORMAT, THE CONTROL     *
*            BLOCKS WHOSE ADDRESSES WERE DISPLAYED.                   *
*                                                                     *
*    DEPENDENCIES = THIS MODULE IS CHARACTER DEPENDENT (EBCDIC)       *
*                   MUST RUN IN A MVS SYSTEM                          *
*    PATCH LABEL = THE SYMBOLIC NAME OF THE AREA FOR SERVICING        *
*    THIS MODULE IS "PATCH".  THE AREA IS RESERVED FOR FUTURE USE.    *
*                                                                     *
* MODULE TYPE = PROCEDURE                                             *
*                                                                     *
*    PROCESSOR = ASSEMBLER                                            *
*                                                                     *
*    ATTRIBUTES = THIS MODULE IS REFRESHABLE, REENTRANT, AND REUSABLE *
*                                                                     *
* ENTRY POINT = IGC0E05A           (FROM  IEAVAD08)                   *
*                                                                     *
*    LINKAGE = AT ENTRY, GENERAL REGISTER FIFTEEN (15) CONTAINS THE   *
*    ADDRESS OF THE ENTRY POINT OF THIS MODULE, AND GENERAL REGISTER  *
*    ONE (1) CONTAINS THE ADDRESS OF THE ABEND PARAMETER LIST.        *
*    REG 13 HAS A REG SAVE AREA ADDR WITHIN IT.                       *
*                                                                     *
* ENTRY POINT = HEXSPIE, ACRSPIE, ABORT2  (FROM  IEAVTAS2)            *
*               AT THE ABOVE ENTRY POINTS R13 POINTS TO A REG SAVE    *
*               AREA, AND R1 POINTS TO A SDWA.  THE BASE REG MUST BE  *
*               REESTABLISHED FROM THE SDWA IN ORDER TO GET SETRP TO  *
*               RUN CORRECTLY                                 @ZM46635*
*                                                                     *
* INPUT = ABENDING TCAM SYSTEM                                        *
*                                                                     *
* OUTPUT = FORMATTED DUMP OF BASIC CONTROL BLOCKS AND                 *
*          OPTIONALLY, MAJOR TCAM CONTROL BLOCKS AND OPTION FIELDS.   *
*          NOTE: THE MVS FORMATTED DUMP IS UNABLE TO EJECT TO THE     *
*                TOP OF A PAGE (AS IS DONE IN SVS AND VS1).  THIS IS  *
*                BECAUSE OF IMPACTS PLACED ON THE CONTROL LIST DSECT, *
*                IHAABDA, WITHIN THE MVS SU'S.                        *
*                                                                     *
*                                                                     *
* EXIT-NORMAL  REG 15 = 0                                             *
*                                                                     *
* EXIT-ERROR   REG 15 = 4                                             *
*                                                                     *
* EXTERNAL ROUTINES =            ABEND OUTPUT INTERFACE MODULE        *
*                                WHICH IS THE PRINT ROUTINE USED      *
*                                FOR OUTPUT                           *
*                                                                     *
* DATA AREAS = SEE DYNAM DSECT MAP FOR THE GETMAIN AREA OBTAINED      *
*                                                                     *
* CONTROL BLOCKS = CVT,TCB,TCX,AIB,AVT,OPCAVT,RESPL,OLTCB,PCB,PEB,    *
*                  PEWA,DCT,NAT,LCB,SCB,LGB,PLCB,QCB,TNT,TRM,DCB      *
*                                                                     *
* TABLES = NONE                                                       *
*                                                                     *
* MACROS = CVT,DCBD,IHAABDPL,TAIBD,                                   *
*          OLTCB,RESPL,SAVE,TACSMD,TAVTD,TDEBD,TLCBD,TLGBD,           *
*          TTNATD,TOPCAVTD,TPCBD,TPEBD,TPEWAD,TQCBD,TRVTD,TSATD,      *
*          TSCBD,TSIBD,TTCBD,TTCXD,TTNTD,TTRMD                        *
*                                                                     *
*                                                                     *
*                        PROGRAM STRUCTURE                            *
*     LEVEL 1     LEVEL 2     LEVEL 3     LEVEL 4     EXTERNAL        *
*                                                                     *
*     MAINLINE    TNTLKUP     ACRTN       ACRSUB(S)   IEAVAD81        *
*                 MHNLKUP     HEXDUMP     GETCORE                     *
*                             TBLPRINT    PDRRTN(S)                   *
*                             OPTPRINT    EJECT                       *
*                                         PRINT                       *
*                                         SPIESETD                    *
*                                         SPIERSET                    *
*                                         SPIESET                     *
*                                                                     *
*                                                                     *
* CHANGE ACTIVITY =                                                   *
*A000000-999999                                                @G36XRBF
*                                       PEWA DSECT CHG         @OZ27843
* A144900,195260,539000                                        @OZ29004
*C363700,686500                                                @OZ31435
* C371400,828300                                               @OZ32381
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
*                                                                     *
***********************************************************************
         TITLE 'IGC0E05A  TCAM ABEND FORMAT                     MACROS'
         MACRO
&ACR     ACR   &Y,&X,&OFFSET,&CALL=,&LIST=
         AIF   (T'&CALL EQ 'O').ACR10
&ACR     DC    AL1(ACRRTNF)        INDICATE ROUTINE CALL
         DC    AL3(&CALL)          POINTER TO ROUTINE
         MEXIT
.ACR10   AIF   (T'&LIST EQ 'O').ACR20
&ACR     DC    AL1(ACRLISTF)       INDICATE LIST CHAIN
         DC    AL3(&LIST)          POINTER TO LIST
         MEXIT
.ACR20   AIF   (&Y LT 32).ACR30
         MNOTE 8,'Y VALUE OF &Y EXCEEDS 31'
.ACR30   AIF   (&X LT 32).ACR40
         MNOTE 8,'X VALUE OF &X EXCEEDS 31'
.ACR40   ANOP
&ACR     DC    AL1(&Y*4)           Y
         DC    AL1(&X*4)           X
         DC    AL2(&OFFSET)        DISPLACEMENT
         MEND
         SPACE 8
         MACRO
&PRNT    PRNT
&PRNT    BAL   R14,PRINT           CALL PRINT SUBROUTINE
         MEND
         SPACE 6
         MACRO
&OPTYP   OPTYP &X,&C
&OPTYP   DC    XL1'&X'             OPTION ARGUMENT
         DC    CL1'&C'             CHARACTER
         MEND
         EJECT
         MACRO
&PDR     PDR   &N,&M,&I,&PRT=PRTASA,&FLG=0,&CHN=0,&RTN=,&OFF=
         LCLA  &LEN
&LEN     SETA  L'&PRT-1
&PDR     DC    A(&M)               MASK
         AIF   (T'&RTN EQ 'O').PDR10
         DC    A(&RTN)             OFFSET CALCULATION ROUTINE
         DC    AL1(&FLG+PDRRTN+&LEN) FLAGS
         AGO   .PDR20
.PDR10   DC    AL2(&OFF(1))        STARTING OFFSET
         DC    AL2(&OFF(2))        ENDING OFFSET
         DC    AL1(&FLG+&LEN)      FLAGS AND LENGTH - 1 FOR MOVE
.PDR20   DC    CL10'&N'            NAME OF CONTROL BLOCK
         DC    AL1(&I*4)           INDEX
         DC    AL1(&PRT-PRTASA)    PRINT COLUMN IN FORMAT      @ZM56635
         DC    AL2(&CHN)           CHAIN LINK OFFSET
.MEND    SPACE
         MEND
         SPACE 8
         MACRO
&TDR     TDR   &N,&T,&L,&MASKS=
&TDR     DC    A(&MASKS)           MASKS VALUE
         DC    CL4'&N'             TYPE NAME
         AIF   (K'&T EQ 2).TDRHEX
         DC    AL1(&T)             TYPE LOOKUP ARGUMENT
         AGO   .TDRPTR
.TDRHEX  DC    XL1'&T'             TYPE LOOKUP ARGUMENT
.TDRPTR  DC    AL3(&L)             POINTER TO ACR LIST
         SPACE
         MEND
         TITLE 'IGC0E05A  TCAM ABEND FORMAT                    EQUATES'
*              REGS 0,1,2,3,4,15 MAY BE USED BY ANY LEVEL WITHOUT
*              RESTORING THE CONTENTS ON RETURN FROM A CALLED LEVEL
*              UNLESS THEY WHERE A PARAMETER TO THAT LEVEL.
         SPACE 2
R0       EQU   0                   WORK REG
R1       EQU   1                   PARM, LIST, AND WORK REG
R2       EQU   2                   WORK REG FOR ALL LEVELS
R3       EQU   3                   WORK REG FOR ALL LEVELS
R4       EQU   4                   WORK REG FOR ALL LEVELS
R5       EQU   5                   PDR TABLE
R6       EQU   6                   POINTER TO PRINT BUFFER
R7       EQU   7                   CURRENT OPTIONS MASK
R8       EQU   8                   3RD LEVEL ROUTINE FOR 2ND LEVEL
R9       EQU   9                   POINTER TO TCX, TABLE ADDR  @XM05835
R10      EQU   10                  POINTER TO AVT
R11      EQU   11                  POINTER TO ABEND PARM LIST
R12      EQU   12                  BASE REG
R13      EQU   13                  SAVE AREA AND WORKAREA POINTER
R14      EQU   14                  RETURN
R15      EQU   15                  CALL, WORK, AND RETURN CODE REG
         SPACE 2
D0       EQU   0                   DISPLACEMENT OF ZERO
D1       EQU   1                   DISPLACEMENT OF ONE
D2       EQU   2                   DISPLACEMENT OF TWO
D3       EQU   3                   DISPLACEMENT OF THREE
D4       EQU   4                   DISPLACEMENT OF FOUR
D8       EQU   8                   DISPLACEMENT OF EIGHT
D10      EQU   10                  DISPLACEMENT OF TEN
D12      EQU   12                  DISPLACEMENT OF TWELVE
D20      EQU   20                  DISPLACEMENT OF TWENTY
D64      EQU   64                  DISPLACEMENT OF SIXTY FOUR
         SPACE 2
L0       EQU   0                   LENGTH OF ZERO
L1       EQU   1                   LENGTH OF ONE
L2       EQU   2                   LENGTH OF TWO
L3       EQU   3                   LENGTH OF THREE
L4       EQU   4                   LENGTH OF FOUR
L5       EQU   5                   LENGTH OF FIVE
L7       EQU   7                   LENGTH OF SEVEN
L8       EQU   8                   LENGTH OF EIGHT
L9       EQU   9                   LENGTH OF NINE
L31      EQU   31                  LENGTH OF THIRTY ONE (HEX 1F)
         SPACE 2
LO16     EQU   3                   MASK FOR TTCIN COMPARES
ADDR     EQU   7                   MASK FOR ADDRESS COMPARES
RVTCVTW  EQU   32                  SAT OFFSET CALC. SHIFT VALUE
         EJECT
BLANK    EQU   C' '                BLANK CHARACTER
SP1      EQU   C' '                ASA, SINGLE SPACE BEFORE PRINT
SP2      EQU   C'0'                ASA, DOUBLE SPACE BEFORE PRINT
SP3      EQU   C'-'                ASA, TRIPLE SPACE BEFORE PRINT
TENLINES EQU   10                  SPACE TEN LINES
THREELIN EQU   3                   SPACE THREE LINES
LVLCNVT  EQU   C'0'-C'A'           VALUE TO ADD TO A TO GET 0
ASKTER   EQU   C'*'                ASKTERISK
LPARN    EQU   C'('                LEFT PARENTHSIS
RPARN    EQU   C')'                RIGHT PARENTHSIS
         SPACE 2
*              ABEND FORMATTING PARAMETERS
         SPACE 1
ADFRUN   EQU   1                   FIRST TIME SWITCH
ADFAMWA  EQU   2                   FORMAT ACCESS METHOD WORK AREAS
ADFPEWA  EQU   4                   FORMAT PROCESS ENTRY WORKAREA
ADFPCB   EQU   8                   FORMAT PROCESS CONTROL BLOCKS
ADFSIB   EQU   16                  FORMAT SESSION INFORMATION BLOCKS
ADFRVT   EQU   32                  FORMAT RESOURCE VECTOR TABLE
ADFDCT   EQU   64                  FORMAT DEVICE CHARACTERISTICS TABLE
ADFLGB   EQU   128                 FORMAT LINE GROUP BLOCKS
ADFDCB   EQU   256                 FORMAT DCBS
ADFDEB   EQU   512                 FORMAT DATA EXTENT BLOCKS
ADFSCB   EQU   1024                FORMAT STATION CONTROL BLOCKS
ADFPLCB  EQU   2048                FORMAT PSEUDO LINE CONTROL BLOCKS
ADFLCB   EQU   4096                FORMAT LINE CONTROL BLOCKS
ADFQCB   EQU   8192                FORMAT QCBS
ADFOPT   EQU   16384               FORMAT OPTIONS BY NAME
ADFTTE   EQU   32768               FORMAT TERMINAL TABLE ENTRY
ADFUCB   EQU   65536               FORMAT UCBS
ADFU17   EQU   131072              UNDEFINED OPTION
ADFU18   EQU   262144              UNDEFINED OPTION
ADFU19   EQU   524288              UNDEFINED OPTION
ADFU20   EQU   1048576             UNDEFINED OPTION
ADFU21   EQU   2097152             UNDEFINED OPTION
ADFU22   EQU   4194304             UNDEFINED OPTION
ADFU23   EQU   8388608             UNDEFINED OPTION
ADFGCOH  EQU   16777216            DISPLAY GROUP COHORT
ADFNWA   EQU   33554432            DISPLAY NETWORK ADDRESS
ADFINDX  EQU   67108864            DISPLAY TERMINAL TABLE INDEX
PGMCHK   EQU   X'0C'                MASK FOR 0CX COMP. CODES   @OZ29004
         TITLE 'IGC0E05A  TCAM ABEND FORMAT                      SETUP'
IGC0E05A CSECT
         USING IGC0E05A,R15
         SAVE  (14,12),,IGC0E05A-&SYSPARM
         LR    R12,R15             SETUP BASE REG
         LA    R8,2048(,R12)
         LA    R8,2048(,R8)         SETUP SECOND BASE REG
         USING IGC0E05A+4096,R8
         DROP  R15
         USING IGC0E05A,R12
         LR    R11,R1              SAVE POINTER TO ABEND PARM LIST
         USING ABDPL,R11
*
*        VALIDATE THAT TCAM'S FORMATED DUMP SHOULD BE RUN
*
         TM    ADPLFLAG,ADPLSYTM   OS/VS1 SYSTEM
         BO    EXIT1               YES - - EXIT                @ZM46635
         L     R4,ADPLTCB          ABENDING TCB
         L     R5,ADPLCVT          CVT BASE
         LH    R3,ADPLASID         ABENDING TASK ASID
         LTR   R4,R4               MEMORY TERMINATION
         BZ    EXIT1               YES - - EXIT                @ZM46635
         USING CVT,R5              CVT BASE
         L     R5,CVTAQAVT         TCX ADDR
         LA    R5,D0(,R5)          CLEAR HI ORDER BYTE
         LTR   R5,R5               TCX BUILT
         BZ    EXIT1               NO - - EXIT                 @ZM46635
         DROP  R5
         USING IEDQTCX,R5          TCX BASE
         LH    R2,TCXASID          MCP ASID
         L     R5,TCXTCB           MCP TCB
         CR    R2,R3               CORRECT MEMORY
         BNE   EXIT1               NO - - EXIT                 @ZM46635
         USING IEDQTCB,R4          ABENDING TCB BASE
         LR    R6,R4               SAVE ABENDING TCB ADDR
         LA    R4,D0(,R4)          CLEAR HI ORDER BYTE
         LA    R5,D0(,R5)          CLEAR HI ORDER BYTE
         CR    R4,R5               SAVE TCB                    @ZM46635
         BNE   EXIT1               BRANCH IF MCP NOT ABENDING
         L     R4,TCBJSTCB         JOBSTEP TCB
         LA    R4,D0(,R4)          CLEAR HI ORDER BYTE
         DROP  R4
         USING IEDQTCB,R5          MCP TCB
         L     R5,TCBJSTCB         JOB STEP TCB
         LA    R5,D0(R5)           CLEAR HI ORDER BYTE
         DROP  R5
         CR    R4,R5               SAME JS TCB
         BNE   EXIT1               NO - - RETURN               @ZM46635
         USING IEDQTCB,R4          ABENDING TCB
         LR    R4,R6               RESTORE ABENDING TCB ADDR
         L     R5,TCBCMP           COMPLETION CODE
         LA    R5,D0(,R5)          CLEAR FLAG
         LTR   R5,R5               DID TASK ABEND
         BZ    EXIT1               NO - - DO NOT FORMAT        @ZM46635
         L     R6,ADPLBUF          LOAD PRINT BUFFER ADDRESS
         BCTR  R6,0                BACK UP TO CARRIAGE COUNTROL
         USING PRTLINE,R6
         GETMAIN EC,LV=DYNAMS,A=ADPLDYNM,SP=253,MF=(E,ADPLWK1)
         LTR   R15,R15             TEST IF GETMAIN WORKED
         BP    ABORT1              NO ABORT
         L     R15,ADPLDYNM        POINT TO DYNAMIC AREA
         USING DYNAM,R15
         ST    R13,SAVEAREA+D4     CHAIN CALLER'S SAVEAREA
         ST    R15,D8(R13)         BACK CHAIN MY SAVE AREA
         DROP  R15
         LR    R13,R15             POINT TO MY SAVE AREA
         USING DYNAM,R13
         TITLE 'IGC0E05A  TCAM ABEND FORMAT                   MAINLINE'
         XC    ACRVECT(ACRVECTS),ACRVECT  CLEAR ALL ADDRESS CELLS
         MVC   ACRV1,ADPLCVT       INITIALIZE POINTER TO CVT   @XM05835
         LA    R9,ACRBASIC         POINT TO ADDRESS COMPUTATION LIST
*                                                              @XM05835
         BAL   R14,ACRTN           CALL ADDRESS COMPUTATION ROUTINE
*                                                              @XM05835
         LM    R9,R10,ACRV3        LOAD TCX AND AVT ADDRESSES
         USING IEDQTCX,R9
         USING IEDQAVTD,R10
         TM    TCXABEPL+D3,ADFRUN  HAS FORMAT ROUTINE ALREADY RUN ?
         BO    EXIT                YES
         OI    TCXABEPL+D3,ADFRUN  SET FIRST TIME SWITCH ON
         MVC   PARMTCX,TCXABEPL    MOVE TCX PARAMETERS         @XM05835
         DROP  R9                                              @XM05835
         LA    R0,TENLINES         SPACE TEN LINES
         BAL   R14,LINSPACE        NUMBER OF LINES SO SPACE
         LA    R1,IEDQAVTD         POINT TO AVT
         SH    R1,TWO              COMPUTE AVT LEVEL/MOD ADDRESS
         MVC   PRTTITLE,TITLE      MOVE TITLE TO PRINT
         MVC   PRTTMOD,D1(R1)      MOVE TCAM MODIFICATION LEVEL TO PRT.
         IC    R1,D0(R1)           GET TCAM LEVEL
         LA    R1,LVLCNVT(R1)      CONVERT A TO 0 THRU I TO 9
         STC   R1,PRTTLVL          STORE TCAM LEVEL IN TITLE
         PRNT                      PRINT TITLE LINE
         MVI   PRTASA,SP3          FORCE NEXT LINE TO TRIPLE SPACE
         LA    R5,PDRBASIC         POINT TO BASIC HEX DUMP TABLE
         L     R7,PARMTCX          SET OPT MASK TO PARM LIST @XM05835
         BAL   R14,HEXDUMP         CALL HEX DUMP ROUTINE
         LA    R0,THREELIN         NUMBER OF LINES TO SPACE
         BAL   R14,LINSPACE        BRANCH TO SPACE LINES
         MVC   PRTHDR1,HEAD1       MOVE HEADER FOR PRINTING
         PRNT                      PRINT THE HEADER
         MVC   ROUTADDR,ATBLPRNT   POINT TO OUTPUT ROUTINE
         BAL   R14,TNTLKUP         CALL TERMINAL NAME TABLE LOOKUP
         BAL   R14,MHNLKUP         CALL MH NAME TABLE LOOKUP
         L     R1,OPTIONS          LOAD OPTIONS MASK
         N     R1,PARMTCX          AND AGAINST TCX PARAMETERS  @XM05835
         BZ    DONE                ALL OK, FINISHED
         LA    R0,THREELIN         NUMBER OF LINES TO SPACE
         BAL   R14,LINSPACE        BRANCH TO SPACE LINES
         MVC   ROUTADDR,AOPTPRNT   POINT TO OUTPUT ROUTINE
         BAL   R14,TNTLKUP         CALL TERMINAL NAME TABLE LOOKUP
         BAL   R14,MHNLKUP         CALL MH NAME TABLE LOOKUP
DONE     LA    R0,TENLINES         NUMBER OF LINES TO SPACE
         BAL   R14,LINSPACE        BRANCH TO SPACE LINES
         SLR   R10,R10             CLEAR RETURN TO ZERO
         TITLE 'IGC0E05A  TCAM ABEND FORMAT        EXIT AND ERROR RTNS'
EXIT     SLR   R15,R15             CLEAR SPIE EXIT POINTER
         BAL   R14,SPIESET         SET ABDUMPS EXIT TO ZERO
         LR    R1,R13              LOAD DYNAMIC AREA ADDR
         L     R13,D4(R13)         POINT TO CALLER'S SAVE AREA
         FREEMAIN R,LV=DYNAMS,A=(1),SP=253
EXIT1    EQU   *
         L     R14,D12(R13)        RESTORE CALLERS RETURN ADDRESS
         SLR   R15,R15             SET RETURN CODE REG WITH RETURN CODE
         LM    R0,R12,D20(R13)     RESTORE CALLERS REGS
         BR    R14                 RETURN TO CALLER
         SPACE 4
ABORT2   EQU   *
         STM   R14,R12,12(R13)       SAVE REGS                 @ZM46635
         L     R12,SDWAGR12-SDWA(R1) RELOAD BASE REG           @ZM46635
         SETRP RC=0,REGS=(14,12)    CONTINUE TERMINATION       @OZ29004
ABORT    L     R13,ADPLDYNM        GET DYNAMIC AREA POINTER
         B     EXIT
         SPACE 4
ABORT1   WTO   'IED564I INSUFFICIENT MEMORY TO FORMAT',ROUTCDE=(1),    *
               DESC=(7)
         B     EXIT1
         TITLE 'IGC0E05A  TCAM ABEND FORMAT                 TNT LOOKUP'
TNTLKUP  ST    R14,LVL2SAVE        SAVE RETURN ADDRESS
*                                  NOTE: ACR1+2 SET TO MAX BY ACRBASIC
         XC    ACRV1(L2),ACRV1     CLEAR CURRENT INDEX
TNT10    L     R1,AVTRNMPT         POINT TO TNT
         USING IEDQTNTD,R1
         SLR   R15,R15             CLEAR REG FOR INSERT CHARACTER
         IC    R15,TNTENLEN        GET NAME LENGTH
         LA    R0,L3(R15)          COMPUTE ENTRY WIDTH
         STH   R0,ADPLWK1A         SAVE WIDTH FOR MULTIPLY
         LH    R0,ACRV1            GET OFFSET
         N     R0,LO16BITS         MAKE A POSITIVE 16 BIT NUMBER
         MH    R0,ADPLWK1A         MULTIPLY INDEX TIME WIDTH
         LA    R1,TNTFIRST         POINT TO FIRST ENTRY
         DROP  R1
         AR    R1,R0               ADD OFFSET AND POINT TO CURRENT TNT
         MVC   ADPLWK1(L8),BLANKS  BLANK OUT NAME
         BCTR  R15,0               SUBTRACT ONE FORM VARIABLE MOVE
         EX    R15,TNTMOVE         MOVE NAME TO HOLDING AREA
         AR    R1,R15              POINT TO ADDRESS IN TNT ENTRY
         MVC   ACRV2,D0(R1)        MOVE ADDRESS INTO ACR CELL
         L     R2,ACRV2            POINT TO TERMINAL TABLE ENTRY
         LA    R2,D0(R2)           CLEAR HIGH BITS
         AH    R2,TRMNEGSZ         ADJUST ADDRESS, ADD MAX NEG PREFIX
         USING IEDNTRM,R2
         MVC   ACRV3,TRMSTATE      MOVE STATE AND QCB ADDR TO CELL 3
         LA    R1,TYPTABLE         POINT TO FIRST TDR TABLE ENTRY
*                                  COMPUTE TYPE TABLE LOOKUP ARGUMENT
         PACK  ADPLWK3(L1),TRMSTATE  SWITCH ZONE AND NUMERICS
         NI    ADPLWK3,R15         AND OUT ZONE
         OI    ADPLWK3,TDRSPEC     OR IN SPECIAL FLAG
         TM    TRMSTATE,TRMPREF    IS NEG PREFIX PRESENT
         BZ    TNT21               NO, DO UNTIL LAST ENTRY
         MVC   ADPLWK3(L1),TRMTYPE USE TRMTYPE AS LOOKUP ARG
         B     TNT21               DO UNTIL LAST ENTRY
         DROP  R2
         USING TDRDSECT,R1
TNT20    LA    R1,TDRNEXT          POINT TO NEXT TDR ENTRY
TNT21    CLC   TDRTYPE,ADPLWK3     IS THIS THE MASK ?
         BE    TNT30               FOUND A MATCH, PROCESS ENTRY
         CLI   TDRNEXT,TDRLAST     IS THIS THE LAST ENTRY ?
         BNE   TNT20               NO, TRY NEXT ENTRY
TNT30    L     R7,TDRMASK          SET OPTION MASK
         MVC   ADPLWK3,TDRNAME     MOVE TYPE OF ENTRY INTO HOLD AREA
         XC    ACRV4(ACRLKUCL),ACRV4  CLEAR ACR ROUTINE CELLS
         LH    R14,ACRV1           INCREMENT INDEX FOR ORIGIN OF 1
         N     R14,LO16BITS        ALLOW ONLY 16 BIT VALUE
         LA    R14,D1(R14)         ADD ONE
         STH   R14,ACRV1           UPDATE INDEX
         L     R9,TDRACR           POINT TO ACR LIST           @XM05835
         DROP  R1
         BAL   R14,ACRTN           CALL ACR ROUTINES
         LA    R5,PDROPTN          SET PDR LIST POINTER
         L     R1,ROUTADDR         GET ROUTINES ADDR
         BALR  R14,R1              CALL AS MAINLINE SAID TO
         CLC   ACRV1(L2),ACRV1+D2  CHECK IF LAST ENTRY ?
         BL    TNT10               LOOP BACK UNTIL ALL ARE DONE
         L     R14,LVL2SAVE        RESTORE LEVEL 2 RETURN ADDRESS
         BR    R14                 RETURN
         SPACE 2
TNTMOVE  MVC   ADPLWK1(L0),D0(R1)  MOVE NAME TO HOLDING AREA
         TITLE 'IGC0E05A  TCAM ABEND FORMAT                  MH LOOKUP'
MHNLKUP  ST    R14,LVL2SAVE        SAVE RETURN ADDRESS
         TM    AVTSAVTF,AVTVTMCP   IS FULL SAVT IN SYSTEM
         BZR   R14                 NO, EXIT
         L     R1,AVTSAVTP         GET ADDRESS OF SAVT
         USING IEDNSVTD,R1
         MVC   ACRV10,SAVTMHTB     MOVE ADDRESS TO CELL
         LH    R1,SAVTMHDX         LOAD INDEX OF FIRST MH ENTRY
         DROP  R1
         B     MHLKU20             ENTER DO UNTIL LOOP
MHLKU10  MVC   ADPLWK1(L8),D0(R1)  MOVE MH NAME TO HOLDING AREA
         MVC   ADPLWK3,MHTYPE+TDRNAME-TDRDSECT  MOVE TYPE TO PARM AREA
         MVC   ACRV3,D8(R1)        MOVE QCB ADDRESS TO LIST
         LA    R1,D12(R1)          BUMP BY 12
         ST    R1,ACRV10           SAVE UPDATED ADDRESS
         LA    R5,PDRMH            POINT TO PDR LIST
         L     R7,MHTYPE+TDRMASK-TDRDSECT  SET MASK
         LA    R9,MHACRLST         POINT TO MH ACR LIST        @XM05835
         BAL   R14,ACRTN           COMPUTE NETWORK ADDRESS, IF ANY
         L     R1,ROUTADDR         GET ROUTINE ADDR
         BALR  R14,R1              CALL SUBROUTINE
         LH    R1,ACRV1            GET INDEX
         LA    R1,D1(R1)           BUMP INDEX BY ONE, DO LOOP
MHLKU20  STH   R1,ACRV1            SAVE INDEX
         L     R1,ACRV10           GET ADDRESS OF ENTRY
         CLI   D0(R1),TDRLAST      CHECK FOR END OF TABLE (X'FF')
         BNE   MHLKU10             NOT END, LOOP BACK UNTIL DONE
MHLKU30  L     R14,LVL2SAVE        RESTORE LEVEL 2 RETURN ADDRESS
         BR    R14                 RETURN
         TITLE 'IGC0E05A  TCAM ABEND FORMAT              TABULAR PRINT'
*    INPUT:    R5        PDR LIST ADDRESS
*              R7        OPTIONS MASK
*              R11       ADDRESS OF ABEND PARM LIST
*              R13       ADDRESS OF DYNAMIC AREA
*              R14       RETURN ADDRESS
*              ADPLWK1   ENTRY NAME (TERMNAME OR MH NAME)
*              ADPLWK2   ENTRY NAME (TERMNAME OR MH NAME)
*              ADPLWK3   ENTRY TYPE FOR PRINT
*    OUTPUT:   PRINTED FORMATED TABLE FOR CURRENT ENTRY
         SPACE
         USING PDRDSECT,R5
TBLPRINT ST    R14,LVL3SAVE        SAVE CALLER'S ADDRESS
TBL10    MVC   PRTDTYPE,ADPLWK3    MOVE ENTRY TYPE TO PRINT
         MVC   PRTDNAME,ADPLWK1    MOVE NAME TO PRINT
TBL20    L     R0,PDRMASK          GET OPTION LIST
         NR    R0,R7               AND WITH OPTIONS MASK
         BZ    TBLNEXT             TRY NEXT PDR ENTRY
         SLR   R1,R1               CLEAR REG FOR INSERT CHARACTER
         IC    R1,PDRINDEX         GET ACRVECT OFFSET
         LA    R4,ACRVECT(R1)      GET ADDRESS FOR UNPACK
         MVC   ADPLWK1,D0(R4)      MOVE INTO MY SPACE FOR UNPACK
         UNPK  ADPLWK1+D3(L9),ADPLWK1(L5)  UNPACK VECTOR CONTENTS
         TR    ADPLWK1+D3(L8),HEXCHAR      TRANSLATE HEX TO EBCDIC
         IC    R1,PDRPRT           GET PRINT LINE OFFSET
         LA    R1,PRTASA(R1)       POINT TO OUTPUT LOCATION    @ZM46756
         IC    R2,PDRFLAG          SET LENGTH - 1 FOR MOVE
         N     R2,PDRLNMSK         MASK OUT FLAGS
         LA    R3,ADPLWK1+D3       POINT TO HEX DATA CHAR.
         TM    PDRFLAG,PDRDATA     IS THIS A DATA ENTRY ?
         BO    TBLMOVE             YES, OK TO PRINT
         LA    R3,ADPLWK1+D3+D2    POINT TO HEX ADDRESS CHAR.
         TM    PDRFLAG,PDRNZERO    ARE ZERO ADDRESSES PRINTED
         BZ    TBLMOVE             NO, OK TO PRINT
         OC    D1(L3,R4),D1(R4)    WAS ADDRESS ZERO
         BZ    TBLNEXT             YES, TRY NEXT ENTRY
TBLMOVE  EX    R2,GETCOREM         MOVE DATA TO PRINT
TBLNEXT  TM    PDRFLAG,PDRLAST     TEST FOR LAST ENTRY
         LA    R5,PDRNEXT          POINT TO NEXT PDR ENTRY
         BZ    TBL20               LOOP THRU PDR TABLE
         PRNT
         L     R14,LVL3SAVE        RESTORE CALLER'S ADDRESS
         BR    R14                 RETURN TO CALLER
         DROP  R5
         TITLE 'IGC0E05A  TCAM ABEND FORMAT       OPTPRINT AND HEXDUMP'
*      INPUTS: R5        PDR LIST FOR THIS SET
*              R6        ADDRESS OF PRINT BUFFER
*              R7        OPTIONS MASK FOR THIS PASS
*              R10       ADDRESS OF AVT
*              R11       ADDRESS OF ABEND PARM LIST
*              R13       ADDRESS OF DYNAMIC AREA
*              R14       RETURN REG
*     OUTPUT:  DUMPED LIST OF HEX BLOCKS IF OPTIONS MATCHED
         SPACE 2
         USING PDRDSECT,R5
OPTPRINT ST    R14,LVL3SAVE        SAVE RETURN ADDRESS
         MVI   PRTASA,SP2          SET TO SPACE 2
OPTP10   MVC   PRTONAME,ADPLWK1    MOVE NAME TO PRINT
         MVC   PRTOTYPE,ADPLWK3    MOVE TYPE TO PRINT
         UNPK  PRTOINDX(L5),ACRV1(L3)  UNPACK INDEX
         MVI   PRTOINDX+D4,BLANK   CLEAR EXCESS UNPACK
         TR    PRTOINDX,HEXCHAR    TRANSLATE INDEX
         MVI   PRTOFML1,ASKTER     SET FRAMING CHARACTER
         MVC   PRTOFML2,PRTOFML1   PROPROGATE LEFT HALF FRAMING
         MVI   PRTOFMR1,ASKTER     SET FRAMING CHARACTER
         MVC   PRTOFMR2,PRTOFMR1   PROPROGATE RIGHT HALF FRAMING
         PRNT                      PRINT INDEX LINE
         B     HEX10               SKIP OVER SECOND ENTRY POINT
HEXDUMP  ST    R14,LVL3SAVE        SAVE RETURN ADDRESS
HEX10    TM    PDRFLAG,PDRDATA     TEST IF CELL CONTAINS DATA ?
         BO    HEXNEXT             YES, CAN NOT DUMP, TRY NEXT
         SLR   R1,R1               CLEAR REG FOR INSERT CHARACTER
         IC    R1,PDRINDEX         GET ACRVECT OFFSET
         L     R4,ACRVECT(R1)      GET ADDRESS OF CONTROL BLOCK
HEX15    N     R4,ADDRMASK         TEST IF ADDRESS IS ZERO ?
         BZ    HEXNEXT             YES, TRY NEXT PDR
         L     R0,PDRMASK          GET LIST OPTION
         N     R0,PARMTCX          AND WITH CURRENT OPTIONS    @XM05835
         NR    R0,R7               AND AND WITH OPTIONS MASK
         BZ    HEXNEXT             TRY NEXT PDR ENTRY
         MVI   PRTASA,SP2          DEFAULT TO DOUBLE SPACE
HEX20    MVC   PRTDATA(PDRNAMEL),PDRNAME  MOVE NAME TO PRINT
         LA    R1,PRTDATA          POINT TO NAME
HEX30    LA    R1,D1(R1)           POINT TO NEXT CHARACTER
         CLI   D0(R1),BLANK        R1 POINT TO FIRST BLANK AFTER NAME ?
         BNE   HEX30               NO, LOOP BACK UNTIL BLANK FOUND
         USING PADDRPD,R1
         MVI   PADDRP1,LPARN       SET FRAMING CHARACTER
         ST    R4,ADPLWK1          STORE BLOCK ADDRESS FOR CONVERT
         UNPK  PADDRP2(L7),ADPLWK1+D1  UNPACK ADDRESS
         TR    PADDRP2,HEXCHAR     TRANSLATE HEX TO CHARACTER
         MVI   PADDRP3,RPARN       SET FRAMING CHARACTER
         DROP  R1
         L     R1,PDRRTNA          POINT TO ROUTINE
         TM    PDRFLAG,PDRRTN      ARE OFFSETS COMPUTED BY ROUTINE ?
         BZ    HEX40               NO, ALREADY IN REG 1
         LA    R15,HEXSPIE         POINT TO SPIE EXIT
         BAL   R14,SPIESET         SETUP SPIE EXIT
         BALR  R14,R1              CALL HEX OFFSET CALC SUBROUTINES
         BAL   R14,SPIESETD        RESET EXIT TO DEFAULT
HEX40    ST    R1,ADPLWK1          SAVE OFFSETS
         PRNT
         MVI   PRTASA,SP2          FORCE NEXT LINE TO SPACE 2  @ZM47779
         SLR   R0,R0               ZERO REG
         B     HEX51               TEST
HEX50    SH    R0,HEXLEN           TRY X'20' LESS
HEX51    CH    R0,ADPLWK1A         IS THIS LE START OFFSET
         BH    HEX50               NO, TRY LOWER FIGURE
HEX60    STH   R0,ADPLWK2A         SAVE CURRENT OFFSET
         LCR   R1,R0               CHECK IF COMPLEMENT IS POSTIVE ?
         BNP   HEX70               NO
         STH   R1,ADPLWK2A         STORE COMPLEMENTED OFFSET FOR UNPK
HEX70    AH    R0,HEXLEN           COMPUTE NEXT LINES START
         STH   R0,ADPLWK2B         SAVE NEXT OFFSET
         XC    ADPLWK3,ADPLWK3     CLEAR WASTE COUNTERS
         UNPK  PRTHOFF(L5),ADPLWK2A(L3)  UNPK CURRENT OFFSET
         TR    PRTHOFF,HEXCHAR     CONVERT OFFSET TO EBCDIC
         MVI   PRTHPAD,BLANK       BLANK OUT UNPK GARBAGE
         LTR   R1,R1               IS COMPLEMENTED OFFSET POSITIVE ?
         BNP   HEX80               NO
         MVC   PRTHNEG,HEXNEG      MOVE IN NEGATIVE OFFSET INDICATOR
         LCR   R1,R1               RE-COMPLEMENT OFFSET
         STH   R1,ADPLWK2A         SAVE CURRENT OFFSET
         CH    R1,ADPLWK1A         COMPARE CURRENT WITH START
         BH    HEX80               NO LEFT HAND WASTE
         LH    R0,ADPLWK1A         WASTE = START - CURRENT
         SH    R0,ADPLWK2A
         STH   R0,ADPLWK3A         SET LEFT HAND WASTE
HEX80    LH    R0,ADPLWK2B         GET END OFFSET FOR TEST     @YM08006
         CH    R0,ADPLWK1B         COMPARE END WITH NEXT       @YM08006
         BL    HEX90               NO RIGHT HAND WASTE         @YM08006
         SH    R0,ADPLWK1B         WASTE = NEXT - END          @YM08006
         STH   R0,ADPLWK3B         SET RIGHT HAND WASTE
HEX90    LA    R1,PRTHEXL          POINT TO AREA TO RECIEVE MEMORY
         LA    R15,HEXSPIE         POINT TO SPIE EXIT FOR HEX ROUTINES
         BAL   R14,SPIESET         SET EXIT
         BAL   R14,GETCORE         CALL CORE FETCH ROUTINE
         BAL   R14,SPIESETD        RESET EXIT TO DEFAULT
*              UNPACK PRTHEXM INTO PRTHEXT
         UNPK  PRTHEXT1,PRTHEXM1   UNPACK FOR HEX PRINT
         UNPK  PRTHEXT2,PRTHEXM2   UNPACK FOR HEX PRINT
         UNPK  PRTHEXT3,PRTHEXM3   UNPACK FOR HEX PRINT
         UNPK  PRTHEXT4,PRTHEXM4   UNPACK FOR HEX PRINT
         UNPK  PRTHEXT5,PRTHEXM5   UNPACK FOR HEX PRINT
         TR    PRTHEXT,HEXCHAR     TRANSLATE TO EBCDIC
         LH    R3,ADPLWK3A         COMPUTE LEFT HAND BLANKING
         AR    R3,R3               DOUBLE FOR HEX RATHER THAN BYTES
         BZ    HEX100              NO BLANKING NEEDED
         EX    R3,HEXBLKL          BLANK LEFT HAND HEX
HEX100   LH    R3,ADPLWK3B         COMPUTE RIGHT HAND BLANKING
         AR    R3,R3               DOUBLE FOR HEX NOT BYTES
         BZ    HEX110              NO BLANKING NEEDED
         LA    R1,PRTHEXT+D64      POINT TO RIGHT SIDE
         SR    R1,R3               BACKUP FOR BLANKING
         EX    R3,HEXBLKR          BLANK RIGHT HAND
HEX110   MVC   PRTHEXL,SCATMOVE    MOVE SCATTER MOVE TRANSLATE LIST
         TR    PRTHEXL,PRTHEXTL-D1 MOVE HEX GROUPS TO PRINT LINE
         MVI   PRTHEXTR-D1,BLANK   SETUP BLANK FOR SCATTER MOVE
         MVC   PRTHEXR,SCATMOVE    MOVE SCATTER MOVE TRANSLATE LIST
         TR    PRTHEXR,PRTHEXTR-D1 MOVE HEX GROUPS TO PRINT LINE
         MVI   PRTHFRM1,ASKTER     MOVE ASKTERISK TO PRINT
         MVI   PRTHFRM2,ASKTER     MOVE ASKTERISK TO PRINT
         MVC   PRTHCHAR,BLANKS     BLANK OUT CHARACTER DISPLAY
         LA    R1,PRTHCHAR         POINT TO CHARACTER AREA
         BAL   R14,GETCORE         CALL MEMORY FETCH ROUTINE
         TR    PRTHCHAR,RESTRICT   RESTRICT CHARACTER OUTPUT
         PRNT
         LH    R0,ADPLWK2B         GET NEXT OFFSET
         CH    R0,ADPLWK1B         IS THIS BLOCK DONE ?
         BL    HEX60               LOOP BACK UNTIL THIS BLOCK IS DONE
         TM    PDRFLAG,PDRCHN      CHECK FOR CHAINNED CONTROL BLOCK
         BZ    HEXNEXT             NO CHAIN, TRY NEXT ENTRY
         CLC   PDRNAME,PDROLTCB+PDRNAME-PDRDSECT  THIS OLTCB ? @YM07361
         BNE   HEX120              NO, BRANCH AROUND           @YM07361
         USING TOTOBPTR,R4                                     @YM07361
         CLC   TOTELQCB,TOTELLNK   IS THIS THE LAST OLTCB ?    @YM07361
         BE    HEXNEXT             YES, PROCESS NEXT BLOCK     @YM07361
         DROP  R4                                              @YM07361
         B     HEX130
HEX120   CLC   PDRNAME,PDRAIB+PDRNAME-PDRDSECT
         BNE   HEX130              IF AIB'S ARE BEING FORMATED
         USING IEDQAIB,R4               CHECK FOR THE END OF
         NC    AIBCHAIN,AIBCHAIN        AIB CHAIN              @OZ31435
         BZ    HEXNEXT
         DROP  R4
HEX130   EQU   *                                               @OZ32381
         SR    R1,R1               CLEAR R1                    @OZ32381
         ICM   R1,THREELIN,PDRCHAIN GET OFFSET TO CHAINED BLK  @OZ32381
         AR    R1,R4               POINT TO ADDRESS POINTER
         L     R4,D0(R1)           PICKUP POINTER TO NEXT BLOCK
         SLR   R1,R1               CLEAR REG FOR INSERT CHAR
         IC    R1,PDRINDEX         GET ACRVECT OFFSET TO BLOCK
         LA    R1,ACRVECT+D1(R1)   COMPUTE ADDRESS OF FIRST BLK. ADDR.
         CLM   R4,ADDR,D0(R1)      CHECK IF CHAIN BACK TO FIRST BLOCK
         BNE   HEX15               NO, DUMP THIS BLOCK
HEXNEXT  TM    PDRFLAG,PDRLAST     TEST FOR LAST ENTRY
         LA    R5,PDRNEXT          POINT TO NEXT ENTRY
         BZ    HEX10               LOOP BACK UNTIL ALL BLOCKS ARE DONE
         L     R14,LVL3SAVE        RESTORE CALLER'S ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE 2
HEXBLKL  MVC   PRTHEXT-D1(D0),BLANKS  BLANK OUT LEFT HAND WASTE
HEXBLKR  MVC   D0(D0,R1),BLANKS    BLANK OUT RIGHT HAND WASTE
         SPACE 2
HEXSPIE  EQU   *
         STM   R14,R12,12(R13)       SAVE REGS                 @ZM46635
         L     R12,SDWAGR12-SDWA(R1) RELOAD BASE REG           @ZM46635
         CLI   SDWACMPC-SDWA(R1),PGMCHK IS IT PROG CHECK       @OZ29004
         BNE   HEXQUIT              NO, DONT RETRY             @OZ29004
         SETRP RETADDR=HEXSPIE1,RETREGS=YES,RC=4,REGS=(14,12), @OZ29004*
               FRESDWA=YES          CONTINUE WITH DUMP         @OZ29004
HEXQUIT  SETRP RC=0,REGS=(14,12)    CONTINUE TERMINATION       @OZ29004
HEXSPIE1 L     R13,ADPLDYNM        GET DYNAMIC AREA POINTER
         BAL   R14,SPIESETD        RESET SPIE EXIT TO DEFAULT
         MVC   PRTHERR1,HEXERR1    SETUP ERROR MESSAGE
         PRNT
         B     HEXNEXT             TRY NEXT PDR ENTRY
         DROP  R5
         TITLE 'IGC0E05A  TCAM ABEND FORMAT         GETCORE SUBROUTINE'
*    INPUT:    R1        ADDRESS OF 32 BYTE RECIEVING AREA
*              R4        ADDRESS OF CONTROL BLOCK
*              R11       ADDRESS OF ABEND PARM LIST
*              R14       RETURN ADDRESS
*              ADPLWK1A  STARTING OFFSET (0 OR -)
*              ADPLWK1B  ENDING OFFSET (+)
*              ADPLWK2A  CURRENT OFFSET FROM R4
*              ADPLWK3A  WASTED LEFT HAND AMOUNT
*              ADPLWK3B  WASTED RIGHT HAND AMOUNT
*   OUTPUT:    COMPUTED MOVE DONE
         SPACE 2
GETCORE  LA    R2,L31              LOAD NORMAL MOVE LENGTH - ONE
         SH    R2,ADPLWK3A         SHORTEN MOVE
         SH    R2,ADPLWK3B         SHORTEN MOVE FOR SHORT LEFT
         AH    R1,ADPLWK3A         ADJUST MOVE ADDRESS FOR SHORT LEFT
         LA    R3,D0(R4)           COMPUTE SOURCE ADDRESS
         AH    R3,ADPLWK2A         ADJUST SOURCE BY CURRENT OFFSET
         AH    R3,ADPLWK3A         ADJUST SOURCE BY LEFT WASTE  @YM8006
         EX    R2,GETCOREM         EXECUTE VARIABLE MOVE TO BUFFER
         BR    R14                 RETURN TO CALLER
         SPACE
GETCOREM MVC   D0(L0,R1),D0(R3)    MOVE FROM CORE TO BUFFER
*              NOTE:  THIS INSTRUCTION IS ALSO USED BY TBLMOVE
         TITLE 'IGC0E05A  TCAM ABEND FORMAT            PDR SUBROUTINES'
*     INPUT:   R4        ADDRESS OF CONTROL BLOCK
*              R10       ADDRESS OF AVT
*              R11       ADDRESS OF ABEND PARM LIST
*              R14       POINTS TO RETURN WITH STORE, +4 NO STORE
*     OUTPUT:  R1        START/END HALFWORDS, IF RETURN TO (R14)
*              ADPLWK1A  START OFFSET, IF RETURN TO (R14)+4
*              ADPLWK1B  END OFFSET, IF RETURN TO (R14)+4
*     NOTE:    ADPLWK1,ADPLWK2, AND ADPLWK3 ARE AVAILIBLE WORK SPACE
         SPACE 2
PDRRSAVT LA    R1,SAVTVMSZ         SET DEFAULT SAVT LENGTH
         TM    AVTSAVTF,AVTVTMCP   CHECK IF 3705 SAVT ?
         BZR   R14                 NO; RETURN, STORE R1
         LA    R1,SAVTSIZE         SET FULL SAVT SIZE
         USING IEDNSVTD,R4
         MVC   ACRV9,SAVTSAT       MOVE SAT ADDRESS TO CELL
         MVC   ACRV9(L1),SAVTSUBA  MOVE COUNT TO CELL HIGH BYTE
         BR    R14                 RETURN, STORE R1
         DROP  R4
         SPACE 4
PDRAIBS  L     R1,ACRV3            GET TCX ADDRESS FROM CELL 3
         USING IEDQTCX,R1
         USING IEDQAIB,R4
         MVC   PRTDATA+D3(L'OPCTL),OPCTL  INDICATE OPCTL AIB
         CLI   AIBKEY,AIBAPKEY     IF OPCTL AIB
         BE    GETLNGTH            BRANCH
         MVC   PRTDATA+D3(L'GETRD),GETRD INDICATE GET/READ AIB
         CLC   AIBQCBA(L'AIBQCBA),TCXGETQ+D1 IF GET/READ AIB
         BE    GETLNGTH            BRANCH
         MVC   PRTDATA+D3(L'PUTWT),PUTWT INDICATE PUT/WRITE AIB
         CLC   AIBQCBA(L'AIBQCBA),TCXPUTQ+D1 IF PUT/WRITE AIB
         BE    GETLNGTH            BRANCH
         MVC   PRTDATA+D3(L'POINT),POINT INDICATE POINT AIB
         CLC   AIBQCBA(L'AIBQCBA),TCXPNTQ IF POINT AIB
         BE    GETLNGTH            BRANCH
         MVC   PRTDATA+D3(L'QRESET),QRESET INDICATE QRESET AIB
         CLC   AIBQCBA(L'AIBQCBA),TCXQRQ IF QRESET AIB
         BE    GETLNGTH            BRANCH
         MVC   PRTDATA+D3(L'OPEN),OPEN INDICATE OPEN AIB
         CLC   AIBECBA(L'OPN),OPN  IF OPEN AIB
         BE    GETLNGTH            BRANCH
         MVC   PRTDATA+D3(L'CLOSE),CLOSE INDICATE CLOSE AIB
         CLC   AIBECBA(L'CLOS),CLOS IF CLOSE AIB
         BE    GETLNGTH            BRANCH
         MVC   PRTDATA+D3(L'ABEND),ABEND INDICATE ABEND AIB
         CLC   AIBECBA(L'QOT1),QOT1 IF ABEND AIB
         BE    GETLNGTH            BRANCH
         MVC   PRTDATA+3(L7),BLANKS BLANK OUT TYPE AREA IF
*                                    UNABLE TO CATEGORIZE
         DROP  R4
GETLNGTH LH    R1,TCXSZAIB         GET LENGTH OF AIB FROM TCX
         DROP  R1
         N     R1,LO16BITS         NO DISPLACEMENT VAL REQUIRED
         BR    R14                 RETURN
         EJECT
PDRRSAT  SLR   R1,R1               CLEAR REG FOR INSERT CHARACTER
         IC    R1,ACRV9            GET COUNT FROM CELL 9
         SLA   R1,3                MULTIPLY BY EIGHT
         BR    R14                 RETURN TO CALLER
         SPACE 4
         USING IEDQQCB,R4
PDRRQCB  L     R1,PDRRQCBP         GET PARAMETER
         TM    ACRV3,TRMPREF       CHECK IF NEG. PREFIX ?
         BOR   R14                 YES, PARAMETER IS GOOD
         LA    R1,QCBPEND-IEDQQCB  COMPUTE LENGTH
         TM    QCBDSFLG,QCBDISK    DISK QCB ?
         BNZR  R14                 YES, PARAMETER IS OK
         LA    R1,QCBMSIZE         GET QCB SIZE
         BR    R14                 RETURN TO CALLER
         DROP  R4
         SPACE 4
         USING IEDQTRM,R4
PDRRTTE  LA    R1,TRMOPNO          POINT TO OPTION COUNT OR DEPENDENT
         LA    R4,D0(R4)           CLEAR HIGH ORDER BITS FOR SUBTRACT
         TM    TRMSTATE,TRMOPTFN   CHECK FOR OPTION FIELDS
         BZ    PDRRTTE1            NONE
         LA    R1,TRMOPT           POINT TO FIRST OPTION FIELD
         SLR   R0,R0               CLEAR REG FOR INSERT CHARACTER
         IC    R0,TRMOPNO          GET COUNT OF MAXIMUM NUMBER OF OPTS.
         AR    R1,R0               ADD TO SIZE OF TERMINAL TABLE ENTRY
PDRRTTE1 SLR   R2,R2               CLEAR REG FOR INSERT CHARACTER
         LH    R0,TRMDEVFL         GET DEVICE DEPENDENT FLAGS
PDRRTTE2 C     R0,LO16BITS         CHECK FOR ANY BITS IN HIGH HALF
         BNH   PDRRTTE3            BRANCH IF NOT NEG OR HIGH HALF
         LA    R2,D1(R2)           ADD ONE FOR BIT IN HIGH HALF
PDRRTTE3 N     R0,LO16BITS         MASK TO ONLY 16 BITS
         SLL   R0,D1               SHIFT REG ONE BIT TO LEFT
         BNZ   PDRRTTE2            LOOP UNTIL ALL BITS ARE COUNTED
         LTR   R2,R2               ANY OPTIONS ?
         BZ    PDRRTTEX            NO, DONE WITH POSTIVE LENGTH
         SLR   R3,R3               CLEAR REG FOR INSERT CHARACTER
PDRRTTE4 IC    R3,D0(R1)           GET LENGTH OF DEPENDENT FIELD
         LA    R1,D1(R1,R3)        POINT TO NEXT DEPENDENT FIELD
         BCT   R2,PDRRTTE4         LOOP BACK FOR ALL DEPENDENT FIELDS
PDRRTTEX SR    R1,R4               COMPUTE LENGTH
         TM    TRMSTATE,TRMPREF    CHECK FOR PREFIX
         BZR   R14                 NONE, RETURN
         O     R1,PDRNTTE          OR IN NEG PREFIX LENGTH
         BR    R14                 RETURN
         DROP  R4
         EJECT
PDRROPT  ST    R14,ADPLWK1         SAVE RETURN ADDRESSES
         ST    R4,ADPLWK3          SAVE CONTROL BLOCK ADDRESS
         L     R4,AVTOPTPT         POINT TO OPTIONS TABLE
         L     R4,D4(R4)           POINT TO FIRST OPTION DESCRIPTION
         L     R2,ACRV2            POINT TO TERMINAL TABLE ENTRY
         USING IEDQTRM,R2
         SLR   R3,R3               CLEAR REG FOR INSERT CHARACTER
         IC    R3,TRMOPNO          GET COUNT OF NUMBER OF OPTIONS
         LA    R2,TRMOPT           POINT TO FIRST OPTION
         DROP  R2
         LA    R1,D4               SET OPTIONS PER LINE
         MVI   PRTASA,SP2          SPACE TWO BEFORE PRINT
PDRROPT1 CLI   D0(R2),TDRLAST      IS THIS OPTION USED ?
         BE    PDRROPT8            NO
         SLR   R15,R15             CLEAR REG FOR INSERT CHAR
         IC    R15,OPOFFSET-1(R1)  GET PRINT POSITION OFFSET
         AR    R15,R6              COMPUTE PRINT POSITION
         USING POPT,R15
         SLR   R14,R14             CLEAR REG FOR INSERT CHARACTER
         IC    R14,0(R2)           GET STARTING OFFSET
         STH   R14,ADPLWK2B        SAVE OFFSET FOR UNPACK
         SLR   R0,R0               CLEAR REG FOR INSERT CHARACTER
         IC    R0,D0(R4)           GET LENGTH - 1
         AR    R14,R0              COMPUTE SIZE - 1
         STH   R14,ADPLWK2A        SAVE MAX SIZE - 1
         UNPK  POPTOFF(L5),ADPLWK2B(L3)  STARTING OFFSET
         UNPK  POPTLEN(L3),D0(L2,R4)  UNPACK LENGTH - 1
         TR    POPTOFF(L8),HEXCHAR TRANSLATE HEX TO EBCDIC
         MVI   POPTPAD1,BLANK      CLEAR UNPK GARBAGE
         MVI   POPTPAD2,BLANK      CLEAR UNPK GARBAGE
         LA    R14,OPTTYPE-2       POINT TO OPTION DECODE
PDRROPT4 LA    R14,D2(R14)         POINT TO NEXT OPTION
         CLC   D0(L1,R14),D1(R4)   CHECK OPTION TYPE
         BNE   PDRROPT4            LOOP BACK UNTIL FOUND
         MVC   POPTTYPE,D1(R14)    MOVE TYPE TO PRINT
         MVC   POPTNAME,D2(R4)     MOVE OPTION NAME TO PRINT
         DROP  R15
         BCT   R1,PDRROPT8         BRANCH IF ROOM FOR MORE OPTIONS
         PRNT
         LA    R1,D4               RE-INITIALIZE FOUR OPTIONS PER LINE
PDRROPT8 LA    R2,D1(R2)           POINT TO NEXT OPTION INDEX
         LA    R4,D10(R4)          POINT TO NEXT OPTION DESCRIPTION
         BCT   R3,PDRROPT1         LOOP BACK IF MORE OPTIONS
         CH    R1,H4               ANY OPTIONS TO PRINT ?
         BE    PDRROPTX            NO, EXIT
         PRNT
PDRROPTX MVI   PRTASA,SP2          FORCE SPACE 2 BEFORE PRINT
         LH    R1,ADPLWK2A         LOAD MAX OFFSET
         LA    R1,D1(R1)           CONVERT LENGTH - 1 TO LENGTH
         L     R4,ADPLWK3          RESTORE CONTROL BLOCK ADDRESS
         L     R14,ADPLWK1         RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         SPACE 4
PDRRLCB  L     R2,ACRV7            POINT TO DCB
         USING IHADCB,R2
         SLR   R1,R1               CLEAR REG FOR INSERT CHARACTER
         IC    R1,DCBEIOBX         GET LENGTH OF LCB FROM DCB
         BR    R14                 RETURN TO CALLER
         SPACE 4
         USING IEDRVTD,R4
PDRRRVT  LH    R1,RVTNUM           GET COUNT OF ENTRIES
         LA    R1,RVTINDEX-RVTNUM(R1,R1)  COMPUTE LENGTH
         BR    R14                 RETURN TO CALLER
         SPACE 4
         USING DEBTCBAD,R4
PDRRDEB  LA    R3,D0(R4)           CLEAR HIGH ORDER BITS
         AH    R3,DEBNEGSZ         COMPUTE IEDQDEB ADDRESS
         USING IEDQDEB,R3
         DROP  R4
         SLR   R1,R1               CLEAR REG FOR INSERT CHARACTER
         IC    R1,DEBLNGTH         GET DEB LENGTH IN DOUBLE WORDS
         SLA   R1,D3               SHIFT LEFT 3 = MULTIPLY BY 8
         AH    R1,PDRNDEB          ADD NEG SIZE TO REDUCE POS. LENGTH
         O     R1,PDRNDEB          OR IN NEGATIVE DEB SIZE
         BR    R14                 RETURN TO CALLER
         DROP  R3
         SPACE 4
PDRRSCB  SLR   R1,R1               CLEAR REG FOR INSERT CHARACTER
         IC    R1,AVTSCBSZ         GET SIZE OF SCB FROM AVT
         BR    R14                 RETURN TO CALLER
         SPACE 4                                               @YM08111
         USING IHADCB,R4                                       @YM08111
PDRRDCB  CLI   DCBDSRG1,0          TCAM TYPE ?                 @YM08111
         BNE   PDRRDCB1            NO, USE DEFAULT SIZE        @YM08111
         CLI   DCBDSRG2,DCBDSGTX   TCAM LINE GROUP ?           @YM08111
         BE    PDRRLGB             YES, COMPUTE SIZE           @YM08111
         LA    R1,DCBBLKSI+2-IHADCB  SET TCAM DISK DCB SIZE    @YM08111
         CLI   DCBDSRG2,DCBDSGTQ   TCAM DISK QUEUE ?           @YM08111
         BER   R14                 YES, RETURN WITH VALUE      @YM08111
         LA    R1,DCBBUFSI+2-IHADCB  SET TCAM NCP DCB SIZE     @YM08111
         CLI   DCBDSRG2,DCBDSGTR   NCP TYPE DCB ?              @YM08111
         BER   R14                 YES, RETURN WITH VALUE      @YM08111
PDRRDCB1 LA    R1,DCBEOB+4-IHADCB  SET SAM DCB SIZE            @YM08111
         BR    R14                 RETURN WITH VALUE           @YM08111
PDRRLGB  SLR   R1,R1               CLEAR REG FOR INSERT CHAR.  @YM08111
         IC    R1,DCBILCT          GET INVLIST COUNT           @YM08111
         SLA   R1,2                MULTIPLY BY POINTER LENGTH  @YM08111
         LA    R1,DCBINVLI-IHADCB(R1)  COMPUTE DCB LENGTH      @YM08111
         BR    R14                 RETURN TO CALLER            @YM08111
         DROP  R4                                              @YM08111
         TITLE 'IGC0E05A  TCAM ABEND FORMAT          PRINT SUBROUTINES'
*    INPUT:    R11       ADDRESS OF ABEND PARM LIST
*              R14       RETURN ADDRESS
*    OUTPUT:   ABDUMP PRINT ROUTINE WILL PRINT NEXT LINE AT TOP OF PAGE
         SPACE 2
LINSPACE ST    R14,SPACSAVE        SAVE CALLER'S RETURN ADDRESS
         MVI   PRTASA,BLANK        BLANK OUT BUFFER AREA
         MVC   PRTDATA(L'PRTDATA),PRTASA
ASPACE   EQU   *
         PRNT
         BCT   R0,ASPACE           IF MORE LINES TO PRINT, BRANCH
         L     R14,SPACSAVE        RELOAD RETURN ADDR
         BR    R14                 RETURN
         SPACE 4
PRINT    ST    R14,PRNTSAVE        SAVE CALLER'S RETURN ADDRESS
         L     R15,ADPLPRNT        POINT TO PRINT ROUTINE
         LR    R1,R11              PASS ABEND PARM LIST TO PRINT ROUT
*                                                             @YM05655
         BALR  R14,R15             CALL IEAVTAS2 (ABDUMP PRINT)
         L     R14,PRNTSAVE        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER
         TITLE 'IGC0E05A  TCAM ABEND FORMAT            SPIE EXIT SETUP'
SPIESETD LA    R15,ABORT2          SETUP DEFAULT SPIE EXIT
SPIESET  ST    R15,SPIESAVE        SAVE CURRENT SPIE EXIT ADDRESS
SPIERSET EQU   *
         STM   R0,R2,ESTAESAV      SAVE REG 0,1,2
         L     R2,SPIESAVE         R2 = ADDR TO RETURN TO AFTER PGM CHK
         ESTAE (R2),OV
         LM    R0,R2,ESTAESAV      RESTORE REG 0,1,2
         BR    R14                 RETURN TO CALLER
         TITLE 'IGC0E05A  TCAM ABEND FORMAT        ADDRESS COMPUTATION'
*    INPUT:    R9       CONTAINS THE ADDRESS OF THE ACR LIST   @XM05835
*              R14      CONTAINS THE RETURN ADDRESS
*    OUTPUT:   ACRVECT  UPDATED PER ACR LISTS
*    NOTE:     R15      IS INTERNAL ACR LINK REG FOR SUBROUTINES
         SPACE 2
         USING ACR,R9                                          @XM05835
ACRTN    ST    R14,LVL3SAVE        SAVE RETURN ADDRESS
         LA    R15,ACRSPIE         POINT TO ACR SPIE EXIT
         BAL   R14,SPIESET         SETUP SPIE EXIT FOR ACR
ACRTN00  TM    ACRFLAGS,ACRRTNF    TEST IF POINTER TYPE ENTRY
         BO    ACRTN10             YES, BRANCH
         SLR   R15,R15             CLEAR REG FOR INSERT CHARACTER USAGE
         IC    R15,ACRX            GET VECTOR OFFSET FOR X
         L     R2,ACRVECT(R15)     LOAD VECTOR DATA INTO REG
         N     R2,ADDRMASK         MASK OUT NON ADDRESS BITS
         BZ    ACRTN30             IF ZERO, TRY NEXT ENTRY
         AH    R2,ACROFF           ADD OFFSET TO ADDRESS
         USING ACRPARM,R2
         IC    R15,ACRY            GET VECTOR OFFSET FOR Y
         LA    R15,ACRVECT(R15)    COMPUTE RECIEVING CELL ADDRESS
         MVC   D0(L4,R15),ACRPARM  MOVE ADDRESS OR DATA TO CELL
         DROP  R2
ACRTN30  LA    R9,ACRNEXT          POINT TO NEXT LIST ENTRY    @XM05835
         B     ACRTN00             LOOP THROUGH LIST ENTRIES
         SPACE 2
ACRTN10  TM    ACRFLAGS,ACRLISTF   TEST FOR LIST FORM
         BO    ACRTN20             YES, BRANCH
         L     R15,ACRADDR         POINT TO CALLED ROUTINE
         LA    R9,ACRNEXT          POINT TO NEXT ENTRY         @XM05835
         BALR  R15,R15             BRANCH TO ROUTINE
         B     ACRTN00             PROCESS NEXT ENTRY
         SPACE 2
ACRTN20  L     R9,ACRADDR          POINT TO NEXT LIST ENTRY    @XM05835
         B     ACRTN00             LOOP BACK THROUGH ENTRIES
         SPACE 2
*              THIS ENTRY POINT IS CALLED BY THE ACR LIST TO EXIT
ACRTNX   BAL   R14,SPIESETD        RESET SPIE EXIT TO DEFAULT
         L     R14,LVL3SAVE        RESTORE RETURN ADDRESS
         BR    R14                 RETURN TO CALLER OF ACRTN
         SPACE 2
ACRSPIE  EQU   *
         STM   R14,R12,12(R13)       SAVE REGS                 @ZM46635
         L     R12,SDWAGR12-SDWA(R1) RESTORE BASE REG          @ZM46635
         CLI   SDWACMPC-SDWA(R1),PGMCHK IS IT PROG CHECK       @OZ29004
         BNE   ACRQUIT              NO, DONT RETRY             @OZ29004
         SETRP RETADDR=ACRSPIE1,RETREGS=YES,RC=4,REGS=(14,12), @OZ29004*
               FRESDWA=YES          CONTINUE WITH DUMP         @OZ29004
ACRQUIT  SETRP RC=0,REGS=(14,12)    CONTINUE TERMINATION       @OZ29004
ACRSPIE1 L     R13,ADPLDYNM        GET DYNAMIC AREA POINTER
         BAL   R14,SPIERSET        REFRESH SPIE EXIT ADDRESS
         B     ACRTN30             GOTO NEXT ACR ENTRY
         TITLE 'IGC0E05A  TCAM ABEND FORMAT            ACR SUBROUTINES'
*    INPUT:    R1        POINTER TO NEXT ACR LIST ENT OR PARMS@XM05835
*              R7        INTERNAL OPTIONS MASK
*              R14       DO NOT ALTER, ACRTN RETURN ADDRESS
*              R15       RETURN ADDRESS
*              ACRV2     POINTER TO TERMINAL TABLE
*              ACRV3     TRMSTATE AND POINTER TO QCB
*    OUTPUT:   UPDATE ACRVECT CELL AND/OR R7 OPTION MASK
ACRRNWA  L     R3,AVTSAVTP         GET POINTER TO SAVT
         USING IEDNSVTD,R3
         LH    R0,ACRV1            GET CURRENT TTCIN INDEX
         N     R0,LO16BITS         AND TO 16 BITS OF DATA
         CLM   R0,LO16,SAVTNAT1    IS THIS TTCIN IN NAT RANGE ?
         BL    ACRRNWA2            NO, TOO LOW
         CLM   R0,LO16,SAVTNATL    IS THIS TTCIN IN NAT RANGE ?
         BH    ACRRNWA2            NO, TOO HIGH
         CLM   R0,LO16,SAVTMHDX    IS THIS TTCIN IN MH RANGE ?
         BL    ACRRNWA1            NO
         SH    R0,SAVTNADL         REDUCE MH MAPPING TO NAT
ACRRNWA1 BCTR  R0,0                SUBTRACT ONE FROM R0
         MH    R0,NATLENM          COMPUTE OFFSET INTO NAT
         L     R2,SAVTNAT          POINT TO NAT
         AR    R2,R0               COMPUTE NAT ENTRY ADDRESS
         MVC   ACRV4(NATLEN),D0(R2)  MOVE NAT ADDRESS TO CELL
         BR    R15                 RETURN TO CALLER
ACRRNWA2 X     R7,PDRMNWA          FLIP NETWORK ADDRESS OPTION STATUS
         BR    R15                 RETURN TO CALLER
         DROP  R3
         SPACE 4
ACRROPT  TM    ACRV3,TRMOPTFN      ANY OPTION FIELDS ?
         BZR   R15                 IF NONE RETURN TO CALLER
         L     R3,ACRV2            POINT TO TERMINAL TABLE
         USING IEDQTRM,R3
         TM    TRMDSORG,TRMLGB     CHECK IF OPTIONS ON AND LGB
         BOR   R15                 YES IS LGB, EXIT, NO OPTIONS ALLOWED
         L     R2,AVTOPTPT         POINT TO OPTIONS TABLE
         LH    R0,TRMOPTBL         GET 16 BIT OFFSET TO TABLE
         N     R0,LO16BITS         MASK TO 16 BITS
         AR    R0,R2               COMPUTE ADDRESS
         ST    R0,ACRV9            STORE FIRST OPTION ADDRESS
         BR    R15                 RETURN TO CALLER
         DROP  R3
         EJECT
ACRRDEB  L     R2,ACRV7            GET DCB ADDRESS
         N     R2,ADDRMASK         MASK OUT NON ADDRESS BITS
         BZR   R15                 BRANCH IF ZERO
         USING IHADCB,R2
         TM    DCBOFLGS,DCBOFOPN   IS DCB OPEN ?
         BZR   R15                 NO, NO DEB ADDRESS
         MVC   ACRV10,DCBIFLGS     MOVE IFLAGS AND DEB ADDRESS TO CELL
         BR    R15                 RETURN TO CALLER
         DROP  R2
         SPACE 4
ACRRDCT  L     R3,ACRV2            GET ADDRESS OF TERMINAL TABLE ENTRY
         USING IEDQTRM,R3
         SLR   R0,R0               CLEAR REG FOR INSERT CHARACTER
         IC    R0,TRMCHCIN         GET DCT INDEX FROM TTE
         AR    R0,R0               MULTIPLY BY TWO
         BZR   R15                 RETURN IF ZERO
         SH    R0,TWO              SUBTRACT TWO FOR ORIGIN OF ZERO
         LR    R2,R0               MULTIPLY BY THREE (TOTAL OF 6)
         AR    R2,R2               BY TWO
         AR    R2,R0               PLUS 1 IS THREE
         L     R0,AVTCSTCS         GET POINTER TO DCT
         AR    R0,R2               ADD OFFSET
         ST    R0,ACRV8            SAVE COMPUTED DCT ADDRESS
         BR    R15                 RETURN TO CALLER
         DROP  R3
         SPACE 4
ACRRRVT  L     R3,AVTSAVTP         POINT TO SAVT
         USING IEDNSVTD,R3
         SLR   R0,R0               CLEAR REG FOR INSERT CHARACTER
         IC    R0,SAVTSUBL         GET BIT LENGTH OF SUBAREA
         LA    R2,RVTCVTW          LOAD BIT SHIFT VALUE
         SR    R2,R0               COMPUTE BIT SHIFT
         L     R3,SAVTSAT          POINT TO SAT
         DROP  R3
         N     R3,ADDRMASK         MASK TO ADDRESS
         BZR   R15                 IF ZERO, RETURN TO CALLER
         L     R0,ACRV4            GET NETWORK ADDRESS
         SRL   R0,D0(R2)           COMPUTE SAT INDEX
         MH    R0,HSATLEN          OFFSET = INDEX * LENGTH
         SH    R0,HSATLEN          ADJUST FOR ORIGIN OF ONE, NOT ZERO
         AR    R3,R0               COMPUTE SAT ENTRY ADDRESS
         USING IEDSATD,R3
         MVC   ACRV12,SATRNRVT     MOVE RVT ADDRESS INTO CELL 12
         MVC   ACRV5,SATRNLCB      MOVE LCB ADDRESS INTO CELL 5
         BR    R15                 RETURN TO CALLER
         DROP  R3
         SPACE 4
ACRRPLCB L     R2,ACRV3            POINT TO QCB
         AH    R2,QCBNEGSZ         COMPUTE IEDNQCB ADDRESS
         USING IEDNQCB,R2
         TM    QCBSTAT1,QCBPLCBN   DOES QCBPLCBA POINT TO PLCB ?
         BZR   R15                 NO, RETURN TO CALLER
         MVC   ACRV5,QCBSTAT1      MOVE PLCB ADDRESS TO CELL 5
         BR    R15                 RETURN TO CALLER
         DROP  R2
         SPACE 4
ACRRLSCB L     R2,ACRV7            POINT TO DCB
         USING IHADCB,R2
         TM    DCBOFLGS,DCBOFOPN   IS DCB OPEN ?
         BZR   R15                 NO, RETURN TO CALLER, NO LCG OR SCB
         MVC   ACRV5+D3(L1),DCBEIOBX  GET LCG SIZE FROM DCB
         L     R3,DCBIOBAD         GET POINTER TO LCBS IOB
         LA    R3,D0(R3)           CLEAR HI BITS IN IOB ADDRESS
         L     R2,DCBIFLGS         POINT TO DEB                @YM08557
         DROP  R2                                              @YM08557
         USING DEBTCBAD,R2                                     @YM08557
         MVC   ACRV5(1),DEBNMEXT   REMEMBER MAX RLN            @YM08557
         DROP  R2
         L     R2,ACRV3            POINT TO QCB
         USING IEDQQCB,R2
         CLC   QCBRELLN,ACRV5      CHECK FOR VALID RLN RANGE   @YM08557
         MVI   ACRV5,0             CLEAR BYTE                  @YM08557
         BHR   R15                 RETURN IF OUT OF RANGE      @YM08557
         SLR   R0,R0               CLEAR REG FOR INSERT CHAR
         IC    R0,QCBRELLN         GET RELATIVE LINE NUMBER FROM QCB
         MH    R0,ACRV5+D2         MULTIPLY RLN TIMES LCB SIZE
         AR    R3,R0               POINT TO CORRECT IOB IN LCB
         SH    R3,HLCBPRF          BACKUP FROM IOB TO LCB
         ST    R3,ACRV5            STORE LCB ADDRESS
         USING IEDQLCB,R3
         TM    LCBSTAT2,LCBDIAL    IS THIS A DIAL LINE ?
         BO    ACRLSCB1            YES, USE LCBSCBA FOR SCB
         L     R3,LCBSCBDA-D1      GET ADDRESS OF SCBS
         DROP R3
         SLR   R0,R0               CLEAR REG FOR INSERT CHARACTER
         IC    R0,QCBSCBOF         GET SCB INDEX
         MVC   ACRV6+D3(L1),AVTSCBSZ  GET SCB SIZE
         MH    R0,ACRV6+D2         OFFSET = INDEX * SIZE
         ALR   R0,R3               COMPUTE ADDRESS OF SCB
         ST    R0,ACRV6            SAVE SCB ADDRESS IN CELL
         BR    R15                 RETURN TO CALLER
         USING IEDQLCB,R3
ACRLSCB1 MVC   ACRV6,LCBSCBA-D1    MOVE SCB ADDRESS TO CELL    @YM08557
         BR    R15                 RETURN TO CALLER
         DROP  R3
         EJECT
ACRRUCB  L     R2,ACRV10           GET DEB ADDRESS             @YM08557
         LTR   R2,R2               TEST FOR ADDRESS PRESENT    @YM08557
         BZR   R15                 RETRUN IF NONE              @YM08557
         L     R3,ACRV3            GET QCB ADDRESS             @YM08557
         USING IEDQQCB,R3                                      @YM08557
         USING DEBTCBAD,R2                                     @YM08557
         CLC   QCBRELLN,DEBNMEXT   CHECK FOR VALID RLN RANGE   @YM08557
         BHR   R15                 RETRUN IF NOT IN RANGE      @YM08557
         SLR   R0,R0               CLEAR REG                   @YM08557
         IC    R0,QCBRELLN         GET RLN                     @YM08557
         AR    R0,R0               TIMES FOUR FOR UCB          @YM08557
         AR    R0,R0                   LIST DISPLACEMENT       @YM08557
         AR    R2,R0               ADJUST DEB BASE FOR DISPL   @YM08557
         MVC   ACRV11,DEBUCBAD-D4  PICK UP UCB ADDRESS         @YM08557
         BR    R15                 RETURN                      @YM08557
         DROP  R3                                              @YM08557
         DROP  R2                                              @YM08557
         SPACE 2
ACRAIB   EQU   *
         L     R2,ADPLCVT          GET PTR TO CVT
         USING CVTMAP,R2
         L     R2,CVTAQAVT         GET PTR TO TCX
         DROP  R2
         USING IEDQTCX,R2
         L     R2,TCXAIBC          GET PTR TO AIB
         DROP  R2
TESTAIB  LTR   R2,R2               DOES AN AIB EXIST
         BZR   R15                 IF NOT RETURN
         USING IEDQAIB,R2
         TM    AIBSTATE,AIBBUSY    HAS THE AIB BEEN ALLOCATED
         BZ    NEXTAIB             NO, GO GET NEXT ADDRESS
         CLI   AIBKEY,AIBAPKEY     IS IT AN OPCTL AIB
         BE    NEXTAIB             YES, GO GET NEXT AIB
         CLC   AIBECBA(L'OPN),OPN  IF OPEN AIB
         BE    NEXTAIB             BRANCH
         CLC   AIBECBA(L'CLOS),CLOS IF CLOSE AIB
         BE    NEXTAIB             BRANCH
         CLC   AIBECBA(L'QOT1),QOT1 IF ABEND AIB
         BE    NEXTAIB             BRANCH
         CLI   AIBKEY,X'60'        IS IT A CKREQ AIB
         BNE   NOTCKREQ            NO, BRANCH
         CLC   ACRV11,AIBCPEWA     COMPARE PEWA ADDRESSES
         BE    ISAIB               IF EQUAL, BRANCH
         B     NEXTAIB             GO GET NEXT AIB
NOTCKREQ CLC   ACRV11,AIBGPEWA     COMPARE PEWA ADDRESSES
         BE    ISAIB               IF EQUAL, BRANCH
NEXTAIB  ICM   R2,ADDR,AIBCHAIN    GET ADDRESS OF NEXT AIB
         B     TESTAIB             GO LOOK AT NEXT AIB
ISAIB    ST    R2,ACRV13           STORE ADDRESS OF AIB
         BR    R15                 RETURN
         TITLE 'IGC0E05A  TCAM ABEND FORMAT                  CONSTANTS'
ATBLPRNT DC    A(TBLPRINT)         PRINT ROUTINE ADDR
AOPTPRNT DC    A(OPTPRINT)         PRINT ROUTINE ADDR
         DS    0F                  PLACE ON FULLWORD
ADDRMASK DC    X'00FFFFFF'         24 BIT ADDRESSING MASK
OPTIONS  DC    X'FFFFFFFE'         OPTIONS USED MASK
LO16BITS DC    X'0000FFFF'         MASK OF 16 BITS
PDRNTTE  DS    0F                  TRMNEGSZ AND H'0' MUST FOLLOW
TRMNEGSZ DC    AL2(IEDNTRM-IEDQTRM)   AMOUNT OF NEGATIVE PREFIX
         DC    H'0'                   DON'T ALTER POSITIVE SIZE
PDRNDEB  DS    0F                  DEBNEGSZ AND H'0' MUST FOLLOW
DEBNEGSZ DC    AL2(IEDQDEB-DEBTCBAD)  AMOUNT OF NEGATIVE PREFIX
         DC    H'0'                   DON'T ALTER POSITIVE SIZE
PDRRQCBP DS    0F                  QCB NEG AND POS SIZES MUST FOLLOW
QCBNEGSZ DC    AL2(IEDNQCB-IEDQQCB)   NEGATIVE PREFIX FOR QCB
         DC    AL2(QCBPEND-IEDQQCB)   POSITIVE LENGTH
PDRLNMSK DC    F'7'                MAXIMUM MOVE IS EIGHT CHARACTERS
TWO      DC    H'2'                CONSTANT OF TWO
HSATLEN  DC    AL2(SATLEN)         LENGTH OF SAT ENTRY
NATLENM  DC    AL2(NATLEN)         LENGTH OF NAT ENTRY
TOPLINE  DC    H'2'                LINE NUMBER OF FIRST LINE
REGLENS  DS    0HL6                REG PAGE LENGTH INFO
         DC    H'56'               MAX. LINES/PAGE, TO FORCE EJECT
         DC    H'51'               ALMOST END OF PAGE
         DC    H'49'               2 LESS THAN ALMOST END OF REG PAGE
LONGLENS DS    0HL6                LONG PAGE LENGTH INFO
         DC    H'80'               MAX. LINES/LONG PAGE, TO FORCE EJECT
         DC    H'75'               ALMOST END OF LONG PAGE
         DC    H'73'               2 LESS THAN ALMOST END OF LONG PAGE
H4       DC    H'4'                FOUR
HLCBPRF  DC    AL2(LCBPRFSZ)       SIZE OF LCB PREFIX TO IOB
HEXLEN   DC    H'32'               LENGTH OF EACH HEXDUMP CORE/LINE
HEXNEG   DC    C'- '               NEGATIVE OFFSET INDICATOR
OPCTL    DC    C'-OPCTL '          AIB IDENTIFIERS
GETRD    DC    C'-GET/RD'           *
PUTWT    DC    C'-PUT/WT'           *
POINT    DC    C'-POINT '           *
QRESET   DC    C'-QRESET'           *
OPEN     DC    C'-OPEN  '           *
OPN      DC    C'OPEN'              *
CLOSE    DC    C'-CLOSE '           *
CLOS     DC    C'CLOS'              *
ABEND    DC    C'-ABEND '           *
QOT1     DC    C'QOT1'              *
BLANKS   DC    CL62' '             BLANKS FOR CLEARING UNUSED CORE
OPOFFSET DC    AL1(64,46,26,8)     PRINTLINE OFFSETS FOR OPTIONS PRINT
         TITLE 'IGC0E05A  TCAM ABEND FORMAT       MULTI-CARD CONSTANTS'
OPTTYPE  OPTYP 00,C                OPTION TYPE TABLE
         OPTYP 01,Z
         OPTYP 40,P
         OPTYP 81,D
         OPTYP 80,E
         OPTYP D0,Q
         OPTYP C8,V
         OPTYP C4,S
         OPTYP C2,Y
         OPTYP C1,A
         OPTYP F0,F
         OPTYP E6,H
         OPTYP E4,X
         OPTYP E2,B
         EJECT
HEXERR1  DC    C'IED565I ERROR DURING DUMP, BLOCK TERMINATED'
         SPACE
TITLE    DC    C'T C A M   F O R M A T T E D   D U M P     LEVEL 1?.?'
         SPACE
HEAD1    DC    C'TERMNAME INDX TYPE NETADDR    TTE     QCB     LCB     *
               SCB   DCB/LGB DCT/AMWA 1STOPT    DEB  UCB/PEWA   RVT   S*
               IB/AIB'
         SPACE
SCATMOVE DS    0CL39               SCATTER MOVE TRANSLATE TABLE
         DC    AL1(1,2,3,4,5,6,7,8,0,9,10,11,12,13,14,15,16,0,17,18,19)
         DC    AL1(20,21,22,23,24,0,25,26,27,28,29,30,31,32,0,0,0,0)
         SPACE
HEXCHAR  EQU   *-240               ONLY LAST 16 CHAR OF TRANSLATE TABLE
         DC    CL16'0123456789ABCDEF'  ARE USED
         SPACE
RESTRICT DC    C'................' HEX 00 - 0F
         DC    C'................' HEX 10 - 1F
         DC    C'................' HEX 20 - 2F
         DC    C'................' HEX 30 - 3F
         DC    C' ...............' HEX 40 - 4F
         DC    C'................' HEX 50 - 5F
         DC    C'................' HEX 60 - 6F
         DC    C'................' HEX 70 - 7F
         DC    C'................' HEX 80 - 8F
         DC    C'................' HEX 90 - 9F
         DC    C'................' HEX A0 - AF
         DC    C'................' HEX B0 - BF
         DC    C'.ABCDEFGHI......' HEX C0 - CF
         DC    C'.JKLMNOPQR......' HEX D0 - DF
         DC    C'..STUVWXYZ......' HEX E0 - EF
         DC    C'0123456789......' HEX F0 - FF
         TITLE 'IGC0E05A  TCAM ABEND FORMAT            BASIC PDR LISTS'
PDRBASIC PDR   TCX,ADFRUN,3,OFF=(0,TCXSIZE)
         PDR   AVT,ADFRUN,4,OFF=(0,AVTCPBNO-IEDQAVTD+D2)
         PDR   SAVT,ADFRUN,5,RTN=PDRRSAVT
         PDR   OPCAVT,ADFRUN,6,OFF=(0,OPCLEN)
         PDR   SAT,ADFRUN,9,RTN=PDRRSAT
         PDR   RESPL,ADFRUN,7,OFF=(0,RESPLSZ)
PDROLTCB PDR   OLTCB,ADFRUN,8,OFF=(0,TOTOBEND-TOTOBPTR),       @YM07361*
               FLG=PDRCHN,CHN=TOTELLNK-D1-TOTOBPTR
PDRAIB   PDR   AIBXXXXXXX,ADFRUN,10,RTN=PDRAIBS,                       *
               FLG=PDRLAST+PDRCHN,CHN=AIBCHAIN-D1-IEDQAIB      @OZ31435
         TITLE 'IGC0E05A  TCAM ABEND FORMAT         OPTIONAL PDR LISTS'
PDROPTN  PDR   TTE,ADFTTE,2,PRT=PRTDTTE,RTN=PDRRTTE
         PDR   AMWA,ADFAMWA,8,PRT=PRTDDCT,OFF=(0,WRKASIZE)
         PDR   PEWA,ADFPEWA,11,PRT=PRTDUCB,OFF=(0,PEWASIZE)
         PDR   PCB,ADFPCB,7,PRT=PRTDDCB,OFF=(0,PCBSIZE)
         PDR   SIB,ADFSIB,13,PRT=PRTDSIB,OFF=(0,SIBLEN),               *
               FLG=PDRCHN,CHN=SIBCHAIN-IEDSIBD
         PDR   RVT,ADFRVT,12,PRT=PRTDRVT,RTN=(PDRRRVT)
         PDR   DCT,ADFDCT,8,PRT=PRTDDCT,OFF=(0,6)
         PDR   LGB,ADFLGB,7,PRT=PRTDDCB,RTN=PDRRLGB            @YM08111
         PDR   DCB,ADFDCB,7,PRT=PRTDDCB,RTN=PDRRDCB            @YM08111
         PDR   SCB,ADFSCB,6,PRT=PRTDSCB,FLG=PDRNZERO,RTN=PDRRSCB
         PDR   PLCB,ADFPLCB,5,PRT=PRTDLCB,FLG=PDRNZERO,OFF=(0,LCBPLCBL)
         PDR   LCB,ADFLCB,5,PRT=PRTDLCB,FLG=PDRNZERO,RTN=(PDRRLCB)
         PDR   UCB,ADFUCB,11,PRT=PRTDUCB,OFF=(0,64)
         PDR   DEB,ADFDEB,10,PRT=PRTDDEB,RTN=PDRRDEB
         PDR   OPTIONS,ADFOPT,9,PRT=PRTDOPT,FLG=PDRNZERO,RTN=PDRROPT
PDRMH    PDR   TNTINDX,ADFINDX,1,PRT=PRTDINDX,FLG=PDRDATA,OFF=(0,0)
PDRMNWA  PDR   NWA,ADFNWA,4,PRT=PRTDNWA,FLG=PDRDATA,OFF=(0,0)
         PDR   QCB,ADFQCB,3,PRT=PRTDQCB,FLG=PDRLAST,RTN=PDRRQCB
         TITLE 'IGC0E05A  TCAM ABEND FORMAT                 TYPE TABLE'
MHTYPE   TDR   MH,00,0,MASKS=ADFQCB+ADFINDX+ADFNWA
         ORG   *-4                 THROW OUT LOOKUP ARG AND ACR ADDRESS
         SPACE
TYPTABLE TDR   TRM,E0,ACRTRM,MASKS=ADFTTE+ADFINDX+ADFQCB+ADFDCB+ADFDCT+*
               ADFLCB+ADFSCB+ADFOPT
         TDR   LU,TRMLUNT,ACRNCOM,                                     *
               MASKS=ADFINDX+ADFTTE+ADFQCB+ADFLGB+ADFDCT+ADFOPT+ADFNWA+*
               ADFPLCB+ADFSCB+ADFSIB
         TDR   NTRM,TRMPSNA,ACRNLNE,                                   *
               MASKS=ADFINDX+ADFTTE+ADFQCB+ADFLGB+ADFSCB+ADFOPT+ADFNWA+*
               ADFPLCB+ADFDCT
         TDR   CTRM,TRMCTERM,ACRNLNE,                                  *
               MASKS=ADFINDX+ADFTTE+ADFQCB+ADFLGB+ADFSCB+ADFOPT+ADFNWA+*
               ADFPLCB+ADFDCT
         TDR   CLUS,TRMCLUST,ACRNLNE,                                  *
               MASKS=ADFINDX+ADFTTE+ADFQCB+ADFLGB+ADFSCB+ADFOPT+ADFNWA+*
               ADFPLCB+ADFDCT
         TDR   SSCP,TRMSSCP,ACRSSCP,                                   *
               MASKS=ADFINDX+ADFTTE+ADFQCB+ADFSIB+ADFSCB+ADFNWA+ADFOPT+*
               ADFPLCB+ADFRVT                                  @YM06005
         TDR   GRP,TRMGRP,ACREND,                                      *
               MASKS=ADFINDX+ADFTTE+ADFQCB
         TDR   LINE,E8,ACRLINE,                                @YM08557*
               MASKS=ADFINDX+ADFTTE+ADFQCB+ADFDCB+ADFLCB+ADFSCB+ADFDCT+*
               ADFDEB+ADFUCB+ADFOPT
         TDR   NLNE,TRMNSDLC,ACRNLNE,                                  *
               MASKS=ADFINDX+ADFTTE+ADFQCB+ADFLGB+ADFDCT+ADFOPT+ADFNWA+*
               ADFPLCB+ADFSCB+ADFGCOH
         TDR   SDLC,TRMSDLC,ACRNLNE,                                   *
               MASKS=ADFINDX+ADFTTE+ADFQCB+ADFLGB+ADFDCT+ADFOPT+ADFNWA+*
               ADFPLCB+ADFSCB+ADFGCOH
         TDR   PU,TRMPUNT,ACRNCOM,                                     *
               MASKS=ADFINDX+ADFTTE+ADFQCB+ADFLGB+ADFDCT+ADFOPT+ADFNWA+*
               ADFPLCB+ADFSCB+ADFSIB
         TDR   LNCP,TRMLNCP,ACRNCP,                                    *
               MASKS=ADFINDX+ADFTTE+ADFQCB+ADFSIB+ADFRVT+ADFDEB+ADFUCB+*
               ADFOPT+ADFDCT+ADFPLCB+ADFDCB+ADFNWA             @YM07787
         TDR   LIST,E4,ACREND,                                         *
               MASKS=ADFINDX+ADFTTE+ADFQCB
         TDR   PROC,E2,ACRPROC,                                        *
               MASKS=ADFINDX+ADFTTE+ADFQCB+ADFNWA+ADFPEWA+ADFPCB+ADFDEB*
               +ADFAMWA
         TDR   LOG,E6,ACRLOG,                                          *
               MASKS=ADFINDX+ADFTTE+ADFQCB+ADFDCB+ADFDEB+ADFUCB YM07688
         TDR   UNKN,00,ACRUNKN,MASKS=ADFINDX+ADFQCB+ADFTTE+ADFOPT
         DC    X'FF'               END OF TYPE TABLE
         TITLE 'IGC0E05A  TCAM ABEND FORMAT         OPTIONAL ACR LISTS'
*    OPTIONS   CONTROL BLOCK / CELL RELATIONSHIPS
*           CELL = CONTENTS
*              0 = UNUSED
*              1 = TNT INDEX AND MAX INDEX      (SET AFTER BASIC ACR)
*              2 = TERMINAL TABLE               (SET BY LOOKUP)
*              3 = TRMSTATE AND QCB ADDRESS     (SET BY LOOKUP)
*              4 = NET WORK ADDRESS
*              5 = LCB/PLCB
*              6 = SCB
*              7 = DCB/PCB/LGB
*              8 = DCT/AMWA
*              9 = FIRST OPTION FIELD
*             10 = DEB
*             11 = UCB/PEWA
*             12 = RVT
*             13 = SIB/AIB
         DS    0F
ACRLINE  ACR   7,3,QCBLGBAD-1-IEDQQCB   POINT TO DCB
         ACR   CALL=ACRRDEB             GET DEB FROM DCB IF OPEN
         ACR   CALL=ACRRUCB             GET UCB ADDR. FROM DEB @YM08557
         ACR   LIST=ACRCOM              LINK TO COMMON LIST
ACRTRM   ACR   7,3,QCBLGBAD-1-IEDQQCB   POINT TO DCB
ACRCOM   ACR   CALL=ACRRLSCB            CALL LCB & SCB ROUTINE
         ACR   CALL=ACRROPT             CALL OPTION LOOKUP ROUTINE
         ACR   CALL=ACRRDCT             CALL DCT ADDRESS CALCULATION
         ACR   CALL=ACRTNX              CALL EXIT
         SPACE
ACRPROC  ACR   CALL=ACRROPT             CALL OPTION LOOKUP ROUTINE
         ACR   11,2,TRMSTAT-IEDQTRM     GET PEWA ADDRESS FROM TTE
         ACR   7,3,QCBDCBAD-1-IEDQQCB   GET PCB ADDRESS FROM QCB
         ACR   10,11,PEWADEB-IEDQPEWA   GET DEB ADDRESS FROM PEWA
         ACR   8,10,DEBECBAD-DEBTCBAD   GET AMWA ADDRESS FROM DEB
         ACR   CALL=ACRRNWA             CALL NWA CALCULATION
         ACR   CALL=ACRAIB              CALL AIB CALCULATION
         ACR   CALL=ACRTNX              CALL EXIT
         SPACE
ACRNCP   ACR   7,3,QCBDCBAD-1-IEDQQCB   GET DCB ADDRESS FROM QCB
         ACR   CALL=ACRRDEB             GET DEB ADDRESS FROM DCB
         ACR   11,10,DEBUCBAD-DEBTCBAD  GET UCB ADDR. FROM DEB @YM06005
ACRSSCP  ACR   CALL=ACRRNWA             CALL NWA CALCULATION   @YM06005
         ACR   CALL=ACRRRVT             CALL RVT & PLCB ADDR. CALC.
         ACR   LIST=ACRSIB              GOTO NCP COMMON LIST
         SPACE
ACRNCOM  ACR   7,3,QCBLGBAD-1-IEDQQCB   GET LGB ADDRESS FROM QCB
         ACR   CALL=ACRRNWA             COMPUTE NETWORK ADDR.  @YM06005
         ACR   CALL=ACRRPLCB            CALL PLCB ADDRESS CALCULATION
ACRSIB   ACR   13,2,TRMSIBPT-1-IEDQTRM  POINT TO SIB CHAIN
ACRNOSIB ACR   6,5,LCBSCBA-1-IEDQLCB    GET SCB ADDR FROM PLCB @YM06877
ACRUNKN  ACR   CALL=ACRROPT             CALL OPTIONS FIELD CALC.
         ACR   CALL=ACRRDCT             CALL DCT ADDRESS CALCULATION
ACREND   ACR   CALL=ACRTNX              CALL EXIT
         SPACE
ACRLOG   ACR   7,3,QCBLDCB-IEDQQCB      GET DCB ADDRESS FROM QCB
*                                                              @XM05707
         ACR   CALL=ACRRDEB             CALL DEB LOOKUP ROUTINE
         ACR   11,10,DEBUCBAD-DEBTCBAD  GET UCB ADDR. FROM DEB @YM06005
         ACR   CALL=ACRTNX              CALL EXIT
         SPACE
ACRNLNE  ACR   7,3,QCBLGBAD-1-IEDQQCB   GET LGB ADDRESS FROM QCB
         ACR   CALL=ACRRNWA             COMPUTE NETWORK ADDRESS
         ACR   CALL=ACRRPLCB            CALL PLCB CALCULATION
         ACR   LIST=ACRNOSIB            GOTO COMMON LIST
         SPACE
MHACRLST ACR   CALL=ACRRNWA             COMPUTE NETWORK ADDRESS
         ACR   CALL=ACRTNX              END OF LIST, CALL EXIT
         TITLE 'IGC0E05A  TCAM ABEND FORMAT            BASIC ACR LISTS'
*  BASIC DUMP  CONTROL BLOCK / CELL RELATIONSHIPS
*           CELL = CONTENTS
*              0 = UNUSED
*              1 = TNT INDEX AND MAX INDEX         (MAX INIT BY BASIC)
*              2 = RESERVED
*              3 = TCX ADDRESS
*              4 = AVT ADDRESS
*              5 = SAVT ADDRESS
*              6 = OCAVT ADDRESS
*              7 = RESPL ADDRESS
*              8 = OLTCB ADDRESS
*              9 = SAT ADDRESS        (SET BY PDRRSAVT)
         DS    0F                     PUT LISTS ON A FULL WORD
ACRBASIC EQU   *
         ACR   3,1,CVTAQAVT-CVTMAP    GET POINTER TO TCX
         ACR   4,3,TCXAVT-IEDQTCX     GET POINTER TO AVT
         ACR   1,4,AVTRNMPT-IEDQAVTD  GET POINTER TO TNT
         ACR   1,1,TNTLEN-IEDQTNTD-D2 GET MAX TNT INDEX
         ACR   5,4,AVTSAVTP-IEDQAVTD  GET POINTER TO SAVT
         ACR   6,4,AVTOCGET-IEDQAVTD  GET POINTER TO OP. CONTROL AVT
         ACR   7,4,AVTCWTOT-IEDQAVTD  GET POINTER TO RESPL
         ACR   8,7,RESOBFWD-RESPL     GET POINTER TO OLTCB
         ACR   10,3,TCXAIBC-IEDQTCX   GET POINTER TO AIB CHAIN
         ACR   CALL=ACRTNX            END OF LIST, CALL EXIT
         SPACE 6
*        ****    *   *****  **** *   *        *   ****  *****   *
*        *   *  * *    *   *     *   *       * *  *   * *      * *
*        ****  *****   *   *     *****      ***** ****  ****  *****
*        *     *   *   *   *     *   *      *   * *  *  *     *   *
*        *     *   *   *    **** *   *      *   * *   * ***** *   *
         SPACE 2
PATCH    DC    88H'0'              PATCH AREA
         TITLE 'IGC0E05A  TCAM ABEND FORMAT                     DSECTS'
DYNAM    DSECT
SAVEAREA DS    18F                 SAVE AREA
ESTAESAV DS    3F                  ESTAE REG SAVE AREA
LVL2SAVE DS    A                   LEVEL 2 SUBROUTINE RETURN ADDRESS
LVL3SAVE DS    A                   LEVEL 3 SUBROUTINE RETURN ADDRESS
PRNTSAVE DS    A                   PRINT RETURN SAVE
SPACSAVE DS    A                   LINE SPACING RETURN SAVE
SPIESAVE DS    A                   CURRENT SPIE EXIT ADDR. FOR REFRESH
ROUTADDR DS    A                   ROUTINE ADDR TO BRANCH TO
PARMTCX  DS    F                   PARM LIST MOVED FROM TCX    @XM05835
ACRVECT  DS    0A                  ADDRESS COMPUTATION VECTOR
ACRV0    DS    A                     CELL 0
ACRV1    DS    A                     CELL 1
ACRV2    DS    A                     CELL 2
ACRV3    DS    A                     CELL 3
ACRV4    DS    A                     CELL 4
ACRV5    DS    A                     CELL 5
ACRV6    DS    A                     CELL 6
ACRV7    DS    A                     CELL 7
ACRV8    DS    A                     CELL 8
ACRV9    DS    A                     CELL 9
ACRV10   DS    A                     CELL 10
ACRV11   DS    A                     CELL 11
ACRV12   DS    A                     CELL 12
ACRV13   DS    A                     CELL 13
         DS    0D                  MAKE MULTIPLE OF DOUBLE WORD
ACRLKUCL EQU   *-ACRV4             LOOKUP CLEAR LENGTH
ACRVECTS EQU   *-ACRVECT           VECTOR LENGTH
DYNAMS   EQU   *-DYNAM             SIZE OF DYNAMIC AREA
* NOTE: THE ABOVE DYNAMIC AREA IS FOUND WITHIN A 58 FULLWORD(232 BYTE)
*       AREA IN THE ABEND CONTROL LIST DESCRIBED BY IHAAADDS.  THIS
*       AREA CAN THEREFORE NEVER EXCEED THIS LENGTH WITHOUT INTERFACING
*       WITH THE MVS ABEND COMPONENT.
         EJECT
ACR      DSECT
ACRADDR  DS    0A                  POINTER FOR RTN AND LIST ENTRIES
ACRFLAGS DS    0X                  ACR FLAGS
ACRRTNF  EQU   X'80'               POINTER IS ROUTINE ENTRY
ACRLISTF EQU   X'C0'               POINTER IS LIST ENTRY
ACRY     DS    X                   Y INDEX OR FLAGS
ACRX     DS    X                   X INDEX
ACROFF   DS    H                   OFFSET FOR ADDRESS CALCULATION
ACRNEXT  EQU   *                   NEXT ACR ENTRY
         SPACE 2
ACRPARM1 DSECT
ACRPARM  DS    A                   ADDRESS POINTER TO NEXT BLOCK
         SPACE 6
TDRDSECT DSECT
TDRMASK  DS    A                   OPTIONS
TDRNAME  DS    CL4                 TYPE OF ENTRY NAME
TDRACR   DS    0A                  POINTER TO ACR LIST FOR THIS ENTRY
TDRTYPE  DS    XL1                 LOOKUP FLAGS AND MASK
TDRSPEC  EQU   X'E0'               SPECIAL FLAGS FOR NO TTE PREFIX
         DS    AL3                 ADDRESS OF ACR LIST
TDRNEXT  DS    XL1                 ADDRESS OF NEXT ENTRY
TDRLAST  EQU   X'FF'               INDICATOR OF LAST ENTRY
         EJECT
PDRDSECT DSECT
PDRMASK  DS    A                   OPTIONS MASKS
PDRRTNA  DS    0A                  ADDRESS OF CALC ROUTINE
PDRSTRT  DS    H                   STARTING OFFSET (0 OR -)
PDREND   DS    H                   ENDING OFFSET (+)
PDRFLAG  DS    XL1                 FLAGS
PDRLAST  EQU   X'80'               LAST ENTRY IN LIST
PDRDATA  EQU   X'40'               DATA, NOT ADDRESS
PDRCHN   EQU   X'20'               BLOCK IS CHAINED
PDRRTN   EQU   X'10'               PDRRTN CONTAINS ROUTINE ADDRESS
PDRNZERO EQU   X'08'               NO ZERO ADDRESSES ARE TO PRINT
PDRLEN   EQU   X'07'               LENGTH OF PRINT FIELD - 1
PDRNAME  DS    CL10                CONTROL BLOCK NAME
PDRNAMEL EQU   *-PDRNAME           LENGTH OF PDRNAME FIELD
PDRINDEX DS    AL1                 ACR VECTOR OFFSET
PDRPRT   DS    AL1                 PRINT OFFSET
PDRCHAIN DS    XL2                 CHAIN OFFSET                @OZ32381
PDRNEXT  DS    A                   NEXT PDR ENTRY
         EJECT
PRTLINED DSECT
PRTLINE  DS    0CL121              PRINT LINE, CONTROL AND DATA
PRTASA   DS    CL1                 CARRIAGE CONTROL INDICATOR
PRTDATA  DS    CL120               DATA
         SPACE 2
*              TITLE LAYOUT
         ORG   PRTDATA+20
PRTTITLE DS    0CL52               TITLE
         DS    CL49                TITLE CONSTANTS
PRTTLVL  DS    CL1                 UNITS DIGIT OF TCAM LEVEL
         DS    CL1                 PERIOD
PRTTMOD  DS    CL1                 MODIFICATION LEVEL
         SPACE 2
*              HEAD1 LAYOUT
         ORG   PRTDATA
PRTHDR1  DS    CL116               HEAD1
         SPACE 2
*              DETAIL1 LAYOUT
         ORG   PRTDATA
PRTDNAME DS    CL8                 TERMINAL OR MH NAME
         DS    CL1                 PAD
PRTDINDX DS    CL4                 INDEX IN HEX
         DS    CL1                 PAD
PRTDTYPE DS    CL4                 TYPE OF ENTRY
         DS    CL3                 PAD
PRTDNWA  DS    CL4                 NETWORK ADDRESS IN HEX
         DS    CL4                 PAD
PRTDTTE  DS    CL6                 TTE ADDRESS
         DS    CL2                 PAD
PRTDQCB  DS    CL6                 QCB ADDRESS IN HEX
         DS    CL2                 PAD
PRTDLCB  DS    CL6                 LCB OR PLCB ADDRESS IN HEX
         DS    CL2                 PAD
PRTDSCB  DS    CL6                 SCB ADDRESS IN HEX
         DS    CL2                 PAD
PRTDDCB  DS    CL6                 DCB ADDRESS IN HEX
         DS    CL2                 PAD
PRTDDCT  DS    CL6                 DEVICE CHAR. TABLE ADDRESS IN HEX
         DS    CL2                 PAD
PRTDOPT  DS    CL6                 1ST. OPTION FIELD ADDRESS IN HEX
         DS    CL2                 PAD
PRTDDEB  DS    CL6                 DEB OR PEB ADDRESS IN HEX
         DS    CL2                 PAD
PRTDUCB  DS    CL6                 UCB OR PEWA ADDRESS IN HEX
         DS    CL2                 PAD
PRTDRVT  DS    CL6                 RVT IN HEX
         DS    CL2                 PAD
PRTDSIB  DS    CL6                 SESSION INFO. BLOCK ADDR. IN HEX
         EJECT
*              HEXDUMP LAYOUT
         ORG   PRTDATA
PRTHNEG  DS    0CL2                NEGATIVE OFFSET INDICATOR
PRTHOFF  DS    CL4                 HEX OFFSET
PRTHPAD  DS    CL3                 PAD
PRTHEXM  DS    0CL32               MOVE FROM MEMORY BUFFER
PRTHERR1 DS    0CL43               ERROR1 MESSAGE
PRTHEXL  DS    0CL39               LEFT HEX GROUPS
         DS    CL38                ONLY THREE SPACES, SCAT/MOVE IS FOUR
PRTHEXR  DS    CL39                RIGHT HEX GROUPS
PRTHFRM1 DS    C                   FRAME CHARACTER
PRTHCHAR DS    CL32                CHARACTER PRESENTATION
PRTHFRM2 DS    C                   FRAME CHARACTER
         ORG   PRTHFRM2-65
PRTHEXT  DS    0CL64               HEX TRANSLATED AREA
PRTHEXTL DS    CL32                LEFT HEX TRANSLATED AREA
PRTHEXTR DS    CL32                RIGHT HEX TRANSLATED AREA
         SPACE 2
*              UNPACK LAYOUT FOR BYTE TO HEX
         ORG   PRTHEXM
PRTHEXM1 DS    0CL8                UNPACK SOURCE
         DS    CL7                 IGNORE RIGHT MOST BYTE
PRTHEXM2 DS    0CL8                UNPACK SOURCE
         DS    CL7                 IGNORE RIGHT MOST BYTE
PRTHEXM3 DS    0CL8                UNPACK SOURCE
         DS    CL7                 IGNORE RIGHT MOST BYTE
PRTHEXM4 DS    0CL8                UNPACK SOURCE
         DS    CL7                 IGNORE RIGHT MOST BYTE
PRTHEXM5 DS    0CL5                UNPACK SOURCE
         DS    CL4                 IGNORE RIGHT MOST BYTE
         ORG   PRTHEXT
PRTHEXT1 DS    0CL15               UNPACK TARGET
         DS    CL14                DROP RIGHT MOST CHAR
PRTHEXT2 DS    0CL15               UNPACK TARGET
         DS    CL14                DROP RIGHT MOST CHAR
PRTHEXT3 DS    0CL15               UNPACK TARGET
         DS    CL14                DROP RIGHT MOST CHAR
PRTHEXT4 DS    0CL15               UNPACK TARGET
         DS    CL14                DROP RIGHT MOST CHAR
PRTHEXT5 DS    0CL9                UNPACK TARGET
         DS    CL8                 DROP RIGHT MOST CHAR
         EJECT
*              OPTIONAL HEADER LAYOUT
         ORG   PRTDATA+32
PRTOFML1 DS    CL1                 FIRST FRAME  '*'
PRTOFML2 DS    CL7                 SEVEN COPIES OF FIRST FRAME
         DS    CL2                 PAD
PRTONAME DS    CL8                 TERMINAL OR MH NAME
         DS    CL1                 PAD
PRTOINDX DS    CL4                 INDEX IN HEX
         DS    CL1                 PAD
PRTOTYPE DS    CL4                 TYPE OF ENTRY
         DS    CL3                 PAD
PRTOFMR1 DS    CL1                 FIRST RIGHT FRAME '*'
PRTOFMR2 DS    CL7                 SEVEN COPIES OF FIRST RIGHT FRAME
         SPACE 6
PADDRPD  DSECT                     XXXXXX  (AAAAAA) TITLE LINE
         DS    CL2                 PAD
PADDRP1  DS    CL1                 LEFT PARN
PADDRP2  DS    CL6                 ADDRESS
PADDRP3  DS    CL1                 RIGHT PARN
         SPACE 6
POPT     DSECT
POPTOFF  DS    CL4                 OPTION OFFSET
POPTPAD1 DS    CL1                 PAD
POPTTYPE DS    CL1                 TYPE
POPTLEN  DS    CL2                 LENGTH IN HEX
POPTPAD2 DS    CL1                 PAD
POPTNAME DS    CL8                 OPTION NAME
         EJECT
         IHAABDPL
         ORG   ADPLCOM1
ADPLDYNM DS    A                   POINTER TO DYNAMIC AREA
ADPLWK1  DS    0F                  FULLWORD WORK AREA
ADPLWK1A DS    H                   HALFWORD WORK AREA
ADPLWK1B DS    H                   HALFWORD WORK AREA
ADPLWK2  DS    0F                  FULLWORD WORK AREA
ADPLWK2A DS    H                   HALFWORD WORK AREA
ADPLWK2B DS    H                   HALFWORD WORK AREA
ADPLWK3  DS    0F                  FULLWORD WORK AREA
ADPLWK3A DS    H                   HALFWORD WORK AREA
ADPLWK3B DS    H                   HALFWORD WORK AREA
         EJECT
         TACSMD
         EJECT
         TAIBD
         EJECT
         TAVTD
         EJECT
         CVT   DSECT=YES
         EJECT
         DCBD  DSORG=(TX,TR,TQ,PS)                             @YM08111
         EJECT
         TDEBD
         EJECT
         TLCBD
         EJECT
         TLGBD
LGBSIZE  EQU   *-LGBBUFOU          POSITVE SIZE
         EJECT
         TNATD
         EJECT
         OLTCB POINTER=YES
         EJECT
         TOPCAVTD
         EJECT
         TPCBD
         EJECT
         TPEBD
         EJECT
         TPEWAD
         EJECT
         TQCBD
         EJECT
RESPL    RESPL
RESPLSZ  EQU   *-RESPL             LENGTH OF RESPL
         EJECT
         IKJRB
         EJECT
         TRVTD
         EJECT
         TSATD
         EJECT
         TSCBD
         EJECT
         TSIBD
         EJECT
         IHASDWA
         EJECT
         TTCBD
         EJECT
         TTCXD SVS
         EJECT
         TTNTD
         EJECT
         TTRMD
         END
