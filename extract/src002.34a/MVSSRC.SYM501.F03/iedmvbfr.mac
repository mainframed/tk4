         TITLE 'IEDMVBFR, MOVE-BUFFER-DATA MODULE                      *
                        '
IEDMVBFR CSECT ,                                                   0001
@PROLOG  DS    0H                                                  0002
         USING   *,RBASE
*
IEDMVBFR IEDHJN  START,HJN
*                                   /* SAVE CALLER'S REGISTERS       */
*   REGSV0=RZERO;                   /* REGISTER 0                    */
         ST    RZERO,REGSV0(,RSAVE)                                0068
*   STM(R2,RC,REGSV2C);             /* REGISTERS 2-12                */
         STM   R2,RC,REGSV2C(RSAVE)                                0069
*   REGSVE=RE;                      /* REGISTER 14                   */
         ST    RE,REGSVE(,RSAVE)                                   0070
*   CALL INIT;                      /* INITIALIZE REGISTERS & FIELDS
*                                      FROM USER'S PARAMETER LIST    */
         BAL   @14,INIT                                            0071
         EJECT
*                                                                  0072
*/********************************************************************/
*/*                                                                  */
*/*      D A T A - M O V I N G   L O O P                             */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*      THIS LOOP MOVES THE DATA FROM THE SOURCE BUFFER TO THE      */
*/*      TARGET BUFFER.  ON EACH PASS THRU THE LOOP THE NUMBER OF    */
*/*      BYTES MOVED IS THE SMALLER OF ---                           */
*/*        A. RTLENGTH - THE NUMBER OF BYTES OF SPACE REMAINING      */
*/*           IN THE CURRENT TARGET UNIT,     OR                     */
*/*        B. RSLENGTH - THE NUMBER OF DATA BYTES NOT YET MOVED      */
*/*           OUT OF THE CURRENT SOURCE UNIT.                        */
*/*                                                                  */
*/*      WHENEVER EITHER THE TARGET DATA POINTER (RTDATA) OR THE     */
*/*      SOURCE DATA POINTER (RSDATA) REACHES THE END OF ITS CURRENT */
*/*      UNIT, WE SKIP TO THE NEXT UNIT IN THAT BUFFER AND ADJUST    */
*/*      OUR ADDRESSES AND COUNTS ACCORDINGLY.                       */
*/*                                                                  */
*/*      WE EXIT FROM THE LOOP WHEN ALL THE DATA HAS BEEN MOVED      */
*/*      OR WHEN WE HAVE NO MORE TARGET UNITS TO MOVE INTO.          */
*/*                                                                  */
*/********************************************************************/
*                                                                  0072
*   DO WHILE(RCOUNT>0&((RTUNIT&ADDRMSK)=0));/*               @YM08496*/
         B     @DE00072                                            0072
@DL00072 DS    0H                                                  0073
*     IF RTLENGTH<RSLENGTH THEN                                    0073
         CLR   RTLENGTH,RSLENGTH                                   0073
         BNL   @RF00073                                            0073
*       N=RTLENGTH;                 /* USE TARGET UNIT'S COUNT       */
         ST    RTLENGTH,N(,RSAVE)                                  0074
*     ELSE                                                         0075
*       N=RSLENGTH;                 /* USE SOURCE UNIT'S COUNT       */
         B     @RC00073                                            0075
@RF00073 ST    RSLENGTH,N(,RSAVE)                                  0075
*     RTDATA->CHARS(1:N)=RSDATA->CHARS(1:N);/* MOVE N BYTES OF DATA
*                                      CHANGE COUNTS, ADDRESSES BY N */
@RC00073 L     @12,N(,RSAVE)                                       0076
         LR    @11,@12                                             0076
         BCTR  @11,0                                               0076
         EX    @11,@SM01463                                        0076
*     RCOUNT=RCOUNT-N;              /* TOTAL BYTES TO BE MOVED       */
         SLR   RCOUNT,@12                                          0077
*     RTLENGTH=RTLENGTH-N;          /* TARGET LENGTH                 */
         SLR   RTLENGTH,@12                                        0078
*     RSLENGTH=RSLENGTH-N;          /* SOURCE LENGTH                 */
         SLR   RSLENGTH,@12                                        0079
*     RTDATA=RTDATA+N;              /* TARGET DATA                   */
         ALR   RTDATA,@12                                          0080
*     RSDATA=RSDATA+N;              /* SOURCE DATA                   */
         ALR   RSDATA,@12                                          0081
*     IF RTDATA=TUNITEND THEN       /* END OF TARGET UNIT?           */
         C     RTDATA,TUNITEND(,RSAVE)                             0082
         BNE   @RF00082                                            0082
*       CALL TNEXT;                 /* YES, STEP TO NEXT TARGET UNIT */
         BAL   @14,TNEXT                                           0083
*     IF RSDATA=SUNITEND THEN       /* END OF SOURCE UNIT?           */
@RF00082 C     RSDATA,SUNITEND(,RSAVE)                             0084
         BNE   @RF00084                                            0084
*       CALL SNEXT;                 /* YES, STEP TO NEXT SOURCE UNIT */
         BAL   @14,SNEXT                                           0085
*   END;                                                           0086
@RF00084 DS    0H                                                  0086
@DE00072 SLR   @12,@12                                             0086
         CLR   RCOUNT,@12                                          0086
         BNH   @DC00072                                            0086
         LR    @00,RTUNIT                                          0086
         N     @00,ADDRMSK(,RSAVE)                                 0086
         CLR   @00,@12                                             0086
         BE    @DL00072                                            0086
@DC00072 DS    0H                                                  0087
         EJECT
*                                                                  0087
*/********************************************************************/
*/*                                                                  */
*/*      A F T E R - M O V E   P R O C E S S I N G                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0087
*   IF PLMVTCTG=OFF&                /* TARGET = A TCAM BUFFER? & ... */
*       PLMVUNCF=ON THEN            /* DID CALLER ASK US TO UNCHAIN
*                                      EMPTY TARGET UNITS LEFT OVER
*                                      AT THE END OF THE MOVE?       */
         TM    PLMVUNCF(IEDPLMVP),B'10000000'                      0087
         BNO   @RF00087                                            0087
         TM    PLMVTCTG(IEDPLMVP),B'00100000'                      0087
         BNZ   @RF00087                                            0087
*     CALL UNCHAIN;                 /* YES, DO UNCHAINING IF NEEDED  */
         BAL   @14,UNCHAIN                                         0088
*   ELSE                                                           0089
*     PLMVUNCA=0;                   /* NO, INDICATE NO UNCHAINING    */
         B     @RC00087                                            0089
@RF00087 SLR   @12,@12                                             0089
         ST    @12,PLMVUNCA(,IEDPLMVP)                             0089
*   CALL UPDTPRMS;                  /* UPDATE USER'S PARAMETER LIST
*                                      TO REFLECT CONDITIONS AT THE
*                                      END OF THE MOVE               */
@RC00087 BAL   @14,UPDTPRMS                                        0090
*                                   /* RESTORE REGISTERS & RETURN    */
*   RE=REGSVE;                      /* REGISTER 14                   */
         L     RE,REGSVE(,RSAVE)                                   0091
*   LM(R2,RC,REGSV2C);              /* REGISTERS 2-12                */
         LM    R2,RC,REGSV2C(RSAVE)                                0092
*   RZERO=REGSV0;                   /* REGISTER 0                    */
         L     RZERO,REGSV0(,RSAVE)                                0093
*   RETURN;                         /* RETURN TO CALLER              */
@EL00001 DS    0H                                                  0094
@EF00001 DS    0H                                                  0094
@ER00001 BR    @14                                                 0094
         EJECT
*                                                                  0095
*/********************************************************************/
*/*                                                                  */
*/*      I N I T   SUBROUTINE                                        */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*      THIS SUBROUTINE INITIALIZES REGISTERS USED BY THIS MODULE   */
*/*      AND SETS UP FIELDS WITHIN THE USER-SUPPLIED SAVE AREA       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0095
*INIT:                                                             0095
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0095
INIT     DS    0H                                                  0096
*   RAVT=TCXAVT;                    /* AVT ADDRESS (AVTSAVE1)        */
         L     @12,CVTPTR                                          0096
         L     @12,TCXPTR(,@12)                                    0096
         L     RAVT,TCXAVT(,@12)                                   0096
*                                   /* PICK UP PARAMETER LIST VALUES */
*   RTUNIT=PLMVTU;                  /* TARGET UNIT ADDRESS           */
         L     RTUNIT,PLMVTU(,IEDPLMVP)                            0097
*   RTDATA=PLMVTD;                  /* START-OF-DATA ADDRESS (WITHIN
*                                      TARGET UNIT)                  */
         L     RTDATA,PLMVTD(,IEDPLMVP)                            0098
*   RSUNIT=PLMVSU;                  /* SOURCE UNIT ADDRESS           */
         L     RSUNIT,PLMVSU(,IEDPLMVP)                            0099
*   RSDATA=PLMVSD;                  /* START-OF-DATA ADDR (WITHIN  0100
*                                      SOURCE UNIT)                  */
         L     RSDATA,PLMVSD(,IEDPLMVP)                            0100
*   RCOUNT=PLMVLNTH;                /* NUMBER OF BYTES TO BE MOVED   */
         LH    RCOUNT,PLMVLNTH(,IEDPLMVP)                          0101
         N     RCOUNT,@CF01465                                     0101
*                                   /* CALCULATE END-OF-UNIT ADDRESS
*                                      & SPACE REMAINING IN UNITS    */
*   IF PLMVTCTG=ON THEN             /* TARGET = CONTIGUOUS-CORE AREA?*/
         TM    PLMVTCTG(IEDPLMVP),B'00100000'                      0102
         BNO   @RF00102                                            0102
*     DO;                           /* YES                   @YM08496*/
*       TUNITEND=RTDATA+RCOUNT+1;   /* SET BEYOND AREA END   @YM08496*/
         LR    @12,RTDATA                                          0104
         ALR   @12,RCOUNT                                          0104
         AL    @12,@CF00060                                        0104
         ST    @12,TUNITEND(,RSAVE)                                0104
*       ADDRMSK=0;                  /* NULLIFY CHECK FOR     @YM08496*/
         SLR   @12,@12                                             0105
         ST    @12,ADDRMSK(,RSAVE)                                 0105
*     END;                          /* ... INVALID TIC ADDR  @YM08496*/
*   ELSE                            /*                       @YM08496*/
*     DO;                           /* NO, TARGET = BUFFER   @YM08496*/
         B     @RC00102                                            0107
@RF00102 DS    0H                                                  0108
*       TUNITEND=ADDR(RTUNIT->PRFSUNIT)+AVTKEYLE;/* UNIT END @YM08496*/
         LA    @12,PRFSUNIT(,RTUNIT)                               0108
         AH    @12,AVTKEYLE(,IEDQAPTR)                             0108
         ST    @12,TUNITEND(,RSAVE)                                0108
*       ADDRMSK=INVALMSK;           /* SET UP FOR CHECKING   @YM08496*/
         MVC   ADDRMSK(4,RSAVE),@CB01428                           0109
*     END;                          /* ... INVALID TIC ADDR  @YM08496*/
*   RTLENGTH=TUNITEND-RTDATA;       /* SPACE REMAINING IN TARGET UNIT*/
@RC00102 L     RTLENGTH,TUNITEND(,RSAVE)                           0111
         SLR   RTLENGTH,RTDATA                                     0111
*   IF PLMVSCTG=ON THEN             /* SOURCE = CONTIGUOUS-CORE AREA?*/
         TM    PLMVSCTG(IEDPLMVP),B'01000000'                      0112
         BNO   @RF00112                                            0112
*     SUNITEND=RSDATA+RCOUNT+1;     /* YES, SET BEYOND END OF AREA   */
         LR    @12,RSDATA                                          0113
         ALR   @12,RCOUNT                                          0113
         AL    @12,@CF00060                                        0113
         ST    @12,SUNITEND(,RSAVE)                                0113
*   ELSE                            /* NO, SET TO SOURCE UNIT END    */
*     SUNITEND=ADDR(RSUNIT->PRFSUNIT)+AVTKEYLE;                    0114
         B     @RC00112                                            0114
@RF00112 LA    @12,PRFSUNIT(,RSUNIT)                               0114
         AH    @12,AVTKEYLE(,IEDQAPTR)                             0114
         ST    @12,SUNITEND(,RSAVE)                                0114
*   RSLENGTH=SUNITEND-RSDATA;       /* SPACE REMAINING IN SOURCE UNIT*/
@RC00112 L     RSLENGTH,SUNITEND(,RSAVE)                           0115
         SLR   RSLENGTH,RSDATA                                     0115
*                                   /* IF NECESSARY ADJUST CALCULATED
*                                      VALUES TO BE NO GREATER THAN
*                                      NUMBER OF BYTES TO BE MOVED   */
*   IF RTLENGTH>RCOUNT THEN                                        0116
         CLR   RTLENGTH,RCOUNT                                     0116
         BNH   @RF00116                                            0116
*     RTLENGTH=RCOUNT;              /* ADJUST TARGET LENGTH          */
         LR    RTLENGTH,RCOUNT                                     0117
*   IF RSLENGTH>RCOUNT THEN                                        0118
@RF00116 CLR   RSLENGTH,RCOUNT                                     0118
         BNH   @RF00118                                            0118
*     RSLENGTH=RCOUNT;              /* ADJUST SOURCE LENGTH          */
         LR    RSLENGTH,RCOUNT                                     0119
*   PRVTUNIT=0;                     /* INIT PREVIOUS-TARGET-UNIT ADDR*/
@RF00118 SLR   @12,@12                                             0120
         ST    @12,PRVTUNIT(,RSAVE)                                0120
*   END INIT;                       /* RETURN TO CALLER              */
@EL00002 DS    0H                                                  0121
@EF00002 DS    0H                                                  0121
@ER00002 BR    @14                                                 0121
         EJECT
*                                                                  0122
*/********************************************************************/
*/*                                                                  */
*/*      S N E X T   SUBROUTINE                                      */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*      THIS SUBROUTINE BUMPS THE SOURCE UNIT ADDRESS TO THE        */
*/*      START OF THE NEXT UNIT, AND INITIALIZES THE SOURCE DATA     */
*/*      ADDRESS, END-OF-UNIT ADDRESS, AND BYTE COUNT FOR THE        */
*/*      NEW UNIT.                                                   */
*/*                                                                  */
*/********************************************************************/
*                                                                  0122
*SNEXT:                                                            0122
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0122
SNEXT    DS    0H                                                  0123
*   RSUNIT=RSUNIT->PRFTI0;          /* NEXT SOURCE UNIT ADDRESS      */
         L     @12,PRFTI0-1(,RSUNIT)                               0123
         LA    @12,0(,@12)                                         0123
         LR    RSUNIT,@12                                          0123
*   RSDATA=ADDR(RSUNIT->PRFSUNIT);  /* DATA ADDR IN NEXT UNIT        */
         LA    RSDATA,PRFSUNIT(,RSUNIT)                            0124
*   SUNITEND=RSDATA+AVTKEYLE;       /* END OF NEXT SOURCE UNIT       */
         LH    @12,AVTKEYLE(,IEDQAPTR)                             0125
         LR    @00,RSDATA                                          0125
         ALR   @00,@12                                             0125
         ST    @00,SUNITEND(,RSAVE)                                0125
*   IF RCOUNT<AVTKEYLE THEN         /* LESS THAN FULL UNIT TO MOVE?  */
         CLR   RCOUNT,@12                                          0126
         BNL   @RF00126                                            0126
*     RSLENGTH=RCOUNT;              /* YES, SET SOURCE-UNIT COUNT =
*                                      TOTAL BYTES LEFT TO BE MOVED  */
         LR    RSLENGTH,RCOUNT                                     0127
*   ELSE                                                           0128
*     RSLENGTH=AVTKEYLE;            /* NO, SET SOURCE-UNIT COUNT = 0128
*                                      UNIT SIZE                     */
         B     @RC00126                                            0128
@RF00126 LH    RSLENGTH,AVTKEYLE(,IEDQAPTR)                        0128
*   END SNEXT;                      /* RETURN TO CALLER              */
@EL00003 DS    0H                                                  0129
@EF00003 DS    0H                                                  0129
@ER00003 BR    @14                                                 0129
         EJECT
*                                                                  0130
*/********************************************************************/
*/*                                                                  */
*/*      T N E X T   SUBROUTINE                                      */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*      THIS SUBROUTINE SETS THE PREVIOUS-TARGET-UNIT ADDRESS       */
*/*      FIELD TO THE CURRENT TARGET UNIT ADDRESS.  IT THEN BUMPS    */
*/*      THE TARGET UNIT ADDRESS TO THE START OF THE NEXT UNIT,      */
*/*      AND INITIALIZES THE TARGET DATA ADDRESS, END-OF-UNIT        */
*/*      ADDRESS AND BYTE COUNT FOR THE NEW UNIT.                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0130
*TNEXT:                                                            0130
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0130
TNEXT    DS    0H                                                  0131
*   PRVTUNIT=RTUNIT;                /* PREVIOUS-TARGET-UNIT ADDRESS  */
         ST    RTUNIT,PRVTUNIT(,RSAVE)                             0131
*   RTUNIT=RTUNIT->PRFTI0;          /* NEXT TARGET UNIT ADDRESS      */
         L     @12,PRFTI0-1(,RTUNIT)                               0132
         LA    @12,0(,@12)                                         0132
         LR    RTUNIT,@12                                          0132
*   RTDATA=ADDR(RTUNIT->PRFSUNIT);  /* TARGET DATA ADDRESS           */
         LA    RTDATA,PRFSUNIT(,RTUNIT)                            0133
*   TUNITEND=RTDATA+AVTKEYLE;       /* END-OF-TARGET-UNIT ADDRESS    */
         LH    @12,AVTKEYLE(,IEDQAPTR)                             0134
         LR    @00,RTDATA                                          0134
         ALR   @00,@12                                             0134
         ST    @00,TUNITEND(,RSAVE)                                0134
*   IF RCOUNT<AVTKEYLE THEN         /* LESS THAN FULL UNIT TO MOVE?  */
         CLR   RCOUNT,@12                                          0135
         BNL   @RF00135                                            0135
*     RTLENGTH=RCOUNT;              /* YES, SET TARGET-UNIT COUNT =
*                                      TOTAL BYTES LEFT TO BE MOVED  */
         LR    RTLENGTH,RCOUNT                                     0136
*   ELSE                                                           0137
*     RTLENGTH=AVTKEYLE;            /* NO, SET TARGET-UNIT COUNT = 0137
*                                      UNIT SIZE                     */
         B     @RC00135                                            0137
@RF00135 LH    RTLENGTH,AVTKEYLE(,IEDQAPTR)                        0137
*   END TNEXT;                      /* RETURN TO CALLER              */
@EL00004 DS    0H                                                  0138
@EF00004 DS    0H                                                  0138
@ER00004 BR    @14                                                 0138
         EJECT
*                                                                  0139
*/********************************************************************/
*/*                                                                  */
*/*      U N C H A I N   SUBROUTINE                                  */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*      THIS SUBROUTINE CHECKS THE TARGET BUFFER AT THE COMPLETION  */
*/*      OF THE MOVE TO SEE IF THERE ARE ANY EMPTY UNITS AT THE END  */
*/*      OF THE BUFFER.  THERE ARE THREE POSSIBILITIES ---           */
*/*                                                                  */
*/*        1. THE LAST DATA BYTE MOVED FILLED THE LAST BYTE OF ONE   */
*/*           TARGET UNIT, AND THE TARGET UNIT AND TARGET DATA       */
*/*           REGISTERS NOW POINT TO THE START OF A NEW EMPTY UNIT.  */
*/*           ACTIONS ---                                            */
*/*             A. SET PLMVUNCA = THE ADDRESS OF THE 1ST EMPTY UNIT. */
*/*             B. SET THE TIC-ADDRESS FIELD IN THE LAST TARGET      */
*/*                UNIT CONTAINING ANY DATA TO AN INVALID VALUE.     */
*/*             C. SET RTUNIT AND RTDATA EQUAL TO THE INVALID TIC    */
*/*                ADDRESS & THAT ADDRESS + 12.  (THESE ARE THE      */
*/*                VALUES THAT WOULD HAVE BEEN IN THESE REGISTERS    */
*/*                IF THE EMPTY UNIT HAD NEVER BEEN THERE AT ALL.)   */
*/*                                                                  */
*/*        2. THE LAST BYTE OF DATA DID NOT COMPLETELY FILL THE      */
*/*           CURRENT TARGET UNIT, AND THE TIC FIELD IN THAT UNIT    */
*/*           CONTAINS A VALID ADDRESS.                              */
*/*           ACTIONS ---                                            */
*/*             A. SET PLMVUNCA = THE TIC-ADDRESS FIELD FROM THE     */
*/*                CURRENT TARGET UNIT.  THIS IS THE ADDRESS OF THE  */
*/*                FIRST EMPTY UNIT TO BE UNCHAINED.                 */
*/*             B. SET THE TIC-ADDRESS FIELD IN THE CURRENT TARGET   */
*/*                UNIT TO AN INVALID VALUE, UNCHAINING THE EMPTY    */
*/*                UNIT.                                             */
*/*                                                                  */
*/*        3. THE CURRENT TARGET UNIT CONTAINS SOME DATA, AND THE    */
*/*           TIC-ADDRESS FIELD IN THAT UNIT IS INVALID.             */
*/*           ACTIONS ---                                            */
*/*             A. SET PLMVUNCA = 0 TO INDICATE THERE WERE NO        */
*/*                EMPTY UNITS TO UNCHAIN.                           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0139
         EJECT
*UNCHAIN:                                                          0139
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0139
UNCHAIN  DS    0H                                                  0140
*                                   /* TEST FOR CASE 1               */
*   IF PRVTUNIT>0&                  /* TARGET UNIT ADDR BUMPED? &    */
*       RTUNIT>INVALMSK&            /* ...TARGET UNIT ADDR VALID? &  */
*       RTDATA=ADDR(RTUNIT->PRFSUNIT) THEN/* ...NO DATA IN THIS UNIT?*/
         L     @12,PRVTUNIT(,RSAVE)                                0140
         LTR   @12,@12                                             0140
         BNP   @RF00140                                            0140
         C     RTUNIT,@CF01428                                     0140
         BNH   @RF00140                                            0140
         LA    @00,PRFSUNIT(,RTUNIT)                               0140
         CR    RTDATA,@00                                          0140
         BNE   @RF00140                                            0140
*     DO;                           /* YES                           */
*       PLMVUNCA=RTUNIT;            /* EMPTY-TARGET-UNIT ADDRESS     */
         ST    RTUNIT,PLMVUNCA(,IEDPLMVP)                          0142
*       PRVTUNIT->PRFTI0=INVALTIC;  /* UNCHAIN THE EMPTY TARGET UNIT */
         LA    @11,2                                               0143
         STCM  @11,7,PRFTI0(@12)                                   0143
*       RTUNIT=INVALTIC;            /* ADJUST TARGET-UNIT ADDRESS ...*/
         LR    RTUNIT,@11                                          0144
*       RTDATA=ADDR(RTUNIT->PRFSUNIT);/* ... & TARGET-DATA ADDRESS   */
         LA    RTDATA,PRFSUNIT(,RTUNIT)                            0145
*     END;                                                         0146
*   ELSE                            /* TEST FOR CASE 2               */
*     IF RTUNIT>INVALMSK&           /* TARGET UNIT ADDR VALID? &     */
*         (RTUNIT->PRFTI0)>INVALMSK THEN/* ...HAS VALID TIC ADDR?    */
         B     @RC00140                                            0147
@RF00140 C     RTUNIT,@CF01428                                     0147
         BNH   @RF00147                                            0147
         L     @12,PRFTI0-1(,RTUNIT)                               0147
         LA    @12,0(,@12)                                         0147
         C     @12,@CF01428                                        0147
         BNH   @RF00147                                            0147
*       DO;                         /* YES                           */
*         PLMVUNCA=RTUNIT->PRFTI0;  /* EMPTY-TARGET-UNIT ADDR        */
         ST    @12,PLMVUNCA(,IEDPLMVP)                             0149
*         RTUNIT->PRFTI0=INVALTIC;  /* UNCHAIN THE EMPTY TARGET UNIT */
         MVC   PRFTI0(3,RTUNIT),@CF01426+1                         0150
*       END;                                                       0151
*     ELSE                          /* MUST BE CASE 3.               */
*       PLMVUNCA=0;                 /* INDICATE NO UNCHAINED UNITS   */
         B     @RC00147                                            0152
@RF00147 SLR   @12,@12                                             0152
         ST    @12,PLMVUNCA(,IEDPLMVP)                             0152
*   END UNCHAIN;                    /* RETURN TO CALLER              */
@EL00005 DS    0H                                                  0153
@EF00005 DS    0H                                                  0153
@ER00005 BR    @14                                                 0153
         EJECT
*                                                                  0154
*/********************************************************************/
*/*                                                                  */
*/*      U P D T P R M S   SUBROUTINE                                */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*      THIS SUBROUTINE UPDATES THE CALLER'S PARAMETER LIST TO      */
*/*      REFLECT CONDITIONS AT THE END OF THE DATA MOVE.  THE        */
*/*      UPDATED VERSION OF PLMVLNTH SERVES AS A RETURN CODE AS      */
*/*      WELL AS A COUNT.  IF THAT FIELD IS ZERO, ALL OF THE DATA    */
*/*      HAS BEEN MOVED.  IF THAT FIELD IS NON-ZERO, THEN SOME OF    */
*/*      THE DATA COULD NOT BE MOVED BECAUSE WE RAN OUT OF SPACE     */
*/*      IN THE TARGET BUFFER.                                       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0154
*UPDTPRMS:                                                         0154
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0154
UPDTPRMS DS    0H                                                  0155
*   PLMVTU=RTUNIT;                  /* TARGET UNIT ADDRESS           */
         ST    RTUNIT,PLMVTU(,IEDPLMVP)                            0155
*   PLMVTD=RTDATA;                  /* TARGET DATA ADDRESS (NEXT BYTE
*                                      AFTER LAST BYTE MOVED)        */
         ST    RTDATA,PLMVTD(,IEDPLMVP)                            0156
*   PLMVSU=RSUNIT;                  /* SOURCE UNIT ADDRESS           */
         ST    RSUNIT,PLMVSU(,IEDPLMVP)                            0157
*   PLMVSD=RSDATA;                  /* SOURCE DATA ADDRESS (NEXT BYTE
*                                      AFTER LAST BYTE MOVED)        */
         ST    RSDATA,PLMVSD(,IEDPLMVP)                            0158
*   PLMVLNTH=RCOUNT;                /* NUMBER OF BYTES NOT MOVED     */
         STH   RCOUNT,PLMVLNTH(,IEDPLMVP)                          0159
*   END UPDTPRMS;                   /* RETURN TO CALLER              */
@EL00006 DS    0H                                                  0160
@EF00006 DS    0H                                                  0160
@ER00006 BR    @14                                                 0160
         EJECT
*   END IEDMVBFR                                                   0161
*                                                                  0161
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (TAVTD   )                                       */
*/*%INCLUDE SYSLIB  (CVT     )                                       */
*/*%INCLUDE SYSLIB  (TPLMVD  )                                       */
*/*%INCLUDE SYSLIB  (TPRFD   )                                       */
*/*%INCLUDE SYSLIB  (TTCXD   )                                       */
*                                                                  0161
*       ;                                                          0161
@DATA    DS    0H
@SM01463 MVC   CHARS(0,RTDATA),CHARS(RSDATA)
         DS    0F
         DS    0F
@CF00060 DC    F'1'
@CF01428 DC    XL4'00000003'
@CF01465 DC    XL4'0000FFFF'
@CF01426 DC    XL4'000002'
         DS    0D
@CB01428 DC    X'00000003'
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
IEDQAPTR EQU   @09
IEDPLMVP EQU   @01
RZERO    EQU   @00
RPARM    EQU   @01
RTUNIT   EQU   @02
R2       EQU   @02
RTDATA   EQU   @03
RTLENGTH EQU   @04
RSUNIT   EQU   @05
RSDATA   EQU   @06
RSLENGTH EQU   @07
RCOUNT   EQU   @08
RAVT     EQU   @09
RC       EQU   @12
RSAVE    EQU   @13
RE       EQU   @14
RBASE    EQU   @15
CVTPTR   EQU   16
IEDQAVTD EQU   0
AVTSAVEX EQU   IEDQAVTD+288
@NM00003 EQU   IEDQAVTD+388
AVTCKFLG EQU   @NM00003
AVTBASE  EQU   IEDQAVTD+412
AVTPKF   EQU   AVTBASE
AVTOSECB EQU   IEDQAVTD+492
AVTECB1  EQU   AVTOSECB
AVTHG02  EQU   IEDQAVTD+528
AVTDISP  EQU   IEDQAVTD+552
AVTHD    EQU   IEDQAVTD+556
AVTSCOPT EQU   AVTHD
AVTSAVTP EQU   IEDQAVTD+612
AVTSAVTF EQU   AVTSAVTP
AVTCKPEL EQU   IEDQAVTD+652
AVTCKRMV EQU   AVTCKPEL
AVTCKELF EQU   IEDQAVTD+680
AVTCKBYT EQU   IEDQAVTD+691
AVTHG01  EQU   IEDQAVTD+692
AVTCKLNK EQU   IEDQAVTD+696
AVTCRELE EQU   IEDQAVTD+708
AVTCCELE EQU   AVTCRELE
AVTCLRHI EQU   IEDQAVTD+716
AVTADBUF EQU   IEDQAVTD+720
AVTSYSER EQU   IEDQAVTD+728
AVTCKPQB EQU   IEDQAVTD+804
AVTCKPTB EQU   AVTCKPQB
AVTCKPEC EQU   AVTCKPQB+4
AVTCKPCC EQU   AVTCKPEC
AVTOPCQB EQU   IEDQAVTD+816
AVTOPCOB EQU   AVTOPCQB
AVTOPCEC EQU   AVTOPCQB+4
AVTOPCCC EQU   AVTOPCEC
AVTOLTQB EQU   IEDQAVTD+828
AVTCWFL1 EQU   IEDQAVTD+924
AVTCWFL2 EQU   IEDQAVTD+925
AVTSUBT  EQU   IEDQAVTD+948
AVTIOTR  EQU   IEDQAVTD+949
AVTKEYLE EQU   IEDQAVTD+1032
AVTBIT1  EQU   IEDQAVTD+1050
AVTBIT2  EQU   IEDQAVTD+1051
AVTBIT3  EQU   IEDQAVTD+1052
AVTBIT4  EQU   IEDQAVTD+1136
@NM00085 EQU   IEDQAVTD+1232
IEDNSVTD EQU   0
SAVTDIAG EQU   IEDNSVTD
SAVTDIAF EQU   SAVTDIAG
SAVTLUSQ EQU   IEDNSVTD+88
SAVTTCPU EQU   IEDNSVTD+238
SAVTZELM EQU   IEDNSVTD+270
SAVTRDRV EQU   IEDNSVTD+284
SAVTCKQB EQU   IEDNSVTD+300
SAVTCKTB EQU   SAVTCKQB
SAVTCKEC EQU   SAVTCKQB+4
SAVTCKCC EQU   SAVTCKEC
CVTMAP   EQU   0
CVTDAR   EQU   CVTMAP+72
CVTFLGS1 EQU   CVTDAR
CVTDCB   EQU   CVTMAP+116
CVTIERLC EQU   CVTMAP+144
CVTOPTA  EQU   CVTMAP+182
CVTOPTB  EQU   CVTMAP+183
CVTGTF   EQU   CVTMAP+236
CVTGTFST EQU   CVTGTF
CVTGTFS  EQU   CVTGTFST
CVTSTATE EQU   CVTGTFST
CVTTMODE EQU   CVTGTFST
CVTFORM  EQU   CVTGTFST
CVTAQAVT EQU   CVTMAP+240
CVTTCMFG EQU   CVTAQAVT
CVTVOLM2 EQU   CVTMAP+244
CVTTATA  EQU   CVTVOLM2
CVTTSKS  EQU   CVTTATA
CVTVOLF2 EQU   CVTTSKS
CVTTAT   EQU   CVTTATA+1
CVTATER  EQU   CVTMAP+248
CVTEXT1  EQU   CVTMAP+252
CVTPURG  EQU   CVTMAP+260
CVTQMSG  EQU   CVTMAP+268
CVTDMSR  EQU   CVTMAP+272
CVTRSV37 EQU   CVTDMSR
CVTDMSRF EQU   CVTRSV37
CVTERPV  EQU   CVTMAP+316
CVTINTLA EQU   CVTMAP+320
CVTAPF   EQU   CVTMAP+324
CVTEXT2  EQU   CVTMAP+328
CVTHJES  EQU   CVTMAP+332
CVTPGSIA EQU   CVTMAP+348
CVTA1F1  EQU   CVTMAP+356
CVTSYSK  EQU   CVTMAP+357
CVTVOLM1 EQU   CVTMAP+380
CVTVOLF1 EQU   CVTVOLM1
CVTATMCT EQU   CVTMAP+388
CVTXTNT1 EQU   0
CVTXTNT2 EQU   0
CVTDSSV  EQU   CVTXTNT2
CVTFLGBT EQU   CVTXTNT2+5
CVTQID   EQU   CVTXTNT2+24
CVTSHS   EQU   CVTXTNT2+40
CVTRV400 EQU   CVTXTNT2+52
CVTRV409 EQU   CVTXTNT2+53
CVTATCVT EQU   CVTXTNT2+64
CVTRV429 EQU   CVTXTNT2+84
CVTRV438 EQU   CVTXTNT2+85
CVTRV457 EQU   CVTXTNT2+112
CVTRV466 EQU   CVTXTNT2+113
CVTFIX   EQU   0
CVTRELNO EQU   CVTFIX+252
IEDPLMV  EQU   0
PLMVTU   EQU   IEDPLMV
PLMVTD   EQU   IEDPLMV+4
PLMVSU   EQU   IEDPLMV+8
PLMVSD   EQU   IEDPLMV+12
PLMVLNTH EQU   IEDPLMV+16
PLMVFLG1 EQU   IEDPLMV+18
PLMVUNCF EQU   PLMVFLG1
PLMVSCTG EQU   PLMVFLG1
PLMVTCTG EQU   PLMVFLG1
PLMVUNCA EQU   IEDPLMV+20
IEDQPRF  EQU   0
PRFRCB   EQU   IEDQPRF
PRFKEY   EQU   PRFRCB
PRFQCBA  EQU   PRFRCB+1
PRFPRI   EQU   PRFRCB+4
PRFLINK  EQU   PRFRCB+5
PRFTIC   EQU   IEDQPRF+8
PRFTICC  EQU   PRFTIC
PRFTI0   EQU   PRFTIC+1
PRFNBUNT EQU   IEDQPRF+12
PRFSUNIT EQU   PRFNBUNT
PRFPLQCB EQU   PRFSUNIT
@NM00114 EQU   IEDQPRF+16
PRFSVFFO EQU   @NM00114
PRFSTAT1 EQU   IEDQPRF+20
PRFEOFN  EQU   PRFSTAT1
PRFCORE  EQU   IEDQPRF+21
PRFXTRA  EQU   PRFCORE
PRFSCAN  EQU   IEDQPRF+24
PRFTQBCK EQU   IEDQPRF+26
PRFNTXT  EQU   PRFTQBCK
PRFEOBOF EQU   PRFNTXT
PRFCHDR  EQU   IEDQPRF+32
PRFHQBCK EQU   IEDQPRF+35
IEDQPPTR EQU   0
IEDPF1   EQU   0
PRF1FLG1 EQU   IEDPF1+3
PRF1WD2  EQU   IEDPF1+4
PRF1SEQP EQU   PRF1WD2
PRF1SQID EQU   PRF1SEQP
PRF1TAG1 EQU   PRF1SQID
IEDPF2   EQU   0
PRF2FLG2 EQU   IEDPF2
PRF2WD2  EQU   IEDPF2+4
IEDQTCXD EQU   0
TCXAVT   EQU   IEDQTCXD
TCXATTEN EQU   IEDQTCXD+4
TCXFLAG1 EQU   IEDQTCXD+34
TCXBUFA  EQU   IEDQTCXD+80
TCXDSAVE EQU   IEDQTCXD+104
TCXQE8   EQU   IEDQTCXD+216
CHARS    EQU   0
USERAREA EQU   0
N        EQU   USERAREA
PRVTUNIT EQU   USERAREA+4
TUNITEND EQU   USERAREA+8
SUNITEND EQU   USERAREA+12
ADDRMSK  EQU   USERAREA+16
REGSV0   EQU   USERAREA+20
REGSV2C  EQU   USERAREA+24
REGSVE   EQU   USERAREA+68
CVTS01   EQU   CVTPGSIA
CVTLPDIA EQU   CVTS01+12
CVTDIRST EQU   CVTLPDIA
CVTSLIDA EQU   CVTS01+24
CVTCTLFG EQU   CVTS01+50
CVTRV210 EQU   CVTS01+424
CVTRV219 EQU   CVTS01+425
CVTRV228 EQU   CVTS01+426
CVTRV237 EQU   CVTS01+427
CVTMFRTR EQU   CVTS01+452
CVTRV262 EQU   CVTS01+468
CVTRV271 EQU   CVTS01+469
CVTRV280 EQU   CVTS01+470
CVTRV289 EQU   CVTS01+471
CVTGSDA  EQU   CVTS01+600
TCXPTR   EQU   CVTAQAVT
PRFSHDR  EQU   IEDQPRF+42
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
CVTRV628 EQU   CVTS01+728
CVTRV627 EQU   CVTS01+724
CVTRV626 EQU   CVTS01+720
CVTRV625 EQU   CVTS01+716
CVTRV624 EQU   CVTS01+712
CVTRV623 EQU   CVTS01+708
CVTRV622 EQU   CVTS01+704
CVTRV621 EQU   CVTS01+700
CVTRV620 EQU   CVTS01+696
CVTRV619 EQU   CVTS01+692
CVTRV618 EQU   CVTS01+688
CVTRV617 EQU   CVTS01+684
CVTRV616 EQU   CVTS01+680
CVTRV615 EQU   CVTS01+676
CVTRV614 EQU   CVTS01+672
CVTRV613 EQU   CVTS01+668
CVTTCASP EQU   CVTS01+664
CVT0PT03 EQU   CVTS01+660
CVT0PT0E EQU   CVTS01+656
CVTIRM   EQU   CVTS01+652
CVTCGK   EQU   CVTS01+648
CVTRV607 EQU   CVTS01+644
CVTRV606 EQU   CVTS01+640
CVTRV605 EQU   CVTS01+636
CVTRV604 EQU   CVTS01+632
CVTEFF02 EQU   CVTS01+628
CVTCBBR  EQU   CVTS01+624
CVTSSCR  EQU   CVTS01+620
CVTEVENT EQU   CVTS01+616
CVTCRCA  EQU   CVTS01+612
CVTTPIO  EQU   CVTS01+608
CVTADV   EQU   CVTS01+604
CVTGSDAB EQU   CVTGSDA
CVTQV3   EQU   CVTS01+596
CVTQV2   EQU   CVTS01+592
CVTQV1   EQU   CVTS01+588
CVTRPT   EQU   CVTS01+584
CVTSSRB  EQU   CVTS01+580
CVTCSDRL EQU   CVTS01+576
CVTEXP1  EQU   CVTS01+572
CVTRMPMT EQU   CVTS01+568
CVTRMPTT EQU   CVTS01+564
CVTVPSA  EQU   CVTS01+560
CVTVSTOP EQU   CVTS01+556
CVTGTFR8 EQU   CVTS01+552
CVTQUIT  EQU   CVTS01+548
CVTVACR  EQU   CVTS01+544
CVTWTCB  EQU   CVTS01+540
CVTSTPRS EQU   CVTS01+536
CVT0PT02 EQU   CVTS01+532
CVTDARCM EQU   CVTS01+528
CVTIRECM EQU   CVTS01+524
CVTJRECM EQU   CVTS01+520
CVTVEMS0 EQU   CVTS01+516
CVTSPFRR EQU   CVTS01+512
CVTRLSTG EQU   CVTS01+508
CVT0TC0A EQU   CVTS01+504
CVTGMBR  EQU   CVTS01+500
CVTLFRM  EQU   CVTS01+496
CVTRMBR  EQU   CVTS01+492
CVTVIOP  EQU   CVTS01+488
CVTRV307 EQU   CVTS01+486
CVTRV306 EQU   CVTS01+484
CVTRV305 EQU   CVTS01+482
CVTRV304 EQU   CVTS01+480
CVTRV303 EQU   CVTS01+478
CVTRV302 EQU   CVTS01+476
CVTTRCA  EQU   CVTS01+472
CVTRV297 EQU   CVTRV289
CVTRV296 EQU   CVTRV289
CVTRV295 EQU   CVTRV289
CVTRV294 EQU   CVTRV289
CVTRV293 EQU   CVTRV289
CVTRV292 EQU   CVTRV289
CVTRV291 EQU   CVTRV289
CVTRV290 EQU   CVTRV289
CVTRV288 EQU   CVTRV280
CVTRV287 EQU   CVTRV280
CVTRV286 EQU   CVTRV280
CVTRV285 EQU   CVTRV280
CVTRV284 EQU   CVTRV280
CVTRV283 EQU   CVTRV280
CVTRV282 EQU   CVTRV280
CVTRV281 EQU   CVTRV280
CVTRV279 EQU   CVTRV271
CVTRV278 EQU   CVTRV271
CVTRV277 EQU   CVTRV271
CVTRV276 EQU   CVTRV271
CVTRV275 EQU   CVTRV271
CVTRV274 EQU   CVTRV271
CVTRV273 EQU   CVTRV271
CVTRV272 EQU   CVTRV271
CVTRV270 EQU   CVTRV262
CVTRV269 EQU   CVTRV262
CVTRV268 EQU   CVTRV262
CVTRV267 EQU   CVTRV262
CVTRV266 EQU   CVTRV262
CVTRV265 EQU   CVTRV262
CVTRV264 EQU   CVTRV262
CVTRV263 EQU   CVTRV262
CVTVFP   EQU   CVTS01+464
CVTVSI   EQU   CVTS01+460
CVTVPSIB EQU   CVTS01+456
CVTMFACT EQU   CVTMFRTR
CVTMFCTL EQU   CVTS01+448
CVTPVBP  EQU   CVTS01+444
CVTPWI   EQU   CVTS01+440
CVTRV254 EQU   CVTS01+438
CVTRV253 EQU   CVTS01+436
CVTRV252 EQU   CVTS01+434
CVTRV251 EQU   CVTS01+433
CVTRV250 EQU   CVTS01+432
CVTRV249 EQU   CVTS01+431
CVTRV248 EQU   CVTS01+430
CVTRV247 EQU   CVTS01+429
CVTRV246 EQU   CVTS01+428
CVTRV245 EQU   CVTRV237
CVTRV244 EQU   CVTRV237
CVTRV243 EQU   CVTRV237
CVTRV242 EQU   CVTRV237
CVTRV241 EQU   CVTRV237
CVTRV240 EQU   CVTRV237
CVTRV239 EQU   CVTRV237
CVTRV238 EQU   CVTRV237
CVTRV236 EQU   CVTRV228
CVTRV235 EQU   CVTRV228
CVTRV234 EQU   CVTRV228
CVTRV233 EQU   CVTRV228
CVTRV232 EQU   CVTRV228
CVTRV231 EQU   CVTRV228
CVTRV230 EQU   CVTRV228
CVTRV229 EQU   CVTRV228
CVTRV227 EQU   CVTRV219
CVTRV226 EQU   CVTRV219
CVTRV225 EQU   CVTRV219
CVTRV224 EQU   CVTRV219
CVTRV223 EQU   CVTRV219
CVTRV222 EQU   CVTRV219
CVTRV221 EQU   CVTRV219
CVTRV220 EQU   CVTRV219
CVTRV218 EQU   CVTRV210
CVTRV217 EQU   CVTRV210
CVTRV216 EQU   CVTRV210
CVTRV215 EQU   CVTRV210
CVTRV214 EQU   CVTRV210
CVTRV213 EQU   CVTRV210
CVTRV212 EQU   CVTRV210
CVTRV211 EQU   CVTRV210
CVTLCCAT EQU   CVTS01+420
CVTPCCAT EQU   CVTS01+416
CVTIPCRP EQU   CVTS01+412
CVTIPCRI EQU   CVTS01+408
CVTIPCDS EQU   CVTS01+404
CVTAIDVT EQU   CVTS01+400
CVTSSAP  EQU   CVTS01+396
CVTEHCIR EQU   CVTS01+392
CVTEHDEF EQU   CVTS01+388
CVTDAIR  EQU   CVTS01+384
CVTPERFM EQU   CVTS01+380
CVT044R2 EQU   CVTS01+376
CVTFETCH EQU   CVTS01+372
CVTRSTWD EQU   CVTS01+368
CVTSPOST EQU   CVTS01+364
CVTIOBP  EQU   CVTS01+360
CVTASMVT EQU   CVTS01+356
CVTRECRQ EQU   CVTS01+352
CVTWSAC  EQU   CVTS01+348
CVTRV149 EQU   CVTS01+344
CVTWSAL  EQU   CVTS01+340
CVTSPSA  EQU   CVTS01+336
CVTGLMN  EQU   CVTS01+332
CVTVEAC0 EQU   CVTS01+328
CVT062R1 EQU   CVTS01+324
CVTRPOST EQU   CVTS01+320
CVTDQIQE EQU   CVTS01+316
CVTCSD   EQU   CVTS01+312
CVTLKRMA EQU   CVTS01+308
CVTRSPIE EQU   CVTS01+304
CVTRENQ  EQU   CVTS01+300
CVTLQCB  EQU   CVTS01+296
CVTFQCB  EQU   CVTS01+292
CVTQCS01 EQU   CVTS01+288
CVTAPFT  EQU   CVTS01+284
CVTPARRL EQU   CVTS01+280
CVTVWAIT EQU   CVTS01+276
CVTGSPL  EQU   CVTS01+272
CVTLSMQ  EQU   CVTS01+268
CVTGSMQ  EQU   CVTS01+264
CVTEXPRO EQU   CVTS01+260
CVTOPCTP EQU   CVTS01+256
CVTSIC   EQU   CVTS01+252
CVTTPIOS EQU   CVTS01+248
CVTRTMS  EQU   CVTS01+244
CVTSDBF  EQU   CVTS01+240
CVTSCBP  EQU   CVTS01+236
CVTSDMP  EQU   CVTS01+232
CVTSV60  EQU   CVTS01+228
CVTRTMCT EQU   CVTS01+224
CVTASCBL EQU   CVTS01+220
CVTASCBH EQU   CVTS01+216
CVTGDA   EQU   CVTS01+212
CVTASVT  EQU   CVTS01+208
CVTVVMDI EQU   CVTS01+204
CVTAQTOP EQU   CVTS01+200
CVTIOSCS EQU   CVTS01+196
CVTSDRM  EQU   CVTS01+192
CVTOPTE  EQU   CVTS01+188
CVTSTXU  EQU   CVTS01+184
CVTQUIS  EQU   CVTS01+180
CVTPARS  EQU   CVTS01+176
CVTS1EE  EQU   CVTS01+172
CVTFRAS  EQU   CVTS01+168
CVTQSAS  EQU   CVTS01+164
CVTCRAS  EQU   CVTS01+160
CVTCRMN  EQU   CVTS01+156
CVTDELCP EQU   CVTS01+152
CVTFRECL EQU   CVTS01+148
CVTGETCL EQU   CVTS01+144
CVTBLDCP EQU   CVTS01+140
CVTAUTHL EQU   CVTS01+136
CVTSCAN  EQU   CVTS01+132
CVTRV144 EQU   CVTS01+130
CVTMAXMP EQU   CVTS01+128
CVTSTCK  EQU   CVTS01+124
CVTRV139 EQU   CVTS01+123
CVTDSSAC EQU   CVTS01+122
CVTRV513 EQU   CVTS01+121
CVTIOSPL EQU   CVTS01+120
CVTPTGT  EQU   CVTS01+116
CVTCSPIE EQU   CVTS01+112
CVTSMFEX EQU   CVTS01+108
CVTOLT0A EQU   CVTS01+104
CVTSRBRT EQU   CVTS01+100
CVTPUTL  EQU   CVTS01+96
CVTASCRL EQU   CVTS01+92
CVTASCRF EQU   CVTS01+88
CVTRV326 EQU   CVTS01+84
CVTRV325 EQU   CVTS01+80
CVTRV324 EQU   CVTS01+76
CVT0VL01 EQU   CVTS01+72
CVTSHRVM EQU   CVTS01+68
CVTRV332 EQU   CVTS01+64
CVTTAS   EQU   CVTS01+60
CVTRSCN  EQU   CVTS01+56
CVTTRAC2 EQU   CVTS01+54
CVTTRACE EQU   CVTS01+52
CVTAPG   EQU   CVTS01+51
CVTSDTRC EQU   CVTCTLFG
CVTGTRCE EQU   CVTCTLFG
CVTNOMP  EQU   CVTCTLFG
CVTRSV79 EQU   CVTCTLFG
CVTDSTAT EQU   CVTCTLFG
CVTRSV78 EQU   CVTCTLFG
CVTRV333 EQU   CVTCTLFG
CVTRV323 EQU   CVTCTLFG
CVTSPVLK EQU   CVTS01+49
CVTRSV77 EQU   CVTS01+48
CVTRV331 EQU   CVTS01+44
CVTRV330 EQU   CVTS01+40
CVTRV329 EQU   CVTS01+36
CVTRV328 EQU   CVTS01+32
CVTRV322 EQU   CVTS01+28
CVTSLID  EQU   CVTSLIDA+1
CVTSYLK  EQU   CVTSLIDA
CVTRV321 EQU   CVTS01+20
CVTRV320 EQU   CVTS01+16
CVTLPDIR EQU   CVTLPDIA+1
CVTRSV69 EQU   CVTDIRST
CVTRSV68 EQU   CVTDIRST
CVTRSV67 EQU   CVTDIRST
CVTRSV66 EQU   CVTDIRST
CVTRSV65 EQU   CVTDIRST
CVTRSV64 EQU   CVTDIRST
CVTRSV63 EQU   CVTDIRST
CVTDICOM EQU   CVTDIRST
CVTPVTP  EQU   CVTS01+8
CVTLPDSR EQU   CVTS01+4
CVTGETL  EQU   CVTS01
TCXEND   EQU   IEDQTCXD+224
TCXNCPIO EQU   IEDQTCXD+220
TCXACTE8 EQU   TCXQE8
TCXABEPL EQU   IEDQTCXD+212
TCXSRBS  EQU   IEDQTCXD+208
TCXSIOSB EQU   IEDQTCXD+204
TCXESAVE EQU   IEDQTCXD+132
TCXERPPM EQU   IEDQTCXD+128
TCXERPSV EQU   IEDQTCXD+116
TCXSATTN EQU   IEDQTCXD+112
@NM00121 EQU   TCXDSAVE+4
@NM00120 EQU   TCXDSAVE
TCXPLCB  EQU   IEDQTCXD+100
TCXBITS  EQU   IEDQTCXD+98
TCXSCBSZ EQU   IEDQTCXD+97
TCXBIT1  EQU   IEDQTCXD+96
TCXCOMPT EQU   IEDQTCXD+92
TCXAVAIL EQU   IEDQTCXD+88
TCXBUFL  EQU   IEDQTCXD+84
TCXTOTE  EQU   TCXBUFA
TCXCKPM  EQU   IEDQTCXD+79
TCXNCKPR EQU   IEDQTCXD+78
TCXSZAIB EQU   IEDQTCXD+76
TCXAIBC  EQU   IEDQTCXD+72
TCXPEBC  EQU   IEDQTCXD+68
TCXPEWAC EQU   IEDQTCXD+64
TCXQRQ   EQU   IEDQTCXD+60
TCXOCQ   EQU   IEDQTCXD+56
TCXPNTQ  EQU   IEDQTCXD+52
TCXPUTQ  EQU   IEDQTCXD+48
TCXGETQ  EQU   IEDQTCXD+44
TCXTSI   EQU   IEDQTCXD+40
TCXRPT   EQU   IEDQTCXD+36
TCXCC3TS EQU   IEDQTCXD+35
TCXAPDMP EQU   TCXFLAG1
TCXAPPL  EQU   TCXFLAG1
TCXRTM   EQU   TCXFLAG1
TCXMCPCD EQU   TCXFLAG1
TCXAUTH  EQU   TCXFLAG1
TCXASID  EQU   IEDQTCXD+32
TCXASCB  EQU   IEDQTCXD+28
TCXREADY EQU   IEDQTCXD+24
TCXPASWD EQU   IEDQTCXD+16
TCXDISP  EQU   IEDQTCXD+12
TCXTCB   EQU   IEDQTCXD+8
TCXATTLN EQU   TCXATTEN
PRF2SEQP EQU   PRF2WD2
@NM00119 EQU   IEDPF2+1
@NM00118 EQU   PRF2FLG2
PRF2TERM EQU   PRF2FLG2
PRF2SMI  EQU   PRF2FLG2
PRF2FORM EQU   PRF2FLG2
PRF2TNTI EQU   PRF2FLG2
PRF1RULN EQU   PRF1SEQP+2
PRF1TAG2 EQU   PRF1SQID+1
@NM00117 EQU   PRF1TAG1
PRF1TAGS EQU   PRF1TAG1
@NM00116 EQU   PRF1FLG1
PRF1LOGD EQU   PRF1FLG1
PRF1USS  EQU   PRF1FLG1
PRF1FORM EQU   PRF1FLG1
PRF1EXPI EQU   PRF1FLG1
PRF1FIDI EQU   PRF1FLG1
PRF1RH   EQU   IEDPF1
PRFDEST  EQU   IEDQPRF+40
PRFISEQ  EQU   IEDQPRF+38
PRFSTXT  EQU   PRFHQBCK
PRFNHDR  EQU   PRFCHDR
PRFCRCD  EQU   IEDQPRF+29
PRFSVSEQ EQU   PRFNTXT+1
PRFSVPRI EQU   PRFEOBOF
PRFISIZE EQU   PRFSCAN+1
@NM00115 EQU   PRFSCAN
PRFEOB   EQU   PRFXTRA+1
PRFSTSO  EQU   PRFXTRA
PRFNHDRN EQU   PRFSTAT1
PRFNLSTN EQU   PRFSTAT1
PRFLOCK  EQU   PRFEOFN
PRFDUPLN EQU   PRFSTAT1
PRFTSMSG EQU   PRFSTAT1
PRFITCPN EQU   PRFSTAT1
PRFERMGN EQU   PRFSTAT1
PRFCNCLN EQU   PRFSTAT1
PRFSVFLG EQU   @NM00114+3
PRFSIZE  EQU   PRFSVFFO+2
PRFSRCE  EQU   PRFSVFFO
PRFLCB   EQU   IEDQPRF+13
PRFPIUO  EQU   PRFPLQCB
@NM00113 EQU   PRFTICC
@NM00112 EQU   PRFTICC
@NM00111 EQU   PRFTICC
PRFTICON EQU   PRFTICC
@NM00110 EQU   PRFTICC
@NM00109 EQU   PRFTICC
PRFBFMM  EQU   PRFTICC
PRFEOMSG EQU   PRFTICC
PRFCOUNT EQU   PRFLINK+1
@NM00108 EQU   PRFLINK
PRFFLAGS EQU   PRFPRI
PRFIOADR EQU   PRFQCBA
PRFOPCDE EQU   PRFKEY
PLMVFLG2 EQU   IEDPLMV+19
@NM00107 EQU   PLMVFLG1
CVTLEVL  EQU   CVTRELNO+2
CVTNUMB  EQU   CVTRELNO
CVTMDL   EQU   CVTFIX+250
@NM00106 EQU   CVTFIX+248
@NM00105 EQU   CVTFIX
CVTRV482 EQU   CVTXTNT2+128
CVTRV481 EQU   CVTXTNT2+124
CVTRV480 EQU   CVTXTNT2+120
CVTRV479 EQU   CVTXTNT2+118
CVTRV478 EQU   CVTXTNT2+117
CVTRV477 EQU   CVTXTNT2+116
CVTRV476 EQU   CVTXTNT2+115
CVTRV475 EQU   CVTXTNT2+114
CVTRV474 EQU   CVTRV466
CVTRV473 EQU   CVTRV466
CVTRV472 EQU   CVTRV466
CVTRV471 EQU   CVTRV466
CVTRV470 EQU   CVTRV466
CVTRV469 EQU   CVTRV466
CVTRV468 EQU   CVTRV466
CVTRV467 EQU   CVTRV466
CVTRV465 EQU   CVTRV457
CVTRV464 EQU   CVTRV457
CVTRV463 EQU   CVTRV457
CVTRV462 EQU   CVTRV457
CVTRV461 EQU   CVTRV457
CVTRV460 EQU   CVTRV457
CVTRV459 EQU   CVTRV457
CVTRV458 EQU   CVTRV457
CVTRV456 EQU   CVTXTNT2+108
CVTRV455 EQU   CVTXTNT2+104
CVTRV454 EQU   CVTXTNT2+100
CVTRV453 EQU   CVTXTNT2+96
CVTRV452 EQU   CVTXTNT2+94
CVTRV451 EQU   CVTXTNT2+92
CVTRV450 EQU   CVTXTNT2+90
CVTRV449 EQU   CVTXTNT2+88
CVTRV448 EQU   CVTXTNT2+87
CVTRV447 EQU   CVTXTNT2+86
CVTRV446 EQU   CVTRV438
CVTRV445 EQU   CVTRV438
CVTRV444 EQU   CVTRV438
CVTRV443 EQU   CVTRV438
CVTRV442 EQU   CVTRV438
CVTRV441 EQU   CVTRV438
CVTRV440 EQU   CVTRV438
CVTRV439 EQU   CVTRV438
CVTRV437 EQU   CVTRV429
CVTRV436 EQU   CVTRV429
CVTRV435 EQU   CVTRV429
CVTRV434 EQU   CVTRV429
CVTRV433 EQU   CVTRV429
CVTRV432 EQU   CVTRV429
CVTRV431 EQU   CVTRV429
CVTRV430 EQU   CVTRV429
CVTRV428 EQU   CVTXTNT2+80
CVTRV427 EQU   CVTXTNT2+76
CVTRV426 EQU   CVTXTNT2+72
CVTRV425 EQU   CVTXTNT2+68
CVTATACT EQU   CVTATCVT
CVTRV423 EQU   CVTXTNT2+62
CVTRV422 EQU   CVTXTNT2+60
CVTRV421 EQU   CVTXTNT2+58
CVTRV420 EQU   CVTXTNT2+56
CVTRV419 EQU   CVTXTNT2+55
CVTRV418 EQU   CVTXTNT2+54
CVTRV417 EQU   CVTRV409
CVTRV416 EQU   CVTRV409
CVTRV415 EQU   CVTRV409
CVTRV414 EQU   CVTRV409
CVTRV413 EQU   CVTRV409
CVTRV412 EQU   CVTRV409
CVTRV411 EQU   CVTRV409
CVTRV410 EQU   CVTRV409
CVTRV408 EQU   CVTRV400
CVTRV407 EQU   CVTRV400
CVTRV406 EQU   CVTRV400
CVTRV405 EQU   CVTRV400
CVTRV404 EQU   CVTRV400
CVTRV403 EQU   CVTRV400
CVTRV402 EQU   CVTRV400
CVTRV401 EQU   CVTRV400
CVTICB   EQU   CVTXTNT2+48
CVTSKTA  EQU   CVTXTNT2+44
CVTSHSB  EQU   CVTSHS
CVTRSV98 EQU   CVTXTNT2+36
CVTRSV97 EQU   CVTXTNT2+34
CVTRSV96 EQU   CVTXTNT2+32
CVTOLTEP EQU   CVTXTNT2+28
CVTQIDA  EQU   CVTQID+1
CVTRSV95 EQU   CVTQID
CVTRSV94 EQU   CVTXTNT2+20
CVTRSV93 EQU   CVTXTNT2+16
CVTRSV92 EQU   CVTXTNT2+12
CVTDEBVR EQU   CVTXTNT2+8
CVTRSV91 EQU   CVTXTNT2+6
CVTRSV9H EQU   CVTFLGBT
CVTRSV9G EQU   CVTFLGBT
CVTRSV9F EQU   CVTFLGBT
CVTRSV9E EQU   CVTFLGBT
CVTRSV9D EQU   CVTFLGBT
CVTRSV9C EQU   CVTFLGBT
CVTVME   EQU   CVTFLGBT
CVTNPE   EQU   CVTFLGBT
CVTNUCLS EQU   CVTXTNT2+4
CVTDSSVA EQU   CVTDSSV+1
CVTRSV89 EQU   CVTDSSV
CVTRSV88 EQU   CVTXTNT1+8
CVTRSV87 EQU   CVTXTNT1+4
CVTFACHN EQU   CVTXTNT1
CVTRV488 EQU   CVTMAP+412
CVTRV487 EQU   CVTMAP+408
CVTRV486 EQU   CVTMAP+404
CVTRV485 EQU   CVTMAP+400
CVTACTAP EQU   CVTMAP+396
CVTAUTH  EQU   CVTMAP+392
CVTATMCA EQU   CVTATMCT+1
CVTATMST EQU   CVTATMCT
CVTRSV61 EQU   CVTMAP+384
CVTVOLT1 EQU   CVTVOLM1+1
CVTVOLI1 EQU   CVTVOLF1
CVTSTOA  EQU   CVTMAP+376
CVTRSV58 EQU   CVTMAP+374
CVTRSV57 EQU   CVTMAP+372
CVTDDCE  EQU   CVTMAP+368
CVTPNWFR EQU   CVTMAP+364
CVTSMF   EQU   CVTMAP+360
CVTSULK  EQU   CVTMAP+358
CVTSLKO  EQU   CVTSYSK
CVTSLKP  EQU   CVTSYSK
CVTSLKQ  EQU   CVTSYSK
CVTSLKR  EQU   CVTSYSK
CVTRSV56 EQU   CVTSYSK
CVTRSV55 EQU   CVTSYSK
CVTRSV54 EQU   CVTSYSK
CVTRSV53 EQU   CVTSYSK
CVTRSV52 EQU   CVTA1F1
CVTRSV51 EQU   CVTA1F1
CVTRSV50 EQU   CVTA1F1
CVTRSV49 EQU   CVTA1F1
CVTRSV48 EQU   CVTA1F1
CVTRSV47 EQU   CVTA1F1
CVTSRSW  EQU   CVTA1F1
CVTPFSW  EQU   CVTA1F1
CVTPCVT  EQU   CVTMAP+352
CVTRSV46 EQU   CVTMAP+344
CVTRSV45 EQU   CVTMAP+340
CVTRSV44 EQU   CVTMAP+338
CVTRSV43 EQU   CVTMAP+336
CVTHJESA EQU   CVTHJES+1
CVTRSV42 EQU   CVTHJES
CVTEXT2A EQU   CVTEXT2+1
CVTRSV41 EQU   CVTEXT2
CVTAPFA  EQU   CVTAPF+1
CVTRSV40 EQU   CVTAPF
CVTRV518 EQU   CVTINTLA
CVTRV517 EQU   CVTERPV
CVTEORM  EQU   CVTMAP+312
CVTMCHPR EQU   CVTMAP+308
CVTTZ    EQU   CVTMAP+304
CVTJEPS  EQU   CVTMAP+300
CVTJESCT EQU   CVTMAP+296
CVTMODE  EQU   CVTMAP+292
CVTPTRV  EQU   CVTMAP+288
CVTREAL  EQU   CVTMAP+284
CVTRSV39 EQU   CVTMAP+280
CVTRSV38 EQU   CVTMAP+276
CVTDMSRA EQU   CVTDMSR+1
CVTRV634 EQU   CVTDMSRF
CVTRV633 EQU   CVTDMSRF
CVTRV632 EQU   CVTDMSRF
CVTRV631 EQU   CVTDMSRF
CVTRV630 EQU   CVTDMSRF
CVTRV629 EQU   CVTDMSRF
CVTUDUMP EQU   CVTDMSRF
CVTSDUMP EQU   CVTDMSRF
CVTQMSGA EQU   CVTQMSG+1
CVTRSV36 EQU   CVTQMSG
CVTAMFF  EQU   CVTMAP+264
CVTPURGA EQU   CVTPURG+1
CVTRSV35 EQU   CVTPURG
CVTCBSP  EQU   CVTMAP+256
CVTATERA EQU   CVTATER+1
CVTSYST  EQU   CVTATER
CVTVOLT2 EQU   CVTTAT
CVTVOLI2 EQU   CVTVOLF2
CVTAQAVB EQU   CVTAQAVT+1
CVTRSV34 EQU   CVTTCMFG
CVTRSV33 EQU   CVTTCMFG
CVTRSV32 EQU   CVTTCMFG
CVTRSV31 EQU   CVTTCMFG
CVTRSV30 EQU   CVTTCMFG
CVTRSV29 EQU   CVTTCMFG
CVTRSV28 EQU   CVTTCMFG
CVTTCRDY EQU   CVTTCMFG
CVTGTFA  EQU   CVTGTF+1
CVTRSV27 EQU   CVTGTFST
CVTRNIO  EQU   CVTGTFST
CVTUSR   EQU   CVTGTFST
CVTRV318 EQU   CVTFORM
CVTRV317 EQU   CVTTMODE
CVTRV316 EQU   CVTSTATE
CVTRV315 EQU   CVTGTFS
CVTGTFAV EQU   CVTGTFS
CVT0SCR1 EQU   CVTMAP+232
CVTRV515 EQU   CVTMAP+228
CVTRMS   EQU   CVTMAP+224
CVTPATCH EQU   CVTMAP+220
CVTTSCE  EQU   CVTMAP+216
CVTLNKSC EQU   CVTMAP+214
CVTQABST EQU   CVTMAP+212
CVTMDLDS EQU   CVTMAP+208
CVTUSER  EQU   CVTMAP+204
CVTABEND EQU   CVTMAP+200
CVTSMCA  EQU   CVTMAP+196
CVTRSV18 EQU   CVTMAP+192
CVTQLPAQ EQU   CVTMAP+188
CVTQCDSR EQU   CVTMAP+184
CVTRSV17 EQU   CVTOPTB
CVTRSV16 EQU   CVTOPTB
CVTFP    EQU   CVTOPTB
CVTAPTHR EQU   CVTOPTB
CVTNLOG  EQU   CVTOPTB
CVTTOD   EQU   CVTOPTB
CVTCTIMS EQU   CVTOPTB
CVTPROT  EQU   CVTOPTB
CVTXPFP  EQU   CVTOPTA
CVTASCII EQU   CVTOPTA
CVTRSV13 EQU   CVTOPTA
CVTRSV12 EQU   CVTOPTA
CVTNIP   EQU   CVTOPTA
CVTDDR   EQU   CVTOPTA
CVTAPR   EQU   CVTOPTA
CVTCCH   EQU   CVTOPTA
CVTSNCTR EQU   CVTMAP+180
CVTQMWR  EQU   CVTMAP+176
CVTQOCR  EQU   CVTMAP+172
CVT1EF00 EQU   CVTMAP+168
CVTMZ00  EQU   CVTMAP+164
CVTHEAD  EQU   CVTMAP+160
CVTRSV11 EQU   CVTMAP+156
CVT0PT01 EQU   CVTMAP+152
CVTMSER  EQU   CVTMAP+148
CVTRV516 EQU   CVTIERLC
CVTILCH  EQU   CVTMAP+140
CVT0DS   EQU   CVTMAP+136
CVTFBOSV EQU   CVTMAP+132
CVTNUCB  EQU   CVTMAP+128
CVTIXAVL EQU   CVTMAP+124
CVTIOQET EQU   CVTMAP+120
CVTDCBA  EQU   CVTMAP+117
CVTMVS2  EQU   CVTDCB
CVT6DAT  EQU   CVTDCB
CVT4MPS  EQU   CVTDCB
CVTRSV09 EQU   CVTDCB
CVT4MS1  EQU   CVTDCB
CVT2SPS  EQU   CVTDCB
CVT1SSS  EQU   CVTDCB
CVTRSV08 EQU   CVTDCB
CVTSTB   EQU   CVTMAP+112
CVTQTD00 EQU   CVTMAP+108
CVTQTE00 EQU   CVTMAP+104
CVTCUCB  EQU   CVTMAP+100
CVTSJQ   EQU   CVTMAP+96
CVTPBLDL EQU   CVTMAP+92
CVTTPC   EQU   CVTMAP+88
CVTSVDCB EQU   CVTMAP+84
CVTBRET  EQU   CVTMAP+82
CVTEXIT  EQU   CVTMAP+80
CVT0FN00 EQU   CVTMAP+76
CVTDARA  EQU   CVTDAR+1
CVTRSV07 EQU   CVTFLGS1
CVTRSV06 EQU   CVTFLGS1
CVTRSV05 EQU   CVTFLGS1
CVTRSV04 EQU   CVTFLGS1
CVTRSV03 EQU   CVTFLGS1
CVTRSV02 EQU   CVTFLGS1
CVTRSV01 EQU   CVTFLGS1
CVTDMPLK EQU   CVTFLGS1
CVTXITP  EQU   CVTMAP+68
CVTZDTAB EQU   CVTMAP+64
CVTMSLT  EQU   CVTMAP+60
CVTDATE  EQU   CVTMAP+56
CVTBTERM EQU   CVTMAP+52
CVTSYSAD EQU   CVTMAP+48
CVTXTLER EQU   CVTMAP+44
CVTILK2  EQU   CVTMAP+40
CVTILK1  EQU   CVTMAP+36
CVTPRLTV EQU   CVTMAP+32
CVTPCNVT EQU   CVTMAP+28
CVT0VL00 EQU   CVTMAP+24
CVTXAPG  EQU   CVTMAP+20
CVTBUF   EQU   CVTMAP+16
CVTJOB   EQU   CVTMAP+12
CVTLINK  EQU   CVTMAP+8
CVT0EF00 EQU   CVTMAP+4
CVTTCBP  EQU   CVTMAP
CVT      EQU   CVTMAP
SAVTBITN EQU   IEDNSVTD+312
@NM00104 EQU   SAVTCKQB+8
@NM00103 EQU   SAVTCKEC+1
@NM00102 EQU   SAVTCKCC
SAVTCKPO EQU   SAVTCKCC
SAVTCKWA EQU   SAVTCKCC
SAVTCKCH EQU   SAVTCKTB+1
SAVTCKVT EQU   SAVTCKTB
@NM00101 EQU   IEDNSVTD+297
SAVTRDFG EQU   SAVTRDRV+12
@NM00100 EQU   SAVTRDRV+5
SAVTRDPY EQU   SAVTRDRV+4
SAVTRDQB EQU   SAVTRDRV+1
SAVTRDKY EQU   SAVTRDRV
SAVTNID  EQU   IEDNSVTD+280
SAVTDVAS EQU   IEDNSVTD+276
SAVTPLSZ EQU   IEDNSVTD+274
@NM00099 EQU   IEDNSVTD+273
SAVTSUBL EQU   IEDNSVTD+272
@NM00098 EQU   SAVTZELM+1
SAVTSUBM EQU   SAVTZELM
SAVTMHDX EQU   IEDNSVTD+268
SAVTNAT1 EQU   IEDNSVTD+266
SAVTSH20 EQU   IEDNSVTD+264
SAVTLCBS EQU   IEDNSVTD+260
SAVTRNMP EQU   IEDNSVTD+256
SAVTTNTX EQU   IEDNSVTD+252
SAVTNAX  EQU   IEDNSVTD+248
SAVTSUBV EQU   IEDNSVTD+247
SAVTSUBA EQU   IEDNSVTD+246
SAVTSIBC EQU   IEDNSVTD+244
SAVTBSM  EQU   IEDNSVTD+240
SAVTSCPT EQU   SAVTTCPU
SAVTRQTG EQU   IEDNSVTD+236
SAVTRQCH EQU   IEDNSVTD+232
SAVTMAND EQU   IEDNSVTD+228
SAVTSPLN EQU   IEDNSVTD+224
SAVTNADL EQU   IEDNSVTD+222
SAVTNATL EQU   IEDNSVTD+220
SAVTMHTB EQU   IEDNSVTD+216
SAVTSSMH EQU   IEDNSVTD+212
SAVTQRS  EQU   IEDNSVTD+208
SAVTRQIN EQU   IEDNSVTD+204
SAVTDFCO EQU   IEDNSVTD+200
SAVTSAO  EQU   IEDNSVTD+196
SAVTSARI EQU   IEDNSVTD+192
SAVTSAC  EQU   IEDNSVTD+188
SAVTSAI  EQU   IEDNSVTD+184
SAVTCSCI EQU   IEDNSVTD+180
SAVTSSRP EQU   IEDNSVTD+176
SAVTSSRQ EQU   IEDNSVTD+172
SAVTSCLU EQU   IEDNSVTD+168
SAVTXTRQ EQU   IEDNSVTD+164
SAVTMVBF EQU   IEDNSVTD+160
@NM00097 EQU   IEDNSVTD+148
SAVTIPCQ EQU   IEDNSVTD+144
@NM00096 EQU   IEDNSVTD+136
SAVTXFMI EQU   IEDNSVTD+132
@NM00095 EQU   IEDNSVTD+124
SAVTXFMO EQU   IEDNSVTD+120
@NM00094 EQU   IEDNSVTD+116
SAVTSSSR EQU   IEDNSVTD+112
SAVTSCPQ EQU   IEDNSVTD+108
SAVTSLCB EQU   IEDNSVTD+104
SAVTLUSR EQU   IEDNSVTD+100
@NM00093 EQU   SAVTLUSQ+8
SAVTLUSP EQU   SAVTLUSQ+4
SAVTLUSB EQU   SAVTLUSQ
@NM00092 EQU   IEDNSVTD+84
SAVTSAT  EQU   IEDNSVTD+80
SAVTNAT  EQU   IEDNSVTD+76
SAVTCLUP EQU   IEDNSVTD+72
SAVTPIUT EQU   IEDNSVTD+68
SAVTRNTA EQU   IEDNSVTD+64
SAVTDNIR EQU   IEDNSVTD+60
SAVTCNIR EQU   IEDNSVTD+56
SAVTFLDH EQU   IEDNSVTD+52
SAVTSRTN EQU   IEDNSVTD+48
SAVTSREQ EQU   IEDNSVTD+44
SAVTFAIL EQU   IEDNSVTD+42
SAVTSUSE EQU   IEDNSVTD+40
SAVTSIB  EQU   IEDNSVTD+36
SAVTPRTN EQU   IEDNSVTD+32
@NM00091 EQU   IEDNSVTD+28
SAVTWH20 EQU   IEDNSVTD+26
SAVTPWT  EQU   IEDNSVTD+24
SAVTPRTQ EQU   IEDNSVTD+20
SAVTPREQ EQU   IEDNSVTD+16
SAVTPH20 EQU   IEDNSVTD+14
SAVTPUSE EQU   IEDNSVTD+12
SAVTPLCB EQU   IEDNSVTD+8
SAVTPOOL EQU   IEDNSVTD+4
SAVTPRMT EQU   SAVTDIAF
SAVTVIRT EQU   SAVTDIAF
AVTCPBNO EQU   IEDQAVTD+1244
AVTHRESS EQU   IEDQAVTD+1243
@NM00090 EQU   IEDQAVTD+1242
@NM00089 EQU   IEDQAVTD+1241
@NM00088 EQU   IEDQAVTD+1240
@NM00087 EQU   IEDQAVTD+1237
@NM00086 EQU   IEDQAVTD+1236
AVTHRESE EQU   @NM00085
AVTRADDR EQU   IEDQAVTD+1228
AVTNADDR EQU   IEDQAVTD+1224
AVTHRESN EQU   IEDQAVTD+1220
AVTVOLRN EQU   IEDQAVTD+1216
AVTTOTNN EQU   IEDQAVTD+1212
AVTTRCYN EQU   IEDQAVTD+1208
AVTRCTRN EQU   IEDQAVTD+1204
AVTNOVON EQU   IEDQAVTD+1200
AVTADEBN EQU   IEDQAVTD+1196
AVTVOLRR EQU   IEDQAVTD+1192
AVTTOTNR EQU   IEDQAVTD+1188
AVTTRCYR EQU   IEDQAVTD+1184
AVTRCTRR EQU   IEDQAVTD+1180
AVTNOVOR EQU   IEDQAVTD+1176
AVTADEBR EQU   IEDQAVTD+1172
AVTLODPT EQU   IEDQAVTD+1168
AVTIOBN  EQU   IEDQAVTD+1164
AVTIOBR  EQU   IEDQAVTD+1160
AVTCPBPT EQU   IEDQAVTD+1156
AVTFCPB  EQU   IEDQAVTD+1152
@NM00084 EQU   IEDQAVTD+1148
AVTINCPQ EQU   IEDQAVTD+1144
@NM00083 EQU   IEDQAVTD+1140
@NM00082 EQU   IEDQAVTD+1137
@NM00081 EQU   AVTBIT4
@NM00080 EQU   AVTBIT4
@NM00079 EQU   AVTBIT4
@NM00078 EQU   AVTBIT4
@NM00077 EQU   AVTBIT4
@NM00076 EQU   AVTBIT4
@NM00075 EQU   AVTBIT4
AVTRUFTN EQU   AVTBIT4
@NM00074 EQU   IEDQAVTD+1132
AVTNOBFQ EQU   IEDQAVTD+1128
@NM00073 EQU   IEDQAVTD+1124
AVTDKENQ EQU   IEDQAVTD+1120
@NM00072 EQU   IEDQAVTD+1116
AVTDKAPQ EQU   IEDQAVTD+1112
AVTCOPY  EQU   IEDQAVTD+1108
AVTIA    EQU   IEDQAVTD+1104
AVTFL    EQU   IEDQAVTD+1100
@NM00071 EQU   IEDQAVTD+1096
AVTNCPBQ EQU   IEDQAVTD+1092
AVTTOTNC EQU   IEDQAVTD+1088
AVTCMAX  EQU   IEDQAVTD+1084
AVTCMIN  EQU   IEDQAVTD+1080
AVTHM02  EQU   IEDQAVTD+1076
AVTOPCIN EQU   IEDQAVTD+1074
AVTDCTLN EQU   IEDQAVTD+1072
AVTOPMSK EQU   IEDQAVTD+1068
AVTDDFT  EQU   IEDQAVTD+1064
AVTSTEAL EQU   IEDQAVTD+1060
AVTOPTN  EQU   IEDQAVTD+1056
AVTDSKCT EQU   IEDQAVTD+1054
AVTCKRST EQU   IEDQAVTD+1053
AVTSTAN  EQU   AVTBIT3
AVTSTACN EQU   AVTBIT3
AVTSTAIN EQU   AVTBIT3
AVTSTAYN EQU   AVTBIT3
AVTOLTBN EQU   AVTBIT3
AVTTSAB  EQU   AVTBIT3
AVTRFULN EQU   AVTBIT3
AVTRECVN EQU   AVTBIT3
@NM00070 EQU   AVTBIT2
@NM00069 EQU   AVTBIT2
AVTOPEIN EQU   AVTBIT2
AVTSTRTN EQU   AVTBIT2
AVTTOPOL EQU   AVTBIT2
AVTCOPYN EQU   AVTBIT2
AVTREUSN EQU   AVTBIT2
AVTEXTSC EQU   AVTBIT2
AVTDISKN EQU   AVTBIT1
AVTQUCKN EQU   AVTBIT1
AVTCLOSN EQU   AVTBIT1
AVTREADN EQU   AVTBIT1
AVTDLAYN EQU   AVTBIT1
AVTAQTAN EQU   AVTBIT1
AVTTSON  EQU   AVTBIT1
AVTAPLKN EQU   AVTBIT1
AVTDUMBR EQU   IEDQAVTD+1048
AVTDLQX  EQU   IEDQAVTD+1046
AVTINTLV EQU   IEDQAVTD+1044
AVTSMCNT EQU   IEDQAVTD+1042
AVTAVFCT EQU   IEDQAVTD+1040
AVTOPCON EQU   IEDQAVTD+1038
AVTOPCNT EQU   IEDQAVTD+1036
AVTLNCNT EQU   IEDQAVTD+1034
AVTHA16  EQU   IEDQAVTD+1030
AVTHA7   EQU   IEDQAVTD+1028
AVTHA4   EQU   IEDQAVTD+1026
AVTHA3   EQU   IEDQAVTD+1024
AVTHA2   EQU   IEDQAVTD+1022
AVTGETMS EQU   IEDQAVTD+1021
@NM00068 EQU   IEDQAVTD+1020
AVTGETMD EQU   IEDQAVTD+1016
AVTGETMN EQU   IEDQAVTD+1012
AVTCWTOT EQU   IEDQAVTD+1008
AVTCWINT EQU   IEDQAVTD+956
AVTDTRAP EQU   IEDQAVTD+952
@NM00067 EQU   IEDQAVTD+950
@NM00066 EQU   AVTIOTR
AVTIOTRH EQU   AVTIOTR
AVTIOTRE EQU   AVTIOTR
@NM00065 EQU   AVTSUBT
AVTSUBPT EQU   AVTSUBT
AVTSUBON EQU   AVTSUBT
AVTAFE30 EQU   IEDQAVTD+944
AVTAFE20 EQU   IEDQAVTD+940
AVTAFE10 EQU   IEDQAVTD+936
AVTCWEC2 EQU   IEDQAVTD+932
AVTCWPM2 EQU   IEDQAVTD+928
AVTCWTS2 EQU   IEDQAVTD+927
AVTCWTS1 EQU   IEDQAVTD+926
AVTCWCLD EQU   AVTCWFL2
AVTCWRAP EQU   AVTCWFL2
@NM00064 EQU   AVTCWFL2
@NM00063 EQU   AVTCWFL2
@NM00062 EQU   AVTCWFL2
@NM00061 EQU   AVTCWFL2
@NM00060 EQU   AVTCWFL2
AVTCWACT EQU   AVTCWFL2
@NM00059 EQU   AVTCWFL1
@NM00058 EQU   AVTCWFL1
@NM00057 EQU   AVTCWFL1
@NM00056 EQU   AVTCWFL1
@NM00055 EQU   AVTCWFL1
@NM00054 EQU   AVTCWFL1
@NM00053 EQU   AVTCWFL1
AVTCOMWN EQU   AVTCWFL1
AVTCWEC1 EQU   IEDQAVTD+920
AVTCWPM1 EQU   IEDQAVTD+916
AVTCAREA EQU   IEDQAVTD+912
AVTFZERO EQU   IEDQAVTD+908
AVTCADDR EQU   IEDQAVTD+904
AVTCOREC EQU   IEDQAVTD+900
@NM00052 EQU   IEDQAVTD+892
AVTCPBCB EQU   IEDQAVTD+888
@NM00051 EQU   IEDQAVTD+880
AVTDSIOB EQU   IEDQAVTD+876
@NM00050 EQU   IEDQAVTD+868
AVTCPRMB EQU   IEDQAVTD+864
@NM00049 EQU   IEDQAVTD+856
AVTCLOSB EQU   IEDQAVTD+852
@NM00048 EQU   IEDQAVTD+844
AVTACTIB EQU   IEDQAVTD+840
@NM00047 EQU   IEDQAVTD+836
AVTOLTEB EQU   IEDQAVTD+832
AVTOLTCH EQU   AVTOLTQB+1
AVTOLTVT EQU   AVTOLTQB
@NM00046 EQU   AVTOPCQB+8
@NM00045 EQU   AVTOPCEC+1
@NM00044 EQU   AVTOPCCC
AVTOPCPO EQU   AVTOPCCC
AVTOPCWA EQU   AVTOPCCC
AVTOPCCH EQU   AVTOPCOB+1
AVTOPCVT EQU   AVTOPCOB
@NM00043 EQU   AVTCKPQB+9
AVTCKPTS EQU   AVTCKPQB+8
@NM00042 EQU   AVTCKPEC+1
@NM00041 EQU   AVTCKPCC
AVTCKPPO EQU   AVTCKPCC
AVTCKPWA EQU   AVTCKPCC
AVTCKPCH EQU   AVTCKPTB+1
AVTCKPVT EQU   AVTCKPTB
@NM00040 EQU   IEDQAVTD+796
AVTBFRTB EQU   IEDQAVTD+792
@NM00039 EQU   IEDQAVTD+784
AVTBFREB EQU   IEDQAVTD+780
AVTTIMQ  EQU   IEDQAVTD+776
@NM00038 EQU   IEDQAVTD+772
AVTIMQPS EQU   IEDQAVTD+768
AVTINOUT EQU   IEDQAVTD+766
AVTREFTM EQU   IEDQAVTD+764
@NM00037 EQU   IEDQAVTD+752
AVTDELYB EQU   IEDQAVTD+748
AVTOCQPT EQU   IEDQAVTD+744
AVTTSOPT EQU   IEDQAVTD+740
AVTSUPPT EQU   IEDQAVTD+736
AVTCBQCB EQU   IEDQAVTD+732
AVTMSGS  EQU   IEDQAVTD+729
@NM00036 EQU   AVTSYSER
@NM00035 EQU   AVTSYSER
@NM00034 EQU   AVTSYSER
@NM00033 EQU   AVTSYSER
@NM00032 EQU   AVTSYSER
@NM00031 EQU   AVTSYSER
AVTCMAXN EQU   AVTSYSER
AVTCMINN EQU   AVTSYSER
AVT2260L EQU   IEDQAVTD+724
AVTABEPL EQU   AVTADBUF
AVTHFF   EQU   AVTCLRHI+2
@NM00030 EQU   AVTCLRHI
AVTCCLNK EQU   AVTCRELE+5
AVTCCPRI EQU   AVTCRELE+4
AVTCCQCB EQU   AVTCCELE+1
AVTCCKEY EQU   AVTCCELE
AVTDELAD EQU   IEDQAVTD+704
AVTDELEM EQU   IEDQAVTD+700
AVTBSX   EQU   AVTCKLNK
AVTOPETR EQU   AVTHG01
@NM00029 EQU   AVTCKBYT
AVTCKONQ EQU   AVTCKBYT
@NM00028 EQU   AVTCKBYT
@NM00027 EQU   AVTCKBYT
@NM00026 EQU   AVTCKBYT
@NM00025 EQU   AVTCKBYT
@NM00024 EQU   AVTCKBYT
@NM00023 EQU   AVTCKBYT
AVTOPERT EQU   IEDQAVTD+690
AVTOPXCL EQU   IEDQAVTD+688
AVTOPERL EQU   IEDQAVTD+687
@NM00022 EQU   IEDQAVTD+686
AVTCKTIM EQU   IEDQAVTD+684
AVTCKELV EQU   IEDQAVTD+682
AVTCPRCD EQU   IEDQAVTD+681
AVTWARMN EQU   AVTCKELF
AVTCRTLN EQU   AVTCKELF
AVTCPIPN EQU   AVTCKELF
AVTCCLCN EQU   AVTCKELF
AVTCINCN EQU   AVTCKELF
@NM00021 EQU   AVTCKELF
AVTCMCPN EQU   AVTCKELF
AVTCRDYN EQU   AVTCKELF
AVTCKQAD EQU   IEDQAVTD+677
AVTSCBSZ EQU   IEDQAVTD+676
@NM00020 EQU   IEDQAVTD+672
AVTCKELE EQU   IEDQAVTD+668
@NM00019 EQU   AVTCKPEL+8
AVTCKRLK EQU   AVTCKPEL+5
AVTCKRPR EQU   AVTCKPEL+4
AVTCKRMQ EQU   AVTCKRMV+1
AVTCKRKY EQU   AVTCKRMV
AVTHK    EQU   IEDQAVTD+648
AVTHI    EQU   IEDQAVTD+644
AVTIOT   EQU   IEDQAVTD+640
AVTNX    EQU   IEDQAVTD+636
AVTTONE  EQU   IEDQAVTD+632
AVTA3TL  EQU   IEDQAVTD+628
AVTDMECB EQU   IEDQAVTD+624
AVTABEND EQU   IEDQAVTD+618
AVTPLCBN EQU   IEDQAVTD+616
@NM00018 EQU   AVTSAVTP+1
@NM00017 EQU   AVTSAVTF
AVTSNA   EQU   AVTSAVTF
AVTONSNA EQU   AVTSAVTF
AVTVTMCP EQU   AVTSAVTF
@NM00016 EQU   IEDQAVTD+608
AVTCMBSS EQU   IEDQAVTD+604
AVTRCV   EQU   IEDQAVTD+600
AVTSEND  EQU   IEDQAVTD+596
AVTCSCH  EQU   IEDQAVTD+592
AVTQ1    EQU   IEDQAVTD+588
AVTE7    EQU   IEDQAVTD+584
AVTHB    EQU   IEDQAVTD+580
AVTR1    EQU   IEDQAVTD+576
AVTBZ    EQU   IEDQAVTD+572
AVTEZ    EQU   IEDQAVTD+568
AVTEC    EQU   IEDQAVTD+564
AVTEW    EQU   IEDQAVTD+560
AVTNDIAL EQU   AVTSCOPT
AVTN2741 EQU   AVTSCOPT
AVTCONCO EQU   AVTSCOPT
AVTCONC  EQU   AVTSCOPT
AVTCMBUF EQU   AVTSCOPT
AVTAPDMP EQU   AVTSCOPT
@NM00015 EQU   AVTSCOPT
AVTHA    EQU   AVTDISP
AVTEA    EQU   IEDQAVTD+548
AVTAX    EQU   IEDQAVTD+544
AVTA3    EQU   IEDQAVTD+540
AVTGD    EQU   IEDQAVTD+536
AVTAL    EQU   IEDQAVTD+532
AVTOLTST EQU   AVTHG02
AVTE8    EQU   IEDQAVTD+524
AVTUI    EQU   IEDQAVTD+520
AVTCOMPT EQU   IEDQAVTD+516
AVTCRSRF EQU   IEDQAVTD+512
@NM00014 EQU   IEDQAVTD+508
AVTKA02  EQU   IEDQAVTD+504
AVTOPTPT EQU   IEDQAVTD+500
AVTPCBPT EQU   IEDQAVTD+496
@NM00013 EQU   AVTECB1
AVTCOMP  EQU   AVTECB1
@NM00012 EQU   AVTECB1
AVTOPECA EQU   IEDQAVTD+488
AVTOLECA EQU   IEDQAVTD+484
AVTCKECA EQU   IEDQAVTD+480
AVTCWECA EQU   IEDQAVTD+476
AVTCWTCB EQU   IEDQAVTD+472
AVTOLTCB EQU   IEDQAVTD+468
AVTOCTCB EQU   IEDQAVTD+464
AVTCKTCB EQU   IEDQAVTD+460
AVTAS    EQU   IEDQAVTD+456
AVTNOLBF EQU   IEDQAVTD+454
AVTNCKPR EQU   IEDQAVTD+453
AVTCIB   EQU   IEDQAVTD+452
AVTSPLPT EQU   IEDQAVTD+448
AVTMVBFR EQU   IEDQAVTD+444
AVTSBTA  EQU   IEDQAVTD+440
AVTRARTN EQU   IEDQAVTD+436
AVTBSCAN EQU   IEDQAVTD+432
AVTRDYA  EQU   IEDQAVTD+428
AVTRNMPT EQU   IEDQAVTD+424
AVTDISTR EQU   IEDQAVTD+420
AVTPARM3 EQU   IEDQAVTD+416
@NM00011 EQU   AVTPKF
@NM00010 EQU   AVTPKF
@NM00009 EQU   AVTPKF
AVTFTCHF EQU   AVTPKF
@NM00008 EQU   AVTPKF
@NM00007 EQU   AVTPKF
@NM00006 EQU   AVTPKF
@NM00005 EQU   AVTPKF
AVTPARM  EQU   IEDQAVTD+408
AVTEXS2A EQU   IEDQAVTD+402
AVTEXA2S EQU   IEDQAVTD+396
AVTOCGET EQU   IEDQAVTD+392
AVTCKAVT EQU   @NM00003+1
@NM00004 EQU   AVTCKFLG
AVTCKHLT EQU   AVTCKFLG
AVTCKREQ EQU   AVTCKFLG
AVTCKENV EQU   AVTCKFLG
AVTCKNAC EQU   AVTCKFLG
AVTCKTAC EQU   AVTCKFLG
@NM00002 EQU   IEDQAVTD+384
AVTREADD EQU   IEDQAVTD+380
AVTREADY EQU   IEDQAVTD+376
AVTRACE  EQU   IEDQAVTD+372
AVTTCB   EQU   IEDQAVTD+368
AVTPASWD EQU   IEDQAVTD+360
AVTCTLCH EQU   IEDQAVTD+352
AVTDOUBL EQU   IEDQAVTD+344
AVTDOUBX EQU   IEDQAVTD+336
AVTDPARM EQU   IEDQAVTD+332
AVTCSTCS EQU   IEDQAVTD+328
AVTDLQ   EQU   AVTSAVEX+32
@NM00001 EQU   AVTSAVEX
AVTSAVE4 EQU   IEDQAVTD+216
AVTSAVE3 EQU   IEDQAVTD+144
AVTSAVE2 EQU   IEDQAVTD+72
AVTSAVE1 EQU   IEDQAVTD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00126 EQU   @EL00003
@RC00135 EQU   @EL00004
@RC00147 EQU   @EL00005
@RC00140 EQU   @EL00005
@ENDDATA EQU   *
         END   IEDMVBFR,(C'PLS0057',0701,77112)
