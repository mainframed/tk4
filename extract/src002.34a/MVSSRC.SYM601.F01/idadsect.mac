*%IF IDAMODNM = 'C05B' %THEN
*%GOTO IDAESTXA;                                           /*@Y021131*/
*%IF IDAMODNM='I96C' %THEN
*%GOTO IDAESTXA;                                           /*@Y021131*/
*%IF IDAMODNM='CKRA1' %THEN
*%GOTO IDAESTXA;                                           /*@Y021131*/
* /******************************************************************/
* /*     THIS DSECT DEFINES THE WORK AREAS USED BY AM/0 CHECKPOINT  */
* /*     RESTART MODULES. IT ALSO CONTAINS ALL MACRO VARIABLES,     */
* /*     DECLARES AND EQUATES.                                      */
* /*                                                                */
* /*                                                                */
* /* MACCOMP Y-2 SC1DE/SJD61                                        */
* /* MACSTAT Y-2 73192/Y02113                                @Y021131*/
* /*                                                                */
* /******************************************************************/
* /*                                                                */
* /*           FOLLOWING ARE THE REGISTER DECLARES                  */
* /*                                                                */
* /******************************************************************/
         DCL   PARAMREG  PTR(31)   REG(1);   /* CHKPT/REST W.A. PTR */
         DCL   RUAL      PTR(31)   REG(2);   /* USER ACB LIST PTR   */
         DCL   RLRCNT    PTR(31)   REG(2);   /* RECORDS ERASED COUNT*/
         DCL   RTIOTPTR  PTR(31)   REG(2);   /* TIOT DD NAME POINTER*/
         DCL   RACBCNT   PTR(31)   REG(3);   /* COUNT OF OPEN ACBS  */
         DCL   REODRET   PTR(31)   REG(3);   /* PTR EOD RETURN ADDR */
         DCL   RWORK1    PTR(31)   REG(3);   /* WORK REGISTER ONE   */
         DCL   RSAVE     PTR(31)   REG(4);   /* SAVE AOS REST WA PT */
         DCL   RARWA     PTR(31)   REG(4);   /* PTR AM/0 RESTART WA */
         DCL   RWORK2    PTR(31)   REG(5);   /* WORK REGISTER TWO   */
         DCL   RACBCUR   PTR(31)   REG(5);   /* INDEX TO CURRENT ACB*/
         DCL   RAMBCUR   PTR(31)   REG(6);   /* INDEX TO CURRENT AMB*/
         DCL   RWORK3    PTR(31)   REG(6);   /* WORK REGISTER THREE */
         DCL   RPASSCNT  PTR(31)   REG(7);   /* BUILD UAL WORK REG. */
         DCL   RWORK4    PTR(31)   REG(7);   /* WORK REGISTER FOUR  */
         DCL   RPTWAMBS  PTR(31)   REG(7);   /* POINTER WORK AMBS   */
         DCL   RPTUAMBS  PTR(31)   REG(8);   /* POINTER USER AMBS   */
         DCL   RUALEP    PTR(31)   REG(8);   /* PTR UAL ENTRY       */
         DCL   RWORK5    PTR(31)   REG(8);   /* WORK REGISTER FIVE  */
         DCL   RWKREG    PTR(31)   REG(9);   /* WORK REGISTER NINE  */
         DCL   RCREG     PTR(31)   REG(15);
* /*                                                                */
* /******************************************************************/
* /*           MACRO VARIABLES                                      */
* /******************************************************************/
 %DCL (EIGHT,HIBITON,CKVALNOC,ONE,FOUR,CATERROR,SEVEN) CHAR;
 %DCL (CKPTER03,CKPTER40,CKPTER41,WAEOFSET,NOCORAM0,ZERO1) CHAR;
 %ZERO1    = '''00''X';
 %CKPTER03 = '3';                            /* NO CORE AVAILABLE EC*/
 %CKPTER40 = '40';                           /* VALIDITY CHECK E.C. */
 %CKPTER41 = '41';                           /* CONFLICTING PARM.   */
         DCL ZERO CONSTANT(0);          /* INITIALIZE CONSTANT */
 %ONE      = '1';                            /* INITIALIZE CONSTANT */
 %FOUR     = '4';                            /* INITIALIZE CONSTANT */
 %SEVEN    = '7';                            /* INITIALIZE CONSTANT */
 %EIGHT    = '8';                            /* INITIALIZE CONSTANT */
 %EIGHTY   = '80';                           /* LENGTH WORK ACB+EXT.*/
 %NOCORAM0 = '55';                           /* NO CORE AVAILABLE EC*/
 %HIBITON  = '''80''X';                      /* TURN HI ORDER BIT ON*/
 %CKVALNOC = '''01''X';                      /* VALIDITY/NOCORE MSG */
 %ON       ='''1''B';                        /* BIT EQUAL ONE TEST  */
 %OFF      ='''0''B';                        /* BIT EQUAL ZERO TEST */
 %WAEOFSET = '76';                           /* OFFSET TO WACB EXT. */
* /******************************************************************/
* /*          INCLUDES AND CONTROL BLOCK DEFINITIONS                */
* /******************************************************************/
* /*                                                                */
* /*     THIS DSECT MAPS THE DEB USED BY AM/0 CHECKPOINT / RESTART  */
* /*                                                                */
*        %GOTO DEBPLS;
         MACRO
DEBDSECT DSECT      DATA EXTENT BLOCK
*
DEBNMSUB DS    0CL1                    NO. OF SUB RTNS
DEBTCBAD DS    A                       TASK CONTROL BLOCK ADDR
DEBAMLNG DS    0CL1                    LENGTH OF ACCESS METHOD SEC
DEBDEBPT DS    0F                     SAME AS DEBDEBAD
DEBDEBAD DS    A                       ADDR OF NEXT DEB IN DEB CHAIN
DEBOFLGS DS    0CL1                    DEB OPEN FLAGS
DEBIRBAD DS    A                       ADDR OF THE IRB CONTROL BLOCK
DEBOPATB DS    0CL1                    OPEN ATRIBUTES
DEBSYSPG DS    A                       SYSTEM PURGE FIELD
DEBNMEXT DS    0CL1                    NUMBER OF EXTENTS IN DEB
DEBUSRPG DS    A                       USER PURGE FIELD
DEBPRIOR DS    0CL1                    INFO BYTE
DEBECBAD DS    A                       EVENT CONTROL BLOCK ADDR
DEBPROTG DS    0CL1                    INFO BYTE
DEBDEBID DS    0CL1                    INFO BYTE
DEBDCBAD DS    A                       ADDR OF DCB
DEBEXSCL DS    0CL1                    SCALING FACTOR OF DEB EXTENT
DEBAPPAD DS    A                       APPENDAGE TABLE ADDR
DEBDVMOD DS    0CL1                    DEVICE MODIFIER BYTE
DEBUCBAD DS    A                       UNIT CTL BLOCK ADDR
DEBTVLSQ DS    H                      VOLUME SEQUENCE FOR TAPE
DEBBINUM DS    H                       BIN NUMBER
DEBTVLNM DS    H                      NO OF VOLUME FOR TAPE
DEBSTRCC DS    H                       START CYLINDER NUMBER
DEBSTRHH DS    H                       START HEAD NUMBER
DEBENDCC DS    H                       END CYLINDER NUMBER
DEBENDHH DS    H                       END HEAD NUMBER
DEBNMTRK DS    H                       NUMBER OF TRACKS
*                                                                     *
*  FOR ADDITIONAL EXTENTS ONN DIRECT ACCESS THE FOWOLLING FIELDS
*  WILL HAVE TO BE OFFSET ANOTHER 16 BYTES
*                                                                     *
DEBVOLSQ DS    H                       VOL SEQUENCE NUMBER
DEBVOLNM DS    H                       VOLUME NUMBER
*                                                                     *
*  FOR EACH SUBROUTINE LOADED BUMP THIS OFFSET BY 2
*                                                                     *
DEBSUBID DS    H                       SUBROUTINE ID ( 2 BYTES )
*                                                                   */
* /*                                                                */
*                                                                   */
*%DEBPLS:  ;
*DECLARE
*  1 DEBDSECT  BASED,
*   2 DEBTCBAD    PTR(31),               /* TASK CONTROL BLOCK ADDR  */
*    3 DEBNMSUB    CHAR(1),              /* NO. OF SUB RTNS          */
*   2 DEBDEBPT    PTR(31),               /* PTR TO NEXT DEB IN DEB
*                                           CHAIN                    */
*    3 DEBAMLNG    CHAR(1),              /* LENGTH OF ACCESS METHOD
*                                           SEC                      */
*    3 DEBDEBAD   PTR(24),               /* SAME AS DEBDEBPT         */
*   2 DEBIRBAD    PTR(31),               /* ADDR OF THE IRB CONTROL
*                                           BLOCK                    */
*    3 DEBOFLGS    CHAR(1),              /* DEB OPEN FLAGS           */
*   2 DEBSYSPG    PTR(31),               /* SYSTEM PURGE FIELD       */
*    3 DEBOPATB    CHAR(1),              /* OPEN ATRIBUTES           */
*   2 DEBUSRPG    PTR(31),               /* USER PURGE FIELD         */
*    3 DEBNMEXT    CHAR(1),              /* NUMBER OF EXTENTS IN DEB */
*   2 DEBECBAD    PTR(31),               /* EVENT CONTROL BLOCK ADDR */
*    3 DEBPRIOR    CHAR(1),              /* INFO BYTE                */
*   2 DEBDCBAD    PTR(31),               /* ADDR OF DCB              */
*    3 DEBPROTG    CHAR(1),              /* INFO BYTE                */
*     4 DEBDEBID    CHAR(1),             /* INFO BYTE                */
*   2 DEBAPPAD    PTR(31),               /* APPENDAGE TABLE ADDR     */
*    3 DEBEXSCL    CHAR(1),              /* SCALING FACTOR OF DEB
*                                           EXTENT                   */
*   2 DEBUCBAD    PTR(31),               /* UNIT CTL BLOCK ADDR      */
*    3 DEBDVMOD    CHAR(1),              /* DEVICE MODIFIER BYTE     */
*   2 DEBTVLSQ    FIXED(15),             /* VOL SEQ FOR TAPE         */
*   2 DEBBINUM    FIXED(15),             /* BIN NUMBER               */
*   2 DEBTVLNM    FIXED(15),             /* NO OF VOL FOR TAPE       */
*   2 DEBSTRCC    FIXED(15),             /* START CYLINDER NUMBER    */
*   2 DEBSTRHH    FIXED(15),             /* START HEAD NUMBER        */
*   2 DEBENDCC    FIXED(15),             /* END CYLINDER NUMBER      */
*   2 DEBENDHH    FIXED(15),             /* END HEAD NUMBER          */
*   2 DEBNMTRK    FIXED(15),             /* NUMBER OF TRACKS         */
* /*                                                                 */
* /*     FOR ADDITIONAL EXTENT ON DIRECT ACCESS THE FOLLOWING        */
* /*     FIELDS WILL HAVE TO BE OFFSET ANOTHER 16 BYTES              */
* /*                                                                 */
*   2 DEBVOLSQ    FIXED(15),             /* VOLUME SEQUENCE NUMBER   */
*   2 DEBVOLNM    FIXED(15),             /* VOLUME NUMBER            */
* /*                                                                 */
* /*     FOR EACH SUBROUTINE LOADED BUMP THIS OFFSET BY 2            */
* /*                                                                 */
*   2 DEBSUBID    FIXED(15);             /* SUBROUTINE ID ( 2 BYTES )*/
* /*     END OF DEB                                                  */
* /*                                                                */
* /*     THIS DSECT MAPS THE TCB USED BY AM/0 CHECKPOINT RESTART    */
* /*                                                                */
*        %GOTO TCBPLS;
         MACRO
TCBDSECT DSECT      TASK CONTROL BLOCK
*
TCBRBP   DS    A                       POINTER TO EXECUTING RB
TCBPIE   DS    A                       POINTER TO PROG. INTERRUPT EL.
TCBDEB   DS    A                       POINTER TO DEB QUEUE
TCBTIO   DS    A                       POINTER TO TIOT
TCBCMP   DS    F                       TASK COMPLETION CODE
TCBTRN   DS    A                       TESTRAN FIELD
TCBMSS   DS    A                       DATA BLOCK QUEUE ELEMENT POINTER
TCBPRTK  DS    BL1                     PROTECTION TAG
TCBFLGS  DS    BL5                     FLAG BYTES
TCBLMP   DS    BL1                     LIMIT PRIORITY
TCBDSP   DS    BL1                     DISPATCHING PRIORITY
TCBLLS   DS    A                       POINTER TO LOAD LIST
TCBJLB   DS    A                       POINTER TO JOBLIB DCB
TCBJSE   DS    A                       LIST OF INACTIVE PROGRAMS ADDR.
TCBGRS   DS    16F                     GENERAL REGISTER SAVE AREA
TCBIDF   DS    0BL1                    TCB IDENTIFIER FIELD
TCBFSA   DS    A                       POINTER TO 1ST PROB.PROG.SAVEAR
TCBTCB   DS    A                       NEXT TCB ON READY QUEUE POINTER
TCBTME   DS    A                       POINTER TO TIMER ELEMENT
         MEND
*%TCBPLS:  ;
*DECLARE
*  1 TCBDSECT  BASED,
*   2 TCBRBP      PTR(31),               /* POINTER TO EXECUTING RB  */
*   2 TCBPIE      PTR(31),               /* POINTER TO PROG.
*                                           INTERRUPT EL.            */
*   2 TCBDEB      PTR(31),               /* POINTER TO DEB QUEUE     */
*   2 TCBTIO      PTR(31),               /* POINTER TO TIOT          */
*   2 TCBCMP      FIXED(31),             /* TASK COMPLETION CODE     */
*   2 TCBTRN      PTR(31),               /* TESTRAN FIELD            */
*   2 TCBMSS      PTR(31),               /* DATA BLOCK QUEUE ELEMENT
*                                           POINTER                  */
*   2 TCBPRTK     CHAR(1),               /* PROTECTION TAG           */
*   2 TCBFLGS     CHAR(5),               /* FLAG BYTES               */
*   2 TCBLMP      CHAR(1),               /* LIMIT PRIORITY           */
*   2 TCBDSP      CHAR(1),               /* DISPATCHING PRIORITY     */
*   2 TCBLLS      PTR(31),               /* POINTER TO LOAD LIST     */
*   2 TCBJLB      PTR(31),               /* POINTER TO JOBLIB DCB    */
*   2 TCBJSE      PTR(31),               /* LIST OF INACTIVE
*                                           PROGRAMS ADDR.           */
*   2 TCBGRS   (16) FIXED(31),           /* GENERAL REGISTER SAVE
*                                           AREA                     */
*   2 TCBFSA      PTR(31),               /* POINTER TO 1ST
*                                           PROB.PROG.SAVEAR         */
*    3 TCBIDF      CHAR(1),              /* TCB IDENTIFIER FIELD     */
*   2 TCBTCB      PTR(31),               /* NEXT TCB ON READY QUEUE
*                                           POINTER                  */
*   2 TCBTME      PTR(31);               /* POINTER TO TIMER ELEMENT */
* /*     END OF TCB                                                  */
* %IF IGCUWALX^='YES' %THEN %GOTO UWALX01;                 /*@Y021131*/
* /* UWAL (USER/WORK ACB LIST)                               @Y021131*/
*        DCL
*          1 IGCUWAL BASED,             /* START OF LIST     @Y021131*/
*            2 IGCUAL PTR(31),          /* A(USER ACB)       @Y021131*/
*              3 UALFLAG BIT(8),        /* FLAG BYTE         @Y021131*/
*              3 UALACBAD PTR(24),      /* A(USER ACB)       @Y021131*/
*            2 IGCWAL PTR(31),          /* A(WORK ACB)       @Y021131*/
*              3 WALFLAG BIT(8),        /* FLAG BYTE         @Y021131*/
*              3 WALACBAD PTR(24),      /* A(USER ACB)       @Y021131*/
*            2 IGCAMBL PTR(31);         /* A(USER AMBL)      @Y021131*/
* %GOTO UWALX02;                                           /*@Y021131*/
* %UWALX01:;                                               /*@Y021131*/
* /* UAL (USER ACB LIST) DECLARATION                                */
* /* DESCRIBES LIST OF POINTERS TO USER ACB'S                       */
* /* CREATED BY AM/0 CHECKPOINT/RESTART                             */
*        DCL 1 IGCUAL      BASED,            /* UAL                 */
*              2 UALFLAG   BIT(8),           /* UAL FLAG BYTE       */
                3 UALDODSS  BIT(1),          /* DO DSS CHECKS       */
                3 UALDOBKO  BIT(1),          /* DO DATA SET BACKOFF */
                3 UALDOKEY  BIT(1),          /* DO KEYED PROCESSING */
                3 UALDOSTU  BIT(1),          /* DO STATISTICS UPDATE*/
                3 *         BIT(4),          /* RESERVED            */
*              2 UALACBAD  PTR(24);          /* POINTER TO USER ACB */
*%GOTO UAL1;
         MACRO
         IGCUAL
IGCUAL   DSECT
UALFLAG  DS    BL1                           UAL FLAG BYTE
UALACBAD DS    AL3                           POINTER TO USER ACB
         MEND
*%UAL1: ;
* /*           END OF UAL                                           */
* %UWALX02:;                                               /*@Y021131*/
* /* WAE (WORK ACB EXTENSION) DECLARATION                           */
* /* DESCRIBES ACB PROCESSING FLAGS                                 */
* /* CREATED BY RESTART                                             */
*        DCL 1 IGCWAE        BASED,          /* WAE                 */
*              2 WAEFLAGS    BIT(8),         /* WAE FLAG BYTE       */
*                3 WAEDODSS  BIT(1),         /* DO DSS CHECKS       */
                 3 WAEREPOS  BIT(1),         /* DO DATA REPOSITION  */
*                3 WAEDOKEY  BIT(1),         /* DO KEYED PROCESSING */
*                3 WAEDOSTU  BIT(1),         /* DO STATISTICS UPDATE*/
*                3 *         BIT(4),         /* RESERVED            */
               2 WAEXLIST    PTR(24);        /* PTR ARWA EXIT LIST  */
*%GOTO WAE1;
         MACRO
         IGCWAE
IGCWAE   DSECT
WAEFLAGS DS    BL1                           WAE PROCESSING FLAGS
WAEDODSS EQU   X'80'                         DO DSS CHECKS
WAEREPOS EQU   X'40'                         DO DATA REPOSITION
WAEDOKEY EQU   X'20'                         DO KEYED PROCESSING
WAEDOSTU EQU   X'10'                         DO STATISTICS UPDATE
         DS    AL3                           RESERVED
         MEND
*%WAE1: ;
* /*           END OF WAE                                           */
* %IF IGCUWALX='YES' %THEN %GOTO UWALX03;                  /*@Y021131*/
* /* WAL (WORK ACB LIST) DECLARATION                                */
* /* DESCRIBES LIST OF POINTERS TO WORK ACB'S                       */
* /* CREATED BY CHECKPOINT/RESTART                                  */
*        DCL 1 IGCWAL      BASED,            /* WAL                 */
*              2 WALFLAG   BIT(8),           /* WAL FLAG BYTE       */
                3 WALDODSS  BIT(1),          /* DO DSS CHECKS       */
                3 WALDOBKO  BIT(1),          /* DO DATA SET BACKOFF */
                3 WALDOKEY  BIT(1),          /* DO KEYED PROCESSING */
                3 WALDOSTU  BIT(1),          /* DO STATISTICS UPDATE*/
                3 *         BIT(4),          /* RESERVED            */
*              2 WALACBAD  PTR(24);          /* POINTER TO WORK ACB */
* %UWALX03:;                                               /*@Y021131*/
*%GOTO WAL1;
         MACRO
         IGCWAL
IGCWAL   DSECT
WALFLAG  DS    BL1                           WAL FLAG BYTE
WALACBAD DS    AL3                           POINTER TO WORK ACB
         MEND
*%WAL1: ;
* /*           END OF WAL                                           */
 %INCLUDE      SYSLIB(IDAAMB);
 %INCLUDE      SYSLIB(IDAAMBL);
 %INCLUDE      SYSLIB(IDAAMDSB);
 %INCLUDE      SYSLIB(IFGACB);
 %INCLUDE      SYSLIB(IFGRPL);
 %IDAESTXA:;                                               /*@Y021131*/
         /* PARAMETER LIST FOR ESTAE ROUTINES                @Y021131*/
 %IF IDAMODNM='C05B' %THEN
  %GOTO IDAESTX0;                                           /*@Y021131*/
 %IF IDAMODNM='I96C' %THEN
  %GOTO IDAESTX0;                                           /*@Y021131*/
         DCL 1 ESTAELST BASED,
 %GOTO IDAESTX1;                                           /*@Y021131*/
 %IDAESTX0:;                                               /*@Y021131*/
         DCL 1 ESTAELST,
 %IDAESTX1:;                                               /*@Y021131*/
               2 ESTMODUL CHAR(4),      /* MODULE NAME       @Y021131*/
               2 ESTCKWA PTR(31),       /* A(CHECKPOINT WORK AREA) */
 %IF IDAMODNM='I96C' % THEN
  %GOTO IDAESTX2;                                          /*@Y021131*/
 %IF IDAMODNM='C05B' % THEN
  %GOTO IDAESTX2;                                          /*@Y021131*/
 %IF IDAMODNM='CKRA1' % THEN
  %GOTO IDAESTX2;                                          /*@Y021131*/
                 3 ESTRSWA PTR(31);     /* A(RESTART WORK AREA) */
 %GOTO IDAESTX9;                                           /*@Y021131*/
 %IDAESTX2:;                                               /*@Y021131*/
                 3 ESTRSWA PTR(31),     /* A(RESTART WORK AREA) */
               2 ESTSSCR PTR(31),       /* CURRENT SSCR      @Y021131*/
               2 ESTAMB PTR(31),        /* CURRENT AMB       @Y021131*/
               2 ESTIOMB PTR(31),       /* CURRENT IOMB      @Y021131*/
               2 ESTRDATA PTR(31),     /* SAVE AREA FOR DATA REGISTER*/
               2 ESTRBASE PTR(31),    /* SAVE AREA FOR BASE REGISTER */
               2 ESTR14 PTR(31),        /* SAVE AREA FOR REG 14 */
 %IF IDAMODNM ^= 'I96C' %THEN %GOTO IDAESTX3;              /*@Y021131*/
               2 EST#SSCR FIXED(31);    /* NUMBER OF SSCRS CREATED */
 %GOTO IDAESTX9;                                           /*@Y021131*/
 %IDAESTX3:;                                               /*@Y021131*/
               2 EST#SSCR FIXED(31),    /* NUMBER OF SSCRS CREATED */
                 3 ESTBLNAM CHAR(4),    /* NAME OF LAST CONTROL BLOCK */
               2 ESTASCB PTR(31),       /* ADDRESS OF THE ASCB
                                        USED TO LOACATE THE VGTT
                                        STRING               @Y021131*/
               2 ESTGMLST PTR(31),      /* LAST AREA ACQUIRED IN SP245*/
               2 ESTGMLEN FIXED(31),    /* LENGTH OF AREA ACQUIRED */
               2 ESTVGTT PTR(31);       /* ADDRESS OF LAST VGTT ACQUIRED
                                                             @Y021131*/
 %IDAESTX9:;                                               /*@Y021131*/
         /* ERROR CODES                                      @Y021131*/
         DCL ESTAEBAD CONSTANT(240);    /* ESTAE FAILED TO BE INVOKED */
         DCL PGMCHKXX CONSTANT(241);    /* PROGRAM CHECK OCCURRED */
         DCL MCHCHKXX CONSTANT(242);    /* MACHINE CHECK OCCURRED */
         DCL BADSSCR CONSTANT(243);     /* SSCR FORMAT INVALID */
         DCL BADGETM CONSTANT(195);     /* GETMAIN FAILED    @Y021131*/
