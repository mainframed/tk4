         TITLE 'IEDRQIN, FID1 STATUS ANALYSIS                          *
                        '
IEDRQIN  CSECT ,                                                   0001
@PROLOG  DS    0H                                                  0002
*                                                            20860400
         DC    2F'0'                QCB
         DC    X'06'                STCB
         DC    AL3(*-1)
*
         USING *,RBASE
         LR    RBASE,R15            SET UP BASE REGISTER
         LA    RPARM,0(RPARM)       CLEAR HIGH-ORDER BYTE
*
IEDRQIN  IEDHJN  START
         EJECT
*                                                                  0493
*/********************************************************************/
*/*                                                                  */
*/*      M A I N   C O D E   S E G M E N T                           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0493
*   RLCB=RPARM;                     /* PLCB ADDRESS                  */
         LR    RLCB,RPARM                                          0493
*/*                                                                  */
*                                                                  0494
*   IF RLCB=SAVTSLCB THEN           /* IS THIS THE SSCP'S PLCB?      */
         L     @10,AVTSAVTP(,IEDQAPTR)                             0494
         C     RLCB,SAVTSLCB(,@10)                                 0494
         BNE   @RF00494                                            0494
*     CALL SSCP;                    /* YES, PROCESS SSCP-FLOW MSG    */
         BAL   @14,SSCP                                            0495
*   ELSE                            /* NOT SSCP FLOW                 */
*     DO;                                                          0496
         B     @RC00494                                            0496
@RF00494 DS    0H                                                  0497
*       RPARM=LCBTTCIN;             /* TNT OFFSET OF CONNECTED TERM  */
         LH    RPARM,LCBTTCIN(,IEDQLPTR)                           0497
         N     RPARM,@CF02325                                      0497
*       CALL IEDQTNT;               /* GET SOURCE TERMINAL TABLE   0498
*                                      ENTRY                         */
         L     @15,AVTRNMPT(,IEDQAPTR)                             0498
         BALR  @14,@15                                             0498
*       RTRM=RPARM;                 /* SET TERMINAL ADDRESSABILITY   */
         LR    RTRM,RPARM                                          0499
*       QCBPTR=TRMDESTQ;            /* QCB ADDRESSABILITY    @YM06867*/
         L     @10,TRMDESTQ-1(,IEDQTPTR)                           0500
         LA    @10,0(,@10)                                         0500
         ST    @10,QCBPTR                                          0500
*       SIBPTR=TRMSIBPT;            /* SIB ADDRESSABILITY            */
         LR    @10,IEDQTPTR                                        0501
         AL    @10,@CF02326                                        0501
         SLR   @09,@09                                             0501
         ICM   @09,7,TRMSIBPT-7(@10)                               0501
         ST    @09,SIBPTR                                          0501
*/*                                                                  */
*                                                                  0502
*       RPRF=LCBWAITC;              /* SET CURRENT ELEMENT TO 1ST PIU
*                                      BUFFER ON WAIT CHAIN          */
         L     RPRF,LCBWAITC-1(,IEDQLPTR)                          0502
         LA    RPRF,0(,RPRF)                                       0502
*       PREVELEM=ADDR(LCBWAITC)-(ADDR(PRFLINK)-ADDR(IEDQPRF));/*   0503
*                                      SETUP PREV ELEM PTR           */
         LA    @10,LCBWAITC(,IEDQLPTR)                             0503
         SL    @10,@CF00152                                        0503
         ST    @10,PREVELEM                                        0503
*       EXITSW=OFF;                 /* INITIALIZE EXIT SWITCH        */
         NI    EXITSW,B'01111111'                                  0504
*/*                                                                  */
*                                                                  0505
*       DO UNTIL(RPRF=0×EXITSW=ON); /* WAIT CHAIN PROCESSING LOOP    */
@DL00505 DS    0H                                                  0506
*         PIUPTR=ADDR(PRFPIUO)+PRFPIUO;/* PIU ADDRESSABILITY         */
         LA    PIUPTR,PRFPIUO(,IEDQPPTR)                           0506
         SLR   @10,@10                                             0506
         IC    @10,PRFPIUO(,IEDQPPTR)                              0506
         ALR   PIUPTR,@10                                          0506
*         IF LCBCHN=LCBBETC×        /* BETWEEN CHAIN STATE OR...     */
*             TTHEFI=OFF THEN       /* NORMAL FLOW                   */
         TM    LCBCHN(IEDQLPTR),B'11110000'                        0507
         BZ    @RT00507                                            0507
         TM    TTHEFI(PIUPTR),B'00000001'                          0507
         BNZ   @RF00507                                            0507
@RT00507 DS    0H                                                  0508
*           DO;                                                    0508
*             PREVELEM->PRFLINK=RPRF->PRFLINK;/* DELINK ELEMENT      */
         L     @10,PREVELEM                                        0509
         MVC   PRFLINK(3,@10),PRFLINK(RPRF)                        0509
*             CALL PROCELEM;        /* PROCESS THE ELEMENT           */
         BAL   @14,PROCELEM                                        0510
*             RPRF=PREVELEM->PRFLINK;/* GET NEXT ELEMENT             */
         L     @10,PREVELEM                                        0511
         L     RPRF,PRFLINK-1(,@10)                                0511
         LA    RPRF,0(,RPRF)                                       0511
*           END;                                                   0512
*         ELSE                      /* NOT BETWEEN CHAIN AND       0513
*                                      EXPEDITED                     */
*           DO;                                                    0513
         B     @RC00507                                            0513
@RF00507 DS    0H                                                  0514
*             PREVELEM=RPRF;        /* UPDATE PREVIOUS ELEMENT       */
         ST    RPRF,PREVELEM                                       0514
*             RPRF=RPRF->PRFLINK;   /* UPDATE CURRENT ELEMENT        */
         L     @10,PRFLINK-1(,RPRF)                                0515
         LA    @10,0(,@10)                                         0515
         LR    RPRF,@10                                            0515
*           END;                                                   0516
*       END;                        /* END OF LOOP                   */
@RC00507 DS    0H                                                  0517
@DE00505 LTR   RPRF,RPRF                                           0517
         BZ    @DC00505                                            0517
         TM    EXITSW,B'10000000'                                  0517
         BNO   @DL00505                                            0517
@DC00505 DS    0H                                                  0518
*     END;                                                         0518
*                                                                  0518
*/*                                                                  */
*                                                                  0519
*   CALL DSPDISP;                   /* EXIT TO DISPATCHER (NO RETURN)*/
@RC00494 LA    @15,DSPDISP(,RDISP)                                 0519
         BALR  @14,@15                                             0519
*/*                                                                  */
*/************   E N D   O F   M A I N    S E G M E N T   ************/
*                                                                  0520
*                                                                  0520
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE INTERFACES WITH THE BRACKET MANAGER IEDBSM.         */
*/*                                                                  */
*/********************************************************************/
*                                                                  0520
*BRACKMGR:                                                         0520
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0520
@EL00001 DS    0H                                                  0520
@EF00001 DS    0H                                                  0520
@ER00001 BR    @14                                                 0520
BRACKMGR DS    0H                                                  0521
*   R14SV17=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,R14SV17                                         0521
*/*                                                                  */
*                                                                  0522
*   PLBM=''B;                       /* INIT PARM LIST TO 0           */
         XC    PLBM(16),PLBM                                       0522
*   PLBMRH=IEDRH;                   /* MOVE RH TO PARM LIST          */
         LA    @10,PLBM                                            0523
         MVC   PLBMRH(3,@10),IEDRH+10(PIUPTR)                      0523
*   PLBMCMD=CMDBYTE;                /* PUT COMMAND BYTE IN PARM LIST */
         MVC   PLBMCMD(1,@10),CMDBYTE                              0524
*   PLBMSIB=SIBPTR;                 /* SIB ADDRESS TO PARM LIST      */
         L     @09,SIBPTR                                          0525
         ST    @09,PLBMSIB(,@10)                                   0525
*   PLBMLCB=RLCB;                   /* LCB ADDRESS TO PARM LIST      */
         ST    RLCB,PLBMLCB(,@10)                                  0526
*/*                                                                  */
*                                                                  0527
*   IF LCBCHN=LCBPURG THEN          /* IN 'PURGING CHAIN' STATE      */
         TM    LCBCHN(IEDQLPTR),B'00100000'                        0527
         BNO   @RF00527                                            0527
         TM    LCBCHN(IEDQLPTR),B'11010000'                        0527
         BNZ   @RF00527                                            0527
*     DO;                           /* YES                           */
*       CALL CHAINMGR;              /* DO CHAIN STATE MANAGEMENT     */
         BAL   @14,CHAINMGR                                        0529
*       PLBMSTAT=PLBMPURG;          /* SET 'PURG' INDICATOR IN PARM
*                                      LIST                          */
         LA    @10,PLBM                                            0530
         NI    PLBMSTAT(@10),B'10111111'                           0530
         OI    PLBMSTAT(@10),B'00100000'                           0530
*       RPARM=ADDR(PLBM);           /* ADDRESS OF PARM LIST          */
         LR    RPARM,@10                                           0531
*       CALL IEDBSM;                /* DO BRACKET STATE MANAGEMENT   */
         L     @10,AVTSAVTP(,IEDQAPTR)                             0532
         L     @15,SAVTBSM(,@10)                                   0532
         BALR  @14,@15                                             0532
*     END;                                                         0533
*   ELSE                            /* NOT IN 'PURGING CHAIN' STATE  */
*     DO;                                                          0534
         B     @RC00527                                            0534
@RF00527 DS    0H                                                  0535
*       CALL STATUS;                /* DO FORMAT CHECKS              */
         BAL   @14,STATUS                                          0535
*       CALL CHAINMGR;              /* DO CHAIN STATE MANAGEMENT     */
         BAL   @14,CHAINMGR                                        0536
*/*                                                                  */
*                                                                  0537
*       IF ERRORSW=ON THEN          /* HAS ERROR BEEN DETECTED       */
         TM    ERRORSW,B'01000000'                                 0537
         BNO   @RF00537                                            0537
*         DO;                       /* YES                           */
*           PLBMSTAT=PLBMERR;       /* SET 'ERROR' INDICATOR IN PARM
*                                      LIST                          */
         LA    @10,PLBM                                            0539
         OI    PLBMSTAT(@10),B'01100000'                           0539
*           RPARM=ADDR(PLBM);       /* ADDRESS OF PARM LIST          */
         LR    RPARM,@10                                           0540
*           CALL IEDBSM;            /* DO BRACKET STATE MANAGEMENT   */
         L     @10,AVTSAVTP(,IEDQAPTR)                             0541
         L     @15,SAVTBSM(,@10)                                   0541
         BALR  @14,@15                                             0541
*         END;                                                     0542
*       ELSE                        /* NO ERROR DETECTED             */
*         DO;                                                      0543
         B     @RC00537                                            0543
@RF00537 DS    0H                                                  0544
*           RPARM=ADDR(PLBM);       /* ADDRESS OF PARM LIST          */
         LA    RPARM,PLBM                                          0544
*           CALL IEDBSM;            /* DO BRACKET STATE MANAGEMENT   */
         L     @10,AVTSAVTP(,IEDQAPTR)                             0545
         L     @15,SAVTBSM(,@10)                                   0545
         BALR  @14,@15                                             0545
*           IF R15^=0 THEN          /* ERROR DETECTED BY BRACKET   0546
*                                      MANAGER                       */
         LTR   R15,R15                                             0546
         BZ    @RF00546                                            0546
*             DO;                   /* YES                           */
*               SNC(1:2)=PLBMSNC;   /* SENSE INDICATING TYPE OF ERROR
*                                      FOUND BY BRACKET MANAGER      */
         LA    @10,PLBM                                            0548
         MVC   SNC(2),PLBMSNC(@10)                                 0548
*               SNC(3:4)=''B;       /* ZERO USER SENSE       @YM08485*/
         XC    SNC+2(2),SNC+2                                      0549
*               CALL SETERSNS;      /* SET UP ERROR INFORMATION      */
         BAL   @14,SETERSNS                                        0550
*               IF LCBCHN=LCBINC THEN/* IN 'IN CHAIN' STATE          */
         TM    LCBCHN(IEDQLPTR),B'00010000'                        0551
         BNO   @RF00551                                            0551
         TM    LCBCHN(IEDQLPTR),B'11100000'                        0551
         BNZ   @RF00551                                            0551
*                 LCBCHN=LCBPURG;   /* YES, GO TO 'PURGING CHAIN'  0552
*                                      STATE                         */
         NI    LCBCHN(IEDQLPTR),B'00101111'                        0552
         OI    LCBCHN(IEDQLPTR),B'00100000'                        0552
*             END;                                                 0553
@RF00551 DS    0H                                                  0554
*         END;                                                     0554
@RF00546 DS    0H                                                  0555
*     END;                                                         0555
*                                                                  0555
@RC00537 DS    0H                                                  0556
*/*                                                                  */
*                                                                  0556
*   R14=R14SV17;                    /* RESTORE RETURN ADDRESS        */
@RC00527 L     R14,R14SV17                                         0556
*   RETURN;                         /* RETURN TO CALLER              */
@EL00002 DS    0H                                                  0557
@EF00002 DS    0H                                                  0557
@ER00002 BR    @14                                                 0557
*   END BRACKMGR;                                                  0558
*                                                                  0559
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE DOES THE FOLLOWING:                                 */
*/*      1. MERGES THE CANCEL RH INTO THE SAVED PIU'S RH             */
*/*      2. DISCARDS THE CANCEL PIU BUFFER                           */
*/*      3. CAUSES THE SAVED PIU BUFFER TO BE PASSED TO THE MH       */
*/*                                                                  */
*/********************************************************************/
*                                                                  0559
*CANMERGE:                                                         0559
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0559
CANMERGE DS    0H                                                  0560
*   R14SV01=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,R14SV01                                         0560
*/*                                                                  */
*                                                                  0561
*   SVRH->IEDRH=SVRH->IEDRH&SMASKCAN;/* MASK OFF SAVED RH BITS       */
         NC    IEDRH(3,SVRH),@CB02149                              0561
*   IEDRH=IEDRH&IMASKCAN;           /* MASK OFF CANCEL RH BITS       */
         LA    @05,10                                              0562
         ALR   @05,PIUPTR                                          0562
         NC    IEDRH(3,@05),@CB02153                               0562
*   SVRH->IEDRH=SVRH->IEDRH×IEDRH;  /* 'OR' CANCEL RH INTO SAVED RH  */
         OC    IEDRH(3,SVRH),IEDRH(@05)                            0563
*   SVRH->TRHEC=ON;                 /* FORCE END OF CHAIN            */
         OI    TRHEC(SVRH),B'00000001'                             0564
*/*                                                                  */
*                                                                  0565
*   SVTH->TTHSNF=TTHSNF;            /* ASSIGN CANCEL SEQ # TO SAVED
*                                      PIU                           */
         MVC   TTHSNF(2,SVTH),TTHSNF(PIUPTR)                       0565
*   RPARM=RPRF;                     /* ADDR OF CANCEL PIU BUFFER     */
         LR    RPARM,RPRF                                          0566
*   CALL DISCARD;                   /* DISCARD CANCEL PIU BUFFER     */
         BAL   @14,DISCARD                                         0567
*/*                                                                  */
*                                                                  0568
*   RPARM=LCBPAKCH;                 /* ADDR OF SAVED PIU BUFFER      */
         L     RPARM,LCBPAKCH-1(,IEDQLPTR)                         0568
         LA    RPARM,0(,RPARM)                                     0568
*   LCBPAKCH=0;                     /* SET SAVED PTR TO 0            */
         SLR   @10,@10                                             0569
         STCM  @10,7,LCBPAKCH(IEDQLPTR)                            0569
*   CMDBYTE=0;                      /* INDICATE THIS IS NOT A CANCEL */
         MVI   CMDBYTE,X'00'                                       0570
*   CALL POSTMH;                    /* POST SAVED PIU BUFFER TO MH   */
         BAL   @14,POSTMH                                          0571
*/*                                                                  */
*                                                                  0572
*   R14=R14SV01;                    /* RESTORE RETURN ADDRESS        */
         L     R14,R14SV01                                         0572
*   RETURN;                         /* RETURN TO CALLER              */
@EL00003 DS    0H                                                  0573
@EF00003 DS    0H                                                  0573
@ER00003 BR    @14                                                 0573
*   END CANMERGE;                                                  0574
*                                                                  0575
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE PERFORMS THE CHAIN MANAGEMENT FUNCTION.             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0575
*CHAINMGR:                                                         0575
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0575
CHAINMGR DS    0H                                                  0576
*   R14SV02=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,R14SV02                                         0576
*/*                                                                  */
*                                                                  0577
*   IF ERRORSW=ON THEN              /* HAS ERROR BEEN DECTECTED ON 0577
*                                      THIS PIU                      */
         TM    ERRORSW,B'01000000'                                 0577
         BNO   @RF00577                                            0577
*     DO;                           /* YES                           */
*       IF TRHEC=ON THEN            /* END OF CHAIN                  */
         TM    TRHEC+10(PIUPTR),B'00000001'                        0579
         BNO   @RF00579                                            0579
*         LCBCHN=LCBBETC;           /* YES-GO TO BETWEEN CHAIN STATE */
         NI    LCBCHN(IEDQLPTR),B'00001111'                        0580
*       ELSE                        /* NOT END OF CHAIN              */
*         LCBCHN=LCBPURG;           /* GO TO PURGING CHAIN STATE     */
         B     @RC00579                                            0581
@RF00579 NI    LCBCHN(IEDQLPTR),B'00101111'                        0581
         OI    LCBCHN(IEDQLPTR),B'00100000'                        0581
*     END;                                                         0582
*   ELSE                            /* NO ERROR DETECTED ON THIS PIU */
*     DO;                                                          0583
         B     @RC00577                                            0583
@RF00577 DS    0H                                                  0584
*       IF LCBCHN=LCBBETC THEN      /* BETWEEN CHAIN STATE           */
         TM    LCBCHN(IEDQLPTR),B'11110000'                        0584
         BNZ   @RF00584                                            0584
*         DO;                       /* YES                           */
*           IF CMDBYTE=CD1CANCL THEN/* CANCEL PIU                    */
         CLI   CMDBYTE,X'83'                                       0586
         BNE   @RF00586                                            0586
*             DO;                   /* YES                           */
*               SNC=SNSFNS;         /* SET 'FUNCTION NOT SUPPORTED'
*                                      SENSE                         */
         MVC   SNC(4),@CB02155                                     0588
*               CALL SETERSNS;      /* SET UP ERROR INFORMATION      */
         BAL   @14,SETERSNS                                        0589
*             END;                                                 0590
*           ELSE                    /* NOT CANCEL PIU                */
*             DO;                                                  0591
         B     @RC00586                                            0591
@RF00586 DS    0H                                                  0592
*               IF TRHBC=ON THEN    /* BEGINNING OF CHAIN            */
         LA    @10,10                                              0592
         ALR   @10,PIUPTR                                          0592
         TM    TRHBC(@10),B'00000010'                              0592
         BNO   @RF00592                                            0592
*                 DO;               /* YES                           */
*                   IF TRHEC=ON THEN/* END OF CHAIN                  */
         TM    TRHEC(@10),B'00000001'                              0594
         BNO   @RF00594                                            0594
*                     DO;           /* YES                           */
*                       IF TRHRUCAT=TRHDFC THEN/* DATA FLOW CONTROL  */
         TM    TRHRUCAT(@10),B'01000000'                           0596
         BNO   @RF00596                                            0596
         TM    TRHRUCAT(@10),B'00100000'                           0596
         BNZ   @RF00596                                            0596
*                         CALL NORMDFC;/* YES-PROCESS NORMAL DFC     */
         BAL   @14,NORMDFC                                         0597
*                     END;                                         0598
*                   ELSE            /* NOT END OF CHAIN              */
*                     LCBCHN=LCBINC;/* GO TO IN CHAIN STATE          */
         B     @RC00594                                            0599
@RF00594 NI    LCBCHN(IEDQLPTR),B'00011111'                        0599
         OI    LCBCHN(IEDQLPTR),B'00010000'                        0599
*                 END;                                             0600
*               ELSE                /* NOT BEGINNING OF CHAIN        */
*                 DO;                                              0601
         B     @RC00592                                            0601
@RF00592 DS    0H                                                  0602
*                   IF TRHEC=OFF THEN/* NOT END OF CHAIN             */
         TM    TRHEC+10(PIUPTR),B'00000001'                        0602
         BNZ   @RF00602                                            0602
*                     LCBCHN=LCBPURG;/* YES-GO TO PURGING CHAIN STA
*                                      TE                            */
         NI    LCBCHN(IEDQLPTR),B'00101111'                        0603
         OI    LCBCHN(IEDQLPTR),B'00100000'                        0603
*                   SNC=SNSCHNER;   /* SET 'CHAINING ERROR' SENSE    */
@RF00602 MVC   SNC(4),@CB02157                                     0604
*                   CALL SETERSNS;  /* SET ERROR INFORMATION         */
         BAL   @14,SETERSNS                                        0605
*                 END;                                             0606
*             END;                                                 0607
*         END;                                                     0608
*       ELSE                        /* NOT BETWEEN CHAIN STATE       */
*         DO;                                                      0609
         B     @RC00584                                            0609
@RF00584 DS    0H                                                  0610
*           IF LCBCHN=LCBINC THEN   /* IN CHAIN STATE                */
         TM    LCBCHN(IEDQLPTR),B'00010000'                        0610
         BNO   @RF00610                                            0610
         TM    LCBCHN(IEDQLPTR),B'11100000'                        0610
         BNZ   @RF00610                                            0610
*             DO;                   /* YES                           */
*               IF CMDBYTE=CD1CANCL THEN/* CANCEL PIU                */
         CLI   CMDBYTE,X'83'                                       0612
         BNE   @RF00612                                            0612
*                 DO;               /* YES                           */
*                   LCBCHN=LCBBETC; /* GO TO BETWEEN CHAIN STATE     */
         NI    LCBCHN(IEDQLPTR),B'00001111'                        0614
*                   SCBTXTTN=ON;    /* SET TEXT ERROR                */
         L     @10,IEDQSPTR-1(,IEDQLPTR)                           0615
         OI    SCBTXTTN(@10),B'01000000'                           0615
*/*                 SET INFORMATION FOR CANCEL RESPONSE              */
*                                                                  0616
*                   LCBCANXT=ON;    /* SET NEED CANCEL RESPONSE FLAG */
         OI    LCBCANXT(IEDQLPTR),B'10000000'                      0616
*                   LCBCANTH=TTHSNF;/* SET CANCEL SEQUENCE #         */
         MVC   LCBCANTH(2,IEDQLPTR),TTHSNF(PIUPTR)                 0617
*                 END;                                             0618
*               ELSE                /* NOT CANCEL PIU                */
*                 DO;                                              0619
         B     @RC00612                                            0619
@RF00612 DS    0H                                                  0620
*                   IF TRHEC=ON THEN/* END OF CHAIN                  */
         LA    @10,10                                              0620
         ALR   @10,PIUPTR                                          0620
         TM    TRHEC(@10),B'00000001'                              0620
         BNO   @RF00620                                            0620
*                     DO;           /* YES                           */
*                       LCBCHN=LCBBETC;/* GO TO BETWEEN CHAIN STATE  */
         NI    LCBCHN(IEDQLPTR),B'00001111'                        0622
*                       IF TRHBC=ON THEN/* BEGINNING OF CHAIN        */
         TM    TRHBC(@10),B'00000010'                              0623
         BNO   @RF00623                                            0623
*                         DO;       /* YES                           */
*                           SNC=SNSCHNER;/* 'CHAIN ERROR' SENSE      */
         MVC   SNC(4),@CB02157                                     0625
*                           CALL SETERSNS;/* SET ERROR INFORMATION   */
         BAL   @14,SETERSNS                                        0626
*                         END;                                     0627
*                     END;                                         0628
*                   ELSE            /* NOT END OF CHAIN              */
*                     DO;                                          0629
         B     @RC00620                                            0629
@RF00620 DS    0H                                                  0630
*                       IF TRHBC=ON THEN/* BEGINNING OF CHAIN        */
         TM    TRHBC+10(PIUPTR),B'00000010'                        0630
         BNO   @RF00630                                            0630
*                         DO;       /* YES                           */
*                           LCBCHN=LCBPURG;/* GO TO PURGING CHAIN  0632
*                                      STATE                         */
         NI    LCBCHN(IEDQLPTR),B'00101111'                        0632
         OI    LCBCHN(IEDQLPTR),B'00100000'                        0632
*                           SNC=SNSCHNER;/* 'CHAIN ERROR' SENSE      */
         MVC   SNC(4),@CB02157                                     0633
*                           CALL SETERSNS;/* SET ERROR INFORMATION   */
         BAL   @14,SETERSNS                                        0634
*                         END;                                     0635
*                     END;                                         0636
*                 END;                                             0637
*             END;                                                 0638
*           ELSE                    /* PURGING CHAIN STATE           */
*             DO;                                                  0639
         B     @RC00610                                            0639
@RF00610 DS    0H                                                  0640
*               IF CMDBYTE=CD1CANCL THEN/* CANCEL PIU                */
         CLI   CMDBYTE,X'83'                                       0640
         BNE   @RF00640                                            0640
*                 DO;               /* YES                           */
*                   LCBCHN=LCBBETC; /* GO TO BETWEEN CHAIN STATE     */
         NI    LCBCHN(IEDQLPTR),B'00001111'                        0642
*/*                 SET INFO FOR CANCEL RESPONSE                     */
*                                                                  0643
*                   LCBCANXT=ON;    /* SET CANCEL RESPONSE NEEDED  0643
*                                      FLAG                          */
         OI    LCBCANXT(IEDQLPTR),B'10000000'                      0643
*                   LCBCANTH=TTHSNF;/* SET CANCEL SEQUENCE #         */
         MVC   LCBCANTH(2,IEDQLPTR),TTHSNF(PIUPTR)                 0644
*                 END;                                             0645
*               ELSE                /* NOT CANCEL PIU                */
*                 DO;                                              0646
         B     @RC00640                                            0646
@RF00640 DS    0H                                                  0647
*                   IF TRHEC=ON THEN/* END OF CHAIN                  */
         TM    TRHEC+10(PIUPTR),B'00000001'                        0647
         BNO   @RF00647                                            0647
*                     LCBCHN=LCBBETC;/* GO TO BETWEEN CHAIN STATE    */
         NI    LCBCHN(IEDQLPTR),B'00001111'                        0648
*                 END;                                             0649
@RF00647 DS    0H                                                  0650
*             END;                                                 0650
@RC00640 DS    0H                                                  0651
*         END;                                                     0651
@RC00610 DS    0H                                                  0652
*     END;                                                         0652
*                                                                  0652
@RC00584 DS    0H                                                  0653
*/*                                                                  */
*                                                                  0653
*   IF TRHEC=ON&                    /* END CHAIN AND...      @Y17XAYO*/
*       SIBFMODE=SIBHDXFF&          /* HALF DUPLEX MODE            0653
*                                      AND...@Y17XAYO                */
*       TRHCDI=ON THEN              /* CHANGE DIRECTION      @Y17XAYO*/
@RC00577 LA    @10,10                                              0653
         ALR   @10,PIUPTR                                          0653
         TM    TRHEC(@10),B'00000001'                              0653
         BNO   @RF00653                                            0653
         L     @09,SIBPTR                                          0653
         TM    SIBFMODE(@09),B'10000000'                           0653
         BNO   @RF00653                                            0653
         TM    SIBFMODE(@09),B'01000000'                           0653
         BNZ   @RF00653                                            0653
         TM    TRHCDI(@10),B'00100000'                             0653
         BNO   @RF00653                                            0653
*     SIBCD=ON;                     /* MAINTAIN CHANGE DIRECTION   0654
*                                      STATE                 @Y17XAYO*/
         OI    SIBCD(@09),B'10000000'                              0654
*/*                                                                  */
*                                                                  0655
*   R14=R14SV02;                    /* RESTORE RETURN ADDRESS        */
@RF00653 L     R14,R14SV02                                         0655
*   RETURN;                         /* RETURN TO CALLER              */
@EL00004 DS    0H                                                  0656
@EF00004 DS    0H                                                  0656
@ER00004 BR    @14                                                 0656
*   END CHAINMGR;                                                  0657
         EJECT
*                                                                  0658
*/********************************************************************/
*/*                                                                  */
*/*      C H E C K N X   SUBROUTINE                                  */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*      THIS SUBROUTINE DETECTS THOSE REQUESTS WHICH REQUIRE        */
*/*      THE ISSUING OF AN OPERATOR AWARENESS MESSAGE BY IEDQNX.     */
*/*      IF ONE OF THESE COMMAND TYPES IS DETECTED, THE REQUEST      */
*/*      CODE IS MOVED INTO THE PLCB, AND THE LCBERMSG BIT IS SET    */
*/*      TO CAUSE IEDQBD TO BRANCH-&-LINK TO IEDQNX.                 */
*/*                                                                  */
*/*      THE REQUEST TYPES REQUIRING THIS IEDQNX INTERFACE ARE       */
*/*      ANS-COMPLETE, INOP, AND RECORD-TRACE-DATA.                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0658
*   RFY                                                            0658
*     IEDRH BASED(ADDR(PRF1RH));                                   0658
*CHECKNX:                                                          0659
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0659
*                                                                  0659
CHECKNX  DS    0H                                                  0660
*/*                                                                  */
*                                                                  0660
*   R14SV16=R14;                    /* SAVE RETURN REG       @YM05996*/
         ST    R14,R14SV16                                         0660
*   IF TRHSDI=ON THEN               /* SENSE DATA INCLUDED?          */
         LR    @10,IEDQPPTR                                        0661
         AL    @10,@CF02338                                        0661
         TM    TRHSDI(@10),B'00000100'                             0661
         BNO   @RF00661                                            0661
*     DO;                           /* YES, ADJUST ADDRESS & LENGTH  */
*       DATAPTR=DATAPTR+LENGTH(IEDSNSD);                           0663
         LA    @10,4                                               0663
         ALR   DATAPTR,@10                                         0663
*       DATALNTH=DATALNTH-LENGTH(IEDSNSD);                         0664
         LCR   @10,@10                                             0664
         AH    @10,DATALNTH                                        0664
         STH   @10,DATALNTH                                        0664
*     END;                                                         0665
*                                                                  0665
*/*                                                                  */
*                                                                  0666
*   LCBNXCMD=0;                     /* CLEAR IEDQNX CMD-TYPE FIELD   */
@RF00661 SLR   @10,@10                                             0666
         STCM  @10,7,LCBNXCMD(IEDQLPTR)                            0666
*   LCBLNENT=0;                     /* CLEAR IEDQNX RESRCE TNT FIELD */
         STH   @10,LCBLNENT(,IEDQLPTR)                             0667
*/*                                                                  */
*                                                                  0668
*   IF TRHRUCAT=TRHNC&              /* NETWORK CONTROL RU? AND       */
*       DATALNTH>0&                 /* ... IS THIS AN AUTO-NETWORK-  */
*       DATAPTR->CHAR1=CD1ANSC THEN /* ... SHUTDOWN-COMPLETE RU?     */
         LR    @07,IEDQPPTR                                        0668
         AL    @07,@CF02338                                        0668
         TM    TRHRUCAT(@07),B'00100000'                           0668
         BNO   @RF00668                                            0668
         TM    TRHRUCAT(@07),B'01000000'                           0668
         BNZ   @RF00668                                            0668
         CH    @10,DATALNTH                                        0668
         BNL   @RF00668                                            0668
         CLI   CHAR1(DATAPTR),X'07'                                0668
         BNE   @RF00668                                            0668
*     LCBNXCMD(1:1)=DATAPTR->CHAR1; /* YES, MOVE IN REQUEST CODE     */
         MVC   LCBNXCMD(1,IEDQLPTR),CHAR1(DATAPTR)                 0669
*/*                                                                  */
*                                                                  0670
*   ELSE                                                           0670
*     IF TRHRUCAT=TRHFMD&           /* FM DATA RU? AND               */
*         TRHFI=ON&                 /* ... FORMATTED? AND            */
*         DATALNTH>2&               /* ... IS THIS AN INOP OR A      */
*         (DATAPTR->CHAR3=INOP×     /* ... RECORD-TRACE-DATA OR A    */
*         DATAPTR->CHAR3=TRACDATA×  /* ... ENTERING SLOWDOWN OR A  0670
*                                                            @YM07042*/
*         DATAPTR->CHAR3=ENTSLO×    /* ... EXITING SLOWDOWN RU?    0670
*                                                            @YM07042*/
*         DATAPTR->CHAR3=EXTSLO) THEN/*                      @YM07042*/
         B     @RC00668                                            0670
@RF00668 LR    @10,IEDQPPTR                                        0670
         SL    @10,@CF00044                                        0670
         TM    TRHRUCAT(@10),B'01100000'                           0670
         BNZ   @RF00670                                            0670
         TM    TRHFI(@10),B'00001000'                              0670
         BNO   @RF00670                                            0670
         LH    @10,DATALNTH                                        0670
         C     @10,@CF00126                                        0670
         BNH   @RF00670                                            0670
         CLC   CHAR3(3,DATAPTR),INOP                               0670
         BE    @RT00670                                            0670
         CLC   CHAR3(3,DATAPTR),TRACDATA                           0670
         BE    @RT00670                                            0670
         CLC   CHAR3(3,DATAPTR),ENTSLO                             0670
         BE    @RT00670                                            0670
         CLC   CHAR3(3,DATAPTR),EXTSLO                             0670
         BNE   @RF00670                                            0670
@RT00670 DS    0H                                                  0671
*       DO;                         /* YES                           */
*         LCBNXCMD=DATAPTR->CHAR3;  /* MOVE IN REQUEST CODE          */
         MVC   LCBNXCMD(3,IEDQLPTR),CHAR3(DATAPTR)                 0672
*         RPARM=DATAPTR->SSCPNA;    /* GET NETWORK ADDRESS           */
         SLR   RPARM,RPARM                                         0673
         ICM   RPARM,3,SSCPNA(DATAPTR)                             0673
*         CALL IEDIAP03;            /* CONVERT IT TO A TNT INDEX     */
         L     @10,AVTSAVTP(,IEDQAPTR)                             0674
         L     @15,SAVTNAX(,@10)                                   0674
         BALR  @14,@15                                             0674
*         LCBLNENT=R15;             /* SAVE TNT INDEX FOR IEDQNX     */
         STH   R15,LCBLNENT(,IEDQLPTR)                             0675
*       END;                                                       0676
*                                                                  0676
*/*                                                                  */
*                                                                  0677
*   IF LCBNXCMD^=0 THEN             /* INTERFACE NEEDED TO IEDQNX?   */
@RF00670 DS    0H                                                  0677
@RC00668 L     @10,LCBNXCMD-1(,IEDQLPTR)                           0677
         LA    @10,0(,@10)                                         0677
         LTR   @10,@10                                             0677
         BZ    @RF00677                                            0677
*     LCBERMSG=ON;                  /* YES, SET OP AWARENESS MSG BIT */
         OI    LCBERMSG(IEDQLPTR),B'00100000'                      0678
*/*                                                                  */
*                                                                  0679
*   R14=R14SV16;                    /* RESTORE RETURN REG    @YM05996*/
@RF00677 L     R14,R14SV16                                         0679
*   END CHECKNX;                    /* RETURN TO CALLER              */
@EL00005 DS    0H                                                  0680
@EF00005 DS    0H                                                  0680
@ER00005 BR    @14                                                 0680
*   RFY                                                            0681
*     IEDRH BASED(ADDR(PIURH));                                    0681
         EJECT
*                                                                  0682
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE PACKS DATA. IT COMBINES THE DATA IN THE INPUT PIU   */
*/*   BUFFER WITH THE DATA IN THE PACKED PIU BUFFER. IT INTERFACES   */
*/*   TO IEDMVBFR TO MOVE THE DATA.                                  */
*/*                                                                  */
*/********************************************************************/
*                                                                  0682
*COMBINE:                                                          0682
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0682
COMBINE  DS    0H                                                  0683
*   R14SV03=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,R14SV03                                         0683
*/*                                                                  */
*                                                                  0684
*   UNITPTR=LCBPAKCH;               /* 1ST UNIT OF PACKED PIU BUFFER */
         L     UNITPTR,LCBPAKCH-1(,IEDQLPTR)                       0684
         LA    UNITPTR,0(,UNITPTR)                                 0684
*   DO WHILE(UNITPTR->PRFTIC^=INVALTIC);/* FIND LAST UNIT OF PACKED
*                                      PIU BUFFER                    */
         B     @DE00685                                            0685
@DL00685 DS    0H                                                  0686
*     UNITPTR=UNITPTR->PRFTIC;      /* GET NEXT UNIT                 */
         L     UNITPTR,PRFTIC(,UNITPTR)                            0686
*   END;                            /* END OF LOOP                   */
@DE00685 CLC   PRFTIC(4,UNITPTR),@CB01336                          0687
         BNE   @DL00685                                            0687
*   UNITPTR->PRFTI0=RPRF;           /* CHAIN THE 1ST UNIT OF THE   0688
*                                      CURRENT PIU BUFFER TO THE LAST
*                                      UNIT OF THE PACKED PIU BUFFER */
         STCM  RPRF,7,PRFTI0(UNITPTR)                              0688
*/* CALCULATE HOW MUCH ROOM IS LEFT IN LAST UNIT OF PACKED PIU BUFFER*/
*                                                                  0689
*   REM=(SVTH->TTHDCF+LENGTH(IEDTH)+LCBPAKCH->PRFPIUO)//AVTKEYLE;  0689
         LA    @05,10                                              0689
         SLR   @00,@00                                             0689
         ICM   @00,3,TTHDCF(SVTH)                                  0689
         ALR   @05,@00                                             0689
         L     @03,LCBPAKCH-1(,IEDQLPTR)                           0689
         SLR   @00,@00                                             0689
         IC    @00,PRFPIUO(,@03)                                   0689
         ALR   @05,@00                                             0689
         LR    @02,@05                                             0689
         SRDA  @02,32                                              0689
         LH    @05,AVTKEYLE(,IEDQAPTR)                             0689
         DR    @02,@05                                             0689
         STH   @02,REM                                             0689
*   IF REM=0 THEN                   /* NO ROOM IN LAST UNIT          */
         LTR   @02,@02                                             0690
         BNZ   @RF00690                                            0690
*     DO;                           /* YES                           */
*       PLMVTU=RPRF;                /* SET TARGET UNIT = 1ST UNIT OF
*                                      CURRENT PIU BUFFER            */
         LA    @09,PLMV                                            0692
         ST    RPRF,PLMVTU(,@09)                                   0692
*       PLMVTD=ADDR(RPRF->PRFPIUO); /* SET TARGET DATA ADDR = 1ST  0693
*                                      BYTE IN CURRENT PIU BUFFER    */
         LA    @05,PRFPIUO(,RPRF)                                  0693
         ST    @05,PLMVTD(,@09)                                    0693
*     END;                                                         0694
*   ELSE                            /* ROOM LEFT IN LAST UNIT        */
*     DO;                                                          0695
         B     @RC00690                                            0695
@RF00690 DS    0H                                                  0696
*       PLMVTU=UNITPTR;             /* SET TARGET UNIT=LAST UNIT IN
*                                      PACKED PIU BUFFER             */
         LA    @05,PLMV                                            0696
         ST    UNITPTR,PLMVTU(,@05)                                0696
*       PLMVTD=ADDR(UNITPTR->PRFPIUO)+REM;/* SET TARGET DATA ADDR(IN
*                                      LAST UNIT OF PACKED PIU BUFFER*/
         LA    @00,PRFPIUO(,UNITPTR)                               0697
         LH    @03,REM                                             0697
         N     @03,@CF02325                                        0697
         ALR   @00,@03                                             0697
         ST    @00,PLMVTD(,@05)                                    0697
*     END;                                                         0698
*                                                                  0698
*/*                                                                  */
*                                                                  0699
*   PLMVSU=RPRF;                    /* SET SOURCE UNIT=1ST UNIT OF 0699
*                                      CURRENT PIU BUFFER            */
@RC00690 LA    @09,PLMV                                            0699
         ST    RPRF,PLMVSU(,@09)                                   0699
*   PLMVSD=ADDR(RU);                /* SET SOURCE DATA=RU IN 1ST UNIT
*                                      OF CURRENT PIU BUFFER         */
         LA    @05,13                                              0700
         ALR   @05,PIUPTR                                          0700
         ST    @05,PLMVSD(,@09)                                    0700
*   PLMVLNTH=TTHDCF-LENGTH(IEDRH);  /* SET LENGTH OF DATA TO BE MOVED*/
         SLR   @05,@05                                             0701
         ICM   @05,3,TTHDCF(PIUPTR)                                0701
         SL    @05,@CF00065                                        0701
         STH   @05,PLMVLNTH(,@09)                                  0701
*   SVTH->TTHDCF=SVTH->TTHDCF+PLMVLNTH;/* SET NEW LENGTH OF PACKED 0702
*                                      PIU BUFFER                    */
         SLR   @00,@00                                             0702
         ICM   @00,3,TTHDCF(SVTH)                                  0702
         ALR   @05,@00                                             0702
         STCM  @05,3,TTHDCF(SVTH)                                  0702
*   SVTH->TTHSNF=TTHSNF;            /* SET PACKED PIU SEQ # = CURRENT
*                                      PIU SEQ #                     */
         MVC   TTHSNF(2,SVTH),TTHSNF(PIUPTR)                       0703
*   PLMVFLG1=0;                     /* ZERO FLAG BYTE                */
         MVI   PLMVFLG1(@09),X'00'                                 0704
*   PLMVUNCF=ON;                    /* INDICATE UNUSED UNITS SHOULD
*                                      BE UNCHAINED                  */
         OI    PLMVUNCF(@09),B'10000000'                           0705
*   RPARM=ADDR(PLMV);               /* ADDRESS OF PARM LIST          */
         LR    RPARM,@09                                           0706
*   CALL IEDMVBFR;                  /* MOVE THE DATA                 */
         L     @10,AVTSAVTP(,IEDQAPTR)                             0707
         L     @15,SAVTMVBF(,@10)                                  0707
         BALR  @14,@15                                             0707
*/*                                                                  */
*                                                                  0708
*   IF PLMVUNCA>0 THEN              /* ARE THERE UNCHAINED UNITS TO
*                                      BE FREED                      */
         LA    @10,PLMV                                            0708
         L     @10,PLMVUNCA(,@10)                                  0708
         LTR   @10,@10                                             0708
         BNP   @RF00708                                            0708
*     DO;                           /* YES                           */
*       RPARM=PLMVUNCA;             /* ADDRESS OF FIRST UNIT TO BE 0710
*                                      FREED                         */
         LR    RPARM,@10                                           0710
*       CALL DISCARD;               /* DISCARD UNITS                 */
         BAL   @14,DISCARD                                         0711
*     END;                                                         0712
*                                                                  0712
*/*                                                                  */
*                                                                  0713
*   R14=R14SV03;                    /* RESTORE RETURN ADDRESS        */
@RF00708 L     R14,R14SV03                                         0713
*   RETURN;                         /* RETURN TO CALLER              */
@EL00006 DS    0H                                                  0714
@EF00006 DS    0H                                                  0714
@ER00006 BR    @14                                                 0714
*   END COMBINE;                                                   0715
*                                                                  0716
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE DISCARDS ALL THE UNITS IN A PIU BUFFER.  IT POSTS   */
*/* THEM TO BUF  RETURN(IEDQGB).                                     */
*/*       INPUT= REG1 POINTS TO PIU BUFFER TO BE DISCARDED           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0716
*DISCARD:                                                          0716
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0716
DISCARD  DS    0H                                                  0717
*   R14SV04=R14;                    /* SAVE RETURN REG               */
         ST    R14,R14SV04                                         0717
*/*                                                                  */
*                                                                  0718
*   RPARM->PRFNBUNT=0;              /* SET NUMBER OF UNITS = 0 (THIS
*                                      MEANS IEDQGB WILL CALCULATE 0718
*                                      THE NUMBER OF UNITS TO BE   0718
*                                      FREED)                        */
         MVI   PRFNBUNT(RPARM),X'00'                               0718
*   RPARM->PRFQCBA=ADDR(AVTBFRTB);  /* ADDR OF BUFFER RETURN QCB     */
         LA    @10,AVTBFRTB(,IEDQAPTR)                             0719
         STCM  @10,7,PRFQCBA(RPARM)                                0719
*   RPARM->PRFPRI=PRIBFRTB;         /* POST PRIORITY                 */
         MVI   PRFPRI(RPARM),X'E0'                                 0720
*   CALL DSPPOSTR;                  /* FREE UNITS                    */
         LA    @15,DSPPOSTR(,RDISP)                                0721
         BALR  @14,@15                                             0721
*/*                                                                  */
*                                                                  0722
*   R14=R14SV04;                    /* RESTORE RETURN REG            */
         L     R14,R14SV04                                         0722
*   RETURN;                         /* RETURN TO CALLER              */
@EL00007 DS    0H                                                  0723
@EF00007 DS    0H                                                  0723
@ER00007 BR    @14                                                 0723
*   END DISCARD;                                                   0724
         EJECT
*                                                                  0725
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE HANDLES ALL EXPEDITED FLOW PIUS.                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0725
*EXP:                                                              0725
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0725
EXP      DS    0H                                                  0726
*   R14SV05=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,R14SV05                                         0726
*/*                                                                  */
*                                                                  0727
*   IF TRHRUCAT=TRHDFC THEN         /* DATA FLOW CONTROL             */
         TM    TRHRUCAT+10(PIUPTR),B'01000000'                     0727
         BNO   @RF00727                                            0727
         TM    TRHRUCAT+10(PIUPTR),B'00100000'                     0727
         BNZ   @RF00727                                            0727
*     DO;                           /* YES                           */
*       IF CMDBYTE=CD1RSHUT THEN    /* REQUEST SHUTDOWN PIU          */
         CLI   CMDBYTE,X'C2'                                       0729
         BNE   @RF00729                                            0729
*         SIBLGOFF=ON;              /* YES-SET LOGOFF INDICATOR      */
         L     @10,SIBPTR                                          0730
         OI    SIBLGOFF(@10),B'10000000'                           0730
*       ELSE                        /* NOT REQUEST SHUTDOWN          */
*         DO;                                                      0731
         B     @RC00729                                            0731
@RF00729 DS    0H                                                  0732
*           IF CMDBYTE=CD1SHUTC THEN/* SHUTDOWN COMPLETE PIU         */
         CLI   CMDBYTE,X'C1'                                       0732
         BNE   @RF00732                                            0732
*             SIBSHUTC=ON;          /* SET SHUTDOWN COMPLETE RECEIVED*/
         L     @10,SIBPTR                                          0733
         OI    SIBSHUTC(@10),B'01000000'                           0733
*           ELSE                    /* NOT SHUTC                     */
*             DO;                                                  0734
         B     @RC00732                                            0734
@RF00732 DS    0H                                                  0735
*               IF CMDBYTE^=CD1SIG THEN/* SIGNAL PIU                 */
         CLI   CMDBYTE,X'C9'                                       0735
         BE    @RF00735                                            0735
*                 DO;               /* NO                            */
*                   SNC=SNSFNS;     /* 'FUNCTION NOT SUPPORTED' SENSE*/
         MVC   SNC(4),@CB02155                                     0737
*                   CALL SETERSNS;  /* SET ERROR INFORMATION         */
         BAL   @14,SETERSNS                                        0738
*                 END;                                             0739
*             END;                                                 0740
*         END;                                                     0741
*     END;                                                         0742
*   ELSE                            /* EXPEDITED FM DATA ???         */
*     DO;                                                          0743
         B     @RC00727                                            0743
@RF00727 DS    0H                                                  0744
*       SNC=SNSBADRH;               /* 'SCREWED UP RH' SENSE         */
         MVC   SNC(4),@CB02159                                     0744
*       CALL SETERSNS;              /* SET ERROR INFORMATION         */
         BAL   @14,SETERSNS                                        0745
*     END;                                                         0746
*                                                                  0746
*/*                                                                  */
*                                                                  0747
*   QCBA=LCBMHA;                    /* SET UP MH QCB ADDRESS @YM06085*/
@RC00727 MVC   QCBA(3),LCBMHA(IEDQLPTR)                            0747
*/*                                                                  */
*                                                                  0748
*   TRHBC=ON;                       /* FORCE BEGINNING OF CHAIN      */
*   TRHEC=ON;                       /* FORCE END OF CHAIN            */
         OI    TRHBC+10(PIUPTR),B'00000011'                        0749
*   RPARM=RPRF;                     /* ADDR OF CURRENT PIU BUFFER    */
         LR    RPARM,RPRF                                          0750
*   CALL POSTMH;                    /* POST TO MH                    */
         BAL   @14,POSTMH                                          0751
*/*                                                                  */
*                                                                  0752
*   R14=R14SV05;                    /* RESTORE RETURN ADDRESS        */
         L     R14,R14SV05                                         0752
*   RETURN;                         /* RETURN TO CALLER              */
@EL00008 DS    0H                                                  0753
@EF00008 DS    0H                                                  0753
@ER00008 BR    @14                                                 0753
*   END EXP;                                                       0754
*                                                                  0755
*/********************************************************************/
*/*                                                                  */
*/*      I N S E R T   SUBROUTINE                                    */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*      THIS SUBROUTINE TESTS FOR A NULL (DATA LENGTH = 0) RU.      */
*/*      IF ONE IS FOUND, A BYTE OF '00'X IS INSERTED.               */
*/*                                                                  */
*/********************************************************************/
*                                                                  0755
*INSERT:                                                           0755
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0755
*                                                                  0755
INSERT   DS    0H                                                  0756
*/*                                                                  */
*                                                                  0756
*   DATAPTR=ADDR(PRFSUNIT)+AVTHDRSZ+PRFISIZE;/* GET DATA ADDR      0756
*                                                            @YM07999*/
         LA    @10,30                                              0756
         LA    DATAPTR,PRFSUNIT(,IEDQPPTR)                         0756
         ALR   DATAPTR,@10                                         0756
         SLR   @05,@05                                             0756
         IC    @05,PRFISIZE(,IEDQPPTR)                             0756
         ALR   DATAPTR,@05                                         0756
*   DATALNTH=PRFSIZE-AVTHDRSZ-PRFISIZE;/* GET DATA LENGTH    @YM07999*/
         LH    @03,PRFSIZE(,IEDQPPTR)                              0757
         LCR   @10,@10                                             0757
         ALR   @10,@03                                             0757
         SLR   @10,@05                                             0757
         STH   @10,DATALNTH                                        0757
*/*                                                                  */
*                                                                  0758
*   IF DATALNTH=0 THEN              /* 0-LENGTH RU?                  */
         LTR   @10,@10                                             0758
         BNZ   @RF00758                                            0758
*     DO;                           /* YES                           */
*       PRFSIZE=PRFSIZE+1;          /* BUMP BUFFER SIZE BY 1         */
         LA    @10,1                                               0760
         ALR   @03,@10                                             0760
         STH   @03,PRFSIZE(,IEDQPPTR)                              0760
*       DATAPTR->CHAR1=0;           /* INSERT 1 BYTE                 */
         MVI   CHAR1(DATAPTR),X'00'                                0761
*       DATALNTH=1;                 /* SET NEW LENGTH VALUE          */
         STH   @10,DATALNTH                                        0762
*     END;                                                         0763
*                                                                  0763
*/*                                                                  */
*                                                                  0764
*   END INSERT;                     /* RETURN TO CALLER              */
@EL00009 DS    0H                                                  0764
@EF00009 DS    0H                                                  0764
@ER00009 BR    @14                                                 0764
         EJECT
*                                                                  0765
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE PROCESSES ALL NORMAL DATA FLOW CONTROL COMMANDS.    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0765
*NORMDFC:                                                          0765
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0765
NORMDFC  DS    0H                                                  0766
*   R14SV07=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,R14SV07                                         0766
*/*                                                                  */
*                                                                  0767
*   IF CMDBYTE^=CD1LSTAT&           /* NOT LUSTAT AND...             */
*       CMDBYTE^=CD1CHASE THEN      /* NOT CHASE                     */
         CLI   CMDBYTE,X'04'                                       0767
         BE    @RF00767                                            0767
         CLI   CMDBYTE,X'84'                                       0767
         BE    @RF00767                                            0767
*     DO;                                                          0768
*       IF CMDBYTE=CD1RTR THEN      /* RTR                           */
         CLI   CMDBYTE,X'05'                                       0769
         BNE   @RF00769                                            0769
*         DO;                       /* YES                           */
*           LCBRTRRO=ON;            /* SET RESPONSE OWED TO RTR      */
         OI    LCBRTRRO(IEDQLPTR),B'00000100'                      0771
*           LCBTHSQ=TTHSNF;         /* SAVE RTR SEQUENCE NUMBER      */
         MVC   LCBTHSQ(2,IEDQLPTR),TTHSNF(PIUPTR)                  0772
*         END;                                                     0773
*       ELSE                        /* NOT RTR                       */
*         DO;                                                      0774
         B     @RC00769                                            0774
@RF00769 DS    0H                                                  0775
*           SNC=SNSFNS;             /* 'FUNCTION NOT SUPPORTED' SENSE*/
         MVC   SNC(4),@CB02155                                     0775
*           CALL SETERSNS;          /* SET ERROR INFORMATION         */
         BAL   @14,SETERSNS                                        0776
*         END;                                                     0777
*     END;                                                         0778
*                                                                  0778
@RC00769 DS    0H                                                  0779
*/*                                                                  */
*                                                                  0779
*   R14=R14SV07;                    /* RESTORE RETURN ADDRESS        */
@RF00767 L     R14,R14SV07                                         0779
*   RETURN;                         /* RETURN TO CALLER              */
@EL00010 DS    0H                                                  0780
@EF00010 DS    0H                                                  0780
@ER00010 BR    @14                                                 0780
*   END NORMDFC;                                                   0781
*                                                                  0782
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE PERFORMS THE 'PACKING' FUNCTION.                    */
*/*                                                                  */
*/********************************************************************/
*                                                                  0782
*PACKING:                                                          0782
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0782
PACKING  DS    0H                                                  0783
*   R14SV08=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,R14SV08                                         0783
*/*                                                                  */
*                                                                  0784
*   RC=GO;                          /* INIT RETURN CODE TO 'GO'      */
         MVI   RC,X'00'                                            0784
*   IF LCBINPAK=OFF THEN            /* ARE WE CURRENTLY PACKING A PIU*/
         TM    LCBINPAK(IEDQLPTR),B'00000001'                      0785
         BNZ   @RF00785                                            0785
*     DO;                           /* NO ( WE ARE BETWEEN PACK    0786
*                                                              STATE)*/
*       IF CMDBYTE^=CD1CANCL&       /* NOT CANCEL PIU AND...         */
*           TRHEC=OFF&              /* NOT END OF CHAIN AND ...      */
*           TTHDCF>LENGTH(IEDRH) THEN/* RU LENGTH NOT 0              */
         CLI   CMDBYTE,X'83'                                       0787
         BE    @RF00787                                            0787
         TM    TRHEC+10(PIUPTR),B'00000001'                        0787
         BNZ   @RF00787                                            0787
         CLC   TTHDCF(2,PIUPTR),@CH00065                           0787
         BNH   @RF00787                                            0787
*         DO;                                                      0788
*           IF LGBBUFSI=0 THEN      /* BUFFER SIZE NOT SPECIFIED     */
         L     @10,QCBPTR                                          0789
         L     @10,IEDNLPTR-1(,@10)                                0789
         LH    @10,LGBBUFSI(,@10)                                  0789
         LTR   @10,@10                                             0789
         BNZ   @RF00789                                            0789
*             SIZE=AVTKEYLE;        /* YES- USE DEFAULT              */
         LH    SIZE,AVTKEYLE(,IEDQAPTR)                            0790
*           ELSE                    /* BUFFER SIZE SPECIFIED         */
*             SIZE=LGBBUFSI;        /* SET UP SIZE                   */
         B     @RC00789                                            0791
@RF00789 L     @10,QCBPTR                                          0791
         L     @10,IEDNLPTR-1(,@10)                                0791
         LH    SIZE,LGBBUFSI(,@10)                                 0791
*           IF TTHDCF<              /* RU LENGTH                     */
*               (SIZE-(PRFPIUO+LENGTH(IEDTH))) THEN                0792
@RC00789 LA    @10,10                                              0792
         SLR   @05,@05                                             0792
         IC    @05,PRFPIUO(,IEDQPPTR)                              0792
         ALR   @10,@05                                             0792
         LCR   @10,@10                                             0792
         ALR   @10,SIZE                                            0792
         SLR   @05,@05                                             0792
         ICM   @05,3,TTHDCF(PIUPTR)                                0792
         CR    @10,@05                                             0792
         BNH   @RF00792                                            0792
*             LCBINPAK=ON;          /* GO TO IN PACK STATE IF RU DATA
*                                      LENGTH IS LESS THAN BUFSIZE.
*                                      THIS RU WILL BE SAVED ON THE
*                                      PACK CHAIN LATER IN THE     0793
*                                      'POSTING' ROUTINE.            */
         OI    LCBINPAK(IEDQLPTR),B'00000001'                      0793
*         END;                                                     0794
*     END;                                                         0795
*   ELSE                            /* 'IN PACK' STATE               */
*     DO;                                                          0796
         B     @RC00785                                            0796
@RF00785 DS    0H                                                  0797
*       IF CMDBYTE=CD1CANCL THEN    /* CANCEL PIU                    */
         CLI   CMDBYTE,X'83'                                       0797
         BNE   @RF00797                                            0797
*         LCBINPAK=OFF;             /* GO TO BETWEEN PACK STATE      */
         NI    LCBINPAK(IEDQLPTR),B'11111110'                      0798
*       ELSE                        /* NOT CANCEL                    */
*         DO;                                                      0799
*                                                                  0799
         B     @RC00797                                            0799
@RF00797 DS    0H                                                  0800
*/*        SET UP PACKED PIU ADDRESSABILITY                          */
*                                                                  0800
*           SVTH=ADDR(LCBPAKCH->PRFPIUO)+LCBPAKCH->PRFPIUO;        0800
         L     @05,LCBPAKCH-1(,IEDQLPTR)                           0800
         LA    @05,0(,@05)                                         0800
         LA    SVTH,PRFPIUO(,@05)                                  0800
         SLR   @00,@00                                             0800
         IC    @00,PRFPIUO(,@05)                                   0800
         ALR   SVTH,@00                                            0800
*           SVRH=SVTH+LENGTH(IEDTH);/* SET UP PACKED PIU RH        0801
*                                      ADDRESSABILITY                */
         LA    @05,10                                              0801
         LR    SVRH,SVTH                                           0801
         ALR   SVRH,@05                                            0801
*           IF TRHEC=ON THEN        /* END OF CHAIN                  */
         ALR   @05,PIUPTR                                          0802
         TM    TRHEC(@05),B'00000001'                              0802
         BNO   @RF00802                                            0802
*             DO;                   /* YES                           */
*               LCBINPAK=OFF;       /* GO TO BETWEEN PACK STATE      */
         NI    LCBINPAK(IEDQLPTR),B'11111110'                      0804
*               IF TTHDCF>LENGTH(IEDRH) THEN/* RU LENGTH NOT 0       */
         CLC   TTHDCF(2,PIUPTR),@CH00065                           0805
         BNH   @RF00805                                            0805
*                 DO;                                              0806
*                   DUMPIU=IEDPIU;  /* SET UP 'DUMMY' PIU ---NOTE: 0807
*                                      THE DUMMY PIU IS NEEDED SO  0807
*                                      SOMETHING CAN BE PASSED ON TO
*                                      THE POSTING ROUTINE. THIS ACTS
*                                      AS A SPECIAL SIGNAL TO THE  0807
*                                      POSTING ROUTINE.              */
         MVC   DUMPIU(13),IEDPIU(PIUPTR)                           0807
*                   R15=ADDR(DUMTH);/* ADDRESS OF DUMMY TH           */
         LA    R15,DUMTH                                           0808
*                   R15->TTHDCF=LENGTH(IEDRH);/* MAKE 'DUMMY' PIU RU
*                                      LENGTH ZERO                   */
         MVC   TTHDCF(2,R15),@CH00065                              0809
*                   CALL COMBINE;   /* COMBINE THE DATA OF THE PACKED
*                                      PIU BUFFER AND THE CURRENT PIU
*                                      BUFFER                        */
         BAL   @14,COMBINE                                         0810
*                   RPRF=ADDR(DUMBFR);/* SET CURRENT ELEMENT = TO  0811
*                                      DUMMY PIU                     */
         LA    RPRF,DUMBFR                                         0811
*                   PIUPTR=ADDR(DUMTH);/* SET PIU ADDRESSABILITY     */
         LA    PIUPTR,DUMTH                                        0812
*                 END;                                             0813
*             END;                                                 0814
*           ELSE                    /* NOT END OF CHAIN              */
*             DO;                                                  0815
         B     @RC00802                                            0815
@RF00802 DS    0H                                                  0816
*               IF TTHDCF>LENGTH(IEDRH) THEN/* RU LENGTH NOT 0       */
         CLC   TTHDCF(2,PIUPTR),@CH00065                           0816
         BNH   @RF00816                                            0816
*                 DO;               /* YES                           */
*                   IF LGBBUFSI=0 THEN/* BUFSIZE NOT SPECIFIED       */
         L     @09,QCBPTR                                          0818
         L     @09,IEDNLPTR-1(,@09)                                0818
         LH    @09,LGBBUFSI(,@09)                                  0818
         LTR   @09,@09                                             0818
         BNZ   @RF00818                                            0818
*                     SIZE=AVTKEYLE;/* YES- USE DEFAULT SIZE         */
         LH    SIZE,AVTKEYLE(,IEDQAPTR)                            0819
*                   ELSE            /* BUFSIZE SPECIFIED             */
*                     SIZE=LGBBUFSI;/* YES-USE IT                    */
         B     @RC00818                                            0820
@RF00818 L     @05,QCBPTR                                          0820
         L     @05,IEDNLPTR-1(,@05)                                0820
         LH    SIZE,LGBBUFSI(,@05)                                 0820
*/*                                                                  */
*                                                                  0821
*                   IF((SVTH->TTHDCF-LENGTH(IEDRH))+(TTHDCF-LENGTH(
*                       IEDRH)))>=(SIZE-(PRFPIUO+LENGTH(IEDTH)+LENGTH(
*                       IEDRH))) THEN                              0821
@RC00818 LA    @05,3                                               0821
         SLR   @00,@00                                             0821
         ICM   @00,3,TTHDCF(SVTH)                                  0821
         SLR   @00,@05                                             0821
         LCR   @05,@05                                             0821
         SLR   @03,@03                                             0821
         ICM   @03,3,TTHDCF(PIUPTR)                                0821
         ALR   @05,@03                                             0821
         ALR   @00,@05                                             0821
         LA    @05,13                                              0821
         SLR   @03,@03                                             0821
         IC    @03,PRFPIUO(,IEDQPPTR)                              0821
         ALR   @05,@03                                             0821
         LCR   @05,@05                                             0821
         ALR   @05,SIZE                                            0821
         CR    @00,@05                                             0821
         BL    @RF00821                                            0821
*                     LCBINPAK=OFF; /* GO TO BETWEEN PACK STATE IF 0822
*                                      THE LENGTH OF THE PACKED RU +
*                                      THE LENGTH OF THE CURRENT PIU
*                                      IS GREATER THAN OR EQUAL TO 0822
*                                      BUFSIZ                        */
         NI    LCBINPAK(IEDQLPTR),B'11111110'                      0822
*                   CALL COMBINE;   /* COMBINE THE DATA OF THE PACKED
*                                      PIU AND THE CURRENT PIU       */
@RF00821 BAL   @14,COMBINE                                         0823
*                   RC=NOGO;        /* SET 'NOGO' RETURN             */
         MVI   RC,X'04'                                            0824
*                 END;                                             0825
*             END;                                                 0826
@RF00816 DS    0H                                                  0827
*         END;                                                     0827
@RC00802 DS    0H                                                  0828
*     END;                                                         0828
*                                                                  0828
@RC00797 DS    0H                                                  0829
*/*                                                                  */
*                                                                  0829
*   R14=R14SV08;                    /* RESTORE RETURN ADDRESS        */
@RC00785 L     R14,R14SV08                                         0829
*   RETURN;                         /* RETURN TO CALLER              */
@EL00011 DS    0H                                                  0830
@EF00011 DS    0H                                                  0830
@ER00011 BR    @14                                                 0830
*   END PACKING;                                                   0831
*                                                                  0832
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE CONTROLS THE POSTING OF PIU BUFFERS TO THE MH.      */
*/*  IT HANDLES AMONG OTHER THINGS CANCEL PROCESSING AND 0 LENGTH RU */
*/*  PROCESSING.                                                     */
*/*                                                                  */
*/********************************************************************/
*                                                                  0832
*POSTING:                                                          0832
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0832
POSTING  DS    0H                                                  0833
*   R14SV09=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,R14SV09                                         0833
*/*                                                                  */
*                                                                  0834
*   QCBA=LCBMHA;                    /* SET UP MH QCB ADDRESS @YM06085*/
         MVC   QCBA(3),LCBMHA(IEDQLPTR)                            0834
*/*                                                                  */
*                                                                  0835
*   IF LCBPAKCH=0 THEN              /* IS THERE NO SAVED PIU       0835
*                                      BUFFER(ARE WE IN POSTING RESET
*                                      STATE)                        */
         L     @10,LCBPAKCH-1(,IEDQLPTR)                           0835
         LA    @10,0(,@10)                                         0835
         LTR   @10,@10                                             0835
         BNZ   @RF00835                                            0835
*     DO;                           /* YES                           */
*       IF CMDBYTE=CD1CANCL THEN    /* CANCEL PIU                    */
         CLI   CMDBYTE,X'83'                                       0837
         BNE   @RF00837                                            0837
*         DO;                       /* YES                           */
*           RPARM=RPRF;             /* ADDR OF CANCEL PIU BUFFER     */
         LR    RPARM,RPRF                                          0839
*           CALL POSTMH;            /* POST CANCEL TO MH             */
         BAL   @14,POSTMH                                          0840
*         END;                                                     0841
*       ELSE                        /* NOT CANCEL                    */
*         DO;                                                      0842
         B     @RC00837                                            0842
@RF00837 DS    0H                                                  0843
*           IF TRHEC=ON THEN        /* END OF CHAIN                  */
         TM    TRHEC+10(PIUPTR),B'00000001'                        0843
         BNO   @RF00843                                            0843
*             DO;                   /* YES                           */
*               IF TTHDCF=LENGTH(IEDRH) THEN/* ZERO LENGTH RU        */
         SLR   @10,@10                                             0845
         ICM   @10,3,TTHDCF(PIUPTR)                                0845
         C     @10,@CF00065                                        0845
         BNE   @RF00845                                            0845
*                 DO;               /* YES                           */
*                   RU(1)='00'X;    /* PUT 1 CHAR IN RU              */
         MVI   RU+13(PIUPTR),X'00'                                 0847
*                   TTHDCF=TTHDCF+1;/* INCREMENT DATA COUNT          */
         AL    @10,@CF00059                                        0848
         STCM  @10,3,TTHDCF(PIUPTR)                                0848
*                 END;                                             0849
*                                                                  0849
*/*                                                                  */
*                                                                  0850
*               RPARM=RPRF;         /* ADDR OF PIU BUFFER            */
@RF00845 LR    RPARM,RPRF                                          0850
*               CALL POSTMH;        /* POST PIU TO MH                */
         BAL   @14,POSTMH                                          0851
*             END;                                                 0852
*           ELSE                    /* NOT END OF CHAIN              */
*             LCBPAKCH=RPRF;        /* SET SAVED CHAIN TO CURRENT PIU*/
         B     @RC00843                                            0853
@RF00843 STCM  RPRF,7,LCBPAKCH(IEDQLPTR)                           0853
*         END;                                                     0854
*     END;                                                         0855
*   ELSE                            /* NOT IN POSTING RESET        0856
*                                      STATE(THERE IS A SAVED PIU  0856
*                                      BUFFER                        */
*     DO;                                                          0856
         B     @RC00835                                            0856
@RF00835 DS    0H                                                  0857
*       SVTH=ADDR(LCBPAKCH->PRFPIUO)+LCBPAKCH->PRFPIUO;/* SAVED TH 0857
*                                      PTR                           */
         L     @05,LCBPAKCH-1(,IEDQLPTR)                           0857
         LA    @05,0(,@05)                                         0857
         LA    SVTH,PRFPIUO(,@05)                                  0857
         SLR   @00,@00                                             0857
         IC    @00,PRFPIUO(,@05)                                   0857
         ALR   SVTH,@00                                            0857
*       SVRH=SVTH+LENGTH(IEDTH);    /* SAVED RH PTR                  */
         LA    SVRH,10                                             0858
         ALR   SVRH,SVTH                                           0858
*       SVRU=SVRH+LENGTH(IEDRH);    /* SAVED RU PTR                  */
         LA    @05,3                                               0859
         ALR   @05,SVRH                                            0859
         ST    @05,SVRU                                            0859
*/*                                                                  */
*                                                                  0860
*       IF SVTH->TTHDCF>LENGTH(IEDRH) THEN/* LENGTH OF SAVED PIU NOT
*                                      ZERO                          */
         CLC   TTHDCF(2,SVTH),@CH00065                             0860
         BNH   @RF00860                                            0860
*         CALL STATNOT0;            /* 'NOT 0 LENGTH' STATE        0861
*                                      PROCESSING                    */
         BAL   @14,STATNOT0                                        0861
*       ELSE                        /* O LENGTH                      */
*         CALL STAT0;               /* '0 LENGTH' STATE PROCESSING   */
         B     @RC00860                                            0862
@RF00860 BAL   @14,STAT0                                           0862
*     END;                                                         0863
*                                                                  0863
@RC00860 DS    0H                                                  0864
*/*                                                                  */
*                                                                  0864
*   R14=R14SV09;                    /* RESTORE RETURN ADDRESS        */
@RC00835 L     R14,R14SV09                                         0864
*   RETURN;                         /* RETURN TO CALLER              */
@EL00012 DS    0H                                                  0865
@EF00012 DS    0H                                                  0865
@ER00012 BR    @14                                                 0865
*   END POSTING;                                                   0866
*                                                                  0867
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE CONVERTS THE PIU BUFFER TO TCAM BUFFER FORMAT AND   */
*/*   POSTS IT TO THE MH.                                            */
*/*       INPUT: 1) REG 1 CONTAINS THE ADDRESS OF THE PIU BUFFER     */
*/*                 TO BE POSTED                                     */
*/*              2) THE FIELD 'QCBA' CONTAINS THE ADDRESS OF THE     */
*/*                 MH QCB TO WHICH THE BUFFER IS TO POSTED          */
*/*              3) THE 'CMDBYTE' CONTAINS A CANCEL COMMAND CODE IF  */
*/*                 THE PIU TO BE POSTED IS A CANCEL                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  0867
*   RFY                                                            0867
*     IEDQPRF BASED(BUFPTR);                                       0867
*   RFY                                                            0868
*     IEDPIU BASED(PIUBEG);                                        0868
*POSTMH:                                                           0869
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0869
POSTMH   DS    0H                                                  0870
*   R14SV10=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,R14SV10                                         0870
*/*                                                                  */
*                                                                  0871
*   BUFPTR=RPARM;                   /* SET BUFFER ADDRESSABILITY     */
         LR    BUFPTR,RPARM                                        0871
*   PIUBEG=ADDR(PRFPIUO)+PRFPIUO;   /* SET PIU(TH-RH-RU)           0872
*                                      ADDRESSABILITY                */
         LA    PIUBEG,PRFPIUO(,BUFPTR)                             0872
         SLR   @10,@10                                             0872
         IC    @10,PRFPIUO(,BUFPTR)                                0872
         ALR   PIUBEG,@10                                          0872
*   RHSAVE=IEDRH;                   /* SAVE THE RH FOR A MINUTE      */
         LA    @10,10                                              0873
         ALR   @10,PIUBEG                                          0873
         MVC   RHSAVE(3),IEDRH(@10)                                0873
*/*                                                                  */
*                                                                  0874
*   IF LCBHDRPD=ON THEN             /* HAS HEADER BUFFER ALREADY BEEN
*                                      POSTED TO MH          @YM07036*/
         TM    LCBHDRPD(IEDQLPTR),B'00001000'                      0874
         BNO   @RF00874                                            0874
*     DO;                           /* YES                   @YM07036*/
*       TRHBC=OFF;                  /* FORCE TEXT BUFFER TO BE BUILT
*                                                            @YM07036*/
         NI    TRHBC(@10),B'11111101'                              0876
*       IF CMDBYTE=CD1CANCL THEN    /* CANCEL COMMAND        @YM07036*/
         CLI   CMDBYTE,X'83'                                       0877
         BNE   @RF00877                                            0877
*         DO;                       /* YES                   @YM07036*/
*           TRHEC=ON;               /* FORCE END CHAIN       @YM07036*/
         OI    TRHEC(@10),B'00000001'                              0879
*           LCBHDRPD=OFF;           /* RESET HEADER POSTED STATE   0880
*                                                            @YM07036*/
         NI    LCBHDRPD(IEDQLPTR),B'11110111'                      0880
*         END;                      /*                       @YM07036*/
*       ELSE                        /* NOT CANCEL COMMAND    @YM07036*/
*         IF TRHEC=ON THEN          /* END OF CHAIN          @YM07036*/
         B     @RC00877                                            0882
@RF00877 TM    TRHEC+10(PIUBEG),B'00000001'                        0882
         BNO   @RF00882                                            0882
*           LCBHDRPD=OFF;           /* YES-RESET HEADER POSTED STATE
*                                                            @YM07036*/
         NI    LCBHDRPD(IEDQLPTR),B'11110111'                      0883
*     END;                          /*                       @YM07036*/
*   ELSE                            /* HEADER HAS NOT BEEN POSTED TO
*                                      MH (NOTHING POSTED YET      0885
*                                                            @YM07036*/
*     DO;                           /*                       @YM07036*/
         B     @RC00874                                            0885
@RF00874 DS    0H                                                  0886
*       TRHBC=ON;                   /* FORCE HEADER BUFFER TO BE   0886
*                                      BUILT                 @YM07036*/
         LA    @10,10                                              0886
         ALR   @10,PIUBEG                                          0886
         OI    TRHBC(@10),B'00000010'                              0886
*       IF CMDBYTE=CD1CANCL THEN    /* CANCEL COMMAND        @YM07036*/
         CLI   CMDBYTE,X'83'                                       0887
         BNE   @RF00887                                            0887
*         TRHEC=ON;                 /* YES-FORCE END CHAIN   @YM07036*/
         OI    TRHEC(@10),B'00000001'                              0888
*       ELSE                        /* NOT CANCEL COMMAND    @YM07036*/
*         IF TRHEC=OFF THEN         /* NOT END OF CHAIN      @YM07036*/
         B     @RC00887                                            0889
@RF00887 TM    TRHEC+10(PIUBEG),B'00000001'                        0889
         BNZ   @RF00889                                            0889
*           LCBHDRPD=ON;            /* GO INTO HEADER POSTED STATE 0890
*                                                            @YM07036*/
         OI    LCBHDRPD(IEDQLPTR),B'00001000'                      0890
*     END;                          /*                       @YM07036*/
@RF00889 DS    0H                                                  0891
@RC00887 DS    0H                                                  0892
*/*                                                                  */
*                                                                  0892
*   RPARM=BUFPTR;                   /* ADDRESS OF PIU BUFFER         */
@RC00874 LR    RPARM,BUFPTR                                        0892
*   CALL IEDXFMI;                   /* TRANSFORM PIU TO TCAM BUFFER
*                                      FORMAT                        */
         L     @10,AVTSAVTP(,IEDQAPTR)                             0893
         L     @15,SAVTXFMI(,@10)                                  0893
         BALR  @14,@15                                             0893
*   PRFLCB=RLCB;                    /* SET UP LCB ADDRESS            */
         STCM  RLCB,7,PRFLCB(BUFPTR)                               0894
*   PRF1RH=RHSAVE;                  /* RESTORE THE ORIGINAL RH(WHICH
*                                      COULD CONTAIN INCORRECT CHAIN
*                                      BIT SETTINGS)                 */
         LR    @10,BUFPTR                                          0895
         AL    @10,@CF02338                                        0895
         MVC   PRF1RH(3,@10),RHSAVE                                0895
*   IF QCBTSSES=ON THEN             /* IN TSO SESSION                */
         L     @10,QCBPTR                                          0896
         TM    QCBTSSES(@10),B'10000000'                           0896
         BNO   @RF00896                                            0896
*     PRFTSMSG=ON;                  /* YES, INDICATE TSO MESSAGE     */
         OI    PRFTSMSG(BUFPTR),B'00010000'                        0897
*/*                                                                  */
*                                                                  0898
*   IF PRFNLSTN=OFF THEN            /* 'LAST' BUFFER                 */
@RF00896 TM    PRFNLSTN(BUFPTR),B'00000010'                        0898
         BNZ   @RF00898                                            0898
*     DO;                           /* YES                           */
*       LCBUSUE=ON;                 /* SET UNIT EXCEPTION            */
         OI    LCBUSUE(IEDQLPTR),B'00000001'                       0900
*       EXITSW=ON;                  /* SET LOOP EXIT SWITCH          */
         OI    EXITSW,B'10000000'                                  0901
*       IF SCBTXTTN=ON THEN         /* HAS ERROR OCCURRED ON THIS  0902
*                                      CHAIN                         */
         L     @10,IEDQSPTR-1(,IEDQLPTR)                           0902
         TM    SCBTXTTN(@10),B'01000000'                           0902
         BNO   @RF00902                                            0902
*         PRFPRI=PRIERBFR;          /* YES-SET ERROR PRIORITY        */
         MVI   PRFPRI(BUFPTR),X'E3'                                0903
*       ELSE                        /* NO ERROR ON THIS CHAIN        */
*         PRFPRI=PRIMHBFR;          /* SET NORMAL PRIORITY           */
         B     @RC00902                                            0904
@RF00902 MVI   PRFPRI(BUFPTR),X'E4'                                0904
*     END;                                                         0905
*   ELSE                            /* NOT 'LAST' BUFFER             */
*     PRFPRI=PRIMHBFR;              /* SET NORMAL PRIORITY           */
         B     @RC00898                                            0906
@RF00898 MVI   PRFPRI(BUFPTR),X'E4'                                0906
*/*                                                                  */
*                                                                  0907
*   PRFQCBA=QCBA;                   /* SET UP MH QCB ADDRESS         */
@RC00898 MVC   PRFQCBA(3,BUFPTR),QCBA                              0907
*   RPARM=BUFPTR;                   /* ADDRESS OF BUFFER TO BE POSTED*/
         LR    RPARM,BUFPTR                                        0908
*   CALL DSPPOSTR;                  /* POST THE BUFFER TO MH         */
         LA    @15,DSPPOSTR(,RDISP)                                0909
         BALR  @14,@15                                             0909
*/*                                                                  */
*                                                                  0910
*   R14=R14SV10;                    /* RESTORE RETURN ADDRESS        */
         L     R14,R14SV10                                         0910
*   RETURN;                         /* RETURN TO CALLER              */
@EL00013 DS    0H                                                  0911
@EF00013 DS    0H                                                  0911
@ER00013 BR    @14                                                 0911
*   END POSTMH;                                                    0912
*   RFY                                                            0913
*     IEDQPRF BASED(IEDQPPTR);                                     0913
*   RFY                                                            0914
*     IEDPIU BASED(PIUPTR);                                        0914
*                                                                  0915
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE PROCESSES EACH ELEMENT AS IT COMES OFF THE WAIT     */
*/*  CHAIN. IT DOES THE FOLLOWING:                                   */
*/*        . PROCESSES EXPEDITED FLOW                                */
*/*        . PERFORMS ERROR CHECKING ON THE RH FORMAT                */
*/*        . DOES CHAIN MANAGEMENT                                   */
*/*        . DOES BRACKET MANAGEMENT                                 */
*/*        . DOES PACKING FUNCTION                                   */
*/*        . DOES POSTING TO MH FUNCTION                             */
*/*                                                                  */
*/********************************************************************/
*                                                                  0915
*PROCELEM:                                                         0915
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0915
PROCELEM DS    0H                                                  0916
*   R14SV11=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,R14SV11                                         0916
*/*                                                                  */
*/* SET UP COMMAND BYTE                                              */
*                                                                  0917
*   IF TRHRUCAT=TRHDFC THEN         /* DATA FLOW CONTROL COMMAND     */
         LA    @10,10                                              0917
         ALR   @10,PIUPTR                                          0917
         TM    TRHRUCAT(@10),B'01000000'                           0917
         BNO   @RF00917                                            0917
         TM    TRHRUCAT(@10),B'00100000'                           0917
         BNZ   @RF00917                                            0917
*     DO;                           /* YES                           */
*       IF TRHSDI=ON THEN           /* SENSE DATA INCLUDED           */
         TM    TRHSDI(@10),B'00000100'                             0919
         BNO   @RF00919                                            0919
*         CMDBYTE=RU(5);            /* COMMAND CODE IS 5TH BYTE OF RU*/
         MVC   CMDBYTE(1),RU+17(PIUPTR)                            0920
*       ELSE                        /* NO SENSE DATA                 */
*         CMDBYTE=RU(1);            /* COMMAND CODE IS 1ST BYTE OF RU*/
         B     @RC00919                                            0921
@RF00919 MVC   CMDBYTE(1),RU+13(PIUPTR)                            0921
*     END;                                                         0922
*   ELSE                            /* FM DATA                       */
*     CMDBYTE=0;                    /* INDICATE NO COMMAND CODE      */
         B     @RC00917                                            0923
@RF00917 MVI   CMDBYTE,X'00'                                       0923
*/*                                                                  */
*                                                                  0924
*   LCBDFCMD=CMDBYTE;               /* SET UP COMMAND BYTE FOR IEDQRS
*                                      (SNA RESPONSE ROUTINE)      0924
*                                                            @YM07705*/
@RC00917 MVC   LCBDFCMD(1,IEDQLPTR),CMDBYTE                        0924
*/*                                                                  */
*                                                                  0925
*   ERRORSW=OFF;                    /* INIT ERROR SW TO 0            */
         NI    ERRORSW,B'10111111'                                 0925
*/*                                                                  */
*                                                                  0926
*   IF TTHEFI=ON THEN               /* EXPEDITED FLOW                */
         TM    TTHEFI(PIUPTR),B'00000001'                          0926
         BNO   @RF00926                                            0926
*     CALL EXP;                     /* YES- PROCESS EXPEDITED FLOW   */
         BAL   @14,EXP                                             0927
*   ELSE                            /* NORMAL FLOW                   */
*     DO;                                                          0928
         B     @RC00926                                            0928
@RF00926 DS    0H                                                  0929
*       IF SAVTBSM^=0&              /* BRACKET MANAGER LOADED AND... */
*           SIBBRACK=ON THEN        /* RUNNING BRACKETS THIS SESSION */
         L     @10,AVTSAVTP(,IEDQAPTR)                             0929
         L     @10,SAVTBSM(,@10)                                   0929
         LTR   @10,@10                                             0929
         BZ    @RF00929                                            0929
         L     @10,SIBPTR                                          0929
         TM    SIBBRACK(@10),B'00000100'                           0929
         BNO   @RF00929                                            0929
*         CALL BRACKMGR;            /* DO BRACKET MANAGEMENT         */
         BAL   @14,BRACKMGR                                        0930
*       ELSE                        /* NOT USING BRACKETS            */
*         DO;                                                      0931
         B     @RC00929                                            0931
@RF00929 DS    0H                                                  0932
*           IF LCBCHN=LCBPURG THEN  /* IN 'PURGING CHAIN' STATE      */
         TM    LCBCHN(IEDQLPTR),B'00100000'                        0932
         BNO   @RF00932                                            0932
         TM    LCBCHN(IEDQLPTR),B'11010000'                        0932
         BNZ   @RF00932                                            0932
*             CALL CHAINMGR;        /* YES, DO CHAIN STATE MANAGEMENT*/
         BAL   @14,CHAINMGR                                        0933
*           ELSE                    /* NOT IN 'PURGING CHAIN' STATE  */
*             DO;                                                  0934
         B     @RC00932                                            0934
@RF00932 DS    0H                                                  0935
*               CALL STATUS;        /* DO FORMAT CHECKS              */
         BAL   @14,STATUS                                          0935
*               CALL CHAINMGR;      /* DO CHAIN STATE MANAGEMENT     */
         BAL   @14,CHAINMGR                                        0936
*             END;                                                 0937
*         END;                                                     0938
*                                                                  0938
@RC00932 DS    0H                                                  0939
*/*                                                                  */
*                                                                  0939
*       IF LGBPACK=ON THEN          /* 'PACKING' OPTION SPECIFIED    */
@RC00929 L     @10,QCBPTR                                          0939
         L     @10,IEDNLPTR-1(,@10)                                0939
         TM    LGBPACK(@10),B'10000000'                            0939
         BNO   @RF00939                                            0939
*         DO;                       /* YES                           */
*           CALL PACKING;           /* DO THE PACKING FUNCTION       */
         BAL   @14,PACKING                                         0941
*           IF RC=GO THEN           /* IS A BUFFER READY TO GO TO MH */
         CLI   RC,0                                                0942
         BNE   @RF00942                                            0942
*             CALL POSTING;         /* YES- DO POSTING FUNCTION      */
         BAL   @14,POSTING                                         0943
*         END;                                                     0944
*       ELSE                        /* 'PACKING' NOT SPECIFIED       */
*         CALL POSTING;             /* DO POSTING FUNCTION           */
         B     @RC00939                                            0945
@RF00939 BAL   @14,POSTING                                         0945
*     END;                                                         0946
*                                                                  0946
@RC00939 DS    0H                                                  0947
*/*                                                                  */
*                                                                  0947
*   R14=R14SV11;                    /* RESTORE RETURN ADDRESS        */
@RC00926 L     R14,R14SV11                                         0947
*   RETURN;                         /* RETURN TO CALLER              */
@EL00014 DS    0H                                                  0948
@EF00014 DS    0H                                                  0948
@ER00014 BR    @14                                                 0948
*   END PROCELEM;                                                  0949
*                                                                  0950
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE SETS THE TCAM ERROR WORD AND ERROR INFORMATION IN   */
*/*  LCB FOR RESPONSES.                                              */
*/*      INPUT: THE FIELD NAMED 'SNC' CONTAINS THE 4 BYTES OF SENSE  */
*/*             TO BE USED IN SETTING UP ERROR INFORMATION           */
*/*                                                                  */
*/********************************************************************/
*                                                                  0950
*SETERSNS:                                                         0950
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0950
SETERSNS DS    0H                                                  0951
*   IF LCBRSRH=OFF THEN             /* HAS A RESPONSE ALREADY BEEN 0951
*                                      GENERATED                     */
         TM    LCBRSRH(IEDQLPTR),B'01000000'                       0951
         BNZ   @RF00951                                            0951
*     DO;                           /* NO                            */
*       SCBTXTTN=ON;                /* SET TEXT ERROR ( THIS BIT ALSO
*                                      INDICATES THAT ERROR BITS ARE
*                                      SET (FOR SNA ONLY))           */
         L     @10,IEDQSPTR-1(,IEDQLPTR)                           0953
         OI    SCBTXTTN(@10),B'01000000'                           0953
*       ERRORSW=ON;                 /* INDICATE ERROR FOUND ON THIS
*                                      PIU ELEMENT                   */
         OI    ERRORSW,B'01000000'                                 0954
*/*    SET UP INFORMATION REQUIRED FOR SENDING THE RESPONSE.         */
*/*    (RESPONSE IS SENT BY IEDQRS OUT OF THE MH)                    */
*                                                                  0955
*       IF RLCB=SAVTSLCB THEN       /* SSCP                          */
         L     @10,AVTSAVTP(,IEDQAPTR)                             0955
         C     RLCB,SAVTSLCB(,@10)                                 0955
         BNE   @RF00955                                            0955
*         DO;                       /* YES                           */
*           LCBTHSQ=PRF1SQID;       /* SET UP RSP SEQUENCE NUMBER    */
         LR    @10,IEDQPPTR                                        0957
         SL    @10,@CF00044                                        0957
         LH    @05,PRF1SQID(,@10)                                  0957
         N     @05,@CF02325                                        0957
         STH   @05,LCBTHSQ(,IEDQLPTR)                              0957
*           LCBRHSV=PRF1RH;         /* SET UP RH                     */
         MVC   LCBRHSV(3,IEDQLPTR),PRF1RH(@10)                     0958
*           IF PRF1EXPI=ON THEN     /* EXPIDITED                     */
         TM    PRF1EXPI(@10),B'01000000'                           0959
         BNO   @RF00959                                            0959
*             LCBEXPI=ON;           /* YES, SET EXP INDICATOR        */
         OI    LCBEXPI(IEDQLPTR),B'10000000'                       0960
*         END;                                                     0961
*       ELSE                        /* NOT SSCP                      */
*         DO;                                                      0962
         B     @RC00955                                            0962
@RF00955 DS    0H                                                  0963
*           LCBTHSQ=TTHSNF;         /* SET UP RSP SEQUENCE NUMBER    */
         MVC   LCBTHSQ(2,IEDQLPTR),TTHSNF(PIUPTR)                  0963
*           LCBRHSV=IEDRH;          /* SET UP RH                     */
         MVC   LCBRHSV(3,IEDQLPTR),IEDRH+10(PIUPTR)                0964
*           LCBDFCMD=CMDBYTE;       /* SET UP COMMAND CODE           */
         MVC   LCBDFCMD(1,IEDQLPTR),CMDBYTE                        0965
*           IF TTHEFI=ON THEN       /* EXPIDITED FLOW                */
         TM    TTHEFI(PIUPTR),B'00000001'                          0966
         BNO   @RF00966                                            0966
*             LCBEXPI=ON;           /* YES, SET EXP INDICATOR        */
         OI    LCBEXPI(IEDQLPTR),B'10000000'                       0967
*         END;                                                     0968
*                                                                  0968
@RF00966 DS    0H                                                  0969
*/*                                                                  */
*                                                                  0969
*       LCBRSRH=ON;                 /* INDICATE A RSP IS TO BE SENT  */
@RC00955 OI    LCBRSRH(IEDQLPTR),B'01000000'                       0969
*       LCBLUSNS=SNC;               /* SET SENSE BYTES               */
         MVC   LCBLUSNS(4,IEDQLPTR),SNC                            0970
*       SNSPTR=ADDR(SNC);           /* SET UP SENSE ADDRESSABILITY   */
         LA    SNSPTR,SNC                                          0971
*/*                                                                  */
*                                                                  0972
*       IF SNSMAJ=SNSPATH THEN      /* PATH ERROR                    */
         CLI   SNSMAJ(SNSPTR),X'80'                                0972
         BNE   @RF00972                                            0972
*         SCBPERRN=ON;              /* YES-SET PATH ERROR BIT        */
         L     @05,IEDQSPTR-1(,IEDQLPTR)                           0973
         OI    SCBPERRN(@05),B'00000001'                           0973
*       ELSE                                                       0974
*         IF SNSMAJ=SNSRHUSE THEN   /* RH USAGE ERROR                */
         B     @RC00972                                            0974
@RF00972 CLI   SNSMAJ(SNSPTR),X'40'                                0974
         BNE   @RF00974                                            0974
*           SCBCPMEN=ON;            /* YES-SET RH USAGE ERROR BIT    */
         L     @05,IEDQSPTR-1(,IEDQLPTR)                           0975
         OI    SCBCPMEN(@05),B'00000100'                           0975
*         ELSE                                                     0976
*           IF SNSMAJ=SNSSTERR THEN /* STATE ERROR                   */
         B     @RC00974                                            0976
@RF00974 CLI   SNSMAJ(SNSPTR),X'20'                                0976
         BNE   @RF00976                                            0976
*             SCBSTERN=ON;          /* YES-SET STATE ERROR BIT       */
         L     @05,IEDQSPTR-1(,IEDQLPTR)                           0977
         OI    SCBSTERN(@05),B'00000010'                           0977
*           ELSE                                                   0978
*             IF SNSMAJ=SNSRQERR THEN/* REQUEST ERROR                */
         B     @RC00976                                            0978
@RF00976 CLI   SNSMAJ(SNSPTR),X'10'                                0978
         BNE   @RF00978                                            0978
*               SCBFIERN=ON;        /* YES-SET REQUEST ERROR BIT     */
         L     @05,IEDQSPTR-1(,IEDQLPTR)                           0979
         OI    SCBFIERN(@05),B'00000100'                           0979
*             ELSE                                                 0980
*               IF SNSMAJ=SNSRQREJ THEN/* REQUEST REJECT ERROR       */
         B     @RC00978                                            0980
@RF00978 CLI   SNSMAJ(SNSPTR),X'08'                                0980
         BNE   @RF00980                                            0980
*                 SCBRRJN=ON;       /* YES-SET REQUEST REJECT BIT    */
         L     @05,IEDQSPTR-1(,IEDQLPTR)                           0981
         OI    SCBRRJN(@05),B'00000100'                            0981
*/*                                                                  */
*                                                                  0982
*       IF SNSUSER^=0 THEN          /* USER SENSE PRESENT            */
@RF00980 DS    0H                                                  0982
@RC00978 DS    0H                                                  0982
@RC00976 DS    0H                                                  0982
@RC00974 DS    0H                                                  0982
@RC00972 ICM   @05,3,SNSUSER(SNSPTR)                               0982
         BZ    @RF00982                                            0982
*         SCBUNDFN=ON;              /* YES-SET USER SENSE PRESENT BIT*/
         L     @10,IEDQSPTR-1(,IEDQLPTR)                           0983
         OI    SCBUNDFN(@10),B'00000001'                           0983
*     END;                                                         0984
*   RETURN;                         /* RETURN TO CALLER              */
@EL00015 DS    0H                                                  0985
@EF00015 DS    0H                                                  0985
@ER00015 BR    @14                                                 0985
*   END SETERSNS;                                                  0986
         B     @EL00015                                            0986
*                                                                  0987
*/********************************************************************/
*/*                                                                  */
*/*      S S C P   SUBROUTINE                                        */
*/*                                                                  */
*/********************************************************************/
*/*                                                                  */
*/*      THIS SUBROUTINE PROCESSES SSCP-FLOW INPUT REQUESTS.         */
*/*      THE BASIC PROCESSING STEPS ARE AS FOLLOWS:                  */
*/*                                                                  */
*/*        1. REMOVE THE FIRST PIU FROM THE WAIT CHAIN.              */
*/*                                                                  */
*/*        2. CONVERT THE PIU INTO A BUFFER.                         */
*/*                                                                  */
*/*        3. SET UP THE PLCB, SCB AND BUFFER FOR THE INPUT MH.      */
*/*                                                                  */
*/*        4. TPOST THE BUFFER TO THE INPUT MH.                      */
*/*                                                                  */
*/********************************************************************/
*                                                                  0987
*   RFY                                                            0987
*     IEDRH BASED(ADDR(PRF1RH));                                   0987
*SSCP:                                                             0988
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               0988
*                                                                  0988
SSCP     DS    0H                                                  0989
*/*                                                                  */
*                                                                  0989
*   R14SV14=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,R14SV14                                         0989
*/*                                                                  */
*                                                                  0990
*                                   /* REMOVE 1ST PIU FROM WAIT CHAIN*/
*   RPRF=LCBWAITC;                  /* 1ST PIU'S UNIT                */
         L     RPRF,LCBWAITC-1(,IEDQLPTR)                          0990
         LA    RPRF,0(,RPRF)                                       0990
*   LCBWAITC=PRFLINK;               /* DELINK IT                     */
         MVC   LCBWAITC(3,IEDQLPTR),PRFLINK(IEDQPPTR)              0991
*/*                                                                  */
*                                                                  0992
*                                   /* CONVERT PIU INTO BUFFER       */
*   PIUPTR=ADDR(PRFPIUO)+PRFPIUO;   /* GET PIU ADDRESS               */
         LA    PIUPTR,PRFPIUO(,IEDQPPTR)                           0992
         SLR   @10,@10                                             0992
         IC    @10,PRFPIUO(,IEDQPPTR)                              0992
         ALR   PIUPTR,@10                                          0992
*   R14=ADDR(PIURH);                /* GET RH ADDRESS (WITHIN PIU)   */
         LA    R14,PIURH(,PIUPTR)                                  0993
*   R14->TRHBC=ON;                  /* SET CHAINING BITS TO GIVE     */
*   R14->TRHEC=ON;                  /* ... HEADER LAST BUFFER        */
         OI    TRHBC(R14),B'00000011'                              0995
*   RPARM=RPRF;                     /* PIU'S UNIT ADDRESS            */
         LR    RPARM,RPRF                                          0996
*   CALL IEDXFMI;                   /* CONVERT PIU TO BUFFER         */
         L     @10,AVTSAVTP(,IEDQAPTR)                             0997
         L     @15,SAVTXFMI(,@10)                                  0997
         BALR  @14,@15                                             0997
*/*                                                                  */
*                                                                  0998
*                                   /* SET UP THE PLCB               */
*   LCBTTCIN=PRFSRCE;               /* SOURCE'S TNT OFFSET           */
         LH    @10,PRFSRCE(,IEDQPPTR)                              0998
         STH   @10,LCBTTCIN(,IEDQLPTR)                             0998
*   LCBUSUE=ON;                     /* UNIT EXECPTION FLAG           */
         OI    LCBUSUE(IEDQLPTR),B'00000001'                       0999
*/*                                                                  */
*                                                                  1000
*                                   /* SPECIAL SET-UP SITUATIONS     */
*   CALL INSERT;                    /* INSERT 1 BYTE IF BUFFER HAS NO
*                                      DATA                          */
         BAL   @14,INSERT                                          1000
*   IF TRHSDI=ON THEN               /* IS THIS EXCEPTION REQUEST     */
         LR    @10,IEDQPPTR                                        1001
         AL    @10,@CF02338                                        1001
         TM    TRHSDI(@10),B'00000100'                             1001
         BNO   @RF01001                                            1001
*     DO;                           /* YES                           */
*       LCBSCPRS=RU(5:7);           /* SET SSCP COMMAND CODE         */
         LA    @10,13                                              1003
         ALR   @10,PIUPTR                                          1003
         MVC   LCBSCPRS(3,IEDQLPTR),RU+4(@10)                      1003
*       SNC=RU(1:4);                /* PUT SENSE BYTES IN SENSE CODE
*                                      FIELD                         */
         MVC   SNC(4),RU(@10)                                      1004
*       CALL SETERSNS;              /* SET UP ERROR INFORMATION      */
         BAL   @14,SETERSNS                                        1005
*     END;                                                         1006
*   ELSE                            /* SENSE NOT INCLUDED            */
*     LCBSCPRS=RU(1:3);             /* SET UP COMMAND BYTES FOR    1007
*                                      IEDQRS (RESPONSE ROUTINE)     */
         B     @RC01001                                            1007
@RF01001 MVC   LCBSCPRS(3,IEDQLPTR),RU+13(PIUPTR)                  1007
*/*                                                                  */
*                                                                  1008
*   CALL CHECKNX;                   /* SET UP OPERATOR AWARENES MSG
*                                      INTERFACE IF RU IS AN ANSC, 1008
*                                      INOP, OR RECORD-TRACE-DATA    */
@RC01001 BAL   @14,CHECKNX                                         1008
*/*                                                                  */
*                                                                  1009
*                                   /* FINISH SETTING UP BUFFER      */
*   PRFQCBA=SAVTSSMH;               /* SSCP'S MH ADDRESS             */
         L     @10,AVTSAVTP(,IEDQAPTR)                             1009
         MVC   PRFQCBA(3,IEDQPPTR),SAVTSSMH+1(@10)                 1009
*   IF SCBTXTTN=ON THEN             /* HAS AN ERROR OCCURRED?        */
         L     @10,IEDQSPTR-1(,IEDQLPTR)                           1010
         TM    SCBTXTTN(@10),B'01000000'                           1010
         BNO   @RF01010                                            1010
*     PRFPRI=PRIERBFR;              /* YES, SET ERROR PRIORITY       */
         MVI   PRFPRI(IEDQPPTR),X'E3'                              1011
*   ELSE                                                           1012
*     PRFPRI=PRIMHBFR;              /* NO, SET NORMAL PRIORITY       */
         B     @RC01010                                            1012
@RF01010 MVI   PRFPRI(IEDQPPTR),X'E4'                              1012
*   PRFLCB=RLCB;                    /* PLCB ADDRESS                  */
@RC01010 STCM  RLCB,7,PRFLCB(IEDQPPTR)                             1013
*/*                                                                  */
*                                                                  1014
*                                   /* TPOST BUFFER TO MH            */
*   RPARM=RPRF;                     /* BUFFER ADDRESS                */
         LR    RPARM,RPRF                                          1014
*   CALL DSPPOSTR;                  /* TPOST IT                      */
         LA    @15,DSPPOSTR(,RDISP)                                1015
         BALR  @14,@15                                             1015
*/*                                                                  */
*                                                                  1016
*   R14=R14SV14;                    /* RESTORE RETURN ADDRESS        */
         L     R14,R14SV14                                         1016
*   END SSCP;                       /* RETURN TO CALLER              */
@EL00016 DS    0H                                                  1017
@EF00016 DS    0H                                                  1017
@ER00016 BR    @14                                                 1017
*   RFY                                                            1018
*     IEDRH BASED(ADDR(PIURH));                                    1018
         EJECT
*                                                                  1019
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE DOES PROCESSING WHEN THEIR IS A SAVED(PACKED) RU AND*/
*/* ITS LENGTH IS NOT ZERO.                                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  1019
*STATNOT0:                                                         1019
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1019
STATNOT0 DS    0H                                                  1020
*   R14SV12=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,R14SV12                                         1020
*/*                                                                  */
*                                                                  1021
*   IF CMDBYTE=CD1CANCL THEN        /* CANCEL PIU                    */
         CLI   CMDBYTE,X'83'                                       1021
         BNE   @RF01021                                            1021
*     DO;                           /* YES                           */
*       IF STMHDFC=ON THEN          /* SHOULD CANCEL GO TO         1023
*                                      MH(DFC=FULL OPTION)           */
         L     @05,QCBA-1                                          1023
         AL    @05,@CF02345                                        1023
         TM    STMHDFC-8(@05),B'01000000'                          1023
         BNO   @RF01023                                            1023
*         DO;                       /* YES                           */
*           RPARM=LCBPAKCH;         /* ADDRESS OF SAVED PIU BUFFER   */
         L     RPARM,LCBPAKCH-1(,IEDQLPTR)                         1025
         LA    RPARM,0(,RPARM)                                     1025
*           LCBPAKCH=0;             /* INDICATE NO SAVED PIU BUFFER  */
         SLR   @10,@10                                             1026
         STCM  @10,7,LCBPAKCH(IEDQLPTR)                            1026
*           CMDBYTE=0;              /* INDICATE THIS BUFFER NOT    1027
*                                      CANCEL                        */
         MVI   CMDBYTE,X'00'                                       1027
*           CALL POSTMH;            /* POST PIU BUFFER TO MH         */
         BAL   @14,POSTMH                                          1028
*           CMDBYTE=CD1CANCL;       /* INDICATE CANCEL COMMAND       */
         MVI   CMDBYTE,X'83'                                       1029
*           RPARM=RPRF;             /* ADDRESS OF CANCEL PIU BUFFER  */
         LR    RPARM,RPRF                                          1030
*           CALL POSTMH;            /* POST CANCEL TO MH             */
         BAL   @14,POSTMH                                          1031
*         END;                                                     1032
*       ELSE                        /* CANCEL SHOULD NOT GO TO MH    */
*         CALL CANMERGE;            /* MERGE CANCEL WITH SAVED PIU 1033
*                                      AND POST THE RESULT TO MH     */
         B     @RC01023                                            1033
@RF01023 BAL   @14,CANMERGE                                        1033
*     END;                                                         1034
*   ELSE                            /* NOT CANCEL                    */
*     DO;                                                          1035
         B     @RC01021                                            1035
@RF01021 DS    0H                                                  1036
*       IF TRHEC=ON THEN            /* END OF CHAIN                  */
         LA    @05,10                                              1036
         ALR   @05,PIUPTR                                          1036
         TM    TRHEC(@05),B'00000001'                              1036
         BNO   @RF01036                                            1036
*         DO;                       /* YES                           */
*           IF TTHDCF=LENGTH(IEDRH) THEN/* IS THIS 0 LENGTH RU       */
         CLC   TTHDCF(2,PIUPTR),@CH00065                           1038
         BNE   @RF01038                                            1038
*             DO;                   /* YES                           */
*               SVRH->IEDRH=SVRH->IEDRH&SMASK;/* 'AND' SAVED RH      */
         NC    IEDRH(3,SVRH),@CB02147                              1040
*               IEDRH=IEDRH&IMASK;  /* 'AND' INPUT RH                */
         NC    IEDRH(3,@05),@CB02151                               1041
*               SVRH->IEDRH=SVRH->IEDRH×IEDRH;/* 'OR' THE RH'S     1042
*                                      TOGETHER                      */
         OC    IEDRH(3,SVRH),IEDRH(@05)                            1042
*               SVTH->TTHSNF=TTHSNF;/* UPDATE SAVED SEQ # WITH     1043
*                                      CURRENT INPUT SEQ #           */
         MVC   TTHSNF(2,SVTH),TTHSNF(PIUPTR)                       1043
*               IF RPRF^=ADDR(DUMBFR) THEN/* IS THIS 'DUMMY' PIU     */
         LA    @10,DUMBFR                                          1044
         CR    RPRF,@10                                            1044
         BE    @RF01044                                            1044
*                 DO;               /* NO                            */
*                   RPARM=RPRF;     /* ADDRESS OF INPUT PIU          */
         LR    RPARM,RPRF                                          1046
*                   CALL DISCARD;   /* DISCARD CURRENT PIU ELEMENT   */
         BAL   @14,DISCARD                                         1047
*                 END;                                             1048
*                                                                  1048
*/*                                                                  */
*                                                                  1049
*               RPARM=LCBPAKCH;     /* ADDRESS OF SAVED PIU BUFFER   */
@RF01044 L     RPARM,LCBPAKCH-1(,IEDQLPTR)                         1049
         LA    RPARM,0(,RPARM)                                     1049
*               LCBPAKCH=0;         /* 0 OUT SAVED PTR               */
         SLR   @10,@10                                             1050
         STCM  @10,7,LCBPAKCH(IEDQLPTR)                            1050
*               CALL POSTMH;        /* POST SAVED PIU BUFFER TO MH   */
         BAL   @14,POSTMH                                          1051
*             END;                                                 1052
*           ELSE                    /* NOT 0 LENGTH RU               */
*             DO;                                                  1053
         B     @RC01038                                            1053
@RF01038 DS    0H                                                  1054
*               RPARM=LCBPAKCH;     /* ADDRESS OF SAVED PIU BUFFER   */
         L     RPARM,LCBPAKCH-1(,IEDQLPTR)                         1054
         LA    RPARM,0(,RPARM)                                     1054
*               LCBPAKCH=0;         /* 0 OUT SAVED PTR               */
         SLR   @10,@10                                             1055
         STCM  @10,7,LCBPAKCH(IEDQLPTR)                            1055
*               CALL POSTMH;        /* POST SAVED PIU BUFFER TO MH   */
         BAL   @14,POSTMH                                          1056
*               RPARM=RPRF;         /* ADDRESS OF CURRENT INPUT PIU  */
         LR    RPARM,RPRF                                          1057
*               CALL POSTMH;        /* POST CURRENT PIU TO MH        */
         BAL   @14,POSTMH                                          1058
*             END;                                                 1059
*         END;                                                     1060
*       ELSE                        /* NOT END CHAIN                 */
*         DO;                                                      1061
         B     @RC01036                                            1061
@RF01036 DS    0H                                                  1062
*           IF TTHDCF=LENGTH(IEDRH) THEN/* 0 LENGTH RU               */
         CLC   TTHDCF(2,PIUPTR),@CH00065                           1062
         BNE   @RF01062                                            1062
*             DO;                   /* YES                           */
*               SVTH->TTHSNF=TTHSNF;/* UPDATE SAVED SEQ #            */
         MVC   TTHSNF(2,SVTH),TTHSNF(PIUPTR)                       1064
*               RPARM=RPRF;         /* ADDRESS OF CURRENT PIU BUFFER */
         LR    RPARM,RPRF                                          1065
*               CALL DISCARD;       /* DISCARD CURRENT PIU           */
         BAL   @14,DISCARD                                         1066
*             END;                                                 1067
*           ELSE                    /* NOT 0 LENGTH RU               */
*             DO;                                                  1068
         B     @RC01062                                            1068
@RF01062 DS    0H                                                  1069
*               RPARM=LCBPAKCH;     /* ADDRESS OF SAVED PIU BUFFER   */
         L     RPARM,LCBPAKCH-1(,IEDQLPTR)                         1069
         LA    RPARM,0(,RPARM)                                     1069
*               CALL POSTMH;        /* POST SAVED PIU TO MH          */
         BAL   @14,POSTMH                                          1070
*               LCBPAKCH=RPRF;      /* SET SAVED PIU TO CURRENT PIU  */
         STCM  RPRF,7,LCBPAKCH(IEDQLPTR)                           1071
*             END;                                                 1072
*         END;                                                     1073
@RC01062 DS    0H                                                  1074
*     END;                                                         1074
*                                                                  1074
@RC01036 DS    0H                                                  1075
*/*                                                                  */
*                                                                  1075
*   R14=R14SV12;                    /* RESTORE RETURN ADDRESS        */
@RC01021 L     R14,R14SV12                                         1075
*   RETURN;                         /* RETURN TO CALLER              */
@EL00017 DS    0H                                                  1076
@EF00017 DS    0H                                                  1076
@ER00017 BR    @14                                                 1076
*   END STATNOT0;                                                  1077
*                                                                  1078
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE PERFORMS FORMAT CHECKING ON THE RH.                 */
*/*                                                                  */
*/********************************************************************/
*                                                                  1078
*STATUS:                                                           1078
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1078
STATUS   DS    0H                                                  1079
*   R14SV15=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,R14SV15                                         1079
*/*                                                                  */
*                                                                  1080
*   IF TRHSDI=ON THEN               /* EXCEPTION REQUEST             */
         TM    TRHSDI+10(PIUPTR),B'00000100'                       1080
         BNO   @RF01080                                            1080
*     DO;                           /* YES                           */
*       IF RU(1:2)='0000'X&         /* 1ST 2 SENSE BYTES ZERO AND... */
*           SIBFMPRO=2 THEN         /* 3270 SDLC PROFILE             */
         LA    @10,13                                              1082
         ALR   @10,PIUPTR                                          1082
         CLC   RU(2,@10),@CB01948                                  1082
         BNE   @RF01082                                            1082
         L     @09,SIBPTR                                          1082
         CLI   SIBFMPRO(@09),2                                     1082
         BNE   @RF01082                                            1082
*         DO;                       /* YES, THIS IS A 3270 SOHR    1083
*                                                            @YM06627*/
*           SCBSOHE=ON;             /* INDICATE SOHR RU      @YM06627*/
         L     @09,IEDQSPTR-1(,IEDQLPTR)                           1084
         LA    @09,0(,@09)                                         1084
         OI    SCBSOHE(@09),B'00000001'                            1084
*           LCBLUSNS=RU(1:4);       /* MOVE SENSE INTO LCB   @YM06627*/
         MVC   LCBLUSNS(4,IEDQLPTR),RU(@10)                        1085
*           SCBUNDFN=ON;            /* INDICATE USER SENSE PRESENT 1086
*                                                            @YM06627*/
         OI    SCBUNDFN(@09),B'00000001'                           1086
*         END;                      /*                       @YM06627*/
*       ELSE                        /* NOT 3270 SOHR         @YM06627*/
*         DO;                       /*                       @YM06627*/
         B     @RC01082                                            1088
@RF01082 DS    0H                                                  1089
*           SNC=RU(1:4);            /* SET UP SENSE PARAMETER      1089
*                                                            @YM06627*/
         MVC   SNC(4),RU+13(PIUPTR)                                1089
*           CALL SETERSNS;          /* SET UP ERROR INFORMATION    1090
*                                                            @YM06627*/
         BAL   @14,SETERSNS                                        1090
*         END;                      /*                       @YM06627*/
*     END;                                                         1092
*   ELSE                            /* NOT EXCEPTION REQUEST         */
*     DO;                                                          1093
         B     @RC01080                                            1093
@RF01080 DS    0H                                                  1094
*       IF TRHRUCAT=TRHFMD THEN     /* FM DATA                       */
         LA    @10,10                                              1094
         ALR   @10,PIUPTR                                          1094
         TM    TRHRUCAT(@10),B'01100000'                           1094
         BNZ   @RF01094                                            1094
*         DO;                       /* YES                           */
*           IF TRHBC=OFF THEN       /* NOT BEGIN CHAIN               */
         TM    TRHBC(@10),B'00000010'                              1096
         BNZ   @RF01096                                            1096
*             DO;                   /* YES                           */
*               IF TRHBB=ON THEN    /* BEGIN BRACKET ON              */
         TM    TRHBB(@10),B'10000000'                              1098
         BNO   @RF01098                                            1098
*                 DO;               /* YES                           */
*                   SNC=SNSBADBB;   /* INCORRECT USE OF BB           */
         MVC   SNC(4),@CB02161                                     1100
*                   CALL SETERSNS;  /* SET UP ERROR INFORMATION      */
         BAL   @14,SETERSNS                                        1101
*                 END;                                             1102
*               ELSE                /* NOT BEGIN BRACKETS            */
*                 DO;                                              1103
         B     @RC01098                                            1103
@RF01098 DS    0H                                                  1104
*                   IF TRHEB=ON THEN/* END BRACKET ON                */
         TM    TRHEB+10(PIUPTR),B'01000000'                        1104
         BNO   @RF01104                                            1104
*                     DO;           /* YES                           */
*                       SNC=SNSBADEB;/* INCORRECT USE OF EB          */
         MVC   SNC(4),@CB02163                                     1106
*                       CALL SETERSNS;/* SET UP ERROR INFORMATION    */
         BAL   @14,SETERSNS                                        1107
*                     END;                                         1108
*                 END;                                             1109
*             END;                                                 1110
*         END;                                                     1111
*       ELSE                        /* DATA FLOW CONTROL             */
*         DO;                                                      1112
         B     @RC01094                                            1112
@RF01094 DS    0H                                                  1113
*           IF CMDBYTE^=CD1CANCL THEN/* NOT CANCEL COMMAND           */
         CLI   CMDBYTE,X'83'                                       1113
         BE    @RF01113                                            1113
*             DO;                   /* YES                           */
*               IF TRHBC=OFF×       /* NOT BEGIN CHAIN OR...         */
*                   TRHEC=OFF THEN  /* NOT END CHAIN                 */
         TM    TRHBC+10(PIUPTR),B'00000011'                        1115
         BO    @RF01115                                            1115
*                 DO;               /* YES                           */
*                   SNC=SNSNBCEC;   /* 'NOT ONLY CHAIN' SENSE        */
         MVC   SNC(4),@CB02165                                     1117
*                   CALL SETERSNS;  /* SET UP ERROR INFORMATION      */
         BAL   @14,SETERSNS                                        1118
*                 END;                                             1119
*             END;                                                 1120
@RF01115 DS    0H                                                  1121
*         END;                                                     1121
@RF01113 DS    0H                                                  1122
*     END;                                                         1122
*                                                                  1122
@RC01094 DS    0H                                                  1123
*/*                                                                  */
*                                                                  1123
*   R14=R14SV15;                    /* RESTORE RETURN ADDRESS        */
@RC01080 L     R14,R14SV15                                         1123
*   RETURN;                         /* RETURN TO CALLER              */
@EL00018 DS    0H                                                  1124
@EF00018 DS    0H                                                  1124
@ER00018 BR    @14                                                 1124
*   END STATUS;                                                    1125
*                                                                  1126
*/********************************************************************/
*/*                                                                  */
*/* THIS ROUTINE DOES PROCESSING WHEN THEIR IS A SAVED PIU BUFFER    */
*/* WITH AN RU LENGTH OF 0.                                          */
*/*                                                                  */
*/********************************************************************/
*                                                                  1126
*STAT0:                                                            1126
*   PROC OPTIONS(NOSAVE,NOSAVEAREA);                               1126
STAT0    DS    0H                                                  1127
*   R14SV13=R14;                    /* SAVE RETURN ADDRESS           */
         ST    R14,R14SV13                                         1127
*/*                                                                  */
*                                                                  1128
*   IF CMDBYTE=CD1CANCL THEN        /* CANCEL PIU                    */
         CLI   CMDBYTE,X'83'                                       1128
         BNE   @RF01128                                            1128
*     DO;                           /* YES                           */
*       SVRU->RU(1)='00'X;          /* INSERT 1 CHAR OF DATA BECAUSE
*                                      TCAM MH CANNOT UNDERSTAND 0 1130
*                                      DATA                          */
         L     @05,SVRU                                            1130
         MVI   RU(@05),X'00'                                       1130
*       SVTH->TTHDCF=SVTH->TTHDCF+1;/* UPDATE DATA COUNT             */
         LA    @05,1                                               1131
         SLR   @00,@00                                             1131
         ICM   @00,3,TTHDCF(SVTH)                                  1131
         ALR   @05,@00                                             1131
         STCM  @05,3,TTHDCF(SVTH)                                  1131
*       IF STMHDFC=ON THEN          /* SHOULD CANCEL GO TO MH (DFC=
*                                      FULL OPTION)                  */
         L     @05,QCBA-1                                          1132
         AL    @05,@CF02345                                        1132
         TM    STMHDFC-8(@05),B'01000000'                          1132
         BNO   @RF01132                                            1132
*         DO;                       /* YES                           */
*           RPARM=LCBPAKCH;         /* ADDRESS OF SAVED PIU BUFFER   */
         L     RPARM,LCBPAKCH-1(,IEDQLPTR)                         1134
         LA    RPARM,0(,RPARM)                                     1134
*           LCBPAKCH=0;             /* 0 OUT SAVE PTR                */
         SLR   @10,@10                                             1135
         STCM  @10,7,LCBPAKCH(IEDQLPTR)                            1135
*           CMDBYTE=0;              /* INDICATE NOT CANCEL COMMAND   */
         MVI   CMDBYTE,X'00'                                       1136
*           CALL POSTMH;            /* POST SAVED PIU TO MH          */
         BAL   @14,POSTMH                                          1137
*           CMDBYTE=CD1CANCL;       /* INDICATE CANCEL COMMAND       */
         MVI   CMDBYTE,X'83'                                       1138
*           RPARM=RPRF;             /* ADDRESS OF CANCEL PIU BUFFER  */
         LR    RPARM,RPRF                                          1139
*           CALL POSTMH;            /* POST CANCEL TO MH             */
         BAL   @14,POSTMH                                          1140
*         END;                                                     1141
*       ELSE                        /* CANCEL SHOULD NOT GO TO MH    */
*         CALL CANMERGE;            /* MERGE CANCEL WITH SAVED PIU 1142
*                                      AND POST RESULT TO MH         */
         B     @RC01132                                            1142
@RF01132 BAL   @14,CANMERGE                                        1142
*     END;                                                         1143
*   ELSE                            /* NOT CANCEL                    */
*     DO;                                                          1144
         B     @RC01128                                            1144
@RF01128 DS    0H                                                  1145
*       IF TRHEC=ON THEN            /* END OF CHAIN                  */
         TM    TRHEC+10(PIUPTR),B'00000001'                        1145
         BNO   @RF01145                                            1145
*         DO;                       /* YES                           */
*           IF TTHDCF=LENGTH(IEDRH) THEN/* INPUT PIU'S RU 0 LENGTH   */
         SLR   @10,@10                                             1147
         ICM   @10,3,TTHDCF(PIUPTR)                                1147
         C     @10,@CF00065                                        1147
         BNE   @RF01147                                            1147
*             DO;                   /* YES                           */
*               RU(1)='00'X;        /* INSERT 1 BYTE OF DATA (BECAUSE
*                                      TCAM MH DOES NOT UNDERSTAND 0
*                                      DATA                          */
         MVI   RU+13(PIUPTR),X'00'                                 1149
*               TTHDCF=TTHDCF+1;    /* INCREMENT DATA COUNT          */
         AL    @10,@CF00059                                        1150
         STCM  @10,3,TTHDCF(PIUPTR)                                1150
*             END;                                                 1151
*                                                                  1151
*/*        MERGE THE RH'S                                            */
*                                                                  1152
*           SVRH->IEDRH=SVRH->IEDRH&SMASK;/* 'AND' SAVED RH          */
@RF01147 NC    IEDRH(3,SVRH),@CB02147                              1152
*           IEDRH=IEDRH&IMASK;      /* 'AND' CURRENT INPUT RH        */
         LA    @10,10                                              1153
         ALR   @10,PIUPTR                                          1153
         NC    IEDRH(3,@10),@CB02151                               1153
*           IEDRH=IEDRH×SVRH->IEDRH;/* 'OR' THE RH'S TOGETHER        */
         OC    IEDRH(3,@10),IEDRH(SVRH)                            1154
*/*                                                                  */
*                                                                  1155
*           RPARM=LCBPAKCH;         /* ADDRESS OF SAVED PIU BUFFER   */
         L     RPARM,LCBPAKCH-1(,IEDQLPTR)                         1155
         LA    RPARM,0(,RPARM)                                     1155
*           LCBPAKCH=0;             /* 0 OUT SAVE PTR                */
         SLR   @10,@10                                             1156
         STCM  @10,7,LCBPAKCH(IEDQLPTR)                            1156
*           CALL DISCARD;           /* DISCARD SAVED PIU BUFFER      */
         BAL   @14,DISCARD                                         1157
*           RPARM=RPRF;             /* ADDRESS OF CURRENT PIU BUFFER */
         LR    RPARM,RPRF                                          1158
*           CALL POSTMH;            /* POST CURRENT INPUT PIU TO MH  */
         BAL   @14,POSTMH                                          1159
*         END;                                                     1160
*       ELSE                        /* NOT END CHAIN                 */
*         DO;                                                      1161
         B     @RC01145                                            1161
@RF01145 DS    0H                                                  1162
*           IF TTHDCF=LENGTH(IEDRH) THEN/* 0 LENGTH RU               */
         CLC   TTHDCF(2,PIUPTR),@CH00065                           1162
         BNE   @RF01162                                            1162
*             DO;                   /* YES                           */
*               SVTH->TTHSNF=TTHSNF;/* UPDATE SAVED PIU SEQ #        */
         MVC   TTHSNF(2,SVTH),TTHSNF(PIUPTR)                       1164
*               RPARM=RPRF;         /* ADDRESS OF CURRENT PIU BUFFER */
         LR    RPARM,RPRF                                          1165
*               CALL DISCARD;       /* DISCARD CURRENT PIU BUFFER    */
         BAL   @14,DISCARD                                         1166
*             END;                                                 1167
*           ELSE                    /* NOT 0 LENGTH RU               */
*             DO;                                                  1168
         B     @RC01162                                            1168
@RF01162 DS    0H                                                  1169
*               IEDRH=SVRH->IEDRH;  /* MOVE SAVED RH TO CURRENT RH   */
         MVC   IEDRH+10(3,PIUPTR),IEDRH(SVRH)                      1169
*               RPARM=LCBPAKCH;     /* ADDRESS OF SAVED PIU BUFFER   */
         L     RPARM,LCBPAKCH-1(,IEDQLPTR)                         1170
         LA    RPARM,0(,RPARM)                                     1170
*               CALL DISCARD;       /* DISCARD SAVED PIU BUFFER      */
         BAL   @14,DISCARD                                         1171
*               LCBPAKCH=RPRF;      /* SET SAVED PIU TO CURRENT ONE  */
         STCM  RPRF,7,LCBPAKCH(IEDQLPTR)                           1172
*             END;                                                 1173
*         END;                                                     1174
@RC01162 DS    0H                                                  1175
*     END;                                                         1175
*                                                                  1175
@RC01145 DS    0H                                                  1176
*/*                                                                  */
*                                                                  1176
*   R14=R14SV13;                    /* RESTORE RETURN ADDRESS        */
@RC01128 L     R14,R14SV13                                         1176
*   RETURN;                         /* RETURN TO CALLER              */
@EL00019 DS    0H                                                  1177
@EF00019 DS    0H                                                  1177
@ER00019 BR    @14                                                 1177
*   END STAT0;                                                     1178
*   END IEDRQIN                                                    1179
*                                                                  1179
*/* THE FOLLOWING INCLUDE STATEMENTS WERE FOUND IN THIS PROGRAM.     */
*/*%INCLUDE SYSLIB  (TAVTD   )                                       */
*/*%INCLUDE SYSLIB  (TCD1D   )                                       */
*/*%INCLUDE SYSLIB  (TDISPD  )                                       */
*/*%INCLUDE SYSLIB  (TLCBD   )                                       */
*/*%INCLUDE SYSLIB  (TLGBD   )                                       */
*/*%INCLUDE SYSLIB  (TPIUD   )                                       */
*/*%INCLUDE SYSLIB  (TPLBMD  )                                       */
*/*%INCLUDE SYSLIB  (TPLMVD  )                                       */
*/*%INCLUDE SYSLIB  (TPRFD   )                                       */
*/*%INCLUDE SYSLIB  (TPRIOR  )                                       */
*/*%INCLUDE SYSLIB  (TQCBD   )                                       */
*/*%INCLUDE SYSLIB  (TRHD    )                                       */
*/*%INCLUDE SYSLIB  (TSCBD   )                                       */
*/*%INCLUDE SYSLIB  (TSIBD   )                                       */
*/*%INCLUDE SYSLIB  (TSNSD   )                                       */
*/*%INCLUDE SYSLIB  (TSTMHND )                                       */
*/*%INCLUDE SYSLIB  (TSTMHD  )                                       */
*/*%INCLUDE SYSLIB  (TTHD    )                                       */
*/*%INCLUDE SYSLIB  (TTRMD   )                                       */
*                                                                  1179
*       ;                                                          1179
@DATA    DS    0H
         DS    0F
         DS    0F
@CF00059 DC    F'1'
@CF00126 DC    F'2'
@CF00065 DC    F'3'
@CH00065 EQU   @CF00065+2
@CF00152 DC    F'5'
@CF00044 DC    F'8'
@CF02338 DC    F'-8'
@CF02326 DC    F'-7'
@CF02345 DC    F'-4'
@CF02325 DC    XL4'0000FFFF'
         DS    0D
SIBPTR   DS    A
QCBPTR   DS    A
PREVELEM DS    A
SVRU     DS    A
REM      DS    H
DATALNTH DS    H
         DS    CL1
QCBA     DS    AL3
RC       DS    FL1
@CB01336 DC    X'08000002'
@CB02155 DC    X'10030000'
@CB02157 DC    X'20020000'
@CB02159 DC    X'40000000'
@CB02161 DC    X'40030000'
@CB02163 DC    X'40040000'
@CB02165 DC    X'400B0000'
@CB02147 DC    X'FE4FDF'
@CB02149 DC    X'FE4F9F'
@CB02151 DC    X'01B020'
@CB02153 DC    X'01B060'
@CB01948 DC    X'0000'
PLMV     DS    CL24
PLBM     DS    CL16
TRACDATA DS    CL3
         ORG   TRACDATA
@NM00207 DC    X'01'
@NM00208 DC    X'03'
@NM00209 DC    X'83'
         ORG   TRACDATA+3
INOP     DS    CL3
         ORG   INOP
@NM00210 DC    X'01'
@NM00211 DC    X'02'
@NM00212 DC    X'81'
         ORG   INOP+3
ENTSLO   DS    CL3
         ORG   ENTSLO
@NM00213 DC    X'01'
@NM00214 DC    X'02'
@NM00215 DC    X'14'
         ORG   ENTSLO+3
EXTSLO   DS    CL3
         ORG   EXTSLO
@NM00216 DC    X'01'
@NM00217 DC    X'02'
@NM00218 DC    X'15'
         ORG   EXTSLO+3
         DS    CL1
R14SV    DS    CL68
         ORG   R14SV
R14SV01  DS    AL4
R14SV02  DS    AL4
R14SV03  DS    AL4
R14SV04  DS    AL4
R14SV05  DS    AL4
R14SV06  DS    AL4
R14SV07  DS    AL4
R14SV08  DS    AL4
R14SV09  DS    AL4
R14SV10  DS    AL4
R14SV11  DS    AL4
R14SV12  DS    AL4
R14SV13  DS    AL4
R14SV14  DS    AL4
R14SV15  DS    AL4
R14SV16  DS    AL4
R14SV17  DS    AL4
         ORG   R14SV+68
RHSAVE   DS    CL3
SNC      DS    CL4
CMDBYTE  DS    CL1
SWITCH1  DS    BL1
         ORG   SWITCH1
EXITSW   DS    BL1
ERRORSW  EQU   SWITCH1+0
@NM00219 EQU   SWITCH1+0
         ORG   SWITCH1+1
         DS    CL3
DUMBFR   DS    CL26
         ORG   DUMBFR
@NM00220 DS    CL12
DUMPIUO  DC    X'01'
DUMPIU   DS    CL13
         ORG   DUMPIU
DUMTH    DS    CL10
DUMRH    DS    CL3
         ORG   DUMBFR+26
@00      EQU   00                      EQUATES FOR REGISTERS 0-15
@01      EQU   01
@02      EQU   02
@03      EQU   03
@04      EQU   04
@05      EQU   05
@06      EQU   06
@07      EQU   07
@08      EQU   08
@09      EQU   09
@10      EQU   10
@11      EQU   11
@12      EQU   12
@13      EQU   13
@14      EQU   14
@15      EQU   15
SVRH     EQU   @09
SVTH     EQU   @10
SIZE     EQU   @09
PIUBEG   EQU   @09
BUFPTR   EQU   @07
UNITPTR  EQU   @09
DATAPTR  EQU   @09
PIUPTR   EQU   @07
SNSPTR   EQU   @10
IEDQAPTR EQU   @13
RDISP    EQU   @11
IEDQLPTR EQU   @04
LCBXPTR  EQU   @05
IEDQPPTR EQU   @06
IEDQTPTR EQU   @08
RZERO    EQU   @00
RPARM    EQU   @01
RLCB     EQU   @04
RPRF     EQU   @06
RTRM     EQU   @08
RBASE    EQU   @12
RAVT     EQU   @13
R14      EQU   @14
R15      EQU   @15
IEDQAVTD EQU   0
AVTSAVEX EQU   IEDQAVTD+216
@NM00003 EQU   IEDQAVTD+316
AVTCKFLG EQU   @NM00003
AVTBASE  EQU   IEDQAVTD+340
AVTPKF   EQU   AVTBASE
AVTRNMPT EQU   IEDQAVTD+352
AVTHG02  EQU   IEDQAVTD+456
AVTDISP  EQU   IEDQAVTD+480
AVTHD    EQU   IEDQAVTD+484
AVTSCOPT EQU   AVTHD
AVTSAVTP EQU   IEDQAVTD+540
AVTSAVTF EQU   AVTSAVTP
AVTCKPEL EQU   IEDQAVTD+580
AVTCKRMV EQU   AVTCKPEL
AVTCKELF EQU   IEDQAVTD+608
AVTCKBYT EQU   IEDQAVTD+619
AVTHG01  EQU   IEDQAVTD+620
AVTCKLNK EQU   IEDQAVTD+624
AVTCRELE EQU   IEDQAVTD+636
AVTCCELE EQU   AVTCRELE
AVTCLRHI EQU   IEDQAVTD+644
AVTADBUF EQU   IEDQAVTD+648
AVTSYSER EQU   IEDQAVTD+656
AVTBFRTB EQU   IEDQAVTD+720
AVTCKPQB EQU   IEDQAVTD+732
AVTCKPTB EQU   AVTCKPQB
AVTCKPEC EQU   AVTCKPQB+4
AVTCKPCC EQU   AVTCKPEC
AVTOPCQB EQU   IEDQAVTD+744
AVTOPCOB EQU   AVTOPCQB
AVTOPCEC EQU   AVTOPCQB+4
AVTOPCCC EQU   AVTOPCEC
AVTOLTQB EQU   IEDQAVTD+756
AVTCWFL1 EQU   IEDQAVTD+852
AVTCWFL2 EQU   IEDQAVTD+853
AVTSUBT  EQU   IEDQAVTD+876
AVTIOTR  EQU   IEDQAVTD+877
AVTKEYLE EQU   IEDQAVTD+960
AVTBIT1  EQU   IEDQAVTD+978
AVTBIT2  EQU   IEDQAVTD+979
AVTBIT3  EQU   IEDQAVTD+980
AVTBIT4  EQU   IEDQAVTD+1064
@NM00083 EQU   IEDQAVTD+1160
IEDNSVTD EQU   0
SAVTDIAG EQU   IEDNSVTD
SAVTDIAF EQU   SAVTDIAG
SAVTLUSQ EQU   IEDNSVTD+88
SAVTSLCB EQU   IEDNSVTD+104
SAVTXFMI EQU   IEDNSVTD+132
SAVTMVBF EQU   IEDNSVTD+160
SAVTSSMH EQU   IEDNSVTD+212
SAVTTCPU EQU   IEDNSVTD+238
SAVTBSM  EQU   IEDNSVTD+240
SAVTNAX  EQU   IEDNSVTD+248
SAVTRNMP EQU   IEDNSVTD+256
SAVTZELM EQU   IEDNSVTD+270
SAVTRDRV EQU   IEDNSVTD+284
SAVTCKQB EQU   IEDNSVTD+300
SAVTCKTB EQU   SAVTCKQB
SAVTCKEC EQU   SAVTCKQB+4
SAVTCKCC EQU   SAVTCKEC
IEDQDISP EQU   0
DSPDISP  EQU   4
DSPPOSTR EQU   28
IEDQLCB  EQU   0
LCBRCB   EQU   IEDQLCB
LCBTSOB  EQU   IEDQLCB+19
LCBCHAIN EQU   IEDQLCB+20
LCBSCRNN EQU   LCBCHAIN
LCBERMSG EQU   LCBCHAIN
LCBINSRC EQU   IEDQLCB+21
LCBLKMDE EQU   LCBINSRC+2
LCBNTXT  EQU   IEDQLCB+24
LCBSTAT4 EQU   LCBNTXT
LCBPHASE EQU   LCBSTAT4
LCBSCBDA EQU   IEDQLCB+25
LCBLNENT EQU   LCBSCBDA+1
LCBMHA   EQU   IEDQLCB+29
LCBFLAG1 EQU   IEDQLCB+32
LCBIOBSN EQU   IEDQLCB+33
LCBSENS0 EQU   LCBIOBSN+1
LCBLOSDT EQU   LCBSENS0
LCBTMOUT EQU   LCBSENS0
LCBFLAG3 EQU   LCBIOBSN+7
LCBCSW   EQU   LCBIOBSN+8
LCBCSWST EQU   LCBCSW+3
LCBCSWUS EQU   LCBCSWST
LCBUSUE  EQU   LCBCSWUS
LCBCSWCS EQU   LCBCSWST+1
LCBSIOCC EQU   LCBIOBSN+15
LCBDCBPT EQU   IEDQLCB+52
LCBRCQCB EQU   IEDQLCB+56
LCBTHSQ  EQU   IEDQLCB+60
LCBINCAM EQU   LCBTHSQ
LCBERRCT EQU   IEDQLCB+62
LCBLSPCI EQU   IEDQLCB+65
LCBRCBFR EQU   LCBLSPCI
LCBSTATE EQU   IEDQLCB+70
LCBSTAT1 EQU   LCBSTATE
LCBCTLMD EQU   LCBSTAT1
LCBSTAT2 EQU   LCBSTATE+1
LCBBEOTN EQU   LCBSTAT2
LCBSYNC  EQU   LCBSTAT2
LCBDIAL  EQU   LCBSTAT2
LCBTSTSW EQU   IEDQLCB+72
LCBERB   EQU   IEDQLCB+76
LCBERBST EQU   IEDQLCB+84
LCBDLNKN EQU   LCBERBST
LCBERBCT EQU   IEDQLCB+88
LCBRBCT2 EQU   LCBERBCT+1
LCBTTCIN EQU   IEDQLCB+90
LCBMSGFM EQU   IEDQLCB+92
LCBSCBA  EQU   IEDQLCB+93
LCBOBRCH EQU   IEDQLCB+96
LCBINVPT EQU   LCBOBRCH+1
LCBBFRW  EQU   LCBINVPT
LCBNXCMD EQU   LCBBFRW
LCBTPCD  EQU   IEDQLCB+100
LCBSTAT5 EQU   LCBTPCD
LCBSTAT6 EQU   LCBTPCD+4
LCBCHN   EQU   LCBSTAT6
LCBHDRPD EQU   LCBSTAT6
LCBRTRRO EQU   LCBSTAT6
LCBINPAK EQU   LCBSTAT6
LCBWAITC EQU   LCBTPCD+5
LCBRSPSV EQU   LCBTPCD+8
LCBSAVSN EQU   IEDQLCB+112
LCBERCCW EQU   IEDQLCB+120
LCBCPA   EQU   IEDQLCB+144
IEDQLCBX EQU   0
LCBXCON  EQU   IEDQLCBX
LCBXFLAG EQU   LCBXCON
LCBXDCT  EQU   LCBXCON+1
LCBXRADR EQU   LCBXCON+4
IEDNLGB  EQU   0
LGBBUFOU EQU   IEDNLGB+20
LGBPCI   EQU   IEDNLGB+25
LGBBYTE  EQU   IEDNLGB+29
LGBPACK  EQU   LGBBYTE
LGBOFLGS EQU   IEDNLGB+48
LGBBUFSI EQU   IEDNLGB+54
LGBRESER EQU   IEDNLGB+56
IEDPIU   EQU   0
PIUTH    EQU   IEDPIU
PIURH    EQU   IEDPIU+10
PIURU    EQU   IEDPIU+13
IEDPLBM  EQU   0
PLBMFLG1 EQU   IEDPLBM
PLBMSTAT EQU   PLBMFLG1
PLBMSNC  EQU   IEDPLBM+2
PLBMRH   EQU   IEDPLBM+4
PLBMCMD  EQU   IEDPLBM+7
PLBMSIB  EQU   IEDPLBM+8
PLBMLCB  EQU   IEDPLBM+12
PLBMPTR  EQU   0
IEDPLMV  EQU   0
PLMVTU   EQU   IEDPLMV
PLMVTD   EQU   IEDPLMV+4
PLMVSU   EQU   IEDPLMV+8
PLMVSD   EQU   IEDPLMV+12
PLMVLNTH EQU   IEDPLMV+16
PLMVFLG1 EQU   IEDPLMV+18
PLMVUNCF EQU   PLMVFLG1
PLMVUNCA EQU   IEDPLMV+20
IEDPLMVP EQU   0
IEDQPRF  EQU   0
PRFRCB   EQU   IEDQPRF
PRFKEY   EQU   PRFRCB
PRFQCBA  EQU   PRFRCB+1
PRFPRI   EQU   PRFRCB+4
PRFLINK  EQU   PRFRCB+5
PRFTIC   EQU   IEDQPRF+8
PRFTICC  EQU   PRFTIC
PRFTI0   EQU   PRFTIC+1
PRFNBUNT EQU   IEDQPRF+12
PRFSUNIT EQU   PRFNBUNT
PRFPLQCB EQU   PRFSUNIT
PRFPIUO  EQU   PRFPLQCB
PRFLCB   EQU   IEDQPRF+13
@NM00168 EQU   IEDQPRF+16
PRFSVFFO EQU   @NM00168
PRFSRCE  EQU   PRFSVFFO
PRFSIZE  EQU   PRFSVFFO+2
PRFSTAT1 EQU   IEDQPRF+20
PRFTSMSG EQU   PRFSTAT1
PRFEOFN  EQU   PRFSTAT1
PRFNLSTN EQU   PRFSTAT1
PRFCORE  EQU   IEDQPRF+21
PRFXTRA  EQU   PRFCORE
PRFSCAN  EQU   IEDQPRF+24
PRFISIZE EQU   PRFSCAN+1
PRFTQBCK EQU   IEDQPRF+26
PRFNTXT  EQU   PRFTQBCK
PRFEOBOF EQU   PRFNTXT
PRFCHDR  EQU   IEDQPRF+32
PRFHQBCK EQU   IEDQPRF+35
IEDPF1   EQU   0
PRF1RH   EQU   IEDPF1
PRF1FLG1 EQU   IEDPF1+3
PRF1EXPI EQU   PRF1FLG1
PRF1WD2  EQU   IEDPF1+4
PRF1SEQP EQU   PRF1WD2
PRF1SQID EQU   PRF1SEQP
PRF1TAG1 EQU   PRF1SQID
IEDPF2   EQU   0
PRF2FLG2 EQU   IEDPF2
PRF2WD2  EQU   IEDPF2+4
IEDQQCB  EQU   0
QCBDSFLG EQU   IEDQQCB
QCBDISK  EQU   QCBDSFLG
QCBEOLDT EQU   IEDQQCB+16
QCBBYTE1 EQU   QCBEOLDT+1
QCBLKRLN EQU   IEDQQCB+18
QCBRETCT EQU   QCBLKRLN
QCBSTAT  EQU   IEDQQCB+19
QCBINSRC EQU   IEDQQCB+21
@NM00176 EQU   QCBINSRC
QCBTSOF2 EQU   @NM00176+1
QCBTSOF1 EQU   @NM00176+2
QCBINTVL EQU   IEDQQCB+24
QCBPREN  EQU   IEDQQCB+28
QCBLKRRN EQU   QCBPREN+1
QCBDCBAD EQU   IEDQQCB+33
QCBLGBAD EQU   QCBDCBAD
QCBFLAG  EQU   IEDQQCB+36
QCBTSSES EQU   QCBFLAG
IEDQQPTR EQU   0
IEDQPQCB EQU   0
QCBFHDLZ EQU   IEDQPQCB+3
QCBPFEFO EQU   QCBFHDLZ+1
QCBFHDTZ EQU   IEDQPQCB+6
QCBINTLF EQU   IEDQPQCB+12
IEDNQCB  EQU   0
QCBSTAT1 EQU   IEDNQCB+4
QCBPLCBA EQU   IEDNQCB+5
IEDRH    EQU   0
TRHBYTE0 EQU   IEDRH
TRHRUCAT EQU   TRHBYTE0
TRHFI    EQU   TRHBYTE0
TRHSDI   EQU   TRHBYTE0
TRHBC    EQU   TRHBYTE0
TRHEC    EQU   TRHBYTE0
TRHBYTE1 EQU   IEDRH+1
TRHBYTE2 EQU   IEDRH+2
TRHBB    EQU   TRHBYTE2
TRHEB    EQU   TRHBYTE2
TRHCDI   EQU   TRHBYTE2
IEDQSCB  EQU   0
SCBSTATE EQU   IEDQSCB
SCBSEQIN EQU   SCBSTATE
SCBRCVCT EQU   IEDQSCB+4
SCBMBHEN EQU   IEDQSCB+5
SCBBKFCT EQU   IEDQSCB+9
SCBEOBSZ EQU   SCBBKFCT+1
SCBSALEV EQU   IEDQSCB+12
SCBQTYPE EQU   SCBSALEV
SCBERRST EQU   IEDQSCB+16
SCBERR1  EQU   SCBERRST
SCBHDRRN EQU   SCBERR1
SCBORIGN EQU   SCBERR1
SCBNOTRM EQU   SCBERR1
SCBSEQHN EQU   SCBERR1
SCBSEQLN EQU   SCBERR1
SCBCUTFN EQU   SCBERR1
SCBERR2  EQU   SCBERRST+1
SCBABRTN EQU   SCBERR2
SCBRRJN  EQU   SCBABRTN
SCBSOHE  EQU   SCBERR2
SCBERR3  EQU   SCBERRST+2
SCBLOSTN EQU   SCBERR3
SCBTMIDN EQU   SCBERR3
SCBFORMN EQU   SCBERR3
SCBFIERN EQU   SCBFORMN
SCBATTN  EQU   SCBERR3
SCBXCEPN EQU   SCBERR3
SCBPERRN EQU   SCBXCEPN
SCBERR4  EQU   SCBERRST+3
SCBTXTTN EQU   SCBERR4
SCBCTLUN EQU   SCBERR4
SCBCPMEN EQU   SCBCTLUN
SCBCHANN EQU   SCBERR4
SCBSTERN EQU   SCBCHANN
SCBUNDFN EQU   SCBERR4
SCBDLPTR EQU   IEDQSCB+22
SCBEOBAC EQU   SCBDLPTR
SCBCTBAC EQU   SCBEOBAC
SCBBSCFM EQU   IEDQSCB+24
SCBDATEN EQU   SCBBSCFM
SCBITBSZ EQU   IEDQSCB+40
SCBCTBSV EQU   SCBITBSZ
SCBDNSEG EQU   IEDQSCB+41
SCBCLSEG EQU   IEDQSCB+45
SCBITBAC EQU   IEDQSCB+48
SCBCTBFL EQU   SCBITBAC
SCBBLKCT EQU   SCBCTBFL
SCBDCSEG EQU   IEDQSCB+49
SCBSTAT1 EQU   IEDQSCB+60
SCBCORE  EQU   IEDQSCB+61
SCBSCAN  EQU   IEDQSCB+64
SCBNTXT  EQU   IEDQSCB+66
SCBCHDR  EQU   IEDQSCB+72
SCBCCSEG EQU   IEDQSCB+75
SCBEND   EQU   IEDQSCB+84
IEDSIBD  EQU   0
SIBSESSN EQU   IEDSIBD+10
SIBLGOFF EQU   SIBSESSN
SIBSHUTC EQU   SIBSESSN
SIBPACIN EQU   IEDSIBD+11
SIBSEQN  EQU   IEDSIBD+12
SIBSTAT1 EQU   IEDSIBD+16
SIBSTAT2 EQU   IEDSIBD+17
SIBFMPRO EQU   IEDSIBD+19
SIBBIND  EQU   IEDSIBD+20
SIBBIND1 EQU   SIBBIND
SIBBIND2 EQU   SIBBIND+1
SIBBRACK EQU   SIBBIND2
SIBBIND3 EQU   SIBBIND+2
SIBFMODE EQU   SIBBIND3
SIBSTAT0 EQU   IEDSIBD+23
SIBCD    EQU   SIBSTAT0
IEDSNSD  EQU   0
SNSSYSTM EQU   IEDSNSD
SNSMAJ   EQU   SNSSYSTM
SNSUSER  EQU   IEDSNSD+2
IEDNSTMH EQU   0
STMHFLG0 EQU   IEDNSTMH+8
STMHDFC  EQU   STMHFLG0
IEDSTMH  EQU   0
STMHFLG2 EQU   IEDSTMH+4
STMHAEIX EQU   IEDSTMH+12
STMHLMOP EQU   IEDSTMH+17
IEDTH    EQU   0
TTHBYTE0 EQU   IEDTH
TTHEFI   EQU   TTHBYTE0
TTHSNF   EQU   IEDTH+6
TTHTAG   EQU   TTHSNF
TTHTAG1  EQU   TTHTAG
TTHDCF   EQU   IEDTH+8
IEDQTRM  EQU   0
TRMSTATE EQU   IEDQTRM
TRMLOG   EQU   TRMSTATE
TRMDESTQ EQU   IEDQTRM+1
TRMINSEQ EQU   IEDQTRM+4
TLISTCNT EQU   TRMINSEQ
TRMOUTSQ EQU   IEDQTRM+6
TLISTEN  EQU   TRMOUTSQ
TRMDSORG EQU   TLISTEN
TRMALTD  EQU   IEDQTRM+8
TRMDEVFL EQU   IEDQTRM+10
TRMSTAT  EQU   IEDQTRM+12
IEDNTRM  EQU   0
TRMBYTE4 EQU   IEDNTRM
TRMBYTE3 EQU   IEDNTRM+1
TRMBYTE2 EQU   IEDNTRM+2
TRMINPG  EQU   TRMBYTE2
TRMBYTE1 EQU   IEDNTRM+3
TRMSCPRQ EQU   TRMBYTE1
TRMBYTE0 EQU   IEDNTRM+6
TRMSIBPT EQU   IEDNTRM+7
IEDIAP03 EQU   0
IEDXFMI  EQU   0
IEDQTNT  EQU   0
IEDBSM   EQU   0
IEDMVBFR EQU   0
RU       EQU   0
SSCPRU   EQU   0
CHAR3    EQU   SSCPRU
CHAR1    EQU   CHAR3
SSCPNA   EQU   SSCPRU+3
DSPBYPAS EQU   20
DSPCHAIN EQU   12
DSPLIFO  EQU   56
DSPLIFOR EQU   60
DSPLIST  EQU   8
DSPPOST  EQU   24
DSPPRIO  EQU   48
DSPPRIOR EQU   52
DSPTRACE EQU   64
DSPTSTQ  EQU   32
DSPTSTQR EQU   36
DSPUNAV  EQU   40
DSPUNAVR EQU   44
DSPWAIT  EQU   16
IEDIAP05 EQU   0
LCBRSPIN EQU   LCBIOBSN
LCBRHSV  EQU   LCBRSPIN+2
LCBLUSNS EQU   LCBRSPIN+5
LCBSCPRS EQU   LCBRSPIN+9
LCBDFCMD EQU   LCBSCPRS
LCBCSWU1 EQU   LCBSCPRS+2
LCBRSPFG EQU   LCBRSPIN+15
LCBEXPI  EQU   LCBRSPFG
LCBRSRH  EQU   LCBRSPFG
LCBPAKCH EQU   LCBRSPIN+16
LCBCOREQ EQU   LCBTPCD
@NM00129 EQU   LCBCPA+40
LCBQNX   EQU   LCBERCCW
LCBQNXMN EQU   LCBQNX
LCBCANCL EQU   LCBSAVSN
LCBCANFG EQU   LCBCANCL
LCBCANXT EQU   LCBCANFG
LCBCANTH EQU   LCBCANCL+1
IEDNLPTR EQU   QCBLGBAD
IEDQSPTR EQU   LCBSCBA
TRMPRE1  EQU   TRMBYTE4
TRMNCP1  EQU   TRMBYTE4
TRMPRE   EQU   TRMBYTE3
TRMNCP   EQU   TRMBYTE3
TRMPU    EQU   TRMBYTE3
TRMLU    EQU   TRMBYTE3
TRMLINK  EQU   TRMBYTE3
PRFSHDR  EQU   IEDQPRF+42
SCBRGSAV EQU   SCBEND
TRMOPT   EQU   IEDQTRM+20
         AGO   .@UNREFD                START UNREFERENCED COMPONENTS
@NM00206 EQU   TRMLINK
TRMLSTAT EQU   TRMLINK
TRMLINT  EQU   TRMLINK
TRMEPMOD EQU   TRMLINK
TRMLULOG EQU   TRMLU
TRMINERR EQU   TRMLU
TRMLUREQ EQU   TRMLU
TRMSESRQ EQU   TRMLU
TRMTDIFF EQU   TRMLU
TRMLUTM  EQU   TRMLU
TRMLUIT  EQU   TRMLU
TRMAUTO  EQU   TRMLU
TRMPCONT EQU   TRMPU
@NM00205 EQU   TRMPU
TRMNCONT EQU   TRMNCP
TRMQUCKN EQU   TRMNCP
TRMSLOWN EQU   TRMNCP
TRMSYGEN EQU   TRMNCP
TRMNCPCL EQU   TRMNCP
TRMIPLDM EQU   TRMNCP
TRMINOUT EQU   TRMPRE
TRMRDOUT EQU   TRMPRE
TRMNLOUT EQU   TRMPRE
TRMWROUT EQU   TRMPRE
TRMASNXI EQU   TRMPRE
TRMSTMM  EQU   TRMPRE
TRMCMODE EQU   TRMPRE
TRMSTPND EQU   TRMPRE
@NM00204 EQU   TRMNCP1
TRMINOP  EQU   TRMNCP1
TRMLYNCH EQU   TRMPRE1
TRMSPOUT EQU   TRMPRE1
TRMERLCK EQU   TRMPRE1
TRMQNPL  EQU   TRMPRE1
TRMSPACT EQU   TRMPRE1
TRMOCNI  EQU   TRMPRE1
TRMSESSN EQU   TRMPRE1
TRMCONT  EQU   TRMPRE1
@NM00136 EQU   LCBCANCL+3
@NM00135 EQU   LCBCANFG
LCBCANCD EQU   LCBCANFG
@NM00134 EQU   LCBCANFG
LCBCANEB EQU   LCBCANFG
LCBUNADD EQU   LCBQNX+21
LCBUASZE EQU   LCBQNX+20
LCBDSTEA EQU   LCBQNX+16
@NM00133 EQU   LCBQNX+4
LCBSTSAV EQU   LCBQNX+1
@NM00132 EQU   LCBQNXMN
LCBNX509 EQU   LCBQNXMN
LCBNX162 EQU   LCBQNXMN
LCBNX142 EQU   LCBQNXMN
LCBNX064 EQU   LCBQNXMN
@NM00131 EQU   @NM00129+4
LCBNCPPT EQU   @NM00129+1
@NM00130 EQU   @NM00129
LCBWRSCH EQU   LCBCOREQ+8
LCBCQLNK EQU   LCBCOREQ+4
LCBCQELE EQU   LCBCOREQ
@NM00128 EQU   LCBRSPFG
@NM00127 EQU   LCBRSPIN+12
LCBUSUE1 EQU   LCBCSWU1
@NM00126 EQU   LCBCSWU1
@NM00125 EQU   LCBSCPRS+1
LCBUSER  EQU   LCBLUSNS+2
LCBSMIN  EQU   LCBLUSNS+1
LCBSMAJ  EQU   LCBLUSNS
LCBSNS0  EQU   LCBRSPIN+1
@NM00124 EQU   LCBRSPIN
@NM00221 EQU   CHAR3+1
TRMSUBST EQU   IEDNTRM+12
TRMTYPE  EQU   IEDNTRM+11
TRMRLMCT EQU   IEDNTRM+10
TRMCOHTG EQU   TRMSIBPT+1
TRMGPCNT EQU   TRMSIBPT
TRMBUFRD EQU   TRMBYTE0
TRMSNA   EQU   TRMBYTE0
TRMGP    EQU   TRMBYTE0
TRMDIAL  EQU   TRMBYTE0
@NM00203 EQU   TRMBYTE0
TRMOUTPT EQU   TRMBYTE0
TRMINPUT EQU   TRMBYTE0
TRMUDEF  EQU   TRMBYTE0
TRMCOHRT EQU   IEDNTRM+4
TRMSTOTE EQU   TRMBYTE1
TRMCKPRN EQU   TRMBYTE1
TRMTSATN EQU   TRMBYTE1
TRMTRACE EQU   TRMBYTE1
TRMSWBCK EQU   TRMBYTE1
TRMAUTOC EQU   TRMBYTE1
TRMINPTP EQU   TRMBYTE1
TRMWTNEG EQU   TRMSCPRQ
TRMWRBRK EQU   TRMBYTE2
TRMNOSND EQU   TRMBYTE2
TRMPREP  EQU   TRMBYTE2
TRMGPACT EQU   TRMBYTE2
TRMANDL  EQU   TRMBYTE2
TRMCLOSN EQU   TRMINPG
TRMREMB  EQU   TRMBYTE2
TRMRSACT EQU   TRMBYTE2
TRMOPTBL EQU   IEDQTRM+18
TRMOPNO  EQU   IEDQTRM+17
TRMCHCIN EQU   IEDQTRM+16
TRMSENSE EQU   TRMSTAT+3
TRMTEMPR EQU   TRMSTAT+2
TRMSIO   EQU   TRMSTAT
@NM00202 EQU   TRMDEVFL+1
TRMTPIN  EQU   TRMDEVFL+1
TRMNCPI  EQU   TRMDEVFL+1
TRMRNTRM EQU   TRMDEVFL+1
@NM00201 EQU   TRMDEVFL+1
TRMLMD   EQU   TRMDEVFL+1
TRMCONC  EQU   TRMDEVFL+1
TRMTSOB  EQU   TRMDEVFL
TRMBFDY  EQU   TRMDEVFL
TRMTBLK  EQU   TRMDEVFL
TRMSBLK  EQU   TRMDEVFL
TRMBLKS  EQU   TRMDEVFL
TRMADDC  EQU   TRMDEVFL
TRMDDIG  EQU   TRMDEVFL
TRMBUFS  EQU   TRMDEVFL
TRMPRILK EQU   TRMALTD
TRMLGB   EQU   TRMDSORG
TRMUTERM EQU   TLISTCNT
TRMSCNYN EQU   TRMSTATE
TRMOPTFN EQU   TRMSTATE
TRMHELDN EQU   TRMSTATE
TRMACPTN EQU   TRMSTATE
TRMPREF  EQU   TRMSTATE
TRMPROC  EQU   TRMLOG
TRMLIST  EQU   TRMLOG
TRMLINE  EQU   TRMSTATE
TTHTAG2  EQU   TTHTAG+1
@NM00200 EQU   TTHTAG1
TTHTAGS  EQU   TTHTAG1
TTHOAF   EQU   IEDTH+4
TTHDAF   EQU   IEDTH+2
TTHBYTE1 EQU   IEDTH+1
@NM00199 EQU   TTHBYTE0
TTHEBIU  EQU   TTHBYTE0
TTHBBIU  EQU   TTHBYTE0
TTHFTYPE EQU   TTHBYTE0
STMHOPT  EQU   IEDSTMH+18
STMHCOPO EQU   STMHLMOP
STMHLOPO EQU   IEDSTMH+16
STMHROUT EQU   IEDSTMH+13
STMHLMD  EQU   STMHAEIX
STMHLMDO EQU   STMHAEIX
@NM00198 EQU   STMHAEIX
STMHSTCB EQU   IEDSTMH+9
STMHLENG EQU   IEDSTMH+8
STMHTSO  EQU   IEDSTMH+5
STMHTSFG EQU   STMHFLG2
STMHLOP  EQU   STMHFLG2
STMHLOG  EQU   STMHFLG2
STMHCOP  EQU   STMHFLG2
STMHCONV EQU   STMHFLG2
STMHSTC  EQU   STMHFLG2
STMHCONT EQU   STMHFLG2
STMHLCIN EQU   STMHFLG2
STMHALT  EQU   IEDSTMH
STMHBEXT EQU   IEDNSTMH+9
@NM00197 EQU   STMHFLG0
STMHUNBD EQU   STMHFLG0
STMHDFCP EQU   STMHFLG0
STMHUBXT EQU   IEDNSTMH+4
STMHUNBR EQU   IEDNSTMH
SNSUSR2  EQU   SNSUSER+1
SNSUSR1  EQU   SNSUSER
SNSMIN   EQU   SNSSYSTM+1
SIBLUTYP EQU   SIBSTAT0
@NM00196 EQU   SIBBIND3
SIBCRES  EQU   SIBBIND3
SIBSPKR  EQU   SIBBIND3
SIBRECOV EQU   SIBBIND3
SIBALT   EQU   SIBBIND2
SIBBTERM EQU   SIBBIND2
SIBFMUSE EQU   SIBBIND2
SIBSEBI  EQU   SIBBIND2
SIBSCMP  EQU   SIBBIND2
SIBSEXC  EQU   SIBBIND2
SIBSDEF  EQU   SIBBIND2
SIBSRQM  EQU   SIBBIND1
SIBSCHNG EQU   SIBBIND1
SIBPEBI  EQU   SIBBIND1
SIBPCMP  EQU   SIBBIND1
SIBPEXC  EQU   SIBBIND1
SIBPDEF  EQU   SIBBIND1
SIBPRQM  EQU   SIBBIND1
SIBPCHN  EQU   SIBBIND1
SIBTSPRO EQU   IEDSIBD+18
@NM00195 EQU   SIBSTAT2
SIBDACLU EQU   SIBSTAT2
SIBRDSCN EQU   SIBSTAT2
SIBTERM  EQU   SIBSTAT2
SIBUSS   EQU   SIBSTAT2
SIBBSTAT EQU   SIBSTAT1
SIBRTRP  EQU   SIBSTAT1
@NM00194 EQU   SIBSTAT1
SIBRQEND EQU   SIBSTAT1
SIBRQSHT EQU   SIBSTAT1
SIBSEQO  EQU   SIBSEQN+2
SIBSEQI  EQU   SIBSEQN
SIBNCNT  EQU   SIBPACIN
SIBMCNT  EQU   SIBPACIN
SIBDSTAT EQU   SIBSESSN
SIBSSTAT EQU   SIBSESSN
SIBINBIU EQU   SIBSESSN
SIBINDEX EQU   IEDSIBD+8
SIBCHAIN EQU   IEDSIBD+4
SIBRUSEG EQU   IEDSIBD
SCBTRANS EQU   IEDQSCB+81
SCBUNTCT EQU   IEDQSCB+80
SCBEOB   EQU   IEDQSCB+78
SCBNXCPB EQU   SCBCCSEG
SCBNHDR  EQU   SCBCHDR
SCBCRCD  EQU   IEDQSCB+69
SCBTQBCK EQU   SCBNTXT
SCBOSEQ  EQU   SCBSCAN
SCBXTRA  EQU   SCBCORE
SCBNOPST EQU   SCBSTAT1
SCBNIDLE EQU   SCBSTAT1
SCBCEND  EQU   SCBSTAT1
SCBCBGN  EQU   SCBSTAT1
SCBSIZE  EQU   IEDQSCB+58
SCBSRCE  EQU   IEDQSCB+56
SCBDEOB  EQU   IEDQSCB+52
SCBFEFO  EQU   SCBDCSEG
SCBCTBND EQU   SCBBLKCT
SCBSCHDR EQU   SCBCLSEG
SCBHBFNO EQU   IEDQSCB+44
SCBSCSEG EQU   SCBDNSEG
SCBBCTR  EQU   SCBCTBSV
SCBCCHDR EQU   IEDQSCB+37
SCBDESTL EQU   IEDQSCB+36
SCBDCHDR EQU   IEDQSCB+33
SCBCPBNO EQU   IEDQSCB+32
SCBMBSSA EQU   IEDQSCB+25
SCBMLMTN EQU   SCBBSCFM
SCBNOEOT EQU   SCBBSCFM
@NM00193 EQU   SCBBSCFM
SCBNPDTR EQU   SCBDATEN
SCBCNTEN EQU   SCBBSCFM
SCBRCVTX EQU   SCBBSCFM
SCBNONTR EQU   SCBBSCFM
SCBTRNSP EQU   SCBBSCFM
SCBENDCR EQU   SCBCTBAC+1
SCBCRLEN EQU   SCBCTBAC
SCBMRFSD EQU   IEDQSCB+20
@NM00192 EQU   SCBERR4
SCBTRMLN EQU   SCBERR4
SCBCONNN EQU   SCBERR4
SCBAPERR EQU   SCBTXTTN
SCBSLCTN EQU   SCBERR4
SCBTHRSN EQU   SCBATTN
SCBUSERN EQU   SCBERR3
SCBSATTN EQU   SCBERR3
SCBTMINN EQU   SCBERR3
SCBXPD   EQU   SCBTMIDN
SCBXPI   EQU   SCBLOSTN
SCBFRWDN EQU   SCBERR2
SCBOLTR  EQU   SCBERR2
SCBALN   EQU   SCBERR2
SCBCODER EQU   SCBERR2
SCBCRMAX EQU   SCBERR2
SCBCRMIN EQU   SCBERR2
SCBRVISL EQU   SCBCUTFN
SCBNOBFN EQU   SCBERR1
@NM00191 EQU   SCBERR1
SCBNOVAC EQU   SCBSEQLN
SCBNOTSO EQU   SCBSEQHN
SCBRVITX EQU   SCBNOTRM
SCBHANG  EQU   SCBORIGN
SCBNOLOG EQU   SCBHDRRN
SCBMRFPL EQU   IEDQSCB+13
SCBBFMM  EQU   SCBQTYPE
SCBBBFTM EQU   SCBQTYPE
SCBNOFF  EQU   SCBQTYPE
SCBCONC  EQU   SCBQTYPE
SCBNREUS EQU   SCBQTYPE
SCBREUS  EQU   SCBQTYPE
SCBCOREQ EQU   SCBQTYPE
SCBNORCL EQU   SCBQTYPE
SCBCTBSZ EQU   SCBEOBSZ
@NM00190 EQU   SCBBKFCT
SCBPRI   EQU   IEDQSCB+8
SCBMACR  EQU   SCBMBHEN
SCBSNDCT EQU   SCBRCVCT
SCBDESTQ EQU   IEDQSCB+1
SCBCODE  EQU   SCBSTATE
SCBPRER  EQU   SCBSTATE
SCBCKPT  EQU   SCBSTATE
SCBMSGLN EQU   SCBSTATE
SCBERSDS EQU   SCBSTATE
SCBLCK1N EQU   SCBSTATE
SCBMGFMN EQU   SCBSEQIN
SCBTRANP EQU   SCBSTATE
@NM00189 EQU   TRHBYTE2
@NM00188 EQU   TRHBYTE2
@NM00187 EQU   TRHBYTE2
TRHCSI   EQU   TRHBYTE2
@NM00186 EQU   TRHBYTE2
TRHPI    EQU   TRHBYTE1
@NM00185 EQU   TRHBYTE1
@NM00184 EQU   TRHBYTE1
@NM00183 EQU   TRHBYTE1
TRHER    EQU   TRHBYTE1
TRHDR2   EQU   TRHBYTE1
@NM00182 EQU   TRHBYTE1
TRHDR1   EQU   TRHBYTE1
@NM00181 EQU   TRHBYTE0
TRHTYPE  EQU   TRHBYTE0
QCBTTCIN EQU   QCBPLCBA+1
@NM00180 EQU   QCBPLCBA
@NM00179 EQU   QCBSTAT1
QCBFLUSH EQU   QCBSTAT1
QCBNDXRQ EQU   QCBSTAT1
QCBESIG  EQU   QCBSTAT1
QCBRCVRQ EQU   QCBSTAT1
QCBSNDRQ EQU   QCBSTAT1
QCBWAITC EQU   QCBSTAT1
QCBPLCBN EQU   QCBSTAT1
QCBCHAIN EQU   IEDNQCB
QCBPQBCK EQU   IEDQPQCB+25
QCBPRIPQ EQU   IEDQPQCB+24
QCBCFHDR EQU   IEDQPQCB+21
QCBLFEFO EQU   IEDQPQCB+18
QCBFFEFO EQU   IEDQPQCB+15
QCBPREVF EQU   QCBINTLF
QCBINTFF EQU   IEDQPQCB+9
QCBDATSQ EQU   QCBFHDTZ+1
@NM00178 EQU   QCBFHDTZ
@NM00177 EQU   QCBPFEFO
QCBDATFL EQU   QCBFHDLZ
QCBDNHDR EQU   IEDQPQCB
QCBQBACK EQU   IEDQQCB+37
QCBCKPT  EQU   QCBFLAG
QCBPROC  EQU   QCBFLAG
QCBSDFFO EQU   QCBFLAG
QCBTERMQ EQU   QCBFLAG
QCBRSRV  EQU   QCBFLAG
QCBREAD  EQU   QCBFLAG
QCBNOBRK EQU   QCBFLAG
QCBRELLN EQU   IEDQQCB+32
QCBTJID  EQU   QCBLKRRN+1
QCBCARCT EQU   QCBLKRRN
QCBPRLVL EQU   QCBPREN
QCBMSGCT EQU   IEDQQCB+26
QCBEXTO  EQU   QCBINTVL
QCBDISC  EQU   QCBTSOF1
QCBDELAY EQU   QCBTSOF1
QCBPARTO EQU   QCBTSOF1
QCBSATRD EQU   QCBTSOF1
QCBNOBUF EQU   QCBTSOF1
QCBTPUT  EQU   QCBTSOF1
QCBTGET  EQU   QCBTSOF1
QCBWRBRK EQU   QCBTSOF1
QCBSATLC EQU   QCBTSOF2
QCBSATTI EQU   QCBTSOF2
QCBSATCH EQU   QCBTSOF2
QCBSIMRD EQU   QCBTSOF2
QCBDSSMI EQU   QCBTSOF2
QCBPOSTO EQU   QCBTSOF2
QCBBUFQ  EQU   QCBTSOF2
QCBINHBN EQU   QCBTSOF2
QCBSATCT EQU   @NM00176
QCBSCBOF EQU   IEDQQCB+20
QCBTIME  EQU   QCBSTAT
QCBCLOCK EQU   QCBSTAT
QCBSCHDL EQU   QCBSTAT
QCBSMODE EQU   QCBSTAT
QCBSEND  EQU   QCBSTAT
QCBBUFRD EQU   QCBSTAT
QCBTRMHO EQU   QCBSTAT
QCBEOM   EQU   QCBSTAT
QCBHUCT  EQU   QCBRETCT
QCBIEND  EQU   QCBRETCT
QCBEND   EQU   QCBRETCT
QCBNL    EQU   QCBRETCT
QCBLOGCT EQU   QCBRETCT
@NM00175 EQU   QCBBYTE1
QCBRITRM EQU   QCBBYTE1
@NM00174 EQU   QCBEOLDT
QCBSLINK EQU   IEDQQCB+13
QCBSTPRI EQU   IEDQQCB+12
QCBSTCHN EQU   IEDQQCB+9
QCBSTVTO EQU   IEDQQCB+8
QCBLINK  EQU   IEDQQCB+5
QCBPRI   EQU   IEDQQCB+4
QCBELCHN EQU   IEDQQCB+1
QCBHELD  EQU   QCBDSFLG
QCBFQCB  EQU   QCBDSFLG
QCBDRQQ  EQU   QCBDSFLG
QCBALTMH EQU   QCBDSFLG
QCBREUS  EQU   QCBDISK
QCBNREUS EQU   QCBDISK
QCBCORE  EQU   QCBDSFLG
QCBTSQ   EQU   QCBDSFLG
PRF2SEQP EQU   PRF2WD2
@NM00173 EQU   IEDPF2+1
@NM00172 EQU   PRF2FLG2
PRF2SMI  EQU   PRF2FLG2
PRF2FORM EQU   PRF2FLG2
PRF2TNTI EQU   PRF2FLG2
PRF1RULN EQU   PRF1SEQP+2
PRF1TAG2 EQU   PRF1SQID+1
@NM00171 EQU   PRF1TAG1
PRF1TAGS EQU   PRF1TAG1
@NM00170 EQU   PRF1FLG1
PRF1LOGD EQU   PRF1FLG1
PRF1USS  EQU   PRF1FLG1
PRF1FORM EQU   PRF1FLG1
PRF1FIDI EQU   PRF1FLG1
PRFDEST  EQU   IEDQPRF+40
PRFISEQ  EQU   IEDQPRF+38
PRFSTXT  EQU   PRFHQBCK
PRFNHDR  EQU   PRFCHDR
PRFCRCD  EQU   IEDQPRF+29
PRFSVSEQ EQU   PRFNTXT+1
PRFSVPRI EQU   PRFEOBOF
@NM00169 EQU   PRFSCAN
PRFEOB   EQU   PRFXTRA+1
PRFSTSO  EQU   PRFXTRA
PRFNHDRN EQU   PRFSTAT1
PRFLOCK  EQU   PRFEOFN
PRFDUPLN EQU   PRFSTAT1
PRFITCPN EQU   PRFSTAT1
PRFERMGN EQU   PRFSTAT1
PRFCNCLN EQU   PRFSTAT1
PRFSVFLG EQU   @NM00168+3
@NM00167 EQU   PRFTICC
@NM00166 EQU   PRFTICC
@NM00165 EQU   PRFTICC
PRFTICON EQU   PRFTICC
@NM00164 EQU   PRFTICC
@NM00163 EQU   PRFTICC
PRFBFMM  EQU   PRFTICC
PRFEOMSG EQU   PRFTICC
PRFCOUNT EQU   PRFLINK+1
@NM00162 EQU   PRFLINK
PRFFLAGS EQU   PRFPRI
PRFIOADR EQU   PRFQCBA
PRFOPCDE EQU   PRFKEY
PLMVFLG2 EQU   IEDPLMV+19
@NM00161 EQU   PLMVFLG1
PLMVTCTG EQU   PLMVFLG1
PLMVSCTG EQU   PLMVFLG1
@NM00160 EQU   IEDPLBM+1
@NM00159 EQU   PLBMFLG1
PLBMSNDI EQU   PLBMFLG1
LGBIVLST EQU   IEDNLGB+60
LGBRESV4 EQU   LGBRESER+3
LGBRESV3 EQU   LGBRESER+2
LGBRESV2 EQU   LGBRESER+1
LGBRESV1 EQU   LGBRESER
@NM00158 EQU   IEDNLGB+53
LGBILCT  EQU   IEDNLGB+52
LGBSCTAD EQU   IEDNLGB+49
@NM00157 EQU   LGBOFLGS
LGBOPEN  EQU   LGBOFLGS
@NM00156 EQU   LGBOFLGS
LGBNAME  EQU   IEDNLGB+40
@NM00155 EQU   IEDNLGB+36
LGBTRANS EQU   IEDNLGB+33
@NM00154 EQU   IEDNLGB+32
@NM00153 EQU   IEDNLGB+31
LGBOPACE EQU   IEDNLGB+30
@NM00152 EQU   LGBBYTE
LGBBUFMA EQU   IEDNLGB+28
LGBDSORG EQU   IEDNLGB+26
@NM00151 EQU   LGBPCI
@NM00150 EQU   LGBPCI
LGBPCINO EQU   LGBPCI
@NM00149 EQU   LGBPCI
LGBPCIAO EQU   LGBPCI
@NM00148 EQU   LGBPCI
@NM00147 EQU   LGBPCI
@NM00146 EQU   LGBPCI
@NM00145 EQU   IEDNLGB+24
LGBMHA   EQU   IEDNLGB+21
@NM00144 EQU   LGBBUFOU
LGBPREF  EQU   LGBBUFOU
@NM00143 EQU   LGBBUFOU
LGBSUBST EQU   IEDNLGB+18
LGBTYPE  EQU   IEDNLGB+17
@NM00142 EQU   IEDNLGB
LCBERADR EQU   LCBXRADR+1
LCBPCIRC EQU   LCBXRADR
LCBDCT3  EQU   LCBXDCT+2
LCBDCT2  EQU   LCBXDCT+1
LCBDCT1  EQU   LCBXDCT
@NM00141 EQU   LCBXFLAG
LCBERPND EQU   LCBXFLAG
LCBSRCPF EQU   LCBXFLAG
LCBGPCTV EQU   LCBXFLAG
@NM00140 EQU   LCBXFLAG
@NM00139 EQU   LCBXFLAG
@NM00138 EQU   LCBXFLAG
@NM00137 EQU   LCBXFLAG
LCBCCW10 EQU   LCBCPA+72
LCBCCW9  EQU   LCBCPA+64
LCBCCW8  EQU   LCBCPA+56
LCBCCW7  EQU   LCBCPA+48
LCBCCW6  EQU   LCBCPA+40
LCBCCW5  EQU   LCBCPA+32
LCBCCW4  EQU   LCBCPA+24
LCBCCW3  EQU   LCBCPA+16
LCBCCW2  EQU   LCBCPA+8
LCBCCW1  EQU   LCBCPA
@NM00123 EQU   LCBERCCW
LCBCSWSV EQU   LCBSAVSN+1
LCBSNSV  EQU   LCBSAVSN
LCBBFSNS EQU   LCBRSPSV
LCBMHBID EQU   LCBSTAT6
LCBBFRSV EQU   LCBTPCD+1
@NM00122 EQU   LCBSTAT5
LCBLUS   EQU   LCBSTAT5
LCBLUNIT EQU   LCBSTAT5
LCBPERM  EQU   LCBSTAT5
LCBERMSK EQU   LCBOBRCH
LCBOLT   EQU   LCBMSGFM
LCBEOT   EQU   LCBMSGFM
LCBENQ   EQU   LCBMSGFM
LCBTTD   EQU   LCBMSGFM
LCBRSTRT EQU   LCBMSGFM
LCBVSTRT EQU   LCBMSGFM
LCBACKI  EQU   LCBMSGFM
LCBNAK   EQU   LCBMSGFM
@NM00121 EQU   LCBRBCT2
LCBDCNT  EQU   LCBRBCT2
LCBRBCT1 EQU   LCBERBCT
LCBERBCH EQU   IEDQLCB+85
LCBCOMPL EQU   LCBDLNKN
LCBPRCPG EQU   LCBERBST
LCBERROR EQU   LCBERBST
@NM00120 EQU   LCBERBST
LCBINQ   EQU   LCBERBST
LCBRDERR EQU   LCBERBST
LCBEOMSG EQU   LCBERBST
LCBMSG   EQU   LCBERBST
LCBERBLK EQU   IEDQLCB+81
LCBERBPY EQU   IEDQLCB+80
LCBERBQB EQU   LCBERB+1
LCBERBKY EQU   LCBERB
LCBRECAD EQU   IEDQLCB+73
@NM00119 EQU   LCBTSTSW
@NM00118 EQU   LCBTSTSW
@NM00117 EQU   LCBTSTSW
@NM00116 EQU   LCBTSTSW
@NM00115 EQU   LCBTSTSW
@NM00114 EQU   LCBTSTSW
@NM00113 EQU   LCBTSTSW
LCBCONCT EQU   LCBTSTSW
LCBRESP  EQU   LCBSTAT2
LCBBFRAV EQU   LCBDIAL
LCBATTN  EQU   LCBSYNC
LCBNEGRP EQU   LCBSTAT2
LCBSNDPR EQU   LCBSTAT2
LCBCONNN EQU   LCBBEOTN
LCBMSGNN EQU   LCBSTAT2
LCBTRACE EQU   LCBSTAT2
LCBSENDN EQU   LCBSTAT1
LCBRECVN EQU   LCBSTAT1
LCBFREEN EQU   LCBSTAT1
LCBCONT  EQU   LCBSTAT1
LCBINITN EQU   LCBSTAT1
LCBOCNI  EQU   LCBSTAT1
LCBCVRSP EQU   LCBCTLMD
LCBRCLLN EQU   LCBSTAT1
LCBRECOF EQU   IEDQLCB+68
LCBRDBFR EQU   LCBRCBFR
LCBUCBX  EQU   IEDQLCB+64
LCBTTBIN EQU   LCBERRCT
@NM00112 EQU   LCBINCAM
LCBGETMN EQU   LCBINCAM
LCBRESTR EQU   LCBRCQCB
LCBPCILK EQU   LCBDCBPT
LCBSTART EQU   LCBIOBSN+16
LCBAP4OL EQU   LCBSIOCC
LCBAP3OL EQU   LCBSIOCC
LCBAP2OL EQU   LCBSIOCC
LCBAP1OL EQU   LCBSIOCC
LCBSIOC2 EQU   LCBSIOCC
LCBSIOC1 EQU   LCBSIOCC
@NM00111 EQU   LCBSIOCC
LCBCSWRC EQU   LCBCSW+5
LCBCSCHC EQU   LCBCSWCS
LCBCSICC EQU   LCBCSWCS
LCBCSCCC EQU   LCBCSWCS
LCBCSCDC EQU   LCBCSWCS
LCBCSPTC EQU   LCBCSWCS
LCBCSPGC EQU   LCBCSWCS
LCBCSIL  EQU   LCBCSWCS
LCBCSPCI EQU   LCBCSWCS
LCBUSUC  EQU   LCBCSWUS
LCBUSDE  EQU   LCBCSWUS
LCBUSCE  EQU   LCBCSWUS
LCBUSBSY EQU   LCBCSWUS
LCBUSCUE EQU   LCBCSWUS
LCBUSSM  EQU   LCBCSWUS
LCBUSAT  EQU   LCBCSWUS
LCBCSWCA EQU   LCBCSW
LCBOBR   EQU   LCBFLAG3
LCBOBRRD EQU   LCBFLAG3
LCBIOMSG EQU   LCBFLAG3
LCBSOHC  EQU   LCBFLAG3
LCBRLAD  EQU   LCBFLAG3
LCBSOHR  EQU   LCBFLAG3
@NM00110 EQU   LCBFLAG3
LCBECBPT EQU   LCBIOBSN+4
LCBECBCC EQU   LCBIOBSN+3
LCBSENS1 EQU   LCBIOBSN+2
LCBABORT EQU   LCBTMOUT
LCBNOTIN EQU   LCBLOSDT
LCBOVRUN EQU   LCBSENS0
LCBDATCK EQU   LCBSENS0
LCBEQUCK EQU   LCBSENS0
LCBBUSCK EQU   LCBSENS0
LCBINTRQ EQU   LCBSENS0
LCBCMDRJ EQU   LCBSENS0
LCBFLAG2 EQU   LCBIOBSN
@NM00109 EQU   LCBFLAG1
LCBUNREL EQU   LCBFLAG1
LCBEXCPN EQU   LCBFLAG1
@NM00108 EQU   LCBFLAG1
LCBERPIN EQU   LCBFLAG1
@NM00107 EQU   LCBFLAG1
LCBFSBFR EQU   LCBMHA
LCBISZE  EQU   IEDQLCB+28
@NM00106 EQU   LCBSCBDA
LCBCPGMH EQU   LCBSTAT4
LCBREAL  EQU   LCBPHASE
@NM00105 EQU   LCBSTAT4
LCBACTRQ EQU   LCBSTAT4
LCBIPLRQ EQU   LCBSTAT4
LCBDACRQ EQU   LCBSTAT4
LCBDMPRQ EQU   LCBSTAT4
@NM00104 EQU   LCBLKMDE
LCBLOCKI EQU   LCBLKMDE
LCBLOCKR EQU   LCBLKMDE
LCBHMFLG EQU   LCBLKMDE
LCBBDFLG EQU   LCBLKMDE
@NM00103 EQU   LCBINSRC
LCBABRTN EQU   LCBCHAIN
LCBTETEN EQU   LCBCHAIN
LCBBFRSZ EQU   LCBCHAIN
LCBUREQN EQU   LCBCHAIN
LCBNORTY EQU   LCBCHAIN
LCBEXCP  EQU   LCBCHAIN
LCBINVRQ EQU   LCBSCRNN
LCB2741N EQU   LCBTSOB
LCBINHBN EQU   LCBTSOB
LCBCIRCD EQU   LCBTSOB
LCBPREP  EQU   LCBTSOB
LCBSOPL  EQU   LCBTSOB
LCBSATRD EQU   LCBTSOB
LCBTSBUF EQU   LCBTSOB
LCBWRBRK EQU   LCBTSOB
LCBTDL   EQU   IEDQLCB+18
LCBEOLTD EQU   IEDQLCB+16
LCBRSLNK EQU   IEDQLCB+13
LCBRSPRI EQU   IEDQLCB+12
LCBSTCBA EQU   IEDQLCB+9
LCBRSKEY EQU   IEDQLCB+8
LCBLINK  EQU   LCBRCB+5
LCBPRI   EQU   LCBRCB+4
LCBQCBA  EQU   LCBRCB+1
LCBKEY   EQU   LCBRCB
SAVTBITN EQU   IEDNSVTD+312
@NM00102 EQU   SAVTCKQB+8
@NM00101 EQU   SAVTCKEC+1
@NM00100 EQU   SAVTCKCC
SAVTCKPO EQU   SAVTCKCC
SAVTCKWA EQU   SAVTCKCC
SAVTCKCH EQU   SAVTCKTB+1
SAVTCKVT EQU   SAVTCKTB
@NM00099 EQU   IEDNSVTD+297
SAVTRDFG EQU   SAVTRDRV+12
@NM00098 EQU   SAVTRDRV+5
SAVTRDPY EQU   SAVTRDRV+4
SAVTRDQB EQU   SAVTRDRV+1
SAVTRDKY EQU   SAVTRDRV
SAVTNID  EQU   IEDNSVTD+280
SAVTDVAS EQU   IEDNSVTD+276
SAVTPLSZ EQU   IEDNSVTD+274
@NM00097 EQU   IEDNSVTD+273
SAVTSUBL EQU   IEDNSVTD+272
@NM00096 EQU   SAVTZELM+1
SAVTSUBM EQU   SAVTZELM
SAVTMHDX EQU   IEDNSVTD+268
SAVTNAT1 EQU   IEDNSVTD+266
SAVTSH20 EQU   IEDNSVTD+264
SAVTLCBS EQU   IEDNSVTD+260
SAVTTNTX EQU   IEDNSVTD+252
SAVTSUBV EQU   IEDNSVTD+247
SAVTSUBA EQU   IEDNSVTD+246
SAVTSIBC EQU   IEDNSVTD+244
SAVTSCPT EQU   SAVTTCPU
SAVTRQTG EQU   IEDNSVTD+236
SAVTRQCH EQU   IEDNSVTD+232
SAVTMAND EQU   IEDNSVTD+228
SAVTSPLN EQU   IEDNSVTD+224
SAVTNADL EQU   IEDNSVTD+222
SAVTNATL EQU   IEDNSVTD+220
SAVTMHTB EQU   IEDNSVTD+216
SAVTQRS  EQU   IEDNSVTD+208
SAVTRQIN EQU   IEDNSVTD+204
SAVTDFCO EQU   IEDNSVTD+200
SAVTSAO  EQU   IEDNSVTD+196
SAVTSARI EQU   IEDNSVTD+192
SAVTSAC  EQU   IEDNSVTD+188
SAVTSAI  EQU   IEDNSVTD+184
SAVTCSCI EQU   IEDNSVTD+180
SAVTSSRP EQU   IEDNSVTD+176
SAVTSSRQ EQU   IEDNSVTD+172
SAVTSCLU EQU   IEDNSVTD+168
SAVTXTRQ EQU   IEDNSVTD+164
@NM00095 EQU   IEDNSVTD+148
SAVTIPCQ EQU   IEDNSVTD+144
@NM00094 EQU   IEDNSVTD+136
@NM00093 EQU   IEDNSVTD+124
SAVTXFMO EQU   IEDNSVTD+120
@NM00092 EQU   IEDNSVTD+116
SAVTSSSR EQU   IEDNSVTD+112
SAVTSCPQ EQU   IEDNSVTD+108
SAVTLUSR EQU   IEDNSVTD+100
@NM00091 EQU   SAVTLUSQ+8
SAVTLUSP EQU   SAVTLUSQ+4
SAVTLUSB EQU   SAVTLUSQ
@NM00090 EQU   IEDNSVTD+84
SAVTSAT  EQU   IEDNSVTD+80
SAVTNAT  EQU   IEDNSVTD+76
SAVTCLUP EQU   IEDNSVTD+72
SAVTPIUT EQU   IEDNSVTD+68
SAVTRNTA EQU   IEDNSVTD+64
SAVTDNIR EQU   IEDNSVTD+60
SAVTCNIR EQU   IEDNSVTD+56
SAVTFLDH EQU   IEDNSVTD+52
SAVTSRTN EQU   IEDNSVTD+48
SAVTSREQ EQU   IEDNSVTD+44
SAVTFAIL EQU   IEDNSVTD+42
SAVTSUSE EQU   IEDNSVTD+40
SAVTSIB  EQU   IEDNSVTD+36
SAVTPRTN EQU   IEDNSVTD+32
@NM00089 EQU   IEDNSVTD+28
SAVTWH20 EQU   IEDNSVTD+26
SAVTPWT  EQU   IEDNSVTD+24
SAVTPRTQ EQU   IEDNSVTD+20
SAVTPREQ EQU   IEDNSVTD+16
SAVTPH20 EQU   IEDNSVTD+14
SAVTPUSE EQU   IEDNSVTD+12
SAVTPLCB EQU   IEDNSVTD+8
SAVTPOOL EQU   IEDNSVTD+4
SAVTPRMT EQU   SAVTDIAF
SAVTVIRT EQU   SAVTDIAF
AVTCPBNO EQU   IEDQAVTD+1172
AVTHRESS EQU   IEDQAVTD+1171
@NM00088 EQU   IEDQAVTD+1170
@NM00087 EQU   IEDQAVTD+1169
@NM00086 EQU   IEDQAVTD+1168
@NM00085 EQU   IEDQAVTD+1165
@NM00084 EQU   IEDQAVTD+1164
AVTHRESE EQU   @NM00083
AVTRADDR EQU   IEDQAVTD+1156
AVTNADDR EQU   IEDQAVTD+1152
AVTHRESN EQU   IEDQAVTD+1148
AVTVOLRN EQU   IEDQAVTD+1144
AVTTOTNN EQU   IEDQAVTD+1140
AVTTRCYN EQU   IEDQAVTD+1136
AVTRCTRN EQU   IEDQAVTD+1132
AVTNOVON EQU   IEDQAVTD+1128
AVTADEBN EQU   IEDQAVTD+1124
AVTVOLRR EQU   IEDQAVTD+1120
AVTTOTNR EQU   IEDQAVTD+1116
AVTTRCYR EQU   IEDQAVTD+1112
AVTRCTRR EQU   IEDQAVTD+1108
AVTNOVOR EQU   IEDQAVTD+1104
AVTADEBR EQU   IEDQAVTD+1100
AVTLODPT EQU   IEDQAVTD+1096
AVTIOBN  EQU   IEDQAVTD+1092
AVTIOBR  EQU   IEDQAVTD+1088
AVTCPBPT EQU   IEDQAVTD+1084
AVTFCPB  EQU   IEDQAVTD+1080
@NM00082 EQU   IEDQAVTD+1076
AVTINCPQ EQU   IEDQAVTD+1072
@NM00081 EQU   IEDQAVTD+1068
@NM00080 EQU   IEDQAVTD+1065
@NM00079 EQU   AVTBIT4
@NM00078 EQU   AVTBIT4
@NM00077 EQU   AVTBIT4
@NM00076 EQU   AVTBIT4
@NM00075 EQU   AVTBIT4
@NM00074 EQU   AVTBIT4
@NM00073 EQU   AVTBIT4
AVTRUFTN EQU   AVTBIT4
@NM00072 EQU   IEDQAVTD+1060
AVTNOBFQ EQU   IEDQAVTD+1056
@NM00071 EQU   IEDQAVTD+1052
AVTDKENQ EQU   IEDQAVTD+1048
@NM00070 EQU   IEDQAVTD+1044
AVTDKAPQ EQU   IEDQAVTD+1040
AVTCOPY  EQU   IEDQAVTD+1036
AVTIA    EQU   IEDQAVTD+1032
AVTFL    EQU   IEDQAVTD+1028
@NM00069 EQU   IEDQAVTD+1024
AVTNCPBQ EQU   IEDQAVTD+1020
AVTTOTNC EQU   IEDQAVTD+1016
AVTCMAX  EQU   IEDQAVTD+1012
AVTCMIN  EQU   IEDQAVTD+1008
AVTHM02  EQU   IEDQAVTD+1004
AVTOPCIN EQU   IEDQAVTD+1002
AVTDCTLN EQU   IEDQAVTD+1000
AVTOPMSK EQU   IEDQAVTD+996
AVTDDFT  EQU   IEDQAVTD+992
AVTSTEAL EQU   IEDQAVTD+988
AVTOPTN  EQU   IEDQAVTD+984
AVTDSKCT EQU   IEDQAVTD+982
AVTCKRST EQU   IEDQAVTD+981
AVTSTAN  EQU   AVTBIT3
AVTSTACN EQU   AVTBIT3
AVTSTAIN EQU   AVTBIT3
AVTSTAYN EQU   AVTBIT3
AVTOLTBN EQU   AVTBIT3
AVTTSAB  EQU   AVTBIT3
AVTRFULN EQU   AVTBIT3
AVTRECVN EQU   AVTBIT3
@NM00068 EQU   AVTBIT2
@NM00067 EQU   AVTBIT2
AVTOPEIN EQU   AVTBIT2
AVTSTRTN EQU   AVTBIT2
AVTTOPOL EQU   AVTBIT2
AVTCOPYN EQU   AVTBIT2
AVTREUSN EQU   AVTBIT2
AVTEXTSC EQU   AVTBIT2
AVTDISKN EQU   AVTBIT1
AVTQUCKN EQU   AVTBIT1
AVTCLOSN EQU   AVTBIT1
AVTREADN EQU   AVTBIT1
AVTDLAYN EQU   AVTBIT1
AVTAQTAN EQU   AVTBIT1
AVTTSON  EQU   AVTBIT1
AVTAPLKN EQU   AVTBIT1
AVTDUMBR EQU   IEDQAVTD+976
AVTDLQX  EQU   IEDQAVTD+974
AVTINTLV EQU   IEDQAVTD+972
AVTSMCNT EQU   IEDQAVTD+970
AVTAVFCT EQU   IEDQAVTD+968
AVTOPCON EQU   IEDQAVTD+966
AVTOPCNT EQU   IEDQAVTD+964
AVTLNCNT EQU   IEDQAVTD+962
AVTHA16  EQU   IEDQAVTD+958
AVTHA7   EQU   IEDQAVTD+956
AVTHA4   EQU   IEDQAVTD+954
AVTHA3   EQU   IEDQAVTD+952
AVTHA2   EQU   IEDQAVTD+950
AVTGETMS EQU   IEDQAVTD+949
@NM00066 EQU   IEDQAVTD+948
AVTGETMD EQU   IEDQAVTD+944
AVTGETMN EQU   IEDQAVTD+940
AVTCWTOT EQU   IEDQAVTD+936
AVTCWINT EQU   IEDQAVTD+884
AVTDTRAP EQU   IEDQAVTD+880
@NM00065 EQU   IEDQAVTD+878
@NM00064 EQU   AVTIOTR
AVTIOTRH EQU   AVTIOTR
AVTIOTRE EQU   AVTIOTR
@NM00063 EQU   AVTSUBT
AVTSUBPT EQU   AVTSUBT
AVTSUBON EQU   AVTSUBT
AVTAFE30 EQU   IEDQAVTD+872
AVTAFE20 EQU   IEDQAVTD+868
AVTAFE10 EQU   IEDQAVTD+864
AVTCWEC2 EQU   IEDQAVTD+860
AVTCWPM2 EQU   IEDQAVTD+856
AVTCWTS2 EQU   IEDQAVTD+855
AVTCWTS1 EQU   IEDQAVTD+854
AVTCWCLD EQU   AVTCWFL2
AVTCWRAP EQU   AVTCWFL2
@NM00062 EQU   AVTCWFL2
@NM00061 EQU   AVTCWFL2
@NM00060 EQU   AVTCWFL2
@NM00059 EQU   AVTCWFL2
@NM00058 EQU   AVTCWFL2
AVTCWACT EQU   AVTCWFL2
@NM00057 EQU   AVTCWFL1
@NM00056 EQU   AVTCWFL1
@NM00055 EQU   AVTCWFL1
@NM00054 EQU   AVTCWFL1
@NM00053 EQU   AVTCWFL1
@NM00052 EQU   AVTCWFL1
@NM00051 EQU   AVTCWFL1
AVTCOMWN EQU   AVTCWFL1
AVTCWEC1 EQU   IEDQAVTD+848
AVTCWPM1 EQU   IEDQAVTD+844
AVTCAREA EQU   IEDQAVTD+840
AVTFZERO EQU   IEDQAVTD+836
AVTCADDR EQU   IEDQAVTD+832
AVTCOREC EQU   IEDQAVTD+828
@NM00050 EQU   IEDQAVTD+820
AVTCPBCB EQU   IEDQAVTD+816
@NM00049 EQU   IEDQAVTD+808
AVTDSIOB EQU   IEDQAVTD+804
@NM00048 EQU   IEDQAVTD+796
AVTCPRMB EQU   IEDQAVTD+792
@NM00047 EQU   IEDQAVTD+784
AVTCLOSB EQU   IEDQAVTD+780
@NM00046 EQU   IEDQAVTD+772
AVTACTIB EQU   IEDQAVTD+768
@NM00045 EQU   IEDQAVTD+764
AVTOLTEB EQU   IEDQAVTD+760
AVTOLTCH EQU   AVTOLTQB+1
AVTOLTVT EQU   AVTOLTQB
@NM00044 EQU   AVTOPCQB+8
@NM00043 EQU   AVTOPCEC+1
@NM00042 EQU   AVTOPCCC
AVTOPCPO EQU   AVTOPCCC
AVTOPCWA EQU   AVTOPCCC
AVTOPCCH EQU   AVTOPCOB+1
AVTOPCVT EQU   AVTOPCOB
@NM00041 EQU   AVTCKPQB+9
AVTCKPTS EQU   AVTCKPQB+8
@NM00040 EQU   AVTCKPEC+1
@NM00039 EQU   AVTCKPCC
AVTCKPPO EQU   AVTCKPCC
AVTCKPWA EQU   AVTCKPCC
AVTCKPCH EQU   AVTCKPTB+1
AVTCKPVT EQU   AVTCKPTB
@NM00038 EQU   IEDQAVTD+724
@NM00037 EQU   IEDQAVTD+712
AVTBFREB EQU   IEDQAVTD+708
AVTTIMQ  EQU   IEDQAVTD+704
@NM00036 EQU   IEDQAVTD+700
AVTIMQPS EQU   IEDQAVTD+696
AVTINOUT EQU   IEDQAVTD+694
AVTREFTM EQU   IEDQAVTD+692
@NM00035 EQU   IEDQAVTD+680
AVTDELYB EQU   IEDQAVTD+676
AVTOCQPT EQU   IEDQAVTD+672
AVTTSOPT EQU   IEDQAVTD+668
AVTSUPPT EQU   IEDQAVTD+664
AVTCBQCB EQU   IEDQAVTD+660
AVTMSGS  EQU   IEDQAVTD+657
@NM00034 EQU   AVTSYSER
@NM00033 EQU   AVTSYSER
@NM00032 EQU   AVTSYSER
@NM00031 EQU   AVTSYSER
@NM00030 EQU   AVTSYSER
@NM00029 EQU   AVTSYSER
AVTCMAXN EQU   AVTSYSER
AVTCMINN EQU   AVTSYSER
AVT2260L EQU   IEDQAVTD+652
AVTABEPL EQU   AVTADBUF
AVTHFF   EQU   AVTCLRHI+2
@NM00028 EQU   AVTCLRHI
AVTCCLNK EQU   AVTCRELE+5
AVTCCPRI EQU   AVTCRELE+4
AVTCCQCB EQU   AVTCCELE+1
AVTCCKEY EQU   AVTCCELE
AVTDELAD EQU   IEDQAVTD+632
AVTDELEM EQU   IEDQAVTD+628
AVTBSX   EQU   AVTCKLNK
AVTOPETR EQU   AVTHG01
@NM00027 EQU   AVTCKBYT
AVTCKONQ EQU   AVTCKBYT
@NM00026 EQU   AVTCKBYT
@NM00025 EQU   AVTCKBYT
@NM00024 EQU   AVTCKBYT
@NM00023 EQU   AVTCKBYT
@NM00022 EQU   AVTCKBYT
@NM00021 EQU   AVTCKBYT
AVTOPERT EQU   IEDQAVTD+618
AVTOPXCL EQU   IEDQAVTD+616
AVTOPERL EQU   IEDQAVTD+615
@NM00020 EQU   IEDQAVTD+614
AVTCKTIM EQU   IEDQAVTD+612
AVTCKELV EQU   IEDQAVTD+610
AVTCPRCD EQU   IEDQAVTD+609
AVTWARMN EQU   AVTCKELF
AVTCRTLN EQU   AVTCKELF
AVTCPIPN EQU   AVTCKELF
AVTCCLCN EQU   AVTCKELF
AVTCINCN EQU   AVTCKELF
@NM00019 EQU   AVTCKELF
AVTCMCPN EQU   AVTCKELF
AVTCRDYN EQU   AVTCKELF
AVTCKQAD EQU   IEDQAVTD+605
AVTSCBSZ EQU   IEDQAVTD+604
@NM00018 EQU   IEDQAVTD+600
AVTCKELE EQU   IEDQAVTD+596
@NM00017 EQU   AVTCKPEL+8
AVTCKRLK EQU   AVTCKPEL+5
AVTCKRPR EQU   AVTCKPEL+4
AVTCKRMQ EQU   AVTCKRMV+1
AVTCKRKY EQU   AVTCKRMV
AVTHK    EQU   IEDQAVTD+576
AVTHI    EQU   IEDQAVTD+572
AVTIOT   EQU   IEDQAVTD+568
AVTNX    EQU   IEDQAVTD+564
AVTTONE  EQU   IEDQAVTD+560
AVTA3TL  EQU   IEDQAVTD+556
AVTDMECB EQU   IEDQAVTD+552
AVTABEND EQU   IEDQAVTD+546
AVTPLCBN EQU   IEDQAVTD+544
@NM00016 EQU   AVTSAVTP+1
@NM00015 EQU   AVTSAVTF
AVTSNA   EQU   AVTSAVTF
AVTONSNA EQU   AVTSAVTF
AVTVTMCP EQU   AVTSAVTF
@NM00014 EQU   IEDQAVTD+536
AVTCMBSS EQU   IEDQAVTD+532
AVTRCV   EQU   IEDQAVTD+528
AVTSEND  EQU   IEDQAVTD+524
AVTCSCH  EQU   IEDQAVTD+520
AVTQ1    EQU   IEDQAVTD+516
AVTE7    EQU   IEDQAVTD+512
AVTHB    EQU   IEDQAVTD+508
AVTR1    EQU   IEDQAVTD+504
AVTBZ    EQU   IEDQAVTD+500
AVTEZ    EQU   IEDQAVTD+496
AVTEC    EQU   IEDQAVTD+492
AVTEW    EQU   IEDQAVTD+488
AVTNDIAL EQU   AVTSCOPT
AVTN2741 EQU   AVTSCOPT
AVTCONCO EQU   AVTSCOPT
AVTCONC  EQU   AVTSCOPT
AVTCMBUF EQU   AVTSCOPT
AVTAPDMP EQU   AVTSCOPT
@NM00013 EQU   AVTSCOPT
AVTHA    EQU   AVTDISP
AVTEA    EQU   IEDQAVTD+476
AVTAX    EQU   IEDQAVTD+472
AVTA3    EQU   IEDQAVTD+468
AVTGD    EQU   IEDQAVTD+464
AVTAL    EQU   IEDQAVTD+460
AVTOLTST EQU   AVTHG02
AVTE8    EQU   IEDQAVTD+452
AVTUI    EQU   IEDQAVTD+448
AVTCOMPT EQU   IEDQAVTD+444
AVTCRSRF EQU   IEDQAVTD+440
@NM00012 EQU   IEDQAVTD+436
AVTKA02  EQU   IEDQAVTD+432
AVTOPTPT EQU   IEDQAVTD+428
AVTPCBPT EQU   IEDQAVTD+424
AVTOSECB EQU   IEDQAVTD+420
AVTOPECA EQU   IEDQAVTD+416
AVTOLECA EQU   IEDQAVTD+412
AVTCKECA EQU   IEDQAVTD+408
AVTCWECA EQU   IEDQAVTD+404
AVTCWTCB EQU   IEDQAVTD+400
AVTOLTCB EQU   IEDQAVTD+396
AVTOCTCB EQU   IEDQAVTD+392
AVTCKTCB EQU   IEDQAVTD+388
AVTAS    EQU   IEDQAVTD+384
AVTNOLBF EQU   IEDQAVTD+382
AVTNCKPR EQU   IEDQAVTD+381
AVTCIB   EQU   IEDQAVTD+380
AVTSPLPT EQU   IEDQAVTD+376
AVTMVBFR EQU   IEDQAVTD+372
AVTSBTA  EQU   IEDQAVTD+368
AVTRARTN EQU   IEDQAVTD+364
AVTBSCAN EQU   IEDQAVTD+360
AVTRDYA  EQU   IEDQAVTD+356
AVTDISTR EQU   IEDQAVTD+348
AVTPARM3 EQU   IEDQAVTD+344
@NM00011 EQU   AVTPKF
@NM00010 EQU   AVTPKF
@NM00009 EQU   AVTPKF
AVTFTCHF EQU   AVTPKF
@NM00008 EQU   AVTPKF
@NM00007 EQU   AVTPKF
@NM00006 EQU   AVTPKF
@NM00005 EQU   AVTPKF
AVTPARM  EQU   IEDQAVTD+336
AVTEXS2A EQU   IEDQAVTD+330
AVTEXA2S EQU   IEDQAVTD+324
AVTOCGET EQU   IEDQAVTD+320
AVTCKAVT EQU   @NM00003+1
@NM00004 EQU   AVTCKFLG
AVTCKHLT EQU   AVTCKFLG
AVTCKREQ EQU   AVTCKFLG
AVTCKENV EQU   AVTCKFLG
AVTCKNAC EQU   AVTCKFLG
AVTCKTAC EQU   AVTCKFLG
@NM00002 EQU   IEDQAVTD+312
AVTREADD EQU   IEDQAVTD+308
AVTREADY EQU   IEDQAVTD+304
AVTRACE  EQU   IEDQAVTD+300
AVTTCB   EQU   IEDQAVTD+296
AVTPASWD EQU   IEDQAVTD+288
AVTCTLCH EQU   IEDQAVTD+280
AVTDOUBL EQU   IEDQAVTD+272
AVTDOUBX EQU   IEDQAVTD+264
AVTDPARM EQU   IEDQAVTD+260
AVTCSTCS EQU   IEDQAVTD+256
AVTDLQ   EQU   AVTSAVEX+32
@NM00001 EQU   AVTSAVEX
AVTSAVE4 EQU   IEDQAVTD+144
AVTSAVE3 EQU   IEDQAVTD+72
AVTSAVE2 EQU   IEDQAVTD
.@UNREFD ANOP                          END UNREFERENCED COMPONENTS
@RC00579 EQU   @RC00577
@RC00586 EQU   @RC00584
@RC00592 EQU   @RC00584
@RC00612 EQU   @RC00610
@RC00620 EQU   @RC00610
@RF00630 EQU   @RC00610
@RC00729 EQU   @RC00727
@RC00732 EQU   @RC00727
@RF00735 EQU   @RC00727
@RF00758 EQU   @EL00009
@RF00787 EQU   @RC00785
@RF00792 EQU   @RC00785
@RF00805 EQU   @RC00802
@RC00837 EQU   @RC00835
@RC00843 EQU   @RC00835
@RF00882 EQU   @RC00874
@RC00877 EQU   @RC00874
@RC00902 EQU   @RC00898
@RC00919 EQU   @RC00917
@RF00942 EQU   @RC00939
@RF00959 EQU   @RC00955
@RF00951 EQU   @EL00015
@RF00982 EQU   @EL00015
@RC01023 EQU   @RC01021
@RC01038 EQU   @RC01036
@RC01082 EQU   @RC01080
@RF01096 EQU   @RC01094
@RC01098 EQU   @RC01094
@RF01104 EQU   @RC01094
@RC01132 EQU   @RC01128
@PB00019 EQU   @EL00001
@RC00594 EQU   @RC00592
@RF00623 EQU   @RC00620
@PB00018 EQU   @PB00019
@RF00596 EQU   @RC00594
@PB00017 EQU   @PB00018
@PB00016 EQU   @PB00017
@PB00015 EQU   @PB00016
@PB00014 EQU   @PB00015
@PB00013 EQU   @PB00014
@PB00012 EQU   @PB00013
@PB00011 EQU   @PB00012
@PB00010 EQU   @PB00011
@PB00009 EQU   @PB00010
@PB00008 EQU   @PB00009
@PB00007 EQU   @PB00008
@PB00006 EQU   @PB00007
@PB00005 EQU   @PB00006
@PB00004 EQU   @PB00005
@PB00003 EQU   @PB00004
@PB00002 EQU   @PB00003
@ENDDATA EQU   *
         END   IEDRQIN,(C'PLS2224',0701,77014)
